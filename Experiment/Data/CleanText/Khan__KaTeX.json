{
    "alopatin": "And a github pages thing! Otherwise I keep having to go to http://www.mathjax.org/demos/.\n. ",
    "sophiebits": "Let's get square roots working first, at least.\n. They're not yet. We're not yet advertising KaTeX for general public consumption, but when we do we'll be sure to flesh out all the docs.\n. Can we add build/.gitkeep instead?\n. touch build/.gitkeep\ngit add -f build/.gitkeep\n:)\n. That project is for typesetting complete documents and uses MathJax to typeset the formulas -- maybe when KaTeX is a little more mature we could make a version that uses KaTeX instead.\n. (Also bins at the end of an expression, see #355.)\n. Copying from #121:\n\nWe should support embedding math inside a \\text command using $...$ delimiters and perhaps also \\( ... \\). This shouldn't be too hard but there are a couple things to watch out for:\n- It's not enough to do a simple match on /\\$.*?\\$/ because something like \\text{I have $\\$20$.} should work and show \"I have $20.\"\n- In a script, the font should be smaller but it seems that the spacing is as if in regular textstyle. For example, 2^{\\text{$2x+3$}} + 2^{2x+3} turns into:\n\n  in LaTeX. And if \\text is in a \\displaystyle context, any embedded math should be \\textstyle.\n. Fixed by a75bf1afc2b13540dbfa051b66642bf5db53d241.\n. I have a patch for this that's almost done.\n. (006a0a761c59a99acbfc2ce48ce717dae1e76a6b)\n. 925c96dbe24080bfc7b98a08ecdc4110a9fa01a6\n. Closing for #243 which has a bunch of comments.\n. mrrh?\n. That's clever. CDATA isn't even valid in HTML5 though (only SVG and MathML): https://html.spec.whatwg.org/#cdata-sections.\n. %.*?\\n? is also equivalent to @xsznix's in case you need more ways to do this.\n\nMy \"mrrh?\" comment was ambivalence about the correct answer. I'm not sure it makes sense to allow it at the end of an expression \u2013 since you can't do $x%y$ in TeX without a newline. Maybe it does.. The fact that this exists feels like a small argument in favor of not supporting ending comments:\nhttps://github.com/Khan/KaTeX/blob/a358c5a94c86a13bd3381334c9ad4ca23cd57781/dockers/texcmp/texcmp.js#L62. Yes, but only if you're expecting this behavior! The fact that it isn't that already indicates that you wouldn't. Someone else might equally try to build a web writing interface that accepts KaTeX and turns into a full TeX document later and be bitten by this.. In Perseus (or auto-render), I also wouldn't want typing $x%y$ to render a mathy x. It's confusing.\nWhat's the value in allowing comments without newlines? If you really want to do that you can always just tack on a newline to the input expression when calling KaTeX.. Curious: are you using KaTeX for something? looking to contribute? just exploring?\n. We're just about done with square roots, hasn't quite landed yet. (Come visit our new office \u2013 email me!)\n. You're right!\n. Yup, planning on both of these for the initial release.\n. There's no reason we should support quirks mode, which is how browsers act without a doctype. jQuery doesn't support quirks mode, for instance.\n. Indeed -- we'll update the website when we next do a release which is hopefully in the next few days.\n. If we support \\newcommand directly, I would lean towards scoping the definitions to the expression they're defined in, and perhaps there can be a separate global configuration for macros shared across the whole page.\n. I was imagining we would mark the MathML with CSS along the following lines:\nclip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  width: 1px\nand mark the presentational HTML with aria-hidden.\n. I believe I tested a similar setup with VoiceOver a couple months ago and it worked. It's what Facebook uses for some accessibility hints in their interface.\n. Merging into #19.\n. The website wasn't on 0.3.0; now it is.\n. on Chrome Mac I see the same as @DoubleFelix\u2026\n. These should all be in master now; planning to do a release soon.\n. These should all be in master now; planning to do a release soon.\n. @jmeas Not sure why you commented here, but we're fine with the CLA for this.\n. Ideally, it would line up exactly. Due to small differences in font rendering, it's hard to make this happen consistently but there may be improvements we can make; not sure.\n. What about if the outer font size is different sizes? Like 16px, 15px, 14px, 13px, 12px, 11px, 10px. It used to be that many of those would be misaligned.. Those look much bigger than the sizes I mentioned? Not sure if I'm missing something.. OK cool. That looks good! Oftentimes in the past I saw that they would not line up at small sizes but would line up if you zoomed in.. #398 landed, though there hasn't been a KaTeX release with it yet. I think MathJax treats align* and aligned interchangeably so align* should be super easy (assuming we want to match that), though we should double check.\n. I think aligned (not align) should work that way.\n. Note that the Apache Software Foundation has essentially the same CLA:\nhttp://www.apache.org/licenses/icla.txt\nGoogle, Facebook, and Dropbox use the same CLA too.\n. http://xkcd.com/1170/\nSorry \u2013 we'd love to have you a contributor but we've decided to require a CLA for all KaTeX contributions to give us the flexibility to relicense the project in the future if we want to. Our lawyers recommended this CLA.\nI'm going to close this PR out but if you change your mind I'd be happy to merge this in.\n. Perhaps returning something that indicates whether the rendering was successful is friendlier. I don't really want to have an option for whether it throws or not though \u2013 it should always throw or never throw.\n. I could imagine us returning some sort of success/error object but it would probably not be a promise.\n. Right now the set of characters supported by the lexer is a little bit conservative:\nhttps://github.com/Khan/KaTeX/blob/b7e55607cc14fdb50d82a556738582350cc0f996/src/Lexer.js#L28-L53\nI don't have a good handle right now on what's necessary to parse unicode characters properly \u2013 for example, \"\u00e9\" should probably be processed as an ord, but \"\u2260\" should be a rel. We also are constrained by what the fonts support \u2013 it may be that the fonts don't support \"\u00e9\" directly but that we can interpret it as \"\\acute e\" which should look equivalent.\n. If you add \\displaystyle at the beginning of your expression you'll get the larger version. We should add an option to control this directly from JS though.\n. What style to use is more a function of where in the text the math appears \u2013 inline math traditionally uses \"text style\", whereas equations that appear on their own lines use \"display style\". For example, this input:\n```\nOnce I tried to find $\\int_0^1 x^2\\,dx$.\nOnce I tried to find [ \\int_0^1 x^2\\,dx. ]\n```\nproduces this output in LaTeX:\n\n. (We added a new flag\u2026)\nkatex.render(\"c = \\\\pm\\\\sqrt{a^2 + b^2}\", element, { displayMode: true });\n. I can reliably repro this only on retina screens. Not sure how to fix.\n. @kevinb7 padding-right on which element? All of them?\n. I don't think we support \\over right now, just \\frac.\n. Ah, you need to escape the backslashes. Right now I think they're getting lost before KaTeX even sees the string.\n. I don't know what you're doing with cheerio, but your REPL example doesn't work because you need to write \\\\ inside a JS string literal. Compare:\n```\n\nconsole.log(\"x = {-c \\pm \\sqrt{b^2-4ac} \\over 2a}.\")\nx = {-c pm sqrt{b^2-4ac} over 2a}.\n```\n\n```\n\nconsole.log(\"x = {-c \\pm \\sqrt{b^2-4ac} \\over 2a}.\")\nx = {-c \\pm \\sqrt{b^2-4ac} \\over 2a}.\n```\n\nYour change there replaces backslashes with forward slashes, which is not what you want.\n. Where does the string come from? If it is embedded as a JS string literal in your JS source code, you need to add the backslashes manually. Otherwise, you shouldn't need to do anything.\n. Thanks!\n. Thanks for the PR. I don't think we want to do this for now.\n. The math tag is specifically for MathML so I don't think we should use exactly that syntax, but it might be nice to include utilities for processing tags with a certain class name or something along those lines.\n. These should be in master now already; planning to do a release soon.\n. These should all be in master now; planning to do a release soon.\n. Since this can easily be done outside of KaTeX proper and we're trying to keep the API small, I'm going to mark this as won't fix.\n. This is intentional, and consistent with TeX's behavior. If you want a^{b^c}, you should write it that way to distinguish it from {a^b}^c.\n. (The TeXbook states: It is illegal to type \u2018x^y^z\u2019 or \u2018x_y_z\u2019; TeX will complain of a \u201cdouble superscript\u201d or \u201cdouble subscript.\u201d You must type \u2018x^{y^z}\u2019 or \u2018x^{yz}\u2019 or \u2018x_{y_z}\u2019 or \u2018x_{yz}\u2019 in order to make your intention clear.)\n. There should also be support here for \\choose mapping to \\binom (which we don't support yet). I imagine this could easily be added as a property on the \"over\" atom type.\nDoes this work with nested fractions like {x \\over y} \\over 2?\n. It looks like \\displaystyle 2 \\over 3 parses in TeX as {\\displaystyle 2} \\over 3, not \\displaystyle {2 \\over 3} as it seems to here.\n. If you run \"git reflog\" you can see a history of what commits you had checked out so you can see where you were before the rebase. I think that's probably commit d3f42558. You can then reset your branch to that commit by running git reset --hard <sha> (which will blow away any other changes). If you then rebase -i again but delete the lines corresponding to merges, I think you'll have the right thing. Hope that makes sense.\n. I just ran pdftex on\n$\\displaystyle 2 \\over 3$\n\\bye\nand noted that the 2 is larger than the 3.\n. KaTeX uses (inline) text style by default; you can use \\displaystyle and \\textstyle to switch between them.\n. Yes, that's precisely why KaTeX should throw for this case. We haven't updated Khan Academy to the latest version of KaTeX yet for this exact reason.\n. Fixed by def1a47935cce6531323134380fc394b1376e1b5.\n. Going to merge this into #26 as it's essentially the same issue.\n. Thanks!\n. Oops, I ended up doing this in d3ab5a1fc6f9325712c603c715c419640f4bde24. Thanks for sending this in though \u2013 sorry it took so long to respond!\n. Let's do what jQuery does and tag releases with the dist files checked in but have those commits not be on master:\nhttps://github.com/jquery/jquery/commit/4dec426aa2a6cbabb1b064319ba7c272d594a688\n. We've already tagged the existing releases; I'd rather not change those tags. We can do it going forward though.\n. Yeah, the unfortunate thing is that bower versions have to match the tag names, so the bower version would be unclean in that case. Our breaking changes (just one, I think?) have been fairly minor and so hopefully it's not too much work to upgrade. (And it sounds like you've already got a working build setup so I'm not as concerned\u2026)\n. Still waiting for the next release, when we'll commit the built files and publish a bower package. \n. Definitely. I thought they were already but I guess not:\n$ curl -s https://registry.npmjs.org/katex/-/katex-0.5.1.tgz | tar tvf -\n-rw-r--r--  0 1000   10        756 Sep  1 19:44 package/package.json\n-rw-r--r--  0 1000   10       3479 Sep  1 19:39 package/README.md\n-rwxr-xr-x  0 1000   10        899 Jul 17  2015 package/cli.js\n-rw-r--r--  0 1000   10       2196 Jul 17  2015 package/katex.js\n-rw-r--r--  0 1000   10       1289 Jul 17  2015 package/LICENSE.txt\n-rw-r--r--  0 1000   10       5653 Jul 17  2015 package/src/Lexer.js\n-rw-r--r--  0 1000   10      51489 Sep  1 16:38 package/src/buildHTML.js\n-rw-r--r--  0 1000   10      14888 Sep  1 16:38 package/src/buildMathML.js\n-rw-r--r--  0 1000   10       1088 Sep  1 16:38 package/src/buildTree.js\n-rw-r--r--  0 1000   10      14287 Sep  1 16:38 package/src/buildCommon.js\n-rw-r--r--  0 1000   10       7223 Mar 12  2015 package/src/domTree.js\n-rw-r--r--  0 1000   10       6318 Sep  1 16:38 package/src/environments.js\n-rw-r--r--  0 1000   10       3930 Sep  1 16:38 package/src/fontMetrics.js\n-rw-r--r--  0 1000   10     128060 Sep  1 16:38 package/src/fontMetricsData.js\n-rw-r--r--  0 1000   10      19862 Sep  1 16:38 package/src/functions.js\n-rw-r--r--  0 1000   10       3195 Feb 18  2015 package/src/Style.js\n-rw-r--r--  0 1000   10       2693 Mar 12  2015 package/src/mathMLTree.js\n-rw-r--r--  0 1000   10        783 Sep  1 19:39 package/src/Settings.js\n-rw-r--r--  0 1000   10        444 Jul 17  2015 package/src/parseData.js\n-rw-r--r--  0 1000   10      24524 Sep  1 19:39 package/src/Parser.js\n-rw-r--r--  0 1000   10        377 Mar 10  2015 package/src/parseTree.js\n-rw-r--r--  0 1000   10       1322 Feb  6  2015 package/src/ParseError.js\n-rw-r--r--  0 1000   10      60176 Sep  1 16:38 package/src/symbols.js\n-rw-r--r--  0 1000   10       4904 Sep  1 16:38 package/src/Options.js\n-rw-r--r--  0 1000   10       2306 Jul 17  2015 package/src/utils.js\n-rw-r--r--  0 1000   10      18861 Sep  1 16:38 package/src/delimiter.js\n. Want to send a PR?\n. Yes, sorry! Thanks for the catch.\n. We can define these as aliases once we have support for something like \\def and/or \\newcommand.\n. @kevinb7 One of them should definitely have numbers, but there's no text font. In Concrete Mathematics (the book for which the font was made) they used a text font called Concrete:\nhttp://tex.stackexchange.com/questions/103983/how-do-i-use-ams-euler#comment227008_103983\n. We can probably fix this by adding text-indent: 0; in our CSS.\n. Right now we don't support any great ways of doing multiline layout with KaTeX but once we support \\begin{align} and friends that'll be the recommended solution.\n. KaTeX doesn't (currently) do any processing automatically, so it renders whenever you call katex.render. You can do that in onload or on DOMContentLoaded or directly near the end of the body \u2013 not sure where you were seeing that KaTeX listens to the load event.\n. Sounds like everything was resolved here \u2013 let me know if not and I'll reopen.\n. Let's stick to things supported in LaTeX with amsmath for now.\n. For now I would probably just special-case it as a negative margin-right on the cfrac styles instead of implementing \\kern.\n. We've done several KaTeX releases. You'll have to ask the maintainer of the Meteor plugin about the release schedule for that \u2013 looks like @stubailo?\n. Maybe-stupid question: why is this its own command type instead of just being one of the supported symbols?\n. Oh! I see.\n. > In particular, if someone makes a change that improves things, we don't want the tests to have counted as failing.\nWell, we do if the screenshots haven't been updated \u2013 right? The screenshots should always match the latest code and Travis is a good way to enforce that.\n. What is \\span? http://tex.stackexchange.com/a/33266/9 indicates that it's already a builtin command (not an operator).\n. \\Span also doesn't exist by default in LaTeX or with amsmath loaded, so it probably shouldn't be a built-in part of KaTeX. We should support \\operatorname which allows you to write \\operatorname{span} to get the same effect, and after #37 you will be able to define your own commands.\n. Thanks for sending this in. These should all be in master now except \\implies and \\iff which we'll add soon.\n. Actually, I'm going to close this out but we have #190 now to track those two.\n. lim sup should be lim\\,sup if I remember correctly.. I disagree that this is a dupe. @iamdanfox How are you hoping to load the CSS? Via webpack or similar? By directly referencing the file in node_modules?\n. These aren't present in TeX or LaTeX so we're not sure if we want these. This might be a case where we ask you to define your own symbols if you want support for these (though we don't yet let you do that).\n. Thanks -- this should have been fixed by https://github.com/Khan/KaTeX/commit/cba70b51febc386200ff0544010480f3272594ba and will be in the next release.\n. I need someone to go through and test that all of the symbols are mapped correctly from the command name to the corresponding unicode character and to make sure that the right character appears. It is also important that the group for each symbol is correct, or else the spacing will be wrong.\nIt's possible that we can do an automated conversion from the MathJax source's symbol tables which uses the same fonts but I haven't looked into what that would involve.\n. (As my inline comment indicates, at least one of these symbols is miscategorized. I haven't gone through to see how many there are.)\n. #126 added almost all of these symbols, with the exception of \\implies, \\iff, \\imath, \\jmath.\n\\implies and \\iff should be easy to add; \\imath and \\jmath are harder at the moment due to some font problems.\n. Actually, I'm going to close this out but we have #190 and #191 now to track those.\n. Thanks \u2013 opened https://github.com/cdnjs/cdnjs/issues/3958 upstream to track. Not much we can do here though so I'll close this issue.\n. These should all be in master now; planning to do a release soon.\n. If I remember right the Greek fonts aren't actually meant to be included at all\u2026 @xymostech?\n. Fixed by #184.\n. Fixed by #214.\n. Right you are! MathJax tricked me\u2026\n. These should all be in master now; planning to do a release soon.\n. How are you calling katex.render?\n. Thanks for sending this in. These should all be in master now except \\implies and \\iff which we'll add soon.\n. Actually, I'm going to close this out but we have #190 now to track those two.\n. Can you all give some examples of how you would use it? Would you want it in the context of some matrix-like environment like \\begin{array} or \\begin{align} or somewhere else?\n. We're hoping to have align* support sometime soon, and then you would be able to line up the equals signs as well.\n. Currently matrices aren't supported, sorry \u2013 we're tracking this in #43.\n. @janmarthedal Thanks for sending this in \u2013 would you mind signing our CLA at https://www.khanacademy.org/r/cla? Thank you!\n. These should all be in master now; planning to do a release soon.\n. Can you provide a complete stack trace?\n. It's a duplicate of #61.\n. Hey \u2013 would you mind signing the Khan Academy CLA at http://www.khanacademy.org/r/cla? Thanks for sending this in!\n. These should have all been added in #126 and d61a04c80d14577212e3e98e83ff2da0c7a70907. We're planning to cut a new release soon with these updates.\n. > Since the renderToString is basically doing the rendering, wouldn't it be faster if I just use KaTeX's render function as the default, and catch the exception to backup with mathjax?\nYes, this is exactly what we do at Khan Academy. KaTeX should be plenty fast enough for you to run it and test first.\n. If you count the cost of setting .innerHTML after calling renderToString, they're pretty similar. Probably render is faster in modern browsers and renderToString is faster in IE8. If you're not actually rendering to the DOM, renderToString will be faster since it won't touch the DOM at all.\n. That's the error you get if you pass undefined as the input string. See also #179.\n. Khan Academy uses KaTeX, which you can try on an Android phone. Example:\nhttps://www.khanacademy.org/math/integral-calculus/indefinite-definite-integrals/fundamental-theorem-of-calculus/e/the-fundamental-theorem-of-calculus\nThere's no special support for Android in particular.\n. We don't have any plans for this in KaTeX right now. You can look into other libraries like MathQuill: http://mathquill.com/.\n. We added \\nabla in v0.2.0 so it should work once your version of KaTeX is updated.\n. Right \u2013 not yet, but we'd like to add it.\n. That's weird. How are you calling katex.process?\n. (Does http://khan.github.io/KaTeX/ work okay for you?)\n. @jonathankroll Curious: why do you prefer MathML for input?\n. Makes sense. You could probably find some automated way to convert that to TeX but I don't think we'll add one to KaTeX itself.\n. It doesn't look like TeX or LaTeX support these out of the box. Does that agree with your understanding?\n. Thanks @fkling! :) If you can fix that up and sign the Khan Academy CLA at https://www.khanacademy.org/r/cla I'll merge this in.\n. Thanks!\n. Curious: why esstix instead of stix? Merging into #42.\n. Oops, I guess I was too hasty. #123 is similar enough though that I'll just track both there.\n. This would be cool, but honestly, tikz support would be a gargantuan undertaking, probably larger than all of KaTeX itself at present, so we're unlikely to do this. You could use SVG to draw similar diagrams on the web.\n. (In conjunction with support for defining macros #37.)\n. This is known (hence this comment https://github.com/Khan/KaTeX/blob/v0.3.0/src/buildTree.js#L9-L10) and I think our eventual goal was to just make buildHTML not mutate the tree. Curious why this is causing you problems.\n. Is tree always valid JSON? I don't recall \u2013 maybe @xymostech knows. If it is, I'd rather do JSON.parse(JSON.stringify(tree)) to do a deep clone here which tends to be fast and has very clear semantics. Generic deep clone functions are generally hard to reason about \u2013 what are their semantics when passed a function? an array? a self-referential object? a DOM node? an object with nonenumerable keys? Or maybe the constructor throws when you call it with no arguments (like your code does here). There's really no way to do write a deep clone function that works for all cases since you need to understand the data and object model.\n\u2026but if the data is just JSON, it's pretty clear how it should work. :)\n. :+1: \n. @PeterBocan We care about perf too. JSON.parse and JSON.stringify are actually very fast in most browsers and this is unlikely to take a significant cost, especially in comparison to the parsing itself and DOM tree-building. Still would be nice to get rid of it though.\n. KaTeX supports parts of LaTeX and parts of TeX. We don't have a comprehensive reference of supported features currently but already have some LaTeX-specific commands (e.g., \\frac, \\binom from amsmath) and will add more, including some environments, in the future.\n. Not really, since KaTeX relies on knowing the font metrics in order to position things accurately. See also #123. Possibly we could make a mode that looks okay on some common pre-installed fonts though without requiring font data.\n. We don't use widths at all in KaTeX's calculations. We should certainly be able to produce output that looks as good as using <sup> tags, etc. without any custom fonts, though square roots and large delimiters would be harder.\n. It's useful to compare to the adjacent parenthesis so I think we'll keep it. Thanks for sending this in though!\n. Closing in favor of the other issues.\n. Looks like an oversight. Just pushed 0.3.0.\n. KaTeX_AMS contains some of the symbols. The others aren't currently used:\nhttps://github.com/Khan/KaTeX/blob/v0.3.0/static/fonts.less#L50-L69\n. \\text{d}x will also work in the meantime.\n. This would have to be fixed in cdnjs.com; they've got an issue here already: https://github.com/cdnjs/cdnjs/issues/360.\nIn general I wouldn't recommend always upgrading automatically to new major versions because we might have breaking changes, either in the TeX syntax supported or in the JS API. :)\n. Dupe of #114.\n. I thought we had a tracking issue for this already, but I guess not. Brief discussion on #73 and #59.\n. It's not quite that simple because (I believe) the character used in the math fonts we use might not necessarily align with the character that's appropriate in the input string.\n. > Were you perhaps referring to #16?\n@gagern Yes, thanks.\n. Dupe of #48. Should work in the next release.\n. Google's already signed the corporate CLA (via Max Sills) \u2013 not sure how we're supposed to verify that that covers you though. :)\n. I suppose the @google.com author should be good enough. I'll let @kevinb7 or @xymostech merge this one.\n. @xymostech and I came to the same conclusion as you: that each column should be a vlist.\n. I'd be interested in seeing the canvas rendering.\n. @bryevdv Curious: why would KaTeX canvas rendering be important to Bokeh?\n. Hopefully as simple as adjusting the greediness values:\nhttps://github.com/Khan/KaTeX/blob/9869d59cadb009fdd8b07f8516ff62a5a8f76b3a/src/functions.js\n. If any contributors are interested, we should try using http://www.freetype.org/ttfautohint/. Also interesting reading: http://tex.stackexchange.com/q/1390.\n. I think it would might be a good idea to first figure out a solid API for defining new commands in JS. Something like\ndefineCommand(\"\\\\limsup\", function() {\n  return hlist(text(\"lim\"), spaces.thinspace, text(\"sup\"));\n});\nand then we can implement \\newcommand on top of that. I think most people using KaTeX (such as KA) won't want to support def/newcommand for user-defined expressions but people might want to define some site-specific commands.\n(Incidentally, we don't have limsup or liminf because I want something like this first.)\n. For retina support, I write this last night: https://gist.github.com/spicyj/1d9145ab46190782260f\n. Weird, I think it worked fine for me when I tried.\n. I can easily see us including support for canvas if it's faster or otherwise better than the default rendering. It may well be more efficient, though I'm worried about the perf of measureText. Would be nice to do some benchmarks.\nThe implementation here takes the DOM tree as input, which is too low-level. It shouldn't need to parse out class names to decide what to do. We should have an intermediate stage that's made up of hlists, vlists, boxes, glue, etc. which can then be rendered to either HTML (DOM) or Canvas.\n. Seemed easier at the time, and IE8 support.\n. Right now, buildHTML handles both metrics/styling decisions (for example, the supsub function that handles superscript/subscript vertical positioning) as well as how to encode those in HTML with CSS classes. I suppose the ideal is something akin to another intermediate representation (at least conceptually) which has sufficient positioning information and can be used to output to either HTML or Canvas.. > since the function is assigned a single-letter name while the object variable is not.\nBoth should get munged to a single letter; if that's not happening we should fix our uglify config.\n. Going to count this as a duplicate of #123. We should figure this out though if we can. Not sure off the top of my head if there are good sans-serif Xe(La)TeX fonts but if there are that may be an easier route.\n. I want to be careful here \u2013 ideally we match the behavior of unicode-math; I don't want to accidentally support more than that package does or have differing behavior.\n. Two reasons:\n1. I don't trust us (mostly don't trust myself) to make good decisions here and if we choose to make our own interpretations for certain commands/symbols then it'll be difficult to change our minds later if we realize we messed up because people (e.g., KA) will have built up a large swath of expressions that depend on it.\n2. I'd like to continue to be MathJax- and LaTeX-compatible to the extent we can so people don't learn non-standard KaTeX extensions and then get confused when they don't work in other environments. More concretely, KA uses KaTeX but falls back to MathJax for things that KaTeX doesn't support. This works well when KaTeX supports a subset of MathJax's functionality but doesn't work as well if they each support some things that the other doesn't. You might have an expression that uses a KaTeX-only command and then want to add a \\begin{align*} (or whatever) to it which KaTeX doesn't support, but now neither KaTeX nor MathJax can render the combined expression. Obviously this becomes less of a concern as we make our way through the remaining missing features, like the valuable matrix support you recently added.\nLet me know if these make sense. Basically, I just like to err on the side of safety, which in this case means adding fewer new things to support.\n. I hope this shows that there's at least some variation here and careful thought is required. For example, | should definitely be spaced as \\vert is. (Did you notice that I asked that tex.stackexchange question? :))\nWhen MathJax and LaTeX differ slightly, we tend to follow LaTeX's behavior. (Our long-term plan is not to follow MathJax forever\u2026)\n. That doesn't catch cases where we currently have only one of the symbols but might add another with the same output symbol in the future.\nIt would also mean that you can only type UP TACK and not PERPENDICULAR to get \\perp, where it should probably be the other way around. The character used for the output font doesn't necessarily correspond to something that makes sense semantically as input.\n. I meant, we might realize later that we used the wrong symbol now. I'd really rather avoid adding symbols and then changing them later.\n. If there's no good solution NOW, then we won't fix the problem NOW. Sorry.\nI'd be happy to add all greek letters. I'm sure there are other important things but we don't need to add all of the thousands today.\nIf I knew a magic solution I'd tell you. I don't.\n. > The way I understood it, the problem is more like this: Suppose we now have a mapping for \\foobarto U+3333 and later on we find that there is another symbol \\qux which a) looks like U+3333 as well, but b) matches the semantic description of U+3333 even better and c) some TeX setup renders U+3333 on input like \\qux, not like \\foobar in terms of group type and spacing. In that case, it would have been correct for us to map U+3333 to \\qux from the beginning. Changing it later on breaks backwards compatibility, while not changing it breaks compatibility with other implementations. Both of this should be avoided, ergo his conclusion that we should not map U+3333 to anything unless we can establish that doing so is right in terms of compatibility with something authoritative.\nThat's exactly my stance, thanks.\nI'm not against having an option that enables experimental unicode support that's likely to change in future versions, but if we go down that route I'd like to also have some path for getting a stable subset into the core features too, or else for clients who need stability this feature won't give any benefit.\n. How do we come up with a list of uncontested symbols?\n. PhantomJS's WebKit is extremely old. We support current-ish versions of Chrome/Firefox/Safari/etc and down to IE8. Looking into the selenium images seems like a good idea (I didn't realize those existed). Ideally we could screenshot IE too but I don't know of a good way to do so.\n. Good idea. I had looked at BrowserStack earlier but it looked at that time like screenshots probably weren't available for open source projects. Maybe they now are.\n. I would find cross-browser screenshotting valuable. A couple times I've looked at the markup we generate and thought that it could be simplified, only to find (hours later) that it breaks positioning in IE. Would be much easier if it could be automated. I'll write them.\n. > I guess this is because LaTeX has a separate font for smaller sizes, while KaTeX simply scales the 10pt font down, right?\nThis certainly causes some deviations. We tend to just ignore it.\n. It uses different glyphs. Same as https://github.com/Khan/KaTeX/pull/268#issuecomment-115293652.\n. Can we just add a little padding to the katex screenshots so that the pdflatex ones don't later get cut off?\n. Well, whichever works. We could probably reduce the font size and be okay if we're running out of room.\n. Wow! Today I learned. I guess I now remember that \\mathllap and friends are provided by mathtools: https://www.tug.org/TUGboat/tb22-4/tb72perlS.pdf\n. As an option, presumably.\n. If you're feeling crafty, it could be like\njs\nhandleError: (text) => `\\color{red}{${text}}`\nor something.\n. MathJax seems to just shows your input in a box for errors like that. $\\x{$ displays as:\n\n. That's what https://github.com/Khan/KaTeX/wiki/Function-Support-in-KaTeX was supposed to be.\n. It should include a nonbreaking space (https://github.com/Khan/KaTeX/blob/41e3fa66599b125677919673c0139324beec3f0c/src/symbols.js#L2507). Try at http://khan.github.io/KaTeX/ and I think you'll find that it works.\nHow are you loading the JS? I'm guessing an encoding problem.\n. A single space should still be fine, though of course it won't break. If you're mangling the HTML that KaTeX generates after you get it, it's hard for us to make any guarantees about how things will work. Generating &nbsp; could work better in some cases but what's to stop marked from converting that to a space too? I think using a nbsp unicode character is clear in intent.\nOne thing you could consider is substituting in some sort of placeholder to the markdown, running marked over it, then swapping in the HTML where the placeholder was. That's what Khan Academy did for a long time. Now, we use https://github.com/Khan/simple-markdown (which is designed to be extensible) in conjunction with some custom rules to parse math.\n. Normally one writes ^\\circ for a degrees sign, which is presumably why that was missed.\n. Yes, GitHub doesn't notify when PRs are updated. It sucks.\n. If we have a prominent list in the readme, people will probably see it and add themselves (if we ask them to).\n. Most npm users won't count as dependents anyway because their apps aren't pushed to npm.\n. https://www.expii.com/\n. The critical ones for me were 1, 2, and 4. With ES6 classes you can subclass builtins like Error easily but before that I think __proto__ is our best bet unfortunately. We can do feature detection for ES6 classes with an evaluation in a try/catch but that doesn't work in restricted CSP environments.\n. @kevinbarabash I don't think Babel allows subclassing intrinsics properly. If I compile class Foo extends Error {} and run it in the Chrome 62 console, new Foo() instanceof Foo gives false. :(. Enough browsers support it natively now though \u2013 we could do a feature detect with eval. :)\n```js\nfunction buildFullMessage(message, token) {\n  // ...\n}\nvar ParseError;\ntry {\n  ParseError = eval('b => (class ParseError extends Error { constructor(m, t) { super(b(m, t)); } })')(buildFullMessage);\n} catch (e) {\n  ParseError = ...;\n}\n```\nmwahaha\n. Yeah, ideally we can adjust the line heights so that this looks right. We should be careful to not increase the line height for inline (non-fraction) math in regular text though, otherwise you get uneven spacing when using math on only a few lines of a large paragraph.\n. I'm not convinced that it makes sense to adjust the metrics for the \"blacker\" fonts \u2013 IIRC this lever was originally designed so that different printers could print Computer Modern in a way that looked good, even if an individual printer might end up printing the lines a little thicker or less thick. Similarly, different screen rasterization algorithms might do the same. But I think that's different from the underlying font metrics \u2013 if you were to use a bold face then you would typically have wider metrics but the goal with thickening fonts artificially is that after production they look the correct (original) thickness and therefore you wouldn't want to adjust the distance between the characters.. dist/contrib/auto-render.min.js should already be available in bower. Let me know if that's not what you're seeing.\n. Once we have macro support via JS configuration it would be nice to just remove them completely and move them to KA-specific configs.\n. I assume @DollarAkshay is referring to the discussion areas.\n. Can we not use abbreviations like \"Cmds\", especially in public API?\n. @JeffEverett Yes please! I don't love the name breakOnUnsupportedCommands because it is pretty long but I don't have any better ideas.\n. Not currently, but I was talking to @xymostech and the rules sound simple (breaking is allowed after any top-level rel or bin) so it might not be too difficult to add.\n. I don't know what you mean by that, sorry?\n. Missing DOCTYPE?\n. Not HTML5 necessarily, but we probably don't work great in quirks mode. Any valid doctype should work (though <!DOCTYPE html> is of course the shortest). Does that fix it?\n. Sweet. We should add a warning for this though. (jQuery doesn't support quirks mode, for instance.)\n. Ahh, gotcha.\n. We already have #katex on freenode\u2026\n. It's been the case since last September. :) Scroll back to see.\n. Not sure on the screenshot, but otherwise good.\n. Not currently, but maybe we could! Those examples are neat.\n. Is that Calibri? I'd expect some things to be subtly mispositioned from changing the fonts but that does look pretty reasonable.\n. Sorry, I meant Cambria which does look at least somewhat similar. I thought of it because I knew it had a math variant. It is non-free but it comes with Office so it's decently common.\n. I'm going to call this a dupe of #4. As you might know, you can work around this by doing 10{\\times}.\n. :o \n. This seems fine, I think. If you wanted to reduce the size a lot further, you could change\njs\nmodule.exports = {\n\"AMS-Regular\": {\n  \"65\": [0, 0.68889, 0, 0],\n  \"66\": [0, 0.68889, 0, 0],\n  \"67\": [0, 0.68889, 0, 0],\n  \"68\": [0, 0.68889, 0, 0],\n  \"69\": [0, 0.68889, 0, 0],\n  \"70\": [0, 0.68889, 0, 0],\n  \"71\": [0, 0.68889, 0, 0],\n  \"72\": [0, 0.68889, 0, 0],\n  \"73\": [0, 0.68889, 0, 0],\n  \"74\": [0.16667, 0.68889, 0, 0],\nto something like\n``` js\nvar metrics = [\n  [0, 0.68889, 0, 0],\n  [0.16667, 0.68889, 0, 0],\n];\nmodule.exports = {\n\"AMS-Regular\": {\n  \"65\": metrics[0],\n  \"66\": metrics[0],\n  \"67\": metrics[0],\n  \"68\": metrics[0],\n  \"69\": metrics[0],\n  \"70\": metrics[0],\n  \"71\": metrics[0],\n  \"72\": metrics[0],\n  \"73\": metrics[0],\n  \"74\": metrics[1],\n```\n(or even just export the metrics array and the {65: 0, 66: 0, ..., 73: 0, 74: 1, ...} separately and have getCharacterMetrics reconstitute it). Might not make a huge difference post-gzip, though.\n. \\left \\right \\{ \\} should all work fine\u2026\n. It works fine here: http://khan.github.io/KaTeX/\n\nHow are you running KaTeX? It looks like maybe something else is swallowing the backslashes. Note that in your screenshot it shows \"\\left{\", not \"\\left{\".\n. Jekyll must be doing something weird then. You can see this example works fine without the extra backslash:\nhttp://jsbin.com/nudecanexe/edit?html,js,output\n. I believe TeX itself does the genfrac-with-delimiters thing. IIRC the delimiters might end up a little too large if you treat them independently.. It used to, at least. KA has since dropped support for IE8 so it's possible it regressed and no one noticed.\n. See https://github.com/Khan/KaTeX/blob/master/contrib/auto-render/README.md, which is linked in the main README.\n. I guess so.\n. What version of the JS do you have?\n. I think it updates automatically from npm.\n. Why did the font files change/how did you generate them?\n. The generation of the fonts is completely automated using these scripts:\nhttps://github.com/Khan/KaTeX/tree/master/dockers/MathJaxFonts\nWe don't change them by hand. I am not sure if there is any euro symbol in the fonts (I find it hard to believe that there isn't) but we can't take this pull request in its current form.\n. No, KaTeX doesn't accept MathML input. There's no way to add your own HTML tags to the output.\n. Hard to imagine how someone could accidentally screw it up, but it might be nice to have a screenshot test with a non-rel split (e.g., a&+b or a&b).\nNice work. \n. > It would be nice to have an option not to render the MathML.\nWhy? It's important for accessibility and shouldn't cause problems when the CSS is properly loaded.\n. @kwangkim Are you sure you included the stylesheet correctly?\n. Neat.\n. We don't currently support \\\\ outside of matrix and aligned. But #171 already tracks supporting it elsewhere so we don't need this issue tracking it too.\n(As an aside, KaTeX only replicates math mode so your last example is not relevant \u2013 but it's true that \\\\ works inside math mode too so we should ideally support it.)\n. No problem, happy to help.\n. require('katex') should work if you're using browserify or webpack. The two maintainers of the katex package currently are the two top contributors to the repo: https://github.com/Khan/KaTeX/graphs/contributors. We don't have a Khan Academy npm account at the moment.\n. In real LaTeX it shows as a low square for me:\n\nI don't think it should be a cdot alias? Wouldn't make much sense since centerdot is in amssym and cdot is in the core.\n. Can you add something with a changed font size to the screenshot, like a frac? Not sure offhand if the space should scale or not.\n. <span class=\"katex\">n &gt; 2</span>\nshould definitely work. \n. If not, can you post a simple jsbin that shows the problem?\n. Here's two examples of how to do it:\nhttp://jsbin.com/zebiwodeto/edit?html,output\n. Well, how are you running katex?\n. By the way: you can make code formatting by putting backticks around a piece of text instead of putting spaces between every letter.\n. Try changing .innerHTML to .textContent.\n. No problem. :)\n. In what way does it fail?\n. Oh. Change the URLs to start with \"https://\" or \"http://\".\n. Can we include 'dist' instead of 'build'?\n. To match the bower package.\n. Can you revert the filename changes in Makefile and squash your commits? Otherwise I think this looks good \u2013 thanks!\n. Thanks!\n. We already have logic that should skip over backslashes:\nhttps://github.com/Khan/KaTeX/blob/c79fb5893686ac0b8c4d8ec33ea1b940d2e4a0c4/contrib/auto-render/splitAtDelimiters.js#L16\n. Maybe it's not working?\n. Try using a span instead of a p.\n. I don't think it is appropriate in most professional websites to expose the LaTeX code to the user. Technical users can use the devtools to see more info (as they would to inspect any other source code for the page) and if your site does want this functionality, it's probably best designed and integrated into your site in a way that KaTeX itself wouldn't be able to do; it should be built custom for your purposes.\n. We would like inline formulas to wrap across lines but haven't had the time to implement it.\n. I guess #327 tracks that.\n. Having trouble getting Docker to work but it looks okay in my browser\u2026\n. Sure, I put it in the \\blue{} to also prove that \\underline preserves color properly.\n. It would require a font that can render them and enough information about the metrics so that the math can be placed around it properly. Closing in favor of #380.\n. Consuming KaTeX from npm, bower, cdnjs, or GitHub releases will all give a version number, though you're correct it doesn't appear in the file itself.\nAs for the actual question linked, we don't currently support Greek letters as input. See #243.\n. (Duplicate of #327.)\n. I think this is generally the right idea. I was thinking that we should make the entire expression wrappable but each unit inside unbreakable. So that means a left/right atom wouldn't wrap and neither would something created with braces like {a + 2}. TeX actually has more complicated breaking rules \u2013 like it will generally only break after a +, not before. It would be really nice if we could encode those rules properly in the output. Maybe one option is to even output ordinary HTML wbr tags. We should at least start by looking in the TeXbook to see what those rules are.\n. I think the biggest issue is fonts. There are no Computer Modern versions of those characters, right?\n. $ should start math mode, % makes a comment in LaTeX. Maybe #^& are all okay though\u2026\n. \\text{my favorite variable is $x$}\n. Yeah, we have #5 tracking that it doesn't work in KaTeX. Doing \\$ inside \\text should be possible, yes.\n. Thanks!\n. Work is always ongoing to add new features but there isn't a goal of 100% parity for the sake of it \u2013 instead we look at what the most valuable features to add to decide what to spend time on. If you're looking for something in particular and can't find an issue about it, please open one.\n. We do have \\text.\n. mbox and text differ at least in their behavior when used in a subscript or superscript and you should generally prefer text in LaTeX too. I'm not sure on text vs textrm.\n. To be clear: not saying we shouldn't support either of those, but we should make sure to do it properly.\n. Does this match MathJax behavior?\n. Those CJK characters don't look like Computer Modern. Are they supposed to?\n. Yeah. We could have a separate font file for CJK and browsers should only download it if it's used, but I'm guessing there isn't even CM type for CJK chars? The Latin-1 chars do look like CM to me \u2013 am I crazy?\n. No, this is what those chars look like in Times New Roman:\n\n. @HStaaf To be clear, you can bump up the font size if you want! It takes the size from the surrounding text but you can probably also add a .katex { font-size: 1.5em; } stylesheet or similar.\n. None officially. Try different sizes and see what works for you.\n. Seems like a bug. Looks like varnothing is correctly defined to use the AMS font in our symbols file, but that isn't making its way to the actual DOM output we generate.\n. You should use <!DOCTYPE html> to trigger standards mode in browsers. Even jQuery doesn't support quirks mode. We could probably warn when you don't have a doctype though.\n. Yeah, we only support standards mode in browsers, which precludes using a transitional or frameset doctype, which both trigger quirks mode. Strict or the HTML5 doctype are both fine. We plan to warn for this and are tracking in #517.\n. It should be safe. It is possible for users to break the layout of your site and slow it down with malicious inputs \u2013 see #109, #158 \u2013 but definitely no XSS unless we have a severe bug.\n. The appearance of the arrow part doesn't quite look right. I think it's supposed to overlay the \\rightarrow command with the longer line.\n. Yes, the intent was always to move those to macros as soon as was possible.\nI think this change seems pretty unambiguously good especially in the existing presence of the options.getColor method although I don't understand the significance of the CSS change.. I can't tell, is that Computer Modern in your screenshot? Not sure if our fonts support these chars.. There's no good way for non-employees to reliably report bugs and get a response. CCing me here is fine. If someone wants to suggest a particular CSS change to Messenger that would be even better. ;). I blame @xsznix who wrote that code in Messenger this summer. :) It's designed to limit the width of expressions so you can scroll if they get too wide.. On the KaTeX site, I can repro a^{2^2} going outside the bounding box\u2026\n\n. We opted to add the 1px padding to Messenger for now. Reload and you should see it.. Opted for base since groupTypes.supsub has:\njs\nif (shouldHandleSupSub(group, options)) {\n    return groupTypes[group.value.base.type](group, options);\n}\nwhich currently relies on op, accent, horizBrace all having .base. Should be good now though. Screenshots pass this time.. A project's gitignore should only contain repo-specific files. In this case, perhaps you want to create a global gitignore for your computer ignoring .idea:\nhttps://help.github.com/articles/ignoring-files\nYou can also edit your local .git/info/exclude file which acts like gitignore but isn't checked in.\n. If you commit and push to the same branch, the PR will update automatically. (Better yet \u2013 if you use git commit --amend and/or git rebase -i to squash your commits, then there'll only be one commit in the resulting history. You'll need to force-push to your branch because the commit IDs will have changed.)\n. I'd be down for either. Not sure if they're flexible enough to accommodate our exact style rules around spacing.\n. npm actually formats this file with two spaces when you use npm install jshint --save-dev so I'm fine having it like this.\n. The amsmath.sty definition of cfrac is:\n\\newcommand{\\cfrac}[3][c]{{\\displaystyle\\frac{%\n  \\strut\\ifx r#1\\hfill\\fi#2\\ifx l#1\\hfill\\fi}{#3}}%\n  \\kern-\\nulldelimiterspace}\nI'm not the world's best TeXnician though so I can't say I'm sure what exactly that means.\n. Ahh I see there's an optional argument for horizontal alignment. Without it, it's basically\n{\\displaystyle\\frac{\\strut #1}{#2}}\\kern-\\nulldelimiterspace\n. Right \u2013 \"licensed\" is correct in American English.\n. There are merge conflicts too \u2013 you'll want to resolve them when rebasing on master.\n. That sounds about right to me. The size of \\strut should be relative to the outermost text (i.e., in \\strut \\frac{\\strut 1}{2} the two struts are the same size).\n. It looks to me like \\bullet is a binary operator, so this isn't right. I didn't check the other symbols.\n. These should actually be font: \"main\" I believe \u2013 you'll notice on the test page (make serve) that with that change, these look like they match the other font (instead of falling back to Helvetica) and don't produce warnings in the console:\n\n. Oops, sorry \u2013 can you also move these up to the \"// Misc symbols\" section with the other main-font ones?\n. For all pt-based metrics, we assume 10 pt per em. This means we don't need to know the font size in order to render the expressions, like in server mode when we have absolutely no way of knowing. We might want to bump this up a little to 12 or something but there's only a few place where it matters and it makes only a minor difference.\n. Oh, I see! Yes, I agree.\n. parseInt('12hello', 10) gives 12 so I tend to prefer unary + like this has. If you want to be more explicit, Number(res) is equivalent.\n. Yeah, these look different.\n\n. Nice.\n. nit: you shouldn't need to quote these\n. Does this key do anything?\n. Does that matter?\n. Oops, sorry! I totally misread this. This makes sense.\n. (typo in comment)\n. I don't think this works in IE.\n. @xymostech Ping.\n. Yeah probably. Or start, falling back to left?\nhttps://davidwalsh.name/text-align-start\nNot sure KaTeX works well with RTL yet though\u2026 :)\n. Why were these changes needed?\n. For consistency with what? :) If there is literally not fixing anything, we can remove it \u2013 but I assume you added it to fix some particular problem you saw.\n. Are you able to verify that in to $x$, it's impossible to have a break between the x and comma? In a narrow container it should break before x instead.. Huh. I swear this used to work.. ",
    "tarjei": "Are square roots working now? \nI'm considering if I should try to use Katex instead of Mathjax for a project. Would you mind updating the readme with a short example + maybe some notes on any limitations you know of today?\nIs this a dropin replacement of Mathjax? If so, what makes it faster?\n. Hi, just a \"me too!\" here. I want to import the CSS from the package to be able to include it in my CSS build. Using the CSS from NPM could help me avoid version mismatches between the CSS and the JS. \n. Hmm, mathquill has a very nice UI solution - thanks! \nI'm going to try to emulate that using katex and react. Any tips on how to get the blinking cursor inserted in the right place will be well recived :)\n. Thanks for the comments :) Now I just have to get AsciiMath to output the correct syntax . \n. ",
    "xymostech": "Fixed by 032b8a63e63ae105dadd957931c08f7af273a3c6\n. @joelburget Do you want to fix this up a bit more so we can merge it?\n. Can you squash these commits together? Thanks!\n. Fixed by e418fd9ee32e8504fe9dbd8ba7342afe4c48bd91\n. @gagern All of the fonts are generated using the pipline from the MathJax-dev repo. The mappings from LaTeX fonts to KaTeX fonts is here: https://github.com/Khan/MathJax-dev/blob/master/fonts/OTF/TeX/makeFF\nSo, the font files should never be manually modified, that repository should be modified and the fonts generated from there. There's an easy-ish way to generate the fonts from this docker file.\n. @kevinbarabash we already have a fork (which I linked to)! Maybe you missed my comment.\n. Fixed by 513ae30fe120468e33fef104182397d537db7b3e\n. I'm planning on doing a \"go through the code and document things\" run in the next couple weeks, so I can definitely keep this in mind, and put those references in when I do that. I didn't think anyone would be looking through the code, so I didn't bother when I wrote them!\n. I'm moving this to version 1.1 for now. It is of utmost importance, and will be done soon, but won't be making it into the initial release. If anyone sees this and wants this feature, please comment here! You might also want to look at this gist I created for testing if you'd like your strings to be rendered, or this file Khan uses for exercise rendering if you want to fall back to MathJax.\n. Fixed by e418fd9ee32e8504fe9dbd8ba7342afe4c48bd91\n. Thank you for revitalizing my TODO! I'm all for removing those color constants now that macro support exists. These colors were added to the initial implementation to maintain compatibility with our MathJax color macros: https://github.com/Khan/khan-MathJax/blob/master/kathjax-config.js#L21 They were definitely never intended to be part of base KaTeX, so removing them seems very reasonable.\nKA only has a couple of entry points that call KaTeX, so we could manually register the macros in those few places and we'd be fine. I guess the bigger problem is that non-KA users are probably using them now, so figuring out a strategy for users to easily add back the colors to their versions would be needed before we fully remove them. Pulling them out into macros.js as a first step would be good. :). I added this before I realized you submitted this. :( Sorry!\n. Tested:\n\\displaystyle \\left(\\dfrac{a^\\sigma}{\\sin \\theta}\\right\\Updownarrow \\intop_{1/2}^{z^z} \\sum_{i=0}^\\infty x \\,dx\nin IE8, IE9, IE10, IE11, Mac firefox, chrome, safari, Linux chrome, firefox, and they all looked good.\n. Thanks! I can add this, but if you'd like to fix yourself, you could look at the CONTRIBUTING.md file for the part about adding symbols. Let me know!\n. Just put it anywhere in the big table in symbols.js, it's not organized in the slightest (yet). Did you clone the repo, and can you test it?\n. There are plans, but we're trying to figure out a good way to do this. For example, do we want to support such things inline or do they need to be included in the configuration? We'll keep this updated with info.\n. The problem with supporting things inline is if you have user input, then you don't want one user's macros to collide with your code. Maybe we could have a setting for disabling macros, or groups of code that should share macros?\n. What if two users wanted to define the same macro? Would one of them not be able to? Even worse, would the macro that ends up being used depend on which expression was rendered first?\n. Hey! We've been thinking about ways to make KaTeX accessible, and we weren't sure what would be the best way. Is something like adding a tag to the element that lists the TeX expression good enough? Do we need to render to MathML also? I'm not very experienced with this (the other contributor @spicyj is more so), so any advice would be great!\n. We go back to IE 8 in our support. We're not planning on supporting any further back. We'll talk about what it would take to support MathML. Would this be something that you would enable only when someone is using a screen reader?\n. Unfortunately, rendering to MathML all the time is impractical because Chrome seems insistent on not supporting it: https://code.google.com/p/chromium/issues/detail?id=152430 :(\n. Yes, we'll definitely look into supporting it as an alternative output. I'm just curious how people with screen readers would enable it.\n. A browser extension definitely sounds reasonable for exposing that functionality.\nWe're fairly opposed to a MathJax-like UI, because it's annoying and often is not helpful.\nAnother thing to think about is that we currently support a way to render on the server and then serve up plain HTML, with no JS required. Maybe we could render to both on the server, serve up both, and switch between them (with a smaller bit of JS) depending on what's needed? Or we could serve up the HTML and the JS, and then switch to the MathML if you have the extension...\n. What do you mean by \"Implement a natural language renderer of math\"? Does this mean turning \"x^2\" into \"x squared\"? I think that the easiest solution for now will be to implement MathML. In browsers that don't support MathML (like chrome), is the MathML still accessibile even though it isn't rendered correctly, or does the browser need to have support for it in order for screen readers, etc to understand it?\nThanks for helping think through this, everyone! \n. Hello everyone, thanks for all the feedback here. I've been distracted by other projects, but I'm going to be making a pull request soon about making KaTeX accessible, taking a hybrid MathML + aria-hidden HTML approach. I'd love to get some feedback and a hand in testing it out in different environments if anyone would like to help out.\n. > When you need to do sync highlighting, potentially that might matter. E.g., if some code modifies the MathML to change the background color on the mfrac, would the display change correctly?\n@NSoiffer The display would not update. Is that a serious problem? Are there lots of times when that would happen? I'm not sure if there's a good general way to watch for changes to the DOM to propogate them over to the HTML version.\n. The accessibility patches were landed in the new release of KaTeX (v0.2.0). Hopefully the new, accessible version should start appearing around soon. (there isn't a way for developers to disable accessibility, so anywhere that it's used should have the new features)\nI ran some performance tests on the new version versus the old release. It looks like we took a ~20% speed hit, which is a little sad but not bad for things being screen-readable now: http://jsperf.com/katex-vs-accessible-katex\nI'm going to close this issue for now. If anyone runs into any serious problems, I'd be happy to re-open or make smaller issues. Thanks for all of the feedback, everyone!\n. Thanks!\n. Yep, we're unfortunately aware. This has more to do with the layout engines and font renderers that the browsers use than anything. Browsers tend to shift things around at the pixel level when you have small objects. We might try tweaking our algorithms to get it to look better eventually, but for now things look good enough for most expressions.\n. @kevinb7 Woah, those look great! I actually realized that the huxley screenshots in the repo right now aren't ones that are produced by the dockerfile (I've been using an old version of the dockerfile with a newer version of firefox, so they're slightly different). I can update the huxley screenshots right now so yours will work, if you'd like. Or if you'd like to just add your pull request, I can run screenshots for you. Let me know!\n. You can, but there's a good chance that all of the images will shift slightly, which is annoying for determining what changed. Also, the docker sets up all of the dependencies for you and stuff. If you want to look at what changes, you can run the screenshots on master and then rerun them on your branch, but I'd like to only merge in screenshots that came from the docker.\n. Yep, this is also a browser rendering problem, unfortunately. If you make the font size larger, it's pretty clear that the produced output is reasonable:\n\nI'm not really sure what to do about this. Maybe we can use some fancy CSS to ensure minimum widths of the gaps between elements or something.\n. Definitely! One of the next features we're planning on adding is support for environments in general (anything that uses \\begin and \\end). At Khan, we use \\begin{align} the most, so that's the main motivation, but we'll try to support at least align, matrix, and array to start. It looks like pmatrix is just \\left( \\begin{matrix} ... \\end{matrix} \\right)', so that shouldn't be too hard to add.\n. Yes! Fixed by #246\n. Oops, thanks for this! We're currently figuring out our CLA situation, so I'm going to hold off on merging it for now, but I'll let you know when we get it figured out.\n. We've set up our CLA, found at www.khanacademy.org/r/cla Please sign it so we can merge this in!\n. You need to add a doctype to your page in order for browsers to use standards-compliant CSS rendering. Be sure to add<!DOCTYPE html>before the` tag. To read more, see http://www.quirksmode.org/css/quirksmode.html\nWe should add a warning for when this happens so other people won't be confused by this. I'll leave this open until we add the warning.\n. @mbourne Thanks for the feedback! What version of android are you using?\n. @stefman2 Are you including the katex.min.css file on your website? You need the main KaTeX CSS (which should have position: relative rules) as well as the generated HTML from katex.renderToString.\n. @drerichsu Yes, that is by design. KaTeX throws errors of type katex.ParseError when it receives expressions it doesn't understand. You are free to use that error how you want (like putting the message it returns in the element).\n. Yep, we are aware of these environments. We're planning on figuring these out sometime soon.\n. @gagern I'm actually going to close this and add a new issue to specifically add horizontal and vertical lines. I think that will make it clearer why this issue is open.\n. Thanks, we'd definitely like to support this! Right now, we don't have any support for optional arguments (the [3] part), so we can't do this yet. I'll keep this updated with more information.\n. Unfortunately, adding something like mhchem is a lot of work. We want to support it in the future, but it's not going to be a short-term goal.\nIf anyone wants to try, this mostly involves adding an extension to the parser, so that things inside \\ce are parsed a different way. The output routines are almost good enough (e.g. \\ce{CrO4^2-} is the same output as \\text{CrO}{}_4{}^{2-}; all that's needed is some text-align: right for something like \\ce{^{227}_{90}Th+, which is almost {}^{277}_{90}\\text{Th}^+ but the 277 and 90 should be right aligned)\n. @mhchem that sounds awesome! I think we would definitely be interested, if that gets done! Thanks!\n. Yes, we should add all the symbols, I just haven't gotten around to it. That looks like a great list of things to add.\n. This looks good. Thanks for the catch. We're working out our CLA, so I'll let you know when we get that figured that out so we can get this merged.\n. We've set up our CLA, found at www.khanacademy.org/r/cla Please sign it so we can merge this in!\n. This sounds interesting! If you'd like to work on this, we'd definitely welcome the pull request!\n. @DoubleFelix Interesting! What browser and OS are you using? It works fine for me (chrome, linux). \n\n. (looks like probably something on mac, someone else here tried it)\n. @DoubleFelix Hmm, seems to be working fine on this older mac, are you using retina?\n. Yes, the issue with double and triple integrals is different than the other one. I forgot to add font metrics for those characters (you should see some warnings in the console about it). Thanks for reminding me. \n. @DoubleFelix I'm going to close this issue about the double and triple integrals; could you open a new issue with your more specific bug?\n. Thanks for this! We're working out our CLA, so I'll let you know when we get that figured that out.\n. We've set up our CLA, found at www.khanacademy.org/r/cla Please sign it so we can merge this in!\n. Can you change the font of \\leadsto, like I mentioned in the line comment? Thanks!\n. Thanks, I think them being ords makes sense. We're working out our CLA, so I'll let you know when we get that figured that out so we can get this merged.\n. We've set up our CLA, found at www.khanacademy.org/r/cla Please sign it so we can merge this in!\n. Interesting. It also depends a lot on the font the expression is rendered at, for me. I tend to test things at large font sizes so I can spot differences easier, but this makes me overlook problems like this. Maybe I should make the testing page show in multiple font sizes or something.\n. @gagern In LaTeX, align and align* are only supported in paragraph (i.e. not math) mode, so the equation numbers in align work nicely and are aligned at the right side of the page. For display mode, we can do that reasonably, but how do we want to handle the numbers if we're in inline mode? MathJax just drops the equation numbers, but that doesn't seem correct...\n. This looks great. We've set up our CLA, found at www.khanacademy.org/r/cla Please sign it so we can merge this in!\n. We're definitely planning on having options of some kind, mostly so we can support display-style expressions (like things in $$). This will probably be one of the options. I tend not to like success and errro functions, but maybe a \"no-throw\" option that returns null when it fails or something?\n. @AugierLe42e The character you copied from the KaTeX error (\u2013, which is unicode's U+2013) isn't parseable by KaTeX. Changing it to a normal minus sign (-) should work.\nHowever, that character doesn't appear in the expression you pasted? Are you sure you copied it from the correct source?\n. @AugierLe42e What are you using to edit that expression? Your editor might be turning - into \u2013 (an en dash) when you put it between spaces.\n. Hmm. Unfortunately, we really don't want to do browser detection inside of KaTeX, mostly because this ruins the experience for people who want to do server-side rendering. \n. @kevinb7 We might still be able to use this, though! Don't dispair! What happens if you just always add half the line height, and don't do any browser-specific checking. When does that look worse?\n. @jmendeth This looks great! Like I've said on some of the other requests, we're getting our CLA worked out right now; I'll let you know when we figure it out so we can merge this!\n. We've set up our CLA, found at www.khanacademy.org/r/cla Please sign it so we can merge this in!\n. This looks great. Could you squash your commits together? Also, we've set up our CLA, found at www.khanacademy.org/r/cla Please sign it so we can merge this in!\n. Thanks!\n. Thanks! Not sure how the parsing for this one will work, but it would be useful to support this. This also applies to \\choose.\n. @kasperpeulen I mean, currently the parser parses left to right, so there's no support for making a fraction where the fraction command comes in the middle of its arguments. When the fraction command comes at the beginning (like in \\frac{abc}{def}), it's easier to parse. I'm sure it can be done, just not sure how it will work with the current parser.\n. Fixed by 5722b45\n. Sure, that definitely sounds useful!\n. This doesn't seem to be working for me, I think because the inner nodes are changing the font back. For example, \\mathbb{R} gives:\n<span class=\"amsrm mord textstyle uncramped\">\n    <span class=\"mord mathit\" style=\"margin-right: 0.00773em;\">R</span>\n</span>\nThe mathit class on the inner span is resetting the font back to Math-Italic, which overrides amsrm.\n. This functionality is something that can be created fairly easily without putting it into the main katex interface. We probably want to put this into some kind of extension, but I'm not sure how we want to do that.\n. Sure, this sounds pretty easy to do. Thanks for the suggestion.\n. This was fixed by d2f41a19a5e9a68dd67df02d5998bc5ce81aed8e\n. Thanks!\n. I'm always very unsure about these things. Is there a specific use case that you have for these features? \nThe reason I'm unsure is that often the layout of the math depends on very specific CSS rules applying, so I'm unsure that allowing external styles to influence the math would be useful (I think it would just make it easy to mess things up).\nFunctions that do things like adding links to elements (e.g. the \\href command) sound very reasonable, because they don't influence the layout.\n. Interesting. Do you need the \\class function to accomplish what you're trying to do? That's the scary one.\nThis also might be something more fit for an extension, rather than a normal addition to the library, since it lets you do very odd things to the math.\n. Thanks!\n. @GlassGhost Instead of \\text{\u22c5 \u22c5 \u22c5}, you should use \\cdots. (For some reason, MathJax parses this correctly)\nYou also appear to have an ampersand (&) inside of your math. This is usually used for alignment in TeX, but you haven't wrapped your thing in an aligning environment.\n. Hey @kevinb7! Sorry I wasn't very quick about responding to your pulls, it's great that you're putting in so much effort to do this! I'd love to chat with you about a roadmap that we'd like to go down, so our efforts can be focused. We're hanging out in the #katex irc room in freenode if you'd like to talk. Thanks! \n. Yes, squashing things would be great. Github reviews are sometimes annoying because I don't have the option to delay comments until I'm done with all of them. Oh well.\n. Hmm. In the interest of letting me see what changes have been handled, I think it works better if you don't squash commits until the very end. Thanks!\n. That's fine, it was okay until I realized I couldn't tell what had changed.\n. Okay, this looks great! Squash it and I'll merge it in.\n. Thanks!\n. This is a good point. I manually created the list on launch day, and haven't updated it with any of the newer features. A page on the website would be nice, and can probably be more easily updated than the wiki page. Do you want to work on this? If not, I could come up with something at some point.\n. Thanks!\n. Hey david, could you sign the CLA so I can merge these? Thanks!\n. Woah. I guess I never thought about it's use for that. I mostly added rule because it lets me make boxes of very specific sizes, but I can see now that it could be a problem. I can't think of any real use for it besides debugging, so would hiding it behind a debugging flag in options somewhere work?\n. Sounds good.\nWoah, awesome! Yep, keep them coming. \n. Woah, weird! That sounds fine to me. We can do this next release (which will hopefully be soon).\n. @edemaine That sounds like a good solution. Once someone fixes it, I can make a new release.. Thanks for this, this looks great! A couple nits, but mostly good.\n. For now, I'd like to just get in the symbols and not the unicode characters. In particular, I'd really like to not add unicode symbols that we have no way to produce otherwise (for example, the double-struck symbols can't be produced using a function atm).\n. @jmeas I'm not sure what you mean, can you clarify?\nThis is looking great though!\nLooking through your list of symbols, I'm not sure I agree that your \"LaTeX Symbols List results\" work. I think that they're just falling back to the original webpage's font, they aren't using an AMS font or anything. All of the symbols in here should look almost exactly the same as they do in LaTeX, and those seem not to. In particular, the \\dots command isn't an individual symbol, it's a weird function that does lookahead, and shouldn't be included.\n. \\arrowvert \\Arrowvert \\bracevert \\S \\_ all look a little funky to me:\n\nIs that what you're seeing?\n. Hey @jmeas. Sorry for the long absence, I've been working on other projects for a while, and I haven't had time to look into stuff. Thanks for your hard work in putting this together. I'm going to merge this in and fix some straggling problems after the fact.\n. The dotsc, dotso, dotsm, dotsb, and dotsi aren't just aliases of \\ldots and \\cdots, they have extra spacing around them which are supposed to be used in special environments (I thought the same thing until @spicyj corrected me). So they shouldn't be included at this time, they need some special handling.\nI just tested most of these, some of them seem to work fine? The only ones that didn't work are \\omicron, \\lt, \\gt, and \\notChar. I just tested, and I think you're forgetting to include the amsmath package, which we also want to support.\nI'd be willing to bet that MathJax included \\lt and \\gt because it's bad practice to include literal < and > inside of HTML (so if I said something like <span class=\"math\">1<2</span> browsers get confused because they think you're starting a tag of name <2>. Thus, I'd be inclined to include them.\n\\omicron I'm pretty indifferent about. It's pretty silly to include since it's just the letter 'o', but there are LaTeX packages which provide it. Maybe @spicyj has opinions?\n\\notChar I'd definitely say don't include, especially not until we support \\not. It looks like some internal LaTeX thing that MathJax included or something.\n. @RoyiAvital the align environment is unrelated, you're looking for issue #61. Yes, we will support that in the future.\n. I'd rather the dimensions and offsets be calculated using the exact command that LaTeX uses to render the command (That's how I came up with the offsets for the TeX part of the logo).\nFrom here, the macro used is:\nL\\kern -.36em{\\sbox \\z@ T\\vbox to\\ht \\z@ {\\hbox {\\check@mathfonts \\fontsize \\sf@size \\z@ \\math@fontsfalse \\selectfont A}\\vss }}\\kern -.15em\\TeX\nIt's kinda cryptic what's going on in there, but you can at least see what the correct kernings should be. I'll look into it more to figure out if I can decipher the correct vertical align and font size. Thanks, though!\n. This doesn't really fix the general problem, just a specific case of it. For example, something like 1 + \\Huge x still doesn't work. (Perhaps I should have been more clear in my issue, it was mainly meant as a reminder to myself :P)\n. Okay, sorry. That was a bad example, because it does what you want, but not for the reason you want. Here's a better example:\n{)\\Huge x}{)\\Huge +x}\nIn MathJax, it (correctly) puts space to the left of the +, and none next to the x:\n\nThis doesn't, because the interaction here is a close-bin interaction:\n\nI'm not sure what the solution to this is. It might be something like \"put an empty element of the previous type inside\". I'm also not sure whether the want the space to be modified by the \\Huge (like it is now), or to be of regular size? Obviously, things completely outside of \\Huge should have non-\\Huge spaces, and things completely in \\Huge should have \\Huge spaces, but I'm not sure about the stuff along the border. Also, we need to make sure that if the space at the beginning is \\Huge, then the space at the end is also \\Huge, or vice versa.\n. How are you testing MathJax? If you go here, you should get something that uses the same fonts as KaTeX does, so it's easier to tell the difference.\n. I'd rather give a general example instead of a very specific one. Maybe say something like katex.render(\"\\\\displaystyle \" + formula, element);\nAlso, I think \"These APIs\" makes more sense than \"Those APIs\"\n. Thanks!\n. Yep, we need to make a new release sometime. There's a couple more things that I'd like to get merged in before then, but in the meantime you can build your own versions by cloning the repo and running make build, and using the build/katex.min.js, build/katex.min.css, and build/fonts/ files.\n. The goal of KaTeX is not to be a complete TeX implementation, but to provide the math typesetting portions of TeX for websites. Most of the usages of MathJax and KaTeX are for taking basic expressions and making them look good, and most of these uses don't need the full expressiveness of TeX.\nIn addition, while you generally understand what sorts of inputs you are running through your TeX typesetter, KaTeX is able to be used in environments where user generated input is available, and having a malicious user freeze your page because they were allowed to typeset an infinite loop is no fun for anybody.\nAs shown in the discussion in #37, we aren't sure whether we want to support the full extent of \\def (specifically because of how dangerous and conflicting it might be).\nMaybe some time in the far future when more important features are implemented and work perfectly, we will consider undertaking this with more seriousness, but for now this isn't priority for us.\n. @kevinbarabash do you know why that is? Is it just failing to render the font correctly or something?\n. This looks pretty cool. Let me play around with our font generator to see if I can get it to automatically generate these (dependency on a DO server set up isn't the best), but otherwise no objections.\nAlso, confusingly (and not your concern), it looks like we don't have plain .woff versions for the KaTeX_Greek fonts? Maybe those are special or something? I should probably just remove them, since we don't use them.\n. Oops, missed that part. I think it's just that the greek fonts are only supposed to be used in special situations or something, but I haven't figured out when. I'll just remove them when I do the next update of fonts.\n. Okay, looks like this works great. I'll update the fonts and the docker sometime soon! Thanks!\n. Hmm. I'm running the huxley tests on a VPS with a virtual X server (Xvfb), so there isn't an actual screen involved, and it uses a linux host (which docker seems to prefer greatly). What is the size of the images that you get out? @spicyj managed to run them I think and got the same image size, did you do anything special?\n. Okay, that sounds like an acceptable hack for the moment. I didn't realize the sizes were off by so much from what's listed in the Huxleyfile.json; the reason I switched from the original huxley to node-huxley was because node-huxley was supposed to actually produce screenshots of the correct sizes. I'll talk to the node-huxley people to see if there's a good fix for this, it's a big problem if people can't test things in a useful manner.\nTo answer your original question, though: When things are working, the screenshots should be byte-for-byte the same (i.e. doing something like git status shouldn't show any differences). When things are different, I usually look at both of them over one another to see what has changed (i.e. I just use manual diffing). There are tools for doing the diffing for you, but I find that they don't produce useful diffs when things shift a single pixel or something.\n. Okay, I filed an issue here: https://github.com/chenglou/node-huxley/issues/76 We'll see what happens. Thanks for trying to test, I hope this gets resolved so we can make things more useful!\n. The main reason I theoretically like using selenium is that in the future we could do testing using different web browsers, if we get the stuff set up for it. That might be a good intermediate though, since huxley seems a bit overkill for now. I'll try to work on this this weekend to get a better solution.\nCould you upload a screenshot that it takes somewhere, so I can compare and see if it produces exactly the same images cross-computer? (I'm assuming phantomjs was running on your mac).\nThanks for doing some research. :)\n. @alpert pointed out that phantomjs can produce pdfs, which might be more cross-platform... Can you try producing a pdf also, and I'll see what that turns up?\n. Hey, thanks for spending time trying to get this working. Unfortunately, I'm not sure that making changes to screenshots a test failure a good idea. In particular, if someone makes a change that improves things, we don't want the tests to have counted as failing.\nIn other news, I decided that we're not using most of huxley's features anyways (huxley lets you record interactive input and then replay it. The data is stored in the .record.json files, but we don't use this so the data is just duplicated), so I wrote my own script that does only what is necessary to take a bunch of screenshots. Could you try it out, and let me know if you get correctly sized screenshots on both your normal computer and in your docker setup? It's in the use-screenshotter branch here (Obviously the screenshots themselves will be different because you're on a different system, but that's a different problem)\nThanks again for doing all this testing, I was hoping that the docker setup would solve all of these problems, but apparently it doesn't.\n. Ah, I see. That sounds good, then. I'm reviewing your pull now. Let me know when you've checked out the script. Thanks!\n. Interesting. That post has a lot of other useful information too.\nFor example, it pointed me to the fact that \\stackrel is just defined as \\def\\stackrel#1#2\\mathrel{\\mathop {#2}\\limits ^{#1}} which is something we could simulate pretty easily. Food for thought.\n. I'm confused where images live now. Are they in huxley or in compare? If I make changes and want to update the screenshots, how am I supposed to do that? I'd rather the ones in the huxley folder be the ones we check in, and temp ones in the compare folder be created to do the testing.\nAlso, I'm a bit unsure about the imagemagick testing. I'd really like to be able to do byte-for-byte checks, where any changes at all are counted as bad. If people are using the docker, I would hope that the images are identical. We can do some testing to see if this is the case.\n. @jmeas This isn't a dupe because this issue is about what files are uploaded to npm, not what files are included in the repository. You could upload files to npm without them being in the repository (but ideally we probably should do both).\nThanks for reporting this, we've been meaning to do this.\n. There is a plan, we have a pull request outstanding that will get merged in, which will support all standard symbols.\nAs for the Tiddlywiki plugin, we have no control over when they update their version. We just released a new KaTeX release, so you should bug them to update.\nHopefully this answered your questions. Thanks!\n. @kevinbarabash do you mean MathJax renders it faster or KaTeX renders it faster? I find that MathJax renders a low-quality version quickly and then still pegs my CPU to 100% for a while while it renders the high quality version.. I tested putting the giant expression in to the \"ask a question\" box on math.stackexchange.com/questions/ask, and it indeed also pegs my CPU and freezes the page (they use MathJax, for the record). They seem like a pretty high-profile site, so if they don't have protections against it, I wouldn't be tooo worried.\n@kevinbarabash Wow, you're right! Much quicker there for me. Maybe it's a newer version of MathJax? It's speeding up! :). That is correct (I have no idea what the Greek fonts actually do)... I think the correct solution is to just remove any references to the greek fonts from that file. If we find an actual use for them in the future, we can add them back.\n@iamdanfox I'm also a bit concerned that you're getting errors, because the release distribution of KaTeX doesn't include any of the fonts that aren't referenced in katex.less, but they still have @font-face lines in the generated katex.css. Is that a problem?\n. @marshallshen That's an interesting bug, but I'm almost certain it's a gitbook problem. It looks like they're using MathJax's tex2jax to parse out the displaystyle $$ delimiters, which isn't working correctly. It doesn't even work if you're not in a list, just putting $$x$$ y $$z$$ anywhere doesn't seem to work.\nYou should report this bug to gitbook, they'll (hopefully) be able to get the tex2jax configuration right so it works.\nIn the meantime, it looks like while the $$ delimiters don't work, you can use the more specific \\\\[ and \\\\] delimiters (or \\\\( and \\\\) for inline math). They seem to be working correctly. E.g. \\\\[ math \\\\] not math \\\\[ math again \\\\] works great. I'm going to close this, I don't believe that katex is doing anything wrong.\n. We're close to adding support for \\begin{align*}, which should satisfy these needs.\n. Hmm, that's an interesting question. I think that, unfortunately, the answer is no. We've designed most of our algorithms to use position: relative to get most of the heavy lifting done, so it would be hard to make due without those, I think, but it might not be impossible. Do you know what properties do work? For example, does vertical-align: -1em work? That's the only other way I know of shifting things up and down in proper amounts (for instance, see http://jsbin.com/fofecoxuke/1/edit).\nI'll think about this, but unfortunately both of our main developers have been busy with other stuff recently. I'm going to try starting development again after the new year, so that would be the earliest you could expect such a feature. \n. Hmm... Unfortunately, it looks like it also doesn't support using E + F syntax (which applies styles to elements depending on what they are directly next to), which we use a lot in the KaTeX CSS :(.\n. Great, thanks!\n. You are correct! Thanks for reporting this, I moved servers and forgot to copy some files over. It should be fixed now.\n. This is correct, this is currently documented in #61. This is definitely on the radar, Khan Academy also uses a lot of \\begin{align} (similar to \\begin{aligned}); when I have time to work on KaTeX I'll definitely be working on this.\n. What browser are you using? Pasting that generated HTML into my browser (chrome 40) produces the correct result:\n\n. I'm going to close this since there wasn't any followup. If you're still having this problem, feel free to reopen!\n. Thanks!\n. In general, no. I'm not sure this would be possible either, as things like \\sqrt{3} are currently supported, but \\sqrt[3]{3} are not, so it's not clear whether \\sqrt would count as supported or not.\nHowever, KaTeX will throw an exception if it encounters something that it doesn't understand, so you could try something like:\njavascript\nfunction isSupported(expression) {\n    try {\n        katex.renderToString(expression);\n        return true;\n    } catch (e) {\n        if (e.__proto__ == katex.ParseError.prototype) {\n            return false;\n        } else {\n            throw e;\n        }\n    }\n}\nDoes that work for you? Note that you need a full expression, not just a function, so isSupported(\"\\\\sqrt\") will return false, but isSupported(\"\\\\sqrt{3}\") will return true.\n. @spicyj @jeresig Here's the change, would love a review.\nI set up a testing site at http://katex.xymostech.com/ If anyone with a screenreader would like to test it out, that would be great!\n. Hmm, you are correct. That's probably because when we build the HTML tree, we change some of the parse tree in accordance with how TeX works. I'll switch the order of how we build things, but we should probably stop doing that some time in the future...\n. > note the default value on a \u2211 mo is largeop=\"true\"\n@fred-wang Interesting. Is there a place where that is documented? This table seems to indicate that the default is always largeop=\"false\".\nI also found this stackoverflow question about adding alt text for math nodes. I'm a little hesitant about using the <semantics> tag because it doesn't look like it's supported anywhere but in Firefox. I guess MathML itself isn't that well supported either in other browsers (:disappointed:), but I'd worry about breaking support on things that work now. What do you think?\n\n\nI did some basic testing and it seems to be working as expected, so it\u2019s looking good!\n\n\nSounds great!\n. Ah, I hadn't seen that table. Very interesting!\nThese are good points. I'll add in the semantics tag!\n. I think this is because that test uses raw http:// links to the MathJax script, but the page you're loading uses https://. I recently made a newer test that uses // links (so they automatically use whatever protocol you're using) at https://jsperf.com/katex-vs-mathjax/34 that should work. I'll be releasing a newer test soon that should use the current version of KaTeX.\n. This is a duplicate of #35 \n. There is currently no support for it, but it's on the list of things to work on. Duplicate of #43 \n. Hi, this is great! Thanks for sending it in. Can you sign the Khan Academy CLA so I can merge it in? http://www.khanacademy.org/r/cla\n. Thanks!\n. You're right! I don't know why they're marked like that, I copied them from another website. I'll change that.\n. Are you running katex.render on your mathy elements? KaTeX doesn't (yet) automatically render all of the math on the page, so you have to manually call it.\n. It is definitely possible to use KaTeX with a markdown library, (we do so at KA), but there isn't really a guide, yet. If you look at the README, there's a short description of the katex.render API, which you would probably use. What markdown library are you using?\n. This should be solved by using the auto-render extension.\n. I noticed this problem when trying out the screenreader, thanks for reporting it.\nUnfortunately, there isn't a trivial fix for this. The TeX parser splits strings into individual characters (since TeX has no real conception of semantics), so by the time we're building the MathML tree, there's no information that the two numbers should go together.\nI could try doing something like \"Combine all adjacent <mn>[0-9]</mn> and <mi>.</mi> into a single <mn>\", which would require a little work but wouldn't be awful. It would require a little more work to get -2.3 to turn into a single <mn> (but shouldn't be that bad). However, then something like 01.2.3 would get merged into a single <mn>. Does that sound like an acceptable loss? I'm not sure how a screenreader would read <mn>01.2.3</mn> (maybe you could try it?)\n. We haven't figured out a good cross-browser-compatible way to lay out equations in a way that would let us line them up to do multi-line equations. We've looked into couple approaches, but none of them have worked.\nRight now, almost all formatting in KaTeX is done through CSS, and we only calculate heights of elements to do vertical alignment. Thus, to get multi-line equations to work, we have to figure out how to get CSS to do consistent-across-browsers horizontal alignment of elements in such a way that we can then vertically position the elements where we want them. Just based on what most browsers support and what CSS lets us do, the only feasible method for doing this is to use HTML <table>s. However, due to browser differences and the semi-unspecified spec surrounding them, it's hard to find the right CSS magic to get everything to work.\nNeither @spicyj nor I are working full-time on this, so we haven't been able to spend enough time on this to find a suitable solution, but we know people want this, and would like to add it in the future.\n. (Also, once we figure out how to actually do the layout, we need to change the parser to understand the funky syntax, figure out how the different kinds of alignment work, etc.)\n. @pnsaevik The problem with HTML tables is that the layout algorithm isn't actually specified, so it's really hard to get things to look correct in all the different browsers. Most of KaTeX is getting the layout of things exactly right, so having to deal with browser differences would be a huge pain.\nAs it turns out though, that statement is out-of-date and we did figure out a good way of solving this without the use of tables. :)\n. @mull This has been solved! We now have various multi-line environments, like \\begin{array} and \\begin{aligned}. The code to render them is here: https://github.com/Khan/KaTeX/blob/master/src/buildHTML.js#L517 We basically stack columns next to each other to get the desired effect.\n. You are correct, we have \\overline but not \\underline. Not a strategic move or anything, we just haven't added it yet.\n. Hello!\nUnfortunately, adding another kind of input (like MathML, or even things like AsciiMath) is mostly infeasible at this point. The parser is fairly specialized for understanding TeX, and we currently don't even support all of the things in TeX that we want to support yet, so we might work on this, but probably not soon in the future.\n. Hey there! Thanks for trying to get this working. I'm not sure where you came up with the calculation for how much to shift the exponent up. I looked up the definition of \\root in the TeX source (which we would like to base the calculations on), and it says this:\ntex\n\\def\\root#1\\of{%\n  \\setbox\\rootbox\n  \\hbox{%\n    $\\m@th\\scriptscriptstyle{#1}$%\n  }%\n  \\mathpalette\\r@@t%\n}\n\\def\\r@@t#1#2{%\n  \\setbox\\z@\\hbox{%\n    $\\m@th#1\\sqrt{#2}$%\n  }%\n  \\dimen@\\ht\\z@\n  \\advance\\dimen@-\\dp\\z@\n  \\mkern5mu%\n  \\raise.6\\dimen@\\copy\\rootbox %\n  \\mkern-10mu%\n  \\box\\z@%\n}\nAlso, could you change the failing test to make sure that the optional arguments work? Thanks!\n. This was added completely in c48de165e8795dc6fc0c932d83c75b44ff7dc2d9.\n. Indeed, text-indent does make the math look annoying. Could you submit a pull request to fix that?\n. Yes, the CLA needs to be signed for all pull requests.\n. Thanks! Looks great.\n. It looks like you're passing your input through AsciiMath before turning it into KaTeX, which is why it isn't working for you. AsciiMath is outputting the formula:\n{\\left\\lbrace{25}\\cdot{0.008}^{{x}},{25}\\cdot{\\left(\\frac{{1}}{{125}}\\right)}^{{x}}\\right\\rbrace}\nwhich is being correctly rendered (you can try it at http://khan.github.io/KaTeX/). I'm not sure how AsciiMath works, but that is why you are seeing the extra { characters.\nAlso, it looks like you're including KaTeX v0.1.1 on that page, not v0.3.0.\n. Correct, you are using AsciiMath on your website. If you type in {25*0.008^x, 25*(1/125)^x} into that website, it says that the input format is AsciiMath, which means that it runs your math through the AsciiMath converter before it gets processed by KaTeX. (I checked this by setting a breakpoint in the katex.render function, and ensuring that that the LaTeX that is sent to KaTeX isn't {25*0.008^x, 25*(1/125)^x}, but the expression I pasted above).\nIf you try typing in that expression somewhere that only renders KaTeX and doesn't do the AsciiMath transform, like at http://khan.github.io/KaTeX/, you won't see the { and } (but you'll also see * instead of \\cdot, and a literal 1 / 125 instead of a fraction, because those are both transformations that AsciiMath does).\n. We don't currently have anything like DeclareMathOperator in KaTeX. Since \\DeclareMathOperator is basically the same as \\operatorname, this should be merged into #145.\n. How are you trying to load the auto-render file? You should be including the built auto-render.min.js file, not the un-built auto-render.js file, unless you are including it via browserify/webpack/etc. to serve on your page.\nI should be more explicit about including that file. If you use the built file (for example, from cdnjs), does it work? \n. There was a pull request to add this: #131. I'd like for \\LaTeX to be rendered using the true offsets/dimensions as in actual LaTeX, which is why it wasn't merged in. This is something that would probably be nicer if this was just implemented as a macro whenever we figure that out, but if you (or anyone else) wants to try to incorporate the true metrics.\n. @jeresig I'm fairly sure that the tree is pure JSON, so that solution should work. Also, it looks like IE 8 does support both JSON.parse and JSON.stringify (http://caniuse.com/#feat=json) , so that should be fine?\nI think it's pretty reasonable to just merge this in. I've been bitten by this mutating the tree before anyway.\n. Great! Can you squash the commits?\n. This is not a kerning issue. That is the same as how it appears when viewed in LaTeX:\n\nand in MathJax:\n\n. Oops, forgot this hadn't gotten merged in. Looks good to me! If the tests break at some point or something, I'll maybe change them, but if they're working locally and on Travis then :+1: \n. Thanks for this! Could you squash your commits into one?\n. Thanks!\n. Just leaving some small comments, this is looking great!\n\nI think tat on the whole we might be lexing a lot of stuff more than once.\n\nThis is indeed the case, we haven't tried to do any caching or anything to help the performance of this at all. If just re-lexing is easier, I think that's a totally fine approach at this point.\n\nCurrntly KaTeX can't handle mode changes (it doesn't know about $ or \\mbox). On the other hand, it does allow size changes in math mode, which are forbidden in LaTeX.\n\nThis is something that we've had varying ideas about. I think generally, the sizing commands like \\small must work outside of the environments, and should probably do something reasonable inside.\n\nAnd on some runs the Lap example gave a different result.\n\nLike @kevinb7 says, this is just a funky result due to how rendering works sometimes. You're not doing anything wrong, it's due to some funkiness in how firefox renders stuff (if you delay taking the screenshot for any amount of time, the problem goes away).\n. That image diff looks pretty great! I think that the discrepencies around the solidus are probably just font differences, almost certainly unrelated to the matrix stuff.\nAlso, indeed KaTeX fonts are thicker, they're designed that way (to match what MathJax does, and because it's easier to read at smaller font sizes): https://github.com/Khan/MathJax-dev/blob/master/fonts/OTF/TeX/Makefile#L28\n. Hi! Thank you so much for this! Everything looks great! I'm just going through and making some small javascript nits, but nothing major. Thanks!\n. +1 on keeping the stacked delimiters stuff separate. Thanks for cleaning that code up!\n. Huh. When you take the screenshots, are you using the browser zoom feature or increasing the font size? Also, are those the same expressions? The first a/b looks like it's in displaystyle, while yours looks like it's in textstyle? (note that stuff on khan.github.io/KaTeX automatically adds \\displaystyle to the generated code)\n. > make the number of arguments fixed. I.e. always pass parser, func, args, positions in a fixed order, with args being an array of arguments, and this unset\nI prefer this much more than the custom this value. Abusing .apply just to tack on extra values seems really strange. Maybe we could instead pass in an options parameter as the first argument that contains parser, lexer, name, mode, positions, etc?\n. :+1: context sounds good\n. > Unfortunately, I still got different results on different machines. Very strange!\nHmm, are there consistent differences between the images?\n. Looks good to me!\n. I think it's always preferential to base things off of the current master, because it makes it easier to merge in (and thus it's easier when reviewing to see the actual code that will be committed).\n. :+1: (sad that macs and linux use different versions of cp though)\n. Looks good to me! Looks like you've been keeping it up to date too, awesome! I'll try to keep it up to date in the future, too!\n. (Sorry for taking so long!) This all looks good now! Thanks for the docstring about rsfs, that's very strange!\n. This looks good! I was a little confused about the spacing between the + and the \\KaTeX, but it looks like we just forgot to add an \"mord\" class there. I'll go sneak that in...\n. This all looks good! Sorry it took me so long to review this!\n. This looks good to me!\n. Looks good to me! :+1: @kevinb7 any thoughts?\n. Looks good to me! :+1: \n. I'm not positive about the \\lgroup, \\rgroup, \\lmoustache, and \\rmoustache additions, which I think is why they weren't added with the rest of the delimiters. If you render these in TeX or LaTeX, you get funky things:\n\\lgroup \\rgroup \\lmoustache \\rmoustache in LaTeX:\n\n\\lgroup \\rgroup \\lmoustache \\rmoustache in TeX:\n\nMathJax does render them the way you might expect, just using their small forms:\n\nLaTeX and TeX do seem to show them correctly when used as delimiters, but do so slightly differently\na \\left \\lgroup \\right . \\left \\rgroup \\right. \\left \\lmoustache \\right. \\left \\rmoustache \\right. in LaTeX:\n\na \\left \\lgroup \\right . \\left \\rgroup \\right. \\left \\lmoustache \\right. \\left \\rmoustache \\right. in TeX:\n\nSo I'm not really sure what to do. The other change looks good though!\n. This looks great! Thanks for this! All of this infrastructure was set up in the week before release, and hasn't been really touched since. :) \nAlso, I actually think that it makes more sense to leave all of these commits separate, since they're all self-contained, and they make it easier to figure out what changed. Squashing commits makes sense if you break things and then fix them later (because then doing a git bisect might land you in a broken state) but these all seem fine to merge in. (But maybe the last commit could be merged into the second one, which is something you can do with rebase -i?)\n. slides.com\n. TeX shows:\n\nLaTeX shows:\n\n. Just looking through the definition, it looks like this means: \ntex\n% Don't allow a linebreak before the :\n\\nobreak\n% Insert a 2mu space\n\\mskip2mu\n% Add an empty punct element (maybe for spacing next to other elements?) I guess the\n% acutal `:` is wrapped in {}, so maybe it's treated as an ord from the right but a punct\n% from the left?\n\\mathpunct{}\n% Add a -\\thinmuskip space if we're not in scriptstyle or scriptscriptstyle\n\\nonscript\\mkern-\\thinmuskip\n% Add an actual colon\n{:}\n% Add a 6mu + 1mu space\n\\mskip6muplus1mu\n% End the macro\n\\relax\nWhich should be pretty easy to implement? I guess this probably makes more sense to write as a macro, once we have those, since having a specific \"\\colon\" type seems a bit wasteful.\n. > Is it that an \\mskip could be subject to line change while an \\mkern can not?\nThat's correct, as far as I (or stackoverflow anyway) understands it. \n\nSo the explicit kerning here cancels the implicit spacing, cuaisng the two atoms to follow one another with no glue in between.\n\nAh, nice catch! That's very interesting.\n. Tinkering around with things, I think this might be caused by a couple problems:\n1. We make our fonts a little bit thicker when we create them, so we maybe should adjust the metrics that we get to account for this?\n2. TeX assumes that you're going to put some space between the different lines, but browsers don't always? Maybe we should explicitly add the line-height ourselves?\n. This is pretty clearly not a KaTeX issue.\n. :+1: Thanks for fixing this so quick! Just one little nit, then this looks great!\n. Seeing as you're spawning a new process of something anyway, is there a reason you're not just using normal TeX/LaTeX to render your math?\n. @gagern\n\nHad you actually encountered trouble with the window size at some point? Reproducible?\n\nI did encounter trouble with the window size, but I believe it was being caused by the image being too big! I think I added those lines because it kept looking like it was the previous test that was failing, hence the changes. I'll remove them here, but maybe make a separate diff (It also fixes a typo).\n\nthose two image changes should be kept out since they are unrelated\n\nCan do!\n. I vote for leaving it, and maintaining compatibility with LaTeX. It maybe causes some pain for users converting from MathJax or doing a MathJax fallback, but it's more consistent and heops people trying to do plain LaTeX -> KaTeX conversions.\n. Very strange. I can't find any styles that are being changed in the frame, but I remember seeing something like this before on android. Probably needs more investigation.\n. We do have a warning for it! https://github.com/Khan/KaTeX/blob/master/katex.js#L33\n. By \"official\" do you mean \"mentioned in CONTRIBUTING.md\"? The irc channel seems more universal, but gitter is pretty great too. I'm all for changing it, maybe we should set the topic in the irc channel to direct to gitter.\nAs a side note, do we know if gitter has an up-to-date(-ish) version of KaTeX?\n. I think {,} is the correct way to do this. That SO question mentions it, and the TeXbook calls it out specifically too:\n\nWe could maybe add something like the \\num command, but this seems like a bit of overkill for now (and would probably just end up with us implementing an internal should-commas-have-space setting anyway).\n. :+1: Thanks for this! Trailing newlines should definitely be accepted.\n. @mbourne Interesting stuff!\n\nKaTeX (and Codecogs, where I was testing things) would choke on multiple {{ }} like this:\n\nI'm confused about why \\frac{{1}}{{{3x}^{{2}}}} was breaking things. It seems to be working fine for me, maybe it was Codecogs' error?\n\n(2) Braces enclosing the matrix, like this\n\nAs far as I can tell, that isn't legal LaTeX (because the column delimiters and newlines have to be in the outer scope), so I can see why that wouldn't work. \nAs for supporting ASCIIMath, that's probably not on the horizon for the moment. However, at this point we've sorta stabilized on an API where the parser spits out a (currently non-standardized) parse tree, and our two renderers (HTML and MathML) read that and produce appropriate output.\nIn the future, we might consider standardizing the parse tree, and then you could produce parsers that create that parse tree and renderers that render it, and you could mix and match (or combine, like how we currently do HTML and MathML at the same time).\nFor now, we're still adding features and changing things at a rapid enough rate that trying to standardize that interfacing parse tree would be a nuisance, but food for thought for the future!\n. The fonts are licensed under the SIL Open Font License, it says that in the metadata of the font but it's sorta hard to find. If you want to check using FontForge, you can look under Element -> Font Info -> TTF Names -> License, where it says:\n```\nCopyright (c) 2009-2010, Design Science, Inc. ()\nCopyright (c) 2014 Khan Academy (),\nwith Reserved Font Name KaTeX_Main.\nThis Font Software is licensed under the SIL Open Font License, Version 1.1.\nThis license available with a FAQ at:\nhttp://scripts.sil.org/OFL\n```\nHopefully that's all you need! Glad to see the fonts are being useful!\n. (Also note that the fonts are built using a modified toolchain from the https://github.com/Khan/Mathjax-dev repo, with instructions on how to build in https://github.com/Khan/KaTeX/tree/master/dockers/MathJaxFonts)\n. No problem at all. :) We probably should make it more explicit somewhere that the fonts are under SIL...\n. LGTM! Looks like this needs to be rebased though.\n. TeX has rules for putting horizontal space between elements, and that's what you're seeing. In this case, when you put the cursor between the + and \\sin, you get the bin + ord interaction (because + is a bin and \\rule is an ord) plus the ord + op interaction (because \\sin is an op), whereas when there is no cursor you only get bin + op, which adds up to a different amount. \nThere might be a way to get the alignment to work using some funkiness from TeX (I'm not exactly sure what, I'll think about it), but we don't have those things implemented in KaTeX right now.\nAs for the CSS you're manually applying:\nrule.style.padding = \"0px\";\nThis shouldn't be needed.\nrule.style.marginRight = \"-1px\";\nThis can probably be accomplished with a \\kern.\nrule.style.borderLeftWidth = \"1px\";\nTechnically, KaTeX doesn't let you use any units except for ems and exs, because all of KaTeX's calculations are font-size independent and these are the only units which are dependent on font size. So your rule width should probably use ems, and as a whole should end up looking something like (once we implement \\kern):\n\\kern -0.01em \\rule{0.02em}{0.7em} \\kern -0.01em\n. We already talked about these and decided against it here: #149 but now I'm less sure about that decision. Getting a macro expansion of \\lt into < for things like \\left\\lt looks like it works in TeX, so we might try that option once macros come around. Dealing with < and > inside HTML is a nightmare though, and if someone's using our auto-render plugin then they don't have a chance to do a replacement before running it through KaTeX.\n@crepererum How are you using KaTeX? Would doing something like adding an option to the auto-render extension to turn \\lt into < and \\gt into > before sending the input to KaTeX, would that work for you? \n. This LGTM! Remember to squash before pushing though :)\n. It probably makes sense to base this representation on what can come in TeX's math mode, which can be found on page 290 of the TeXbook. We can choose a useful subset of them, (like the ones that we currently support) and figure out all the parameters necessary to render them.\nWe also might want to think about how we should handle state going forwards. Right now, the only state modification we really allow are style changes (like \\displaystyle) which lets us basically sidestep the problem entirely using the funky \"implicit groups\" but we might want to come up with a representation that more correctly models how TeX works for the future (in case we want to start allowing other kinds of state changes, like variables or macros).\nI could write up a doc detailing such a representation, or we could work on this together some time?\n. > For \\frac commands which generate genfrac nodes, it appears that leftDelim and rightDelim as always null, at least in my testing.\nA random interjection: Something like {a \\choose b} would return something with a leftDelim and rightDelim, right? In general though, there might be cases that KaTeX doesn't currently handle that we would want the AST to be able to handle.. I'm pretty sure it regressed when we introduced MathML support, which was a while ago. There might be a way to bring it back if we really care, but unless we actuallly set up tests it'll probably break again.\n. The syntax that KaTeX supports is LaTeX-like, and it supports a subset of the LaTeX functions. You can see a list of functions that KaTeX supports here.\nThe chat you linked to looks like it uses MathJax, another library for rendering LaTeX in the browser.\n. Awesome! Also, thanks for splitting these out into a separate test file. katex-spec.js should probably be split up some time as well.\n. I'd say do that in separate pull requests. :)\n. We're planning on making it easier in the future to build different renderers for the output of the KaTeX parse tree. In the meantime, using a webview is probably your best bet. \n. It looks like the CSS is not being loaded correctly. The main math part isn't rendering correctly, not just the MathML. Also, the CSS hides the MathML completely, so if the CSS is loaded the MathML shouldn't even be visible. Let me know if that helps. It's cool to see KaTeX being used in your app!\n. I think that MathML is the correct general solution going forward (as people mentioned in #38), but the requirements for our SAT product were perhaps different than general accessibility (IIRC, most of the problem was around getting the screenreader to read the text when new math appears on the page, but I bet that's our fault and not that of the screenreaders). Playing around with the generated MathML using a screenreader that supported it showed that they worked fine.\n. It looks like you capitalized KaTeX differently in your CSS vs JS paths. your phone might be using a case-sensitive filesystem while your computer doesn't. Could you try\n<link rel=\"stylesheet\" href=\"lib/katex/dist/katex.min.css\">\n. > OK, what do we see here? For scriptstyle we scale fonts by 0.7 compared to text style. So assuming a 10pt font we are essentially using \u03c314 = 0.7\u22c53.63 = 2.541 < 2.889 and \u03c315 = 0.7\u22c52.89 = 2.023 > 2.000. So yes, placement of these exponents is wrong, and we should find a way to fix this. I guess we will need to store all the different values of \u03c3 for the different styles, so that we can pick the one appropriate to the current style.\nOh! That's a really cool calculation to look at, interesting that \u03c314 is off by so much! I remember a discussion before about adding style-specific metrics for a bunch of the other metrics that change like this, we already did that for one of the metrics: https://github.com/Khan/KaTeX/blob/v0.6.0/src/fontMetrics.js#L103 We could try doing something similar for \u03c314 and see if that fixes some of the discrepancies?\n. What happens if you put the same characters outside of \\text?\n. @kevinbarabash The code of this looks good! Do you want to write the test that @ronkok suggested? Also, what happens when you put these in \\text{}?\n. You could use something like KAS, which should support what you are looking for. The README has instructions for parsing and evaulating.\n. @kevinbarabash this looks good to me!\n. I think the problem is that you're not actually escaping the backslash in your equation. Your line should probably read\nvar exp = \"sin(30^{\\\\circ})\";\nYou also probably should put a doctype at the top of your HTML file, or you might run into strange bugs.\n. My version of LaTeX doesn't successfully compile A_\\vec{r}, it says \"! Missing { inserted.\" Where are you using it that it does compile?\n. Hmm, interesting! TeX is much better at error recovery than we are. I'll make a feature request for some sort of error recovery. Thanks for reporting!\n. Duplicate of #331 \n. Are you sure you're using literal dashes (-) and not something else? It works fine for me!\n\n. This unfortunately sounds more like a problem with wkhtmltopdf than with KaTeX. You could try filing an issue there? You might also want to try visiting the page in qt webkit, and see what it looks like there? I have no idea how it works though.\n. That only works for escaping $ inside of math, but not outside of it. @PaulSohn can you give an example of what you're trying to do?\n. \\mathbf makes some characters bold, e.g. \\mathbf{X}.\n. you need a space in between cdot and a. it is complaining that \\cdota is not a command.\n. (I replaced * with \u2020 to make things less confusing maybe)\n. Can you not apply styles to the span.katex elements? I'm not sure what the .has-jax class does.\n. You are definitely right! It looks like the text-align: center that's applied by .katex-display is somehow applying to everything inside. Looks like putting text-align: initial on .katex fixes it, I'll make a pull request for that.\nThanks! Also, how are you enjoying using KaTeX on your website?\n. Before: \n\nAfter:\n\n\nWe should add an option to the screenshotter so that we can test this and add a test before the next release.\n\nSounds good to me!\n. KaTeX produces inline math for me using katex.renderToString: http://jsbin.com/katesavunu/edit How are you using it specifically?\n. It doesn't seem like our current function support has a good way to do this. You could add a function in src/functions.js which returns a new type entirely (like pmod) and then handle it in both src/buildHTML.js and src/buildMathML.js.\nHowever, \\pmod sounds like something that would be easily solved using macros. We don't support those yet, however. See #250\n. The LaTeX code for an equation is embedded in the MathML code, so you can extract it yourself if you want. This behaviour could maybe be put into an extension if you wanted it.\nI don't think that the contextual menu is in the scope of KaTeX though, nor do I think we want it. Overriding the default right-click behaviour is usually just annoying. We also couldn't guarantee that it would work since KaTeX can be server-side rendered, but the menu would require some client-side script to run.\n. LGTM, once the tests pass!\n. The example is a javascript string, in which the backslashes are escaped. You don't need the extra backslashes when you type it into the example page. So you should type in: c = \\pm\\sqrt{a^2 b^2}, and it works: \n\n. @kevinbarabash To answer a couple of your comments at once: We explicitly don't want the built files in dist/ existing on the master branch, so we make a detached head, tag it, and then push just that commit to origin. So no, it shouldn't be the same as master.\n. @kevinbarabash that is correct\n. KaTeX doesn't currently support the \\LaTeX symbol, if that's what you're asking. This is a duplicate of #224\n. @polemon Huh, interesting! Indeed, this doesn't sound like a KaTeX problem, but thanks for letting us know.\nA solution might be convincing the libraries to use window.addEventListener(\"load\", ...) instead of setting window.onload, so that they can both run.\n. We don't have font metrics for the Persian characters you're trying to render, so we throw instead of rendering something that looks bad. Closing in favor of #380, where we've discussed this more.\n. Hello @lolmaus! Thanks for the report.\nIt looks like \\underset is defined as \\underset#1#2{\\binrel@ {#2}\\binrel@@ {\\mathop {\\kern \\z@ #2}\\limits _{#1}}} (and \\overset is the same thing but with ^ instead of _). I'm not sure what \\binrel@ does, but other than that it's pretty simple, you just make a \\mathop and then use \\limits to put the first argument under the second. We don't yet support \\mathop (see #482), but once we have that you could just do \\mathop{\\longrightarrow}\\limits_{F-1,6-BP}\nThen once we have actual macro support (#250), we can actually make \\overset and \\underset work. I'm gonna close this issue and you can watch those other issues. #482 shouldn't be too hard to implement if someone wants to take it, but #250 is going to be a long ways down the road.\n. Correct :(\n. @sthoch :) Nice hack!\n. You're right! Looks like in https://github.com/Khan/KaTeX/commit/29b00ee6 I accidentally deleted it!\nWould you mind adding a screenshotter test for this? You'll have to add something to test/screenshotter/ss_data.yaml and then run the screenshotter on your computer and check in the new images.\n. I think that screenshotting bug isn't your fault, looks like other people are seeing it: https://github.com/Khan/KaTeX/issues/470\nOne more request, but looks good!\n. Thanks!\n. This looks fine to me, once the screenshot tests look good :)\n. Can you copy the HTML of the page you are loading? This sounds like what happened here: https://github.com/Khan/KaTeX/issues/332 which was fixed by adding a <!DOCTYPE html> doctype.\n. Glad it worked for you :)\n. What does the HTML for the page that you're testing this on look like? Does it have a doctype? It sounds sorta like what happened here: https://github.com/Khan/KaTeX/issues/332 which was fixed by adding a <!DOCTYPE html> doctype.\n. Never mind, I see that you have the html file you were using in the gist. Looks like maybe this is the same issue as in https://github.com/Khan/KaTeX/issues/45 or https://github.com/Khan/KaTeX/issues/183, but we never figured out the problem there. What browser are you using?\n. Hmm, interesting! Our math doesn't have a good way to wrap right now, so the best solution I can think of is to add some CSS which allows for scrolling:\n.katex-display {\n    overflow-x: auto;\n}\n. Looks like there's two issues, which can both be worked around for now:\n- We don't support \\dots: it depends on observing the environment that it's in, so it's non-trivial to implement correctly. This can be replaced with \\ldots, since that's what \\dots would turn into in this case.\n- We don't support \\middle: I didn't even know that \\middle existed! You can approximate it by doing something like \\bigg| or \\Big| in your case.\nSo, with those two things fixed,\ntex\n  G_{p,q}^{m,n} \\left(\\begin{matrix}a_1, \\ldots, a_n & a_{n+1}, \\ldots, a_p \\\\\n                                        b_1, \\ldots, b_m & b_{m+1}, \\ldots, b_q\n                          \\end{matrix} \\bigg| z \\right).\nends up rendering fine. :)\n\nHopefully this is helpful! I'll file some issues for the missing features.\n. @gagern Ah, very cool!\n. They are definitely not equivalent, one uses \\dfrac and the other uses \\frac. In \\dfrac (essentially short for \\displaystyle\\frac) the top and bottom of the fraction are rendered in textstyle (the normal font size). In plain \\frac, the top and bottom of the fraction are rendered in scriptstyle, which is smaller than textstyle. So, this isn't a bug in KaTeX, it's just how TeX works!\nYou can search the internet for \"difference between \\frac and \\dfrac\" and get more detailed answers.\n. @prasanthown Do you have a doctype on your page? KaTeX doesn't work in quirks mode, so you need to have a doctype on your page. Check if you have something like <!DOCTYPE html> at the top of your page.\n@kevinbarabash it's in a javascript string, so the backslashes are escaping, so it makes sense that it rendered.\n. Looks good to me!\n. [clabot:check]\n. Hello @nickkolok! KaTeX doesn't offer a great way to do this right now, but there is a somewhat-undocumented KaTeX.__parse that might do what you want: https://github.com/Khan/KaTeX/blob/master/katex.js#L72 Note that the output of this isn't stable and might change from version to version.\nWe're also thinking about separating out the renderer and parser a little bit via #376 that you might be interested in. We don't have anything for you to use right now, though.\n. @kasperpeulen We'd like to support people who need KaTeX in IE 8, which is why we provide the fonts. If you don't want to support it, you can modify static/fonts.less and set @use-eot and @use-ttf to false and make a build using those settings.\n@kevinbarabash Maybe we should make .woff the default now, and let people enabled .eot and .ttf if they really want it? That would probably make sense for the majority of people.\n. 100% agree with @gagern. I think adding .sr-only sounds like our best option, so long as it doesn't conflict with other methods. I can try to look into the different methods for hiding.\n. Duplicate of #433 I think?\n. :) No problem. Thanks for reporting!\n. @bigtan it took us a bit to write the release notes, sorry. It should be released now!. @edemaine cdnjs is supposed to update it automatically, I think we just wait. :(. @SamanthaYu It would be nice if you added some code, but I think you're trying to put KaTeX-rendered math inside of your <option> tags in your dropdown?\n<option> elements can only contain text, not markup tags like what KaTeX produces, which is why you're seeing all of the text that is contained in the markup that KaTeX produces. Since the markup contains MathML, that text is displayed as well.\nSo, KaTeX doesn't support rendering math in dropdowns. You should just copy the individual characters that you want (like \u00b1, \u222b, \u03b8, \u03c0) and put those directly in your <option> elements.. [clabot:check]. @vihanb When you say \"rendered the exact same as an inline equation\" do you mean \"centered\"? Here's a jsbin with some inline math and then some display math: http://jsbin.com/sikehuxofu/1/edit?html,output\n\nThe display math is centered and on a new line, but it's also in display style, so the \\sum is larger. It's also wrapped in a div.katex-display element, which is what turns it into a display element:\n\nSo, I'm pretty sure that it's being correctly rendered as inline math, but you must have CSS on your site which is centering it.\n. In the original issue about adding accessibility to KaTeX ( #38 ) there were some strong proponents for producing MathML so I'd like to at least get some feedback from some of them (@dylanb @NSoiffer @fred-wang) before we get rid of it completely. While maybe not the optimal solution, it's probably providing some benefit to users with screenreaders, which can understand MathML much better than the HTML we produce.\nIf we do want to transition to using our text-based approach, I'd strongly advocate for us always producing it (like we do with the MathML now), instead of just allowing people to include it, because most users will end up not including it which would be very sad for accessibility. Similarly, I'd argue against allowing turning the MathML off, it's there because people need it.. @oddhack I did a bunch of digging into what is causing this problem. It like there's a difference in rendering between XHTML and HTML 5, maybe due to the limited-quirks mode (which is like quirks but with fewer quirks, and which is turned on in XHTML 1.0): https://quirks.spec.whatwg.org/#the-line-height-calculation-quirk\nI made a minimal (I think) repro case for what's going on here: http://jsbin.com/fihiboqopu/1/edit?html,css,output If you replace the doctype with the XHTML one, you'll see the \"2\" inside of the box shift vertically a little bit. This is a reproduction of the HTML that KaTeX uses to vertically position things. Because of that difference, fractions render poorly when using XHTML. This same thing happens in quirks mode, (i.e. if you remove the doctype completely the same thing happens), which leads me to believe it has something to do with limited-quirks mode.\nI think that adding the warning like we're doing in #602 is helpful, since it'll let people know what the problem is. However, it would be great if we actually just supported XHTML, since people are probably using it. It looks like there might just be this small thing wrong, and it's probably fixable (admittedly it's probably not going to be easy to solve; the current incantations we currently use to make the vertical positioning work in many different browsers is terrifying).. @gagern\n\nPutting a zero-with space U+200B into the #e container in your example, directly following #f, seems to fix the problem. It breaks the quirk rule of only having inline-level elements inside the block. So we need to find a way to introduce these into our DOM (unconditionally or if we detect limited-quirks mode) in such a way that it doesn't break any of our CSS spacing rules that are based on adjacent elements.\n\nAh ha! Wonderful! I was trying to put elements after #e, but I guess I don't understand the quirk well enough. Did this fix it with the HTML 5 doctype and the XHTML doctype? It looks like it does to me. If so, we should just try adding that space! Maybe it'll fix the problem. It might cause others, but hopefully they will be caught by the screenshot tests? I've blocked off some time later today to do a release, I'll play around with that as well.. (I just played around with it, it looks like it does in fact solve the problem, in both doctypes!). Ack! I was making a commit for this, you beat me to it :) Overall though, this seems very heavy handed. Adding zero-width spaces to almost every single span in the tree is going to be a lot of zero-width spaces. That might not be a terribly big deal when rendering normally, but I imagine that would inflate the server-rendered size a bunch.\nI have a PR I'm about to send that should fix it in just the places that need it. I pushed it here, if you wanna take a look: https://github.com/Khan/KaTeX/commit/f7d9569547bae02f625ddf50e54b20241592d672. (I made the PR at #608). Okay, I did a bit of testing on IE 9 and found that quirks mode is awful. So I'm gonna modify this to go back to warning on quirks mode and to just testing limited-quirks mode everywhere.\nI'll do that later, though. I'm gonna go make the release.... > Why? Patch level releases x.y.z should be from a x.y maintainance branch. That branch itself either forked from master around the x.y.0 release, or from the version x branch if latest development had been at a newer major version by the time x.y.0 got released. At least that's the way I see it.\nOkay yes, that makes sense to me. Maybe my main concern is that we're allowing for running the release script on any branch. I wish we could codify what you just said in code, since I know I've accidentally run the release script from the wrong place before. But it does get printed out now. So I'm fine with this.\n\nGood idea. During development I had created shell functions which just printed the results from the calls to git and npm. Conditionally doing that might be easy. I'll look into it.\n\nAnother thing that happened to me was I wasn't logged in to npm, so it got to the place where it made a new tag and then failed to actually do the upload, which required me to manually delete the tag. Maybe we could check that you're logged in as a user with the correct permissions with something like npm owner ls katex | grep $(npm whoami). Just throwing out ideas here. :). Ahh! Beautiful! I love how --insane and --dry-run work.\n\nOr should the sanity checks just report the issue, and the user can decide at the confirmation whether or not to ignore them?\n\nThat might be better if someone just wants to skip one of the checks, but still wants to be warned of other things. That shouldn't be too hard, just editing what $INSANE is set to, right?\n\nShould the dry run mode imply not exiting on failed sanity checks? Should the dry run mode indeed execute make, or skip that, too? Should the dry run mode perform all local git operations, then skip pushing them and instead remove the local tag again?\n\nI like that it executes make, cause that might actually catch bugs. I'm not sure what bugs would be caught by running git for the local operations that aren't already caught by the sanity checks, so I'm happy how this is.. This is admittedly selfish, but KA has a ton of math expressions that would break because of this change. Also, our previous \\color function was compatible with MathJax, which was the reason we implemented it the way we did.. @gagern That looks useful to more people. We should add that to the auto-render docs.. Nope, I was just waiting for you to merge it! (same goes for #623 and #615) I think in general I'll mention if I think somebody else should be looking. :). Vague nit: the block that it's placed in is more to do horizontal centering, not to add vertical margins, right?. You need to add a doctype to your HTML file to make KaTeX render correctly. (there is a warning in the console telling you this!) See e.g. #332. Does your HTML have a doctype (e.g. <!DOCTYPE html> at the top)? Is there a warning in your console telling you that you need one? This seems very similar to other issues like this (including the last issue, #659), so I'm going to close this. Please re-open if that's not the problem!. What do you expect to happen in these cases? Putting \\text{>} into LaTeX gives me an upside down question mark.\n. Oh, I guess I didn't actually check \\texttt{>}, you're right, that does work correctly in LaTeX! Thanks for reporting this! :). Looks like @edemaine is dealing with the actual bug in jest, but I just wanted to chime in and say that a significant number of reports about KaTeX's rendering failed is caused by people not using a suitable doctype. So I'd be hesitant to remove it!. I am not a lawyer either, but here's what I've found via a bit of googling:\n\n\nI am including the relevant part of the gh-pages branch of the official KaTeX repo [3] it as a subdirectory [4] of the scribble-math package (in order for it to get downloaded by the package manager), keeping the LICENSE.txt file intact inside that katex subdirectory.\nDoes distributing KaTeX in a subdirectory, with its own license, have an impact on the license of the rest of the scribble-math code or repository?\n\n\nBased on this answer and this answer and this wikipedia page on License Compatibility, the MIT license is compatible with the GPL license. So by including the KaTeX source inside of scribble, the code of KaTeX that is distributed with it will become subject to the restrictions of the LGPL (like copyleft), but the package overall will remain LGPL licensed (actually, the answers are about GPL licenses, so maybe this is different, but GPL vs. LGPL seem similar enough on this front).\n\n\nThe scribble-math code instructs scribble to copy the katex directory into the output directory, along with the produced HTML file.\nIs this copy a sort of linking which could taint the license of the scribble-math code itself?\nI am not aware of any linking / tainting issues concerning the MIT license, these legal terms are vague and subject to interpretation, so I feel it's better to ask at the source.\n\n\nAgain, since the MIT license is compatible with the (L)GPL license, it sounds like this is fine and scribble will continue to be LGPL licensed.\n\n\nIs there any impact on the license of the source scribble documents which make use of the scribble-math library?\n\n\nAs long as the KaTeX license is distributed with the KaTeX code, I don't think so. If it isn't, you'd have to include the KaTeX license in there, I think.\n\n\nThe resulting HTML files contain a tiny piece of code which writes a script tag and a link rel=stylesheet tag which load the katex.min.js and katex.min.css file.\nIs there any impact on the license of the generated HTML files themselves?\nIs there any impact on the source scribble documents used to generate these files?\n\n\nThat code is not part of KaTeX, so it should be covered by whatever license scribble or scribble-math is under.\n\n\nI am considering the possibility to perform the rendering as a pre-processing step, via Node.Js. Does the HTML generated by KaTeX that way have any licensing impact on the source or HTML documents?\n\n\nAccording to this answer, the output that KaTeX generates isn't licensed under the KaTeX license, so it shouldn't have an impact.\n\n\nSome fonts are included in the KaTeX folder. Are there any issues related to distributing those, as long as they are left in their respective subfolders, without altering the LICENSE files?\n\n\nAccording to #339 (answered by me!) our fonts are licensed under the SIL, and this license is embedded in the fonts so no separate license to distribute. Reading this question it's not really clear whether that license is compatible with the (L)GPL, but since you're going to be distributing the fonts alongside the code, you should be fine.\nHopefully that vaguely answers your questions! Sounds like you should be in the clear as long as you distribute the KaTeX license alongside the code, but again I am definitely not a lawyer so some of this might be wrong.\n\nI am including the relevant part of the gh-pages branch of the official KaTeX repo [3] \n\nSide note, you probably just want the code that comes inside of one of our releases from the releases page, not by copying from the gh-pages branch. :)\n(I'm going to close this issue because it's not related to an actual bug in the project. Feel free to continue the discussion here though!). > That seems to depend on whether substantial parts of the KaTeX source code are included in the generated output (e.g. copied over from constant strings etc.), the answer you linked to mentions for example YACC which embeds chunks of source code in its output. I would think in the case of KaTeX that such code to be small enough fragments that the issue will not arise, but I would prefer confirmation, rather than just assuming (the legal notion of \"small enough that it does not taint the output\" is not particularly precise, AFAIK).\nAh, that's a good point, I forgot to point that out explicitly. KaTeX does not embed any of its code inside the output, so you should be good there!\n\nI think I'll take care to clearly state that in the scribble-math repository, the LGPL (currently, hopefully CC0 sometime in the future) applies only to the scribble-math code, not to the KaTeX folder (just as KaTeX's license affects KaTeX itself, not the fonts distributed alongside). I will also mention in the scribble-math user documentation that the katex folder in the generated HTML output, and the fonts within, are under their respective licenses.\n\nI'm not even sure you need to do that; since the licenses are compatible, it sounds like you can just say \"all of this code is LGPL licensed; some of it was originally MIT licensed and here's the license for that\" but maybe I'm reading things wrong.. KaTeX only supports rendering math expressions for now (except for text expressions embedded in math, like \\text{}). We do have an extension which will parse out math expressions from a DOM component in https://github.com/Khan/KaTeX/blob/master/contrib/auto-render/auto-render.js but that is purely on the client side currently.\nWhat is your use case for this? You could maybe use that extension on the client side. Or, you could take the code in there to do the parsing on the server?. Here's an example of using the auto-render extension with ReactJS. It works, but it's probably not really what you want, because React might get mad that you modified the nodes out from under it: http://jsbin.com/fowucomayu/edit?html,js,output\nAt Khan Academy, when we want to put math in our React, we use a <TeX> component that we wrote. It uses both KaTeX and MathJax, so you might want to adapt it to your needs, but it probably is a better way to put math in your React.\nExample: http://khan.github.io/react-components/#tex\nCode: https://github.com/Khan/react-components/blob/master/js/tex.jsx. Probably! I guess if we're linking to it from the KaTeX docs I'd prefer if it were linking to a component that didn't require people to include MathJax, but it's a good starting point!. Hi @redstoneleo! I think the problem is that the auto-render plugin searches through the delimiters from first to last searching for a match. So, when it sees a $$ with your list of delimiters, it matches an empty inline math instead of a display math block. What happens if you try reversing the order of the delimiters?. @csilvers I think doing that sorting makes the most sense.\nIt should be pretty easy to do, just a small change in auto-render.js. Maybe we could leave this open as an easy beginner task for someone to contribute?. The reason we don't have $ as a delimiter on by default currently is because if you have the $ delimiter, you can't type $s normally. We could make \\$ outside of a delimiter turn into a $, which is what we do at KA. Do you know what MathJax does? We'd probably want to make something like that work if we added $ as the default.. Okay. If that's what MathJax does too, we should probably just leave the default as it is. If we fix the $ problem we should update the documentation with easy instructions for using the $ delimiter too.. +1 to everything @gagern said. There's a rule in server.js for serving auto-render.js as a browserified bundle, which is why the require() works. So I don't think we need these changes. That said, it would probably be helpful to add to the documentation about how you're supposed to view the examples for future devs.. Hmm, interesting. It looks like maybe it failed to install some dependencies? If you run npm install and try again, does that help? What version of npm do you have?\nI tried a fresh clone, and running make worked fine for me. I'm using node v7.10.0 and npm 4.2.0. Interesting. If I use node v8.1.2 and npm 5.0.3, I also don't see this error. I also have a node_modules/babel-runtime/core-js/json/stringify.js file after running npm install. Do you have that file?. Nooooooo. vertical alignment bugs strike again. +1 to what @edemaine said, having a feature with known limitations is probably better than no feature.. We have an extension which can handle rendering math inside of delimiters, but it currently only works on the client side. On the server side, you'll need to manually split up your string and katex.renderToString() the individual parts.. This is so cool! I've never gotten the clipboard API to work, so I'm glad you did! Do you know if this is compatible with all (or most) browsers?. Yay! Thank you for the cross-browser testing! I have a Safari that I have access to and can test if nobody else does.\n+1 to the pre-commmit hooks. I'm always a little sad because I think that when you clone a repository, you can't make it also add some commit hooks by default, so you have to manually set them up. :(. Oh, I had another comment separate from this. MathJax parses \\text{x % y} incorrectly, producing the text x % y instead of erroring out because we don't close \\text. Not sure what to do about that, but it's a discrepency to keep note of.. You probably want something like (C{H}_{3})_{{}_3}:\n. Generally I don't @ things unless they're printing stuff out...\n. I tried this out, I think this needs to be the \"ams\" in order to work.\n. Why did this move? Please move it back (it was in the order of the greek alphabet)\n. You're missing some commas, and I don't think these are the correct unicode characters. Did you test this?\n. I think I'd rather this argument be called \"breakOnInfix\", and make the check simply break on infix nodes. Otherwise, if we want to break on something else in the future, we'd either have to make this a list or something.\n. In keeping with the naming scheme, could you call this handleInfixNodes?\n. nit: extra line\n. You should add a test to make sure something like {1 \\\\over 2} \\\\over 3 works.\n. Grammar?\n. This should probably go on a new line right before return self. These 3 lines together are weird javascript magic that make the ParseError class behave like an Error, so they shouldn't be broken up.\n. What are these functions? They don't seem to be standard, and don't work in MathJax.\n. This doesn't need to be a separate variable, you can just pass in true to the function.\n. nit: extra space here\n. I'd rather if you did a check up here to see if the group is already an ordgroup and if it is, don't wrap it. Otherwise, we're creating ordgroups just to get rid of them (bad because we have to perform an allocation for each one). Also, getting rid of all nested ordgroups is sometimes a problem, since {a} does not act the same as a in many situations.\n. I don't think the mathalpha group matters, it's probably the same as an ord. The problem is that the notation of \\R isn't standard, people often use \\mathbb{R} (as suggested in the document you linked to).\n. That's fine. We'd definitely like to expose an API for adding macros so people can add shorthands like this themselves in the future, but we don't want to support stuff that isn't necessary for now.\n. Could you pull these vars out of the if statements?\n. This should actually say \"Fast math typesetting for the web.\", but I forgot to change it in package.json.\n. Hmm, these got moved too far out. My rule is \"move variable declarations to the outermost scope that they are used\" (even though javascript semantics don't care). So these should be put inside the if statement on line 170 since they aren't used outside.\n. Nit: grammar? Also, I'm not sure we need this comment, it's sorta obvious that infix things don't have args.\n. Please add lint to the .PHONY list also.\n. Did you mean $^?\n. Can you change this file back to 4-spaces indent? Thanks\n. Move this declaration down to closer where it's actually used used. (All of the variables here are things that differ per-delim).\n. Okay, then that's fine. \n. No, that's not how .PHONY works. .PHONY is just a special rule that says \"things listed here won't actually create the file they are named after\" (this generally means that they're commands you want to run, not things that build files). So the lint rule won't create a lint file, so it should be in .PHONY. But it's not transitive, so something in .PHONY doesn't only have .PHONY dependencies. Make sense? (you can read this SO question for some more info.\n. cfracParse\n. This definitely shouldn't be here. When we make the algorithms in here, it's not because it looks good, it's because that's what the TeXbook says to do. For now, we haven't deviated from that, and if we do it would probably be by tweaking some fontMetrics constants. Any time when you tweak things like this, it means that something else is wrong somewhere, and trying to fix it by slightly messing with things will probably just cause more problems in the future.\nDo things look actively bad when you don't put this in? Or was this just to make it look like LaTeX does? I'm perfectly fine with having it look different, just as long as it doesn't look bad.\n. Yep. We don't support \\strut yet, which is the main problem here. I'll look into that.\n. I think that this isn't something that should be tested with code, but should probably use a Huxley test instead. Generally, it's not helpful to verify that the code we write produces the structure we tell it to produce, because the test will just ensure that we produce the code tells it to, and not that the produced output is useful. The Huxley tests ensure that the code we write produces something that looks correct.\nDid you ever get huxley tests to work?\n. This is really just turning in to special casing for all of the different interactions, which is annoying to deal with (and there are a whole lot that aren't captured here). As @spicyj points out, MathJax doesn't actually do spacing with \\Huge correctly, and we're not entirely sure how we want to do spacing overall, so maybe we should put this on hold until we can discuss what we want exactly to happen.\n. @jmeas Ping on this? I'll merge this once this gets changed (and a squash). :)\n. I think this is pretty sane. Writing code that is 80 characters wide and 7+ times indented becomes too annoying anyways. I'd rather someone get hit by this and refactor. :)\n. This still says functest\n. This seems pretty ugly. Can you maybe try using this node module: https://github.com/aheckmann/gm I don't like depending on parsing command output.\n. Why do you run this here? (If build/fonts is needed for the server to work, there's something else wrong; I think I saw this in server.js where it was erroneously serving out of build)\n. You don't need to cd ../.../ back out in a makefile, it runs each line separately.\n. Could you list the full imagemagick version here? I hit a problem before where I got incompatible versions of things, so I figured I might as well just list explicit versions of packages, and then if they stop being available, we'll at least notice and can fix things then. I think the current version is 8:6.7.7.10-6ubuntu3.\n. To avoid all of the cds everywhere, you should probably just do something like process.chdir(__dirname);, which will (hopefully?) set the current directory to the location of the script (see http://nodejs.org/docs/latest/api/globals.html#globals_dirname and http://nodejs.org/api/process.html#process_process_cwd)\n. Can you try doing something like\nwhile echo \"\" > /dev/tcp/127.0.0.1/4444; do sleep 1; done\nThat will actually wait for the port to be open, instead of just hoping it will be open after 15 seconds.\n. What is this sleep for?\n. This seems like it should be done in the before_script part.\n. Is this necessary? WIthout it, what breaks?\n. I think that toEqual just does an === compare. You could try expect(_.isEqual(tree, ...)).toBe(true)?\n. No, never mind, toEqual does do deep compare: jasmine's deep eq function. The only thing I can think of is that \"sub\": undefined should be \"sub\": null?\n. Could you move this list out into a constant somewhere?\n. If you make this breakOnToken != null, then you can just make the last argument optional instead of having to pass null in everywhere.\n. middleMetrics isn't a number, it's an object, so it probably shouldn't start out initialized to 0.  Also, when we initialize and declare variables at the same time, we like to put them on separate var lines, so\nvar middleMetrics;\nvar middleHeightTotal = 0;\n...\n. this should be var i\n. Can you add a test that makes sure the \\cr command also works?\n. Is this font guaranteed to be installed in the selenium docker?\n. You don't need to escape all of these characters. For instance, you can put literal spaces instead of %20, literal parentheses, etc. I think that'll make this test make a bit more sense. You can even put literal = signs.\n. What does this do?\n. If you do something like processTestCase.bind(null, data) and add an argument to processTestCase, you won't have to make the global template variable.\n. I'd rather say broken into separate pull requests (or multiple logically cohesive commits), since we'd rather have multiple pull requests.\n. Could we use a png parsing library like png.js to do this? Then this can be simplified to:\nvar buf = new Buffer(img, \"base64\");\nvar png = new PNG(buf);\nreturn {\n    width: png.width,\n    height: png.height\n};\n. What does this flag do?\n. It already says this 7 lines up!\n. :) thanks for the trailing commas\n. I think it maybe makes more sense to add /usr/local/Cellar/python/2.7.9/bin/ to your path than to edit the shebang in the file?\n. Won't this add the \"mathit\" class twice sometimes?\n. Why is this exported?\n. I don't understand github's diffing algorithm.\n. What are these magic symbols? Can you pull these out into a list somewhere and document why they're different?\n. Also can you indent the tests in the if statement an extra indent so it doesn't line up with the body?\nif (test &&\n        test) {\n    body;\n}\n. Can you put this above all of the functions that use it?\n. What about \"mathit\"?\n. This change is added in part 3. Maybe pull it back into this part?\n. Oh boy, adding options to MathML. I guess this day was going to come eventually. :P\n. return buildGroup(group.value.body, options.withFont(font));\n?\n. Since all of this is exactly the same as for buildHTML, and we don't modify options, do you want to pull this build into buildTree and pass down the options instead?\n. nit: sort these\n. Could we maybe rename this m parameter to tex or something? Now that it's easier to see what's going on, we might as well name things reasonably. :)\n. Could you add a comment here describing what this file does?\n. I think I'd rather leave this in this file, since it's not related to the other stuff, and gets left in the query parameter?\n. This looks much better!\nHow did you generate this? Was it done automatically?\nNow that this is in yaml, could you add some comments at the top describing the options that we can have in here?\n. Can you change this to === while you're here? :)\n. I'm a little sad that we're adding new properties here, but this is fine.\n. Ah, okay. :+1: \n. Do these font aliases work in LaTeX?\n. Looks like you forgot to add the corresponding semicolon at the end of the file, which is why the linter is failing? That should go on line 16, but github isn't letting me add a comment there.\n. Here's the 0.2em I'm not sure about.\n. :+1:\n. Ah ha! I figured it out! (through a lot of guesswork and blind searching through the TeX source).\nThe expansion of \\array (which is expanded to when you write \\begin{array} eventually calls \\@mkpream to generate the preamble (which is the analog of the column definitions when using halign in plain TeX). In here, it calls \\@testpach, which looks at the next character, and if said next character is |, it sets \\@chclass to 1. Then we look at \\@chclass, and if it is 1 we call \\@classi, which looks at \\@lastchclass (presumably the previous \\@chclass), and if that is also 1, it adds \\hskip \\doublerulesep before adding the vrule. Observing \\doublerulesep, we find that it is 2pt, which ends up being .2em with our current 1em=10pt measurement.\nI'll go add this to our font metrics file...\n. Good idea!\n. Yay grammar\n. :O so many tests :+1:\n. :( Having this duplicated all over here makes me sad. Is there a good place this could be consolidated?\n(I guess since this is in the tests just having an extra function living in the testing script that does this would be good)\n. Why not just always return width, with the caveat that without the extended metrics it will be undefined?\n. I usually do something like find test/ | grep -- '-spec.js' | xargs ./node_modules/.bin/jasmine-node for this, so if we ever split things up enough that they need directories then this Just Works. This is fine for now, though!\n. I think I would call this toFailWithError, since the other tests use a toParse matcher that checks that the parse succeeded.\n. Switching to mocha sounds fine to me! It might take some work to convert our matchers, but sounds like it'll be worth it.\n. Chai has an expect assertion style, which looks more usable than unexpected and matches other assertion libraries better. I think switching to mocha+chai sounds good, I'm not so sure about using expect vs assert, but I'd be willing to try it!\n. Oops, missed this. I guess I should make this text-align: left;?\n. Since we're not pushing this commit to anywhere except the remote tag, git push origin won't work.\n. Can you add a comment about what these match?\n. We generally prefer doing something like makeSpan([\"msupsub\"], [supsub]) instead of mutating elements, does that still work?\n. Could you add a plain \\omega^{8}_{888} not in a fraction here too, since those environments are apparently different?\n. nope, looks perfect\n. You don't actually need to make this delimiter here, right? Shouldn't it always be overridden by the \\left\\right handler?. Could you test that \\left( { \\middle| } \\right) doesn't work?. Could you try putting more than one \\middle in here? Also, maybe test \\middle with nested \\left\\rights?. i should start at 0, no?. Well, the \\middle won't be rewritten with the correct delimiter if this happens, because it won't be a direct child of the \\left\\right thing, so it probably shouldn't work? (That's actually just a guess, you should test it). In order to conditionally add some positive/negative space here, you could do something like this (I tested this locally, it seems to work fine):\n```js\nconst space = new ParseNode(\"kern\", {\n    dimension: {\n        number: 1,\n        unit: \"em\",\n    },\n}, context.parser.mode);\n\nconst bod = new ParseNode(\"op\", {\n    limits: false,\n    symbol: true,\n    body: thedots,\n}, context.parser.mode);\n\nreturn {\n    type: \"op\",\n    limits: false,\n    symbol: false,\n    value: [space, bod],\n};\n\n```\nBasically, we're creating a \"kern\" node and sticking that into our op, which accepts arrays of ParseNodes. Not sure if this is the \"right\" way to do this, but it certainly beats making a new group type!. This is looking backwards through the text, correct? Doesn't that mean that this will find a '#', then look backwards one more character to find the number? I'd assume that this would find things that look like 1# not #1. Maybe I'm missing something though, since the tests pass.... This expansion looks like it works (or I can't find any glaring flaws)! However, you might want to note for future macro-writers that this is somewhat simplified from the true TeX macro expansion? For instance, it won't expand macros inside of the arguments (which might matter if, for instance, the macro expands to something with a } in it). It also won't handle any argument lists except for plain \\def\\x#1#2...#n{}, whereas TeX can handle \\def\\x#1 some random text here #2{}.\nNot sure that we'd ever actually want to implement those things, but it seems useful to note that there's some functionality intentionally missing.. This would incorrectly report one argument for {#1}{#3}, correct? Not sure if we really care about that use case.. Aaahhh! I see now. I didn't notice that expansion was reversed earlier. This is fine, it was just a bit confusing.. Hrm. It's annoying that bower doesn't let us specify several different things with the same filetype. I think people would probably prefer the minified version to be the default? Not sure though.. Yeah, I'm not really sure what main means I guess. It does say that you should use unminified things though, so at least this change is correct.. \"at the end of <body>\" maybe?. It might make sense to mention that MathJax supports the same approach, but I agree that it should be called something more related to what it actually does.. Looks like MathJax does two checks. The first check removes / *;.*/ (i.e. whitespace and then a semicolon and everything after the semicolon) and then checks for \"math/tex\".\nThen, the second check looks for an instance of /(;|\\s|\\n)mode\\s*=\\s*display(;|\\s|\\n|$)/ to decide if it should be in display mode. Those could probably be combined into a single check, I think it's just done in two parts because of how MathJax is structured.. I'm using jest in my js tex parser, and I've played around with the node debugging a bit. Lemme know if I can help :). Is there a way to factor out this regex so we don't have to duplicate it here and above? Or maybe we could just test for a single ^% so it doesn't have to be duplicated?. This seems a little strange to me. Maybe we could support comments that go to the end of the input string as well as ones that end with a newline? I feel like this will catch people up otherwise.. ",
    "joelburget": "@spicyj build is listed in .gitignore\n@xymostech do we want to show the output from npm install? I guess so?\n. (facepalm) gah - I accidentally pushed to this repo. Turns out origin pointed to /Khan/KaTeX instead of /joelburget/KaTeX. Hope you like my changes!\n. ",
    "wchargin": "Copying the table I posted there for reference (TeXbook, Chapter 18):\n\n. @cbreeden: Right; this conversion process is the topic of this issue :)\n. Yay! Thank you!\n. For reference, the Other Library has the behavior of LaTeX:\n\n. Yep! That was my workaround. Thanks!\n. @ronkok Good catch about U+03F0 \\varkappa, but the other three (U+03B5, U+03C2,\nU+03C6) are handled by [\\u03B1-\\u03C9], right? (The \u03b5, \u03c2, and \u03c6 characters are the \"normal\" characters output by pressing e, w (for \"word-final sigma\"), or f (respectively) on a Greek keyboard.) Do they need any additional special casing?\n. Haha, okay :) The regex seems good to me except for the bizarre case of U+03A2, which is not a valid Unicode character for some reason. This seemed weird to me, but I confirmed it in my official Unicode Consortium book and it is correct. For reference, here's the full Greek table:\n\n(The next page, which has all the codepoints' official names and decompositions, lists it as \"reserved.\")\nOther than that, the characters that match the regex are \u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039a\u039b\u039c\u039d\u039e\u039f\u03a0\u03a1\u03a3\u03a4\u03a5\u03a6\u03a7\u03a8\u03b1\u03b2\u03b3\u03b4\u03b5\u03b6\u03b7\u03b8\u03b9\u03ba\u03bb\u03bc\u03bd\u03be\u03bf\u03c0\u03c1\u03c2\u03c3\u03c4\u03c5\u03c6\u03c7\u03c8, which seems fine to me.\n``` python\nPython 3\n''.join(chr(x) for x in list(range(0x0391, 0x03A9)) + list(range(0x03B1, 0x03C9)))\n```\n(I'm definitely not qualified to review the actual KaTeX aspect of it though, sorry :confused: )\n. Yeah, that's a tricky one. It always bothered me that TeX has no \\Alpha command (whatever happened to semantics matter?). I mean, the two obvious choices that I see are disallow entering \u0391 (U+0391 GREEK CAPITAL LETTER ALPHA) or alias it to A (U+0041 LATIN CAPITAL LETTER A). If we're ever planning to add support for user-defined fonts, for which the two glyphs could be distinct, that might make a difference.\nIn the spirit of forward-compatibility, your decision to disallow them for now sounds good to me; you can always add them later, but they'd be harder to remove. @xymostech ?\n. @Pomax A few unsolicited comments about your original TeX!\nFirst, it's either \\hskip2.5em or \\hspace{2.5em}; the former is a TeX primitive while the latter is a LaTeX command. Second, you'll certainly want to enclose the labels on the left in \\mathrms so that the spacing is correct\u2014e.g., on the li pair in \"linear.\"\nThird, and most importantly, doing horizontal spacing manually like this is probably a Bad Idea\u2122. When I change the font to mathpazo, everything will break. When you're in \\scriptsize, everything will break. The proper way to do this is to think about the layout you want: a left-aligned column with the names, then a column with an equals sign, then a centered column with the values. This calls for an array. So you might try this:\ntex\n\\begin{equation*}\n  \\begin{array}{lcc}\n    \\mathrm{linear}     &=& 1 + 1  \\\\\n    \\mathrm{square}     &=& 1 + 2 + 1 \\\\\n    \\mathrm{cubic}      &=& 1 + 3 + 3 + 1 \\\\\n    \\mathrm{hypercubic} &=& 1 + 4 + 6 + 4 + 1\n  \\end{array}\n\\end{equation*}\nThis will almost work, but the spacing around the equals signs will be way too big, because it will be getting the normal column gutter spacing instead of the proper spacing for a relation:\n\nInstead, then, we should tell TeX not to add spacing around the center column by changing its column specification to @{}c@{} (which indicates \"at left: nothing; at right: nothing\"), and then add empty atoms to the left and right of the equals sign so that it's treated as a relation:\ntex\n\\begin{equation*}\n  \\begin{array}{l@{}c@{}c}\n    \\mathrm{linear}     &{}={}& 1 + 1  \\\\\n    \\mathrm{square}     &{}={}& 1 + 2 + 1 \\\\\n    \\mathrm{cubic}      &{}={}& 1 + 3 + 3 + 1 \\\\\n    \\mathrm{hypercubic} &{}={}& 1 + 4 + 6 + 4 + 1\n  \\end{array}\n\\end{equation*}\nThis works quite well:\n\nFinally, we can make the body code a bit nicer by pulling the \\mathrms and empty atoms into the column specifications:\ntex\n\\begin{equation*}\n  \\begin{array}{>{\\mathrm\\bgroup}l<{\\egroup}@{}>{{}}c<{{}}@{}c}\n    linear     &=& 1 + 1  \\\\\n    square     &=& 1 + 2 + 1 \\\\\n    cubic      &=& 1 + 3 + 3 + 1 \\\\\n    hypercubic &=& 1 + 4 + 6 + 4 + 1\n  \\end{array}\n\\end{equation*}\nIf this is new to you, you should parse the column specifications as\n- >{\\mathrm\\bgroup}l<{\\egroup}: a left-aligned column, to whose content we should prepend \\mathrm{ and to whose content we should append };\n- @{}: empty gutter (and no space) between these two columns\n- >{{}}c<{{}}: a centered column, to whose content we should prepend and append an empty atom {};\n- @{}: empty gutter; and\n- a centered column.\nThis results in the same output.\nKaTeX supports only the first variant of these (:cry:) because advanced column specs don't seem to be supported. But if you're using this in a normal (La)TeX document then the last one is the way to go.\n. My installation of TeX Live 2013 (thanks, Ubuntu) does not include Computer Modern versions of these characters. You can check on your installation by running\n``` tex\n\\documentclass{article}\n\\usepackage{amsfonts}\n\\usepackage{pgffor}\n\\begin{document}\n\\def\\printall#1{\\foreach \\x in {#1}{\\x $\\mathbb{\\x}$\\}}\n\\section{Lowercase letters}\n\\printall{a,...,z}\n\\section{Digits}\n\\printall{0,...,9}\n\\end{document}\n```\nwhich for me renders like this (image is rather tall, so not displaying inline).\nIt is worth noting, though, that these characters exist in Unicode, starting at U+1D552 \ud835\udd52 MATHEMATICAL DOUBLE-STRUCK SMALL A and U+1D7D8 \ud835\udfd8 MATHEMATICAL DOUBLE-STRUCK DIGIT ZERO.\n. (None of lmodern, mathpazo, nor mathptmx has the glyphs, either.)\n. See also #4.\n. \\u03D6 is \\varpi \u03d6, \\u03D5 is \\phi \u03d5, \\u03F5 is \\epsilon \u03f5. KaTeX outputs all these (try \\varpi \\phi \\epsilon and look at the Unicode code points of the output); do you want to include them?\n. And \\u03D1 is \\vartheta \u03d1, \\u03F1 is \\varrho \u03f1, also supported.\n. ",
    "cbreeden": "I felt like it's worth clarifying the explanation of * since it certainly is possible to write ++, +. etc...\n\nSource: TeXbyTopic, Section 23.6.1\n. @WChargin: Right, sorry :confused: I was just slightly confused for the deduction of converting bin to ords if they are last in the list (#355), until I was able to find this between rules 18 and 19.  Knuth tricked me! :blush:\n. I did take a look at this issue a few days ago, however, and my conclusion was that given the current model we would probably just need to implement a next for the next token here.  But I'm sure this was already known.\n. I did that \ud83d\ude0a\n. Do you mind me asking what happened here?  I looked into how difficult it would be to allow for functions to return multiple values, and it wasn't that difficult.  It would require rewriting the parseExpression function a bit, but nothing severe.\nAs for an input stack, I took a look at the source for lautex and that's essentially how they handle macro expansion.  However, we would have to remove the ability for the Lexer to simply take an position value for where to grab the next token and would be reduced to simple API, getNextToken.\nItems that make use of Lexer positions:\ninfixs -- I feel there is an easy fix to this, and it may have been what gagern had in his working example, we can put something like this in the parseExpression body after adding an inInfix flag to parser, or passing it as a variable (similar to breakOnInfix):\njavascript\n    if (infixOperators.contains(token.text) !== -1) {\n        if (breakOnInfix) { throw new Error(); }\n        var numer = body;\n        this.consume();\n        var denom = this.parseExpression(true); // breakOnInfix = true\n        // inFix operators eat an entire mathlist\n        body = [ handleInfix(token.text, numer, denom) ];\n    }\nAs for the issue @gagern mention concerning scriptstyle and infixes, I think this is a non trivial issue but also an issue that is current, so I don't think it would be a regression.\nThe parseArguments function also deals with lexer positions.  It passes the positions of all the arguments to the functions, but it appears that no one uses it so it seems that it can be safely removed.\n. @gagern Hi, thanks! I have forgotten that the infix handling bugged me.  Now that you reminded me, and I have thought about it again, I think I might know of a way to get rid of the requirement of scanning through the list after each parse looking for infixes.  I'm going to see if I can get it to work.\nBut that's not very relevant to this topic I suppose.  I took a look at your code a few weeks ago and it looked promising.  Do you mind if I hack around with it to see how it feels?\n. @kevinbarabash Thanks! I filled out the CLA.  Can we put a hold on this?  I have been spending some time trying to write up a proposal AST which would take out a lot of the TeX logic from the BuildHTML with a few goals:\n1) Setup a foundation for pluggable renderers\n  2) Provide a starting point for implementing macros (at least have a working sketch of where they would fit)\n  3) Auditing compliance of relevant TeX rules found in TeXbook.\nI started working on implementing <math atom> commands like: \\mathop, \\mathrel, etc.. In hopes to be able to implement commands like \\stackrel, and I was able to for the most part except that \\mathop{=}\\limits^{?} wouldn't work primarily due to TeX logic living in BuildHTML.js.  Certainly I could hack it out, but there were other issues involved such as implementing \\mathrel commands would essentially require a new relgroup, just like there is a mathordgroup and so on to allow recursive expansion.  This brought me to the conclusion that it would most likely be better to wait for a new parser/AST implementation before continuing.\nThe only reason I ask for the hold is that I believe I am almost complete with the proposal.  I just need to finish two more tasks:\n- [ ] Review placement for user macro expansions and \"hard-coded\" expansions (ie: matrix)\n- [ ] Check to make sure all of the current \"dirty-tricks\" would translate to the new proposal.\n. Sorry.  I'll make the screenshots when I get back next week.\n. > It turns out that lastRow is a little more complicated that it used to be\nIndeed.  There seems to be more nesting than I remember.  I needed to add a few more .values and that seemed to do the trick.  I had an issue getting docker working (this is a local issue, not an issue with KaTeX), would it be possible to get someone to do a run for me?. Ok not sure what those errors are about.  I'll try getting docker working on my machine again and take a look.. I was able to get the docker to work again! \ud83e\udd47 \nThe AccentText failure makes sense.  The HTML should be different, but it should look roughly the same here since we aren't using delimiters.  But it would've made a difference if it were embedded in an HTML document for instance.\nWhen I ran docker locally, I had a sporadic failure for\nM       test/screenshotter/images/Unicode-chrome.png\nThe Unicode test was interesting:\nUnicode: \\begin{matrix}\\text{\u00c0\u00e0\u00c7\u00e7\u00c9\u00e9\u00cf\u00ef\u00d6\u00f6\u00db\u00fb} \\\\ \\text{\u0411\u0413\u0414\u0416\u0417\u0419\u041b\u0424\u0426\u0428\u042b\u042e\u042f} \\\\ \\text{\uc5ec\ubcf4\uc138\uc694} \\\\ \\text{\u79c1\u306f\u30d0\u30ca\u30ca\u3067\u3059} \\end{matrix}\nThis PR shouldn't affect this test since it doesn't have a trailing empty line, but just to be sure I inspected the HTML output for both with and without this PR and they were identical: https://gist.github.com/cbreeden/72ca53e6089b9d39f2fcc54bffcda3a5. Chrome is a little finicky with these tests.  I wonder if the new headless API for chrome would help here.. closing as fixed in 6bb62b11b4ea. A thought crossed my mind.  Perhaps it would be worth while to style the margins using something like mbin-mord instead of mbin+mord (no need to worry about transitivity issues, we are only setting the left margin of each), or better yet just setting a thin/med/thick-skip for each required atom.  The small cost in an extra calculation in BuildHTML may be outweighed by a smaller css file.\n. @kevinbarabash I decided to look at how MathJax handled this and it appears that MathJax will inline everything.  Certainly this makes it easier to handle overriding skip and muskip values easier.  Though it might be better to place the default values in css and then inline values that will be overridden.\nI also took a look at how difficult it would be to implement this.  It isn't difficult, it is just somewhat tedious and stopped halfway through.  I think I made the wrong approach and this code is probably best placed in the BuildGroup function.\n. Closing as a duplicate of #30\n. That was a goal of mine as well, at least when I first started.  I quickly started running into problems when I started to realize the diverse structure of ParseNode which was the motivation for me to write up a survey of the current structure and somehow provide some kind of way to conceptualize how to think about them.\nAnyways, I thought that this could be a useful document to start the discussion of simplifying the AST if that route is desired.\n. So there was a strange issue when I was running screenshotter.sh from docker.  There was one file modification:\n\nWhere it should've looked more like firefox:\n\nI got the same results when I tried on master.  When I opened up chrome and input the test for the corresponding image it looked fine.  I'm not sure what the issue is on my end, but I didn't add this modification to the commit.\n. Dagnit, I should've taken that rebase a chance to fix the typo in my comment. :)\n. I put a little more thought into the implementation, and was able to come up with a failing test: 1 \\over {2 \\over 3}.  This needs to be fixed first. So I will close this until then.\n. > In order to minimize changes I'd rather update groupTypes.rel, groupTypes.close and groupTypes.punct to find the previous atom and update it as necessary.\nYeah, I'll admit that I just didn't like the idea of modifying the HTML nodes after they have been constructed.  But after seeing @kohler's commit, which modifies all the required atomtypes after building the expression, I think it's a clean solution in my opinion.  We might be better off taking that approach.. > Doing the error reporting changes without the restructuring to the parser means doing error reporting for certain kinds of objects more than once. Conversely, doing the parser rewrite without a change to error reporting would mean work to carry the positions along for all places that require them.\nI was playing around yesterday with a parser refactor to simplify the call hierarchy.  How would you ideally handle error reporting if such a refactor did occur?  I will admit, I wasn't putting much thought into error reporting while playing around with a refactoring so any suggestion would be helpful.\n. Essentially the API for the parsing I had in mind, boils down to doing doing stuff like this:\n- Flatten call stacks by defining parseSymbol, parseFunction, parseGroup, and parseImplicitGroup to do what they sound like they do, only returning something if they match.\n- Parsing for an atom essentially becomes:\nvar atom = parseSymbol() || parseGroup() || parseImplicitGroup() || parseFunction();\n- Parsing for function arguments would become:\nvar argument = parseSymbol() || parseGroup() || tryFunctionExpand(baseGreediness);\nwhere tryFunctionExpand simply just checks to see if its a function and greedier and returns it if so,  otherwise error handling.\nHopefully I can finish this prototype soon.  Would this API help with error reporting for you do you think?\n. I think so, sorry! Github doesn't play well while searching for \"--\" :)\n. Oh good point I will do that.  I spent quite a bit of time fiddling around trying to figure out why atoms are wrapped twice (parseFunctions was culprit if I remember) and went through a few iterations to figure out what to put here.\n. Sure, good idea\n. Fixed, maybe I should've inlined this call in the final final makeSpan call.  Just let me know.\n. I might have misinterpreted what you said but I added one in.\n. yeah, i think I should probably go ahead and fix the typos in this document.  I have found quite a few.  But do you think this kind of document could potentially be useful?\n. Essentially because it's not in functions.js.  Everything in functions.js will have a second level of indirection.  So perhaps wasn't a good example.\n. I am under the impression that if parseSpecialGroup simply handled the unwrapping of brackets, switching modes and returned a string, and kept the matching logic in parseSizeGroup and parseColorGroup we could simplify the logic here.\n. Inside the macro for matrices, TeX leaves a \\crcr for the last row which acts like a \\cr, unless it follows a \\cr in which case it does nothing.  This is why the last \\cr or \\\\ is optional with matrices.  But this also means it trims at most the last row.  See this reference\n. That was just an idea I was toying with.  I believe the TeX places the scripts inside their respective nodes -- something like if you could imagine each ParseNode had a superscripts:, and subscripts: field.  The engine will do preliminary processing on the nodes (like changing atom types, etc.), before finally looking for a scripts field.  I guess it kind of makes some properties (such as atomtype) more transparent while processing (ie, you don't need to recursively look into the base to determine the atom type).  \nBut I abandoned the idea.  It didn't seem worth it.  Something like this would probably only be useful if other parsenode were refactored to be inline: ie stylechanges.  Where for instance, instead of having a StyleChange node wrap the contents it imposed on like:\nStyleChange { inner: [ ParseNodes] }\nyou have a single inline node StyleChange which just changes the state of the HTMLRendered, like this:\nStyleChange, ...ParseNodes\n(if that makes sense) Anyway, it didn't seem necessary to go down this path, as these recursive definitions seemed quite necessary/natural give the HTML/CSS target.. Sorry, I don't remember what my concern was here.  We could probably remove most of these TODO.  They were just my notes while thinking of alternatives, I believe.. I don't know.  To be honest, I wasn't happy with the approach.  Basically, if I remember correctly, I just claimed that some ParseNode values may be a list of parse nodes, and if they are then the current parsenode is simply an atom-type wrapper.  But I also haven't thought of any better way.. ",
    "kevinbarabash": "@cbreeden It seems like pass the next group to all the groupTypes handlers would get you what you need.\n. This is fixed in v0.8.0.. @xymostech: are you actively working on this?  If not, I'd like to tackle this.  I compared the output of \\binom{3}{4} and \\left(\\frac{3}{4}\\right) in MathJax and they look the same (minus the separator).  I was thinking that I could leverage buildTree::leftright and buildTree::frac...maybe give buildTree::frac an optional param to not draw the separator.  Thoughts?\n. @spicyj: Cool.  I'm excited to see how you implemented it... and also how easy it will be to implement \\choose once pull request https://github.com/Khan/KaTeX/pull/101 gets merged in.\n. In addition to supporting single glyphs for Greek letters we could also support as many characters from the latin-1 unicode block as possible.  Some characters can't be decomposed and they don't exist in the fonts we're using, e.g. \u00df, \u00e6, \u00c6, \u0153, \u0152, \u00f8, \u00d8.  \nAs suggested by @gagern in  https://github.com/Khan/KaTeX/issues/260 and by @spicyj in https://github.com/Khan/KaTeX/issues/65 we should use NFD to determine which unicode code points we can fake by composing glyphs, e.g. \u00e9 becomes \"\\acute e\".\nPython has a handy built-in module called unicodedata that has function called decomposition which breaks code points into the base character and combining glyphs (if the decomposition exists).\nhttps://docs.python.org/2/library/unicodedata.html#unicodedata.decomposition\n@xymostech were you thinking of support latin-1 unicode when you filed this?\n. Apparently \u00df, \u00e6, \u00c6, \u0153, \u0152, \u00f8, \u00d8 exist in cmr10, see  http://www.math.union.edu/~dpvc/jsmath/symbols/cmr10.html.  So we should be able to support quite a few European languages without too much work.\n. After double checking the .ttfs, no we do not have have those glyphs.  It looks like it will be a little more work than I had originally envisioned.  I think if we fork https://github.com/mathjax/MathJax-dev and update /blob/master/fonts/OTF/TeX/makeFF to have the right entries we should be able to build the correct fonts using the docker file.\n. @xymostech shame on me for not reading carefully.\n. I've started on this with https://github.com/Khan/KaTeX/pull/409 which adds support \u00df\u00e6\u0153\u00f8\u00c6\u0152\u00d8.\n. I've added support for unicode Greek letters in math mode in https://github.com/Khan/KaTeX/pull/410.  Implementing support for \\text{} will be more difficult b/c we have to find a find that doesn't have italicized glyphs for the lower case characters.\n. There's a package called textgreek which uses the default font cbgreek.  There might be some slight differences between the uppercase Greek glyphs from cmr10 being used for math, but there should be that much difference.  http://ctan.math.utah.edu/ctan/tex-archive/macros/latex/contrib/textgreek/textgreek.pdf contains renderings of all three styles of fonts.\nI'm a little confused about the fonts though, the textgreek package declares the \\textgreekfontmap  as:\n\\DeclareOption{cbgreek}{%\n\\renewcommand*{\\textgreekfontmap}{%\n  {eur/*/*}{U/eur/*/*}\n  {phv/*/*}{U/psy/*/*}}}%\n\\DeclareOption{euler}{%\n\\renewcommand*{\\textgreekfontmap}{%\n  {phv/*/*}{U/psy/*/*}\n  {*/bx/n}{U/eur/b/n}\n  {*/b/n}{U/eur/b/n}\n  {*/*/n}{U/eur/m/n}\n  {*/*/it}{OML/*/*/*}}}%\n\\DeclareOption{artemisia}{%\n\\renewcommand*{\\textgreekfontmap}{%\n  {eur/*/*}{U/eur/*/*}\n  {phv/*/*}{U/psy/*/*}\n  {*/b/n}{LGR/artemisia/b/n}\n  {*/bx/n}{LGR/artemisia/bx/n}\n  {*/*/n}{LGR/artemisia/m/n}\n  {*/b/it}{LGR/artemisia/b/it}\n  {*/bx/it}{LGR/artemisia/bx/it}\n  {*/*/it}{LGR/artemisia/m/it}\n  {*/b/sl}{LGR/artemisia/b/sl}\n  {*/bx/sl}{LGR/artemisia/bx/sl}\n  {*/*/sl}{LGR/artemisia/m/sl}\n  {*/*/sc}{LGR/artemisia/m/sc}\n  {*/*/sco}{LGR/artemisia/m/sco}}}%\n\\newcommand*{\\textgreekfontmap}{}%\nLooking at this I would assume that all cbgreek font should start with eur or psy.  In search for cbgreek fonts on CTAN I found a cbgreek folder which contains fonts starting with the letter g, see https://www.ctan.org/tex-archive/fonts/greek/cbfonts/fonts/type1/cbgreek.\n. http://www.cs.cmu.edu/afs/cs/misc/tex/common/teTeX-1.0/lib/texmf/fonts/source/public/cbgreek/cbgreek.txt contains details on the naming scheme used by the cbgreek fonts in CTAN.  We probably want grmn10.pdb which stands for greek, regular (slant), medium (weight), 10pt.\n. grmn1000.pdb\n\nKaTeX_Main\n\n. This is fixed in v0.8.0.. @xymostech If you're not actively working on this issue, I'd like take a go at it.  I was thinking of doing something similar to how styling is handled.  I'll try and implement \\mathbb at the same time.\n. Implemented in https://github.com/Khan/KaTeX/pull/290, https://github.com/Khan/KaTeX/pull/291, and https://github.com/Khan/KaTeX/pull/292.\n. I was thinking of pre-processing the input to remove the comments, but we probably don't want to do that b/c then an error reporting would have the wrong position information.. I think %[^\\n]*\\n should do the trick.  . pdflatex throws an error in that situation which means that people copy TeX code into KaTeX won't be include code with comments like that.  Things might go wrong copy/pasting a KaTeX string back into a .tex file, but users will have to modify the string anyways by add $.  If we support comments a person should be able to type a^2 + b^2 = c^2 %% Pythagoras' theorem into a text input and have that work without having to add a newline at the end of it before they pass it to katex.  My vote would be to allow comments without a newline at the end of the string.. We could change that to\nlet tex = \"$\" + itm.tex + \"\\n$\"\n\ud83d\ude1b . We could have an option to allow comments without newlines, but have the default be strict LaTeX compliance.\n. I'm okay with that too.  The best justification I could come up with is that it would all writing comments in our test app, but that isn't much of a justification.  Our test app should be modified to use a <textarea> instead so that it's easy to test comments locally.. I'm going to give this a shot.. \n. It looks like it's fixed on http://khan.github.io/KaTeX/.\n\n. In addition to pulling them out into macros.js, we should also warn on the use of features that we are planning to deprecate similar to how React does.  There should also be an easy way to re-enable those features for users once they're out of core KaTeX.  Maybe we could provide a plugin or additional package that automatically adds those colors to core KaTeX.. In a separate issue we discussed deprecation notices and decided it was more trouble than it was worth.. #140 has been merged.  There are some slight difference from LaTeX output in certain situations.  If anyone runs into those situations using LaTeX code you care about, please open an issue for the specific issue.. Support for \\partial was added by https://github.com/Khan/KaTeX/commit/b9333a36d1cb2e0896107dffd3a42dd308430f15.  The website just needs to be updated.\n. I'm in the process implement \\def.  I have it working for simple macros without parameters.  I need to do a little code cleanup and then I'll commit.  I'd like to get some feedback before going further.\n\n\n. I had committed some code for this, but I had some issue with my fork so I ended up doing a hard reset.  I still have the code locally, but the approach I was taking had a severe limitation.  It wouldn't have been able to parse things like \\def\\oneover{\\frac{1}}.  There are some other smaller pull request that I want to get accepted first before I tackle this again.\n. Changing this to \\newenvironment only since https://github.com/Khan/KaTeX/issues/250 covers \\newcommand.. I'm working on a pull-request for this.  I found that this issue seems to affect Mac browsers and Chrome (on all platforms) the most and iOS browsers to a lesser degree.  I'm in the process of figuring out how to run the huxley tests.  Once I have them running (and passing) I'll submit a PR.  Here's what the before and after look like:\n\n\n. I'll send you the PR.  Is there anyway that we can run the huxley locally without using docker?\n. Closing this as a duplicate of https://github.com/Khan/KaTeX/issues/60.. Here's the code:\n\\frac{1}{(\\sqrt{\\phi\\sqrt{5}})e^{\\frac{2}{5}\\pi}} =\n1 + \\frac{e^{-2\\pi}}{1 + \\frac{e^{-4\\pi}}{1 + \\frac{e^{-6\\pi}}{1 + \\frac{e^{-8\\pi}}{1+\\ldots}}}}\n. I'm in the process making sure we're using the correct sigma values.  It isn't fixing this problem.  I suspect that this issue comes from the majority of browsers not doing subpixel positioning of DOM elements.\n. I was going to close this b/c we fixed the values of sigma14 and sigma15, but there's definitely still an issue.  The following was rendered using the sandbox at 16px.\n\nZooming in highlights the issue:\n\nOne thing that sticks out right away is that the fraction bars aren't lined up with the + signs, some are lower than they should be and others are higher than they should be.. @mbourne nice page.  I love the \"Time to process page\" indicator.  MathJax: 1287 ms vs. KaTeX: 169 ms.  As for the rendering issues, my guess is that there's some CSS rule/property that it doesn't know about or is interpreting incorrectly.  The stock browser until recently was using a really old version of webkit.  I don't have a 4.1.2 device, so I'll try to investigate using the simulator.\n. I did some investigating with the Android simulator using the stock browser in 4.1.  I was able to reproduce the error.  I was also about to adjust the baseline, but changing the top on the span just inside the vlist.  Unfortunately, that means browser specific settings which KaTeX would like to avoid.\nIt's weird, even though 4.1 isn't that old, the stock browser code is super old.  I don't think there's much we can about this bug other than to suggest users download Chrome or Firefox for mobile.\n. @mbourne using <sub> and <sup> would be a lot easier...for simple scenarios, but I think that they would be lots of cases where they'd breakdown.\n. I experimented with using CSS transforms to translate the <span> containing the subscript and that worked on the stock Android browser.  I started out by using a pixel offset, but switched to using an em measurement.  I didn't realize that browsers supported things transform: translate(0em, 0.1em); but they do.  \nI took it a step further and was able to typeset a fraction using this same approach.  Although using CSS transforms worked in a few simple cases I don't know if it will work in all cases.  Also, it would be a big change from how things are currently implemented.  Lastly, while CSS transforms have good support on most browsers they are not supported on Opera Mini.  http://caniuse.com/#feat=transforms2d\n@xymostech When you were doing the initial implementation, did you look at using CSS transforms?\n. https://github.com/Khan/KaTeX/issues/273 will cover unsupported commands and https://github.com/Khan/KaTeX/issues/275 will update the docs to encourage users to use try/catch statements.  Since some people don't like having lots of console messages in production including them by default in the render call is out of the question.  We could have an option to do this, but since all calls to render should be wrapped in a try/catch, it's just as easy to console.log the message there.\n. @ystreibel this bug was fixed after v0.3.0 was released. If you build katex.js from the source it should be fixed there.\n. Closing due to inactivity.  Also, we've recently added support for a number of unicode characters.  Search for \"Direct Input\" on https://khan.github.io/KaTeX/function-support.html.. @mhchem we don't have a plugin architecture yet.  LaTeX functions are defined in src/functions, e.g. https://github.com/Khan/KaTeX/blob/master/src/functions/lap.js.  Usually we only have a single call to defineFunction per file in src/functions, but a person could have more if that makes sense for implementing mhchem.  The thought was eventually we'd expose the defineFunction command so that people could extend KaTeX without having to update KaTeX itself.. Have a look at https://github.com/Khan/KaTeX/blob/master/src/symbols.js.  I think the character you want is \"\\u2113\"\n. If the content of the square root affects the height of the overline in subtle ways, it might be better to position the overline relative to the radical symbol.  Since there's only 4 or 5 different size variants it'll cut down on any tweaking that needs to be done.\n. @ronkok do you think it's feasible to use the same approach you used with the stretchy elements to fix this issue?. @ronkok I was thinking that maybe the radical symbol and the radical line could be in the same SVG similar to how the stretchy arrows are.  This would guarantee that the top of the surd and the radical line would match up for all font sizes, wouldn't it?\nAs for avoid floating-point errors, I think the issue is that font sizes are quantized to the nearest pixel.  This means that while the radical line is in the right spot, the height of the radical symbol isn't what it should be.. > Here's a general plan for the JavaScript: (1) Make the radicand into a group node. \nThe rest of the plan sounds good.  Could you elaborate on (1)?\n\nWhich would you prefer?\n\nLet's go with 1 so that things are consistent.  That's too bad about Edge not supporting CSS mask.  fwiw I voted for it on https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/6261341-css-masking.\n\nThe weak point of that plan is step (4) makeVList. The radical will be taller than 1 em, so step (4) is blocked by issue #746. Or perhaps, we avoid makeVList and use custom code for vertical alignment in this case.\n\nMaybe we can add an element with a fixed height that matches the height of the radical.  Is this what you meant by \"custom code for vertical alignment\"?. @ronkok sounds good to me.  I'm glad to hear that it's coming together nicely.  I can't wait to see the results.  This problem has plagued KaTeX for a long time.  I excited at the prospect that we may soon have a solution to it.  Thanks for taking this on.. @ronkok don't worry about keeping the old implementation.  If it takes a while that's okay.. That looks awesome!  Can you post a screenshot at some smaller font sizes?  Small font sizes seem to be where the current approach really breaks down.. Fixed by #810.. I was doing some preliminary investigation into how this works in LaTeX and \\begin{align} ... \\end{align} is not allowed in math mode, only in paragraph mode.  The problem is that we're in math mode by default.\nShould we allow people to write things like 1 + \\begin{align} ... \\align{end}?  What would that look like?  Some possible solutions to this conundrum:\n- restriction how certain environments are used\n  - e.g. if we recognize the align or equation environments then there can't be any math before or after them\n- start out in paragraph mode and requiring people to use $..$ or $$..$$ or \\[..\\] etc.\n  - not ideal because it changes current behaviour which is nice because it's simple\n  - also, having a paragraph mode opens a can of worms\n. @episodeyang Sorry for the delayed reply.  I haven't done any implementation work on this yet.  I just did some investigating to see how difficult/easy it would be to implement this feature.\n. I found this in amstex.sty:\n\\newenvironment{aligned}{%\n  \\relax\\ifmmode\\else\\nonmatherr@{\\begin{aligned}}\\fi\n  \\null\\,\\new@ifnextchar[{\\aligned@}{\\aligned@[c]}%\n}{%\n  \\crcr\\egroup\\egroup\n}\n\\def\\aligned@[#1]{%\n  \\if #1t\\vtop \\else \\if#1b\\vbox \\else \\vcenter \\fi\\fi\n  \\bgroup\n   \\Let@\\restore@math@cr\n   \\default@tag\n   \\ifinany@\\else\\openup\\jot\\fi\n   \\ialign\\bgroup\\hfil\\strut@$\\m@th\\displaystyle{##}$&%\n    $\\m@th\\displaystyle{{}##}$\\hfil\\crcr}\nIn \"TeX for the Impatient\" it states the following:\n\n\\ialign\nThis command behaves just like \\halign, except that it first sets the \\tabskip glue to zero and sets \\everycr empty.\n\nI take that to mean that there is no space between the columns or rows.\n. I found this post on the tex stack exchange about the difference between aligned and align*.  http://tex.stackexchange.com/questions/95402/what-is-the-difference-between-aligned-in-displayed-mode-and-starred-align\nThe basic difference AFAICT is that align* has extra vertical space.  Maybe it would make sense to not include the extra vertical padding and let people handle that with their own CSS.\n. @Reflic environment support has been added so adding support for {align} is easier than it would've been in the past.  If you're willing to take a stab it we'd love a pull request for this.\n. We could add numbers in parens after the inline equations as suggested in http://tex.stackexchange.com/questions/78579/labelled-in-line-equation.\n. I've created a new issue for equation numbering: https://github.com/Khan/KaTeX/issues/350.\n. @gagern awesome stuff!\n. I think just that it parses is good enough for the jasmine tests.  Having the image is more important.\n. @Pomax if you add an entry to package.json manually you should be able to get the unreleased version, see https://docs.npmjs.com/files/package.json#git-urls-as-dependencies.\n. This is, at the moment, not shared state between invocations of render() or renderToString().  We'd have to introduce the concept of rendering a \"document\".  We might look at having a way to create a document renderer which can:\n- \\begin a \"document\"\n- render() multiple pieces of LaTeX\n- \\end a \"document\". I think that https://github.com/Khan/KaTeX/blob/master/contrib/auto-render/auto-render.js makes things a lot better for the average user who just wants all their math to be rendered by handling exceptions appropriately.\nThe issue of people using the API directly being caught off guard should probably be handled by updating the examples in the docs to include a try/catch block as well as a warning to always catch errors.\n\nThe success-error pattern is kind of a hack for async programming without coroutines because async operations can\u2019t use throw-catch. This makes sense if renderToString is async, but it\u2019s not.\n\nTotally agree.  \nasync/await (part of ES7) supports try/catch/throw for asynchronous code.  I can't wait to use it.  It really cleans up a lot of the clutter that you get with Promises.\nSince Promises add clutter and aren't necessary b/c all of the code is synchronous there isn't really a reason to support them.  @Pomax if you really want to use Promises it shouldn't be too difficult to write a wrapper around renderToString.\nI'm going to close this and will update the docs.\n. How do you do the on-demand loading?  Can you point me at some code?\n. @Pomax have you tried calling renderToString in a web worker and then passing the HTML back?\n. If you throw inside of a Promise, it should catch the except and pass the value to the error handler.  If there's no error handler then it still blows up.\n```\nvar promise = new Promise(function (resolve, reject) {\n   if (eqnInView) {\n      katex.render(equation, container);\n      resolve();\n   }\n   var listener = document.addEventListener('scroll', function (e) {\n      if (eqnEnteringView) {\n         document.removeEventListener(listener);\n         // okay if this throws as long as there's a error handler\n         katex.render(equation, container);\n         resolve();\n      }\n   };\n});\npromise.then(function () {\n   console.log(\"success\");\n}, function (err) {\n   console.log(err);\n});\n``\n. The fonts we're currently using don't have accented characters like \u00e9 so we could construct them, but there a other characters like \u00e6 and \u00df which we wouldn't be able to construct.  For those we'd have to add/switch fonts.  Perhaps latin modern: http://www.ctan.org/tex-archive/fonts/lm/.\n. I'm not familiar withfontspec.  I had a quick look at https://github.com/wspr/fontspec/ and it looks like it might be useful.  One thing about \"any font they want\" is that not all fonts will support everything.  Also, all theKaTeX-fonts instatic/fontsare quite small compared to XITS.  The nice thing about having different character sets in different font files is that you can load what you need.  One of KaTeX's strengths is its speed and wouldn't want to sacrifice that.\n. @quxiaofeng not it isn't.  Please open a separate issue as\\undersetis unrelated to unicode support.  You can check what LaTeX commands are support on the wiki: https://github.com/Khan/KaTeX/wiki/Function-Support-in-KaTeX.\n. @Pomax please re-open if this is still an issue for you.\n. That flag centers stuff on the test page.  Not sure how it will affect @Pomax's layouts.\n. Totally understand.  As long as there's a fall through case.  That being said, I don't think you want a whole bunch of browser specific hacks throughout the code.  I tried to keep it isolated.\n. I wasn't able to test this because I don't have easy access to a Windows VM from my dev machine.  I did look at the existing sqrt rendering on a Windows box at work and it looked good in IE and Firefox but it looked off on Chrome that's why the fix checks isChrome() || isMac().  I'm going to look into browserstack on the weekend so that I can actually test the fix on more browsers.\n. I finally got around to testing the fix on Windows browser without theifstatement.  It didn't negatively impact browsers that were doing a good job and on browser that weren't it improved the rendering.  I'll submit a new pull request for the changes.\n. I'm also on 10.9.4, but on a Macbook Air with a normal resolution screen and wasn't able to reproduce it.  The version of Chrome I'm on is 39.0.2159.4 dev.\n. We might be able to fix this usingpadding-rightinstead ofmargin-right`.\nRendered using padding-right:\n\nRendered using margin-right:\n\n. @peterjeliot in the first image the rendered math is wider than the container.  If it were using margin-right the integral sign would have been clipped, but it's using padding-right which prevents the clipping for some reason.  In the second image, the rendered math is narrower that the container and it's using the original margin-right so it shows what the integral signs normally look like.   The rendering of the integral signs might actually be the same between the two. I'll have to try the change out and run the screenshot tests.\n. @spicyj I put padding-right right just on the integral signs.  I'll have a to see what happens if I replace all uses of margin-right with padding-right.  In terms of layout it shouldn't matter (famous last words).\n. I tried this change out in the test app and using padding-right moves the limits ever so slightly closer to the integral sign.  This is a big issue because the spacing of our rendering differs far from LaTeX.  Green is LaTeX, red is KaTeX.\npadding-right:\n\nmargin-right:\n\n. I'm not seeing this issue anymore in Chrome.  @phoenixeliot please re-open if you're still experiencing it.. @kasperpeulen we're definitely interested in this functionality.  Thanks for re-opening this.  There are some characters that are mapped to multiple commands, see https://github.com/Khan/KaTeX/pull/261#issuecomment-114415474.  Could you leave those out of this pull request?  At some point in the future we'll figure out a good mapping, but for now I'd like to avoid the contentious bits of supporting unicode math symbols.\n. It should be possible by adding some code in handleExpressionBody(pos, mode) to detect \\over commands and then modify the array of atoms by replacing [abc, \\over, def, ...] with [\\frac{abc}{def}, ...].  That being said, doing so would add complexity to the parser.\n@certik: are there specific use cases for \\over where it's less desirable to use \\frac?\n. Okay, twist my rubber arm.  It's in pull request https://github.com/Khan/KaTeX/pull/96.  The changes turned out to be not that bad.  Hopefully @xymostech agrees.\n. I had some issues cleaning up my messy commit history.  The changes are in pull request https://github.com/Khan/KaTeX/pull/101.  It also address an issue that @spicyj  found with the original PR.\n. Implemented in pull request https://github.com/Khan/KaTeX/pull/104.\n. @cben https://github.com/Khan/KaTeX/tree/master/contrib/auto-render searches for delimiters which can be specified so it should handle the use cases you've listed.\n. Can you test this on IE and Firefox on Windows?  I found that the rendering of \\sqrt on those browsers doesn't have the same issues as Chrome and the browser on Mac OS X.  If you don't have access to a Windows box give http://www.browserstack.com/ a try (they have a free trial period).\nAlso, try testing it at different font sizes.  I submitted pull request https://github.com/Khan/KaTeX/pull/105 and it solves the issue at big font sizes but between around 10px and 20px font sizes it still looks wonky.\n. There's other rendering issues with \\sqrt that we have to address.  See https://github.com/Khan/KaTeX/pull/268#issuecomment-115293652.\n. This is a duplicate of issue https://github.com/Khan/KaTeX/issues/9.\n. @prlbr see https://github.com/Khan/KaTeX/pull/135.  The code is pretty stale now though.. Nice investigation.  I'm okay with using \\kern-2.4pt as long as we have a screenshot test for this.  That way if we fix the other lurking issue without updating the macro we'll know.. MathJax has no problem with either \\mathbb{R^n} or something more complicated like \\mathbb{R+\\frac{1}{\\sqrt{2}}}.\nI had a look at your commit.  I don't think this is the right route because it's too restrictive about what can inside \\mathbb{}.  We probably want to do something similar to how \\displaystyle and \\textstyle are handled.  See buildTree.js line 790 (groupTypes.styling) for more details and pay attention to how Style and options are used.\n. I did some more research and found that LaTeX supports math commands within \\mathbb.  The following renders just fine:\n$$\\mathbb{\\frac{R}{R+R}}, \\ \n\\mathbb{R^{N \\times N}}, \\ \n\\mathbb{(N^N)^N  \\sim N^{N \\times N} \\sim N^N}, \\ \n1+2+\\mathrm{\\frac{1}{1+hello}}$$\nHere's the result:\n\nSome of the math is nonsense, but some of it was taken from http://math.stackexchange.com/questions/243590/bijection-from-mathbb-r-to-mathbb-rn.\nBoth \\mathbb and \\mathrm should support putting other command inside of them.  The font that's used for \\mathbb doesn't have numbers or lowercase letters.   There's a few options that we can take:\n- throw an error\n- display some random character (this is what LaTeX does)\n- display a placeholder character like a box or a box with an \"x\" or \"?\" in it\nI like the third option because users can see the rest of their math rendered and a box with a \"x\" or \"?\" looks more intentional and similar things are done by other software when they're missing a glyph.\n. I would like to do similar things as well.  I'd be okay with just \\cssId{id}{group} in the short term.  I'll try implementing it tomorrow.\n@hastebrot: Could you use attributes instead, e.g. <span velocity class=\"...\"></span> and use selectors like \"span[velocity]\"?\n@xymostech: Maybe we could look at introducing a \\cssAttr{name}{value}{group} macro and blacklist \"id\" and \"class\".  Thoughts?\n. The reason I suggested blacklisting \"id\" and \"class\" when using the proposed \\cssAttr macro is that \\cssAttr would probably be quite dumb and just set the value of the attribute.  We definitely don't want to replace the value of \"class\" attributes.  \nAfter thinking about it some more, it's probably okay to allow users to replace the value of \"id\" attributes.  This would make \\cssAttr{id} equivalent to \\cssId so scratch my suggestion for blacklisting \"id\".  If you really need classes then having a separate \\class macro that adds a class makes sense.\n. I've implemented rudimentary support for \\cssId in https://github.com/kevinb7/KaTeX/commit/46f1ae6455fbb1b3039e2c35fc6fead7188ef05d.  The body must be a single atom like \\frac{x}{x+1} as opposed something like {x+1}.  Here's a screenshot of it in action.\n\n@xymostech: I tried wrapping the elements of a group in a span, but it messes up the spacing.  I read your comment in the buildTypes.color and had a look at the CSS rules so I have an idea of what the problem is.  I was thinking that I could fix the spacing issues by looking at the last atom in the group and then apply an appropriate style to enclosing span.\n. I had issues cleaning up the commits so I created a new pull request  https://github.com/Khan/KaTeX/pull/102.\nI was able to get the spacing working correctly.  Details are in the PR.\n. Pull request https://github.com/Khan/KaTeX/pull/119 implements \\cssId and \\class as extensions.\n. @hastebrot Thanks.  I cleaned it up a bit since the initial commit.  It's starting to come together.  I'm interested to hear what @xymostech and @spicyj think about it.\n. @rrandallcainc since this is non-standard it should probably go in contrib/.  In order to do that though, we need a way to add functions from outside of KaTeX core.  You could expose defineFunction as __defineFunction.  There should also be automated tests for this so that we can catch any changes to defineFunction that break these commands in contrib/.. Please look at \"Files changed\" as opposed to the individual commits.\n. going to do this over again after I submit a some smaller parser related pull requests\n. I found some bugs while writing unit tests.  I resubmit when I finish the unit tests.\n. going to redo do this the commits are cleaner\n. ugh... I squashed the commits and pulled in other people's changes because of the merges I had in the history.  Sorry about the mess.\n. I did a hard reset as you suggested, but the other commits didn't come back.  I think I'm going to start over again and avoid merging master into my branches.\nI think I can fix the behaviour with \\displaystyle, but I'll have to update handleExpressionBody to have an option to stop when it runs into \\over (or any other infix operator).\nHow did you verify how TeX parses it?\n. I keep forgetting about inline text.  How do you get KaTeX to render inline math?\n. I'm going to redo this so the commits are cleaner.  I was able to fix the issue with \\displaystyle on a local branch.  Also, I generalized it so that we can easily use the same approach for other infix operators without further updates to the parser... just need to add an entry in functions.js.\n. I'm going to redo this so the commits are cleaner.\n. It appears to not like the bullets that you have in the \\text{\u22c5 \u22c5 \u22c5}.\nKaTeX throws an error when it encounters something it can't handle.  If your code doesn't catch the error then all subsequent JavaScript will not be run.  Based on your example, here's some code that will catch errors and continue rendering.\n<script language=javascript type='text/javascript'>\n  Array.prototype.forEach.call(\n      document.getElementsByClassName(\"tex\"),\n      function(el) {\n        try {\n          katex.render(el.getAttribute(\"data-expr\"), el);\n        } catch (e) {\n          console.log(e);\n        }\n     }\n  );\n</script>\n. There are a variety of ways of doing this including:\n- http://learn.jquery.com/using-jquery-core/document-ready/\n- http://www.w3schools.com/jsref/event_onload.asp\n. I should've waited until you finished code reviewing.  I'll make the rest of the changes after lunch.  Do you want me squash everything into a single commit?\n. I made the other changes you requested.  As a result, I ended up adding a method called squashOrdGroups that removes unnecessary ordgroups.  I found that {1 \\over 2} \\over 3 generated too many ordgroups with a single child.\n. Sorry about that.  I'm new to squashing things... I guess I got a bit overzealous.\n. @xymostech: Let me know if that's good to go and I squash it later this evening.\n. No problem.  Thanks for the merge!\n. Closing this PR in preference of https://github.com/Khan/KaTeX/pull/119.\n. @jmeas Nice work! Can we add functions to your library?  Also, it would be nice if people could hover over to get a tool tip.  The it serves a dual purpose of not only showing people what we support, but also help people who are new to TeX.\n. Sounds good.  Just post a link to v2 when you're ready.\n. @utensil this is really cool.  Could you add a link to it in CONTRIBUTING.md somewhere where it makes sense?\n. Sounds good.\n. Yes!  I'm on the board.  ^_^\n. @ctrlcctrlv Would you be able to create a pull request for this?\n. @ctrlcctrlv I didn't realize that MathJax has a safe mode.  We'll want to do something similar eventually I just don't know when that will happen.\n. http://docs.mathjax.org/en/latest/safe-mode.html\nhttp://docs.mathjax.org/en/latest/options/Safe.html\n. I looked at the docs for MathJax's safe mode again and it doesn't say anything about MathJax limiting the size or complexity of rendered math.\n@jschatz1 thanks for bringing this up as a concern again.. @DouweM we don't have any extensions for embedding links or arbitrary markup.. We have a bower.json file now, see https://github.com/Khan/KaTeX/commit/2060ebaf214739cda866368175185c5151b86426.\n. You can now use bower install katex to grab the built files.  \n@jmeas Sorry for forgetting about this pull request.\n. We might also want to consider having a separate repo for the built files.  The Polymer project does this.\n. Alternative solution to issue https://github.com/Khan/KaTeX/issues/116.\n. Serves me right for not creating an issue first.  I submitted a pull request to use eslint, see https://github.com/Khan/KaTeX/pull/115.  \nThere are quite a few cases of variables are defined twice.  I turned off the checking for this particular issue because I'd like to discuss it with @xymostech first.\n. :+1:\n. Support has already been added in commit https://github.com/Khan/KaTeX/commit/b9333a36d1cb2e0896107dffd3a42dd308430f15.  I tested your code on the local server and it renders beautifully.\nIf you want to test what's currently working please checkout the repo and run server.js (after doing npm install).  Then navigate to http://0.0.0.0:7936/.\nAs for updating http://khan.github.io/KaTeX/, it looks like something that @xymostech does.\n. There is a list on the wiki: https://github.com/Khan/KaTeX/wiki/Function-Support-in-KaTeX, but it is not up-to-date.  There's a discussion going on in issue https://github.com/Khan/KaTeX/issues/103 about how to keep the list up-to-date.\nAs for \\choose and \\over, these are infix operators which KaTeX currently does not support in general.  I am working on \\over in pull request https://github.com/Khan/KaTeX/pull/101.  This code also provides a way to do infix operators in general.  @spicyj  is working on \\binom.  Once those two things are in adding support for \\choose will be easy.\n. This is a duplicate of https://github.com/Khan/KaTeX/issues/36.\n. @jmeas: I'm not sure I follow option 1.  KaTeX looks up symbols based on their name so there'd have to be an entry in the symbols table already for both.  In this case there are two entries already which is okay for the time being.\nI assume that @spicyj means storing the symbol alias in some sort of macros dictionary that will also be used for \\def and/or newcommand.  I was going to say that this seems more effort than it's worth.  Then I did a quick search of http://milde.users.sourceforge.net/LUCR/Math/unimathsymbols.pdf which revealed that there are 500+ aliases.  I can see now how having a quick way to define symbol aliases would be helpful. \n. @jmeas: Good point about humans.\n. I believe this has been addressed in a couple of ways.  #128 included some aliases and there have been a number of PRs since then that included other aliases.  We also now support defineMacro which can be used defined aliases although most (all?) of the existing symbol aliases use defineSymbol b/c it's already pretty short to write.. I had a look at the .ttf files and I couldn't seem to find any that contained plain old italics for latin characters or normal numbers.  Am I missing something?\n. It's possible, but it would take some elbow grease.  One of the issues is that KaTeX isn't a full TeX engine, we don't support macros or (re)defining commands.  I believe that many LaTeX packages redefine certain basic TeX commands to override the default fonts that are used for math like cmr10, cmmi10, cmsy10, etc.  Also, KaTeX supports many high level commands but doesn't implement those low level commands that everything is built upon in TeX so swapping out fonts would require a different approach.\nProbably the quickest (and dirtiest) way to do this would be to create your own version fontMetrics.js with different fonts.  This requires adding .ttf (and maybe .woff, .woff2, .eot) files to /static/fonts, updating metrics/mapping.pl and metrics/extract_tfms.py (this requires the necessary .tfm files for the fonts you want to use to be in your local TeX installation).  After everything's set up, run make metrics and then make serve (or just make) and you should be good to go.\nNot everybody likes using the same fonts though, so having a way to easily switch between different fonts or at least build different fontMetric.js easily would be preferable, but that would take some design work.\nIf people are really interested in making this happen hopefully they can use some of this information to implement this feature or at the very least poke at the problem at bit.\n. This is a duplicate of issue https://github.com/Khan/KaTeX/issues/48.\n. Can you post the TeX, HTML and any other CSS you're using?\n. @mbourne: Could you create a PR with the text-indent:0 change?  The line height issue might be a little more complicated because without the fractions the spacing was probably okay, but if you had some integrals then 2.8em might not be enough.  How did you create the multi-line layout?\n. There's lots of warnings about missing metrics in the console.  You'll probably have to add some entries to metrics/mapping.pl.\n. @jmeas My bad for skimming.  I'm interested in seeing how to add metrics because I'd like to add support for \\mathbf, \\mathsf, etc.  I look forward to seeing your next commit.\n. :+1:\n. Given \\left< \\frac{1}{x} < \\frac{1}{y} \\right> both LaTeX and KaTeX produce the same output.  Since \\lt and \\gt are aliases to < and > I would expect KaTeX to produce the same output for \\left\\lt \\frac{1}{x} < \\frac{1}{y} \\right\\gt which it does.\nKaTeX:\n\nLaTeX:\n\nThe \\backslash behavior differs from MathJax but matches LaTeX which is what we want.\nKaTeX:\n\nLaTeX:\n. katex.render() is synchronous.  I did some testing with the test page setting a breakpoint and doing a single step over katex.render() call.  If it's the first time being called, things maybe appear partially rendered immediately after stepping over.  This is because the fonts haven't been loaded.  Once they're loaded, the rendering should happen immediately.\nWhat are you trying to accomplish with the two events?\n. @mbourne are you putting all of your calls in in-line <script> tags in the <body> as in http://www.intmath.com/cg5/katex-mathjax-comparison.php?\n. @mbourne Please see the gist posted in issue https://github.com/Khan/KaTeX/issues/26.\nEdit: After reading the gist, it's probably not what you want.  I submitted a pull request but then I closed it because of the gist.  You can find the code here: https://github.com/Khan/KaTeX/pull/133.\n. I think we have most of the \"LaTeX2e Symbols/Aliases\" listed above with the exception of notChar.  The AMS Symbols/Aliases will require new fonts which is blocked on #816.. This is no longer blocked as #816 has been completed.. @akalin they were implemented by @edemaine in #794.  I believe that \\varGamma et al is the only remaining work in this issue.. I think it should be pretty easy to implement these aliases, e.g.\ndefineMacro(\"\\\\varGamma\", \"\\\\mathit{\\\\Gamma\");. Superseded by #1077.. Closing this due to lack of activity.  @drewsberry please re-open if you have time to address the concerns raised above.. I'll create some Huxley tests for this.\n. I had to manually crop the images generated because the docker setup is producing images that 1024x767 as opposed to 1024x740 (size of images in the repo).\n. I've rebased the code and added support for MathML.  I need to update the screenshots though using the new screenshotter.\n. The screenshots have been updated using the new screenshotter.  @xymostech This is ready for review now.\n. It should probably fallback to whatever font is appropriate.  We don't have double struck numbers so we should use KaTeX_Main for those and KaTeX_Math for lowercase letters (and Greek) as suggested.  MathJax's MathML output matches its fallbacks.\nI will do something about the fontStack.  Thanks for pointing out the exception issue.\nI can add \\mathscr.  Its mathvariant would also be script.  MathJax adds an additional class attribute to make the distinction in its MathML rendering.\nIf \\Bbb is obsolete what's the motivation in supporting it?\n. Good enough for me.\n. I got rid of fontStack and replaced it with an options parameter mirroring what was done in buildHTML.js.  I added some tests that verify that the mathvariant attribute is correct in the MathML output.  @gagern are there any other font aliases I should add?\n. Implemented \\imath and \\jmath as per https://github.com/Khan/KaTeX/issues/191.\n. > Personally, I'd combine all the screenshot tests into a single one, e.g. using the array environment for multi-line support.\nI was thinking about doing this, but I'm worried about having dependencies between tests.\n\nThe old font commands (those declared using \\DeclareOldFontCommand) don't affect the single following group, but instead the current group to the end of that group, the way sizing commands work.\n\nThanks for highlighting the distinction.  I'll save those \"alias\" commands for another pull request.\n\nI guess that we generally should have a screenshot to verify the scope of each of these commands\n\nAgreed.\n. > And perhaps the KaTeX symbol in one of them, to verify it's not affected by font changes.\nInterestingly LaTeX doesn't support \\LaTeX inside math mode.\n. The plan is to break this PR into 3 separate PRs, namely:\n- [ ] font metrics + CSS changes\n- [ ] HTML implementation + screenshot tests\n- [ ] MathML implementation + unit tests\n  Once each of these have been merged, I'll close this PR.\n. Depends on:\n- https://github.com/Khan/KaTeX/pull/290\n- https://github.com/Khan/KaTeX/pull/291\n- https://github.com/Khan/KaTeX/pull/292\n. Closing because this has been implemented in https://github.com/Khan/KaTeX/pull/290, https://github.com/Khan/KaTeX/pull/291, and https://github.com/Khan/KaTeX/pull/292.\n. I didn't see @xymostech's gist in issue https://github.com/Khan/KaTeX/issues/26.\n. I'll create some Huxley tests for this.\n. We'll do this with macros.\n. I rebased but didn't make any changes (other than resolving merge conflicts).  I found that nulldelimiterspace was already defined in katex.less so it should be too much work to create a command for it.  After doing some research I realized that there's a difference between \\nulldelimiterspace and other spaces like \\, and \\thinspace etc.  \\nulldelimiterspace is a macro that resolves to a number... in this case 0.12em.   I was thinking that this might be a good situation to start looking at macros... mainly because \\nulldelimiterspace is a super simple macro.  Thoughts?\n. Will do.  It'll take me some time to figure out how to fit those strut measurements in what's happening in the genfrac as it is.\n. Apparently \\nulldelimiters are supposed to be placed around fractions when delimiters aren't specified.  This results in progressively indented fractions when using \\dfrac (and \\frac) for that matter.  Look at the right edge in the LaTeX output below.\n\\dfrac{1}{1+\\dfrac{1}{1+\\dfrac{1}{1+x}}}\n\n\\cfrac{1}{1+\\cfrac{1}{1+\\cfrac{1}{1+x}}}\n\nI'm going to add in the nulldelimiter for all fractions and then the \\kern-\\nulldelimiter will remove it so that everything's lined up for \\cfrac.\n. I think all of the fractions are behaving as they should.  If you're happy with the output I'll update the huxley tests.  Here's some screenshots of the KaTeX output:\nContinued fraction using \\cfrac:  Notice larger gap above the 1s from the \\strut but if the numerator's height is more then it uses the same clearance rules as before to maintain a minimum gap.  The right side of the fraction bars are aligned.\n\nContinued fraction using \\dfrac:  There's not \\strut so the gap above the numerator is smaller.  The right side of the fraction bars are not aligned, this is because of the null delimiter on either side of the fractions.\n\nContinued fraction using \\frac:\n\nContinued fraction using \\frac: This one shows that the null delimiters are being added before and after fractions.\n\n. @edemaine since this PR is so old I'd probably cherry-pick or manually port the changes.  I'm going to close this for now and will open a new PR when I have time.. I investigate that scenario as well but it looked like it was doing the right thing.  There's an mord space to the left the \"x\".  I tried creating an empty mbin as a sibling before the \"x\", but it added too much space (compared to MathJax's output).\n\nThis screenshot compares 1 + \\Huge x without and then with the extra mbin.\n\nWhat would you like me to do?\n. I looked at the MathJax rendering of this scenario and variations on it.  It appears that if there is a space between something \\Huge and something non-\\Huge then the space is smaller.  In order to fix this, I got rid of the empty mord and instead set the <span> containing the \\Huge to be a mbin instead of an mord.\n\nHere's MathJax's rendering for comparison:\n\nI also tried {)\\Huge x}{)\\Huge +}x because I wanted see what spacing would like on the other side of the operator.  Here are screenshots of that in KaTeX (with the fix) and MathJax.\n\n\n. I was using http://www.mathjax.org/demos/scaling-math/.  I tried the fiddle, but it's using the same fonts as the MathJax site.\n. @kaushik1979 You're also missing a \"}\" at the end of tex_val.\n. We'll handle this using macros.\n. I called the symbol the wrong thing, but I added a symbol for the long solidus.  The not method in buildTree.js places one the long solidus after the inner symbol.  It seems like a we could have a macro like \\def\\not#1{\\longSolidus #1}.  I just made up \\longSolidus so maybe this isn't possible.\n. In that case I'm going to re-open this.\n. @spicyj the \\not glyph gets rendered after the rel that follows it in the source code so there needs to be some processing in buildTree.js (now buildHTML.js) to handle this.  The macro I was suggesting in a previous comment should've been \\def\\not#1{#1 \\longSolidus}.  Sorry about the confusion.\n. @gagern because the \\longSolidus occurs after the inner in the span it should already be right aligned.  That glyph has funky metrics which shift it to the left by its width.\n. @gagern sorry, reading too quickly.  I can flip the order and shift it forward.\n. The order is correct now.  It's too bad firefox doesn't want to render it correctly.\n. @xymostech I'm not sure.  It renders everything correctly except for \\not{abc}.  For some reason the solidus is missing in this case.\n. @sthoch this pull request is to add it as a combining mark.\n. @sthoch I didn't realize that you had tried this pull request out.  I'll give it another try.  It might have been a problem with the specific version of Firefox that I was using.  What version are you using?\n. I can no longer reproduce the issue I was seeing in Firefox.  I've rebased this PR and updated the MathML code to produce something closer to what MathJax produces.\n\\not{abc}+1 produces the following MathML:\n<math>\n  <semantics>\n    <mrow>\n       <mrow>\n         <mpadded width=\"0\">&amp;#x29F8;</mpadded>\n         <mrow>\n            <mi>a</mi>\n            <mi>b</mi>\n            <mi>c</mi>\n          </mrow>\n       </mrow>\n       <mo>+</mo>\n       <mn>1</mn>\n     </mrow>\n     <annotation encoding=\"application/x-tex\">\\not{abc}+1</annotation>\n  </semantics>\n</math>. New Firefox issues.  :(\nRunning make screenshots produces the same output.\n\nRemoving some of the \\not commands will \"fix\" others, e.g. removing \\not= fixes the \\not> that appears after it.  The whole thing is very strange.. I was able fix the Firefox rendering by using position: absolute and a CSS transform.  I'll update the PR in the morning.\n\n. I started looking into this again and after rebasing there's now a space between x and y in \\not{x}y when there shouldn't be so I'll have to figure that out.  Also, Safari handles the zero width solidus incorrectly.  I'm going to see if I can find a solidus with a real width and see that works in Safari.. After doing some more investigation I've come to the realization that the behavior of \\not is actually quite strange.  Give the following input:\n```\nab\\not{x}y + \\not{x}y + \\left(\\not{x}y\\right) \\\n\\not=\\not>\\not\\geq\\not\\in\\not<\\not\\leq\\not{abc}\n```\nLaTeX renders:\n\nNotice the spacing around the first \\not{x}y.  There no space between the y and + which seems to indicate that both the x and y should be mrels even though the y isn't inside the \\not group.  :worried:. Also note that the original solution had incorrect spacing between operations.  The spacing is tighter in the LaTeX rendering above.. > defineSymbol(math, main, rel, \"\\u0338\", \"\\not\");\n~I'll give that a try and play around with the positioning.~\n@edemaine I totally misunderstood your comment.  \ud83d\ude05   . I've changed the approach significantly.  Instead having a specific not group type and \\\\not function, buildExpression processes \\\\not groups and makes necessary changes to the following group.\nI left a number of TODOs for subsequent PRs.. \n. The handling of \\\\not with ords can definitely be improved, but it seems like a bit of an edge case as \\\\cancel is a better option for ords.. @gagern could you have another look at this?. Looks like I'll have to update the screenshots for this.. > For some reason I'm unable to actually merge this. Feel free to do so if you can...\n@edemaine the branch needed to be updated.  Do you see an \"Update branch\" in your UI?. Another note for Mac OS X users: you'll need to allow the DOCKER_HOST environment variable to passthrough to your sudo environment otherwise sudo docker won't work.  To do this run sudo visudo which edits a special file that describe your sudo environment using vi.   Add the following line to the file: Defaults env_keep += \"DOCKER_HOST\".\n. I looked at the sizes for the image for the leftright tests.  The dimensions are:\n- 1024x767 (running on my machine)\n- 1024x740 (image checked into github)\n  I didn't do anything special per se other than not using linux which was probably my first mistake.\nXvfb sounds pretty cool.  I had a look at the man page and here's what it says about default screen size: \"By default, only screen 0 exists and has the dimensions 1280x1024x8.\"  There an option that you can pass to Xvfb to change the screen size.  I'm going to try rebuilding the image.  \nThe difference may also be due some package changing between the time you built your image and I built mine.  It may also be that docker on Mac OS X isn't ready for the prime time.  I hope it's not this last one because I really don't want to have a to create a Linux VM just to run another VM.\n. I built some new docker images using some different sizes for the -screen option.  These had no effect.  All of my screenshots turned out to be 1024 by 767 (even when I set the screen size of the Xvfb to 800x600x8).  My guess is that Firefox was hanging off the bottom the screen and the Selenium Webdriver was asking Firefox for it's own internal frame buffer to get the screenshot.  \nI then had a look at Huxleyfile.json and for each test, the screenSize is set to [1024, 768] which makes the screenshots I generated out by only a pixel.\nThen I decided to try running huxley locally.  Using this method I was able to generate screenshots that are the right size (at least according to Huxleyfile.json).  The downside of running this locally is that everyone will have a different version of Firefox and on Mac the rendering of \\sqrt is off.\nBoth running huxley locally and using docker produce images that are longer than the ones in github.  What I'm going to try next is cropping the bottom of the images so that the height matches.  I know this is a hack, but I'm interested in seeing whether the math that was rendered is the same.  If it is, then I can at least start creating some huxley tests for all those pull requests I opened.\n. Thanks.  I added some details to the issue you opened.\nGood point about the 1px shift.  We might be able to work around that issue by cropping all the whitespace and then doing a visual diff with a threshold.\n. I was able to create some screenshots for some of the pending pull requests I have open, but I had to crop them manually.  I did a quick test with some existing tests and even after cropping they didn't match on a byte level.  Doing a visual inspection by viewing both at full resolution and flipping between the two images did not reveal any differences (even a shift by a pixel).  I guess that's one of the other reasons I wanted to investigate the image diff-ing \u2013\u00a0there might be some .PNGs which when displayed look exactly the same even though they might be encoded differently... in which case the test should pass.\n. I started investigating phantomjs and lo-and-behold it takes screenshots too.  It has a pretty straight forward API, this snippet takes a screenshot:\n```\nvar page = require('webpage').create();\npage.viewportSize = {\n    width: 1024,\n    height: 768\n};\npage.open('http://localhost:7936/test/huxley/test.html?m=\\frac{1}{x+1}', function() {\n        page.render('example.png');\n        phantom.exit();\n});\n```\nUnfortunately, it doesn't support promises out of the box, but it shouldn't be too hard to wrap a couple of APIs to return promises.\nPros:\n- easier for contributors to setup because they don't have to do stuff with docker\nCons:\n- relies on WebKit which may use OS specific rendering routines\n- switching from Huxley requires work\n. I'll create a branch tomorrow that uses phantomjs to generate screenshots from the Huxleyfile.json.\nHere's the code for generating PDFs (unfortunately github doesn't let people upload PDFs):\n```\nvar page = require('webpage').create();\npage.paperSize = {\n    format: 'Letter',\n    orientation: 'portrait',\n    margin: '0px'\n};\npage.open('http://localhost:7936/test/huxley/test.html?m=\\frac{1}{x+1}', function() {\n        page.render('example.pdf', { format: 'pdf', quality: 100 });\n        phantom.exit();\n});\n```\nThe PDF it generated is only 4KB.  I guess it's using paths instead of embedding fonts.  The glyphs look like they're from the right fonts though. [edited for grammar]\nHere's the PNG:\n\n. I put together a script which renders the Huxley tests to PDF/PNG using PhantomJS.  Unfortunately both the PNGs and PDFs are incorrect for some of the tests.  This is probably because the version of WebKit PhantomJS uses is super old.  I decided not to do a pull request.  If you're interested in the code it's here https://github.com/kevinb7/KaTeX/commit/813460c1656807c5d6d78fb1ce2714b0709e87d3.  Below are screenshots from the LeftRight test.\nFirefox (original):\n\nPhantomJS (PNG):\n\nPhantomJS (PDF):\n\n. I went back to my original plan of doing image comparison.  Right now it just spits out the absolute error to console which thankfully is 0 for all of the test cases.\n. ~~I was able to get the image compare tests running and producing exact matching results using selenium in both docker and on travis-ci.~~ I discovered some discrepancies in one of the test results.  Please see pull request https://github.com/Khan/KaTeX/pull/147 for more details.\nI made the build fail if the images don't match.  I also added a nice little progress meter like the one jasmine uses.  Of course this stuff doesn't really matter if I can't sort out the discrepancies.\n. I was able to get things working by having huxley generate the images on the ci.  After all of the images are generated, test/compare/compare.js is run.  This script compares the new images in test/huxley/Huxleyfolder/ against reference images in test/compare/images.  \nTo add a new test, do the same thing you would before to generate images using huxley.  When you're pleased with the results, copy the image into test/compare/images and rename the image to match the name of the huxley test, e.g. test/huxley/Huxleyfolder/MathBB.hux/firefox-1.png -> test/compare/images/MathBB.png.\nHere's a screenshot of success:\n\n. Just to prove that this actual works, I change one of the tests from /test.html?m=a to /test.html?m=b.  The result is this:\n\n. The build failed randomly after resetting Huxleyfile.json so that the tests could pass.  The failure is an issue with the selenium server not starting up which is an issue with the port number being already in use.  I don't know if travis-ci just isn't shutting down the selenium-server after the build or if there's other builds from other people also using selenium-server.  I tried changing the port from 4444 to 4445 and that worked for one build. I'll be opening an issue with travis-ci.\n. Here's a link the issue I filed https://github.com/travis-ci/travis-ci/issues/2843.\n. I've updated the huxley dockerfile so that it will do the image comparison after generating the screenshots.  I think that the image comparison is valuable irrespective of whether it can run reliably on the ci server.  If I comment out the lines in the .travis.yml and commit it then people would at least be able to try running it on the ci and that would also allow us to get some more data points for the travis-ci guys.\n. I added in a sleep 15 before starting selenium and that seems to have fixed the problem.  I would like to replace the sleep with some that checks to see if the port is available.  This should reduce the build times which have ballooned to approx. 3 minutes.\n. Thanks for reading through all of my comments.\nI agree with @spicyj.  I think if a developer makes changes that improve the output then they should include updates to the reference screenshots as part of the test.  If we don't run the tests automatically then developers can inadvertently introduces changes to the rendering.\n@xymostech I'll check out your branch tonight.  I think docker is still a good idea because at least the browser and the rendering is consistent.  I don't know why the height is different, but that's the only thing that's different and that's pretty easy to compensate for.\n. I gave it a spin on my machine using docker and it produces the same images.  :+1:\n. I've also automated screenshotter in the following pull request https://github.com/Khan/KaTeX/pull/154.  It's funny, I had gone down the path of using straight up selenium, but the rendering of one file was off on the server.  I think the issue is that I didn't get the version of freetype exactly right.  Here's the versions:\n- docker: libfreetype6_2.5.2-1ubuntu2.2_amd64.deb\n- travis-ci: libfreetype6_2.5.2-1ubuntu2_amd64.deb (image_compare branch)\n  I got it right this time.\nQuestion about generating docker images: is there any chance that the version of libfreetype may change in the future when building the docker file?\n. @correnson which part of the wiki needs to be updated?\n. I see, we're missing \\forall, \\exists, \\nexists, and \\span.  Good catch.\n. After double checking it appears that \\span is not in master.\n. @correnson I've updated the wiki.\n. > I don't do Screenshotter, but anyone is welcome to make this PR.\nThis makes me sad.  I wish that Screenshotter wasn't a barrier to entry for contributors.  There appears to be a way to run multiple builds on travis with different environment variables.  travis-ci has a way to upload contents of a folder to S3 that I'm investigating.\nhttps://docs.travis-ci.com/user/deployment/s3/. > I\u2019m seeing open-source development for the first time and it seems as though the whole process may be held back because it doesn\u2019t have a really good way to put those teams together.\nIt can definitely be slower than having a dedicated team of people who are being paid to work on a project.\n\nIf you find a way to make Screenshotter easier, that\u2019s great, but if you want to do something really brilliant, figure out a way to identify and build a team on demand.\n\nMy goals are definitely less lofty than figuring building an on demand team.  I'd like to make KaTeX easier to contribute to and hopefully I can generalize things I learn to other open source projects.. @ronkok you can skip commit hooks by doing git commit -n.  If we can't figure out why this isn't working on windows we may just disable the hooks.  The various checks get run on travis-ci anyways.  The intent was to save when creating or updating a PR by running the checks locally first.  People can do this manually anyways.\nI'm surprised that deleting pre-commit from the hooks folder didn't fix this though.. I thought a little more about the automation aspect of this and realized that we'd also need to automate the generation of the images.  The interesting thing is travis-ci has xvfb installed in all environments (http://docs.travis-ci.com/user/ci-environment/#Environment-common-to-all-VM-images) and according to this page (http://docs.travis-ci.com/user/firefox/) they also have firefox installed.\n. I created a dockerfile that creates an image with ImageMagick.  Running the same image comparison tests using docker produces exact matches \u2013 zeros across the board.  ~~I'm going to see if there's some way that I can download the images that are produced so that I can see what the difference are.~~\n. ~~I was able to get the image comparison tests running on travis-ci to produce the same results.~~  The biggest issue was that travis-ci uses ubuntu 12.04 and that has an older version of freetype that renders things slightly differently.  I've changed the .travis.yml to install the version of freetype that's used in 14.04 which is what the Huxley docker uses.  ~~Now the images match exactly.~~\n. I was getting false positives because I was only checking err as opposed to err and stderr when calling exec.  After fixing that problem, I verified that changing the math in Huxleyfile.json will produce failures.  Unfortunately, for some reason the \"Lap\" test fails when it's no supposed to... but only in the node 0.11.  It passes fine in node 0.10.  What's even more confusing is that when I run the tests using docker there are differences between using huxley or vanilla selenium for generating the screenshots.\n. > I'm confused where images live now. Are they in huxley or in compare? If I make changes and want to update the screenshots, how am I supposed to do that? I'd rather the ones in the huxley folder be the ones we check in, and temp ones in the compare folder be created to do the testing.\nI put the reference images in compare/images.  In hindsight they should probably live in the huxleyfolder and be called ref.png, e.g. huxleyfolder/BasicTest.hux/ref.png.  Then when huxley is run it will produce firefox-1.png in the same folder.  This is nice because then if a human wants to look at them they're side-by-side.  Also, I can have ImageMagick produce a diff.png which will highlight differences in red.\n\nAlso, I'm a bit unsure about the imagemagick testing. I'd really like to be able to do byte-for-byte checks, where any changes at all are counted as bad. If people are using the docker, I would hope that the images are identical. We can do some testing to see if this is the case.\n\nThe tests verify that the images are identical pixel-for-pixel in the region 1024x740.  When I was doing the initial work on this I found that byte-for-byte testing produces false positives.  I found this out when I was using the docker locally.  I cropped the images so that they were the same dimensions as the ones on the server but they didn't match byte-for-byte.  So then I did a visual inspection, couldn't see any differences.  Then I use ImageMagick's compare tool and verified that there weren't any pixel differences. \n. I've committed the small changes.  I'll work on the big stuff tomorrow evening, namely:\n- switch to gm\n- change where the reference images live, e.g. Huxlefolder/BasicTest.hux/ref.png\n. We're planning to do a release soon.  From @xymostech's last comment it sounds like we should add the missing build files to the repo and then add them to \"files\" in package.json.  If anyone wants to create a pull request that does this that would be much appreciated.\n. This was fixed a while ago.. Let's revisit this once we support macros.\n. It looks like they were added a while ago:\nhttps://github.com/Khan/KaTeX/blob/master/src/symbols.js#L2115-L2119\n. These have already been added.  See https://github.com/Khan/KaTeX/wiki/Function-Support-in-KaTeX for details.\n. I think this is good to go.  I'm going to close the pull request I had open for image comparison.\n. Please note: I squashed the commits, but I did verify that ci build will both pass and fail when it's expected to.\n. Build times are still under a minute with screenshotter taking up 15 seconds.  That's pretty darn awesome!  @xymostech nice work on the screenshotter!\n. I'll do a pull-request against the branch instead of master.\n. I'd like to compare both renderings against LaTeX's rendering before taking any action here.\n. This is exciting.  I think this will help a lot with adding new features and finding bugs.\n+1 for imagemagick.\n. Closing because automating docker on travis-ci is better than having a separate implementation.\n. I tried this out and if you give KaTeX enough time it will render it.  Once it's rendered the browser is very sluggish.  There are two problems:\n- rendering time (spent in KaTeX) for super complex expression (my guess is that nesting affects this more than the number of \\sqrts, but I'll have to do some testing to validate this assumption, but at a certain point a super lengthy non-nested expression will be too much)\n- complexity of the resulting HTML\nThe easiest solution would be have some sort of heuristic for judging whether an expression is too complex or not and then don't process it or throw an \"expression is too big error\".  We could also keep track of time and if we've be processing for more than 20ms, throw a \"taking too long error\".  The timeout could be user configured.\nWe could also look at running KaTeX in a web worker.  This doesn't solve the issue of the resulting HTML being overly complex.\n. @jschatz1 no update.  You could count how many times \\sqrt occurs in the input string, but this doesn't protect against other as of yet unknown vulnerabilities.  I think rendering to a string in a web worker's probably the way to go when dealing with possibly hostile input.. I tried the same \\sqrt chain with MathJax and it renders it in a fraction of the time. . @xymostech I pasted the code from the original post into the demo on https://www.mathjax.org/ and it shows up quick and it seems to be the final render.  It's using MathJax's HTML renderer.. I tried it for myself just now and was pleasantly surprised.  There is probably still some number of \\sqrts that will cause issues, but any large amount of input will causes issues at some point so sanitizing user input is important.  That being said, I don't believe input sanitization is necessarily something KaTeX needs to solve.. @jeromew I'm going to close this as duplicate of https://github.com/Khan/KaTeX/issues/248 even though you reported this issue first, mainly because @spicyj has proposed a potential solution to the poor rendering quality in that issue.\n. We currently support: \\!, \\, \\,, \\;, \\:, ~, \\space, \\enspace, \\quad, \\qquad, and \\phantom.\nWe're missing: \\>, \\thinspace, \\hspace, \\hfill, \\kern, and \\hphantom.\nNotes:\n- \\thinspace is an alias for \\,\n- \\hphantom is not an alias for \\phantom, according to TeXBook pg 178:\n\nThere\u2019s also \\hphantom, which has the width of a \\phantom, but its\nheight and depth are zero.\n\nReference: http://tex.stackexchange.com/questions/74353/what-commands-are-there-for-horizontal-spacing\n. I guess we'd have to.  Should probably have a lexSize function.\n. That could work to.  It seems like using a regex directly on the input stream would be easier as opposed to having to concatenate tokens would be trickier.  I know there's code there that does this already, but it relies on a hard stop which we wouldn't have in this situation.\n. > I think a length would be finished after its two letter unit has been parsed.\nFor sure, it's a little trickier than checking for a \"]\".\n. @michaelcadilhac we do have macros now, and we do support \\kern now . @michaelcadilhac just haven't gotten it, mainly busy with other stuff and there's a pile of almost-there PRs that I should finish first.  PRs are welcome though.. The two remaining commands are \\> and \\hfill.. Closing this in favour of #990 since all horizontal spacing commands other than \\hfil et al have been implemented.. @jmeas I think that this issue might be different from the one that you've linked to.  Issue #5 is regarding parsing $...$ that's within a \\text group whereas I think @pashinin is asking for a function that looks at all of the text in the DOM and replaces any text that looks like $...$ with KaTeX rendered math.  It's probably more a dup of https://github.com/Khan/KaTeX/issues/26.\n. @scaljeri It seems like \\hspace would be relatively easy to implement.  It would probably have more success as a separate issue.\n. @octatoan support for \\begin{align*} is in code review, but the current implement doesn't behave well with infix operators such as \\over.   It's going to take some time to resolve this issue.\n. @kirbyfan64 the new release includes the aligned environment... other than that, no update.\n. Khan Academy has content with \\\\ outside {aligned} as well.. Sorry I should've mentioned that KA uses MathJax as a fallback.  It's something we'd like to get away from and thus very much interested in support \\\\ outside of {aligned}.. ~~Could you rebased this an move the definition for \\impliedby so that it comes after \\implies?~~Sorry, I missed https://github.com/Khan/KaTeX/issues/190.  We should probably hold off on \\implies until we get macros.  Could you remove \\impliedby from this pull request?\n. We'll tackle this once we have macros.\n. We probably could be doing more to insulate KaTeX from external styles.  Would you be interested in submitting a pull request?\n. My preference we be to try the reset approach.\n. @Loginisalreadytaken can you provide the code and a screenshot for this issue?\n. It's a tough problem.  There's been a couple of suggested fixes, but none seem to be a complete fix.  It difficult because it's not only browser and OS specific, but ti's also font size specific.  It looks fine on Firefox on Mac OS X.  In the past I've tested it on all of the Windows browsers and it doesn't look good in any of them.\n. I'm closing this a duplicate of https://github.com/Khan/KaTeX/issues/60.  @Loginisalreadytaken please re-open if this is not the case.\n. Be careful with using for-in loops.  getElementsByClassName does returns an HTMLCollection which contains other properties that show up in the for-in loop besides the elements that match the classname.  It's better to do a regular for loop using length.\n. In this case the for-in loop will include keys: length, item, and namedItem whose values aren't HTMLElements.  These additional properties show up at the end because numbered keys come first \"alphabetically\" which is why all of the math renders properly.\n. I believe this issue has been fixed by https://github.com/Khan/KaTeX/commit/2060ebaf214739cda866368175185c5151b86426.  Let me know if that's not the case.\n. TBH, I didn't look carefully at the bower.json file before closing this.  I did try it out and didn't see any errors/warnings.  Not sure why my version of bower isn't reporting them.\n. @franciscop what version of bower are you running.  I'm going to add \"main\", but for the life of me I can't reproduce the error that you're seeing.\n. @franciscop It should be fixed with https://github.com/Khan/KaTeX/commit/4ea7d38b5c8eeb25c86ebb4f8b12b8be78aaf8fb.  Can you give it another try?\n. So \\DOTSB is equivalent to \\relax and \\relax is used to prevent a command with optional params from \"eating\" the \\;.  Is that correct?. This was added with support for math fonts.\n. Fixed by #788.. I'm not quite sure how this would work as the presentation looks quite different from the LaTeX source.  Maybe when the user clicks on the KaTeX rendering you could hide the rendering and display a contenteditable element containing the source and then when the user clicks outside you could do the reverse and update the rendering.  It might be nice to do this if the user hits enter, but you'd have to capture that event youreself.\n. @alxarch sorry for taking so long to respond.  Can you rebase this?\n. I'm going to close this, please re-open this if you rebase and squash your changes.\n. A similar issue is that we don't collapse multiple primes into a single glyph.  \\u2032 is single prime, \\u2033 is double prime, and \\u2034 is triple prime.  Having a screen reader read out \"double prime\" or \"triple prime\" would be much nicer than \"prime prime\" or \"prime prime prime\".. Marking this as an accessibility issue too b/c I'm sure the browser will read \"one two three\" instead of \"one hundred twenty three\".. @NSoiffer what tex code are you using to generate this MathML?\n. For reference MathJax renders the prime in F' as:\n<msup>\n    <mi>F</mi>\n    <mo>&#x2033;</mo>\n</msup>\nand F^\\prime as:\n<msup>\n    <mi>F</mi>\n    <mi class=\"MJX-variant\" mathvariant=\"normal\">&#x2032;<!-- \u2032 --></mi>\n</msup>\n. I think we can close this because the infrastructure for \\begin and \\end.  We'll leave the other issues open that deal with specific environments.\n. https://github.com/Khan/KaTeX/pull/268 will help a little bit with implementing any new command in KaTeX, but it doesn't provide a clear path forward in this case.\n. @mici- no ETA.  I think this one would should be pretty easy though because overline is already in place.   Maybe someone can put together a PR for this.\n. I found http://www.orcca.on.ca/~elena/ORCCA_MathML2002_WebPoster.htm, but I haven't actually tried it.. @omidh28 what package do you use to get support for these numerals?. @HosseinAgha has been working on a way to support this in https://github.com/Khan/KaTeX/pull/1269.. @danielhollas this change was made to support https://github.com/HosseinAgha/persian-katex-plugin.  We'll need to update our version KaTeX on khanacademy.org and then figure out how to load persian-katex-plugin along with the necessary fonts.  Do Pashto and Urdu use the same script?. We should try to add \\kern b/c it's used in quite a few different commands.\n. I added \\kern to the list of missing horizontal spacing commands in https://github.com/Khan/KaTeX/issues/164.\n. It would be better to link to https://github.com/Khan/KaTeX/wiki/Function-Support-in-KaTeX so that people know what's supported and what isn't.  Also, stating that \"KaTeX uses MathJax syntax\" is a little weird.  It would be more precise to say that KaTeX uses TeX syntax, but I feel like that's already covered in the first line of the README which states: \"KaTeX is a ... library for TeX math rendering\"\n. I added a link to the wiki page with the list of commands.  If people are looking for information on syntax then we could link to some TeX and/or LaTeX resources.\n. I'm closing this b/c I think it's been addressed.  @dt1973 please reopen if you think we should add more information to the README.md.\n. This is fixed in v0.8.0.. I think this is going to be difficult because some of the symbols don't exist in the fonts that come with most browsers.  Also, even though browsers support a common set of fonts like Arial, Times New Roman, Courier, etc. the metrics can actually differ between operating systems, e.g. Courier on iOS is quite a bit wider than Courier on other systems.  I'm sure there are other more subtle instances of this.  Lastly, if a particular glyph doesn't exist in one font then some operating systems will substitute it from another font which will have different metrics.\nI'm going to close this for now.  @bguiz what's the use case for using common fonts?  Maybe we can look at the problem from a different angle.\n. > We don't use widths at all in KaTeX's calculations.\nI made that realization at one point and then forgot.  Thanks for reminding me.\n. Closing in favour of https://github.com/Khan/KaTeX/issues/164.\n. @scottdraves if you disable the throwOnError option then KaTeX will render the unsupported source command in red.  See https://github.com/Khan/KaTeX#rendering-options for details.\n. After doing a little research it appears that we're missing glyph 0x78 from cmsy10.  This should be relatively easy to fix by:\n- [ ] updating https://github.com/Khan/MathJax-dev/blob/master/fonts/OTF/TeX/makeFF\n- [ ] following the instructions in https://github.com/Khan/KaTeX/tree/master/dockers/MathJaxFonts\n- [ ] updating https://github.com/Khan/KaTeX/blob/master/metrics/mapping.pl\n- [ ] running make metrics\n- [ ] updating https://github.com/Khan/KaTeX/blob/master/src/symbols.js\n. Added in #1110.. Support for \\mathrm should be coming shortly.  See pull request https://github.com/Khan/KaTeX/pull/132 for details.  In the meantime I would suggest using dx.\n. Cool.  Just need to change the single quotes to double quotes.\n. @flying-sheep I like the idea of auto-generating symbols based on existing \"replace\" symbols and just adding them to the symbols dictionary.  It doesn't cover every unicode char, but it's a good start.  Would you be able to create a pull request that automatically adds entries to symbols based on existing entries?  I think it's more maintainable than adding aliases manually, people don't have to grab the unicode character when adding a new entry.\n. I created a jsfiddle that displays the glyphs for all of the \"replace\" symbols using the unicode character specified in symbols.js: https://jsfiddle.net/047yzexz/1/.  It seems like most are the correct character, but a few are showing up as boxes which is probably because the default font doesn't support those.\n. http://www.unicode.org/Public/UCD/latest/ucd/Index.txt should contain all of the names for every unicode entry.  Did you want the data to verify those glyphs are being displayed as missing?  I'm confident that everything will check out, but it's good to be sure.\n. @flying-sheep the hyphen is in the jsfiddle and maps correctly to the minus sign.  In terms of verify that everything maps correctly, including the missing glyphs, it might be easier to just add the code to do the mapping and then programmatically create KaTeX layouts for each glyph in that list, add them to a page, and check that each pair has identical symbols.\n. I think we just need to exclude those from the list because they have special meaning.  If we come across a _ or ^ it should not be parsed as a symbol.\n. @qbolec I was going to create a pull request containing the those symbols which appear in only a single family, but I haven't got around to it.  Unfortunately '\u22c5' appears a few, see https://github.com/Khan/KaTeX/pull/261#issuecomment-114395676 for details. \n. Cool.  I'm glad to see this back.  I was a little worried when I saw you close the other pull request this morning.\n. Have you signed a CLA yet?\nIf not, please see https://github.com/Khan/KaTeX/blob/master/CONTRIBUTING.md#cla.\n. @gagern Thank you for this pull request.  It looks like you have some lint errors.  Please have a look at those.  You should also write some automated tests as well as image comparison tests.  Please have a look the /dockers/Screenshotter folder for instructions.  Also, you'll need to sign a CLA.  See https://github.com/Khan/KaTeX/blob/master/CONTRIBUTING.md#cla for more details.  All of these things are required before merging.\nWe would like the output of KaTeX to match TeX as much as possible.  Here's a link to the TeXBook: http://www.ctex.org/documents/shredder/src/texbook.pdf.  \n@xymostech should be able to answer your question about whether to output tables column-wise vs. row-wise.  As for knowing about the height and/or width of its boxes, it should have enough information to calculate both because we have glpyh metrics for everything.\n. @gagern I think it's a good start for the katex-specs.  Can you add tests for nested matrices as well as embedded fractions using \\over within the matrices?  Parse tree comparisons are a bit finicky because if something changes then it's a lot of work to redo them.  There's a few tests that look at some of the trees.  I don't think anything more comprehensive is worth the effort.\nThe nice thing about the screenshot tests is that if you change things in the tree but it still renders the same then it still passes.  Only create screenshot tests when you're happy with the layout, although I wouldn't mind seeing a couple screenshots here in this thread.\n. @gagern I'm going to do a more thorough review this weekend.  In the meantime, if you have time, focus on the layout.\n. Please have a look at https://github.com/xymostech/KaTeX/commit/422c77b147e81785ab5d47d52b4dcf6b7e33135e, in particular buildHTML.js and environment.js.  The reason why we're not merging that branch in is because we discovered a bad interaction with infix operators such as \\over and @xymostech hasn't had time to work on it.\nThat's unfortunate that the TeXBook isn't more elucidating in this situation.  There's a reference in the commit to page 153 of \"TeX for the Impatient\" that may be more helpful.  Here's a link that book (hopefully it's the same version): http://www.gnu.org/software/teximpatient/.\n. I just saw your screenshots (I should've scrolled up sooner).  We definitely want to match the delimiter sizes.\n. @gagern I cloned your repo as well as the other repo and have the two branches in separate working folders so I can compare them and see if I can help figure out the cause of the layout differences.\n. \nThe correct rendering is on the right.  On the left, the vlist is too high and there's not enough space between the 1 and the 2.  As for actually positions, using the default font size the vlist child containing the 1 should be at top: -0.52778em; as opposed to top: -0.61em; and the 2 should be at top: 0.67222em; instead of top: 0.59em;.\nAnother interesting thing that probably doesn't matter is that the order that vlist children appear in the DOM is reverse.\n. @gagern I'm surprised that LaTeX's rendering isn't centered.  I just assumed that is should be centered.\nI was able to modify your branch to reproduce @xymostech's layout.  Getting the delimiters to be the right size is accomplished by increasing the height and depth of the span returned by buildHTML::array(array, group, options) by adding baselineSkip - 1.0 to each.  \nIt's interesting that LaTeX overlaps the \\dfrac{8}{8}s.  Personally, I feel like increasing the gap would make for better rendering, but let's stick with replicating LaTeX's behavior.  I'll make a branch with the contents centered and the other spacing (for posterity).\nHere are a couple of screenshots with the increased delimiter size (1.52ex, and 2.17ex):\n \n. I pulled the baselineSkip - 1.0 number from environments.js on xymostech's branch.  Note: this should only be added for the matrix environment and not the array or align environment.  We'd also like to support the align environment because it's used heavily at Khan Academy, but I wouldn't worry about it b/c there's enough other stuff going on in this pull request.\nAs for the issue of infix operators, I think maybe parseExpression could be modified to accept multiple tokens to break on.  Also, it seems like instead of calling parseExpression after we see \\begin{array} we should probably have a parseArray function so that it can recursively call parseExpression using & and \\\\ as tokens to break on as opposed to processing the array later in decomposeArray.\n. > Found my mistake. Now I'll only have to get docker up and running, and then I'll be able to take some snapshots. But not today.\nExcellent!\n. The mode and environment dictate which tokens to break on, e.g. when inside \\text we shouldn't break on & and when we're in \"math\" mode but not inside an \"array\" environment & should cause an error.  \nHard coding this inside parseExpression() would require us to put logic to deal with a particular environment and/or mode inside parseExpression().  Changing breakOnToken to breakOnTokens gets us what we need with minimal modifications to the rest of the codebase.\n. I tried hardcoding it, but there's a few errors that appear in the tests.  Here's the code that I used:\nParser.prototype.parseExpression = function(pos, mode, breakOnInfix) {\n    var body = [];\n    while (true) {\n        var lex = this.lexer.lex(pos, mode);\n        if ([\"}\", \"]\", \"&\", \"\\\\right\", \"\\\\end\"].indexOf(lex.text) !== -1) {\n            break;\n        }\n        var atom = this.parseAtom(pos, mode);\n        if (!atom) {\n            break;\n        }\n        if (breakOnInfix && atom.result.type === \"infix\") {\n            break;\n        }\n        body.push(atom.result);\n        pos = atom.position;\n    }\n    return new ParseResult(this.handleInfixNodes(body, mode), pos);\n};\nHere are the resulting errors which I haven't had time to look into:\n```\nFailures:\n1) A close parser should not fail\n    Message:\n      ')]?!' failed parsing with error: KaTeX parse error: Expected 'EOF', got ']' at position 2: )]\u0332?!\nStacktrace:\n  Error: ')]?!' failed parsing with error: KaTeX parse error: Expected 'EOF', got ']' at position 2: )]\u0332?!\nat Object.<anonymous> (/Users/kevin/KaTeX/test/katex-spec.js:229:28)\n\n2) A close parser should build a list of closes\n    Message:\n      ')]?!' failed parsing with error: KaTeX parse error: Expected 'EOF', got ']' at position 2: )]\u0332?!\nStacktrace:\n  Error: ')]?!' failed parsing with error: KaTeX parse error: Expected 'EOF', got ']' at position 2: )]\u0332?!\nat getParsed (/Users/kevin/KaTeX/test/katex-spec.js:26:18)\nat Object.<anonymous> (/Users/kevin/KaTeX/test/katex-spec.js:233:21)\n\n3) A close parser should build a list of closes\n    Message:\n      ParseError: KaTeX parse error: Expected 'EOF', got ']' at position 2: )]\u0332?!\nStacktrace:\n  ParseError: KaTeX parse error: Expected 'EOF', got ']' at position 2: )]\u0332?!\n\nat new ParseError (/Users/kevin/KaTeX/src/ParseError.js:29:16)\n  at Parser.expect (/Users/kevin/KaTeX/src/Parser.js:86:15)\n  at Parser.parseInput (/Users/kevin/KaTeX/src/Parser.js:112:10)\n  at Parser.parse (/Users/kevin/KaTeX/src/Parser.js:100:22)\n  at parseTree (/Users/kevin/KaTeX/src/parseTree.js:14:19)\n  at getParsed (/Users/kevin/KaTeX/test/katex-spec.js:28:12)\n  at Object. (/Users/kevin/KaTeX/test/katex-spec.js:233:21)\n  at Timer.listOnTimeout [as ontimeout] (timers.js:112:15)\n4) An optional argument parser should not fail\n    Message:\n      '\\frac[1]{2}{3}' failed parsing with error: KaTeX parse error: Expected 'EOF', got ']' at position 8: \\frac[1]\u0332{2}{3}\nStacktrace:\n  Error: '\\frac[1]{2}{3}' failed parsing with error: KaTeX parse error: Expected 'EOF', got ']' at position 8: \\frac[1]\u0332{2}{3}\nat Object.<anonymous> (/Users/kevin/KaTeX/test/katex-spec.js:1343:35)\n\n``\n. @gagern please note, these failures are for the code without your changes.  I'm on my personal computer and I don't have a copy of your repo, but I assume that the failures would be similar.\n. UsingparseExpressionmight be more difficult that than I originally thought.  The problem is that we we want each cell in the array to be parsed as a separate expression.  These are delimited by&(and rows by\\).  At the same time we wantparseExpressionto return when it it hits a\\end.  The only problem is that we can't tell the difference betweenParseResults in the middle of the array andParseResults at the end.  In order to getparseExpression` working correctly in this situation we'd have to have it return which token it's halting on.\nI suppose another approach would be to modify handleInfix to handle the & and \\\\ when inside certain environments.  It would be nice if we could call decomposeArray array first, then we could call handleInfix on each of the cells.\n. > ] is a special case, since it's an ordinary symbol except when parsing an optional argument.\nThat makes sense.  Removing it and keeping breakOnToken for that case fixed the failing test cases.\nI had a look at your last commit and it seems like that should work with infix operators.  Can you write some tests to verify that this is now the case?\nI like how parseImplicitGroup cleaned up.\n. I'm glad to hear that infix is working.   Thank you for all of your hard work on this.  \nI work on OS X as well and was able to use the docker.  If you have an old install of docker, please upgrade.  It fixes some issues when doing network communication between the host and the vm.  I'm not sure why we went docker and not phantomjs.  I do know that different versions of libraries leads to different results.  I spent some time trying to automate the snapshotting using travis-ci and I had to install a very specific version of freetype to get the results to match.  I would definitely be in favor of testing harness that requires less setup as long as we can get consistent results across platform b/c not all devs are working on OS X.\n. We've had trouble with the reproducibility of  Lap.  If some of the character positions are off vertically by a couple of pixels please ignore that test and don't commit that file.  Whenever I run that test it's slightly different from the reference file.  That's something we need to look into.\n\nIn LaTeX an inner matrix set in a cell with \\scriptstyle is nevertheless full-sized. \n\nYou're talking about nested matrices, that might be used for tensors, right?  I don't think we're too concerned about this particular use case right now.  Let's put a pin in this for now and we can deal with this in a future change set.  Once we merge this in maybe you can create an issue for the non-compliant behavior you've described.\nCreate screenshots for the undisputed behavior as suggested.  I assume by this you mean non-nested arrays and matrices and an example of infix operators being rendered correctly.\n. That looks pretty good.  I was talking with @xymostech and she says that we forget to put some space around fractions.  It's a separate issue so don't worry about it.  Could you check what happens when sizing commands are used inside the environment?  Even if the output doesn't match LaTeX's output for all different sizes, as longs as the rendering does something reasonable it should be okay.\n. > (It might have been even nicer if that post had given me some kind of credit, for creating the image or for finding the issue.)\nSorry about that.  I've amended the issue to give credit where credit is due.  I'm curious about how you managed to line things up.  Was there a lot of manual work creating that image?  I'm curious b/c it would be nice to have an easy way to compare KaTeX output against LaTeX output for a variety of things.\n\nIf you have an idea of where this is coming from, I'll not investigate this myself any further just now.\n\nI don't think this was introduced by your code nor is fixing it within the scope of this pull request.  It's a separate issue.\n\nBut that would mean we're testing for some deliberate deviation from LaTeX, and I thought that I should restrict the screenshot to the undisputed behavior.\n\nThe screenshot test is for undisputed behavior and I think it's fine as is.  I was interested in determining whether or not using \\small or \\Large returns something reasonable, i.e. each cell is basically where it should be relative to the other cells, or whether it blows up and cells appear opposite of where they should be or they're intersecting the delimiters (or something crazy like that).  Sorry I haven't had time to play around with the recent changes that's why I was asking.\n\nIf you don't insist, can this be merged? A CLA for me should have arrived by now.\n\nI checked our spreadsheet and we did indeed receive a CLA from you.  Thank you.\nI understand your eagerness to get this merged.  We're excited about these changes as well.  There are some code style changes that should be made before merging.  The style guide encourages writing code the blends in with the surrounding code.  This makes it easier for other people working on the project to grok your code which makes it more maintainable in the long run.\nEnvironments are essentially the same as the entries in functions.js, except their handler methods should also some parsing.  See how duplicatedFunctions are defined in functions.js.  In particular look at the handler method for \\\\begin and \\\\end.  It's this is bound to a Parser instance so it has access to the lexer as well as any parsing methods needs.  Lastly, look at parseFunction in Parser.js, specifically this line: var result = functions.funcs[func].handler.apply(this, args);.  This is how the handler gets access to the Parser instance.\nPlease follow this pattern.  I have to admit that using apply(this, ...) is a little cryptic, but once it's in place, it will be very easy for people to add other environments because it will look similar to how functions are implemented.  If you have any questions about how to make these changes let me know.\nThere are some other more minor nits, but this is the big one.\n\n(By the way: I'm also working on rendering KaTeX to HTML5 canvas. Is that of interest to the project? If so, I'll post a pull request once I'm reasonably satisfied with things.)\n\nAwesome!  I was thinking of doing myself at some point.  I'm not sure how useful it would be to Khan Academy, but I can see why people would want this.  I have some ideas on this but I think that the discussion would be better served in a separate issue.\n. I tried out some different size commands inside a matrix and the output seems reasonable.\n\\begin{pmatrix} \\Huge{1} & \\Large{2} \\\\ \\small{3} & \\tiny{4} \\end{pmatrix} produces:\n\n. @gagern I agree with a lot of what you're saying here.  It might be good to revisit some of these design decisions.  Could you open a separate issue so that we can continue this discussion there?\nEverything looks good to go.  We'd like to have a clean history.  Can you squash this into a single commit?\nThanks so much for this pull request.\n. @gagern Thank you for addressing all of @xymostech's concerns.  I think it makes sense to separate the commits like you've done.  LGTM.\n. @qbolec The first one definitely looks like a bug.  The second one however is a duplicate of https://github.com/Khan/KaTeX/issues/48.  If you build from source it should work.\n. Interestingly a = log_\\frac{1}{2}9 works fine.\n. LaTeX also throws an error on \\log_\\sqrt{3}9.  In this case I would say MathJax's behavior is incorrect.  Since we'd like to match LaTeX behavior whenever possible I'm going close this as \"won't fix\".  \n@qbolec Sorry, you'll have to add some extra braces around the \\sqrt.\n. Fixed by https://github.com/Khan/KaTeX/commit/ce99abd1f209b49680910fb9a93a7a45c0025f25.\n. Credit goes to @gagern for creating this image and finding this issue.  I really like idea of these images diffs to compare KaTeX output to LaTeX.\n. I noticed that the our fraction bars aren't wide enough in some cases when I was working on \\cfrac, see https://github.com/Khan/KaTeX/pull/135.\n. I think https://github.com/Khan/KaTeX/issues/37 could be handled in a similar fashion.\nI just noticed my note about \\def\\oneover{\\frac{1}}.  To handle this situation, if temporary Parser is expecting more tokens when it comes to the end of the expanded input stream it switches over to its parent's lexer.\n. I think something simple like defineCommand(\"\\\\operatorname\", \"\\\\text{lim}\\\\,\\\\operatorname{sup}\");.\nI think we should probably have ways to to define global macros and per parser macros.  defineCommand for the former and @gagern's suggestion of passing a map to render for latter.\nI'm not sure what the benefit of having JS API for construction the definition of the macro.  Maybe someone can provide an example where providing the TeX definition as a string would be more complicated than a JS API.  Also, TeX syntax is well defined so using that would hopefully mitigate versioning issues.  \nIf we're missing basic commands that people need to implement commands on top of we should implement those using the current system and then they'd automatically be exposed to users both for direct use and within macros.\nIn terms of performance aspect of defining macros with a TeX source string, we could store the parsed string as a tree of ParseNodes and clone that whenever the command is used.\n. > Can we safely do so?\nIt might be tricky to get this right.  It's probably best to not do this optimization until we know whether any optimization is necessary.\n. Maybe a stack of input streams.  When we hit a macro we push its expansion onto the stack.  When the parser grabs the next token it's always the next token in the input stream at the top of the stack.  If it hits the end of an input stream, it pops that input stream off the stack.  If there are no input streams left to pop then that's EOL.  The lexer would have to be updated to deal with the stack of input streams, but this should work with the changing modes in the parser.\n. @gagern awesome progress!  Can you test a macro like this?\n\\def\\oneover{\\frac{1}}\n\\oneover{x}\n. I'll have a closer look at the diff this evening.\n. @edemaine @gagern is anything blocking us for being able to implement \\def and \\newcommand. It seems like \\def would probably be easier b/c it doesn't support optional parameters.. Now that https://github.com/Khan/KaTeX/pull/1309 has landed we're getting closer to \\def and \\newcommand, thanks @edemaine.  I assume the difference between \\gdef and \\def is that if \\def is used inside a group, that whatever it defines is limited to that group and then afterwards, it either becomes undefined or the previous version definition becomes active.  This suggests that entries in the macros dictionary should instead be stacks.  The interesting part will be knowing when to pop things off those stacks b/c we don't want to push a copy of macros every time we enter a group.\nOnce \\def is implemented, \\newcommand seems relatively trivial.  We just need to check the commands doesn't already exist.  Not sure how hard the optional parameter aspect of this would be.\nOne thing that's interesting of about the current implementation is that we have multiple dictionaries for different things: macros, functions, symbols, environments, but it seems like these should actually all be in the same lookup table.  In TeX, \\def allows users to redefine commands so KaTeX should do the same.. It's awesome to see how quickly this coming along.  I checked out the branch and gave it try.  The rendering seems blurry compared to the HTML.  It might have something to with being on a retina device.  Also, there was some clipping going on, but I think adjust the size of the canvas to match the bounding box of the output should fix that.\nCanvas:\n\nHTML:\n\n. @gagern I'd like to be able to do hit testing when using the canvas renderer.  This is for a personal project, but I think that other people might find that ability useful as well.  The code generates a flat data structure which is okay for select individual atoms, but makes it impossible to select groups.  I'm going to take a stab at refactoring the code this weekend so that CanvasRenderer.protoype.prepare returns a nested data structure as opposed to appending to this.outList.\n. @gagern I think I'll create a second renderer base on your implementation.  This will make it easy to compare the two approaches.\nOn another note, I tried using webfontloader with some success.  It doesn't recognize the KaTeX_Size fonts as being loaded.  The browser shows that they're loading fine.  I'll file a bug for this tomorrow. \nI added this script tag to canvas.html:\n<script src=\"https://ajax.googleapis.com/ajax/libs/webfont/1.5.10/webfont.js\"></script>\nand this code at the bottom of canvas.js:\n```\nvar activeCount = 0;\nWebFont.load({\n    custom: {\n        families: ['KaTeX_AMS:n4', 'KaTeX_Main:n4,i4', 'KaTeX_Math:n4,i4', \n            'KaTeX_Size1:n4', 'KaTeX_Size2:n4', 'KaTeX_Size3:n4'],\n    },\n    fontloading: function(familyName, fvd) {\n        console.log(\"loading: \" + familyName + \" \" + fvd);\n    },\n    fontactive: function(familyName, fvd) {\n        console.log(\"active: \" + familyName + \" \" + fvd);\n        activeCount++;\n        if (activeCount === 8) {\n            init();\n        }\n    },\n    fontinactive: function(familyName, fvd) {\n        console.log(\"inactive: \" + familyName + \" \" + fvd);\n        activeCount++;\n        if (activeCount === 8) {\n            init();\n        }\n    }\n});\n```\nHere's what dev tools shows in the network tab.\n\n. Found the issue:\nhttp://stackoverflow.com/questions/6879469/google-typekit-webfont-loader-does-not-detect-non-ascii-fonts\n\nI'm one of the developers of the webfontloader. We are currently using an ASCII string to detect whether or not a font has loaded. So if your font does not include the characters \"BESbswy\" the webfontloader won't be able to detect it. We're working on adding support for configurable test strings (so you can include some characters from the Unicode range your font supports.) I've opened an issue for this on the webfontloader repository (https://github.com/typekit/webfontloader/issues/104).\n\nProblem solved with this minor change:\ncustom: {\n        families: ['KaTeX_AMS:n4', 'KaTeX_Main:n4,i4', 'KaTeX_Math:n4,i4',\n            'KaTeX_Size1:n4', 'KaTeX_Size2:n4', 'KaTeX_Size3:n4', 'KaTeX_Size4:n4'],\n        testStrings: {\n            'KaTeX_Size1': '()[]',\n            'KaTeX_Size2': '()[]',\n            'KaTeX_Size3': '()[]',\n            'KaTeX_Size4': '()[]'\n        }\n    },\n. I was just thinking that it might be good to use this as a fallback for browsers with DOM rendering bugs.  See https://github.com/Khan/KaTeX/issues/45 for some examples.\n. So I added @spicyj's fix for retina displays and it looks good on Firefox and Safari\n\nbut Chrome is messed up\n\nI tried rendering \"(\" from KaTeX_Size2 and KaTeX_Size3 in a scale canvas and it just gets them wrong.  Not sure why Chrome doesn't like these fonts.  :disappointed: \n. I think we want to keep KaTeX pretty lean so canvas related code and any use of WebFontLoader would probably end up in contrib/.\n. It should be relatively easy to return the internal DOM representation.\n. It would definitely need to include a warning that this is an unstable internal data structure, use at your own risk.\nI can't see us include canvas support as part of the default build.  I think it makes sense as an optional module.\n. If we replace DOM rendering with canvas rendering then it makes sense to include in the build, but I think there's a lot of questions to answer before we get to that state.  The perf concerns of measureText could be addressed by including the horizontal glyph metrics.  I'm also concerned about the wonky rendering that I was seeing in Chrome (version 44).  It would be nice to have an intermediate layout rep.  We kind of already do with the groups, but parts of it (like the vlists) get specified at the same time that our internal DOM rep gets created.\n. @spicyj what was the original reason for DOM rendering over Canvas rendering?\n. @marcianx there are a couple of things that I'm concerned about with this and don't have good answers for at the moment:\n- although there aren't a lot of changes, this does increase the size of the KaTeX bundle, it would be preferable for this to live in contrib (not a big change in and of itself)\n- it relies on knowing about the internal structure returned by buildHTML... ideally we'd have a more display agnostic representation of the layout. @marcianx I've closed this PR for now but the rebased code lives on in the canvas branch.  #376 is tracking an intermediate representation.. @rrandallcainc the PR uses the Canvas API to measure the glyphs to get the width of each as it lays them out.  Another approach which is may be performant is to grab widths for glyphs beforehand.  Running make extended_metrics will generate a version of src/fontMetricsData.js that contains widths for all of the glyphs in the KaTeX fonts.  We'd still need to measure at runtime the width of any unicode characters we don't have metrics for.. @rrandallcainc cool.  I'm looking forward to seeing what you come up with.. I'm going to close this PR since whenever we get to supporting canvas it will require substantial rework.  It's linked to in a number of other issues.. Being implemented in https://github.com/Khan/KaTeX/pull/132.\n. I was planning on implementing it that pull request but it turned out to be more complicated that being a simple alias \\mathrm.\n. I didn't realize that \\displaystyle was being added automatically.\n. @henzestplus which .tfm files did you use?\n. I had a look at the pull requests and realized what a silly question that was to ask.  Sorry about that.\nThere's some info https://github.com/Khan/KaTeX/issues/15 on how to go about updating the fonts.  I'm going to be looking into later this week to see if I can add \u00df, \u00e6, \u00c6, \u0153, \u0152, \u00f8, \u00d8 to our fonts.  I'll see if there's a way to add the euro symbol as well.  Once we get the symbol into the font the rest should be pretty straight forward.\n. I'm going to close this in favor of #1107 which covers missing monetary indicators in general.. I feel like ParseNode and ParseResult should probably be merged into one.  The main goal of ParseResult is to add position information to each node.  Libraries like esprima and acorn which parse JavaScript into an AST add location metadata to each node as code is being parsed.  It seems to work well.  Having the start and end locations of each node might open up some interesting use cases.  It would have the more immediate effect of removing the need for positions.  It also removes an extra layter of indirection in many places.\nI like the idea of having parser, lexer, name, and mode on this and passing in the args from the latex function as is... with optional arguments coming at the end?\nThoughts @xymostech @spicyj ?\n. @gagern I'm in agreement with @xymostech.  The only reason why I suggest the other approach is that it wouldn't have induced as many changes.  Since https://github.com/Khan/KaTeX/pull/262 already touches a lot of the code base we may as well do the right thing and make handlers less magical.\n. Also, it's good to differentiate context from options.\n. Closed by https://github.com/Khan/KaTeX/pull/356.\n. I think this makes a lot of sense.  We'd probably want to do this for symbols as well.  I'd like to hear @xymostech's and @spicyj's thoughts on this.\n. Why use a different pattern in this case?\n. I was curious more than anything else.  Since there aren't other arguments in this case, it does look quite verbose (and non-idiomatic) to write groupType(\"genfrac\", function(\u2026) { \u2026 });.\n. @gagern conceptually, I think the changes are fine.  I think the main issues with https://github.com/Khan/KaTeX/pull/262 is that it's a huge pull request and we have limited resources.  Splitting it up makes it easier to review, but it still takes time.  We should really add something to CONTRIBUTING.md that states our preference for small pull requests and our rationale behind it.\nPlease see https://github.com/Khan/KaTeX/issues/266#issuecomment-115564114 for more details.\n. I believe what was discussed here has been implemented.\n. Adding support for \\mathbf in https://github.com/Khan/KaTeX/pull/132.\n. Not yet.  I still need to get https://github.com/Khan/KaTeX/pull/291 and https://github.com/Khan/KaTeX/pull/292 merged in.\n. > When working with string literals for these beasts, keep in mind that many of these letters are outside of the BMP, so they are encoded using two UTF-16 code units in JavaScript.\nWe should probably use https://github.com/zloirock/core-js#ecmascript-6-string--regexp to deal with this.\n@gagern I'm trying to understand the use case for implementing this.  What's your workflow such that these characters would end up in a KaTeX string?\nI do think we should do NFD, but that feels like it should be separate issue.\n. @ronkok is there anything left to do on this?. I think it's fine the way it is.  There are already other module level variables we're defining like mathTextSymbols, etc. and it's not like we're exporting these variables.\n. @flying-sheep In terms of the tests you could probably just verify the parse tree of one against the other.  Have a look at some of the tests that use getParsed.\n. I can review this later today.\n. @spicyj It looks like support for unicode code points in unicode-math depends on the font being used with LaTeX.  http://mirror.its.dal.ca/ctan/macros/latex/contrib/unicode-math/unimath-symbols.pdf shows the symbols that are in each font when using unicode.  Since we don't support using different fonts would it make sense to restrict ourselves to those entries that are marked with either a (p), (l), or (a)?  These indicate support in pure TeX, LaTeX, and amssymb.\n. @flying-sheep I originally thought the parse tree would be enough, but it isn't until later in buildHTML and buildMathML that the command gets replaced with the symbol so that's where we to do the check.  Here's what checking the HTML would look like:\ndescribe(\"Unicode symbol output\", function () {\n    it(\"should be match for unicode greek symbols and commands\", function () {\n        var builtCommand = getBuilt(\"\\\\sigma\")[0];\n        var builtUnicode = getBuilt(\"\\u03c3\")[0];\n        expect(builtCommand.value).toBe(builtUnicode.value);\n        expect(builtCommand.classes).toBe(builtUnicode.classes);\n    });\n})\nCompare classes here should address @gagern's concerns about having the \"characteristics\" match.  We should also check the MathML.\nOnce we've decided which symbols we'd like to support we should probably have a test that verifies all of them.  There should also be a test that verifies that symbols we don't support don't work.\n. @flying-sheep excellent detective work.  I love the table you've created.  With regards to the UP TACK vs PERPENDICULAR debate, I had a look at the font's repetoire in the Font Book utility on Mac OS X and it reports U+22A5 as UP TACK, but it doesn't show PERPENDICULAR.  To get to the bottom of this I'd probably use freetype to look up the glyph for U+22A5 and U+27C2.  I'm pretty sure they map to the same glyph.  I'll give this a try tonight.\nIn terms of mappings I think U+27C2 should map to \\perp while U+22A5 should map to \\bot.\nReference: https://en.wikipedia.org/wiki/Up_tack.\n@spicyj which tex.stackexchange question are you referring to?\n. So I was wrong.  I thought the font would map both code points to the same glyph.  Although it is possible for fonts to do so, this particular font does not.  It only contains one mapping and that mapping is for U+22A5.\nHere's a gist of how I determined this: https://gist.github.com/kevinb7/fa5e9ed342c928a0f31f.\n. Why don't we just avoid the ones that have duplicates for now?  That still covers most of them.  As for the number classes we don't support \\mathbb yet, but when we do (hopefully soon), we can add those as well.  \nI agree we should eventually add the U+27C2 code point to the fonts (it should be included in all KaTeX_Main variants), but that feels like a separate pull request.  I'm not sure how the fonts were created in the first place.  We could use FontForge to edit the .ttf files and then convert those files to .woff, .woff2, .eot.\n. Providing unicode support via an option sounds like a good way to roll this out.\n\nWe could even add tests to ensure that whenever a symbol gets added, that fact is recoded in some list, and whenever it gets removed again, something will complain loudly.\n\nIt's always good when tests complain if something gets removed.\n. @flying-sheep noticed this when running make metrics today.  \nThe glyph named Delta is mapped to U+0394.\nBut its name indicates it should be mapped to U+2206.\nThe glyph named Omega is mapped to U+03A9.\nBut its name indicates it should be mapped to U+2126.\nWe should probably handle those mappings manually.  I think we probably want both U+0394 and U+2206 to map \\Delta and both U+03A9 and U+2126 to map to \\Omega.\n. Sorry I misread the message.  It's doing the right thing.  U+2126 Ohm sign probably needs a gap between it and a preceding number.  Looking at siunitx sounds like a good idea.\n. Any work to implement parts of siunitx should be under a new pull request.\n. > I'm not against having an option that enables experimental unicode support that's likely to change in future versions, but if we go down that route I'd like to also have some path for getting a stable subset into the core features too, or else for clients who need stability this feature won't give any benefit.\nWould this be an acceptable path:\n1. put this behind a flag and merge it\n2. move uncontested symbols from behind the flag\n3. where there are sensible mappings from multiple code points to multiple commands, make those mappings and move them from behind the flag, e.g.\n   - U+27C2 => \\perp and U+22A5 => \\bot\n   - U+03B5 => \\varepsilon and U+03F5 => \\epsilon (https://en.wikipedia.org/wiki/Epsilon)\n4. do some more research into the implementation of unicode-math\n   - http://mirror.its.dal.ca/ctan/macros/latex/contrib/unicode-math/unicode-math.pdf\n5. apply new learnings to move some or all of the remaining symbols from behind the flag\nQuestion: is there a difference between \"ord\" and \"ord alt\" or \"rel\" and \"rel alt\"?\n. There's that much code here so a rewrite wouldn't be the worst thing, but it'd be nice to get this merged sooner rather than later.  I recently discovered that some of the content creators at KA are using unicode in their content so it would be nice not to have to fallback to MathJax just because there's a unicode theta in the math code.  I'd like to hear @spicyj's thoughts on the path I proposed first.\n\nFurthermore, they'd suggest a different data representation for the unicode mapping data tables we'll be needing.\n\nCouldn't we iterate through module.exports in the new version of symbols?  Why would the data representation need to change?\n. > How do we come up with a list of uncontested symbols?\nI was thinking that would just be everything that wasn't in the table that @flying-sheep posted. \n. @flying-sheep can you hide your changes behind a flag?\n. > Firstly, instead of iterating over all the symbols, I'd integrate this with the defineSymbol function\nThis makes sense instead of doing a second pass.\n\nSecondly, we'd need extra data: which symbols are automatically enabled, which ones only if a flag is given?\n\nAt least at the start of the proposed path forward, it should be pretty simple.  I think it's going to take some time to work our through 1\u20135.  Merging in 1 on its own should have too much of an effect on the pending refactorings.\n. @flying-sheep that sounds good to me.\n. @flying-sheep in re-reading parts of the discussion it probably makes sense to see which unicode symbols MathJax supports.\n. Even though I think this is moving in the right direction, I was hoping to have more discussion in https://github.com/Khan/KaTeX/issues/255 and https://github.com/Khan/KaTeX/issues/256 before getting a PR.  Sorry for not explicitly stating that.\n\nSince both of these modify a pretty large portion of the code, and will likely conflict with many other things which are currently work in progress, I believe that it makes sense to keep these two commits together, so that people will only have to manually resolve conflicts on a larger scale once.\n\nI was hoping to merge https://github.com/Khan/KaTeX/pull/132 before doing any refactoring to avoid exactly this problem.  In the future please let us know before hand if you are planning to submit a large PR that might conflict with other peoples' work so that we can coordinate better moving forward.  \nThank you for suggesting git merge -s recursive -X ignore-all-space origin/master.  Hopefully it will make resolving merge conflicts easier.\nAs for the changes themselves, I have a couple of comments:\nThere should probably be some convenience functions that set up the context objects and call the handlers.  If we had a Function class, each of the function objects it could have an invoke() method which the convenience methods would call.  Since we can't have a class called Function we could use Command which I think makes sense seeing that's what they're called in TeX.  Here's a sketch of what that might look like (some details have been omitted for the sake of brevity):\n```\nfunction Command(name, props, handler) {\n    this.name = name;\n    // extract props and handle defaults\n    this.handler = handler;\n}\nCommand.prototype.invoke = function(context, args, positions) {\n   context.func = this.name;  // should probably probably rename func => name (or cmdName)\n   this.handler.apply(context, args, positions);\n};\nfunction defineCommand(names, props, handler) {\n   for (var i = 0; i < names.length; ++i) {\n      module.exports[names[i]] = new Command(name, props, handler);\n   }\nParser.prototype.invokeCommand = function(cmd, args, positions) {\n   var context = {\n       lexer: this.lexer,\n       parser: this\n   }\n   cmd.invoke(context, args, positions);\n};\n```\nIf we combine ParseNode and ParseResult then the positions parameter would disappear.\nI saw that you re-ordered some of the methods in buildHTML.js and buildMathML.js.  It would make it easier to review if the order was maintained when changing how they're defined.\nI prefer define to declare because it seems to fit more with TeX vocab, i.e. \\def.  Also sym should be defineSymbol so that it follows the pattern.  It's longer but it should still be uglified to a single char.\nIt's nice to see a decrease in our minified code size.  With regards to shrinking fontMetrics, if we convert each entry to an array we should see an appreciable decrease in size as well.\n{\"8672\":[-0.064,0.437,0,0]}\ninstead of \n{\"8672\":{\"depth\":-0.064,\"height\":0.437,\"italic\":0,\"skew\":0}\n. > But now you have something explict to discuss.\nI always find talking about code easier.\n\nBut, more severely, having the handler become part of a Command class and still have its this method not refer to that object, that feels even more weird than the this for current handlers.\n\nPoint taken.  The problem I was attempting to solve with this suggestion was getting rid of the need to pass information that the objects in funcs already have, e.g. name.  Here's how that might be accomplished without introducing a class.\nfunction defineCommand(names, props, handler) {\n   var data = { ... };\n   for (var i = 0; i < names.length; ++i) {\n      data.name = names[i];\n      module.exports[names[i]] = data;\n   }\n}\nParser.prototype.invokeCommand = function(cmd, args, positions) {\n   var context = {\n       lexer: this.lexer,\n       parser: this,\n       name: cmd.name\n   }\n   cmd.handler.apply(context, args, positions);\n};\n. @gagern sounds good.  Can you make the change suggested in https://github.com/Khan/KaTeX/issues/255#issuecomment-114224682?\n. Thanks for listing these out:\n- I don't think we've reached consensus on what needs to be done with https://github.com/Khan/KaTeX/pull/261.  There's also not a lot of code there so rebasing shouldn't be too hard.\n- I've closed https://github.com/Khan/KaTeX/pull/146.  They were minor refactorings and not critical.\n- https://github.com/Khan/KaTeX/pull/140 can be done better with macros.  Adding a special not group handler to buildTree.js is not ideal.  I'm closing it as well.\n- I think there's only a minor change I have to make with https://github.com/Khan/KaTeX/pull/135, but we can let this one sit.  If the codebase shifts underneath it not a big deal b/c there's not much code to rebase.\n- I've already asked @xymostech to prioritize review of https://github.com/Khan/KaTeX/pull/132.  The plan is to finish the checklist this weekend and have her look at it next week.\n\nOf course, as long as you agree with the general direction of the code changes here, I can build my next improvements on this, and then rebase them onto the version that eventually makes it into master.\n\nI would strongly urge against this approach.  If there's a refactoring that's necessary for a particular feature then that refactoring should be part of the pull request for that feature.  Large refactorings which make the code generally easier to understand or easier to work with should be done independently and if possible should be split into smaller logical pull requests so that they're easier to review.\n. @gagern sounds good.  I've responding in more detail in https://github.com/Khan/KaTeX/issues/266#issuecomment-115933756.\n. @gagern I'm not particularly keen on doing multi-browser testing.  We are aware of a few rendering issues, but for the most part we haven't seen that many rendering complaints.  I think the main purpose of the snapshot tests is to make sure that the layout doesn't change.  I think it would be unlikely that a change would result in a layout change in a different browser but not in Firefox.  If we saw a higher incidence of rendering issues and different renderings in different browsers then it might be worthwhile to pursue this.  Here's the list of rendering bugs that I remember.\n- https://github.com/Khan/KaTeX/issues/45 (stock Android browser, not much we can do)\n- https://github.com/Khan/KaTeX/issues/40 (square root is wonky)\n- https://github.com/Khan/KaTeX/issues/60 (square root is wonky)\n- https://github.com/Khan/KaTeX/issues/248 (equals sign hinting could be better)\n. @spicyj good point.  We probably just care about screenshots.  I've used one of their live sessions in the past, but debugging was a bit of pain.  It's easier to use http://dev.modern.ie/tools/vms/ for that.\n. Thanks to @spicyj we now have an open source account with BrowserStack.\n. @gagern I think this is resolved thanks to all of your work in this area.\n. > Case A is what we currently have in the repo. B is what I get most of the time. But on both OS X and Linux I get A occsionally, though still rarer than B.\nIt might be worth investigating using webfontloader instead of an arbitrary timeout.  If there are two SHAs that are very similar there are a few options:\n- accept either\n- re-run a number of times to get the one we want\n- ignore tests that are not determinate and have a human do the comparison\nI'd rather have some automation than no automation.\n\nChrome rendering so far always was visually indistinguishable from B, even though its SHA-1 was 642f9e6693c2ee5634f4279086c29231d876580f so there must be some very slight differences.\n\nCould be some minor anti-aliasing difference.\n. I think we should do the simplest thing start with for Lap and just warn if there are differences with a message directing people to have a look at the image.  We can maybe post the two acceptable images somewhere online.  I'm not sure how to exclude files when using git diff --exit-code. \nIt would be nice if we could use docker on travis-ci because I'd rather not have to maintain a separate way of generating screenshots and all the issues that entails.  Good news is that someone got it working so maybe we can too: https://github.com/moul/travis-docker.\nI like having the images even if they take up space because if they do change for whatever reason it's pretty easy to look at the before and after images.  If we just have the hash, getting the before image takes a little work.\n. @gagern thanks for dealing with Lap.  I finally had a good look through the code.  I think it could be made simpler and more maintainable by using some libraries.  Please have a look at:\n- https://github.com/apocas/dockerode\n- https://github.com/niegowski/node-pngjs\n- https://github.com/substack/minimist (options parser)\nFor options parsing, could you use explicit switches (minimist handles this really well).  Something like:\nnode screenshotter.js --browser firefox --container ss --exclude file1.png, file2.png\n. I noticed you used pngparse in https://github.com/Khan/KaTeX/pull/268, maybe that could work here too.\n. I'd like to start using minimist for our cli app as well.\n. > I'm not sure what we'd gain from using dockerode, and how. Do you want to replace the outer shell script, screenshotter.sh?\nI didn't look closely enough at the docker commands in screenshotter.js.  After taking a closer look I realized that you're communicate with selenium running inside docker using screenshotter.js which lives outside docker.  Why not run screenshotter.js from inside docker using the same technique that was used for screenhotter.py?  I think this would simplify things quite a bit.\n\nI'm also not sure about what we'd gain from parsing the file at the PNG level. \n\nI guess parsing the whole .png just to get the width and height is a little overkill.\n. nomnom looks really nice, go with it.  I like how you can give it help strings.  We should adopt it in cli.js as well.\n\nBecause the selenium images don't contain node.\n\nThere are selenium images that contain node:\n- https://registry.hub.docker.com/u/selenium/node-chrome/\n- https://registry.hub.docker.com/u/selenium/node-firefox/\n\nFurthermore, creating files from within the docker can cause problems with access permissions, as recently discussed.\n\nGood point.  Can you give the -p option a try?  It maps a host port to a port in the docker image.\ndocker run -d -p 4444:4444 ${image}\nThis should allow you to connect to selenium via localhost:4444 without having to look up the IP address etc.  I tried it a while when I was trying different things to automate taking screenshots.  I ended up not using it because the images were the wrong size.  I like how your code adjusts the size of the browser window until the screenshots are the right size.\n. > I think you are mistaken.\nYes I am.\n\nThe by far more complex part of the whole setup is figuring out our own IP address with respect to the Selenium container, i.e. the address to enter into the Selenium-controlled browser to load content from the KaTeX development server running outside Docker.\n\nCouldn't we forward port 7936 and have the browser inside docker connect to localhost:7936?\n\nThat wouldn't be avoided as easily, since so far I haven't seen a way to bind a certain port on the outside machine to a local port inside the container.\n\nIsn't that what -p does?\n\nProblem with this setup is that the port number 4444 might already be taken on the current machine. With the randomized port numbers, we are independent of such things, and could in theory even run tests for different browsers in parallel one day.\n\nI've had issues with this in the past.  It'd be interesting to run the tests in parallel.  Maybe we could use https://github.com/joeferner/node-openport to solve the open port issue and -p to avoid having to figure out the IP address.  Note: I haven't actually used node-openport.\n. @gagern you're correct.\nI wanted to see what things would look like using dockerode so I coded it up in https://github.com/kevinb7/KaTeX/commit/3b545125d6af1e891ec07d5cce4e79a3c9c6d7e6.  Let me know what you think.  I still have to handle the case where port 4444 is already in use, but that should be pretty easy using node-openport.\n. Please dis regard that last message.  Using a random port is a superior solution.  I tried getting this to work with dockerode by failed.  I kept getting ECONNREFUSED when trying to talk to selenium.  I assume that's the problem that tryConnect() overcomes.\n. It's weird because when I specified a specific port to open with dockerode I was able to get selenium to connect in the callback to docker.start without having to wait.\n\nBut right now I'm worried about cleanup after an interrupt, so I won't take that route just now.\n\nGood point.  We'd have to add some extra signal catching code.  Right now if you do a ctrl-c it exits screenshotter.js and screenshot.sh continues to run and stop the container?\n. @gagern thanks for trying that change out. I didn't realize that the these libraries only have async interfaces.  All of this would be much easier if we could use async/await, but since we can't (yet) let's go with the simplified version that you suggested in your comment above.\n. Looks good.  Putting the Chrome changes in a separate diff sounds good.\n. Awesome!  Thanks for the pull request.\n. I checked and the font we're using doesn't actually have a code point for U+27C2.  What ends up happen (at least on my computer) is that the browser defaults to a font that has this endpoint.  The result is the following rendering which is not what we want.\n\n. > Environments, which call to the parser to read their body, could simply say \u201chey, parser, give me the next expression\u201d, instead of \u201chey, parser, give me the expression at the location you gave me and in the mode you gave me\u201d.\nI'm all for simplicity and \"get the next expression\" is definitely simpler.\n\nConsidering possible downsides, I believe the most likely downside is that changing the mode now means ensuring that you change it back again as well.  Since the only place where we change the mode is in parseSpecialGroup, I think it should be possible to get that right in that one location.\n\nThat would be my concern as well.  Good to know we only do that in one location.\n\nIf the normal mode of operation is reading one token after the other, then I believe (although this is a bit of a gut feeling) that it might help in implementing macros (#250).\n\nI think in general having simpler methods such as nextExpression will help implementing future features.\n\nWould you be interested in a modification along these lines? If so, I'll write that, but I'd like to hear whether it has a chance of getting merged before I start on this endeavor.\n\nI think we should park this one for now.  I'd like to reduce the number of pull requests we have in flight.  I'm afraid that if we add more pull requests we'll end with more stale pull requests.\n. > Yes, we have quite a few of them around, and I keep adding to them\u2026\nThe problem with this is that we have limited resources when it comes to reviewing them. @xymostech, @spicyj and myself are all busy working on other projects at the moment so we don't have a lot of time to review lots of pull requests.\n\nOn the other hand, I'll need macros (per site, defined in JavaScript as part of the options object) pretty soon, and as I said, I think that should build on this simplification here.\n\nYou've proposed a couple of other refactorings in addition to this.   Unfortunately we won't be able to get all of that reviewed and merged \"pretty soon\".  Are any of the refactorings necessary to implement macros?  If there isn't then I would suggest implementing macros first.  If not, then let's try to do the minimal refactoring in the short term.  In long term I would like to see more of these refactorings happen.\n\nWould you want me to not post a separate pull request for this, but keep it private until I can post a combined pull request for this and macros?\n\nIn general we'd like to go in the other direction when it comes to pull requests.  I talked with @xymostech about https://github.com/Khan/KaTeX/pull/262 and we'd prefer if that was split up into separate reviews for functions, environments, and symbols.  The smaller the pull request, the easier it is to review and the faster it can get merged.\nBefore doing that though, please think about whether any of those changes are necessary for macros.  Lastly, I'd like to merge https://github.com/Khan/KaTeX/pull/132 before merging refactorings.  I'm going to finish it up this weekend, but it will still take some time to review.\n. > Well, if I have macros in a local fork for a while, that should be fine as well, as long as I do have them. Reviewing and merging should be a long term goal, but since I already require the render-to-canvas stuff, I'll be on a local fork for the forseeable future in any case.\nThat makes sense.  I'll probably set up a \"canvas\" branch to cherry pick changes.\n\nSince my priority is having a maintainable solution for our project, and merging back to KaTeX comes second, I'd go for the clean solution even if getting that back in will take longer.\n\nSounds like a plan.  There's not rush on our end.  Your addition of environments have really kicked started things again.  We want to continue the momentum at a pace we can sustain.\nThe progression you've suggested makes sense.  @xymostech set up a trello board.  I'll add the things that we've talked about here to board and send you a link.\n\nSo my subsequent pull requests would have to be linearized, one after the other, so when you find the time to review a bulk of stuff you might run out of pull requests after the first approved merge. And you should be aware that splitting #256 by unit would temporarily result in inconsistent style.\n\nYeah, I'll review them in sequence as they come in.  I can put them on a separate branch before merging them to master if that helps.\n. @gagern here's a link the the trello board: https://trello.com/b/P5DWbSuR/katex-roadmap.\n. @gagern Thanks for providing a preview.  I probably won't have time until Wednesday to give this a serious look.\n. The main benefit is being able to sequence work and tell what's being worked on with a bird's eye view.  Zenhub provides the same thing but within github thus avoid synchronization issues.  Unfortunately, it can only be used with Chrome b/c it requires a Chrome extension/plugin that's why we're using trello and putting up with the overhead of syncing.  Anyways, here's what the board looks like right now:\n\nI'd like to try to get the number of issues down to a more manageable level (1 page), but in the meantime I think this is helpful at least for me to get the big picture.  I don't think there's going to be all that much discussion on trello.  Most of the comments just link back to github issues or pull requests.\n. > Example: \\text{sin}^2 The } to end the group gets consumed and the next token is lexed before the mode returns to math.\nIt seems like we should switch modes right after we encounter the }.  Maybe line 557 in Parser.js should be this.expect(optional ? \"]\" : \"}\", false);?  I'll have to check the code out and play with it a bit before I can give a more definitive answer.\n. And line 595 should be this.expect(\"}\", false); and then consume after this.mode = outerMode; on line 576.  I just had a quick look so that may be completely wrong.\n\nNot sure how to adapt this to the mode switch before a group, though, if that group is a single symbol\nIs this 2^\\text x an example of this or does it need to be an explicit group with 1 character?\n. I think it makes sense to do https://github.com/Khan/KaTeX/issues/297 first.  Hopefully there isn't too many tests to write.\n. @gagern have you added all of the state you wanted to add to the parser?\n. Sounds good.  I had a quick look at https://github.com/Khan/KaTeX/commit/75aad6677b719db4f0fe58283cc5485f51fe2057... moving the color group, size group, etc. into the parser makes a lot of sense.\n. This is awesome!  I was trying to the square root rendering again and started comparing against LaTeX manually and noticed that the amount space under the hrule differs quite a bit between KaTeX and LaTeX.  I'll post some screenshots later, but I was wondering if you noticed any differences for the square root test case?\n. @gagern I was look at Sqrt thanks for posting SqrtRoot too.  Thanks for posting all of the screenshots.  It's nice to know where were at in terms of LaTeX compliance for current features.  I agree we can just regenerate these as needed.  When we improve any of the renderings we'll update the screenshotter files.  I'm not sure we need to store the -pdflatex.png images either.\n. The difference is that we use *-firefox.png as reference files to identify unintended changes in the rendering.  We do this by running the snapshotter and seeing if there are any differences in the files according to git.  This process should be automated so that we can fail the build if there are difference, but right now it's a manual process.\n\nIf there are, either the code should be fixed so the rendering matches or the reference file should be updated because we fixed/improved the rendering.\nOn the other hand *-pdflatex.png images aren't being compared against old version of themselves so we don't need to have them in the repo.\n. I was looking through some of the -pdflatex.png renderings and some of them are clipped.  Do you know why this happening?\n. @gagern I would like merge this in.  I'll try to do a better review next week.  Could you add some comments in texcmp.js to describe what's going on?  I assume that you're using the fft to align images.  \nI was looking at https://github.com/gagern/KaTeX/blob/diffs/test/screenshotter/diff/SizingBaseline.png and realized that the reason why it's so off is because LaTeX doesn't support sizing inside math.  And with respect to https://github.com/gagern/KaTeX/blob/diffs/test/screenshotter/diff/NestedFractions.png I see that it's lining things up with the bigger fractions and b/c our spacing is wrong the LaTeX screenshot gets clipped.\nCould you make it so that the bounding box of the diffs is the union of the bounding boxes of the images being compared?\nAlso, if there are things that we know are not going to yield invalid comparisons, i.e. sizing commands inside math, can skip those examples?\n. ~~I think the reason why the exponents are a bit off is b/c LaTeX actually stretches them horizontally a bit (or uses different glyphs).~~I really need to re-read the thread before posting.\n. > Without the actual images, right? Will rewrite when I find the time.\nThat's right.  Whenever you have time.\nI think @spicyj meant expanding the bounds of the KaTeX images.  After alignment we should know the difference in bounds and be able to pad either image accordingly.  We probably want to keep the existing reference screenshots as is so this would be another set of temp images.  These images could be used for flipping between and generate visualize diffs without clipping any of the renderings.\nThe clipping doesn't need to be perfect for the images to be useful as indicated by the number of new issues opened due to rendering differences.  I think we should merge it and improve the clipping later.\n. @gagern Awesome, thanks!  I'll try to review this evening.\n. @gagern the new changes look great!  Squash it and I'll merge it.\n. Thanks for the pull request.\n. @azotova It uses {array}, but {cases} is a separate environment.  Could you open a new issue for it?\n. Request for {cases} environment in https://github.com/Khan/KaTeX/issues/278.\n. This is fixed on master.  Still need to do a release with it.. Nice visualization.  TeX source for reference:\n\\vec{A}\\vec{x}\\vec x^2\\vec{x}_2^2\\vec{A}^2\\vec{xA}^2\n. Our implementation of \\color is pretty close to \\textcolor from the \"color\" package.  That package also define \\color, but it behaves differently with everything after the command (until end-of-group) becoming that color.  I'm not sure how much work it would be to support sizing commands in math mode in LaTeX.  \nIn general though, I don't think this is a priority for Khan Academy.  I do however think we should try to move our \\color implementation closer to what the \"color\" package is doing and add \\textcolor.\n. If we create an .sty file it would be cool if we could use it in test.tex.  Maybe by exporting an appropriate value for the TEXINPUTS environment variable.. You bet.  There could be a color parameter too.\n. Showing other errors might be useful, but it might be annoying to see stuff like Expected '}', got 'EOF' at the end of rendering as you're typing.\n. That shouldn't be too difficult.\n. I missed this in the README:\n\nKaTeX supports all major browsers, including Chrome, Safari, Firefox, Opera, and IE 8 - IE 11.\n. Agreed.  Eventually would like to see https://github.com/Khan/KaTeX/issues/103 as well.\n. After thinking about it putting it directly in the README would make it cluttered.  How about we:\n- [x] link to that wiki page from the README\n- [x] update the wiki page\n- [x] update CONTIBUTING.md to make sure people update the wiki when adding new stuff\n- [ ] make it part of a code review checklist?\n- [ ] auto-generate a list of supported commands and save it in COMMANDS.md and link from the README to COMMANDS.md\n. I think KaTeX is big enough that we should probably have better documentation as part of the homepage and more actively direct people from the gitHub.com/Khan/KaTeX to the homepage.\n. We don't support \\not yet.  For the time being use \\neq instead of \\not=.\n. The cases environment looks really useful, especially for piecewise functions.\n. Implemented by @gagern.  This is now on master, but isn't yet part of an official release.\n. I think the spacing issues are an existing issue as evidenced by https://github.com/gagern/KaTeX/blob/diffs/test/screenshotter/diff/Text.png and should be dealt with separately.\n. Most of our code uses camelCase.  Can you update this to match?\n\nutils.def makes me think we're defining something, can you change to something like this?\nvar defaultIfUndefined = function(value, defaultValue) {\n   return value !== undefined ? value : defaultValue;\n}\n\\arraystretch is a global macro.  Within the scope of an environment defining \\arraystretch shadows the outer global AFAICT.  We probably should have a unified global lookup table at some point, but in the meantime can you add a TODO to do something better for \\arraystretch once we have macros?\n. Thanks for the pull request.  Despite the issue with \\text, the rendering looks really good!  Can you add a parse test for the new environment?\n. > defaultIfUndefined is a pretty long name, imo. If you can think of something shorter which is sufficiently clear as well, I'd be happy about it. If not, I'll go with this for now.\nI haven't thought of anything better so let's stay with def.\n. @gagern I checked out the branch and tried a couple of different piece-wise functions with it.  I've never used the case environment before.  I mentioned it before, but the output looks really good.  This is almost ready to merge, just a few things left:\n- [x] The names def's parameters should be more meaningful\n- [x] JSON string in ss_data.json without URL encoding\n- [x] A test to make sure the new environment parses\n- [x] postgap: 1 should use fontMetrics.metrics.quad\n. Awesome, thanks!\n. Looks good.  Thanks for adding these.\n. Updated the wiki to include the new symbols.\n. @tokiloki are you running into any issues in particular?\n. I'm going to close this for now.  Please re-open if you run into issues that require debugging the source.\n. It is sad.  I would've preferred --recursive.\n. > Looks like you've been keeping it up to date too, awesome!\nI've been trying too.  It's still missing stuff.  At this point it'll take me less time to write some that generates a page with all the commands that it will to find and add the remaining missing pieces.\n. Nice detective work!\nI'm surprised we don't support \\degree yet.  I think the low hanging fruit here is \\pounds, \\degree and \\maltese.  Could you create a pull request for these?\nIn terms of the combining marks we support the math mode commands but not the text mode, see http://tex.stackexchange.com/tags/accents/info.  We could probably have a separate issue for accent support in text mode.  From the raw output it looks like the combining marks are being used by KaTeX_Main, but not the other fonts.  I'll update the test cases in https://github.com/Khan/KaTeX/pull/132 to include accents.\nNot sure what's up with the Typewriter font.  Not sure how important typographic quotes are.\nI didn't realize that en-dash was -- and em-dash was ---.  I guess this would be a relatively easy change in the lexer, if we see one - peek ahead to see if there's another.\n. Sounds good.  I'm spend some more time on https://github.com/Khan/KaTeX/pull/132 this weekend and try to finish it up.\n. We're also missing DOUBLE VERTICAL LINE \\u2016 which is used for \\Vert, \\lVert, and \\rVert.\n. Actually we already support \\Vert which uses \\u2225 PARALLEL TO.  We should probably use \\u2016 for \\Vert et. al. (including \\|) and \\u2225 for \\parallel.\n. I think ^\\circ is a bit big compared to the degree symbol.  @spicyj Is the a reason for using ^\\circ instead of the actual degree symbol?\n. I had a look at gensymb and defines \\degree in the following way:\n\\renewcommand{\\degree}{\\ensuremath{^\\circ}}\nsiunitx on the other hand defines it as \\degree{\\SIUnitSymbolDegree} and \\SIUnitSymbolDegree as character 176 which is the actual \\degree symbol.\n. \"various combining or modifier diacritics\" were added in #802 for text mode and we already had \\dot, \\breve, \\grave, etc. for math mode.. I just tried installing the KaTeX via npm using npm install katex and got version 0.4.3.  What version  do you see if you run npm install katex?\n. @monokeroslun I hope everything's working for.  I'm going close this.  Please re-open if you're still having issues.\n. > Have you also considered fonttools? As far as I can tell, it is pure Python, with no dependency on freetype, which should ease portability quite a bit.\nDefinitely worth investigation.\n. I ran ./mapping.pl | ./extract_tfms.py > test.json a few times and the skew for character 305 was 0.0 each time.\n. Nice find.  ~~We should be using cmmi10 for both \\imath and \\jmath because these glyphs don't exist in cmr10.~~ cmr10 has \\imath and \\jmath, they just appear in a different location.\nhttp://www.math.union.edu/~dpvc/jsmath/symbols/cmr10.html\nhttp://www.math.union.edu/~dpvc/jsmath/symbols/cmmi10.html\n. > Right now I think it's easier to complain in the normal course of operation and not have a unit test\nThat makes sense.\n. We might still want to have tests to make sure the check is picking up issues that we think it should.\n. Sorry, \\imath and \\jmath from cmmi10 should map to Main-Italic and \\imath and \\jmath from cmr10 should map to Main-Regular.\n. > Have a look at my metrics branch to see the direction I'm going.\nLooks good so far.  I left a couple of comments on some of the commits.\n. \\x3A looks kind of a like the dot product operator because it's in the middle of the cell, but that maybe be because it doesn't have much height.  Are there specific unicode code points you're looking to map them to?\n. This is fixed on master, but isn't in the current release.\n. I'll rebase this on to https://github.com/Khan/KaTeX/pull/303.\n. @xymostech this is ready for review.\n. Hopefully it's not just my install of TeX.\n. I decided to leave out the commands defined using \\DeclareOldFontCommand.  I'd like to land the basic font commands first and tackle rm, etc. later.\n. > To check that they affect nested groups but the effect does not leak past the end of the group.\nI meant to do that and forgot.  Thanks for reminding me.\n. I'll have to wait until part 1 gets merged before I can tackle \"test that fonts don't leak past the end of the group when nesting\".\n. @xymostech let me know when you've sneaked it in and I'll rebase and redo the screenshots.\n. A couple of the screenshots are differently, although they don't look different when using github's onion skinning thingy.  In particular these are LimitControls-firefox.png and UnsupportedCmds-firefox.png.  They're probably suffering from the subpixel differences fixed in https://github.com/Khan/KaTeX/pull/324.\n. @xymostech this is ready for review now.\n. @xymostech no worries.  Thank you.  I'll rebase later today.\n. @xymostech this is ready for review.\n. @xymostech I cleared out some of the repeated code.  We're probably parsing/build trees more often then we have to in the tests, but since the tests run quick I'm not overly concerned.\n. @xymostech awesome, thanks!\n. I think the links to wikipages are good.  Sometimes it's hard to know where to look for information so having the link right there is nice.  If we forget to update a link and it becomes stale then someone will complain.  \nThe TeX Book makes reference to \"Vcent atom\", does this correspond the vertical centering of content within cells?\n. I see you're example is testing the spacing before and after the array.  Can you rebase this?\n. Thanks for the pull request.\n. @gagern I started contributing to this project after first public release so I don't have have context for this, but @xymostech should be able to answer your question.\n. @gagern could you add some comments to symgroups.js?  In particular an example of what the output from pdflatex looks like and which pieces of information the regexes are extracting from it.  It doesn't have to be the whole output, just the pertinent bits.\n. Sorry for taking so long to have a serious look at this.  I checked out the branch an ran it.  I was a little confused by the output until I looked at the source.  The output should be labelled more clearly.  Also, it would be nice if there was some indication of what action the operator should take.  After running it looks like it's telling me that we're not defining the spacing commands correctly, but I can't really do anything about those unless we define \\glue, \\mskip, and \\kern.  In the case of symbols with the incorrect type it's very clear that those can and should be fixed immediately.  Maybe the default could be to only show incorrect symbol types and with a certain option it would also show incorrect definitions.\n. This is looking pretty good.  Could you make one minor change and then squash it?  The variables expected and actual are reversed from what I would expect.  Could you rename them to katexType and latexType or something like that?\n. I like how you split it up.  Thanks!\n. @gagern sorry for not responding earlier.  I saw this one morning and thought \"this is awesome\" and then I got side-tracked.  @xymostech big improvement, especially with fractions.  LGTM ^_^.\n. I think we'll find lots of uses for makeNullDelimiter.\n. Thanks for the pull request.\n. This has been addressed in #732.. Good idea.  We should probably split katex-spec.js into separate spec files at some point.  Coverage is a good idea too.\n. Thanks for the pull request.  I updated the wiki.\n. If no one's filed this bug against TeX, maybe we should.  Is Knuth still giving out rewards?\nOn a more serious note, my preference would be to allow the delimiters in question.  Hopefully this encourages TeX and LaTeX to fix this issue.\n. @gagern thanks for the pull request.  Can you add the new delimiters to the wiki?\n. If we're using the same packages then we should get the same results.  It might make the tests longer to run if a whole bunch of separate packages have to be installed.    Is there an easy way to get the list of packages from the docker images?  Would we be able to run both the Firefox and Chrome tests in one travis-ci job using LD_LIBRARY_PATH?\ntravis-docker seems pretty easy to get up and running so it might be worth spending a little bit of time investigating that.  If it looks like it's going to take lots of time then we should look at other options.\n. Nice find.\n. I was going to open an issue for this.  Thanks for doing so.  We should dump the data into file with a .json extension, then we don't have to worry about module.exports =.\n. Interesting.  I will check out the branch this weekend.  @xymostech @spicyj will probably know more about some of these discrepancies.\n. It looks good.  I have an appointment soon so I'll have another look this afternoon in case I missed something, but I don't foresee any big changes here.\n. @gagern other than a few minor changes it looks good.\n. @gagern thanks for the fixup and comments.  Autosquash the fixups and I'll merge the commits.\n. @gagern for some reason github isn't notifying me when commits change.  Can you post a quick message when things are ready to merge after rebasing?\n. Thanks, and thanks for the pull request.\n. My understand is that express 4 is not compatible with express 3 so we'll probably have to make changes.  In terms of checks to run, we'll want to run all of the tests and make the server sill works.\n. Unless there's a good reason to migrate we probably shouldn't bother.  I'm going to close this.  If there are dependencies that should be upgraded for specific reasons like bug fixes or features that we need let's deal with those on a per case basis.\n. Here's a lit of projects that depend on KaTeX: http://registry.npmjs.org/-/_view/dependedUpon?group_level=3&startkey=%5B%22katex%22%5D&endkey=%5B%22katex%22%2C%7B%7D%5D&skip=0&limit=1000\n. http://stackoverflow.com/questions/18796890/how-do-you-find-out-which-npm-modules-depend-on-yours suggests some tools which wrap this REST API.\n. http://khan.github.io/react-components/#tex\n. http://algebra.js.org/\n. gitter\n. http://acko.net/blog/mathbox2-pt2/\n. https://github.com/ianarawjo/KaTeX-iOS\n. We could start with the README b/c it's low cost but high visibility (compared to the wiki).\n. https://docs.gitlab.com/ee/user/markdown.html#math. https://beta.observablehq.com. https://www.npmjs.com/package/katex has a list of npm packages which depend on KaTeX.. The page now exists, we just need to add links from above to it.  See https://github.com/Khan/KaTeX/blob/master/website/pages/en/users.js.. We should add khanacademy.org too. \ud83d\ude42 . @ylemkimon I'll look up that info and will post it here.. I hadn't even noticed it was broken.  Thanks for fixing it.  :+1:\n. > But I think on the whole KaTeX is behaving like LaTeX with the amsmath package loaded, right?\nI think that's a fair assumption.  We should probably explicitly state that somewhere.\n. @danielhollas we haven't done any work to support automatic localization of TeX content.  TeX is very much a presentation layer and doesn't really know what \\div is other than it's a binary operator.  I think automatic localization is outside the scope of KaTeX.  We provide access to the parse tree, but it's still in flux so use at your own risk.  That being said if you or anyone knows of a project that does automatic localization of TeX let me know.. This is really nice.  Thanks for doing this.\n. This is ready to squash and merge.  Thanks for the minor tweaks.\n. Awesome.  Thanks for the pull request.\n. Thanks for catching this.\n. The .yaml file is much cleaner nice.\n. We could just not have a whitelist and then we don't have to worry about updating the whitelist.  I'm going to merge this as is, we can always remove the whitelist later if it's cumbersome.\n. @gagern thanks for the pull request.\n. Thanks for raising this.  Good summary, perfect for TDD.  If code in the MDN link passes these tests (except 3) we just adopt that.\nI'm not sure why we're doing e.__proto__ == katex.ParseError.prototype in main.js.  It seems like if we can guarantee pe instanceof ParseError then we could just use instanceof here.\n. Now that we're using babel to compile our code it should be pretty easy to subclass Error.. @spicyj that's too bad.  Thanks for checking.. Although mutating the prototype will slow things down, I'd expect that this would only effect ParseError and so will only occur when there's an error for the code which is the exceptional case.  I'm inclined to close this as won't fix b/c I think we still want to support ES5 only browser.  Please re-open if you feel strongly otherwise.. @Cirran not sure when I'll have time to look at this, but in the meantime you could improve the spacing by putting each line inside a block element like a <p> or <div> or use a list with list-style-type:none;' and adjust the padding/margin as necessary.\n. @Cirran no worries.  I'm going to leave this issue open because we should, at some point, try to find a better solution to this problem.\n. @mbourne I think what you're seeing is a separate issue.  Can you create a separate issue and include which browser/os combo you're seeing this in.  Sorry for not saying something sooner.\n. @edemaine I wonder if we need ajotbetween rows in*matrixenvironments?. I think the spacing issue will get better once we support\\setlengthsee https://github.com/Khan/KaTeX/issues/687.. @JeffEverett thanks for the pull request.  Nice unit tests.\\limitschanges how certain things are rendered so you'll have to update buildHTML.js to handle the rendering.  Changes may also be necessary in buildMathML.js to differentiate between the two styles.  Since this is a new rendering you should add a screenshot test (or modify an existing one).  See dockers/Screenshotter/README.md for details.\n. @JeffEverett just checked out your branch.  The rendering looks good.  I didn't realize that there was already special handling in place for base nodes with alimitsproperty set totrue.  It looks like it was there to handle\\displaystyle\\sum_a^bbut in fact handles allop`s.\nWe should still have screenshot tests for this in place to prevent future regressions.  The screenshot tests should be simpler to run now that we're using pre-made docker images.\nThe MathML output should use <munderover> instead of <msubsup>, but since this is an existing issue (see https://github.com/Khan/KaTeX/issues/198) don't worry about it.\n. @JeffEverett awesome, thanks for the screenshots and thanks for the pull request.\n. Some non-standard commands might not be expressible with just a macro, e.g. \\cssId and \\cssClass.\n. But yes, I agree those that can be expressed as macros should be once that's in place.\n. Now that we have a strict mode, any thing that's non-standard should not be enable in strict mode moving forward.. @DollarAkshay it is being used on KhanAcademy.  Sometimes though we fallback to MathJax for LaTeX commands that we don't handle yet.\n. That's a good idea.  I think we'd want to have a way to preview comments as well so that people can check that their math is right.\n. @JeffEverett thanks adding this.  I think this will be a huge benefit for anyone using KaTeX, especially for interactive typesetting.  Love the screenshots.  There are a few changes that I'd like to see.  Could you wrap the error node in a color node in the Parser?  That way we won't have to add a \"settings\" param to everything in buildHTML and buildMathML.  Also, if the \"error\" node is wrapped in a color node it could just be a \"text\" node and then we won't need a special \"error\" group type handler in buildHTML and buildMathML.\n. Thanks for the pull request.  Can't wait to start using this.\n. I think that's a good idea.\n. @xymostech good catch.  @JeffEverett could you have a look into this if you have some time?\n. @xymostech it looks like this is redefined in amsmath.  pdflatex renders the following document\n\\documentclass{article}\n\\usepackage{amsmath}\n\\begin{document}\n$$ a^{\\dag} a^{\\dagger} x \\dag y \\dagger z $$\n\\end{document}\nto\n. This is a duplicate of https://github.com/Khan/KaTeX/issues/90.\n. @frankandrobot I did have a pull request for this, but a lot of things have changed since then and I'm not sure what the best way to implement this would be now.  If you interested, have a look at https://github.com/Khan/KaTeX/pull/119.  I think if I had to re-implement this I'd avoid the extension mechanism.\n. I don't see a problem with doing this.  Would you be able to submit a pull request?\n. @blaiprat thanks for the pull request.\n. @gagern I noticed there were difference between the chrome screenshots that are in the repo and the ones that I generate locally w/o any changes to source code.  I didn't have time to investigate the different and ended up disabling the chrome screenshots because of this.  Maybe it's the same issue as this.\n. @gagern I've created an issue for it: https://github.com/Khan/KaTeX/issues/325.\n. Closed in preference of https://github.com/Khan/KaTeX/pull/340.\n. https://github.com/Khan/KaTeX/commit/90f9e12df3639633911f651ab8c3e20ff9f66081 contains all of the chrome screenshots which differ ever so slightly which is all of them.  This is on the https://github.com/Khan/KaTeX/commits/chrome_screenshot_images branch.\n. Closed by https://github.com/Khan/KaTeX/pull/340.  Thanks!\n. Good idea.  Thanks.\n. @invkrh we ended adding a wrapper around each equation that would scale to fit and then if the user tapped it would zoom to the normal size and would allow the user to scroll within the container.  It wouldn't not cause the width of the page to expand.  The scrolling part is what @jeffswt has suggested.  The zooming/scrolling are both workarounds for not being able to break long expressions.. @ItsMeSousuke not that I'm aware of.. @xymostech probably knows why we use 1.21em for the default font size.\n. MathJax uses a 116% font size multiplier.  I think we should change our default to be more inline with common fonts.  Since each font has slightly different metrics, people should be adjusting this size to match the font that it surrounds.  Currently there's a global multiplier for all math on the page.  This is fine if the text that sounds the math is the same font everywhere on the page which is probably the most common scenario.  To make a page-wide adjust you should add the following style after the katex.css file:\n.katex {\n    font-size: 1.16em;\n}\nYou may also want to adjust the line-height as well.. I'm marking this as a bug.  I think having a reasonable default out of the box is important.  To avoid breaking existing content we'll want to bump the minor version number (since we're still pre-1.x) and include instructions in the release notes on how people can achieve the previous behavior if need be.. Awesome!  Looking forward to being able to augment matrices \u2013 reduced row echelon here we come!  I'll have a closer look this evening.\n. LGTM.  Can you squash this?\n. @xymostech thanks for the pull request.  @gagern thanks for reviewing.\n. Sounds good to me.\n. @mbourne if you're using fractions in other expressions on your site with other non fraction expressions it might look a little weird.  Have you tried adding space in between lines using the \\\\[3ex] notation @gagern suggested?\n. > I'm sure there's a reason, but the numerator of fractions in KaTeX always seem too high above the fraction bar to me.\nThat's a good point.  It's quite possible that one of those screenshots was using \\displaymode and the other wasn't.\n. Yeah I totally forgot about that.  gitter has a nicer UI though and there's a fair number of people already using the channel.\n. I noticed we already have a link to #katex on CONTRIBUTING.md.  I'll revert this so that we can discuss.\n. Reverting so that we can discuss the merits of gitter vs freenode.\n. @spicyj has discovered that gitter uses KaTeX for math support.\n. \"mentioned in CONTRIBUTING.md\" and a gitter badge in README.md.  I don't know which version of KaTeX they're running.  We could open an issue in their bug tracker whenever we release a new version.\n. Since there doesn't seem to be any opposition to adding a gitter tag, I'm going to add the gitter tag back and update CONTRIBUTING.md.\n. Closed by https://github.com/Khan/KaTeX/pull/360.\n. According to the third answer on http://tex.stackexchange.com/questions/24156/comma-as-decimal-point-leading-to-confusion the siunitx package provides a \\num command which can be used like \\num{1,5} to do the formatting you're looking for.  I think this would be more feasible than having a general configuration option that changes the behavior of ,.\n. In this case you can the bmatrix environment:\n\\begin{bmatrix} 1 & 2 \\\\ 3 & 4 \\end{bmatrix}\n. Thanks for digging into this and fixing issue.  It's weird that only some images would exhibit subpixel rendering.  Here are some screenshots so that people can the before/after for LimitControls.  The reason why all the images changed is b/c the compression changed.\nw/ subpixel rendering\n\nw/o subpixel rendering (still antialiased though)\n\n. @gagern did you notice an appreciable difference in run times?\n. > Things would be really a lot easier if Travis could check screenshots\u2026\nAgreed.  I'm going to be busy moving this weekend and next, but after that I should have some time to tackle this.\nThanks for adding the missing images.\n. The screenshot is good now.  I missed that that screenshot was missing glyphs in https://github.com/Khan/KaTeX/commit/9c2a391ff65a09bec6b82b6b7dad9e67d490cd55.\n. @weidendo definitely a bug.  Thanks for reporting this.  I'll have a look at it this evening.\n. Looks like the greediness should be set to 2 for this.\n. > Or is it simply that any expandable macro gets expanded before the math formula gets assembled\nI'm not sure if there are an exceptions to that rule, but it seems like that would be reasonable default behavior.\n\nshould we try to systematically assign greediness based on whether the function in question is an expandable macro or an unexpandable command in TeX?\n\nDefinitely something worth looking into.\n. I'm not seeing this bug on master which was just released in https://github.com/Khan/KaTeX/releases.  Please re-open if you can repro this.. I will have a closer look at this this weekend.  Looking at the combined diff isn't too bad with ?w=1 https://github.com/Khan/KaTeX/pull/345/files?w=1\n. It's good to have the re-indent as a separate commit for people look at this use a different git tool.  @gagern thanks for splitting up the commits like this.\n. Looks good.\n. Nothing to squash here.  Okay, I'm going to have look at this one over a couple of sessions b/c I want to make sure nothing got changed accidentally.\n. @gagern sorry for taking so long to review this.  Thanks for posting code to automatically compare the symbols from the two commits.\n. Hmm... I probably should've had you squash those.  I'll remember for the next one.\n. Looks good to me.\n. I was sure I had the accents matching the font.  It would be nice to have the spacing matching for the dotless i.  I'll open bugs for these.\n. Where did the numbers for the KaTeX logo come from?\n. > As I wrote in the commit message\nSorry.  I usually only look at \"files\".  I'll start looking at the individual \"commits\" too.  Thanks for the detailed explanation.\n. @utensil I think we'd probably implement things using the progression that @gagern suggested.  The \\tag{} command is useful on it's own and can be used to number equations and is a lot easier to implement.  Automatic numbering is harder, but if tag{} is implemented we can use that functionality when implementing automatic number.\n. @pnsaevik can you post some screenshots?\n. Looks pretty good.  I noticed that the number (1) isn't centered vertically, but that shouldn't be too hard to fix.\n. > I'm sure the vertical alignment of (1) can be fixed, but I'm unsure if I can do it outside KaTeX. Multi-line equation numbering would also be somewhat challenging outside KaTeX.\nAgreed.  This is something that we'd want to add to KaTeX.\n. @zeeshansayyed no updates, but we definitely would like to support \\tag and equation number.. @jdhao #1309 adds \\tag which is a step towards equation numbering.. We probably need a min-width setting in the CSS somewhere.\n. \nI can't repro this anymore on IE in BrowserStack so I assume that it's been fixed.  The screenshot is a little hard to see but even at 4px the vertical separator is still visible.  @xymostech please re-open if this is still happening for you.. Reported by @gagern.\n. Thanks for adding some images.\n. I did some investigating and here and the root cause of this issue is that we're using the non-combining version of these glyphs but the sans-serif and typewriter fonts only contain the combining version.  As a result we weren't locating the correct glyph.  I tried using the combing version instead but the glyph shifted to the left by 0.5em.  This works fine if you only have a single glyph you're accenting, but this is not always the case in TeX.\nSo, in order to solve this we'll have to update the fonts to include a non-combining version of this glyph that isn't shifted to the left.  I left some comments in https://github.com/Khan/KaTeX/issues/237 on how to update fonts.\n. The accent glyphs in the fonts no longer have a horizontal shift.  This change was made in https://github.com/KaTeX/katex-fonts/pull/5 and https://github.com/Khan/KaTeX/pull/1094.  This is still an issue, but could probably be fixed now.. Reported by @gagern.\n. For some reason we add extra margin-right on the preceding character.. @gagern looks good for the most part.  Just a few minor changes and rebasing and this will be good to go.\n. Thanks for making those changes.\n. @daniel3735928559 KaTeX supports \\clap now.  Going to close this in preference of #809.. Sorry, re-opening.  Although that #809 might include some way to render a cursor some people may want to render a cursor without necessarily building a full blown editor.  \\cursor could definitely be added to the 'contrib' folder.. @crepererum thank you for the pull request.  Although these aren't standard TeX commands, MathJax supports this probably for the same reasons that you've outlined.  I'm okay with merging this, but I'd like to hear @xymostech's thoughts first just in case she has any concerns.\n. @crepererum could you verify that \\lt and \\gt work as delimiters, e.g. that \\left\\lt\\frac{1}{x}\\right\\gt produces the same rendering as \\left<\\frac{1}{x}\\right>?\n. @crepererum looks good except one of the lines in the test is too long.  Can you split it so it's on two lines so that we stay within the 80 column limit?\n. @crepererum awesome, thanks!\n. The size of the uncompressed files goes from ~120KB to 50KB.  After zipping them the files were 9KB and 7KB respectively.\n. > Might not make a huge difference post-gzip, though.\nI was thinking the same.\n. @gagern that was it.  Thanks for the refactoring.\n. Nice clean up of the lexing code.\n. This is a little trick because we need to know how wide a layout is.  Currently we let the browser render things and stuff comes out being however wide it comes out.  I've added the ability to optionally generate metrics that include the width of glyphs, but it isn't being used by default.  It was more of an experimental feature that I thought might be useful in canvas rendering to avoid having to ask the canvas to measure each glyph during layout.  Regardless of the original intent of this option, it appears that width metrics will also be use in implementing these commands.\nThe thing the I'm struggling with is how to actually render the braces.  http://tex.stackexchange.com/questions/3488/horizontal-braces-with-xetex-take-too-much-space shows a redefinition of \\upbracefill and \\downbracefill which rotates the braces.  This seems reasonable considering there don't seem to be specific glyphs for these commands.  Since we're no longer supporting IE8 we could use CSS 2D Transforms, support matrix: http://caniuse.com/#feat=transforms2d.\n. This is in v0.8.0.. @gagern I was wondering what your thoughts were about this pull request with respect to https://github.com/Khan/KaTeX/pull/251.\n. I was thinking it might improve the performance if you don't have to measure the width; sounds like that isn't a concern.\nWith respect to differences in kerning pairs, I was thinking of absolutely positioning everything.  Not sure if that's a good idea or not.\n. \\xrightarrow and \\overset should be functions because they accepts a parameter.\n. @Newman101 yes, \\u2192 is the right character.  The arrow's tail grows to match the content positioned above it.\n. There's support for \\xrightarrow on `master right now.  I need to publish a new version to npm which I haven't got round to yet. . This is in v0.8.0.. Closing due to lack of activity.. @utensil use the katex.min.js and katex.min.css served off of khan.github.io is an interesting way to stay current.   I think this should be okay unless we change were these files are located which seems unlikely, but it is a potential failure point.  I think having the code for this in your repo is fine for the time being.  If there are changes we want to make we'll fork it at that point.\nOne thought about the layout... instead of having three colors, it might be better to have three columns: one for the command, one for the code use to generate the rendering, and then the rendering itself (or a a failure message like you have now).\nThanks for signing the CLA.\n. > Should I squash my commits in this branch into one and git push --force?\nYes please.\n. @utensil looks good.  Thanks for the pull request.\n. Closed by https://github.com/Khan/KaTeX/pull/372.\n. @stared cool.  Thanks for the PR.\n. @Newman101 thanks for the pull request.  The link label should be updated.  Also, before we can accept a pull request from you please sign our CLA: http://www.khanacademy.org/r/cla.\n. @Newman101 thanks!\n. It's possible, but it will take some doing because we aren't using any of the fonts that are listed as having these symbols http://www.math.boun.edu.tr/instructors/gurel/symbols-a4.pdf.  You'll have to add some entries to https://github.com/Khan/KaTeX/blob/master/metrics/mapping.pl to add the fonts that contain these symbols and then update symbols.js so that you can use them.\n. Tracking font changes in https://github.com/KaTeX/katex-fonts/issues/21.. @Locercus I'm not sure what's causing this.  We do have metrics for \\blacksquare which is \\u25a0 (or 9632 in decimal), see https://github.com/Khan/KaTeX/blob/a81c4fe78df1b19401883cff4f8af2b1c0f5b033/src/fontMetricsData.js#L206.  If could test it in another browser that would be great.  I have a feeling though that this isn't a browser problem.\n. This is a Linux only bug but it is reproducible.\n. For \\blacksquare we're passing the wrong style to fontMetrics.getCharacterMetrics(value, style); in makeSymbol.  It should be \"AMS-Regular\" but we're passing \"Math-Regular\"... or the metrics should for \\blacksquare should be in the \"Math-Regular\" table.  I'd need to investigate further to determine which it is.\n. \\notin legitimately does not have metrics.  It's in our KaTeX_Math-Regular font files, but it doesn't exist in mapping.pl.  A person would need to have a look at https://github.com/Khan/MathJax-dev/blob/master/fonts/OTF/TeX/makeFF (which is used to generate our font files) to see how \\notin (decimal unicode character 2209) makes its way into the font.\n. Closed by https://github.com/Khan/KaTeX/pull/618.. @jbaayen there's been some work to render to canvas, see https://github.com/Khan/KaTeX/pull/251.  Rendering to other targets is not a huge priority.  We have discussed providing some sort of intermediate representation to make this easier.\n. We had a chat and decided to do a couple of things:\n- simplify ParseNode/ParseResult into POJOs w/ functions that return those POJOs (this is so that we maintain output that can be JSON serialized)\n- audit existing parse node types to see where we deviate from commands being used in chapters 24 and 25.\n. For \\frac commands which generate genfrac nodes, it appears that leftDelim and rightDelim as always null, at least in my testing.  For \\left( \\frac{x}{y} \\right) we wrap genfrac inside a leftright node.  I hope that we can iterate on the parser so that it returns a minimal (or almost minimal) AST.  I'll respond in more detail to the rest of the post later.. I did some experimenting with a possible IR a while back, but had some troubles with the vertical HTML layout b/c I was trying to simplify that.  I think if we use our existing HTML vlist builder it should be fine.  Here's a link to that IR: https://github.com/khan/katex-ir.  I feel like we should clean up our parse tree and HTML build tree (using HAST) first before trying to inject a layer between them.. @spontaliku-softaria you may find the conversation in #892 interesting.\nI think I understand better now what you're going for.  I don't think the term CST really applies to KaTeX's AST, the reason being is that it doesn't encode all information necessary to recover the original input string.  I think what we're talking about is actually two ASTs.  They just describe different things.  KaTeX's AST describes how various primitive commands (encoded as groupTypes in buildHTML.js and buildMathML.js) are nested.  \nThis may or may not be a useful view of the world depending on how you want your editor to behavior.  In the case of genfrac, if a user decides they want a \\choose b or a \\over b, KaTeX will generate a genfrac node.  In either case the user might want to navigate to edit a or b or delete the whole thing.  If there are left/right delimiters a user could modify the delimiters but they wouldn't be able to delete just one.  How these restrictions are communicated to the user and enforced on their input will be up to use as creator of the editor.\nThink about this example, I'm starting to question the need for leftDelim and rightDelim on genfrac nodes.  There's already a leftright node for delimiters.  It would make the AST more regular if we wrapped fractions with a leftright node.  @xymostech @sophiebits what was the rational for treating the left/right delimiters for fractions differently from other uses of left/right delimiters?. @rrandallcainc my rough roadmap for an IR would be:\n- finish adding flow types\n- finish moving functions in functions/ folder\n- simplify the parse tree\n- add intermediate representation\nWhile not all of the steps are strictly necessary I think they will improve our chances of success.  The first two items are in progress changes that are modifying lots of files/code so it would be nice to finish those off before introducing other big changes.  Flow types will also add some safety as we continue to make big changes.\nSimplifying the parse tree I think will making writing transforms from the parse tree to the intermediate representation simpler.\nWe'll also want to figure out what we want the IR to look like.  To start with I think we can build on top of the existing VList by introducing an HList.  We'll also need Rule and Glyph/Atom.  One thing that I'm uncertain of is how to deal with horizontal centering of things, e.g. fractions.  In TeX there's equal glue on either side of the numerator and denominator which results in the numerator and denominator being centered.  If we can figure out a way to use flex-box to emulate this behavior then I think we should be able to move forward with this.  I've spent some time prototyping an intermediate representation in https://github.com/Khan/katex-ir, but I got stuck with how to render glue to HTML.. @rrandallcainc I hadn't thought about it, but I suppose it could.  As long as it has all the information needed to render to HTML and Canvas it should work.. @rrandallcainc I did some more thinking about this and one of the things we'd like to encode in the IR is visual layout of things, e.g. vertical spacing for fractions.  That information would then be used by different renderers for HTML, SVG, and Canvas to produce renderings that look more or less the same.   In this respect, MathML isn't a good fit.. I was thinking about this a bit more.  I think the following data flow might make sense:\nTeX -> parseTree,\nparseTree -> MathML\nparseTree -> IR\nIR -> HTML\nIR -> SVG\nIR -> Canvas\nTo actually make this happen the IR should have the following objects:\n- VLists\n- HLists\n- Rules\n- Glyphs\n- Glue\n- Paths (TeX doesn't have this, but based on how we render stretchy accents, square roots, etc. we need something to model those)\nTo actually start moving towards having an IR, we should look and updating various parts of buildHTML.js and the htmlBuilders in function/*.js to generate IR and then immediately convert it to HTML.  A good starting place might be Glyphs because they're relatively simply.\nGlyphs should track the following data:\n- char index (the unicode character code)\n- fontFamily (roman, sans-serif, typewriter, etc.)\n- fontWeight (normal, bold)\n- fontStyle (normal, italics)\nWhat I'm a little less uncertain on is whether to include class (ord, punct, op, etc.) in each Glyph.  Currently the HTML layout makes use of this information, but for SVG and Canvas layouts we only care about the space between atoms in a horizontal layout.  Moreover, if we want to support setting the value of \\thinmuskip, \\medmuskip, and \\thickmuskip in the future, we won't be able to rely on CSS for setting space between atoms anyways.  My preference here is move away from CSS solutions to more programmatic solutions.  To save space in the markup we can have some general styles for spacing that match the defaults.\nAfter Glyphs we'd probably want to work on Glue next.  This would be used to implement \\kern et al.  To start with, a simplified Glue that only has the desired width and doesn't support fil et al.  \nThe whole implementation sequence might look something like this:\nGlyph, Glue, Rule, Path, HList, Vlist\nBefore starting on Glyph though it might be good to work on replacing our current CSS for atoms with more general \\thinmuskip, \\medmuskip, \\thickmuskip styles.. @spontaliku-softaria rendering is already programmatic.  The only thing that would change is which styles are being applied to atoms.  Also, the renderer would have to look at adjacent atoms to decide which styles to apply.  We definitely want to maintain KaTeX's ability to do server side rendering and to renderToString().\nThis could be implemented by adding a step to buildExpression() in buildHTML.js which inserts Glues of appropriate sizes as needed between atoms as needed.  These Glues would then be immediately converted to <span>s with styles for \\thinmuskip, \\medmuskip, or \\thickmuskip.. I did some experimentation on this a while back.  See https://github.com/KaTeX/katex-ir.  It was based on the approach presented in https://people.eecs.berkeley.edu/~fateman/temp/neuform.pdf which also includes a Box object whose type can be either HBox or VBox.  It wraps HList and VList respectively along with adding additional information about the height, depth and width of the box.  We may end up introducing Boxes as well here.  A scala implementation of the paper can be found at https://github.com/pkamenarsky/formulae.\n@edemaine thanks for raising the concern about slowing down rendering.  I think the slowdown will be negligible at least for render as DOM updates will probably still occupy most of the time.  As for renderToString, my hope is that people would be caching the output for static pages if performance is an issue.  That being said, it's good to know how our performance is being affected by any change we make.  See #1053.\nYeah, multicolumn seems difficult.  It might be easier to do if we use horizontal metrics for everything (measuring the width of things we don't have metrics for as a fallback).. While x/y, width/height, and type is sufficient for rendering to canvas (or SVG), it has a couple short-comings:\n- it would require knowing the width of all glyphs when rendering to HTML, currently we only use glyph width in only a couple of place iirc\n- it doesn't reflect how TeX does things which means when implementing low-level TeX commands we need to more work to translate between the x/y, width/height model\n@rrandallcainc translating from the TeX box model to model you suggesting shouldn't be too difficult.. @Pomax is there specific work that you think should be done for this?\n. I guess we should update the docs at the very least to reflect that IE8 support no longer works.\n. Closing in preference of https://github.com/Khan/KaTeX/issues/380.\n. KaTeX is a group effort.  I think it's important to recognize everyone's contributions.\nJust passing certain symbols though without having proper metrics might work in some case, but there's lots of cases where it wouldn't work.  We need to measure the height when doing vertical layouts but if the math contains only characters where we don't have the height we won't be able to create the proper layout.\n. If you put \\sqrt{\u03b1^\u03b2} we won't know how tall to make the square root.\n. @YakovL for \u03b1\u03b2... we have the metrics because we support \\alpha\\beta....  So we should be able to display the greek characters as is in both math mode and text mode.  For Cyrillic though we'd have to do some more work.\n. We'd need some sort of mapping from Cyrillic characters to latin characters as well as some code that knows to look up the latin character metrics when it encounters Cyrillic characters.\n. @episodeyang with CJK I was worried that we'd need metrics for each glyph, but according to https://en.wikipedia.org/wiki/Monospaced_font it appears that CJK fonts are monospaced which means that we could probably handle them without too much trouble.  We might even be able to do some measurement of glyphs so that we could use whatever font the user is using.  Of course we'd only want to do this measurement once for a couple of glyphs at the start so that we don't affect KaTeX's speed.\n. @cben good point.  I guess we could use the height of an uppercase latin as our guess for the height of CJK and see how that works.  Adding a measurement step to build process would increase accuracy but it would make the library harder to use.\n. @episodeyang there is support for CJK now inside \\text blocks.. @episodeyang could you provide some example TeX code and expected output?. I think we could measure as a fallback and fail if we're running in node.. I left a couple of comments in the second commit.  Other than that it looks good.  I feel like using async/await for some of these scripts would make this much more readable.  That's maybe something to consider for the future.\n. @gagern thanks for automating screenshot.  I love that it retries, should make it much more robust.\n. @gagern really happy to see this addition.  Thanks for the pull request.\n. This is unfortunate.  Thankfully travis-ci let's you re-run a build.  Hopefully this won't happen too often.\n. So I re-ran the the failed build that you linked to and got an actual error this time, see https://travis-ci.org/Khan/KaTeX/builds/90289211.\n. Updating the selenium images is worth a try.  Thanks for looking into this.\n. Not currently.  Please see https://github.com/Khan/KaTeX/issues/380 for a more in depth of explanation of why.  I'm closing this as a duplicate of that issue.\n. Duplicate of https://github.com/Khan/KaTeX/issues/20.\n. Cool.  I have a look at this later today.\n. @gagern a couple of minor issues, but the whole this is a very nice test suite.\n. @gagern okay, this is good to go, can you rebase this?\n. Thanks for reminding me about this diff.  I will try to look at it this evening.  Sorry about the delay.\n. Looks pretty good.  I'll do another pass of the weekend just to make sure I'm not missing anything.  I'm glad we have the tests that we do otherwise I'd be much less confident about accepting pull requests that make changes like this one.\n. @gagern the changes look good for the most part.  I made a couple of comments on the most recent commit.  After those are address please squash and rebase.\n. Looks good.  Thanks for the quick response.\n. All of the unit tests passed so I think we're okay.\n. It seems like things have been more stable lately with tests.  I'm going to leave this open for a bit and if we start seeing issues again we can apply it then.\n. If there's another reason to upgrade let me know and I can merge it sooner.\n. Thanks for the PR.  I like how requesting katex-spec.js returns all of the test suites.\n. This is what I'm seeing using Chrome on Mac OS X using the http://khan.github.io/KaTeX/.\n\n@mathijshenquet what browser/OS are you using?  Which version of KaTeX are you using?\n. I also noticed that the font for x and y are not in italics.  Can you post the complete source code for the math that you're rendering?\n. \\mathcal{ABC} works on http://khan.github.io/KaTeX/.  What version of KaTeX are you using?\n. @jluttine unfortunately there isn't.  Please see https://github.com/Khan/KaTeX/issues/239 for details.\n. I'm not sure who's updating jsdelivr.  @cben glad to hear that it's up to date.\n. No plans in particular.  Pull requests are welcome.\n. @williamstein this issue is about \\oiint which is different from \\oint.. I've created an issue to track this in the fonts repo: https://github.com/KaTeX/katex-fonts/issues/20. It shouldn't be too hard to implement these.  I'm guessing \\mod and \\bmod are more commonly used.\n. It would be nice if we could parse mu units and support mkern and all of the muskips.  If we hardcode values for these it means more work later if we want to support redefining medmuskip etc.\n. Closing for the reasons stated by @gagern.\n. This is a limitation of HTML.  Input elements cannot contain other elements.\n. @gagern thank you for implementing this.  A lot of people will be happy to see this addition to KaTeX.\n. I was under the impression that the linter would fail the build if there was any lint.  Looks like that is not the case.  I had a quick look at the docs for ndarray and it looks like ndarray can be called as a regular function.  @gagern is there a reason that we're using new with ndarray?\n. I've migrated to eslint so this change doesn't make sense anymore.  Also, I think the correct change in this case would be to get rid of the new.\n. I have not used React Native, but my understanding is that it doesn't use <span> or <div> but has <text> and <view> elements which are supposed to be generally equivalent.  It shouldn't be too hard to make this substitution.  The larger problem is the CSS rules we use for styling items.  React Native uses inline styles but we have a number of classes that would have to be converted to use inline styles.\n\nOf course, we can use the Webview partially. But I do not think it will give a benefit of React Native.\n\nWhat benefit would you lose?  If you don't want to use a Webview directly you could create a React Native wrapper around it.\n. I don't know if it makes sense to use KaTeX's approach to typesetting for RN.  KaTeX produces node heavy markup which would require a lot of Views in RN.  I've heard that RN doesn't handle this case very well.. I don't think there is a good solution at the moment.  I think the solution for math in react native would be to use native rendering libraries and create a custom RN component that uses those libraries.  I found https://github.com/kostub/iosMath that could be adapted to work in RN, but it wraps a web view which seems like a pretty heavyweight solution.. @3axap4eHko you may want to add a comment in the README.md that states that it's a wrapper around WebView so that people know this up front.  Also, you may want to expose the various options that katex.render() supports.. It would be nice to have an option not to render the MathML.\n. My understanding is that MathML didn't do what we wanted it to do in terms of accessibility and we ended up rendering to plain text for the  component for react-components.\n. My misunderstanding.  I'm glad to know that MathML is helping people.\n. This probably shouldn't be too hard to do.  I would look at how \\overline is done and then combine that with \\rightarrow.  This will probably require knowing how wide \\rightarrow is.\n. I think this is worth keeping open.  \\vec may be okay for some uses, but we definitely want \\overrightarrow.\n. This was added in v0.8.0.. This isn't possible due to limitations of HTML, see https://github.com/Khan/KaTeX/issues/397 for details.  I'm curious why you want to render KaTeX inside of these elements.\n. Seeing issues with the Chrome tests, might have merge https://github.com/Khan/KaTeX/pull/388.\n. Rebased after merging 388.  Let's see if that helps things.\n. Ugh... the screenshot tests failed on the firefox tests after merging 388 but the chrome ones succeeded.  \u00af\\_(\u30c4)_/\u00af\n. I tried running the test locally, but it failed with Error pulling image (2.48.2) from selenium/standalone-firefox, endpoint: https://registry-1.docker.io/v1/, HTTP code 400.  I'll try again tomorrow.\n. I figured out what the issue was with docker, I was running an old version.  After upgrading to 1.9.x it seems to be working.\n. Thanks for investigating and finding a resolution so quickly.  LGTM!  ^_^\n. We'll have to grab additional glyphs for wide accents.  Having width metrics would help with this but we could fake it by counting the number of characters inside the \\widehat.\n. This was added in v0.8.0.. What font size are you using?  Is this with \\displaystyle?\n. Here's the LaTeX rendering for reference:\n\nWith KaTeX we're aiming to match LaTeX's rendering.\n. Where are the math font parameters helped me to figure out what the sigma values are for \\scriptfont2 and \\scriptscriptfont2.  Once you know which font files are mapped to these internal font indicators you can run tftopl which will return font dimensions as well as TeX font metrics (width, height, depth).\nHere's the TeX code I used:\n```\n\\documentclass{article}\n\\usepackage{amsmath}\n\\begin{document}\n$a$ \\expandafter\\show\\the\\textfont2 \\expandafter\\show\\the\\scriptfont2 \\expandafter\\show\\the\\scriptscriptfont2\n\\stop\n```\nAfter running that an hitting enter a couple of times I got:\n```\n\n\\OMS/cmsy/m/n/10=select font cmsy10.\n \\OMS/cmsy/m/n/10 \n\nl.6 $a$ \\expandafter\\show\\the\\textfont2 \n                                        \\expandafter\\show\\the\\scriptfont2 \\e...\n? \n\n\\OMS/cmsy/m/n/7=select font cmsy7.\n \\OMS/cmsy/m/n/7 \n\nl.6 ...extfont2 \\expandafter\\show\\the\\scriptfont2 \n                                                  \\expandafter\\show\\the\\scri...\n? \n\n\\OMS/cmsy/m/n/5=select font cmsy5.\n \\OMS/cmsy/m/n/5 \n\nl.6 ...nt2 \\expandafter\\show\\the\\scriptscriptfont2\n? \n```\nThis let me know that:\n\\textfont2 = cmsy10\n\\scriptfont2 = cmsy7\n\\scriptscriptfont2 = cmsy5\nThen I ran tftopl cmsy10, tftopl cmsy7 and tftop cmsy5.  Here's the FONTDIMEN section from cmsy10:\n(SLANT R 0.25)\n   (SPACE R 0.0)\n   (STRETCH R 0.0)\n   (SHRINK R 0.0)\n   (XHEIGHT R 0.430555)\n   (QUAD R 1.000003)\n   (EXTRASPACE R 0.0)\n   (NUM1 R 0.676508)\n   (NUM2 R 0.393732)\n   (NUM3 R 0.443731)\n   (DENOM1 R 0.685951)\n   (DENOM2 R 0.344841)\n   (SUP1 R 0.412892)\n   (SUP2 R 0.362892)  // sigma 14\n   (SUP3 R 0.288889)  // sigma 15\n   (SUB1 R 0.15)\n   (SUB2 R 0.247217)\n   (SUPDROP R 0.386108)\n   (SUBDROP R 0.05)\n   (DELIM1 R 2.389999)\n   (DELIM2 R 1.01)\n   (AXISHEIGHT R 0.25)\nHere are the sigma values for all three fonts together:\n```\n\\textfont2 (cmsy10):\nsigma_14 = 0.362892\nsigma_15 = 0.288889\n\\scriptfont2 (cmsy7):\nsigma_14 = 0.431115\nsigma_15 = 0.285714\n\\scriptscriptfont2 (cmsy5):\nsigma_14 = 0.403555\nsigma_15 = 0.294446\n```\nWe should definitely do the TODO on https://github.com/Khan/KaTeX/blob/v0.6.0/src/fontMetrics.js#L103.  Hopefully it will fix a bunch other discrepancies.\n. A number of changes have been made recently to how we handle vertical space.  Also, the TODO reference above has been done.  Here's KaTeX's current rendering:\n\nI'm going to close this for now.  @MKevin3 if you update to the latest version and you still see this on Android or iOS please re-open.. Here's what it looks like in the test app.\n\n. I'm going close this because https://github.com/Khan/KaTeX/pull/508 handles these characters, plus accented characters, and more.\n. @ronkok your comment made me realize that I hadn't updated the token regex.  I have added the glyphs for \\varepsilon, \\varsigma, and \\varphi.  I will add \\varkappa and the AMS version of \\digamma.  I don't believe any of our fonts includes a glyph for the small letter \u03dd.\n. After thinking of about the \\digamma issue, I'm going to punt on it for now because at some point in the future we probably want to support more of the unicode-math package and I'd like to avoid changing the behavior.\n. @WChargin I misread my own regex.  This looks like it's good to go.\n. If it's reserved it's probably going to be hard for a person to type it in.  There are some characters (capitals letters) which we don't have glyphs for.  I'll see what happens when they're typed in and report back.\n. It throws on all of the Greek glyphs that we don't have, e.g. \u0391, \u0392, \u0395, etc. which I think is acceptable.\n. @ronkok definitely worth a test.  I'll see to it Monday.\n. @xymostech will do.  I totally forgot about that test.  Thanks for reminding me.\n. @xymostech I finally got around to testing \\text{} and it blew up b/c I hadn't defined the symbols for text mode.  I've updated the diff to include text mode versions of all of these symbols.. @ronkok sorry for the delay.  I just tested \\mathbf{\u03a9}\\mathbf{\\Omega} and they render the same.  I'm going to update the screenshot test to include this.. I'll rebase this this evening.. The code for aligned environment has been merged, but we still need to do a release.\n. \\begin{aligned}\n\\dot{x} & = \\sigma(y-x) \\\\ \n\\dot{y} & = \\rho x - y -xz \\\\ \n\\dot{z} & = -\\beta z + xy\n\\end{aligned}\nproduces the following in KaTeX (not yet deployed):\n\nI'm going to close this a duplicate of https://github.com/Khan/KaTeX/issues/61.\n. The follow code from the link does rendering although the spacing/sizing doesn't quite match the screenshot above:\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix}\n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0\n\\end{vmatrix}\nIs this issue about the rendering?\n. Here's the LaTeX rendering:\n\nHere's the KaTeX rendering (using what's in the repo):\n\nI believe we have the correct rendering using LaTeX as our guide.  The following article suggests passing \\\\ an optional param to make vertical adjustments: http://tex.stackexchange.com/questions/33502/vertical-spacing-between-fractions-in-matrix-environment.  We currently don't support this, but we probably should look at adding it.\n. I think I tried pt which we don't support as a unit.  This is already implemented for em and ex so I'm going close this.\n. Please see https://github.com/Khan/KaTeX/issues/400#issuecomment-159676248.\n. We don't support \\\\ outside of matrix and aligned environments.  Closing as duplicate of https://github.com/Khan/KaTeX/issues/171.\n. KaTeX is math typesetting software, it doesn't evaluate expressions.  You might look at something like http://jsep.from.so/ to do expression parsing.  Unfortunately it doesn't support TeX syntax.  The KaTeX parser is unsuitable for evaluation because it produces a data structure that describes where things should be position on the screen as opposed to an expression tree which describes the order things should be evaluated in.\n. It can't.  One option would be to save a copy of the original KaTeX formula before typesetting it.  It might also make sense to add a feature that embeds a copy of the original KaTeX formula in the HTML.  What use case do you need the original formula for?\n. https://github.com/Khan/KaTeX/issues/358 has a link to WYSIWYG math editor that uses KaTeX.\n. https://www.npmjs.com/package/katex is the official npm package.  I believe this is a duplicate of https://github.com/Khan/KaTeX/issues/114 and https://github.com/Khan/KaTeX/issues/148.\n. Looks like someone made the proposed changes in https://jsperf.com/katex-vs-mathjax/47.  It's still not working, but it looks like an unrelated issue in the setup code.. @mbourne would you be okay with us pointing to your speed comparison in the README?. Now that we're pointing to http://www.intmath.com/cg5/katex-mathjax-comparison.php in the README maybe we should delete the jsperf test.. I can't get jsperf.com to even load.  If it comes back online we can re-open this and try to figure out how to update the perf test.  If we're concerned about accuracy of the new katex-mathjax comparison we might look at using https://github.com/bestiejs/benchmark.js (this is what jsperf uses), but the difference in speed right now is at least an order of magnitude so I wouldn't bother.. @ronkok thanks for the report.  Yeah, that's totally the wrong glyph.  It looks like \\centerdot is an alias for \\cdot or vice versa.\n. It looks like MathJax is doing the wrong thing here.  I'm going to revert that last commit.\n. Commit reverted. @spicyj thanks for noticing my mistake so quickly.\n. In this situation you could also use \\kern which we also don't support yet, but is easier to implement because we don't have to worry about line splitting or stretch/squash of glue.  I'm going to rename the issue to implement \\kern with the expectation that you should be able to use \\kern anywhere.\n. It looks like LaTeX is not scaling \\kern.  Here are some screenshots.\nLaTeX:\n\nKaTeX:\n\n. It's a little hard to tell from the screenshot, but the distance between a and b in both the fraction and not-in-the-fraction is 87 pixels in both cases (as measured by dev tools inspector).\n\n. @xymostech thanks\n. Thanks for the bug report.  I've verified the issue, but I'm not sure what's causing it.\n. If you use the throwOnError option, the incomlete commands will render in red until they're recognized.  See https://github.com/Khan/KaTeX#rendering-options.  I'm curious about the live preview... are users on your site typing in math that you're rendering on each keystroke?\n. I see, thanks for the link to your project.  auto-render.js exports renderMathInElement, how are you using renderMathInText?\n. @webtrees I think it makes sense to have something like a katexOptions property that can be passed to renderMathInElement that can be passed down to katex.render.\n. The example works on http://khan.github.io/KaTeX/.  In this case though you don't need to wrap \\circ in a group.  Also the \\sin operator is the correct way to write \"sin\".  \\sin(30^\\circ).  Which version of KaTeX are you using?\n. It also does not work in my version of LaTeX which is pdfTeX 3.14159265-2.6-1.40.16 (TeX Live 2015).   It works in MathJax though.  I'm going to close as won't fix b/c we want to maintain LaTeX compatibility.\n. https://github.com/Khan/KaTeX/issues/247 is another case where we should try to recover.\n. The KaTeX rendering matches the LaTeX rendering for this example.  You can adjust the spacing between rows in the following way:\n\\begin{vmatrix} \ni & j & k \\\\[0.5em]\n\\frac{\\partial X}{\\partial u} &\n\\frac{\\partial Y}{\\partial u} & 0 \\\\[1em]\n\\frac{\\partial X}{\\partial v} &\n\\frac{\\partial Y}{\\partial v} & 0 \n\\end{vmatrix}\nWhich gives the following rendering:\n\nThe delimiters should be a little taller.\n. Fixed on master.. @jwmerrill thanks for the bug report and bisecting.  We'll fix this before the next release.\n. This was fixed on master in https://github.com/Khan/KaTeX/commit/4a9c2acbf7a50a6205cc3f42f374a4b3047c9bf1, but isn't in the most recent deploy.\n. I believe this change was part of the v0.7.0 release.. @tirsen thanks for the pull request.  Before merging this, could you sign our CLA?\n. @tirsen thanks for signing the CLA.  I'm not that knowledgable about npm package so I'll leave @spicyj to make the call on that.\n. @PaulSohn can you use different delimiters, e.g. \\(,\\) and \\[,\\]?. I'm going to close this since it's going to be very difficult to implement something that handles the different behaviors people want.  Also, there is a workaround by using different delimiters.. @Trass3r can you open a new issue for processEscapes?. I'm re-opening and have changed the title to indicate that we'd like an option to ignore \\$.. \\pmod was requested in https://github.com/Khan/KaTeX/issues/393.  Closing as duplicate. \n. closing as duplicate of https://github.com/Khan/KaTeX/issues/407.\n. @Sukii this will be support out of the box in the next release, it's currently available on master.. @ronkok thanks for reporting this.  It looks like https://github.com/Khan/KaTeX/blob/e6de31d2d622f01aae6d465cf332a268332942f4/metrics/mapping.pl#L943 should be in the \"Fraktur-Regular\" section.\n. For anyone following this \\Bbb{k} works correctly and can be used in lieu of \\Bbbk until it's fixed.\n. This is fixed in v0.8.0.. aligned is supported on master but not in the most recent release.  I can see how the wiki page is a little confusing.  The * after aligned is supposed indicate that there is a note at the bottom of the wiki page that states *Committed to master but not part of the most current release.\n. @invkrh has the issue been resolved?\n. I'm not sure what's up with travis-ci's push build... it fails on lint because it's using jshint:\n\n./node_modules/.bin/jshint katex.js server.js cli.js src/buildCommon.js src/buildHTML.js src/buildMathML.js src/buildTree.js src/delimiter.js src/domTree.js src/environments.js src/fontMetricsData.js src/fontMetrics.js src/functions.js src/Lexer.js src/mathMLTree.js src/Options.js src/parseData.js src/ParseError.js src/Parser.js src/parseTree.js src/Settings.js src/Style.js src/symbols.js src/utils.js test/errors-spec.js test/katex-spec.js test/symgroups.js contrib/auto-render/auto-render.js contrib/auto-render/auto-render-spec.js contrib/auto-render/splitAtDelimiters.js dockers/Screenshotter/screenshotter.js dockers/texcmp/texcmp.js\n\nwhereas the pr build passes fine because it's using eslint:\n\n./node_modules/.bin/eslint --fix katex.js server.js cli.js src/buildCommon.js src/buildHTML.js src/buildMathML.js src/buildTree.js src/delimiter.js src/domTree.js src/environments.js src/fontMetricsData.js src/fontMetrics.js src/functions.js src/Lexer.js src/mathMLTree.js src/Options.js src/parseData.js src/ParseError.js src/Parser.js src/parseTree.js src/Settings.js src/Style.js src/symbols.js src/utils.js test/errors-spec.js test/katex-spec.js test/symgroups.js contrib/auto-render/auto-render.js contrib/auto-render/auto-render-spec.js contrib/auto-render/splitAtDelimiters.js dockers/Screenshotter/screenshotter.js dockers/texcmp/texcmp.js\n\nI'm going to merge this.  @xymostech could you post a screenshot of the fixed output for posterity?\n. > (It looks like we don't have a way to test this in the screenshotter for now)\nWe should add an option to the screenshotter so that we can test this and add a test before the next release.\n. The pre-filter idea is interesting.  I can see people using that function for other things like converting non-breaking spaces to normal spaces or rewriting \\align* as \\aligned.. Duplicate of https://github.com/Khan/KaTeX/issues/29.\n. @spicyj cool.  Can you update the screenshot test to include \\overline nested within \\underline and vice versa?  I'll try running docker on your branch.\n. yay!\n. @mbourne wow, I didn't realize it had been that long.  There's definitely new stuff on master that we should release.\n. Done.  With lots of help from @xymostech, thanks!\n. @xymostech it sounds like all of the tagged commits are orphans is that correct?\n. @mull I'm going to close this.  Let me know if you do any investigating in the TeXbook?\n. Closing as duplicate of https://github.com/Khan/KaTeX/issues/402.\n. Yes, that is on our list of priority items.\n. Reopening as this isn't tracked anywhere.. This has been added to master.. @mathijshenquet thanks for fixing https://github.com/Khan/KaTeX/issues/390.  Could you add a screenshot test?  You'll need to add a test case to https://github.com/Khan/KaTeX/blob/master/test/screenshotter/ss_data.yaml and then run make screenshots.\n. @mathijshenquet sorry for not seeing the update.  Thanks for adding screenshots, they look great!  Before I can merge this though can you sign our contrinbutor license agreement?\nwww.khanacademy.org/r/cla\n. @mathijshenquet friendly ping about signing our CLA.\n. We could try using https://github.com/typekit/webfontloader to force load fonts before taking the screenshot.\n. The screenshotter has been fairly reliable of late so I'm going to close this issue.. If anyone is interested in the picking this up, the PR was a good start.  There were a couple of issues that still need to be resolved, namely:\n- getting the correct vertical metrics for each of the glyphs\n- having the spaces render as spaces\nThe browser generates the small-cap glyphs on the fly.  In order to get the heights we'd need to use a library like cap-height to calculate the cap height of the font(s) in question.. @msridhar sorry for the delay.  Can you post some screenshots?  I'm not sure how the browser actually implements this.  If it's swapping out glyphs, e.g. using unicode small caps A (U+1D00) for every a then the browser will end up using a different font.  It might be scaling existing glyphs in the font if the font doesn't include specific small caps glyphs.  Either way, we don't have the metrics for those.  That being said, we only need the height and depth.  It looks like we could probably use the x-height of the font as the height for the small caps and since the small caps don't have descenders, the depth should be 0.\n. @msridhar could you have a look at why we're dropping spaces?  I want to check this branch out and play around with before merging it.  I'm concerned about how it handles vertical layouts especially since the font metrics are going to be wrong for the characters now.  This might be something we put behind a flag.\n. As for MathML support, you could try the <mi mathvariant='small-caps'>ab</mi> and see that works in your favorite MathML viewer.\n. @msridhar sorry for the delay in responding.  There are two issues that still need to be resolved:\n- getting the correct vertical metrics for each of the glyphs (lowercase y should not have any depth/descent, but its height/ascent should be greater than the standard y)... using the metrics from the standard 'y' when rendering a small caps 'y' will result in incorrect positioning in vertical layouts such as \\frac and \\sqrt.\n- spaces should render as spaces\nHere's what the \\textsc{Lorem Ipsum Dolar} should look like according to quicklatex.com:\n. I believe that the browser is doing something to the font to generate the small caps.  I found a tool called cap-height that can measure the height of small caps so we could use it to figure out what the height should be. . @msridhar I'm going to close the PR for now.  I'll paste the details of what work remains in the issue if someone else wants to pick this up.. @i3vi3 what font are you using to render these glyphs?. > PS When fixing this, please make sure all possible characters are addressed, not just the hash char.\nAre there other characters causing a crash?\n. This hasn't really been an issue for our use case AFAIK.  We don't have anyone doing dedicated development so I can't give an estimate.  Pull requests to address this are welcome.\n. @cbreeden thanks for the pull request.  I'll have a look at it tomorrow.\nPlease sign the CLA, found at found at www.khanacademy.org/r/cla, so we can merge this in.\n. To use the screenshotter, you'll need to either add a new entry in https://github.com/Khan/KaTeX/blob/master/test/screenshotter/ss_data.yaml or modify an existing entry.  I think it makes sense to create a new one and label it appropriately so that people know that the test is looking for a particular behavior.  After running make screenshots it should generate two new image files which should be added to this pull request.\n. @cbreeden looking forward to your proposal.\n. > Though there is one question that I was hoping to clear up. I wasn't able to trigger rowGaps to be anything other than null. I'm not sure how they are supposed to be handled in the case for deleting a row.\nThe following works:\n\\begin{pmatrix}\n  a & c \\\\[1em]\n  b & d\\\\[2em]\n  c & e\n\\end{pmatrix}\n. I see... extra \\\\ add spacing after lines (or before if there is one before), but we should be rendering an empty line after the extra space.  @cbreeden It's probably worth updating the matrix screenshot test to include an example that tests this behavior.  Could you ad d a test case to https://github.com/Khan/KaTeX/blob/master/test/screenshotter/ss_data.yaml?  Then run make screenshots to regenerate the screenshot files and commit the changed files.\n. @cbreeden friendly ping on updating/adding screenshots.\n. I cherry picked the change on to master and it doesn't seem to have any effect.\n\\begin{bmatrix}\n   \\\\ a & b \\\\ \\\\\n    c & d \\\\ \\\\\n  \\end{bmatrix}\nstills has an extra space.\nIt turns out that lastRow is a little more complicated that it used to be:\n\n. @cbreeden thanks for updating.  I can run the docker.  I'll send you a PR with the screenshots.. It's odd that it's only failing for Chrome.  I can see why it might change though:\nAccentsText: |\n    \\begin{array}{l}\n    \\text{\\H{e}}\\\\\n    \\text{\\H{X}}\\\\\n    \\end{array}. @cbreeden I'll send you another PR with screenshots for AccentsText.. > I wonder if the new headless API for chrome would help here.\nSomething we might look into.  I think we'd still want to do it inside a docker though b/c there's lots of variables that affect the rendering.. @cbreeden thanks for PR.. Duplicate of https://github.com/Khan/KaTeX/issues/380.  KaTeX currently doesn't support CJK or Unicode, but we're slowly working on it.\n. @cbreeden thanks for the pull request.  It looks like travis is failing on lint.  Could you run make lint and fix any errors?\nIn terms of feedback on the design @xymostech will be able to answer your questions much better than I would.\n. @cbreeden iirc, there are some macros which modify the values of some of the skip values so have these defined in code would be useful for macro support as well.  I've been doing some reading and spacing and apparently math mode use muskip as opposed to skip.\n. @digitalheir thanks for the bug report.  This should be relatively easy to fix.\n. @cbreeden thanks for typing this up.  It would be nice to simplify the AST at some point.  I think we probably also want create a more general tree structure based on the HTML tree that could be used by multiple rendering backends.\n. @cbreeden why did you close this?\n. @cbreeden it passed the CI build so it should be good.\n. @cbreeden thanks for the PR.  Not sure when I'll have time to review this, hopefully soonish.\n. @cbreeden sorry for the delay with this.  There will probably be a merge conflict with https://github.com/Khan/KaTeX/pull/567, but I think we still want this.. > 6. If the current item is a Rel or Close or Punct atom, and if the most recent previous atom was Bin, change that previous Bin to Ord.\nIn order to minimize changes I'd rather update groupTypes.rel, groupTypes.close and groupTypes.punct to find the previous atom and update it as necessary.. In that case I'm going to close this in anticipation of a PR from @kohler with https://github.com/kohler/KaTeX/commit/6af1c96c523e4174374764291ea897b879ee9ce0.. I'll do a closer read of this this afternoon.  Lots of changes going on here.\n. Sorry... last week was really busy.  Thanks for making all of the changes.  I'll do a final once over pass sometime today.\n. I re-ran the travis tests and they're passing now.\n. Thanks for rewording the comments.  This is good to go now.  This should allow us to start tackling a number of issues that were marked as \"needs macros\" by changing what the default macros are and merging custom macros in.\n. Currently the only way to define a macro is through options.  The function that the auto-render code exports accepts an options object as the second parameter so defining macros on that object should work.. @arogozhnikov we haven't done a release with the macro changes yet.  Please try master.. I didn't realize that boot2docker had been deprecated.  I'll give this a spin this weekend.\n. @gagern we should definitely do this first.  I'd like to check this out and play around with it a bit.  Should be able to review it sometime this week.\n. I checked this branch out, but the screenshotter timed out trying to contact the selenium server.  I'll try again and post error messages when I have more time.\n. > Timed out as in Error(\"Failed to connect selenium server.\")? \nThat's exactly what happened.\n. @gagern sorry about the delay.  I'll give it another go tomorrow.\n. I didn't get to it Friday.  I came down with a cold from which I am currently recovering from. \n. @gagern here are the error messages I'm getting:\n```\n...\n2d21dc4be0fc: Pull complete\n8cc3b61bbfc7: Pull complete\n5e11248b27f8: Pull complete\nDigest: sha256:e0a1cd11024a123314fbea48cb10f437ce6f84db0db171490f5f7209a92c7c9f\nStatus: Downloaded newer image for selenium/standalone-firefox:2.48.2\nContainer 2834bf62d718 started, creating screenshots...\nSelenium driver at http://192.168.59.103:32768/wd/hub\nKaTeX URL is http://192.168.59.3:46810/\n/Users/kevinbarbash/khan/KaTeX/dockers/Screenshotter/screenshotter.js:207\n            throw new Error(\"Failed to connect selenium server.\");\n            ^\nError: Failed to connect selenium server.\n    at Socket. (/Users/kevinbarbash/khan/KaTeX/dockers/Screenshotter/screenshotter.js:207:19)\n    at emitOne (events.js:77:13)\n    at Socket.emit (events.js:169:7)\n    at emitErrorNT (net.js:1253:8)\n    at doNTCallback2 (node.js:439:9)\n    at process._tickCallback (node.js:353:17)\nFailed taking screenshots, stopping and removing 2834bf62d718\nStarting container for selenium/standalone-chrome:2.48.2\nUnable to find image 'selenium/standalone-chrome:2.48.2' locally\n2.48.2: Pulling from selenium/standalone-chrome\n1ba8ac955b97: Already exists\nf157c4e5ede7: Already exists\n0b7e98f84c4c: Already exists\n...\n```\n. Reading through the docker docs it looks like I forgot:\ndocker-machine create --driver virtualbox default\n. I thought that would've fixed, but it failed again.  I tried doing things step-by-step... here's the output from that:\n```\n(khan27)kb-no-mbp:katex kevinbarbash$ export DOCKER_MACHINE_NAME=default\n(khan27)kb-no-mbp:katex kevinbarbash$ docker-machine ip $DOCKER_MACHINE_NAME\n192.168.99.100\n(khan27)kb-no-mbp:katex kevinbarbash$ docker-machine ssh $DOCKER_MACHINE_NAME 'echo ${SSH_CONNECTION%% *}'\n10.0.2.2\n(khan27)kb-no-mbp:katex kevinbarbash$ dockers/Screenshotter/screenshotter.sh --verify -i Arrays\nStarting container for selenium/standalone-firefox:2.48.2\nContainer b068d5d7fb92 started, creating screenshots...\nSelenium driver at http://192.168.99.100:32772/wd/hub\nKaTeX URL is http://10.0.2.2:42671/\n/Users/kevinbarbash/khan/KaTeX/dockers/Screenshotter/screenshotter.js:207\n            throw new Error(\"Failed to connect selenium server.\");\n            ^\nError: Failed to connect selenium server.\n    at Socket. (/Users/kevinbarbash/khan/KaTeX/dockers/Screenshotter/screenshotter.js:207:19)\n    at emitOne (events.js:77:13)\n    at Socket.emit (events.js:169:7)\n    at emitErrorNT (net.js:1253:8)\n    at doNTCallback2 (node.js:439:9)\n    at process._tickCallback (node.js:353:17)\nFailed taking screenshots, stopping and removing b068d5d7fb92\n```\n. I've never used Wireshark but I'll give it a shot.  In the meantime I'll try to test it on a different machine.\n. I assume it works b/c the check are passing.  It's probably some configuration error on my end.  Let's merge this in.  I'll eventually get around to trying out wireshark.  I don't want issues with my machine holding things up.\n. > Well, that doesn't tell you much since Travis doesn't use docker-machine. It only tells you I didn't introduce syntax errors to the existing code paths, which of course is useful to know.\nI was confused.  I thought docker machine was required to run docker anywhere, but that is actually the case.  On linux you can just run docker without the docker machine b/c docker was built to use linux's virtualization system.\n. @runemadsen the way we render vertical layouts has changed recently.  The fraction line style is now:\ndisplay: inline-block;\nwidth: 100%;\nborder-bottom-style: solid;\nCould you update to the most recent version of KaTeX and see that fixes this issue?. Closing due to lack of activity.. Re-triggering Travis is a bit of a pain.  Maybe there's some way that we could stop screenshot tests before they time out.\n. Travis has been pretty good recently, especially considering the number of PRs we've had in the last couple of months.  I'm going to close this for now.. Doing the upgrades as separate PRs.  I'm not particularly keen on upgrading stuff unless it's actually causing an issue.  I'd don't really understand the impact of what the error message is saying.  Does it mean if a native module is updated while the server is running that it won't reload it?  It seems like a bit of an edge case with an easy workaround: reload the server.\n. @spicyj yes it does.\n. @gagern any thoughts on adding these environment aliases?\n. @gagern this PR was mainly to solve an issue that we're having at KA.  I think another option would be for us (KA) to use the new macro functionality to add our own custom aliases. \n. After thinking about this a bit more, macros aren't enough to fix this.  I think I'll just swap out begin{align} and end{align} before sending the string to katex.\n. Not sure where the best place to put this is. People who aren't using the auto-renderer may also want common substitutions... another one being non-breaking spaces to regular spaces.. I'm more concerned about how large the bundle gets.  @gagern are you suggesting providing some way to create custom builds?. Thanks for the PR.  I'll try to look at this sometime this week.\n. @gagern thanks for splitting this PR.\n. Cool.  Thanks for being proactive with this issue.\n. Note: this requires a npm install to update deps.\n. That would be awesome.  In perseus we just always run npm install which is a little wasteful.\n. There's a PR for canvas rendering that you might want to checkout: https://github.com/Khan/KaTeX/pull/251.\n. @gagern thanks!\n. @daniel3735928559 in general we try to avoid non-standard commands.  That being said, being able to use KaTeX for editing would be immensely useful.  I think having some sort of plugin system would be nice, but I think we'd want to work on defining a display agnostic layout data structure first.  This change would break plugins if they were using the existing system.  I'm going to leave this open for now as a reference how to do cursors and as a reminder that people will find a plugin system useful.\n. Blocked on #762.. I think this could be done in a similar way to how #1074 implements \\class in the contrib folder.. @daniel3735928559 sorry for letting this sit in limbo for so long.  If you're still interested in adding this feature, it's probably best to wait until #1074 lands before reworking things.. I'm going to close this for now since #1074 has been closed.  I think we'll probably start looking at how to support a plugin architecture after the 1.0 release.. @daniel3735928559 thanks for the pull request.  I won't be merging this b/c we'd like to avoid non standard commands in katex-core.  I would like to eventually have a plugin system.  This change highlights the need for plugins to have access to specific renderers.\n. Blocked on #762.. Superseded by #1074.. \n. @spicyj good eye.  This diff is a stop-gap measure for Latin-1.  The plan is to eventually get https://github.com/Khan/KaTeX/pull/409 merged in and then create accented characters using combining marks that already exist in our fonts.  When the happens I use the correct font metrics for those characters.\nI played around with it a bit and it seems to be doing the correct the thing for fractions and roots.  I'll post some more screenshots in a bit.\n. The screenshot tests are failing b/c I didn't include a screenshot in this diff b/c my docker setup is broken for the moment.  I'm going to try out @gagern's docker-machine branch.\n. @spicyj sorry you were asking about the CJK characters.  Those are also not CM.  I'm hesitant to include a specific font especially for CJK because it will take a while to download.\n. > The Latin-1 chars do look like CM to me \u2013 am I crazy?\nTimes New Roman is pretty close to CM.\n. \n\n. @gagern really good points about the inexact science of providing substitute metrics for characters.  The ascender is the important thing.  Unfortunately, characters with accents will have the wrong ascender for now so people should avoid doing \\vec{\\text{\u00c0}} for now.\n. > No, this is what those chars look like in Times New Roman\n\nLook at the \u00ef in the first row of your screenshot! It looks as though an i with dot was combined with a combining diaresis.\n\nI really wasn't paying attention to the i.  Wow... that's quite odd.  We'll definitely want to fix that before the next release.\n. The KaTeX fonts have the dotless i in the right position.  I wonder why the browser isn't using it.\n. The screenshot tests made me sad b/c there are not CJK fonts install on the selenium docker images which means we'll have to make some custom images.  Hopefully we can derive them from the images we're currently using.\n. @gagern great idea.  I'll do that as part of this PR.\nIn the meantime, I've update the code to use serif fonts for CJK glyphs and i with accents don't have the extra dot anymore.\n\n. I just noticed I have Korean twice.\n. Although I added the \"fallback\" class and was able to get that working with different fonts in the test page, I wasn't able to get those other fonts showing when doing the screenshot tests.  I'm going to leave that as a task for a future PR.\n. The screenshots work now.  It took a while finding fonts that actually worked inside of the docker container. \n. @gagern really good point about the license and the size of these fonts.\n. I put the fonts in a separate repo along with LICENSE files for each of them.\n. It looks like everyone's concerns have been address so I'm going to merge this now.\n. @i-am-the-slime this is on master.  We still need to do a release.. @pashinin is tg the Russian way of denoting tan?\n. See https://en.wikibooks.org/wiki/LaTeX/Internationalization for details.. This is much appreciated.  When I run the screenshot I end up reverting changes to the screenshots where I didn't modify/create the test case in ss_data.yaml.  It's okay b/c verify runs on travis, but it's not idea.\n. @HStaaf we're aware of the issue, but do unfortunately do not have fix.  Closing in preference of https://github.com/Khan/KaTeX/issues/60.\n. Unfortunately, it's not super high on priority.  I think the fix for this will be to render to SVG  because I think the browser doesn't handle sub-pixel position of elements which accumulates and results in these off-by-a-few-pixel rendering errors.  I haven't confirmed this so I'd want to do that before putting in a lot of work for a \"relatively\" small issue.  That being said, this rendering issue bugs me too.\n. \\varnothing \\emptyset should produce the following output:\n\n. Closed by https://github.com/Khan/KaTeX/pull/618.. That is correct.  Closing as a duplicate of https://github.com/Khan/KaTeX/issues/254.\n. Even though this issue came in first, I'm going to close it as duplicate of https://github.com/Khan/KaTeX/issues/527.\n. I think I have this figured out:\n\n\\small looks a little better:\n\nWithout sizing:\n. @camsc the behavior's a bit different from MathJax's behavior.. This has been done for a while.. We were warning, but no longer warn b/c quirks mode is now supported on master.. Although https://github.com/Khan/KaTeX/pull/608 was reverted, we were already warning on missing doctype.  See https://github.com/Khan/KaTeX/blob/master/katex.js#L34-L44.. @arnaudriegert I could see how that could be annoying.  Check if your editor has an command to paste unformatted text.\n. It might be worth having some snippets in contrib or in README.md with common transforms you might want to do.  I add a transform on the KA site code which converts \\begin{align*} to \\begin{aligned}.  I should add str.replace(/\\u00a0/g, ' ') too because we're seeing this issue in existing content.\n. The ability to defined macros via the options object was added recently.  The following should work:\nkatex.render(\"\\\\qvar{x}\", div, {macros: {\"\\\\qvar\": \"\\\\color{red}\"}});\nand should produce the same output as:\nkatex.render(\"\\\\color{red}{x}\", div);\n. @t-k- sorry, I keep forgetting what's on master vs. the latest release... probably time for new release.  As for documentation there, what we have can be found on https://github.com/Khan/KaTeX and https://github.com/Khan/KaTeX/wiki/Function-Support-in-KaTeX.  We should update it after the next release.  What's a sphinx repo/site?\n. Another option is to scale it down to fit the space.  Since we don't know which behavior a developer wants for their site it's safest for us to not make any decision in this regard. . @ViktorQvarfordt thanks for pull request.\n. There are only a few environments that we currently support like aligned, *matrix, and cases.  verbatim is not one of them.\n. @erichake thanks for the pull request.  We require all contributors to sign our Contributor License Agreement.\n. @erichake thanks for signing the CLA.  Friendly ping about adding a comment about the limitations of this approach.\n. Closing in preference of https://github.com/Khan/KaTeX/pull/670.. @nefedor many of these have already been reported previously.  Please search for existing issues.\nInstead of \\begin{align*} you can use \\begin{aligned}.\n. @nefedor I'm going to close this.  Please a new issue for specific commands (or groups of related commands) that aren't currently supported and don't have an existing issue.. Dots support has been added in #794.. @jbg77 can you post the TeX code you're seeing the issue with?\n. Can you add some debugging to your phantomjs script to printout which resources it's downloading?  See http://phantomjs.org/troubleshooting.html.\n. @daniloascione we're keen to support \\stackrel because we have a fair amount of content that uses that.  It seems like \\stackrel{\\gamma}{\\longrightarrow} should do the same thing once\\stackrelis implemented.\n. I'm going to close this as support for\\stackrelhas been added tomaster.. It's definitely a little tight.  Here's the LaTeX rendering.\n<img width=\"194\" alt=\"screen shot 2016-09-16 at 4 07 20 pm\" src=\"https://cloud.githubusercontent.com/assets/1044413/18603586/b5c4285e-7c27-11e6-89d3-9f602b2093a8.png\">\n. hmm... so it's just fractions that contain subscripts.\n. Using:\n```\n\\begin{aligned}  \nx &= \\frac{K_1M_2 - K_2M_1}{K_1K_2 + M_1M_2} \\\\  \ny &= \\frac{K_1M_1 + K_2M_2}{K_1K_2 + M_1M_2} \\\\  \nz &= \\frac{N^2}{K_1K_2 + M_1M_2} \n\\end{aligned}\n```\nnow produces the following on master:\n<img width=\"425\" alt=\"screen shot 2017-06-10 at 5 22 58 pm\" src=\"https://user-images.githubusercontent.com/1044413/27006408-7ab7a5cc-4e01-11e7-9123-c6c7d4c1988d.png\">. Thanks to @edemaine for fixing this.. @jbg77 we don't support\\overrightarrow.  Can you post the rest of the TeX code that you're trying to parse?\n. @jbg77 you might be interested in https://github.com/Khan/KaTeX/pull/524.\n. Support for \u00e9, \u00e8, etc is on master.  For < and > use\\ltand\\gt.  @jbg77 in the title of this issue you mentionedsuperior/inferior, are you referring to\\supand\\inf?\n. Support for\\overrightarrowwas added in [v0.8.0](https://github.com/Khan/KaTeX/releases/tag/v0.8.0).. @daniel3735928559 thanks for the report.  I was able to reproduce this.  MathJax and LaTeX handles make sure the correct space is there.  In the markup we wrap the group in a, but this makes solving the problem complicated because we can't make the wrapper anmordbecause then spacing on the left side of the group might be wrong.  Maybe there's a way that we can output groups without the extrawrapper if it's not needed.\n.{\\displaystyle\\int x}+1renders correctly, so in that case we're not adding an extraaround\\int x.  Also, the color is applied independently to each glyph.\n. @jason-s thanks for the bug report.  I feel like this and https://github.com/Khan/KaTeX/issues/533 probably have the same root cause.\n. Fixed onmaster.. @jason-s upcoming release either before end-of-year, or early in the new year.  Updating the site is a separate step..\\hat{x}\\hat{\\omega}` looks fine https://khan.github.io/KaTeX/.\n\nIt looks like your rendering is using a different font.\n. Fixed on master.. I'm surprised this is even rendering.  I tried rendering x_2\\=\\\\frac{-(10x^2)-5x}{10x^3} on khan.github.io/KaTeX and got a ParseError.  After removing unnecessary backslashes it rendered x_2=\\frac{-(10x^2)-5x}{10x^3} correctly.\n\n@prasanthown can you try it again without the extra backslashes?  Also, what version are you using?\n. @xymostech I think I need more sleep.  I typed \"x_2\\=\\\\frac{-(10x^2)-5x}{10x^3}\" into the console and got back \"x_2=\\frac{-(10x^2)-5x}{10x^3}\" so it looks like browser is ignores the \\ in front of the =.\n. I'm really curious to find out where 67.08203932499369 is coming from.\n. I'm going to close this as it was probably a doctoring issue and support for quirks mode has just landed on master.. I ended up reverting https://github.com/Khan/KaTeX/pull/608 b/c quirks mode looks bad.  I'm going to keep this issue closed though due to lack of additional information.. Updating .gitignore seems like the simplest solution.  The build step itself is fast enough.\n. Closed by https://github.com/Khan/KaTeX/pull/546.\n. @gagern if you have time, could you check out this branch and run the screenshotter?\n. @gagern thanks for adding the screenshots!  I was hoping that these changes would've improved the \\sqrt rendering more.\n. @csilvers I flipped between the new and old rendering of the example in https://github.com/Khan/KaTeX/issues/41 and there were two main differences that I could see:\n- the -2\\pi exponent on the top of the continued fraction is slightly higher\n- the gap between the fraction bars and the rest of the exponents is slightly bigger 1~2px at a font size of 72px\n@gagern even re-running the Tex vs. KaTeX comparison from https://github.com/Khan/KaTeX/issues/408 would be helpful in seeing the difference.\n. @gagern these are really cool screenshots.  I'm glad to see we're moving in the right direction.  Thanks for making them and thanks for explaining how to interpret them.\nfontMetrics.metrics.getSub1(options.style) is quite verbose.  I'll update to use options.style.metrics.sub1.\n. @gagern could you have another look at this?\n. @gagern go for it.  Thanks for the review.\n. LGTM.  Thanks for improving the dev workflow.\n. @deckar01 the changes seem reasonable to me.  @xymostech any thoughts on the matter?\n. Before we can accept this pull request we need you to sign our Contributor License Agreement.\n. Changes look good.  Were some of the PNGs being output with 16 bits per channel?\n. @rogersachan nice find.  I'm going to close this in favor of https://github.com/Khan/KaTeX/issues/305.\n. Looks like that glyph is from the wrong font.  Looking at https://github.com/Khan/KaTeX/blob/master/metrics/mapping.pl it seems like we have the right glyph in KaTeX_Main.\n. It's interesting that even the regular h is a little heavy.  I think the MathJax fonts which the KaTeX fonts are based on made many of the glyphs a little heavier.\n. I checked and MathJax has the same issue.  See https://github.com/mathjax/MathJax/issues/1674 for details and a proposed solution.. @mroth thanks for the PR.  I'll have a look tomorrow.\n. @mroth  this is really good!  What differences, if any, are there from http://contributor-covenant.org/version/1/4/?\n. @nickkolok not sure how you're packaging things, but if your build system supports tree shaking then doing import { __parse } from \"katex\" might be sufficient for you.  Extracting macro expanding from the parser would be quite difficult.. Duplicate of https://github.com/Khan/KaTeX/issues/123.\n. @xymostech that sounds reasonable.\n@kasperpeulen depending on your application, you may not need each of the different font files either.  Some of them are only used for particular styles, e.g. \\mathfrak.\n. I think we'll still want the ttf files though since we generate the other files from ttf.  Also, Android support for ttf is better than for woff/woff2.. @kasperpeulen what's your webpack setup?  Is there no way to control which fonts get included in in your bundle?. We've removed eot fonts from the katex package.  I believe the original problem could be solved by changing the webpack config to extract the font files from the bundle.  I think ExtractTextPlugin might do the trick.  If the fonts are separate files then the browser can decide which version of the font makes the most sense for it to download.. I'll try to push https://github.com/Khan/KaTeX/pull/409 across the finish line this weekend.\n. My hope was to eventually follow that up with a diff to add accents over the characters with the goal of supporting most of the characters in the latin-1 unicode block.\n. Maybe #409 isn't necessary anymore now that https://github.com/Khan/KaTeX/pull/508 has been merged.  @Karl-D-Asmussen you might want to give master a try.\n. I've renamed this issue so people don't think we support all languages yet.. We don't support \\atop yet.\n. Support has been added to master.. @kohler thanks for the PR.  Can you check if this fixes https://github.com/Khan/KaTeX/issues/533 as well?  Also, could you add a screenshot test for this?\n. @kohler can you post what you're seeing the console?\n. @kohler definitely interested in this PR.  I'll try to do a first past this weekend.. @kohler thanks for updating the loop.  I left a minor nit in the inline comments.  I understand the desire to keep performance in check.  TBH, performance isn't something I've put a whole lot of thought into :(, but it's one of the selling points of KaTeX so I wouldn't want to do anything that adversely affects it.  We should probably have some sort of performance tests that we can run on each build to avoid perf regressions.. > This slightly changes the vertical position of the Sizing test. Not\nsure the vertical position matters, so change the test.\nI noticed that too.  Can you run texcmp.sh to see how it compares against LaTeX's output?  See https://github.com/Khan/KaTeX/blob/e6de31d2d622f01aae6d465cf332a268332942f4/dockers/texcmp/README.md for details.. @kohler thanks for checking the output for the Sizing test.  Hmm... I'm thinking the issue with ndarray is probably a different version of npm... it's using a flat directory structure now.  We should probably add ndarray as a direct dependency.. @gagern thanks for improving docker support.  I'll give it a try tomorrow.  It looks like there's some lint causing travis to fail.. I gave this a try a got the following error:\ndocker: Error response from daemon: client is newer than server (client API version: 1.24, server API version: 1.21).\nThen I ran: docker-machine restart default and waited for it complete, ran docker-machine env and re-exported the correct environment variables, and finally make screenshots and it worked like a charm.\nThere were some differences in MathDefaultFonts-chrome.png and SupSubCharacterBox-chrome.png.  I thought we retried screenshots that were different but I didn't see any indication of retries in the logs.. After some debugging, I discovered that boot2docker was still installed.  After deleting that it works as expected.\n. @gagern as an aside, I was thinking we might set the \"engine\" field in package.json to node 6.5+ so that we have access to ES6 constructs in the docker js scripts.  It's part of a larger theme of modernizing the code base, see https://github.com/Khan/KaTeX/projects/5.. @gagern my mistake squash-merging.  :(\nI think bumping the engine requirement and then updating the code afterwards is probably the most straight forward.\nFor the main codebase, let's go with babelify (it's more up to date).  There are certain things I think we should take care to do in order to keep size down.  I'll open a separate issue with details.. @kohler wow, this is an epic PR... so many new features and bug fixes!  Each commit look pretty self contained so I'll just merge this without squashing.. @kohler LGTM.  Thanks again for all of these awesome changes.. @kohler thanks for listing out all of those issues.  I'll close them tomorrow.. @astoilkov we're going to try to do one either before the end of the year or earlier in the new year.. Nice find.  I ran tftopl cmr10 and realized that all of the sigma values in https://github.com/Khan/KaTeX/blob/master/src/fontMetrics.js#L37-L42 that 0.0 should be non-zero numbers.  We aren't using those particular sigmas right now, but we might at some point.\nWhere is the space character actually used though?. Hmm... I wonder if it makes sense to render spaces in text mode and \\ as a kern of a particular size with the size depending on whether we're display/text style, script style, or scriptscript style.  The reason why I'm not suggesting changing the font is that we only have a single font which would be script and scriptscript styles would be wrong.  Another option would be to add styles to .less for the spaces.  The three values that should appear for space are 0.333, 0.385, 0.472 corresponding to cmr10, cmr7, and cmr5.  . I thought we added these values to sigmasAndXis in fontMetrics.js, but they're all 0.000.  We should start by adding those values and then update how we handle spaces to use those values.  I'm a little foggy thought about what to do for different fonts.  It seems like we'd need to extract and store these values for other fonts as well like cmbx, ctti, etc.. Closing in preference of https://github.com/Khan/KaTeX/issues/450.  \\everymath doesn't make sense if you want it to affect other math strings rendered by KaTeX.. KaTeX_Main-Bold unfortunately contains the wrong glyphs for \\i and \\j.  This is because makeFF in https://github.com/Khan/MathJax-dev maps two different glyphs to the same code point.  Here are the conflicting lines:\n- https://github.com/Khan/MathJax-dev/blob/master/fonts/OTF/TeX/makeFF#L667-L668\n- https://github.com/Khan/MathJax-dev/blob/master/fonts/OTF/TeX/makeFF#L789-L790 (should be removed). I think this should be pretty easy to fix.  We'll want to fix it in https://github.com/KaTeX/katex-fonts though.. @gagern I remember you had some concerns about moving the .gif that's in the gh-pages branch into the main branch, is that correct?  I was thinking of moving that file to S3 so that it doesn't have to live in the main repo.. We could ask people to make pull requests against the gh-pages branch.  Another option is to create a separate repo for the web page... this doesn't seem to offer much benefit from using gh-pages b/c it would require a separate checkout.  I think for let's continue to use gh-pages consider the number of changes to have been negligible and I don't foresee many pull requests to that branch.. @xymostech I'll have a look this evening.. @kohler thanks for adding support for this syntax.  I think it'll come it really handle once we get better macro support.. @kohler thanks for the PR.. @kohler thanks for noticing the issue and fixing it so promptly.. > This PR includes the commit in PR #581, because some of the screenshotter images depend on that fix.\n\"merge and squash\" should clean that up nicely.. Right now we apply a .mathit class to math atoms as well as atoms within \\mathit.  We'll need to create a new class to differentiate the two.. We don't support it yet, but you would use \\boldmath.  We use fonts based on the MathJax fonts which has a Math-BoldItalic font which we could use.. It should be noted that \\boldmath also makes the operators bold.. I'm sure we will at some point.. It looks like \\bm can accept an atom or a group.  I'm going to switch this issue to support \\bm because it'll be less work and will still produce the desired output.. @stapeleliz no one is currently working on this to my knowledge.  I'd like to do #816 first.  Since it's blocking this and a couple of other issues I'll take on that issue.. @tabatkins thanks!. There's no way enter math mode once you're inside a \\text command?. @ronkok thanks for putting your notes up.  I am very impressed with your implementation of \\overbrace and \\underbrace.  It's unfortunate that IE9 crashes when using calc with background-position according to  http://caniuse.com/#search=calc.  We could say, certain features are unsupported on IE9.. That's unfortunate.  It still seems worth considering even with that caveat.. @ronkok great progress!  I noticed that some of the horizontal lines are quite blurry on a non-retina display.  I wonder if adding shape-rendering=\"crispEdges\" to the <svg> would help for some of the arrow forms.. > Not only that, but they are worse when I set shape-rendering=\"crispEdges\".\n@ronkok thanks for checking.. @ronkok the arrows look much better.  There are a couple that are still blurry: the super long arrow and the arrows in the nest fractions.. @glebm intriguing approach.. No plans to implement this per se, but a PR would welcome.  It seems a little tricky because it treats characters differently from the default.. @edemaine thanks for closing.. Maybe we could tag certain items as semantic and then return the tree without expanding semantic commands.  Other non-semantic commands could be dropped like horizontal spacing.  There are other commands like \\frac, \\cfrac, \\dfrac which are semantically the same.  The code that generates that natural language version of text could map all of these to fraction though.. @edemaine that's an option too, but if nobody's using there's no reason to keep it because it adds costs to future features.. Cool article.  Let's deprecate MathML then.  As for accessibility, I think in the short term we can include the text generation code I mentioned earlier and update if the parse tree changes.  I would like to minimize the number of things relying on the parse tree until its stable, but since we're already using this code at KA we'd have to update it anyways if the tree structure changed.. I think it's safe to say the result of this discussion has been that we will continue to support MathML rendering to support people using screen readers.  Recently, we switched our test runner to jest so that we can use snapshot testing to make it easier to test our MathML output.  I fixed a couple of small issues with our output.  Currently the largest open issue that we should be collating numbers, see https://github.com/Khan/KaTeX/issues/203.. @kasperpeulen can you provide the TeX source?. @kasperpeulen in the future it might be nice to add \\addtolength, but for now you can use \\\\[1em] to adjust the space between lines.\n. @edemaine is this still an issue?. We could easily move katex.less into src now.  See #1120.. I'm going to close this now that katex.less has been moved into src and fonts.less is in KaTeX/katex-fonts.. LGTM.  Thanks!. @edemaine thanks for the PR.  I checked out your branch.  The wrong font is definitely a problem.  A person could fix groupTypes.op in buildHTML.js, but that seems hacky.  It would be great if we could use macros for this, but this seems doubtful with our current macro support b/c it looks like we'd need conditionals which we don't have yet.  ~~In the short term maybe we set type: \"inner\" instead of type: \"op\".  It clears up the font issue~~ and appears to be what LaTeX is doing:\nRunning the following using pdflatex:\n\\documentclass{article}\n\\usepackage{amsmath}\n\\begin{document}\n\\tracingonline=1\n\\showboxbreadth=\\maxdimen\n\\showboxdepth=\\maxdimen\n$1\\dots n\\showlists$\n\\end{document}\nproduces the following (partial) output:\n\\mathord\n.\\fam0 1\n\\mathinner\n.\\mathpunct\n..\\fam1 :\n.\\mathpunct\n..\\fam1 :\n.\\mathpunct\n..\\fam1 :\n\\mathord\n.\\fam1 n. Please ignore the suggestion to use type: \"inner\" in my previous comment... it doesn't actually work. :(. Are the screenshot images correct?  Here's what I get using quicklatex.com:\n\nand KaTeX:\n\n. @edemaine I'm going to check out your branch and see what's causing the square dots. . https://github.com/edemaine/KaTeX/pull/2 fixes the issue with square dots.. I'm not sure why the Dots screenshot test is failing now.. @edemaine it sounds like that's the bug.  That should be pretty easy to fix.. Closed by https://github.com/Khan/KaTeX/pull/618.. @oddhack I noticed you're using an XHTML doctype, try <!DOCTYPE html> and see if that fixes it.. @edemaine thanks for testing that out.. https://github.com/Khan/KaTeX/pull/608 handles quirks mode as well as limited quirks mode which I believe makes this PR moot.  Please re-open if that is actually not the case.. @edemaine I forgot about it.  \ud83d\ude1e . @gagern thanks for the adding underset/overset.  Sorry for the delay in merging this.. @edemaine could you add screenshot tests where your changes affect the output?. @edemaine it's hard for me to tell the difference between master and this.  It looks like there's a bit more space.  How does the layout from https://github.com/Khan/KaTeX/issues/603 look?. @edemaine sorry for not replying sooner.  I tried to reproduce the behavior seen in https://github.com/Khan/KaTeX/issues/603 by checking out the previous commit I wasn't able to repro the issue using \\cases.  Rendering the example from 603 using \\dcases however shows the same collision between lines.. Closing because I believe this PR is superseded by https://github.com/Khan/KaTeX/pull/608.  Please re-open if that is not actually the case.. @xymostech it looks like the unicode tests are failing reliably.  Do those tests fail locally for you?. @gagern @xymostech sorry for not merging this sooner.  I'm going to wait until https://github.com/Khan/KaTeX/pull/679 is merged since some rebasing is required anyway.. #679 has been merge so this is no longer blocked.  There are some conflicts that need resolving before this can be landed though.. > I'm not sure how a GitHub squash-merge would attribute the different commits. Should we prefer merges in such situations? It's not that I consider my code changes in this specific case to be so important they have to be attributed to me. More of a general question.\n@gagern I'm not sure how the squash merge will work.  I'm guessing that github will say xymostech committed with gagers and kevinbarabash (if I end up doing the merge).. @gagern so when squashing and merging, github only gives credit for the person who opened the PR and the person who merged it.  Next time I'll rebase when there's multiple contributors.. @kohler thanks.  I was a little too eager to merge this.  I'm going to revert this and will refactor following that guidance.. Closed by https://github.com/Khan/KaTeX/pull/618.. We don't support \\textsc yet, I've updated the release notes to remove that.  \\textbf not being bold is definitely a bug.. Thanks for upgrading deps.  I'm especially glad to see eslint 3.  Most (all?) of the third party plugins for eslint require 2+.. It isn't too difficult, here are the steps:\n- modify https://github.com/Khan/MathJax-dev/blob/master/fonts/OTF/TeX/makeFF#L1500-L1529 to include the new character\n- follow the instructions in dockers/MathJaxFonts\nIt's been a while since I've done it so hopefully it all still just works.  I checked my system and cmtt does indeed have metrics for character 32 which should be the space.. @edemaine give it a try.  Once you check out https://github.com/Khan/MathJax-dev you should be able to run the command that the docker runs locally to test your changes out which should be:\ncp MathJax-dev/default.cfg MathJax-dev/custom.cfg\nmake -C MathJax-dev custom.cfg.pl. @edemaine not sure what's going on.  I'll give it a try later today.\n@gagern I'll post a set of working instructions, once I figure them out... probably on the wiki.. I did some digging to see what LaTeX is doing for spaces in \\texttt and \\texttt{a b} results in the following:\n\\mathord\n.\\mathchoice\n.D\\mathord\n.D.\\hbox(6.11111+0.0)x15.74986\n.D..\\OT1/cmtt/m/n/10 a\n.D..\\glue 5.24995\n.D..\\OT1/cmtt/m/n/10 b\n.T\\mathord\n.T.\\hbox(6.11111+0.0)x15.74986\n.T..\\OT1/cmtt/m/n/10 a\n.T..\\glue 5.24995\n.T..\\OT1/cmtt/m/n/10 b\n.S\\mathord\n.S.\\hbox(4.27777+0.0)x11.15639\n.S..\\OT1/cmtt/m/n/7 a\n.S..\\glue 3.7188\n.S..\\OT1/cmtt/m/n/7 b\n.s\\mathord\n.s.\\hbox(3.05554+0.0)x7.96884\n.s..\\OT1/cmtt/m/n/5 a\n.s..\\glue 2.65628\n.s..\\OT1/cmtt/m/n/5 b\nThe glue for D and T styles matches the width of the the teletype characters which are 0.524995 em wide.  Our ptPerEm variable corrects for the factor of 10 difference.  The glue for S and s is different.. I also tried \\verb!a b!\\scriptstyle\\verb!a b!\\scriptscriptstyle!a b! and got the following:\n\\mathord\n.\\hbox(6.11111+0.0)x15.74986\n..\\OT1/cmtt/m/n/10 a\n..\\penalty 10000\n..\\glue 5.24995\n..\\OT1/cmtt/m/n/10 b\n\\scriptstyle\n\\mathord\n.\\hbox(6.11111+0.0)x15.74986\n..\\OT1/cmtt/m/n/10 a\n..\\penalty 10000\n..\\glue 5.24995\n..\\OT1/cmtt/m/n/10 b\n\\scriptscriptstyle\n\\mathord\n.\\hbox(6.11111+0.0)x15.74986\n..\\OT1/cmtt/m/n/10 a\n..\\penalty 10000\n..\\glue 5.24995\n..\\OT1/cmtt/m/n/10 b\nwhich seems to indicate that spaces in \\verb behaves different from in \\texttt.. I didn't realize there was a \\scriptsize in addition to \\scriptstyle.. We could edit the .ttf font, copy any glyph into the 0x20 position, and then delete the path for the newly created 0x20.  We could also special case things where if we find a space character that's supposed to be rendered using the tt font, we could render an empty span with the correct width.. I was thinking of editing the .ttf file after it's generated maybe using python fonttools or opentype.js.  Having that process fit in with the Makefile makes sense.\nI didn't realize that we were tracing bitmaps.  mf2pt1 sounds like a superior approach.  I've enabled issues in https://github.com/Khan/MathJax-dev so that we can discuss this further there.. I was really confused as to why this was working b/c the visible space (open box) character doesn't show up in Apple's Font Book font viewing utility even though KaTeX appears to be rendering the glyph just fine.  I tried opening KaTeX_Typewriter-regular in https://opentype.js.org/glyph-inspector.html and it shows up correctly.  Not sure why Font Book wasn't displaying it.\n . In the font file the glyph is at position 0x20 which is normally the space.  I looked at some other fonts and Font Book doesn't render the space in any of them which I guess makes sense b/c in other fonts it's blank so there's nothing to look at.. @edemaine friendly ping.  I left some comments and there are a few merge conflicts, but I think this PR is pretty close to being done.. The screenshots need to be regenerated... probably b/c of that change from 0.524995 to 0.525.. @gagern sorry for the delay.  My vote would be for cherry-picks especially since we've already merged the ES6 notation changes.. @df19900725 please reopen if the suggested change doesn't address your issue.. This is the future step in modernizing the codebase.  I'm excited.  Thanks @gagern.. @edemaine thanks for the PR.  How did you determine the list of broken chars?  Is it just all mathords?. @edemaine a few minor nits and this'll be ready to merge.  Thanks for fixing all of these symbols.. @edemaine thanks for cleaning up the commented out code.  ^_^. ~~I didn't realize there was a color package.~~ I forgot that there's a color package.  It's too bad about the difference in behavior.  I think we want this, we just need to communicate the breaking change along with suggested workarounds.. color package reference: http://ctan.mirror.rafal.ca/macros/latex/required/graphics/color.pdf. @xymostech we're already preprocessing our math so it shouldn't be hard to replace \\color with \\textcolor.. @edemaine let's go with option 2.  Will want to bump the version number to 0.8.x when we do a publish that includes this change.. colorIsTextColor is more descriptive so my vote would be for that.. @edemaine thanks for the PR.  Sorry for taking so long to make a decision regarding \\color's behavior.. The difference can be see in https://github.com/Khan/KaTeX/pull/606#issuecomment-271159484.. ~~Adjusting the height sounds like a good solution.~~. @gagern that's a good point.  A vbox is the way to go.. @gagern cool.  Is there a way to supply a local path for MathJax-dev?  If not, pushing to a remote branch is fine since people will have to do that anyways to create a PR.. Another option might be to install whatever dependencies MathJax-dev needs to run the make scripts correctly during development.. Just looking at all the deps, it's going to be a pain to create a cross platform script to install all the deps.  I think I installed all the deps manually the last time I edited a font and it was a pain.  This will be a huge improvement.  Thanks for making it work with local directories.. I added shopt -s extglob at the start of buildFonts.sh as suggested in the comments above.\nTo test this I checked out https://github.com/Khan/MathJax-dev/commit/677fd6a6167e807bc3dbd635f201e153c108c3d2 and ran \n./dockers/MathJaxFonts/buildFonts.sh /absolute/path/toMathJax-dev\nThis resulted in all font files being updated.  To verify that it was only the timestamps being updated I made sure I had a locally copy of https://github.com/Khan/KaTeX/blob/master/.gitattributes and followed its instructions modifying ~/.gitconfig appropriately.\nThen I ran git diff static/fonts/*.ttf and git diff static/fonts/*.woff and saw that only the timestamps had been modified in the TTF and WOFF files.  The output looked like:\n```\ndiff --git a/static/fonts/KaTeX_Size4-Regular.woff b/static/fonts/KaTeX_Size4-Regular.woff\nindex 7826c6c..eeab3da 100644\n--- a/static/fonts/KaTeX_Size4-Regular.woff\n+++ b/static/fonts/KaTeX_Size4-Regular.woff\n@@ -63,12 +63,12 @@\n      Most of this table will be recalculated by the compiler \n\n\n-    \n+    \n\n\n\n-    \n-    \n+    \n+    \n\n\n\n@@ -2596,7 +2596,7 @@ http://scripts.sil.org/OFL\n     \n\n\n-    \n+    \n\n\n```. LGTM.  Thanks for noticing this and fixing it.. > Personally I consider this a good thing, but if you want me to I can get it back to left-aligned and without extra space around.\nSounds good.  Thanks for noticing this difference and for updating gh-pages.. Verified.  Thanks @ronkok.. \n\n. I think 6 is definitely better than what we were doing before which was 1.  3 sounds nice, but it's also more work, but it might be worth doing that work if we think we're going to change the fonts more often which seems entirely likely considering issues around missing spaces, accent characters, Euro symbol, etc.. @gagern are you concerned that too many updates to the font files will balloon the repo size because the binary diffs are big?. @edemaine we just have to run make metrics_extended and commit the output, see https://github.com/Khan/KaTeX/blob/master/Makefile#L112-L113.  I added a --width option to format_json.py a while back that includes the glyph widths in the output.. If we had the fonts in the a separate repo, we could set things up to do a shallow checkout of that repo... then it wouldn't matter if the size that repo ballooned.. > If I find the time I could investigate whether we can get the machinery for WOFF, WOFF2 and EOT compiled to JavaScript using Emscripten, but that won't happen in the next couple of weeks.\nAnother option might be to mount static/fonts within the docker at the same place where the ttf folder would exist.  We should be able to run make -C fonts/OTF/TeX eot woff woff2 to build the other font files.. I'm putting this on hold until we can move our fonts to a separate repo.. Blocked on #816.. Now that #891 has landed, this is unblocked.. These changes will need to be made to https://github.com/KaTeX/katex-fonts.. Now that the fonts are in a separate repo, all we need are the changes in symbols.js and mappings.pl.  I'm going to open a new PR b/c I think rebasing this will be more trouble than it's worth.  I'll also add commands for the ligatures, e.g. \\ae, \\oe, etc.. I gave this a try.  It works like a charm.  It's too bad that github doesn't have a way to run custom diff hooks. . From the spec:\n\nAn mtext element is used to represent arbitrary text that should be rendered as itself. In general, the mtext element is intended to denote commentary text.\n\nThe only thing other than text that's shown inside a mtext are comments.  This leads me to believe that the best approach would be to render x+\\text{some $y+\\text{some $z$}$} as the following MathML:\n<mrow>\n    <mi>x</mi>\n    <mo>+</mo>\n    <mtext>some </mtext>\n    <mrow>\n        <mi>y</mi>\n        <mo>+</mo>\n        <mtext>some </mtext>\n        <mrow>\n            <mi>z</mi>\n        </mrow>\n    </mrow>\n</mrow>. I was thinking it'd be nice to have to snapshot tests for our MathML output.  The existing tests are fragile, tedious to write, and hard to make sense of.. @edemaine thanks for pinging me about this and thanks for the PR.. Soonish.  I've been putting off doing a release, but I really need to do one b/c there's lots of great stuff sitting on master.  I'll try to do one this Friday.. $\\c{o}\\b{o}\\={o}\\showlists$ yields:\n.D\\mathord\n.D.\\hbox(5.67776+1.93747)x15.00005\n.D..\\kern 0.27779 (for accent)\n.D..\\OT1/cmr/m/n/10 ^^X\n.D..\\kern -4.72223 (for accent)\n.D..\\OT1/cmr/m/n/10 o\n.D..\\vbox(4.30554+1.93747)x5.00002\n.D...\\hbox(4.30554+0.0)x5.00002\n.D....\\glue(\\tabskip) 0.0\n.D....\\hbox(4.30554+0.0)x5.00002\n.D.....\\OT1/cmr/m/n/10 o\n.D....\\glue(\\tabskip) 0.0\n.D...\\glue(\\lineskip) 1.07639\n.D...\\hbox(0.86108+0.0)x5.00002\n.D....\\glue(\\tabskip) 0.0\n.D....\\hbox(0.86108+0.0)x5.00002, glue set 1000.0fill\n.D.....\\glue -1000.0 plus 1.0fill\n.D.....\\kern 0.0\n.D.....\\vbox(0.86108+0.0)x5.00002, glue set - 4.81668fil\n.D......\\hbox(5.67776+0.0)x5.00002\n.D.......\\OT1/cmr/m/n/10 ^^V\n.D......\\glue 0.0 plus 1.0fil minus 1.0fil\n.D.....\\glue -1000.0 plus 1.0fill\n.D....\\glue(\\tabskip) 0.0\n.D..\\kern 0.0 (for accent)\n.D..\\OT1/cmr/m/n/10 ^^V\n.D..\\kern -5.00002 (for accent)\n.D..\\OT1/cmr/m/n/10 o\n...\nThe cedilla is in cmr10 (https://smartfonts.com/jsmath-cmr10.font).  The \"macron below\" repurposes the regular macron.\nReading http://tug.ctan.org/macros/latex/doc/encguide.pdf is interesting.  Page 14 shows encodings for specific commands.  Most of the commands in question use OT1 so they're probably already in the fonts that we're using.  The one accent that isn't using OT1 is \\k, instead using T1.  The doc lists the font ecrm1000 as using T1.  The encoding for this font is on page 22 of the pdf.  The ogonek is located at 0x014 in the table.  We should be able to update to makeFF to grab glyphs from ecrm1000 as well.  I'm curious to see how the 1000 affects the sizes of the glyphs.\nThe barred l combining mark is in position 0xEF of cmr according to the smartfonts link above.\nIt looks like \\t comes from a different font \\t{o}\\showstyles yields:\n.D..\\kern 0.03473 (for accent)\n.D..\\OML/cmm/m/it/10 ^^?   // cmm/m/it/10 == cmmi10?\n.D..\\kern -2.81252 (for accent)\n.D..\\OT1/cmr/m/n/10 o\n...\n\nSo I think it would be OK if we simply extract the first character from the group and insert the combining character after that, either keeping the remaining text as is or dropping it in the process.\n\nSound good.. The ogonek looks tricky because it's position changes depending on the character.  Look at the differences between the lowercase 'e' and 'a' on https://en.wikipedia.org/wiki/Ogonek.. I checked it and it works as advertised.  Running make compress on master also produces all zeros and I'm on 10.11.  Thanks for fixing this.. https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.7.1/katex.min.js is now available.  It looks like they're in the process of update the KaTeX entry as 0.6.0 is still the most recent version in the dropdown on https://cdnjs.com/libraries/KaTeX.. The cdnjs dropdown is up to date.. @gagern thanks for doing the first bug fix deploy and thanks for updating the script.  I'll review it tomorrow...this time before merging ^_^.. Thanks for updating our docs.  :). @edemaine please re-open if there's additional work that you think needs doing.. @pashinin thanks for the pull request.  I'm happy to see international support progressing. . Isn't displayMode: true equivalent to prepending the input with \\displaystyle?. @mrtnkl can you post a screenshot of what the issue was?. Closing as this is fixed on Chrome 56 and greater.. @jkm https://tc39.github.io/proposal-template-literal-revision/ will allow unescaped \\ in custom template strings so \nString.raw`\\xi`\nstill won't work, but you'll be able to define a katex function and then do\nkatex`\\xi`\nUnfortunately, it doesn't look like babel supports it yet.  It is a stage 3, according to https://github.com/tc39/proposals, so that's promising.. @HosseinAgha we definitely want to migrate to ES6.  There are certain things we'd like to limit the use of because they use large polyfills or compile to code that's a lot bigger that the original.  Basically everything that's covered by https://github.com/kevinbarabash/eslint-plugin-luddite.\nA pull request would be greatly appreciated, but please leave any changes to the build system out.  They shouldn't be necessary as I believe that we can continue to use babeblify and still use import/export.  If there are other reasons to move to webpack then I'd like to discuss those separately.. We could include the transform-class-properties babel plugin to enable static properties in classes.  It's a stage 2 proposal, but it pretty stable.. @HosseinAgha looks good so far.  I assume the .eslintrc and babel plugin changes are in a different commit.  Can you update Parser.js next and post those changes to see how it works out with transform-class-properties?. git's diffing algorithm leaves much to be desired. . Can you change those constants to static variables on the class so that they can be positioned closer to their use site? e.g.\n```\nclass Parser {\n    ...\nstatic sizeFuncs = [\n    \"\\\\tiny\", \"\\\\scriptsize\", \"\\\\footnotesize\", \"\\\\small\", \"\\\\normalsize\",\n    \"\\\\large\", \"\\\\Large\", \"\\\\LARGE\", \"\\\\huge\", \"\\\\Huge\",\n];\n\n// A list of the style-changing functions, for use in parseImplicitGroup\nstatic styleFuncs = [\n    \"\\\\displaystyle\", \"\\\\textstyle\", \"\\\\scriptstyle\", \"\\\\scriptscriptstyle\",\n];\n\nparseImplicitGroup() {\n    ...\n}\n\n...\n\n}\n``. @HosseinAgha have a look at the \"Jasmine\" section on http://babeljs.io/docs/setup/#installation. . We're looking at creating an intermediate representation for graphical rendering.  Please follow https://github.com/Khan/KaTeX/issues/376.. There could also be two separate options objects, one that's passed directly tokatex.renderand the other that affects the behavior of the auto-renderer itself.. @alexpearce requesting two changes:\n- removeSettingsandutildependencies\n- update auto-render README. I think it'll take a while to get the right glyph.  Would it be useful to have the\\colonequalscommand output:=for now and then when we have the correct glyph it will start outputting the correct glyph?. @j-lenoch thanks for the PR. . Maybe adding a note about the supported doctypes and their importance is enough.. Please see https://github.com/Khan/KaTeX/issues/350 for previous discussion about\\tagand equation numbering in general.. @ntessore cool!. @edemaine would setting thewarningsoption to false disable all error reporting?. @Rokt33r I just merged https://github.com/Khan/KaTeX/pull/608.  Can you verify that that solves this issue?. @Rokt33r you'd have to clone the KaTeX repo and runmake buildand copy the built files to your project.. @Rokt33r thanks for trying.  I'm sorry, I forgot to mention that I rolled back the change change that removed the warning for quirks mode b/c the proposed fix didn't produce acceptable renderings.   The plan is to enable the fix for limited quirks mode while continuing to warn in full quirks mode.  See https://github.com/Khan/KaTeX/pull/778 for details.. It appears that @edemaine proposed change to jest has made its way onto jest/master (see https://github.com/facebook/jest/commit/fcf64d79a67a64192660d3a8821a68f3507d661e) so I think this can be closed.. @Rokt33r please re-open if upgrading jest tov21.1.0` or greater doesn't solve the issue.. KaTeX starts in math mode so the dollar symbol must be escaped.. @saintthor https://github.com/Khan/KaTeX/wiki/Function-Support-in-KaTeX contains a list of all supported environments.\n\narray\u2021 matrix bmatrix Bmatrix pmatrix vmatrix Vmatrix cases aligned darray\u2020 dcases\u2020. @Flauschbaellchen thanks :). https://github.com/Khan/KaTeX/pull/605 has been merged so there is now support for overset on master.. LaTeX and KaTeX both render the given equation as:\n\n\nIn order to have a stretchy arrow between the two sides of the equations use:\nS{O}_{4}+\\downarrow 2H\\xrightarrow{{H}_{2}S{O}_{4}+2{S}_{4}}{H}_{2}+S{O}_{4}\n\\uparrow \\xrightarrow[{\\Delta }]{{H}_{2}}HCl+H2\\phantom{\\rule{0ex}{0ex}}\nThis produces the following output in LaTeX and KaTeX:\n\n. I believe that imatheq.com's LaTeX output is incorrect in using:\n\\overset{{H}_{2}S{O}_{4}+2{S}_{4}}\\rightarrow\nand should instead be\n\\xrightarrow{{H}_{2}S{O}_{4}+2{S}_{4}}\n. @ronkok awesome PR.  I haven't done a close reading of the changes yet, but we'll definitely want some screenshot tests for the new functionality.. @ronkok I'm sorry that make screenshots didn't work for you.  I'll check out your branch later this week when I have some time.  Thanks for posting the test input you were using.. @ronkok for (2) let's leave them for a second PR as this PR is already pretty big.  I'm going to try to get it review this weekend.. @ronkok how are the changes coming?. @ronkok cool!  I'll checkout the changes and run the screenshotter to generate images for the new tests.. @ronkok I've run the screenshot tests and opened a PR against your PR.\nIn case anyone's interested you can see the screen shots at https://github.com/ronkok/KaTeX/pull/1/files.. @ronkok will do.. > Firefox should be upgraded to the current version. The current version has full, not partial, support for CSS mask, so it will render the proper color for stretchy accents.\nI see what you mean.  We can do that in a separate PR.. Things are looking good, but I'd like to do another pass before merging and it's getting late.  Hopefully I'll be able to merge this tomorrow.. I tried running texcmp and was able to get it to work for some of the new screenshot tests by adding various \\usepackage statements to test.tex.  Here are what those comparisons look like (KaTeX in red and LaTeX in green):\nBoxed:\n\nExtensibleArrows:\n! Undefined control sequence.\n<argument> \\lhook \n                  \\joinrel \\relbar \nl.50 ...poons[ab]{ABC} + \\xhookrightarrow[ab]{ABC}\n                                                   \\\\\nHorizontalBraces:\n\nLowerAccent:\n\nI had to disable \\undertilde because I don't have the undertilde package installed.\nStretchyAccent:\n\nThe first line is shifted over b/c I had to remove \\Overrightarrow b/c I couldn't figure out what package the command is from.\nStrikeThrough:\n\nNot sure what's up with the LaTeX \\sout commands rendering the strikethrough lines as underlines.\nHere are the packages that are being used in test.tex:\n```\n\\documentclass[10pt]{article}\n\\usepackage{amsmath,amssymb,textcomp,gensymb}\n\\usepackage[mathscr]{eucal}\n\\usepackage{eufrak}\n\\usepackage[papersize={133pt,100pt},margin=0.5pt]{geometry}\n\\usepackage{color}\n\\usepackage{etoolbox}\n%% new packages added below\n\\usepackage{mhsetup}\n\\usepackage{mathtools}\n\\usepackage{empheq}\n\\usepackage{extpfeil}\n\\usepackage{fdsymbol}\n\\usepackage{cancel}\n\\usepackage[normalem]{ulem}\n\\usepackage{MnSymbol}\n...\n```\n@ronkok do you know which packages I should be adding to fix the Undefined control sequence errors?. After hammering on it some more, I discovered that fdsymbol also defined lhook so I commented out fdsymbol and the result is:\n\nI'm not sure why \\xtwoheadrightarrow is so long in the LaTeX rendering.  The spacing in between the numerator/denominator and the fraction bar look a little tight.\nThere's a sorts of things that could be improved to bring KaTeX's rendering of the arrows and the over/under braces closer in line with LaTeX's, but I think that's something that's better handled as follow up PRs. \nI would like to eventually get some MathML tests for the new commands, but we don't have an easy to verify the structure of MathML output and I'd like to setup Jest so that we can use its snapshot testing feature before we bother adding tests to check the structure.. @ronkok looks like I have to run the screenshot again.  I'll send you a PR and then you'll have to fix the conflicts in katex.less.. Not sure what happened with a couple of those screenshots.  I've pulled the most recent changes to ronkok/master and am running make screenshots again. . @ronkok thank you for this awesome PR.  I know there's lots of people waiting for all of these new commands, including Khan Academy.  We'll have to do publish soon.. @keshavkaul can you provide a minimal example of the code being used that reproduces this?. Nice find.. @ronkok a project would be a good way to track this kind of stuff.  Updating fonts is currently blocked on creating a separate repo for fonts.  I'll try to tackle this this weekend.\n. @rrandallcainc it looks like we have the fonts.  I think Option#withFont needs to be updated to so that instead of simply replacing the .font property, we'd modify it.  It might even make sense to turn .font into .fonts so that we can toggle the active fonts by adding/removing them from the list of fonts.  We'll also need to apply one or more font classes from https://github.com/Khan/KaTeX/blob/master/static/katex.less.. @rrandallcainc you'll need to create an entry in mapping.pl that looks something like:\n$map{cmss10} = {\n  \"SansSerif-Regular\" => [ ... ],\n};\nI don't know what the actual font names are.  My guess would be cmsb10 and cmsi10.. @rrandallcainc if it's not in either place, but it can be added, but this will mean regenerating the fonts.  Before we do that I'd like to merge in https://github.com/Khan/KaTeX/pull/891 so that we can the size of the KaTeX repo relatively small.  If you have some time maybe you could look over that diff. (edited for grammar). We end up ignore the font because we the symbol fonts Size1-Size4 fonts for these.  May as well fix this so that people don't think that math is a font.. @HosseinAgha cool!  Thanks for taking this on.. Thanks for keeping the constant definitions close to their use site.. @HosseinAgha after you resolve this conflict this should be good to go.. I forgot about this PR :(.  I'd like to land https://github.com/Khan/KaTeX/pull/670 first b/c I think it's going to be less work to rebase this on to those changes than the other way around.  @HosseinAgha sorry about not merging this sooner and avoid extra work for you.. @HosseinAgha #670 has been merged.  As a result there are lots of conflicts.  :sad:  Would you be willing to rebase this?  If not, no worries.  I have some and come open a fresh PR for this.. @HosseinAgha awesome!  What kind of issues are you seeing with server.js?\n. @HosseinAgha thanks or refreshing my memory.  I don't think we have much of choice here.  Could you make a separate PR for the changes to server.js?. I just realized that screenshotter also uses /babel endpoint.  Can you update screenshotter.js to not use the /babel endpoint?. @HosseinAgha thanks for the PR.  I'm excited about using ES6 in our codebase.. @wilbowma sorry about the delay.  Thank you for the PR.  It looks like release.sh will take care of updating the integrity SHAs.  I'd like to the merge right before I publish but I probably won't get to the publish until tomorrow evening.. I forgot to include this in v0.8.3 release so I'm going to merge this now so that I goes out in the v0.8.4 release for sure.  I'll post a separate PR to update the integrity SHAs.. I just realized that posting a separate PR to update the integrity SHAs doesn't make sense b/c the publish has to happen for the new files to be uploaded to CDNs.. I think this will be pretty easy to get working right for single glyphs or a simple horizontal run.  I worry about the center be wrong for larger layouts.. If we apply the rotate transform to the containing the box that we want to rotate it should work correctly for some cases because the default transform origin is 50%, 50%.  That being said, in looking at some of our layouts in the DOM inspector, sometimes there are elements that are partially outside the bounds of the visible contents of the layout which may or may not cause issues with where the origin actually appears.. \nI removed overflow: auto from the container that KaTeX was rendering in and added display: inline-block; transform: rotate(310deg); to the group after the =.. @ronkok why should this be part of core?. @ronkok I think they'd be useful too, but some people may not want to allow that amount of freedom, especially when dealing with user input.  There should be at the very least an easy way to opt out.  Long term I think it would be cool to have ways to create custom builds, but that's a ways out.. I'm guessing the gathered implementation changes the line spacing \"constant\" temporarily while in the environment.  We should add a dictionary for line spacing and other constants using \\setlength, e.g. \\setlength{\\jot}{10pt} changes the line spacing... then gathered could be implemented using a macro.. I've opened an issue for \\setlength support, see https://github.com/Khan/KaTeX/issues/687.. #725 has been merged with master so I'm going to close this.. @edemaine I'm confused about \\textdollar and the other \\text___ aliases.  Won't \\text{\\textdollar} output \\textdollar instead of $?. @edemaine it looks like the change to \\pounds change the symbols screenshot test.  Can you verify that \\pounds is indeed a textord in math mode?  If it, please update the screenshot for the symbols test.. LGTM.  Thanks!. > I didn't know you could put numbers into vertical-align\nNeither did I.  Cool!. @edemaine now that everything's working correctly, can you add a screenshot test?  . @edemaine you may want to use the texcmp docker to compare the output against LaTeX's output.. Good question.  I think having separate raisebox and rotatebox methods probably makes since we'll need to do something pretty different to implement rotatebox.. @edemaine I've merged the fix for #709.  Do you know if there will be additional work after rebasing?. @edemaine thanks for picking this one up again and finishing it off.  The results look great!. Here's the code:\n```\n        let gap = 0;\n        if (group.value.rowGaps[r]) {\n            gap = calculateSize(group.value.rowGaps[r].value, style);\n            if (gap > 0) { // \\@argarraycr\n                gap += arstrutDepth;\n                if (depth < gap) {\n                    depth = gap; // \\@xargarraycr\n                }\n                gap = 0;\n            }\n        }\n    outrow.height = height;\n    outrow.depth = depth;\n    totalHeight += height;\n    outrow.pos = totalHeight;\n    totalHeight += depth + gap; // \\@yargarraycr\n    body[r] = outrow;\n\n```\nI'm not sure what precise behavior is supposed to be here.. Also reported in https://github.com/Khan/KaTeX/issues/531 and https://github.com/Khan/KaTeX/issues/312.. options.length = {\n   thinmuskip: '',\n   medmuskip: '',\n   thickmuskip: '',\n   arraycolsep: '',\n   jot: '',\n   ...,\n}\nIs the implicit group really necessary?  Since the commands listed above are all siblings, they're processed serially.  The \\setlength commands should update options, but not return a group.  Is that what you meant by an \"implicit group\"?. Does the effect of setlength terminate at the end of the group in which the setlength occurs?  Why does the processing of setlength have to happen at the parent level?. #1070 is a pre-requisite for this.  With it, all spaces will be inserted programmatically which means that we'll be able to change their values if \\thinmuskip et al are ever changed.. I don't have any angular2 experience, but I found http://stackoverflow.com/questions/36370826/how-to-get-mathjax-working-with-angular2 which might help. Instead of calling \nMathJax.Hub.Queue([\"Typeset\", MathJax.Hub, this.el.nativeElement]);\nin ngOnChanges you'd call \nkatex.render(\"c = \\\\pm\\\\sqrt{a^2 + b^2}\", this.el.nativeElement);. @garciparedes please open a pull request to a link to the README.md.. We could change renderMathInText so that it takes an optional third argument which is a reference to katex.. TIL that \\right. adds an empty delimiter.. @skillogs what version of KaTeX are you using?. One of the goals of KaTeX is to be as LaTeX compliant as possible.  Both KaTeX's and MathJax's output is readable.  I hesitate to make our fonts thicker just to be like MathJax.. > It's not \"just to be like MathJax\", it's to be more readable on the web. When I find PDFs or Postscript files of LaTeX documents on the web, I groan. They look great on paper. They look poor on a screen, due to limited resolution.\n@jason-s That's a fair point.  I wonder how many people are printing things rendered using KaTeX?  We could have two separate sets of fonts, one for rendering to a screen and another for use when printing.. @mbourne that division sign is awful.  I'm not sure what would compel a rendering engine to change a glyph so radically when rendering it.  :(. @jason-s can you post the TeX source so that it's easy to test the output on newer versions of KaTeX?\n. @edemaine thanks for adding these new commands and @ronkok for the providing the code in the issue report.. LGTM.. It would be nice to have a <KaTeX> component, but it probably makes sense to have that as a separate repo.. @pyramation KaTeX and MathJax both only typeset math within $ (or otherwise specified) delimiters.  https://github.com/Khan/KaTeX/issues/3 is about general support of TeX which is substantially more than just rendering math inside $ delimiters.  The focus of KaTeX is rendering of math, not recreating the full TeX system.. @ronkok looks good except there seems to be an encoding issue with function-support.html.  Github is showing it as a single line and there are ^M.  Could you have a look at that?. Thanks.  Looks great!\n\n. @nitishkumarnitc is renderMathInElement(elem, options) being called when you type inside the textarea?. @nitishkumarnitc you're updating on every keystroke then there will be situations where the user has typed an incomplete TeX string which are invalid it will trigger an exception and won't render.. Do you have code that you can link?  It's really hard to say what the problem is without seeing what you're doing.\n. @MathSalomon the page you linked to is using version 0.1.1 of KaTeX.  If you upgrade your version of KaTeX to the most recent version it should work.. @MathSalomon we only support em, ex, and mu measurements at the moment.. Hmm... all of measurements are em based... maybe we could use calc in a creative way.  How important is support absolute units of measure?\n. We'd have to make KaTeX aware of the actual font size being used.. Yeah... I don't think this is worth the effort. . Sounds good to me.. We may want to add a section to the README explaining how KaTeX measurements are computed and that they scale relative to the font size.. Point taken.  In the docs we can state simply which units are accepted, but we should have a note somewhere about how scaling affects units like mm, cm, and in.. This is in v0.8.0.. Closing since #719 has been merged.. I'll have a look at what's left to do in https://github.com/Khan/KaTeX/pull/140 this evening.. @jsmaniac I'm getting close with https://github.com/Khan/KaTeX/pull/140.  With any luck it should be merged sometime this week and that will unblock this PR.  Thanks for your patience.. @jsmaniac I finally got \\not merged.  Can you update your diff to us \\not instead of /?. @jsmaniac thanks for the PR.  Sorry this took so long to get merged.. @jsmaniac sorry for being over eager to merge your PR.  I think in order to support the unicode char for this you'll have to define a macro, see https://github.com/Khan/KaTeX/pull/950/files for some examples.. I'm surprised that $$ results in <script type=\"math/tex\">x+y</script>.  We have code in contrib/ to auto-render math and code to render math inside <script type=\"math/tex\"></script>, but I don't believe we have any code to generate the <script> tags.  Do you know what's causing this?. Thanks for the PR.  Big improvement in the vertical position of subscripts.\nBefore:\n\nAfter:\n\nBefore: \n\nAfter:\n\nBefore:\n\nAfter:\n\nBefore:\n\nAfter:\n\nBefore:\n\nAfter:\n\n. Thanks for the PR.  I wonder how this interacts with https://github.com/Khan/KaTeX/pull/718.  I'm guessing that after rebasing now that #718 has been merged will result in some additional changes to some of the screenshots.  I'll try to review this over the next couple of days.. The \\sqrt changes look awesome.  It's interesting that many of the screenshots changed, but there doesn't appear to be any visual change.  I can only assume that some change in the order of operations of some of the calculations resulted in an imperceptible change to the layout.  I was surprised by the changes to ModScript-chrome.png without changes to ModScript-firefox.png.\n\nI now believe sizing commands should change to \\textstyle (if the style is currently \\scriptstyle or \\scriptscriptstyle), and that's what's there now.\n\nThis is so that both the sizes glyphs and the spaces between them is consistent no matter where the sizing command is used, is that right?. @kohler sorry for the delay.  I want to merge #670 first.  I'm going to spend some more time tonight looking at it and will hopefully be able to merge it.  My hope is to get your PR reviewed either tomorrow or sometime this weekend.. @kohler sorry.  I haven't reviewed changes to buildHTML.js.  I'll have time this weekend.. @kohler thanks for making those changes and for checking the MathML output.  The output looks good so if there are things that I've missed they must be minor.. I think we should do a release once https://github.com/Khan/KaTeX/pull/670 lands.. I couldn't find any tests that actually verify that this is fixed.  I'm going to add a couple of tests and try to split up our tests a little more so we don't end of with all tests in katex-spec.js.. @edemaine can you rebase and re-run make screenshot now that https://github.com/Khan/KaTeX/pull/718 has been merged?. whoops... I only meant to \"comment\" not \"close and comment\".. @edemaine did you rebase and run make screenshots?  I would've expected the LimitControls screenshots to change, see https://github.com/Khan/KaTeX/pull/718/files#diff-e55441e2f8a6090eac1fdb9e12ed86ed.. @edemaine sorry... I wasn't looking at things carefully.  I was comparing the ascent of glyphs when I should've been looking at the baselines.  Also, for some reason I thought this was a diff that was opened before the #718, but it was actually only opened a few hours ago.. Thanks for the PR.  Awesome to see how quickly new environments can be added.. #751 has been merged.. I think this is okay to merge without screenshot tests.  There are already a lot of commands which don't have screenshots.  CONTRIBUTING.md provides this guideline:\n\nIf you add a feature that is dependent on the final output looking the way you created it, add a screenshot test.\n\nThe word \"feature\" is a little ambiguous.  It would nice if we had a more explicit guidelines in this area.  I think symbols by themselves probably aren't worth having a screenshot test.  Commands that affect which glyphs are display such as font commands could probably be tested by snapshot tests and probably don't need screenshots.  Same with handling unicode.\nThings that do require screenshots are features that implement a specific layout, e.g. array, matrix, stackrel, mathop, lap, frac, not, etc.\nIf someone finds an issue with any of these commands then either the macro is incorrect or one of the commands in the macro isn't behaving correctly and should be fixed.  When it's fixed, we should improve the screenshot test for that command.. We could also add a lot of unit tests to katex-spec.js, but I'd rather be more targeted in our testing and focus on filling in some of the hole in our test coverage.. @ronkok LGTM.  We'll probably want to update the function support page after we do a release.. I had a quick look at HosseinAgha/KaTeX@8696318, cool stuff.  Having a plugin architecture for other languages would be really helpful.. @HosseinAgha one thing to note is that letters inside \\text{} are collated but text outside is not.  Were you looking to support these writing systems inside and/or outside of \\text{}?. > But that's apparently not necessary for their SVG rendering, yet their SVG running times are still pretty slow.\nThe last time I looked into MathJax's SVG rendering it looked like they created an offscreen SVG element that contained all of the glyphs that they needed to render for any on-screen math.  I assumed that it was measuring the glyphs in this off-screen canvas to figure out their metrics.\n\nwhy not have katex use MathJax's parser to generate an internal representation of the math, rather than having our own parser? Another way to think of it, why not have katex just be an \"output jax\" for MathJax?\n\nOne way to approach this would be to write a converter that takes intermediate \"jax\" representation and transforms it KaTeX's current parse tree.  That should mean minimal changes to existing KaTeX code.. The \"jax\" format seems pretty straight forward, here's the tree for ax^2 + bx + c = 0 partially expanded.\n\n. If you squint hard enough at it, it looks like MathML with some extra props.. Here's what KaTeX's parse tree looks like for the same expression:\n[Log] [ (katex.js, line 40)\n    {\n        \"type\": \"mathord\",\n        \"value\": \"a\",\n        \"mode\": \"math\"\n    },\n    {\n        \"type\": \"supsub\",\n        \"value\": {\n            \"base\": {\n                \"type\": \"mathord\",\n                \"value\": \"x\",\n                \"mode\": \"math\"\n            },\n            \"sup\": {\n                \"type\": \"textord\",\n                \"value\": \"2\",\n                \"mode\": \"math\"\n            }\n        },\n        \"mode\": \"math\"\n    },\n    {\n        \"type\": \"bin\",\n        \"value\": \"+\",\n        \"mode\": \"math\"\n    },\n    {\n        \"type\": \"mathord\",\n        \"value\": \"b\",\n        \"mode\": \"math\"\n    },\n    {\n        \"type\": \"mathord\",\n        \"value\": \"x\",\n        \"mode\": \"math\"\n    },\n    {\n        \"type\": \"bin\",\n        \"value\": \"+\",\n        \"mode\": \"math\"\n    },\n    {\n        \"type\": \"mathord\",\n        \"value\": \"c\",\n        \"mode\": \"math\"\n    },\n    {\n        \"type\": \"rel\",\n        \"value\": \"=\",\n        \"mode\": \"math\"\n    },\n    {\n        \"type\": \"textord\",\n        \"value\": \"0\",\n        \"mode\": \"math\"\n    }\n]\nThe supsub is of particular interest so let's zoom in:\n{\n        \"type\": \"supsub\",\n        \"value\": {\n            \"base\": {\n                \"type\": \"mathord\",\n                \"value\": \"x\",\n                \"mode\": \"math\"\n            },\n            \"sup\": {\n                \"type\": \"textord\",\n                \"value\": \"2\",\n                \"mode\": \"math\"\n            }\n        },\n        \"mode\": \"math\"\n    },\n\nMathJax stores a number of properties on the prototype.  My guess is this was done so that it's easier to walk the tree.  The downside of this (along with the parent  property) is that these data structures aren't serializable.  If we're looking for a shared data format which could be used in #251, I'd avoid MathJax's internal format for this reason.  The KaTeX structure isn't bad, but it could be made more regular as currently value props can be an object of various shapes or a string.. I'm going to close this for now.  We may revisit this depending on what MathJax does for parsing in their v3 rewrite.. I think we'll want to eventually have a buildGeom.js, but in this particular situation creating a units.js that can be imported into Parser.js and buildHTML.js probably makes the most sense.. @edemaine thanks for this PR.  I love how simple the changes are for this.. My vote would be for 2.  It doesn't preclude doing any of the other options later.. @edemaine I mis-parsed the choices.  Is there an option that does what's in this PR?  I agree with @ronkok that some people might be confused that cm in their LaTeX code behaves differently from the CSS's notion of cm, but... I feel like more people would be confused when they copy/paste stuff from tex.stackexchange or wherever and things look off.  Option 3 sounds alright, but b/c this PR implements half of it.  I would be okay with deferring making it configurable.. @edemaine I've merged #719.  Can you rebase this?. It's hard to tell what's going on with the spacing for \\scriptstyle and \\scriptscriptstyle b/c of the difference in horizontal metrics.  It would be nice to fix that at some point.  After some quick googling it appears that it's possible to scale an element such that elements flow around it properly instead of leaving whitespace (or lack thereof).  Another PR for another day.. @edemaine what font size would this need to be rendered at to verify that 1cm is actually 1cm?. Some thoughts:\n- calling out that we scale KaTeX fonts by 1.21x and how to change that is good as I think this is something that can catch people off guard\n- I doubt that many people using KaTeX for print so being able to scale things so that absolute measures are accurate is not important (I was asking out of curiosity)\n- some people may be interesting in how absolute measurements are handle so calling out that they scaled by the same scale factor that is applied to the rest of the layout is probably worth doing, but getting into the nitty gritty details probably isn't. @edemaine thanks for the PR.  @kohler thanks for reviewing.. @Brett99 can you try switching your doctype to <!DOCTYPE html>?. We don't support quirks mode... yet, see https://github.com/Khan/KaTeX/pull/608.. I was able to reproduce this using the demo page in Safari 10.. I've noticed while working on https://github.com/Khan/KaTeX/pull/140 that Safari doesn't like combining characters.  :sad:. MathJax is having the same issue, https://github.com/mathjax/MathJax/issues/1737.  There's a link to a fix at the bottom of that issue.. @ronkok thanks for giving it a try.  I'll play around with it when I have some time.. Hmm... not sure why travis didn't run tests on b3aa1b4.. @kohler can you push a commit with a trivial change?  Hopefully that'll be enough to make travis run the tests.. Good enough for me.. @kohler thanks for the PR.  Hopefully this is a one off situation with travis.. I someone has access to a Windows box can they post screenshots of what the issues look like on Edge?. Looks like the merge conflict is gone so I'm going to merge this.. @ronkok thanks for updating the docs. . @ParveshChauhan check out https://github.com/lingarajsankaravelu/Katex for an example of how to use KaTeX with an Android webview.. I'm confused.  The iOS screenshot looks like it's rendering correctly.. Thanks for improving the auto-render docs.. @johnmcconnell what would renderMathInText look like and how would it differ from renderMathInElement?. Closing due to lack of activity.  @johnmcconnell please re-open if you're still interesting in this.. @johnmcconnell will you have time to make the changes that xymostech requested?. @johnmcconnell feel free to re-open.. @kohler looks good.  Thanks cleaning this up.. @kohler could you post a screenshot of \\frac{\\textcolor{blue}{\\rule{2em}{2em}}}{2} from the original issue?. \nCurious got the better of me.  It'd be good to have this as a screenshot test as it's more obvious what the problem is in this example as compared to the existing screenshots that change.\nOne concern I have about adding more screenshot tests is that the tests and taking longer and longer to run.  I hope that the new headless modes for Chrome and Firefox will make it easier to take screenshots.. @kohler how did you test this?  Could you post some (before/after) screenshots \\mathop expressions that are affected by this change?. Looks good.  Can you add a screenshot test for that?  Screenshots for single tests can be generated using the include option, e.g. dockers/Screenshotter/screenshotter.sh --include=Sqrt.. @ronkok I'm okay with releasing \\boxed in its current state, but if there are known issues with a new feature we should include those issues in the release notes.. > I'll trust that this will end up being a useful change.\nI hope so.  In particular the snapshot testing will change:\nconst tex = \"Ax2k\\\\omega\\\\Omega\\\\imath+\";\nconst tree = getParsed(tex);\nconst markup = buildMathML(tree, tex, defaultOptions).toMarkup();\nexpect(markup).toContain(\"<mi>A</mi>\");\nexpect(markup).toContain(\"<mi>x</mi>\");\nexpect(markup).toContain(\"<mn>2</mn>\");\nexpect(markup).toContain(\"<mi>\\u03c9</mi>\");   // \\omega\nexpect(markup).toContain(\"<mi mathvariant=\\\"normal\\\">\\u03A9</mi>\");   // \\Omega\nexpect(markup).toContain(\"<mi>\\u0131</mi>\");   // \\imath\nexpect(markup).toContain(\"<mo>+</mo>\");\ninto\nconst tex = \"Ax2k\\\\omega\\\\Omega\\\\imath+\";\nconst tree = getParsed(tex);\nconst mathML = buildMathML(tree, tex, defaultOptions);\nexpect(mathML).toMatchSnapshot();\nJest will generate a snapshot file that contains JSON objects for each snapshot test.\n\nIt looks like the screenshotter is somehow assuming Jasmine, causing Travis to fail, so need another tweak there?\n\nI'll fix that.  There's also references to jasmine in CONTRIBUTING.md so I'll change those as well.\n\nPerhaps you could test the code I put there to see whether it resolves the warning issue?\n\nI'll give it a try.. The code from #664 does indeed fix the issue.  I guess we could use your fork of jest until it gets fix upstream.. Snapshots should be included in PRs so we can verify from the snapshot file that the correct mathvariant is being set.. The coverage took a while to run but here's the output:\n```\n(khan27)kb-no-mbp:KaTeX kevinbarbash$ node_modules/.bin/jest --coverage\n PASS  test/katex-spec.js (138.191s)\n PASS  test/errors-spec.js\n PASS  test/unicode-spec.js\nTest Suites: 3 passed, 3 total\nTests:       311 passed, 311 total\nSnapshots:   0 total\nTime:        138.912s\nRan all test suites.\n---------------------|----------|----------|----------|----------|----------------|\nFile                 |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |\n---------------------|----------|----------|----------|----------|----------------|\nAll files            |    79.41 |    67.19 |    79.85 |    79.41 |                |\n KaTeX               |    66.67 |    33.33 |       50 |    66.67 |                |\n  katex.js           |    66.67 |    33.33 |       50 |    66.67 |... 29,36,40,41 |\n KaTeX/src           |    79.51 |    67.37 |     80.3 |    79.51 |                |\n  Lexer.js           |     96.3 |     87.5 |      100 |     96.3 |             59 |\n  MacroExpander.js   |    93.75 |    84.38 |      100 |    93.75 |... ,94,100,109 |\n  Options.js         |    90.74 |    77.42 |    92.31 |    90.74 |... 105,124,177 |\n  ParseError.js      |      100 |      100 |      100 |      100 |                |\n  Parser.js          |    95.11 |    92.34 |      100 |    95.11 |... 872,876,878 |\n  Settings.js        |      100 |      100 |      100 |      100 |                |\n  Style.js           |      100 |       75 |      100 |      100 |             13 |\n  buildCommon.js     |    89.44 |    78.79 |      100 |    89.44 |... 323,326,334 |\n  buildHTML.js       |    60.83 |    53.27 |    72.22 |    60.83 |... 3,1685,1717 |\n  buildMathML.js     |    73.53 |    71.19 |    64.44 |    73.53 |... 627,628,658 |\n  buildTree.js       |       90 |       50 |      100 |       90 |          15,33 |\n  delimiter.js       |    36.32 |    26.32 |    76.92 |    36.32 |... 486,500,501 |\n  domTree.js         |    70.63 |    66.67 |    69.23 |    70.63 |... 281,282,284 |\n  environments.js    |    94.19 |    91.18 |       90 |    94.19 |... 261,269,270 |\n  fontMetrics.js     |    93.33 |    66.67 |      100 |    93.33 |        257,259 |\n  fontMetricsData.js |      100 |      100 |      100 |      100 |                |\n  functions.js       |    87.88 |    84.21 |    83.33 |    87.88 |... 494,624,747 |\n  macros.js          |      100 |      100 |      100 |      100 |                |\n  mathMLTree.js      |       75 |       50 |    71.43 |       75 |... 45,46,49,89 |\n  parseData.js       |      100 |      100 |      100 |      100 |                |\n  parseTree.js       |      100 |      100 |      100 |      100 |                |\n  stretchy.js        |    77.59 |       60 |      100 |    77.59 |... 164,166,167 |\n  symbols.js         |      100 |      100 |      100 |      100 |                |\n  unicodeRegexes.js  |      100 |      100 |      100 |      100 |                |\n  utils.js           |    64.52 |    57.14 |    55.56 |    64.52 |... 81,84,85,94 |\n---------------------|----------|----------|----------|----------|----------------|\n```\n\"Uncovered lines\" are the line numbers that aren't covered by any test.  It'd be nice to get functions.js and parser.js to 100% eventually.. > I guess we could use your fork of jest until it gets fix upstream.\nI'll wait for https://github.com/facebook/jest/pull/3937 to be merged.  I think this PR can be merged before then though.  There's a warning in the jest output, but it's harmless.. @edemaine I think I've addressed all of the concerns.  This should be good to merge now.. I've updated CONTRIBUTING.md to also suggest using the interactive editor for debugging test cases by copy/pasting the test cased into the editor.  This should cover most (all?) interactive debugging use cases.  @edemaine let me know if that addresses your concern about removing the ability to run the tests in the browser.. @edemaine thanks!  I'm really looking forward to writing some snapshot tests.. Cool!  I didn't know about \\definecolor.  I think implementing that to support at least the RGB and HTML models makes sense since we already have a colorMap object.. @kohler thanks for the changes.  @edemaine thanks for looking this over.  Always good to have a second pair of eyes.. @kohler I'm super excited about this change.  A lot of time and effort has gone into our current solution so I'm glad that you were able to iterate on it to speed it up in a reliable way.. LGTM.  Thanks.. I'll have a look at this tomorrow.. I ran dockers/Screenshotter/screenshotter.sh --verify --diff --include=RelativeUnits locally and ended up with the following images.\nChrome:\n\nFirefox:\n\nNot sure why the test run you linked passed and these failed, but it seems to be failing consistently.  I'll send you a PR with updated screenshots.. Remove the \\rules containing mu units, texcmp renders the following:\n\nThe relative distances between as and bs appears to be the same.  LGTM.. I see you also made this change in https://github.com/Khan/KaTeX/pull/679.  I thought it was going to be more involved, but it's not so let's fix it there.. > Since I have never mastered Screenshotter, I would appreciate any help. It all looks pretty good on my test page.\nI can help out, but it would be good to diagnose the screenshotter issue as well as other people may run into the same issue.. I thought closing/reopening might fix the travis-ci issue.  I've sent github support an email about the issue.. There we go.. Hmm.. not sure why the Boxed screenshots are failing.  I'll look at it this evening.. I see what the issue is.  I didn't commit the changes to ss_data.yaml.  I can fix that.. When comparing the updated images for HorizontalBraces using the swipe feature I noticed that the underbrace is no longer centered when it should be.\n\nAnother difference from LaTeX that this test points out is that the effect of \\displaystyle should continue past the group that immediately follows it.  Notice how large the fraction is.  I'll open a separate issue for this.. @ronkok it's possible that github is treating https://github.com/Khan/KaTeX/pull/765, which was merged recently, as a conflict.. I'm confused as to why the updated files HorizontalBraces aren't showing up in this PR. :|. Looks like it's StrikeThrough that I should've regenerate screenshots for.. As expected.  Even with master no longer being a protected branch the travis-ci integration isn't work.. This was just to test travis-ci integration.  Seems to be working now.. This is what's already being done.  I guess the difference is in the current code we have a hard edge vs. a soft one.. I've modified the .cancel styling in katex.less by subtracting/adding 0.5px to the leading and trailing edges of the cancel line.\n.cancel {\n    background:\n        linear-gradient(to top left,\n            rgba(0,0,0,0) 0%,\n            rgba(0,0,0,0) ~\"calc(50% - 0.04em - 0.5px)\",\n            rgba(0,0,0,1) ~\"calc(50% - 0.04em)\",\n            rgba(0,0,0,1) ~\"calc(50% + 0.04em)\",\n            rgba(0,0,0,0) ~\"calc(50% + 0.04em + 0.5px)\",\n            rgba(0,0,0,0) 100%);\n}\nIt seems to look good at a variety of font sizes (12px, 20px, 30px, 72px):\n\n\n\n\n. @sthoch see the #761 for the results of testing.. @ronkok thanks for testing across all of those different browsers.. @mbourne is the idea to convert ASCIIMath syntax to LaTeX syntax and then have KaTeX render the result?  If you're calling KaTeX's render method manually then a plugin probably isn't necessary b/c you can pipe the output of something like https://github.com/tylerlong/asciimath-to-latex to KaTeX's render method.  If you you're looking to tie into the auto render extension then that will have to be updated to include an optional callback that can be run on each string to preprocess it before sending it to KaTeX.. @ylemkimon we're working on refactoring things so that functions are defined by a single function, defineFunction, see https://github.com/Khan/KaTeX/blob/master/src/defineFunction.js.. @ylemkimon if they aren't exposed via the public API won't the plugin have to include all of KaTeX?. Looks great!. I wanted to make sure things worked with defining multiple functions at once so I extracted delimiter sizing functions into their own file.. I'm waiting for #781 to be merged before proceeding with this.  The hope is to convert all over our functions over this kind of a format.  The benefit I see is that defineFunction can be pass everything it needs to define a function including the HTML and MathML builders it makes it easier for us to eventually export defineFunction so that other developers can define functions at runtime.  In essence this would be a very simple plugin architecture.  Before actually actually exporting defineFunction though, I'd like to also clean up our parse tree so it's more consistent and not unnecessarily deep.. > I have one main comment, which would involve changing all defineFunction calls, so is maybe a little drastic... Let me know what you think!\nI've side-stepped updating all existing defineFunction calls by adding a wrapper around the new one with the change you suggested.. @edemaine good call on updating CONTRIBUTING.md.  I'll make changes to it this evening.. I'm going to merge this after #833 so that I can put all phantom functions in the same file.. @edemaine thanks for digging up that issue.  It sounds like they want to fix it and are prioritizing it so that's promising.\n@kohler since it looks like this bug is going to be fixed in Chrome and it doesn't exist in other browsers the rounding issues probably shouldn't be a block, but it'd be good to do some testing at smaller font sizes to see how much of an impact this has on layouts at those sizes.. @kohler sorry for the delay.  I'll review this this weekend.. > These assumptions are new: the old code did produce different results on different browsers, but only in terms of the extra whitespace around KaTeX math, rather than within the math itself.\nI noticed this when reviewing the screenshots.  It seems like there is generally less extra padding which is a good thing imo.\n\nBut there might be differences on different platforms.\n\nAwesome article.\n\nThree examples from screenshotter tests:\n\nI was concerned about vertical/horizontal rules getting too close to numbers/letters.  The examples in the screenshot look alright.\n. @kohler thanks for the PR.  I believe this unblocks https://github.com/Khan/KaTeX/pull/685 and changes to \\sqrt previewed in https://github.com/Khan/KaTeX/issues/60.  Is that right @edemaine and @ronkok?. Another way to test on iOS is use the simulator that comes with Xcode.. Interestingly that test page looks good at 72px and then falls apart as the font size is decreased.. @ankygupta92 what command are you running to build?\n. So I ran the screenshotter locally and I'm getting the same error that we're seeing on the travis with inner.style being undefined.  I was able to reproduce the error by loading:\nhttp://0.0.0.0:7936/test/screenshotter/test.html?tex=%5Cerr%5C%2C%5Cfrac%5Cfracerr3%5C%2C2%5E%5Csuperr_%5Csuberr%5C%2C%5Csqrt%5Csqrterr&noThrow=1\nFor some reason we aren't catching the exception in this situation.. @kohler those screenshots look really good.. @ronkok rebasing can be a pain especially if there a lots of commits with conflicts.. @kohler I'll review this evening.  The screenshots look good.. > I'll review this evening\nI was overly optimistic.  I'll try to get to it this weekend.. The \\sqrt rule looks a lot better.  I've found the smaller font sizes to be more troublesome.  Here are some renderings using 12px sized font.\nSafari\n\nSafari @ 400%\n\nChrome\n\nChrome @ 400%\n\nI tried out some other font sizes.  18px was the worst.\nSafari @ 400%\n\nChrome @ 400%\n\nMy guess is that the \\sqrt rule is a bit to high on Chrome for 18px and is getting clipped.  This also happens at 11px and might happen for other font sizes.  I zoomed to 100% just in case the zoom was causing an issue and the rule was still missing.  This should be fixed before merging.. I'm running a dev version of Chrome.  It said it was ready to upgrade so I upgraded and the problem went away.  This also resulted in better positioning at 12px.  The sort-line is no longer floating a little bit above the square root symbol.. @kohler thanks for the PR.  The updated horizontal rules look great.. I'm going to close this for now.  It's probably best to start a fresh PR anyways since the code has changed a lot.. @kohler thanks for the quick fix.  @ronkok thanks for checking the rendering in all those browsers.. @ronkok due to the variability in the position of the \\sqrt rule that remains after https://github.com/Khan/KaTeX/pull/776 I think we'll still want to accept this PR.. It's unfortunate about the background image not printing out, but we're using background-image for all of the stretchy accents and overline/underline.  In for a penny in for a pound.. @ronkok I'll send you a PR with screenshots for these changes.. \nGreen is LaTeX and red is KaTeX.  It looks like the surd is one size too big for the scriptscript root on the right.. @ronkok thanks for fixing the surd size.  I'll send you updated screenshots later today.. \nThere's still something a little wonky with the superscripts, but the sizes are matching much better.  I'm okay with merging this and tweaking this latter.  The problem this diff fixes is much worse than the minor differences I'm seeing now.  I won't get to reviewing the code until tomorrow evening.. That might explain why the subscript looks good by the superscript is off.. @ronkok you may want to try creating a branch per PR.  You can always delete the branch after the PR closes.\n. @ParveshChauhan can you provide some more details about what you're trying to do?  What HTML are you loading into the web view in your app?. If the currency symbol is within the LaTeX code you're trying to render you will get an exception as we don't support this unicode symbol.  Check the console for errors.  You should see something like:\nParseError: KaTeX parse error: Expected 'EOF', got '\u20b9' at position 1: \u20b9\u0332. @ParveshChauhan I'm not sure what's happening with the HTML tags not displaying.  As for adding \u20b9 we'll need to find a font that contains the symbol and extra metrics for it.  What package(s) are you using to rendering this in LaTeX? . Fixed by https://github.com/Khan/KaTeX/pull/784.. @mbourne thanks.  I've fixed it now.. I'm going to close this since the release notes in GitHub already provide this info.. @ronkok looks great.  I like how you called out the change in behavior for \\color.. I've opened https://github.com/Khan/KaTeX/pull/789 to update the demo page to 0.8.1 as well.  We should try to land these two PRs at the same time.. @mbourne the issue with the triangles is an existing issue.  I did git blame on the lines in question and they haven't been changed in over 2 years.  Can you open a separate issue for the triangles?. I thought there was supposed to be a size difference between \\triangle and \\bigtriangleup but that isn't actually the case.. @ronkok thanks for updating the function support page.  It looks great!. I thought this was going to be an easy issue, but the glyphs aren't in the font which means we have to figure out which fonts they're in and then copy them over.. I thought there was supposed to be a size difference between \\triangle and \\bigtriangleup but that isn't actually the case.. The triangles look right on http://copyasmarkup.com/katex/function-support.html.. It sounds like the original issue that @mbourne was seeing is gone now.  Is this safe to close?. @edemaine thanks for testing it.. I should probably do an 0.8.2 release now that this has been merged.. I was thinking that for future major release it might be good to do a couple of RC release to work out the kinks when there are big changes.. > In this case, perhaps we should accept this PR and then make a new one to rewrite \\red etc. in terms of macros? \nI think that makes sense.\n\nI could use some clarification on whether those macros belong in KaTeX (e.g. for backwards compatibility) or in another KA project.\n\nAs per the comments in #28, we definitely want to move KA custom colors out of KaTeX but in a thoughtful way.. @xsznix thanks for the PR.  @edemaine thanks for reviewing.. @edemaine this is awesome.  I don't have a very good understanding of macros so hopefully @gagern and others can help out with the review.. I'm going to try to get this reviewed over the next couple of days.. Another benefit of the SVG being inline is that if you serve it gzip'd a lot of the duplication will get compressed away.. @glebm this should be fixed with the release of v0.8.3.  Please reopen if the new version doesn't solve this issue.. Oh noes... we aren't using CM for latin-1 chars inside \\text either.  Having this work correctly will require #632 and the some additional work to actually render combining marks for each of the accent types.  We'll also need to update how we calculate the height (ascent) and depth (descent) for the combined glyphs that we construct.  There's a fair amount of work involved so it's probably best to split it up.  I'm okay with this diff as is, but we should aim for rendering CM glyphs for latin-1 eventually.. @edemaine can a macro be defined for something without a leading \\?. I've added a project to track work relating to latin-1 support.. I'll publish 0.8.2 this evening.. This should be fixed now with the release of 0.8.2.. @glebm could you link to a page that shows the bug in action?. @glebm this should be fixed with the release of v0.8.3.  Please reopen if the new version doesn't solve this issue.. @jpzwarte I tried disabling the font rule on the body element and wasn't able to reproduce the issue.  What browser, version, and OS are you running?  We use border-bottom-width for the rule b/c it should (at least in theory) always be rendered even if the font is small or the user has zoomed out a lot.. It shouldn't.  The browser is supposed clamp border width at 1 (physical?) pixel, specifically so that borders don't disappear if you zoom out.  I have the exact same version of Chrome as you for Mac and can't repro it on a retina display.  I'm on 10.12.5.. <span class=\"sqrt-line\" style=\"border-bottom-width: 0.04em;\"></span>. Fixed by #810.. @sandhose in https://github.com/Khan/react-components/blob/master/js/tex.jsx we use dangerouslySetInnerHTML to side step this issue in React.  I'm not sure if Vue.js has a similar mechanism or not.. @sandhose I think you should be able to use the output of buildHTML and use that to generate a HAST tree.  I had a look at https://github.com/syntax-tree/hast and it may make sense to modify buildHTML to produce a HAST tree.  I don't see any reason for us to have our own HTML tree structure when there a more standard one exists.. @sandhose could we not add a innerHTML property which is a string?  https://github.com/syntax-tree/hast#properties seems to indicate that both attributes and properties.. @sandhose if you're not modifying the nodes within the SVG is there really any benefit from the SVG being described as virtual DOM nodes as opposed to a string?. @wooorm good point about perf during client-side renders.  @ronkok what are your thoughts on build an AST for the inline SVG bits and then using createElement and appendChild to render them?\nI'd want to try HAST format for the non-SVG parts of the tree first and see how that goes before putting in the effort convert the SVG parts.. @sandhose some of our nodes output document fragments.  Is there a way to model that with HAST?  Would it just be an array of HAST nodes?. After investigating the hast format some more I've concluded that it's not appropriate for our use case, in particular:\n- there is no fragment node\n- it stores class and style as simple string attributes\nI would like to simplify our current in memory HTML objects to be plain objects instead of classes, but I think that storing classes as an array and styles as an object is a superior especially for checking for the presence of particular styles or CSS classes or for modifying those.\nAfter we refactor those objects (and extract non-HTML props into an intermediate representation) they should be stable enough (and simple enough) that writing a translator from our HTML objects to hast should be trivial.. @wooorm thanks for pointing out className.  I should've read the section on \"Property values\" more closely.\n\nThere\u2019s no special format for style.\n\nWhat does that mean?  Is it a string or an object?\nAre there any examples of how fragments are dealt with?  We'll never return a fragment so fragment support isn't a deal breaker.. We should look at porting this fix https://github.com/mathjax/MathJax/pull/1775/files.  I feel like that's a separate issue/PR.. \nThe Chrome changes look good for me.  I started playing around with the styles on Safari and it looks like margin-left should be -spaceWidth + xMin for each of the accents.  The xMin for the accents is a negative number b/c it's to the left of the origin.  \nThe width of the space character is 0.250em according to opentype.js (I uploaded KaTeX_Main-Regular.ttf).  For each of the accents the average of xMin and yMin is -0.250em which ends of centering it perfectly over the center of the space.  Since Chrome renders the accent character correctly over the space, all we have to do is to correct for the space alone which is why the margin-left: -0.250em does the trick.\nChrome however treats the accent as a character with a real width from xMin to the origin.  In the case of the umlaut which has an xMin of -0.405em, the resulting correction is margin-left: -0.655em.\n\n\nNotice that this doesn't quite fix the single dot accent to the left of the umlaut.  This is because its xMin is a different value.\nThis means that the solution is different for Safari and Chrome.  The MathJax hack special cases Safari as well.  The unfortunate result of this is that server side rendering will only work if you return different markup based on the browser's user agent.  For client side rendering special casing shouldn't pose a problem.\nOne last note: fontMetricsData.js doesn't actually contain the values we need for the accent characters to fix Safari so we're going to need to extract those from the font.. @edemaine let's not worry about fixing Safari accent positioning in this diff.. @edemaine I didn't try removing the hack.  If all the new accents work on Chrome without the hack, let's take it and get this merged and we can deal with Safari separately.. To fix \\H for Safari we could look at updating the font to create a non-combining version of the glyph, but that's another PR.  Also, if we end up not using the combining versions of these glyph we might look at removing them completely from the font to save bytes.\n. @xsznix thanks for the PR.  This features should come in really handy for people wanting to sanitize user input a bit.. @xsznix friendly ping.. @xsznix thanks for updating the PR.  The tests look great.. Good point about having two contexts.  I'll need to think some more about how we could differentiate them.  Changing options to settings though would be a good start.  . Closing in favor of #873.. I think this could maybe be done it two parts:\n- [ ] option to automatically convert ( to \\left( and ) to \\right)\n- [ ] option to ignore superscripts/subscripts when calculating ( and ) delimiters. Maybe we can make the tokenize to favor parsing \\left( over \\left, (.. Just as long as \\\\lbrack isn't a macro for [. \ud83d\ude09 \n@AlbertHilb a PR would be most welcome.. The test page looks great!  I checked IE11 and it looks great too.  I'll regenerate the screenshots later today.. > \\cancel line is in px units, not em units\nThe stroke-width can also be controlled by inline CSS, e.g. <line style=\"stroke-width: 0.2em;\"/>.. I checked out the changes and ran make build.  The resulting minified JS + CSS is 203K vs 193K.  With gzipping the minified files, the difference is 49K vs 44K.. Even if the editor is modifying parse tree nodes, we'd probably eventually want to serialize those nodes so being able to convert back to LaTeX at some point would is important.. \nGreen is LaTeX, red is KaTeX.  The spacing between the horizontal rules in the superscripts is improved over the last iteration of the inline SVG.. Some of the radical symbols seem to be missing padding on the left that's built into the glyph.\nbefore:\n\nafter:\n\nHighlighting the outermost sqrt of the first superscript shows that there is no left padding in that sqrt.\n\nThe large sqrt symbols seem to be the ones that are affected as there should be a gap between the first superscript and the second.  There should also be more space to the left of the leftmost sqrt.\nI looked at KaTeX_Size1-Regular and KaTeX_Size2-Regular fonts in opentype.js to confirm that there is indeed left padding built into the glyphs.\n\n@ronkok can you update the inline SVGs to include the missing left padding?  Sorry for not catching this in in the original review.. > Before that point, I have things somewhat automated, but afterwards a change is pretty tedious. No matter. I'll do it.\nDo you have a script?  Would it be possible to add the padding via bounding box change?. \nLeft-padding on surds looks good now.. \nMathJax output for comparison.. @ronkok thank you so much for this PR.  This fixes https://github.com/Khan/KaTeX/issues/60 which has been around for almost three years.  \\sqrt look awesome!. All of the issues will be preserved with the move.  We'll probably want to create a Khan/KaTeX fork from KaTeX/KaTeX after the move that way if someone does have something hardcoded it will still work.  We should probably have a message that top of the Khan/KaTeX README.md pointing people to KaTeX/KaTeX.  There is link from https://www.npmjs.com/package/katex to Khan/KaTeX but we should be able to update that.  We'll need to update gitter as well. . Update: we now have https://github.com/KaTeX.  The main repo will continue to live at Khan/KaTeX for the time being though.. This repo has been transferred to the KaTeX Github organization.. We'll also have to update the badges in the README.. I've got stung a couple of times pushing changes with lint in it.  Maybe we could run lint as a pre-commit or pre-push hook.. http://caniuse.com/#search=clipboard\n\n. I ran into the same issue.  Maybe we can walk up the tree until we hit a .katex node so that it's a little more forgiving with the selection.. Safari's select-all behavior isn't very good.  It copies the right thing, but what it shows for its selection highlight is ridiculous.\n\n. \nThe KaTeX logo selection works fine.  My guess is probably some issue with vertical layouts.. The height for some of these characters is going to be wrong, but I think that's okay b/c there will almost always be non-punctuation CJK characters around them.. I'm glad that this was easy to add.  Thanks @edemaine!. > (Do Git hooks work on Windows?)\nAccording to https://stackoverflow.com/questions/18277429/executing-git-hooks-on-windows:\nBy default, Git for Windows executes hook scripts using its own Windows port of the bash shell.. Thanks for adding this.  It should save some time next time I forget ;.. I've created a new repo for our fonts at https://github.com/KaTeX/katex-fonts.. @samridhgupta is \\per any different from /?. Apparently it does.  From the docs for the siunitx package:\n\\si[per-mode=symbol]\n{\\kilogram\\metre\\per\\ampere\\per\\second}\nresults in\nkg m/(A s). We could try switching to https://github.com/observing/pre-commit.  I've used it the past and it's worked well.. @ronkok thanks for the PR.. @pauljadam thanks for reporting this.  Ideally, it be great if we could find a way to make VoiceOver work while showing the HTML rendering.. @somewhatabstract's suggestion sounds promising and easy to do.  Let's try that first.. @pauljadam the example you linked to is just rendering MathML and nothing else.. I think that maybe we can provide some way to optionally render the MathML visually.. The problem with MathML is that each browser is going to render it differently.  It really feels like a stop gap measure.  Although Houdini and the Accessibility Object Model are a ways off, they are imo much more promising in terms of moving math rendering and math accessibility forward.  At the bottom of the Chromium issue they're talking about using Custom Layout (part of Houdini) to implement MathML.  When all browsers support Custom Layout, MathML could potentially be provided as a library.. I was curious how screen readers actually read out our MathML and it's not pretty.  It reads things as f, left paren, x, right paren, etc.  Ideally we'd want it to read f of x equals the integral....\n\nI had to drill down several layers to get to the first real sub-element which it turns our was just f.\n\nAlthough we have a <semantics> tag we only include presentation markup within it.  We should be including content markup which describes the structure of the mathematical expression.  Unfortunately, LaTeX/KaTeX is purely presentation and extracting the structure of a mathematical expression for all possible input strings is impossible.  While it would work for some simple cases, e.g. \\frac{x}{y} for more complex things it may fail.  There's also the question of whether one tries to build a string from the input or from the macro expanded input.  That being said, doing something is better than doing nothing.  Using a best-effort approach is probably the way to go with this.\nIn the short term we should probably just set aria-label on root to be a string generated by SRE or similar library.  I believe we had some code at one time that generated a string on basic heuristics, I'll see if I can dig it up.\nIn the long term we should look at generating a semantic tree structure that generally follows what MathML's content markup does.  Then we can use that structure to generate content markup for those browsers that support it generate some other structure such as nested spans without appropriate roles and aria-labels or maybe the accessibility object model will be ready in some browsers.  The key thing is, is that if we don't a good way of structure data what's read out won't be easily understood let alone easily navigable.. Here's what Khan Academy was using before switching to MathML:\n- code: https://github.com/Khan/react-components/blob/master/js/katex-a11y.js\n- test cases: https://github.com/Khan/react-components/blob/master/test/katex-a11y-tex.json\nGive what we output for MathML I think that what katex-a11y.js generates is superior and we should probably switch back.. I think some of the language could be improved:\n- instead of using \"start/end superscript\", \"start/end exponent\" might be more appropriate\n- f' should probably be read as f prime instead of f, prime\n- there are probably a couple of things that could be simplified, e.g. x^2 could be read as x squared instead of x start superscript 2 end superscript, same thing for cube root\n- for simple fractions like \\frac{5}{12} it would be nice if we could generate five twelfths\nIt looks like it handles multi-digit numbers correct which is good.\n. @jasonsperske this will be fixed by #819.. Fixed in v0.8.3.. This fixes #818.. Merging so that I can do a publish.. Fixed in #810.  See #799.  I'm going to leave this issue open until we publish a new version with the fix.. I should mention that the #810 does not fix the fraction bar issue.  I have not been able to reproduce either issue.  @akalin what browser and OS versions are you using?. The \\sqrt issue is fixed in v0.8.3.. @xsznix what happens if you put the \\sqrt in the denominator or have it outside of the fraction?. It looks like the 2 is clipped.  My guess is that the container that the math is being rendered into is too small.  @sophiebits what's a good way to report issues to the Messenger team?. In #312, @xymostech pointed out that we make our fonts thicker and so our font metrics should be adjusted.  Fixing this may address the core of the problem.  The downside of fixing the metrics is that it will probably make our output deviate more for LaTeX's output.. Both of the screenshots below were taken on a retina screen.  Even though the sizes of the images are different the relative width of the fraction bar compared to the width of the lines in the equal sign should be the same.  It looks like the KaTeX rendering of the fraction bar is not as thick as it should be. \nkhan.github.io/KaTeX\n\npdflatex:\n. This is what's currently on master (with displayMode: true).  You'll notice that the fraction bar is much thicker and matches what pdflatex is doing.  I'll do a release tomorrow and hopefully that will fix this issue.\n\n. @akalin nothing's blocking the release other than I'm on vacation and busy seeing people.  The weather's supposed to be bad Monday so I'm spend some time doing the release then.. I tried to do a release this morning but ran into issues with the release script that I need to debug.. I've resolved the issue and finished the release.  @akalin and @mbourne please give https://github.com/Khan/KaTeX/releases/tag/v0.9.0-alpha a try and see if that resolves this issue.. To be clear... the release in my previous post should help with fraction bars disappearing, but does not add any padding to address the radical bar disappearing issue.. @mbourne have you tried 0.9.0-alpha1 yet?  That's the release that has #931 which makes the issue better.. @ronkok sounds good.  I was looking to do an v0.9.0-alpha2 release sometime this weekend.  Also, switching from bottom-border to span height and using min-height sounds like a good plan.. \nThe above rendering is from Safari.  The height for each of the fraction lines is the same, the problem (I think), is that we're control the height the fraction line using the enclosing span.  My guess is that the browser tries to quantize the span to some grid and ends up rounding up/down depending on where it lands.\n@ronkok maybe we could render a SVG line of the correct thickness within the SVG and then make the enclosing span a bit taller than it needs to be.  Also, the line shouldn't be right near the edge of the SVG.  That should avoid the quantization/clipping the we're seeing currently.. @akalin thanks for verifying that the bug is no longer in the new release.. @marcianx nice find.  If you have time, a PR for this would definitely be welcome.  As for this being a backwards incompatible change, we can bump the version to v0.9.0 the next time we publish.. @marcianx that's a really good question.  Your github profile clearly shows that you're a Google employee.  I guess khanbot needs an upgrade.  It should be possible to check a github profile against the corporate signatures we have.  In the meantime, I'm going to ignore khanbot b/c I've verify that you do indeed work for Google.. \n\nThe reason why \\hphantom is off a bit is b/c some of the horizontal spacing around/inside of fractions is still off a bit.\nThe screenshots look great.. unknown repository \ud83d\ude1f\nAlso, https://patch-diff.githubusercontent.com/raw/Khan/KaTeX/pull/826.patch doesn't work.  \ud83d\ude1e . Running npm install may have also fixed this.. Hopefully this isn't a widespread issue.. I'm ignoring khanbot b/c it doesn't know how to verify people from organizations who have signed.. @edemaine it'll be nice to be able to use modern JS in contrib code. . @schmuli thanks for the PR.. @ronkok I've updated the \\llap, \\clap, and \\rlap to use textrm instead of mathrm.  The unit tests are passing now.  I'll regenerate the Lap screenshots.. Good call.  I can up date the release notes.. I've updated the release notes.. @sophiebits thanks for finding this issue and fixing it.. @spontaliku-softaria there are few different things going on in this diff.  I'd like to try to split things up a bit.  In particularly I'd to try and tackle #800 (update buildHTML to output HAST) first.  After that's in place you we should only need to modify buildGroup as you've done in this PR.. @dennisss I can't reproduce this on https://khan.github.io/KaTeX/.  What version are you using?\n. @dennisss my bad.  I was selecting things using the selection cursor in the browser window instead of using the inspector to select the DOM element.  Yes, I'm seeing this behavior too.. This bug is fixed as report.  We can open a separate ticket for the \\fbox issue.. @marcianx Parser.js definite needs some cleanup.  Thanks for improving the comments and changing that call to handleUnsupportedCmd.  I've started to use flow for type checking in https://github.com/Khan/KaTeX/commit/d8116bdc64a8be77a7153a57965c5e6e40b24fad.  I'd eventually like most/all of our code be statically typed.. flow support landed on master earlier today.  Adding type additions, even if it's just within Parser.js, would be greatly appreciated.. quick latex.com renders it as:\n\nso I believe we're doing the right thing.\nIf you want only 'hello there' to be color you'll have to do: {\\color{blue}'hello there'}+123.  There was a breaking change in behavior recently with the v0.8.0 release so that our behavior would align with what LaTeX does (as opposed to MathJax).. @marcianx unfortunately babel-plugin-transform-builtin-extend doesn't work with IE10.  I tried the approximate option and that didn't work either.  I created https://github.com/marcianx/KaTeX/pull/2 which fixes the flow errors.  The errors in ParseError.js required $FlowFixMe unfortunately.  Hopefully that's the only places where we need to do that.. 1. I have a slight preference for reviewing separate commits, although I'm okay with squashed commits too.  Sometimes people have split their commits into logically separate changes and so revisions to those usually end up rewriting history which is cool too.\n\n\nYour reason for going with Type|void makes sense to me.  Let's go with it.\n\n\nI'd probably combine start and end in a range prop, but am open to further discussion on the matter.. @marcianx thanks for the PR.  I'm excited to have more static typing in our codebase.. If we do ban * then we should probably lint against it.. @marcianx probably the best way is to do it in small chunks if possible and open issues for each part that you're working on that way there's better visibility.. This will help big time with https://github.com/Khan/KaTeX/issues/800.  We haven't done much perf work, but perf is one KaTeX's main features so this is very much appreciated.. The height on some of the <svg> elements on the test page is 1800em which causes the page to be super long.  This is probably what's causing failures with the screenshot tests.. @ronkok my assumption is that these changes shouldn't change the output.  I'll run the screenshot tests tomorrow and hopefully that'll shed some light on the failures.. #794 has landed on master.. I think we should strive for consistency where possible.  Also, many of people find this confusing calling functions directly instead of using .call will hopefully make our code easier to understand.. > Any idea why? Do I have to mark any comments as resolved?\n\n\nI have to click \"Approve changes\" after reviewing them.. We can save some space by using the loose option on transform-es2015-spread babel plugin.  I'm going to approve this, but we should fix #850 before publishing.. @marcianx thanks for PR.  I'm excited about how quickly we're updating our code to use flow.. @xsznix thanks for expanding our use of flow.  I can give you a hand with git this evening.\n. The issue is that even though some of the commits in that list have landed in Khan/master, they've been rebased which means that they been given different commit ids and git thinks they're different commits.\nIn general I try to make all PRs from a branch.  That way I can easily update my master branch to match what's on Khan/master.\nI suggest you do the following:\n- create a feature branch from your current master: git commit -b flow1\n- then push your branch to your remote repo: git push origin flow1\n- then delete your local copy of master by doing: git branch -D master\n- then checkout Khan/KaTeX's master by doing: git checkout khan/master (assumes you have remote called khan pointing at https://github.com/Khan/KaTeX) followed bygit checkout -b master.  Now your localmasterhas the same thing that's inkhan/master.\n- then dogit push origin master --force, this will forcefully updatexsznix/masterto match what's locally in master\n- create another feature branch from your current master:git commit -b flow2- then cherry pick the commits you want:git cherry-pick 5d2325ffollowed bygit cherry-pick d250de0- finally dogit push origin flow2, you should be able to do a clear PR usingflow2`.\nPlease note: I am not a git guru.  There are probably other more succinct ways of doing this.  You may also want to create a copy of the repo before starting just in case something goes wrong.. @xsznix I can also squash this into a single commit when I merge this and then you could do a fresh fork of Khan/KaTeX and start using feature branches from a clean repo instead of having to do what I suggested above.. @xsznix glad to see you got things working with a feature branch.\n. @xsznix thanks for the PR.  Sorry about the back-and-forth on how to type some of these things.. @edemaine thanks for avoiding massive changes to current comment indentation.. Options.js is being updated in #848.. Weird... I was sure that we needed the plugin.. I checked using https://babeljs.io/repl/ with only the es2015 preset and it seems fine there so maybe it was only necessary in the past or maybe the plugin's being included in the es2015 preset now.. @marcianx thanks for the PR.  It's exciting to see all of these implicit types being made explicit.. I believe the parser used track positions, but no longer does.  Thanks for investigating and cleaning this up.. @marcianx thanks for the PR.. \nLaTeX is in green, KaTeX is in red.  Screenshot looks great!. I'm leaving out supsub for now because it doesn't follow the same pattern that other functions do.. I'm going to leave array for now too.  It's an environment, so defineEnvironment should be updated in a similar to defineFunction.  We should probably have an environments folder similar to the recently added functions folder.. Same issue with spacing, except we'll need to update defineSymbol.. @ronkok looking at op.js and operators.js there isn't really any overlap.  I'm going to rename operators.js to operatorname.js to follow the pattern of each file in src/functions being responsible for the group type it defines.. In retrospect I shouldn't have tried to do so many at the same time.  If you want, I can split this up into separate PRs.  TBH, the diff is just a bunch of copy/pasting with minor changes so splitting this diff wouldn't be hard.. I'm going to close this and will re-open as separate, smaller PRs.. @edemaine will the code you posted run as a shell script?. @marcianx let me know if you're having second thoughts about reviewing this as is.  I'm willing and able to split this into smaller PRs.. @marcianx hope you're alright.  If you do find that you don't have time please let me know.. @marcianx thanks so much for reviewing this and also sharing your method.  I'll rebase sometime tomorrow.. @obedm503 I know about rollup, but haven't used it.  How much work would it be to switch over?  Does it work with hot reloading?. Cool.  @obedm503 would definitely be interested in a PR for that change if have time.. @obedm503 I moved fonts into a submodule recently and thought everything would work correctly for the publish.  It appears that isn't the case.  I'll look into the fonts issue tomorrow.. @obedm503 can you check if there's anything in submodules/katex-fonts?  If there isn't please try running:\ngit submodule sync --recursive && git submodule update --init --recursive\nAlso, are you on Windows?  There's an issue with symlinks on that platform.. Hmm... it looks like we're using browserify + babelify for building distribution files.  That being said, webpack.config.js looks like it would build at least the unminified versions as well.  I feel like we should probably move off of browserify to webpack.. @obedm503 I tried adding ModuleConcatenationPlugin but it isn't working b/c there are some files that aren't ES6 modules in the bundle, e.g.\n[40] ./submodules/katex-fonts/fonts/KaTeX_Main-BoldItalic.woff 78 bytes {0} [built]\n             ModuleConcatenation bailout: Module is not an ECMAScript module\n             ModuleConcatenation bailout: Module is not an ECMAScript module\nand \n[40] ./src/unicodeAccents.js 783 bytes {0} [built]\n          ModuleConcatenation bailout: Module is not an ECMAScript module\n          ModuleConcatenation bailout: Module is not an ECMAScript module\n     [60] ./package.json 3.49 KiB {0} [built]\n          ModuleConcatenation bailout: Module is not an ECMAScript module\n          ModuleConcatenation bailout: Module is not an ECMAScript module\n     [66] ./katex.webpack.js + 73 modules 565 KiB {0} [built]\n          ModuleConcatenation bailout: Cannot concat with ./src/unicodeAccents.js (<- Module is not an ECMAScript module)\n          ModuleConcatenation bailout: Cannot concat with ./node_modules/babel-runtime/core-js/get-iterator.js (<- Module is not an ECMAScript module)\n          ModuleConcatenation bailout: Cannot concat with ./node_modules/babel-runtime/core-js/json/stringify.js (<- Module is not an ECMAScript module)\n          ModuleConcatenation bailout: Cannot concat with ./node_modules/babel-runtime/core-js/object/assign.js (<- Module is not an ECMAScript module)\n          ModuleConcatenation bailout: Cannot concat with ./node_modules/babel-runtime/core-js/object/freeze.js (<- Module is not an ECMAScript module)\nThe .woff files are being copied to the build folder via the file-loader.  I'm confused why webpack is even looking at package.json.  unicodeAccents.js should be easy to upgrade.  I'm not sure how to handle the babel-runtime/core-js files.  Any suggestions?  Does rollup have issue with code compiled with babel or do you run rollup first and then babel?. I see, we're grabbing the \"version\" from package.json in katex.js.. I was able to get rollup working.  The unminified bundle that it produces is smaller than webpack, but the minified version is bigger.  I passed the same options to uglify, not sure what's causing the difference.. It turns out that umd output is smaller than cis output.. @obedm503 I'd like to get your take on https://github.com/Khan/KaTeX/pull/1403.. @ylemkimon are you saying that in Babel 7, babel-runtime's helpers are defined as a ES6 modules?. If we can get ModuleConcatenationPlugin working that would be preferable.  Babel 7 is still in beta.  We could give it a try to see if that fixes the issue, but we should probably hold off on actually upgrading until Babel 7 gets out of beta.. The Settings constructor encapsulates defaults though so I'm not sure how easy it would be to get rid of this class.. I thought I was doing something wrong, but apparently, github will only let you assign collaborators not contributors.  \ud83d\ude1e\n@ronkok I think your comment should suffice.  I wish github was better.. Apparently you assign people who are member's of your organization which would be another benefit of moving things to https://github.com/katex.. Implemented in #876.. I thought we'd end up with separate files for \\*matrix, \\*cases, etc., but it turns out they all use the same htmlBuilder and mathmlBuilder so for now they're all in the same file.  I still think this is the right direction because it groups all the related code in the same file and it also opens the door to eventually expose defineEnvironment at some point which wasn't possible the way things were structured before.. @ronkok see https://github.com/Khan/KaTeX/blob/master/test/mathml-spec.js for examples of snapshot tests.  After you add a test mathml-spec.js that uses .toMatchSnapshot(), run npm test and jest add a new snapshot to __snapshots__/mathml-spec.js.snap.. > It turns out that the answer to that question is no, I can't. My attempt to npm test failed on the make lint flow test.\nI can send you a PR for the snapshot test.  Can you post the console output of the failure from npm test?. @ronkok thanks.  It looks like make isn't found.  Does that sounds right?  I think we should be able to modify the scripts in package.json to run commands in node_modules/.bin directly.  The benefit of the Makefile at the moment is that it ensures that dependencies are up to date.  I wonder if there's a way to do without using make.. @ronkok thanks for PR and for working through difficulties generating the snapshot.. @edemaine I've re-added the Makefile targets to alias the new npm scripts.. @lastmjs this is outside the scope of this particular project.  After doing some quick searching it looks like Web Components doesn't support <link> tags inside the component, but you can import CSS via \n<style> @import \"../my/path/style.css\"; </style>\nIf you do create a Web Component wrapper for KaTeX, I'd be more than happy to link to it in the README.md.. @edemaine does you recent change address this?. @raoulb I haven't be able to actually run cli.js.  How are you running it and what version of node are you using?. @raoulb I'll try doing npm install again with the most recent version and will try applying your changes.  It would be nice to if we could run cli.js from git clone so that it's easier to test changes.  I've opened #894 to track this.. @raoulb nice changes.  The abbreviations are a nice touch.  For the macros, would the following work:\ncli.js --input test.tex --macros \"\\\\foo\": \"foo\", \"\\\\bar\": \"bar\"\nwhere test.tex contains \\foo\\bar?. @raoulb I saw your most recent change.  Is that b/c the macro itself can have a : in it?. > If you want some test cases, please provide some examples.\n@raoulb I'm going to do some manual testing of the recent changes and will merge it if things look good.  It would be great to have some automated test cases, but I feel like that would require us being able to run cli.js from the git repo.  If you have time, a followup PR would be greatly appreciated.. @raoulb sorry, got busy with other things.  I'll have another look at this tomorrow.. It works fine in Chrome and Firefox.. I'll try this out in the nightly webkit build and see if there's any info on the status of this bug anywhere.  If the bug's being fixed in Safari, no need to rework things.\n. @ronkok sounds good.  We can close this issue when #980 is merged and open another issue just for double-ended arrow and horizontal braces.. @xymostech thanks for the review.  Maybe a MathJax migration guide or at the very least a \"Difference from MathJax\" section in the README.md would help with this common differences.. I'll make the requested changes before merging this.. I'm going to update the jsDocs to include the new breakOnTokenText.  @marcianx would you be able to review this PR?. @marcianx thanks for the review.  Feel free to merge PRs as well.. @ronkok thanks for the PR.  The tests look great!. Here's the LaTeX output:\n\n. @marcianx I'm on vacation now so I have time to pick this up.. @marcianx I rebased.  I'll start addressing the issues that you raised.. @marcianx I think I've addressed the issues you raised.  Could you have another look at this when you have some time?. I assumed that DisplayStyle and Smash screenshots hadn't actually changed b/c the screenshots were different for Chrome only.  I should've looked at travis-ci output before making the P.  @ronkok I'll send you another PR later this evening with these screenshots.. @ronkok thanks for the PR.. After replacing static/fonts with a symlink I loaded 0.0.0.0:7936 to verify that the test program still works.. I have a few git aliases set to help with managing submodules:\n# Versions of commands that handle submodules properly.\n  co = \"!f() { git checkout \\\"$@\\\" && git submodule update --init --recursive; }; f\"\n  p = \"!f() { git pull \\\"$@\\\" && git submodule update --init --recursive; }; f\"\n  m = \"!f() { git merge \\\"$@\\\" && git submodule update --init --recursive; }; f\"\n  gsu = \"!f() { git submodule sync --recursive && git submodule update --init --recursive; }; f\"\nI agree that it definitely adds additional overhead.  Another option would be to turn the new font repo into a npm module.. Although I made the suggestion, I have a couple concerns about using npm modules:\n- it can be harder to test changes the require changes to code across modules.  In this case I don't think that would really be an issue because you can inspect the font files and see if the glyphs are there (or not)\n- probably fewer people will be willing/able to publish the npm module.  This could be worked around by pointing to the git repo directly and specifying a particular sha.. @edemaine the release script runs make dist which run make build which copies over the font files to the build/fonts same as before so release.sh should just work.. I'll double check npm start tonight and see if the test page works.. > have you had a chance to test via npm start?\n\ud83d\ude2d just been really busy with other stuff lately.  Running npm start shouldn't take that long though, going to try to get to it this evening.. @rrandallcainc I ran npm start and then loaded http://0.0.0.0:7936 and saw:\n\n. I'm going to take @rrandallcainc's suggestion of updating CONTRIBUTING.md to provide some tips on how to deal with submodules.. @rrandallcainc I've added a section to CONTRIBUTING.md title \"Working with submodules\".. @marcianx I think this is going to be the hardest one.  Thanks for tackling this.. Yup, definitely a bit of a ball of yarn.  If possible, please try to separate this into multiple PRs.  The ParsedDollar is quite implicit so anything we can do to make that more explicit is probably good.  We might want to switch out isFunction: boolean for type: \"function\" | \"argument\" | \"dollar\".\nIs FunctionHandler's return type the same as ParseNode's value's type? \nWe should try to get rid of parseImplicitGroup.  This should be doable at this point since we're including a reference to the Parser instance in the context we pass to the function handlers.  This might actually be a good first step to take as its own PR.. @marcianx thanks for digging deep and providing a detailed writeup.\nI was actually thinking we'd combine ParseNode and NodeData into a single node.  Maybe something like:\n```\ntype Common = {\n   loc: SourceLocation | null,\n   mode: \"math\" | \"text\",\n}\ntype SourceLocation = {\n   start: Token,\n   end: Token,\n   lexer: Lexer,\n}\ntype SqrtNode = BaseNode & {\n   type: \"sqrt\",\n   body: ParseNode,\n   index: ?ParseNode,\n}\ntype TextNode = BaseNode & {\n    type: \"text\",\n    body: ParseNode[],\n    font: ?string,\n}\ntype ParseNode = SqrtNode | TextNode | ... ;\n```\nThe main benefit I see in this approach is a shallower tree.  The reason for introducing loc is to avoid conflicts between metadata props and node specific props.\nI find it weird that sqrt nodes use body: ParseNode whereas text nodes use body: ParseNode[] while color nodes use value: ParseNode[].  I would like to suggest introducing a new node type called a GroupNode which looks like:\ntype GroupNode = BaseNode & {\n   type: \"ordgroup\",\n   children: ParseNode[],\n}\nAll other nodes would always use body and body would always be a single node.  I guess GroupNode is kind of like ordgroup, but we'd use it more consistently.  Also, ordargument would become:\nconst ordargument = function(arg: ParseNode) {\n    return arg.type === \"ordgroup\" ? arg : new ParseNode(\"ordgroup\", {children: [arg]});\n};\nAs for the lossy nature, one nice benefit of being non-lossy is being able to generate LaTeX code from the AST.  This may be useful for interactive editors or other tools people may develop in the future like codemods for TeX code.  I think we include the name of the function that was used to generate the node.  If it's the same as the type that's okay.\nBefore doing any major refactor we should get the following PRs reviewed and merged: #871, #875, #885, and #887 (and maybe #884).. @marcianx I really like your suggestion of doing type Nodes = NodeData & Common;. @marcianx if you'd like to review them that would definitely help.. Thanks.  I didn't realize that commits to other repos could automatically close issues.. @Lin-Buo-Ren awesome bug report.  You can use CJK characters within \\text.  I'm curious about the use cases of natural language strings outside of \\text?. I'm going to close this as a duplicate of #1046.. @marcianx thanks for keeping the changes small.. @kokopelli314 it sounds like you're on Windows.  I'm not sure what editor you're using but there should be some way to configure which line endings it's using.. \\Huge\n\\[a + b\\] \\\\\n\\[a + b \\tag{c}\\]\nproduces\n\nwhich leads me to believe that we can absolutely position the tag to the right.  \\hfill <displaymath> \\hfill <tag> I think would have a + b position slightly off center iiuc.. @edemaine finally a legit use of float ^_^. npmcompare.com is awesome!. We're using nomnom now.. @rrandallcainc one option might be to revert the changes to server.js and only use server.js with screenshotter.js for now and then we could figure out how to get webpack-dev-server working with the screenshot separately.. @rrandallcainc I checked out your branch.  I was having troubles loading 0.0.0.0:7936 in Safari 10.x.  I think it may have something to do with https://github.com/webpack/webpack-dev-server/issues/1090.  I tried Safari 11.x and that solved the issue.  I think it's probably okay to merge with this issue, but we'll want to call this out in the release notes.\nI also tried running make build and ran into the following issue at the end:\n```\n~/KaTeX/node_modules/browserify/bin/cmd.js -t [ babelify ] katex.js --standalone katex > build/katex.js\n~/KaTeX/katex.js:10\nimport ParseError from \"./src/ParseError\";\n^\nParseError: 'import' and 'export' may appear only with 'sourceType: module'\nmake: *** [build/katex.js] Error 1\n. Sorry about some scripts being in package.json while others are in `Makefile`.  We use `make build` as part of the release.sh script (it's called indirectly via `make dist`).. LGTM.  Reloading is fast.  The source maps work well in Chrome, but not in Safari (I blame Safari).. @rrandallcainc thanks for the PR.  I think we'll want to use webpack eventually for the dist build.  If we had two dist builds, would we need a second npm package?. @caiofcm I was under the impression that you could use `import` statements when importing `commonjs` modules, but maybe that's only if you're using babel to smooth over the rough edges.. Looks like something changed in the output of the `Accents` screenshot.. I'm not sure what's going on with `handle_search_string` locally.  I'm not seeing that in travis-ci report.  The reason why there might be an issue with the rendering is that screenshot is too big:\nError: Expected 1024 x 768, got 1024x839\n```. @marcianx thanks for the PR and continuing to make progress on #892.. Here's the list of functions that MathJax supports: http://docs.mathjax.org/en/latest/tex.html.  We could maybe write a scraper for that page and then autogenerate our own list which is what #103 was suggesting.. @ronkok I think we probably want to deprecate that wiki page as it's out of date.  I was thinking that we'd have a section within README.md on the differences so that it's more prominent. \nI don't think it's possible to make the wiki page redirect, but I think we could updating the wiki page to have just a link to the HTML documentation.  If we still have a link to that wiki page from the README.md then we should probably change it to point to the HTML page.\nBy non-AMS, do you mean things like \\color which are from the color package or things like KaTeX which aren't in any standard TeX package?. Looks like a duplicate of #45.  The problem seems to be with vlists that use shifts.  The \\sum_{i < j} layout doesn't use shift in the vlist while all of the subscripts do.. I don't know how docsify-cli works or how its integrated with KaTeX, but it's probably an issue with the plugin feature of the docsify framework.. @tw-edu-csu-90618137 have you opened an issue with docsify?. @ronkok thanks for fixing this issue.  I've sent you a PR with updated screenshots.  I'll have a look at the code tomorrow morning when I'm fresh.. @ronkok sorry.  Today's been a super busy day and I haven't had a chance to look at the code yet.  I should hopefully get to it Monday.  The weather's supposed to be bad where I'm at so it'll be a good day for code reviewing.  ^_^. @ronkok sorry for the delay in reviewing this.. @ronkok thanks for making all of the SVGs work the same.. It looks like there's an issue with the Sqrt screenshot test.  I'm guessing whatever the issue is with that test, it's probably something that we could write a unit test for.. @thiagopnobre this should be fixed with the release of v0.9.0-alpha1.  Please re-open if this is still an issue.. @rrandallcainc is there any way to actually render SansSerif-Bold?  It seems like we'll have to fix #676 before we can test this PR.. > In the meantime, is there something you'd want me to add to this PR to indicate it's dependent on 676\nYou could update your initial comment to indicate that.  Also, using #676 instead 676 will create a link to the issue making it easier for people to navigate to.. I wish github had a better way to indicate dependencies.. I'm merging with this without a review b/c it's a safe change, doesn't affect KaTeX code itself, and I really want to get a release out.. @hwalinga v0.9.0-alpha1 should fix this.  Please give it a try and re-open this issue if it doesn't fix the problem.. @rrandallcainc thanks for figuring out what the issue was and submitting a fix.. @ronkok the test page you linked to is still using v0.9.0-alpha.  I haven't published a new release yet.. @ronkok thanks.. I'll have another look this weekend.. @konn sorry about the delay.  Please let me know if you have any questions/concerns about any of the feedback.. > OK, I will try to write some unit-tests.\n@konn let me know if you need help with this.. @konn I've reviewed parseStringGroupWithBalancedBraces, looks good.  I will merge this after the tests pass.  Sorry for taking so long with this.. @ronkok thanks.  I'll see what I can do to expedite that review.. @AlbertHilb this is due to how we're doing vertical layouts now.  The outline of the of the katex behavior should be the correct size.  Is there a way that a user can actually select inner nodes without using dev tools?. @edemaine I thought that too, but the highlight rectangle seemed to larger than what would be suggested by these tall spans.. I see.  I was confused because you have one of inner nodes selected in the screenshot.  I tried selecting the outermost katex node and applying outline: solid 2px blue; on Firefox and it's definitely broken compared to other browsers.. I think this is a browser bug.  If you don't want the border to take up space you could add a negative margin.. Closing this as won't fix.. I'll finish reviewing this evening.. I think it's fine for pushToken to only accept a single token for now.  If we find we're needing to push multiple tokens at once in more places in the future we can revisit at that time.\n. @edemaine thanks the PR.. Cool!  @konn would you be able to add a screenshot test for this new environment?. @konn yeah getting docker set up is a bit of work.  I can run the tests and send you a PR with the images.. > It seems that KaTeX renders alignedat appropriately.\nThe screenshots look great.\n\nShould we fix this in a separate pull request, or within this?\n\nThanks for checking the output against LaTeX's.  Since it's an existing issue a separate PR is appropriate.  Can you open a new issue for this?. @konn I'm going try to review this later this week.. Sorry for not having reviewed the code for this yet.  \ud83d\ude1e  I've been rather busy lately.  Going to try to get to it this weekend though.. @konn thanks for the PR.  Sorry again about the delay.. @ronkok cool!  When zoomed out the some layouts may look a little more cramped.  Could you post some screenshots to show what that looks like at small font sizes and/or zoomed out?. > Also, I should point out that IE does not support dppx.\nDo you know if Edge supports dppx?. @ronkok thanks for all the screenshots comparing all the browsers before/after.  I agree, this is definitely a net win.. Addressed in https://github.com/Khan/KaTeX/pull/1305.. @ronkok ~is unicode math in the header of the table mean that you used the unicode-math?~ (the answer is \"yes\", I should read comments more carefully \ud83d\ude05).  As we start adding support for more characters, I'd like to add a way for us to track which package each mapping is coming from.  The reason being is that eventually I'd like for there to be a way to configure which \"packages\" are active.. I see that you added , true); to a various defineSymbol calls.  Does this mean that our existing mapping just happened to line up with unicode-math?. The unicode math link in the third comment is really useful. . In terms of conflicts I think we should defer to using unicode-math for now.  That way whenever we introduce the concept of the \"packages\" sometime in the future we'll have a consistent situation where all of our unicode chars came from that one package.. Well that's not cool.  \ud83d\ude1e . @ronkok thanks for the PR.. @marcianx sorry for the delay.  Thank you for continue to push forward @flow conversion work.. There was an issue with v0.9.0-alpha.  I need to publish a new release.. I've just published v0.9.0-alpha1.  @Georg-Git please let me know if that fixes things for you.. Actually, I'm going to close this issue.  @Georg-Git please re-open if the new release doesn't fix things for you.. Why does adding flow types require that we switch to a struct for the args?. > The types of the other parameters depends on the value of positionType\nThat makes sense.. Not sure why some of the screenshot tests are failing, but my guess is that something is causing an exception somewhere.  If that's the cause we should add some unit tests the trigger the same issue and then fix the problem.  Also, it might be nice to have type VListParam defined as part of this diff, wdyt?. @marcianx thanks for the PR.. Are the symbols with synonyms identical when rendered in LaTeX?\n\nThat line of code would accomplish nothing. So I would rather not add it.\n\nIt does nothing because \\u21ba would already map to \\circlearrowleft?  It would define \\\\ acwopencirclearrow, but I doubt many people use that even if they're using unicode-math.. @rrandallcainc the screenshots could probably be collapsed into a single screenshot using {aligned}.  I was thinking of doing this for the font screenshots for MathBf, MathCal, MathFrak, etc.  I'll review the code this weekend.. @rrandallcainc are you still planning to clean up some of the logic?. Let's do a version bump to ~0.11.x~ 0.10.x for this even though it's a bug fix so that people if anyone was using \\undertilde it'll be less likely they'll be caught off guard by the change.. @edemaine good question.  I was thinking of jumping to 0.10.0-alpha... we could also do 0.9.0 and just call out this breaking change and the one that was in 0.9.0-alpha.. I wonder if we can test some these behaviors with unit tests that verify that one {aligned} snipped parses the same as another.. @edemaine thanks for checking that.  I would've expected that to work.  :. > The code that that removes a trailing \\ is located in array.js, not in Parser.js. We can't expect a unit test on the parse tree to tell us anything useful about the handling of a trailing \\.\nBut the Parser.js imports environments.js which imports array.js and we do call the handler for a particular environment when we encounter it from Parser.js.  I'd be interested in seeing how those parse trees diff for those case where we expect them to be the same.. @ronkok not sure why.  I'm going to \"update branch\" and see if that does anything. . @ronkok thanks for fixing that test.. > Rather than wait for font revisions, I wrote macros.\nI think that's sensible.  I think revising the fonts would introduce other complications as it relates to handling font commands such as \\mathbb, etc.. @justinfagnani package.json's main field points to \"dist/katex.js\" which should not contain any type annotations.. I've changed the title of this issue.  I'm not sure the best way to do this.  This came up in another issue as well.  It sounded like making an ES6 specific npm package wasn't necessary and that there were some package.json fields that might do the trick.. I'm curious about the desire have a lib/ folder over a single ES6 module.. Okay.  Let's start with:\n- adding a build step to \"compile\" files in src/ to lib/ by stripping out flow types\n- add a pckg.module (or pckg.esnext) entry to our package.json\nIf other people say they want a precompiled ES6 module that concatenates all the files lib/ into a single file then we can deal with that as a separate issue.  How does that sound to people?. We should probably also move the katex.js entry point into src/ so that we can mirror it in lib/.. I would definitely welcome a PR for this from @justinfagnani or anyone else who's interested in this.. Looks like there are some flow errors after updating the branch:\nError: src/functions/mod.js:81\n 81:         const space = new mathMLTree.MathNode(\"mspace\");\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructor call\n 81:         const space = new mathMLTree.MathNode(\"mspace\");\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with\n 37:     constructor(type: MathNodeType, children: (MathNode | TextNode)[]) {\n                                                    ^^^^^^^^^^^^^^^^^^^^^^ array type. See: src/mathMLTree.js:37. @garciparedes thanks for the PR.. It might be nice to have an option to control the output of MathML.  I like &ApplyFunction; because it's easier see what's going on, but the unicode char takes up less space which is preferable in production.. @edemaine thanks for reviewing and merging.. I think a valid resolution to this issue would be to add a section to README.md with common gotchas and include this along with suggestions of how to fix the issue.. Cool!. @akalin thanks for verify that the new release fixes the issue.. @edemaine thanks for making this change.  It's really going to help with the unicode effort.. Cool!\n\nProperly separate \\kern, \\hskip from \\mkern, \\mskip.\n(The former work in both modes, and don't support mu units.\nThe latter work only in math mode and only support mu units.)\n\nI think we'll need to bump the version again as this may break some math that was working for people.\n\nRender horizontal spacing commands (such as \\kern) using MathML .\nPreviously this was rendered as an empty  with a TODO by @kevinbarabash to figure it out.\n\nThanks for figuring this out.\n\nImplement \\LaTeX macro roughly identical to LaTeX's definition (using \\raisebox instead of a vertical box with a fill to get top alignment). Comments welcome, but I think this is a pretty good solution for now.\n\nCool.  I think some people will be pretty stoked about this.\n\nI tried implementing a new \\KaTeX logo using a similar macro (now that we have all these features), instead of the large body of code in src/functions/katex.js and static/katex.less. It's currently defined as \\katex so that you can check out this branch and compare the two:\n\nI think the new \\katex implementation is closer to the \\LaTeX rendering, especially the kerning between the a and the T.  It might look better if there was more space between the K and a.  Looking at \\LaTeX, there's an even amount of space between the L and the a and the a and the T.. @edemaine I'm not sure why all of the fonts screenshot tests are failing. \ud83d\ude15 . @edemaine thanks for investing and fixing the issue.. Not sure why the firefox screenshot tests didn't work as I don't think any of the screenshot tests would be impacted by these changes.  I restarted the travis-ci build, hopefully it'll pass this time.. Firefox tests passed this time.  \u00af\\_(\u30c4)_/\u00af. @ronkok I can regenerate the screenshots.. @ronkok thanks for making these changes.. If \\begin{foo} and \\end{foo} map to \\foo and \\endfoo respectively, how do arguments passed to \\begin{foo} get transmitted to \\endfoo?  From the description of \\newenvironment I would expect any args to be available in both begdef and enddef, http://www.emerson.emory.edu/services/latex/latex_20.html.. @aterenin good catch.  I should not have included that suggestion without trying it out first.. @rah4927 did you modify the KaTeX code in any way?. @marcianx thanks for reviewing and merging.. Looks like the mod screenshots need to be regenerated.. I've also updated the demo to 0.9.0-alpha2 and have verified that it works there.\n\n. @edemaine I don't think I've ever run into this, what version of node are you using?. @edemaine thanks for investigating.  I think we should do 1 long term.  In the short term let's merge this.  Maybe it was working for me before because we didn't use let before.  \ud83e\udd14 . I'm okay with either.  If no one feels strongly either way we can keep going with T[].. @marcianx thanks for the quick PR.. @edemaine what sort of things would fil/fill/filll be useful for? . Let's leave it up.. Let's go with the AMS.. @edemaine this is looking pretty good.  It looks like some of the screenshot tests use \u00c7 and \u00e7 so those will have to be changed or we could add support for them even though we don't have the correct glyphs and fix that issue in a separate PR.  Your call.. Not sure why travis isn't running the tests.  I had to restart the tests manually.. @edemaine sorry I've been holding off on approving this.  I've been doing some more thinking about making people add their own polyfill for IE support and I wonder how many people are still supporting IE.  For the record KA is still supporting IE10+.  Although we haven't upgraded KaTeX recently, if we were to do so we probably wouldn't want to include the whole normalize polyfill and would end up writing our polyfill which covers what we using in KaTeX.  At that point we may as well include the code in KaTeX.  Later, we could add a build setting to leave it out for people who aren't supporting IE.. > Maybe I should try to get it working with normalize only during build, and not requiring it at run time, then.\n@edemaine were you thinking of using normalize at build time to generate a table or something containing the split characters?. @edemaine do you know what package we need to load to render the Unicode test case in LaTeX?  . The good news:\n- the base characters are using computer modern now, yay!\n- grave, acute, and circumflex accents have better shapes than before\nAreas for improvement:\n- grave, acute, and circumflex accents on capitals need to be rotated or squished a bit\n- umlaut circles seem a bit too large\n- i should use the dotless i when it has an accent\n- the horizontal spacing around i and I is too much\nThe items that are starred are things that should probably be resolved before merging this PR.. @edemaine thanks for refactoring unicodeAccents and revert the CJK change.  :). > So that mainly leaves the width of accented i issue.\nCool!  Once #1030 is merged I'll open a PR that adds the width to the glyph metrics which shouldn't take too long.  You can build them already by doing make extended_metrics.  I think it's best to have them in a separate PR as it's going to be a big change and this PR is already quite big.. #1032 contains the horizontal metrics.. > Ready to merge? Still the cedilla issue and accent-on-capital letter issue, which we can add. (Neither specific to this PR.)\nI think so.  We can deal with the cedilla and \\H issues separately.. @edemaine I removed some of the letters from the math mode test since we aren't rendering them with the correct font anyways.. @edemaine thanks for all of the hard work on this.  I'm glad it's finally merged.. @ronkok thanks for updating this.  I like how you have \"direct input\" sections for each of the existing groups.. @Jenyay \\vec{a} in https://khan.github.io/KaTeX/ (which is using 0.9.0-alpha2) renders the vector arrow in Chrome version 62.0.3202.94.  Can you provide a link to a page that reproduces the issue?. @Jenyay are you loading https://khan.github.io/KaTeX/ in embedded WebKit?  If not try that or verify that the doctype on the page you are loading is correct.. @Jenyay you mentioned in the original post that there was also an issue with \\frac.  Is there still an issue with \\frac in the new version?. @marcianx thanks for the quick review.. Probably best think about deprecation on a case-by-case basis.  As for making KaTeX more permissive than LaTeX, I think that core-KaTeX should strive to emulate LaTeX's behavior as much as possible.  While I think most people using KaTeX to bring existing LaTeX content online, there may be some who are starting out with content they've created in KaTeX and inserting it into a LaTeX document.  For deviations from LaTeX behavior we should try to use macros or contrib.  I think in this case people could use macros if we supported \\ifmmode, \\else, and \\fi.. Without the cache one build was at 29.11 sec.  I restarted a build and with cache it was 9.62 sec.. We already have some conditionals thanks to @edemaine in #975.  In particular \\@firstoftwo, \\@ifstar, and \\@ifnextchar were added.  Maybe we should also add \\@secondoftwo as well. . The goal here is to provide a solid base of macro support so that people can extend KaTeX functionality by using existing macros with minor or no modification from existing packages (or their own personal macros).. All functions as macros sounds like a big change, but it would make things more regular.  Are there any other macro abilities a change like this would enable beyond allowing us to implement \\TextOrMath?. Cool.  We should probably make this change at some point.  I think we should finishing add flow types to Parser.js and extracting functions into the functions/ folder before starting this.  I'm not sure how we'd do this though.  Macros are all about modifying which tokens get sent to the parser.  We still need to define handlers to transform those tokens to into chunks of the parse tree.  How does TeX handle this if it's macros all the way down?. I definitely think that Parser should be telling MacroExpander what mode we're in.. @ronkok in #891 I moved fonts into a submodule. Running git submodule update --init --recursive should fix the issue.  There are additional details of working with submodules in https://github.com/Khan/KaTeX/blob/master/CONTRIBUTING.md#working-with-submodules.. \nThe fraction lines are a bit blurry on non-retina displays.  This is to be expected.  We might experiment with setting shape-rendering: crispEdges on the fraction bar SVGs.. \nEven though the fraction line is 0.12em high, at small fonts it looks that's still somewhere between 1 and 2 pixels.  I wonder if we should render an empty span for the fraction bar and then a second span with that contains the SVG which is at least 0.04em + 2px tall.. @ronkok should I regenerate the screenshots?. @ronkok I've sent you a PR with the updated screenshots.  There also seems to be a flow issue:\nError: src/functions/genfrac.js:165\n                        v----------------------\n165:             frac = buildCommon.makeVList({\n166:                 positionType: \"individualShift\",\n167:                 children: [\n...:\n176:             }, options);\n                 ----------^ call of method `makeVList`\n173:                     {type: \"elem\", elem: rule,   shift: midShift + 2 * ruleWidth},\n                                              ^^^^ null. This type is incompatible with\n346:     elem: DomChildNode,\n               ^^^^^^^^^^^^ union: span | anchor | svgNode | symbolNode. See: src/buildCommon.js:346. \u2639\ufe0f . @rrandallcainc I'll try to look at it this weekend.  The screenshots look great!. @rrandallcainc great work!. @rrandallcainc it is possible, but the current workflow doesn't support it.  The mapping.pl assumes that the fonts are set up like standard TeX fonts as opposed to a regular TTF you might find somewhere else.. @aterenin thanks for the PR.  I thought for some reason we didn't have the fonts or the metrics but apparently we have both.  This could probably use a screenshot test.  Please see https://github.com/Khan/KaTeX/blob/master/CONTRIBUTING.md#screenshot-tests for details.. @jeanm \\bm and \\boldsymbol are not the same.  https://tex.stackexchange.com/questions/3238/bm-package-versus-boldsymbol. @jeanm we'd like avoid implementing commands where the semantics don't match LaTeX's as much as possible.  See https://github.com/khan/KaTeX#rendering-options for how to define your own macros.. I guess I'm okay with the alias too as long as we communicate the short coming and at the very least have an issue in github to track the issue with which command is non-compliant.. > I can easily add an alias for \\bm if the consensus is to add that in. Let me know if people want this.\nIt's sounds like the general consensus to add the alias.. Thanks for adding the snapshot test.  Almost there, just need to add mathvariant=\"bold-italic\" to a few of items in the MathML tree.  Use npm run jest -- -u to update the snapshot.. @aterenin thanks for fixing my lint.  \ud83d\ude05 . @aterenin thanks for this PR.  \\bm/\\boldsymbol have been requested by lots of people and I'm pretty sure we use it at KA as well so I'm excited that this is finally in KaTeX.. @stapeleliz that's right.  I need to publish a new release.. @ronkok thanks for the PR.. @santos22 I was thinking katex.min.js.. @rrandallcainc looks reasonable to me.. Thanks for the PR.. I missed HorizontalBraces... PR in coming.. \nKaTeX is in red, LaTeX is in green.  The accent spacing looks really consistent except for over xA, but that's very minor and wouldn't worry about it.. > Rather than depend on something so dicey, I wrote the SVG.\nGood call.  I should be able to review this tomorrow.. I restarted the build.. @edemaine we should have a screenshot test for:\n\\begin{aligned}\n& (a \\cdot b) \\bmod 257 \\\\\n& (a \\cdot b) \\mathbin{\\mathrm{mod}} 257 \\\\\n& (a \\cdot b) \\kern1mu\\mathbin{\\mathrm{mod}}\\kern1mu 257\n\\end{aligned}. The tests failed because there's an issue with eslint 4.14.  I committed my local package-lock.json file which had an earlier version of eslint.  Hopefully that should fix the issue.. @edemaine I was thinking we'd have actually \"gotchas\" section, maybe called # Common Issues where we could list this as well as things like there not being enough space between rows in {aligned} when using fractions or the font being bigger than MathJax.  That way it would have better visibility. . @edemaine will do sometime this weekend.. Closing in favor of #1034.. This is a duplicate of #1031.. :tada:. Code changes look good to me, but there's something causing the Colorbox and DashesAndQuotes screenshot tests to fail.\nColorBox:\n\nThe x should be in typewriter.\nDashesAndQuotes:\n\nThree dashes in a row should be an em dash.. @edemaine the following seems to be sufficient to fix the ColorBox screenshot test:\n} else {\n            // Otherwise, just return a nucleus, or nothing for an optional group\n            if (mode) {\n                this.switchMode(mode);\n            }\n            const result = optional ? null : this.parseSymbol();\n            if (mode) {\n                this.switchMode(outerMode);\n            }\n            return result;\n        }. There may still be other places where we need to switch modes before calling parseSymbol, but we can deal with them in a separate PR as necessary.. @ronkok you'll have to merge master into your branch and resolve the conflict.  I can regenerate those screenshots afterwards.. @ronkok thank you for tackling this this issue with the fraction bars disappearing.  I'm going to publish a release over the next couple of days.  With this change I think it's safe to make it a beta release or release candidate.  :). Once #1030 gets merged I'll open a PR to add horizontal metrics.. @rrandallcainc I added a test to verify that \\\\text{\\\\i\\\\j} parses.  A screenshot test is probably overkill for this as there a lots of symbols we don't have screenshot tests for.. > Technically, some lines in fontMetrics.js such as this one should be removed. You can also feel free to leave this to #992 if you'd like.\nI can remove those.. @edemaine I assume you mean \"math mode\".  I didn't realize that they appear in both.  I'll put up another PR for that.. @edemaine I was testing using http://quicklatex.com.  I tried it again with pdflatex locally and am seeing the same issue you are.  In that case let's not bother.  The change was non trivial to b/c while we have the glyphs in KaTeX_Main-Italic they need to either be added to KaTeX_Math-Italic or we would've had to special case things in the code.. For text mode they are textords and they do get rendered using KaTeX_Main-* which are the text fonts.. I really like the toBuildLike suggestion.. @edemaine if any of the widths are off for the accents let me know.. You can see the difference in the spacing in the font tests.. @edemaine does this mean that we don't use combining accent glyphs for anything (besides \\H) anymore?  If so, we'll want to update all fonts to have all non-combining accents glyphs, many don't at the moment.  Also, we should be able to remove all combining accent glyphs.. @edemaine the screenshots look good for \\H, but are off for Safari.  https://github.com/KaTeX/katex-fonts/pull/5 will add non-combining glyph for \\H.  I made other changes in that PR so it's probably best to land this as is and deal with the \\H Safari issue separately.. @edemaine let's deal with the non-combining \\H separately.. In #887 I add some code to handle \\, (0.16667em):\nif (this.type === \"mspace\") {\n    if (this.attributes.width === \"0.16667em\") {\n        return \"\\u2006\";\n    } else {\n        // TODO: Use other space characters for different widths.\n        // https://github.com/Khan/KaTeX/issues/1036\n        return \" \";\n     }\n}. @rrandallcainc it should use the default math style.  pdflatex renders the following:\n\nThe error shows up on master, but not on the demo page.  The error is:\nTypeError: undefined is not an object (evaluating 'fontMap[fontFamily].fontName'). I swapped out \\textbf for \\textsf in the screenshot above.. @rrandallcainc you could probably add a withMathMode method to Options that resets everything.. @rrandallcainc maybe we could set a prop on the styling node that's created which could indicate to the HTML and MathML builders to call reset the fonts using withMathMode().. I don't even see the sqrt symbol.  @nyiuang can you link to a page with this and provide more details about what font size is causing the issue?  Please note that #1025 was merged recently and should fix the issue with the disappearing fraction lines.. I'm also running MacOS 10.12.6.  I wasn't able to reproduce the issue with either \\dfrac or \\sqrt in Chrome on master.. @nyiuang can you try again with v0.9.0-beta?. I'm going to close this for now.  @nyiuang please re-open if you experience this with v0.9.0-beta or any future releases.. > Not sure whether we should include the ParseNode refactor as part of the issue since it was discussed there.\nI think this comment was meant for #1041.. @marcianx thanks for all of the work you did before on this, it made this PR much easier than it otherwise would have been.. I like the idea of using xelatex as option.. @edemaine thanks for updating.  Can you run npm install and add the changes to the package-lock.json file?  If you don't have this file you may have to update your version of npm. . https://tex.stackexchange.com/questions/270154/utf-8-characters-in-math-mode describes a way to allow unicode chars in math mode, but it's definitely non-standard.. I tried unicode characters in MathJax and it works there which is probably why there's a lot of demand for this feature.. I think we could provide this functionality behind a switch.. > we should try to resolve this before 0.9.0 final.\nWe can always go straight to 0.10.0-alpha.. > True, but it seems nicer if we don't release a non-alpha/beta version with new features which we then remove in the next version (even though it still satisfies semver).\nFair enough.  If we were doing this right we would freeze a version branch and then only accept bug fixes into that branch.  Or rather... keep merging everything on master and then we'd cherry-pick commits over to the 0.9.0 branch.  I'd want to review release.sh to make sure it would work from a non-master branch.. There's some shell script snippets in #871 that may help when reviewing this diff.. > Also, I see that there are lots of \\lefts and \\rights in the tests, which increases my confidence that this isn't breaking anything.\nYeah, the test suite is pretty good. ^_^. There's some shell script snippets in #871 that may help when reviewing this diff.. @davidflanagan this is ready for review again.. Okay, now it's ready.  I forgot to push that last commit.. It's nice that github shows a preview of what changed in the submodule on the files tab.. If that's the case, we can change the katex-fonts submodule to live at fonts.. Cool.  I'll add a katex-fonts folder at the root level which will contain the katex-fonts repo as a submodule.  I'll need to changes all the places where we reference static/fonts to reference katex-fonts/fonts and we should be okay.. @ronkok sorry to hear that.  I'll work on fixing this this evening.. > Most of the time you won't have to worry about [submodules]\nI guess that's a bit disingenuous if I keep making changes to KaTeX\\katex-fonts.  :. I picked tests which I thought were interesting in some way, e.g. use of macros, stretchy accents, environments, etc.  Each test takes a few seconds to run and I wasn't able to find a way to reduce the number of runs sampled so I limited the number of strings we test.. > I've already got feature requests, however:\nI've added these as TODOs in perf-test.js and will created GH issues for them.. @davidflanagan thanks for the quick review.  I'm happy this in on master now.  It'll make understanding the perf impact of future changes much easier.. @nickkolok thanks for the PR.  This should be pretty easy to back port to 0.8.x.  I'll have to set up a 0.8.x branch to do the deploy from.  I think I'll merge it into master and then back port it afterwards.. Still need to create a 0.8.x branch and merge this in there.. Running git submodule sync --recursive && git submodule update --init --recursive fixes this.. Not sure why the Unicode screenshot test is failing.  It renders using the test page.  I'm going to run make screenshots locally and try to figure out what the change was.. The reason why the tests are failing is because the browser in the docker isn't loading a font with the glyphs for the Hangul and CJK parts of the Unicode screenshot test.\n\nThis is because the spans containing the Hangul and CJK text no long have hangul_fallback and cjk_fallback as part of their class.  This class is used in test.html to load appropriate fonts.. @ysawa thanks for the PR.  I don't think these symbols are actually in any of our fonts.  Do you know what TeX font (or package) they appear in?. Not that I'm aware.  I think a lot of it would depend on your current MathJax setup.  There is an auto-render extension for KaTeX which may come in handy though.. @ylemkimon the project started out using make.  We've transitioned some of the commands to package.json.  Not everyone has make installed on their computer so it would be nice to eventually transition everything to package.json.. So I looked at webpack.config.js a little more an it's not actually a valid webpack.config.js.  It specifies multiple configs but not in the way that webpack expects.  See https://github.com/webpack/webpack/tree/master/examples/multi-compiler.. I can't see why it wouldn't work with script async.  The async attribute only affects when the script is loaded, right?. @aterenin if you have some time, would you mind adding a note in the README.md?. @ronkok thanks for keeping our function support page up to date.  :). I think https://github.com/KaTeX/katex-fonts/pull/5 might fix the issues with the accents as it makes all accents non-combining include the accent for \\r which is listed in https://github.com/KaTeX/katex-fonts/pull/5/files#diff-39cb684094d84b58582045c86bd72f75 as \"ring above\".. > I'd propose that we assume that in text mode all the characters we want are going to be supported directly by the font\nThis would result in the fonts being much larger than they are now.  Also, I'm not familiar enough with our font pipeline to combine base and accent glyphs into new glyphs.  Updating existing accent glyphs from combining to non-combining and using JS to center was the original plan to deal with accent positioning issues.  This is how the accents that are positioned correctly work.  The only reason why the ring doesn't work is that for some reason we're shifting it left by -125 units when the font is generate.  This is equivalent to -0.125em which which would cause the 0.375em position to be correct.. This was fixed with #1094 except for the position of accent characters in \\textit{}.  I've opened a separate issue, #1099, to track this.. [clabot:check]. @glebm looks good to me.  Not sure signing the CLA is necessary in the situation since no code is being contributed.. @glebm I didn't realize you were from Google.  Google has already signed our CLA.. > Fixes partially #929 (webpack-dev-server reloads when katex.less is changed)\nWhy is it a partial fix?. I restarted the travis-ci build b/c I was really confused by the output of the previous run.  It should be running npm test, but I couldn't find any of the usual output that I expect from that command.  I ran npm test locally on your branch and it seems to work fine.. @ylemkimon thanks for updating the comment at the top.  I'm pretty busy this week.  I'll try to do another pass on the weekend.. @ylemkimon thanks for listing out the breaking changes.  I think the only breaking change that might affect users would be the third one, but my guess would be that most users are using the compiled bundle so this shouldn't be an issue.  We can add it to the breaking changes part of the release notes when we do a release.\nFrom the \"old/new\" section:\n\nExport CommonJS module | Export ES6 module[3], expose default export\n\nThis sounds scarier than it is b/c the bundle is built in such a way that it exposes a commonjs interface as well as a katex global as per the discussion in the comments.  Could you update your comment to make it more explicit that the interface the published module exports remains unchanged?. I did the following as a quick check:\n- npm run build\n- cd build\n- node\n- const katex = require('katex') // this returned the katex object as expected. @davidflanagan just let me know that this change \"shaved 40Kb off of katex.min.js!\". @edemaine thanks for adding all of these commands.. @ronkok good catch.  Since there are multiple ways to define things, we might want to have some sort of central dictionary of all the commands regardless of whether they were defined as a symbol, function, macro, or environment.  In LaTeX, if you have something that you've defined as a command and then you redefine it as something else, like a color or a length, is LaTeX cool with that?. Anyway, the goal of having a central lookup would be to provide a way to audit for duplicates so that we're not shipping code we don't have to.. There are some failing tests for this change that I have to work through, in particular:\nBinCancellation BoldSymbol Not OperatorName OverUnderset SizingBaseline StrikeThrough StrikeThroughColor. Somethings have improved in the screenshots:\n- spaces between operators and strike through items is closer to what LaTeX does\nSomethings are worse:\n- [x] \\not is in the wrong position when followed by a group\n- [x] spaces around + in SizingBaseline now depend on the sizing, but shouldn't\n- [x] spaces around dot operators in StyleSwitchings should be symmetric but aren't\nSomethings are neutral:\n- changes to OverUnderset are minimal\n. \n\\not is now looking right on for Chrome and Firefox.  We need to change the glyph to a non-combining character to fix Safari.. \nSizingBaseline seems to be better too, but not perfect.. All tests are passing now, but there's still a bit of cleanup work that I'd like to do first.  In particular:\n- [x] extract helper function for generating glue\n- [x] do the TODO for handling styling commands the same as sizing commands in buildExpression. This is ready for review now.. @kohler if you have time, could you look at this PR since you did original work to fix the spacing?. @rrandallcainc thanks for the review.  I'll make the requested changes this evening.. @rrandallcainc this is ready for another pass.. @kohler thanks!\nI'll fix all the nits before merging.. Thanks everyone for reviewing this.  This should make #687 much more tractable now.. @rrandallcainc yup.  Anywhere where we create a span using one of those styles could be replaced with a call to makeGlue.. Thanks for spotting this and fixing it.  The testMatch in the jest config is pretty specific.  I'm sure this is fine, but I'm going to wait until travis is back up.. @ylemkimon I assume you ran make metrics to generate fontMetricsData.js, is that right?. @edemaine can you post what it looks like for \\textstyle and \\scriptstyle?  Is it just the subscript that looks wrong, or is it also wrong in superscript?. My original thinking of a plugin system is that it would be more of a runtime system thing.  I hadn't considered leveraging the fact that we're moving to webpack to build KaTeX.  It feels a little weird imposing plugin makers use a particular build system.  I need to think about it a bit more.\nA runtime plugin system would require us to expose more methods for generating HTML and MathML.  I think if/when we moved to HAST for our internal representation of HTML and MathML then we wouldn't have to expose as much.  If/when we move to an intermediate representation we'd still want to expose methods for building that IR.. @ylemkimon can you rebase when you have a chance?  I'm curious to see what this diff looks like now that the webpack changes have been merged.. > Custom lexer/parser\nLooks like you have at least the parser half done.\n\nPlugin registry\n\nWe need some plugins first.  :P\n\n3rd party plugin\n\nI suppose that someone could make one use the technique demonstrated in this PR.  The problem though is that they'd need to require a number of files directly from the source.  Pretty much every JS library I've seen that supports plugins allows to create a plugin either without an dependencies or by requiring some utilities to help work with the data structures the library uses.\nI think the code in this PR is useful.  It expands the number of extension points we have by introducing defineGroupParser.  It also provides a way for contrib extensions to access internals without duplicating code that already exists in the katex bundle.  I definitely want to merge this PR, but I would hesitate to call it a plugin architecture, mainly b/c I think people have certain expectations of JS plugin systems.\nThis could use some documentation.  Could you add an Extending KaTeX section to README.md and describe when you would want to create an extension using this technique and what are the main steps in doing so?\n\nBackward/Forward compatibility\n\nWe'd probably want some sort of versioning system.  Even before that though there are some key changes that I'd like to make first:\n- simplify our parse tree (flatten and make it more regular?)\n- swap out domTree for HAST\n- introduce and intermediate representation\nI think the last one may take a while so maybe that's a v2 thing and maybe we can move KaTeX to v1 after we finish the other two.. @ylemkimon I wonder if you had any thoughts about how we might allow plugins/extensions to add fonts and font metrics.  I looking into generating Cyrillic fonts.  If we add support for more scripts with fonts and metrics it would be nice to allow people to load only those which they think they might need.. I believe this is no longer blocked by other PRs.. Custom classes (and ids) are being added in #1437.. > The screenshot tests are hard, though: running them locally, I get a number of failures even on the master branch where I haven't changed anything.\nWhich command are you running?  make screenshots generates new screenshots, but dockers/Screenshotter/screenshotter.sh --verify is what's used to actually verify them.  The latter reruns the test multiple times on failure to avoid issues with fonts not loading right away.. Other options include:\n- using a specific Greek-Italic font\n- defining symbols for \\varGamma et al that use the font we use for \\mathit{\\Gamma}\nThe latter solution seems better because it doesn't increase the number of fonts a user has to download.. @ronkok we should probably make \\xrightleftarrows, \\xrightequilibrium, and \\xleftequilibrium private.  @edemaine I remember you defining some macro that was for internal use only.  What did you prefix it with?. @mhchem we don't support the \\ce command yet and this PR doesn't add support for it either.. > But we (this includes me) are working towards that aim.\nCool!. @ronkok I noticed that the output of \\verb isn't using the typewriter font.  I'm guessing that's still from the symlink issue that I haven't fixed yet.. @ronkok I was thinking more along the lines of option 2.  In #794, @edemaine added \\\\@cdots which isn't supposed to be called manually.  We don't have any code that actually prevents this so it's more security through obscurity.  We could do the same here and prefix the commands with a @ e.g. \\@xrightleftarrows.. > Are we sure that we don't get enough obscurity by just omitting the names from the function support page?\nOkay, let's do that.  Once \\ce is implemented it would be nice to hide these commands completely.. @ronkok I've just merged #1090 so you should be able to test your changes.  Let me know when you want to me regenerate the screenshots.. > If you would prefer to apply the adjustment only to \\xleftequilibrium and not to all the others, let me know.\nHow much work is it?  If it's a lot, leave a TODO.  If it's not much, could you do it as part of this PR?. Thanks.  I'll regenerate the screenshots later tonight.. @ronkok katex.less has been moved to the src folder.  This merge conflict will be need to be resolved before I can merge this PR.. @ronkok #1461 closes this, right?  Please re-open if there's any additional work necessary.. > I don't know if PR #1070 makes this easier or harder.\nHopefully easier.  \ud83e\udd1e . I'm not sure why pdflatex rendered \\sout as underlines.. It's looks like there are two things going on:\n- LaTeX's \\cancels are generally steeper, especially for single lowercase letters\n- LaTeX has less spacing around the \\cancelled element.. > Which is which?\nSorry about that.  KaTeX is in red.. @rrandallcainc I do the following:\nnode dockers/texcmp/texcmp.js <key_from_ss_data.yaml>\nNOTE: not everything in ss_data.yaml with texcmp.js.  I recently added the following lines to test.tex in a PR that has yet to land which helped with the Strikethrough test cases:\n\\usepackage{cancel}\n\\usepackage[normalem]{ulem}. FYI, the output shows up in test/screenshotter/diff.. @ylemkimon I am running on a Mac.  I tried a couple of different versions of webpack-dev-server: 2.7.1, 2.8.0, and 2.9.1.. > I should've tested on the Mac, and apologize for any inconveniences it has caused.\nNo worries.  Thanks for tracking this down so quickly.. TODO:\n- [ ] rebase and resolve conflicts\n- [ ] resolve question about svg-align class. I'm going to close this for now and will try again once some of the other PRs have been merged.. @mossadal are you using a retina or non-retina display?. \nThis is what I'm seeing on master which is only a few commits ahead of 0.9.0-beta.  The new commits shouldn't have any effect on fraction line output.  Not sure what's going on.  \ud83d\ude15 . @mossadal what font size are you rendering at?  FTR, that rendering above was on Safari at 16px.  I'm getting similar output from Chrome.  I'm also on 10.12.6.. I'll try reproducing using 0.9.0-beta later this week.  Maybe something funky happened during while generating the release.. @danielhollas we've had issues in general with positioning of accents in some browsers.  Safari doesn't handle combining glyphs properly.  Part of the solution is https://github.com/KaTeX/katex-fonts/pull/5 which converts all combining glyphs to non-combing glyphs.  There will probably be some additional work in this repo to make sure everything is positioned correctly after making that change.. At least the Hindi is look good. :). @davidflanagan this is what we used to do.  Unfortunately, it results in the wrong font being used for latin characters with accents.  Even though the font contains the base character and the accent, the browser doesn't know to render those together.  All it knows is that the glyph for \u00e5 doesn't exist in the font and so it falls back to another font which does have the glyph.  The results in the following rendering for \\text{a\u00e5} which is not what we want:\n\n. Closing in preference of #1094.. Closing as #1089 has be merged.  @ronkok I tried zooming (in and out) on Safari and things seem to be working correctly.. @davidflanagan maybe add a screenshot test for this.  It should be possible using the pre and post properties in ss_data.yaml to construct a container with styles that would affect the rendering without your changes.  Something like:\nSvgReset:\n    pre: <div style=\"fill-opacity: 0.5; stroke-width: 3, ...\">\n    tex: \\sqrt{x+1}\n    post: </div>. This will unblock #1078.. @ylemkimon thanks for the review. :). This is moot since #1092 added a screenshot test by adding a style prop instead.. Hmm... \\mathbb{C} works in the test page on master, but that uses katex.render.  I wonder if there's a difference between that and katex.renderToString.. I tried katex.renderToString(\"\\\\mathbb{C}\") on master and that works as well.. I checked v0.9.0-beta as well.  What's Duktape?  Could you post a more complete code example?. Nice find!. We'll definitely want to fix this before the next release.. @ccorn if you have time, would definitely accept a PR to fix this.. It looks like I broke \\degree a bit.  I'll try to fix it after lunch.. > Maybe file an issue to write some documentation about how this is all handled though.\nI've opened an issue for this.. > Also, src/domTree.js has some special cases for forms of lowercase letter i. I'm not sure why those are there, but they also use the combining form of the accents rather than the non-combining form. Please check that code still makes sense with this change before merging.\nI had a look at the PR for that and it sounds like I wasn't doing the right thing at the time anyways.  Also, we don't allow any other unicode chars outside of text mode.  I'm okay with removing that behavior. We'll want to mention it in the release notes as a breaking change. \nFixing that probably makes sense as its own PR though.. @ronkok I haven't fixed the \\vec glyphs yet.  Probably best to do that in a separate PR b/c we'd want to strip out the SVG code for \\vec at the same time.. @davidflanagan I wonder if moving fontMetricsData.json to https://github.com/KaTeX/katex-fonts would make more sense.  Then we could have a single command to generate the fonts and update this file.. @ylemkimon thanks for moving this issue over to the other repo.. @Syndesi glad to hear you've found the existing docs useful.  This issue is more about documenting KaTeX internals.. > No tests included and no countermeasures taken against future incidents like this one. I am not familiar enough with this project yet.\nI think that's fair enough.  My plan was to use https://github.com/kevinbarabash/eslint-plugin-luddite to lint against things that we don't want to use I just never got around to it.. @ccorn thanks for the PR.. https://github.com/Khan/KaTeX/pull/1469 added a lint rule for this.. > It updates the codes(js and css) and re-renders the math without refreshing the page and reloading the whole module.\nAwesome!  There have been a number of times during testing where I had changed the default test string without clicking the permalink button and then changed code only to have the test string revert to the default.. Having the the separate entry point/bundle is what we had in 7554153, right?  I'm okay with that.  It's probably worth documenting somewhere why we had to do it that way.. > It seems that I cannot get CommonsChunkPlugin to work with HMR.\nFor some reason I though CommonsChunkPlugin was still in this PR.  I see now that it isn't.. > Glad it was pretty straight-forward to implement\nMe too.  You had already done all the heavy lifting. :). @ylemkimon are you still planning to do the TODOs in the top comment?  Did you want me to comment on the code as is before adding tests/updating screenshots?. whoops... wrong PR. I tried checking the checkboxes but apparently you can't do that to checkboxes inside review summaries.. @ylemkimon thanks for the PR.. @Syndesi these should be pretty easy to add.  See symbols.js and look at \\textsterling as an example.  A PR for this would be welcome if you have the time.\n. git submodule sync --recursive && git submodule update --init --recursive\nshould do the trick.  See https://github.com/Khan/KaTeX/blob/master/CONTRIBUTING.md#working-with-submodules for more details.. I see, the issue is Windows doesn't support symlinks.  There's a fix that's in review right now.  See https://github.com/Khan/KaTeX/pull/1090 and https://github.com/KaTeX/katex-fonts/pull/10.  I have to fix a couple of things before the fix can be merged. . If you want to open a PR with your changes I can definitely test them.. > It doesn't add math-support for the /text...-symbols because I think text should indicate that this symol should be used only inside \\text{} - therefore the error was on my side.\nRight.  I should've looked at symbols.js.  It appears we already support the list of \\text... symbols above.. I'm going to close this issue and track adding support for Euro, Rupee, Ruble, etc. in #1107.. @Syndesi I've just merged #1090 which should solve the issue you ran into earlier with the fonts being missing.. Blocked on https://github.com/KaTeX/katex-fonts/issues/18.. Please don't delete package-lock.json.  What version of npm are you using?. @Syndesi I'm going to close this for now.  Please re-open https://github.com/KaTeX/katex-fonts/issues/18 is resolved.  I'm going to try to add some documentation to https://github.com/KaTeX/katex-fonts to help people add new symbols to the fonts.  I'll let you know when that documentation is ready if you're interested in giving that a try.. \nThe bottom rows are off by quite a bit b/c TeX uses fonts that are stretched horizontally for script and scriptscript styles, but the relative spacing looks correct.  KaTeX is red and LaTeX is in green.. @ylemkimon thanks for reviewing.. They feel roughly the same cost.  If we don't add real glyphs we still need to add fake metrics similar to what we do for Cyrillic. . @rrandallcainc friendly ping to see where things are at with this PR.. @rrandallcainc glad to see this PR finally merged.  Thanks for seeing it through.. I've made this change.  There are a few situations where rebase merging may be preferable, but this should simplify things.  I'm going to leave this open for a bit in case other people have concerns about this change.. Since no-one has commented on this, I'm going to assume it's not an issue.. @arlohosk what browser are you using?  Also there are multiple pre-release versions of 0.9.0, can you be more specific?  Have you tried the latest one, v0.9.0-beta?. @soichih what OS/Browser are you using?  Also, it looks like there's some issue with the spacing around the = which is weird b/c the v0.9.0-beta1 doesn't even use CSS for that spacing anymore.  What version of KaTeX are you using?. @mbourne can you post a link to that page?. @soichih I'm seeing the same thing in Safari.  I'm confused.  It's using a sqrt character but we use SVG for \\sqrt now.  What version of KaTeX are you using?. Firefox (Win7) @ 12px\n\nFirefox (Win7) @ 12px @ 90% zoom\n\nI think Firefox is having issues with the \\sqrt bar being so close to the edge of the SVG.  I wasn't able to get the fraction bar to disappear even when zooming out all of the way.. @ronkok will you have time to give that a try?. @edemaine I thought that unicode chars currently don't work in math mode.. @edemaine got it.  I forgot whether we had already made that change or not.  I guess not.. I want to get https://github.com/Khan/KaTeX/pull/1143 into to 0.9.0 final first.  Then we can start 0.10.0-alpha with this.. > I think the commit for the above changes should be merged before 0.9.0 final, if possible, as they are bug fixes. I can split this into a separate PR if you prefer.\nSplitting it out in a separate PR would be the easiest b/c of the other breaking changes in this diff.. @edemaine love the \"next version\" tag. ^_^. I've release v0.9.0 so we'll be able to merge this after review.. @edemaine thanks for the PR.  It's nice to get some of these small quick issues fixed. :). @ylemkimon thank you for catching those paths again. :). @edemaine go for it.. > PR #993 and unicode-math both map U+2223 to \\mid, not to \\lVert or \\rVert. \\mid is an operator, not a delimiter, useful for set builder notation.\n@ronkok thanks for catching this.  I'll remove the \\lvert/\\rvert changes from this diff.. @akalin once we fix #1099 your hack should work.. @edemaine thanks for the review.  I'll try to make these changes over the weekend.. @edemaine this is ready for review again.. I should've done that after merging that other diff.  Thanks.. @edemaine this is ready for review again.. I'm going to start a fresh PR for this.. As part of this we should be able to remove CSS rules that were specific to some of these spacing commands.. I missed Array sorry about that.. The recent merge of #1078 has cause the conflicts.  Can you merge master and the I'll regenerate the screenshots again.. #1135 will take care of the metrics make target.. This actually needs updating b/c I closed https://github.com/KaTeX/katex-fonts/pull/27 in preference of https://github.com/KaTeX/katex-fonts/pull/30.. I'll regenerate the screenshots this weekend.. Swiping the Raisebox screenshots shows that the surd has come down a bit, but using texcmp it looks like it's closer to what LaTeX.\n. @ronkok I'm happy with how things are looking in Firefox when the font is 12px.  I'm not seeing any of the clipping I was seeing before.  I generated the screenshots before you merged in master so I will have to regenerate them.\nFirefox: 12px @ 100%\n\nFirefox: 12px @ 50%\n\n. Hmm... I tried regenerating the screenshots in question based on 32682b4, but there's no change.  Maybe merge with master again.. @ronkok to resolve conflicts in binary files use git checkout --ours -- path_to_file or git checkout --theirs -- path_to_file.  In this case it doesn't matter which one you pick b/c I'm going to regenerate the screenshots.  See https://stackoverflow.com/questions/278081/resolving-a-git-conflict-with-binary-files.\n. The list of what isn't in KaTeX could be very large.  LaTeX supports lots of packages.  I guess we could list some popular packages that we don't support at all, and then for packages where we do have partial support list those things from those packages which we don't support.  This would take a big effort though so I'd want to have some way to automate this.. @blackhole12 thank you for reminding me about that page.  \nInterestingly % fails b/c we require a new line at the end of comments.  The test for \\left and \\right fail b/c we require those to be balanced as does LaTeX (MathJax appears to be more liberal with what it accepts).  We should probably file issues with https://github.com/utensil-site/available-in-katex/issues for the \\left and \\right at least.\nThe list appears to be out of date a bit, e.g. \\S and varGamma etc were added recently.  It's use the version from khan.github.io/KaTeX which explains why.  I need to update that.\nSome of the tests should fail, e.g. \\end on its own.  Some are easy to add, e.g. \\cal is the implicit group style version of \\mathcal which we already support.  I think \\unicode would be pretty easy to add too.\nThe list is also highlighting some bug, e.g. the \\llap test.  We aren't allowing \\, in text mode but we should.  Same thing with \\rlap except it's \\;.. I've also opened https://github.com/utensil-site/available-in-katex/issues/2 to find a way to run the tests in node so that we can use the data to update our README.md at publish time.. I think \\brace and \\brack wouldn't be too hard to support as we already support \\over, \\choose, and \\atop.  They're all very similar.. I think a warning to not use infix functions inside macros is a good note as lots of people will probably be writing macros even though they don't know some of these issues.\n. I've also added coverage badge to the README.\n\n. I would say this is blocked on #1126 since we'll want to have better patterns in place to make writing more tests easier.. @utkarshrai this would definitely be good place to start.  Running npm run test:jest:coverage should generate a coverage report in /coverage.. I've regenerate the screenshots in https://github.com/ronkok/KaTeX/pull/1.  It's incredible how many of our screenshots involve fractions.  Many of them probably don't need fractions to test what they're testing.. > When I was testing stretchy arrows, fractions were a cheap way to test vertical alignment and vertical kerns used for clearances.\nI guess you need some way to test clearance on top.  It's either \\frac or \\sqrt.. @ronkok I'll check out your branch tomorrow and see if I can resolve the conflict.. @ronkok thanks for figuring out the merge.  I've been slammed at work.  Will try to regenerate the screenshots tonight.. Having a coverage target for patches is silly.  I'm going to try to get rid of that check.. @rrandallcainc is the base style \\textstyle or \\displaystyle?. @rrandallcainc there's an open issue to add a toggle for displayMode to the test page, see #1035.. There's a Font Metrics API in the works, but it's quite a ways off.  That would definitely make this easier.. This is standard TeX behavior.  Here's a rendering from quicklatex.com:\n\n. @FavorMylikes since this appears to be the default behavior of LaTeX I'm going to close this.  If you would like adjust the height of < and > I would try defining a macros to redefine \\lt and \\gt.  Probably best to give those macros different names though as I don't believe our macro system provides a way to safely redefine a command using that command yet.  See https://github.com/Khan/KaTeX#rendering-options for details on using macros.. @jaltekruse I too find the scratchpad hard to use with a mouse or a trackpad.  I had a look at the video on freemathapp.org.  I like the copy and modify workflow.  I'll pass this along to one of product managers.. @jaltekruse I shared it with the team.  Unfortunately our team is rather small given our ambitious mission and there are other higher priority things at the moment.  Unfortunately, we've moved Perseus into our closed source monorepo.. It's not as simple as snapshotting Perseus, b/c now parts of Perseus are using files from other parts of the monorepo.. @ronkok I'm going to hold off on generating screenshots for this until #1143 is merged.. @ronkok any idea of why some of the fraction bars are wider?. > Yes, this PR supports \\genfrac and \\abovewithdelims, both of which give the author control over the fraction bar thickness. So I wrote screenshotter tests to demonstrate that capability.\nCool!  Sorry... I haven't actually look at the code yet.. Well that's no good.  @rrandallcainc good find.. @RoyiAvital the demo pages hasn't been updated, see https://github.com/Khan/KaTeX/issues/1171.. @RoyiAvital what version of KaTeX is that project using?\n. @sjorsvanheuveln does React 16 still support dangerouslySetInnerHTML?. We should probably just add that to the README.md.. I didn't see anything particular wrong with https://github.com/talyssonoc/react-katex.  It hasn't been updated in a while, but it would only need updating if a person need access to recently added KaTeX options.  Although https://github.com/Khan/react-components/blob/master/js/tex.jsx has been updated recently it doesn't expose any of the new options either.. It looks like it's not handling the JSX.  You're babel config is probably excluding all files in node_modules.  You'll have to adjust the regex to all files in react-components to be transformed.. @sjorsvanheuveln that package is poorly constructed.  It doesn't defined a main entry point.  It really should have an index.js and multiple packages for each individual component if we wanted to get fancy.  Sorry about all of the issue with that package.. @edemaine looks like some of the screenshots changed.  Could you add updated screenshots when you have some time?. @edemaine what kind of bugs did this reveal?. @edemaine there are some flow errors that need resolving before we can merge.. The Mod screenshots changed quite a bit.  Also the CJK rows in Unicode-chrome.png have disappeared.. @ArStah would you be willing to submit this using hackerone.com?. @ArStah it should be listed as Khan Academy.. This is appears to be a gitter issue.  It looks like they aren't properly sanitizing math input from users.. The KaTeX parser fails on the given input, e.g. \nKaTeX parse error: Expected 'EOF', got '\\<' at position 3:  \\<\u0332iframe src=\"ja:  \\. @pascalwhoop could you expand on what you mean by html>KaTeX>html?\n. We already \"forbid\" HTML inside the string we pass to katex.render b/c it's not valid LaTeX.. KaTeX autorender extension only looks at the$$...$$` that are on the page.  If they contain malicious code, once they've been added to the page it's too late.. > It\u2019s both KaTeX, where red is master branch and green is this PR.\n@ylemkimon with such a big change to the screenshot, it's probably more useful to compare KaTeX output vs LaTeX output.. @ronkok I'll generate screenshots over the weekend.. @ronkok do the screenshots need regenerating?. @edemaine weird.  I'll give it a try.. Here's the diff between LaTeX (green) and KaTeX (red):\n\nLooks awesome!. @edemaine ~the first time I ran the screenshot I got a image where the overbrace was overlapping the expression underneath it.  I ran the screenshot again and got the proper output.~ I see the screenshots you generated look good.  I updated the branch before running the screens hotter again.  Hopefully that helps.. Note: I had to add \\usepackage{mathtools} to test.tex in order to get texcmp.sh to work.. Hmm... the Firefox failure might have to do with:\nif (key === \"Lap\" && opts.browser === \"firefox\" &&\n            img.buf[0x32] === 0xf8) {\n            /* There is some strange non-determinism with this case,\n             * causing slight vertical shifts.  The first difference\n             * is at offset 0x32, where one file has byte 0xf8 and\n             * the other has something else.  By using a different\n             * output file name for one of these cases, we accept both.\n             */\n            key += \"_alt\";\n            file = path.join(dstDir, key + \"-\" + opts.browser + \".png\");\n            if (loadExpected) {\n                loadExpected = promisify(fs.readFile, file);\n            }\n        }\nI'm not sure how the generate Lap_alt.png though.. @edemaine @ronkok maybe we can grab the image that circle-ci is producing for Firefox and use that as the _alt version of the image.. @ronkok can you open an issue to update the screenshotter test?  We can treat figuring out how to update the Lap screenshot tests as a separate task.. @prabhatmuroor is there a test page that you could link to with this issue?. v0.9.0 was just released.. @prabhatmuroor can you check again with the latest version?. Only project-level coverage is being computed now.. I was thinking on CI.  I usually don't run tests locally.. This isn't as important now that our tests are running faster.. It's weird that the circleci build isn't showing up even though master has been merged in.  It's also weird that the Chrome screenshot has a scrollbar at the bottom.  @ronkok I'll generate some screenshots this weekend.  Hopefully we can figure out what's up with circleci later so that you can grab screenshots from the generated artifacts.. @ronkok can you add tests to katex-spec.js to check that \\lower and \\raise parse and build?. @ylemkimon I've changed that setting in the project settings on circleci.  I'm guessing it only takes effect on new PRs.. I've responded to #1226.  I think we should move ahead with a strict option.  I've marked this PR as blocked b/c it would be nice to have that option in place first and then update this PR to use that setting.. @mbostock https://github.com/Khan/KaTeX/pull/1143 may solve this.  I need to publish a new release though.. @mbostock v0.9.0 was released recently can you give it another try?. @edemaine thanks for the PR.  This is definitely a pain point for users.  I will review this weekend.. > How about using error levels:\n0 - suppress all errors, instead print LaTeX source code, this PR's behavior when !throwOnError\n1 - suppress unsupported command error, current behavior when !throwOnError\n2 - throw all errors, current/PR behavior when throwOnError\nI can't think of a situation where people would actually want level 1.  They'd still need to use a try/catch to avoid errors other than unsupported command errors.. @edemaine looks like there's some lint:\n/home/travis/build/Khan/KaTeX/test/katex-spec.js\n  3120:16  error  'buildTree' is not defined  no-undef. @ronkok that should be it.. It would be cool if we could automate this as part of the release script at some point.. @edemaine I'm interested in moving in this direction.  There are some issues that I need to work through with the organization about making this change.  I've been busy with other stuff lately and so have put it on the back burner.  I'll pick this up again in April when I have some more time.. @mbourne I checked the .zip file and it contains the same thing as the .tar.gz.  Can you paste the URL?. @ronkok thanks for the recap.\nI'd rather have some anti-aliasing fuzziness in the short term as opposed to the line disappearing in certain situations.  I think there are two things that we might look at in the future to address the anti-aliasing:\n- round the height to the nearest pixel (probably not that hard)\n- try to adjust the vertical position such that it lines up with pixel boundaries (hard)\nI think we'll want to look at the vertical positioning.  When testing nested fractions I noticed that sometimes the fraction bar is higher than it should be, sometimes lower, and sometimes just right.  If you look carefully you can see this in some of the screenshots that @mbourne posted.. It'd be good to test on a non-retina device if we haven't already done so.\n. @rrandallcainc this probably doesn't fit within the scope of what you were thinking of but someday it would be nice if we had an IR were the ord nodes contained exactly what font each character should be rendered as.. I think if we split it up into two mappings that may simplify things.  Those two mappings might be:\n- current options, character => family, weight, style\n- family, weight, style, character  => actually CSS class for that font. > @kevinbarabash I'm a little fuzzy on what you mean by \"IR were the ord nodes contained exactly what font each character should be rendered as.\". Are you referring to something like: render \"hello\" as SansSerif-Bold?\nI was thinking that each character within the IR would have a specific font style.. @marcianx thanks. :). @ronkok thanks for investigating this.  I wish that we didn't have to content with contenteditable.  It's so poorly defined and each browser does its own thing. :. @ronkok for testing, I think a screenshot test is probably appropriate.  In https://github.com/Khan/KaTeX/commit/53203ed92cc3a2a89b0de178bf540f34a3f81f4f @davidflanagan added a option to the screenshot tests to include a style property.  We could also add a content editable property in a similar fashion.. @edemaine I like change to test.html, it's too bad it doesn't reproduce the issue. :(. Closing in preference of #1183.. @ylemkimon I've moved the test font repo to https://github.com/KaTeX/katex-test-fonts.  Can you change the submodule folder to katex-test-fonts when you update the url?. Let's give unpkg.com a try.. @ylemkimon this looks really cool.  How do I view the generated screenshots?. I wasn't seeing the \"Artifacts\" tab b/c I wasn't logged in.  It's there now.  I'm surprised at how quickly the tests run compared to travis-ci. . > Upload built file and provide a preview/demo/sandbox for each build(PR and push)\nWe should probably only update the demo page whenever we publish.. > Run lint/flow/jest\nWe'll definitely want this before merging.  I guess I should've looked at the PR a bit more careful.. > We'll definitely want this before merging. I guess I should've looked at the PR a bit more careful.\nI guess we don't need it for this PR since we're still running travis-ci.  It's probably a good idea to run both for a while so that we have time to discover any rough edges circleci may have before deprecating travis-ci.. I like that we're able to run multiple jobs with different settings in parallel.\n\n. @ylemkimon thanks for the PR.  . @edemaine have you rebased your branch so that it includes the .circleci/config.yml?. @ylemkimon thanks for finding out all that info.  It's quite unfortunate about the circelci behavior.  :(\n. We should add a screenshot test case for this so we don't regress in the future.. @edemaine I forgot that we do have screenshot tests for this.  This bug seems to be Safari only.  Can you confirm what browser you're seeing this in?. Interesting.  It works fine for me in Chrome 66 on Mac.  In makeFF it looks like we're using the combining version and we're setting a negative left start bearing on the character which is probably what's causing the issue.. I've created https://github.com/KaTeX/katex-fonts/issues/44 to track fixing this.. I'm seeing the issue on Safari.. @edemaine \\not= is totally wrong.  It renders as = / in Safari so I think we still need a fix for this, as least for Safari.. With all of the awesomeness that's been landing lately I was thinking I'd do a release sometime this weekend.. @ylemkimon thanks for reviewing.  Feel free to merge PRs.. I'm not sure why the circleci tests are failing but it doesn't matter b/c they aren't required checks.. @edemaine thanks for the PR.. @ali-turan could you open separate issues for these?. @ali-turan \n1 - You might be able to tweak the CSS manually, but there isn't a easy way right now.  Having a screenshot though will help us determine if the spacing you're seeing is a bug or not.\n2 - It isn't possible at the moment.  We do you use SVG for stretchy accents, but regular symbols are all rendered from fonts and changing that system to also all SVG would big a significant amount of work.\n3 - Adding specific glyphs from a package is definitely more doable.\n@edemaine to answer your question there are two options:\n- \\llbracket and \\rrbracket from the stmaryrd package\n- \\textlbrackdbl and \\textrbrackdbl from the textcomp package\nIt might make sense to add these glyphs to our blackboard font file.\nI found the answer in this awesome post https://tex.stackexchange.com/questions/81785/latex-code-for-white-square-brackets-and.  I love that it used dextexify to figure which packages the symbols were in.. @rrandallcainc thanks for the PR.. It's a good thing we split things into separate files in the functions folder otherwise we'd just see a couple of big blobs.. The 2018 revision of template tags address \\u and \\x.  It's unfortunate about ${}.. Verified.  Thanks for reporting this issue.. @edemaine thanks for the PR.  @rrandallcainc thanks for reviewing.. @jiewuza I would try:\ndelimiters: [\n    {left: '$$', right: '$$', display: false},\n    {left: '$$\\n', right: '\\n$$', display: true}\n  ]\nand see if that helps.. I see.  Yeah, that's a tough problem.  I don't think there's a clean way to solve the problem by simply defining different delimiters.  You'll probably want to write your auto-render code.  I would probably just use \\(/\\) and \\[/\\] or something like that.. I'm going to close this since it's going to be very difficult to implement something that handles the different behaviors people want.  Also, there is a workaround by using different delimiters.. @ronkok I think what @ylemkimon may have been getting at was that in symbols.js the call to defineSymbol links a latex command and its unicode character.  It would be nice if we could use that information in delimiter.js instead of having to repeat the unicode character there as well.\nAside: I thought I added support for some of the other unicode delimiters like the left/right triangular brackets.  I can't seem to find the PR or the code anywhere. :(. I was going to continue splitting things out of buildHTML.js and add flow type to the new files, but at the rate I was going I don't blame you for wanting to add flow types to buildHTML.js.. All of the PRs I had open for breaking things out have landed so you're good to go with this PR.. At some point in the future we may want to provide a callback to allow users to provide metrics about characters they care about.. The goal of KaTeX is to provide an implementation of LaTeX for the web.  Providing alternative syntax for matrices is pretty far outside that goal.. I like this but won't have time to review this for a while.  If someone else could review this that would be much appreciated.. I think having separate settings for the changes we're making is useful for keeping track of what changes in behavior from LaTeX exist outside of strict mode.  It's probably worth allowing access to each setting in cases some users get use to a particular flavor of non-strict mode.. > think of strict: false as being like a MathJax compatibility mode, given their more lax choices\nWe may also want to have a mathjax compatibility mode that is separate from non-strict mode.\n@edemaine were you thinking that non-strict mode would be the default and that people would opt-in to strict mode?. Sorry for not getting back to y'all on this sooner.  We could do a poll about this, but I'm pretty sure that the vast majority of our user base care more about sane defaults and having more flexibility in how they code their TeX than they do about strict adherence to LaTeX's behavior.  That being said, providing a strict mode is important, but I think have it be off by default is probably the way to go.  Also, a single option is probably the way to go.  It would be nice in the long run to all certain things like the distance between rows in a matrix to be configurable from within the LaTeX code using \\setlength.  There will be of course certain behaviors such as what's allow inside \\raise and \\lower that can't easily be controlled by TeX code and we shouldn't worry about making those configurable.\nTL;DR: let's go with a single strict mode option that is off by default. . I wonder if the font bold font is somehow marked as being the bold variant and then MacOS' text rendering system is somehow trying to \"unbold\" it b/c we aren't specifically telling the browser what the font weight should be.. > but it's medium bold (600?)\n@edemaine where are we doing this?. Good call. cli.js should probably be updated to include \"./dist/katex.js\" instead of \"./\".  We should probably have some tests for cli.js as well.. I'm confused as to why the unicode equivalent of \\mathscr{B} is missing.  \\mathscr{B} itself renders just fine.. > Script B, \u212c, is at Unicode code point U+212C\nInteresting.  \n\nI can write another PR to cover the other missing characters\n\nSounds good.  I think there's enough going on in this PR as is though.. The problem seems to be that the surrogate pairs screenshot test is too wide.  @ronkok could you change that test to render things in an array?  Also, are you able to access the screenshots from circleci?  If not, I can copy/paste them into this PR after the tests run.\n. Another option is to make the font smaller.. \n\n. @ronkok I've posted the screenshots for the SurrogateParis test above.  If you update your PR with those this should be good to go.. @ronkok add the image files I posted to the test/screenshotter/images folder and commit and push that to this PR.. > @kevinbarabash Did you want to try to fix the Flow issue, or accept this as is? It looks like it's probably good to go.\nThis is fine as is.  We can add flow in later.  That being said, as soon as we get to 100% flow we should probably be more strict.. I'm surprised/disappointed that browsers don't keep the punctuation on the same line unless it follows a space.. @ylemkimon does this resolve the issues we ran into with circle-ci not running tests on PRs?. Also, only the firefox results show up in GitHub where it says \"All checks have passed\".  Should the chrome results show up as well?. I would like replace travis with circle, but this issue seems like a deal breaker.  Can we try using CircleCI 2.0?. > @kevinbarabash What do you think about failing the build when it's on the forked repository, and documenting about it on CONTRIBUTING.md?\nThat's definitely an option.  How would we do that?. @ylemkimon what made you change your mind?  FWIW, I think using travis for the unit tests only is okay since they run pretty fast.  This PR implements option 1, correct?. @ylemkimon I spent some time migrating another project completely off of travis-ci and can't be happier running everything on circleci.  I find travis-ci is so buggy.  Some times the builds take really long or hang completely.  Then there's #1484 where there's no to travis-ci build from the GitHub UI.  This is not the first time that's happened either.  I think we should go with option 2.. I'm going to update the required checks as well.. A CHANGELOG that simply aggregates the list of bug fixes, new features, and misc from each release in https://github.com/khan/KaTeX/releases might address the concerns about a cluttered change log.. > Given that we have the latter, do we need the former?\nThe nice thing about the former is that you can see them all together whereas the releases are paginated which isn't that bad imo.. @Kully the CHANGELOG.md file you linked to looks alright.  I like the categories that @ylemkimon posted to.  Currently the release notes combine Added and Changed into a single New Features.  I kind of like separate them out though.  I guess every once in a while we do have Breaking Changes which is kind of like Changed.  I'm not sure what would fit into Changed but not Breaking Changes.  \ud83e\udd14 . I see, so changes might be something like \"we made this existing feature better in some way\"?. @LukasDrgon cool!  Thanks for the PR.. Closing as a duplicate.  I've posted a suggestion of how to work around the issue in #1202.. We might want to look at revising our gh-pages to have multiple pages.  The current demo has both a small text input box and a small render output.  In another issue it was mentioned having a way to also change the settings.  I think a dropdown with specific examples would be nice too.. @marcianx the codecov check is non-blocking.. > This is necessary because documentFragments are put in spans in some cases --\ne.g. src/functions/sqrt.js.\nThe code changes look fine, but could you expand on this before merging.  Is it b/c children for a span can only be DomChildNode which doesn't include documentFragment?. @youqad will you be able to update this pull request?. @ronkok sorry for taking so long to look at this.  I'm generating the screenshots right now and will send you PR shortly.  I'd like to get this in before the next release.  Thank you for reaching out to the community to test this.. @ylemkimon thanks for updating that last Chrome screenshot.. KaTeX-Math-Regular and KaTeX-Math-Italic have pretty much the same glyphs except KaTeX-Math-Italic has a solidus.  All of the glyphs in both are all in italics.  The contain upper and lowercase Latin and Greek letters.\nI think we should get rid of KaTeX_Math_ and move any glyphs that don't already exist in KaTeX_Main_ already to those font files.. @edemaine what are some of the differences?. Interesting.  It sounds like we need some sort of mapping to say which font either math fonts or text fonts are pointing to.  At least initially they'd point to the same font.. @rokyed how are you calling katex.render?. Is LATEX_MACROS coming from the server?  Regardless of where it's coming from though, you should be able to do:\nlet options = {\n    unicodeTextInMathMode: true,\n    // unicodes are not fully supported yet,\n    // this is how we do 'round here\n    macros: Object.assign({}, LATEX_MACROS, {\"\\\\mathit\": \"\\\\mathnormal\"}),\n};. I looked at the shields.io page and saw at least one badge for a minified zipped file.  I don't understand their API at all though.  If we give it the URL for the gzipped file does it just magically do the right thing?. @edemaine thanks for the PR.  @ylemkimon thanks for reviewing.. @ronkok thanks for the PR.  @ylemkimon thanks for reviewing.. There must be some slight difference between ~~ in \\texttt and  in \\verb.  Can you update the screenshot?. Exposing defineMacro as __defineMacro could be a separate PR.. > I could not find a clean way to expose the KaTeX flow types to plugins. Do you have any suggestions?\nI need to read up on this more, but it sounds like you can define an index.js.flow file.\n\nFor plugins to dynamically inject their new css classes I could think of 2 solutions:\n- Migrate KaTeX styles to a css in js solution like aphrodite\n- Ask user to add plugins css in addition to KaTeX.css.  I used this approach as I wasn't sure if it is OK to change the old behaviour.\n\nMy hope is that we can reduce the need for CSS in general in the future.  It limits our ability to support other rendering backends in the future like canvas or SVG.  Obviously with the case of adding support for additional fonts some CSS has to be defined somewhere in order to define new font faces.  I think what you did is fine.\n\nI think migrating KaTeX development server and github.io website to a React App like the one used in persian-katex-plugin opens up whole new possibilities e.g. we can have buttons to apply different plugins to the library and check out their effect. I'm ready to implement that if you are OK.\n\nBeing able to try out different plugins would be awesome.  I'd try making that work first in the dev server environment.  One thing I'd like to investigate before introducing React for the test app is look at restructuring this repo to be a mono-repo.  See https://github.com/Khan/KaTeX/issues/1411 for details about moving to a mono-repo.. @Kully cool.  Injecting the KaTeX functions shouldn't be too hard b/c you can load functions.js, symbols.js, environments.js, and macros.js and then read the various tables which store those things.. > I wonder, though, if the README page is the best place. README already has a lot of information. Maybe a page in the wiki would be better?\nI agree that it feels like too much info for the README.  I'm not sure how difficult it would be to update the wiki with a script.  I guess we could manually copy/paste it in there.  Maybe a FEATURES.md or something like that.. > > b/c you can load functions.js, symbols.js, environments.js, and macros.js and then read the various tables which store those things.\n\nHow would I do that?\n\n@Kully I was thinking something along the lines:\n```\nimport symbols from \"./src/symbols.js\";\nimport functions from \"./src/functions.js\";\nimport environments from \"./src/environments.js\";\nimport macros from \"./src/macros.js\";\nconst commands = [\n   ...Object.keys(symbols.math),\n   ...Object.keys(symbols.text),\n   ...Object.keys(functions),\n   ...Object.keys(environments),\n   ...Object.keys(macros),\n].sort();\n// inject commands in .md file\n```. I think the difficult part is how to make the JS code work with your python code.  I would probably rewrite the python code in JS and then you'd be able to easily access the KaTeX and MathJax list of commands at the same time.. @Kully will you be able to update this PR?. Decided instead to limit changes to enforcing consistent object-curly style, addressed in https://github.com/Khan/KaTeX/pull/1376.. I can't see visual diffs of the screenshot images in git anymore.  Anyone know why that might be?. Safari\n\nChrome\n\n. @edemaine this is ready for review again.. Yeah, I'm pretty happy with the output.  The implementation is a little hacky.  Hopefully using \\rlap will work. \ud83e\udd1e . \nI ended up doing defineMacro(\"\\\\not\", \"\\\\mathrel{\\\\mathrlap{\\\\not@}}\");  Almost perfect expect that the width of the mord is 2px when it should be 0px.  I'm not sure where the width is coming from.  The children all have widths, but the widths are marked as implicit when the browser is displaying the computed styles.. I was testing on Safari.  I did not check whether the screenshots changed.  I'll run the screenshot tests locally and see what happens.. We should address the issue with glyphs that use 0x338 that was raised in https://github.com/KaTeX/katex-fonts/issues/47 before merging this.. I'm going to update this after everything has been moved into /functions.. > Does prettier implement anything useful that lint doesn't check for? Personally, I'm finding our lint precommit hook annoying lately, because lint is really slow (on my computer, maybe 5-10 seconds) and I usually commit after a full npm test (though there are exceptions). So now I'm in the habit of git commit -n to avoid the preconmit hook. Adding more to the hook would be inconvenient... Also, I feel a little weird about having code modify my code from under me.\n@edemaine lint takes about the same time for.  Most of what we use lint for can be replaced with prettier.  Removing the rules that prettier covers might speed up a lint a little bit, but probably not by much.  The nice thing about prettier is that it'll fix any issues automatically.  It feels a little weird at first having something muck with your code.  It's changed how I code though.  I no longer waste time thinking about line length or indentation or trailing commas or whatever.  I let prettier do it's thing.\nOne thing we might look at to speed up lint is https://github.com/alansouzati/eslint-parallel.. I tried eslint-parallel and there was no appreciable speed up.. Maybe instead of adding prettier we can turn on a couple of more eslint rules.  The main thing that I wanted was some consistency about how we do imports with destructuring.  In some places we have import { foo } from \"./foo\" and in other places we have import {bar} from \"./bar\".. I'm going to add the object-curly-spacing rule to make our brace spacing more consistent.. @HosseinAgha I had a look at your plugin.  I'm still a little confused about which classes are being set on the spans containing characters from the Vazir font.  In katex.less we define classes like .texttt that result in the font-family being set to KaTeX_Typewriter;.  How does this work with your plugin?  Also, could you post some screenshots.  I'm curious about how the output looks.  Does it render text right to left?. Answering my own question.  I checked out your repo and ran the test app.  It looks like Vazir-Regular is being set as one of the classes on the span containing the number \u06f9.  This is super cool!  I'm happy to see it was too much work.  I'll spend some more time reviewing this PR this evening and get back to you regarding your question about how to test this.. @HosseinAgha thanks picking this up again.  There are some changes described in my comments above that I think would be helpful in making this more robust and easier for other people to use it.  I approved this PR though b/c I want to get this on to master so that we can continue to iterate on it.. @HosseinAgha thanks for adding tests.. > Should we keep some of the links to the Issues/PRs?\n\nI think Issue links are more relevant for users than the PR ones. I hyperlinked some of them but held off on doing them all.\n\nHmm... that's annoying that the links have to be inserted in this file.  We could leave them out for now and then maybe write a script to automate the process later.\n\nKeep the @flow comments?\nI've grouped @flow additions/changes in here. I don't know how important they are.\n\nI thought that was a nice touch.\n\nWorth making Present or Past Tense consistency in CHANGELOG?\nThe headers suggested from keepachangelog.com are in the past tense, but some of the lines in our CHANGELOG are in the present tense: eg. -Add !@#$ ...\n\nThat's a good point.  Yeah past tense is better.  I'll change things to past tense for future releases.. @Kully looks good, but it appears you've made a change to submodules/katex-fonts by accident which is causing the tests to fail.  Can you revert that change?. @Kully I think the easiest thing to do would be to create new PR and just copy the file over.  The only thing that should be in your PR is the CHANGELOG.md file right?. I need to do a release.. We must be assuming that any character inside \\underset should be typeset using the limits structure.  Looks like a bug.  Thanks for reporting.. It looks like one of the changes introduced a parsing error in the Smash screenshot test.  I'm surprised all of the unit tests pass.  It might be worth adding a unit test that fails before fixing the issue.. @EthanLuisMcDonough thanks for the PR.  It looks like our publish script, release.sh, builds the code  by running npm run list before it updates the version in package.json.  The script should be updated so that we update the version in package.json before running npm run dist otherwise we won't get the right version when publishing a release.. It feels like it's outside of KaTeX proper.  Adding it to contrib would be fine.. @edemaine this is no longer blocked, but there's some conflicts that need resolving.. @edemaine thanks.  This looks great.  I'm so happy you were able to sort out the horizontal spacing differences.  I'll do another pass this evening. . Is anyone able able to view side-by-side images in the files tab on GitHub?  All I see is Binary file not shown..  It's not just this diff either. :(. I had a look at the screenshots.  They look good.. I'm pretty sure I originally wrote this function so it's fault.  Good catch.. @ronkok thanks for fixing this.  @edemaine thanks for reviewing.   The changes look reasonable.  Let's merge it!. @ylemkimon thanks for raising this issue.  I don't think our Travis build history is important.  I can email them.. @edemaine could you post diff images between the new render and the LaTeX rendering?. Cool.  Thanks for updating this.. @edemaine consider pushing your branches to Khan/KaTeX, then you could make this PR based on inlinebreak instead of master and it'd be easier to see the changes that you added in this PR.. @edemaine I think it would be nice to have \\\\ split lines in non-strict mode in display mode.  Thanks for adding a note in the README about how to enable this behavior.. It's weird that the travis build failed but circleci was okay.  It looks like there's an issue with the flow types in cr.js. . I see, circleci isn't running the tests yet.. The intent of strict mode is twofold: \n- complain when people use things that aren't supported in LaTeX, e.g. unicode in math mode\n- implement the same behavior as LaTeX\nSince we're doing the latter already in this case there's no need to warn or throw and error.. It should still do nothing, b/c it's valid LaTeX to use // in display mode.  If // caused an error in LaTeX then it should also cause an error in KaTeX in strict.  But since it doesn't, we shouldn't raise an error either.. My understanding is that \\\\ should always break lines when not in display mode.  In display mode it should only break lines if strict is set to false or ignore.  strict: \"warn\" and strict: \"error\" seem like two variants of strict mode so in either of those situations \\\\ shouldn't do anything in display mode.. @edemaine it's like you read my mind.  I was thinking of this exact thing when reading through #1287.. babel has a loose mode setting for some transforms.  We could also investigate that.. @edemaine cool!  Thanks for making that change.  I'm glad to see that almost all of the screenshot didn't change at all.. @edemaine it looks like one of the screenshot tests is failing, either FractionTest or the one right after it.. @edemaine we'll want to eventually move tag into /functions like everything else so we'll need to figure out a way to implement it using defnineFunction.  I wonder if we can split up buildHTML and export the chunk that tag uses so that the tag implementation could be extracted to a separate file.. I think we should default strict to \"ignore\".\n\nBut the bigger change is line breaks. \n\nGood call.\n\nI'd suggest we go through a series of alphas and/or betas, like 0.9, given the number of changes.\n\nHopefully we won't need as many alphas/betas as last time. \ud83e\udd1e . I think making a milestone for 1.0 is a good idea.  That way we can go through all of our existing issues and pending PRs to see if there's anything that we think should be addressed before moving to 1.0.. 0.10.x has had it's first -alpha so I think it's safe to close this.  @ronkok I'll publish another alpha (or beta) when #1162 is ready.. @marcianx thanks for continuing to push forward with adding static typing.  I'd appreciate any help you can give moving the remaining functions and environments into their respective folders.. This is awesome!  I love that diffs from failures show up right in the GitHub UI.. > Transfer the repo to KaTeX organization\nSorry I still haven't gotten around to this.  Knowing why this is necessary will me advocate transferring of the repo.. Thanks for the update.. @ylemkimon go for it.  Thanks for setting this up.. @ylemkimon just so that we're on the same page, you think we should change the copyright to\nKhan Academy (c) 2018. @ylemkimon I've accepted the updated permissions.. You could try rendering the question and the answers within the same WebView.  KaTeX can also be run outside of a WebView so if there's some way to run JavaScript in a background thread, you could have it generate the HTML and the load the HTML + KaTeX's CSS instead of loading katex.js in each WebView.. Closing this as the suggested fixes should work.. This is awesome. Also, I just noticed that codecov is include /test in our code coverage metrics.  We should exclude that folder.. > Shall I change that in this PR?\nMay as well.  Thanks. :). I think it's probably best to DRY the code up in a separate PR.  I find reviewing changes were stuff is moved and refactored at the same time hard to follow.  We should also add flow types to the test files as well.. @edemaine there's some lint and a couple of failing tests.. There is no support for long division in general.  @freemaths is there a particular package that you use for this in LaTeX?. @ronkok were you thinking of just rendering the \\longdiv symbol or also laying out all of the steps too?. @freemaths you could try different settings https://developer.mozilla.org/en-US/docs/Web/CSS/font-smooth and see which works the best for you.\n. @Kully thanks for the PR.. Let's discuss in a new thread.. @jbolda thanks for mentioning gatsbyjs.  For some reason I thought the reacts.org site was using jekyll.  I was wondering if you'd be able to compare gatsbyjs vs docusaurus?. I hadn't thought about versioning of documentation but that's probably something we'll want to do starting with 1.0.  @jbolda how does Gatsby handle versioning?. The tricky part is rendering the math from within markdown.. I don't understand how flow annotations would help with automatically updating the list of LaTeX functions that KaTeX supports.. @jbolda I don't see any flow annotations in the code that you linked to.  It looks like there are jsdocs comments though.  It would be cool generate https://github.com/Khan/KaTeX/blob/master/docs/api.md from jsdocs in katex.js.  I'm kind of surprised nobody's made a docusaurus plugin for this yet.  I did find a plugin for typedoc which is for typescript documentation.. @ylemkimon are you planning changes or should I review?. @edemaine is there an action here for @ylemkimon?  I'm not sure what the next step is for this PR.. Since it sounds like there's still some changes pending I'm going to mark this as \"needs-revision\".. I'm going to try to look at this this weekend.  I should've suggested saving the tagged template change for a separate PR.. @ylemkimon thanks for group the commits into logical groupings.  I'll look at the individual commits when I do this review.. > With removing getTree, I think expectKaTeX became simple enough. Maybe we can extract expected string construction into separate function, like printActualErrorMessage?\nSounds good.. @ylemkimon thanks for upgrading to webpack 4.  I'd like to see how the dev server works with these changes.  I'll spend some time tomorrow playing around with this.. I looks like you have regenerate the snapshots.. @edemaine thanks for addressing these longstanding issues with our MathML output and getting us started on our 1.0 milestone (#203 was the first issue closed in the milestone).. We can start a 2.0 milestone to park some of these longer term goals.. This would also be useful on mobile devices where the screen is narrow.. That's kind of cool.  I don't think we'll support this in the short term.  I'd like us to have a feasible way developing this an extension as opposed to doing in directly in KaTeX proper.  The rationale being that this feature will probably increase KaTeX's size considerably, but probably won't be used by very many people.. Looking forward to reviewing this this evening. :). I think the parent pointer is a nice solution.\n\nThere is one builtinNamespace that loads the built-in macros once. Unlike current code, this never gets copied! So it should speed up repeated calls to KaTeX.\n\nCool!\n\nRe-organize macros object as a new Namespace object. TeX would call these \"groups\", but we use group all over the place in the parser, so I thought this would be too confusing.\n\nGood call.\n\nBut I think it's also an important feature: it enables consecutive calls to KaTeX to share state.\n\nAlmost like an .sty file that someone might define with common custom macros they use.\n. @edemaine do you want to save the optimization for a separate PR?. I thought it might be more of an incremental change, but if it's a rewrite let's wait.. I didn't realize that we had \\tfrac.. I investigated this and it didn't actually speed up our use case.. Good find.  Can you link to audit?. @ylemkimon that sounds great!\n. @edemaine I tried running npm audit locally but that doesn't seem to be a command in npm v5.6.0.  What version of npm are you running?. Probably b/c the change was merged into gh-pages instead of master.. Hmm... these should've been updated as part of the release script.  Sorry for not checking them.. Does this occur in any of the other \\textX commands or is it just a \\texttt thing?. This is intense.  @ylemkimon what's the workflow for fixing these issues.  Does someone do the breaking upgrades in a separate PR and then after those get merged we update this branch?. > Is it possible to exclude @Greenkeeper[bot] from @khanbot's CLA checking?\nNot sure.  I could try add an entry manually for @Greenkeeper[bot] to the spreadsheet and see if that does anything.\n\nDo we need package-lock.json? Since greenkeeper tests for all in-range versions of dependencies, I think we don't need it anymore. Otherwise, we should enable greenkeeper-lockfile.\n\nI think package-lock.json is still useful for ensuring reproducible builds.. I wonder if now is a good time to start looking at refactoring TypeValueMap from:\ntype TypeValueMap = {\n  \"a\": number,\n  \"b\": string,\n  \"c\": number[],\n  \"d\": {a: number},\n};\nto \ntype NodeA = {\n   type: \"a\",\n   num: number,\n};\ntype NodeB = {\n  type: \"b\",\n  name: string,\n};\ntype NodeC = {\n  type: \"c\",\n  nums: number[],\n};\ntype NodeD = {\n  type: \"d\",\n  data: {a: number},\n};\ntype Node = NodeA | NodeB | NodeC | NodeD;. I started converting \"bin\", \"rel\", etc. but there were too many errors.  We should add // @flow to buildHTML.js and buildMathML.js first. . Looking at the way we handle bin, close, inner, etc. I think we should roll these into a single group type called \"atom\".  The ParseNodeType would then look like:\n...\n\"atom\": {|\n   type: \"atom\",\n   kind: \"ord\" | \"op\" | \"bin\" | \"rel\" | \"open\" | \"close\" | \"punt\" | \"inner\" | \"over\" | \"under\" | \"acc\" | \"rad\",\n   value: string,\n|},\n...\nThe list of atom kinds comes from page 158 of the TeXBook.\nAlso on the page is the follow prose:\n\nAn atom\u2019s nucleus, superscript, and subscript are called its fields, and there are four possibilities for each of these fields. A field can be\n- empty;\n- a math symbol (specified by family and position number); a box; or\n- a math list.\n\nEventually we might have an atom type that looks like:\ntype Atom = {|\n   kind: \"ord\" | \"op\" | \"bin\" | \"rel\" | \"open\" | \"close\" | \"punt\" | \"inner\" | \"over\" | \"under\" | \"acc\" | \"rad\",\n   nucleus: null | Symbol | Box | Atom[],\n   sup: null | Symbol | Box | Atom[],\n   sub: null | Symbol | Box | Atom[],\n|},\nThis is a larger change but would bring our internals close to TeX internals.. I'd prefer not to use user tokens.  Is there some way to scope the token to a specific repo?. @ylemkimon I see.  The SSH deploy key looks complicated.  I think I'll create a separate account just for KaTeX repos.. This is blocked on me setting up an account and creating a token.. @ylemkimon sorry for not creating a token yet.  Should we do something similar for the yarn.lock file? . It's possible that in some cases that changes to package-lock.json file weren't being checked in.  Perhaps we should fail the build if package-lock.json changes after travis does npm install. \ud83e\udd14 . After reading https://docs.npmjs.com/files/package-lock.json#description it sounds like package-lock.json is only useful for intermediate deps as opposed to the deps that appear in package.json.  We could try pinning deps in package.json and see if that helps.. @edemaine awesome stuff!\n\nDefinition in this PR: A command is \"defined\" in KaTeX if it's either a macro or a function.\n\nWhy not check in symbols as well?. @marcianx awesome!  I wonder if eventually we might just move the handlers for \\left and \\right into Parser.js.  I think they were in Parser.js to begin with and at the time I was striving for uniformity with the defineFunction API.  The truth is, tracking the left/right depth works out is more of a parser thing to do.  Also, if this is in the parser we may be able to get rid of having to create the extra parse node for the right delimiter.. I'll review this weekend.. I feel like this might benefit from a screenshot test.  Maybe render some math using both \\boldsymbol and \\bm.. > Should we add this git command to the npm install script?\nWon't that affect people doing npm install katex?. @ronkok here are the updated screenshots:\nChrome\n\nFirefox\n. I can't believe it's been that long.. Since ParseNode is just a data class we should be able to get rid of it in the future once all of the data in the ParseNode lives at the same level.  Then it'll be easy to enforce what should appear in each node using flow obviating the need for ParseNode completely.. I'll try installing the previous version to see if that fixes it.  Thanks.. No luck.  This isn't really a blocker since we can grab screenshots from circleci.  I'll try to debug when I have more time.. Now it fails with the following message:\n```\nkhan/KaTeX/dockers/Screenshotter/screenshotter.js:243\n            throw new Error(\"Failed to connect selenium server.\");\n            ^\nError: Failed to connect selenium server.\n    at Socket. (khan/KaTeX/dockers/Screenshotter/screenshotter.js:243:19)\n    at emitOne (events.js:116:13)\n    at Socket.emit (events.js:211:7)\n    at emitErrorNT (internal/streams/destroy.js:64:8)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)\nFailed taking screenshots, stopping and removing a3e3f54bd271\n``. I tried runningnode dockers/Screenshotter/screenshotter.js` but it failed b/c it can't set the window size.  I think my local geckodriver/Firefox is too new.\nAnyway, I feel like there's a fair amount of complexity with trying to communicate with the selenium running inside the docker from outside.  I wonder if mounting a folder would be any easier.  I know there were issues with mounting folders on some systems back in the day but maybe those issues have been resolved.\n. This is pretty low priority though b/c it's working on travis and circleci and people can grab screenshots from there as need be.. @zacharyrs thanks for the PR.  Can you update the Arrays test in ss_data.yaml so that one of the separators is the separator you added?  The tests will fail, but we'll be able to grab the updated screenshots from circleci and update them.  Also, can you update the the should accept vertical separators test in katex-spec.js to use the new separator?. Here's the screenshot from Chrome:\n\nThe rendering is unfortunately too wide.  The Firefox web driver just bails when it tries to take a screenshot of something wider than the browser window.  Chrome's web driver is a little more forgiving.  @zacharyrs can you remove the column you added?  We already have a number of | separators, we can change one of those to :.. @zacharyrs you'll need to update the screenshots.\nChrome:\n\nFirefox:\n\n. @zacharyrs the tests are failing because the screenshots that are produced during the screenshot tests don't match what existing on your branch.  Copy the images I posted above into test/screenshotter/images and push that change and you should be good.. @zacharyrs sounds good.  Thanks again for the PR.. That looks much better.  It'd be nice to see a visual diff against LaTeX's output.  Unfortunately my docker setup is broken at the moment.. Screenshots from circleci:\nStrikeThrough (Chrome)\n\nStrikeThroughColor (Chrome)\n\nStrikeThrough (Firefox)\n\nStrikeThroughColor (Firefox)\n\n@ronkok do you have access to the artifacts on the circleci builds?\n. Are those diffs on circleci diffs against KaTeX's previous version or against LaTeX's rendering?. The top row in the texcmp rendering is almost perfect.  Overall this is a big improvement!. We could increase the window size but then all of the files would be bigger and take up more space.  What's the benefit of testing more pixels?. Good point about PNG compression of whitespace.. I think this is a move in the right direction.  I'm confused though why the slant of the slash is different in \\notin in the third line especially if \\notin is now defined as \\not\\in now.. Good find.. Closing since this was just an experiment.  The more probably direction to reduce module overhead in our bundled code is to upgrade to babel 7 and use ModuleConcatenationPlugin.. unknown repository eek. @edemaine I was re-reading comments in https://github.com/Khan/KaTeX/issues/376 and noticed that you suggested renaming vlist to vbox.. Page 82/83 in the TeXBook provide a detailed explanation of how vboxes are constructed:\n1. If the vertical list contains no boxes, the depth is zero.\n2. If there\u2019s at least one box, but if the final box is followed by kerning or glue, possibly with intervening penalties or other things, the depth is zero.\n3. If there\u2019s at least one box, and if the final box is not followed by kerning or glue,\nraise lower the depth is the depth of that box. \n4. However, if the depth computed by rules (1), (2), or (3) exceeds \\boxmaxdepth, the depth will be the current value of \\boxmaxdepth.  \n(Plain TEX sets \\boxmaxdepth to the largest possible dimension; therefore rule (4) won\u2019t apply unless you specify a smaller value. When rule (4) does decrease the depth, TEX adds the excess depth to the box\u2019s natural height, essentially moving the reference point down until the depth has been reduced to the stated maximum.). @ronkok thanks for including \\hline as well as \\hdashline in the screenshot:\n. > Looking through this PR, some of these changes to buildHTML...seem ancient, and I was surprised they were not in yet. Looking back, I just realized that the last 21 PRs I sent were just so that this PR could finally finish. O_o\nI appreciate how deliberate you've been about these changes.  I'm glad that we're getting a place where we're able to do larger refactorings safely.\n\nbuildMathML should come in soon as well.\n\nLooking forward to it.. My hope is that the IE flex bugs aren't too bad.  We should probably make a small test suite of different layouts using this pattern and try it out on IE to see what breaks.  I'm also curious to see how our stretchy SVG interacts with this.. After some tweaking of the CSS I was able to get IE10 behaving.  The difference in vertical position is probably due to the fonts being slightly different between systems.\n\nUpdate CSS\n```css\nbody {\n    font-size: 48px;\n}\n.vbox {\n    display: -ms-inline-flexbox;\n    display: inline-flex;\n    -ms-flex-direction: column;\n    flex-direction: column;\n}\n.hbox {\n    display: -ms-inline-flexbox;\n    display: inline-flex;\n    -ms-flex-direction: row;\n    flex-direction: row;\n    width: 100%;\n}\n.rule {\n    -ms-flex: 0 0 4px;\n    flex: 0 0 4px;\n    background: black;\n    display: inline-block;\n}\n.glue {\n    display: -ms-inline-flexbox;\n    -ms-flex: 1 1 0px;\n    flex: 1 1 0px;\n}\n``. Khan Academy has dropped support for IE9 and IE10.  I'm interested how others feel about dropping IE9 support.. @mbourne thanks for the real world usage stats.. I suppose you reverse engineer what the boxes were.  Usingems instead ofpxs would simplify things a bit.. Nice ascii diagram.  Wouldkatex-screenshotandkatex-texcmpbe dependencies ofkatex?  We may also want to think about whether we want to publish scoped packages in the future.  Scoped packages can maybe be a 2.0 kind of thing.. As part of this we might consider moving some of the configuration files in folders too.  There are a lot of files at the root level which probably don't need to be there.. @ylemkimon we use phabricator internally for other projects and may have used it for the initial KaTeX development work.  We can get rid of these on this repo.. It's protected now.. @ronkok this PR is pretty big.  Could you split this up into two PRs: one that refactors genfrac.js by extracthtmlBuilderandmathmlBuilderand one that implements the functional changes?  This will eliminates the<--- new` comments which we don't want in the code anyway (they go stale quickly).  In general small PRs are better b/c they're easier to review.. > Sure. It'll be a few days before it's ready.\nThanks.\n\nA sequence like that would minimize merge conflicts.\n\nSounds good to me.. @edemaine  how would \\mathml{LaTeX code}{MathML equivalent} be used in the case of \\pmb?. \u2728 \"blocked\" begone \u2728. @sthoch I think linking to the GitHub repo should be sufficient.. We should probably add this to the docs.. I didn't even realize the script supported 1-argument. \ud83d\ude02. > I don't have permission to push directly to the master branch, so I believe this part of the script can't work for me anyway (having just tried it manually).\n@edemaine I'm confused since although master is \"protected\" there's no restrictions on who can push to master out of those people who have write access.  Also, if you didn't have push access how did https://github.com/Khan/KaTeX/commit/8624d4ccffbf8543ec87e75b24ed9551a7c16714 get on master?. I didn't even realize that was possible.. @edemaine give it a try now.. @edemaine sorry about.  You should be able to merge now.. @edemaine you should be able to push directly even to master.  Also, I fixed the issue with gh-pages.\nw.r.t. gh-pages we should look at other ways of handling documentation.  I'd rather have it one the main branch in the docs folder.\nWe might also look at hosting the site on netlify and then using a static redirect.  netlify also can serve all previous versions which would come in handy when providing versioned documentation.. I didn't realize that.  I guess the reason why I was able to run the script as is is b/c I'm an admin.  I'm glad we're talking about this.  Having non-admins be able to deploy is important.\n@ylemkimon your plan looks good.  I'm not sure how to do step 3 though.. > The current release script seems to support releasing from another branch. I've added detailed instructions in #1521.\nI think I'll give that a try when I do the release this weekend.  @ylemkimon thanks for adding that option.  Also, I'm happy to see that updating the docs are part of the publish workflow.  I'm a little scared/excited about versioned docs though.  Nothing ventured nothing gained I guess.. Nice.  I was going to try to add glyphs to the fonts, but this is better b/c it should save space.. > Yes, it will save some space. That comes at the cost of several exceptions cluttering up the code. I would be happy to see someone come along and replace this with font glyphs.\nI guess everything has it's drawbacks.  I agree that fewer exceptions is probably the right call here.. Here's the associated katex-fonts issues: https://github.com/KaTeX/katex-fonts/issues/20.  @ronkok I'm curious which package you got the geometry for the ellipses from.. @ronkok they look good!. @ylemkimon thanks for reviewing. . @Honghe I'm glad you figured this out.. I'm going to close this for now and will re-open once we've moved to yarn.. @ronkok this is super cool!  I'm glad that you were able to adapt the MathJax extension without too much work.  Could you post some example renderings?. @mhchem I think having things live at KaTeX/contrib/mhchem/mhchem.js makes sense.  @ronkok can you include the modified mhchem.js you created as part of this PR since the current code isn't much use without it?  It would be nice to have a screenshot test, but that can be a separate PR since it will require updating the screenshotter to to load the extension.. > > But there were no \"main mhchem\" files that contain non-MathJax material.\n\nWhich could be created if need be.\n\nThat seems like best path forward.  If this module was published then it could be required by the MathJax plugin and the KaTeX extension.  @mhchem how much would is involved in this?. > If no one has any preference, I think we can put them in this repo (KaTeX main repo) for a while.\nI think that's probably the easiest path forward.  We can always change that in the future.. > Now that I have learned how to use katex.__defineMacro to write macros in a external file\nThis is definitely one way of adding new commands.  It would be nice if we had a function that we could pass a string containing a list of commands to define using \\def, \\newcommand, etc. and have the effect of those commands persist between calls to katex.render().  I don't really know how .sty files work, but it feels like it's moving towards that.  To be clear, I don't think we support .sty files.\n\nCan I ask whether you have some timeline for this feature?\n\nI think first we'll want to merge this PR.  I've been meaning to revisit this PR since I don't like having things sit for too long.  I should have some time this weekend.. I also think this could use some screenshot tests.  That's something that could be done in a separate PR as well.  \nHere are some examples of the output (there's many more examples in the index.html):\n\n\n\nMost of the output looks very nice.  There seems to be a minor issue with how some of the bonds are rendering.\n. It's a little disheartening to see code coverage go down by 11%.  Could you exclude the mhchem folder from the coverage report?  We can add it back in once we have some tests for it.  I'll have a look at the rest of the changes later this week.. ~@ylemkimon any idea as to why circleci is complaining about the $CIRCLE_PROJECT_USERNAME != \"Khan\" in the test job?  I can't find where this check is being done. \ud83d\ude1e~\nI found it.  I see you've addressed it in #1781.  I'll review that right now.. #1781 has been reviewed and merged.  Rebasing this PR should fix the circleci: test issue.. @ronkok thanks for all of the changes.  I'm excited about support for mhchem and even more excited that you were able to do it as an extension.  Even though mhchem is a fairly standard LaTeX package I think this PR will serve as a good example how people might extend KaTeX is less standard ways via extensions.. @ronkok thanks for all of your many contributions and thanks for the heads up that you'll be moving on to other things.  I appreciate your offer to support the code that you've submitted.  If you end up using KaTeX in any future projects, I'd love to hear what you're doing with it. \ud83d\ude42 . My guess is that class and cssId (or id) are commands that would be used by site/app developers and not something that really make sense for user submitted content so providing a way to disable these commands should be sufficient.. > So some kind of limitation is needed.\nI think the limitation should be at the command level.  We should disable \\class and \\id by default and allow users to opt-in by enabling \"unsafe\" mode.  This should be relatively simple to do and allows users to move to the new version of KaTeX without opening a major attack vector.  Users whose sites don't accept user input and who need \\class and/or \\id can turn of \"unsafe\" mode.. > I think the limitation should be at the command level.\nWhat I meant by this is that I don't think we should try to filter things in/out by some id/class prefix.  I think we should have a unsafe setting which is false by default which can be passed to the render function.  Setting unsafe to true will allow the use of the \\id and \\class commands.. @ylemkimon the boolean is whether or not class and id are allowed and the RegExp is what values they all?. Agree that a naming strategy for options/settings is a good idea.. For this to move forward it sounds like we need:\n- test cases involving \\class{part-1}{\\frac{1}{2} + \\frac{3}{2}} = 2\n- changes to the code that address the spacing issues and make those test cases pass. One alternative solution might be to allow [ \"*\" ] to represent all protocols.  This is going to get more interesting if we ever support embedding images.. We can add a security section in the release notes of the next release.  This is technically a change in behaviour so we should probably go to 0.11.0.. node_modules/match-at/lib/matchAt.js.flow\n      25\u2502   }\n      26\u2502   var reloc = getRelocatable(re);\n      27\u2502   reloc.lastIndex = pos;\n [2]  28\u2502   var match: Array<string> = reloc.exec(str);\n      29\u2502   // Last capturing group is our sentinel that indicates whether the regex\n      30\u2502   // matched at the given location.\n      31\u2502   if (match[match.length - 1] == null) {\n     /tmp/flow/flowlib_362fee23/core.js\n [1] 338\u2502     exec(string: string): RegExp$matchResult | null;\nIt looks like the core flow typings have been updated to be more accurate.. Wow... I didn't even realize that [class*=\"col-\"] was possible.  That's super powerful.. No plans to do this right away, but we would like to do this eventually.  @HosseinAgha has done some work in this area, please see #1269.  I'm closing this as a duplicate of #123. . @edemaine how does this compare with other conditions for checking modes/styles/etc.?. > I added @ to the name to suggest it's for internal use. Happy to hear other suggestions for a name.\nIs there any way to restrict a macro for internal use only?  I was thinking that can't disable this strict mode b/c now of the commands that exist in strict mode use this macro.  In practice though, this macro shouldn't have an impact on people's use of strict mode.  One benefit of restricting use of internal macros for internal use only is that it guarantees we can change there name without having to bump the version.\nAs for the name, I don't have any good suggestions.  I find that many commands have cryptic names.  math@mathml should be fine as long as it's documented.. @edemaine did you forget to include a file?. > Maybe we could support LaTeX's `\u2209 notation for literal characters, which prevents them from expanding?\nThat sounds like a good idea.  In general I think the more things we can do to be more like LaTeX the better.  Would people be able to use this notation or is it an internal part of LaTeX?. Reading about \\catcode in the TeXBook.  It seems rather limited and only makes sense when your font is limited to 128 or 256 glyphs.  It would be nice to avoid level of fidelity if possible.. Prefixing class names shouldn't be difficult.  It definitely reduces the likelihood of collision.  I don't recall any issues reported that stemmed from CSS classname collision though.. I just read #1445.  I guess it's an issue.. @edemaine thanks for adding this to the milestone.. > I don't think KaTeX macros can parse infix functions.\nDoes LaTeX support this?. > But my preference would be to wait until some user turns in a issue that requests support for \\atopwithdelims and/or \\overwithdelims. I bet that never happens.\nI think this is a good policy at this point.  There's a lot of commands we could add, but if nobody ends up using them, what's the point.. Now if only there was a way to get KaTeX support in GitHub.. I've tried puppeteer but it was slow when taking screenshots. :(. I change to using the Mac OS screencapture command line tool and now the tests run in 13 seconds.  I still need to get this working in Linux though.  I'm planning to use shutter in that situation.. I forgot to mention, using command line tools to capture screenshots allows us to drop the Web Extension dependency.  Screenshots are requested (and written) via a simple REST request.. I've made some quite a bit of progress on vite recently.  In particular I have running from inside docker and it's producing consistent screenshots.  The big remaining piece of work before this can be used in an experimental capacity is providing a way to load custom fonts.  There's also lots of cleanup work that needs to be done to make it more usable.  See https://github.com/Khan/wonder-blocks/pull/227 for an example of it in action.. @ylemkimon how did you add commits to this PR?. Oh wow... I didn't realize that greenkeeper was creating branches in Khan/KaTeX.  Cool!. I sometimes forget how fast flow moves.  @ylemkimon thanks for reviewing.. So we would define the browsers we want to support and then browserslist would then configure different tools we're using like babel, etc.?. I think this is a great idea.  Can we only have a single issue template?  I vaguely remember seeing a repo one time that allowed you to pick from a couple of different templates when submitting an issue.. Cool.  What do people think about having two issue templates: one for bug reports and one for feature requests?  We also have \"discussion\" issues from time to time.  Is there a way to bypass the template?  If not maybe we should also have a \"discussion\" template.. Cool!. Something else we might look into to ensure that structures aren't mutated by accident is to use flow to mark objects as read-only.  See https://flow.org/en/docs/types/utilities/#toc-readonly for details.. If there are data structures, in this case docFrag.classes, that need to be read-only we should look to enforce that with flow.  It has $ReadOnly and $ReadOnlyArray generic types that help with this.. A simple but useful plugin.  Nice find!. > Perhaps it would be appropriate to disallow sizing in strict mode but it's too late to break that behavior otherwise.\nAgreed.  There's a fair number of content items on khanacademy.org that use this behaviour.  We did this to make the radicals easier to read.\n\nI think we ought to change radicals at least to the old behavior.\n\nSounds good.\n@ronkok thanks for investigating this.  This is tricky stuff.. Another option is passing the --harmony flag to node, but I don't know which versions support ES6 modules with that flag.. How does this interact with #1469?. @ylemkimon I think that could be a separate PR, but only if people ask for it.  My take on it is that minification only seems useful in the browser and I've only been using ES6 modules in the browser for testing and development and minification isn't useful in those scenarios.. I like the list b/c people can look things up alphabetically.  This is maybe something we could in addition to the existing documentation that's on khan.github.io/KaTeX.. @edigleyalexandre can you link to the blog that isn't working?. @edigleyalexandre it looks https://alunos.prof-edigleyalexandre.com/2018/07/testando-o-interpretador-katex.html is working.  Which one isn't working?\n. Hmm... it looks like there's a difference in how much space is between +1.0 and -2.7 in our rendering of {98}^{\\begin{aligned}&{+1.0} \\\\&-2.7\\end{aligned}} vs LaTeX's.  The size seems correct though.. @ylemkimon this is awesome!  I checked out the test site and it looks super cool.  I'm also very happy that our docs are going to be in master.  This should make it easier to update.  Eventually it would be nice move the REPL to a it's own tab so that it can have more space.. @ylemkimon it isn't necessary to complete everything in the checklist before we merge this.  I would prefer to merge this sooner and iterate on it.  It'll keep the PR size down and once it's merged other people can help out. \ud83d\ude42. The travis-ci build completed successfully.  I've restarted it manually and hopefully that will fix things here.. This is new... I haven't see circleci timeout.  I guess it's not as reliable as I thought it was.  On the plus though though re-running the tests will still take less time than travis-ci.\n. In this case, I'm not going to bother since the circleci checks are mandatory... yet.. Is the plan to deploy to gh-pages whenever we merge a PR?. I see, it looks like publish-gh-pages is manual command.  I think that makes sense.. @ronkok what about \\[ and \\]?. @ronkok it sounds like the issue is our auto-render extension.  I assume other Markdown engines are parsing things along $ or $$ boundaries and passing the TeX strings to whatever's rendering LaTeX for them.  Do they get tripped up by the nested $ example above?  Maybe we should try to write a KaTeX plugin for docusaurus.  Does the auto-render extension handle this case outside of docusaurus?. @edemaine one of the downsides of hosting the docs in a separate repo is that it makes testing the docs against changes more difficult.  I was also hoping that we might someday might have our test page live in the docs as well.. > Maybe we need to implement some lessons learned into the remarkableKatex.js file.\n\ud83d\udc4d sounds like a plan.. @edemaine \\not is a little different from other accents in that it's not centered, but it's not that different so we should be able to leverage most of what we do for other accents.  Also, it looks like #1267 did get merged.. I wonder if we should introduce an AtomNode to encapsulate bin, close, op etc. but inside of something that looks like:\n{|\n   type: \"atom\",\n   family: \"bin\" | \"close\" | \"op\" | ...,\n   nucleus?: ParseNode,\n   subscript?: ParseNode,\n   superscript?: ParseNode,\n|}\nThis makes our ParseNode type more regular and should make flattening ParseNode,  getting rid of value, easier (I assume this is what was meant by \"plain objects\").. > And indeed, I mean plan objects.\nSorry, should've read the original post more carefully.  Changing class ParseNode<TYPE> to type ParseNode<TYPE> = ... seems pretty safe.. I'm cool with either approach.  I don't think there should be any issues with mathord, textord, or spacing.  It seems like op (or should I say op-token) might be a little cumbersome.  Maybe leave that one out of the initial change.. \ud83c\udf89 Amazing stuff! \ud83c\udf89 . @ylemkimon thanks for merging this.  I love these automatic updates. \ud83d\ude42 . @ylemkimon re-opening this b/c I want to see the test results.  Also, we'll want to merge this eventually won't we?. I'm amazed that we made a change that didn't change at least one pixel.. We'll have to think about what the flow should look like both when switching branches as well as when someone actually wants to make a change to a font.. Thanks for simplifying our npm scripts.. TIL. Interesting... babel is supposed to look in parent dirs for .babelrc.. That's a really good idea.. https://khan.github.io/KaTeX/ seems to work fine.  I haven't run the publish-gh-pages yet.  I can do that, but I thought it'd make sense to wait for the next release.. The gh-pages branches hasn't been updated since June 15th.. In terms of publishing multiple versions of the docs we could look at using netlify although that's not ideal since I the URL to old versions might look a little weird.  We could also publish docs to a separate repo where all versions of the docs would live in separate folders.. So I ran npm run build in the root KaTeX folder first to generate dist b/c the website depends on it via the require(\"../\") in remarkableKaTeX.js and then I ran npm run publish-gh-pages from the website folder but ran into an issue when it asked me for my password to https://undefined@github.com.  @ylemkimon any ideas of what's going on?. I solved the issue by running export USE_SSH=true first.. The new documentation is live.  Sorry for the delay.. I think we should actually have website/package.json depend on a specific published version of KaTeX.  The workflow would be: publish KaTeX, update the dependency in website/package.json, publish the website. \nI think we can include USE_SSH=true; in the publish-gh-pages command.. @edemaine I created https://github.com/Khan/KaTeX/issues/1509 to track having multiple versions of the docs.. Yeah, this should be a strict mode only behaviour.. Awesome!. I think before we make any change to where the site lives it would be nice if we could secure a stable domain name for katex and switch to that first before changing where files are served from.  Also, since people are worried about bloat let's hold off on having multiple versions of the docs until we have a stable domain.. I've our IT dept about buying a domain.  I should hear something back tomorrow.. I think we should wait on getting a domain name that is independent of which tool we're using before making changes to where the docs live.. Do we have to serve files from github.com to use js.org?. Not having control over DNS would limit us to keeping files in Khan/KaTeX or KaTeX/katex.github.io, right?  @ylemkimon how were you thinking we'd use subdomains?. @rustylife and @edemaine thank you both.. @edemaine I've granted access to Netlify.  Let me know if you have any issues signing in.. Being able to easily check documentation changes before merging would be awesome.. I have it deploying to https://katex.netlify.com/katex/.  I guess I have to set the CONTEXT variable to get it to deploy to https://katex.netlify.com.. The CONTEXT variable is supposed to be set automatically so I'm not sure why we're not picking it up.  I'm going to try the BASE_URL environment variable instead.. I set it to website/build... trying website/build/KaTeX now.. @ylemkimon that did the trick, thanks.  https://katex.netlify.com. I've also turned on branch deploys so this should trigger a deploy next time someone creates a PR or updates one. \ud83e\udd1e . I've updated one of our open PRs.  There's now a netlify checking that shows up.  Clicking on the \"details\" link goes to the preview site.  In this case it's https://deploy-preview-1485--katex.netlify.com.\n. @ylemkimon it seems like using netlify might be easier for hosting master docs, but we should probably secure a domain first.  I asked our IT dept about purchasing the domain name and they can totally do it but they need manager approval and my manager is on vacation.  @edemaine you mentioned being able to get the domain and transfer it later.  I'm not sure how that's done, but that's maybe the best option to move things forward. . I think strongly suggesting yarn is probably a good direction to go.  Otherwise people may end up committing package-lock.json files by accident when submitting PRs.. @ylemkimon I disabled the travis-ci build after we transitioned to circleci for everything.  Thanks for cleaning up the remaining travis related files.. I see... maybe we could use an environment variable to change that '/' when deploying to netlify.  It would be nice if docusaurus didn't need to rely on absolute paths.. @ylemkimon are you able to generate a repository deploy key or is this something I have to do?. @ylemkimon okay, I've added SSH keys in the appropriate places.  How can we check that this actually works?  Also, do you know what I should put for hostname in the circleci settings?. done \ud83d\udc4d . @ronkok thanks for adding this back in.  Fractur and Double-struck aren't fully supported.  Maybe we should show only the supported character ranges for those type faces.\n\n. Cool.  This is going to take some time to review.  I will attempt to do so tomorrow evening.  Also, we can put other PRs that make code changes on hold until this get's merged.. Sorry I had a social function this evening that I forgot about.  @ylemkimon  once the tests pass, feel free to approve the review if you feel comfortable.. @ylemkimon thanks for reviewing and approving.. Let's replace Proxima Nova with Lato which is free.  We've done this on khanacademy.org so I think it makes sense to do here as well.. @ronkok this is super cool!. I need to publish the docs but need to publish the package first.. @utensil 208 out of how many?. That's good to know.  I was concerned as well.. That's my thinking too.. @marcianx this is awesome!. I thought we were going to 0.11.0 b/c there was a breaking change that was going to be deployed.. I didn't realize that.  Cool, let's go with 0.10.0 in that case.. The documentation pages are a little weird on mobile, but that's something we can improve on over time.\n\n\n\n. > This PR is just about the front page though.\nGood point.. We should probably add a test to avoid future regressions.. Good call adding digits to those tests.. @ronkok thanks for fixing this.  It just means that the next publish will be 0.11.  We're still at 0.10-beta.  I wonder about the utility of the -beta moniker. \ud83e\udd14 \n. Okay... so once we test the new release script and verify that it works correctly we can do a non-beta release.. Wow!  I hadn't even thought about doing this.  This simplifies things a lot and saves us bytes.  It'll be interesting to see what byte delta is next publish we do.  I'm so happy we got to a point where large scale refactors like this can be done safely!. @ylemkimon thanks for reviewing all of these large refactors.. I'll do a publish this weekend.. I didn't do a publish. \ud83d\ude1e . @ronkok thanks for keeping this page up to date. . Wowza... so many symbols!  I'll publish 0.11.0 and new docs this weekend.. @ylemkimon good point.  I'm surprised greenkeeper doesn't do that for us. . Hmm... I should've looked at what was on the package emulation page... that doesn't fit into the \"contributing\"... examining TeX is definitely \"contributing\" material though.. It looks like Symbol is being used in generated code:\n/******/    // define __esModule on exports\n/******/    __webpack_require__.r = function(exports) {\n/******/        if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/            Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/        }\n/******/        Object.defineProperty(exports, '__esModule', { value: true });\n/******/    };\nI wonder if we should generate a separate build for ES6 modules using rollup.. Ah... so this wasn't triggering the polyfill of Symbol then?  Is guarding against it just to avoid accidentally using Symbol in our code in the future?. Makes sense.  Thanks!. Here's the correct logo for Khan Academy.  It's mainly a color change.\n\n. @edemaine their resizing algorithm leaves much to be desired.  It should be okay \ud83e\udd1e since we're scaling image down.  I'm sure we're hosting it some in fastly too... I'll try to track down the URL but the one you posted is fine for now.. Looks good except the Rocket.Chat logo URL is broken.\n\n. @mbourne PRs are welcome. \ud83d\ude42. > @kevinbarabash Is Khan Academy still using Google Analytics?\n@ylemkimon I believe we are.  Why do you ask?. I didn't even realize there was Google Analytics code on this page.  I doubt anyone uses this data, but let me ask our data analytics team first.. @tonton-pixel cool project.  There's a minor lint issue that needs to be fixed before this can be merged.  There's a missing dangling comma.. Love all of the documentation!  Thank you.. I could've sworn it was in the 700s last time I looked. \ud83d\ude05 . @ylemkimon are we using these artifacts for anything at the moment or do you have future plans for them?. This will definitely come in very useful once we move the font creation scripts into the main repo.. Sounds good.. 7.0 is out. \ud83c\udf89 . Sorry for taking so long to review this.  Thanks for upgrading babel.  The PR queue looks a little more manageable after merging this. . I think https://github.com/Khan/KaTeX/issues/898 would cover your request for insert an SVG image in the middle of some LaTeX.  \\html seems useful too.  I think we'd want to put some restrictions on the \\html.  For instance with \\includegraphics you can optionally include dimensions.  Making that mandatory would be helpful for both \\html and \\includegraphics.  In the latter case, we may not know how big an image is until it's loaded but we need that information during typesetting which happens first.. @pzinn we don't support \\includegraphics yet.  PRs are welcome. . The reason why it could be a security hole is for pages that allow users to submit math and then render it to other users.  Rendering arbitrary JS in your own browser isn't a big deal, but this would all a user of such a site to run JS in other people's browsers.. Cool plugin.  We don't actually use Symbol anywhere in the code, but it is used in generated code.. Interesting.  If we changed that to false will it also converted unicode that's escaped to unicode chars?  I guess as long as people are using this from CDNs they'll be alright but some people may be hosting the files themselves.  I think it should be okay as long as we making it a breaking change when we the release this change.. @ylemkimon were you thinking alphabetizing and/or grouping related functions?. A suggestion for the groups:\n- rendering\n- error reporting\n- safety\nOpen to other suggestions too.. I think changing the formatting might help too.  Maybe have the option name on one line and the description on a line below.  We might even try using a dl, dt, dd (not sure if the markdown parser we're using supports those).. @ylemkimon yes!  Thank you for adding this.. The \"team\" link is maybe a little confusing b/c not everyone who has push access to khan/KaTeX has been added to the KaTeX organization.  Let's keep the \"Contributors\" link for now.  Hopefully we can get the repo moved over to the KaTeX organization eventually and this will be less confusing.  I like how the babel page differentiates core members as well as active vs. non-active members.\n. @ylemkimon in https://github.com/Khan/KaTeX/pull/1531 we were able to use a repository deploy token.  Why is a user token necessary in this situation?. @ylemkimon sounds good. Thanks for thinking about the security implications of these changes.. This is great! I wonder if there will be some point at which we'll be happy enough with the AST that we could publish and provide an API for third party code to provide the an AST which it generated for us to render. \ud83e\udd14. Nice!. I think when I reviewed this I was only looking a one commit instead of all the changes.  I'm sure it's fine but I should probably do another pass even though this is already merged.. The contrast is pretty low between the green background and the teal of the logo.  Let me talk to our design team and see what they suggest.\n\n. @ylemkimon thank you.  That looks really nice.. This is awesome!  A few thoughts:\n- changing the values in the options panel should trigger a re-render\n- in maximized view we may want to stack the editor/render views vertically especially as the screen gets narrower\n- it would be cool if the options panel animated in/out\n- it too me a while to find the options, I think eventually having a separate page with the options always visible might be the way to go (this is how the babel and flow demos work)\n- Khan Academy is working on a component library, it would be cool to use it for the KaTeX docs site at some point in the future. Safari unfortunately doesn't support type=\"color\" on <input>.  That's okay, but it would be nice to constrain its width a bit.  I found that setting max-width: 5em; looked alright and didn't affect the color picker on Chrome.\n\n. @ylemkimon thanks!. @VinVaz got for it. :). One thing to call out is that these functions will make flow typing harder.. Things like filter don't work quite as expect if you're trying to filter out elements of a certain type in the hope that the resultant array will be typed correctly.  If you know how to get around this and other similar issues I would be forever grateful.. @ylemkimon thanks creating an issue for this.. If documentFragments methods are a strict subset of HtmlDomNode's methods than that sounds reasonable.. I was hoping that we'd eventually move to hast for handling HTML generation, but it doesn't support fragments which is disappoint.  I guess the plus side of using our own functions is that keep our footprint small.. Looking at hast and it's related ecosystem... it doesn't look particularly active so I don't see a particular strong reason for changing how we structure our HTML AST.  That being said, our HTML AST is quite different from how structure our LaTeX AST.  I think we might benefit from making out HTML AST look more like our LaTeX AST.  In particular:\n- instead of using ES6 classes, everything could be POJOs (plain old javascript objects)\n- each object would have a type, e.g. \"svg\", \"span\", \"path\", \"line\", etc.\n- each object would have a classes, attributes, children and styles except for fragment which would have something like nodes which is a list of top-level (within the fragment) HTML nodes\n- there would be a couple of render functions to generate HTML text or an HTML DOM\nThis side steps the question subclasses while making the code more regular.. symbolNode is particular troublesome b/c it renders to span but so does span.  We should probably have some functions that convert symbols to span objects before span objects are converted to HTML text (or DOM nodes).  The other funny thing about symbolNode is it's the only one with a tryCombine method that actually does anything and it's only used on the result of buildExpression when buildExpression is passed an ord.  We should probably move the combining of ords into html.buildExpression.. I did some more thinking on this and I think it would be good split each of the nodes in domTree into a layout node and html node.  The layout node would contain details like children, height, depth, width, skew, etc. and then the html nodes would only contain children, style, classes, etc.  The htmlBuilder methods would be change to layoutBuidler and would generate a tree of layout nodes.  A separate process would convert the layout tree to an html tree before ultimate rendering an HTML string or to the DOM.. @ronkok this is awesome!  I'm glad to see it was too difficult.  One thing that you could do to make it easier for people collaborate on this PR is push your branch to Khan/KaTeX and create a PR from that.  This will allow other people with push access to pushing updates to this PR without having to create PRs against your fork.. @edemaine I didn't realize that.  I would've assumed that @ronkok would've needed to explicitly grant push access to his repo, but maybe we have push access to that specific branch due b/c it's being used as a PR against this repo.  I'll give that a try this evening.. @ronkok I'll look into this next week.. Looks like the netlify issue fixed itself.  The only thing left an issue with the flow typing.. @ronkok thanks for adding this feature. I'm sure people will find some really great uses for it.. Agree.  We should make sure we have a security option before the next release.. Would it make sense to publish an npm package of fonts?. @ry-randall we'll probably be doing that as part of https://github.com/Khan/KaTeX/issues/1411.. Since LaTeX can change the values of certain things like \\arraycolsep etc. while running and have that change only affect the rest of the output, there's no way to make a CSS class that does this.. @edemaine I've assigned this to you to indicate that it's ready for review again.. I forgot to push.  I've pushed the changes I had locally now.\n. I'll resolve the merge conflicts later today.. @edemaine can you have another look when you have a chance?. @edemaine I think that updating it PR by PR is maybe a little awkward.  I think updating it whenever we do a release is fine.. @ylemkimon do the versioned docs keep -rc and -beta docs around after we release the 10.0 version?. @ylemkimon I'm assigning this to you since it's ready for review again.. I wonder if there's some way to tell circleci and netlify to ignore PRs against gh-pages.. The website looks great! \ud83c\udf89 . Now that we're reviewing the documentation changes in PRs to master we probably don't need gh-pages to be a protected branch anymore.. gh-pages is no longer a protected branch.. Good point.  gh-pages is now a protected branch.. flow tests pass locally but fail in CI.  After some investigation, the reason is differences in case sensitivity.  I'm on Mac which unfortunately thinks that it's okay that parseNode.js and ParseNode.js are the same thing.. @VinVaz thanks for the PR.  There are some syntax errors in the code as well as lint.  Please fix those and then we can discuss what to do about the for..in loops.  See https://circleci.com/gh/Khan/KaTeX/3429?utm_campaign=vcs-integration-link&utm_medium=referral&utm_source=github-build-link for details.. I'm happy to see that the screenshot tests are passing now.  There's still some lint that needs to be addressed and then this should be good.. Please rollback c2089be.. @VinVaz no worries.  You should be able to run yarn test locally which should help with identify some of the issues before pushing.. My guess is that there's something wrong with your dev environment.  I'm guessing you're on Windows.  In order to narrow things down, I would try running each command separately that the test script from package.json runs and then Google for the failure in whichever one fails.  In the meantime, circleci has reported the following test failures:\n```\nError ---------------------------------------------------------------------------------- src/environments/array.js:244:9\nCannot assign outrow to body[r] because:\n - an indexer property is missing in span [1].\n - an indexer property is missing in span [2].\nsrc/environments/array.js:244:9\n   244|         body[r] = outrow;\n                ^^^^^^^\nReferences:\n   src/buildCommon.js:348:4\n   348| ): DomSpan {\n           ^^^^^^^ [1]\n   src/buildCommon.js:523:67\n   523| const makeVList = function(params: VListParam, options: Options): DomSpan {\n                                                                          ^^^^^^^ [2]\n``. Also, something must not have worked withCRLF to LFsince there's still 255 changes files according to GitHub.. Closing due to lack of activity.  @VinVaz feel free to reopen a fresh PR if you have time.. @ylemkimon yes, you're right.  I was so excited to find an eslint plugin for promises in general that I got ahead of myself.  I thinkflowmight be able to check for this b/cexecFilereturns aChildProcesswhich is an object, not a callback, andthen()` should only accept a callback.  https://github.com/facebook/flow/blob/v0.79.1/lib/core.js#L583\nUpdating screenshotter.js to use flow is pretty low priority and we don't use Promises anywhere in the main codebase.. This plugin has some other helpful checks that we could adopt as well.. > the Node image is using Yarn 1.6.0\nIs this a circleci node image or a greenkeeper node image?. If you're using React it's probably more appropriate to use one of the React components listed on https://khan.github.io/KaTeX/docs/libs.html#react.. @molikto this is a long standing issue.  We've deprecated support for older browsers which opens the door for us to try things like #1409 to solve this issue.  Another benefit of that approach is that it should greatly simplify the markup we produce.. Did yarn change what running yarn check does?. What version of yarn should people being using for dev?. @frogg thanks for checking the new release and reporting back.. I wonder if it makes sense to have separate coverage reports for unit vs. screenshot tests. . I'm not sure if it's possible to work around this issue with \\newcommand.  Since https://github.com/Khan/KaTeX/issues/750 is already requesting support for \\definecolor I'm going to close this as a duplicate.. The HTML color model from https://en.wikibooks.org/wiki/LaTeX/Colors#Defining_new_colors shows that \\definecolor using a hex color without the leading #.  It looks like \\color and \\textcolor require the user to specify the color model unless using a defined color so our current implementation of these commands appears to be incorrect.. color package reference: http://ctan.mirror.rafal.ca/macros/latex/required/graphics/color.pdf. I skimmed the PDF but it doesn't make mention of all of the color models listed on https://en.wikibooks.org/wiki/LaTeX/Colors.  I think it's fine to support more color models but it should be done in a way that's compatible with the color package.. I'm pretty sure that Rollup can handle non-transpired ESM modules using https://github.com/rollup/rollup-plugin-node-resolve.. I don't see any downside of publishing a separate package for this.  @ry-randall any concerns on your end?. What are the and_chr 67, and_ff 60, etc. all about?. @ccorn thanks for reporting this.  cc @ylemkimon . Currently LaTeX2JS uses MathJax.  If a person wanted to they could replace MathJax with KaTeX but some work would be involved.  You could submit a PR to LaTeX2JS and see if the maintainer accepts it.. @stewils76 we want to keep KaTeX focused on rendering math.  Feel free to incorporate it into other software to add math rendering to interactive graphs.. The unfortunate thing about some of the MathJax specific behaviours is that we can't just pre-process the MathJax variant and we can't just post-process the parse tree. :(  I'm kind of surprised that MathJax is so non-compliant with LaTeX given the organizations that are supporting it.. ~I feel like we should be opening bugs against MathJax for things that not compliant with LaTeX.~ It looks like opening issues against MathJax will not help this situation as this bug has already been filed and rejected, see https://github.com/mathjax/MathJax/issues/1770.. The rationale for this behaviour is:\n\nAnother source of difficulty is when MathJax is used in content management systems that have their own document processing commands that are interpreted before the HTML page is created. For example, many blogs and wikis use formats like Markdown to allow you to create the content of your pages. In Markdown, the underscore is used to indicate italics, and this usage will conflict with MathJax\u2019s use of the underscore to indicate a subscript. Since Markdown is applied to the page first, it will convert your subscript markers into italics (inserting <i> or <em> tags into your mathematics, which will cause MathJax to ignore the math).\n\nI'm still a little foggy on why _ is okay but \\_ is not okay in this scenario.. @pkra thanks linking to the relevant MathJax issue.  I'm glad to hear that you're considering making this configurable in v3.  In the interest of improving interoperability KaTeX could add the current MathJax behaviour and make it configurable as well.  For KaTeX though, I think we'd probably want to make our current behaviour the default.  The rationale being that there's probably more TeX code in the world that relies on the TeX behaviour than than the current MathJax behaviour.. I've updated the link on the repo description.  Thanks for updating all of our links!. @edemaine it's hard to shrink \\KaTeX to fit into a square.  Nice work!. @leungbk I thought about it more and we can add more props to CssStyle later and if it does catch people off guard we can always add all them at that point.. Thanks for the PR.. @ylemkimon is there a way to test this locally?  Also, with respect to \"Google Developer Tools\", is that what google-site-verification: google4e8111332337b304.html is for?  How does it improve SEO?. @ylemkimon I've tried a couple of pages on https://ylemkimon.github.io/KaTeX/ and the redirects seem to be working.  It looks like this has be deployed before we can change an settings in Google Developer Tools.. > One question is should we include supported functions in tables, i.e., tds?\nNot sue.  It looks things are set up to use td so let's give that a try.  I assume we can change it later if need be.. I should've given it a try on the netlify test site before accepting the review.  I did just now, and it seems to be working.  I think a lot of people will find this really handy.  Thanks for adding it.\n. @zegulas I'm going to close this for now.  Please re-open if you sign the CLA.. > These tags are auto-generated by our documentation tool, Docusaurus.\nDoes that mean the whole file is generated by Docusaurus?. Is there a command you have to manually run to generate it?. @sashaalesin I'm guessing some of our CSS wasn't being loaded.. From translate.google.com:\n\nMy katex version is 0.10.0-rc.1, which is an exception thrown after the upgrade. There are also problems with the arc and vector rendered by the page, showing anomalies.\n\n@chenfengyanyu thanks for the report.  Can you provide a link to a webpage that shows this error or reproduce the error on katex.org's demo page or in a jsfiddle or similar service?. From translate.google.com\n\nSorry, after reading your comments, it is because I added the </br> tag to the katex string, which affects the parsing rendering of katex.\nMy approach is to remove the </br> tag before it is passed in. Thanks~\n\n@chenfengyanyu cool.  I'm glad it's working for you now.. @nickgravelyn thanks for the PR.. > I still have no idea how to fix the failing Flow issue because, frankly, it's not a very helpful message. I'd love to get this merged but I do need help deciphering the Flow failure.\nI'm not sure either.  I'll have to check out your branch and have closer look.. @ylemkimon what kinds of changes are you planning?. We could define the test.tex to match our macro. \ud83d\ude1b . > LGTM. Requesting one additional comment about why we don't need to pass the side argument to getTypeOfDomTree on lines 120-121 of buildHTML.js.\nI forgot about this.  I guess it wasn't that important.. Thanks for the PR.  Sorry for the delayed review.. > More generally, I think many of the macros defined in macros.js (L327-348) should only work in math mode\nIt sounds like this is already the case since we're throwing a parse error.  What am I missing?\n. Hmm... I should probably check this out and try running webpack.analyze.js before actually merging this.. I gave it a try and yarn analyze appears to be work although it's not particular useful, it just says 77 modules (concatenated).. It looks like this is a known issue: https://github.com/webpack-contrib/webpack-bundle-analyzer/issues/161.. Unfortunately this is an issue that affects LaTeX as well as evidenced by many questions on stack exchange.  TBH, I feel like TeX gets this wrong.  My expectation of nested fractions is that the child fractions should have their numerators and denominators closer to their fraction bars and the parent's numerators and denominators should be further away.\n. Seems like a breaking change on the part of babel.  Thanks for fixing.. I'm excited about the removal of ParsedArg and ParsedFunc.  There's a lot going on in this PR so it may take me a while to review.. This is super cool!  How did you deal with stretchy characters which are specified as SVG paths?  What about glyphs with no horizontal metrics?. Path2D looks pretty cool.  That's too bad Edge doesn't support it.  It might be polyfillable though with a little bit of work.. My guess is that VuePress needs to update to the latest version of KaTeX since \\mathring{U}(x_0) works just fine on katex.org.. What does the period do?. @ylemkimon I'm confused... it looks like you opened this PR, by greenkeeper made some commits.  Did you cherry-pick from that other branch with the failed bump of this dependency?. Why doesn't this PR show the failing tests?. I thought this was a PR, but it's actually comment. \ud83d\ude05. It sounds like there's maybe some issue with how bootsnote is setting up KaTeX.  @OnlineVagrant have you opened issue with them?. @ylemkimon should we be deleting these greenkeeper branches?. \\stackrel{\\stackrel{sa}{\\curvearrowleft}}{BA}\nkind of works, but if you want to places a space between the B and A then you'll need something else.\n. I'm not sure how you'd do that with LaTeX.  You might want to post on https://tex.stackexchange.com.. The Wordpress plugin must be out of date since \\fcolorbox{red}{aqua}{A} renders fine on katex.org.  We aren't responsible for this plugin so you'll have to find out who is and ask them to update it.. @kokopelli314 thanks for fixing those line endings.  I don't see any discernible changes in the screenshots so I think it's okay to replace the existing ones with the new ones from https://circleci.com/gh/Khan/KaTeX/5269#artifacts/containers/0 and  https://circleci.com/gh/Khan/KaTeX/5271#artifacts/containers/0.\n@ylemkimon I'm surprised that nothing showed up in the \"checks\" tab.  Is the service that's running the screenshot app down?. In terms of precision I'm sure that 4 decimal places is more than enough for vast majority of applications.  TBH, I think we could go with 3 or even 2 in some situations, but since we had quite a few more decimal places before this I'm okay with keeping the default default at 4.  @kokopelli314 how do you feel about making this configurable?. @kokopelli314 sorry abut the duplicate comments (I've deleted them now), GitHub was having some issues yesterday.. @kokopelli314 I think we can skip making this configurable for now.  We can always add it in the future.. @kokopelli314 how much work would it be to round those values that don't go through calculateSize?  Is it just vlist and strut or are there other places we need to add rounding?. @kokopelli314 is it necessary to usecalculateSize to do the rounding?  Could we do the rounding right inside of makeVList and staticSvg themselves?  . Thanks for the PR.  I really like the concept.  I'm have a couple of suggestions though.  Instead of \"Page Not Found\", maybe it could say something along the lines: \"Sorry, we couldn't find the page you were looking for.  Try one of these links below:\".  Also, the \\lim_{x \\leftarrow 404}... part could be a lot bigger to fill the space.  Also the text and the math should probably be off blank instead of pure black, maybe #222222.  Here's my attempt at a mock (I wasn't able to update the math color because I was using Preview.app to make these changes):\n. Long term I wonder if we should add some sort of build step for the CSS to auto prefix stuff.. > Quite odd, after reverting the file back to its original state, the deploy/netlify step failed. Looking through the Git blame, I'm not seeing any changes from what I previously had to the original commit, either.\nNot sure what was going on there but I don't think it was anything you did.. This would be very difficult to do.  I could see us support some common packages with the common \\usepackage command sometime in the future but we'd be loading groups of commands that we've either defined as macros using commands supported by KaTeX or loading commands we've defined using defineFunction et al.. +1 to using markdown for the headings.. The 0.10.0 docs look off because \nhttps://cdn.jsdelivr.net/npm/katex@0.10.0/dist/katex.min.css is missing.  Is that because https://github.com/Khan/KaTeX/releases/tag/untagged-11f04a3ba859daa27977 is still in draft?. I'm curious about the order of operations.  If we deploy this then the docs will temporarily be broken until we do the publish.  On the flip-side, if we do the publish first then we have to do this release before anything else gets landed on master... or do as a branch from the publish commit.. I was confused by https://github.com/Khan/KaTeX/releases/tag/untagged-11f04a3ba859daa27977 b/c I thought 0.10.0 had already been published but looking more closely I can see that no commit has been tagged in that draft release yet.. I had to look back at the previous release to reminding myself what the process is.  It looks like we have to land this before publishing.  Since I'm sure you're planning to run the release script as soon as you merge this the CSS in the docs will only temporarily point to a file that's unavailable.. @ylemkimon thanks for adding this. \ud83d\udc4d to closing #164.. Looks like some people were experiencing a similar issue with flow 0.83 in alpine linux.  https://github.com/flowtype/flow-bin/issues/139. @ylemkimon thanks for figuring that out.. \nI tried, but it won't let me click \"None\". \ud83d\ude1e It highlights the selection but the cursor is the default cursor instead of the pointer as it is for the other options.. According to https://help.github.com/articles/unpublishing-a-project-pages-site/ it sounds like we have to delete the branch.  Seems like a weird way to stop publishing gh-pages.. @ylemkimon good idea.  Thanks for doing that.  I've deleted the gh-pages branch in this repo and Github Pages for this repo is no longer active.\n\n. Let's hold off on merging this until #1751 is merged.. I assume that this will speed things up for future builds.. Please see #809 for discussion about using KaTeX as an editor.. Closing in preference of #1808.. It looks a little weird for the highlight on the right sidebar to extend to the edge of the page.  I wonder if for really wide browsers we could have a max width for the content container (which contains all three columns) and then have margin: auto on it to centre it.. LaTeX's rendering:\n\nKaTeX's rendering:\n\n@surpass-wei could you post a screenshot of what you're seeing?. I guess I cheated a bit by zooming in.  @surpass-wei which browser are you using?. That issue seems different since the fraction lines aren't be displayed at all.. This is an interesting question.  So setting the color using \\textcolor from the xcolor package and rendering:\n\\textcolor{green}{\\fbox{a couple of words}}\nresults in:\n\nThis makes me think that if a CSS style updates the color of text it should also update the color \\fbox.. It is a little weird to not have parity between the two pages.  If we're concerned about issues with \\fbox then we could include a comment about those issues on the Supported Functions page.. @Jenyay it looks like there's a way to remotely debug WebKitGTK+.  See, https://blogs.igalia.com/carlosgc/2017/05/03/webkitgtk-remote-debugging-in-2-18/.. What happens if you adjust the width of the border?  I was hoping that remote debugging would allow you to hover over the element in question to help us determine if it's in the right location or not or whether it's too thin.. > It works fine for me. Are there any other elements that may have similar problems?\nNot that I'm aware of.\n\nI added the following code to the page to get around the problem\n\nNice solution.  It's unfortunate that min doesn't work reliably.  I wonder if we should run fix_frac_line as a post-processing step or at the very least include it in contrib as an extension. \ud83e\udd14. It would be cool if we had \\setlength so that people could customize various measurements.  This could be used to define presets for web, print, etc.  The print preset would adhere more closely to the LaTeX rendering.. @spontaliku-softaria can you point to which handlers are unwrapping child delimiters?  In general I think any place where we inspect or modify HTML that's already been built for child nodes is a bad idea.  I think this is what you're talking about, but I want to be sure before offering suggestions.. htmlBuilder: (group, options) => {\n        assertParsed(group);\n        // Build the inner expression\n        const inner = html.buildExpression(group.body, options, true,\n            [\"mopen\", \"mclose\"]);\n        ...\n    }\nbuildExpression calls buildGroup.  Could you be more specific about what's being built in delimsizing.js that isn't being seen by buildGroup?. @ylemkimon any idea of when D2 will be released?. I've updated the settings on netlify to use the new repo.  I'll check the others later.. For gitter I'm going to email them and see if they can transfer the existing chat room.. gitter has transferred the chat room.. I wasn't able to repro this on katex.org.  Can you check the network tab in the browser dev tools to make sure that all of the CSS files are loading?. \nI see what you're saying.  That explains why this screenshot looks the way it does.. @ronkok thanks for exploring an alternative approach for mhchem support.  My preference would be for #1436.  It sounds like it'll be easier to keep it in sync but more importantly keeping it as an extension saves bytes.  My hope is that eventually we end up with more extensions like it and a smaller core so that users can pick and choose what they want.. @AlbertHilb thanks for the PR.  I'm curious, did you make this PR against Khan/KaTeX or KaTeX/KaTeX? (we're having a minor issue with our circleci setup). The ci/circleci: test check is running correctly now.  Disregard my question about how you created the PR.. One benefit of implementing this as an extension is as that it side-steps some of the requires of having to check whether the user is using the strict setting or not.\n\nAnd indeed, an approach is just to likewise expose all the other functions I need through katex. I'm happy to do this, but am skeptical that exposing more fragile internal interfaces is a good idea and so am curious what the recommended approach would be?\n\nI think in the short term this is probably the way to go.  In the future though, we'd like to:\n- have an intermediate representation between the TeX AST and the HTML tree\n- standardize our DOM tree possibly using HAST or something very similar\nThe latter would all you to generate DOM node data structures without having to import our helper functions.\n\n(For instance, some, like ordargument, I could in principle just reimplement, and some may be accessible by object spelunking, although I didn't identify any obvious paths.)\n\nThis seems just as fragile with the added disadvantage of being less explicit about depending on internal data structures.. Given the non-standard nature of this command I'd suggest reworking this PR to provide \\nop as an extension in the contrib folder.  Please see contrib/mhchem as an example.  You'll also need to expose classes from mathMLTree.js in a similar way to how domTree.js classes are exposed on the katex object.  Instead of __domTree could you add a __mathMLTree.  You should then be able to write \\nop as an extension.. @daniel3735928559 #1791 would be better in contrib as well.. I'm not sure what's up with the tests.  First the firefox tests were running into an issue and now the chrome tests are having issues.. @edemaine I'm noticing the same issue with the Chrome tests in this PR as with your other PR, #1796. . @edemaine this is a big change.  Thanks for tackling this!  \u2764\ufe0f . I'm seeing the following error with the Chrome tests:\nError response from daemon: error parsing HTTP 404 response body: invalid character 'p' after top-level value: \"404 page not found\\n\"\n@edemaine are the Chrome tests failing for you locally?. I didn't do anything.  I'm glad to see things are working now.. This appears to be a specific case of #175.  PRs in this area are definitely welcome.  I'm going to close this issue as a duplicate.. I tried reproducing these using the MacOS version of Firefox but wasn't able to.  Could you paste the MathML markup that you're seeing when you get these errors?. We could also do some sanity checking out the MathML nodes we're outputting to make sure we're conforming to things like expected child count.. > Alternatively, we need to bring the &ApplyFunction outside of the subscript...\nI think that'd probably be preferable if it isn't too tricky.. The weird thing about the id attribute is that it actually adds entries to the window object (when it can) so element should defined after page load.  I would avoid any reliance on this behavior since it will fail if the id matches an non-writeable entry in window.. @edemaine I ran into this issue with a different project and I was able to fix it by forcing jest to run in single-threaded mode since the circleci instances we're running on are single core instances. . @ronkok now that we have to strict mode we can ship TeX's behavior behind that flag and a better behavior by default.. This change was from #1784.  I think we can fix this using modulePaths in the jest config.  I'll can put up a PR for this.. @ronkok could you try this branch out and see if it fixes the issue you were seeing?. @ylemkimon good suggestion.  I'll do that instead.. I guess I can't rely on dist/katex.js being built.  I'm surprised the other path worked, since the \"main\" field in package.json points to dist/katex.js.. @edemaine thanks for updating this PR.. jest provides a way to mock modules.  I'll give that a try.. @ylemkimon thanks for merging this.  Sorry for not actually getting around to mocking the module. \ud83d\ude1e. This is a know issue, but it's good to have a github issue to track it.  There are a few ways that we can look at addressing this:\n- use something like https://github.com/nippur72/ifdef-loader to only include the offending code in development\n- add a option to show warnings in production\n- measure glyphs at runtime to get metrics (this is slow)\n- wait for browsers to ship the Font Metrics API that supposed to be part of the upcoming Houdini set of CSS APIs\nI think we should do one of the first two items to resolve this issue and then open a separate issue for getting accurate metrics for all glyphs.  I think adding an option to control whether we see these warnings and have it default to off is probably the way to go.. I wonder if there's some way we can propagate the italic correction from d to the \\tilde{d}. \ud83e\udd14. \\dfrac's behavior is more complicated that I realized.  @edemaine thanks for posting that test case.  That's something we may want to include as a screenshot test.. I don't think case 3 needs to be solved as part of this PR though.  We can open a new issue to deal with case 3 separately.. Can you inspect the crossed out box in the screenshot above so that we know which element in the DOM it corresponds to?. Can you post which cases are matching when they shouldn't be matching?. I see, we want \\\\$$ to behave in the same way that \\\\$ does.  I seems like the four failing cases are:\n$$ Don't match $$$\n\\\\$$ Don't match$$\n$$ Don't match\\\\$$\n\\\\$$ Don't match\\\\$$\nIs that correct?. There was a similar request to have buildHTML output HAST, see #800.  I think having buildHTML output something that is easily consumable by other tools would be good to have.  I don't think that KaTeX needs to define its own DOM representation.  As long as style is an object I think we're okay.  In terms of adding a new representation, that feels like a short term solution.  Long term, if we're outputting some version of HAST we may as well use it internally as well.  It's probably easier adding it as a new additional format first and then migrating to use it internally as a separate PR.. I think we should make renderToVTree private though as eventually I think we'll want it to replace __renderToDomTree which will hopefully get promoted to an official API someday.. In order to do this we really need to hammer out an intermediate representation and then migrate existing code to use this representation.  Once we have that we can work on separate backends.  Echoing what @edemaine said, this is a rather large effort.  I wonder if it would be easier to adapt an existing Java-based TeX rendered for use on Android.. @edemaine thanks for raising the issue of \\\\ inside groups.  That's a little unfortunate that different environments treat this situation differently.  Ignoring it and logging a warning in non-top-level situations seems reasonable.. This is ridiculous.  First Safari can't handle negative advance so we get rid of it and then Chrome decides to add negative advance to combining characters that don't have it. \ud83d\ude1e \n@edemaine thanks for coming up with a fix for this. \ud83d\ude42 . Looks great!. There's a few other symbols that have been requested from wasysym so my (weak) preference would be to use that package.  In terms of where to put rarely used glyphs, I think create a new .TTF might make sense.  @infusion which font are you using in the browser to make the symbol show up in \\text?. \ud83d\udc4d to \\setlength.  Having this will allow people make all sorts of tweaks and make them outside of the katex source code.\nAs for alternatives to Computer Modern, there's a fair number.  Our font pipeline is a bit awkward but maybe if modified to generate different katex-font-* npm packages we could pass them as options with the existing Computer Modern based ones as defaults.  This would also help with people wanting to use specific fonts for various languages.. I'd give one those packages a try.. Thanks for finding a workaround that works in both Chrome and Safari. . Was there a bug in \\includegraphics?. I see, it was to get a hot-fix out for the \\neq issue.  I assume the concern around release \\includegraphics is that we want to address the security concerns we had.. I can do that.. I wonder if we might be able to leverage browserstack to help with this.. BrowserStack has a free program for open source projects, https://www.browserstack.com/open-source.  According to https://www.browserstack.com/automate/continuous-integration they support CircleCI.  One of their requirements is that we display their logo on our github page or website and link to BrowserStack.com.. I assume that this environment will require generating some DOM nodes.  This is the main reason why we haven't exposed even a private version of defineFunction or defineEnvironment.  Currently, we'd have to expose a lot of other private functions.  It might make sense to extract those functions into a separate npm package and then both katex and the custom environment could use them with katex having to re-export them all.. I don't know enough about markdown-it to say what the issue is.  In terms of the length of time things are taking, if these plugins are inserting the HTML as markdown-it enters a node then it may result in markdown-it also parsing the HTML that these plugins are inserting.. @songololo how long does a build take with webpack (as opposed to webpack-dev-server)?. Wow, that's really slow. \ud83d\ude1e It is mostly like an issue with the plugin itself and not with katex itself as katex is pretty fast at rendering things.  I suggest opening tickets against the plugin repos, they should be able to better determine what the issue is. \ud83e\udd1e. It seems like there shouldn't be too much work to add it the demo page.. I'm surprised the first example is working for you.  When I do:\nconsole.log(`katex.render(\"c=\\pm\\sqrt{a^2 + b^2}\", `);\nI get\nkatex.render(\"c=pmsqrt{a^2 + b^2}\",\nThis is mostly likely an issue with escaping.  In the second example try escaping the \\ and see if that helps.. It seems like that should work.  What input is this failing on?. Thanks for updating the chrome selenium image.  It thought it might require changes to our test code since it's a major version bump.\nI found a couple of the diffs hard to interpret because the content is rendered using either red or green, but those are also the colors we using for different.  I think everything's okay though.  I was a little surprised by how much the Unicode example changed though it's not enough to move forward with this diff.\nAre they really using PI for their versioning scheme or is it just a coincidence that the current version if 3.141.59?. Cool.  I will use that instead.  Is there anyway to add a commit a pull-request or will I have to resubmit it?\n. Good suggestion.  As I was writing the test I realized that I had some superfluous ordgroups with only a single child so I squash those now.\n. Can I set up a lint task to the Makefile?  That way people can check before commit and there's probably some way to get TravisCI to also check.  I was thinking either jshint or eslint.\n. Good to know.  I'll make this change.\n. hmm... looking at eslint's rules, the extra space would not have raised a warning.  that being said there are other things it would pick up... and, if we really want to, eslint has a plugin architecture so we could add our own rules.  I will investigate and start on a PR for this.\n. I was thinking that I'd need to move this into the extension, but I checked and this never gets run in all of tests.  Neither does the else-if for \"color\".\n. Same comment as line 84.\n. Had to change the exports because the extension need to use ParseNode, ParseResult, and ParseFuncOrArgument.\n. Need to change the exports because extensions.js needs access to groupTypes and the extension itself needed access to buildExpression.  I also exported buildGroup because I thought other extensions might need that too.\n. These unnecessary requires were causing a circular dependency.\n. I'm not a big fan of what I did here.  This restricts extensions to defining a single mode.  I'd like to have an array and maybe call the array \"argTypes\" and each item in the array would be an object containing lexer and parseSpecialGroup functions.\n. The extension turned out to be pretty clean and encapsulated.  The custom lexer needs to know a little bit about the internal works of Lexer.js.  This could be improved by adding a method called .getInput(pos) maybe?\n. Before advertising this extensions API to anyone I'd really like to get rid of ParseFuncOrArgument.  Everything in the parser should return a ParseResult.  Please see pull request https://github.com/Khan/KaTeX/pull/93 on how this can be done (along with rationale).  Although I closed this PR, I would like to eventually implement what's in it.\n. That's a nice concise way of explaining things.  I'll add it to CONTRIBUTING.md later so people don't make the same mistake I did.\n. I'm going to change this to output[3].classes.push(\"thinspace\");\n. thanks\n. I did look at the TeXbook before writing this, but unfortunately there wasn't anything in it about \\cfrac.  I agree, having magic numbers derived from what looks good is definitely not ideal.  Without this line it looks exactly like \\dfrac which doesn't look bad, it just doesn't have the extra padding.\n. Me neither, but now that I the know the definition I can dig into.  Thanks for the reference.\n. Here's what the TeXbook has to say about \\strut (page 82):\nPlain TEX defines \\strut to be an invisible box of width zero that extends just enough above and below the baseline so that you would need no interline glue at all if every line contained a strut. (Baselines are 12pt apart in plain TEX; it turns out that \\strut is a vertical rule, 8.5pt high and 3.5pt deep and 0pt wide.)\nDoes that that there should be a (8.5/12) 0.708333 em space above the baseline and a (3.5/12) 0.291666 em space below?\n. I took the other tests out because the string I would've needed to match would've been quite long making the test prone to failure from unrelated changes.  I was thinking about using jQuery in the tests to verify the structure of some of the markup that's being produced.  Thoughts?\n. I haven't spent much time looking at them.  I did install docker though.  I'll work on getting them running today.  Are you happy with the current solution?  If so, I'll create some Huxley tests.\n. Line 778 is totally wrong.  The intent is right, but the implementation is wrong.  Ugh.  Fix coming shortly then I'll leave it there while we discuss what to do.\n. This makes an assumption that group.value.body is a \"rel\".  It really could be anything else.  LaTeX and MathJax allow this.  What they end up doing is placing the combining long solidus overlay glyph infront.  Because this glyph already includes metrics that cause it to be rendered over the previous glyph, producing similar behaviour in these edge cases will require extra work.\n. It seems a little weird having a symbol with the same name as a function.  The upside, is that functions are parsed first which effectively hides this symbol which is nice because it shouldn't be used in isolation.\n. Removes the need for the else statement on line 488.\n. Removes the need for the if/else block starting on line 521 in Parser.js.\n. This is a remnant of when I was trying to figure out why the font rendering was different on travis even though the version of firefox was the same.  It was a shot in the dark that I forgot to remove.  Thanks for catching it.\n. That's what I was looking for.  Thanks.  My bash-fu needs improvement.\n. I originally had \"sleep 2\".  I copied it from the huxley dockerfile.  Then I was talking with one of the devs from travis-ci team about my problems and he suggested sleeping for longer after the server starts up (initially he thought that the server was running and huxley had troubles connecting).  I'll switch it back to 2 seconds.\n. I had it here initially and I thought, this should go in before_script.  So I moved it there... and then it failed so I moved it back and then it succeeded.  Honestly, I think I was just seeing unrelated random failures and my brain recognized a pattern where there wasn't one.  I'll move to before_script.\n. At one point I was trying to use plain-old selenium and it almost worked expect for one test failing for reasons that I couldn't explain (even after getting the right version of freetype).  When selenium takes screenshots, by default the background is transparent.  There's probably some setting that you can use to change it.  It's no longer necessary.\n. I'll see what I can do about implementing \\strut and then implement \\cfrac using the macro described.  I should proabbly add \\kern and \\nulldelimiterspace while I'm at it.  This is going to need a screen shot test.  It would be nice if we could start using the new screenshotter.  I tried it out a while ago and it worked well.  @xymostech when will the use-screenshotter branch get merged in?\n. Unfortunately, we can't use the same approach used for color b/c the mathvariant attribute is only valid on <mi>, <mn>, <mo>, <ms>, <mtext> so we have to set it on each of them individually.  This means we have to keep track of the current font.\n. These values are based on the \"mathvariant\" attribute in MathML produced by MathJax.\n. Putting props on the prototype is going to mess up nested environments.  These should be member variables that are defined in the constructors.\n. This is only used in environments, maybe it should go in that file.\n. I read through this a little to quickly on the first take.  I see that you're creating new EnvironmentBase() objects so this should be okay. \n. I think it make sense to have ParseNode in a separate file.\n. If all of these things are needed by an environment, why not just pass them as arguments to the constructor.  That way people won't forget to set these values.\n. It definitely should.  Thanks.\n. There's lots of other measurements like this that appear in fontMetrics.js, that's why I put it there.  I think you're right about it being always in pt.\n. makeKern should probably take a \"units\" parameter.\n. It should be 0.84 and 0.36.  I'll change this to be 0.7 * metrics.baselineSkip and 0.3 * metrics.baselineSkip so that people know where those numbers are coming from.  I guess we could re-use the domTree.symbolNode because it's not a real DOM node.\n. The script font, rsfs, is zero_indexed meaning that although the start_char is 65, the first glyph index is 0.  TODO: update the mapping so that we don't have to do - self.start_char here.\n. I tried implementing the TODO, but I could get it to work.  I'm probably misunderstanding something about how the mapping works.  I'm going to leave this as is and add some comments.\n. the fontMap feels common because it's used in both buildHTML.js and builtMathML.js\n. mathit, mathrm, etc. are not common b/c they're only used in buildHTML.js and should be moved into that file.\n. Do you forsee more props being added to this object?\n. Why is res failed here?\n. Can you change fontMetrics.metrics.quad instead of 1 so that people know where the number is coming from?\n. It seems like @{...} can come before or after a column specifier, the same goes for |.  Maybe instead of grouping these things with each column, cols could become colSpec which could contain separate entries for alignment, spacing, and vertical bar specifiers, e.g. {|r|@{\\quad}c@{\\quad}} would be represented by:\nvar colSpec = [\n   { type: 'sep', value: '|' },\n   { type: 'align', value: 'r' },\n   { type: 'space', value: quad },\n   { type: 'align', value: 'c' },\n   { type: 'space', value: quad }\n];\nThoughts?\n. Since res isn't being used for anything else wouldn't it be simpler to remove it and just echo \"Done taking screenshots...\"?\n. I wouldn't worry about it right now.  Whenever we tackle the \"format description\" part of https://github.com/Khan/KaTeX/issues/269 would be a good time to refactor this.  I like width instead of value b/c it conveys more meaning.  Is the index field necessary for content types?\n. In the short term it might be easiest to add a button to index.html that shows the JSON string in an alert or something.  I wouldn't worry about it for this PR.  Here's the string without the URL encoded chars:\nf(a,b)=\\\\begin{cases}a+1&\\\\text{if }b\\\\text{ is odd}\\\\\\\\a&\\\\text{if }b=0\\\\\\\\a-1&\\\\text{otherwise}\\\\end{cases}\n. I think either works.  There was that one pull request that you split into two commits.  That worked well, but people may want to submit separate requests.\n. Thanks.\n. I'm confused about the behaviour when it fails.  If node \"$(dirname \"$0\")\"/screenshotter.js ${browser} ${container} fails, does it print Failed taking screenshots, stopping and removing ${container:0:12}?  Sorry if this a silly question, I don't do much shell programming.\n. Can you add a comment here to that effect?\n. These are files on the host system created by docker, correct?\n. large roverhead => larger overhead\n. It would be good to remind people that the results from this method will differ from machine to machine.\n. It would be good to list the subdirectories here.\n. Nice!\n. It would be good to have an example here.\n. Can you break this up into separate functions, one for reading the PNG and one for computing the FFT on it?\n. ox == overlapX?  What's ov and why is it -1?\n. Can you switch this to createMatrix? newMatrix() is too close to new Matrix().\n. offsetX?\n. Can you make the labels a bit more verbose?\n. template strings would really help here ^_^\n. you might want to look at denodeify instead of using Q.nfcall\n. Can you use mkdirp instead?  https://github.com/substack/node-mkdirp\n. why the parens?\n. denodeify would help here too\n. that works too\n. As long as we keep katex.js free from extra dependencies. ;)  This is a very minor detail so we can leave it as is.\n. Good point.\n. Let's go with denodeify for consistency.\n. This was really helpful, can you add it as a comment?\n. Maybe ov => maxSquaredNorm and sq => squaredNorm?\n. That's okay.  Could you instead inline parsed so that we're not relying on hoisting for this work?  It's weird to have code appear after a return.\n. Fair enough.  Thanks for calling it out in the docs.  Pre-creating the files seems like it would be pretty easy to implement.\n. Does it actually ever take more than two tries?\n. Can you make this more descriptive, maybe taskQueue or jobList?\n. There's lots of different heights and widths being used here.  It'd be good to give them more descriptive names, maybe:\n- width, height => targetW, targetH\n- sw, sh => actualW, actualH\n- w, h => reqW, reqH\n. Pretty much the same code is repeated below.  Could you create a helper function that takes img and returns an object containing width, height, and buffer?\n. Could you add a comment about why buf[0x32] is special?\n. > I think it would make sense to stick to one library for all our PNG parsing purposes.\nAgreed.\n. I thought having the full URL was more convenient.  I'll take this out.\n. There was one font rsfs where glyph indices were messed up.  This corrects them.  I'll add a docstring.\n. It still picks up the system python.  I'd like to make this go away eventually by replacing fontforge with freetype-py.  See https://github.com/Khan/KaTeX/issues/288 for details.\n. I left it out because there's specific checks for \"mathit\" such that the entry here would never be used.  Also, I can't specify one fontName like the other because it uses Main-Italic and Math-Italic.  I thought about making fontName into an array, but that adds a lot of complexity to the common case.  I'll add a comment here.\n. It's used by buildMathML.js in the next diff.  I'll take it out of this one.\n. I don't think I'll be able to test it without this.  I'll pull the changes to options.js in instead.\n. Good catch!\n. @gagern let's go with png module like @xymostech suggested.  May as well go with pngparse seeing as it's already being used by texcmp.\n. The system version of python is 2.7.5.  I tried #!/usr/bin/env python2, but it still used 2.7.5 instead of 2.7.9.\n. If we find that this becomes a bottleneck we can always re-evaluate.\n. I'll have to start using this.  It's way nicer than the timeout(callback, 0) trick that I'm used to.\n. why remove it?\n. I just notice that you use process.nextTick here but setTimeout for the socket handling.  Any reason for the difference?\n. how long does devServer.close take?\n. doing things in series with promises is such a pain.\n. cool, I didn't realize that you could do that\n. Right.  I was kind of surprised that Selenium allows you schedule stuff in parallel.  It's nice that it queues the screenshot requests for us.\n. I agree with @xymostech that we should put extraneous stuff in the query string, but I also agree with @gagern that we should keep all of the data about test cases together.  Why not have ss_data.js export a dictionary where each entry is an object with a query property and a nolatex property.  Best of both worlds.\n. Can you use parseInt(res,10) instead, just that it's more obvious what's going on?\n. camelCase please\n. I think I'm going to have to give up using parseInt.\n. I tested these and they do.\n. snuck in the \"mord\"\n. It'd be nice if the output included \"expected: \" + expected + \" + \"actual: \" + actual + ... or something like.\n. fs is part of the node standard library and contains a bunch file handling functions.\n. ~~I found a quote in http://get-software.net/macros/latex/required/tools/array.pdf that might shed some light on the matter:~~\n\n~~In the standard array/tabular implementation this error is not so noticeable\nas that version contains negative spacing so that each | takes up no horizontal\nspace. But since in this package the vertical lines take up their natural\nwidth one sees two lines if two are specified.~~\n\n~~I'm sure if we got the \"width\" metric for \\vert it would turn out to be close 0.2em.~~\n. ~~Please disregard this, after looking at .vertical-separator I can see that 0.2em would be too thick.~~\n. I see, this is for the space between the double vertical lines.\n. camelCase colDescr and colDescriptions and colSep.\n. Since we're only going to have separators within this while loop, it'd probably be easier to grok if lastWasSeparator was renamed to firstSeparator and set it to true initially and then check if (!firstSeparator) { // add a gap }.\n. I forgot how terse some of these variables names were.\n. It would be good to have tests that verify that it handles separators at initial position as well as multiple separators in a row.  I know that the screenshot test cover those cases, but the screenshot tests don't get run as often.\n. I'll see what I can do.\n. Instead of passing in \"data\" we could use \"name\" to do the lookup from the \"functions\" array.\n. We do this with parseArguments too where we do the lookup before passing in \"funcData\".\n. This should be \"funcName\" so that it's consistent with the other uses of \"func\" and \"funcName\".\n. In the case where there isn't a \"not\" version of whatever's in the body, I'll add the solidus in manually.  This is what MathJax does:\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n  <mrow class=\"MJX-TeXAtom-REL\">\n    <mpadded width=\"0\">\n      <mtext>&#x29F8;</mtext>\n    </mpadded>\n  </mrow>\n  <mrow class=\"MJX-TeXAtom-ORD\">\n    <mi>a</mi>\n    <mi>b</mi>\n    <mi>c</mi>\n  </mrow>\n</math>\n. I tried it without and it uses string comparison to order the entries so \"100\" becomes before \"2\".\n. Probably doesn't make a huge different, but I could see how maybe more people are using to looking things in numeric order when dealing with numbers so if someone needs to verify something about a particular glyph this ordering might make it easier.\n. The reason for doing the assignment down here is that innerMode can only be text or math by the time we get here.  Is that correct?  This could probably use a comment.\n. Sounds good.\n. \"showing how KaTeX would\"... and \"symbols/functions (including\"\n. \"we don't support\" => \"we support\"\n. Sorry, I didn't look at the original wording.  We can leave it as is.\n. There should be a space between before the \"(\".\n. This is really nice.\n. It seems like the position on this one is off by one as well.  Could you add a TODO here?\n. It might be better to leave the begin{matrix} out completely.  I was initially confused why it didn't start with \\\\.\n. au nice :)\n. I like how you provide different output depending on whether it's a parse error or not.\n. \"rejects ambiguous superscripts\"\n. \"rejects ambigiuous subscripts\"\n. Let's leave it as is.  The thing is that you have can have double subscripts if you use groups.  In a separate diff we could always look at changing the error message, but since nobody's reported being confused by it, let's just leave it.\n. Shouldn't the underline be under the second } which is at position 5, not the \"at position 6 which to me indicates that it's reached the end of input.\n. Could update the docstring to include a description of consume?\n. Could you add brief description of this function?\n. Could you get rid of input?\n. Looking at this code again, I realize that I could've done this in a better way.\n. Could you change this.pos to symPos?\n. Yay!\n. After copying and pasting this I realize that the _ is in the right place even though github (or Chrome) is rendering it in the wrong place.\n. {?ParseNode}\n. Can we use start == null instead?\n. It feels a little weird having this as an optional parameter, but I don't have a good suggestion of how to make it less weird.  Could you update the jsdocs to reflect that baseGroup is optional?\n. If the return is an array of arguments with the last element being an array of positions, I would expect that we should be returning [[]] here.\n. I hope in the future that the args can contain position data so that we don't need this extra element in the array.\n. Could you add a comment about what this is consuming?\n. Could probably make _innerLex always ignore leading whitespace and then we wouldn't need to this special casing.  This is something that should probably go in a separate commit or PR.\n. Could just test against this.nextToken.text directly instead of introducing start\n. Same comment as in parseGroup\n. Sorry I confused whitespace before \\text{} with whitespace within \\text{} before non-whitespace text within \\text{}.\n. I forgot about that, thanks.\n. At KA we prefer using == (or !=) when comparing against null because it will produce the same results if start is undefined.  In this case it's pretty easy to verify that start is either a ParseNode or null so it's not a big deal, but in other cases it may not be easy to make this determination.\n. May as well add them since we have those glyphs.  Good catch.\n. cool ^_^\n. why detach?\n. I'm guessing this pushes the commit and the tag... usually I do git push origin and git push origin --tags\n. does this tag point the same thing as master at this point?\n. this could be simplified to \njs\nreturn {\n   type: \"rel\",\n   value: body.type === \"ordgroup\" ? body.value : [body]\n};\n. Could you put this in your global .gitignore instead?\n. Symbols\n. put replace in back ticks.\n. The last part of the \"This allows for... \" sentence doesn't make sense.  Maybe split them into separate sentences.\n. \"..there is only one example,\"\n. I didn't realize that supsub didn't have second level of indirection like the other functions.\n. \"...as transparent as possible...\"\n. is lexer an optional param to the Token constructor?\n. I think this is fine, it's probably worth add a comment to the Token constructor which points out that lexer is optional and why that's desirable.\n. shouldn't this be match[2].length?\n. It be good to have a comment here about how this function expands macros until it can't and then returns the next atom.  I was thinking it might be clearer to have a separate function that just does the expansion art, thoughts?\n. Why is the expansion reverse?  This is probably worth a comment.\n. It seems like nextToken could expand everything all at once.  Is the goal to avoid having to parse things twice?\n. I'm confused by this.  Why does a ParseNode need a reference to firstToken's lexer?\n. If you try to do more than one unget in a row we might end up with messed up whitespace.  Is that something we should be concerned with?  Regardless, it's probably worth writing a comment about it.\n. It's probably worth putting a comment here too about why it's called the gullet.\n. can you rename top to topToken?\n. What situation does this handle?\n. We should probably rename breakOnToken to breakOnChar so that the word \"token\" doesn't become too overloaded.\n. nice cleanup\n. :+1:\n. parseSpecialGroup used to do something different which may be confusing for people who have worked in the code base previously... maybe parseStringGroup?\n. I see you catch unsupported units below, nice!\n. // +(sign + number)\n. Could you provide a default here so we don't have to check if settings.macros is defined when creating the MacroExpander?\n. macroRegex to follow the existing naming convention\n. I don't get how this works, but cool!\n. why are the position numbers different?\n. nice \ud83d\udc4d \n. someday ;)\n. nice!\n. I don't have super strong feelings either so let's leave it as is.\n. b/c we have to pop to get the next once which would be the last one w/o the reverse.  got it\n. Cool.  It's probably worth having that in a comment.\n. I kind of like the gullet.  It's something that I think is unique to the way TeX operates and including that terminology in KaTeX is a great way to pay homage.  ^^\n. Cool!  Nice optimization.\n. Let's go with breakOnTokenText.\n. What happens if there are more extra trailing line breaks?\n. ...should _get got again...\n. \"Expand the first token and all tokens it generates.\" might be a bit clearer.\n. The comment is a bit confusing b/c it's the MacroExpander that creators the lexer. \n. The first token \\bar only generates x.  Another way of stating this might be \"recursively expand the next token\". \n. nice addition, I checked out your branch locally to try this out and it works as advertised\n. thanks :)\n. I'll fix this up.\n. A class is probably better.\n. Can you change this to italicLetters?\n. nice!\n. makes sense\n. Can you put this in a separate PR?\n. I didn't think the fonts would be changing, but better safe than sorry.\n. Why NIS= instead of NIS?\n. Cool.  Maybe add a comment in the Makefile.  npm won't be happy if there are comments in package.json.\n. This is a clever solution, but it fails if the math under the arrow is too wide.  Could you add a comment with the limitations of this approach and a TODO to make this better at some point?  The limitations that I see here are that this won't work with \\overleftrightarrow and if the expression under the arrow is too large it won't extend far enough.  Not sure how many people would use \\overleftarrow, but it seems like an easy addition.\n. tftopl reported this as 0.25.  It's not actually used anywhere.  I was thinking I should update this.\n. The values for sigma21 that were here before had premultiplied the style's fontSizeMultiplier.  Since our inline styles use ems to position thing, I would assume that no scaling would be required because ems are relative to the font-size of the element.\n. All of the values for sigma5 are the same.  Perhaps I should change this to an array and change this to getXHeight for consistency's sake.\n. The parser doesn't seem to have any idea of what the current style is, but maybe it should.\n. Sounds a little dicey.  I'll add a more detail comment in here, but I think we can leave this issue for a future diff.\n. It is.  Thanks for catching this.  I'll update the comment.\n. Eek.  I've been spoiled developing for IE10+.  Not having Object.keys is really sad.  It would be nice to have a polyfill.  In order to keep KaTeX small I'd probably want to have a legacy and a modern build.\n. pushd/popd look like they're super helpful.  What happens if you pushd and then the checkout fails?. I was thinking it might leave the user in FONTS_DIR, but after a quick test I see that's not how shell scripts work.  I don't do much shell program.. I've checked these changes against https://books.google.ca/books?id=rstheMEAf2gC&pg=PA257&lpg=PA257&dq=texbook+ord+bin+rel+op+punct+spacing+rules&source=bl&ots=TU_zSmaVkr&sig=4ndj36478T4s9EI7OgrIAwwlUws&hl=en&sa=X&ved=0ahUKEwjltL3-zMfQAhUC9IMKHZhVCK0Q6AEIHTAA#v=onepage&q=texbook%20ord%20bin%20rel%20op%20punct%20spacing%20rules&f=false.  They look good.. Can you change the color to something other than black?. Could you add some style switches at boundaries between atom types, e.g. a\\cdot\\textstyle b. nice cleanup, I didn't realize we weren't using using half of the parameters to domTree.span.. Can you rename style to fontFamily?. Shouldn't we get the rightmost atom of the group.value.body for fonts?. I found this kind of hard to follow.  I think maybe doing two passes would make this more understandable, in the first pass we could add dividegroupsup into set of arrays and the second pass could create the spans.  This should avoid the need forprependChildren.. IsnewOptionsnecessary for thenumerreset?  The.reset-Xrules don't seem to interact with.tight.  Am I missing something?. Why did\"mord\"disappear?. Same.. Thanks... this order for the classes is better.  It would be nice if the param order betweenmakeSpanandmakeSymbolwas more similar.  Can you add a TODO to clean that up later (there's already enough changes in this PR)?. Is this to handle a size change inside of a color group?  Can you update this comment to include why we're doing this?. It seems like this is going to result in a lot ofreset-styles being added.  Is that the case?  It seems like this is unavoidable..size-resettingorstyle-resetting?. Could you give an example of what you mean by this?. It seems like those are all of the cases we handle ingroupTypes.op... are there other types of operators that we haven't handled yet that you're concerned about?. I think this makes sense.  Is there something additional that you think we should be doing in the future?. Right b/c styles apply to everything which follows them whereas the font contains a single group.  It's been a while since I've looked at the code \u2013\u00a0can you tell?. In that case it's probably best to either always passoptions.  There are a few places where it's not being passed,groupTypes.spacing,groupTypes.sqrt,groupTypes.array, andbuildExpression`.  Can you add it to those call sites.. That makes sense.. \ud83d\udc4d . This is still really hard to follow.  I was thinking something more along the lines of the following (if I understand the code above correctly):\n```\nvar spans = [];\nvar children = [];\nfor (i = 0; i < groups.length; i++) {\n    var child = groups[i];\n    if (isSpace(child && children.length > 0) {\n        spans.push(makeSpan(children[0].classes, children));\n        children = [];\n    } else {\n        children.push(child);\n    }\n}\nif (children.length > 0) {\n    spans.push(makeSpan(children[0].classes, children));\n}\nreturn spans;\n``. wow... I'm surprised there isn't an easier way/some library that already does this.. nice!. Thanks for catching my mistake withisSpace(child`.  \nThis is better.  I was confused as to what was being prepended.  buildCommon.prependChildren(group, spaces); makes that really clear.  Question about the instanceof domTree.symbolNode check: if it fails is it possible that the group being passed into prependChildren is not a span?. A TODO sounds good.. Maybe isRealGroup would be a better name than isComplete.  The groupType handlers for things like color, styling, etc. where isComplete is false are \"groups\" that disappear after this processing.. There aren't any updates to any of the other screenshots.  Did these changes have an effect on any of the delimiters?. nice. Maybe this should be symbol: true,, from the TeXbook (page 178):\n\n\u2018\\mathop{\\phantom\\sum}\u2019 will leave exactly the right amount of blank space. (The \u2018\\mathop\u2019 here makes this phantom behave like \\sum, i.e., as a large operator.). I worry about this.  Even though the class always comes first, it's not obvious that it has to come first.. Update one of the screenshot tests to include this?. The fonts don't include these last two, but we could render them and use a CSS transform to flip them.  You should also add metrics for these in fontMetrics.js.  I think the height/depth for y should be pretty close.. I was hoping this would fix https://github.com/Khan/KaTeX/issues/354. . I wonder if createClass should sort it's the classnames?  Maybe add a TODO by the createClass definition.. Could you add a .equals operator to Style or a equals function to utils.js?. Can you add a mathit as well?. Since small-caps doesn't have super wide support yet we should probably leave this out or make it optional for now.  A more robust way of implementing this would be to use CSS transforms to scale normal caps.  Unfortunately, transforms don't affect the flow and so then have to adjust for the gaps left.  :(. Right you are.  My question should've been why are the other \\textXX defined as aliases to their \\mathXX counter parts, but textit is not?. I was looking at http://caniuse.com/#feat=font-variant-alternates which appears to be some extension to font-variant.. Sorry for not providing more detail.  It looked some of the code here was being used to compare two styles.  This suggestion was more of a nice-to-have kind of thing and can be done in the future if we actually need to compare styles elsewhere.. There probably isn't a set of adjacent atoms that only differ by the order of their classes.. Sounds good.. Historically we've asked that PRs for new commands come with screenshot tests.  I'm sure there's lots of functionality that we don't have screenshot tests for.  I feel like we should have more screenshot tests so that we can have more comprehensive coverage.  I'd love to hear your thoughts on testing.. Fair enough.  Having a debug mode would be interesting, but I'd want their to be some way to strip out that code.. That sounds reasonable b/c you could have lots of things inside that \\mathop that aren't suitable as large operators and if there was a large operator inside, it would already be of type op anyways.. Nevermind... I see why.  .mathit sets font-family: KaTeX_Math;.  Sorry for all of the silly questions about my own code.  :(. How was groups[i].classes getting mutated?. The documentation for leftRightDelim in delimiter.js should probably be updated, but let's leave this a TODO for now.  . Shouldn't a stray \\middle be caught by the parser?. I opened https://github.com/Khan/KaTeX/issues/583 to look at all of regexes.. We don't catch any of the errors we throw.  @csilvers this only matters if we were catching errors and attempting to recover in someway?  In that cause it would also be acceptable to reset the this.mode inside the if block, right?. Can you add a test case for parsing \"\\\\kern+1em\"?. Are there cases of stray \\middles that leftrightDepth counting won't catch?. I see.  That would be tricky to catch with the parser alone.  I might fiddle with that later to see just how difficult it would be.. According to TeXbook on pg. 168, \\mkern only accepts measurements given in mu units and \\kern cannot accept mu units.  Can you add a comment describing this deviation from spec?  We'll probably want to enforce these constraints at some point, but it doesn't seem critical at the moment.. Love the cleanup.. Please update the \"A kern parser\" test suite to convert the new unit and the addition of \\mkern.. It took me a while to realize that this if statement corresponds to \\nonscript\\mskip-\\medmuskip.. It would be nice to have a function that builds these kinds of strings.  Not necessary for this PR.. Logic looks good.  It'll be nice when we can write these as macros, but this is good for now.. We're going to be enabling support for some ES6 constructs including the spread operator after the next release so things like this will be easier.. Where does the space before the mod get added?. Maybe .sixmuspace would be better since amsmath.sty uses 6mu.. Maybe .twelvemu for similar reasons.. After looking at http://caniuse.com/#feat=mathml it's probably safe to say that it's not worth supporting due to spotty browser support.  Originally we wanted to use the MathML rendering for a11y reasons so the browser could read the math out loud.  That didn't work that well so we ended up converting the KaTeX parse tree to a string which the browser could read.. Why are ## being stripped out?. I think initially most of the macros, will probably be ones included in KaTeX itself so it's probably okay to be a bit more strict in what we accept.. It's probably worth having a comment in the code about the limitations.. This is to handled nested \\defs?. Cool!. Could you add a screenshot test for these?. I tried this out and there's a noticeable lag... thanks for setting this up a separate route.. \ud83d\udc4d . This is the fix for the node version check?. Is this code supposed to be commented out?. Can you update the doc string for mathit now that it no longer creates a symbol?. In that case, can you remove the commented out code?  TBH, I'm not sure why we have the same glyphs duplicated in different fonts.  It would be nice if we could avoid this and save a few bytes.  I'm curious to find out why the rendering looks different even though the glyphs are the same.  Maybe the advance or skew metrics for the Greek capitals are differ between fonts.  I think it's safe to investigate this separate from this pull request.. Cool!. Yes please.. I'm curious about the benefit of combining multiple commands vs. running them separate?. The rm commands are necessary are they?. \ud83d\udc4d . I tried running ./buildFonts.sh /local/path/to/MathJax-dev and got the following error:\n./buildFonts.sh: line 97: syntax error in conditional expression: unexpected token `('. So the docker image created by the DockerFile is a base image that you then modify to run the commands to actually create the fonts, is that correct?. Why the version bump?. That sounds reasonable.. I don't understand why we're slicing basename in this way.. The extra whitespace looks like it shouldn't be there, maybe \"qm\" or \"qu\" and add a comment that these abbreviations need to be two characters.. This URL doesn't seem to be used by screenshotter.js, is that intentional?. The doctype in test/screenshotter/test.html was removed by this diff, is this still necessary?. I gave that a try, but that gives the same output. :(. Sorry... I pasted it in the wrong .sh file.  It's running now.  I'll post back once it completes.. A \"container\" seems like an \"instance\" from the description you gave.  This is probably one of the reasons why I've had trouble grokking docker.. It worked!  All of the font files were modified.  Some of those changes might be due to version changes in the deps and/or running in the docker vs. OS/X itself.. I was running it against HEAD on master of khan/MathJax-dev which has a number commits since the last time the font files were generated.. This comment should be updated.. For bug fix releases, would a person run ./release.sh 0.7.1 0.7.2?. I could go either way.  I'm not too concerned about an extra commit on a release branch.. I don't know the release process that well I figured that you actually running the release script would suss out issues better than I'd be able to reviewing.  :(. I'll give that a try.. I'll have a look at the output to see what's going on there.. d'oh, thanks :). Maybe using a negative margin will work better with the non-combining character since it'll have a non-zero width.  Regardless, adding a prefix is probably a good idea.. Could be more consistent by making String lowercase like on line 50.  . Does the script exit prematurely if git diff --stat --exit-status is non-zero?. And that doesn't happen in the dry run because we're overriding git and npm to echo.  Cool!. why the change in max length?. could add this to your global .gitignore?. Answering my own question: because of the extra indent.  I'm fine with this.. Why the extra <svg>?  Couldn't viewBox and preserveAspectRatio be set on the outer <svg>?. @HosseinAgha how much of the code would be affected by keeping the 80 column limit?. @alexpearce can you add the extend function back and clone the object as suggested?. this should handle mu units right?. shouldn't height and depth both be updated regardless of the sign of dy.number?. Can you add a unit test to check that things like \\text{graph: $y = mx + b$} parse and build.  Not sure if we need a screenshot test for this or not.. Thanks for fixing this.. What does this loop do?. may as well add \\textdagger and \\textdaggerdbl as well.. > At least, my mental model is that height is the extent above the baseline (y-max) while depth is the extent below the baseline (y-min) -- please correct me if I'm wrong.\n\nThat's right, but if a glyph is shifted vertically, the the extent below the baseline will be different.\nWhat happens if you put the test expression inside a \\sqrt or a \\frac?  It may be that just our wrapper container isn't doing the right thing with the height and depth you're setting on the span.. It looks like calculateSize supports ex.\nconst calculateSize = function(sizeValue, style) {\n    let x = sizeValue.number;\n    if (sizeValue.unit === \"ex\") {\n        x *= style.metrics.emPerEx;\n    } else if (sizeValue.unit === \"mu\") {\n        x /= 18;\n    }\n    return x;\n};. This should be 4 space indent, this is why travis-ci is failing at the moment.. Since you've added a screenshot test you'll also have to generate the image files using make screenshots and commit those as well.. duplicate phantom. Can you add a TODO above these to indicate that this is what we want the the implementation of these commands to eventually look like?. You mentioned that $\\text{\\pounds}$ generates a textord, should \\text{\\textsterling} do the same?  Can you add a TODO so that people aren't confused by the use of mathords in text mode later on?. Could you expand on this script a bit more?  I assume that I need to load KaTeX somewhere too.\nMaybe something along these lines:\nhtml\n<html>\n   <head>\n       <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.7.1/katex.min.css\" integrity=\"sha384-wITovz90syo1dJWVh32uuETPVEtGigN07tkttEqPv+uR2SE/mbQcG7ATL28aI9H0\" crossorigin=\"anonymous\">\n       <script src=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.7.1/katex.min.js\" integrity=\"sha384-/y1Nn9+QQAipbNQWU65krzJralCnuOasHncUFXGkdwntGeSvQicrYkiUBwsgUqc1\" crossorigin=\"anonymous\"></script>\n   </head>\n   <body>\n      <script type=\"math/tex\">x+\\sqrt{1-x^2}</script>\n      <script src=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.7.1/contrib/mathtex-script-type.min.js\" integrity=\"sha384-o+v+EkJWQmZj7XwHBxehTGJKE18182WyyN2glZMTPw9g5XxjN1uwrquNuMX/NJiF\"></script>\n   </body>\n</html>. Will this actually work at the moment?  Wouldn't we have to publish a 0.7.2 version of the KaTeX in order for mathex-script-type.min.js to appear in the published package?. I wonder if we should just encourage people to copy/paste the script manually before we do a publish and then update this to point to the published script afterwards.. Looking at the script though, we'd probably want to run make build/contrib and use the built version of the script.. @ronkok did your tweaks have any effect on the top level bounding box?. Could we check (group.value.sub ? false : true) === group.value.isOver to keep the logic grouped together?  Also, !group.value.sub === group.value.isOver may be simpler.. Minor nit: \"taller\" made me think this had something to do with height of the layout, but really these images are large in all dimensions, right?  Does LaTeX have a set of images for these accents or does it draw them manually?. Why is the height for all them the same for numChar > 5 even though there are different values for widehat vs widetilde and undertilde?. Does anything in this if/else-if block depend on the preceeding else block?. Does isOver stand for being above or below as opposed to on either side?. Why is setting style.height necessary for the brackets but not the tildes or hat?. stale comment?. Where did these numbers come from?. This is actually making it wider so that the accent extends to cover the now wider horizontal bounds of the skewed char.  Can you update the comment?. In groupTypes.accent we use the following value for clearance:\nconst clearance = Math.min(\n        body.height,\n        style.metrics.xHeight);\nWhy the different clearance value here?. Is note short for notation? haveNote -> hasSubSup, note -> subsupGroup, and subsupReset might be clearer.. What is the base in this case?. Can you cite where these calculations are coming from? . Why shift instead of a kern?  Does it changes the behavior of an enclosing group from how accents behave?. Can you move this into an else block below if (haveNote) { ... } so that it's clear what code is independent of other code?. camel case accentUnder. Same comment about shift vs. kern.. What does makeVlist get wrong for this particular use?. How did you determine how much to extend the height by?  Could you create a var for this overshoot and use it here and throughout this method?. Do we want to remove the first character when label is \"cancel\"?  I assume that label can be \"cancel\" from the comment at the top of this else block.. I'm uncertain how style.top and style.verticalAlign interact with each other.  Is is necessary to mix the two?. Why give these spans (inner-wrap & outer-wrap) classes that don't have CSS rules?. Maybe using a similar approach to what llap/rlap do would work and be simpler?. I can't find the boxed CSS rule.  Should there be updates to one of the .less/.css files?. Where did you find all of these constants?. After staring at amsmath.dtx and trying to inspect the output of \\xleftarrow using pdflatex I wasn't able to figure out where the 2 * ruleWidth and 3 * ruleWidth come from. . Should the depth be padded even when there's nothing under the arrow, likewise for height when there's nothing above?. Shouldn't we also set isBrace = true for \\underbrace and \\underbracket?. Is it possible for group.value.sup to be true, but group.value.base.value.isOver to be false?. accentUnder. TIL :). \"menclose\". Cool!  https://developer.mozilla.org/en-US/docs/Web/MathML/Element/menclose. Give \\xleftarrow[123]{} would upperNode be empty?  In that case maybe we should use munder?. Should \\Overrightarrow be \\overrightarrow?. Shouldn't all of the \\\\over... commands be stretchy?. I see we're being inconsistent with base and body.  We should clean that up at some point.  Don't worry about it in this PR since it's big enough as is.. /^\\\\over/.test(context.funcName) might be a bit clearer, feel free to ignore.. camel case. The mix of strings starting with and without \\\\ is confusing.  I kind of wish we removed the \\\\ after parsing so we didn't have to deal with this here and there.  No action action required.  Just thinking about how we can make the code base easier to work with in the future.. Super cool!. Nice :). Can you add some tests with optional arguments for \\\\overbrace?. Could you add tests for shifty accents?. That seems reasonable since we're always passing group.value.base at all of the call sites.. Got it... I saw the + 2 and missed the -.  We support template strings so you may want to change this to calc(100% - ${2 * skew}em) 100% for improved readability.. Thanks for the awesome explanation.\nI didn't see that vlist gets used by vspan when haveNote is true.  This is fine as is.  \nThe nice thing about firstBaseline is that it's clearer what the spacing is from the kerns.  Also, I'm looking at the code for groupTypes.overline and it's pretty clear that's where the 3 * ruleWidth is coming from.\nconst vlist = buildCommon.makeVList([\n        {type: \"elem\", elem: innerGroup},\n        {type: \"kern\", size: 3 * ruleWidth},\n        {type: \"elem\", elem: line},\n        {type: \"kern\", size: ruleWidth},\n    ], \"firstBaseline\", null, options);. I see it's coming from groupTypes.overline.. I'm not familiar with the inner workings of makeVlist... I was unware of makeFontSizer.  :(  After hearing the issues you experience I don't think llap's approach would help, because it's not creating an atom that has a height much greater than 1.0em.. Sorry... github collapsed this file and I completely missed it.  :(. No worries. :smile:. I missed that \\\\overrightarrow is on the previous line.  Sounds good.. d'oh... I missed the ! in const isStretchy = !utils.contains(...).  \nThanks for calling out the difference in behavior for \\overrightarrow and \\overrightharpoon.  One of our guiding principles is to match LaTeX's behavior so these should be left out.. Cool.  Can you add this as a comment in the code?. Cool.  I just found it curious that the tallest SVGs had the same height even though the heights of the smaller SVGs didn't seem to line up.. It makes sense after looking the .less file.  :). A .toBuild() test should exercise different code paths for shifted accents.  It's less important once we have the screenshot tests.. nice TODO. Is the aligned environment also supposed to be in \\displaystyle only?. This is so that operators at the start of cell will have the proper spacing around them.  What about operators at the end of a cell, or does that not happen in practice?. The naming of this variable is confusing to me.  Aren't rows already lines?  This just adds more space between the rows/lines.  Maybe change this to addJotBetweenRows.. I worded that poorly.  I think <script src=\".../KaTeX/contrib/mathtex-script-type.min.js\"></script> makes sense.  The README could be updated in a separate diff to point to the CDN version, but as this stands right now this code won't work.. nice. Thanks for commenting this.  It would be nice to have a way to mark functions in this file as to whether or not the parser needs to the parse an implicit group for them.. I don't even know what that character is, lol.. Nice tests!. nice. I wonder if we should include em and mu in this list as well.. We should continue to throw here, but check if data.unit is one of the keys in ptPerUnit (assuming we add em and mu to it).. This was replaced by * { -ms-high-contrast-adjust: none !important; } a couple of lines below in https://github.com/Khan/KaTeX/pull/733 and should be removed.. This seems functionally equivalent as long as we don't mutate these objects.  Can you add a warning somewhere not to mutate these objects and to only use the functions provided to create new Option instances from existing ones?. Where is this used?. Where do these numbers come from?. Is this equivalent to the following?\nreturn sizeStyleMap[size - 1][style.size - 1];. I'm curious why you chose not reset the cramped-ness?. Is the implementation functionally different from this?  If not, why not return this?. The doc string for this function references a .reset function with doesn't currently exist.  It needs to be updated.. Nice comment.. nice cleanup. Does the comment above still apply?. Why are we reset the base style here?. These changes seem unrelated to the rest of the PR.  Were you using this to compare the sizing changes with LaTeX output?. It's definitely preferable to to have these as separate commits.  Even though it's all going to the same place, smaller commits will take less time to review and if one review needs revision it doesn't hold up the other.. The delimiters look pretty good in the screenshots as is.. For some reason I thought the sizes where started counting from 1.  I think my reason for confusion is that I was conflating sizing command sizes with style command sizes.  :(  The fact that we're accessing values in sizeStyleMap should've clued me in.. My understanding of KaTeX fonts is that we only have 10pt size fonts and we scale them appropriately.  What would prevent us from scaling that font to 6pt when necessary?. I agree this shouldn't be blocking, but if we defer please add a comment in the code.. Thanks.  I totally missed that file b/c github auto-collapsed it.. I'll try to review the changes to buildHTML.js over the next couple of days.. I'm curious why the wrapping isn't necessary anymore.. Moving this up here to avoid unnecessary calculations when there isn't both sub and sup parts is a nice optimization.. Why the name change from sub and sup?  Keeping those variables names would've reduced the number of changed lines.. I'm okay with keeping this change as it makes reviewing easier. . I see makeLineSpan takes care of setting the height.. I wish we weren't reusing this identifier for different options within the frac layout, but since this is the way the code was I guess we'll have to change it later.. Can we get rid of parentSize?. It looks like it's being handled by buildGroup now that we're passing parent options.. It might be better to call makeLineSpan here and then use its height below as opposed to calculating the ruleWidth here and inside of makeLineSpan.. The reset() isn't necessary anymore here b/c buildGroup handles that now.. Are adding the sizing classes necessary here?  The span has no children and we're already setting its height explicitly.. Could we not using options.sizingClasses(baseOptions) here?. This should be checkable by rendering a expression with nested sizing commands and verify that the mathsize values in the MathML tree in the DOM match the sizes we use for same elements in visible HTML nodes that KaTeX renders.. I really like how you unified the handle of style groups and sizing groups.. I was mixing up options.reset() with the reset- CSS classes.. This was an unused cyclic import.  Style.js requires fontMetrics.js.  It was picked up when switching to jest.. I don't know how settings was being passed into this function.  I should probably remove it to avoid confusion.. Remove commented out code.  While jest has util functions, it doesn't have a util for checking equality.. I spoke to too soon, settings is being passed for a couple of tests:\nexpect(oldColorExpression).toParseLike(\"\\\\textcolor{#fA6}{xy}\", {\n            colorIsTextColor: false,\n        });. Converting the custom matchers from jasmine to jest was pretty easy.. This is a little unfortunate.  It is possible to debug tests using node debugging.  I'll try to find a good guide and flesh this section out.. @xymostech I ended up linking to the jest troubleshooting docs which should be a good starting spot.  Unfortunately they suggest node-inspector which I've found cumbersome.  I've used vscode's built-in debugger for debugging node code in the past but I've had to fight with it to debug tests and not everyone uses vscode and I don't want to ask people to install it just to debug something.  Do you know of any better alternatives to node-inspector?  (maybe it's gotten better since the last time I used it). I'm surprised that the third value in each of the arrays isn't determined by cmex5 similar to how cmsy5 is used for the values above.. Now that this object also includes xis as well as sigmas maybe we should change the name of it.  Maybe fontMetrics.. Object.keys(sigmas).forEach(key => metrics[key] = sigmas[key][sizeIndex])\nis another possibility.  I'm okay either way.. Nice.  I ended up removing this dep in another PR.  I missed the comment at the top.. When I first looked at this I thought this might create a lot of objects but then I remembered that getFontMetrics also stores a copy of each unique object it returns which means there's a small number of objects being created.. I'm not sure what this comment means.. We use this.consumeSpaces(); in other places.  It might be good to do the same here for consistency.  It should be noted that consumeSpaces does not consume all whitespace, only plain old spaces.  I wonder if it should be upgrade?. Thanks for filling out the tests.  Only abKern3 would fail without the changes to Parser.js.. link to jest troubleshooting. I'll give that a try.. Can you change this name to browserified?. We probably don't need this function anymore since we don't have /babel urls for katex.js.  Can you replace all uses of this function with app.use?. Can you change the name to browserified?. We don't need the /babel endpoints that this function generates either.  Can you replace all calls to twoUse with app.use?. I'm okay with this for this commit, but we should revert it afterwards.  How do other people feel?. Within the class you could have a line ParseNode = ParseNode.  This is similar to static ParseNode = ParseNode but adds the value to the prototype instead of the class itself.. super minor nit: /**. I had a closer look and jest-html-reporter doesn't actually run the tests in the browser.  It only produces a HTML report that can be read afterwards.  . The plain / is not as slanted as the combining version of the glyph.  I've updated the code so that \\not is just a symbol and not a function.   buildHTML.js now does some post-process on \\nots in buildExpression.. MathJax combines \\\\not with certain relation operators and outputs the combined HTML entity inside an <mo> and for mords, it puts the HTML entity for not after the identifier inside an <mi>.. I'll take care of these in a separate PR.. I didn't realize there was a document.fonts.ready was a thing.  I've used webfontloader in the past, but this is better for this use.. I had to look this up in the selenium docs.  It seems like such an awkward API for interacting with the browser.  Thanks for figuring out all of this stuff.. Should we always be using the size of the quad defined in cmsy for kern/mkern?. This is b/c the value for quad for textstyle is 1.0, right?. Below it looks like we're only using textstyle if the current style isTight.  If that's the correct behavior could you update this comment to reflect that?. Not sure why were doing this out side of the if statement.  Thanks for cleaning this up.. I forget whether I ran the screenshot tests after all the font files were changed.  I want to get this merged so I'm going to run the script again and then run the screenshot tests and if everything passes I'll merge this.. I read that backwards.  Thanks.. It's coincidental that the name of the function and the type matches, most of the time this won't be the case.. I can fix that.. This is so that it's a little taller than any of the children?. I'm curious about the name pstrut... what does the p represent?. I'm guessing this will have to be updated to support \\rasiebox eventually.. Just so I understand this correctly, the pstrut in the childWrap is taller than the child so that we avoid issues with the baseline alignment and can align the bottom of the child's glyph bounding box with the bottom of the pstrut?  And then childWrap is position vertically so that child appears where we want it to.. In what situations is the depthStrut necessary?  I tried removing it from some fraction layouts and didn't notice a difference.. I didn't realize that depth couldn't be negative.  Why is this?. I see, this got moved down to line 591.. Why don't we have to be as specific as we were being before with these rules?. Is the 0.05em b/c we want the impact of the font size on the base line of elements with this class to be negligible?. Reading https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout it says that table-layout: fixed bases the width of the table on the first row.  It looks like the first row is always contains the content for the vlist.  Is that right?. Apparently table-layout: fixed renders faster.  I'm curious if the decision to use this was motivated by perf concerns or something else.. @kohler I assume we want both the mode and itm.query in the query string here, is that right?. We probably shouldn't be calling this anymore since server.js isn't serving babel versions of URLs anymore.. I'm really stoked about this going away b/c even though we had this nice warning a fair number of people weren't seeing it.. We could do span.width = 0.781.  Also, why isn't this one divided by options.sizeMultiplier like the other ones?. Could use a template string here to avoid all the +s.. Looking at the definition of innerRootDepth, shouldn't this be 0.6 * (body.height - body.depth)?. bug fix?. Cool. I tried removing the second get but the screenshotter hung after starting the chrome tests after completing the firefox tests.  Not sure why since server.js doesn't serve this URL.. I switched the order in which browsers run the tests putting Chrome first and that fixed the hanging issue I was seeing.  Maybe firefox wasn't cleaning up its web driver stuff quickly enough, idk.. After reading through the code in ss-render.html I see that it doesn't make use of mode and actually the only thing that does anything with mode is takeScreenshots which determines which doctype string to prepend the ss-render.html with.  It probably doesn't need to be included in the url either by I'm going to leave it there as a cache busting mechanism.. nice comment. thanks for breaking this up. Is theta the official name for this metric in the TeXBook?. Can you change this to:\nruleWidth = rule.height;\nruleSpacing = ruleWidth;\nI misread this and thought that ruleSpacing wasn't being defined in this block.. Are the sizing classes not necessary b/c we're manually figuring setting the borderBottomWidth?. We have the omicron glyph in the our fonts so we may as well use it.. Good point.  I'll see what I can do to remove the mrow.. This should extend pretty easily to other unicode characters that are simple matches.. I added an option to remove unnecessary mrows to buildGroup.  Right now it's only used for by groupTypes.supsub.  I'll see if it can be used elsewhere (everywhere?) in a follow up PR.. Good call.  I totally messed this up.  I meant to change main.. Why would the height affect what the newOptions should be?  I would've expected:\nnewOptions = options.havingBaseStyle(delim.style). This is probably where the font scale is 1:1000 comment should go.. Consider using a template string:\nspan.innerHTML =\n    `<svg width=\"100%\" height=\"${span.height}em\">${sqrtInnerSVG[\"main\"]}</svg>`;. You could reuse sizeToMaxHeight here.. Template string?. You should also be able to use a template string here as well which should really clean things up because you won't need the +.  New lines within the string should be fine.. I don't think it makes sense to list these files if the paths are inline now.  Could you move the U+221A and the font name up to sqrtInnerSVG in delimiter.js?. What is this for?. nit: this comment should go above line 1108 to match the position of the other comments and remove \"Actually\". Escaping isn't necessary in template strings.  This could be:\nmain: `<svg viewBox='0 0 400000 1000' preserveAspectRatio='xMinYMinslice'>\n...\n</svg>`\nnit: we don't put a space before the colon in the rest of the code.. I was thinking that defineFunction would be the only shared function, but I see that we also have ordargument and we may have other helpers in the future so keeping these functions in function.js and exporting each of them makes sense.. I agree.  I'll switch to using an object as an arg.  Using flow for type checking later will be a low cost way to ensure that we're getting the args we need.. I'm hoping we can do these checks at compile time using flow.. Where did this kern on top of the horizontal rule go?. We're using traverseSequence to determine delim.type, but if it's doing the wrong thing (at least for image surds) then maybe delim.type is wrong in some cases.  Maybe we should determine whether it's small, large, or stacked using this technique as well.. Maybe this could be Math.max(0, utils.deflt(options.maxSize, Infinity)).  I'm not sure if anything bad will happen from having a negative maxSize, but it doesn't make sense so we may as well guard against it.. If options.maxSize is clamped between 0 and Infinity, this could become:\nreturn scaleSize > options.maxSize ? options.maxSize : scaledSize;. The width, at least for KaTeX_Main-Regular, is 0.250em.  Thankfully it appears that this value is the same, at least for the fonts I checked which were KaTeX_Main-Bold and KaTeX_SansSerif-Regular.. It's probably worth leaving this code in here with a TODO describe what's necessary to get the accents lining up on Chrome that way other contributors can build on top of the foundation you started here.. I hadn't noticed the difference in : position before.  Thanks for aligned this with the style that's used elsewhere.. Why doesn't this require a > at the start like many of the innerSVG values?. Why is this necessary?. Why not width='50%'?. I couldn't find the definition for the svg-align class.  Is this still needed?. Sorry... katex.less was collapsed and I didn't click to expand it.. Nice tests.  I like how these call out differences in behavior between math mode and text mode.. Not necessary for this PR, but it might be good to have some tests that verify things about multiple expansions involving arguments. . I'm glad you were able to simplify this. . This could be 0.525em since the advance is 525 in font units.. This is unfortunate.  One thing we might look at doing in the future is add a blank space character to the font so that we don't have to do this.  That should allow us to use buildExpression like groupTypes.text does.. I'm curious why a non-breaking space vs. a normal space.. I forgot for a second that negative indices to slice behave like negative indices in python.. This could error message could be more precise.  In the case of arg.length < 2 the error could be:\n`\\\\verb missing matching delimiter '${arg.charAt(0)}'`\nand in the case of arg.charAt(0) !== arg.slice(-1) it could be:\n`'${arg.slice(-1)}' doesn't match initial delimiter '${arg.charAt(0)}'`. Maybe this should be:\nconst tryCombineTextNodes = function(nodes) {\nIt's possible that we might also get passed a documentFragment so we should probably add a tryCombine method on that class as well just in case.. Is there a way to test the exception being throw in Parser.js?. For future diffs, this could be written as:\n`Can't use function '${func}' in math mode`,. Thanks for enforcing this and writing a test to verify enforcement.. It could almost be used for those but those accents are centered horizontally over their contents which complicates matters.. The cloning isn't necessary, but it can avoid hard to track down issues if they arise.  I think names: array<string> would be good.  Good idea moving names = [names] to the wrapper.. The main reason for having defineFunction in its own file is that nothing in this uses it directly, I didn't want to go changing the calls to defineFunction in this file.  Definitely a little confusing.  I'll add some comments including guidance for where to put new functions.. I find the term unexpanded token a little confusing, because it's possible that future gets called sometime after expandOnce gets called in which case there may be tokens on the stack that were the result of expanding a token.  Maybe stating this in the following way:\nReturns the topmost token on the stack, without expanding it.. This comment could be a bit clearer, maybe:\n```\nExpand the next token only once if possible.\nIf the token is expanded, the resulting tokens will be push\non to the stack in reverse order and will be return in as an\narray, also in reverse order.\nIf not, the next token will be return without removing it from\nthe stack.\nAs a result, as long as there are tokens on the stack, the next \ntoken is at the top of the stack.\nFeel free to wordsmith this more.. `macro` => `isMacro` to more clearly indicate that it's a boolean.. I see.  We could have a separate array of pre-expanded macros for caching purposes.  We'd only cache the expansion if the source of the macro was a string and not a function.  If you have concerns about this suggestion it could be left as a TODO.  This comment though should probably be removed.. If `expansion` is a function then it must always return a `string` with valid `TeX` code which can contain argument placeholders, is that correct?. This is a little weird to pop `topToken` at the start just to push it back on.  I can't think of demonstrably better way to do this though.. How does it ignore initial spaces if it calls `expandOnce` right away which only ignores trailing spaces?. I'm not sure what `a null return value couldn't get implemented as a function` means.  Could you give an example?. Once we get flow in place we'll be able to type this as:\nfunction defineMacro(name: string, body: string | () => string) {\n``. There's a secondcurrentColoris this SVG snippet that can also be removed.. Even though this change doesn't save much after minification and gzip compression, it's good to de-duplicate strings so that if we have to modify the path there's only one place to modify it.. @ronkok I've removed the secondfill='currentcolor'` and updated your branch.. nice!. > Or is the point that any new stuff should go into its own .js file, not this one, and directly import defineFunction.js?\nThat's the goal.. Why is the full path necessary?. nice. I see, it's used in contrib/copy-tex/Makefile..  Cool!. Maybe: \"The rendered HTML content on the page remains unchanged.\". katexReplaceWithTex doesn't need to go on window.  In fact this whole file could be wrapped in an IIFE to avoid polluting the global namespace.. Stretchy accents use body instead of base.  Probably best to make them use the same thing.  I have a slight preference for body because base makes me think of exponents, but either would be fine.. Are these separate commands or would it make sense to use defineMacro to define \\thickspace in terms of \\;?. I feel like there might be an easier way to center things.  I'll check out the branch and experiment.. Why change all \\laps in this file to \\mathlaps?. We should probably also verify the changed behavior of llap et al.. I'd like to avoid including CSS specifics at this level, maybe this could be called alignment. . Thanks for your attention to detail with this. . I see, the tb optional param is used to \"smash\" the top and/or the bottom of the group.. These tests could be moved into functions.js so that we don't have repeat the here and in buildMathML.js.. nit: the comment uses bt but everywhere else it's tb. smashHeight: /t/.test(tbArg),\nsmashDepth: /b/.test(tbArg),. Do we care if there are other values in tbArg?. You're going to want to add ids to each node automatically eventually though.  I wonder if provide some sort of callback that is passed each parse tree node and its associated HTML tree node might be better.  The callback would be called whenever a method on groupTypes in buildHTML.js returns.. I never got around to experimenting.  This does the trick and anything else would be marginally smaller so I'm going to merge this as is.. Should this be @return {Array<ParseNode>}?  That's what handleInfixNodes returns.. This should really be specified as a class since that's how it's being used.  The fact that result can sometimes be a string and sometimes a ParseNode makes things hard to reason about.  No need to do anything about it in this PR though.. It's probably worth noting that when it is a string, it should be a function name defined by defineFunction, e.g. \"\\\\frac\".. This doesn't work for IE10.  Please revert.. $FlowFixMe. $FlowFixMe. So if we return null the parser would think that it's an object an convert it to a ParseNode.  I wonder when would we ever want to write a function that returns a null?. Calling withFont with a font makes more sense.. :+1:. Since we're calling these fonts now, should probably rename this to textFunctionFonts.. right... I forgot we started babelifying the contrib folder.. The ParsedExpansion is for cached expansions I take it.. Thanks for keeping this minimal.. Nice!. Nice!. Now that we've given this thing a name, ParsedExpansion, it might make sense to change it to be\n{tokens: Token[], numArgs: number}\nthen\nconst {expansion: exp, numArgs} = this._getExpansion(name);\nwill become\nconst {tokens, numArgs} = this._getExpansion(name);\nwhich is less awkward.. Maybe definition would be a more apt variable name.  Then maybe MacroExpansion could be renamed to MacroDefinition.  I think this will better help separate the concepts of expanding macro definitions from the definitions themselves.  Also, renaming ParsedExpansion should probably be renamed to MacroExpansion as the parser hasn't done anything with the tokens yet.\nTL;DR:\nlookup -> definition\nMacroExpansion -> MacroDefinition\nParsedExpansion -> MacroExpansion. Can run make build and check what's being output for the spread operator.  Also, if we go with this, the TODO will no longer be necessary.. It's too bad flow doesn't do this on its own.. I wonder if uglyifyjs would strip this out automatically?  It's probably easier to quiet flow's warning about with a well-placed $FlowFixMe comment than it is to determine if this is getting into the output or not.. It's too bad there's no good place to put the $FlowFixMe.  But since it doesn't make a difference when gzipped let's leave it in.  gzip is magic.. I don't think we should use $Shape.  This will require all props on OptionData to be marked as optional, e.g. color?: string which is okay imo b/c in a couple of places we're missing some existence checks.. All of the props on SettingsOptions should be optional as well.. These should all be optional as well.. Is this necessary?. These only need the first ?.  The second ? means that they can be assigned the value null, but I don't think we do that anywhere.. I think this can still be getColor(): string.. Can you remove $Shape here as well?  I think it may be hiding some null checking we should be doing.. Only the first ? should be necessary here too.. width was here for experimental reasons.  By default fontMetricsData.js doesn't include the width of the characters, but if you do make extended_metrics you can build a copy that does.. nice. hmm... this looks like a default, it should probably go inside the Options constructor.. I this is changed to color: string | void then the color prop in OptionsData could be style?: string like the other optional properties.  This would also match existing code in https://github.com/Khan/KaTeX/blob/588f5a1ee64b1c4ebde18b1af139ad1e6d00ce63/src/ParseNode.js#L19-L21 for optional properties on classes.. same. @edemaine how useful are horizontal metrics after the introduction of @ronkok's SVG code?. This could be maxSize: number since we always set maxSize to a number in the constructor.. The $Shape is no longer necessary.. I think combining all of the arguments after children into a single arg called attributes would simplify things greatly.  This should simplify toNode and toMarkup b/c we can iterate through attributes instead requiring all the if statements.  One slight downside is that now the caller will have to provide viewBox as a single value, but I think that's a small price to pay.. The || \"\" isn't necessary.. This could be simplified to (not critical though):\nconstructor(x1 = 0, y1 = 0, x2 = 0, y2 = 0, strokeWidth = 0) {\n    Object.assign({x1, y1, x2, y2, strokeWidth});\n}. Why has the minWidth changed for some of these?  Previously it was 0.5 for overrightarrow.. Interesting way to grab all of these different values.. I like that these are all paths.. Are you considering exporting other types of geometry at some point in the future?. Why do some paths start with M400000 while others are a little shy of that value?. Instead of indexing into imgData for each value, using destructuring would help the reader know which value was which without having to scroll up to the definition of katexIamgeData, e.g.\nconst [paths, minWidth, height, align] = katexImagesData[label];. Where does the 54 come from?. Why the change in the shifts?. Awesome!  Are there situations in which the different minWidth will have an impact on the rendering?. In this case I probably wouldn't bother with a single attributes arg even though it deviates from the other constructors.  The reason is that x1, y1, x2, y2 is a well-known ordering of args and you're never going to skip one... it's probably all or none.. I see... so some of these have the non-stretchy part on the right side and then stretchy line extends out to the left?. I opened up KaTeX-Size4 in opentype.js to look at the coordinates of the surd's outline, but I couldn't find any coordinates near the bottom of the surd where subtracting would give 54.\n\n. > Now the code in stretchy.js is so array-driven, I found it easier to make things more consistent. Now, even extensible arrows return .height with their overall height value and return .depth as zero.\nCould you add a comment describing this in stretchy.js?. Sorry, my bad.  I'm confounding SettingOptions with the properties on the Settings class.. That's too bad about the duplication.  Let's leave this as is for now.. I was thinking all the props could be optional in OptionsData, but I guess that's the purpose of $Shape so we may as well use it.  I was thinking that by having all props in OptionsData look like prop?: T that would communicate to people that each prop was optional, but it should be pretty obvious by the existing usage.. Let's use $Shape for now and if people find it confusing we can always change it later.. All b/c we use \"\\\\text\": undefined in textFunctionFonts.  That's something we should maybe look at changing in the future.. Ideally I'd like function args to formatted as so it's easier to read the args:\nfunction foo(\n   arg0: T0,\n   arg1: T1,\n   ...\n   argn: Tn,\n) {\n   console.log('bar');\n   ...\n}\nUnfortunately, I don't believe our babel setup supports trailing commas in function defintions and calls so let's leave this for now.  I opened an issue for this: https://github.com/Khan/KaTeX/issues/861.. Nice!. I just noticed this was mixed.  Hopefully we'll be able to make this more precise in the future.. Thanks for fixing this.  I guess we aren't using flow in the file that actually uses argTypes otherwise this would've failed.. nit: 4 space tab.. When do we return a result with type number[][]?. This looks suspiciously similar to how functions are typed.  We might be able to dedupe in future.. i nside => inside. ArrayEnvNode or ArrayNode would be better as this type is specific to arrays.  For consistency ArrayColSpec could be AlignNode and we could even introduce a SeparateNode type.. Why the change?. Thank you.. We updated defineFucntion to only take an array of strings.  We should probably do the same here.. defineFunction doesn't support taking a number for props, we should do the same here too.. Gotcha.  This is fine.  We can re-evaluate lint rules separately.. I see, it's documented in the comment above.\n\nWe need to refactor this at some point, but I'd rather do it right before or during ParseNode being ported.\n\nSounds good.. I don't see a need to differentiate parse nodes from environment nodes as they end up being part of the same tree at the end of the day.  I think eventually we'll types for each of the different nodes the parser can generate and eventually ParseNode will become:\nParseNode = FracNode | ExpNode | ... | ArrayNode | AlignNode | ...\nEnvironments are just one type of thing that the parser parses as it does its work, it just happens that the environment parsing code is in a separate file.. I was thinking that eventually we'd have a union type to specify the different types in the tree.  It's possible that ParseNode wraps these data nodes and adds additional data like error reporting.  I have spent any time thinking trough the details.  The high-level goal is for nodes with in the parse tree to be more regular and for all them to be statically typed.. This will change the spacing between atoms at sizing group boundaries.  This is because the spacing styles are based on sibling relationships.  If the start of a sizing group is one type of atom and the end is another type of atom we can't apply the existing classes and have the spacing on both ends match.  I think it makes sense to give sizing groups an element in the HTML.  There might be nodes within the LaTeX parse tree which don't have nodes in the HTML.  I think this is okay, but you'll need ways to get this information, e.g. functions to get previous/next sizing command and possible build selections of other nodes based on the location of sizing commands.. All changes of makeFragment to makeSpan will likely have similar results on the spacing of atoms.. I would probably do:\nlet counter = 1;\nconst putId = (treeNode, htmlNode) => {\n    const id = count++;\n    treeNode.id = id;\n    if (htmlNode instanceof BaseNode) {\n         htmlNode.properties['katex-id'] = id;\n    }\n}\nThis assumes that htmlNode is a HAST node, see https://github.com/syntax-tree/hast and https://github.com/Khan/KaTeX/issues/800.  This allows us to avoid having to create defaultPostProcessor in buildHTML.js which splits up the logic of what we're trying to do across multiple files.. This is really confusing.  Too many things are node here.  In this case the node being passed in a DOM node, right?. I think ideally, if we using something like HAST to build a representation of the HTML we want using JS objects, we'd probably want to use the visitor pattern to build the actually DOM nodes.  . Using T meant that the output of handler and the group arg for each of the builders was required to be the same type.  Replacing T with * means that flow will no longer enforce that requirement.  . I like the use of exact object types.. defineFunction... _ defineFunction is only used as a temporary when it's imported into functions.js.. Thanks for calling this out here.  I think we should try to move the handlers for implicit group functions into the function definition.  I opened #868 for this purpose.. This should be functions since it's a public.. here => there. Thanks for defining these new functions using the new defineFunction.  Let me know if you have any ideas of how to make this new structure better.. nit: extra ;. This comment seems out of place.. Is this is to get around the fact that mathmlBuilder only returns a single node?  I wonder if we could have it return a document fragment containing MathML nodes?. I see now.  I guess that was wishful thinking on my part.. functions.js just exports this same dictionary again and makes it public.  Parser.js requires this dictionary.. I tried the following which seems to work:\n```\n        // in operators.js#mathmlBuilder\n        const identifier = new mathMLTree.MathNode(\"mi\", output);\n        identifier.setAttribute(\"mathvariant\", \"normal\");\n    const operator = new mathMLTree.MathNode(\"mo\",\n        [mml.makeText(\"&ApplyFunction;\", \"text\")]);\n\n    return new documentFragment([identifier, operator]);\n\nI also simplified the `\\operatorname` macro to be simply `\\opNameMain{#1}` but this could probably be simplified further.. The comment is good, but it doesn't prevent people from access the `functions` map.  In the past we haven't really had issues with people accessing `functions`, but if you're concerned that people might do so in the future then maybe we should take additional steps.  One possibility might be to have functions.js export a `getFunction` method instead of `functions` itself.. It's my fault for hitting \"accept\" early.. Can you add a snapshot test for this?. @marcianx here's what I did for the wrapper around `_environments`.. I tightened up some of these types by updating them to use exact object types.. Checks for missing or out-of-date dependencies.  If things need fixing it tells the user to run `npm install`.. `prepublish` is apparently deprecated in npm@5.  Also, running `npm install` was triggering `prepublish` to run.  Hopefully this will still work with our release script.. This is more robust to new subfolders being added.. This was needed b/c the docker folders can contain their own `node_modules`.. `nom test` doesn't take very long to run so may as well run it before building.. Looking at the method `attributesToNode(node)` on the class `baseNode` I assumed that the `node` being passed in was an instance of `baseNode`.  Renaming the parameter to `domNode` would've helped.  Also, `attributesToNode` should probably be a helper function.. `npm install` and `npm start` is a more common pattern with js based projects.. Good point.  I'll make them into aliases.. @spontaliku-softaria you may want to hold off on revisions to this PR.  I think we should do #800 first.. The comments are fine.  I just don't think I'll be able to merge this right away and the changes proposed in #800 will require significant rework of this PR anyways.. I should include the input string in the title so that it's easy to see what input produce the parse tree below.\n. Good idea.  I'll look into this evening.. The parens around the ternaries aren't necessary.. This could be `/box/.test(label)`.. I have a slight preference for `backgroundColor` mainly b/c I type it a lot so it easier to type.. Why do we use `options` for the color whereas in `buildHTML.js` we use `borderColor` and `bkgrndColor` directly from the group?. Why was this added?. This is kind of weird.  I hope that in the future that `sizing` nodes could maybe look like:\nParseNode: {\n   mode: \"math\",\n   type: \"sizing\",\n   size: 5,\n   body: Array [ ... ],\n}\n. remove. Add a toggle for this.. Do the same thing in buildMathML.js.. This is maybe a little hacky, but some commands need to know what was the previous atom in the current group.. I decided to implement limits (and nolimits) so that they could be used elsewhere.  According to [latex.ltx](https://www.tug.org/svn/texlive/trunk/Master/texmf-dist/tex/latex/base/latex.ltx?view=co) it looks `\\mathop` defaults to enabling limits.  Maybe we should do the same.. Does it make sense to raise a `ParseError` inside a MathML builder?  It's not really a parser error, it's just something we don't know how to deal with.. Done.. [latex.ltx](https://www.tug.org/svn/texlive/trunk/Master/texmf-dist/tex/latex/base/latex.ltx?view=co) seems to indicate that `\\mathop` has limits defined by default.  Perhaps that's something we should consider adopting.. I think this should actually be `munder`.. Actually this is right b/c the tests in mathml-spec.js don't use display mode by default.. Now we're getting `munder` for limits with subscripts only, but we have to be in display mode for this.. Lol.  I missed this comment in the previous review.. It'd be good to compute the `width` attribute in terms of the `viewBox`'s width (or vice versa) so that they stay in sync.. Why is `minWidth` different from `surdWidth`?. This fixes the issue with the tall `\\sqrt` being the wrong size when sizing functions are involved?. Why does this have to be `400em` as opposed to `100%`?. That's explains why I missed in previous reviews.  \ud83d\ude05 . This is clearer.  Thank you.. The comment is good enough for now.. Copied to `const htmlBuilder = function(group, options) { ...` in array.js.. The calls to `defineEnvironment` look a little different from how they looked in environments.js.  All of the existing parameters have been converted props in a single object argument.  This was done so it's easier to know which param is which.. These are the two \"new\" parameters.. Everything except for `defineEnvironment` and the type definitions have been copied over to `array.js` while the remaining code has gone to `defineEnvironment.js`.. The body of `defineEnvironment` has remained largely the same.  The new code adds registers the `htmlBuilder` and `mathmlBuilder` args for the given `type`.  This was previously being done in `buildHTML.js` and `buildMathML.js` respectively.. The motivation was to limit access.  The plan was to do the same for `_functions` and `_symbols`.  Not sure how necessary it is so I'm going to let this simmer for a while.. It was originally `while(true)`, but a previous commit changed it after removing a top level eslint-disable.  I can add it back in with a eslint-disable-line.. That's a good question.  `defineFunction` requires `numArgs` on `props` even if it's `0`.  I'm not sure how useful that is, but I'd rather be consistent so I'll make it mandatory here too.. Good catch.  We may want to add those at some point in the future, but if they're not being used no reason to include them now.. This is the error that's being thrown in `functions.js`.  The error thrown in `Parser.js` has the text `\"\\\\verb failure to parse\"`.. From your comment above it sounds like it should never happen though, so I guess we can't test for it.. I thought the first and last characters of the `arg` were the delimiter so it seemed like a trivial change to add those characters to the error message.  If this case should never happen it's probably more important to say in the error that this is a bug and that it should be reported as such.. I forgot about that comment.  I think the difference here is that `\\verb` is kind of like `\\text` and there we use real spaces.  I think what you have here is fine.. Should specify what units the cap is in.. The help message should describe what format the color must be in and give an example.. If you have time, would you be able switch the option parsing code to use `nomnom`.  We use this in a couple of other places in the project, e.g. https://github.com/Khan/KaTeX/blob/master/dockers/Screenshotter/screenshotter.js.. It would be good to include an trailing `\\n` in the output.. I like this idea.  It should be pretty easy to do too.. I feel like by storing `isFunction` on `ParseFuncOrArgument` it leads to unnecessary wrapping and unwrapping.  What if we create a function that given a `ParseNode` would tell us if it was a function?  With that, we should be able to get rid of `ParseFuncOrArgument` and just use `ParseNode` everywhere.  This is maybe something to consider for a future PR.. Good idea separate this from the `parseFunction` which might return `null`.. There was recent discussion in #20 about this.  If we allow comments without the newline then some KaTeX strings will break when copied over to a LaTeX document.. TODO: remove `\\DOTSB`. Hmm... maybe I saw the `\\DOTSB` when I was inspecting commands using pidflatex as described in https://github.com/Khan/KaTeX/wiki/Examining-TeX.. Thanks for switching to nomnom.  That's too bad about it's deprecation.  I created #900 to switch from nomnom to commander.js everywhere.  It's not super pressing b/c nomnom does the job.. Whenever we upgrade the option parser it would be nice if we could find one which supported short and long help strings and nicely formatted the longs ones like descriptions underneath the short one and properly aligned them.  Maybe commander.js already does, but it doesn't show in the given examples.. Is setting `modules: false` to reduce overhead from the default `\"commons\"` setting?. It's be nice to get away without renaming these files as people may be relying on the existing script name.. Would be it be possible to build this file when the server starts instead of checking it into source control?. I would be nice to have symmetry between how `ParsedFunc`, `ParsedArg`, and `ParsedDollar` get created.. `token` can be mandatory for `ParsedDollar`.. `token` can be mandatory for `ParsedFunc`.. Is the reason we don't pass a token sometimes is that an argument might span multiple tokens?. Is the plan to turn this into flow types at a later date?. Nice!. Why the `+`?. nice. Apparently this impacted performance in the past, but modern browsers seem to be unaffected.. Minor style nit: using `if/else if/else` makes it easier to see that only one of these blocks will be executed.. Let's leave it for now.. I think that's fine for now.  Eventually, we'll want to pass the token when constructing a `ParseNode` from the arg's `result`.  It may make sense for this token to include text that spans from the start of the first token to the end of the last token, but that can be in a future PR.. nice cleanup. I can set up a custom formatter for the snapshots to always put `\"type\"` first.. I thinking I was being overly picky in that previous PR, sorry about that.  We definitely want to keep the size down, but I doubt this will have much of an impact especially after uglify.  As we continue to make things more explicit in Parser.js I'm sure the code size will fluctuate up and down a bit.  In the other diff you dedupe `parseArguments` so we saved some bytes so it's all good.  ^_^. I'll add a comment.  `handleSupSubscript` should always be parsing non-optional groups afaict because `x^[2]` isn't valid (or rather it's valid it's treated as `x^{[}2]`).. I'm not sure why this was `null`.. It feels nice to have symmetry the `? \"[\" : \"{\"` check above.. Good question. I was fixing only the issue, but I'm sure there are places where KA also uses `\\color` inside of optional groups (apparently LaTeX supports this too).  LaTeX also supports style functions within optional blocks too. . moved to `htmlBuilder` in `genfrac.js`.. moved to `htmlBuilder` in `lap.js`.. moved to `htmlBuilder` in `smash.js`.. moved to `htmlBuilder` in `op.js`.. moved to `htmlBuilder` in `mod.js`.. moved to `htmlBuilder` in `katex.js`.. moved to `mathmlBuilder` in `genfrac.js`.. move to `mathmlBuilder` in `op.js`.. moved to `mathmlBuilder` in `mod.js`.. moved to `mathmlBuilder` in `katex.js`. moved to `mathmlBuilder` in `lap.js`.. moved to `mathmlBuilder` in `smash.js`.. changed from `import \"./functions/operators\";` on line 368 before the diff.. moved to `genfrac.js` and refactored to use the new `defineFunction`.. moved to `op.js` and refactored to use the new `defineFunction` (second call).. moved to `op.js` and refactored to use the new `defineFunction` (first call).. moved to `mod.js` and refactored to use the new `defineFunction` (second call).. moved to `mod.js` and refactored to use the new `defineFunction` (first call).. moved to `katex.js` and refactored to use the new `defineFunction`.. moved to `lap.js` and refactored to use the new `defineFunction`.. moved to `smash.js` and refactored to use the new `defineFunction`.. It should be possible to mix `import` syntax with `module.exports`.. @rrandallcainc I double checked this by reverting this line, running `make dist`, and doing `const renderMathInElement = require(\"./dist/contrib/auto-render.js\")`.  The result was a function.  Can you change the `require` statements back to `import`s?. Please use spaces instead of tabs.. Why is 50% okay when positioning things from the right?. The extra 0.1% here and in brace-right is to overlap the center part of the brace, right?  Did certain browsers exhibit a gap without the 0.1%?. It'd be nice to make these variable names more consistent, maybe `vbWidth` and `vbHeight`.. This works b/c the SVG for each part of the brace extends out the right, in both directions, and to the left if we were looking at each pieces from left to right.. Answering my own question: it's b/c we only want a 0.1% overlap. . nice comment. Since this is the only place where `gullet.get` is called and its parameter is always the same, maybe we should get rid of the parameter.. And if there's no space between `\\\\\\\\`and `[c]` would it try to parse `[c]` as a measurement?. So these two things parse the same, but I thought control words weren't allowed inside `\\text{}`.  Why is it important that these two parse the same?. What's the current behavior?  Can you open an issue for this?. If you think `switchMode` will come in handy in the future let's keep it, but please add a comment as to why we're keeping it.. I got an error when I tried `\\text{\\KaTeX}` on the demo page so maybe it's just some control words don't work.. I think we still need `switchMode` because we store the current mode in the parse nodes and that value gets used in the builders.  Ignore my comment about adding a comment.. remove commented out code. Describing the previous behavior isn't necessary.. I'm curious though why the `unget` and `consume` are no longer necessary.. I'm going to merge this, but I'm curious about the choice of dpi... is it b/c Window's default 1x resolution is 96dpi?. Since it's not being used and it's easy enough to do `this.stack.push(token)`, let's get rid of this.. I see that you're following the existing code style, but you can use template strings to simplify things a bit:\nmarkup += anchor=\"${utils.escape(this.href)}\";\n. I didn't realize how much boilerplate there was.  We may want to add a base class for these DOM classes at some point in the future.  No action required for this PR.. Since we're adding `href` to attributes in the constructor shouldn't the loop below that adds all other attributes also add this one?. We also support `for-of` loops which might be simpler:\nfor (const child of this.children) {\n    markup += child.toMarkup();\n}\n. I noticed that we're duplicating this as well as the adding of attributes.  I've created a separate issue for it: https://github.com/Khan/KaTeX/issues/932.. Thanks for using the new pattern.  Let me know if you had any issues with it.. No need to keep to short... we minify the code so it should make these even shorter.  Maybe `classes`, `first`, and `last`.. Thanks for calling this out.  It looks like `getTypeOfDomTree` can return `null` so it seems like it's possible that `fst` could be `null` and `lst` could be non-null and `cls` could end up being `null` which would break the invariant.  Maybe we should have code that checks for that case.. Super minor nit, the following formatting might better reflect the new `span` sandwich we got going on here:\nreturn new buildCommon.makeFragments([\n    new buildCommon.makeSpan([fst], [], options),\n    anchor,\n    new buildCommon.makeSpan([lst], [], options),\n]);\n. Should we maybe be using `\"text\"` for the href so that if we're in math mode and we include a URL with spaces in it, the spaces don't get eaten.. Interesting.  Hmm... I wonder if we can we can supply both `dppx` values and `dpi` values for `min-resolution` in that order.  Not sure if there's a browser out there that supports `dppx` but doesn't do the correct thing with `dpi` as described in the \"caveats\" section of the blog post.. If you rename it, please change all `this.stack.push(token)`s to use it.. Can you add a comment with a link to the issue?. It's possible that `escaper` could return `undefined`.. The return value for this could be `boolean`.. Why wrap the prop names in quotes?. Same question about the quotes.. We should probably be checking if `span` is defined below instead.  It's possible that we've messed up somewhere and the SVG path we're looking for doesn't exist.  We should probably throw on that and ask people to report it as a bug.. Why did this get moved out of the `else` block?. I tried this in the flow demo and it works without the quotes: https://flow.org/try/#0PQKgBAAgZgNg9gdzCYAoVBjOA7AzgFzCjjgC4wBvAbQICcBLbAcwF1y7GmBfMAXktRgwAD3IByYWIA0gsAE9xc6ai4BuVEA. We could start using https://github.com/gajus/eslint-plugin-flowtype#eslint-plugin-flowtype-rules-require-return-type.. That seems really weird as the `span` assignment is in both the `if` and `else` block.  I'll check out the branch and play around with it.. Good point.  I'll try to make this more general.. Good point.  I more generic error would make more sense here.. I think it's okay to do it as a separate commit.  I'll open an issue once this lands.. Are the backslashes being replaced by forward slashes?  In which environments does this happen?. Sneaky.  In this third case does the element in between the empty spans have no class on it?. This works, but I'd probably move this up to where you set `classes = null` so that we can remove an extra `if` statement.. `classes` is already `[]` from `let classes = []` so this `else` block isn't necessary.. This could be simplified to\nmarkup += class=\"${utils.escape(createClass(this.classes))}\";\n.\nmarkup += ${attr}=\"${utils.escape(this.attributes[attr])}\"\n. Thanks for adding this section.  I'm sure we'll be expand this to include other libraries/components.. What if we just return `buildCommon.makeSpan([\"hide-tail\"], [svgNode], options)` here immediately?  Then we wouldn't have to special case things below.. Shouldn't these also be wrapped in `{}` like the `import type` statements below?. It would be nice to better specific this.  Could be left as a TODO though.. nice. We probably want to do this for `makeSymbol` as well.. Cool!. yay. I'm surprised that we can't make `classes` and `children` non-optional right now.. Love it!. That's unfortunate that intersections don't work with exact types.. This should probably be defined as a type somewhere.  Also, what's the benefit of typing both the situation where there's a mix of `VListChild` and `VListElemAndShift` in the `children` array as well as the the case where `children` is all `VListChild`s.. Style nit, if a ternary is too long to fit on a single line can you format it as:\nresult = condition\n   ? truthyResult\n   : falsyResult;\nI find it makes it easier to tell that it's a ternary.. This is can happen if `firstChild.type === \"kern\"`?. `makeVList` does a lot of stuff, thanks for breaking it up a bit.. I was confused for a second until I realize that `[string]` was the key.. This doesn't need to be optional, all call sites provide this information.. In other places we provide `attributes` as `attributes: {[string]: string};` we should do the same here.  Not sure how much work is involved with that.  If it looks like a lot feel free to add a TODO and tackle it later.. Happy to see `for-of`.. Thankfully this list isn't too long.. Should the TeX code be:\n\\begin{matrix}a&b\\\\ c&d \\\\ \\end{matrix}\nto include the extra newline that's supposed to get eaten?. Thanks for fixing this... I wish our parse tree was nicer.. My bad, I didn't see that github had collapsed some of the code.  Suggestion retracted.. style nit:\n\"Too many math in a row: \" + \nexpected ${numMaths}, but got ${curMaths},\nmight be at little easier to read.  Also, the indentation is a little funky here.  Can you indent args that occur on new lines, e.g.\nthrow new ParseError(\n    \"Too many...\" +\n    expected ${numMaths}...,\n    row);\n. Ah... I was getting confused between LaTeX environments and browser environments.  Maybe reword that last sentence to be: `Some browser will replace backslashes with forward slashes.`. Cool!. I didn't realize that you could have two snapshots inside the same `it` block, cool!. Maybe call this file `kern.js` b/c `type: \"kern\"` below... or maybe `horizontal-spacing.js`.. Good call splitting this out, tbh I'm not sure how to do this, at least for our current HTML layout strategy.. What font size is being selected for the `A`?  Perhaps we could compute the `raisebox` amount based on the difference in size between the `A` and the `T`.. Does `K\\\\kern-.36em` even out the spaces around the `A`?. The tests allow single characters for the names, but reading this it sounds like only things like `\\name` are accepted.  Maybe change the last sentence to read like:\nSingle characters keys can also be included in which case the character will be redefined as the given macro (similar to TeX active characters).\n. Nice test. . Why does `\\\\@firstoftwo{#1}` need to be wrapped in `{...}`?. I would've assumed that `\\hspace*` would be aliased to `\\hspace` by doing:\ndefineMacro(\"\\hspace*\", \"\\hspace\")\nMy hope was to one day we might have a script that scrapes the source code to determine all of the commands we support.  This makes it harder.  If this is the way LaTeX defines `*` functions then let's roll with it.. If a person wrote:\ndefineMacro(\"\\hspace\", \"\\@ifstar{\\kern{#1}\\kern{#1}}\\kern{#1}\");\nwould that result in `\\hspace*` producing double the amount of kerning?. I think this line should be removed b/c we don't have that symbol in the font yet.. I understand why we're tracking `lastToken` now and why a recursive solution isn't as easy as I thought it might be.. Took me a bit to grok what's going on, but it makes sense.. How is the height (or width) set for the `ruleSpan`?. Should `.frac-line` have its `min-height` set in a similar fashion?. Thanks for refreshing my memory.  \ud83d\ude05 . @edemaine I don't have much experience with TeX macros.  I appreciate you taking the time to answer my questions.. Good point about the ambiguity of the parsing.. I didn't realize that you could import a class from another module as a `type`, cool.. I guess flow would need to introduce some new operate to extend exact types.. One thing we might consider doing is to switch from `string[]` to `Array<string>` for arrays.  I've opened https://github.com/Khan/KaTeX/issues/987 to discuss it.. This feels more idiomatic.. ~~I think this is the \"strikethrough\" case.~~ It's the reverse diagonal.. This probably could be simplified by moving not reusing the same `attributes` object for both diagonals.  Maybe\nif (/^x?cancel$/.test(label)) {\n    lines.push(new domTree.lineNode({\n        x1: 0,\n        y1: 0,\n        x2: \"100%\",\n        y2: \"100%\",\n    });\n}\nif (/^[bx]cancel$/.test(label)) {\n    lines.push(new domTree.lineNode({\n        x1: 0,\n        y1: \"100%\",\n        x2: \"100%\",\n        y2: 0,\n    });\n}\n. nice!. Should the definition be wrapped in a `\\mathrel`?. After doing some checking this doesn't look to be necessary as `\\ni` is already a mathrel and the `\\not` has no effect on the atom type.. I wonder if this should maybe be `/^(fbox|color)$/`.. `string` should be enough.. Should this be `ParseNode`?. I checked the code and we want to match `colorbox` and `fcolorbox` too.. I think the top one looks the best.  In the bottom one the `A` is too cramped.. I can't tell the difference between the top logos in the two images... whichever you think is better.. Can we keep these tests but only check for `\u00c7\u00e7`?  Eventually we'll want to test for `\u0153`, `\u0152`, `\u00e6`, `\u00c6`, and `\u00df` when they get added.. I guess expanding to `\\grave A` makes sense.  Can you add a MathML fixture test?  I'm curious to see if we recombine the accent with the letter when we render to MathML.. This contains many more characters than we support.  Where do we generate an error if someone uses an unsupported combining mark?  Maybe add a test for this.. This is super cool.  I wish I would've known about this sooner.  There's no support for this in IE and Safari only got this in version 10.  We might consider using https://github.com/walling/unorm instead.. If we bailing here do we need to include the `combiningDiacriticalMarkString` with surrogate pairs in the regex in Lexer.js?. Good enough for me.. Nice clean up!. Are there any unicode glyphs that include multiple accents?  If so, we should test that this works correctly.. I didn't read the surrounding code.  `Node` is fine since that's what `applyNode` is defined on.. We've started using snapshot tests for testing MathML markup, see mathml-spec.js.  Can you add a test there instead?. You'll need to generate screenshots and include those files as well.  Let me know if you have issues running `make screenshots`.. Nice!. Where did the horizontal shifts come from?. We've been using `string[]` style in other diffs.  Can you change to that so we're consistent?. I feel like we should just pass `fontStyles` to `makeSymbol` so that the caller isn't responsible for calling `retrieveTextFontName` and concatenating classes.. I think changing `font` to `baseFont` or `fontFamily` would make it clearer that the two are necessary and work together.. nit: extra space. It's kind of hard to grok this, maybe:\nlet fontStylesName = '';\nif (fontStyles.indexOf(\"textbf\")) {\n    fontStylesName += \"Bold\";\n}\nif (fontStyles.indexOf(\"textit\")) {\n   fontStylesName += \"Italic\";\n}\nreturn fontStylesName || \"Regular\";\n``. You might want to try writing snapshot tests for new tests that verify things about the HTML markup we're producing.  See mathml-spec.js for examples.. It's kind of strange to see themathrmclass being applied to text that's inside\\textit`.  Is this necessary?. It would be good to have some tests that compare the markup produced for things that should be similar, e.g.\nI would expect\n\\textsf{\\textbf{mathrm{A}}}\nto produce the same markup as\n\\mathrml{A}\nA little bit more complicated but\n\\textsf{\\textbf{\\mathrm{\\textsf{A}}}}\nis equivalent to\n\\textsf{\\textbf{A}}\nI checked using quicklatex.com which I believe calls actual LaTeX on its backend.. According to the answer to https://tex.stackexchange.com/questions/5008/when-to-use-bold-italics-small-caps-typewriter-etc there are three axes for fonts:\n- The shape axis covers: \\textup, \\textit, \\textsc and \\textsl\n- The family axis covers: \\textrm, \\textsf, \\texttt\n- The weight axis covers: \\textbf, \\textmd\nMaybe we should change from font + fontStyles array to three props:\n- fontShape\n- fontFamily\n- fontWeight. @aterenin did docker start correctly?. @aterenin cool.  I take it npm install docker installs a client.  I should update the README.md for the Screenshot to point to link docker's download page or homepage so there's less confusion.. it(\"should render \\\\boldsymbol{\" + contents + \"} with the correct mathvariants\", () => {\n    const tex = \"\\\\boldsymbol{\" + contents + \"}\";\n    const tree = getParsed(tex);\n    const markup = buildMathML(tree, tex, defaultOptions).toMarkup();\n    expect(markup).toMatchSnapshot();\n});\nYou'll need to run the tests once locally in order to update the katex-spec.js.snap.  Include the changes to that file in this diff and you should be good.\nThe tests work by comparing the output of future runs agains the snapshot.  The snapshot can also be regenerated.  I should add more detail to https://github.com/Khan/KaTeX/blob/master/CONTRIBUTING.md#jest-tests along with an npm script to regenerate the snapshots when things change.. It might be good to include some other symbols in this such as \\sum and \\int.. I've added a task for myself: https://github.com/Khan/KaTeX/issues/1013.. I think everything in this row should have mathvariant=\"bold-italic\" set.. Rendering the following on quicklatex.com:\n\\boldsymbol{Ax2k\\omega\\Omega\\imath+} \\\\\nAx2k\\omega\\Omega\\imath+\nresults in:\n\n. I looked at the font file for KaTeX_MainBold and realized that there are more symbols in it that we should show in bold, e.g. =, <, >, etc.  We could use lookupSymbol to determine whether we have a bold variant or not, that way we can include all of them without the extra table.. nit: Main-BoldItalic -> Main-Bold. This ends up mapping \\u00b7 to \\cdotp which maps to \\u22c5.  But they look the same so that's alright... really the only difference is the bin/punct difference.. It's hard to tell that this one is \\u00B7 and the other one is \\u22C5.  Maybe used the escaped char for these two.. Can you add a warning above this function as well?. It's in Edge so my vote would be for option 2.  If people need to support IE then they can add the polyfill themselves.  We should document this requirement.. I've created #1021 to extract helper functions into test-utils.js.  I can do that this weekend and then we could rebase this with the tests in the proper suite.. We have to lex the tokens before we can test the tokens against the cjkRegex here, d'oh.. I'll have to see if I can make it printout nice snapshots like the ones from mathml-spec.js.. I thought the HTML trees rendered would be equivalent between \\textsf{\\textbf{$\\mathrm{A}$}} and \\mathrm{A}, but they're not b/c the first one has extra spans.  It's just that the visual output looks the same... unfortunately that's hard to test.  :(. I totally get why you reverted these.  Thanks for trying.  I'll try to make the snapshots better in the future.  The tests you have are good for now.. Looks like this copy/pasted from https://github.com/Khan/MathJax-dev/blob/master/fonts/OTF/TeX/makeFF#L1400-L1405 which is right on.. What was happening if build was still around?. I think it's fine leaving this as is, but we might want to change this to fontFamily: string in a follow up diff to match fontWeight and fontShape.  Could you add a TODO?. nice comment. The reason for using mathrm, mathsf, etc. here is that that's what's used in fontMap in buildCommon.  Not quite sure how this was working without updating fontMap, it'd be good to figure that out.  Maybe we can get rid of it.  We probably should separate the font family from whether we're in math mode or text mode.  Maybe we should change this to:\n\"\\\\text\": undefined, \"\\\\textrm\": \"rm\", \"\\\\textsf\": \"sf\", ...\nSame thing for font weights and font shapes as we have both \\\\textbf and \\\\mathbf as well as \\\\textit and \\\\mathit commands.\nWe'll also need to update fontMap if it's still needed.\n. Cool.  I didn't realize that the math font commands behaved differently from the text commands.  Thanks for the explanation.. Nice cleanup, but I think this may actually cause the bundle size to increase quite a bit b/c it requires a polyfill for the string iterator which I believe uses .codePointAt() which also ends up be polyfilled.  Can you generate a build and see how much the bundle size has increased?. The code that it generates is pretty awful.  We should experiment with loose mode for the for-of plugin for babel sometime, see https://babeljs.io/docs/plugins/transform-es2015-for-of.  Interestingly, when iterating over an array literal it will output a basic for loop.  Maybe we could do for (const letter of \"abc...\".split()) { ... } to force this optimization.. I wasn't expecting that.  Awesome!. right, b/c it still has to call charCodeAt... yeah, let's go back to regular for loops. . newMode: Mode. This had to be moved so that the gullet is in the right mode before expansion, cool!. Excellent comment!. nice change. It'll be nice when we can guarantee this with flow.. I guess this is why we have to pass in the mode instead of calling switchMode outside of parseGroup.. How much work is involved in this?. good catch. Great test suite!. What does this currently result in?. nit: only for space spaces before the //. I don't think the parens are necessary here.  Also, flow can do type inference so you should be able to get away with:\nconst svgData = {\n   vec: [\"vec\", 0.471, 0.471],\n};\nAnd flow will complain about things like: svgData.vec[1].length but will be fine with svgData.vec[0].length.. We can totally leave it in.  It gets compiled away anyways.. Should this be fills the middle fifth of the span.?. It might be good to further elaborate on the comment by stating that the top/bottom padding is 2 spans in height which corresponds to the 2 * ruleWidth we're adding to the shift.. Shouldn't there be a kern that's 3 * line.height - 2 * ruleWidth or is the change so slight that it's not worth bothering about?. Are these elem and kern children overlapping somehow?. Nice. Were the vertical separators disappearing at times?  Won't this change to the styling affect the horizontal layout slightly?. Cool!. I love the comments.. Do we need this in addition to the export default?. Maybe we could have Parser.js export accents instead.. This is super cool.. I see, these got moved down to unicode-spec.js.. \\\\\\\" caught me off-guard until I realized that the \" need to be escaped as well.. This change isn't really related to accents and should probably be in a separate PR.. Can you include when this tool should be run?. I wonder if we can run this as part of the build and then not even bother with committing the result.  That we don't have to worry about whether people are running it when they should or not.. Let's leave it like this for now.  I definitely like it committing it from a documentation point of view.  I don't think we have much work left to do on accents so there shouldn't be too many PRs which is affected by this.. I'm confused why the eval is necessary, can't we just console.log(accentsCode); this as is?. A better solution might be to do:\n```\nconst {accents} = require('./unicodeSymbols.js');\nconst encodedAccents = {};\nfor (const [key, value] of Object.values(accents)) {\n    const encodedEntry = {};\n    encodedAccents[encode(key)] = encodedEntry;\n    if (value.text) {\n        encodedEntry.text = encode(value.text);\n    }\n    if (value.math) {\n        encodedEntry.math = encode(value.math);\n    }\n}\n```\nThis way we have one source of truths for the accents.. > I can remove that change from here and add a second PR once this one is accepted.\nI think that makes the most sense.  Thanks. :). I find the lack of support for export default const weird as well.  You can do:\nexport { foo as default };\nI guess it's a moot point now since there no longer seems to be an export default in this file.. I tried that, but they don't actually parse the same.. There weren't any entries for \u0152 or \u0153.. The glyph inspector shows xMin, yMin, xMax, yMax to be undefined for the space character so a width and height of 0 for that character makes sense to me.  There is no black mark to measure the width or height of.\nI'm not really sure why these metrics have more decimal places then should occur when dividing an integer by 1000.. We should be able to get rid of this once we have non-combining \\vec as well.  Then all of the non-stretchy accent code should use the same path.. This is kind of hacky, but since it should disappear once we have non-combining \\vec I'm okay with this.. I don't think this will work for all fonts, but since we're going to be adding non-combining double acute accents to all fonts soon it's okay to leave this as is for now.. Also, I don't think this comment is correct as the width of a space is 250 (or thereabouts depending on the font).. I found that change the left value in the browser didn't actually change the position of the accent body.  It appears that .katex .accent>.vlist-t is the style that's actively centering accents.  Maybe we don't need the glyph width after all.. I was missed the connection between lineHeight and ruleWidth.. I'm going to put *matrix inside backticks to get around the italics issues.. Doesn't *matrix cover matrix, bmatrix, pmatrix, etc.?  I guess in this case * is overloaded... I can just write all matrix environments.. I'm going to leave the all out.. moved to utils.js. moved to utils.js. We were doing vlist.children[0].children[0].children[1].classes.push(\"svg-align\"); before, but flow didn't like it because not all children have great grand children.  This specifies classes to be added to the wrapper spans up front instead of afterwards.. I moved this up to the top so that we handle the case when parseSymbol returns a Dollar object first so that flow doesn't complain when it sees oldFontFuncs[func].. I got rid of the has/get methods from before b/c flow doesn't know how to analyze checks using those methods.. add return type. In a followup PR, I'd like to have parseFunction throw if it was going return null.. The last two args are supposed to be Tokens, but we're passing ParseNodes.  Unfortunately, there's no way to get the Tokens here.. That's correct.. Requiring return type annotations should be a separate PR as lots of existing code is missing the types.. flow was complaining about func.length lower down in this method.  Although we check if func is contained in an array of strings using utils.contains, flow still thinks that func, which is start.result, could be a ParseNode.. That might of have fixed it, but this also brings environments in line with functions.. overIndex is used below to slice the body into numerBody and denomBody.. The problem is that tryCombineChars expects CombinableDomNode[] but the call to makeSpan below expects DomChildNode[] and the two aren't compatible.  I'll update the comment to be more detailed.. This is a little weird.  We return this object which gets turned into a ParseNode which gets returned by const right = parser.parseFunction(); up above.  I should add a comment here to explain this.. ?Group would allow the return value to be null, but not false.. Sorry for the misunderstanding.  I'll change that in a followup PR.. I didn't realize we were already using js-yaml.  I ran npm install js-yaml --save-dev and it must've upgraded it.. TODO: top level docstring explaining the purpose of the file and how to run the tests.. For some reason this isn't getting applied as expected.. I can't believe flow didn't pick this up.. I was worried that our collating didn't respect script boundaries, but it does.  I tested \\text{\u79c1\u306f\u30d0\u30ca\u30ca\u3067\u3059\uc5ec\ubcf4\uc138\uc694} and it does the right thing by rendering two spans, one for CJK and one for Hangul.. The only place we actually use the width of any glyph is when we're positioning accent glyphs.  We still need some sort of height/depth for these so what you've done here I think is okay for now.. So many different scripts... cool!. Maybe change these to:\ncjk: [\n    [0x3000, 0x30FF],\n    [0x4E00, 0x9FAF],\n    [0xFF00, 0xFF60],\n],\nbrahmic: [ \n    [0x0900, 0x109F],\n],. It simplifies the logic in scriptFromCodepoint and makes it more obvious what's going on when there are multiple ranges.. I think it's fine.  Although perf is important we aren't measuring it yet.  Once we start measuring it, and if we notice a drop in perf, then we can start optimizing things.  If you have time maybe have a look at https://github.com/Khan/KaTeX/pull/1054.. Should probably add this to your global gitignore. Thanks for adding tests.. I see, we fall back to the metrics for 'M' for any code point.  Good enough for now.. wow. hopefully these tests don't take that long to run.. I had a look and unicode-spec.js take 7s vs 9s for katex-spec.js so I think we're okay.. We wanted to avoid a collision with other services that are usually running in the normal dev environment at Khan Academy.. Good catch.. Thanks for catching this.  I guess nobody's been using this as a standalone script.. This just copies the files into the fonts folder?. Using comments with flow to avoid having to transpile?. The Makefile used --mangle --beautify ascii_only=true,beautify=false.  Does UglifyJsPlugin support the same options?. Cool. I've never handled fonts like this before.  If we didn't do this we'd need a separate way to serve font files when using the dev server correct?. What's cssnano?. I assume you left of the library property for this and mathtex-script-type since we weren't exporting the right thing in the browserify config which implies nobody was using it.  Is that correct?. I have a preference for avoiding reduce.  Maybe we could do:\nmodule.exports = [\n    ...targets.map(target => createConfig(target, false, false)),\n    ...targets.map(target => createConfig(target, false, true)),\n];\nIt isn't necessary to to interleave the configs is it?. It might also be good to have comments here to remind people what the booleans are for.. ~I wonder if we should use --watch for start to maintain the same behavior?  The current server supports hot reloading (except for the CSS which was kind of annoying).~. Importing katex.less is necessary so that we can build a .css file from it based on the katex entry point, right?. This is so that the build file will be commonjs?. Doesn't webpack create the directories it needs if they don't exist?. I don't if we should just do rm -rf build?. Thanks for updating the docs.. Don't we still need katex.css?. Why no .css files?. Sorry, webpack-dev-server does hot reloading, everything is fine.. cool. It's a little weird to have a mix of spaces and tabs for indents, but I'm not too concerned about that for this file.. Should also remove \u00c6.. Nice!. Cool.  Thanks for the explanation.. Won't this result in the bundle that's built for auto-render.js also containing all of KaTeX?. Same concern as in auto-render.js.. Oh wow.  That's super cool!. Why was this reverted?. I think TODO makes the most sense in a separate PR since font changes are involved.. Should grab the width metric for this character from fontMetricsData.js.. I'm happy how this became a lot simpler.. I wish that delimsizing.js didn't have to know about this.  I was thinking about moving space inserting to be a post-processing step on the HTML tree, but then we don't have access to sizing/styling data so I think we'll just have to live with this.. I think having the whole config in a single file and using environment variables to control things might be nice.  I'm going land this as is though and any additional work could happen in a followup PR.. Use Mode from types.js.. I was just reading a blogpost today about little known JS features today and labels was one of the things in the blogpost.. What's the error?. Interesting idea.  This could also be used for defining a custom parser for \\ce from the mhchem package.. Maybe defineGroupParser can be used for color, size, url, and even original.. I would've expected all of the elements to be wrapped in a single span with the given class applied.  This applies the class to each element.  Is that what MathJax does?. The behavior of the MathML builder is quite different from the HTML builder.  They should probably have similar semantics, e.g. apply the class to each individual element or wrapping all of the in a parent element.. It's too bad there aren't any existing flow type definitions for webpack.. So if any modules from the katex chunk also appear in any other chunk (e.g. the contrib/html) remove them from the other chunk.. I would like to make the parse tree better, eventually.  For now though, I'm just trying to break up the monoliths that are functions.js, buildHTML.js, and buildMathML.js.. Good idea.  I'll add a TODO for that.. Good call.  Not sure why I change that.. Looking at a bit more, splitting into left and right handlers would be tricky b/c the left/right delimiters are matched and the contents in between is assigned an minner class.  Ensuring the matching and setting the correct class on the contents would probably be more difficult if they were separate handlers.. This is good feedback.  The position of the import statements was b/c I wanted to show what was being replace, but that's not a very good reason.  Eventually there should only be import statements so things will end up at the top, but right now it looks kind of funky.\nRelying on side-effects is not ideal.  I really like your suggestion of having the modules in the functions folder export objects and then this file can load those definitions.  Definitely something for a followup PR.. Good catch.. I think I'm to change this to cssStyle to differentiate from LaTeX's concept of styles.  I'll add a comment, but basically this should only be used by dynamic styles which we can't define a class for.. Good call with buildCommon.svgData['vec'][1], I'm going to do that.. Unfortunately we can't know the width of spans without knowing the metrics for every character which we don't at the moment.. Actually, I think this is okay as there's already classes which are known to be CSS classes.. Whoops, missed the one comment I actually need to address.  Fixing now. :). I'll probably add an Attributes type in a future PR. . I double checked the build output and the polyfill for this is included.  I think this will be smaller than object spread, but not sure.. I originally used em and had comments and math.  This seemed a lot simpler and maps directly to LaTeX definitions.. The spacings are different when we're in \\scriptstyle or \\scriptscriptstyle.  I'm open to suggestions of other ways to organize these alternate values.. I thought about insert spaces into this array, but inserts mess with indices and I thought the code would be cleaner copying non space groups over to a new array as the spaces were being inserted. . I'll expand on this comment.  Basically, we want to look at the relationship between non space groups to determine what spaces to insert.  This means we want to disregard explicit spaces when determining which implicit spaces to add.. See the new screenshots for Not. :). This follows the same pattern as getTypeOfDomTree.  Both of these functions need docstrings that explain that if the node is a document fragment then we return the value for the right most node in that fragment.  A document fragment is a tree so it could contain nested nodes hence the recursion.. Good catch.  ~I'm guessing that this diff breaks \\href spacing which means we should probably have a test for it.~. ~I should probably update getTypeOfDomTree to be able to get the class of the rightmost or leftmost element in the tree.~. @ylemkimon as for removing the dummy spans, it's still possible that the anchor wraps a fragment.  makeAnchor always returns a single element even when it has multiple children so I believe we still need to do this otherwise I don't see how we'd communicate there being atoms of different classes at either end of the anchor's content.. This file has been moved to KaTeX/katex-fonts.  See https://github.com/KaTeX/katex-fonts/pull/10.. Good call.. I was confused at first, but this makes sense given your comments in getTypeOfDomTree.. I ran into some issues with spans so I'm going to leave them out for now.. #1070 has been merged, but I think we should probably do what MathJax does since that's probably the only other TeX renderer which supports \\class.. I wouldn't worry about it for this PR.. It would be nice if all of these were in the \\u02c0 to \\u02cf range.. Same.. This changed b/c we switched some of the accents to be in the \"Spacing Modifier Characters\" Unicode block.  See https://en.wikipedia.org/wiki/Spacing_Modifier_Letters.. @davidflanagan would you like me to change \\text{\\H e} to \\text{\\H ee\u030b }?. Good call, I've opened an issue for this.. Good catch.. domTree.anchor yes, but as noted in your previous comment, documentFragments get flattened.. Is the check necessary?  I thought this file was only loaded on the test page.. yay!. I was wondering how the re-rendering happened.  :). Could we build separate bundles for katex.js and main.js?. main.js is pretty small so I can't see there being a huge perf impact when it comes to HMR.. Yes.  Thanks for catching this.  It's obvious that we don't have any tests for the \"tight\" situation.. Tracking in #1102.. I thought you'd be adding:\n\\textbar\n\\textbardbl\n\\textbraceleft\n\\textbraceright\n\\textdagger\n\\textdaggerdbl\n\\textdollar\n\\textellipsis\n\\textemdash\n\\textendash\n\\textgreater\n\\textless\n\\textquotedblleft\n\\textquotedblright\n\\textquoteleft\n\\textquoteright\n\\textsterling\n\\textunderscore\nwhich we already have symbols for.  Unfortunately, we don't have any fonts with with glyphs for the Euro, Rupee, or Ruble.  The Yen is already supported.  Also, defining symbols with unicode support should look like:\ndefineSymbol(math, ams, textord, \"\\u00a5\", \"\\\\yen\", true);. cool. Now that we have separate entry points we should be able to get rid of this.. This seems to be the on place where the surrounding param is used.  Do you for other situations where we'll need the first value instead of just the second?. Is it necessary to create the spans if surrounding[0] or surrounding[1] is null or undefined?  . Now this isn't included in inner/children.  Won't that affect the results of getOutermostNode?. Nice!. Nice!. Should this also reset the fontShape and fontWeight?. I would've expected options.withMathMode() to be sufficient for this case.. I'll make a separate PR to https://github.com/KaTeX/katex-fonts to lint fonts.less now that it's living in that repo.. Should it not also retain the fontFamily?  What happens in this case?\n\\textsf{\\textbf{$\\textbf{A}$}}\nIt feels like we need to:\n- store font styles separate for math and text modes\n- store which mode we're currently in. I need to double check, but I don't think it was ending up on the same element as before the change, but it didn't seem to have an impact so I removed it.  @ronkok can you think of any cases where having this class would matter?. I was thinking we'd have properties like:\nmathFont: string;\ntextFontFamily: string;\ntextFontWeight: string;\ntextFontShape: string;\nmode: \"text\" | \"math\";\nand then the API, would look something like:\n.withMathFont(font: string);\n.withTextFontFamily(family: string);\n.withTextFontWeight(weight: string);\n.withTextFontShape(shape: string);. I forgot about \\rm \\it, but I think we could modify the suggested API in the following way:\n.withTextFontFamily(family: string, isOldCommand: boolean = false);\n.withTextFontWeight(weight: string, isOldCommand: boolean = false);\n.withTextFontShape(shape: string, isOldCommand: boolean = false);\nIf isOldCommand is true, we would reset the other text font properties back to their defaults.. withTextFontFamily would look something like:\nwithTextFontFamily(family: string, isOldCommand: boolean) {\n   if (isOldCommand) {\n       this.extend({\n           fontFamily: fontFamily || this.fontFontFamily,\n           fontWeight: \"\",\n           fontStyle: \"\",\n      });\n   } else {\n        this.extend({\n            fontFamily: fontFamily || this.fontFamily,\n        });\n   }\n};\nAs for the question of losing state, {\\rm hello} creates a new options object when processing that group which shouldn't affect the options object for the \\textbf group.. Yeah, the benchmark.js API is a little weird.. I copied it from the benchmark.js example.  I removed and the tests still pass.  It shouldn't make a difference either way b/c all of our code is synchronous.. This block was never executed b/c there were no values that started with text in oldFontFuncs.. This was unexpectedly nice, the parser has already parsed the arguments for us, yay!. It feels like all implicit functions are allowed in text mode.  Does anyone know if that's actually the case?. I checked with quicklatex.com and it appears so although I'm not sure in what context you'd actually want to do that.. \\text{abc \\bf def} causes def to be bold which would seem to indicate that \\fam does have an effect if \\bf is defined using it.  . Cool!. I think this could be extend to something like:\nconst cases = {\n    'shouldParse': [ ... ],\n    'shouldBuild': [ ... ],\n    'shouldNotParse': [ ... ],\n    'shouldNotBuild': [ ... ],\n    'shouldParseLike': [ ... ],\n    'shouldBuildLike': [ ... ],\n};\nI'll open a separate PR for this.. I'm confused.  Wouldn't we want these commands to match mhchem.sty?. It took me a couple of times to realize what the difference between u21cc and u21cb.. thanks :). Is this defined in mhchem.sty?. I think it's fine to just change it in types.js.  Eventually though, we may say that\ntype ArgType = string;\nand add other programmatic checks as necessary.. These new arrows are only using new geometry in svgGeometry.js.  There doesn't seem to be any sharing of geometry between these new arrows and existing arrows.  Could we modify the new geometry that you already added?  What would need to be added?. @ylemkimon I guess we still need this given the reasons you gave in the main thread.. I just noticed that this appears twice so I removed the one that didn't match makeFF.. The reason why there are duplicates is b/c \\c\\'{c} and \\'\\c{c} map to the same character.  Same goes for the uppercase version.. I didn't realize we didn't have any unit test for lap.  Thanks for adding these.. I'm going to hold of on merging this until #1134 has been merged.. One less thing to remember to do. :). Thanks for updating this file.  We use phabricator/arcanist internally, but I can't remember the last time I saw a phabricator review for KaTeX.. I think so.  It won't do anything other than echo the command to the shell which is what we want in the dry run.. I like this organization.  Could you do something similar for test?. Good call.. I'm not sure what the resolution is for \\c{g}.  Let's handle it separately.  I've opened #1142.. Let's leave it since it isn't hurting anything.. I don't think these should've been removed.  It breaks the ReactionArrows test.. These probably shouldn't be removed.. Sorry, the real command should not run, it should jus echo what the command to the console.. I would rewrite this as:\nconst nonSpaces = [\n   surrounding[0] && makeSpan([surrounding[0]], [], options)),\n   rawGroups.filter(group => group && group.classes[0] !== \"mspace\"),\n   surrounding[1] && makeSpan([surrounding[1]], [], options)),\n];\nThis avoids the unshift which could be costly depending on the length of the array and better shows that the surrounding array is being used to surround something.\nNote: new isn't required for makeSpan.. I can't wait until we have everything converted to flow so that we can better enforce some of these assumptions.. Maybe make this surrounding = [null, null].  I think eventually we'll want to enforce that this is a 2-tuple with flow.. That's pretty cool.  Glad you were able to figure out a way to get all the spacing code in one place.. I think it be good to extract some of these values into constants, e.g.\nconst emBoxHeight = 1000;\nconst delimiterPadding = 80;. If we have `const delimiterPadding = 80;` replace the `80` in the this string with `${delimiterPadding}`... or at the very least add a component stating what the 80 is so that if people need to change the padding in the future it's easy to find all the places that need updating.. It might be useful to extract a constant for `0.08` as well.. Cool.  Thanks for updating vertical separators to be consistent with the horizontal ones.. It's interesting that the line thickness changes for horizontal rules but not for vertical separators.  Is that just a LaTeX quirk?. Is this also b/c of a Chrome rendering issue?. I assume all uses of `80` here for padding similar to what's in delimiter.js.  Maybe we should have a constant for these so that it's easy to update if necessary.. Interesting.  I guess `check-dependencies` would've caught any difference and just failed the build.  Thanks for fixing this.. Thanks for adding this.. Not sure, but it's fine to keep it.. We're definitely doing something wrong here.  In `toNode` we call `document.createTextNode` which expects to be passed an escaped string, yet we're passing `this.text`.  I feel like we should maybe be doing the escaping within the constructor and then we could add an `escape` as an optional second parameter with the default being `true`.. I'm not sure how to do this either.  In the past I've look at what MathJax outputs, but `<mspace width=\"thinmathspace\" />` doesn't seem ideal.  Is it bad if we include `<mtext>` nodes inside `<mo>` or other element types?. I should remove the uppercase one as well.. Done.. How does `fontFamily` in Options.js differ from `fontName` here?. How does `font` differ from `fontFamily`?  Maybe add some comments and/or be more specific about the types.. Since we aren't resetting the values of `fontFamily`, `fontWeight`, etc. I assume that `font` takes precedence.. It looks like the order of these changed, but the parse trees look the same.. It would be good to have some tests for the behavior of old fonts.. Sorry, I didn't mean to suggest that anything needed changing here.. We're dropping support for `\u00e7\u00c7` in math mode in #1117.  I rebase after it gets merged.. This is uses `.toBuild()` whereas the one above uses `.toParse()`.  https://github.com/Khan/KaTeX/issues/1126 should address this in the future.. bad merge :\\. This test should pass with `\u00c6\u00c7\u00d0\u00d8\u00de\u00df\u00e6\u00e7\u00f0\u00f8\u00fe`.  I'm going to see if I can fix that.. Nice!. This is better than mutating the `span` like we were before.. nice. So we for classes to be an array so we don't have to bother handling the case when it isn't, cool!. So we were adding this prop even though we didn't use it anywhere else?  Thanks for avoiding the mutation.. I'm surprised we only call this with `Size1` or `Size4` since there are sizes in between.. We should be able to scope this to specific strings, e.g. \"sqrtTall\", etc.. Maybe we should limit the return type `\"Main-Regular\" | \"Size1-Regular\" | ... | \"Size4-Regular\"`, wdyt?. Nevermind, `flow` will probably have an issue actually verifying the return type.. Adding `isMiddle` to `span` doesn't seem like the right way to go b/c it's so specific to this particular situation.  The \"harder\" solution is probably the way to go.  Thanks for leaving a comment with suggestions o how to fix the `$FlowFixMe`.. I can move this repo to the `KaTeX` organization.. It probably makes it sense to have it at `KaTeX/test-fonts` or `KaTeX/unicode-test-fonts`, wdyt?. Interesting.  Thanks for adding links back to the issues.. Could make this:\nexport const spacings: {$Keys: Spacings}\n``. same. So we're both generating and verifying the screenshots and it's faster than travis-ci.  Awesome!. Sounds good to me.. I guess there's no reason to restrict these tounit: \"mu\".  Thanks for switching toMeasurement.. I love exact types.  They catch way more issues.. MaybeoptionsStringmay be more appropriate.. I think these are fine.  TBH I would've been okay with only checking fordisplayMode=0.. I didn't realize that we supported macros as URL params, that's pretty cool.. I would probably refactor things to parse all the URL params to an object using a library from npm.  Then we could have simpler regexes for just the keys to check if there are any macros and the rest become simple key lookups.. Why didresult.messagechange to a callback?. nice. Cool.. Does re-throwing maintain the call stack?. This is a really slick solution.. Is it possible to use\\hboxwithout\\raiseor\\lowerin front of it?. cool. I didn't realize it was including all of the string iterator stuff, blergh.  We should definitely revisit the use offor-ofbut since it's being used in other places I'm okay with any use of it in this PR.  A couple of things we could do:\n- look into using a custom build of core-js so that we only get the code for the arrayfor-of- use thelooseoption to convertfor-ofto simpleforloops.  This means we can't usefor-ofon strings, but we can always tofor (const chr of str.split('')` in that case.. > I can put that back in if you prefer.\nDon't worry about it.  :). This isn't too bad and seems to follow the same pattern as \\left/\\right handling.. Maybe we should change the factory methods to be something like createSvgSpan or makeSvgSpan.. Why did this change?. Cool.  I double checked the regex on regex101.com and it checks out.  The regex could probably be simplified, but your changes are minimal so it's okay.. Why not just expose these functions directly on the katex object?  There isn't really a concept of plugins internally.  I think defineSymbol is relatively stable, but defineFunction requires access to a lot of internal classes to be useful.. We should probably only have one setting so that people don't get confused about which setting to use or what the interaction between these two settings should be.  I think we should probably just introduce the strict setting in this diff in order to minimize the number of breaking changes.  We can transition the other settings to use the strict setting in a subsequent PR.. This was conflicting with some of the formatting that prettier outputs.. Many of these are prettier defaults, but I thought being explicit about what the settings were was better.. One downside of prettier is that it doesn't maintain custom comments.  I would suggest moving to putting comments on their own lines instead of after code if we want nice formatting.. Great comments.. Does this mean that people copy/paste math that contains characters in this range that we won't accept them?. We also supported lowercase k double struck.. Thanks for linking to this doc.  It really helps understanding what's going on here.. Instead of having a blank line here, I'd probably put blank lines in between each group of A-Z and a-z, e.g.\n```\n[\"mathbf\", \"textbf\", \"Main-Bold\"], \n[\"mathbf\", \"textbf\", \"Main-Bold\"], \n[\"mathit\", \"textit\", \"Main-Italic\"],\n[\"mathit\", \"textit\", \"Main-Italic\"],\n...\n. It would be good to introduce some types like:\ntype MathCssClass = \"mathbf\" | \"mathit\" | ...;\ntype TextCssClass = \"textbf\" | \"textit\" | ...;\ntype FontName = \"Main-Bold\" | \"MainItalic\" | ...;\nThis will make it easier to pick up errors as people continue to work on this code.. In the future it would be nice if we had a function that handled the non-wide character situation in a similar way to how `wideCharacterFont` does it.. It looks like `mathit` actually uses `KaTex_Math-Italic` instead of `KaTeX_Main-Italic`. People might be copy/pasting from other software where this range is being used for italics.. We can expose them with a `__` underscore prefix to indicate that they should be used with caution.. perfect. I'm uncertain that any value that isn't `\"main\"` or `\"ams\"` would actually work correctly.  If we allow any string, there should be a test in katex-spec.js that verifies that other values work.. Can you put `\u226a` beside the `\u226b`?  There should also be `\\ggg` can you add the unicode char for that beside the `\u22d8`?. `- Improve `\\sqrt` #810`. I'm surprised that this passed the linter.. `ParseNode<T: NodeType>` is more common when defining parameterized types.. Cool!. Wow, this is great!. Why is this not an exact type?. All of the groups typed as a `string` stick out a like a sore thumb.  No action required on this, but something we'll probably want to refactor in the future.. Will `EnvSpec` need to be parameterized eventually as well?. Is `unicodeAccents` not typed in such a way that the proper type for `command` would be inferred?. What's preventing us from doing this TODO now?. I would change this to `export type FunctionSpec<T: NodeType>`.. I would've expected `?FunctionHandler<NODETYPE>` to work. :\\. Can you explain in more detail what the flow error was here?. Why did we change from an array of strings to a one-tuple in the second option?. Why is this a flow error though?  You've typed it as a struct below and the above comment makes it sound like is already a struct.. I hadn't thought about that.  I guess we can leave it as is.. I'm not sure how `Object.assign` works with nested objects.  Will is merge sub objects or overwrite them?. These changes seem unrelated to `addFontMetrics`.  Why the switch to a callback?. yay for macros. I wish we store more props directly on the `domTree` nodes we create so that we don't have all of this extra data hanging out in this file.  No action required.. I see, this is just an alias.. I like this.  Maybe rename `token` to `tokenOrParseNode`.. When is `console` not defined?. I like the simplicity of this.. Exposing this level of customizability to users seems like overkill.  . I think it's sufficient if `strict?: boolean | \"ignore\" | \"warn\" | \"error\"`.. Well, at least we have a detailed comment here that we can dig into later.. Gotcha.  It would be nice to limit the slicing to remove leading `\\` as much as possible.  Not sure how much that would help with this flow error though.. This is such a weird typing.  Hopefully we can making things a bit more regular in the future.  No action required.. You can check if `typeof(group.value) !== \"string\"`, e.g. https://flow.org/try/#0PTAEAEDMBsHsHcBQiAuBPADgU1AZxQE4DyBACrAJYB2KoAvHodQOagA+oA3gB4BcoVAK4BbAEZYCAGlBp+QsRIC+AbmTQstDJRr98xMttoMe-AKzTZoAIwAGFcgqRQACnTZYkZ1uooAlKABCOgYAIj0WEP9ORFBQAGNYKlxYdQA6OGYvQ1TuX1VFRCA. Does using the same string actually cause an issue?  It seems like they're different types so `flow` should keep them straight for us.  Am I missing something?. Oh wow, I didn't realize we were doing that elsewhere.. I'm a little concerned both about the behavior and the naming of this function.  This function can actually override metrics depending on the keys in `newMetrics`.  Also, it could be a partial overwrite.  To make things more predictable, I'd like to suggest changing this to:\nfunction setFontMetrics(fontName, metrics) {\n   metricMap[fontName] = metrics;\n}\n``\nThe problem with this is we have a function calledgetFontMetrics` which returns a dictionary of sigma and xi values which are used for positioning things.  The issue is that the names are symmetric, but the values they deal with are completely different which is unexpected.\nThe thing is, is that getFontMetrics actual returns things that look like font metrics.  Font metrics usually refer to values that apply to a font as a whole, e.g. units per em, max ascender, max descender and the like.\nCan you change the name of getFontMetrics to getGlobalMetrics?  Then we can define setFontMetrics as described above without there being confusion between the two.. I think we can just import metricMap from \"../submodules/katex-fonts/fontMetricsData\"; above and not bother calling addFontMetrics here.. I think I've run into the same issue now that you mention it.  We should add // @flow to the test files at some point to (not now).. The comment should probably be more definitive, e.g.\ndefault:\n   baseFontName = font;  // use by fonts added by a plugin\nI like that things line up in your plugin.  I wish we didn't have so many mappings for font related things that we have to maintain. . Is the !font necessary?  It looks like all symbols defined in symbol.js have a font of either \"ams\" or \"main\".. Sorry for the delay response.  I tested the above code on quicklatex.com and it works.  Thanks for fixing the issue.. I see.  Yeah, reusing those strings feels bad news.  Thanks for highlighting this issue.. So many special cases. . Nice comment, thanks or linking to the TeXBook.. I think we should pull out this function and pass in parts and have it pass back a body.  It's a few extra lines, but it makes things easier to reason about b/c the function won't have any side effects once it's extracted.   Also, I think we should change the body to line and newBody(parts) to buildLine(expressions).. nice. This if is confusing.  Maybe rewrite as:\nconst isNobreakNext = i < expression.length - 1 && utils.contains(expression[i + 1].classes, \"nobreak\");\nif (!isNobreakNext) {\n   newBody();\n}. I'd create a helper called hasClass that can check if node in build tree has a specific class.. Why?. Let's leave things as they are now.  Eventually I'd like to replace those tests with snapshot tests.  We still might want to do some simplification depending on what the snapshots look like.. yay!. Nice comment. . I didn't realize that you could pass verticalAlign a length.  It makes me wonder why the topStrut is even necessary since the bottomStrut's height is already body.height + body.depth.. I didn't realize this.  I wonder how we're mutating tree.  \ud83e\udd14 . This is a lot cleaner.. Cool!  Why the -v1-?. Isn't this already include in *npm_cache_key?. This means we're using circleci v2?. Suggest going with a single strut similar to the change https://github.com/Khan/KaTeX/pull/1307.. Thanks!. Object.assign isn't supported on IE so we should continue to use the polypill.. wow... this code would really benefit from pattern matching.  The checks for .length > 0 aren't necessary b/c children[-1] will always be undefined.  It would be nice if we didn't have to post-process tag like this.  Is tag its own expression that we could detect during the for (let i = 0; i < expression.length; i++) above.  If so, maybe we could pull it out of the flow then and not have search for it afterwards.. Similar proposal to the comment I made in buildHTML.js.. yay, more helpers!. Whoa, this is awesome!. I forgot that each arg is an array of tokens.  This makes sense.. Is LaTeX limited in the number of args it can have?  . Even though this check is sufficient, having both allows for more nuanced error report.  Nice!. Cool!. Too bad it doesn't go to #11. ;). It would be cool if the matcher took an optional param to verify the error message.. fancy. Would the following parse?\n\\gdef{\\foo#1#2{#1 + #2}}\n\\gdef{\\bar#1#2{#1 - #2}}\n\\gdef{\\foobar#1#2{(\\foo{#1}{#2})(\\bar{#1}{#2})}}\n\\foobar{x}{y}\nI would expect the result to be:\n(x + y)(x - y). Because of strict mode, but we may want to support this in the future.. I didn't know any of that.  Thanks for the explanation.  Sounds good to me.. Also, what happens with the following:\n\\gdef{\\foo#1{#1 + \\foo}} \\foo{1}\nMy assumption is that this will cause an infinite loop.  Is example valid LaTeX?  Does it also cause an infinite loop there as well?. Looking forward to see what you come up with.. Not sure what cause this change, but I'm happy to see it.. I forgot that we were adding annotations to everything.  I see the magic is up above.. I assume that this causes the first <mtd> to be layed out to the right of the second.. Nice test. This is much better.. Thanks for adding this check + config option.. I feel like we do similar things elsewhere.  At some point we may want to create a helper for this.. I had a look at the docs.  Looks reasonable to me.. Should this also include ParseNode<\"xArrow\">?. I see.  Can you add those details to the $FlowFixMe comment?. Nice!. Isn't \"textord\" already included in NODETYPE? . This is fine as is.. Awesome!. Is this <mo> supposed to contain a &#x2061;? . Nice, I just wrote a comment about it, but I see you fixed it.  Thanks!. I see you added a test for it, yay!. String.raw would really cleanup some of these tests.  Not necessary for this PR.. Question about \\def and \\gdef: if you do \\def\\mydef{\\def} \\mydef\\foo{a+b} \\foo does that work?. Is \\def not allowed in optional groups?. Maybe we could have a wrapper for setMacro defined on MacroExpander so that we can avoid the .namespace. boilerplate.. Nice comment.. remove?. We could simplify this code if we included builtinNamespace as part of the initial namespace.  We'd have to update the popNamespace code a little bit, but the we could avoid this special case here.. It looks like this renaming doesn't actually change any of the logic, is that correct?. It would be nice to have a convenience function getMacro directly on MacroExpander since we do .namespace.getMacro in a couple of places.. Nice warning.  I wonder if we should make a copy so we don't have to give this warning.. If we only define it at the top level as soon as we exit the current group then it will no longer be defined, or, if it was previously defined using \\def in that parent group, then the macro would use that definition.. I'm a little concerned about performance.  We could do some benchmarking and/or profiling to see how much this affects things.  We could maybe save a little bit of look up time by reusing the namespace from the parent group and only creating a new one if we run into a \\def statement.  If we also reuse the builtinNamespace in the same way then this should have almost zero impact on users who aren't using \\def b/c each lookup will be O(1).. The thing is there could be a definition at any level (or all levels) so \\global\\def has to clobber them all.. I see, but then lookup is always expensive for global macros b/c you have to iterate to the root every time.\n. Instead of removing the test completely, could you revert to the updated test you made and then comment it out so that it's easy for people pick up the work?. Sorry for the late comment.  Isn't\nnode: ?ParseNode<*> | ParseNode<*>\nequivalent to\nnode: ?ParseNode<*>\n?. node: ?ParseNode<*> \nshould be equivalent to \nnode: ParseNode<*> | null | undefined\nI would expect:\nnode: ?ParseNode<*> | ParseNode<*>\nto be equivalent to:\nnode: ParseNode<*> | null | undefined | ParseNode<*>\nbut since there's two ParseNode<*> in the same union we should be able to drop one result in:\nnode: ParseNode<*> | null | undefined\nwhich is equivalent to\nnode: ?ParseNode<*>. Renaming groupTypes to groupBuilders is an improvement.. Nice use of ParseNode here.. We might also want a test like\nexpect(\"M = a + b\").toBuildLike(\"\\textbf{M = a + b}\");\nwhere \"M = a + b\" is the bolded versions.  Not sure the best way to store a string with bolded characters.. The benefit is that if someone adds something to classes they don't have to also update this line.. It appears twice in the type.  The first one here was being ignored.. The types for args weren't enough to pick that this needed to change.. Can you add a top level docstring to this file?. This is a really interesting way of dealing with constant time lookups.. This could be: return this.current[name] | this.builtins[name].. Maybe rename topGroup to be initialMacros.. undoes => undos. @edemaine what's the plan for optimal groups?. Nice cleanup.. How does LaTeX handle this?. Good call.. I'm pretty sure changing this would break a whole bunch of things, but maybe we should look at doing so sometime in the future.  We can add some kind of helper function to unwrap groups with a single child.. @edemaine did you changes address this?. It's fine.  The refactor was pretty isolated.  I just wanted to be sure I wasn't missing something here.. It is still necessary.  The position = \"absolute\" causes the \\u0338 to overlay the the following group/atom.  I'll add a comment.. I'll give the \\rlap approach a try.  I'm not sure what to make sure of that chunk of LaTeX's source though.. Awesome!. Cool!. I don't don't understand this comment.  I don't see $LongNames; anywhere.. Whoops.  Thanks for spotting that.. @marcianx we should be able to use checkNodeType or assertNodeType here to clean up these $FlowFixMes right?. Shouldn't the / be a \\not?  It seems weird to use a different glyph for \\notin.. > They seem visually very close to LaTeX's; here's a texcmp for the tweaked Not test (only third line is new):\nSGTM.. I tried this, but it bails out.  See my comments in https://github.com/Khan/KaTeX/issues/872.. Why can't we use \\kern?. Will this symbol ever get used since defineMacro(\"\\u22ee\", \"\\\\vdots\") would expand \\u22ee into \\vdots?. My mistake.  That makes sense.. I ran \\vbox{\\hbox{a}\\kern6\\hbox{b}} on quicklatex.com and it resulted in a vertical space between the a and the b.  It looks like our \\kern doesn't support this ability yet.. I'd lean towards LaTeX's default behaviour as well.. I thought this might cause \\left/\\right delimiters to not render, but it doesn't.  I guess the left/right delimeters for genfrac are for a \\choose b.  Do we need a similar if (group.value.continued) for leftDim up above?. This is good to know.  Thanks for adding a comment.. Would it be possible to not add either of these classes instead of adding both since they only act to counteract each other.. That makes sense.. I think it's fine as is.  I find ?Token[] confusing b/c it's hard to tell whether it means ?(Token[]) or (?Token)[]. . The reason why we deconstruct them instead of not constructing them in the first place is that we don't actually know what the current font is.  I wonder if we could form the ligatures in ordgroup.js instead.  That would avoid having to undo work.. Thanks for commenting where these are defined.. nice. Can you add a namespace.has(name) method that encapsulates this logic?. Why doesn't it matter?. This error message is a little confusing, maybe:\n\\\\newcommand{${name}}{...} is trying to redefine ${name} which is already defined.. This error message is a little confusing as well, maybe:\n\\\\renewcommand{${name}}{...} is trying to redefine a command which doesn't exist.\nFeel free to wordsmith these a bit more.  The main confusion for me was the \"in\" in \"defined in \\(re)?newcommand\".. I took me a while to grok what's going on here.  \\foo is eating all 10 of the args but is only using the first one, right?. I noticed you added nonstrictSettings in a couple of places.  Does this modify the behaviour fo the test?  How is it related to the \\newcommand, \\renewcommand, etc. part of this PR?. After rebasing you'll need to return a ParseNode from here.. This snapshot is surprising hard to read.  It would be cool if we could choose to filter the props to the tree to only show the value and classes on some tests.. An optimization we might want to consider is using an SVG transform to invert the existing geometry from \\widehat.. This is definitely a step in the right direction, but not it's final form.  That can wait for another PR.. This whole mathord/textord thing is a little weird.  We should probably have:\n{\n  type: \"ord\",\n  mode: \"math\" | \"text\",\n  nucleus: ...\n}\nThis change can happen in a future PR though.. Thanks for making things more consistent.. Good call.. Why the name change?. These are the ones I missed in my PR?. Nice!. We could do a check here instead and then we'd be able to keep the error message from before.. We'll be able to get rid of this weirdness once we have a separate atom parse node type.. yes, you're right, maybe:\ntype: \"atom\", \nkind: \"ord\" | \"bin\" | \"rel\" | ..., \nmode: \"math\" | \"text\",\nnucleus: .... Reusing this variable in the else if (next === \"\\\\end\") block makes sense.  Since there can be multiple rows the variable doesn't hold strictly the last row I think that calling it row would be more accurate.. Inside the while loop it's gets push to body whenever there's a \\\\cr and a new one is created at the same time.. I hadn't considered -{}- vs {-}- vs --.  It might make sense to move state about the current style to the parser eventually.  Especially if we want to support commands that check the current style.. Thanks for filling this in.. The snapshot should be easier to read in future PRs if we end of having to tweak something.. My guess is that we don't define a font for a lot of the unicode characters that we all now.  @ronkok is that correct?. It would be nice if we could check when we get an invalid font.  Right now there's no list of valid fontFamilies.  Ideally we should have one and setFontMetrics should update that list with the font that's being added.  Also, this makes me wonder if we should change __setFontMetrics to be __defineFont and have it take something a little more structured, e.g.:\n__defineFont(\n  baseFontName, \n  fontFamily, \n  metrics: { regular: {...}, bold: {...}, italic: {...}, \"italic-bold\": {...} },\n);\nThat's a rather big change.  Would you be able to tackle this in a follow up PR?. This could be simplified by defining StyleString after styleMap similar to how you defined DomType from DomEnum.. expression: AnyParseNode[] should work.. This $FlowFixMe isn't necessary.  If it's more precise to type children as (SymbolNode | span)[] then leave a TODO instead.. I wish we knew the atom type for a group before we call its HTML builder.  Maybe that's something that will fall out of moving to an intermediate representation of boxes.. I think removing the $FlowFixMe and doing const nonSpacesI: HtmlDomNode = (nonSpaces[i]: any); would be better b/c at least nonSpacesI would be typed as a HtmlDomNode instead of having its type erased b/c of the $FlowFixMe.. Same. We should probably give these domTree nodes, type properties similar to the ParseNodes at some point.. We can still use default values, e.g.\nside: Side = \"right\". same. This can be group: ?AnyParseNode. I tried export const _htmlGroupBuilders: {[NodeType]: HtmlBuilder<NodeType>} = {}; but that didn't fix the $FlowFixMe. :(. This can be tree: AnyParseNode[].. As we able to remove this $FlowFixMe after making the other changes I suggested above.. I find it really weird that isMiddle is not a boolean... we should probably change this property to be called simply middle.  Maybe add a TODO to make that change separately.. This change isn't necessary after re-enabling the param default.. No action necessary here.  Currently we only know the atom type for a group until after we build the HTML for it.  Eventually, it would be nice if we could do:\nParseNode tree => LayoutNode tree => HtmlNode tree\nwhere\nLayoutNode =\n   | Box\n   | Rule\n   | Kern\n   | Glue\n   | Glyph\nThe benefit of this would be being able to have different rendering backends so that we could do any of the following:\nLayoutNode tree => HtmlNode tree\nLayoutNode tree => SvgNode tree\nLayoutNode tree => canvas render\nHaving a tree of LayoutNodes would allow us to do any post-processing such as bin cancellation on the LayoutNode tree once instead of having to have separate copies of the code for each of the final trees.. TBH, I'm not sold on the syntax.. If parse contains extra keys, they're ignored which is what we want in this test.. @rrandallcainc were you thinking that id might be useful for hit testing in canvas based renderer.. This change conflicts with https://github.com/Khan/KaTeX/pull/1440. . Maybe we could change this be:\ntype: \"html\"\nattribute: \"class\" | \"id\",\nvalue: string,\nbody: AnyParseNode[],. Is this only used to replace url?. I've found that browsers tend to get confused about things when there are multiple elements with the same id.. If there's a match that occurs after part of the string which isn't matched by the regex, exec will happily jump to the next match and return that.  We could keep track of the current position and then verify that match that exec occurs at that position.. I don't believe so.. Is the addition o the space necessary in this test?. There are a couple of issues with the typing:\n- leftDelim may not be defined\n- if it defined, its type (as defined in ParseNode.js) is ParseNode which makes the type of leftDelim.value NodeValue which could be a lot of things (at least the way things are typed right now).. I was able to figure out how to fix the $FlowFixMes.  Here's the updated handler:\n```\n    handler: (context, args) => {\n        const [numer, , denom] = args;\n    const infixNode = assertNodeType(args[1], \"infix\");\n\n    // Look into the parse node to get the desired delimiter.\n    const leftDelim = infixNode.value.leftDelim\n        ? delimFromValue(\n            checkDelimiter(infixNode.value.leftDelim, context).value)\n        : null;\n    const rightDelim = infixNode.value.rightDelim\n        ? delimFromValue(\n            checkDelimiter(infixNode.value.rightDelim, context).value)\n        : null;\n    const hasBarLine = context.funcName === \"\\\\\\\\overwithdelimsfrac\";\n\n    return new ParseNode(\"genfrac\", {\n        type: \"genfrac\",\n        numer: numer,\n        denom: denom,\n        continued: false,\n        hasBarLine: hasBarLine,\n        leftDelim: leftDelim,\n        rightDelim: rightDelim,\n        size: \"auto\",\n    }, context.parser.mode);\n},\n\n. I've also exported `checkDelimiter` from delimsizing.js and imported it into this file.. If you query for an element by `id` you can get an HTML element, SVG element, MathML element, etc.. But wouldn't there be separate commands, e.g. `\\class{foo}{\\id{bar}{content}}`?. The following should work:\nconst infixNode = assertNodeType(args[1], \"infix\");\nconst sizeNode = assertNodeType(infixNode.value.sizeNode);\nconst barSize = sizeNode.value.value;\n@marcianx does that look right?. Is this really how TeX does this?   I guess `\\genfrac` is pretty low-level but I would've expected some sort of identifier or something.. Apparently TeX accepts any math for the first two args, but if it's anything other than a delimiter the results end up being weird.  . This looks a little strange to me b/c I'm not used to template strings returning things that aren't strings.  Maybe we could introduce a `tex` template literal function.  It would look like:\nexpect(tex1\\over 2\\over 3).toFailWithParseError(...\nThe `tex` function could be exported for use by other people.  Also, it would be easier to understand what's going on.  I'm still not sure how `expect` is acting as a template function without us modifying/replacing it with our own implementation.. This function needs a better name.. I would expect `getTree` to call `katex.render()` and return the tree or clean up the stack trace and rethrow as necessary.  Then `expectKaTeX` can call `getTree` and we don't have introduce a special matcher just to make things work in this order.  Is there something I'm missing that necessitates this setup?. Does the default `settings` work when `undefined` is passed as the second arg?. I really like that we're supporting `.not` now, but this helper function has complicated the implementation quite a bit.  I'd rather have a few small helper functions that each of the `toParse()`, `toBuild()`, etc. call then a single function that tries to do it all.  Maybe we could add something format the message in addition to the function you added to clean up the stack trace.. I wonder if people will want to use it like\ntex\\frac{${num}}{${den}}\nThat could be a separate PR though if people think that's worth supporting.. Interesting.  I was unaware of jest's use of tagged template literals.  `expectTex` seems like a good compromise.. @ylemkimon apologies for not raising my concerns about `expect` as a tagged template earlier.. I supposed it would be in which case I guess people can just use `String.raw`. \ud83d\ude05 . Does this set the prototype correctly?. You might try doing: `children?: ChildType[] = []` in the param list and then this would become `this.children = children`.. Cool!. I would probably just link to this page for now and then move this page to into the repo and style it appropriately.  Apparently docusaurus has a way to wrap HTML pages so that they look like they're part of the site.  https://docusaurus.io/docs/en/custom-pages. So this gets passed to the `Users` component defined in `users.js`?. Why not a relative path?. KA uses `aphrodite` for CSS in JS styling.  That's something we may want to adopt in the future.. Yay, we're a monorepo now. . Nice!. Is there no npm package for this?. Why do we use the local `katex.js` in some places bu the `CSS` on a CDN?. Do we need these?. nice cleanup. I think I get why we need `{{x}}` here.. Good point.. Cool!  It seems like docusaurus is quite flexible.. Does node use this when doing `import ... from \"katex\"` when the `--harmony` flag is enabled?. I've never used `\"overrides\"` before.  TIL :). Which files wouldn't we want this enabled for?. This will warn if we try to use `process` inside of `src/**/*.js`?. Sneaky.. It's too bad that `webpack` doesn't support outputting ES6 bundles.  I can't see very many people using `./lib/katex.js` in the browser since that will result in a bunch of additional requests.. Why isn't this standard behaviour for `eslint-plugin-import`?. How is this file being built, I thought `webpack` didn't output ES6 modules?. I remember working on a similar eslint rule.  I'm glad someone added to the official set of rules.. We're excluding this file b/c it isn't included in the final build.  I wonder if we should remove it from `src` and put it in `util` or `tools`.  Not necessary for this PR.. Is the polyfilling adaptive, i.e. does it look at code to determine which poly fills to include and this change somehow tricks it into thinking we're not using `Object.freeze`?. I almost tempted to make a plugin that does this conversion for us since all of the things we iterate over are know to be arrays.  I wish I had more time.. Babel's output for restructuring seems to be pretty short.  How much of a savings is this?. Maybe we should go with\nObject.keys(this.style).forEach(\n   key => node.style[key] = this.style[key]);\n``\nIt's faster and short.. Maybe if we typethis.styleas aCSSStyleDeclarationit will makeflowhappy.  See https://github.com/facebook/flow/blob/v0.75.0/lib/dom.js#L1418.  That way we only allow valid CSS properties intothis.style.. Interesting.  Can you add a comment about this.. I guess we can leave then and fill them in if/when we make the site responsive.. Cool.  Since they're deprecating v1 soonish.. Yeah, that's definitely one of the shortcomings of Babel's configuration story.. Hmm... so typing a{}as aCSSStyleDeclarationwon't work.  That's too bad.. I think distributing a single bundle for the ES module is probably the way to go.  That way people can use it in production.. TIL, cool stuff.  For those following along: https://www.w3.org/TR/WCAG20-TECHS/H76.html.. Please add a top-level comment to this file explain its purpose.. Is the double backslash necessary here?. Why were we using\\colorboxbefore?. Thanks for cleaning up these stray|.  We should maybe look at adding a linter for our markdown to catch these things.. Good call on making all links use.md.. This could beyarn build.. I didn't realize you could do that withyarn.. Is there no equivalentyarncommand for this?. We should be consistent in our use ofexpect.. There was a revision to the template string spec for ES2018 that addressed this very issue.  I assumed that babel supported it but after checking http://kangax.github.io/compat-table/es2016plus/ it appears not.. Why don't we need theAnyParseNode[]that was originally on the phantoms?. It's nice that we can get rid whole nodes, but where didmodgo?. nice cleanup. I guess since we're in delimsizing.js this can be a more general name.. Much better!. Using build artifacts from Circle CI sounds nice.  What's involved with a CORS proxy?. So flattening the \"array\"ParseNodemade all this disappear?  Cool!. I was thinking that we might also look at replacingObject.freezewithflow's$ReadOnlyand$ReadOnlyArrayutility types.. Add a,at the end of this line and this'll be good to go.. So we're disabling thenodeenvironment for files in source b/c they're easier to exclude.. even though there's a bit of duplication here, everything is explicit which is probably preferable.. Cool!. We should probably merge this before deploying so we can test the deploy script.. Interesting... I've been experimenting with ES6 modules for another project and rollup looks at themoduleorjsnextfields to find the ES6 module.  Maybe that was a previous solution before node settled on the extensionless solution.. I really like the output that rollup produces for ES6 modules.. I also like howrollupreports these types of errors.. We should probably add an eslint rule to prevent this, but in a separate diff.. Thanks for adding a demo to test this.. I know we do some funky stuff inParseError, does it prevente instanceof katex.ParseErrorfrom working?. I thought for a second it detected an unused style, but then I see it merged styles.. So this replacesprogram.command('markdown-help')?. Does the plugin inject the actual SHA384 forkatex.min.css?. I was wondering where the/staticwent to but here it is. :). Nice!. Leave this out.. I didn't notice that.  Yeah, let's remove that as well.. Limiting which branches can be released from makes sense.. I wonder if it's worth checking for any unstaged changes or new files after this command.. At this point these files aren't on the CDN yet, but if the PR is accepted, then the publish will occur and they will be on the CDN, right?.%.bakmeans \"without.bak\"?. :+1:. Why notyarn clean?. I didn't realize that you could use$1,$2, etc. for the capture groups in the replacement string, cool!. I wish GitHub had better diffing.  This looks exactly the same.. Minor nit: this could just returnpromise.then(...)here thenpromisecould be a constant.. If you run./release.sh 0.6.3 0.6.4will it push a new commit to thev0.6.3-releasebranch created by the first run?. I wonder if we need-moz-versions too.  I checked Firefox and it works as is, but my FF is pretty recent.. Do we need-ms-flex-directionhere as well.  We may want to consider adopting a CSS preprocessor to help with this in the future.. One thing I noticed when togglingdisplayModeis that it takes a bit of time for the font with the smaller integral to load.  We may want to pre-load fonts for the demo in the future.. I wasn't sure what format was need for the macros, it'd be good to have a couple of pre-populate macros... maybe one that takes an argument.. We also have acleanscript in package.json which I guess would have to be run usingyarn run clean.  It just deletesdistthough.  I think these accomplish the same thing so either is fine.. Does bash do something different with single quotes?. The only things we can combine aretextords andspacings so if we create groups of consecutivetextords andspacings we can pass each of those groups off tobuildExpressionand combine thesymbolNodesthat are returned without doing all of complex checks we're doing right now intryCombineChars.. That's a good point.  I'll remove this TODO and  make sure that the newtryCombineCharscovers all the cases thatsymbolNode.tryCombineCharwas checking before.. Good call.  I too have never done that either.  I might move these checks into a separate function.. Yeah... I'll ~made~make a note that this function mutates the input.  Maybe I can make a copy fo the array so that we don't mutate the input.. I can see why.  I'll change this.. The previous code check ifthis.italic > 0which felt weird so I left it out.prev.italic = next.italicseems like a better way to go.. Cool!. Neat.. Do we need all of these?  codecov useslcovandtextis useful to seeing the output when running on ci or locally.  When would we use the others?. This loop can't be converted b/ctextis astring.. This loop can't be converted b/ctextis astring.. Please useObject[\"key\"]to avoid babel polyfilling this for us.. Please useObject[\"key\"]to avoid babel polyfilling this for us.. Why was this removed?. I wanted to do that originally, but if we do thatflowdoesn't know thatprevandnextareSymbolNodesinside oftryCombineCharswhich means it doesn't recognize the props that we use onprevandnext` following this check.  It's a bummer b/c the code would look a lot cleaner.\nIt would be cool if flow had a way to describe \"if this function returns true then the args of of these types\".. ~Ugh, I forgot to change the param types to canCombine to prev: any, next: any.  Also, I am impressed with flow ability to make a type refinement based on that check.  Thank you for prodding me on this.~Double ugh... the flow plugin in my editor was lagging... this check still doesn't refine the types.. It is a new call.  It would be nice to handle cases like \\text{{hello}}.  I tried collating ordgroups but I had taken some of the checks out.  I should try again now that all of the checks are back in.  There are situations where I could see us not wanting to combine ordgroups though.  As an example: {xyz}... in this situation we might want to keep those characters separate in case someone wants to be able to highlight each variable on hover or click to select an individual variable in the term.  I think calling it for this particular case of op makes sense b/c it handles things like sin, cos, etc. and I think we should be treating those things as atomic units as opposed to separate letters.. I get what you're saying... try to combine characters inside of ordgroup if we're in text mode.  I'll make an issue for it.  Having fewer spans should improve performance.  The fewer DOM nodes we have to create the better.. @edemaine how difficult do you think this would be?  The code below for stringFromParseGroup is incomplete since it doesn't handle nested groups.  Also, it seems inefficient b/c we're traversing the tree when we should be able to slice part of the expanded token stream and more easily concatenate those tokens into a string.. @ronkok [T] means a 1-tuple of type T where as T[] is an array of T.. The flow errors here stemmed from the fact that when you create an object literal, flow considers that to be its type and complains about adding new properties after the fact.  To get around this you have to specify the type explicitly.. flow actually helped me find this error.. Please change this to an exact object type, e.g.\nexport type CssStyle = {|\n    backgroundColor?: string,\n    ...\n|}\nThis will cause flow to complain about any misspelled properties.. I ran this command got the following error:\nerror \"browserslist#node-releases@^1.0.0-alpha.11\" doesn't satisfy found match of \"node-releases@1.0.0-alpha.10\"\nerror \"browserslist#node-releases\" is wrong version: expected \"1.0.0-alpha.11\", got \"1.0.0-alpha.10\". Thanks for figuring out how to run jest after upgrading to babel 7.. I didn't realize that node scripts could also set environment variables, cool!. The reason why babel doesn't polypill this anymore is b/c we're using browserlist right?. Adding this wherever we have a parseInt or parseFloat is kind of a pain.  Do we still need this lint rule now we're using browserlist?. Since we're passing through strings whose length aren't 6 maybe we check that color matches a hex 6-tuple that way we're not prefix things like cherry.  What's LaTeX's behaviour if it gets a named color that isn't defined?  Also, you said this PR was minimal so may we can deal with those situations in subsequent PR. . Where did this key come from?  It feels a little unsafe to include a plaintext API key like this.. I assume this callback format for babel.config.js is new in v7.  I'm sure there are lots of cool things a person could do with this.. TIL. Are redirects needed for each subdirectory?. If there a difference between running yarn and yarn install?  It looks like the circleci: test check is running into this issue too.. I've moved these up.  We should consider adopting no-use-before-define so that we do this consistently which we don't at the moment.\n. This change doesn't seem strictly necessary.  Was thine thinking to make it follow the same pattern as the main katex build?. Does this require katex to appear first in targets?  Also, where is this used?. If we're using rollup.config.js to build all of these targets, why is copy-tex the only one that needed to be changed to use .webpack.js?. I see.  Another option would be changing which image we're using for node.  The node 10 image contains yarn 1.9.2 https://github.com/nodejs/docker-node/blob/master/10/jessie/Dockerfile.  I guess that's a bigger change so we can upgrade yarn ourselves in the meantime.. Wow... I didn't realize you could replace checkout with your own checkout command, cool!. I thought circleci was only running on PRs, I guess that isn't actually the case.. What does jq -r ... do?. I didn't realize commands could be parameterized.  This is super powerful.. How does \"stacking\" of images work?  I'm guessing that selenium/standalone-firefox:2.48.2 doesn't include node and yet the screenshotter command runs node.. Nice!. I was thinking about how I might use this for vite, but since there's a node script that needs to run from inside the container it uses even when running it locally I needed to include node in the custom container.  I was thinking of using one of circleci's so-called \"browsers\" images that include Chrome and Firefox and starts Xvfb... then I'd only need to download the vite code.. I don't think we should be passing this as options.  buildExpression has generated the elements, why not update them here?  I worry that passing options will result in descendent elements also getting these data attributes.. We should reuse attributes and prepend the entries with data-.  This will allow reuse of the existing code that handles attributes.. Why don't spaces get the data attributes?. I assume this also works with relative URLs as well.. I forgot that we have a url arg type that you could use.. This is definitely different from how we parse other special types.  I'm curious about the rationale for going this route.. Thanks for adding this as an option.. I checked this on https://deploy-preview-1620--katex.netlify.com/docs/next/support_table.html#i and it isn't rendering.  I think updating this branch should fix it since #1631 was merged.. I see, totalheight can be used to vertically shift the image within the group. . I forgot what calculateSize did for a second and was confused why we threw away the supplied units, but then remember.. Should we do the same for maxHeight?  It seems less likely to be an issue.. This seems like an odd choice since it's not really a glyph.  I assume this what other people are doing when they add images to MathML.. Can you add some failing tests to check the exceptions thrown in certain errors cases.  Maybe try https://jestjs.io/docs/ro/next/expect#tothrowerrormatchinginlinesnapshot apparently it will update the source code of the test file with a string version of the exception being thrown when you run yarn jest -u.. Disregard my comment about this not working on netlify, I was looking in the wrong spot. \ud83d\ude05 . Sounds good.\n\nargTypes: [\"chaos\"]. They both run fine. \n\nThat feels like a bug.  @ronkok could you file an issue for this?. Fair enough.  I think making it easier to do custom parsing is what we want.  If what's being parsed doesn't include an TeX content then passing a string with the contents of a group to the function handler is the way to go.  I think that's what the intent of the \"raw\" arg type was.  It's a shame the arg types are being ignored.. I didn't know that.  In that case disregard my suggestion.. This feels redundant.  Shouldn't the mathdefault call below take care of this case?. Interesting. The combining of text glyphs we do should have a similar affect, shouldn't it. I guess it still keeps the italic value from the last glyph so it still changing the spacing at the boundaries between font types whereas this won't.. It'd be nice to have some helper functions for some of these tests, maybe isLatinLetter, isNumber, etc.. What were you thinking in terms of renaming fonts?. That should be fine.. I guess that's kind of hard to do that lever level.. If it's truly \"raw\" we might want to allow mismatched braces.  In practice that's probably not all that useful so maybe add a comment describing the limitations of raw arg types.. Good call!. Why not this.nextToken.text.indexOf(\"\\n\") === -1?. Now that we have raw, I wonder if we should move the parsing of color, size, and url into functions/*.js.. We should probably have some tests for parsing raw arg types.  It would be cool if we had a test that defines a function that accepts one raw arg and one optional raw arg then we could test that including [] or {} in the raw string works as expected.. I was sure we were using this in more places, but I guess not.. Why not wrap all fragments in a span?. These should maybe be snapshot tests so it's easier to see the structure of the markup.. Why isn't ] in this list?  Are the contents of an optional group an expression?. Can you add a reference to the TeXBook or similar resource?. I mis-parsed this comment on the first read.  The intent is that partial groups behave the same as fragment, i.e. they don't affect the spacing around it.. Maybe we should define type PartialGroup = DocumentFragment<HtmlDomNode> | Anchor.. Why don't we need the side argument here?. My preference is for multiple passes with simpler code.. Not being able define variables inside if blocks is a drag.  It's too bad we can't do:\nif (const node = checkNodeType(expression[0], \"sizing\")) {\n   ...\n} else if (const node = checkNodeType(expression[0], \"styling\")) {\n   ...\n}\noh well.. Thanks for calling this out.. It might be worth unit testing this.  Also the name is very general but it some logic that's super specific to modifying spacing.  Can you change the name and update the comment to reflect this?. Isn't that what the else branch does?. Could you explain the \\newline situation a bit more?. Maybe compare this build tree with that of x + y,. Snapshot looks good.. I love easy fixes.. That makes sense.  It might be worth adding a comment here about that.. Maybe that's something we can do in the future.  I've opened an issue for it https://github.com/Khan/KaTeX/issues/1740.. Cool!. It sounds like after we see a [ then we treat ] specially.. Did you determine the behavior by seeing what LaTeX does for different test cases?. That makes sense, thanks.. The comment makes it sound kind of hacky.  Is this how LaTeX resets text-align?  Any thoughts on a better way to do this?. Not sure, but it's something we could investigate.. That's clever.  We'd want to construct the object programmatically at load time though.. \\mathdefault?  I don't even though if that's a thing or not, but there must be some way of getting back to that mode from inside of \\mathnormal.. That's definitely a downside of fixtures.. Makes sense, thanks.. Now that we have so many optional params here we might want to replace them with an a single options object param.. Why is this no longer necessary?. I see, it looks like it got moved inside parseGroup.. This is really nice.  I like how you collected a number of different errors in the same place.. Getting rid of this sure allowed you clean up a lot of things.. assertNodeType will throw if parser.parseFunction() returns null.. This is easier to follow.  I'm glad that you were able to make this look a little more like delimsizing.js.. @kokopelli314 what changed in this file?. These macros are awesome!. That makes sense, but it's not obvious.  Could you add a comment here before merging this?. Cool!. I wonder why this wasn't inside an if block before.  This makes sense to me.. After I asked the question I ended up having to so something similar for another project.. Instead of converting to fixed units here, I wonder if we should be doing the conversion in toNode and toMarkup in domTree.js.  This would mean we wouldn't have to make the changes we're making to mathMLTree.js.. @kokopelli314 this would also address the issue you raised:\n\nIt looks like there are some DOM tree elements that don't run their styles through calculateSize, meaning they're not rounded now. In particular I've noticed vlist and strut are not rounded. Would this require a more comprehensive refactor of the buildCommon.makeVList function?. That's a good point.  I forgot that they're already strings by time we get to toNode.. @ronkok the issue was that the return type for parseStringGroup is ?Token so a null check was required.. @ronkok is it possible to construct a test case where this would happen?. Awesome!  Yes please.. I think that make sense as this index.html is more about testing.  It would be nice to have something within webpage to demo this there.\n\nI love that this contrib modules works with the auto-render module.. This will need to be updated and we'll need to do a publish for this to work.  Also, the webpack config files need to be updated to compile this file.. I couldn't find this string b/c I was searching for locally and my search was scoped to src. \ud83d\ude1e . It's unnecessary and our other code doesn't do this.  We could keep it if it simplifies the process of keeping the mhchem extension up to date.. @ylemkimon how with this work if people are adding script tags to the page for katex and mhchem extension?. I think (math: string) => string would be a bit clearer.. Could you add a test for this?. I think you'll want to get rid of this line and at the bottom of the file replace\nreturn {\n     expand: chemParse,\n   };\nwith\nmodule.exports = {\n        expand: chemParse,\n    };\nand drop the trailing:\n})();\nI'm curious about why chemParse was being exported.  Is it for debugging purposes?. > Then functions mhchemParser(), texify(), assertNever(), and assertString() become global. Why would we want to do that?\nThey shouldn't.  We're not actually shipping contrib/mhchem/mhchem.js.  webpack will compile that file and the result should not have any of those things exposed as globals.. It seems like having the patch in a separate file would be the most useful.  That way if someone else wanted to update this file based on a newer version of the mathjax extension they could either try applying the patch or they could look at the patch to see what changes were made.. I'm curious if \\foo gets expanded to 1 %}\\n2 or simply 1 2.. this.catcode should maybe be this.catcodes since it is map, even though it currently only has on entry.. If we're parsing a raw string group don't we want to treat \"%\" as a normal character and not a comment?. Why are multiple \"%\" in a row not allowed in URLs?. whoops... forgot the basics of TeX syntax \ud83d\ude05 . ~It's probably worth adding a comment to the code as it's not very obvious that that's what's going on.~\nFor some reason I thought that the URL parsing was using the raw parser, but I can see that's not the case.  This makes sense to me know.. Since we're not calling toText() which was doing the escaping, why do we need to additional unescaping here?. I'm glad to see you didn't need to add utils.round in too many places.. This feels like a breaking change.  What's the rationale for this change?. These changes look like they're improving the output of our test output, nice!. Can you run npm run build and see if this ends up including katex within the built file?. Does the test fail without this?  I know we handle some unicode chars, but I forget if we handle superscript chars properly without the preprocessor you've defined here.  It might be worth writing a more extreme preprocessor such as /-squared/g, '^2' and then run it on x-squared + y-squared = r-squared.  The rationale is that even if we don't handle superscript chars right now, we might at some point in the future which would mean that this test would loose its power at that point.. Cool.  I think using the modulePaths setting in the jest config would be a bit cleaner: https://jestjs.io/docs/en/configuration.html#modulepaths-array-string. I'm going to merge this PR as is and we can give modulePaths a try in a future PR. \ud83d\ude42 . It seems like we could use a \\strut to achieve this if we supported \\strut.  Is that a correct way of thinking about this?. I see... a fraction inside a \\hphantom might be quite tall and makes sure we clamp the height.. Could open an issue for this and include a link to the issue from this comment?. macros defined within a group get popped as we exit the group right?. Do we give \\current@color a default value somewhere?. Interesting... so before this change, the output would've been \\begin{matrix}1&2&2\\end{matrix}?. I guess people can add a link here if they choose to.. Good call!. This is a really good idea.. \ud83d\udc4d for linking to this.. Sounds good.  Thanks for adding that.. ",
    "buob": "I would love this so we could switch from MathJax.  Any thoughts/progress on this?\n. ",
    "mauk81": "i created another pull request\n. ",
    "schovi": "Hi,\nI am getting error Unhandled rejection ParseError: KaTeX parse error: Unexpected character: '\u03f5' at position 2: x \u0332\u03f5 R\nShould this solved issue fix this?\n. ",
    "gagern": "@schovi that's more like #243, since this one here is specifically about unicode in \\text.\n. We don't really have cmr10, do we? I don't see these symbols if I open the fonts (KaTeX_Main-Regular.ttf seems the most likely analogon to cmr10, but I looked at KaTeX_Math-Regular.ttf as well) in fontforge and set the encoding to glyph order. I doubt they are included.\nBy the way, what's the story behind the KaTeX fonts? Where did they originally come from, and can the process of creating them be used to port additional symbols from the TeX fonts? Or is this manual work for some font designer, and we should expect trouble if we try to extend the font while preserving the style of the glyphs?\n. I guess \\widetilde, \\widehat and so on will be more difficult. At the moment, we have no information as to the width of the characters. We have only the heights, and all the horizontal alignment is taken care of by the browser. Which means we can make a line as wide as a box, and have that box be a bit shorter than some other box, but choosing the most suitable size for a big tilde or hat would require more knowledge about how wide the box in question actually is.\n. > I'm in the process of figuring out how to run the huxley tests.\nWith #264 in place, you get screenshots at least for Chrome on Linux. The corresponding test case snapshot demonstrates the issues discussed here, alkthough to a lesser degree I'd say:\n\n. Running our texcmp tool against this test case confirms that at large sizes the vertical spacing of KaTeX agrees with what TeX does:\n\nTeX rendering in green, KaTeX in red. (Horizontal spacing is decidedly different, probably because KaTeX uses the same font at all sizes while TeX will use a different font with wider glyphs for smaller styles. Although bugs like #249 may contribute to this as well.)\nSo if we want TeX compatibility then we have to accept the incorrect rendering by some browsers at some font sizes. If we want to ensure some minimal spacing, then we can certainly do so. I'd say somewhere in this clearance computation. And if we want to give users a choice, we can introduce a config option for this. Perhaps even one where people can choose the amount of additional separation they would like. Such a setting should probably apply to matrices as well.\n\nMaybe we can use some fancy CSS to ensure minimum widths of the gaps between elements or something.\n\nThis would in my opinion be fancy only if it were to introduce a font-size specific element, i.e. something like 0.5em + 3px or similar. Doing this kind of thing would break a million places and some very useful applications, so I'd rather avoid it. Anything else would be simply tweaking some shifts in JavaScript code, with no changes to the KaTeX stylesheet.\n. > confirms that at large sizes the vertical spacing of KaTeX agrees with what TeX does\nWell, mostly. In particular there appear to be no major additional gaps in the TeX rendering. However, investigating #408 I found that the actual placement of the exponents is slightly different. Long explanation there, but the summary is that we have the wrong values of \u03c314 and \u03c315 for script styles.\n. Can we close this, now that #246 has been merged?\n. @NateZimmer: yes, #246 implemented this, and KaTeX releases since 0.4.0 include that code. Simply give it a try on https://khan.github.io/KaTeX/. If something about matrices doesn't work as expected, that would likely be a separate issue.\n. My #246 which has just been merged provides the core functionality for arrays. But it doesn't do lines yet, neither horizontal nor vertical. Since lines were an essential part of the original post here, I'd leave this ticket open until lines are implemented as well. I have quite a number of things on my agenda, so if someone wants to take a stab at adding support for lines, feel free to do so.\n. I wonder where to best place this in the KaTeX world of things. The Parser in KaTeX mostly deals with basic things after all macro expansion has been done. The macro expander, on the other hand, performs macro expansions. But so far that's for pretty dumb macros only; it doesn't do any conditional processing and the likes.\nSo one way to deal with this would be introducing a separate layer into the token stream, between macro expander and parser, where mhchem could do its conversions. In that case it would read input tokens from the macro expander, and write transformed tokens to the parser.\nCurrently we don't have a public API for the token stream interface. And we don't have a hook how a plugin might get included in that chain, wrapping the macro expander in its own object. But both of these might be very desirable to have. Should we add them, @xymostech?. Since #246 got merged, we have support for environments, and with array and matrix environments also some experience on how to do this kind of alignment. So the main task here, the way I see it, is working out all the spacing rules. How does LaTeX typeset align*? How much space is there between rows? How much gap between columns? I guess the latter might be some \\hfill, at least between pairs of columns, but is there some minimum or default? Where in the TeX, LaTeX or amsmath sources can all of these settings be found? Once we have the dimensions, implementing them should be easy.\n. > I found this in amstex.sty \u2026 I take that to mean that there is no space between the columns or rows.\nOK, so there is no gap between rows or columns as far as \\halign is concerned. But the {}## inserts an empty group at the beginning of the left-aligned columns, while the \\strut@ will probably ensure some minimal row height and depth. Regarding the latter I read\ntex\n\\def\\strut@{\\copy\\strutbox@}\n\\addto@hook\\every@math@size{%\n  \\global\\setbox\\strutbox@\\hbox{\\lower.5\\normallineskiplimit\n         \\vbox{\\kern-\\normallineskiplimit\\copy\\strutbox}}}\nThe \\strutbox should be the same I referenced for arrays. In that case it has a height of 0.7\\baselineskip and a depth of 0.3\\baselineskip, as defined in ltfsstrc.dtx. The \\vbox should shave the upper \\normallineskiplimit off the top of the box, right? The \\vbox aligns its bottom-most baseline with the surrounding baseline, but then it gets lowered by 0.5\\nomallineskiplimit. So in effect we have the normal \\strut but with 0.5\\normallineskiplimit added to its depth and 1.5\\normallineskiplimit removed from its top? This feels strange, I'd expect a symmetric change, 0.5\\normallineskiplimit removed from either part. But TeX for the Impatient page 162 confirms:\n\nFor \\vbox, the depth is the depth of its last item, if that item is a box or rule.\n\nSo yes, it agrees with my interpretation above. Fortunately, \\normallineskiplimit appears to be 0pt by default (says ltplain.dtx) so we can probab\u00f6y forget all that manipulation, and treat \\strut@ as a synonym for \\strut.\n. @RoyiAvital: I'd say equation numbers are a different issue, to be discussed in a separate ticket. We should avoid supporting the {align} environment before we have equation numbering, though.\n. At least with LaTeX compatibility in mind, I'd say that the {align} and {align*} environments are only valid if they make up the whole body of the equation, and in this case the equation should be set in display mode. For inline mode, there is always {aligned}.\n. I disagree: if we support this, we will be bound to support it forever. And it will be a real problem with equation numbering. If people do\ntex\n\\begin{align}a&=b\\\\c&=d\\\\e&=f\\end{align}\\qquad\\begin{align}g&=h\\\\i&=j\\end{align}\nwhere would you place the equation numbers? Placing them in the right margin of the whole thing would be problematic, but for a plain {align} all by itself we might whish to place them in the margin one day, even if that's more difficult than using something matrix-like for now.\nOn the other hand, it would be fairly simple to mark environments which are only allowed at the outermost layer, and to verify that they are not preceded or followed by anything except possibly whitespace. I'd write this myself, except for the fact that I'm still waiting for a review on #386 (among others), which would make this even easier to express.\n. @Pomax: well, this guiding principle kind of breaks down for LaTeX constructs which are meant to be started in text mode. People (in my experience) don't expect all of their HTML documents to suddenly follow LaTeX semantics. They do expect to delimit those portions which are meant for KaTeX in some way or other. And KaTeX traditionally starts out in math mode. Which means there is no clear analogon here. The alternatives are either to have some flag which tells KaTeX to start in text mode, or to deviate from exactly reproducing LaTeX behavior, and allow text mode constructs to span the top level of what would otherwise be considered a math environment.\n. I've just created a branch https://github.com/gagern/KaTeX/tree/aligned which implements the aligned environment. Needs one visual test case and perhaps some parsing tests as well. And it will conflict with #386 which seems very close to being merged, so I won't post another pull request for aligned just now.\nNote that we don't have rubber lengths in KaTeX. I fixed the column distance as one \\qquad i.e. 2em, but that might be inappropriate in some environments. Is there a better suggestion?\n. Run make to get katex.min.js, or run npm install followed by node server.js to test it using a local development server.\n. I probably should have written this ages ago, seeing how many people seem to see this as the main missing feature of KaTeX.\n@kevinbarabash, do you have an idea as to how much jasmine tests you'd like to see for this? The cases environment for example just has a single check, to see whether its input parses. Do we have any additional features of the aligned environment which we can test for at this level?\n. Even without conflicting mappings at the moment, https://github.com/Khan/KaTeX/pull/261#issuecomment-115169955 shows how conflicts in the future might be an issue, so https://github.com/Khan/KaTeX/pull/261#issuecomment-114952458 suggested to make unicode-to-TeX opt-in unless very carefully vetted. See also #243 and https://github.com/Khan/KaTeX/labels/Unicode for some more discussion on unicode support in general.\n. I actually read the titple \u201cbreak pages\u201d in terms of pagination for printed media, not in terms of a defective or otherwise unusable web page.\nDisabling \\rule is just a tiny fix. With commands like \\hspace and \\kern scheduled for inclusion (#164), one can create excessive amounts of horizontal space, while the \\\\ for matrices (#246) can accept an optional argument which can be used to create arbitrary amounts of vertical space. \\begin{pmatrix}a\\\\[99999em]\\end{pmatrix} could probably cause serious problems for browsers, but we don't want to completely disable custom line skips for {pmatrix}.\n- So perhaps we want to hack the dimension lexer, to restrict all dimensions it parses, at least in safe mode. Anything in excess of 5em is probably abusive.\n- We could also have a look at the vertical extent of the final box, and fail if that exceeds some threshold. Coming up with a reasonable threshold here will be much harder, though, since one might well use {array} to display large tables or matrices.\n- We could add a counter to keep track of how many spans we're about to place in the DOM, and impose a limit on that, although without looping constructs I can think of no way to achieve this without excessive amounts of input, unless it's using big delimiters which would make it hit the height limit. But perhaps there is a way I haven't considered yet, or perhaps there will be a way when we add more features.\n- Finally, we definitely should have a way to disable \\def and friends once #250 gets resolved.\nShould we plan on adding something like safe:true to the options object passed to render? Sould we grant finer control over the various thresholds?\n. While the npm issues should be resolved by now, bower still has problems, as evidenced by #613. \n@xymostech wrote:\n\nWe can do this [tagging with built files] next release (which will hopefully be soon).\n\nApparently this didn't happen for 0.7.0, although 0.6.0 got such a commit in b94fc6534d5c23f944906a52a592bee4e0090665. If this is really what we want, we could prepare a 0.7.1 to include this, and also have a commit on master in the release script to ensure we won't forget this next time around.\nOne problem I see with this approach is that I'd have intended for e.g. release 0.8.0 to have its breaking changes rolled back and the rest released as 0.7.x, and then 0.8.1 could simply be merged into the 0.7 branch to produce 0.7.(x+1). That kind of merging becomes a bit more difficult if we get conflicts in the built artifacts, so we might have to write the git identifiers as 0.8.1^ and similar, i.e. omit the very last commit before each tag. No show stopper, but worth remembering.\n@kevinbarabash wrote:\n\nWe might also want to consider having a separate repo for the built files. The Polymer project does this.\n\nNot sure whether that's still an alternative to consider, but with CindyJS we do something like this: we have one repository for the source code, and another for the built artifacts. We use Travis to build artifacts on release, and those get deployed to the second repository automatically, using a repo deploy key with write permission that is stored as an encrypted file. If any of this is of interest here, the approach we use could probably be adapted to KaTeX. We have no experience with CindyJS and Bower so far, though.. Seems I am to blame: The release script used to add dist, but in 0ebbc256729e77ec40dbc7bf80eae1f0c7d02b07 for #546 I added that directory to .gitignore to keep the noise down. Perhaps we should remove that line from .gitignore before adding the content of the directory, or use git add -f dist/* dist/*/* or something like that.. npm has nothing to do here. In fact in #546 I was careful to ensure that npm packaging worked all right. Didn't think of bower then, though.. Created #615 for automatically unignoring those files, among other things.. This is the box structure, using this approach:\n\\hbox(6.83331+2.15277)x25.66368\n.\\OT1/cmr/m/n/10 L\n.\\kern -3.6\n.\\vbox(6.83331+0.0)x5.90282, glue set 2.04997fil\n..\\hbox(4.78334+0.0)x5.90282\n...\\OT1/cmr/m/n/7 A\n..\\glue 0.0 plus 1.0fil minus 1.0fil\n.\\kern -1.49994\n.\\OT1/cmr/m/n/10 T\n.\\kern -1.66702\n.\\hbox(6.83331+0.0)x6.80557, shifted 2.15277\n..\\OT1/cmr/m/n/10 E\n.\\kern -1.25\n.\\OT1/cmr/m/n/10 X\nAnd the definition in latex.ltx which contains more readable line breaks and indentation:\ntex\n\\DeclareRobustCommand{\\LaTeX}{L\\kern-.36em%\n        {\\sbox\\z@ T%\n         \\vbox to\\ht\\z@{\\hbox{\\check@mathfonts\n                              \\fontsize\\sf@size\\z@\n                              \\math@fontsfalse\\selectfont\n                              A}%\n                        \\vss}%\n        }%\n        \\kern-.15em%\n        \\TeX}\nSo we typeset the L and go back 0.36em. Then we save a T in box 0, and construct a vbox with the same height. In that vbox we do some font changing magic, the result of which is a 7pt roman font as can be seen from the boxe structure. The \\vss makes that letter flush to the top of the vbox. So essentially this is \u201ctake a 7pt A but make its top line up with the top of the 10pt letter T\u201d. Then comes the TeX command we already know, with -0.15em space between.\nPerhaps the \\TeX command should be added as well, while we are at it?\nBy the way, @xymostech thanks for pointing out that article about how to see the definition of a protected command. I incorporated that into the wiki.\n@drewsberry are you interested in adapting your code to this algorithm?\n. I should have looked at this before starting my own work on this issue, as I did in #258. Nice work already. Your MathML construction is very elegant with that math-variant thingy. It avoids those exotic unicode symbols which I had been using.\nOne thing that I think I got right is the list of supported characters for each font. With your code, if someone drops a lower-case letter in any of these functions (except for k in \\mathbb), it will use the KaTeX_Main font and display a warning message about missing metrics. I think it would be better to fall back to normal italic symbols in those cases. That's what MathJax is doing there, and it feels right to me. LaTeX just renders whatever symbols happen to be in the AMS font in these locations, but I'd consider this a bug, not a feature. I haven't yet decided if the MathML should do such a fall-back as well, i.e. whether it should be closer to the input or closer to the output if these don't agree.\nThe global variable fontStack in buildMathML is really ugly. In particular, if one rendering run aborts due to an exception, subsequent runs may start with a non-empty stack. Perhaps we should add an options object, as it's used in buildHTML. Or perhaps we should make all of these functions methods of some object which can be used to hold such state. Or we should at least clean out the stack at the top level invocation for buildMathML.\nDo you want to add \\mathscr as well? Can this be distinguished from \\mathcal in the MathML variant? How about the obsolete but shorter \\Bbb synonym to \\mathbb? I believe that there may be similar synonyms for the other fonts as well.\n. > If \\Bbb is obsolete what's the motivation in supporting it?\nBecause people are till using it. In my opinion it's the same reason which made you jump through hoops to get \\over working despite the existence of \\frac, except that there are no serious hoops involved for \\Bbb. OK, \\over is plain TeX, right, which hasn't really been \u201cobsoleted\u201d by LaTeX, but that's just a matter of terminology. Both have more modern replacements, both are being used nonetheless, and both are supported on the (La)TeX side, even if a notice gets displayed.\n. > are there any other font aliases I should add?\nFrom my amstex.sty:\ntex\n\\def\\frak{\\mathfrak}\n\\def\\Bbb{\\mathbb}\n\\def\\bold{\\mathbf}\nAnd from my article.cls:\ntex\n\\DeclareOldFontCommand{\\rm}{\\normalfont\\rmfamily}{\\mathrm}\n\\DeclareOldFontCommand{\\sf}{\\normalfont\\sffamily}{\\mathsf}\n\\DeclareOldFontCommand{\\tt}{\\normalfont\\ttfamily}{\\mathtt}\n\\DeclareOldFontCommand{\\bf}{\\normalfont\\bfseries}{\\mathbf}\n\\DeclareOldFontCommand{\\it}{\\normalfont\\itshape}{\\mathit}\n\\DeclareOldFontCommand{\\sl}{\\normalfont\\slshape}{\\@nomath\\sl}\n\\DeclareOldFontCommand{\\sc}{\\normalfont\\scshape}{\\@nomath\\sc}\n\\DeclareRobustCommand*\\cal{\\@fontswitch\\relax\\mathcal}\n\\DeclareRobustCommand*\\mit{\\@fontswitch\\relax\\mathnormal}\nLooking at my amsldoc.pdf:\n\nFor more comprehensive information on font use in LaTeX, see the LaTeX font guide (fntguide.tex) or The LaTeX Companion [4]. The basic set of math font commands in LaTeX includes \\mathbf, \\mathrm, \\mathcal, \\mathsf, \\mathtt, \\mathit. Additional math alphabet commands such as \\mathbb for blackboard bold, \\mathfrak for Fraktur, and \\mathscr for Euler script are available through the packages amsfonts and euscript (distributed separately).\n\nSo if you are aiming for completeness in terms of supported font commands (I'm not saying that you should be, if that means merging this feature will take considerably longer), then \\mathbf, \\mathsf and \\mathtt should perhaps be added to your TODO list.\nAnother thing to consider is \\boldsymbol, declared in amsmath.sty and amstex.sty. We probably could reproduce \\pmb as well, but if we do, we should do it in the same \u201cpoor\u201d way as \\pmb does, i.e. by typesetting the same box repeatedly, with slight offsets. Or perhaps using the text-shadow CSS property to achieve something similar. I'd say that's a different issue, and not one for which I envision urgent need.\n. Personally, I'd combine all the screenshot tests into a single one, e.g. using the array environment for multi-line support. But that's just my taste, I guess, trying to keep the number of image files in the repository small.\nI guess I'd also include \\mathbb k in the mathbb screenshot. And perhaps the KaTeX symbol in one of them, to verify it's not affected by font changes.\n. The old font commands (those declared using \\DeclareOldFontCommand) don't affect the single following group, but instead the current group to the end of that group, the way sizing commands work. So they are not exact synonyms. I guess that we generally should have a screenshot to verify the scope of each of these commands: affecting deep levels not just the top level, but ending after the argument (for the modern notation) resp. at the end of the current group (for the old notation).\n. I don't see how this would be handled with macros, particularly the interaction with the atom type. Can you illustrate that idea? What would the \\not macro look like?\n. \\def\\not#1{\\longSolidus #1} could almost be abbreviated to \\let\\not=\\longSolidus except for the fact that \\not{ab} is essentially \\longSolidus{a}b which shouldn't make a difference. In LaTeX the definition of \\not is \\not=\\mathchar\"3236 and it is of type \\mathrel. Looking at it this way, just your modifications to symbols.js should be sufficient to emulate LaTeX. Anything more fancy might be well intended, but actually contrary to how LaTeX does things, leading to incompatibilities.\n. But if \\longSolidus overlaps the preceding character, then it behaves differently from the \\not in LaTeX. In particular it will be aligned to the right edge of the group it affects, not the left edge. Perhaps we should add kernings so that the glyph is shifted to affect the following character? Or edit the font to achieve that?\n. > \u2026 it should already be right aligned.\nYes, and that's not consistent with TeX. In LaTeX, \\not{abc} will essentially be {\\not a}bc, while your {abc}\\longSolidus would look like ab{\\not c}. Sure, with multi-character groups we could split up the group and make this a\\longSolidus bc, but the same problem holds for symbols of different widths, and for more complicated things in that group following the \\not.\n. amsopn is the relevant package here, so texdoc amsopn will provide relevant implementation details. \\operatorname builds on the more elementary \\qopname.\ntex\n\\DeclareRobustCommand{\\operatorname}{%\n    \\@ifstar{\\qopname\\newmcodes@ m}%\n            {\\qopname\\newmcodes@ o}}%\n\nIn the interior of the \\mathop we need a null object (we choose a zero kern for minimum waste of main mem) in order to guard against the case where #3 is a single letter; TEX will seize it and center it on the math axis if there is nothing else inside the \\mathop atom.\n\ntex\n\\DeclareRobustCommand{\\qopname}[3]{%\n    \\mathop{#1\\kern\\z@\\operator@font#3}%\n    \\csname n#2limits@\\endcsname}\nThis command \\qopname is in turn used by many definitions, including the \\limsup from #111. They tend to have \\relax in place of #1. #2 would either be o for \\nolimits@ which is \\nolimits but eats any \\limits that might follow, or it would be m for \\nmlimits@ which is \\displaylimits, i.e. limits above and below in display mode, but to the right in inline mode.\nIf we can get our macro expansion to support this kind of command, we'd have access to a lot of built-in definitions with almost no additional work.. There is a known problem with the Lap example, wich sometimes yields different answers. See https://github.com/Khan/KaTeX/pull/264#issuecomment-114272707. Would it make sense to exclude that example in this test run?\n. I'm making good progress with automatically generating PNGs from LaTeX as well. I guess I'll describe a docker for that, too, to fix the texlive version we're using as well as the ghostscript driver which does the rasterization for imagemagick.\n. The way I see it, \\kern is often followed by a dimension without braces around it. Would we want to support that as well? If so, we would have to adjust the parsing of sizes in my macros branch, at least if we actually follow some variant of that branch to implement macros.\n. Nah, we shouldn't do this in the lexer, but on the token stream. That's what TeX does, as far as I understand things.\n. I think a length would be finished after its two letter unit has been parsed. But I'd have to read The TeX Book to verify this first.\n. True, but it has the benefit of working even if there is some macro expansion involved in the length notation.\n. plus, minus and stretchable glue might become relevant at some point if we manage to use flex boxes to model these. Should be possible, at least in theory and for some situations. Not sure how urgent this is, so I'd say we shouldn't block on support for it.. > We probably could be doing more to insulate KaTeX from external styles.\nPerhaps we should have a look at reset stylesheets and port the relevant portions from one or more of these to the katex class. Although I notice that none of them seems to mention word-wrap. :worried:\nAnother thing worth considering would be prefixing all CSS class names used by KaTeX with katex_ or something similar. The KaTeX CSS is written in such a way that all its definitions only affect things inside a top level KaTeX element, but the converse is not true. For example, a page using a class a to denote its article headlines, or whatever, might well break the KaTeX logo which uses a for its second letter.\n. These are not two different approaches to the same problem, or not really. The reset stylesheet avoids interference with low-specificity settings and inherited properties while the namespace avoids interaction with non-inherited high-specificity rules.\n. Ideal candidate for that, yes. Looking at the definition in amsmath.sty I read\ntex\n\\newcommand{\\implies}{\\DOTSB\\;\\Longrightarrow\\;}\n\\renewcommand{\\iff}{\\DOTSB\\;\\Longleftrightarrow\\;}\nSo these should have some interaction with #599, too. Would be nice to see the combination of all these features work together as intended. A definition without \\DOTSB might go into master shortly after #605 while #599 waits for a follow-up implementing JavaScript-written macros with look-ahead capability.. \\relax is a non-expandable command, not a macro, so we probably should add support for that in functions.js. I'm not sure how a \u201cdo nothing\u201d would best be represented in the parse tree, though.. Can we close this, now that #246 has been merged?\n. A non-macro definition on the other hand should be fairly easy. I've written some details about that in the pull request. Read that first to better understand the macro in question.\nDoing this as a macro following the official definition would be really tricky, since we'd need kerning (which might be a good thing to have in any case, and which shouldn't be too hard except for the strange lexing rules for lengths), and we'd need box registers and ways to measure the content of boxes at least vertically (I believe horizontally is impossible), and we'd need raw box construction commands like \\vbox to \u2026, and we'd need flexible glue for \\vss. I don't think this is realistic in the near future, even though I've recently made some progress regarding macro definitions.\nThe logo could probably also be described as a macro using simpler means, like e.g. \\raisebox instead of the \\vbox. But that would mean manually computing the offset up front, and hardcoding it into the macro instead of deriving it from the font metrics. I'm not sure this is desirable, particularly seeing how many people (myself included) have asked for KaTeX to also work with different fonts.\n. The tool I recently commited in https://github.com/gagern/KaTeX/commit/5e127ba6febe0d0850718c7142863a280c42fb1a can be used to display KaTeX fonts in browser, together with the corresponding rendering in system default fonts. As far as I could tell from skimming the lists, the symbols all match up except for symbols from the private use area. There are a few of these in the Size1 and Size4 font, apparently for horizontal braces or something like that. And the Typewriter font has typographic single quotation marks at \\u07E2 and \\u07e3 which is incorrect.\n. @spicyj wrote:\n\nI thought we had a tracking issue for this already, but I guess not.\n\nWere you perhaps referring to #16? That bug has no discussion to it, but it does have an asignee.\nIn trying to sort through the various unicode bugs, this one here seems to have the most momentum to it just now. I'm conducting a short survey, trying to see what else might be useful.\n- Apparently pull requests #59 and #73 were closed by the contributor, perhaps due to lack of positive feedback? There the approach was to list unicode symbols with common characteristics (same font, same group type) in a string literal, which is an alternative approach to the auto-generation discussed above. I guess they might still be used to cross-check anything that's been done here, and identify contradictions to be investigated further.\n- #49 suggests a tool which maps unicode to LaTeX. We might use that to check any results here for completeness, although I think it would be easier to check whether there are any symbols, particularly in the Main and AMS fonts, which are not accessible by one of our symbol definitions.\n- I just opened #260, to cover unicode symbols which we map to latin letters from some special font.\n- #65 mentions accented characters in the original statement. I believe that there might be a distinction there for text vs. math. For text it could have been handled by allowing unicode in text fragments, as #15 suggests. For math mode we'd probably need more information, and a font to render it, so that's way more complicated.\n. @kevinbarabash Adding the extra symbols would be easy, now that we have d423bec08921b293e0beecaa718226e310ba3ef9 to get them past the lexer without hassle.\nWhat has me worried is the opt-in nature of this feature, which we agreed upon in response to https://github.com/Khan/KaTeX/pull/261#issuecomment-114952458. We need that configuration information available and taken into account in all the places where we make use of the symbols table, and I haven't yet decided on the most elegant way to achieve that.\n. I wrote some parser test cases for environment parsing. A more specific test case for array doesn't fit in well with what's currently in katex-spec.js. I wonder whether it would be a good idea to test input string against resulting parse trees, saved in a big JSON list. Of course noone writes down the expected parse tree manually, but one may well verify it before saving the file. What do you think?\nScreenshot tests seem a bit premature. Since I know that I'll probably be modifying the layout, I'd rather postpone that till shortly before merging. Regarding CLA I'll have to check with my university.\n. Up till today I had assumed that delimiter parentheses would scale smoothly between different sizes. Now I know that they grow in increments, both in LaTeX and in KaTeX. However, the points at which they grow seem to be very different:\n\nThis is simply $$\\begin{pmatrix}1\\\\[1.52ex]2\\end{pmatrix}$$ rendered but with different values plugged into that extra row space argument. How much effort should we put into delimiters to get the sizes just as LaTeX uses them?\nApart from this, the spacing of my arrays should be pretty close to what LaTeX does now, since I've put in some effort to reproduce those algorithms. But if delimiters are going to change (and I believe that we should be switching to bigger delimiters a bit earlier), then I'd rather see that handled before creating screenshots for automated testing.\n. I can't work out why the delimiters are smaller than they are in LaTeX. The computation from Rule 19, with \\delimiterfactor=901 and \\delimitershortfall=5pt is reproduced in makeLeftRightDelim. The \\left\u2026\\right documentation on page 292 doesn't seem to add any space either. (Note: page 359 lists more delimiters than KaTeX supports.) Page 442 suggests\n\nSee the METAFONT manual or the system documentation of tfm files for further information about successors and extensible characters.\n\nI don't have that manual, and I don't know what file this tfm documentation could be. Perhaps either of these contains some more details on how extensible characters should be composed from their parts? Or perhaps the font we use doesn't exactly match what LaTeX uses? Right now I don't know how to proceed.\n. My code won't work with infix operators either (so far). I haven't yet decided how to tackle this. I could either have parseImplicitGroup return null for every &, \\\\ or \\cr, and have some outer function to collect the implicit groups of the alignment. Or I could try to parse the list after the fact, including handling for the alignment commands in handleInfixNodes. The latter looks closer to what I already have, but I fear that other stuff is also affected by the implicit grouping, e.g. style commands. \\small a & b must get parsed as {\\small a} & b not \\small {a & b}. So I tend towards the former.\nPage 153 of TeX for the Impatient describes things like \\lineskiplimit. But as far as I can tell, that only affects text mode vboxes. In $$\\begin{matrix}\\dfrac88\\\\\\dfrac88\\end{matrix}$$ the two matrix elements will always overlap, no even if \\lineskiplimit and \\lineskip are set to 100pt each. So I'd say that was a bit too impatient here.\n. There is how LaTeX sets this \\begin{pmatrix}1\\\\2\\end{pmatrix}. Display style or not makes no difference.\n.\\mathon\n.\\hbox(14.5001+9.50012)x19.7223\n..\\hbox(0.39998+23.60025)x7.36115, shifted -14.10013\n...\\OMX/cmex/m/n/10 ^^R\n..\\glue -5.0\n..\\vbox(14.5+9.5)x15.00002\n...\\hbox(8.39996+3.60004)x15.00002\n....\\glue(\\tabskip) 0.0\n....\\hbox(8.39996+3.60004)x15.00002\n.....\\rule(8.39996+3.60004)x0.0\n.....\\glue 5.0\n.....\\glue 0.0 plus 1.0fil\n.....\\mathon\n.....\\OT1/cmr/m/n/10 1\n.....\\mathoff\n.....\\mathon\n.....\\hbox(0.0+0.0)x0.0\n.....\\mathoff\n.....\\glue 0.0 plus 1.0fil\n.....\\glue 5.0\n....\\glue(\\tabskip) 0.0\n...\\glue(\\lineskip) 0.0\n...\\hbox(8.39996+3.60004)x15.00002\n....\\glue(\\tabskip) 0.0\n....\\hbox(8.39996+3.60004)x15.00002\n.....\\rule(8.39996+3.60004)x0.0\n.....\\glue 5.0\n.....\\glue 0.0 plus 1.0fil\n.....\\mathon\n.....\\OT1/cmr/m/n/10 2\n.....\\mathoff\n.....\\glue 0.0 plus 1.0fil\n.....\\glue 5.0\n....\\glue(\\tabskip) 0.0\n..\\glue -5.0\n..\\hbox(0.39998+23.60025)x7.36115, shifted -14.10013\n...\\OMX/cmex/m/n/10 ^^S\n.\\mathoff\nSo each line has a height of 8.39996pt+3.60004pt=12pt, with zero space between them. And with ptPerEm=10 this makes 12pt=1.2em=0.61em+0.59em. So I'd say that my rendering is more correct here. It also agrees with what LaTeX does:\n\nI'm not worries about the internal spacing of my array box, I have much confidence in that. What I am worries about is the delimiters, since as you can see in my previous screenshot, they don't agree with what LaTeX does. And the individual parts of the delimiters are not represented in the box structure either, so we can't compare at that level.\nWhat we can see is that the size of the delimiters, 0.39998+23.60025=24.00023, is slightly bigger than the total height of the vbox, 14.5+9.5=24.0. This leads to 14.5001+9.50012=24.00022 as the height of the whole box with delimiters. If anyone can explain where one of these two bigger sums comes from, then we're making progress here.\n. I asked for help on the TeX Stack Exchange. Perhaps someone there knows where these numbers come from.\n. Now that I think of it, perhaps the difference is simply due to the way the next suitable delimiter size gets chosen. But it's not that easy. With $\\begin{pmatrix}1\\\\[2.16ex]2\\end{pmatrix}$ I get\n.\\hbox(19.15+14.14998)x20.83339\n..\\hbox(0.39998+29.60031)x7.91669, shifted -17.10016\n...\\OMX/cmex/m/n/10  \n..\\glue -5.0\n..\\vbox(19.15+14.14998)x15.00002\nwith 19.15+14.14998=33.29998 outer and inner size but 0.39998+29.60031=30.00029 delimiter size. So the assumption \u201cthe delimiter is no smaller than the content\u201d is incorrect. And I was wrong: one can see the parts of a big delimiter, the examples so far just weren't big enough. With $\\begin{pmatrix}1\\\\[2.17ex]2\\end{pmatrix}$ LaTeX suddenly produces\n.\\hbox(20.50017+15.50017)x22.50005\n..\\vbox(0.39998+35.60036)x8.75002, shifted -20.10019\n...\\hbox(0.39998+17.60019)x8.75002\n....\\OMX/cmex/m/n/10 0\n...\\hbox(0.39998+17.60019)x8.75002\n....\\OMX/cmex/m/n/10 @\n..\\glue -5.0\n..\\vbox(19.17151+14.17151)x15.00002\ni.e. a paren split in two parts. It takes 3.1ex till KaTeX uses two parts there. At that point, it reports delimiters with a size of 1.155+0.64502=1.80002em, which is a good match for the 0.39998+17.60019=18.00017pt in LaTeX. So it knows how big its delimiters are. But what about the content? Still with 3.1ex, makeLeftRightDelim sees 19.2249+12.5805pt while LaTeX reports \n21.1736+16.1736 for the inner vbox. So the outside height of that vbox is wrong.\n. Found my mistake. Now I'll only have to get docker up and running, and then I'll be able to take some snapshots. But not today.\n. >  I think maybe parseExpression could be modified to accept multiple tokens to break on.\nDo we need an argument list for this, or can we hard-wire this? Is there ever a situation where we want parseExpression to continue past one of }, \\right, \\end, &, \\\\, \\cr, \\egroup? I can think of no use case where this would make sense, so I'd terminate on all of these, and the caller can then ensure that the current lexer token is the one (or among those) it expects.\n. When we are inside \\text, we break on all the things I mentioned, and report an error if it's not }. After all, a lone & or \\end inside a \\text is an error, and expect can be used to report that. So instead of letting parseExpression decide whether to break or error, I'd let it break in all cases and leave generating the error to the caller.\n. Come to think of it, we probably need this behavior in any case. When parseImplicitGroup has to handle a size or style function, that implicit body has to end at & if we are inside a matrix, and has to end at \\end if we are inside an environment, and so on. So if we don't want to pass the list of break symbols all the way down to the parseImplicitGroup call, then we have to make sure that we don't need such a list in the first place.\n. @kevinb7 \n\nif ([\"}\", \"]\", \"&\", \"\\\\right\", \"\\\\end\"].indexOf(lex.text) !== -1) {\n\n] is a special case, since it's an ordinary symbol except when parsing an optional argument. So we should keep the breakOnToken approach for that, in addition to the hard-wired expression endings.\n\nIn order to get parseExpression working correctly in this situation we'd have to have it return which token it's halting on.\n\nI've let parseExpression return the token it's halting on as a peek property. But that's just for the sake of performance. Theoretically we could lex again starting at the returned position to see what token comes next. I think tat on the whole we might be lexing a lot of stuff more than once. Might be worthwhile to investigate whether this is really the case, and if so decide on how to mitigate the issue. But that would be a separate ticket.\n. I testes one infix fraction, and it worked. Will write test cases and commit them when I find the time to do the snapshots, to add both in one go. I'm mostly on OS X at work, while I assume that docker only runs on Linux. Had to reconfigure my kernel till it should run, haven't tried it yet. Have you ever considered using PhantomJS to create snapshots? I don't know whether having different versions of libraries instaled could lead to different results with this, but it might be woth investigating.\n. Finally got docker up and running in my VirtualBox. That's one huge chunk of software for just a few snapshots! And on some runs the Lap example gave a different result. I don't know what has me more worried: the fact that it had a different result, or the fact that even after all this effort, the result wasn't perfectly reproducible.\nNow I'm trying to design one good example for arrays and matrices. And in the process I realized that I'm not strictly behaving the way LaTeX does. So far I've inherited the size and style from the surrounding environment. In LaTeX an inner matrix set in a cell with \\scriptstyle is nevertheless full-sized. Reducing matrices in size is a very tricky problem, which either requires the smallmatrix package, or executing a size command outside math mode, i.e. in a nested text box. Currntly KaTeX can't handle mode changes (it doesn't know about $ or \\mbox). On the other hand, it does allow size changes in math mode, which are forbidden in LaTeX.\nSo I wonder, how much should we support the anti-features of LaTeX? Should I change the style back to normal when building the matrix cells? Should I do something about the size? Should I capture any of these aspects in my main screenshot for arrays, or should I rather demonstrate undisputed behavior there, and leave such details to separate screenshots which can be changed if we change our opinion? Or not create a screenshot at all, to leave things unspecified?\n. > That's something we need to look into.\nIf I had to guess, I'd say the HTML engine hasn't settled down by the time the screenshot is taken. But that's just guessing. Would be interesting to try whether a 2 seconds pause before snapshotting will lead to a reproducible behavior there\u2026\n\nYou're talking about nested matrices, that might be used for tensors, right?\n\nNot neccessarily. When writing inline math, using a smaller font makes sense for even very small matrices like 2\u00d72.\n\nOnce we merge this in maybe you can create an issue for the non-compliant behavior you've described.\n\nFine with me.\n\nI assume by this you mean non-nested arrays and matrices and an example of infix operators being rendered correctly.\n\nI can nest them all right, I just can't scale them down. Will commit that tomorrow, have that work begun on my other computer.\n. I added a screenshot which covers many of the aspects of how arrays and matrices are rendered. Here is a comparison of that screenshot against what LaTeX renders for me:\n\nThe black parts are black in KaTeX but white in LaTeX, the white parts the other way round. As you can see, most parts match pretty good. Fonts in KaTeX tend to be a bit thicker. Both LaTeX and LaTeX have tiny gaps in the right delimiter, but KaTeX has two of them. The biggest differences are with the positioning of the fraction, and the spacing around the solidus. I still have to investigate the causes for these discrepancies. Since I don't know how long this investigation might take, feel free to merge this once you consider it good enough, and I can follow up any remaining issues in separate tickets.\n. > Also, indeed KaTeX fonts are thicker, they're designed that way\nThought so, makes a lot of sense on screen, since we can't expect the kind of resolution a printer would have.\n\nwe forget to put some space around fractions. It's a separate issue so don't worry about it.\n\nI noticed you opened #249 for that. Nice. (It might have been even nicer if that post had given me some kind of credit, for creating the image or for finding the issue.) If you have an idea of where this is coming from, I'll not investigate this myself any further just now.\n\nCould you check what happens when sizing commands are used inside the environment? Even if the output doesn't match LaTeX's output for all different sizes, as longs as the rendering does something reasonable it should be okay.\n\nThe example with the 1/2 in solidus notation is using an explicit \\scriptstyle. If you don't count that as a sizing command (I guess in TeX parlance it is not) then I can certainly downsize another entry as well, using \\scriptsize for a change. But that would mean we're testing for some deliberate deviation from LaTeX, and I thought that I should restrict the screenshot to the undisputed behavior. Or is it an undisputed decision that sizing in math mode should do reasonable things, even if doing so deviates from LaTeX? I'd have assumed this to be controversial. Long story short: It does work reasonably, for sizing as well as styling, but I'd rather not test for it unless you insist.\nIf you don't insist, can this be merged? A CLA for me should have arrived by now.\n(By the way: I'm also working on rendering KaTeX to HTML5 canvas. Is that of interest to the project? If so, I'll post a pull request once I'm reasonably satisfied with things.)\n. > I'm curious about how you managed to line things up. Was there a lot of manual work creating that image? I'm curious b/c it would be nice to have an easy way to compare KaTeX output against LaTeX output for a variety of things.\nWhat I did was this:\n1. Render LaTeX to article PDF, crop that and import it into GIMP at high resolution.\n2. Open screenshot from KaTeX and copy the imported PDF to that as a layer.\n3. Resize that until the positions mostly match. This was a lot of trial and error.\n4. Set mode to grain extract to show differences.\n5. Tweak position to minimize differences.\nIf you'd like to automate generation of images like these, I'd suggest an alternate approach.\n1. Render to PDF to an as-small-as-you-can-make-it PDF. There is a class for that, don't remember its name just now.\n2. Rasterize that PDF at the correct resolution so that we'd expect sizes to match. We know how big our font is in LaTeX, we know how big a TeX point is, and we know what resolution we use for screenshots. So we should be able to work out the correct resolution to use here.\n3. Align images using an FFT-based correlation computation. I've done stuff like this before.\n4. Compute differences by iterating over the pixels, to avoid dependency on GIMP.\n\nThere are some code style changes that should be made before merging. \u2026\n\nI'll have a look. My main reason for not following the functions pattern in the first place was that I expected most environments to carry information from begin to end. Now that that is under the control of a single function, there might be no strong reasons left for this approach.\n\nI have some ideas on this but I think that the discussion would be better served in a separate issue.\n\nSo let's continue the render-to-canvas discussion on #251. I'm looking forward to hearing your ideas.\n. @kevinb7 wrote:\n\nEnvironments are essentially the same as the entries in functions.js, except their handler methods should also some parsing.\n\nI implemented things this way, but I'm not happy about it.\n- Abusing this to refer to the parser feels a bit counter-intuitive. What makes this argument different from all the others, that it has to get passed another way? If anything deserves the name this in this context, it's the name of the function resp. environment.\n- Stuffing the arguments to begin in among all the other fixed arguments like pos and mode feels a bit confusing, I think.\n- Having everything in one big array means 8 spaces more of indentation, i.e. 1/10 of the allowed width wasted before the handler even starts.\n- Having everything in one big array means it's harder to plug in helper functions (like parseArray, but perhaps imagine something with a more narrow scope) close to the code that's using them.\n- It also means helper data (like the map from environment name to delimiter pair) can't simply be a static variable associated with the prototype.\nBut I agree that it makes the code more similar. Just wanted my objections noted. I'd be glad to change both environments and functions together to mitigate some of these aspects.\n. I squashed everything into one commit, except the improvements to the stacked delimiters, since these are actually a separate thing and not directly linked to all the rest. I had worked on that since I had assumed the reason for the spacing discrepancies somewhere in there, but in the end it was somewhere else. Hope that's OK for you.\n. Using the image diff format from #268, the diff now looks like this (green is LaTeX, red is KaTeX):\n\nThe difference in the NestedFractions test is probably due to the same problem:\n\n. OK, I did some research on this. TeX puts 1.2pt of space before and after every fraction. This is the value of \\nulldelimiterspace. So the branches of the genfrac handler where it adds delimiters should add such null delimiters if no actual delimiters are given. The leftright handler already adds null delimiters, so we can duplicate functionality from there.\nI also noticed that when I apply \\showlists to some fraction, each fraction is contained in a \\mathord, and is not simply of type Inner. This is probably due to the fact that the definition of \\frac reads\ntex\n\\DeclareRobustCommand{\\frac}[2]{{\\begingroup#1\\endgroup\\@@over#2}}\nwhich has two sets of braces, so it forms a brace-delimited group which gets translated into a \\mathord.\nBoth the \\nulldelimiterspace and the mechanism turning the Inner into an Ord are discussed in https://github.com/mathjax/MathJax/issues/969, with valuable explanations from David Carlisle.\n. Site-specific commads are on my agenda as well. I'd like to see single-string shorthands for simple cases:\njs\nkatex.render(formula, element, {\n    macros: {\n        limsup: \"\\\\operatorname{lim}\\\\,\\\\operatorname{sup}\",\n        RR: \"\\\\mathbb{R}\",\n        set: \"\\\\left\\\\{#1\\\\,\\\\middle\\\\vert\\\\,#2\\\\right\\\\}\"\n    }});\nYou could construct frunctions in the way KaTeX implements them from these string representations. For more complicated things, we could still let the user provide a function. But then compatibility is a major issue, so I'd make this something like this:\njs\nkatex.render(formula, element, {\n    macros: {\n        limsup: defineMacro(1, function(api) {\n            return api.hlist(api.text(\"lim\"), api.spaces.thinspace, api.text(\"sup\"));\n        })\n    }});\nThat way, the implementation would have access to a well-defined set of functions, encapsulated by that api object. We could make an effort to maintain backwards-compatibility there. The number 1 in the first argument to defineMacro would be a version number. Version numbers smaller than the current one could result in the handler getting wrapped inside some kind of compatibility layer.\n. I would like to keep macros per-parser, so that different KaTeX formulas can coexist on a page without interfering with one another. But you could also store any macro defined by \\newcommand back to the macros property of the options object. That way, different formulas sharing the same macros object could share the same macros, even if those are defined from within the formulas.\n. > Maybe someone can provide an example where providing the TeX definition as a string would be more complicated than a JS API.\nFor example a function which takes a bunch of digits as an argument and returns a barcode representation of that sequence, composed of rules. You could do this in LaTeX, but it would require quite advanced macro programming, so for KaTeX it's certainly easier to do such things in JavaScript, perhaps building on existing libraries. Most mathematicians don't need barcodes, but I hope you accept this example nevertheless, since you never know what people might or might not need.\n. > In terms of performance aspect of defining macros with a TeX source string, we could store the parsed string as a tree of ParseNodes and clone that whenever the command is used.\nCan we safely do so? For functions which can be used in text and in math mode, we should probably cache two distinct versions, since the parser includes that mode in many of its nodes. And I think we should offer some opt-out mechanism for that caching, although we could of course do that once the need arises.\n. I wrote some code trying to implement this, and found out that I hadn't considered all aspects. The main problem is that in our current setup, a function must return a single value. It is not allowed to return zero or more than one value. A macro which expands to a new set of tokens violates this. Ideally, the macro would return nothing, but just cause the parser state to change to something which has the macro body at the beginning of its current input token stream. Currently we have no mechanism to return nothing.\nTo show that this is relevant, consider the following scenario:\ntex\n\\newcommand{\\foo}{123}\n$e^\\foo$\nLaTeX renders this as $e^1 2 3$, i.e. although the whole macro appears to be in the superscript position, actually it's only the first token of its expansion. So it is not enough to parse the expansion of the macro in a separate Parser and Lexer.\nThe best solution I can think of right now is having parseFunction return some special value when it encountered a macro, and catching that special value some levels up the call graph. But since parseFunction is pretty deep in the call graph, that's difficult. For example, if the macro expansion contains a &, then we have to deal with that in parseExpression, four layers above. handleSupSubscript and parseArguments will have to deal with the special case of a macro expansion separately, I guess.\n\n. But perhaps I'm going about this the wrong way. Perhaps macro expansion should be a separate layer, between lexer and parser. So any time the Parser needs a new token, it can ask the MacroExpander for the next token. And the MacroExpander will know whether the token it got from the lexer is a known macro name, and if so, will expand that. If we ever do things like conditionals and recursion, we'd have to deal with these in the MacroExpander. That way, the parser will never see a token which still needs to be expanded. At least in theory.\nIn practice, it's not that simple. For example, we currently inform the lexer of the kind of thing it should lex; we can't do that if the tokens in question come from a macro expansion, so we have to add functions to turn tokens back into lengths, colors and so on. We also will need some cooperation between MacroExpander and Parser when defining a macro. Chapter 20 of The Tex Book has a list of all situations that could suppress a macro expansion; getting them all right will require considerable work.\nSpeaking about The TeX Book, perhaps the MacroExpander mentioned above could be shortened to Gullet, which is the term used throughout that book. Of course, in that case the Lexer should become Mouth for consistency, so I'm not sure we'd want to do that. Just thinking.\n. My macros branch has support for site-specific macros, i.e. macros defined by the invoking JavaScript code, not (yet) using \\def or \\newcommand. They don't accept parameters either so far. Nevertheless I consider this a juge step forward.\nUnfortunately, that branch builds on some other things, so please put this on the roadmap after #266. See https://github.com/gagern/KaTeX/compare/8496a1e40f8dfbfc8dd7d2e7b5096bd5c2b01c02...gagern:macros for a preview relative to that issue.\nThe way I implemented this is by introducing a MacroExpander (or \u201cgullet\u201d) layer between Lexer and Parser, as outlined above, since I assume this to be closest to what TeX does. It also allows using macros in places where sizes or colors are required, which would not work otherwise.\n. > Can you test a macro like this?\nhttp://localhost:7936/?text=\\oneover{x}&\\oneover=\\frac{1} looks as it should.\nBut your question reminds me that there was something about infix operators like \\over and the breakOnInfix parameter that still required work. Indeed, \\scriptstyle 1\\over x is currently broken. Working on that.\n. > [\u2026] what happened here?\nSince my own branch of KaTeX worked well enough for our project, I somehow got distracted and didn't land all of my modifications. With macros being the main missing component, unless you consider render-to-canvas a candidate for merging. I've been using macros from an external dictionary this past year, using this code (currently same as the diff link I provided above). It builds on a draft version of #364, so there are some chances that it would apply to current source without too much manual merging. Will probably try a rebase tomorrow.\nI seem to recall that I did want to get some improvements to token position reporting in first, as a pull request in its own right, and somehow that got me stalled. By the way, @cbreeden, error reporting is the prime use of positions, and having that available at many levels can help producing quality error messages.\n. @cbreeden This is open source, hack all you like. Of course, if you come up with something good, and that gets merged, I'd be glad if it had some API similar to what I had, since as I said I'm using this in a project and would like to continue doing so with a more recent version.\nRebasing the code is no fun at all, mostly because it's been so long since I worked with this.\n. @cbreeden and anyone else interested: I just rebased the code and created PR #493 for it, but I gave up on disentangling the error-reporting improvements from the parser-lexer restructuring from the macro expander. I hope I can get someone to review the combined effort.\n. This can now reproduce most of the formulas used for the snapshot tests. \\rule is the only exception that I'm aware of. I'm surprised by how quickly this is progressing and nearing feature completeness. So if you notice anything which doesn't work besides \\rule, please add a comment here and I'll investigate.\nIf anyone has experience with the CSS font loading module and/or the Web Font Loader project, I'd be glad if anyone would have a look at hooking up our fonts so that we don't have to guess and hope when they'll be available. It would be best if we could introduce two more options. One to control whether the formula should be rendered with incorrect fonts if the correct ones aren't available, as opposed to not rendering at all, and the other to register a callback which gets called if all (or perhaps even if more) fonts have become available, to trigger a redraw of the canvas.\n. Yes, the canvas so far is simply fixed size and pixel density 1. For the latter, this tutorial by Paul Lewis points the way towards a solution. Have done that in another project alreary, works like a charm. Haven't integrated it with the former, i.e. with auto-resizing canvas, yet, but it's certainly doable.\n. @bryevdv: Sure you can render to an existing canvas. Have a look at these lines for an example application. There I compute the box up front, then draw something else (in this case the bounding box and its base line) and then draw the box I computed before. If all you care about is render at a given position, you can call renderToCanvas instead of canvasBox. It will prepare a box and immediately render it at the given position. You can still control horizontal alignment using the halign property of the options object.\n. @kevinb7 My main reason for this flat data structure is performance. The prepared box can be typeset fairly quickly as many times as you want to. Keep this in mind when refactoring, by either doing performance tests on different browsers (perhaps via jsperf?) to show that the cost of a nested data structure is negligible, or by keeping the flat structure as an option.\n. @kevinb7: Oh, thanks! I've been using the WebFontLoader myself as well, but I've had my machinery tied in with the active callback, not the fontactive. And the active callback would apparently fire if at least one font was loaded successfully, giving up on the others after some timeout. So I got everything displayed, but it took longer than I had expected. I guess it would have taken me quite some time to find out that this is due to wrong test strings. With your configuration, the even fires much sooner now, which is great!\n. With all the fonts we have at our disposal once #132 gets merged, web font loader is quite busy:\nfamilies: [\n                \"KaTeX_Main:n7,i4,n4\",\n                \"KaTeX_Math:i7,i4,n4\",\n                \"KaTeX_AMS:n4\",\n                \"KaTeX_Size1:n4\",\n                \"KaTeX_Size2:n4\",\n                \"KaTeX_Size3:n4\",\n                \"KaTeX_Size4:n4\",\n                \"KaTeX_Caligraphic:n4,n7\",\n                \"KaTeX_Fraktur:n4,n7\",\n                \"KaTeX_SansSerif:n4\",\n                \"KaTeX_Script:n4\",\n                \"KaTeX_Typewriter:n4\",\n            ]\nThis causes lots of fonts to get loaded unneccessarily, which delays page loads considerably. I think I'll have to come up with a way to load these fonts on demand. Either my PreparedBox objects will contain a list of all the fonts that have been used during typesetting, or the options object can contain some function which gets called whenever a font is required, and which can cause the rendering to abort if said font is not available yet. Something like this.\n. Might make sense in some scenarios, yes. And now that #264 got merged, I can look about tweaking that to process the same set of test cases using canvas rendering. Will need to employ executeAsyncScript so that the browser can call back to Selenium once all its fonts have been loaded and the rendering should be stable.\n. How tightly do we want to integrate KaTeX with WebFontLoader? Since 5b182fc99b02143f390d4c0d2ba28c09aa859594 I'm exporting the set of used fonts, so the application can trigger required font loads on demand, and then repaint the canvas once the fonts are available. I have that logic implemented in my own application. Should we move some of this into KaTeX? And if so, what should the API look like?\n. My render-to-canvas is building on the katex-internal dom representation, so if you'd prefer having render-to-canvas outside the core code, then we'd need some API to expose that layer instead.\nWould it be acceptable to have contrib code covered by travis-verified screenshots? In the long run I'd like to run the full set of screenshot tests through render-to-canvas as well, to ensure that noone forgets about that when modifying the dom structure, in particular when adding new CSS classes.\n. Returning the internal DOM is technically easy, yes. It might however be considered a promise to keep that API stable in the future, so we should be aware of that commitment. Or there should be some kind of big red warning sign stating that even though the representation is accessible from the outside, it is only intended to be used by code which evloves in lockstep with KaTeX.\nOn current master, merging in my canvas branch increases the gzipped size from 29,432 bytes to 32,009 bytes, so one might consider canvas support to cost approximately 2.5kB and increase the overall size by 9%. That is a noticable increase, so I can see how having this separate would be preferable.\n. @lukeburns Should be possible. Not sure what steps would be required to make the relevant fonts available to Cairo, but installing them in a suitable directory should be enough I think. Server-side rendering in this fashion stirs some unpleasant memories of the server-side latex calls being used to render GIFs, though.\n. @pnsaevik: When using just the formulas all by themselves, then SVG is probably better than canvas, and HTML probably better than both. So the main reason to choose canvas output is to integrate math rendering with an already existing canvas-based rendering pipeline. And there may be many reasons to use canvas. One might be performance, another a focus on raster-based image sources and operations. And there is also compatibility with other output devices to consider. So there are good resons for a web app to choose canvas, and those who do might benefit from integrating KaTeX like this. Those apps who already are using SVG would of course benefit from KaTeX exporting SVG, so it might make sense to have both in the long run.\n. @canavandl: In our implementation we are extracting the size from the context font and then passing that as an option to the canvasBox invocation. As far as I can tell, the size is the only thing worth passing along, since KaTeX will use its own fonts and styles. Perhaps I should support the textAlign property one day, though. Having that set to anything but 'left' will severely break rendering, I guess.\nBy the way: this presentation (which is part of a group of talks on CindyJS) demonstrates KaTeX to Canvas in an interactive environment, with a comparison to MathJax, the outcome of which you all can easily guess.\n. @canavandl: I fail to reproduce your problem. Running make serve and then opening http://localhost:7936/canvas.html?size=32 in my browser, I obtained the following picture:\n\nThis is using a tweak I just added to this branch here to allow changing the font size; otherwise you'll be at the default size of 74 * 1.21 = 89.54 which is generally used for the development server. The cyan box is drawn using the dimensions from the prepared box, and it looks pretty much correct to me. Could it be that by the time you drew the background box, the fonts were not available yet? If that's not it, can you reproduce my cyan box as described above?\nBy the way, I just added some changes to ensure that merging my branch with the current master will not only be free of conflicts, but will actually work up to the point where make serve displays what it should.\n. > Out of curiosity, what's blocking progress on this? Is it a lack of interest? Or prioritization?\nKnowledge of the hackish nature of this approach, and lack of time for a proper solution.\n\nI'd noticed, for example, that some diacritics weren't rendering properly with this renderer even though they are supported by the standard renderer.\n\nI expect there are several things which the main renderer can handle but this code can not. Essentially what this code does is read some HTML-like representation, then use the CSS classes from that and turn that into its own metrics information. Essentially a bit like a very lightweight CSS engine, but not based off the KaTeX css file but with parts of that CSS duplicated in JavaScript program logic.\nSo this will miss classes I forgot, or nesting constucts I forgot, or I got wrong. It will also miss classes added to the CSS since I started this branch. I haven't revisited that file in quite a while. And it will miss positioning expressed through means other than these classes, e.g. new ways of per-node positioning, or box borders, or combining characters. All of this is the reason why we consider this more of a hack and proof of concep implementation than a fully supported feature: with the current approach, keeping things in sync is rather hard. We'd prefer some intermediate representation which makes positioning explicit in a way that can be handled cleanly both by CSS and canvas.\n\nI also noticed that this PR is based off of a time when the regular renderer didn't yet support \\underline as I tried to use regular rendering off of this PR.\n\nYou are right, underline isn't supported as it wasn't in core when I started this. It should be possible to add it, if someone (might include me) finds the time. In the meantime, I've resolved some conflicts so this branch merges with master again. That way, people can use master with all its current features to see which of these are supported by the canvas renderer.. I agree. Writing a canvas-specific version of buildHTML.js would cause a lot of code duplication for things that essentially work out how a given high-level construct should get positioned at the lower level, before turning that low level representation into acutual dom nodes. A proper solution would identify the appropriate cut point between the code that would need to be duplicated and the code that is HTML-specific, introduce some clean interface there and allow different backends to get plugged in. I envision something like a box model representation, but making that sufficiently expressive to cover all our existing CSS use cases will require some work.. I think this will need support from Parser, and in that case it might be best to do it completely inside the parser. The main problem as I see it is that the macro expander has no clue as to how far the argument should continue. Sure, it will stop at end of input, and likely at the next unbalanced }, but what about &? What about ]? If we were to move all the handling of optional arguments into the macro expander, we might stand a better chance, but I don't think that's realistic any time soon.. Having parser, lexer and so on accessible by name, not position, certainly seems desirable to me. I guess I'd call that object context, since to me options sounds more like JSON-structured data, which the parser is not. If we had ES6 with its argument destructuring syntax, I'd very much favor this approach with the arguments in an array. As it is, using it means we loose the naming of the arguments in the function head. We can probably make up for that to some degree by following a convention of always decomposing the arguments array at the very beginning of the body.\nSeeing how @kevinb7 and @xymostech favored different approaches, and myself being indifferent, I'll wait a bit to see whether a consensus emerges one way or another.\n. Come to think of it, groupTypes in buildHTML.js is suffering from a mild case of the same: one big array, where you can't simply insert auxiliary functions. There my preferred notation would be changing the genfrac: function(\u2026) { to groupTypes.genfrac = function(\u2026) {, thus reducing the nesting depth by one level and allowing for other code to get mixed with the group rendering code.\n. Mainly to get rid of quotes. funcs[\"\\\\frac\"] = { \u2026 } would not work well with several functions sharing one implementation (i.e. duplicateFunctions), and would still have to contain quotation marks due to the name which is not a valid identifier. However,\njs\ngroupType(\"genfrac\", function(\u2026) { \u2026 });\nlooks more verbose and obscure than\njs\ngroupTypes.genfrac = function(\u2026) { \u2026 };\nsince I'd wonder what that string is, whether it's more than an identifier naming a property. But I don't insist on this. If you prefer having installer function in all the cases, that's fine. Experiments indicate that with such an installer function the result might even get ulified more efficiently, since the function is assigned a single-letter name while the object variable is not.\n. > > since the function is assigned a single-letter name while the object variable is not.\n\nBoth should get munged to a single letter; if that's not happening we should fix our uglify config.\n\nYes, they do get mangled down. Apparently there was something strange about my toy example. So one more reason to stick with the idiomatic assignment version.\nDoes the lack of more substantial comments to this issue indicate silent agreement on the parts of @xymostech and @spicyj? Or should we wait for explicit approval before considering the PR for inclusion?\n. Oh, I realize that I had missed #132. Will have a look atthat and compare.\n. #132 is superior, let's continue there.\n. I should have indicated that I'm closing this as a duplicate, or rather a subset of 132.\n. Another thing that might be entered different from how we'd render it are accents. They might get entered using precomposed symbols, but NFD normalization could split that up into a symbol and an accent, which we might have in our fonts and might be able to render accordingly.\n. One use case is when I copy and paste stuff from a different web document which uses Unicode. A second use case is pasting from my own E-Mail, where I often use Unicode to write down math. A third use case is using the compose key in my Linux keyboard configuration, which allows me to enter all these greek and double-struck letters rather quickly, and which makes the input text shorter and easier to read. And finally, for accents, I'm from Germany so umlauts are common in my daily work. More likely for \\text than for math symbols, though. Having them in a separate issue feels fine.\n. According to my roadmap, this issue here would be without unsatisfied dependencies now, but seeing how the lexer currently won't accept these symbols on input, I believe that it is probably best put on hold until https://github.com/gagern/KaTeX/commit/8496a1e40f8dfbfc8dd7d2e7b5096bd5c2b01c02 or something similar extends the scope of the lexer.\n. Can you wrap all that symbol-adding code in a function? That way, variables used inside the function won't spill into the module scope. (I'm no owner of this project, so this is just a suggestion from a fellow contributor.)\n. I just remember this instance where I accidentially used a module-level variable and jshint didn't catch that. But there are ferer functions in this file, mostly data, so I guess it's indeed fine. (Hopefully we'll be able to switch to ES6 one day, and make all these issues go away using let instead of var.)\n. Before writing tests, we'll need lexer support first. Which made me look at the lexer, and wonder why we had a bunch of distinct regular expressions, instead of building a single one which matches any of the given ones. Any reason we shouldn't combine them?\n. Does this PR here add anything, without lexer support? I'd merge both together, including tests. If I had the power to make that decision\u2026\n. Parser.prototype.parseSymbol will take whatever the lexer has to offer, then check that against functions and symbols. Which in my opinion means that the lexer can be generous in what it accepts. Whenever none of its input matches, it can simply take the next character, all by itself, and let the parser complain if it isn't a function or symbol it knows about. If that is indeed true, all those mathNormals and textNormals seem superfluous, duplication information already available elsewhere. Can someone please confirm that I'm not missing something here?\n. Looks good to me. From my past experiences here I'd assume the maintainers will want you to squash this into a single commit. If you want to change anything, I personally might avoid the utils import by writing syntax.indexOf(input[pos]) !== -1. But that's mostly a matter of taste (and imagined performance), no need to change the code just for that.\nIt could theoretically be the case that multiple TeX commands lead to the same Unicode symbol, but with different characteristics. Perhaps it would be good to have a test to verify that this is not the case. I.e. some test that does require(\"../src/symbols\"), iterates over the symbols and checks that if the replacement matches, everything else matches as well. Should this go into one of the existing test files, or a new one? Should this go into the same merge?\n. > I want to be careful here \u2013 ideally we match the behavior of unicode-math; I don't want to accidentally support more than that package does or have differing behavior.\nWhat's the motivation here? At least as long as the meaning is unambiguous, which I believe it is for the symbols contained in our fonts, I think the more support the better. They apparently try to support anything their fonts support, so shouldn't we do the same with our fonts, even if that is different from any font configuration in LaTeX?\n. @spicyj: I don't share your doubts about 1. But 2. makes sense for the specific KA application you describe. In that case, I think MathJax should be the reference to compare against, not the unicode-math package.\n. Interesting! Taking one example, namely\n\n\u22a5 \u2192 \u201c\\perp\u201d (main;rel), \u201c\\bot\u201d (main;textord)\n\nI find that MathJax will interpret \u22a5 on input as \\perp, while unicode-math with XeLaTeX interprets it as \\bot. This establishes that there is no clear standard to follow, and that compatibility with unicode-math doesn't ensure compatibility with MathJax. Do we want to exclude all the ambiguous symbols? Do we want to prepare a document with all the remaining ones, and verify that XeLaTeX with unicode-math and MathJax both render the unicode version visually equivalent to the macro version? Do we want to verify that the generated group types are the same as well? If so, how?\n. > that\u2019s an error in the mapping.\nThen it's an error in the font. The KaTeX_Main font contains a glyph called \u201cperpendicular\u201d and maps unicode codepoint U+22A5 to that. We can only emit HTML for symbols which we know our fonts support, otherwise the output would become arbitrary. The glyph associated with U+2223 \u201cDIVIDES\u201d is apparently unnamed in the font, as far as I can tell from the auto-generated name TTX produces for it.\n. How about: make this an optional feature, and make the option enabling it a version number. So you'd e.g. pass {unicodeInput:1} as an option to the top level KaTeX interfaces, and enable the mapping as described above: unambiguous things get mapped, ambiguous don't. If at some point we find that we are behaving different than \u2039your favorite Unicode-aware math typesetting configuration here\u203a then we would encourage users to update the version number, and implement the new behavior for that setup while maintaining backwards compatibility for the old. And if you ever feel confident enough to enable this by default, the you can do so without being encumbered by past choices.\nYou wouldn't even need the version-handling code just now; just having the enabled-or-disabled switch is enough. And if everything goes well, then you only ever add symbols which either are not in conflict to existing ones, or where the ambiguity should definitely be resolved in favor of the existing ones. In that case, you'll never actually have to handle these version numbers, they were just a safety precaution.\n. > that\u2019s what @spicyj wants to avoid. (right?)\nI don't think that was his point. The problem you describe could easily be addressed by manually adding a mapping for U+3333 as input. We could even add tests to ensure that whenever a symbol gets added, that fact is recoded in some list, and whenever it gets removed again, something will complain loudly.\nThe way I understood it, the problem is more like this: Suppose we now have a mapping for \\foobarto U+3333 and later on we find that there is another symbol \\qux which a) looks like U+3333 as well, but b) matches the semantic description of U+3333 even better and c) some TeX setup renders U+3333 on input like \\qux, not like \\foobar in terms of group type and spacing. In that case, it would have been correct for us to map U+3333 to \\qux from the beginning. Changing it later on breaks backwards compatibility, while not changing it breaks compatibility with other implementations. Both of this should be avoided, ergo his conclusion that we should not map U+3333 to anything unless we can establish that doing so is right in terms of compatibility with something authoritative.\n. > if we go down that route I'd like to also have some path for getting a stable subset into the core features too\nHow? Quoting myself:\n\nDo we want to prepare a document with all the remaining ones, and verify that XeLaTeX with unicode-math and MathJax both render the unicode version visually equivalent to the macro version? Do we want to verify that the generated group types are the same as well? If so, how?\n\nThat's still the best idea I have to base our decisions on some reference implementation, and I'd like a second opinion on this.\n. @kevinb7: I don't follow you. The one glyph is named \u201cDelta\u201d and it maps to U+0394  Greek capital letter Delta. Why should it be mapped to U+2206 Increment? The same holds for Omega. I consider the greek letter meaning the canonical in both cases, while the other use is a more derived form.\nOn input, U+0394 should be treated like a variable name, while I'd say U+2206 should be treated the same as \\partial, since it has a similar meaning. Luckly, the two are both textord, so treating them the same is justified. U+2126 Ohm sign should be treated like a unit, so perhaps we should have a look at how packages like siunitx space such things?\n. Do you want to merge this in its current form, or is there any chance of getting #132 dealt with soon, so that we can follow the roadmap and eventually reach the symbols part from #262 and the lexer change from 8496a1e40f8dfbfc8dd7d2e7b5096bd5c2b01c02 scheduled for #266? Because those commits would mean a complete rewrite of the code here, and make many things implemented here superfluous. Furthermore, they'd suggest a different data representation for the unicode mapping data tables we'll be needing.\nThe way things look at the moment, I fear all of this is pretty far into the future. In that case I'm all for merging this here as it stands, and adapting those other things when I rebase them.\n\nmove uncontested symbols from behind the flag\n\nHow do we come up with such a list of uncontested symbols?\n. > Couldn't we iterate through module.exports in the new version of symbols? Why would the data representation need to change?\nFirstly, instead of iterating over all the symbols, I'd integrate this with the defineSymbol function I'd introduce, since any symbol definition passes through that in any case and I'd rather avoid code outside of functions due to scoping concerns.\nSecondly, we'd need extra data: which symbols are automatically enabled, which ones only if a flag is given? Which ones change meaning depending on whether that flag is given, or perhaps even depending on the value of the flag? That kind of data would in the current structure most likely be encoded as some big JSON dict, to stay in style with the existing data base. But if that data base gets turned into a bunch of function invocations, then having the Unicode information in such a format would be more consistent.\n\nt'd be nice to get this merged sooner rather than later.\n\nThen by all means do so.\n\nHow do we come up with a list of uncontested symbols?\n\nPerhaps this tool of mine from #294 can be used to verify chosen atom types against some LaTeX package like unicode-math. And we could of course generate test cases to be fed to the texcmp toolchain we have since #268, to perform visual comparisons.\n. @flying-sheep: While I agree that checking every single mapping manually would be extremely much work, I believe that it should be possible to automatically verify a large portion of the candidate mappings. This holds for compatibility with MathJax as well as unicode-math. If we get that set up, we could even identify the portion on which both agree, and enable those without any flag or switch or whatever.\nIf I find the time, I'll try to come up with something to check things against xelatex and unicode-math within a week. If I don't report back by then, I didn't find the time. If someone else wants to tackle MathJax, that would be great. The things to verify would be essentially that entering the Unicode symbol and the command sequence yield the same output, including spacing. See page 170 of The TeX Book for how atom types affect spacing. Ideally I'd say the symbol in question should be both preceded and followed by one symbol from each of these types, and all the spaces should be compared.\n. It could well be that the MathJax is simply forwarding sigma and other things as letter-like symbols to the font, without containing any explicit list of the things it forwards. Perhaps some code point ranges.\n. > Even though I think this is moving in the right direction, I was hoping to have more discussion in #255 and #256 before getting a PR. Sorry for not explicitly stating that.\nI had assumed as much. But I didn't see a lot of discussion happening so far, so I wanted to make things more tangible. I expect that I'll probably be redoing the changes I did here one more time, after you've decided it's ready for merging. The equivalent of a rebase. But now you have something explict to discuss.\n\nwas hoping to merge #132 before doing any refactoring\n\nBy all means, don't block other merges due to this. #132 in particular I'm very interested in. I need that more than I need this internal restructuring here.\nI'm not sure I agree with the Command class you suggest. On the one hand, the step context.func = this.name means that you need a new Command instance for every command even if they share implementation, which currently isn't required with my approach. But, more severely, having the handler become part of a Command class and still have its this method not refer to that object, that feels even more weird than the this for current handlers. So I fear we might be adding confusion by making the handler look like a method when it is not.\nOn the other hand, I wholeheartedly agree with Parser.prototype.invokeCommand to avoid code duplication there. I also agree with your other suggestions. Regarding sym I'm indifferent. My main concern, why I chose such a short name, was that a longer name might cause problems with the 80 columns limit. I guess we're still a good distance away from that, though.\n. @kevinb7 No, absolutely not! data is a single object, which gets passed around by reference. So each iteration of the loop would overwrite the name setting from the previous iteration, and in the end you have just the last name stick. My point is that currently, and with my setup, the function does not know its name, and it's cheaper that way since the parser knows that name just fine.\n. > Thank you for suggesting git merge -s recursive -X ignore-all-space origin/master. Hopefully it will make resolving merge conflicts easier.\nIt did so in a similar situation for me in the past. While we are at it, git diff -b (or even git show -b) will make reviewing this easier. (And the fact that we are not talking Python or CoffeeScript or some other language with semantic whitespace is really saving a lot of hassle here right now.)\n. > I was hoping to merge #132 before doing any refactoring\nAny other in-flight pull requests you'd like to see merged before this one?\n- The idea from #261 would benefit from the changes here, I think, but the actual implementation would need to be completely rewritten, so I see no urgent need to pull #261 in first. Even though that view might be slightly frustrating to the author.\n- #174 you postponed past #250 which in turn I'd postpone past #266 which would be better off building on this here. The same probably holds for #149.\n- #146 is probably already in conflict with #246 so it will require rebasing any way, might as well get rebased to take this one here into account as well.\n- #140 sounds about ready for inclusion, so if I have to rebase this on #132, I might as well take that along. But #140 itself needs to rebased to use screenshotter instead of huxley. And it hasn't seen any review afaics.\n- I don't know how close #135 is to completion. Should we wait on that, too?\nOf course, as long as you agree with the general direction of the code changes here, I can build my next improvements on this, and then rebase them onto the version that eventually makes it into master.\n. > if possible should be split into smaller logical pull requests so that they're easier to review.\nIn that spirit, I suggest you review the two commits here separately, since each is a distinct change for different issue. As I wrote in https://github.com/Khan/KaTeX/issues/266#issuecomment-115748090 I'm willing to post them separately when the time for doing so is right, i.e. after #132.\n. When I one day repost this here as 5 distinct pull requests, would you want me to write each as two distinct commits, one doing the actual modifications and one with just the reindentation? If you can do a git diff -w locally, there is nothing to be gained by separating stuff, but if you review here in GitHub, then having the whitespace changes out of the way might make things easier to review. At the cost of a longer history, of course.\n. Superseded by #345, #346, #347, #348, #356.\n. > Ideally we could screenshot IE too but I don't know of a good way to do so.\nMy best bet would be using BrowserStack. They write:\n\nFree for Open Source\nWe love open source projects. Choose any of our plans. Contact us with details of your project.\n\nTo you want to take that approach? If so, if there is any chance that arbitrary contributors, including new ones, could make use of the service, then all the docker setup might be superfluous. But I fear that access to the relevant authentication credentials would be a problem, and we'd need docker or something similar still for local tests.\n. Will someone who's officially an owner of this project contact BrowserStack, and report back here on this issue?\n. I've had a closer look at the API. The way I see it, the first (and most simple) step should be uploading our test cases (i.e. the test.html with all its dependencies) to some public web server (like some subdirectory of http://khan.github.io/KaTeX/ via gh-pages), devising a script to issue a bunch of snapshot requests for that and collect the results, then save them somewhere for further study, perhaps including diffs created by ImageMagick.\nI wonder whether the way test.html can be used to include any HTML into a document can be used for a cross-site scripting attack on khan.github.io. If there is at least some danger of that, we should either create a corresponding set of static pages, or devise some other scheme which restricts the set of possible inputs to our list of test cases. Perhaps by including the ss_data.json one way or another (via ajax or inside a <script> tag) and using the key as a query parameter.\nThe second step could be tweaking that setup to make use of a local testing connection so that an in-development version can be tested before it gets merged into master. This should be particularly useful when trying to improve some rendering which is at the moment unsatisfactory.\nAs a third step, we might one day make this part of Travis tests, by make the credentials available to Travis using an encrypted environment variable. But I guess that's quite a bit in the future, if ever.\n. I've created snapshots for a bunch of configurations (code, results). Findings:\n1. IE 6, 7 and 8 yield empty windows for all test cases. Is this an IE problem, or a Browserstack problem?\n2. Accents missing for Chrome 15 and 20 and 25 on Windows 7, but not for 25 on OS X. Accents for Firefox on Windows look ugly (two different line widths), no matter the versions. Horizontal placement of accents looks wrong on Safari, Safari 8 in particular.\n3. Arrays fails spectacularly for Chrome 15, but this might be a sporadic problem since I think I saw this rendered correctly in some run. Firefox 15 on Windows has some problems with medium-sized delimiters, which are not present in FF 10 or 20. Safari 5.1 has wrong vertical placement.\n4. ArrayType in Chrome 15 and Safari 5.1 has wrong vertical position.\n5. BinomTest in Chrome 15 and 20 and in Firefox 15 on Windows is lacking big delimiters. From IE 10 to 11 some positions shifted, the horizontal one in the smallest binomial coefficient definitely for the worse. Chrome 15 and 20 as well as Safari 5.1 have incorrect vertical position.\n6. Cases: Chrome 15 lacks the big curly brace, in 20 it's incomplete.\n7. DeepFontSizing on Chrome 15 and 20 and Safari 5.1 has wrong vertical placement, and on Chrome 20 and Firefox 10 it also lacks some symbols.\nI could continue with the other test cases, but I'm not sure a much longer list will add value at this point. What versions do we want to officially support? A look at the timeline of browsers might be useful. Given my choice, I'd like to officially require IE 9 or later, FF 20 or later, Chrome 25 or later, Safari 6 or later. If you want me to, I can change the set of browsers to narrow down the point of sufficient support between FF 15 and 20 as well as between Chrome 20 and 25. Do you agree?\n. Vertical placement in Chrome improves significantly from 22 to 23. However, Chrome 24 on BrowserStack apparently has problems processing our SqrtRoot test case, which never leaves the processing state. So requiring Chrome 25 or later sounds prudent. The arrows in the Accents test case first appear in Chrome 35 on Windows, they are still absent in Chrome 34 on Windows 7. Do we want to address this, or require Chrome 35 (from May 2014)?\nThe delimiters in the Arrays test case on Firefox are far more erratic, disappearing and reappearing between versions over a wide range of versions. Perhaps there is some kind of non-determinism going on here. I've seen missing delimiters as late as FF 25.\n. > Hmm, are there consistent differences between the images?\nThere are essentially two possible outcomes for that test:\ncase A with SHA-1 d1aca790423e87b83b8465c61aa33d755c680c4f and\ncase B with SHA-1 8569c87d185597d39d6f70956cf9b7112a54fd7a.\nCase A is what we currently have in the repo. B is what I get most of the time. But on both OS X and Linux I get A occsionally, though still rarer than B. Case A has the f and g a pixel or so lower than B. The Chrome rendering so far always was visually indistinguishable from B, even though its SHA-1 was 642f9e6693c2ee5634f4279086c29231d876580f so there must be some very slight differences.\n. > It might be worth investigating using webfontloader instead of an arbitrary timeout.\nFeels like overkill, and if even such a long timeout is not sufficient, I doubt webfontloader will be of any help. If you want to try it, feel free to do so, though.\n\naccept either\n\nI'd prefer that. The first difference is at offset 0x32, where A has the byte 0xC0 while B has 0xF8. We could e.g. have both versions in the repository, and choose the output file name based on that byte.\nCome to think of it, and in the light of https://github.com/Khan/KaTeX/pull/268#issuecomment-115712664, perhaps it would be desirable to only store some kind of checksum for all the images, and report checksum violations? That way, your test cases will take much less data, which in turn means you can have more test cases without worrying about repo size.\n. What direction should this pull request take? As it is, I'd say this request is fairly self-contained and can be merged, moving any future improvements to separate requests. Possible follow-ups:\n- Deal with Lap, one way or another\n- Let Travis take and compare screenshots (#156)\n- Remove images out of repository, just keep their hashes\nOf course, if you worry about repository size (as I tend to do), then adding the chrome screenshots just to remove them later on would be unwise. If so, should I move this request into that direction, or just rewrite it to drop the chrome screenshots from their commit for now?\n. I dealt with the Lap example by storing both versions in the repository, and accepting either.\n. I'm not sure what we'd gain from using dockerode, and how. Do you want to replace the outer shell script, screenshotter.sh? That should be feasible, but ensuring that we always clean up the container, even if the screenshotter itself throws an exception or gets interrupted by Ctrl+C, is far from trivial.\nI'm also not sure about what we'd gain from parsing the file at the PNG level. The way I see it, the task of the Lab workaround is dealing with the file that while all other results are exactly the same file all the time, this one results in a different file from time to time. Whether that file is an image, or a video, or whatever, doesn't really matter to the logic of the script. So doing some image-specific parsing just to decide between the alternatives based on some pixel value seems just a lot of overhead for zero gain. We have two possible files, they differe in some bytes, so look at the first differing byte to decide what situation we're in.\nUsing some more elaborate command line interface sounds sensible, and minimist would be a good library to use for that. I can add changes along these lines.\n. > Why not run screenshotter.js from inside docker using the same technique that was used for screenhotter.py?\nBecause the selenium images don't contain node. They contain enough stuff to run a selenium server which can be reached from the outside; everything else I'd consider internal and subject to changes. Furthermore, creating files from within the docker can cause problems with access permissions, as recently discussed.\nHaving the control logic outside the docker makes us more flexible, since we could as well connect to any other Selenium server, be it on a local Windows machine, a virtual machine or some web-based Selenium service. So I see this as a benefit.\n\nI guess parsing the whole .png just to get the width and height is a little overkill.\n\nAh, that's what you had been thinking about. Granted, parsing PNG at that point makes more sense than it does to distinguish the two Lap alternatives, which is what I had in mind. I still think it would be overkill, though.\n. When writing the code, I felt that minimist was a bit too minimalistic for my taste. I like to see a clear list of all allowed options somewhere, with name, description, default value. And if I include that in any case, I might as well make it available on the command line via --help. Furthermore, multi-word command line options are usually hyphenized lower case, while the corresponding JavaScript identifiers should be camel cased to avoid ugly syntax. I experimented a bit with nomnom and found it to be both clear and flexible. I hope you agree with my choice.\n. > There are selenium images that contain node\u2026\nI think you are mistaken. Those images result in containers which can be used as a node in a selenium grid, attached to some hub. So this is the term \u201cnode\u201d as used by Selenium, which is pretty far from \u201cnode\u201d as in node.js.\n\nCan you give the -p option a try? It maps a host port to a port in the docker image.\n\nProblem with this setup is that the port number 4444 might already be taken on the current machine. With the randomized port numbers, we are independent of such things, and could in theory even run tests for different browsers in parallel one day. In any case, this would only simplify my code by about two lines (simplifying three lines to one). The by far more complex part of the whole setup is figuring out our own IP address with respect to the Selenium container, i.e. the address to enter into the Selenium-controlled browser to load content from the KaTeX development server running outside Docker. That wouldn't be avoided as easily, since so far I haven't seen a way to bind a certain port on the outside machine to a local port inside the container. As it stands I see too little benefit in using -p just now.\n\nI like how your code adjusts the size of the browser window until the screenshots are the right size.\n\nThis is simply ported from the set_driver_size function of screenshotter.py.\n. -p opens a listening port on the bridge device and forwards any connection on that to a daemon listening at a specified port of the container in question. What we need for access to the development server is the other way round: a listening port on the container which forwards any connection to our development server running outside docker. At least that's the way I understand it.\n. Yes, that's what the comment \u201cWait for container to become ready\u201d was meant to convey. But that aspect is independent of the port number. As long as you use a newly started container, as opposed to one started by the user a while ago, you have to give it time till the Selenium server inside the container is actually ready to accept requests.\nI think dockerode might become interesting if at some point we decide to get rid of my screenshotter.sh, and use JavaScript for that logic as well. But right now I'm worried about cleanup after an interrupt, so I won't take that route just now.\n. I've started using pngparse as requested, but even I'm surprised by the complexity of this change: pngparse (and png-js as well) only offer asynchroneous interfaces, which we'll have to turn into a promise to make them fit in with Selenium. A very quick search on npmjs didn't show any synchroneous png buffer parsing library, at least none which advertises this fact.\nHonestly, I'd like to rather not include feba25adc54bfbf808573e8482fe3c46dcd9d691 in this pull, since it adds complexity to the code, it adds complexity to the computation, it makes things harder to maintain due to the more complicated flow of control, and all that for almost no gain that I can see. I'd prefer to omit that commit and either do something along the lines of my comment above or leave things as they were.\n. Let me know when you are satisfied and I should squash this. Also let me know whether you'd prefer a single commit, or whether I should separate Chrome from the rest, i.e. pick dd4304227962d78b9ee37ebb05c106cecb26606b separately during rebase, perhaps together with this line in the README.\n. @kevinb7: Squashed and ready for merge.\n. No. This by itself would cause us to request a symbol which isn't present in the font in question. Unless you also modify the font, this is not an option since we don't know what replacement font or character might be substituted instead.\n. Well, the font uses the same symbol for \\bot as well. It doesn't really matter what that glyph is called, I think. The relevant question, in my opinion, is whether we can have two unicode codepoints refer to the same glyph, both according to the specs of the various font formats and in real world implementations. If not, then either choice is as wrong as the other.\n. I don't know whether glyph names have any significance except to the font creator. At least in the TTF world. On the PostScript level, I believe things might be somewhat different, and symbol names are important. But we are not in that world. So while I tend to agree that the font is slightly inconsistent, I see no urgent need to fix that inconsistency.\n. > I'd like to reduce the number of pull requests we have in flight.\nYes, we have quite a few of them around, and I keep adding to them\u2026 On the other hand, I'll need macros (per site, defined in JavaScript as part of the options object) pretty soon, and as I said, I think that should build on this simplification here. So I assume that I will implement this soon. Unless someone else does macros in a different way before I get a chance. Would you want me to not post a separate pull request for this, but keep it private until I can post a combined pull request for this and macros?\n. > we have limited resources\nQuite understandable, who doesn't.\n\nYou've proposed a couple of other refactorings in addition to this. Unfortunately we won't be able to get all of that reviewed and merged \"pretty soon\".\n\nWell, if I have macros in a local fork for a while, that should be fine as well, as long as I do have them. Reviewing and merging should be a long term goal, but since I already require the render-to-canvas stuff, I'll be on a local fork for the forseeable future in any case.\n\nAre any of the refactorings necessary to implement macros?\n\nI guess not as such, but the refactorings make it much easier for me to think about this and come up with a clean solution. If you were to say that you don't want any such refactorings at all, I'd try to hack my way around, but I feel that the quality of the solution will be better if I can build on the refactorings. Since my priority is having a maintainable solution for our project, and merging back to KaTeX comes second, I'd go for the clean solution even if getting that back in will take longer.\n\nwe'd prefer if that was split up into separate reviews for functions, environments, and symbols.\n\nI think first you'd want to split between #255 and #256, which means looking at each commit independently. Then splitting #256 by unit would mean looking at files independently, with the changes to Parser.js tied in with those to functions.js. If you want to, you can close that request now, and I can open split ones once #132 has landed. The closed request should still be sufficient to illustrate the ideas it was meant to demonstrate.\nYou should however be aware that the commits from #262 build on one another, and would conflict if parallelized. So my subsequent pull requests would have to be linearized, one after the other, so when you find the time to review a bulk of stuff you might run out of pull requests after the first approved merge. And you should be aware that splitting #256 by unit would temporarily result in inconsistent style.\n. > I can put them on a separate branch before merging them to master if that helps.\nRight now I see little benefit of having things in your custom branch instead of mine. But thanks for the offer.\n. The core functionality for this is now in place. See https://github.com/gagern/KaTeX/compare/e27559eb82d8c50b430857ff9fe33f6f56cbb06e...gagern:parserState for a preview. Since I've built on some unmerged stuff, and will need to rebase this eventually, I'll not request a pull just now. But if you want to have a peek and tell me your thoughts, feel free to comment here.\n. > here's a link the the trello board\u2026\nI've never used Trello before. So far it looks like just one more place where we can comment on these various issues, adding to the confusion. Would you gain anything if I were to sign up for Trello, in terms of coordination? If not, I'm happy enough following as a public reader, posting on GH instead.\n. I can read it all right. If it's just the sequencing, reading should suffice. Thanks.\n. I noticed that the code in my preview will currently fail to parse some things because the look-ahead token gets lexed in wrong mode. Example: \\text{sin}^2 The } to end the group gets consumed and the next token is lexed before the mode returns to math. I see several possible ways of dealing with this:\n1. Change the lexer so it lexes the same set of tokens for math and text mode. Catch tokens which are invalid for the current mode later on, when we fail to find a function or symbol for them.\n2. Instead of throwing an exception, let the lexer return an error token. Then handle that in the parser, throwing the exception except for when we are mode-switching.\n3. Add some argument (called nextMode or similar) to the parseGroup and parseOptionalGroup methods, so that they can switch the mode before consuming their closing brace resp. their sole unbraced token.\n   Not sure how to adapt this to the mode switch before a group, though, if that group is a single symbol. Right now we neither have a command which explicitely switches to math mode, nor a symbol which is valid in text mode but not in math mode. So right now the problem of a bad lexer mode at the beginning of the group cannot be demonstrated.\nDo you have any preference?\n. Note to self: Currently mathNormals matches [!\"&-\\[\\]-~] and textNormals matches [!\"&-=?-\\[\\]-{}~]so the only characters matched bymathNormalsbut nottextNormalsare>^_|. The asymmetry between<and>is probably an error. I assume that the)-=in/[a-zA-Z0-9!@*()-=+\\[\\]'\";:?\\/.,]/ probably wasn't meant as a range. This doesn't affect any characters other than <, though. As you can see, entering \\text{foo<bar} right now gives a parser error even though the lexer allows that symbol through. So we'd get the same kind if error if we were to allow >^_| through as well, following suggestion 1. The only characters from the range 33 through 126 which are matched in neither mode are #$%\\ which makes a lot of sense, except for $ which we'll probably want in the parser soon enough.\n. Will continue on this another day.\n. > Is this 2^\\text x an example of this or does it need to be an explicit group with 1 character?\nEven \\text x is an example of late mode switching: the x gets parsed first while still in math mode, then again in text mode. But we can't tell, because it's allowed in both modes. There is no way to demonstrate the issue with the current set of lexing rules and the current function signatures.\n. > It seems like we should switch modes right after we encounter the } \u2026\nWhat you describe is a bit like my option 3 except you don't consume the token in the group, but in the caller. This is problematic since there are many other methods besides parseSpecialGroup which call parseGroup. At the very least, we should add a consume argument to indicate whether the final token should be consumed, and have that argument default to false like it does for excpect. Right now I'm slightly in favor of 1.\n. In https://github.com/gagern/KaTeX/commit/8496a1e40f8dfbfc8dd7d2e7b5096bd5c2b01c02 I went with option 1: I got rid of the distinction between text tokens and math tokens. So far it feels like the right choice.\n. Now that all the dependencies are in place, it's time to pick this one here up again. I've cherry-picked two of the three commits for this and filed pull requests. Once those are landed, I can cherry-pick e98b34ebee30238b108bc60969e3f952fb014b34 on top of that. (One benefit of having the lexer rewrite a44ae341af40a63929b626f7402f707b34158a6a merged before the look-ahead handling is that we avoid a known problem due to the way e98b34ebee30238b108bc60969e3f952fb014b34 does look-ahead.)\n. Two of my three commits on this have been merged by Kevin, thanks a lot! The remaining one, e98b34ebee30238b108bc60969e3f952fb014b34, will perhaps take some time to cherry-pick. It interfers quite a bit with the throwOnError setting which got introduced in the meantime. And perhaps I should address #297 first, to ensure that all the error messages retain their meaning.\n. I came up with 43 tests in #385, and it took me quite some time (partly because it's rather boring work). Will continue on this one here, and then on towards macros, once that is in place.\n. @kevinbarabash Think so. Next one on my agenda when I find the time is changing the position handling so that a ParserError takes a failing token (or compound construct) instead of a position. That's similar to some of the things I did in 75aad6677b719db4f0fe58283cc5485f51fe2057. But it's not really internal state of the parser any more, more like internal state of the token class.\n. Which test case, Sqrt or SqrtRoot? I noticed considerable differences for both:\n\n\nThe horizontal spacing in the second one seems to be largely affected by the proportions of the digits in the root. I guess this is because LaTeX has a separate font for smaller sizes, while KaTeX simply scales the 10pt font down, right?\n. > I also added a small tool to compute visual diffs, but haven't committed the results of this. \nI just committed and pushed these diffs to a separate branch. I'm not sure if you want this in repo. I don't think I'd want it there, since they are easily reproduced as long as you have imagemagick around. But it might be convenient to have a look now.\n. > I'm not sure we need to store the -pdflatex.png images either.\nI'm not sure how different those are from the *-firefox.png files. Both can be recreated exactly from the sources with the help of a docker, which requires a working docker setup and considerable amounts of HDD space for the relevant images. Is there any reason to keep the KaTeX snapshots but not their reference images? Is it for the sake of documenting changes to the code base which affect screenshots?\n. > some of them are clipped.\nThat's because I'm aligning the images to maximize overlap, but using the canvas from the Firefox images for reference. So if after that overlap-maximizing alignment, the TeX version extends beyond the margin of the Firefox screenshot, it will get clipped. I fear that without that alignment step, many of the images would have some constant offset over large parts of the canvas, making relative changes harder to see.\n. > I would like merge this in.\nWithout the actual images, right? Will rewrite when I find the time.\n\nCould you make it so that the bounding box of the diffs is the union of the bounding boxes of the images being compared?\n\nThe way I implemented things now, I rasterize the PDF to a temporary file, then align that to produce the *-pdflatex.png. So at that point, the clipping has already occurred. The reason I do it this way is because I sometimes want to flip between two renderings, and see what changes. If I move the aligning from the code running inside the docker to the diff, that will no longer be possible that easily. What do you think?\n\ncan skip those examples?\n\nSure, we can add those to the blacklist.\n. Some of them are nearly exhausting their 1024\u00d7768 screenshot size. E.g. OpLimits and Spacing. If we add margin or padding to the test.html, these might start scrolling unless we increase the screenshoit size. Is that desirable?\n. OK, rewrote things, incorporating your requests. The rasterized images are now not artificially aligned, but use the dimensions of the underlying document. The alignment is computed but used only for the diffs. So these are indeed rendered to the union of both pictures, then trimmed to the area that's actually being used. I added some comments about what's happening in texcmp.js. And I omitted the resulting images, although I added them on another branch. Hope this helps.\nI also implemented some fake math sizing commands (although they still don't work with fractions), a \\blue command and something to handle display mode, pre and post text chunks. This makes the images resemble the ones from Firefox much better. The blacklist now contains only three items, namely Colors, DeepFontSizing and KaTeX.\n. If you are happy with all the new changes, I'd squash everything into a single commit so you can merge that.\n. Good to have this in. Thanks!\n. Yes, the main motivation to implement arrays as colums was for lack of width information. It's easy to have all boxes of a column share a common column width, with control over where in the column they get positioned. In #246 I mentioned <table> as a possible alternative, and I still think they would be as noone ever voiced a compellin greason against that. I just started with the other approach first and it worked well enough so far. I think that if we switch to tables then we should be careful about fully resetting their style: a website might well have tables styled differently in many ways, so we must undo all website styling with sufficient specitivity.\nI'm not sure whether we can get HTML tables to behave like LaTeX tables in situations where the multicolumn is the one defining the width. How is the extra width distributed among the contributing columns in such a case? A bit of experimentation or literature research will probably be useful here. Of course, having any form of multicolumn support is probably better than none at all, and will likely already cover many typical situations.\nAnother thing we should be careful to check is whether we can get rows of a table to overlap. With negative space between rows, such overlap can easily happen in the LaTeX world. I would guess that with visible overflow and negative margins or padding, this should be possible in the CSS world, too, but I'm not 100% sure.. Many shortcomings of CSS layouts can be dealt with using flex layouts, but so far I haven't come up with a way how a flex layout would help with multicols. My main concern at this time is vertical positioning. We need to wrap the cell content in such a way that we retain full control over cell height and the position of the content, while at the same time using the automatism from the table layout to determine the width of the cell. Some stand-alone experiments to this end might be useful.. Relevant part of amsmath.sty:\ntex\n\\renewenvironment{cases}{%\n  \\matrix@check\\cases\\env@cases\n}{%\n  \\endarray\\right.%\n}\n\\def\\env@cases{%\n  \\let\\@ifnextchar\\new@ifnextchar\n  \\left\\lbrace\n  \\def\\arraystretch{1.2}%\n  \\array{@{}l@{\\quad}l@{}}%\n}\nThe most important here seems to be the non-default \\arraystretch, which the current array implementation doesn't support yet.\n. The rendering of this code looks pretty close to what LaTeX does. The spacing within \\text{\u2026} seems to be somewhat different, but that should be an unrelated issue, and not a serious one imho.\n\n. defaultIfUndefined is a pretty long name, imo. If you can think of something shorter which is sufficiently clear as well, I'd be happy about it. If not, I'll go with this for now.\n. It seems I can't tick boxes in your comment, but it's all done now.\n. Thanks for the merge.\n. While you are at it, do you want to state any preference about the base of the commit? Is it OK for us to squash things to the point where we started diverging, or should we make an effort to rebase to current master? How about bugs, do you want those based on current master or rather on the point in time which introduced the bug? Always barring merge conflicts with current master, of course.\n. \\pounds would benefit from the mainit class you declare in #132, so I'd wait on that. Again.\n. > Normally one writes ^\\circ for a degrees sign\nI try to disabuse people of writing ^\\circ since it results in a different \u2013 and in my opinion inferior \u2013 rendering. The fact that the font has a degree symbol seems like indication that someone agrees. Of course, I'm in the privileged situation of using a German keyboard which has the \u00b0 sign readily accessible.\n. I guess it's a matter of laziness: with LaTeX, getting a proper degree symbol takes some extra packages. You get \\textdegree fairly easily, but a \\degree which works in math mode requires gensymb or siunitx, as far as I know. I assume few people go through all that trouble if ^\\circ works well enough for them. And once the got into that habit, they don't change it if they write for MathJax or KaTeX.\n. @kevinb7 Have a second look, and you will find that gensymb.sty actually contains two possible definitions for \\degree. If the textcomp package is loaded, it will use the companion font using\ntex\n\\DeclareMathSymbol{\\tcdegree}{\\mathord}{gns@font}{176}      % {'260}\n\\DeclareRobustCommand{\\degree}{%\n  \\ifmmode\\tcdegree\\else\\textdegree\\fi}\nI wasn't aware of this extra requirement; I have \\usepackage{textcomp} as part of by default preamble. Together with \\usepackage{gensymb} and \\DeclareUnicodeCharacter{00B0}{\\degree} thanks to this TeX.SE thread.\n. I had another look at this today. Handling ligatures like --- or ``` in the lexer is probably not fully compatible with TeX:\\def\\dash{-} 1 \\dash-\\dash{} 2will print an em-dash between the digits in my pdflatex, so the ligature-forming has to happen _after_ the lexer. It looks as though TeX did this ligature-forming in its version of the parser.1 -{-}- 2` will generate three hyphens, so the grouping of characters does affect the outcome.\nSo I moved the ligature handling into the parser. I'm not opening a pull request yet, since my modifications build on #493, but here is a preview of the diff I'd be requesting.\n. Now that #493 has been merged (thanks, Kevin!) I've opened #502 for the mentioned additions. Doesn't take care of all the symbols contained in my initial report, but quite a number of them.\n. Have you also considered fonttools? As far as I can tell, it is pure Python, with no dependency on freetype, which should ease portability quite a bit. In particular, it is to be hoped that it works with the OS X version of Python, with no need to install custom Python versions.\nSo far I've only been using the ttx command line tool from fonttools to extract the cmap tables from the fonts, see https://github.com/gagern/KaTeX/commit/86030f7ca43ea3966c5027dafdf44d2ad5c86f03. But it can parse many other TTF tables as well, and I don't think one would have to go via the XML file but could use it directly as a Python package.\n. > print face.glyph.metrics.horiAdvance\nThat could be read from the hmtx table using fonttools, but we don't actually store horizontal advance, do we?\nThe way I read extract_ttfs.py, the skew and italic correction come from somewhere else, and only the height and depth come from the TTF, namely form the bounding box of the character. ttx exports the bounding box using the yMin and yMax attributes of the TTGlyph elements of the glyf table. So the data should be accessible via fonttools. If you want to, you can have a look at how fonttools handles the glyf table.\n. Making good progress here, will have a pull request soon.\n. I'm trying to track down some non-determinism here. Character 305 of the Main-Regular font sometimes has skew correction 0.02778 and sometimes 0.0. Character 567 is affected in a similar fashion, and occasionally I've seen many symbols change their data, but right now I can't reproduce this.\nAt first I thought these problems to be due to the fact that extract_ttfs.py uses ord(char) as an index when writing its result, which does not overwrite the existing value with index str(ord(char)) so it's pure luck which of the two will end up in the final result. But the issue with character 305 is already present one step earlier, at the output of extract_tfms.py. Perhaps there is another similar mistake somewhere in there.\n. OK, looks as if we had some problem in mapping.pl. The character 305 of Main-Regular is sometimes associated with cmr10 and sometimes with cmmi10.\n. Yes, there are conflicting mappings for cmr10 and for cmmi10.\n. I think we should have some code to catch this kind of mistake and complain loudly\u2026\n. Have a look at my metrics branch to see the direction I'm going. Right now I think it's easier to complain in the normal course of operation and not have a unit test. Here is the complete list of things we have to fix:\nDuplicate mapping 8723 for Main-Bold\nDuplicate mapping 305 for Main-Bold\nDuplicate mapping 567 for Main-Bold\nDuplicate mapping 44 for Main-Bold\nDuplicate mapping 46 for Main-Bold\nDuplicate mapping 46 for Main-Regular\nDuplicate mapping 44 for Main-Regular\nDuplicate mapping 305 for Main-Regular\nDuplicate mapping 567 for Main-Regular\nDuplicate mapping 8723 for Main-Regular\n. Instrumenting perl code is no fun, so I don't know how to achieve this and I don't think it's worth the effort. After all, we just saw that it picks up problems.\n. > Nice find. We should be using cmmi10 for both \\imath and \\jmath because these glyphs don't exist in cmr10.\nI disagree. \\x10 and \\x11 of cmr10 are dotless i and j, and they match the \\u0131 and \\u0237 of the KaTeX_Main-Regular font since they are roman. So I'd say we delete the other mapping, resp. ensure that's against the Italic font.\n. Would you agree that \\x3A and \\x3B of cmmi10 likely refer to punctuation for old numerals?\n. How shall we deal with this commit here in relation to #303? On the one hand, this commit here is the older one.\nOn the other hand, reviewing this here might be a lot easier if #303 got merged and this one here rebased onto that one. And there are other benefits as well. With @1f8610cebe2c99223db4082a834fb814afd2b697 you could suggest make PYTHON=/usr/local/Cellar/python/2.7.9/bin/python in the README, without danger of a changed shebang getting committed accidentially. You could also drop the install instructions for fontforge.\nPerhaps we can simply disregard these issues about python version and fontforge installation here, merge things as they stand knowing that it's a temporary solution, then rebase #303 onto this and add a commit to that which cleans those things up. If this request here is about ready to be merged, then that solution would be preferable, since I'm really waiting for this font stuff to hit master so I can gain some traction with my subsequent restructuring plans.\n. The commit message writes \u201cPart 2 will add\u2026\u201d which should read \u201cPart 3\u2026\u201d. The screenshot tests don't cover the question of the scope of the new commands, discussed in https://github.com/Khan/KaTeX/pull/132#issuecomment-117103983.\n. I think the scoping checks, or at least one scoping check, makes sense for \\mathrm and friends as well. To check that they affect nested groups but the effect does not leak past the end of the group.\n. The Lap example got incorrectly included in this commit, right? I'm really looking forward to getting that non-determinism dealt with automatically one day soon\u2026\n. I'm so happy that this is going forward now!\n. > The TeX Book makes reference to \"Vcent atom\", does this correspond the vertical centering of content within cells?\nNot so much within the cells but rather the whole matrix against its surroundings.\nWhen I run \\showlists on a\\begin{array}{c}b\\end{array}c I see this:\n\\mathord\n.\\fam1 a\n\\vcenter\n.\\vbox(8.39996+3.60004)x14.29166\n..\\hbox(8.39996+3.60004)x14.29166\n...\\glue(\\tabskip) 0.0\n...\\hbox(8.39996+3.60004)x14.29166\n....\\rule(8.39996+3.60004)x0.0\n....\\glue 5.0\n....\\glue 0.0 plus 1.0fil\n....\\mathon\n....\\OML/cmm/m/it/10 b\n....\\mathoff\n....\\glue 0.0 plus 1.0fil\n....\\glue 5.0\n...\\glue(\\tabskip) 0.0\n\\mathord\n.\\fam1 c\nSo the matrix as a whole is a \\vcenter which is of type Vcent. But the spacing table in chapter 18 doesn't mention Vcent any more. So we need Rule 8 from Appendix G to know that this box will have its center aligned with the math axis, which is \u03c322 above the baseline. And the resulting box will become an atom of type Ord. So that's why an {array} should be of type Ord.\n. Rebased, Travis is happy, ready to go.\n. > The output should be labelled more clearly.\nAgreed. Done that.\n\nAfter running it looks like it's telling me that we're not defining the spacing commands correctly.\n\nPerhaps not even that. Perhaps we're just using a different vocabulary. I'm not sure right now how spacing fits in with the whole atom type framework, whether spacing commands are even supposed to have a type.\n\nMaybe the default could be to only show incorrect symbol types and with a certain option it would also show incorrect definitions.\n\nMaybe we should ignore any mismatch if the KaTeX type is spacing. After all, I'm not verifying definitions at all, just the atom types. I took that approach in f2cf08569fc49e1aa35b19d53ee9d198bc22d574. This leaves us with three reported mismatches: \\colon which should be handled in #307, and \\space and \\omicron which don't produce any output. The former makes a lot of sense, since spaces in math mode get ignored. And \\omicron is undefined, so I'm surprised that this didn't cancel the typesetting, but not surprised that I don't see it in the output.\n. I kept the actual fix as a separate commit, distinct from the tool used to identify the problems.\n. I'm displaying two diffs for each test case. The first is old file in red and new file in green, the second is new file in red and LaTeX in green.\nArrays:\n\n\nBinomTest\n\n\nDeepFontSizing\n\nThere is no comparison against TeX for this one, since deep font sizing doesn't work there yet.\nDisplayMode\n\n\nDisplayStyle\n\n\nFractionTest\n\n\nI've added some extra text to this one, to catch some of the group type related issues described in https://github.com/mathjax/MathJax/issues/969.\nNestedFractions\n\n\nPhantom\n\n\nRlapBug\n\n\nText\n\n\nOn the whole I'd say the changes are all going in the right direction, even though some of the cases are not yet as close to the TeX rendering as one would wish.\nBy the way: the second image for each test case was created by the newly merged texcmp utility. The first was the result of the following command:\nsh\nrm -rf imgdiff\nmkdir imgdiff\nfor i in $(git status --porcelain test/screenshotter/images | awk '/^.M /{print $2}'); do\n  git show HEAD:$i | convert \\\n  \\( $i -grayscale Rec709Luminance \\) \\( png:- -grayscale Rec709Luminance \\) \\\n  \\( -clone 0-1 -compose darken -composite \\) -channel RGB -combine -trim imgdiff/${i##*/}\ndone\n. I'd say the group and moustache delimiters are primarily intended as delimiters, i.e. with \\big and friends, or \\left and \\right. If TeX and LaTeX differ in size, I'd say we should aim for the LaTeX rendering, since most users will be more familiar with LaTeX than plain TeX I guess.\nThe fact that TeX and LaTeX renders these things strangely when they are not used as delimiters doesn't seem to be a desirable feature to me. This is in my opinion similar to how in https://github.com/Khan/KaTeX/pull/132#issuecomment-113748502 I argued for some kind of fallback: symbols not supported by a selected font should render in some default font. This is contrary to how TeX deals with the situation, namely printing any symbol which accidentially happens to be in the corresponding location of the selected font. I'd say that kind of behavior is unspecified in TeX so we should be free to do something more sensible. Likewise here: TeX prints just some parts of the delimiters in question, which doesn't look like intentional behavior to me, so we should be allowed to do something more sensible and print the complete glyphs we have at our disposal.\n. Travis just made me aware that the small group and moustache symbols were already available. It's just their use as delimiters which was not available. So since the controversial part was already included in the code base, I hope that the part about using them as delimiters is non-controversial.\n. Added them in this change. Thanks for merging!\n. Note that\n1. Travis itself is moving to Docker, offering lots of benefits, speed in particular.\n2. Currently, there is no sudo support within their containers, for security reasons.\n3. travis-docker makes excessive use of sudo, and in particular runs its whole user-mode linux with sudo. So it can't run on the new infrastructure, which is why some of the examples state sudo: true.\nThis raises several questions.\n- Does the fact that they themselves use Docker help us somehow? I've just posted a request (https://github.com/travis-ci/travis-ci/issues/4266) for linking with Selenium containers, let's see how that turns out.\n- Does the move towards Docker mean that the old system will get deprecated any time soon? If so, we shouldn't build on some technique which won't work on the new setup.\n- Will they get sudo support enabled on the new infrastructure eventually? I know too little to tell, and haven't yet found any public discussion of this issue. Chances are the old infrastructure will stay around while that support is still missing, but I'm not sure of this.\n- Will travis-docker ever work without requiring sudo? That depends on whether UML can be made to run without root privileges. I'll have to test that.\nI believe that it should be enough to take all the packages used inside the docker, package them in some tarball, and use that in combination with LD_LIBRARY_PATH to run the screenshotter as a normal user with no special privileges or additional virtualization layers. The main benefit would be speed, since the container would be ready for use more quickly. The main drawback would be that we'd have two different ways of running the screenshotter (btw, shouldn't this be screenshooter?), which I know you don't like.\n. See https://github.com/gagern/selenium-chroot for my own idea of how to handle the situation. Although I must confess that it turns out to be more problematic than I had envisioned, so it doens't work yet. It would still be great if this could be made to work.\n. Look what I found today: http://docs.travis-ci.com/user/docker/\nIt looks as if Travis now supports docker usage all by itself. That should simplify things quite a lot! I'll try to make this work for KaTeX as soon as I find the time, unless someone else did so by then.\n. Solved by #303.\n. If you want to unit-test things about fonts and their metrics, have a look at https://github.com/gagern/KaTeX/commit/7a209d7a618f367c553ae69bd07f4bd07eae7a2e?diff=unified. This is not unit testing the sanity checks in the various metrics scripts, but instead performing additional sanity checks which might require manual verification. For example\nVerify name yen of KaTeX_AMS-Regular glyph U+00a5 matches Yen of msam10 glyph 85=0x55\nindicates a harmless naming discrepancy while\nVerify name underscore of KaTeX_Main-Regular glyph U+005f matches endash of cmr10 glyph 123=0x7b\nsounds more disturbing. Investigating that (just as an example) I found out that in OT1 encoding, \\_ doesn't produce a character but some \\rule instead. With \\usepackage[T1]{fontenc} I get a box \\T1/cmr/m/n/10 _ but then dvips uses sfrm1000.pfb for that part of the file, and we aren't reading metrics from cm-super fonts at the moment. Perhaps we should.\nI encourage you to look at the list which is part of that commit, and point out any lines in the output you think are worth investigating. I will do the same. And of course you can re-open this ticket here, unless you prefer a new one for the slightly different focus of the tests, namely not on the code but on the data.\nBy the way, note that the commit indicated above also produces font charts with various information, which might be very useful when investigating the reported issues but which I didn't include in the commit but generated in build/charts. So you might want to check out the fontcheck branch and actually run the code to get a look at these files.\n. I'll commit modifications to existing commits as squashes and fixups, so that once you're satisfied, I can git rebase -i --autosquash everything to keep the logical units intact.\n. > But maybe the last commit could be merged into the second one, which is something you can do with rebase -i?\nEven better with git rebase -i --autosquash, as I already said. I'll wait on a decision about my most recent fixup, whether that should be included or not (discussion here or on that commit), and if that's resolved I'll rebase and you can merge, right?\n. @kevinb7 Sure, I can do that. Thanks for merging!\n. If people follow semantic versioning, every bump in major version number indicates some kind of incompatibility. Whether that actually affects us is a different question, though.\n. Reading https://github.com/strongloop/express/wiki/Migrating-from-3.x-to-4.x will help migrating the server. There is indeed a lot that changed there, but the migration instructions are well-written.\n. Not every user of KaTeX uses npmjs to get it. How can we find the others? Go through the 3,900 hits for katex.min.js reported by Google?\n. - Dropbox Paper as per #551.\n- Bokeh using an extension.\n- CindyJS which is what got me involved.\nWhat do we do about this collection of projects? Put it in the README? Put it in the Wiki? Put it on the website? All of these?\n. I just realized that without the amsmath package, : indeed behaves as \\mathpunct{:}. It is defined as \\mathchar\"603A according to \\show\\colon, and there is a line\ntex\n\\DeclareMathSymbol{\\colon}{\\mathpunct}{operators}{\"3A}\nin fontmath.ltx. But I think on the whole KaTeX is behaving like LaTeX with the amsmath package loaded, right?\namsmath.dtx has this information about the definition of \\colon:\n\n\\colon is for a colon in math that resembles a text colon: small space on the left, larger space on the right. The : character by itself is treated as a \\mathrel i.e. large, equal spacing on both sides.\n\nUnfortunately, this doesn't make the situation much clearer to me.\n. OK, the \\nobreak doesn't affect us, since we don't break anyway. The skips are easy enough, and we can ignore the plus1mu stretch of the latter since we don't stretch anything. {:} indeed produces a \\mathord{:}. So far things are clear to me.\nWhat I'm less clear about is the distinction between \\mskip and \\mkern. Is it that an \\mskip could be subject to line change while an \\mkern can not?\nIntuitively I'd have thought that the \\mskip2mu gets turned into an atom in its own right, but apparently that's not the case. So the \\mathpunct{} should indeed affect the spacing before the \\colon.\nLooking at the table from chapter 18, one can see that the implicit spacing between a \\mathpunct and a \\mathord is \\thinmuskip but no space is added in script and smaller styles. So the explicit kerning here cancels the implicit spacing, cuaisng the two atoms to follow one another with no glue in between.\nIf we wanted to do this as a macro, we'd need to implement those low-level atom-changing commands like \\mathpunct. Might be a good idea in any case, since they are powerful building blocks for a lot of stuff.\n. @kevinb7: Tweaked code to incorporate your comments. Let me know when you consider this ready for squashing.\n. @kevinb7 squashed and ready. Travis happy.\n. Now the query string only contains the bare minimum it needs to contain. But I strongly feel that this code adds complexity for no actual gain, so I'm including that last commit against my better judgement.\n. Merging current master, I had to add two more keys to the whitelist of things which are to be added to the query property. So this kind of change would require modifying one more file in the future, which I consider bad. I could of course change the whitelist to a blacklist, but I still maintain that not filtering at all is the best solution, since it doesn't hurt anyone and keeps things simple.\n. @kevinb7 I hadn't noticed 0dc9eed1c42ab111b1ba1d795270e579d4b423cc before, thanks for pointing this out. Can you upload your variants of these screenshots somewhere, e.g. as a separate branch (with no pull request)?\nI don't think that this is the same issue, though: subpixel rendering would affect pretty much all of the screenshots, so if you can reproduce at least some screenshots, then you should have the same subpixel behavior. So perhaps we should open a new issue for the Chrome divergence.\nWhich version of the two Firefox screenshots in question here can you reproduce on that setup with the diverging Chrome results?\n. PR #340 supersedes this one: if you merge that, there is no need to merge this here as well. If you merge this here first, then that, then the history will be clearer but it would mean more work for me.\n. The title is incorrect: at least for me, chrome screenshots have not diverged from the initial commt, or at least not all of them. However, the have diverged from the most recent commit, namely ce99abd1f209b49680910fb9a93a7a45c0025f25. That commit by @xymostech needs some investigation. Taking Arrays-chrome.png as an example, I can reproduce the state from b7e1581869ea4f5d20a6b7d7f0b0dc7bb4ae6f64 but not from ce99abd1f209b49680910fb9a93a7a45c0025f25. The PNG files from these two commits are the same in terms of pixel values (i.e. pngtopam yields the same result), but not in terms of binary encoding. Surprisingly, the differences are not in metadata, nor in the compression efficiency. The files have exactly the same size, the individual IDAT chunks have equal size, but still the pixels are encoded somewhat differently.\nUnless @xymostech or someone else has some idea as to why the image got encoded differently, my best bet would be addressing the symptom by parsing and then recompressing the PNG file. One way would be using some JavaScript-based PNG encoder/decoder. pngparse suggested in the discussion following this comment seems to only decode. Ideally, I'd use optipng which has the added benefit of reducing the file size. But requiring a specific version of optipng to be installed doesn't feel right. Perhaps I can use emscripten to compile optipng (and its dependency libpng) to JavaScript and provide that as a Node module.\n. Except for LimitControls and UnsupportedCmds which were only added later, the images from your 90f9e12df3639633911f651ab8c3e20ff9f66081 and my b7e1581869ea4f5d20a6b7d7f0b0dc7bb4ae6f64 are the same. I still don't know what @xymostech  did to get those other results in ce99abd1f209b49680910fb9a93a7a45c0025f25. To verify the mentioned equality:\nsh\nfor i in test/screenshotter/images/*-chrome.png; do cmp --quiet \\\n<(git show 90f9e12df3639633911f651ab8c3e20ff9f66081:$i) \\\n<(git show b7e1581869ea4f5d20a6b7d7f0b0dc7bb4ae6f64:$i) \\\n|| echo $i differs; done\nThere are various JavaScript png encoders around, e.g. pngjs2 (which comes with a comparison of alternatives). However, they use node's own zlib package under the hood, so if that changes, then the results might not be reproducible. One possible approach would be starting with one of these packages, but swapping out the zlib package for something with a fixed version number (perhaps pako).\nI also had a closer look at optipng. Unfortunately, compiling that to an in-memory-only node package via emscripten will probably be tricky, since it has synchroneous I/O tightly integrated with its optimization. At least if one were to call the official public library functions. I might have to call something more internal instead. As a bonus, optipng comes with its own copies of libpng and zlib, so that the result should be self-contained and yield perfectly reproducible results. If I ever get this far.\n. In https://github.com/gagern/KaTeX/commit/eabe35279d0e01e740fbd1e1218f16aa5713282c from my pngRepack branch I've had a stab at creating PNG files in a reproducible fashion. Unfortunately the resulting files are considerably bigger than the ones created by Selenium itself.\n. PR #340 should resolve this, please consider merging it.\n. I'd be somewhat worried that changing our default would break existing content. Although at the moment I can only think of situations where increasing the font size would lead to serious problems. By the way, I think MathJax scales by 108%. At least that's what I noticed some time ago. Not sure why, or how important we consider compatibility with that choice.. > The LimitControls and UnsupportedCmds images also changed, which is worrying... Maybe my computer just doesn't like rendering images the same as everyone else.\nThat's #324. I'd say that when you rebase this to squash it, those two image changes should be kept out since they are unrelated. The screenshotter.js modifications are unrelated as well, so personally I'd keep them separate, too. What was the motivation for those, by the way? Had you actually encountered trouble with the window size at some point? Reproducible?\nSince the \\doublerulesep of 2pt doesn't scale with current style, #296 applies here as well, I think. We should have a test case for that situation, a matrix in scriptscript style with a double vertical line.\nApart from these really minor concerns, nice work! Two boxes to tick in #269 and half of #267 done as well. Looking forward to seeing this included.\n. So what do we want? Compatibility with LaTeX, nice defaults, or a setting to switch between these two? Or some more fine-grained controls?\nInternally LaTeX has no space between its row boxes, but each row box contains a strut, which ensures a minimal height and depth (of 0.7 resp. 0.3 of the common line height). A row with high content exceeds the dimensions of a strut, and therefore leads to touching content.\nIn my experience, this surprisingly is the right thing to do if you only have a few items of greater size in your matrix, since it tries hard to place the matrix rows at regular intervals. When the matrix contains mostly fractions, though, the setup looks indeed strange. But even with a bit of space, these are somewhat hard to read unless you make the space really big, the way MathJax apparently does. I'd be careful to deviate from LaTeX this far unconditionally. You can always add extra line height using the \\\\[3ex] notation or similar, and you can even copy&paste the tweaked formulas into a LaTeX document and expect similar rendering. Or use a solidus and write fractions on a single row, depending on your tastes.\n. Perhaps @JeffEverett created those two screenshots using Selenium directly, without the docker, therefore taking shots from his local Firefox setup. This is the most likely explanation I can think of.\nThis patch here increases the time to take screenshots from 45s to 168s. A factor of two in that is due to the fact that we're now using two different browsers, so the optimization causes another factor two increase in processing time, approximately. I know that jspngopt could be made faster using asynchroneous zlib calls, but since here we're using pako not zlib, that won't help for this use case. What I probably could do is work out the parameter combinations which actually yield the smallest results for our inputs, and then restrict the search space to that.\n. Is greediness a concept in TeX as well? Or is it simply that any expandable macro gets expanded before the math formula gets assembled, so the \\mathbf{F} will produce a single group which will then be placed into the exponent as is? If so, should we try to systematically assign greediness based on whether the function in question is an expandable macro or an unexpandable command in TeX?\n. If you want to automatically verify that essentially nothing changed, you can use code along these lines:\n``` js\n\"use strict\";\nvar child_process = require(\"child_process\");\nvar newSymbols = {rev: \"414f9dd248b2822d6f46da529942035dff9960be\"};\nvar oldSymbols = {rev: newSymbols.rev + \"^\"};\nload(oldSymbols);\nload(newSymbols);\nfunction load(obj) {\n    child_process.execFile(\"git\", [\"show\", obj.rev + \":src/symbols.js\"], step2);\n    function step2(err, stdout, stderr) {\n        if (err) throw err;\n        obj.code = stdout;\n        var f = new Function(\"module\", obj.code);\n        var m = {exports: {}};\n        f(m);\n        obj.data = m.exports;\n        if (newSymbols.data && oldSymbols.data)\n            process.nextTick(compare);\n    }\n}\nfunction compare() {\n    compareMode(oldSymbols.data.text, newSymbols.data.text);\n    compareMode(oldSymbols.data.math, newSymbols.data.math);\n}\nfunction compareMode(oldDict, newDict) {\n    var key;\n    for (key in oldDict) {\n        if (!(key in newDict)) throw new Error(key);\n        compareSymbol(key, oldDict[key], newDict[key]);\n    }\n    for (key in newDict) {\n        if (!(key in oldDict)) throw new Error(key);\n    }\n}\nfunction compareSymbol(key, oldSym, newSym) {\n    if (oldSym.font !== newSym.font) throw new Error(key);\n    if (oldSym.group !== newSym.group) throw new Error(key);\n    var oldReplace = oldSym.replace;\n    if (oldReplace === undefined) {\n        if (oldSym.group === \"spacing\")\n            oldReplace = null;\n        else\n            oldReplace = key;\n    }\n    if (oldReplace !== newSym.replace) throw new Error(key);\n}\n```\nIf you look at the magic around oldReplace, you see that there are some changes. There are entries where replace used to be undefined in the old code, but will be equal to null or key in the new code. The latter is essentially a no-op according to makeSymbol and makeOrd. And spacing has its own code paths in buildHTML and buildMathML which don't seem to use the replace property at all..\n. Thanks! One down, three to go\u2026\n. > Where did the numbers for the KaTeX logo come from?\nAs I wrote in the commit message, I started with the definition of the logo from katex.less, but tweaked that until it gave a good visual match, in particular a very similar logo width, no matter the actual numbers. So at first I had\ntex\n\\DeclareRobustCommand{\\KaTeX}{\\mbox{%\nK\\kern-.32em%\n{\\sbox0 T\\vbox to\\ht0{\\hbox%\n  {\\fontsize{.75em}{1em}\\selectfont A}%\n\\vss}}%\n\\kern-.23em%\n\\TeX}}\nbut in that setup, the A was too high, and the K and the A were too close together. The former I fixed by introducing some vertical kerning before the \\hbox, chosen pretty much arbitrarily but the result looked good. The latter I tweaked manually as well. Now that I think about it, the 0.32em in katex.less probably refer to the font size of the A, so that should be 0.32\u22190.75em=0.24em. Nevertheless, the 0.26em negative kerning made the left side of the K align better in the texcmp output, so that's what I chose. The 1em line height was arbitrary as well, and shouldn't matter since we're not typesetting more than one letter.\ndiff\n \\DeclareRobustCommand{\\KaTeX}{\\mbox{%\n-K\\kern-.32em%\n-{\\sbox0 T\\vbox to\\ht0{\\hbox%\n+K\\kern-.26em%\n+{\\sbox0 T\\vbox to\\ht0{\\kern.05em\\hbox%\n   {\\fontsize{.75em}{1em}\\selectfont A}%\n \\vss}}%\n \\kern-.23em%\n \\TeX}}\n. There are several issues to this which should be considered.\n- Explicit numbering using \\tag. This is probably easiest, since it simply means taking the given number and putting it somewhere to the right of the equation. Since we don't support \\\\ outside array-like constructs, we don't have to worry about whether to apply one or multiple numbers in that case.\n- Equation environments with automatic numbering. Things like {equation}, {gather}, {align}. In my opinion, it would make sense to allow these only on the outermost level, i.e. if the environment starts at the very beginning of the input and ends just before the end, perhaps with some whitespace padding at either end. Personally I'd rather implement such top-level-only environments after #347 got merged and also after #266 resp. https://github.com/gagern/KaTeX/commit/e98b34ebee30238b108bc60969e3f952fb014b34 got implemented.\n- Consistent numbering across different KaTeX blocks. I imagine we'll want to allow some counter-holding object in the options, something like counters: {equation: 0}. Passing the same counters object to multiple invocations would ensure that the counters get incremented consistently across these invocations.\n. Let's include some texcmp images. TeX in green, KaTeX in red, as usual.\n- MathIt: \n- MathTt: \n- MathBf: \n. A texcmp comparison, with TeX in green and KaTeX in red:\n\nRight now I can think of three possibilities: either the glyph is positioned differently in the font, or the typesetting mechanics do some italic correction or some such differently, or TeX adds some explicit spacing in a different way.\n. @kevinbarabash included your two suggestions, rebased to current master (resolving one conflict). Ready to merge, I think.\n. @kevinbarabash Augmented my commit to include that comment. Any other concerns?\n. Imo #251 doesn't need widths since it can measure them on the fly.\nBut there are applications where having a width would be great. One thing that comes to my mind would be big horizontal constructs, like underbraces. Horizontal boxes with various amounts of stretchable glue distributed over them would be another. Automatic wrapping of equations comes to mind as well, even though TeX doesn't do that. And of course there is always output to other formats with no interactive font measurement facilities, like SVG.\nWhat has me somewhat worried is the fact that different typesetting engines might make different choices with respect to kerning and so on, and over longer stretches of glyphs, these might amount to considerable errors. So mixing automatic and manual horizontal positioning is perhaps a bad idea. And doing it all manually would mean not only having all the widths, but all the kerning pairs as well, wouldn't it?\n. @pnsaevik: If one were to use <text>, one would have to make sure that the fonts used are the ones shipped with KaTeX. In a browser, it might suffice to use the same CSS file as for KaTeX. For stand-alone SVG, one might have to link to external resources or embed the fonts as data: URIs. And one would have to choose between WebFonts and SVG fonts. The latter don't support various features like hinting, but on the other hand SVG fonts are the only font the SVG 1.1 spec requires viewers to support. Not that it were actually supported in the wild, though.\n. Did KaTeX even work in IE8? https://github.com/Khan/KaTeX/issues/263#issuecomment-128927322 suggests otherwise, but I didn't confirm that suggestion. In any case, the browserstack results discussed there might be useful in formulating official support statements.\n. There seem to be some sporadic issues with some of the test cases. While the Travis run on this pull request here went through ok, the one for my latest push failed, even though the two trees should be identical. The reported differences are\ntest/screenshotter/images/MathDefaultFonts-chrome.png\ntest/screenshotter/images/MathSf-chrome.png\nso I guess it might have something to do with font loading. Possible ideas how to address this:\n1. Introduce some slight unconditional sleep between get and takeScreenshot.\n2. Do a client-side wait in the scope of the page using executeAsyncScript to make sure the wait doesn't get parallelized with the page load.\n3. Take more than one snapshot if the outcome doesn't match the expectation.\n4. Run some asynchroneous script to check that all fonts have been loaded. This might hide some accidential dependency between webfontloader and KaTeX, so I'd rather not do this.\nRight now 3 sounds the most reasonable to me.\n. OK, this looks better now. I've implemented the retry approach, and I'm already seeing it in action in the test output, so this works as intended. Is it OK to have this in two commits, or should I squash it into one?\n. I stayed with promises because the Web Driver uses them, and I didn't want to introduce yet another async paradigm. But it might be worth considering, particularly since recent selenium seems to be depending on ES6-capable node versions in any case.\n. @kevinbarabash: Updated my second commit. Factored that wait into a separate method, added some comments and also adjusted the special case handling for the Lap example.\n. The approach seems to be somewhat fragile: https://travis-ci.org/Khan/KaTeX/builds/90289211 failed on me, and I don't see why yet. I haven't observed such hangs in local test runs. The last lines of the build log are:\n```\nStarting container for selenium/standalone-chrome:2.46.0\nContainer eb6b12b103e2 started, creating screenshots...\nSelenium driver at http://172.17.42.1:32769/wd/hub\nKaTeX URL is http://172.17.42.1:55029/\nNo output has been received in the last 10m0s, this potentially indicates a stalled build or something wrong with the build itself.\nThe build has been terminated\n```\nLooking at the script, we know that the HTTP server serving KaTeX started up correctly, and that we haven't received any snapshot yet. tryConnect might loop for up to 50 \u00d7 0.2s = 10s so I'd assume that we got a successful connection to the selenium server, at least at the TCP level. So presumably the script got hung someplace waiting for some feedback from Selenium. This might be hard to debug.\n. I augmented the script with some more output, and tried to reproduce the problem with that. So far without success in reproducing either the hang or the exception you got. And that exception doesn't look like something under our control either.\n. SessionNotCreatedError: session not created exception\nfrom chrome not reachable\n  (Session info: chrome=44.0.2403.125)\n  (Driver info: chromedriver=2.16.333243 (0bfa1d3575fc1044244f21ddb82bf870944ef961),platform=Linux 3.19.0-30-generic x86_64)\nchrome not reachable might indicate an error in the communication between the selenium server and the chrome application. I've just asked about this on Stack Overflow, perhaps we can get some idea as to what's happening here. We could also try updating our selenium images; we're using 2.46.0 while the latest is 2.48.2.\n. @kevinbarabash I addressed one of your concerns, and commented on the others.\n. Rebased.\n. I'm glad you don't mind being reminded this way. :grinning:\n. I adressed most of your concerns; those I didn't comment on. Also fixed one off-by-one error in one error message position. If this looks fine to you, let me know and I'll squash and rebase it.\n. Fixed and squashed. The docstring for the consume parameter now reads like this:\n* @param {boolean=} consume whether to consume the expected token,\n *                           defaults to true\n. I've got a commit here to get rid of the test/jasmine directory in our repository, using a devDependency on jasmine-core instead. I also modified the server to include test/*-spec.js in its browserified spec file, so that the tests from #385 will get included in http://0.0.0.0:7936/test/test.html as well. Do you want me to include that in this PR here, or file another request once this here gets merged?\n. OK, I'll wait for this one here to land. By the way, the issue reported by travis appears to be spurious. Hopefully #388 will avoid them in the future.\n. More importantly, all of the unit tests were actually executed.\n. I can reproduce the FF window size problems here. Adding a bit of debug output, I get\n```\nRequested 1024 x 768 but got 1008 x 889\nRequested 1040 x 647 but got 1024 x 849\nRequested 1040 x 566 but got 1024 x 849\nRequested 1040 x 485 but got 1024 x 849\nRequested 1040 x 404 but got 1024 x 849\nRequested 1040 x 323 but got 1024 x 849\n\u2026/KaTeX/node_modules/selenium-webdriver/lib/goog/async/nexttick.js:41\n  goog.global.setTimeout(function() { throw exception; }, 0);\n                                      ^\nError: Failed to set window size correctly.\n```\nThe build history suggests that there may have been modifications to this image since I filed this pull request here. Unfortunately I can't see the digests of the images we used back then in the build log. Perhaps we should add docker images --no-trunc to the before_script section of .travis.yml.\nI just got myself the standalone-firefox-debug image and had a look at the operations using VNC. The window becommes pretty small, in line with the figures on the left of the above quotation. But apparently the screenshot is still larger, probably as large as the underlying HTML page, not just the visible area. And why is that underlying HTML page so large? Because it's some page displayed by Mozilla to welcome users after upgrading Firefox. So we need to suppress that, then we should be good to go.\n. These macros are defined in amsmath.sty as follows:\ntex\n\\renewcommand{\\bmod}{\\nonscript\\mskip-\\medmuskip\\mkern5mu\\mathbin\n  {\\operator@font mod}\\penalty900\n  \\mkern5mu\\nonscript\\mskip-\\medmuskip}\n\\newcommand{\\pod}[1]{\\allowbreak\n  \\if@display\\mkern18mu\\else\\mkern8mu\\fi(#1)}\n\\renewcommand{\\pmod}[1]{\\pod{{\\operator@font mod}\\mkern6mu#1}}\n\\newcommand{\\mod}[1]{\\allowbreak\\if@display\\mkern18mu\n  \\else\\mkern12mu\\fi{\\operator@font mod}\\,\\,#1}\nSo a \\bmod always has 5/18em before and after the operator name, without the extra 4/18em you'd usually get from a binary operation in non-script style. I guess that if the \\bmod gets turned into an atom other than Bin, the negative skip might actually reduce the surrounding space. The \\penalty is irrelevant as we don't wrap, as is the \\allowbreak. A \\pod has 1em leading space in display style, or 8/18em otherwise. A \\mod has 1em resp. 12/18 em before and 6/18em after.\nI guess we could turn all those offsets into \\kern or the corresponding internal representation.\n. I think it would be fairly easy to (a) support mu as simply another length unit and (b) treat \\mkern as an alias to \\kern and so on. That means people could write KaTeX code which LaTeX would reject due to use of wrong units. But I think that everything that LaTeX supports should work using this approach as well.\n. There is no \u20ac in the fonts. See #286 for things for which we have symbol but no way to enter them.\nThe \\dots symbol is tricky, since it sometimes behaves as \\ldots and sometimes as \\cdots.\ntex\n$(1,2,3,\\dots,16)$ % like \\ldots\n$1+2+3+\\dots+16$ % like \\cdots\nI'm surprised that the builds on Travis haven't caught the issue in texcmp.js.\nIn any case, it's better to write distinct pull requests for different issues.\n. I've seen such a thing recently: jshint suddenly complaining about things it didn't complain about before. In the case I saw, this was due to jshint 2.9.1-rc1. Usually npm doesn't install prerelease versions, but older npm versions apparently do. In this case, the npm from node 0.10 was to blame. @henzestplus, what versions of node and npm are you running?\n\nis there a reason that we're using new with ndarray?\n\nThe call felt like a constructor to me, so I guess I untuitively used it as such. Reading the ndarray docs I find that I'm wrong. Feel free to drop the new call, it appears to only cause unneccessary overhead and confusion, and will trouble jshint for more people once 2.9 gets released for real.\n. Yes, that's pretty ancient. Apparently the rules regarding prereleases were different in those days.\n. This sounds related to #41. It might even shed some new light on that one. Here is a comparison of TeX (green) and KaTeX (red) rendering:\n\nWhat I consider really interesting here is the fact that TeX renders the exponent in the numerator in a higher position than KaTeX, but the one in the denominator in a lower position. Things get even more interesting if we take that image and move both parts of the fraction to a common baseline and zoom in a bit:\n\nSo the differently shifted exponents are already present in both versions. It's just that the difference is more pronounced in TeX than it is in KaTeX. So perhaps we need to identify where that is happening, and see we match the amount of shift used by TeX.\nI guess the cause for these shifts is the fact that denominators use cramped style, which leads to different shifts. So perhaps our \u03c314 and \u03c315 are wrong? This comment describes where they came from:\n\nThese font metrics are extracted from TeX by using\ntex\n\\font\\a=cmmi10\n\\showthe\\fontdimenX\\a\nwhere X is the corresponding variable number. These correspond to the font\nparameters of the symbol fonts. In TeX, there are actually three sets of\ndimensions, one for each of textstyle, scriptstyle, and scriptscriptstyle,\nbut we only use the textstyle ones, and scale certain dimensions accordingly.\nSee the TeXbook, page 441.\n\nBut this doesn't work for me:\n$ tex -interaction=nonstopmode '\\font\\a=cmmi10\\showthe\\fontdimen14\\a'\nThis is TeX, Version 3.14159265 (TeX Live 2016) (preloaded format=tex)\n! Font \\a has only 7 fontdimen parameters.\nFollowing the manual I get these instead:\n```\n$ tex -interaction=nonstopmode '\\showthe\\fontdimen14\\textfont2' '\\showthe\\fontdimen15\\textfont2' '\\showthe\\fontdimen14\\scriptfont2' '\\showthe\\fontdimen15\\scriptfont2'\n\n3.62892pt.\n<> \\showthe\\fontdimen14\\textfont2 ...\n2.88889pt.\n<> ... \\showthe\\fontdimen15\\textfont2 ... \n3.01779pt.\n<> ... \\showthe\\fontdimen14\\scriptfont2 ...\n1.99998pt.\n<> ... \\showthe\\fontdimen15\\scriptfont2\n```\n\nOK, what do we see here? For scriptstyle we scale fonts by 0.7 compared to text style. So assuming a 10pt font we are essentially using \u03c314 = 0.7\u22c53.63 = 2.541 < 2.889 and \u03c315 = 0.7\u22c52.89 = 2.023 > 2.000. So yes, placement of these exponents is wrong, and we should find a way to fix this. I guess we will need to store all the different values of \u03c3 for the different styles, so that we can pick the one appropriate to the current style.\n. I have to concede that the observed difference between KaTeX and TeX placement of exponents in the denominator appears to differ by more than 0.02pt, so I don't know what else could cause this discrepancy. I thought it might be a different placement of the baseline in the TeX script fonts, but I can see no significant difference there (comparing 08{\\scriptstyle 08}{\\scriptscriptstyle 08}):\n\n. > an hitting enter a couple of times\n-interaction=nonstopmode helps there.\n\nyou can run tftopl which will return font dimensions\n\nIf I read the output correctly, tftopl will report these dimensions in em, while TeX reports them in pt. Just for comparison, here is a way to read them all from LaTeX:\nsh\nlatex -jobname=sizes -interaction=nonstopmode \\\n'\\documentclass{article}\\usepackage{amsmath}\\begin{document}$'\\\n$(for i in text script scriptscript\n  do echo '\\showthe\\'$i'font2'\n     for ((j=1;j<=22;++j))\n     do echo '\\showthe\\fontdimen'$j\\\\$i'font2'\n     done\n  done\n)' $\\end{document}'\nDoes display style re-use the values from the text font? I guess so.\n\nWe should definitely do the TODO on https://github.com/Khan/KaTeX/blob/v0.6.0/src/fontMetrics.js#L103.\n\n:+1: to that.\n. Implemented as of #423.\n. I do have something along these lines in my #251 render to canvas branch. There the result I'm returning from the prepare function contains a fontsUsed property which is an object with webfontloader-compatible FVDs as keys (and CSS font descriptions as values, but that's of little practical value). I'm using this in CindyJS.\n. @edemaine wrote:\n\nNow that #482 is implemented, is it worth implementing this as a manual function? Or worth waiting for macro support? Maybe a slight extension to #493 will allow us to add macros in the KaTeX source too?\n\nI'd go for the latter. It would definitely be desirable to express some TeX functions in terms of more elementary ones. I'd do that in the MacroExpander constructor, merging the user-supplied macros with a set of built-in presets, with the user-defined ones taking precedence. I'd put the built-in macros into a separate module, consisting of a single dict, for easier maintainance. I'll try to come up with a pull request to this effect.\nAs a proof of concept that our elementary functions are already sufficient to handle this, I tried the expanded version:\ntex\nF-1{,}6-BP\\mathop\\longrightarrow\\limits_{F-1{,}6-BP}F6P+P_i\n\nLooks good to me.\n@xymostech wrote:\n\nI'm not sure what \\binrel@ does \u2026\n\nIn amsmath.dtx I found the following explanation:\n\n\\overset and \\underset put symbols above, respectively below, a symbol that is not a \\mathop and therefore does not naturally accept limits. \\binrel@@ uses information collected by \\binrel@ to make the resulting construction be of type mathrel or mathbin if the base symbol is either of those types.\n\nJust in case it becomes relevant: I've had a look at \\binrel@. It essentially typesets $#1$ into a box, takes the width of that as a negative skip, and types ${}#1{}$ after that skip into another box, so the width of that box is essentially the spacing between #1 and the empty groups. By temporarily setting the various spaces to \u22121,0,+1, the sign of the width of that box can be used to distinguish these cases, and \\binrel@@ wil get set accordingly. Here is the code snippet to go with that, taken from amsmath.sty:\n```tex\n\\def\\overset#1#2{\\binrel@{#2}%\n  \\binrel@@{\\mathop{\\kern\\z@#2}\\limits^{#1}}}\n\\def\\underset#1#2{\\binrel@{#2}%\n  \\binrel@@{\\mathop{\\kern\\z@#2}\\limits_{#1}}}\n\\def\\binrel@#1{\\begingroup\n  \\setboxz@h{\\thinmuskip0mu\n    \\medmuskip\\m@ne mu\\thickmuskip\\@ne mu\n    \\setbox\\tw@\\hbox{$#1\\m@th$}\\kern-\\wd\\tw@\n    ${}#1{}\\m@th$}%\n  \\edef\\@tempa{\\endgroup\\let\\noexpand\\binrel@@\n    \\ifdim\\wdz@<\\z@ \\mathbin\n    \\else\\ifdim\\wdz@>\\z@ \\mathrel\n    \\else \\relax\\fi\\fi}%\n  \\@tempa\n}\n\\let\\binrel@@\\relax\n```\nThere is a lot of machinery in the \\binrel@ implementation which we likely won't support any time soon: saved boxes, width measurements, case distinctions, scoped assignments, \\edef with \\noexpand and so on. So I'd suggest we don't try to do this part via macros, but instead define \\binrel@ and \\binrel@@ as built-in functions.\nThe @ in these names might cause some trouble. Currently KaTeX is working in \\makeatother mode exclusively, with no \\makeatletter supported. We could rename those symbols, but that would pollute the user's macro namespace in perhaps unexpected ways, and cause considerable extra work, too. Should we switch to \\makeatletter mode when tokenizing macro bodies? As macro expansion uses it's own lexer, that might be feasible. And when we later add support for \\def and friends, that would use existing tokens from the main lexer, not a source string, so there would be no conflict.\nI'll reopen as solving this should be possible in the near future now. Perhaps without the \\binrel@ support at first, but that's better than nothing, right?. > It passes all tests.\nIt passes all jasmine tests. It fails two screenshotter tests, namely DelimiterSizing and LeftRightStyleSizing. Need to investigate further.\n. > It fails two screenshotter tests[\u2026]\nFalse alarm: These apparently were due to incomplete page loads, and incomplete fonts in particular. With the --verify option to screenshotter.sh I could verify that all tests eventually render as expected. Which is what Travis was running, too, as I should have recalled.\n. @cbreeden: I'm not sure what the goal of that restructuring would be, what problem it would solve. To me it sounds as if it would move complexity from the single forwarding call (e.g. parseGroup calling parseSymbol) and instead move that same complexity into all the places that currently invoke parseGroup. Leading to quite a bit of code duplication, and maintainance work those || chains in sync in case some other construct gets added. So at the moment I'm not convinced that this is a good idea. But perhaps it's best if you formulate your idea in a separate issue, and we continue discussion there. That's what I did for my parser restructuring in #266.\nAnyway, regarding error reporting I don't feel like this has any impact one way or another. Ideally I'd like for every parse node to carry information about its lexer, start and end position. I've already done this in part here, for simple groups and individual symbols, but not for some of the more exotic constructs.\n. @kevinbarabash Thanks for the review. I had the feeling you were mostly done, and incorporated your suggestsions in a new commit. I also have a second commit aiming at making input position ranges more robust, particularly when mixing tokens from different lexers (thanks to macro expansion). So that may need a fresh review, but should be minor.\nIf you are happy with things, feel free to squash and merge, or squash while merging (since GitHab can do so these days), or ask me to squash it. If not, I'll be happy to make further adjustments as you see fit.\n. I'd say the Travis error reported in https://travis-ci.org/Khan/KaTeX/builds/140163515 is likely some spurious problem with Docker which I don't understand. https://travis-ci.org/gagern/KaTeX/builds/140163512 builds just fine.\n. @kevinbarabash What's the status here? Waiting for more review on your part? Waiting for a second opinion from someone? Doing some larger-scale testing? Holiday season?\n. @kevinbarabash I reworded those comments. Do you want commits squashed?\n. Travis is complaining again, but I'm investigating that and will report in another issue, or hopefully a pull request with a fix.\n. @edemaine: 0.7.0 isn't available on CDN, probably due to #613. So I'd wait for #615 then wait for a 0.7.1 release then update the readme to refer to the new version and describe the new functionality. I've started a formulation in readmeMacros, though.. @edemaine: Good suggestion. Better now? BTW, you can comment on commits, and there is a list of commits associated with the diff.. @librilex #605 will add support for macro arguments.. @librilex #656 is working on that.. @kevinbarabash: I know you've spent time for other reviews, but did you have time to look at this yet? I'm asking because a workaround for #499 will likely conflict with this one here, so I'm trying to decide whether to build on this or not.\n. Timed out as in Error(\"Failed to connect selenium server.\")? If so, you might want to check whether you can manually reproduce the steps from the docker config detection. For me with a pretty much out-of-the-box setup it looks like this:\n$ echo $DOCKER_MACHINE_NAME\ndefault\n$ docker-machine ip $DOCKER_MACHINE_NAME\n192.168.99.100\n$ docker-machine ssh $DOCKER_MACHINE_NAME 'echo ${SSH_CONNECTION%% *}'\n10.0.2.2\n$ dockers/Screenshotter/screenshotter.sh --verify -i Arrays\nStarting container for selenium/standalone-firefox:2.48.2\nContainer 103142a307f5 started, creating screenshots...\nSelenium driver at http://192.168.99.100:32770/wd/hub\nKaTeX URL is http://10.0.2.2:53117/\n* ok  Arrays\nDone taking screenshots, stopping and removing 103142a307f5\nStarting container for selenium/standalone-chrome:2.48.2\nContainer c3ee08a06bce started, creating screenshots...\nSelenium driver at http://192.168.99.100:32771/wd/hub\nKaTeX URL is http://10.0.2.2:36648/\n* ok  Arrays\nDone taking screenshots, stopping and removing c3ee08a06bce\n. Let me know when you can reproduce this and provide more details as described above. I'd really like to get this in, since my workaround for #499 builds on this.\n. I'd really like to see this included, since I have to rely on docker-machine on my Mac. And I'd say that even a setup that fails in some cases for some users is better than a setup that doesn't work at all. Plus having this merged may expose the code to a wider audience, and perhaps someone else can reproduce your problems and help diagnose them.\n. Strange! I have no clue what's happening here just now. Do you have Wireshark available, so you can inspect network traffic?\n. How do we proceed with this? Not having this in master makes testing more difficult for me, since I have to merge this branch in whenever I want to test some pull request on my Mac. Would you agree to merge this in as it is, taking my word that it works for me, and then we continue to try and find a solution which works for you as well?\n. > I assume it works b/c the check are passing.\nWell, that doesn't tell you much since Travis doesn't use docker-machine. It only tells you I didn't introduce syntax errors to the existing code paths, which of course is useful to know.\n\nI'll eventually get around to trying out wireshark.\n\nThanks a lot! Let me know (perhaps by email) if you want help making sense of its output. I actually don't have a clear idea what to look for. I kind of hope we'll see something \u201csuspicious\u201d once we have the network transfer captured and displayed. I guess the most important information would be whether we can actually see packets sent by the client, and whether the server sends any reply to these.\n. I'll look into that approach.\n. My watchdog branch has a workaround that should detect Travis getting stuck. It's built on #494, and it entails quite a number of code changes considering it's only a workaround. I've been trying to test this but so far I have been unable to reproduce the Travis problem, in a dozen runs or so. Apparently there were some screenshots taking more than one minute in one run, but not the huge delay while waiting to set the size. I wonder whether Travis somehow made the problem go away. So I'd suggest we wait a bit, see if the problem persists, and consider using that approach if it does and after #494 got merged.\n. @kevinbarabash: The way I understand https://github.com/nodejs/node/pull/5102, the graceful-fs module does something that is supported in node 6 only for the sake of graceful-fs, ant that won't be supported in node 7 at all, throwing an exception instead. So for node 6 the woraround is ignoring the warning. For node 7 we'll be in trouble unless we manage to update by then. It should be fairly easy to verify that for the current KaTeX input, the new version of less produces functionally the same output as the old one, so the deliverables won't suffer. I'll check that as part of preparing a pull request for less. I wonder whether any of the other packages may have benefits to upgrading. browserify and uglify might result in smaller files or better performance, for example. Worth checking?\n. This PR should mention #61.\nIf we start shipping align as an alias without equation numbers, then we run a certain risk that if we add equation numbers at a later time, it will break existing content which somehow relied on the absence of equation numbers. So I have my doubts about that (and expressed them in https://github.com/Khan/KaTeX/issues/61#issuecomment-138820008).\nIf we could rely on people reading documentation, I'd say we could simply warn them against using it this way, but they probably wouldn't read that part anyway. Should we make this a config option, like align_without_equation_numbering: true, and if that is set we support it now, and keep supporting it without equation numbers in the future?\nI was surprised to see that MathJax apparently doesn't number equations inside align, at least in their demo box. But in my understanding, KaTeX' reference has been LaTeX, not MathJax, so I'd go for that, particularly since align* exists and a mass replacement of align by align* shuld be quite feasible when migrating content from MathJax to KaTeX. In https://github.com/Khan/KaTeX/issues/61#issuecomment-139084224 @xymostech was unsatisfied with the MathJax approach.\nI'm wondering whether we should somehow ensure that such constructs are only allowed at the top level. I.e. \\begin{aligned*}\u2026\\end{aligned*} \u2026 \\begin{aligned*}\u2026\\end{aligned*} should not be permissible input, since we likely won't do the paragraph typesetting between these right so that shouldn't end up in our lap. Perhaps we also should reject this environment in inline mode, since it only makes sense in display mode imo. I already wrote as much in https://github.com/Khan/KaTeX/issues/61#issuecomment-139135833.\nIt would be nice to see this integrated in the auto-renderer. So that we extract these fragments as well.\nThanks @kevinbarabash for picking this up. And sorry for me being this critical about the change.\n. That's the approach I'd suggest as well.\n. Trying to decide between core code, auto renderer and a new module of contributed code, can you provide details as to how they differ? I get the impression you don't want to be burdened by auto-renderer stuff, but in fact I don't think anything in terms of maintainance burden would change if that were part of the core library. If we could include the auto renderer, then anything in between could be included as well, simply to be enabled by the flick of some option.. @kevinbarabash: That was not my intention, although doing so would be an option. I'd first check how much it really changes the size.. Travis fails, and this time the failure appears to be related to this issue. Need to investigate further\u2026\n. Works now. Ready to merge if you want to.\n. Do we want a Makefile rule to run npm install if the package.json is more recent than a stamp generated after npm install?\n. The Travis complaint is another instance of #499.\n. Rebased to avoid conflict, and Travis is happy as well this time.\n. I added a comment to the Makefile.\n(And as I augmented my commit, I noticed that I had placed a paragraph on that variable in the commit message, from where it got transferred to the initial message of this PR. But we should make an effort to make code understandable without reading commit messages or pull requests, so the comment is the right thing to do in any case, I think.)\n. When devising a plugin system, please keep the render-to-canvas from #251 in mind as well as the #376 intermediate representation it motivated (and which you probably meant by \u201cdisplay agnostic layout data structure\u201d). Do you want to open a ticket to discuss requirements for a plugin system, @kevinbarabash?\n. This is a nice feature, and pretty important in Germany (due to \u00c4\u00d6\u00dc\u00e4\u00f6\u00fc\u00df). Personally I'd say that even imperfect rendering should be preferable to no rendering in these cases. So a stopgap like this is great!\nIn case this approach will be around a while longer (and I assume that to be the case for CJK at least), perhaps we should empower site authors by providing config callbacks to determine CSS classes and character metrics for given glyphs. But that's probably best discussed in a follow-up ticket once the core here is in. Or as part of #123 and its duplicates.\nRegarding this whole substitute letter magic I'd suggest keeping two things in mind. Firtly, you are substituting the metrics of a similar letter but in a completely different and unknown font. So don't get your expectations too high about the accuracy of that. Secondly, even though #366 added widths, KaTeX isn't actually using them, is it? So the key point to concentrate on for substitute characters is vertical metrics. Which is tricky, since descenders in particular vary greatly between fonts and languages. In many fonts \u00df will have a considerable descender, but you can't know that if you don't know the font. Ignoring accents will lead to incorrect vertical metrics as well. So my main point is: don't put too much effort (and code size) into this since it's going to be wrong in many cases despite your efforts.\nFYI: I just had a look at CSS3 Writing Modes and verified that the dominant baseline of mixed-script inline text is defined to be alphabetic (for horizontal writing), deferring configurability to \u201ca future CSS module\u201d. So if the font doesn't fit its metrics, we'd most likely see problems at the upper boundary of the box.\n. Look at the \u00ef in the first row of your screenshot! It looks as though an i with dot was combined with a combining diaresis. So I'd guess that these glyphs are indeed CM, and your browser's text rendering engine is doing its best to generate the glyphs in question from the requested font before falling back to another font.\n. Instead of modifying the selenium images, I'd suggest adding some suitable fonts as webfonts, adding them to the css of the test html, and serving them as static content.\n. It appears DejaVu doesn't have Korean, contrary to what I'd have expected. Maybe we should choose something different, perhaps something available on TeX as well.\n. What's the license of these font's you're putting into the repo? For the Honoka Mincho font I'd guess these terms apply, which as far as I understand it requires redistribution of the license term along with the font. The Baekmuk Batang tarball contains a LICENSE file which also requires distribution of said notice along with the font.\n. Personally I'd prefer not to put 18M of font data into the repository just for this single test, and instead have that downloaded by some script, or perhaps packaged as an npm dependency. This is not my project, so others will have to decide on this, but I'd like to make you aware of the considerable increase in repo size as a consequence of this PR as it stands now.\n. I'd say a simple str.replace(/\\u00a0/g, ' ') on the whole input string should be all that is needed here for the purpose you describe. Personally I think this should be done in site-specific code, since it's part of the process of turning an author's input into TeX snippets and other things, as opposed to KaTeX' job of turning these TeX snippets into DOM for formulas. I also believe that there might be situations where this is not appropriate. Suppose KaTeX one day learns how to do \\parbox. Then people might actually want to treat the Unicode non-breaking space as a synonym to the ~ TeX non-breaking space.\n. See also #402 which requested this feature. There @kevinbarabash wrote:\n\nI would look at how \\overline is done and then combine that with \\rightarrow. This will probably require knowing how wide \\rightarrow is.\n\nThat width information should be available from #366, I think. https://github.com/Khan/KaTeX/issues/407#issuecomment-172007411 mentions \\overrightarrow as well.\n. In case this is useful, applying these tips to \\overrightarrow{AB} I see the following box structure for that:\n..\\vbox(9.50206+0.0)x15.58682\n...\\hbox(3.66875+0.0)x15.58682\n....\\glue(\\tabskip) 0.0\n....\\hbox(3.66875+0.0)x15.58682, glue set 5.5866fill\n.....\\mathon\n.....\\hbox(0.0+0.0)x7.7778\n......\\mathon\n......\\hbox(5.83333+0.83333)x7.7778\n.......\\OMS/cmsy/m/n/10 ^^@\n......\\mathoff\n.....\\kern -3.8888\n.....\\cleaders 0.0 plus 1.0fill\n......\\hbox(0.0+0.0)x5.55563\n.......\\mathon\n.......\\kern -1.11108\n.......\\hbox(0.0+0.0)x7.7778\n........\\mathon\n........\\hbox(5.83333+0.83333)x7.7778\n.........\\OMS/cmsy/m/n/10 ^^@\n........\\mathoff\n.......\\kern -1.11108\n.......\\mathoff\n.....\\kern -3.8888\n.....\\OMS/cmsy/m/n/10 !\n.....\\mathoff\n....\\glue(\\tabskip) 0.0\n...\\kern -1.0\n...\\hbox(6.83331+0.0)x15.58682\n....\\glue(\\tabskip) 0.0\n....\\hbox(6.83331+0.0)x15.58682\n.....\\mathon\n.....\\glue 0.0 plus 1.0fil\n.....\\hbox(6.83331+0.0)x15.58682\n......\\OML/cmm/m/it/10 A\n......\\OML/cmm/m/it/10 B\n......\\kern0.50172\n.....\\glue 0.0 plus 1.0fil\n.....\\mathoff\n....\\glue(\\tabskip) 0.0\nSo TeX has a vbox containing two hboxes, one for the line and one for the letters, with some negative kerning between the two. The line consists of two occurrences of one symbol, and one occurrence of another symbol. So apparently that's not even a \\rule box in there, but actually a symbol from the cmsy font. The \\cleaders is probably what does the stretching. Not sure if any of this can be modeled easily on the KaTeX side.\n\nWith the unicode 27A4 (\u27a4), I have now this result in the DOM version:\n\nUsing symbols outside the KaTeX fonts has a huge risk of looking differently on different browsers. Please try to stick to the KaTeX fonts. Since they already can draw \\rightarrow, the symbol used for that should be good.\n. > It doesn't exist in TeX though\nIt's part of e-TeX. pdftex and latex will probably support it, since they both are based on the pdfTeX engine which includes e-TeX, at least in Texlive 2016. Plain tex doesn't support it, but etex does. You may want to look at etex.ch to see the relevant changes to TeX WEB code, or pdftex.web to see the complete implementation including these changes. So it's a primitive command and we should implement it as such.\n. You can write \\cr[3ex] without problems, since \\cr and \\\\ are synonymous.\nOne thing worth knowing is that the argument in the square brackets works differently for positive and for negative values. For negative values, it will simply reduce the actual line depth by the given amount. For positive line heights, however, it will add the given gap to the default line depth. So if the actual depth is already greater than the default, you won't see any effect for small gap values. You need to match the difference between default depth and actual depth before you see any effect. The benefit is that you can easily get the same height for rows with different content, as long as the parameter exceeds the maximal depth for all of them. This is also how LaTeX does things.\nThat said, the comment and screenshot by @kevinbarabash indicate that vertical spacing in KaTeX doesn't match that of LaTeX, which I also would consider a bug. I should probably revisit https://github.com/Khan/KaTeX/issues/61#issuecomment-113551368 and check the value for \\normallineskiplimit in what LaTeX is doing.\n. I'm using this approach to look at the boxes of the equation at the top of this issue here.\n...\\vbox(40.0902+35.09018)x88.00406\n....\\hbox(13.59839+8.3595)x88.00406\n.....\\glue(\\tabskip) 0.0\n.....\\hbox(13.59839+8.3595)x5.71527\n......\\glue 0.0 plus 1.0fil\n......\\hbox(8.39996+3.60004)x0.0\n.......\\vbox(8.39996+3.60004)x0.0\n........\\kern 0.0\n........\\hbox(8.39996+3.60004)x0.0\n.........\\rule(8.39996+3.60004)x0.0\n......\\mathon\n......\\OML/cmm/m/it/10 x\n......\\mathoff\n.....\u22ee\n....\\glue 0.0\n....\\glue(\\lineskip) 4.0\n....\\hbox(13.59839+8.3595)x88.00406\n.....\u22ee\n....\\glue 0.0\n....\\glue(\\lineskip) 4.0\n....\\hbox(14.9051+8.3595)x88.00406\n.....\u22ee\nI'd say this (8.39996+3.60004)x0.0 box is the expansion of \\strut@. This confirms we have still have zero \\normallineskiplimit. But the \\lineskip is the relevant part here. If the distance between adjacent rows is less than \\lineskiplimit, then instead of using \\baselineskip as the distance between baselines, TeX will use \\lineskip as the distance between the line boxes.\nThis is what's happening here. We have a \\lineskiplimit of 3pt and a \\lineskip of 4pt. But why? Here is the code setting this up:\n``` tex\n% amsmath.sty, definition of \\start@aligned\n        \\spread@equation % no-op if already called\n% amsmath.sty\n\\def\\spread@equation{\\reset@strutbox@\n  \\openup\\jot \\let\\spread@equation\\@empty}\n% latex.ltx\n\\def\\openup{\\afterassignment\\@penup\\dimen@}\n% latex.ltx\n\\def\\@penup{\\advance\\lineskip\\dimen@\n  \\advance\\baselineskip\\dimen@\n  \\advance\\lineskiplimit\\dimen@}\n% various places in latex.ltx and amsmath.sty\n\\lineskip\\normallineskip\n% latex.ltx\n\\newskip\\normallineskip \\normallineskip=1pt\n% latex.ltx\n\\jot=3pt\n```\nNot sure if we missed some \\openup in other environments as well, but we should definitely handle it for the aligned environment. If the distance between boxes is less than 3pt we should make that distance exactly 4pt.\n. aligned alternates between right-aligned and left-aligned columns, with some space between pairs of columns. The idea is that you align at the = or similar. Try this:\ntex\n\\begin{aligned}\nx &= \\begin{bmatrix} x_0 \\\\ x_1 \\\\ x_2 \\\\ \\vdots \\\\ x_n \\end{bmatrix}\n\\in \\text{ }\\mathbb{R}^{n+1}\n&\n\\theta &= \\begin{bmatrix} \\theta_0 \\\\ \\theta_1 \\\\ \\theta_2 \\\\ \\vdots \\\\ \\theta_n \\end{bmatrix}\n\\in \\text{ }\\mathbb{R}^{n+1}\n\\end{aligned}\nI replaced your = by &=. I also replaced ... by \\vdots as I think that makes more sense in this context, but feel free to not take that change as well. I also condensed the code since we are diverging from the main subject of this thread here.\n. If your input to KaTeX contains HTML entities, you have to either change the way you obtain that input so that they don't get escaped or you read them from the DOM after they have been handled. Or you have to add a string rewrite step of your own to undo the html entity escaping. This is essentially outside the core of KaTeX, but depends on the glue you use to feed KaTeX its input.\n. My render-to-canvas experiments from #251 work in this way. There are some plans in #376 to offer a box-based representation at a more general level. Also notice that KaTeX only uses its own fonts, so naming fonts as part of the input appears pointless.\n. I'd welcome a PR to this effect.\n. Fixed per #540.\n. Thank you for your contribution!\n. I can think of two possible reasons.\n1. A binary operation which is not surrounded by stuff compatible with a binary operation gets demoted to an ordinary symbol. According to #4 we don't do that yet, although #492 contains a pull request for this which needs review.\n2. I'm not sure how spacing constructs factor into this Ord/Bin/\u2026 classification. It might well be that they are ignored for the sake of adjacency computation. (Someone should read this up in the TeX book but I don't have time just now.) If so, I guess our CSS doesn't reflect this fact.\n. Yes, this looks very much like #41. Again the vertical spacing appears correct at larger sizes, with \u201ccorrect\u201d meaning \u201cas TeX does it\u201d:\n\nTeX in green, KaTeX in red. You see that the vertical spacing matches even though the horizontal one does not.\nI'm closing this as a duplicate of #41.\n. Is this a page we can visit? If not, can you create a static version which reproduces the problem? From what browser (name and version) was the screenshot taken? Can this be reproduced with other browsers?\n. We probably should add those two items to .gitignore so you won't have to delete them.\nThe purpose of #505 was to run npm install upon changed package.json, which in turn will build dist. To avoid that, we would need to find a way to update dependencies without running the make dist step in the prepublish script. Possible solutions:\n1. Call KaTeX_noinstall=1 npm install from the Makefile (i.e. with an environment variable), and change the prepublish script to test -z \"${KaTeX_noinstall}\" && make NIS= dist. This will work on common *nix shells, but likely fail on Windows.\n2. Call KaTeX_noinstall=1 npm install from the Makefile as above, and change the Makefile to turn dist into a no-op if that variable is set. May require GNU make; I'm not sure whether case distinctions at the top level are a feature of POSIX make.\n3. Pass the --ignore-scripts flag to npm install in some clever way, as detailed in https://github.com/npm/npm/issues/9590. I'm not sure whether I should be slightly worried that this flag might get applied recursively, suppressing required install scripts for dependencies as well. If so we could end up in a hard-to-debug mess. Will need proper testing for this.\n4. Invoke some other npm command, like npm update. In my experience doing so will install different versions, particularly also for nested packages, so I never managed to get this up and running.\n. One problem with this minor modification is that the build step includes things like style changes. So you can't use make live to evaluate the functionality of some piece of code if that piece of code is syntactically invalid. I've seen this in relation to my render-to-canvas code, which was written against an older set of style rules. Merging that into latest master meant I couldn't start a live server before I had tweaked all the affected style choices.\n. > Call KaTeX_noinstall=1 npm install from the Makefile as above, and change the Makefile to turn dist into a no-op if that variable is set. May require GNU make; I'm not sure whether case distinctions at the top level are a feature of POSIX make.\nWe are already using more make functionality than guaranteed by POSIX, so I'd say we already depend on GNU make as it is, and using its functionality for one more application is a good thing.\n. I had some problems recreating the Unicode screenshots locally. I'll have to investigate that further one day. Anyway, screenshots are here, Travis will look at them. And we can inspect them here in GitHub.\n. I can tweak my differencing code to do three-way comparisons between TeX and KaTeX before and after this change. Will take a bit of time, though\u2026\n. I wonder whether it would be better to have these as properties on the Style objects, instead of methods in the fontMetrics module. So we could write options.style.sub1 or options.style.metrics.sub1 instead of fontMetrics.metrics.getSub1(options.style). No strong opinion, just a thought.\n. Here are some three-way diffs, which may be a bit hard to read. Red channel is TeX, green channel is this branch, blue channel is master. Since text is black, that means cyan text is TeX, magenta text is this branch, yellow text is master. If the colors overlap, then red and cyan regions are not affected by this change. Blue and yellow areas are good (improved match), while green and magenta areas would be bad (reduced match). I aligned TeX vs. this branch, but then put master at the same position as this branch here.\n- :smiley:\n\n  The large digits and the fraction bar are blue and yellow, so the overall vertical alignment (starting from the common alignment of the top exponent) is better now. The cyan TeX 3 is also matched more closely by the magenta improved one than by the yellow master one.\n- :neutral_face:\n\n  No changes here for #542. Presumably because we only see subscripts here.\n- :smiley:\n\n  definitely better\n- :smiley:\n\n  slight improvement\n- :smiley:\n\n  considerable improvement\nI haven't seen any degraded performance in these comparisons. So I'd say this is definitely a step in the right direction. I'll wait on your opinion on where to put this information before merging.\n. Looks fine to me now, thanks a lot! I guess I should squash-merge this, right?\n. Using my local TexLive 2016 I indeed saw some 16 bps files. Don't remember which ones.\n. You can have \\begin{array}\u2026 which may help in some situations.\n. The same way you catch other exceptions in JavaScript: using a try \u2026 catch \u2026 construct. If this doesn't answer your question, then please try rephrasing it to provide more context about what you are trying to achieve and how this approach fails for you.\n. Many formulas will only require some of the fonts, so I'd rather not inline all of them into the CSS.\n. No longer supporting IE8 by default sounds like it would break the contract. After all, the README claims support for IE8 at the moment. So I'd say such a change should bump the version number to 0.7.0 at least. Personally I don't think some obscure corner cases warrant breaking existing setups. Sure, being able to customize the build to only use recent font formats would be nice, but in my opinion the default packaged version of KaTeX should continue to support IE8 until there is a better reason not to.\n. Just wondering, as a kind of middle ground, would it make sense to ship the WOFF versions in the bundle, but use absolute URLs referencing a suitable public copy of these fonts for EOT and TTF? Not sure how much pain we'd have with CORS in such a setup, but it might be better than not having the older formats available at all.\n. #409 has some work to this effect, at least inside \\text. Outside it's a bit hard since KaTeX uses its own fonts with known metrics, and those fonts currently don't contain the symbols you request.\n. I guess hidden and invisible are too generic names to be used here, since the containing page might do other things with these. Personally I think sr-only best conveys the intended meaning of the objects, at least if people expand the abbreviation sr to \u201cscreen reader\u201d. The tow variants of visually hidden would still be acceptable, I think.\nI wonder what would happen if we were to use one of these, and the containing framework makes use of the same class name but employs a different technique to hide these. I can't think of a way any other hiding technique could conflict with what we do, but I'm not sure. Could you do some tests on this, against the frameworks mentioned in the bug report you linked to?\n. Here is how bootstrap 4.0.0-alpha.5 does things.\nLooking at its history, twbs/bootstrap@a8d95d4721e714a7e1d683e14e997faa5ccddaff introduced the class, twbs/bootstrap@03258683ed73b84ab51448dc8c52e292fee8104a and twbs/bootstrap@fef873a840add12495baa7cf2ffb5361f5ab1c63 reordered properties, twbs/bootstrap@b1cc07fa1525f0900d32bdcbdf7b38a616971acd changed the syntax of the clip property, twbs/bootstrap@27df020852ada46c85138c75736fbb4c4784eeeb switched from less to scss, twbs/bootstrap@608be81a43f0109bc4082444ed1068440b1cf1c2 factored out the mixin I referenced above, twbs/bootstrap@7aabd493647fbe1110cbdf2637828e34df6a4b90 moved the .sr-only class to a separate file as well. No real semantic changes anywhere.\nSo I'd say it always worked that way in bootstrap, and if it will cooperate with KaTeX now, it should cooperate for all these versions. Assuming .sr-only to be only widely used by bootstrap, checking that single definition in practice should be enough.\n. Urgh\u2026 OK, if they drop all styles, I think there is little KaTeX can do. Makes me think that reader mode and KaTeX formulas simly don't go together well. Perhaps having both versions in there in the hope that at least one of them renders reasonably well is a benefit, in this light?\n. Closing for now, feel free to reopen if you have any idea about how to solve this consistently.. Related to the \\widehat support requested in #407. There was some progress lately regarding wide arrows (#524, not merged yet), but I don't see the approach taken there being any use for these arcs.\nFor reference, check out The Comprehensive LaTeX Symbol List page 102 f.\n- Your reference image looks pretty much like \\wideparen in packages yhmath, MnSymbol, fdsymbol, mathabx, fourier\n- Similar to \\overgroup in MnSymbol, fdsymbol, mathabx which might be easier to extend\n- The \\overparen in stix looks a lot larger\n- The \\widearc in fourier differes from \\wideparen in its use of constant line width\nI'd say \\wideparen is the most compatible name for the feature you request. Apparently AMS doesn't support such an accent, which may mean it could be quite a bit down the list of priorities. We'd likely need support for additional characters from additional fonts, which is no easy undertaking. Unless someone comes up with a clever idea and writes a pull request.\n. I don't think we have these included in the fonts we currently use. Otherwise #286 should be listing them.\n. > Docker for Mac doesn't support networking in the usual way, apparently.\nYay, yet another way to install Docker, after I got docker-machine to work for me in #494. Makes me wonder whether I should try to come to terms with this, or whether I should just wait to see what approach they use next month.\n\nThere\u2019s some stuff on their website about it.\n\nI guess you mean Networking features in Docker for Mac.\n\nI had to supply both --selenium-ip and --katex-ip arguments, rather than/in addition to --container.\n\nDid you add another IP address to your loopback device, as suggested by these documents? If not, what did you use for the --katex-ip and how did you find it?\nI'm currently thinking about how to auto-detect this situation, and handle it with less need for user intervention.. Personally I'd say the screenshotter is something semantically distinct, so that should be a separate PR. If the effects of the other two really cancel out completely, then having a single PR with two commits might be nice, to see that it really remains unmodified. In that case, it would be nice to rebase the branch so that it has two commits for the two distinct changes. But that may wait till after review. And if the image just looks mostly the same, but not pixel-exact, then I'd go for two PRs there as well.. Reviewed, tested and merged. Thanks a lot!. @kohler, do you want to give #568 a try as well? There I attempted to make the screenshotter work on Docker for Mac without any need for custom configuration.. Anyway, docker-machine env is the Docker Toolkit approach, and while it is good to know that this still works as it used to, the new feature here is that it will work using Docker for Mac, too. That's a different setup, with different tradeoffs.\nIf the version mismatch is due to an upgrade in Docker Tools, that would be that. If it's because you installed Docker for Mac, too, then notice that https://github.com/docker/for-mac/issues/455 makes it difficult to have both coexist at different docker API versions.\nThe screenshot retries only affect the --verify mode. In that mode, the screenshotter will never write files to disk, but it will compare obtained screenshots against those on disk, and will re-try a number of times if there is a difference. In non-verify write-to-disk mode, the first obtained screenshot gets written, although one may use a timeout to wait for things to settle down before taking the screenshot.. @kevinbarabash, I noticed you squash-merged my commits, even though they addressed different issues. Out of curiosity, do you prefer having such changes lumped together, or should I continue generating distinct commits for distinct issues in the future?\nI'm all for using ES6 in all our development scripts. Do you want to start a branch and collect related changes, or do you want to just bump the engine requirement, and take subsequent improvements as separate pull requests?\nHow about the main code base? We could babelify or es6ify the code there, to end up with ES5 runtime code despite using ES6 features for development. Some parts of the codebase might benefit considerably from this.. I feel like I'm missing some context here. What dropdown menu would that be?. Great set of changes! I've looked through them, and wrote down some comments and questions.\nRe 9afac38da71a99dc31c5d77f4100140caa1b56e3: The \\atopfrac is artificial, not a real TeX command, right? Is there an AMS command which has the same effect but follows the \\\u2039name\u203a{\u2039group1\u203a}{\u2039group2\u203a} convention? If not, perhaps we should use some artificial name which can't be generated as a token by the lexer. Something like \\atop-frac or even atop-frac should work, I think, since at that point the leading \\ is irrelevant.\nRe 8882bb538540a8d363cd525e15ff8ddd10401622: See https://github.com/Khan/KaTeX/pull/261#issuecomment-114797510 and following comments for prior discussion. To make it short, as far as I understand it the consensus regarding unicode mappings was to either verify that some Unicode-supporting TeX implementation does handle the symbols like this, or to put them behind some opt-in guard. Otherwise we risk incompatibility with Unicode-aware TeX versions. Unlikely in this case, I think, but it's hard to draw the line. So I'll leave it to others to decide whether a conflict of this kind is sufficiently unlikely in this case.\nRe eccf74e2a2cee4b233c19ced199ff95fd5bccb45: As you only use toplist[0], the rest of that argument apparently gets discarded. Is that what TeX does, too?\nRe e0b5d0a8711151ad0f20f1dc27d4a08ccc88885b: Out of curiosity (and for future reference), have you found this in a book, in the TeX sources, or by dumping TeX data structures?\nRe 161337215b981d94e2c8a9b6432fc3e575cda6df: I'd avoid modifying the classes argument: that may lead to surprises as it's kind of unexpected from the perspective of the caller.\nRe 1448c371ccaaae07316a0b44499f68f8c42e6005: Can you point out the TeX book chapter or similar where the rules for italic correction are spelled out?\nRe c05e323931bcde92c8ec97e7254cf30435ca7921: The changes in the screenshots are pretty small. Perhaps I should try to create a visual diff of these, if I find the time.\nRe 6a1aa76e4c2cf90be5c0dc8573360f13d87e7064: Can we rely on the small-caps variant getting rendered in a sufficiently compatible fashion on all platforms, or could some browsers decide to use an installed font which has a built-in small-caps variant instead of generating small caps from the named font? How come we don't need metric information for the small caps variant here?. Yes, @kevinbarabash, I had some minor concern wrt. repo size. Not a problem for a few GIFs now. Things will become problematic if at some point we decide that we want a gallery of one hunderd high resolution renderings comparing engines, or a weekly changing picture for the formula of the week, or something of this kind. That would force developers to download stuff they never use. But even that would be preferable to having images deployed using yet another technology. So if you are positive about moving docs, I'd say leave the images in. That way we can at least collaborate on docs the same way we do for sources, without having to learn additional tools and granting additional permissions.. The way I read the Lexer, we allow for any sequence of whitespace and replace it with a single space. So anything that deals with post-lexer tokens should not have to care about the exact notation of whitespace, unless you're implementing something like \\verb which would be really hard at the moment.\nAre you saying this doesn't work as it should? Judging from https://github.com/Khan/KaTeX/pull/579#discussion_r91599472 this issue here was opened without actually trying out that feature with tabs in the input. In my opinion it should simply work. Perhaps we should add some unit tests to verify that the exact formatting of whitespace doesn't affect the parsed result, for all the various space-containing regexes as well as for regular typeset white space in text and math mode.. @sunsheeppoplar: Thanks for that offer! \u2764\ufe0f\nI'd start by looking at \\mathrm and \\mathbf, see how they are implemented. Feel free to ask if you get stuck following the flow of these commands through the engine.. Computing the width of a complete box, instead of having metrics for individual glyphs and then summing them up, can be useful for situations where the total width of some text is not necessarily the sum of the advances of the individual glyphs. Issues that come to my mind here include kerning pairs, glyph selection based on context (as position in word in Arabic or ligatures in western languages), but also hinting and rounding to pixel positions.\nOn the other hand, using width information instead of computed box size can be of benefit for offline processing, e.g. server-side or during page creation. In that case we might not even know all the details about how the browser will lay out the glyphs. We could try to measure runs of text using additional dependencies like freetype bindings for node, but for common TeX fonts using the built-in metrics is best, and re-using that code path for more exotic fonts reduces the amount of code we need.\nMeasuring glyphs in browser perhaps should be split into two approaches: either measure sizes of DOM boxes, or use a canvas to measure advance of a string. I guess that particularly for slanted fonts, the box might be wider than the total advance of its content. I'm not sure which of these we actually want, which one is closer to what TeX does. Measuring either of these in browser means waiting till the required font for that glyph is available. Right now I don't think we'll be able to check when that is the case, unless the configuration tells us the names of the fonts that are going to be used, and which glyphs they cover. Then we can use the web font loader or similar to wait for the fonts to load. In the absence of such a configuration, we could create an invisible box and poll its dimensions from some timer, but that feels very ugly.\nI'm not sure what you mean by \u201csafe fonts\u201d. Particularly for ideographic scripts with many different glyphs, I doubt there are any fonts covering these which are guaranteed to be installed on all machines, and thus safe to use without loading them via CSS.\nOn the whole I don't have a clear preference yet, as each approach comes with its own problems.. Use cases for static aka. server-side rendering:\n HTML pages for users who might have scripting disabled.\n formulas embedded into SVG as foreign elements (might be obsoleted by SVG backend).\n formulas extracted not from HTML but from some server-rendered markup language, e.g. Markdown. This would be compatible with client-side rendering following server-side extraction, though.\n displaying formulas already during page load.\nPerhaps it would be a good idea to have some static fallback solution (i.e. stretch images even if it distorts the pen), combined with some dynamic fixup step which compensates for drawbacks due to lack of information.. Well, in the rare case that a wide accent or some such is needed in a colored part of a formula, we could still have KaTeX create an appropriately colored copy of the SVG file and use that in a data: url or some such. More work, but technically feasible I guess.. When we dynamically measure the width of a box, that width might change over time. Perhaps the CSS hasn't been loaded, or some fonts, so as resources come in, the size may vary. I've encountered a situation where I needed to react to changes in element sizes, and the solution I used back then was to adapt the ResizeSensor by marcj as detailed in https://github.com/CindyJS/CindyJS/pull/435.\nIt's a pretty heavy-handed thing, using lots of layers and additional DOM nodes and callbacks and whatever, making the whole thing considerably more complicated (and thus slower). On the other hand I could think of no simpler way to reliably detect when the size of a box changed due to events outside our control. So keep this in mind in case it's needed, and ignore it if you can get by without it.. > What symbols are currently possible in KaTeX but don't have defined widths?\n508 added support for several classes of characters inside \\text{\u2026}. That's the main source of problems, as far as I can tell. It does make an effort to guess the widths even for these, but those guesses may be way off as we don't control what font is being used for these.\nOther sources of uncertainty include aspects that depend on the font rendering engine: hinting, rounding to integer coordinates, kerning and so on might be handled differently depending on browser, OS and text size. I don't have experiments to support these concerns, but neither have I proof to dispel them.\nFor vertical positioning, the fact that we position each row individually means that we usually don't accumulate errors. For horizontal layout, where the browser may position glyphs for a large run of text all by itself, and we still hope to know the width of the whole thing. Positioning each glyph independently using CSS might mitigate that, at the cost of added complexity. It might also destroy combining characters, context-dependent glyph selection and bidirectional text rendering. So I'd definitely not do that by default, but we could consider doing that in those cases where the width of the box really matters, if we figure that error accumulation is a real problem in practice.. I don't see that as much of a win. Actually the black forms will be highly dominant. The cost for other colors doesn't bother me much. Reading a file via Ajax to change the color seems fine. Of course this requires that we are able to run Ajax requests without running into CORS issues, but at least when served from CDN this shouldn't be a problem.. I think I'd implement \\verb at the lexer level. As we don't have catcodes and all that, doing it any other way would be very tricky. On the other hand, it would be fairly easy to match /\\\\verb(.)(.*?)\\1/ or similar (perhaps /\\\\verb\\s*(\\S)(.*?)\\1/ if TeX allows whitespace between the command and the delimiter), and return that as a special kind of token, to receive appropriate processing down the line.. If I understand this correctly, the problem is that the katex-display wrapper is absent here.\n\nHappens even when I pass: \u2026\n\nNo surprise there: you explicitely set display: false for the \\[\u2026\\] syntax. With default settings the behavior is more surprising. I can't reproduce that aspect.. In XHTML you'd have to either escape the & as &amp; or enclose it in a CDATA section. You could for example enclose the whole formula in a CDATA section like this: <![CDATA[$$ \u2026 $$]]>. If neither of these works for you, you should be more specific: Describe the error you observe (error message or incorrect rendering?), provide a short, self-contained, otherwise correct reproducing example or point out a web site where we can see the problem.. Please actually read my previous comment! We need a detailed description of the error (more detailed than \u201cnot working\u201d), and either a copy of the XHTML file, ideally without unrelated content, or a URL where we can see the problem. You can attach files to GitHub issues by drag and drop or file selection; see the description below the comment input box. HTML files are not supported, so you may have to zip the file. I will not repeat this request for details again.\nI've just tested that rendering your formula (first version) works in an XHTML file. See katex592.zip for the file I used.\n. You know, it would have been kind of nice to indicate what the actual problem was, and how you have fixed it now. That way other users searching our list of issues would be more likely to find your description and apply the same solution to their scenario. Perhaps there also is some documentation we should be adding somewhere.\nSee #331 for the vertical spacing in your matrix.. Just some ideas. Reading parts of the posts Ron referenced I get the impression that screen readers and Braille displays might be best considered independently. For the latter, providing access to the TeX input might well be a benefit for some users. Sometimes the TeX input may contain more information than the parsed tree. For example a\\divides b conveys a semantic meaning which a\\mid b does not, so expanding the former to the latter as part of macro expansion or parsing may have detrimental effects on the accessibility of the produced text.. @dylanb wrote:\n\nIt seems to me (and I am just a casual observer), that you are using KaTeX for the equivalent of presentational MathML and you are using MathML for semantic markup.\n\nWe are currently using KaTeX to turn LaTeX into two forms of output: HTML for a visual presentation and an invisible element of presentational MathML in the hope that it helps with accessibility. We don't have semantic MathML anywhere, and as turning presentational markup into semantic markup is impossible except in the simplest of cases or with sufficient additional information, we don't expect to get that. This also holds for turning the formula into a semantic verbal description of the formula, so we probably would either end up with errors or with the verbal analogon of a presentational description.\n@NSoiffer wrote:\n\nAn alternative to using \"text\" alt text is to use TeX as the alt text. [\u2026] Most people in the accessibility community considered it useless. Type some TeX into a some text editor and listen to a speech engine speak it.\n\nDoes the same hold for braille displays? In my very limited experience (based on interaction with exactly one person), LaTeX on braille was the preferred mode of conveying math formulas. And to me it does make a lot of sense, since it's far more concise than the spelled-out verbal formulation. Personally I'd prefer LaTeX over a verbal description when reading, but not when listening.\nOf course, it might be even better if we could turn our input into Nemeth Braille (mentioned by the Murray Sargent posts @ronkok referenced), but I believe that won't work for all inputs. I think it is possible that for those formulas where Nemeth notation doesn't work (as they uses exotic symbols or constructs), LaTeX on (8-dot) Braille might be better than LateX to MathML to whatever on Braille.. The cause of #531 is an \\openup call which I found in the TeX sources of alined, but haven't reproduced on the KaTeX side yet. If one can find such an \\openup call for array environments, then it would indeed be a duplicate. But I'd like to see that identified first, to make sure we are handling this correctly, not merely guessing.\nI'd also like to see a texdiff for this, check that we are indeed doing things different from LaTeX, because in cases where LaTeX and MathJax differ we tend to emulate the former not the latter. So I second Kevin's request for TeX sources. I guess it might be a {rcl} aligned three-column array.. I've adjusted this test case slightly to fit it into the 1024px width of our screenshot tests. The result indicates that our current behavior matches what LaTeX does:\n\nKaTeX output in red, mostly due to thicker font. LaTeX output in green, indicating a slight difference in vertical placement of the = in relation to the rest. But most things are white or black, indicating that KaTeX and LaTeX agree. In particular there is no noticable drift where things would look more colored at some vertical positions but less at others. So I'd say KaTeX is doing things the LaTeX way. If MathJax decides to space things differently, that is their decision, but the reference for KaTeX is LaTeX, not MathJax.. \\dots is discussed in #528. The problem is that with AMSMath it sometimes behaves like \\cdots, and that's the behavior we'd like to model.\nI'm not sure how important \\mathellipsis is, but I guess we could add that, as a synonym to \\ldots in our case. \\textellipsis might be worth more discussion, since some might argue that the proper way of representing that would be using the unicode codepoint U+2026 to ensure that the meaning is retained if the text gets copied and pasted. Not sure whether that is relevant.\nFor trademark, registered and so on I guess we simply don't have the symbols included in our fonts. Otherwise #286 should have caught them.. If we have a unicode symbol for this, then yes, by all means, make \\textellipsis and \\mathellipsis do the same, in their respective modes. I'd welcome a pull request to that effect.. Looks both useful and correct, merged. Thanks a lot, Erik!. Returning a string from a function would work as a shortcut, but calling something else might be better. Doing macro expansion there might be tricky, since built-in functions are working on the level of parse tree nodes, not input text tokens. What we could do is parse a whole string using a separate parser instance, and then extract the root node out of that tree and include it in the current tree. This should work well for some simple functions, but might be problematic once you have arguments or state to deal with.. Right now, macros don't have access to the next token, but perhaps we should change that. In the long run we'll want to support things like \\@ifstar, which in turn builds on \\futurelet. The question is, do you need the next token from the input stream, or the next unexpandable token from the final stream handed on to the parser? The former we get from the lexer, the latter from the macro expander. In either case it should be OK to unget the token once we have examined it, although we have to be careful about whitespace handling if we got the token from the lexer instead.. What exactly does \\expandafter do? Given input \\expandafter\\foo\\bar I'd assume it would remove \\foo from the sequence, then expand \\bar one level, then put \\foo back into the sequence and start the next cycle with expanding that. So it does not expand \\bar as far as possible, that's what \\edef is for.\nI guess \\expandafter could use two utility functions factored out from the current nextToken function: one to obtain the next token of input either from the stack or from the lexer, and one to perform a single level of expansion without doing so recursively. This should definitely be built on the argument-handling macro expander from #605, I'd say, so perhaps I should see after that first.. I'd not modify #605; it already does contain three distinct features, which might make review slower than it would otherwise be. But having a branch build on #605 and posted as a separate PR either immediately or once that got merged sounds like a good idea. Usually I'd say I'll have a look, but I feel we are opening up new areas of development faster than we are closing them right now, so I'm not sure I'll get to that in a timely manner.. Thanks for the example, @xymostech. Experimenting a bit with that, it seems that the problem isn't so much about XHTML vs. HTML, but more about Transitional HTML 4 vs. strict HTML 4 or HTML 5. If you change the header to\nhtml\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\nyou get the same rendering as you get with the HTML 5 header,  but with\nhtml\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\nthe problem shows up. At least in my Firefox. In more detail, the problem may be due to the display: inline-block rule. Changing that to block yields results in strict that look just like they do for transitional. I guess the issue might have something to do with Almost Strandards Mode in Gecko. Apparently that's called limited quirks mode now, and standardized in a cross-browser fashion. Reading that standard, I see no reference to inline-block. The blocks ignore line-height quirk sounds like our best bet, as it applies to limited-quirks mode, too, and has something to do with box heights and therefore vertical placement.\nPutting a zero-with space U+200B into the #e container in your example, directly following #f, seems to fix the problem. It breaks the quirk rule of only having inline-level elements inside the block. So we need to find a way to introduce these into our DOM (unconditionally or if we detect limited-quirks mode) in such a way that it doesn't break any of our CSS spacing rules that are based on adjacent elements.\n\nHowever, it would be great if we actually just supported XHTML, since people are probably using it.\n\nI agree. If everything else fails, we might consider detecting such setups and putting the whole formula into an <iframe> with a data: URI as source. But this would be ugly in terms of styling, so I too hope that we find some more elegant way to avoid this problem.. @oddhack, can you give the code from #607 a try?. As discussed in https://github.com/Khan/KaTeX/issues/601#issuecomment-270886445, XHTML isn't the problem, but limited-quirks mode is. According to the WHATWG HTML LS, limited-quirks mode is selected if\n\n\nThe public identifier starts with: \"-//W3C//DTD XHTML 1.0 Frameset//\"\nThe public identifier starts with: \"-//W3C//DTD XHTML 1.0 Transitional//\"\nThe system identifier is not missing and the public identifier starts with: \"-//W3C//DTD HTML 4.01 Frameset//\"\nThe system identifier is not missing and the public identifier starts with: \"-//W3C//DTD HTML 4.01 Transitional//\"\n\n\nSo we might want to reproduce these checks, unless someone has a better idea of how to detect limited-quirks mode. But as I see some real chance that we'll be able to fix the errors in limited-quirks mode pretty soon, you might want to wait and see whether that is indeed the case.. I'd say this can be closed if #607 gets accepted.. The real error here appears to be that LaTeX does switch to inline mode for {cases}, while KaTeX renders the lines in display mode. Thus the fractions are too large to fit without colliding. If you change the \\frac to \\dfrac and render this in LaTeX, the result looks pretty much the same:\n\nIf you want to use display mode (or have constructs in there which require more vertical space even in inline mode), then adding space via an optional argument to the \\\\ command is the way to go, just as in LaTeX.. I would say this could start as a piece of contributed code, similar to the auto renderer, and might get moved into the core if we see a strong reason to do so.\nOne thing I would like to have is a flag (similar to the one for display mode) which states that the outermost mode is essentially vertical mode, and that it does contain exactly one display-style math environment. That would mean extracting the \\begin{align*}\u2026\\end{align*} would remain the task of some contributed code for now, but once we get the implementation for this in place, we could handle the environment itself inside the core, in a sane way, by setting that flag.\nWhile we are at it, here is one feature I have been considering a number of times: feed some text to a function which extracts all math TeX code, and replaces it by unique alphanumeric placeholder sequences. Allow processing the text with these placeholders using something else, e.g. a wiki syntax renderer of your choice. Once that's done, replace the placeholders with the HTML-rendered versions of the math content. That would mean that if wiki markup and TeX markup are processed at the same time, people could stop worrying about how one interfers with the other. I'm not sure if you consider this a good fit to be integrated with what you have in mind. If not, I may one day write this as my own piece of code.. @kevinbarabash I added screenshots, and just rebased the branch to resolve one conflict.. I just rebased this to use let and const.. Thanks a lot for the research and pull request! Code looks good to me. Travis is unhappy about the screenshots. Can you recreate those, or do you want me to do that?. Start by reading https://github.com/Khan/KaTeX/tree/master/dockers/Screenshotter and let me know if you get stuck.. Very interesting test case, since it has so many differences from LaTeX! If we can get all of them right we should be doing a good lot better in some other situations, too. Could it be our \\vdots has incorrect vertical dimensions? The horizontal spacing might be in part related to #249, but we also have wider spacing between the x_1 and the next \\partial, so there might be a wrong class somewhere there, or the CSS styles don't behave as we expect them to. Lots of work\u2026. Looks good to me. Merged. Thanks a lot, @edemaine, for your initiative in fixing the problem, and for your patience regarding how much tweaking it took to get this right.. Yes, I'm kind of worried, too. One thing worth considering is that we adapt #602 to detect limited quirks mode from the doctype and only add the symbols if required. Of course that won't work for server-side rendering. There we could use a flag, hoping that people manage to set the flag if they don't manage to choose an up-to-date doctype.. I was thinking about a screenshotter flag to switch doctype which would take a list of types for --verify mode, running each of them against the stored files. That way we could check all modes or generate new screenshots in any mode. Will look into this and push to your branch, if you don't mind.. @kevinbarabash, since this PR here now contains a commit by Emily and one by me, perhaps you should be the one to review it.. I'm not sure how a GitHub squash-merge would attribute the different commits. Should we prefer merges in such situations? It's not that I consider my code changes in this specific case to be so important they have to be attributed to me. More of a general question.. I see no conflicts, merges cleanly with master. The Unicode test is a different matter. I can reproduce this locally, and it is a change for the worse. Chrome doesn't render at all, and Firefox uses placeholder boxes for the second half. Needs investigation as to why the fonts aren't available to the tests any more.. OK, Unicode fonts made accessible again. Travis tests against a merge into head, so that works, too. I'd say this should be good to go now.. OK, this has been reported before, in #240 which got closed as a duplicate of #114. That one was aimed to address both bower and npm, and got fixed with #436 closing the npm half of the issue. The bower problem apparently remains open. @spicyj do you agree with this analysis?\nBower 1.8.0 reports this for me:\n```\nbower install katex\nbower not-cached    https://github.com/Khan/KaTeX.git#\nbower resolve       https://github.com/Khan/KaTeX.git#\nbower download      https://github.com/Khan/KaTeX/archive/v0.7.0.tar.gz\nbower extract       katex#* archive.tar.gz\nbower invalid-meta  for:\u2026/bower.json\nbower invalid-meta  The \"name\" is recommended to be lowercase, can contain digits, dots, dashes\nbower invalid-meta  The \"main\" field cannot contain minified files\nbower invalid-meta  The \"main\" field cannot contain minified files\nbower resolved      https://github.com/Khan/KaTeX.git#0.7.0\nbower install       KaTeX#0.7.0\nKaTeX#0.7.0 bower_components/KaTeX\n```\nThat tarball is a source archive, so it doesn't contain dist, nor should it. The error messages are something else but shouldn't be too severe.. https://github.com/Khan/KaTeX/issues/114#issuecomment-271398964 has an analysis of what went wrong. Main reason is that I didn't consider bower in #546, where I added dist to .gitignore to avoid warnings about that directory during development. #615 aims to fix this, and personally I'd suggest creating a 0.7.1 release to add bower support.. I released v0.7.1 which has a dist folder again. I have been able to use it with bower.. While I have some rough ideas of how the font generation works behind the scenes, I haven't actually done that. What I understand is roughly this: The TeX fonts were taken, thickened, got unicode mappings and were saved to various font formats. The metrics were derived directly from the texmf metrics descriptions, but with some replacements. That part is included in our metrics directory. Some of the font generation was inherited from MathJax, but development forked off at some point, as far as I understand. Maybe https://github.com/Khan/MathJax-dev/tree/master/fonts is where all the magic happens, but I haven't looked closely at that yet. @kevinbarabash and @xymostech will know more.\nBy the way, your branch as it stands is difficult to review due to the merge from master. Can you rebase that on current master? git fetch origin && git rebase -i origin/master should do the trick, except you'll likely have some conflicts along the way and should resolve these appropriately.. I would be fine with this approach too, if we think we can get the character before the next release. I wouldn't want an incomplete feature in a release, since people may depend on behavior which won't be forward compatible. @kevinbarabash, can you judge how difficult adding that character will be? Should we disable the \\verb* command for now? Apart from that, I'd like another look at the code now that it's rebased, but it's too late in the day around here.. @kevinbarabash I think we should have these steps documented somewhere. What do you suggest, Wiki or a README file in our repository or something else?. I see the Dockerfile and the corresponding README are in the KaTeX repo. Makes my request to have this documented boil down to adding a hint on how to add symbols.\nI see that the Dockerfile does reference Google Code in a number of places. I'm currently trying to modernize that.. Check out #624 if you want to tweak the fonts. There you can use your own fork of the MathJax-dev repository, instead of the official one. It should even be possible to include git clone flags like --branch, but it should be in the same argument as the URL. Report on #624 if anything doesn't work as intended. Also report if it does, so that additional features you might use can get documented.. I've included a font that includes the space symbol, based on https://github.com/Khan/MathJax-dev/pull/2. The \\verb* looks good now, I'd say. I also noticed that the when using the unstarred version, the spaces are smaller than all the other glyphs. In the long run we should try to make the Teletype space equally wide. @kevinbarabash do you know where to tweak that?. We've taught eslint to like (and in fact enforce) trailing commas again, in #622. Unfortunately the file is now in conflict, presumably with this. I feel all those comma changes were a pretty annoying detour, and will be happy once we no longer have any active branches without trailing commas. Until then we'll need to rebase \u2013 again.. Can we generate a space character in the font by using an empty glyph box of the appropriate size?. > \u2026 I have no idea which size command corresponds to \\scriptscriptstyle \u2026\nAccording to the Tex Book Appendix B, plain TeX contains these settings:\ntex\n\\textfont0=\\tenrm \\scriptfont0=\\sevenrm \\scriptscriptfont0=\\fiverm\n\\def\\rm{\\fam0 \\tenrm}\n\\textfont1=\\teni \\scriptfont1=\\seveni \\scriptscriptfont1=\\fivei\n\\def\\mit{\\fam1 } \\def\\oldstyle{\\fam1 \\teni}\n\\textfont2=\\tensy \\scriptfont2=\\sevensy \\scriptscriptfont2=\\fivesy\n\\def\\cal{\\fam2 }\n\\textfont3=\\tenex \\scriptfont3=\\tenex \\scriptscriptfont3=\\tenex\nLooking for corresponding settings in LaTeX I notice commands like \\ssf@size and \\DeclareMathSizes. Looking for the latter in source2e.pdf I see a bunch of calls from fontdef.dtx:\ntex\n \\DeclareMathSizes{5}{5}{5}{5}\n \\DeclareMathSizes{6}{6}{5}{5}\n \\DeclareMathSizes{7}{7}{5}{5}\n \\DeclareMathSizes{8}{8}{6}{5}\n \\DeclareMathSizes{9}{9}{6}{5}\n \\DeclareMathSizes{\\@xpt}{\\@xpt}{7}{5}\n \\DeclareMathSizes{\\@xipt}{\\@xipt}{8}{6}\n \\DeclareMathSizes{\\@xiipt}{\\@xiipt}{8}{6}\n \\DeclareMathSizes{\\@xivpt}{\\@xivpt}{\\@xpt}{7}\n \\DeclareMathSizes{\\@xviipt}{\\@xviipt}{\\@xiipt}{\\@xpt}\n \\DeclareMathSizes{\\@xxpt}{\\@xxpt}{\\@xivpt}{\\@xiipt}\n \\DeclareMathSizes{\\@xxvpt}{\\@xxvpt}{\\@xxpt}{\\@xviipt}\nI'd read this to mean that at a text size of 10pt as used by KaTeX, the full size math font will have 10pt, the script style will use 7pt and the scriptscript style will use 5pt. If the text font size is not this but some other integer from the list, another preloaded setting will be used. If no such setting is found, e.g. in the case of fractional font sizes, \\calculate@math@sizes from ltfssbas.dtx will compute fonts based on \\defaultscriptratio and \\defaultscriptscriptratio which default to .7 and .5 respectively. That's what KaTeX is using, too, in its stylesheet.\nI think that the original Idea of TeX was to set the text font outside the math formula using the text sizing commands, then adjust the math size using the styles instead. Using text sizing commands in math mode is probably poorly supported in many situations. On the other hand, it can be quite useful at times.\n. I thought the same. One thing has me wondering, though: there appears to be a difference between release and non-release builds of LaTeX. \\latexrelease.sty has this table, \\DeclareMathSizes does not. So perhaps even in the LaTeX world there are situations where the ratios are used even where they lead to fractional font sizes. And I honestly think it's more of a bug than a feature if changing the text font size from 12pt to 12.001pt has a noticable difference.. I still haven't understood (nor really investigated) exactly how the font creation process works. Adding a glyph that is not present in the TeX font would have to be done by editing that Makefile, so that it fits in with out dockerized font creation process, right?\nLooking a bit closer at the font creation, am I to understand that our TTF fonts are actually generated from bitmap versions of computer modern? Why the hell is that? I would expect that we should obtain better quality at smaller file sizes if we could create fonts more directly from metafont sources of Type 1 vector fonts. I am kind of surprised to see that cm-unicode is using mftrace, too. Strange!. http://stackoverflow.com/questions/20384088/script-for-metafont-to-ttf-conversion suggested md2pt1 as an alternative to mftrace. Sounds reasonable to me. The way I see it, both are perl scripts that call mf resp. mpost at some point, so the same patch to make the font a bit blacker should be applicable there as well. I see lillypond switched from mftrace to mf2pt1 in 2008, perhaps we can learn something from that.\n@kevinbarabash can you edit the settings of https://github.com/Khan/MathJax-dev to enable issues on that project? I guess it might be more appropriate to discuss this there, instead of further distracting from the issue at hand here.. > There haven't been any changes in master since the 0.7.0 release, right?\nYes there were: the version bump, and the commit and merge from #612 which theoretically might break things. I deliberately wanted that one for after 0.7.0. I guess it depends on what we want 0.7.x to be. If it's bug fixes only, we should branch a maintainance branch called v0.7 off from 0.7.0^, and release from that. If we use 0.7.x for new features too, the way we'd use a 7.x.0 once we get past the leading zero, then we shouldn't call the development version 0.8.0-pre. Releasing off a non-master branch has the added benefit of actually trying out that script, now that these changes are fresh.\n\nIn general I feel like it's bad form to allow releases from non-master.\n\nWhy? Patch level releases x.y.z should be from a x.y maintainance branch. That branch itself either forked from master around the x.y.0 release, or from the version x branch if latest development had been at a newer major version by the time x.y.0 got released. At least that's the way I see it.\n\nThe only other thing I think I would like our release script to do is have a --dry-run option so that we can make sure the run would finish successfully, without actually pushing/making tags/etc.\n\nGood idea. During development I had created shell functions which just printed the results from the calls to git and npm. Conditionally doing that might be easy. I'll look into it.. Now I've got some sanity checks: a check for uncommited changes, one for the name of the current branch, and one for the npm login. And I've added an option to not exit after a failed sanity check. Do you want it this way? Or should the sanity checks just report the issue, and the user can decide at the confirmation whether or not to ignore them? Should the dry run mode imply not exiting on failed sanity checks? Should the dry run mode indeed execute make, or skip that, too? Should the dry run mode perform all local git operations, then skip pushing them and instead remove the local tag again?. > That shouldn't be too hard, just editing what $INSANE is set to, right?\nI guess in that case I'd make INSANE and --insane go away altogether. Simply echo \u2026 >&2 for every failed sanity check, and rely on the fact that a sane user will say no to the subsequent Look good? prompt. Makes the code simpler, too.\n\nI'm not sure what bugs would be caught by running git for the local operations\n\nOperations might fail because a merge is in progress, or a rebase, or because the remote isn't called origin, or because there are some git hooks that do fancy stuff, or because the git doesn't have a user id configured, or a million other reasons I can't think of just now.. As I've just accepted #590 and #591, I've come up with a way to make updating Subresource Integrity hashes part of the release process. I've also dropped the --insane flag, as discussed, relying on a modified prompt instead.\nThe new script I created for this purpose is making heavy use of ES6 already. I've not subjected it to eslint yet, but intend to do so once #617 has been accepted.. How do we proceed here and with 0.7.1? I think this one here should go into master, once you're happy with it. When that happens, we should also merge something like this into the v0.7 branch, which I created by forking off v0.7.0^.\nWe should decide whether we want to maintain the 0.7 line of development via cherry-picks of bug fixes (whitelist) or via merges from mainline excluding breaking changes which need to be reverted (blacklist). I'd say that after 1.0.0 we should use cherry-picks for patch-level releases and merges for minor-level releases, but prior to 1.0.0 we are more flexible. With the planned switch to ES6 notation, merging large amounts of changes would probably become a pain, though. So I'd suggest we cherry-pick selected commits to v0.7. If you agree I'd do so once this here gets merged into master.\nIf you want me to, I can try rolling a 0.7.1 release using this updated script. To do so I'll need access to the katex package on npm, though.. Thanks for merging, @kevinbarabash! I'll backport this to the v0.7 branch.. Cherry-picked to v0.7 in ad571b945f3c597474dc64a149a0106c0d36961a. @kevinbarabash, do you want to build a 0.7.1 release using this? Checking out the v0.7 branch and running the script with 0.7.1 as the only argument should do the trick. And if not, we want to know about it now.. Oh, I see I've been granted npm permissions for this. Do you want me to run the release script, to better inspect whether my changes work as intended and so I get some experience doing releases, too?. Looks like something is replacing ... (three separate dots) to \u2026 (the Unicode symbol for horizontal ellipse). Best you write your formula as $$\\{x_{i}|i=1,2,\\ldots,N\\}$$, which is better style anyway and has the benefit of avoiding this issue, too.. Rebased onto the old and new trailing comma convention. Having this in would help testing on IE9 thanks to the browserify step.. I realized that this does slow down the screenshotter immensely. I guess we should try to come up with a solution to do screenshot tests with a cached version. Or perhaps even with the build version, as present on the file system. Something like that.. I guess you could also declare a macro \\color which expands to \\textcolor. That way you don't have to go poking around in some string literal which might one day contain things like \\verb and \\def and whatnot, but could still override \\color to behave like \\textcolor on a per-size basis.\nNevertheless, this change should come with a bump to 0.8.0, not in the 0.7 line of releases.. Code looks good to me. I'd like a go-ahead from @xymostech, though, to make sure the workaround for the incompatibility is feasible for KA.. The macro appears to be defined as\ntex\n\\vbox {\\baselineskip 4\\p@ \\lineskiplimit \\z@ \\kern 6\\p@ \\hbox {.}\\hbox {.}\\hbox {.}}\nI'm somewhat surprised that we have a single unicode symbol for this, while TeX combines three plain dots here. An alternative to building a vbox with kerning would be adjusting the height of the glyph in the font, right?. Can we even change the height of a single glyph of the font, without changing the line height of the font in total? In that case, the nested vbox would be better again.. I don't think it makes sense to auto-insert this snippet at the end. You can only do so after the document has been parsed, and in that case, you might as well run the code directly. So add something like this to your <head>:\nhtml\n<script>\n    document.addEventListener(\"DOMContentLoaded\", function() {\n        renderMathInElement(document.body);\n    });\n</script>\nYou could insert the script in that handler instead, but as I said, it would be more work for no gain.. @xymostech are you waiting for some other input before merging? Do you want me to merge this myself?. I was wondering about the best approach for local repos, too. Theoretically it should be possible to run a git server locally, and have the docker connect to that. But seeing all the trouble the screenshotter had to go to in order to identify an ip address to be used for this, I'd rather avoid that. Perhaps we should drop the git checkout altogether, and instead download the tarball, or offer a way to copy a local tarball into the container instead. Then we can have the outer script create such a tarball in case the argument is a local directory, or use it as is if it is a file, or download it if it is a url.. I'll leave that to you. Personally I think having both the docker approach and a non-dockerized version would be nice. So I'd say merge this and if one of us finds the time we can write a Makefile to build all dependencies and use that.. You are essentially doing the equivalent of $\\displaystyle \u2026$ in TeX. It does use display style within the formula, but still includes the formula as a whole into the surrounding context in an inline fashion. To achieve something like $$\u2026$$ you would usually do katex.render(\u2026, \u2026, {displayMode: true}). That will enable a CSS rule that should give you centered content. It also makes the \\displaystyle command inside the formula redundant.\nI guess I'd use the DOMContentLoaded event instead of window.onload to ensure that formulas get typeset while images are still being loaded. Or you simply embed the corresponding script at the end of the <body>. Both of these approaches are suggested in the auto-renderer documentation.. KaTeX doesn't yet support the repeated column description *{20}{c}. It's one of the issues tracked by #269. As you are only using three columns, writing ccc instead would work well enough. Support for \\mathop is a recent addition; in case you're still using KaTeX 0.6.0 (as we have CDN issues with 0.7.0), you might want to omit that, too. The following works on https://khan.github.io/KaTeX/:\ntex\n\\begin{array}{ccc}\n1&3&\\Theta \\\\\n{\\frac{{dy}}{{dx}}}&\\lim_{\\delta x \\to 0}& \\pm \\\\\n{\\sum\\limits_1^3 2 }&x& \\ne \n\\end{array}\\theta\nI think I'll consider this a duplicate of #269.. I just realized that this change would expose the way the displaystyle was done until now, by including a \\displaystyle in the input string. I've now changed that to a proper displayMode: true setting in the invocation, both to avoid confusing error messages and to demonstrate how this is meant to be handled. As a side effect, the exterior display style styling now applies to the demo output. Personally I consider this a good thing, but if you want me to I can get it back to left-aligned and without extra space around.. I'm not sure exactly why this happens. Probably something to do with stacking contexts. So I guess that establishing a stacking context for katex formulas might either make this issue go away, or make it affect the whole formula. Can you try out which one it is, or attach a demo file so we can experiment? Also please indicate what browsers you have tested this with.. I ran this again, and couldn't reproduce the font files byte for byte. Looking at the output from ttfdump or ttx, It seems as though the only relevant change is the modification of the created and modified entries in the head table. Pretty annoying, since this means there is no simple way to see whether re-running the tool introduces any relevant changes, or merely updates the timestamps with no other modification. So what do we want to do?\n\nAccept this as a fact of life, trust that all changes will be irrelevant or beneficial, and move on.\nManually inspect all differences using ttfdump or ttx and diff.\nWrite some script to ttx the files, check whether the timestamps and checksums are the only things that changed, and revert to the base version against which the comparison was performed (e.g. HEAD) if there are no other changes.\nStore the ttx files in our repository, and only generate the other formats locally. This means developers will need more tools, and more time. But it also means we see each and every modification in the corresponding source file using the regular GitHub diffs. We could even do merge commits with conflict resolution on these files.\nDo both: have ttx files for readable versions, and other file formats for use by the browsers. Use a Travis check to ensure that these stay in sync: whoever modifies one file must modify the other as well, in order to keep Travis happy.\nSet up textconv settings in .gitattributes in such a way that git diff shows the diff on the ttx file. This will be very helpful for local reviews, but not much use with the GitHub GUI. On the other hand, we want to test each PR locally before accepting, right?\n\nTo help us decide, I actually created a branch that contains TTX files. It's not using them yet, and it does have the TTF, too. But it does show the effect of your pull request here in a human readable fasion: https://github.com/gagern/KaTeX/commit/feefc7c0e1b761a9d10740648de4d71747a2001a\nThat diff shows that pretty much all of your font file modifications are spurious. The only relevant ones are\n\nKaTeX_Main-Regular\nKaTeX_Main-Italic\nKaTeX_Main-Bold\nKaTeX_Typewriter-Regular\n\nThese are changes that should actually be reviewed, but all the other modifications should in my opinion not be part of this pull request here. Can you drop them please?\nI'm also a bit surprised tha Katex_Main-BoldItalic is not affected by this PR here. Is there a reason why the newly added glyphs are available only in three of our four styles?. I've had a stab at approach 6 in #635. So far it looks as though we can't fully automate the process, though: users still have to enter some settings in one of their config files. Which allows them to choose different tools, or tools installed in locations outside their $PATH, or whatever. Still somewhat inconvenient. Currently it can only handle ttf and woff. woff2 requires additional dependencies, and eot doesn't seem to be supported at all.. Do we want to hold this merge here till we can get the things from #638 in as well? That would help keep the repo size down, but would delay #614. I guess we shouldn't delay too much if it can be avoided.. Yes. The WOFF fonts in particular are compressed, so a slight change in one part of the font file will likely lead to large changes throughout the file, and therefore bad delta compression of repository data. At 2.2 M the fonts directory is the largest portion of our repository. We should not lightly add 2.2 M a couple of times if we can avoid it.\nIn the long run, it might make sense to only deploy the TTF files, and generate all the others locally or when rolling a release. Since the TTFs are afaik less compressed, they should delta-compress much better. If I find the time I could investigate whether we can get the machinery for WOFF, WOFF2 and EOT compiled to JavaScript using Emscripten, but that won't happen in the next couple of weeks.. Fixed by #636. Thanks for the investigation!. Great! Very quick response, nice code, and it even does the same thing as LaTeX for input like $$\\sum'^x$$ or $x'^{x'^{x'^{x'}}}$. The failing 1'_2^3 was not something I would have expected before your explanation, but it does make sense now and it is consistent with LaTeX, too. I'll accept this PR.. I wonder whether this can be made a proper function in functions.js. The function handler does have access to the parser, so it should be able to do essentially the same things you are doing here, without need for a special case inside the Parser.\nYou shouldn't assign to mode directly, but instead use switchMode. It takes care of the fact that math mode discards whitespace while text mode retains them. As it is, \\text{a$ b$c} will throw an exception since space is a valid symbol only in text mode. \\text{a$b$ c} works as intended because the closing $ gets consumed after the mode was changed back. You might move the initial consume() after the mode switch, to avoid using switchMode. But that wouldn't work if you make this a function as suggested above.\n\nIn MathML, I couldn't figure out whether anything like mrow or mstyle can be nested within mtext...\n\nReading the grammar I'd say no. It can contain text, and it can contain two kinds of elements but neither of these elements can have any nested content, just attributes. So perhaps the correct approach would be to analyze the children of a run of text, and if some of it is not literally text, then we don't build a single mtext but instead build an mrow with mtext and other items as children.. You are right, most of the things in parseImplictGroup would fit in functions.js just as well as $ if not even better, since the start with a \\. At the time @xymostech wrote this code, having functions do this work was infeasible because a function execution couldn't modify the current position in the input string, it couldn't consume input. That became possible only with #386. That's not to say she would have done anything different, though.\nI think there are two ways to look at it. One way is to say that a function (in the sense of functions.js) has all its commands parsed before any of them are executed. Then you're right, and $ should stay in the parser with the others you mentioned. Another way would be putting all the special handling in response to a given token into functions.js in order to keep the Parser lean. In that case all the things you mentioned should go there. It's probably best to lease $ where it is for now, and if we decide to move things, then we can move all of them in a separate PR.\n\nIs there a reason not to add an implicit flag or something to defineFunction support?\n\nWhat would that flag accomplish? I don't see a need for a flag at all.\n\nI wonder whether that manual assignment to this.mode is correct?\n\nIt does the mode switch before consuming the brace both on opening and closing.\nI just realized that the interaction between switchMode and token consumation is nontrivial as well. If I were to replace the manual assignments in there with switchMode calls, I'd have to do so after consuming the respective token. Because if I check that the next token is { and then switch to text mode, I might end up reading a space instead! Perhaps I should add a comment somewhere, indicating proper use of that function\u2026\nYour code as of your latest commit should be OK, as it does switch modes after consuming the token that triggered the mode switch.. Actually I'd render x+\\text{some $y+\\text{some $z$}$} as\nxml\n<mi>x</mi>\n<mo>+</mo>\n<mrow>\n    <mtext>some </mtext>\n    <mi>y</mi>\n    <mo>+</mo>\n    <mrow>\n        <mtext>some </mtext>\n        <mi>z</mi>\n    </mrow>\n</mrow>\nThat way, each \\text command results in either a naked <mtext> or it results in an <mrow> containing <mtext> and other things.. Looking at a text version of KaTeX-Main-Regular, the font should contain combining characters for (in order of map code)\n\n\\` U0+300 grave\n\\' U+0301 acute\n\\^ U+0302 circumflex\n\\~ U+0303 tilde\n\\= U+0304 macron\n\\u U+0306 breve\n\\. U+0307 dot above\n\\\" U+0308 diaresis\n\\r U+030A ring above\n\\H U+030B double acute\n\\v U+030C caron\n\nI checked that inserting one of these combining characters after a text symbol does indeed render correctly, i.e. has correct horizontal placement. As these already work for math formulas, we should have correct metrics there, too. So I'd say yes, adding these should be simple.\nWe also have U+0338, the combining long solidus, but for lower-case \\o we'd need the combining short solidus instead, I think. But the new fonts currently discussed in #632 do include precomposed glyphs called oslash and Oslash, so we should be able to use those pretty soon.\nI don't see support for the following symbols:\n\n\\c U+0327 cedilla\n\\k U+0328 ogonek\n\\l U+0142 barred l\n\\b U+0331 macron below\n\\d U+0323 dot below\n\\t U+0361 double inverted breve\n\n@kevinbarabash, do you know which of these symbols are available in the TeX fonts from which our font building pipeline takes its input? It would be nice to include as many of these as possible.\nOne thing that slightly complicates matters is that Unicode combining characters are placed after the base glyph, while LaTeX accent commands precede the base character. If the agument to the function is a single glyph (\\c c), or a group containing just a single glyph (\\c{c}), then this should still be pretty little work.\nThe situation is less clear if that assumption does not hold. But I doubt that's officially supported even in LaTeX. I've observed \\\"{rst} to result in r\u0308st, while \\\"{ooo} just renders as a single \u00f6, presumably using the precomposed character available in T1 font encoding. So I think it would be OK if we simply extract the first character from the group and insert the combining character after that, either keeping the remaining text as is or dropping it in the process.. Perhaps we should try to build precomposed glyphs for Ogonek.. I think we should have a comparison on the https://khan.github.io/KaTeX/ website, as something more visual than jsperf would be of benefit.. Essentially a duplicate of #613. We need to release 0.7.1 and have that dist folder, I think.. Let's keep this open till the dropdown catches up, shall we?. KaTeX only typesets formulas. It does not typeset whole TeX documents. So you can't use all those declarations in the head of a file, nor the ones used to form individual paragraphs. You can put into KaTeX the things you'd put between $\u2026$ or $$\u2026$$ or \\(\u2026\\) or \\[\u2026\\].. :-1:\nI find the original formulation clearer. The option configures the default for a formula. You can set displayMode to false but use \\displaystyle in part of your formula, and conversely with \\textstyle. So the setting controls the default, as indicated. And the (default false) tells me that the default for this boolean value is false: not specifying the option is the same as specifying it with the value false. That information is absent from your reformulation. Furthermore, your formulation introduces \u201cthe typesetter\u201d as a concept which might take some readers a bit till they identify what you are talking about. It doesn't matter who is doing what; what matters is the style of the result.. > Isn't displayMode: true equivalent to prepending the input with \\displaystyle?\nNo, it also adds some outer styling.. I like your formulation, @edemaine. Minor nit: as \u201cexpression should be typeset display\u201d doesn't sound like correct English to me, I'd make that \u201cin display mode\u201d. You can use \u201cinline mode\u201d to keep things symmetric. You can also try other formulations like \u201cas a displayed equation\u201d or something like that.. I guess you copied the line using var from an older version of the code base. We switched to const and let in bd9db332d2887d884ec7ab3ca68488314b8618da from #617.. For small classes like those in domTree, using ES6 class syntax might be a good thing. But for other use cases I'm less certain. When I started converting the codebase to ES6, I gave class notatioin a try for Parser, and noticed that it doesn't neccessarily make things better. We have several top level definitions intermixed with the method definitions in which they are used [1, 2, 3]. Afaik static members are not part of ES6, so there is no simple way to include these elements within the body of a class definition. Moving them away from the methods that use them feels like a bad idea. Since Parser is not the only class to contain intermixed code of this kind, I felt that we shouldn't abandon prototype assignments altogether. And if we keep using them, then I'm not really sure than mixing them with ES6 style class notation for simple classes is a good idea. Now people only have to know one style of writing a class, which I see as a benefit.. You might be interested in #251 which discusses a way to render KaTeX output to a HTML5 canvas. Combining that with node-canvas it should be able to generate PDF or SVG. You'll likely have to write some code to register the appropriate fonts, as the CSS used by KaTeX won't be used in this approach. If I find the time, I might hack a proot of concept tool for this whole approach, but don't rely on me finding that time\u2026. I'm wondering whether it would be better to hand through arbitrary options, like throwOnError or errorColor. That would make new options usable in the future without any additional work. displayMode would be the only option set internally, either on the given options object, or on a copy thereof. What do you think?. I think I've seen \\coloneqq for this, too. Yes, I think having the command first and the glyph when we can get it would make sense. I also wonder whether we could hack something like a \\raisebox and use that to move the colon to the symmetrical position, at least approximately. The proper type for the whole thing, I guess mathrel, would seem important, too.. Would you include body content in this example? If so, how would you obtain the input and direct the output? Using the auto-renderer?. I like the example from the edited issue text. I guess I'd avoid the separate index.js and inline the code instead. I'm not sure <div\u2026/> is valid HTML5, better make that <div\u2026></div> instead.\nSo what are the supported doctypes? Essentially we need to exclude those which cause quirks or limited-quirks mode. Or we could be more strict and require the document to conform with what the html spec allows for output. For the HTML serialization that spec is pretty restrictive, but not so for XML serialization.\nOf course if we got #608 reviewed, we might be able to support more doctypes than we do now.. Closing for now, feel free to reopen if more details are available.. Closing for now, feel free to reopen if more details are available.. https://github.com/mathjax/MathJax/blob/2.7.0/unpacked/jax/input/TeX/jax.js#L2168 does the mode detection. I haven't found the mime type matching yet.. The Selenium run by Travis is having problems setting up a fixed browser window size for the screenshots. Reason unknown but surely unrelated to your changes. I triggered a rerun of the tests. If this happens more often we may have to investigate in more detail.. OK, Travis is happy now.\nA bit of background on the screenshot sizes: with selenium we can configure the window size and then observe the size of the screenshot taken from the document area of that window. We don't want to hard-code the amount of space taken up by toolbars and so on. So setSize will iteratively adjust the window size until it gets a screenshot of the desired size. This worked even in the failing run here. Then it goes for the actual screenshots for test inputs, and there it verifies that the size of those screenshots still matches the one it obtained before. It's this sanity check that failed in the previous run here.\nIf we can reproduce this issue with some reasonable probability, it would be interesting to run this using one of the debug docker images (for Chrome resp. Firefox) to see whether we can work out what's going on with that window. Will see whether I can reproduce locally\u2026. The screenshotter merely runs an existing selenium image inside the docker. All the javascript logic and file access happens outside the docker. texcmp on the other hand builds its own docker image, and used to mount a host directory in there to access the script, screenshot definitions and existing screenshots. In #722 I changed that; please give that one a try and report back.\nI haven't tried -colorspace Gray yet. If #722 works for you, feel free to give that one a try with those arguments, and propose a pull request if that works. According to the -grayscale doc, colorspace Gray implies Rec709Luma which is different from Rec709Luminance. The former is apparently non-linear. I don't have strong feelings either way, though.. Our latest release, v0.7.1, doesn't contain #605 which introduced this feature. We need to roll a new release soon.. The containers not having network access sounds like a problem with docker config. @edemaine, can you try creating a container using docker run --rm -it ubuntu:17.04 /bin/bash the exploring its network config? Can you do \"apt-get update\" therein? What does /etc/resolv.conf look like? Can you reach hosts by IP address instead of host name? Does the internet have any suggestions?\nAlso check out https://docs.docker.com/engine/userguide/networking/ and its subpages. What kind of networking does your container use? docker inspect \u2039containerid\u203a should be useful here. On my system the default is to use a bridged network, but I guess it might be different for you. https://docs.docker.com/engine/userguide/networking/default_network/configure-dns/ has details about dns configuration in a bridged network.. > All I did was apt-get install docker.io on Ubuntu, so it's not like I'm running a weird Docker config.\nI think Docker changed their default config several times, usually only affecting new installs. And an Ubuntu which runs on AFS is definitely far from common, right? My docker inspect reads like this:\n    \"NetworkSettings\": {\n        \"Bridge\": \"\",\n        \"SandboxID\": \"72\u202696\",\n        \"HairpinMode\": false,\n        \"LinkLocalIPv6Address\": \"\",\n        \"LinkLocalIPv6PrefixLen\": 0,\n        \"Ports\": {},\n        \"SandboxKey\": \"/var/run/docker/netns/72\u2026\",\n        \"SecondaryIPAddresses\": null,\n        \"SecondaryIPv6Addresses\": null,\n        \"EndpointID\": \"25\u20269b\",\n        \"Gateway\": \"172.17.0.1\",\n        \"GlobalIPv6Address\": \"\",\n        \"GlobalIPv6PrefixLen\": 0,\n        \"IPAddress\": \"172.17.0.2\",\n        \"IPPrefixLen\": 16,\n        \"IPv6Gateway\": \"\",\n        \"MacAddress\": \"02:\u2026:02\",\n        \"Networks\": {\n            \"bridge\": {\n                \"IPAMConfig\": null,\n                \"Links\": null,\n                \"Aliases\": null,\n                \"NetworkID\": \"bf\u202695\",\n                \"EndpointID\": \"25\u20269b\",\n                \"Gateway\": \"172.17.0.1\",\n                \"IPAddress\": \"172.17.0.2\",\n                \"IPPrefixLen\": 16,\n                \"IPv6Gateway\": \"\",\n                \"GlobalIPv6Address\": \"\",\n                \"GlobalIPv6PrefixLen\": 0,\n                \"MacAddress\": \"02:\u2026:02\"\n            }\n        }\n    }\n\nSo I have this whole Networks key which appears to be missing in your setup. The NetworkID listed in my setup is also found in the output of docker network ls. If you don't even have docker network, then perhaps that setting key wasn't meant to be present in your setup either.\n\ntar: tex: Cannot change ownership to uid 0, gid 0: Operation not permitted\n\nAre you running the command as root? Usually you run docker as a regular user, but with docker.sock only accessible to the group docker so that only users within that group can run docker. If you are running the commands as root, then tar might assume it should be able to \u201crestore\u201d file ownership, and complain for failing to do so.\n\n[\u2026] I'm using AFS, where chown is impossible. Maybe just some tar tweaks would suffice?\n\nThe --no-same-owner option to tar should help. Perhaps combined with --no-same-permissions. I fear that permanently adding these flags may cause compatibility problems with tar versions that don't support them, so we should add some checks to verify they are actually supported.. http://pubs.opengroup.org/onlinepubs/007908799/xcu/tar.html suggests that indeed -o is a pretty established command line flag. I added that. Thanks for testing and suggesting that!. I thought docker cp had problems copying more than one file, but it seems to handle whole folders well enough, so I guess we can do without tar on the way out. Building the image I think the tar command is a nice way of copying some files without taking all of them, so there I'd keep it.\nI'm wondering whether I should move things like the \"npm install\" to the image creation, so we can avoid that step on consecutive runs.. > That sounds nice \u2013 it would speed-up startup.\nFor repeated evaluation it would be even better if we could have some texcmp daemon in the background, and could send that rendering requests on some port in a proper server and client kind of way. But probably too much effort for such a rare use case. Note that screenshotter allows reusing selenium containers if you call the jar file directly, not through the bash file.\n\nI guess the worry is that texcmp changes and we'd need to delete the image?\n\nNot necessarily. We'd only have to redo the image if the set of dependencies for texcmp changes.\n\n(I don't even know how to delete the image...)\n\ndocker rmi, but I try to use the version number in the tag in such a way that whenever I push a change that results in a different image, it gets a new version number and the script will building new images automatically. And if the lower layers remain the same, the resources required for this should be moderate. In the future I should also bump the version when I change the dependencies.\nWe might want to ship these images from docker hub one day, so people can pull them instead of building them locally.\n\nI wonder if we could rely on the caller running npm install, and just copy the node_modules directory into the Docker (each call)?\n\nThat's essentially how it worked with the mounted host directory. But some of the modules (either ones we are using now or some we might want to use in the future) could install different stuff depending on the node version in use. I already noticed that the different layout of node_modules (nested vs. flat) caused me some grief. So I feel like I'd rather not depend on this too much.. I think this should be ready for merging now. And I think we can squash it without loosing too much detail. Feel free to do the honors.. The file as it stands is intended to be opened by the KaTeX server. Run \u201cmake serve\u201d and open http://0.0.0.0:7936/contrib/auto-render/index.html to see it working in the current version. Running HTML files from a local directory is problematic as modern browsers (Chrome in particular) don't allow access to resources like fonts from local disk. Thus we should design all our examples to use the HTTP server. Perhaps we might want to add a comment to that effect somewhere.. Sorry, forgot to comment. I like the general idea.\nI'm a bit confused by the fact that you are using a different convert invocation than texcmp. If your command is superior (looks like your green might be better to see), it would make sense to use that in both places for the sake of consistency.\nAs convert is invoked outside the docker, it might be worth indicating that ImageMagick has to be installed. Do we want to support gm convert from GraphicsMagick as an alternative? If so, how do we tell which one to use? Autodetect or let the user configure?\nThe line where you ignore errors from mkdir might be worth a comment. I assume that this is mainly in order to deal with EEXIST, relying on the fact that any other error creating the directory should lead to a write error later on. Correct?\nI have a very slight dislike for the temporary file you write then delete. ImageMagick should be able to read that image from standard input. But adjusting the whole machinery so that it can feed input to the executed file makes things considerably more complicated and less generic, so I doubt that's actually worth changing.. Oh, and we probably should make sure the directory for the diffs is included in .gitignore. Right now that contains the singular diff for use by texcmp, while you are using plural diffs here. I find the distinction between singular and plural rather confusing, so I'd say either re-use diff or pick something more descriptive. I'd prefer reusing.. Had a look at the code, didn't run it. Approach looks sane enough, particularly with the fallback in place. Name of the option could be more descriptive. Perhaps --reload instead of --slow?. The properties in question are read-only, and even if some instance were to assign to them, those assignments would be local to the instance, since the values are immutable. I thought about having them as properties of the constructor instead of the prototype, but elements of the instance allow for two similar environments to share one implementation even if their number of arguments differs. Have I convinced you that this use here is all right?\n. That is where I had them first, but it needs the ParseNode constructor, which I hadn't made part of Parser's prototype at that time. Since I later on needed ParseNode for the leftright group, and moving that to the parser felt even more wrong, I can move this decomposition to the environments. I guess it would be cleaner to export ParseNode without reference to the instance, preferably by moving it to a separate file.\n. Not needed by most environments, but offered to them. The most important of these are args, argPositions and of course body. These can't be passed to the constructor. But even if they could, I'd rather not do this. There are potentially many environments, but there is only one place where instances of these are created. So having that code just in this one place avoids code duplication. Particularly since environments, the way I implemented them, don't call a base class constructor for common functionality.\n. Shouldn't this be makeKern?\n. Does this really belong with the font metrics? I think we're getting the value from ltplain.dtx.\nAlso note that as far as I can tell, it's always in pt, i.e. always the same size, so you should take the current fint size into account when emitting an em-based measurement, instead of scaling the space with the font, right?\n. @spicyj I didn't mean to refer to absolute font size, I'm fine with the 10 pt per em approach. What I'm worried about is relative size: if you go to scriptscriptstyle, then the em in the inner box will be only half as big as it would have been in the outer box. But if you follow LaTeX, then the spaces should not scale by that factor 0.5 but instead should remain fixed. So I'd say that if you have 1.2/ptPerEm outside, then in scriptscriptstyle you should have twice that. Not that it really matters much in this situation here, it's more a matter of principle. Or is there a deliberate decision to also scale such things down, contrary to what LaTeX does?\n. I'm probably being pedantic, but shouldn't this be 0.84 and 0.36? After all, we have a \\baselineskip of 1.2em and a strut with height 0.7\\baselineskip and depth 0.3\\baselineskip.\nI also wonder: do we need to create a new node every time, or would it be all right to insert the same leaf in multiple places of the internal DOM representation?\n. Looks like: with this setting (or even just the first half of it), the Firefox screenshots look no different than without, but the Chrome screenshot switch from some sans-serif default to something that looks just like it does in Firefox.\n. Why the charAt(0)? Shouldn't this be a single-symbol group in any case?\n. Then makeVList, makeSpan and so on should be moved as well, I think. Except if you consider these things common to different groupTypes, in which case the file name is just a bit confusing. In any case, I'd say that's a separate issue, and I'd leave mathit in here for now.\n. Yes. Many of the things mentioned in #269 could go in there. numVerticalLinesAfter for | or parboxWidth for p{\u2026} or separatorAfter for @{\u2026} or intro and outro for >{\u2026} and <{\u2026}, to name a few ideas.\n. Because it's changed to Done one line down, if the run succeeds. If you consider this confusing, I can change it to be the other way round, but that probably wouldn't be any clearer either: the test isn't done or failed at that point.\n. I've thought about similar solutions myself. I think value is over-used in the codebase already, so I'd have {type:\"content\", align:\"c\", index:0} and {type:\"space\", width:quad} and so on. I just started on this and realized that if I want to avoid excessive code duplication, this will require some major work, so it would delay the {cases} environment considerably. Shall we postpone this?\n. Having an index around makes it easier to link entries from the colSpec back to the actual content from the body. Sure, one could have that index in some other variable, and increment that. It's more a matter of convenience.\n. That was copy&paste from my browser, I can certainly simplify this. I often think about whether we should have some non-JSON data structure here, so we can just write the formula without any escaping for URL or JavaScript. I'm not sure how to include the other parameters in such a setup, but we could certainly invent a suitable format. Perhaps something that looks like a simple TeX file, but gets parsed by JavaScript? In any case, that parsing imho only makes sense after #264 landed, to avoid the Python components in the mix. What do you think?\n. Disable normal updates, so we don't receive any bug fix releases or similar, just security relevant fixes. The benefit is that we don't have to pin the versions of the packages we install (which are quite numerous, with all the indirect deps pulled in), and still rely on the same versions getting installed in subsequent runs unless something drastic forces a security update to one of the packages. It's one more step towards better reproducibility.\n. True. I considered the module level variable to be easier to understand and maintain than some bind magic.\n. At some point in the past, template was the result of a call to readFileSync, so this is partly historic. But we might get back to something like this one day, for some reason I can#t imagine right now, and then the global variable is more flexible because we don't have to care where it gets set, as long as it does get set by the time processTestCase is invoked.\n. Why not leave it as it is? Do you consider that line to be so confusing? Personally, I rather get confused if some process tells me it's Done when in fact it had some errors and couldn't complete as intended.\n. Typo: it should be \u201csquashed\u201d\n. Within a single pull request?\n. Exactly. Currently it doesn't cause the script as a whole to fail (i.e. return non-zero), which would have to be changed at least if you want to run this from Travis.\n. My personal policy is that I go with nfcall if I use it in only one or perhaps two source lines, and denodeify if I call it in more different source lines, or as part of a tight loop. Can I go with that here, or should I denodeify everything for the sake of consistency?\n. ox and oy stand for offset, yes. ov is the value associated with the best offset, or to be more precise, the squared absolute value. Since that will never be negative, initializing it to a negative number ensures that the first actual pixel will overwrite that value.\n. The parenthesized parts describe a sequence of operations which is applied to some input and the result is then used as the input on the outer scope. So the first parenthesis reads the LaTeX file, converts that to grayscale and pads it to the union. The second does the same for the browser screenshot. The third takes the first two and takes the minimal gray value for each pixel. These three then form the red, green and blue channel of the final image. See http://www.imagemagick.org/script/command-line-processing.php#stack for details.\n. Sure. I don't need to create parent directories, but if you prefer extra dependencies, I can do that.\n. I don't think I can use denodeify to get access to the stderr content. If the promise gets rejected, all information from the accepting path is lost, afaik.\n. I can. In that case, the promise would return the parsed image, and almost everything in parsed would be a separate function.\n. To me, it feels conceptually close, so this was intentional. But I have no strong opinion there, createMatrix is fine with me, too.\n. Right. I wonder whether we should be streaming out those files via a TCP connection instead of a --volume mount. Or pre-create the files outside. Or anything else like this. But I see that as a separate pull request, once the core functionality is in place.\n. Can I add comments instead? I'd prefer to keep the -extent arguments in one line.\n. I don't think so, but the Python code allowed for five tries, so I sticked to that.\n. Good suggestion.\n. Yes, that makes a lot of sense.\n. In #295 I've added a makeNullDelimiter function which adds all the classes to change back to textstyle size5 so that the width given relative to that will actually be correct even if the surrounding text is scaled.\n. Sure we could do this, but at some performance penalty since we'd parse the whole image just to find its dimensions. We discussed this above and came to the conclusion that this might be overkill.\nIf you insist, I'll have to compare png-js against node-png which I tried first but which can't handle the 4bit depth required for texcmp, and against pngparse which is the replacement I'm now using in texcmp. I think it would make sense to stick to one library for all our PNG parsing purposes.\n. If you want to simplify things, we could abandon the ihdr check which is just a sanity check in any case since any valid PNG file must have IHDR as its first chunk. So we could just as well write\njs\nvar buf = new Buffer(img, \"base64\");\nreturn {\n    buf: buf,\n    width: buf.readUInt32BE(16),\n    height: buf.readUInt32BE(20)\n};\nwhich is even shorter than the version with the png parsing step.\n. The shebang has to contain a full path, the PATH environment variable doesn't have any effect. One common solution is writing it as\n```\n!/usr/bin/env python2\n```\nhoping that that's the name which is being used, and that it's on the path.\n. I had somehow assumed that the app would take care of error handling from that point onward, but that's probably an incorrect assumption. On the other hand, once the server is started, we don't want any more startup attempts, so I'll have to add that distinction to the error handling function.\n. Not really, might as well make that all nextTick. I guess that when initially writing the code, I might have been thinking about keeping things simpler by just using one function, but since I'm using nextTick in a lot of cases now, it's certainly the more appropriate choice.\n. It's not done in series, or at least not from our point of view. The tasks all get scheduled in parallel, and it's the Selenium implementation which serializes things again. Anyway, something like Q.all would be quite useful here, but introducing a second promise library into the game feels like a bad idea. Although it was just when I wrote this code that I first found out that the Selenium library even had a Deferred object. I had completely missed the \u201cTypes\u201d section of the API reference.\n. Feels like forever, but realistically it's probably the one minute commonly configured as TIME_WAIT for a TCP connection.\n. I had very much hoped that there would be something like Python's __name__ == \"__main__\" check and was very glad when I found this in the Node.js docs.\nBy the way, this is the same approach I'd like to take in Python when merging all the metrics manipulation modules into a single process: have each file be both a module and an executable script.\n. No, that was manually converted, with lots of search & replace, some macros and manual line wrapping. Will add comments.\n. I feel like this is more closely related to the test case than to the application running it. Or, perhaps phrased better, like this is more like configuration data not executable code, so it should go into the configuration file not the implementation file. When someone creates a new test case as a copy of an existing one, it makes sense to copy any special behavior as well. It is true that these settings get included in the query parameter, but having more data in there doesn't hurt anyone. I also like the idea of using the value of the mapping for a human-readable explanation of the reason why this should be blacklisted, and having it in JS entails many of the drawbacks of JSON, as exemplified by the doubled backslashes below. Simply writing that reason with little concern for syntax, perhaps even over multiple lines, makes it more readable in my opinion.\nHave I convinced you, @xymostech?\n. Sure.\n. I tend to sort built-in modules before explicitely installed ones, but that's personal preference and I'll gladly adapt this.\n. @kevinb7 I assume taht we should not put extraneous stuff in the query, right? I can make ss_data.js just include selected keys into its query property, that's easy enough. Will do so in my next commit, soon.\n. Right. Will augment my commit.\n. Hmmm. I wonder whether we one day might have errors other than parse errors. If so, having the word Parse in that name would be a useful distinction. I guess the most correct and unambiguous form would be toFailWithParseError. I'll go for that.\n. That adds a dependency on findutils. Should be no problem on *nix, but I'm less sure about what one can reasonably expect on Windows. And passing test/*/*-spec.js isn't a problem either, once we have an extra level. Even if we had to choose the recursive approach, I'd prefer a single command instead of three: find test/ -name \\*-spec.js -exec ./node_modules/.bin/jasmine-node '{}' +. But let's worry about these if we ever need to.\nWhat I found confusing during my tests was that a spec file with broken syntax apparently prevents jasmin from processing that file, but doesn't result in a non-zero exit code. So a commit might accidentially break a whole test file and a glance at the travis status wouldn't tell us about this. Will investigate and file a bug there if I can confirm this.\n. That jasmine issue can indeed be reproduced, see https://github.com/mhevery/jasmine-node/issues/379#issuecomment-155170552. It seems many projects I've seen prefer mocha over jasmine, which would handle this situation more elegantly. And jasmine-node doesn't seem to have a lot of activity lately. In fact zero commits to the main branches in the past year. If you feel like switching, let me know.\n. Looking at some assertion libraries supported by mocha, it seems to me as if chai could model the current assertion syntax most closely. So we'd have to replace the matcher implementation, but could leave the tests in place. On the other hand, unexpected sounds like it could express our semantics quite well, and in an even more readable and flexible fashion. I'm leaning slightly towards the latter. But in any case I'd like to see this PR here landed first.\n. How do you figure that? We got an unexpected }, and that is the character indicated by the position and the underline. Looks good to me.\n. To me, \u201cambiguous\u201d is less specific than \u201cdouble\u201d. And since the error message literally mentions double superscripts, I see no harm but great benefit in sticking to the wording of the error message I'm testing here.\n. I guess I felt like including some \u201creal world\u201d error scenarios. Sure, I can change that.\n. As per #387, it's only jasmine-node which is broken and unmaintained, not jasmine itself. Running tests in browser might be easier with jasmine as well. So the need to switch doesn't seem as urgent now as it did at first.\n. Why? Most projects I work with prefer === over == for its cleaner semantics and its better performance.\n. No, positions is defined as\n\nthe positions in the overall string of the function and the arguments.\n\nSo even without arguments, the position of the function itself is required. This is in line with how positions is initialized in the case of a non-zero argument count. And in any case, this is preserving existing functionality, we shouldn't change anything here as part of the new position handling.\nMoving positions into e.g. parse nodes and the likes will be greatly simplified with all these changes here, I think.\n. What's your definition of \u201cleading\u201d here? Right now I don't see how this could be possible while still getting correct spacing inside \\text{\u2026} constructs.\n. OK, I changed this occurrence. Using == for null only is certainly better than always using it. For a moment I feared I might have to change many other strict comparisons as well.\n. The \\]-\\u2027 range should already include this, since \\] is \\u005D. If you look at [!-\\[\\]-\\u2027\\u202A-\\uD7FF\\uF900-\\uFFFF] as a whole, that's almost any BMP codepoint except for the C0 control sequences \\u0000-\\u001F, the space \\u0020, the backslash \\u005C, the line separator \\u2028 and the paragraph separator \\u2029 which you might consider whitespace, the surrogate characters of UTF-16 \\uD800-\\uDFFF which are only matched if they form a complete surrogate pair, and the private use area \\uE000-\\uF8FF. So to make it short, this change should not be neccessary, in my opinion.\n. My goal was to have the error reporting in one place, and also to catch ill-formed special groups pretty early, thanks to that reOnline parameter. But I do confess that I see no compelling reason to do so. If one were to do this naively, we might get strange error messages: \\rule{2{cm}} would complain abouut 2{cm being an invalid length, instead of 2{\u2026 being an invalid length. But I don't think this is a real problem, and wouldn't try to support nested groups unless there was some good reason to do so.\n. Yes. Unless I'm missing something, I'm not actually constructing tokens without a lexer reference. But I envision that there might be situations where it makes sense to construct artificial tokens which don't actually occur in source.\nFurthermore, the parse node which results from a parseGroup call will also behave like a token, in that it will contain start, end and lexer properties. And some calls to the ParseError constructor pass in a parse node, not a raw token, so I'm not perfectly confident that every group that might end up in such a setup will actually contain the required source position information.\nDo you think I should name the argument differently, since it's not only tokens? If so, would tokenOrNode or pos be a better name?\n. Definitely not. If the input is a long sequence of whitespace, you want to emit a single space token, but you want to advance the input position past the whole sequence. match[2] would not be set at all in a match against whitespace, hence taking its length would likely throw an exception.\n. A comment is definitely a good idea. I think the term \u201catom\u201d is already used with a different meaning inside the parser. I'm not sure what the correct TeX term for a non-expandable piece of input is, perhaps I should look that up.\nI guess I'd rather not expand everything at once because one day we will get definitions. And for that to work, we need to change the set of known macros before we continue parsing. Defining macros is technically inside the gullet, I guess, so it would be possible to have some API which returns the whole expanded token stream. But implementing that is easier if we have some point where the tokens pass through one at a time, and definitions can take effect for subsequent tokens. And since the parser consumes tokens one at a time, there is little point in having a \u201cconvert-everything-at-once\u201d layer in there at all.\nPlus it might happen that in order to get scoping right, i.e. the distinction between \\def and \\gdef, we would one day welcome help from the parser to tell us when one group ends so that we can close its scope. I don't say that we should take this approach, but having it as an option feels valuable somehow.\n. Well, the whole set of current tokens is a stack, and while the push and pop methods operate on the tail of the JavaScript array, they operate on the head of the TeX token sequence. I guess that unshift and shift are more costly in most implementations, thus reversing macro bodies when they first get lexed seemed cheaper, performance-wise. Would the following be an appropriate comment to sum this up?\njs\nexpansion.reverse(); // to fit in with tail-modifying stack\n. >  I was thinking it might be clearer to have a separate function that just does the expansion art, thoughts?\nI think the function is just doing expansion, plus parsing of macro bodies from strings to token arrays. The latter coulc conceivably be moved to a separate function, getMacroBody or whatever, if you prefer. I have no strong feelings either way, as long as it's all internal API so we can change it when the need arises.\n. unget is only ever called when mode-switching, so it ungets one token immediately before requesting the next token, which will either be the same token again, or the token after the whitespace if the token was a whitespace token and the new mode ignores whitespace. So no, we need not be concerned, but yes, a comment to this effect is definitely a good idea.\n. Either that, or call the property macroExpander, me or something like that. Preferences?\n. This is all about error reporting. Ideally, we should be able to take an arbitrary piece of parse tree and highlight its corresponding source region. For this we need the start and end positions as well as the input string. And the input string is stored in the lexer, thus we need the lexer.\nWe might conceivably use just the input string instead of the lexer, both here and for Token. But using the lexer allows us to add metadata to a source string at some later point. Things like file name, or some other description of where this string came from. For example \u201cin definition of macro \u2026\u201d for source regions coming from an external macro definition string would already make a lot of sense, and be fairly easy with the current approach.\n. But we break if the next token has the given text. True, currently we only use this for ] which is a one-char token. But we couldn't break on \\ but we could break on \\\\, so token is more fitting. We could use breakOnTokenText to distinguish this from the token class, if you prefer.\n. This is the replacement for the rewininding which I deleted a few lines down. Before this change, if the next atom was of type infix, then we rewound the input stream to parse everything a second time. Now I'd like to concentrate on linear operations, with no jumping around in the input stream. Thus we have to detect an infix token before it's parsed to an atom. Thus the check above, and the addition of the matching metadata to the table of functions.\n. The MacroExpander constructor already provides a default. The Parser constructor passes settings && settings.macros. I guess that the situation where settings is undefined shouldn't really be possible with out public API. So I could just pass on settings.macros unconditionally, and avoid the default in MacroExpander as well. Yes, this should work nicely.\n. Well, the old ParseError implementation did take the first position characters, and then add a combining underscore to that. Which means that for highlighting it assumed its positions to be one-based: you'd have to take one character if you wanted to add an underscore to the first character of the string. Probably due to lack of testing, many error messages returned the zero-based position of the problem, though, since zero-based indexing is natural in JavaScript. I left the one-based indexing in the error message for now, but tried to fix the internal positions to actually highlight where the problem is, not off by one. If you look at the deleted Parser code, you will notice that some of the ParseError constructor calls have a + 1 in their position arguments, while others do not.\n. Glad you like this change.\nPersonally I liked the old one better. Which is why prior to the e3dda607afd87a8e6b62fc4135a8f4d50cbee697 suggested by @cbreeden it would report the invalid color as '#ffffff{\u2026', reporting the error in the same place as the old code did. But if you like the new message, that confirms that the code can stay as it is, with the simplifications from the commit I just mentioned.\n. The key is not just having a single position, but a range formed by a pair of positions. With that, underlining each character is a piece of cake. Although the actual rendering may show huge differences in quality depending on fonts or font rendering engines.\nIt might be possible to install some special code to pretty-print KaTeX error messages in an even nicer way for Chrome\u2026\n. But also incorrect. If you have \\def\\foo{\\bar\\bar}\\def\\bar{x} then all the tokens \\foo generates would be xx but it only expands this to x\\bar then returns the xwithout expanding the second \\bar at this point.\n. We should definitely have serif as a last item in this list, in case a user doesn't have Times New Roman installed. I'm also thinking whether we should prefer DejaVu Serif over Times New Roman (i.e. list both but DejaVu first). I think that DejaVu might contain a wider range of glyphs, and that it would be easier for site admins to legally ship a webfont version of it to ensure consistent rendering. To my knowledge Times New Roman is still proprietary, plus the version on Mac is different from the one on Windows.\n. The way I see it, these files should get concatenated by server.js since #389, so this should not be needed. Or did you actually encounter a situation where it was needed? If not, should we aim for different names for the katex-spec.js as contained in the repository and the combined one served by the server? Which one to rename? I think katex-spec.js makes a lot of sense for the combined version, so main-spec.js or similar for the single file might be better.\n. Where did those ranges come from? Adding that information as a comment might be useful if we have to extend the ranges at some point.\n. It appears that only the last of these five regular expressions is actually being used. The others are useful documentation, but perhaps better written as comments. It is particularly confusing that the cjkRegex in Parser corresponds to regex here.  Perhaps that RegExp should be shared between modules somehow?\n. Can you do this in a css class, instead of using the style attribute? A class can be overridden by the site admin by adding some more css, but a style can not (except perhaps by abusing the important flag). Or perhaps multiple classes, one for each script?\n. I think I'll go for mainitLetters, since in the context of the mathit function, the emphasis is not on italic but on main instead of math.\n. Do you want to check out a specific commit of that repo, so that you can update the fonts without breaking existing screenshots, and then can update the commit id and the screenshots in one go?\n. It is a variable, not a make goal. This argument changes the NIS variable from its default setting (a file name) to the empty string. So it essentially removes NIS as a dependency from all the rules mentioning it, thus avoiding an infinite recursion. Should I add a comment, or are comments a bad idea in a file that gets re-written by npm from time to time?\n. That's less precise than it could be: the option only deals with unsupported commands, i.e. command names we know nothing about. Other invalid input, like e.g. mismatched braces, will cause exceptions as well no matter this setting. Actually the option description from the list of options above this part is correct in this respect.\n. Personally I don't think we need to add three paragraphs here just to discuss that one option. If you think the current wording is easily misread, perhaps add some text like \u201cOther malformed inputs will always throw errors, though\u201d to the description of the option within the bullet list. If you'd like to stress the kind of thing you're fixing here, making it \u201cappropriate errors\u201d in that sentence might express that, but I guess there will be other situations we haven't considered, so I'd not add that. Having useful error messages is useful to the people who encounter them, but in my opinion not worth documenting in the README, since that file should be fairly concise. The example is in my opinion an example of how to use options in general, and we should not have one example for every option.\n. Putting both these checks in parseTree would avoid duplication. That way you couldn't include an API-level function name, but usually browsers will indicate katex.js as the source of this exception, and for those who need more detail the stack traces will likely be more useful anyway.\n. This only tests one of the two codepaths above, which will be OK if you move the checks to a single location.\nWhat's the point of the second test? If it is the array, I'd avoid the nested object. But I don't see much need for a second object-based test. null, undefined, number or boolean would make for more interesting tests, but perhaps not interesting enough to actually do them.\nSince your check you added assumes that String objects are valid input as well, we might add a test to verify that a String object as input does parse all right.\n. I'd say allow String objects but don't advertise that fact in any documentation, because it will be hardly relevant to most people. The way I see it, the distinction only matters up to the tokenization step. After that it's native strings either way. So if we have one single test case using String objects, I'd be confident that we actually support them just like we do native strings.\n. Depends on whether we want to keep this paragraph at all. If so, then yes, this would be better. \u201cmissing\u201d is still inferior to \u201cunsupported\u201d, because it could also mean commands missing from the input like e.g. a missing \\right or \\end. If we drop this paragraph, then I'd not include the \u201csuch as mismatched braces\u201d portion in order to keep the bullet list concise.\n. Just put a single test to the parser test group. Something simple like expect(new String(\"xy\")).toParseLike(\"xy\").\n. Some bits of information are in the Wiki. Other than that, I guess there hasn't been any need for more documentation so far.\n. Might be tricky: In \u2026 \\over \u2026 constructs you don't know there is an \\over to come as you parse the first part. But I fear matrices in script or scriptscript style might already be different from what LaTeX does. Perhaps always resetting the font size back to text size for the inter-column gap would be appropriate. Would have to experiment to see what LaTeX actually does.\n. That sentence no longer applies.\n. The line break here appears unmotivated, as we are well below 80 characters.\n. This is called style here, fstyle in genfrac and options.style in supsub. Perhaps we should use the same name in all three of these functions.\n. Why the line breaks? And why two distinct calls to Math.max, instead of including all of these into a single call?\n. According to MDN, Array.prototype.reduce and Object.keys require IE 9, while KaTeX officially supports IE 8. So this should probably be reformulated using something like\njs\nvar metrics = [{}, {}, {}];\nfor (var key in sigmas)\n    for (var i = 0; i < 3; i++)\n        metrics[i][key] = sigmas[key][i];\nfor (var i = 0; i < 3; i++)\n    metrics[i].emPerEx = sigmas.xHeight[i] / sigmas.quad[i];\nI wonder whether we should add some tool to our build pipeline to either catch such issues or polyfill required functionality. Or do we already have a polyfill, and I wasn't aware of it? package.json doesn't list any obvious candidates.\n. These changes are functionally unrelated and should be handled by #546 I think.\n. The script exits, as indicated by the exit 2. I guess you might be worried about the calling process, but (iirc. contrary to how Windows Batch files work) the working directory of a process has no way of affecting the working directory of its parent. So it doesn't matter what directory the script was in when it exits.. There might well be, I haven't searched. One problem is that this ties in both to our existing express app and our existing selenium session. I don't know how common such a setup is. There are many libraries which do try to determine the local IP address:\n\nip, my-local-ip, dev-ip, my-ip take first non-loopback or non-internal IPv4 address\naddress guesses interface name then runs ifconfig\npublic-ip queries opendns.com via UDP/DNS\nipify queries https://api.ipify.org/ via HTTP\nnode-local-ip returns the last address of a specific interface named by the caller\n\nGuessing interface names is non-portable, as users may have multiple network interfaces, some of them down, some of them subject to firewalling. Using IPv4 addresses only may fail for users of an IPv6-only ISP. Filtering out known local network addresses fails if the user is behind a NAT so all their addresses would be local. Using remote services would fail for NAT scenarios as well, and would be slower. Any specific address may fail due to firewall settings. Filtering out loopback devices breaks the suggested Docker for Mac configuration, where users would set up an alias address for their loopback device.\nSo on the whole I think that simply trying all addresses and picking one which actually works is far more robust than any amount of guesswork as to which address might work.. In my mind that the whole operation of the Parser is kind of atomic. Either the parsing works and returns a result, or it does not and throws an exception. In neither of these cases is the final state of the Parser object of any relevance, and I'd keep it that way.. The whole MacroExpander is working kind of backwards. It uses an array as a stack, with tokens added by lexing (one at a time) or macro expansion (may be many), and tokens removed by consumption by the parser (one at a time). The canonical way of using an array as a stack is using its push and pop methods, which modify the tail end of the array. So if subsequent pop calls should return the tokens in order, the stack itself has to have them in reverse order, with higher indices corresponding to eralier tokens. That's the reason I have two calls to reverse in there by now.\nIf this is causing too much confusion, we might add bigger comments than those we have, but I guess those would still get lost in the diffs you see on GitHub. Or we could make the stack work forward, and hope that a shift is fast enough. Or we could avoid removing elements, and instead maintain a pointer indicating the current position. Do you think any of these approaches would be better than what we have now?\nI guess that although the difference between push/pop and shift/unshift appears to be considerable, it's probably still negligible compared to the other processing we do, so I'm willing to reformulate all of this in terms of these if you want me to.\nSee https://github.com/Khan/KaTeX/pull/493#discussion-diff-68474688 for previous discussion on this.. Correct. I see declaring macros as strings as a convenience function which puts some responsibility on the people writing the macros. We'd also get problems with placeholder tokens in comments, at least if we ever introduce comments. Of course these two can cancel out: a knowledgeable developer may define a macro with an unused last argument by mentioning that argument in a comment.\nI guess in the long run we'd want to offer other alternatives. For example, we'd want a way to define a macro in the main input, using \\def#1#2#3{\u2026}. The defineMacro function @edemaine rightly suggested could handle such cases for the pre-defined macros. Strings will work for 99.8% of the relevant inputs, I guess, but for the rest we'll find better solutions.. Yes, this is but the first step.\nBut macros inside the arguments already work. Try \\underset-{\\overset+/} if you want to. That's because expansion gets triggered when a token is removed from the stack, and works by putting the expanded form on the stack. So the arguments end up on the stack, from where they will get expanded once the parser gets there. Which I think is what LaTeX does, too.\nMacros with unbalanced } in them are somewhat tricky. As far as I know, you can't really define them in TeX either, at least not using that notation. That's what \\bgroup and \\egroup are for. Come to think of it, it should be perfectly possible to use our built-in macro definition facility to define \\bgroup and \\egroup. The requirement to have balanced brackets is in the argument handling, and it's in the Parser down the line. Neither of these should matter. Will give that a try. By the way, do we care about the distinction between \\bgroup and \\begingroup?\nThe case of fixed strings in the macro definition is something @edemaine also already mentioned. I think we should do that eventually, but right now I don't even know how TeX does that, exactly. Will need to figure that out first, then I can see about implementing it. Might add a comment until then.. @edemaine sure I'd want a deque, or a proper stack. Might even ask for a decently typed language while we are at it\u2026 Well, looks like we can stick to the reversed stack for now.. I've added such a comment in 8b3f39e23cca677f02a5805b19a1c0c2c66f39c1.. Exactly. If I do \\def\\setfoo#1{\\def\\foo##1##2{##1#1##2}} that's a macro which takes but a single argument, so the string \"\\\\def\\\\foo##1##2{##1#1##2}\" should have the same effect.. In the LaTeX world if would be. In our world it's also required if you want a hex-encoded HTML color inside a macro body.. Why [^\\0]? If you want any character, including newline, you may write that as [^]. If there is some special semantics for \\0 it should be explained in a comment or the PR discussion.. How about just writing .*?\\\\4 (and likewise for \\\\3)? The use of . already excludes \\n, as well as \\r, \\u2028 and \\u2029. I think that is a reasonable fit for how TeX does this, but [\\n]*?\\\\4 would be conceivable as well. If the terminating delimiter is not found before the end of line, then this would simply fall through to the function name getting matched against \\verb, so we could define a function of that name to report the error.. How about /^\\\\verb[^a-zA-Z]/.test(nucleus.text)?. Is that symbol included in the tt font? Come to think of it, do we want to complain if the input contains any symbol not present in our tt font, as we can't guarantee consistent rendering or correct metrics for these?. What input would trigger this? Actually it might make sense to document error conditions in test/errors-spec.js.. I couldn't find any documentation about why that requirement exists. bower/bower@1c62adcdb6f09875434de2d886c23731a0bae53c just says it's following the spec, and https://github.com/bower/spec/blob/master/json.md had that line since the content got copied from Google docs.\nI can only guess that they want subsequent steps to minify the sources. The way I understand it, they might even handle modules, so specifying our main unbrowserified entry point in bower.json might work, too.. It feels a bit weird that \\verb can handle input symbols which other commands can not, e.g. \\mathtt{\u03b3} doesn't work yet, but \\verb|\u03b3| does, with a warning to console, and \\verb|\u201c| doesn't even warn. Some might argue that incorrectly displaying a glyph is better than not displaying it at all, while others might worry about breaking existing content if we start supporting these symbols in the future.\nSo far (and in the context of unicode input) KaTeX chose the latter approach: don't support input unless you can do so in a compatible fashion. So perhaps we should filter for those symbols we actually have Typewriter metrics for?\nIf we take the other approach, and deliberately allow all symbols, even those we don't have fonts or metrics for, then it might be a good idea to consider surrogate pairs in this loop here. If the input contains a surrogate pair, then we want to keep the pair intact while building a symbol node from it.. Now that we have \u2423, there should be a \\verb* in there as well. Perhaps use an array environment to provide multiple lines of content in a single screenshot.. Why the \"verb\" class? I don't see any specific styling for this. And the more classes we use in KaTeX, the more classes may not be usable by the surrounding page for their own purpose. Personally I'd even suggest prefixing all our classes with KaTeX- or some such, in order to avoid conflicts. Unless we do that, I'd be extra careful to only introduce new classes when we have to.. Yes, this version should work on all reasonable versions of GNU make, contrary to a version I had before some fixup.. I wondered about that at first, too. But it turns out that's what the screenshotter.sh script is using. So this updates the README to match the automated generation. More consistent that way.. We turn \"Lap-firefox-nq\" into \"Lap_alt-firefox-nq\". We know that the string starts with \"Lap-\" at this point, and that's what we remove. Would you prefer I change this to basename = basename.replace(\"Lap\", \"Lap_alt\") for better maintainability?. I (a) wanted them all the same width so that the test names align on output and (b) have the abbreviation letters match the words of the option. Can add a comment to that effect.. Indeed, that's something left over from how @xymostech approached this. Should be removed I think.. Actually I think I my thought was that we might have to handle other screenshots in a similar way one day. So key.length - 4 is the length of the key before I added the \"_alt\" to it. The slice is everything after that, i.e. all the things that got appended to the original key. I'll try an alternate formulation in my next commit.. Each RUN command creates a separate layer of docker file system, while commands combined into one RUN will just contribute one layer that contains their combined effect. In this case, the resulting layer should only contain /usr/share/java/batik-ttf2svg.jar, as everything else is created and removed in the same RUN. This keeps the number of layers down and the total size of the image small, in order to conserve resources.. Not necessary for the image to perform as intended, no. The goal is again to clean up all the build-time resources once the desired command has been installed, to keep the size of the layer down.. Can you please try whether a shopt -s extglob at the beginning of the script fixes this?. Not exactly. Docker uses an image as a template to create containers. So in our case the image contains all the tools we need to create a font, while the container then runs the named commands to actually perform the font creation. You can use the same image to build several fonts, instantiating one container each time you do so. The commands are executed once inside the container constructed here, but the file system that results from running these commands is not preserved, contrary to how images work.. Well, we can make that just cover http for now, or use [[ \"$1\" = http://* ]] || [[ \"$1\" == https://* ]] if we can't get this glob syntax to work as intended.. I'll check whether running the tool on my system will modify them again or not.. A container is an instance, yes. Container is to image like process is to executable file.. Why use a transform instead of solidus.style.left = '0.778em'? Shouldn't that do the same thing?. This commit increases the size of the gzipped file by about 4.5k, and I guess it is most likely due to this command here. Not that I'm objecting \u2013 switching to ES6 is of little value unless we actually start using some of its features. But we should be aware of this cost.. Why an XML escape sequence instead of a JavaScript one? I disabled the CSS rules which ide our MathML, and sure enough, Firefox renders the escape sequence as is, instead of the symbol you meant.. So \\not is a symbol and a function? Somewhat confusing, I think. Better add a comment there, indicating that this line isn't all there is to that command.\nWhy do you use the combining version of the glyph, instead of the plain /? After all, you're not combining with anything, and I'm not sure whether placing a combining character without a base character is sufficiently well specified to ensure consistent rendering across systems.. Just a though: Here the name describes how the group works, but not its role. Perhaps positioning-root or something to that effect would better characterize what this is about. On the other hand, it's overly verbose, so perhaps not.\nOne thing worries me (and has been worrying me for quite some time now): you introduce yet another class with specific meaning, and if the site into which we embed this class has other ideas of what that class name might signify, our element might receive some strange styling. This name in particular isn't too likely to get styled in a strange way, but I'd still be careful with every new class we introduce, as each such change might break some site.\nPerhaps we should write a less plugin to add some prefix to all our class names. That way we could use these same prefixes when building our trees, and simply tell page admins not to use any classes starting with that prefix for thir own purposes. kt- would be my prefix of choice, I think.. I think this test should ensure that a) ending a group restores previous color and b) ending a \\textcolor does return to the previous implicit color. Something like\ntex\nbl{ack\\color{red}red\\textcolor{green}{green}red\\color{blue}blue}black. Next time do the review before the merge\u2026 But yes, we should fix this on master, and it doesn't really matter for the 0.7 branch. I guess I'll wait till 0.7.1 is released, just in case there is anything else that needs to be changed.. I've been asking myself this very question just now. Benefit of doing so is that we get more up-to-date information on the release branch: updated URLs, updated sri hashes, updated version number. The downside is that we'd have one more commit on the branch, but actually that might be seen as a benefit, too, since otherwise it's hard to place the release in the line of development. Do we want to enforce using a second argument?. That's the idea, yes. We have an set -e -o pipefail in line 3 to achieve that. One benefit is that since this is a git command invocation, it will be printed instead of executed in dry run mode, so we can continue there even if the check for uncommitted changes up front (the one with command git) fails.. Hmmm\u2026 I'd consider these files to be internal to KaTeX' codebase. Now we have a dependency here, which means that the contributed auto renderer may need to be adjusted when and if the files you reference get modified. It also means duplicating some code, as browserify would include those files into both its outputs. So I'd check very carefully whether that's worth the cost.\nYou're including utils for utils.dflt. The main benefit of that it that it falls back to the default whenever the argument is undefined. But the values expected here are arrays. Which means that a simple || might work just as well. If you consider util.dflt I would rather copy&paste that one function than having the inter-dependency between code bases.\nI'd advise against a Settings object. That class is used internally, but the external interface is a simple object (oten a literal) called options. I see no benefit in using a Settings object in the public interface, and a ton of problems if we ever decide to add stuff to Settings.\nJust my 2\u00a2.. The fact that you are modifying the agument passed to this function might lead to ugly surprises in some rare situations. Using extend to create a clone with one modification would have been a nice alternative, so I wonder whether it might be better to keep that function around.. Nit prick: we have 4 spaces of indentation everywhere else, so please conform to that. In some places we have the closing ) on the same line as the last argument, but that is already inconsistent.. I'd prefer katex.render(node.text, katexinline, {displayMode: true}), i.e. using the DOM renderer instead of innerHTML and using the displayMode option instead of a \\displaystyle as part of the formula. Unless you have a good reason to do otherwise. displayMode improves vertical spacing around the equation, and render to DOM might in the future allow some tricks that are impossible when rendering to string.. The exact match here looks very restrictive, with respect to spacing or additional parameters. Do you have any reference how MathJax matches its types?\nPersonally I've used code like this before:\njs\nvar scripts = document.body.getElementsByTagName(\"script\");\nscripts = Array.prototype.slice.call(scripts);\nscripts.forEach(function(script) {\n  if (!/^text\\/(x-)?([lk]a)?tex($|;)/.test(script.type))\n    return;\n  var display = (/;mode=display($|;)/.test(script.type));\n  var elt = document.createElement(display ? \"div\" : \"span\");\n  try {\n    katex.render(script.text, elt, {displayMode: display});\n  } catch (err) {\n    console.error(err);\n    elt.textContent = script.text;\n  }\n  script.parentNode.replaceChild(elt, script);\n});\nThis is not compatible, since it dies not allow a space at all, and it requires a mode= before the display. But it may contain some useful suggestions, e.g. supporting a wider set of possible types, or handling errors by printing the equation as plain text instead. Since text/tex is not a registered MIME type, using it without a leading x- is probably violating some standard or other.. The update-sri.js invocation in release.sh should take care of this. Please check it does, by writing a garbled hash then running release.sh --dry-run and verifying that the README has been modified to match the built file.. I'm not sure about the name. On the one hand, most MathJax users will probably use delimiter-separated text like \\(\u2026\\) instead of scripts, while at the other hand it makes a lot of sense to use scripts even when you are originally writing for KaTeX. I do so myself. So the name should concentrate on TeX code contained in <script> elements, not on the fact that MathJax happens to support that same approach.. I guess so. I wonder why the old version works at all in KaTeX. Suggests something is wrong there. Might be worth having a separate ticket for that.. ",
    "edemaine": "I believe we can safely close this old issue. We now support a lot of Unicode, especially in text mode. Any specific missing features should open a new issue.. Can't this be done in the Lexer?  Just add comment pattern to the regex, but don't return upon a comment match.. IMHO, if $x%y$ causes x%y to get passed into KaTeX, then that's a mistake: that second $ shouldn't be considered a terminator when it's hidden by the comment.  Of course, that is how it works now with auto-render, but in my opinion that's a bug in auto-render.\nI guess I can't imagine a setting where x%y really makes sense as input to KaTeX, so I'd be OK with requiring a \\n at the end of the comment regex.. @kevinbarabash <textarea> would be very handy when testing arrays and such, thanks!\nYou should test spacing behavior:\nlatex\n\\text{hello% comment\nworld}\nshould parse like \\text{helloworld}, but not like\n```latex\n\\text{hello% comment\nworld}\n``\n(oops, moving this discussion to #884). Revitalizing this issue after discussion in #792.Options.jshas an extensivecolorMapwith commentTODO(emily): Remove this when we have real macros, andfunctions.jshas an extensiveSingle-argument color functions(\\blue, \\orange, \\pink, \\red, ...).  These could both be easily replaced with a macro object like:\njavascript\n{`\\\\blue': `\\\\textcolor{#6495ed}{#1}`,\n ...}\nor, in macros.js,\njavascript\ndefineMacro(`\\\\blue', `\\\\textcolor{#6495ed}{#1}`);\n...\nWhat remains unclear to me is where these macros belong.  They're not commands in LaTeX (except in many author's preambles), so my intuition says \"not in base KaTeX\".  Maybe this is a good test for plugin infrastructure as discussed elsewhere?  If we made defineMacro accessible to the outside world (e.g., as katex.defineMacro), then we could make a ka-colors.js or katex-colors.js plugin, perhaps in a new plugins directory or just contrib.  When included in a project, you'd get those macros automatically, instead of having to pass them in.  Thoughts?. @konn It's still being implemented; you can see #140 for the current state of things.. @mhchem FWIW, KaTeX currently supports \\phantom and \\llap (not sure exactly when they were added).  \\vphantom and \\smash might be possible, though in general KaTeX isn't an expert at vertical mode, so it'd help to see an example of what you need.\n@gagern Maybe we could extend function support to specify that an argument should be parsed and the parse tree gets passed into the function, to do with what you will?  (This is similar to \\expandafter, which I assume is how \\ce is implemented in LaTeX.). For align/align*, I'd say #604 is my current approach (as opposed to aligned/aligned*). Sadly I still haven't gotten to doing it, though there I've written code in another project to do it.\nFor equation numbering, the first step would be to implement \\tag (#899).  There's a question there that could use your feedback.  I haven't thought deeply about adding automatic numbering, but it seems plausible to do once we have \\tag.... #604 is roughly along those lines.\nWe could also have some kind of shared state between invocations of render, with variables etc.  This is similar to #687 (\\setlength), but also for \\setcounter; it's also similar to the already specified macro mapping.  One could imagine that you pass in the counters map (initially {equation: 0}), then this gets incremented when equation numbers get used, then the new mapping gets returned.  Perhaps it would be most natural to actually modify the passed-in counter map?. @ronkok I believe you have by now added most of this functionality using the new Unicode symbol system, so this old PR can now be closed. In particular, I observe that \u03c3 \u2208 \u211d now renders correctly in the KaTeX demo!\nI notice a few extra symbols here, e.g., all the double-struck letters instead of just the typical ones, C/H/N/P/Q/R/Z.  I assume you followed that approach because of what LaTeX supports?  That may be the right approach.... Cool. I think this approach is abandoned, so I'll close the issue, but it will of course remain here for glancing at its list of characters.. @prlbr You can definitely add a custom macro for yourself that maps \\cfrac to \\dfrac. I'll have to look at adding  proper support... . \\cfrac is defined as follows in amsmath.dtx:\nlatex\n%    Continued fractions. The optional arg l or r controls horizontal\n%    placement of the numerators. The |\\kern-\\nulldelimiterspace|\n%    is needed in the definition if we want the right-hand sides of the\n%    fraction rules to line up. The \\cs{strut} keeps the numerator of\n%    a subsidiary cfrac from coming too close to the fraction rule above\n%    it.\n%    \\begin{macrocode}\n\\newcommand{\\cfrac}[3][c]{{\\displaystyle\\frac{%\n  \\strut\\ifx r#1\\hfill\\fi#2\\ifx l#1\\hfill\\fi}{#3}}%\n  \\kern-\\nulldelimiterspace}\n%    \\end{macrocode}\nLaTeX defines \\nulldelimiterspace=1.2pt.\nIgnoring the optional [l]/[r] argument, and the \\strut which is not yet supported, a more accurate macro for \\cfrac would thus be\nlatex\n\"\\\\cfrac\": \"\\\\dfrac{#1}{#2}\\kern-1.2pt\"\nHowever, I find that this still doesn't right-align the fraction lines, unlike LaTeX.  Any ideas why there's a discrepancy here?\n\nScreenshot of http://localhost:7936/?text=%5Ccfrac%7B1%7D%7B1%2B%5Ccfrac%7B1%7D%7B1%2B%5Ccfrac%7B1%7D%7Bx%7D%7D%7D&\\cfrac=\\dfrac{%231}{%232}\\kern-1.2pt\nAh, experimenting a little, it seems that \\kern-2.4pt is exactly right.  This suggests that we're doubling the space somewhere in \\frac or \\dfrac...\n\n. Why not use .npmignore different from .gitignore?  NPM will use .npmignore instead of .gitignore if one is available.. Oops, I see.  Bower pulls directly from Git.... Perhaps \\raisebox would be a good way to go for these macros, once #685 is complete.. @kevinbarabash Here's another blast from the past (though maybe should be re-reviewed after your \\not PR, #140).  I guess the hardest part will be rebasing to address conflicts.  Also need to implement the few small comments that you already responded to, and the missing tests.  I guess this also predates texcmp so we could compare with that to see how the rendering is (but it looks like you followed LaTeX's computations, so it's probably pretty good).. Just checking in on this.  It looks like most of @gagern's comments were implemented already, but @kevinbarabash probably has a better idea of what remains.  How about we make \"add prefix to CSS classes\" a separate issue/PR?  I agree that that's important, but shouldn't hold back this PR (IMO).. To my surprise, LaTeX defines \\not as a symbol, not a function with an argument:\nlatex\n\\DeclareMathSymbol{\\not}{\\mathrel}{symbols}{\"36}\nSo \\not{x} is enclosing x in a group.  y isn't doing anything special in \\not{x}y.  The issue is that x+\\not renders without a space before the + because \\not is a mathrel.\nI wonder if we could just mimic this, making \\not expand like \\mathrel{<the not symbol>}?  Can this be done purely in symbols.js?. I tested just having your line\njavascript\ndefineSymbol(math, main, rel, \"\\u0338\", \"\\\\not\");\nand here's what I got in make serve:\n\nThis actually seems pretty close to what we want -- the only issue is that the \\not is rendering to the left instead of to the right.  I assume this is a bug in the font, given that it works in LaTeX but not here?. For some reason I'm unable to actually merge this.  Feel free to do so if you can.... I did, but it wasn't clickable, which I hadn't seen before.  Presumably a temporary glitch.  Anyway, glad you fixed it.. I think a screenshot test would be useful in particular so it's easy to run texcmp to compare.  I'm particularly curious about the use of \\text -- does \\operator@font really switch to text mode, or just a roman font?  E.g., what happens to spaces or math-only operators inside \\operatorname?  (Maybe \\text should just be \\mathrm.)\nlatex\n\\def\\operator@font{\\mathgroup\\symoperators}. Ah, I see, that makes sense.  What about spaces (do/should they appear in output?) and math-only commands (not sure KaTeX enforces those)?. What I meant was, \"what does LaTeX do with spaces in \\operatorname?\"  Unfortunately, the answer is that \\operatorname eats spaces, as if in math mode.  So it's not exactly \\text mode, but partially...\nIt still might be worth defining \\operatorname in the way you suggest, as a temporary solution, given that it works in most cases...\n(\\limsup isn't the point here, as it's going to be defined with explicit spaces in it.). git commit -n will fix short term.  Be sure to delete pre-commit from .git/hooks not hooks.. @kevinbarabash Welcome back! . Is there a difference between \\hspace and \\kern, in either math or text mode?  If not, I can throw together a macro-based PR.  Here's a list of various horizontal spacing commands, which we should review for support.. OK, so here's the difference: \\kern supports units mu and ex only, and no plus or minus arguments, whereas \\hskip/\\hspace supports lots of units and plus/minus arguments.  I don't see plus/minus as important in KaTeX (it's not like we have boxes whose width we can adjust), but supporting other units would be important.  \nIncidentally, most other commands listed above work fine in KaTeX, including the very useful \\quad, \\qquad, and ~.. @Casyfill If you want \\hspace to work now, try defining a macro mapping it to \\kern.  \\kern is essentially behaving like \\hspace now, and will work with units of em and ex.  \\kern should behave differently, and I'll work on a PR to that effect, but this is a good stopgap for now.\nWe're also working on unit support on #732, which is still a work in progress, and has some discussion about best way to do it -- feel free to join in.. To clarify, #833 added basic support for \\hspace (everything except plus and minus). I'm also looking at supporting \\hspace* (as an alias to \\hspace).. I'm new to this thread.  Neat hack!\nIn terms of workarounds, it seems that adding \\begin{aligned} ... \\end{aligned} around your multi-line text would also be good.  OK, to get left justification of each line, you have to add & to the beginning of each line too.  But this input looks pretty good on the KaTeX tester:\nlatex\n\\begin{aligned}\n&p_1 = some\\ point, \\\\\n&p_2 = some\\ other\\ point, \\\\\n&distance = (p_2 - p_1), \\\\\n&ratio = \\frac{percentage}{100}, \\\\\n&new\\ point = p_1 + distance \\cdot ratio\n\\end{aligned}\n\nI was surprised to learn that \\\\ and \\newline work in math mode in LaTeX.  Note, however, that they do not work in display environments ($$...$$ and \\[...\\]) -- or rather, they compile, but don't break the line.  (Their definition must be overridden by those environments.)  They do work in $\\displaystyle ...$ though.\nAnyway, it seems that the way to implement this would be to somehow transform line1 \\\\ line2 into the equivalent of \\begin{aligned} &line1 \\\\ &line2 \\end{aligned}.  I think this could be done via the infix operator mechanism in Parser.js... though I'm not quite sure how it would work with multiple \\\\s.. Yes, of course \\\\ works inside {aligned} -- that's how that environment is supposed to work.  It works perfectly in KaTeX too!  What surprised me is that \\\\ works outside any sort of array/tabular environment, (but not in \\[...\\]).. @anirudha-banerjee No, this hasn't been worked on yet. (You're certainly welcome to try yourself!) \nIs there a reason you don't want to use aligned? There is another new environment in progress called alignedat but I'm not sure it will be any different for your application. . @anirudha-banerjee Yes, KA uses MathJax when KaTeX fails.\nOK, good to know there's applications.  I'm interested in working at this at some point, but don't know when I'll have time.. PR #1298 implements \\\\ and \\newline at the top level of inline math.. @tivewsalaeharad Please open a new issue, and include an example of the LaTeX code you're expecting to wrap that isn't (maybe with a screenshot).. Just bumped into lack of \\implies.  This should be easy once #605 gets merged.. Sounds good.  Alternatively, we could include \\DOTSB in the macro definition, and also include a macro definition for \\DOTSB that maps to the empty string.  (Technically, AMS defines \\DOTSB to \\relax.  I suppose you could add that layer of indirection too.)  That should set the stage for support in #599 (which currently already looks for \\DOTSB as well as \\implies and \\iff, FWIW, but not yet in the macro expansion stage).. Yes, I think so.. @ronkok Great!  I can turn this into a PR if you'd like.. PR: #697. Thanks for revitalizing this old issue, @kevinbarabash .  MDN says \"The MathML <mn> element represents a numeric literal which is normally a sequence of digits with a possible separator (a dot or a comma)\".  So I'd be happy with leaving a - (or +) outside the <mn>, and just concatenating strings of <mn> and one (or more) <mi>.</mi>s.\nWe could similarly combine multiple primes, e.g., in groupTypes.mrow.  Maybe a good target after #788.. Fixed by #974 (thanks to previous additions of \\kern and \\raisebox, and computing offsets on-the-fly from font metrics).. I've been thinking about exactly this, and plan to work on it. I'm not too worried about functions, because macros can override them, but we need similar functionality for environments (this is #977) and we will need it for lengths too (#687). The approach to avoid duplication is for each environment to have a parent pointer, which at the root level is the built-ins. This slows down lookup slightly if you're several groups in, but I imagine it's how TeX (and Python, Javascript, etc.) does it as well.\nFor equation numbering (and defs) across multiple calls to KaTeX, I imagining that we can pass in an initial global environment to use, and it gets updated for the next call. All conceptually coming together! But will take some time to implement. . Out of curiousity, have you thought about going straight from the parse tree to HTML canvas, via a renderCanvas.js alongside renderHTML.js, instead of this specialized HTML -> Canvas approach?  Is that what you mean by \"a proper solution\"?. I just bumped into this.  (I know \\rm is deprecated, but it's still so much shorter to type than \\mathrm{...}.)  These old (LaTeX 2.09) font commands are defined in article.cls as follows:\nlatex\n\\DeclareOldFontCommand{\\rm}{\\normalfont\\rmfamily}{\\mathrm}\n\\DeclareOldFontCommand{\\sf}{\\normalfont\\sffamily}{\\mathsf}\n\\DeclareOldFontCommand{\\tt}{\\normalfont\\ttfamily}{\\mathtt}\n\\DeclareOldFontCommand{\\bf}{\\normalfont\\bfseries}{\\mathbf}\n\\DeclareOldFontCommand{\\it}{\\normalfont\\itshape}{\\mathit}\n\\DeclareOldFontCommand{\\sl}{\\normalfont\\slshape}{\\@nomath\\sl}\n\\DeclareOldFontCommand{\\sc}{\\normalfont\\scshape}{\\@nomath\\sc}\nThe last argument is how they behave in math mode.  For example, \\rm xxx behaves like \\mathrm{xxx} in math mode but \\normalfont\\rmfamily xxx (not supported by KaTeX) in text mode, whereas \\sl xxx behaves like \\textsl{xxx}.\nIdeally these could be implemented in terms of macros, though I'm guessing that #605 would need modification to allow requesting an \"inline\" argument, like how sizeFuncs and styleFuncs are currently parsed.  @gagern Is this something that would be reasonable to implement, or should we just implement these font-changing commands directly in Parser.js?  (We'd also need different expansions for math mode and text mode -- not sure if that's already supported.). Fair enough.  This was surprisingly easy to implement (#675) -- unfortunately, because existing font commands (e.g. \\textbf) are implemented as if they are full-reset commands (like \\bf), whereas they are only supposed to set one aspect of the font.  That's for another issue... (#676). @ronkok followed through on this plan, and we now have much more nuanced/careful support for most Unicode symbols.  Closing this PR which represents a simpler approach, and the epic discussion that resulted.  If you have more symbols to add, I suggest opening new issues or PRs, in a style similar to @ronkok's recent several PRs.. I was surprised to find no \\multicolumn support, which lead me here.  I was further surprised to see that arrays are rendered column by column instead of row by row, which seems to make supporting \\multicolumn ... challenging.  What was the rationale for this decision (perhaps #587? i.e. lack of horizontal space spacing information? or perhaps getting columns to center easily...)?  Do you have any ideas on how to implement \\multicolumn?  I was hoping that array was implemented using HTML tables, which would make \\multicolumn especially easy... but might make it harder to match LaTeX spacing?. I didn't realize CSS table support was so weak (it has no colspan feature), so we'd really need to use <table>/<tr>/<td> tags, and then we'd definitely need to reset their CSS in a careful way.  In particular, we don't want any actual line wrapping within a cell.  It's probably worth some experimentation to see whether it can be reliable for our case.  Otherwise, to do it manually ourselves, I think we really need horizontal metrics.. Here is a simple illustration of making \\multicolumn using column-based <div>s, using some overlapping <div>s.  Unfortunately, I believe this requires knowing whether the columns or the multicolumn are wider, so we know which one to use to define the parent width -- I don't think there's a mechanism to take the max.... @flagxor What do you mean? Something like \\parbox[t] for top or bottom alignment of the containing box?  I'm not aware of such an argument in array but maybe there's an extension to this effect.\nWhere could we find the source for the example in http://flagxor.github.io/spec/core/bikeshed/index.html#store%E2%91%A0 ? The MathML seems to be stripped, so I can't see the LaTeX source.... \\hline support is now on master, thanks to @ronkok and #1306.. I implemented \\color and \\textcolor as in the color package: #619.  (Except that I didn't mess with color parsing, and there's still no \\definecolor.)  Are there other differences?. I guess we could add an explicit\njs\ntry {\n  ...katex.renderToString...\n} except (e) {\n  if (!instanceof(e, katex.KaTeXError)) {\n    throw e;\n  }\n  ...do something with e...\n}\nexample block, though I'm not sure how helpful that is.  Also, perhaps #1169 solves this problem for most people / they can look at that code?. @varunagrawal Do you mean \\sim? This has been available for a long time. You can also use \\tilde{} (probably what was originally meant by this issue) though the spacing seems a bit off.. * Gradescope\n Facebook Messenger\n Presumably some Khan Academy stuff :-)\nJust discovered this list.  I agree that a section of the README would be cool: this will really show the importance of KaTeX.  Maybe just a comma-separated list of linked titles would be a good start (though of course images/logos would be cooler, but harder to maintain).  . I added most of the explicit examples above in #1569.  Exceptions:\n http://algebra.js.org/ mentions how to use it in conjunction with KaTeX (for rendering the output of toTex()), but I don't think it directly uses KaTeX.\n http://acko.net/blog/mathbox2-pt2/ seems to be in the same category\n* I haven't gone through the many NPM dependants.. Just bumped into this old issue while searching for something else.  Now that we have macro support, what would remain is supporting \\mathpunct (as @gagern wrote) and \\nonscript.  (TIL \\nonscript, which is specific to glues!)  Neither is especially high priority, but could be fun to implement.. @kevinbarabash @mbourne In fact, that's how it's supposed to render, using LaTeX as a reference.  It renders the first matrix as follows:\n\nYou can improve the situation, in both LaTeX and KaTeX, by providing an optional argument to \\\\.  For example:\nlatex\n=\\begin{pmatrix}\n    \\frac{1}{5} & \\frac{5}{12} & \\frac{7}{20} \\\\[0.5em]\n    \\frac{1}{5} & \\frac{1}{6} & \\frac{1}{10} \\\\[0.5em]\n    \\frac{1}{5} & -\\frac{1}{6} & \\frac{1}{10}\n  \\end{pmatrix}\n. Agreed. So KaTeX is already \"correct\"!. @hagenw That's more likely to do with #824.. LaTeX supports automatic line breaking for inline math.  Here are some experiments:\n```latex\nHere is a long line of text.\nHere is a long line of text.\nHere is a $x+y+z+w+a+b+c$. % auto breaks after z+\nHere is a long line of text.\nHere is a long line of text.\nHere is a $xyzabcdefghijklmnopqrstuvwxyz$.  % doesn't auto break\nHere is a long line of text.\nHere is a long line of text.\nHere is a $xyzabcdefghij\\allowbreak klmnopqrstuvwxyz$.  % auto breaks at \\allowbreak\n```\n\nIn my opinion, this aspect would be super useful, and is maybe what was originally requested.  We should try to implement it, with proper line breaking rules (only after ops?).. #1287 is a first stab at doing line breaks for inline math (not display math). Testing would be appreciated!. PR #1287 is merged; feel free to test it out on the master branch.  So the inline case is done.  I'm going to close this issue, as issue #1023 covers the display case (in my opinion -- feel free to make alternate proposals if you'd like).. I had forgotten how \\KaTeX must be hard-coded in texcmp. Given the recent change in logo, we probably need to change this. . @upupming Please open a new issue, along with the text you're trying to render (in addition to the screenshot). Thanks! . I've definitely found the CSS solutions a bit hacky. It's impressive what they've been able to do, but e.g. it led to the bug #995 (now fixed by a workaround).  Adding styles to the elements would feel closer to LaTeX, and it's still server-side/synchronous.  And it would enable the user to override things like \\thinmuskip, which is possible in TeX but impossible in KaTeX (you can't override the CSS).  (Not that this particular functionality is important, but it feels a bit weird to bake so many lengths into CSS.)\nI like @kevinbarabash's approach. Incidentally, what KaTeX calls VLists (and HLists?) are what TeX calls vboxes and hboxes, I believe.  So again this feels nicely close to TeX (and we might consider renaming to match TeX).\nI think the main worry here is that, by adding another layer of indirection, we might slow down KaTeX rendering somewhat.  We'll probably want to do some speed tests before spending a lot of time in this direction.  But overall it seems like the natural approach to enabling SVG etc. output.\nI have one other vague concern.  I'm not a fan of the current implementation of tables (array), in particular because it makes \\multicolumn impossible (see #269).  LaTeX finds a way to implement them with hbox/vboxes, so presumably it's possible... but if we end up using CSS tables or flexbox or something to fix this, the IR might also need some kind of Table structure.. It looks like KaTeX supports \\int, \\iint, \\iiint, \\oint, but no variations with more is.  They are all implemented as symbols in the font.  I checked esint which implements \\oiint, and it also uses symbols in a font.  So I think to address this we would need to add symbols via the fonts repo.. This can be closed now, thanks to #582, right?. @3axap4eHko Looks cool!  Should we link to this from https://github.com/Khan/KaTeX#libraries ?\n  . @FirdousNath Check out #1155. Just bumped into this older PR.  Looks like everything was good to go, and just needs a rebase and review?. I did more reading of the various unicode PRs.  I'm a little confused about what the latest/best approach is, but it does make me wonder whether this one will be necessary...  Intuitively, defineSymbol ought to define both the unicode and \\command version of a symbol.  But the other work shows that the font's notion of which unicode symbol it is is not always what we want.\nPerhaps we should add another option argument to defineSymbol that gives the unicode character that should be recognized as this one?  And then go through symbols by hand?  Greek could still be the initial testing ground.. It looks like there's an error with the screenshot.  Can you regenerate?. Just bumped into this as well. The problem is this code in the speed test:\nhtml\n<link href=\"http://xymostech.com/katex/katex.min.css\" rel=\"stylesheet\" type=\"text/css\">\n<link href=\"http://xymostech.com/katex/fonts/fonts.css\" rel=\"stylesheet\" type=\"text/css\">\n<script src=\"http://xymostech.com/katex/katex.min.js\"></script>\nIt would work if it could be changed to:\nhtml\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.css\" rel=\"stylesheet\" type=\"text/css\">\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/fonts.css\" rel=\"stylesheet\" type=\"text/css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.js\"></script>\n. @mbourne Great examples! (And wow, what a speedup -- I get 25x on desktop and 50x on mobile.)  Helpful also to have the bad examples.\nI tried the cross product example and, while it indeed looks bad in KaTeX and good in MathJax, it actually looks the same as KaTeX in PDFLaTeX.  (See also #594.)  Another solution would be to change the \\\\ into \\\\[0.5ex] for example, which works in LaTeX and KaTeX (didn't try MathJax).\nOn the other hand, Maxwell's Equation looks much better in LaTeX than KaTeX, so that's a bug (#531).\n\\overrightarrow is coming soon, I hope (#524).  \\underset seems feasible, but no concrete plans yet (#484).. Oh, do you have access to change the jsperf test?  I thought we had to make a new one.  I think jsperf would be better/good in addition -- it has trustworthy measurement technology.. It is possible to add very basic support for \\begin{equation} ... \\end{equation} by specifying a custom delimiter in auto-render. For example:\njs\nrenderMathInElement(document.body, {\n  delimiters: [\n    {left: \"$$\", right: \"$$\", display: true},\n    {left: \"\\\\(\", right: \"\\\\)\", display: false},\n    {left: \"\\\\[\", right: \"\\\\]\", display: true},\n    {left: \"\\\\begin{equation}\", right: \"\\\\end{equation}\", display: true}\n  ]\n});\nSee https://codepen.io/edemaine/pen/EpNamj for a demo.\nHowever, equation numbering isn't supported yet; #350 tracks that.  Note that manual numbering via \\tag is possible, though.. @edigleyalexandre You can add support for $ by adding another delimiter to the list.. @edigleyalexandre Can you be specific about an example of $...$ text that doesn't render?  I tried adding an example to your page, then running the same renderMathInElement, and it worked fine.  You might be running into the ignoredTags setting, because you have $...$ text inside <code>...</code> elements; see https://github.com/Khan/KaTeX/tree/master/contrib/auto-render for documentation.\nP.S. @ronkok Probably meant display: false as in {left: \"$\", right: \"$\", display: false},. I wrote copy-tex, and it would probably not be hard to write a similar extension that overrode some click behavior to reveal the source code.  I think it'd be fine to include such a feature as a KaTeX contrib extension, but agree that it doesn't belong in the \"base\" KaTeX (because that doesn't do any client-side JavaScript).  @netw0rkf10w are you interested in writing such an extension?  If not, I can give a try, though I'm not sure what the best behavior would be.. Recently got a feature request for this.  I think the right approach is probably to add to our font, as in https://github.com/KaTeX/katex-fonts/issues/28. @msridhar Any updates on this?. FWIW, I too was confused by this.  Effectively, the option is \"throw on use of incorrect \\command\" -- not what I expected.. Fixed by #1169.. @cbreeden This PR recently reached its 1-year anniversary!  It looks like this was almost done -- just needed screenshots.  Let me know if you want help with those.. Now that #482 is implemented, is it worth implementing this as a manual function? Or worth waiting for macro support? Maybe a slight extension to #493 will allow us to add macros in the KaTeX source too?. 0.7.0 has macro support (just tested).  Some documentation should be added to README.... @gagern Oops, right.  I'm already using it via NPM, so I forgot.\nNice documentation.  If I might make a suggestion, it could help to mention something like \"custom macros\" to introduce the concept, before/while talking about the format.  (I don't seem to be able to comment on the diff until it's a PR, so I'll put this here).. @gagern Looks great! And thanks for the Github tip!  I'm still learning.... @balthild It probably makes sense to discuss this in a separate issue, but while it's here: Yes, you can bind a macro to a JavaScript function.  See src/macros.js for some examples.\nHowever, you cannot really have a TeX macro with two or three arguments like that.  Normally you'd define \\pdv for single derivative and \\pdvv for second derivative.  The latter would be doable in TeX once we have \\if conditionals (see #1003); meanwhile, you can use JavaScript.. Maybe KaTeX could support this as a feature in autorender?  See also #604.. I've implemented AMSMath's behavior in #599, aside from one spacing issue I could use help with (described there) -- is there an easy way to add some positive or negative horizontal space next to a symbol returned by a function?. Should be fixed by #670. Please reopen if you're still having trouble.. I believe this issue is now fixed / can be closed.. 0.7.0 published yesterday! (thanks to @xymostech). The NPM module has minified code in dist as usual.  Do you mean the lack of CDN update?  I'm not sure why that is -- perhaps takes a while?. @xymostech See above questions. Sorry if my announcement was premature!. @xymostech I still don't see 0.7.0 on CDN.  Is that supposed to be instant, or do we just need to wait a while?. @ronkok Indeed, those warnings are because the symbols aren't in the fonts.  But thanks for pointing out how to do italic upper-case Greek letters!\n@MaxNoe How would upright lower-case Greek letters be done in LaTeX?. @ronkok Where are you getting the Times New Roman font metrics?  I worry that different browsers/operating systems will have different fonts/metrics so this is not really possible in a platform-independent way.  My guess is that this is why, so far, KaTeX has stuck to using its own fonts, and complaining about any symbols not in the fonts.... We're only talking about 24 glyphs here, right?  So it seems to make sense to solve it at the font level...\nThere's a bigger question of whether we might want to support in-browser fonts by some in-browser measurement or something.  That'd be a nice intermediate solution for \"all\" missing symbols.... I fixed the width of space in the typewriter font, I believe, but I guess the others could use adjustment. I don't think LaTeX has these characters in its fonts (it uses glue), so it makes sense that they need manual adjustment. . @kevinbarabash's PR #1029 already did this, as part of the Unicode accent revamp. I just double-checked that it works on master (but not on the demo site, which I guess is using an older version). Forgot there was an old issue about it!. @jeanm I just tested, and you're correct: Command \\boldmath invalid in math mode.  (Though maybe not terrible to add support for it within math mode...)  AMSMath's \\boldsymbol and/or \\bm seem like reasonable goals too.. Apparently there is also fixmath's \\mathbold. Here's a visual comparison. \\bm is probably the right decision, given that AMS recommends it.. Seems a shame to lose server-side renderability... though I don't actually need it for my own project.\nI'm certainly curious, like @ronkok, whether the desired features can be done with some clever HTML+CSS hacking (maybe without even manually measuring, via width:100% etc.?).\nOtherwise, the infrastructure seems in place to measure the symbols, for everything that has font metrics...  Presumably supporting these features only when the symbols have metrics is a reasonable compromise.. fontMetricsData.js provides widths for over 1700 symbols, so wouldn't it be worth at least supporting width-based commands when only those symbols are in use?  (Sorry if this is obvious: What symbols are currently possible in KaTeX but don't have defined widths?  Unicode?  All of \\text?)  Then we could imagine measuring widths dynamically for other content, as a future extension...\n@ronkok Very impressive hacking!  I'm having a bit of a rendering issue on both Chrome and Firefox on Windows, though.  Here are some screenshots.  Chrome hides part of the integral sign:\n\nFirefox doesn't have that issue, but hides some of the arrows and braces:\n\n. Wow!! Very impressive.\nThis one looks wrong to me (on Chrome on Windows):\n\n(and same for the lower-case ac example)\nAnd this one looks a little heavy to me:\n\nBut all the others \"feel right\" (though I haven't compared to LaTeX yet).  Except possibly the narrow braces?\nHmm, maybe I'm having a different problem, because the integral and summations look funny:\n\n. @ronkok That part's fixed now!. I no longer see any glaring issues, except the lack of minimum width for braces.  Nice work!!\nIdeally, it would be nice to see this side-by-side with compiled LaTeX output.  Do you have the LaTeX source that generates these examples?\nI was curious about how small braces behave, so I tried the first braces example in LaTeX:\n\nNot sure how your brace differs from that... will it be fixed by a minimum width?  I'm also a little confused why the \\oint symbol and the \\overrightarrow accent looks different.  (I like yours better -- perhaps I need to include a different package than amsmath?). New min-width braces look great!  Also just tested the site on Android Chrome on my phone, and all looks great.  (Not sure I have a non-retina display to test on... though I could probably emulate one.)\nRegarding \\overrightarrow, I think you should try to match the output of LaTeX from some package inclusion, as reproducing LaTeX output is (as I understand it) the intended gold standard of KaTeX (so that, e.g., you could port your path over to LaTeX, or vice versa, and get expected results).  I tried mathtools, and it didn't make any changes, but there may be another package that does.  This discussion is relevant.  The esvect package offers almost too much choice.  This discussion suggests it actually depends on the font, so maybe you do have leeway...\nI'm also a little unhappy with your current \\sqrt{\\overrightarrow{AB}} rendering, which has a lot of vertical space between the \\sqrt symbol and the \\overrightarrow symbol.  Here's how it renders in LaTeX, for comparison:\n\n. Awesome!!  I think the only remaining issue is the arrow glyph in \\overrightarrow.  Curiously, The Comprehensive LaTeX Symbol List shows the arrow more like yours.  It looks like \\usepackage{MnSymbol} changes the arrows, but in yet another way.  Wow, messy.  Maybe they're using one of the esvect glyphs... OK, I'm more convinced now that there's leeway in which arrow glyph to choose.  So maybe time for a PR?. OK, actually read the Notes this time.  (Sorry I missed them; it is a long page!)\n My initial leaning would be to put all the SVGs into CSS, so that the set of KaTeX files remains the same.  How much larger would this make the CSS file?\n I forgot about the \\quad bug.  This seems strange to me.  Did you look at the parse tree to make sure it's parsing as intended?  Assuming \\boxed is a command in commands.js, I don't see why this would happen...\n Regarding optional arguments, perhaps you could do something different when not using an optional argument, and inline SVG only when using an optional argument?  (The same could be said of color.)  Hmm, does this mean that the SVGs get repeated in both CSS and JavaScript?  I wonder if they should just be embedded into JavaScript, and then KaTeX makes <style> tags in the generated HTML (these would share between multiple instances in the same math environment, but not across environments...).\n Licensing: If all the SVGs are embedded into CSS (or JS), it might be nice to include the license details in LESS using a comment that disappears in the output CSS.  So the license is in the source, but not elsewhere.  Or at least have one big description of them all at once, instead of repeating (easier once they are all in one file).\n* Regarding widths: Yes, that's how all this got started.  I don't understand why there aren't width metric data though.  I'd hope that this could get fixed.  #632 seems relevant.\nOnce the dust settles, I might be able to help put together a PR, though it might also be good skill building for you to learn the tools.  (I myself learned all of those things in January.). @glebm Very cool! I think the problem with this approach is that KaTeX still needs to know vertical measurements internally, and this only gets the DOM to know it (impressively so, though!).  I'm not sure I know fundamentally why this internal knowledge of heights is needed -- maybe KaTeX just overuses absolute coordinates -- but it's definitely used a lot within the code, so it'd be substantial work to switch to a pure relative coordinate system.  Could be worth the effort, though.... Implemented in #614, following @gagern's suggestion.. #614 was merged. . Personally I'd love for it to at least be possible to turn off the MathML generation via an option.. @kevinbarabash Good point.  Here is more discussion by one of the leading math editors on Wikipedia: MathML considered harmful. He agrees that LaTeX source doesn't provide enough context to really infer the semantics, and that it's kinda useless as a presentation medium.. Regarding your \"stabilize the parse tree format\", maybe a good starting point would be to try to document the existing parse tree format.  I've certainly found it a challenge to work out from the code that uses it, and perhaps writing it down would make it clear how to make it more regular.  For example, it seems \"op\" is pretty overloaded, e.g. it's the only way (?) to return a symbol from a function (even if the symbol isn't an operator) -- though perhaps that's more of an issue of how functions work -- and it seems to put them in the wrong font (?); see https://github.com/Khan/KaTeX/pull/599#issuecomment-270488107. It's maybe worth mentioning that KaTeX also produces a hidden <annotation encoding=\"application/x-tex\">...</annotation> within the MathML that includes the LaTeX source.  Not sure whether this helps with screen reading, but in any case we shouldn't remove it.  (Would be great for copy-paste support, for example...)  Also, do screen readers deal well with presentation MathML (as currently generated), or do they need semantic MathML?\nSeems like one of us should give some screen readers a test drive to see how this all works.  I take it a reasonable combo is NVDA and MathPlayer?. ~~Ah, I realize that this would also require including the static/fonts directory in the NPM distribution, or a different NPM distribution like katex-fonts if you think it's too big to include by default.~~ Never mind: I see that fonts are in there already!. It's not an issue for me anymore, as I found a workaround (I copy the CSS while doing a regex operation to change references to the font directory).  I think it could be nice to include static/*.less in files in package.json.  (One could argue that *.less should even be in the src directory...)  But not a big deal either way.. Sorry, \\dots request is a duplicate then.  I'll try to implement the amsmath behavior, but continue discussion on #528.. P.S. If I understand symbols.js correctly, \\ldots is already defined to be the unicode codepoint U+2026.  So should both \\textellipsis and \\mathellipsis do the same?. [clabot:check]. Hmm, I'm having another problem.  Even with the PR code as is,  which returns a symbol similar to existing \\bigvee, rendering \\dots gives me a warning:\nNo character metrics for '\u2026' in style 'Size1-Regular'\ngroupTypes.op() seems to set the fontName to 'Size1-Regular' or 'Size2-Regular', but I don't understand how fonts work, so I'm not sure whether this is correct...  \\ldots works fine, using font 'Main-Regular' I assume.  The warning is problematic as it leads to the character being higher than intended.  (Same thing with \\cdots+ which expands to \\cdots+.)\nRelatedly, I'm vaguely worried that my \\dots macro is returning an type: \"op\" instead of a type: \"inner\", but maybe that's OK...  (As I understand the existing function infrastructure, it would be impossible to return a type: \"inner\" with a string as a value.)  Not sure whether this will affect spacing, though.. Seeing macro support in #605, I wonder if it would make more sense to have \\dots expanded at the macro level, so that it can literally expand to an \\ldots, \\cdots, \\!\\cdots, \\cdots\\,, etc. and be reparsed accordingly.  This is how it works in TeX, of course.\nBut currently functions can't return strings.  Does this seem like a good direction to go?  If so, I can try.. Yeah, op is pretty magical/special. \nHow crazy would it be to add support for returning a string from a defined function, and having that trigger macro expansion? That's exactly what I want here... (\\dots returning \\ldots or etc.)  Alternatively, adding support for Javascript functions in a defined macro... . @gagern What if I moved this from a function to a macro, adding support for functions in defineMacro?  I think that would be the right place to do this, assuming macros have nextToken defined...  (In TeX, there are no functions, only macros...). I checked the amsmath code, and it uses \\expandafter, so I believe we want the next unexpandable token from the final stream (latter).  Relevant definitions:\nlatex\n\\let\\@xp=\\expandafter\n\\DeclareRobustCommand{\\dots}{%\n  \\ifmmode \\@xp\\mdots@\\else \\@xp\\textellipsis \\fi\n}\n\\def\\FN@{\\futurelet\\@let@token}\n\\def\\mdots@{\\FN@\\mdots@@}\nIn general, though, I think we might need either one -- a plain \\futurelet without these \\expandafter shenanigans probably wants the very next token in the input (former).  But maybe we can use direct access to the lexer in this case, via a context object.. Ah, you're right about \\expandafter.  See this tutorial.  In that case, actually, just getting the next unexpanded token from the lexer would do pretty well in our case, because we have so few macros, and rather have lots of functions and symbols.  The \\expandafter in \\dots is to get the \\DOTSB etc. at the beginning of macros (which tell \\dots what type of dots to be), but given that all our symbols are implemented via a different mechanism, this feature isn't critical to support in \\dots at this time.\nAnyway, I'd like to request that #605 be extended to allow a JavaScript function in defineMacro, which gives access to at least the lexer (presumably via a context object).  Then I can move this PR to use that instead.  Once \\expandafter is also supported (which doesn't sound too difficult...), I can use it in \\dots too.. Sounds good; please reinterpret my request as features for a future follow-up to #605, then.  I agree that waiting for #605 to be approved first might make sense.  Then you or I can look at the requested extensions.. @kohler Nope, still need to revise this to work with new macro parser. \\dots remains unimplemented in KaTeX. . Definitely not correct.  There were various issues, described above, with building the parse structure directly.  Macros should let it actually expand to \\cdots or \\ldots.. Should be replaced by #794.. I'm new here, so I don't know the exact problem, but I observe that character 9633 (\u25a1) is defined in style AMS-Regular but not in style Main-Regular in src/fontMetricsData.js.  Confused why this isn't automatic via metrics/extract_ttfs.py.  (Also, can you set a style somehow?). Finally tracked this down.  See #609.. @kevinbarabash In local testing, that was indeed the problem.  I see that KaTeX has a warning for quirks mode; maybe it can also have a warning for XHTML mode?  (And maybe someday XHTML support... if that is important.). Reading @gagern's post more carefully, adding some zero-width spaces when limited quirks mode detected (as described by @gagern in https://github.com/Khan/KaTeX/pull/602#issuecomment-270891096) seems a reasonable approach (though the CSS issues sound... exciting).  It isn't quite clear to me where this would be required.  I tried adding &#8203; to every span in http://alumnus.alumni.caltech.edu/~jon/frac.html and it didn't fix the frac issue...\nAnother question is whether limited quirks is that important.  We could instead suggest that people \"upgrade\" to XHTML 1.0 Strict, XHTML 1.1, or XHTML Basic 1.1 (DTD options that don't match limited-quirks mode).  Hmm, the differences seem severe, e.g., no <iframe> support.  So maybe not a great outcome.. Indeed, fixing the root issue seems preferable!  Let me know if you'd like this PR revised anyway.. TIL \\dfrac.  Also, mathtools.sty defines dcases that behaves like the current KaTeX cases, and nccmath.sty defines darray that behaves like the current KaTeX array.\nIn addition to fixing {cases} to switch to text mode, we need to fix {array} similarly.  (AMSMath's \\cases is defined in terms of LaTeX array, which switches to text mode and then uses $ to switch back, hence the text mode.). Fix in #606.. Is there a reason that this PR never got merged into master?. Thanks @kevinbarabash !!  I'll have to look back at my other pending PR requests which were blocked on this.. I'd be happy to do it, but you'd have to teach me how. :-). Thanks @gagern!  The testing was quite revealing indeed: it seems that it really is important to have an ordgroup containing the cell, and then wrap a styling around that; otherwise, $+1$ renders like ${}+1$ (with too much space) inside an array cell.  Not quite sure why exactly, but the fix was easy enough, and the result is that all screenshots are exactly as they were.  (Relatively few tests run in display mode, so none of them were encountering the wrong behavior of displaystyle within an array.). @kevinbarabash Added.  I also tested against the tex renderer, but there is still some spacing discrepancy (green is LaTeX).  I don't think this is related to my patch, but should test more...\n. Confirmed: the tight formatting is consistent with master branch.  The test doesn't lie within 1024x768 in master, because of the bug being fixed (\\fracs render in display mode), but the screenshot still drives the point home:\n\n. Here is the example from #603, first rendered in display mode by this PR:\n\nFor comparison, here is the rendering of the same example with display mode turned off (from YAML):\n\nThese look identical to me except for a top vertical space, presumably caused by the difference between inline and display math.  I confirmed this by overlaying the images in Photoshop.. @kevinbarabash Let me know if you'd like any more changes to this branch.  I'm pretty sure nothing has changed from master other than the intended display -> text style change in cells.  In particular, all previous screenshot texts (which include some text-style {array} and {cases}) are rendered exactly the same as master, even though I'm still putting in a styling node that converts every cell to text style.  (Though now that I mention this, perhaps I should avoid the extra styling nodes in this case?  LaTeX \"has\" them, but needlessly inefficient here I guess.). FYI, it seems the context doesn't keep track of whether we're in display style or text style (only math vs. text mode), so the array environments can't detect whether it's necessary to explicitly switch each cell to text or display style.  This is probably fine (as I said, I think it's effectively the same as what LaTeX does), but if you want more efficiency in the parse tree, I could look into adding the current style to context...\nI'd like to add *{10} from #269, but I should wait for this to be merged into master.  FYI, I just resolved conflicts by updating to ES2016.. I like the idea of a limitedQuirksMode option, whose default tries to detect current browser behavior (and false if server-side).. Hmm, seems we lost track of this.  Needs some rebasing/conflict resolution and possibly fixing of Unicode screenshot tests?. This should be the same issue as #600.. I implemented your comments.  (Thanks @gagern!)  The last issue seems to be the space character in \\verb*, which isn't in the mathtt font.  Any ideas on how to fix this?  Can we add it to the font, with proper spacing, somehow?. Rebased.  Personally, I think we could merge this PR into master now, and turn the missing character into a separate issue.  But I understand if you'd rather wait, or remove \\verb* support until then.. @kevinbarabash I get the following error:\nmake ttf eot woff woff2\nperl makeBlacker 15 # values between 10 and 30 seem best\nEditing mftrace\nCan't read '': No such file or directory\nmake: *** [lib/mftrace-modified] Error 2\ncaused by the following code in makeBlacker:\nsub editMftrace {\n  my $oldMFTRACE = $MFTRACE_PATH;\n  $MFTRACE = \"./lib/mftrace-modified\";\n  print \"Editing mftrace\\n\";\n  open(MFT,$oldMFTRACE) || die \"Can't read '$oldMFTRACE': $!\\n\";\nI can confirm that there is no lib/mftrace-modified.  How does this get generated?. @gagern Thanks for updating the font!  The fontMetricsData.js you committed has trailing commas which eslint doesn't like.  Should I be rebasing to es6 branch or new master, or should that be fixed upstream?  (Presumably shouldn't fix it manually...)\nI agree that the space in \\verb| | is too short.. Indeed, looks like characters 2018 and 2019 were added to the typewriter font by someone else in the meanwhile.  I assume those should be preserved.  (Have you all been keeping your MathJax-dev repository in sync?  It's a little disconcerting that I'm manually merging an autogenerated file...)\nFor reference, here's the diff:\n```\n<<<<<<< HEAD\n        \"2018\": [0, 0.61111, 0, 0],\n        \"2019\": [0, 0.61111, 0, 0],\n        \"8242\": [0, 0.61111, 0, 0],\n=======\n        \"8216\": [0, 0.61111, 0, 0],\n        \"8217\": [0, 0.61111, 0, 0],\n        \"8242\": [0, 0.61111, 0, 0],\n        \"9251\": [0.11111, 0.21944, 0, 0],\n\n\n\n\n\n\n\nff241b1... Include space symbol in typewriter font, and fix single quotes\n```\n\n\n\n\n\n\n\nwhich I'm merging to the union\n\"2018\": [0, 0.61111, 0, 0],\n        \"2019\": [0, 0.61111, 0, 0],\n        \"8216\": [0, 0.61111, 0, 0],\n        \"8217\": [0, 0.61111, 0, 0],\n        \"8242\": [0, 0.61111, 0, 0],\n        \"9251\": [0.11111, 0.21944, 0, 0],. I was still getting \"No character metrics\" warning for \u2423 until I realized \\verb was using Main-Regular but needed to use Typewriter-Regular.  Fixed.  Now I properly get a warning that space () has no character metrics defined, so maybe the fix is to define character metrics for it?\nSomewhat related, I also get that * is not in the Typewriter font, which seems like an odd omission.  Maybe worth reviewing which ASCII symbols are missing and adding them appropriately?. Oops, * was failing only in \\verb, not \\texttt.  I needed to switch \\verb to text mode instead of math mode.\nTypewriter font needs character metrics defined for space (32) and for no-break space (160).  (I realized that \\verb maps spaces to no-break spaces.). @kevinbarabash \\verb seems to ignore \\scriptstyle and \\scriptscriptstyle in LaTeX: they all appear at full size.  $\\verb|a b|\\scriptsize\\verb|a b|$ matches the glues from \\texttt:\n\\mathord\n.\\hbox(6.11111+0.0)x15.74986\n..\\OT1/cmtt/m/n/10 a\n..\\penalty 10000\n..\\glue 5.24995\n..\\OT1/cmtt/m/n/10 b\n\\mathord\n.\\hbox(4.27777+0.0)x11.15639\n..\\OT1/cmtt/m/n/7 a\n..\\penalty 10000\n..\\glue 3.7188\n..\\OT1/cmtt/m/n/7 b. @kevinbarabash \\displaystyle, \\textstyle, \\scriptstyle, \\scriptscriptstyle are for math mode.  \\Huge, \\huge, \\LARGE, \\Large, \\large, \\normalsize, \\small, \\footnotesize, \\scriptsize, \\tiny are (I think primarily) for text mode.  \\verb is fundamentally a text-mode command, I guess, despite working in both modes.  All a little confusing -- while \\scriptstyle and \\scriptsize sound like they correspond, I have no idea which size command corresponds to \\scriptscriptstyle...  I can see where the LaTeX size commands are defined (size##.clo) but I'm not sure how TeX defines the font sizes for style commands.. I see, so \\textstyle, \\scriptstyle, and \\scriptscriptstyle are all relative to the current text size.  E.g., in 10pt mode, \\large switches to 12pt, which increases \\scriptstyle and \\scriptscriptstyle by 1pt each.  Neat.... FWIW, it looks like KaTeX (in Styles.js's styles) follows the .7 and .5 ratios in all cases, instead of referring to this table for special cases.  Cleaner this way, but for full LaTeX compatibility this could change...  (I think the reason for it might be archaic, namely, fonts looking better at integer sizes instead of random sizes.). @gagern With all your recent experience with fonts, do you know how to fix the space character in typewriter mode?  Although, I'm not sure whether that's an issue with this \\verb patch, or an issue with tt in general.... Revitalizing this PR:\n Rebased\n Implemented space support via manual spacing (like LaTeX does, but unlike how we deal with spaces elsewhere in KaTeX).\n* Fixed the issue I brought up earlier that \\verb ignores the style and only handles the size, and updated the screenshotter test to confirm this.\nHere's a texcmp:\n\nI did not check whether characters are in the font, and rather rely on the warning that KaTeX produces about missing characters (see @gagern's old review, first comment).  I'm not sure this is best.  If someone agrees, I'll work on it.  (I think I'd need to make a very simple custom lexer for the \\verb string, and then mimic a small subset of parseSymbol.). @kevinbarabash Sorry for the delay (been tied up lately), and thanks for the reminder.  Just merged with master, and added one commit addressing your comments.  Hopefully good to go now.. Thanks! Sorry for the screenshot oversight. . It is all symbols in symbols.js of font \"ams\" and type \"textord\". . Cool!  I just merged with master and moved to ES2016 style.. No problem!  Now you should be able to close #600, #609, #512, and #374!. As I understand it, this is the only way to change color in LaTeX.  There are other packages, e.g. xcolor, but they build on the same basic interface.. FWIW, MathJax defines a color extension that changes the behavior to match LaTeX.  I suppose KaTeX could do the same... though personally I think it makes more sense to match LaTeX and MathJax+color.\n(Also FWIW, to fix those KA expression, you just need to replace \\color with \\textcolor...  But I don't know how hard that is to do globally.). @xymostech Another thing we could do is add an oldColor or colorIsTextColor option to the options set, to enable backwards compatibility mode.... @gagern Good idea.  We could suggest defining a macro '\\color': '\\textcolor' in release notes to 0.8.0, assuming it gets approved at all.  I'll just reiterate that I think it's good to use LaTeX as the reference model.  Even if MathJax is the reference model, it offers both options.. @xymostech or @kevinbarabash, could we make a decision here?  I see two reasonable options:\n\nLeave \\color as is (two-argument function) because it's compatible with MathJax without any flags.  But provide an option that switches \\color to behave as in LaTeX, just like MathJax does.\nChange \\color to make it compatible with LaTeX (one-argument function changing current group).  But provide an option that switches \\color to behave as in MathJax (i.e. old behavior) for (somewhat manual) backwards compatibility.\n\nOption 1 has the advantage of backwards compatibility without option changing.  Option 2 is preferable to me because KaTeX's mantra is/should be \"renders just like LaTeX\".  But it would probably require a significant version increment.\nIn both cases, we can provide \\textcolor which behaves just like LaTeX, because that should unambiguously be a two-argument function.. Cool, thanks, @kevinbarabash !  That's almost what this PR does.  Preference on calling the option oldColor or colorIsTextColor or something else?. 4dd21a7 adds a colorIsTextColor, documentation in README, and parsesLike tests that confirm the exact behavior of \\color in the three cases (no specification, and colorIsTextColor set to false or true).. No worries -- big decisions are hard!  Thanks for reviewing + merging.. Any way the font metrics data could be updated to include horizontal metrics?  Relevant to #587.. Ah, cool.  So that is already part of this PR.  I'm not sure what the optimal timing is, but it sounds like #587 could already use this info.  If we want to continue to hold on this PR, I guess we could make and commit new metrics for the old fonts, before switching to new fonts.. I do think it'd be good to get horizontal metrics in, so that we can start playing with box sizes (though I'm not really sure when I can start on that).  Would it make sense to use a separate repo for fonts, so that we don't worry as much about increasing the size of this one?  Or switch to fewer font formats as suggested by @gagern?. FWIW, I just read this Atlassian article about how to deal with large binary files in a Git repo.  I learned about lots of options, though I'm not sure I have a specific proposal.  Submodules could be a way to do multiple repos, but also increase use complexity.... Are you suggesting using a docker to build eot, woff, woff2 files?  I think that's fine as a way for people to update the fonts when the fonts change, but I don't think it should be required for users not playing with the fonts.  I.e. doesn't fix the \"font changes influencing repo size\" issue.  But maybe that wasn't your point.\nBack to the repo size issue, I feel like the shallow checkout of another repo dedicated to fonts seems reasonable.  Will this affect npm, bower, CDN?. See #585.  I'm afraid there isn't a way to do it until then (though I didn't try the latest release and its Unicode support... e.g. perhaps \\textbf{\u03b1} works? no).. Agreed.  It's curious because TeX doesn't support double superscripts ($x^a^a$ is invalid), presumably so that ambiguities like $x^a_a_b^b^c^d_d$ don't need to be resolved.  Also, $x^a'$ produces a double-superscript error.\nHa, check out the definition of ': it checks via \\futurelet whether the next symbol is ^, and merges the superscripts in that case.  Also checks for following 's which KaTeX already does.\nlatex\n\\def\\active@math@prime{^\\bgroup\\prim@s}\n{\\catcode`\\'=\\active \\global\\let'\\active@math@prime}\n\\def\\prim@s{%\n  \\prime\\futurelet\\@let@token\\pr@m@s}\n\\def\\pr@m@s{%\n  \\ifx'\\@let@token\n    \\expandafter\\pr@@@s\n  \\else\n    \\ifx^\\@let@token\n      \\expandafter\\expandafter\\expandafter\\pr@@@t\n    \\else\n      \\egroup\n    \\fi\n  \\fi}\n\\def\\pr@@@s#1{\\prim@s}\n\\def\\pr@@@t#1#2{#2\\egroup}\nSo we just need to modify the prime handling in Parser.js to check for ^s in nextToken as well.  Once we hit ^, can call handleSupSubscript, and then prepend the \\primes to the superscript.. Fixed in #636.. I'm afraid not -- I'm pretty sure that 0.7.1 is a tweak to 0.7.0 which predates PR #636.  It will be in the next release.... I agree that $ could be put into functions... but the same could be said of sizeFuncs, styleFuncs, and presumably even \\begin and \\left (all currently in parseImplicitGroup).  I think the idea is that the numArgs model of arguments in functions.js doesn't \"fit\" these implicit groups so, even though numArgs: 0 ought to do the (zero) preparation we need for these functions to do the appropriate magic to the parser... it seemed like it should belong there?  Perhaps @xymostech could comment on preferred style?  (It looks like she wrote parseImplicitGroup initially.)  Is there a reason not to add an implicit flag or something to defineFunction support?...\nThanks for pointing out switchMode -- I missed that, as I was modeling after https://github.com/Khan/KaTeX/blob/master/src/Parser.js#L654-L670 (for no particular reason).  I wonder whether that manual assignment to this.mode is correct?  Anyway, I've switched to switchMode in $ handling, and now various spacing around the $ works.  (I had caught \\text{a$b$ c} but missed \\text{a$ b$c}!)\nI haven't touched MathML support yet, but your plan sounds like a good one.. I finally got around to revising this.  Rebased to master, and reimplemented the MathML outputter so that x+\\text{some $y+\\text{some $z$}$} now renders as:\nxml\n<mrow>\n  <mi>x</mi>\n  <mo>+</mo>\n  <mrow>\n    <mtext>some\u00a0</mtext>\n    <mstyle scriptlevel=\"0\" displaystyle=\"false\">\n      <mi>y</mi>\n      <mo>+</mo>\n      <mrow>\n        <mtext>some\u00a0</mtext>\n        <mstyle scriptlevel=\"0\" displaystyle=\"false\">\n          <mi>z</mi>\n        </mstyle>\n      </mrow>\n    </mstyle>\n  </mrow>\n</mrow>\nwhile x+\\text{yes} renders as:\nxml\n<mrow>\n  <mi>x</mi>\n  <mo>+</mo>\n  <mtext>yes</mtext>\n</mrow>\nCode is relatively clean.  Time for another review!. P.S. Perhaps it would make sense for styling nodes in MathML to check whether the style has actually changed -- and use <mstyle> if so, and <mrow> otherwise?\nP.P.S. This patch also fixes some old weird MathML behavior, which rendered \\text{yes} as <mrow><mtext><mi mathvariant=\"normal\">y</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mtext></mrow>.  Now it renders as <mrow><mtext>yes</mtext></mrow>.. @kevinbarabash The MathML tests do seem to have revealed a bug in the new code.  I believe indeed that <mi>\u03a9</mi> should be <mi mathvariant=\"normal\">\u03a9</mi>.  Now that I see that \"normal\" means \"roman not italic\" (for single characters), I understand that part of the old code better.  Will fix...\nError we're looking at: `Expected 'Ax2k\u03c9\u03a9\u0131+Ax2k\\omega\\Omega\\imath+' to contain '\u03a9'. @kevinbarabash But now I see they're not perfect.  Here's an example:\n1) A MathML font tree-builder should render \\mathbb{Ax2k\\omega\\Omega\\imath+} with the correct mathvariants\n  Message:\n    Expected '<span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"double-struck\">A</mi><mi>x</mi><mn>2</mn><mi mathvariant=\"double-struck\">k</mi><mi>\u03c9</mi><mi mathvariant=\"normal\">\u03a9</mi><mi>\u0131</mi><mo>+</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Ax2k\\omega\\Omega\\imath+}</annotation></semantics></math></span>' to contain '<mn mathvariant=\"normal\">2</mn>'.\nBut that MathML looks good to me -- <mn> has a default mathvariant of normal so it doesn't need to be set in this case.  Easy enough to fix, though -- they key is to check that it doesn't contain <mn mathvariant=\"double-struck\">.. I changed the mathvariant generation code to only emit when it doesn't result in the default output.  I had to change the tests accordingly, but this generally seems preferable.  Before \\mathit{A} and A generated different output; now they both generate <mrow><mi>A</mi></mrow>.  (But \\mathit{\\Omega} and \\Omega still generate different output.). I just looked this over and all comments were addressed.  As I recall, there are no outstanding issues.  Shall we merge?. @kevinbarabash Thanks for the review!. Agreed.  A nice plot of actual jsperf data, say, would be good.  This PR is merely \"best we can do with least effort\".. @ronkok In my application, there is a mix of text and math, with several equations, and I'd like to be able to copy/paste the entire thing (or some subset).  Clicking each equation would be tedious, and also somewhat counterintuitive...\nYour message prompted me to look up the HTML5 clipboard APIs. Amusingly, Section 3.3 gives our exact motivation:\n\nMathematical information: With content such as mathematics, simply copying rendered text and pasting it into another application generally leads to most of the semantics being lost. MathML often needs to be transformed to be copied as plain text, for example to make sure \"to the power of\" is shown with the caret \"^\" sign in a formula plain-text input. The XML source could also be placed in the clipboard with the appropriate transformation occurring at paste time.\"\n\nIt's a Working Draft, but e.g. the copy event has support in Chrome, Edge, Firefox.\nUnfortunately, I don't see a way to make a <span> render specially when copy/pasting a region that includes it...  I confirmed in testing that the copy event is thrown only at the document level.. MathJax has a related issue, https://github.com/mathjax/MathJax/issues/1350, where they complained about the doubled copy caused by MathML.  It seems there is a pure CSS solution to this subproblem as in this commit.  We should probably do this at a minimum.. Relatedly, if we set a style of user-select: text on the <annotation> element, the LaTeX code will appear in the copy/paste.  However, I've been unable to get user-select: none to prevent the HTML from copy/pasting.  MDN points out that \"Selection can contain these elements.\". I figured out how to do copy/paste mangling via a custom copy event handler.  Here's a jsfiddle demo.  I'll suggest this as an optional add-on in contrib.  (PR #813). I find it odd that the documentation doesn't mention the outer styling.  How about rephrasing as follows?\n\nWhether the expression should be typeset inline (false, the default), meaning that the math starts in \\textstyle and is placed in an inline-block); or display (true), meaning that the math starts in \\displaystyle and is placed in a block with vertical margin.. Cool, yeah, that was one of my additional goals. \ud83d\ude04 . How about this for correct English?  I believe $...$ and $$...$$ are normally referred to as inline math and display math, which is what we want to parallel here. \"Mode\" might also be a fine replacement, if that's more standard?\nWhether the expression should be typeset as inline math (false, the default), meaning that the math starts in \\textstyle and is placed in an inline-block); or as display math (true), meaning that the math starts in \\displaystyle and is placed in a block with vertical margin.\n\n@tabatkins Do you want to modify your PR accordingly, and then @gagern or I can merge?. @xymostech What if we added \"centered\" before \"block with vertical margin\"?  The outer styling sets both.  I'd also be fine with just \"centered block\" -- I agree that is the primary point of display math.. KaTeX does not require web / web browser; it only requires Node.  However, the output is HTML, so you would need an HTML/CSS renderer of some sort to display the results.  Hopefully that fits within what you can embed.... I would lean toward one object -- much easier to use as a caller.  I'm pretty sure we can avoid naming conflicts, and I could imagine future scenarios where it'd actually be useful to have the same option configuring both the auto-rendered and the main code (e.g., options to toggle/reroute warnings or errors).. @alexpearce It looks like you're still modifying the given renderOptions argument before duplicating it (see @gagern's comment).\nA new comment: Do you think ignoredTags should be part of the renderOptions argument?  It seems odd to have both arguments now.  To keep backwards compatibility, we could detect when renderOptions is an Array and treat it as a spec for ignoredTags.. @alexpearce Sorry, on the last read through, I missed that you were calling Object.assign at the outer level.  That's probably enough, unless we want to allow not specifying a display value for one of the delimiters.  (See review.)  Unclear that would be useful, though.\nYes, I am suggesting changing the function signatures on the child functions to just one options, instead of manually passing around the delimiters and ignoredTags, which are already in the options object.. @alexpearce Do you have some time to implement the comments?  Particularly important that the renderOptions get copied before being passed into AutoRenderSettings.  I could do the refactoring of delimiters and ignoreTags as a separate PR if it's not clear what I'm asking for.. Looks great!  I assume you've tested this latest code in active/actual use?  (It looks like we have automated tests of splitAtDelimiters but not auto-render in general.). I noticed there's a sample index.html file (linked to in the documentation), and ran that on this branch, and all works well.\nIncidentally, I had to make the following tweak to make this code run in-place.  In particular, because auto-render.js uses require, it can't run directly in a browser -- you need to run the compiled version.  Should we add this tweak too?  I can add a PR.\npatch\ndiff --git a/contrib/auto-render/index.html b/contrib/auto-render/index.html\nindex 566c147..e0291c4 100644\n--- a/contrib/auto-render/index.html\n+++ b/contrib/auto-render/index.html\n@@ -3,9 +3,9 @@\n   <head>\n     <meta charset=\"UTF-8\">\n     <title>Auto-render test</title>\n-    <script src=\"/katex.js\" type=\"text/javascript\"></script>\n-    <link href=\"/katex.css\" rel=\"stylesheet\" type=\"text/css\">\n-    <script src=\"./auto-render.js\" type=\"text/javascript\"></script>\n+    <script src=\"../../dist/katex.js\" type=\"text/javascript\"></script>\n+    <link href=\"../../dist/katex.css\" rel=\"stylesheet\" type=\"text/css\">\n+    <script src=\"../../dist/contrib/auto-render.min.js\" type=\"text/javascript\"></script>\n     <style type=\"text/css\">\n       body {\n           margin: 0px;. FWIW, oberdiek's colonequals implements \\colonequals (and \\ratio etc.) via \\vcenter.  I imagine implementing \\vcenter in KaTeX would be on the tricky side, though #637 is related.. The \\raisebox solutions seem pretty good, actually -- because they use ex measurements, they should scale reasonably to other font sizes.  However, KaTeX doesn't actually support \\raisebox.  \\raisebox would be useful for #224 (\\LaTeX) too.. I looked a little closer at mathtools which implements a centered colon very simply as\nlatex\n\\def\\vcentcolon{\\mathrel{\\mathop\\ordinarycolon}}\n\\providecommand\\ordinarycolon{:}\ni.e. just \\mathrel{\\mathop:}.  In LaTeX, this centers the colon:\n\nIn KaTeX, \\mathrel{\\mathop:}= and := seem to render exactly the same (with the colon not centered, like on the right).  Is this a known issue?. I found where this behavior is implemented in TeX: Documentation of \\mathop\nWhen the argument to \\mathop is a single character, it gets centered vertically.  Perhaps this could be implemented by tweaking buildHTML's groupTypes.mclass (when group.value.mclass === 'mop'), e.g. using the in-process \\raisebox implementation (#685).\nAnyway, I think we can split this issue into two: define \\colonequals to mean \\mathrel{\\mathop:}= (#727), and fix \\mathop to vertically center single-character arguments (#725).. This looks like a nice feature to add, but we should first merge #656 which provides a general framework for defining options; then we can add an errorCallback to the options object.. @j-lenoch #656 finally landed.  (Sorry for the delay.)  Can you try to merge your feature addition onto the current master branch, e.g. via git rebase and resolving the conflict?. Fix forthcoming in #684.. \\tag looks relatively easy to add support for.  But do you need \\label and \\ref too?  That is probably more difficult, because of KaTeX's limited support for text mode.. Adding a warning toggle seems reasonable; I can imagine various situations where the caller doesn't want console messages.  There are also the \"No character metrics\" warnings.  Would it make sense to have a global warnings setting that defaults to true, and use that?  If so, I can do a PR.. @kevinbarabash That's what I was imagining... though I'm not sure exactly what's best here.  Presumably these tests are testing functionality other than KaTeX, so all KaTeX-related warnings would be annoying.... I realize a problem with my suggestion: the quirks mode test is currently done at the top level of katex.js, not when calling render.  That early, there wouldn't be an options object to check for a warnings: false setting.  What do you think about moving the warning into the first call to render (and maybe also __parse...?).. @Rokt33r @pyramation Would you be willing to try this slightly tweaked version of Jest to confirm that it removes the KaTeX warning?  I'm not very familiar with Jest, so it's tricky for me to actually test, but discussion on https://github.com/facebook/jest/issues/3299 suggests that this will fix it.  If it works, I'll submit it as a PR to Jest.. @Rokt33r git clone git@github.com:edemaine/jest.git. See also #475 as relevant. (Maybe we should improve that documentation...). KaTeX aims to match LaTeX as closely as possible.  LaTeX renders that math as follows:\n\nSo KaTeX is working more or less as intended (currently a slight horizontal offset from LaTeX, though KaTeX's offset is actually more readable...).\nAesthetically, I also prefer KaTeX/LaTeX's rendering, as it's much clearer that this is the base of the root.  Also, MathJax has surprisingly bad-looking top of the sqrt sign (I'm guessing by faking it with a top border...).. This is a place to ask about KaTeX, not LaTeX. A Google search for \"latex matrix\" brings uo tons of useful guides, e.g.: http://www.maths.tcd.ie/~dwilkins/LaTeXPrimer/Matrices.html. Both matrix and array environments are supported in KaTeX. . #269 gives a list of missing features. Is that what you'd like? . The following also works in KaTeX.  These are the two ways to do matrices in LaTeX/AMSTeX...\nlatex\n\\left(\\begin{matrix}\n  1 & 0 \\\\\n  0 & 1\n\\end{matrix}\\right). Can you push your fixes to the lint errors, which will trigger a rerun of travis?  Those npm ERR messages are just a summary saying that lint failed, and should disappear once the lint errors are gone.. Hmm.  I can run screenshotter, but I couldn't reproduce the error that Travis is getting on your branch.  My experience is that screenshotter occasionally fails randomly (on my second try, the Colors test failed), so perhaps if Travis tried again, it would work.  (But I don't know how to get Travis to try again, other than another random commit.)  Anyway, probably don't need to worry about this automatic check, and instead an actual maintainer should review this PR.. @ronkok It looks like you did a merge with master?  There's now a lot of irrelevant commits in this PR.  You might try git rebase -i b9e7b6898fd68a575d953000f4741ce2a24012f0 (or some other way to specify the master commit) and follow the instructions (carefully) for interactive rebasing.. @ronkok Yep, looks good now!. @ronkok I forget, have you rebased before? (git rebase -i upstream/master if you have upstream defined) This lets you deal with the conflict by tweaking the offending commit. . Given that MnSymbol seems to just undefined \\lhook, could we use the first workaround in the Reference?\nlatex\n\\let\\originallhook\\lhook\n\\usepackage{MnSymbol}\n\\let\\lhook\\originallhook\n(I've mentioned before: it'd be nice to have a clear list of packages needed to get the equivalent of all KaTeX features, or even a katex.sty package that does so for you.  But this is work for another issue.). Congrats @ronkok and @kevinbarabash on this 1600-line commit!  Excited to try out the new features.. Right: MIT\u2192 LGPL is fine, but reverse is not and MIT \u2192 CC0 is not.  So you couldn't release the whole package as CC0, only MIT, but you could release the parts you wrote as CC0.. A text-level parser, that looks for the $...$ etc. delimited math, is what I was hoping to do for #604.  This would differ from auto-render in that it would still be a string-to-string transform, instead of being done directly on the DOM.  I still think it's a good thing to do, and perhaps this interest will prompt me to give it a try (as an additional contrib library).\nMeanwhile, here is some other MIT-licensed code that does this (but in a more complicated setting, so you'd need to extract the relevant bits, which is what I'd be doing for #604): https://github.com/edemaine/coauthor/blob/master/lib/formats.coffee\nIf you have time to do this extraction, feel free to turn it into a PR!. I suggest continuing any further discussion over on #604.. Your example renders fine on the demo app:\n\nWhat problem/error are you having?  If I had to guess, it'd be that you're not specifying the doctype correctly.  See #661.. @looeee We'd probably need a full HTML example to help diagnose.  If I had to guess, I'd guess there's a bug with your particular setup, not katex or autorender.  Can you also try \\cr instead of \\\\?  Or does a matrix without \\\\ also fail?. Thanks!  Agreed, hopefully #676 keeps track of this.  And certainly feel free to move consumeSpaces (I was surprised this wasn't a function already), even in #605.. @rrandallcainc My original post was probably confused by the existence of Math-BoldItalic (and KaTeX_Math-BoldItalic.ttf).  But you're right, Main-BoldItalic doesn't seem to exist yet.. Oops, yeah, that seems to be a typo (dating pretty far back).  Most font test code just compares vs. \"ams\", so this wouldn't matter, but I do see at least one test vs. \"main\", so good to fix.  I created #678 to fix it.  Doesn't affect any screenshots/tests.. FWIW, I've seen this now and then locally and in other pull requests (specifically #670).  Maybe a time delay needs to be increased.... Sorry, now that I understand what the release script does, it makes sense to keep CDN URLs, but just change the version number part to ... where it doesn't yet exist (your new file).. Thanks @wilbowma!  This looks good to me.  @kevinbarabash did you want to confirm the revisions address your review?. This is related to #587 (horizontal metrics). To support \\rotatebox in general, we'd need an understanding of the size of a box.  I still think this is possible, once we have horizontal metric data from fonts (#632), though it's going to be an effort to accumulate the box size.  That said, we may need these box sizes for many things (\\multicolumn in tabular is on my mind) so it'd be worth trying, once #632 is in.\nAt the HTML level, this should be implementable via CSS3's rotate transform.  The tricky part is to get the transform-origin correct, which is where we need the box size.. @kevinbarabash Hmm, definitely sounds like it's worth an experiment.  If it works in many/useful cases, probably worth including an initial version.. FWIW, MathJax's HTML extension supports \\class and \\cssId and \\style (and \\href from the url package).  So there's definitely reason to support them (compatibility with MathJax).  [You probably already knew this, hence the name of these macros.]  Opting out for security seems related to the recent \"limit lengths\" feature.. Thanks, I didn't know about amsmath's gather/gather*/gathered.  KaTeX ought to support gathered, whereas gather/gather* would belong in a text-level wrapper (not yet written) as described in #603.\nIntuitively, \\begin{gathered} ... \\end{gathered} seems similar to \\begin{array}{c} ... \\end{array}, so I ran a test:\nlatex\n$$\\begin{gathered} \\text{gathered}   \\\\ x^2+y^2=z^2 \\\\ x < y \\end{gathered} =\n  \\begin{array}{c} \\text{array\\{c\\}} \\\\ x^2+y^2=z^2 \\\\ x < y \\end{array}\n$$\n\nThe only difference seems to be in the line spacing.  This shouldn't be hard to implement, provided we can figure out what the correct spacing is...  amsmath seems to implement this via \\spread@equation which I've yet to grok.. Added in #725. Thanks for the bug report!  That is weird.  I've confirmed that both \\ and ~ before \\middle disappear, so it's not just space characters being dropped (e.g. while parsing).  Presumably it's a \\kern getting absorbed somehow...\nAs a temporary workaround, I found that wrapping the space in braces works:\nlatex\n\\left.a{\\ }\\middle|\\ b\\right.. I found the issue: this code in buildHTML.js puts spaces inside a group with the \\middle, while keeping isMiddle true, so the space + \\middle group end up getting replaced by the delimiter.  I see two possible fixes:\n1. Change that code to not put spaces into \\middle specifically.\n2. When parsing \\left...\\right in Parser.js, split the body into two parts if there's a \\middle, replacing \"body\" with something like \"beforeMiddle\" and \"afterMiddle\".  In other words, change the parse tree structure to be more natural with respect to middle.  Then there can't be any conceptual errors like this.. defineSymbol(text, main, textord, \"$\", \"\\\\textdollar\"); defines \\textdollar to output the symbol $ in the main font with type textord.  To confirm, here's a screenshot of the local server tester:\n\n. Added.   Also noticed that \\circledR, \\checkmark, \\pounds work in text mode too, so added those.  And I'm fairly certain \\pounds is a textord not mathord.  \\pounds\\text{\\textsterling\\pounds} now produces 3 identical symbols.. Indeed, $\\pounds$ generates a mathord, same as $\\mathsterling$ (another alias I added).  $\\text{\\pounds}$ generates a textord (I believe -- at least, the LaTeX output of the symbol is different from the math version), but our font doesn't have that symbol, so I've left it generating a mathord.. Should be good to go now.  Someday, a more thorough symbol review wouldn't hurt, but this should help!\n(Also rebased.). Awesome, thanks @kevinbarabash and @ronkok for finding the solution here!  Looks like it was close indeed, and switching to calculateSize at the top level was the missing link.\nHere is what my original example A\\raisebox{-0.5em}{B}\\raisebox{0.5em}{C}D looks like with the new code (now pushed):\n\nIt's better, though the top margin is still a lot smaller (zero or even slightly less) than a straight \\text{C}:\n\n. Hey, I got it!  I was looking at the definition of the bottom strut in buildHTML.js, and it uses a vertical-align to put the bottom strut below the top strut.  I didn't know you could put numbers into vertical-align.  So I tried that instead of a top style (see this trivial diff), and it now has exactly the right bounding box!\n\n. In adding a screenshot test similar to @ronkok's, I realize that we're not quite there yet: vertical-align behaves well at the top level (and in \\fracs) but doesn't seem to interact properly with \\sqrt...\n\nIt seems that the positive vertical-align in the b is causing the ab to move down... weird...  Hmm, I think this is related to makeFontSizer that @ronkok mentioned, as the contents of the sqrt are put in a vlist (although so are the \\fracs...).. @ronkok Here's what it looks like, switching back to top setting:\n\nThe only difference is the vertical shift in the a\\raisebox{0.5em}{b}.\nI believe the issue is Movement Of the Line Box\u2019s Baseline (quirks of vertical-align).  Still grokking.... Upon further investigation, I think the top version (essentially @ronkok's version) was actually correct.  There is a larger space at the top of \\text{a} simply because of the overall line height.  This margin disappears even in a simple example like a^{a^{a^a}}:\n\nSo I've reverted to that version, and added a screenshot test.  I think we're back to good-to-go.. One more question: I currently call the parse node \"transform\", with the thought that it could be used for rotatebox and such in the future. But I wonder if just calling it \"raisebox\" and keeping it simple would be better. Let me know your opinion. . @kevinbarabash Good call on using texcmp.  I see now that LaTeX resets font size to full size when switching to text mode via \\raisebox (which \\text probably is careful to avoid), and I need to do the same:\n\nI've changed the parser node name from \"transform\" to \"raisebox\".. In principle I fixed the switch-to-normalsize issue, but I've run into a bug: #709. I rebased.  The switch to \\normalsize is working now, but the bounding box computation seems completely broken (unphased by the \\raisebox).  In this texcmp, the red (KaTeX) raised b's intersect whatever is above them (\\frac line or \\sqrt line).\n\nI get the sense that this is the result of some other changes... and presumably #746?. I got another chance to look this over and revise substantially.  I believe this is now working almost perfectly.  I use makeVList to do the vertical shift, so it should be well-behaved (and it appears at least reasonably so).  Internal to buildHTML, I use sizing and text nodes to switch to the equivalent of \\textrm{\\normalsize...}.  texcmp is almost perfect (slight horizontal spacing difference?):\n\nI also slightly cleaned up the parse tree: text nodes were using a style attribute to specify a font, but styles mean something else in KaTeX; switched the attribute to font.\nProbably best to look at this as a complete diff but if you prefer you can look at just the last commit for the changes relative to previous versions.. Thanks @kevinbarabash for all the reviews today!!. @arnog Sounds like a good find.  Could you include the LaTeX source for testing?. Fixed in #725. Would be also nice to support \\arraystretch (see buildHTML.js) and \\arraycolsep (in the same buildHTML function, though more spread out).\nNote that \\arraystretch is special, as it needs to be modified via \\def or \\renewcommand.. Some fun examples of playing with muskip.  Though that's mainly relevant to plus and minus settings which we don't currently support, we'll need to keep in mind that we really ought to support things like \\setlength\\arraycolsep{0.5\\arraycolsep} (something I do a lot), and possibly \\addtolength\\arraycolsep{-0.5em}.\nThere's also a question of whether we'd want to support TeX-style \\arraycolsep=0.5\\arraycolsep and especially \\global\\arraycolsep=0.5\\arraycolsep.  If we support global and local setting, we might need another data structure.\nBut even focusing on support for local lengths, I'm not quite sure where this ought to go.  Perhaps it could go in the options dictionary in buildHTML, e.g. as a lengths dictionary within?  We'll need to parse \\setlength as defining an implicit group, so that e.g. the following works:\nlatex\n\\setlength\\arraycolsep{1em} \\begin{array} ... \\end{array}\n\\setlength\\arraycolsep{2em} \\begin{array} ... \\end{array}. Ah, I see. So you imagine a setlength parse node that specifies that a length change in (the options for) the parent group.  Then all following items in the group will use the new length, until/unless the length gets overridden later.  This is a little tricky, I guess, because the processing of setlength nodes needs to happen at the parent level...  (By contrast, what I was imagining was that the modified items in the group would become children of the setlength node...)  Not sure what's best.. Yes, ending a group restores all lengths.  In the example below, the first and last arrays use \\arraycolsep=1em while only the middle one uses \\arraycolsep=2em.\nlatex\n\\setlength\\arraycolsep{1em}\n\\begin{array} ... \\end{array}\n{\\setlength\\arraycolsep{2em} \\begin{array} ... \\end{array}}\n\\begin{array} ... \\end{array}\nThe point is that the \\setlength changes all following items within the same group.  I guess the setlength parse node could modify options in-place instead of our usual copy-and-modify (newOptions = options.with...), but then many group-like things would need to carefully keep a copy of the original options to properly restore...  This is why I was thinking an implicit group would be better: it's behaving just like e.g. \\large.. This sounds great! We should consider linking to this project from KaTeX. . This feature is already nearly complete; see #656. . Neat idea.  Maybe ignoredTags could accept a function, and we also allow a parallel-named option like renderTags which could also accept a list or function (with the intent of only passing in one of the two).\nThis will have to wait until #656 is complete, though.. Could you give an example setting where this would be useful?  I assume you're in browser -- are you just trying not to pollute the window namespace?. @skillogs Here's how @ronkok's code renders on the demo app.  What do you get?  (What does \"doesn't work\" mean?)\n\n. Let us know if you need more help getting this working.. Could you clarify what you want here?  $x^2^3$ does not compile in LaTeX, which is why it doesn't render in KaTeX either.. No problem! . I remember noticing this too when switching from MathJax to KaTeX.  I do think that slightly higher weight looks better on screens, though what looks best also depends a lot on text font surrounding the math.\nRelated to #624 and the plan (which I can't find at the moment) to switch from raster conversion to vector conversion to generate the fonts.. Can you add LaTeX's rendering for comparison?. Hmm, yeah, the closer I look at the 150% zoom vs. the LaTeX rendering, the closer they look.  So I'm not sure there is a bug here (viewing LaTeX as the reference specification).  Really we should use the texcompare script to see.\n(Unless there's a way to guarantee some kerns render as at least one pixel -- then I could see doing so to get things to look good at small zooms.  But I'm not sure that's possible.). @jason-s Luckily, with the increased prevalence of high-DPI screens, print and screen are converging (though there remains the emissive vs. reflective light).  But the advantage of having LaTeX as the reference implementation is that we actually can define what is (roughly) \"correct\" vs. \"incorrect\".  So if something works in LaTeX, I can expect it to work the same on KaTeX, and vice versa.  I for one wouldn't trade in this feature for a vague \"usually looks nice on a screen\".  (But small tweaks, like a minimum kern of 1px, could make sense.)\nAre you running Chrome on both Chromebook and Windows 7?  (There are differences even between Chrome and Firefox.)  Are they identical DPI screens?  If so, it'd be interesting to compare screenshots.. Yeah, it's messy.  Your CSS reminds me of a way to do the \"minimum separate of one pixel\", though.  Because margins collapse, we can have one margin of 1px and another margin of the desired spacing, and collapse them to get the maximum.  Here's a simple JSFiddle illustration.  Of course, we have no control over what happens when the whole page gets scaled down, but assuming \u2265100% scaling, we'd have at least a one-pixel gap, which only matters when using a low-resolution display.  Perhaps this is interesting?. @kevinbarabash Implemented both your suggestions (and rebased).  Thanks for the feedback!\nI also noticed that, while @ronkok's code had a \\mathrel surrounding the operators, the amstex.sty code did not, so I switched to the latter.. @xymostech Is it worth linking to http://khan.github.io/react-components/#tex from KaTeX documentation?. See also the related issue I raised (and eventually plan to do): #604. KaTeX really ought to support the other TeX units.  I imagine we just need to decide what 1em translates to in TeX land (based on the internal notion of font size), and convert other units into that -- or vice versa.  (In HTML/CSS, everything has a defined scale relative to the px unit.). I'm confused.  HTML doesn't support absolute units at all (well, except mozmm); everything is relative to px.  So similarly, we could compute everything relative to em, I think (in the same way we already convert ex to em, which is dependent on the font).  Ah, but we have to take care that e.g. in is not relative to font size scaling, unlike em and ex.. Why can't this be computed server side? fontMetrics.js defines ptPerEm which maps between font coordinates (em/ex/etc.) and measurement coordinates (pt/in/cm/etc.).  buildHTML.js uses this for a font-independent \"scriptspace\".  Just need to generalize this.. @ronkok But isn't that exactly what we want? I might be missing something here. But what I want is for X\\hspace{1mm}Y (say) to render in KaTeX (roughly) the same as it would render in LaTeX (with \\documentclass[10pt]{article}), up to scaling. Yes, the browser can scale everything. But we want the spacing to scale in exactly the same way that fonts do.  So if the X renders bigger, the hspace should also render bigger.  We never want \"absolute distance\".. In my opinion, we should accept \"absolute distances\" (in, cm, etc.) as input, but convert them to how LaTeX would render in 10pt mode.  Under this model, we can convert all units to em (via ptPerEm and using \\normalsize font size) and render them as em in HTML. Yes, the browser can scale everything, but then all distances (\"absolute\" and \"font-relative\") would all scale in exactly the same way, so everything will simply be a scaled version of the 10pt LaTeX rendering.\nHopefully this proposal is clear.  I can try to put together a PR to show more precisely what I mean.  (But I probably need to fix/understand the font sizing issue in #709 first, as I need to get to \\normalsize to do this translation.). That's an HTML/CSS 1 cm box.  I was suggesting defining the meaning of a LaTeX 1cm box to mean a (something) em box, which will get rendered at different sizes depending on the HTML/CSS font-size.  I guess that will be incompatible with MathJax, though it wouldn't be the first time...\nMaybe we could make ptPerEm configurable as an option, so that people could set the KaTeX-viewed font size from the outside to match the CSS, if they wanted to, and otherwise the behavior is this scaling relative to 10pt font?  Or rather, make the 10pt base font size a specifiable option.. OK, I made a proposal for this in #732, with some more rationale about why I think this is the way to go (at least given past KaTeX decisions).  I'd suggest continuing any discussion there.. Personally I'd recommend Inkscape for an SVG drawing program.  And maybe LaTeXiT to put LaTeX labels in the figure. (Actually, you might be able to do the whole thing in LaTeXiT...). Description of Luma vs Luminance.  I guess Luma uses \"gamma-compressed components\" whereas Luminance uses raw R,G,B.  Note sure what this means without a gamma specification... maybe there's a default?  I certainly haven't noticed the conversion being bad, perhaps especially because the things we're comparing are generally grayscale.\nI just ran a test on this very message:\n\n-grayscale Rec709Luma and -colorspace Gray (identical files):\n\n-grayscale Rec709Luminance:\n\nIn my browser, these look the same; but in Irfanview and identify I see a big difference: Rec709Luminance has a different colorspace (RGB) whereas others use sRGB, same as the original screenshot.  On my monitor, Rec709Luminance looks much darker (even in the grays which shouldn't be changing).  I have read that Rec709Luma deals with input colorspace better.\n[Incidentally, with upgraded Docker, I now get SyntaxError: Use of const in strict mode. in /KaTeX/dockers/texcmp/texcmp.js:5.]. @ronkok Thanks for the input! @jsmaniac Thanks for being responsive to the alternative approach!\nIf it's not too much trouble, could we see here output from texcmp (available in dockers/texcmp) comparing this symbol to one of the LaTeX versions of the symbol?  (This involves adding a tiny test to test/screenshotter/ss_data.yaml.)  Let me know if you have trouble running texcmp.\nIncidentally, general \\not support is in process/almost complete in #140.  (Hi @kevinbarabash!)  But I think there's still value to this PR, given that it is a supported command in some packages.  I guess we could later change the macro to expand to just \\not\\ni... though that might have slightly inferior spacing?\nP.S. You're currently failing tests because of long lines.  Run npm test locally to see this output.. @jsmaniac You can try sudo dockers/texcmp/texcmp.sh YourTestName which does the launching for you.  (But see #708)  Personally I've had more success with just running node dockers/texcmp/texcmp.js YourTestName.. Regarding your latter error, you probably need to run npm install (which installs all dependencies) first.  (Though hard to tell without seeing the actual error message, which is in the line after throw err;.)\nI forgot you need to run screenshotter first, though, which I've only gotten to run using Docker.  So you might have had trouble anyway.\nAnyway, here is what I got with \\usepackage{newtxmath} added to test/screenshotter/test.tex:\n\nThere's a difference here, but it seems like a consistent difference.  Here's a comparison of \\in\\ni\\notin\\notni:\n\n. @kevinbarabash Great!  Perhaps we should wait to see if #140 is easy to finalize, and then modify this PR accordingly.... @jsmaniac A reminder on this -- should be straightforward. Also, you can use { and } instead of \\bgroup and \\egroup.. Our reference is LaTeX, which seems to do the more natural vertical spacing but match the font sizes of KaTeX (which makes sense):\n\nSo the vertical layout definitely seems like a bug.  Thanks for the report!. @redstoneleo If you look closely, there is no key order issue here --- there are two dictionaries wrapped in an array (with [...]).  So they are definitely ordered, and yes, order matters for the purpose of auto-render.\n@xymostech This seems like a natural use-case and an easy \"gotcha\". Perhaps we should mention the issue explicitly in auto-render's README?  \"If you use both $ and $$ delimiters, be sure to list $$ first.\". Incidentally, I notice that the example HTML file included with auto-render actually already shows how to use $ as a delimiter (along with $$, \\(, \\[), and lists them in the desired order.  It's probably worth either:\n1. adding a clearer note (in the sample HTML and/or in the README) about order mattering; or\n2. sorting the delimiters so that order doesn't matter (though I'm vaguely worried that this might break some use-cases... it's hard to imagine for the actual common delimiters).. @stsievert Please post a complete example of an HTML file? . Glad you found a fix! . Yeah, _blah_ is getting inverted into italics, so the two _s in your expression cause trouble.. You need to escape your backslashes in JavaScript, like so:\njavascript\nvar equation = katex.renderToString(\"\\\\begin{bmatrix} a & b \\\\\\\\ c & d \\\\end{bmatrix}\");\ndocument.write(\"Equation is \"+equation);\n\\b expands to a backspace character (\\x08).. Sounds like a good idea, but https://cdnjs.cloudflare.com/ajax/libs/KaTeX/latest/katex.min.js doesn't work.  Do you know how to get CDN to work this way?. According to https://github.com/cdnjs/cdnjs/issues/987 it's not possible with CDNJS.  And indeed, it's no longer possible with MathJax; see this retirement notice, which uses explicit version numbers.  So, alas, I don't think there's a way to support the requested feature, except workarounds like @mbourne's.  Closing this unless there are other ideas.. Thanks for the report plus solution! I have Windows 10 so will give this a try to confirm, then turn it into a PR. . Just confirmed.  I found that it was enough to add the rule\ncss\n.katex { -ms-high-contrast-adjust: none !important; }\nbecause according to the documentation the property is inherited.\nPR now available as #724.. Thanks for your expertise and explanation here.  I made another PR (#733) to fix this in the way you originally intended -- sorry for missing the subtlety before.  The rule looks slightly different in Less, but I checked that it compiles to this CSS:\ncss\n.katex * {\n  -ms-high-contrast-adjust: none !important;\n}. @kohler Did you mean something other than #519?. Ah, OK, I figured.  Probably #670 wants to go first, as @kevinbarabash has been working on that for a while.. #670 has landed.  I don't see any conflicts, but perhaps tests need to be rerun?. Thanks for the report!  Thoughts on this, @gagern?. It sounds like your browser is having trouble loading the KaTeX CSS?  Are you developing an Android app?  I don't have experience with bundled assets, but it sounds like your problem is there somewhere, and not specific to KaTeX.. I'm closing this for now, but if you provide more information about how you're using KaTeX, we'd be happy to consider more.. All I did was apt-get install docker.io on Ubuntu, so it's not like I'm running a weird Docker config. \ud83d\ude04 (I'm definitely a Docker noob.)  I find it weird that screenshotter.sh works fine ... ah, I see, that one doesn't have to download any custom software, just an off-the-shelf selenium image?\nAs you guessed, within docker run --rm -it ubuntu:17.04 /bin/bash, apt-get update fails.  Here's what docker inspect says about network settings while it's running:\n\"NetworkSettings\": {\n        \"Bridge\": \"docker0\",\n        \"Gateway\": \"172.17.42.1\",\n        \"GlobalIPv6Address\": \"\",\n        \"GlobalIPv6PrefixLen\": 0,\n        \"IPAddress\": \"172.17.0.94\",\n        \"IPPrefixLen\": 16,\n        \"IPv6Gateway\": \"\",\n        \"LinkLocalIPv6Address\": \"fe80::42:acff:fe11:5e\",\n        \"LinkLocalIPv6PrefixLen\": 64,\n        \"MacAddress\": \"02:42:ac:11:00:5e\",\n        \"PortMapping\": null,\n        \"Ports\": {}\n    },\n/etc/resolv.conf looks identical to the host machine.  I tried changing /etc/apt/sources.list to use a manual IP (deb http://91.189.88.149/ubuntu/ zesty main restricted) but it still won't connect.  So it seems it's really the bridge network that's not working.\nApparently my version of Docker has no docker network command, so I'm guessing it's old: 1.6.2.  I guess I should try updating, though it'd be nice to solve this for others on Ubuntu 14.04.5 LTS.. OK, I installed the latest version of Docker (via these instructions) and now things seem to run, except I think it's not properly extracting the computed file to the host filesystem:\nTypeset Aligned\nRasterized Aligned\nPositioned Aligned: -82, 19\nCompared Aligned\n+ docker cp a2d1feb26fbc0c6b19b6572a741a7577f80e9fb45139d164c169acf76ca2a912:/KaTeX/test/screenshotter/tex -\n+ cd test/screenshotter/tex\n+ tar xv\ntex/\ntex/Aligned-pdflatex.png\ntar: tex/Aligned-pdflatex.png: Cannot change ownership to uid 0, gid 0: Operation not permitted\ntar: tex: Cannot change ownership to uid 0, gid 0: Operation not permitted\ntar: Exiting with failure status due to previous errors\n+ exit 2\n+ cleanup\n+ [[ -n a2d1feb26fbc0c6b19b6572a741a7577f80e9fb45139d164c169acf76ca2a912 ]]\n+ false\n+ container=\nProbably because of the original issue, that I'm using AFS, where chown is impossible.  Maybe just some tar tweaks would suffice?. Yes, I'm running as root via sudo.  My impression is that running docker as a regular user is just as risky as running it as root (though maybe hackers would need to work slightly harder...).\nAdding --no-same-owner to the tar arguments (after xv) was enough for me.  According to https://github.com/npm/npm/issues/1128, this is equivalent to -o that works on all (?) tars.  I confirmed that -o after xv also suffices for me.. Ah, there seems to be a bug in the tar calls though.  test/screenshotter has a directory tex with a subdirectory tex in it, with the rendered .png file.  Also test/screenshotter has a directory diff with a subdirectory diff in it, with another .png file. \n~~And all previous files have been removed!  I can't say I like this, as I usually just render one example at a time, but I want my previous renders too, even if out-of-date...~~ Sorry, forgot I was in a fresh clone!  No files are deleted.\nThis fixes the subdirectory issue:\npatch\ndiff --git a/dockers/texcmp/texcmp.sh b/dockers/texcmp/texcmp.sh\nindex f807509..64f3829 100755\n--- a/dockers/texcmp/texcmp.sh\n+++ b/dockers/texcmp/texcmp.sh\n@@ -30,7 +30,7 @@ tar c dockers/texcmp/{texcmp.js,package.json} \\\n     | docker cp - \"${container}:/KaTeX\"\n docker start -a \"${container}\"\n docker cp \"${container}:/KaTeX/test/screenshotter/tex\" - \\\n-    | ( cd test/screenshotter/tex; tar xov; ) || exit $?\n+    | ( cd test/screenshotter; tar xov; ) || exit $?\n docker cp \"${container}:/KaTeX/test/screenshotter/diff\" - \\\n-    | ( cd test/screenshotter/diff; tar xov; ) || exit $?\n+    | ( cd test/screenshotter; tar xov; ) || exit $?\n cleanup\n~~I think adding a slash at the end of the source directory would also work.~~. Is there a reason we're using tar at all?  Doesn't docker cp support a host destination path?  Ah, maybe it's to list all the output files?\nThis also works:\npatch\ndiff --git a/dockers/texcmp/texcmp.sh b/dockers/texcmp/texcmp.sh\nindex f807509..2521acc 100755\n--- a/dockers/texcmp/texcmp.sh\n+++ b/dockers/texcmp/texcmp.sh\n@@ -29,8 +29,6 @@ tar c dockers/texcmp/{texcmp.js,package.json} \\\n     test/screenshotter/{ss_data.{js,yaml},images/*-firefox.png,test.tex} \\\n     | docker cp - \"${container}:/KaTeX\"\n docker start -a \"${container}\"\n-docker cp \"${container}:/KaTeX/test/screenshotter/tex\" - \\\n-    | ( cd test/screenshotter/tex; tar xov; ) || exit $?\n-docker cp \"${container}:/KaTeX/test/screenshotter/diff\" - \\\n-    | ( cd test/screenshotter/diff; tar xov; ) || exit $?\n+docker cp \"${container}:/KaTeX/test/screenshotter/tex\" test/screenshotter || exit $?\n+docker cp \"${container}:/KaTeX/test/screenshotter/diff\" test/screenshotter || exit $?\n cleanup. > I'm wondering whether I should move things like the \"npm install\" to the image creation, so we can avoid that step on consecutive runs.\nThat sounds nice -- it would speed-up startup.  I guess the worry is that texcmp changes and we'd need to delete the image?  (I don't even know how to delete the image...)\nI wonder if we could rely on the caller running npm install, and just copy the node_modules directory into the Docker (each call)?  And maybe running npm install manually if node_modules doesn't yet exist.  So we still cover the common case (no changes to texcmp) being automatic, but it's also easy for someone to update -- just run npm install before texcmp.sh.. Makes sense.  Putting npm install inside the docker build sounds reasonable given the version numbering.  But it's also not bad as is.  (Screenshotter is the really slow one.). Confirmed that new code works: created new docker (though cached so still pretty fast) and ran npm install; and second run was faster, no npm install.  Cool!. (Let me know if you're done and I can merge, or feel free to do so yourself.). If you want to make the text within your fractions bigger / the usual size, you'll want to switch \\frac to \\dfrac, or put \\displaystyle after each \\(.  This behavior is the same as LaTeX.. Happy to help.  (Dynamic programming FTW!). While I'm here, I tweaked the definition of the aligned environment to put all contents in \\displaystyle.  This feature was pointed out by @arnog in #682, and I confirmed that it's the case in LaTeX.  For example, $\\begin{aligned} \\frac{x}{y} \\end{aligned}$ now uses a display fraction, as it does in LaTeX.\nI'm going to add the gathered environment next, to this PR, as it's almost trivial at this point.. I added the gathered environment, fixing #682.  The test case (with \\begin{gathered} on the left and \\begin{array}{c} on the right) renders pretty well, but not quite as perfectly:\n\nLet me know if you can see where the extra vertical space is coming from in LaTeX...  The difference is the \\frac in the cell -- both gathered and aligned behave the same in terms of vertical spacing (in both KaTeX and LaTeX).  Anyway, the new spacing is far better than current KaTeX.. Comments addressed in https://github.com/Khan/KaTeX/pull/725/commits/3c00b27f263e3d6754114defe1cbb4350ad6299f . Thanks for the review!. @kevinbarabash Yes, I rebased.  Almost no screenshot tests involve aligned or gathered environments --\n just the old Aligned test (modified in this PR) and the new Gathered test (new to this PR).  Is there a reason LimitControls should have changed that I'm missing?. Thanks @ronkok!  I went to try this, but then realized (a) I wrote that groupTypes.mclass is relevant when in fact \\mathop compiles to groupTypes.op; and (reasonably given this error), (b) you misinterpreted \\mathrel as the relevant command instead of \\mathop.  I'm not aware of vertical magic in \\mathrel (please correct me if I'm wrong).  The code in groupTypes.op is quite a bit more complicated, and appears to already be trying to do some vertical magic.  If you can make sense of it, I'd appreciate what you think ought to work in that case.... This should wait for #751 so I can remove the braces.. Rebased and removed braces.  This should be good to go, unless we want to add tests.. I guess we need to add these to function support.  How does this work?  @ronkok do you have time to do this, or would you rather delegate?. @ronkok Beautiful!!. Agreed -- great news!  Must have been from those makeVList changes.  Thanks for spotting.. Overall, sounds cool -- thanks for your efforts in putting this together!  In general, this seems like a good case study for adding languages/fonts in general, and is possibly relevant to the discussion on roman lower-case Greek letters on #564.  I wonder if it could be helpful to write a document about adding languages/fonts in this way, once we figure out all the details.\nI do feel like a plugin infrastructure may be warranted here: even if we put all of this in the main repository, users will probably want to deploy with the most appropriate subset of features for their application (in particular, not including fonts for languages they don't plan to use).  For comparison, MathJax has an extension system, both built-in extensions (e.g. color) and official third party extensions.  I'm not convinced we need extensions for \"main features\" (except maybe as a tool for users to add custom features that don't make sense for broader public, but macros will hopefully get us there).  But I think it'd be good to have a plugin infrastructure for fonts specifically, because fonts are naturally on the larger side.\nThis also highlights an issue discussed on #632 of whether we should put fonts into a separate repository.  If we made such a move, it would probably make it more palatable to start adding additional optional fonts, whereas currently repository size is a concern.\nSpecific to this Farsi patch:\n Font license looks great. We can even modify the font if we need to. Probably need to include the font license/link somewhere in the repository though.\n I don't have a sense of whether monospace fonts are considered \"nice\" for rendering Farsi.  (In English, they're generally considered ugly, but e.g. in CJK all fonts are monospace.)  It'd be helpful to have some aesthetic commentary here, especially in the context of mathematics.\n I assume the idea is that authors would write Farsi characters in Unicode.\n I assume a similar thing is possible in LaTeX, with a suitable package inclusion?  What font(s) do they use?\n* Out of curiousity: I could see two contexts where you'd want Farsi within a mathematical formula: variable names and \\text{...} descriptions (e.g. in underbraces, cases environment, etc.).  Are both uses common, or more one than the other?. @HosseinAgha That sounds great! Thanks for taking on that additional task. Feel free to discuss/ask questions here too.. It's an interesting idea, which would probably need some experimentation before we could really evaluate whether it's a \"good\" idea performance-wise.  In particular, how much of MathJax's slowness is from parsing vs. from rendering?  This should be easy enough to measure.  This mathjax performance wiki page claims that rendering is especially painful because they do lots of round-trips to the browser to measure actual widths and heights (hey, it's like our horizontal metrics discussion!).  But that's apparently not necessary for their SVG rendering, yet their SVG running times are still pretty slow.  So I worry that their parse is slow relative to KaTeX's.\nAside from performance, this would be a huge rewrite of KaTeX, I imagine, given how intertwined the parser and the renderers are currently.  Might be a different project altogether.... Oops, thanks -- that makes sense in hindsight!  I'll add documentation to this effect in a different PR.. Thanks @kevinbarabash . The decision to make units.js is valuable, and makes the other issues easy to deal with.\n Moved ptPerUnit (now ptPerAbsoluteUnit) to units.js.  I think pt makes most sense for absolute units, so I kept it to absolute units.\n Added emPerUnit which includes all absolute units, em, and mu, but no ex, as ex requires a function.  [I had actually written this code before, then thought it wouldn't work because ems would need scaling based on font style, but later realized that isn't true...]\n I added a validUnit function for Parser.js to use to check whether a unit is valid, in particular for the ex special case.  This fixes most tests.\n Changed 1px \"bad unit\" tests to 1au, so it's actually invalid and matches some other tests.\nI'll save from squashing for easier review, but these commits should be squashed.. Oops, thanks!  Added now.  I ended up rebasing then.\nThanks for the heads up on #719.  I realize now that this PR probably doesn't work with font-size changes like \\large, but I take it #719 provides a (different) way to find out font size?. @ronkok I understand your concern, but I for one would not be happy with nonstandard units.  I want to be able to copy/paste LaTeX code between LaTeX and KaTeX and have them render roughly the same, up to scaling.  I doubt I am alone...\nIn my opinion, it's reasonable for units in KaTeX to mean LaTeX units, not CSS units.  Another example: the following render with the same horizontal space in KaTeX and in LaTeX, because of the styles-don't-scale-ems rule I just learned about in LaTeX.  (To test in LaTeX, you need to remove the braces on the \\kern argument.)\nlatex\n\\begin{matrix}\n  x_{\\kern{1em}y} \\\\\n  x\\kern{1em}_y\n\\end{matrix}\nBy contrast, the following render with different horizontal spaces in HTML:\nhtml\nx<sub><span style=\"padding-left:1em\"></span>y</sub><br>\nx<span style=\"padding-left:1em\"></span><sub>y</sub>\nSo even for the existing primary unit, em, LaTeX ems differ from CSS ems.  So there is no contract that HTML and CSS units should behave the same.\nI could see an argument that absolute units should render as absolute units.  That is not the decision made by KaTeX so far (which already uses pts internally, but expands them relative to font size), so I've matched that.  Perhaps it would make sense, in the future, to add an option where units can render one way or the other, though as discussed before, that may actually be impossible on the client side.  Definitely it makes sense to add an option to control the 10pt base size, so that it can match the actual CSS font size.  (I thought about adding that to this PR, but it'd be an extensive change...)\nBut at least in my personal applications, the relative treatment of units as in this PR would work great. \n Perhaps you have some ideas on how to improve the documentation I added to the README?. Hahaha, that made me laugh!  I think I see what you're asking.  There are a few possible long-term plans:\n\nSupport CSS relative meanings of LaTeX's absolute units, and that's it.  Ideally with the base font size (10pt) configurable.\nSupport CSS absolute meanings of LaTeX's absolute units (same as MathJax?), and that's it.\nSupport absolute or relative meanings, configurable as an option to the renderer.\nSupport both absolute and relative meanings simultaneously (in the same LaTeX expression), and have a way to specify which you want (e.g. different names for the relative units, like you suggested).\n\nI think you had in mind Plan 4, which explains the idea of naming the units differently.  I think I had in mind Plan 1, and maybe later extension to Plan 3.  In this case, we don't need to name the units differently.\nPerhaps we should reach consensus on which plan(s) make sense in the long term.  Personally I'm happy with Plan 1, even though it could lead to relevant support queries (kinda like the queries related to <!DOCTYPE...).. @kevinbarabash Ah. You do realize that's the opposite of what's implemented in this PR?. Sorry for the confusion. Option 1 corresponds to the PR (once I correct it to handle font sizes). It could later be extended to Option 3.. Rebased, and separated out the handling of absolute and relative units using the new infrastructure from #719.  All seems working, except I find that\nlatex\n\\begin{array}{l}\n  \\mathrm H\\kern 1em\\mathrm H\\\\\n  \\mathrm H{\\large \\kern 1em}\\mathrm H\\\\\n\\end{array}\nnow produces two identical spaces in KaTeX, but not in LaTeX.  I think this is a bug, not from this PR, but introduced by #719.  It's maybe not truly a bug because LaTeX gives LaTeX Font Warning: Command \\large invalid in math mode, but it does compile, and the spaces are different in LaTeX, which matches my intuition (whereas replacing \\large with \\scriptstyle should, and does, produce the same spaces).  @kohler could you comment on what might be going on here?. Cool, thanks for investigating!\nI don't think this is quite right yet, though.  As far as I've found in LaTeX, \\kern 1em should be independent of style -- at least, it seems to produce the same space in \\textstyle and \\scriptstyle in LaTeX.  So we still need to multiply by a multiplier...?\nI didn't know about the quad measure.  What fun!. Finally got to rebasing this to include @kohler's em/ex/mu size fixes.  I think this is ready to go now.\nHere's a texcmp output for a new screenshot, which unfortunately has a shift caused by the parentheticals being in \\tiny font, but otherwise looks like a perfect match -- testing ex, em, mu, and cm during both style changes (\"ss\" means \\scriptstyle) and size changes (\"sm\" means \\small).\n\n. P.S. @ronkok Your documentation looks good, but your (*) footnote is no longer accurate, as @kohler discovered above.  In fact, mu units scale with scriptstyle/scriptscriptstyle, while other relative units always refer to the textstyle font in the current size.  (But these are all behaviors we inherit from TeX, so I don't know how much we need to say here...). @kohler Implemented or responded to your review comments.  Thanks for the quick review!\n@kevinbarabash You should set the font-size of the root .katex element to 9.96264pt (manually in inspector).  I just tried it, and \\kern 1cm renders as margin-left: 2.84528em which, according to inspector, results in a width of 37.795px (in Chrome).  Setting manually to margin-left: 1cm results in the same width of 37.795px.  This makes sense given that, in CSS, 1in = 96px = 2.54cm, and 37.795 / 96 * 2.54 = 0.99999270833.\n9.96264pt is a terrible consequence of the two different pt measurements.  9.96264 CSS pts = 9.96264 TeX bp = 10 TeX pt.. Here's the output of texcmp for the same test without the \\tiny parentheticals (which is where the horizontal metrics seem off).  Seems to confirm we're doing all the cases right!\n. @kohler I like that wording, and will change it once I'm at a computer again. (Small planned change: the use of em to specify percentages seems like it might be counterintuitive, so I'll add a mention that the CSS example achieves 1.1x.)\nI'm OK with removing the \"KaTeX aims to render a scaled version of what LaTeX would do\", but I'm curious what is wrong with that. Do you disagree with the goal or the claim or both? . Sorry for the delay.  I took a stab at revising the documentation.  In particular, I left a statement about being a scaled version of LaTeX, but now it's just in the context of unit/kern rendering.  Let me know if you see any other changes/comments!. Just to make sure, are you using <!DOCTYPE html>? Does the same behavior appear on our demo page? . ~~#802 may now fix this bug.~~. Is this supposed to eventually replaced texcmp?  Is the idea that screenshotter.sh --diff is simpler and possibly faster than screenshotter.sh then texcmp.sh (especially with changing directories in between)?  I also like not having to remember two different ways to specify a single example to run.\nI see that texcmp wasn't mentioned in the documentation anywhere.  Maybe we should add some documentation to CONTRIBUTING.md (around Screenshot tests) about how to use this and/or texcmp?  This would be a(nother) good place to mention \"...if you have ImageMagick installed\" for screenshotter.sh --diff.. Oh, I see!  That makes sense.  But I didn't guess from the initial description the option help string.  Perhaps change \"produce image diffs\" with \"produce image diffs against existing screenshots\" or similar?. It's clear now.. This looks great!  Discussion in #377 makes it clear that we should be dropping IE 8.\nDo you think we should list Edge as well, given that that's replacing IE?  I just did a simple test, and it looks OK.  Your stretchy wide test page doesn't fare quite as well -- maybe you know about this already -- but the scaled slashes look ugly for some reason.. Cool, glad to hear it's just the same issues you've already worked around.\nRegarding evergreen browsers: there is the line KaTeX supports all major browsers, including Chrome, Safari, Firefox, Opera, and IE 9 - IE 11 (which you edited).  I was wondering whether we should add Edge to that list.. Great!  There's apparently a merge conflict now... perhaps you merged with an older version? (I would use git fetch upstream then git rebase -i upstream/master, if you've set upstream to track this repo.). Can you post screenshots? Are you using an app or the browser? If an app, can you try a browser? . One thing I see is that, on iOS, you're getting two backslashes (\\\\frac).  This is likely incorrect; it would need to be \\frac to render correctly.  So maybe the JSON is getting extra escapes in iOS but not Android...\nAnyway, we can't really see anything from this level of detail.  You'll need to get into the Webview's JavaScript console and include any KaTeX-related error messages for us to know what's going on.\nRegarding symbols: you need to use a LaTeX command, namely \\div, to produce \u00f7.  We do hope to support direct Unicode symbols at some point (there are many issues and PRs related to this), but not yet.  < and > should work, but likely HTML is getting in the way of that.  You can always use \\lt and \\gt to get around that.. Feel free to reopen the issue if this didn't fix your problems (and you can provide more information like console logs).. Sorry, what do you mean? . KaTeX does not support wrapping of formulas.  See #327 for the issue and some workarounds.  In your case, I would suggest splitting the text into multiple formulas, as most of your content is text, not math.. FWIW, I have no trouble with Node v6.10.2 and npm 3.10.10.  Maybe there was a bad fetch -- delete the directory node_modules and try npm install again?  Alternatively, maybe we need to upgrade some dependency versions (e.g. babel).... Ah, maybe there was an old babel-cli installation that was getting priority over the local copy.  That shouldn't happen, but maybe I don't know NPM rules (especially in older versions)...  Anyway, glad it's working now!. FYI, merging your #745 ended up making a small conflict here.. Maybe it would be good to add some more test(s) to illustrate, such as the \\fbox{\\huge} example and large \\rules?. Looks great!  Thanks for fixing this.. @ronkok Personally I'm OK with a buggy \\boxed as long as it works in many useful cases.  Many existing features have bugs in some cases -- that shouldn't stop us from releasing them.. I'll trust that this will end up being a useful change.\nIt looks like the screenshotter is somehow assuming Jasmine, causing Travis to fail, so need another tweak there?\nI also notice you're getting a warning now, as in #664.  Perhaps you could test the code I put there to see whether it resolves the warning issue?  (Or I could when I get a chance.). There's a slight conceptual difference in those MathML tests.  The existing ones make explicit statements about which symbols have mathvariant specified, for example.  I could see maybe including some of the existing tests, to check that certain types of letters get the right mathvariant in various cases, but also have a snapshot test that tests that the whole thing builds in the same way.  Anyway, yes, that type of snapshotting sounds quite useful!. Cool, I've submitted a PR to Jest for that then.\nI agree that the snapshots test more than the explicit mini tests.  It's just useful to also state \"the output should have this particular feature\" in addition to \"the output shouldn't change without my checking that it's a change for the better\".. Wow, coverage is a neat feature!  Apparently it can also be tested of PRs automatically; see https://github.com/facebook/jest/pull/3937#issuecomment-312038273.. These would most naturally be replaced by \\definecolor calls (see this description).  Unless you want to replace \\textcolor{katex-blue}{...} with \\textcolor{\\katexblue}{...} and use a macro \\katexblue (but sadly can't have a hyphen in its name).  By analogy to the macros option we currently have, we could have a colors option that provides a mapping of colors to RGB.  This map could then be moved to the KA project where KaTeX gets called, or it could be the default settings which uses can add additional colors to.. I didn't even realize that unbraced size arguments were supported by KaTeX!  (because I always added extra spaces, it seems)  Thanks for fixing this.. I approve this PR, but I'll leave it to @kevinbarabash to confirm and push the button.. Tested locally and looks good to me!  (3m8s)  I tried tweaking ss_data.yaml, introducing errors, etc. and all seems to behave as before.\n@gagern, do you want to take a look at this to confirm?. Cool, looking forward to it!. This is a duplicate feature request of #604.  Definitely something I'd like to do, but haven't had a chance to do yet.  But there is some code linked there that you could try using as a basis.. groupTypes.horizBrace has the following code:\njavascript\n    // Build the base group\n    const body = buildGroup(\n       group.value.base, options.havingStyle(style.cramp()));\nI'm not sure what cramped means, but I'm guessing we want to in addition / instead switch style to its display version, with a new display() method on Style?. I'm a little confused about cramped style.  Does it correspond to something in LaTeX (perhaps defined in mathtools?) that you're reproducing?  I looked at mathtools's definition of \\over/underbrace and didn't see anything about \"cramped\"...\nlatex\n\\def\\overbrace#1{\\mathop{\\vbox{\\m@th\\ialign{##\\crcr\n  \\noalign{\\kern.5\\fontdimen5\\textfont2}%\n  \\downbracefill\\crcr\n  \\noalign{\\kern.7\\fontdimen5\\textfont2\\nointerlineskip}%\n  $\\hfil\\displaystyle{#1}\\hfil$\\crcr}}}\\limits}\nAnyway, with the following change:\n```diff\ndiff --git a/src/buildHTML.js b/src/buildHTML.js\nindex 944fdc6..d9d8e9a 100644\n--- a/src/buildHTML.js\n+++ b/src/buildHTML.js\n@@ -1516,7 +1516,7 @@ groupTypes.horizBrace = function(group, options) {\n // Build the base group\n const body = buildGroup(\n\n\ngroup.value.base, options.havingStyle(style.cramp()));\n\ngroup.value.base, options.havingBaseStyle(Style.DISPLAY));\n// Create the stretchy element\n const braceBody = stretchy.svgSpan(group, options);\n```\n\n\nI get the following texcmp output for the HorizontalBraces test, which seems to be on the right track:\n\n. OK, #765 was merged, which switches the text being braced into displaystyle. This definitely seems in line with the LaTeX/mathtools source.\n@ronkok In particular, I don't see why the main-line text would be cramped.  (I could see it for the above/below text...)  Do you agree?. Finally found \"cramped\" briefly mentioned on page 140 of the TeXbook.\n\nTEX actually has eight different styles in which it can treat formulas, namely\n display style (for formulas displayed on lines by themselves)\n text style (for formulas embedded in the text)\nscript style (for formulas used as superscripts or subscripts)\nscriptscript style (for second-order superscripts or subscripts)\nand four other \u201ccramped\u201d styles that are almost the same except that exponents aren\u2019t raised quite so much. For brevity we shall refer to the eight styles as\nD, D', T, T', S, S', SS, SS',\nwhere D is display style, D' is cramped display style, T is text style, etc.\n\nLooks like #765, which uses options.havingBaseStyle(Style.DISPLAY), will indeed reset cramped to false.. Sounds good.. Sounds very cool!  I've always been confused/annoyed by line boxes, so it's great to see a possible fix in this context.\nRegarding @gagern's table comment, he may have also been referring to CSS code like this (taken from my own project), which changes the default style of all tables in a certain context.  Both Markdown tables and KaTeX output could appear in this context (of a Markdown + LaTeX formatted message).  But these rules are relevant only to tags like <table>, <tr>, <td>, not CSS-style tables.  So I think no issue here either.. Annoying.  Here's the Chrome issue.. Personally, I think this approach is still worth persuing.  It's not a huge loss, and Chrome will hopefully eventually fix, while we gain... a lot, I think?  Can you show some examples where this new approach to vlists is a significant improvement over the current one?. Could you clarify what sort of environment Prince XML is providing, and why main.js (usually only used for testing) is useful in your context?\nAlso, should the event handling of permalink be similarly protected? . Thanks for the background!  I guess I'm confused in your PR #772 why you change the handling of input in a way that's asymmetric to the way we handle permalink.\nDoes Prince XML support addEventListener just not oninput?  If so, it seems we should change if (\"oninput\" in input) { to if (\"addEventListener\" in input) { -- this makes more sense, and is symmetric with permalink.\nOn the other hand, if Prince XML supports neither addEventListener and attachEvent (which would make sense given that it's role is PDF export), then it seems we need to protect both calls to attachEvent, not just one.. As discussed in #771, I'm not convinced this will be useful in isolation -- there's a call to attachEvent a few lines below that should be similarly protected, if this one is.  But with a revision (and ideally testing to confirm this works where desired) it seems like a good idea.. Yep, already #528.  Please use \\cdots or \\ldots until \\dots gets implemented (or define a macro for \\dots -> \\ldots, which is what I do personally for now).. Your Units documentation looks good, but your (*) footnote is no longer accurate, as @kohler discovered. In fact, mu units scale with scriptstyle/scriptscriptstyle, while other relative units always refer to the textstyle font in the current size.  (This is a quote from the source code. But these are all behaviors we inherit from TeX, so I don't know how much we need to say here...). @ronkok Nice approach!. fdsymbol defines \\triangle smaller than \\bigtriangleup (but still bigger than \\triangleleft).  See symbols-a4, Table 135.  So this issue depends on package use...  Personally, I'd be fine if we just made the \\bigtriangleup/down bigger than they are now.  (We could even hack this now, by defining a macro \\bigtriangleup \u2192 \\large\\triangleup.)\nReminds me to finally make issue #793 about listing packages that best reproduce KaTeX behavior.\n(Oops, moving this over to #790). @ronkok When mentioning \\text under the Style section, is it worth mentioning that nested $...$ math is (now) also supported?. fdsymbol defines \\triangle smaller than \\bigtriangleup (but still bigger than \\triangleleft).  See symbols-a4, Table 135.  So this issue depends on package use...\nPersonally, I'd be happy if we just made the \\bigtriangleup/down bigger than they are now.  (We could even hack this now, by defining a macro \\bigtriangleup \u2192 \\large\\triangleup.)\nReminds me to finally make issue #793 about listing packages that best reproduce KaTeX behavior.. I notice that \\triangle is from the main font while \\triangledown is from the ams font.  Perhaps this is related to @mbourne's original issue?. Confirmed in LaTeX:\nlatex\n\\usepackage{amsmath,amssymb}\n\\begin{document}\n\\begin{tabular}{cl}\n$\\triangle$ & \\verb|\\triangle| \\\\\n$\\triangledown$ & \\verb|\\triangledown| \\\\\n$\\triangleleft$ & \\verb|\\triangleleft| \\\\\n$\\triangleright$ & \\verb|\\triangleright| \\\\\n$\\bigtriangledown$ & \\verb|\\bigtriangledown| \\\\\n$\\bigtriangleup$ & \\verb|\\bigtriangleup|\n\\end{tabular}\n\nIt shows that we're using the AMS fonts. \ud83d\ude03 I wouldn't be adverse to switching to other (more logical) definitions of these symbols defined in other LaTeX packages, but it would be a major font effort, so closing this for now.  Thanks for the report, @mbourne!. Testing:\n\nInstall Node 6 (in my case, I use nvm so it's easy to switch between Node versions)\nWithin checkout point_main_to_dist, run npm link\nThen in another directory, npm link katex and then try node -e \"require('katex')\"\n\nBut I get the same error.  If I change the main key to point to lib/katex.js, it works.. Tested and it works.  Thanks @kevinbarabash for implementing this!. Yeah, makes sense, as this will affect all NPM users. (on Node 6). Given our experience with 0.8 and 0.7, that sounds like a good idea. \ud83d\ude04 . Nor did I!  Here's the code.  And I guess there are matching katex-... colors in the CSS.  I'm not aware of a LaTeX package implementing this -- probably a KA thing. IMO, these might make more sense as macros.... In this case, perhaps we should accept this PR and then make a new one to rewrite \\red etc. in terms of macros?  I could use some clarification on whether those macros belong in KaTeX (e.g. for backwards compatibility) or in another KA project.. I had an idea: extract all the math from the function-support page and test it out in LaTeX.  Here's a little script, which I should add to contrib:\n``javascript\nfs = require('fs');\nlet html = fs.readFileSync('function-support.html', {encoding: 'utf8'});\nhtml = html.replace(/<script>[^]*?<\\/script>/ig, '');\nconst regex = /\\\\\\(.*?\\\\\\)/g;\nconst maths = [];\nlet match;\nwhile ((match = regex.exec(html))) {\n    maths.push(match[0]);\n}\nconst tex =\\\n\\documentclass{article}\n\\usepackage{amsmath,amssymb,latexsym,color,MnSymbol,overrightarrow,cancel,extpfeil}\n\\begin{document}\n${maths.join('\\n\\n')}\n\\end{document}\n`;\nfs.writeFileSync('function-support.tex', tex);\n```\nThis set of \\usepackages mostly works, though may not be minimal (I don't think extpfeil should be necessary but I get more errors without it...).  Still get some errors, though:\n\n! LaTeX Error: Command \\Rightarrowfill@ already defined. (package incompatibility)\n\\mapstochar used in \\xmapsto is undefined (package incompability)\n\\undertilde doesn't seem to be defined anywhere.  undertilde.sty defines \\utilde...\n\\Bbbk isn't loading for some reason, though shouldn't it be in amssymb?\n\\sout isn't defined anywhere.\n\\lt and \\gt are not defined anywhere?  Weird.  We could add them to katex.sty\nOf course \\KaTeX isn't defined.\n\n. @ronkok Nice wiki page!  I made a few tweaks to the wording.  This is probably good for now, though I still think making a contrib/katex.sty would be nice.. Thanks @kevinbarabash!  I just rebased to fix a conflict with the CJK tweak on \\dots commands.. Sorry for the delay.  Finally went through and implemented all the comments.  Thanks for the review!!  \nIncidentally, this PR also fixes a bug in master with \\text{\\v x}.  Currently, because of incorrect space handling, this renders as an accent (over a space) followed by an x.  With the PR, it renders correctly (same as \\text{\\v{x}} does now).. I was also wondering whether any background settings should be marked !important.  According to this discussion, it seems to help with printing on most browsers...  (-webkit-print-color-adjust: exact; might also be necessary somewhere...). Given that KaTeX already supports math-mode accents, we should be able to macro each Latin-1 Unicode character in math mode to the corresponding accent command (ideally with a loop over the characters and a call to some Unicode splitting).\nTo fix Latin-1 characters in text mode, we should first do #638 (text-mode accent functions).  Then we can follow the above approach.. @kevinbarabash No, macros currently need to start with \\. But we could easily add support for single-character macros (in the spirit of TeX active characters). I'll give it a try... . Moving discussion to #801. This should be fixed with 0.8.2.  (@kevinbarash, more motivation)  Meanwhile, you should be able to require(\"katex/build/katex.js\"). Same problem also with \\textcolor? . \nSeems to work fine on the demo (which is probably running 0.8.1).  Perhaps you're having trouble fetching the .svg files?  Perhaps check out Network logging in your browser?. FWIW, I tested on my own server which does server-side rendering, and it worked fine.. Which element is supposed to have border-bottom-width set?  I can't find any elements with a border, even though things render correctly for me... (on Chrome on Windows). @cjh9 If you don't need MathML, you could probably call buildHTML directly; if you want both, buildTree would be good.  If you can successfully import them (#954 might get in your way, but we'd appreciate a fix to that), then they should just work, and return the existing internal node tree data structures.\nIf they're helpful, I don't see any reason not to expose buildTree, buildHTML, and buildMathML in katex.js's module.exports, presumably prefixed with __ to make it just as scary/unsupported as __parse (though these methods are currently probably more stable than __parse).  Any objections?. @cjh9 This is now available in the master branch, thanks to #1017. The nodes are returned in a custom nested Javascript data structure (objects containing children array fields). Hope that helps! . I think pure HTML export makes sense when you're rendering it in a custom way (e.g. SVG), as you're unlikely to also be able to include MathML in that setting.  I could see either\n1. factoring out the Settings to Options conversion in buildTree so that we can write a new buildHTMLTree, or\n2. adding an option in Settings to prevent MathML creation.\nThoughts?. @cjh9 The master branch now has (via #1022) __renderToHTMLTree that outputs just the HTML part. Also, we renamed the method you were using to __renderToDomTree for more consistent naming. Hope this helps! . Now that #802 has landed, we can return to this.  Because \\' works in text mode only and \\acute works in math mode only, we'd need \\ifmmode to do this properly with macros.  (Unfortunately, the macro expander doesn't know whether you're in math mode... necessarily so I guess.)  \\ifmmode could be fun to implement, but I'm also not entirely sure that general \\if ... \\fi matching will be easy to do.  Maybe \\textormath would be easier, syntax wise.  Because of the way KaTeX functions work, it would be easy to make \\textormath{\\'e}{\\acute e} work, but hard to make \\textormath{\\'}{\\acute}e work...\nAlternatively, \u00e9 could be a macro to \\magicacute which is a function that makes an accent of \\' if in text mode and \\acute if in math mode (roughly duplicating the accent code already in functions).  Or we could do this directly in the parser.. @ronkok Probably not -- should have the same issue.  Another reason to \"wonder whether this is worthwhile, or we should correct the font somehow to make non-combining characters for these accents like we have for math mode. On the other hand, this support is better than nothing for now.\". Cool, I hadn't seen that.  Now that I understand the accent generation code, I pushed a fix which ought to work for Safari.  Can someone test?  In my experiments, 0.262em seems a closer approximation to the width of a space -- how did you compute 0.25em?. Hmm, not sure why that's not working.  Perhaps the combination of left and margin-left?  I don't think we have a choice of the type of character, if we fix the font as-is.. @kevinbarabash I'm a little confused about whether I should include the space hack in this patch at all.  My impression was that it wasn't necessary at all for Chrome, but perhaps your investigation has found that it makes it easier to get the horizontal offset more consistent?  Still grokking.. opentype.js was insightful!  I realized that most of these accent characters have noncombining versions in the current font.  I switched to those, so they should work in Safari.  The only missing one is \\H.  I still use combining characters for that one.\nI found that the width of a space (0.250em) looked best for \\H.  I would have thought something like: offset by -xMin to start at position 0; then shift back by half of the width (xMax - xMin) to center the accent.  This worked well for e.g. \\\" (not that I need that anymore), but I think only because it ended up resulting in an almost identical offset of 0.2505em...  @kevinbarabash If you understand this better, let me know if you think this offset is slightly off...\nOther changes:\n Removed the Safari hack (no more space before the accent)\n Added allowedInMathMode to forbid these commands in math mode (as they don't work there -- and nor do they in LaTeX).  This will interact with #766.\n* Added a screenshot test. @kevinbarabash Thanks for the review!  I agree that we don't need combining characters in the font, and it'd be nice to add \\H, \\\", and \\vec accents as non-combining characters.. I like the idea of Context, but beware that functions.js uses the term \"context\" for something else entirely... though potentially that could change.\nI've never quite understood why we convert options into a Settings object.  We could just do ~~settings.whatever || defaultSettings.whatever~~ utils.deflt(settings.whatever, defaultSettings.whatever) whenever checking a setting, and rename options to settings.  But perhaps that's an unpreferred style.. Sounds great!  I've noticed the slowness of this lately when testing.. The first part could be done easily with macros, if we allow single characters to also be macros (which is a one-line change, and one I'd be in favor of -- it's in the spirit of active characters in TeX).  It could still be cool as an option, but the option can be implemented by adding two additional macros.. Oops, I realize that this wouldn't work so easily... defining ( to expand to \\left( will lead to an infinite expansion loop.  Maybe the macro expander could be set up to not expand ( in the definition of (.  I don't think we want to go down the \\catcode rabbit hole.... Incidentally, once complete, this would likely produce a bidirectional map between editing/rendered subtrees and portions of the LaTeX text, which would be handy for the copy-tex module (#813): we could reasonably copy/paste portions of the equation and get the resulting subset of the source code.  A pretty minor effect, but it's currently on my mind. \ud83d\ude03 . Nice work guys!. I'm still new to Github organizations, but this sounds fine to me.  I take it that all issues etc. get preserved by the move, which is nice.  The main change is that the git repo changes URL?  A potential worry is that someone has KaTeX's git link hard-coded (e.g. via NPM -- though not sure if this works), and they need to update.  But that's the price of living on the bleeding edge, I suppose.... Nice idea to fork/link.  The NPM link comes from package.js, so if we update that and do another npm publish (presumably part of the release script), then we'll be all set.. Thanks @zhzhzoo for the detailed request!  This looks relatively easy to do, mostly by changing some regexes.  PR #814 should do it.. Now fully tested and working in Chrome (Windows and Android), Firefox (Windows), and Edge.  Can someone test Safari?\nI found that Firefox had trouble with the modern ES I used (particularly replaceWith, and in some older versions, Array.forEach), so I implemented some workarounds.\nI found that Edge didn't like being given a DocumentFragment, so I converted it to HTML.  Also, given two versions of the copy/paste buffer, it just kept the latter one.  (This is a bug in Edge.)  So I now include the HTML before the plain text, so the latter gets used for Edge.  (This actually also makes the code more efficient.)\n@kevinbarabash Agreed that pre-commit or pre-push hook would be nice!. Googling around, apparently shared-git-hooks can enforce Git hooks via npm install.. I thought it might be useful to allow people to copy/paste part of an expression (e.g. a \\text chunk), and in that case we can't get the source... but perhaps there's a situation in which you select an entire math block but it doesn't give us the div.  I'll do some more experimentation.  We could use user-select: all to force all-or-nothing selection behavior, though that might also be annoying to the user.... OK, when selecting exactly a full formula, you don't get the containing .katex div (even though it's entirely selected!).  I've separated the handling of .katex-mathml and .katex-html so that we don't need the containing .katex div.  So now, if you fully select the display formula in Chrome, you'll get $x^2+y^2=z^2 $.  I can't detect the $$ because I don't have the containing .katex-display either...  Also, if you select by clicking on the x and then dragging right, you don't end up selecting the MathML part at all, so you're back to selecting a subset of the formula.  Ouch, and this works only in Chrome, not Firefox.\nAt this point, I've gone as far as I can with this approach, window.getSelection.getRangeAt(0).cloneContents().  There are two alternatives:\n\nUse a TreeWalker.  See this guide which I've been following.  I'm not quite sure what behavior to target, though.\nDefine user-select: all on .katex and .katex-display.  Presumably just within this contrib package.  I've done some testing and this seems to work pretty well.  Just might annoy some users trying to select a piece of a big formula.\n\nProbably option 2 is best (and I just pushed a commit implementing it), but let me know your thoughts.  Of course, a developer can always choose to use the JavaScript and not this CSS, and deal with the consequences.. New commits should deal with all requested changes, in particular in documentation.  Also dealt with a small conflict on Makefile by merging master in.. @pauljadam KaTeX generally does server-side rendering, so it can't do any browser detection.  (The exception to this is auto-render, which could do this -- but many users don't use auto-render.)  Also, this would affect all iOS users, not just those using screen readers, so sighted users would get a much worse rendering experience.\nA couple of questions:\n What if we just removed aria-hidden=true?  Would that be enough?\n Is this an issue with screen readers in general, or just those on iOS?. I don't know MathML super well, but my impression is that it can never render LaTeX math as well as LaTeX does. So I think there will always be an application of rendering LaTeX to a visual language like HTML (or SVG). . Thanks for fixing this, @kevinbarabash !  Sorry the other package didn't work so well.. Given our inability to reproduce, can you include a screenshot?  Any idea what changes are in Chrome dev-channel that might cause a change here?  Perhaps the rounding rules for subpixel resolution are changing?  (That would be unfortunate...). I don't think this is particular to Messenger.  But no one has been able to track down the problem source or solution yet...  It doesn't help that most of us can't reproduce the problem.  My current suspicion is that this has to do with display DPI or something along those lines, so it's hard to reproduce.  @xsznix and anyone else who can reproduce, could you let us know your screen resolution, DPI, browser, OS?. Oops, sorry, reading more thoroughly, it does look like the container issue is particular to Messenger.  And I can reproduce it!\nI just took a quick look, and Messenger CSS has overflow-x: auto; overflow-y: hidden set.  Removing both of these fixes the clipping.  Is there a security or other concern that causes you to include those?. The main problem, I guess, is that the bounding box is somehow getting set wrong.  Because we don't normally limit overflow, we don't see this.  The strange thing is that I can't reproduce it in another KaTeX environment (like make serve), though the relevant CSS seems identical.\nA simple example is a^2+b^2=c^2.  Looking at the inspector, the vlist-t containing the first superscript has a bounding box that is not tall enough.  But somehow the containing msupsub extends the top of the box to a good place in make serve, but not in Messenger, despite no apparent CSS to do so...  Perhaps someone familiar with vlist can understand this?. The fact that 1px of padding is enough suggests this has something to do with rounding?  Perhaps related to this issue...  I'd be curious to know if it's possible to get more than 1px error.  Maybe we should have a general rule of .katex { padding: 1px 0px}?\nThe issue might be Chrome's unique lack of subpixel behavior within tables, because vlists use table formatting (since #768 which briefly discussed this issue).  While I don't see why yet, perhaps the two \"different\" issues are stemming from the same problem... (though I still haven't seen disappearing fraction lines at any scale). @jeffmcmahan  #1249 will hopefully fix this.  There's a test page on #1173 that you can check out.. Maybe you're sanitizing the HTML and removing <svg> tags (or some of the subtags)? I had this issue when switching to 0.8.  This reliance will be removed in #1249, but only for frac lines; you should whjte-list SVG tags for other features like \\overrightarrow.. Wow, these are some awesome new features! Nice work, @ronkok.. Try deleting .git/hooks/pre-commit.. Hmm, looking at https://khan.github.io/KaTeX/function-support.html, it seems the new \"accents inside \\text{...}\" section is missing <code> delimiters.  Another PR?. Fixed by #832. Thanks @ronkok!. \\fbox{\\$10,\\!000,\\!000,\\!000,\\!000} further confirms this.  Time to read up on width: auto rules, I guess.... Confirmed. Nice solution @kohler. Given that we currently forbid line breaks in KaTeX renderings, is there any reason not to make all span.mords into display:inline-block (same as span.mspace)?  Apparently the main difference between inline and inline-block is that the latter \"can have a defined width\" which I'm guessing is what's making this work (behaving correctly with negative-width children).. ~~FWIW, this bug affects $x \\bmod y$ too (because \\bmod produces a negative medium space... not quite sure why).~~ (fixed by #984). I reported this bug, which seems to be Chrome specific, to bugs.chromium.org.\nwidth: min-content, or the more Chrome-specific width: -webkit-min-content, seems to do wonders even when just defined for the .katex class (as it gets inherited).\nI've made a more careful PR for this in #1194.. It doesn't get inherited in that case -- the width would remain width: 100% -- but I think that's what we want in this case.\nPR #1194 opts for a different approach, just setting width: min-content on the root .base element.. Alas, changing .mspace from display: inline-block to display: inline fixes negative spaces, but breaks positive spaces.  So I'm switching back to the inheritance solution.... @ronkok I'm pretty sure those need to stay width: 100% so that they grow to the width of the other objects / container.  I tried setting them to width: min-content, and it results in them being zero width.  We should just need min-content for things that can have children that are negative .mspace elements.. Here's how that example renders on the #1194 branch:\n\nI've also tried more extreme forms, and the frac line is the correct length.\nI believe there's another Chrome bug that's causing some other troubles though...  If I wrap the whole thing in an \\fbox, I get the wrong box:\n\nI'm pretty sure this is a bug in width: min-content on Chrome.  It again renders perfectly in Firefox.. FWIW, I'm adding types to defineMacro in MacroExpander.js now (in #794). . I'd prefer for #794 to land first, if that's possible.  (It should be good to go, just needs a final once-over.). Maybe we can make use of assignees for PR review too?  Namely, assign it to yourself when you start reviewing.. Regarding Point 3: This was my call: I thought it was nice to be given the MacroExpander as this in the macro function (jquery style? feels more object oriented?), but I could easily see switching to an argument style -- the latter would actually be more consistent with the rest of the code base (in particular functions.js).  So happy to go either way.  @kevinbarabash opinion?. (moving discussion here) I'm not a huge fan of making those methods. (Sorry for not responding to (1) earlier.) I think all of these operations could be useful in implementing sophisticated macros... But could go either way.\nResolved in https://github.com/Khan/KaTeX/commit/3ec5c94af28c16e79eb36435362eaefdc88dd0cd#commitcomment-24115956. One question now that you have expertise on this: given the move to Flow, is it still worthwhile separating a Settings class from a settings object?  I've always felt like this was redundant, and just to get some kind of type checking, but now that we do type-checking elsewise... maybe the Settings class is no longer needed?  Curious of your opinion before opening an issue.. Long ago @gagern pointed out that these could probably mostly go into functions, because functions now have access to the parser (I'm guessing they didn't before).  Alternatively, we could extend the argument handling to support another option \"implicit\".  Haven't looked at this carefully, but this approach is one option for achieving this goal.. @marcianx Cool! FWIW, you could use bash for loops to help automate the process:\nfor a in buildHTML.js buildMathML.js functions.js\ndo\n  for b in genfrac.js katex.js lap.js mod.js op.js smash.js\n  do\n    git difftool HEAD~:src/$a src/functions/$b\n  done\ndone. @kevinbarabash Yes, or you can type it directly into your shell, assuming you're using bash (or another sh clone) as your shell.. No, #1309 only addressed the extra mrow at the top level. A postprocessing phase to address all 3 issues could probably be done at the end of parseExpression. The mtext issue in particular has use to do it in makeTextRow (similar to tryCombineChars). . Cleanup in aisle #1338.. @kevinbarabash <textarea> would be very handy when testing arrays and such, thanks!\nYou should test spacing behavior:\nlatex\n\\text{hello% comment\nworld}\nshould parse like \\text{helloworld}, but not like\n```latex\n\\text{hello% comment\nworld}\n```\nIf I understand line 67 of src/Lexer.js, the comment gets converted into a space.  This is not what we want.  Comments are used in particular to hide newlines from the bowels of TeX.. Hmm, an npm module is an interesting idea.  The copying of fonts to dist is part of npm install anyway, so we can rely on modules being installed.... FWIW, npm link offers one way to test changes between the two repos, without having to npm publish. Probably not quite as convenient as submodules though, where you have everything right there in the same tree. Submodules are also closer to our current approach. \nI do feel like it's good to optimize for people who don't care about (developing) the fonts, and there is a slight advantage there. On the other hand, it doesn't take much training to learn git submodules --update (if that's the right command).. Back to the PR, did you test npm start? (I don't know off hand whether this triggers build.)\nDo the release scripts need to change at all? . It's great that type checking is leading us toward refactoring improvements to the parse tree!  FWIW, I've found the difference between what's returned by a function (a la defineFunction) and the actual parse node (wrapping in another value, as I recall) to be confusing and unnecessary.  I think that's one of the things you're discussing fixing?. Reopening until second PR lands.. @raoulb Are you using Node 8? I think import is only available there.\nTo fix this, we might want to build a version of cli.js via Babel.. FWIW, here's how cli.js used to work:\ngit clone https://github.com/Khan/KaTeX\ncd KaTeX\ngit submodule update --recursive --init\nnpm run dist          (this takes a long time)\n./cli.js\nHowever, recently, this stopped working: now I get\n```\n.../KaTeX/dist/katex.js:10\n})(window, function() {\n   ^\nReferenceError: window is not defined\n    at Object. (/afs/csail.mit.edu/u/e/edemaine/Projects/KaTeX/dist/katex.js:10:4)\n    at Module._compile (module.js:569:30)\n    at Object.Module._extensions..js (module.js:580:10)\n    at Module.load (module.js:503:32)\n    at tryModuleLoad (module.js:466:12)\n    at Function.Module._load (module.js:458:3)\n    at Module.require (module.js:513:17)\n    at require (internal/module.js:11:18)\n    at Object. (/afs/csail.mit.edu/u/e/edemaine/Projects/KaTeX/cli.js:6:15)\n    at Module._compile (module.js:569:30)\n```\nI assume this is because of our recent move to Webpack, or maybe Webpack 4. @ylemkimon any insight?. @ylemkimon Agreed. The main thing left to do is document how to run cli.js. I've created #1483 for this.. To be clear, \\text{\u6e2c\u8a66} works fine already in LaTeX (with any CJK character); it's just \u6e2c\u8a66 in math mode that doesn't work.  I don't see any particular reason to forbid CJK characters in math mode, so we should look at adding support for that.. FYI, PR #992 adds support for CJK characters in math mode.  We're still resolving some accent-related issues there.  If they don't get resolved soon (or the PR gets rejected), I could split off the CJK-in-math-mode part into a separate PR.. The status is issue #1046, which needs discussion before change. I'd appreciate your input on that -- is there a way to get this to work in LaTeX?\n  . @tanjhysj0 On the master branch, you can set the unicodeTextInMathMode to true, and this should work.. Fixed by #1620.. * I've been unable to get \\tag to work in inline math mode (both $...$ and \\(...\\)).  I get ! Package amsmath Error: \\tag not allowed here.  So I think it makes sense to raise a similar error in KaTeX.  (Can't imagine how the styling would make sense in inline mode.)\n I also found that \\tag doesn't work in $$...$$ (same error), only \\[...\\].  Weird.  I kind of understand why, but I don't think we can/need to inherit the same limitation.\n Repeated \\tag indeed produces ! Package amsmath Error: Multiple \\tag.\n You can definitely enter math mode within the \\tag argument.  Indeed, \\tag{$\\star$} is common form.  But we support that already, if we parse \\tag like \\text.\n \\tag* omits the the parens, so we should probably support that too.\nOne challenge here is getting the CSS layout right.  To implement \\hfill <displaymath> \\hfill <tag>, I think we need flexbox, right?\nAnother challenge is carrying the \\tag, which can appear anywhere in the equation, to the end.  Variable carrying is somewhat related to \\setlength (#687), though at least with \\tag the setting is global.. @kevinbarabash Oh, right -- that's convenient!  Maybe a float would be better (with a clear afterward), so that we can push it to the next line on overfill?\nlatex\n\\[\\tag{x+y+$x+y$+x+y+x} x+y+x+y+x+y+x+y+x+y+x+y+x+y+x+y+x+y+x+y+x+y \\]\n\n@ntessore Yes, of course we can use a class like katex-tag that enables the user to restyle as they desire.  But I'd like to have a good default formatting, like we do for katex-display.. I did some experiments with this.  Unfortunately, there seems to be no perfect answer...\n1. float: right leads to bad vertical alignment: floats are always pushed as high as possible, so we can't align them to the baseline.\n2. position: absolute and position: relative can cause tag to overlap with a wide formula (no go-to-second-line behavior), and I don't see how to get it to vertically align to the baseline while also doing some horizontal centering.\n3. Flexbox seems like the best bet, though it won't do LaTeX's horizontal centering as @kevinbarabash found -- the best we can do is the equivalent of \\hfill <equation> \\hfill <tag>.  (I tried putting an invisible copy of the tag on the left side, but there are circumstances where that doesn't do the right horizontal spacing.)\nOption 3 seems the best compromise, though -- for short tags, it's only slightly off in horizontal spacing.. Here are two screenshots of Option 3 at different screen widths, showing the move-tag-to-next-line behavior possible with flexbox:\n\n\n. \\tag and \\tag* are now on master branch, and 0.10.0-alpha.. @rrandallcainc Did you intentionally close this?. Great idea!  Also, is there a way we can automatically test features supported by each?  It'd be cool to have a side-by-side table of checkboxes (and motivate future PR work).. I suspect this is either quirks mode or a failure to load the CSS file (and thus the fonts). Can you confirm that you're loading katex.min.css, and that you're using <!DOCTYPE html>?. @iwtwiioi We'll need more information to help you here. The example renders fine in the demo page.. I guess I'm confused why you think this is a bug with KaTeX, instead of a bug with your custom web browser, given that these examples render fine in Chrome, and not in your web browser.... Closing this barring further information. Let us know the result of upgrading to Qt 5.. Agreed, this sounds like a docsify issue. @tw-edu-csu-90618137 already opened https://github.com/QingWei-Li/docsify/issues/263 so hopefully it will be fixed there.  (I couldn't actually find the katex plugin... it's not in the main repo.). @redstoneleo If you happen to be sanitizing the HTML output from KaTeX, be aware that you need to allow SVG for this feature to work.  (I happened to run into this in my own project.)  Otherwise, you should be all set with \\underbrace support.. KaTeX is not properly recognizing the space between \\\\ and [b].  Note that\nlatex\n\\begin{gathered}\na \\\\[b]\n\\end{gathered}\nis invalid LaTeX.  Taking a look at this now.. Fix in #912. Thanks @konn for the bug report!. I read the security issue again and it does seem safe for our purposes, especially given that we're not using proxy features.  Added a PR in #915.. Fixed in #915. @kevinbarabash Thanks for spotting that. Indeed, it was a bug, and I added a test for it.  Spaces needed to be checked for (and ignored) also in the sup/subscript handling of parseAtom.  I fixed it, and added a test that failed otherwise.  I've searched for other places where spaces need to be ignored, but I haven't found any.... Thanks for the review!  All comments should be addressed in the two new commits.. Oops, I merged this before simplifying get.  Perhaps useful to look at the diff separately anyway.  It's in a new PR: #928.. Use {-} as in LaTeX. . Thanks @rrandallcainc for the instant review.  Somehow, last I checked, I still couldn't merge, but no problem now.  Thanks for the reminder!. @ylemkimon I believe the recent webpack revamp PRs have disabled this functionality.  Could we add it back?. #1122 fixed this. Thanks @ylemkimon!. I suspect that this is a further consequence of #824.  We're still at a loss for the right fix.\nNote that 1px in CSS does not mean 1 pixel -- it means 1/96 inches.  (On the other hand, 1px is supposed to be guaranteed to look nice.)  We'd like to match LaTeX's lengths, but we obviously want to get the browser to round up instead of down.. Just-merged #931 should fix the frac line issue, thanks to @ronkok! Please test against master if you can. . @xzel23 This PR is merged. Please open another issue, with details about how you're trying to use KaTeX.. Perhaps stylelint?  See this css-tricks.com post.  Looks like you can turn off tab support via the indentation rule.. Thanks @konn for working on this.  \\href is definitely something we should support.\nI don't understand what you mean by your three rules though.  \\href should not be setting class, should it?  Isn't that the purpose of \\class (see #90)?\nIsn't the second argument of \\href treated as if it's in \\text?  You should be able to use code similar to \\text, \\raisebox, etc. which switch to text mode.. Ah, now I understand where you're getting the classes.  (I was worried that they were being specified by the user, but rather they're grabbed from the rendered arguments.)  Now this seems like the right approach to me.  Cool!. @konn Just checking: Is this ready for review again?. @rrandallcainc I don't think so? Wouldn't it be good to test typing across all available modules?\nAnyway, not sure that's relevant to this particular PR. . Oops, sorry @rrandallcainc, now I see what you mean!  (I was looking at the Github post on my phone, which isn't the best interface, and didn't see the failed checks.)\nAs suggested in one of those threads, I added a link to node_modules/stylelint/decls to the libs section of .flowconfig and now it seems to work.. LGTM! Thanks for the pointers.. @kevinbarabash I think this is (part of?) what causes the strange highlight behavior during selection (copy/paste). But I don't consider that too big a problem. @AlbertHilb is there another application where this causes a problem? . @kevinbarabash I've removed the excess documentation and commented-out old behavior.. In the latest commit, I dropped the get() alias (opting for expandNextToken instead), renamed unget() to pushToken(), and used it in two places as suggested by @kevinbarabash (good catch!).  There is one exception: I couldn't easily change this.stack.push(...expansion) given the different argument type.  Should I change pushToken() to use arguments...?  There's also a new doc string for pushToken that'd be worth reading.. @rrandallcainc FWIW, I was actively developing static/main.js the other day (for testing of #899). I've seen it change at least twice in the past 6 months, so it does happen, and would be useful.  There is close to zero cost for watching, right?  (Of course, watching the CSS is much more important.). Given how similar aligned and alignat are, do you think the code could be shared between the two?  You can list multiple functions in defineFunction, then branch within the code (adding space only when in aligned mode, say).\nAnother question: if I understand correctly, alignat can appear only in text mode, whereas alignedat is the equivalent within math mode.  If this is correct, I think you are implementing the latter (in the same way that KaTeX currently supports aligned but not align) and it should be renamed accordingly.. Great idea @ronkok!\nGiven that this was just an issue on Chrome (and maybe recent Chrome?), I wonder if we should submit an upstream bug report too? . Wow, thanks for taking this on, @ronkok!\nWe can add unicode-math to #793 (which I or one of us should turn into a contrib file so that relevant PRs can easily add to it). . Another alternative would be to define the aliases using the macros. The slight practical benefit is that then a user could override that make with custom macros. But I don't see that actually being that useful.\nI'm fine with having the unicode symbol expand to what LaTeX would expand to, without defining the intermediate alias. Should probably document in a comment though.  . Sounds good. ~~There are now conflicts, probably from the other symbol PR I merged. Let me know if you want help resolving.~~ Turns out I could easily resolve the conflict using the Github web interface.  Nice!. @kevinbarabash Any objection to merging this to master? (now 1 month later) I don't want to overstep if you're about to release. We could do another 0.9.0 alpha/beta... (In any case, I think releasing is important to get the array bug fix out.)\nPersonally, I think changing this in 0.9.0 is fine.. I was hoping the following added tests in test/katex-spec.js would work, but I can't even get the second one to work on master (though it should)... must be a small difference in the parse tree.\n```javascript\ndescribe(\"An aligned environment\", function() {\n    ...\n    it(\"should eliminate final newline 1\", function() {\n        expect(\"\\begin{aligned}x&y\\\\&z\\\\\\end{aligned}\")\n            .toParseLike(\"\\begin{aligned}x&y\\\\&w\\end{aligned}\");\n    });\nit(\"should eliminate final newline 2\", function() {\n    expect(\"\\\\begin{aligned}x&y\\\\\\\\z&w\\\\\\\\\\\\end{aligned}\")\n        .toParseLike(\"\\\\begin{aligned}x&y\\\\\\\\z&w\\\\end{aligned}\");\n});\n\n```\nI guess we could add a test that confirms the right number of rows in the parsed align table.. FWIW, I think this rather significant bug fix is worth a release. Thanks guys for making it happen! . Merging this one given that #933 was already merged onto master.. FWIW, my impression is that the flow types can be \"preserved\" in the compiled form using comments.  (I ran into this with stylelint in #925.  We might also need to export the types, for build systems using flow, but I guess we can wait for a request about this.). Could you clarify what you're asking here?  KaTeX already outputs both MathML and HTML.  The MathML is by default hidden visually, but I believe you could change the CSS to make it render, and hide the HTML rendering.. @arshs You'll want to be careful using KaTeX in Meteor's onRendered, because that's only called once even if the template changes/rerenders. In my own Meteor project, I call KaTeX directly in a helper. . @marcianx Did you mean to request me a reviewer? I'm not actually very familiar with Flow... . Thanks again for the PR! . Thanks! Maybe the wrong code, though because the test fails now. . Yay! Unicode mission nearing completion! . The latest alpha1 release should have already fixed this. We're not yet using it on github.io.. It seems that Chrome (only) rounds down fractional line widths to zero (maybe only when they're less than 1/2, or some other circumstance).  I'm not sure whether this is against the standard, but it's definitely annoying for our case (where we try to mimic TeX dimensions).  PR #931 used some CSS magic to guarantee that the line width doesn't go below 1 screen pixel (different from 1px).  It also links to issues where this problem was discussed more.. I would have expected U+2223 (DIVIDES) to resolve to \\divides, though I guess that's only defined in a somewhat obscure package (mathabx). I think \\mvert which is equivalent to \\mid is the typical way to denote the divides operator in AMSMath.  (FWIW, mathabx's \\divides is a thinner vertical line with somewhat larger space than \\mid.)\nAlso I observe that unicode-math defines U+2223 to \\mid.  Overall I'm in favor of this.. The type conflicts are weird -- why does unicode-math redefine the type of existing characters?  I think it makes sense for us to follow the aliasing, but not redefine the types.  I find it weird that \\gtrdot and \\lessdot are \\mathbin not \\mathrel, but if AMS defines them that way, I'm fine with it.. Glad to see macros in use! \nif you'd like, check out the master branch and see if it resolves your issue. Let us know if it's not fixed and we can take a closer look. . I believe the \"right\" way to do KaTeX in Markdown is to extract the math separately, run Markdown processing, then stick the math back in (formatted by KaTeX).  This is what I do here, and eventually plan to release as a contrib module.\nMeanwhile, the behavior of \u2019 is related to the recent Unicode support that @ronkok is adding.  I'd be all for matching the behavior of LaTeX's unicode-math.sty, but it doesn't seem to define behavior for U+2019 \u2019 RIGHT SINGLE QUOTATION MARK.  So I'm not sure whether there should be a default behavior here...  I observe that \\text{\u2019} already behaves correctly in KaTeX.\nAs for the ability to define \u2019 to map to ', I believe the right way to do this would be with the macro system.  Currently the macro system can only define commands starting with \\, but a one-line change would enable defining single characters as well.  I've created #973 to do this.  There's a test in that PR that corresponds to your exact use-case.. @aterenin #973 got merged, so if you clone the master branch of KaTeX you can now pass a macro set of {\"\u2019\": \"'\"}.  Would you be able to test that this does what you want in your setting before we add it to the README?  Are there other smart quotes, perhaps double quotes, that you'd want to convert?. I created #1020 to document this approach in the README.. KaTeX supports \\kern (I forget about \\hspace, see #164). I like the idea of at least supporting a read-only \\arraycolsep; #687 is about making them changable, but it would be easy to at least add them to KaTeX as macros.  For now you could define a user macro for it that expands to the hard-coded value in KaTeX.\nAs for manually specifying \\hskipBeforeAndAfter, it would be ideal if there was some LaTeX package offering the same functionality, and then we could implement that interface. Could/have you searched for one? . FWIW, you could define a macro like\njavascript\n\"\\\\unskiparray\": \"\\\\kern-5pt\\\\begin{array}{#1}#2\\end{array}\\kern-5pt\"\nand use it like \\left\\{\\unskiparray{ll}{a&b\\\\c&d}\\right\\}.  Hmm, maybe it'd be nice to be able to define custom environments too...  (#977)\nP.S. PR #974 adds support for \\hskip (but it's identical to \\kern).. Agreed. gitlab seems to include this version of katex which clearly doesn't include \\overset, while the latest versions do.  Hopefully they can upgrade as indicated in the comments there.. KaTeX uses version numbers, but it doesn't seem to have made its way into Gitlab's code (unfortunately). But from the year, it's clearly an old version. . @ronkok Great! More motivation for this change. . I need to respond about the other issues (thanks for the review, @kevinbarabash!), but one question I have is whether the errors on misuse of \\kern (especially) and \\mkern (less so) should be turned into warnings.  We don't really care about the separation for our purposes, it's just to encourage people to use LaTeX correctly, so maybe a warning is better?  (We could still bump the version number, but maybe unnecessary to break existing code that uses \\kern{..mu}.). I addressed @kevinbarabash comments (thanks!) and switched from errors to warning when misusing mu units/mkern (and rebased to remove conflict).  I kept it an error to use \\mkern/\\mskip outside math mode, because this seems natural, and previously no kern/skip commands worked in text mode at all (which was a bug).\nThis should be ready for review again, and maybe one more iteration on exact spacing of the logos.  Then I'd suggest that I delete the old \\KaTeX code and replace it with the new macro.  (This is technically another backwards incompatibility, though I can't imagine it causing too much trouble... we could do it more slowly if desired, or provide a \\KaTeXold or something...). Here's a texdiff for \\LaTeX and \\TeX (red is KaTeX, green is LaTeX):\n\nIt appears to me that the A is slightly smaller in KaTeX, which causes the horizontal shift of the L.  I don't understand why; I confirmed that the A is in a font size exactly 70% of the T, and LaTeX says the same in its rendering:\n\\hbox(0.0+0.0)x15.0\n\\OT1/cmr/m/n/10 L\n\\kern -3.6\n\\vbox(6.83331+0.0)x5.90282, glue set 2.04997fil\n.\\hbox(4.78334+0.0)x5.90282\n..\\OT1/cmr/m/n/7 A\n.\\glue 0.0 plus 1.0fil minus 1.0fil\n\\kern -1.49994\n\\OT1/cmr/m/n/10 T\n\\kern -1.66702\n\\hbox(6.83331+0.0)x6.80557, shifted 2.15277\n.\\OT1/cmr/m/n/10 E\n\\kern -1.25\n\\OT1/cmr/m/n/10 X\nspacefactor 1000\nI also notice that there's some difference between Chrome vs. Firefox rendering (notice height of A):\n vs. \nPersonally I'd be OK with leaving it as is, as I'm running out of ideas (and time) for how to improve it, it matches the definition, and the rendering is reasonably close now.\nI've committed this as a new screenshot test so that it can be explored later.  I also switched over \\KaTeX to the new macro, and deleted the old function code.  So now the latest choice for the KaTeX logo is in the screenshot test.. @kevinbarabash Turns out those screenshots all have \\KaTeX in them, so it makes sense (in hindsight). I can see their purpose: \\KaTeX is supposed to reset the font.  The new version doesn't -- I'm working on fixing.. OK, should be all fixed now.. I added some quick tests (and rebased to remove conflicts).  Let me know if you'd like more!. Is this true even if the settings are marked !important?  (relevant to both backgrounds and shadow boxes) It seems a shame to have to use such advanced features for something as simple as a fraction... though I'm not coming up with an alternative?. @marcianx It's at least sometimes relevant, but maybe only in ms-specific rules... See https://github.com/Khan/KaTeX/issues/716#issuecomment-308818105. That page says \\enddef \"may not contain any argument parameters\". Only the \\begindef gets the arguments. . I tested that TeX input on the demo page and it works fine. So there must be a problem with how you're using KaTeX in your context.\nMaybe try to make a minimal bad example? My guess is that at least  the fonts aren't being loaded properly, as they look wrong. Check for network errors? \nNo need to do anything but renderToString. That HTML is correct; you just need to get the surrounding HTML to make it render properly. . @Reikim Without an actual example (even of a generated full webpage), I don't see how we can help debug. Perhaps you have other CSS that generates conflicting rules?\nI realize that you said the fonts are loading correctly, but the screenshot indicates that they aren't (or that the KaTeX CSS isn't setting the font style to use them, but I imagine you checked for that in Developer Tools).  Look at the 2 in particular, which is lacking the curly cue (or maybe I'm just missing it at this zoom):\n\n(I do not see where you previously mentioned success on the demo page or your own demos. Maybe I'm missing it though...). Ah, I saw that it didn't work when katex.rendering into a created element, but missed that it works when rendering into an existing element.  That definitely indicates that the fonts and CSS are loading correctly.  Weird indeed...\nCan you check that document.compatMode is \"CSS1Compat\", to make sure it's not a quirks-mode issue?. Thanks for the example!  That is pretty crazy.\nI notice now (comparing to the KaTeX demo page) that the style attributes are missing on the span children of the <span class=\"vlist\">.  That's where the vertical positioning happens which in particular distinguishes the subscripts from superscripts.  (Apologies for not realizing this in your original markup.)\nPresumably Angular is filtering this out for some reason.  You might check out https://github.com/garciparedes/ng-katex (recently linked to from the README) for using KaTeX within Angular.. Glad you found a solution! . I'm confused how you're getting that to render that at all: I don't think KaTeX supports Bangla characters at all.  When I try \\text{\u09a2\u09be\u09b2}= \\dfrac{\\text{\u0985\u0995\u09cd\u09b7\u09c7}}{\\text{\u09b6\u09b0\u09a3}}, I get KaTeX parse error: Expected '}', got '\u09a2' at position 7: \\text{\u09a2\u0332\u09be\u09b2}= \\dfrac{\\te\u2026.  Are you getting any messages in console?\nThe difficulty with supporting Bangla is that we'd need a font with character metrics.  I believe the consensus is that we'd like to do so, but that it should be an extension of some sort.  See #729 (about Persian).\nKaTeX supports mostly CJK (and soon, LaTeX-related symbols) right now, because CJK character metrics are all the same so that's relatively easy to do.. @rah4927 Perhaps expii.com modifies KaTeX, or uses MathJax as a fallback (like KA)? Not being familiar with expii.com, is there a link where we can try this?  And/or, could you post the raw HTML output (by copy/pasting from an Developer/Inspect view) instead of a screenshot?. @rah4927 Thanks for the link. If you inspect the resulting elements, you can confirm that the Bangla rendering is via MathJax. The English version is rendered via KaTeX. Do you know why?. #1046 captures the \"should \\text be required\" aspect of this issue.  Feel free to add discussion there!. Thanks @marcianx! . This is a consequence of #836, I'm afraid. (Not quite sure why \\bmod is implemented with negative space, but it is.) We still don't know how to fix it (or the exact cause). . For some reason, LaTeX (latex.ltx) defines \\bmod as follows:\nlatex\n\\def\\bmod{%\n  \\nonscript\\mskip-\\medmuskip\\mkern5mu%\n  \\mathbin{\\operator@font mod}\\penalty900\\mkern5mu%\n  \\nonscript\\mskip-\\medmuskip}\nSo KaTeX is mimicking that.  Basically, in display/textstyle, we want 5mu minus \\medmuskip (which is 4mu plus 2mu minus 1mu skip), while in script/scriptscriptstyle, we want 5mu skip.  Given the #836 bug, I think it'd be nice to remove the negative space in \\bmod.  I've created PR #984 to this effect.\nMeanwhile, you can define a macro of \"\\\\bmod\": \"\\\\kern1mu\\\\mathbin{\\\\mathrm{mod}}}\\\\kern1mu\", assuming you're not using \\bmod in subscripts.. I saw that too. Must be a bug of some sort... Should track it down.\nThe PR has the right space though. . I'm not an expert on this topic, but think this is related to #954. You should be able to import 'katex' which should already be translated to vanilla JS; it's just the submodules that aren't importable right now.. Hmm, seems there's more investigation to do.  Here's the diff between old and new screenshots (green is new):\n\nMore clear is to look at the texdiff.  Before this PR is near-perfect in the top left:\n\nAfter this PR is worse:\n\nNot sure why.  Maybe adding kerns is not equivalent.... Turns out I just failed to properly add the muspace CSS rule.  (Alternatively, we could add 1mu as a manual style value instead of using a CSS rule.)  I believe the Mod screenshots are now unaffected; this will be confirmed once Travis finishes.. 0.9.0-alpha2 is out now! Please give a try.. Either 6.11.2 or 6.11.4.\n$ node -v\n6.11.4\n$ sudo node -v\n6.11.2\nBut I think it's more a question of which Node is being used in the docker...\nI tried running node texcmp.js directly, and it seems to work in Node 6 and 8, but the error above occurs with Node 4.\nMaybe the right solution is to upgrade from Ubuntu 17.04?. I confirmed that it's the Docker that's running Node 4:\n$ sudo docker create -t -u 0:0 -w /KaTeX/dockers/texcmp katex/texcmp:1.3 nodejs -v\n7508fe8ed265d813b8621b17ec33c755f4819bf43cafa633b520226ceb4bb906\n$ sudo docker start -a 7508fe8ed265d813b8621b17ec33c755f4819bf43cafa633b520226ceb4bb906\nv4.7.2. I think we have a few options:\n1. Upgrade to Node 6 or 8.  Not sure Ubuntu upgrade would help; I think you're supposed to declare a different package source.\n2. Add --use_strict command-line option to Node\n3. Add \"use strict\" to this file (as currently in this PR).\nOption 1 is maybe best long-term, but 2 (or 3) are simpler fixes.  Opinions?. Hmm, admittedly I can't think of much in math mode beyond what's possible using array.  It might make defining some macros easier; for example, the new definition of \\LaTeX wanted fill units to vertically top align things (though it would have also needed box manipulation of some sort).  More generally, vertical alignment seems like a possible application, though it might be better to focus on \\vtop/\\vcenter/\\vbox for that...\nShould I close this issue or leave it for posterity?. Great!  Does anyone else want to weigh in on the atom types before this gets merged? Feel free to thumbs up/down this post.. @kevinbarabash Looking at the history, I realize that the \"weak\" support for Latin-1 characters (using the wrong font) is actually really old, so we should keep support for those characters for backwards compatibility.  I added a TODO comment about how they're currently supported \"incorrectly\".\nI also updated the Unicode screenshot, which shows proper support for many characters but not all (like \u00c7\u00e7).  It also highlights an issue I've known about but we should probably discuss: \u00ef renders with an accent on top of a dot (and similarly for all accented is and js).  To fix this in text mode, we need \\i and \\j support (https://github.com/KaTeX/katex-fonts/issues/2), but I added a fix for it now in math mode because we have \\imath and \\jmath.. I added a test and warning for normalize(), and tested that it occurs when using IE (but not otherwise). And switched back to vanilla for loops.. I think this is ready for final review.  We can move the tests around later (?).. That makes sense. Maybe I should try to get it working with normalize only during build, and not requiring it at run time, then. . @Syndesi I'd suggest opening a separate issue (or PR) for this idea.  Actually, there might be one; I'd need to search.  Rendering repeatedly in the browser to measure box sizes is the general approach of MathJax, which is the main reason (I believe) it's so slow in comparison to KaTeX.  It also prevents server-side rendering, which KaTeX currently supports.  So it's unlikely that this will happen, but feel free to open/find a discussion about it.. @kevinbarabash Yes, exactly. Maybe there's a src/unicode.js, which can be recompiled (e.g. if Unicode changes) via make src/unicode.js, which runs some code (e.g. src/make-unicode.js, or located elsewhere) not included in the KaTeX build, and only the latter uses normalize/unorm. Similar to fontMetrics making, I suppose -- I can look more at how that's done.\nI'd set this up only to recognize accents that KaTeX can handle, so it'd hopefully be not too large a list.  We can still handle combining characters in exactly the way of this PR, just skipping the normalization.  Instead, I think I'd define (in src/unicode.js) macros that map e.g. \u00e1 to a followed by an acute combining character.. OK, I gave a crack at this: src/unicodeMake.js generates src/unicodeSymbols.js via make unicode or make src/unicodeSymbols.js.\nMulti-accented characters were challenging to get right (glad we added a test for them!), and it turns out there are characters with two accents.  I checked and there aren't any triple-accented characters.\nI'm not sure of the best location for unicodeMake.js.  We don't have a util directory, which would be a natural place.  It could also be in the root directory.  But in src it immediately gets linted and such.. @kevinbarabash I think mainly we need to use xelatex instead of pdflatex. So I don't think we can easily get texcmp to do the work for us (at least not in the Docker, which doesn't have xelatex installed). Running node texcmp.js locally with a modified texcmp.js, I got this image:\n\nLooks like I must have to include some more packages to get Cyrillic and CJK fonts. There's also the known \"missing \\i\" and \"missing cedilla\" issues, along with some kind of horizontal spacing issue I'm not sure about.  I don't think the other differences are specific to this PR, though, but rather our existing accent mechanism.. I tried putting the accents in their own Node-style module, unicodeAccents.js. This seems to avoid all the messiness (the only blemish is one use of module.exports = instead of export default, but they behave the same). Should be good to go now.\n(I also rebased, so it will look like the old commits repeating themselves. Only the last 3 are new.). @kevinbarabash I guess for backwards compatibility, we could just let \u00ef pass through as a character and render in Times.  Would that be acceptable?  We can't otherwise fix the double accent issue in text mode (it already is fixed in math mode) until https://github.com/KaTeX/katex-fonts/issues/2 gets solved.\nI'm guessing that the squishing of the accents on capital letters is also some kind of font issue (another symbol that we need), but I don't actually see where it's implemented in LaTeX...  I just see \\DeclareTextAccentDefault{\\'}{OT1}.  Dot size is presumably also a font issue...\nThe horizontal spacing is definitely something that can be fixed.  It's an existing issue with \\acute{i}, \\acute{\\imath}, and \\text{\\'i} in KaTeX, not new to this PR (but this PR exacerbates it to apply to \u00ef as well).  I think we just never handled the case of the innards being less wide than the accent.  I'll take a look... But we could also leave this to another PR, if we hackily let \u00ef pass through.. I looked into the horizontal spacing issue, and summarized in #1028. I don't think this will be a quick fix, unfortunately, because I think it needs the accents' width to be added to fontMetricsData.js.\nBack to this PR, I just discovered Latin-1 characters listed in fontMetrics.js.  They should be removed during this PR, with the possible exception of \u00ef.. The last three commits fix the following:\n Accents on i now use \\i in text mode and \\imath in math mode; actually they do this via the Unicode mechanism. This fixes one of your starred issues.\n Remove the extra character mappings in fontMetrics.js that I pointed out in my previous post.\n* Fix a mistake in the Latin-1 coverage test (wasn't testing math mode), which led to fixing an error for \u00c5\u00e5 (which we want for backwards compatibility, but can't do \"properly\" because KaTeX (and LaTeX) lack this accent in math mode).\nIncidentally, I tried xelatex (with \\usepackage{unicode-math}) on the following simple test: H\u00e9llo \u00c5\u00e5 $\u00e9\u00c5\u00e5$ and none of the Unicode characters in math mode worked... maybe I'm missing something?\nSo that mainly leaves the width of accented i issue.. #1033 should fix the \u00ef width issue.. New texcmp with #1033 merged (via rebase):\n\nReady to merge?  Still the cedilla issue and accent-on-capital letter issue, which we can add.  (Neither specific to this PR.)\nI also added support for accented Greek letters, as I recalled/noticed there are a handful of those as well.  (I didn't add e.g. Greek Capital Letter A(lpha) with acute accent because we don't support Greek Capital Letter A(lpha) yet.)  @ronkok Does unicode-math or something alias that character to a Latin A?. @ronkok I was indeed referring to U+0386 \u0386 which is \"Greek Capital Letter A with acute accent\" according to this list. (I assume A means Alpha here, though I'm no expert.) I see that other lists call it \"GREEK CAPITAL LETTER ALPHA WITH TONOS\", but it does canonicalize into U+0391 (Greek Capital Alpha) followed by U+0301 (combining acute accent). There are similar \"Latin-looking\" (and thus no-LaTeX-macro) characters \u0388 \u0389 \u038a \u038c \u038e.  But if LaTeX doesn't support them, fine for us not to.\n@kevinbarabash Thanks for pushing and helping to make this PR so much better! Together with @ronkok's Unicode symbol support, the next KaTeX release will be really Unicode friendly!. @ronkok Sounds good! For this PR, the new single symbols should all be in src/unicodeSymbols.js. They currently work in both text and math mode (but I'm not sure they should work in math mode -- see #1046). In addition, the combining characters for all the supported text and math accents work, as listed in src/unicodeAccents.js.  In addition, #1030 added \\ae, \\AE, \\oe, \\OE, \\o, \\O, \\ss and their Unicode equivalents to text mode.\nThanks for continuing to keep the documentation up-to-date!!. @Jenyay Also, could you upload an actual screenshot?  It's possible that this is still a consequence of #735 if the right shift ends up pushing it outside the rendered rectangle... maybe try \\vec{a}\\vec{a}\\vec{a}\\vec{a}.. FWIW, I implemented \\TextOrMath (a 2-argument macro in base LaTeX which expands to the first argument in text mode and the second argument in math mode, basically an easier-to-parse LaTeX equivalent of TeX's \\ifmmode) in this older accents branch (as an alternative way to do #992, but which I thought would end up too heavy as it made several hundred macros, one per accented character).  It has the following problem, though:\n\n\\TextOrMath currently is implemented as a function because the MacroExpander doesn't (yet) support knowing whether we're in math or text mode. If \\TextOrMath were a macro, we could do things like \\TextOrMath{\\'}{\\acute}e. As it stands, we have to do things like \\TextOrMath{\\'e}{\\acute e} (i.e., each argument must be a full chunk of LaTeX).\n\nGiven this limitation, I'm not sure it's worth adding.  Unfortunately, I'm not sure how to fix this limitation unless we change all functions into macros (as they are in LaTeX).  This is somewhat of a particularity of math mode.. Conditionals that involve changing things might be hard to get correct without more exactly matching LaTeX semantics.\nReviewing some older issues, I noticed that #924 is a (probably minor?) bug that probably can't be fixed without changing functions into macros.\nIn general, I believe it's all in the subtle details.  But makes it harder to implement certain functionality as macros.. @kevinbarabash I've admittedly never dug this deep, but I believe the answer is that there are some commands which are not truly macros -- they have side-effects -- in particular one called \\output that sends stuff to the DVI/PDF output file.\nThinking more, there does seem to be a real difference between \\frac, whose arguments must be complete expressions, and \\TextOrMath or other conditionals.  So maybe the separation between macros and functions isn't so bad... but I think we need tighter integration between MacroExpander and Parser.  If MacroExpander knew about functions, it could plausibly grab functions and their arguments (instead of it being Parser's job) to solve #924.  And maybe Parser could reveal to MacroExpander whether we're in math vs. text mode, to enable e.g. a \\TextOrMath macro.. You can use \\begin{aligned} within math mode. Does this suit your purpose? . If the formulas are already supposed to be in math mode, then you should be using aligned instead of align.  Yes, a regex would work.\nIf you have \\begin{align} ... \\end{align} at the text level, i.e., instead of \\[ ... \\] or something similar, then that is at least correct at the LaTeX level, and you're really looking for a solution to #604. Until that time, a regex replacing \\begin{align} with \\[\\begin{aligned} and \\end{align} with \\end{aligned}\\] would work as a stopgap.. @aaumar Could you provide a complete example of a formula that doesn't work?. @aaumar I'm guessing you meant to have arguments on the array, like\nlatex\n\\begin{array}{ll}\n/Cr_2O_7^{-2}+14H^++6e&\\rightarrow 2Cr^{3+}+7H_2O &\\,|\\times 1\\\\\\ \n\\underline{AsO_3^{3-}+H_2O &\\rightarrow AsO_4^{3-}+2H^++2e} &\\, |\\times 3 \\\\\\\nCr_2O_7^{-2}+3AsO_3^{3-}+8H^+&\\rightarrow 2Cr^{3+}+3AsO_4^{3-}+4H_2O\n\\end{array}\nThis code is invalid LaTeX.  I just checked, and LaTeX gives an error of ! Extra alignment tab.  Why is complicated (it has to do with the definition of &), but this is why it doesn't work in KaTeX too.\nI'm guessing you want to underline those two columns (including the space between them, otherwise you could \\underline the two cells individually).  In LaTeX, you'd probably do this with \\cline.  Unfortunately, KaTeX doesn't support that yet (#269). Some day I hope.... @aterenin Awesome feature addition! Thanks for working on this.\nIn #585, I concluded that we should aim to support \\bm, as it seems to be the main option recommended these days.  This visual comparison suggests \\bm and \\boldsymbol are extremely close, perhaps only differing in italic correction?  Personally I'd be in favor of adding an alias within KaTeX making \\bm and \\boldsymbol the same, and when we have time, we can try to implement the subtle nuance between the two.... Great idea to tackle this!  I'd rather do something fully LaTeX compatible.  According to this, there seem to be two main packages for automatic line breaking of equations (which we could try to implement support of in KaTeX):\n breqn\n autobreak\nThe autobreak package sounds similar to your solution, in that you need to add explicit candidate line breaks.  But it does so with \\n, a bit of a weird choice...  Maybe worth checking out breqn in more detail.. I looked more closely at both and agree with your assessment. autobreak seems relatively clean in design (though I'm still a little confused how it interacts with arrays) and hopefully not too hard to implement. I'm a little surprised that there isn't a way to automatically wrap all display math in \\begin{autobreak}, but this does give more control (especially as relates to arrays). . @ylemkimon Lots of npm scripts are mentioned in CONTRIBUTING.md, but the screenshot ones aren't.  (Though the steps seem reasonably documented.)  Could you add a few explicit npm run ... lines?  (Ideally all npm scripts would be mentioned here...). Yes, those go within <head>. To then autorender math in your HTML, you'll want to also include the KaTeX autorender script and call it, as described in the autorender documentation. Let us know if you have trouble. . No, it's not (and for merge conflict sake, I don't think we want to).  It's in the release.  Is there an NPM-based badge tool?. ~~Oh, it's on master too -- presumably from the last release.~~  I stand corrected!. @daniellimws No, we shouldn't have to remember anything. It could be part of the release script, though.. @ronkok Indeed, I'd tried that hack (based on the MathJax hack, which I think you originally pointed me to) in an intermediate version of #802, and also couldn't get it to work.  (I think MathJax has the luxury of doing different things depending on the browser.  KaTeX can't do that, offline...)  Thanks for finding another way!  Given that most (long) accents are now drawn in SVG, this seems like a nice fix.\nJust to point out: There is an alternative, to modify the font so that it has a non-combining version of the character.  This is why \\acute and all other accents work (I assume) in Safari.  But I have never touched the fonts, so don't know how hard this approach is, or which is preferable.. Well, the screenshot tests reveal the problem with this approach: negative padding isn't possible, so negative kerns fail.\n\n. I found an actual fix (included in the latest commit), though this one feels a bit more hacky: represent \\kern as an object with manual margin-right.  This should avoid stacking conflicts because the CSS spacing rules always assign a margin-left to the second object.  And because it's a margin, it can be negative.  Screenshot tests now seem to work.. Screenshot test added (with slightly different order of lines).  Here's a texcmp, which looks pretty identical:\n\n. @kevinbarabash Sounds good! Feel free to start a new PR to replace this one, or appropriate this PR.. @rrandallcainc I think because we haven't released a version with this change (right?) it's probably OK, though obviously not ideal.. How about the following?\n __getBuildTree \u2192 __renderToDomTree (by analogy to renderToString)\n generateBuildTree \u2192 renderToDomTree\n __getBuildHTMLTree \u2192 __renderToHTMLTree\n generateBuildHTMLTree \u2192 renderToHTMLTree\nHmm, maybe we should have renderToMathMLTree and/or renderToMathML.  I guess we can wait for someone to request that feature.. OK, I did the renames. I also added some clarifying documentation so it's clear what the different functions provide.\nIt occurs to me that a \"no MathML\" option would still be neat in that it would allow renderToString to also render HTML only.  But maybe it's best not to encourage that behavior...  One can achieve it now via __renderToHTMLTree(...).toMarkUp().. @rrandallcainc Thanks for the quick review! . I'd suggest that a good starting point would be to do an example, like the one above, and see how you could tweak the CSS to get it to render as desired.  I think the main change is that something at the top level needs to be something other than display: block, and the lines need to be assembled into display: block...\nautobreak seems to work in each cell of an aligned environment.  Probably we could support that too, but it may require another \"top level\" (cell) to be something other than display: block.\nRelated: It occurs to me that LaTeX does support automatic line breaking for inline math.  (autobreak is mainly for display math?)  Perhaps this could be implemented at the same time, or perhaps it is another issue?  Here are some experiments:\n```latex\nHere is a long line of text.\nHere is a long line of text.\nHere is a $x+y+z+w+a+b+c$. % auto breaks after z+\nHere is a long line of text.\nHere is a long line of text.\nHere is a $xyzabcdefghijklmnopqrstuvwxyz$.  % doesn't auto break\nHere is a long line of text.\nHere is a long line of text.\nHere is a $xyzabcdefghij\\allowbreak klmnopqrstuvwxyz$.  % auto breaks at \\allowbreak\n```\n\nIn my opinion, this aspect would be super useful, and is probably what #327 is looking for.  (Incidentally, that issue also has some starting points for CSS tweaks.). @aterenin Sounds great!  Let's leave the inline case to #327 then.\nOne thing: given that KaTeX doesn't support \\begin{align} ... \\end{align} -- I generally recommend replacing it with $$\\begin{aligned} ... \\end{aligned}$$ -- it would be nice if autobreak could work within aligned, in the simple ways you mention.  But maybe that's a second goal, not the first.  KaTeX's array code probably won't play well with flexbox, because it wants to know vertical layout.  I've wanted to replace arrays with CSS tables (though I'm not sure if this is possible) -- after such a change, it might be feasible to do this.. @janosh Inline math ($...$) now has automatic line breaks in KaTeX like LaTeX does it.\n@aterenin, any updates on autobreak in display math ($$...$$)?. Wow, the power of tests. DashesAndQuotes was a nice easy fix pointing out incorrect mode detection for the ligatures (obvious in hindsight).  Unfortunately, the Colorbox issue is exactly the missing part of this PR, switching to text mode for a single-symbol argument (here, x).  So maybe I should try to do that before this PR gets merged; otherwise, this PR would regress behavior a bit.. @kevinbarabash Thanks for investigating!  This partially fixes the single-symbol support, basically whenever the single symbol is not a macro (not expanded by the MacroExpander).  I'm glad this makes it mergable (backwards-compatible); now I'll open an issue for the remaining challenge of single-symbol macro.. This is the same issue as #836. Unfortunately, we haven't been able to find a good fix yet. Let us know if you come up with some ideas.... @kevinbarabash What are your thoughts about supporting these commands in ~~text~~math mode?. @kevinbarabash \"LaTeX throws warnings (LaTeX Warning: Command \\ae invalid in math mode on input line 7.) if we use these commands in math mode, but technically it does support them (generating textords).\". If they're specified as textords, I thought they'd be rendered in text mode using text fonts. I could be wrong though. (That is also what LaTeX does: it renders them in Roman font by default.) . @kevinbarabash Can you confirm whether \\H used to work correctly in Safari? I would have guessed not (at one point I tried to copy the old mechanism from \\H to \\vec, and I don't think that worked, even though they're effectively the same).  If my guess is correct, then I think it's safe to merge this PR.  Otherwise we have a small regression, and I leave the decision (whether to wait for \\H noncombining symbol) up to you.\nI pushed a tweak to the comment.. ~~Don't we already support those commands? We have CSS margin-left rules to implement them.~~\nOops, just saw the MathML tag. . Nice find. Be sure to add a test for this too!. KaTeX does not offer implement any kind of upload support; it's just a rendering engine.  Perhaps this would be better posted in another forum, though without further context I'm not sure where to redirect you.  Where are you trying to upload files?. @kevinbarabash Added. I don't usually use NPM 5; I'll have to start. Luckily, Travis does, which will avoid this \"surprise failing\" issue in the future.. @kevinbarabash Nice idea. Perhaps unicodeTextInMathMode, where false means LaTeX/XeTeX compatible and true means MathJax compatible? Should the default be false? The differences from current master would be:\n When unicodeTextInMathMode is true, CJK and other similar languages get added support in math mode (as requested in #895).\n When unicodeTextInMathMode is false, \u00e9 and other accented characters from unicodeSymbols.js would stop working in math mode. Note that this is a backwards incompatibility with some 0.9.0 alpha/betas, so we should try to resolve this before 0.9.0 final.. I drafted up a PR: #1117\n\nWe can always go straight to 0.10.0-alpha.\n\nTrue, but it seems nicer if we don't release a non-alpha/beta version with new features which we then remove in the next version (even though it still satisfies semver).. Great! When I was working on this code for #1033, I felt it would be nicely separated. Leaving to @marcianx  to review with his fancy diff tool (though I should learn to do it too).. Good point! This does make it difficult to get started using KaTeX; and I've definitely wanted a copy/pastable complete example for this purpose before myself. I've created #1050 as a first stab at this. Would you like to take a look and see if that would have helped you?. @ronkok I have a theory: the static/fonts -> ../submodules/katex-fonts/fonts symlink isn't working on Windows.  Can you confirm that you're on Windows?  Can you check what static/fonts looks like?. @kevinbarabash Sounds like a good plan. The symlink was convenient for not changing old paths, but shouldn't be necessary, so let's avoid them. . @ronkok You will have to run git submodule update --init --recursive and possibly before that git submodule sync.. Is there not a standard hook for doing this automatically?... Would be convenient, but I also haven't seen it elsewhere, so perhaps it's harder than I think.. I believe \\eqno is the TeX analog to LaTeX \\tag, previously requested in #899. I've done some work on it, but it's not ready yet. If you have some feedback on the approaches listed there, I'd appreciate it.\nYes, you can define macros, as described in the README.  For example, you could specify {\"\\\\eqno\": \"~~~~\"}.. Old-style font commands were added in version v0.8.0 (2017-08-11). Perhaps you're using an old version? Your example (without the $s) works fine on the test page on https://khan.github.io/KaTeX/. I've created https://github.com/KaTeX/katex-fonts/issues/9 to add these to the fonts.. Having an async example sounds cool. Calling autorender or whatever upon load event sounds perfect.. Awesome work as usual, @ronkok.\nIs the beta version on the demo page yet? . @librilex I believe the demo site is not on 0.9.0-beta yet, which is why \\text{\u00c5} is rendering differently from \\text{\\r A} in your examples.  (It shouldn't, and doesn't on master.)\n@DominikRocek \u00c5 is currently supported in text mode, but not math mode, because the \\r accent is supported in text mode but not math mode.  Are you wrapping it in \\text?\nDevelopers: Should we consider making \u00c5, and other false Latin-1 characters that we added for backward compatibility, cause a warning in math mode, given that they render incorrectly?. Sounds great! Just checking: Does require('katex') still work on Node as it did?  We'll definitely want to do another beta (not final) release with this new system.. Thanks for the typo fix, and quick review!. Here's the current state for http://localhost:7936/?text=%5Cbegin%7Bmatrix%7D%0A%5Ccopyright%5Csmall%5Ccopyright%5Cfootnotesize%5Ccopyright%5Ctiny%5Ccopyright%5C%5C%0A%5Ccopyright_%7B%5Ccopyright_%7B%5Ccopyright%7D%7D%0A%5Cend%7Bmatrix%7D%0A :\n\nIt looks like \\llap is resetting the font to normalsize. ~~This seems to be a bug in \\llap, because LaTeX doesn't work that way.~~ Er, it's more complicated than that... \\small doesn't actually affect math font size in LaTeX, but does affect the text in \\llap, while \\llap does include the normal/script/scriptscriptstyle:\n\nlatex\n$$\n\\begin{matrix}\nx\\rlap{x} & \\small x\\rlap{x} & \\footnotesize x\\rlap{x} & \\tiny x\\rlap{x} \\\\\nx\\rlap{x} & \\scriptstyle x\\rlap{x} & \\scriptscriptstyle x\\rlap{x} \\\\\nx\\rlap{x} & _{x\\rlap{x}} & _{_{x\\rlap{x}}} \\\\\n\\end{matrix}\n$$\nHere's KaTeX's rendering: (sorry, I'm on Windows right now, so fonts aren't loading)\n\nIncidentally, LaTeX does some weird stuff with resized copyrights.  Here's the first example:\n\n. I revisited this, implementing an actual \\textcircled command as an accent, like in LaTeX.  This accent seems to behave differently from all other accents in that its width contributes to the width of the final symbol (cf. #1033), and it is never offset vertically.  I'm not sure what triggers this in (La)TeX, but I'm calling this a \"full\" accent barring a better name.  \\copyright behaves very well now, as does \\textregistered:\nlatex\n\\copyright_{\\copyright_{\\copyright}} \\small \\copyright \\tiny \\copyright\n\nThis should be good to go, unless someone knows better terminology for this type of accent.  Oh, also need to add tests.. For reference, here's a texdiff on the #1295 branch.  I'm not convinced it's much better... but hopefully easier to fix?\n\n. ~~I've tracked the bug down to these lines of buildCommon.mathDefault~~. The bug seems to stem from the choice of font. $A$ renders an A in font family KaTeX_Math style italic, while $\\textit{A}$ renders an A in font family KaTeX_Main style italic.  KaTeX correctly detects this, and uses the differing metrics already in fontMetricsData.js (65 = ASCII for A):\njs\n    \"Math-Italic\": {\n        \"47\": [0.19444, 0.69444, 0, 0, 0],\n        \"65\": [0, 0.68333, 0, 0.13889, 0.75],\n        ...\n    }, ...\n    \"Main-Italic\": {\n        ...\n        \"65\": [0, 0.68333, 0, 0, 0.74333],\n        ...\n    },\n0.13889 is the correct skew.  0 is not.  0.75 is probably the correct italic correction.\nI assume the choice of fonts is \"correct\" (though we could of course use the math font for a letter A if we wanted...), so the \"real\" problem is the font metrics.  @kevinbarabash, any idea why the font metrics for Main-Italic would be different from the font metrics for Math-Italic, when the symbols look the same?. @ribrdb I would create a new issue, as that sounds much easier to fix. Please let us know what symbols specifically. Thanks! . Sorry, I meant: if there's an existing currency symbol such as \\pounds that isn't working in text mode but should, then let us know in a separate issue. But yes, for these new symbols, adding to math and text mode are equally difficult and this is the issue for both. . #1073 points out some inconsistencies (compared to LaTeX) in the font size when using \\llap. Will this PR help with this? Or perhaps unrelated.. #1249 (also in 0.10.0-alpha) addressed the first part. @ronkok did you still plan to tweak \\sqrt? Would anyone else on this thread like to retest on the latest KaTeX to see if the issues are resolved?. Great! Marking this resolved. Feel free to open a new issue if there are any remaining problems.. To me the PascalCase examples are striking because they match the name of a class defined in the file. I'd prefer to keep these, and leave the rest as camelCase for consistency. But I don't feel strongly. . On the other hand, I find it pretty annoying that dockers/Screenshotter is capitalized.  There doesn't seem to be any motivation for this, and I constantly mistype it.  Any objection to changing that one to lower case?. @kevinbarabash \u00e9 and other accented Unicode characters currently work in math mode, and this PR breaks that (to match XeTeX behavior).\n@ylemkimon Hmm, probably not... Really, they shouldn't be supported at all right now, because they're not in the fonts. But maybe we can try to predict the future where they are in the fonts. ~~I don't think we'll ever support \u00c5\u00e5 in math mode, for example, because math mode just doesn't have that accent (in LaTeX). So maybe we should just fully drop support for them now (in math mode only)?~~ Scratch that, now we have \\mathring! (#1125)\n\u00c7\u00e7 and the other characters ought to be supported (by the font) sometime soon, but is blocked on https://github.com/KaTeX/katex-fonts/issues/2 and https://github.com/KaTeX/katex-fonts/issues/25 .  I tested in XeTeX, and $\u00c7\u00d0\u00de\u00e7\u00f0\u00fe$ renders \u00f0 for some reason but none of the others.  So we could keep these in the text symbol list, but drop them from the math symbol list. I'd personally be a fan of just dropping them altogether from math support.  Or we could manually somehow add math support when unicodeTextInMathMode === true, I guess.  Votes?. @kevinbarabash That's fine, though personally I'd lean toward reducing the number of backward-incompatible changes (with non-alpha/beta changes).  I'll revise this PR today for consideration, but also fine to wait on it.\nPersonally I actually prefer the current KaTeX behavior of \"just working\" with Unicode.  It's a shame that LaTeX can't do that without a lot of work.  Maybe the default unicodeTextInMathMode should be true?  Or maybe we can change it to that once we can provide a katex.sty file that does accent mapping for text characters.... I removed the special handling of \u00c5 and \u00e5.  (This should really have been done in #1125. Sorry!)\nI also realized (thanks to some additional tests) that \u00f0 was being handled twice -- once in the \\eth definition and once in extraLatin.  I split this out (we still need an \"extra\" definition for \u00f0 for text mode, for now).\nI think the commit for the above changes should be merged before 0.9.0 final, if possible, as they are bug fixes.  I can split this into a separate PR if you prefer.\nThis PR is also ready to go.  It now checks for extraLatin symbols and rejects them if they appear in math mode when unicodeTextInMathMode is false.  When we eventually remove extraLatin, we can remove this check.. I didn't want to kill our \"good first issue\", but it had been a while and no one else was doing it. \ud83d\ude04 . We can change make unicode (I think the only Makefile rule that I added) into npm run unicode (i.e. a script) or something similar.. Wow, thanks for the heads up about \\mathring! Other than \\H, it was bugging me that this accent was text-mode-only. I'm adding support for it now, and it renders correctly.. @akalin Your non-hack version should work now, on the master branch.. Related to #1031 (which should maybe be done first / at same time? or in any case we should build that general module).. Sorry, missed the request to review this a second time. Can you resolve the conflicts first?. Can we add a custom lint process? . Is there a nice way to turn on recursion by default for a user or repo? . @ylemkimon Sounds nice.. It sounds like you're looking for an index of the feature requests (say, \"regular LaTeX features\") that are in the issues? (Unless you have in mind a way to also find LaTeX features we're missing that are not yet issues...)  I worry about keeping such a list up-to-date...  Maybe if there was a tag on issues for \"missing LaTeX feature\", we could link to the list of them (as opposed to the entire list of issues, which has many other KaTeX-specific things on it).\nCould you walk through a use-case where you want a list of missing features?  My impression is that most users who are considering KaTeX just try it out and see if it's missing anything they need, and if so, they search for that feature in the issues (it's usually clear that some \\command is not supported), follow it, and/or report it as a new issue. Then we try to add it when possible...  Personally, KaTeX has basically all the features I want, and the many users seem to agree...\nPersonally I'd be more interested in some way to automatically detect (and list) features supported by MathJax (say) but not KaTeX.  Not sure how difficult this would be.. I'd say we should ideally support both.  We already support \\over and \\atop (which I'm very happy about, as I use those myself day-to-day -- I find they are more intuitive than say \\frac).  It also shouldn't be hard to support one given the other (and I'd be happy to work on that aspect of it, as I've added these kinds of implicit-argument commands before).  But \\genfrac sounds like a good starting point!. Personally, I find the AMS's deprecation of a standard TeX/LaTeX feature kind of obnoxious, even if it is well-intentioned.  Many users don't \\usepackage{amsmath}, so they don't even have a choice here.  I believe KaTeX should be agnostic on these points (we shouldn't deprecate them), in particular because it's unlikely that KaTeX-level macros will get into the issues mentioned.  But it certainly wouldn't hurt to link to the AMS document for reference.. I don't believe you. \ud83d\ude04 I just tried the first example, in actual LaTeX, and both $\\sqrt$ and \\(\\sqrt\\) generate errors:\n```\n! Missing { inserted.\n\n                   $\nl.8 $\\sqrt$\n?\n! Missing } inserted.\n\n                }\nl.8 $\\sqrt$\n?\n! Missing { inserted.\n\n                   $\nl.10 (\\sqrt)\n?\n! Missing } inserted.\n\n                }\nl.10 (\\sqrt)\n?\n```\nOf course, TeX does its best to fill these in, and adds a blank argument (so it becomes \\sqrt{}), but I don't think KaTeX should support this.  I'm pretty sure that's what's happening in the \\frac example too -- TeX is just doing its best and adds another blank argument.\nI haven't tried the other examples, though, so feel free to argue for more specific examples.\n. Sounds good; thanks for checking!. I'm late to this party, and just discovered that I can no longer npm run jest to run the Jest test.  I can see the elegance of the new naming scheme, but I find them a bit tedious to type...  Thoughts on adding aliases of jest -> test:jest etc.?. FWIW, that code should be\nlatex\nT+\\mathrlap{\\overbrace{\\phantom{a_0+a_1+a_2+\\cdots+a_k}}^m}a_0+\\underbrace{a_1+a_2+\\cdots+a_k}_n+f\nI confirm that I see the same as your first image, which is buggy.  (I couldn't get the example with $ to work, even with \\$.  But LaTeX renders it like your second image.)  My guess is that the height of the \\phantom is somehow not getting incorporated into the height computation of the \\overbrace... but this will require some investigation.. @ronkok Nice! So it's the HTML vertical bounding box being incorrect, not that the height value isn't getting set?. Leaving this open until the PR gets merged. . I just posted over in https://github.com/goessner/mdmath/issues/35 but to repeat here: \\boldsymbol got added in KaTeX v0.9.0-beta (also the recently released v0.9.0), so you just need to upgrade to add \\boldsymbol support.. @sjorsvanheuveln None of the authors of that package are developers of KaTeX. I'd suggest posting an issue there, or someone could send in a PR.... If react-latex works well, we should probably link to it in the KaTeX README next to ng-katex.. @kevinbarabash Done. This has revealed more bugs, which I'll take a look at later.. @kevinbarabash I meant bugs in this PR.  I just merged with the many changes on master, and will take another look at this.  CircleCI's screenshot diffs will help too!  Here are the diffs, for the record:\n\n\n\n\n\nSpecifically, Dots and NegativeSpaceBetweenRel seem ~~broken~~very different, and I should check whether the ArrayMode tweaks are for better or worse.. I finally took a look at these.  It turns out that the big changes are actually bug fixes!  NegativeSpaceBetweenRel was particularly broken -- the negative space wasn't rendering!  Not sure how we missed that (perhaps a side-effect of the line-breaking code?).  But I'm glad this fixes it.  And Dots was similarly missing a negative space (\\!).  Here are texcmp outputs against the new behavior, confirming they are correct:\n\n\nArrayMode has minor changes, and the texcmp (below) is so far to not be very revealing.  But given that the other changes are substantial improvements, I'd say we should merge.\n\n. @kevinbarabash Oops, fixed!. @kevinbarabash Thanks for spotting those -- not sure how I missed Mod in particular.\nhttps://github.com/Khan/KaTeX/pull/1156/commits/c6f3a7aec38e72b0af746769094060e0a07297d8 recompiles the Unicode-chrome screenshot.  This was caused some unfortunate nondeterminism in the screenshotter loading the supporting fonts, as evidenced by the screenshot tests actually passing with the wrong image!  But now it's the correct image, phew.\nThe problem with the Mod test is that the various mod operators created manual elements of class mspace with various subclasses to do the spacing.  It seemed quite a bit easier to start over completely, and reimplement the mod operators (amsmath versions) via macros.  It was quite easy, and cleans up the code further.  This is https://github.com/Khan/KaTeX/pull/1156/commits/2bb10f724e92f8209887e868d741779c8fdc98e5 . And now Mod doesn't differ at all!\nModScript seems to have an issue though, which I'm still looking at.... Fixed ModScript; I just had to remember what \\nonscript meant again. \ud83d\ude04 So glad we have \\mathchoice now!  But I might try to implement \\nonscript in a future PR.\ntexcmp for a slightly tweaked (single column, left justified) ModScript test:\n\nFor comparison, here's what the texcmp for master branch looks like:\n\nOur spaces seem smaller than LaTeX's in both cases, but the changes from this PR seem like a step in the right direction.  (And the script fonts are so different in LaTeX vs. KaTeX that it's difficult to know the precise cause.  Maybe even ems are wrong in our script font...). @kevinbarabash Thanks for the review!. Agreed! I confirmed that this works in LaTeX. Fixed in #1159.. I added a simple test to the LowerAccent one which currently tests \\underline. Let me know what you think!. Hard to tell without more information, but I imagine if there's any input to katex.render/katex.renderToString that can output a <script> tag, that'd be a bug in KaTeX. (Of course, gitter also shouldn't be relying on this, and should be sanitizing the output of KaTeX too... I certainly do this in my own project, though it'd be helpful to have guidelines for what to whitelist for KaTeX to work.) @kevinbarabash Are you suggesting that's not the case, and it's some other workaround that avoids calling KaTeX?. I would hope/expect Gitter isn't using the autorender extension, but rather calling katex.renderToString before rendering the LaTeX source to DOM.  Can anyone confirm/deny this?\n@pascalwhoop I don't see why the error needs to be sanitized by KaTeX. No KaTeX code will render the error to HTML. At worst, it is printed as a console message.\nI definitely don't understand how the leakage of HTML is happening.  Feel free to email me details so I can investigate.. Cool, glad we could help track it down.  To help avoid this in the future, I've added a paragraph to the README talking about what's safe and what isn't in PR #1161.  Reading it over and critiquing would be appreciated!. That's true, although even for non-malicious inputs, failing to escape can lead to incorrect HTML.  So it's useful more broadly too.  Maybe I should revise in this direction.... OK, I split the text into a \"Security\" subsection (with positive claims) and a \"Handling errors\" subsection (which should apply whether you're worried about security or not).  Let me know whether you like this better or worse.. Screenshots updated.. I tried regenerating twice, and always got the same screenshots.  Merging with master changed things, but the screenshots I'm generating still seem different from both Travis and CircleCI...  weird!  @kevinbarabash can you try?. @kevinbarabash I suspect you're right. It's weird code, as Lap_alt-firefox.png is out-of-date with respect to Lap-firefox.png, so it's obviously not currently matching.\nHere's are the diffs between the screenshots we're generating and the ones CircleCI does:\nChrome:\n\nFirefox:\n\nSo it does seem to be a vertical shift.  We could add alt images from CircleCI, and tweak the code to accept either one, but it's a little unsettling...\nFWIW, I tried using the --wait=1 delay locally, and it had no impact.  I've tried several times.  I also tried clobbering the docker image and redownloading.. I did confirm that updating Firefox changed the image (but haven't checked whether it affects determinism). Might be worth updating anyway, which may affect several screenshots, but that's for a different PR.\nThe annoying thing is that the Chrome screenshot has the same issue. Updating Chrome did not affect that screenshot. So we may need an alt image for that... . Can you upgrade? ~~0.10.0 was just released, and~~ a lot has changed since 0.6.0.  Oops, I jumped ahead!. Definitely the overall goal is a good one. We can try the automatic requirement. If it gets annoying, an alternative would be human enforcement (based on the codecov reports we're already getting). . @ronkok Not a bad idea to double check.  Personally, I'm fine with it, given that it does in particular support \"correct\" syntax.  I agree we're not entirely consistent on this point throughout KaTeX, though -- the unicodeTextInMathMode flag comes to mind (and I still feel like that should maybe default to true for convenience to the poor user...).\nMaybe we could add some kind of strict mode that either warns or errors (perhaps strict: 'warn' or strict: 'error'?) when using not-actually-LaTeX behavior, like non-boxes in \\raise/\\lower, or Unicode text characters in math mode.  That wouldn't be for this PR, but could help get around these repeated issues: allow slightly more flexible syntax for convenience, but allow someone to tie down to actual LaTeX as desired.. @ronkok What about adding a warning when this feature is used beyond what LaTeX supports, similar to how \\hskip and \\mskip behave?  Then the detection is done, and in a future PR we can easily adapt this to error or silent behavior depending on @kevinbarabash's input and decisions about #1226. Also the warning should make it clear that this might not be kosher in a future version for those tracking master branch directly.. I could see wanting to build a custom handler for custom formatting in the error case.  An alternative would be to provide a callback to call instead of an error handler.  Maybe throwOnError could receive a function argument to handle this case?. Thanks for the review, @ylemkimon. Do you think I should add an error callback function for custom error handling/rendering? Or leave that for consideration in another PR?. Sounds good!  By the way, this is a breaking change compared to old behavior (rendering instead of throwing an exception), so should we advance to 0.10? @kevinbarabash . I tried running bower update katex on the gh-pages branch, and I got the following output:\nbower not-cached    https://github.com/Khan/KaTeX.git#0.9.0-alpha2\nbower resolve       https://github.com/Khan/KaTeX.git#0.9.0-alpha2\nbower download      https://github.com/Khan/KaTeX/archive/v0.9.0-alpha2.tar.gz\nbower extract       katex#0.9.0-alpha2 archive.tar.gz\nbower resolved      https://github.com/Khan/KaTeX.git#0.9.0-alpha2\nI conclude that bower katex somehow isn't updating... Any thoughts on how to fix this?. @ronkok Nice idea.  My guess is that the demo site just predates CDN, but that seems like a good option too. One possible disadvantage is that the CDN might take a little while (day? more?) to update. But at the moment it's us who is out of date, not the CDN...\nOn the other hand, this wouldn't work to make it part of the release script.\nI'm wonder about switching from Bower to NPM though.  At least that I understand, and npm publish is part of the release script.. Never mind, I got bower working: rm -rf bower_components/katex followed by bower install katex fixed it.. @ylemkimon These both seem like good ideas.  It'd already be cool to compare outputs across released versions.  PR versions would be even neater -- handy for testing.  Can you link to a similar demo for another project?\n@kevinbarabash What do you/KA think of moving the gh-pages branch into a new repo in the KaTeX project?. Fixed by #1180. This looks like the source ZIP as opposed to the distribution ZIP. Maybe you're comparing an old distribution ZIP to the new source ZIP? . Is shape-rendering: geometricPrecision worth trying?  I'd actually never noticed it as an option before, but it sounds like what we want.... I'd also like to point out that, in these examples, the lines span only 1 or 2 pixels.  I think it's reasonable for a thin line to render as gray and 1 or 2 pixels wide (depending on alignment with pixels) via anti-aliasing.  Of course, it doesn't hurt to search for a better rendering, but this one may be the most \"accurate\" (in representing subpixel offsets via grays, as antialiasing aims to do).. This sounds good to me.  How does this differ from 0.9.0-alpha1, and why did we switch? (I'm guessing there's an added CSS rule?). @ronkok Definitely sounds like there's plenty of evidence to make this switch.  I also like the relative simplicity of CSS borders over SVG for such a common feature.\n@arnog thin seems pretty imprecise according to the spec. For example, MDN says \"the specification doesn't define the exact thickness denoted by each keyword, the precise result when using one of them is implementation-specific. Nevertheless, they always follow the pattern thin \u2264 medium \u2264 thick, and the values are constant within a single document\".. This should be fixed by #1249, which is in 0.10.0-alpha.. As you probably already figured out, \\sf (and old font commands) don't switch to text mode in LaTeX.. @kevinbarabash Perhaps a function that maps the various font properties from #1111 into that actual font would be just as good, and perhaps the main role of makeOrd?  I've forgotten the details, but every time I look at the font choice code (and e.g. mathDefault) I feel like they are very confusing, possibly wrong, and could be improved.. Mapping to CSS classes may also require knowing the parent CSS classes, to avoid repetition. Or maybe that's a third step, checking how your desired CSS class differs from the parent and thus what needs specifying.. Oh, good point!  Sorry, that might have been me who added a feature without documentation...  It might also be good to clear up the confusion between the property name of the macros object and the name of the LaTeX macro, which is usually called a command in TeX parlance -- i.e., maybe change \\name to \\command.. In static/main.js (used in the test server via npm start), there's an option called after=... that lets you put text (maybe arbitrary HTML?) after the rendered KaTeX stuff.  (Though it also only supports display math at the moment...)\nAnyway, it's plausible we could at a YAML field after: that lets us put some HTML after the LaTeX part in the screenshot test.  But this might be for another issue/PR?. Actually, it turns out that test/screenshotter/test.html already supports \"pre\" and \"post\" queries to put text before and after the rendered KaTeX.  It would be easy to add support for pre: and post: fields in the test YAML to set these.  This would allow us to build a test that illustrates bug #836, for example.\nBut we'll also need a \"contenteditable\" flag.  I will give it a try.. My bad.  test/screenshotter/ss_data.js already imports the pre and post strings, so that already works (and is in one test).  So I just need to add a contenteditable flag.  At least now I know how!. Unfortunately, I've been unable to reproduce this issue in the screenshotter.  Maybe a side-effect of headless mode that it ignores contentEditable?  I've tried even this hard-coded HTML (in test/screenshotter/test.html):\nhtml\n    <div id=\"container\" contentEditable=\"true\">\n      TEXT TEXT TEXT TEXT TEXT TEXT TEXT TEXT TEXT TEXT TEXT TEXT TEXT TEXT\n      <span id=\"math\"></span>\n      TEXT TEXT TEXT TEXT TEXT TEXT TEXT TEXT TEXT TEXT TEXT TEXT TEXT TEXT\n    </div>\nThe result (in Chrome) is this:\n\nAm I missing something?  Otherwise, I'm not sure we can make a screenshot test of contentEditable.. I realize that I didn't actually test this locally. Probably should before merging.. . Just tested (via python -m SimpleHTTPServer 8001 and checking on Chrome that e.g. \\boldsymbol works).  So should be good for review (though apparently no review is necessary on this branch).. @ronkok I just noticed that function-support.html already uses unpkg.com (and would need to be updated to remove the -beta).  We should probably unify to use only one method of inclusion.... I guess the question is why index.html uses Bower:\nhtml\n    <link href=\"bower_components/katex/dist/katex.min.css\" type=\"text/css\" rel=\"stylesheet\">\n    <script src=\"bower_components/katex/dist/katex.min.js\" type=\"text/javascript\"></script>\n    <link href=\"bower_components/normalize.css/normalize.css\" type=\"text/css\" rel=\"stylesheet\">\n    <link href=\"bower_components/font-awesome/css/font-awesome.min.css\" type=\"text/css\" rel=\"stylesheet\">\nwhile function-support.html uses unpkg.com:\nhtml\n        <link rel=\"stylesheet\" href=\"https://unpkg.com/katex@0.9.0/dist/katex.min.css\">\n        <script src=\"https://unpkg.com/katex@0.9.0/dist/katex.min.js\"></script>\n        <script src=\"https://unpkg.com/katex@0.9.0/dist/contrib/auto-render.min.js\"></script>\nI think one should change to match the other.. @ronkok Changing both to unpkg (with possibly different versions) would seem reasonable then, if they are indeed that fast.. ~~Unfortunately, https://unpkg.com/katex@0.9.0/dist/katex.min.js seems to fail to load, even though it's listed on https://unpkg.com/katex@0.9.0/dist/ (and looks fine on an npm install).~~  Hmm, now it works.... An alternative to this PR is #1183.. @ronkok can confirm, but that page was written in HTML, not Markdown.  So there is no Markdown version.  I'm not sure you could represent all the things on that page in Markdown...  But you could easily regex out all the \\(...\\) content and put it into your own Markdown file.. @ronkok Is this / can this be an automated conversion process? I'd hate to double your maintenance work.... One advantage of this PR over #1180 is that it makes it transparent which version of KaTeX we're using in the demo site, which has been a point of confusion in the past.. Right, if you want to unescape HTML before calling renderToString explicitly, you should do explicitly like\njs\nkatex.renderToString(_.unescape(x))\nWe can't do this automatically for you, because\nlatex\nf&#39;(2)=g&#39;(2)=3\nhas a meaning in LaTeX (though admittedly it's a weird one, involving a macro with 39 arguments that appears in a tabular environment).\nHow are your ' characters getting escaped in the first place?. Cool. Sounds like a challenge! . Yes, I think this would be cool, especially for testing PRs without having to grab the branch yourself.. I tried setting up my KaTeX fork on my CircleCI account, and it started building for the one PR that was on my fork.  I canceled that, and eventually found an interface to build my negspace fork (corresponding to #1194 here, which I rebased to include this PR).  Now I get this error message:\n* Cannot find a job named `build` to run in the `jobs:` section of your configuration file.\nIf you expected a workflow to run, check your config contains a top-level key called 'workflows:'\n\nAm I doing something wrong?. @kevinbarabash Yes.  I just double checked: https://github.com/edemaine/KaTeX/tree/negspace. Cool, a dummy commit fixed it.. This is not the worst news: we forbid merging PRs that are out-of-date with respect to the master branch, so we are already \"constantly merging the base branch into the PR branch\" (if I understand correctly).  And the resulting tests have to pass before merging.  So it's functional, though not ideal.. Oops, I think I just don't understand katex caching behavior... sorry!. @kevinbarabash I just confirmed that the issue is present on Chrome 65.0.3325.181 for Windows on the current demo site (0.9.0).. Just updated to 66.0.3359.117 and same issue.  Weird.  So maybe specific to Chrome for Windows?  And I assume you're seeing it on Safari too?\nAnyway, we/you moved all the other accents over to noncombining characters to avoid Safari issues, so probably should do the same for \\not.... Actually, I tried this on quicklatex, and maybe the new behavior is actually the correct one! (matching LaTeX)\n\n. @riteme That is the intended behavior of \\not -- it's how it works in LaTeX.  Here's a rendering from quicklatex.com:\n\nlatex\n\\begin{align*}\n\\not| \\\\\n\\nmid \\\\\n\\not\\mid\n\\end{align*}. Thanks @riteme for the heads up. This does seem to be a difference between LaTeX and MathJax.  In these situations, we generally prefer to match LaTeX, in particular so that someone converting code from KaTeX to LaTeX will not have any surprises.. Yes, this is a consequence of #836 and my rewrite of \\KaTeX using macros (and negative spaces). :frowning: It would be great to fix the root problem, #836, but we've not yet found a solution. Let us know if you find something! . #1194 should fix this!. Good comments. Most of these are inherited from the old code, but this is probably a fine time to clean it up.. I implemented the comments, which cleaned up the code a lot. I also added some small features:\n* pre and post are aliases forbeforeandafter. This matches the option names in the screenshotter, so seems nice.\n* Macros with escaped characters should now work, thanks to thequery-string` package.\nI have not implemented a GUI for these options yet; maybe best for another PR?. @ylemkimon Thanks for spotting that! (darn Windows)  Should be fixed now.. I'm not sure we have an easy workflow for how to add symbols to fonts, though it's an area we've discussed.\nIs there a LaTeX equivalent of double brackets that you're trying to achieve? If so, we'd probably consider it for the main KaTeX distribution. . I added the double-bracket feature request as a separate issue: https://github.com/KaTeX/katex-fonts/issues/46\nI'm going to close this issue for now, but feel free to provide more information and we can try to help.. Cool! . I think this is a good idea to document, as LaTeX is so heavy with \\s.  Linking to the MDN docs seems good.\nThe edge cases @ylemkimon mentioned would also be good to mention, as they would mess with things like \\underline, and groups in nested math ${.  I find that String.raw`\\u1234`.length === 6 in browser console, but apparently it doesn't work in .js file. \u2639\ufe0f . @rrandallcainc Barring some magic solution, perhaps you can document the edge cases and we can get this merged?. No worries.  I'll take a crack at revising them, then.. OK, this is ready for review.. Oops, duplicate of #1200.  We both should have claimed the issue by self-assigning...\nThis PR has an additional test (though toParse should be toBuild -- toParse wouldn't have failed before), which I could copy over to #1199.  #1199 has a nicer table.. Copied, thanks!. It would be easy to tweak the autorender contrib plug in to do this, but I don't think most users would want it to work this way. \nPersonally I'd rather have \\$ ignored by autorender.\nThe simplest thing would be to modify the delimiters supplied to autorender to use something other than a single $. . @ronkok Looks great! Would you mind posting a screenshot here on Github demoing the new behavior on the test server?  I feel like the main thing to double-check here is the correspondence between Unicode characters and the correct LaTeX, and this would make it particularly easy.. Thanks @ronkok! . What if we changed the way that the Unicode symbols are handled (with defineSymbol(..., true)), to replace them with the equivalent command? (I guess this is like the macro suggestion, but cleaner.) Is there ever a reason that we'd like to distinguish between a command and its unicode equivalent, e.g., to treat them differently?. Good idea!  We should definitely support nested \\(...\\).  I originally added $ support, and can try to do the same for \\(.\nI don't think we want to have any connection to autorender though. That's about getting from HTML into LaTeX.  Once in LaTeX, we should just support LaTeX syntax.. @ylemkimon Thanks for the quick review! Should be good to go now.. @ylemkimon Uh oh. Nice find. Confirmed that this problem happens on the demo page too, as well as in the npm start test server. Perhaps should move this to a separate issue, but it's clearly a bug we need to fix. I've lost track: are metrics now in the katex or katex-fonts repo?. I'll leave the Unicode double-struck characters for @ronkok to comment on, but it sounds like we should support those. One related question: does your formula work on LaTeX? That is our standard reference, not MathJax.\nYou can add support for them now by adding a macro mapping e.g. \"\ud835\udd3d\": \"{\\mathbb F}\".\nKaTeX has generally shied away from supporting characters incorrectly, but I agree that it would be nice to have a \"just render it somehow\" option. I can try to add one. . @ronkok Thinking about the mathbb characters as a starting point (and maybe that's a good next Unicode PR to work on), I could see doing a for loop over 0..25 and constructing the Unicode and ASCII character codes in the loop (and still doing defineMacro in the loop).\nFor more special characters where we need a big mapping, I also wonder about using a big object (and maybe one defineMacros call) instead of many calls to defineMacro. Alternatively, macros.js could be replaced by one big object instead of many calls to defineMacro... . Fixed by #1232. @mt-caret Thanks for the report.  I keep forgetting that cli.js exists!  It could use some added command-line options to match new settings too.. Now that the strict is merged, I rejiggered this PR to use it.  This is a big change to KaTeX (so might be good to get into 0.10.0): now all Unicode symbols will be allowed by default, but the user will get (probably two) warnings about them.  But I think it will be a welcome change to many users.. @ronkok Perhaps you can just say something like \"Symbols not listed on this page are officially unsupported by KaTeX, and will by default generate a warning. You can turn off the warning, or turn the warning into an error, by adjusting the strict setting as described in the README.\". @ylemkimon Thanks for spotting that old code.  All fixed now!  I confirmed that there are now no references to allowAllSymbols.. I'm not sure what you're imagining for a simpler way.  I agree that it's tedious, but & between columns and \\\\ between rows is about as simple as I can imagine.\nAlso, more generally, KaTeX won't support it unless LaTeX does.. @ylemkimon I think we also need to add /test/screenshotter/new to .gitignore, matching /test/screenshotter/diff.. @ronkok Great idea. In general, we can somewhat (but not officially) think of strict: false as being like a MathJax compatibility mode, given their more lax choices.. @ylemkimon I'm OK with this in principle, though I do think it'd be slightly less convenient to use... something like:\njs\nconst options = katex.strictOptions(); // make copy of strict options preset\noptions.displayMode = true;\nkatex(..., options)\nOr maybe we could make a helper...\njs\nkatex(..., katex.strictOptions({displayMode: true}))\nBut I wonder if the complexity is necessary. Can you imagine a use case where we'd want to require strict behavior on one feature (e.g. Unicode) but not on another (e.g. \\mskip)? I can only imagine wanting strict LaTeX compatibility or allowing whatever is most convenient.... @kevinbarabash Yes, either no strictness or maybe warning level. My guess is that most people don't care about strict vs. not, and they'd rather have the most things just work. But I'm not certain. \nI do worry about a proliferation of options... so I still like the single option. Note that the callback idea in the original post could let someone still customize some aspects and not others. For example:\njs\nstrict: (thing, message) => thing === 'unicodeTextInMathMode' ? 'error' : 'warn'\nAPI still to be nailed down...\nIn some sense this still exposes all the options, but it also makes it easy to just set everything to 'warn' or 'error' or off. . @ronkok I haven't grokked all the code here yet -- there's a lot going on.  Could you elaborate on what you'd like this macro to do?  Maybe explain the purpose of \\sysfont?. \\boldsymbol works for me on Chrome for Windows and Android.\nCan you confirm that you're not getting a \"failed to load\" message in console for the bold font?. @ylemkimon That indeed seems to be the issue. The unpkg distribution fonts directory has KaTeX-Math only in the italic form.  By contrast, a fresh checkout has them (as in the source).  Presumably this is because the CSS lacks a reference to the other forms (two commented out in your link above, and the bold roman form as well).\nCharacters like x indeed render in the KaTeX-Math, and we are only giving the browser the italic form.  By contrast, KaTeX-Main has roman, italic, bold, and bold italic forms linked and also appearing in the unpkg distribution.  (I don't actually understand the (intended) difference between KaTeX-Math and KaTeX-Main; they both have a-z and A-Z, for example, but that's probably beside the point right now.)\nMy guess is that the browser is attempting to do fake bold as a result, and @Paalon luckily found a browser where fake bold isn't doing a good job, so we can spot the problem.  Thanks @Paalon!  Here's some confirmation for that theory:  here is how x \\boldsymbol x renders in Chrome on Windows currently:\n\nAnd here's how it renders with .font-face('Math', bold, italic); uncommented out:\n\nThe bold x looks totally different, so only the latter is using the font.  (Not too surprising, of course.)  I'll work on a katex-fonts PR to fix this.. @rrandallcainc Given your work on text font reworking, do you understand the difference between KaTeX-Math and KaTeX-Main?  Is one intended for math text and one for nonmath text?\nI observe that x, \\mathit x, and \\boldsymbol x render in KaTeX-Math while \\mathrm x and \\mathbf x render in KaTeX-Main.  Which I guess corresponds to math vs. text mode...  In this view, I guess we need KaTeX-Math in italic and bold-italic mode, but not in roman and bold mode?  Definitely confused here!. @kevinbarabash We are specifying a weight, but it's medium bold (600?). My guess is that different browsers implement fake bold differently. . @rrandallcainc Perhaps #1250 could be solved too? At least might be relevant... . https://github.com/Khan/KaTeX/blob/master/src/katex.less#L103\nIt is bold after all. I must have been looking at inspector in Chrome which translated this into a number.  . I figured out part of the problem: yarn global add khan/katex makes a yarn/global/node_modules/katex directory without dist.  This causes the ./ -> dist/katex.js pointer (specified by property main in package.json) fail.\nBut I can't figure out why yarn would differ from npm in this way.  Anyone have ideas?. @meoow Is there a LaTeX command that implements this character? Does XeLaTeX support this Unicode character? If so, we could directly support this symbol, after adding it to the font.. Maybe also worth testing whether XeLaTeX supports these in text mode. . @kevinbarabash Did you want to try to fix the Flow issue, or accept this as is? It looks like it's probably good to go.. I've encountered this too, and tweaked my own KaTeX preprocessor to put following punctuation inside any math blocks.  This definitely works, as KaTeX doesn't support any line breaks within a math block. \nIt'd be nice if there'd be a pure CSS workaround...  Alternatively, auto-render and a solution to #604 (which I'm imagining roughly following the code linked above) could implement this hacky solution.. I confirmed that center alignment is what's supposed to happen (i.e. what happens in LaTeX).\nI observe that adding a rule to .llap .inner of top: 0 fixes the problem in all examples I've tried.  But I'm not an expert in position: absolute.  Can anyone confirm that this is what we ought to do?\nSome other bugs I encountered while testing (but none too important):\n In LaTeX, | renders as a horizontal bar in text mode (including in \\llap).  Confusing...  Not sure we want to implement this, but probably should at least in strict mode.\n On the KaTeX demo page, \\llap{$|$} fails with error message Cannot read property 'fontName' of undefined.  This seems to have been fixed in master though, perhaps by #1213.. Fixed in #1162. @dudko Thanks for the PR!  Have you read our issue #1155?  There were some issues with react-katex reported there, though perhaps they've all been addressed by now.  Also it sounds like react-latex is a competitor that might also be worth mentioning.  What do you think is best?. Awesome! My only suggestion would be to put React above Ruby, for capitalization and prominence. But also fine as is.. Agreed. I'm unclear on best practices here. Most often I see a CHANGELOG but no Github release notes. Given that we have the latter, do we need the former? . @ronkok I think you were the first to suggest unpkg. OK with this change? Sounds good to me.. Sounds good to me too. Thanks for the PR! \nBefore merging, we might wait for @kevinbarabash to return, as he usually runs the release scripts. I wouldn't want to mess those up (though this PR seems to address them). . Should be fixed in master branch now. Thanks again for the report!. @ronkok This is great, thanks. Definitely looks like the way we should go. One small thing: can't you use existing \\raisebox support? I thought #1167 was about providing \\raise/\\lower aliases for \\raisebox, but I haven't looked at it yet so I'm not sure.. @ronkok OK, good point. Essentially we want \\mraisebox like we have \\mllap.\nHow does XeLaTeX implement these? Can we copy their macro definitions directly? Or do they use custom fonts?. Replaced by #1274.. Agreed: \\mathit should use text italic fonts but remain in math mode.  (I guess this doesn't explain Main vs. Math then.). In LaTeX, math and text fonts can be different. We don't support that yet in KaTeX; will we ever want to? If so, \\mathit and \\textit would then need to load different fonts.... @kevinbarabash They aren't different by default, but you can \\usepackage{euler} for example to use Euler math fonts, but keep text font the same (Computer Modern by default); or \\usepackage{crimson} to use Crimson for the text font, but keep math font the same (Computer Modern by default). If we want to eventually support font changing like this, we might be careful when defining \\mathit to behave like \\textit.\nI don't think this affects the decision to remove KaTeX-Math-*. Those are all still Computer Modern, so there's no point in having two copies.  More about the internal code logic.. @rokyed You don't need to change your LaTeX at all.  You just need to call KaTeX with options that includes {macros: {\"\\\\mathit\": \"\\\\mathnormal\"}}.  See https://katex.org/docs/options.html\nYou asked for an option to revert to the old behavior.  Our point is that already is such an option, namely the macros option.\nHope this helps!. @rokyed I still don't understand. Like I said, you don't need to change your LaTeX at all. If you're upgrading KaTeX, just change the calls to KaTeX at the same time.\nIf you have further questions, please open a fresh issue instead of appending to this old one. . OK, cool. I don't think this PR is useful then.. Do we want to show the minified-but-not-gzipped size as well?  (I'm not really sure -- do most http servers send files gzipped now? If so, probably not important.). Fixed by #1256.. @pzinn Thanks for finding this bug! I dealt with this issue when implementing \\verb, but didn't realize it still plagued \\texttt.  You can use \\verb as a workaround for now until we fix it.. @pzinn Found the fix. PR https://github.com/KaTeX/katex-fonts/pull/41 should eventually solve this, once reviewed and brought into KaTeX.. @ylemkimon Thanks for the review. I had to update the screenshots as they differ at the subpixel level. (I tried a screenshot diff, but I couldn't see any red or green, as the differences are too small.) Are you still OK with merging?. Indeed, this is a duplicate of #1250 which I just reported. Hopefully we can fix it soon. PRs welcome!. @kevinbarabash Oops, sorry about that. Regenerated now. I think it's because I switched the test from {matrix} to {array}{l} (which I think has a better failure mode) but didn't recompile.  Didn't realize it would shift the image to the right.. I'm not sure if this is the PR for it, but it occurs to me that exposing defineMacro (for global macros, as an alternative to passing them in) could also be handy. . FWIW, I checked that the screenshot behavior (still) matches LaTeX (as you've probably done before):\n\n. Hmm, I've been unable to reproduce this, on Chrome for Windows.  I am observing that the \\mathrlap causes a vlist (for some reason?), and some of those vlist elements have width 2px but a margin-left of -2px, which should cancel out by design.  (Something about zero-width elements not rendering the same.)  But the outermost mrel has 0 width in my inspector.  My guess is that they're actually positioned correctly.  Did you check whether the screenshots changed?. P.S. @kevinbarabash If you'd like to leave these alternatives to another PR, this one is also fine as is -- it's an improvement over the existing code!. Does prettier implement anything useful that lint doesn't check for? Personally, I'm finding our lint precommit hook annoying lately, because lint is really slow (on my computer, maybe 5-10 seconds) and I usually commit after a full npm test (though there are exceptions). So now I'm in the habit of git commit -n to avoid the preconmit hook. Adding more to the hook would be inconvenient... Also, I feel a little weird about having code modify my code from under me. . This sounds preferable to me.  Thanks!. That was fast! Thanks @ronkok and @kevinbarabash! . By the way, are these supported in unicode-math? . Fixed by #1277. Thanks for the report!. I haven't looked at the PR, but wanted to mention that I'm not a fan of the way that functions (provided by defineFunction) get their contents wrapped inside value, often resulting in value: {value:...}. This may not be the time to fix it though. . It looks like a few screenshots need to be updated.. I updated the screenshots for you (pushing directly to your branch).  Check out the diff to make sure it looks like the right new behavior.. If possible (in particular, if it doesn't slow things down much), I think it would be good to merge this before the next release, because it makes behavior more permissive than the current release. So far we haven't released with the unicodeTextInMathMode setting, which on master has a default value of false, which is less permissive than the current release.\nIn other words, if we release now, we might break some code. If we merge this first, we shouldn't, because of more permissive defaults. (Alternatively, we could change the default unicodeTextInMathMode to true.) \nAlso, this PR removes the unicodeTextInMathMode setting, so it'd be nice not to add a setting and then remove it in the next release, if we can avoid it.. By the way, we might also discuss whether the right default for strict is\n1. false/\"ignore\", as it is currently in this PR; or\n2. \"warn\", which feels a little \"safer\", so at least people learn about the idea of strictness and then can make a decision to leave it or set to true or false?. I've gone ahead and changed the default setting for strict to \"warn\".\nI also added functionality to check for warnings in Jest, turning them into a special type of Error.  These changes are also a first step toward #1126.\n. @ylemkimon Thanks for the review!\n@kevinbarabash Are you OK with this being merged, with the following decisions?\n Default strict setting is \"warn\"\n Allow functions to be specified in strict argument. ~~OK, I propose merging this first, then I can add nonstrict behavior to \\\\.~~ @kevinbarabash , are you OK with leaving function support in? . The changes to make strict mode control \\newline behavior are extensive, so I'm going to put them in a separate PR.. @EthanLuisMcDonough Thanks for implementing the feature I requested!\nJust checking: did you test that indeed katex.version returns the right version in a built version of katex.js / katex.min.js (e.g. using the test server run via npm start)?. I further confirmed that, after npm build, build/katex.js has a line starting\njs\nmodule.exports = {\"name\":\"katex\",\"version\":\"0.10.0-pre\",...\nWe'll want to make sure that this gets the actual build number when using the release script, but looks like it should work.. Is it enough to define a macro for \u207a that expands to ^+, etc. for each item in your list?  (This could be done in macros.js, or by giving a macro object to the katex parser/renderer.)  Or do you really need a single exponent that has several objects?\nDoes unicode-math have any functionality like this?  I agree, it seems we should do it in base KaTeX only if it's supported by some LaTeX package; otherwise, a contrib extension could be appropriate.. @rokyed I was proposing that 9k\u207b\u2076 would expand to 9k^-^6 which should look pretty good.  But 9k^7^-^6 doesn't look as good as 9k^{7-6}.. @pzinn Our primary goal is LaTeX compatibility -- but LaTeX consists of a lot of packages.  According to this StackExchange post, \\omicron is defined by unicode-math in XeLaTeX.  It looks like capital Eta (Unicode symbol and as \\mupEta) is also defined there (see http://ftp.math.purdue.edu/mirrors/ctan.org/macros/latex/contrib/unicode-math/unimath-symbols.pdf#page=82) and we should do the same. Probably worth a review of the Greek letters in general to see if we're missing any others. @ronkok can comment more.. @pzinn Good alternative to raise.  One possible disadvantage of adding these symbols to our fonts would be that it would make the font files larger (unless fonts can have symlinks between symbols?). I also don't think the mappings you give will do what we want, because they will remove the existing definitions of Latin A, etc. (I'm pretty sure those are mappings, and thus do not allow duplication.) Of course, we could change the font code in more complicated ways, but we could also do that in the future if this becomes a big concern.\nI'm curious what unicode-math/XeLaTeX does.  Are these defined in the font, or are they macro'd to Latin letters?  Ah, it turns out that they are macro'd, in engrec/engrec.sty:\nlatex\n\\providecommand{\\upomicron}{\\text{\\rmfamily\\upshape o}}\nThis seems like further justification for the current approach.... @pzinn I stand corrected! Hmm, if there's some prior art to this approach, then we should definitely consider this alternative approach.... I did some experiments with unicode-math in XeLaTeX and how they interact with font commands:\n```latex\n$\u03bf \u039f$ mathnormal\n$\\mathit{\u03bf \u039f}$ mathit\n$\\mathrm{\u03bf \u039f}$ mathrm\n$\\mathbf{\u03bf \u039f}$ mathbf\n```\n\nSo, as expected, upper-case Greek renders upright while lower-case Greek renders italic, while \\mathrm makes them both upright.  But \\mathit and \\mathbf don't work!  Weird...\n. #1285 fixes the main issue here.  There remains a question of whether to duplicate more characters to their capital Greek equivalents in the fonts, for copy/paste improvement (and anything else? MathML I guess?), matching \\omicron.. Ah right. Then instead you should add braces around each. (Currently, text after the Greek letter will also be nonitalic!) . My next worry is that these won't behave the same as other Greek letters do within e.g. \\mathit, \\mathbf, \\boldsymbol. Would it be better to add them as symbols and modify the Greek letter list in Parser.js?. Given that I already merged #1283 (oops), we may want to still merge this... could use a second opinion, though.. Cool, glad you agree! I wouldn't have thought of this approach without going through all the ensuing discussion, so it's not time wasted.\nDo you want to review this PR?. @kevinbarabash Thanks for all the reviews and merges! I resolved the conflicts here.. @ronkok Thanks for the additional rules! I'm not convinced we can get spaces to get eaten by line breaks, using just CSS... I'll have to think about that.\nBut the other rules you mention should be easy; we'd just need to give hskip's a CSS class of allowbreak. (Everything else is already forbidden.)\n\\\\ should also be doable, but probably not without more work. Maybe a separate PR. . @ronkok Actually, I don't think those rules apply here.  We're dealing with line breaks within math mode. I just did some tests, and none of \\, \\quad, \\hspace, \\hskip enable line breaks within math mode.  For example:\nlatex\n$this\\ is\\ some\\ long\\ text\\quad\n this\\ is\\ some\\ long\\ text\\quad\n this\\ is\\ some\\ long\\ text\\quad\n ...\n$\nHowever, if I add + before each \\quad, I do observe that that space gets eaten when there's a line break just before it.. @ronkok I hope you mean \"line breaks are forbidden at whitespace\". The example I gave above does not get line breaks in LaTeX (or in this PR).  Line breaks only seem to be allowed at \\allowbreak and after bins and ops.  In (inline) math, ~ and \\ are treated identically, so far as I can see.\nThis PR doesn't allow line breaks in any nested objects, which includes boxes.  It only looks for breakable things at the top level.  Same as TeX.  \\\\ could similarly be dealt with at the top level only, presumably via a <br> tag.. Oh, I see our/my confusion. I meant that spaces/glue by themselves do not permit line breaks. You're saying that a nonbreaking space immediately after a valid line break place prevents that line break.  Got it!  That should be easy to fix.. @ronkok Good idea.  I'd like to resolve #1289 first though; it's pretty confusing.\nIn the latest commit, I changed ~ and \\nobreakspace to also have nonbreaking behavior.. @ronkok I read the source code for \\hspace* and was able to implement it almost exactly like LaTeX (!).  Our macro system has come a long way...  LaTeX uses a \\rule to protect the space from the line-breaking algorithm, so I did the same.\nDemo:\n\n\nI also fixed a bug that allowed line breaks where I didn't want them (needed to set white-space: nowrap at some level, namely, .base).. I've successfully implemented \\\\, at least for inline math (where LaTeX supports it), on top of this.  For simplicity of review, I've split it off into a separate PR, #1298.  That can be reviewed after this PR.. I updated the screenshots, and there are lots of tiny changes in Chrome only, I believe because of Chrome's rounding-to-integer-pixel issues we've encountered in other contexts (e.g. sqrt line width).\nAlong the way, I realized I needed to move the width: min-content Chrome hack into .base instead of .katex, for negative spaces to work properly (or, at least as well as they did before -- the NegativeSpaces test is even slightly better on Chrome now).\nThere are still some more significant changes in the screenshots that I'm not sure about:\n\n\n\n\n\n\n\n. I tracked down the bulk of the screenshot differences to this CSS rule:\ncss\n    .vlist-s {\n        // This cell solves Safari rendering problems. It has text content, so\n        // its baseline is used for the table. A very small font avoids line-box\n        // issues; absolute units prevent user font-size overrides from breaking\n        // rendering. Safari refuses to make the box zero-width, so we give it\n        // a known width and compensate with negative right margin on the\n        // inline-table.\n        width: 2px;\nThe placement of width: min-content on the .base element instead of the .katex-html element ends up removing this space for some reason (in inspect mode, the .vlist-s element has a width of 0 instead of 2).  Adding a rule of min-width: 2px fixes the problem.\nNow all screenshot diffs (against master) appear entirely black, meaning the differences are all subpixel, as expected, except for ArrayMode and DisplayMode which still has a global horizontal shift as above.  I'll keep investigating that one.. What luck!  The horizontal offset in display math actually seems to be an improvement over past behavior.\nHere's ArrayMode in master, with Chrome inspecting the .base element:\n\nAnd here's the same test on this PR:\n\nThe new version has the correct bounding box on the .base element, resulting in correct centering.  The old centering was shifted too far to the right.  This is also pretty evident if you look at the screenshot images (e.g. in diff mode): old screenshot vs. new screenshot.\nSo I'm happy with all the screenshots now.  I'll clean up the code according to the comments next.. @kevinbarabash I implemented all your comments on the code.  This should be good to go now, except for probably we should add some multiline line-breaking tests.. Added a screenshot test, which should test everything, including \\nobreak, \\allowbreak, and \\hspace vs. \\hspace*.  While testing, I realized that I broke \\nobreak when spaces became .mspace.  Should be all set now.. @kevinbarabash Check out https://github.com/Khan/KaTeX/pull/1267#issuecomment-387722597 . I was playing with the various \"rich diff\" options and they're pretty cool! You can even overlay the two imaged in various ways (though not as good as our red/green diffs).\nThanks for the review! I excited to use this feature. . KaTeX:\n\nLaTeX (via quicklatex):\n\nThe wiggles definitely seem wrong, but so does the horizontal spacing between elements? Ideas, @ronkok?. @ronkok I traced that particular line back, and it's been there for at least 3 years. Maybe there was another place where you changed it which you're thinking of?. I updated the OverUnderset screenshot.  Thanks for adding the wiggle test to avoid this breaking in the future!. Bringing mathbin/mathop detection to top-level discussion: It would be best to match actual LaTeX behavior. My research suggests that this is implemented in terms of \"the \\binrel@ command from AMS-TEX which can distinguish between binary, relation and ord atoms.\" (see amsbsy.pdf)\nHere is code from amsbsy.sty (sadly no real documentation on it):\nlatex\n\\newcommand{\\overset}[2]{\\binrel@{#2}%\n  \\binrel@@{\\mathop{\\kern\\z@#2}\\limits^{#1}}}\n\\def\\binrel@#1{\\begingroup\n  \\setboxz@h{\\thinmuskip0mu\n    \\medmuskip\\m@ne mu\\thickmuskip\\@ne mu\n    \\setbox\\tw@\\hbox{$#1\\m@th$}\\kern-\\wd\\tw@\n    ${}#1{}\\m@th$}%\n  \\edef\\@tempa{\\endgroup\\let\\noexpand\\binrel@@\n    \\ifdim\\wdz@<\\z@ \\mathbin\n    \\else\\ifdim\\wdz@>\\z@ \\mathrel\n    \\else \\relax\\fi\\fi}%\n  \\@tempa\n}\nI believe I understand what this is doing -- quite the hack! It's redefining \\medmuskip to -1mu, \\thickmuskip to 1mu, so that they can be distinguished, rendering the body and subtracting off the width without surroundings.  If the resulting space is negative, it knows that it was \\medmuskip and thus \\mathbin; if the resulting space is positive, it knows that it was \\thickmuskip and thus \\mathrel; otherwise, it was zero space, and does nothing. \nSo in the end it's measuring whether we would get an actual mathop or mathbin spacing or no spacing (in which case no wrapper).  I'm pretty sure what your code is doing is not this -- LaTeX rarely (never?) does recursive deep dive into mathords to see what a type is.  Rather, we should be looking at the KaTeX code that determines what spacing to apply; this is buildHTML.js's buildExpression, particularly these lines.  It looks like getTypeOfDomTree is a good way to determine the type as mbin or mop (or mrel or mord), and you could simply apply that type?. @ronkok This seems almost perfect.  However, I believe there's some confusion about the cases, because \\overset{?}{=} and \\overset ? = should parse identically (and do -- I just checked).  So the arguments are always wrapped in ordgroup.\nThat said, I think the code you posted is exactly what we want.  This way we can handle a non-ordgroup value, just in case.  We don't want to go any deeper, though, so that \\overset{{?}}{{=}} behaves as it does in LaTeX (I think) -- treating the arguments like an ord group.. Hmm, it occurs to me that, because this code is looking at the parse tree, it won't properly handle other parse tree nodes that end up acting like a bin or rel.  For example, an \\overset within an \\overset argument won't behave correctly with this code, but ought to with LaTeX.\nOne alternative would be to wait until HTML/MathML build time, and use the computed class.  This would be closer to LaTeX's behavior.  I'm not sure whether it's worth the added complexity... maybe at least a comment?. I'm good with this. @kevinbarabash did you want to look at it, or should we just merge?. @rrandallcainc Did you test against LaTeX? Because a{-}b is generally supposed to remove the spacing around - in LaTeX (and \\small shouldn't affect that).. You need to rewrap the new symbol in \\mathbin to get it to act like a binary operator again:\nlatex\nx\\mathbin{\\small +}y\nEnjoy!. Could you clarify what your input is that generates this error?  It would appear to be \\unsupported, but I'm guessing it was something else?. @BenjaminHoegh I still don't understand what you're doing that is resulting in that error. Could you provide, for example, an example file, or an input to the demo site that causes the problem?\nRegarding Marked, a quick google search gives https://www.npmjs.com/package/marked-katex which might be useful.. It sounds like you resolved the issue, but if you're still having trouble, feel free to ask with more details.. You need to rewrap the new symbol in \\mathbin to get it to act like a binary operator again:\nlatex\nx\\mathbin{\\small +}y. Amazingly, only two screenshots were affected.  Here's the diff:\nStrikeThrough:\n\nStrikeThroughColor:\n\nThe result of this PR is in green/yellow, with more spaces.  Somewhat easier to see in the Github diff.  I think this shows that the change fixes some spacing bugs, properly treating the + as a binary operator.  One example of the LaTeX source code is \\bcancel 5 +\\bcancel{5ay}.. I posted it on #1080 where you can compare to the old diff.  I'm afraid it's not much better... but hopefully a step in the right direction.\n. That should work.  (It works on the demo page, for example.)  We'd need a more complete example of the HTML/JavaScript to help you debug.  I doubt it's related to environments specifically, but rather just not calling renderMathInElement() correctly.  (Did you check the console?). @BenjaminHoegh I'm not sure we can do that, as \\\\ is valid LaTeX.  The underlying problem is that we don't yet support \\\\; see #171.  I'm reasonably hopeful that we'll be able to add support for \\\\, though, via #1287.. Yeah, as far as I could tell, etoolbox is no longer a stand-alone package.\nhttps://packages.ubuntu.com/search?searchon=contents&keywords=etoolbox.sty&mode=exactfilename&suite=artful&arch=any. Sorry about that (and probably a good idea for this sort of thing). I didn't expect anyone to look at it until #1287 lands, but meanwhile, you can check out the diff here:\nhttps://github.com/edemaine/KaTeX/compare/inlinebreak...edemaine:newline. I resolved the conflicts, fixed a bug found via the new tests, and added tests.\nOne issue I wonder about: do we want \\\\ to do anything (at the top level) in display mode?  It doesn't do anything in LaTeX (acts as a null space), and that's what I've implemented here.  But I imagine a lot of people might want it, in nonstrict mode at least.  The tricky part is that the two behaviors require different CSS...\nOne solution: I've added documentation to the README to document both this difference and how to tweak it for those who want non-LaTeX behavior.. I don't see how to add this behavior in nonstrict mode, because it involves CSS changes, as documented in the README.. I fixed the flow error (caused by commenting out newRow). Should be ready to merge now.. This is an interesting test of the strict setting... \"error\" might cause an error when using \\\\ in display mode which isn't terrible, but LaTeX just silently ignores the \\\\...  Do we want to add \"fall-back\" capabilities to the nonstrict method?.... So \\\\ does nothing when strict is true? What if it's \"error\", \"warn\", or a function? . I agree, no error ever, but I'm a little confused about when the \\\\ should do nothing and when it should break the line. . Change of plans. I'm going to merge this as is, then play with strict behavior in #1278. . That was fast! Screenshots pushed.. @ylemkimon Is it a lot? Maybe we can avoid it somehow?. @ylemkimon I don't think it's actually a problem.  @ronkok's last few PRs have been this way, and the old commits get swept up in the squash.  At some point it'd be good to start new PRs from the master branch, though.  (For me it's git checkout upstream/master; git checkout -b newbranch.). @ronkok Wow, it's exciting to see how this is relatively easy thanks to stretchy \\overline!\nThere are two natural features that aren't yet in this PR; is it worth adding them now?\n \\hline can be repeated to make multiple horizontal lines between rows. (I think it also interrupts the vertical lines... that may be harder to do, but could be skipped for now.) This would be good for \"full \\hline support\".\n \\cline{3-5} does \\hline only for columns 3 through 5. I'm guessing you have to render the horizontal line for each column separately anyway (because tables are rendered column-by-column), so this isn't too hard...  But also not as important as \\hline itself.. The screenshot renders as 1246x752, but needs to be at most 1024x768.  Can you make it a little less wide, e.g., reducing the \\quads?. @ylemkimon Oops, thanks for catching that.  There was a typo in the screenshot test.. Thanks for the quick review! Glad you liked all the changes. Exciting to have this finally done. . @kevinbarabash I didn't see how to do that. tag parse nodes are special (like supsub etc.) in that they are generated by the parser, not a function. And buildHTML needs to do all its tag processing at the top level, so it's difficult to move to a generic parse tree node helper...\nMaybe we can return to this if/when we add tag support to individual rows of aligned etc. Maybe then we'll understand the more general case... . @doraven What did you set the div width to in order to fix the problem? Was it specific to your layout, or something could be applied generically?. #1721 should fix this issue.. Assuming we default strict to \"warn\", there might be some now warnings for users.\nBut the bigger change is line breaks. This will definitely cause different behavior for inline math (hopefully for the better). So 0.10 sounds good to me.\nI'd suggest we go through a series of alphas and/or betas, like 0.9, given the number of changes. . Haha, hopefully!\nOh, also the new throwOnError behavior is changed (and hopefully much harder to accidentally code injection vulnerabilities). . v1.0 is a sign that the software is ready for production use.  I personally think KaTeX has reached that level, though I'm sure some disagree (doesn't support all MathJax features).  If we'd rather make milestones for 1.0 and then achieve them, though, we can stick with 0.10 for this bursting release.\nBy the way, I've mentioned before but it bears repeating in this thread: I think it'd be good for #1278 to land before 0.10.0 gets released, at least the final version, but ideally even the alpha version, so that users don't need to learn about unicodeTextInMathMode.. Is it possible to run lint, flow, and/or jest via this API too?. @ylemkimon Let me know what you think of the new names.. Yes, that works as-is.  Currently, colors are passed through directly to CSS, provided they match /^(#[a-f0-9]{3}|#[a-f0-9]{6}|[a-z]+)$/i, so none in particular works.. Right, I think what you need to do is figure out a way to load KaTeX only once, and share them among the various equations.  I routinely render hundreds to thousands of equations on mobile without trouble (in a single WebView).  Also note that you can prerender these equations to HTML, even at compile time.... @kevinbarabash Alternatively, we could add tests to test the test framework. \ud83d\ude04 \nShall I change that in this PR?. @ylemkimon You're probably right; this code should be vastly simplifiable.  Do you want to take a crack at it?  Alternatively, we could leave it for another PR.\nI implemented all your other comments.  I also switched to template literals, a small thing that was bugging me.. I imagine there's interest. But we should figure out which LaTeX package adds this functionality. I saw a few in a quick search. The most obvious one, longdiv.tex, does the whole derivation, which doesn't seem what we want (in particular it doesn't support polynomials as originally requested). . Line height is (I believe) controlled by CSS. Did you try defining a custom CSS rule to override tue built-in one, like\ncss\n.katex { line-height: 1.5 !important; }\n?\nI agree that it would be nice to make this more naturally configurable. This is essentially asking for \\baselineskip/\\baselinestretch as part of #687.. Ah I think I see. Can you provide an example of something that ought to be (i.e. in LateX) is more vertically spaced when the line height is larger? . By the way, \\gdef\\arraystretch{1.5} will be pretty easy to support once we have #1309. . Closing issue, as I don't see what else we can do, other than possibly thickening the fonts, which is #695.. Reopening for more discussion, though I'm uncomfortable doing things that deviate from Computer Modern fonts much... and it seems difficult to avoid hacks that are too screen-specific to be generally useful.  (On the other hand, min-height: 1px on rules seems like a good idea.)  @ronkok Can you write that with a \\stackrel or something?  Still not sure we want to do that in KaTeX master, but at least it'd be easy for people to define with custom macros.... Policy question: do we want to update CHANGELOG (for \"master\" version, say) as we add features going forward, PR by PR?  (Perhaps we should open a new discussion thread.). That did it, thanks!. Related to this, I've been wondering how to handle versioning of the README.  Currently, README documents the master branch, but users probably care about documentation about the current release version (at least sometimes).  Hopefully a proper documentation system will fix this in particular!. We're now using Docusaurus. We can return to discussing what issues should(n't) block a 1.0 release: Version 1.0 milestone issues. Wrapping in a \\mathrel, or even just {...} will suffice, as in LaTeX. Shouldn't need any additional CSS rules. We probably want to wrap in mathrel just to get the spacing right... . The advantage of the previous global warning -> error conversion is that we could make sure no code produced warnings when it wasn't supposed to.  In fact, I was going to suggest changing the default strict setting to the actual default, instead of strict: false, to make sure no warnings were generated when they weren't supposed to.  I guess such warnings would be printed to console, but it wouldn't prevent a PR from merging, for example.  What do you think?. @ylemkimon I'm no longer in agreement on the warnings. Running from the command-line, I'd see warnings, but if they don't cause tests to fail, Travis will still allow the merge, which it shouldn't.  Real-life example: In #1385 discussion, we spotted a bug through the existing warning -> error mechanism that we may not have noticed otherwise.. 1. I would turn warnings back into errors, but that's open to discussion.\n2. Someone needs to actually review the code; I haven't yet. \n3. Resolve conflicts (sorry!). \n4. @ylemkimon wanted to add some literal magic. . Oops, fixed!. FYI, alas, this will conflict a bunch with #1338.  Whoever goes second should take care to port the changes over.. It's merged. Go ahead! . KaTeX doesn't support top/text-level LaTeX.  Maybe it could one day, but this would be a major undertaking.\nIf you just want automatic paragraph support, you can do this (at the string level, or via innerHTML) via the simple regular-expression substitution .replace(/^|\\n\\n+/g, '<p>').  HTML already ignores double spaces, newlines, etc., so that's all you need.  Are there other features you want?\nA detailed hackish approach to supporting much more of top-level LaTeX (via a lot more regexs) is here: https://github.com/edemaine/coauthor/blob/master/lib/formats.coffee. I think it's a good goal for KaTeX version 2. :-) (We're currently on version 0.). I'm afraid not. You can use array or \\\\ for simulating paragraphs via manual line breaking. LaTeX has \\begin{array}{p{2in}} but KaTeX doesn't support that yet. It's a tough feature to add because KaTeX doesn't have any paragraph breaking support. . I'm unfamiliar with split, but my reading of amsmath docs so far suggests that it's equivalent to matrix but with arraycolsep set to zero.  Is this correct?  If so, it should be relatively easy to add.\nAnd agreed, we already effectively support align via aligned, though I'd still like to add it as an alternative to \\[ at the top level.. Agreed, this would be a cool extension! But it would likely big, so would make sense as one. (And it would probably need a champion to make it happen, as it's probably quite a bit of work.). renderToString expects to be given a math expression, so not wrapped by $s.  Could you give more context of how you're using it?. If you use renderToString, you should just pass in math, no delimiters whatsoever.\nIf you're setting delimiters, you're probably intending to use autorender, which behaves a bit differently (and this would be the way to mix text and math).  To use that, you'd want to set the DOM node to the DB contents, then call the autorenderer.. 1. I have a plan for making lookups and local defs constant time, though gdefs will still take O(k). Essentially, the idea is to have an undo stack. This is inspired by how TeX does it (based on a rough reading of the source code, though I still don't fully understand it), which I believe achieves the same performance.\n\nI really don't like the idea of built-ins being modifiable by LaTeX code. This makes it difficult or impossible to isolate multiple LaTeX documents with the same KaTeX module. This would be an issue in any system with multiple LaTeX authors. We don't want macros defined by one document to adversely affect the other documents. The current system puts the caller in control of when to share state and when to reset. . I'm happy to work on it first, unless you think this is high priority. It will probably involve rewriting much of the code. . OK, I did the constant-time lookup rewrite.\n\nNow we use an \"undo\" stack similar to TeX, so get and set are constant-time operations.  get() still has to check two objects: one with all current settings, and then the built-ins.  Local set() sets the current value and (when appropriate) adds an undo operation to the undo stack.  Global set() still takes time linear in the number of groups, possibly changing the undo operation at every level.\nNamespace now refers to a space of nameable things like macros or lengths.  This is a totally different meaning from before, but still a reasonable name for the thing, I think, and still encapsulates all the complexity into the Namespace class.. I think I got all the comments, but let me know if I missed anything.. auto-render doesn't preserve macros from math expression to math expression by default.  Perhaps it should?  But you should be able to make it do so by replacing\njs\nrenderMathInElement(document.body);\nwith\njs\nvar macros = {}; // preserve macros between multiple expressions\nrenderMathInElement(document.body, {macros: macros});\n. Yes, \\newcommand works like \\def. Sadly there seems to be no LaTeX equivalent to \\gdef.\nI think it'd make sense to modify auto-render to at least share macros within the same call to renderMathInElement... but agreed, should clarify in docs.\nI wouldn't have expected the demo page to point to beta, but I thought the release scripts would have handled the READMEs.  They are correct in the release tag (https://github.com/Khan/KaTeX/commit/8624d4ccffbf8543ec87e75b24ed9551a7c16714) but that has other things which we don't want to merge in.  I guess we have to copy/paste manually?. That example does not work in LaTeX either. & must appear at the top level group of an array/tabular environment. . Yep, exactly.  Note that what you pass into renderToString starts in math mode.  But if you find something that works in LaTeX but doesn't work in KaTeX, let us know.\njs\nkatex.renderToString(\"\\\\text{\\\\textdollar}\")\noutputs\nhtml\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mtext>$</mtext></mrow><annotation encoding=\"application/x-tex\">\\text{\\textdollar}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"base\"><span class=\"mord text\"><span class=\"mord\">$</span></span></span></span></span>. Agreed; I see you've done that already done that for \\S and \\P.\nBy the way, \\lq/\\rq currently works in both math and text mode (being a macro), but is currently listed as \\text only.  \\textquoteleft is currently text only but not listed as such. :-). @kevinbarabash Here's a paste (5827 lines!): https://gist.github.com/edemaine/dd1c998483c7fc694584e33a69a2d7dc\nYou can get it by running npm audit.\n1337 will fix the webpack ones at the top, I imagine.\n@ylemkimon Sounds awesome!. Fixed by #1358. (Why didn't this close automatically?) . One other thing: we added support for nested \\(...\\) in addition to $...$, which could be mentioned in the Style section when mentioning nested $...$.. \\gdef did make it into the alpha, so it seems fine to mention as you did.\nThe Persian/Arabic plugin is pretty clear on it being a WIP.  But I think it might need #1269 merged before it would actually work with the current KaTeX, so maybe it's premature to list it here (maybe by beta time?).  @HosseinAgha could comment further.. Thanks @ronkok! Perhaps this will also fix #1154.. The release script should work in the future, after this PR. It no longer matches the old URLs, but now there are no old URLs. . #1362 fixed this for the future. The release script updates all the jsdelivr URLs, and now all of them are that way. . I'd recommend using HTML/CSS (border: solid) for boxed paragraphs.  Adding this to KaTeX was just requested in #1344, so I'm closing this as a duplicate.. @OnlineVagrant What do you mean? I guess it depends how you call auto-render, but it isn't exclude <div> tags by default. . In some markdown implementations, I believe it helps to put a blank line between the <div> tag and the markdown text that follows (and similarly separate the </div> tag).. Interesting, thanks for spotting. I need to understand when accented characters take the width of the accent (perhaps empty base character is a special case?) and when they take the width of the base character (as in \\^\\i). . Thanks for spotting. As a temporary work-around, \\verb|a---b| should work correctly. We should be able to fix the \\texttt behavior, though I forget how ligatures like this are processed in KaTeX. . It's specific to \\texttt (not even \\mathtt).  Curiously, \\text{\\tt --} works fine.  I'm investigating.. In LaTeX, in text mode, -- is processed as a ligature, except when it's a monospace font (obtained via \\texttt or \\tt within \\text).  In LaTeX, in math mode, -- is processed as two minus signs.\nWe currently are missing the \"except\" clause in our implementation.  Our ligature implementation is also broken: \\text{\\rm --} doesn't make a ligature, but it should.  Working on fixes.... FWIW, it'd be great to get the new package-lock.json merged, as npm install is always insistent on changing it instead of respecting it. (Makes me wonder why we check it in at all...). Is there some way to npm install according to package-lock.json instead of package.json?. @kevinbarabash Good idea! I should check symbols too. (Done.)\n@ylemkimon I'm not sure that would really work... The macros object needs to be changable in all tests involving \\defs. We could plausibly just create new Settings objects for those tests, but my sense is that this is a pretty minor overhead. . @ylemkimon What do you mean? (maybe a specific example?) This is just an interface to the macro system, which should handle that all very well.... @ylemkimon Ah, I see! Yes, that's an issue.  I added a function for \\hline that throws an exception, similar to other failing functions we have elsewhere in the codebase, but this didn't work for ^, _, \\limits, and \\nolimits which already have error handling within Parser.js.  So I added a list of implicitCommands (name up for debate) to catch them.. @ylemkimon Thanks for catching that one.  (I should have known: I implemented it, long ago!). @kevinbarabash and @ylemkimon, thanks for all of the comments and reviewing!. @twistedcubic This is already supported for \\gdef (but not \\newcommand etc.). Check out the README documentation for the macros setting.  If you pass in an object, global macro definitions via \\gdef will modify that object, so if you pass in the same object to future renderToStrings they will share macros.  Some examples of use:\n\nhttps://github.com/edemaine/coauthor/blob/master/lib/formats.coffee#L461-L474\nhttps://github.com/Khan/KaTeX/pull/1425\n\nFeel free to suggest ways in which this could be tweaked!. @twistedcubic Nope, all this discussion has been after the merge.  Probably should have been a seperate discussion issue...\nI find the current behavior rather asymmetric (\\gdef vs. no \\newcommand equivalent), but this is merely a reflection of LaTeX.  If you can find an existing LaTeX macro that behaves like \\newcommand but is global (\\globalcommand or something), then I'd be happy to add it (and it would be very easy to do so).  Also, if we someday supporting parsing at the top level instead of within a math environment, perhaps as an option to renderToString, then that would provide a way to do what you want.. @InThisStyle10s6p These Unicode symbols are currently unsupported by KaTeX.  You should also be seeing a warning about this and strict mode?  On the other hand, \\lesssim etc. (as a backslash command) should work.\n@ronkok Could you look into whether to add these Unicode symbols according to your usual analysis?. @InThisStyle10s6p Agreed, this is likely just an oversight, but @ronkok is the expert.. I've added a screenshot test, and fixed @ronkok's point.  This is ready for review again.. @kevinbarabash Thanks for the reviews! . I hadn't fully formed the thought... but I guess I mean something like the prestart script in package.json, which is triggered by build, test, etc.  For example, check-node-version.js could see if the submodules aren't checked out, and if so, check them out.  (I don't think we want to update submodules every time we e.g. npm test -- just trying to catch the \"initial checkout\" case.). @kevinbarabash Thanks for rhe reviews! . Happy to see this work, which dates back to 2014, come to fruition! Thanks @ronkok and @kevinbarabash!. @OrkhanAlikhanov Great! Let us know if there are other sticking points you know of, or discover. . @OrkhanAlikhanov Glad to hear it!! . I'm running Docker version 17.06.0-ce, build 02c1d87 on Linux, so maybe the major version number is the culprit.... @zacharyrs I didn't know this was possible in LaTeX -- cool.  Are you implementing the same dash length as arydshln.sty?  Or is there another simpler package that offers this feature?  (Maybe we should add a TODO to support ;{dash/gap} notation, and the horizontal dashed commands.). @ronkok Thanks for the investigation.  I hadn't realized border-style is so restrictive, and it's probably a bit much (and difficult) to go to SVG for this.  Agreed that this approach is probably all we want.  Maybe the main TODO would be similar horizontal dashed lines.. @zacharyrs You'll need to update the screenshot images manually as part of the PR.  See CONTRIBUTING.md and the linked screenshotter documentation.  Or let us know if you need any help.. Forgot to mention that you can just grab the new screenshots by clicking the \"Details\" link on the two ci/circleci runs (under \"All checks have failed\").. @zacharyrs Can you access https://circleci.com/gh/Khan/KaTeX/1203#artifacts/containers/0 ? . You should be able to log in with your Github account, I think. . > why use matrix when there's no support for separators, or more specifically, why not add such support to the various matrix types?\nMost mathematics I've seen doesn't need separators. Hence the ...matrix shorthands. But array is the main environment with the most options; it's easy enough to wrap in \\left/\\right. . Indeed, you'll have to use macros until custom environments are possible (#977). . The {proof} environment, and all text-level environments/macros, are not supported by KaTeX. See e.g. #1344 (including a hacky approach to solving this).. Here are the screenshot diffs, courtesy of circleci:\n\n\nThe vertical differences are caused by changes in the YAML test itself, but the horizontal changes are the main impact of this PR.\nHere's a texcmp for the first screenshot (with this PR):\n\nI'm pretty sure this is better.  Here's what the texcmp used to look like, which look quite similar to the screenshot diffs (a good sign)!\n\n. CircleCI diffs (my top images) are diffs between KaTeX versions (before and after PR).\nMy bottom images are texcmp, which compare KaTeX vs. LaTeX.. All of the line spacing is off by a similar amount.  My sense is that we're not measuring lengths correctly yet.  \\scriptstyle also seems to be a different font size than what LaTeX uses.  Neither of these are issues for this PR. Bigger font sizes test more pixels, though...  Would it be reasonable/feasible to increase the window size?. PNG's run-length compression should almost completely eliminate white rectangles, so I doubt files would get much bigger (maybe a few bytes per added column, at most).  We can do some testing to verify.\nThe benefit to more pixels is just fidelity.  Maybe fonts could shrink a bit, but there's obviously a limit.  The current resolution is useful for e.g. texcmp comparisons against LaTeX.. @ronkok Yes, this is a downside to the macro approach in general.  I was thinking we could fix all of these with a \\mathml{LaTeX code used for HTML}{MathML equivalent} command.. @nebrelbug If you select the \"Files Changed\" tab in this pull request, you'll see the relevant changes. I believe we changed this line in a future PR as well, so you might also check the master branch for this file. If I recall, the linked webpack issue also describes the workaround. . Thanks for making this an issue. I've been wondering about how to do this. It's easy for macros, but trickier for symbols and functions (when those symbols/functions later get replaced by macros).  Will probably require some additions to macro support.. Can you hold off on merging this until I can review? I'm a little worried about whether this works correctly with optional arguments. . OK, I can confirm this doesn't break anything.  For example:\nlatex\n\\begin{array} ... \\\\ \\lbrack 1ex \\rbrack ... \\end{array}\ndoes not trigger an optional argument in LaTeX (because it uses \\futurelet which doesn't do expansion).\nI do wonder whether this is the right approach, though.  Why have multiple lines in delimiter.js and functions/delimsizing.js handling \\lbrack and \\rbrack when the macro would suffice?  That is, why not go the other way?. OK, I found a more legitimate argument: in your branch, \\lbrack and \\rbrack don't work in text mode (because there are no delimiters in text mode), but they should.. ~~Oh, are there still symbol definitions for lbrack and rbrack? If so, those can go. Macros already take priority.~~ Sorry, I see you tested that. Now I see why this is weird. :-) . I guess we could have just added lbrack and rbrack as text symbols too... . Looking at the code more, I guess it would be consistent with the other symbols. Sorry for the hassle. . I think it's cool to reproduce this functionality in the way that (AMS)LaTeX does.  One high-level question: is there a reason this isn't easy to do with a macro and e.g. \\mathllap/\\mathrlap?  I haven't tried, but something like\nlatex\n\\hspace{.4mu}\\mathllap{#1\\hspace{.4mu}}#1\\mathrlap{\\hspace{.4mu}#1}\\hspace{.4mu}\n?. Yeah. I still think a \\mathml{LaTeX code}{MathML equivalent} macro would be a good way to go here, though I realize sanitization will be a bit of a challenge.  Anyway, maybe now is not the time.. Thinking more about it, I think I have finally figured out a proposal, and made it issue #1452, as this PR is probably not the place to discuss it.  (Though there is the question of whether this PR should block on it.). I could try to implement \\@binrel.... Sorry @ronkok! I hope you don't mind this preference toward macros, and the possibility that it will cause this PR to be largely rewritten. In fact, this PR has served to make some very useful tools come into existence, which I hope will also make it easier to add features like this in the future. So, definitely not time wasted!. @sthoch Thanks for asking!  Sometimes, when citing projects like this, I just use a footnote, as in:\nlatex\n...using KaTeX\\footnote{\\url{https://github.com/Khan/KaTeX/}}...\nIf you want to use BibTeX, though, there isn't a clear author list (or a very short one), so I'd probably just leave it blank, as in:\nbibtex\n@misc{KaTeX,\n  title = {KaTeX},\n  howpublished = {\\url{https://github.com/Khan/KaTeX/}},\n}. @kevinbarabash https://github.com/Khan/KaTeX/commit/8624d4ccffbf8543ec87e75b24ed9551a7c16714 is a tag, not on master.. @kevinbarabash Apparently I can't merge this?. @kevinbarabash Works now, thanks!. I'm happy with this now.  @kevinbarabash I can't merge on gh-pages anymore, probably as a result of #1412. Could you do it?. I think the idea is that the release script would still push a developer-specified tag (including version number), but that CI would do the npm publish.  I'm not sure that's really that important.  The big thing would be to move to a PR model instead of directly touching master as the script currently does.. Same here. It would be cool if you use the new PR approach because then we can double check that the publish script is checking in the right things. Maybe don't even need to use the beta moniker in that case, as we probably won't need to change the NPM release if something goes wrong, only the PR. . Thanks for catching this! I assume it's just the publish-gh-pages that is incorrect? . @ylemkimon Maybe for starters we can just separate the two processes, and run both of them manually?  Then we can automatic the NPM part if we want (though it's also not hard to run it manually).\nBut I'm unclear how we're supposed to test the documentation before we release to NPM, unless/until we have something like #1520.. You're right that bottom was removed by #1307.  I'm a little confused why you need it, though.  $\\frac{a}{b}$ $a^2$ renders via auto-render as\n\nAdjacent text renders correctly too.  In other words, the baseline of the KaTeX box is set correctly.  Or is there some other context where you're having trouble?. @rrandallcainc Is there a reason you can't use vertical-align: baseline?. Cool! Glad it's still relatively easy to compute.  It makes sense -- the same information is there, just more compact.. Agreed, good solution. FYI, we use these height/depth values when laying out \\tags too. . @ronkok Put /* eslint-disable */ at the top of the file.. A couple other quick comments:\n Why is mhchem.min.js in the repo?  Presumably it should instead be generated?\n It seems that mhchem is licensed under Apache 2.0, while KaTeX is licensed under MIT.  I think some care is needed here, though I'm not an expert on the Apache license.  Maybe @mhchem can comment.. I would lean more toward just the main mhchem module being \"off site\", and just the KaTeX-related tweaks being here.  I was wondering whether mhchem.js could be obtained from a Git submodule.  This would require the upstream copy to have a different or more tweakable loading strategy.\nPersonally, I serve KaTeX files from my own server, not CDN.  (Debatable whether that's a good idea.)  This would be one reason that it'd be more convenient to have things in the KaTeX distribution, but avoiding the main duplication would be nice.. What I imagine is a JavaScript module, ideally published via NPM, that exposes what KaTeX and MathJax extensions need of the API from mhchem.  The extensions include this module and add the relevant hooks to the host system (KaTeX or MathJax).  Yes, there are 3 source files, but the idea is to use a modern build system to compile them into single files.  I hope you're not making mhchem.min.js by hand \ud83d\ude04 so you're already using a build system, but you might need a more complicated one if you're also maintaining the MathJax extension.\nFor an example, we already do this with all our contrib extensions.  See for example auto-render, which is split into two modules, but end up compiling to a single auto-render.js and auto-render.min.js (via webpack).  So it'd be a no-brainer on the KaTeX side; we already build contrib extensions by hand, so I'd imagine just require('mhchem') within contrib/mhchem to import the generic code, and add the KaTeX hooks.  This would get compiled to a single module that e.g. ends up on CDNs, but there's no copying or diffing of code going on.  @mhchem could release a new mhchem generic module, and we could update to build with that version after testing.. @ylemkimon We could also put the repo in the KaTeX organization and add @mhchem as a collaborator to that repo.\nI guess there's a question of whether mhchem should ship as an extension available from KaTeX (on KaTeX's CDN), or as a completely separate module.  In the former case, I think locating the repo within KaTeX makes sense, while in the latter case, locating within mhchem makes sense. Maybe?. Hmm, related to #1436 then I guess.  Is there a nice uniform solution?  It'd be cool to be able to specify custom-* or something as allowed classes, or explicitly list allowed classes, though the \"safe\" specifier might also be sufficient in most cases.. P.S. I do worry about defining an id that matches another id on the page, thereby hijacking some things tied to the page.  It's not like the KaTeX object is going to do anything with that replacement (until we support \\javascriptToRunWhenClicked{...}), but it could easy break existing code that uses document.getElementById.  So some kind of limitation is needed.. Perhaps we should add a new option safe or unsafe that is similar to strict, but is explicitly about security, and allows configuration (e.g. allow certain classes but not others, allow class but not id). The allowedProtocols configuration could be rolled in...? . @dvergeylen Yes, this is blocked on #1771, or more precisely, #1794. We don't want to add a bunch of options and then switch to a different mechanic. Your feedback on #1794 would be appreciated! . It's this CSS in function-support.html that changes it:\ncss\n.katex { font-size: 1em !important; }\nCompare with the definition in katex.less:\ncss\nfont: normal 1.21em KaTeX_Main, Times New Roman, serif;\n@ronkok Perhaps we should add a note in function-support about how to change G.. Updated the broken links; thanks for mentioning those.. @johnm719 See https://katex.org/docs/font.html for (the new location of) documentation about font size change. Start a new issue if you need any further help.. I was surprised to see this code:\n```js\n    get style(): CssStyle {\n        throw new Error('DocumentFragment does not support style.');\n    }\nset style(_: CssStyle) {\n    throw new Error('DocumentFragment does not support style.');\n}\n\n```\nI guess this is necessary for typing purposes, because the HtmlDomNode interface has classes: string[].  I can see set raising an error, but I like the idea of get returning []. Any objections?  The one scary thing might be someone doing myDocumentFragment.classes.push('something'), which will then act as a no-op...\n@rrandallcainc For now, you could wrap x.classes in a try block.  Changing this behavior will actually make it harder to detect the difference between documentFragments and other types. \ud83d\ude04 We could also easily export the DOM types -- that seems quite natural.. @kevinbarabash That might be considered more standard. I could go either way. @ylemkimon Thoughts?. Looks great!. Maybe, given that javascript: was allowed before?  How do we indicate this?. From the error message, I'm guessing the equation is \\-Infinity. This is not valid LaTeX.  Perhaps you mean something like -\\infty?. Closing this for now. Let us know if you need more help.. The intended behavior is to render MathML for screen readers, and render HTML for visual rendering. If you include the provided style sheet (which you'll want to do for many other things, including using the right fonts), the MathML component will automatically be hidden visually. . Indeed, there must be something wrong with your configuration; even 0.9.0 should render that fine (though the behavior of \\vdots changed in 0.10.0-beta to better match LaTeX).  Perhaps post or link to a complete example for us to diagnose.  And try turning off highlightjs to see if that's the issue?. I have a hunch that Hugo is treating the output of KaTeX as Markdown, and newlines are getting turned into paragraph breaks. You can probably confirm by looking at the output HTML (it's static output, right?) and/or Chrome inspector.\nIn any case, posting the output HTML for us to look at (e.g. as a Gist) would help us diagnose.. I\"m a little confused between what you're calling input and output.  I tried this HTML file you posted, and it loads and displays fine in my browser (Chrome on Windows).  Was this HTML an input or output of hugo?  I'm still worried that there's a step after this HTML file that messes things up, but I suppose it might also be a conflicting style file issue.. Long ago, @gagern suggested that we change all of our classes to start with katex- -- in this case, we'd change .col-align-c with .katex-col-align-c.  I believe that would fix this particular problem.  Perhaps we finally have motivation to switch?  I'll make this an issue for discussion: #1456.\nOops, actually, class name isolation probably wouldn't make a difference in this particular case, because *= matches a substring of col-, so it'd also match katex-col-..... Thanks @yeshuanova for pointing to the relevant repository; I was having trouble finding it.  I created https://github.com/Vimux/Mainroad/issues/60. @Vimux Thanks for the quick response! That was easier than I thought. . I'm curious whether this speeds up KaTeX at all. Probably too marginal to tell. . @kevinbarabash See #1454. The code was similar to (and even simpler than) \\mathchoice.  But there are other challenges.... Cool, I didn't know about these features. Are they in base LaTeX too?. @kevinbarabash Oops, indeed!  Sorry about that.\nI don't see any particular reason to restrict this macro to internal use only.  It'd be fine for regular users to use it too, to fine-tune their MathML.. Anyone would be able to use it.  I don't use it in LaTeX much so I need to make sure we'd be reasonably compatible with LaTeX's interpretation.  (Unfortunately the main way to do this in LaTeX probably involves \\catcodes, which I'd like to avoid if possible.). I think this will work!  I tested the following LaTeX:\nlatex\n% Make the letter k into an active character (definable as a macro)\n\\catcode`\\k=13\n% Define its expansion\n\\defk{hi}\n% Now use it in three contexts\n$k =\n\\string k\n\\char`k\n$\nThe result is that \\string k and \\char`k produce the literal symbol k, while the first unprotected instance expands to hi.  So indeed, \\string and \\char` can be used to escape symbols that are defined as macros.  This gives me a direction to pursue on this PR: implement \\string and/or \\char, and use them to avoid infinite recursion on the MathML side.\nTo be clear, I'm not suggesting implementing \\catcode. But our existing functionality that defines single characters as macros is equivalent to TeX's functionality of setting that character's catcode to 13 (active) and then \\defing the character.  So it's nice that the escaping functionality of \\string and \\char will be consistent with LaTeX's interpretation of this analog.. I implemented \\char for producing literal characters, which resolved the infinite-loop issue.  Ready for review.. Yes. Thanks for the reviews! . While we can't define new general inline macros per se, the following definitions (taken from latex.ltx) should work just fine in KaTeX:\nlatex\n\\def\\choose{\\atopwithdelims()}\n\\def\\brack{\\atopwithdelims[]}\n\\def\\brace{\\atopwithdelims\\{\\}}\nThis seems like a good argument for this PR -- probably simplifies overall?. Can you confirm which version of KaTeX you:re using? katex.version should tell you. . You can try typing katex.version from the Javascript console. . @sw-tracker \\\\ and \\newline support was added in v0.10.0-alpha, so that's why it's not working.  Are you familiar with the Gitlab development process -- where to submit issues or pull requests?  If not, I can investigate.. I created https://gitlab.com/gitlab-org/gitlab-ce/merge_requests/20381. KaTeX does not support the * notation in the array column specifier. See #269. This feature would be relatively easy to add, but for now, you can just use \\begin{array}{l} in your example. . Some suggestions for what to include in the bug-report template, off the top of my head:\n KaTeX version (with some basic instructions about how to measure katex.version -- I wonder if we should also add a \\katex@version macro that can be used within KaTeX?).\n Web framework they're using (either that they're developing in, or an existing website).\n* A pointer to common issues in the README that they should check first.\nFor feature requests, I'd suggest an explicit request for how you'd achieve the requested effect in regular LaTeX, if that's possible.. Awesome.  Is it possible / a good idea to add that helper to the Jest test suite?  Or too messy / high overhead?. @ylemkimon Hmm. If we're calling parseTree and buildTree separately in the tester, couldn't we duplicate the tree in between and then see if it changed during buildTree? Of course, #1336 should really be merged before tweaking any of this.. I guess an option would be to have an optional callback on renderToDomTree of what to do with the parse tree... but that may not be worth it.  I'm happy enough that you tested it for existing code.. This seems fine, and simpler to me, but I'll reraise a question I asked in https://github.com/Khan/KaTeX/issues/1439#issuecomment-399452762:\n\nThe one scary thing might be someone doing myDocumentFragment.classes.push('something'), which will then act as a no-op...\n\nI think the real issue here is we're abusing the type interface.  But this was true before, too.  Perhaps the proper way would be to have two interfaces, one with style and one without (the former could subclass from the latter).  We could save this change for another PR if you prefer.. No, KaTeX does not support AsciiMath input.  I think the goal/focus is on just supporting LaTeX input, but others can feel free to chime in.  If there are AsciiMath -> LaTeX converters out there, you could certainly chain them together.  Otherwise, you might want to stick to MathJax...\nI'm curious: in what context do you use AsciiMath?  Do you have a lot of existing AsciiMath content, or do you prefer writing in AsciiMath, or something else?. Glad to hear it! Thanks @pkra. I've created #1474 to add a link to this project.. Sounds like a good idea to me.  How many additions would this be?. In general, I'm uncomfortable following MathJax because \"it looks good\". We should be following LaTeX as closely as reasonably possible.\nA source of the problem here is that you're really not supposed to use sizing commands like \\Huge in math mode. I'm not sure if @ronkok tried this directly with LaTeX, but it gives major warnings that you shouldn't do what you're doing. Of course, it does do something.\nDoesn't the mu unit already scale with font size? I'm a little confused about why this isn't working. . Thanks for investigating! That definitely sounds like the simplest fix.  Would this then match the MathJax behavior? Would it correspond to if, in LaTeX, you exited math mode, changed the font size, and then re-entered math mode?  (I'm a little surprised that's not what LaTeX does with size commands... unclear why LaTeX behaves in this buggy way.). Understood. I meant something slightly different -- your \\sqrt isn't in the \\Huge context. Consider the following LaTeX, which exits math mode, changes font size, then re-enters math mode:\nlatex\n$$ \\sqrt[3]{\\frac M M } \\mbox{\\Huge $\\sqrt[3]{\\frac M M }$ } $$\n (quicklatex render)\nNow the line width is scaled!  (\\text also works, though renders slightly differently.)\nI believe this (\\text{\\Huge $...) is essentially what we're proposing to simulate in KaTeX (when just writing \\Huge).  Does this seem reasonable?  (I'm not entirely sure.)\nAs an aside, this probably is a good thing to warn about via strict, especially if our behavior differs from LaTeX (but even then, given that LaTeX warns too).. We'll need more information about how you're using KaTeX, or a link to the site. In general, KaTeX provides mechanisms for inline math (aa you desire) and display math. By default, \\(...\\) should give you inline math, but the dedaults may have been changed in your environment. . @edigleyalexandre Is there a particular reason you prefer \\begin{equation*} over \\[ or $$?  I've written in #445 how you can enter math mode via custom begin/end commands.  See https://github.com/Khan/KaTeX/issues/445#issuecomment-406284568. Moving discussion back over here, as this has nothing to do with {equation}.\nI had no trouble adapting your example to run in KaTeX.  See https://codepen.io/edemaine/pen/GBNEeN. Did you try the same in LaTeX? My guess is that's correct behavior, but I haven't tested yet. . Experimenting in http://quicklatex.com/, it seems like\nlatex\n{98}^{\\small\\begin{aligned}&{+1.0} \\\\&-2.7\\end{aligned}}\nis the \"right\" way to make it smaller.  \\scriptstyle doesn't work here because \\begin{aligned} resets to \\displaystyle.  I'm a little disappointed that KaTeX doesn't do the same... (KaTeX does shrink when using \\scriptstyle before \\begin{aligned}, but it shouldn't.). How is this going to (auto?) build?  Is the idea to yarn build and push the result to the gh-pages branch?  Within CI?\nRegarding the checklist: once this gets merged, we could move the un-checked-off items into an issue.  Overall, very exciting!. By the way, now that KaTeX is its own organization, I believe we could also publish a website from a separate repo. Not sure whether there are particular advantages either way. . The new screenshots look great!. @kevinbarabash This looks like a bug in \\not.  Related to #1267, which we never merged.  Perhaps that PR solves it?  (But it has an outstanding issue, at least on the font side, though I think those glyphs could now be removed.)  I'm also left wondering why \\not can't be handled like the other accents, which don't have this issue.\n@ronkok \\ne became a macro in #1400.  Partly this is because the glyphs for \\ne and \\notin are currently messed up -- see https://github.com/KaTeX/katex-fonts/issues/47 -- so instead of maintaining them, we moved to the way LaTeX does it.. WOFF seems OK for the web, but are there reasons we might want to install the KaTeX fonts at the operating system level?  It seems plausible.  And I think that means we'd need TTF or OTF (which we don't currently have).. @ylemkimon Ah, I see. That seems more reasonable: still include them in the fonts repository, but don't link to them in the CSS.  I can't think of a reason not to do this, though it'd be helpful to have other opinions on this.  (What I've read on Google seems to agree with the idea.)  I also can't think of a major advantage, except slightly shorter CSS, but it does seem cleaner.. @ylemkimon Thanks for the quick review!  I implemented all the comments, and ported over dockers/Screenshotter/screenshotter.js and test/symgroups.js from nomnom.\ntest/symgroups.js doesn't actually run, though, as it depends on modules that use import.\nI'm also having trouble with dockers/Screenshotter/screenshotter.js running, apparently because of babel-plugin-version-inline.  Any ideas?\nModule build failed: Error: ENOENT: no such file or directory, open 'package.json'\n        at Object.fs.openSync (fs.js:646:18)\n        at Object.fs.readFileSync (fs.js:551:33)\n        at Object.<anonymous> (/afs/csail.mit.edu/u/e/edemaine/Projects/KaTeX/node_modules/babel-plugin-version-inline/lib/index.js:27:39). Ah, I see. Running screenshotter.sh (and thus webpack) from the dockers/Screenshotter directory fails, while running dockers/Screenshotter/screenshotter.sh from the root directory succeeds (and this is why tests are succeeding).  Is this a bug in https://github.com/gnandretta/babel-plugin-version-inline/blob/master/src/index.js#L3?  I'm not sure how paths are supposed to work in webpack.  @ylemkimon?\nOn the plus side, this PR is working now.. @ylemkimon All comments implemented, and I also restore the -m/--macro behavior of accumulating multiple macros into an array, reading over the commander.js documentation more closely.. Thanks. All fixed now.  (I thought I'd tested the macro arguments, but I guess not since I removed the braces and thereby changed the return value from null.  Tested again.)\nI also changed the build instructions from npm run dist to npm run build given that #1500 is about to merge.. @ylemkimon Thanks for the reviews!. I've switched the implementation to use \\mathrlap -- see the revised PR description.  Screenshot tests are now identical!. @ylemkimon Is repo bloat not a concern?  In some sense, git lfs is what we want, though I'd worry slightly about hitting the Github quota for that.. @ylemkimon That sounds cool!  I like the idea of storing cached built versions somehow, even in another repo (or branch?), with the ability/backup of building the fonts locally (with a few more dependencies -- which maybe we can improve via a Docker image).  Having lived with the split repo for a while, the double PR thing with restricted testing functionality is definitely not ideal.. You can actually run them anywhere.  But then they magically run as if you were at the root. Very convenient!. Perhaps we could just test for equality between calling KaTeX via cli.js and via renderToString? Still useful to test that the command-line argument parsing is working.. Now that #1484 is merged, it seems that someone needs to actually push the updated docs to the gh-pages branch.  (I believe only @kevinbarabash can do so without a PR.)  Right now, a lot of our documentation is missing from the public web.. @ronkok It's definitely how we want it to work in development.  When we publish to gh-pages (which I guess we do every release, not every commit, so that we document the release not the master branch?), we could imagine changing to use the CDN... but probably fine as is too.  Is there an easy way to see old versions of gh-pages, and thus documentation for older versions?. Thanks @kevinbarabash! Two questions given the process it took: Should npm run build be part of npm run publish-gh-pages script?  Should we add documentation about the USE_SSH script?. Another simple measure for multi-version documentation: We could consider publishing compiled documentation under npm publish and the release ZIPs on Github.\nI do like the version dropdowns of e.g. http://getbootstrap.com/, but it might be overkill for us, where we generally always want people to upgrade.. I believe this was intentional; see the discussion in #884 and #20.  The motivation is that \\[ x = 1 % comment \\] would also not work in LaTeX (the \\] would get commented out), whereas the following does work in LaTeX:\nlatex\n\\[ x = 1 % comment\n\\]\nI agree that this could use better documentation and error messages, though.. @ronkok That seems like a good idea.  It might be a bit tricky to implement because it's a change at the lexer level, but should be possible.... This has turned up a bug in \\href: \\href{x%y}{hi} works fine if it's a single line, but a multiline input like\nlatex\n\\href{x%y}{hi}\nbye\ncauses the comment behavior to trigger, resulting in an unclosed {.  LaTeX doesn't work this way (despite the syntax highlighting above), because \\href redefines how % works.  I think we'll need to fix this in the same way that \\verb works.. I think we're currently in Plan 2 (though adding to release script sounds nice), but with this issue completed, Plan 1 makes sense. This is why I was thinking it might be good for the published compiled documentation (not the doc source) to live in a separate repo, to avoid any bloat.\nA small issue regarding the function support page: in the past, @ronkok has done the work immediately after a release. If we continue this workflow, we'll need to be able to update a past release's documentation. (This is also an issue if we want to publish the docs on NPM.) The alternative would be to prepare the doc update before release. Perhaps we should start requiring updates to the document for each PR that affects it. . @ronkok All good points. We already generally require people to write tests for new features, so I think requiring documentation writing to be good practice. We can modify the contributing document, but also PR templates (essentially #1468) would help here: we could add checkboxes like\n\n[ ] Tests for new functionality or checking for old bug\n[ ] New functionality documented in docs, if applicable\n\nNonetheless, some mistakes will creep through (cli.js has often fallen behind on settings, for example), and I like the idea of a review of the new features and possibly a cleaning up of documentation before each release.  I suggest a process of something like: open an issue \"Preparing for 0.11.0\", and everyone who wants to can review what they care about, probably especially as regards documentation, but also things like \"I'd like to finish PR #n first\".  Maybe the issue includes a draft of the release notes.\nI definitely agree that the master documentation (next) should not be the default view.  But it could be nice to have things there as an option, especially given that we're currently pretty slow to release.  (Not an ideal state, but the truth for now.)  I think we can add a general warning in the next documentation (probably Docusaurus can do this for us) that says \"Warning: these features are available only on the master branch of Github, and are subject to change.\". (moving over from https://github.com/Khan/KaTeX/pull/1520#issuecomment-409001490)\nI'd like to reraise the question of whether we should have a separate repo for the documentation/website publication (not the source files).  We could move the website to http://katex.github.io/ which would be served from a repository called katex.github.io within the KaTeX project.  (See https://help.github.com/articles/user-organization-and-project-pages/#user-and-organization-pages-sites)  Then we wouldn't have to worry about repo size, and we would be free to put all the versions of documentation there (which really wants to have the CSS/JS/fonts copied).. Agreed.  Some combinations considered:\n gh-pages means possible repo bloat, so should probably aim for CircleCI build artifacts. I'm not an expert on how easy this is to do. Two questions: for released versions, and for master branch?\n KaTeX organization GitHub Pages avoids the bloat issue, so we can do whatever we want (so it's my leaning). We could autopublish the master version on next branch after every merge via CI. And autopublish released versions during release scripts. We could just include the full KaTeX builds in this scenario (maybe with a little smarts to avoid e.g. duplicate copies of font files that are identical when we don't change them from release to release); or we could use CDN for released versions, and the repo for master. The main downside is the URL change, but we can add a redirect.\n* netlify has its limits on network bandwidth etc. that I'm slightly worried about, but maybe shouldn't be. I'm also less familiar with how we'd use it.. I can buy those domains (and possibly transfer ownership) if that would speed things up here (but also don't want to complicate things).  @kevinbarabash What's best from KA's perspective?. Nice find! katex.js.org is another reasonable choice, especially if KA doesn't want to buy one.. I think the simplest starting point, roughly where we are now, is to publish documentation only during release, and use CDN for JS/CSS/fonts.  We should do what's necessary for that first.  I believe #1584 is good for that, too, because it enables local testing between releases.  (We could also link to https://katex.netlify.com/ for next documentation.)\nTo me, the main options are:\n Publish to GitHub pages in organization repo. Ideally linked from a domain name, though I also think katex.github.io is also a fine URL (better than the current one).  [my preference]\n Publish to Netlify [1]. Main downside is reliance on another tool (whereas our current reliance on netlify is nonessential, just for testing). Also needs a domain name.\n* We can also do a hybrid that uses GitHub pages in gh-pages but stores the built master files elsewhere (Netlify is probably the neatest idea there), but these seem overly complicated.. @rustylife You seem to own katex.org (apologies if you just happen to have the same name as the WHOIS entry). Would you consider transferring ownership? Please email me if so!. @rustylife That's great! Could you unlock the domain (if locked) and email me an authorization code / EPP code / transfer code?  Email to edemaine@mit.edu, not this public thread.. FYI, thanks to @rustylife, the transfer is in process, but it can take 5-7 days to clear. Hopefully there won't be any glitches and then we (meaning @kevinbarabash) can get the domain to point to the existing gh-pages, and then we can discuss moving to a separate organization repo.  Hmm, actually, it might make more sense to point the domain directly to the new repo, publish there, then replace the existing gh-pages branch with a redirect to the new URL?. @ylemkimon Just to add to the list of options, we can also use Namecheap's free DNS, given that I'm moving it to Namecheap (at least for the duration that I hold it, before it transfers to KA). I can give you (and others) access to that DNS system once it's moved. But I'm happy to use anything else. I guess Netlify makes sense if we want it to manage our subdomains.. Based on our discussions, I believe the plan now is to move to full Netlify (DNS + web serving) for katex.org, at least to try it out.  If Netlify starts charging for DNS, we may switch to e.g. Cloudflare, but this approach should be the quickest to get up and running.  @kevinbarabash is going to give us Netlify access, and @ylemkimon is going to try getting it up. (Both should already have access to the domain via namecheap.org.). @ronkok Maybe you could open a new issue with those points, so it's easier to track them. . I was wondering whether there was some way to output this usage information to a file that gets included into docs/cli.md.  https://github.com/facebook/Docusaurus/issues/599 suggests that this is best done via a plugin.  But I didn't see a matching plugin... maybe we could write one later.. I guess the main concern here is repo bloat in the gh-pages branch.\nI'd like to reraise the question of whether we should have a separate repo for the documentation/website publication (not the source files).  We could move the website to http://katex.github.io/ which would be served from a repository called katex.github.io within the KaTeX project.  (See https://help.github.com/articles/user-organization-and-project-pages/#user-and-organization-pages-sites)  Then we wouldn't have to worry about repo size, and we would be free to put all the versions of documentation there (which really wants to have the CSS/JS/fonts copied).\n@kevinbarabash Thoughts?  Should we discuss this in a separate issue?. @kevinbarabash Preference on katex.io vs. katexjs.org?  See https://github.com/Khan/KaTeX/issues/1509#issuecomment-409772045 (and https://github.com/Khan/KaTeX/issues/1509#issuecomment-411278202 for an alternative).. I've gotten it working in testing, but I'm still having a hard time seeing how this will work in terms of build.  Should versions.json be checked in so that it gets added to over time?  (That's not part of the release script, it seems.)  Does publish-gh-pages (for example) really load past versions of the Github repo and load the Markdown files from them to build versioned_docs?  Via tags or ...?. OK, I understand better now -- thanks for the explanation!\nI'm a little concerned about the entire website being checked in.  For example, will this include website/node_modules (around 61MB)?  Even if not, we're talking about 2.4MB per release.  Many of these files (like website/build/KaTeX/img, which is 685KB) will end up identical -- will Git realize that and store only one copy internally?  The versioned_docs is nice and tiny (67KB) -- docusaurus even seems to notice when documents haven't changed and only stores one copy of them -- but I'm worried about the rest.\nIt makes more sense to me for these built products to be consistently in the gh-pages branch.  Instead of checking in a fresh new website each time, we're adding to the existing one.  Then Git will definitely do the right thing, only storing changed files, and doing diffs within files.  Is this possible?. I don't see a response to the following questions:\n\nI'm a little concerned about the entire website being checked in. [...] we're talking about 2.4MB per release. Many of these files (like website/build/KaTeX/img, which is 685KB) will end up identical -- will Git realize that and store only one copy internally? The versioned_docs is nice and tiny (67KB) -- docusaurus even seems to notice when documents haven't changed and only stores one copy of them -- but I'm worried about the rest.\nIt makes more sense to me for these built products to be consistently in the gh-pages branch. Instead of checking in a fresh new website each time, we're adding to the existing one. Then Git will definitely do the right thing, only storing changed files, and doing diffs within files. Is this possible?\n\nAll this would be easier if we could decide to publish the website to another repo...\nOh, I see, build is also ignored.... I still might be a bit happier with explicitly doing git add website/versioned_docs (and possibly adding to that list later) instead of git add website (which feels like it could break if we forget to .gitignore something).. Do we want to force Yarn upon users (developers I guess) or present both as options?  I like how the current docs present both options under node.md...  On the other hand, our build chain needs to do just one.. Relatedly, I find it a bit annoying that using npm without yarn is now impossible.  E.g., npm test will try to run yarn.  This might work if we added yarn as a devDependency, though.... @kevinbarabash We could add package-lock.json to .gitignore.. @ylemkimon I think you want to remove sudo npm install -g codecov from .circleci/config.yml.  And maybe replace codecov with npx codecov?. Incidentally, what is the point of CircleCI running codecov in the test job?  We're not requiring that it pass, and codecov/project is already running such a test and posting about it, right?  Can't we just remove this step of the job altogether?. Relatedly, I found it confusing that the docusaurus server run via npm run start would not respond to http://localhost:3000/ (error message Cannot GET /), but rather required http://localhost:3000/KaTeX.  I expected everything to live at the root level of the test server (which would require relative linking), but barring that, we should at least improve the error message.. > Doesn't running npm start automatically open a browser with http://localhost:3000/KaTeX?\nI'm running npm start via ssh into a Linux machine, and in that setting, it doesn't.  (Cool to hear that it does that when running locally though.). https://github.com/facebook/Docusaurus/issues/448 seems to be @kevinbarabash's original issue.. Why does that path have to be absolute? Does ../static/katex.min.css not work?. @ylemkimon Fixed the error message and flow errors.  Thanks for the review!. I think parseNode.js would be more consistent.\nP.S. Sorry, I merged #1529 before seeing @kevinbarabash's suggestion to hold off on code changes.. \\hfil and \\hfill (and vertical variants) are all TeX built-ins.  I believe they're equivalent to \\hskip1fil and \\hskip1fill (why is there no \\hfilll for \\hskip1filll?) but given that they're not macros, I might be missing some subtlety.  We can check their meaning in The TeXbook.. Speaking of which, it might be nice to link to relevant Github issues in that third column for unsupported functions.  For \\hfil etc., it's #990.. Sounds good to me.  There are more changes to come, but lots of good stuff already, so seems like a good time.. I'm now of the opinion that we shouldn't publish to gh-pages except when releasing...\nI suggest we wait for #1521 and then publish with a new release.. @ylemkimon That is a nice list of documentation issues, and I'll try to help on them. (Let's self-assign issues that we're working on.) But I wonder if they're all necessary for 0.11.0.  We have an important bugfix (\\neq) and rather large documentation changes in the ready, and I'd rather we release soon (@kevinbarabash said this weekend) and update as needed.\nI added the new issue in #1428 which seems important for releasing, though @kevinbarabash (as admin) could still use the current version which directly publishes to gh-pages.\nThe rest seem like \"nice to haves\" but shouldn't necessarily block a new release; they could easily be added e.g. in \"bug-fix\" releases.  Or they could move to a 0.12.0 milestone.  (I may have also misinterpreted the list; maybe you had in mind that this weekend's release is 0.10.0 and these are for the next version?)  What do you and others think?. The remaining one from this list is #1706. Personally, I think it would be okay if we release 0.10.0 sooner, and push such bug fixes to bug fix releases like 0.10.1, unless they are bugs that were introduced since the last version.. There's something seriously wrong with the currently deployed website:\n\nNote the non-italic text in the arrays. I don't think the current master branch has this problem, but is worth checking. @ylemkimon do you know what's causing this? (Possibly related to \\mathnormal font changes.). Agreed. I assume that's built-in Docusaurus behavior? The icon to bring up the topics list (looks like a full-screen icon) is particularly weird. This PR is just about the front page though. . That would be nice. It's a little tricky to design line break tests, but maybe we can come up with something... . Yes, that's a good idea. (An htmlmathml containing an ordgroup.) We could test it explicitly or use a snapshot test. Either way, it'll be easy to test various macro-based operators. . Agreed. I think we only need to use alpha/beta/pre for testing the release infrastructure. But hopefully it's not even necessary at this point, and we can do bug fix (0.11.1 etc.) releases if needed. . This bug is fixed on master, via PR #1497. I guess this is a reminder that we should do a release soon. . Is it just the responsiveness that fails?  It'd be nice if something renders in IE 9, just not as beautiful as otherwise.\nWe could also just not support IE 9 on this one website.  That's pretty different from KaTeX itself (not) supporting it.  (I'd also be fine with discontinuing support for IE 9, but that might want bigger discussion...). > But there is an oddity on that last expression (the q condition) on a 320 px wide screen, which white-space:nowrap might fix\nYou could also just wrap the math in {...} to prevent the line break.  Or use display math \\[...\\] (why aren't we using display math?).. @ylemkimon Thanks for all the comments and pointers.  I've implemented them all, except for caching header positions.. Do we really want the \"(in master)\" notes in the documentation? We already have features listed in the docs that are master only. (I'd also like to release soon.)\n. This is related to #1544.  Perhaps we should only publish at release times, for now.. We can publish docs every release once #1521 is merged (soon), then publish every commit once #1520 gets merged (but that, I fear, might want to wait till we get a domain name...).. Sounds good! I definitely think it makes sense to move \"examining TeX\" to CONTRIBUTING.md. I could go either way on whether to move/copy that to docs. . Why is JSON.stringify polyfilled at all? Is there a browser that doesn't support it? . @ylemkimon Ah, I see.  Can we remove symbol support from Babel, given that we don't use it?  Or add a lint test that avoids this in the future?. @ylemkimon Should we merge this for now, and do as a separate PR, or replace this with that PR?\nAh, I see #1566 is already a replacement PR.. Closing in favor of #1566. Thanks @otacke for spotting the discrepancy!. > Many of logos are trademark and some may have a guideline, which may not allow using them in our site. I wonder using them here qualifies as a Fair use. If not, I think we should search for logo guidelines and contact them if necessary.\nGood point.  https://en.wikipedia.org/wiki/Wikipedia:Logos discusses this issue at length.  One relevant quote:\n\nNote that it is not necessary to seek formal permission from the owner in advance of using its logo, so long as the usage is fair use, does not create any impression that the logo is associated with Wikipedia or endorses either Wikipedia or the article in which the logo appears, and does not create any reasonable grounds for complaint by the owner.\n\nFair use in the US is governed by four factors: whether the use is commercial (no for KaTeX) and/or educational (probably yes); the nature of the work (a logo); the amount of the work used (all, though often low-resolution); and the effect on the market value (I believe we're only increasing the linked product value by linking to them, and I doubt the logo itself would ever be sold).  There are no hard-and-fast rules, and I am not a lawyer, but my impression is that these uses would qualify (and Wikipedia's read seems to be the same).\nRegarding the \"association\": I think it's clear that the linked logos are from the linked projects, not ours.  (And even more so with the text labels.)  So should be good here.\nRegarding the \"reasonable grounds\": If we listed a project that doesn't actually use KaTeX, or if their use of KaTeX were somehow a secret, I could imagine a complaint.  Otherwise, I don't expect one, and I think we can reasonably include the images and take them down if we get a take-down notice.\nI tried to link to official logo URLs whenever possible, and otherwise Twitter/Tumblr profile pictures, but it's true that any of them could move and we'd have to monitor that.  (We have the same issue with badges, though their APIs are usually better defined.)  I believe it's simpler copyright-wise if we link to remote pictures instead of including copies on our own repo/website (but the trademark issue is unchanged), so I'd personally prefer to keep these as-is.\nHere are the logo guidelines I've been able to find:\n https://en.facebookbrand.com/assets/messenger-toolkit-2 seems fine, except it says not to use the word \"Facebook\".  I'll remove that.\n https://www.dropbox.com/branding mentions it's fine to use the logo to link to Dropbox, though it does say we should write them about \"promotional\" use, which this may qualify as.\nProbably good to have @kevinbarabash weigh in here.. I added many of the projects that @ylemkimon listed.\nI'm not sure what to do with the ones that have plugins.  For now, I've listed ones that have an \"official\" plugin for KaTeX, but not the others.  I'm not sure I know the right definition of \"official\" though...\nPandoc doesn't seem to have a logo, though it's been discussed.  Not sure how we want to list projects without a logo...  Maybe a second list at the bottom of projects without images?\nNew screenshot:\n\n. @kevinbarabash Is there a public URL for that logo?\nhttps://avatars0.githubusercontent.com/u/15455 (the Github organization avatar) seems reasonable.. @ylemkimon Can you ask for a linkable URL? Or is this goal futile and we should we add this one to the repo?\nAlso, sounds like I should remove Bokeh.  Will do.. I implemented @ylemkimon's comments. @kevinbarabash That image loads fine for me, in local testing and on netlify.  Are you using Chrome or another browser?  It is an SVG image, but I thought that worked on all browsers...\n\n. @ylemkimon Good catch. I've switched to a specific commit.. Added in #1635. OK, I took a stab at revising.  For some reason, I'm unable to push to this branch.  Could you pull from https://github.com/edemaine/KaTeX/tree/examples?  Or help me debug this error message:\n```\nERROR: Permission to ylemkimon/KaTeX.git denied to edemaine.\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n(I'm trying git push git@github.com:ylemkimon/KaTeX.git examples:examples which I thought worked before, but has not been working recently.)\nI just noticed ylemkimon/KaTeX forked from daniel3735928559/KaTeX at the top of https://github.com/ylemkimon/KaTeX.  I probably don't have access because of that.... Happy to help! It's great to see the documentation improving so much. . Just to clarify: you want to avoid publishing master/next docs because we're not yet making the built master CSS/JS/fonts available, right? (and then 2-2 fixes this?). (I believe this means we should get to this PR before next release.). While I wish Chrome didn't do any rounding so we could be more TeX-accurate, I think it's reasonable for the printed form to match the screen form in this case, given that the rounding bug sometimes occurs in printed form.. This probably goes without saying, but \\html and even \\includegraphics create rather large security holes if the LaTeX source is untrusted.  (\\html{<script>...</script>} most notably, but also including an image from an arbitrary host can enable broad tracking.)  We're wondering the same in #1437 with the much simpler notion of class and id attributes.  I feel like we need a security option.... @pzinn You'll get a lot of mileage by looking at the types.  defineFunction refers to type FunctionDefSpec, and its props has type FunctionPropSpec, and its argTypes has type ArgType[] (admittedly, this is a deep chain).  ArgType is defined in types.js with a decent comment:\njs\n// LaTeX argument type.\n//   - \"size\": A size-like thing, such as \"1em\" or \"5ex\"\n//   - \"color\": An html color, like \"#abc\" or \"blue\"\n//   - \"url\": An url string, in which \"\\\" will be ignored\n//   -        if it precedes [#$%&~_^\\{}]\n//   - \"original\": The same type as the environment that the\n//                 function being parsed is in (e.g. used for the\n//                 bodies of functions like \\textcolor where the\n//                 first argument is special and the second\n//                 argument is parsed normally)\n//   - Mode: Node group parsed in given mode.\nexport type ArgType = \"color\" | \"size\" | \"url\" | \"original\" | Mode;\nUnfortunately, \\html is going to be tricky because (I think) it needs to work at the lexer level -- you don't want it parsed by LaTeX at all.  You'd want to mimic how \\verb, \\url, and \\href are currently implemented, primarily in Lexer.js and Parser.js.\nAgreed about L73 of defineFunction.js.  Feel free to submit that as a tiny PR!. This would definitely break several installations (e.g. mine).  But it's an easy fix, adding charset to the <script> tag.  I guess the question is whether the space savings is worth it...  (It's a shame that utf-8 isn't the default charset.). I also think turning the current giant itemized list into sections would be a good idea.. If we split the logo into two pieces (square and text), we could use the square part in #1569.. Just got to try this.  Wow, very cool!  A few questions for possible follow-up:\n It's cool to demo the macros feature, though I wonder if we should be encouraging people to use that, or instead show use of \\def/\\newcommand, as most KaTeX end-users won't be able to modify options?\n Should we add a \"Copy HTML code\" button (output of renderToString)?\n* Also unclear to me whether Copy KaTeX code should output render (as currently) or renderToString.  But this is fine.. It seems like HtmlDomNode should be a subtype of documentFragment (representing the special case of a single-node fragment), whereas currently it's the other way around.  Maybe we can have a helper function assertNodeNotFragment that converts either type into an HtmlDomNode, wrapping in a span in the case of a documentFragment?. @kevinbarabash We can push directly to ronkok/KaTeX as follows:\ngit remote add ronkok git@github.com:ronkok/KaTeX.git\ngit fetch ronkok\ngit checkout ronkok/includegraphics\n...make changes, commit...\ngit push ronkok includegraphics  # I think this is right; I might be off. I feel like embedding arbitrary images is also a potential security hole, in that it could be used for tracking users.  This is a third situation (I believe) where we might want some kind of security option. (The others are #1437 and #1596.)\nIn this case, we should probably also restrict the URLs to use protocols from the allowedProtocols setting.  But I also fear that's not enough -- links are relatively safe, while embeds less so.... As I wrote above:\n\nI feel like embedding arbitrary images is also a potential security hole, in that it could be used for tracking users. This is a third situation (I believe) where we might want some kind of security option. (The others are #1437 and #1596.)\n\nI think we really need some kind of security option (like we did with strict) before this should be released.  Links and embedded images are quite different, so our existing URL restrictions don't suffice.. You can also try String.raw; see https://khan.github.io/KaTeX/docs/api.html#in-browser-rendering. @ry-randall Presumably you can use the existing katex npm package for now?. KaTeX's goal is generally to work and look the same as LaTeX. Given that LaTeX already has a way to override all its parameters, my sense is that KaTeX should behave the same, and offer the exact same overrides. We've actually been moving away from CSS for this reason.\nDid you have a specific behavior that you're having trouble producing? It's true that we currently support \\arraystretch but not \\arraycolsep, but the latter is in the cards, and feels like the right solution IMO. . Is versions.json missing here?\nRemind me of the process from here on: one of us runs yarn publish? From which branch? Then we accept this PR?\nP.S. The CHANGELOG has fallen out of date for a while.  Maybe worth a different PR? Up to you.. So we change all the links to the new version before publishing to NPM?  I guess that's OK for the README.  When do the docs get published to gh-pages? In the ./release.sh -p step?\nP.S. Sorry, I guess I missed it while looking for versions.json.. > I think we should require updating the changelog in the PR or have a PR title convention. There are 243 commits since v0.9.0: v0.9.0...master.\nAgreed.  I've never been clear on the CHANGELOG policy since it got created in #1322; see https://github.com/Khan/KaTeX/pull/1322#issuecomment-390208393 which we never discussed.. @kevinbarabash Are you going to ./release.sh -p 0.10.0-rc from the master branch now, or should I?. @ylemkimon Is it OK to merge other PRs while you're working on the release? (Feel free to merge if so.) Or should we wait?. Maybe @ylemkimon could write a document about the release process. \ud83d\ude04 \nI just took a quick look at a checkout of this, and the page seems good. (In particular, the CDN is working.). On Netlify, this generates:\nhtml\n<link rel=\"shortcut icon\" href=\"/../favicon.ico\">\nIs this important enough to fix? One approach would be to have our own favicon.ico in img and then set favicon: 'img/favicon.ico'... Or we could ask Docusaurus to fix support for absolute URLs in favicon.. Sounds good. Incidentally, this may change once we move to katex.org, where we don't need the /KaTeX root directory.. Combined with GreenKeeper not updating yarn.lock?. @ylemkimon The SHA384 hashes seem incorrect (on all files).. @jessebett You can fix the # issue as follows:\nlatex\n\\newcommand{\\myblue}[1]{\\textcolor{##0074D9}{#1}}\n(This is how #s get escaped in TeX macros.)\nIf you want a global definition, you can use \\gdef:\nlatex\n\\gdef\\myblue#1{\\textcolor{##0074D9}{#1}}\n(Unfortunately, LaTeX has no global version of \\newcommand.)\nBoth of these are generic advice about LaTeX not specific to KaTeX. Specific to KaTeX, there's another way to specify global macros: you can specify the macro in the macros option when calling KaTeX.\nI agree that we should probably deprecate the # if it's not there in LaTeX. KaTeX's color support has always been HTML focused, and we should instead bring it into alignment with LaTeX. . @jessebett In what environment are you processing that example? Autorender ought to work (if not, it's a bug in KaTeX). Other systems need to call KaTeX in a particular way to get shared environments (by design). . @jessebett Could you link to a complete example of the HTML to diagnose?. @ylemkimon The title of this issue is still open. Given that most of the thread was about other things, fine to move this to another issue. But we should do that. . This was a change in #1500 when we cleaned up our build scripts.  There we speculated that this change wouldn't be a big deal, but if it is important, I imagine we can fix it in one of those two ways.\nTo restore the root directory of katex, we could:\n1. Use GNU tar's --transform to add the prefix (but I'm not sure this works on BSD in particular MacOS?)\n2. Make a temporary symlink ln -s build katex and use tar --dereference. @ccorn Does that work with tar on MacOS? (gnutar doesn't work on Linux.). My guess would be that, if someone has tar, they also have cp -R, though I'm not certain.  (Personally I run Linux or Windows+Cygwin.  I'm not sure how someone would normally get tar on Windows, without Cygwin or Mintty...)\n[followup] And I think rimraf katex before cp makes sense.. @ccorn The issue is that we need the files in dist for other reasons. We used to do it something like that, and #1500 aimed to clean up the scripts to focus on building into dist, which we need much more often than zipping.  Copying the files from dist into dist/katex could be cool, but then we can't use cp -R (I think).. @alihammad-gist As stated above, KaTeX is about rendering math, not plotting functions/graphs. KaTeX could be used to add math to plots, but that's not within scope of this project.. quicklatex.com confirms that LaTeX behaves the same as KaTeX here, which is generally KaTeX's goal.  The correct way to write that example (from a LaTeX perspective) is\nlatex\n\\text{Score} = 2\\times\\text{(Protein\\_(g))}  -  0.75\\times\\text{(Lipid\\_Tot\\_(g))}\nBasically, _ is a special character in LaTeX that is allowed only in math mode, for producing subscripts.  In \\verb, it will be treated as an underscore character, but in \\text, it needs to be escaped as \\_.\nI could see an argument for allowing bare _ in text mode in KaTeX's nonstrict mode, but hopefully it's easy enough to change the source code.. Wow, that's a pretty bad implementation of \\text in MathJax.  It seems that whatever is passed in is treated verbatim; no macros work inside, although embedded $...$ math expressions work.  I also tested on https://www.mathjax.org/#demo\nIf the font difference isn't a problem, you can do the following on both MathJax and KaTeX:\nlatex\n\\verb|Score| = 2\\times\\verb|(Protein_(g))|  -  0.75\\times\\verb|(Lipid_Tot_(g))|\nDo you have a situation where you need to support both MathJax and KaTeX?  It seems like this is mainly a bug with MathJax, though again KaTeX could consider supporting raw _ in nonstrict text mode.. While we maybe can't change MathJax's definition of \\text{_}, I think we could file a bug that macros like \\_ or \\textunderscore don't work in \\text{...}.  Also, for example, text accents (\\text{\\'e}), text font commands (\\text{\\emph{hello}}, \\text{\\textit{italic}}) won't work.  Everything inside \\text, except $, seems to be treated verbatim.\nThis is the first big feature I've noticed missing in MathJax -- a good argument for using KaTeX.. @nikilarigela This would be best put in a new issue. The problem you seem to be having is giving the \\[... \\] wrapper to KaTeX. You should be giving the insides to KaTeX, without the \\[ and \\].\nP. S. Also, KaTeX's array environment doesn't support * yet. But that's another issue. . What's really going on here is that we don't properly implement \\begingroup ... \\endgroup. They apparently behave \"transparently\" in LaTeX, while we currently define them as equivalent to \\bgroup and \\egroup. \nSee https://tex.stackexchange.com/questions/1930/when-should-one-use-begingroup-instead-of-bgroup although the TeXbook may be more informative. . Cool, another change to the release script that needs testing. \ud83d\ude04 . Here's a quick attempt at turning the first two letters of \\KaTeX (our current logo) into a square icon:\n16x16 favicon:\n\nSVG (doesn't look good in Chrome, but is fine in Illustrator)\nHigh-resolution PNG:\n\nZIP of generated icons from https://www.favicon-generator.org/ which recommends this code:\nhtml\n<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/apple-icon-57x57.png\">\n<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/apple-icon-60x60.png\">\n<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/apple-icon-72x72.png\">\n<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/apple-icon-76x76.png\">\n<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/apple-icon-114x114.png\">\n<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/apple-icon-120x120.png\">\n<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/apple-icon-144x144.png\">\n<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/apple-icon-152x152.png\">\n<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-icon-180x180.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"192x192\"  href=\"/android-icon-192x192.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/favicon-32x32.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"96x96\" href=\"/favicon-96x96.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/favicon-16x16.png\">\n<link rel=\"manifest\" href=\"/manifest.json\">\n<meta name=\"msapplication-TileColor\" content=\"#ffffff\">\n<meta name=\"msapplication-TileImage\" content=\"/ms-icon-144x144.png\">\n<meta name=\"theme-color\" content=\"#ffffff\">\n. It looks like a newline in an SVG is somehow getting translated to a <br>. Are there newlines in our SVGs? . I wonder if we should remove the newlines in (or otherwise minify) the SVGs when outputting them, to avoid this issue. . @fsonmezay If you're looking for a sans-serif font, you can use \\mathsf{example} or \\textsf{example}, or start a formula with \\sf. This uses the sans-serif font in the Computer Modern typeface.. Can you try npm update -g yarn to update yarn, then run yarn again?. @ronkok yarn doesn't use package-lock.json; it uses yarn.lock.  (You're not using npm install anymore are you? Probably package-lock.json is just leftover from pre-yarn times?)  I checked and the style-loader version is correct (0.23.0) in yarn.lock and package.json on master -- maybe check on your local copy too?  @ylemkimon Any ideas?. @ronkok One other idea: try deleting the node_packages directory and running yarn install again.  A bit of a big hammer, but that should fix it.. I'm confused by your example source/rendering.  One has commas and the other doesn't.  Which did you have in mind? Perhaps you meant\nlatex\n$\\dfrac{1}{Rb}=\\dfrac{\\dfrac{1}{R1\\,R3}}{\\dfrac{R2\\,R3}{R1\\,R2\\,R3}+\\dfrac{R1\\,R3}{R1\\,R2\\,R3}+\\dfrac{R1\\,R2}{R1\\,R2\\,R3}}$\n? If so, KaTeX's rendering seems to agree with LaTeX's: (via quicklatex)\n\n. Closing as KaTeX seems to match LaTeX behavior here.. @luweikxy Could you give an example of a formula that, when you delete it, fixes the error?. What's happening is that \\text\\AA is macro-expanding to \\text\\r A which obviously doesn't work (it should be \\text{\\r A}, and LaTeX seems to treat it that way).  This does seem related to #924.  We could fix this instance now by tweaking the macro \\AA to wrap in braces, which @ronkok has done for other macros, and is probably worth doing as an interim fix.  It'd be nice to fix it properly at the expansion/parsing level... I'm just not quite sure how.. @willymcallister Please ask in a new issue. . Yes, macros defined via \\gdef are output to the same macros object.  For example:\njs\nlet macros = {};\nkatex.renderToString(\"\\\\gdef\\\\foo{123}\", {macros});\n//macros.foo is now set\nSee https://katex.org/docs/options.html, in particular:\n\nThis object will be modified if the LaTeX code defines its own macros via \\gdef, which enables consecutive calls to KaTeX to share state.. Yes, \\r and \\mathring are a relatively recent feature addition (0.9.0). You may be able to check what version you're using by typing katex.version in the Javascript console. . This is a duplicate of issue #269. For now, you can use \\begin{array}{cc}.. @nikilarigela I'm not sure exactly what you tried, but this worked for me on katex.org:\n\nlatex\nf\\left( x \\right)\\, = \\,\\,\\left\\{ {\\begin{array}{cc} {\\frac{{ - \\sin \\,\\left\\{ {\\cos \\,x} \\right\\}}}{{x - \\pi /2}}}&{x\\, \\ne \\,\\frac{\\pi }{2}} \\\\ 2&{x\\, = \\,\\frac{\\pi }{2}} \\end{array}\\,,} \\right.\nHope this helps!. \\right needs an argument. \\right. matches a `\\left' but without drawing anything. . @OnlineVagrant The math part of the source code you gave works fine on the KaTeX demo page:\n\nThe fact that you're getting a line break in the middle of an aligned environment suggests that your not including or somehow changing the display of some KaTeX classes, from inline-block to static. In what context are you using KaTeX?. @OnlineVagrant You can post a new issue for Boostnote here: https://github.com/BoostIO/Boostnote/issues\nYou can post your screenshots of what's happening in Boostnote and, by comparison, my screenshot of what happens on the KaTeX demo page, and link to this issue. I believe what is happening is some kind of additional line breaking, possibly due to an incorrect display CSS, but it's difficult to tell without seeing the HTML/CSS that they are generating.. This is the same issue as #1676. Basically, KaTeX actually implements \\text like LaTeX, whereas MathJax just treated as a kind of verbatim environment. I view this as a bug in MathJax, though I don't know whether it could be fixed. There are some workarounds discussed in #1676.. I'm confused why this is happening, but I could reproduce it (also with katex -d, display mode). Thanks for the report!. FWIW, yarn global add katex behaves the same.  But from a Git master clone, yarn; yarn build; echo a+b | node cli.js works fine.  So maybe something to do with bin mechanism.... OK, I found the problem: a bad (0) default for maxSize.  #1739 fixes the issue, and meanwhile you can use katex -s 999 or similar.. @AlbertHilb Thanks! One more request: could you add some simple tests? https://github.com/Khan/KaTeX/blob/master/test/katex-spec.js#L1199-L1200 would be easy to add to.. Thanks again for the pull request!. I'm not sure if this qualifies for simple, but here is one way to do it that looks reasonable:\nlatex\n\\begin{array}{ccccc}\n\\mathclap{C_7} & & & & \\mathclap{C_1} & & \\mathclap{C_0}\n\\\\[-.5ex]\n\\mathclap{\\curvearrowleft} & & & & \\mathclap{\\curvearrowleft} & & \\mathclap{\\curvearrowleft}\n\\\\[-.5ex]\n& \\mathclap{D_7} & \\cdots & \\mathclap{D_2} & & \\mathclap{D_1} & & \\mathclap{D_0}\n\\end{array}\n\n. Hmm, interesting idea.  That wouldn't be too hard to do, I guess.  But I do wonder how useful it is.  Are you doing multi-line code blocks inside math mode?  Can you show an example?\nIf it's outside math mode, can you just use <pre>...</pre>?  KaTeX is mainly just about LaTeX math mode.  (I've hacked together verbatim environment support for parsing text-level LaTeX here: https://github.com/edemaine/coauthor/blob/master/lib/formats.coffee)\nUPDATE: I just checked, and \\begin{verbatim} doesn't seem to work in math mode in LaTeX.  So I doubt we'd want to add it to KaTeX.... That's pretty much my motivation in the Coauthor code that I linked above. I allow users to use Markdown or LaTeX syntax for features like code blocks, by regular expression substituting a few LaTeX features like verbatim, running a Markdown parser, and using KaTeX to render math.\nI think it would be cool to add this kind of functionality directly to KaTeX, but it's already represented by an old issue I opened: #604.. I'd start here: https://wordpress.org/plugins/wp-katex/. Question: does this make us less accurate compared against LaTeX? Or is there no hope of being identical given layout engines that we shouldn't worry about <1/10000 ems? (Is that the correct epsilon for this PR?) . The mathematician in me is uncomfortable throwing away precision for no reason. I guess the advantage is cleaner input. Is this for humans reading the output, or to speed up HTML parsers down the line? The costs seem to be possible inaccuracy (maybe only visible in printed output?), and maybe decreased performance (though not sure how measurable that is). Sorry, should have posted these questions on the original issue before the PR, but at least now we can try to evaluate them. . By the way, I'm reminded that TeX lengths have some fixed-point precision. Maybe worth tracking that down and (roughly) matching it? . I found what TeX does: see page 58 of the TeXbook:\n\nTeX represents all dimensions internally as an integer multiple of the tiny units called sp. Since the wavelength of visible light is approximately 100 sp, rounding errors of a few sp make no difference to the eye.\n\nAccording to our own table, 1sp = 1/65516pt = 1/6551.6em with our ptPerEm = 10. I think these means that this PR's 1/10000 tolerance is less than TeX's, so seems like a fine choice. A more radical choice would be to change KaTeX's internal representation to sp, but I'm not sure that's worth the effort.\nHave you tried measuring the performance hit with yarn test:perf?\nDo we care that render and renderToString will use different measurements (only the latter will round)?  @ylemkimon's suggestion of changing calculateSize instead would fix this.. Indeed, it's a long road to being able to parse arbitrary TeX. In some sense, I believe it is impossible. (For example, we can't really write to aux files, support multipass compilation, support \\output, and I don't think we want to support \\catcode.)\nBut perhaps we can reinterpret your request to supporting the semantic package? At first glance, large parts look doable. It might make more sense as a contrib (optional) package. Ah, one question: is \\inference used in math mode, or outside? The latter would be difficult given the current model of KaTeX. (until #604) \nIs this something you'd be interested in doing? There are extensive macro features, though still a ways from what TeX supports. . TODO (?): Update CHANGELOG.md. I thought that the GitHub release notes would just list the changes since the last version (release candidate) -- at least that's what we've been doing before.  I could see and edit the draft (visible here: https://github.com/Khan/KaTeX/releases/), and wrapped a couple of commands that needed wrapping in backticks. (It might be worth doing this for all LaTeX commands, also in the change log?). @ylemkimon I agree that's probably most useful in CHANGELOG, but it's not what we've been doing in GitHub release notes.... Can you post a KaTeX example? (I only see a MathJax example.)\nIn any case, it looks like you're not including the CSS files and thus not getting the required fonts. On desktop, tje browser might have a fallback font for these characters, but Android might not.\nAlternatively, it could be an XSS issue with pages from localhost. Did you look at the logs from the browser? Also, which browser are you using? . In LaTeX and KaTeX, \\fcolorbox renders its third argument as text.  You need to switch back to math mode:\nlatex\n\\fcolorbox{#007bff}{white}{$16x^2$}\n\n. Yes, this behavior matches LaTeX. It is implicit in the \"Supported Functions\" documentation in that the letter A appears upright and not italic. But I agree that is quite subtle, and we could perhaps make it more explicit. For example, we could make the example text include a space character. @ronkok, thoughts?. Links to relevant LaTeX documentation seems like a neat idea. For example, for features that come from a specific LaTeX package, we could link to that package documentation on CTAN. The wikibook is a reasonable other source. Nice idea!. This matches LaTeX behavior. In LaTeX, you need to write\n\\frac(\\textcolor{red}{1}2}{3}\nIf you want \\color to work like \\textcolor, there is an option specifically to maks that happen; see the option documentation. (MathJax has the opposite default: it incorrectly defines \\color to work like \\textcolor unless you include the Color package.) . This rendering looks correct (matching LaTeX) to me. Am I missing something? I would generally use / instead of \\frac in exponents, but that is a LaTeX thing. . @HenrySeed Yes, \\fbox uses the current LaTeX color.  Try e.g. \\color{red}\\fbox{hi}: \n\nYou may want \\fcolorbox, which lets you control the frame and background colors.  See https://katex.org/docs/support_table.html. @kevinbarabash Agreed, it seems intuitive for \\fbox to use the \"default color\".  It also seems to be technically possible, at least for \\fbox: current we have a rule\ncss\n.fbox { border: 0.04em solid black }\nbut if we replace it with the .fcolorbox rule:\ncss\n.fcolorbox { border: 0.04em solid }\nthen the border seems to just inherit the current color (including a default of black).\n@ronkok Do you think there would be downsides to this?. Cool, then I put a PR together in #1847.. @ronkok Sorry for the long delay in responding. This may be a good decision after all; thanks for the explanation.  Indeed, for math formatting, \\boxed is definitely a better choice.  The downside of not including \\fbox is someone (like me) searching for \\fbox on the page won't find it.  But I suppose the point of the support table is to list everything supported (which I like), and the goal of the supported functions list is ... not?  I could go either way on this: maybe \"supported functions\" suggests it should be a complete list, or maybe it's OK to omit some minor functionality.  It'd be helpful to get a third opinion on this.. I believe this is the same request as #1596. Also related to #1771 if you'd care to comment.. Thanks! I'd been meaning to add an issue for this.\nThe fix for now is to add this CSS to your page:\ncss\n.katex-display > .katex > .katex-html > .tag !important { left: 0; right: auto; }\nWe should add this to the documentation, or add an leqno option to the options list. (In LaTeX, this is triggered via \\usepackage[leqno]{amsmath}.). Oops, I misread \"left-justified equation\" as \"left-justified tag\" and answered the latter.  That is indeed how you'd do left-justified equations.  Is there a way to do this in LaTeX?  (If so, we could add explicit support in KaTeX, but if not, we probably won't.). Cool, yes, I believe KaTeX should support both fleqn and leqno global options to match LaTeX's amsmath, so I've renamed this issue accordingly.\nflalign is tougher in the current KaTeX model, because it applies only at the top text level, not within math.  It could be done as part of #604 though.\nIn LaTeX, it is possible to change the global fleqn setting, but it is messy. With \\makeatletter on, left justification can be turned on via something like \\@mathmargin\\leftmargini minus\\leftmargini, and centering can be turned on via \\@mathmargin\\@centering. (I got this by looking at the amsmath source code.) This would be somewhat difficult to implement in KaTeX, but I don't think we need to support this level of configurability.. @mmaloon Thanks for reporting this bug!\n@ylemkimon I'm guessing this was from one of the parser changes, maybe the raw/url string reader? We should also add some tests to catch such regression in the future.. Thanks for the heads up about RawGit! FWIW, https://www.jsdelivr.com/rawgit suggests that we could have replaced the links to use jsDelivr, but this is more future-proof.. Sorry about the hassle.  This change was made in a0ddad338e05dc09209b5a79b13e665c5bf7b72e when adding support for \\tag and \\tag*.  I imagine you're safe (for now anyway) if you don't use \\tag at all.\nIt's almost the case that you can number equations by setting a macro \\df@tag to an incremented counter.  Unfortunately, parseTree currently blanks out \\df@tag at the beginning of parsing. If we changed that to blanking it out at the end, then at least you could pass in an equation number.  But nothing quite as simple as your CSS. (Does it really get correct vertical alignment? In the .tag rule, I ended up using position: absolute; right: 0px instead of floats, plus some work to shift things correctly vertically. I couldn't get floats to work, despite their superiority in never overlapping the equation.)\n350 is tracking the addition of automatic equation numbering.  This is probably not hard to do now that we have \\tag support (and that's why I wrote it).  The main issue is what the settings interface is like.  Does (AMS)LaTeX just support arabic numbering?  What about relative-to-section numbering?  Ideally we'd add a general counter system at the same time (related to #687), as discussed in https://github.com/KaTeX/KaTeX/issues/350#issuecomment-139476081, though this can likely be implemented through the macros system, not as a separate argument.. Indeed, LaTeX renders $$\\text{\\Huge\\TeX}$$ as\n, so this is a bug.  Thanks for the report!\n. Hmm, the sizing in subscripts (I guess with \\scriptstyle) doesn't match LaTeX anymore.  QuickLaTeX rendering of the screenshot test looks more like the old screenshot, not the new one:\n\nI'll need to mess with font sizing then... Presumably this is what happens with \\hbox instead of \\text.... OK, this should be ready for review.  Added since original posting:\n\nI've introduced a new \"hbox\" argument type that automatically wraps the argument in the equivalent of \\textstyle\\textrm{...}.  I imagine this will be useful to fix for other commands we support with text arguments, but I haven't done a thorough review yet.  I'm open to other approaches, though.. Just want to say this sounds like a great improvement!  General catcodes would be difficult given our regular-expression approach (and we might want to add a comment about the limitations here, if there isn't one already), but for comment characters, it seems perfect.. Replaced by #1813.. @ylemkimon Sorry for the long delay on looking at this. I've just pushed a new proposal where each call to the trust function gets a TrustContext which includes the command but also e.g. url and protocol as you suggested.  What do you think?\n\nHere are some sample uses: (which maybe I should add to documentation)\n Forbid specific command: trust: (context) => context.command !== '\\includegraphics'\n Allow specific command: trust: (context) => context.command === '\\includegraphics'\n Allow specific protocol: trust: (context) => context.protocol === 'http'\n Forbid specific protocol: trust: (context) => context.protocol !== 'file'\nI agree that this could replace allowedProtocols, if I test for trust in \\url and \\href as well.  In that case, however, the default trust of false will forbid all \\url and \\href calls.  Is that what we want?  Maybe, actually.. @ylemkimon Agreed, safest does seem like a good default. This will break the existing release, though we can give a setting trust: (context) => ['\\\\url ', '\\\\href'].includes(context.command) && ['http', 'https', 'mailto', '_relative'].include s(context.protocol) (already almost an example in the documentation) that mimics the current trust behavior.\nThis change breaks a lot of tests, which I still need to fix.  Also we should either remove or deprecate allowedProtocols.\nI think we should try to settle something soon, because #1842 is a pretty critical bug, so once fixed, we're going to want to release -- but I also think we can't release with \\includegraphics (already merged) before we have a trust setting.. Agreed.  Added tests!  I confirmed that the new tests do not succeed with the old code.. @kevinbarabash I just checked and the screenshot tests pass locally.\nCould this have something to do with the move to the KaTeX organization?  I haven't changed anything on my side, but maybe I should have (and given that it's affecting me only...).  I tried to log into CircleCI to rerun the tests here, and CircleCI won't let me / gets confused (oddly, I get a 404 error), despite this working on your PR.... Did anyone do anything? Seems to be working now! Weird.\nI'll try merging with master and see if the tests pass again.. I don't expect that the mo tag is actually empty.  It should have an invisible character, U+2061 (&ApplyFunction;), inside it.  This is intentional (though arguably it should be after the <msub>...).\nHowever, I'm also unable to reproduce the error, using Firefox 63.0.3 on Windows.  Could it be caused by a plugin?  Can you try in a private window?. With that instruction, I can reproduce the error.  It seems to happen with \\log_5 x but not \\log x.\nAh, I see the issue now.  <msub> is supposed to have only two children, but in this example, it has 3.  This is caused by op's MathML builder returning a document fragment: https://github.com/KaTeX/KaTeX/blob/f71f469d4b3ca97654702a0807e736d176f4c4c5/src/functions/op.js#L251-L263\nI think we need to modify supsub's MathML builder to wrap a fragment in an mrow, in this line: https://github.com/KaTeX/KaTeX/blob/f71f469d4b3ca97654702a0807e736d176f4c4c5/src/functions/supsub.js#L204\nAlternatively, we need to bring the &ApplyFunction; outside of the subscript.... The following ought to do it:\njs\n'\\\\control': '\\text{*control #1*}'\n. In your JavaScript code, element is undefined. You need to write document.getElementById('element') instead.\nYou might also consider using the autorender extension (see the documentation), which makes this substantially easier. . Glad you got it working! . Thanks @ronkok for fixing this!. @ronkok Instead of parser.settings.strict !== false you should use parser.settings.useStrictBehavior().  See Settings.js.. @ronkok Done. Sorry for the confusion about whether useStrictBehavior() needs arguments (it does).  I do feel strongly about this, as strict can be a function or string, not just a boolean.\nUnfortunately, I had to add nonstrictSettings to a lot of tests to avoid them causing warnings.  It'd be nice if we could just generate the warning (when strict is warn) when it would actually make a difference (i.e. when binrelClass(...) !== 'mord') but I unfortunately didn't see an easy way to do that (because useStrictBehavior gets called in the handler, while binrelClass gets called in the htmlBuilder).. @ronkok I was mainly concerned about issuing warnings when strict === 'warn', consistent with the other strict/nonstrict behaviors listed on https://katex.org/docs/options.html\nYour point about strict being complicated is warranted, though perhaps a discussion for another issue. The argument at the time was \"most people should use true/\"error\", \"warn\", or false, and let's add a generic callback for anyone who wants to do something special\".  Indeed, I could imagine someone wanting to add nonstrict behavior for e.g. newlines, but otherwise be LaTeX compatible...\nI'm personally a little worried about adding nonstandard behavior for \\hphantom that is not reproduced by any other LaTeX engine.  (I just checked, and MathJax has the mord behavior just like LaTeX.)  Do we want to add another incompatibility between different LaTeX engines?  I'd rather add a generic binrel tool if we could...  But if we do add incompatibility, I think we should do it in the way that all other strict-based incompatibilities are done.. I'm personally a fan of this, and LaTeX compatibility in general, as it means you can take math from a webpage and put it directly in a LaTeX document.\nOne can always wrap in \\mathrel to fix... :-/. I noticed the same problem on Windows. @ylemkimon Was there a reason for that change? . @kevinbarabash I added a commit, https://github.com/KaTeX/KaTeX/pull/1811/commits/e8ba2f49fd2aaaff208a4c9f5402fe61b1034560, which should fix the problem (still works on Windows).  This should be what the old \"adding . to pathdid (as weimport 'katex'notimport './'`).. @ylemkimon I'm not super familiar with mocking modules. Do you mean that instead of actually calling KaTeX it has a lookup table of answers? What would be the advantages of that? I guess it would test the module without testing KaTeX rendering. Is there something you're trying to avoid?\nIn any case, maybe this could be separated into a different discussion/PR. Current master exposes everything via PATH, and doesn't let Windows developers (and there are two) run jest easily (yarn jest is a workaround). So this PR is definitely an improvement to the current state! . That is not valid LaTeX code. You probably want either\nlatex\nkey = if( a\\&\\& 1)\\{ return 1 \\}\nor\nlatex\n\\verb|key = if( a&& 1){ return 1 }|. Here's how we define \\limsup macro:\njs\n\"\\\\mathop{\\\\operatorname{lim\\\\,sup}}\\\\limits\"\nSo you could do the same with argmin (or arg\\,min) either by passing a string like above for a macro, or as a one-off (or \\def) in TeX like so:\nlatex\n\\mathop{\\operatorname{arg\\,min}}\\limits. I agree that it would be a useful macro. Is it defined in any existing LaTeX package(s)? We generally aim to reproduce LaTeX behavior, so that would be ideal. . I found a definition of \\argmin and \\argmax in the CTAN statmath package as\nlatex\n\\DeclareMathOperator{\\argmin}{arg\\,min}\n\\DeclareMathOperator{\\argmax}{arg\\,max}\nwhich I think matches your definition.. This could be a reasonable add-on. I'm personally not a huge fan, but I imagine people coming from MathJax might enjoy it.\nYou might be interested in KaTeX's copy-tex add-on which enables copy/pasting math and getting the LaTeX source code. . In the linked StackExchange, one of the answers points to \\accentset defined in the accents.sty package, which would enables\\accentset{\\approx}{d}.  I wonder if it would be feasible to add support for that in KaTeX?. Ah, I hadn't realized before that this is a bug.  (I thought LaTeX and KaTeX agreed on behavior.)  But it is: here's how\nlatex\n\\tilde{\\tilde d}} \\tilde{\\tilde A}}\nrenders in LaTeX (via quicklatex):\n\n. @tivewsalaeharad Could you give an example of the LaTeX expression you're trying to render?. @tivewsalaeharad Would manual line breaks suffice for your purposes? If so, you could use \\\\ in $$...$$.\nAs @ronkok points out, KaTeX does not do automatic line breaks within $$...$$, only within $...$, the same as LaTeX. You might be able to force low-quality automatic line breaking in $$...$$ with some CSS mangling, perhaps:\ncss\n.katex-display > .katex { white-space: normal }\n$\\displaystyle ...$ should be what you want.  I imagine the first two bugs you list apply equally well to $$...$$ as they shouldn't matter either way.\n1. What is \\Tiny? I've never heard of this sizing macro. \\tiny is the smallest LaTeX size.\n2. Sounds like you're running into a \\frac bug, perhaps #1775. As far as we understand, these are bugs in the web browser.\n. Did you try $\\displaystyle ...$ without the CSS hack? It should auto line break at relations like =. Here's your example which seems to be working fine:\n\n. It wraps on katex.org if you turn off displayStyle in the settings menu (click on the gear). This is the equivalent of using $ instead of $$. . @ronkok This looks like a nice change! I thought I'd check the example from #1822:\nlatex\n\\dfrac a b\n\\xrightarrow [2.\\, \\dfrac c d]\n             {1.\\, \\displaystyle\\frac c d}\n\\xrightarrow [4.\\, \\normalsize \\dfrac c d]\n             {3.\\,\\Large \\displaystyle\\frac c d}\n{ \\displaystyle \\frac e f }\nLaTeX renders this as:\n\nKaTeX currently renderS like this:\n\nYour PR fixes case 2:\n\nI'm guessing that the Case 4 mismatch is because LaTeX doesn't do anything with \\normalsize whereas KaTeX does.  Can you confirm that this is the intended behavior?. @perfaram Which LaTeX package defined these macros?. @mobigaurav Did you try the suggestions listed on Stack Overflow?  It would be helpful to copy/paste that Unicode character to see what character it is.  KaTeX does generator some nonbreaking spaces and some other Unicode characters, though it's difficult to imagine KaTeX causing your issue.\nKaTeX works fine on Android Chrome, so there's probably something specific to your setup.  It's difficult to debug those without more details.  For example, does inline math have the same problem, or just display math? Can you include a minimal example? Can you output the HTML that's getting generated?. @milosgajdos83 You might have better luck asking on a hugo forum. Presumably hugo, or the hugo-KaTeX plugin (if there is one), is doing something wrong here.  Your screenshot suggests that KaTeX is running (causing it to print a warning, not an error, so presumably it's mostly working) yet the text is not actually getting replaced.  It's pretty hard to tell why that's happening; it's unlikely to be a KaTeX issue.\nSearching around the hugo link you sent, perhaps http://nosubstance.me/post/a-great-toolset-for-static-blogging/ (linked from https://gohugo.io/content-management/formats/#issues-with-markdown) is a helpful starting point.. It does seem a shame that all this rendering is happening at page load. One of the cool things about KaTeX is that you can render at compile time. This might be in better fitting with hugo (it's a static page generator, right?) but would presumably require a parser/plugin of some sort. . Hmm, upon further study, I see two similar \u2019 characters in the root README.md which has been there for a long time:\nmd\n* **Print quality:** KaTeX\u2019s layout is based on Donald Knuth\u2019s TeX, the gold standard for math typesetting.\nWe should probably change those too, or change none at all and leave a mix of ' and \u2019.  Either way, I do not see how these would affect GitHub Pages.... Thanks for the clarification and fix!. We've always wondered whether we'd need a measurement cycle, but so far @ronkok has proved otherwise. I could see doing such a measurement in an extension, perhaps even a generic \"measurement\" extension that can callback other extensions. I cannot see doing it in base KaTeX because it's simply incompatible with the renderToString workflow (e.g. server side).\nKaTeX could compute an approximate horizontal geometry, as it does have the width of all the characters. Is there any chance that's accurate enough for arrows? I'm guessing @ronkok's thought about this, but could be worth experimenting. . I'm unfamiliar with hyperscript. Is it a compatible intermediate layer supported by all those systems? Should we be switching to it instead of our own internal DOM representation, as returned by katex.__renderToDomTree?  (And does katex.__renderToDomTree suffice for your purposes? I believe it was added for roughly this reason.). @zipang Would this make sense as a module in contrib? (Or as a separate project altogether?) Then you can make a new test page, no need to modify the existing one. . @ronkok Thanks, I forgot! Do you want to review the documentation table change before I merge?. @ronkok I also didn't see the update until remembering to go the \"master\" version: https://deploy-preview-1839--katex.netlify.com/docs/next/supported.html. This is related to alternate output mechanisms, in particular, Canvas (#251) and SVG (#375) which require explicit layout (whereas current rendering definitely relies on an HTML rendering engine for layout). We haven't implemented any such alternative output mechanisms; they are possible in principle, but it's a rather large effort. \nIf you wanted to avoid a V8 engine too, this would involve porting a ton of JavaScript code into Android Java -- I'm not aware of such an effort, and this is less likely to happen, as it would fork the code.. The failing screenshot test diff shows a possible problem/question with this PR:\n\nThe test includes the line a+b+c+{d+\\\\e}+f+g where the \\\\ isn't supposed to do anything because it's not top-level, but internally there's still an <span class=\"mspace newline\"> so the new spacing algorithm assumes a new line starts there...\nI'm unable to find a good LaTeX reference for correct behavior.  $$a+b+c+{d+\\\\e}+f+g$$ just ignores the \\\\ (i.e. the old behavior of a space between + and e), but it ignores top-level \\\\ too.  \\begin{align*} a+b+c+{d+\\\\e}+f+g \\end{align*} throws an error.  \\begin{eqnarray*} a+b+c+{d+\\\\e}+f+g \\end{eqnarray*} actually breaks the line between + and e!  Is that the behavior we should be aiming for...?  (I'm not sure how we could actually do it, and even eqnarray* throws an error when \\\\ is in a \\frac.)\nPerhaps best would be to detect \\\\ in non-topmost environments (where it wouldn't do anything) and throw a (different) error/warning and not generate <span class=\"mspace newline\"> in this case (or at least prevent the newline class).  I'm not quite sure how to detect \"topmost\" (in the \\newline function) though... essentially we want to be outside all other \"functions\" (things that render, as opposed to macros).  Alternatively, we could leave \\newline alone and detect it in the new spacing algorithm in this PR, but again I don't know how to detect \"topmost\" there.. @joergklein What environment are you using KaTeX in?  The $` ... `$ notation looks like Gitlab.  ~~Perhaps you should be asking your question in a Gitlab forum.~~\n~~Does any math expression work for you? I'm guessing not, and that it's something about your configuration.~~\n\\neq and \\not= are definitely supported by KaTeX; see the demo page. They are also documented in the list of supported features.. @joelburget What web browser are you using? Safari perhaps?\nHere's what I see on Chrome on Windows:\n\n. What version of Chrome? I'm using 71.0.3578.98.. OK, I updated to Chrome 72, and that seems to be the issue.  I can now reproduce the problem.  Chrome must have changed how it works with accents. \u2639\ufe0f . ~~I believe there's a problem with the \\not character in the font that we need to fix.  I find this view (from opentype.js.org) confusing, but in particular the advanceWidth of 1289 seems way too big:~~ (sorry, this was the wrong glyph)\n\n@kevinbarabash Do you remember any outstanding issues here, e.g., plans to regularize this character? I think we already switched away from combining characters (https://github.com/KaTeX/katex-fonts/issues/3 lists some other accents where this still needs to happen).. Actually, I think the glyph is fine -- it has no negative leading space.  My current theory is that, because we use U+0338 for the glyph, which is a combining character (which we did because there is no non-combining LONG SOLIDUS Unicode slot), Chrome forces it to the left.  Why Chrome 72 changed this, I'm not sure (nor have I found documentation).  I'll have to try mapping it to a different slot, and see if that fixes the problem.... https://github.com/KaTeX/katex-fonts/pull/58 is (most of) a fix to this bug.. @kevinbarabash Could you review the fix in https://github.com/KaTeX/katex-fonts/pull/58?. @eneso On which platform? Chrome 71 worked fine for me on Windows.. For those in a rush to deploy this fix (as I was) and using KaTeX via npm, you can use\nsh\nnpm install https://github.com/edemaine/KaTeX/tarball/fixnot-dist\nto get a release with this bug fixed -- but also with potentially dangerous unprotected \\includegraphics support, so beware!. That's unfortunate... I unfortunately do not have easy access to Safari, so it would be nice to get confirmation, and some analysis as to what's going on. How does the \\not accent differ from other accent characters?. @ro70 Thanks for the report! That is behavior I wasn't familiar with: \\right ends the group that has the defined color, but the closing character is the last thing with the color.  I'll take a look at this...\nA workaround for now would be to use \\big and friends instead of \\left/\\right, as in:\nlatex\n\\ln\\big(x\\textcolor{red}{\\big)}y\nwhich renders as\n\n. Failing screenshot tests show that there's currently environment leakage from one cell of an array to the next, unlike in LaTeX.  I'll need to fix this before this can be reviewed/merged.. Fixed! (Turned out to be really easy.) So this PR also fixes an issue with \\defs incorrectly spanning multiple cells of an array.. OK, group isolation wasn't quite as easy as I thought, because of the messyness that is nextToken.  I fixed most cases, but the very first character after \\begin{matrix} is not in a group like it should be. Fixing that will be painful... and this PR is definitely an improvement (currently there is no isolation!), so probably worth merging for now.. In LaTeX, this symbol seems to be \\lightning provided by stmaryrd, MnSymbol, fdsymbol, or wasysym packages (all slightly different).  To properly add it to KaTeX, we would need to add it to the font.  I don't have a great sense of how easy this is.\nYou can turn off the warning by adjusting the strict setting.. The warning means that the symbol is not in the KaTeX font, so it is falling back to your document font (I believe), which can look inconsistent. KaTeX also doesn't know the size of the character, which can lead to incorrect vertical spacing in particular. If neither of these are issues, you can ignore the warnings, or remove them via the strict setting.. Cool idea! Toward this extension/option/set of recommendations, it would be nice to be able to configure the frac line thickness, and frac line gap, by a \\def or \\setlength or other parameter.  I also wonder whether there's a generally agreed upon/findable font other than Computer Modern (ideally also available in TeX, but that already includes most OpenType fonts) that is more web friendly and has all/most of the math symbols -- this could address \\equiv for example.. @spontaliku-softaria That is how LaTeX works, so it is considered correct (if somewhat counterintuitive) behavior by KaTeX.  Here's an example rendered with LaTeX:\nlatex\n\\begin{array}{l}\n\\mathop{1}\\mathclap|\\left(\\right)\\\\\n\\mathop{1}\\left(\\right)\n\\end{array}\n\nAnd the same example rendered with KaTeX:\n\nTeX is pretty complicated in terms of spacing, but if you don't want to affect the op-style spacing, you probably mean something like this:\nlatex\n\\mathop{1\\mathclap|}\\left(\\right). I have no experience with VueJS, but did you try either of these modules?\n https://github.com/lucpotage/vue-katex\n https://github.com/dangvanthanh/vue-a11y-katex. Indeed, I doubt you'd want to use auto-render with either of these packages (or VueJS in general). But you shouldn't need auto-render; that's just one way to trigger calling KaTeX on all math expressions, and these packages should fully replace that with a different Vue-compatible way.. Some screenshots changed, but in an invisible way. Not sure why tests not involving \\not or / changed (or even why those tests changed), but given no discernible difference, I assume all is fine.. Of note: https://deploy-preview-1852--katex.netlify.com/docs/next/supported.html displays the symbol correctly now.\nUnfortunately, we do break old documentation, because we're not versioning the fonts on Netlify. \n E.g. https://deploy-preview-1852--katex.netlify.com/docs/supported.html fails.. ~~@ylemkimon Any idea why the link to support_table.md isn't automatically converted into support_table.html? It seems to work for all other links.  I tried removing the ./ but that didn't fix it.~~ Turns out the problem was indeed the ./, I was just testing the wrong version.\n[update] When running yarn build in website, I do get warnings about this:\n[WARN] unresolved links in file 'version-0.10.0/support_table.md' > [ './supported.md' ]\n[WARN] unresolved links in file 'version-0.10.0/supported.md' > [ './support_table.md' ]. Many thanks @ylemkimon! . @kevinbarabash Exactly. I think it would be dangerous to release \\includegraphics until we have a trust (or similar, e.g. #1794) setting that lets people turn it off for untrusted inputs. Not as dangerous as \\cssId or \\class, but I think it's still a security issue.  It'd be great to get more feedback/review on #1794 (or another approach if that's preferred) so that releases become easier. \ud83d\ude04 . Agreed. The last time I tried upgrading Selenium, all/most of the screenshot tests changed.  Probably in small ways, and probably still worth doing, but it's going to be an annoyance.. We could try to help debug if you could send a (link to) a complete working/broken example.\nIn your examples, is it intentional that all the fonts are roman? I would have expected italic. This suggests that the fonts aren't loading. Do you see any load errors in the console? . I think this would make a neat exercise in how far we can go with the macro system. The example you give looks fairly easy except for the inability for custom environments (#977) and I don't know how those vertical lines get implemented (one way involves counters, which we also don't support yet, though that could be easily dealt with using JavaScript functions).\nA challenge with algorithm environments in particular is that there are so many different and incompatible choices in LaTeX. https://en.wikibooks.org/wiki/LaTeX/Algorithms lists four, and I've often used clrscode/clrscode3e.  This suggests that separate extensions, each mirroring a specific LaTeX package, might be best.. Nice workaround @ylemkimon.\nI think including the mhchem extension in the online demo is a good idea -- show off all our features -- and should be easy to do (just another <script> tag, as above).\nIn the same spirit, we could also consider including the copy-tex extension -- though that's more useful when there's a mix of inline math and formulas.. For one, it looks like the fonts aren't loading on your site. Did you check the JavaScript console for failure-to-load messages? Also, which browser?\nAlso, you should really post a full example of your input file, and otherwise describe your environment (pure HTML or something else?).. Perfect, thanks!  That's great that value can be an array, and kern is the other feature I was looking for.  I'll finish the implementation now.. It's worse than that benchmark suggests (which is already 10x on a size-4 array): shift/unshift's cost grow linearly with array size, so things will get worse and worse as if your stack grows at all, while push/pop take constant time (amortized).  So I'd avoid that.  Indexing instead of removal is a reasonable way to go, though.  (In general, it sounds like you're looking for a deque data structure.). I think ## is supposed to expand to # in TeX (a way of quoting # that isn't part of an argument like #1).  Presumably this is to ignore those for detecting macro arguments.. I confirmed that \\0 didn't work in LaTeX, with error message Text line contains an invalid character.  But that's probably just TeX being unhappy with the character in general.  I think it's better to allow \\0, but I didn't know how.  Thanks for the tip!. Much better.. Detecting unmatched delimiters was my goal, but that approach works too.  Changed.. It seems that the symbol is the wrong size, so probably not in the font...  I thought that the usual \"no metrics\" warning would trigger in this case, but it seems not to, because I'm passing an entire string instead of individual characters.  I changed the main code to look up characters one at a time, then try to combine them, as in text.. No inputs would trigger this.  I was treating it as an assertion before the next line which strips those characters.  But I can also remove it if you prefer.  I'll add an error test; thanks for pointing me to that.. Both good points.  I was imagining a user might want to style \\verbs in some special way (like Github here does with backquotes), but it's a pretty hypothetical situation, and maybe not appropriate for LaTeX formatting, so probably not worth keeping this class.  I'll remove it.. I don't have strong feelings either way.  Maybe I'm used to the warnings for unsupported symbols because of my experience with #618. \ud83d\ude04 I also feel like it's not crazy to pass through text of \\verb mostly verbatim, but warning when that might do bad things. (If you like, that warning could be modified to warn of possible incompatibilities with future versions, i.e., don't rely on this behavior.)  Anyway, let me know what you think is best and we can work on a tweak either way.  (I'm afraid I don't actually know how to do the surrogate pair detection, or to fail when characters are not in the font, but I'm guessing that is done elsewhere in the code that I can mimic/re-use.). Good ideas; done.. I meant to ask you about this.  Yes, it seems so:\nGreek capital letters are in both fonts, Main-Italic and Math-Italic.  So which should we use? The master code claims to use Main-Italic for Greek capital letters.  But if you try the demo with \\mathit{\\Omega\\imath}, and inspect, you'll see that the \\Omega gets class mathit while \\imath gets mainit:\nhtml\n<span class=\"mord mathit\" style=\"margin-right: 0.05017em;\">\u03a9</span>\n<span class=\"mord mainit\">\u0131</span>\nIn fact, the master code ends up calling mathit() with a single-unicode-character string (\u03a9), while greekCapitals is defined in terms of the macro name (\"\\Omega\").  When my code fixed this, I ended up changing Greek capital letters to use Main-Italic font, which caused some tests to fail.  I confirmed with texcmp that Math-Italic seems slightly closer, so kept it there.\nLet me know if you'd like this code changed at all.... Fixed, thanks!. Should I remove the list of greekCapitals as well?  It's currently commented out (to prevent lint from complaining).. Done.. Good point, and nice test!  Changed.. The examples you describe both involve a web browser, a.k.a. a client.  The point is that, if you run KaTeX from Node, it won't \"support\" mask, and so won't be omitted.  You simply can't detect support for anything in a server-only environment.  Can't you emit the mask in all cases, and it will just work when it's supported?. If there isn't a good one-size-fits-all solution, it seems like the best thing to do would be to add an option that lets you decide between \"work on Edge\" vs. \"work fast\", when you can't autodetect it.\nI'm a little confused why you need an XMLHttpRequest, though.  Is it not worth just inlining the SVG into the JavaScript code (const mySVG = \"...\") and using that as needed?  I remember we discussed this before, but why use external files at all, when you can embed it all in the JavaScript source?. As someone who has been bitten by this in the past (called function modifying callee's object), I agree.. My two cents: I'm a fan of limiting to 80 columns.  All my terminal windows are that wide, thanks to good old punch cards.... The idea is that the height increases if the box is moved up, and the depth increases if the box is moved down.  At least, my mental model is that height is the extent above the baseline (y-max) while depth is the extent below the baseline (y-min) -- please correct me if I'm wrong.  However, this code doesn't seem to be working, and I'm not really sure how height and depth end up getting used (or not).. Good point -- indeed, it currently does not, but would be easy to tweak to.  (A bigger issue is that calculateSize only supports mu and em.). Oops, thanks.. This loop combines multiple adjacent <mtext> tags into a single <mtext> tag.  I'll add a comment to this effect.. Sorry, yeah -- I can only run the screenshotter docker on a different machine, and pushing was the easiest way.  I'm rebasing now to merge in the images.. Added a couple of unit tests, including on the MathML generation side, as well as a screenshot test (which also tests spacing).. This line will add keys to the passed-in options object.  It needs to go after the next line that makes the copy.. Ah, I see now -- the copy is done by the caller.  Maybe rename renderOptions to optionsCopy and add a comment to note that it's modified within the function, in case this API is ever exposed.. I don't see why these two values within the options object need to be passed in separately.  Why not just pass in renderOptionsCopy?. Same here: we can just pass in the options argument (which would probably be better named options or optionsCopy?) instead of explicitly calling out delimeters and ignoredTags.. Also, perhaps there should be an if (data[i].display !== null) enclosing this code?  That way, an unspecified display value lets you use the caller's value.  Ah, but then the options copying would have to be done here, so maybe not worth it.... Maybe should mention, though, that displayMode isn't meaningful in this case, because it's value instead gets defined by delimiters.. Perhaps it would be more intuitive to give i a default value of 0, via let j = i || 0?  (as in, e.g., String.prototype.includes). if (spaces && ...) else if (spaces) ... seems a little weird / hard to understand.\nHow about if (spaces) { if (i < groups.length) ... else ... }?. Could use default 0 value of i here.. Really? Why?. I'm sorry that you felt your time was disrespected -- not my intent.  We certainly appreciate the time you've spent in fixing this bug (and in implementing the original feature).  I'll move this agreed-to-be stylistic issue to a separate PR.. Added.. Added.  Although I found this discussion where @xymostech suggests that maybe we should move away from mathord vs. textord, and rather just specify which font to use.  It seems LaTeX has a notion of \"mathord\" but no notion of \"textord\" (at least I've never seen one in debugging output)?. Here's the discussion we had about this topic before.  I agree that your arrow looks \"nicest\", in that I'd want to use it as a long form of \\vec.  As linked in the discussion, lots of people want this.  I guess what would be nice if there was a way to reproduce your arrow (approximately) with LaTeX.  Is there some \\usepackage that would do it?  \\usepackage[a]{esvect} is probably moderately close, though I think the aspect ratio of the arrow is different.  It's weird that \\overrightarrow doesn't use this existing glyph used by \\vec...  I guess we could define our own katex.sty package that implemented it.... It'd also be good to add comments to the code that mention those definitions from ams and source2e, so that we can trace 'em back.  Thanks!!. I assume this is unrelated to the rest of the PR, but just a general bug fix?  I can confirm that the old version doesn't work on LaTeX.. Are you suggesting that the Makefile automatically tweak the README to include the latest version number?  This seems like it'd be cool, though I don't quite know how it'd work...\nPerhaps a simpler solution would be to write <script src=\".../KaTeX/contrib/mathtex-script-type.min.js\"></script> and let users fill in the right path, either local to their webserver (as many are probably using it) or on CDN?  We could also give a template for CDN including, but with ... or something else in place of the actual version number.. @wilbowma Could you take a pass at this?. I just added documentation here, because it took me a long time to figure out why the existing code was adding empty groups.  I checked and this is indeed how it's implemented in amsmath, specifically in \\start@aligned. I'll add a note this effect.. Yes, I checked in LaTeX, and $\\begin{aligned} \\frac{x}{y} \\end{aligned}$ renders a display fraction.. Agreed, that is confusing.  Renamed to addJot, which seems clear enough (as \\jot is an interline spacing).. Ah, you're right -- sorry!  I'm a little confused by the logic now, though, after the refactor.  autoRenderOptions gets up to two of the options in options, then gets remerged back into options to make optionsCopy.  So probably this step isn't necessary, and we don't really need AutoRenderSettings anymore?  Unless I'm missing something.... Nice comment!. Nice!. This README link is broken (two ##s, and I'm not sure you can really link to a .md file like this). I also think it's be more appropriate to link to https://github.com/Khan/KaTeX/#rendering-options. The trouble is that once we merge your pull request, the README immediately becomes publicly visible.  So we should probably use ... for now, and update after a release (or change them all to ...).. Oops, indeed, update-sri.js already updates the version number.  It looks like it will replace any URL with any version number, including ..., so we could still use that until a release happens.  Then the release will fix it to a working version number.. Yes.  @gagern and I had discussed this at some point, and it felt like all the implicit group parsing could be moved to functions.js.  Worth considering in the future.... Sounds good to me!. In hindsight, I think you're right. The hashtag part needs to change, but fine to go with absolute or relative.. @gagern is probably the most experienced with the screenshotter, so he might want to look at this part of the PR (or separate the PR into two).. Yeah, I added that in the recent color PR.  Hope it's not too annoying to implement.. FWIW, I never knew that Jasmine offered a web view (though that's neat to learn); I've just used the command-line itnerface.  Certainly would be nice to preserve (maybe there's a plugin?), but also not terrible to lose it IMO.. How will this \\s* interact with newlines?  I suppose KaTeX doesn't support the double newline -> \\par conversion, but if it did, I suppose this regex might cause trouble.... Agreed with @kohler on consumeSpaces -- that's only for when spaces have already been parsed by the tokenizer.. Actually, I think the behavior you've implemented with \\s* is more consistent with the rest of KaTeX, which treats \\n and spaces identically.  (just did some tests on https://khan.github.io/KaTeX/ )  I think it would be confusing for \\kern 1em\\n... to fail.. I would actually argue for \\s* in both places.  The following renders like x\\kern 1em y in LaTeX.\nlatex\nx\\kern\n1em\ny. Ah, nice!  (And that's where double-newline handling would go.). Could we replace this with something like jest-html-reporter (as a dev dependency)?  Or do we not care enough about this functionality?. They're from https://en.wikibooks.org/wiki/LaTeX/Lengths .  What do you mean by \"originals\"?. As much as I like capital tags personally, I think \"span\" would be more consistent with other KaTeX code (e.g. src/domTree.js).. Oops, missed one!  Thanks.. Updated.. px is built into pdflatex.  Maybe I'm biased because that's the only TeX format I use, but that seems pretty standard/default to me.  I'd be OK with omitting px (I frankly didn't realize it was valid in pdflatex until working on this PR), if we think it's too confusing -- but I don't think it's a good idea for some TeX units to map to CSS units when some TeX units to map to TeX units (in some sense).. I wondered if this documentation needed updating -- thanks for the comments!  I also wasn't aware of the 1.21x scaling.  I assume there's a reason for that, like KaTeX fonts integrate better with typical web fonts at that scale?\nAnyway, I took a stab at rewriting, and justifying why this makes sense.  Namely, \"The end result is that any rendered KaTeX should be a scaled version of what LaTeX would do with a 10pt base font (e.g., \\documentclass{article}), where the scale depends on the CSS font-size.\"  This is the only definition that will satisfy this property.  Personally, I think it's what I'd want -- I want to be able to copy/paste some KaTeX code into LaTeX (or vice versa), even code that uses absolute units, and have everything look relatively the same, just up to a global scale factor.\nTo me, mapping KaTeX pt (say) to CSS pt would not make sense, precisely because an author wouldn't have enough context when writing the LaTeX to know how that should be scaled to \"look good\".  For example, maybe you make an equation look good, but then globally change the site's font-size.  Now your formulas will look relatively bad.\nOn the other hand, I'd be fine with later adding a unit like css pt that maps to CSS pt.  Except that, as you say, this would make height computation difficult if not impossible to do on the server side.. Love this new approach!  Avoids repetition of the Unicode symbol, and makes the decision of \"include this unicode character\" clear.  I think if we ever want a unicode symbol to point to one not matching the font, then we can manually define that symbol.. I was surprised to see the mo in an mrow.  Otherwise this markup matches the recommended markup described in this Mozilla post.  Is it worth checking for a size-1 mrow element and removing it?  (I think we do this elsewhere.). See below. (though maybe this is for another PR...). Maybe I'm late to the party here, but is it worth calling this file README.txt?\n(I'm a little confused what the bower_components directory is doing here...). Maybe it should be called LICENSE.txt?  I see, this isn't related to this PR at all, sorry!. Nice!  These new Jest snapshots sure make it easy to review the quality of the MathML.. In fact, I think this line edit should be reverted.  It's probably good to include the root (ES6) katex.js in the NPM package (why not? then people can choose). dist is already fully included 3 lines below.  It's the main key, 6 lines above, that seems to need to change.. amsmath defines these \"null macros\" for other macros to indicate the behavior of \\dots preceding them.  Indeed, I should have added use of these macros to \\iff, \\implies, and \\impliedby.  See new commit.. Good to have at least one negative reaction -- I was curious what others would think.  I see three alternatives:\n\nAdd a Lexer option for whether to include @ as a letter.  Then we could actually support \\makeatletter and \\makeatother (presumably this would need to be carried in the Settings object...).\nHave the cdots macro return manually parsed Tokens instead of strings.  Then we don't need to touch the Lexer.\nRename \\@cdots to something else like \\cdotsINTERNAL or \\latexcdots.\n\nThoughts/preferences?. Incidentally, the regex change won't affect @{...} support in tabular (the only use I know of @ as an active char), nor will it affect the most typical usage of \\@, namely, \\@. (not that KaTeX currently supports \\@).  What it would break is if you used \\@ immediately followed by a letter, which ... I can't imagine doing.  So the other option is to leave this change as is for now.. \"This file\" is no longer correct.  It's now functions.js.\nIncidentally, is there a particular reason to split functions.js into functions.js and defineFunction.js?  import should solve the awkward ordering issue automatically.  But maybe you prefer this conceptually.. I feel like this argument list is starting to get unwieldly.  It's particularly hard to read when looking at the defineFunction instances below (which argument am I on?).  I also fear that this precludes other types of building, like SVG or Canvas.  Maybe it would be better to have a single object argument with all the keys currently in props, plus names, handler, type, htmlBuilder, mathmlBuilder?  Then we could easily add other builders too, but not necessarily all at once.\nAn alternative would be to use classes somehow, but I'm still not super familiar with ECMA classes.. If we change to a single object argument, perhaps this rewriting of data could be removed?  Or moved to where we manipulate functions, if we need to do the default setting.  It feels a bit wasteful... though not a big deal.. With the single-object view, these keys could eventually just be checked in buildHTML/buildMathML.  But maybe just do this for now.... Unpacking the argument to then repack it still feels a little wasteful/verbose here.  Maybe the point is to clone and then set some defaults?  (And not totally sure the cloning is necessary...)  Alternatively, I'd be tempted to add the behavior like names = [names] to the old-style defineFunction helper, and define the type to require names: array<string>.  (Also happy to leave this to a separate PR if you'd prefer.). I'm not a huge fan of naming here: if we want to switch to the new style, we need to call _defineFunction?  Or is the point that any new stuff should go into its own .js file, not this one, and directly import defineFunction.js?  Ah yes, I see that below.  Perhaps we should add a comment to the effect of \"Don't add new functions here -- follow the style in the functions directory\".. it's -> its\nCan this same approach be used for #802 and #735?. Indeed. (And thanks for teaching me ES interpolation strings in the first place!) You can tell I was copy/pasting from above. \ud83d\ude04 . This ID could maybe use a tweak -- either an { or maybe a simplification to avoid fancy Unicode characters.... I was surprised to see &quot; here.  \" should be safe here, no?. For fun, I added such a test in 56d8900583406e0dd309de784cd8d39610e1057e. Nice rewrite.  Implemented.. Revised accordingly.. Changed.. I agree, unfortunately on both counts.  If I didn't have to consumeSpaces, I could use future() and then popToken after the fully expanded case.  Maybe there's another place to put the consumeSpaces... but at least this works.. Technically, it could also return an Array that's a reverse-ordered list of tokens.  This was functionality from before that I'm preserving, though I'm not sure we'd want to use it exactly that way.  (In particular, the reverse-order aspect is weird.)  But it is a nice way for a macro to be able to force strange parsing.. Replaced with a TODO.  I'm not sure this is important, as TeX doesn't do any such caching (as far as I'm aware), but could be done in the future.. That comment was out-of-date.  Updated.. Added.. Functions (as defined by defineFunction) return a ParseNode or an object that gets converted into a ParseNode by the parser.  It's not possible for a function to return null that would just disappear in the final parse tree.  Hence it would be impossible to implement a \\relax that expands to nothing (which is different to how {} expands).. Exactly.  Just assigning it a variable so that it gets passed down into the subdirectory makes, like the other variables.. Actually, I meant that the HTML content of the copy/paste buffer remains unchanged.  Will revise.. The whole thing is already wrapped in an IIFE because it gets babelified into build/contrib/copy-tex*.js.  I was polluting the namespace in case someone wanted to build their own copy handler using this function.  In hindsight, that's not a very nice way to do it.\nInstead I've split the function into its own module, katex2tex.js, which is the re-usable part.  (This is similar to how auto-render does it.)  Babelify merges these two files into one.  No more namespace pollution.\nYou still can directly change the delimiters only by manually editing the build.  (This is necessary if we don't want to expose any pollution.)  But now you could copy/paste the rather short copy-tex.js into your own build environment (and require('katex/contrib/copy-tex/katex2tex.js')).. Oops, indeed!  Clearly still a flow noob.... Long-term, I vaguely hope we can transition functions over to macros, as that's what TeX really does.  So maybe not too critical... though certainly could be done by tweaking group parsing.. I think so? I believe #632 plans to (eventually) add this to master. . I guess if we would ever want to support \\width, \\wd, etc.? (though only approximately)  There are zeros in there now, I don't see why not populate them.  I'm also not sure about advancedtabularsupport (e.g.\\multicolumn) -- it might have use there.. Do we want to remove these (including make lint)?  I know I'll probably type make serve a bunch before retraining.  Might it be better to alias them, e.g.\nserve:\n    npm start. I haven't thought about this deeply, but is there a reason to just pass in ] and not just breakOnTokenText in general?  I think the latter might be useful for more general macro support in the future... Maybe worth reviewing what other values this currently takes on in the code, if any.. Would it make sense to define a const hugeWidth = '400em' somewhere and use that variable repeatedly, instead of repeating a constant like this?  (And one comment could explain why this choice is sensible.)  Sorry if this suggestion doesn't make sense, coming from out of context.. You suggested the reverse in #574. \ud83d\ude04 FWIW, TeX implements spaces as skips instead of characters, but I agree it'd be more symmetric (and simpler) to use a space character. I'm not sure where to collect together font issues -- perhaps on new font repo?   Added https://github.com/KaTeX/katex-fonts/issues/1. Changed.. \\verb|hello\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0world| will not break in LaTeX, and furthermore renders as multiple spaces, whereas the usual behavior for invisible spaces is that they combine into one. (Even within backtick mode in GFM, I had to use nonbreaking spaces to get them to not merge.)  Added a comment to this effect.\nI'm less clear on why I write it as \\xA0 here and (formerly)  in buildHTML.js.  Probably the former is clearer, so I've changed the latter.  Not sure if we have a preferred style on this matter.. This is actually more of an assertion: the regex should guarantee that that error is never thrown.   The actual error that will get thrown is \\\\verb ended by end of line instead of matching delimiter which is more descriptive.  (It doesn't mention the delimiter character, but that is not trivial to add... Let me know if I should work on it.). Added a comment.. I'm confused -- isn't that what this is doing?  Or do you mean confirming that the error is actually of type ParseError?  We could probably rewrite toFailWithParseError to do this.. Oh, I see.  As described above, that error can never be thrown.. Rewrote the error message.. Why remove \\DOTSB? Maybe I'm missing some context -- if this is in the definition in AMS LaTeX, it makes sense to keep it here, so preceding \\dots behave correctly.. Hmm, I checked the source in amsopn.sty, and uses of \\DOTSB in amsmath.sty, and checked in pdflatex... and I now agree that \\DOTSB should be removed. \ud83d\ude04 . Parsing always ends on }, so I'm not sure specifying \"}\" is necessary... hence the null.  (It's been a while since I've looked at this code, so I forget the exact details...). FWIW, this is a general rendering/antialiasing problem with most SVG renderers I've encountered (including Chrome): abutting features generally leave tiny gaps.  So definitely approve of the slight overlap (assuming 0.1% is never too big?).. Yes.  This matches LaTeX behavior, based on testing.  (\\@ifnextchar[ must get a space instead of a [.)  I'll add an error test for the no-space case.. I wanted to make sure that \\text{\\KaTeX x} does not render a space.  Ideally I'd say that \\text{\\KaTeX x} renders the same as \\text{{\\KaTeX}x} but that generates another group... perhaps I should tweak the test to actually look for features in the parse tree.  (Control words like \\KaTeX definitely work in text mode.)  Ah, I can just test for \\text{\\KaTeX } vs. \\text{\\KaTeX}.. Yes, I wanted a second opinion on this.  As I wrote above: \"we never use MacroExpander.get with a true argument, which could simplify the code of both get and unget.\"  We no longer need any of the space saving/restoring mechanics, so I'll get rid of that.\n\"It also means that switchMode no longer does anything useful.\" (in the parser)  This one I'm less sure of.  Maybe switchMode would be useful in the future, e.g. if we can ever tweak catcodes in other ways? (e.g. verbatim or url modes?). Opened #924. Also added some more comments in the code about this.. I think this should be &ApplyFunction;, right? makeText above must be escaping the ampersand in a way we don't want.... Is there a reference to show that &ApplyFunction; is equivalent to Unicode Character 'FUNCTION APPLICATION' (U+2061) in MathML?  It seems to be, but I couldn't find one.... It used to be that get got passed true or false according to whether math mode was on, i.e., it ate spaces if it was in math mode.  But that's no longer the case (having moved that into parser, where it belongs according to TeX behavior), so now get doesn't depend on whether math mode is on, so there's no effect to ungetting and regetting.. I think it's still a nice interface to keep, in case we want to use it in macros.js. Though still happy to rename it... . Since #912, I don't think the space behavior will be different, but \"text\" does feel slightly more correct.  I'm guessing, in LaTeX, the argument is treated like a verbatim. For example, are two spaces preserved as two spaces or merged into one?  (In KaTeX, they will currently be merged.)  Does \\foo bar have a space (I guess so) or remove the space (as it will probably currently behave).  This might require a new argument type of \"url\".... Agreed. Also, wasn't there a KA plugin of some relevance? . Can you merge these two tests (e.g. side-by-side)? I think we try to keep down the number of snapshot images, and these tests render small enough (and they're related) that it's easy to combine them.. Given that these lines (44-54) are repeated (25-35), perhaps it makes sense to factor them out as a shared function defined just within and for this module?  Not strictly necessary, but could make for cleaner code.. Maybe worth a comment that this is <mo>&ApplyFunction;</mo> as above?. This feels a little weird, to have the constant in the code there.  It's a little inefficient if this gets run a lot (though perhaps slightly faster as is if it never gets used...).  Thoughts on moving it to a const outside the function?. Same comment as above.. Is there a reason that \u222b gets embedded in Unicode and the others are \\u escape sequences?  Something about the character being available in a default font?. I feel like it'd be more consistent to put them all as \\u escape sequences, but I don't feel strongly about it. . Good idea!  Revised.. \\@firstoftwo{#1} is the second (of three) arguments to \\@ifnextchar.  If it wasn't wrapped in braces, \\@firstoftwo would be the second argument and {#1} would be the third argument.  (Same as the original TeX source.). Yes, this is how LaTeX does it.  \\hspace* is parsed by TeX as two tokens, a control word \\hspace and a character *, and the former detects the latter and adapts its behavior.  Of course, LaTeX also does this (at least internally) to detect optional arguments, and KaTeX deals with optional arguments to functions in a different way, so this is open to debate...  But I don't think LaTeX offers another way to detect asterisks, while it does offer another way to parse optional arguments.\nAnyway, defineMacro(\"\\\\hspace*\", \"\\\\hspace\") would be difficult to get working, as it leads to ambiguous parsing.  When KaTeX sees an \\hspace token, it doesn't know whether * is an argument to \\hspace or it's just the beginning of \\hspace*.\nRegarding your second question:\nlatex\ndefineMacro(\"\\\\hspace\", \"\\\\@ifstar{\\\\kern{#1}\\\\kern{#1}}{\\\\kern{#1}}\");\nshould behave as you describe.  (Needed some extra braces, I think.). Good point -- switched to kern.js.. Yeah, definitely for another time.  Supporting fil/fill/filll units in plus at least should be possible using Flexbox.  That'd be pretty useful -- but for another issue.  I've opened #990 to track.. Nice objective to even out those top spaces.  By manual search, I found K\\\\kern-.16em to balance it out pretty evenly:\n\nhttp://localhost:7936/?text=%5Cbegin%7Barray%7D%7Br%7D%5Ckatex%5C%5C%5CLaTeX%5C%5C%5CKaTeX%5Cend%7Barray%7D\nI feel like the this puts the bottom of the A a little far from the K, though.  I tried tweaking the A slightly more to the left, with K\\\\kern-1.17em:\n\nPreference?  This may be nit-picky, but if we're redesigning the logo, we might as well try to get it right.  I do find these far more readable than the old logo, which is nice (but also more readable than the LaTeX logo).. The A should be in the equivalent of \\scriptsize, which has a scale of 70%.  The height of a T is 0.68333em (according to fontMetricsData.js), so the raisebox should be 0.3 * 0.68333 = 0.204999em.  I tried this, and it puts the A slightly higher than what I did, but it matches the LaTeX rendering better!  Good thinking.  I've pushed code that computes this automatically from the font data instead of hard-coding constants (other than 0.3 which seems safe enough).\nCompare this screenshot with others on this page:\n\nAnd here's LaTeX's rendering:\n\n. Just to be clear, we're talking about the top logo in the top image vs. the top logo in the bottom image, right?  (Bottom logo is the same in both images, the old KaTeX logo.). Agreed; this should ideally not be hard coded. . combiningDiacriticalMarkString is already included in Lexer's tokenRegex both after a single codepoint and after a surrogate pair.. Ah, I should have checked the browser compatibility matrix for String.normalize.  The only problem with a polyfill is that it increases the katex.min.js build by 60%, from 226,836 bytes to 363,641 bytes (as any polyfill requires a huge table of Unicode symbols).\nSo I think this raises a serious question of whether we should:\n\nInclude the polyfill.\nNot include the polyfill, and support Unicode in all supported browsers except IE.\nRewrite the PR to avoid String.normalize, at least in the built form.  We actually only want symbols that expand to accents within our supported set, so the symbol table we could generate at build time could be smaller than unorm's.\nDrop this PR altogether (though this is probably a desirable feature, and IE probably isn't evolving).\n\nI think option 2 or 3 is best.  Thoughts?  I can look into option 3.. I believe the answer is \"no\" -- all the examples I've seen (e.g. here) show up to one accent in the first character, and the rest obtained with combining characters. But given the combiningDiacriticalMarkString in the Lexer, there could be arbitrarily many combining characters at this point in the code.. I added an error test (in error-spec.js because I wanted toFailWithParseError). Incidentally, most of my tests are in katex-spec.js because I wanted toParseLike, but they would make more sense in unicode-spec.js...  Not sure how to best share code between these test modules.. They render exactly how accent commands do, which I learned is via <mover accent=\"true\">.  I think this makes sense...  Test added.. This PR actually removes support for \u00c7\u00e7.  I believe they were added prematurely when forcing support for Latin-1.  I just verified that none of the Latin-1 glyphs, \u00c7\u00e7 included, are in the KaTeX fonts.  (I believe this actually makes sense, and the purpose of this PR is to map them into the accent macros, like LaTeX would.)  Here's an example of incorrect looking \u00c7\u00e7 vs Cc in the current KaTeX:\n\n. I opened https://github.com/KaTeX/katex-fonts/issues/2 to track the cedilla issue.. Sounds good.  That's the easiest!  I'll add a fallback when normalize isn't implemented, maybe with a warning, and add documentation.. I don't think there are polyfills involved, but this is what it expands to:\n```js\nvar _iteratorNormalCompletion = true;\nvar _didIteratorError = false;\nvar _iteratorError = undefined;\ntry {\n    for (var _iterator = (0, _getIterator3.default)(\"0123456789/@.\\\"\"), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var _ch = _step.value;\n    defineSymbol(math, main, textord, _ch, _ch);\n}\n\n// All of these are textords in text mode\n\n} catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n} finally {\n    try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n        }\n    } finally {\n        if (_didIteratorError) {\n            throw _iteratorError;\n        }\n    }\n}\n```\nOr minified:\nvar M=true;var _=false;var S=undefined;try{for(var z=(0,n.default)('0123456789/@.\"'),T;!(M=(T=z.next()).done);M=true){var A=T.value;u(o,f,k,A,A)}}catch(e){_=true;S=e}finally{try{if(!M&&z.return){z.return()}}finally{if(_){throw S}}}var C=true;var O=false;var N=undefined;try{for(var j=(0,n.default)('0123456789!@*()-=+[]<>|\";:?/.,'),L;!(C=(L=j.next()).done);C=true){var E=L.value;u(s,f,k,E,E)}}catch(e){O=true;N=e}finally{try{if(!C&&j.return){j.return()}}finally{if(O){throw N}}}\nSo it does add a few hundred bytes.  Shall I switch back?\n(To clarify, _getIterator3 gets defined even without these lines.). How about the following, which Babel seems to leave as-is?\njs\n\"0123456789/@.\\\"\".split().forEach(function () {\n    defineSymbol(math, main, textord, ch, ch);\n});\nWow, this is actually fastest!  jsperf benchmark\n\n. Oops, that's because I was using split wrong.  It's now the slowest...  So perhaps I should go back to a regular for loop.\n\n. Hmm, good question.  htmlNode would be natural too.  My reasoning here was that there are various CSS rules that only apply with the .katex-display .katex nesting.... I'm still somewhat new to ES6, so I'm not sure what's normal here. I still find it weird that export default const is forbidden. I believe we could just do export default {...} if we don't need to name the object, so maybe that's best? The current system allows importing in two different ways (default or nondefault), but that's probably not necessary.. I should add a comment about this. I originally tried it that way, but Node doesn't support import, and I'm running unicodeMake.js in Node, so Babel would have to get involved, and the accents are not available in built katex.js.  I'm open to better suggestions!  We could, for example, put accents here in unicodeMake.js and/or unicodeSymbols.js and import them in Parser.js -- perhaps that's best.. My motivation for committing it is so that people wouldn't worry about when to run it.  (You need to run it whenever we add support for a new accent, or when the Unicode spec changes, neither of which I imagine being very common.)  Another advantage is that we can directly see what characters are supported, so it's easy to complain about a missing one, and for PRs to show what additional characters are being supported.\nIf we do it during build, would we also have to do it when running the test server...?  This approach felt more complicated to me, but I'm happy to have a specific suggestion.. Added.. OK, I tried moving them. It's not especially pretty -- I still evald the code in unicodeMake, which led to extra \\ escaping in the accents definition... Let me know if you see a cleaner way! But at least I'm no longer parsing Parser.js with a regex!. It's relevant in that this PR rewrites how we parse Unicode. The relevant line change is from if (this.mode === \"text\" && cjkRegex.test(nucleus.text)) to if (cjkRegex.test(text)). I can't make a separate PR now because they'd both change that line, but if you like, I can remove that change from here and add a second PR once this one is accepted.\nFWIW, this one-line change would fix #895.. Added.. It results in \"m\" formatted in text mode followed by \"ath\" formatted in math mode. So it's wrong in two ways: it thinks it's in math mode when it's actually in text mode, and the argument is just the first character instead of all four. This is a bug with interaction between MacroExpander and Parser, essentially #924 which I'll update.. I'm not actually sure how to do it -- it's pretty challenging, because by the time parseGroup gets called, nextToken already has the single-symbol group, which means that it already got expanded in the wrong mode.  In the old way of doing things, we could \"unget\" the symbol, change modes, and reget it, but that seems challenging/impossible to do if there are side-effects/errors caused by the first execution in the wrong mode.  So I think we'd need to call parseGroup before actually reading the first symbol of the group, which might cause a rather big change across all of Parser.js.\nSo in summary, I'm not sure how much work it'll be.  It's surely possible, but hard.  I thought I'd commit what I have so far, and open another issue for fixing this further.  On the plus side, it took me a lot of playing around with tests before I could even get this situation to arise, and in some sense #924 is even more important than this missing case.  So maybe this PR is good to merge for now?  Up to you -- I can look at this more when I have time.. Removed.. First, the eval is necessary to load this data into the current module.  console.log is what outputs the same code to unicodeSymbols.js.  In this way, there is already just one source, accentsCode in unicodeMake.js, which generates unicodeSymbols.js which has a copy of the data, but that file should never be modified...\nYour bootstrapping approach above is neat, but feels awkward.  You're asking unicodeMake.js to first import unicodeSymbols.js, but then modify unicodeSymbols.js...  In particular, it won't work with the > piping as is, and is fragile if e.g. unicodeSymbols.js ever got corrupted (e.g. from a bug in unicodeMake.js), then you'd lose the accents table.\nI have a third approach: make a unicodeAccents.js that just gives the accents list, and is written with Node-style modules (module.export = ... instead of export).  Then it should be both requireable in unicodeMake.js and (I think) importable by the rest of KaTeX.. You can use toParseLike instead of this: expect(\"\\\\text{...}\").toParseLike(\"\\\\text{...}\"). Ah, I see, getBuilt renders to HTML.  I didn't realize that -- it suggests some other tests we could do!. I tried verifying these two characters manually with opentype.js Glyph Inspector.  0.27778 seems like a good approximation to the advanceWidth of ! which is 278 (after dividing by 1000), and ditto for the next few characters.  But I'm confused that the space character (32) has width 0.  It seems to have advanceWidth of 250...  Should we fix this now?. Agreed. That makes me feel better about the hacky duplication of width.. It's true that vlist is doing horizontal centering.  That's how accents were able to work before.  The catch is that we need to set the accent to zero width so that it doesn't affect the bounding box.  When that happens, the left edge of the accent gets centered, and the accent itself extends to the right.  Hence the need for the horizontal offset.\nI do wonder whether there's a way to do this with CSS, without needing the width of the character.... Ah, right, maybe it's double the width of a space. (I was copy/pasting the comment from the accent-hungarian CSS.) It might also be the width of the accent character, which is 0.5.... Typo \"aroudn\". Also some readers may not be familiar with aligned (partly because it's amsmath, not regular LaTeX -- at least I didn't know about it until I learned KaTeX), so maybe a short introduction of \"aligned offers the same functionality but in math mode, so use that instead\" before mentioning macro option?. Extra * before \"matrix\".  Should we add \"unlike MathJax\" here?. What is *matrix? Maybe it's matrix*? (I'm just guessing based on LaTeX conventions.) Does this comment not apply to regular matrix?  Also I'd suggest adding backticks to aligned to match. . Nice rewrite! . Is there a reason to use a regex here instead of an object like\njs\nnonstretchyAccent = {\"\\\\acute\": true, ...}\n...\nif (context.funcName in nonstretchyAccent)\nIn general, KaTeX should do this sort of thing in place of most/all utils.contains.  Faster.  But that's another issue.\nIn this instance, another option would be to have a mapping defining properties like stretchy for each accent type... could go either way. But RegExp seems slightly unnecessary (though also fine).. Is there a reason that this needs to be special-cased for \\c?  Can we come up with a general rule?  Ah, I see, there's a fundamental difference according to whether the accent is above or below...  Maybe there should be an const accentBelow = (group.value.label === \"\\\\c\") which we'll later add more cases to?  Alternatively, const accentBelow = (accent.depth > 0) might work.... I'm guessing accent.depth is zero for the other accents?  Still, might make sense to keep this wrapped in an if (possibly if (accentBelow)).. Thanks for fixing this!\nI checked that there are still no 3-accent combos that resolve to a single character.\njs\n            for (const accent3 of Object.getOwnPropertyNames(accents)) {\n                if (accent === accent3 || accent2 === accent3) {\n                    continue;\n                }\n                const combined3 = combined2 + accent3;\n                const normalized3 = combined2.normalize('NFC');\n                if (normalized3.length === 1) {\n                    const key = encode(normalized3);\n                    if (!keys.has(key)) {\n                        keys.add(key);\n                        console.log(\n                            `    ${encode(normalized3)}: ${encode(combined3)},`\n                            + `  // ${normalized3} = ${accents[accent].text}`\n                            + `${accents[accent2].text}{${letter}}`\n                            + `${accents[accent3].text}{${letter}}`);\n                    }\n                }\n            }. I wonder if we should remove this if (accent === accent2) { continue } block.  Maybe there is an accent that can be doubled into a single character.  (I checked, and there isn't, but maybe better to have the check in the code.). This one is not going to render correctly (I assume); see @ylemkimon's recent comment.  Perhaps we should fix this in another PR, though.  (It'll need another tweak to the font, I suspect.). I'm a little confused about the correct markup here. Perhaps it should be `<mtext>${this.character}</mtext>`, and then we need to remove this <mtext> wrapper if it gets included in an <mo> or other token element?. This extra escaping is a bug, caused by operatorname's mathmlBuilder creating a mathMLTree.TextNode, which escapes its text.  I'm not quite sure how to fix it, other than switching to the Unicode representations.... Sad to see all this code duplication. I guess more motivation to work on #1126! \ud83d\ude04 . This is backwards incompatibility: we used to (poorly) support \u00e7\u00c7 in math mode. I'm not sure what's best here. At the least, removing support would mean a new major version. But we don't have good support to begin with, so maybe that's a good thing.\nAn alternative would be to define a macro like \\mathcedilla (by analogy to \\mathring) for math-mode cedilla and then we could support it in math mode. But I couldn't find any such macro in LaTeX.  We could provide one in katex.sty (#793) though.... This seems to be a duplicate of the above -- perhaps a merge typo?. You'll need to add the cedilla c's to the math symbol table similar to the \"\u00f0\" below, unless we add a math version of the accent. . I think either is fine.. Shouldn't that be \"double backslash\"? Or is this a word I don't know? . Industrial sponsorship! \ud83d\ude04 . I added support for anything starting with 0, n, or f.  Hopefully less guesswork in the future.. This has turned out to simplify the code a lot.  Good idea, @kevinbarabash!. I've rewritten the code to avoid this recopying of the search string.. No reason; it would be fine as is, too.  But toBuild also checks toParse, so this seemed like a better test.. Can you change all of these to toBuild? I'm pretty sure only then will your new code be tested, as it's run only during build time, not parse time.  toBuild also checks toParse, so it's strictly stronger.. Yes, thanks for catching this!  (Otherwise we were just testing use of $/\\( outside math mode again.)  Fixed.. The >= 0x80 check is to prevent things like ^ from getting interpreted as a character.  I'm open to other suggestions here.  (I thought about having a table of special symbols...)  But it seems unlikely that there are other interesting characters in the 0-0x7f range that we don't already support.. Is there a reason that you dropped type=\"text/css\" here?  I'm not sure it matters.. We switched to unpkg.com for the main page, so presumably we should continue to follow suit here?. Mentioning \\cr[distance] seems good, but \\\\[distance] is valid too, right?. This would look better (top aligned) if the first <p> gets a style=\"margin_top: 0\", or an analogous CSS rule to remove the top margin from the first <p> within a <td>.. Shouldn't these be in the <span>?. Similarly, \u2102 \u210d \u2115 \u2119 \u211a \u211d \u2124 above seems to be outside the span, which causes them to render in the wrong font.. This is necessary since some update to Jest: Jest requires all messages to be callable.  Obviously not directly related to this PR, but I ran into this (presumably long-standing) bug when my tests were failing.. Ah, interesting.  MDN confirms that this is the default value, so definitely unnecessary.  Cool.. I think it makes sense to match index.html, and that really does need quick updates (as it will coincide with release), so I'd strongly lean toward using unpkg here.. Ah, good point.  Sounds good, as long as you'll remember to add it back once #1075 gets solved.  (I'm guessing you review all PRs since last release anyway, so shouldn't be a problem.). Ah, I see.  That makes sense.  Sorry for missing the subtlety here (especially if it's been discussed before).. Sounds good; pushed a revision.. I believe that is how it works now. Do you think it's counterintuitive? Another alternative would be to have allowAllSymbols take an argument of \"math\" or \"text\", and true for both. Whatever we decide, the behavior should be documented. . Thanks for the tip!  I'll do git config --global core.fileMode false on my Windows machines.\nBoth comments should be addressed now.. I added documentation that this is the behavior.  Should be good to go now.\nI think this issue would be cleaner if we moved to a default true value of unicodeTextInMathMode, or default \"nonstrict\" from #1226.. This kind of re-use of variables generally makes a compiler's job harder, because it becomes harder to tell the scope of the variable that actually matters and thus to figure out the dependencies.  I'm not familiar enough with JS JIT compilers and whether this would actually trip them up, or whether multiple variable declarations would actually cost more (without optimization, it will do more stack work).  But I share @ylemkimon's feeling that the variable is and chs are really different and should be declared separately.... I'm a little confused why you'd need to be hacking metrics like this.  Is this PR using fallback fonts?  I think that's something that KaTeX generally tries to avoid, instead using characters from its own fonts, and adding to the fonts if needed.  Could you clarify which characters in this PR are supported by KaTeX fonts vs. being hacked in?. Did you test this? I'm pretty sure defineSymbol only works with a single \\command, not an entire expression like this.  Instead, you should use something like \\equalsWithDef here (ideally an existing LaTeX command that reproduces this) and then defineMacro that to the expression.. No problem.  defineMacro goes in macros.js.  If there's no LaTeX equivalent, then I'd suggest putting this definition directly as a defineMacro, without any symbol definition.  (You can define a single character as a \"macro\".)\nTo test, run npm start and connect to the URL printed.  Maybe post a screenshot of it working. You might also check out https://github.com/Khan/KaTeX/blob/master/CONTRIBUTING.md\n@ronkok Thoughts on this Unicode support? How does it compare to XeLaTeX etc.?. Agreed, \"compatibility\" maybe isn't the right term.  Perhaps \"adherence\" or \"faithfulness\"?. Sorry, could you also remove the braces around the letter? We just need {\\\\rm A} for example.. It's looks like this merge was unsuccessful: \u22d9 accidentally got removed from this test.  Could you add it back?. Somehow I thought we merged this already, but it looks like the above is still an outstanding issue.  We have two options:\n1. Add a \\mathcedilla or other nonstandard operator for a math version of the cedilla accent, and add support for \u00e7 etc. in math mode.\n2. Add the following lines next to the similar lines for \"\u00f0\":\njs\n defineSymbol(text, main, mathord, \"\u00e7\", \"\u00e7\");\n defineSymbol(text, main, mathord, \"\u00c7\", \"\u00c7\");\nThe former approach will give the proper glyphs; the latter approach will maintain backward compatibility by forcing \u00e7\u00c7 to still fall back to system fonts.. Looking again, it seems all is well.  Merging.. I've pushed a rewording of this paragraph that in particular uses \"faithfulness\" instead of \"compatibility\".. No, in fact this is #1233. I've left this comment as is, though it clearly is incorrect, and I can edit it. This PR has no effect on this issue. . Is baseArg.type / baseArg.value[0].type guaranteed to be one of mathbin/mathrel,mathord?  What if there's an ordgroup in an ordgroup, for example?...  I'm not suggesting going any deeper, but I worry that we need additional checking here.. I've encountered these bugs throughout as well. They are sometimes in my PRs, though I guess we should do a thorough cleanup. . I was matching ParseError's constructor.  If I change one, I should probably change both...  I could also see something like where or context being a good name.. I can't think of such an environment, but presumably they might exist (or the global console could be overwritten?).  In any case, I'm following existing code from the KaTeX codebase, in particular:\njs\n        typeof console !== \"undefined\" && console.warn(\n            \"No character metrics for '\" + value + \"' in style '\" +\n                fontName + \"'\");\nIt might be good to define a katex.warn or something that can be overwritten by the user, but defaults to console.warn.. This level of customizability lets users allow some nonstrict behavior and not others.  @ylemkimon at least seemed to think this would be useful, and it's not exactly hard to support.  Thoughts?. I replaced string with \"ignore\" | \"warn\" | \"error\" but left StrictFunction for now.. Another point for allowing a function is that it enables custom warning functionality, if console.warn isn't the desired warning output.  For example, this would make our own testing easier, as jest doesn't really handle warnings well.. This seemed to require className to be specified, i.e., flow then ignored the question mark. But perhaps a flow expert could comment... . It seems to be this bug: https://github.com/facebook/flow/issues/2977. I like not having to repeat htmlNode.children.push(body); and parts = []; but that may be just me...  (I was also thinking of factoring out if (parts.length > 0)...)  If anyone has a third opinion, I'm happy to go with the majority!. Glad you spotted this!  Updated.. I was wondering about that, but planning to deal with it when we return to discussing #1217. allowAllSymbols feels like more of a hack, not to be encouraged -- the rendering will probably be poor in general, and it's really a sign that we need to add symbols to the fonts.  So I was thinking of keeping that a separate option... but I'm open to suggestions.  (And maybe it is worth discussing here, in case we want to tweak the strict functionality to deal with it...). I double checked, and you're right: it's not necessary.  Removed.  (I probably saw that it might help on a StackOverflow thread, but it didn't turn out to help, so I went on to add other packages...)\nDid you check that the others are necessary, or should I double-check them all?. OK, I agree.  I think this is more motivation to set the default strict value to \"warn\", so at least people get a sense of why the rendering is funny in these cases.. This is for backwards compatibility. Several tests delve into the contents of the children returned from getBuilt, for example:\n```js\n    it(\"should create ords when at the beginning of lists\", function() {\n        const built = getBuilt(\"+ x\");\n    expect(built[0].classes).toContain(\"mord\");\n    expect(built[0].classes).not.toContain(\"mbin\");\n});\n\n```\nThese tests want to ignore the .base elements, but now that there are multiple such elements, their children need to be concatenated together.  The .struts used to be outside the .base elements, but now they're inside, so I also strip them away for these tests.\nThis simplification could be done in getBuilt, not _getBuilt.  Not sure whether this is much better though.. I'm curious too! I haven't seen any, but this comment has been in the code for a long time. . Hmm, good question! I should experiment with removing the topStrut. . It's never used. I expected to want it in environments/array.js, but that explicitly checks for \\\\ or \\cr without thinking of it as a function, so this isn't needed there.  I could remove it, or comment it out, or leave it for possible future use.  Preference?. Yes. Please use that instead.. Is there something magic about 2? Why not a while loop and counter? Does LaTeX not support more than 2 \\hlines? . Sounds good. Done.. In LaTeX, \\\\ \"works\" (does nothing) in display mode, same as the current code.  Your change would cause an error in strict mode.  But that's true, we could drop the \"cr\" class in strict mode; good idea.. How about reportNonstrict and useStrictBehavior?. FYI, this change will conflict with #1314 where cr support moved into functions/cr.js.  Should be an easy fix, whichever gets merged first.. It's not necessary; it is an optimization, so the string didn't have to be generated unless strict mode was set to something that needed it (see the comment for reportNonstrict). This was probably more useful when the default for strict was false, though, making this a common case.. Split into a second category.. I wonder if this option would be better named keepnew/keepNew or savenew/saveNew or something similar.  I would have guessed regenerate would overwrite the existing image, like the default behavior, but it instead saves it in a new directory.. I thought this would end up deleting the new file when --regenerate isn't passed, which would have been a bit unexpected, but it just deletes it within the docker.  Nice!. Agreed, I'm happy it doesn't overwrite!\nWhat do you think about a --new flag, given that the directory name is called new, just like --diff and diff?  But maybe it's also ambiguous.  My favorite other name is probably --savenew...\nI like the idea of printing out the directories, if possible.  It would also be nice to mention the directories in the option docstrings.. Me too!  Even cleaner.. It's already used in src/domTree.js (in what's now HtmlDomContainer, but it predates that).  But Webpack already compiles it to\njs\nthis.style = __WEBPACK_IMPORTED_MODULE_3_babel_runtime_core_js_object_assign___default()({}, style);\nalong with ~90 lines implementing Object.assign, with a fallback to the native Object.assign.  I imagine this is about as good as what objectAssign was doing, and seems simpler.. I also think it makes some sense to be able to allow a documentFragment return value... they are certainly helpful!  But anyway, we can leave this for future discussion.. I have a solution to this messiness that I'm working on.  It involves wrapping the parse tree in a different sort of tag node, making it easy to peel off on the outside.  Coming soon!. Here's a demo of the first example:\n\nYes, \\gdef\\foo{\\foo}\\foo causes an infinite loop.  I confirmed that LaTeX does the same; I didn't even see a stack overflow or other resource error, it just hung forever.  It might be good to put a limit on the MacroExpander to prevent a DOS attack.. I added a change to remove the outer mrow if all it contained was an mrow or mtable. This is especially nice (I think) for tagged equations, but thought I'd add it for mrow too. . Yes. The order of the columns is strict: the first one should be the label, and the second one should be the formula, and then this controls the visual layout. See mlabeledtr docs. (This is all new to me so I hope I got it all right!) . Ah yes, I copy/pasted from buildHTMLUnbreakable. We could factor it out. . I believe it already is.  Shame that we can't see it in the preview, but I checked there's something there.. Also \\def\\foo 1 doesn't work in TeX (the 1 is a pattern match, not an expansion). Unfortunately, I don't know how to detect either case. Our current MacroExpander doesn't distinguish between \\foo and {\\foo}, I believe (both return [{text: '\\foo'}]).. Yes, that will work too. However, as another commented-out test mentions, \\global\\mydef... doesn't work yet (but should), because I'm not grabbing the argument to \\global correctly. . Why did auto-render switch to cloudflare? We should probably use one source; I'd say jsdelivr.. Awesome.. I know you like \\cr because it's less likely to cause issues, but it still seems worth mentioning \\\\[distance] too.. I would have expected this to be laid out like \"Other Letters\" is (compare \\imath with its text equivalent, \\i).. Maybe add\n, and should match XeLaTeX behavior with `\\usepackage{unicode-math}`?  (or \"approximately match\"). I would merge the above two paragraphs.  And maybe also stress that unlisted symbols won't be in the fonts, so they fall back to an unknown system font, and won't \"look right\", in addition to the metrics issue.. {gather} is a top-level environment, which KaTeX doesn't support.  So maybe we should say {gathered}.  And should probably also list {aligned} and {alignedat}; I believe amsmath supports \\tag in equation, gather, multiline, split, align, alignat, ftalign, but among those, we only have gathered, aligned, alignedat.. Maybe add to the first sentence \"after binary operators (like + and \\cdot) and relations (like = and <) at the top level, like LaTeX\".. Maybe add \"to match LaTeX\"?  Maybe this is getting too redundant though.  Feel free to ignore this comment in particular.. \"a KaTeX rendering options\" needs to be \"KaTeX rendering options\" or \"a KaTeX rendering option\".. The second paragraph (about @) is inside the <div class=\"indented\"> -- is this intentional?  Looked a little funny to me.. I think -- and --- need to be wrapped in \\text too.  (In math mode, you get multiple minus signs.). Maybe just add \"like LaTeX\" then? I don't want them to think it adds them willy-nilly.  But I'm not sure most people know the rule, so it also wouldn't hurt.  (I certainly didn't!). Agreed, this is a significant bug -- they're also at 0.9.0.  I'll fix it in a separate PR.. Can you update to 0.10.0? You can now copy/paste from the auto-render README.. Typo: typograhpy -> typography. I think you moved it too far out -- now it doesn't have enough indent. Should be in one level but not two.. Can you test\njs\nexpect(\"\ud835\udc00 = \ud835\udc1a\").toBuildLike(\"\\\\mathbf A = \\\\mathbf a\");\n?. Sorry, I forgot to fix this according to @ylemkimon's experiments. (I had assumed optional groups didn't make their own groups because they didn't use {} notation.) I'll remove the if (!optional).. Correct.  There was a need for expansion being the thing containing the tokens, so I did the rename.  Sorry it's confusing as a diff.. The new .macros.get(...) is probably good now.. As stated in the root post, this is important for functionality sake, so you can share macros across calls (including e.g. the current equation number).  But it is also confusing and can lead to bugs if you don't realize what's happening... so I'm not sure what's best.  A toggle?. No, it can't.  (I assume you mean ||, as | doesn't short circuit.  I used to have it this way, but it fails tests.)  We need to distinguish a macro set to the empty string (which evaluates to false) vs. an undefined value.. I thought topGroup made it clearer that the macro set might be modified.  But happy to change to something else.  Maybe globalMacros?. No.  I'll add some TODOs.. Adding a TODO in test/katex-spec.js.. @ylemkimon is right!  I tested the following with LaTeX:\nlatex\n\\def\\x{1}\\x\n\\[\\def\\x{2}\\]\n\\x\n$\\def\\x{3}$\n\\x\n$$\\def\\x{4}$$\n\\x\nand all of the \\xs (outside math mode where they're set) evaluate to 1.  So TeX does make a group for each math-mode expression, justifying adding such a thing.\nThis is nice too because \\def at the top level (of math mode) won't accidentally mess with settings.macros; you need to use \\gdef.  The user presumably means to define something globally if they use \\gdef.. Indeed, good catch!  I've tweaked this to no longer happen, thanks to the new expression-level group, and added a corresponding test.. Is any of this loop still needed?  Can you test without it?. Is this equivalent to \\rlap? An alternative would be to macro \\not to \\rlap{\\not@} and rename the symbol to \\not@.  I'm not quite sure what the intended behavior is, as LaTeX's source code is pretty opaque:\nlatex\n\\DeclareMathSymbol{\\not}{\\mathrel}{symbols}{\"36}. It occurs to me that these tests should be done in strict mode. . I meant &ThickSpace; is an example of a long name between a & and ;, as opposed to the Unicode equivalent.  See the table in Section 6.1.4.  I could change to &CharacterNames; or just \"character names\" if that would be clearer.. Back to this approach, I wonder if this could be done when building the symbol, instead of a for loop after the fact?. @ronkok Do you want to take a crack at this?  There are probably many of these tests.  You should just need to replace toParse() or toBuild() with toParse(strictSettings) or toBuild(strictSettings).. I'm confused -- this test should not pass under strict settings.. This test should also be nonstrict (or separate the \\text part in strict and the non-\\text part in nonstrict).. Same here.. Nice to see toBuild in the examples below!  Should this one also be toBuild?. The quotes are in the wrong place here.. \\notin produces the same error.  So that's a bug, though not necessarily for this PR.. Yep, 8713 is missing from fontMetricsData.js.  I've added an issue here: https://github.com/KaTeX/katex-fonts/issues/47. They are technically different: ?Token[] includes null and undefined, while Token[] | void includes just undefined.  (I learned the | void trick looking elsewhere at this codebase.)  I agree the former is simpler looking, while the latter is more precise...  Do you still think I should change it? (Also happy to hear any other votes.). Good idea!  It's difficult to make it a public API in katex because it depends on the current state of the macros (i.e. the current group).  So I've made it a method of the MacroExpander for now, so at least it's available to all macro definitions (defined by JavaScript functions).. This is what LaTeX does; see the definition in comments. I believe it's a conscious decision because the \\in glyph is relatively narrow. So I think we should follow suit. . ...unless there's another LaTeX package that redefines \\notin differently? I know AMS doesn't redefine it. I'm on a phone so can't easily check symbols-a4.. I think we still want to test (the space between) a double vertical bar, if we can fit it in the test... . There is a rather large variety of \\notin symbols listed in symbols-a4, from packages fdsymbol, stix, txfonts, mathabx, MnSymbol.\n\nNot sure what to make of all this.  I guess I lean toward matching LaTeX's default behavior, but I'm also happy to design a \\not-based macro if that's the preference.. I thought about doing it in buildExpression and it might be possible, but it's worrying to me. For example, -{}- does not make a ligature, like {-}-. In the current parse tree, these can be distinguished from --, but with any optimization (such as what we do in MathML's buildExpression), they might not. It makes sense for ligatures to be at the lexing level, and doing it in the parser approximates this. I also don't imagine people use texttt too often, so it shouldn't cost much time. But I could also try it the other way. . I read the TeXbook some about this.  One point is that \\lq\\lq makes a ligature, so it's good we do this after macro expansion, not in the lexer.\nI believe one \"right\" way to do this would be if the parser already knew what font we were in.  This is difficult with the current separation between macros and functions, but maybe it could be done.  Definitely more effort though.\nI think it'd be possible to do in buildExpression, but it'd have to be done twice, once for MathML and once for HTML.  Should I explore this further?. Sounds like a good idea.  Maybe for after #1336?. Added, and used in isDefined, but I'd hesitate to use it in e.g. _getExpansion because it'd double the number of lookups.. Because there's no handler defined, so the type isn't used.  I copy/pasted this comment from functions/math.js.. Before, we used {strict: false} in all tests.  Now we use the default settings {} in all tests by default, which is more natural.  A few tests needed to have {strict: false} specified, though, and I added nonstrictSettings to these.. Edited both.. FWIW, the \"macro expander\" section of tests has a few tests along these lines. But probably the screenshot test is more important here. . 7mu should be 6mu. (plus does not add, it states allowable growth when stretching.)\nI think you should also add \\nobreak at the beginning (which prevents a line break before the macro), and I also feel like the outer {} should be removed to match LaTeX... Could you test it in this form to make sure there are no bad breaks?\nAs a minor thing, I'd change \\mkern to \\mskip to match the macro definition as closely as possible, but they are of course identical at this point. . Why is this unshift instead of push? In particular, why is the order reversed?\nEfficiency wise, it'd be better to push and then reverse e.g. while returning. Though I can't inagine anyone having more than a few consecutive \\hlines. . Ah, here you are processing in reversed order. I'd find it more intuitive to store them in order, then use a for loop or map here. . Great example!\nTechnically, the various other &s above ought to be &amp; in HTML. But it's been working fine, so I could go either way.. I find this one a bit confusing, given that [ actually means [ in the examples below.  Perhaps replace [args] with ... or #1#2...?. I could see going to 4 columns (at least) here. But not a big deal.. This is wrong: \\newcommand, \\renewcommand, \\providecommand use [numargs] not #1#2..... This should probably be javascript:.. You could use utils.contains which is designed for this purpose (and equivalent).  I don't feel strongly about this, though... I've always found that helper a bit small to be important.. Please remove the space after default.. Maybe this should be rewritten from \"dom tree\" to something like \"dom tree node types\"?. __defineMacro works just like defineMacro.  Its second argument can be a function, as above.  Is there something more you need?. I believe the latest NPM uses sha512 hashes exclusively. Or does it normally use a mix? I've found I had to delete node_modules and clean the NPM cache, then npm install, to fix this.. I can think of one important difference here: if there's something that doesn't match the regex, exec will (I think) skip over it, while matchAt will fail.  Thoughts on how to fix this?. It's cool that this works even when feeding another string, thanks to the semantics of exec.. Shouldn't we try to get sha512 hashes in there?  Again, I've found resetting NPM as listed above (thanks to these various issues) has fixed the problem.. Nice change.. Oops, I was wrong about this.  I just tried the following in Chrome:\njs\ns='aaaaaaa'\nre.exec(s)  // [\"a\", index: 0, input: \"aaaaaaa\", groups: undefined]\nre.exec(s)  // [\"a\", index: 1, input: \"aaaaaaa\", groups: undefined]\nre.exec(s)  // [\"a\", index: 2, input: \"aaaaaaa\", groups: undefined]\nt='aaaa'\nre.exec(t)  // [\"a\", index: 3, input: \"aaaa\", groups: undefined]\nIt seems we should set this.tokenRegex.lastIndex = 0 in feed.. Oops, indeed, all is well. I thought Lexer had the feed method but it's MacroExpander, which creates a new Lexer each time.. Thanks!  Used in two instances.. Hmm, maybe I could also just use parseInt.  parseInt('9',8) and parseInt('g', 16) both return NaN.  I'm not sure whether there are any other weird things allowed by parseInt, but it doesn't seem so.. It will still produce a \"font metrics error\" later if that character isn't in the symbols table.  \\char wasn't intended to bypass that, but rather to avoid macro expansion on the character.  Indeed, \\char is currently used just in a MathML context, where a missing character in the symbols table isn't an issue.  Maybe that's what you're asking: this is why we don't get such a warning.. Good point. I'm also worried about slightly different implementations of parseInt on different browsers.  I switched to your map approach, with no more call to parseInt.. If expect passes through only one argument, does that mean this won't work with ${interpolated expressions}?\nI don't think the new code looks much more confusing than the old code -- the weirdest part is that expect just passes on its argument, and the action is in the chained methods afterward -- but that's a general Jest thing.  However, until I read the template literal description I didn't really understand what the code was doing.\nWhat about expectTex`1 \\over 2 \\over 3` which is equivalent to expect(tex`1 \\over 2 \\over 3`), i.e., the string gets processed before calling expect, instead of requiring all matches to process it?  I think the weirdest part is overloading expect in this unintended way (unless Jest suggests doing this?).. @ylemkimon There would be a difference if we needed to use Jest's matchers.  But I can't actually think of any situation where we'd want to use those on a TeX string.. True, 2 out of 3 uses are in src/functions/mclass.js, so this makes sense.  I originally wrote it this way, but switched for some reason.  Switched back.  This PR should be ready for review now.. Removed. That explains why we don't do this all over the place. \ud83d\ude04 . Should this build be removed?. Hmm, now I worry slightly about someone with an existing repo, discovering a new build directory marked unknown.  But maybe that's good, encouraging people to delete it.  (bower might even have an issue with directory build existing, now that it's removed from other lists?). I think it's a fluke of KaTeX that \\raisebox works with an unbraced argument 0.4mu.  LaTeX doesn't work that way (while TeX's \\raise does), and we should probably fix that eventually.  So I'd be happier if we replaced with \\raisebox{0.4mu}.. I also feel like some of the other braces on line 666 are unnecessary, at least the first one (because of the one within \\raisebox).  Hmm, maybe the others are necessary in case of macros in the argument.  Maybe you can also add this test:\njs\nexpect(\"\\\\def\\\\x{1}\\\\pmb{\\\\x\\\\def\\\\x{2}}\").toParseLike(\"\\\\pmb{1}\"). This is much easier to read now, thanks!\nI have one remaining question: why is the \\mathrlap{#1} nested inside another \\mathrlap?  I imagine it could also go at the very beginning, like \\mathrlap{#1}\\mathrlap{\\mkern0.4mu...}.  Any particular reason to prefer one over the other?. Indeed, you're right.  Thanks!  That wasn't obvious to me from the documentation.... We could probably add an alias for the old form, but given that the screenshotter is internal to developers, I doubt it will be too much trouble.. There's actually a bug in the four-argument case: https://github.com/tj/commander.js/issues/686. But I was able to work around it.. This is old, but perhaps we should use rimraf instead of rm -rf (for Windows users, presumably).  Also, I don't see why we delete dist/* instead of dist/ here and in build.  It seems slightly better to delete the entire directory instead of leaving it blank.. While I agree that these were the wrong place to link to these, I do wonder whether we should offer some deep links into the documentation.  The supported functions list is quite useful, in particular.  Maybe add a mention under \"print quality\" (when comparing to TeX?)  \"See a list of supported LaTeX functions\"?. Is it worth saying \"see https://khan.github.io/KaTeX/docs/api.html for details\"? (to cover the removed part). This is definitely good to add!  I wonder about no longer having the quick start that most people would use (1 link tag, 2 script tags, then call renderMathInElement). I guess that's what's in https://khan.github.io/KaTeX/docs/autorender.html, but it still might be nice to have the minimal version here.... Nice idea on how to do this!  Not fully automatic, but close enough.\nI'd suggest making this command always available (i.e. uncomment it out), provided that doesn't cause cli.js to otherwise break (I assume it runs command-free otherwise, but haven't tested).  And then we can add a comment to the effect \"if you change the options or their documentation, please run this command and also update docs/cli.md\".. Can we rewrite this to KaTeX supports much (but not all) of LaTeX and many LaTeX packages.  See the [list of supported functions](https://khan.github.io/KaTeX/docs/supported.html).?  Mostly I want to avoid \"here\" as the link text (related to https://www.w3.org/QA/Tips/noClickHere).. Maybe replace Include another script with To automatically render math in all text elements, include the [auto-render script](https://khan.github.io/KaTeX/docs/autorender.html)contrib/auto-render.min.js, or via CDN:?  I think the extra text in the beginning makes it clearer what this is for -- less sure about the extra link at the end.. \"for more details\" would be more common use here.  Or maybe just \"for details\".. This should be npm run build (since your PR fixing up build scripts).. Would \"Options\" or \"Command-Line Options\" be better than \"Usage\"? (Not sure.). detail should be details in both cases.. \"source codes\" should be \"source code\".  Also it'd be nice to avoid a \"here\" link.. We've never been able to define such a macro. See #977.. There is yarn login: https://yarnpkg.com/lang/en/docs/publishing-a-package/\nI'm not sure about whoami but it ought to be possible.  yarn info might also be a possible replacement for npm owner ls.... I found that yarn config get username (or yarn config get email) works like npm whoami and yarn info katex maintainers is pretty close to npm owner ls katex.  Unfortunately, yarn info katex maintainers is out of date (missing me in particular), though the same was true of npm owner ls until I bugged NPM.. Oh, nice!  That list is up-to-date for me.. I read that yarn install is the default behavior, so the first could be replaced by yarn.  Similarly elsewhere in this PR.. Please add a space before the parenthesis.. \\u doesn't work in a raw string, because ES thinks it's the beginning of a Unicode escape. (This is mentioned in our documentation.) This means we need to use the old fashioned method for \\url, sadly. (\\\\u also doesn't work.). Should this be yarn version \"${VERSION}\"?. Similarly, should this be yarn publish-gh-pages?. I didn't see this in the netlify preview, I guess because there's no versions.json yet.  How should I test this?. I'm a little confused why we're adding website to the tag.  Should this just be website/pages/index.html from the update-sri.js command above?. Why docs/*.md.bak? Are these actually checked in?. Is \"Most people will read docs on master\" still true?  It seems to make sense to give them the nextversion-pre release number...  But I'm not exactly sure what's best.. I assume you meant to include \"--new-version\", as otherwise I get:\nsh\n$ yarn version 0.10.0-beta\nyarn version v1.9.2\nwarning package.json: No license field\nwarning package.json: No license field\nerror Use the \"--new-version [version]\" flag to create a new version.\ninfo Visit https://yarnpkg.com/en/docs/cli/version for documentation about this command.\nBut I get the following (first half looks good, second half looks bad):\nsh\n$ yarn version --new-version 0.10.0-beta\nyarn version v1.9.2\nwarning package.json: No license field\nwarning package.json: No license field\ninfo New version: 0.10.0-beta\n$ docusaurus-version\nNo version number specified!\nPass the version you wish to create as an argument.\nEx: 1.0.0\nerror Command failed with exit code 1.\ninfo Visit https://yarnpkg.com/en/docs/cli/version for documentation about this command.. Ahh, got it now, thanks.. It might be preferable to more explicitly add the things you want (although there are other checks for uncommitted changes, I guess).. I've added the query cache (though if we ever load pages via AJAX, this will break).  I don't think we need to cache the positions of the headers -- these should be effectively cached by the web browser.  This is also standard for scrollspy.. Maybe \"inspired by\"?  I could remove the link and just mention that ScrollSpy is a thing.  I also wonder whether this file should be called \"scrollspy.js\" or something else.... It used to be top = nextHeader.getBoundingClientRect().top + scrollTop and then current = top + scrollTop > scrollTop + OFFSET.  The scrollTops cancel.. I don't think so.  In my experience, it takes multiple seconds before the DOM content is fully loaded, and someone could easily scroll during that time.  We don't want to accidentally cache at this time or we might miss some of the elements...\nAlternatively, I could bind the scroll etc. events only after DOM content is fully loaded.  But I like that the current code does its best effort while the page is still loading, in the case that someone scrolls early.. Oops, I see now that you were suggesting the cache could be read here, not written.  I'll do that.. Sounds cool! Maybe make this into a separate issue, or add it to the documentation checklist? Do you have an example from another project of what this might look like? . OK, I've switched back to throttling. Thanks for the lint fixes! I also tweaked the comment now that scrollTop is no longer defined. . mod was replaced with macros a while back. I guess I forgot to remove the type. . Can you add colons after each of the names (e.g. [Auto-render](autorender.md):)?. OK, maybe KA first and the rest alphabetical (i.e. as is)?. \"softwares\" should be \"software\" (collective noun). I take it the <script defers are guaranteed to execute in order, and only after the DOM has loaded?  Yep.  Cool.. It's a shame these have to be repeated, but we are saving 76KB in the woff2 file load (and the roundtrips for the fontawesome CSS and font files).. I wonder if it's worth including an example of how to render the error, e.g.\njs\nhtml = \"KaTeX error: \" + e.message.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');. I'd personally rather have this more complex example in the \"Handling Errors\" section.  We could either return this example as it was, or e.g. encourage the use of {throwOnError: false}, which should cover the most common use case -- and then refer to Handling Errors for alternatives.  What do you think?. I think we should keep these examples simple in the README, and refer to the API doc for more.  I'd use the {throwOnError: false} option in both the examples above.  This also quickly demos the ability to pass in a settings object.. Should be \"If you do not use the defer attribute...\"\nAlso I think it might be nice to include an example of attaching to DOMContentLoaded.  onload is cool, but it doesn't seem like a great way to write a complex settings object.. Maybe start with \"In the example above,\"  Also add \"the\" in \"deferred using the defer attribute\".. Oh, true, gzip should deal with this well.\nBy the way -- is there some HTML linter we ought to be using? (not for this PR, just reviewing HTML made me wonder). The sources and destinations have mismatching filenames.  Did you mean dist/katex.min.js?  Ditto below. You can add \\allowbreak instead of exiting and leaving math mode.. It looks a little weird to have the \\rang example so different from the \\rangle example right below it.  I'd suggest unifying them one way or another.  Ditto for \\lang and \\langle.. The next line says \"up to ten arguments\".  That should really be nine, as we start counting at 1.. I'm not sure this is the right place for the break commands.  Maybe in \"Line Breaks and Vertical Layout\" around \\\\ and \\newline?. \\char is another recent addition for this list.. It might be better to link somewhere other than w3schools.  Perhaps https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords?. Is there a reason that a few of these don't have 0s added?. FYI, there are screen widths where this does not render very well:\n\nThe cells are forced to be pretty wide, so I think the only solution would be to switch to two columns...  Eh, other tables look bad at this size too:\n\nNot sure we want to deal with this now.. \"overridden\" doesn't need a hyphen.. I confirmed that this is indeed best practice: https://webaim.org/techniques/css/invisiblecontent/#absolutepositioning\nThese (dis)appearing headers are really cool!. Doesn't this run build.js from the website directory, in which case ../docs/cli.md path is incorrect?  Perhaps we should chdir within build.js for safety in any case (like we recently added to screenshotter).. Missing #.. \\boldsymbol and \\bm can render a 0 fine.... Should we remove the \"prestart\" script then?. Where is this feature documented? It seems a bit weird, e.g., the output includes <meta property=\"og:description\" content=\"{@stylesheet: katex.min.css}\">.  (Maybe we can manually include a description in the YAML header?)\nIs there a reason to do it this way vs. via a <link> tag?  Avoiding the absolute path issue?  Or does it embed the CSS in another way?  (I haven't actually figured out how the CSS gets in there...). I'd say either yes, move it into start, or just revert that last commit and have everyone call yarn prestart.  Slight reference for the latter.. Got it; all makes sense now.  Can we fix the description thing?. Sorry, I meant something like this:\nmarkdown\nDirect Input: $\u0391 \u0392 \u0393 \u0394 \u0395 \u0396 \u0397 \u0398 \\allowbreak \u0399 \u039a \u039b \u039c \u039d \u039e \u039f \u03a0 \u03a1 \u03a3 \u03a4 \u03a5 \u03a6 \u03a7 \u03a8 \u03a9$\n$\u03b1 \u03b2 \u03b3 \u03b4 \u03f5 \u03b6 \u03b7 \u03b8 \u03b9 \u03ba \u03bb \u03bc \u03bd \u03be o \\allowbreak \u03c0 \u03c1 \u03c3 \u03c4 \u03c5 \u03d5 \u03c7 \u03c8 \u03c9 \u03b5 \u03d1 \u03d6 \u03f1 \u03c2 \u03c6$. This looks right to me, but perhaps someone from KA can confirm.\nAlso, is it best practice to call the file LICENSE or LICENSE.txt? I thought the latter but I don't know. . Nice addition. I'm now happy with the polyfill part of this PR. . Looks good! It might be helpful to hyperlink src/macros.js to the master copy. Also I would remove \"The\" before MacroExpander. . Maybe we should abort if this returns a non-zero error code?  (if ! yarn build)  Also below.. Can we remove the duplication of executed commands using more complex if statements?. Sounds good!  Slight tweak: Maybe ... hard work of [many contributors](https://github.com/Khan/KaTeX/graphs/contributors). I think it'd be good to keep the \"created by\" line as well.  Maybe KaTeX was built from the hard work ...  It was originally created by ...?. Now that this line is far away from the rest, maybe it needs a comment too? (possibly a reference to the other comment). I've removed all pinned properties.. Instead of using skip (and should probably use break) here, you can just continue charloop if you label the for loop block with charloop:.  (I've never done this myself, but see these docs.)\nBy the way, odd that there is no domTree.createStyle.... I realize that this check is somewhat oversensitive, because the classes aren't sorted.  But I guess that's fine.. You seem to be missing prev.italic = next.italic;. Maybe add a comment that chars is modified in place, as well as returned?  The former could be dangerous (and now the code that uses tryCombineChars doesn't make it obvious that it's changing in-place.). I worry that some other functions might return the equivalent of a textord that wouldn't be caught before running the function.... Should this have been .../dist/katex.min.js instead of .../dist/katex.js?. I guess you could assembly the nodes into a new array and return that.  In some ways that might be better -- splice is pretty inefficient.  In reality, speed is going to depend on whether there's anything to combine ever.  If there is, assembling into a new array would be faster; otherwise, the current approach is probably slightly faster.. Doesn't this need to be returned? Oh, I see the magic of =>. . Although these declarations get hoisted, I have a personal preference for listing them above where they're used. (I think it's easier to read.) But feel free to leave as is. . This is a new call to tryCombineChars, right? This suggests to me that it should be called in buildExpression, not anywhere else. For example, \\text{{hello}} probably won't combine the characters in the current code, because of the ordgroup in the way, but would if we called it in buildExpression.\nPerhaps it should only be called in text mode, though? How is that currently detected? (Vague worry that that's what the italic > 0 check was for...). I don't see a use-case for keeping letters as separate objects in text mode -- but I agree there's a use in math mode where each letter represents a separate variable. See buildMathML.buildExpression which does a similar transform of combining mtexts (but of course MathML is trying to represent semantics here; HTML could have different, more visual purposes).  But we can discuss this as a separate PR.. Should origin be \"$ORIGIN\"? Ah, I guess not -- this is meant for the forked repo.. Nice, I didn't know about -B.. Will yarn publish-gh-pages respect ORIGIN?. Will this work in DRYRUN mode? I guess the first operation will always succeed, but I'd feel a little safer if we defined a function npm() { echo \"npm $*\" }.. Why not filter: '^docs/|^static/|^website/|^LICENSE|\\\\.md$' as above?. Why not filter: '^docs/|^static/|^website/|^LICENSE|\\\\.md$' as above?. Does \\. need to be \\\\.?. This seems a little fragile going forward. What if we used an image from /static/? Maybe we should use a regex (with egrep and sed) like static/[^ ]*css or static/katex.min.css. Oh, also, the replacement string is incorrect as is, but would be correct with such a query.. This link isn't working.. Isn't the second half of the s command (replacement string) still incorrect?. Did you forget to push, or are you still working on this? . Would this change affect the screenshots? I'm not exactly sure where we use .italic, as we don't support \\/ (but maybe we should). We probably use it in accent placement, so removing mode === \"text\" might improve (or worsen) accents. . Any guesses why I'm not seeing these changes on https://deploy-preview-1700--katex.netlify.com/docs/supported.html ? Is there something wrong with our Netlify builds?. Even better (faster) would be to use hasOwnProperty on an object with the appropriate keys. We should replace all/most uses of utils.contains with this. But not necessarily for this PR.. Of course! Thanks.\nNow I see a bug, though: the 0 in \\mathnormal his rendering in the incorrect font.\n\nAccording to inspect, it's rendering with the HTML <span class=\"mord mathcal\">0</span> whereas the letters are rendering as e.g. <span class=\"mord mathdefault\">A</span>.. Oops, I guess that's exactly what LaTeX does.  Sorry, \\mathnormal does not do what I thought it did!\nlatex\n\\mathnormal{Ab0}\\mathit{Ab0}\n\n~~I do get the feeling that there's too much space after the A in all other KaTeX examples (\\mathit, \\mathrm, \\textrm, \\mathbf, ...) though...~~.  Comparing more with LaTeX, everything seems like a good match. Which your texcmp outputs confirm. \ud83d\ude04 \nI do remain confused about what the initial/default mode of LaTeX is. I thought it was \\mathnormal, but that differs on numerals. Is there a name for it?. I guess this is equivalent to\njs\nreturn makeSpan([], group.children, options);\n? Not sure there are any advantages either way, though.. FWIW, this behavior matches my experience testing with LaTeX. I don't see it documented in The TeXbook. But the TeX source code definitely calls groups started with \\begingroup \"semi-simple groups\" (search for begin_group), and it definitely does something special with them (search for semi_simple_group). But I'm no expert at that code... . This line is a typo: it's missing the closing $. You can also check the resulting render of the website on Netlify by clicking the link at the bottom of the checks on the PR page: https://deploy-preview-1741--katex.netlify.com/docs/next/support_table.html. I guess this simpler error checking is fine because parseFunction will return null only if \\cr is not a defined function, which shouldn't happen.  Ditto below for \\right.. Why did the position here change from the \\ to the s? I guess other errors already pointed there.. Why did the above two tests disappear? They seem useful, as they repeated elsewhere.. I noticed an inconsistency here in whether there is a ~ between two delimiters. In my opinion, we should add a ~ in $( )$ and [ ] so that they match the longer forms $\\lparen~\\rparen$ and $\\lbrack~\\rbrack$. I also find it weird that the source columns do not show the ~ in the source. @ronkok, any comments or suggestions?. > I do not see any examples of that, at least not in the delimiter table.\nThey are all like that. $\\lt~\\gt$ `\\lt \\gt` is perhaps most obvious; I'm suggesting it should be $\\lt~\\gt$ `\\lt~\\gt`.  But also e.g. `\\lparen`<br>$~~~~$`\\rparen` should be `\\lparen`<br>$~~~~$`~\\rparen` or similar.  Should we do this in a separate PR?. Hmm, maybe those aren't meant to be source columns, just lists of command sequences?  Then perhaps `\\lt \\gt` should be `\\lt` `\\gt` (a less important change).. Maybe we can add the TeXbook reference in a comment to justify the choice of 4?. @kevinbarabash The PR was originally done that way, and it was messier; see https://github.com/Khan/KaTeX/pull/1747/files/bcd69c54ad850a8149c247ac5995b7e92c396591\nIt's a little sad that this approach (still) converts from number to string to number and later back to string, but I guess it'd be hard to return a string here.... We could search.  But also a new version of this library should now do what we want, thanks to https://github.com/rayrutjes/diffable-html/pull/15 (which I'm now using, avoiding the hack).. Should we use yarn install --frozen-lockfile instead, as mentioned in https://github.com/yarnpkg/yarn/issues/6427#issuecomment-435831173 ?  I admit I don't really understand the implications either way, but it seems this would force it to respect yarn.lock and not drift?. In this case, maybe we should encourage screenshots from the tester on katex.org, so that they double check it's not their environment?  And/or perhaps in Environment we should ask something like \"- (if applicable) Custom web environment and KaTeX version\"?. suggestion\nabout: Report functionality that isn't working as it should (other than just poor rendering)\nMaybe useful to distinguish from rendering bug report?. suggestion\nabout: Report functionality that renders incorrectly/poorly. Maybe also encourage them to include the image from QuickLaTeX in this section?\nI wonder if we should also include some text like \"KaTeX's general goal is to render as LaTeX does, so it's important to show how the current behavior compares with LaTeX's.\". Minor style thing: It'd be nice to end the bold headings with colon or period (maybe currently have no punctuation). I think this will make them easier to read when rendered (and the newlines disappear).. ",
    "dhermes": "Does this also include things like \\widetilde, \\widehat, etc?\n. ",
    "drewsberry": "Roman font inside equations can be achieved using \\text{roman font}, although \\mathrm support would still be good.\n. ",
    "delip": "@xymostech can you look into the PR submitted by @kevinb7? Please let us know if you need help. \n. Just awesome!\n. ",
    "alexirpan": "Poking this. It turns out the kramdown engine turns 0 < 1 into\n% <![CDATA[\n0 < 1 %]]>\nThe intention is that it gets wrapped to properly escape the < sign, and the wrapping gets commented out in the rendering.\nkramdown is the main markdown engine for Github Pages, so this is a barrier for setting up KaTeX on blogs hosted there.\n. ",
    "meygerjos": "Kramdown has a workaround now.  But KaTeX should still fix this.. Here is a javascript workaround until this is implemented in KaTeX.  Posting because it might be useful to other people who want upside-down symbols and come across this thread.\n```\nvar scripts = document.getElementsByTagName(\"script\");\nfor (var i = 0; i < scripts.length; i++) {\n    var script = scripts[i];\nif (script.type.match(/^math\\/tex/)) {\n    var text = script.text === \"\" ? script.innerHTML : script.text;\n\n/* Removing comments is important because kramdown adds a\nTeX-commented CDATA wrapper to any math including the\ncharacters < and &. KaTeX unfortunately doesn't respect\nTeX-style comments (as MathJax does), so we need to help it\nout here.  The reason that kramdown needs to add a CDATA\nwrapper is that for some reason (idky) XHTML doesn't like '<'\nand '&' in a script tag unless there's a CDATA wrapper.  XHTML\nwill see the wrapper because it doesn't respect TeX-style\ncomments.  For more information see\nhttps://github.com/gettalong/kramdown/issues/292 and follow\nthe links. */\n\nvar textWithoutComments = text.replace(/%.*/g, '');\n\n    var options = {\n    displayMode: script.type.match(/mode\\s*=\\s*display/),\n    macros: {\n    \"\\\\heart\": \"\\\\heartsuit\",\n    \"\\\\butt\": \"\\\\yen\" // replace \"\\\\butt\" with something that won't be used that often, like the yen symbol\n    //\"\\\\butt\": \"\\\\rotatebox[origin=c]{180}{\\\\heartsuit}}\"\n    }\n};\n    script.insertAdjacentHTML(\n    \"beforebegin\",\n    katex.renderToString(textWithoutComments, options));\n}\n\n}\n// Replace yen symbol with inverted \\heart\nvar katexs = document.getElementsByClassName(\"katex-html\");\nfor (var i=0; i<katexs.length; i++) {\n    var spans = katexs[i].getElementsByTagName(\"span\");\n    for (var j=0; j<spans.length; j++) {\n        var span = spans[j];\n        if (span.innerHTML === \"\u00a5\"){\n            span.innerHTML = \"\u2661\";\n        span.style = \"display: inline-block; transform: rotate(180deg)\";\n        }\n    }\n}\n```. ",
    "xsznix": "Perhaps %[^\\n]*(?:\\n|$) so that it allows comments at the end of the expression?. Yeah, it sounds like allowing a comment to end a math expression would not be expected behavior. I rescind my suggestion.. @kevinbarabash sorry for dropping off the radar, I've been traveling/busy for the past week. I'll get the requested changes in by this weekend at the latest.. Based on previous experience, the fork/link shouldn't actually be necessary because GH automatically redirects old repo URLs to the new one: https://help.github.com/articles/about-repository-transfers/. Ah, I've run into the same issue on the version of KaTeX (0.8.1-ish, IIRC) that's currently on Messenger, even at default zoom:\n\nIt seems to be slightly evasive, and I'd help except I can't for the life of me figure out how to change the appearance of the sqrt-line\u2026. Outside a fraction, $$\\sqrt{b^2-4ac}$$ renders at first but if I scroll it out of view and then back it disappears.\nIn the denominator it seems fine:\n\n. @edemaine I'm on Chrome 60, macOS 10.12.6, and the issue occurs at both 1x and 2x DPI scaling.\n@sophiebits Adding #facebook ._1e4d._3_3l .katex-display {padding: 1px 0} seems to fix clipping on both the sqrt line and the nested superscript. Possibly worth sending over to the Messenger team? It's probably not the optimal solution but it sounds much easier than fiddling with vlists.. Cool, thanks for the tips! I'll make sure to work on feature branches from now on.. @kevinbarabash np, it's always good to have a second set of eyes to double check everything. Yeah, I think getting rid of the separate Settings class would be good. Right now each property is repeated three times in the code (once in SettingsOptions, once as fields on Settings, and once in the constructor to set those fields), and we can reduce that to two by doing something like:\n```js\n// Settings.js\nexport type Settings = {...};\nexport const defaultSettings = {...};\n// somewhere else\nsettings = Object.assign({}, Settings.defaultSettings, settings);\n``. Implemented with #848 . This is redundant; you don't have to explicitly annotate consts for Flow to recognize their type.. No; Flow will infer the type automatically. Ditto for line 34 as well.. hm, on second thought, Flow isn't as good at inferring types when you use computed properties, so I think it's probably good to keep this annotation and the one below.. I think this$Shapehere is necessary since you should able to do stuff likenewOptions = options.extend({color: 'white'}), which doesn't set the requiredstyleandmaxSizeproperties inOptionData. You still wouldn't be able to do stuff likeoptions.extend({style: null})(see [Flow docs](http://sitr.us/2015/05/31/advanced-features-in-flow.html#shapet)).. should this be left in then?. Not ifOptions.coloris nullable\u2026.colorandfontneed the second?in order to pass type checking in the last line inextend, since those properties are nullable onOptions.. I'm not sure I'm following.SettingsOptionsis what the user passes into theSettingsconstructor, and as we established earlier, all the properties here should be optional.. There would be a bit of code duplication if we added this to theOptionsconstructor because the default is already being parsed in theSettings` constructor:\nhttps://github.com/Khan/KaTeX/blob/ccf09786cc747080cdaa091c2ba2251861d1d138/src/Settings.js#L27\nIs that okay, or is there a more elegant solution?. I'm pretty sure it's necessary. Taking it out leads to the following Flow errors:\n``\nError: Options.js:116\n                        v------------\n116:             return this.extend({\n117:                 style: style,\n118:                 size: sizeAtStyle(this.textSize, style),\n119:             });\n                 -^ call of methodextend88:     extend(extension: OptionsData): Options {\n                           ^^^^^^^^^^^ propertymaxSize`. Property not found in\n                                    v\n116:             return this.extend({\n117:                 style: style,\n118:                 size: sizeAtStyle(this.textSize, style),\n119:             });\n                 ^ object literal\nError: Options.js:139\n                        v------------\n139:             return this.extend({\n140:                 style: this.style.text(),\n141:                 size: size,\n142:                 textSize: size,\n143:             });\n                 -^ call of method extend\n 88:     extend(extension: OptionsData): Options {\n                           ^^^^^^^^^^^ property maxSize. Property not found in\n                                    v\n139:             return this.extend({\n140:                 style: this.style.text(),\n141:                 size: size,\n142:                 textSize: size,\n143:             });\n                 ^ object literal\nError: Options.js:158\n                        v------------\n158:             return this.extend({\n159:                 style: style,\n160:                 size: wantSize,\n161:             });\n                 -^ call of method extend\n 88:     extend(extension: OptionsData): Options {\n                           ^^^^^^^^^^^ property maxSize. Property not found in\n                                    v\n158:             return this.extend({\n159:                 style: style,\n160:                 size: wantSize,\n161:             });\n                 ^ object literal\nError: Options.js:169\n                    v------------\n169:         return this.extend({\n170:             color: color,\n171:         });\n             -^ call of method extend\n 88:     extend(extension: OptionsData): Options {\n                           ^^^^^^^^^^^ property maxSize. Property not found in\n                                v\n169:         return this.extend({\n170:             color: color,\n171:         });\n             ^ object literal\nError: Options.js:169\n                    v------------\n169:         return this.extend({\n170:             color: color,\n171:         });\n             -^ call of method extend\n 88:     extend(extension: OptionsData): Options {\n                           ^^^^^^^^^^^ property style. Property not found in\n                                v\n169:         return this.extend({\n170:             color: color,\n171:         });\n             ^ object literal\nError: Options.js:178\n                    v------------\n178:         return this.extend({\n179:             phantom: true,\n180:         });\n             -^ call of method extend\n 88:     extend(extension: OptionsData): Options {\n                           ^^^^^^^^^^^ property maxSize. Property not found in\n                                v\n178:         return this.extend({\n179:             phantom: true,\n180:         });\n             ^ object literal\nError: Options.js:178\n                    v------------\n178:         return this.extend({\n179:             phantom: true,\n180:         });\n             -^ call of method extend\n 88:     extend(extension: OptionsData): Options {\n                           ^^^^^^^^^^^ property style. Property not found in\n                                v\n178:         return this.extend({\n179:             phantom: true,\n180:         });\n             ^ object literal\nError: Options.js:187\n                    v------------\n187:         return this.extend({\n188:             font: font || this.font,\n189:         });\n             -^ call of method extend\n 88:     extend(extension: OptionsData): Options {\n                           ^^^^^^^^^^^ property maxSize. Property not found in\n                                v\n187:         return this.extend({\n188:             font: font || this.font,\n189:         });\n             ^ object literal\nError: Options.js:187\n                    v------------\n187:         return this.extend({\n188:             font: font || this.font,\n189:         });\n             -^ call of method extend\n 88:     extend(extension: OptionsData): Options {\n                           ^^^^^^^^^^^ property style. Property not found in\n                                v\n187:         return this.extend({\n188:             font: font || this.font,\n189:         });\n             ^ object literal. I've switched to T | void for nullable types, but this still doesn't allow color?: string in OptionsData.\nIn Options.extend, data must be compatible with the type OptionsData in order to be passed into new Options(data), but if this.color is of type ?string, you cannot assign it to property color of an OptionsData, which must have type string. The same applies for font.. Yeah; it doesn't seem like style could be made optional because Options.havingCrampedStyle and Options.havingSize both use style without null checks.. ",
    "dbieber": "I was exploring. I had Bon Chon recently, so naturally I was thinking about KaTeX and spans.\nI was also looking to maybe contribute so I was investigating adding square roots. And this lead to my comment above. I'm also starting at Google App Engine on Monday so I imagine most of my mental effort will be going into that in the short term. Also I'm in Mountain View now. Hi!\n. OK! Ready to merge.\n. Sorry for opening two 1 character pull requests. There was a third I was going to make (capitalizing Huxley) but I felt like I was being more annoying than helpful so I posted this comment instead.\n. ",
    "lidel": "I would love to see this. Hybrid approach may be a neat workaround for the lack of some environments (such as #47)\n. ",
    "GlassGhost": "https://github.com/Khan/KaTeX/issues/100#issuecomment-56699201\nIs my current working solution, however I don't know where to put this into your distribution.\n. @xymostech Thanks for the help, I will file a separate feature request for utf8 support for \\text{} tex commands. But you do agree, the documentation should provide some example code to get katex to automatically work on the entire page?\n. @kevinb7 Thanks for the try . . . catch code, my javascript is rusty. BTW I figured out to apply it to the tex html tags by using getelementbytagname and innerhtml javascript functions and have updated the gist accordingly, but I'm still having trouble moving the script away from the bottom of the page. Care to take a look? putting at the top of the page or in an external file would look cleaner I think.\n. @kevinb7 @xymostech UPDATE: Got everything working but the utf8 support for \\text{} tex commands. \njust using a tex tag <tex>\\displaystyle c = \\pm\\sqrt{a^2 + b^2}</tex> and import katex.onload.js\nas shown in test.html\n. @kevinb7 wow we did that at the same time.\n. I would like to leave this issue open until the README is showing a solution(not necessarily mine) for future users who may experience my problem.\n. ",
    "soc": "\nIf anyone sees this and wants this feature, please comment here!\n\nI'd like to see this, too, especially 2)!\nIt would be very helpful if KaTeX could easily replace MathJax this way.\n. ",
    "curiositry": "I\u2019m using MathJax on Alegebrarules.com and Automathic, and it\u2019s incredibly slow. \nI\u2019d like to switch to KaTeX as soon as possible \u2014 this is what I\u2019m waiting for. Keep up the good work!\n. ",
    "aprescott": "I'd like this feature, although I'm curious how it would affect the synchronous rendering of the page if at all?\n. ",
    "devon": "for question 2, maybe a given element (p, div) instead of whole page is more flexible.\n. Yes, it's a dup of #26, I search before submit this issue, but didn't find out.\n. We cannot add letter on the top of rightarrow? Am I right?\nYes, \\xrightarrow is AMSMath symbol. You have to add amsmath plugin when use mathjax. \nIt should be great if KaTex support this symbol.\n. ",
    "murkle": "\\textcolor{#aaee00}{hello world}\nworks in JLaTeXMath and (our fork of) MathQuill so would be nice to have if possible.\nThanks :)\n. \\fgcolor{#ff0000}{some text}\n\\bgcolor{#ff0000}{some text}\nAlso work in HotEqn http://vclab.atp.rub.de/software/HotEqn/HotEqn.html, JLaTeXMath and (our fork of) MathQuill\n. ",
    "adammark": "Yes and yes. Some thoughts here:\nIt would be nice to have the ability to set background colors or other styles that don't affect the geometry of the output, e.g.:\n\nPresumably, this is best done with a wrapper element having a class name, ID, or both. For example:\nhtml\n<span class=\"my-highlight-class\" id=\"my-highlight-id\">\n  <span ...>4</span>\n  <span ...>5</span>\n  <span ...>6</span>\n</span>\nAs a bonus, this would allow authors to add interactivity by attaching event listeners to parts of the expression. For example, a tutorial might ask users to \"click on the denominator in the following expression.\" Or, parts of the expression can be highlighted in sync with audio narration. Etc.\nI haven't completely thought through the implementation details\u2014curious to know your thoughts here. It could be done with a macro/extension, e.g.:\n\\span{.my-class #my-id}{456}\n... or simply by allowing literal markup in the expression:\n\\literal{<span id=\"denominator\">}456\\literal{</span>}\nBoth approaches might be useful.\n. Thanks, done.\n. ",
    "joyrexus": "@murkle @adammark Note that you can apply color styling with \\color:\n\\color{#F90}{some text}\nFor more flexibility in styling see PR #119 which implements \\cssId and \\class.  Having these unified as \\span is a neat idea.\n. ",
    "konn": "Why is this yet unimplemented?. > which leads me to believe that we can absolutely position the tag to the right.\nIn some document class, we can specify leqno option to place tags (and equation numberings) on the left.\nFor example, \ntex\n\\documentclass[leqno]{article}\n\\usepackage{amsmath,amssymb}\n\\pagestyle{empty}\n\\begin{document}\n\\[\n \\int_{-\\infty}^{\\infty} e^{-x^{2}} \\mathrm{d}x = \\sqrt{\\pi} \\tag{\\ensuremath{\\star}}\n\\]\n\\end{document}\nresults in:\n\nSo, it might be appropriate to provide the option to specify tag/numbering position.. Great news! Thank you for your rapid support!. > I don't understand what you mean by your three rules though. \\href should not be setting class, should it? Isn't that the purpose of \\class (see #90)?\nWell, if you don't specify any math-type via class of an anchor tag, you get the different spacing behaviour than latex's default.\nConsider the following input:\n```latex\n\\documentclass[a4]{article}\n\\usepackage{hyperref}\n\\usepackage{amsmath,amssymb}\n\\begin{document}\n$0 \\href{http://en.wikipedia.org/wiki/Equals_sign}{=} 1$.\n$0 = 1$.\n\\end{document}\n```\nIf you typeset the above by xelatex, lualatex (or latex + dvipdfmx with dvipdfmx argument for hyperref package), you get the following result, with the upper equals-sign linked to Wikipedia:\n\nHere, we see that both \\href'ed version of = and plain = result in the same spacing.\nOn the other hand, if we drop the math-type handling in KaTeX, we get the following result:\n\nSo, to get the same spacing adjustment, we have to set a class of anchor tag to mord, mrel or so.\n\nIsn't the second argument of \\href treated as if it's in \\text? You should be able to use code similar to \\text, \\raisebox, etc. which switch to text mode.\n\nAs above, LaTeX's (more precisely, hyperref's) \\href commands accept a math as its second argument, not only text. So we can't treat them as if they're in \\text.. @edemaine Yes. I think it\u2019s ready.. @kevinbarabash No problem, thank you for your review!\n\nThis could also use some unit tests to verify that \\hrefs parse and don't parse in the expected way, see katex-spec.js. Also, it'd be nice to have a snapshot test for the MathML that we're outputting, see mathml-spec.js (running npm test -- -u will update the snapshot file).\n\nOK, I will try to write some unit-tests.. OK, I've just added unit-tests and snapshot tests. I also found that the previous version doesn't treat nested braces correctly, so I fixed this issue.. @kevinbarabash Is there any time to look into this?. Thanks!. @edemaine Thank you for your rapid reply!\n\nGiven how similar aligned and alignat are, do you think the code could be shared between the two? You can list multiple functions in defineFunction, then branch within the code (adding space only when in aligned mode, say).\n\nI think they can share code. I will try.\n\nAnother question: if I understand correctly, alignat can appear only in text mode, whereas alignedat is the equivalent within math mode. If this is correct, I think you are implementing the latter (in the same way that KaTeX currently supports aligned but not align) and it should be renamed accordingly.\n\nAh, I overlooked alignedat environment. Yes, this should definitely be that.\nAnyway, I will resolve these soon. Thanks!. I've just renamed alignat to alignedat and factored out duplicated code.\nI couldn't find the way to vary the numArgs in one defineEnvrionment block, so I create new local function alignedHandler for that purpose.. @kevinbarabash OK, I've just added a code fragment for screenshot testing. Unfortunately, I couldn't run docker image appropriately and couldn't get the diff.. OK, finally here comes the screenshot diff of alignedats:\n\nIt seems that KaTeX renders alignedat appropriately.\nBy the way, it seems that KaTeX fails to render aligned environment correctly, even before this pull req is applied:\n\nShould we fix this in a separate pull request, or within this pull req?. @kevinbarabash Thank you for everything!\n\nSince it's an existing issue a separate PR is appropriate. Can you open a new issue for this?\n\nOK, I've just separate this as Issue #941.\n\nI'm going try to review this later this week.\n\nThanks!. Just to caught up with master branch, I've just made a little rebasing on this PR.. @kevinbarabash No problem. Thank you again!. Oops, it seems that I created the pull request on wrong branch... Sorry, I will re-create it.. Oops, I forgot to remove them. Just deleted!. > Since we're adding href to attributes in the constructor shouldn't the loop below that adds all other attributes also add this one?\nAh, yes, that's right.\nAnd I mistyped anchor instead of href above, and this mistakenly prevents the duplication of href attribute. I must fix this.. Neat! I will adopt it.. It seems that the first argument of \\href will be treated as if it's inside verbatim, but both \\href{http://en.wikipedia.org/wiki/Equals\\_sign}{=} and \\href{http://en.wikipedia.org/wiki/Equals_sign}{=} generate the same link to Wikipedia.\nIn the current implementation, it rejects \\href{http://en.wikipedia.org/wiki/Equals_sign}{=} and accepts \\href{http://en.wikipedia.org/wiki/Equals\\_sign}{=}, but it links to http://en.wikipedia.org/wiki/Equals/_sign instead of http://en.wikipedia.org/wiki/Equals_sign. So it might be appropriate to create new argument type url for proper parsing, as @edemaine said.. Oh sorry. This naming convention is one of the bad habit of Haskellers... I will make them more readable.. I didn't notice that. In that case. I will add the code to handle that case and default to mord.. This seems much more appropriate. I will reflect it.. At least in Safari 11.0.1 (13604.3.5) on macOS High Sierra 10.13.1.. Thanks. Template literal looks nicer!. I will adopt template literal also here.. Oh, I should elaborate on it. The third case we insert a kind of glue, with the first one having the same class as the first element of body and the second one the same as the last. I will add this description.. Exactly. I will drop this clause.. Oh, yes. It makes program much simpler. Thanks.. Oh yes, it was really confusing expression. I will replace them.. Exactly. I will define new chooseMathStyle function.. Sure. I've just combined them into one, and here is the result:\n\n. ",
    "zgotsch": "In KaTex, there are \\nolimits to what you can do!\n. ",
    "spott": "I'm not sure where this goes... (there is an organization that I'm not sure of).  But the following is the code that I think would need to be added somewhere:\n\"\\\\partial\": {\n            font: \"main\",\n            group: \"mathord\",\n            replace: \"\\u2202\"\n        },\n. ",
    "felipellrocha": "It sounds like to me supporting both would be ideal. Order of priority would be, native, configuration, inline. Where native functions would get loaded first, overwritten by configuration, overwritten by inline. That way I could experiment inline (it just doesn't render anything on the page), and once I'm comfortable with that, I'd move things to the configuration side.\n. Though I still think a disabling option should be added for inlines, I think in latex, officially, you should only overwrite a defined macro if you use \\renewcommand and \\renewenvironment. If the user is using one of those two, they probably know what they're doing.\n. ",
    "ylemkimon": "Please note that \\newcommand support has been added in #1382.. Closing as it warns quirks mode (https://github.com/Khan/KaTeX/commit/ea5ee95dbec689953c35fa552e1170061a8a945d) and #661 is fixed.. Please open a new issue if the problem still exists.. @kevinbarabash With strict mode in work, I think we can revisit this and consider enabling them in non-strict mode instead of contrib.. Is this still an issue?. It seems KaTeX rendering speed and performance have been greatly improved, and the nested \\sqrts render instantly. If this is still an issue, please reopen the issue. Thank you!. Closing as #295 is merged.. Closing as the issue seems to be fixed. Please reopen the issue if the problem still exists.. Documentations regarding exceptions were added in #1161.. @edemaine Maybe we can provide multiple examples of configurations and usages.. There is also https://github.com/Khan/KaTeX/network/dependents, but I don't know how to sort it.. @kevinbarabash I couldn't find a square logo and logo/trademark guidelines for Khan Academy, so I've placed GitLab logo as a placeholder. I didn't expect the PR to get merged soon. \ud83d\ude04. Shouldn't KaTeX follow amsmath behavior?. Closing as auto-render extension now supports passing options to KaTeX. See https://khan.github.io/KaTeX/docs/autorender.html for more detail.. There is copy-tex extension, which puts LaTeX source code to the clipboard when rendered equation is copied. Also, in the extension, there is katex2tex.js, which extracts LaTeX source from rendered KaTeX element. You can use it to implement appropriate LaTeX source viewing method.. Closing as we now have typed ParseNodes. Please reopen the issue if it still needs refactoring.. If this is still an issue, please reopen it. Thank you!. v0.9.0 was released recently, which includes multiple PR regarding frac lines. Could you check this is still an issue?. Closing this issue due to inactivity. If the bug still persists, please reopen the issue. Thank you!. Closing in favor of #1462.. > A bigger problem is that any new function will also require code in buildHTML.js and buildMathML.js to generate the correct markup.\nWouldn't it be enough to import and use functions from main KaTeX source?. But it still seems to need functions like  buildExpression, buildCommon.makeFragment, buildCommon.makeSpan, etc. And I was thinking rather than exposing them to the public API, a plugin can import them from the source and be built with KaTeX.. I thought only a small portions of KaTeX is required, but it turns out that most of it is needed. Maybe use a module loader?. HTML tags are not LaTeX, so it will not render if given to KaTeX. Also, we have an open issue to track adding currency symbols like \u20b9 in #1107 and https://github.com/KaTeX/katex-fonts/issues/18. Please feel free to ask or open new issue if you have any other questions.. @kevinbarabash I'm excited to see the new organization is in action!\nIt seems a Gitter chat room should be manually created and Greenkeeper may not work. Also the screenshotter GitHub app need to be reinstalled.. IMHO, (La)TeX is de facto standard for writing and rendering math equations, at least in science and mathematics. Compare\nlatex\nx = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\nwith\nxml\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n <mi>x</mi>\n <mo>=</mo>\n <mfrac>\n  <mrow>\n   <mrow>\n    <mo>-</mo>\n    <mi>b</mi>\n   </mrow>\n   <mo>&PlusMinus;</mo>\n   <msqrt>\n    <msup>\n     <mi>b</mi>\n     <mn>2</mn>\n    </msup>\n    <mo>-</mo>\n    <mrow>\n     <mn>4</mn>\n     <mo>&InvisibleTimes;</mo>\n     <mi>a</mi>\n     <mo>&InvisibleTimes;</mo>\n     <mi>c</mi>\n    </mrow>\n   </msqrt>\n  </mrow>\n  <mrow>\n   <mn>2</mn>\n   <mo>&InvisibleTimes;</mo>\n   <mi>a</mi>\n  </mrow>\n </mfrac>\n</math>. Sorry, I got confused with the input and the output. But as @edemaine and @kevinbarabash said, its syntax is very limited and styles or polyfills cannot be (easily) controlled.\n\nRegarding the original issue, we can investigate Speech Rule Engine (SRE), which can translate MathML to speech strings, and MathJax uses it in the accessibility extension. (Related: #457) I've tried it and it successfully converts KaTeX MathML output. The problem is, AFAIK, there is no way to provide an alternative text/description of elements with contents, such as <div> and <span>, for screenreaders.. Closing as most of handlers are moved to functions/.. @kevinbarabash It cannot concat core-js as they are not ES6 modules. But it seems it successfully concats our source files.. Regarding babel-runtime\u2019s helpers, there will be an option to use ES6 modules in Babel 7.. @kevinbarabash \n\nAre you saying that in Babel 7, babel-runtime's helpers are defined as a ES6 modules? Babel 7 is still in beta. We could give it a try to see if that fixes the issue, but we should probably hold off on actually upgrading until Babel 7 gets out of beta.\n\nYes, and AFAIK there are some discussions making core-js polyfills ES6 modules, too. I'm constantly trying out Babel 7 with KaTeX, and it seems it'll be easy transition.\n\nIf we can get ModuleConcatenationPlugin working that would be preferable.\n\nI've tried #1403 out, and it seems most of modules get concatenated. You can search for CONCATENATED MODULE comment in the unminified version to see which modules are concated. However, the minified size is 248 KB, slightly bigger than rollup.. Closing as all codes are now ES6 module and all polyfills are removed and linted against.. This is because built files are not committed on the master branch. To use the clone of KaTeX, it needs to be built:\nsh\ngit clone https://github.com/Khan/KaTeX\ncd KaTeX\ngit submodule update --recursive --init\nnpm install\nnpm run build\n./cli.js\nThere are ways to transpile(build) the project, on the fly(runtime) like babel-register, but this increases runtime overhead.\nI think this issue would be wontfix.. @edemaine We still disableHostCheck = true, however it seems that webpack-dev-server CLI has localhost as default value for host. I'll send a PR setting the host to 0.0.0.0, and meanwhile you can do npm start -- --host 0.0.0.0.. Does webpack 3 fixes this issue?. @schober-ch \n(i) The version including PR #1068 has not been released yet, so you have to manually build the source.\n(ii) As of #1068, auto-render uses only ES6 import/export syntax, so https://github.com/webpack/webpack/issues/4039 will be no longer an issue.\n(iii) It's preferable to use dist files(built distribution files), i.e., dist/contrib/auto-render.js, and it's in UMD(universal module definition).. A simple description about snapshot testing and a link to the documentation was added in #1146, and a npm script to update them was added in #1009.. @edemaine They're in the dockers/Screenshotter/README.md, but it'll be nice to have a centralized place.. @daniellimws Actually, tagged (release) commit has it, e.g., https://github.com/Khan/KaTeX/tree/v0.9.0/dist. And you can display the size of katex.min.js of v0.9.0, for example, like:  ![](http://img.badgesize.io/Khan/KaTeX/v0.9.0/dist/katex.min.js).. On Windows, Git symlink does not work. You have to manually create a symlink by mklink /J static\\fonts X:\\absoule\\path\\to\\submodules\\katex-fonts\\fonts. (EDIT: The target should be absolute path). How about moving fonts.less to the submodule(KaTeX/katex-fonts)? I think it makes sense since fonts.less is importing font files and it should be version-controlled with them. Also it can be auto-generated using buildFonts.sh.. Is there any specific reason using make(Makefile) for build?. I'd like to work on this issue, if you don't mind.. @kevinbarabash Currently Travis seems to be not working and backlogged.. @kevinbarabash \n\nWhy is it a partial fix?\n\nAs static/main.js is not handled by webpack, it's not watched and doesn't reload if changed.. Updated PR description \ud83d\ude04 . @kevinbarabash Yes \ud83d\ude04 . @rrandallcainc As an element ID should be unique, I think it should be applied to the enclosing span.. @rrandallcainc \n\nSince there are two separate entry points (contrib/html, and katex) which both share common KaTeX code, you use the CommonsChunkPlugin to extract the KaTeX specific code into its own chunk, which these two entry points can share.\n\nThe common codes(KaTeX specific codes) are extracted to the katex module, where they were originally, so KaTeX codes are left in the katex module.\n\nThis ensures that there's no code duplication, and contrib/html can leverage common katex code. Is that correct?\n\nYes.\n\nIn other words, I think this change is dependent on the webpack config. If an outside user wants to plugin their own custom function, would they need to create a webpack config to allow them to do so?\n\nYes, the developer has to have KaTeX sources and add an entry to the webpack config to build a plugin. It will be like a SDK and maybe we can provide a boilerplate.\n\nIt feels a little odd that some of this logic lies outside of the source (like this), but other logic needs to lie within the source (like Parser/types). That being said, I'm not sure there's a better way to implement it at this time without a major change.\n\nI'm thinking of adding defineGroupParser function, which add custom group parsers to the Parser's parseGroupOfType like below.\nI think with defineGroupParser, defineFunction, defineMacro, defineEnvironment, most of features can be implemented without changing KaTeX's sources.. @kevinbarabash Done.. @rrandallcainc I think we can provide a boilerplate plugin.. @rrandallcainc Yes, if we use single span, we can just set the id of it.\n\nBlocked on #1103.. @kevinbarabash Sorry, I was on a trip \ud83d\ude04 This is still blocked by spacing issues like #1108 and #1154.. Are you using Mac? I wasn't able to reproduce the issue on Windows and Linux. Also, could you let me know what version of webpack-dev-server are you using?. On Mac, katexIP is set to *any* in guessDockerIPs():\nhttps://github.com/Khan/KaTeX/blob/732f2a84ccb000099d29fb1f61dd02e611fab64b/dockers/Screenshotter/screenshotter.js#L153-L158\nThis causes following lines to run in findHostIP():\nhttps://github.com/Khan/KaTeX/blob/732f2a84ccb000099d29fb1f61dd02e611fab64b/dockers/Screenshotter/screenshotter.js#L321\nwhereas on Windows and Linux, it doesn't reach above:\nhttps://github.com/Khan/KaTeX/blob/732f2a84ccb000099d29fb1f61dd02e611fab64b/dockers/Screenshotter/screenshotter.js#L310-L317\nThe devServer is intended to be a webpackDevServer instance, which has an Express application as app property.\nInstead, the return value of webpackDevServer.listen(), an instance of http.Server, was assigned to devServer in startServer():\nhttps://github.com/Khan/KaTeX/blob/732f2a84ccb000099d29fb1f61dd02e611fab64b/dockers/Screenshotter/screenshotter.js#L199-L202\nThis caused TypeError: Cannot read property 'get' of undefined on running the screenshotter on Docker for Mac.\nI should've tested on the Mac, and apologize for any inconveniences it has caused.. What do you think about enabling loose option on babel preset? (Related to #850). @kevinbarabash \nIt seems that I cannot get CommonsChunkPlugin to work with HMR.\nSo the separate entry point/bundle has to include the KaTeX module, which increases build time <1s and memory usage around 10 MBs.\nAnother option is to call reprocess in the KaTeX entry point(katex.webpack.js) and it only would increase unminified distribution file(dist/katex.js) by few bytes, but we have to have reprocess as global and it will not support HMR of main.js and main.css.. @kevinbarabash Thank you for the review and merge.\nI\u2019ll try to find a way to avoid creating two big chunks.. @kevinbarabash Yes, and if you don\u2019t mind, yes, please. Though, I\u2019m not sure what is best way to add spacings recursively for \\href and \\class in #1074.. - [ ] Won \u20a9\n- [ ] Lira \u20ba\n- [ ] Yuan \u5143\n- [ ] Baht \u0e3f\n- [ ] Other currency symbols on Wikitionary. CC @kevinbarabash . I think the word demo is more familiar.. The number 3 will be fixed by #1214.. The v0.9.0-beta1 was released a few hours ago. Could you try it?. @soichih I think you are using the new version of KaTeX CSS, but old version of KaTeX JS.. I think using all lowercases with hyphen or underscore as a seperator is better. There are some file systems which have case-insensitive filename and it prevents from inadvertently using two files which differ only in case. Also it\u2019s easier to write a hyphen than an uppercase letter, though this depends on the keyboard layout.. https://github.com/Khan/KaTeX/blob/4a87f38e1a9f74883723a0aebce2fb91f1464863/src/symbols.js#L722-L736\nShould they be allowed in the math mode when unicodeTextInMathMode == false?. I think extraLatinMath can be removed as it's in unicodeSymbols.js and #1125 was merged.. Following paths need to be updated:\nhttps://github.com/Khan/KaTeX/blob/95d5c59d31a77c8d43d85fbc98bd26d4914ca5d3/package.json#L58\nhttps://github.com/Khan/KaTeX/blob/95d5c59d31a77c8d43d85fbc98bd26d4914ca5d3/Makefile#L34. Since git 2.13, we can use --[no-]recurse-submodules in git-checkout.. @edemaine We can add hooks to post-merge and post-checkout.. chaitanyagupta/gitutils/submodule-hooks(MIT-licensed) seems to provide nice scripts for git hooks to work with submodules.. I think we can remove make metrics(and eventually remove Makefile, #1121) or call buildMetrics.sh in:\nhttps://github.com/Khan/KaTeX/blob/7b635f79cfc28c46dcbf814d47f6977e6712797b/Makefile#L84-L85. There is an Alphabetical List of TeX Commands available in MathJax. Maybe we can use it to build a list of missing features and compare with MathJax.. I think we can provide font metrics data in similar manner to #1074.\nhttps://github.com/Khan/KaTeX/pull/1074#issuecomment-362783568 by @kevinbarabash \n\nI wonder if you had any thoughts about how we might allow plugins/extensions to add fonts and font metrics. I looking into generating Cyrillic fonts. If we add support for more scripts with fonts and metrics it would be nice to allow people to load only those which they think they might need.. Can\u2019t this be done like functions/accent.js?. Firefox\n\nBinomTest-firefox.png\n\n\nFractionTest-firefox.png\nChrome\n\nBinomTest-chrome.png\n\nFractionTest-chrome.png. @kevinbarabash Yes\n\nThere is a react component that is developed and used by Khan Academy in Khan/react-components/js/tex.jsx (Demo).. Firefox\n\nLap-firefox.png\nChrome\n\nLap-chrome.png. It\u2019s both KaTeX, where red is master branch and green is this PR.. @kevinbarabash Yes, it's just an output of the screenshotter.. It seems that it is correctly rendered in the diff, but not in the generated screenshot on Firefox.. What do you mean by tests: local tests or CI tests?. Firefox\n\nRaise-firefox.png\nChrome\n\nRaise-chrome.png. @kevinbarabash CircleCI has to be manually enabled for PRs from forked repo in the Build Settings(Build forked pull requests):\n\n. How about using error levels:\n0 - suppress all errors, instead print LaTeX source code, this PR's behavior when !throwOnError\n1 - suppress unsupported command error, current behavior when !throwOnError\n2 - throw all errors, current/PR behavior when throwOnError. @kevinbarabash A user may want to implement custom error handler, but in the custom error handler, it cannot access KaTeX internals, i.e., if it's unsupported command error print the plain command name. Though as you said, I'm not sure there are people want it.. This will also fix #475.\nRelated: #538. With #1226, I think we should have an error callback function(handler) and handle errors accordingly.. Now I think currently there is no way to access KaTeX internals, and custom error handler probably should be another issue/PR. Thank you for the PR!. It's little out of scope, but I think Github pages should be on a separate repo, i.e., katex.github.io on KaTeX organization, as main repo Git history can become large.. Also, I wonder if there are interests or needs for online demo(sandbox) for each build(PR and push), like Babel REPL, using build artifacts.. @edemaine AFAIK, Babel as mentioned above: https://github.com/babel/babel/pull/7450#issuecomment-369175564.. I think at least we need to migrate to NPM, as bower is deprecated.. Please note that the markdown version is now available in https://github.com/Khan/KaTeX/blob/master/docs/supported.md.. @kevinbarabash Done \ud83d\ude04 . You can use _.unescape from loadash or packages like unescape.. There is an open issue for adding various currency symbols: #1107.. @kevinbarabash Diffs and generated screenshots are available at Artifacts in CircleCI build page.. @kevinbarabash I agree the demo page should use latest release version.\nHowever, it may be useful to provide the demo for old versions(git tags) like https://khan.github.io/KaTeX/index.html?v=0.6.0 and preview for PRs like https://khan.github.io/KaTeX/index.html?pr=1187. And this can be done easily by using CircleCI build artifacts API.. There seems to be similar issues reported: https://discuss.circleci.com/t/if-you-expected-a-workflow-to-run-check-your-config-contains-a-top-level-key-called-workflows/16798/4. Could you try pushing a new commit? I think we should mention this bug at the documentation.. @kevinbarabash After a week of using CircleCI, following problems were discovered:\n1. Unlike Travis, CircleCI builds are tied to commits pushed to the repo, not PR merge commits generated by GitHub when a pull request is opened. As a result:\n~a. it tests the PR branch, not \"will this work if I press the merge button?\". So if the PR branch is out-of-date, the test result may differ.\nThis is worked around by either merging into the base branch before the test\u2014this assumes there is only one PR per a branch\u2014or constantly merging the base branch into the PR branch.\nb. another PR with same HEAD but different base branch report previous build results.~\nc. if CircleCI is enabled on the repo where the PR branch is, it is built on that repo and its results are reported.\n(Related: Feature request: Show test results for prospective merge of a Github PR). @edemaine I thought Update branch button was just for convenience. But,\n\nOnce you've set up required status checks, your branch must be up to date with the base branch before merging. This ensures that your branch has been tested with the latest code from the base branch. If your branch is out of date, you'll need to merge the base branch into your branch. (GitHub documentation)\n\nThen, 1-a and 1-b won't be much of a problem.. File permissions of package.json and package-lock.json seem to be changed.. 1. Could you post a screenshot?. I think it should be noted that it's ES6 feature, which may not be supported in IE and old versions, and it may not include ${, \\u, and \\x.. Related: #437. Is it possible to use datas from symbols from src/symbols.js?. > I think what @ylemkimon may have been getting at was that in symbols.js the call to defineSymbol links a latex command and its unicode character. It would be nice if we could use that information in delimiter.js instead of having to repeat the unicode character there as well.\nYes, that's what I meant \ud83d\ude04 Sorry for being unclear.. The console warns:\nkatex.min.js:1 No character metrics for '\u00b6' in style 'Main-Regular'\nkatex.min.js:1 No character metrics for '\u00a7' in style 'Main-Regular'. Font metrics don't seem to be updated after https://github.com/KaTeX/katex-fonts/pull/23.\nCC @kevinbarabash . @edemaine It's in the katex-fonts \ud83d\ude04. Related: #260. This will fix the original issue in #380, and partly #440 and #260.. It's in \ud83d\ude04. @edemaine Done \ud83d\ude04 . Related: #560. Also for the main (demo) page.. How about providing a settings preset? This way we don't have to add an extra setting which may be override others and an user can know and control what it does.. @kevinbarabash Not sure it's related, but why bold italic math font is commented out?\njs\n// .font-face('Math', bold, italic);\n(https://github.com/KaTeX/katex-fonts/blob/2b91a1cdd1c9f64c1333470d69dcb5362a215197/fonts.less#L52). @edemaine AFAIK, default LaTeX and KaTeX uses the same font as the text mode, Computer Modern Roman(cmr) and Computer Modern (Roman) Bold Extended(cmbx), for \\mathrm and \\mathbf, respectively.. khan/katex resolves to this GitHub repository and clones the master branch, which doesn't contain built files. (https://github.com/Khan/KaTeX/issues/894#issuecomment-404758297) You should grab release version from npm, i.e., yarn global add katex. (If you'd like to use development version, see previous comment and CONTRIBUTING.md for how to build the project.). There is ongoing discussions regarding allowing unsupported unicode symbols. Unfortunately, it doesn't support them yet.. > Visual confirmation:\nAre missing characters intentional?. > It also deletes the sans-serif characters. No one has asked for them yet, and it will be easier to add characters later than to remove them.\nI think there is no reason not to add sans-serif.\n\nOtherwise, I'm going to leave it alone.\n\nShould font commands other than \\mathit change its font, e.g., \\mathrm{\ud835\udd04} gives A?. Currently, \\mathrm{\ud835\udd04} seems to be rendered to upright roman A in the PR, since its logics are in mathit.. @kevinbarabash It has problems if CircleCI is enabled on the forked repo. It runs the build on its owner's CircleCI, and reports only one job. I'm not sure it's problem of CircleCI 2.0 or workflow feature.. @kevinbarabash What do you think about failing the build when it's on the forked repository, and documenting about it on CONTRIBUTING.md?. @kevinbarabash I think it can be done by checking environment variables. The test job will fail-fast if a pull request is open and the build is running on the forked repository.. Now I think, if we don't need #1244, I think going with option # 1 and removing screenshot tests from Travis may be better.. @kevinbarabash Travis CI not running on #1484 was probably because I've put [skip ci] to the commit message. But I agree Travis can be unreliable.\nRegarding CircleCI, https://github.com/Khan/KaTeX/pull/1484#issuecomment-406838051:\n\nThere were couple of instances of CircleCI Chrome build failing, that I'd to rerun manually. As the problems are limited to Chrome builds, I think it's not a CircleCI issue, but a Selenium issue and upgrading its version might fix the problems.. @kevinbarabash Should I remove Travis CI(.travis.yml)?. I'm personally against changelogs auto-generated from commit logs and/or merged pull requests.\n\nFrom keepachangelog.com:\n\nCan changelogs be bad?\nYes. Here are a few ways they can be less than useful.\nCommit log diffs\nUsing commit log diffs as changelogs is a bad idea: they're full of noise. Things like merge commits, commits with obscure titles, documentation changes, etc.\nThe purpose of a commit is to document a step in the evolution of the source code. Some projects clean up commits, some don't.\nThe purpose of a changelog entry is to document the noteworthy difference, often across multiple commits, to communicate them clearly to end users.. They seem to follow keepachangelog.com:\nAdded for new features.\nChanged for changes in existing functionality.\nDeprecated for soon-to-be removed features.\nRemoved for now removed features.\nFixed for any bug fixes.\nSecurity in case of vulnerabilities.. ~Is jsDelivr better than cdnjs and unpkg?~ It seems that cdnjs uses CloudFlare CDN.. To achieve the desired behavior, you should use \\operatorname*, which isn't supported in the KaTeX yet.. I'm +1.. Thank you for reporting! It seems that toMarkup() method, which produces a HTML string when renderToString is called, of an anchor had a problem, and it'll be fixed in #1246.. Possibly related: https://github.com/facebook/flow/issues/2723, https://github.com/facebook/flow/issues/2282. ~New Arrays screenshot for Chrome seems to be mis-rendered. Could you replace with this?~. The \\mathit should use text italic fonts, KaTeX-Main-Italic.. math font | alphabet / greek | number / Greek\n---------- | ----------------- | ---------------\n(default) | wide spacing(Math-Italic) | normal(Main-Regular)\n\\mathnormal | wide spacing(Math-Italic) | old-style / italic, wide spacing(Caligraphic / Math-Italic)\n\\mathit | narrow spacing / ?(Main-Italic / Math-Italic) | italic, narrow spacing(Main-Italic). Related: #584. @rokyed If you need \\mathnormal behavior for \\mathit, you can define a macro, \"\\\\mathit\": \"\\\\mathnormal\".. The release script only handles package.json and CDN links.. Only CDN links, which matches regex below, get replaced in update-sri.js:\nhttps://github.com/Khan/KaTeX/blob/0a2bd8878d0c7f5c386ef90aaf8434884910d6c5/update-sri.js#L29-L36\n\nYou can replace the version in the image URL just like above.. Unfortunately, it seems it doesn't support gzipped size. Also, should we show sizes of katex.css and fonts?. @daniellimws Yes, please.. @Paalon You should run git submodule update --init --recursive after checking out.. @edemaine Sorry, I was busy and missed the notification of the comment.. Thank you for the pull request! Could you separate code style fixes to another PR?. Closing in favor of #1536. Thank you for your contribution!. > I can't see visual diffs of the screenshot images in git anymore. Anyone know why that might be?\nGitHub has changed default diff for all file types to the source diff. You can view the image diff by clicking Display the rich diff:\n\n. You should update submodules after checking out, i.e., git submodule update.. Closing in favor of #1322.. Closing this as we're moving to CircleCI.. Yes, I have checked, though texlive-latex-extra contains many other packages not used. But I think it's fine.. @kevinbarabash CircleCI currently doesn't run npm test, which includes flow, but it will added by PR #1211.. MathQuill uses its own math rendering engine. If you are having issues regarding MathQuill, please open an issue at MathQuill issue tracker. Thank you!. Thank you for catching this \ud83d\ude04 . Sorry, I should've checked how much polyfill this generates.. @edemaine It itself is about 50KB. I think we should avoid using class inheritance until our target browsers natively support it. I've created a PR to use helper functions in #1469.. @kevinbarabash #1469 enables the loose mode. However, Babel's loose inheritance is still expensive, so I've decided to remove inheritances.. The commit Support Unicode \\ll and \\lll seems to be mistakenly committed into the master branch and preventing merge from KaTeX master.. Screenshots seem to be empty.. How about a major version release, i.e., v1.0? Do we have milestones for 1.0?. @kevinbarabash I meant moving the bot repo(https://github.com/ylemkimon/screenshotter-bot) to the KaTeX organization. That way, it's easier to maintain, and other people can easily review and contribute to the code.. @edemaine There is annotation feature in the check:\n\n\nI think Travis CI or CircleCI will support exporting results to CI.. I didn't know it was installed on the repo \ud83d\ude04 As it's running on my laptop, its uptime would be only when I'm debugging it or I forgot to turn off it after the debugging :). Blocked on https://github.com/ylemkimon/screenshotter-bot/issues/3 and https://github.com/ylemkimon/screenshotter-bot/issues/2.. The issues has been resolved and I think it's ready to be deployed. @kevinbarabash Can I transfer the bot repo's ownership to the KaTeX?. @kevinbarabash Done \ud83d\ude04 Please update the author/copyright information appropriately.. @kevinbarabash Yes, I'm willing to waive all my rights if necessary.\nAlso, it seems creating a GitHub app on the organization requires admin permission. Could you create a GitHub app and deploy the bot? (I think we can go with Zeit Now).. The bot is successfully deployed!. I forgot to enable Pull request permission and event subscription, which is needed for PR from forked repo. I enabled them and re-authentication may be necessary.. @kevinbarabash Thank you!. What version of KaTeX are you using? Also, do they support SVG?. Have you tried wkhtmltopdf or PhantomJS? I've only tested basic examples with KaTeX but they seem to work, and I've used them with MathJax and they work fine so it'll probably work with KaTeX.\nAlso, Chrome supports headless mode, so if resources are not a problem, it'll give the best results.. @zopyx wkhtmltopdf supports javascript. Though, KaTeX rendering itself doesn't require javascript. See https://github.com/Khan/KaTeX#server-side-rendering-or-rendering-to-a-string for more details.. I think KaTeX is light enough to run on mobile devices. Could you elaborate on too heavy to load data?. I think we can extract getBuilt and getParsed, parseAndSetResult and buildAndSetResult, toParse and toBuild, toNotParse and toNotBuild, toParseLike and toBuildLike into single methods, with a boolean parameter controlling whether to parse or build.. @edemaine I'll do it in another PR \ud83d\ude04. It seems that you have to be logged in with a account to view the artifacts. Click top right button() and click Log out, and log in with GitHub. Then you will see the organization name Khan upper left and be able to view artifacts.. @edemaine I think console outputs are noticeable enough. If we want to test that it doesn't produce warnings, we should use expect(expr).not.toWarn().. @kevinbarabash I'm planning to change functions to support tagging literals, e.g.:\njs\nconst x = r`\\KaTeX`;\njs\nexpect`\\def\\foo{1}`.toParseLike`1`;\nThere'll be no major changes to the test helper itself, so it is ready for review.. This is ready for review.. @kevinbarabash I agree. For review:\n- Test helper improvement: helpers.js, setup.js\n  - https://github.com/Khan/KaTeX/pull/1336/commits/b3dcf40b9025b25041d7561f4b1a6d8f07c42c0f (except around L221)\n  - https://github.com/Khan/KaTeX/pull/1336/commits/4e84e9397bcee78618b704a9bfa7d645e789be4b\n  - https://github.com/Khan/KaTeX/pull/1336/commits/4e387b896cfaf00320ae131aebe4e2409f9efb59 (minor)\n  - https://github.com/Khan/KaTeX/pull/1336/commits/f783eb845f1546c5416730f2f3a47299a81ea6aa\n- Test cases update:\n  - https://github.com/Khan/KaTeX/pull/1336/commits/b3dcf40b9025b25041d7561f4b1a6d8f07c42c0f#diff-ee8cb4a5b33e0ca875448106e9247be1L221\n  - https://github.com/Khan/KaTeX/pull/1336/commits/4250d060888a85d7cc9a7be1d905001887f93375\n  - https://github.com/Khan/KaTeX/pull/1336/commits/721f62f9e307d66aec4a2eaa7e0c96e3c0e9ab2e\n  - https://github.com/Khan/KaTeX/pull/1336/commits/96cdfa0b4075255f39fad4ac95d7962026921a14\n  - https://github.com/Khan/KaTeX/pull/1336/commits/4ad8dfdf73989bad4bdeb2f7646132c331c04196\n- Tagged literals:\n  - https://github.com/Khan/KaTeX/pull/1336/commits/17ca3840d2820fd1501a5b4d493f1a0771446a66\n  - https://github.com/Khan/KaTeX/pull/1336/commits/a8c91ebb6fb28a846e951484d08dd4932f15f134\n- Minor fixes(no semantic change):\n  - https://github.com/Khan/KaTeX/pull/1336/commits/6cdff3c854d3f1a0235e6083e9f7fe417fe1c68a\n  - https://github.com/Khan/KaTeX/pull/1336/commits/aeb5350fc2fa63835b7f3c659a5c8f6c00d3c38a\n  - https://github.com/Khan/KaTeX/pull/1336/commits/fc47230fb602a15637dfc688ce611a18fec1aeb7. @kevinbarabash \n\nI would expect getTree to call katex.render() and return the tree or clean up the stack trace and rethrow as necessary.  Then expectKaTeX can call getTree and we don't have introduce a special matcher just to make things work in this order.\n\nYes, I agree. My original intention was to reuse the error message from expectKaTeX and clean-up stack traces. However, now I think, they are not needed, they made codes unnecessarily complicated, and even  made errors hard to debug.\nI've removed getTree in f783eb8.\n\nI really like that we're supporting .not now, but this helper function has complicated the implementation quite a bit.  I'd rather have a few small helper functions that each of the toParse(), toBuild(), etc. call then a single function that tries to do it all.  Maybe we could add something format the message in addition to the function you added to clean up the stack trace.\n\nWith removing getTree, I think expectKaTeX became simple enough. Maybe we can extract expected string construction into separate function, like printActualErrorMessage?. >> With removing getTree, I think expectKaTeX became simple enough. Maybe we can extract expected string construction into separate function, like printActualErrorMessage?\n\nSounds good.\n\nDone in fc47230.. @kevinbarabash Thank you for the review!. How about:\nLevel | Scope | Macro definition in JS | in LaTeX\n----- | ----- | ---------------------- | --------\n0 | global(document, KaTeX instance) | builtinNamespace,__defineMacro | N/A\n1 | expression(function call) | settings.macro | \\gdef or \\def at the top level\n>2 | group(lazily instantiated) | N/A | \\def\n?. > I really don't like the idea of built-ins being modifiable by LaTeX code. This makes it difficult or impossible to isolate multiple LaTeX documents with the same KaTeX module. This would be an issue in any system with multiple LaTeX authors.\nNow I think, it isn't good idea. I didn't thought of server-side rendering, which may share single KaTeX instance, or single page containing multiple documents.. Thank you for clarifying a few things \ud83d\ude04 \nWhat do you think about having null-ParseNode, i.e., ParseNode<\"null\"> and returning it from Parser.parseFunction(), so that we can tighten maybe-ParseNode types and replace null check with NodeType check (at least for base of supsub)? I think allowing null or undefined may be bug-prone.. Thank you for the detailed explanation!. @kevinbarabash What do you think about automating dependency management, like Greenkeeper? It automatically sends in PRs and open an issue if it breaks the tests.. @kevinbarabash It is introduced in npm v6.\nWith #1368 and #1374:\n```\n                       === npm audit security report ===\nfound 0 vulnerabilities\n in 42827 scanned packages\n``. @kevinbarabash For an in-range update that breaks tests,Greenkeeperopens an **issue**, so one can open a pull request fixing the issue.\nFor an out-range update,Greenkeeperopens a **pull request**, and if it breaks the test, one can push fix commits to the PR branch(greenkeeper/`).\nI think there are two things to consider:\n1. Is it possible to exclude @greenkeeper[bot] from @khanbot's CLA checking?\n2. Do we need package-lock.json? Since greenkeeper tests for all in-range versions of dependencies, I think we don't need it anymore. Otherwise, we should enable greenkeeper-lockfile.. @kevinbarabash Unfortunately, there is no way to limit personal access token\u2019s access, but one can create a bot-dedicated account, which only have push access to one repository.\nThere is SSH deploy key, which grants access to single repo. However, since private key cannot be stored in the environment variable, file encryption and decryption (#1, #2) is required. Also greenkeeper-lockfile doesn\u2019t officially support SSH keys, but it\u2019ll probably work.. @edemaine I've created a separate PR for updating package-lock.json: #1378.. @kevinbarabash Yes, I think so. FYI, CircleCI provides an easy way to use SSH keys, i.e., use the deploy key instead of account token.. > I also had to revamp the testing infrastructure a bit to generate a new Settings object; otherwise, settings.macros gets contaminated between tests.\nHow about using Object.freeze? It prevents new properties from being added to it and prevents existing properties from being removed or changed, without an exception in non-strict mode. But I'm not sure how much overhead reusing Settings object will reduce.. Does this work with \\limits, \\nolimits, and \\hline?. I meant as they are directly handled by Parser.js and environment.array.js, they are probably not in functions and it may not expand macros before parsing them.(I haven\u2019t checked) So I was wondering, does  redefining them with \\renewcommand or using them in the macro definition work.. There seems to be also \\relax in MacroExpander.js. Will it be possible to remove either ParseNode.type or ParseNode.value.type? It seems duplicated.. This is probably because we have hackish way of detecting the host IP on Docker for Mac:\nhttps://github.com/Khan/KaTeX/blob/65569249be316362d2d8fca24b582dd003885c8a/dockers/Screenshotter/screenshotter.js#L326-L365. Could you try commenting out following:\nhttps://github.com/Khan/KaTeX/blob/65569249be316362d2d8fca24b582dd003885c8a/dockers/Screenshotter/screenshotter.js#L160-L165\n?. Unfortunately, IE9 doesn't support flex, and we should drop IE9 support first.. I was thinking the exactly same thing. Major projects like Babel, React, Jest, and many more already do this. And it can be easily done using tools like Lerna.\nI think we can move katex-fonts and possibly katex-test-fonts repo back to the main repo. And for consistency, I think we can have devserver and website under the packages, but exclude them from publishing.. Some thoughts:\nKaTeX/\n\u251c\u2500\u2500 .circleci/\n\u251c\u2500\u2500 docs/\n\u251c\u2500\u2500 devserver/\n\u251c\u2500\u2500 packages/\n\u2502   \u251c\u2500\u2500 katex/\n\u2502   \u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2514\u2500\u2500 test/\n\u2502   \u251c\u2500\u2500 katex-auto-render/\n\u2502   \u251c\u2500\u2500 katex-copy-tex/\n\u2502   \u251c\u2500\u2500 katex-fonts/\n\u2502   \u251c\u2500\u2500 katex-mathtex-script-type/\n\u2502   \u251c\u2500\u2500 katex-screenshotter/\n\u2502   \u2514\u2500\u2500 katex-texcmp/\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 check-node-version.js\n\u2502   \u251c\u2500\u2500 release.sh\n\u2502   \u2514\u2500\u2500 update-sri.js\n\u2514\u2500\u2500 website/. @kevinbarabash I wonder Khan Academy is still using Phabricator/Arcanist for KaTeX reviews. If not, we could remove .arcconfig, .arclint, and lint_blacklist.txt.. @kevinbarabash Thank you!. @edemaine I don't know exactly how \\let exactly works, but I think it can be achieved using snapshotting(cloning) MacroExpander. Since there may be at most 1 or 2 \\lets, I don't think there will be much overhead.. @edemaine @ronkok Too late, but we have \\lbrack and \\rbrack in symbols.js:\nhttps://github.com/Khan/KaTeX/blob/1dc261298ed327f7451095fe5ccf4e3dcc3ec589/src/symbols.js#L619-L620. @ronkok But with symbol definition, isn't macro definition redundant?. Too bad IE9 doesn't support CSS text-shadow property.. @ronkok Sorry, I've remove the label. (Anyway, #1454 is merged.) Would it be possible to control spacing at the buildExpression like enclosing class #1437?. Maybe we should publish a paper \ud83d\ude04 . Closing this as a won't fix. Please feel free to reopen or create a new pull request. Thank you for your contribution!. With required status checks and/or required pull request reviews enabled, commits cannot be directly pushed to the master, without a pull request. And I think this should be the right behavior, since it's the master branch.\nI think release workflow should involve at least two people, e.g.:\n\nOne runs the release script, which creates a branch, and opens a pull request\nAnother reviews the pull request, approves it, and merges it\nCI pushes the tag and deploys package to the NPM. #1 will be easy now, as we have website on the master branch \ud83d\ude04 Opened #1521.. @edemaine \nThe big thing would be to move to a PR model instead of directly touching master as the script currently does.\n\n\n\nThe current release script seems to support releasing from another branch. I've added detailed instructions in #1521.. #1511 still pushes the tag and publishes to the NPM(yarn publish) and to the GitHub pages(yarn publish-gh-pages), even running on another branch.. @edemaine If we're moving to a PR model, it'd be preferable to push the tag and publish to NPM and GitHub pages, after the PR gets accepted and merged. I think we can do this automatically using CI or manually using a flag.. @mbourne Latest release (stable) version documentation will be available at https://khan.github.io/KaTeX/docs/ and previous version, v0.9.0 for example, documentation will be available at https://khan.github.io/KaTeX/docs/0.9.0/. And if we decide to publish master documentation, they will be available at https://khan.github.io/KaTeX/docs/next/.. - [ ] CHANGELOG\n- [ ] Add check to the CI whether SRI has been changed\n- [x] SRI version\n- [ ] gh-pages protected. I think you're referring to #1287:\n\n[W]e break the outer katex-html into multiple base spans, splitting wherever a line break can be (in particular, right after top-level mop or mbin).  Each base span gets its own strut, which handles vertical spacing between lines properly.. @rrandallcainc ~Have you tried katex.__renderToDomTree?~ I think you need to directly access or expose buildExpression from \"./src/buildHTML\".. As most of macro expansions don't need to access KaTeX internals and defineMacro is already exposed, I think we can easily add plugins like mhchem!. @ronkok Another way is to check tokens' loc and pad with spaces.. What version of mhchem are you working on? I'm currently looking at v3.3.0 of mhchem, and it seems to be different.. How about:\n(i) create a repo, KaTeX-mhchem in @mhchem \n(ii) grant push access to some of KaTeX contributors\n(iii) set as a submodule under contrib/mhchem in the KaTeX repo\n?\n\nThis way, @mhchem has full control of the code and we can easily apply KaTeX changes to the extension and incorporate it into our build/release system. And when we have stable API and plugin architecture, we can just delete the submodule.. If no one has any preference, I think we can put them in this repo (KaTeX main repo) for a while.. @ronkok Thank you for your great contributions! It was a pleasure to work with you \ud83d\ude04. @ronkok I'm not sure how classes or ids can be abused, as styles are predefined.. @ronkok @ry-randall Another way of limiting their usage is allowing only those with specific prefix, like MathJax safe extension. What do you think?. I think we can go with RegExp | boolean, with default false. I'm afraid this will clutter settings, with a feature only few people will use. I think we should categorize settings and/or have a naming system.. Blocked on #1706 and #1711.. @edemaine Thank you for the review! I've added boolean argument to allow or disallow all protocols. I'm not sure about the function.. I think [\"*\"] is more consistent. Changed to [\"*\"].. I wonder this qualifies as a security vulnerability.. Could you upload whole equation?. @kevinbarabash v0.75.0 added the return type to RegExp.prototype.match(), which is Array<string> & {index: number, input: string} | null. I've created a PR removing match-at dependency in #1447.. How about adding a type string property?. Is this ready to merge?. Related: #175. @edemaine It is possible submit a merge request, a GitLab equivalent of pull request, for GitLab community edition at https://gitlab.com/gitlab-org/gitlab-ce/merge_requests. The KaTeX version seems to be maintained at package.json#L66.. Thank you!. Have you tried Chrome DevTools Protocol? It can directly communicate with Chrome, without need of installing extensions. Also, there is library like Puppeteer, which uses Headless Chrome.. @kevinbarabash I checked-out the branch by\nsh\ngit fetch Khan\ngit checkout -b greenkeeper/css-loader-1.0.0 Khan/greenkeeper/css-loader-1.0.0. @kevinbarabash css-loader v0.x included CSS minimizer, cssnano. However, as of v1.0, it no longer includes the cssnano and we have to run it directly using postcss-loader.. @kevinbarabash Yes, Babel (babel-preset-env), Autoprefixer (https://github.com/Khan/KaTeX/pull/1615#discussion_r210790077), and lint plugins (eslint-plugin-compat and stylelint-no-unsupported-browser-features) use the browserslist.. @kevinbarabash Originally GitHub supported only one issue template, a markdown(.md) file at issue_template.md or .github/issue_template.md. Now, as you said, it is possible to create multiple issue templates by using template builder or putting multiple files in .github/ISSUE_TEMPLATE/. > Is there a way to bypass the template?\nIf multiple issue templates exist, template selection page will be shown with open a regular issue button to bypass them:\n. @ronkok The array destructuring polyfill is expensive because it needs iterator(prototype[Symbol.iterator]) and Symbol support.\nThe < IE 9 part was intended for Object.freeze(). Sorry for the confusion.. @ronkok FYI, it'll not be polyfilled in Babel 7 loose mode. So it can be reverted when we upgrade to Babel 7.. @edemaine I scanned through htmlBuilders to find where ParseNode(group) was mutated. There was one place where ParseNode was temporarily modified, functions/op.js added by #1430. Other than that, it seemed ParseNode(group) is not touched.\nAlso, I've tested it by adding helper code to throw an error if tree was modified during buildHTML and running jest test suites.. @edemaine As it needs to access intermediate tree before building HTML, I've edited the buildTree function directly. I'm not sure of a good way to add this to the test helpers.. @edemaine Unfortunately, we're calling them together in the test helpers by calling katex.__renderToDomTree.. @edemaine It'd be nice to have some kinds of hooks system \ud83d\ude04. @edemaine I agree. But, to seperate documentFragement from HtmlDomNode, it seems that htmlBuilders that build documentFragment should be separated. I think this needs refactoring the type system and should be another PR.. @edemaine Thank you for the review!. @kevinbarabash Node 8.5+ supports ES modules with experimental-modules flag, but the file extension needs to be .mjs.. Another question is should we provide minified katex.mjs?. @kevinbarabash Then this is ready for review \ud83d\ude04 . @utensil Thank you for updating the site! We support following:\n \\begin and \\end\n \\global, \\def\n \\left and \\right\n \\S\n \\xtofrom\n \\xtwoheadleftarrow\n* \\xtwoheadrightarrow. @utensil \\left and \\right need to be paired. And \\S needs to be in the text mode, i.e., \\text{\\S}.. cli.js arguments seem to be outdated:\nhttps://github.com/Khan/KaTeX/blob/9783ac1466186504f823076c708c04473f8b6761/cli.js#L53-L59\n. @ronkok Please feel free to commit directly to the branch \ud83d\ude04 . @kevinbarabash There were couple of instances of CircleCI Chrome build failing, that I'd to rerun manually. As the problems are limited to Chrome builds, I think it's not a CircleCI issue, but a Selenium issue and upgrading its version might fix the problems.. @edemaine Yes. Also, docusaurus provides publish-gh-pages command, which automatically builds and deploys the website to gh-pages on CI environment.. @ronkok You can test the website by:\nsh\ncd website\nyarn install # or npm install\nyarn start # or npm start. @ronkok It needs built KaTeX(dist/katex.js). As #1500 is merged, if you pull latest merge commit(29e24c7), you can build KaTeX by npm run build at the root.. It seems there is a KaTeX plugin included in the RocketChat. You should enable the plugin on the RocketChat\u2019s settings(administration section). Please refer to RocketChat\u2019s documentation. Thank you!. In #1484, Docusaurus recommends using yarn, too.. @edemaine TTF and OTF would be still generated as woff and woff2 are generated from them. I was thinking removing them from KaTeX distribution and CSS.. I originally thought we can get rid of whole TTF build process, but it turns out we can't. This would be as simple as just setting @use-ttf: false;:\nhttps://github.com/KaTeX/katex-fonts/blob/a09ea0bbe0c6a7dd18118207449654f929388eba/fonts.less#L2. dockers/Screenshotter/screenshotter.js and test/symgroups.js also uses nomnom.. @edemaine Most babel plugins depend on the working directory(cwd) being the project root, where package.json and .babelrc resides. Maybe we should pushd the project root at the start of dockers/Screenshotter/screenshotter.sh and popd at the end.. Firefox:\n. npm scripts are messy and may contain redundant steps, as I directly translated the Makefile. I also agree having files at three place, build, build/katex, and dist, is redundant.\nI think we can change the build directory to dist and do not duplicate files:\nhttps://github.com/Khan/KaTeX/blob/74fb394bb576b6d5096f0c275f8957d99d7cd0e8/webpack.common.js#L66\njs\n    \"build\": \"npm run prestart && rimraf dist/* && webpack && cp README.md dist\",\n    \"dist\": \"npm test && npm run build && npm run dist:zip\",\n    \"dist:zip\": \"cd dist && tar czf ../katex.tar.gz * && zip -rq ../katex.zip *\", // make archives at the root\nI think having built files at build makes more sense, but it would introduce breaking changes to codes directly using ./node_modules/katex/dist/katex.js or CDN urls https://cdn.jsdelivr.net/npm/katex@version/dist/katex.min.js\nThis also would change archives(katex.zip and katex.tar.gz) structure, but I'm not sure there is anyone relying on this.\n~I'll open a PR.~ #1500. We really should move the fonts back to the main repo \ud83d\ude04 . @edemaine I\u2019m not sure how much font files bloat the repo. At most, they are few MBs. I\u2019ve seen repos storing static assets like images, videos, and audios without problems.\nBut if they bloat the repo, I think we can store only font files on another repo or use artifacts storage, like CircleCI build artifacts, possibly deployed using CI, as suggested by @kevinbarabash:\n\nI guess if we moved font creation into the main repo, we could avoid checking the built fonts in and instead grab the most recent artifact so that people don't have to build fonts themselves when doing KaTeX development.. @edemaine Thank you for the review!. This is probably one of reasons why NPM scripts exist. One can only run them from the root.. I wonder we should have a domain, e.g., katex.io.. I'll close this issue, as most of tasks are done. I've opened issues for remaining tasks that don't have separate issue.. Docusaurus supports documentation versioning: https://docusaurus.io/docs/en/versioning.. https://github.com/Khan/KaTeX/issues/1505#issuecomment-408504458 by @edemaine \nWhen we publish to gh-pages (which I guess we do every release, not every commit, so that we document the release not the master branch?), \n\nAnother question is should we document the master branch, i.e., publish the website(gh-pages) every commit?. @edemaine\n\nPerhaps we should start requiring updates to the document for each PR that affects it.\n\nI agree, I think documentations should be updated in the PR that adds a new feature.. It seems it comes down to three questions:\n\n1. Where we should we publish the website?\n KaTeX repo GitHub Pages, gh-pages branch (https://khan.github.io/KaTeX/)\n KaTeX organization GitHub Pages (https://KaTeX.github.io)\n* netlify (https://katex.netlify.com/)\n2. If we choose to use GitHub Pages, should we publish master(next) documentation to GitHub Pages? (Currently, it is published to netlify) Or should we have a link to netlify?\n3. If we choose to publish master documentation to GitHub Pages, where should we serve KaTeX from?\n Commit to GitHub Pages\n netlify\n CircleCI build artifacts with CORS proxy\n Third party object storage, i.e., AWS S3. @edemaine \n\ngh-pages means possible repo bloat, so should probably aim for CircleCI build artifacts. I'm not an expert on how easy this is to do. Two questions: for released versions, and for master branch?\n\nFor released versions, we can use KaTeX from CDN.\nFor master branch, CircleCI doesn't have CORS header set, i.e., doesn't allow accessing the artifacts from another site. Therefore, we should use (CORS) proxy, but I'm not sure there is free and reliable one. So probably we will have to use another object storage like AWS S3. Or we can use deployed files from netlify.\n\nKaTeX organization GitHub Pages avoids the bloat issue, so we can do whatever we want (so it's my leaning).\n\nKaTeX organization GitHub Pages is still a GitHub repo, which has size limits. I guess we can prune old histories regularly. I wonder how quickly the repo bloats.\n\nnetlify has its limits on network bandwidth etc. that I'm slightly worried about, but maybe shouldn't be. \n\nIt turns out that GitHub Pages also has similar limitations:\nUsage | GitHub Pages | netlify\n---- | -------- | --------\nStorage | 1GB (hard, recommended 1GB for repo) | 100GB (soft, total)\nNetwork Bandwidth | 100GB/month (soft) | 100GB/month (soft)\nBuild | 10 builds/hour (soft) | 180 builds/hour (hard). @kevinbarabash \n\nI think before we make any change to where the site lives it would be nice if we could secure a stable domain name for katex and switch to that first before changing where files are served from.\n\nSome ideas:\n katex.io\n katexjs.org\n\nAlso, since people are worried about bloat let's hold off on having multiple versions of the docs until we have a stable domain.\n\nVersioning (#1521) itself will not bloat the repo as it uses KaTeX from CDN.. js.org seems to provide free subdomains. So another option is katex.js.org.. I've opened several PRs, as I think it'd be easier to understand and decide with actual codes.\n[1] If we publish the main website to netlify, I think we can use local built CSS as it provides 100 GB storage.\n[2-0] If we publish the main website to GitHub pages (gh-pages branch or organization repo), we can commit local built CSS. And we can use CircleCI to deploy website every commit. (#1588)\n[2-1] But this may bloat the repo, so we can remove master (next) documentation from GitHub pages. (#1585) And maybe we can deploy only master docs, i.e., do not deploy versioned docs, to netlify (katex.netlify.com, #1587), put under subdomain, e.g., next.katex.io, and/or link to it.\n[2-2] Alternatively, we can serve KaTeX from another source such as netlify, CircleCI build artifacts using CORS proxy, or artifacts storage. (#1586) And we can use CircleCI to deploy website every commit. (#1588). Another question is should we use release (stable) version or master (latest) version for the main page.. @edemaine \n\nWe can also do a hybrid that uses GitHub pages in gh-pages but stores the built master files elsewhere (Netlify is probably the neatest idea there), but these seem overly complicated.\n\nI'm thinking of adding the ability to run previous versions or test a PR on the REPL (#1244), so it is eventually needed.. Now I'm against using js.org as we don't have control over DNS and subdomains.. @kevinbarabash Yes, it would limit us to GitHub pages or only production deploy of netlify. netlify uses subdomain for deploy previews, e.g., https://deploy-preview-1569--katex.netlify.com. Also if we choose to publish only release docs on the main website, we can serve latest docs on the next.katex.io, for example.. Now we've secured domain, restating the question:\nWhere we should we publish the (main) website?\n KaTeX repo GitHub Pages, gh-pages branch (https://khan.github.io/KaTeX/)\n KaTeX organization GitHub Pages (https://KaTeX.github.io)\n* netlify (https://katex.netlify.com/). @edemaine We need a DNS to point to the website. If we decide to use Netlify, we can use Netlify DNS. If we use GitHub Pages, I think we can use Cloudflare.\n. @edemaine Unfortunately, domain registrar's DNSes usually don't have uptime guarantees, many POPs, and an option for setting root domain CNAME (e.g., ALIAS/ANAME record, CNAME flattening). Cloudflare also has a free plan and it provides CDN (caching).. It seems the domain has successfully been transferred.. Now I think we can close this issue now. Thank you all for the great work!. @kevinbarabash Please check the publish directory is website/build/KaTeX.. @ronkok Thank you for the review! The excessive padding is because the table is vertically aligned by the baseline, vertical-align: baseline;. I'm not sure what is the best vertical-align for tables, though.. @edemaine Fixed! Thank you for spotting it.. @edemaine Done.. @edemaine Fixed \ud83d\ude03 . @edemaine We can run scripts to generate docs before building the docs like copying the files in #1520. I'll update the PR.. @edemaine Thanks for reviews!. The concern is commiting CSS and fonts may bloat the repo.. I think we can discuss in #1509.. @ronkok This PR only changes two lines of supported.md, so I think it'll be easy to resolve merge conflicts.. @kevinbarabash \n\nUsing build artifacts from Circle CI sounds nice. What's involved with a CORS proxy?\n\nSorry for late reply, I missed your comment. The build artifacts from CircleCI doesn\u2019t have CORS header set, i.e., allow loading from other domains. So we need a proxy like cors-anywhere or a third party object storage like AWS S3 to serve files with correct headers. However, I cannot find reliable proxy. So we need to setup a CORS proxy or an object storage.. I've separated supported functions documentation improvements into another PR, #1576.. @edemaine I think the shorter, the better. If you and @kevinbarabash don't mind, I'd like to set up the domain to arrange with ongoing PRs.. It seems there are some concerns regarding .io TLD: http://www.thedarksideof.io/.. Locking in favor of #1509.. @edemaine \n\nShould versions.json be checked in so that it gets added to over time?  (That's not part of the release script, it seems.)\n\nhttps://github.com/Khan/KaTeX/blob/6a551c1b0782eef3bcdd50b27eb111b1ba0c9bea/release.sh#L141-L142\nhttps://github.com/Khan/KaTeX/blob/6a551c1b0782eef3bcdd50b27eb111b1ba0c9bea/release.sh#L163\nYes, and they are checked in as whole website/ is checked in.\n\nDoes publish-gh-pages (for example) really load past versions of the Github repo and load the Markdown files from them to build versioned_docs?  Via tags or ...?\n\nyarn run version(docusaurus-version) clones current documentation(docs/) into website/versioned_docs/version-${version}, and they should be checked in, too. In other word, it stores all versions of documentation on the repo.\nFrom docusaurus documentation:\n\n[yarn run version 1.0.0] will preserve all documents currently in the docs directory and make them available as documentation for version 1.0.0.\nIf, for example, you ran the version script with 1.0.0 as the version number, version 1.0.0 is considered the latest release version for your project. The site will display the version number next to the title in the header. This version number links to a versions page that you created earlier.\nDocuments in the docs directory will be considered part of version next and they are available, for example, at the URL docs/next/doc1.html. Documents from the latest version use the URL docs/doc1.html.\nRunning the script again with yarn run version 2.0.0 will create a version 2.0.0, making version 2.0.0 the most recent set of documentation. Documents from version 1.0.0 will use the URL docs/1.0.0/doc1.html while 2.0.0 will use docs/doc1.html.\nVersioned documents are placed into website/versioned_docs/version-${version}, where ${version} is the version number you supplied the version script.\nThe markdown header for each versioned doc is altered by renaming the id front matter field to original_id, then using \"version-${version}-${original_id}\" as the value for the actual id field.\nVersioned sidebars are copied into website/versioned_sidebars and are named as version-${version}-sidebars.json.. @edemaine \n\nwebsite/node_modules and built files (website/build) will not be committed (checked in) to the master branch, as they are ignored by .gitignore:\nhttps://github.com/Khan/KaTeX/blob/fd6690b98871a4ef408d9bbf5a576311f3098399/.gitignore#L23-L25\n\nThe git add command will not add ignored files by default. If any ignored files were explicitly specified on the command line, git add will fail with a list of ignored files. Ignored files reached by directory recursion or filename globbing performed by Git (quote your globs before the shell) will be silently ignored.\n\nI've written git add website/ (https://github.com/Khan/KaTeX/pull/1521#discussion_r207258662) because #1520 is pending and we might update the CSS. Sorry for the confusion.. @edemaine By 'checked in', do you mean they are checked in to the gh-pages branch? If so, Git will not commit unchanged files from last revision. So if static pages and assets are not changed, only one copy will be stored.. @edemaine I think we should force developers to use Yarn to produce reproducible builds.. @edemaine \n\nI think you want to remove sudo npm install -g codecov from .circleci/config.yml.  And maybe replace codecov with npx codecov?\n\nOf course, I forgot \ud83d\ude04 Changed to ./node_modules/.bin/codecov.\n\nIncidentally, what is the point of CircleCI running codecov in the test job?  We're not requiring that it pass, and codecov/project is already running such a test and posting about it, right?  Can't we just remove this step of the job altogether?\n\nNo, codecov/project only reports the result. Individual CI like CircleCI is responsible for running tests and uploading the report. And now we're requiring test job to pass.. All urls are generated using baseUrl in siteConfig.js:\nhttps://github.com/Khan/KaTeX/blob/edede0867dde7250d2aab07bb54312fe256f86f5/website/siteConfig.js#L25\nTo deploy to the root, you can change it to /. I think we can make this to follow an environment variable.. Sorry, I misclicked the Close and comment button.\n\n\nRelatedly, I found it confusing that the docusaurus server run via npm run start would not respond to http://localhost:3000/ (error message Cannot GET /), but rather required http://localhost/KaTeX.  I expected everything to live at the root level of the test server (which would require relative linking), but barring that, we should at least improve the error message.\n\nDoesn't running npm start automatically open a browser with http://localhost:3000/KaTeX?. One place where we have to use absolute paths is docs, e.g., in #1520:\n\nhttps://github.com/Khan/KaTeX/pull/1520/files#diff-4c5caa110a8eefbc2536f38bd144c8fcR5\nhtml\n<link rel=\"stylesheet\" href=\"/KaTeX/static/katex.min.css\"/><!-- must use absolute path -->\n\n~I'm not sure how to make it work using the environment variable.~ Resolved.. @edemaine If versioning is enabled(#1521) or translations are enabled, the path may be nested one or two levels further.. I've opened #1526.. Closing as #1526 is merged and it's an upstream issue.. @edemaine I removed the npm part from the Building from Source.. @kevinbarabash I can generate a SSH key, but only repo admin can add deploy key(public key) to the GitHub repository.. @kevinbarabash The hostname is github.com, but as we don't use SSH for other things, I think we can leave it empty.. @kevinbarabash I've added the SSH key and a step to check it working.. @kevinbarabash I've confirmed it successfully gets added and authenticates: https://circleci.com/gh/Khan/KaTeX/3047. But it gives exit code 1 as it does not provide shell access, so I removed the test in #1479.. @kevinbarabash Setting the host empty sets the ssh_config as:\nHost !github.com *\n  IdentitiesOnly no\nwhich excludes github.com and makes read-only key take precedence.\nCould you set the host to github.com?. As we don't have ParseNode class anymore, we should consider moving type declarations to types.js and functions to utils.js.. @marcianx I was thinking the PascalCase file name may give an impression that it default-exports a class named ParseNode, but I cannot think of better alternative.. This list is functions from various sources including KaTeX source, compared to this PR. So it may include typos, uncommon or non-standard commands, and KaTeX internal commands. And it is simply compared using Excel, so comparison may be inaccurate.\nlatex\n\\(\n\\)\n\\[\n\\]\n\\|\n\\>\n\\allowbreak\n\\arcctg\n\\bull\n\\C\n\\cancer\n\\ce\n\\cf\n\\clubs\n\\diamonds\n\\empty\n\\exist\n\\harr\n\\Harr\n\\hdashline\n\\hearts\n\\hfil\n\\L\n\\l\n\\lang\n\\mathsterling\n\\N\n\\nobreak\n\\overparen\n\\part\n\\R\n\\rang\n\\relax\n\\scr\n\\sixptsize\n\\smiley\n\\spades\n\\sub\n\\textdegree\n\\textsc\n\\underparen\n\\varvdots\n\\xleftequilibrium\n\\xrightequilibrium\n\\xrightleftarrows\nEnvironments:\n{eqnarray}\n{multiline}\n{smallmatrix}\n{subarray}. @ronkok Sorry, I had no time to append description. I've edited the comment and removed KaTeX colors.. Following seems to be missing:\n- math environment in text mode: \\(, \\), \\[, \\]\n- \\| (\\Vert)\n- \\hfil, \\vfil, ~\\vfill~\n- \\! (negative thin space)\n- ~\\bull, \\exist, \\lang, \\rang, \\N, \\R: mediawiki (non-standard)~\n- ~text small caps: \\textsc~. There is also a \\! (negative thin space). https://github.com/Khan/KaTeX/pull/1536#discussion_r206973492 and https://github.com/Khan/KaTeX/pull/1536#discussion_r206973778 seem to be not addressed.. Thank you! This closes four issues.. @utensil It is available on https://deploy-preview-1536--katex.netlify.com/docs/support_table.html until #1544.. I think we can simply implement the scroll spy like:\njs\nconst headings = document.querySelectorAll('.toc-headings > li > a');\nheadings[0].style.fontWeight = 'bold';\nlet timer;\ndocument.addEventListener('scroll', () => {\n    if (!timer) { // throttle\n        timer = setTimeout(() => {\n            let found = false;\n            for (let i = 0; i < headings.length; i++) {\n                // if !found and i is the last element, highlight the last\n                let current = !found;\n                if (!found && i < headings.length - 1) {\n                    const next = headings[i + 1].href.split('#')[1];\n                    const nextHeader = document.getElementById(next);\n                    // this value can be precalculated (after rendering finishes)\n                    // maybe take the height into consideration or offset by some value\n                    const top = window.pageYOffset + nextHeader.getBoundingClientRect().top;\n                    current = top > window.scrollY;\n                }\n                if (current) {\n                    found = true;\n                    headings[i].style.fontWeight = 'bold';\n                } else {\n                    headings[i].style.fontWeight = '';\n                }\n            }\n            timer = null;\n        }, 50);\n    }\n});\n(Copy and paste this into the javascript console). AFAIK, courtesy of CircleCI, they don't enforce usage limits (1500 build minutes) on OSS projects.. The warning now exceeds 100%, but there is no problem building. Though another merit of moving to organization repo, as it can build independent from other Khan Academy projects using CircleCI, and vice versa.. Duplicate of #454. See above issue and copy-tex extension for how to get LaTeX source code from the KaTeX element. And if possible, please write the issue in English. Thank you!. I think it\u2019d be best to get #1547 merged and decide #1509 before. . I've created a Version 0.11.0 milestone, consisting of mostly documentation tasks.. @edemaine I was just listing issues that'd be nice to be resolved until the weekend (soft milestone, to-do list), as it's first time we're releasing new version with the website. They are not meant to block the release \ud83d\ude04. BTW, the version number should be 0.10.0, as last release is 0.10.0-beta. My mistake.. @kevinbarabash Semantic Versioning states:\n\nA pre-release version indicates that the version is unstable and might not satisfy the intended compatibility requirements as denoted by its associated normal version. \n\nBut as people may be using ^0.10.0-beta, I think 0.11.0 makes sense.. v0.10.0-rc is published! I think we should publish the stable version after we moved to the new domain.. I'm thinking of releasing a final RC version, as we upgraded to Babel 7, preferably after latest three bugfix PRs get merged.. @edemaine It's because of outdated katex.css. It'll not affect the new versioned docs. I'll think of a way to fix it and send a PR.. Screenshot:\n\nThis can be tested using device emulation on Chrome DevTools or similar.. We're at major version zero, so I think it's okay to have breaking changes.. The default should be an empty array or a null check should be added.. > If this page were to be published before the next KaTeX release, how would \\url render on the public web?\nI am thinking of using the release version of KaTeX from the CDN.\nTwo things not directly related to this PR:\n What do you think about using KaTeX logo(\\KaTeX) in the \\href example instead of plain text?\n There seems to be an overflow on the smaller screens. Do you have any thoughts?. @ronkok Also, mostly developers will be using the site and they won't be using IE9 \ud83d\ude04 \nWould you like to work on this PR or on the separate PR?. @ronkok Could you change In master functions to display the actual function?. @mbourne The support table (https://katex.netlify.com/docs/support_table.html) also has overflowing tables but doesn't overflow on smaller screen. I wonder what's the difference.. @mbourne @ronkok\nYou can access the supported functions page at https://deploy-preview-1556--katex.netlify.com/docs/supported.html.\nThe example in the main page and the supported functions page overflows at screen width smaller than 359px, but it's inevitable, latest devices (iPhone > 5, Galaxy > S2) have larger screens and there won't be much use cases of accessing the documentation on screens too small, so I think it's OK.. As there is texvc package, I think this qualifies to be in the main KaTeX.. @edemaine @ronkok If we decide to publish every commit, we can use built CSS (#1520) and in master notes are not necessary. Documentation can be updated regardless of whether we publish every release or commit.. You probably should build the KaTeX again, by running yarn build at the root.. Thank you! \ud83d\ude04. @kevinbarabash greenkeeper-lockfile (#1531) does that.. I think the wiki can serve as a secondary documentation, containing documentations on minor and peripheral topics, too long or advanced, and/or not suitable to be on the website.. @edemaine It is wrapped to support stringifying/parsing Symbol polyfill.. @edemaine I think we can do that with Babel 7.. @kevinbarabash It uses typeof Symbol !== 'undefined' to detect Symbol support, and it justs sets toString() method..  I was thinking of linking to the website, like main README.md. (#1566). Many of logos are trademark and some may have a guideline, which may not allow using them in our site. I wonder using them here qualifies as a Fair use. I think we should search for logo guidelines and contact them if necessary.\nAlso, image links can break someday. I think we need to use image hosting such as Imgur or commit them to the repo.. * [x] Rocket.Chat (https://rocket.chat/)\n [ ] pandoc (https://pandoc.org/)\n [x] Quill (https://github.com/quilljs/quill)\n [x] StackEdit (https://github.com/benweet/stackedit)\n [x] CoCalc (https://cocalc.com/)\n\n\n[x] editor.md (https://pandao.github.io/editor.md/en.html)\n[x] Idyll (https://idyll-lang.org/)\n\nAvailable using plugin:\n [x] Gatsby (https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-remark-katex)\n [ ] Atom (https://atom.io/packages/markdown-preview-enhanced)\n [ ] JupyerLab (https://github.com/jupyterlab/jupyter-renderers/tree/master/packages/katex-extension)\n [ ] GitBook (https://github.com/GitbookIO/plugin-katex)\n* [ ] Markdown-it (https://github.com/waylonflinn/markdown-it-katex). - Gitter: https://gitlab.com/gitlab-org/gitter/webapp/issues/1966 [Closed]\nI've created issues on where public issue tracker is available.. https://github.com/bokeh/bokeh/issues/8167#issuecomment-412944140\n\nJust FYI Bokeh does not use KaTex directly, at least not yet. We have published one example that shows how users can create a custom extension themselves, that integrates KaTeX output into a Bokeh plot. We'd like to make KaTeX output a fully supported buit-in feature, but I'm not sure when that might be able to happen.. From gradescope:\nDo you think you could use the version of our logo without the text (attached)? It looks like the other logos don't have text.\n\n\n. @edemaine It seems it's from the internal guideline. As we got permissions to use them, I think we can commit image files to the repo.. From expii:\n\n. Maybe it's why RawGit recommends using a specific tag or commit hash in the CDN URL (not a branch).. @kevinbarabash Is Khan Academy still using Google Analytics?. @kevinbarabash I was wondering whether I could remove GA.. @edemaine Please feel free to edit the pull request directly as you deem fit.. @edemaine Thank you for reviewing and revising! As a non-native English speaker, I sometimes find it difficult to find the right wording \ud83d\ude04 I've added a few minor changes.. This is thousandth commit!. @kevinbarabash No, we're not using them for now, and I think it's highly unlikely we'll use them in the future, as we have Netlify builds. I've removed them in #1658.. @edemaine Yes \ud83d\ude04 Thank you for the review!. @edemaine Please see https://github.com/Khan/KaTeX/issues/1509#issuecomment-412148173 \ud83d\ude04 . Updated! \ud83c\udf2e . @kevinbarabash Yes, UglifyJS will convert escaped unicode to unicode char and encode them in UTF-8.. @kevinbarabash Yes, possibly with some naming system.. @kevinbarabash http://lesscss.org/usage/#less-options-modify-variables. Also, I'm thinking to adding license information to the footer:\n\nAny opinions?. @edemaine \n\nOne policy question I wonder: should we delete the release branch afterward?  I notice some projects (e.g. https://github.com/meteor/meteor) keep release-* branches, but this may also get to be annoyingly many.\n\nAs we do not separate master branch and development branch, and do not have that many commits to do so, I don't think it's necessary.. @kevinbarabash The SSH deploy key cannot authenticate with the GitHub API since it\u2019s HTTP. I think we can leave the creating the GitHub release manual, as release notes have to be added.\nAlso, I have some concerns about this PR, in part due to the recent incident in eslint-scope, as uploading tokens can be dangerous and 2FA cannot be enabled.. @kevinbarabash Sorry, there was an error in bash variable, see #1629.. @edemaine Last three elements are parts of the logo.. @kevinbarabash Done \ud83d\ude04 . @kevinbarabash \n\nchanging the values in the options panel should trigger a re-render\n\nIt listens to the input event, but it seems quite a few of browsers don't fire it on the checkbox: https://caniuse.com/#search=input. I'll change it to change.\n\nin maximized view we may want to stack the editor/render views vertically especially as the screen gets narrower\n\nI agree.. @kevinbarabash \n\nit would be cool if the options panel animated in/out\n\nI've add the sliding animation.\n\nit too me a while to find the options, I think eventually having a separate page with the options always visible might be the way to go (this is how the babel and flow demos work)\n\nI've made the page with options panel opened and view maximized when the hash is #demo, i.e., https://deploy-preview-1615--katex.netlify.com/#demo.. @kevinbarabash Done.. @kevinbarabash Actually, it'll be easier to flow-type, as it understands those functions cannot mutate the array.. You can pass options object as the last argument. Try\njs\nkatex.renderToString(\"\\\\sum_{n=1}^\\\\infty 2^{-n} = 1\", {displayMode: true});. @edemaine Thank you for reviews!. The new website is deployed!. Thank you for the report!. The fonts source is licensed under MIT License and fonts (binary) are licensed under SIL OFL 1.1.. Or you can use Khan/katex-fonts, e.g., npm install Khan/katex-fonts#a09ea0bbe0c6a7dd18118207449654f929388eba.. You should install the dependencies for the website separately, at least for now.. There seems to be no commit pushed after https://github.com/Khan/KaTeX/pull/1633#pullrequestreview-147429135.. @edemaine versions.json is at https://github.com/Khan/KaTeX/pull/1634/files#diff-0e04518fc6a9431b37afb10f466555b1.\nAs the changelog should be included in the release, I think it makes sense to update here. I'll add the mention to the release script, in the later PR.\nThe process is:\n- Approve and merge this PR\n- Pull latest master and run ./release.sh -p 0.10.0-rc. @edemaine Yes to all questions \ud83d\ude04 Later, we may automate this process using a CI, #1605.. I think we should require updating the changelog in the PR or have a PR title convention. There are 243 commits since v0.9.0: https://github.com/Khan/KaTeX/compare/v0.9.0...master.. I\u2019ll be able to work on this few hours later, so please feel free for anyone to update the changelog.. @kevinbarabash It keeps all versions unless deleted. But I think there is no reason to keep pre-release version docs, so I think we can delete them when we release stable version.. This is ready for review & merge.. @edemaine I'm going to do it, but I found a bug on updating the SRI.. @edemaine All changes except those to docs/ and KaTeX source codes can be safely merged.. Sorry for late responses. I'm not sure it's a GitHub issue or my ISP issue, but GitHub is currently very slow.\n\nI wonder if there's some way to tell circleci and netlify to ignore PRs against gh-pages.\n\nThere seems to be no way for Netlify to ignore it. For CircleCI, we can use dummy config or it seems that master branch configuration can be used to control it.\n\nWhat command did you run to generate this PR?\n\nI ran ./release.sh -p 0.10.0-rc, but as gh-pages is a protected branch (#1412), I had to push to another branch and open a PR.\n\nMaybe @ylemkimon could write a document about the release process.\n\nReally I should \ud83d\ude04 . @kevinbarabash I'm worried that someone may gain access to an account with write access and push malicious code.. find() and findIndex() are not supported by IE and old browsers, and they are not polyfilled as Babel cannot determine the type at compile time. So you cannot use them in the KaTeX source (src/**/*.js). I apologize I forgot to mention it in the issue.. The best way to fix these problems would be to save the work elsewhere, delete the whole project, and clone a fresh copy. (https://xkcd.com/1597/ \ud83d\ude04). @edemaine The parent directory of the root is the root (by the URL spec). I'm not sure we should have a Khan Academy favicon on Netlify.. @kevinbarabash Unfortunately, eslint-plugin-promise including no-return-wrap doesn't lint against these issues.. Also it is valid syntax to pass a non-function to then. However, it's evaluation is not deferred after Promise resolution.. This seems to be a problem with yarn check.. @edemaine Greenkeeper successfully updates the lockfile: https://github.com/Khan/KaTeX/commit/6425b58fdec57bebf2e83437ef685027ecd4d5a6. However, the actual dependency doesn't seem to be updated.. This is because https://github.com/yarnpkg/yarn/issues/5723 and the Node image is using Yarn 1.6.0.. @kevinbarabash It is CircleCI image, which is using official Node image, which has Yarn version policy of upgrading when only Node.js version is incremented.. @kevinbarabash Yarn speeds up the install process by skipping file copy if their size and modified time is equal. However, npm publish script removed and locked timestamps down to specific date: https://github.com/npm/npm/commit/114d518c75732c42acbef3acab36ba1d0fd724e2 and https://github.com/npm/npm/commit/58d2aa58d5f9c4db49f57a5f33952b3106778669. It's causing problems with old Yarn caching.. Please hold off merging this for a while.. @frogg @dlrenz @RobZuazua @cocokiri We have published v0.10.0-rc.1, which hopefully fixes the issue. Please try it and let me know. I apologize for inconveniences.. I'll do some kinds of post-mortem when I have time.. webpack prioritizes module field over main field and .mjs extension over .js field, and expects the module to be transpiled to ES5 except import/export statements.. @edemaine ~Of what file?~ Same problem again.. @edemaine No, it seems to be correct. If you compared to built files after checkout, you should change package.json version before building. Also, if you're on Windows, you should disable autocrlf feature of Git. If not, could you let me know which hash is incorrect?. @kevinbarabash I think it makes sense. Codecov has a feature called Flag, which allows separating code coverage using a flag. I've added it in #1658.. @edemaine I think #750 is tracking those issues.. @kevinbarabash Thank you for the reviews!. @kevinbarabash But to use it in old environments with less ES6 support, which is more common use case, it needs to be transpiled to ES5. However, by default, babel-loader (webpack) or rollup-plugin-babel (Rollup) doesn't transpile dependencies(node_modules). It needs user-side configuration and it'd hard to configure if KaTeX is deep level dependency.. Rather than publishing a new package, I think we can use import katex from 'katex/dist/katex'. I will make a documentation PR.. @edemaine Thank you for the review!\n\n@kevinbarabash will have different experience than the rest of us because he can publish directly to the gh-pages branch (even though it's protected).  I assume that's fine, but maybe worth discussing briefly?  Should the script put us all through the PR step, instead of trying to publish directly to gh-pages?)\n\nI think the purpose of protecting the gh-pages branch is to prevent malicious code being pushed. As the website is generated from docs, there seems to be no need for reviewing its content.. @kevinbarabash \n\nAndroid for Android WebView.\nBaidu for Baidu Browser.\nBlackBerry or bb for Blackberry browser.\nChrome for Google Chrome.\nChromeAndroid or and_chr for Chrome for Android\nEdge for Microsoft Edge.\nElectron for Electron framework. It will be converted to Chrome version.\nExplorer or ie for Internet Explorer.\nExplorerMobile or ie_mob for Internet Explorer Mobile.\nFirefox or ff for Mozilla Firefox.\nFirefoxAndroid or and_ff for Firefox for Android.\niOS or ios_saf for iOS Safari.\nNode for Node.js.\nOpera for Opera.\nOperaMini or op_mini for Opera Mini.\nOperaMobile or op_mob for Opera Mobile.\nQQAndroid or and_qq for QQ Browser for Android.\nSafari for desktop Safari.\nSamsung for Samsung Internet.\nUCAndroid or and_uc for UC Browser for Android.. @edemaine \n\n\nHow do last 2 versions and > 0.1% combine? (Is it an OR or AND?)\n\nMultiple criteria are combined as a boolean OR, except not.\n\nIE 9, for example, is not in the last 2 versions, but I assume it's > 0.1% usage, so it will be included\n\nYes, its usage is currently at 0.15%.\n\nAssuming this is the case, this seems like a good (generous) ruleset, especially the > 0.1%.\n\nCurrently KaTeX has very good support of old browsers \ud83d\ude04 . I've add a possible breaking changes section to https://github.com/Khan/KaTeX/releases/tag/v0.10.0-rc. How much do you think this will affect users? Are there tools depending on this behavior?. I think we can just do: cp -R dist katex && tar czf katex.tar.gz katex && rimraf katex.zip && zip -rq katex.zip katex && rimraf katex and add katex to .gitignore.. > That said, beginning with an unconditional rimraf katex might violate the principle that one should only delete stuff that is known to be autogenerated. You know the build system better than I, so I won't be the judge of that.\nI wonder there is anyone who has a file or folder named katex on the KaTeX project folder, who're running KaTeX dist script, so I think it'd be OK to delete it before running script. (We're doing same for dist folder.)\n\nThinking about it, you might actually want to begin with rimraf katex katex.tar.gz katex.zip to make sure that the archives are not leftovers from an ancient successful yarn dist:zip whilst later runs have aborted early.\n\nThank you for pointing that out. I didn't know zip adds files to existing zip file.\n\nI do not know rollup but it seems its output directory can be configured. What about using dist/katex for that?\nOut of curiosity, since yarn test passes with the above diff: What would it actually break?\n\nUnfortunately, package.json main field, CLI, local testing pages, and NPM-published package depend on this path, so it's be more breaking change to change this path.. Could you change the dist:zip script to:\nbash\nrimraf katex/ katex.tar.gz katex.zip && cp -R dist katex && tar czf katex.tar.gz katex && zip -rq katex.zip katex && rimraf katex/\nand add /katex/ to the .gitignore?. Could you merge latest master branch or allow maintainers edit?. Thank you!. @leungbk Codecov result includes coverage from screenshot tests and we don't strictly enforce code coverage changes, especially on contrib extensions. So you don't need to worry about them.. @kevinbarabash There was a bug in #1595, where Browserslist config is not read even if isESMBuild is false. Also, I've upgraded uglifyjs-webpack-plugin to terser-webpack-plugin, to be able to minify ES6 output.. Closing in favor of #1736.. @edemaine Thank you!\n@kevinbarabash Could you change the link on the repo description?. @kevinbarabash The site is live on https://ylemkimon.github.io/KaTeX/. \n\nAlso, with respect to \"Google Developer Tools\", is that what google-site-verification: google4e8111332337b304.html is for? How does it improve SEO?\n\nYes, it is a tool Google provides: https://www.google.com/webmasters/. It allows to control and view the result of Googlebot. I've enabled it for katex.org and delegated (in their terms) the ownership to you and @edemaine.. The configuration for our DocSearch is available at: https://github.com/algolia/docsearch-configs/blob/master/configs/katex.json.\nOne question is should we include supported functions in tables, i.e., tds?. > I'd like to raise an error on a mis-typed predefined color name, but the only way I can think to accomplish that is via a RegEx pattern that enumerates all 150 of the HTML predefined colors. Is that something I should do?\nI think it is impossible without access to DOM APIs and there is no need to check the color name is valid.. Thank you for your contribution!\n- You can automatically close relevant issues when this PR is merged, using closing words. Please include Fixes #1686 in the PR description.\n- Please sign the Contributor License Agreement (CLA). Thank you for reporting and sending a PR! It seems hashes for both files got mixed in https://github.com/Khan/KaTeX/pull/1634/commits/7f3c0f247eb92ae8c8d84eab1911357a95646507 during v0.10.0-rc release, and as we're using previous hashes for the replacement key of new hases, it produced same hashes for both files. I'm not sure what caused hash mix-up in the first place, but I'll continue to investigate.. @edemaine For Google, sitemap can be submitted using Google Search Console (formerly Google Webmaster Tools).. @mbourne Thank you for your great insights!\nThis PR is for our old site (https://khan.github.io/KaTeX), which Google marked as canonical (authoritative) version of our new site (https://katex.org). I assumed if I add the new site as canonical in the sitemap as well as HTML link tag, Google will mark the new site as canonical. If you have any suggestions on how to deprecate the old site, please let us know.\n(1)(2) These tags are auto-generated by our documentation tool, Docusaurus. If they hurt SEO, could you report the issue at https://github.com/facebook/Docusaurus/issues?\n(3) We only have English translations, and they are added as alternate link with hreflang en in our main site\u2019s sitemap: https://katex.org/sitemap.xml\n(4) The URL of the old site is not root, i.e., https://khan.github.io/KaTeX. Does Google look at subdirectories?\n(5) If we\u2019d like to put no restrictions on crawling, is robots.txt necessary?\nThank you again!\n. @kevinbarabash Yes, it is not a documented behavior, but it generates sitemap.xml.. @kevinbarabash It is part of build process(yarn build), so it is automatically deployed.. @edemaine \n\nAre there newlines in our SVGs?\n\nYes.\n\nIt seems the editor or framework you are using is converting newlines to <br> tag.. I'll merge this PR, as I'm planning to completely refactor font generation and selection.. False positive.. @edemaine Probably, as we\u2019re not using it.. @ronkok Nice idea! If you don't mind, I'd like give it a try.\n\n\nEdit Parser's parseString function so that any non-URL groups that contain a % will throw an error. URL groups will not throw the error. That will enable the URL escape.\n\n\nInstead of throwing an error, the LaTeX behavior seems to be continue parsing to the next line.. @ronkok Thank you for the suggestion! I\u2019ve implemented it and it have made code much simpler.. https://github.com/ylemkimon/eslint-plugin-transform-runtime-aliasing/releases/tag/v1.3.0. @edemaine Thank you for the review!. @kevinbarabash When a new version is released while a PR already exists like #1728, Greenkeeper creates only a branch but not a PR, and one has to manually open a PR from that branch.. It's because https://github.com/Khan/KaTeX/issues/1719#issuecomment-422666415 was not updated. I've merged #1742.. Could you give a full reproducible example?. @kevinbarabash It seems so.. Those long numbers will mostly come from converting units and I think it's enough to round the number there:\nhttps://github.com/Khan/KaTeX/blob/0b7b4db7fc6649ffc316016b81386f4e1cebaee0/src/units.js#L58-L59. @kevinbarabash It seems the bot froze. I've restarted the bot, for future reference:\nbash\nnow scale bot.katex.org 0\nnow scale bot.katex.org 1. You'd need to adjust:\nhttps://github.com/Khan/KaTeX/blob/b2432e8ad238dbb723d5f3c83c530fe31fadfee6/src/mathMLTree.js#L177-L178\nand\nhttps://github.com/Khan/KaTeX/blob/b2432e8ad238dbb723d5f3c83c530fe31fadfee6/src/mathMLTree.js#L185-L186\n.. Closing as won't fix. Please open new issue with specific package or command you'd need. Thank you!. TODO: update docusaurus. @edemaine I've updated the changelog and drafted the release note. (I'm not sure it's visible to other maintainers.). @edemaine I think it's better to list changes between stable release versions, as most people only use them.. @edemaine What do you think about:\n```markdown\nKaTeX has a new domain, website, and documentation at https://katex.org!\nFor the full list of changes since v0.9.0, see CHANGELOG.md.\nAdded\n\nUnicode \u27e6\u27e7 (#1750)\nKaTeX website & documentation (#1571, #1642, #1680, #1683, #1688, #1631, #1727)\nBrowserslist (#1662)\n6-digit color without # (#1690)\n\\mathnormal (#1700)\n\\lparen and \\rparen (#1741)\n\\> (#1752)\n\nChanged\n\nPort to @flow: CssStyle (#1684)\nImprove release script (#1660, #1665)\nRefactor buildCommon (#1633, #1640)\nUpgrade to Babel 7 (#1595)\nRefactor Parser (#1711, #1723)\n\nFixed\n\nRemove duplicate defineFunction invocation for \\mathop (#1701)\nFix tag positioning to live within katex-html parent (#1721)\nFix \\mathit font and italic correction (#1700)\n```\n?. @kevinbarabash It's because it's not published to the NPM. The CDN depends on the NPM.. @haoqiang Thank you!. @kevinbarabash Actually it was our Yarn not updating the package.. @kevinbarabash I've archived the branch at https://github.com/KaTeX/old-gh-pages.. I'm not sure what's the problem here.. @kevinbarabash Probably it got removed at some point.. Holding off until https://github.com/greenkeeperio/greenkeeper/issues/955 is resolved.. @ronkok Justification was a bad choice of the word, the page is shifted to the right.\n\nBefore:\n\nAfter:\n. @ronkok There seems to be no onPageNav rule on the support_table.md. Also changing flex-grow to 1 still shifts the page a bit, which may be bad UX. If you think it's OK, I'll change it \ud83d\ude04. @kevinbarabash Thank you for the review!. Duplicate of #1596. @kevinbarabash Could you check Gitter, Greenkeeper, and Netlify and Codecov status notification?. What version of KaTeX are you using?. This would increase the KaTeX bundle size by > 10 KB.. \\xmlClass seems to have the same function as \\class in #1437. We're planning to include it in non-strict mode, but as there is security issues involved and I'm working on refactoring the parser, I'd like to work on those first.. I was thinking of a dictionary like:\n```js\n{\n    allowedProtocols: [\"https\", \"http\"],\n    allowedClass: /katex-.+/,\n    ....\n}\n````\nbut I think the function approach is better.. > Is that what we want? Maybe, actually.\nI think we should be as conservative as possible, not allowing anything by default.. @edemaine I restarted the test, as the error was due to a Docker Hub problem: https://status.circleci.com/incidents/tkdvpy78x1cn.. Does this apply to only bin and rel or other atom types?. In that case, you could use a fragment or a partial group (https://github.com/KaTeX/KaTeX/pull/1706).. Would it be possible to mock the KaTeX module?. Could you update https://github.com/KaTeX/KaTeX/blob/master/website/pages/index.html and https://github.com/KaTeX/KaTeX/blob/master/website/static/js/index.js (options panel), too?. Duplicate of #454. v0.10.1 is released, which includes a hotfix to this bug!. > [D]o they have same engine?\nNon-Safari browsers use the same engine, WebKit.. @edemaine Making another branch for the v0.10.1 seems like a good way to go. I've modified the PR and added --frozen-lockfile.. Please refer to https://github.com/KaTeX/KaTeX#starter-template and https://katex.org/docs/api.html.. Unfortunately, manually setting LESS variables no longer works. The environment variable settings are documented on https://katex.org/docs/font.html. Any suggestion on its improvement is welcome!. @kevinbarabash Unfortunately, we cannot use Browserstack to test PRs, as it require a private API key.. \nOn the right side of the developer console, you can see applied styles and their sources for the selected element. Could you check them?. @haraldschilly Currently, fraction bars are rendered using a span with border-bottom and min-height. We went through several trials and errors regarding the horizontal bar (see previous issues), so if old KaTeX resides, it may render incorrectly:\n\nBut judging by the font of x and y from your screenshot, unless intended, it seems KaTeX styles have not been loaded correctly.. Note that there is a full-working demo on our website, so you can try, inspect and compare the correct rendering.. There is no need to escape backslashes in the CLI (unless needed by the shell you're using): c = \\pm\\sqrt{a^2 + b^2}.. Could you upload your webpack configuration?. For now, you can load the extension by running javascript:var a=document.createElement('script');a.src='https://cdn.jsdelivr.net/npm/katex@0.10.1/dist/contrib/mhchem.min.js';document.body.appendChild(a) in the developer console or the address bar (please note that some browsers like Chrome strips off javascript: when pasting to the address bar).. Is there any specific reason using the port 7936?. Is outputting mathtex-script-type.js to $(BUILDDIR), not $(BUILDDIR)/contrib, and not including in the distribution archive an intended behavior?. Is exporting the copy-tex module to renderMathInElement, a name also used by auto-render, an intended behavior?. @kevinbarabash Yes, it does. Will remove them.. @kevinbarabash Yes. mangle is enabled by default and beautify=false was necessary in order to pass ascii_only=true to the CLI(https://github.com/mishoo/UglifyJS2/issues/54).. @kevinbarabash I think preserving other files in build/ is no longer necessary as dev server doesn't generate or use files in build/. Will change to rm -rf build/*. @kevinbarabash Yes \ud83d\ude04. @kevinbarabash Yes, but also because copy-tex doesn't export anything and just adds a copy event listener to the document, so only its side effect is needed.. @kevinbarabash cssnano is a CSS minifier equivalent to clean-css and it is included in the css-loader, which can be enabled by passing minimize: true to its options.. @kevinbarabash No, the order doesn't matter as it runs them in parallel. Will change and add comments.. @kevinbarabash webpack style-loader inlines imported stylesheets into the output JS files, and when stylesheets are imported, they are injected to the style tag. This is why css files are not linked in html files.\nUsing extract-text-plugin, they can be extracted to .css files. So in the production build where extract-text-plugin is not disabled, it builds .css files.. @kevinbarabash ~Yes, I think we can (and should) switch to ES6 module export, but it seems it's out of scope of this PR.~. @kevinbarabash It loads included font files in the stylesheet(fonts.less) and outputs to fonts/.. @kevinbarabash Actually, build file format is specified in webpack configuration output.libraryTarget and it's set to UMD (Universal Module Definition). Changed to ES6 module.. @rrandallcainc Yes. Current dependency tree is: katex.wepack.js imports static/katex.less, static/katex.less imports static/fonts.less, and fonts.less imports(using @font-face) font files.. @kevinbarabash The module katex is declared as externals in the webpack configuration. As a result, webpack doesn't bundle the KaTeX, but tries to require the module by require(\"katex\") in CJS, define([\"katex\"], ...) in AMD, and using global variable katex(old behavior) otherwise. Basically, it adds support for module loaders.. @rrandallcainc As webpack's default configuration filename is webpack.config.js, if webpack is called without any arguments, production build will be run.. @rrandallcainc For dist/katex.js, which is distribution file and entry point of katex module, as webpack exports an UMD module and default export is exposed, I think there'll be no breaking changes.. >~(ii) katex.js: transpilers and/or bundlers uses interopDefault, which imports default export when importing ES6 module\nI think there'll be no breaking changes.~\n@rrandallcainc I'm don't know there is a use case of directly requiring katex.js (from the root), e.g., const katex = require('./node_modules/katex/katex.js);, as it needs transpiling, but in that case, the user has to use .default, e.g., const katex = require('./node_modules/katex/katex.js).default;.. @kevinbarabash #1057 is no longer needed, since webpack doesn't use name require and https://github.com/browserify/browserify/issues/374 is not an issue.. This is for Jest, as it doesn't support ES6 modules.\nIn Babel 6, env configurations doesn't overrides configuration, rather are merged to the root configuration(babel/babel#5276).. @rrandallcainc Webpack has option libraryExport, which configures which module(s) will be exposed via UMD and it is set to default. So requiring katex module(require('katex')) will expose default export and work same.. @rrandallcainc Node doesn't support ES6 import/export module syntaxes, so I think adding .default won't help it. Also this plugin is part of babel-preset-es2015, so there won't be any additional dependencies.. The user can use the plugin by loading after the KaTeX.. \nThe file looks like:\n```\n(function webpackUniversalModuleDefinition(root, factory) {\n    if(typeof exports === 'object' && typeof module === 'object')\n        module.exports = factory();\n    else if(typeof define === 'function' && define.amd)\n        define([], factory);\n    else if(typeof exports === 'object')\n        exports[\"contrib/html\"] = factory();\n    else\n        root[\"contrib/html\"] = factory();\n})(this, function() {\nreturn webpackJsonp_name_([0],{\n// 59:\n// (function(module, webpack_exports, webpack_require) {\n\"use strict\";\nObject.defineProperty(webpack_exports, \"esModule\", { value: true });\n/ harmony import / var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray = webpack_require(30);\n/ harmony import / var WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArraydefault = _webpack_require.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray);\n/ harmony import / var WEBPACK_IMPORTED_MODULE_1__src_defineFunction = webpack_require(2);\n/ harmony import / var WEBPACK_IMPORTED_MODULE_2__src_buildCommon = webpack_require(0);\n/ harmony import / var WEBPACK_IMPORTED_MODULE_3__src_mathMLTree = webpack_require(1);\n/ harmony import / var WEBPACK_IMPORTED_MODULE_4__src_domTree = webpack_require(12);\n/ harmony import / var WEBPACK_IMPORTED_MODULE_5__src_buildHTML = webpack_require(3);\n/ harmony import / var WEBPACK_IMPORTED_MODULE_6__src_buildMathML = webpack_require(4);\nObject(WEBPACK_IMPORTED_MODULE_1__src_defineFunction[\"b\" / default /])({\n    type: \"class\",\n    names: [\"\\class\"],\n    props: {\n        numArgs: 2,\n        allowedInText: true,\n        greediness: 3,\n        argTypes: [\"string\", \"original\"]\n    },\n    handler: function handler(context, args) {\n        var classes = args[0];\n        var body = args[1];\n        return {\n            type: \"class\",\n            classes: classes.value,\n            value: Object(WEBPACK_IMPORTED_MODULE_1__src_defineFunction[\"c\" / ordargument /])(body)\n        };\n    },\n    htmlBuilder: function htmlBuilder(group, options) {\n        var elements = Object(WEBPACK_IMPORTED_MODULE_5__src_buildHTML[\"a\" / buildExpression /])(group.value.value, options, false);\n        var classes = group.value.classes.trim().split(/\\s+/);\n        var fragment = new WEBPACK_IMPORTED_MODULE_2__src_buildCommon[\"a\" / default /].makeFragment(elements);\n    fragment.children.forEach(function (children) {\n        if (!(children instanceof __WEBPACK_IMPORTED_MODULE_4__src_domTree__[\"a\" /* default */].svgNode)) {\n            var _children$classes;\n\n            (_children$classes = children.classes).push.apply(_children$classes, __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default()(classes));\n        }\n    });\n    return fragment;\n},\nmathmlBuilder: function mathmlBuilder(group, options) {\n    var inner = Object(__WEBPACK_IMPORTED_MODULE_6__src_buildMathML__[\"a\" /* buildExpression */])(group.value.value, options);\n    var node = new __WEBPACK_IMPORTED_MODULE_3__src_mathMLTree__[\"a\" /* default */].MathNode(\"mstyle\", inner);\n    node.setAttribute(\"class\", group.value.classes);\n    return node;\n}\n\n});\n/***/ })\n},[59])[\"default\"];\n});\n``\n</details>. @rrandallcainc Yes. Currently only the last commit(https://github.com/Khan/KaTeX/pull/1074/commits/5824510d7c56195d6254b23f70af6e5eb86d16b3) is specific to this PR.. Like this. It seems it's possible to\n(i) use ES6 inwebpack.config.jsby using the extension.babel.js, which transpiles the file before loading\n(ii) put all configurations in one file bywebpack.config.js` exporting a function, which takes environment variables as an argument and returns the webpack configuration. @kevinbarabash Yes \ud83d\ude04. @kevinbarabash No, MathJax does what you said:\n\nall of the elements to be wrapped in a single span with the given class applied.\n\nThough, I'm not sure which is more suitable. For wrapping in a span, I think we can do in a similar way to \\href:\nhttps://github.com/Khan/KaTeX/blob/2a2742453b86fba6fd5184efb3c3255400796fb7/src/functions/href.js#L25-L66. @kevinbarabash props.argTypes expects an array of ArgType, so it doesn't recognize custom string group type. I couldn't find a way to extend ArgType from defineGroupParser.. @kevinbarabash There seems to be an open issue in https://github.com/flowtype/flow-typed/issues/165. Also webpack has JSON Schema(schemas/webpackOptionsSchema.json) and maybe we can convert it using json-schema-to-flow-type. I wonder there is any way to import JSON schema to flow directly.. I think we can remove using dummy spans in the enclosing element like:\nhttps://github.com/Khan/KaTeX/blob/732f2a84ccb000099d29fb1f61dd02e611fab64b/src/functions/href.js#L34-L65\nand handle spacing here.. I think we can just return new buildCommon.makeAnchor(href, [], elements, options) in makeAnchor(). and get leftmost or rightmost children type for node instanceof domTree.anchor too.. Also I think we can define a special class name for span that encloses elements without affecting spacings.. Blocked on #1070 . Can the node be a domTree.documentFragment? Aren't they flattened at the start of buildExpression?. I think these functions should take domTree.documentFragment and domTree.anchor into account. Currently spacings around \\href are duplicated as dummy spans are created.. Why does this not have wrapperClasses: [\"svg-align\"],?. It would be nice to have a single entry point for both development and production build, but it would increase the unminified distribution file(dist/katex.js) by 2-3 KB.. I wonder there is a better way to load this code and enable HMR only in the main page(static/index.html).. @kevinbarabash It seems that node's children can be a domTree.documentFragment, e.g., \\phantom{x}^2.. @kevinbarabash Yes, but then webpack will rebuild both bundles when KaTeX sources have been changed. I'm not sure how it will impact the performance.. Is using spacings[left][right] instead of space an intended behavior?. @kevinbarabash It's for easy manipulation of nonSpaces. This way, we can safely assume that nonSpaces[0] and nonSpaces[nonSpaces.length -1] are dummy spans.. @kevinbarabash Not yet, but I think it makes sense to have for both sides.. @kevinbarabash The html.buildExpression inserts the appropriate spacing between the last child and mclose.. Just out of curiosity, is it valid to have right delimiters, e.g., \\rangle, as a left delimiter?. AFAIK, they are macros of \\fam = XX \\tenXX, and \\fam has no effect in the text mode but allowed in it, so they are allowed in the text mode.. @kevinbarabash Yes, in order to export KaTeX and make it accessible from the console and other scripts.. For cross-platform mkdir. Should this command run when --dry-run?. This is included in the dockers/Screenshotter/screenshotter.sh.. I'm not sure how to do this easily in the NPM scripts.. This will be moved to the fonts repo by #1134.. As generating unicodeSymbols.js is cheap, it does before every tests and builds.. @kevinbarabash Do you mean it should actually build the KaTeX or not?. I added watch in #1068, but I'm not sure there is a use case.. These were added in #902, but I'm not sure there is a use case. Also, I think it may be confused with only removing build/(built files).. It seems that npm install was no longer run, as install was overridden in #1140, but tests passed due to cached packages.. This can be removed if #1182 is merged.. I think we can use type {Measurement} from \"./units\";.. Is it possible to flowtype the keys of spacings?. As its current name is KaTeX-test-font and in the future maybe we can add other ASCII fonts support, I move for the former.. Would it be possible to document functions?. I think n and maybe f are more common.. The name macroString seems to be misleading.. I know other files have for...of, but as its polyfill is expensive, I think we should refrain from using it.. ~FYI, ES6 has a method definition shorthand.~. Maybe they can be defined using a loop?. Sorry, I didn't see it's down there. Why not for supsub?. @kevinbarabash Yes \ud83d\ude04 . @marcianx \njs\nconst object = {array: [1, 2, 3, 4]}; // wrapped in an object to prevent type inference\nfor (const element of object.array) {\n    element;\n}\nis transformed to:\n```js\n/**/ ({\n// \"./katex.webpack.js\":\n// (function(module, exports, webpack_require) {\nvar _getIterator = webpack_require(\"./node_modules/@babel/runtime/core-js/get-iterator.js\");\nvar object = {\n  array: [1, 2, 3, 4]\n};\nvar _iteratorNormalCompletion = true;\nvar _didIteratorError = false;\nvar _iteratorError = undefined;\ntry {\n  for (var _iterator = _getIterator(object.array), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n    var _element = _step.value;\n    _element;\n  }\n} catch (err) {\n  _didIteratorError = true;\n  _iteratorError = err;\n} finally {\n  try {\n    if (!_iteratorNormalCompletion && _iterator.return != null) {\n      _iterator.return();\n    }\n  } finally {\n    if (_didIteratorError) {\n      throw _iteratorError;\n    }\n  }\n}\n/***/ }),\n// \"./node_modules/@babel/runtime/core-js/get-iterator.js\":\n// (function(module, exports, webpack_require) {\nmodule.exports = webpack_require(\"./node_modules/core-js/library/fn/get-iterator.js\");\n/***/ }),\n// \"./node_modules/core-js/library/fn/get-iterator.js\":\n// (function(module, exports, webpack_require) {\nwebpack_require(\"./node_modules/core-js/library/modules/web.dom.iterable.js\");\nwebpack_require(\"./node_modules/core-js/library/modules/es6.string.iterator.js\");\nmodule.exports = webpack_require(\"./node_modules/core-js/library/modules/core.get-iterator.js\");\n/***/ }),\n// \"./node_modules/core-js/library/modules/_a-function.js\":\n// (function(module, exports) {\nmodule.exports = function(it){\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n  return it;\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_add-to-unscopables.js\":\n// (function(module, exports) {\nmodule.exports = function(){ / empty / };\n/***/ }),\n// \"./node_modules/core-js/library/modules/_an-object.js\":\n// (function(module, exports, webpack_require) {\nvar isObject = webpack_require(\"./node_modules/core-js/library/modules/_is-object.js\");\nmodule.exports = function(it){\n  if(!isObject(it))throw TypeError(it + ' is not an object!');\n  return it;\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_array-includes.js\":\n// (function(module, exports, webpack_require) {\n// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = webpack_require(\"./node_modules/core-js/library/modules/_to-iobject.js\")\n  , toLength  = webpack_require(\"./node_modules/core-js/library/modules/_to-length.js\")\n  , toIndex   = webpack_require(\"./node_modules/core-js/library/modules/_to-index.js\");\nmodule.exports = function(IS_INCLUDES){\n  return function($this, el, fromIndex){\n    var O      = toIObject($this)\n      , length = toLength(O.length)\n      , index  = toIndex(fromIndex, length)\n      , value;\n    // Array#includes uses SameValueZero equality algorithm\n    if(IS_INCLUDES && el != el)while(length > index){\n      value = O[index++];\n      if(value != value)return true;\n    // Array#toIndex ignores holes, Array#includes - not\n    } else for(;length > index; index++)if(IS_INCLUDES || index in O){\n      if(O[index] === el)return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_classof.js\":\n// (function(module, exports, webpack_require) {\n// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = webpack_require(\"./node_modules/core-js/library/modules/_cof.js\")\n  , TAG = webpack_require(\"./node_modules/core-js/library/modules/_wks.js\")('toStringTag')\n  // ES3 wrong here\n  , ARG = cof(function(){ return arguments; }()) == 'Arguments';\n// fallback for IE11 Script Access Denied error\nvar tryGet = function(it, key){\n  try {\n    return it[key];\n  } catch(e){ / empty / }\n};\nmodule.exports = function(it){\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_cof.js\":\n// (function(module, exports) {\nvar toString = {}.toString;\nmodule.exports = function(it){\n  return toString.call(it).slice(8, -1);\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_core.js\":\n// (function(module, exports) {\nvar core = module.exports = {version: '2.4.0'};\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef\n/***/ }),\n// \"./node_modules/core-js/library/modules/_ctx.js\":\n// (function(module, exports, webpack_require) {\n// optional / simple context binding\nvar aFunction = webpack_require(\"./node_modules/core-js/library/modules/_a-function.js\");\nmodule.exports = function(fn, that, length){\n  aFunction(fn);\n  if(that === undefined)return fn;\n  switch(length){\n    case 1: return function(a){\n      return fn.call(that, a);\n    };\n    case 2: return function(a, b){\n      return fn.call(that, a, b);\n    };\n    case 3: return function(a, b, c){\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function(/ ...args /){\n    return fn.apply(that, arguments);\n  };\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_defined.js\":\n// (function(module, exports) {\n// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function(it){\n  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_descriptors.js\":\n// (function(module, exports, webpack_require) {\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !webpack_require(\"./node_modules/core-js/library/modules/_fails.js\")(function(){\n  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n});\n/***/ }),\n// \"./node_modules/core-js/library/modules/_dom-create.js\":\n// (function(module, exports, webpack_require) {\nvar isObject = webpack_require(\"./node_modules/core-js/library/modules/_is-object.js\")\n  , document = webpack_require(\"./node_modules/core-js/library/modules/_global.js\").document\n  // in old IE typeof document.createElement is 'object'\n  , is = isObject(document) && isObject(document.createElement);\nmodule.exports = function(it){\n  return is ? document.createElement(it) : {};\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_enum-bug-keys.js\":\n// (function(module, exports) {\n// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n/***/ }),\n// \"./node_modules/core-js/library/modules/_export.js\":\n// (function(module, exports, webpack_require) {\nvar global    = webpack_require(\"./node_modules/core-js/library/modules/_global.js\")\n  , core      = webpack_require(\"./node_modules/core-js/library/modules/_core.js\")\n  , ctx       = webpack_require(\"./node_modules/core-js/library/modules/_ctx.js\")\n  , hide      = webpack_require(\"./node_modules/core-js/library/modules/_hide.js\")\n  , PROTOTYPE = 'prototype';\nvar $export = function(type, name, source){\n  var IS_FORCED = type & $export.F\n    , IS_GLOBAL = type & $export.G\n    , IS_STATIC = type & $export.S\n    , IS_PROTO  = type & $export.P\n    , IS_BIND   = type & $export.B\n    , IS_WRAP   = type & $export.W\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n    , expProto  = exports[PROTOTYPE]\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\n    , key, own, out;\n  if(IS_GLOBAL)source = name;\n  for(key in source){\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if(own && key in exports)continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function(C){\n      var F = function(a, b, c){\n        if(this instanceof C){\n          switch(arguments.length){\n            case 0: return new C;\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if(IS_PROTO){\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for library \nmodule.exports = $export;\n/***/ }),\n// \"./node_modules/core-js/library/modules/_fails.js\":\n// (function(module, exports) {\nmodule.exports = function(exec){\n  try {\n    return !!exec();\n  } catch(e){\n    return true;\n  }\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_global.js\":\n// (function(module, exports) {\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef\n/***/ }),\n// \"./node_modules/core-js/library/modules/_has.js\":\n// (function(module, exports) {\nvar hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function(it, key){\n  return hasOwnProperty.call(it, key);\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_hide.js\":\n// (function(module, exports, webpack_require) {\nvar dP         = webpack_require(\"./node_modules/core-js/library/modules/_object-dp.js\")\n  , createDesc = webpack_require(\"./node_modules/core-js/library/modules/_property-desc.js\");\nmodule.exports = webpack_require(\"./node_modules/core-js/library/modules/_descriptors.js\") ? function(object, key, value){\n  return dP.f(object, key, createDesc(1, value));\n} : function(object, key, value){\n  object[key] = value;\n  return object;\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_html.js\":\n// (function(module, exports, webpack_require) {\nmodule.exports = webpack_require(\"./node_modules/core-js/library/modules/_global.js\").document && document.documentElement;\n/***/ }),\n// \"./node_modules/core-js/library/modules/_ie8-dom-define.js\":\n// (function(module, exports, webpack_require) {\nmodule.exports = !webpack_require(\"./node_modules/core-js/library/modules/_descriptors.js\") && !webpack_require(\"./node_modules/core-js/library/modules/_fails.js\")(function(){\n  return Object.defineProperty(webpack_require(\"./node_modules/core-js/library/modules/_dom-create.js\")('div'), 'a', {get: function(){ return 7; }}).a != 7;\n});\n/***/ }),\n// \"./node_modules/core-js/library/modules/_iobject.js\":\n// (function(module, exports, webpack_require) {\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = webpack_require(\"./node_modules/core-js/library/modules/_cof.js\");\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_is-object.js\":\n// (function(module, exports) {\nmodule.exports = function(it){\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_iter-create.js\":\n// (function(module, exports, webpack_require) {\n\"use strict\";\nvar create         = webpack_require(\"./node_modules/core-js/library/modules/_object-create.js\")\n  , descriptor     = webpack_require(\"./node_modules/core-js/library/modules/_property-desc.js\")\n  , setToStringTag = webpack_require(\"./node_modules/core-js/library/modules/_set-to-string-tag.js\")\n  , IteratorPrototype = {};\n// 25.1.2.1.1 %IteratorPrototype%@@iterator\nwebpack_require(\"./node_modules/core-js/library/modules/_hide.js\")(IteratorPrototype, webpack_require(\"./node_modules/core-js/library/modules/_wks.js\")('iterator'), function(){ return this; });\nmodule.exports = function(Constructor, NAME, next){\n  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_iter-define.js\":\n// (function(module, exports, webpack_require) {\n\"use strict\";\nvar LIBRARY        = webpack_require(\"./node_modules/core-js/library/modules/_library.js\")\n  , $export        = webpack_require(\"./node_modules/core-js/library/modules/_export.js\")\n  , redefine       = webpack_require(\"./node_modules/core-js/library/modules/_redefine.js\")\n  , hide           = webpack_require(\"./node_modules/core-js/library/modules/_hide.js\")\n  , has            = webpack_require(\"./node_modules/core-js/library/modules/_has.js\")\n  , Iterators      = webpack_require(\"./node_modules/core-js/library/modules/_iterators.js\")\n  , $iterCreate    = webpack_require(\"./node_modules/core-js/library/modules/_iter-create.js\")\n  , setToStringTag = webpack_require(\"./node_modules/core-js/library/modules/_set-to-string-tag.js\")\n  , getPrototypeOf = webpack_require(\"./node_modules/core-js/library/modules/_object-gpo.js\")\n  , ITERATOR       = webpack_require(\"./node_modules/core-js/library/modules/_wks.js\")('iterator')\n  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o next\n  , FF_ITERATOR    = '@@iterator'\n  , KEYS           = 'keys'\n  , VALUES         = 'values';\nvar returnThis = function(){ return this; };\nmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function(kind){\n    if(!BUGGY && kind in proto)return proto[kind];\n    switch(kind){\n      case KEYS: return function keys(){ return new Constructor(this, kind); };\n      case VALUES: return function values(){ return new Constructor(this, kind); };\n    } return function entries(){ return new Constructor(this, kind); };\n  };\n  var TAG        = NAME + ' Iterator'\n    , DEF_VALUES = DEFAULT == VALUES\n    , VALUES_BUG = false\n    , proto      = Base.prototype\n    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]\n    , $default   = $native || getMethod(DEFAULT)\n    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined\n    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native\n    , methods, key, IteratorPrototype;\n  // Fix native\n  if($anyNative){\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));\n    if(IteratorPrototype !== Object.prototype){\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if(DEF_VALUES && $native && $native.name !== VALUES){\n    VALUES_BUG = true;\n    $default = function values(){ return $native.call(this); };\n  }\n  // Define iterator\n  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG]  = returnThis;\n  if(DEFAULT){\n    methods = {\n      values:  DEF_VALUES ? $default : getMethod(VALUES),\n      keys:    IS_SET     ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if(FORCED)for(key in methods){\n      if(!(key in proto))redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_iter-step.js\":\n// (function(module, exports) {\nmodule.exports = function(done, value){\n  return {value: value, done: !!done};\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_iterators.js\":\n// (function(module, exports) {\nmodule.exports = {};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_library.js\":\n// (function(module, exports) {\nmodule.exports = true;\n/***/ }),\n// \"./node_modules/core-js/library/modules/_object-create.js\":\n// (function(module, exports, webpack_require) {\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject    = webpack_require(\"./node_modules/core-js/library/modules/_an-object.js\")\n  , dPs         = webpack_require(\"./node_modules/core-js/library/modules/_object-dps.js\")\n  , enumBugKeys = webpack_require(\"./node_modules/core-js/library/modules/_enum-bug-keys.js\")\n  , IE_PROTO    = webpack_require(\"./node_modules/core-js/library/modules/_shared-key.js\")('IE_PROTO')\n  , Empty       = function(){ / empty / }\n  , PROTOTYPE   = 'prototype';\n// Create object with fake null prototype: use iframe Object with cleared prototype\nvar createDict = function(){\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = webpack_require(\"./node_modules/core-js/library/modules/_dom-create.js\")('iframe')\n    , i      = enumBugKeys.length\n    , lt     = '<'\n    , gt     = '>'\n    , iframeDocument;\n  iframe.style.display = 'none';\n  webpack_require(\"./node_modules/core-js/library/modules/_html.js\").appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\nmodule.exports = Object.create || function create(O, Properties){\n  var result;\n  if(O !== null){\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty;\n    Empty[PROTOTYPE] = null;\n    // add \"proto\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_object-dp.js\":\n// (function(module, exports, webpack_require) {\nvar anObject       = webpack_require(\"./node_modules/core-js/library/modules/_an-object.js\")\n  , IE8_DOM_DEFINE = webpack_require(\"./node_modules/core-js/library/modules/_ie8-dom-define.js\")\n  , toPrimitive    = webpack_require(\"./node_modules/core-js/library/modules/_to-primitive.js\")\n  , dP             = Object.defineProperty;\nexports.f = webpack_require(\"./node_modules/core-js/library/modules/_descriptors.js\") ? Object.defineProperty : function defineProperty(O, P, Attributes){\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if(IE8_DOM_DEFINE)try {\n    return dP(O, P, Attributes);\n  } catch(e){ / empty / }\n  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');\n  if('value' in Attributes)O[P] = Attributes.value;\n  return O;\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_object-dps.js\":\n// (function(module, exports, webpack_require) {\nvar dP       = webpack_require(\"./node_modules/core-js/library/modules/_object-dp.js\")\n  , anObject = webpack_require(\"./node_modules/core-js/library/modules/_an-object.js\")\n  , getKeys  = webpack_require(\"./node_modules/core-js/library/modules/_object-keys.js\");\nmodule.exports = webpack_require(\"./node_modules/core-js/library/modules/_descriptors.js\") ? Object.defineProperties : function defineProperties(O, Properties){\n  anObject(O);\n  var keys   = getKeys(Properties)\n    , length = keys.length\n    , i = 0\n    , P;\n  while(length > i)dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_object-gpo.js\":\n// (function(module, exports, webpack_require) {\n// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has         = webpack_require(\"./node_modules/core-js/library/modules/_has.js\")\n  , toObject    = webpack_require(\"./node_modules/core-js/library/modules/_to-object.js\")\n  , IE_PROTO    = webpack_require(\"./node_modules/core-js/library/modules/_shared-key.js\")('IE_PROTO')\n  , ObjectProto = Object.prototype;\nmodule.exports = Object.getPrototypeOf || function(O){\n  O = toObject(O);\n  if(has(O, IE_PROTO))return O[IE_PROTO];\n  if(typeof O.constructor == 'function' && O instanceof O.constructor){\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_object-keys-internal.js\":\n// (function(module, exports, webpack_require) {\nvar has          = webpack_require(\"./node_modules/core-js/library/modules/_has.js\")\n  , toIObject    = webpack_require(\"./node_modules/core-js/library/modules/_to-iobject.js\")\n  , arrayIndexOf = webpack_require(\"./node_modules/core-js/library/modules/_array-includes.js\")(false)\n  , IE_PROTO     = webpack_require(\"./node_modules/core-js/library/modules/_shared-key.js\")('IE_PROTO');\nmodule.exports = function(object, names){\n  var O      = toIObject(object)\n    , i      = 0\n    , result = []\n    , key;\n  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while(names.length > i)if(has(O, key = names[i++])){\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_object-keys.js\":\n// (function(module, exports, webpack_require) {\n// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys       = webpack_require(\"./node_modules/core-js/library/modules/_object-keys-internal.js\")\n  , enumBugKeys = webpack_require(\"./node_modules/core-js/library/modules/_enum-bug-keys.js\");\nmodule.exports = Object.keys || function keys(O){\n  return $keys(O, enumBugKeys);\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_property-desc.js\":\n// (function(module, exports) {\nmodule.exports = function(bitmap, value){\n  return {\n    enumerable  : !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable    : !(bitmap & 4),\n    value       : value\n  };\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_redefine.js\":\n// (function(module, exports, webpack_require) {\nmodule.exports = webpack_require(\"./node_modules/core-js/library/modules/_hide.js\");\n/***/ }),\n// \"./node_modules/core-js/library/modules/_set-to-string-tag.js\":\n// (function(module, exports, webpack_require) {\nvar def = webpack_require(\"./node_modules/core-js/library/modules/_object-dp.js\").f\n  , has = webpack_require(\"./node_modules/core-js/library/modules/_has.js\")\n  , TAG = webpack_require(\"./node_modules/core-js/library/modules/_wks.js\")('toStringTag');\nmodule.exports = function(it, tag, stat){\n  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_shared-key.js\":\n// (function(module, exports, webpack_require) {\nvar shared = webpack_require(\"./node_modules/core-js/library/modules/_shared.js\")('keys')\n  , uid    = webpack_require(\"./node_modules/core-js/library/modules/_uid.js\");\nmodule.exports = function(key){\n  return shared[key] || (shared[key] = uid(key));\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_shared.js\":\n// (function(module, exports, webpack_require) {\nvar global = webpack_require(\"./node_modules/core-js/library/modules/_global.js\")\n  , SHARED = 'core-js_shared'\n  , store  = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function(key){\n  return store[key] || (store[key] = {});\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_string-at.js\":\n// (function(module, exports, webpack_require) {\nvar toInteger = webpack_require(\"./node_modules/core-js/library/modules/_to-integer.js\")\n  , defined   = webpack_require(\"./node_modules/core-js/library/modules/_defined.js\");\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function(TO_STRING){\n  return function(that, pos){\n    var s = String(defined(that))\n      , i = toInteger(pos)\n      , l = s.length\n      , a, b;\n    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_to-index.js\":\n// (function(module, exports, webpack_require) {\nvar toInteger = webpack_require(\"./node_modules/core-js/library/modules/_to-integer.js\")\n  , max       = Math.max\n  , min       = Math.min;\nmodule.exports = function(index, length){\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_to-integer.js\":\n// (function(module, exports) {\n// 7.1.4 ToInteger\nvar ceil  = Math.ceil\n  , floor = Math.floor;\nmodule.exports = function(it){\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_to-iobject.js\":\n// (function(module, exports, webpack_require) {\n// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = webpack_require(\"./node_modules/core-js/library/modules/_iobject.js\")\n  , defined = webpack_require(\"./node_modules/core-js/library/modules/_defined.js\");\nmodule.exports = function(it){\n  return IObject(defined(it));\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_to-length.js\":\n// (function(module, exports, webpack_require) {\n// 7.1.15 ToLength\nvar toInteger = webpack_require(\"./node_modules/core-js/library/modules/_to-integer.js\")\n  , min       = Math.min;\nmodule.exports = function(it){\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_to-object.js\":\n// (function(module, exports, webpack_require) {\n// 7.1.13 ToObject(argument)\nvar defined = webpack_require(\"./node_modules/core-js/library/modules/_defined.js\");\nmodule.exports = function(it){\n  return Object(defined(it));\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_to-primitive.js\":\n// (function(module, exports, webpack_require) {\n// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = webpack_require(\"./node_modules/core-js/library/modules/_is-object.js\");\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function(it, S){\n  if(!isObject(it))return it;\n  var fn, val;\n  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_uid.js\":\n// (function(module, exports) {\nvar id = 0\n  , px = Math.random();\nmodule.exports = function(key){\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/_wks.js\":\n// (function(module, exports, webpack_require) {\nvar store      = webpack_require(\"./node_modules/core-js/library/modules/_shared.js\")('wks')\n  , uid        = webpack_require(\"./node_modules/core-js/library/modules/_uid.js\")\n  , Symbol     = webpack_require(\"./node_modules/core-js/library/modules/_global.js\").Symbol\n  , USE_SYMBOL = typeof Symbol == 'function';\nvar $exports = module.exports = function(name){\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n$exports.store = store;\n/***/ }),\n// \"./node_modules/core-js/library/modules/core.get-iterator-method.js\":\n// (function(module, exports, webpack_require) {\nvar classof   = webpack_require(\"./node_modules/core-js/library/modules/_classof.js\")\n  , ITERATOR  = webpack_require(\"./node_modules/core-js/library/modules/_wks.js\")('iterator')\n  , Iterators = webpack_require(\"./node_modules/core-js/library/modules/_iterators.js\");\nmodule.exports = webpack_require(\"./node_modules/core-js/library/modules/_core.js\").getIteratorMethod = function(it){\n  if(it != undefined)return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/core.get-iterator.js\":\n// (function(module, exports, webpack_require) {\nvar anObject = webpack_require(\"./node_modules/core-js/library/modules/_an-object.js\")\n  , get      = webpack_require(\"./node_modules/core-js/library/modules/core.get-iterator-method.js\");\nmodule.exports = webpack_require(\"./node_modules/core-js/library/modules/_core.js\").getIterator = function(it){\n  var iterFn = get(it);\n  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');\n  return anObject(iterFn.call(it));\n};\n/***/ }),\n// \"./node_modules/core-js/library/modules/es6.array.iterator.js\":\n// (function(module, exports, webpack_require) {\n\"use strict\";\nvar addToUnscopables = webpack_require(\"./node_modules/core-js/library/modules/_add-to-unscopables.js\")\n  , step             = webpack_require(\"./node_modules/core-js/library/modules/_iter-step.js\")\n  , Iterators        = webpack_require(\"./node_modules/core-js/library/modules/_iterators.js\")\n  , toIObject        = webpack_require(\"./node_modules/core-js/library/modules/_to-iobject.js\");\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype@@iterator\nmodule.exports = webpack_require(\"./node_modules/core-js/library/modules/_iter-define.js\")(Array, 'Array', function(iterated, kind){\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , kind  = this._k\n    , index = this._i++;\n  if(!O || index >= O.length){\n    this._t = undefined;\n    return step(1);\n  }\n  if(kind == 'keys'  )return step(0, index);\n  if(kind == 'values')return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n/***/ }),\n// \"./node_modules/core-js/library/modules/es6.string.iterator.js\":\n// (function(module, exports, webpack_require) {\n\"use strict\";\nvar $at  = webpack_require(\"./node_modules/core-js/library/modules/_string-at.js\")(true);\n// 21.1.3.27 String.prototype@@iterator\nwebpack_require(\"./node_modules/core-js/library/modules/_iter-define.js\")(String, 'String', function(iterated){\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , index = this._i\n    , point;\n  if(index >= O.length)return {value: undefined, done: true};\n  point = $at(O, index);\n  this._i += point.length;\n  return {value: point, done: false};\n});\n/***/ }),\n// \"./node_modules/core-js/library/modules/web.dom.iterable.js\":\n// (function(module, exports, webpack_require) {\nwebpack_require(\"./node_modules/core-js/library/modules/es6.array.iterator.js\");\nvar global        = webpack_require(\"./node_modules/core-js/library/modules/_global.js\")\n  , hide          = webpack_require(\"./node_modules/core-js/library/modules/_hide.js\")\n  , Iterators     = webpack_require(\"./node_modules/core-js/library/modules/_iterators.js\")\n  , TO_STRING_TAG = webpack_require(\"./node_modules/core-js/library/modules/_wks.js\")('toStringTag');\nfor(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){\n  var NAME       = collections[i]\n    , Collection = global[NAME]\n    , proto      = Collection && Collection.prototype;\n  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}\n/***/ })\n/**/ })\n. (Edited to use `webpack.NamedModulesPlugin` to show module filenames). Shouldn't be these two in the text mode like:js\n        expect(\"\\text{$x\\)}\").toNotParse();\n        expect(\"\\text{\\(x$}\").toNotParse();\n?. \u2764\ufe0f that they are gone and became so simple!. \ud83d\udc4d. I think describing its behavior, i.e., `\\color` will work like LaTeX's `\\textcolor` is better.. The permission(mode) of this file seems to be changed. Note that the executable bit differences can be ignored by `git config core.fileMode false`:\ncore.fileMode\n       If false, the executable bit differences between the index and the\n       working copy are ignored; useful on broken filesystems like FAT.\n       See git-update-index(1). True by default.\n``\n(fromgit-config(1)). ShouldallowAllSymbolsoverrideunicodeTextInMathMode, i.e., should supported unicode characters be allowed in math mode even if!unicodeTextInMathModewhenallowAllSymbols?. The line exceeds 84 letters.. How about creating new argument type, e.g.,sizeOrEmpty?. We already havemkdirp.. @edemaine I'm not sure. But as it's more counterintuitive to disallow _supported_ characters in math mode while allowing _unsupported_ characters, I think this PR's behavior is OK.. Why reuse variables?. Are metrics identical withMath-Italic?. Could you useTODO(without the space), as some IDEs track them and one may dogit grep TODO? . I think these logics should be inmathDefaultormakeOrd. Currently\\mathit{\ud835\udd04}produces\ud835\udd04with metrics forA.. @ronkok I checked out your branch and usingnpm startit renders\\mathit{\ud835\udd04}withoutParseError`:\n\nRegarding the metrics, I was looking at the old source code and got wrong, sorry. It uses metrics of \ud835\udd04 and produces \ud835\udd04.\nThe question is, should math font commands alter them? Currently, mathit renders as-is, e.g., \\mathit{\ud835\udd04} gives \ud835\udd04, whereas other font commands change its font, e.g., \\mathrm{\ud835\udd04} gives A.. Also, it seems that the \\boldsymbol doesn't bolden given character, instead it renders in bold italic.. Regarding their behavior in the text mode, I think it should follow #1217, unless LaTeX commands exist to typeset them in the text mode.. So \\boldsymbol{\ud835\udda0} should give \ud835\udc68 rather than \ud835\udf56, right?. I don't know about flowtype naming convention, but should the name of an interface contain the word Interface?. The type SvgSpan may be confused with the function svgSpan.. @marcianx Yes, I think it's good to go \ud83d\ude04. If all HtmlDomNodes implement HtmlDomInterface, couldn't we use HtmlDomInterface in place of HtmlDomNode?. Does this apply to arrows other than reaction arrows?. It seems that badgesize doesn't support https: https://github.com/ngryman/badge-size/issues/62.. There seems to be two alternatives:\n(i) use shields.io file size badge: https://img.shields.io/github/size/Khan/KaTeX/dist/katex.min.js%3Fref%3Dv0.9.0.svg (Note: the ref part is not an official API)\n(ii) calculate file sizes in release script and create custom badge: e.g., https://img.shields.io/badge/size-234%20kb-brightgreen.svg. ~What about \\u2111 and \\u211c?~ They're in symbols.js. Doesn't compatibility mode usually mean non-strict mode?. Where does it need texlive-font-utils?. Can { className?: string } be {| className?: string |}?. IMHO, I think it's better to have function at the outermost level, i.e., take parts and options as argument and return body.. Comments need to be updated. I thought I saw it somewhere, and there it is \ud83d\ude04 . I think it's nice to have customizability as long as we have simpler options to set them. We may add lots of features to the non-strict mode, and strict option may become too generic.. The indentation of this line seems to be incorrect.. How about allowing all unicodes(non-ASCII) on non-strict mode? (#1217, allowAllSymbols). I think that's where the customizability should come in. Normal users would intend used symbols to be shown, but advanced users or who worries about the layout would want to know unsupported symbol has been used.. ParseNodes are flow-typed by #1276:\nhttps://github.com/Khan/KaTeX/blob/5a4aedd8827776acd737c993b9416c36302465f7/src/ParseNode.js#L66-L73. Where is newRow used?. Can group.value.addHLines = true; be done here?. Could this be done by parser.consumeSpaces()? (same for above). Could this be done using parser.consumeSpaces()?. I think the following is more readable (same for below), but it's matter of personal preference:\njs\n    if (nextTokenIsHLine(parser)) {\n        if (nextTokenIsHLine(parser)) {\n            numHLinesBeforeRow.push(2);\n        } else {\n            numHLinesBeforeRow.push(1);\n        }\n    } else {. I think we can comment it out, as it can be used in the future.. This can be simplified to (same for below):\njs\n    if (numHLinesBeforeRow[0] > 0) {\n        totalHeight += 0.25 * (numHLinesBeforeRow[0] - 1);\n        hlinePos.push(totalHeight);\n    }. How about:\njs\nfunction getNumHLines(parser: Parser): number {\n    let n = 0;\n    parser.consumeSpaces();\n    while (parser.nextToken.text === \"\\\\hline\") {\n        parser.consume();\n        n++;\n        parser.consumeSpaces();\n    }\n    return n;\n}\n(or for loop if you prefer) and. ```js\n    const numHLinesBeforeRow = [];\nnumHLinesBeforeRow.push(getNumHLines(parser));\n\n(same for below)?. @ronkok I thought `hlinePos` is added only once, sorry. I think we can leave as-is.. I think we can do something like:\nnewLine: context.funcName !== \"\\cr\" && (!context.parser.settings.displayMode || nonStrict),\nand return empty space if `newLine` is false.. Typo?. `Change` seems to belong to the removed part(same for below).. The original line seems to be not removed.. I think the name `nonstrict` and `strictBehavior` are confusing and it should start with verb, as they are methods.. Why `&&`?. @kevinbarabash Yes, we're using CircleCI 2.0.. @kevinbarabash `npm_cache_key` includes the checksum of the file `package.json`, so if `package.json` changes, it will not match old caches.. @kevinbarabash It's just for internal versioning of the cache, allowing to invalidate the cache.. I think we can have two categories.. Not part of this PR, but `this.settings.strict` check seems not necessary. (same for above). I think they're okay, but I'm not a native English speaker.. ~`parsing` -> `building` (same for above)~ _GitHub links the comment to the wrong line, this was for `buildAndSetResult`._. Why not use `buildAndSetResult`?. I think we can use `||` and overwrite parameter, i.e., `settings = settings || defaultSetting`.. @edemaine I think these tools should not overwrite files without a prompt or user's explicit informed approval. For its name, I'm open to suggestions \ud83d\ude04 Maybe we can print out where diffs and/or new screenshots have been generated.. Redundant `boolean`.. Test needs to be updated.. @edemaine I forgot ES6 has nice default parameter feature. Nice!. I think blank line here is unnecessary.. Can it return a `documentFragment`?. If it's used only once, I think we should refactor it or create separate method for MathML as `documentFragment` may have HTML-specific features in the future.. \ud83d\udc4d\nI think we can remove new lines between `import` statements as they are single line.. I think we can remove the warning, too.. What does `fun` mean?. I'm not sure why, but `.filter(Boolean)` seems to be more commonly used.. @edemaine Renamed to `new`.. `extract-text-webpack-plugin` doesn't support webpack 4 yet(supported in `@next`), `mini-css-extract-plugin` is used instead: https://github.com/webpack-contrib/extract-text-webpack-plugin/issues/701. Both are automatically set depending on the `mode`.. `hoek`(`v2.16.3`) is no longer required.. `hoek`(`v4.2.0`) is no longer required.. `ssri` is updated.. What\u2019s the difference between defining the macro at the top-level and defining at all levels?. Wouldn\u2019t this increase the complexity to O(k), where k is number of namespaces(groups)? Though, I\u2019m not sure how much it will affect the performance.. I meant the bottom of the stack \ud83d\ude04 But as you said, there is a precedence, so how about deleting the definition if exists and defining only at the bottom?. I was thinking something like:js\nlet namespace = this;\nwhile (namespace.parent) {\n    delete namespace.macros[name];\n    namespace = namespace.parent;\n}\nnamespace.macros[name] = expansion;\n. It seems `\\def`s expect a control sequence right after them, so `\\def{\\foo}{1}` is invalid LaTeX.. @kevinbarabash It works in LaTeX.. With tagged templates, I think we can do something like:js\nconst expectToParse = str => expect(str.raw[0]).toParse();\nexpectToParse\\foo;\nI'll add them to #1336.. It seems they are allowed in optional groups and their scope is limited to the group, e.g. `\\sqrt[\\def\\foo{3}\\foo]{x}` works but `\\sqrt[\\def\\foo{3}]{x\\foo}\\foo` doesn't.. `String(node)` can be shortend to `` `${node}` ``.. Isn't `HtmlBuilder` a subtype of `HtmlBuilderSupSub`?. Shouldn't `ParseNode<A> | ParseNode<B>` be subtype of `ParseNode<*>`?. I think we should have a expression-scope namespace.. +1 for lazily instantiating a namespace. Also, I think `\\gdef` should modify `builtinNamespace`, maybe with a setting to control it.(https://github.com/Khan/KaTeX/pull/1348#issuecomment-391596899). Note to self: as `HtmlBuilderSupSub` accepts less specific input, it's subtype of `HtmlBuilder`.. Note to self: `flow` doesn't allow implicit type coercion.. Too many newlines.. @kevinbarabash As @marcianx said above, from what I understand, `*` doesn't mean \"anything\", rather it is inferred to one (at the compile-time). So `?ParseNode<*>` cannot accept `ParseNode<A> | ParseNode<B>`, as `*` can be either A or B but it cannot be determined at the compile-time.. I think we can remove above warning.. I think we can remove the warning at the top, too.. Nice!\nWhat do you think about moving them to `src/defineFunction.js` like `_functions`?. `!utils.isCharacterBox(valueBase)` -> `utils.isCharacterBox(valueBase)`. Ah, it's also used in `defineEnvironment`. I though they are only defined in `defineFunction`.. @marcianx Too late but what do you think about renaming them to `groupBuilders`?. How about importing `sizingGroup` andjs\nconst newOptions = options.havingSize(6); // simulate \\normalsize\nconst body = sizingGroup([text], newOptions, options);\n```\n?. @marcianx That seems right \ud83d\ude04 . #1337 . Flow seems to break with latest version. CC @marcianx. With v0.69.0:\n\nPreviously, Flow would allow you to write if (foo.unknownProp) { ... }.\nNow Flow disallows testing unknown properties in conditionals. If foo is a\nunion type like { x: string } | { y: number }, x and y are known\nproperties and z would be an unknown property\n\n``js\nPropertymodeis missing inMacroContextInterface` [1].\nsrc/macros.js:97:9\n   97|     if (context.mode === 'text') {\n               ^^^^^^^^^^^^\nReferences:\n   src/macros.js:47:6\n   47|     (MacroContextInterface => (string | MacroExpansion));\n            ^^^^^^^^^^^^^^^^^^^^^ [1]\n. With v0.72.0:js\n - string literal XXX [1] is incompatible with NODETYPE [1] in type argument NODETYPE [2] of property\n   handler.\nsrc/defineEnvironment.js:113:35\n   113|         _environments[names[i]] = data;\n                                          ^^^^\nReferences:\n   src/defineEnvironment.js:84:25\n    84|     handler: EnvHandler,\n                                ^^^^^^^^ [1]\n   src/defineEnvironment.js:30:17\n    30| type EnvHandler = (\n                        ^^^^^^^^ [2]\n\nstring literal XXX [1] is incompatible with NODETYPE [1] in type argument TYPE [2] of the return value of\n   property handler.\n\nsrc/defineFunction.js:208:32\n   208|         _functions[names[i]] = data;\n                                       ^^^^\nReferences:\n   src/defineFunction.js:25:16\n    25| ) => NodeValue;\n                       ^^^^^^^^ [1]\n   src/ParseNode.js:39:23\n    39| export type NodeValue = $ElementType;\n                              ^^^^ [2]\nAlso, it seems `*`(existential type) is deprecated: https://github.com/facebook/flow/issues/6308, https://github.com/facebook/flow/issues/6294. How about `classes.concat(wideFontClass)`?. The test case seems to be mistakenly changed.. Doesn't an optional group start new namespace?. I think `current` should not be accessed directly, and it'd be nice to have expression-scope namespace as we may add other state-macros like `\\df@tag`.. Wouldn't this modify `settings.macro`?. All codepoints point to `27C2`. Is `?` in front of `Token` necessary?. Return type can be `?Token[]` (same for below). I believe this will be useful in many ways, even as a public API! Could you move this to another class or a separate module?. Does `ModuleConcatenationPlugin` reduce build size?. `surrounding`s are one of `DomType`s.. I'm not sure whether we should have seperate test for a macro.. Is it currently impossible to type `expression` and. `group` and. `tree`?. This was unreachable, as `while` is terminated if `nest === 0 && this.nextToken.text === groupEnd`.. @rrandallcainc Set `allowedInText` `true`.. I think macro definitions should also be in `contrib` too.. Is it impossible to do following in the extension:js\nconst mhChemExpansion = ;\nkatex.__defineMacro(\"\\ce\", function(context) {\n    return mhChemExpansion(context, \"ce\");\n});\nkatex.__defineMacro(\"\\pu\", function(context) {\n    return mhChemExpansion(context, \"pu\");\n});\n?\n. @edemaine There are issues of `npm` mixing integrity hashes, https://github.com/npm/npm/issues/16938 and https://github.com/npm/npm/issues/17749, closed but people are still reporting problems.. @edemaine `matchAt` and `exec` both return `null` when match fails, and a `ParseError` will be thrown below.. @kevinbarabash Ah, I didn't know, hence the name match _At_. Added an assertion to check match index matches the last index. Also updated a test case to test regression.. @edemaine Is it possible to feed new string to the lexer? Currently, new `RegExp` instance is created when instantiating lexer.. Does it apply to the `MathML` elements, too?. Also for the first argument of `\\cssId` and `\\class`.. @kevinbarabash I thought there may be use cases of setting both class and id.. @kevinbarabash Yes, if index is not checked, as you said, `exec` will jump to the space and parses successfully.. Changed to use `toParseLike`. (https://github.com/Khan/KaTeX/pull/1336/commits/b3dcf40b9025b25041d7561f4b1a6d8f07c42c0f). There were some cases of using single backslash with `t` resulting in a horizontal tab(`\\t`). (https://github.com/Khan/KaTeX/commit/17ca3840d2820fd1501a5b4d493f1a0771446a66). This should be `\\lrcorner`.. What if `!isAllString`, but has these characters?. @ronkok If then, isn't `isAllString` unnecessary?. If we decide to maintain the extension at this repo, we can dohtml\n\n\n``\nand access the page inhttp://localhost:7936/contrib/mhchem/index.htmlwithnpm start.. @ronkok I was thinking about these two lines.. You can useassertNodeTypefor type checks. (same for above). You can check the digit using predefined map({0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,a:10,B:11,b:11,C:12,c:12,D:13,d:13,E:14,e:14,F:15,f:15}) and checkingmap[token.text] < base. I'm not sure which is more readable.. How does this prevent no font metrics error?. Is this check necessary?. @edemaineparseIntis probably slower thanregex.. @kevinbarabash I borrowed it from python's raw string prefix. Maybetex`, as you suggested above?. @kevinbarabash \n\nDoes the default settings work when undefined is passed as the second arg?\n\nYes. Default function parameters allow formal parameters to be initialized with default values if no value or undefined is passed.. @kevinbarabash I agree that it can be unfamiliar since it's new syntax. However, it's new way to call the function with arguments: an array of strings with raw property, an array of raw strings, and expressions in ${}. As expect accepts any object, it just passes the first argument through and we can handle them in the matchers. Maybe we can document them in the CONTRIBUTING.md?. @edemaine Yes, it will throw an error if there are ${interpolated expressions} and r will return the part before the first one.\nI think we can think of expect.toParse as expect the raw string of the tagged literal to success parsing.. It's not related, but Jest provides a way of creating a table using tagged template literal:\n``js\ndescribe.each\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n('$a + $b', ({a, b, expected}) => {\n  test(returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\ntest(returned value not be greater than ${expected}, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\ntest(returned value not be less than ${expected}, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n``. @kevinbarabash Wouldn't it be same asString.raw`?. @kevinbarabash @edemaine \n\n@ylemkimon apologies for not raising my concerns about expect as a tagged template earlier.\n\nI don't mind. I think productive discussion is necessary.\n\nWhat about expectTex`1 \\over 2 \\over 3` which is equivalent to expect(tex`1 \\over 2 \\over 3`), i.e., the string gets processed before calling expect, instead of requiring all matches to process it?  I think the weirdest part is overloading expect in this unintended way (unless Jest suggests doing this?).\nInteresting.  I was unaware of jest's use of tagged template literals.  expectTex seems like a good compromise.\n\nI still disagree. The purpose of using tagged template literal is to avoid using escape backslashes and simplify test cases. I think using expectTeX defeats this purpose as there is no difference between processing before passing to expect and processing in the matchers, when using KaTeX matchers.. I'm not sure how to flowtype children and this function.. @kevinbarabash initNode doesn't touch prototypes but just initializes properties.. @kevinbarabash It still gives following errors:\n```\nError --------------------------------------------------------------------------------------------- src/domTree.js:34:21\nCannot assign children || [] to this.children because:\n - ChildType [1] is incompatible with ChildType [2] in array element.\n - ChildType [1] is incompatible with VirtualNodeInterface [2] in array element.\n - ChildType [1] is incompatible with HtmlDomNode [3] in array element.\n - property classes is missing in ChildType [1] but exists in HtmlDomNode [3] in array element.\n - property depth is missing in ChildType [1] but exists in HtmlDomNode [3] in array element.\n - property hasClass is missing in ChildType [1] but exists in HtmlDomNode [3] in array element.\n - property height is missing in ChildType [1] but exists in HtmlDomNode [3] in array element.\n - property maxFontSize is missing in ChildType [1] but exists in HtmlDomNode [3] in array element.\n - property style is missing in ChildType [1] but exists in HtmlDomNode [3] in array element.\n - property toMarkup is missing in ChildType [1] but exists in VirtualNodeInterface [2] in array element.\n - property toMarkup is missing in ChildType [1] but exists in VirtualNodeInterface [3] in array element.\n - property toNode is missing in ChildType [1] but exists in VirtualNodeInterface [2] in array element.\n - property toNode is missing in ChildType [1] but exists in VirtualNodeInterface [3] in array element.\n - property tryCombine is missing in ChildType [1] but exists in HtmlDomNode [3] in array element.\n - ChildType [2] is incompatible with VirtualNodeInterface [2] in array element.\n - ChildType [2] is incompatible with HtmlDomNode [3] in array element.\nsrc/domTree.js:34:21\n    34|     this.children = children || [];\n                            ^^^^^^^^^^^^^^\nReferences:\n   src/domTree.js:29:16\n    29|     children?: ChildType[],\n                       ^^^^^^^^^ [1]\n   src/domTree.js:163:15\n   163|     children: ChildType[];\n                      ^^^^^^^^^ [2]\n   src/domTree.js:217:15\n   217|     children: HtmlDomNode[];\n                      ^^^^^^^^^^^ [3]\n``. The polyfill of class inheritance is expensive. #1469 is pending review, but I think it's best to avoid class inheritance.. Could you have a look at questions raised at https://github.com/Khan/KaTeX/issues/1439#issuecomment-399452762 and https://github.com/Khan/KaTeX/pull/1471#issuecomment-404193446? I've tried to makeclassesandstyleoptional and/or separatedocumentFragementfromHtmlDomNode, but it seems to be closely intertwined.. @ronkok Doesn'treplace` do nothing if those letters don't exist?. @ronkok I meant, there won't be much difference, but can we just do:\njs\nchild.value = child.value.replace(/\\u2212/, \"-\")\n    .replace(/\\u2217/, \"*\");\nwithout /[\\u2212\\u2217]/.test(letter) check?. Changing the order to HtmlDocumentFragment | domTree.symbolNode seems to fix $FlowFixMe below and other three $FlowFixMes in src/functions/*.js.\nPossibly because https://github.com/facebook/flow/issues/2455 or it is not a disjoint union and causes problem like https://github.com/facebook/flow/issues/2212 and https://github.com/facebook/flow/issues/5320?. @ronkok Could you change this one, too?. Why $FlowFixMe?. Why these generic types can't be inferred from type?. I think this should be in src/functions/mclass.js since it's mclass-related or in src/defineFunction.js like ordargument.. Array destructuring polyfill is expensive. (#1469 is pending review). cross-env and renamer are required for cross-environment environment variable setting and renaming files. It'd be nice to find a way to do these without them.. I'm not sure it's better to provide concatenated(bundled, e.g., rollup) module.. @marcianx But isn't groupBuilders an array of MathMLBuilder, which is a function returns MathDomNode? So if groupBuilders[group.type] isn't undefined, wouldn't groupBuilders[group.type](group, options) be MathDomNode?. Is there any reason using multiple type import statements for the same module(file)?. Wouldn't this throw if buildExpressionRow returns a documentFragment?. Is group.children[0] always a TextNode?. @kevinbarabash This file was provided by docusaurus as a boilerplate. I think we can remove them, if we don't have any custom styles to apply.. @kevinbarabash There is remarkable-katex. But we don't have control over the version of KaTeX it uses.. @kevinbarabash katex.js is used at the build time, specifically when parsing the markdown, whereas CSS is included in the build result. But now I think, there may be discrepancies between the last release version and the master branch. We probably should copy the CSS from local KaTeX build.. @kevinbarabash Yes, any property can be exported through siteConfig and used in other components.. Or as Markdown is superset of HTML, I think we can just copy its contents for now.. @marcianx It seems it was a bug. \\operatorname or mclass functions would be built to a documentFragment.. @kevinbarabash Node only uses main field, which is extensionless, and when modules are enabled(currently --experimental-modules), Node resolves it to dist/katex.mjs.. @kevinbarabash I'm not sure which use cases will be more common, using individual modules or using the main module.\nIf the latter is more common, we can distribute bundled module using rollup. In that case import-rename won't be necessary.. @kevinbarabash This blocks importing core modules, e.g., fs and path, and using .json modules, which are supported by Node and standard behavior for eslint-plugin-import.. @kevinbarabash The files are built using babel directly with plugins to change import paths and rename files.\nIf we're to distribute the bundled file, we can use rollup and simplify the process.. @kevinbarabash Files that run on Node and are not included in the build.. @kevinbarabash Yes, but it uses AST and I didn't want to use another module bundler.. @kevinbarabash Yes.. @marcianx Could you give any insights? Thank you!. @marcianx That seems nice compromise \ud83d\ude04 . @kevinbarabash Yes, it just looks for the property name. As computed property may depend on the runtime, it doesn\u2019t polyfill methods called using computed property.. @kevinbarabash The last time I checked, it included Iterator and Symbol polyfill, but now I check it seems to be short. I\u2019ll check again and revert if necessary.. @kevinbarabash But then, we should override the Babel preset but I\u2019m not sure there is a clear way to do this.. @kevinbarabash I think we can have lib folder and put configuration files and scripts there.. @kevinbarabash It seems something got mixed up at the last time. The loose mode assumes right hand sided to be an array. I reverted relevant commit. Thank you!. @kevinbarabash I agree functional approach is the best. But in that case, it uses Object.keys() which this PR aims to avoid. I'll open another PR, changing loops to use map, every, filter, find, findIndex, reduce, some, etc.. @kevinbarabash Changing to CSSStyleDeclaration seems to give a whole new errors. ~I'll try to make another PR and if I can't I'll open a new issue.~. @kevinbarabash Unfortuantely, CSSStyleDeclaration seems to be a class but cannot be instantiated without an Element. . @kevinbarabash These files are copied to node_modules/docusaurus at the build.. @ronkok website/static/static/index.css is for the main page(index.html), and for the styles needed in documentations, you can put them in the website/static/css/custom.css or another .css file in website/static/css.. @kevinbarabash Switched to rollup to bundle the ES module. I'm surprised how light and fast rollup is \ud83d\ude04 . I think the name package or using object destructuring, {version} is better.. The second argument seems to be passed by a mistake.. How about wrapping this with try...catch and printing helpful message when the module is not found, i.e., KaTeX is not built?. Could you try to run npm dedupe or deduplicate chalk and ansi-style? It seems they are duplicated many times.. @edemaine I originally thought this ignores website/build/ generated by #1484 too, but its PR adds it as separate entry. I'll remove it.. You can pass the default value as the third argument or fourth argument(if collector function is present).. Shouldn't --selenium-port, --katex-port, --attempts, and --wait(below) be collected as an integer(parseInt)?. I think it's better throw an error along with the original error(e), as the exit code should be non-zero and there may be other causes than dist/katex.js missing(debuggability).. ~How did this work?~ nonnom matches the argument to the options name, too. This may be an unintended breaking change.. Array.push returns the new length. This should be\njs\n(def, defs) => {\n    defs.push(def);\n    return defs;\n}. I think console.error is more appropriate, as it prints to stderr.. The file permissions of package.json and package-lock.json have been changed to 755.. --strict and --max-size both have the same short form, -s.. @edemaine As rimraf resides in the node_modules, it is impossible to delete node_modules with rimraf \ud83d\ude04. I'll change dist/* to dist/.. >  13:1  error  Line 13 exceeds the maximum line length of 84  max-len. You can(and should, as markdown parser sees it as HTML open tag) use ---.. @kevinbarabash It seems so.. @edemaine I don't think String.raw is as important as others.. @edemaine ~I'm not sure about the other two comments.~. @edemaine The downside is that it'll output the command in the help, i.e., node cli.js --help.. @edemaine I've added the link to the list of supported commands.. @edemaine I've added a section about the extension.. @edemaine Changed to Options.. Yarn passes the argument without the need of \u2014.. @kevinbarabash Yarn doesn\u2019t store npm credentials and requires them when yarn publish.. @kevinbarabash I thought only certain commands can pass through, but it seems every commands can be pass through:\n\nIt\u2019s also possible to leave out the run in this command, each script can be executed with its name.\nNote that built-in cli commands will have preference over your scripts, so you shouldn\u2019t always rely on this shortcut in other scripts.\n\nOne place where our script may clash with built-in commands is clean, but Yarn won't be using it: https://github.com/yarnpkg/yarn/issues/2438.\n~Removed run from all yarn run commands.~ I didn't notice that push had failed. Opened #1528.. @edemaine Yarn's login is different from npm's login. It's more like git config --global user.name \"John Doe\"; git config --global user.email johndoe@example.com. \n\nLater when you run a command that requires authentication such as yarn publish, you will have to enter your password to do so.. @edemaine Have you tried  yarn owner list katex?. @edemaine AFAIK, the purpose of this check was that one can't npm publish without npm login. However, it is possible to yarn publish without yarn login.. Instead of copying files, we can use build artifacts from CircleCI build. However, this needs a CORS proxy. Or we can use deployed files from netlify.. @edemaine Done!. Now we have \\url too.. Is it possible to deduplicate mode and loc using ~intersection types(&)~ object spread? (https://github.com/facebook/flow/issues/2626). ```diff\ndiff --git a/src/ParseNode.js b/src/ParseNode.js\nindex 26b2bbe..7f8cc10 100644\n--- a/src/ParseNode.js\n+++ b/src/ParseNode.js\n@@ -7,7 +7,14 @@ import type {Token} from \"./Token\";\n import type {Measurement} from \"./units\";\n\nexport type NodeType = $Keys;\n-export type ParseNode = $ElementType;\n+type ParseNodeBase ={|\n+    mode: Mode,\n+    loc?: ?SourceLocation,\n+|}\n+export type ParseNode = {|\n+    ...$ElementType,\n+    ...ParseNodeBase\n+|};\nexport type LeftRightDelimType = {|\n     type: \"leftright\",\n@@ -31,20 +38,19 @@ export type SymbolParseNode =\n     ParseNode<\"textord\">;\n// Union of all possible ParseNode<> types.\n-export type AnyParseNode = $Values;\n+export type AnyParseNode = {|\n+    ...$Values,\n+    ...ParseNodeBase\n+|};\nseems to work, not sure it's correct.. There is a BOM (byte order mark) present, which seems to prevent parsing the metadata. Removing it seems to fix the issue:diff\ndiff --git a/docs/supported_alpha.md b/docs/supported_alpha.md\nindex 0b75caf..8585a93 100644\n--- a/docs/supported_alpha.md\n+++ b/docs/supported_alpha.md\n@@ -1,4 +1,4 @@\n----\n+---\n id: supported_alpha\n title: Functions Sorted Alphabetically\n sidebar_label: Functions - Alpha Sort\n``. I think it should mention it contains unsupported functions.. MaybeFunction Support,Support MatrixorSupport Table, as it contains unsupported functions?. How about adding a link to detexify?. Missing backslash in the source. Source doesn\u2019t match. Example doesn\u2019t use\\renewcommand. It seems there is a bug with\\textdaggerdbl`.. Missing closing braces. (emdash and endash). $ in the source. Backslash not visible in the source (needs escaping). Backslash not visible in the source (needs escaping). Backslash not visible in the source (needs escaping). Backslash not visible in the source (needs escaping)\nBackslash instead of slash is used in the closing tag. @ronkok Maybe like:\n\nKnow the shape of a character that you want, but not its name? Draw it here!\n\n(http://www.onemathematicalcat.org/MathJaxDocumentation/TeXSyntax.htm)?. @edemaine Run \nbash\ncd website\nyarn run version 1.0.0\nyarn run version 2.0.0. @edemaine yarn version command copies current docs and sidebars.json into website/versioned_docs and website/versioned_sidebars, respectively, and edits versions.json.. @edemaine They will be restored after yarn version, which clones the current documentation.. @edemaine It'll be given next version tag, which one can access by selecting master in the versions page.. @edemaine --new-version is not needed for version.. @edemaine Yarn has built-in version command: https://yarnpkg.com/en/docs/cli/version. It should be yarn run version, sorry.. @edemaine Also the version script seems to not run prestart, so it might give an error about cli.md missing, if it is never run. I'll commit the changes.. #37 . #164 . #471. #750. #898. #1003. #1003. #1413. Can we do \\\\' instead of `\\'</code>?. It\u2019d be nice to have a link to KaTeX contributors. Or better, have a page of [all-contributors](https://github.com/kentcdodds/all-contributors/blob/master/README.md) in the documentation.. IE9 doesn't supportclassList`. You can do:\n```js\n// normalize className to use indexOf for searching\nconst className = ' ' + childNode.className + ' ';\nconst shouldRender = optionsCopy.ignoredTags.indexOf(\n    childNode.nodeName.toLowerCase()) === -1 &&\n    optionsCopy.ignoreClasses.every(\n        x => className.indexOf(' ' + x + ' ') === -1)\n``. You can use/js/scrollspy.js.. Wrap this in a closure (IIFE) to prevent polluting global scope. Or wrap in a function and attach toDOMContentLoadedto cache elements and positions (https://github.com/Khan/KaTeX/pull/1557#discussion_r208097556)..readyis only available on jQuery. You should useDOMContentLoaded.. The script is included in the, so callingonScrollhere has no effect.. I think the nameOFFSETis better. (All caps, as it's a constant). You can cache (pre-calculate) this value afterDOMContentLoaded. You can also probably cache positions of their headers, but I'm not sureDOMContentLoadedwaits for fonts to be loaded and rendered..scrollBottomis not used.. All browsers except IE<9, which Docusaurus and we don't support, supportwindow.pageYOffset(https://developer.mozilla.org/en-US/docs/Web/API/Window/pageYOffset).. I think we can cache positions of headers based on thescrollHeight. i.e., update cached positions ifscrollHeighthas been changed. (AFAIK, modern browsers supportdocument.documentElement.scrollHeight). I think it is no longer based on it.. This should becurrent = top > scrollTop + OFFSET;. I think we can check whether cache is available here, i.e.,const findHeadings = () => headingsCache || document.querySelectorAll('.toc-headings > li > a');.. I think throttling is more suitable than debounce. (This will debounce, i.e., run only once after repeated scrolling). @edemaine I was thinking one of:\n* a link to https://github.com/Khan/KaTeX/graphs/contributors\n* a documentation page ([example](https://babeljs.io/team))\n* Contributors section in README ([example](https://github.com/kentcdodds/all-contributors/blob/master/README.md#contributors)). @edemaine Done.. @edemaine Sorry, it turns outbaseUrlis needed for scripts path. I'll open a PR.. I think Khan Academy should be on a separate section or the first, as this project is maintained by them.. ~This is to support browsers that don't supportdefer, but I'm not sure it's necessary.~ I don't think it's necessary.. @edemaine They probably will be compressed on most servers.. @edemaine Not that I can think of. There seems to be [htmlhint](https://www.npmjs.com/package/htmlhint), but I haven't used it.. @edemaine Yes, thank you!. @edemainedocsis at the same level ofwebsite, so../docs/cli.mdis correct path. I'm not sure cases of runningbuild.jsdirectly.. @edemaine Fixed.. @edemaine It is run beforestart, but since it's single command and to be consistent with others, we can movenode lib/build.jstostart. What do you think?. @edemaine This isremarkable-embedplugin and is to fix absolute path issue (#1525 and #1520). Thetag gets inbody > div.navPusher > div > div.container.mainContainer > div > div.post > article > div > span > p > link.. @edemaine I think we can move stylesheet after the first paragraph.. That seems to fix the issue.. @edemaine I've committed the requested change in #1584. I'll commit the changes here, if it gets disapproved.. @edemaine Most JavaScript library repos I know useLICENSEand GitHub initializes the repo withLICENSE.. @edemaine Done.. @kevinbarabash No, I don't think so. I just copied this fromstatic/index.html.. @kevinbarabash It no longer requires extension-less import statement and is just a style change.. @kevinbarabash This also includes the link to KaTeX organization. Should I remove it?. @kevinbarabash No, this is for the stylesheet inclusion.. @kevinbarabash Theupdate-sri.jsscript updates the hash.. @kevinbarabash Could you suggest how should I write it?.Gatsbyis alphabetically beforeGitLab.. High resolution logo seems to be available in https://github.com/benweet/stackedit/blob/master/src/assets/iconStackedit.svg and https://github.com/benweet/stackedit/blob/master/src/assets/favicon.png.. @edemaineset -e -o pipefailis set and the script will fail if any command returns non-zero.. @edemaine Arguments ofnode update-sri.jsandgit adddiffer from when running on the master branch (for the first time).. What do you think ofKaTeX was built from the hard work of all these contributors.. @edemaine I was just thinking to append the new line after existing line.. Thepinnedproperty of users are not used.. This should bebaseUrl + 'img/gradescope_logo.png'. @kevinbarabash Yes.. @kevinbarabash Yes, it's bash substitution.. @kevinbarabash Yes, and the next version is not used for the second run, so it can be omitted.. @kevinbarabashyarn cleanremoves thenode_modules, and actuallyyarn distincludes cleaning thedist. But as it's the Git that manages files, I assume it's for creating a pristine working tree.. @kevinbarabash The backslash escaping the slash in the character group,[^\\/\"'], is removed as it's not necessary.. @kevinbarabash FireFox >= 16 supports without the prefix: https://caniuse.com/#feat=css-animation. @kevinbarabash I move the check to the top level.. @kevinbarabash Counterintuitive, but ourcleanscript deletes thenode_modules:\nhttps://github.com/Khan/KaTeX/blob/46e7939fa921128d7c11f15b24541c3501e7d006/package.json#L83. Some style guides prohibits the use of exported name as a property of default export.. How about capitalizingwebpackDevServer`?. https://github.com/Khan/KaTeX/pull/1633#discussion_r211074256 by @edemaine \n\nYou seem to be missing prev.italic = next.italic;. NodeList.prototype.forEach() is not supported by IE and old browsers. You can use Array.prototype.forEach.call.. fragment.childNodes is a NodeList and it doesn't have map method. You can use Array.prototype.map.call.. text is a String, and it doesn't have map method.. @kevinbarabash JSON would be useful for handling in Node script. I removed clover reporter.. How about moving instanceof checks to canCombine?. @kevinbarabash AFAIK, after if (!(prev instanceof SymbolNode) || !(next instanceof SymbolNode)) return;, flow would refine them as SymbolNode.. We aim NPM scripts to be cross-platform, including Windows, as possible. Therefore unfortunately, we cannot use POSIX features. Also please use rimraf instead of rm.. Why not both?. @edemaine It will clone GitHub Pages repository fresh, which is Khan/KaTeX for KaTeX, and therefore it is set to origin.. @edemaine I've added npm() { echo \"npm $*\" }.. @edemaine It's because we lint JS and CSS in static and website.. @edemaine YAML and Bash don't process escapes in single-quoted string, so it'll be safely parsed as regex escaping a dot.. But the user may want to ignore some tags and other elements by another criterion.. @edemaine I've changed to only update URLs prefixed with katex, e.g., /static/katex.min.css.. @edemaine Sorry, I forgot the original replacement string was {@stylesheet: katex.min.css}. Other static assets than KaTeX and index.css are not served from /static/, so I think it's safe to assume it's built KaTeX files. I've changed to capture the file name.. @edemaine I've amended the last commit. (4dbf4fc). Could you add a comment this is not comprehensive?. Every supported 6-letter color names seem to be out of hexadecimal digits range ([0-9a-f]). I think it'd be better to test for [0-9a-f]{6}. Also, why not support 3-digit color codes?. (The \"polyfill\" or \"polyfilling\" here refers to core-js aliasing)\n\n@kevinbarabash Unfortunately, @babel/plugin-transform-runtime doesn't use Browserslist (yet), so it includes every polyfill even if all target environments support it or it isn't needed. So I think it's better to whitelist (enable core-js aliasing if needed or manually add) polyfills than blacklist (use computed property) them.\n\nAfter careful consideration:\n- Polyfills are generally expensive\n- ES modules of core-js@2 is not available, it needs to be wrapped in ES module to use in the ESM build (rollup)\n- We have removed codes that require polyfill in #1469, #1470, #1563, and #1591 \n- We added a warning (linter) against code that requires polyfill in #1597\n- Babel 7 separated out Babel's helpers from its polyfilling behavior in runtime, transform-runtime no longer polyfills by default. Therefore, I've disabled automatic core-js aliasing, which is default in Babel 7, and changed to warn that it is not polyfilled and adding polyfill may be needed.. @kevinbarabash I've added an ignore option to no-transform-runtime-aliasing and ignored JSON.stringify, parseInt, and parseFloat. which clearly don't need polyfill.. @kevinbarabash This PR updates some package versions by yarn.lock. You need to yarn install first. (If you did, maybe due to recent NPM downtime: https://status.npmjs.org/). This can be just color,.. @kevinbarabash It is provided by Algolia. It is Search-only API Key, which is safe to use in front-end code and in production. Also, Docusaurus documentation suggests entering the API key to its configuration: https://docusaurus.io/docs/en/search.. @leungbk I was thinking of that this list doesn't cover every CSS properties, and we should mention that one should add the property manually if needed.. @kevinbarabash We don't have index.html for docs directory, so people going to https://katex.org/docs will have 404. Also previously, there were 404s due to wrong URLs (docs/en, #1507), so this redirects docs/en/XXX to docs/XXX.. @kevinbarabash AFAIK, yarn and yarn install is equivalent: https://yarnpkg.com/en/docs/cli/#toc-default-command. The CircleCI build failures are due to old Yarn version (which #1658 addresses).. @kevinbarabash But we may (unwittingly) break something in development environment on Node 6, if we test it on Node 10.. @kevinbarabash It parses json, it is equivalent to\njs\nvar result = JSON.parse(pipe).base.sha;\nif (result != null) return result;\nreturn \"\";\nin JS.. @kevinbarabash Custom commands and parameters are new features in CircleCI 2.1.. @kevinbarabash\nIt is possible to specify multiple images for your job. Specify multiple images if, for example, you need to use a database for your tests or for some other required service. In a multi-image configuration job, all steps are executed in the container created by the first image listed. All containers run in a common network and every exposed port will be available on localhost from a primary container.. @kevinbarabash We also run them for pushed commits.. @kevinbarabash It transforms import katex from \u2018katex\u2019 to import katex from \u2018../katex.mjs\u2019 as browsers cannot resolve a module by its name by spec.. @kevinbarabash copy-tex imports a CSS module that ESM doesn\u2019t support. So it uses separate entry point for webpack.. @kevinbarabash The issue seems to be fixed.. I'm not sure what variant \\mathnormal should use, but as it acts similar to the default math font, I used null (none).. @ronkok The url argument is hardcoded in the Lexer and the Parser:\n\nhttps://github.com/Khan/KaTeX/blob/f71f469d4b3ca97654702a0807e736d176f4c4c5/src/Lexer.js#L49-L52\nhttps://github.com/Khan/KaTeX/blob/9b7e10e4f753786f125254a79d7cd88acc08afd4/src/Parser.js#L916-L917\nYou'll need to update regexes.. @ronkok In Parser, there are escaping routines and allowed protocol checks:\nhttps://github.com/Khan/KaTeX/blob/9b7e10e4f753786f125254a79d7cd88acc08afd4/src/Parser.js#L926-L938. It'd be very nice to get rid of its only usage:\nhttps://github.com/Khan/KaTeX/blob/f71f469d4b3ca97654702a0807e736d176f4c4c5/src/functions/supsub.js#L183-L187. I've tried inserting before the current node, but it inserts spacing after the\\newline and probably breaks other things.. It is possible to traverse only once, but it's more complicated since it needs to retain previous spacing information. I'm not sure which is more optimal.. Bumped cache version because old cache seems to having wrong style-loader version.. @kevinbarabash Should we remove mode === \"text\"?. @kevinbarabash If we insert the spacing before the current node, the spacing is inserted after the newline, if present, causing an indentation at the start of the new line:\nx+[newline]\n[spacing]a. @kevinbarabash Semi-simple group is mentioned in _TeX: The Program_, but I really cannot find a reference regarding its spacing or the fact that it doesn't create a mathord.. @kevinbarabash Lexer normalizes whitespaces to a single space(` `). I think it's better to look at the source, instead of separating whitespace token and newline token.. @kevinbarabash If we allow unmatched braces, it's impossible to determine where the group ends, without forbidding a right brace.. @kevinbarabash Yes, it's context-dependent.. @kevinbarabash Currently, it seems there is no way to define a function cleanly in the tests. I've updated existing test case below.. @kevinbarabash But the markup result is too complicated, with a lot of unnecessary parts.. @kevinbarabash The spacing would not be applied properly, (can be fixed by #1706) and the result would be more complicated. But code will become simpler and more type-safe.. @kevinbarabash `]` is normally not a special character, but just a right square bracket. The optional argument is implemented using delimited arguments: https://tex.stackexchange.com/questions/99495/inside-an-optional-argument. I'm planning to improve its logic in #428.. @kevinbarabash I've removed `like fragment`.. @kevinbarabash I think it's better to have it close to `instanceof` checks.. @kevinbarabash The callback function will be only called on non-partial groups.. @kevinbarabash Fixed.. @kevinbarabash I've renamed the function to `traverseNonSpaceNodes` and added comments about its usage. We really need a way to unit-test functions.. @edemaine It's because versioned docs are not updated. You can check them in https://deploy-preview-1700--katex.netlify.com/docs/next/supported.html.. @edemaine Three tests were duplicate of lines 98 to 114.. @edemaine Actually the position is 1-based, and it has changed from the `^` to the `\\`, and I think it makes more sense.. @kevinbarabash I've added a link to stack exchange answer, as it has enough up-votes.. Sorry, this is probably on me \ud83d\ude22 I use Windows and have created file with CRLF line endings..suggestion\n    display: -ms-flexbox;\n    display: flex;\n.suggestion\n    -ms-flex-direction: column;\n    flex-direction: column;\n.suggestion\n    -ms-flex-pack: justify;\n    justify-content: space-between;\n. @kevinbarabash I think it's better to handle rounding when calculating the number. If we do it in `toNode`, we need to detect numbers in string, involving converting the string back to number and may give false positives.. `rightleftarrows` seems little bit off on Chrome:\n![image](https://user-images.githubusercontent.com/888148/48466088-21e82d00-e828-11e8-92b5-e52e50088d07.png)\n. I think we should include KaTeX issue tracker.. Could you include the diff (patch) file between MathJax mhchem and this?. It is not necessary to wrap the code, as it is packed to a module..suggestion\nimport katex from \"katex\";\n```. @ronkok It'd allow using this extension with module loaders, i.e., on Node(CJS) or AMD/ESD.\n@kevinbarabash Webpack will try to detect which module loader is used and if there is no module loader is detected then katex from global variables is used.. @kevinbarabash As the catcode of % is 14 at the time of lexing the macro definition, it is ignored and therefore expanded to 1 2.. @kevinbarabash The next token is lexed when consuming the current token, i.e., previous consume() call. Here the single character is already in the this.nextToken, and resetting the catcode is for lexing a token after it.. @kevinbarabash Multiple characters should be enclosed in brackets, in url too.. @edemaine Don't mind \ud83d\ude04 As @kevinbarabash suggested, document.createTextNode(this.text) will work, but probably the following needs to be changed, too:\nhttps://github.com/KaTeX/KaTeX/blob/b2432e8ad238dbb723d5f3c83c530fe31fadfee6/src/functions/operatorname.js#L101-L106. What do you think of deprecating allowedProtocols and allow setting allowed protocols for \\url and \\href here?. I think we should provide context information as the second argument like:\n{\n    type: \"url\",\n    url: \"https://katex.org/image.png\",\n    protocol: \"https\",\n    ...\n}\nor\n{\n    type: \"html\",\n    class: \"my-class\",\n}\nto allow setting across commands and prevent mis-parsing the url.. @ylemkimon As yarn start is for the debugging, I think it's better to throw on error and debug on the developer console.. It seems rounding errors accumulate over the loop. Could you move the rounding out of the loop?. suggestion\n            currPos += elem.height + elem.depth;\nIt seems currPos is not used directly and rounding is not necessary.. suggestion\n     pstrut.style.height = utils.round(pstrutSize) + \"em\";. suggestion\n    pstrutSize += 2;. suggestion\n      * Converts the text node into a string. suggestion. Is there any other library that can do this?. @kevinbarabash I'll add:\n\nIf your installation is available on the web or you can provide a minimal repo that reproduces the bug, please add the link to it.. \n",
    "dylanb": "MathML is definitely the most \"future-proof\" solution but unfortunately does not work everywhere yet so the answer depends to a large degree on your platform support requirements/desires. Am I correct in assuming that you want to support all platforms? How far back do your for example want to go in supporting IE?\n. If you want broad support including IE8, then your only solutions if you do not always want to render MathJAX are:\n0) Implement MathML and your own rendering by default, use aria-hidden to hide your rendering from screen readers.\n1) Allow the user to turn on MathJAX (for support on platforms that do not support MathML) - a11y people will tell you that this is self identification by people with disabilities, and balk at an approach that only does this,\n2) Hybrid of 0 and 1, where instead of MathML, the user can switch to MathJAX on platforms that do not support MathML\n3) Implement a natural language renderer of math\nIndependent problems:\na) When you have a combination of input fields within the math (for example in an assessment), where do you put these input fields? MathML does not support this. A natural language render could support this. Annotations within MathML (for the MathML approach) have been suggested as a way to deal with this but support for this is untested as far as i know.\nIf you have the resources, I would suggest #3 because if you can make this code as fast as your current code, then you would have made the world of accessible math much better. Biggest problem here is translation.\n. @xymostech The screen reader support varies and requires additional plugins in order to work on all platforms (MathPlayer is required on Windows machines for example). The bottom line is that you will have to test support on all your platforms. If additional plugins are an acceptable solution for your users, then MathML might be the best approach.\n@spicyj The clip rect mechanism is one of the offscreen mechanisms that work well with all screen readers because the browser still exposes the HTML structure in the accessibility tree.\n. @mathiasbynens what problem was this supposed to solve?\n. I think it would be good to separate out the two different issues:\n\nMake the parse tree better (documented, more regular etc.), and\nShould the output continue to support MathML?\n\nIt seems to me (and I am just a casual observer), that you are using KaTeX for the equivalent of presentational MathML and you are using MathML for semantic markup.\nAm I correct in assuming that the ideal scenario for you would be if you could rely on MathML for the semantic presentation and no longer have to develop your own serialization?\nIf this is the case, then the answer to whether you should drop MathML support should probably derive from the answer to the question of would it be easier (less work) to re-implement MathML in X (pick a time frame) years (if it has become mature) or would it be easier to continue to support both?\nAdditionally, you might want to consider the issue of languages - how many languages will you need/want to support and when. MathML, being semantic, is language independent and will translate automatically on any system that supports MathML (assuming this system also supports the required target language).\nMy gut instinct is telling me that the right thing is to both continue to improve your technology, while at the same time maintaining MathML support.. Also, you might find this interesting http://accessibility.pearson.com/mathex-app/index.html. ",
    "ctoth": "Absolutely not. Screen reader detection is not reliable, and there are \nother potential use cases/technologies that render MathML outside the \ntraditional screen reading paradigm.\nOn 9/15/2014 2:46 PM, Emily Eisenberg wrote:\n\nWe go back to IE 8 in our support. We're not planning on supporting \nany further back. We'll talk about what it would take to support \nMathML. Would this be something that you would enable only when \nsomeone is using a screen reader?\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/Khan/KaTeX/issues/38#issuecomment-55655988.\n\n\n```\n    -Q\nAccessible Software for the Blind\n```\nhttp://GetAccessibleApps.com\n. ",
    "fred-wang": "More generally, it would be good to expose a MathML output so that users of accessibility tools or of browsers with native MathML support could switch to that mode instead.\n. If you expose both MathML and your HTML output, then it would be possible to write browser extensions to automatically switch to MathML for people who want that (e.g. https://addons.mozilla.org/en-US/firefox/addon/mathjax-native-mathml/ or https://github.com/fred-wang/mathjax-native-mathml-safari). You could also write some kind of UI like MathJax does (it uses a menu and a preference cookie).\n. For server-side, I think the best is to served both markup (MathML and HTML) so that math search, feed reader and other web crawlers could have access to the MathML (cc'ing @brucemiller, @physikerwelt, @kohlhase, @dginev, @huxuan who have done some work on math search). The overhead of the MathML conversion/source should be small compared to the HTML one.\n. > In browsers that don't support MathML (like chrome), is the MathML still accessibile even though it isn't rendered correctly,\nYes, with chromevox. I think Design Science is also working on a library that works on various browsers, including Firefox and Chrome.\n\nor does the browser need to have support for it in order for screen readers, etc to understand it?\n\nAn additional note: for WebKit Mac, the Accessible tree relies on information from the render tree (so for example this does not work very well if you hide the math with \"display: none\", even if you use some aria attributes to make the MathML important for accessibility...).\n. This will certainly work for DOM-based accessibility tools. That might work for Safari+VoiceOver but I can't tell for sure. As I recall, Chris Fleizach (a10y engineer at Apple) suggested something along these lines when we discussed that for MediaWiki.\n. @NSoiffer You can try it on http://katex.xymostech.com/\n. Yes, the fact that the MathML rendering is hidden is a problem for assistive technologies that rely on the visual rendering such as sync highlighting or, as mentioned by Apple devs, touch screen support. However, the main issue is that KaTeX currently does not generate MathML at all, so Emily's work is already a big progress. This generates MathML + HTML with only CSS selectors to select which one that is visible, so assistive technologies can immediately obtain the MathML DOM and it's easy to write a browser add-on / greasemonkey script to force MathML to be rendered for more advanced assistive technologies or native browser rendering.\n. Follow-up issues for people who care about the visual rendering too:\nhttps://github.com/Khan/KaTeX/issues/197\nhttps://github.com/Khan/KaTeX/issues/198\n. For the record, I've updated my mathjax-native-mathml extensions to force KaTeX to display its MathML output too:\n- Mozilla add-on: https://addons.mozilla.org/en-US/firefox/addon/mathjax-native-mathml/\n- Safari add-on: http://fred-wang.github.io/mathjax-native-mathml-safari/mathjax-native-mathml.safariextz\n- Greasemonkey script (unfortunately that one does not work well due to issue #197): https://openuserjs.org/scripts/fred.wang/MathJax_Native_MathML/\n. > I set up a testing site at http://katex.xymostech.com/ If anyone with a screenreader would like to test it out, that would be great!\nThe first minus sign is incorrectly converted into an mi element (instead of an mo element).\n. I just got a reply from Chris Fleizach (Apple, VoiceOver):\n\nI did some basic testing and it seems to be working as expected, so it\u2019s looking good!\n. > Interesting. Is there a place where that is documented? This table seems to indicate that the default is always largeop=\"false\".\n\nThe table has \"set by dictionary (false)\" so this means we pick the value from the dictionary or otherwise fallback to \"false\". The MathML3 dictionary is http://www.w3.org/TR/MathML/appendixc.html and is used in Gecko-based, WebKit-based browsers, MathJax etc\n\nI'm a little hesitant about using the  tag because it doesn't look like it's supported anywhere but in Firefox. I guess MathML itself isn't that well supported either in other browsers (:disappointed:), but I'd worry about breaking support on things that work now. What do you think?\n\nI'm not sure what you mean by \"not supported\". Gecko-based and WebKit-based browsers have MathML support (including for the semantics tag). Even recent Blink-based browsers have some support for the semantics element: the TeX source is shown to workaround the lack of native MathML support. But semantics support should be irrelevant for accessibility? Or maybe Chrome's semantics implementation is breaking support in ChromeVox? (in that case they will probably fix that soon, since Wikipedia uses the semantics element too and I ask them to test it... and it's just a matter of overriding the default CSS stylesheet).\nAlso, I personally think people should use and encourage standards so \"Chrome does not support MathML rendering\" is never an excuse ;-)\n\nI also found this stackoverflow question about adding alt text for math nodes. \n\nAs I recall, altext is more to provide a readable description equivalent to alt (the page you mention indicates \"spoken math\" not source) while semantics is to provide alternative representation of the formula (TeX source, image etc) that can be accessed by copy and paste etc I know that tools like LaTeXML use the TeX source for alttext and put it in a semantics annotation too... Wikipedia uses the semantics annotation. And I believe MathJax has an option to expose the TeX as a semantics annotation.\n. ",
    "dginev": "Oh, lovely, we now have a serious MathJaX-like competitor. While I am extremely happy to see there is effort invested in better math on the web, it also pains me to see projects with a big component dedicated to circumventing the stubbornness of mainstream browsers. I went back and bumped the Chromium issue, has been a while since I talked to that wall:\nhttps://code.google.com/p/chromium/issues/detail?id=152430#c99\nI heartily +1 the suggestion to have a MathML output, as it is the standard markup language for representing mathematics in XML documents, as well as on the web (HTML5). ePub3 is another MathML-enabled format, where this could be really handy. \n. ",
    "MoritzGiessmann": "+1 for MathML support instead of span elements!\n. ",
    "kohlhase": "You should really invest in MathML (content & presentation in parallel markup). You should see MathML as a standardized interface that allows externals tools to do what they do best. A11y is a good example of this, if you have MathML, you can feed it to a Math-aware screen reader. There are multiple examples of this, e.g. formula reader by Design Science that is integrated into Mathplayer. With MathML, a11y tools share a common basis and can compete on merits. A similar case is Math Search, there are various search engines that take MathML (content/presentation) as input and offer different functionalities  on this basis (see e.g. http://ntcir-math.nii.ac.jp/ for a Math IR challenge and an overview). \nIn the long run, everyone wins from having open standards. \n. ",
    "NSoiffer": "+111111 for using MathML.\nIt is a rather strange situation that accessibility support for MathML is ahead of mainstream rendering support. In Safari, Apple has added accessibility support (speech and navigation) for MathML in connection with VoiceOver. The visual rendering in WebKit is still weak, but it is getting better thanks to Fred Wang and others.\nIn Chrome, ChromeVox can speak and navigate the math even though it is unable to render it. So if you hit a page with MathML, you can turn on ChomeVox to listen to and understand what the browser can't render :-) Of course, most people use MathJax to deal with this problem.\nIE8 & IE9 have MathPlayer to do the rendering and the speech and most AT software works with it. Sadly, IE stopped support for plug-ins, so MathPlayer doesn't work in the latest versions of IE. However, as someone mentioned, we are (hopefully) close to releasing a replacement that will speak and navigate math in all browsers. With MathJax rendering MathML, you have an accessible solution. Also, IE11 added an \"enterprise mode\" partly to support legacy plugins. Unfortunately, it's buggy and IE crashes when MathPlayer renders math in some cases. There's an open bug on this and maybe it will get fixed. If so, there's a path to having visual display and accessibility in IE with MathML.\nWith that background, you can see why so many people suggest using MathML for accessibility.\nThe problem that you face, and one that MathJax also faces is what to do when rendering non-MathML input. I see three short term solutions:\n1. Expose the MathML based on some setting. As mentioned, you don't want to do this all the time due to problems with rendering it in all browsers.\n2. Do what MathJax does and expose a function that returns the MathML. Unfortunately, that's not a good solution for screen readers because external (C++, etc) programs can't universally call JS. You can call JS in IE, and I think you can in Firefox if you write an add-on and the C++ calls the add-on via XPCOM, but I haven't found a way to do it in Chrome [if anyone knows, please provide a link].\n3. Use a hack where you put the MathML somewhere it won't rendering such as in a script tag or in a data-mathml attribute on some span or other element. That will only work if you can convince Apple and ChromeVox and AT vendors to look for the MathML wherever you hid it. Khan Academy is a pretty important website, but I don't know if it is important enough to get Apple and others to do something special in their accessibility solution.\nThe better long term solution is to consider using a shadow DOM assuming it catches on. That way you expose MathML to the world but stick your (ugly) spans in the shadow DOM and no one has to see your implementation. Looking at http://caniuse.com/#feat=shadowdom, Shadow DOM only currently works with Chrome and with Firefox with the dom.webcomponents.enabled flag. There is a polyfill for it though.\nThere is one more associated (maybe hard) problem you should keep in mind: good accessibility of math allows for synchronized highlighting of the math and speech. It's what almost all learning disability tools do with text and what they do when connected to MathPlayer. To do this, KaTeX needs to have a method to map between the MathML and the rendering of that element. I won't extend this lengthy comment even further with details on that, but I would be happy to discuss them when you get to thinking about the problem.\nI do hope you make accessibility a priority. It's not right that an important learning site such as Khan Academy is at best only partially usable by persons with visual disabilities -- it should work for all people who want to or need to use its great lessons.\n. I'm glad to hear you are getting back to this. You probably should take a look at what wikipedia has done to deal with accessible math:  if the user has selected the option  \"MathML with SVG or PNG fallback (recommended for modern browsers and accessibility tools)\", they render the TeX on their server and then send down MathML and the fallbacks.  To set the options, login, choose appearances, and scroll to the bottom for math options.\nFor more info, see this wikimedia page. The more sites that do things the same way, the more impetus there is for accessibility tools to handle that.\n. That works with the new MathPlayer+NVDA in both Firefox and IE.\nChromeVox didn't work with it, but ChromeVox's math support has been broken for over a month and I can barely get it to read math anywhere, so that doesn't say much.\nJAWS currently requires MathJax for accessibility, but it should be able to work with the site since it only uses MathJax to get the MathML. I pass along this site to them and hopefully they will add support in a not to distant update.\nOn Wed, Feb 25, 2015 at 11:58 AM, Fr\u00e9d\u00e9ric Wang notifications@github.com\nwrote:\n\n@NSoiffer https://github.com/NSoiffer You can try it on\nhttp://katex.xymostech.com/\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Khan/KaTeX/issues/38#issuecomment-76043041.\n. If you use the develop tools in Firefox to look at the DOM, you'll see\nMathML is in there. NVDA finds the MathML and gives it to MathPlayer to\nspeak.\n\nAs for who/what is doing the rendering, that I'm not sure about. For screen\nreader accessibility, that doesn't matter. When you need to do sync\nhighlighting, potentially that might matter. E.g., if some code modifies\nthe MathML to change the background color on the mfrac, would the display\nchange correctly?\nNeil\nOn Wed, Feb 25, 2015 at 12:55 PM, bruce miller notifications@github.com\nwrote:\n\nI'm not sure what \"works\" should mean here: on Firefox it is not using\nMathML, but span-soup. Ultimately, you'd want to send MathML to browsers\nthat support it, right? It looks OK, though, although it's all quite huge,\nbut I'm guessing from the CSS that that is intentional.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Khan/KaTeX/issues/38#issuecomment-76054750.\n. If you want the DOM to propagate to the rendering, Shadow DOM seems like\nthe way to go. But unless you use a polyfill, your probably got a couple of\nyears to wait for all the browsers to implement it.\n\nOn Wed, Feb 25, 2015 at 3:55 PM, Emily Eisenberg notifications@github.com\nwrote:\n\nWhen you need to do sync highlighting, potentially that might matter.\nE.g., if some code modifies the MathML to change the background color on\nthe mfrac, would the display change correctly?\n@NSoiffer https://github.com/NSoiffer The display would not update. Is\nthat a serious problem? Are there lots of times when that would happen? I'm\nnot sure if there's a good general way to watch for changes to the DOM to\npropogate them over to the HTML version.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Khan/KaTeX/issues/38#issuecomment-76088025.\n. FYI: I spoke the JAWS developer for math support and he said they expect\nJAWS will start reading MathML in the near future -- I forwarded the test\npage on to him.\n\nOn Mon, Mar 2, 2015 at 12:06 PM, Emily Eisenberg notifications@github.com\nwrote:\n\nClosed #38 https://github.com/Khan/KaTeX/issues/38.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Khan/KaTeX/issues/38#event-244671911.\n. In C++, there are functions to parse strings to numbers and they return the point at which they left off. In JS, it looks like the closest you get is parseInt() and parseFloat(). They don't return where the parse left off, so they are less useful.\n\nI think that the easy thing to do that will be right most of the time is write a simple functions that checks for digits and and decimal points (two separate loops for digits with a check for \".\" or a flag to say you already saw the decimal point). If you want to worry about internationalization, then you get into using \",\" as a decimal separator. I also don't know if large numbers are written as \"1,234\" or even \"1 234 567\" (i.e, spaces as separators).  Dealing with just digits and \".\" will go a long way to getting it right.\n. With MathML in the page, people who use the leading screen readers (NVDA & JAWS on Windows, VoiceOver on OS X/iOS) can listen to the math, navigate the math to understand it better, or read it in braille (there are special math codes for braille). TextHELP, a leading learning disability tool, uses it also. So does Chrome's ChromeVox screen reader.\n@kevinbarabash said \"...for the browser/screen reader combinations that do support it, what is read out isn't actually very helpful.\" While there is lots of room for improvement in what is spoken (MathPlayer has over 1100 rules to generate more natural speech, and it is far from complete -- see the Clear Speak documentation to get an idea of why there are many cases), saying that what is there isn't very helpful is simply not true. Similarly, citing one Wikipedia author ranting about MathML display is a poor excuse as justification for dropping MathML, especially when you don't even use it for display!\nThe speech needed by different disability populations differs, so a one size fits all \"alt text\" solution is bad. Further more, alt text doesn't allow for a braille translation or exploration/navigation of the math. Nor does it allow for prosody (mainly pauses) to make the math speech understandable. In English, there is the further problem that most speech engines speak an \"a\" with the short \"ah\" sound when reading math so even something simple like \"a x = b\" is hard to understand.\nAlt text has the additional problem that the speech for the math needs to be localized to the different languages supported by Khan Academy. Both VoiceOver and NVDA+MathPlayer support multiple language for speech. From personal experience, getting translators who are knowledgeable about math terms is not an easy path to follow.\nAn alternative to using \"text\" alt text is to use TeX as the alt text. I'm not clear if someone proposed that or not. In case someone thinks that's a good idea, Wikipedia use to deliver TeX as alt text for their images of math. Most people in the accessibility community considered it useless. Type some TeX into a some text editor and listen to a speech engine speak it. Even if you are familiar with TeX, it's very hard to understand... and most accessibility users aren't familiar with TeX.  Also, as with \"text\" alt text, you aren't getting math braille and you can't navigate it.\nPlease don't take a huge step backwards in accessibility of your site. Reach out the accessibility community to understand their needs before you cut them off at the knees (perhaps not the most PC turn of phrase, but I think very apt).\n. Although @sinabahram answered many questions, I want to make sure everyone is clear on what screen readers do with presentation MathML:\n\nThey produce speech;\nThey produce Nemeth code and potentially other braille math codes (there are several used around the world) on an attached refreshable braille display;\nThey allow navigation/exploration of the expression.\n\nIf the MathML is rendered, TextHELP's products will highlight the subexpressions as they are spoken. See this example if you aren't clear about what I mean. By putting the MathML in the page, even if it is hidden, script can be written that unhides it and deletes the \"HTML math\" (made easy when you consistently mark it with a class like \"katex-html\"). I don't think TextHELP does that now, but with the MathML there, it's possible.\nThe Pearson editor/app mentioned by @dylanb is the only editor that I know that is based on content (semantic) MathML. It generates presentation MathML for display. They support both braille input and output. It's meant to be used in testing applications and the content MathML makes it easier (but not easy) to determine if the answer to the question is correct since content MathML abstracts away potentially different notations used. There are still many equivalent expressions it must worry about, but at least some parts of the equivalency problem go away.\n@kohler: if you want test pages with examples of speech output, there are thousands of examples of ClearSpeak's output in the ClearSpeak spec  and test cases. I'm biased since I was the primary author for MathPlayer, but I think NVDA+MathPlayer will give you the best speaking experience (and it's free). MathPlayer gives you the choice of three different speaking styles, with MathSpeak and SimpleSpeech being the other two. It also has controls to target different user audiences along with subject-specific speech rules. GH Braille hosts the MathSpeak spec ; there are lots of examples of MathSpeak output there. I suggest grabbing examples from those pages (you can get TeX or MathML for the ClearSpeak spec & tests if you have MathType [free 30 day trial]), so it should be easy for you to copy them to other formats for testing the Khan Academy's text translation output.. ",
    "Hywan": "+1 for MathML :-).\n. \\o/\n. :+1:\n. ",
    "ricogallo": "Agreed :+1: \n. ",
    "mathiasbynens": "Since web components were mentioned in this thread, I\u2019ll just leave this here. I\u2019ve made a small vanilla web component wrapper around KaTeX: https://github.com/mathiasbynens/math-tex\nDemo: https://mathiasbynens.github.io/math-tex/dist/example.html\n. @dylanb It makes it slightly easier to implement KaTeX. It is also a demonstration of using the Shadow DOM to hide the \u201cugly <span>s\u201d.\nBut any accessibility problems (which is what this issue is about) need to be fixed in KaTeX itself.\n. CLA signed.\n. Yeah, that was confusing me too, like I said:\n\n(Note: some TTF fonts still don\u2019t have a regular WOFF version. I can submit another patch for that if you like.)\n. Btw, consider updating this URL to use HTTPS as well:\n\n\n. ",
    "camlorn": "Your only real option is MathML.  There are interesting (read: hacky) solutions that I currently use-namely, blocking MathJax from rendering in the first place and reading the LaTeX.  This is suboptimal at best, and it's rare to find a blind person who knows it.\nIf KaTeX is going to be rendering on the server only, then this is not an option.  Net result: expose your laTeX somehow (aria, maybe) and hit the 10% or less of us screen reader users who can handle it and no one else.  Follow this up with a MathML renderer as soon as possible for the other disabilities and the remaining 90% of blind people.  Converting directly to speech will work for some disabilities, but not blindness: as soon as the equation becomes more than marginally complex, some form of navigation is needed and natural-sounding pauses become super, super important (there's a huge difference between the phrase \"the square root of x plus three plus three\" and \"the square root of x plus three pause plus three\").\nThe two major windows screen readers now both have at least some support.  Jaws 16 beta has done some basic stuff, but only works with MathJax in IE (I'd not hold my breath while waiting on FS to add more support), and NVDA has some try builds that use Pymathspeak (and we're discussing programming something nicer, and I'm probably going to go start that next).  NVDA does have support for the solution from Design Science, but that involves installing a component which isn't available to very many people.  I know that the NVDA people have it, but have heard nothing about public betas as of yet.  I can't speak to the Apple implementations, unfortunately-I've not tried them.\nI also can't comment on mainstream support, but it's at least theoretically possible that some of the new accessibility laws will cause wider adoption of MathML among publishers and, consequently, pressure on all the browsers.  It's almost the only way to make a math book accessible to someone blind.  The other is getting your college to convert it to braille, but this costs upwards of $20000 per book.  We'll see what happens.\n. ",
    "brucemiller": "I'm not sure what \"works\" should mean here: on Firefox it is not using MathML, but span-soup.  Ultimately, you'd want to send MathML to browsers that support it, right?   It looks OK, though, although it's all quite huge, but I'm guessing from the CSS that that is intentional.\n. ",
    "akerbos": "Also \\mathsf and \\mathtt.\nFor mathematics, \\operatorname is also useful (does some spacing stuff, too).\n. In that case, the demo should probably be updated to catch and display the error.\nI'd still propose to print a nice error message by default (in the render call) but that's a design decision, I guess.\n. ",
    "certik": "Indeed, I use \\mathbf very often.\n. @kevinb7, I usually use \\over, it seems easier than \\frac, just like @kasperpeulen said.\n. ",
    "laughedelic": "+1\n. ",
    "PeterBocan": "+1 \nwhat can I do to implement this feature? (cc @xymostech @spicyj )\n. waiting for that day and then I'll move my ass from MathJax to KaTeX. +1!\n. Uhm... I'm feeling the next upcoming release gonna be soon with a whole lotta of sweets.\n. Did anyone merge this thing since? This thing drives me mad :smile: \n. @xymostech :+1:\n. Well, sqrt-line placement is broken for me too. No matter what browser I use, the line is too low and, to be honest, that thing annoys me.\n. It's a library for websites, not Android as a platform. If you can write website-based application then go for it, if not, I'm sorry.\n. Is there somebody working on it?\n. This relates with all other issues, for example: https://github.com/Khan/KaTeX/issues/206 so as you can see we are all waiting for the miracle... \n. @spicyj  what does it mean \"we'd like to add it\"? What does it require to contribute a brand new functionality? I mean this require a lot of new stuff to introduce. \n. @xymostech I see, but we are here too! Don't do it yourself, it's a community project, isn't it? :) Can you clarify what didn't work? \n. Yup, it's okay, my fault. There was a little issue with javascript. You can close this.\n. I think you have to escape these special characters as follows:\n\\{ 25*0.008^x, 25*(1/125)^x \\}\n. I wonder, if this hits performance or not (for large amount of expressions)... \n(Excuse my obsession with performance, but I am \"the C guy\". :+1: )\n. KaTeX is math typesetting for the web, not the replacement or some kind of \"web version\" of LaTeX/TeX. If you want to, you can go and do something like TeX for website typesetting, that would be nice, but I'm happy with markdown since last year. \n. KaTeX does not support other fonts because it will require new metrics for rendering.\nSee https://github.com/Khan/KaTeX/issues/123 and https://github.com/Khan/KaTeX/issues/231.\n. When it's done, but this feature is not the main goal for these days. :)\n. Ah, I see, that's sad. :D \n. @jimaek that's amazing! \n. Use \n\\text{}\n. Is it released in latest version? I mean the font support. \n. try: display: true\n. Kudos to you, @pnsaevik !\n. Probably missing one space on the left side. \n. It could be possible to redefine an alias to \n\\tan \\cot \\tanh\netc.\n. @kevinbarabash Czech and Slovak, too. Except cot, we use cotg\n. But fractions are okay... \n\\begin{aligned}\n x &= \\frac{\\frac{1}{a}+\\frac{1}{b}}{\\frac{1}{a+b}} \\cr\\cr\n y &= \\frac{\\frac{1}{a}+\\frac{1}{b}}{\\frac{1}{a+b}}\\cr\\cr\n\\end{aligned}\n. @sthoch yup, I did not test that. Just tinkered @stevem6 example.\n. I suggest embedding fonts into CSS with base64 encoding and split it into different CSS files of that given font type (ttf/woff/eot)... \n (http://sosweetcreative.com/2613/font-face-and-base64-data-uri)\nPros: \n- much less files \n- use only the needed one with CSS style linking\nCons: \n- Large CSS files. Not very handsome.\n. @gagern never said all of them. It's up to a discussion.\n. Duplicate of #531 ? . Supporting TikZ would need a package to itself. \ud83d\udc4d . I think you should notice the work of daniel3735928559 https://github.com/daniel3735928559/guppy. I would suggest you to upgrade to Qt 5, because WebKit in Qt 4 is rather quite outdated. . I dont think having this directly in KaTeX is a good idea at this point, because once you start with overall document structure, you will have to incorporate all other TeX features revolving the documents (figures, labels, tables, floating environments, lists, etc.) will lead to opening Pandora's box. \nI think it's more advisable to have Markdown + KaTeX and transform it into HTML, than full blown LaTeX on HTML documents.\n. ",
    "pluskid": "Yes, looking forward to see \\begin{aligned} supported, too. Because I use that a lot, so I still cannot switch from MathJaX currently.\n. ",
    "ozank": "+1 for matrix support\n. ",
    "keremdaldal": "+1\n. ",
    "episodeyang": "+1!\n. Hey @xymostech \nThanks for this great library!!!! this is really awesome!\nWhen is the environment going to come out?\n. @kevinb7, as soon as this is implemented, I am going to switch from MathJax to KaTeX! \n. @kevinb7 ,\nHow is this feature going? haha I have been coming back here to check everyday for a week now:)\n. I see, thanks for the reply! @jmeas I do get the notifications, but because I get emails from a lot of repos, I ended up just keeping this tab open. \n@kevinb7 This feature is very much needed :)\n. I'm trying to use this in a rich text editor as a component. I don't have\nany issue with the comments above, but something might come up during the\nimplementation.\nOne of the potential problems is keeping track of equation numbering. When part of the document is updated, the new compiled math block with the updated equation should have the same equation number as the old version. We need a way to keep track of this and set it during compile.\n. Since the renderToString is basically doing the rendering, wouldn't it be faster if I just use KaTeX's render function as the default, and catch the exception to backup with mathjax? \nHow quickly does KaTeX throw the exception?\nCheers\n. is there any speed difference between the render function and the\nrenderToString function?\nOn Mon, Feb 16, 2015 at 5:56 PM, Ben Alpert notifications@github.com\nwrote:\n\nClosed #186 https://github.com/Khan/KaTeX/issues/186.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Khan/KaTeX/issues/186#event-236632946.\n. Thanks. I will run some benchmarks.\n\nOn Mon, Feb 16, 2015 at 6:21 PM, Ben Alpert notifications@github.com\nwrote:\n\nIf you count the cost of setting .innerHTML after calling renderToString,\nthey're pretty similar. Probably render is faster in modern browsers and\nrenderToString is faster in IE8. If you're not actually rendering to the\nDOM, renderToString will be faster since it won't touch the DOM at all.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Khan/KaTeX/issues/186#issuecomment-74595464.\n. Environments are not yet supported. You can refer to these issues: #68 #47 #43 \n. Hi, I'm having problem with CJK characters. would google font suffice for this purpose? Also the CJK font used for XeLaTeX can be found here:\n\nhttp://tex.stackexchange.com/questions/53599/standard-cjk-fonts-for-latex\n. Hi, I just want to raise your attention on this issue. (honestly I won't be able to contribute to the solution, but as a user I want to add to the signal).  The CJK support is very important for a large range of users. If possible I hope this can be addressed. \n. that sounds very reasonable to me.\nOn Fri, May 27, 2016 at 10:44 AM, Kevin Barabash notifications@github.com\nwrote:\n\n@cben https://github.com/cben good point. I guess we could use the\nheight of an uppercase latin as our guess for the height of CJK and see how\nthat works. Adding a measurement step to build process would increase\naccuracy but it would make the library harder to use.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Khan/KaTeX/issues/380#issuecomment-222181341, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AAme2rSBrD-xW-pyICqLfBXT55lEgTSMks5qFxFrgaJpZM4GcvuU\n.\n. @kevinbarabash Hi Kevin!\nI just want to bump this issue up to your notice. This is so far the biggest hurdle for me to use this in my app. Lack of CJK support would be the biggest reason to go for alternative options.\n\nThanks for your work, and hopefully these heuristics can be implemented soon.. > @episodeyang with CJK I was worried that we'd need metrics for each glyph, but according to https://en.wikipedia.org/wiki/Monospaced_font it appears that CJK fonts are monospaced which means that we could probably handle them without too much trouble. We might even be able to do some measurement of glyphs so that we could use whatever font the user is using. Of course we'd only want to do this measurement once for a couple of glyphs at the start so that we don't affect KaTeX's speed.\nIndeed! CJK is monospaced ! (in fact doublespaced.) So only a very simple measurement is needed.. Thanks Kevin! Are there support in mathmode in general? :D\n. ",
    "ccorcos": "+1\nAlthough I don't know why matrices are so annoying in LaTeX. I'd much prefer a python or MATLAB syntax...\n. ",
    "scaljeri": "+1\n. +1\n. Are there any plans to add support for \\hspace{2px} ?\nI need this to format numbers, meaning I have things like:\n12\\hspace{2px}345\n. What do you mean with through AsciiMath ? Like: I convert AsciiMath to Latex ? or that I try to convert Latex to Latex using an AsciiMath library as if the input is actually AsciiMath (but isn't) ? Because something like this is possible, because I get the formulas in any format. \nSo how can you tell I do something with AsciiMath ? Are the curly brackets invalid LaTeX ?\n. I see it now. It is indeed treated as AsciiMath, but isn't!! Thanks a lot!\n. Ok thanks! Are there plans in the near future to support this ?\n. +1 I really need this feature. Is responsiveness also included in the equation ?\n. For example, if you switch from landscape to portrait, the formula adjusts to the space it has (responsive)\n. A regex will absolutely work, thnx! Is there any change this could be made configurable ?\n. Sorry, I was using versions 0.5.1, with v0.6.0 it works!\n. ",
    "hobson": "+1 for {matrix} and {bmatrix}. Really need it for linear algebra on slides.com and reveal.js presentations\n. ",
    "paxidently": "+1\n. ",
    "slametapr": "+1 for matrix\n. ",
    "karoltarasiuk": "oh yeah +1\n. ",
    "RodrigoCard": "I am allowed to say +1 :+1:  here too? :)\n. ",
    "NateZimmer": "+1 ... was this ever implemented? \n. ",
    "mbourne": "Hi and thank you for KaTeX! \nRelated to this issue, on Android phone, in the native browser and UCBrowser, subscripts end up looking like superscript:\n\nOn Chrome browser on the same phone, it looks fine.\nI have <!DOCTYPE html>. (The page is http://www.intmath.com/cg5/katex-mathjax-comparison.php)\n. Hi Emily\nIt's Android 4.1.2.\n. @kevinb7 Thanks for the response. I'm sure there are good reasons for the following in KaTeX, but surely replacing all of this\n<span class=\"reset-textstyle scriptstyle cramped\">\n <span class=\"mord scriptstyle cramped\">\n  <span class=\"mord scriptstyle cramped\">\n   <span class=\"mord\">0</span>\n  </span>\n </span>\n</span>\nwith\nwould be a lot simpler, would work in \"old\" mobile browsers, and would do the trick...?\n. Unfortunately, this is a show-stopper for me, since my main interest in KaTeX is for mobile applications.\nIt's difficult to get desktop users to download particular browsers or plugins - even more so for mobile devices.\nSince this is tagged as a \"bug\", I'll live in hope that it can be resolved for mobile devices. :-)\n. I was conducting some experiments by replacing some KaTeX fonts with MathJax fonts (they look better in Chrome). This worked fine in good browsers, but had an interesting outcome in IE.\nI had replaced\n@font-face {\n    font-family: KaTeX_Main;\n    src: url(fonts/KaTeX_Main-Regular.eot);\n    src: url(fonts/KaTeX_Main-Regular.eot?#iefix) format('embedded-opentype'),url(fonts/KaTeX_Main-Regular.woff) format('woff'),url(fonts/KaTeX_Main-Regular.ttf) format('truetype')\n}\n\nwith\n@font-face {\n  font-family: 'KaTeX_Main';\n  src: url('fonts/MathJax_Main-Regular.eot'); \n  src: url('fonts/MathJax_Main-Regular.eot?iefix') format('eot'),\n       url('fonts/MathJax_Main-Regular.woff')  format('woff'),\n       url('fonts/MathJax_Main-Regular.otf')  format('opentype'),\n       url('fonts/MathJax_Main-Regular.svg#MathJax_Main-Regular') format('svg');\n}\nIn IE (vers 11.0.9600.17280 on Win 7), it gave almost identical subscript and superscript issues as seen in Android browser:\n\n\n\nSo it seems IE cannot handle the mix of fonts.\nI'm wondering now whether the Android & UC browser cases are the result of an unhappy font interaction, rather than a CSS rendering issue, and perhaps this could point to a possible solution?\nRegards\n. Hello again\nI'm still seeing subscripts rendered as superscript (almost) in IE v11, Win 7 with KaTeX 0.5.0 js and css.\n\nAnd on the same browser, superscripts end up too high \n\nHere's the same portion on Chrome:\n\nThe subscript problem is particularly troubling...\nRegards\nMurray\n. @Ben: Thanks. Yes, that did it.\nAdding text-indent:0 to the .katex class gave this:\n\nAdding the following line-height to my hanging indent CSS sorted out the slight overlap:\nline-height:2.8em\ngave:\n\n. No, I don't believe it's still an issue. text-indent:0 is now in .katex, so all is good.. I need to run a tidy up function which caters for screen width on mobile devices. It needs to run after all the processing is complete.\nWhere math is on a parent page, it's working OK, but I have a lot of ajax calls that load snippets from other files. \nYour response gave me the clue I needed - I need to detect when the fonts are loaded.\nThis brings me to another question.\nIt appears that KaTeX starts doing its thing on the \"load\" event, rather than the DOMContentLoaded event. On pages with other assets, this means nothing happens with the math until all those other assets have loaded, then the rendering starts, and only then do the fonts load. In such cases, the FOUC is much more than a flash.\nIs it possible to start rendering on DOMContentLoaded, or is this never going to be possible?\n. My bad, sorry.\nAll my math input uses ASCIIMathML, so I'm using my variant of ASCIIMathTeXImg.js to convert to LaTeX output for use by KaTeX.\nThat file used an on load trigger, and that's what was giving me the mistaken idea that KaTeX was waiting for it, too.\nI changed it to an anonymous function, and now the ajax loads and resizing (for my main project) are working fine.\nI updated this (deliberately heavy) page so it now uses that updated ASCIIMathML conversion function:\nhttp://www.intmath.com/cg5/asciimathml-katex-mathjax.php\nWebPageTest's waterfall is quite interesting:\nhttp://www.webpagetest.org/result/140928_1Z_6G1/1/details/\nThe 4 KaTeX fonts have arrived before the first paint, so that math is immediately visible. Nice!\n@kevinb7: Sorry if I misunderstand you, but I'm not actually using <script> tags in that demo page. I'm using <div class=\"math\"> so I can switch easily between KaTeX and MathJax rendering. I'm not going to go this way for real pages, though.\n. Hi\nOn a related issue, the vertical spacing when using fractions in matrices is also too tight.\n\n\nHow do we space them out some more?\nRegards\nMurray\n. Any progress on this issue?\n. @invkrh: Some possibilities until responsiveness becomes a feature in KaTeX:\n(1) Give the enclosing element a style of \"overflow:auto\". Then your math will be full size and users can scroll the equation left and right to see it all.\nFor me, this has serious drawbacks, since on most mobile devices there is no indication that the element can be scrolled horizontally (no horizontal scrollbar appears like you get on a desktop browser, until you actually start scrolling the element. So if the page edge comes at an awkward part of the equation, it's possible the user has no idea that scrolling is possible and will never see the hidden part. It's possible to add a horizontal scroll bar with javascript of course).\nAnother option is display:table\nhttp://netdna.webdesignerdepot.com/uploads7/how-to-create-horizontal-scrolling-using-display-table-cell/table-layout-horizontal/\n(2) What I do is\n(a) Manually break the equation into pieces at logical places (like equal signs, plus signs, minus signs, etc) so it will wrap logically\n(b) For cases where splitting the equation is not possible, (it's a fraction, say), I nudge the font-size down with javascript until it does fit. I get away with that most of the time with the content on my site.\nYou can see both these things going on in this page (including in the drop-down answer sections):\nhttp://m.intmath.com/fourier-series/2-full-range-fourier-series.php\nThe elements that cannot be split and that I know will not fit into a 300 px width are given the class \"fitToWidth\". The function \"fitWidth\" reduces the font-size if required.\nI know it's clunky and could be done better (including the addition of an onRotate handler), but that will need to wait until the next revamp.\nFor the mobile version of my site, I mostly lay things out vertically when the LHS of an equation is quite wide.\nHope it helps.\nRegards\nMurray\n. Some examples from different browsers (all Win 7):\nFirefox 39:\n\nChrome 44:\n\nIE 11:\n\nRegards\nMurray\n. This is probably sacrilege and no doubt a Bad Idea, but a simple fix that worked for me is setting the following style:\n.mfrac{font-size:0.9em}\nThis gives me:\n\ninstead of:\n\nIt's also OK with subscripts and super-superscripts:\n\nrather than...\n\nCould it cause other problems?\nRegards\nMurray\n. @kevinb7: \n(1) Actually, I quite like smaller fractions and currently have that style for my whole site, but sometimes fractions on fractions get too small. But that's overkill. Of course, it's possible just to target one matrix by enclosing it in a div and styling the mfracs in that div only\n(2) Since I'm using ASCIIMath inpuit, it's a bit tricky to implement [3ex], which is why I looked for another solution. But actually, I think it would be a bit troublesome to have to add some spacing if you were doing a lot of matrices with fractions.\n(3) I'm sure there's a reason, but the numerator of fractions in KaTeX always seem too high above the fraction bar to me.\nIn your screen shots at the beginning of this thread, if the 5 and 7 were lower, they wouldn't bleed into the 2 and 4 denominators of the above fractions.\nI expect it is like this to give space for descenders, but is it possible to reduce the space when there is no descender involved?\nThanks to you and team for all your efforts.\nMurray\n. Emanuil's revisit of this issue triggered me to look at the numerator to fraction bar spacing issue again.\nFor the fraction 1/3, I got the following:\nRatio of {gap from number to fraction bar} to {height of numeral \"1\"} is around 25% in LaTeX, but around 60% in KaTeX. \nYou can see this difference in Kevin's earlier screen shots in the opening post.\nEven if the numerator involves descenders (and even if those descenders have subscripts with descenders), they don't touch the fraction bar.\n\nOn the other hand, the spacing for denominators from the fraction bar looks good to me.\n. Hi Tarjei\nThe \\begin{matrix} syntax will give you what you want:\n{\\left[\\begin{matrix}{3}&{2}{4}&{3}\\end{matrix}\\right]}\nRegards\nMurray\n. @Tarjei: I am also using ASCIIMath input, and a hacked version of the original ASCIIMath -> LaTeX js by Peter Jipsen.\nI ran up against the same issue as you (KaTeX didn't like \\matrix, since it's not a LaTeX command).\nOnce I sorted that out, I got errors for 2 reasons:\n(1) Too many enclosing braces:\nKaTeX (and Codecogs, where I was testing things) would choke on multiple {{ }} like this:\n\\frac{{1}}{{{3x}^{{2}}}}\nCodecogs would complain about incorrectly-nested braces, but in fact, they were OK. But removing most of the double- and triple-enclosed {{ }} did the trick (There seemed to be some limit over which Codecogs complained. It was happy with some of them, but not all.)\n(2) Braces enclosing the matrix, like this\n \\begin{matrix}{ ....... }\\end{matrix}\nWith those gone, everything seems to be sweet. (At least until I find something falls over because of a missing brace, but so far so good.)\nFeel free to grab my hacked js. Current file name is ASCIIMathTeXKaTeX-2015-09-01.js\nHere's an example page:\nhttp://www.intmath.com/matrices-determinants/5-inverse-matrix.php\nAt some point I'm hoping the KaTeX folks will consider an ASCIIMath input option. :-)\nRegards\nMurray\n. @xymostech I suspect after some thought these 2 issues were actually the same thing. In the fog of constant tweaking and testing, it was no doubt the step where I took out the {matrix}{ ... } inner braces when things started to work.\nI'm aware it's not worth trying to hang other rendering systems on yet. But thanks for keeping it in mind for the future!\n. @jbaayen: I'm developing SVG graphs, and the approach I'm using when including formulas is to overlay the SVG with HTML elements. There are some examples on this page:\nhttp://www.intmath.com/exponential-logarithmic-functions/calculating-e.php\nIt suits my purposes.\n. @jpatel3 No, I'm not using foreignObject. For the particular example I linked to above, I'm using a PHP -> SVG library.\nMy text creating function has the following parameters:\nfunction text($pt,$str,$pos,$class,$attrs,$brdParams) {...}\nwhere $pt is something like [1, 3] and $str is either plain text (which creates an ordinary SVG  element), or if it contains HTML tags or KaTeX, it creates an absolute-positioned div that sits on top of the SVG graph at position [1,3], determined by the pixel count from the left and top of the div containing the SVG element, allowing for the position of origin and any padding, using this.\n$htmlTxt = \"<div class=\\\"$class svgHtml\\\" style=\\\"top:\".round($height - $pt[1]*$yunitlength-$oy-$padding).\"px;left:\".round($pt[0]*$xunitlength+$ox).\"px\\\">$str</div>\";\nAs the whole thing is being created server-side, any KaTeX sitting on top of the SVG is processed along with the rest of the page on page load.. Jack's screen shot is the MathJax rendering.\nI updated my copy of KaTeX and now that equation is fine (except for the problem of fractions overlapping each other that I mentioned before). I don't think the cross-product was giving the problem in KaTeX rendering - it was \\mathbf.\n. <shamelessplug> \n  In the meantime, here's my KaTeX-MathJax speed comparison: http://www.intmath.com/cg5/katex-mathjax-comparison.php \n</shamelessplug>. @kevinbarabash: Feel free to include it in the README.\n@edemaine: Thanks for your kind comments.. @jason-s To add to this discussion, I've been experimenting using MathJax fonts with KaTeX processing to achieve slightly heavier (and thus more readable) math.\nYou may be interested in this comparison page, which shows both fonts (and renderings) in different sizes: \nhttps://www.intmath.com/cg3/katex-mathjax-fonts-outside.php\nWhen I first did this some months ago, the MathJax fonts seemed to be quite a lot darker (like your screen shot), but not as much now. Not sure what I changed to get that outcome.\nNotes:\n(1) One problem with MathJax fonts (which you may be able to see depending on your OS/browser/screen setup) is that the top line of the equals sign and the bottom line of the \u2265 sign are often fuzzy, e.g. middle table, 17.1px:\n\n(2) The dots of the division sign in KaTeX font seems a bit out of alignment in certain font sizes, e.g. middle table, 16.5px:\n\n(3) Vertical lines (like square brackets, absolute values and the plus sign) are often very light in both fonts, and almost disappear when viewing the screen at certain oblique angles.\n. If you have a lot of number lines to draw, you may want to consider:\n(1) JSXGraph (but it's overkill for this situation)\n(2) My ASCIIsvg-IM.js (see a number line example about half way down the page)\n(3) My PHP port of the above which does all the SVG-production work on the server and caches the results. This page has number line examples: Properties of Inequalities\nYou can overlay KaTeX as in the first example on this page. I understand MathJax could point to \"latest\" because they were running their own server, which they recently retired. Their latest recommendation for the Cloudflare CDN includes the version number (not including a \"latest\" in the URL).\nIf I was using the CDN version of KaTeX, I would probably proceed as follows (assume I'm using PHP):\nWrite a script that starts at the latest known version, 0.7.1, then looks at the headers for the next version, 0.7.2.\nIf that returns a 200, great, the KaTeX ppl have updated, maybe I''ll use that.\nTry the next one: 0.7.3.\nThat returns a 404, so it means KaTeX is not up to that yet.\nSo fall back, and use 0.7.2.\nMy variable would be $latestKatexCDNVers = '0.7.2';\nMy script call would then be:\nhttps://cdnjs.cloudflare.com/ajax/libs/KaTeX/<?php echo $latestKatexCDNVers; ?>/katex.min.js\nI'd run the version check script at a reasonable interval, say once per week, using cron.\nBut for me personally, I'd rather manually do this (apart from the fact KaTeX might change the way they number versions down the track and the above would break). That is, when a new version comes out, I want to test it thoroughly on my local system before deploying it. I then only have to change to the new version number in one place (because of the way I've set up my calls to JS). \nRegards. @kevinbarabash Would it also be appropriate to add support for ASCIIMath function in such a plugin architecture?. @kevinbarabash Yes, that is the idea. I'm currently piping output from an ASCII to LaTeX converter (similar to tylerlong's), which is fine for me. But I thought I would raise it as a plugin possibility to make it easier for others. MathJax did this after a few years of its existence.. (Not sure where to put this comment...)\nOn this page, https://github.com/Khan/KaTeX/releases/tag/v0.8.1 the link in your comment correctly points to v0.8.0, but the anchor text says v0.8.1. It would reduce confusion if fixed.. @kevinbarabash There seems to be a problem with swapped up and down triangles in the demo page.\n\n\\triangledown looks big, and \\bigtriangleup looks small.\nAlso, left and right triangles look tiny. Are they meant to?. @ronkok My screen shot came from the page linked earlier in this thread, http://copyasmarkup.com/katex/function-support.html#units\nBut now that I look at it again today, I see the same as what your screen shot has. Did someone change something?. It still seems to me that the first triangle is as big as the \\bigtriangleup, but should be smaller like the size of \\triangledown. However, that seems to be LaTeX behavior, so I guess we need to consider it solved.\n\n. Regarding\n\nwhen selecting and copying whole KaTeX-rendered elements\n\nMy experience using Chrome/Windows of the fiddle mentioned earlier:\nIf I copy the display math portion only I get this:\n\nx^2+y^2=z^2 x \n2\n +y \n2\n =z \n2\n\nIf I include just a bit of text above and below the block, I get this:\n\nmath:\n $$ x^2+y^2=z^2 $$\nThe\n\nI suspect most users will copy just the math, and will not get the desired result.. This probably doesn't matter any more, but I believe the eot syntax for old IE versions is not quite right. It currently is (e.g.):\nsrc:url(fonts/KaTeX_AMS-Regular.eot#iefix) format('embedded-opentype')\nHowever, the \"iefix\" should actually involve a query string (anything after that doesn't really matter), and would be better as:\nsrc: url(/includes/cssjs/katex/fonts/KaTeX_AMS-Regular.eot?#iefix) format('embedded-opentype')\nSee the following for why: http://blog.fontspring.com/2011/02/the-new-bulletproof-font-face-syntax/. I'm also facing the disappearing fraction lines issue, inconsistent across browser versions and even within a document.\nBrowser: Chrome Version 61.0.3163.100 (Official Build) (64-bit)\nOS: Win7\nKaTEX version: 0.8.3\nExample page: https://www.intmath.com/forum/applications-integration-30/a-simple-integration:140#pid845\nOne of the fractions in the last forum entry of that page looks like this:\n\nHowever, a bit higher up the page, the fraction line is fine but the generated code is identical, and there are no differences in the style for any of the surrounding divs.\n\nI can't find any reason why they render differently (it's not because of the equal sign).\nMy default font size for class .katex is 1.15 em, which gives me a resulting 18.4px font (which does show the problem).\nIf I set .katex at exactly 18px, it's fine, but at 18.1px, the line doesn't show, nor at exactly 18.4px. At other nearby values, the result is:\n17.8px: fails\n17.9px: fails\n18.01px, 18.02px, 18.03px: shows\n18.04px: fails\n18.2px: shows\n18.3px: shows\n18.5px: shows\nOn the other hand:\nBrowser: Chrome: Version 60.0.3112.113 (Official Build) (64-bit)\nOS: Win 10\nThe fraction lines are all fine in this combination.\n. The disappearing fraction lines are still showing up for me on latest Chrome. It's still strange to me how the exact same fraction elsewhere on the page will be OK. I've seen this in a few places. The 0.04em fraction line thickness was not thick enough.\nUntil a new release, I'm doing the following post-processing which appears to work OK. Thought it may help others:\nfunction thickenFracLines() {\n    var fracs = document.getElementsByClassName(\"frac-line\");\n    for(k=0; fracs.length > k;k++) {\n        fracs[k].setAttribute(\"style\", \"border-bottom-width:0.08em\");\n    }   \n}\nthickenFracLines();\n. @kevinbarabash Your certainly deserve a holiday, Kevin! I don't know when you ever sleep.... I've been holding off until the next full release (not an alpha). But I tried 0.9.0-alpha locally yesterday, and I'm still seeing the fraction line problem, especially on dynamically generated math.. @kevinbarabash No I hadn't, and indeed it does!. Small nit:\nThe distance between rows can be adjusted by using.... I downloaded 0.9.0-beta yesterday, and also came across the inconsistent double-thickness fraction line problem. Here's a screen shot (Chrome latest on Win7, same deal on Opera, FF, IE. I use 1.15em for .katex font-size) showing some thick, some not thick fraction lines:\n\nI also noticed something odd when looking closely at the SVG. Here's what I see for each of those thick fraction line cases:\n<svg width=\"100%\" height=\"0.2em\" viewBox=\"0 0 10 10\" preserveAspectRatio=\"none\"><line x1=\"0\" y1=\"5\" x2=\"10\" y2=\"5\" stroke-width=\"2\"></line><line x1=\"0\" y1=\"5\" x2=\"10\" y2=\"5\" stroke-width=\"2\"></line></svg>\nIt seems the second line is identical to the first and I'm trying to figure out the purpose of that.\nAs it turns out, the SVG is identical for both thick and thin line cases.\nI don't have a live page since I haven't uploaded this version to my server.\nI downloaded 0.9.0beta1 just now and the result is the same - screen shot would be identical.. @ronkok Thank you for the explanation regarding double lines - makes perfect sense and explains why I was seeing grey lines when experimenting with 1 line and/or thinner line widths.\nAll the square root signs seem fine. Here's a case where the fraction line is thick, but the square root sign is good:\n\nYes, please try using path. That could do it.\n@kevinbarabash As mentioned in my post, I haven't upgraded to 0.9.0beta1 on my server. 0.9.0alpha1 works well for all fractions - no disappearing lines, none blurry and none that are too thick..  I was sure I grabbed katex.zip - my bad. :-(. @ronkok I really appreciate your hard work on this issue and understand your pain. \nSure - I'm very happy to try out those 2 approaches for you.\n(BTW, I think I'm currently sticking to 0.9.0-alpha1- I got a bit lost with the letters/numbers in those releases.). @ronkok Here's the same portion from my earlier post, once again Windows/Chrome. The fraction lines are still thick, but a little darker, which is better:\n\nOn Firefox that particular portion looks good:\n\nSometimes there is slight fuzziness, but acceptable:\n\nSometimes thick with descending shadow as in the middle line of this portion:\n\nOpera tends to be thick and dark:\n\nWhile here's IE11:\n\nHere's the production page https://www.intmath.com/factoring-fractions/7-addition-subtraction-fractions.php where I'm still using 0.9.0-alpha1 (I think). I get uniformly good fraction lines with none disappearing. The fraction line is given by: <span class=\"frac-line\" style=\"border-bottom-width: 0.04em;\"></span>\nMy preference would be to go back to that fraction line setting!\nI'm using .katex{font-size:1.15em} For the cases where lines were disappearing in 0.9.0-alpha1, is it possible to suggest they tweak the .katex class font-size and see what happens?. @ronkok: Thanks for your efforts on this. Fairly obviously, I agree with your proposal! Hopefully all is good on non-retina devices. (FWIW: The last line of each table shows each frac line successfully on the non-retina touch laptop I'm currently using.). I'm not sure too many people would zoom to 67% and if they did, they probably would have more than missing frac lines to worry about. It's basically impossible to read any of the text at that zoom level (as Ron indicated).\nFor the record, on Win10/Chrome, the lines are all still there in the bottom rows for me at 67%:\n\nSome of them start to disappear at 50%, however I don't really think it's an issue. :-). @lpulley You could consider ASCIIMath, which is a calculator-like input mode that makes entering matrices (and many other things) quite easy. For examples and a sandbox, see:\nhttps://www.intmath.com/help/asciimath-input-katex-output.php. I'm still trying to understand why font glyphs behave nicely (I mean avoid the fuzzies) in other font families, but not when using KaTex_Main.\nIn this screen shot, the first example uses KaTeX_Main for \\equiv, in the second, I've used a span and styled it as font-family:serif;font-size:1.11em;color:#555;position:relative;top:2px. It's not quite wide enough, but avoids the problem on a low-res screen.\n\nPresumably adding some text above (so the item \"lands\" on a real pixel row) should fix it, but my experiments were not so successful.\n@kevinbarabash FYI, none of those Mozilla suggestions gave me any joy.\n. Sorry about not replying before - this got lost in the deluge.\n@edemaine I totally get why a main aim of KaTeX is to be LaTeX compliant as far as possible. However, a greater priority for me is that things are easy to read. I also get that things should be useful for those using screen readers.\nA delicious multi-variable problem!\n@ronkok I tried the macro (thank you) - certainly the rules are clearer. However, the macro only gave me 2 bars (so looked like an equals).\nI changed it to this, which gives me 3 lines, but they seem to be somewhat high.\n\\\\mathrel{\\\\hspace1mu\\\\mathrlap{\\\\rule[0.0mu]{12mu}{0.72mu}}\\\\mathrlap{\\\\rule[3mu]{12mu}{0.72mu}}\\\\mathrlap{\\\\rule[6mu]{12mu}{0.72mu}}\\\\hspace15mu}\nYou can see it in the first example on this page.\n. Once again on readability (since my context is education and way too many students completely miss obvious notations, let alone the subtle ones - especially when using projectors in class rooms). \nRelated to the \\equiv case, I notice (on a large monitor) the vertical (and sometimes) horizontal bars of plus signs almost disappear. Setting .mbin{font-weight:bold} is a crude fix, but helps readability, I feel.\nWithout: \n\nWith:\n\nHere are 3 accents as produced using my default settings.\n\nWhen appearing among a lot of other notation (and when it is late at night), I find the hat ^ is a strain to see, the vector arrow is blurred and the dots are a bit small too.\nHere they are again with some tweaks:\n\nFor the first and 3rd ones, I bumped up the font size as follows:\n.accent-body{font-size:1.25em}\nFor the arrow, I swapped out the default SVG arrow for (what I feel) is a cleaner, simpler arrow, and repositioned it a bit. (You can see these about 2/3 down this page).\nYes, I know this strays from LaTeX rendering, but it does involve less eye strain!\n. @ronkok I think a Customization page in the configuration section as you mentioned would be great.\n(BTW - the link in the final line of your comment has a problem.). FWIW, for the most recent million users to IntMath. only 247 were using IE9 and 397 were on IE10.\nI'd say drop support.... Some libraries with versioned docs provide a problem for the searcher, as follows. \nAn early release of the documentation gets a lot of links pointing to it (perhaps there was a popular change, or something), then the search engines prioritise that version of the docs because more links point to it. Then a user comes along searching for something, lands on old documentation, and can't understand why the suggested code does not work in their latest version. (Happened to me way too often...)\nThis may already be in the plan, but can I suggest something like the following:\nLatest documentation: katex/documentation/blah...\nAll previous documentation: \nkatex/v0.9.1/documentation/blah...\nkatex/v0.9.2/documentation/blah...\netc\nThis way, the current documentation will get growing numbers of links over time, and most of the previous ones will get very few, eventually falling into oblivion.. @ylemkimon Looks perfect!. @vmarquet I suspect the problem is because the KaTeX js and CSS are sitting on the outer TinyMCE iframe, whereas your equation sits in an embedded \"TinyMCE edit\" iframe within the outer TinyMCE one. That embedded one does not appear to be finding the CSS, as DevTools confirms.\nSo try to move the CSS call to that embedded iframe, if possible.. @yeshuanova I tried your equation on the KaTeX demo (https://khan.github.io/KaTeX/) just now, and it works fine:\n\nIt's using v0.10.0-beta. I suggest trying that out and see how it goes.. The problem with the page on a phone is due to (in part) a few <br>s on the \"Direct input\" sections (where there are long lists of characters, which are presumably being split for  exactly this reason) being interpreted by Docusaurus as actual &lt;br&gt;s instead. For example, there are 2 in this section:\n\nThese are pushing the page to be super wide, so the tables' overflow:auto gets messed up (visually).\nWhen it doesn't really need to be a table (which I believe is the case here), and can just be a list of functions, what I usually do (rather than make phone users scroll wide tables left and right and therefore probably miss a lot of things), is to give the tds a display:inline-block.\nSo here's my version of your page which works on both wide and narrow screens: \nhttps://www.intmath.com/tmp/fns-tbl.html (it's rough and has some loading errors, but the idea's there.)\nThe <br>s have been fixed, and the <table>s have:\n@media screen and (max-width:480px){\n    table tr:nth-child(2n){background:#fff}\n    table td{display:inline-block;background:#fff}\n}\nThe borders still could be tidied up, but hopefully it helps.\n. @ronkok I meant to add that you might want to consider \"break-word\" for those long strings of non-space characters. No need to add <br>, and it's cleaner. \noverflow-wrap: break-word;\n  word-wrap: break-word\nSee: https://css-tricks.com/almanac/properties/o/overflow-wrap/. @ylemkimon On the page you linked to, there are no super-wide non-breaking text elements like this, which the page I massaged does have:\n\n@ronkok Your latest link goes to a mock-up of the main intro page, not the page with functions. But there is an oddity on that last expression (the q condition) on a 320 px wide screen, which white-space:nowrap might fix:\n\n(Those things are a PIA, I know...)\n. You may wish to add https://www.intmath.com/\nHere's a logo: https://www.intmath.com/intmath-logo.svg. To add on here, for print, I normally use a fixed font-size:10pt.\nFractions work fine in PDF (generated from Chrome) at that setting:\n\n. @ronkok Sorry about the delay. I found that my earlier optimism was misplaced. (I never actually print things - I was basing my earlier comment on the screen shot of the PDF generated by Chrome.)\nWhen doing an actual print, even with 10pt fixed, I saw the disappearing lines that @riteme reported.\nFixing the border to min-height:1px did the trick, at least for the pages I tried. They were not too thick - looked good to me.. Not a biggie, but may as well mention it. In the /doc/ and /en/ pages, this still gives 404:\n<link rel=\"shortcut icon\" href=\"/KaTeX/https://khan.github.io/favicon.ico\"/>. Here's another possibility...\n\n. @edemaine: The sitemap.xml is correctly at the root level.\n@ylemkimon: Some comments:\n(1) The <changefreq>  tag is not really necessary - Google ignores it and crawls the pages within the site whenever it feels like it. It could be removed.\n(2) Having all <priority> tags set to 1 doesn't help the search engines to prioritise any page over another. This tag is only possibly used by search engines if 2 pages end up having an identical SEO score (highly unlikely) and it helps to decide where in the list of katex.org pages it will come in the search results. But in reality, it has little importance, and I suggest it be removed.\n(3) Are there translations of the site already? Or are they intended? If so, the rel=\"alternate\" hreflang part would be necessary, but until then, probably not.\n(4) The search engines look for sitemap.xml in the root by default, so there's not really a need to submit in Google Search Console. It doesn't hurt for a new site, though! \n(5) It is probably worth adding a robots.txt with a link to sitemap.xml.\nFYI, these are the pages Google has already indexed to date:\nhttps://www.google.com/search?q=site:katex.org. @ylemkimon I've had a closer look at what you've done on the old and new sites and I think it looks good. It appears to be working as intended.\nI'd only suggest the following on the old site pages: Change the order of the javascript redirect and the meta-refresh, so it's like this:\n<meta http-equiv=\"refresh\" content=\"0; url=https://katex.org/\"><script>location=\"https://katex.org/\"</script>\n(With the javascript one coming first, the browser will start working on that before it works on the meta refresh. For the search robots, a meta-refresh with time 0 is equivalent to a 301 - which is what we want -  while a script-based redirect is not as robust for some robots. Actually, I would personally leave out the script one, but if you have included it for a reason, fine!)\nYour canonical tag is good on both old and new sites, and will pass the SEO \"juice\" appropriately to the new pages. I've noticed Google can be a bit slow to list the new pages - it's as though it wants to make sure you've really moved it before it changes the search index entry.\nSo in summary, I think what you've done will deprecate the old site well - nothing more to do.\nFor items (1) and (2), it's not really a case of them hurting SEO - it's just they don't help and take up (a little bit of) bandwidth, so could go. Not a biggie.\nFor (3) - what I meant was the alternate tag is not really necessary if you only have English versions. If there are other languages added later, then you would add the hreflang tag. Once again it doesn't hurt, but it doesn't help, either.\n(4) You can actually put the sitemap.xml anywhere (root or not) and point to it from robots.txt, which has to be in the root (which you won't have access to for khan.github.io, and not necessary). But with this tag in the old pages, <meta name=\"robots\" content=\"noindex\">, you have already addressed this and it's now a non-issue.\n(5) The answer is \"no\", but I've had cases where someone pointed to text-based files and they showed up in the search results as mostly gibberish, and you may find that later. But for now, I believe it would be worth adding a robots.txt on the new site with simply this:\nUser-agent: *\nSitemap: https://katex.org/sitemap.xml . I wonder if it might be a good idea to look at the \"KaTeX must replicate LaTeX behavior\" in a new way. I'm coming at this from a different direction to many, I guess. My background is HTML development, so my main interest is in making math readable and aesthetic on a Web page. LaTeX is just a means to my desired end in this process.\nThose with a LaTeX background where the fraction and square root signs always successfully display in PDF or printed output no matter the font size (is that always true?) are more likely to have the mindset that KaTeX must also stick strictly to LaTeX standards.\nHowever, as KaTeX is for Web pages, surely whatever works on Web pages should have precedence over LaTeX purity?\nI get it when it comes to things like spacing of subscripts and superscripts, or how far down a square root symbol should go below the line - yes, they all should be consistent with LaTeX, and I also get it that it's important publishers can copy their LaTeX from their publications directly and not have any surprises or errors when using KaTeX. But I don't get it when sticking strictly to LaTeX specifications bumps up against browser peculiarities and the math becomes unreadable (or worse, unreliable) as a result.\nPerhaps KaTEX could consider another flag (I don't think \"strict\" applies here), say \"visibleMinThickness\" (or whatever) whereby us non-LaTeX-purist publishers could choose to trigger post-processing functions such as fix_frac_line, and be confident the fractions and square roots will always show properly? (In fact, I currently employ a few such post-processing functions.). @milosgajdos83 Hugo is trying to be helpful and is assuming you want line breaks where you have them in your text. So in your array it is adding a <br> at the line breaks and so it messes up KaTex. I assume you have the variable hardlineBreak set to true, and perhaps you'll need to set it to false. See this section: https://gohugo.io/content-management/formats/#blackfriday-extensions Alternatively (and probably better, becausse you probably do want hardlineBreak to be true elsewhere), you could enter your math all on one line, and it should work fine.. ",
    "stefman2": "On a similar vein, I had noticed that, in my setup, which uses katex.renderToString(), KaTex was not positioning any subscripts lower at all. The CSS generated by KaTex seems to assume everything is already positioned, and has ...style=\"top:0.15em...\" for positioning subscripts. So, to get it to work for me, I needed to change this to style=\"position:relative; top:0.15em...\" in the output CSS and now it works.  (Explicitly setting a position attribute to \"relative\" in  tags containing the entire KaTex expression did not seem to work either.)\nAny idea on what is causing KaTex elements to lose their position attributes, and whether Katex ought to rectify this in katex.renderToString()?\n. Yes, I am including katex.min.css.  All the typesetting looks fine except for subscripts, and that minor change seems to do the trick as far as I can tell. I will look into this some more and try to isolate the problem; perhaps there is an issue with other CSS I have on the pages in question.\n. ",
    "drerichsu": "Yes, the module throws a fatal \"Error: KaTeX parse error\".  To work around this in my application, I've wrapped the katex call in a try/catch/finally to keep it from bombing the whole app. It would be nicer if it died gracefully or output an error message.\n. ",
    "hbq1": "will it be supported in the near future? katex is an outstanding library but for instance I can't use it because of absence of n-th roots ;(\n. ",
    "jtrinklein": "looking forward to this feature, is it on the roadmap?\n. ",
    "ystreibel": "Hi, this issue is already here in v0.3.0\n\nHow could I do ?\n. @kevinb7 Ok it's working now ! Thanks !\n. ",
    "jamesplease": "I ported that library to node.\n. #126 adds all of these symbols and more\n. Could you rebase this, @btwael?\n. These are covered by #126.\n. > How is this feature going? haha I have been coming back here to check everyday for a week now:)\nfyi @episodeyang you can subscribe to the issue to get notifications sent to your email instead of manually checking all of the time. The button is in the right sidebar.\n. Looks good t'me.\n. Related: #59.\nThis PR contains all of #59 and then some.\n. @gameguy43, oops! I messed up my ref in the above comment. See #126\n. From the perspective of the code, this looks fine to me. With that said, the Khan brand might not want to be explicitly used to represent KaTeX. I'll leave that up to the maintainers to decide :)\n. I made a little library that exports the supported symbols/functions.\nAt the moment it just returns the supported symbols / functions as arrays. If there was more metadata associated with the symbols then there'd be more to work with, which might be pretty cool. For instance, the Greek alphabet could be grouped together, as it is on the Wiki.\n. That's a good list of metadata, @utensil. I think that it's probably outside of the scope of KaTeX to worry about all of that information, so ~~my plan is to make~~ I made a more general node module that contains that info from sources like here and here (props to @xymostech for sharing those links with me).\nThat module could then be used to generate a page on the KaTeX website, or whatever else someone might want to do, using the symbols KaTeX supports. It'll also help point out the symbols that KaTeX is missing. And if KaTeX wants to absorb that metadata at some point, then that'd be cool, too.\n. So I made a preview page based on what KaTeX currently supports using this library. It's just a quick first pass on the idea, but it shows an example of how this could be automated.\nIt also is going to help me fill in the missing symbols, which is up next.\n. > Can we add functions to your library?\nYup, of course.\n\nAlso, it would be nice if people could hover over to get a tool tip. The it serves a dual purpose of not only showing people what we support, but also help people who are new to TeX.\n\nAgreed. I have a second version planned that will be much more feature-rich \u2013 I just whipped up that first draft really quickly to function as a demonstration.\nRight now I'm working on adding more symbols to KaTeX, then I'm going to work on making a super snazzy presentation page.\nI'd love help on it, but maybe wait 'til the next version is out just so that we don't overlap with what we're working on.\n. Updated per your comment, @xymostech.\n. Just a note: this probably shouldn't be merged until #114 is figured out.\n. Yup, that would work, too. I usually include the built files in the primary repo 'cause I'm lazy and it's less work to manage a single repository. The decision doesn't affect the end-user, so it's really a matter of preference.\n. Oops, @kevinb7! I should have checked the PRs as well as the issues. My fault.\n. Resolved by #117\n. I rebased and updated the .PHONY bit, @xymostech, but I still need to fix JSHint in a few files. With luck that should be breaking Travis. I'll fix that up soon.\n. Mmk. Should be good.\n. I just now saw that section in the contributing guide!\n. Is this a duplicate of #5?\n. @spicyj, can you elaborate on that a bit? How are you thinking of using those to handle these aliases?\n. > KaTeX looks up symbols based on their name so there'd have to be an entry in the symbols table already for both.\nUltimately it would look them up, even in the first option I suggested. The idea of storing them together is that you'd have a quick reference to all of the aliases of a given symbol. That way if there are ever, say, 5000 symbols in KaTeX, the aliases would never be separated spatially within the code.\nIn other words, from a technical perspective there's little difference between the two options I proposed. It's merely an organizational difference that could maybe help out a human who was reading through the source.\n. Update: I did include aliases in #126\n. Cool, thanks @kasperpeulen. After I'm done this round of automated stuff I'll see how I can compare / incorporate that list of symbols, too.\n\nHa nice. I already found some missing symbols from that list. Nice resource, @kasperpeulen!\n\n'nother update. I converted that data to JSON. ~~Soon-to-be~~ Now an npm module.\n. This is on hold while I sort through the new list that @kasperpeulen put up. I'm comparing the unicode values from this 'new' library against the other ('old') latex-to-unicode library I had been using.\nSome stats:\nTotal symbols in the new library: 1443\nTotal symbols in the old library: 337\nMatches: 214\nMistakes made in old library trying to parse new values: 321\nYikes. Obv. there's lots of disagreement between the two, so I need to sort this out before I continue.\n. Thanks @kasperpeulen, but I'm only using these libraries to convert to Unicode. I have a different list for the symbols themselves.\n. Very awesome. How'd you extract those?\n. Some updates: I'm only adding symbols that the fonts support and that can actually be rendered in KaTeX at the moment. So double-struck symbols, among other things, won't be included.\nI compared Mathjax's symbol list with this list. When they agreed, I trusted them. When they disagreed, I examined each symbol to see what was up. The end result is a list of symbols that are definitely supported by LaTeX+AMS and the fonts that KaTeX uses, which is what will be in this PR. That list can be seen here (there might be duplicates or omissions from what's already in KaTeX. No worries there).\nSo what next? I've got some unicode lists I'll be using to get the unicode values for these symbols. I'll compare them against Mathjax and go through the same process all over again to get the correct values. After that I'll be updating the PR again.\nAlso, there are a few outstanding symbols that are being discussed here. Those won't be in this PR, but should probably be added in a separate commit, should we decide that that's a good idea.\n:+1:\n. Okay so this PR is updated. All of the symbols are in there!\nThere's still some work to do, though. ~~I need to host a webpage showing all of the symbols in action, and then~~ I need to figure out the missing character metrics.\nI made a quick little webpage showing the symbols here.\n. Yup, I mentioned that in the comment. I'm working on that now :)\n. @kevinb7, from the comment at the top of the mappings file I think I'm just supposed to pluck them from here. @xymostech, is that right?\n. Sorry for my big absence here. I'm looking into that now, @xymostech!\n. \\over support was just merged in 3 days ago, and there hasn't been another release since the first release. You'll want to pull down the master branch if you want to keep up with the latest code.\n. I'm afraid I don't know the release schedule of KaTeX (if there is one), but there are people around who do. I'll let them answer ya'\n. I think that this problem, and others like it, are better solved by using a linter like the ones from #115 / #117. I'd rather see one of those PRs get merged.\n. Duplicate of #114\n. > I disagree that this is a dupe.\nMaybe I wasn't explicit enough in #114, but I meant that the javascript, fonts, and CSS should all be included. The idea is that you can load KaTeX in via a package manager and have all of the files that you need to actually use it on a webpage.\n. According to #5, not yet. You should use the search feature of the issue tracker next time!\n. Ah, look at that @kevinb7, I think you're right. My mistake :)\n. This change isn't really necessary.\n. I don't believe that a comma is necessary here, actually.\n. Sure, I can do this. Before I do, though, is it not the case that the build command there references the build command defined on line2? If that's the case, then lint should already be included in .PHONY.\nI know nothing about make tho', so I might just be way off here.\n. I'll fix it up tonight.\n. This is a potential source of future frustration, I think. If you're not too worried about deeply nested functions like this one, then it might be better to just remove this rule altogether. Otherwise you may find yourself just upping this value whenever you make a change to the code, which can be annoying.\n. ",
    "kasperpeulen": "@jmeas  Thanks for that! Really helpfull also for some non katex related project that I have as well.\nHowever, it should be noted that the fonts that katex uses, puts mathbb,mathcal,mathbf,mathfrak etc at the wrong unicode place. So to use that libary for this, the fonts should be fixed.\n. Also for math script capital letters:\n\"\ud835\udc9c\": \"\\\\mathscr{A}\",\n\"\u212c\": \"\\\\mathscr{B}\",\n\"\ud835\udc9e\": \"\\\\mathscr{C}\",\n\"\ud835\udc9f\": \"\\\\mathscr{D}\",\n\"\u2130\": \"\\\\mathscr{E}\",\n\"\u2131\": \"\\\\mathscr{F}\",\n\"\ud835\udca2\": \"\\\\mathscr{G}\",\n\"\u210b\": \"\\\\mathscr{H}\",\n\"\u2110\": \"\\\\mathscr{I}\",\n\"\ud835\udca5\": \"\\\\mathscr{J}\",\n\"\ud835\udca6\": \"\\\\mathscr{K}\",\n\"\u2112\": \"\\\\mathscr{L}\",\n\"\u2133\": \"\\\\mathscr{M}\",\n\"\ud835\udca9\": \"\\\\mathscr{N}\",\n\"\ud835\udcaa\": \"\\\\mathscr{O}\",\n\"\ud835\udcab\": \"\\\\mathscr{P}\",\n\"\ud835\udcac\": \"\\\\mathscr{Q}\",\n\"\u211b\": \"\\\\mathscr{R}\",\n\"\ud835\udcae\": \"\\\\mathscr{S}\",\n\"\ud835\udcaf\": \"\\\\mathscr{T}\",\n\"\ud835\udcb0\": \"\\\\mathscr{U}\",\n\"\ud835\udcb1\": \"\\\\mathscr{V}\",\n\"\ud835\udcb2\": \"\\\\mathscr{W}\",\n\"\ud835\udcb3\": \"\\\\mathscr{X}\",\n\"\ud835\udcb4\": \"\\\\marthscr{Y}\",\n\"\ud835\udcb5\": \"\\\\mathscr{Z}\",\n. And mathfraktur:\n\"\ud835\udd04\" :\"\\\\mathfrak{A}\" ,\n\"\ud835\udd05\" :\"\\\\mathfrak{B}\",\n\"\u212d\" :\"\\\\mathfrak{C}\",\n\"\ud835\udd07\" :\"\\\\mathfrak{D}\",\n\"\ud835\udd08\" :\"\\\\mathfrak{E}\",\n\"\ud835\udd09\" :\"\\\\mathfrak{F}\",\n\"\ud835\udd0a\" :\"\\\\mathfrak{G}\",\n\"\u210c\" :\"\\\\mathfrak{H}\",\n\"\u2111\" :\"\\\\mathfrak{I}\",\n\"\ud835\udd0d\" :\"\\\\mathfrak{J}\",\n\"\ud835\udd0e\" :\"\\\\mathfrak{K}\",\n\"\ud835\udd0f\" :\"\\\\mathfrak{L}\",\n\"\ud835\udd10\" :\"\\\\mathfrak{M}\",\n\"\ud835\udd11\" :\"\\\\mathfrak{N}\",\n\"\ud835\udd12\" :\"\\\\mathfrak{O}\",\n\"\ud835\udd13\" :\"\\\\mathfrak{P}\",\n\"\ud835\udd14\" :\"\\\\mathfrak{Q}\",\n\"\u211c\" :\"\\\\mathfrak{R}\",\n\"\ud835\udd16\" :\"\\\\mathfrak{S}\",\n\"\ud835\udd17\" :\"\\\\mathfrak{T}\",\n\"\ud835\udd18\" :\"\\\\mathfrak{U}\",\n\"\ud835\udd19\" :\"\\\\mathfrak{V}\",\n\"\ud835\udd1a\" :\"\\\\mathfrak{W}\",\n\"\ud835\udd1b\" :\"\\\\mathfrak{X}\",\n\"\ud835\udd1c\" :\"\\\\mathfrak{Y}\",\n\"\u2128\" :\"\\\\mathfrak{Z}\",\n\"\ud835\udd1e\" : \"\\\\mathfrak{a}\",\n\"\ud835\udd1f\" : \"\\\\mathfrak{b}\",\n\"\ud835\udd20\" : \"\\\\mathfrak{c}\",\n\"\ud835\udd21\" : \"\\\\mathfrak{d}\",\n\"\ud835\udd22\" : \"\\\\mathfrak{e}\",\n\"\ud835\udd23\" : \"\\\\mathfrak{f}\",\n\"\ud835\udd24\" : \"\\\\mathfrak{g}\",\n\"\ud835\udd25\" : \"\\\\mathfrak{h}\",\n\"\ud835\udd26\" : \"\\\\mathfrak{i}\",\n\"\ud835\udd27\" : \"\\\\mathfrak{j}\",\n\"\ud835\udd28\" : \"\\\\mathfrak{k}\",\n\"\ud835\udd29\" : \"\\\\mathfrak{l}\",\n\"\ud835\udd2a\" : \"\\\\mathfrak{m}\",\n\"\ud835\udd2b\" : \"\\\\mathfrak{n}\",\n\"\ud835\udd2c\" : \"\\\\mathfrak{o}\",\n\"\ud835\udd2d\" : \"\\\\mathfrak{p}\",\n\"\ud835\udd2e\" : \"\\\\mathfrak{q}\",\n\"\ud835\udd2f\" : \"\\\\mathfrak{r}\",\n\"\ud835\udd30\" : \"\\\\mathfrak{s}\",\n\"\ud835\udd31\" : \"\\\\mathfrak{t}\",\n\"\ud835\udd32\" : \"\\\\mathfrak{u}\",\n\"\ud835\udd33\" : \"\\\\mathfrak{v}\",\n\"\ud835\udd34\" : \"\\\\mathfrak{w}\",\n\"\ud835\udd35\" : \"\\\\mathfrak{x}\",\n\"\ud835\udd36\" : \"\\\\mathfrak{y}\",\n\"\ud835\udd37\" : \"\\\\mathfrak{z}\",\n. not helpfull, as double struck / mathfrak symbols are not found at their unicode place\n. This patch is MIT licensed, do whatever you want with it. \n. @bigant3323 something you want to tell ^^ ?\n. @flying-sheep @gameguy43 \nI felt back then that the katex was not interested in this functionality, but I've seen now that it is a project. Are you interested in this? @kevinbarabash\nAccept of supporting \u03c3 \u2208 \u211d I think I also made it work to support \u2211_n=0^n render like \\sum_n=0^n. Note that \u2211 is the unicode symbol exactly made for this purpose, and so is not same as the Sigma symbol. \nCombined with something that provides quick unicode typing, see this project of me for example:\nhttp://kasperpeulen.github.io/PressAndHold/Unicode/\nThis can be a nice way of writing math on the web. \n. @xymostech LaTeX parses {abc \\over def} the same as \\frac{abc}{def}. \n. In the TeX community they are not that much fan of this macro it seems:\nhttp://tex.stackexchange.com/questions/73822/what-is-the-difference-between-over-and-frac\nHowever, I do like it. Especially in combination with setting the unicode symbol: \u2215 to act like \\over, in that case, things become quite a bit more readable:\n{1\u22152} +{1\u22153} ={5\u22156}\nInstead of writing the cluttered and cumbersome:\n\\frac{1}{2}+\\frac{1}{3} = \\frac{5}{6}\n. @xymostech  This is really strange, I'm quite sure that did worked for me, but not anymore...\nPersonally, I think the neatest solutions would be to have some argtype = \"raw\" for some functions. I kind of have this functionaly now if I use argtype = color, but that doesn't work if your input doesn't have {...} \n. @kevinb7 It doens't make sense to me to support those strange construction if even LaTeX itself doesn't support it. I think MathJax support those constructions by accident, not by design. \nNot\\e that the 'n' in \\mathbb{R^n} isn't math italic, I think it is better to show an error in that case, saying that there is no double struck variant for small letter n, then to just show some random style, that the user probably wouldn't even have wanted.\n. @spicyj @kevinb7 just tested this, seems to work perfect ,also for nested fractions\n. https://github.com/wspr/unicode-math/blob/master/unicode-math-table.tex\nThis is also some useful list, as it puts the symbols in the right category.\n. To clear some things up.This list is from the unicode math pacakge, and many of those macros are not standard names. For example the use of \\mfrakA is not standard. Besides that, many of the symbols are not provided by the KaTeX fonts. \nIn this pdf http://get-software.net/macros/latex/contrib/unicode-math/unimath-symbols.pdf , they do clear up which macros are defined in Plan TeX (p), which are defined in LaTeX (l) and which are defined by the by amssymbs (a). All the others are defined by that package, and those symbols are not provided by the KaTeX fonts. \nI think the best strategy would be to use your old libary, and then use the unicode-math libary that I posted, to put the symbol in the right group. Besides that, it would be a good idea, to check which chars the katex font provide, and see if we have something mapped to it.\n. These are all the glyphs from KaTeX main regular:\n!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~\u00a0\u00a8\u00ac\u00af\u00b0\u00b1\u00b4\u00d7\u00f7\u0131\u0237\u02c6\u02c7\u02c9\u02ca\u02cb\u02d8\u02d9\u02da\u02dc\u0300\u0301\u0302\u0303\u0304\u0306\u0307\u0308\u030a\u030b\u030c\u0338\u0393\u0394\u0398\u039b\u039e\u03a0\u03a3\u03a5\u03a6\u03a8\u03a9\u2002\u2003\u2004\u2005\u2006\u2009\u200a\u2013\u2014\u2018\u2019\u201c\u201d\u2020\u2021\u2026\u2032\u20d7\u210f\u2111\u2113\u2118\u211c\u2135\u2190\u2191\u2192\u2193\u2194\u2195\u2196\u2197\u2198\u2199\u21a6\u21a9\u21aa\u21bc\u21bd\u21c0\u21c1\u21cc\u21d0\u21d1\u21d2\u21d3\u21d4\u21d5\u2200\u2202\u2203\u2205\u2207\u2208\u2209\u220b\u2212\u2213\u2215\u2216\u2217\u2218\u2219\u221a\u221d\u221e\u2220\u2223\u2225\u2227\u2228\u2229\u222a\u222b\u223c\u2240\u2243\u2245\u2248\u224d\u2250\u2260\u2261\u2264\u2265\u226a\u226b\u227a\u227b\u2282\u2283\u2286\u2287\u228e\u2291\u2292\u2293\u2294\u2295\u2296\u2297\u2298\u2299\u22a2\u22a3\u22a4\u22a5\u22a8\u22c4\u22c5\u22c6\u22c8\u22ee\u22ef\u22f1\u2308\u2309\u230a\u230b\u2322\u2323\u23b0\u23b1\u25b3\u25b9\u25bd\u25c3\u25ef\u2660\u2661\u2662\u2663\u266d\u266e\u266f\u27e8\u27e9\u27ee\u27ef\u27f5\u27f6\u27f7\u27f8\u27f9\u27fa\u27fc\u2a3f\u2aaf\u2ab0\ueffd\ueffe\uefff\nAnd the following are all the glpys from KaTeX AMS Regular:\nABCDEFGHIJKLMNOPQRSTUVWXYZk\u00a0\u00a5\u00ae\u00f0\u0127\u02c6\u02dc\u0302\u0303\u03dd\u03f0\u2035\u210f\u2127\u2132\u2136\u2137\u2138\u2141\u2190\u2192\u219a\u219b\u219e\u21a0\u21a2\u21a3\u21ab\u21ac\u21ad\u21ae\u21b0\u21b1\u21b6\u21b7\u21ba\u21bb\u21be\u21bf\u21c2\u21c3\u21c4\u21c6\u21c7\u21c8\u21c9\u21ca\u21cb\u21cc\u21cd\u21ce\u21cf\u21da\u21db\u21dd\u21e0\u21e2\u2201\u2204\u2205\u220d\u2212\u2214\u2216\u221d\u2220\u2221\u2222\u2223\u2224\u2225\u2226\u2234\u2235\u223c\u223d\u2241\u2242\u2246\u2248\u224a\u224e\u224f\u2251\u2252\u2253\u2256\u2257\u225c\u2266\u2267\u2268\u2269\u226c\u226e\u226f\u2270\u2271\u2272\u2273\u2276\u2277\u227c\u227d\u227e\u227f\u2280\u2281\u2288\u2289\u228a\u228b\u228f\u2290\u229a\u229b\u229d\u229e\u229f\u22a0\u22a1\u22a8\u22a9\u22aa\u22ac\u22ad\u22ae\u22af\u22b2\u22b3\u22b4\u22b5\u22b8\u22ba\u22bb\u22bc\u22c5\u22c7\u22c9\u22ca\u22cb\u22cc\u22cd\u22ce\u22cf\u22d0\u22d1\u22d2\u22d3\u22d4\u22d6\u22d7\u22d8\u22d9\u22da\u22db\u22de\u22df\u22e0\u22e1\u22e6\u22e7\u22e8\u22e9\u22ea\u22eb\u22ec\u22ed\u2322\u2323\u24c8\u250c\u2510\u2514\u2518\u2571\u2572\u25a0\u25a1\u25b2\u25b3\u25b6\u25bc\u25bd\u25c0\u25ca\u2605\u2713\u2720\u29eb\u2a5e\u2a7d\u2a7e\u2a85\u2a86\u2a87\u2a88\u2a89\u2a8a\u2a8b\u2a8c\u2a95\u2a96\u2ab5\u2ab6\u2ab7\u2ab8\u2ab9\u2aba\u2ac5\u2ac6\u2acb\u2acc\ue006\ue007\ue008\ue009\ue00c\ue00d\ue00e\ue00f\ue010\ue011\ue016\ue017\ue018\ue019\ue01a\ue01b\ueffd\ueffe\uefff\nNote that the first letters of the AMS Regular font, do look like double struck letters in the font.\n. I use this app: http://www.glyphsapp.com/\nBut I'm not a font expert, this is the only one I tried. Which list do you use for the grouping ?\n. would love this as well. For a visual comparison:\nKaTeX Font:\n\nLatin Modern Roman font:\n\n. > We'd like to support people who need KaTeX in IE 8, which is why we provide the fonts. If you don't want to support it, you can modify static/fonts.less and set @use-eot and @use-ttf to false and make a build using those settings.\nI have done that, thanks. Not ideal though, as I need to check in this build now in the repo (including all the fonts) and I may have to update this manually in the future. (Alternatively I could fork katex and publish that on npm, but also not ideal).\nPersonally I would vote for not supporting IE8. Not just for my reason, but because IE8 is an unsupported browser, it doesn't get security updates anymore. It is dangerous to be on IE8. If you are on Vista you can (and should) upgrade to IE9. If you are on Window 7+, only IE11 is supported.\n\nMaybe we should make .woff the default now, and let people enabled .eot and .ttf if they really want it? That would probably make sense for the majority of people.\n\nI vote for this. Set @use-eot and @use-ttf to false by default, then people can set @use-eot to true if they need to support IE8. \n. @kevinbarabash \nHere is the source:\nlatex\n    \\begin{array}{rclcl} \n    2x + 5 &=& 4x -3 &&\\\\\n    2x + 5 - 4x &=& 4x -3 - 4x &&\\\\\n    -2x +5 &=& -3 &&\\\\\n    -2x +5 -5&=& -3 -5&&\\\\\n    -2x  &=& -8&&\\\\\n     x  &=& 4&&\n     \\end{array}. This code labels the symbols as unicode. I think this label is only used for the error message. It only supports the unicode symbols found in the main and ams font. I'm working on supporting fraktur etc. as well.\nI haven't done anything with textord yet, but surely would be good to have support for unicode in textord as well. \n. ",
    "mhchem": "This is the author of the original mhchem LaTeX package. I will create a JavaScript parser for mhchem syntax in 2016 that probably also could be used for KaTeX, if you are interested.\n. @brunovcosta could you get in touch with me via e-mail? I am interested in what you changed. A lot of time and effort went into fine-tuning the spacing (and this might continue), so that I am not too excited to hear you got rid of all of these spacing details. I'd like to hear your reasons and learn from that (and maybe vice versa).\n. Yes, of course. mhchem's processing can be described as a 4-step process.\n1. The LaTeX parser recognizes the \\ce command and passes its argument on.\n2. The mhchem parser parses the argument into an internal format\n3. The mhchem texifier converts the internal format into a LaTeX expression\n4. The LaTeX parser handles the output of step 3.\nStep 1 can be done, proven by brunovcosta.\nStep 2 is mhchem internal, no problem.\nStep 3 depends on step 4. Currently, the output of step 3 cannot be handled by KaTeX on step 4.\nI care about fine details of typography, but KaTeX is missing some functionality to achieve it. As I see, there is no \\phantom, \\vphantom, \\smash, llap and maybe other commands I used. Most output can be created and looks acceptable without these commands (this is what brunovcosta did). But I wished these commands were available.\nFurthermore, there are a few extra LaTeX commands available in step 4 so that mhchem can render things like non-standard stretchable arrows and special kinds of bonds.\nThe design was chosen so that I can be responsible for steps 2 and 3. And MathJax/KaTeX/... can be responsible for steps 1 and 4. While brunovcosta came a long way be modifying step 3, I'd favour if step 3 could be identical for KaTeX and for MathJax.. Great to see this advancing.\nYes, of course, I can do the mhchem module. Ping me once you have an empty plugin that I can fill with code.\n\\color will be removed. That is part of experimental, undocumented code. I don't know where you saw \\Rule. \\hline is not needed by the package. It is in the code just to pass through, in case people make use of \\ce inside table-like environments.. @sidvenu As an active GitHub user, you should know that an open issue means \"not completed yet\". Also, please take a minute to read the last messages on this page. You'll see that there is no plugin architecture yet. So I cannot make any estimation.. That sounds good.\nThe harpoon arrow heads are much larger than the normal arrow heads. Is that intended and consistent?\nI created 42 test cases.\n\\ce{H -> H}\\\\\n\\ce{H <- H}\\\\\n\\ce{H <-> H}\\\\\n\\ce{H <=> H}\\\\\n\\ce{H <=>> H}\\\\\n\\ce{H <<=> H}\\\\\n\\ce{H ->[a] H}\\\\\n\\ce{H <-[a] H}\\\\\n\\ce{H <->[a] H}\\\\\n\\ce{H <=>[a] H}\\\\\n\\ce{H <=>>[a] H}\\\\\n\\ce{H <<=>[a] H}\\\\\n\\ce{H ->[][a] H}\\\\\n\\ce{H <-[][a] H}\\\\\n\\ce{H <->[][a] H}\\\\\n\\ce{H <=>[][a] H}\\\\\n\\ce{H <=>>[][a] H}\\\\\n\\ce{H <<=>[][a] H}\\\\\n\\ce{H ->[a][a] H}\\\\\n\\ce{H <-[a][a] H}\\\\\n\\ce{H <->[a][a] H}\\\\\n\\ce{H <=>[a][a] H}\\\\\n\\ce{H <=>>[a][a] H}\\\\\n\\ce{H <<=>[a][a] H}\\\\\n\\ce{H ->[long text] H}\\\\\n\\ce{H <-[long text] H}\\\\\n\\ce{H <->[long text] H}\\\\\n\\ce{H <=>[long text] H}\\\\\n\\ce{H <=>>[long text] H}\\\\\n\\ce{H <<=>[long text] H}\\\\\n\\ce{H ->[][long text] H}\\\\\n\\ce{H <-[][long text] H}\\\\\n\\ce{H <->[][long text] H}\\\\\n\\ce{H <=>[][long text] H}\\\\\n\\ce{H <=>>[][long text] H}\\\\\n\\ce{H <<=>[][long text] H}\\\\\n\\ce{H ->[long text][long text] H}\\\\\n\\ce{H <-[long text][long text] H}\\\\\n\\ce{H <->[long text][long text] H}\\\\\n\\ce{H <=>[long text][long text] H}\\\\\n\\ce{H <=>>[long text][long text] H}\\\\\n\\ce{H <<=>[long text][long text] H}\\\\\nCould you create a high-res rendering of those for me to review (as above). If you want to see what that means, you could paste that at the bottom of the MathJax/mhchem manual for a rough idea. (In detail MathJax's arrow typography has room for improvement).. @ronkok I would be fine with the larger harpoon arrows. The only thing I would ask for is consistency between all 3 versions of harpoon arrows.\n@kevinbarabash Thanks for the screenshots. May I ask to see the completely set (as described above). This doesn't have to be part of the pull request. I'd just like to make sure there is consistency between all the arrow types, before I give my okay.. @kevinbarabash Yes, completely understand that. There is no \\ce support. But we (this includes me) are working towards that aim. One step is to provide commands to render reaction arrows, a lower-level functionality that will later on be used by \\ce. This pull request is about these reaction arrows, I understand. Above, I was asked to review this.\nI rephrase my question: I'd like to get a feeling of the arrow consistency. Could you please provide renderings of all 6 relevant arrow types, in 7 possible states? Here is an example how this could look like for the first arrow (this is NOT KaTeX).\n\n(If you had a live demo system with this pull request, I could test it myself. But, please excuse, I don't have the time to go through installing/building/configuring/fiddling with/cherry-picking/merging the sources.)\n. Thanks a lot. The arrow look fine and good to use.\nI would predict that he following arrows would touch the text.\n- \\xrightequilibrium{\\text{text lngg}}\n- \\xrightequilibrium{\\text{Mg}}. @ronkok Ooops, I meant the other one, where the short arrow is on top. \\xleftequilibrium{\\text{text lngg}}, \\xlefttequilibrium{\\text{Mg}}.. This is splendid!\nWhat I see here, seems very reasonable to me. So, I would leave the creation of the first version up to you. You decide, where to place the files, how to include them, etc. After that, I'd like to have control over the mhchem core for fixes and updates. You decide, how you would like to have that. Maybe a file at KaTeX/contrib/mhchem/mhchem.js where I can file pull requests? Or a completely separate repository? Maybe with your standard minification, maybe with mine (that is specially tweaked). You decide. I don't think, I will need a veto.\nI am looking forward to having mhchem support in KaTeX and working with you.. > But there were no \"main mhchem\" files that contain non-MathJax material.\nWhich could be created if need be.\nTo repeat myself: It's your decision where the files live. I don't have a preference. (As long as I can keep the behavior of mhchem for MathJax and mhchem for KaTeX aligned, I am happy.). I could create it, but please help me unterstand what is actually needed. I think both, MathJax and KaTeX, want to have one single minified JavaScript file for the mhchem extension. So how would a \"core mhchem\" help in that case? Wouldn't it be copied into the extension file anyway? Then I don't see a reason for a separate core file. Having 3 files, would create the need of another abstraction layer, more network traffic, delays. So, if the result should be one JS file for mhchem for KaTeX, I would rather have that file embed the mhchem core. To sync the extension for MathJax and KaTeX would be a matter of using a visual diff tool and skipping the frameword-specific part.\n(BTW, for mhchem for MathJax, I do the minification using a hand-crafted pre-minification step that leads to a much smaller minified file.). I understand. \n(BTW, I do neither build min.js by hand, nor do I have a build system. \ud83d\ude03)\nBut what do we do with the texify stage of the mhchem core? The part where MathJax needs \\rlap and \\raise and KaTeX needs \\mathrlap and \\raisebox (and the other 99% are identical)? How would you handle these cases? I would like to avoid a isKaTeX evaluation at runtime.\n\nOn another page: Are you sure that // Recreate the argument string from KaTeX's array of tokens from the top of this page really works correctly?\n// Eliminate spaces between any function and {\n        str = str.replace(/\\s(?=\\{)/g, \"\");\nThis looks like it would fail on things like \\ce{{marine water} - {water} -> {...}}. @ronkok Hooray! Thank you so much, that was quite some work! Thanks!\nOkay, I'll take it from here. If I update mhchem, I will update it for both, MathJax and KaTeX, from now on. The setup looks straight forward for me (I'd modify mhchem.js, file a pull request and your workflow does minification etc.).\n@ronkok I feel, you deserve a copyright line. I will add a line \"Copyright (c) 2018 Ron Kok\" with the next update.\nOnce again, Thank you!. Hi Ron,\nit seems you've put a lot of work into this. Some changes are definitely necessary, come are good, some are personal taste, some will make my life more complicated. I would prefer to keep the mhchem core aligned between different MathJax and KaTeX. With things like 'different linebreaks' you make this task very hard. Similar argument for const and let. I am not sure I want to change that for MathJax too, because that would exclude IE<11. This might not be a priority any more, but that was my reason to use var. (Yes, really, MathJax/mhchem runs in IE 6. \u263a)\nSo, again, I'd prefer a (first) PR where the core mhchem can be kept identical between MathJax and KaTeX. This makes it easier to keep mhchem working identical everywhere. From there, we can discuss improvements like shorter lines or const.. I'd be okay with that approach (I maintain just one version, you converting it on every change).\nI am not so sure about every change. For instance, 9, I find it much less error-prone to say \\. in a regular expression if I mean a literal dot, even if I could omit the backslash in some instances. The backslash doesn't hurt, decrease performance or anything. 10, I have to look into it. I'd like to do a performance measurement to see how this additional condition in the for loop works. 11 the same, I have to look into it. Contrary to some other coding styles, I'd like to have variable declarations visible on the same screen, I know that the position of the declaration does not change anything. But I am not sure we should do the discussions here at this point in time.\nLet's discuss the fundamental idea first: KaTeX using an adapted version of mhchem core, where every change has to be re-done by hand.. In LaTeX/mhchem (= mhchem.sty), I used a different approach: I made the arrow longer, so that the descenders do not touch the arrow head. I am completely fine with your solution.. I would be fine with any solution.\nIn Latex/mhchem (= mhchem.sty), I was very picky with the arrows. For instance, I made them all have the same length (when used without superscript or subscript). With MathJax/mhchem I couldn't be so picky. I used what I could get. There, the arrows are of different length, some even cannot stretch. So, I appreciate your perfectionism \u2013 and I could join in if you like (like the question if the min-length should be implemented inside the arrows themselves or be specified with their usage). On the other hand, the arrows are already much better than the ones of MathJax and the last grain of perfection could be added later on.. I don't like it. In particular, the \\\\tripledash part is part of internals a user should not never see. Also, the other definitions do not make me happy. What will happen when you will change the internals some time in the future?. One minor thing. I would prefer the all-lowercase spelling of mhchem over mhChem.. ",
    "brunovcosta": "I had to make an fast adaptation of mchem code to work with KaTeX:\nhttps://github.com/brunovcosta/mchem4katex\nI can fork the katex in order to create the parser extension\n. @mhchem, i can't find your email. Can you send me one? brunovcostadev@gmail.com\nI made this adaptation because i needed mchem suport quickly. I understand the importance of the spacing details and i'm adapting my katex fork to support the required functions (\\vphantom, \\hphantom, \\mathrel,\\mkern and \\mskip).\nIt's not intended to be an official pull request, neither an mchem replacement. Sorry about any mistake, i'll be happy to receive your email and help appropriately port mchem for katex \n. +1\n. up\n. ",
    "arjun810": "Is there still a chance that this'll get ported over to KaTeX? Would be really useful! We might be able to help out too, depending on how much knowledge of the underlying package is involved.. ",
    "ronkok": "Current Status:\n| Item                                                          | Status in KaTeX                                                                                                            |\n|:-----------------------------------|:-----------------------------------------------------------------------------|\n| Plugin architecture                      | KaTeX exposes __defineMacro(). It turns out that __defineMacro() is sufficiently powerful to enable an mhchem extension.  |\n| mhchem module                         | released as part of KaTeX v0.10.1. Yay!           |\n| \\raise.1em\\lower7mu      | \\raisebox{0.1em} is supported.                                               |\n| \\mskip2mu\\mkern3mu      | Supported.                                                      |\n| \\smash\\hphantom\\vphantom       | Supported                                                                    |\n| \\llap \\rlap                                                     | Supported. \\mathllap and \\mathrlap  fit better.           |\n| \\xrightarrow\\xleftarrow\\xleftrightarrow\\xrightleftharpoons | Supported                  |\n| \\xrightleftarrows\\xrightequilibrium\\xleftequilibrium      | Supported.                                                                                                            |\n| ^{\\circ}                                   | Both ^{\\circ} and \\degree are supported.                                   |\n| \\mathchoice                             | Supported                        |\n| Upright Greek letters                | Incomplete. Issue #564.        \n. @mhchem Thank you for your comment. I'll remove \\color, \\Rule, and \\hline from the status table in my earlier comment.. @danielhollas. Agreed. Yay!. @kevinbarabash, I doubt that using an SVG image would help. In general, I found that span borders gave better looking renderings than SVG images. Still worth a try, I suppose.\nAnother thing to try is box-sizing: border-box; CSS to locate the sqrt-line span and its border. Sometimes that method can evade floating point errors in the browser's internal calculations. In this case, I'd rate the likelihood of success to be <50%, but that is enough to make it worth a try.. @kevinbarabash, I had not thought of putting the radical and the viniculum into the same SVG image. That's an outstanding idea! \nHere's a general plan for the JavaScript: (1) Make the radicand into a group node. (2) Add padding to the left of that span that equals the width of the radical. (3) Call svgSpan to get the radical/viniculum image. It would be a nested SVG like the arrows, so the viniculum would stretch but the radical would not stretch. (4) Call buildHTML.makeVList to put it all together.\nThe weak point of that plan is step (4) makeVList. The radical will be taller than 1 em, so step (4) is blocked by issue #746. Or perhaps, we avoid makeVList and use custom code for vertical alignment in this case.\nOther than step (4), it looks pretty easy. And I'm sure that (4) can be overcome, too. It just won't be quite as easy as making a call to makeVList. \nDoes that all seem reasonable to you?. @kevinbarabash, It occurs to me that IE/Edge do not support CSS mask and so they would not support \\color for an SVG radical. That concerns me. I think \\sqrt is used much more frequently than anything I added in PR #670.  So I offer some options:\n\nProceed using the methods from PR #670. Let Edge render all radicals in black.\nWait until Edge supports CSS mask.\nMake an exception for \\sqrt, and have (Edge|sever-side rendering) write the entire SVG code for a radical inline whenever it is subject to \\color. (That would make Edge support \\color right now.)  If/when Edge supports mask, do another PR to make \\sqrt consistent with other SVGs.\n\nWhich would you prefer?. By plan step (1), make a group node, I mean nothing more than some code that already exists in groupTypes.sqrt. It starts out with:\nconst inner = buildGroup(group.value.body, options.havingCrampedStyle());\nThat's all I meant by plan step (1). Plan step (2) is to add some padding on the left end of inner. That will push it over to the right. Then I can overlay the image, and the radical will overlay into the padded space.\nNow the custom code for plan step (4):  I'm working up a function to use as an alternate to buildCommon.makeVList . The proposed function will be much simpler than makeVList because it will be purpose-built to deal with just one special case, that is, one element that is located on the base line and a second element that is a tall image.\nI'm calling the proposed function makeImageVList. With that in hand, it will be easy to get the correct vertical alignment for \\boxed, \\overbracket, \\underbracket, and these radicals. It's all coming together nicely.. @kevinbarabash, Two items re: \\sqrt:\n1. Do you want a \\oldsqrt function?\n2. If I don\u2019t finish this weekend, then this might take several weeks. Time demands are picking up.\n. Preview of coming attractions:\n\n. In this shot, there is one normalsize radical, to show the scale. The others are in \\tiny font size. Don't worry about the height of the last radical. I just haven't got to that part of the code yet.\n\n. Below are tiny radicals, subject to all the outer font sizes that you mentioned. \n\n. I zoomed the browser in to 400%, to get a detailed look.  At normal magnification, these are small. Below are the same radicals. This screen shot was done at 100% and magnified afterward.\n\n. Progress report: I have prepared SVGs in each radical size. Sizes and styles look good. \\color remains to be done and progress is going to slow down tomorrow. But I'm happy with how it looks so far.\n\n. Since PR #768 has now landed, it would be good to get a view of the current \\sqrt condition. Below are Chrome images from outer fonts sizes of 12 pt, 13 pt, 14 pt, 15 pt, 19 pt, 20 pt and 21 pt. These sizes had the worst \\sqrt rendering.\n\nThat may be an improvement over earlier rendering. It's pretty close to spot on. But, since it isn't perfect, I'll go ahead and prepare a PR that uses background SVG images. Then we can compare and pick the better option. It's not obvious to me which choice that will be.. The op's example string will now render, both directly and within \\operatorname:\n\nI realize that Unicode is an ongoing project, but maybe we could close this one issue?. @edemaine I do intend to continue with a few more small Unicode PRs. The choices yet to be made are harder ones and the PRs will come more slowly. I may never get to quite all the characters in this PR #73.\nOf course, other are welcome to write their own PR if I have omitted a desired character. I may never get to the one you need.\nRegarding double-struck characters, the ones I added are: \u2102 \u210d \u2115 \u2119 \u211a \u211d \u2124, from the BMP. I don't intend to write PRs for any surrogate pairs.. I think the following code would work for \\operatorname:\n````\n//////////////////////////////////////////////////////////////////////\n// amsopn.dtx\n//   \\operatorname\n// \\mathop{#1\\kern\\z@\\operator@font#3}\\csname n#2limits@\\endcsname}\ndefineMacro(\"\\operatorname\", \"\\mathop{\\text{#1}}\\nolimits\");\n//////////////////////////////////////////////////////////////////////\n````\nThat macro gets the spacing correct; it avoids centering a single character; it deals with hyphens correctly.\n\nI'm not really up to creating any Screenshotter tests, but I think the code is ready if someone wants to take it on.. @kevinbarabash, Do you think that this \\operatorname macro needs Screenshotter tests? If not, then I could just submit the PR.. The purpose of the \\text is to prevent a hyphen from turning into a minus. In other words, I'm using \\text as a hack to replace \\newmcodes@. If \\mathrm were to replace \\text the screenshot above would render as:\n\n . Well, there are math operators, such as lim sup, that do contain a space, so I suppose we want \\operatorname to enable a space. I really hadn't thought much about math-only commands.. Image from quicklatex.com for \\limsup x\n. I very much agree. This macro is meant to be a quick hack, done in time to be included in the next release. It can improved in several ways.. Okay, new option. This code eats spaces, and it has better MathML output than the macro version. Here's the output:\n\nfrom: \\( \\operatorname{g}(z) + 5\\operatorname{g}z + \\operatorname{gam-ma}(z) + \\operatorname{gam ma}(z) \\)\nThe code in functions.js is augmented by:\n// \\operatorname. No limits, not symbols.\ndefineFunction(\"\\\\operatorname\", {\n    numArgs: 1,\n}, function (context, args) {\n    const argArray = args[0].value;\n    let opName = \"\\\\\";\n    for (let i = 0; i < argArray.length; i++) {\n        opName += argArray[i].value;\n    }\n    opName = opName.replace(/\\\\s/g, \"\");\n    return {\n        type: \"op\",\n        limits: false,\n        symbol: false,\n        body: opName,\n    };\n});\nIn buildHtml.groupTypes.op, the line:\noutput.push(buildCommon.mathsym(group.value.body[i], group.mode));\nis replaced by:\noutput.push(buildCommon.mathsym(group.value.body[i], \"text\"));\nI don't do Screenshotter, but anyone is welcome to make this PR.. > This makes me sad.\nDon\u2019t be. This sort of thing shouldn\u2019t be a problem, just one step on the way to a solution.\nPerhaps some background. I\u2019ve been a structural engineer for 35 years. I\u2019ve led work at scales that range from a two sheet job to a $500 million project. During all that time, it\u2019s been rare that I could assign a project to just one person. Anything substantial requires a team of people with complementary abilities.\nThat\u2019s really all this is. Just a task that requires a team with complementary abilities. I\u2019m seeing open-source development for the first time and it seems as though the whole process may be held back because it doesn\u2019t have a really good way to put those teams together. \nIf you find a way to make Screenshotter easier, that\u2019s great, but if you want to do something really brilliant, figure out a way to identify and build a team on demand.. @kevinbarabash I have prepared a PR to support \\operatorname, but I am once again having trouble making a commit. I get the error message:\n\nCommit failed - exit code 1 received, with output: 'error: cannot spawn .git/hooks/pre-commit: No such file or directory'\n\nI have tried:\n npm install\n npm update\n deleting the file pre-commit from the hooks folder.\n deleting all the files in the hooks folder.\nFrustration waxes. Patience wanes. Any suggestions would be welcome.. Success. Thank you once more.. As mentioned earlier on this thread, these functions are now ripe to be implemented. The code:\ndefineMacro(\"\\\\iff\", \"\\\\mathrel{\\\\;\\\\Longleftrightarrow\\\\;}\");\ndefineMacro(\"\\\\implies\", \"\\\\mathrel{\\\\;\\\\Longrightarrow\\\\;}\");\ndefineMacro(\"\\\\impliedby\", \"\\\\mathrel{\\\\;\\\\Longleftarrow\\\\;}\");\n\u2026 would pick up three functions at once. They can be modified later to be dots-aware.. That works for me. I tried it myself this morning and GitHub defeated me again.. I believe that this issue can be closed. We resolved the script/calligraphic ambiguity in favor of script. Having done so, there are no Unicode code points available with which to support calligraphic.\nExcept for that nuance, we now support everything requested in this PR, and more.. I realize that this discussion is stale, but I have an question.\nConsider two functions: \\land and \\wedge. These two functions are synonyms, and by that I mean:\n1. their MathML output is identical, i.e., <mo>\u2227</mo>\n2. their HTML output is identical, i.e., they are both math symbols of the same atom type (BIN), displaying the same character (\u2227), from the same font (KaTeX Main).\n3. their sameness goes deeper than the final output. They are also identical while resident in the DOM tree and in the MathML tree.\nWhen we consider the Unicode character \u2227 and map it to a TeX function, it doesn't matter which synonym we choose. To the author or reader, either choice has no percievable difference in input, output, or tree. If we choose one now and change the choice later, nothing breaks.\nCan we agree on that?\nAlso, let's set a criterion such that we prefer to map to a simple atom as compared to a function with an argument. For example, \u2192 should map to \\rightarrow or \\to, rather than, say, \\vec. \\overrightarrow, or \\xrightarrow.\nCan we agree on that, too?\nIf we are agreed, then I can begin to start writing PR's in the style of PR #410. My intent is to write some scripts that will gather mapping data from KaTeX symbols.js, from Carol JVF Burns's MathJax page, from unicode-math, and from John Cook's Unicode/LaTeX Converter. I may also try to get background data from Detexify.\nIf all those sources agree on a mapping for one character, or at least agree on synonyms, then I will feel free to include that character in a PR. I'll save the hard cases for later discussion.\nAcceptable?. The epic discussion was very helpful. I wrote my Unicode PRs in a way that tried to avoid the potential pitfalls pointed out here.  So thanks!. Closed via #1410.. Similarly, U+03B5 \u21a6 \\varepsilon \u03b5, U+03F0 \u21a6 \\varkappa \u03f0, U+03C2 \u21a6 \\varsigma \u03c2, U+03C6 \u21a6 \\varphi \u03c6. KaTeX supports all of them.\nI would include \\digamma, but there is an issue to resolve first.\nThe AMS (and KaTeX) function \\digamma looks like U+03DC, capital letter \u03dc. But the unicode-math and Teubner packages map \\digamma to U+03DD, small letter \u03dd. It is \\Digamma that they map to U+03DC, capital letter \u03dc.\nIt\u2019s a problem. The unicode-math function names are consistent with the naming convention for other Greek letters. But AMS is more popular. I don\u2019t know the best way to resolve the collision.\n. @WChargin, you are correct about U+03B5, U+03C2, and U+03C6. They do not require any special casing. My bad.\n@kevinbarabash, Good call. It's okay to go slow. I don't hear the world calling out for a expedited decision on \\digamma.\n. Should \\mathbf{\u03a9} render the same as \\mathbf{\\Omega}? Would a test of that be worthwhile?\n. Point taken. I was confused by:\n1. The name \\centerdot sounds like it should be a centered dot, and \n2. The STIX package makes \\centerdot a synonym to \\cdotp.\nBut AMS and three other packages all display it the same way that KaTeX displays it.\nI withdraw my issue. Thank you for your patience.\n. There is more than one way to do this. If you are using the KaTeX auto-render extension, then you can delimit your math with \\(\u2026\\) instead of $\u2026$. Or you can nest the whole phrase in <noscript>\u2026</noscript> tags.\nSome markdown parsers only recognize the closing $ as a math delimiter if it is not followed by a number. Sometimes I think we should do that too.. Update: I just checked and Chrome now renders \\Game properly.  The \\Game part of this issue is now moot.\n\\Bbbk still renders exactly like \\text{k}.\n. @edigleyalexandre It matters where in the list things are placed. Be sure that \"$\" comes after \"$$\", as in:\njs\nrenderMathInElement(document.body, {\n  delimiters: [\n    {left: \"$$\", right: \"$$\", display: true},\n    {left: \"$\", right: \"$\", display: true},\n    {left: \"\\\\(\", right: \"\\\\)\", display: false},\n    {left: \"\\\\[\", right: \"\\\\]\", display: true},\n    {left: \"\\\\begin{equation}\", right: \"\\\\end{equation}\", display: true}\n  ]\n});. Well, you did omit a comma that should follow {left: \"\\(\", right: \"\\)\", display: false}. I don't know if that by itself is enough to stop the script.\n. Is now a good time to take ttf and eot fonts out of the master branch? KaTeX doesn't run in IE8 and and that fact is now acknowledged in README. . Upper case Greek italic letters can be rendered right now by writing something like \\mathit{\\Theta}.\nLower case upright Greek will, I believe, need some programming done.  ~~The glyphs are available in the KaTeX fonts, and~~ I can get the following result:\n\n.. by writing code:\ndefineSymbol(math, main, textord, \"\\u03B1\", \"\\\\upalpha\");\n            defineSymbol(math, main, textord, \"\\u03B2\", \"\\\\upbeta\");\n            defineSymbol(math, main, textord, \"\\u03B3\", \"\\\\upgamma\");\n            defineSymbol(math, main, textord, \"\\u03B4\", \"\\\\updelta\");\n            defineSymbol(math, main, textord, \"\\u03F5\", \"\\\\upepsilon\");\n            etc.\n... and then using \\upalpha, \\upbeta, etc. in an HTML page.  Each letter comes in with class = \"mord mathrm\", which seem reasonable to me.\nBut there is a problem: The console logs a number of warnings that KaTeX does not have font metrics for the upright lower case Greek letters. Generating those metrics is probably beyond my ability. \nI tried writing \\mathrm{\\theta}, which is unsuccessful. KaTeX returns a mathit, not a mathrm letter. ~~I wonder if that happens because the font metrics aren't there?~~ . Well, my last comment contains an error. Those letters were rendered in Times New Roman. I guess the glyphs are not in a KaTeX font after all. My apologies for the confusion.\nBut it suggests a tactic. The \\text{...} function already assumes font metrics that were taken from Times New Roman for many glyphs not in the KaTeX fonts. Perhaps upright Greek could be implemented in a similar way? . I'll be interested to hear what @MaxNoe has to say on the question of upright Greek. It seems to me that there is no consensus. The packages that provide upright Greek include: textgreek, upgreek, newtxmath, kpfonts, pxgreeks, mathdesign, fourier, textalpha, and fontspec. Also, chemgreek tries to do some sort of synthesis.. I have a proposal for KaTeX. That is to use Times New Roman for upright Greek letters. This can be regarded as a temporary approach until the KaTeX fonts include upright lower case Greek. As an example, take \u03b2, which is U+03B2, or 946 in decimal.\nIn font metrics, add one line to the metrics for \"Main-Regular\"\n\"946\": [0.214, 0.693, 0, 0],\nThe depth and height numbers in that line come from the Times New Roman font. When that line of code exists, KaTeX will render \\mathrm{\\beta} as an upright lower case Greek letter \u03b2 from the Times New Roman font. \nSo far, we've enabled a KaTeX group node. If we want to enable a symbol node, that takes one more line of code:\ndefineSymbol(math, main, textord, \"\\u03B2\", \"\\\\upbeta\");\nI've adopted the \\upbeta notation from package upgreek, which provides upright Greek to LaTeX in math mode. As an alternative, the textgreek package provides the same letters in text mode. Its notation is \\textbeta.\nSo, I wonder, @kevinbarabash, would KaTeX be interested in a PR that added the Times New Roman font metrics? How about the \\upbeta option?\n. Those are valid concerns. I got the metrics from the internals of the Microsoft, that is to say, the Monotype version of the Times New Roman font.  My understanding is that Macs use the Linotype version, which may be slightly different. Wikipedia tells me that Mac OS X (10.5+) includes both the Monotype and the Linotype version. Not sure how that works.\nI'll see if I can get my hands on the Linotype file, to check if the differences go so far as to change the depth and height of the letters. It might be just different line weights.. Clarification on my previous note. Times New Roman is the same font everywhere. It is on all Windows computers and on all Mac OS X (10.5+). Since the KaTeX CSS contains\n.katex {\n  font: normal 1.21em KaTeX_Main, Times New Roman, serif;\n... all those computers will render the same Times New Roman characters for any glyph not contained in the KaTeX fonts. \nEarlier versions of the Mac OS may not contain Times New Roman. Those Macs will instead display the glyphs in Times Roman, the Mac OS standard for serif fonts. There may very well be tiny differences in height between Times New Roman and Time Roman. And the Linux situation is as you might expect. The Times New Roman font may or may not come installed with Linux, but with a little effort there are perfectly legal ways for a single user to get a free copy.\nSo here we have a trade off. Which is worse, the lack of any upright Greek or the small differences in alignment that are likely to appear on older Macs? I have a mild preference for making the PR. But I would be okay either way. In the end, it is a question for the KaTeX maintainers. So, @kevinbarabash, let me know what is decided. . Now that I think a little more, it may not work to use a system font in Android. I'll try to work up a comparison of font metrics of the relevant characters for Times Roman, Times New Roman, and Noto Serif. If the differences are large, then I suppose we ought to wait for glyphs in the KaTeX fonts.. Just thinking out loud here. Suppose that an accent, say \\widehat, consists of an SVG image set to fill 100% of a bounding box. The height of the bounding box is a preset distance, available for all the vlist construction done by KaTeX.\nThe bounding box gets a provisional width, then after the page loads, KaTeX measures the width of the text and uses that to dynamically reset the width of the bounding box. No other post-load work takes place.\nYes, this method involves measurement of DOM nodes. But it does not cause a page refresh. Everything except the width of the \\widehat happens just as quickly as in current KaTeX. Is that so very bad?. I have spent some time working on the clever CSS hacking that @edemaine alludes to, and I\u2019ve made a lot of progress.\nThere is quite a bit of material to cover, so I\u2019ve put up a website here.\nI\u2019d like to hear your comments. Those pesky combinations. It might help to know that both IE 8 and IE 9 are disappearing. According to gs.statcounter.com:\nBrowser market share of desktop, tablet, \\& console\n|       | Dec 2015 | Dec 2016 |\n|-------|----------|----------|\n| IE 8  | 1.87%    | 0.82%    |\n| IE 9  | 1.44%    | 0.50%    |\n| Total | 3.31%    | 1.32%    |\nBrowser market share including mobile\n|       | Dec 2015 | Dec 2016 |\n|-------|----------|----------|\n| IE 8  | 1.15%    | 0.41%    |\n| IE 9  | 0.88%    | 0.25%    |\n| Total | 2.03%    | 0.66%    |. I can think of one such use case: Math rendering in Kindle eBooks is often terrible. KaTeX output, written entirely in units of em and en, could be the HTML supplied in the eBook. It would render with great quality and use less band width than images.\nOf course, if Amazon would license KaTeX and make it integral to the Kindle, that would be better still.. I\u2019ll add another problem with the background-image approach. This contradicts something I said on the web page.\nIt turns out that \\color will not operate on these background images. Normally, A SVG fill=\"currentColor\" will inherit the current CSS color, i.e. the current text color. But there is no text in a background, so a background-image SVG has nothing to inherit. It always comes in black.\nI don\u2019t see \\color applied to math very often, but it could occasionally be a serious problem. Too bad.. @edemaine, I agree with everything that you say. Width-based commands would be more robust. My work looks to be useful mostly as a short-term hack, or possibly a fallback for wide layouts that are complex or contain characters of unknown width. \nException: the \\boxed CSS looks to be pretty robust.\nRegarding rendering: When I look, the Chrome integral failure is one that occurs only when I've zoomed in to a high magnification. I find it more interesting that the \\vec is missing above the E in Chrome. I have found that to occur elsewhere. It is not caused by my hack. And \\tilde does not disappear in the same way.\nI'll look into the Firefox problem. It affects the elements on which I've used CSS calc() to set the width of the element. And I'll see if I can determine what conditions cause a \\vec to disappear in Chrome. . Update on my work with SVGs and background-images: I\u2019ve overhauled the arrows and braces, and they now work correctly in Firefox and Chrome.\nAs before, the work is on a webpage located here.. Regarding colors of background SVGs: As an alternative to the inline code / url(\"data:image/svg+xml  approach, KaTeX could declare that these wide functions can take on only the 19 standard predefined colors. Then create 19 SVG files for each function. They're not much more than 1 KB each.\nThen, when KaTeX encountes a \\color function, it could declare an inline style, such as background-image: url(images/rightarrow-red.svg);.. I\u2019ve made one more edit to my work on background-image SVGs. Now I show examples of how to use inline SVGs to apply \\color, and to standardize \\cancel line weights. As before, the work is on a web page here.. I\u2019ve made a great deal of progress on stretchy wide elements using background-image SVGs. In fact, I believe that the work is nearly ready for a pull request. The current status is on a web page here.\nA review would be welcome.. Regarding the integral and summations, that's a bonehead mistake on my part. Try refreshing the page now.. I should probably set a minimum width for braces. I put the short example up without a minimum to test people's tolerance for the discontinuity. And now I guess I have my answer: Set a minimum.\nAnd you're right about the \\overgroup. It's too heavy. I'll fix it. That sort of thing is why I put the page up.. The \\overgroup is now thinner than when @edemaine commented earlier. I got the new image directly from the MnSymbol package, the home of this function.. Well the page's source code will give you all the input to the tests.  \nI know that mathtools, if not other packages, does some modifications to the LaTeX accents. That sort of gives me permission to vary things a bit, doesn\u2019t it? I did not try to exactly copy either one. I just got the KaTeX glyph for U+21A3 (not U+2192, it was too thick), cut its tail off, and tried to put it in a good place.\nMy promise to fix the short brace may have been premature. I have not actually figured out how to improve it. But I\u2019ll work on it.. Regarding the \\oint, I just added \\displaystyle. The way it looks now is probably what you were expecting.. I just set a minimum width on the braces. The short braces should now look less jagged. \nI'll try the crispEdges. No doubt the straight lines will look better. We'll see about the rounded edges.. I also dislike that gap under the radical, and I'm not quite sure what is causing it. I can get the same effect with an \\overline placed at the same height. I'll do some more research, and if I can fix it by modifying the accent, I'll do that. But it may need a modification to \\sqrt.\n\n. Well, the radical gap problem turned out to be pretty easy. I removed a vertical kern from the top of the accent vlist and the gap went away. I had to clear my browser history to see the corrected version, but if you do that, you should see something better.. In the Notes section of my page, I ask the KaTeX owners about a few issues where preferences could go one way or another. I was thinking that I should get those issues resolved before the PR.\nAnd there is another roadblock here. My inexperience. I am unfamiliar with Git, LESS, Node.js, npm, Screenshotter, etc. If there is anyone who would like to pick up this work and carry it forward through the PR, that would make me happy.\nOtherwise, it may take some time for me to learn that technology stack.. I only write SVG code inline if it is necessary to achieve a \\color or a bracket line thickness. All the other calls to \\bcancel, \\overbracket, etc., are implemented by a CSS class, not by inline SVG.\nAnd you're right, the SVG code for five functions gets duplicated in the JavaScript.\nThe entire /images/ folder is 27.5 KB. In order to write all of it into CSS, I would have to implement URL escaping. Also a few of the files get used more than once (to build up a composite image like \\overleftrightharpoon). In CSS, I would have to write that code multiple times. On the other hand, as you mention, we would have to write the licensing information only once.  So let's estimate a total increase to CSS of roughly 30 KB if it contained all the images.\nI'll keep looking at the \\quad bug. I'm running low in ideas, though.. @kevinbarabash, I'm looking at the tests on an older Dell monitor and I believe that I'm going to be cross. These images look so good on a good monitor and they look so bad on this one. Not only that, but they are worse when I set shape-rendering=\"crispEdges\". They look bad on IE 11 and they look bad on Chrome. It's a fiasco.\nI'll do some investigation to see if there is any way to salvage the situation. That will eventually include removing the crispEdges, but not right away. You can look now if you want to see a mess.. I couldn't take it anymore. I took the crispEdges away. Yes, the long horizontal lines have blurry edges on a non-retina monitor, but at least they look like lines. \nYou know what? The short \\vec arrows are just as blurry as the long \\overrightarrows. It's not as noticeable on the \\vec only because they're smaller. . That makes sense. Thank you for the insight. I'm booked up today, but I'll have a look tomorrow when I can get back to this.. The boxed bug is fixed. An adjacent space no longer gets spliced into the box. Tomorrow I need to tweak the SVG images because IE 11 crops them.\nWe'll see about a PR next week.. @kevinbarabash, I've done some work to mitigate the blurriness that occurs on a non-retina display. You can see the the results here. I\u2019m curious to know your opinion.. @glebm, I plan to implement CSS mask-image for colors today. I'm avoiding filter because it involves a lot of calculation by the browser and I'm afraid that the accent color would end up with a near-match but not an exact match to the subject matter.\nUnfortunately, I'll still have to use inline SVGs to apply color in IE, Edge, and Firefox. But at least the other browsers will be fast.\n@kevinbarabash, I don't think the blurriness problem is unique to SVGs. When I look at the arrows in the sequence \"meh\u200b 1\u21922\u21923\u21924\", I see the same blurriness. I think I've done about as much as I can with the SVGs, so I'm going to declare victory and stop work on that issue.\n@kohler, A week ago, I looked at sprites and I had a solid reason why they wouldn't work. I've forgotten what that reason is, so I'll take another look. . Firefox support for mask is only for SVGs written inline. That defeats the purpose. If I'm going to write an inline SVG, I might as well just write the correct color into the code.. Let's reset this conversation. It began when @kevinbarabash noted that many functions were blocked because KaTeX did not know layout widths. PR #670 mitigated, but did not completely solve, the problem. I can think of two functions that are still blocked. Perhaps you can think of others. My nominations are:\n \\rotatebox\n \\cancelto\n@kevinbarabash suggested a couple of ways that KaTeX might figure out how wide a layout might be:\n1.  render the layout once with placeholder phantoms and visibility: hidden;, measure DOM nodes, update the layout and set visibility: visible;\n2.  require horizontal (advance) metrics for all glyphs to be rendered. \nI think that option 2 would also need a horizontal equivalent to buildCommon.makeVList. Calculating the width of a fraction or an environment is much more complex than just summing up character widths. Not only that, but option 2 takes on still more complexity  in languages like Arabic or Persian.\nWhich is why I prefer option 1, DOM node measurement. It causes a performance hit, but it may actually be doable. And since so few functions now need to know a layout width, the performance hit is less important that it once was. Or perhaps KaTeX never supports \\rotatebox or \\cancelto.  That would also be okay with me.\nI bring this up now because @HosseinAgha deserves some direction on this question before he gets very far into his work on issue #729. Must he supply font width metrics?. CSS transform: rotate can certainly rotate a span. But then KaTeX needs to calculate the new span.height so that subsequent operations can place the span in the proper vertical alignment. To do the trigonometry necessary to find the revised height, one needs to know the span width. \nAnd the difficult part of \\cancelto is the arrow head. Again, some trigonometry is needed to get the right amount of rotation. I haven't found any way to do that without knowing the span width.. @glebm, I second the remarks by @edemaine. This is impressive stuff and yet it doesn't quite fill the present need. In buildHTML, the function buildCommon.makeVList is called 20 times. makeVList uses span.height, span.depth and kern distances to calculate hard vertical locations for subscripts, superscripts, numerators, denominators, fraction bars, accents, environment elements, etc., etc.  \nSo internal knowledge of span.height is necessary. Or an alternative to makeVList is needed. . Murray Sargent has written some blog posts on this topic in the last few months. You might want to look into Math Accessibility Trees, Speaking of Math\u2026, Nemeth Braille, Nemeth and Unicode, and Speaking Subscripts, Superscripts, and Fractions.\nHe believes there is more than one good way to write such a tree and he lays out some options.. It would be great if the text generator could eventually be included in auto-render.min.js.. This issue was resolved by PR #670.. I believe this issue was resolved by PR #745.. Yes, it would be cool if the LaTeX code could be copied. Even Microsoft Word now accepts LaTeX input.\nOne way to accomplish this would be to make the entire KaTeX span into a toggle switch that would, when clicked, display the LaTeX code. One way to do this needs only some CSS and a unique ID by means of the checkbox hack... I believe that this issue was resolved by PR #768.\n\n. I have resolved all the lint errors. The error messages I'm getting now are, to me, cryptic. Any help would be appreciated.. Yes, I've looked the link you have provided. Yesterday, I cleaned up all the lint errors. The errors that remain start at line 858 of https://travis-ci.org/Khan/KaTeX/builds/218513949#L858. The typical remaining error says something such as:\nnpm ERR! Linux 4.4.0-51-generic\nAnd though some may find that statement to be very informative, I confess that I find it cryptic.. Well, @edemaine, I've made another commit, titled  \"Fix lint errors\". I hope that qualifies as the \"push\" that you alluded to. If not, let me know. And I appreciate the help.. Well, that's progress. The lint corrections have passed. Travis now fails on Sreenshotter.\nI have had no success running Screenshotter locally. If anyone else would like to try, that would be fine with me.. Here's a thought: If I inline the SVG code in the JavaScript (to enable server-side \\color), that opens up another possibility.  I could then write all the SVGs inline, always. That would eliminate the entire /images/ folder and all its SVG files.  And KaTeX would never make a HttpRequest for an image file. So it would be faster. The downside is a lot more bloat in the HTML.\nComments?. @edemaine,  I've created a local version with all the SVG code inline. It increases the JavaScript size by 20K, which is less than I expected. I took a pretty extreme approach to eliminating code duplication. For instance, I wrote the typical opening SVG tag only once and I wrote the path for a rightarrow only once. Then, for any specific image, I append these strings together on the fly to create the final complete SVG code. It's pretty compact code, but I suspect it would be hard to maintain and extend.\n@glebm, If were to summarize your thoughts in my own words, it would go like this:\n1.  Move feature detection and/or browser detection from the JavaScript to the CSS. That enables detection in server-side rendering.\n2.  Use CSS mask when supported and render black images when mask is not supported. That makes inline SVG code unnecessary.\nThat would complicate the CSS pretty substantially, but it is in every other way very attractive. I'll work up  a prototype. I'm leaning towards this approach myself.. @glebm, I now have @supports partly working. It properly controls the background-image and the mask-image in  Chrome, Edge, and Firefox. Now I need to write an inline style to set the background-color. The JS is node.style.backgroundColor = options.color;  It has to be inline because I don't know at build time what color the user will want.\nHow does one use @supports to control whether or not an inline style gets rendered?. @kevinbarabash, Regarding screenshots, I agree. I also have some work underway that improves the sever-side rendering, as suggested by @glebm. I'm busy on other things for a couple of days, but sometime next week I'll get you some screenshots and a squashed PR.. @kevinbarabash, I've updated PR #670 with my latest work, improving server-side rendering and minfying the SVG files. I've also squashed the PR. It's ready for your review whenever you find it convenient. You'll find that the JavaScript and the HTML are simpler, but the CSS is more complex.\nI've also added some Jasmine tests. I tried to add Screenshotter tests, but failed. I don't plan to try again. On the other hand, there is more than one way to contribute. If you want to assign some Screenshotter work to someone at KA, I would be happy to make a financial contribution that leaves KA whole. The Screenshotter code that I tried to add is:\n```\nBoxed: \\boxed{F=ma} \\quad \\boxed{ac}\\color{magenta}{\\boxed{F}}\\boxed{F=mg}\nExtensibleArrows: |\n    \\begin{array}{l}\n        \\xrightarrow[ab]{ABC} + \\xRightarrow{ABC} + \\xrightleftharpoons[ab]{ABC} + \\xhookrightarrow[ab]{ABC} \\\n        \\xtwoheadrightarrow{ABC} + \\frac{\\xrightarrow[ab]{ABC}}{\\xrightarrow[ab]{ABC}} + \\left\\lvert\\xrightarrow[ab]{ABC}\\right\\rvert\n    \\end{array}\nHorizontalBraces: \\overbrace{\\displaystyle{\\oint_S{\\vec E\\cdot\\hat n\\,\\mathrm d a}}}^\\text{emf} = \\underbrace{\\frac{q_{\\text{enc}}}{\\varepsilon_0}}{\\text{charge}}\nHorizontalBrackets: |\n    \\begin{array}{l}\n        \\overbracket{(2x+3)}^\\text{factor 1}\\,\\underbracket{(4x+5)}\\text{factor 2} \\\n        \\overbracket[0.15em][1.2em]{10\\rightarrow 9}^{\\text{high}} \\rightarrow \\overbracket[0.05em]{2\\rightarrow 1}^{\\text{low}}\n    \\end{array}\nLowerAccent: |\n    \\begin{matrix}\n        \\underleftarrow{AB} \\quad \\underrightarrow{AB} \\quad \\underleftrightarrow{AB} \\quad \\undergroup{AB} \\\n        \\underlinesegment{AB} \\quad \\undertilde{AB}  \\quad \\color{green}{\\underrightarrow{AB}} \\\n        \\underrightarrow{F} + \\underrightarrow{AB} + \\underrightarrow{AB}^2 + \\underrightarrow{AB}_2 \\\n        \\frac{\\underrightarrow{AB}}{\\underrightarrow{AB}} + \\sqrt{\\underrightarrow{AB}} + \\left\\lvert\\underrightarrow{AB}\\right\\rvert\n    \\end{matrix}\nStretchyAccent: |\n    \\begin{array}{l}\n        \\overrightarrow{AB} \\quad \\overleftarrow{AB} \\quad \\Overrightarrow{AB} \\quad \\overleftrightarrow{AB} \\\n        \\overgroup{AB} \\quad \\overlinesegment{AB} \\quad \\overleftharpoon{AB} \\quad \\overrightharpoon{AB} \\quad \\color{red}{\\overrightarrow{AB}} \\\n        \\widehat{\\theta} \\quad \\widehat{AB} \\quad \\widehat{ABC} \\quad \\widetilde{A} \\quad \\widetilde{AB} \\quad \\widetilde{ABC} \\\n        \\overrightarrow{F} + \\overrightarrow{AB} + \\overrightarrow{F}^2 + \\overrightarrow{F}_2 + \\overrightarrow{F}_1^2 \\\n        \\overrightarrow{AB}^2+\\frac{\\overrightarrow{AB}}{\\overrightarrow{AB}} + \\sqrt{\\overrightarrow{AB}} + \\left\\lvert\\overrightarrow{AB}\\right\\rvert + \\left(\\overrightarrow{AB}\\right)\n    \\end{array}\nStrikeThrough: |\n    \\begin{array}{l}\n        \\cancel x \\quad \\cancel{2B} + \\bcancel 5 +\\bcancel{5ay} \\\n        \\sout{5ab} + \\sout{5ABC} + \\xcancel{\\oint_S{\\vec E\\cdot\\hat n\\,\\mathrm d a}} \\\n        \\frac{x+\\cancel B}{x+\\cancel x} + \\frac{x+\\cancel y}{x} + \\cancel{B}_1^2 + \\cancel{B^2} + \\left\\lvert\\cancel{ac}\\right\\rvert\n    \\end{array}\n```. As before, I have a web page up that describes the results of PR #670. I\u2019ve spent some time with BrowserStack, and the page now includes accurate browser support data.. Yes, I needed to fix a bug -- extensible arrows should be REL, not ORD. So my attempt was to make the change, then squash all the work so that KaTeX maintainers could review it. As a new GitHub user, I have two comments:\n\nGitHub\u2019s ability to merge, diff, etc., is impressive.\nIt\u2019s user interface is vile.\n\nObviously, things went wrong. I\u2019ll try to follow your suggestion.. I believe that the latest commit has fixed my earlier error. @edemaine, thank you for the help.. @kevinbarabash,  Two items:\n\n\n@glebm has found a \\color method that may render these background SVGs with the proper color in Edge. I\u2019ll work it up tomorrow.\n\n\nI was thinking about future support for the mhchem package and I noticed that it\n   uses 7 different extensible arrows as reaction arrows. Four of them have an exact\n   match in this pull request (although mhchem calls each by a different name). I am\n   thinking that I might create SVGs for the other three and include them with names\n   similar to the mhchem names. So that would add \\xyieldsLeftRight,\n    \\xequilibriumLeft, and \\xequilibriumRight to the list of extensible arrows.\n\n\n\nIf you think that arrow idea is a bad one, let me know.. Update:\n\nUnfortunately, the \\color method alluded to just above will not work in Edge. I\u2019ll\n    stick with \\color via CSS mask, which is supported by all browsers except\n    IE/Edge. There\u2019s a fallback in black.\nIt turns out that mhchem applies a min-width of 2em to its reaction arrows, which\n   is longer than an AMS-LaTeX or mathtools extensible arrow (). So, to\n   support a future mhchem extension, I propose to add seven new extensible arrows.\n   Each one will correspond to a mhchem reaction arrow: \\xyields, \\xyieldsLeft,\n   \\xyieldsLeftRight, \\xmesomerism, \\xequilibrium, \\xequilibriumLeft, and\n   \\xequilibriumRight. What do people think of this idea? Should we omit these functions\n    from the documentation and reserve them for mhchem?. I should finish tomorrow.. @kevinbarabash, I have added one line of code to macros.js.  Now GitHub shows a conflict at that line, and my attempt to resolve the conflict failed. I would appreciate any help that you might offer.. @kevinbarabash, Here's the current status of PR #670: I've picked up the review comments. The substance of the work is contained in commit ee71b1b. The next two commits resolved a small merge conflict and resolved some lint errors. At that point, the commit passed all Travis tests.\n\nIn the latest commit, I've added some Screenshotter tests to ss_data.yaml, per your request. These tests did not pass, but then I didn't expect them to pass.\nThe work is once again ready for your review. Let me know if you need anything more from me.. Thank you very much for the help with the screenshots. I'll pull them in Now, comments:\n\n\nFirefox should be upgraded to the current version. The current version has full, not partial, support for CSS mask, so it will render the proper color for stretchy accents.\n\n\nI see a mis-alignment of the \\xcancel over the integral group. I'll look into it.. @kevinbarabash, I'm afraid that I must ask for help once again. The first screenshotter run revealed an error in the placement of \\xcancel on a tall group. I have fixed the bug, but now the screenshotter of course does not match the file that you created. Could you create a new version of that file?. That sounds great. I will have no computer access for much of the day tomorrow, but if anything comes up, I'll get to it in the evening.. @kevinbarabash , regarding the undefined control sequence, I expect that we have an conflict between mathtools and MnSymbol.  (Reference)\n\n\nI'm not sure how to test elements from both packages at the same time. Maybe we need to break the tests into multiple test cases?. I've already done the merge. I can do more. No worries. \nSometimes the only virtue that matters is persistence.. @kevinbarabash , I realize that this PR has been more trouble for you than most. I appreciate your help and your patience. I'm glad that the value added from the PR is worth the trouble. If you need any adjustments to stretchy wide elements, I'll be glad to help.\n@edemaine , @glebm, thank you as well. Between the three of you, you pulled across the finish line someone who started this work knowing very little about JavaScript or SVG and nothing at all about Git.. @kevinbarabash Many issues, like this one, are blocked by missing font glyphs. It would be helpful if we had a single list that identified all of the desired glyphs. Then, if someone took on the font task, they would have a ready-made TO DO list. I wouldn't mind putting together such a list.\nWould you rather have it in an issue or a project?. Instead of \\rotatebox, maybe we should try to support \\scalebox from the graphicx package. Then one could write: \\raisebox{\\depth}{\\scalebox{1}[-1]{WOW}} and the result would be:\n\nI think \\scalebox would be much easier to implement than \\rotatebox.\n. Here's another option: That is, revive the work that @kevinbarabash did to support\\class and \\cssId. Then the OP could set a class on a character and write a CSS transform: scaleY(-1) for the class.\nBesides, the \\class capability would be awesome in many ways. I think it ought to be in the KaTeX core, not an extension.. Clarification: I don't mean to imply that \\class or \\cssId are in any LaTeX package. They are clearly non-standard, if LaTeX = standard. I just think that those two functions could add so much goodness that they should be in every KaTeX installation. One should not have to set any special rendering options to get that power.. That makes too much sense to deny. I hadn't thought things all the way through.. In that spirit then, we could have a rendering option omitClass. If true, KaTeX would ignore the \\class and \\cssId functions.. You mentioned a smaller margin that a straight \\text{C}. I wonder if that is why buildCommon.makeVList spends the effort to call makeFontSizer.. I don't think the problem is yours. If I understand matters correctly, KaTeX does not change the radical height in a continuous manner. It's a step function. You happened to land on a bad height.. I think that one can get effective presentation MathML for \\raisebox with code something like:\nconst node = new mathMLTree.MathNode(\n        \"mpadded\", [buildGroup(group.value.body, options)]);\nnode.setAttribute(\"voffset\", group.value.dy.value);\nI have not tested that code, but I have put the HTML below into Firefox\n<math xmlns=\"http://www.w3.org/198/Math/MathML\">\n    <mi>a</mi><mpadded voffset=\"0.5em\">b</mpadded><mi>c</mi>\n</math>\n... and it comes out looking like this:\n\nThis comment is coming very late, I know. Sorry.. This code:\n\\left\\{ \\begin{array}{l}\n     2x + y = 6 \\\\\n     y = 7\n \\end{array} \\right.\n\u2026 should do the trick.. What follows is mostly speculation: In the relevant KaTeX source code, it\u2019s clear that the objective was to match the kern distances described in the TeXbook. My guess is that the MathJax people looked at the result on a low-resolution monitor and decided to use a different spacing.\nHere's how QuickLaTeX renders it:\n\nI think that KaTeX comes pretty close to LaTeX.  That's a good thing at high resolution.. That looks good. And kudos to @gagern, who made macros possible.. I'm good with the change. The span still is coded as a class=\"mrel\".. I\u2019ve put a temporary preview version of the proposed function support page here.. Done.. Say that an array contains \\\\[0.5 cm]. And the array is wrapped with custom delimiters \\left\\{ ... \\right..\nHow then does a server-side installation of KaTeX determine the height of that brace?. In testing for PR #670, I'm finding that browser support for CSS calc() is still less than 100% reliable. Any solution that depends heavily on calc would need thorough browser testing.. Correct. in,  cm, mm  are not relative to font size. \nWe could write a note in the browser support page to say that in,  cm, mm are not supported when KaTeX is running server-side. That puts a burden on the author to know the difference between browser-side and server-side. And another burden to know where exactly the subject math will end up being rendered.. I don't think one should take that ptPerEm attribute literally.  It is hard-coded to be equal to 10. That cannot be literally true when websites can set the base font to be any size. \nIn fact, all KaTeX dimensions are in ems and are therefore relative to font size. I have a guess at the source of the 10 ptPerEm number. \n// These font metrics are extracted from TeX by using\n// \\font\\a=cmex10\nMy guess is that all the metrics were extracted from a 10 pt font. But everything scales up and down with font size because all dimensions in KaTeX are done in units of em. The ptPerEm number can get away with being hard coded at 10 because it is used to define things like kern distances and scriptspace. Things, in other words, that also scale up and down with font size. \nSo I suppose ptPerEm is a misleading name. It should not be used to convert to an actual absolute distance.\n. So now let's go back to @MathSalomon's issue. He wants a spacing of \\\\[0.5cm].  He has explicitly asked for something that does not scale with font size. The server doesn't know the website's base font size, so server-side KaTeX has no obvious, non calc, way to convert from em to cm.  . But the font size can change, on the fly, while the web page is being viewed, long after the server has generated its HTML. It would take some very sophisticated CSS to be responsive to such a change.. It may be very feasible on the browser-side.  But, if you take this on, you should start with the knowledge that this will cause a break between server-side capability and browser-side capability. \nI've been more negative on this topic than is really reflective of my thoughts. There are pro's and con's to this idea. I've written some of the con's because no one else was, and I thought you should make an informed decision. I will support whatever decision you make and I might even help write the documentation.. Okay, one last comment. Even if absolute units were feasible sever-side, they are usually bad practice. Per @edemaine:\n\nWe never want \"absolute distance\".\n\nI think that is true much more often than not. Consider a hypothetical author who contributes an article to Khan Academy. That person is a subject matter expert in their own field, a real boffin. But not web savvy.\nNow the author writes \\\\[0.5 cm], looks at the result, and is satisfied. That author is probably completely unaware that a web page administrator might some day change the underlying font size and make that 0.5 cm gap look terrible. And so KA would end up with articles that are brittle to a font change.\nIMHO, Absolute units, even if feasible, would cause more problems than they would solve.. 1 cm box does not scale with document font size. So says W3C. MathJax agrees.. To test the of intelligibility of this proposal, let\u2019s try writing the documentation. If cm is the CSS definition, then the environment section can contain the line:\n\nAcceptable line separators include:\u00a0\\\\,\u00a0\\cr, and\u00a0\\\\[*distance*].\u00a0Distance\u00a0can be written with units of\u00a0em,\u00a0ex,\u00a0mu, mm, cm, or in.\n\nEveryone will know what that line means. If we define cm as you wish, how then should we write that line?. I speak now as an advocate for math authors, not programmers or web site administrators. A person who contributes an article to a web site should not have to understand the material in README. They are subject matter experts, not web mavens. They need to know what is in the Function Support page and they need to know that it goes between $ ...$. And that's it.\nRemember, they're busy, too. They became subject matter experts because they put in the time.. KaTeX can not do that sort of thing. I think your best bet would be to use a dedicated drawing program. There are many available. For a drawing like the one you want, perhaps SVG-Edit would work.. I don\u2019t think this approach will work, because the KaTeX-Main font does not contain a glyph for U+220C. What could work is:\ndefineMacro(\"\\\\notni\", \"\\\\mathrel{\\\\rlap{\\\\kern{0.04em}/}{\\\\ni}}\");\nThat results in a character that fits in pretty well:\n\n. @jsmaniac's original code would give a MathML result that is much superior to the macro that I proposed. Perhaps the thing to do is accept the macro for now, but put U+220C on to the font To Do list, along with \\euro and \\colonequals. Also, the macro code should include a TODO comment that suggests that the macro is temporary and that the font glyph should be used when it is available.. This issue is resolved now, I think.. I believe this would work:\ngroupTypes.mclass = function(group, options) {\n    if (isCharacterBox(group.value.body) && group.value.mclass === \"mrel\") {\n        let node = buildGroup(group.value.body, options);\n        const shift = ((node.height + node.depth) / 2) - node.depth -\n            options.style.metrics.axisHeight;\n        node = buildCommon.makeVList([\n            {type: \"elem\", elem: node},\n        ], \"shift\", shift, options);\n        return makeSpan([group.value.mclass], [node], options);\n    } else {\n        const elements = buildExpression(group.value.value, options, true);\n        return makeSpan([group.value.mclass], elements, options);\n    }\n};\ngiven a tweak in functions.js:\n// Math class commands except \\mathop\ndefineFunction([\n    \"\\\\mathord\", \"\\\\mathbin\", \"\\\\mathrel\", \"\\\\mathopen\",\n    \"\\\\mathclose\", \"\\\\mathpunct\", \"\\\\mathinner\",\n], {\n    numArgs: 1,\n}, function(context, args) {\n    const body = args[0];\n    return {\n        type: \"mclass\",\n        mclass: \"m\" + context.funcName.substr(5),\n        value: ordargument(body),\n        body: body,\n    };\n});\n. I already have that page ready and I plan to make a PR as soon as release 0.8.0 lands. For a advance look, I've put a temporary copy here. \nLet me know if you see that I've missed anything or if you notice some major problem with organization.. @kevinbarabash, regarding all the new colonequals functions, a substitute for screenshots is to review them on the function support page, which has a temporary copy here.. This may no longer be an issue. The KaTeX rendering now looks like LaTeX.\n\n. Great, great stuff.\nOn the question of monospace vs proportional fonts, I think you should not prematurely rule out use of a proportional font, if any exist. Given PR #670 , KaTeX has no current need for horizontal metrics other than italic skew. Of course, KaTeX is not yet mature and there may be unforeseen issues, but I am hopeful that there will never be any need for horizontal metrics.\nA plug-in architecture would be wonderful. Hopefully, it will be useful for more than fonts.  For instance, an mhchem plug-in could become feasible after a plug-in architecture becomes available. Or perhaps such an effort would need a separate plug-in architecture.. @HosseinAgha, I speak as an expert only in PR #670; others here have deeper insights into the larger KaTeX issues. The whole point of PR #670  was to make horizontal font metrics unnecessary.  PR #670 uses CSS methods, not calculations on font metrics. If any subject matter is passed to one of the PR #670 functions, KaTeX will put that subject matter into a span, and the browser will make the accent width match the span width. No character width metrics are needed for anything in PR #670, or for anything else in KaTeX.\nOf course, KaTeX does need vertical font metrics. It always has. And the task you have taken on looks to me like a very challenging one, but I don't see how PR #670 adds to that challenge. Am I missing something?\n. @HosseinAgha, Now that I think back, \\widehat and \\widetilde both make a character count of the subject matter. Those two functions are tolerant of minor changes in width, so a character count was sufficient and no font width metrics were needed.\nBut that tolerance has its limits. If your work causes a single Persian screen character to signal that it has six characters, then the \\widetilde rendering will look a little odd. The relevant line of code is in stretchy.svgSpan:\nconst numChars = group.value.value.length;\nAs you continue with your work, we should test that line to make sure it is not drawing the wrong inference about character count. Everything else in PR #670 is completely independent of character width. I'm glad that has helped you.\nGood luck!. I have a request. I ask that these proposed units be exposed to authors with names that are differentiated in some small way from the name of any pre-existing truly absolute unit.\nFor example, expose the unit name \\cm or texcm, not cm. The unit name cm already has a standard meaning in HTML documents. The new, very valuable units in this PR deserve their own names.\n. I am all for relative units and I am very much in favor of a migration path from LaTeX. I just think that much confusion can be saved if we avoid using the same word to mean two different things. Poor @kevinbarabash will be doing user support for the rest of his life.\nOf course, this PR may really be just a fiendish plot to make it impossible for KaTeX to ever support truly absolute units.\nIn which case you have my support.. Assuming that this PR is eventually accepted, it will need some documentation.\n@edemaine and @kohler, please let me know any comments you might have on this description.. Perhaps an edit?\n\nKaTeX provides copy-and-paste compatibility with all TeX units. TeX's absolute units, like cm or in, are currently scaled relative to ...\n\nI'm trying to be more precise with the word absolute.  TeX has absolute units. KaTeX really doesn't. . \\vec uses a combining character, so it has its own unique CSS with position: relative and left: 0.326em.  The buildHTML.js file contains a TODO line suggesting \nFix this in a better way, like by changing the font\nI'm not volunteering to change the font, but if you're interested, I could give you a temporary solution using an SVG image copied directly from the \\vec character. . Yesterday, I  tried inserting a non-breaking space:\nif (group.value.label === \"\\\\vec\") {\n    accent.value = \"\\u00A0\" + accent.value;\n}\n... and then adjusting the advance value in CSS class accent-vec by 0.25em (because nbsp is 0.25 em wide). I found that the arrow came in too low. I don't think I'll get any farther with it. I've got other issues at the moment.. @ylian I believe that release 0.9.0-beta has fixed this bug. Can you confirm?. I think that Microsoft intends, for Windows 10+, to make Edge an evergreen browser similar to Chrome or Firefox. Since neither README or Contributing address the other evergreens, I think it makes sense to leave Edge out. I don't feel strongly about that.\nRegarding stretchy wide elements, yes, both IE and Edge have problems. The browser support is detailed here.  \nFor the \\cancel series, Edge needs to fix a bug with CSS calc() in a background: linear-gradient. You can see the bug if you use Edge to go here and scroll down a bit.  I made my complaint here. Feel free to add your voice.  In the meantime, the master's fallback uses an SVG, whose lines vary with span size.\nAnd Edge needs to support CSS mask before it will support \\color. I made my complaint here.\nI have a new draft of the function support page ready for KaTeX 0.8.0. It includes a note about \\color and Edge.\n. Edge does not support CSS mask, so the \\color fallback is black.\n\nThe calc bug would have done terrible things to \\cancel, had I not corrected it:\n\n... so the \\cancel fallback is an SVG, which cannot take color and changes line thickness proportional to span size:\n\n. @edemaine , Good point. I've added Edge to the list in README.. Rules can be set to any arbitrary height. This should be tested with some really tall ones. I haven't got time to  test this myself this myself at the moment, but when I was working on PR #670, I ran into trouble when I tried to accommodate tall images by a method similar to this. \nIf I recall correctly, makeVList applied the maxFontSize not only to the element that needed it, but to all the members of the vlist. I ended up in some cases with unexpectedly large spacing above the vlist.  I.e., the vlist pushed the whole line downward on the screen and left a large gap above the math.. For \\fbox, my solution was to (1) set maxFontSize to 1 em because that did not distort the rest of the vlist, and (2) adjust the position of the fbox after running makeVList.  The adjustment looks like:\nif (img.height > vlist.maxFontSize) {\n        // Correct for an issue in makeVList. It placed the image top at\n        // the top of the line box created by a 1 em maxFontSize.\n        vlist.children[1].style.top = -(inner.height + pad - 0.9 / scale)\n            + \"em\";\n        // The 0.9 in the previous line is there because the KaTeX fonts\n        // have an ascent = 0.9 em. We're setting the top of the image\n        // relative to the top of that line box.\n    }\nJust a suggestion.. @kohler, Thank you for pointing out the issue with a size change inside an fbox. It looks like I have more work to do. Sigh.. Question for @kevinbarabash or @xymostech: I am inclined to write a PR that withdraws \\boxed until I can write a bug-free version or until somebody can make makeVList more robust. \\boxed is not that urgent and I would hate to see a bug in \\boxed be something that would delay the next KaTeX release.\nWhat do you think of a temporary removal of \\boxed?. Perhaps in lieu of Screenshotter, a screen shot may be sufficient:\n\n. I'm closing this PR in preference for a slightly more general approach that I have planned. Stand by for a day or two.. Since I have never mastered Screenshotter, I would appreciate any help. It all looks pretty good on my test page.. Oh, my issues run deeper than Screenshotter. I work in Windows. Now, I know that make files, bash scripts, and Docker are all possible within Windows. They take more effort to learn and the documentation is scattered, incomplete, and often outdated or misleading. But doable, given effort. Which I have not exerted.\nWhich means that my root problem is sloth. . Re: Centering. I must have introduced a CSS bug with this PR. I'll fix that, but it may be a few days before I get to it. Things are a little hectic right now. . @kevinbarabash, I've reworked makeImageVList. It is now possible to center the text argument on a longer image argument. Naturally, the screenshotter images have issues.\nI've also made a couple of edits in buildHML.js that were necessary to keep up with the rapid changes to other parts of KaTeX.  GitHub is declaring those to be conflicts, and I'm really not sure why.. Screenshotter error again.. Well if you are confused, then I am bewildered. I would be willing to try again, if you want to try another PR.. @kevinbarabash, It's probably not worth spending any more time on this PR. @kohler's PR#768 solves the same problem as makeImageVList and #768 does it in a more general way.\nI'll leave this PR open for a bit longer, but I expect to close it in preference for #768.. Closing this PR in favor of PR #768.. Interesting. I made those \\cancel lines nice and thick after preliminary work showed that thin lines looked like their edges were too blurry.  \nThe change proposed here looks good to me.. The screenshots below are, clockwise from top-left, Chrome, Firefox, Opera, and Safari. All are from Windows, on a Microsoft Surface, except the Safari, which is from BrowserStack.\n\nI don't trust the pixelation shown for Safari, because BrowserStack shows the same pixelation for Opera, and as you can see, that pixelation disappears when taken from my own screen.  Someone with native equipment should re-test Safari.\nI didn't test IE or Edge because this CSS doesn't run on IE or Edge. The CSS contains feature-detection that directs IE or Edge to render an SVG instead. Earlier testing showed that those two browsers go berserk when asked to render this linear-gradient combined with a calc().. I just looked at this on iOS Safari on my iPod Touch. All the lines look fine to me.. \"Cramped\" is a style modification in which exponents are not raised as high as they would be in in non-cramped style. \"Cramped\" is typically used in something like a fraction numerator or denominator, or in this case, a brace.\nI reckon that you are correct in saying that a style adjustment is needed here. If you would like to suggest something more detailed, that would be welcome. Otherwise I'll get some time for research in a few days.. I do agree. . Yep, that's \"cramped\". And KaTeX does use \"cramped\" to modify sup elevation when inside numerators, denominators, \\sqrt, etc. It was an error on my part to use it inside \\overbrace. I'm glad that others have straightened things out.. @kohler, PR #757 already modifies groupTypes.enclose. It removes the call to makeVList and substitutes a call to new function makeImageVList.. Wow.  Enormously impressive.\nOf course this needs lots of cross-browser testing, so I'll help with that. This solves a tough problem. \nNow I have a question. There are couple of lines that contain a constant of 0.91:\nchild.style.top = (-child.strutSize * 0.91 + totalSize - child.bottom) + \"em\";\nvtable.style.top = (0.91 - vlist.height) + \"em\";\nI expected that value to be 0.9, not 0.91, because the KaTeX fonts have an ascend value of 0.9. Is there any particular reason you used 0.91?\nI'm glad you mentioned the extra space in the VerticalSpacing screenshotter test. When I was testing PR #670, I repeatedly saw this kind of extra space, and I'm glad that someone else has noticed it.\nIn an earlier thread, @gagern mentioned that any use of tables should be careful that the CSS resets table style. I don't think your CSS would conflict, but it is a good thing to keep in mind.\n. I've tested this code on my box, on my phone. and on BrowserStack with various styles, sizes, and images. It works great on Edge, IE 9-11, iOS Safari, Mac Safari, Windows Chrome, Android Chrome, Opera, and Firefox.\nTerrific stuff.. Oh, I think this PR is a big win. The problem is inherent anytime a tall element is passed as an argument to makeVList. Below are two screen shots of the same HTML.  The first screenshot is from the existing KaTeX master, and the second shot is from the current PR.\n\nThat gap in the first shot is the problem. My work used a hack to mitigate it only for \\fbox and \\cancel. This PR resolves the problem entirely.. I am now seeing problems in Safari, on both iOS and Mac. All other browsers (IE, Edge, Chrome, Firefox, Opera) look good. I do my Safari testing on BrowserStack, so it should be checked by someone with native equipment.  Here's a sample of the problems:\n\n. Yes, the \\vec horizontal problem is issue #735. It will need its own solution.. @kohler, That last commit did the trick. This PR now works in Chrome, Firefox, Edge, IE 9-11, Safari, and Opera.\nThis problem has caused me many hours of frustration, so I'm very glad that you have solved it.. It certainly unblocks the \\sqrt changes. I'll work up a PR today.. I'm finding a problem on Safari. It occurs in iOS only, not Mac. The screenshot below is from BrowserStack's rendition of an iPad Pro, iOS 10.3\n\nThat is trying to render part of the code: \\( \\sqrt A \\, \\sqrt{M^2} \\, \\sqrt{\\vec F} \\,  \\color{blue} \\sqrt{\\frac{\\frac{\\frac{c}{c}}{c}}{\\frac{c}{c}} } + \\sqrt{\\frac{\\frac{\\frac{\\frac{c}{c}}{\\frac{c}{c}} }{c}}{\\frac{c}{c}} } \\, \\sqrt{\\frac{\\frac{\\frac{\\frac{c}{c}}{\\frac{c}{c}} }{c}}{\\frac{c}{\\frac{\\frac{c}{c}}{\\frac{c}{c}}}} } \\)\nAlthough I can't give you a screenshot, I am seeing the same problem on my iPod touch.. I do pay for BrowserStack. For the short term, at least.. I still see the problems. I see them only when the iPad is in portrait orientation, not landscape. That opens up a line of investigation. The page I'm looking at contains some CSS media queries for screen width. Among these are:\n@media all {body {font-size: 20px;}}\n@media (max-width:830px){body {font-size: 18px;}}\n@media (max-width:740px){body {font-size: 16px;}}\n@media (max-width:670px){body {font-size: 14px;}}\nI'll investigate some more and let you know if I can pin this down further. Maybe not today, though.\n. @kohler, I've prepared another test page here. This page has CSS body {font-size: 18px;} regardless of screen orientation. This page also shows makeVList problems on Safari - iOS.\nThat page, I should add, is running today's KaTeX master.. I'll place some screenshots here to illustrate this PR. The first shot was taken this morning before this PR.\n\nNext, we see the same HTML, but the screenshot is taken after this PR.\n\nThe new shot has no more mis-alignment between radical and viniculum.\nAnd just to show \\sqrt in a variety of sizes and styles, here's another screenshot.\n\n. The Screenshotter tests have failed, as expected. @kevinbarabash, your assistance would be appreciated. I'm also curious to see your review comments. At one point, I did something a little sketchy. Perhaps you can think of a better way to pass surd width information.. @kohler, I'm ambivalent myself about whether this PR is a good idea. If bar placement can be improved sufficiently, then this PR would be unnecessary. \nI'll clean up the rest of my work tomorrow so a good comparison can be made.  . @kevinbarabash, I've got a fix for the sizing problem that you found yesterday. (Thanks!) I'll push it later today when I have WiFi access. Then you can choose whether to accept this PR or to accept only PR #776.\nIf it were me, I'd accept PR #776 only. I don't see that this PR gets you much improvement.  It will remain possible to change to an SVG method later.. @kevinbarabash, This commit selects the correct image size, as shown below. Thank you for pointing out the issue.\n\n. In my images, the superscripts are nested three deep. In each group of three, the outermost surd is steeper than the inner surds. That tells you that the outermost surd has been derived from the glyph in font KaTeX_Size2-Regular, not KaTeX Main\nSo no, these are not all scaled versions of the same glyph. \nThat's not to say that my code is perfect. In my images, I get a more narrow line thickness in scriptscript than in textsize. And LaTeX has the same line thickness. So I do have a scaling problem that needs to be fixed.  If @kevinbarabash, decides that the \\sqrt in PR #776 is not good enough, then I'll dive back in and work it out. . Thank, @kohler, I realized later that you and I were talking at cross purposes. The word main sent me off on a different direction.  And your list of characters is helpful.. I believe that I have overcome my sizing problems in script style and scriptscript, as shown by the screenshot below.\n\n@kohler, thank you for your help. I am now using the same glyphs as current KaTeX, and sizing them properly. Of course, that means that the outer scriptscript is different from LaTeX, and I'm not sure why.\n@kevinbarabash, I think I'll rebase when I commit, to give you something less scattered to review. That will be this evening.. @kevinbarabash, I did battle with rebase this morning and I lost, as usual. I'm closing this PR and will make a fresh start with a new PR.. This looks great to me. I've checked it in Safari Mac, Safari iOS, Chrome, Firefox, Opera, IE 9-11, and Edge. Rendering looks good in all of them.. This consolidates the work in my previous PR, as shown here:\n\n. The question is still open on whether this PR ought be accepted. My own inclination is to wait. Accept PR #776  now, and try it for six months. If it turns out to be insufficiently precise, this PR can be merged at any time.. @kevinbarabash, It's still unclear to me whether this PR should be approved. In case you do want to merge it, I have updated it to accommodate PR #776.\nThere is a test page here.. @kohler, The surds have to be background-images, in order to get the horizontal stretchiness of the viniculum.  If the SVG code was all written inline, they would all still be background-images. Background images are, alas, not part of the DOM. \nChrome and Firefox both have print settings that allow you include background-images.  I don't see anything similar in Edge.. Well, in no particular order,\nI agree that \\sqrt is core and that everything in PR #670 is much less vital. I am in no hurry to see this PR merged. \nYou can stretch any image to any width and height, if you know a numeric value in advance.  I sought to meet the challenge of issue #587 by creating images that would stretch to match a span width that is not known in advance, that is instead defined by the  content of the span. That particular trick can be done with a background-image but not with ordinary images.  And so, everything in PR 670 is made of either span borders, as in \\boxed, or background-images. \nYou can print anything in this PR or in PR #670. For instance in Chrome, the setting is at: \u22ee | Print ... |  + More Settings ... |  Options: \u25a1 Background graphics. That's more complicated than I would like, but it is certainly within reach.\nHere is a screenshot from Chrome's Print dialog:\n\n. I stand corrected. That arrangement of nested spans is terrific, and I thank you for showing it to me.\nIt can be adjusted so that the SVG code need not be written in line. When I edit one of the paragraphs to read like this:\n<p><span class=\"a\">\n    <span class=\"b\">\n        <img src=\"images/sqrt-main.svg\" alt=\"sqrt\" width=\"100%\" height=\"100%\">\n    </span>\n    <span class=\"c\" style=\"font-size: 300%\">\n        <span style=\"padding-left:1em;\">XYZ ABC</span>\n    </span>\n</span></p>\nThe result looks like this:\n\nThe SVG can thus be cached and it won't clutter up the HTML. Also, being in the DOM, it won't have the Edge \\color problem that I got from background-images.\nI'm going to start working up a PR that uses this method. I may be back with a question or two.. You know, I could have sworn that I was once able to color an external SVG, linked via an <img> tag, by setting <path fill=\"currentColor\" \u2026 inside the SVG file. It doesn't work today. I must have been hallucinating.\nI guess inline SVG is the order of the day. . I've updated the test page with the latest commit. I think you'll find better printing behavior.. @glebm, I don't know if you have monitored the conversation in this PR. I think you should be given the opportunity to state the anti-inline case. Do you have any thoughts?. That's a problem, all right. I'll get to work.. @glebm I'm glad your're okay with it, because I'm pretty sure this PR will be merged.. I wonder if there is a cramped/uncramped issue.. @kevinbarabash I am going to close this PR temporarily. As a Git klutz, I am able to have only one PR at a time that is pointed at master. Right now, I want to fix stretchy element color. I'll reopen this PR when that effort is resolved.. For a preview of the page, I've put a temporary copy here. I am especially interested in any comments on the Units section.. @edemaine, I've revised the units section at the preview page.  As a structural engineer, my tendency is to just draw the picture.\nWhat do you think?. @mbourne, Is your screenshot from the function-support page? When I look at that page, either current or proposed, it looks to me like this:\n\n. Right. And \\triangleleft really is smaller than \\triangle.. @edemaine Yes, I think that the nested $...$ definitely deserves a mention. I'll write it in. . @mbourne I am responding to your question here, since this is now an issue of its own. I am baffled by your original screenshot, but I can help clarify some of the later questions.\nThe function support page does not run a KaTeX script for every one of its entries. On the symbol table, I just applied CSS font-family: KaTeX_Main, KaTeX_AMS; to the odd numbered columns and wrote in the correct character. I meant the page to be an informative tool, not a diagnostic tool.\nI did a similar treatment to letters, operators, and relations. By so doing, the page runs several hundred fewer scripts. \nJust now, I have refreshed the preview page and the six white triangles all do run a script. So @edemaine's observation about \\triangledown is now visible. \nThat doesn't explain @mbourne's original observation. ~~He should have seen~~The page should have rendered triangles all from the KaTeX-Main font and I can't explain that screenshot.. Interesting. I did not realize that KaTeX supported that syntax. It does, though. \\red{A} renders a red A.\nAre there any LaTeX packages that support this syntax?. Ah, I see. Well, @xymostech has written issue #28, which states that these custom colors were meant to be KA-only and not available for everyone. There is some push back in the discussion.\nI suppose one approach would be to accept this PR, so that KaTeX has consistent behavior. Then, if a PR is ever written to resolve #28, it would have to address the whole issue.. The CSS change fixes a bug which has crept into function stretchy.encloseSpan(). At one time, I pushed mask onto the list of classes for the relevant span. Somehow, I let that item slip out. The CSS in this PR corrects for my error.\nThank you, @xsznix! \nAlso, Firefox 53 was the first Firefox release with full mask support. I suppose Screenshotter is using an older version.. I'd suggest making this list into a page on the wiki.. @edemaine  I've added a wiki page that addresses some of your ideas.\nAlso, your note re: \\undertilde has made me realize that I made a mistake. The stretchy accent that I added should have been named \\utilde, not \\undertilde. I'll submit a PR to fix the error. \nThere is a \\undertilde in the wsuipa diacritics package. But it's a text-mode non-stretchy accent. The stretchy, math-mode accent is \\utilde. I got mixed up.. Sometimes I wish that I had written all of the stretchy element SVG code inline. With what I know today, I no longer have to write it with URL escapes. With ~~just JavaScript~~ no escapes, the code is somehow less hideous to look upon.  Colors are easy with inline code. The CSS becomes very straightforward.\nHere is the SVG inline code for six different surd characters. There are 36 external SVG files currently in the images folder. Transferring it all to inline would add about 20 KB to the JavaScript.\nAny takers?. Oh, and those inline SVG are not background, they are instead <svg> tags written directly into the DOM. All the background printing issues go away.. I expect that this issue is now resolved, since stretchy elements are all inline.. That's it. I've had it. I'm starting work this minute on moving stretchy elements SVGs from external files to inline code. . I expect that this issue is now resolved, since all stretchy elements are inline.. > it just got a lot harder with #807 \nWould it help if we wrapped every <svg> with a span with a descriptive class, as in:\n<span class=\"rightarrow\"><svg>...</svg></span>\nOr perhaps write the class into the SVG?\n<svg class=\"rightarrow\">...</svg>\n. @kevinbarabash I'm all in favor of what you suggest. I may not be the best person to implement it. Let me look into it and get back to you.. Does this work properly on Safari? Issue #735 is a combining character problem.. Yesterday, I  tried inserting a non-breaking space:\nif (group.value.label === \"\\\\vec\") {\n    accent.value = \"\\u00A0\" + accent.value;\n}\n... and then adjusting the advance value in CSS class accent-vec by 0.25em (because nbsp is 0.25 em wide). I found that the arrow came in too low. I don't think I'll get any farther with it. I've got other issues at the moment.. I got the 0.25 from http://glyphrstudio.com/online/. I don't take it as conclusive.\n\n. Safari on the left, Chrome on the right.\n\n. @edemaine Instead of combining characters, could you use modifier characters?. I've put up a test page.. I'll try experimenting with <line style=\"stroke-width: 0.2em;\"/>. But I am trying to avoid a line that changes stroke-width with the area of the span. That means I have to omit the viewBox attribute. And so I'm not sure what em means in the screen context.. Well, I'm content with that size change. It's a better product when the SVG is inline.. I was hoping to avoid this. I didn't catch it before I minified the SVG code. Before that point, I have things somewhat automated, but afterwards a change is pretty tedious. No matter. I'll do it.\nI have already added the correct ~~leading~~ advance to the main surd.  I'll go and do the other five.. I have scripts that do matrix transformations of the original geometry. I shift all of them so that the SVG has no negative coordinates, because IE 9 reportedly doesn't deal well with negative coordinates. \nBut then there are non-scripted changes to make the viniculum absurdly long. And the tall surd got some custom changes of its own. \nDon't worry about it. I have found copies from an intermediate step in the process. That will make things pretty easy for sizes 1 thru 4.. @kevinbarabash It turned out to be pretty easy. Thank you for the nudge.. Yes, it took a few tries to focus in on the target, but we got there eventually. Thanks for your help and your patience.. Re: the bug fix:\nI've put a copy of the proposed version of \\xleftharpoondown at the top of the test page. The existing version can be seen, alas, on the function support page on the right-hand side of the extensible arrows.. Okay, I think I have a plan. We need to change frac-line so that it no longer consists of a bottom-border but instead consists of an entire span, the way \\rule works. Then the min-height from PR #931 should act more dependably.  There is no such thing as a CSS border-min-thickness.\n@kevinbarabash If you are planning a bug-fix release, give me a day or two. I'm booked up today, but I think I can turn in a PR by tomorrow evening.. @akalin  Well, the CSS for arraycolsep also works via a span border. I suppose that the same problem could be occurring and that the same adjustment methods could apply. \nI'd like to take one thing at a time. If we can get frac-line working dependably, then I'll look at arraycolsep.. Well, that's discouraging. We've had a couple other reports that 0.9.0-alpha2 provided some benefit. I myself have not had any lines disappear on my screen, but I have seen two that are narrower than they were before 0.9.0-alpha2. So returns are mixed.\n@kevinbarabash I think it is time for a belt-and-suspenders approach. Both a border and a full-height span colored by an SVG. They can coexist if I set CSS box-sizing: border-box; for frac-line. \nWhat do you think?. @kevinbarabash Your proposal makes a lot of sense. When I was working on PR #670, I found that I had much finer control over SVG geometry than I did over span geometry.\n~~Of course, this means that we'll have to write SVG path geometry on the fly instead of just using overflow: hidden; to control line thickness. There might be a tiny performance hit.~~ Correction: we just need to make a \\mathchoice between three pre-written paths. That's quicker.\nI'll write up a PR. This may take a few days. I'm semi-retired these days and I often have some free time but at present I'm spending a lot of time at the office.. @akalin If we follow through on @kevinbarabash's proposal, we'll have frac-lines that act like the top lines in square root radicals (as of release 0.8.3). If you see any of those disappear, please let me know.. @akalin, You're very welcome. I hope that everyone has results this positive.. Query about npm: When one writes npm install katex@0.9, which KaTeX version will that install?. If the version is 0.9.0, then something quite odd is happening. In that version, we've gotten reports of frac-lines appearing grey, as in issue #1173, but it should not have an altogether missing line. \n@jeffmcmahan If you can point me to a page, I can take a look.. @jeffmcmahan Thank you for for providing the HTML. It contains an inline SVG for that frac-line, so it's not clear to me why no frac-line is rendered. If a page were available, I could root around a little for the underlying problem. At the moment, I'm baffled.\nDoes \\sqrt render properly? \\overrightarrow? They also depend on SVGs.. Right. You should white-list <SVG>, <path>, and <line>.. I've put up a test page.. @kohler and @kevinbarabash, My apologies, but I've messed up my repository. I'm going to close this PR and re-open in a new one.. @kevinbarabash Well, I've found a new glitch. To clean up the mess, my plan was to delete my repository, then re-fork and re-clone. Then drop copies of the changed files into the new local ~~repository~~ subdirectory. So far so good. Then I hit the \"commit to master\" button and I get an error message:\n\nCommit failed - exit code 1 received, with output: 'error: cannot spawn .git/hooks/pre-commit: No such file or directory'\n\nNow I'm stuck. If you have any suggestions, let me know.. I did run npm update and it did not fix my problem. Not sure about npm install. No matter now.. My apologies for the disconnectedness in this PR. And @edemaine thank you for the help in getting restarted.\n@kohler I haven't yet looked into your comment about calling makeVList from groupTypes.smash. I'll do that later this evening.. @kohler, I've taken your advice and exploited makeVList. I've applied it to \\smash and \\hphantom. That should be enough shouldn't it? . @kevinbarabash, It just occurred to me that there is another breaking change in release 0.9.0-alpha, one that is not yet listed in the release notes.  \nThe \\llap and \\rlap functions now render in text style, which follows LaTeX behavior. Also, KaTeX now has functions \\mathllap and \\mathrlap. These will act as they do  in mathtools and as in previous KaTeX versions of \\llap and \\rlap.\nMy current draft of the function support page has been so updated. But I did not emphasize the change as much as I did when \\color changed. If you want that draft revised, let me know.. I like it.. For the specific case of: \\fbox{\\$10,\\!000,\\!000,\\!000,\\!000}, I can eliminate the problem by applying width: min-content; to CSS class .boxpad, which selects the parent element of that string.\nEdge and IE don't support width: min-content;. Edge doesn't need it in this case. It renders the box just fine with or without that rule. I haven't checked IE.\nI'm booked up for the next few days, but if someone wanted to fix this issue, they could probably do so by applying width: min-content; to the various KaTeX container classes.. >  even when just defined for the .katex class (as it gets inherited)\nI thought about that, but I wonder about classes such as stretchy, which have a width: 100% rule. Does the width: min-content still get inherited? Or must it be added with more specificity after stretchy? Or should we redefine stretchy from 100% to min-content?. Sounds great. Good solution.. .frac-line, .underline, .overline, svg, .stretchy, and .hide-tail all have width: 100%. I would expect that all of them would benefit from adding width: -webkit-min-content.. > I tried setting them to width: min-content, and it results in them being zero width.\nOkay, I agree that we can't just take the easy step of setting .frac-line: width: min-content;. But know that we haven't fixed the entire problem.  See the overly long frac-line below:\n\nClass vlist contains elements in a VList.  Maybe it's the class that should get width: min-content;. Then it would set of a numerator or denominator to be the proper width. And the parent frac-line could stay at width: 100% in order to be stretchy.. I stand corrected. The frac-line element is a sibling of the denominator, not a parent. So your inheritance works. Nice.. There is an explanation here.. @kevinbarabash I believe that this is one step in a direction where you want to go. Let me know if I have mis-interpreted things.. I've put up a test page.. Oops. Multiplied the wrong variable by 1000. I hate it when that happens.. When I do this sort of thing, every line of SVG code passes through my hands, and I can't help but tweak things as they go by. In this PR, I changed the min-length on many arrows and I rewrote the paths for \\xlinesegment, \\xequals, and the left hand side of \\xmapsto.\nI have no idea why \\sqrt would fail its screenshots. I calculate the same things, but the calculations are done in a different order. Perhaps floating point rounding error?. @kevinbarabash Thank you once again for the help with Screenshotter. I know that you're busy just now with flow reviews and I appreciate the time you take to help here.. After picking up the review comments, I've refreshed the test page. Would it make sense to merge op.js and operators.js into one file? That was my long-term intent when I wrote the PR for \\operatorname.. @kevinbarabash I agree completely. I didn't know how thin you wanted to slice the new files. If I had, I would have it named it that way myself.. Go ahead and assign this one to me.. You know, I'm not sure I know how to reliably document MathML outcomes. For what it's worth, here's a screenshot.\n\n. > Can you add a snapshot test for this?\nIt turns out that the answer to that question is no, I can't. My attempt to npm test failed on the make lint flow test.. Output as requested: \n\nWindows PowerShell\nCopyright (C) 2016 Microsoft Corporation. All rights reserved.\nPS C:\\Users\\ronko> cd C:\\Users\\ronko\\OneDrive\\Documents\\GitHub\\KaTeX\nPS C:\\Users\\ronko\\OneDrive\\Documents\\GitHub\\KaTeX> npm test\nkatex@0.8.4-pre test C:\\Users\\ronko\\OneDrive\\Documents\\GitHub\\KaTeX\nmake lint flow test\nmake i info Invoking lint target\n(node:8744) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): undefined\nmake \u00d7 ERR  not found: make-$(NIS)\n. I think that's right. make is not, I believe, part of Windows. There are ways to get equivalents running in Windows and no doubt someone like @edemaine knows all about them. The problem here is that you are dealing with an amateur.\n\nGo ahead and search for a make alternative if that is something with long term value. Don't do that on my account. I have 3 or 4 small PRs left to submit and then my work here will be done.. One small step forward.. Also see issue #203 for <mn>'s split into individual characters. <mtext> does the same thing.. I'll look into it.. It seems to be a problem with all the nested SVGs. The non-nested SVGs (\\cancel, \\widehat, etc) seem to be working okay.  But in nested SVGs, the inner SVG is scaling taller than the outer SVG. The bottom of each one is being cut off and what can be seen is too large. I'll keep looking and report as I learn more.. I think it probably is possible to re-write all the nested SVGs and instead use two or three single-level SVGs placed side by side. The variable-length arrow shafts will require CSS calc(...) if this scheme is to work. \nDuring very early drafts of PR #670, I tried this approach and had it working, sort of. I ended up using nested SVGs because I was getting better quality images. Maybe the side-by-side, CSS-controlled approach can succeed if I work it a little smarter.\nThis will take time. I'll make a progress report in a couple of days. I sure wish that Safari was better.. @kevinbarabash PR #890 fixes sqrt and single-ended arrows, but it does not fix double-ended arrows or horizontal braces. It may be a couple of weeks before I can address them.. I believe that this issue is now resolved.. I can fix this by adding a min-width in the CSS. Give me an hour or two.. I've updated the test page.. I've added a commit which fixes #889.. Removal makes sense to me.. @kevinbarabash, I began a list with similar motivations at the end of wiki's function support page. I haven't maintained that page since I started the HTML function support page. So the wiki page is now out-of-date. Which brings up some questions:\n\nDo you want me to recreate in the HTML page the material that is now in the bottom of the wiki page?\nDo you want that page to identify the functions that are from non-AMS packages?\nIs it possible to make the wiki link redirect to the HTML page, so that the HTML page seems to be part of the wiki?\nIf not, do we want to keep (and maintain) both the wiki page and the HTML page?. Re non-AMS: I do mean exactly packages like color and mathtools that have several functions now incorporated into KaTeX. I guess this is the same issue as #793. I'm just considering whether such information belongs on the function support page.\n\nRe wiki page: I am thinking that I might erase all the material on the wiki page and leave behind a link to the HTML page. Any objections?. @kevinbarabash I have gone ahead and erased all the content in the out-of-date wiki page. I left behind a link to the HTML function support page. If you would like some other treatment of the wiki page, let me know.. Another difference between KaTeX and MathJax:\nIn pages that use auto-render.min.js or Markdown, KaTeX will render only the math content between math delimiters, such as \\(\u2026\\) or $ \u2026$. This differs from LaTeX or MathJax, which will also render math content between certain environment delimiters, such as \\begin{matrix}\u2026\\end{matrix}.. @redstoneleo, The current release of KaTeX does support \\underbrace, as seen in this clip from the demo page:\n\nCheck the version of KaTeX that is in use. The current release is 0.8.3. \\underbrace was addded in 0.8.1 . I've updated the test page with the code from this PR.. No worries.. The auto-render extension still won't work for me. I'm getting the error message: \"renderMathInElement is not a function\".  I have a test page up.. Yes, of course. Silly me.. @kevinbarabash, I think I will shut this PR down and re-submit after PR #871 lands. That will be easier than trying to coordinate the two PRs.. The difference in behavior stems from PR #768. In that PR, @kohler fixed a nagging problem in which HTML line box heights were occasionally overiding the vertical position calculated by KaTeX. That code needed a dependable point on which to base things, a point outside the line box. So now it calculates a strut height that is the maximum of any element, then it calculates:\npstrutSize += 2;\n... just to be sure.\nAll of this is a long winded way of saying that there is a reason for the geometry in that VList. I don't see it going away.. I'll have some screenshots ready tomorrow. Also, I should point out that IE does not support dppx. So IE's min-height will always be 1px. I'm not troubled by that. I expect few IE users have a high resolution display.. Yes, Edge does support dppx.. This post shows some screen shots to demonstrate the effect of this PR. The image in the screen shots is a series of fractions, written with font-size from 16px down to 7px in 1px increments. All of the screenshots were taken with the browser set to 100% magnification. Then each shot was enlarged to 400% in Microsoft Paint.\nThe first two screen shots are done to show the efficacy of this PR. The first screen shot shows the current KaTeX master in Chrome, Firefox, and IE 11 on a screen with resolution = 166 dpi. Notice the missing fraction bars in Chrome.\n\nThe second screen shot is on the same browsers, on the same screen, but includes this PR. All the bars are present. Hurray!\n\nThe next two screen shots are done to investigate whether this PR creates frac bars that are too thick on a higher resolution screen. Remember, the goal of this PR is ensure at least one screen pixel, but other than that, leave all frac-bar thickness determination to the 0.04 em calculation in KaTeX master.\nThe next (third) screen shot shows the current KaTeX master in Chrome, Firefox, Opera, and Edge on a screen with resolution = 272 dpi. It all looks good.\n\nThe final screen shot is on the same screen. It shows the result of this PR. It all looks good except that some Edge lines have thickened to two screen pixels.\n\nSo we have a tradeoff of some thickened Edge lines vs. some missing Chrome lines. I think this PR is a net gain. \nI've also put up a test page so others can look at the results. I'm particularly interested in Safari.. I\u2019ve omitted, for now, some characters because they are HTML reserved characters, or because they need stackrel macros, or because they are of ambiguous atom type or ambiguous name. Omissions include: <, >, :, \u22a5, \u22a8,|, all triangles, \u2254, \u2255, \u225b, \u225d, etc. Follow up on these omissions will come later. So will arrows and negated relations.. Earlier KaTeX efforts toward Unicode input have stalled for fear of future broken content. So I\u2019ve collected some data for use in vetting this work. The following table shows: (1) the KaTeX function to which each character is mapped, (2) confirmation whether unicode math and/or John Cook\u2019s conversion page map it the same way, (3) possible alternates that I did not use.\n| Character | Code point | Maps to     | unicode math | Cook              | Not used                   |\n|:-------------:|:--------------:|:----------------|:----------------:|:---------------------:|:-------------------------------|\n| \u2208             | U+2208         | \\in            | \u2713                | both                  | \\varin                        |\n| \u220b             | U+220B         | \\ni            | \u2713                | \\ni, \\varni         | \\owns, \\backepsilon, \\varni |\n| \u221d             | U+221D         | \\propto        | \u2713                | both                  | \\varpropto                    |\n| \u223c             | U+223C         | \\sim           | \u2713                | all                   | \\thicksim, \\difference       |\n| \u223d             | U+223D         | \\backsim       | \u2713                | \u2713                     |                                |\n| \u2242             | U+2242         | \\eqsim         | \u2713                | \u2713                     |                                |\n| \u2243             | U+2243         | \\simeq         | \u2713                | \u2713                     | \\sime                         |\n| \u2245             | U+2245         | \\cong          | \u2713                | \u2713                     |                                |\n| \u2248             | U+2248         | \\approx        | \u2713                | both                  | \\thickapprox                  |\n| \u224a             | U+224A         | \\approxeq      | \u2713                | \u2713                     |                                |\n| \u224d             | U+224D         | \\asymp         | \u2713                | \u2713                     |                                |\n| \u224e             | U+224E         | \\Bumpeq        | \u2713                | \u2713                     |                                |\n| \u224f             | U+224F         | \\bumpeq        | \u2713                | \u2713                     |                                |\n| \u2250             | U+2250         | \\doteq         | \u2713                | \u2713                     |                                |\n| \u2251             | U+2251         | \\Doteq         | \u2713                | \u2713                     | \\doteqdot                     |\n| \u2252             | U+2252         | \\fallingdotseq | \u2713                | \u2713                     |                                |\n| \u2253             | U+2253         | \\risingdotseq  | \u2713                | \u2713                     |                                |\n| \u2256             | U+2256         | \\eqcirc        | \u2713                | \u2713                     |                                |\n| \u2257             | U+2257         | \\circeq        | \u2713                | \u2713                     |                                |\n| \u225c             | U+225C         | \\triangleq     | \u2713                | \u2713                     |                                |\n| \u2261             | U+2261         | \\equiv         | \u2713                | \u2713                     |                                |\n| \u2264             | U+2264         | \\leq           | \u2713                | \u2713                     | \\le                           |\n| \u2265             | U+2265         | \\geq           | \u2713                | \u2713                     | \\ge                           |\n| \u2266         | U+2266         | \\leqq          | \u2713                | \u2713                     |                                |\n| \u2267             | U+2267         | \\geqq          | \u2713                | \u2713                     |                                |\n| \u226b             | U+226B         | \\gg            | \u2713                | \u2713                     |                                |\n| \u226c             | U+226C         | \\between       | \u2713                | \u2713                     |                                |\n| \u2273             | U+2273         | \\gtrsim        | \u2713                | \u2713                     |                                |\n| \u2277             | U+2277         | \\gtrless       | \u2713                | \u2713                     |                                |\n| \u227a             | U+227A         | \\prec          | \u2713                | \u2713                     |                                |\n| \u227b             | U+227B         | \\succ          | \u2713                | \u2713                     |                                |\n| \u227c             | U+227C         | \\preccurlyeq   | \u2713                | \u2713                     |                                |\n| \u227d             | U+227D         | \\succcurlyeq   | \u2713                | \u2713                     |                                |\n| \u227e             | U+227E         | \\precsim       | \u2713                | \u2713                     |                                |\n| \u227f             | U+227F         | \\succsim       | \u2713                | \u2713                     |                                |\n| \u2282             | U+2282         | \\subset        | \u2713                | \u2713                     |                                |\n| \u2283             | U+2283         | \\supset        | \u2713                | \u2713                     |                                |\n| \u2286             | U+2286         | \\subseteq      | \u2713                | \u2713                     |                                |\n| \u2287             | U+2287         | \\supseteq      | \u2713                | \u2713                     |                                |\n| \u228f             | U+228F         | \\sqsubset      | \u2713                | \u2713                     |                                |\n| \u2290             | U+2290         | \\sqsupset      | \u2713                | \u2713                     |                                |\n| \u2291             | U+2291         | \\sqsubseteq    | \u2713                | \u2713                     |                                |\n| \u2292             | U+2292         | \\sqsupseteq    | \u2713                | \u2713                     |                                |\n| \u22a2             | U+22A2         | \\vdash         | \u2713                | \u2713                     |                                |\n| \u22a3             | U+22A3         | \\dashv         | \u2713                | \u2713                     |                                |\n| \u22a9             | U+22A9         | \\Vdash         | \u2713                | \u2713                     |                                |\n| \u22aa             | U+22AA         | \\Vvdash        | \u2713                | \u2713                     |                                |\n| \u22b8             | U+22B8         | \\multimap      | \u2713                | \u2713                     |                                |\n| \u22c8             | U+22C8         | \\bowtie        | \u2713                | \u2713                     | \\Join                         |\n| \u22cd             | U+22CD         | \\backsimeq     | \u2713                | \u2713                     |                                |\n| \u22d0             | U+22D0         | \\Subset        | \u2713                | \u2713                     |                                |\n| \u22d1             | U+22D1         | \\Supset        | \u2713                | \u2713                     |                                |\n| \u22d4             | U+22D4         | \\pitchfork     | \u2713                | \u2713                     |                                |\n| \u22d9             | U+22D9         | \\ggg           | \u2713                | \u2713                     | \\gggtr                        |\n| \u22db             | U+22DB         | \\gtreqless     | \u2713                | \u2713                     |                                |\n| \u22de             | U+22DE         | \\curlyeqprec   | \u2713                | \u2713                     |                                |\n| \u22df             | U+22DF         | \\curlyeqsucc   | \u2713                | \u2713                     |                                |\n| \u2322             | U+2322         | \\frown         | \u2713                | \\frown, \\smallfrown | \\smallfrown, \\overparen      |\n| \u2323             | U+2323         | \\smile         | \u2713                | \\smile, \\smallsmile | \\smallsmile, \\underparen     |\n| \u2a7e             | U+2A7E         | \\geqslant      | \u2713                | \u2713                     |                                |\n| \u2a86             | U+2A86         | \\gtrapprox     | \u2713                | \u2713                     |                                |\n| \u2a8c             | U+2A8C         | \\gtreqqless    | \u2713                | \u2713                     |                                |\n| \u2a95             | U+2A95         | \\eqslantless   | \u2713                | \u2713                     |                                |\n| \u2a96             | U+2A96         | \\eqslantgtr    | \u2713                | \u2713                     |                                |\n| \u2aaf             | U+2AAF         | \\preceq        | \u2713                | \u2713                     |                                |\n| \u2ab0             | U+2AB0         | \\succeq        | \u2713                | \u2713                     |                                |\n| \u2ab7             | U+2AB7         | \\precapprox    | \u2713                | \u2713                     |                                |\n| \u2ab8             | U+2AB8         | \\succapprox    | \u2713                | \u2713                     |                                |\n| \u2ac5             | U+2AC5         | \\subseteqq     | \u2713                | \u2713                     |                                |\n| \u2ac6             | U+2AC6         | \\supseteqq     | \u2713                | \u2713                     |                                |\n. This particular PR does have a one-to-one match between unicode math and the KaTeX symbols.js file. In the PRs to come that will often be true but not always. There are some conflicts to come. I omitted any conflicts from this PR. I am trying to submit the easy cases first. After they are out of the way, we can focus attention on the hard cases.. When you see all the unicode math choices, I predict that you will disagree with a few of them. \n\nA few of their function names conflict with names from other packages, like mathtools.\nA couple of their names conflict with AMS!\n\nAgain, we don't have to settle the hard cases now.  That can come later.. Most of the unicode math mappings are good ones. There are just a few head scratchers in there. . Also, here's the data behind John Cook's conversion page.. The most recent commit fixes a brain cramp of mine. After going to the trouble to create a table that documents a good mapping, the script I used to edit symbols.js then made its selection from column 1 instead of from column 3 of the table. \nFixed now.. As in PR #933, the following table shows the KaTeX function to which each character is mapped, and confirmation whether unicode math and/or John Cook\u2019s conversion page map it the same way.\n| Character | Code point | Maps to                       | unicode math     | Cook                                   | Other                                                        |\n|:-------------:|:--------------:|:----------------------------------|:--------------------:|:------------------------------------------:|:-----------------------------------------------------------------|\n| \u2190             | U+2190         | \\leftarrow                       | \u2713                    | \\leftarrow \\shortleftarrow               | \\gets                                                           |\n| \u2191             | U+2191         | \\uparrow                         | \u2713                    | \\uparrow \\shortuparrow                   |                                                                  |\n| \u2192             | U+2192         | \\rightarrow                      | \u2713                    | \\rightarrow \\shortrightarrow             | \\to, \\vec, \\overrightarrow \\underrightarrow \\xrightarrow    |\n| \u2193             | U+2193         | \\downarrow                       | \u2713                    | \\downarrow \\shortdownarrow               |                                                                  |\n| \u2194             | U+2194         | \\leftrightarrow                  | \u2713                    | \u2713                                          | \\overleftrightarrow \\underleftrightarrow \\underleftrightarrow |\n| \u2195             | U+2195         | \\updownarrow                     | \u2713                    | \u2713                                          |                                                                  |\n| \u2196             | U+2196         | \\nwarrow                         | \u2713                    | \u2713                                          |                                                                  |\n| \u2197             | U+2197         | \\nearrow                         | \u2713                    | \u2713                                          |                                                                  |\n| \u2198             | U+2198         | \\searrow                         | \u2713                    | \u2713                                          |                                                                  |\n| \u2199             | U+2199         | \\swarrow                         | \u2713                    | \u2713                                          |                                                                  |\n| \u219a             | U+219A         | \\nleftarrow                      | \u2713                    | \u2713                                          |                                                                  |\n| \u219b             | U+219B         | \\nrightarrow                     | \u2713                    | \u2713                                          |                                                                  |\n| \u219e             | U+219E         | \\twoheadleftarrow                | \u2713                    | \u2713                                          | \\xtwoheadleftarrow                                              |\n| \u21a0             | U+21A0         | \\twoheadrightarrow               | \u2713                    | \u2713                                          | \\xtwoheadrightarrow                                             |\n| \u21a2             | U+21A2         | \\leftarrowtail                   | \u2713                    | \u2713                                          |                                                                  |\n| \u21a3             | U+21A3         | \\rightarrowtail                  | \u2713                    | \u2713                                          |                                                                  |\n| \u21a6             | U+21A6         | \\mapsto                          | \u2713                    | \u2713                                          | \\xmapsto                                                        |\n| \u21a9             | U+21A9         | \\hookleftarrow                   | \u2713                    | \u2713                                          | \\xhookleftarrow                                                 |\n| \u21aa             | U+21AA         | \\hookrightarrow                  | \u2713                    | \u2713                                          | \\xhookrightarrow                                                |\n| \u21ab             | U+21AB         | \\looparrowleft                   | \u2713                    | \u2713                                          |                                                                  |\n| \u21ac             | U+21AC         | \\looparrowright                  | \u2713                    | \u2713                                          |                                                                  |\n| \u21ad             | U+21AD         | \\leftrightsquigarrow             | \u2713                    | \\leftrightsquigarrow \\leftrightwavyarrow |                                                                  |\n| \u21ae             | U+21AE         | \\nleftrightarrow                 | \u2713                    | \u2713                                          |                                                                  |\n| \u21b0             | U+21B0         | \\Lsh                             | \u2713                    | \u2713                                          |                                                                  |\n| \u21b1             | U+21B1         | \\Rsh                             | \u2713                    | \u2713                                          |                                                                  |\n| \u21b6             | U+21B6         | \\curvearrowleft                  | \u2713                    | \u2713                                          |                                                                  |\n| \u21b7             | U+21B7         | \\curvearrowright                 | \u2713                    | \u2713                                          |                                                                  |\n| \u21ba         | U+21BA         | \\circlearrowleft(AMS) | \\acwopencirclearrow | \\acwopencirclearrow                       |                                                                  |\n| \u21bb         | U+21BB         | \\circlearrowright(AMS)           | \\cwopencirclearrow  | \\cwopencirclearrow                        |                                                                  |\n| \u21bc             | U+21BC         | \\leftharpoonup                   | \u2713                    | \u2713                                          | \\overleftharpoon, \\xleftharpoonup                              |\n| \u21bd             | U+21BD         | \\leftharpoondown                 | \u2713                    | \u2713                                          | \\xleftharpoondown                                               |\n| \u21be             | U+21BE         | \\upharpoonright                  | \u2713                    | \u2713                                          |                                                                  |\n| \u21be             | U+21BE         | \\upharpoonright                  | \u2713                    | \u2713                                          | \\restriction                                                    |\n| \u21bf             | U+21BF         | \\upharpoonleft                   | \u2713                    | \u2713                                          |                                                                  |\n| \u21c0             | U+21C0         | \\rightharpoonup                  | \u2713                    | \u2713                                          | \\overrightharpoon \\xrightharpoonup                             |\n| \u21c1             | U+21C1         | \\rightharpoondown                | \u2713                    | \u2713                                          | \\xrightharpoondown                                              |\n| \u21c2             | U+21C2         | \\downharpoonright                | \u2713                    | \u2713                                          |                                                                  |\n| \u21c3             | U+21C3         | \\downharpoonleft                 | \u2713                    | \u2713                                          |                                                                  |\n| \u21c4             | U+21C4         | \\rightleftarrows                 | \u2713                    | \u2713                                          | \\xtofrom                                                        |\n| \u21c6             | U+21C6         | \\leftrightarrows                 | \u2713                    | \u2713                                          |                                                                  |\n| \u21c7             | U+21C7         | \\leftleftarrows                  | \u2713                    | \u2713                                          |                                                                  |\n| \u21c8             | U+21C8         | \\upuparrows                      | \u2713                    | \u2713                                          |                                                                  |\n| \u21c9             | U+21C9         | \\rightrightarrows                | \u2713                    | \u2713                                          |                                                                  |\n| \u21ca             | U+21CA         | \\downdownarrows                  | \u2713                    | \u2713                                          |                                                                  |\n| \u21cb             | U+21CB         | \\leftrightharpoons               | \u2713                    | \u2713                                          | \\xleftrightharpoons                                             |\n| \u21cc             | U+21CC         | \\rightleftharpoons               | \u2713                    | \u2713                                          | \\xrightleftharpoons                                             |\n| \u21cd             | U+21CD         | \\nLeftarrow                      | \u2713                    | \u2713                                          |                                                                  |\n| \u21ce             | U+21CE         | \\nLeftrightarrow                 | \u2713                    | \u2713                                          |                                                                  |\n| \u21cf             | U+21CF         | \\nRightarrow                     | \u2713                    | \u2713                                          |                                                                  |\n| \u21d0             | U+21D0         | \\Leftarrow                       | \u2713                    | \u2713                                          | \\xLeftarrow                                                     |\n| \u21d1             | U+21D1         | \\Uparrow                         | \u2713                    | \\Uparrow \\Uparrowhead                    |                                                                  |\n| \u21d2             | U+21D2         | \\Rightarrow                      | \u2713                    | \u2713                                          | xRightarrow                                                      |\n| \u21d3             | U+21D3         | \\Downarrow                       | \u2713                    | \\Downarrow \\Downarrowhead                |                                                                  |\n| \u21d4             | U+21D4         | \\Leftrightarrow                  | \u2713                    | \u2713                                          | \\xLeftrightarrow                                                |\n| \u21d5             | U+21D5         | \\Updownarrow                     | \u2713                    | \u2713                                          |                                                                  |\n| \u21da             | U+21DA         | \\Lleftarrow                      | \u2713                    | \u2713                                          |                                                                  |\n| \u21db             | U+21DB         | \\Rrightarrow                     | \u2713                    | \u2713                                          |                                                                  |\n| \u21dd             | U+21DD         | \\rightsquigarrow                 | \u2713                    | \\rightzigzagarrow                         | \\leadsto                                                        |\n| \u21e0         | U+21E0         | \\dashleftarrow(AMS)              | \\leftdasharrow      | \\leftdasharrow \\leftdasharrowhead        |                                                                  |\n| \u21e2         | U+21E2         | \\dashrightarrow(AMS)             | \\rightdasharrow     | \\rightdasharrow \\rightdasharrowhead      |                                                                  |\n| \u27f5             | U+27F5         | \\longleftarrow                   | \u2713                    | \u2713                                          |                                                                  |\n| \u27f6             | U+27F6         | \\longrightarrow                  | \u2713                    | \u2713                                          |                                                                  |\n| \u27f7             | U+27F7         | \\longleftrightarrow              | \u2713                    | \u2713                                          |                                                                  |\n| \u27f8             | U+27F8         | \\Longleftarrow                   | \u2713                    | \u2713                                          | \\impliedby                                                      |\n| \u27f9             | U+27F9         | \\Longrightarrow                  | \u2713                    | \u2713                                          | \\implies                                                        |\n| \u27fa             | U+27FA         | \\Longleftrightarrow              | \u2713                    | \u2713                                          | \\iff                                                            |\n| \u27fc             | U+27FC         | \\longmapsto                      | \u2713                    | \u2713                                          |                                                                  |. As you can see in the table above, this PR contains a few items where I disagree with the mapping chosen by unicode math.  They are all items that have perfectly good AMS functions. Despite that, unicode math chose to invent their own unnecessary synonyms.\nBy synonym I mean that the two functions:\n1.  Have identical MathML results.\n2. Have identical HTML results.\n3. The sameness goes deeper than final output. They are also identical while in the DOM tree and while in the MathML tree.\nFor such synonyms, it doesn't matter which one we map to. \nIn order to use the unicode math mapping, I would have to add code, such as:\ndefineSymbol(math, ams, rel, \"\\u21ba\", \"\\\\acwopencirclearrow\", true);\nThat line of code would accomplish nothing. So I would rather not add it. On the other hand, it doesn't harm much either. KaTeX behavior would not change. It just adds one line of code bloat.. I've updated the test page. > It does nothing because \\u21ba would already map to \\circlearrowleft?\nThose are my thoughts exactly. I see no point for \\acwopencirclearrow.\nNow for a bit of wild speculation as to why they invented another function.  unicode math maps characters not just in the BMP, but also in the Unicode ranges for Bold Latin, Italic Latin, etc, etc. So they end up mapping 2400 characters to TeX-like functions. They had to invent a lot of those function names, such as  \\BbbC instead of \\mathbb{C}. So they used naming schema. \nNow the speculation: They grew to like their schema and they like things to be orderly. Notice that in most arrow functions, the \"left\" or  \"right\" come at the beginning of the name. But in \\dashleftarrow, the \"left\" is not at the beginning. How sloppy! Not orderly! Must change!\nOkay, that's probably wrong. I have no idea why they invented a new function name. I just see no point in it.. @kevinbarabash  One last thought. Obviously, I would prefer to not add that extra line of code. But my preference is lightly held. It's your call. If you want it in, let me know.. I am closing this PR so that I can resubmit it from a branch instead of from master.. I can confirm that in @ccorn's test case, KaTeX master does indeed eat the last line. And it doesn't matter if the first two rows have their first column empty or not. It's just the last row of the environment that matters here.\nI believe the issue is related to PR ~~337~~ #479. If I remove those lines of code, the behavior reverts to release 0.8.3.. The variable lastRow doesn't seem to be picking up a whole row. It seems to pick up one cell.\nPerhaps those lines could be revised to:\nconst lastRow = body[body.length - 1];\n            if (body.length > 1\n                && lastRow.length === 1\n                && lastRow[0].value.length === 0) {\n                body.pop();\n            }. As in PR #933, the following table shows the KaTeX function to which each character is mapped, and confirmation whether unicode math and/or John Cook\u2019s conversion page map it the same way.\n| Character | Code point | Maps to                       | unicode math     | Cook                                   | Other                                                        |\n|:-------------:|:--------------:|:----------------------------------|:--------------------:|:------------------------------------------:|:-----------------------------------------------------------------|\n| \u2190             | U+2190         | \\leftarrow                       | \u2713                    | \\leftarrow \\shortleftarrow               | \\gets                                                           |\n| \u2191             | U+2191         | \\uparrow                         | \u2713                    | \\uparrow \\shortuparrow                   |                                                                  |\n| \u2192             | U+2192         | \\rightarrow                      | \u2713                    | \\rightarrow \\shortrightarrow             | \\to, \\vec, \\overrightarrow \\underrightarrow \\xrightarrow    |\n| \u2193             | U+2193         | \\downarrow                       | \u2713                    | \\downarrow \\shortdownarrow               |                                                                  |\n| \u2194             | U+2194         | \\leftrightarrow                  | \u2713                    | \u2713                                          | \\overleftrightarrow \\underleftrightarrow \\underleftrightarrow |\n| \u2195             | U+2195         | \\updownarrow                     | \u2713                    | \u2713                                          |                                                                  |\n| \u2196             | U+2196         | \\nwarrow                         | \u2713                    | \u2713                                          |                                                                  |\n| \u2197             | U+2197         | \\nearrow                         | \u2713                    | \u2713                                          |                                                                  |\n| \u2198             | U+2198         | \\searrow                         | \u2713                    | \u2713                                          |                                                                  |\n| \u2199             | U+2199         | \\swarrow                         | \u2713                    | \u2713                                          |                                                                  |\n| \u219a             | U+219A         | \\nleftarrow                      | \u2713                    | \u2713                                          |                                                                  |\n| \u219b             | U+219B         | \\nrightarrow                     | \u2713                    | \u2713                                          |                                                                  |\n| \u219e             | U+219E         | \\twoheadleftarrow                | \u2713                    | \u2713                                          | \\xtwoheadleftarrow                                              |\n| \u21a0             | U+21A0         | \\twoheadrightarrow               | \u2713                    | \u2713                                          | \\xtwoheadrightarrow                                             |\n| \u21a2             | U+21A2         | \\leftarrowtail                   | \u2713                    | \u2713                                          |                                                                  |\n| \u21a3             | U+21A3         | \\rightarrowtail                  | \u2713                    | \u2713                                          |                                                                  |\n| \u21a6             | U+21A6         | \\mapsto                          | \u2713                    | \u2713                                          | \\xmapsto                                                        |\n| \u21a9             | U+21A9         | \\hookleftarrow                   | \u2713                    | \u2713                                          | \\xhookleftarrow                                                 |\n| \u21aa             | U+21AA         | \\hookrightarrow                  | \u2713                    | \u2713                                          | \\xhookrightarrow                                                |\n| \u21ab             | U+21AB         | \\looparrowleft                   | \u2713                    | \u2713                                          |                                                                  |\n| \u21ac             | U+21AC         | \\looparrowright                  | \u2713                    | \u2713                                          |                                                                  |\n| \u21ad             | U+21AD         | \\leftrightsquigarrow             | \u2713                    | \\leftrightsquigarrow \\leftrightwavyarrow |                                                                  |\n| \u21ae             | U+21AE         | \\nleftrightarrow                 | \u2713                    | \u2713                                          |                                                                  |\n| \u21b0             | U+21B0         | \\Lsh                             | \u2713                    | \u2713                                          |                                                                  |\n| \u21b1             | U+21B1         | \\Rsh                             | \u2713                    | \u2713                                          |                                                                  |\n| \u21b6             | U+21B6         | \\curvearrowleft                  | \u2713                    | \u2713                                          |                                                                  |\n| \u21b7             | U+21B7         | \\curvearrowright                 | \u2713                    | \u2713                                          |                                                                  |\n| \u21ba         | U+21BA         | \\circlearrowleft(AMS) | \\acwopencirclearrow | \\acwopencirclearrow                       |                                                                  |\n| \u21bb         | U+21BB         | \\circlearrowright(AMS)           | \\cwopencirclearrow  | \\cwopencirclearrow                        |                                                                  |\n| \u21bc             | U+21BC         | \\leftharpoonup                   | \u2713                    | \u2713                                          | \\overleftharpoon, \\xleftharpoonup                              |\n| \u21bd             | U+21BD         | \\leftharpoondown                 | \u2713                    | \u2713                                          | \\xleftharpoondown                                               |\n| \u21be             | U+21BE         | \\upharpoonright                  | \u2713                    | \u2713                                          |                                                                  |\n| \u21be             | U+21BE         | \\upharpoonright                  | \u2713                    | \u2713                                          | \\restriction                                                    |\n| \u21bf             | U+21BF         | \\upharpoonleft                   | \u2713                    | \u2713                                          |                                                                  |\n| \u21c0             | U+21C0         | \\rightharpoonup                  | \u2713                    | \u2713                                          | \\overrightharpoon \\xrightharpoonup                             |\n| \u21c1             | U+21C1         | \\rightharpoondown                | \u2713                    | \u2713                                          | \\xrightharpoondown                                              |\n| \u21c2             | U+21C2         | \\downharpoonright                | \u2713                    | \u2713                                          |                                                                  |\n| \u21c3             | U+21C3         | \\downharpoonleft                 | \u2713                    | \u2713                                          |                                                                  |\n| \u21c4             | U+21C4         | \\rightleftarrows                 | \u2713                    | \u2713                                          | \\xtofrom                                                        |\n| \u21c6             | U+21C6         | \\leftrightarrows                 | \u2713                    | \u2713                                          |                                                                  |\n| \u21c7             | U+21C7         | \\leftleftarrows                  | \u2713                    | \u2713                                          |                                                                  |\n| \u21c8             | U+21C8         | \\upuparrows                      | \u2713                    | \u2713                                          |                                                                  |\n| \u21c9             | U+21C9         | \\rightrightarrows                | \u2713                    | \u2713                                          |                                                                  |\n| \u21ca             | U+21CA         | \\downdownarrows                  | \u2713                    | \u2713                                          |                                                                  |\n| \u21cb             | U+21CB         | \\leftrightharpoons               | \u2713                    | \u2713                                          | \\xleftrightharpoons                                             |\n| \u21cc             | U+21CC         | \\rightleftharpoons               | \u2713                    | \u2713                                          | \\xrightleftharpoons                                             |\n| \u21cd             | U+21CD         | \\nLeftarrow                      | \u2713                    | \u2713                                          |                                                                  |\n| \u21ce             | U+21CE         | \\nLeftrightarrow                 | \u2713                    | \u2713                                          |                                                                  |\n| \u21cf             | U+21CF         | \\nRightarrow                     | \u2713                    | \u2713                                          |                                                                  |\n| \u21d0             | U+21D0         | \\Leftarrow                       | \u2713                    | \u2713                                          | \\xLeftarrow                                                     |\n| \u21d1             | U+21D1         | \\Uparrow                         | \u2713                    | \\Uparrow \\Uparrowhead                    |                                                                  |\n| \u21d2             | U+21D2         | \\Rightarrow                      | \u2713                    | \u2713                                          | xRightarrow                                                      |\n| \u21d3             | U+21D3         | \\Downarrow                       | \u2713                    | \\Downarrow \\Downarrowhead                |                                                                  |\n| \u21d4             | U+21D4         | \\Leftrightarrow                  | \u2713                    | \u2713                                          | \\xLeftrightarrow                                                |\n| \u21d5             | U+21D5         | \\Updownarrow                     | \u2713                    | \u2713                                          |                                                                  |\n| \u21da             | U+21DA         | \\Lleftarrow                      | \u2713                    | \u2713                                          |                                                                  |\n| \u21db             | U+21DB         | \\Rrightarrow                     | \u2713                    | \u2713                                          |                                                                  |\n| \u21dd             | U+21DD         | \\rightsquigarrow                 | \u2713                    | \\rightzigzagarrow                         | \\leadsto                                                        |\n| \u21e0         | U+21E0         | \\dashleftarrow(AMS)              | \\leftdasharrow      | \\leftdasharrow \\leftdasharrowhead        |                                                                  |\n| \u21e2         | U+21E2         | \\dashrightarrow(AMS)             | \\rightdasharrow     | \\rightdasharrow \\rightdasharrowhead      |                                                                  |\n| \u27f5             | U+27F5         | \\longleftarrow                   | \u2713                    | \u2713                                          |                                                                  |\n| \u27f6             | U+27F6         | \\longrightarrow                  | \u2713                    | \u2713                                          |                                                                  |\n| \u27f7             | U+27F7         | \\longleftrightarrow              | \u2713                    | \u2713                                          |                                                                  |\n| \u27f8             | U+27F8         | \\Longleftarrow                   | \u2713                    | \u2713                                          | \\impliedby                                                      |\n| \u27f9             | U+27F9         | \\Longrightarrow                  | \u2713                    | \u2713                                          | \\implies                                                        |\n| \u27fa             | U+27FA         | \\Longleftrightarrow              | \u2713                    | \u2713                                          | \\iff                                                            |\n| \u27fc             | U+27FC         | \\longmapsto                      | \u2713                    | \u2713                                          |                                                                  |\n. I personally think that comments in the code are the right place to write those aliases.  If they were user-facing functions, then more documentation would be called for. . I put in the test case from #946 into the screenshotter tests. I haven't thought of a more elegant way to test the parse comparison.. The code that that removes a trailing \\\\ is located in array.js, not in Parser.js. We can't expect a unit test on the parse tree to tell us anything useful about the handling of a trailing \\\\.\nMaybe I can think of a unit test that works on buildTree or on even on buildMathML. I'll look into it.\nNot right away though. My next few days are pretty booked up. If someone would like to suggest a test sooner than that, feel free.. The most recent commit fixes a bug and adds two tests that confirm the correct number of rows.. Can anyone suggest why Travis has not completed its check?  Or what I can try to get it working?\nWhen I ran jest locally, the tests all ran well.. @kevinbarabash  Thank you. That did the trick.. Double-struck characters cannot be done with current fonts by just setting a flag in symbols.js. Take \u2102, for example. In the katex-ams font, the character that looks like \u2102 is not at code point U+2102 but is instead at code point U+0043. So, the symbols.js flag technique doesn\u2019t work. Rather than wait for font revisions, I wrote macros.. As in PR #933, the following table shows the KaTeX function to which each character is mapped and confirmation whether unicode math and/or John Cook\u2019s conversion page map it the same way.\n| Character | Code point | Maps to   | unicode math | Cook | Other       |\n|:-------------:|:--------------:|:--------------|:----------------:|:--------:|:----------------|\n|\u00a3  |  U+00A3  |  \\pounds  |  \\mathsterling  |  \\sterling  |  \\textsterling\n|\u00a5  |  U+00A5  |  \\yen  |  \\mathyen  |  \u2713  |\n|\u00f0  |  U+00F0  |  \\eth  |  \\matheth  |  \\dh  |\n|\u2102  |  U+2102  |  \\mathbb{C}  |  \\BbbC  |  \\BbbC  |\n|\u210d  |  U+210D  |  \\mathbb{H}  |  \\BbbH  |  \\BbbH  |\n|\u2111  |  U+2111  |  \\Im  |  \u2713  |  \u2713  |  \\frakI\n|\u2113  |  U+2113  |  \\ell  |  \u2713  |  \u2713  |\n|\u2115  |  U+2115  |  \\mathbb{N}  |  \\BbbN  |  \\BbbN  |\n|\u2118  |  U+2118  |  \\wp  |  \u2713  |  \u2713  |\n|\u2119  |  U+2119  |  \\mathbb{P}  |  \\BbbP  |  \\BbbP  |\n|\u211a  |  U+211A  |  \\mathbb{Q}  |  \\BbbQ  |  \\BbbQ  |\n|\u211c  |  U+211C  |  \\Re  |  \u2713  |  \u2713  |  \\frakR\n|\u211d  |  U+211D  |  \\mathbb{R}  |  \\BbbR  |  \\BbbR  |\n|\u2124  |  U+2124  |  \\mathbb{Z}  |  \\BbbZ  |  \\BbbZ  |\n|\u2132  |  U+2132  |  \\Finv  |  \u2713  |  \u2713  |\n|\u2135  |  U+2135  |  \\aleph  |  \u2713  |  \u2713  |\n|\u2136  |  U+2136  |  \\beth  |  \u2713  |  \u2713  |\n|\u2137  |  U+2137  |  \\gimel  |  \u2713  |  \u2713  |\n|\u2138  |  U+2138  |  \\daleth  |  \u2713  |  \u2713  |\n|\u2141  |  U+2141  |  \\Game  |  \u2713  |  \u2713  |\n|\u2200  |  U+2200  |  \\forall  |  \u2713  |  \u2713  |\n|\u2201  |  U+2201  |  \\complement  |  \u2713  |  \u2713  |\n|\u2202  |  U+2202  |  \\partial  |  \u2713  |  \u2713  |\n|\u2203  |  U+2203  |  \\exists  |  \u2713  |  \u2713  |\n|\u2207  |  U+2207  |  \\nabla  |  \u2713  |  \u2713  |  \\del\n|\u221e  |  U+221E  |  \\infty  |  \u2713  |  \u2713  |\n|\u2220  |  U+2220  |  \\angle  |  \u2713  |  \u2713  |\n|\u2221  |  U+2221  |  \\measuredangle  |  \u2713  |  \u2713  |\n|\u2222  |  U+2222  |  \\sphericalangle  |  \u2713  |  \\sphericalangle \\ltrpar  |\n|\u2660  |  U+2660  |  \\spadesuit  |  \u2713  |  \u2713  |\n|\u2661  |  U+2661  |  \\heartsuit  |  \u2713  |  \u2713  |\n|\u2662  |  U+2662  |  \\diamondsuit  |  \u2713  |  \u2713  |\n|\u2663  |  U+2663  |  \\clubsuit  |  \u2713  |  \u2713  |\n|\u266d  |  U+266D  |  \\flat  |  \u2713  |  \u2713  |\n|\u266e  |  U+266E  |  \\natural  |  \u2713  |  \u2713  |\n|\u266f  |  U+266F  |  \\sharp  |  \u2713  |  \u2713  |\n|\u2713  |  U+2713  |  \\checkmark  |  \u2713  |  \u2713  |\n. Let's hold off on this until after PR #973 lands. I'll revise this PR accordingly.. The most recent commit reverts a RegEx in MacroExpander.js. So the code in this PR is now dependent on PR #973.  . Now that PR #973 has landed, this should be good to go.. As in PR #933, the following table shows the KaTeX function to which each character is mapped and confirmation whether unicode math and/or John Cook\u2019s conversion page map it the same way.\n| Character | Code point | Maps to       | unicode math | Cook | Other   |\n|:-------------:|:--------------:|:------------------|:----------------:|:--------:|:-----------:|\n| \u00b1             | U+00B1         | \\pm              | \u2713                | \u2713        |             |\n| \u00d7             | U+00D7         | \\times           | \u2713                | \u2713        |             |\n| \u00f7             | U+00F7         | \\div             | \u2713                | \u2713        |             |\n| \u2213             | U+2213         | \\mp              | \u2713                | \u2713        |             |\n| \u2214             | U+2214         | \\dotplus         | \u2713                | \u2713        |             |\n| \u2227             | U+2227         | \\wedge           | \u2713                | \u2713        | \\land      |\n| \u2228             | U+2228         | \\vee             | \u2713                | \u2713        | \\lor       |\n| \u2229             | U+2229         | \\cap             | \u2713                | \u2713        |             |\n| \u222a             | U+222A         | \\cup             | \u2713                | \u2713        |             |\n| \u2240             | U+2240         | \\wr              | \u2713                | \u2713        |             |\n| \u228e             | U+228E         | \\uplus           | \u2713                | \u2713        |             |\n| \u2293             | U+2293         | \\sqcap           | \u2713                | \u2713        |             |\n| \u2294             | U+2294         | \\sqcup           | \u2713                | \u2713        |             |\n| \u2295             | U+2295         | \\oplus           | \u2713                | \u2713        |             |\n| \u2296             | U+2296         | \\ominus          | \u2713                | \u2713        |             |\n| \u2297             | U+2297         | \\otimes          | \u2713                | \u2713        |             |\n| \u2298             | U+2298         | \\oslash          | \u2713                | \u2713        |             |\n| \u2299             | U+2299         | \\odot            | \u2713                | \u2713        |             |\n| \u229a             | U+229A         | \\circledcirc     | \u2713                | \u2713        |             |\n| \u229b             | U+229B         | \\circledast      | \u2713                | \u2713        |             |\n| \u229d             | U+229D         | \\circleddash     | \u2713                | \u2713        |             |\n| \u229e             | U+229E         | \\boxplus         | \u2713                | \u2713        |             |\n| \u229f             | U+229F         | \\boxminus        | \u2713                | \u2713        |             |\n| \u22a0             | U+22A0         | \\boxtimes        | \u2713                | \u2713        |             |\n| \u22a1             | U+22A1         | \\boxdot          | \u2713                | \u2713        |             |\n| \u22ba             | U+22BA         | \\intercal        | \u2713                | \u2713        |             |\n| \u22bb             | U+22BB         | \\veebar          | \u2713                | \u2713        |             |\n| \u22bc             | U+22BC         | \\barwedge        | \u2713                | \u2713        |             |\n| \u22c7             | U+22C7         | \\divideontimes   | \u2713                | \u2713        |             |\n| \u22c9             | U+22C9         | \\ltimes          | \u2713                | \u2713        |             |\n| \u22ca             | U+22CA         | \\rtimes          | \u2713                | \u2713        |             |\n| \u22cb             | U+22CB         | \\leftthreetimes  | \u2713                | \u2713        |             |\n| \u22cc             | U+22CC         | \\rightthreetimes | \u2713                | \u2713        |             |\n| \u22ce             | U+22CE         | \\curlyvee        | \u2713                | \u2713        |             |\n| \u22cf             | U+22CF         | \\curlywedge      | \u2713                | \u2713        |             |\n| \u22d2             | U+22D2         | \\Cap             | \u2713                | \u2713        | \\doublecap |\n| \u22d3             | U+22D3         | \\Cup             | \u2713                | \u2713        | \\doublecup |\n| \u2a5e             | U+2A5E         | \\doublebarwedge  | \u2713                | \u2713        |             |. As in PR #933, the following table shows the KaTeX function to which each character is mapped and confirmation whether unicode math and/or John Cook\u2019s conversion page map it the same way.\n| Character | Code point | Maps to             | unicode math | Cook  | Other                  |\n|:-------------:|:--------------:|:------------------------|:----------------:|:---------:|:---------------------------|\n| \u2209             | U+2209         | \\notin                 | \u2713                | \u2713         |                            |\n| \u2224             | U+2224         | \\nmid                  | \u2713                | \u2713         | \\nshortmid                |\n| \u2226             | U+2226         | \\nparallel             | \u2713                | \u2713         | \\nshortparallel           |\n| \u2241             | U+2241         | \\nsim                  | \u2713                | \u2713         |                            |\n| \u2246             | U+2246         | \\ncong(AMS) | \\simneqq        | \\simneqq |                            |\n| \u2260             | U+2260         | \\ne                    | \u2713                | \u2713         | \\neq \\textdoublebarslash |\n| \u2268             | U+2268         | \\lneqq                 | \u2713                | \u2713         |                            |\n| \u2269             | U+2269         | \\gneqq                 | \u2713                | \u2713         |                            |\n| \u226e             | U+226E         | \\nless                 | \u2713                | \u2713         |                            |\n| \u226f             | U+226F         | \\ngtr                  | \u2713                | \u2713         |                            |\n| \u2270             | U+2270         | \\nleq                  | \u2713                | \u2713         |                            |\n| \u2271             | U+2271         | \\ngeq                  | \u2713                | \u2713         |                            |\n| \u2280             | U+2280         | \\nprec                 | \u2713                | \u2713         |                            |\n| \u2281             | U+2281         | \\nsucc                 | \u2713                | \u2713         |                            |\n| \u2288             | U+2288         | \\nsubseteq             | \u2713                | \u2713         |                            |\n| \u2289             | U+2289         | \\nsupseteq             | \u2713                | \u2713         |                            |\n| \u228a             | U+228A         | \\subsetneq             | \u2713                | \u2713         | \\varsubsetneq             |\n| \u228b             | U+228B         | \\supsetneq             | \u2713                | \u2713         | \\varsupsetneq             |\n| \u22ac             | U+22AC         | \\nvdash                | \u2713                | \u2713         |                            |\n| \u22ad             | U+22AD         | \\nvDash                | \u2713                | \u2713         |                            |\n| \u22ae             | U+22AE         | \\nVdash                | \u2713                | \u2713         |                            |\n| \u22af             | U+22AF         | \\nVDash                | \u2713                | \u2713         |                            |\n| \u22e0             | U+22E0         | \\npreceq(AMS)   | \\npreccurlyeq   | \\npreccurlyeq   |                            |\n| \u22e1             | U+22E1         | \\nsucceq(AMS)   | \\nsucccurlyeq   | \\nsucccurlyeq   |                            |\n| \u22e6             | U+22E6         | \\lnsim                 | \u2713                | \u2713         |                            |\n| \u22e7             | U+22E7         | \\gnsim                 | \u2713                | \u2713         |                            |\n| \u22e8             | U+22E8         | \\precnsim              | \u2713                | \u2713         |                            |\n| \u22e9             | U+22E9         | \\succnsim              | \u2713                | \u2713         |                            |\n| \u22ec             | U+22EC         | \\ntrianglelefteq       | \u2713                | \u2713         |                            |\n| \u22ed             | U+22ED         | \\ntrianglerighteq      | \u2713                | \u2713         |                            |\n| \u2a87             | U+2A87         | \\lneq                  | \u2713                | \u2713         |                            |\n| \u2a88             | U+2A88         | \\gneq                  | \u2713                | \u2713         |                            |\n| \u2a89             | U+2A89         | \\lnapprox              | \u2713                | \u2713         |                            |\n| \u2a8a             | U+2A8A         | \\gnapprox              | \u2713                | \u2713         |                            |\n| \u2ab5             | U+2AB5         | \\precneqq              | \u2713                | \u2713         |                            |\n| \u2ab6             | U+2AB6         | \\succneqq              | \u2713                | \u2713         |                            |\n| \u2ab9             | U+2AB9         | \\precnapprox           | \u2713                | \u2713         |                            |\n| \u2aba             | U+2ABA         | \\succnapprox           | \u2713                | \u2713         |                            |\n| \u2acb             | U+2ACB         | \\subsetneqq            | \u2713                | \u2713         | \\varsubsetneqq            |\n| \u2acc             | U+2ACC         | \\supsetneqq            | \u2713                | \u2713         | \\varsupsetneqq            |. Good point about the omission of aliases from the code. I'll write them in.. As in PR #933, the following table shows: (1) the KaTeX function to which each character is mapped, (2) confirmation whether unicode math and/or John Cook\u2019s conversion page map it the same way, (3) possible alternates that I did not use.\n| Character | Code point | Maps to | unicode math | Cook | Not used        |\n|:-------------:|:--------------:|:------------|:----------------:|:--------:|:-------------------:|\n| \u220f             | U+220F         | \\prod      | \u2713                | \u2713        |                     |\n| \u2210             | U+2210         | \\coprod    | \u2713                | \u2713        |                     |\n| \u2211             | U+2211         | \\sum       | \u2713                | \u2713        |                     |\n| \u222b             | U+222B         | \\int       | \u2713                | \u2713        | \\intop, \\smallint |\n| \u222c             | U+222C         | \\iint      | \u2713                | \u2713        |                     |\n| \u222d             | U+222D         | \\iiint     | \u2713                | \u2713        |                     |\n| \u222e             | U+222E         | \\oint      | \u2713                | \u2713        |                     |\n| \u22c0             | U+22C0         | \\bigwedge  | \u2713                | \u2713        |                     |\n| \u22c1             | U+22C1         | \\bigvee    | \u2713                | \u2713        |                     |\n| \u22c2             | U+22C2         | \\bigcap    | \u2713                | \u2713        |                     |\n| \u22c3             | U+22C3         | \\bigcup    | \u2713                | \u2713        |                     |\n| \u2a00             | U+2A00         | \\bigodot   | \u2713                | \u2713        |                     |\n| \u2a01             | U+2A01         | \\bigoplus  | \u2713                | \u2713        |                     |\n| \u2a02             | U+2A02         | \\bigotimes | \u2713                | \u2713        |                     |\n| \u2a04             | U+2A04         | \\biguplus  | \u2713                | \u2713        |                     |\n| \u2a06             | U+2A06         | \\bigsqcup  | \u2713                | \u2713        |                     |. You would think that I could type ten keystrokes without a typo. But apparently not.\nFixed now.. \u2234 \u2235 These two characters obviously map to \\therefore and \\because. I\u2019ve withheld them until now because there is a conflict as to the proper type of atom. KaTeX symbols.js says they are rel atoms. unicode-math says they are \\mathord. I think KaTeX got this one right. They come from the amssymb package, which contains: \\DeclareMathSymbol{\\therefore} {\\mathrel}{AMSa}{\"29}.\nResolved: Map \u2234 \u2235 to KaTeX symbols \\therefore and \\because respectively.. \u22d7 \u22d6 These two characters obviously map to \\gtrdot and \\lessdot, but there is again a type conflict. KaTeX symbols.js says they are bin atoms. unicode-math says they are \\mathrel. I\u2019\u2019ve never used these symbols, so I don\u2019t have a personal opinion on this one. The symbols come from the amssymb package, which contains: \\DeclareMathSymbol{\\gtrdot} {\\mathbin}{AMSb}{\"6D}\nResolved: Map \u22d7 \u22d6 to KaTeX symbols \\gtrdot and \\lessdot respectively.. \u2223 This character is U+2223, DIVIDES. I\u2019ve withheld it until now only because it looks just like |, U+007C. So the question here is do we include any confusables at all. If we do, then the path forward is reasonably clear. unicode-math maps this character to \\mid, the vertical line with rel spacing, useful for set builder notation. John Cook maps it the same way, as does Microsoft Word.\nResolved: Map \u2223 to KaTeX symbol \\mid.. That\u2019s all I have prepared for now. More to come later.. @aterenin Your example has several backslash combinations with which I am unfamiliar. I don't what \\m, \\cbr, or \\sbr are supposed to do.\nPutting that aside and concentrating on the aligned environment, the problem with an empty cell was reported in issue #946 and a bug fix was merged into master three days ago. That code has not yet made it into a release. Hopefully, the release is not too far off.. @akalin In PR #976, I went ahead and gave vertical-separator the same full-span treatment that I gave to frac-line. We have one report in from @trimbonz that the work is effective making frac-lines visible. Hopefully, the same will be true for vertical array separator lines.. Cool. This will be helpful for double-struck Unicode characters like \u2102 or \u2115.. > Properly separate \\kern, \\hskip from \\mkern, \\mskip.\nI have, so far, purposely omitted \\mkern from the function support page because I thought it might break. Once the behavior of \\mkern and \\mskip is more reliable, I'll put them into the documentation.. Pity. I already knew that background colors were a bad idea when printing. I suppose I could use an SVG image. Well, this will take a little longer.. Interesting.\nI want to avoid background-color, even if there is a way to avoid the high contrast problem. When printing, the default setting is to omit background colors.\nBut regarding box-shadow, as @edemaine points out, the KaTeX CSS already includes\n.katex * {\n  -ms-high-contrast-adjust: none !important;\n}\nI just finished writing the code for a frac-line via inline SVG image. The code works fine, but I have not made a commit. First, I'll check if box-shadow works when high-contrast is set and also works when printing.. High contrast results are in. The image on the left is the box-shadow method. On the right is the inline SVG image.\n\nSVG is the clear winner. I'll turn in a commit.\nThank you to @marcianx for the warning about high contrast.. Well, now there\u2019s a working PR and, thanks to @marcianx, we have overcome one hurdle. At this point, I am the wrong person to do any further detailed testing on this work. I have not been able to reproduce the problem on my own screen and I have never mastered Docker for the Screenshotter tests. Any help would be appreciated.. @trimbonz Cool! Thank you for the test and for the report. . @hagenw, PR #949 was written to fix a problem with parsing a empty cell at the beginning of the last line in an array. I expect a release this weekend that will include PR #949. Could you try again after that release and tell me if your problem recurs?. Unicode work will now proceed much more slowly than in the bulk phase. The PRs will be small and each one will explain the choices made.\nIn this PR, it's obvious which aliases are the correct ones. unicode-math agrees that these two characters map to \\therefore and \\because.\nI\u2019ve withheld these two characters until now because there is a conflict as to the proper type of atom. KaTeX symbols.js says they are rel atoms. unicode-math says they are \\mathord. I think KaTeX got this one right. They come from the amssymb package, which contains: \\DeclareMathSymbol{\\therefore} {\\mathrel}{AMSa}{\"29}.\nSo this PR merely sets the flag in symbols.js, without changing the atom type.. Why not? I'll edit the comments.. @edemaine, I am not aware of a stand-alone Unicode character for Greek capital alpha with acute accent, so unicode-math does not have such an alias. There is \u0386, that is U+0386, Greek capital alpha with tonos, but unicode-math does not have an alias for it, either.. Very cool stuff. I'll start to write it into the KaTeX function support page. \n@edemaine, when I submit the PR for the updated function support page, I would appreciate if you would look it over. I'm not sure that I have picked up on everything that you and @kevinbarabash  are doing here.. >  I'm not sure they should work in math mode\nFor now, I'll write it up to suggest that they work only in text mode.  I would like to keep math mode out of the docs until we're sure that it won't break future work. We can always change the docs later to include math mode.. This character is U+2223, DIVIDES. I\u2019ve withheld it until now only because it looks just like |, U+007C. So the question here is do we include any confusables at all. If we do, then the path forward is reasonably clear. unicode-math maps this character to \\mid, the vertical line with rel spacing, useful for set builder notation. John Cook maps it the same way, as does Microsoft Word.. Remember, the function support page is a stand-alone file. If you want to see how it renders, you can just download it and take a look.. @Jenyay , We have an outstanding issue with \\vec (Issue #735). In that issue, the arrow is placed too far to the right, and we haven't yet found a good way to correct that.\nCould your issue possibly be the same as #735?. @Jenyay, have you tried \\vec with the latest release 0.9.0-beta? . I noticed it while looking at the test page. The test page, by the way, is looking much better these days.. That's probably wise, although I'm not sure it's worth the trouble for something as obscure as \\utilde or \\xlongequal. Perhaps I just wish that to be true because both were my mistakes.\nBut I am having second thoughts about \\rlap and \\llap.  I realize that both are supposed to be functions for text mode, but sometimes they do work in math mode! You can write \\(\\rlap{\\,/}{=}\\) and it will work fine in AMS-LaTeX. \\rlap will change text characters to rm, but otherwise a text string will also work in \\rlap. (That's about it for math-mode, though. \\rlap will mangle a fraction.)\nMaybe it would not hurt if KaTeX was more permissive with regard to \\rlap. Maybe we could have it work like \\mathrlap{\\mathrm{#1}}. That would return text strings and  \\(\\rlap{\\,/}{=}\\) the same way that LaTeX returns them. And if KaTeX is more permissive with other math than LaTeX, maybe that's not so bad. \nAnd the extra bonus would be improved backward compatibility with older versions of KaTeX.. @kevinbarabash, When I test this PR locally, I get math rendered, but I also get a number of console warnings about missing fonts. . I'm not 100% sure that I got all the kern distances correct. A careful test with Screenshotter is called for.. > We might experiment with setting shape-rendering: crispEdges\nIt may be worth an experiment, but I expect the same sort of failure that we get from borders. We tried crispEdges during PR #670 and some horizontal lines disappeared on a low resolution monitor.. > at least 0.04em + 2px tall\nI'll give that some thought. It might be easier just to make the line span 7 lines tall or 9 lines tall instead of 3 lines tall.. >  a bit blurry on non-retina displays\nI'll experiment with changing the two brush strokes to three brush strokes.. Since we're experimenting, I'm also going to try CSS border-image. Unlike a border, a border-image-width can be a percentage. That would make a min-height value on the span effectively a min-height on the frac-line.. Results are in re: crispEdges. Both images below are from Firefox. The top image includes crispEdges. The bottom image does not:\n\n\nNotice that the fifth and sixth crispEdges examples, in 12 pt font and 11 pt font, omit the fracline.  Chrome and Opera were okay in the larger font sizes, but they omitted frac-lines in the smaller sizes. \nI am going to avoid crispEdges. I'll try to find some other way to avoid blurriness of the line edges.\n. The most recent commit sets the container span to 5 times the line thickness. My tests show frac-lines that are:\n1. visible until font sizes get so small that I can't read the numerator,\n2.  blurry on non-retina displays.\nI can't think of much more to help that blurriness. I don't want to use crispEdges for reasons described above and a triple brush stroke did not help. I think this is the best I can do short of changing the defaultRuleThickness to something larger than 0.04em.. @kevinbarabash, It seems to me that the blurriness is worse in scriptstyle than in textstyle. And I think there is something I can do about that, but it may be a few days before I get to it.. The most recent commit changes from SVG paths to SVG lines. The change makes no difference that I can see on high-resolution screens, but the lines will get darker/sharper when two lines are written in Chrome on a Windows 8 box with a low-res screen. \nIf fact, when I tested 4 brush strokes, Chrome would actually make the lines much thicker on the low-res screen. Strange.  \nFor the commit, I stayed with two brush strokes.. Yes, thank you. I've done everything with this PR that I can think to do.. Well, I've corrupted another branch with commits from another PR. I'm closing this PR so that I can submit the same material in a fresh one. Have I mentioned lately that I hate Git?. This is an alternate to the previous PR.. This PR fails. On a high-resolution monitor, the CSS min-height: 0.5px was not sufficient to guarantee a visible line in all browsers. I could guarantee a line if I set min-height: 0.265mm, but then some lines are too thick if one zooms in, as in:\n\nI am going to shut this PR down and spend a little more time on PR #1004.\n. More detail on the contents and background of this PR.\n| Character | Code point | Maps to | Atom Type | unicode math | Other Options               |\n|:---------:|:----------:|:-------:|:---------:|:------------:|:---------------------------:|\n| \u00b7         | U+00B7     | \\cdotp | punct     | \u2713            | \\textperiodcentered        |\n| \u22c5         | U+22C5     | \\cdot  | bin       | \u2713            | \\ centerdot\\tnyblkcircle |. I do not intend to write a PR for U+2219 BULLET OPERATOR. The unicode math choice for that code point is \\vysmblkcircle. The KaTeX function \\bullet, at that same code point, displays a somewhat large circle, so we have a conflict. This seems like the sort of thing that could break in the future. I will leave it alone.\nSimilarly, I will not do a PR for any of the following Unicode characters.\n| Character | Code point | unicode math    | Atom Type |\n|:---------:|:----------:|:---------------:|:---------:|\n| \u2022         | U+2022     | \\smblkcircle   | bin       |\n| \u25cf         | U+25CF     | \\mdlgblkcircle | ord       |\n| \u26ab         | U+26ab     | \\mdblkcircle   | ord       |\n| \u2981         | U+2081     | \\mdsmblkcircle | ord       |\n| \u2b24         | U+2B24     | \\lgblkcircle   | ord       |\n. Done.. This PR is written to fix issues #735 and #996.\n\\vec uses a combining character and does not have a character preceding it within its span. Safari, unlike other browsers, does not recognize the negative xMin value for such a character, so it renders \\vec too far to the right.\nThis PR replaces the glyph with an SVG whose path is copied from the glyph. Let\u2019s all just agree that this is an ugly hack. It is defensible only because user agents cannot be trusted to handle combining characters consistently.\nThe people over at MathJax must have come to the same conclusion. Their approach is also, by their own admission, a hack.. There was an alternative approach that I examined. If one prepends a non-breaking space before the combining character U+20D7, Safari will then treat it in the same way as the other browsers that I tested.\nThe problem then shifts to the vertical alignment. When the arrow is so treated, none of the browsers place it in the vertical position consistent with the glyph's yMin value. It's lower. By my eyeball test, it looks to be vertically centered on the x-height. But that is not documented anywhere that I can find. Rather than depend on something so dicey, I wrote the SVG. . > There is an alternative, to modify the font so that it has a non-combining version of the character.\nThat would be better.  But fonts are beyond me. Hopefully, someone can make the font modification in some future PR. This PR can be a good enough temporary measure.. > Were the vertical separators disappearing at times? Won't this change to the styling affect the horizontal layout slightly?\nRevisiting my response to this comment:\n1. Yes. Issue #970 \n2. No. It turns out that vertical-separator lines do nothing to the inter-column spacing of an {array}. In the screen shot below, I've drug part of a no-line array over and overlaid it onto an {array}{c|c}. The columns still align perfectly.\nIn the code for this PR, it was only necessary to adjust the vertical-separator negative left margin. No action is necessary to further fix the horizontal layout.\nI believe that we're good to go.\n\n. @kevinbarabash You're very welcome. I certainly think that we've now got something better than when we started. I hope it's enough.. @edemaine, You're correct. \\H does not work in Safari in the current release.\n\n. Yes, I am on Windows.\nstatic/fonts is a file with no extension that contains the text ../submodules/katex-fonts/fonts\nOne would think that ought to work. It certainly points to a folder that contains all the needed font files.  But sad experience says that it does not work.\n. @ylemkimon, thank you for the information. A web search also brought up the discussion at: https://stackoverflow.com/questions/5917249/git-symlinks-in-windows#16754068\nIt all looks quite complex. I like the suggestion from @kevinbarabash.  Something that does not involve a symlink.. @kevinbarabash, thanks. There's no rush. At least a week will go by before I can spend much time on KaTeX.. I hope that works. I've just merged the latest commits from master into my local repository, Having done that, I have now lost all ability to do a local build. Instead, I get 60 error messages telling me that a font file cannot be found. Until the symlink issue is resolved, I am out of action.. @kevinbarabash We're making progress on a Windows local build. I'm no longer getting 60 fatal errors. But I am getting one. It is:\n```\nUncaught Error: Module build failed: \n@import \"../submodules/katex-fonts/fonts.less\";\n^\nCan't resolve '../submodules/katex-fonts/fonts.less' in 'XXX\\GitHub\\KaTeX\\static'\n      in XXX\\GitHub\\KaTeX\\static\\katex.less (line 1, column 0)\n    at Object.stylesInDom (katex.js:18398)\n```\nWhen I look in the local subdirectory  ../submodules/katex-fonts/ I find that fonts.less is indeed missing.  Somehow it was omitted when I merged upstream/master into my local repository. I could just manually copy that file from the KaTeX master to my local repository, but I expect you may  have other ideas about the proper course of action.. Success! Thank you, @edemaine. It worked after I ran git submodule update --init --recursive. The sync was not necessary.\nIs it worthwhile to add this bit of wisdom to the Contributing to KaTeX page? At present, the page says that \"Most of the time you won't have to worry about [submodules].\" . @samuelpmish, The current KaTeX master contains PR #1025, which upgrades not only frac-lines, but also underlines and overlines. We should have a release out soon that contains the new approach. . You're very welcome. It would be sad if people would do all this great programming and then not tell anyone.. Nope. I've never done that myself. I'm pretty content to stay with the function support page.. Below I show a test from 0.9.0-beta.  It appears that KaTeX does currently support \\text{\u00c5} and \\text{\u00e5}. It just does a poor rendering of both.  The math-mode rendering looks good.\n\nOf all the Latin-1 characters added by PR #796, we've regressed only for characters  \u00e6, \u00f8, and \u00d8. I can't get them to render in math mode. I realize that I'm late here, but I want to point out that \\lbrack and \\rbrack were supported by KaTeX before this PR.\n\n. Well, I caught it because I was updating the function support page and found that those two functions were already there. So in a sense, the function support page already serves as a low tech dictionary. No doubt you're looking for something more robust.. Well, that's not good. The problem seems to come from the row spacing code.\n@kiliansinger, while we work on this, you can get the result you want by replacing \\\\[0.3em] with \\cr[0.3em] . I think the root of this bug is in the auto-render extension. The OP\u2019s matrix includes a row separator of \\\\[0.3em] and the auto-render search is matching the \\[ inside \\\\[0.3em] as if it was the left delimiter for the start of a TeX string.. Fixed via #1375.. One can get a sense of how these arrows can be used by looking at pages here or here. Also, the typography on those pages point out why mhchem is needed.\nThere are also places that would benefit from \\xrightequilibrium or \\xleftequilibrium but because they were not available, the author has instead written \\rightleftharpoons. One example is on this KA page. Notice the picture drawn beneath the reaction formula.\n\n. I would appreciate a review from @mhchem as to the arrow rendering. The usual review from @kevinbarabash or @edemaine is also in order.. @mhchem Re: harpoon sizes: Yes, mine are large by design, but that can be changed.\nI get my harpoon geometry from KaTeX font glyphs.  Two harpoon sizes are available. The harpoons from KaTeX_Main are larger than the KaTeX_AMS harpoons. I can show you the difference. Below is how  the mathtools package renders  \\rightleftharpoons  \\xrightleftharpoons{}.\n\nAs you can see, mathtools used the larger choice for their extensible harpoons. And until this point, we've emulated mathtools for extensible arrows. \n~~For the proposed arrows \\xrightequilibrium and \\xleftequilibrium, I will change the harpoons to the smaller, AMS sizes.  That will match the mhchem choice. Thank you for pointing that out.~~\nNow I was thinking that you would use the existing KaTeX function \\xrightleftharpoons for mesomerism. But \\xrightleftharpoons uses the larger mathtools harpoons. Is that a big problem? Do you want another extensible arrow created with smaller harpoons?\n. @mhchem If you don't mind the large harpoons, then I am going to keep the ones already submitted in this PR. That way, you can use the already existing \\xrightleftharpoons to go with the proposed \\xrightequilibrium and \\xleftequilibrium.  It also saves me some work.\nIt's true that this PR does not support \\ce, so I will port the 42 test cases over to KaTeX syntax and ~~put up a test page~~ capture some screen shots. That will give enough information for a visual review.. @mhchem, I captured the screen shots below from a local build using this PR.\n\n\n\n\n\n\n\n. The source code for all those screens shots is:\n\\begin{array}{l l}\n\\text{H} \\xrightarrow{} \\text{H} & \\verb!\\ce{H -> H}! \\\\\n\\text{H} \\xleftarrow{} \\text{H} & \\verb!\\ce{H <- H}! \\\\\n\\text{H} \\xleftrightarrow{} \\text{H} & \\verb!\\ce{H <-> H}! \\\\\n\\text{H} \\xrightleftarrows{} \\text{H} & \\verb!\\ce{H <--> H}! \\\\\n\\text{H} \\xrightleftharpoons{} \\text{H} & \\verb!\\ce{H <=> H}! \\\\\n\\text{H} \\xrightequilibrium{} \\text{H} & \\verb!\\ce{H <=>> H}! \\\\\n\\text{H} \\xleftequilibrium{} \\text{H} & \\verb!\\ce{H <<=> H}! \\\\\n\\text{H} \\xrightarrow{\\text{a}}\\text{H} & \\verb!\\ce{H ->[a] H}! \\\\\n\\text{H} \\xleftarrow{\\text{a}}\\text{H} & \\verb!\\ce{H <-[a] H}! \\\\\n\\text{H} \\xleftrightarrow{\\text{a}}\\text{H} & \\verb!\\ce{H <->[a] H}! \\\\\n\\text{H} \\xrightleftarrows{\\text{a}}\\text{H} & \\verb!\\ce{H <-->[a] H}! \\\\\n\\text{H} \\xrightleftharpoons{\\text{a}}\\text{H} & \\verb!\\ce{H <=>[a] H}! \\\\\n\\text{H} \\xrightequilibrium{\\text{a}}\\text{H} & \\verb!\\ce{H <=>>[a] H}! \\\\\n\\text{H} \\xleftequilibrium{\\text{a}}\\text{H} & \\verb!\\ce{H <<=>[a] H}! \\\\[0.4em]\n\\text{H} \\xrightarrow[\\text{a}]{} \\text{H} & \\verb!\\ce{H ->[][a] H}! \\\\[0.4em]\n\\text{H} \\xleftarrow[\\text{a}]{} \\text{H} & \\verb!\\ce{H <-[][a] H}! \\\\[0.4em]\n\\text{H} \\xleftrightarrow[\\text{a}]{} \\text{H} & \\verb!\\ce{H <->[][a] H}! \\\\[0.4em]\n\\text{H} \\xrightleftarrows[\\text{a}]{} \\text{H} & \\verb!\\ce{H <-->[][a] H}! \\\\[0.4em]\n\\text{H} \\xrightleftharpoons[\\text{a}]{} \\text{H} & \\verb!\\ce{H <=>[][a] H}! \\\\[0.4em]\n\\text{H} \\xrightequilibrium[\\text{a}]{} \\text{H} & \\verb!\\ce{H <=>>[][a] H}! \\\\[0.4em]\n\\text{H} \\xleftequilibrium[\\text{a}]{} \\text{H} & \\verb!\\ce{H <<=>[][a] H}! \\\\[0.4em]\n\\text{H} \\xrightarrow[\\text{a}]{\\text{a}} \\text{H} & \\verb!\\ce{H ->[a][a] H}! \\\\[0.4em]\n\\text{H} \\xleftarrow[\\text{a}]{\\text{a}} \\text{H} & \\verb!\\ce{H <-[a][a] H}! \\\\[0.4em]\n\\text{H} \\xleftrightarrow[\\text{a}]{\\text{a}} \\text{H} & \\verb!\\ce{H <->[a][a] H}! \\\\[0.4em]\n\\text{H} \\xrightleftarrows[\\text{a}]{\\text{a}} \\text{H} & \\verb!\\ce{H <-->[a][a] H}! \\\\[0.4em]\n\\text{H} \\xrightleftharpoons[\\text{a}]{\\text{a}} \\text{H} & \\verb!\\ce{H <=>[a][a] H}! \\\\[0.4em]\n\\text{H} \\xrightequilibrium[\\text{a}]{\\text{a}} \\text{H} & \\verb!\\ce{H <=>>[a][a] H}! \\\\[0.4em]\n\\text{H} \\xleftequilibrium[\\text{a}]{\\text{a}} \\text{H} & \\verb!\\ce{H <<=>[a][a] H}! \\\\[0.4em]\n\\text{H} \\xrightarrow{\\text{long text}} \\text{H} & \\verb!\\ce{H ->[long text] H}! \\\\[0.4em]\n\\text{H} \\xleftarrow{\\text{long text}} \\text{H} & \\verb!\\ce{H <-[long text] H}! \\\\[0.4em]\n\\text{H} \\xleftrightarrow{\\text{long text}} \\text{H} & \\verb!\\ce{H <->[long text] H}! \\\\[0.4em]\n\\text{H} \\xrightleftarrows{\\text{long text}} \\text{H} & \\verb!\\ce{H <-->[long text] H}! \\\\[0.4em]\n\\text{H} \\xrightleftharpoons{\\text{long text}} \\text{H} & \\verb!\\ce{H <=>[long text] H}! \\\\[0.4em]\n\\text{H} \\xrightequilibrium{\\text{long text}} \\text{H} & \\verb!\\ce{H <=>>[long text] H}! \\\\[0.4em]\n\\text{H} \\xleftequilibrium{\\text{long text}} \\text{H} & \\verb!\\ce{H <<=>[long text] H}! \\\\[0.4em]\n\\text{H} \\xrightarrow[\\text{long text}]{} \\text{H} & \\verb!\\ce{H ->[][long text] H}! \\\\[0.4em]\n\\text{H} \\xleftarrow[\\text{long text}]{} \\text{H} & \\verb!\\ce{H <-[][long text] H}! \\\\[0.4em]\n\\text{H} \\xleftrightarrow[\\text{long text}]{} \\text{H} & \\verb!\\ce{H <->[][long text] H}! \\\\[0.4em]\n\\text{H} \\xrightleftarrows[\\text{long text}]{} \\text{H} & \\verb!\\ce{H <-->[][long text] H}! \\\\[0.4em]\n\\text{H} \\xrightleftharpoons[\\text{long text}]{} \\text{H} & \\verb!\\ce{H <=>[][long text] H}! \\\\[0.4em]\n\\text{H} \\xrightequilibrium[\\text{long text}]{} \\text{H} & \\verb!\\ce{H <=>>[][long text] H}! \\\\[0.4em]\n\\text{H} \\xleftequilibrium[\\text{long text}]{} \\text{H}& \\verb!\\ce{H <<=>[][long text] H}! \\\\[0.6em]\n\\text{H} \\xrightarrow[\\text{long text}]{\\text{long text}} \\text{H} & \\verb!\\ce{H ->[long text][long text] H}! \\\\[0.4em]\n\\text{H} \\xleftarrow[\\text{long text}]{\\text{long text}} \\text{H} & \\verb!\\ce{H <-[long text][long text] H}! \\\\[0.4em]\n\\text{H} \\xleftrightarrow[\\text{long text}]{\\text{long text}} \\text{H} & \\verb!\\ce{H <->[long text][long text] H}! \\\\[0.4em]\n\\text{H} \\xrightleftarrows[\\text{long text}]{\\text{long text}} \\text{H} & \\verb!\\ce{H <-->[long text][long text] H}! \\\\[0.4em]\n\\text{H} \\xrightleftharpoons[\\text{long text}]{\\text{long text}} \\text{H} & \\verb!\\ce{H <=>[long text][long text] H}! \\\\[0.4em]\n\\text{H} \\xrightequilibrium[\\text{long text}]{\\text{long text}} \\text{H} & \\verb!\\ce{H <=>>[long text][long text] H}! \\\\[0.4em]\n\\text{H} \\xleftequilibrium[\\text{long text}]{\\text{long text}} \\text{H} & \\verb!\\ce{H <<=>[long text][long text] H}!\n\\end{array}. @kevinbarabash  I agree. I have the KaTeX_Main, KaTeX_AMS, KaTeX_Size1, and KaTeX_Size4 fonts installed as system fonts. That's probably the only reason I get any decent renderings at all. Anything that strays from those fonts is unavailable to me in a local build.. > I would predict that the following arrows would touch the text.\nNope.\n\n@mhchem Thank you for the review. I'm glad that the arrows look good to you.\n@kevinbarabash Now we move on to the next step.\n\nwe should probably make \\xrightleftarrows, \\xrightequilibrium, and \\xleftequilibrium private.\n\nI'm okay with that general idea. I anticipated that you would be hesitant to create a new function name where none existed before. But I have questions about what \"private\" means. (1) Is it enough to omit the proposed names from the function support page? Or (2) do you mean to programmatically prevent anything except the future mhchem extension from access to these three functions?\nIf it is (2), then I'll need some help. I have not the vaguest idea of how to accomplish that.. @kevinbarabash My first, most straightforward attempt did not work. If I edit functions.js and revise \\\\xrightleftarrows to read as \\\\@xrightleftarrows, I get multiple fails in jest. I think the lexer is choking on that \"@\".\nmacros.js accepts \"@\". I could write a macro that points to an obfuscated name: \n`defineMacro(\"\\\\@xrightleftarrows\", \"\\\\qwertyuiop\");\n... and then replace \"xrightleftarrows\" with \"qwertyuiop\" in  functions.js and stretchy.js. That runs fine, but it seems a little strange. Are we sure that we don't get enough obscurity by just omitting the names from the function support page?. > I meant the other one, where the short arrow is on top.\nYou may be correct about that short arrow. I'd like to test it, but at the moment, I can't.  After issue #1052 is resolved, I'll take a look.. @mhchem You were correct about an interference between a short harpoon and a descender. So I've made an adjustment to the upper text vertical alignment.\nBefore:\n\nAfter:\n\n. @kevinbarabash, I've added a warning to the code in functions.js. Hopefully that will scare people off until these functions can be made properly private.\nIt seems that you have delayed PR #1083 until I finished this one, thereby taking onto yourself the burden of rebasing the conflicts. That's very considerate of you.\nAnd I think this is ready for updated screenshots and final review... One final thought for final review. That vertical adjustment that I just made to the upper text is now applied to all extensible arrows. But the adjustment is really only needed for \\xleftequilibrium. If you would prefer to apply the adjustment only to \\xleftequilibrium and not to all the others, let me know.. Done.. I just merged local master into this branch. I think that takes care of the katex.less issue. If not, let me know.. Just as a clarification, I'll point out that the x and \\pi parts of that argument work fine. It's the \\frac{1}{2} that causes the error.. > What is the reason for not setting acceptUnicodeChar = true [on \\sum] by default?\n@leungbk, When we were implementing Unicode support, I included the big operators by writing them in the defineFunction section of file ops.js. I felt that this gave someone reading the code a more direct way to see the connection to operator symbol re-sizing, \\limits, etc. \nIt may be that we could do both that and also set the acceptUnicodeChar flag in symbols.js. . Yes, I closes all the use cases that I can think of.. @kevinbarabash The cancel package documentation states that:\n\nBy default, none of these commands affects the horizontal spacing, so they might over-\nprint  neighboring  parts  of  the  formula  (or  text).\n\nI tried to accomplish that with CSS adjacency rules. It looks like I missed some of the possible combinations. I don't know if PR #1070 makes this easier or harder.. > LaTeX is in green. KaTeX is in green.\nWhich is which?. I am fully in agreement with your proposed solution for styles.\nSince the topic is nested SVGs, I wonder has anyone tried zooming them on Safari? Issue #883 revealed a problem. \n. @kevinbarabash What does this do regarding \\vec? Is there now a non-combining character available to use for \\vec, or should we keep the current SVG arrangement?. @kevinbarabash Thanks for the update. I will take no action.. @mbourne The next time that I update the function support page, I'll edit the first item under \"Links\" and change how it reads from \"Home\" to \"Sandbox\". . Agreed. I'll use \"Demo\".. @arlohosk Are you using KaTeX to render something inside an SVG?. Can you provide a link? I'd like to go investigate.. My first hypothesis is that the root cause of this issue is the same as issue #1088. Some external SVG styling has caused the frac-line, which is an SVG path, to render with a black border and a white fill.\nPR #1089 was merged into master yesterday. If my hypothesis, is correct, then both problems will be fixed when that PR is released.. @mbourne I think that @arlohosk's double line is being caused by something  different than your thick line. I hope that the double line has just been solved by release  0.9.0-beta1.\nAlso, @mbourne , the second SVG line is there by design. I have an explanation in two versions. The short version is that the second line is there to prevent the frac-line from blurry edges.\nRead on if you want to hear the long winded second version.\nImagine that a frac-line is positioned on a monitor screen so it is centered exactly on the border between two rows of screen pixels. The frac-line is only 0.04em thick, so let's say that it covers 30% of the upper pixel and 30% of the lower pixel. How that will render varies with the browser and with the way we draw the line.\n\n\nA span border seems to be treated by some browsers so that pixel is binary -- either completely on (black) or completely off. KaTeX used to make frac-lines with span borders and sometimes Chrome would disappear them.\n\n\nAn SVG path will not be omitted, but it won't be black, either. Instead the browser takes that 0.3 coverage value and uses it to anti-alias the pixel. It will be some shade of gray. That makes some lines appear to have blurry edges.\n\n\nSo I wrote the SVG with two lines, written directly on top of each other. I think of this as similar to two brush strokes. The browser adds some gray to the pixel for each brush stroke and it ends up black (or near black). And we perceive a frac-line with crisp edges instead of blurry edges.\nUnfortunately, we also sometimes get lines that are too thick. That's better than a missing line, and I think a few thick lines are better than a lot of blurry lines. If I ever think of a way to make all the problems go away, I'll change it.\nIf I can't think of anything, well as time goes by, we'll all migrate to screens with higher pixel density. The frac-lines will get closer to the 0.04em value that Donald Knuth intended.. @mbourne How do \\sqrt top bars compare to frac-bars? They're both 0.04em thick, but \\sqrt uses two SVG paths and frac-bar uses two SVG lines. If the paths work better for you, I could easily make that change.\nSuch a change would also seem to clear up the problem for @arlohosk. The \\sqrt in his screen shot looks good.. > I think Firefox is having issues with the \\sqrt bar being so close to the edge of the SVG\n@kevinbarabash Are you contemplating getting some space there by using a taller \\sqrt view box and then an adjustment to the value we pass to makeVList?. @kevinbarabash Yes, I can put together a couple of  PRs. One to change frac-lines from SVG lines to paths and another to create some padding above the \\sqrt line. \nBut that will be in a few days, when I'm feeling better. I'm a little under the weather at the moment.. No more tweaks planned. PR #1249 reverted  frac-lines back into borders and PR #1143 added padding over \\sqrt lines. I've done what I can.. PR #993 and unicode-math both map U+2223 to \\mid, not to \\lVert or \\rVert.  \\mid is an operator, not a delimiter, useful for set builder notation.\nThe single character analogue to \\vert is ASCII \"|\", U+007C. That's been true since the TeXbook, p146.. Similarly, unicode-math maps U+2225 to \\parallel, which is also an operator, not a delimiter.. I tried another merge. Keeping my fingers crossed.. That last merge may not have worked. I got a local message that says, \"Cannot merge binary files: test/screenshotter/images/ExtensibleArrows-chrome.png\". . Closing here. Will reopen elsewhere.. I tried another merge here, too. I'm getting messages about multiple image file conflicts. I'm sorry about this, but I really don't know what to do next.. Closing here. Will reopen elsewhere.. @TyOverby What version of KaTeX is rendering that expression?. Also, the \"%\" in your expression should be \"\\%\".. This page makes a pretty good attempt at documenting which MathJax commands are not yet in KaTeX.  The KaTeX Contributing page already alludes to it.. Several of those MathJax features are not present in any LaTeX package. And some of them are duplicates of LaTeX functionality. Like \\cases in addition to \\begin{cases}. Such features may never make it into KaTeX.. As to a fallback, I used to have a site in which, after calling renderMathInElement, I would make the following call ;\n(function () {\n  var script = document.createElement(\"script\");\n  script.type = \"text/javascript\";\n  script.src  = \"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\";\n  document.getElementsByTagName(\"head\")[0].appendChild(script);\n})();\nThat code is now out of date. MathJax has changed their CDN and they now have version numbers, not \"latest\", in the address. \nBut I stopped calling a fallback because there was no longer any point. KaTeX renders all that I need.. @kevinbarabash Query: Should I put this page into the list of links on the function support page?\nKeep in mind that that page has some errors. And a couple of them are silly, like saying that KaTeX does not support \\begin or \\end.. I can't think of a title short enough to fit onto the list. Maybe I'll just add the link to the introductory paragraph at the top of the page.. Yeah,  \\llap and\\rlap are difficult. In LaTeX, they work in math mode, but only sometimes, depending on what's in the argument. And I have not found a robust rule that tells me exactly when they work and when they don't.  I'll work on it this weekend.. > The list of what isn't in KaTeX could be very large. \nYes, but we can focus on a subset taken from two sources:\n1.  KaTeX's GitHub issues page. \n2. http://utensil-site.github.io/available-in-katex/\nThose are items that somebody either cared about enough to program them or at least to sit down and write a request.\nThat subset is much smaller, with fewer items to manage than the KaTeX function support page. So I've written it up. It's a KaTeX wiki page. \nPlease feel free to edit it and improve it.. > I think \\brace and \\brack wouldn't be too hard to support \nTechnical notes on the amsmath package deprecates the whole family of functions that use the infix syntax similar to \\atop. It suggests using \\genfrac instead.  I can write a PR that will add \\genfrac to KaTeX. \nOnce we have \\genfrac, do we still want to include \\above, \\brace, \\brack, and \\atopwithdelims ? \\genfrac can be used as an alternate for any of those functions.  \nThe AMS Tech Notes says that they deprecated those functions because the infix syntax causes problems for macros. Maybe @edemaine can weigh in here?. @edemaine Say that we add the other infix functions. Should the function support page then include a disclaimer saying that they might coexist poorly with macros? \nOr are those problems just the sort of thing that a macro writer is expected to know?. > it's unlikely that KaTeX-level macros will get into the issues mentioned.\nThat's a key point, I think. Things like the \\genfrac that I am about to write are done with macros inside AMS. So they run into control issues that KaTeX-level macros do not. @edemaine has convinced me. I'll get started on \\genfrac and I don't plan to add any disclaimers for infix functions. . Done.. @kevinbarabash Thank you. In my frustration, I got hasty.. >  It's incredible how many of our screenshots involve fractions. \nI know that I contributed to that. When I was testing stretchy arrows, fractions were a cheap way to test vertical alignment and vertical kerns used for clearances.. Well, I'm out of date with regard to a submodule. I tried running git submodule update --init --recursive but have gotten no relief. I'm stuck.. @kevinbarabash I am not able to view the Travis log, but I believe that I have this PR to the point where it passes all tests except screenshotter.. Then we'll forget it.. > Do we want a Unicode mapping for one of these\nMaybe not. One can already get a non-breaking space using ~. Also, unicode-math-table.txt contains no alias for U+00A0.. I withheld these characters from PR #933 because three packages address these characters and they all disagree on the alias.\n| Character | Code Point | mathtools and KaTeX | colonequals and KaTeX | unicode-math |\n|:--------------|:---------------------|:------------------------|:--------------------------|:-----------------|\n| \u2254             | U+2254               | \\coloneqq              | \\colonequals             | \\coloneq        |\n| \u2255             | U+2255               | \\eqqcolon              | \\equalscolon             | \\eqcolon        |\n| \u2a74             | U+2A74               | \\Coloneqq              | \\equalscoloncolon        | \\Coloneq        |\nNot only that, but the Unicode math aliases are used by mathtools to render a different character.\n|   Alias   | unicode-math    | mathtools and KaTeX |\n|:----------|:--------------------:|:-----------------------------------------------:|\n| \\coloneq | \u2254                    | :\u2212                                              |\n| \\eqcolon | \u2255                    | \u2212:                                              |\n| \\Coloneq | \u2a74                    | ::\u2212                                             |\nI have said in earlier PRs that for Unicode support, the internal alias is only a means, not an end. What matters is that the author must get the results desired from the input of a specific Unicode character. That is still true, so I have implemented these Unicode characters by writing macros that call the mathtools aliases.\nIt\u2019s a good thing that those internal aliases don\u2019t really matter. This could have been ugly.. Visual confirmation:\n\n. @ylemkimon That might work. I'll look into it tomorrow. . @ylemkimon I've followed your suggestion and placed the code into file genfrac.js. Thank you.\n@kevinbarabash I've squashed the commits, or at least I've tried. Let me know if you want any further rearrangement.. I think that's wise.. Yes, this PR supports \\genfrac and \\abovewithdelims, both of which give the author control over the fraction bar thickness. So I wrote screenshotter tests to demonstrate that capability.. @kevinbarabash, If you plan to do some PR reviews, I think that PR #1249 should take precedence over this one. After #1249 is merged, I'll circle back to this one and deal with the merge conflicts.. I'm closing this PR temporarily. I'll reopen after I've dealt with a number of merge conflicts.. There is a bug there and I'll look into it. In the meantime, @yeruoforever , is this the sort of thing you were seeking?\n\nIf so, then you can use:\n$$ T+\\overbrace{a_0+\\underbrace{a_1+a_2+\\cdots+a_k}_n}^m + f $$\n. I believe that I see the source of the bug. The problem is in \\mathrlap, not \\overbrace or \\phantom.\nKaTeX rlap and llap have always worked by just nesting a span with absolute positioning inside a span that has relative positioning. Then it is easy to manipulate the horizontal alignment by setting left: 0;  or right:0;.  \nBut that doesn't address the vertical alignment issues when tall math structures come into play. ~~We need to incorporate a makeVList into the \\mathrlap HTML handler.~~\nI can work something up in the next couple of days. . @edemaine Exactly correct. You can confirm that by erasing \\phantom from the expression. All the vertical alignment issues are still there. On the other hand, if you erase \\mathrlap, all the vertical alignment issues are resolved.\n~~There are probably many ways to fix this, but the KaTeX makeVList method has been debugged to overcome many browser-specific vertical alignment issues. It's the most reliable way to go.~~. This bug can be fixed in file lap.js by replacing line 39:\nreturn buildCommon.makeSpan(\n            [\"mord\", group.value.alignment], [inner, fix], options);\n... with this code:\n```\n        const node = buildCommon.makeSpan(\n            [\"mord\", group.value.alignment], [inner, fix], options);\n    // Use struts to vertically define the HTML bounding box.\n    // See buildHTML.js for comments re: IE 9.\n    const topStrut = buildCommon.makeSpan([\"strut\"]);\n    const bottomStrut = buildCommon.makeSpan([\"strut\", \"bottom\"]);\n    topStrut.style.height = node.height + \"em\";\n    bottomStrut.style.height = (node.height + node.depth) + \"em\";\n    bottomStrut.style.verticalAlign = -node.depth + \"em\";\n    return buildCommon.makeSpan([], [topStrut, bottomStrut, node]);\n\n```\nAs soon as I get my submodule issues worked out, I'll turn in a PR. But if this is a rush, anyone should feel free to do it sooner.. @ylemkimon, I'm guessing that one is LaTeX and the other is KaTeX. Which is which?. The most recent commit wraps the span with a mord span and thereby fixes the horizontal alignment relative to an adjacent span.. I expect so. I've added screenshotter tests to cover the spacing problem turned up in issue #1234.. @kevinbarabash  I believe that this PR, #1162, needs nothing more than screenshots. Since it fixes two rendering bugs, it also would be a good one to merge before the next release.. Screenshot test \"Lap\" failed. When I run the same code locally, it looks fine to me.\n@edemaine Can I ask for another favor and request a regeneration of screenshotter test \"Lap\"?. What I'm about to say is just a conjecture, but it may be possible to resolve the Firefox vertical alignment issue by using the current version of Firefox to generate the screenshots. Apparently, Firefox 57 fixed a bug that took place within tables with border collapse. Since makeVList uses display: table-cell, that may have some bearing on this problem.\nIf this sounds like I'm grasping at straws, that's because I am.. I'm stuck.\nI want to get this PR merged so that I can then go clean up my repository before I resume work on anything else. But it seems that no one knows how to get screenshotter to properly handle the test for Lap. \nIf we have to choose between that test and this PR's code, we have to take the code. It fixes two rendering bugs.\nSo the latest commit deletes the screenshotter test. I'm sorry to do that, but I can think of no better course of action.. Will do.. Yay!. @prabhatmuroor Which version of KaTeX are you using?. That sounds fine, given good criteria. I find that I sometimes get a down rating when I move code from functions.js / buildHTML.js / buildMathML.js to the /functions/ subdirectory. That seems wrong. \nSo the target must be global, not on each file.. Will do.. @kevinbarabash  It turns out that I had already written some parse tests. My latest commit adds a few build tests.. This PR introduces a non-standard, that is, non-LaTeX syntax for \\raise. That sort of thing has been discouraged by KaTeX ownership in the past. Naturally, I think there are excellent reasons for the syntax in this PR, but it would be good to get an explicit approval. \n@kevinbarabash Would you mind giving a thumbs up to the idea of \\raise that works on something other than a LaTeX box?. @edemaine Let me think a little about that warning idea. It sounds reasonable. I'd like to try out an implementation before I sign on entirely.. I'm closing this PR temporarily. I'll re-open after PR #1278 has landed and I have edited this PR as per the new strict mode.. @kevinbarabash What does this involve? I can see that the contents of bower_components/katex/dist/ must be refreshed with files from the most recent release.\nIs there anything else?. Just out of curiosity, why does the demo page load its katex.js from the bower_components subdirectory? Why not get it from the cdnjs.cloudflare.com CDN like everyone else?. > I'm wondering about switching from Bower to NPM \nhttps://unpkg.com seems to update more quickly than the cdnjs.cloudflare.com CDN. If that could be written into the release script, then I wouldn't worry too much about the wait time.. @mbourne, There are two links on the release page:\n1. katex.zip\n2. Source code (zip)\nThe one you want is katex.zip. The contents you describe are in Source code (zip).. Well, that\u2019s disappointing. I hoped that we had fixed things. @kevinbarabash, I\u2019ll recap below the various ways that I have attempted to help.\n| Version  | Ink Source | Ink Height | Span Height       | Results                                                                                                          |\n|:-------------|:---------------|:---------------|:----------------------|:---------------------------------------------------------------------------------------------------------------------|\n| 0.9.0-alpha  | spanborder    | 0.04em         | 0.04em                | Base case. Many reports of disappearing fraction lines.                                                                  |\n| 0.9.0-alpha1 | spanborder    | 0.04em         | 0.04emmin-height:1px | Improvement, but not complete success. Reports come in that there are still a few disappearing lines.                |\n| 0.9.0-alpha2 | SVGpath       | Big            | 0.04em                | Some lines are rendered thinner than standard. This teaches us that browsers handle span.height imprecisely.       |\n| 0.9.0-beta   | SVGline       | 0.04em         | 0.2em                 | Spans no longer pinch down on line ink. @akalin reports a complete fix.                                              |\n| 0.9.0-beta1  | SVGline       | 0.04em         | 0.2em                 | No change in the code, but reports come in that some lines are too thick.                                            |\n| 0.9.0        | SVGpath       | 0.04em         | 0.2em                 | @mbourne reports that some lines have fuzzy edges and some are gray. This is due to anti-aliasing on the paths. |\nv0.9.0 looks terrific on my Microsoft Surface and I suspect that the anti-aliasing is a problem that diminishes with higher pixel density. So it may not be a future problem.\nStill, it\u2019s a problem right now. I have two more arrows in my quiver.\n\nApply shape-rendering: crispEdges to the SVG path of a frac-line.\nKeep the tall (0.2em) span but switch the 0.04em ink from a SVG path back to a span border. Use margin to align it properly. We haven\u2019t yet tried a border inside a tall span. Maybe it was the span pinching that caused the problem.\n\nI expect the results would be similar in both cases. The good part is that a black line will not have a fuzzy edge. The risk is that we may once again get some lines that are too thick or, worse yet, we may see a currently gray line disappear altogether. If that happens, then we will have to either live with the anti-aliasing or depart from TeX purity and make the frac-lines thicker.\n@mbourne, if I build both of those versions and make them available, would you mind downloading and testing them?. Results are in on the shape-rendering: crispEdges approach. In Chrome, on a monitor with 166 pixels per inch, I get many missing frac-lines. It's not acceptable.\nI'll move on to the span-border-in-a-wide-span approach next.. It doesn't hurt to try shape-rendering: geometricPrecision. And I will try it, but I don't expect it to help.\n\nit doesn't hurt to search for a better rendering\n\nThat's what I'm doing, but it is not a completely open-ended search. If it turns out that occasional anti-aliasing is the price to be paid for always-on frac-lines, then I'll be willing to settle for that.. Math with geometricPrecision has no missing frac-lines. That's good. And there's more.\nOn a 267 dpi screen, by my eyeball test, frac-line thickness matches the arrow shaft thickness of stretchy arrows. I expected that.\nOn a 166 dpi screen, frac-lines look thicker than the stretchy arrows. That surprised me. It might be just what we need. Later this evening, I'll put up a build so that @mbourne can test it.\n. > On a 166 dpi screen, frac-lines look thicker than the stretchy arrows\nOnly in Chrome, not in IE 11.  . @mbourne I have temporarily put a zip file here. It contains a copy of katex.js and katex.css built with the shape-rendering: geometricPrecision suggested by @edemaine.\nI would appreciate it if you would try it out and tell me how it works with your test cases.. @mbourne may be on to something. I've run some tests and they were surprising. I've put up a test page with the results.. Given what I see on the test page, I propose to change frac-lines from SVG paths back to span borders and apply the min-height CSS found on the bottom row of the test page tables. Span borders, so long as they appear, are better than SVG paths. They look better, they probably render faster, and their underlying code is cleaner and simpler to maintain.\nI would be happy to write the PR to make this happen.  Comments?. We switched because we got two reports that some frac-lines were still disappearing in 0.9.0-alpha1. \nThe proposed  differs from  0.9.0-alpha1 only by deleting one CSS rule.  We would keep:\n@media screen {\n  .katex .mfrac .frac-line {\n    min-height: 1px;\n  }\n}\nBut we would delete:\n@media screen and (-webkit-min-device-pixel-ratio: 2), screen and (min-resolution: 192dpi) {\n  .katex .mfrac .frac-line {\n    min-height: 0.5px;\n  }\n}\nI now believe that second rule was not helping much and in fact it was causing some MacBook Airs to not render the frac-line. Without that second rule, I believe we would have reliable lines.\nIt would be good to see this thoroughly tested. Our current release, 0.9.0, has reliable lines, so we have a minimally viable product. The proposed step will improve the rendering but we should do it only if we're sure that the lines never disappear.\n@akalin, @kkiningh, You once reported that v0.9.0-alpha1 was omiting some frac-lines. Would you mind going to the test page and tell me what you see in the bottom rows of each table?. @kkiningh Thank you. That corroborates what I've seen. All the frac-lines appear. A few of the lines in scriptscript style are a bit thick, but that drawback is, I think, less serious than the fuzzy edges and gray lines reported by @mbourne in v0.9.0.\n@kkiningh When you looked at the test page, were you using the same screen as when you reported some missing lines in v0.9.0-alpha1?. > It'd be good to test on a non-retina device if we haven't already done so.\nBelow are screen shots from a screen whose resolution is 166 dpi, per http://dpi.lv/.  Since it's resolution is less than 192 dpi, the bottom row of each table matches the middle row.\nTable 1:\n\nTable 2:\n\nTable 3:\n\nOnce again, all the frac-lines appear. Again, the scriptscriptstyle lines eat up the top and bottom kerns, but I that's to be expected at 166 dpi.. Also, I can't think of a way to use thin and also support authors who write math in 72pt font. The frac-line needs to scale with external font-size.\n@kevinbarabash I can write up a PR. I want to avoid merge conflicts with PR #1152, so I would like to either (1) Wait until after PR #1152 lands, or (2) revise #1152 to use span borders for frac-lines. Which would you prefer?. @arnog, Would you mind looking at the text page, vary the zoom level as you describe, and tell me if any frac-lines disappear in any of the table bottom rows? . Well, that's disappointing. But let me note some context.\nThe missing lines are from 12pt scriptscriptstyle and 7pt normal size fractions, depicted at 67% zoom. For people over 50 years old, such missing lines are no loss. We (I'm 60) don't actually read anything of that size. It's not legible to us. Instead, that sort of thing is only an indicator that a text block exists and that we might want bring it into focus by adjusting the zoom level to something readable.\nSo a missing frac-line is no loss to us oldsters if it only occurs at such a tiny size. Others here no doubt have a different perspective. I'd like to hear them. But my opinion is that these particular missing lines are not a deal breaker. I'm still willing to proceed with span borders in place of SVG paths.. I wonder if the KaTeX CSS is insufficiently isolated from external CSS.\n@alexeymrkn Could you point to a test page where this occurs?. Among the  many clever steps in makeVList, it inserts a span with class vlist inside a span with class vlist-r, here. The vlist span has no contents and it has a CSS rule of display: table-cell;. So it should render with the small height that the code defines for it.\nApparently Chrome will, in  contenteditable mode only, treat the span as if it contains some text content, which then defines a min-height for the span.  This can be evaded by placing yet another empty span into the vlist span.. @alexeymrkn Thank you for determining that this problem takes place within a contenteditable div. That tip was the key to fixing the bug. A fix has now been merged into KaTeX master.. Oops. I forgot to create a feature branch. Now I've made a pull request from my local master branch. Sorry.\nThis PR should get reviewed before my other pending PRs. Until this one lands I won't be able to help much with the others.. @kevinbarabash I don't think the usual screenshot infrastructure will capture the issue here. Everything within a KaTeX span renders fine. Below, I show two fractions, one with the current master and one with this PR. Both renderings are fine because vertical alignment is set by makeVList.\n\nBut the following image shows how KaTeX interacts with surrounding HTML. The image on the left is the currrent master and on the right is the proposed PR.\n\nSo I'm still stuck. I'm sure that I've fixed the problem, but I don't know how to make screenshotter demonstrate it.. All this PR does is put one empty span inside another empty span. Maybe we could do without a test?. @edemaine, When I most recently updated the function support page, I was too impatient to wait the 2 or 3 days that the cloudflare CDN takes to update. So I wrote it to load from unpkg.com.  I would be happy to use cloudflare for 0.9.0 and then change back to unpkg for future releases, if that turns out to be the work flow.\nI have a updated HTML page prepared for 0.9.0, but I usually don't submit a PR to the gh-pages branch until all my pending master PRs have landed. That way, I avoid any risk that my rudimentary Git skills will mess up my repository.. @edemaine, Once or twice, the function support page has been a release ahead of the demo page, at times when the demo page was not updated at release time.  So for the function support page, I got into the habit of using either the cloudflare CDN or unpkg.. @rahulpathakgit, I've lately avoided maintaining both an HTML version and a Markdown version of that page. Later today or tomorrow, I'll try running a couple of RegEx scripts as @edemaine suggests. If all goes smoothly, I'll revive the wiki page version. If successful, the wiki page will be similar to the HTML version, but without the working examples.. @rahulpathakgit, I've updated the wiki page.  I'll probably revisit this sometime next week and add a table of contents.. @edemaine  I automate parts of it. For instance, I can copy a table from a web page into Microsoft Word. Then in Word it is easy to, for instance, insert a single cell. I then have scripts that can convert the Word table into either HTML or Markdown.\nI also think that the list of unsupported functions is dwindling. We're beyond the days where I add fifty functions in one release. . @edemaine No problem. You can copy the test over if you like. I'll close this PR.. Pandoc's tex_math_dollars extension treats $...$ with just a bit more nuance. Reference. If we change the autorender contrib plug in, maybe we should follow its lead.. @edemaine Good call.\n\n. > Is it possible to use datas from symbols from src/symbols.js?\nI don't understand the question. What sort of data do you seek?. delimiter.js is called only by the functions that resize delimiters. So delimiters like ulcorner and urcornerthat do not change size do not  appear in delimiter.js.  But the ones that do change size need a little more definition applied for the size change.. I'm closing this PR so that I can clean up the master branch in my repository. I'll reopen another delimiter PR when that's done.. Okay, I understand the question now. But you know, I'm probably not the person you want to have refactoring your code. I'll follow existing patterns and support new functions. I'll chase down rendering bugs. But a code clean up operation should be done be someone with a stronger claim to expertise.. And to refresh some visual confirmation:\n\n. @edemaine  Tests are revised toBuild. Should be good to go.. I suppose we could support each delimiter Unicode character with a macro, such as:\ndefineMacro(\"\\u2308\", \"\\\\lceil\");\nThen PR #1207 would not have to change any part of symbols.js, delimiters.js, or delimsizing.js.\nBut I'm not sure that the content of delimiters.js can be streamlined much further. Not all delimiters stretch vertically. The ones that do are listed in delimiters.js. That's the purpose of the list. \nAnd if we keep that list, then I personally don't like the macro idea. I like having the functions and Unicode equivalents defined near each other. . @yorrd We've been adding Unicode characters in small steps. There were a couple of PRs two years ago that tried to add all characters at once. The discussion about those PRs got bogged down because a few characters have ambiguous mappings. Should \u22a5 be a relation or a textord? KaTeX wanted to avoid getting any of those calls wrong and have to do breaking changes later.\nSo we've been adding characters in smaller, more digestible chunks of the Unicode table. And we haven't yet gotten to anything outside the Unicode basic multi-lingual plane.  That's why \ud835\udd3d is not yet accepted. \n@edemaine There are nearly a thousand characters in the Unicode table for Mathematical Alphanumeric Symbols. Do you have any ideas for doing that compactly? Or do we write 1000 macros?. >  Or do we write 1000 macros?\nI don't mind writing 1000 macros. I can automate part of it. I just wonder if there is some elegant way to support those characters that will render faster and/or allow us to ship less code.. I have an idea that I'm working up. I'll have a PR ready in a day or two.. The next update to the function support page will be challenging. So far, that page has shown a lot but explained very little. I hope that I can explain strict and allowAllSymbols in a concise, understandable way.. Yes, something along those lines is called for.  I'd appreciate it if you would look over the page when I turn in the next version. . I can do \\widecheck. Not right away, though. Maybe in a couple of weeks.\n\\wideparen is a little more difficult. I may eventually get to it, but it is well down on my priority list.. Terrific idea. Many people migrate to KaTeX from MathJax, not LaTeX. We want to avoid difficult barriers for them.. Another candidate for strict: false would be our environments. As long as MathJax exists, some authors will wish to write {align}, {gather}, and {alignat}  instead of {aligned}, {gathered}, and {alignedat}.. > so I still like the single option. \nMe too.. This PR works by writing macros on the fly that invoke the appropriate KaTeX font function and base character. This macro method worked well for most characters. But not all. This PR falls back to system fonts in the cases where:\n\nA KaTeX font was unavailable, e.g., script a-z\nNo KaTeX function exists to reach the font, e.g., bold Fraktur\nI was too lazy to build out the table, i.e., Greek letters\n\nThe table below shows the details.\n| Item                     | math mode | text mode | Issue                              |\n|:-----------------------------|:--------------|:--------------|:---------------------------------------|\n| A-Z bold upright             | \u2713             | \u2713             |                                        |\n| a-z bold upright             | \u2713             | \u2713             |                                        |\n| A-Z italic                   | \u2713             | \u2713             |                                        |\n| a-z italic                   | \u2713             | \u2713             |                                        |\n| A-Z bold italic              | \u2713             | \u2713             |                                        |\n| a-z bold italic              | \u2713             | \u2713             |                                        |\n| A-Z script                   | \u2713             | system        | No function                            |\n| a-z script                   | system        | system        | No font                                |\n| A-Z bold script              | system        | system        | textcal{\\textbf{\u2026}} doesn\u2019t work    |\n| a-z bold script              | system        | system        | No font                                |\n| A-Z Fraktur                  | \u2713             | system        | No function                            |\n| a-z Fraktur                  | \u2713             | system        | No function                            |\n| A-Z double-struck            | \u2713             | system        | No function                            |\n| a-z double-struck            | system        | system        | No font                                |\n| A-Z bold Fraktur             | system        | system        | \\textfrak{\\textbf{\u2026}} doesn\u2019t work |\n| a-z bold Fraktur             | system        | system        | ditto                                  |\n| A-Z sans-serif               | \u2713             | \u2713             |                                        |\n| a-z sans-serif               | \u2713             | \u2713             |                                        |\n| A-Z bold sans-serif          | \u2713             | \u2713             |                                        |\n| a-z bold sans-serif          | \u2713             | \u2713             |                                        |\n| A-Z italic sans-serif        | \u2713             | \u2713             |                                        |\n| a-z italic sans-serif        | \u2713             | \u2713             |                                        |\n| A-Z bold italic sans         | system        | system        | No font                                |\n| a-z bold italic sans         | system        | system        | No font                                |\n| A-Z monospace                | \u2713             | \u2713             |                                        |\n| a-z monospace                | \u2713             | \u2713             |                                        |\n| dotless i italic             | \u2713             | \u2713             |                                        |\n| dotless j italic             | \u2713             | \u2713             |                                        |\n| bold Greek                   | system        | system        | Sloth                                  |\n| italic Greek                 | system        | system        | Sloth                                  |\n| bold italic Greek            | system        | system        | Sloth                                  |\n| bold sans-serif Greek        | system        | system        | Sloth                                  |\n| bold italic sans-serif Greek | system        | system        | Sloth                                  |\n| 0\u20139 bold                     | \u2713             | \u2713             |                                        |\n| 0\u20139 double-struck            | \u2713             | \u2713             |                                        |\n| 0\u20139 sans-serif               | \u2713             | \u2713             |                                        |\n| 0\u20139 bold sans-serif          | \u2713             | \u2713             |                                        |\n| 0\u20139 monospace                | \u2713             | \u2713             |                                        |\n. This PR is heavily dependent on work done earlier by @kevinbarabash and @rrandallcainc to enable nested font functions. Thanks! The nested functions work splendidly for bold, italic, and sans-serif.. Here's visual confirmation of the work.\n\n. I was unable to write a macro that would result in bold Fractur. The KaTeX font exists, but I can find no function that invokes that font. Can anyone suggest a bold Fractur function that I can write into this PR?\nSimilarly, I was unable to write a macro that would work in text mode for script font, Fraktur, or blackboard bold. Is there some trick I am missing? Can such a macro be written?. In this work, I wrote myself into an infinite loop. The current code has a work-around, but it is quite contrived. I'd like to do better.\n@edemaine Is there a LaTeX macro function that will act something like: \\passArgThruWithoutExpandingIt{#1} ?\nIf such a thing existed, I could remove file sysfont.js from this PR.. General operation:\nThe entry point is in MacroExpanders.js. It traps a wide character at line 232 and calls function expandWideCharacter(string, mode). Say the character is a bold \ud835\udc00, U+1D400. In that case expandWideCharacter will return \\mathbf{A}. That works well.\nThe difficult cases are when KaTeX does not have the appropriate font available, say for bold script A (\ud835\udd04), U+1D4D0. For the fall back, I want KaTeX to render the character in system font. It would be convenient if   expandWideCharacter could just return the original character, \ud835\udd04. But if I do that, MacroExpander sends it right back to expandWideCharacter and I have an infinite loop.\nMy current, work around is instead to return \\sysfont{lowSurrogate} which avoids an infinite loop. But this seems like a odd way to work. I'd like some more elegant way to avoid that infinite loop.\n~~I suppose I could avoid macros altogether if I was willing to write 990 more symbols into symbols.js. I'm considering that.~~ Edit: No, that wouldn't work. symbols.js only works if the font contains a letter at the correct Unicode code point.. I should add that \\sysfont knows how to reconstruct the original string character from the low surrogate. But it wouldn't exist at all if I had a more elegant way to avoid an infinite loop.. I'm going to look at a completely different way to do this. Instead of an entry point in MacroExpander, maybe I can write a entry point in buildCommon.lookupSymbol. If it works, it would be cleaner.. I'm closing this PR while I consider another way to accomplish this.. @henryatman If you change {align} to {aligned} in your expression, it will work fine.\nIn LaTeX, {align} works is if is placed into a text mode section of the LaTeX document. {aligned} works if one is already in math mode. Since KaTeX is in math mode to begin with, {aligned} is the proper environment.. @yorrd, This PR supports these characters in math mode. Do you need them in text mode, as well?. In issue #260, @gagern requested support for characters in the range U+1D4D0 to U+1D4E9. Unicode lists that range as \u201cMATHEMATICAL BOLD SCRIPT\u201d, but the KaTeX fonts do not include glyphs for bold script. \nMost math fonts (STIX, Asana) show glyphs in that range that resemble Computer Modern Script font. The exception is Microsoft\u2019s Cambria Math font, which maps those code points to calligraphic glyphs. (It does the same thing for the Unicode A-Z script section.) Murray Sargent has written that he would make that choice differently today, but it\u2019s too late to change now.\nI\u2019m reluctant to write a fall back that uses a system font to render bold script characters. The system may very well use Cambria Math and display calligraphic characters instead. Then documents would break at some future date when KaTeX has a bold script font.\nWe need a KaTeX font for bold script.\n. Visual confirmation:   (edit Mar 21, new image)\n\n. @edemaine @ylemkimon So far, this PR supports these characters in math mode only. Do you think we should support them in text mode as well? It would make the symbols object substantially larger, perhaps slightly slower.. It turns out that in MathJax, \\mathit{\ud835\udc00\ud835\udc01\ud835\udc02\ud835\udc03} does not override the font inherent in the wide characters \ud835\udc00\ud835\udc01\ud835\udc02\ud835\udc03.  \\mathit{\ud835\udc00\ud835\udc01\ud835\udc02\ud835\udc03} renders just like \ud835\udc00\ud835\udc01\ud835\udc02\ud835\udc03.  I think that's relevant since we're doing this at the prompting of someone who wants to migrate from MathJax to KaTeX. \nAlso, MathJax does support wide characters, such as \ud835\udc00\ud835\udc01\ud835\udc02\ud835\udc03, in both math mode and text mode.\nI haven't yet gotten wide characters to work in XeLaTeX. I don't know if I have a preamble issue or if the editor at ShareLaTeX.com can't deal with wide characters. I'll try a bit more.. Results are in. XeLaTeX (with the unicode-math package) and MathJax act alike in that they both:\n\ndo support wide characters, such as \ud835\udc00\ud835\udc01\ud835\udc02\ud835\udc03, in both math mode and text mode.\nfail to override font of a wide character with \\mathit. \\mathit{\ud835\udd38\ud835\udd39\ud835\udd3b} renders just like \ud835\udd38\ud835\udd39\ud835\udd3b.\n\nI'm going to modify this PR to include text mode. Otherwise, I'm going to leave it alone.. The most recent commit supports text mode. It also deletes the sans-serif characters. No one has asked for them yet, and it will be easier to add characters later than to remove them.  The characters now supported by this PR, in both math mode and text mode are:\n\nA-Z a-z bold\nA-Z a-z bold italic\nA-Z a-z Fractur\nA-Z double struck\nA-Z script. Below is visual confirmation for math mode:\n\n\nNext is visual confirmation for text mode:\n\n. \\mathrm{\ud835\udd04} renders just like \ud835\udd04 in both XeLaTeX and MathJax. \nOn the sans-serif question, I have no strong feelings either way. Just to be clear, I'll point out that the following characters would be easy to code in at this time:\n\nA-Z a-z 0-9 sans serif\nA-Z a-z 0-9 sans serif bold\nA-Z a-z sans serif italic\nA-Z a-z 0-9 monospace\n0-9 bold\n\nAfter @edemaine and @kevinbarabash  have weighed in, I would be happy to follow group consensus and include any or all of those characters in this PR.  Other Latin letters or numerals in the Unicode range U+1D400 to U+1D7FF are missing fonts or font metrics, so the list above is an upper limit for Latin letters.\nI could also add some Greek letters, but the code writing there is a little more tedious. One has to watch out for special treatment of phi, theta, kappa, \\nabla, and \\partial.. Script B, \u212c, is at Unicode code point U+212C. This PR only deals with surrogate pairs in the range from U+1D400 to U+1D7FF.  \nThere are several other gaps in that range. Some of them, like \u2102 \u210d \u2115 \u2119 \u211a \u211d \u2124, are already supported by KaTeX macros.  I can write another PR to cover the other missing characters, but the surrogate pairs seemed like a big enough challenge for this PR.. @ylemkimon Thank you for pointing that out. You are correct. That behavior is contrary to XeLaTex, so I'll look for a way to fix it.. The most recent commit corrects the bug found by @ylemkimon. \\mathrm now renders as it does in XeLaTeX.  Visual confirmation below:\n\nI also added a screenshotter test.. > If you update your PR with those [screenshots] this should be good to go.\nI'm sorry, but I don't know how to do that.. Done.. PR #1162 fixes this problem. It isn't merged into master yet.\n\n. Well, that's disappointing. Obviously my PR needs some work. I'll try to get it working before the next KaTeX release.. @spontaliku-softaria I've pushed a commit to PR #1162 that fixes the issue you found with horizontal alignment relative to an adjacent span.  Your example now renders as:\n\n. I'm out of ideas. If anyone wants to take on this little Chrome nuance, feel free. . Quick CDN propagation is unimportant for function-support.html. For it, I'm content with nearly any CDN.\nQuick CDN propagation will be very important for index.html if we wish to make its revision part of the standard release script. \nWhen jsDelivr is used, how quickly do users see the updated files?. @MartinKolarik Fantastic. I think this PR is a great idea.. Me too. Consistency is good of course. But more importantly, the existing README points to a CDN that takes 2 or 3 days to fully propagate the files.  It's common during those days to get a question on Gitter asking why the release doesn't work.. @youqad Great idea to add this symbol. You beat me to it. In fact, my personal To Do list includes characters: \u2258 \u2259 \u225a \u225b \u225d \u225e \u225f. LaTex package unicode-math supports all of those characters, so XeLaTeX supports all of them.  So does MathJax.\nI have some suggestions that will improve the rendering. And by \"improve\", I am aiming at a rendering similar to what XeLaTeX would provide. It uses font glyphs from mathematical fonts like STIX or Cambria Math. To get a KaTeX macro to render like those, I think we should:\n1. Use \\stackrel instead of \\overset. Then we get relation spacing instead of mathord spacing.\n2. Reduce the size of the upper element.\n3. Reduce the gap between the \"=\" and the upper element.\nWe can get the first two items with these macros:\n// Unicode stacked relations\ndefineMacro(\"\\u2258\", \"\\\\stackrel{\\\\tiny{\\\\frown}}{=}\");\ndefineMacro(\"\\u2259\", \"\\\\stackrel{\\\\tiny{\\\\wedge}}{=}\");\ndefineMacro(\"\\u225A\", \"\\\\stackrel{\\\\tiny{\\\\vee}}{=}\");\ndefineMacro(\"\\u225B\", \"\\\\stackrel{\\\\scriptsize{\\\\star}}{=}\");\ndefineMacro(\"\\u225D\", \"\\\\stackrel{\\\\tiny{\\\\mathrm{def}}}{=}\");\ndefineMacro(\"\\u225E\", \"\\\\stackrel{\\\\tiny{\\\\mathrm{m}}}{=}\");\ndefineMacro(\"\\u225F\", \"\\\\stackrel{\\\\tiny{?}}{=}\");\nThat gives a result like this one:\n\nThat result shows something pretty close to the font glyphs used by XeLaTeX.  I was planning to use the \\lower function in PR #1167 to tighten up the gaps in \u2258 \u2259 \u225a \u225b. That PR is pending review. \nBut I personally am ok with the spacing shown above for \u225d \u225e \u225f. If others agree, those characters could go into this PR and proceed independently of \\lower.. @edemaine Yes, one could use \\raisebox. But some of these characters don't qualify as text, so the macro would have to reset math mode inside the \\raisebox argument.  For example: \\raisebox{$\\star$}. I was hoping that \\raise and \\lower could work without that extra complexity.. In XeLaTeX, one first loads a math font, say \\setromanfont{STIX}. So we can't use precisely the XeLaTeX methods until the KaTeX fonts include glyphs for \u2258 \u2259 \u225a \u225b \u225d \u225e \u225f. I think that the macros above, when adjusted for vertical kern distance, are about as good as we do for now.. This PR does indeed fix issue #1234. That would be enough if issue #1234 were the only problem.\nBut this PR does nothing to fix issue #1153. That issue is mis-named; it's really a vertical alignment problem with \\rlap when it must deal with tall elements.  So PR #1162 adds some struts that will make the HTML bounding box tall enough. When those struts are added, then the CSS top: 0; tactic of this PR is no longer enough to fix the vertical alignment. So PR #1162 applies makeVList to get it all aligned properly.\nThe remaining Chrome horizontal alignment bug in PR #1162 is an odd one. The gap shrinks when there is more math written on the same line.  So the result of  \\frac{a}{b}\\llap| \\sin\\llap|1 \\sqrt{\\mathclap|a\\mathclap|}\\mathclap| doesn't look so bad in PR #1162.\n\nSo maybe I could overcome the Chrome bug by wrapping inside another span?  I dunno. I'll try.. ~~I don't see how this PR could hurt. SVG height is normally set in each instance of an inline SVG. The exception, frac-lines (in v0.9.0-alpha2), will no longer use SVGs if/when PR #1249 is merged. So I think this PR will have no effect. But again, it doesn't hurt.~~. I can confirm both the diagnosis and the proposed solution. And it applies to more than just frac-lines. Other SVGs, like \\sqrt, have the same behavior. \nSo I retract my earlier comment and I very much endorse this PR.  Thank you, @ian-r-rose.. @pzinn I just turned in PR #1256. It should take care of this issue. Thanks for letting us know about it.. Screenshot:\n\n. @ylemkimon You make a good point. I should be more nuanced. So the most recent commit adds the upper element depth to the shift only if: (1) upper element depth > 0.25 em, or (2) the arrow type is a left equilibrium. These are the two cases where we get interference between upper element and arrow.\nFor a visual comparison, the first image is from this PR.  The second is from AMS-LaTeX. In both images, the \"g\" vertical alignment is not adjusted, but the big array is adjusted.\n\n\n. This is an excellent idea. It can take the place of this page, which seems to be un-maintained these days.\nI wonder, though, if the README page is the best place. README already has a lot of information. Maybe a page in the wiki would be better?. That page took its KaTeX from the bower distribution. These days, bower is deprecated and KaTeX now uses jsdelivr for its CDN. So its link to KaTeX is a dead link. I've made a PR to that repository that would update the link. No response.. >  I am observing that the \\mathrlap causes a vlist (for some reason?)\nThe reason is to keep the \\mathrlaped item attached to the baseline. Consider an item in a \\mathrlap that is located on the same line of text with something tall. The \\mathrlap item would align its top to the top of the tall item.\nBy wrapping it in a vlist, I was able to keep it aligned to the baseline. There may be other, better ways to do that. I used vlist because it was easy.. @Danmou,  Thanks for the note. I've just submitted PR #1273, which will fix this issue.. @literallyvoid It's fixed in KaTeX master branch. It is not yet part of a KaTeX release.. Fixed by #1273. . Visual confirmation:\n\n. @edemaine  Good point about the braces. I've removed them. \nRe: unicode-math: Yes, it does support all of the characters in this PR, and applies \\mathrel to each, as one would expect.\nVisual confirmation on the latest commit:\n\n. @kevinbarabash I can confirm that \\underset and \\overset both use the limits structure. However, \\stackrel is done differently and apparently in a more robust manner. I'll see if I can extend the \\stackrel method to \\underset and \\overset.. @pzinn I just turned in PR #1277, which will fix this issue.. Visual confirmation:\n\n. I have never mastered Docker and so am unable to update screenshotter tests. In the past, @kevinbarabash  has been kind enough to update them for the PRs that I submit. In the most recent example, he ran the test; then pasted the two relevant screenshot files into a comment on the PR's comment thread.  I took the png files and copied them into the screenshotter folder in that branch.\nThat could work again if anyone would care to help me out.. @edemaine  The new screenshots look perfect to me. Feel free to proceed with final approval and a merge.. @rokyed Does this sort of behavior exist in any LaTeX packages? If not, I suspect you will be unsuccessful at getting this approved and merged into KaTeX master.\nI see what you're trying to do. Maybe an add-on in the Contrib folder would be appropriate.. Yes capital letter eta, code point U+0397, is supported by the unicode-math package, so it is a legitimate target for KaTeX.  So are the other Greek letters.\nBut the KaTeX fonts do not contain a glyph at code point U+0397. So instead of using symbols.js, it would be cleaner to write it as a macro, say:\n~~defineMacro(\"\\Eta\", \"H\");~~\ndefineMacro(\"\\u0397\", \"H\");. I hit the Comment button on that macro too quickly. As @edemaine points out, unicode-math does not support \\Eta; it supports \\mupeta.  That seems odd to me, and I've been avoiding the unicode-math mappings that seem odd. \nI think @pzinn had the right idea originally. Just support the Unicode character and omit the TeX \\xxx equivalent.  So now my macro suggestion is:\ndefineMacro(\"\\u0397\", \"H\");. @pzinn You're right about the Greek caps being non-italic, of course. Silly error on my part. Thank you for pointing that out. I'll fix it.. Well in general, \\mathit and mathbf don't stack the way that \\textit and \\textbf will. Those LaTeX font stacking nuances mean that the results of PR #1284 will not behave exactly like an actual glyphs in the KaTeX fonts. In that regard, @pzinn is correct. Adding glyphs to the KaTeX fonts would result in better behavior.\nWhich would mean a breaking change if PR #1284 is accepted now but a font glyph gets added later. So it would be entirely appropriate to deny PR #1284 and wait for someone to change the font. An aversion to breaking changes is what delayed Unicode characters in general for 18 months.\nI don't do fonts. PR #1284 was my attempt to be helpful, but I realize that it has flaws and I'm not terribly attached to it. We have many outstanding issues more important than these particular characters.. I think this issue was addressed by #1285.. Visual confirmation:\n\n. Visual confirmation:\n\n. Well, I'm looking for something that works in both math mode and text mode. \\mathrm doesn't work in text mode.  We could use textrm in place of \\rm. I don't have a strong preference between those two. \nWhich would you prefer?. Done. Thank you for pointing that out.. > Would it be better to add them as symbols\nYes, it would be better to add them as symbols. But in order for that to work, KaTeX font glyphs and font metrics are needed.  Otherwise, the code in buildCommon.js will not work.\nPerhaps it would be better to close this PR and wait until someone adds the glyphs to the fonts. I don't personally think that these particular characters are the most urgent issue we have right now.. > Given that I already merged #1283 \nI would be happy to turn in a PR that reverts #1283. I agree that it would be good to get another opinion first.. Closed in preference to #1285.. @edemaine You beat me to this PR by about ten minutes. I realized this was possible about an hour ago. \nMy apologies to  you and @pzinn for wasting your time on a detour. Your approach here is much better.. @edemaine  I don't believe that I can do a final review. I never did accept @kevinbarabash's invitation to collaborate in this repository, out of fear that my poor Git skills would cause some catastrophe. And it looks as though that invitation has now expired. So I remain a contributor.\nFor what it is worth, I've looked at your code and it looks perfect to me.. Very, very cool stuff.  I do have some questions. \nWill \\\\ be available as a mandatory line break?\nIn LaTeX, there are some nuances about where line breaks can occur. Some examples:\n| Item                                                     | Line break allowed |\n|:-------------------------------------------------------------|:-----------------------|\n| skips                                                        | yes                    |\n| kerns                                                        | no                     |\n| \\, or ~                                                  | no                     |\n| Inside boxes, including \\hbox, \\raisebox, or \\colorbox | no                     |\nDo you have any plan in mind for incorporating these nuances? Is it a matter of going through the existing code and setting an allowbreak flag or nobreak flag? . We'll have to develop some more sophisticated code for spaces. Directly after a line break, an \\hspace should be eaten but an \\hspace* should render its space. Our code will need some work in order to make that happen.. @edemaine You're right. I also did some testing and I can confirm that line breaks are not prevented in math mode by \\,, \\, \\space, or by kerns. That's terrific. It makes your work even better.\n~ does prevent a line break in math mode. So does \\nobreakspace.\nAlso, boxes, e.g. \\raisebox prevent any line breaks. Inside a box, even \\\\ will fail to produce a line break. With boxes, can we do something with CSS? Something like a nobreak !important rule?. That's odd. I get no line breaks when I try:\n\\(\\aaaaaaaaaaaaaaaaaa+~aaaaaaaaaaaaaaaaaaaaaa+~aaaaaaaaaaaaaaaaaaaa+~aaaaaaaaaaaaaaaaaaaaaaa+~aaaaaaaaaaaaaa \\)\nIt seems that the ~ directly after a bin prevents the line break that would otherwise occur.\nI'm glad to hear about the boxes. . @edemaine In your most recent commit, you ensured that glue will stay with the operator. Could you make an exception for \\hspace*? It exists to provide a space at the start of a line after a line break.. Cool! This is really coming together well.. My first guess is that the base element is being shifted from the baseline to a point where it is centered on the math axis. And my second guess is that we can fix that by changing line 75 in op.js from \nif (base instanceof domTree.symbolNode) {\nto \nif (group.value.symbol) {\nIn fact, that line actually did read at one time exactly the way I am proposing. Some one had to have changed it and I don't know why. So before I charge in and change it back, I want to think a bit about why they may have done that. Give me a day or two.. On the horizontal spacing question, LaTeX applies \\binrel to \\overset. \\binrel varies its spacing depending on whether the argument is a bin, a rel, or an ord atom.  I'll try to do something similar.. Maybe it was a different line that changed. I still think that line is the most likely way to fix this problem. I'll do some testing.. Fixed by #1290. Thanks for the bug report!. Results:\n\n. I'll be curious to look at all the other screenshotter tests. The change I made in op.js should not change anything but \\underset. We'll see if that's true.. The screenshotter tests were informative, as I suspected. TIL: Early versions of the op code would vertically shift big operators, e.g. \\int and \\sum. Later, the criterion of what to shift was modified by PR #745 in response to issue #726. That allowed the creation of math ops, such as \\coloneqq via macro. That is, op shifted not only big operators, but anything that met instanceof domTree.symbolNode.\nAnd that's how the \\underset acquired its wobble. It was being shifted to center on the math axis.\nThe most recent commit in this PR adds a new flag: suppressBaseShift. It is applied only to \\overset and \\underset. The rest of the single character mathops are shifted, as per PR #745. The Mathop screenshotter test now works.\nI'll need some help to get updated screenshots of \\overset, but otherwise this should be good to go.. @edemaine The screenshot test looks good to me. Thank you.. Well, the arguments passed to this function are ParseNodes, not DomNodes, so getTypeOfDomTree is not helpful without a lot of pre-processing. That seems kind of wasteful. Let me suggest that the base of a \\overset can fall into three categories:\n| Category                           | Example                           | We want mclass to be: |\n|:----------------------------|:----------------------------|:--------------------------|\n| single symbol                    | \\overset ? =                   | baseArg.type              |\n| group containing a single symbol | \\overset {?}{=}   | baseArg[0].type          |\n| everything else                  | \\overset ? {{a+b} \\div c} | mord                     |\nIf that's true, then we can get the needed information with:\njs\n        let atomType = \"\";\n        if (baseArg.type === \"ordgroup\") {\n            atomType = baseArg.value[0].type;\n        } else {\n            atomType = baseArg.type;\n        }\n        if (/bin|rel/.test(atomType)) {\n            mclass = \"m\" + atomType;\n        } else {\n            mclass = \"mord\";\n        }\nYes, what I've written is a bit of hack, but after looking at that LaTeX code, I don't feel too bad about that. And this code stays local and fast, without excursions into buildHTML. \nWhat do you think?. > some confusion about the cases\n\nthe code you posted is exactly what we want.\n\nBetter lucky than good, eh?\nI'll make the change and commit.. That's reasonable. I added a comment.. Yay! That solves a mystery. I couldn't figure out why \\cancel wasn't working when adjacent to \"+\". So this addresses, at least in part, issue #1080.. @BenjaminHoegh , If you are not using the Auto-render extension, then the syntax you need is katex.render, not renderMathInElement\nIf you are using the Auto-render extension, then keep in mind that it always looks for math delimiters like $$...$$ or \\[...\\].  This is unlike LaTeX or MathJax, in which an environment is by itself enough to initiate math mode. The Auto-render extension needs the delimiters, even for environments.. @edemaine  I'll look into it.. Visual confirmation:\n\n. I'll need some help to generate new screenshots for HorizontalBraces. The bug is visible right there in the old screenshot.. Here's how they look:\n\n. @ylemkimon GitH(Hub) has been acting that way since I did manual edit on a merge conflict in the \\ll PR. As soon as this PR and PR #1162 are merged, I'll dive in and fix my repository. Until then, I don't want to make any rash moves.. @edemaine Later today, I'll add the double \\hline. As you suggest, today's effort will not interrupt any vertical lines.  I may also add a dotted \\hline.\nNo promises on \\cline. My currrent \\hlines are not done column by column. I just let the browser stretch each one the full width of the array. In order to implement \\cline, I would have to work my way deeper into the array parser. That may not happen in time for the next release.. Double \\hlines:\n\n. Now I think this is ready for review. I will also need some help to create screenshots for Hline.. There's no point in cutting it close. One of the arrays was redundant and I took it out.. And now, with multiple \\hlines:\n\n. Once again, I'll need help to generate a screenshot for HLine. Sorry to be a burden.. Thanks, @edemaine!. A release would also benefit from #1162.. @zopyx KaTeX contains a SVG of a very long radical. It places that SVG into a span with CSS that is set to:\n1. Match the width of the argument (in your case a_2 + b_2).\n2.  Hide the overflow of the long SVG.\nYour PrintCSS tools appear to vary from browser behavior in either item 1 or item 2. \nKaTeX fractions have a similar CSS. Do they work?. If you find a similar tool that does work, let us know. That could be a handy thing to have.. @freemaths Sometimes one can hack a solution together from spare parts:\n\n. @kevinbarabash Is \\longdiv something that belongs on my To Do list? We could use a method similar to KaTeX stretchy radicals.. I'm thinking only of the symbol for now. Perhaps the steps can come later if there is much demand.. The Polynom package does polynominal division. It's rendering of the long division symbol is poor. Here's how it renders \\polylongdiv[stage=1]{X^3+X^2-1}{X-1}\n\nLike package longdiv, polynom will render all the steps, at least if the polynomial is in one variable. And it does factorizations and remainders and other tasks, as well. So there's a lot to it. I don't know if we want to ship that much code for something that may not get much use. Maybe I should supply a \\longdivsymbol for KaTeX core and then parts from the rest of polynom or longdiv could be an extension.\n. @clarcharr  We don't currently have an an equivalent to LaTeX \\renewcommand{\\arraystretch}{1.5}, which would change the line spacing of an entire environment. But you can set extra environment line spacing on a line by line basis, using \\cr[0.3em] as your line separator.. @freemaths I'm afraid that the short answer is no.\nThe long answer is that \\equiv is rendered by calling a font glyph. It's Unicode U+2261, \u2261. In your example, the top and bottom bars of that glyph have happened to fall where they straddle a line between two rows of screen pixels. So the screen renders two gray pixels instead of one dark pixel. There isn't a lot that we can do about that.\nAs future screens get higher pixel density, the problem will go way.. I don't know of any really good solution for this. I suppose you could fudge it up or down a tiny amount by something like: \\mathrel{\\raisebox{1mu}{$\\equiv$}}. But that moves it off the math axis, which can't be a good look. And on screens other than yours, you may be making the problem worse instead of better.. We've gotten complaints about \\equiv rendering from two different people now, so it's clearly a problem. Is it worth using a symbol built up from \\rules?  @mbourne, you could add this to your rendering options:\nmacros: {\"\\\\equiv\": \"\\\\mathrel{\\\\hspace1mu\\\\mathrlap{\\\\mathrlap{\\\\rule[0.65mu]{12mu}{0.72mu}}{\\\\rule[4.14mu]{12mu}{0.72mu}}}{\\\\rule[7.63mu]{12mu}{0.72mu}}\\\\hspace1mu}\"}\nThe dimensions inside the square brackets control the vertical position of each rule. What I've written above matches the dimensions of the KaTeX font glyph, but I find that I get a much clearer line if I change [0.65mu] to [0.6mu].. The rendering option is something that @mbourne can do right away. Is it something we should do in KaTeX master?  Also, we should probably add a min-height: 1px; CSS rule to class .rule, similar to what we've recently done for fraction lines. That would give more certainty of clear lines.. The drawback is that such a macro pretty thoroughly obfuscates the MathML for \\equiv.. We'll never agree completely on all matters. Sometimes I think that we need a documentation page that describes a set of KaTeX customizations and hacks. Then each website could customize KaTeX per local preferences.  Some people could stick with TeX purity. Others could opt for thicker, bolder renderings.\nMaybe that page would be best at a separate domain or maybe we could add a \"Customization\" page to the Configuring KaTeX section of the docs. Such a page could cover several topics:\nCustomizations to get bolder, thicker renderings.\n\nThe CSS hacks that @mbourne describes above. \nA macro that uses  \\genfrac to define a version of \\frac with a thicker fraction line.  \n\\pmb\nAfter PR #1620 lands, a set of images that could be swapped in via macro for particularly troublesome glyphs such as \\equiv.\n\nFont size\n\nThe familiar CSS customization.\n\nMacros\n\nLong division\nPearl's notation for conditional independence, . >  if you are documenting with more then just a couple markdown files\n\nThe function support page is HTML. I may be biased, but I think it is pretty valuable and also hard to reproduce in markdown.. It depends on the particular markdown implementation. Some of them enable $\u2026$ or $$\u2026$$ as math delimiters. But tables are pretty restricted in things like github markdown or stack overflow markdown. \nSome other markdown flavors follow Gruber's original idea and allow HTML tables within markdown. Those might work out.. Let me suggest a tactic to overcome this. Amend the macro and wrap a mathrel around the whole thing. Then add a white-space: nowrap rule to the CSS for mrel.. @edemaine If you can find some way to land #1162, then I would be happy to take on these relations.. Fixed. by #1372,. The {split} environment would certainly be useful. Without {split}, one can usually hack something together with {aligned}, \\phantom, and \\mathllap, but the same thing is easier and cleaner with {split}. We should definitely have that on our list of things to do.\nYou titled this issue by requesting {split} and {align}. I'm confused by the {align} part because the only difference between {align} and {aligned} is that {aligned} can be used only when LaTeX is already in math mode.  KaTeX starts out already in math mode, so one would nest one {aligned} inside another {aligned}. The outer environment doesn't have to be {align}.\nOr maybe you meant something else. {equation} perhaps?. I'm working on a test page with version 0.10.0-beta, and I haven't yet gotten \\gdef to work as I think it is intended. Here's my HTML:\n<p>\\( \\gdef\\foo{\\sum} \\foo  \\)</p>\n<p>\\( \\foo \\)</p>\nThe first paragraph works as expected. The second paragraph returns a parse error: \"Expected 'EOF', got '\\foo' at position 2\".\nShould the second paragraph render a \\sum?. @edemaine Yes, that works! We should revise the documentation for auto-render.\nBy the way, this whole global macro thing is awesome.\nI also tried \\newcommand, and it does not preserve macros from expression to expression.  I take it that is the intent?. One last thing while I'm testing 0.10.0-beta:  The KaTeX README page, the auto-render README, and the KaTeX demo page all currently point to 0.10.0-alpha, not beta. Which is weird because at least two them pointed at -beta yesterday.. Okay, thanks for the explanation of \\newcommand. It will help me to get the function support page correct. . Some LaTeX functions work only inside \\text{\u2026}, like \\text{\\textdollar}. \nKaTeX tries to emulate LaTeX pretty faithfully, as in this case.. I'll revise the Function Support page, so that \\textdollar will read \\text{\\textdollar}.. Yep. There are several entries that should get the \\text{\u2026} treatment. Thank you to @danita for pointing it out.. Function support page is now updated to read as \\text{\\textdollar}. Closing this issue.. It also occurs in v0.9.0.. But nested \\frac works properly. . We're repeatedly applying a size multiplier of 1/0.7 when we should only do that once. Behavior becomes better in this example if in genfrac.js we change line 78 from\n} else if (group.value.size === \"text\") {\nto \n} else if (group.value.size === \"text\" && style.size < Style.TEXT.size ) {\nI think that also addresses the other possible combinations of style and size. But I would want to think harder about that before committing.. Fixed by #1378, so closing the issue.. @edemaine Thank you for the review. Every time you've reviewed one of these, it has made the document better. I'll pick up the comments this evening, but first I want to ask you:\n\nI wrote \\gdef into the macro section. Is that appropriate at this time or is it premature?\nDo you agree with the way I addressed the Arabic/Persian plugin?. @edemaine One more question. Previous versions of the function support page contained: \n\nFunction | Produces \n-- | -- \n~ | non-breaking space \n\\space | non-breaking space \n\\nobreakspace | non-breaking space \n\\space | non-breaking space\nIn your new line break code, I recall that you made ~ and \\nobreakspace into no-break spaces. What about \\space and \\<space>? Do I need to change those?\n. Answering my own question:  I've done some testing. Neither LaTeX nor KaTeX's new line break code treats \\space or \\<space> as a no-break space. I had incorrect information in previous versions of the function support page.  I'll change it.. Don't merge this yet. I'm investigating something.. I have found this odd thing, and I'm not sure if I should raise a top-level issue.  When I first wrote the function support page's CSS, I wrote a rule:\n.katex-html {margin-top: 0.3em; margin-bottom: 0.3em;}\nBy that means, I got some extra row spacing in the tables, but only where KaTeX had run a script, which is exactly what I wanted. In this release, that margin was ineffective and the rows were squashed together. The new line breaking code had removed a katex.less rule that previously said .katex-html {display: inline-block;} and instead made the first child of .katex-html into an inline-block. And that made my margin ineffective.\nIn my latest commit, I've augmented the rule in the function support page. It now reads:\n.katex-html {\n  display: inline-block;\n  margin-top: 0.3em;\n  margin-bottom: 0.3em;\n}\nYou see, I reinstated the display: inline-block; at the .katex-html level. And the row spacing is back as it was.\nSo I've found a breaking change, but it affects only people that have done something sneaky and underhanded. I think probably that the .katex-html {display: inline-block;} rule should be reinstated. It doesn't interfere with any line breaking.\nHow about it? Should I create a top level issue? . @HosseinAgha Thanks. I've commented out the sentence on your plug-in. We'll include it in a later release.. This should now be ready to go.. Done. Thanks for the comments. This should be good to go.. Fixed by #1371.. @OnlineVagrant The alignedat environment can do this sort of thing. Think of the ampersands as being numbered 1, 2, 3. The odd numbered ampersands will be the alignment points. The even numbered ampersands are like a balloon that expands till enough space is created to enable the alignment.\n\n. Correction. It's the alignedat environment, not aligned.. Not at this time. The function support page lists all the functions, but it doesn't explain much.  We try to emulate LaTeX pretty closely though, so LaTeX documentation would be helpful. Good places to start would be here, here, and here.. KaTeX has, at least so far, concentrated on bringing TeX math to the web, not all of TeX. So things like text mode justification, line breaks in text mode, all that, are not supported. You can probably hack something together with \\begin{array}{l} but it will be awkward.\nRe: end of proof position: KaTeX release 0.10.0alpha just introduced \\tag.. Ah. Try \\tag*. It's also new in release 0.10.0-alpha and it omits the parens.. @OnlineVagrant If your markdown implementation allows you to write a <div>, then something like this:\n```HTML\n\nTheorem 1 (Pythagoras) Let $a$, $b$, and $c$ denote the length of the sides\nof a right triangle, i.e. of a triangle with one angle equal to 90\u00b0. Without loss of \ngenerality, assume that $a \u2264 b \u2264 c$. Then\n$$a^2 + b^2 = c^2$$\n\n```\n... should result in something that resembles:\n. > This should fix the italic, script, etc. unicode chars right?\nYep. Anything with a high surrogate \\uD835. . ~~Note, I haven't tested this. The npm start method doesn't test the auto-render extension.~~\n~~Well, I have written the same code in a version of auto-render.js that webpack had finished building. And that tested fine. But I haven't built KaTeX after editing the source version of auto-render.js. Any typos are potential bugs.~~. Update. Now I have done a local build from the source code and tested the result. It works fine and it does in fact resolve the \\\\[ bug when inside \\(  \\) delimiters.. @InThisStyle10s6p Thanks for the note. You're right; these characters belong in KaTeX core. I'll write up a PR to do that. I see a couple more relations that I can pick up at the same time.. Fixed via #1389.. @edemaine That's great. Thanks for the help.. @gkutiel That page is using katex.js from release 0.10.0-alpha, as you say, But it is using katex.css from release 0.9.0.  So the CSS rule for overline, fraction lines, etc is missing.\nGet the CSS updated and you should be fine.. Apparently the suggestion for a CSS upgrade worked. The OP's test page now renders \\overline correctly. So I'm closing this issue.. The screenshot below compares a \\frac to a \\cfrac.\n\n. @zacharyrs I agree. This is seriously cool. \n@edemaine I took a look at the arydshln package this morning. Its dashed lines have a \\dashsegment and a \\dashgap and the default is 4pt for both segment and gap. Both are longer than what Chrome provides for CSS border-style: dashed, so I tried to reproduce the arydshln line style another way. I was not happy with my results.\nThe CSS border-style: dashed does not provide for custom dash segments or gaps. In order to get customization, I tried border-image. I was successful in getting segment lengths and gap lengths that match arydshln, but at a cost. It's an image, and it's a thin one, so it is prone to the same Chrome disappearing line problems that we have struggled to overcome with fraction lines.\nPersonally, I'd rather have sharp, reliable CSS border-style: dashed than have an exact match to arydshln segment lengths. I think this PR should proceed as is. We can always change the line type later if we find a way to do it reliably.. > Maybe the main TODO would be similar horizontal dashed lines.\nAgreed. arydshln has a \\hdashline function. I'll see if I can add that to the \\hline work that we did recently.\n. > it's probably a bit much (and difficult) to go to SVG for this.\nI was to use border-image: repeating-linear-gradient, so it was only two lines of code. It's not difficult to do. The problem is that I just don't trust browsers with an image this thin. Span borders are the way to go.. @zacharyrs  You have to open an account with CircleCI before they will show you the artifacts. . > why not add [separators] to the various matrix types?\nWe did recently add \\hline and it works in all the environments. As to vertical lines, we don't put them into the various matrix types because AMS-LaTeX doesn't put them there.  You can insert vertical lines with the array environment, as in:\n\n. @zacharyrs, Congratulations on this PR. It is seriously cool.\nNext, has everybody noticed that since the release of v0.10.0-alpha, no one has opened an issue to say that fraction lines are disappearing? No one has complained that lines are gray with fuzzy edges instead of black and sharp? It looks like we have finally overcome browser rendering problems with these thin lines.\nThat\u2019s great news! We should celebrate that!\nAnd so I want to want to advise that we avoid images, including SVGs, for separator lines. We tried SVGs, configured three different ways, in release 0.9.0-alpha2, release 0.9.0-beta, and release 0.9.0. We got user complaints on every one of them, on both fractions lines and vertical separator lines. SVG lines are better on retina screens than on low-pixel-density screens, but there are a lot of low-density screens still out there.\n@zacharyrs, I think your PR is awesome just the way it is. I\u2019d like to spare you from wasting the time that I wasted on SVGs for separator lines and fraction lines. Someday, when everybody has a high-density screen, we can revisit this decision. Until then, let\u2019s allow your awesome work to go on being awesome. Let\u2019s use the lines as they are now.. Gradients you can at least do quickly and get it out of your system. You seem like the sort who wants to try things for themselves. (That's good)  But the problem is that both SVG's and gradients are images, not borders. Browsers will apply anti-aliasing to images, unlike borders. These lines are just the wrong width for anti-aliasing. \nConsider a separator line located exactly on the dividing line between two columns of pixels. These lines are thin enough that they will cover only part of the left pixel and part of the right pixel. Then anti-aliasing kicks in and displays both pixels in gray instead of black. Then long-time users open issues, like #1173.\nKaTeX does use some SVGs and we apply a trick that works pretty well on retina screens. But it's not enough on long lines on a low-pixel-density screen. There just too much gray edge there and it's too noticeable.. We've also tried SVG attribute shape-rendering=\"crispEdges\". What happens then is that some of those gray lines disappear completely.\nSo if you want to check it out, do so. But do so in a way that quickly tests a line on a low-density screen. Don't invest a lot of time before you do that test.. > Also, with regards to borders, they do vanish when less than 0.5px coverage occurs. \nKaTeX now has a min-width: 1px CSS rule on the spans that have these borders. That rule has prevented vanishing at text sizes big enough to read. I hope that continues.. > a very thin background image\nAnother lesson learned from sad experience: At least some browser default settings for printing a page will not print background images. So we've changed all our background images to inline SVGs. \nI believe that border-image: repeating-linear-gradient will print, but should be checked before it goes into production.. New and improved.\n\n. Theres a discrepancy in the gap between lines 2 and 3. Could that be due to the problem with \\sout?. For what it's worth, here is the MathML from (1) font-based \\notin and (2) macro-based \\notin.\n```\n\n\u2209\n\n\n\n\n\u2208\n\n\n\n/\n\n\n\n\n\n```. Now that would be cool.. I like the easy ones.. Here's how they look:\n\n. Closing for repository repair. Will reopen shortly.. Sorry. I ran git stash apply while in the wrong branch and thoroughly tangled things up. So I've completely over written that repository with a replacement. The widecheck work is now in PR #1406.. In TeX, \\hbox and \\vbox, like all TeX boxes, put their contents into text mode. We want something that can handle math. \nTo avoid future confusion, maybe we should call these elements \\mhbox and \\mvbox  instead of \\hbox and \\vbox.. @kevinbarabash You're welcome. Since \\hline and \\hdashline are now in the array screenshot, maybe we could delete the \\hline screenshot?. > somewhere saying that the boolean stores whether it's dashed.\nThat's on line 53 of array.js. I couldn't think of a more prominent place to put it.\nI'm picking up rhe other comments in the upcoming commit.. Wow. That HTML is a lot simpler than what we get now from makeVList. \nIE apparently has a number of flex bugs. Looking at the list, though, they don't seem much more difficult to work around than the stuff that makeVList currently does to work within Safari.. This is a good idea. @kevinbarabash left it unprotected at my request, so that I could update the function support page without a review in the same manner that I had previously updated the wiki. \nBut I have never done a non-reviewed push to that page, and the reviews have improved the document.. I fought a battle with flow and it kicked my butt. I retaliated with liberal application of $FlowFixMe. If you want tighter type checking on this work, then someone else will have to do it.. > Could you split this up into two PRs?\nSure. It'll be a few days before it's ready. . @kevinbarabash If the first PR acts to refactor genfrac.js by extracting htmlBuilder and mathmlBuilder, do you want to finish the review on that PR before I submit the second PR, with functionality additions?  A sequence like that would minimize merge conflicts.. > when the macro would suffice?\nThere's a lot of merit to that argument. There's also something to be said for having a list of all the delimiters in one place. I don't have strong feelings either way. I chose the redundant code that came last chronologically. . Okay, I'll put the macro back and remove the redundancy in delimiter.js and delimsizing.js. Are there any other delimiter rearrangements needed?. I've now reverted the macros and removed redundant code from delimiter.js and delimsizing.js. Here's confirmation that [, ], \\lbrack, and \\rbrack still work, unsized, with \\big, and with \\left:\n\n. @ylemkimon Those two lines of code need to stay there, or else \\left [ and \\right ] will not work. (I tested that.) The code in delimsizing.js is pretty tightly bound to symbols.js.  . > isn't macro definition redundant?\nThat was my belief at the start of this PR. But @edemaine has found a quirk involving text mode that makes the macros non-redundant. So the macros stay. I've removed as much code as I can without breaking something.. No, the symbol definitions cannot go. If they are deleted, then \\left and \\right stop working for[, ], \\lbrack, and \\rbrack.\nIn delimsizing.js, the \\left and \\right functions each make a checkDelimiter(...) call, which goes through a long and winding path to verify type via those two lines of code.  The typing system doesn't understand that the call could be coming from a macro. It assumes that the call is coming from symbols.js.. > we could have just added lbrack and rbrack as text symbols too...\nThat would have avoided the sort of confusion we're going through right now. Maybe it's still worth doing to avoid future confusion by others.. Here's how \\pmb compares to regular math.\n\n. IE9 doesn't support CSS flex either, but @kevinbarabash has started to move in the flex direction. I expect that KaTeX will, in the not too distant future, deprecate IE9.. \\pmb is another function that applies \\binrel spacing to the result. I don't know a good way to do that in a macro. If not for that, the rest would be easy to do in a macro.. > the rest would be easy to do in a macro.\nAgain, with an exception for the MathML. The current PR provides a reasonable MathML. A macro with three copies would be pretty well obfuscated.. @ylemkimon Why is this PR labeled as \"blocked\"? I don't think it is blocked. The \\binrel requirement makes this PR unfeasible as a macro regardless of the status of PR #1454.. Okay, now \\pmb is blocked by #1487. That was fast.. @edemaine  Not a problem. \\pmb will be a pretty simple macro to write given the new tools.. The latest commit changes \\pmb to a macro. A big thank you to @edemaine, who made macros capable of dealing with \\binrel and improved MathML.. I agree that the new screenshots look better. What's weird is that the Chrome screenshot failed but Firefox passed.. > lists with spaces between the items\nmakeVList is used, not just for things stacked above one another, but also for overlays, as in \\cancel, \\bcancel, \\xcancel, \\sout, \\boxed, \\colorbox, \\fcolorbox, \\hline, and \\hdashline. These are cases where \"individualShift\" makes the arithmetic clearer in the code body and shifts the complexity to inside makeVList. I would hate to lose that.. Comments are picked up.. @bpiwowar, You make a strong case that U+2016 should be the Unicode code point used for \\lVert. Unfortunately, the KaTeX fonts do not contain a glyph at code point U+2016. So the change you have proposed to symbols.js is insufficient by itself. As submitted, this will just cause KaTeX to issue a console warning that font metrics are unavailable for \"\u2016\", and then it will render a glyph from some system font, not the KaTeX fonts.\nFor this to be complete, one would have to change symbols.js, as you have done, and also add a glyph to the KaTeX_Main-Regular font in the KaTex font submodule.. @bpiwowar, If your aim to make U+2016 effective as an input character, then you could write a macro:\ndefineMacro(\"\\u2016\", \"\\\\Vert\");. @OnlineVagrant  KaTeX does not support Unicode character \"\u2205\", at least not at this time.\nThere are some Unicode symbols whose mappings are ambiguous and this is one of them. Should \"\u2205\" map to \\emptyset or \\varnothing? We're not sure, and we don't want to get it wrong, then have to do a breaking change later. So we have avoided this character, at least for now.\n\\emptyset and \\varnothing both work, of course. . Here's a screenshot:\n\n. I submitted this PR too soon. It doesn't position sub elements correctly. I'll fix it.. There. I've got the sub fixed and tests are in. This is ready for review.. > this is better b/c it should save space.\nYes, it will save some space. That comes at the cost of several exceptions cluttering up the code. I would be happy to see someone come along and replace this with font glyphs.. I liked the look of the MnSymbol ovals. Nicely curved, not too pinched at the end. So I started with its (public domain) path geometry. Of course, MnSymbol has different font glyphs than KaTeX, so I had to stretch the Size2 ovals and shrink the Size1 ovals. I think they came out pretty well.. @rrandallcainc, I can speak to motivation for two of the new struts. \n\n\\cfrac adds a strut to ensure extra space in the numerator. This is done to emulate LaTeX, which does the same thing. PR #1392.\nAnother strut is now in the mathrlap, mathllap series. This one overcomes a rendering bug. These functions employ a span with position: absolute nested inside a span with position: relative. When elements taller than 1em are lapped, the strut ensures that the HTML bounding box is tall enough to contain the subject matter. PR #1251.\n\nI haven't tried to access overall expression height, but I can see how that would be useful.. To test this PR, I have made four modifications to the code of mhchem.js, for coordination with KaTeX:\nFirst, the MathJax wrapper is replaced with a wrapper that includes callbacks from KaTeX .__defineMacro:\n```\nkatex.__defineMacro(\"\\ce\", function(context) {\n  return mhchem.expand(context.consumeArgs(1)[0], \"ce\")\n});\nkatex.__defineMacro(\"\\pu\", function(context) {\n  return mhchem.expand(context.consumeArgs(1)[0], \"pu\");\n});\n//  Needed for \\bond for the ~ forms\nkatex.__defineMacro(\"\\tripledash\", \"\\vphantom{-}\\raisebox{2mu}{$\\mkern2mu\"\n  + \"\\tiny\\text{-}\\mkern1mu\\text{-}\\mkern1mu\\text{-}\\mkern2mu$}\");\n// Main object\nvar mhchem = (function () {\n  var chemParse = function (tokens, stateMachine) {\n    // Recreate the argument string from KaTeX's array of tokens.\n    var str = \"\";\n    for (var i = tokens.length - 1; i >= 0; i--) {\n        str += tokens[i].text;\n        if (tokens[i].text.charAt(0) === \"\\\") {\n            str += \" \";  // Separate functions from text.\n        }\n        // Eliminate spaces between any function and {\n        str = str.replace(/\\s(?={)/g, \"\");\n    }\n      var tex = texify.go(mhchemParser.go(str, stateMachine));\n      return tex;\n  };\n\u2026\n\u2026 existing code, mostly unchanged\n\u2026\nreturn {\n  expand: chemParse,\n}\n})();\n```\nSecond, I replaced \\rlap and \\llap with \\mathrlap and \\mathllap.\nThird, I modified four lines of code in order to change \\raise to \\raisebox.\n\"~-\": \"{\\\\mathrlap{\\\\raisebox{-.1em}{$-$}}\\\\raisebox{.1em}{$\\\\tripledash$}}\",\n      \"~=\": \"{\\\\mathrlap{\\\\raisebox{-.2em}{$-$}}\\\\mathrlap{\\\\raisebox{.2em}{$\\\\tripledash$}}-}\",\n      \"~--\": \"{\\\\mathrlap{\\\\raisebox{-.2em}{$-$}}\\\\mathrlap{\\\\raisebox{.2em}{$\\\\tripledash$}}-}\",\n      \"-~-\": \"{\\\\mathrlap{\\\\raisebox{-.2em}{$-$}}\\\\mathrlap{\\\\raisebox{.2em}{$-$}}\\\\tripledash}\",\nFourth, I simplified the code for the reaction arrows, since KaTeX provides a full set of extensible arrows and work around hacks are not needed.\n'arrow': function (buf) {\n        buf.rd = texify.go2(buf.rd);\n        buf.rq = texify.go2(buf.rq);\n        var arrow = texify.arrows[buf.r];\n    if (buf.rq) { arrow += \"[{\" + buf.rq + \"}]\"; }\n    if (buf.rd) {\n      arrow += \"{\" + buf.rd + \"}\";\n    } else {\n      arrow += \"{}\";\n    }\n        return arrow;\n      },\n      'operator': function (buf) { return texify.operators[buf.kind]; }\n    },\n    arrows: {\n      \"->\": \"\\\\xrightarrow\",\n      \"\\u2192\": \"\\\\xrightarrow\",\n      \"\\u27F6\": \"\\\\xrightarrow\",\n      \"<-\": \"\\\\xleftarrow\",\n      \"<->\": \"\\\\xleftrightarrow\",\n      \"<-->\": \"\\\\xrightleftarrows\",\n      \"<=>\": \"\\\\xrightleftharpoons\",\n      \"\\u21CC\": \"\\\\xrightleftharpoons\",\n      \"<=>>\": \"\\\\xrightequilibrium\",\n      \"<<=>\": \"\\\\xleftequilibrium\"\nI\u2019ve done a local build with those changes and the code in this PR. With that, I can reproduce every formula on the mhchem Manual page.\nThe code here is only a suggestion. @mhchem owns this work and he can adopt it, change it, or discard it just as he chooses.. Screenshots:\n\n\n\n\n\n\n. @mhchem That sounds very reasonable to me. Let's give @kevinbarabash a chance to review this PR. If he approves, then I'll work up a PR to create an mhchem extension arranged in a manner similar to copy-tex. After I've written the first version of the extension, you can then maintain it.. The latest commit moves all the code from macros.js to mhchem.js.  Now this PR makes no changes whatsoever to core KaTeX. All the code is in the extension. Also, no rendering options need be defined by a web site administrator. All the macros are defined in mhchem.js. \nThank you to @ylemkimon and @edemaine for instruction on how to better arrange things. It's a better PR now.. The KaTeX linter says that nearly every line of mhchem.js has a problem. Acturally, mhchem.js is written to style standards that are good, but different than the KaTeX standards. Is there a way to modify the eslint script that makes an exception for the mhchem extension?. > Why is mhchem.min.js in the repo? \nI'll go further. There is no particular reason for mhchem.js to be in the KaTeX repo.  @mhchem could take possession of the mhchem.js file, keep it somewhere in https://github.com/mhchem/ and push it to a CDN. It would run, right now, with no revision needed to KaTeX.\nIn the KaTeX repo, there would still be a mhchem entry in contrib, but it would contain only a README page that pointed to mhchem.min.js on its CDN. I'd also add \\ce and \\pu to the KaTeX function support page.\nIn that arrangement, there are no lint issues, no licensing conflicts, and @mhchem gets to keep control over his code.\nComments?. > main mhchem module being \"off site\", and just the KaTeX-related tweaks being here.\nThe previously existing version of mhchem.js is a single file that contains a fair amount of MathJax-specific glue code. It turned out to be fairly easy to remove those parts and replace with code that ties into KaTeX's defineMacro().  But there were no \"main mhchem\" files that contain non-MathJax material. \n\nPersonally, I serve KaTeX files from my own server. \n\n@mhchem makes the mhchem.js file available in the https://github.com/mhchem/ repo. It's just as easy to download them from there as from here. And we could write a link into the KaTeX contrib/mhchem README page .. > It's your decision where the files live.\nSo I will confess a personal interest. We now have a mhchem.js that works nicely with KaTeX. We've completed the part of the job at which I am any good. As soon as we move away from Javascript or CSS and into infrastructure, then we move into areas of which I know very little. And so my personal interest is that any path is okay, so long as someone else does it.. > Are you sure that [Recreate the argument string from KaTeX's array of tokens] really works correctly?\nYou're right.  There's a bust there. context.consumeArgs eats spaces that mhchem treats as significant. \n~~I think we need to write  a new context.argString(\u2026) method.  As a argument, it would take a number that indicates the number of macro arguments. It would return an array of strings, one for each macro argument. It would preserve the spaces.~~\n~~@edemaine You've done most of the development lately in MacroExpander.js. Do you mind if I take a crack at this proposed method or do you wish to reserve that to yourself?~~\nUpdate: The latest commit checks each token's loc and pads with spaces when needed.. @ylemkimon Thanks for the tip! The latest commit does indeed check each token's loc and it works like a charm.. @ylemkimon You're right. I started thinking about this quite awhile ago. What I have here is out-of-date. I'll redo my steps working from the code base located at https://github.com/mhchem/MathJax-mhchem/blob/master/unpacked/mhchem.js.\n. The latest commit updates the mhchem.js file to mhchem v3.3.0. I have once again changed the wrapper code, changed \\rlap to \\mathrlap, edited the \\raise instances, and edited the reaction arrows.\nI also noticed some \\color code in there. It is not documented in the mhchem Manual. I think that @mhchem intends to remove it. I did not touch the \\color code because I'm not quite sure which of them are input and which are output. If we ever intend for people to use color we'll have to change the output \\color instances to \\textcolor.. Now that I have learned how to use katex.__defineMacro to write macros in a external file, I can see other possibilities. For instance this method could easily emulate the texvc package, which defines some abbreviated function names used in mediawiki. Large parts, perhaps all, of the physics package could be emulated the same way.\nSo it would be good to see a decision made on how to coordinate packages like this one with KaTeX.. > Could you exclude the mhchem folder from the coverage report?\nSure. BTW, I've got more work to do. So far, the only comment I've addressed is the bond rendering.  It'll be a couple of days yet before this is ready for review.. Well, I've copied the mhchem Manual page and edited it slightly so it can reside in the KaTeX contrib folder. So the documentation is in better shape.\nI've also edited the webpack.common file, but please be aware that I have zero experience with webpack. My work there needs careful review.\nI've done what I can here. I hope its okay.. @kevinbarabash You are very welcome.\nThis, I think, is a good pause point. I have submitted PR's that supported 140 TeX control words, supported 600 Unicode characters, fixed 9 rendering bugs (not counting the ones I created), and added working examples to the documentation. I think I've done most of what I came here to do. Let me know if you find bugs in the code I submitted. Beyond that, my involvement henceforward will be much less that it has been the past 18 months.\nTo you, to @edemaine  and @ylemkimon, I've appreciated the support and encouragement. You have a great library going here.  . As @kevinbarabash once reminded me, some people may want to protect their web site from users adding classes. Maybe this (terrific) code should go behind its own rendering option omitClass, default = true.. > as styles are predefined.\nStyles are predefined, that's true. But a malicious user, writing in an input box like the one I am writing in now, could mis-apply existing CSS style rules to places where they should not be. An administrator of a site like this one might want to restrict that. \n@ylemkimon I think this  PR is terrific, and I want to see it succeed. I only write to suggest a way that everybody can be happy with it.. @ylemkimon I don't really have a strong personal opinion on this issue. I spoke up earlier to make you aware of a comment that @kevinbarabash had once made to me. Anything he likes on this issue will be okay with me, too.. > I think the limitation should be at the command level.\nWhat if a web site administrator wants protection from a malicious user? Would the limitation be better if set as a KaTeX rendering option?. In the wiki page, I just added a link to https://github.com/Khan/KaTeX/wiki/Font-Options#user-content-font-size. So now that section of the wiki reads:\n\nG = 1.21 by default, because KaTeX font-size is normally 1.21 \u00d7 the surrounding font size. This value can be over-ridden by the CSS of an HTML page.\n\nI'll put the same link into the next version of the HTML function support page.. @samfearn We had a problem with negative spaces in Chrome. That was fixed by PR #1194. If you upgrade from KaTeX release 0.9.0, you should get relief from this problem. Current release is 0.10.0-beta.. @yeshuanova It's a CSS conflict. KaTeX matrices and arrays contain CSS classes to set justification on the array columns. In your example, the relevant KaTeX class rule is:\n.katex .mtable .col-align-c > .vlist-t {\n    text-align: center;\n}\nThe conflict occurs because the the Hugo Mainroad theme contain this CSS rule:\n[class*=\"col-\"] {\n    float: left;\n    margin-left: 2.5%;\n    overflow: hidden;\n}\nThat asterisk is a wild card, so Hugo is selecting any span with a class name that contains the string \"col-\". Then the \"float-left\" rule causes the rendering problem.\nI think that if people use wild cards in their CSS, they ought to be careful not to override the CSS of others. We prefix all our CSS rules with \".katex\". Maybe in this case Hugo ought to select for \"hugo-col-\" instead of for every \"col-\" in the world.. It would be a good thing to open an issue at Hugo. What they did there is not cool.. @yeshuanova Thank you for the clarification. You're right, of course.. Yep. Per The LaTeX Source 2\u03b5 Sources PDF, 2016, page 259.. Yes, I just tested those three macros on this branch, and they do work. I guess I shouldn't have withdrawn my earlier comment.. @kevinbarabash Thank you for the example of how to apply assertNodeType. I'll try to apply that in the future.. @kevinbarabash After reading your comments, I did a little testing in LaTeX and tried these functions with missing delimiters (one or both). It turns out that LaTeX does parse such a thing. So that {a \\overwithdelims ( b} will render as \nTo match that behavior, I would need more than just better typing; I think would need pretty significant changes in Parser.js. And I don't want to go there.\nI had misgivings about this PR before. Now I have more of them. So here's what I propose to do: I'll close this PR and instead open a different one that adds support for AMS function \\genfrac and TeXbook function \\above. They both give an author the ability to customize fraction bar thickness. One follows the \\frac syntax and the other is infix.\nIf you ask me to reopen this PR, of course I will do so. But my preference would be to wait until some user turns in a issue that requests support for \\atopwithdelims and/or \\overwithdelims. I bet that never happens.. @ylemkimon Good point. Fixed now. Thanks!. Well, I took a look at this page. It calls KaTeX from this static file. I couldn't get it to respond to katex.version.\nSo I did a couple of searches in the code. It contains \\not, but it does not contain \\smash, which means it is from release 0.8.3. The current release is 0.10.0-beta.. MathML is updated. I think this PR is now ready for review.. I had a bad test string. It included \"\u03c0\", which gave a error message because KaTeX fonts do not contain any upright lower case Greek letters. The corrected test contains \"\u03a0\" instead of  \"\u03c0\".. And thank you for the review.. If array destructuring is expensive only in IE<9, can we stop using that polyfill? We don't support IE<9.\nI mention this because I wrote the array destructuring into stretchy.js because a review comment suggested that I do so... ~~We might be applying the \\kern-10mu incorrectly. We are now applying it to the right of the outside of the root, where the governing style is \\textstyle. If we applied the same kern inside the root, it would be applied at \\scriptscriptstyle and the radical doesn't shift as far to the left.~~ I'll look into it a little more.. Well, it\u2019s complicated. It turns out that KaTeX, LaTeX, and MathJax each have their own unique approach to large radicals. Below are three treatments of \\[ \\sqrt a \\Huge \\sqrt a \\sqrt[2] a \\]. Those are KaTeX, LaTeX, and MathJax, in that order.\n\nThere are three reasons why math can get taller or shorter. (1) Stacked elements such as fractions. (2) Style changes such as \\scriptstyle. (3) Size changes such as \\Huge. KaTeX deals consistently with tall arguments by choosing tall radical glyphs. LaTeX and MathJax do that for stacked elements but act differently when the source of the tallness is due to a size change such as \\Huge.\nLaTeX \\sqrt ignores size changes altogether. LaTeX \\sqrt[<root>] deals with \\Huge not by picking a taller glyph but by applying a scale factor to the \\normalsize radical. MathJax does the same thing whether or not the \\sqrt has an optional root. That\u2019s why MathJax roots fit next to the \\Huge radical. There is more space there than there is next to a KaTeX unscaled but taller glyph.\nI don\u2019t see any reason to match LaTeX behavior in this case. It looks broken to me. Even when the glyph is taller, the root is in the wrong horizontal position. \nI can match the MathJax behavior and that will create enough space so that the root does not interfere with the radical. However, that will be a significant effort so I want some buy-in up front before I start work. Is the MathJax behavior what we want?. An alternate approach would be to let the KaTeX radicals remain as is, and instead vary the root's kern distance. There is currently a \\kern-10mu on the right side of the root. That distance needs to vary with size if we keep the current radicals.. I've thought a bit more about this, and I don't think either approach is much more difficult than the other. We should just pick the behavior that we prefer and not worry about how hard it is to implement.. > but not the content inside the sqrt?\nYes, any characters under the radical already get scaled up and I don't propose to change that. Characters in the root also scale up. But the root is \\scriptscriptstyle so it isn't as large as the math under the radical. I don't propose to change that either. I'd say just as an eyeball estimate that MathJax is using a different ratio of \\textstyle to \\scriptscriptstyle when they size their root. I'll keep the \\scriptscriptstyle scale already defined by KaTeX.\n\nthis would affect the root/sqrt symbol visually?\n\nYes, the line weight will get thicker.\n\nAre there other symbols that would fit this case?\n\nI'm going to take one thing at a time. I'll work on radicals for now.. KaTeX has allowed sizing commands like \\Huge in math mode since release 0.3.0 and delimiter.js has always gone to a great deal of effort to support that behavior with resizeable delimiters.. Perhaps it would be appropriate to disallow sizing in strict mode but it's too late to break that behavior otherwise.  \n\nDoesn't the mu unit already scale with font size?\n\nYes it does, and if we scaled up the \\normalsize radical then it would scale both vertically and horizontally and there would be enough horizontal room for the kern to work properly. In fact, that is exactly what KaTeX did from release 0.3.0 to release 0.7.1. It changed in release 0.8.0 and I suspect that the change was inadvertent, not intentional. There are no PRs in that release that proclaim an intent to change delimiter sizing behavior. I suspect the change is an inadvertent consequence of PR #719 or perhaps #755.\nSo I propose to change the delimiter sizing in general and radical sizing in particular to act more like KaTeX did before release 0.8.0. That would not change behavior when math is stacked. It would not change behavior due to style changes such as \\scriptstyle but it would change behavior during a size change such as \\large. That change would be accomplished by scaling a delimiter/radical. \nNow as @edemaine has noted, all of this sizing behavior is contrary to LaTeX.  I would have no objection if someone were to disallow all of it in strict mode, but I think that is a matter for a separate PR.. I can confirm that PR #719 did change delimiter sizing behavior.  \nNow keep in mind that PR #719 did not change delimiter sizing for \\large in way that conforms to LaTeX. LaTeX doesn't perform that sort of delimiter sizing at all. If we keep a permissive delimiter sizing, then we are free to do it in the pre-#719 manner or in the post-#719 manner. The pre-#719 method matches MathJax and enables a root on a \\large radical.\nI think we ought to change radicals at least to the old behavior. I don't have strong feelings either way on delimiters in general.. > if, in LaTeX, you exited math mode, changed the font size, and then re-entered math mode?\nNo, LaTeX does not scale up the radical; the line weight does not change. And it does something weird relative to the baseline. Here's an example rendering of\n \\( \\sqrt[3]{\\frac M M } \\sqrt[3]{\\text{\\Huge M}} \\) : \nIf the baseline were not so odd, I'd say that looks similar to current KaTeX behavior, but with a better positioned root.. Yep. I'll have a PR ready in a couple of days.. It is a great list, but it could be improved. There a are a few functions that it incorrectly flagged as not supported by KaTeX. The root cause was that its test string did not include a closing brace. MathJax accepts that sort of thing, but KaTeX does not.. @edigleyalexandre That page is running KaTeX release 0.7.1. The current release is 0.10.0-beta and a lot has been added since 0.7.1, as is described on the release page.\nIf you have any control of what is in each page's <head>, you want to change the KaTeX references to the ones listed here.. > \\ begin {equation *} does not render.\nWe haven't supported that particular environment yet. Check the function support page. You can probably find something that meets your needs.. @edigleyalexandre  That request already exists in issue #445, and is reinforced by the request for the {split} environment in issue #1345. I'm sure we'll get to it eventually. I don't want to promise any dates.. > I added as indicated, but it does not render.\nI'm also confused. When you say that \"it\" does not render, do you mean that \n\nsomething between $...$ delimiters does not render? , or\nthe {equation} environment does not render?\n\nIf \"it\" is something between $...$ delimiters, please indicate the specific item, because what I see does render.\nIf \"it\" is the{equation} environment, well, yes, that one isn't supported yet.. >  translating from English to Portuguese\nThat's not a problem at all. We just have to be a little patient with each other. Sometimes I have to ask for a clarification.\nNow regarding {bmatrix}, {cases} and {gather}, they should all render in KaTeX. The difference is that the KaTeX auto-render plug-in does not recognize environments as something that should automatically put you into KaTeX math mode. So in your document, you should try $$\\begin{bmatrix}...\\end{bmatrix}$$ and that should work fine. That's different from MathJax, which does not need the $$ in order to render an environment.\nThe {equation} environment is not supported in KaTeX, but I usually find that {aligned} or {alignedat} will do what I need.. I believe it is appropriate to close this issue. The overall rendering problem has been overcome. Support for the {equation} environment is a duplicate to an existing issue.. Super cool!\nI'll make a pull request to this branch that cleans up errors in the function support page.. @ylemkimon I have not been able to build a local version of the documentation. And yet I have made a substantial revision to the function support page. I don't know exactly how it all will look, but I'm pretty sure that I've eliminated most of the rendering errors. \nIf you get a change to rebuild this branch, I'll take another look. I expect that another draft will be necessary. In a couple of places I used HTML tables instead of markdown tables and I don't know yet how they will turn out.. Well yes, I already ran the commands that you suggest. Long range debugging is tedious, I know, but if you wish to try, the error message I get is:\n```\nyarn run v1.7.0\nwarning package.json: No license field\n$ docusaurus-start\nC:\\Users\\ronko\\GitHub\\KaTeX_website\\website\\node_modules\\docusaurus\\lib\\start-server.js:83\n        throw ex;\n        ^\nError: Cannot find module '../'\n    at Function.Module._resolveFilename (module.js:547:15)\n    at Function.Module._load (module.js:474:25)\n    at Module.require (module.js:596:17)\n    at require (internal/module.js:11:18)\n    at module.exports (C:\\Users\\ronko\\GitHub\\KaTeX_website\\website\\remarkableKatex.js:29:17)\n    at Remarkable.use (C:\\Users\\ronko\\GitHub\\KaTeX_website\\website\\node_modules\\remarkable\\lib\\index.js:122:3)\n    at siteConfig.markdownPlugins (C:\\Users\\ronko\\GitHub\\KaTeX_website\\website\\siteConfig.js:66:8)\n    at Remarkable.use (C:\\Users\\ronko\\GitHub\\KaTeX_website\\website\\node_modules\\remarkable\\lib\\index.js:122:3)\n    at C:/Users/ronko/GitHub/KaTeX_website/website/node_modules/docusaurus/lib/core/renderMarkdown.js:69:12\n    at Array.forEach ()\nerror Command failed with exit code 1.\n```. I now have a an markdown version of the function support page ready. I'll upload it later when I have better network access. In the new version there is both good and bad.\nGood part:  As a pre-rendered static file, it runs wicked fast.\nBad part: The auto-renderer has issues where it does not properly interpret characters between $\u2026$delimiters:\n\nPipe characters, \"|\", are read as table cell delimiters. The $\u2026$ should take precedence, but that doesn't happen. So I am unable to show \"|\" in the delimiter table. And I can't write {c|c} as an argument to the {array} environment. \nNested $\u2026$ are not parsed properly. I would like to include \\raisebox{0.25em}{$b$}, but that doesn't work.\n\nI've tried a couple different escape character tactics but have had no success. I've tried putting content into HTML tables instead of GFM pipe tables, but inside those HTML tables neither the $\u2026$ delimiters nor the backtick delimiters have any effect.\nIf anyone knows a way to get escape characters that work, let me know.. I've made a general edit to the function support page. There are still a few markdown quirks that I haven't been able to overcome, such as excess padding in the environment table. Even with those quirks, it's a pretty good effort. And I love the rendering speed.. > what about \\[ and \\]?\nI'm not sure what you have in mind. If you are thinking that perhaps we could use \\[ and \\] as math delimiters instead of $$, there are reasons not to do that. In markdown, \\[ is an escape for [. That is necessary because of markdown's syntax for links, i.e. [text](path). So every markdown math implementation that I have seen uses $ and $$ exclusively as their math delimiters.. The auto-render code is in the website/remarkableKatex.js file. It's commented to say that it is modeled after Remarkable code for locating code strings between backticks. That wasn't such a good model, because I can't write a \"|\" between backticks inside a table either. The Remarkable parser fixes on that \"|\" character and treats it as a cell separator even if it is between backticks.\nAnd you are right about nesting, too. The parser cannot deal with nested $ delimiters.\nI've found a couple sneaky workarounds for the \"|\" characters inside tables, using \\textbar. And I've omitted the working examples that use nested $ characters. It didn't turn out too bad. If I could resolve some CSS issues of too much table cell padding in certain places, I'd be happy with what I've got.. .. except for the {c|c} argument for {array}. I had to omit that \"|\", too, and I would like to have it back.. > Does the auto-render extension handle this case outside of docusaurus?\nYes, the normal KaTeX  auto-render extension is good at handling nested $ delimiters. Maybe we need to implement some lessons learned into the remarkableKatex.js file.. Let's not not let this nested $ delay the implementation of the proposed documentation. We can follow up later with improvements to remarkableKatex.js.. > Is there a way to avoid this while preserving the changes to sizing commands?\nI'll take a look. I may be a day or two before I get back to you.. @edemaine I've made a couple of changes. One fixes a logic error and one addresses your line weight concerns. I'll think you'll be pleased with the improvement.. Well, we assign style=\"position: absolute; to the solidus, U+0338. [ref] Then the trouble occurs when it is placed in a line where the HTML bounding box is taller than 1 em. Because it's position: absolute, it's no longer attached to the baseline. Instead, the top of the character is attached to the top of the bounding box.\nWhen faced with a similar situation in \\mathrlap, I put the offending fragment in a vlist with offset zero. It seems like there should be a more elegant way to prevent this from happening, but nothing else occurred to me and the vlist works.. I wonder why KaTeX uses a macro to define \\ne when it could have been more easily defined in symbols.js. There is a perfectly good glyph available in KaTeX_Main-Regular.. If understand issue #557 correctly, then this PR would be a benefit. An unusual case, but still a win.. @ylemkimon The CSS for the new function support page comes from https://cdn.jsdelivr.net/npm/katex@0.10.0-beta/dist/katex.min.css, but the JavaScript and fonts are coming from the local build. \nIn a possibly related matter, it is not rendering \\not =  properly.  Is that because the fonts and CSS are out of sync?. If I understand how this works, then the new function support page gets its katex.js from a dist folder at the root. Is that how we want the docs to work? Or do we want them to get KaTeX from the same CDN as everybody else?. > It's definitely how we want it to work in development.\nAgreed.\nNow let's address the function support page that is on the public web. I'm unclear on how that is supposed to work but my experience is that the katex.js and katex.css are not in sync. The CSS comes from the CDN. The JavaScript seems to come from the dist folder in the local build. Must  https://khan.github.io/KaTeX/ contain a dist folder in order for the public build to occur and work properly? Or is the build done locally and then the built page is copied to  https://khan.github.io/KaTeX/?  \nIf it comes from a local build and the build is from the current master, then the docs show a version of KaTeX that isn't yet released. That seems unwise. Sometimes we catch and fix bugs in master before they are released.\n\nIs there an easy way to see old versions of gh-pages?\n\nI'm not aware of any way that I would characterize as \"easy\". I believe this is one of the items on the punch list above.. > https://khan.github.io/KaTeX/ seems to work fine. \nYes, but the KaTeX README page had a great deal of material deleted. That material is now on the new docs. Those new docs do not appear anywhere on the public web and won't until a publish-gh-pages occurs. So @edemaine is correct. Quite a bit of our documentation is, at this moment, hidden.. Well it does work in MathJax, and besides it is the straightforward behavior, so why not have it work in strict: false mode?  \nIn strict: warn mode, let single line comments work and write a console message that tells people it can't be copied verbatim to LaTeX.. > Publish website every release\nThe function support page has been updated on that schedule for 1\u00bd years. It works fine. I'm not sure about the other pages. We may find a problem and wish to get new docs out in between releases.. > Perhaps we should start requiring updates to the document for each PR that affects it.\nThat may be more easily said than done. The original KaTeX Contributing page instructed contributors to update the wiki's function support page. But I found in December 2015 that the function support page was missing several hundred functions. And so began my involvement here.\n\nin the past, @ronkok has done the work immediately after a release.\n\nGive me a few days notice before a release occurs and I can write up every function added since the previous release.  I expect the velocity of new functions to decrease.\nNow I certainly would not mind if others updated the function support page. But that is less easy to do now than it was in the wiki days, and even then, people quite often didn't do it. Also, a requirement like that may discourage new contributors just by adding another burden.\nI also have reservations about showing functions in the documentation that are not yet released. They should at least be flagged as such. Which means that the function support page must then be edited twice for each new function, once with the flag, and once to remove the flag.\nIf you can get contributors to do all that, great. If not, I'll follow up and keep the page current.. I think the main page should get the release (stable) version. Otherwise we can count on seeing issues raised asking, \"Why doesn't my page render a ____?\". . @edemaine I've added three of the issues to the list in #1505. The fourth issue was already implicitly there.. I've also changed the table cell vertical alignment to middle. The environment table looks better now.. @ylemkimon I fully approve of the content in the supported.md file. I also agree completely with the objectives of the other changes in this PR and they all seem to work smoothly emprically.\nBut regarding build scripts, I'm probably not qualified to pass judgment. Perhaps @kevinbarabash  or @edemaine could weigh in.. What is the status of this PR? Are we waiting for @kevinbarabash to make a judgment call on the build process? \nI would like to add some functions to the spacing table, but I would like to see this PR merged first so that I can avoid merge conflicts with changes already made to that table.. > wrapping the two-sided TeX commands \\over and \\choose in braces \nI have often thought of doing that. I never got around to writing it into the file.. @kevinbarabash Thanks for the note. In Fractur and blackboard-bold, we actually do have the range that the table indicates. But we have it only in math mode. A few of the characters are not supported in text mode. So I had to change how the table calls them.\nAlso, I've found a bug in sans-serif bold and with some numerals. I'll fix it and turn in a PR after #1534 lands.\n\n. @ylemkimon Thank you for the list of functions. There is good stuff in there.\nI believe that the color functions were intended to be un-documented and used internally by Khan Academy. Similarly, the extensible arrows are there to support mhchem. They don't exist in any LaTeX package, so we don't intend to put them in the documentation either.\nI'll go to work on the others.. @ylemkimon There was a reason some functions were omitted. I could not find independent confirmation that things like \\bull and \\hfil actually exist somewhere. I've now checked the texvc package, which  underlies mediawiki, and I've been able to confirm that many of those functions do indeed exist.\nBut I still can't find \\hfil and \\vfil anywhere. Do you know where they come from?\nUpdate: Oops, a couple more items are omitted. I'll pick them up this evening.. @ylemkimon I've picked up review comments, with the exception of \\hfil and \\vfil. I'd be happy to include those once we're sure that they exist somewhere.. I believe that I have now picked up @ylemkimon's comments and I have also added references to several GitHub issues. I've probably missed some issues, but's it's a good first effort.\nI did not add \\text{\\[\\frac a b \\]} because that doesn't work when I test it on the demo page.. @ylemkimon Good stuff. All done.. @ylemkimon Hold off on the merge for a minute. I've got one more to add.. Now it's good to go.. @ccorn Thank you for the report. We'll fix it in the next release. For now, you can substitute \\mathrel{\\neq}.\nLine wraps are still new to KaTeX and we have to get accustomed to using such wraps in the macros we write internally. Looking at the code, I see that \\ne, \\nottin, and some others also need such a wrap.. Can we use jest to prove that \\neq produces a group? That's enough to prevent a line break.. And to be clear, this bug and the wide character bug fixed in PR #1549 are the only two bugs that I saw during creation of the Support Table page. I don't know of any more existing bugs.. > I wonder about the utility of the -beta moniker.\nI think KaTeX has fewer bugs right now than several earlier releases that had no alpha/beta label. I would say the \"alpha\" is unnecessary.\n. When I run yarn start on this branch, the resulting page does not render the \\url function properly. If this page were to be published before the next KaTeX release, how would \\url render on the public web?. > I am thinking of using the release version of KaTeX from the CDN.\nThe current release does not include \\url. So \\url would not render in that scenario. As a general rule, should we wait until a new release before adding functions to the documentation?\n\nKaTeX logo in the \\href example\n\nGood idea. I'll give that a try.\n\noverflow on the smaller screens\n\nMy phone can render it pretty well, but only in landscape orientation, not portrait orientation. That was also true of the old function support page, so this is nothing new. I don't really have any ideas to make it better. . @ylemkimon I changed the \\href example so that it displays the KaTeX logo. It works well. Nice touch.. @mbourne Thank you for the tip! I'll get to work on it.. I'm working out the idea suggested by @mbourne for a responsive table. It's not ready to publish yet, but it looks very promising. But there is this: IE 9 does not support display: block for table elements.\nShould I try to implement a browser hack that keeps the display: block trick away from IE 9, or is this the moment when we decide we no longer support IE 9?. On second thought, IE 9 should not be a problem. The special CSS will be activated only when @media screen and (max-width:480px). I don't think that many people are using IE 9 on their phone.. @ylemkimon I'm working it on this PR. I also have some other time demands so this may take a day or two.. > Could you change In master functions to display the actual function?\nYep. On it.\n\nconsider \"break-word\"\n\nNice idea. I'll see how it affects things.. Status: I've eliminated all \"In master\" and replaced them with function displays. Ive adopted break-word and eliminated all <br> tags inside <p> elements. I've also done two CSS changes to the tables in the supported.md page. These changes are done to facilitate narrow mobile displays and they vary in their success. \nGood parts: Sideways scrolling is completely unnecessary and the tables with headings turned out well. \nQuestionable part: The tables without headings are now, on a narrow screen, broken down so that each cell acts like its own <div>.  So it all fits, but it is the zaniest hopscotch board you have ever seen.\nTake a look at https://deploy-preview-1556--katex.netlify.com and tell me if I need to change it. \nTomorrow, I'll add the texvc functions to supported.md. So far they're only in support_table.md. (Unless we decide they're not needed in supported.md. They're all redundant function. I added them mostly to make the support table look better.). The latest texvc functions are now in supported.md. I think this PR is now ready for review.. The latest commit picks up review comments. To address the troublesome screen width, I made the right sidebar a little more narrow. This doesn't solve the problem, but it does mitigate it. A solution would require a more extensive CSS modification than I am up to at the moment. What I have here is probably my best effort for the present.. > Do we really want the \"(in master)\" notes in the documentation? \nNo. But what we want even less is an error message, in red, saying that a function is not supported. \nI am writing \"In master\" on the assumption that the docs may be published to gh-pages at any moment. The documentation is in a shakedown period at present. After things settle down, it may be possible to delay publishing supported.md until after a release. In that scenario, we could write features directly into the docs.\nIs it possible to publish updates of some but not all of the documentation pages? If, during the period between releases, we want to update some part of the documentation, can we publish updates of everything except supported.md and suppport_table.md? That would fix the problem once we get past this shakedown period.. > Perhaps we should only publish at release times, for now.\nThat would allow us to update the docs with new functions as they are written. But I worry that we may someday discover that something in the documentation is just wrong and needs to be fixed right away. . @ylemkimon Thank you for the clarification. That changes how I view things. I'll get started on changing \"In master\" to displaying the actual function.\nWe need to get #1520 merged before we publish the docs.. I've changed the Support Table, deleting \"In master\" and instead writing in code to display the function.\nWhen I run yarn start, every one of them shows an error. I don't understand why. These functions should run okay with the CSS from the current release. I don't understand why PR #1520 would help them.. @ylemkimon Thank you. Your suggestion did the trick and I am very much reassured.. I had idle thoughts of adding package emulation to the third column of the Support Table page. It might make the table too cluttered. But if it works, it would be easier to maintain than a separate page.. @nickgravelyn At the moment, the answer to your question is \"no\", but PR #1437 is pending. It needs a little work before it can be merged, but hopefully it will be available soon.. @riteme We used to get some reports like yours from people using Chrome and Safari. Those reports stopped after we added a bit of CSS. But that CSS is limited by a media query to affect only screens. Now I think maybe we should apply it to print, as well.\nPlease try the following CSS. Let us know how it goes.\n```CSS\n@media print {\n    .katex .mtable .vertical-separator {\n        min-width: 1px;\n    }\n.katex .mfrac .frac-line,\n.katex .overline .overline-line,\n.katex .underline .underline-line,\n.katex .hline,\n.katex .hdashline,\n.katex .rule {\n    min-height: 1px;\n}\n\n}\n```. > Is that a bug with Chrome?\nWe've had no reports that I recall of this type from Firefox or Edge. Safari has similar problems.\n\nit seems that horizontal lines are too wide.\n\nTry 0.5px. Let me know how this turns out. I'll write a PR that adds the best results to KaTeX.\n. @mbourne Do you think the min-height: 1px; makes lines that are too thick in print mode?. @mbourne Thanks for the feedback. I've re-opened the PR.. I'm going to close this issue, as resolved by PR #1594. We may get a complaint someday for frac-bars that print too thick, but that will be a different issue.. I'm going to withdraw this PR for now. I think we need more information before proceeding. Can the problem reported in issue #1593 be avoided by just using a minimum 10 pt font size? Can it avoided by using Firefox instead of Chrome? Is a 1px minimum line thickness a net loss for printed material?\nUntil we know the answers to those questions, we probably should not merge this PR.. Well, now we have more feedback and it turns out that printed frac-lines do disappear when printed by Chrome in a 10 pt font, even sometimes if they appear on the PDF screenshot that Chrome displays.\nA min-height: 1px fixed that problem. So I am re-opening this PR.. This PR triggers many flow errors. I've done a good faith effort to fix them and succeeded at fixing a few. I don't intend to spend any more time on it. If someone wishes to collaborate with me on this PR and fix the flow errors, I would welcome that.. In the latest commit, I've changed the way that the function matches the url argument. Instead of specifying a text arg type, the PR now uses the same Lexer RegEx as used by the \\href and \\url functions. Now, URL strings can contain a % character, useful for URL escapes. As an added bonus, we re-use the earlier code that checks the URL protocol.\nThe PR still does not do anything to address @edemaine's security concerns but I think it is otherwise ready to go.. I see that @ylemkimon has opened PR #1711, which improves the code for the url arg type. I'm going to mark this PR as blocked until that one lands. Then I'll circle back and revise this PR.. I've updated this PR to coordinate with the recently added \"raw\" ArgType. (Thanks!) The graphics are running again and I've eliminated all but one of the flow errors, which is better than my past performance. \nI still am unsure about how to address the security issue. I suspect that's a little above my pay grade.. No worries.. @ylemkimon Thank you. That did the trick.. The latest commit revises the RegEx pattern as recommended by @ylemkimon. (Thanks!) This simplifies the code but it does not raise a parse error on a mis-typed predefined color name. \\color{cherry} will render in black.\nI'd like to raise an error on a mis-typed predefined color name, but the only way I can think to accomplish that is via a RegEx pattern that enumerates all 150 of the HTML predefined colors. Is that something I should do?. I put newlines into the SVG paths just to get them to pass lint tests. How about adding /* eslint-disable */ as necessary and removing the newlines? This would affect all of file svgGeometry.js and one location in delimiter.js. @fsonmezay I do not expect that KaTeX will support Arial font.\nOne of the reasons that KaTeX is fast is that it does not have to query the browser for dimensions of font glyphs and then wait for the browser to reply. KaTeX has detailed metrics for the glyphs in the KaTeX font, so it can work with those metrics. In order to use another font, one would have to first extract the metrics for each glyph in the font and make that data available to KaTeX. \nThat might happen some day for one of the mathematical fonts, but I don't think it is likely to happen any time soon for Arial.. @edemaine I tried your suggestion. (Thanks for trying!) But I get the same results.  Would it help if I removed package-lock.json?. @edemaine Thanks! Your suggestion of deleting the node_modules directory worked.. PR #1757 has resolved the issue with Unicode blackboard bold letters. They all now work in either text mode or math mode. There are a few script letters and three Fractur letters that are still implemented via macros that work only in math mode. So I've edited the title of this issue.. I applaud this PR. I also think it will be possible to recover use of \"%\" as a URL escape character. I plan to write a PR which does that after this PR lands. My general intent is to:\n\nEdit the Lexer RegEx so that it matches only a %, not %[^\\n]*(?:\\n|$).\nAdd a parseComment function to Parser.js to replace the functionality of the old RegEx pattern\nEdit Parser's parseString function so that any non-URL groups that contain a % will throw an error. URL groups will not throw the error. That will enable the URL escape.. > I'd like give it a try.\n\nPlease, feel free.\n\nLaTeX behavior seems to be continue parsing to the next line.\n\nI haven't written any of this idea into code yet. But I want to keep the behavior that @edemaine created for comments. So in an expression like \\frac{a}{b % s}, the group does not close and it should throw an error. That's my intent. Any way we get there would be okay with me.. @luweikxy According to this page, GitBook's KaTeX plugin uses KaTeX version 0.5.1. A lot has changed in the last three years. The current version is v0.10.0-rc.1.  Would it be possible to upgrade the KaTeX plugin?. @luweikxy The plug-in version is 1.1.3. But that plugin has dependencies, and the dependencies have me confused. According to the plugin package JSON, it is dependent on KaTeX 0.7.1, but according to the plug-in static file, it is using the CSS and fonts from KaTeX version 0.5.1. That is a little odd, but it should not cause a stack overflow.\nKaTeX has no limit on the number of formulas. The plug-in is making repeated calls to the katex.renderToString function, but KaTeX runs each one of those calls sequentially. There is no reason it could not go on indefinitely. \nKaTeX does create quite a lot of HTML for each formula, and your file is quite large. It is possible that the results have met a GitBook size limit.. > How can I upgrade the katex by myself? change the package.json[?]\nYes, I suppose one could fork GitBook and do that update. Or you could write a pull request to GitBook so that everyone gets the benefit of the update.  \nAfter running npm update, check the files in the static folder. They should also be updated to current versions.. Hey, @kokopelli314, if testing has become frustrating, remember that you can test locally and work things out before pushing a commit to the KaTeX repository. On the command line, you can run: yarn run test.\nIf you are developing on a Windows box like me, that doesn't work so well. Git will occasionally change all my font file line endings to CRLF. That's no problem until eslint writes 26,000 error messages. So I usually don't run eslint locally.\nInstead, I write: yarn run test:jest, and yarn run test:flow locally. For the linter, I usually wait until CircleCI does its run. On a small PR, the number of true lint errors is usually pretty small.\nHope that helps.. git commit -n -m '<message>' will commit in a way that evades hooks/pre-commit. Yes, \"Supported Functions\" has always been a page that shows examples but doesn't explain them. It covers a lot of material that way, but it falls short as a tutorial. I think @edemaine's  suggestion is a good one. We'll change the example into one that contains math. Maybe \\colorbox{aqua}{$16 x^2$}. \nThere are probably other TeX boxes on that page and on the \"Support Table\" page that would benefit from similar treatment. I'll look into it.\nI've long had the urge to augment that page with some links to explanations of TeX behavior. For instance, in the delimiter section, the page could show a  button which links to, say, here. Any thoughts on the links-to-explanations idea?\n. >  the page is shifted to the right.\nAh, I see now. Thank you for the screen shot. It should be possible to do something that both centers the page and allows a wider main container. I'll look into it and get back to you.. @ylemkimon I have two suggestions:\n\nI agree that it would be a good idea to remove the onPageNav rule from the support_table.md page.\nOn the supported.md page, we can re-center the page by changing one line of code from flex: 0 0 200px; to flex: 1 0 200px;. That would center the page and also retain the slightly wider mainContainer that was my original motivation for the rule.. > changing flex-grow to 1 still shifts the page a bit\n\nYou're right, now that I look closely. So your preference has a tiny benefit on a wide window and my preference has a tiny benefit on a small window. We're picking nits.\nI don't feel strongly about this, so I'll let you choose. I'll approve this PR and you can either merge it or close it just as your prefer.. No objections here.. > https://katex.org/docs/supported.html is missing \\fbox\nThat was intentional. When I researched \\boxed, I recall reading that AMS created \\boxed because \\fbox is not trivial to use. I imagine that is probably because \\fbox, like the typical TeX box, doesn't take math. (An issue that repeated itself just this week.)  So when I wrote the first HTML version of the Supported page, I omitted the function that would attract confused bug reports.\n\n\\fbox is in the support table)\n\nThe support table was, to a large degree, patterned after http://utensil-site.github.io/available-in-katex/. It does include \\fbox, so I (reluctantly) included \\fbox in the support table.\nEither or both decisions may have been misguided. Feel free to edit the documents for consistency.. @Jenyay Has the katex.css or katex.min.css file been updated to KaTeX 0.10.0?. @Jenyay I don't have Linux or WebKitGTK+, so diagnosis will be slow. The first thing is to establish whether or not your KaTeX installation is generating the correct HTML. If it is, the next step will be to look at CSS problems. \nPlease check the HTML output of a KaTeX \\frac. Nested very deep in that output, there should be the line:\n<span class=\"frac-line\" style=\"border-bottom-width: 0.04em;\"></span>\nIs that line there?. Good. The HTML is correct, so we'll look for a CSS problem. KaTeX 0.10.0 has two CSS rules that apply:\n```\n.katex .mfrac .frac-line {\n    display: inline-block;\n    width: 100%;\n    border-bottom-style: solid;\n}\n.katex .mfrac .frac-line {\n    min-height: 1px;\n}\n```\nThose rules ought to be enough to make a frac-line visible. Perhaps some other CSS rule has done an over-ride. If possible, please do an \"Inspect Element\" on that frac-line and find out what CSS rules are actually governing, and where they come from.. So KaTeX writes an inline CSS of \n<span class=\"frac-line\" style=\"border-bottom-width: 0.04em;\"></span>\nThen WebKitGTK+ apparently ignores this and applies a a border-bottom-width of 0px. It sounds to me like you should open an issue with WebKitGTK+. I don't think there is much that KaTeX can do to help here. There is no such thing as a CSS min-border-width property or I would have written one into the KaTeX CSS long ago.. @Jenyay That suggests a solution. You can write a custom definition for \\frac as a macro. This definition can be written as the last argument to katex.render();\nmacro: {'\\\\frac': '{#1 \\\\above{0.05em} #2}'}\nOr, for a single page, you can write the macro into any KaTeX field. (\\gdef will persist between fields.) Then the macro can be written as: \n\\gdef\\frac#1#2{{#1 \\above{0.05em} #2}}\nWhy don't we define the standard frac-line to be at least 0.05em? @mbourne would like us to do that. But, well, we emulate TeX and the 0.04em value is written clearly into the TeXbook.  So we're kind of stuck. You, however, are free to define it as you want.. RE: the circleci failure: I'm the wrong person to edit a bash script. If someone can correct that, feel free.. > try simply rewriting \"Khan\" to \"KaTeX\"\nYes, I also read the error message. But I have no idea where that string should be modified. Rather than have me blunder about trying to fix something that I don't understand, I'll wait for someone who knows what they are doing.. @mhchem Yes, you've put your finger on the drawback to this approach. If this PR were to be accepted, here's how I would envision future events.\n\nI write a PR to https://github.com/mhchem/MathJax-mhchem that addresses items 9, 10, and 11 in the list above. \nAfter accepting that PR you would henceforward develop mhchem,js just as you do now. Don't even worry if KaTeX exists.\nEach time you make a major release of mhchem, I would adapt it for KaTeX as I have done in this PR.\n\nDon't worry about line length. Prettier makes that very easy to manage.  And if we clean up some of the lint items now, the remaining lint items are not hard to pick up.\nThat's the plan. I'm okay with it, but I recognize it is far from perfect. If anything in this plan makes you uncomfortable, then I stop work right now and go back to PR #1436 . If any of it makes @kevinbarabash uncomfortable, then I also stop work. \nGiven that plan of action, what then are your thoughts?. I don't have a solution, but  I can point out part of the problem. Consider the rendering from \\large A\\raisebox{-1ex}{B}. The subscript is contained in a set of nested spans. The outer span has the CSS classes: vlist-t vlist-t2 sizing reset-size6 size7.\nClasses vlist-t vlist-t2 are put there by makeVList. vlist-t sets the display to inline-table.\nClasses sizing reset-size6 size7 are put there by \\large. sizing overrules what makeVList did and sets the display to inline-block. \nThe inner nested spans have display: table-row; and display: table-span but they don't work because they're not in an inline-table.\nI don't know why a font change would need a inline-block rule. Maybe it could be omitted. Or maybe the VList could be nested inside the font change span instead of sharing the same span.. Or maybe vlist-t  just needs to be pushed to the array of classes instead of unshifted?. Yep, that's a bug. I think I see the problem. The \\hphantom should be given a mord class, just like what it contains. That would cause the correct spacing to the relation to its right. \nI think I wrote the \\hphantom code. I'll see if can I work something up to fix it.. Well now, I have thoroughly messed up this feature branch in my local repository. I'm going to close this PR and open a new one from a new branch.. Okay, screenshot tests are in. This should be good to go.. I don't think we need to consider mathopen or mathclose since an unmatched instance of either would cause a parse error. But your question does apply to mathpunct. It gets slightly different spacing treatment than a mord. \nI'll modify the PR, but it might be a few days before I get to it.. @ylemkimon's question prompted me to do a little more research. I find that I was wrong about how \\phantom and \\hphantom behave in TeX and LaTeX. I thought that they would get the same horizontal spacing as the kind of atom that they contain, but that turns out to be incorrect. They actually get the same spacing as a mord, no matter what their argument is.\nA year ago, I would have suggested that we should apply binrel spacing and ship something better than TeX. But suggestions of that sort don't seem to make their way into KaTeX master. Instead, I'll modify the code in this PR and I'll also modify \\phantom so that they emulate TeX behavior.. > you should use parser.settings.useStrictBehavior()\nI decline to fight the flow battle that would ensue from that choice. Feel free to push a commit if you feel strongly about it.. I can imagine people who want an exact emulation of LaTeX. I can imagine people who want a more permissive, MathJax compatible library. I cannot imagine someone who wants exact emulation in every detail except the width of \\hphantom. \nWe have made KaTeX options too complex. In particular, we have made the strict setting far too complex. There is negligible benefit to its multiple permutations and commit 43bcfad should be discarded.. If we keep 43bcfad, let's at least write docs without an error. In TeX, \\hphantom does not result in op spacing. It applies \\mathpalette, which expands to a math group, which get the same spacing as an ord atom.\nAlso, I wrote this PR to alter \\hphantom and \\smash, not \\phantom. I prefer not to degrade the behavior of our current \\phantom just to follow a bad TeX example. Such a course would damage the rendering of an example like this. . I don't like the additional strict setting, If the only way I can get rid of it is to discard bin|rel  for \\hphantom and \\smash, then let us discard bin|rel.. The latest commit removes the bin|rel functionality. \\hphantom and \\smash now return a mord at all times. KaTeX will apply spacing in a way that matches TeX behavior.\nI don't imagine that people often put a bin atom or a rel atom into \\hphantom. It's only an edge case. But I have now intentionally made that edge case behave badly, in order to prevent something even more foolish in the docs. This smells.. The snapshot is in. This is ready for review.. I suggest something like: \\tilde{\\tilde{\\kern{-0.3ex}d}}.\nIn TeX and KaTeX, \\tilde makes an automatic horizontal correction for the slant of an individual italic letter. That correction doesn't apply to the upper stacked tilde, so they don't align. So you need to avoid applying \\tilde to an individual letter. Instead, wrap the letter in braces to make it a group:  {d}. Then you can apply double tildes and they will align with each other. \nInside the group, you'll need to do the italic correction yourself and it will vary from letter to letter.  To me, \\kern{-0.3ex} looks about right for a \"d\", but your taste may differ.. Also, If you write \\max instead of max, it will read like a function name, not three variables.. @fennecf0x Thank you for reporting this bug. I see where the problem occurs and I should be able to write up a PR tomorrow that will fix the problem.. @tivewsalaeharad Try using \\displaystyle inside a pair of $\u2026$ delimiters. Avoid $$\u2026$$ if you want automatic line breaks.  KaTeX, like TeX, does not do automatic line breaks in display mode.. @perfaram This is really cool. You got to this one before I did. \nI don't know which is more commonly used:  \\angl from the actuarialangle package, or \\lcroof from the lifecon package. If you have domain specific knowledge and can tell me that \\lcroof is more common, then I would be okay implementing it.\nIf we don't have any such knowledge, then I would be more comfortable using the function that has a maintained package on CTAN. That would be \\angl.\nAs to its place in the Supported Functions page, I suggest that we expand the Annotation section to read Annotation and Enclosed Math. Maybe someday we can add \\phase from the Steinmetz package and some sort of \\longdiv.\nDo you have any deeper knowledge on whether \\angl or \\lcroof is more common?. @perfaram First, a comment on the philosophy behind this library: It tries hard to maintain compatibility between KaTeX and LaTeX. I occasionally submit something that I think is an improvement on LaTeX. Those submissions generally do not get approved or merged into master.\nInventing a new function name is not in line with that philosophy. You'll want to use a name from an existing package and it should provide 100% round trip copy-and-paste compatibility with a LaTeX package. You can submit either \\angl or \\lcroof, or both, but not a brand new function name.\nThen the rendering should be as close as possible to the way it is rendered in LaTeX. So for instance, in \\angl you will want to match these rendering features:\n1. Top line thickness that matches \\hrule. The TeXbook p 221 defines a standard \\hrule as 0.4pt thick.  KaTeX is based on a 10 pt font, so your CSS can emulate a 0.4pt rule with a 0.04em CSS border.\n2. 1mu space before and after the argument. That can be emulated by 0.0556em padding. actuarialangle has an option for a 2mu space after the argument, so if you prefer 2mu, I think that stands a good chance of getting approved.\n3. A 1mu space to the right of the vertical line. Maybe a  CSS margin would be the easiest way to do this.\n4. \\angl always runs its vertical leg as least as low as the depth of a parenthesis, even if the argument's glyph has no descender. opentype.js tells me that the depth of a paren is ~~0.349em~~0.25em. You will need to check the depth of the argument and make that adjustment when necessary.\nThat depth must be added both to the the TeX-like depth that KaTeX maintains for its calculations and also to the HTML, since you are using a span border for your rendering. You can do both in one step by using the KaTeX makeVList function. Maybe the \\underline example would be a good go-by. You'll need a lower kern and the original group as arguments to makeVList.\nNow those comments pertain to \\angl. I agree with you that the thicker top line of \\lcroof is better. If you submit \\lcroof and not \\angl, it will need rendering code just as finicky and precise as \\angl.. Also, @kevinbarabash will ask you to write unit tests. In test/katex-spec.js, I suggest that you should at least ensure that you can expect your new function toBuild(). \nRendering is tested by adding to the test/screenshotter/ss_data.yaml file.  The KaTeX Contributing page describes how to use Docker to create the screenshots. If you, like me, are not a Docker user, let me know and I can show you a trick to create KaTeX screenshots without Docker.. I notice now that you proposed \\actangle only as a means to define \\angl and \\lcroof, not as a function for use by itself. If that technique allows you to accurately render both \\angl and \\lcroof, then I think it is an excellent idea.. Correction: the descender of a parenthesis is 0.25em, not 0.349em. I need to look at the glyph in the correct font, which is KaTeX_Main-Regular.. > what if we're running with a custom, different font ?\nKaTeX doesn't use any custom different fonts except in cases such as CJK characters that do not exist in the KaTeX fonts. One of the reasons that KaTeX is fast is that it never has to query the browser to find the width or height of a math expression. KaTeX has detailed metrics for every glyph in the KaTeX fonts and it uses this information to set all vertical alignments. It can finish its work and shut down without multiple cycles of render - measure - render - measure.\nAnd yes, this does result in tight coupling between the code and the font. It's not ideal but the speed gained is a valuable trade off.. @perfaram I've looked at your code and to me it looks like you did an excellent job. I especially like the way you defined \\\\\\\\actangle in a way that cannot be written by an end-user. My two review comments are (1) yes, you'll need to remove \\cmangle from the code, and (2) I'd like to see a couple of specific screenshot tests to test spacing: \n a_{\\angl{n} as the numerator and denominator of a fraction,\n 1 + a_{x:\\angl{n} =.\nKaTeX is, for me, a retirement hobby. This sort of thing is not my profession and when I read reviews done by @kevinbarabash or @ylemkimon they sometimes turn their attention to issues that I did not know existed. So I will leave final review and approval to others.\nNow the screenshotter trick. We can evade Docker by getting CircleCI to do the screenshots for us. In order to do this, you'll need to log in to CircleCI. If you don't have an account there, you can sign up with your GitHub name and password.\nIn test/screenshotter/ss_data.yaml, you can see definitions for screen shots organized under headings like \"Accents\" or \"AccentsText\".  Then the images folder contains PNG files that have names derived from those headings, like Accents-chrome.png and Accents-firefox.png The steps you need to take are: \n\nWrite a new section into ss_data.yaml that will create an example of your work under a heading such as \"ActuarialAngle\". \nMake two copies of an existing png file in the images folder and give them the names ActuarialAngle-chrome.png and ActuarialAngle-firefox.png. These are entirely phony files but are needed for the next step. Put the two bogus files into test/screenshotter/images/ with the other screenshot files.\nStage the files, commit your work, and push to origin.\nCircleCI will create two screenshot files from your ss_data.yaml and will compare them to the phony files that you committed. Naturally, the screenshot tests will fail.\nWhere the CircleCI test list says, \"Screenshotter - Chrome\", click the \"Details\" link to its right.\nIn the subsequent CircleCI screen, click on the \"Artefacts\" tab. You need to be logged in to CircleCI in order to see that tab.\nThe next screen will include a link to the ActuarialAngle-chrome.png file that CircleCI created. Click on that link and you'll get a view of the picture. If you're in Chrome, you can then right-click on the picture and download the PNG file. Use it to replace the phony file in your local folder.\nRepeat steps 5 thru 7 for Firefox and then you will be ready to stage, commit, and push the real screenshots.. @perfaram I'm having second thoughts on a couple of issues. First, it was my idea to rename the \"Annotation\" section of the Support Table to \"Annotation and Enclosed Math\". Now it occurs to me that someone out there may have written a deep link to that section, a link which now would be broken. I now think we should leave the heading name alone.\n\nI am also reconsidering the code. Not the correctness, but the style. It is now written in the style of genfrac.js, which makes it quite verbose. In genfrac.js, there is a reason for that verbosity. KaTeX supplies several fraction functions, allowing an author custom control over style, padding, and line thickness. Some KaTeX fractions are infix functions, so they have to use the replacewith  technique to pass values back and forth between genfrac.js and Parser.js.\nBut \\angl and \\lcroof are not infix functions and the only parameter that changes is the top line thickness. (\\angl is supposed to have a 1mu left padding.) \nIn your first commit, many of the dimensions were hard coded into katex.less. By doing that, you wrote the whole thing with much less code. Some of those dimensions needed an adjustment, but I like the brevity of that first commit. KaTeX is already quite a large library and we should not ship more code than necessary.. @perfaram I really like what you've done. It looks to me like there are a few lines in parseNode.js that could be deleted. And then you're good.. @Gwynever Would the AMS {CD} environment be sufficient? {CD} does not supply diagonal arrows, which would make it much, much easier to write than something like \\xymatrix or Paul Taylor's package.\nA note to other KaTeX contributors: I'm pretty booked up right now and I do not volunteer to make the additions to array.js that would be necessary to parse the {CD} environment. But if someone else takes that on, I can supply SVGs for vertical arrows and edit stretchy.js for the rendering of those arrows.. Hi @aziis98. This looks really interesting. I noticed that you had some very insightful comments:\n// Without the node already in the DOM it looks like\n// it doesn't work. Probably because I can't compute\n// all the bounding boxes necessary for this to work.\n// Tecnically Katex already knows all the bounds\n// of its objects (?)\nActually, KaTeX only knows the vertical bounds of all its objects. It relies on the browser to set most horizontal alignment. For fraction bars, KaTeX has always used a span border and a little CSS trickery to make that span width match the width of the numerator and denominator. PR #670 put SVG images of very long arrows into spans with overflow: hidden; and applied the same CSS trickery to make that span width match the subject matter.\nThe benefit of that approach is that KaTeX never has to query the browser to find the bounds of any of its objects. KaTeX can finish its work and shut down without any cycles of render, measure, render. And this partly explains why KaTeX is fast.\nI can think of no CSS trickery that can find the correct geometry for the diagonal arrows in \\xymatrix. We either have to settle for the AMS CD package or we have to take your approach and do at least one render, measure cycle. \nI'm glad that KaTeX does not have to do render, measure cycles for most math. For the occasional special case, like commutative diagrams, I think it would be okay to use your approach. Then again, that's probably not my call. It would be interesting to hear what others think.. Good point regarding server side rendering. I like the idea of a measurement extension. It could then also support \\rotatebox and \\cancelto.. Say we wanted a measurement extension. How to go about that? I have some thoughts.\nSay we did the following inside KaTeX proper:\n\n\nWrite a series of non-standard unary functions that display stretchy arrows. Give them names like \\@rightarrow{<width>}, \\@Rightarrow{<width>}, etc. Each function would return a span containing the arrow\u2019s SVG set inside a box that has a hard width defined. This box would be attached to the baseline.\n\n\nWrite a non-standard \\@rotate{<object>}{<angle>}{<width>} function. The object\u2019s width must be an argument, because many KaTeX objects don\u2019t know their own width.\n\n\nExpose a defineTwoStageMacro function, similar to the existing defineMacro function that was used by the mhchem extension, but with an additional callback that would execute after a measurement is taken.\n\n\nThen the extension would define a macro for \\xymatrix that:\n\n\nExpands into a {array} environment and passes control to KaTeX. \n\n\nWaits until the first phase is rendered, and takes the necessary measurements of the DOM.\n\n\nCalculates the geometry for any diagonal arrows and return a revised {array} environment in the callback function. This second set of code would include things like \\@rotate{\\@rightarrow{2.5em}}{30}{2.5em}\n\n\nIs this sort of thing feasible?. @WhyCannotIPostAnonymously Thank you for raising the issue. I'll turn in a PR to fix it.. Fixed by PR #1836.. Wow. That was fast.. Before merging, can you add these functions to the documentation?. @edemaine I am seeing the oddest thing. When I look at the source text of support_table.md and supported.md, they look fine. But when I look at https://deploy-preview-1839--katex.netlify.com/docs/supported.html, \\textasciicircum is there, but \\textbackslash is missing. \\textbackslash is also missing when I look at the deploy preview of the support table.\nPerhaps I am doing something wrong with deploy preview. Any ideas?. Yes, that's better.. Those are interesting ideas, too.\nImplementing a second font would go well beyond light editing. We would need font metrics for each glyph. And there is at least one place where font metric data is hard coded into the JavaScript. We support \\oiint and \\oiiint by superimposing ovals on the glyphs for \\iint and \\iiint. Each oval's SVG path geometry is written to coordinate with the geometry of the underlying glyph.\nPerhaps we need two PRs: one for the easy parts and one for a font..  I grow weary of Safari weirdness. \nSometime in the next week, I'll take a look and see if something can be done. No guarantee that I'll succeed.. @spontaliku-softaria This is just a note to say I have not forgotten this issue. I work on a Windows box, so my access to Safari is limited. Next week some new iPads will be available. I'll buy one and see if I can do something here.. @ylemkimon There may not be much I can do. Right now, I don't have much access to Safari. Next week some new iPads will be available. I'll buy one and see what is possible.. When I run server.js and view it in http://localhost:7936/, I get the mask when I view it in Chrome, the background-image when I view it in Firefox, and the inline background-image when I view it in Edge. That's the same behavior I get when I view the web page.\nI completely agree that we want a server side rendering to emit the mask, but my experience is that we already get that. Am I doing something wrong?. @edemaine , I can omit the mask in all cases, but the non-mask solution relies on a XMLHttpRequest, which is slow.\n@glebm, I would agree with your suggestion. If I interpret caniuse correctly, the upcoming version of Firefox will change from partial mask support to full support. That would leave behind only IE and Edge. However, I'm not sure that the KaTeX owners would agree with you and me. If Edge does look at the output from such a server-side installation, it will render a span-wide blob of color instead of the subject matter.\nSo I thank both of you for the education on server-side behavior. This affects not just \\color but also \\cancel, another case where I have different code for IE and Edge.\nRegarding \\cancel, I'm going to use background-image SVGs for server-side rendering, just as I use it now for IE and Edge. The only drawback of the SVGs in most browsers is that the line does not get thicker when giant fonts sizes are employed. A 1 px line looks good in most common font sizes, so that is a good fall-back.\nOn the subject of \\color, I need some guidance from the KaTeX owners as to what they will accept. The options are:\n1. Do not support \\color.\n2. Support \\color by a (slow) XMLHttpRequest in all cases.\n3.  Use mask when it is supported. Use mask for server-side installations even\nthough Edge will not render it properly.\n4.  Use mask when I can use feature detection to verify that it is supported. Use a XMLHttpRequest  for all server-side installations.. That's a very good point. Since our conversation, I've added some SVG files. The tactic of making composite images via CSS was giving some poor rendering issues. So the SVG code is now 32 KB. Say about 40 KB once I add the URL escape codes. By inlining that into the JavaScript, we could eliminate all XMLHttpRequest's. So now we can add option:\n\nAdd 40 KB of SVG code inline in the JavaScript.  No XMLHttpRequest, ever.\n\nI still need some guidance from KaTeX owners. Which option would you prefer?. Agreed.. @kevinbarabash,  Some of the SVGs are nested, so that the inner SVG can keep an undisturbed aspect ratio. For instance, we want an arrow head to be un-distorted when the arrow gets longer or shorter. In these files, each arrow SVG contains an arrow that is 400 ems long in the inner SVG. The outer SVG is set to match the dimensions defined for it by the CSS. The outer SVG clips the inner SVG; it does not stretch the inner SVG. That's the purpose of the preserveAspectRatio=\"xMinYMin slice\" notation.\nOf course, we do want some of the SVGs, like \\cancel, to vary their aspect ratio. Those files do not get the nested SVG treatment.. Inside a \\frac or \\sqrt, the bounding box looks good:\n\nThis screenshot, by the way, was done with code that was slightly tweaked:\ngroupTypes.transform = function(group, options) {\n    const span = groupTypes.text(group, options);\n    const dy = calculateSize(group.value.dy.value, options.style);\n    if (dy > 0) {\n        span.height += dy;\n    } else if (dy < 0) {\n        span.depth -= dy;\n    }\n    span.style.top = -dy + \"em\";\n    span.style.position = \"relative\";\n    return span;\n};\n. Now that you ask me, yes they did. Odd. I was only trying to clean it up, not change how it worked. Here's a screenshot from the original code:\n\nNow that I need to take this more seriously, here\u2019s a version that restores the outer if statement.\ngroupTypes.transform = function(group, options) {\n    const span = groupTypes.text(group, options);\n    if (group.value.dy) {\n        const dy = calculateSize(group.value.dy.value, options.style);\n        if (dy > 0) {\n            span.height += dy;\n        } else if (dy < 0) {\n            span.depth -= dy;\n        }\n        span.style.top = -dy + \"em\";\n        span.style.position = \"relative\";\n    }\n    return span;\n};\nThat code gives me the good results.. 2 * skew returns a positive number. Subtracting that number from 100% makes the result less than 100%. So we're making the width shorter. \nAnd that's a good thing. We want the accent to be short enough that it only covers the top part of the subject character, not the top part and the sloping side. E.g. . When I passed a height much greater than 1.0 em to buildCommon.makeVList, it would respond to maxFontSize in a curious way. When given a low value of maxFontSize, makeVList would create a span that acted as if it had a large value of negative margin. If I passed a large value of maxFontSize, makeVList would create a span with too much height. [I think I remember those details correctly. It's been a couple of months.]\nI never found a way to pass a value that was just right. I'm not sure it is possible. In the end, I found it more reliable to write code that I could understand.\nI haven't looked at how llap works. I'll do that. But keep in mind that \\cancel has to make a background image appear in front of its subject matter. That complicates things.. .boxed {\n        display: inline-block;\n        padding: 0 0.278em 0 0.25em;\n        border: 0.04em solid black;\n    }. ```\n    // \\cancel, \\bcancel, and \\xcancel\n    .outer-wrap {\n        display: inline-block;\n        position: relative;\n    > .inner-wrap {\n        display: inline-block;\n        padding: 0;\n    }\n\n    > .strike {\n        width: 100%;\n        display: block;\n        position: absolute;\n\n```\netc...\nPutting a position-absolute span inside of a position-relative span, as suggested here, was my way of dealing with positioning when I could not get makeVList to work.. I used http://glyphrstudio.com/online/ to convert the KaTeX Main and KaTeX AMS ttf font files to SVG format. I then used the path d= ... geometry from each glyph to create the SVG files used in this PR. The fonts conveniently extracted into SVG paths with a scale in which 1000 inside the SVG viewBox equaled 1 em in the document. \n0.334 is because the arrowhead (from KaTeX AMS) is 334 units tall inside the font. Similarly, the KaTeX Main arrowhead, used for extensible arrows, is 522 units tall inside the font, and I split that distance around the math axis.. Per The TeXbook, page 443, rule 12:\nTeX has a series of glyphs available for \\widetilde and \\widehat. It calculates the length of the subject matter and uses the shortest glyph that is longer than the subject matter. When the subject matter is longer than any of the glyphs, TeX puts in the longest one it has. So there can be a mis-match in length, like this: .\nI believe the MnSymbols package has more and longer glyphs to pick from, but it also eventually runs out of glyphs.\nMy basic scheme doesn't know when to stop. It will match the width of any subject matter.  And these images start to look flat when the aspect ratio gets too small. So for long strings, I use a taller image. . I do not, not, not want to stretch these images vertically. Then the line thickness would scale with the height and they would look terrible. So I manage height by choosing a different SVG file when I want a taller image.  Both \\widehat and \\widetilde have four different SVG image files available. \n\\widehat and \\widetilde have different height break points; it was just different managing a smooth curve versus a sharp hat. But in both cases, the tallest SVG is 0.34ems tall. So that is where I stop making image choices and set a 0.34em height.. Correct. .isOver, when true, indicates an overbrace or overbracket, as opposed to an underbrace or underbracket.. This particular section of code applies only to \\overbracket and \\underbracket, not any of the other stretchy wide elements. These two functions were created by the mathtools package, which gave them two optional arguments. One of the optional arguments lets the author choose a custom height (pp 12\u201313). So I could not hard-code a height into the CSS. It has to be done inline.\nThe heights of widehat and widetilde, on the other hand, are controlled by choosing from a menu of four different classes.\n.widehat1 {\n        height: 0.16em;\n        background-image: url(images/widehat1.svg);\n    }\n    .widehat2 {\n        height: 0.23em;\n        background-image: url(images/widehat2.svg);\n    }\n    .widehat3 {\n        height: 0.28em;\n        background-image: url(images/widehat3.svg);\n    }\n    .widehat4 {\n        height: 0.34em;\n        background-image: url(images/widehat4.svg);\n    }. Very much a live comment.\nThis class sets a background-image and sets the span height. In the next two line of code, I apply two more classes, which CSS will apply only to browsers that support CSS mask.  \nBecause IE and Edge don't support mask, they will render the fall back solution defined in the first class, a black background-image.  And the CSS for span height, defined by the first class, remains valid for all browsers.\nIn the source code, I'll expand the comment a bit more. Hopefully, it will be more clear what I'm doing.. Yes. If the author writes \\underbrace{...}^{note} (don't ask me why), then (group.value.sup) will be true and group.value.base.value.isOver will be false. Then control over group.value.sup will pass to groupTypes.supsub to be written as a normal superscript.. General edit. I misread this question with my first answer. Let me try again.\nYour comment points in the right direction. We need special treatment for \\underbrace and \\underbracket just as much as wee want special treatment for \\overbrace and \\overbracket. But in all cases, that special treatment is conditional on a match between over/under and sup/sub. \nSo I only set isBrace to TRUE inside an if that tests for  that match.  If isSup is FALSE then a FALSE isOver will trigger the isBrace value. Otherwise, we want the supsub to be treated like a regular superscript or subscript.. Yep.\nYou know, in MathML, they actually have an accentunder tag. I was following that and not the camelCase standard . My bad. I'll change it.. Maybe I should have read this comment before I got pedantic in the previous one.. <...sound of palm hitting forehead...>. That makes perfect sense. I've tested it on Firefox and it renders fine. So I'll do it.. Well, they both exist: \nThe \\Overrightarrow accent is pretty obscure. It comes from a package called overrightarrow. But the SVG file is already necessary for an extensible arrow. So this accent only costs a few lines of CSS.. Yes, they are all stretchy. But not all of them are shifty.\nThe TeXbook, p 443, rule 12, describes that when an accent is placed over a single character, the accent is shifted to the right by the \\skewchar of its font. And the previously existing accents (i.e. !isStretchy) all do that shift.  TeX also shifts \\widehat and \\widetilde.\nLaTex does not shift \\overrightarrow or \\overrightharpoon. I did that on my own because I think they look dopey unshifted. If you want more TeX purity, let me know and I take the shift off those two.. Thank you.. Yep.. The SVG spec also has a clever way to use nested SVGs that stretch to arbitrary length. In my research, I found bug reports to Microsoft (in 2015!) that complained that the stretchers were not working. So I started long and used a slice. Per my BrowserStack testing, this method works everywhere including IE 9+. I'm not sure how Jasmine would know whether or not a shift occurred. That sounds more like a Screenshotter thing. Unless I'm missing something?. Will do.. I confess that this came from trial and error. I wrote this bit of code before I had learned anything about how to read TeX macros. I was at the time sincerely hoping that someone would come along and put me right.\nI now know more than I did and I'll take a look. I may yet need some help. I completely agree.. I also like the idea of keeping the logic together. Before I started, the arguments passed to this function were: shouldHandleSupSub(group.value.base, options). So inside the function, group.value.sub is unavailable. \nI could pass group to the function instead of group.value.base. Then all of this bit of logic can be done in one location. Of course, other parts of the function would also need to be tweaked.. Yep.. The preceding if/else-if block will select a class and set a default height. So it is necessary. \nThe code within the if (utils.contains([\"overbracket\", \"underbracket\"], label)) { block is there for cases where the author has used optional arguments to set custom height and line weight.. I'll make the change.. Say that a author writes \\overbrace{long equation}^{short note}. Then group.type will be \"supsub\" and group.value.base corresponds to long equation. . No particular reason for shift. For the extensible arrows, I had to use makeVList in individualShift mode and I got accustomed to it. There is no difference in behavior as far as I know. But your point is well taken. firstBaseline mode would be clearer. I'll change it.\nOn the question of moving that code block, well I could move it, of course, but that would mean writing it twice.  The vlist in question consists of the subject matter and the brace: \nI write that vlist first. It's not optional, so it is outside the if block. \nIf there is a note needed above the brace, then I need to wrap the first vlist with another one to show the note: \nAnd I can't put all three items in the same vlist. If I did, then a long note might control the width of the brace. I want the brace width to be controlled only by the subject matter: . I'm not removing the first letter. I'm removing the opening \\ character. As you note elsewhere, it may have been a good idea to strip off that \\ in functions.js.. I've made the change.. Yes. I would also like to point out that the new accents include harpoons. They are like overline in that they need a healthy kern distance. Otherwise, a long flat line looks like it is pasted to the top of the subject matter. Agreed.. Will do.. I'll take the shift off the two arrows.\nIf we're going to be that fastidious, then we will need to talk about the arrowheads on accents. LaTeX arrow accents are different from AMS-LaTeX arrow accents which are different from MnSymbol arrow accents. Given that discrepancy, I went my own way and used an arrowhead that is slightly different than any of them. I'll work up a comparison for use in the conversation.. Well, \\widehat, which Jasmine already tests, happens to be both stretchy and shifty. I will write a test for one that is not shifty, say \\overrightarrow. And I'll edit the output strings to make it more clear which is which.. Done.. Done.. General edit.\nFor accents, I started by using the same kern as \\overline, that is, 3 *  ruleWidth.  But I got poor results for clearance under a radical, as shown by the second example below. I changed to 2 * ruleWidth in order to achieve the clearance in the first example below.\n\nI am working up a more thorough discussion of arrow accents in a comment much below, so I suggest we continue this conversation there.\n. It's time to talk about arrow accents. Below are four images of the exact same function.\n\nThat's from LaTeX, AMS-LaTeX,  the mathabax package, and the MnSymbol package. Why are they all so different? Well, I have a guess. The following is from AMS-LaTeX:\n\nOne of those accents is not like the others. That is, the \\overrightarrow is much taller than the others. AMS fixed the collision that was in plain LaTeX.  But their glyph is still much taller than other accents. I think mathabax and MnSymbol are sized more like accents.\nSo I used an arrowhead from KaTeX-AMS font. It's 0.334 em high instead of 0.522 em high. For comparison, mine is in the middle of this list:\n\nSo now we have a choice to make. Naturally, I think my arrow is the best choice. MathJax chose to follow the AMS-LaTeX accent. I can support either my arrow or the AMS-LaTeX one. I would like to avoid the other three.\nOne final item: with my arrow, I can use the same (2 * ruleWidth) kern for all the stretchy accents. If I follow AMS-LaTeX, I'll need to vary that. As you can see, there is no clearance at all beneath the AMS arrowhead. Harpoon accents really need some space there so an AMS arrow would have to be kerned differently than a harpoon.\nLet me know what you decide.\n. The \\vec glyph is odd. I've now looked at the geometry of a lot of the arrow glyphs in these fonts and they all have a arrow shaft thickness of exactly 0.04 em. Except \\vec. It's thicker.. Thank you for the nudge to get this right. The relevant macro is from ams:\n\\newcommand{\\boxed}[1]{\\fbox{\\m@th$\\displaystyle#1$}}\nAnd LaTeX source2e defines parameters for \\fbox to be: \\fboxsep = 3pt;  \\fboxrule = .4pt\nSo I need to adjust the constants you alluded to. Also the CSS. Not only that, but I also need to set the innerGroup in Style.DISPLAY.  I'll do all of those things.\n. Yep.. I never heard back with a definite decision. So I've changed the accent arrows to match AMS-LaTeX. . That line of code did not shorten the image. So I changed it. The current line includes an extra pair of parens to emphasize the correct  operator precedence: \"calc(100% - \" + (2 * skew) + \"em) 100%\". Good idea, to use span.width. I'll do that.\nRe: multiplier. (1) Because it works empirically.  (2) The function traverseSequence has already taken care of that for small delimiters. The relevant code being:\n````\n        // Small delimiters are scaled down versions of the same font, so we\n        // account for the style change size.\n    if (sequence[i].type === \"small\") {\n        const newOptions = options.havingBaseStyle(sequence[i].style);\n        heightDepth *= newOptions.sizeMultiplier;\n    }\n\n```. Done.. I'll change it tobody.depth`.. Yeah, I was writing font names for the surds and I changed this to be consistent.. Well, I began that file strictly as a copyright notice. It seemed reasonable at the time to call it \"Image Licensing.txt\". The technical comments came later. Nothing makes any call to this file, so I have no strong feelings on what the file name is.\nThe KaTeX home page, https://khan.github.io/KaTeX/ and the test page http://utensil-site.github.io/available-in-katex/ both get their KaTeX by calling \n<script src=\"bower_components/katex/dist/katex.min.js\" type=\"text/javascript\"></script>. Well, delim.style is set by function traverseSequence after it has iterated through a sequence of sizes and styles, so I too thought that options.havingBaseStyle(delim.style) would give me the correct sizeMultiplier. But it isn't reliable. Believe me, I tried. It would often give me surds that were too large.\nIn the end, I had to do my own test to get the style that would give the correct sizeMultiplier. I don't know if traverseSequence is passing bad style choices to other delimiters, but I do know that I can't trust it tp pick script or scriptscript style for a surd.. Good point. I'll move the information.. In a numerator or a denominator, text-align is set to center. When I place a \\sqrt into either one, I have to protect the surd from that alignment or else I get this: \n\n. Re: template strings. Yes, indeed. And that's true for the comments below, as well.. BTW, the difference between my test and the one inside traverseSequence is that my test used height / options.sizeMultiplier instead of height as the reference for comparison.. Yes, traverseSequence does make the choice among small, large, and stacked. Within large, it also makes the choice among size1, size2, size3, and size4. It seems to work well most of the time. The screenshots show that the outer superscript surd is size1 in KaTeX and size2 in LaTeX. Other than that, the only problems I see are among choices of style for small surds.\nIn a few days, I'll do some more testing for various delimiters and I'll try to put them in scriptscript contexts like this one. First, I want to fix issues #795 and #798.. It hasn't gone anywhere that I know of. The proposed sqrt images are overlaid on the arguments. That is, the image spans vertically from above the argument to below the argument. They are not stacked above the arguments like the old sqrt-line span. So I called makeVList in individualShift mode instead of in firstBaseline mode. \nSo the question is: What is the proper value of imgShift? I used:\n``\nconst imgShift = img.height - inner.height - lineClearance - ruleWidth;\n````\n... which is my attempt to reproduce the previous behavior.. Oh, excuse me. You said **on top of** the horizontal rule. You're right, I missed that one. I'll fix it.. I originally wrote bothsvgSpanandencloseSpanso the the first closing>was in the template string, not ininnerSVG.  But insvgSpan, I found that some of the SVGs were not nested, so I had to remove the>from of the template string and put it intoinnerSVG`.\nIn encloseSpan, I left that closing > in the template string. I think it makes more sense that way.. If we try for an exact 50%-50% match, then floating point rounding error can sometimes create a 1 screen-pixel vertical white line in the middle of the arrow shaft. Setting one side to 50.1% is enough overlap to avoid this. Except one element, I think the braces, where Firefox needed something larger.. In cases where no text argument is given, I am trying to render an element that is the same length as the base glyph. That matches LaTeX behavior.\nI did the same thing with the original stretchy elements, but the min-width was in the static CSS.. Very much needed. If that text-align: left is not applied on just the right span, then the elements render smaller, lower, and off to the right.. Exception: minWidth for the braces is set large enough to avoid a discontinuity where sloping parts of the brace match up.. Yes, you have to open it to see the glorious sight of 575 lines of deleted code.. Software again. It's written to always replace quotation marks with either &quot; or <q> tags.. Using defineMacro would work very well. I'll change it.. It seemed to me that \\mathllap is a core command. I found \\llap to be less interesting. But your point is well taken. This line is supposed to be testing a text parser.  I'll change it back.. I'll add some tests.. Yes, I suppose we do care. I just checked and AMS LaTeX ignores the \\smash if I put another character in there. Here's an example and the first exponent has \\smash[tab]{2}\n\nI'll change the code to act in the same way.. I'll do that.. Well, now I have a better answer to your question about the test. Since \\lap is a test mode function, we should not expect it to work properly when given math mode arguments, such as \\left. So the tests really should be revised to test \\mathllap and not \\lllap.. \\rotatebox and \\cancelto cannot be done with CSS trickery, at least not any that I can think of. So it may yet be necessary to know glyph widths and also something equivalent to makeVList to find layout widths. \nOther than those two functions, I can think of no uses for horizontal font metrics. Okay, I'll do that.. A single attributes arg might be simpler in the constructor. But it also might be more complex in stretchy.js I'll look at it.. I discovered opentype.js. It made it easier to quickly look at the width of each glyph. So instead of using the width from one glyph and applying it several times, I got a number that matched that specific glyph. For instance, \\overrightarrow is exactly 888 units width inside the font.. Will do.. When I wrote the geometry for the absurdly long arrow shafts, I made the end of each shaft take sharp 90\u00b0 corners. So those points usually landed on x=400000.\nIn contrast, the KaTeX font glyphs don't have many sharp corners. If the font designer started the path at the right end of the glyph, it was never exactly on the edge of the border box. There is always a radius there.. I can't think of any other types at the moment, but I left it open in case I thought of something later.. From the glyph geometry.  The vertical path length is variable, but it lands on a point that is 54 units from the bottom of the surd.\n\nAnd why, you ask, isn't there another calculation for the vertical length on the left edge? That's because I sequenced the points so that the path starts at the top of that left edge. The final command of a path z tells the browser to close the path back to the beginning point. So I've made the browser do that calculation for me.. In previous versions, I treated extensible arrows slightly differently than the other SVGs. If an extensible arrow had a total height of 0.522 ems, then the values I returned to buildHTML had a arrowBody.height of 0.261 and a arrowBody.depth of 0.261. Now the code in stretchy.js is so array-driven, I found it easier to make things more consistent. Now, even extensible arrows return .height with their overall height value and return .depth as zero.\nSo the code inside buildHTML had to adjust and split that value in half, so that the arrow is centered on the math axis.. A function with an empty argument, say \\overrightarrow{} will be rendered with the min-width. I suppose that min-width might also come into play if the argument is a single, narrow letter like \\imath.  . Right. I would start with path geometry from a glyph. Say something like this:\n\nThen I would:\n1.  Run a little vector transformation script that would shift the whole arrow to the right until its right tip was at x=400000.\n2. Edit the points at the left end of the path so they were back at x=0.\nThe result is a very long arrow:\n\nOkay, so it's hard to see. But on the gray background, that thin line is an arrow and there is an arrow head at one end, I promise. That absurdly long arrow is the inner SVG. The outer SVG is a window that only shows one small section at one end of the long arrow. The arrow head geometry is untouched, relatively. So I'm not really stretching an arrow; I'm really just revealing just enough arrow shaft to match the width of the subject matter.\n. Correction. That landing point is 14 units from the bottom of the surd (885 - 871 = 14). The path edge in question runs from the bottom of the viniculum to the landing point. The viniculum is 40 units thick. So the math is:\nRelative distance from point to point = Overall height - 14 - 40 =  Overall height - 54. Sure. I'll leave a note in both stretchy.js and in in buildHTML.js.. Correct. I would be happy to get rid of the macro if I knew how to make mathmlBuilder  return multiple nodes.. Yes, that works out well. I can eliminate the macro entirely.. This line is not added in this PR. It just moved a bit. . The fbox border takes the current text color. The options.getColor() will do that successfully even if the color was defined using the KA one argument custom colors.  See PR #792.\nI don't think we want to support behavior that for \\colorbox and \\fcolorbox. I think these two proposed functions should get only the colors specified in the arguments to the function. That space should be a \\u2006.. I take no credit for that comment. It was there before I got here.. I'll give 100% a try, but I don't think it will work. I'm now defining the viewBox dimensions in the same SVG as the width attribute. The height has a factor of 1000, so I think the width needs consistent treatment.. I've consistently used 400 ems for all the wide paths. I suppose that might not be obvious to someone looking at this cold. I'll look at it.. It's not the best choice of variable names. For the CSS minWidth, I used the actual width of the ink in the glyph. What I have called surdwidth is actually the horizontal advance value from the font.  Horizontal advance value is of course, a little wider than the ink.\nI might adjust the surdwidth name and re-commit. . Correct.. I will also adjust the values of min-width. The paths in these surds have the xMin value baked into the SVG paths. So I'll increase each min-width by that amount.. I was wrong. It does work to use width='100%'. Not only that but when width='100%', I can remove the CSS oveflow:hidden and it still works. So consider that done.\nI wonder if that will cause sub-pixel changes in all the screenshots.. I retract my last statement. When I use width='100%, IE does not slice off the long tail. I going back to width='400em' and CSS overflow:hidden.. Final word. It turns out that it doesn't matter if I write width='400em' or width='100%'. It would matter, except that IE will not work unless I include CSS overflow:hidden. Once I include the CSS condition, both widths work. I'm going with 400em.. > The comment is good enough for now.\nLet's suppose that someone other than me comes along and writes a PR with an SVG in it. They will need to coordinate viewBox geometry and document geometry. They will need to realize this early, when they are arranging the <path> geometry.  So I am trying to leave multiple comments regarding the 1000:1 ratio. \nSuch is my reasoning for writing 400em. Reasoning with which you may disagree, but there it is.. A constant for 400em would do no harm. But the more critical concept is the 1000:1 ratio between ems and viewBox geometry. Some future contributor could waste a lot of time if they don't realize that early in their work. So any constant, defined in one place, would be improved by adding multiple comments, scattered widely.. Yes, I have seen browsers exhibit a one screen-pixel gap when I tried to set widths to exactly 50%. It happened occasionally, not frequently. It happened in multiple browsers, not any particular browser. I think the behavior is probably due to floating point rounding error.\nNow to be precise, I observed those gaps when I was using SVGs in background images. I suppose that the current inline SVGs, written directly into the DOM, might act differently. But I feel a lot more secure knowing that I have that 0.1% overlap.. I can make the names consistent as viewBoxWidth and viewBoxHeight. To do that, I'll have to remove the const from the destructuring statement:\nconst [paths, gWidth, vbHeight, alignOne] = katexImagesData[label];\n. Exactly.. I missed that. Thanks for the comment.. This cheat sheet gives the equivalence. You can also type in \\sin x  into the LaTeX box at iMathEQ and ask it to give you their version of the equivalent MathML.. This page is from a better source.. It's not just a Windows thing. According to this post,192 dpi and 2 dppx are the same thing. Now, I know that a blog post from W3C is not as authoritative as a W3C standard, but I still take it as pretty good information.\nAnd by using dpi, we get support from IE, which does not support dppx.. numSvgChildren is always 1, 2, or 3. If I get creative, maybe I can think of reasons for numSvgChildren > 3 but I can't think of any reasons for numSvgChildren = 0.. We can't return the span yet at that point. We still have to set some height and min-width properties later in the function.. Right you are. I'll make the change and resubmit.. Perhaps katex-ruby from @glebm would be a good addition.. Your guess is on the money. I tend to code in the Consolas font, in which \u222b is available, but not the other characters in this PR. If you would like to see some of any of them changed, let me know.. Sure. I'll move it to a constant outside the function.. Ditto.. Will do.. Done.. The hide-tail class contains the CSS overflow: hidden;. So the height that gets rendered is the  line.style.height set by buildHTML.makeLineSpan().\nClass frac-line has always contained the CSS width: 100%;, so the width is being set the way it always has been set.. Clarification: My response above pertained to \\frac, \\overline, and \\underline. I did not change \\rule in this PR, so it is still using a top-border to render a line.. frac-line already has that min-height set. That was the purpose of PR #931.. I was following the example set by @marcianx during the conversion of stretchy.js to flow.. Yep.. Done.. I don't see a difference in that distinction. From buildCommon.makeLineSpan, we have \n~~~\nline.height = options.fontMetrics().defaultRuleThickness;\n~~~\nSo the proposed 2 lines of space in the SVG plus the one-line-high kern sum up to the same distance as the previous 3 * line height. I'll amplify the comment, but I don't see any other action to take. Am I missing something?. Yes. \n\n. Issue #970 reported a disappearing vertical separator line, so this is a valid action to take.\nRe: horizontal layout: Good catch. I changed the negative margin-left amount, so the line has the correct space to its left. But the wider span must widen the space to its right.  No instant, obvious fix comes to mind. I'll think it over.. This is really cool and yet I have a question. Many, perhaps most, of these characters are not in Times New Roman, so we don't even know which font will display. An yet at least some of these characters are taller than an \"M\".\n\nIs there a widely-used system font that contains all these characters?  Then we could specify it in KaTeX CSS and get some font metrics, at least height and depth.\n. @kevinbarabash I added that class when we changed from background-image SVGs to inline SVGs in PR #807. My experience then was  if that text-align: left was not applied on just the right span, then the elements would render smaller, lower, and off to the right. It was a large, very noticeable difference.\nI don't know why it would be different now.. The short upwards harpoon has an interference that doesn't occur in the other extensible arrows. So I needed to bump the text up to miss the descender.. The problem is that I'm trying to use one arrow to emulate both mathtools and mhchem. Those two packages both render a double-ended harpoon, and they are close, but not quite identical.  mathtools uses a larger arrow head. mhchem has a longer min-length.\nMy motivation has been to minimize the amount of code in svgGeometry.js. If you don't mind adding another dozen lines of code, then I could get a closer match to the original mhchem.. Two issues here:\n\n\nI need to retract part of what I said before. The min-length is independent of the path geometry in svgGeometry.js. So, yes, I can give all the mhchem reaction arrows the 2.0em min-length defined in the original mhchem package. To do that, I have to invent another four brand-new function names, then in the katexImagesData object, I can define the min-length as we want. That adds eight lines of code. But no new paths are necessary for min-length.\n\n\nmhchem has seven reaction arrows, not just the three new ones in this PR.  For the others, the proposed mhchem extension can make calls to extensible arrows that already exist. That's the code sharing I was referring to. And my stinginess with code means that mhchem will have to call the mathtools arrow \\xrightleftharpoons, which has larger arrowheads than the original mhchem package.\n\n\nTo sum up: I can customize the min-length with another 8 line of code and I can customize the arrowhead size with a dozen lines more.. Will do.. The vertical line constant value is what I found in the code when I changed it from a span border to an SVG path. I did not go back to underlying sources to check if that was correct.. No. Those two new lines are only necessary for IE. In earlier work, I had put those two lines of CSS into class hide-tail and then nested hide-tail inside a stretchy span. I found here that I could save one nesting level by writing those two new lines into stretchy.  I could possibly refactor some other code and save a nesting level elsewhere, but I've got other priorities right now.. Yup.. sqrtName can take one of six values:, \"sqrtMain\", \"sqrtSize1\", \"sqrtSize2\", \"sqrtSize3\", \"sqrtSize4\", \"sqrtTall\". > a local function only called within this file, \nI agree that not much is gained by another restriction.. Yes, \\hbox is a stand alone function and can be used without \\raise. I'm not sure why anyone would want to do so, at least so long as KaTeX does not enable line breaks.. The W3C validator objected. So I took it out.. I don't have a strong preference. Our READ.ME says to use the Cloudflare CDN, so I used it here to match. There have been a couple times when I have updated the function support page within one day of the release. I then use unpkg.com because the Cloudflare CDN can take 2 or 3 three days to propagate the files.\nIf you feel strongly about unpkg.com, I'll change it this time, too.. Issue #1075 occurs when the auto-render extension encounters a \\\\[0.3em] row separator inside a pair of \\[...\\] math delimiters. Until we fix that bug, I thought I would nudge people toward \\cr[0.3em].. Yep. I'll change it.. I disagree.\nI expect that some authors will copy-and-paste directly from the function support page into their text editor. So when I say that characters are available for \"Direct Input\", I need to supply characters at the correct Unicode code point. Otherwise, someone will copy what they think is a double-struck C, but will be a normal C when it lands in their text editor.\nSo I want to keep these characters as is. I'm sorry about the font, but I want to minimize author confusion.. Why not?. > Are missing characters intentional?\nThe missing sans-serif \"a\" is not intentional. I don't see any other missing characters. This is a PR for characters in the Unicode range from U+1D4D0 to U+1D4E9. A letter like \"\u2102\" does not not belong in this PR because its code point is U+2102, in the Unicode basic multilingual plane.\n\nAre metrics identical with Math-Italic?\n\nNo, but they are much closer to correct than the just using the metrics for the letter \"M\", as we do elsewhere for some Unicode characters. The biggest discrepancy is in the Fraktur lower case letters. Some of them, such as \ud835\udd37, have descenders that are not present in Math-Italic.. Also, the style guide in the KaTeX Contributing page instructs us to: \"declare variables in the outermost scope that they are used\".. Okay. Revision pending.. Error on my part. I wasn't aware that we had font metrics for fonts other than Main and AMS. Now, having actually looked into file fontMetricsData, I see that I don't need to use a proxy for the metrics.\nI'll revise the PR to use the correct metrics. No proxy is necessary. This PR calls only on KaTeX fonts and does not have a system font fall back.. Will do.. Well, that's a problem. Thank you for pointing this out. I will fix it, but maybe not right away. I have a busy few days ahead.. @ylemkimon I took a look and things are in this PR fine as they are. To test, I did a console.log(metrics); on a few letters. A clear example is the letter \"z\".  \n\nIn default Main-Italic, the depth of letter\"z\" should be zero and that is exactly what the console reports. \nIn Fraktur, the depth of letter \"\ud835\udd37\", per fontMetrics.js, should be 0.18906. Again, that's exactly what the console reports when I input \"\ud835\udd37\".\nWhen I input frak{z}, the console again reports a depth of 0.18906\n\nRemember that the data in fontMetrics.js` does not go up to an index value of U+1D400. The letters in the KaTeX fonts are placed at their ASCII char codes, not their Unicode code points. The data is indexed the same way. So it's correct to ask for metrics of the letter \"z\" in my example, or \"A\" in your example.\nI don't know how you got metrics for \\mathit{\ud835\udd04}. When I tried to input \\mathit{\ud835\udd04}, KaTeX gave me a parse error. If it would parse, one could argue that the proper metrics would indeed be for \"A\". According to @rrandallcainc in PR #1111, math commands, such as \\mathit \"change all aspects of the font (weight, shape, and family)\".\nI think this PR, as written, is getting the proper metrics.. > Also, it seems that the \\boldsymbol doesn't bolden given character, instead it renders in bold italic.\nA bold italic is exactly what \\boldsymbol should do. It's part of the AMS package. Here's an rendering of \\boldsymbol{ABD} from quicklatex.com:  \nShould \\mathit{\ud835\udd04} override the Fraktur font and render an A? That's an interesting question. I'll do some research into how XeTeX behaves. If the answer turns out to be yes, that will take me some time. I'm booked up for the next few days.. So \\boldsymbol{\ud835\udda0} should give \ud835\udc68 rather than \ud835\udf56, right?\nYep.. Correct. Any characters from that range will be unsupported. I couldn't think of a reason why anyone would want to use characters from that range, since the default is already italic.\nBut perhaps it's just that my imagination isn't broad enough. Let me know if you want to include that range in this PR.. Good point. I'll adjust the comment.. I'll work on it.. Very true. I'll add the italic Latin letters.  While we're at it, the following characters would be easy to code in at this time:\n\nA-Z a-z 0-9 sans serif\nA-Z a-z 0-9 sans serif bold\nA-Z a-z sans serif italic\nA-Z a-z 0-9 monospace\n0-9 bold\n\nShould I add them as well?. I went ahead and added those characters in the most recent commit.. I tried adding the types that you suggested. The result was an enormous number of flow errors. My flow skills are not strong.\nSo I have reverted to specifying a string in the most recent commit.. Done.. \u22d9 was relocated, not removed. In PR #1273, @kevinbarabash  asked me to place \u22d9 and \u22d8 adjacent to each other in the test string, so I moved \u22d9 from line 2987 to the end of line 2979. \nUnfortunately that move causes a merge conflict with this PR. I thought I had dealt with the conflict successfully. If there is something else I should do, let me know.. > What if there's an ordgroup in an ordgroup?\nThen the result will have a CSS class mordgroup, that is, a class with no style rules attached. Clearly that is not ideal, but I didn't really want to do a recursive search.\nIn the current KaTeX release, \\overset and \\underset both assign \\mathop spacing regardless of the argument type. Would it be okay if I searched for an a (bin|rel|ord) type in the top two levels, use it if found, but use \\mathop for a default if the ordgroups go deeper?. @edemaine I just made a commit that tries to resolve nested ordgroups. Thank you for the nudge. What I had before was sloppy.\nMind you, what I have now does not seem particularly clean, but nothing better came to mind.. Indentation fixed. Thanks for the note.. @ylemkimon Thank you for adding suppressBaseShift to the flow type enumeration. I was trying to think of a way to make \\underset work without doing that. I was getting nowhere.. @ylemkimon Stand by. I've got a code cleanup commit coming in about an hour. It will change this section of the code.. Will do.. Until just now, I had never tried more than two \\hlines. while loop coming right up.. @ylemkimon We need a loop in order to handle multiple \\hlines. So I think you mean that the code could read something like:\nfor (let i = 1; i <= numHLinesBeforeRow[0]; i++) {\n        if (i >  1) {\n            totalHeight += 0.25;\n        }\n        hlinePos.push(totalHeight);\n    }\nThat would be simpler for a human to read. But force of habit makes me try to avoid putting conditional statements inside a loop. Maybe this is not the place for that kind of thing. After all, we're not likely to get very many \\hlines. \nWould you prefer my suggested revision to the current code?. I like it.. That's an outstanding suggestion. I'll do it.. > I thought hlinePos is added only once\nWhich goes to show that code I suggested above would indeed be easier for a human to read. The speed loss with so few \\hlines is negligible. I'll make the change.. Working on it.. Done.. Done. In my first draft, I had this sentence written in almost the exact words that you suggest. I cut it back because I'm trying to avoid explanation that just duplicates LaTeX documentation. When KaTeX behavior differs in subtle ways from LaTeX or MathJax, then I have to explain things, but otherwise this is a document that shows examples but does not explain. That way, I can fit the document onto a single HTML page.\nMaybe I'll think of some very concise way to mention where the breaks will come. But if not, I'm inclined to let people learn that by observation or by looking up the LaTeX docs. . > Why did auto-render switch to cloudflare?\nBecause cloudflare is what we still have written in the auto-render README, and I copied and pasted it without looking at it. You're right though, we should use jsdelivr and we should change that README.. I promise that I'll put \\\\[distance] back in as soon as we fix auto-render.  I'm pretty sure that we'll make the next release.. I just tried something equivalent to:\nexpect(\"\ud835\udc00 = \ud835\udc1a\").toBuildLike(\"\\\\mathbf{A} = \\\\mathbf{a}\");\nIt turns out that they don't build in an identical way. \\mathbf{A} returns a mord span wrapped inside a mord mathbf span. \"\ud835\udc00\" returns a single mord mathbf span. They render in an equivalent way, but the test doesn't like it.. @edemaine That one works! Cool!. @ylemkimon Yes, that will work. Is that faster?. Ah, that makes sense. Thank you for pointing it out.. Well that's embarrassing. @ylemkimon thank you for catching that.  Fixed now.. And for corroboration, here's a snapshot.\n\n. @edemaine  The same thing occurred to me. . Sure. I can get to it later this week.. The result we're getting on this test is not just an artifact of the testing system. I've put A\u0301C\u0301  A\u0301\\acute C into a strict mode test page and verified that it does render without an error message.\nSince this PR is just about applying strict to tests, I'm not going to try to overcome the underlying issue. On this particular test, I will omit the strict.. On a test page, this string does raise a strict-mode error. I don't know why jest did not flag it. I will omit strict from this line.. Ditto.. The \u2209 entry is done via macro, not from symbols.js. It renders just fine. But KaTeX sends a console message that says, \"No character metrics for '\u2209' in style 'Main-Regular'\", which jest flags as an error in the build.\nIs that a bug? Should it render without the console message?. I was mistaken earlier when I said it was a macro. It is in fact in symbols.js.  Here's the line:\ndefineSymbol(math, main, rel, \"\\u2209\", \"\\\\notin\", true);\nI don't see anything wrong with that line of code. Maybe there is something wonky in metrics?. @kevinbarabash If I remember correctly, \\notin was created shortly before \\not was available. . \\kern provides horizontal space. I'm not aware of any way to make it provide a vertical spacing function. Am I missing something?. \\u22ee, as a macro, will expand to \\vdots. Then the \\vdots macro will call the symbol now designated as \\varvdots.\nI'm open to another alias for \\varvdots, by the way. I just needed a way give the macro and the symbol different names.. I don't think so. In LaTeX, they write a \\kern-\\nulldelimiterspace, but only on the right side of the fraction, not on the left side. We get the same behavior by omitting the space taken by our \\nulldelimiter.. We need to keep the classes. Consider the \\cancel{2B} below.  It gets the wide treatment, so the line endpoints extend 0.2em beyond the subject matter. I do this by adding 0.2em padding on both ends of the subject matter, then letting the line run across the whole container span.\nBut that 0.2em is not supposed to affect the width of the element. So I take the 0.2em back with negative margin on the container span, and that margin is needed on both right and left side.\n\n. I thought about that, but I've already got so many exceptions in this code that I wanted to add something without a whole new rendering method.. > don't define a font for a lot of the unicode characters that we [allow].\n@kevinbarabash  I think of our Unicode work as falling into two groups. \nOne group began with your PR #410 that added support for Greek characters already in KaTeX fonts. My work has followed in that path, adding support for as many Unicode characters as I could, but always characters that are in KaTeX fonts. In this string of PRs, we have always specified a font.\nThe other group of PRs began with your PR #508 for CJK and was extended, especially by @davidflanagan and lately by @edemaine's PRs #1217 and #1278 that allow, in non-strict mode, all Unicode code points. This string of PRs does not, to my knowledge, specify a font, but rather lets the browser pick a system font. And I believe that font metrics are assumed to match the Latin letter \"M\". . I'm not sure either.. Should body.value.length && be placed at the beginning of the ternary?. > I think macro definitions should also be in contrib too.\nI would like that, too, so let's discuss what would be required to make that happen. At present, KaTeX exposes __defineMacro: defineMacro, but that only enables one to define a macro in the KaTeX macro language. KaTeX does not support branching macro code such as \\if \u2026 \\else \u2026 \\fi, so the complexity of mhchem is out of reach by that method.\nI needed a way to (1) capture the functions \\ce and \\pu, (2) reconstruct the string in the argument to those functions, (3) pass the string to the external mhchem extension, and (4) receive the expanded macro or an error message. This PR does that.\nMaybe I should have added an abstraction layer that would enable other similar extensions to do something similar. Such an abstraction layer would expose a _defineComplexMacro callback and would enable complexMacro.expand(argString: string, functionName: string) : {expansion: string, errorMsg: string}  Then I could have used that exposed capability to define \\ce and \\pu in the contrib folder\nMaybe that's what's people mean when they talk of a plugin architecture. I don't know. I'm out of my depth here. There are different ways to do this and I'm probably not the best person to do decide which way is best. That's why I opened this PR by describing it as a proof of concept, not a finished product. I would welcome instruction. If someone wanted to step in and define that proposed callback function, I would be fine with that, too.. > defineMacro. Its second argument can be a function, as above. \nI might be able to work with that. Let me get back to you.. Update: I can indeed pass a function in _defineMacro, just as @edemaine suggests.  In fact, no modifications are necessary to macros.js at all. It works fine.\nBefore, instructions to the web site administrator were to place the reference to mhchem.js in the <head> of the HTML page. As now proposed, they will have to do that, and also  write the following into their KaTeX rendering options:\nhtml\nmacros: {\n  \"\\\\ce\": function(context) {return mhchem.expand(context.consumeArgs(1)[0], \"ce\")},\n  \"\\\\pu\": function(context) {return mhchem.expand(context.consumeArgs(1)[0], \"pu\")},\n  \"\\\\tripledash\": \"\\\\vphantom{-}\\\\raisebox{2mu}{$\\\\mkern2mu\\\\tiny\\\\text{-}\\\\mkern1mu\\\\text{-}\\\\mkern1mu\\\\text{-}\\\\mkern2mu$}\"\n}\nIn exchange for that extra installation complexity, we get cleaner code in macros.js. Is that a good trade off?. I don't like it much either. And now that I look back, I think that @ylemkimon wanted to suggest something to move \\ce definition into contrib, not into a rendering option. But I don't know how to accomplish such a thing. If anyone can tell me how, I'll take a crack at it. \nOtherwise, I think we are better off to keep the code in macros.js.. @ylemkimon Thank you for the instruction!. \\genfrac is an AMS function, so I'll quote from the User\u2019s Guide for the amsmath Package, \n\nthe  fourth  argument is a mathstyle override:  integer values 0\u20133 select respectively \\displaystyle, \\textstyle, \\scriptstyle, and \\scriptscriptstyle.\n\nThe Guide goes on to suggest that users should use \\genfrac to define their own macro with a short name, rather than repeatedly use \\genfrac in full.. Done. Thank you for the help.. Good point. I've made a change to pick that up.. isAllString still has a purpose. The preferred behavior is to put a string inside a single <mo>...</mo> tag. And that's what happens if isAllString remains true. When it is false, the code will write  nested tags, such as <mo><mi>...</mi><mfrac>...</mfrac></mo>.. @ylemkimon You're right, as usual. I'll delete those two lines.. That check is still necessary but the similar one above has no effect. So I removed the ineffective code.. > Doesn't replace do nothing if those letters don't exist?\nI don't think that's the relevant question. Those letters do exist.  Say that an author inputs \\operatorname{atan*}.  During html.buildExpression() above, that asterisk, *, U+002A, is converted to Asterisk Operator, \u2217, U+2217. Since we're emulating the amsopn package and it reverts that operator back to a text asterisk, we should do the same thing.. Sure. Will do.. Will do.. Give me a couple of days before you take any drastic action.. I'll see what I can do with the docosaurus page. Either way, it will be good to have only one page to maintain.. @ylemkimon I'd like the function support page to have some tables styled differently than the GFM markdown tables now shown. For example, many of the tables should have no <thead> row.  I like your idea of copying at least some of the current function support page into this documentation.\nIf I add some classes to website/static/static/index.css, can I then use those class names to style elements in the supported.md file?. Answering my own question: docusaurus docs addresses this.. Can we leave a redirect link at https://khan.github.io/KaTeX/function-support.html that will forward to the new documentation? That existing page is fairly high in the search engine results for \"katex\".. Done.. Good point. The latest commit has nesting that is more clear.. @kevinbarabash I was unable to use the | character inside a table. Even when inside backticks, the Remarkable parser treated the character as a cell separator. The \\colorbox was my attempt to simulate the appearance of a code string, since in it I could use \\textbar.\n@ylemkimon's use of <code> tags is much better.. @ylemkimon Good point about the <hr> tag. I've chosen instead to indent the two paragraphs preceding the new material. That sets the two topics apart.. detexify is a nifty utility, but I don't see that it adds much value here.. > It seems there is a bug with \\textdaggerdbl.\nYeah, I noticed that, too. I'll open an issue.\nIt seems that this Support Table will also serve as a test bed. I've found other problems while working on it.. > Is there a reason that a few of these don't have 0s added?\nYes, those fonts don't contain a \"0\" glyph.. >  there are screen widths where this does not render very well:\nCurrently, both sidebars disappear at the same quite narrow break point. I'll see if I can make just one sidebar disappear at an intermediate break point.  \nI'd rather not make the tables more narrow than they already are. If users have to scroll up and down a lot to see just one topic, then I'd prefer to get rid of this page and put a topic filter on the Support Table page.. \\boldsymbol and \\bm do render a 0, but it's not bold-italic.  It's just bold.\n. Done.. > why not support 3-digit color codes?\n\n3-digit codes preceded by # are already supported by KaTeX. No change there.\n3-digit codes not preceded by # are not supported by the xcolor package. Since I'm trying to nudge this a little closer to xcolor, I thought it best to fall in line with this behavior.. >What's LaTeX's behaviour if it gets a named color that isn't defined? \n\nThere is an error message such as: !Package xcolor Error: Undefined color 'cherry'. quicklatex.com will still render a black expression if the Report LaTeX errors box is unchecked. So the error behavior is somewhat similar to KaTeX. That is, KaTeX also will render a black expression.\n\nmaybe we check that color matches a hex 6-tuple\n\nI'll see if that can be done fairly easily.. Done.. When I first wrote this, I tried to specify a url arg type but got an error. I'll try again and see if I can identify the problem.. My KaTeX work has always been limited. I have avoided several areas, such as font modifications or the inner workings of makeVList or MacroExpander. Parser.js is another in that list. I'm not really very familiar with it.\nAnd adding key/value pairs to Parser.js would, I think, be a pretty complex addition. Note that my Parse error messages are specific to a type of key, not generic to key/value pairs in general. So if I put the parsing code into Parser.js I would have to find a way to pass it a list of what sort of keys and values are contemplated. Then the return value of an argument would be what? An array of ParseNodes? A dictionary? And then I have to write all this into the flow type system?\nNope. That's beyond what I've signed up to do.. Or we could add a few lines to the KaTeX CSS that insulate a .katex .img from the inherited .img CSS. Something like what PR #1083 did for SVGs. Then this line of code would be unnecessary.. > This seems like an odd choice since it's not really a glyph.\nAgreed. I used it because all the other MathML elements seemed even less suited than <mglyph>.\n\nI assume this what other people are doing when they add images to MathML.\n\nI haven't found any examples where people add general images to MathML. For glyphs specfically, then yes, the MathML spec does have a section. But general images? We may be breaking new ground.. I'll work something up.. Regarding a url arg type. There really isn't any such thing in KaTeX. I've experimented a bit with href.js and replaced argTypes: [\"url\"] with argTypes: [\"text\"] and argTypes: [\"chaos\"]. They both run fine. It doesn't matter what arg type is specified in href.js because Parser.js ignores that specification.\nWhat is really happening is that Lexer.js is preempting the usual logic for functions \\href and \\url. That urlFunctionRegexString captures both the function name and the first argument group. Parser.js then handles the result as an exception to the regular run of parsing code.\nThat RegEx, by the way, is not detailed enough to ensure that the argument is a valid url. It seems to be just enough to capture the function name and its first argument group.\nSo I question the usefulness of changing the code in this PR. The \\href example lexes some arbitrary text then parses it as an exception to regular input. This PR does the same thing; it just does it in a different file. And, I would argue, by placing this exception code in the includegraphics.js file, I am grouping exeption code together in manner similar to the way we currently use defineFunction.. @ylemkimon  That's an excellent point. I'll move that code into a utility function so that it is available to includegraphics. \nIf someone wants to refactor Lexer and Parser in an way that creates an actual url arg type, that would be great, but that's not for me.. @kevinbarabash In order for jest to use inline snapshots,  a project must have prettier installed. [ Reference]. I'll look for another way to get some confidence in the exceptions.. I'll try the raw arg type. Also, I think the arg types are being ignored only for functions \\href, \\url, and possibly \\verb. The phantom url arg type is not causing errors because it has been used, so far, only by \\href and \\url.. Also regarding the documentation pages: On the Supported Functions page, you picked a great place to show the proposed parens, next to \\lbrack.  However, the Support Table page is ordered alphabetically. On that page, \\lparen show follow \\loznenge, not \\lbrack. Similarly, \\rparen should follow \\rotatebox.. >  we should add a ~ in $( )$ and [ ]\nThat makes sense to me. I should have done that in the original document.\n\nsource columns do not show the ~ in the source\n\nI do not see any examples of that, at least not in the delimiter table.\n. Ah, now I understand the question. It was a presentation decision. In the KaTeX renderings, I inserted ~ spaces to make the delimiters visually distinct from each other. If I needed multiple ~ spaces, I used them. \nTo the right of each rendering, I wrote the code that would produce the delimiters. I wasn't trying to be strictly precise on space handling. I was just trying to present the information that an author would need to write delimiters.\nAnd by that crierion, a ~ would help in the $( )$ and $[ ]$ locations.. @kevinbarabash Nothing comes readily to mind. I'll give it a try tomorrow. . @kevinbarabash I can trigger this parse error by writing a Unicode combining character as the first character in the raw string.  Do you want me to write that test into katex-spec.js?. Test is added. I think I'm done here. Thanks again to @ylemkimon for adding the raw arg type.. @ylemkimon Where would you like to see the diff file? In the contrib folder? Here in this string of comments?. @ylemkimon My purpose here is to prevent functions like mhchemParser() or texify() from becoming available globally. The current arrangement does this successfully. It there any compelling reason to change it?. What does this accomplish? . Please be more specific. What should this line of code look like?. > our other code doesn't do this.\nOur other code is bundled by webpack into a single file. This file remains separate and is called from a script tag in an HTML <head>.\n\nand drop the trailing })();\n\nThen functions mhchemParser(),  texify(), assertNever(), and assertString() become global. Why would we want to do that?. I've deleted this file entirely. I don't want to maintain future versions of it. Instead, I've added a link to the original mhchem Manual. Hopefully, @mhchem will merge a PR in which I've written KaTeX into the file. . Yep. There was a problem with the SVG. Fixed now.. As usual @ylemkimon  is correct. It also turns out that mhchem.js does not need a module.exports = { expand: chemParse, }; statement. chemParse is called locally. It's really the macro callbacks that are being exported.\nI've modified the file accordingly.. I'm unfamiliar with patch files. I took my best shot.. Done.. > screenshots test\nWill do.\n\nuse a \\strut...?\n\n\\strut's serve a different purpose. They ensure that the box height does not fall below a minimum. The table-cell is used to prevent an out-of-control HTML line height from creating an unintended maximum.. ",
    "sidvenu": "@mhchem Could you please tell me what is the status of the extension? And if it is not yet completed, could you please tell me when you will complete it approximately?. ",
    "danielhollas": "I think this can be closed, mhchem is now supported in the new 0.10.1 release. :-). @kevinbarabash  Can I ask what is the status of this now that the #1269 was merged?\nIn KA we now have some Pashto and Urdu translators who would probably use this in the future.\nI am also wondering about the support for Arabic decimal comma \u060c (U+060C)\nEDIT: It seems that the fallback to MathJax works in this case, so I guess this is not as urgent.. > Do Pashto and Urdu use the same script?\nI do not know to be honest. Note, however, that there are different types of eastern arabic numerals as explained here:\nhttps://en.wikipedia.org/wiki/Eastern_Arabic_numerals\n@HosseinAgha Are all of these supported in your awesome plugin?\nIn any case, both Urdu and Pashto seem to have a long way to go for their KA DEMO site so I think there is no rush here. I've started to work on supporting these numerals inside Translation Assistant, but for now we can fallback to MathJax anyway.\n@kevinbarabash Thanks for a prompt response! :heart: I've added you to a conversation in KA i18n forum in case we needed your insight, but I think we're good for now.\n. This is slightly relevant to KA, since in certain locales the \\div symbol should be colon instead. \ne.g. instead of\n$6 \\div 3 = 2$ \nwe need \n$6 \\colon 3 = 2$ \nWith the current implementation, is much better to use simple \\colon or \\mathbin{:}\n$ 6 : 3 = 2$. No no, sorry for misunderstanding, I was not suggesting anything like that. I only wanted to point out the context in which \\colon might be used.\nI only stumbled upon this issue, because KA linter currently does not allow translating \\div. For multiplication, it allows \\mult -> \\cdot translation, so I originally thought the \\div -> \\colon is the correct equivalent. But unless this particular issue is solved and merged, that is not the case.\nSorry for off topic post.. Well, these two do not work on Chromium and Firefox on Linux Mint either.\nPS:Hindi certainly looks cool, but I have no idea whether the render is correct. :smile: \nEDIT: Since KaTex is now used to render these letters on localized KA sites, it might be good to bump priority on this, if this affects more letters. Will update this when I hear more info from other language advocates.. Hi There. Can I ask whether you have some timeline for this feature? I heard that Khan Academy is planning to work on the chemistry content in the near future and I am sure this would come in handy. Moreover, it would also help i18n teams, because current chemistry content uses \\text for chemical elements, which break the Translation Assistant. . @ronkok It seems that this condition $CIRCLE_PROJECT_USERNAME != \"Khan\" is not longer valid since this repo was moved to its own KaTeX project? So I think you could try simply rewriting \"Khan\" to \"KaTeX\" and see whether it resolves it?. ",
    "yassersouri": "Can you give me a hint so I can add it?\n. As it is happening in #126 then, I will close this.\n. ",
    "phoenixeliot": "Confirmed with an example on the demo website. This only happens under some circumstances\u2014from initial testing, it looks like it occurs when the formula is too long for the rendering box.\n\n\n. Yes, this is a Retina MBP running the latest Chrome.\n. Ah, yep. The issue I was having with integrals happens even with one.\n. Maybe I'm missing something, but the integral symbols look the same on those (only the right edge is different)\n. ",
    "smllmn": "\nI have the same issues the original submitter (@jonnybarnes) had, where double and triple integrals get cut off and the limits of integration are incorrectly placed. I'm running Chrome 37 on Windows 7. Others pointed it out on /r/math.\n. ",
    "jonnybarnes": "I was seeing the same as @smllmn on Firefox 34 on Linux\n. ",
    "simon04": "\nPlease sign it so we can merge this in!\n\nDone.\n. ",
    "btwael": "CLA signed\n. +1\n. ",
    "jasondavies": "tex\ns = \\int_{a}^{b} \\sqrt{ 1 + f'(x)^2 } \\, dx\n\n. ",
    "qbolec": "Is there any workaround for Windows?\nI don't think I do anything fancy - styles on my site are based on Bootstrap, yet every sqrt sign has the line in a bad place.\nI am open to solutions like fixing some particular font/size/whatever combination if that would help.\nI can add some custom CSS styles if that's needed.\nIs there any temporary solution to this problem, which could let me transition production from MathJax to KaTeX ? :)\nNot sure if this helps investigating the problem, but I've noticed that the horizontal line gets into correct position in Chrome if I change the browser zoom to 150%. Perhaps this is a browser rendering issue then?\n. It also seems that only particular font-sizes look bad: \n14px - bad\n15px - ok\n20px - bad\n21px - ok\nToo bad that Bootstrap uses 14px as the default :/\n. I have problems with existing codebase, which contains following symbols:\n'\u2212'\n'\u27e8'\n'\u22c5'\n'\u2264'\n'\u2265'\n'\u03b1'\n. The problem still exists. It also concerns angle brackets:  '\u27e9' and '\u27e8' .\n. Perhaps my comment is obvious and does not move things forward, but my use case is that I want to migrate from MathJax to KaTeX, as your library is much faster. I already have a massive amount of content which was prepared for MathJax. Now, every discrepacy between MathJax and KaTeX means that I have to choose between:\na) running some find&replace through all the content \nb) not migrating to KaTeX and continue to use MathJax\nc) do what KhanAcademy allagedly does: try{KaTeX}catch{MathJax}\nd) ???\nHow about having a switch (or dedicated build) for MathJax-compatible behaviour?\nFor example lodash library has a mode compatible with underscore.\nThis made transition from one lib to another smooth.\nThis buys the developer some time, to adjust the app and content for finally switching to non-compatible mode.\nI realize that this path sounds like it leads to never-ending story of supporting compatibility with another library, but:\na) you seem to do that anyway\nb) that seems to be what people want (in order to migrate)\nc) at least the migration/compatibility code can be clearly separated/marked/documented, leaving the core clean and reasonable\nd) perhaps some volunteers would like to contribute to maintenance of this mathjax-compatible version - once there is no volunteers you have a clear signal that this support is no longer needed\nI'm not a latex or unicode expert, but I suspect that there can be other discrepancies between libraries than handling of unicode - perhaps MathJax syntax differs slightly from MikTeX or whatever - the idea of having a configuration option called unicodeInput:1 for me is semantically different than saying MathJaxCompatibile:true in that first assumes that the problem is in the encoding and that there is a single good solution (or even: a progression of better and better solutions which can be ordered and numbered by versions) while I think that there could be just many different dialects.\nAnother example would be various libraries out there for Markdown, some of which give you an option to decide which dialect you want to use, or even define your own.\nPerhaps an option like dialect:\"MathJax\" or even dialect:{encoding:{\"\u03c3\":'\\\\sigma\"}} is what we need?\n. Not sure if this helps anyway, but here are the places where the sgima unicode character encoded as \\u03C3 occurs in the MathJax source: https://github.com/mathjax/MathJax/search?utf8=%E2%9C%93&q=%5Cu03C3 \nThese seem to be places concerned with outputing UTF-8, not reading it, but still provide some mappings between commands and UTF-8 characters.\nThis one seems to be for input: \nhttps://github.com/mathjax/MathJax/blob/ba9afeb5a743249acdea17540b48b14ebc95dbe4/unpacked/jax/input/TeX/jax.js#L471\nNot sure what the code does, but I guess they use unicode as the internal representation and try to convert commands to unicode - not the other way around.\nAnd the search for sigma gives a lot of results, many of them seem to be some font metrics:\nhttps://github.com/mathjax/MathJax/search?utf8=%E2%9C%93&q=sigma\n. ",
    "jannschu": "Looked a bit into this. One problem is, that the line is implemented using a CSS border property, which browsers render differently than fonts.\nSee this experiment: On my machine I tried to perfectly align the underscore (representing the square root character) and a <span> with some border. I can observe that,\n\nthe underscore is rendered a bit aliased, whereas the border is a perfect rectangle, and\nscaling down or up using the browser zoom function or by changing the font size shows, that especially in small sizes the border gets visually thinner than the underscore and also moves around a bit.\n\nI assume this is different for other systems and browsers and so on. I thought about using a line character which is embedded into a font, but have not tried anything in this direction yet.\nedit: Safari, Mac OS.. ",
    "Pomax": "on a (Xe)(La)TeX note, using align in running math mode would be curious, since the point of the align/align* environments is to set up a (by definition multi-line) box, so it shouldn't be usable inline. Requiring the $$...$$ or \\[...\\] to force a block would be quite sensible.\n. Note that that is not align/align*, but aligned. in the same tex/latex/abs/math/amstex.sty there is also\n\\def\\align{\\ifingather@\n  {\\ifnum0=`}\\fi\n  \\DN@{\\@nameuse{align (in \\string\\gather)}}%\n  \\else \\ifmmode\\nomath@env\n    \\DN@{\\let\\endalign\\relax\\@gobble}\\else\n  $$\\stepcounter{equation}%\n  \\st@rredfalse\\let\\next@\\align@\\fi\\fi\n \\collect@body\\next@}\n\\@namedef{align*}{\\ifingather@\n  {\\ifnum0=`}\\fi\n  \\DN@{\\@nameuse{align* (in \\string\\gather)}}\\else\n   \\ifmmode\\nomath@env\n    \\DN@{\\@namedef{endalign*}{}\\@gobble}\\else\n   $$\\st@rredtrue\n  \\let\\next@\\align@\\fi\\fi\n \\collect@body\\next@}\nwhich are then unfortunately followed by a rather long and  detailed alignment implementation\n. landing this incrementally will be quote worth it, too. If equasion numbering comes \"later\", then simply having the general align environment available will benefit many people already.\n. A simple guiding principle: \"what does LaTeX do?\". Run code you're unsure of through real LaTeX, see what it outputs, and then do the same in KaTeX: as an online LaTeX parser, that's what people will be expecting it to do.\n. Awesome work @gagern! Any idea if this will be landing in KaTeX itself soon? It's been a pretty long time since I filed this, and align has not become less important for a LaTeX converter to support =)\nSmall note on the build procedure: the Makefile right now will fail building if there are spaces in the path. Should be relatively easy to fix.\n. nice! Is there a way to require this unreleased version using node atm, pending a release? I tried an npm install https://github.com/Khan/KaTeX --save-dev so that it grabs the master branch, with a var katex = require('katex');, but then it still warns that align is not supported.\n. @kevinbarabash cheers!\n. this CLA requires too much information that is utterly irrelevant and I can just lie about without you ever knowing. Are you willing to change your CLA to something more open source contributor friendly? Because this is a great way to ensure a ton of people will never bother contribute.\n. if other people jump off a bridge, I don't follow them just because they wore google and apache shirts ;) These CLA for people from Europe are ridiculously privacy invasive and way over the top for a small open source project. Got anything where, simply by submitting a PR, I've agreed to your contribution rules?\n. fair enough, I likely won't contribute again then: for contributing to Chromium or Firefox or even the general KA codebase, that CLA makes perfect sense. For a small independent library like this, it's way over the top and a one line license \"By submitting PR to this project you transfer ownership and intellectual property rights to the KaTeX project\" is really enough. A CLA like the one your lawyers recommended is pretty much as invasive as demanding to see someone's passport and tax slip for proof of residency before you'll let them call you =)\n. hmm... options object?\nkatex.renderToString(\"...\"); // can throw\nkatex.renderToString({\n  input: \" ... \",\n  success: function(html) { ... },\n  error: function(err) {... } // cannot throw\n});\n. I'd be more fan as \"if there is an error handler, use that, otherwise throw\" (possibly including the 'no error handler was passed' to explain why the throw is happening)  following the philosophy that it makes more sense to tell code what to do, rather than telling it what not to do. \n. I mostly just want code that I can use as both user as well as dev (some things need immediate loading, but a page like http://pomax.github.io/bezierinfo, no matter how fast katex renders, needs on-demand loading instead of loading up front =D). If you're going to stick with try catch, that's aesthetically very ugly, but from a functional point of view perfectly fine. I don't really agree with the fact that success/error is a hack, but that has no bearing on keeping the issue closed, really.\n. @kevinb7 currently it's using MathJax, with the dynamic loading happening in https://github.com/Pomax/bezierinfo/blob/gh-pages/js/sectionloading.js\n@spicyj that's fine, the jQuery style non-promise thing.ajax({..., success: handler, error: handler}) or the pattern used by superagent and the like (thing.call().success(...).error(...)) are simply nicer to work with than try/catch code. No need for promises, but being able to write intentional code for case handling, instead of using the syntax for \"I never expected this\" (which is what try/catch indicates) seems more accurate wrt the code that's actually being written. I fully expect KaTeX to possibly fail, so that's not so much a try/catch but more normal code branching.\n. I can't think of any font that would support the combined sequence but not the more basic latin \u00e9. That said, it shouldn't be too hard to find out how to classify, as the unicode consortium has all the information on which script and general semantics each codepoint (or often, code point ranges) fall in.\nI'll see if I can extend the ord regexps to cover most of the valid \"letter\" 0x00-0xFFFF range.\n. looks like there's a PR #59 already open to address this, although it doesn't add true unicode so I left a comment on the code there with a more useful unicode pattern. \n. @AugierLe42e you probably want to file that as a separate issue, rather than as part of a greater unicode problem. Your problem reduction suggests it's a sequence parsing error (no error without spaces, error with spaces) rather than a unicode problem (it's not saying that the minus symbol is unsupported or unrecognized)\n. if your article is online and published through a CMS with pretty printing (like changing \" with \u201c and \u201d style quotes, for instance): your publishing platform \"conveniently\" replaced your normal minus sign with the almost-always-incorrect-when-used-this-way en-dash, U+2013 (incorrect, because the en-dash is pretty much exclusively for numerical ranges)\n. Yeah, the WP editor can  do this for you as you type. Try typing - into something like a text editor, and you'll see it stay a normal hyphen.\n. wait, we're doing this on the web, why do we need .mf fonts as opposed to just the mf metrics in combination with the normal opentype font it is for (generated once, at KaTeX build time, because you don't need to run it more than once)? if XeLaTeX's fontspec can do this in the terminal so that people can use \"any font they want\" (including fonts like XITS for beautiful text and math typesetting) I'm pretty sure that same approach would work fine for KaTeX, so that we can keep things making sense on the web.\n. they don't, so we can respect CSS here and go \"if you know which font you want, you better also have a metrics file available: please use the KaTeX bootstrapping options object to indicate where that file lives\" and leave it to the user to break out of the predefined font set. That way everyone wins (KaTeX simply has to offer the build tool, which'll be in the repo anyway, and users who want \"their own font\" can go hogwild).\nSpeed wise, as someone who runs a website with a million formulae (http://pomax.github.io/bezierinfo), I'm okay with my users downloading a bigger font, and then have their browser simply rely on the cached copy. Yes, it might load slower the first time round, but they should be able to deal with that. Of course, that too could just be \"my responsibility\", where I specify in the KaTeX bootstrap options object that I want KaTeX to use XITS and where to find its metrics file.\n. Feel free to close it. If there's a solution that's common in TeX land (like \\textit{}) that works both in normal LaTeX documents as well as in KaTeX, then the original problem the issue was filed over has been resolved, and any further thoughts are follow-up for a different issue that refers back to this one.\nIn fact given that I filed it, let me just close it and if the KaTeX team wants to keep it open, they can reopen it.. that's not really an option; this is based on http://pomax.github.io/bezierinfo, which has way too much latex to prime individual blocks for a specific interpreter. Would it be possible to tap into the css <link> to see what the media attribute is (like media=print or media=screen) and if used, default to displaystyle?\n. with displaystyle worked into the autoconverter:\n\n. The \\\\ notation is also supported in plain math mode, so that even without an align environment, the following compiles as expected in LaTeX:\np_1 = some\\ point, \\\\\np_2 = some\\ other\\ point, \\\\\ndistance = (p_2 - p_1), \\\\\nratio = \\frac{percentage}{100}, \\\\\nnew\\ point = p_1 + distance \\cdot ratio\nThis currently causes KaTeX to error out, so adding in support for this is pretty important for some (in my case, https://pomax.github.io/bezierinfo, \"A Primer on Bezier curves\", uses it in a fair few places, and I would love to be able to finally leave MathJax for KaTeX)\n. I now generate SVG during bundling (with images named based on a hash of the LaTeX code that they represent, and with the original LaTeX code added as comments) so that there is no need for dangerouslySetInnerHTML anymore, so I also don't have to worry about the client's processing capabilities anymore. That's not a solution for everyone, but it's a solution with many benefits for users, and makes it easier to deal with \"can I use KaTeX or do I need to fall back to MathJax\".. You might be surprised again, @edemaine: I feed the following LaTeX source for typesetting to XeLaTeX, which happily compiles it with line breaks inside \\[...\\]:\n\\documentclass[12pt]{article}\n\\usepackage[paperwidth=12in, paperheight=12in]{geometry}\n\\pagestyle{empty}\n\\usepackage{color}\n\\usepackage{amsmath}\n\\usepackage{unicode-math}\n\\setmainfont[Ligatures=TeX]{TeX Gyre Pagella}\n\\setmathfont{TeX Gyre Pagella Math}\n\\begin{document}\n\\[\nGiven \\left (\n\\begin{aligned}\np_1 &= some\\ point \\\\\np_2 &= some\\ other\\ point \\\\\ndistance &= (p_2 - p_1) \\\\\nratio &= \\frac{percentage}{100} \\\\\n\\end{aligned}\n\\right ),\\ our\\ new\\ point = p_1 + distance \\cdot ratio\n\\]\n\\end{document}\nThis results in:\n\n(after running it through pdfcrop because that's obviously not a 12\"x12\" image =). Ah, my mistake, misread what you'd said. \\\\ is kind of magical in that as a fully user controlled macro that each package is basically free to do with whatever they like and reading through http://tex.stackexchange.com/a/225925/8406 it sounds like it'll \"do a thing\" in any environment that doesn't redeclare what \\\\ is supposed to mean. Given the default meaning in LaTeX of \\hskip\\break, I guess it'll \"work\" in any environment where \\hskip\\break are legal instructions, plus any environment that redefined \\\\ itself to do something subtly different under the bonnet but with the same visual effect.\n...now I'm curious if anyone has a list that notes which enviroments do what for \\\\ (google is not yielding one but then it's notoriously bad at finding \"explanations\" around (La)TeX's working, prefering to hand you a million tutorials for the env/cmd in question instead). I'd certainly try to make the information immediately findable, so ideally it's in the README.md (because people rarely click through from a readme if they just want the summary). One idea would be to generate the support matrix based on the unit tests every time KaTeX is built, and then automatically update the README.md with that information (it's fairly easy to grep a README.md for a section ## Supported macros and environments up to the next #). That way people won't need to click through, and no one has to maintain the support matrix, tests passing will set support to \"true\" and everything that wasn't marked true stays false. Or X, or red, or whatever works =)\n. not really, the docs said KaTeX supported IE8, which sounded like there'd be unnecessary shim code at least in one place, but I've not looked at the codebase in a really long time now >_>\n. in that case this needs a better heading, because people looking for how to style based on elements are not necessarily interested (or in fact not at all) in automatic rendering. The term \"automatic rendering\" suggests the kind of thing MathJax does out of the box: just run the moment your page starts up, which is the opposite of the kind of control I was asking about for instance.\nCan we change that heading to something more indicative?\n```\nRendering LaTeX in HTML elements\nMath on a page, or inside elements on a page, can be rendered on demand using the auto-render extension. See the Auto-render README for more information.\n```\nor the like?\n. Looks like the fact that they're missing from the fonts used for LaTeX styling causes a throw\n. Wait, I'm confused; this is perfectly legal LaTeX, why is this not getting supported?\n\\documentclass[12pt]{article}\n\\setlength{\\parindent}{0pt}\n\\begin{document}\nthis \\\\ is \\\\ a \\\\ test.\n\\end{document}\nThey're certainly essential in align and matrix environments (no linebreaks in those would mean those enviroments aren't actually supported), but they're also part of the generic document environment, and standard LaTeX syntax.\n. ahh, gotcha. thanks\n. had to look that one up (yay, TeX by Topic), but yeah that would be fine too. Looks like \\kern is trickier, though, because of its directional context: unlike \\hskip, \\kern will \"magically do the right thing\" in both horizontal and vertical mode, whereas \\hskip (and \\vskip) only does what the \"h\" (or \"v\") implies.\n. Hey @WChargin, thanks for that!\nAlthough as you point out, I'm mostly concerned about \"what works online\" right now. For offline document generation there are way too many commands that don't work in either MathJax or KaTeX, so I'm mostly looking at this from the perspective of having 50 pages of web content with formulae that currently use MathJax, that I'd like to switch over to KaTeX. \nIf the equasion* and array environments are properly supported by KaTeX, then it's probably worth updating the code on my site over, as it's by far cleaner, but the added typesetting precision of the last form feels like overkill for web presentation. Good to know about for offline document generation, but the lack of typesetting precision in the text around the latex blocks makes getting things absolutely perfect in the latex itself just not worth it =)\n(Also neither MathJax nor KaTeX support free font changing along the lines of a XeLaTeX with Fontspec, so I'm not too concerned with shortcut tweaks doing the wrong thing \"in a different font\". At least not until both implement proper arbitrary UTF8 fonts with metrics loaded and cached from opentype fonts as they're being used)\n. This will cover \"everything above 7F\", which will include some things that are symbols that don't make sense in formulae. As a first pass this might be good enough, but it's also going to allow things that might not be desirable as supported, like the entire \\x80-\\xB0 range.\n. always good to remove all your debug statements from PR code =)\n. the textord regex will probably needs an update here, too, rather than just fixing up the math lexer.\n. ",
    "SirVer": "+1. I am missing this feature too, otherwise KaTex works amazingly well.\n. ",
    "Reflic": "Whats the current position of implementing support for the align environment?\n. ",
    "RoyiAvital": "Will you also include the numbering?\nStackEdit made it work pretty well.\nI think they use MathJax, so there is something to try imitate.\n. I see...\nWell, I really hope you'll get there soon.\nThank You.\n. From a user point of view, in the long run, equation numbering is a must.\nYou cannot let it somewhere in the background handle it since, in the case of array of equations, it can not be done.\nThank You.\n. Any new ideas how to tackle the 'align' environment and equation numbering?. Hi,\nWill it support more complex things like:\n\\begin{align}\n[[ The Math ]]\n\\end{align}\nIt would be amazing!\n. There is also more issue related to \\boldsymbol{}.\nGo to the Demo Page.\nEnter:\n{a}_{out} = {a}_{in} + \\left( {y}_{out} - {y}_{in} \\right) \\boldsymbol{1}\nRendering won't work:\n\nWhile it is a valid LaTeX syntax (Verified on CodeCogs On Line Equation Editor):\n\n. @kevinbarabash ,\nIt happens also with software based on KaTeX.\nSee - https://github.com/goessner/mdmath/issues/35#issuecomment-368304541.. ",
    "Joe312341": "+1 Align environment issue is the only thing keeping me from switching MathJax to Katex\n. I am also getting this error in Firefox and Safari. ",
    "pnsaevik": "\nShould we allow people to write things like 1 + \\begin{align} ... \\align{end}?\n\nYes, I think we should, simply because it makes the implementation easier. The construct is not allowed in LaTeX, but that's no problem in my opinion.\nIf we allow the above construct, the implementation of \\begin{align*} ... \\end{align*} would basically be a copy-paste of the matrix environment -- just with right/left justification instead of centered justification, and without the extra space between columns.\n. @gagern, I see your point. Personally, I'd say equation numbering should be handled outside KaTeX, but MathJax and a lot of other people see it differently. But I like your idea of restricting certain environments to top-level. \nMathJax handles this problem by starting out in text mode, which makes sense if one aims at being a more full-fledged LaTeX environment, with automatic equation numbering, figure numbering, bibliography etc. Personally, I'm fine with KaTeX being a lightweight, math-only rendering engine.\nIn the meantime, align* fills a very practical need, namely, the need for aligning consecutive equations. So if possible, I would vote for a temporary solution for align* (which may change in future releases), until the more fundamental question of equation numbering has been figured out ('cause this discussion is going to take time).\n. @RoyiAvital, it's true that multi-line equation numbering would be hard to tackle by an outside script.. but it's certainly not trivial to implement within KaTeX!\nIf someone wants a KaTeX \"hack\" in the meantime, use \nTeX\n\\begin{matrix} A + B & = & C \\\\ C & = & D + E \\end{matrix}\nwhich centers the columns and puts too much space around the equals sign, but it may work in some situations.\n. Regarding my previous comments: It turns out that what I'm really asking for is an implementation of LaTeX' aligned environment, http://tex.stackexchange.com/questions/95402/what-is-the-difference-between-aligned-in-displayed-mode-and-starred-align.\nI guess this environment could be implemented fairly easily within the current KaTeX framework? And it may be sufficient for many users.\n. Great! Precisely what I hoped for!\nBTW, how do I \"build\" and test the code..? I've only used the katex.min.js and katex.min.css, which does not seem to be present in the directory tree.\n. I might give make a try, but I'm using a Windows computer and would have to install some additional software I guess. Perhaps another day!\n. @xymostech\n\nJust based on what most browsers support and what CSS lets us do, the only feasible method for doing this is to use HTML <table>s.\n\nIs this a bad thing? HTML tables would be the way to go I guess (or CSS tables for that matter), or are there any problems with this approach?\n. Rendering to canvas is great. But I'm curious to why one should choose canvas over SVG, which seems to be the better choice. SVG can contain  tags with absolutely positioned glyphs, which allows full control. Unlike canvas, SVG is scalable and searchable. And it's pretty cross-platform, at least within the modern browsers. Actually, there is a tool called dvisvgm, which can generate such SVG files directly from latex (server-side). See this stackexchange question for more.\n. Implementation of tag{} before \\begin{equation} is indeed a good idea!\n. BTW, if someone wants a hack in the meantime, place your TeX code in <dtex> tags,\nEinstein said:<dtex>E = mc^2</dtex>, \nand place the following script at the end of your HTML document:\njavascript\n<script>\n    txlist = document.getElementsByTagName(\"dtex\");\n    for (var i = 0; i < txlist.length; i++) {\n        var tx = txlist[i];\n        var txtext = \"\\\\displaystyle \" + tx.textContent;\n        var html = katex.renderToString(txtext, tx, { displayMode: true });\n        html = \"<div style='text-align:center'>\" + html \n                   + \"<span style='float:right'>(\" + (i+1) + \")</span></div>\";\n        tx.innerHTML = html;\n    }\n</script>\nI'm no javascript expert, so surely you can improve this code somehow..\n. I improved the equation numbering and implemented some bibliography script as well. You can view the result at http://folk.uib.no/plo092/katex. This is how it looks on my computer:\n\nI have not tested on anything other than the latest chrome and iexplore browsers. I should also point out that I changed the font, this seems to work fine.\n. The font change is a little experiment on my part. It's Charis SIL with some extra letter spacing (certainly not Calibri, which is sans-serif and licence restricted). It looks nice, but certain things are definitely mispositioned. And the greek letters doesn't always blend in nicely with the latin ones.\nI'm sure the vertical alignment of (1) can be fixed, but I'm unsure if I can do it outside KaTeX. Multi-line equation numbering would also be somewhat challenging outside KaTeX.\n. Cambria would definitely be an alternative, but you would have to rely on the user to have it installed, since common Office installations doesn't include a webfont license. Besides, the mathfont version (Cambria Math) bundles all glyphs (italic, bold, symbols and operators) in a single file, and I'm unsure of how to extract them for use on a web page.\nAnother alternative would be Linux Libertine which has decent greek glyphs. But I find the strokes slightly too thin for web usage.\n. I just browsed through some issues relating to equation numbering, and I'd have to say I'm impressed with all the exciting work going on here! \nRegarding \\tag{} implementation, it seems like there are three ways of doing this:\n1. HTML <table>s\n2. KaTeX' internal CSS-table implementation\n3. CSS float or CSS absolute position\nOn my own HTML pages, I'm currently going for the <table> solution, but I understand from browsing the GitHub issues that consistent browser behavior is not guaranteed since the table layout algorithm is not specified. My implementation goes like\nhtml\n<table style=\"width: 100%\">\n<td style=\"width: 10000px;\"></td>\n<td>Formula goes here</td>\n<td style=\"width: 10000px; text-align: right;\">Equation number goes here</td>\n</table>\nwhich seems to work nicely for me at least. \nWhich brings be to method number 2: KaTeX has its own CSS implementation of table-like structures, which is used for the matrix environments and @gagern 's awsome addition (#398): The aligned environment. If HTML <table>s are out of the question, can we use KaTeX' internal CSS table representation to implement equation numbering in a way analogous to my own <table> implementation?\nThe solution I posted previously is method number 3. Seems to work fine, except that equation numbers are not vertically aligned. Could be fixed by letting KaTeX add some extra margin on top of the equation number, which would be possible since KaTeX knows the height of the current equation line.\n. BTW, here is a CSS implementation of automatic equation numbering using the <table> idea, which integrates with the current KaTeX release:\n``` css\n.katex-display {\n    display: table;\n    width: 100%;\n}\n.katex-display>.katex {\n    display: table-cell;\n}\n.katex-display::before, .katex-display::after {\n    width: 10000px;\n    display: table-cell;\n    text-align: right;\n    vertical-align: middle;\n}\nbody {\n    counter-reset: equnum;\n}\n.katex-display::after {\n    counter-increment: eqnum;\n    content: \"(\" counter(eqnum) \")\";\n}\n```\nA similar CSS implementation of the float idea, with top-aligned equation numbers, is\n``` css\nbody {\n    counter-reset: equnum;\n}\n.katex-display::after {\n    counter-increment: eqnum;\n    content: \"(\" counter(eqnum) \")\";\n    float: right;\n}\n``\n. If anyone decides to implement SVG output, it would be nice to do it with` tags instead of outlined glyphs. This way it would be much faster to load. MathJax uses outlined glyphs.\n. @gagern Thanks for your comments. It would definitely have to rely on webfonts, just as regular KaTeX. And it would be for the use within browsers, coupled with the KaTeX CSS file. But then, one may argue that CSS is sufficient, and that SVG provides no extra advantage.\n. ",
    "ShivamSarodia": "I'll add most of these in a couple hours when I get home; they shouldn't be tough to put in since \\forall, \\exists, \\subset, \\subseteq, \\emptyset, \\cap, \\cup are all compatible with the font. I can also add other set theoretic/logical symbols too while I'm at it.\n. ",
    "uranusjr": "The success-error pattern is kind of a hack for async programming without coroutines because async operations can\u2019t use throw-catch. This makes sense if renderToString is async, but it\u2019s not.\nWith that said, I can see why people don\u2019t like the current exception-throwing design. Nobody wants a simple call to nuke their application. Maybe there can be a \u201csafe\u201d variant of renderToString that catches the exception and fails silently, or something like that. Or at least you can put the try-catch block explicitly in the examples and documentation (if such things exist) to put users on the right path.\n. MathJax does the same thing, as noted in their documentation:\n\nThe default math delimiters are $$...$$ and \\[...\\] for displayed mathematics, and \\(...\\) for in-line mathematics. Note in particular that the $...$ in-line delimiters are not used by default. That is because dollar signs appear too often in non-mathematical settings, which could cause some text to be treated as mathematics unexpectedly.. \n",
    "AugierLe42e": "Hi, it seems like I also have this problem with the minus sign :\nParseError: KaTeX parse error: Unexpected character: '\u2013' at position 39: _{i=1}^{n}(x_i \u0332\u2013 m)^2\nThough it works perfectly with plus sign.\nThe guilty expression is the following :\n[latex display=\"true\"]\\dfrac{1}{n} \\times \\sum_{i=1}^{n}(x_i - m)^2[/latex]\nLet me specify that removing the spaces around - made the expression work.\n. This is that character my keybord produces on Mageia Linux 4. I copied/pasted the expression from an article I just wrote. I didn't change the sign. However, the parsign fails when the minus sign is surrounded by whitespaces and pass when not.\n. I thought it was that at firt, yes (I'm on WordPress CMS) but, actually, same result by typing it directly in the text (HTML mode of WP).\n. ",
    "quxiaofeng": "Is \\underset{}{} supported?\n. Actually, it is not.\nThis code\n\\\\[\ngraph \\; f = \\lbrace{} (\\mathbf{x}, \\beta)^T \\in \\Re^{n+1} \\mid \\beta = f(\\mathbf{x}) \\rbrace{} ,\n\\\\]\nrenders as:\n\nThe code with \\left\\{\\right\\}\n\\\\[\ngraph \\; f = \\left\\{ (\\mathbf{x}, \\beta)^T \\in \\Re^{n+1} \\mid \\beta = f(\\mathbf{x}) \\right\\} ,\n\\\\]\nrenders as:\n\n. Oh, it's my fault. It should be \\\\{ and \\\\} other than \\{ and \\}.\nThis code works\n\\\\[\ngraph \\; f = \\left\\\\{ (\\mathbf{x}, \\beta)^T \\in \\Re^{n+1} \\mid \\beta = f(\\mathbf{x}) \\right\\\\} ,\n\\\\]\n\nThank you very much!\n. This a github supported jekyll blog. I added the KaTeX support to the blog as this commit shows.\nhttps://github.com/quxiaofeng/sudo-jekyll/commit/4527e18a3c75bb4294e404c2b3b9442aa1d6f3b3\nKaTeX 0.5.1 with auto-render to render the html body.\n. KaTeX is a great solution for my website. I have been using it in multiple pages and sites. It is fast and easy to be integrated into other templates. It is quite easy to add LaTeX equation support with just several lines of code.\nHowever, I am still confused about the future of KaTeX. There are something that I really need to use, which is really annoying for now, for example, the \"\\arg\\min\" problem. Solving this problem needs function definition or redefinition. However, I do not know whether it will slow down the rendering of KaTeX.\n. ",
    "SamyPesse": "Maybe but running katex.renderToString(\"x = {-c \\pm \\sqrt{b^2-4ac} \\over 2a}.\") in a node console is outputing:\n```\n\nkatex.renderToString(\"x = {-c \\pm \\sqrt{b^2-4ac} \\over 2a}.\")\n'x=\u2212cpmsqrtb2\u22124acover2a.'\n``\n. Ok, so the problem is that cheerio (which is an equivalent to jquery for the server side) when returning from$(this).html()` is not returning escaped blackslashes?\n\nI'll test this and update this issue, thanks for your quick answer :beers: \n. Ok this seem to have fixed it: https://github.com/GitbookIO/plugin-katex/commit/81daaba69984d9333ebe50e1be3435732ffa94cb\nThanks you again :+1: \n. Ok, yes ... that was stupid\n. ",
    "ranjithnori": "@spicyj @SamyPesse Since this is a very common use case, I think I'm missing something here. \nHow do we automatically escape the backslashes from a string that we give as input to katex.renderToString() ?\n. Thanks for clarifying! :)\nOn Jul 29, 2016 12:50 AM, \"Ben Alpert\" notifications@github.com wrote:\n\nWhere does the string come from? If it is embedded as a JS string literal\nin your JS source code, you need to add the backslashes automatically.\nOtherwise, you shouldn't need to do anything.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/Khan/KaTeX/issues/69#issuecomment-235997422, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AD6poELq9rCECp9Sbl1byAyAVgdbL2KUks5qaQDigaJpZM4Ci8Sb\n.\n. \n",
    "douglascamata": "Just a suggestion, $ katex <<< \"a = b \\times c\" is everything but intuitive. I think the most intuitive interface would be something like $ katex \"a = b \\time c\", or reading from stdin, like $ latex < file.katex or $ echo a = b \\\\times c | katex\n. @jmendeth awesome, thanks for the tip!\n. ",
    "jmendeth": "@douglascamata the CLI does exactly that: it reads from stdin.\ncommand <<< \"string\" is just another way to say echo \"string\" | command.\nSo yeah, katex < file.katex and echo a = b \\\\times c | katex will work as you'd expect.\n. Okay!\n2014-09-18 20:52 GMT+02:00 Emily Eisenberg notifications@github.com:\n\n@jmendeth https://github.com/jmendeth This looks great! Like I've said\non some of the other requests, we're getting our CLA worked out right now;\nI'll let you know when we figure it out so we can merge this!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Khan/KaTeX/pull/71#issuecomment-56085156.\n. Signed. (but I don't have a phone)\n. \n",
    "evestera": "No problem. Commits squashed, and CLA signed.\n. ",
    "bigant3323": "Ha\n. ",
    "gameguy43": "Why were this and #59 closed?\n. Thanks for this. FWIW, I think one of our issues with this at the time was the \"cent sign\" unicode character:\nhttp://www.fileformat.info/info/unicode/char/00A2/index.htm\nWe probably switched to the html entity or just put it outside the katex blocks. Though to be honest my memory is fuzzy now, this was like 2 years ago!\nCurious to know: will this PR allow non-math unicode chars like the \"cent sign\" as well?\nI think that'd be helpful. Sometimes you want to say \"5c * 5c = 25c,\" for example.\nThanks!\n. ",
    "flying-sheep": "126 doesn\u2019t do what this is about though.\ni want \u03c3 \u2208 \u211d to work just as well as \\sigma \\in \\mathbb R. this in combination with #132 would fix that, but not #126 (not that #126 wasn\u2019t great work!)\n. well, i didn\u2019t even try to understand this code, but wouldn\u2019t it be possible to loop symbols, and create an index for all literals that maps back to the relevant part of the structure?\njs\nlet unicodeSymbols = {}\nfor (let mode of ['math', 'text']) {\n    unicodeSymbols[mode] = {}\n    for (let macro in symbols[mode]) {\n        let spec = symbols[mode][macro]\n        if (spec.replace) {\n            unicodeSymbols[mode][spec.replace] = { font: spec.font, group: spec.group }\n        }\n    }\n}\nand then, using this, we could search for the symbol before the end of the lexer tests:\njs\nif (input[pos] in unicodeSymbols.text || input[pos] in unicodeSymbols.math)\n    return new Token(input[pos], ...)\nand later we make sure that parseSymbol is called for those tokens (if it wouldn\u2019t already) and extend the lines\njs\n} else if (symbols[mode][nucleus.text]) {\n...\n    new ParseNode(symbols[mode][nucleus.text].group, nucleus.text, mode),\nto\njs\nlet spec = null\n...\n} else if ((spec = symbols[mode][nucleus.text]) || (spec = unicodeSymbols[mode][nucleus.text])) {\n...\n    new ParseNode(spec.group, nucleus.text, mode),\n\nas alternative to unicodeSymbols, we could simply alias the elements in symbols to be both keyed by the macro (e.g. \"\\\\sigma\") and their \u201c.replace\u201d (e.g. \"\u03c3\"):\njs\nlet symbols = {\n    ...\n    \"\\\\sigma\": { ... }\n    \"\u03c3\": { ...(same as above)... }\n    ...\n}\n. you believe? how to be sure?\n. you\u2019ll first have to check @spicyj\u2019s claim that it may not always be a bidirectional mapping\n. umm, that\u2019s called textContent, not innerText\u2026\nalso i added some names\u2026 is there some better unicodedata out there that has everything in JSON or so?\n. >  Did you want the data to verify those glyphs are being displayed as missing\nyeah, to check @spicyj\u2019 claim. and i\u2019m already using that list.\n. about @qbolec\u2019s case: we have all those symbols, except \u201c\u2212\u201d, which is the real mathematical minus, and is encoded in TeX as the \u201c-\u201d aka hyphen-minus, the thing everyone has on the keyboard.\n. seems that i overlooked it. great!\n. fixed in #261\n. done. at first i was confused since ^ didn\u2019t appear to be in the symbols, but then i remembered that my texteditor\u2019s search interprets things as regex, so ofc it was there!\n. this is CommonJS, so only the module.exports = ... line defines what ends up in the module.\nand if we pollute the module-building scope or the scope of the only function defined during module building doesn\u2019t matter. (in the latter case we have all the loop vars in the function scope, and in the former we have those and \u201csymbols\u201d in the module-building scope.)\n. yeah, so how to proceed? merge this and add lexer support in another PR?\n. i rewrote the history and added lexer support and tests.\ncan anyone review this?\n. hmm, @spicyj is right in that there are nontrivial mappings!\nyou can test with this code:\n```\nvar reverse = {}\n// We let unicode symbols represent themselves\nvar syntax = \"^_\";\nfor (var mode in symbols) {\n    for (var symbol in symbols[mode]) {\n        var spec = symbols[mode][symbol];\n        if (spec.replace && !utils.contains(syntax, spec.replace)) {\n            if (!reverse[spec.replace])\n                reverse[spec.replace] = [];\n            reverse[spec.replace].push({ s: symbol, f: spec.font, g: spec.group });\n        symbols[mode][spec.replace] = {\n            font: spec.font,\n            group: spec.group\n        };\n    }\n}\n\n}\nfor (var rep in reverse) {\n    var equal = reverse[rep].every(function(s) {\n        return s.f == reverse[rep][0].f && s.g == reverse[rep][0].g;\n    });\nif (reverse[rep].length > 1 && !equal) {\n    var stringified = reverse[rep].map(function(s) {\n        return '\u201c' + s.s + '\u201d (' + s.f + ';' + s.g + ')';\n    });\n    console.log('' + rep + ' \u2192\\t' + stringified.join(', '));\n}\n\n}\n```\nwhich will print:\n\n\u223c \u2192    \u201c\\sim\u201d (main;rel), \u201c\\thicksim\u201d (ams;rel)\n\u22a5 \u2192    \u201c\\perp\u201d (main;rel), \u201c\\bot\u201d (main;textord)\n\u2223 \u2192    \u201c\\mid\u201d (main;rel), \u201c\\shortmid\u201d (ams;rel), \u201c\\lvert\u201d (main;open), \u201c\\rvert\u201d (main;close), \u201c|\u201d (main;textord), \u201c\\vert\u201d (main;textord)\n\u2225 \u2192    \u201c\\parallel\u201d (main;rel), \u201c\\shortparallel\u201d (ams;rel), \u201c|\u201d (main;textord), \u201c\\Vert\u201d (main;textord)\n\u2323 \u2192    \u201c\\smile\u201d (main;rel), \u201c\\smallsmile\u201d (ams;rel)\n\u2322 \u2192    \u201c\\frown\u201d (main;rel), \u201c\\smallfrown\u201d (ams;rel)\n\u221d \u2192    \u201c\\propto\u201d (main;rel), \u201c\\varpropto\u201d (ams;rel)\n\u22c5 \u2192    \u201c\\cdotp\u201d (main;punct), \u201c\\centerdot\u201d (ams;bin), \u201c\\cdot\u201d (main;bin)\n\u210f \u2192    \u201c\\hbar\u201d (main;textord), \u201c\\hslash\u201d (ams;textord)\n\u2020 \u2192    \u201c\\dag\u201d (main;textord), \u201c\\dagger\u201d (main;bin)\n\u2021 \u2192    \u201c\\ddag\u201d (main;textord), \u201c\\ddagger\u201d (main;bin)\n\u22b4 \u2192    \u201c\\unlhd\u201d (ams;bin), \u201c\\trianglelefteq\u201d (ams;rel)\n\u22b5 \u2192    \u201c\\unrhd\u201d (ams;bin), \u201c\\trianglerighteq\u201d (ams;rel)\n\u25b3 \u2192    \u201c\\vartriangle\u201d (ams;rel), \u201c\\triangle\u201d (main;textord), \u201c\\bigtriangleup\u201d (main;bin)\n\u25bd \u2192    \u201c\\triangledown\u201d (ams;textord), \u201c\\bigtriangledown\u201d (main;bin)\n\u22b2 \u2192    \u201c\\vartriangleleft\u201d (ams;rel), \u201c\\lhd\u201d (ams;bin)\n\u22a8 \u2192    \u201c\\vDash\u201d (ams;rel), \u201c\\models\u201d (main;rel)\n\u2248 \u2192    \u201c\\thickapprox\u201d (ams;rel), \u201c\\approx\u201d (main;rel)\n\u22b3 \u2192    \u201c\\vartriangleright\u201d (ams;rel), \u201c\\rhd\u201d (ams;bin)\n\u2216 \u2192    \u201c\\smallsetminus\u201d (ams;bin), \u201c\\setminus\u201d (main;bin)\n\u2205 \u2192    \u201c\\emptyset\u201d (main;textord), \u201c\\varnothing\u201d (ams;textord)\n. well that\u2019s an error in the mapping. we map both to the first one:\n- \u22a5 is U+22A5 \u201cUP TACK\u201d (Mathematical Operators)\n- \u27c2 is U+27C2 \u201cPERPENDICULAR\u201d (Miscellaneous Mathematical Symbols-A)\n\nwe should map \\perp to the latter, than this one will go away. maybe there are more problems like this.\n. also interesting is | and \u2223. the former is the normal bar on everyone\u2019s keyboard and the latter is the \u201cdivides\u201d mathematical operator (one of its aliases is \u201csuch that\u201d). here our mapping actually uses \u201cdivides\u201d for \\vert and \\mid and so on.\nhere is more insight:\n\nAccording to texdoc symbols:\n\\mvert and \\mid are identical and produce a relation. \\vert is a synonym for | and both produce the same symbol, but should be used in the context of an ordinal, and should be used as an operator, not as a delimiter (p54, bottom). \\divides once again produces the same symbol but should be used as a binary \u201cdivides\u201d operator.\n\\lvert and \\rvert are left and right delimiters, respectively.\n\nso some of them should possibly be changed to U+007C. or not, no idea.\n. > Then it's an error in the font.\nthen it is: U+27C2 perpendicular \u2260 U+22A5 up tack\nwe should go through the list my code emitted and classify everything. most things are just font changes, (\\stuff and \\thickstuff), but some aren\u2019t.\n. | U | ord | ord alt | rel | rel alt | open | close | punctuation | bin | bin alt |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| \u223c | \\sim | \\thicksim |  |  |  |  |  |  |  |\n| \u22a5 | \\bot |  | \\perp |  |  |  |  |  |  |\n| \u2223 | |, \\vert |  | \\mid | \\shortmid | \\lvert | \\rvert |  |  |  |\n| \u2225 | ||, \\Vert |  | \\parallel | \\shortparallel |  |  |  |  |  |\n| \u2323X | \\smile | \\smallsmile |  |  |  |  |  |  |  |\n| \u2322X | \\frown | \\smallfrown |  |  |  |  |  |  |  |\n| \u221d | \\propto | \\varpropto |  |  |  |  |  |  |  |\n| \u22c5 | \\cdot | \\centerdot |  |  |  |  | \\cdotp |  |  |\n| \u210f | \\hbar | \\hslash |  |  |  |  |  |  |  |\n| \u2020 | \\dag |  |  |  |  |  |  | \\dagger |  |\n| \u2021 | \\ddag |  |  |  |  |  |  | \\ddagger |  |\n| \u22b4 |  |  | \\trianglelefteq |  |  |  |  | \\unlhd |  |\n| \u22b5 |  |  | \\trianglerighteq |  |  |  |  | \\unrhd |  |\n| \u25b3 | \\triangle |  | \\vartriangle |  |  |  |  | \\bigtriangleup |  |\n| \u25bd | \\triangledown |  |  |  |  |  |  | \\bigtriangledown |  |\n| \u22b2 |  |  | \\vartriangleleft |  |  |  |  | \\lhd |  |\n| \u22a8 |  |  | \\models | \\vDash |  |  |  |  |  |\n| \u2248 |  |  | \\approx | \\thickapprox |  |  |  |  |  |\n| \u22b3 |  |  | \\vartriangleright |  |  | \u00a0 |  | \\rhd |  |\n| \u2216 |  |  |  |  |  |  |  | \\setminus | \\smallsetminus |\n| \u2205 | \\emptyset | \\varnothing |  |  |  |  |  |  |  |\n. this question which i linked above. and indeed i didn\u2019t notice @spicyj asked it :laughing:\n\nI hope this shows that there's at least some variation here and careful thought is required.\n\ni think a good approach would be special casing all ambiguous mappings, and then implementing a check that makes tests fail if there are unhandled ambiguous cases left.\n\nalso i think the font should be fixed so we can use the correct code points via #265\n. > That doesn't catch cases where we currently have only one of the symbols but might add another with the same output symbol in the future.\nof course it would. i specifically addressed this with this sentence:\n\n[\u2026] implementing a check that makes tests fail if there are unhandled ambiguous cases left.\n. so what do you propose to fix \u201ci can\u2019t type \u2018\u03c3\u2019 without KaTeX breaking on me\u201d NOW?\n\nand what better strategy do you have to vet all thousands of symbols?\n. i use greek, arithmetic symbols (\u00b7\u00d7\u00f7\u2260\u2264\u2265\u00b1\u2213), logical symbols (\u2227\u2228\u00ac), proof stuff (\u2203\u2200\u220e), \u2211, \u222b, set theory (\u2208\u2209\u2205), numeric classes (\u211d\u2115\u2124), and more stuff i can\u2019t remember right now but i will remember the compose key sequence one i need them.\nthis is why i want a comprehensive solution: i copy that stuff from ConTeXt documents into Reveal.js presentations and want them to work, not to have to search for a LaTeX macro replacing the symbol.\n\nso what\u2019s the process you created the mapping in symbols.js with? how can we fix e.g. \\perp not pointing at the UP TACK codepoint but the right symbol and the font still displaying a glyph it has.\n. > Why don't we just avoid the ones that have duplicates for now?\ni\u2019d like to see that as well, but @spicyj said he doesn\u2019t want to have mappings change over time. e.g. if we have, say \\foobar mapped to U+3333, and then we find out U+3333 is actually wrong and we change the mapping to \\foobar \u2192 U+4318, then suddenly U+3333 will no longer map to anything.\nthat\u2019s what @spicyj wants to avoid. (right?) so it has nothing to do with duplicates.\n@gagern your solution sounds good!\n. OK so what of https://github.com/Khan/KaTeX/pull/261#issuecomment-121511602 is done?\ndo you all agree that it\u2019s enough to do this?\n1. create reverse mappings from unicode \u2192 command\n2. have ambiguities handled manually using overrides derived from this table https://github.com/Khan/KaTeX/pull/261#issuecomment-114415474\n3. create an unit test checking that no new ambiguous reverse mappings exist that aren\u2019t handled in the override table\n?\n. @spicyj might be opposed to it. i think he said before in this thread that wrong mappings could slip through and would break backwards compat if changed. (right?)\nbut i think it\u2019s the most correct approach that isn\u2019t extremely incomplete or extremely much work. adding reverse mappings manually while checking every single mapping for correctness is invariantly one of both. or a compromise that is both incomplete and much work.\n. the font has to be modified as it contains a wrong mapping (as said in 261). U+27C2 perpendicular \u2260 U+22A5 up tack, and the font maps U+22A5 to \u201cperpendicular\u201d\n. true of course!\ni just referred to you saying\n\nThe KaTeX_Main font contains a glyph called \u201cperpendicular\u201d and maps unicode codepoint U+22A5 to that.\n\nwhich is wrong behavior. either it\u2019s able to map both to the glyph (in which case both names would be equally incomplete namings) or it\u2019d only map one codepoint to it, which should then correspond to the glyph name.\n. i\u2019m for using confusables.\n\n\u2043 hyphen-bullet\n\u2010 hyphen\n- hyphen-minus (ASCII)\n\u2212 minus\n\u2013 en-dash\n\u2014 em-dash\n\nare all confusable, and those are just the most common ones,  there\u2019s more!\nLaTeX translates hyphen-minus into minus, idk if we do it, too.. ",
    "micrub": "+1 . ",
    "n370": "Cool! thanks for giving me feedback :)\n. ",
    "matthaywardwebdesign": "Ah didn't know about the math tag being for MathML. I'll submit a pull request soon :)\n. Added in pull request #83 \n. ",
    "stephen304": "What about an option to automatically render between a specified delimiter? When I do latex in atom I use $ ... $ for inline latex and it would be nice to do something like katex.autoRender(\"$\") to have it search the document and render automatically or something like that.\n. ",
    "timelyportfolio": "or similarly as a web component\n. ",
    "cben": "Indeed, this is much simpler than finding all math between certain delimeters,\nbut already useful for output of various converters that can somehow mark math in the HTML.\nHowever a bit more flexibility is needed than just a class name:\n- kramdown translates markdown with $$-delimited inline and display math into MathJax-compatible... or ...tags.  Example code: Jekyll layout using KaTeX converts this markdown into this.\n  script tags require katex output to be inserted alongside the script, whereas span or div tags should replace the original element.\n- pandoc --mathjax translates math into <span class=\"math\">\\( ... \\)</span> and <span class=\"math\">\\[ ... \\]</span>\n- rst2html --math-output=mathjax produces <span class=\"math\">\\( ... \\)</span> and <div class=\"math\">\\begin{equation*} ... \\end{equation*}</div>\n. amended.\n. Input in a box easy enough with current API (catch error, put text in a span).  (Though a built-in option with default style could be handy.)\nBut accepting unknown \\foo and going on with parsing would be a real advance.\n(Of course it has to be optional \u2014 if I'm trying KaTeX and falling back to MathJax, I wan't an error for \\foo in case MJ does handle it)\n. You mean measure at run time?\nCurrently KaTeX output is a browser-independent pure function, right?\nThat's a very nice property, for server-side rendering, archival etc.\nI suppose in-browser measurement is unavoidably attractive to support whatever fonts users have installed.  Alternatives I can think of:\n- Allow any unmeasured characters, taking a guess \u2014 but also enforce the guessed size (or at least height) via CSS?\n- Have some build process that measures given webfonts into metrics KaTeX could use, producing fixed output that expects those webfonts to be served?\n. Well, #239 mentions http://cdn.jsdelivr.net/katex/latest/katex.min.js as a solution (currently at 0.5.1).\n. ",
    "hollingberry": "FYI, I\u2019ve already signed the CLA :)\n. ",
    "prlbr": "It seems that \\cfrac isn\u2019t in KaTeX v0.7.1. It would be great if it found its way into the next release. Thank you guys for all the wonderful work.. Unfortunately I have no idea how to help or else I would offer to.\nIs there a chance to handle \\cfrac as alias of \\dfrac until \\cfrac is fully supported?. > @prlbr You can definitely add a custom macro for yourself that maps \\cfrac to \\dfrac.\nThanks for the hint, it works like a charm!. Thank you!. ",
    "hastebrot": "\nspecific use case\n\nI'm develping a system to annotate / refer to DOM elements. Its math part is basically inspired by the formulas in Ian Steward: \"In Pursuit of the Unknown\". IDs are needed for a good bidirectional reference between annotation and math term, since the information for the reference is directly in the source that could be changed in the future.\n\n\neasy to mess things up\n\nI primarily need the macros \\class and \\cssId which could be <span>s or whatever MathJax uses for its implementation. This way it maybe won't affect the layout.\n. Since it is a non-standard macro it could fit in an extension.\n\\cssId would be a nice addition, but maybe \\class could be appropriate for formulas with grouped annotations (i.e. velocity and gradient in the picture).\n\nPerhaps these kind of annotated formulas are of practical use for the formulas on Khan Academy. :smile:\n. Hmm, I'm not quite sure. I wrote some code to select DOM elements using the mouse and intented a filter for elements with ID. Being able to de-blacklisting id and class via something like an options object would be nice.\nI quickly looked into the output MathJax generates on the MathJax Dynamic Math Test Page, e.g. using the formula f(x) = \\class{foo}{ax} + b it will add wrap ax into a <span class=\"mrow foo\" style=\"padding-left...\">.\n. @kevinb7 Wow, that looks fantastic!\n. Could you preprocess the math formula with a regular expression?\nI use the comma in written math, but have never seen it used in a LaTeX formula in the wild. It is very common in programming languages to use a point as decimal sign.\n. Maybe you could write {,} instead of ,.\n\n. ",
    "ry-randall": "@kevinbarabash How do we feel about bringing this back from the dead? \nI know there's a few people who are looking for it.\nIf you're okay with the concept, I can see what I can about the implementation.. @gagern Thank you for this PR. It's really exciting to see Latex rendering being brought to the canvas!\nWith this PR, is it possible to be able to get the appropriate width/height and translate each individual character?. FWIW, I am working on modernizing this solution, and already have most of the features implemented. I reached out to @gagern but received no response :(. I'd like to open-source the solution in a separate package to allow others to benefit. This would still leverage KaTeX's parsing/buildTree.\nIf anyone is interested in seeing progress, lmk. I can see what I can do.. @bshlgrs See https://github.com/Khan/KaTeX/issues/90. I'm gonna see if we can get this going again. I love the idea of having a \"minimal intermediate representation\". What's the status on this? What can I do to help?. @kevinbarabash Just curious, why does mathml not count as an intermediate representation?. Curious, why not a simpler \"IR\". Something that contains simple concepts like:\nx/y\nwidth/height\ntype: (i.e. text, shape, etc.)\n...\nI only ask because as I am working on a Canvas implementation, that's basically what I boiled it down to. I turned the buildTree -> simple POJOS -> Canvas. I know this is non-standard according to LaTeX standards, but I do feel like this could represent a core feature for KaTeX. MathJax has a similar feature, which can be found here: http://docs.mathjax.org/en/latest/tex.html#html\nI think it could be difficult to implement without access to the KaTeX core.. Was going to open an issue on this, but just came across this. \nI'm attempting to do: \\textsf{\\textbf{Hello world}}, and while it renders in bold, it does not render in Sans Serif font.\nIs there any update on this issue? What can I do to help?. @kevinbarabash Okay, I'll give this a shot. Thanks.. @kevinbarabash I noticed in: https://github.com/Khan/KaTeX/wiki/Function-Support-in-KaTeX that there's no support yet for a bold/itatlic Sans Serif font (along with others), but it looks like they are contained inside of the \"fonts\" folder. Do we know what's blocking these from being exposed?. @kevinbarabash @edemaine It looks like (if this were fixed) \\textbf{\\textit{x}} should be rendering a Main-BoldItalic font. However, I don't see that available either through Katex or MathJax-Dev. Am I missing something? . Just wanted to say thank you for this change. I'm working on a canvas renderer implementation, and this is a huge life saver.. @cjh9 I'm guessing you already know this, but you should be able to leverage buildTreeHTML via the buildTree. Would that work? Exposing just the HTML would probably require extracting some of the default options (i.e. https://github.com/Khan/KaTeX/blob/master/src/buildTree.js#L19). Hmm, I think 1. sounds good. My concern with 2. is how that would affect items downstream (i.e. the buildTree). Perhaps I don't understand it well enough though.. I'd be happy to take a stab at this for you.. Solved by: https://github.com/Khan/KaTeX/pull/902. Looking into this.. @akalin Thanks for finding/digging into this. Please see the open PR: https://github.com/Khan/KaTeX/pull/920. The code changes look fine to me. I'm not too familiar with submodules, but it seems like they add some extra overhead.\nIn particular (gathered from https://medium.com/@porteneuve/mastering-git-submodules-34c65e940407):\n\nEvery time you add a submodule, change its remote\u2019s URL, or change the referenced commit for it, you demand a manual update by every collaborator.\nForgetting this explicit update can result in silent regressions of the submodule\u2019s referenced commit.\nCommands such as status and diff display precious little info about submodules by default.\nBecause lifecycles are separate, updating a submodule inside its container project requires two commits and two pushes.\nSubmodule heads are generally detached, so any local update requires various preparatory actions to avoid creating a lost commit.\nRemoving a submodule requires several commands and tweaks, some of which are manual and unassisted.\n\nShould the readme be updated to help contributers understand how to work with the new submodule for fonts?. I agree it's an interesting idea. Would there be any concerns with turning that code into an npm module?. After having thought of it a little more, I think using a submodule should serve just fine. I'm finding it hard to think how you'd use semver for a font repo. It just feels a little odd. \nThe code here looks fine, have you had a chance to test via npm start?. [clabot:check]. @edemaine Whoops, no. Not sure how that happened! Will take a look at the failing tests either tonight or tomorrow. It looks to be due to how Jest deals with es6 modules.. @kevinbarabash I brought back server.js, and it's now leveraging webpack-dev-server. It's still failing however. I'll look into this tomorrow.. @kevinbarabash Agreed. Selenium tests are now back to running off of server.js.. @kevinbarabash Build should now be working with the makefile. Perhaps now that we leverage webpack, it'll be worth leveraging for builds as well? Just a thought. . I reverted back to commonjs modules in babelrc. At this point there's no point in leveraging ES6 modules since it will need to be transpiled to commonjs for the consuming app. \nPerhaps in the future, there could be two distributed builds (bundle.js & bundle.es6.js).. @kevinbarabash I would agree with you that the source-maps issue is related to Safari/Webpack.\nFor separate builds, it's not 100% clear to me without further investigation. There's a thread here: https://github.com/webpack/webpack/issues/1979 & a blog here: http://2ality.com/2017/04/transpiling-dependencies-babel.html which details the same problem.\nTLDR; probably don't need to break it into separate npm packages. There are fields other than \"main\" that are intended for modules (pkg.module, pkg.es2015, pkg.esnext). Unfortunately, it's still not clear which one to leverage.\nI'm happy to hear that things are building much faster now! There are a couple other things I'd like to work on, but I would be happy to help with more build related items in the future (if need be).. @caiofcm What are you using to build? Are you getting any errors on build time?. Yeah, this is a bug that exists with webpack. I remembered that this issue existed with webpack, but then forgot it when creating this PR. \nBasically you can't mix es6 with commonjs in the same file. See: https://github.com/almende/vis/issues/2934\nWe cannot change to ES6 format due to backwards compatibility. The solution would be to change the imports to commonjs format.\nI've been extremely busy lately, but I can see if I can get this in maybe next week. Should be a simple fix. If you want, you can open a PR, and I can take a brief look.\nBasically \nimport Blah from 'blah'; => const Blah = require('Blah').default;. @edemaine Nice catch, I can see how that's a pain. I don't see any concerns with leveraging disableHostCheck, but I also don't claim to be a security expert. I'm guessing for this project it shouldn't be an issue. . @edemaine @kevinbarabash Would you like me to go ahead and merge this?. @kevinbarabash You're right, this PR doesn't serve much use until 676 is merged. I figured this was out of the scope of 676, so I thought I would open a separate PR. \nI intend on working on 676 some point this week.\nIn the meantime, is there something you'd want me to add to this PR to indicate it's dependent on 676? \n. Updated to include SansSerif Italic as well.. Closing, as the work is now part of: https://github.com/Khan/KaTeX/pull/944. This is probably related to: https://github.com/Khan/KaTeX/pull/920. @kevinbarabash Good point. Definitely cleaner without using .default. Should node_modules be added as an ignore in the flowconfig?. It looks like the new stylelint is causing the build to fail here when running flow. Perhaps a simple solution would be to add an ignore for stylelint for now?\nOpen thread on this issue here: https://github.com/stylelint/stylelint/issues/2322 & https://stackoverflow.com/questions/38225538/flow-type-checker-errors-in-node-modules/38264353#38264353\n. This shouldn't be too hard to integrate for the css. \nIs static/main.js really something that is changed often? Does it need to be watched?. Nope, was just curious if it get changed frequently :). @kevinbarabash Good idea! I'm going to clean this up. I don't like how I approached some of this logic, and I think it could be improved. That being said, I expect it will be ready for this weekend. I'll remove the \"needs-revision\" label once it's ready.. @kevinbarabash Yes. I have been crazy busy lately. I'll be returning from a trip later this week. I would like to dedicate more time once I return. Thanks for your patience.. @justinfagnani When you say modules, I'm assuming you're referring to ES6 modules? At the moment, the entry point for Katex.js is of CommonJS format.\nThis is required for backwards compatibility, and an ES6 entry point would be a breaking change.\nThat being said, perhaps there could be multiple entry points distributed for Katex in the package.json, one of them being katex.es.js (as an ES6 module)?\nBabel can be used to strip out the flow annotations, or this library should work: https://github.com/flowtype/flow-remove-types\nThat would probably be run on each of the files in the dependency tree.. Please refer to the last comment here: https://github.com/Khan/KaTeX/pull/902\nLooks like pckg.esnext/pckg.module are options for the ES6 module's entry point. As far as stripping out the flow-type, I'm guessing that could be added to the build script?. That sounds good. I think the one other thing we'll need to do is convert the cjs module -> es for the Katex.js entry point.. Are you able to import Katex?\nYou should be able to solve this by changing the import to a require. Note: this only needs to be done for the entry point (not anything downstream). . @kevinbarabash Thanks for the quick feedback. Will take a look tomorrow or the wekeend.. @kevinbarabash This should be ready for another look. I opted to keep the existing unit testing method as it looked more verbose/readable. I did end up adding the tests you suggested however.. Thanks for the review @kevinbarabash . Yup, agreed that this should not be an issue. Forgot it hasn't been released.. @edemaine These changes look fine to me. What were you thinking for the new naming convention?. Using the existing \"render\" nomenclature sounds good. I agree that consistency would be nice here.. Okay. I see the issue. I can implement a fix, but I'd be curious if there's a better way. Ideally I'd like to reset all font options when entering math mode. Could you think of a place where that could be implemented?. Just got back from a trip. I'll take a look at this soon.. @kevinbarabash Starting to look @ this now. Agreed that withMathMode() is probably the most elegant way to go.\nTrying to think...where's the best entry point for when we enter math mode?\nMy first thought is around: https://github.com/Khan/KaTeX/blob/master/src/Parser.js#L486. I'm guessing I could leverage this.settings.options.withMathMode(). But would that be considered hacky?\n. @kevinbarabash This is looking good. I'll do one more pass tomorrow morning.\nEDIT: Did it now. @kevinbarabash Thanks for implementing. Would extracting these: https://github.com/Khan/KaTeX/blob/master/static/katex.less#L217 follow a similar pattern?. This is really exciting to see. I'd like to take a deeper look at this soon. Would applying the non-standard \\id{name}{latex} follow a similar pattern?. Just want to make sure I understand this plugin system:\nSince there are two separate entry points (contrib/html, and katex) which both share common KaTeX code, you use the CommonsChunkPlugin to extract the KaTeX specific code into it's own chunk, which these two entry points can share. This ensures that there's no code duplication, and contrib/html can leverage common katex code. Is that correct?\nMight need clarification from @kevinbarabash but was the intention to inject plugin functionality at run-time, not build-time? In other words, I think this change is dependent on the webpack config. If an outside user wants to plugin their own custom function, would they need to create a webpack config to allow them to do so?\n. I think if we go with this way for now, it would be good to add some documentation around how users can leverage this plugin system.. Agreed with \\class being a single span. I assume that it would be easy to have \\id follow the same pattern?. @kevinbarabash Out of curiosity, how are you running the katex/latex diffs?. Great idea.\nI think a general overall architecture would be useful for new devs.\nPerhaps the flow from raw latex to HTML/MathML output.\nMaybe buildHTML vs buildMathML...similarities, differences, etc.. One difference with math vs text font commands, is text commands change one aspect of the font (weight, shape, or family). Math commands change all aspects of the font (weight, shape, and family). I'm wondering, probably as a cleanup item, if we'd want to leverage options.withFont() for math, and options.withFontFamily/Shape/Weight for text. Currently options.withFontFamily is being used for math fonts as well a text families.\nEdit - Opened a separate issue here: https://github.com/Khan/KaTeX/issues/1112 for tracking purposes. Not sure it's a high priority though, nor do I think it should block this.\nEdit 2 - This PR takes care of this.. @edemaine I don't believe this is related. This PR isn't concerned with the font sizing.. @kevinbarabash I expect to get back to this early this week. Thanks for checking in.. @kevinbarabash I apologize for the delay on this one. This should be ready for another look.. @kevinbarabash Updated.\nDefinitely agree that the makeOrd implementation could be cleaned up. I think it's current state was a side effect of the assumption that math/text fonts behaved similar. That being said, it looks like a lot of solid cleanup has been done around fonts recently (i.e. pulling out the oldFonts from the parser, separating the text functions, etc.). I don't think the cleanup for makeOrd should be too bad.. Love this idea! . @kevinbarabash Doh! Didn't realize that KaTeX leverages the displayMode: true option in the demo page. I think this actually fixes another issue of mine as well... Going to double check, and then I'll close.. Confirmed this was indeed this issue. Thanks Kevin.. @edemaine Meant to mention prior to approving. Perhaps we'd want to add a test for this? Might be able to add to the existing \"Text\" screenshot.. Indeed I did haha.. @edemaine By a function that maps the various properties, were you referring to something like this? https://github.com/Khan/KaTeX/blob/master/src/buildCommon.js#L601\n@kevinbarabash I'm a little fuzzy on what you mean by \"IR were the ord nodes contained exactly what font each character should be rendered as.\". Are you referring to something like: render \"hello\" as SansSerif-Bold? . It's been a little while since opening this. I'll start taking a look at this.. @ylemkimon These are good points. I just happened to find String.raw useful when working with latex in my projects. Perhaps we could link to the mdn docs, and users can leverage based on their use case. There is also a babel polyfill that users can leverage if they need to support older browsers. \nI could be convinced that this isn't worth documenting either. Perhaps this is common knowledge to folks, or not as useful as I think.\n. Hmm, I'll look to see if there's a better way to do this, without suffering the edge cases. If not, I can update the docs.. Sorry, I really have not had time to work on this project. Going to close this now to reduce noise, and will make a note to re-open when I have time. Thanks for checking in.. @edemaine I'm gonna start digging into: https://github.com/Khan/KaTeX/issues/1175. While I'm in there, I'll keep this in mind, and revisit your question.. @edemaine Doh! Nice catch. I can close this issue. Curious, what's the best way to accomplish a smaller operator then with LaTeX?. @edemaine That worked perfectly. Thanks!. Thank you!. I'd agree. It sounds like this is completely out of scope. \nAs a followup, are there any environments that KaTeX supports which would simulate a simple paragraph? \nFor example: array, matrix, etc.?\nIn other words, is there a way to hack it together using pure katex, without html?\nTo help provide some context, I created a Canvas renderer which uses KaTeX's rendering data (pretty much matches all test-cases at this point). Unfortunately, I don't have access to the dom for my specific use case :(. I'm curious if the canvas rendering that I'm working on would help with these inconsistencies. Although, that might not be a good solution.\nOne potential workaround I can think of is supply an optional \"tolerance\" for the lap screenshot, and keep it very small (i.e. 0.01%). . I'm assuming CI can not just push a tag without some sort of user intervention, right? If we're following semver rules, someone would need to specify major/minor/patch bump. Unless I'm misunderstanding.. Think if you had two separate dom elements, each with a katex element inside. Then you wanted to align those elements vertically as if they were in one katex element. \nIn other words:\nconst katexA = \\frac{a}{b}\nconst katexB = \\frac{a^2}\nThen vertically position the two as if they were in one element. In order to do so, you would somehow need to know the baseline of both A/B, and align on that. Currently I don't think that's available to a user.\nHope that makes sense.. I'm working on a canvas renderer, so unfortunately I don't think that's possible. However, I looked at that PR again, and it looks like I can get the baseline distance with some simple math (strut + verticalAlign). Let me implement that, and I will close if that suffices. . @edemaine My above solution worked. Thank you for your quick responses!. @ylemkimon That looks like the right place! What work do you think is involved to provide the height of the overall expression in the build tree?. Alright, so I found a good solution to the problem.\nAfter looking @ the tree structure again (via katex.__renderToHTMLTree), I noticed that there's height/depth properties on the root of the tree. I leveraged those, and was able to get all my tests to pass again. I like this solution as opposed to looking @ the strut class anyway. Seems more robust.\nThanks all for your help. . Curious how \"reserved\" classes/id's are handled. For example, if someone tried \\class{strut}{blah} would it apply the strut class unintentionally? \nAlso, do you plan on adding tests for this?. @ylemkimon I'm not too familiar with the mathjax safe extension. Do you mean something like \\class{katex-className}{blah} where \"katex-\" would be the safe extension?\nEdit: I just took a look @ http://docs.mathjax.org/en/latest/options/other/Safe.html#configure-safe and found what you're referring to. \nI think that's the right approach, for sure. Others thoughts?. @ylemkimon I took a look @ this, and it looks like this PR removes the spacing when it wraps around operators (i.e. \\class{part-1}{\\frac{1}{2} + \\frac{3}{2}} = 2). \nI'm thinking it wouldn't hurt to add in screenshot tests as part of this PR as well.. In regards to the broken spacing, I think you'll find this PR helpful: https://github.com/Khan/KaTeX/pull/1388. Okay, great. I'll open a PR to export later today!. Not sure. I can take a look @ some point soon and open a PR for this.. Hmm, switching the kern distance based on the size seems like the easiest solution by far, but could likely cause issues in the future. \nFor example, if we expect that users might be adjusting those size factors (i.e. map large to 1.1) then they'd have to do it in two places (for the sqrt spacing as well).\nThat being said, that sounds like an edge case. Unless other folks have more outstanding concerns, then I think that's a simple solution to a tough problem.. I think the MathJax solution looks nice. Just want to clarify that MathJax is scaling the sqrt symbol, and the root itself, but not the content inside the sqrt?\nWould be worried about how this would affect the root/sqrt symbol visually? I'm assuming it's a 1-1 scale factor?\nAlso, this would just be a special case for sqrts/roots. Are there other symbols that would fit this case?. Fixed via #1485 . As a side note, this should help enable tree-shaking as well for consumers using webpack. Cool!. @kevinbarabash I would actually love that.. @edemaine Yup, I can do that for now....not a problem. A trimmed down package with just the fonts would be nice in the future!. AFAIK webpack recognizes the module field (a proposal) in the package.json.. For the short term, I'm using a library called canvg to convert svg -> canvas drawing commands.\nFor the longer term, I would like to leverage Path2D which is natively supported in browsers. Unfortunately, Edge doesn't support the addPath method. While there are pollyfills that exist, they don't work 100%. I noticed several breaking screenshots after attempting to go this route.. Setting to modules: false enables the use of tree-shaking with webpack. . Agreed. Will look into it.. Nice catch. Meant to take care of this prior to opening.. Done. Done. Done (no longer necessary). Thanks for finding this. I like this approach better. Done.. Hmm, isn't that more or less what it's been doing? There's a lot of calls to makeSymbol, so I'd just be worried about the implications of changing.. No, but I believe this should be textrm. Since it would be leveraging the default font family. Changed appropriately (and made the other text families separate). . These are great suggestions. Done.\nI'm guessing you wanted:\n\\textsf{\\textbf{$\\mathrm{A}$}}\nand\n\\textsf{\\textbf{$\\mathrm{\\textsf{A}}$}}. Hmm, I'm not sure. I ran the metrics as prescribed. Is there something I'm missing?. Ah, yes that's where I grabbed them from :). Thought you were saying there was something wrong with the shifts.. Done. https://stackoverflow.com/questions/20705677/mv-cannot-overwrite-directory-with-non-directory\nCouldn't overwrite a directory with the same name.. Font map is now strictly for math functions, and old text commands (\\rm, \\sf, etc.). The reason is the two are treated differently.\nText allows the fontFamily/fontWeight/fontShape to stack. In other words you can't simply use the last function to determine what the font is.\ni.e. \\textsf{\\textbf{H}} combines the two to make a bold SansSerif H.\nThis means that the old fontMap either wont work well for text, or will need to be very verbose (contain every permutation of family, weight, shape).\nMath and old font commands change the font as a whole, so the last one always wins\ni.e. \\mathsf{\\mathbf{H}} will make a bold, non-SansSerif H.\nThe old fontMap works fine here.\nThe determination for which route to go with happens here:\nhttps://github.com/Khan/KaTeX/pull/1009/files#diff-91067d2948380956002a57296faf3c18R208\n. Is the katexNode necessary here? Why not just return htmlNode?. Ah okay.. I believe this would be a breaking change. Users would just need to be aware of that.. For this to get used, you'd have to import the font into the dependency tree, right? Is that being done?. Would we want to rename this to webpack.prod.js?. I believe webpack will now inject these with either a script tag (extract plugin) or directly into the JS.. Nice. Is this a breaking change for CJS users?. \ud83d\udc4d . Hmm, but I still think katex.js serves as the entry point, right? Even though this will be wrapped in a UMD, I think it's going to be a breaking change when requiring the built artifact. This is due to ES6 modules always being named. When CJS users try and import Katex, they'll need to change their import from require('katex') to require('katex').default. \nPerhaps I am missing something though. . Could you avoid adding this dependency by adding the .default to your imports instead?. Assuming most of the infrastructure related changes go away once the webpack PR is merged? \nWhat changes are specific to this PR?. Doh, should have read your full comment :). It feels a little odd that some of this logic lies outside of the source (like this), but other logic needs to lie within the source (like Parser/types). That being said, I'm not sure there's a better way to implement it at this time without a major change.. What was the reasoning for switching from em to mu? Although, looking at whole numbers is definitely cleaner.. I think a comment here would be useful. The term glue might be confusing to people.. What was the reasoning for the rename?. \ud83d\udc4d . \u2764\ufe0f Love that this is gone. Nit: typo shoul -> should. Why is the recursive call necessary? Is documentFragment just a wrapper? Also, why is the last child a safe assumption?. Assuming this comment handled by this PR?. Same as above. This all looking super clean \ud83d\udc4d . Since this is just data with no dependencies. Perhaps it could be extracted outside of buildHTML into it's own module? Maybe a spacing.js?. The comment above indicates that this is spacing, but the variable name is nonSpaces. Is that intentional?. What's the reasoning for distinguishing these from spacings?. Cool, didn't know this!. Good question. I actually thought the same thing until I broke the tests.\nit(\"should render \\\\textsf{\\\\textbf{$\\\\mathrm{\\\\textsf{A}}$}} with the correct font\", function() {\n        const markup = katex.renderToString(\"\\\\textsf{\\\\textbf{$\\\\mathrm{\\\\textsf{A}}$}}\");\n        expect(markup).toContain(\"<span class=\\\"mord textsf textbf\\\">A</span>\");\n});\nBasically when going from text mode, to math mode, then back to text mode, it should retain the font weight/shape from the first time it was in text mode. Hope that makes sense.. Not sure I follow this. options.withMathMode() instead of options.havingStyle(newStyle)?. Great catch. This means I'll probably resolve  #1112 in the process.. Hmm, how would the old text fonts be handled? I.e. \\rm \\it. They behave similar to math fonts in that they change all aspects of the font.. I don't think withTextFontFamily/Weight/Shape would make sense with old font commands. Old font commands effectively change all 3, not just one. Additionally you'd lose the state when you exit the old font mode (i.e. \\textbf{{\\it hello} world}). They behave much more similar to the math commands, which is why I opted to leave the naming conventions generic.\nReally wish LaTeX fonts weren't so confusing :(. Hmm, I'll give this more thought either later today or tomorrow. Thanks for the quick review.. Correct. Also, we can't safely reset the values of fontFamily/weight/etc. \nConsider the following: \\textbf{$\\mathsf{\\textsf{a}$}. This should render as a bold, sans-serif \"a\", but if we reset, we would get a regular sans-serif \"a\". A fontFamily applies to a group of fonts. For example, the SansSerif family can be: regular, bold, or italic. In order to properly lookup the symbol, we need a specific font, not a font family.. Font families are a group of fonts, not a specific font. I'll add a comment.. I fixed a typo, assuming that's why?. I'll update.. If it is, I don't know it either. Apparently I'm trying to add subliminal messaging for slack.. This is a much cleaner approach \ud83d\udc4d . Just curious, why did these change?. While I know mathjax calls this \"cssId\", I think it would be nice to give it a more generic name (i.e. \"id\"). My only reasoning is, if multiple renderers end up being supported, css may have no meaning (i.e. in a canvas).\nFor a similar reason, I would give this file a more generic name as well (i.e. identifiers.js). I'm assuming we want this allowed in text?. @kevinbarabash Hit testing could be one use case. I was more thinking along the lines of being able to manipulate specific parts of the LaTeX separately. For example, let's say I had \\frac{\\id{numerator}{a}}{\\id{denominator}{b}} and I wanted to switch the two. I see as id/class as general ways of targeting specific areas of the latex. . Assuming you'll want to apply allowInText: true also to html, no?. ",
    "twotwotwo": "Thinking of using KaTeX to help modernize http://replacemath.appspot.com/ (which uses only server-side rendering now). I can still do that if KaTeX doesn't handle some things (just catch and fall back to the old renderer), but at least for common stuff I need it to throw.\n. (@xymostech Thanks much for the fix, big deal for my app.)\n. ",
    "utensil": "I may be able to look into it and work on it. Let me see if I can come up with something within 1 or 2 weeks. :smile: \n. @jmeas  Cool! \nThe metadata of symbols and functions that you mentioned could be:\n- grouping/category -- which is better if there's an official way to categorize them\n- doc -- a brief intro for the symbol and usage\n- sample --  which could be rendered\n- text/math?\n- symbol(context-free)/funtion(not context-free)?\n- layout property\n. :+1:  \nSee also \n- http://www.artofproblemsolving.com/Wiki/index.php/LaTeX:Symbols\n- http://latex.wikia.com/wiki/List_of_LaTeX_symbols\n. I've implemented/handcrafted a proof-of-concept preview page showing Symbols and functions in KaTeX (not all, until I also add functions from https://github.com/Khan/KaTeX/wiki/Function-Support-in-KaTeX ) .\nSo one migrating from MathJax can see how are the MathJax-supported symbols and function supported by KaTeX. This could also give potential contributors a sense about what is still missing(thus needs to be added). \n. @kevinbarabash Thanks. I would create a PR to add a link to it and improve it.\n. PR submitted as #369 , also added the contents in https://github.com/Khan/KaTeX/wiki/Function-Support-in-KaTeX . In future, there should be a better way to keep them up to date(though I believe the symbols/functions supported by MathJax could keep it sufficiently complete for a while).\n. With #268 merged, is this issue easier to address now?\n. But this and #350 are fundamental to any serious math writing. Would there be a plan or a series of milestones for this kind of features, to help the community to participate and collaborate? \n. From http://docs.mathjax.org/en/latest/tex.html#automatic-equation-numbering :\n\nEquations can be numbered in two ways: either number the AMSmath environments as LaTeX would, or number all displayed equations (the example above uses AMS-style numbering). Set autoNumber to \"all\" if you want every displayed equation to be numbered. You can use \\notag or \\nonumber to prevent individual equations from being numbered, and \\tag{} can be used to override the usual equation number with your own symbol instead.\nNote that the AMS environments come in two forms: starred and unstarred. The unstarred versions produce equation numbers (when autoNumber is set to \"AMS\") and the starred ones don\u2019t.\nYou can use \\label to give an equation an identifier that you can use to refer to it later, and then use \\ref or \\eqref within your document to insert the actual equation number at that location, as a reference.\n\nPersonally I'm used to this MathJax way, would KaTeX be similar?\n. @kevinbarabash Thanks for explaining. Now I see the reason and tag{} is indeed a good alternative in, say, math blog writing.\n. > @utensil use the katex.min.js and katex.min.css served off of khan.github.io is an interesting way to stay current. I think this should be okay unless we change were these files are located which seems unlikely, but it is a potential failure point.\nI totally agree. I started with the CDN version in README.md, but it seems to be not loading as fast as the github.io version, so I went with it for the time being.\n\nI think having the code for this in your repo is fine for the time being. If there are changes we want to make we'll fork it at that point.\n\nOK, that's point of open source and Github, no central point of failure, :wink:  And if it becomes somehow official later, there would always be a better way to stay current.\n\nOne thought about the layout... instead of having three colors, it might be better to have three columns: one for the command, one for the code use to generate the rendering, and then the rendering itself (or a a failure message like you have now).\n\nYeah. The thought crossed my mind too. I didn't use it because it's a little verbose for the symbols and I planed to do something similar when I find a proper way to separate symbols and functions(and meta characters). \n. Fixed. Should I squash my commits in this branch into one and git push --force? Not quite did that before.\nAnd travis-ci got this weird error: can't resolve github.com, seems to be temporary.\n. Is it OK now?\n. > http://utensil-site.github.io/available-in-katex/ provides a great list combining http://mathjax.readthedocs.io/en/latest/tex.html#supported-latex-commands, http://www.onemathematicalcat.org/MathJaxDocumentation/TeXSyntax.htm, and https://github.com/Khan/KaTeX/wiki/Function-Support-in-KaTeX. However, it is not actively maintained and currently not working.\nIt wasn't working because the links to KaTeX css/js somehow became invalid. It's now fixed. Thanks for the heads up. @ylemkimon \n\nIt is a great list, but it could be improved. There a are a few functions that it incorrectly flagged as not supported by KaTeX. The root cause was that its test string did not include a closing brace. MathJax accepts that sort of thing, but KaTeX does not.\n\n@ronkok , can you name some of these test strings without a closing brace so I can fix them? I failed to spot them still.. > We support following:\n\n\\begin and \\end\n\nFixed.\n\n\\global, \\def\n\nFixed.\n\n\\left and \\right\n\nNo, I can't get them working.\n\n\\S\n\nNo, I can't get it working.\n\n\\xtofrom\n\\xtwoheadleftarrow\n\\xtwoheadrightarrow\n\nFixed.\nI've fixed a few other symbols by testing one by one, now there are only 59 symbols/functions failed to render. \n. @ronkok Great work! \nWhere can I see this list? It seems there's still only https://khan.github.io/KaTeX/docs/supported.html after this PR was merged. And the gh-pages branch seems to be behind the master branch?. In the meanwhile, I'd incorporate this list into http://utensil-site.github.io/available-in-katex/ to keep it complete, now there're 208 symbols/functions that failed to render but 66 of them have some related work or an explanation.. \n@kevinbarabash 208 out of 1055, which is the same as the total count of this Alpha sorted function support page. \n. I get the \"showing how KaTeX would\" part, but what does \"symbols/functions (including\" part mean? I've checked it letter by letter, failed to find the difference.\n. This is the original wording, unchanged. I guess it means that the contributor would look for what's missing and add them. Should I change the meaning to the other way around(the users looking for what's already at hand)?\n. Oh I see.\n. ",
    "fplam": "Thanks for implementing my requested feature!\n. ",
    "houkanshan": "https://github.com/Khan/KaTeX/issues/52 \n. ",
    "ctrlcctrlv": "Yeah, it'd make sense to disable it by default.\nBy the way, I enabled KaTeX on 8chan.co which gets 5000 posts per hour and is a 4chan alternative. You can probably expect more bug reports like this (if you're interested in making KaTeX secure to be enabled in comment sections, that is).\n. Any update on this? Would like to turn off my filter if possible, or if you could let me know how to disable it on my site.\n. I couldn't get KaTeX to work for me and switched to MathJax due to no safe mode (user input mode). I've given up on it.\n. Glad to hear @kevinb7 :) I'll keep watching this ticket as I really did like KaTeX when I was using it.\nFor my site all contributions are anonymous and even abusive networks like Tor are not blocked, so it's really not an option to \"just ban the users\" because there are no accounts or karma or anything like that. That's why the commenting system has to be at such a high level of security, and especially all user input processors have to be secure.\nEven for slower moving boards where it [may] feasibly be enough to just delete posts of users abusing TeX, only certain people would know how to disable JS to actually get to the posts to delete them. It's also like Reddit where \"mods\" aren't trained...they're just users who made their own community/got assigned by the creator of a community.\n. ",
    "jschatz1": "We are thinking of using your library on our own large site. But are concerned about these security vulnerabilities. What is the status of these?. We are thinking of using your library on our own large site. But are concerned about these security vulnerabilities. What is the status of these?. @DouweM Anysite that allows user input that has to run something through JS would eventually get pegged. GH uses a checkbox list renderer that I am sure if you added a couple thousand markdown checkboxes you could get GH to crash. The question is how many sqrt's make it crash. If it's 5 that's a problem. If it's 9000 that's probably fine. . ",
    "DouweM": "@kevinbarabash Does KaTeX have any of the avenues for XSS issues that MathJax apparently has, which their Safe mode guards against?. @kevinbarabash All right, I'm happy to hear that. Then the main issue for us seems to be https://github.com/Khan/KaTeX/issues/158, which could be worked around by using web workers :)\nThanks for your quick responses!\nYou may see math rendering using KaTeX land in a GitLab instance near you in the near future: https://gitlab.com/gitlab-org/gitlab-ce/merge_requests/8003. > The easiest solution would be have some sort of heuristic for judging whether an expression is too complex or not and then don't process it or throw an \"expression is too big error\". We could also keep track of time and if we've be processing for more than 20ms, throw a \"taking too long error\". The timeout could be user configured.\nI would like either or both of those, how involved do you think it would be to implement that?\n\nWe could also look at running KaTeX in a web worker. This doesn't solve the issue of the resulting HTML being overly complex.\n\nInteresting. That would involve using renderToString in the web worker, and putting it into the DOM after it's finished?\nWe are thinking of adding math rendering support using KaTeX to GitLab (https://gitlab.com/gitlab-org/gitlab-ce/merge_requests/8003), and although I don't think it's a blocker, we would prefer for users to not be able to blow up the page with a specially crafted comment :). ",
    "joelkuiper": ":+1: \n. ",
    "shime": ":+1:\n. :+1: \n. :+1: \n. ",
    "fibo": "Can you please merge this?\nIt would be great, then I will try KaTex and update my article Math on GitHub Pages.\n. Thank you,\nI just noticed that package.json and bower.json files has version 0.3.0, while last tag is 0.4.0.\nI also got a warning when launched bower install katex\nbower invalid-meta  KaTeX is missing \"main\" entry in bower.json\n. ",
    "samccone": ":+1: :+1: , this is really annoying as a developer and kinda wrecks the advantage of using a package manager.. since now I have to build the files before I can use them \n. :+1: seems like a good plan to me @spicyj thanks for the resolution\n. might be nice to backdate the releases with tags, if you need some help doing that more than willing\n. yeah, i understand that, perhaps something like...  \nv0.1.1-build\nwould be a nice middle ground, take for instance this usecase.\nI have multiple apps that are on an older version of katex, I would love to drop the build step and just use the prebuilt version. If we add new tags for old releases I get that for free :smile: .\nOtherwise I need to upgrade to the latest (across breaking releases)  (which sometimes is not an option for some apps due to the cost of an upgrade)\nthoughts? \nThanks for having this dialog with me, I appreciate your time.\n. ",
    "tylerlong": "I have created a repository for the built files: tylerlong/katex-build\nYou can simply bower install katex-build and start using it!\nNo more client side building!\nCheers!\n. ",
    "justinfagnani": "Any word here on including built files and a bower manifest? The first thing I went looking for when I found KaTeX was the bower dependency to use :)\n. dist/katex.js isn't a JavaScript module though, and /katex.js is. Since browsers are now supporting modules, I'd like to just load a real importable JS module from unpkg without going through any kind of bundling step.\nI guess I was confused by the presence of what looked like modules because many of the files don't have Flow annotations. Can you just run them through the flow compiler and publish the raw output, without bundling with WebPack?. Thanks a lot for looking into this!\n@rrandallcainc yes, I'm referring to ES6 modules. And I'm not suggesting changing dist/katex.js* file, but the ones published in src/. Since you probably want to keep those around for sourcemaps you could compile them to a lib/ directory, unbundled, that just mirrors src/. That's what I typically do for my TypeScript projects.\nOn a little tangent, is there an alternate file extension to use with Flow that doesn't lead people to think the files are standard JS?\n*yet! I hope the JS ecosystem can move away from CJS as soon as possible :). I just don't see the need for bundling at the library level anymore, and unbundled files will give a much better developer experience with stack traces, sourcemaps, etc.\nApplications can do the bundling, and since the module graph is now easily statically determinable, it's quite trivial for build tools to find all the imported files.. Now that Firefox 60 has shipped with native modules, all major browsers have module support. This would be a great time to get Katex loadable in the browser without additional tools.. ",
    "jakiestfu": "What is the status of this issue?\n. Thanks spiceh!\n. ",
    "tirsen": "It would be awesome if the NPM package could also include the CSS and font files, or at least another package which do include these resources (if you want to keep the server side package nimbler). With webpack I can use NPM for almost everything except a few handful of packages, katex included.\n. It now includes dist but I had to remove the call to npm install from the \"dist\" target because npm install automatically calls \"prepublish\". I was looking into having a separate \"dist-no-npm\" target but it all gets pretty messy.\nI think maybe the best is to have travis call \"npm install\" and that calls \"make dist\" instead of calling \"make dist\" which calls \"npm install\"? Not entirely happy with that either, open to suggestions. :-)\n. And I signed the CLA. :-)\n. Done.\n. It looks like Travis actually runs npm install and npm test (auto detected probably?). So I think we're all good. The only issue is if you run \"make\" directly assuming it will run npm install, which it will no longer. (Since \"npm install\" now runs \"make dist\".)\n. ",
    "cbhushan": "Is there a list of LaTeX macros which is supported by KaTeX? It seems \\choose, \\over are also not supported. \n. ",
    "raichu": "Please also consider adding esstix font (ttf).\nAnswer to the \"compulsory\" question \"why not STIX\":\nESSTIX is the font used by many well known old science books, including Feynman Lectures on Physics, Introduction to Elementary Particles (1st edition, David Griffiths), Mathematical methods in the physical sciences (2nd edition, Mary Boas) and countless others.\nSTIX font, on the other hand, doesn't have anything to do with it and looks more like MS Word math font. (I personally hate STIX BTW).\n(that, and I secretly hope that the online version FLP will someday with to KaTeX+ESSTIX. And any other similar project.).\n. It seems Elsevier didn't include the text font.\nBut it does contain Greek letters and mathematical symbols.\nAnyone know what the text font in this document? It looks pretty close, but I'm not sure.\n. Esstix is the font used in many old (and famous) science books.\nTrying to capture that.\nStix math font on the other hand feels like an MS Word doc.\n. BTW, could you re-open this issue?\n42 is quite a different issue: it's about alternative scripts (mathrm, mathcal etc.) of a certain font.\nLike any other complete math font, ESSTIX font comes with its own mathrm, mathcal, etc.\n. ",
    "octatoan": "Any updates on this?\nConcrete Mathematics + Palatino is very nice. Both are Hermann Zapf fonts, and he's said they go well together.\n. @xymostech any updates on this?\n. ",
    "akalin": "The dotsc/dotso/etc. macros aren't implemented yet, right? Are there any plans for those?. I'm using Chrome Version 62.0.3192.0 (Official Build) dev (64-bit) on Linux and macOS. Just tried Safari 10.1.2 and Firefox 55.0.3 and  it works fine there. So it might be a Chrome-only issue, or even a dev-channel-only issue.\nAlso works fine on Chrome Version 60.0.3112.101 (Official Build) (64-bit) and Version 60.0.3112.113 (Official Build) (64-bit) on Windows. Looks like I forgot to switch to the dev channel on this machine -- let me try beta and then dev.... On Windows, works fine for Version 61.0.3163.59 (Official Build) beta (64-bit) but not Version 62.0.3192.0 (Official Build) dev (64-bit). So it looks like a dev-channel-only issue.. Cool, looks like it works: https://rawgit.com/akalin/60e78169d60908f8111652540f427607/raw/d1d9228c76637ffd92b4af1d9fe75075fea15d30/test-0.8.3.html\nNow it's just the missing fraction bar that's the problem.. Okay, here are some screenshots at various zoom levels with KaTeX 0.8.3 on macOS Chrome Version 62.0.3192.0 (Official Build) dev (64-bit). 90% and 75% zoom were ok.\n\n\n\n\n. Here are some more screenshots with KaTeX 0.7.1 on macOS Chrome Version 62.0.3192.0 (Official Build) dev (64-bit).\n\n\n\n\n. Also, when testing with Firefox 55.0.3 on macOS, I noticed that the sqrt overlines disappear at 30% zoom with 0.8.3, but work fine with 0.7.1, so unfortunately it seems like that isn't fully fixed yet, either.. Are these the same bug or two separate bugs? Perhaps we should split the issues.... Is there anything else blocking a new release? Would love to test!. Unfortunately, it looks like the auto-render extension is now broken? See https://rawgit.com/akalin/60e78169d60908f8111652540f427607/raw/c6858268a7649449d3a55d40fd954c38ff7930c7/test-0.9.0-alpha.html. ...in that\nrenderMathInElement(document.body, {\n  delimiters: [\n    {left: \"\\\\[\", right: \"\\\\]\", display: true},\n    {left: \"\\\\(\", right: \"\\\\)\", display: false}\n  ],\n  ignoredTags: [\n    \"script\", \"noscript\", \"style\", \"textarea\", \"pre\", \"code\",\n    // We sometimes need a dedicated tag.\n    \"nokatex\"\n  ]\n});\ndoesn't work anymore.. Seems like the auto-render extension is being webpacked into some new ES6 format, which probably isn't intended.. Here's a test page with the latest alpha: https://rawgit.com/akalin/60e78169d60908f8111652540f427607/raw/230b50fbf1f83fbf748b1683942620e6de21a69d/test-0.9.0-alpha1.html\nLooks like it mostly works now! I still see disappearing fraction lines at 50% and lower zooms, but that's way better than before. Thanks!. I've noticed that sometimes vertical lines can also disappear, e.g. the vertical divider in an array environment with [c|c]. I'll file a separate bug with a repro case, but do you think that could also be from the same root cause?. I hate to say it, but it looks like 0.9.0-alpha2 regresses. :( See https://rawgit.com/akalin/60e78169d60908f8111652540f427607/raw/fd7f91f08774a70185c003b8b29f144fb4b65d52/test-0.9.0-alpha2.html , which looks like this to me:\n\n. 0.9.0-beta seems to have completely fixed the problem for me: https://rawgit.com/akalin/60e78169d60908f8111652540f427607/raw/dddea153264adabe863e3a4f6c24c4cd220996dd/test-0.9.0-beta.html\nThanks everyone!. Not sure if 0.9.0-alpha2 is supposed to fix this too, but https://rawgit.com/akalin/cc8023a41d1fc1cd0250bc50d122680f/raw/e7b2ba03faa7b28b93951dc21402fc5ab443f0eb/test-0.9.0-alpha2.html is a test file that behaves the same way as 0.9.0-alpha1.. 0.9.0-beta fixes this completely for me: https://rawgit.com/akalin/cc8023a41d1fc1cd0250bc50d122680f/raw/81cbe2e2c359d591b61260c832490c0f1d2c87cc/test-0.9.0-beta.html\nThanks!. I looked for one, but couldn't find any. But I guess \\kern with 5pt (= \\arraycolsep) works well enough for now. Thanks!. Hmm...but does it need negative space? If I use \\mathbin{\\mathrm{mod}} that works perfectly fine: see\nhttps://cdn.rawgit.com/akalin/98bc47f5e54f7529462f12a1d7336858/raw/b71b173e7fdc3459938d7f362574da51eacdad6a/test-0.8.3.html\nSo I guess that's a workaround for now.. Hmm, that \\bmod macro seems to have too little space after mod. With\n\\begin{aligned}\n& (a \\cdot b) \\bmod 257 \\\\\n& (a \\cdot b) \\mathbin{\\mathrm{mod}} 257 \\\\\n& (a \\cdot b) \\kern1mu\\mathbin{\\mathrm{mod}}\\kern1mu 257\n\\end{aligned}\nI get\n\n\\mathbin{\\mathrm{mod}} seems closer to \\bmod.. Although the 2nd \\kern1mu should add space, right? It's weird that putting it in removes space.... Thank you!. Here's what i see on my 2015 retina Macbook pro:\nTable 1:\n\nTable 2:\n\nTable 3:\n\n. Ah, good point, forgot that they were separate! I agree.. Writing the equation as \"A = (\u03b5_0 + H)/2\\text{,}\" does work in this case, but it would be nice not to have to do that. (Also, I'm not 100% sure that it sometimes doesn't break between the two anyway.). Ah, cool, glad to hear this is a known thing. I was considering modifying auto-render, too, but I don't quite understand what #604 has to do with it. My idea would be as follows:\n1) After autorender splits up a piece of text into a list of text and math blocks, but before it renders the math...\n2) For each text block following an inline math block, if some option is set with a string of punctuation, or a regexp or something...\n3) If the beginning of the text block matches the punctuation string/regexp, wrap it in a \\text{...} fragment and append it to the previous inline math block. Looks like you use a nobr span; that might work, too.\nWould this be something that would be useful to have in auto-render (i.e., would a patch be accepted), or should I expect to just have it for myself?. ",
    "spelufo": "Very nice. I pulled your mathrm_mathbb branch just so I could use this. \\mathbb{R} for real numbers is essential. Is there a reason why this isn't merged yet? Can I help in any way?\n. I think \\implies also goes by \\then, but perhaps there is some subte difference.\n. ",
    "martonbognar": "Are you considering implementing this? I think mathbb would be a great addition.\n. Do you have an ETA on this?\n. ",
    "underyx": ":1234: :+1:\n. ",
    "maxdumas": "I agree this should be merged. This feature is absolutely critical for me to use KaTeX as I work with sets a lot.\n. ",
    "akof1314": "I agree this should be merged. \n. ",
    "justjanne": ":+1: Only found out KaTeX had no mathbb today, because I assumed it\u2019d just have it \u2013 this is a must have!\n. ",
    "kaushik1979": "@jmeas I added katex from atmosphere.meteor.com. any idea when will the update will be available from atmosphere?\n. Any idea when will the merge and release to atmosphere.meteor.com will happen?\n. Is the new release available from atmosphere now?\n. Is there an update on my request? I will be really thankful if someone can help me get the latest KaTeX code to atmospere.meteor.com.\n. ",
    "sthoch": "The solidus is there in my Firefox 44.0.2 (OS X 10.9.5).\n. Sorry, let me clarify: If I take your PR and use it to render \\not{abc} with my Firefox, the solidus is there and not missing. I thought that was the problem.\n. > Firefox 44.0.2 (OS X 10.9.5).\n. The span.katex>span.katex-mathml>math>semantics>annotation tag contains the LaTeX Code. Is this what you are looking for?\n. The \\displaystyle command is supported by KaTeX. Are you asking for an automated option that applies it to all TeX-code on a page?\n. Then you are asking for an prefilter for the autorenderer. Consider renaming your issue accordingly.\n. _ is a culprit, as well.\n. Hello, I did a similiar hack not too long ago, try\n\\;{\\tiny\\begin{matrix}^{\\scriptsize overset}\\\\ \\normalsize normal \\\\ ^{\\scriptsize underset}\\end{matrix} }\\;.\n\nThis is what it looks like with your formula:\n\nF - 1{,}6 - BP \\;{\\tiny\\begin{matrix}\\\\ \\normalsize \\longrightarrow \\\\ ^{\\scriptsize F - 1{,}6 - BP}\\end{matrix}}\\; F6P + P_i\n. \\gtis supported by KaTeX (https://github.com/Khan/KaTeX/wiki/Function-Support-in-KaTeX) and it is rendering on https://khan.github.io/KaTeX/. Your error must be elsewhere, providing the error message would help pinpointing where.\n. Hi,\nthere is work on that here: #251.\nKind regards!\n. This is a duplicate of #527 (or the other way around).\n. actually, no. @PeterBocan has two \\crs. If we have only one, the fractions overlap:\n\n. Interesting: == results in less spacing between the equal signs than =\\!= ...\nAs a workaround you can use {=}\\!{=}\\!{=}.\n. Could be a font-size related issue like #41. At 4-5pt I get a similiar rendering to yours, above that, sometime the subscript touch the fraction bar. How small are you rendering? In what context are you using KaTeX?\n. FYI, \nTeX\ng(x)=2\\sqrt[{\\large 3}]{x}\nworks, if anyone needs this before it is fixed.. KaTeX does not support some of the functions that the formula uses, c.f. the wiki.\nHowever, there are workarounds for overset and you could try to emulate the long arrow manually using dashes and negative spacing, like -\\mkern{-0.38em}-\\mkern{-0.38em}\\rightarrow .... Cool. I feel like the arrows should be a tad thicker, but other than my gut, I have no reference atm.\nThe errors from here: https://travis-ci.org/Khan/KaTeX/builds/218513949 don't seem cryptic to me. What errors are you refering to?. Have you tested this on a variety of browsers? in a different project, we ran into problems with subpixel rendering in gradients that led to inconsistent behaviour.. As I mentioned on the issue (#760), I advise testing on other browsers. I had some problems with gradients involving halfpixels some time ago - could be fixed now, could be not. IIrc, Safari (maybe on iOS) made some troubles.. Also after matrices, {a \\atop b} and aligned.\nAs a workaround, \\mathbin{\\mathrlap{\\,/}{=}} doesn't have the issue.. ",
    "mihoward21": "Yes I agree, thanks for pointing them out.\n. ",
    "rguthrie3": "You're correct, it would be best to relabel it as \\Span with a capital S.  It is the span from linear algebra.  I wanted to use it when I was playing with KaTeX and it wasn't there, so I went ahead and added it with the other things I wanted to use, but it isn't a crucial addition.\n. ",
    "correnson": "Great job ! Although, it would be nice to update the Wiki accordingly, since this is the primary document found when using GitBook, which could be a great environment for co-authoring math. And having logic connectors is a strong requirement here.\n. https://github.com/Khan/KaTeX/wiki/Function-Support-in-KaTeX\n. Nice!\n. ",
    "iamdanfox": "My bad - let's close this one!\n. I had hoped to use webpack to require the CSS, but I've just discovered this doesn't load the fonts correctly.\nI guess referencing in node_modules would work too...\n. Shall I put in a pull request with the Greek fonts deleted then?\n(The only reason I was getting errors is because the webpack style loader I was using goes and 'require's every resource, and freaks out if it can't find them)\nEdit: I tried this locally and it totally worked: https://github.com/iamdanfox/KaTeX/compare/remove-greek-fonts?expand=1\n. Done\n\nOn 8 Feb 2015, at 01:54, Ben Alpert notifications@github.com wrote:\nHey \u2013 would you mind signing the Khan Academy CLA at http://www.khanacademy.org/r/cla http://www.khanacademy.org/r/cla? Thanks for sending this in!\n\u2014\nReply to this email directly or view it on GitHub https://github.com/Khan/KaTeX/pull/184#issuecomment-73392864.\n. \n",
    "fegemo": "hi! I've just run into the same need: to include css from a browserified context, using the npm repository. (Just FYI, I'm planning on including the css file using github.com/substack/insert-css)\nThen I read #114 and saw the https://github.com/tylerlong/katex-build repo, which I'm going to use. But I'd just like to know if that is the way to go, since neither issues (#114 and #148) are closed.\nThanks for the great lib!!\n. ",
    "breeswish": "+1 css file is missing\n. ",
    "newjam": "+1 I've been hoping this get's resolved for some time\nI don't want to 1) introduce another package tool like bower or 2) manually installing the dependency.\n. ",
    "blink1073": "You don't necessarily have to include the files in the repo, since make dist is part of the prepublish script, this should be all you need: \ndiff\ndiff --git a/package.json b/package.json\nindex 24b6c69..8aef723 100644\n--- a/package.json\n+++ b/package.json\n@@ -11,7 +11,8 @@\n     \"katex.js\",\n     \"cli.js\",\n     \"src/\",\n-    \"dist/\"\n+    \"dist/*.*\"\n+    \"dist/**/*.*\"\n   ],\n   \"license\": \"MIT\",\n   \"devDependencies\": {\nWe are doing something similar in our project: https://github.com/phosphorjs/phosphor-core/blob/master/package.json\nWould you accept this as a PR?\n. Ah, this may not be necessary at all, it looks like the released version is missing the dist/ part altogether.\n. ",
    "walkerrandolphsmith": "I would love to see this feature too.\n. ",
    "drdozer": "I really need these symbols. What is blocking this pull request? Is it something I can fix?\n. ",
    "norpol": "I think you're going to enjoy the mathjax tex examples. And maybe you'd like to have a look on the wikipedia tex-article.\nUpdate: Checkout Wikibooks on LaTex\n. ",
    "cedced19": "Thank you!\n. ",
    "jeromew": "Ok I think I found the problem.\nI use bootstrap for which the default font-size = 14px.\nThe font is loaded at 1.21em = 17px.\nThe KaTeX website has a demo output font-size = 18px so the font is loaded at 22px.\nIt appears that under 22px, odd px font-sizes lead to nearly invisible dash in the '=' sign (either the upper dash or the lower dash).\nThis seem to be a rounding issue.\nI will leave to you the decision to close this issue or not since I have no idea if such rounding issues (which have a real impact on display quality) can be solved reasonably.\n. @kevinb7 ok no problem ; thanks for the issue triage ; the visual effect I had is indeed the same as on #248 \n. ",
    "W4RH4WK": "just had a similar issue with pandoc using --self-contained removing the greek font entries solved the problem.\n@iamdanfox commit looks good to me\n. ",
    "stared": "As of now\nkatex.renderToString(\"\\\\#\")\nproduces an error:\nError: KaTeX parse error: Expected 'EOF', got '\\#' at position 2: \\#\u0332\n. ",
    "michaelcadilhac": "Any update on that?  It seems that hspace is a reasonable thing to have indeed.  Cheers.. @kevinbarabash certainly, hence why not hspace?. ",
    "Casyfill": "oh, waiting is hard... :-). ",
    "pashinin": "I'm also interested in it. I really want to have a function to parse DOM text nodes and render inline formulas like $...$. Does KaTeX provide this function?\n. Well, it should not be displayed as \"tan\", it should be \"tg\". It should not be just a pointer to the same function.\n. Yes, I think for all post Soviet countries. I didn't even know what \"cot\" is, but know \"ctg\".\n. [clabot:check]. ",
    "mpascucci": "Hello,\nmaybe you want to use a specific class for elements that should be converted to latex, and convert all elements of that class to latex.\nset the right font size:\n<style>\n     .my_latex { font-size: 2em !important; } \n     .inline_formula { font-size: 1.1em !important; } \n    </style>\nwrite yout formula:\n<p>This equation : <span class=\"my_latex inline_formula\">f(x)=0</span></p>`\nAnd a big one:\n<p class=\"my_latex\">1+1=2</p>\nand add this script at the end of the body:\n<script type=\"text/javascript\">\n      var els = document.getElementsByClassName(\"my_latex\");\n      for (var i =0; i< els.length; i++) {\n        e = els[i]\n        e.id = \"latex_temp_id\"\n        katex.render(e.textContent, latex_temp_id);\n        e.id = \"\";\n      }\n    </script>\n. ",
    "ted-dokos": "Is this actually a bug? I get the same result using regular LaTeX.\n. ",
    "marshallshen": "@spicyj : I'm using Gitbook with Katex plugin, which includes dynamic rendering of Katex on its latest editor. Unfortunately I wasn't able to find the source code where magic happens.\nI'm not sure if it's an issue of Gitbook plugin or KaTex backend, apologize I didn't investigate further..\n. Btw, thanks so much for working on Katex! It's truly an amazing product! :+1:  :beers: \n. ",
    "tgirod": "That one would be very nice indeed. Or eqnarray.\n. Yes @spicyj, the idea was to align several equations, like one would do with {eqnarray}, for example.\n. ",
    "joshuapinter": ":+1: Would be great.\nAny update on this, guys?\n. In my case I'd like to generate two equations with one string: \nEq1 = 1.23 * 5^5 * 5.3 \\newline\nEq2 = 3.21 * 2^2 * 3.5\nAlso of note, supporting empty spaces would be useful. In Latex, I'd use something like:\n\\hspace{2}\n. ",
    "dt1973": "+1 for \\\\ and \\newline.\n<p class=\"tex\">x + 4 = 6</p>\n<p class=\"tex\">x = 2</p>\nis just too much and would require extra CSS to bring the two paragraphs closer together. The following, on the other hand, would be perfect:\n<p class=\"tex\">x + 4 = 6\\\\x = 2</p>\n. Thanks. Lowercase eur looks good though.\n. ",
    "tommyZZM": ":+1: \n. ",
    "black-puppydog": "In the absence of a simple \"Vote!\" button: /me wants! :+1: \n. ",
    "JetStarBlues": ":+1:\nNewline useful for showing derivations or other calculations that take more than one line to solve...\nNot sure if there's a more elegant way to do it, but currently this is what my html looks like,\n<div id=\"line1\"></div>\n<div id=\"line2\"></div>\n<div id=\"line3\"></div>\n<div id=\"line4\"></div>\n<script>\nkatex.render(\"a = \\\\frac{V_{2} - V_1}{t}; \\\\quad V_{2y}=0\", $(\"#line1\")[0] );\nkatex.render(\"t = \\\\frac{-V_{1y}}{a_{y}}\", $(\"#line2\")[0] );\nkatex.render(\"t = \\\\frac{-V_{1y}}{-9.81\\\\ {m s^{-2}}}\", $(\"#line3\")[0] );\nkatex.render(\"t = \\\\frac{V_{1y}}{9.81\\\\ {m s^{-2}}}\", $(\"#line4\")[0] );\n</script>\nNot very pretty.\n. Ah, I see. Cool!\n. ",
    "tomalec": ":+1:\n. ",
    "kirbyfan64": "Any update on this?\n. I'd like it more if there was something that said, \"Hey! Not all of MathJax is supported!\"\n. Does KaTeX support section symbols? I didn't think it did.\n. Well, I think the newest version of KaTeX continues on error and renders the other stuff anyway. I think.\n. ",
    "sohailykhan94": "This is how I'm dealing with it in my react project: \njavascript\nfunction MathDisplay ({ ...props }) {\n    var returnVal;\n    var text = { ...props }.data;\n    var arr = text.split('\\\\\\\\');\n    for (var i = 0; i < arr.length; i++) {\n        var math = katex.renderToString(arr[i], { throwOnError: false, errorColor: '#FF0033' });\n        if (typeof returnVal === \"undefined\") {\n            returnVal = '<p>' + math + '</p>';\n        } else {\n            returnVal = returnVal + '<p>' + math + '</p>';\n        }\n    }\n    return (<div dangerouslySetInnerHTML={{ __html: returnVal }} />);\n};\nIts a hack and I feel very dirty, but deadline soon. Might help someone else.. ",
    "jeffswt": "This lack of function had caused my site to fail on numerous occasions after migrating MathJax to KaTeX.\nI'm currently waiting for a solution (and not a hack... :P) to get this working. I suggest that this linebreak should be added to the release ASAP, regardless whether it would break some visual workarounds, lest it should break a number of sites which highly rely on \\\\ or \\newline.\n@sohailykhan94 probably you could make a code injection (a.k.a. hook) into the KaTeX class so it could temporarily render line breaks?\nEdit: I've written a code injection method available below.. @spelufo @spicyj @sohailykhan94 After an hour of experimentation, I've came out with a code injection / script hacking method which injects my code into the KaTeX context. This function automatically splits the line breaks with ease, and is friendly towards single-line equations.\nThis function ought have been used only once, before any render operations are executed.\nJavaScript\nhook: {\n    katex_hook : null,\n    katex : function() {\n        // Store katex hook to local area\n        hook.katex_hook = katex.render;\n        // Destroy remote function\n        katex.render = null;\n        // Create desired hook function\n        function remote_hook(rend_str, target, cfg) {\n            rend_str = rend_str.replace('\\n', ' ');\n            rend_arr = rend_str.split('\\\\\\\\');\n            if (rend_arr.length <= 1) {\n                hook.katex_hook(rend_str, target, cfg);\n            } else if (rend_arr.length > 1) {\n                for (var i = 0; i < rend_arr.length; i++) {\n                    rend_s = rend_arr[i];\n                    elem = document.createElement('p');\n                    hook.katex_hook(rend_s, elem, cfg);\n                    target.appendChild(elem);\n                }\n            }\n            return ;\n        }\n        // Join to global function\n        katex.render = remote_hook;\n        // Succeeded\n        return true;\n    }\n}\nhook.katex();\nYou may also use this one with some additional CSS tweaks, which are extremely useful in responsive designs. Inline equations wraps at the end of the line, and displayed equations scroll when being too long. Stick these code into the CSS stylesheet.\nCSS\nspan.math.display {\n  display: inline-block;\n  max-width: 100%;\n  overflow-x: scroll;\n}\n.katex-display > .katex {\n  display: inline-block;\n  white-space: nowrap;\n  text-align: initial;\n}\n.katex {\n  font: normal 1.21em KaTeX_Main, Times New Roman, serif;\n  line-height: 1.2;\n  white-space: normal;\n  text-indent: 0;\n}\nHope this may help you do this. However, display effects might differ from TeX standards, and this is only a quick fix. May these tweaks be incorporated into the master branch, and leave a thumbs up if you find this useful.\n\n5 April fix: The CSS works bad on desktops. Now it looks better for .katex .display.\nCSS\nspan.math.display {\n  display: inline-block;\n  width: 100%;\n  overflow-x: auto;\n}\n. @tivewsalaeharad This issue is closed. Clean solutions for this issue have been incorporated to the latest version through PR #1298. So the JS snippet above is no longer required.\nAnd no. Formulae should auto wrap (I recall) by default and the CSS tweak is supposed to disable auto word wrapping.\nAs for embedding a JavaScript, you just put the snippet at the end of the HTML document, enclosed with a pair of <script> tags. That should work. (Ask Google and try it yourself before posting in the issues section. Project maintainers are receiving too many Emails.). This would only line break inline equations and make displayed equations scroll.\nTook me a while to figure it out, but you may simply copy this into the CSS file.\nCSS\n.katex-display > .katex {\n  display: inline-block;\n  white-space: nowrap;\n  max-width: 100%;\n  overflow-x: scroll;\n  text-align: initial;\n}\n.katex {\n  font: normal 1.21em KaTeX_Main, Times New Roman, serif;\n  line-height: 1.2;\n  white-space: normal;\n  text-indent: 0;\n}\nWorks perfectly on responsive pages, as far as I'm concerned.\nLeave a like if you find this working nice.. \nI'm currently using Chrome 68.0.3440.106 stable, so maybe this issue doesn't have anything to do with browser versions or operating systems. It is highly susceptible that the fonts are not loaded completely, or that the browser is not under its default configuration.\n\n\nUpdate: When the zoom is lowered down to 67%, the issue can be replicated to some extent. However when looked at closely, the letters still don't stick together like your situation.\nIt can be learned from your screenshot that your browser is not handling font anti-aliasing for particular elements in the demo page. I guess maybe the font renderer is not working properly.. Possible issue duplicate: #1775. ",
    "anirudha-banerjee": "Is there any update on this?\nI mean can i use \\\\ outside {aligned}, in v0.9.0-alpha1\nIf not, is there any alternative to \\\\, which can be used outside {aligned}?. @edemaine Thank you for the response.\nMy application is content heavy, so there are lots of formulae and symbols. Now, previously i was using mathjax and that supports \\\\ outside {aligned}. So, all my content has \\\\ outside {aligned}, and katex doesn't render those formulae. \nNow, the thing is, there are lots of formulae and editing each one and adding \\begin{aligned} ..... \\end{aligned} will become a real pain. So, please can you check, if there is any alternative to this, because that would be really helpful. . i have tried putting \\\\ without \\begin{aligned} and \\end{aligned}, but it throws error.\nError: KaTeX parse error: Expected 'EOF', got '\\\\' at position 11: \\boxed{A} \\\u0332\\\u0332 \\boxed{b}\nonly works if i write this inside \\begin{aligned} ...... \\end{aligned}. @edemaine @kevinbarabash  Thank you for your quick replies. I guess i'll also follow this option then, the MathJax as a failsafe one. . ",
    "bb010g": "Some documentation on how to set up MathJax as a fallback for KaTeX in the mean time would probably be good.. ",
    "tivewsalaeharad": "\n@spelufo @spicyj @sohailykhan94 After an hour of experimentation, I've came out with a code injection / script hacking method which injects my code into the KaTeX context. This function automatically splits the line breaks with ease, and is friendly towards single-line equations.\nThis function ought have been used only once, before any render operations are executed.\njs\nhook: {\n    katex_hook : null,\n    katex : function() {\n        // Store katex hook to local area\n        hook.katex_hook = katex.render;\n        // Destroy remote function\n        katex.render = null;\n        // Create desired hook function\n        function remote_hook(rend_str, target, cfg) {\n            rend_str = rend_str.replace('\\n', ' ');\n            rend_arr = rend_str.split('\\\\\\\\');\n            if (rend_arr.length <= 1) {\n                hook.katex_hook(rend_str, target, cfg);\n            } else if (rend_arr.length > 1) {\n                for (var i = 0; i < rend_arr.length; i++) {\n                    rend_s = rend_arr[i];\n                    elem = document.createElement('p');\n                    hook.katex_hook(rend_s, elem, cfg);\n                    target.appendChild(elem);\n                }\n            }\n            return ;\n        }\n        // Join to global function\n        katex.render = remote_hook;\n        // Succeeded\n        return true;\n    }\n}\nhook.katex();\nYou may also use this one with some additional CSS tweaks, which are extremely useful in responsive designs. Inline equations wraps at the end of the line, and displayed equations scroll when being too long. Stick these code into the CSS stylesheet.\ncss\nspan.math.display {\n  display: inline-block;\n  max-width: 100%;\n  overflow-x: scroll;\n}\n.katex-display > .katex {\n  display: inline-block;\n  white-space: nowrap;\n  text-align: initial;\n}\n.katex {\n  font: normal 1.21em KaTeX_Main, Times New Roman, serif;\n  line-height: 1.2;\n  white-space: normal;\n  text-indent: 0;\n}\nHope this may help you do this. However, display effects might differ from TeX standards, and this is only a quick fix. May these tweaks be incorporated into the master branch, and leave a thumbs up if you find this useful.\n5 April fix: The CSS works bad on desktops. Now it looks better for .katex .display.\ncss\nspan.math.display {\n  display: inline-block;\n  width: 100%;\n  overflow-x: auto;\n}\n\nDear Mr. Jeffswt, sorry, but I'm not skillful at JavaScript. Could you explain in details, where to paste this fragment for to provide automatical word wrap of formulae?. > @tivewsalaeharad This issue is closed. Clean solutions for this issue have been incorporated to the latest version through PR #1298. So the JS snippet above is no longer required.\n\nAnd no. Formulae should auto wrap (I recall) by default and the CSS tweak is supposed to disable auto word wrapping.\nAs for embedding a JavaScript, you just put the snippet at the end of the HTML document, enclosed with a pair of <script> tags. That should work. (Ask Google and try it yourself before posting in the issues section. Project maintainers are receiving too many Emails.)\n\nI have KaTeX v0.10.0\nMy code (in Android Studio):\nWebView webView = new WebView(SpaceActivity.this);\n    webView.getSettings().setJavaScriptEnabled(true);\n    webView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);\n    webView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));\n    webView.setPadding(2, valueViewer.getTextPadding(), 2, valueViewer.getTextPadding());\n    String html = \"<!DOCTYPE html>\\n\" +\n            \"<html>\\n\" +\n            \"    <head>\\n\" +\n            \"        <meta charset=\\\"UTF-8\\\">\\n\" +\n            \"        <title>Auto-render test</title>\\n\" +\n            \"        <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"file:///android_asset/katex/katex.min.css\\\">\\n\" +\n            \"        <script type=\\\"text/javascript\\\" src=\\\"file:///android_asset/katex/katex.min.js\\\"></script>\\n\" +\n            \"        <script type=\\\"text/javascript\\\" src=\\\"file:///android_asset/katex/contrib/auto-render.min.js\\\"></script>\\n\" +\n            \"    </head>\\n\" +\n            \"    <body>\\n\" +\n            \"        \" + expression + // variable, containing formula in TeX-format\n            \"        <script>\\n\" +\n            \"          renderMathInElement(\\n\" +\n            \"              document.body\\n\" +\n            \"          );\\n\" +\n            \"        </script>\\n\" +\n            \"    </body>\\n\" +\n            \"</html>\";\n    webView.getSettings().setSupportZoom(true);\n    webView.loadDataWithBaseURL(\"file:///android_asset/\", html, \"text/html\", \"utf-8\", null);\nAnd no word wrap :-( I have been searching Google for 8 hours yesterday, but haven't seen the solution\n. > @tivewsalaeharad Could you give an example of the LaTeX expression you're trying to render?\nOf course:\n$$(a^x)' = \\lim_{\\Delta x \\to 0} \\frac{a^{x + \\Delta x} - a^x}{\\Delta x} = \\lim_{\\Delta x \\to 0} \\frac{a^x (a^{\\Delta x} - 1)}{\\Delta x} = a^x \\lim_{\\Delta x \\to 0} \\frac{a^{\\Delta x} - 1}{\\Delta x} = \\begin{bmatrix} \\frac1{n} = a^{\\Delta x} - 1 \\ \\Delta x = \\log_a(\\frac1{n} +1) \\ n \\to \\infty \\end{bmatrix} = {a^x \\lim_{n \\to \\infty} \\frac1{n\\log_a (\\frac1{n} +1)}} ={\\frac{a^x}{\\log_a \\lim\\limits_{n \\to \\infty} (\\frac1{n} +1)^n}} = {\\frac{a^x}{\\log_a e}} = a^x \\ln a$$\nIn MathJax after flashing and diddling in performs in such way\n\nText, assigned to WebView, when using MathJax:\n```\n<!DOCTYPE html>\n\n\n\n\n            MathJax.Hub.Config({\n                messageStyle: 'none',\n                tex2jax: {preview: 'none'}\n            });\n        \n\n                         MathJax.Hub.Config({\n               CommonHTML: { linebreaks: { automatic: true } },\n               \"HTML-CSS\": { linebreaks: { automatic: true } },\n                      SVG: { linebreaks: { automatic: true } }\n             });\n        \n\n\n\n\n        $$\\color{white}{(a^x)' = \\lim_{\\Delta x \\to 0} \\frac{a^{x + \\Delta x} - a^x}{\\Delta x} = \\lim_{\\Delta x \\to 0} \\frac{a^x (a^{\\Delta x} - 1)}{\\Delta x} = a^x \\lim_{\\Delta x \\to 0} \\frac{a^{\\Delta x} - 1}{\\Delta x} = \\begin{bmatrix} \\frac1{n} = a^{\\Delta x} - 1 \\ \\Delta x = \\log_a(\\frac1{n} +1) \\ n \\to \\infty \\end{bmatrix} = {a^x \\lim_{n \\to \\infty} \\frac1{n\\log_a (\\frac1{n} +1)}} ={\\frac{a^x}{\\log_a \\lim\\limits_{n \\to \\infty} (\\frac1{n} +1)^n}} = {\\frac{a^x}{\\log_a e}} = a^x \\ln a}$$\n</body>\n\n\n``. > @tivewsalaeharad Try using\\displaystyleinside a pair of$\u2026$delimiters. Avoid$$\u2026$$` if you want automatic line breaks. KaTeX, like TeX, does not do automatic line breaks in display mode.\n@ronkok thank you, but there are some bugs:\n1) doesn't work scaling command \\Tiny, that I need, for example in big fractions, when I need to mimimize formula text; but good, that \\small and \\tiny (from lowercase) do work\n2) fraction lines are absent (displaying upon widget)\n\n\n3) automatical word wrap doesn't occur. adding to styles span {word-wrap: break-word;} gives nothing. @edemaine I'm looking for automatic line breaks, because (for instance) user can rotate mobile, and app is to re-arrange wrapping.\nI set $..$, \\displaystyle and .katex-display > .katex { white-space: normal }, formulae had been wrapped, but began to overlap. This is on laptop:\n\n\\Tiny is scaling, used in MathJax between \\small and \\tiny, perhaps it's just not supported in KaTeX.. @edemaine doesn't wrap without CSS neither on my page, nor in katex.org \n\n. ",
    "ghost": "That's about what I had feared...it's a pity.\nI may go with generating two separate EPUB files, one for direct use that uses KaTeX, and one that uses MathJax images for conversion to Kindle. \nThe Kindle does support vertical-align. Appendix B in http://kindlegen.s3.amazonaws.com/AmazonKindlePublishingGuidelines.pdf gives details on Kindle's CSS support (with some minor ambiguities -- the table says that position:fixed and position:absolute are \"not recommended\" for reflowable books, but in fact the kindlegen tool strips those out altogether, as noted above).\nThanks, Emily!\n. Agreed, can not write dollar sign outside of math equations...\n. Oh, I just realized that \\dots isn't supported by KaTeX. Feel free to close this issue unless you consider \\dots not being supported an issue.. Thank you for your fast reply. That's what I'll do then.. ",
    "janmarthedal": "@spicyj CLA now signed\n. ",
    "cmakler": "Awesome, thanks!\n\nOn Mar 1, 2015, at 6:11 PM, Ben Alpert notifications@github.com wrote:\nThese should all be in master now; planning to do a release soon.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/Khan/KaTeX/pull/178#issuecomment-76648910.\n. \n",
    "arrchyy": "Sure, gimme a minute. I was using the minified version from CDN\n. Thanks. That was a nice catch. I just saw that too while doing some logging. No wonder _innerLex was throwing the error. \n. ",
    "shybovycha": ":+1:\n. ",
    "franciscop": "Not fixed yet, I just received this error:\nbower invalid-meta  KaTeX is missing \"main\" entry in bower.json\nFrom this stackoverflow question, it looks like you might need to bump the version number. If I remember correctly, even if you update your code within a version (like happened here I think), bower will only get the original one. Maybe bump at patch level?\n. Perfect :thumbsup:, tried again after deleting the repository and clean bower's cache and couldn't reproduce:\n\n. That solved my problem, thank you @xymostech \n. ",
    "kynan": "Why has this been closed?\n. ",
    "abejfehr": "I saw that this issue hadn't yet been replied to, and thought I'd mention that those symbols seem to be present in PR #151 \n. \\underline was already requested in #209\n. ",
    "kosek": "Yes, sorry for false alarm. Now I realized I have used innerText instead of textContent for pulling TeX math for rendering from the element content. My bad.\nMight be adding sample code for iterating over all equations stored in <span class=\"math\"> and rendering them into README.md would be of help for seasonal JS developers.\n. ",
    "astoilkov": "Any plans for making 0.7.2 release soon?. We have some users that use MathJax and complaint the missing feature in KaTeX. Do you have any estimate when we could expect this resolved? This way we could inform our users when they could expect it.\nThanks.\n. This is really awesome PR. Do you guys know when we could expect release including this changes.. Perfect. Thanks so much for the information @kevinbarabash . ",
    "HeinrichHartmann": "Found on https://jsperf.com/katex-vs-mathjax\n. Confirmed. Same link with http:// works.\n. New link over https:// has other issues:\n\nhttp:// works again, fine.\n. ",
    "iAviatorJose": "ok thanks\n. ",
    "PeterDaveHello": "Sure.\n. Done.\n. ",
    "brunetto": "Ooops, I didn't. Is there a guide to follow? \nSo it's not possible to include it in a markdown parser.. Do I have to write the page from scratch to use it?\n. ",
    "rymohr": "Not that I know of, though @kevinb7 and @xymostech have given it some thought:\nhttps://github.com/Khan/KaTeX/issues/43#issuecomment-55658982\nhttps://github.com/Khan/KaTeX/issues/61#issuecomment-57091390\n. ",
    "mull": "@xymostech your last comment gave me some hope! Could you update us on the status of this? Would love to help out any way I can.\n. I did not test this in anything else than Chrome, as I just wanted a proof of concept.\n. I might or might not be able to approach the TeXbook and get some progress done. At our company we'll go with this little change for now as a poor workaround for small devices. I've never written a line of TeX in my life, going through the book might be a daunting task! If I can assist you in any way meanwhile to get the ball rolling let me know. :-)\n. Do you mean why I gave size1 a line-height? For consistency, and because I don't even know half what I'm doing. :grin:\n. Good point. I never tried without it. I just looked at the code and said \"hey, each of these should get a line height and I think one of the problems is solved\" :grin: \n. ",
    "pepperblue": "\\underline would be very useful. For us it's the only thing left to be able to completely switch from MathJax to KaTex\n. ",
    "ericaxu": "Any update on this?\n. @spicyj THANKS!\n. ",
    "jonathankroll": "@spicyj Not quite a preference ;), but all of the math we display with MathJax originated from MS Word documents that were not originally created with the web in mind, using Mathtype. Converting from Mathtype to MathML was the least buggy option, so MathML has been the input format ever since.\n. ",
    "panbhag": "I am facing the same issue, i have some data in MathML format. can someone suggest a way to convert MathMl to tex. I am facing the same issue with v0.8.3. Will also check with v0.9.0 and update.. ",
    "omidh28": "Yes they don't but it's nice to have it.\n. ",
    "fkling": "Fixed and signed! Thanks!\n. Moved!\n. I should have read https://github.com/Khan/KaTeX/blob/master/CONTRIBUTING.md first :-/ I just picked that font because the other symbols used it as well...\n. :+1: \n. ",
    "azotova": "Hi Emily,\nThanks for your reply! I've changed the failing test.  However, I am afraid that I cannot make the vertical shift fully compliant with  the TeX source. I assumed that the optional argument should be displayed at the same height as a usual superscript (e.g. in 2^3), so I copied the code from 'supsub' group type (rule 18c) to determine the vertical shift (my 'toShift' variable). I am attaching a screenshot (from Chrome) to compare the result with that from jqMath and MathJax.\n\nIf it is important to be fully compliant with the TeX source, please close my pull request.  I would be happy if any part of my code could help to fix this issue as I really need it for my personal project. Thanks!\n. It would be also great to support {cases} environment to create systems of simultaneous equations (like here: https://kogler.wordpress.com/2008/03/21/latex-multiline-equations-systems-and-matrices/).  I am sorry if this is not the right thread to bring this up, but it seems related to the {array} environment.\n. ",
    "ruricolist": "I made a pull request. Do I need to sign the CLA for something this small?\n. OK, I've signed the CLA.\n. ",
    "jeresig": "I should note that I couldn't think of a good way to test this, as it would require inspection of the contents at runtime. I'm open to suggestions, though!\n. cc: @ariabuckles @xymostech \n. @spicyj Ah, I missed that comment! Perhaps this can be a stop-gap, at least, to hopefully provide some consistency to buildHTML. Presumably if the method is ever updated to not be destructive this logic can just be removed.\nAs to why I encountered this: I'm writing a KaTeX plugin which will support exporting math formulas as english strings (e.g. \"x^2\" becomes \"x to the power of 2\"). We're continuing to have problems with MathML in screen readers (sometimes they don't read it, many browsers read it incorrectly, sometimes it's double-read) whereas a pure-English (hopefully i18n, as well!) string seems to work everywhere. This is a technique that is used by other entities, as well.\n. @spicyj I was totally going to do the JSON.parse(JSON.stringify(tree)) technique but then I saw that KaTeX supports IE 8, thus I went with the manual solution :) I don't /think/ it contains non-JSON stuff but yeah, would be good to verify that.\n...also @xymostech and I just chatted and we may be able to table this for now as I might be able to pursue my modifications from another direction which won't make this necessary (at least not for now).\n. Oh wow, ok! Sigh, I have such outdated JS knowledge in my brain. Ok, I'll update to use the JSON technique.\n. @xymostech done!\n. It's absolutely inefficient. The buildHTML code should be changed to not be\ndestructive -- at which point this can just be removed. Unfortunately I\ndon't know the buildHTML sub-systems as well but if someone is willing to\ntackle this then that'd be fantastic!\nOn Fri, May 8, 2015 at 11:25 AM, Peter Bocan notifications@github.com\nwrote:\n\nI wonder, if this hits performance or not (for large amount of\nexpressions)...\n(Excuse my obsession with performance, but I am \"the C guy\". [image: :+1:]\n)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Khan/KaTeX/pull/225#issuecomment-100272460.\n. cc: @ariabuckles @xymostech \n. I'm going to merge this so that I can finish up my react-components changes -- let me know if you want me to make any additional changes to the tests!\n. Surprisingly just doing expect(tree).toEqual(...) failed! Doing a string comparison seemed to work, though!\n. Yeah - that was my thought as well. The method generates a \"sub\": undefined. I tried leaving it out and adding it in -- it failed in both cases. Not sure :(\n. \n",
    "freemaths": "Also interested in this. I use \\cancel to show working. Can Katex support this? . The difficult part is the alignment rather than the symbol. The \"hacky\" solution I have come up with so far is to render white on white to hide things and keep aligned. Align is only interested in aligning equals signs as far as I can tell. (Note: not the best example as no polynomial carry but would work for that too). \n(\\'textcolor{white}{x-3}\\';4x^2+2)\n(x-3\\'overline{\\'smash{)}4x^3-12x^2+2x-6})\n(\\'textcolor{white}{x-3}\\';\\'underline{4x^3-12x^2})\n(\\'textcolor{white}{{x-3}\\';4x^3-12x^2+}\\',2x-6)\n(\\'textcolor{white}{{x-3}\\';4x^3-12x^2+}\\',\\'underline{2x-6})\n\n. Didn't know about \\phantom and missed it on the help page. Same result but far less hacky than white on white:\n(\\phantom{x-3}{\\;4x^2+2})\n(x-3\\overline{\\smash{)}4x^3-12x^2+2x-6})\n(\\phantom{x-3}\\;\\underline{4x^3-12x^2})\n(\\phantom{{x-3}\\;4x^3-12x^2+}\\,2x-6)\n(\\phantom{{x-3}\\;4x^3-12x^2+}\\,\\underline{2x-6}). And with array{l}. \n\n(\\begin{array}{l}\n\\phantom{x-3\\;}{\\;4x^2+2}\\\nx-3\\overline{\\smash{)}4x^3-12x^2+2x-6}\\\n\\phantom{x-3}\\;\\underline{4x^3-12x^2}\\\n\\phantom{{x-3}\\;4x^3-12x^2+}\\,2x-6\\\n\\phantom{{x-3}\\;4x^3-12x^2+}\\,\\underline{2x-6}\\\n\\end{array}). Aha, that makes sense. The \\equiv character seems particularly vulnerable to this on my screens at the default scaling. Is there some way I can control the scaling so it is always a clean multiple?. ",
    "bguiz": "I would like to know if there is a goal for KaTex to support all of LaTex\nIf this is the case, perhaps we should catalogues the ones that have\nalready been implemented, and the ones still outstanding? This looks like\nan exhaustive list: http://en.wikibooks.org/wiki/LaTeX/Command_Glossary\nW: http://bguiz.com\nOn 13 May 2015 at 04:58, Ben Alpert notifications@github.com wrote:\n\nClosed #230 https://github.com/Khan/KaTeX/issues/230.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Khan/KaTeX/issues/230#event-303127832.\n. > Possibly we could make a mode that looks okay on some common\npre-installed fonts though without requiring font data.\n\nYes please - this is exactly what I am after! One that would work with one\nout of the default set of fonts commonly available in browsers would be\nperfect.\nW: http://bguiz.com\nOn 13 May 2015 at 04:59, Ben Alpert notifications@github.com wrote:\n\nNot really, since KaTeX relies on knowing the font metrics in order to\nposition things accurately. See also #123\nhttps://github.com/Khan/KaTeX/issues/123. Possibly we could make a mode\nthat looks okay on some common pre-installed fonts though without requiring\nfont data.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Khan/KaTeX/issues/231#issuecomment-101388146.\n. We have a product using a legacy MathML implementation in order to support this,\nand right-to-left support is one of the features that Katex needs to\nadd before we can switch.\n\nW: http://bguiz.com\nOn 9 September 2015 at 02:19, Ben Alpert notifications@github.com wrote:\n\nNot currently, but maybe we could! Those examples are neat.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "mydigitalself": "Sweet, thanks for the super-fast response too.\n. ",
    "scottdraves": "I finally found https://github.com/Khan/KaTeX/wiki/Function-Support-in-KaTeX.\nI would recommend linking to that from the top-level README.\nAnd for undefined symbols, maybe just rendering as \"?\" would be better than throwing an exception.\n. thanks for the tip, setting that options sounds like a good idea, will do.\nbut yea, you should have that symbol as well.\n. ",
    "jimaek": "jsDelivr supports latest links and version aliasing if you are interested. \nExample http://cdn.jsdelivr.net/katex/latest/katex.min.js\nhttp://cdn.jsdelivr.net/katex/0.3/katex.min.js (latest 0.3.x)\nMore info https://hacks.mozilla.org/2014/03/jsdelivr-the-advanced-open-source-public-cdn/\n. ",
    "mjbshaw": "Dang, I'm not sure how I missed that and used single quotes. Fixed!\n. Crap, I missed the part about the CLA. I haven't signed it. I'll check with Google's legal/open source department and get back to you on this one...\n. > Google's already signed the corporate CLA (via Max Sills) \u2013 not sure how\n\nwe're supposed to verify that that covers you though. :)\n\nYes, you seem to be right. It just wasn't listed in the list of\ncorporate-signed CLAs.\nOkay, in that case it looks like we're all good, I believe. I'm not sure\nhow verification works if you need it, but I did commit using my @google.com\nemail so it should be associated with that rather than my personal email\naddress. I can --signoff the commit with a reference to the CLA if needed.\n. ",
    "whykushal93": "I found one resource containing the mappings between Unicode characters and the corresponding Macros, probably could be useful. http://ctan.math.washington.edu/tex-archive/macros/latex/contrib/unicode-math/unimath-symbols.pdf\n. ",
    "akkatracker": "It's working for me:\n\\sqrt{342}\nYields the square root of 342\n. ",
    "bryevdv": "\n(By the way: I'm also working on rendering KaTeX to HTML5 canvas. Is that of interest to the project? If so, I'll post a pull request once I'm reasonably satisfied with things.)\n\nWhoa whoa whoa this would be an _amazing_ development for Bokeh (http://bokeh.pydata.org, https://github.com/bokeh/bokeh) Do you have any rough estimated timeframe?\nEdit: And I will add that if for whatever reason it does not make sense to add it directly to KaTeX, the Bokeh team would gladly make use of canvas rendering code.\n. LaTeX labels is one of the longest and most requested features for Bokeh plots, and BokehJS renders in HTML5 canvas. I was about to give up and look at absolutely positioning transparent divs above the plot canvas but native rendering would be 1000 times preferable. \n. This is very exciting, I am at a conference this weekend but I should be able to take a closer look next week. I am happy to help out in any way I can. For some context about the Bokeh use-case, we'd like to be able to render math text into an existing canvas at a specified locations (similar to ctx.fillText).\n. I was just about to link that, we used the same article to develop Bokeh's support for HiDPI modes. @gagern do you think that the capability to render at a specified location onto an already existing, user-supplied canvas is feasible for this work? If not, it should be easy enough for us to maintain small private canvases for annotations, that can be quickly blitted onto our main canvas, but I thought it would be worth asking about. \n. @gagern that's great. We have a new release coming up in a few weeks but immediately after that we will start looking into integrating this as a high priority!\n. ping @canavandl\n. > But then, one may argue that CSS is sufficient, and that SVG provides no extra advantage.\nI realize this is probably not currently high on any priority list, but just by way of documenting use-cases: Bokeh just added an SVG output option for plots (a long requested feature). Users can also render KaTeX labels on plots with an extension, but since these are separate DOM elements, they are missing from the SVG export. We use canvas2svg to convert the plot canvas to SVG, and presumably if KaTeX could generate SVG as well, we could find a way to merge things together. This would make users wanting to export Bokeh plots for inclusion in scientific publications very extremely happy. . ",
    "fpliger": "Wow! I second @bryevdv enthusiasm on this! :+1: \n. ",
    "lukeburns": "@gagern, is it possible to render server-side using node-canvas?\n. @gagern Some immediate trouble with node-canvas: http://cdn.img42.com/322b7c639f5c3a539305106b9ced9dcc.png. The code: https://gist.github.com/lukeburns/9dab651d886c494ff694.\n. That's an option. Seems like it would be more processor intensive since it requires compiling TeX to a pdf then converting to png.\nI'm using KaTeX for preview of the image, and ideally the png should match up with the preview.\n. ",
    "canavandl": "hi @gagern \nSo I was able to render LaTeX onto an already existing canvas element. It works as expected, except that modifying the context.font and have the change be reflected in the rendered text. Is that not implemented or am I missing something?\nDemonstration of working katex.renderToCanvas method using a Bokeh plot:\n(the lower text is the canvas branch, the upper is an overlaid div using KaTex)\n\nThanks again for working on this.\n. @gagern : your CindyJS example resolved my issue (I'd misread the regex and was passing '16px' instead of '16' as the fontSize).\nMy last question is about the text dimensions. Calling canvasBox returns a PreparedBox obj with some dimensions attached. The box.depth and box.height values are correct for \"single level text\", but not correct for quotients or similar. Is there a way to more correctly get the output dimensions (we'd like to support drawing background boxes). Again, this is a \"nice to have\" and not \"must have\".\nHere's an example:\n\n. My issue was Bokeh-related - I hadn't appropriately set the font context before calling canvasBox. Here's the canvas output w/ a bounding box:\n\nThere's some minor clipping of the exponent, but I'm expecting to pad the bounding box for aesthetic reasons anyway. That means all of my issues are resolved. Is there anything I can do to help get this PR merged and (eventually) have a release be made?\n. ",
    "marcianx": "Out of curiosity, what's blocking progress on this? Is it a lack of interest? Or prioritization?\nI'd noticed, for example, that some diacritics weren't rendering properly with this renderer even though they are supported by the standard renderer.\nI also noticed that this PR is based off of a time when the regular renderer didn't yet support \\underline as I tried to use regular rendering off of this PR.. Firstly, thank you very much for rebasing this PR!\nSecondly, is abstracting out the rendering backend from the general layout computation via an intermediate representation a priority? Is there a tracking bug? There seems to be a general desire for plugging in SVG and canvas backends.. Sure. Just checked, and my company already has CLA with Khan Academy. I'll send a fix when I have the chance.. @kevinbarabash How do I resolve the khanbot asking for a CLA? My company (Google) already has a corporate-wide CLA IIUC, and it doesn't seem to make sense for me to sign a new one.. Well, that might have to do with having no way for it to verify that I work for where my profile claims I do (honestly, I only just added that to my profile today and just for this PR). Perhaps testing that my corp email specified in the PR actually functions might be a more reliable way to confirm.. Nice! When is that landing? I'm happy to help convert things, though I haven't yet read outside of Parser and its dependencies so far.. Excellent: I'm on it. ;). Ah, per the travis failures, npm test does the trick (which runs make lint flow test). Cool, I'll fix the existing failures. Not sure how to deal with the match-at failure yet, though, and I'd love any insights on that.. I've updated and squashed fixes for most of these. Please note that I had to include babel-plugin-transform-builtin-extend to allow ParseError to extend Error without annoying @flow.\nI still have to figure out the inclusion of \"match-at\":\nError: src/Lexer.js:15\n 15: import matchAt from \"match-at\";\n                         ^^^^^^^^^^ match-at. Required module not found\n\nSimple workaround is to remove @flow from Lexer.js and the flow types. \"match-at\" already uses @flow, so I was hoping it would output the right things (.flow file per https://javascriptplayground.com/blog/2017/01/npm-flowjs-javascript/) for this to work.\nStill investigating, but, again, if you have any insights, I'd love to hear.. Ok, so the .flowconfig ignores match-at in node_modules. Un-ignoring it results in errors in match-at because the transpiled js still includes @flow even though the types have been stripped. Manually removing the @flow makes it compile, which is equivalent to adding\n     \"prepublish\": \"babel -d lib/ src/; sed -i 1d lib/matchAt.js\",\nin match-at's package.json. I'm not sure they'd want to take on a gnu sed dependency on their build.\nSadness...\nmatch-at also seems to be using a very old version of \"babel\" and things, and trying to upgrade meant running into a bunch of new things that I'm not yet familiar with in the realm of babel. So I decided to not go down that rabbit hole, as that also requires getting match-at to publish a new version, etc.\nIt might be worth making our own Regex matching helper. I've done something similar before when writing a parser in js.. Also, thanks for the $FlowFixMe fix. That definitely works. :). (BTW, I was also editing in parallel, but it seems that our changes would overlap. So we can just discuss on your branch to avoid confusion.). @kevinbarabash: A few questions before I update the PR with the suggested fixes, as I'm new to collaboration on github with PRs and also to KaTeX's conventions.\n1) Whenever I've been updating the flow branch that I've been smashing the commits together into a single commit as that's how you'd want to commit them. However, does this hurt incremental review and your ability to fork? It also presumably also hurts your ability to add your edits on the PR? More specifically, what is your preference: should I push additional commits with fixes on the flow branch or just smash the commits together?\n2) I noticed in your edits on the PR that you'd changed some (Type|void) to ?Type. I did the former since it was less work (optional parameters were already void-able). Do you have a preference for one or the other?\n3) IMHO, regarding the use of NaNs: I think it would be extremely useful for the type system to prevent us from using optional numbers without first checking them hence preferring the use of (number|void). I agree that it's inconvenient in the case or start, end, lexer, all of which would be void/null-able but to accommodate we should (separately) refactor to use ?{start: number, end: number, lexer: LexerInterface} as the type so that there's only a single null check. WDYT?. (I pushed the fixes as a separate commit for now.). @kevinbarabash I agree, we should avoid * unless it's thoroughly obvious. I've only used it where the property matches the well-documented constructor parameters which appear immediately after it. Otherwise, I'm very inclined to avoid it. I'm also fine with banning *. I too am a fan of explicitness.. @kevinbarabash: How do we avoid stepping over others' toes while porting to @flow? Parser.js has a lot of dependencies to port and there's a danger that two people could be doing this independently. I'd like to keep plowing through.. @edemaine Absolutely.. Regarding the @flow typechecker failing to catch the error in (3): https://github.com/facebook/flow/issues/4809. Thank you both for the background. I do prefer keeping code as familiar as possible. Though this is reminiscent of a familiar object-oriented style, its frequent rebinding in javascript can be confusing to newcomers to the language who don't expect to see this outside the context of a class definition. As such, I avoid taking advantage of it if there's a viable/ergonomic alternative. Per your feedback, I've switched to using an explicit parameter.\nAs there are numerous methods in MacroExpander, it's not immediately obvious to me which are intended to be part of its public interface.\n1) I've defined a MacroContextInterface in macros.js to encapsulate the ones that are currently used by macro definitions. Please let me know if any more of the existing methods should be added there.\n2) As I didn't receive any feedback regarding (1), I've prefixed the other methods that I think are intended to be private by _.\nI've pushed my changes. Please correct me if any of the methods I marked private are actually intended to be public, or if the _ notation is stylistically undesirable.. O wait. Gonna rebase to new master.. Done. Also, I'd somehow failed to remove the _ rename commit. Done so now.. I'm seeing \"Merging is blocked.\nMerging can be performed automatically once the requested changes are addressed\"\nAny idea why? Do I have to mark any comments as resolved?. Ah, that's where a type-system-aware transpiler would more ideal.. Dang, I gotta pay more attention. ;)\nI'll add some comments based on insights based on my existing work, which I exported into PR 853.. Actually, wait a sec. The mode is used in ParserNode as well, so I'll pull it out into a separate file that just defines the mode type.. Pulled out  Mode. I wasn't sure whether I should put it in types.js or Mode.js. Types cannot be default exported, so import {Mode} from \"./Mode\"; didn't seem as nice. But that's what I've gone with.. Changed my mind again and renamed Mode.js to types.js since I foresee adding a ParserInterface type to break circular dependencies.. I...had no problem with trailing commas in #858 per your comment. ;). My guess is the that the @flow transpiler handles it before babel has to.. In the process, it would help to make defineFunction types more stringent. There's a lot of any, which can make it difficult to reason about what precisely is expected to go into or come out of the functions here.. @kevinbarabash I'm trying to figure out the specific type of the positions argument in the defineFunction's handler's context argument. We noted this tangentially in the environment.js. As mentioned in that PR, parseArguments returns a list of positions by pushing it into the args array before returning it. However, this array is populated with this.pos in the Parser. I don't see anywhere where this.pos is ever set in Parser.js! Here's a pair of greps (the latter's result is empty).\n$ grep -R '\\.pos' src\nsrc/buildHTML.js:        outrow.pos = totalHeight;\nsrc/buildHTML.js:            const shift = row.pos - offset;\nsrc/Lexer.js:        this.pos = 0;\nsrc/Lexer.js:        const pos = this.pos;\nsrc/Lexer.js:        const start = this.pos;\nsrc/Lexer.js:        this.pos += match[0].length;\nsrc/Lexer.js:        const end = this.pos;\nsrc/Parser.js:            return [[this.pos]];\nsrc/Parser.js:        const positions = [this.pos];\nsrc/Parser.js:                    positions.push(this.pos);\nsrc/Parser.js:            positions.push(this.pos);\n$ grep -R 'pos:\\b' src\nI console.log()ed positions computed in Parser's parseArguments() and ran the tests, and it's always an array of undefineds.\nSo, was this meant to be this.gullet.lexer.pos? If so, it's reaching really deep into another layer of abstraction.\nAttempting to look manually through all code paths was a bit exhausting, but I did another grep to look for actual uses and I found none.\n$ grep -R positions src\nsrc/environments.js: *  - positions: the positions associated with these arguments from args.\nsrc/environments.js:    positions: number[],\nsrc/environments.js: * List of ParseNodes followed by an array of positions.\nsrc/defineFunction.js://    positions: ?number[],\nsrc/defineFunction.js:    //   - positions: the positions in the overall string of the function\nsrc/Parser.js:                positions: args.pop(),\nsrc/Parser.js:    callFunction(name, args, positions, token) {\nsrc/Parser.js:            positions: positions,\nsrc/Parser.js:     * @return the array of arguments, with the list of positions as last element\nsrc/Parser.js:        const positions = [this.pos];\nsrc/Parser.js:                    positions.push(this.pos);\nsrc/Parser.js:            positions.push(this.pos);\nsrc/Parser.js:        args.push(positions);\nI'm inclined to nuke it pronto. However, do you have any insights as to its necessity?. I'm going to close this as it's already being included in and reviewed as part of PR 867.. Man, is there any way whatsoever to get new files to diff against specific old file from which the code came? I'm having to do manual diffing for each new file against the pre-modified functions.js and it's cumbersome.. @kevinbarabash IMO, even leaving it as a large PR would have been fine for me if it were a sequence of small commits that are independently easy to review.. @kevinbarabash I have good news. I have figured out how to review this. E.g. using meld as the difftool, it requires doing:\ngit difftool HEAD~:src/buildMathML.js src/functions/genfrac.js\nand removing everything we don't want to be diffed on the left and the right side and ending up with a nicely-reviewable diff.\nI'm willing to plow through all of these. However, note that this requires this manual diffing 3x8 times ({buildHTML.js, buildMathML.js, functions.js} x {src/functions/\\*}). If there's a way to reduce this to quicken reviewing, it would be much appreciated, but I can understand if that's not possible in this case.\n. Sorry. Really busy weekend and minor accident right before. Will try to look at this soon.. - [x] genfrac.js\n- [x] katex.js\n- [x] lap.js\n- [x] mod.js\n- [x] op.js\n- [x] smash.js\n- [x] sanity-check rest of the changes. Nice! For posterity, this is how I reviewed. I went per file as in the checklist above and wanted to open all the diffs for a given file in the same meld session. So I temporarily added the -n parameter to my .gitconfig to open all diffs in the same session:\n[difftool \"meld\"]\n    cmd = meld -n \\\"$LOCAL\\\" \\\"$REMOTE\\\" --label \\\"DIFF (ORIGINAL MY)\\\"\n\nand per file, I did the for loop per @edemaine's suggestion modified to open all diffs at once (e.g. for smash.js):\nfor a in buildHTML.js buildMathML.js functions.js; do\n  git difftool HEAD~:src/$a src/functions/smash.js &\ndone\n\nand did some easy manual modifications to get clean diffs. It was all pretty fast for this cut-and-paste-and-indent PR.. @kevinbarabash I'll let you submit after rebasing.. Will do. I'll do one pass now. And if there are any changes. Then one in the morning.. Please go ahead. :)\nI've had an uncharacteristically busy couple of weeks. ;). Will do.. Yes. Yes it is. ;) I've run into at least 4 challenges.\nThe first two a are just a bunch of grunge work, but doable:\n- FunctionHandler's return type (in defineFunction) is *. It needs to be enumerated.\n- ParseNode's value type is *, and that needs to be enumerated *.\nAlthough, who knows what surprises await. ;)\nThe third one is more fundamental. Many uses of ParseFuncOrArgument (which I've turned to ParsedFunc | ParsedArg | ParsedDollar) predicate strictly on whether or not it is a function, an they don't distinguish ParsedArg from ParsedDollar. It's a locally non-obvious (to me at least) implementation artifact that ParsedDollar cannot appear in these places and so the implementation doesn't check it. I would, of course, increase the final js size by adding thrown Errors, but I'm guessing that's not desired, and we might just want to $FlowFixMe those places to suppress the errors.\n~~The fourth thing is that parseImplicitGroup cases call functions (parseFunction), but treat the return value as non-nullable and directly dereference it. It's not locally-obvious (at least to me) why that should be the case. I was going to try to produce cases that would fail based on local reasoning and see if they don't when running the full parser. Maybe tomorrow.~~\nEDIT: Sorry, I was writing these mostly from memory. I'd confused this with another case. This wasn't the problem, but there were some other cases where nullable values from parseFunction were used, but I'd done a refactor to resolve those. The current use cases in parseImplicitGroup just require more refactors.. This is quite the adventure! I'm trying to go a bit more deeply into the weeds to understand the extent of the changes needed to have strong guarantees and convertibility to @flow without resorting to type-unsafe features like any.\nOne example I've been trying to understand is FunctionHandler vs ParseNode. The problem is that ParseNode's value type can either be the output of FunctionHandler (let's call it NodeData)  or something else that's been constructed in Parser itself (like the \"size\" ParseNode created there). NodeData has a type field, but ParseNode has its own type field on top of that, which makes it very difficult to make them both type-safe without a lot of redundancy. For example, NodeData is already something like\njavascript\ntype NodeData = {|\n    type: \"sqrt\",\n    body: ParseNode,\n    index: ?ParseNode,\n|} | {|\n    type: \"text\",\n    body: ParseNode[],\n    font: ?string,\n|} | {|\n    type: \"color\",\n    color: string,\n    value: ParseNode[],\n|} | {|\n    type: \"enclose\",\n    label: string,\n    backgroundColor: ParseNode,\n    borderColor: ?ParseNode,\n    body: ParseNode,\n|} | {|\n    type: \"overline\" | \"underline\",\n    body: ParseNode,\n|} ... // more here\nIf ParseNode were turned into an object with a method to construct it, then for maximal type-safety, it would have a type like\njavascript\ntype ParseNode = {|\n    type: \"\\\\sqrt\",\n    value: {|\n        type: \"sqrt\",\n        body: ParseNode,\n        index: ?ParseNode,\n   |},\n   mode: Mode,\n   ... // lexer, start, end\n|} | ... // additional variants\nand also some variants like the following that are constructed within Parser.js itself.\njavascript\n... {|\n    type: \"size\",\n    value: {|  // has no `type` field!\n        number: number,\n        unit: string,\n    |},\n    mode: Mode,\n   ... // lexer, start, end\n|}\nSo now ParseNode serves two purposes: (1) many ParseNodes constructed in Parser serve as input into FunctionHandler (like the \"size\" example above), and (2) it also wraps the output of FunctionHandler (NodeData, which always provides a type field). I'm not sure whether we need to separate those out, but it feels a little messy to me when it comes to reasoning about things.\nSo I'm considering a systemic refactor of ParseNode so that it no longer has its own separate type, but becomes\njavascript\n{|\n    data: NodeData,\n    mode: Mode,\n    ... // lexer, start, end\n|}\nIOW, we'd collapse the two redundant types. The type-discriminated union would then be isolated to NodeData which would serve as the single enumeration of all possibilities. Note that this would be slightly lossy since there are multiple functions that map to the same NodeData type\u2014e.g. \\\\colorbox, \\\\fcolorbox, \\\\cancel and others map to type=\"enclose\" in functions.js. However, if the original function name is needed, it could be stored in NodeData itself as an additional field.\nThe unfortunate thing is that ParseNode is being used all over the place (Parser.js, functions.js and others, buildHTML, buildMathML), most of it being untyped code. So this refactor would have to be...diligent. But I'm up for it for all that's worth.\nI could start with first putting up the intended types in comment @params for reference and we can go forward from there. A lot of it can be incremental, like ensuring that the ParseNode's value always has a type field before ParseNode's own type field can be dissolved. E.g. the \"size\" ParseNode's value type would become\njavascript\n    {|\n        type: \"size\",   // redundantly added\n        number: number,\n        unit: string,\n    |}\nand things like ordgroups and others would be changed from\nnew ParseNode(\"ordgroup\", expression, this.mode,\n                    firstToken, lastToken)\nto\nnew ParseNode(\"ordgroup\", {type: \"ordgroup\", args: expression}, this.mode,\n                    firstToken, lastToken)\nWDYT? Is the test suite up to par? Or do you think we should go a different way?\n. Sounds good to me. In the meantime, I'll do some minor refactors that don't seep (too far) outside Parser, but allow making it more type-stringent.. @edemaine Indeed!\n@kevinbarabash Actually, isn't it \"harder\" to construct and pass around\n```javascript\ntype SqrtNode = BaseNode & {\n   type: \"sqrt\",\n   body: ParseNode,\n   index: ?ParseNode,\n}\ntype BaseData = {\n   loc: SourceLocation | null,\n   mode: \"math\" | \"text\",\n}\ntype SourceLocation = {\n   start: Token,\n   end: Token,\n   lexer: Lexer,\n}\n```\nthan, say,\njavascript\ntype SqrtNodeData = {\n   type: \"sqrt\",\n   body: ParseNode,\n   index: ?ParseNode,\n}\ntype Node<Data> = {\n   value: Data,\n   mode: Mode,\n   loc: SourceLocation,\n}\n?\nThe former seems to require constructing the whole object at once, whereas for the latter, FunctionHandler can return SqrtNodeData and Parser can construct Node<Data> with all the metadata. Or did you wish to require updating all the FunctionHandlers to set the metadata (mode, loc) as well?. Or perhaps your suggestion can be modified to\njavascript\ntype SqrtNodeData = {\n   type: \"sqrt\",\n   body: ParseNode,\n   index: ?ParseNode,\n}\ntype NodeData = (SqrtNodeData | ...);\ntype Nodes = NodeData & Common;\nThen, FunctionHandler can return NodeData, and Parser can add the additional metadata fields in the same object itself.. @kevinbarabash I noticed that #871 and #887 seem to be on a bit of a lull, but they don't obviously seem blocked. Is there anything I can do to help?\nI'm not sure I can make any particular progress on refactoring ParseNode's structure that would not touch a lot of code overlapping with those PRs.. Added another commit to resolving the TODO in the first code. This results in some of the errors changing from \"$ within math mode\" to, e.g. \"Unexpected $ at position 3: a^$\". This resolves the type-safety issues mentioned in the first commit's TODOs.. @kevinbarabash \n\nIt feels like things are getting more complicated, but I think that's a function of making implicitly complicated things more explicit. Any ideas of how we might simplify args vs. fn vs. $ parsing in the future?\n\nThere's no new complexity added here; only documentation of existing assumptions and an adherence to type strictness that wasn't there before -- for various inputs, we actually got \"$\" (string) where a ParseNode was expected, only to throw an error later. If you haven't, please read the massive and detailed TODO at the bottom of the first commit (which I removed in the second commit) about the unintuitive way the Parser behaved before the second commit.\nI can't think of any obvious way to fix this without actually rethinking parts of the Parser.\nLet's first get static typechecking in place. ;). Rebased.. Regarding screenshots, i'm having trouble getting them working. At least the screenshot server starts in master, but in this branch, I run into\n```\nAccents\n[...]/KaTeX/node_modules/selenium-webdriver/lib/promise.js:654\n    throw error;\n    ^\nWebDriverError: javascript error: handle_search_string is not defined\nJavaScript stack:\nReferenceError: handle_search_string is not defined\n    at eval (eval at executeAsyncScript (unknown source), :2:68)\n    at eval (eval at executeAsyncScript (unknown source),\n :2:226)\n    at executeAsyncScript (:321:26)\n    at :337:29\n    at callFunction (:229:33)\n    at :239:23\n    at :240:3\n    at Object.InjectedScript._evaluateOn (:875:140)\n    at Object.InjectedScript._evaluateAndWrap (:808:34)\n    at Object.InjectedScript.evaluate (:664:21)\n``\nSeems to suggest something being wrong withcallFunction` perhaps.\nIt did seem to work on subsequent attempts, but the Chrome screenshot said web page not found and the Firefox screenshot said simply \"Test\".\nRunning the Accent LaTeX \\vec{A}\\vec{x}\\vec x^2\\vec{x}_2^2\\vec{A}^2\\vec{xA}^2 on a local html shows no errors whatsoever (see attached png). Any clues?\n. Must have been something flaky. After rebasing to new master, all checks seem to succeed on Travis.. This PR is now ready as well.. Since a few other PRs made related files type-safe, there needed to be more edits to fix these files and others to address flow type errors.. The types of the other parameters depends on the value of positionType. For example,\n\n\"shift\", \"top\", \"bottom\", and other require positionData: number.\n\"individualShift\" requires children to be an array of {type: \"elem\", elem: DomChildNode, shift: number}.\n\n(DomChildNode is defined in a local WIP commit.) All these implicit constraints are in the implementation of makeVList. I don't know of a way to constrain one parameter like this based on another. But we can achieve the same thing using type union. E.g.,\n```javascript\ntype VListParam = {|\n  positionType: \"individualShift\",\n  children: {type: \"elem\", elem: DomChildNode, shift: number},\n|} | {|\n  positionType: \"top\" | \"bottom\",\n  positionData: number,\n  children: ...\n|} | ...;\nconst makeVList = function(param: VListParam, options: Options): domTree.span {\n   ...\n};\n``. AddedVListParam` (in comments until ported to flow). I did local (non-docker) screenshots, and the diff of the before and the after shows that something's wrong with one or more of the VList kerns. I looked through the code carefully and I couldn't spot my error.\nI'll look again tomorrow, but if you know of any ways to quickly check precisely where the problem is based on your knowledge of the implementation or the testing tools, I'm all ears.\nIt better not be something easily caught by the type-system. ;)\nIf so, I could rebase my other commits on it and see if flow throws an error.. :D There's nothing like using a real diff tool (meld) to highlight only the parts that have changed to make the typo painfully obvious. I had a positonType instead of a positionType. I don't think it's worth adding a test as flow will easily catch this.. Sorry for the close/open; hit the wrong button on mobile.\n@nmanumr Do you mean MathML as input to KaTeX or as output?. Could you provide a testable example? I'm happy to try to debug this.. Ah yes. I'm happy to reassign if you're not comfortable with it.. Thanks. children should have been optional (already, the implementation assumed that and defaults to an empty array).. I ran\nkatex.renderToString('\\\\Phi_M(c) \\\\overset{def}{=} \\\\Phi_c(c)')\n\non the javascript console both on your site and on https://khan.github.io/KaTeX/. It failed on the former as you indicated and it succeeded on the latter.\nAre you by any chance running an old version of KaTeX? Per https://github.com/Khan/KaTeX/releases, \\overset was added in v0.8.0.. FYI: I'd be wary of using box-shadow for anything since in Windows high contrast mode, browsers remove all box shadows (and also background colors/images). I've totally been bitten by this when working on making accessible web UIs.. !\u00a1mportant is specifically designed to override CSS precedence. I'm not aware of it offering any other use.. I've kinda kinda gotten used to ? binding weakly so that I expect ?string[] and (?string)[] to be different, but YMMV. I've, of course, been spending a lot of time in flow, so this is entirely subjective. Up to you.. (Given the difficulty of checking diffs, could you possibly include subsequent edits in commits separate from the base?). Also, you might either wish to reference Issue 892 or indicate that this fixes it. Not sure whether we should include the ParseNode refactor as part of the issue since it was discussed there.. Also, I forgot to mention: Nice!. Good point! Made it exact. And also rebased while I'm at it.. It's a pity: github is doing a really poor job of aligning the diffs. The overwhelming amount of the change is a +4 indent.. @kevinbarabash: Ah, well, no worries. The more you move it, the faster it will be for me. In a subsequent PR in the works, I'm having to resolve stuff all over the place. :)\nSo please don't block on me, but I will still working on it.. As far as I know it is.. Given that this function is only added for the sake of the type system -- any suggests as to what to do about the codecov report?. Yes. The original assumption when I was putting in the types was that documentFragments hold children but are never children themselves. Then I found that my assumption was false in my ongoing efforts to put types in buildHTML.. Will take a look at the test failure! I'm surprised it happened. I'll look at where I've actually changed the logic -- not just added types.. I can see what would cause it. Could you possibly look at the place in the code where I just left a comment? I need your feedback on this.\nEdit: it's resolved now.. I just pushed another commit to this PR to make the ParseNode payload more type-safe. This requires renaming two of the symbol Groups -- \"accent\" -> \"accent-token\" and \"op\" -> \"op-token\" -- since these group names are also used as ParseNode types. Before this, the \"accent\" ParseNode had value type\nstring | AccentStructType. Now, that's been split into:\n\n\"accent\": AccentStructType\n\"accent-token\": string\n\nThis leads to better type safety and fewer type assertions when porting the htmlBuilder and mathmlBuilder to flow.\nEdit: And in case you are wondering, I checked that there were only two instances of \".group\" in the codebase and nothing else needed editing.. @edemaine We want to get to the point where we can do that refactor. It would be far easier to catch errors once buildHTML and buildMathML are ported to flow, which is what this PR is toward. The goal is to eventually end up with a more flattened ParseNode format described in https://github.com/Khan/KaTeX/issues/892 at the end of a fruitful brainstorm.. @kevinbarabash I just want to confirm: Your review is not waiting on me for anything, correct? I just want to make sure I didn't overlook anyrthing.. @kevinbarabash: Note that all the type-safety comes about because the LaTeX function handler and the corresponding HTML/MathML builders are defined together so that the output type of the former can be coupled with the input type of the latter. One interesting consequence of this is that buildHTML.js and buildMathML.js are cannot be made properly type-safe without completing your refactors of moving everything out of functions.js and environments.js into functions/ and environments/.\nSo after this PR, I think we're going to have to do a bunch of those. I can do them if you're comfortable reviewing them using the method I described in another PR that requires pulling the PR locally and using meld. Otherwise, you can send them to me.. Sure, happy to take care of it.. @edemaine: Do your thing. I can wait.. @ylemkimon \n\nWhat do you think about having null-ParseNode, i.e., ParseNode<\"null\"> and returning it from Parser.parseFunction(), so that we can tighten maybe-ParseNode types and replace null check with NodeType check (at least for base of supsub)? I think allowing null or undefined may be bug-prone.\n\nMaybe-ParseNode types are useful and actually offer us more safety (see further below). To address your specific concern, we can't erroneously pass in a variable of type ?string or ?number when ?ParseNode<*> is expected. The compiler will still complain. The only case we might erroneously pass in null and have the compiler accept it is if it were a literal null or undefined, or it was a variable of type void. I don't think these are issues we would run into.\nWhereas, the ?Foo notation has many benefits:\n\n?Foo captures the intent quite directly and is the canonical way in flow (and js) to indicate an optional type.\nRelated to 1, the type system can more easily be used to distinguish cases when we are guaranteed to have a non-nullary ParseNode (ParseNode<*>), vs only optionally having it (?ParseNode<*>). If we added ParseNode<\"null\">, we wouldn't be able to do this as straightforwardly.\nThe compiler won't allow us to dereference ?ParseNode<*> at all, thereby forcing a null check, whereas it would allow us to dereference ParseNode<null>.\n. 1. Yes, I'd like to have time to investigate possibilities for handling this better and remove the $FlowFixMes.\nThese $FlowFixMes do not negate the advantages! Once we assign to _environment and _function, we're deliberately making the type loose (all possible NodeTypes need to be stored in each of these maps). All the type-safety we get is due to the types of defineFunction and defineEnvironment. Specifically, if you can call them successfully, then you're passing in handlers/builders of compatible types, and that is retained!. BTW, any of you all who like playing with the types, I'd appreciate any suggestions or workarounds on https://github.com/facebook/flow/issues/6369 to resolve these $FlowFixMes.. Huh that's a good point. We would still need the TypeValueMap to be able to make defineEnvironment and defineFunction typesafe. But it would become a TypeNodeMap and we can simply use $Values(TypeNodeMap). We would have to figure out something for _environment and _function, but we need to lose typesafety there anyway, so we could hack something.. I've got an in-progress PR to convert buildHTML and buildMathML. I'd gotten distracted by the AnyParseNode thing (union of all ParseNode types), though.. I've been trying to replace ParseNode<*> with an AnyParseNode (full type union) as that seems to be a necessary step to typing this properly and I've run into a case where the first \"atom\" refactor you're suggesting would make things quite a bit easier. I think I'm going to $FlowFixMe and get on with it.. I wouldn't mind that. This does feel a little out of place. The parser already recognizes \"\\\\right\" as an expression ender, so it's not like part of that knowledge isn't already there.. Thanks! This was definitely one of the necessary steps for the final refactor!. @ylemkimon Yes, that's the eventual goal -- ParseNode would become a type union of objects, each of which would have a single type field. (Kevin already started some of the work in making sure all the value types have a .type field on them.) We want to eventually get to the state Kevin suggested here: https://github.com/Khan/KaTeX/issues/892. BTW, the PR to port buildMathML to flow is ready, but that sits on top of this PR, so I'll wait until this is submitted to send that PR.. Yea...having experimented, I think it might have to be done all at once to avoid getting into \"this type is not compatible with that type\" style errors which provide no additional insights and dramatically hinders progress.. Oh yes, thanks for the reminder. That should be done first.\nAnd indeed, I mean plain objects.. @kevinbarabash It's worth noting that the \"atom\" refactor requires merging the various src/functions/symbols*.js into one.. Actually, I can keep them in separate files and import them all into a new symbol.js that dispatches to these handlers.. @kevinbarabash Before I go further (I've already gone pretty far, actually), do you think there should be separate \"atom\" types for \"mathord\", \"textord\", \"op\", and \"spacing\"?\nAlso, we don't have any HTML/MathML builder handlers for \"accent-token\" and \"op-token\". I'm not 100% certain (haven't done a deep audit) how precisely those are handled and whether we should do anything about separating them. Any insights would be appreciated.. @ylemkimon IMO, ParseNode is central enough that it would really help to keep everything related to it -- it's functions and \"methods\" (free functions in this case) -- together for the sake of disciverability and learnability. Also, as it's immense, it may overshadow other standalone types in types.js, making them less discoverable.\n\nBut I'm open to any feedback you may have on any advantages of splitting it up. . That's a valid concern. How about parsenode.js then?. SGTM. Renamed to parseNode.js and also rebased to head, migrating the relevant code.\nBizarre thing: flow is strange ... renaming ParseNode.js to parseNode.js started to ignore one of my explicit $FlowFixMes in environment/array.js. I had to reorder code around to make it accept the code again!\nEdit: Actually, I resolved the $FlowFixMes by updating the defineEnvironment type.. This was towards #1492.. @kevinbarabash I'm always hesitant to make such a commitment, especially as KaTeX still good to evolve to support, e.g., SVG output. But perhaps that wouldn't requires a change in the tree.\nBefore stabilizing the tree API, though, I would strongly recommend defining and documenting standard structural patterns (e.g. text fields would always be strings or some such) and updating the tree to conform to these strong patterns.. I completely agree about the point of confusion. Once we have a static type system in place, I'm rather inclined to do a little refactor. But I'd open an issue on that first to open up discussion.. Good point!. Done.. Cool! Mind adding // @flow at the top of this file?. Me too, for all that's worth. ;). Yes. Would you prefer I rename it to CachedExpansion to make that clear?. Ooops! I meant to remove it. I'd failed to do this part when manually merging in my changes with Erik's previous commit. Indeed the results produced by make seem sane:\njavascript\nvar _expansion;\n// replace placeholder with the indicated argument.\n(_expansion = expansion).splice.apply(_expansion, [_i, 2].concat((0, _toConsumableArray3.default)(args[_tok.text - 1])));. It didn't. My concern with $FlowFixMe is that there's no single line within the method to put this on, and it would be put on the whole method, which means type safety would not be checked there. Would you still prefer I do it it? \"throw new Error\" already appears in the string, and I just tested and it makes no difference in the compressed size:\nSizes before gzip:\n199950 katex1.min.js\n199935 katex2.min.js\nSizes after gzip:\n52621 katex1.min.js.gz\n52621 katex2.min.js.gz. Ah nevermind, I see you've suggested calling it MacroExpansion below.. Done.. Done.. I recommend giving it an explicit tuple [number, number, number, number] type instead of an array type number[]. This allowed me to catch a (mostly harmless) error in fontMetrics.js. \nE.g. via a local type:\n```\ntype FontMetrics = {[string]: [number, number, number, number]};\n// character code => [depth, height, italic, skew]\nconst fontMetricsData: {[string]: FontMetrics} = {\n...\n};\nexport default fontMetricsData;\n``. Ah, sorry, I'd started porting this without paying attention to the existence of this commit. In any case, if you use a tuple type (that I commented on further below), flow will point out thatwidth: metrics[4]is doing an out-of-bounds access.\nSo removewidth:` here. I grepped through the code base and I couldn't find any uses of it either. ;)\nThe now-closed PR 853 contains the work I did on frontMetrics* and unicodeRegex.. I recommend something along the lines of\njavascript\ntype FontSizeIndex = 0 | 1 | 2;\ntype FontSizeMetrics = {[string]: number};\nconst fontMetricsBySizeIndex: {[FontSizeIndex]: FontSizeMetrics} = {};\nand using let sizeIndex: FontSizeIndex below. The now defunct PR 853 demonstrates this.. Removed. And updated commit description.. Removed this and the one on line 34.. I agree. A lot of refactoring needs to be done before we can do that.. Yep, but we're nearly there. Parser's untyped days are numbered. ;). Oi! Time to change my vim defaults. I keep forgetting to set it to 4 spaces in every new session. ;). Parser's parseArgument always returns the list of positions as the last element.\nSo it returns something of the format [ParseNode, ParseNode, ..., ParseNode, number[]]. So this happens any time you see a defineFunction with code like\njavascript\n    res = parseArray(context.parser, res, \"display\");\n    return res;\nWe need to refactor this at some point, but I'd rather do it right before or during ParseNode being ported. It would help to have maximal support from type-safety while doing this since ParseResult is simply stored here and used various places (including possible buildHtml, but I haven't read that part of the code base yet).. Ah, that was just to get rid of the eslint suppression at the top (personally a fan of maximal linting). However, that's not my favorite lint anyway; and I can revert this if you like.. Agreed.. Fixed.. ArrayEnvNode is more descriptive. So I'm using that.\nIs AlignNode the most appropriate name? It's not a ParseNode.. Also, per ArrayEnvNode, it's not a ParseNode, but the data stored in the ParseNode. Would you still prefer to call it ArrayEnvNode? Or would ArrayEnvNodeData (a little long, I know) be more appropriate to avoid confusion?. In the currently-pushed version, I went with AlignSpec and ArrayEnvNodeData. I'm very open to changing per your feedback.. Done.. Done.. I'm sorry, I didn't quite understand this comment and the future evolution you intend. What I meant was: for result: ArrayEnvNodeData, we have\njavascript\n    return new ParseNode(result.type, result, parser.mode);\nSo the ParseNode instance contains a payload that is of type ArrayEnvNodeData struct, which is why I was thinking about the Data suffix.\nSo did you mean that the payload would become a union type (e.g. ParseNodeData or something briefer)?\nI'm guessing you didn't mean that the ParseNode class would be dissolved in favor of a union type (given that we still want to encapsulate the common tokenizer metadata for error reporting)?. FYI: Looking at defineFunction.js I don't currently see any benefit in coalescing.\n1. We don't really need any subtype relationship.\n2. For object/struct types, there's not really an extends type behavior AFAICS (please correct me if I'm wrong), so we would need to repeat the fields anyway when defining it.. Ok, so what you're saying is that the payload of ParseNode is still considered an undecorated \"Node\". And hence we should use the Node suffix rather than NodeData?\nIs that your preference?\n. Ah, I see that you merged it. Please LMK what nomenclature you had in mind. I'm happy to update these as we continue in the future.. FYI: I'd confused myself in the last PR where I used this as the type: I'd confused the local parseArray method with Parser's parseArguments method. Sorry about that.. Note that the output value of handler is actually unrelated to the group parameter passed into htmlBuilder.. Yep, I mentioned this in PR 865, though I suppose you're reviewing that part here as well. I'd said that these two types are unrelated, whereas the actual truth is that handler returns a value, where as htmlBuilder and mathmlBuilder receive a ParseNode (IIUC) containing that value; this will flesh out better once buildHTML and buildMathML are ported and we understand its types better. We are not currently set up to specify this relationship since ParseNode is not parameterized by its stored value type.. Oops! I'd copy-pasted that from functions.js. Updated.. I just did this since we don't want anyone but functions.js to import this. I updated the comment above this to emphasize that fact a bit more.\nI could also name this to importOnlyInFunctionsJs or functionsDoNotImportDirectly or some such to make it clearer. ;). Sorry, my meaning didn't come out clearly. I changed it to \"imported here\". The point is that whoever imports functions.js should be guaranteed that all definitions are then available; and that's assured only by functions.js importing all the definitions.\nI am open to other rewordings.. SGTM! That would be much more satisfying.\nThat being said, spreading out parsing responsibilities a lot can get confusing, so as things become clearer, we might have to consider the API.. Done.. 1) I'm sorry, did I merge before this was resolved? If so, sorry!\n2) I'd very much considered wrapping this in a method, although I was thinking getFunctions (which has no benefits over the current approach) as opposed to getFunction, which would indeed be better. We could do this as follow-ups as we refactor further.. Ah, I'll just let you merge it next time.\nPerhaps I've been indulging an unreasonable fear of merge conflicts. ;). Yes, I intend to do more changes within Parser.js itself in subsequent PRs while the ParseNode refactor waits on other PRs to complete. ParseFuncOrArgument will be replaced with a union of 3 structs per our discussion in #892. We can see whether it makes sense to have a function for an is-function check or simply use foo.type === \"fn\" (or \"$\" or \"arg\") or some such.. Yes. The point is to write down all our intended types while we refactor to make porting to flow possible. That requires the ParseNode refactor we discussed in #892. Until we're there, writing out these types aids keeping our intended mental model better documented.. Done. I was just keeping the generated code low a concern you'd mentioned in a previous PR.. Not really. Tokens can be merged from mutliple tokens. Here are the places where a token isn't supplied to the constructor:\n\narg = newArgument(this.handleUnsupportedCmd());\nreturn newArgument(new ParseNode(\"color\", match[0], this.mode));\nreturn newArgument(new ParseNode(\"size\", data, this.mode));\n\n. Done.. Done.. To convert the string to a number (see second commit). When making the type of Token's text explicitly string (which we thought was previously unnecessary) instead of *, this line threw a type error (string and number couldn't be added).\nI was surprised, as I expected Token's text to have been inferred as string due to its constructor. Flow seems to be doing some global type inference, giving some surprising results here. Hence, we should avoid using * for maximal type safety.\nThanks for asking. ;). Done.. Ok, LMK if you'd like me to remove.. Actually, I can return a token in all of those existing cases.\nBut I also missed\n- return newArgument(new ParseNode(\"ordgroup\", expression, this.mode, firstToken, lastToken));\nfor which there isn't an obvious token text. Specifically, I don't know what to put in as the second parameter to firstToken.range(lastToken, ???). I used firstToken.text for now and added a commit.\nThese changes are included in the latest commit.. I was trying to think of how to do that. While that's trivial if firstToken and lastToken come from the same lexer -- we can use firstToken.loc.lexer.text.substring(firstToken.loc.start, lastToken.loc.end) -- it's not so straightforward when they're not.. Should this now be removed?. nit: Mind adding a @param documenting the type of the new parameter?. Same here, please.. (optional) I don't know whether an arbitrary strict order is enforced here, but if not, moving this up would make it much easier to see which level it is in.. It might be worth adding a comment somewhere as to why it's okay not to pass this parameter down to other methods below. The reason seems to be subtle: as handleSupSubscript can call parseGroup which can call parseExpression, but parseExpression is only called in parseGroup only if a { or [ is encountered, opening a deeper layer. But I haven't yet done an exhaustive check.\nI'm also fine with completely deferring this if we intend to formalize the various non-obvious invariants in this file some point to aid comprehensibility so that they aren't violated in the future.. Why does this only apply to this block and not to the rest below: styleFuncs, oldFontFuncs, and \\color? Are they not similarly affected? Or do none of our functions currently want to allow these in optional groups?\nOtherwise, this PR mostly LGTM.. This is to convince the compiler that span is indeed set. Also, unlike before this change, span is set also for (numSvgChildren === 0). Unsure if that ever happens.. Unfortunately, I couldn't use T as the output type itself as I ran into https://github.com/facebook/flow/issues/5022.\nhttps://flow.org/try/#0MYewdgzgLgBAJgUwGYBsoEYYF4ZIK5jBQCW4APACoB8AFBAlCWAOYBcMFMAPjAG4jE4AGnjIAhnjQBJJAFUwiJMTAI47CgEp2AKhgBvAFAxjMAE4M8psDHqNlzbFhwFFy1TAD8opBOlyFyG5wMOy2TMwA3AYAvlGgkLCKaABM2LgERKRglLRh9urcfALC3r5QMvKuKmocWhz6RibmUJbWeSyOzgFK1Z6lkuX+Ve6hDOFRsQYG8dAwxBAAQmKm6OwARiAgKAhi1jhJGDQugdUiPij0GnHgs-NLpsnrm9u7aQfJR91BZ2IXCFcGIA. Updated to remove all the quotes I introduced in this commit. I was just a little surprised that all these unquoted keys worked as I'm used to the Google Closure Compiler that renames struct fields but not string keys.. Whoops. I wish flow would catch missing types.. Done.. Not given the comment I'd added above escaper(). It's used only for escape(). In fact, I removed this function and just inlined it where it's used.. Removed all added quotes.. Same here.. So that I can access it in the span = assignment below. Flow wasn't convinced that span was guaranteed to be assigned otherwise.. Well, must numSvgChildren always be > 0? If so, does it make more sense to assert that instead? That's the only reason span would have not been set.. I agree, I don't like that either. I just changed it to use a block local span variable to make that clearer.. Yes please!. numSvgChildren > 3 would mean that widthClass would be undefined. Is that okay?\nFor now, I've updated the code with an error requiring 1 <= numSvgChildren <= 3.. Why does this not throw with a more generic message when lexer is not set?. Does it make sense to add an issue for this for others to pick up and add the issue number here? Or is this something you expect to address immediately?. Sorry, I'm a little unclear. Is this a TODO for this PR? Or something longer term?. Is it worth saying in \\textstyle in the exports key above to avoid this confusion in the future?. 1. This is not backward-compatible.\n2. It's not obvious to me that these are the only allowable possibilities inside an operatorname, and not, say, menclose mrow or mpadded or any of the stuff on the left sidebar here. I see examples of sub/superscripts within operatorname here and here among others.. I know this is already submitted, but can the author or any of the reviewers explain why the comment character eats all subsequent blank lines instead of just the first end-of-line? That's not like LaTeX, is it?. Ah, sorry, I just completely misread this as %(^\\n)*[\\n]. Sorry. This is just consuming non-line breaks. Ignore me. ;). They are both exported via export default so that they need to be imported directly (i.e. without {}).. Done.. It is called to make an empty span with no class here\nhttps://github.com/Khan/KaTeX/blob/d969322dd2868776ebc10c71c459d56b502b1222/src/buildHTML.js#L1162\nwhich seems to be a very legitimate use case.. Yea, and it's unfortunately inherent. (Intersections of exact types with different fields are inherently empty.) What would help is if they had some way to extend an exact type to create another one with more fields.. I didn't create a new type since it's applicable only here. I'd tried a bunch of ways, and this was the only one I tried that the compiler was actually happy with (and in fact, I split out this method just to get the compiler to accept all this logic type-safely).\nEffectively, the output children type here needs to be just VListChild'[], where VListChild' is taken as an inexact version of VListChild; i.e. children should have type:\n({\n    type: \"elem\",\n    elem: DomChildNode,\n    marginLeft?: string,\n    marginRight?: string,\n})[]\nI didn't see any way of deriving an inexact type from an exact type or vice versa. So I picked a union of all types returned in the function body to make the compiler happy.. Done.. firstChild.type can never be \"kern\". I couldn't enforce this at the type level except by doing one of the following approaches, both of which I found awkward.\n\nChange children: VListChild[] to be passed instead as firstChild: VListElem, restChildren: VListChild[], where the former must be elem. (This requires changing everywhere makeVList is called.)\nChange children: VListChild[] to a union of tuple types (and see if the compiler is happy with writing for loops over them) like\nchildren: [VListElem] | [VListElem, VListChild] | [VListElem, VListChild, VListChild] | [VListElem, VListChild, VListChild, VListChild] | ...\nup to the max number of children passed anywhere in our code base. This is a change only to this file, but I wasn't sure whether I'd have to cajole the compiler more when accepting some of the input or using children.. I'm open to any stylistic suggestions that might help. Or I suppose, this might just require us to over time become more familiar with flow syntax to make this more second nature to avoid confusion between string[], [string], and {[string]: ...}.. Agreed. As this would touch more files, I'm deferred it to another PR (I opened #963 to track this). The font family is is sometimes a computed string:\nhttps://github.com/Khan/KaTeX/blob/d969322dd2868776ebc10c71c459d56b502b1222/src/delimiter.js#L95\nwhich will probably require a $FlowFixMe after an assertion for size range.. Done.. Done.. Honestly, I don't understand the structure of the original logic. However, I've replicated it herein the conversion to object.. You suggested this in the stretchy PR. I did this anyway to resolve some of the type errors. (It was otherwise interpreting the returned span to have type span | svgNode.. I made all these variables as local as possible since it was getting difficult for me to otherwise reason about the area of influence of any assignment to any of these variables.. I moved this to the top to make all the if statements positive so that type refinement could guarantee what was non-nullable in each if-then statement body.. I coupled the elem (originally subm, supm) variable with the corresponding kern (originally subKern, supKern) so that type refinement (if checks) below could guarantee when both these values were set and usable.. Ok, I'll simplify it as a tiny PR separately after doing more paranoid checks about what pathways can actually end up in the else block that contains this code.. This is an HTML Node. Should it perhaps be an HTMLElement instead?. Done.. (optional) Here and below (hander, htmlBuilder, mathmlBuilder), you can just do\n\nhandler(context, args) {\n...\nand save a few characters.. (optional) As in the other PR, the following is slightly shorter\nhandler(context, args) {\n    ...\n}. I don't think flow will infer a tuple type, but a more type-unsafe heterogeneous array. One could try to check.\nMy personal bias is to favor explicit typing to make the intention clear and better documented.. (optional) You could change this to for (const child of temp) { if we have a preference for that. It makes it more up front that the index is not used anywhere else.. (optional) Any particular reason this was split into 2 lines? For debugging perhaps?. Not to mention the original code is much harder to reason about. This quite an improvement!. What's the type of the return value? I'm seen at least 2 different types being returned.. Missing boolean return type annotation.. Where did CombinableDomNode[] get inferred by the type system? I don't see anything explicitly requiring that. Does declaring body above explicitly as DomChildNode[] resolve this?. Was that by any chance because those methods were missing return types?. Is this unused? If so, why not simply discard it? The unions below are quite straightforward to comprehend.. Throughout this file: please remove the now redundant @param and @return annotations that you're replacing with flow types.. Missing return type: : ParsedFunc. Missing return type: : ParsedDollar. (optional) You can remove the type declaration of  @param. You may also incorporate the param description into the main method.. (optional) How about\n  consume?: boolean = true\nand then\n  if (consume) {\nbelow for improved readability.. There are a few of them I can't comment on in the github UI since this PR doesn't have any diffs nearby. However there are a lot of @returns with no corresponding return value annotated in flow. The ones I can't comment directly on are enumerated here. (Might be worth enabling the lint/warning/error to require return types when return is present.)\n\nparse()\nparseInput(). Missing return type ParseNode[]. Missing return type ParseNode[]. overIndex is not used anywhere outside of the code fragment above. Why not just nuke it and simply rely on whether funcName is set in all cases? As a bonus, that also allows the for loop above to be written in for-of form.. Missing return type ParseNode. To confirm: nothing relies on this any more?. What was the advantage of duplicating this from the final else in the if chain below?. Return type is missing. I'm unsure, but it might have to be something generic like * before the ParseNode refactor.. Return type missing.. Return type missing.. Return type missing.. Those parameter can be changed from Tokens to {loc: ?SourceLocation}, just like the parameters of SourceLocation.range.. (optional) Just a side node: I think it's more canonical to return ?Group rather than Group | boolean.. There's got to be some way to using bounded polymorphism or some other way of specifying type variance to handle this. However, that requires experimentation, so we can do it separately.. Sorry, wasn't clear. I didn't intend for it to be incorporated into this PR. ;). Whoops, not sure how I missed that. ;). That's exactly what I meant (sorry, I wasn't clear). This would require changing the return value to null and changing where it's used. That's more in line with what we do elsewhere -- if we're conditionally returning a value, we typically use a nullable.. It's called with sqrtSvg(\"sqrtSize\" + delim.size, ...) which doesn't automatically satisfy \"sqrtSize1\" | \"sqrtSize2\" | \"sqrtSize3\". Since this is a local function only called within this file, I'm not sure it's worth having to override the type-checker to accept this code.. You're right. I updated it to identify which option is more ideal.. Yea, similar to the previous comment, I'd have to override the compiler. Since this is only used locally, I thought it to not be worth it, but I am open to either change if preferred.. Ooooo! Nice!. Done.. I want to add one thing before this can be submitted. Per the discussion at https://github.com/facebook/flow/issues/4582, I need to add a & {} to the $Shape<> type since $Shape<> seems to currently allow null|undefined. Feel free to do this yourself before merging (if everything else is LG). Otherwise, I'll do it tonight.. Done fixed. It's ready now.. Ah, oversight. Done.. That's a good point, thanks for mentioning. Currently, it's quite brief and readable and these will all presumably get pulled out into their own files in due time per Kevin's efforts, so I'm not sure it's quite worth it yet.. That's new to me. Reverted to index-based loop.\n\nI'm rather curious about this, but I am having a difficult time following the polyfill within build/katex.js. E.g. I don't see where the iterator's constructor/factoy method and .next are defined. Could you provide any pointers on this?. Thanks! Super-helpful!. For what it's worth, I'm used to the Google Closure Compiler at work and the optimizer is extremely type-aware. E.g.:\nhttps://closure-compiler.appspot.com/home#code%3D%252F%252F%2520%253D%253DClosureCompiler%253D%253D%250A%252F%252F%2520%2540compilation_level%2520SIMPLE_OPTIMIZATIONS%250A%252F%252F%2520%2540output_file_name%2520default.js%250A%252F%252F%2520%253D%253D%252FClosureCompiler%253D%253D%250A%250A%252F%252F%2520ADD%2520YOUR%2520CODE%2520HERE%250Aconst%2520object%2520%253D%2520%257Barray%253A%2520%255B1%252C%25202%252C%25203%252C%25204%255D%257D%253B%250Afor%2520(const%2520element%2520of%2520object.array)%2520%257B%250A%2520%2520%2520%2520element%253B%250A%257D%250A%250A. Well, I've already undone the for-of. I can put that back in if you prefer.\nIn the meantime, it would indeed be great to get an array-only polyfill or somehow set it up to rewrite \njavascript\nfor (const foo of fooList) {\n  ...\n}\nto\njavascript\nfooList.forEach(foo => { ... });\nThough ideally, it would be nice if it rewrote to\njavascript\nfor (let i = 0; i < fooList.length; i++) {\n  const foo = fooList[i];\n  ...\n}\nwhich would also allow us to use it for NodeLists (e.g. like those returned by querySelectorAll).. I didn't see any guidelines regarding that.\nI originally didn't use *Interface. But this file defines quite a few new types, a number of which are closely related to these interfaces; so it helped to make the interfaces stand out. Note that none of the interfaces are actually exported from this file, so changing the convention here in the future should be very easy as well.\n. svgSpan is actually a constructor for an SvgSpan or a list of SvgSpans within a DomSpan. So it doesn't feel out of place there. Currently, we have (in increasing order of dependency):\n\nSvgSpan - the fundamental type\nbuildCommon.makeSvgSpan - SvgSpan constructor with ChildType in span<ChildType> specialized to svgNode (aids type inference).\nstretchy.svgSpan - to convert a ParseNode (that needs SVGs) to a span wrapping one or more SVGs for output.\n\nI'm not sure what to rename the last one, but currently, all uses of stretchy.svgSpan include the word stretchy making the context obvious, so I don't feel as concerned about confusion between the method and the type.. Just wanted to check -- are you okay with this? I don't want to merge if you still have any unanswered concerns.. I'd considered that previously and now that you mention it again, I'm reconsidering my decision.\nTo elaborate on my original intention: the type sum is technically stricter and also allows one to clearly see which discrete possibilities apply (e.g. span<SomethingElse> is not allowed even through it implements the interface). My original concern was that interfaces are strictly structural -- even if you don't explicitly say implements HtmlDominterface, something can accidentally implement it and allow us to pass in a value of that type.\nHowever, given that HtmlDomInterface currently includes tryCombine and we have explicit constructors for DomSpan and SvgSpan, there's pretty much no chance of something accidentally satisfying the interface. So you're right, we could probably just replace it with the interface now.\nDone. We can also revert it if ever needed as the change is pretty trivial.. I'm happy to change it if you insist. I just wanted to make sure here and in other places where I've used a parametrized type that it emphasizes that this is the type and not the value of the parse node. WDYT?. Me too! This error is very confusing. ;(\nI didn't yet try to do a minimally-reproduceable example to file a bug on flow.. If that's all the data they hold, then I don't see a problem. Having a strict type check would allow us to easily replace these when we needed it.. Ah I guess this works now that I was forced to do a $FlowFixMe in stretchy.js. Done.. funcName.slice(1, funcName.length - 5); is a string, whereas StyleStr is something more specific (a union of 4 specific strings).. Because it's always of length 1 in that case, and the code below assumed that if the length was 1, then the fourth field was set. Just establishing this a bit more explicitly in the types.. \"accent\"'s corresponding value type is string|AccentStructType. Flow can't know here that it's not a string. Here, I'm asserting that it's the latter and not the former.. Unsure. I'll see once I try to port buildHTML over.. There are no flow types on unicodeAccents it since it's also used by unicodeMake. So I unfortunately had to do it this way.. I tried it, but there were type failures. This requires handling more type assertions in the various  htmlBuilders and mathmlBuilders. This is the kind of stuff within buildHTML and buildMathML as well.\nI figured that since this is already a lot and is in a good spot and catches a lot of errors already, I'd do the rest in a separate PR.  ;). +kevinb\nThis is the failure\n\\begin{matrix}\n    ^3+[-1][1-1]1=1(=1)\\lvert a\\rvert~b \\\\\n    \\scriptstyle{^3+[-1][1-1]1=1(=1)\\lvert a\\rvert~b} \\\\\n    \\scriptscriptstyle{^3+[-1][1-1]1=1(=1)\\lvert a\\rvert~b} \\\\\n\\end{matrix}\nand I can see that would fail with this change in the code. This example has a superscript ^3 without a base! Isn't that supposed to be a parse failure in LaTeX? Why do we support it?. Interestingly, there are already tests for this and this is apparently a feature. I'll check to see why they didn't fail.. Fixed and pushed.. This is definitely non-trivial and definitely belongs in a separate PR. There would need to be more refinement of the ParseNode types. It's better explained by sharing the next PR with you once it's done. ;). This was wrong. I no longer needed to add the type. I'd misread the original double-nested map lookup. I ran into this while working on the second PR.. The answer is yes. This is small enough that I can do it fully (both the hander and the htmlBuilder part) in one fell swoop. It requires a helper from the next PR, so I'm going to keep it as part of the next PR for now.. Sorry, this is no longer needed since I did the \"accent\"/\"accent-token\" separation to make it more type safe. Fixed.. Yes, Group here is a different type, but every string in Group is also used as a ParseNode type due to this line in Parser.js, resulting in this unfortunate name conflict. All of these Group values are listed under the second \"section\" of types within ParseNode.js where the value type is string. See the comment in this PR in ParseNode.js that says\n// From symbol groups, constructed in Parser.js via `symbols` lookup.\n// (Some of these have \"-token\" suffix to distinguish them from existing\n// `ParseNode` types.)\n\n. Oops! Fixed.. Fixed.. Ah, I hadn't resolved the merge conflict correctly. Thanks for catching.. size is nullable since it's an optional argument. assertNodeType requires a non-nullable and returns one as well. So, this full expression passes a ?ParseNode<\"size\"> for the size attribute.. Already synced and resolved this. ;). Surprisingly, yes:\nhttps://github.com/Khan/KaTeX/blob/7b22eeb64ad7acf0090a393ba339f044e5886c15/src/functions/op.js#L219. Removed.. Currently, I'm focused primarily on putting a type system in place to capture existing invariants and avoiding modifying any core logic (except where the type system catches actual errors). I've added TODO comments for this refactor separately, and I think it would be easier to do once all of KaTeX is strongly and statically typed.. No, since that doesn't have grp.value.base which I access below. \"widehat\", \"widetilde\", \"utilde\" (from the if condition) all correspond to one of these two types, which is what I mean by \"implied by the labels above\".. Done. Please see if it's clear enough.. Done.. Done.\nAlso, as an additional commit at the end, I remove intermediate comments (these appear inconsistently only on an arbitrary subset) and alphabetized the whole list of functions/ imports. I can undo this last part if you prefer.. Function. Renamed to defineOpFunction for clarity.. FYI: I added this comment, possibly while you were reviewing.. You're right, that's confusing. I changed type to \"mathord\" | \"textord\" instead. Previous PR dealt with the case where ParseNode<\"mathord\"> was called type \"mathord\" and similarly for \"textord\" so the original type made sense. Now, I've got ParseNode<\"spacing\"> is called with type \"textord\" which means that I have to break the tight-knit relationship between the ParseNode type and type.. Fascinating. Never seen that myself. Would you prefer it in this case?. FYI: The reason for adding an explicit type in each of the mathmlBuilders is to allow the type inference to succeed on defineFunction called later in this file.\nRecall that defineFunction ties together the type argument with the output of handler and the input of htmlBuilder and mathmlBuilder. In this file, htmlBuilder is strictly more generic in this file (HtmlBuilderSupSub is a subtype of HtmlBuilder per the variance rules), but flow requires us to either explicitly cast it down from HtmlBuilderSupSub to HtmlBuilder to prevent type inference from failing, or, as it turns out, adding an explicit type for the mathmlHandler seems to be enough to satisfy it. IMO, none of this should matter since defineFunction explicitly specifies type which should be enough, to determine what the expected types of handler, htmlBuilder, and mathmlBuilder are, but it's still beyond flow's comfort zone.. That's what I started with, but the flow type system disallows it.. Functions are contravariant on their input types. Flow actually has some nice documentation on it: https://flow.org/en/docs/lang/variance/. That's what I originally thought, but then I remembered that * doesn't mean \"anything\". It means \"something specific that I'd like the inference to figure out\". The constraint in ParseNode's type parameter is that it's one of the strings in NodeType. So it shouldn't be able to correspond to two possible values.. More info here in the Existential type is here:\nhttps://flow.org/en/docs/types/utilities/#toc-existential-type\nNote that sometimes the type inference can't figure out what the Existential type should be since it does global type inference and in my experience kinda just constrains the possibilities that the type can have. That's why we were able to get away with a lot more when just using * for the input of htmlBuilder and mathmlBuilder before we ported everything to flow. So I generally recommend always specifying explicit types whenever possible -- I've caught more type errors due to the increased strictness that way.. Removed.. To elaborate on @ylemkimon's comment, if * meant \"anything\", then yes, ParseNode<*> is equivalent to ParseNode<*> | ParseNode<*> because each ParseNode<*> there is the same. But in flow, each * is an existential type, which means that each * refers to something in particular that the flow type system has to infer (in our case, it's constrained to be a value from NodeType). The two *s may be inferred to be different things as they are independent and not connected in any way, and thus the union is strictly more generic.\nMore concretely, let's say you are the flow type inference system and you see a parameter of type ParseNode<*>. If a caller passes in something of type ParseNode<\"accent\"> | ParseNode<\"supsub\">, what specific value is * inferred to be?\nHowever, if the parameter has type ParseNode<*> | ParseNode<*>, then the first * can be inferred to be \"accent\", and the second one can be inferred to be \"supsub\".. The original code structure was:\nif (!group.value.sup) {\n  ...\n} else if (!group.value.sub) {\n  ...\n} else {\n  ...\n}\nAs in other refactors, this was reordered to make positive/existence checks (which requires start with the original else case where both are non-nullable) instead of negative/non-existence checks so that non-nullability of the supm and subm are immediately obvious to the type system.. Honestly, not sure at all. Currently, groupTypes are used by both the build*.js files and the defineFunction and defineEnvironment. I honestly can't tell the difference/advantage in moving one place or the other. The only minor consideration that comes to mind is that if we move both groupTypes into defineFunction, we're going to have to come up with two different names for them since they would be in the same file, whereas now they are accessed as mml.groupTypes and html.groupTypes where they are used, which is kinda nice.\nThey really should be imported nowhere else, though I see that functions/raisebox requires it -- I can clean that up by having it require size's buildBuilder directly. I'd do it in a separate PR, but it can also be in this one if you prefer.\n. Done.. Done.. Whoops! Fixed.. You know what, I'm definitely seeing the value of your suggestion now (see the raisebox PR I'll send soon). All the functions/* generally import all the exports within buildHTML and buildMathML, but they really should not be accessing groupTypes at all. So you're right. I'll move this into src/defineFunction and not import them anywhere else.. That's true. The reason I did this was so that there's only one place the canonical implementation lives. That way, if it's ever updated in sizing.js we wouldn't have to remember to update it here as well. What do you think?. Thoroughly agree! That was @ylemkimon's idea in the last PR.. It's required by the type system. ;). Actually, I'm happy with this deprecation, as I have a difficult time reasoning about what precise constraints the type system is enforcing -- at least in the way * is currently implemented. I've been looking at some way to represent ParseNode<\"accent\">|ParseNode<\"accentUnder\">|...|ParseNode<\"xarrow\"> which is the actual thing we want whenever we write ParseNode<*>.\nIn the meantime, I'll take a look at the existing errors and see if I can resolve them. Thanks for pointing this out!. These errors are resolved by https://github.com/Khan/KaTeX/pull/1369. As the first line in this function, could you do: const size = assertNodeType(args[0], \"size\"); and use that instead of args[0]? That will capture any type errors in its usage very precisely.. @kevinbarabash Sorry I missed this, but this is actually incorrect!\nIn replacing the use of the ParseNode<*> type with (the actually correct) AnyParseNode, the compiler caught this!\nPR will come soon-ish...with various flow type fixes.. And actually, I confused myself. While these two lines were correct, shift.value should also have had a .value added on to it.. Yes, so that a nullable value can be explicitly provided.. It's a pity: we never passed in the source location when constructing these nodes, and now we're spreading that behavior everywhere.. Ah, it was not until merging with my PR that I realized. I'd done this assertNodeType after the if (!end) below so that we could give a more logical error message. What do you think? I can leave that in in my current PR. (We can discuss it on my PR, I suppose.). That's a good idea. I agree.. I removed the local variable lastRow below as it is always the same as this one (whose type the inference can easily figure out). I renamed this to lastRow since it's relevant in that context to make the semantics more obviously correct. I can renamed it back if you prefer.. No. This is a consequence of me removing\nconst groupValue = assertNodeType(group, \"array\").value;\nsince it should not be needed. htmlBuilder's group parameter is already strictly typed as ParseNode<\"array\">.. This check should never fail here due to the argTypes: [\"color\"], above. It would fail someplace in Parser instead.. Yes! This is exactly what I was referring to when you originally suggested the atom idea.. Actually, this should just be atom now instead of ord. When I rebased on latest head, some change resulted in a rel type object here. So I removed assert/checkNoteTypes2 and used assert/checkSymbolNodeType instead.. Doesn't it always hold the last row? Below, whenever it's assigned a new value, it's also pushed to the end of body. I don't see any other pushes into body.. Ah, I think I understand our difference in interpretations. Just to be on the same page: my interpretation of\nlastRow = [];\nbody.push(lastRow);\nis that at after these two lines, lastRow still points to what's currently the last row in body (as opposed to final last row). It made its role in the rest of the logic a bit clearer to me, but I can understand the confusion due to a different interpretation.\nRenamed back to row.. Ah, thanks! Fixed.. Sorry, sloppy me. I didn't go back through the stuff I'd already added types for way back when. Fixed.. Done. Done. Done.. Done. Sorry, I'm not quite sure I understand your statement and what consequent simplification of code you had in mind.. $FlowFixMe just allows the assignment; flow would still type nonSpaces as HtmlDomNode and assume its type as that in the subsequent lines. In any case, I added a general-purpose assert() method in utils since I've wanted it more than once before and removed the $FlowFixMe.. HtmlBuilder<NodeType> isn't the type union of all possibilities since it's not variant w.r.t. NodeType (by virtue of us computing NodeValue from it). Really, it should be {[NodeType]: AnyHtmlBuilder}. But it's probably not worth the effort. Almost all the typesafety we get is from the definitions defineFunction and definedEnvironment. Almost nothing else touches _htmlGroupBuilders; the couple methods that do expose a very strongly-typed signature.. Done. I added a TODO comment in htmlBuilder that the comment above references.. I added it because it wasn't obvious to me when it's omitted that the default behavior is \"right\". Is there any obvious reason to make \"right\" the default over, say, \"left\"? If not, I think having it explicitly would aid readability.. Looks right except for the missing \"size\" in the second line:\nconst sizeNode = assertNodeType(infixNode.value.sizeNode, \"size\");\nby any chance?. Ok, after the documentFragment refactor per below, I was able to undo this without flow being confused again.. I've coalesced documentFragment into a single class that implements both HtmlDomNode and MathDomNode interfaces. It required a $FlowFixMe.\nI also ran into additional cases of this uninformative error that's most certainly a bug in flow:\nError: \"documentFragment [1] is incompatible with MathNode [2].\"\nI've got 4 instances of it (one was \"incompatible with symbolNode\") that I had to suppress with $FlowFixMe. I'd appreciate any insights, or we could let it be.. Great! Excellent catch! The flow error could definitely do with some improving.\nUpdated.. There's no way in the type system to say that groupBuilders[group.type] has type MathMLBuilder<TYPE> where group.type (dynamic) === TYPE (compile-time).. IMO, it should be able to, but it's confused by getVariant(group, options). Since the latter takes groups of a variety of types, here it might be inferring that even though type === \"textord\", type: SymbolNodeType where SymbolNodeType might be defined to be all possible types encompassed by SymbolParseNode.. Sorry for the confusion: the return to isn't the issue here, even though it was written out explicitly; it's the calling of the function (groupBuilders[group.type](group, options)) with the given group that requires the $FlowFixMe.. It would have before as well, since MathNode is the only one that has setAttribute.. Ah, didn't notice. I put them next to each other, but still kept them separate to avoid exceeding the line length per the linter.. It definitely seems to be the case. I've not been able to come up with a counterexample so far, but I also have not definitively prove it in the \\operatorname case. In any case, I changed this to be more conservative about the assumptions.. Yes, that bug is reproducible via \\href{http://google.com}{\\sin}. Could that bug be fixed as a separate PR with test? The purpose of the type-change PR is to describe the existing code and not to change the fundamental logic.. This earnestly feels broken, and I didn't find a way to cajole the type system to accept it without this override. (I wonder whether typescript would have been a better choice due to greater maturity.) That being said, a simple workaround is to move the children assignment into the original constructors:\ninitNode.call(this, classes, options);\nthis.children = children || [];\nand remove the type parameter to initNode since it's no longer necessary then.. Nice find on the type spread operator!\nRegarding the ParseNode definition above.\n1. I would really like ParseNode to be covariant with its TYPE parameter. This means not looking up the value type within its definition. I think that might have been the cause of a lot of \" is not compatible with \" style errors which are completely unhelpful. Flow seems to be able to deal with an explicit union of explicitly-defined structs quite easily. An alternative is to replicate ...ParseNodeBase in every definition, which I can do.\n2. As a minor nit: if we not make ParseNodeBase a strict object type, then every ParseNode<TYPE>: ParseNodeBase as well. Not sure if we would every use that fact, though.\n3. The AnyParseNode as defined above is not technically a union of all the structs and the behavior of Flow's type checking (especially when it gives an error) might get very confusing in such cases. E.g. Flow will allow you to do the following with a union that type it won't with the type defined above.\n   javascript\n   type AllTypes = {| type: \"foo\", foo: number |} |\n                   {| type: \"bar\", bar: string |};\n   function(val: AllTypes)  {\n     let len;\n     if (val.type === \"foo\") {\n       len = val.foo + 1;\n     } else {\n       len = val.bar.length;\n     }\n   }\nPlayground\nI was thus hoping to eventually change uses of checkNodeType to be simple type checks.. @ylemkimon Actually, using\n```\ntype ParseNodeBase = {\n    mode: Mode,\n    loc?: ?SourceLocation,\n};\ntype ParseNodeTypes = {\n    \"array\": {|\n        type: \"array\",\n        ...ParseNodeBase,\n        value: ArrayEnvNodeData,\n    |},\n    ... // and same on the rest\n```\nseems to freeze the flow type checker very consistently (it's stuck at 24% progress at 100% CPU utilization). So let's skip that for now.... In case you are wondering, I changed from a regex to string equality comparison mostly based my inability to find this while looking for\"bin\",\"rel\", and the other atom families throughout the codebase. Otherwise, it was getting difficult to find the cause of the jest errors. I eventually guessed to look for all instances of\"m\"which is how I fortunately ran into this..value = ordargument(body)`. There was no reason to store both.\nPlus I've gotten allergic to anything named value. :) We should probably rename the rest to have names that say what they are.. Not really. It's still in the second parameter of parseArray() (which is now destructured). It's the only place it was used.. ",
    "henzestplus": "if someone could add the eurosign in one of the font files, I can add the eurosign, hopefully according to \\eurosym with \\euro and \\EUR{}\nhttp://www.theiling.de/eurosym.html\n. Just for the heads up, I managed to add the Euro Sign to the regular fonts, and have \\euro working in KaTeX, now we just need \\EU{}. In the mean time I will add the \\euro feature as pullrequest\n. What pull request is this about? The one that got closed because there should be a euro sign in the fonts, or the one that got closed because there is no euro sign in the fonts? The first I just copied from existing TeX fonts where I guessed the fonts where based on. The other just the ones included. It does not exist in them as I stated before, and it shows a \"missing metrics\" message, but it shows the sign. \n. no problem. the code part is ready, so when yo got them in, let me know when I can do a pull request again. \n. The euro sign was not embedded in any of the font files, since KaTeX uses them for display it only 'knows' what's in the font files. I used fontForge to,  basically,  copy the euro sign from another font (where this one was, presumably,  based on), and an online converter to get the other formats as well. \n. There isn't any in the result files located in static/fonts. If generated through that, how can I ensure it will be in there? Do I have to add something to a script? \n. npm version: 1.3.10\nnode version: v0.10.25\nI can't remember doing anything special to get a prerelease running.\n. ",
    "santhosh-tekuri": "+1. ",
    "csilvers": "I was once told, anecdotally, that <table> layout differs between browsers in ways that is impossible to correct or compensate for, and that nobody that cares about exact layout should ever use <table>.  Unfortunately, I don't remember the source, and if it's still true (or indeed ever was).  But something to keep in mind when considering <table>.. If the API allows it, you could sort the delimiters by length (longest left-delimiter to shortest).  This is a trick I often use to make sure you find the longest matching prefix first.. Isn't this comment obsolete now?\n. Does TeX allow tabs (or other whitespace) here?  (I admit it's unlikely to matter in practice.). Also,** . by itself is a valid size?  (\\\\kern.px)  If so, may be interesting to add a test-case for that.. I know it's unlikely anyone is going to try to look at this again after you throw the ParseError, but seems like it's good hygenie to reset this.mode before you do the str === \"\" test (since I don't think you need the mocked mode anymore after the while loop).. ",
    "flagxor": "It would be nice if alignment modifiers like [t] and [b] were supported.\n. ",
    "rossberg": "@edemaine, he is referring to vertical anchors like in \\begin{array}[t]{lll}.\nSee e.g. https://github.com/WebAssembly/spec/blob/master/document/core/exec/runtime.rst#59 for the source.. ",
    "fuzihaofzh": "Hi, when will \\hline be supported? it is needed in a lot of places. Thanks. @stevem6 Yes it does. But somehow seems wired.. @edemaine It's great. Looking for this feature for ages. Hope to see it soon in release.. ",
    "stevem6": "\\hline would be nice but meanwhile it can be simulated using \\mathrlap\n\\begin{array}{c|c|c|c|c|c}\n\\mathrlap{\\rule[-1ex]{20em}{0.1ex}}\\phantom{44}x\\phantom{44} & (-\\infty,-4) & -4 & (-4,7) &7&(7,\\infty) \\\\[1ex]\nx-7 &- & - &- & 0 & + \\\\[1ex] \n\\mathrlap{\\rule[-1.2ex]{20em}{0.1ex}}x+4 & - & 0 & + & + & +  \\\\[1ex] \n\\dfrac{x-7}{x+4} & + & * & - & 0 & +\n\\end{array}\ngiving \n\n. Maxwell's Equations look fine with extra vertical spacing eg using \\\\ \\\\. See IntMath Samples option at http://sixthform.info/katex/examples/demo.html\nI also used different (and variable) vertical spacing for the Cross Product, but then I expect to do that sort of adjustment in LaTeX when using fractions in matrices or align environments etc, so I'm not bothered by the need to do so in KaTeX.. David Carlisle's comment in tex.stackexchange is relevant except that KaTeX uses ex (height of letter x in current font) as the unit rather than pt, which is good as I like to use ex in LaTeX documents.\n\\begin{aligned}\n x &= \\frac{K_1M_2 - K_2M_1}{K_1K_2 + M_1M_2} \\\\[3ex]\n y &= \\frac{K_1M_1 + K_2M_2}{K_1K_2 + M_1M_2} \\\\[2ex]\n z &= \\frac{N^2}{K_1K_2 + M_1M_2}\n\\end{aligned}\nlooks nice to me but you can adjust the vertical spacing to suit you.\n. I don't know anything about Sphinx but you can use repeated \\cr in KaTeX\n\\begin{aligned}\n x &= \\frac{K_1M_2 - K_2M_1}{K_1K_2 + M_1M_2} \\cr\\cr\n y &= \\frac{K_1M_1 + K_2M_2}{K_1K_2 + M_1M_2} \\cr\\cr\n z &= \\frac{N^2}{K_1K_2 + M_1M_2}\n\\end{aligned}\n. You are right it's my mistake! I had this Javascript line \ntxt = txt.replace(/\\\\textbf\\{([\\s\\S]+?)\\}/g, '<strong>$1</strong>');\n in a page that was originally written using KaTeX version 0.6.0. Removing that line does indeed render \\textbf as boldface with 0.7.0.\nIs the live preview at https://khan.github.io/KaTeX/ still using 0.6.0 as it would be a useful place to double-check problems like this?\nThanks. Given that \\textbf does work correctly and that the live preview now supports 0.7.0 this can be closed.. There are likely to be a number of ways of simulating this. Here are just two of them:\n```\n\\phantom{\\begin{pmatrix}a\\b\\end{pmatrix}}^{\\normalsize\\beta}{\\normalsize\\alpha}\\begin{pmatrix}a&b\\c&d\\end{pmatrix}^{\\normalsize\\,\\delta}{\\normalsize\\,\\gamma}\n\\begin{matrix}\\beta\\[2ex]\\alpha\\end{matrix}\\begin{pmatrix}a&b\\c&d\\end{pmatrix}\\begin{matrix}\\delta\\[2ex]\\gamma\\end{matrix}\n```\nand the 2 methods give respectively:\n\n. ",
    "senshu": "\nIt should include a nonbreaking space\n\nOK. I sould have tried the demo before.\nMy equations are embedded in Markdown files. First, all equations are converted to HTML, then, marked is run on the resulting files.\nActually it seems that the marked lexer converts non-breaking spaces to ordinary spaces.\nI suppose that there would be no problem if KaTeX generated an HTML entity instead of a plain character.\nBTW I have also tried to run marked first but other issues arise since TeX source is incorrectly processed as Markdown in some cases.\n. Thanks for taking the time to answer. I agree that the issue is in marked, not in KaTeX (the author of marked has a different opinion though: https://github.com/chjj/marked/issues/363).\nI will try to find a solution that fits my workflow. Unfortunately, I already have a large document base that relies on marked and I'm not ready to switch to another markdown processor yet.\n. ",
    "tokiloki": "Kevin, I was getting some error on released version then I switched to github version and now I tried can not reproduce it on release version) Maybe we do not need this request in this case)\n. ",
    "varunagrawal": "Hi, thanks for the great work on Katex! It is becoming my go to tool for scientific writing for the web.\nI wanted to ask if there is any update on the stand-alone tilde symbole ~, since a lot of boolean math and probability equations use it. I don't know how hard it would be to include it though.. \\sim would be the right thing! Thank you @edemaine.. ",
    "utkarshrai": "Hi, This is currently the only issue labeled \"good first issue\". I would like to take this. Thinking of adding few popular names in the main ReadMe and add a link to a gist containing all the other names.. Is this still on? I would like to work on this.. ",
    "willymcallister": "Please include spinningnumbers.org. . You are right about the source code I put in my original message. The comma's should all be \\,\n(aside: That line of source code came was extracted by the copy-tex contributed extension. The back slashes didn't make it into the pasted text.)\nThe code is as you suggested:\n$\\dfrac{1}{Rb}=\\dfrac{\\dfrac{1}{R1\\,R3}}{\\dfrac{R2\\,R3}{R1\\,R2\\,R3}+\\dfrac{R1\\,R3}{R1\\,R2\\,R3}+\\dfrac{R1\\,R2}{R1\\,R2\\,R3}}$\nMy point is the tight spacing where the minor fractions crowd the major fraction line (example: the space below R1 R3 in the numerator). The major fraction has very little spacing above and below the major fractionline, in contrast to the minor fractions that have significantly more space.\nIn the minor fractions the spacing to the fraction line is larger, but not symmetric. The numerators float higher above their short fraction lines than the denominators below the fraction line. \nWhen the major fraction is composed, the top and bottom are mashed close to the major fraction line.\nI'm glad KaTex matches LaTeX. Since that is always a key objective then this observation is perhaps more about LaTeX and should be put aside. \n. I added this at the end of katex.css (same as you suggested, without the \"!important\").\n.katex-display > .katex > .katex-html > .tag { \n  left: 0; \n  right: auto; \n}\nThe corresponding html in my article.md file is, \n```\n\\[\\tag{lo} z = 3\\]\n\\[\\tag{hi} x+y^{2x}\\]\n```\nThis produces a centered equation with the tag on the left, as shown in this screenshot,\n\nMy goal was to have the equation on the left (not centered), and the tag on the far right. I did this by removing the css above and changing one line in katex.css, line 966,\n994 .katex-display > .katex {\n995   display: block;\n996   text-align: left;     //changed from center to left, WMc\n997   white-space: nowrap;\n998 }\nAchieving the goal,\n\np.s. My site is at github-pages, created by jekyll. Here's how I call renderManInElement. \n<script>\n    document.addEventListener(\"DOMContentLoaded\", function() {\n        renderMathInElement(document.body, {\n            delimiters:\n            [{left: \"$\", right: \"$\", display: false},\n             {left: \"\\\\(\", right: \"\\\\)\", display: false},\n             {left: \"\\\\[\", right: \"\\\\]\", display: true},]\n        });\n    });\n</script>\np.p.s This \\tag function is a breakthrough for my use of Katex. The ability to identify equations is going to make online discussion so much more productive. Thanks for this gem of a program.\n. The amsmath package has a command fleqn, \"flush left equation\". This puts display equations on the left rather than centered. But: fleqn may be a mode for all equations rather than per-equation. There is also an flalign that seems similar but probably with different side effects. You have much deeper understanding of the arcanery within Latex.. ",
    "ccreus": "In case you find it relevant, we are happy users of KaTeX for the exercise statements in RACSO (an online judge used in the subject \u00abTheory of Computation\u00bb at the Polytechnic University of Catalonia). ",
    "Cirran": "Sorry, I don't need displayed equations. For them I can add {left: \"$$\", right: \"$$\", display: true} or use \\displaystyle command. I need only inline equations.\n. @kevinb7 Thank you, the wrapping them into block <div style=\"line-height: 2.75;\"> ... </div> has helped me. Sorry for troubling.\n. ",
    "jeffeverett": "@kevinb7 Here's my understanding: in KaTeX, all operator functions have a limits property that  determines whether the superscripts and subscripts are placed to the right of the base node or above and below the base node. Functions like int have a default limits property of false and functions like sum have a default limits property of true. \\limits and \\nolimits have the power to alter these defaults and the existing rendering system takes care of the rest. I see no difference between the TeX output of an expression like \\int\\limits^2_3 3 and the KaTeX output of the same expression while using my changes. If there are subtleties of the \\limits and \\nolimits functions that I'm unaware of, I'd be happy to correct my implementation.\nIf the above is correct and the new limit-controlling functions add no functionality to the actual renderer, should I still add a screenshot test?\n. @kevinb7 I have added a screenshot test for the limit controls.\n. @kevinb7 Good suggestions. That should make this PR more compact. I'll get on this soon.\n. @kevinb7 I implemented your suggestions. I think the patch is a lot cleaner now.\nI also added the two new properties to the readme file.\n. @spicyj I'll avoid using abbreviations in future contributions. Would you like me to change the option name for this one as well?\n. @xymostech No problem. Just changed the == to ===.\n. ",
    "bshlgrs": "For what it's worth, I would find \\class (or \\cssId) extremely helpful for what I'm working on. It appears that there have been a whole lot of PRs trying to fix this issue, but none of them have been merged.. ",
    "blaiprat": "I've been checking the scripts, I'm not fluent with python, but I'll give it a try.\n. Thanks for merging the pull request\n. Ok, added the missing semicolon and now it's passing the checks. Thanks for pointing me to the right direction @xymostech :)\n. ",
    "invkrh": "I find responsiveness is a big problem here.\nFormules viewed from mobile break all responsive design.\nThey are too long, the view point is auto scaled to adapt these formulas.\nI can not shorten the width of the formulas by setting width to a smaller value.\nReally want to know any workaround.\n. @mbourne \nThank you for the idea using the horizontal scroll bar and overflow.\nAlso, I make the bar visible all the time.\nThe workaround really works.\nLooking forward to the responsiveness of Katex. =)\n. The equation env has not been implemented yet...\nBut the aligned* is implemented according to the wiki page: https://github.com/Khan/KaTeX/wiki/Function-Support-in-KaTeX\nIt does not work neither.\n\\begin{aligned}\na&=b&c&=d\\\\\ne&=f\n\\end{aligned}\nIt gives No such environment: aligned* exception\nI also tried array.\n\\begin{array}{ccc}\na&=&b&c&=&d\\\\\ne&=&f\n\\end{array}\narray env works.\n. It seems that aligned is not recognized by the environment.\nhttps://github.com/Khan/KaTeX/blob/master/src/Parser.js#L428\n. Thank you for the clarification. =)\n. Thank you. It works. I find the class name in the document.\nI should have been more careful.\n. Yes, it is resolved.\nThe issue can be closed\n. ",
    "hagenw": "In principle the proposed css resolution works. I'm using the following at the moment:\ncss\n.katex-display > .katex {\n    max-width: 100%;\n}\n.katex-display > .katex > .katex-html {\n    max-width: 100%;\n    overflow-x: auto;\n    overflow-y: hidden;\n    padding-left: 2px;\n    padding-right: 2px;\n}\nBut it can lead to some unwanted consequences.\nNormal screen size:\n\nSmall screen size with overflow scrolling:\n\n. ",
    "SamLau95": "We'd like to replace MathJax with KaTeX for a probability textbook at Berkeley: https://textbook.prob140.org/\nThe line breaking issue is currently a blocker for us since we've already written a bunch of long equations that KaTeX cuts off, for example:\n\nWe are currently using MathJax's automatic line breaking functionality (http://docs.mathjax.org/en/latest/output.html#automatic-line-breaking) which gives a reasonable-looking output for these cases:\n\nWe can get around this with using:\ncss\n.katex {\n  white-space: normal;\n}\nWhich gives:\n\nAs you can see, this doesn't produce great output.\nIt would be great for us if KaTeX could support a rendering option like MathJax's that breaks long block-level equations in a reasonable way.. ",
    "ItsMeSousuke": "Is there any progress with breaking lines for too wide formulas?. ",
    "eugene-eeo": "@lukeburns you can check out #251 for rendering to canvas. I'm also very interested in this, but it seems that currently the direction, AFAIK is heading towards refactoring the core and trying to keep it small and performant, so it seems that we'll have to wait a bit longer for this feature to be implemented \"properly\". Currently I am doing it with html2canvas and trimming the canvas to get rid of the whitespace. This is a bit of a hack but it's the best currently.\n. It's listed in the Function Support wiki page.\n. ",
    "adituriya": "I don't know if this is the recommended way, but on my site, I simply added the following CSS:\ncss\n.katex {\n    font-size: 1em !important;\n}\nI think the default is 1.21em. Perhaps this works with some font pairings, but in my case it was too large.\n. ",
    "MasonMcGill": "Thanks! I'll do that. I'll let the developers decide whether they want to document this (maybe it's already documented and I couldn't find it?) before closing the issue.\n. ",
    "tolmasky": "This seems unrelated to Tonic, it reproduces in a normal plain html file for me:\n<html>\n    <head>\n        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.3.0/katex.min.css\">\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.3.0/katex.min.js\"></script>\n    </head>\n    <body>\n        <script>\n            document.body.innerHTML = katex.renderToString(\"x^{2} + \\\\frac{4}{3}x + 4\", { displayMode: true });\n        </script>\n    </body>\n </html>\nI can open a new bug \"fractions are broken\" if you prefer.\n. Is HTML5 a requirement? If it is I'm happy to consider it fixed as missing doctype.\n. Yup, pushing a fix to tonic now. Thanks!\n. Yeah the problem here is that that warning doesn't happen on the client if its rendered on the server (which is what was happening here). It'll actually be kind of a common case if you do lots of server rendering of stuff as opposed to relying on it coming in on the client.\n. ",
    "Nateowami": "Thank you! Sorry, I should have grabbed FontForge and looked to see if there was more metadata that gnome-font-viewer didn't show. For some reason I didn't think of that.\n. ",
    "zhy0": "So, what's the current status on \\tag?\n. ",
    "pennestri": "https://github.com/Khan/KaTeX/issues/571. Dear Kevin,\nplease look into the code that I wrote and posted  on \"Issues\"\nand you will recognize that I already solved the problem.\nhttps://github.com/Khan/KaTeX/issues/571\nYou are welcome to use the code in a new version of KaTeX.\nLet me know if you wish more help from my side.\nSincerely\nPietro\n2017-08-10 4:14 GMT+02:00 Kevin Barabash notifications@github.com:\n\n@zeeshansayyed https://github.com/zeeshansayyed no updates we\ndefinitely would like to support \\tag and equation number.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/Khan/KaTeX/issues/350#issuecomment-321431253, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AEcWB3xFhx0rvO7bH2gQLy_E7GIfLdIdks5sWmeIgaJpZM4F7UwO\n.\n. \n",
    "zeeshansayyed": "Any updates on this issue?. ",
    "jdhao": "Is automatic equation numbering incorporated into katex?\n. ",
    "daniel3735928559": "Thanks for the pointer--the ord+op/bin+op difference was indeed the cause.  I have hacked it further (partly to get it working and partly to see what a more legitimate \\cursor command would ultimately require) and ultimately succeeded in getting the desired behaviour.  The changes are pretty small, but also fragile and unpleasant.  I've documented them by prepending notes to the README at https://github.com/daniel3735928559/guppy/tree/master/lib/katex\nOne generalisation, which may or may not have any use outside this situation, would be another group type for something that doesn't affect the surrounding elements.  (Maybe this would be useful to help get \\clap working?)\n. I am indeed still interested!  I haven't looked at that PR yet in depth; while a compile-time plugin system still requires me to retain a KaTeX source module (and could in principle lead to a bunch of out-of-date such modules in the wild, especially if a plugin is very widely used like \\class might be), at least I wouldn't have to rebase these changes constantly so it's an improvement over the current state.  \nIf this is the way forward then I can update this PR when it is ready.. +1 on this effort.  Just popping in to say, in case it is still useful to know: The modifications to KaTeX required to support the editing in guppy are exactly: \n\nAn \\xmlClass element to add classes to the generated HTML.  \n\nThis is used to add classes to all rendered HTML elements that correspond with their positions in the source XML structure.  This, in turn, is used to convert DOM events (mouse movement and clicks) into the appropriate edits on the XML source.\n\nA \\cursor element to create a cursor line that has zero effective width and that doesn't affect the spacing of elements around it.  (Could possibly be bodged with special CSS rules for a .cursor class, as well as appropriate applications of \\xmlClass and rule--I haven't explored this.)\n\nI've had to constantly update my fork of KaTeX to keep up with master, so you can look there to get an idea of what is involved.  The process is not usually that complex, but I definitely support any effort toward a plugin architecture or other possible integration of features that lets KaTeX do these things natively.. Referencing the discussion on #1792, it is unclear to me how to access from contrib the KaTeX internal objects currently used by this code.  Currently, these are: \n\ndefineFunction and ordargument from defineFunction.js\nbuildCommon from buildCommon.js\nmathMLTree from mathMLTree.js\nbuildHTML.js\nbuildMathML.js\n\nSome of these like defineFunction I can expose as katex.__defineFunction, which seems consistent with the mhchem example. And indeed, an approach is just to likewise expose all the other functions I need through katex. I'm happy to do this, but am skeptical that exposing more fragile internal interfaces is a good idea and so am curious what the recommended approach would be?\n(For instance, some, like ordargument, I could in principle just reimplement, and some may be accessible by object spelunking, although I didn't identify any obvious paths.). It mostly does--I just had the impression that PR was stalled/out-of-date. I will check if the makeSpan method in #1437 also suffices for my purposes in place of makeFragment and if so, I look forward to its incorporation! \nTwo semi-related (and currently somewhat idle) questions: \n\n\nSince in general I find it useful to be able to extend this library, what is the current story for how to reference/expose KaTeX internals for use in extensions found in contrib?\n\n\nOnce the safe/unsafe business is sorted out, is there appetite for a more general HTML extension \\xmlAttr (or whatever it would be called) for setting general attributes on the element spans? . Apologies--After some further Googling, \\hspace{0pt} actually accomplishes exactly the same thing in standard LaTeX and, in KaTeX, behaves exactly like this extension at the DOM level.  In particular, this PR is entirely redundant with existing functionality, thus I will close and only need #1791. Is that also preferred to be in contrib?. \n\n",
    "crepererum": "My current setup is to type some text using Markdown which sometimes contains math, rendered by the auto-renderer. Escaping backslashes in Markdown is not a problem, but dealing with </> is a nightmare, so the proposed PR would simplify this a lot.\nSure you could extend the Markdown parser to handle this step, but for my app (Ghost) there is currently no way to do this without running your own fork (ref https://github.com/TryGhost/Ghost/issues/1724).\nSo the auto-render extension might work, but I think that the HTML-parser of the browser will already be a problem. What I can do instead is using &lt;/&gt; when typesetting the math, because the auto-renderer uses textContent to get the data (https://github.com/Khan/KaTeX/blob/master/contrib/auto-render/auto-render.js#L55) which will included the transformed </>.\nIf the &lt;/&gt;-workaround becomes somehow official, we might want to add this to the documentation of the auto-renderer so that users don't have to search through the source code to find this implementation detail.\n. @kevinbarabash done, added tests for that.\n. @kevinbarabash sry, fixed now.\n. ",
    "Newman101": "Just a quick one: Should this be relation or accent? There is already rightarrow defined: \njavascript\ndefineSymbol(math, main, rel, \"\\u2192\", \"\\\\rightarrow\");\nAlso, which unicode shall I use? It seems that \\xrightarrow is AMSMath symbol.\n. So basically if I got this right: adding support of xrightarrow to KaTeX requires u2192 as an accent. If someone can verify this, so I can create a PR.\nThank you.\n. Ok - what about the unicode? Is it u2192?\n. CLA signed. I will update the link label ASAP.\n. Link label updated. :)\n. ",
    "sheljohn": "@Newman101 Any news about this? Seems like it was on the right track but no news for almost two years :/ Is this being dropped? Can we help somehow?. ",
    "miestasmia": "I think this might be part of a larger Unicode support issue that'd need to be resolved. If need be, I can try test it in other browsers as well.\n. Can confirm it happens in Firefox 41 as well as Opera 31 too. I'm on GNU+Linux so I can't test IE or Safari.\n. I'd just like to add that foreignObject is horrendously broken in WebKit and blink. Positioning is completely off.\nE.g. see https://stackoverflow.com/a/10353045/1248084\n. ",
    "t-k-": "I also spot this warning, the square box displays correctly. No idea how to suppress this warning.\n(my browser: Chromium 52.0.2743.85)\n. Thank you for your reply. I tried using your CDN: https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.js\nBut not working as expected, it has a ParseError:\n\nParseError: KaTeX parse error: Expected 'EOF', got '\\qvar' at position 5: \\qvar\u0332{x}\n\nHere is my code snippet:\njavascript\ntry {\n    katex.render(\"\\\\qvar{x}\", ele, {\n        macros: {\"\\\\qvar\": \"\\\\color{blue}\"}\n    }); \n} catch(err) {\n....\nWhat could probably go wrong?\n. I see, your CDN is not the latest, after building master branch code, I get it working. Sweet!\nThank you for your help! I will close this issue.\n. BTW. I see no documentation on KaTeX, is there any that I am not aware of?\nIf not, why not host a sphinx repo/site just like what MathJax does? I just learned how to setup sphinx, so tell me if you need my help.\n. I see, so I do not find anything related to the macros option. \nWhat I mean a sphinx site is something built with sphinx documentation (like this one used by MathJax), it is easy and quick to setup and is open to public editing using Github pull request.\n. ",
    "Menci": "\\notin also trigger the bug.\nBut it displays correctly.\n. ",
    "upupming": "If I write Chinese in Math code, I will get this warning, too:\n\n. Thanks, I will open another issue!. Thanks, the contrib code helps and it is just what I need! Now I'm going to close it.. ",
    "jbaayen": "@kevinbarabash @mbourne, these sound like steps in the right direction!\nWe're looking at an out-of-browser application though, where SVG is the graphics format. Given an intermediate representation, we may be able to develop the SVG output ourselves.\n. ",
    "jpatel3": "@mbourne Are you using foreignObject? how are you referring the position and element in SVG?. ",
    "spontaliku-softaria": "My vision of this issue as far as I currently understand it:\n KaTeX parser generates CST which is potentially less readable than AST. It contains more data than external user (author of an editor for example) absolutely needs to provide. \nTrivial example: \\\\frac node has type, numer and denom fields which are semantic and are needed, but also hasBarLine, leftDelim, rightDelim and size whose necessity may not be obvious to external user.\n Both buildHtml and buildMathML accept CST.\n An editor (#809) most likely would want to get rendered HTML from AST.\n There are use cases for bare parser. I guess, this cases would want AST instead of CST too.\nSo the task is to provide an AST and a way to get CST from AST while keeping changes minimal and backward-compatible. An explicit list of all AST nodes should be provided to simplify tree building from outside of KaTeX for external user.\nAlso I'd like to avoid changes in buildHtml and buildMathML if possible.\nThus I propose a plan:\n Make a set of classes representing AST nodes. Filed type of ParseNode and file functions.js are sources of information what classes are needed. Example for op (\\sin, \\max, \\int, \\mathop, etc.):\n  javascript\n  class Operator extends Node {\n      constructor(command) {\n          this.command = command;\n      }\n  }\n Make a AST->CST converter. Here I see some options:\n  * Make an explicit converter which basically would be functions.js rewritten. Typical code in such converter:\n    ```javascript\n    function convertOperator(op) {\n        switch (op.command) {\n            case \"\\arcsin\":\n                return {\n                    type: \"op\",\n                    limits: false,\n                    symbol: false,\n                    alwaysHandleSupSub: false,\n                    body: op.command,\n                };\n        case \"\\\\det\":\n            return {\n                type: \"op\",\n                limits: true,\n                symbol: false,\n                alwaysHandleSupSub: false,\n                body: op.command,\n            };\n    }\n}\n```\nAny drawbacks? Personally I like this way the most because it provides clear point where AST is converted to CST.\n\n\nSame as explicit converter, but return instances of AST classes themselves. Then build*.js could use some classes power to be more readable.\n  I'd like to avoid such intrusion into builders code, at least on first step, but I think I could do it too.\n\nAdd all variables from CST currently sitting in ParseNodes into local variables of build* functions. Like this (buildHTML.js):\n  ```javascript\n  groupTypes.op = function(group, options) {\n      const symbol = [\"\\int\", \"\\iint\", \"\\iiint\", \"\\oint\", ...]\n          .indexOf(group.value.body) >= 0;\nconst limits = [\"\\det\", \"\\gcd\", \"\\inf\", \"\\lim\", ...]\n      .indexOf(group.value.body) >= 0;\n// rest of the code\n  }\n  * Cheat. Move all CST variables into functions of objects returned in `function.js`:javascript\ndefineFunction([\n    \"\\det\"\n], {\n    numArgs: 0,\n}, function(context) {\n    const op = new Operator(context.funcName);\nop.limits = function() {\n    return [\"\\\\int\", \"\\\\iint\", \"\\\\iiint\", \"\\\\oint\", ...]\n        .indexOf(group.value.body) >= 0;\n};\n\nop.symbol = function() {\n    return [\"\\\\int\", \"\\\\iint\", \"\\\\iiint\", \"\\\\oint\", ...]\n        .indexOf(group.value.body) >= 0;\n};\n\n});\n``\nThen modify build*.js to use that functions. Strange option just for variety.\n* Finally, modifyparseTree` usages to include AST->CST conversion.\n\n\nI see subsups are special. Should it be treated in a special way? Any more similar cases?\nI suppose that for any symbol or funciton all CST-exclusive data desired for build*.js could be computed from AST data. Is it correct? In other words, is there any parser state which is added to ParseNodes outside of functions.js and is used in rendering?\nRegarding errors reporting: as far as I see, explained plan do not interfers with it at all.. I thought about it a bit more, and I think my statement about computing CST from AST is false. Or, at least, I should suppose it as being false. \nSo, I think I should start with explicit list of tree node types and AST->CST converter. parseTree usages should not be altered. Instead, a new way to render should be added so external user would be able to render AST without evaluating all attributes used by renderers.\nI'll do some code soon and I'll show what I'm trying to achieve.. I'm trying to define CST right now here. It's supposed to be used in our editor prototype as an interface between editor syntax tree and Katex parsing tree because the latter is filled with parsing logic which we're not interested in.\nFirstly I've tried to extend ParseNode but stuck in Parser.js. So now I'm doing it on the side - CST is built manually by editor, ParseNodes are built by CST's toParseNode, ParseNodes are fed to Katex to render. If you find this version of CST useful, I would like to try to use it everywhere instead of ParseNode.. @kevinbarabash anyway, ParseNode containts more than external user would want to provide. Lexer for example. So yes, looks like two ASTs.\nI was going to evaluate how an AST for external user might look like after I finish current AST and get used with all variants of ParseNodes. But the one I'm doing now should be useful, just not the most convenient.\nAlso I'm not sure yet how to avoid passing math/text mode from external user and evaluate it from the tree - I guess this logic is not simple.\nLooking at #892, wouldn't it be easier to fix this task before? Because the one working on #892 would need to do IR implicitly anyway to be able to reason about ParseNodes.. Oh sorry I misread #892 - by some reason I've decided it's about migrating to HAST.. > My preference here is move away from CSS solutions to more programmatic solutions.\nI believe synchronous rendering is the feature which makes Katex possible to use in an editor. If you want to make some parts of rendering programmatic, please don't lose that.. I believe editing tree is better approach because it would allow to express editing as tree transformations. They could be done in various sane and expressive ways. In general, I think having good tree would be better for most external usages of Katex like #800 or #554. \nSo, this task looks to me like a successor of #376. I'd like to make a proposal of changes to achieve #376 and then for this task.. I see there is existing support for arbitrary attributes in constructed HTML and MathML nodes. So, naive idea how to implement this issue:\n1. Add field attributes to a tree node which will be evaluated in #376. Right now it is ParseNode. It should be an object which stores attribute names and values (primitives only).\n1. Modify every method in buildHTML.js and buildMathML.js to include attributes from parsed nodes. In particular, buildHTML methods should set attributes field to spans built by buildCommon.js. buildMathML methods should set attributes on MathNodes constructed in mathMLTree.js.\nIn my earlier experiment I've tried to avoid changes in build*.js when possible. I've tried to pass attributes through buildHTML to makeSpan, but in the result there was a lot of duplicating attributes in the DOM (like katex-id=\"1\" presented multiple times in fraction markup). I think this would be inconvenient and there must be only one attribute in root node of every rendered ParseNode.\nSo, what am I missing and is there some better way than modifying each method of build*.js? It doesn't look too hard to me, but still.. @PeterBocan I've seen it. Some nice ideas here. Not evaluated how much Katex is altered tho.. First attempt to do attributes propagation: #835. I think this could be done independently from #376 (still thinking on tree structure there).. [clabot:check]. Oops, forgot to push one commit. Should be ok now.. About improving test: last time I was doing something with trees I had nice experience with QuickCheck-style tests. I used quickcheckjs and I was able to detect huge amount of bugs in my tree transformations. I could add some infrastructure for generating Katex tree nodes suitable for tests. Then I'll add attributes testing for all types of nodes simultaneously.. Still now sure why tests fail. I was able to run them locally and they fail locally too, but I shouldn't change actual rendering.. @ronkok I've tried brach with your PR. It is fixed indeed, but it introduces angother change - distance to left symbol is changed.\nFor example \\sin\\llap|1 from khan.github.io/KaTeX:\n\nAnd the same in your brach (if I built it correctly):\n\nI don't know which one is correct, just noticing.\nI believe second breaks usage of lap with | as a cursor (it was mentioned in some issue) because distance between symbols change while cursor is moving.. @ronkok thanks, now it works right in most places. But I stepped on another case where it looks wrong - \\sqrt{\\mathclap|a\\mathclap|}\\mathclap| :disappointed:. Here is your branch:\n\nHere is original:\n\nIn particular, looks like it is last \\mathclap| who is misaligned - it overlaps a while being outside of \\sqrt. Adding another symbol in the end fixes it:\n\nUPD: I see this problem only in Chrome (Linux and Windows). Looks like it is fine in Firefox.\n. If this would be done, would it be possible to examine relative positions in the same way as https://github.com/Khan/KaTeX/wiki/Examining-TeX#boxes?. What would be the best way to fix this? Does it need to be fixed in the first place?. @kevinbarabash it's about HTML builder: https://github.com/Khan/KaTeX/blob/f4e24183d6d8f302e55bd0d588468489c2ba4e27/src/functions/delimsizing.js#L183 builds using delimiter.js and built nodes are never seen by buildGroup.. General idea is that I supposed buildGroup is called for each group, which allows unified modifications for every tree node built by parser (in my case parsed tree is external). Please correct me if this thing about buildGroup is not the case.. Sorry I wasn't specific enought and obfuscated the problem. Yes, inner expression is fine, but the problem is left and right delimiters themselves: \\\\left and \\\\right both have delim which is normal tree node but it is being \"unwrapped\" (leftright handler returns only the symbol instead of the whole node) and htmlBuilder uses delimiter.leftRightDelim which (I believe) does not call buildGroup (because it has no group at all due to unwrapping).\nSo, the one who wants to attach some data to \\\\left( or \\\\right) is unable to do so because data from nodes for ( or ) is not used.. This issue seems to be super specific to one use-case.. @edemaine I recently faced same task (did rendering Katex to virtual DOM) and I want to warn you that it is not compatible layer because h implementations have different interfaces. They accept attributes, SVG namespace, style and whatnot differently. Original hyperscript interface which everyone follows is not complete (does not include attribues and SVG so people implement it as they wish) and I believe you cannot have one implementation for all.. I moved attributes logic into post-processing funciton. Currently it is set to Options.postProcessor, which makes Options non-serializable. Should it be serialzable? If yes, I can move post-processing into some wrapper around Options. Or into signatures of every method of buildHTML.js, but I guess it would be a bit dirty.\nSimple numeric IDs are currently assigned inside test. I can make an option to set them automatically.. Not sure I got it about node. I've made it just to put common code here. Maybe the name baseNode is misleading?\nBut I got it about HAST. I guess you would want visitor now because I already see svgNode, pathNode and lineNode.. I think sizing and color could be treated somehow sane in an editor, but mod would be bigger problem because it changes structure and semantics. I've reverted chages for former fragments. Maybe I would be able to say more about it later when we have an actual editor.. Oh, I get it now. I'll move it to helper function.. OK, I'll stop spamming you with comments.. That's OK to me since I'm not fully in context of your plans. It's just we are experimenting with editor and I need to do all this anyway, here or in a private fork.. ",
    "davidanthoff": "I'd be curious if there is some general update on this issue? Totally understood if no one has time for it, I'd just be interested where people see that in terms of a roadmap right now.. ",
    "YakovL": "Yeah, sure, thanks to all other contributors as well.\n\nif the math contains only characters where we don't have the height\n\nthis sounds unlikely, at least in those cases that I've mentioned. Moreover, I think in real cases either latin letters, digits or simple symbols like + (or at least =, >, ~, \\rightarrow or another \"expression-making\" symbol) will always be present in the base line. Even in an expession like\n\u03b3 = \u03b1^\u03b2\nthere's =. So if I get you right, the height measure doesn't seem that problematic.\n. Ah, you're right, in inline expressions that can be the case..\n. So, basicaly when a supported symbol is used, its height is calced from the known symbol size? What's the basic length? How the size is made fit to the non-math environment? (if it is) Is it a problem to set the size of \u03b1 or \u03b2 the same as an ordinary letter (\"a\")?\nSorry, as I don't know technical details, I'm not sure what are the right questions to ask, neither I understand in what units different sizes are measured.\n. As an additional option: there may be a setting that sais \"make the size of these symbols equal to that of 'a'\". For instance, for Greek alphabet that may be either \"\u03b1\u03b2\u03b3\u03b4\u03b5\u03b6\u03b7\u03b8\u03b9\u03ba\u03bb\u03bc\u03bd\u03be\u03bf\u03c0\u03c1\u03c3\u03c2\u03c4\u03c5\u03c6\u03c7\u03c8\u03c9\" or \"\u03b1\u03b5\u03b9\u03ba\u03bd\u03bf\u03c0\u03c3\u03c4\u03c5\u03c9\", depending on what we have to understand as \"the same size\" (\"\u03b4\u03b8\u03bb\" may be considered as \"the same size as 'b'\", \"\u03b7\u03c1\u03c2\u03c6\u03c7\u03c8\" -- as \"g\", and \"\u03b2\u03b6\u03be\" seem not to have an analogue in English -- that would be 4 settings; capital letters should all have the same size, that of \"b\" = that of \"B\", look at: \"\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039a\u039b\u039c\u039d\u039e\u039f\u03a0\u03a1\u03a3\u03a4\u03a5\u03a6\u03a7\u03a8\u03a9\").\nSuch setting will allow to have this user-defined and seems as an ok solution in many cases.\n. @kevinbarabash So, could you explain, what exactly is needed to display one certain letter (say, '\u0432') of the same size as 'v'?\n. ",
    "sassanh": "@kevinbarabash even though:\n\nCurrently KaTeX output is a browser-independent pure function, right?\nThat's a very nice property, for server-side rendering, archival etc.\n\nand this is indeed great to have KaTeX a pure function, I guess it'd be useful to support in browser glyph measurement for unknown glyphs/fonts. It can save measurements for each glyph in local storage in user's browser to reduce further render time. This way we can support all fonts and all unicode characters. It can be an optional config of KaTeX.. @pouriaMaleki were you able to use Persian characters in KaTeX?. @HosseinAgha Thanks. Currently I had to turn back to MathJax but I'm looking forward for your pr.. ",
    "jebob": "Found this issue via google, the list of supported functions is now visible here: https://katex.org/docs/supported.html. ",
    "mathijshenquet": "Yes further testing indicated the problem only occurs when using \\mathbf. So the full text case should be \\mathbf{x}_A, \\mathbf{y}_A. Probably because the new \\mathbf block 'forgets' that it is text.\n. @kevinbarabash I signed the agreement. Sorry for not responding earlier (I was away on holiday).\n. ",
    "digitalheir": "I can confirm this issue. \nThe span containing the subscript under span.vlist > span has different CSS assigned to it: the top value for \\mathbf x_A is 0.15em, and for \\mathbf y_A it's 0.24444em. \nChanging the second to 0.15em makes the text look fine.\n. ",
    "jluttine": "I'm using this:\n<link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css\">\nIs there a link which always points to the latest release of katex.min.css?\n. Oh, Nikola's template uses version 0.3.0..\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/KaTeX/0.3.0/katex.min.js\">\nThat should be updated. Is there a link to the latest release which could be put to templates so that it doesn't need to be updated in the template constantly? Alternatively, Nikola could provide a setting in conf.py to specify which version to use, that'd be ok too.\n. ",
    "williamstein": "I just did a quick test at https://khan.github.io/KaTeX/ and it looks liek $\\oint$ is now supported.  Can somebody close this issue?. ",
    "maryfries": ":+1: \n. It does not work. \nI'm not familiar with jsbin. Can you provide more details?\n. I'm still not sure what you want me to do. If I put that code on my page it works.\nBut < s p a n   c l a s s = \" k a t e x \" > n   & g t ;   2 < / s p a n > does not work on my site, though everything else in KaTeX has been fine.\n. Looks like we have a local copy of katex.min.js and katex.min.css\nAlso we have this:\nllab.mathDisplaySetup = function () {\n    var cssFile, jsFile, css, js;\n    cssFile = llab.paths.css_files.math_katex_css;\n    jsFile  = llab.paths.math_katex_js;\n    css = getTag('link', cssFile, 'text/css');\n    css.rel = \"stylesheet\";\n    js = getTag('script', jsFile, 'text/javascript');\n    $(js).attr({'onload': 'llab.displayMathDivs()'});\n    document.head.appendChild(css);\n    document.head.appendChild(js);\n}\nllab.displayMathDivs = function () {\n    $('.katex, .katex-inline').each(function (idx, elm) {\n        katex.render(elm.innerHTML, elm, {throwOnError: false});\n    });\n    $('.katex-block').each(function (idx, elm) {\n        katex.render(elm.innerHTML, elm, {\n            displayMode: true, throwOnError: false\n        });\n    });\n}\n. That worked!! Thanks!!!\n. ",
    "chmln": "Hate to +1, but lack of modulus is a significant drawback\n. ",
    "phuongntit": "Thanks. I have understood.\n. ",
    "kwangkim": "@kevinbarabash Webview is slow and I think that's why Facebook want to introduce RN.\n@xymostech That sounds great. If you give some instructions for developing  renderers, 3rd parties may make  many other renderers. \n. I just checked whether mathml affected or not by using \nvar katexNode = makeSpan([\"katex\"], [\n            htmlNode\n        ]);\nin buildtree.js\nAnswer is no.  Katex did not render html-code properly without mathml part.\nI do not know why it did not render well.\n. I did a simple tweak. I realized ionic + cordova did not render html properly. Instead, it rendered mathml correctly. I am not sure whether  ios webview+cordova has a bug. \nI slightly modified buildTree.js to test it with a RenderMode option.\nI think having a  rendering Mode option is a good idea for the future. \n```\nvar buildHTML = require(\"./buildHTML\");\nvar buildMathML = require(\"./buildMathML\");\nvar buildCommon = require(\"./buildCommon\");\nvar Options = require(\"./Options\");\nvar Settings = require(\"./Settings\");\nvar Style = require(\"./Style\");\nvar makeSpan = buildCommon.makeSpan;\nvar buildTree = function(tree, expression, settings) {\n    settings = settings || new Settings({});\nvar startStyle = Style.TEXT;\nif (settings.displayMode) {\n    startStyle = Style.DISPLAY;\n}\n\n// Setup the default options\nvar options = new Options({\n    style: startStyle,\n    size: \"size5\"\n});\n\n// `buildHTML` sometimes messes with the parse tree (like turning bins ->\n// ords), so we build the MathML version first.\n// var htmlNode = buildHTML(tree, options);\n// 'Html only mode'\nvar katexNode={};\nvar mathMLNode={};\nvar htmlNode={};\nif(settings.RenderMode ===\"MATHML\" ){\n    mathMLNode = buildMathML(tree, expression, options);\n    katexNode = makeSpan([\"katex\"], [\n        mathMLNode\n    ]);      \n}   else if( settings.RenderMode===\"HTML\" ){\n    htmlNode = buildHTML(tree, options);\n    katexNode = makeSpan([\"katex\"], [\n       htmlNode\n    ]);         \n}   else{\n    mathMLNode = buildMathML(tree, expression, options);\n    htmlNode = buildHTML(tree, options);\n    katexNode = makeSpan([\"katex\"], [\n        mathMLNode, htmlNode\n    ]);\n}\nif (settings.displayMode) {\n    return makeSpan([\"katex-display\"], [katexNode]);\n} else {\n    return katexNode;\n}\n\n};\n```\n. I used the  bower to install Katex which includes font files.\nI just put them in my index.html\n<link rel=\"stylesheet\" href=\"lib/KaTeX/dist/katex.min.css\">\n    <script src=\"lib/katex/dist/katex.min.js\"></script>\n    <script src=\"lib/katex/dist/contrib/auto-render.min.js\"></script>\n    <script src=\"lib/angular-katex/angular-katex.min.js\"></script>\nAs you saw above, it works perfectly with emulator, safari, chrome etc except an actual phone.\nSo I do not think it is a Katex bug.\n. @spicyj @xymostech You are right. Webview in ios was case sensitive.\n<link rel=\"stylesheet\" href=\"lib/katex/dist/katex.min.css\">\nIt works well on the phone.\nThank you very much.\nBy the way, I really hope KaTex supports React Native soon.\n. ",
    "YshadowZ": "@xymostech  Hello, do you have a date for this(build different renders) in mind?\n. ",
    "1seck": "Also interested here.\nAre there plans to render KaTex in RN?. Hi @Kevin:\nSo rather precompile as png or what would you suggest?\nRegards\n\nAm 03.03.2017 um 15:48 schrieb Kevin Barabash notifications@github.com:\nI don't know if it makes sense to use KaTeX's approach to typesetting for RN. KaTeX produces node heavy markup which would require a lot of Views in RN. I've heard that RN doesn't handle this case very well.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub https://github.com/Khan/KaTeX/issues/400#issuecomment-283972270, or mute the thread https://github.com/notifications/unsubscribe-auth/AHwdR14cAMxVQzeChOC4NP_NSggiGd-Gks5riCgigaJpZM4GpUg1.\n\n\n. ",
    "3axap4eHko": "Just released https://www.npmjs.com/package/react-native-katex. ",
    "FirdousNath": "how to render katex in webview? Kindly provide any code or tutorial link please !. ",
    "xiaokaike": "+1 please support  \n\n. ",
    "tleb": "~~Any update? I don't have the knowledge to help, sadly.~~\n~~I have found \\vec which works great! This can be closed I believe.~~ I'm using \\vec which works fine for me.\n. ",
    "vxba": "I'm just try that.\nthank you kevinbarabash !\n. I making tool can add and edit math formula.\nIt's same as here http://www.wiris.com/editor/demo/en/mathml-latex.\nDo you have a solution for this?\nthank kevinbarabash !\n. yes I see it but my problem is when use change the formula rendered by katex then change  the LaTeX Code too. Do you know a solution for me ?\nthank you sthoch!\n. Thank you so much kevinbarabash! \n. ",
    "jraimbau": "There are a series of similar commands, with other symbols, that should probably be dealt together with \\widehat, e.g. \\widetilde (for the tilda), \\overrightarrow and \\overleftarrow (for the arrows). \n. ",
    "Sukii": "Yes, it is more like \\overbrace{asdfghjkl} which works fine in MathJax (there you have something to start with).\nEven in classical LaTeX or MathJax the \\widehat doesn't work that well, see:\nhttp://tex.stackexchange.com/questions/100574/really-wide-hat-symbol\n. Trying to do it with raw KaTeX:\nhttps://github.com/Sukii/WeTeX\n... need to hack KaTeX to reverse engineer \\widehat etc as they use SVG stuff without class names. ",
    "sschendel": "We are not using \\displaystyle in this case.  We have javascript that pulls formula from img title attributes and replaces image with rendered content or falls back to image.  Attached is example of issue.  Tried render with displayMode=true.  That helps, but we'd like to keep the content inline, if possible.  We cannot change content, unfortunately.  \nhttps://gist.github.com/sschendel/f393c3ae70e722639d44\n. ",
    "jackparmer": "Yes, sorry for the lack of detail. here is a screenshot of the KaTeX rendering:\n\n(You can see the rendering online here: http://www.intmath.com/cg5/katex-mathjax-comparison.php) \nThe issue as @mbourne pointed out is the fraction overlapping. \n@mbourne Even without \\mathbf, I'm seeing fraction overlap in cross product notation:\n\n. ",
    "duluosheng": "Thank you for your answer @kevinbarabash @xymostech.\n. ",
    "mourad1081": "I am sorry to post something that has been closed since 2015 but Google brought me here and I wrote a little function (using jQuery) that does the trick (in my scenario). I use it to convert my Katex formulas to CKeditor : \n```javascript\nfunction htmlKatexToFormula(container) {\n    var formulas = container.find('span.katex');\n    for(var i = 0; i < formulas.length; i++) {\n        var originalFormula = $(formulas[i]).find('annotation').text();\n    if ($(formulas[i].parentNode).hasClass('katex-display'))\n        formulas[i] = '\\\\[' + originalFormula + '\\\\]';\n    else\n        formulas[i] = '\\\\(' + originalFormula + '\\\\)';\n}\n\ncontainer.find('.katex').each(function (key, val) {\n    $(val).replaceWith(formulas[key]);\n});\n\n}\n```\n. ",
    "pe8ter": "Yeah, this is a dupe. I would still say that it's confusing that the named maintainer of the npm project isn't Kahn, but oh well.\nClose away, Mr. McManus!\n. ",
    "oddhack": "Perhaps this link could be removed from the README until it's working - I just ran into this as well (also giving a \"ReferenceError: katex is not defined\" as well as the MathJax error).. FWIW we've just run into this as well trying to port some MathJax content. AFAICT the best option at this point seems to be a mass replacement of \\begin{align*} with \\[ \\begin{aligned} similarly for \\end.. N.b. here's the math I'm trying to render, extracted from the HTML for future reference: \n\\[ half = \\frac{1}{2} \\]\n\\[ f = \\frac{c}{{2^b - 1}} \\]\n\\[ max_{clamped} \\over {2^{(exp'-B-N)}} + \\frac{1}{2} \\]\n. @gagern if you still want me to try it I will, but it sounds like #607 is likely to be supplanted by #608. In the meantime we've figured out how to migrate over to HTML5 output, so our original problem that motivated the issue has gone away. That said, I'm really appreciative of the attention and fast turnaround my issues have received here - it makes us much more confident migrating to KaTeX knowing that the contributors are so active, so thanks, everyone!\nSince the XHTML problem is being tracked in other issues, and we no longer need it solved, it seems appropriate to close this and I'm doing that -  but feel free to reopen if your process needs this issue, of course.. I don't have any understanding of the technical issues behind not supporting rendering in XHTML mode, but will note that our use case is an asciidoc->Docbook->XHTML path, so basically this change would prevent use of katex in our specific situation until we could revamp the pipeline to target the html5 backend, which has been held up for other reasons (we are kinda hoping to migrate from mathjax and are evaluating the needed changes).. Closing this as there's a fix from #606 in the pipeline; in the meantime I did as @gagern suggested and used \\\\\\\\[0.5em] as a workaround. Thanks!. @gagern that makes sense, thanks. I am very uneducated in JS and the DOM.. ",
    "reagle": "I just tried the online version http://jsperf.com/katex-vs-mathjax/ and it fails. I'm a newbie, but this looks bad for your project when your own test can't complete!\nTesting in Chrome 55.0.2883 / Mac OS X 10.11.6. ",
    "kohler": "This is a duplicate of #534.. FWIW, I have a commit that depends on #567 (and #567 is actually required for a full fix). I hadn't made a PR yet because #567 is in process.\nkohler@6af1c96c523e4174374764291ea897b879ee9ce0. #533 is a different problem and requires a different fix. This PR has been updated with that fix.\n. Sorry @kevinbarabash Trying to fix/add tests\u2014I\u2019m no Docker expert. On my Mac with newly-installed Docker for Mac, dockers/Screenshotter/screenshotter.sh --verify seems to just hang. Should I expect that?\n. Docker for Mac doesn't support networking in the usual way, apparently. There\u2019s some stuff on their website about it. I had to supply both --selenium-ip and --katex-ip arguments, rather than/in addition to --container.\nThe current PR is failing two screenshot tests, LimitControls and SupSubLeftAlignReset. But I think the PR\u2019s output is better: the older output (in blue) had less space than it should; the newer output (in red) restores the space, and looks visually closer to the output of straight TeX.\nIf you agree, I\u2019ll update these screenshot tests and add some new ones.\n\n\n. > I guess you mean Networking features in Docker for Mac.\nYep!\n\nDid you add another IP address to your loopback device, as suggested by these documents? If not, what did you use for the --katex-ip and how did you find it?\n\nI tried the IP network alias suggested by that document, choosing the 172.17/16 network suggested by the screenshotter\u2019s Docker config parsing. It didn\u2019t work, so I just supplied my host\u2019s local IP, found by ifconfig en0. This required some changes to screenshotter.js\u2014included in this PR\u2014so that --katex-ip is obeyed even in the presence of --container.. I\u2019m also testing a fix for #541. This fix involves making .mspace nodes their own class, rather than examples of .mord. TeX glues aren\u2019t atoms.\nThe combination of that fix and this PR restores the original SupSubLeftAlignReset screenshotter test behavior.\nHow to move forward? Would you prefer separate fixes for all these, plus a PR for the screenshotter changes?\n@kevinbarabash. Closing this in favor of a new PR, #567.. I have a fix for #4 that's based on this commit, and will submit it for review after hearing back.. Hi, any chance I could talk to a contributor about the approach taken by this PR?\nKaTeX's approach to TeX operator spacing uses CSS adjacency rules, as in .mathord + .mathbin { margin-left: ... }. This means that, for correct spacing, KaTeX must ensure that CSS adjacency corresponds to TeX operator adjacency.\nBut in some cases KaTeX doesn't ensure this. Style changes, size changes, and spaces introduce spurious spans into the HTML output. These spans mess up operator spacing: TeX considers two boxes adjacent (and space them accordingly), but in CSS the spans aren't adjacent. The same root cause is behind #533, #541, #136, and to some extent #4.\nThe approach taken here\u2014eliminating spurious spans\u2014seems like a good fit for current KaTeX, although it is not a trivial change. I've enjoyed working on these features and others but if there's no chance of merge I should do something else.\n@kevinbarabash . OK @kevinbarabash I\u2019ve addressed your comments! Let me know if you'd like anything else.. OK, I've added the TODO (in commit 0911e5f) and updated the problematic loop (in d3ecb33). I hope we are now ready to merge.. It doesn't work, either on local or docker.\nAt least this diff is needed then I could get local to work\n```\ndiff --git a/dockers/texcmp/texcmp.js b/dockers/texcmp/texcmp.js\nindex 3c16dc5..c164e5d 100644\n--- a/dockers/texcmp/texcmp.js\n+++ b/dockers/texcmp/texcmp.js\n@@ -7,7 +7,7 @@ var path = require(\"path\");\n var Q = require(\"q\"); // To debug, pass Q_DEBUG=1 in the environment\n var pngparse = require(\"pngparse\");\n var fft = require(\"ndarray-fft\");\n-var ndarray = require(\"ndarray-fft/node_modules/ndarray\");\n+var ndarray = require(\"ndarray\");\nvar data = require(\"../../test/screenshotter/ss_data\");\n```\nDocker looks like some latex packages are missing from the docker\nThe diff is attached; there are font differences clearly; the baselines are equal, meaning the output of this PR is better than the previous\n\n. This is one PR rather than several because I've already spent more time on this than I can afford. Thanks for KaTeX.. Great! Comments all addressed in latest commits.\nRe 9afac38: Yes, \\atopfrac is artificial. I couldn\u2019t find an AMS equivalent; people suggest \\genfrac. Using a non-typeable name seems reasonable.\n\nRe 8882bb5: See #261 (comment) and following comments for prior discussion. \u2026\n\nI can only partially understand that comment chain; but to your question, yes, pdfeTeX supports these symbols (curly quotes, en dash, em dash) with the meanings I assign.\ntex\n\\documentclass{article}\n\\RequirePackage[utf8]{inputenc}\n\\begin{document}\n\u201chello\u201d\n\u2018hello\u2019\n\u2014hello\n\u2013hello\n\\end{document}\n\nRe e0b5d0a: Out of curiosity (and for future reference), have you found this in a book, in the TeX sources, or by dumping TeX data structures?\n\nDumping TeX data structures and looking at sources.\n\nRe eccf74e: As you only use toplist[0], the rest of that argument apparently gets discarded. Is that what TeX does, too?\n\nVery nice catch!! This was a bug. The correct thing to pass is just top since supsubs are special. Updated the test.\n\nRe 1613372: I'd avoid modifying the classes argument: that may lead to surprises as it's kind of unexpected from the perspective of the caller.\n\nOK\n\nRe 1448c37: Can you point out the TeX book chapter or similar where the rules for italic correction are spelled out?\n\nThere is an index reference to \u201citalic corrections\u201d in the texbook. p441 is where it is said that italic corrections are added to characters encountered in math mode. Elsewhere is where it is said that italic corrections are not added in horizontal mode.\n\nRe 6a1aa76: Can we rely on the small-caps variant getting rendered in a sufficiently compatible fashion on all platforms, or could some browsers decide to use an installed font which has a built-in small-caps variant instead of generating small caps from the named font? How come we don't need metric information for the small caps variant here?\n\nShrug. The PR\u2019s textsc is better than nothing but the answers to your questions are not the ones you want. If you don't want a halfway-decent-but-not-perfect textsc, then I will remove textsc from the PR.\nI also added another commit which supports, in text mode, TeX\u2019s ligatures ?` and !`, which compile to \u00bf and \u00a1. (TeXbook page 51). Actually you probably don\u2019t want that last commit (2434621) b/c the katex fonts lack the \u00bf and \u00a1 characters, so the browser must fall back to its default fonts.. I've updated the PR according to the comments above, and removed \u00a1 \u00bf \\textsc. Hopefully we're good.. Thanks! FWIW I think the following issues are closed by this & the previous PR: #563; #541; #534; #530 (sort of: we have \\stackrel, not \\buildrel); #498; #474; #468; #432; #424; #404; #30.. In text mode, and for \\. But text mode mainly.\n\nOn Nov 29, 2016, at 8:17 AM, Kevin Barabash notifications@github.com wrote:\n@kohler nice find. I ran tftopl cmr10 and realized that all of the sigma values in https://github.com/Khan/KaTeX/blob/master/src/fontMetrics.js#L37-L42 that 0.0 should be non-zero numbers. We aren't using those particular sigmas right now, but we might at some point.\nWhere is the space character actually used though?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @kevinbarabash Can you provide a bit of guidance on how this should be fixed? I'd like to take a crack but not sure where to begin.. Comments addressed. Cc @kevinbarabash. The DOM-measurement approach seems better. It's already a bit of a shame that KaTeX hard-codes CMR font metrics, since that makes alternate font usage harder. @gagern is right about kerning and substitution inside \\text; more than that, why not allow full HTML in (the moral equivalent of) \\text nodes? The best way to handle \\text is to measure the result of rendering.. What is the usecase for server-side offline processing in which no JavaScript may run on the client? In which case all features will require either complete access to font metrics and rendering details, or CSS hacks?\n\n@ronkok\u2019s work is very impressive! There are some nits, though: horizontal CSS scaling, e.g. for \\not, will actually change the way an SVG stroke is rendered (the \u201cpen\u201d will scale too, leading to a thicker stroke). This is a subtle effect, but it is already visible. We could avoid some issues with complex CSS crashing browsers if browser-side JavaScript constructed the CSS dynamically.\nThe more flexible approach would be to allow KaTeX to calculate font metrics and perform certain layout decisions client-side. Those calculations would only happen when necessary. For instance, this would allow browser-styled text inside \\text{} blocks. I'm advocating for that approach, but acknowledge I may not understand all of KaTeX's deployment constraints.. My guess would be that the \\quad bug has to do with 9d3cdf694c33ee008af9508481d316d78cce329a, which shifts spaces into spans.\nThe span generated by \\boxed needs to be marked so that the space-shifting doesn't happen.. This is really awesome work!!!! I have a slight anti-preference for many small, separate, on-demand-loaded SVG files. (What about a single .svg file with s, referenced via fragment identifiers?) But the current code would be a great step forward.. The important comparison is between MathML as interpreted by screenreaders and Khan Academy's text translation output, and it would be wonderful to have a test page that allowed users to make that comparison themselves.. I think this should be closed right @edemaine?. @kevinbarabash So up above @xymostech said \u201cOkay, I did a bit of testing on IE 9 and found that quirks mode is awful. So I'm gonna modify this to go back to warning on quirks mode and to just testing limited-quirks mode everywhere.\u201d Would it be OK to not test full-quirks mode?. I see \\textbf giving boldface as expected. Can you give a full string that produces the wrong result?. Font size in KaTeX is controlled by two kinds of CSS class, explicit sizing classes like .size5 and styling classes like .scriptstyle. The \u201csizing\u201d code thinks that resetting the size class suffices to get a desired size. It doesn't suffice because a surrounding span might have a style class.. See #719 for a fix.. Nah, there's no interaction between this and #718\u2014this actually assumed #718 :). (Rebased.)\n. c2aaf90 fixes a longstanding bug in \\sqrt in scriptsizes.. I'm going to re-commit with some changes to the mechanism, because of corner cases in the interaction between sizes and styles.\nHere's the issue. Consider:\n\\scriptstyle\\large a vs. \\large\\scriptstyle a\nThese commands have no equivalent in TeX, but these work, and have the following result:\n$\\text{\\large$a$}$---$\\text{\\large$\\scriptstyle a$}$---$\\scriptstyle\\text{\\large$a$}$\n\nNote that \\large overrides the preceding \\scriptstyle size change. The question is, does \\large override all properties of \\scriptstyle, or just the size?\nIn this commit, Options has a baseSize which determines the sizes chosen by future style changes. A sizing command overrides both the currently active size and the baseSize, but does not override other aspects of the style.\nThis means that TeX like \\scriptstyle\\large a\\scriptstyle b will have possibly-surprising results. Both \u201ca\u201d and \u201cb\u201d will nominally be in \\scriptstyle (which affects, e.g., math spacing), but \u201cb\u201d will be smaller.\nI'm not sure there's a more coherent solution than this (maybe you can think of one), but this seems most TeXlike.. After playing with more examples, including a^{2^{\\sqrt{\\sqrt{\\large 2^{2^2}}}}}\\large 2^{2^2}, I now believe sizing commands should change to \\textstyle (if the style is currently \\scriptstyle or \\scriptscriptstyle), and that's what's there now.. > The \\sqrt changes look awesome. It's interesting that many of the screenshots changed, but there doesn't appear to be any visual change. I can only assume that some change in the order of operations of some of the calculations resulted in an imperceptible change to the layout. I was surprised by the changes to ModScript-chrome.png without changes to ModScript-firefox.png.\nThat is my assumption too, and I share your surprise. The main change here is that, e.g., \\scriptsize changes are applied via the size mechanism, which might be, you know, 0.000001 off from the previous relative fontsize or something.\n\nThis is so that both the sizes glyphs and the spaces between them is consistent no matter where the sizing command is used, is that right?\n\nYes.\nFor what it's worth, and it's up to you, but this will probably conflict with #519. Whatever gets merged first I'm happy to help resolve conflicts.. Hi @kevinbarabash any other comments on this?. Whoops, thanks, I meant the @ronkok stretchy wide PR, which is #670. The new PR is ready, including necessary changes to the stretchy functions (#670). I also added a screenshotter improvement.. I took out the screenshotter diff and updated some comments as requested.\n. I'm going to check in another commit that adds the 6pt size and implements TeX's size relationships for scriptstyle/scriptscriptstyle. I also gave KaTeX's sizes more significant digits.. The TeX size relationships are in.. Hi @kevinbarabash any comments?. Thanks for the comments, I checked in some changes.\nThe MathML values look correct to me in a couple of examples, so I think it's OK.. Hi @kevinbarabash, any more comments or requests on this?\n(I have some other changes blocked here.). Hey Erik, I think you forgot to git add units.js. Also, I would suggest that #719 be merged first, since it will change this calculation.. Yes, I think I found it.\nBasically, as part of #719, I went through and changed mentions of Style.sizeMultiplier to Options.sizeMultiplier. This should have changed nothing: both sizeMultipliers are needed only for absolute sizes (rarely needed in KaTeX). But the change may have uncovered a few latent bugs.\n~~In this case, the bug is that kerns used absolute units\u2014as if 1em always referred to 1em in the current text or display size (not scriptstyle or scriptscriptstyle). That's not how TeX works.~~ (I was wrong; in TeX \\kern1em does use the textstyle font's size, but \\mkern1mu uses the current style's font sizes.)\nBut there's more. TeX's notion of a quad (em) is different from CSS's. In CSS \u201cem\u201d just measures the current font size. In TeX, 1em is relatively larger for nominally smaller font sizes. So \\kern1em should not translate to 1em in CSS terms, you need to multiply the fontMetrics.quad value. This affects em and mu units. But ex was wrong too: ex is relative to the font size, not the TeX quad, so the previous use of emPerEx wasn't quite right.\nThis branch has the necessary changes but I have not run screenshotter tests or added new ones so no PR at the mo\nhttps://github.com/kohler/KaTeX/tree/fix-sized-space\n~~I think these bugs predate my refactorings~~ Some of these bugs predate my refactorings but I apologize either way.. You're partially right, but it turns out it depends.\n(1) \\kern\n```\n\\tracingonline=1\n$\\textstyle a\\kern1em\\scriptstyle b\\kern1em\\scriptscriptstyle c\\kern1em d$\n\\showlists\n\\hbox(0.0+0.0)x15.0\n\\mathon\n\\OML/cmm/m/it/10 a\n\\kern 10.00002\n\\OML/cmm/m/it/7 b\n\\kern 10.00002\n\\OML/cmm/m/it/5 c\n\\kern 10.00002\n\\OML/cmm/m/it/5 d\n\\mathoff\n```\nResult: 1em always in textsize.\n(2) \\mkern18mu\n```\n\\tracingonline=1\n$\\textstyle a\\mkern18mu\\scriptstyle b\\mkern18mu\\scriptscriptstyle c\\mkern18mu d$\n\\showlists\n\\hbox(0.0+0.0)x15.0\n\\mathon\n\\OML/cmm/m/it/10 a\n\\kern 9.99976\n\\OML/cmm/m/it/7 b\n\\kern 8.19443\n\\OML/cmm/m/it/5 c\n\\kern 7.36111\n\\OML/cmm/m/it/5 d\n\\mathoff\n```\nResult: 1em of current style (scaled).\n(3) \\kern in \\text mode (NB not supported by katex yet)\n```\n\\tracingonline=1\n$\\textstyle a\\text{\\kern1em}\\scriptstyle b\\text{\\kern1em}\\scriptscriptstyle c\\text{\\kern1em}d$\n\\showlists\n\\hbox(0.0+0.0)x15.0\n\\mathon\n\\OML/cmm/m/it/10 a\n\\hbox(0.0+0.0)x10.00002\n.\\hbox(0.0+0.0)x10.00002\n..\\kern 10.00002\n\\OML/cmm/m/it/7 b\n\\hbox(0.0+0.0)x7.97224\n.\\hbox(0.0+0.0)x7.97224\n..\\kern 7.97224\n\\OML/cmm/m/it/5 c\n\\hbox(0.0+0.0)x6.80565\n.\\hbox(0.0+0.0)x6.80565\n..\\kern 6.80565\n\\OML/cmm/m/it/5 d\n\\mathoff\n```\nResult: 1em of current size (scaled).\n:man_shrugging:\n. Please accept the following alternate text for the \u201cfont size and lengths\u201d section. I feel pretty strongly about this. The current text overpromises and is more detailed than the README warrants.\n\nFont size and lengths\nBy default, KaTeX math is rendered in a 1.21\u00d7 larger font than the surrounding context, which makes super- and subscripts easier to read. You can control this using CSS; for example:\ncss\n.katex { font-size: 1.1em; }\nKaTeX supports all TeX units, including absolute units like cm and in. Absolute units are currently scaled relative to the default TeX font size of 10pt, so that \\kern1cm produces the same results as \\kern2.845275em. Since most browsers default to a larger font size, this typically means that a 1cm kern in KaTeX will appear larger than 1cm in browser units. This behavior may change in future.\n\nFWIW, this image shows the difference between a 1cm rule in KaTeX (black) and a 1cm rule using browser units (red), with the default browser font size.\n\n. @edemaine: I hate to respond because at some level we do agree but\n\nDo you disagree with the goal or the claim or both?\n\nI think KaTeX does, and should, aim for LaTeX compatibility, but \u201cKaTeX aims to produce the visual equivalent of LaTeX output at 10pt body font size scaled up to, by default, 1.21x the font size of the context\u201d isn't a good goal or a useful claim. KaTeX aims to be a fast, useful library for rendering TeX-like math in the browser. Scaled cut-and-paste compatibility with arbitrary LaTeX documents is a different goal and a less good one.. But it's your PR and if you feel strongly about the \u201cKaTeX aims to render\u2026\u201d I approve of it.. LGTM!. @gagern ?\n. > Sorry, forgot to comment. I like the general idea.\nGood!\n\nI'm a bit confused by the fact that you are using a different convert invocation than texcmp. If your command is superior (looks like your green might be better to see), it would make sense to use that in both places for the sake of consistency.\n\nThe texcmp invocation does not work for my imagemagick. (Version: ImageMagick 7.0.6-0 Q16 x86_64 2017-06-12 http://www.imagemagick.org)\n\nAs convert is invoked outside the docker, it might be worth indicating that ImageMagick has to be installed. Do we want to support gm convert from GraphicsMagick as an alternative? If so, how do we tell which one to use? Autodetect or let the user configure?\n\nThis is not a feature that's required to build or use katex so I do not want to do a ton of unnecessary hardening\u2026\n\nThe line where you ignore errors from mkdir might be worth a comment. I assume that this is mainly in order to deal with EEXIST, relying on the fact that any other error creating the directory should lead to a write error later on. Correct?\n\nWill comment.\n\nI have a very slight dislike for the temporary file you write then delete. ImageMagick should be able to read that image from standard input. But adjusting the whole machinery so that it can feed input to the executed file makes things considerably more complicated and less generic, so I doubt that's actually worth changing.\n\nAgree.\n\nOh, and we probably should make sure the directory for the diffs is included in .gitignore. Right now that contains the singular diff for use by texcmp, while you are using plural diffs here. I find the distinction between singular and plural rather confusing, so I'd say either re-use diff or pick something more descriptive. I'd prefer reusing.\n\nSorry, yes, diff is better.. Changed to diff.\n. @gagern any more comments? I have not changed texcmp imagemagick invocation but could do so later.. texcmp and screenshotter.sh --diff have different purposes. Texcmp compares with tex output, screenshotter compares a new KaTeX-generated image with an older one.. ????? was --verify reference in the previous help line not enough?\n. There's something weird going on with Travis. I rebased; here's a direct link to the successful Travis build, though that's not appearing here.\nMy repo: https://travis-ci.org/kohler/KaTeX/builds/250744199\nPR: https://travis-ci.org/Khan/KaTeX/builds/250744209. Hi! Responded to the review; any other comments?. Fixed the conflict (assuming a squash-merge later, didn't bother to rebase).. Hi @ronkok, that doesn't work when sizes change, even for \\fbox. E.g. (on master):\n\nOr (again on master) try \\fbox{\\rule{0.1em}{2em}}.\nThe fontsize-ensurer nodes are weird and suboptimal, but given the current CSS coding they appear necessary.\nI think this commit should be merged (I've tested with very large rules\u2014thanks!\u2014and they work, although they do, as you suspected, introduce large gaps) and the vlist/fontsize-ensurer issues pushed to another project.. I'd like this PR to concentrate on bug #646, and there could be another PR or issue on issues surrounding fontsize-ensurer?. Screenshotter test added. Re: test speed, PR #752 speeds up screenshotter tests 6x. Sure, I tested many expressions. Here's an expression that encompasses a lot of em\na\\mathop+b\\mathop:c\\mathop{\\delta}e\\mathop{\\textrm{and}}f\\mathrel{\\mathop{:}}=g\\sin h\nBefore\n\nAfter\n\nNote that the :s moved up (as they should), the \\delta moved down (as it should: https://tex.stackexchange.com/questions/368673/documentation-of-mathop), and the other ones stayed put (as they should).. NB Other uses of groupTypes.op that could have been affected, such as \\stackrel, are tested in the screenshotter tests.. test added. Fixed in #768. This does not yet update travis to supply --fast. Most likely --fast should be the default but that could come later I dunno.. Works on Travis too so I made --fast the default (old behavior recoverable with --slow).. Sure, good choice\u2014renamed.. @edemaine This fixes the problem you reported in #732 and makes measurements more texlike. It corrects some bugs in #719 and some bugs in prior versions. I'll leave some comments on #732.. NB the screenshotter test will not run in TeX as is because mu is not allowed in rule dimensions\u2026. Hey @kevinbarabash, if you\u2019d like to run the tests on texcmp, I could get rid of the 18mu rules. (\\rule cannot take mu units in TeX.)\nHere\u2019s what the screenshotter test should show. The top row uses em units. The gaps should be (and are) the same in all styles. The middle row uses mu units. The gaps should scale with style (i.e., superscript smaller). The left column uses text size, the right column uses \\footnotesize, so the gaps should be smaller on the right than the left. The bottom row has rules: 1em^1em, then 18mu^18mu. Again, the em rules should be the same size in superscript, the mu rules should scale.. Travis is confused again: this PR builds fine.\nhttps://travis-ci.org/kohler/KaTeX/builds/251605937\n. Don't think this is a correct analysis. The \\displaystyle is inside a group, the \\overbrace group.\nWhat really appears to be going on is that \\underbrace and \\overbrace should put their arguments into display mode unconditionally. TeX input\n```\n$\n{{\\oint_S{\\vec E\\cdot\\hat n\\,\\mathrm d a}}} = \n{\\frac{q_{\\text{enc}}}{\\varepsilon_0}}\n$\n$\n\\overbrace{{\\oint_S{\\vec E\\cdot\\hat n\\,\\mathrm d a}}} = \n\\underbrace{\\frac{q_{\\text{enc}}}{\\varepsilon_0}}\n$\n```\npdftex output\n\n. Definition of \\over/underbrace in LaTeX fontmath.ltx\n\\def\\overbrace#1{\\mathop{\\vbox{\\m@th\\ialign{##\\crcr\\noalign{\\kern3\\p@}%\n      \\downbracefill\\crcr\\noalign{\\kern3\\p@\\nointerlineskip}%\n      $\\hfil\\displaystyle{#1}\\hfil$\\crcr}}}\\limits}\n\\def\\underbrace#1{\\mathop{\\vtop{\\m@th\\ialign{##\\crcr\n   $\\hfil\\displaystyle{#1}\\hfil$\\crcr\n   \\noalign{\\kern3\\p@\\nointerlineskip}%\n   \\upbracefill\\crcr\\noalign{\\kern3\\p@}}}}\\limits}. FYI TeX commands such as \\textstyle/\\displaystyle always reset the \u201ccramped\u201d flag to false.. @ronkok, Thanks for letting me know. I am working on an alternative to makeImageVList.. Ping on this e.g. @kevinbarabash? Safe; blocking #768.. The 0.91 was determined empirically, by comparing baseline-aligned rules in and out of vlists. I'd think it would be 0.9 (the line-height is 1.2em and the typographic ascender 0.8em, so you'd think 0.1em at the top + 0.8 ascender = 0.9em), but it's not.\nI also added some comments, and thanks, added the table-layout: fixed I expect @gagern was referring to.\nCompatibility could be an issue here. In particular, the vertical positioning in this checkin makes assumptions about (1) the ascender of a particular font, (2) the way line-boxes are calculated. These assumptions are new: the old code did produce different results on different browsers, but only in terms of the extra whitespace around KaTeX math, rather than within the math itself.\nAccording to CSS 2.1 the ascender \u201cshould\u201d be calculated using particular font metrics: sTypoAscender, sTypoDescender. But there might be differences on different platforms. So curious what happens on modern, KaTeX-supported browsers.. Thanks @ronkok!!\nI had, though, an idea to make the mechanism less sensitive to font ascender dimensions, namely a tall overflow:hidden strut. That makes many Firefox images match the screenshotter versions exactly and seems more robust.\nHowever, Chrome versions don't match\u2014in the horizontal direction. This was a surprise to me. It appears that Chrome rounds table-cell dimensions up to integral numbers of pixels, but does not do this for divs. Example diff attached. Maybe this is a blocker, maybe it's not.\n\n. @kevinbarabash I've done some tests with 16px fonts, and the rounding issues are worse, but not dramatically worse. Three examples from screenshotter tests:\n\n\n\n. I further updated the CSS. By using two table-rows, and a table-cell with vertical-align: bottom, all reliance on line-height and font ascent can be avoided, and the code is simpler.\nOnly a small number of firefox test cases change. Most chrome test cases change, because of the rounding issue.\nAssuming that the updated CSS works on other browsers\u2014it appears to, but @ronkok, if you could help check that would be amazing\u2014this PR is in my opinion ready to merge.. Thanks @ronkok! That was a real problem: Safari needed an extra table-cell to position the table correctly. I've fixed that problem and things display well on local Safari, at least.. @ronkok, did you know that accent placement was off on Safari? The \\vec\u2019s are rightwards-displaced even on master. The commit I just pushed is correct vertically though.. Ping\u2014can a girl get a review? @kevinbarabash. Inspired by your question, I changed the PR slightly to produce negative heights and depths when appropriate. Screenshotter tests OK.. Do you pay for BrowserStack? I looked briefly and it looked painful to get free access.\n\nOn Jul 30, 2017, at 12:48 PM, Ron Kok notifications@github.com wrote:\nI'm finding a problem on Safari. It occurs in iOS only, not Mac. The screenshot below is from BrowserStack's rendition of an iPad Pro, iOS 10.3\nThat is trying to render: ( \\color{blue} \\sqrt{\\frac{\\frac{\\frac{c}{c}}{c}}{\\frac{c}{c}} } + \\sqrt{\\frac{\\frac{\\frac{\\frac{c}{c}}{\\frac{c}{c}} }{c}}{\\frac{c}{c}} } \\, \\sqrt{\\frac{\\frac{\\frac{\\frac{c}{c}}{\\frac{c}{c}} }{c}}{\\frac{c}{\\frac{\\frac{c}{c}}{\\frac{c}{c}}}} } )\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. This appears fine on master (which now has this PR). This image is from the iOS Simulator for IPad Pro (10.5-inch) \u2013 iOS 10.3 (14E8301)\n\n. Since main.js is only used in testing, I see no problem with this. It would be more self-consistent with the code above to write \"attachEvent\" in input, but it's fine either way.. I'll wait a bit to merge just in case \"attachEvent\" in input arrives as a PR revision.. @edemaine This is a change to a file that is only used in testing KaTeX. I am happy to trust the submitter that the change was useful in his environment.. So this is really cool, and a commit like may be the only way to absolutely always match the \\surd and the rule. However, I still prefer font images (which are already in cache) to remote-loaded SVGs. We can make incremental progress by calculating rule thicknesses more carefully and improving CSS coding somewhat. #776 does that; it's useful whether or not this is merged.. @ronkok, not sure. The existing CSS coding requires precise alignment between a font and a CSS border. Seems likely those will be treated differently by browser subpixel rounding algorithms. In #776 I experimented with subpixel offsets; these worked well at larger sizes but poorly at smaller sizes. box-sizing: border-box made no difference. There are, though, perhaps other things to try.. A problem with background-image is that it often doesn't print.. Incidentally, here is the sequence of \\sqrt{a}/\\sqrt{1} at sizes 12,13,14,15,19,20,21pt given #776. It is better than the current state (see #60 for the current state) but not perfect. First at 100%, then 400%.\n\n\n\n. Hi @ronkok, just FWIW. It looks to me like you are scaling the \\sqrt images by the font multiplier. TeX instead works through a single set of \\sqrt images, not always scaled by the font multiplier. Honestly I like your look better :) but here's a pdftex image.\n\nWhat I see here is:\n In your image, the superscript versions look to me like scaled-down versions of the main version.\n In pdftex, the superscript images differ. The outermost \\sqrt in the main version is different from the outermost \\sqrt in the superscripts. The innermost \\sqrt versions also differ. I think a smaller \\sqrt is made available in the superscripts.. Hey @ronkok, not sure I was clear. I can see the differences within each group of three, but in pdftex/current katex, there are also differences across the groups of three.\nIn pdftex, the groups of three have the following surd characters, in order outer->inner:\n Largest: cmex10 \u201cr\u201d, cmex10 \u201cq\u201d, cmex10 \u201cp\u201d\n Superscript: cmex7 \u201cq\u201d, cmsy10 \u201cp\u201d, cmsy7 \u201cp\u201d\n* Supersuperscript: cmsy10 \u201cp\u201d, cmsy7 \u201cp\u201d, cmsy5 \u201cp\u201d\nYou can see that in pdftex, the largest surd is differently shaped than any other surd. This is because it is a different character.\nIn current katex, the groups of three use:\n Largest: KaTeX_Size2, KaTeX_Size1, KaTeX_Main\n Superscript: KaTeX_Size1, KaTeX_Main, KaTeX_Main\n* Supersuperscript: KaTeX_Main, KaTeX_Main, KaTeX_Main\nSImilarly, in current katex, you can see that the largest surd is differently shaped than any other surd.\nIn your checkin, I believe you are using KaTeX_Size2 for the outermost surd at every level. I just wanted to point out that this is different behavior.. Example difference, using \\frac towers (an example from @ronkok). Before:\n\nAfter:\n\nNote that the rules are less unruly.. Hi @kevinbarabash, I rebased on top of the current master & pushed. I cannot replicate a missing \\sqrt rule on Chrome, with either 11px or 18px, at any mag. Here's the diff I made to main.css. Version 59.0.3071.115 (Official Build) (64-bit) on Mac. Can you help me replicate? There's no clipping in the CSS coding, so your proposed explanation doesn't make sense to me.\n```\n--- a/static/main.css\n+++ b/static/main.css\n@@ -1,7 +1,7 @@\n body {\n     margin: 0px;\n     padding: 0px;\n-    font-size: 72px;\n+    font-size: 11px;\n }\n#input {\n``\n. When a nucleus has both sub & sub, thedefaultRuleThicknessis part of the calculation involved in separating the subscript from the superscript. The screenshotter subscript positions changed in scriptscript mode because nowdefaultRuleThicknessis relatively larger for script and scriptscript fonts\u2014e.g., thescriptdefaultRuleThickness` is 0.049em, not 0.04em.\nThe previous KaTeX implementation differed. It used 0.04em as the thickness for purposes of separating sup+sub, but it should have used 0.04em base-size units for consistency with the TeXbook (since previously all rules were 0.04em base-size units thick). Instead it used 0.04em script-size units (in scriptscript mode).. The problem appears at least somewhat dependent on the CSS file http://copyasmarkup.com/katex/styles.css. So far I have recreated the problem using make serve only by loading that CSS.. The problematic CSS declaration is .katex { font-size: 1em !important; }. Hi @ronkok, I agree with @kevinbarabash that this PR should be merged eventually, but I printed the test page to PDF; see screenshot. I doubt printing KaTeX is common, so some messiness would be acceptable, but this is pretty extreme.\nIf you generated inline SVG would this be better?\nIdeally KaTeX should be copy-pasteable/screenreadable too. Must the surd character completely disappear from the markup?\n\u200b\u200b\n\n. @kevinbarabash The stretchy accents and overline/underline are all new features with no preceding support; \\sqrt is core. I think this should be taken seriously. My users print out KaTeX math with some frequency.\n@ronkok Why do you say that only css background images can be made to stretch? With tables, positioning, etc., pretty much any element can be made to stretch, right?. > You can stretch any image to any width and height, if you know a numeric value in advance. I sought to meet the challenge of issue #587 by creating images that would stretch to match a span width that is not known in advance, that is instead defined by the content of the span. That particular trick can be done with a background-image but not with ordinary images.\nReally? Here's something like what you want, with inline SVG. The span.c sets the width and height of the SVG.\n\n```html\n\n\n\n\nspan.a {\n        display: inline-block;\n        position: relative; /<em> establishes new flow root for contents </em>/\n}\nspan.b {\n        position: absolute; /<em> absolute relative to containing span.a </em>/\n        width: 100%; /<em> 100% width of span.a </em>/\n        height: 100%; /<em> 100% height of span.a </em>/\n        background: rgba(255,0,0,0.4);\n        z-index: -1;\n}\nsvg {\n        display: block;\n        position: absolute; /<em> again, absolute relative to parent </em>/\n        width: 100%;\n        height: 100%;\n        stroke-width: 5;\n}\n\n\n\n\u00a0XYZ\n\u00a0XYZ\n\u00a0XYZ ABC\n\u00a0XYZ ABC DEF\n\u00a0XYZ ABC DEF GHI JKL\n\n\n```. That's great.\n\nFWIW, @ronkok, I still think we should prefer inline SVG to out-of-line SVG, for render-performance reasons (better in general to avoid external assets), and because my understanding is that many large sites have settled on inline SVG. For example:\n\nhttps://github.com/blog/2112-delivering-octicons-with-svg\n\n> We tried a number of approaches when adding SVG icons to our pages. Given the constraints of GitHub\u2019s production environment, some were dead-ends.\n> \n> 1. External .svg \u2014 We first attempted to serve a single external \u201csvgstore\u201d. We\u2019d include individual sprites using the  element. With our current cross-domain security policy and asset pipeline, we found it difficult to serve the SVG sprites externally.\n> 2. SVG background images \u2014 This wouldn\u2019t let us color our icons on the fly.\n> 3. SVGs linked via `` and the src attribute \u2014 This wouldn\u2019t let us color our icons on the fly.\n> 4. Embedding the entire \u201csvgstore\u201d in every view and using `` \u2014 It just didn\u2019t feel quite right to embed every SVG shape we have on every single page throughout GitHub.com especially if a page didn\u2019t include a single icon.\n\nThe #1 issue \u201ccurrent cross-domain security policy and asset pipeline\u201d is something that might bite some KaTeX users\u2014or it may not.. FWIW, the `span.b` doesn\u2019t seem to be necessary. The `display:block;position:absolute` `svg` element can be a direct child of `span.a`.\n. Awesome @ronkok.\n\nQuestion: Shouldn\u2019t `groupType.smash` call `makeVList` itself? For instance, consider something like `\\phantom{\\huge x}`. In TeX this will cause the `x` to overlap surrounding lines. I don't think this will happen with your code, but I'm actually having trouble getting a hold of your code to confirm.. \u201c1\\\\!2\u201d is rendered as `12`.\n\nGiving the second top-level `` `display:inline-block`, instead of `display:inline`, solves the problem.. I was wrong about the simple fix. It would be nice to default all katex spans to `inline-block` but this breaks accents.. I think the bug might be in Chrome\u2014or at least there is a bug in Chrome. Even a targeted inline-block fix breaks several tests, including the Mod test, and I can't figure out why (meaning I can visually tell the difference but can't see why Chrome would treat `\\bmod` differently in an array cell).. Sure!. Yep.. OK. No. Font bodies are not arrays\u2014unlike for style, etc. You can see this both in the creation code (in `functions.js`) and in `groupTypes.font`, which calls `buildGroup()` on the body rather than `buildExpression` on the body array.. I've tried a different one-pass arrangement.. I doubt the newOptions are necessary, but neither are they harmful.. Because \u201cmspace\u201d nodes are no longer considered atoms. They are not atoms and TeX doesn't treat them as such. So they shouldn't affect operator spacing. If they were `mord` they'd affect operator spacing (e.g. if followed by an `mbin`). Same :). OK. This will add more `reset-` styles than the previous code will; on the other hand, it will add fewer nested ``s. I don't see a way to avoid the additional classes, short of adding more passes and/or arguments to the builder functions. That would be another PR.. Good catch. The old code set maxFontSize manually as well. In case you meant the `pos` stuff, I've updated the comment.. Ugh. I will try this, but if any tests fail, I will ask you to tolerate the inconsistency, which is really no different from (e.g.) previous commits, which didn't always pass `options.color()` in to `makeSpan`.. Yeah no look let me push back on this. There are `makeSpan` calls in `delimiter.js`, etc., that as of this commit have no `options` to pass. How about I put a TODO to improve API consistency.. This doesn't do the same thing. Aside from the obvious bugs (the `isSpace(child)` case doesn\u2019t actually put the current child anywhere), by introducing spurious spans, it would screw up class adjacency.\n\nI think the code is pretty simple and you should take it as is.. The following code should work but is longer. If you really won't take the `splice` solution i'll do this.\n\n```\n    var spaces = [];\n    var nextGroups = [];\n    for (i = 0; i < groups.length; i++) {\n        group = groups[i];\n        if (isSpace(group)) {\n            spaces.push(group);\n        } else {\n            if (spaces.length > 0) {\n                if (group instanceof domTree.symbolNode) {\n                    group = makeSpan(group.classes, [group]);\n                }\n                buildCommon.prependChildren(group, spaces);\n                spaces = [];\n            }\n            nextGroups.push(group);\n        }\n    }\n    if (spaces.length > 0) {\n        Array.prototype.push.apply(nextGroups, spaces);\n    }\n```. OK. I still don't find the original confusing. Would \n\n```\nvar spaces = groups.splice(i, j - i);\n```\n\nmake it clearer. This isn't a huge deal but creating additional arrays isn't free; in the normal case where there are no spaces my code doesn't do any array allocation. As for `instanceof domTree.symbolNode`, as the immediately previous comment says,\n\n```\n    // At this point `groups` consists entirely of `symbolNode`s and `span`s.\n```\n\nbecause the documentFragments have been spliced in. Not according to the screenshots or a couple other random tests. Mneh. That would never be useful in current KaTeX and would have nonzero cost.. Why?. Why do you think small-caps lacks super wide support? Although explicit support for it is CSS3, it apparently is supported even by IE6.\n\nhttps://css-tricks.com/almanac/properties/f/font-variant/\n. Maybe the best thing is to leave \u00a1 and \u00bf out of this megaPR and open a separate issue for them. OK will do.. To be clearer, the consequence of not adding `.equals` is that the following:\n\n`\\text{\\color{black}{X}\\color{black}{Y}}`\n\nwill come out as two black spans rather than a single black span, whereas\n\n`\\text{\\color{black}{XY}}`\n\nwill be a single combined span. Who cares.. I added a Jasmine test, not everything needs a screenshot test. But ok fine whatevs. I share this concern, but didn't want in this commit to change the makeSpan interface to force an explicit mclass argument. I have added a TODO to make that happen.\n\nIf the class is in the wrong position the consequence will be mis-spacing in complex situations, something that KaTeX already suffered from and that this commit improves. Not great but not a disaster.\n\nIf KaTeX had a debug mode one could add debug-mode assertions about math classes or something.. \\mathit is already defined darling. Removing \\textsc from the PR anyway. `symbol` is linked with the argument type of `value`. if `symbol` is true, then `value` must be suitable for passing to `makeSymbol`, which isn't true here.. Testing is great, creating tests is nonzero work, updating tests is nonzero work, running tests takes time (Jasmine tests are much faster). KaTeX\u2019s behavior is not always \u201cright\u201d, I've had to update a lot of screenshotter images because previously-encoded behavior was wrong, and I'm sure as time goes on that will be repeated. But the occasional screenshotter test was valuable to catch a problem (StyleSwitching in particular).\n\nI find tests for edge cases more important than tests for typical cases, so just adding a screenshotter test for, say, \u201c{1 \\atop 2}\u201d (which is what I did) is low-value. When a bug is fixed, particularly a tricky one, it's usually important to add a test.. I also misread what your comment was in reference to, sorry. Still, can be cleaned up later.. I don't think it will. In the MathDefaultFonts test (that image), italic correction SHOULD be applied for every character.\n\nBTW I have some explanations for questions in #349. KaTeX's \\mathit command incorrectly selects the math italic font. The LaTeX \\mathit command actually selects the TEXT italic font, which has somewhat narrower letters than true math italic. \\mathit means \u201cuse text italic in math mode\u201d, it doesn't mean \u201cuse math italic.\u201c Similarly for \\mathrm, \\mathtt, etc. From fontmath.ltx:\n\n```\n\\DeclareMathAlphabet      {\\mathbf}{OT1}{cmr}{bx}{n}\n\\DeclareMathAlphabet      {\\mathsf}{OT1}{cmss}{m}{n}\n\\DeclareMathAlphabet      {\\mathit}{OT1}{cmr}{m}{it}\n\\DeclareMathAlphabet      {\\mathtt}{OT1}{cmtt}{m}{n}\n```. nah cause we just put the leftDelim on.. Yes, but I'm trying to make it fail more cleanly in case a stray \\middle gets in.. Ah but it *does* work. I know it shouldn't, but catching this error case would be harder, and I didn't see much point.. no problem; i'll leave the screenshotter as is though. The `\\middle` actually does end up being a direct child of `\\left\\right` in this simple case, so everything works out.\n\nA more complex case such as this should fail (it would fail on LaTeX):\n\n`\\left(a \\frac{a}{\\color{red}{\\middle|}} b\\right)`\n\nIt doesn't fail on this PR, but it produces a non-insane result:\n\n![screen shot 2016-12-08 at 4 44 05 pm](https://cloud.githubusercontent.com/assets/410647/21028978/95e8b700-bd65-11e6-82c7-b556a43cceb1.png)\n. `parseStringGroup` and many other preexisting katex functions dont do this. no it's not, this regex must match any PREFIX of a valid size, the next regex down limits it to valid sizes only. just matching the earlier katex code's space treatment here. There are several places that mutate class lists. I added several: We mutate class lists when adjusting math-class (e.g. bin -> ord); when applying styles; when applying sizes. I didn't add this, from `groupTypes.accent`:\n\n```\n        // Accents should always be ords, even when their innards are not.\n        supsubGroup.classes[0] = \"mord\";\n```\n. There's another comment on this. If LaTeX compatibility were an absolute requirement, then yes, the parser would have to catch every stray `\\middle`. But that didn't seem super easy in katex.. Should this be written as `groups[i].classes.slice()` instead?. yep done. Yes; e.g. `\\left(\\frac{a}{\\middle|}\\right)`.\n. Basically for truly correct `\\middle` counting you'd need to introduce some context variable that was reset every time a new group-equivalent was entered.. Will add comment. If it's important that mathml have the same space widths as html I suppose I should repeat the logic from buildhtml here. I don't know, though, what the mathml is really for.\n. OK, then I\u2019ll leave this alone for now. The revised commit has all the other requested changes.. No, thanks.. No, thanks.. Does not seem important.. If I thought the code was clearer the way you suggested I would have written it that way. I don't like deeply nested if statements. And it is clearly a matter of taste.\n\nYou are asking me for ten minutes or so of work for trivial changes. Like five seconds of typing then ten minutes to rerun the tests just to verify nothing broke, jank around with the GitHub PR, etc. I already spent a lot of time making the fix. As well as writing the original feature\u2014not because I needed it myself, but because I was grateful for KaTeX and wanted to help out with features the main developers wanted.\n\nProjects that want contributions walk a balance between enforcing standards and respecting their contributors' time. As a contributor, I see no standards involved with your comments, and I consider these particular requests less than respectful of my time.. Thanks very much for understanding. I absolutely appreciate your work also, and hope there's no hard feelings. I think it's important that code reviewers for open-source projects understand when they're asking for important functionality changes vs. important stylistic changes vs. tweaks on matters of taste, and thus hope this exchange has been useful for both of us.. Yes. I'm happy to take them out of the PR but *shrug* it's all going in the same place eventually. No because style.size might be 0 (DISPLAY).\n\nIt would be equivalent to `sizeStyleMap[size - 1][Math.max(0, style.size - 1)]` but I find this easier to understand\n. `buildHTML` uses it for convenience.. So these numbers are chosen by applying 0.7x and 0.5x the base size and rounding to an available KaTeX size. But your question inspired an experiment.\n\nIn old KaTeX, scriptsize is always 0.7x the size of textsize, and scriptscriptsize is 0.5x the size of textsize. This also holds in LaTeX at 10pt:\n\n```\n\\documentclass[10pt]{article}\n\\usepackage[utf8]{inputenc}\n\\showboxbreadth=\\maxdimen\n\\showboxdepth=\\maxdimen\n\\begin{document}\n\\tracingonline=1\n$a^{b^c}$\\showlists\n\\end{document}\n```\n\nshows\n\n```\n\\OML/cmm/m/it/10 a\n\\hbox(5.17056+0.0)x7.7638, shifted -3.62892\n.\\OML/cmm/m/it/7 b\n.\\hbox(2.15277+0.0)x3.74713, shifted -3.01779\n..\\OML/cmm/m/it/5 c\n```\n\nBut at other point sizes these ratios don't hold precisely, since LaTeX was originally built for a fixed palette of fonts at specific sizes. For instance, `11pt` gives sizes 10.95/8/6, and `12pt` gives 12/8/6.\n\nFWIW here are the sizes LaTeX uses at base font size 10pt, compared with the PR's current sizes:\n\nTeX command | TeX Sizes | Current PR sizes\n-----------|----------|------------\n`\\tiny` | 5/5/5 | 5/5/5\n`\\scriptsize` | 7/5/5 | 7/5/5\n`\\footnotesize` | 8/6/5 | 8/7/5 [NB KaTeX has no 6pt]\n`\\small` | 9/6/5 | 9/7/5\n`\\normalsize` | 10/7/5 | 10/7/5\n`\\large` | 12/8/6 | 12/8/7\n`\\Large` | 14.4/10/7 | 14.4/10/7\n`\\LARGE` | 17.28/12/10 | 17.3/12/9\n`\\huge` | 20.74/14.4/12 | 20.7/14.4/10\n`\\Huge` | 24.88/20.74/17.28 | 24.9/17.3/12\n\nSo some differences.\n\nSo what to do? We could keep the current sizes (& maybe document them). Or we could implement these more TeX-precise sizes in KaTeX, with or without the currently-missing 6pt font. We can also delay this choice (i.e. leave the current sizes in and then change them later).\n. Good catch. The whole comment refers to \u201cparent\u201d functionality that is no longer present or needed. I'll replace this comment with a comment about it being readonly.. Sure.\n\nFWIW it would also be OK to use the old `.with*` names. The `.having*` names were very useful during auditing.. It didn't hurt.. (I don't have a crisp response. :) ). It can create slightly fewer `Options` objects. In particular, imagine `x` has basesize 5 and style SCRIPT. Then `x.havingSize(5).havingStyle(Style.SCRIPT) != x`, but `x.havingBaseStyle(Style.SCRIPT) == x`.\n\nThe function was more useful (i.e., did more than just optimize) in a prior version, before I decided that it was best for `.havingSize()` to reset the style.. I have no idea and I have no way to check and it's MathML :(. Because stacked delimiters are taken from the extension font, and in old TeX, the extension font was *only* used at size 10.\n\nHowever, there is a wrinkle: In AMSLaTeX, the extension font is available (and used) at smaller sizes too. I could see changing the code to do that instead.. There is nothing preventing us from scaling the font to 6pt. But because we do things with CSS here, it would mean that \u201cnormalsize\u201d, which has been \u201csize5\u201d in CSS classes for a while, would become \u201csize6\u201d. Probably doesn't matter.. So, in the old code, `sub` and `sup` were not decorated with the classes necessary to change size, whereas `supmid` and `submid` were so wrapped.\n\nIn the new code, we don't need both versions, because we create the wrapped versions in one step. These are more like the `mid` versions, so I kept a suffix.. No: The `.reset()` isn't necessary any more because `Options` objects are immutable.. The sizing classes were on rules previously too, I think.. Yes, good catch. parentStyle too.. OK. We could.. There's no way to call `consumeSpaces()` here, this is before the tokens are created. It would need to be move into `this.parseRegexGroup`. And that would be a bigger project: ti would change the meaning. Please take commit as is.. There is no `cmex5`. AMSTeX supplies `cmex7`, `cmex8`, `cmex9` to TeX's `cmex10`.. It means that if you change size indexes you should change getFontMetrics. OK. Called it sigmasAndXis. To avoid further discussion on hypothetical future problems or inconsistencies, I will make the regex spaces only. :). And spaces-only is certainly more consistent with the rest of the regex! Thanks for pushing further.. Ah, but whitespace conversion is already handled by KaTeX's lexer, which changes all `[ \\r\\n\\t]+` sequences to a single space character.\n\nNew commit has test making this clear.. I'd recommend making changes based on #755. `em` and `mu` should scale by the `quad` font metric; `em` should be additionally un-scaled if the current style is script/scriptscript.. Should be `xHeight`, and should be un-scaled in script/scriptscript.. Think this should be divided by `options.sizeMultiplier`, so that `\\large`/script/scriptscript doesn't change the meaning of absolute units.. We should be using the size of the quad defined in *cmr*.. Hm\u2014`isTight()` is equivalent to `scriptstyle/scriptscriptstyle`?. Well, not for all fonts\u2014textstyle in some fonts has a different quad.\n\nFor example, under `\\tiny`, textstyle is `cmr5`, which has quad:\n\n```\n   (QUAD R 1.361133)\n```\n\nIf the question is referring to the `mu units scale` comment, that comment is trying to explain why the \"mu\" branch has no `unitOptions`.. (But this commit doesn't change that.). I added a comment to that effect.\n. just curious, where'd these circumflex accents come from? they're not in the originals.. The TeXbook, and https://en.wikipedia.org/wiki/Point_(typography)#Didot https://en.wikipedia.org/wiki/Cicero_(typography). the extra spaces in this diff are slightly annoying but also don't matter. \ud83e\udd37\u200d\u2642\ufe0f . Yep, taller than any child\u2014or the height of any child.. Exactly.. \u201cpositioning strut\u201d.. Motivated by the fact that the other table displays in katex.less have table-layout: fixed.. Exactly.. Yup.. The `depthStrut` signals to the *browser* how deep the box is. This isn't that relevant in normal layouts; KaTeX understands heights & depths. But it matters for layout of surrounding lines. That *also* might not matter given the current coding (which has separate struts done at the very outermost level), but I think it's good and useful to have the vlist coding produce a box of the correct height *and* depth.. In TeX it can be negative but usually isn't. The current code works, and I thought that it was producing the same results as the old code\u2014should I check without the max-0?. It's actually important to preserve this outer kern so that the whole span has a bit extra space on the top.. no \u00ee please ;). So this isn't quite right? KaTeX might assume that the \u201cbase font size\u201d of the `.katex` span is 10pt, but the reader is likely to misunderstand what that means. In katex.less, the default `.katex` rule *raises the font size* to 1.21em\u2014that is, 1.21x the surrounding font size. Which means that KaTeX assumes that the base font size (1em *in the surrounding context*) is 8.264 TeX pt or something.\n\nIn a typical modern layout with 16px base font size, 1pt in KaTeX equals (16 * 1.21 / 10) = 1.936px (CSS px). Whereas 1 CSS pt always equals 1.333px. Weird!\n\nThis kind of makes me question this approach of mapping LaTeX units to *relative* CSS units. It would be better IMO for non-font-relative units\u2014especially `px`!\u2014to match CSS's concepts. It feels strange and even maybe misguided to document extremely precise units (\u201c1 TeX inch is exactly 72.27 TeX point!\u201d) when the precision is relative to an imprecisely specified, and often even unknown, base.\n\nBut I don't feel that strongly and actually implementing non-font-relative units would greatly complicate KaTeX height & depth calculations.\n\nPerhaps best would be to document the current implementation but describe it as provisional. For example, \u201cKaTeX might change in the future to make absolute TeX units, such as `cm`, `in`, and `px`, equivalent to the corresponding CSS units. We recommend using relative units.\u201d This agrees with @ronkok's comment that absolute units kinda suck. :). `px` is not a default TeX unit, and it might be more useful, and less surprising, to map `px` one-to-one onto CSS `px` than to this. 1 CSS `px` equals 1/96in.. Update the comment to say `CSS em`?. Yes. The sizing classes *were* necessary because previously we wanted all rules to have the same thickness, and that thickness was specified in `katex.less` in *base-sized* `em` units. Now that we're specifying the thickness in local `em` units, no sizing classes.. Yes. done. This is going to be dangerous. `@` is not actually a valid character for macro nams in default TeX. It only works after `\\makeatletter`, and is intended for internal macros that users don't type.\n\nOverall it is probably safe to include `@` by default, or wait for complaints before trying a complete fix; the `\\@` macro is rare in math.. ????. That is where I came down and for a similar reason: keep `@` as is in this commit.. \u201cwhen determining\u201d. \u201cfragment\u201d.",
    "onstrees": "I'm sorry, I am not the most experienced javascript programmer, but the function renderMathInText of katex/contrib/auto-render.js takes no options argument. It just has a hardcoded options object in it's call on katex itself: katex.render(math, span, {displayMode: data[i].display}); so there is nothing I can add. To make sure I did try to pass the {throwOnError:false} option in my function call, but that did'nt do anything.\nAnd yes, math is rendered on each keystroke. I use AngularJS and https://github.com/tfoxy/angular-katex as wrapper around katex for the magic interactivity. It works fast enough, even on my 15-years old pc, although there is a problem with some symbols not showing in my Firefox v. 42 on Windows; they do not appear at first with some font sizes, but after zooming in and out again with Ctrl + and Ctrl - they get OK. As far as I can make out, only the higher than normal characters are affected (\\sum, \\int, \\left or \\right{ ...). \nI tried adding a screenshot, but the forum has problems with it, both in jpg and in png\n. I do not call renderMathInText myself, but renderMathInElement does so via a call to renderElem, with as only options delimiters and ignoredTags. \nThe error message in the Firefox console (while typing \\pi) is:\nKaTeX auto-render: Failed to parse '\\p' with  ParseError: KaTeX parse error: Expected 'EOF', got '\\p' at position 2: \\p --  auto-render.min.js:1:1326\nPosition 1:1326 in auto-render.min.js reads:\nconsole.error(\"KaTeX auto-render: Failed to parse '\"+r[i].data+\"' with \",f);\nand that agrees only with this statement in renderMathInText of auto-render.js:\nconsole.error(\n                    \"KaTeX auto-render: Failed to parse '\" + data[i].data +\n                    \"' with \",\n                    e\n                );\n. Thank you for considering this issue.\nI finally managed to get the live LaTeX preview online in one of those online javascript playgrounds. If all is well you can see it in action here: http://jsbin.com/gatosifepe/edit?html,css,js,output\n. ",
    "evgeniy-storozhenko": "xymostech, thank you! It works!\n. ",
    "wackywendell": "Using the standard pdflatex provided by ShareLatex (which is just compiling with latex server side), you do get an error, but it also compiles and shows both examples just fine. See here.\nOn my machine (Arch linux, Tex Live 2015.38835-1), running pdflatex does give that error, but if you just hit enter to continue the output comes out correct. Similarly, using pdflatex -interaction nonstopmode main.tex also yields correct output, with no user input required to continue.\nI don't know what your stance is on things that produce an error but still compile, but if you really wanted to maintain latex compatibility as close as possible, it seems like this should error (as it does now) but also produce the expected output, e.g. abc_\\somecommand{xyz} \u2194 abc_{\\somecommand{xyz}}.\n. That sounds like an excellent idea! Great!\n. ",
    "erusev": "@kevinbarabash Thanks.\n. ",
    "chrismessiah": "Meant to make a pull req to my own fork.\n. Good catch. Didn't notice that they were using different fonts. What is the procedure for adding such letters to the font? \n\n. ",
    "jwmerrill": "This appears to affect master, but not the latest release. I bisected it down to d423bec08921b.\n. ",
    "arnodel": "Specifically the following regex:\njs\nvar tokenRegex = new RegExp(\n    \"([ \\r\\n\\t]+)|(\" +                                // whitespace\n    \"---?\" +                                          // special combinations\n    \"|[!-\\\\[\\\\]-\\u2027\\u202A-\\uD7FF\\uF900-\\uFFFF]\" +  // single codepoint\n    \"|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]\" +               // surrogate pair\n    \"|\\\\\\\\(?:[a-zA-Z]+|[^\\uD800-\\uDFFF])\" +           // function name\n    \")\"\n);\nThe 'special combinations' line will match 2 or 3 consecutive minus signs.  I can't figure out what that could be for\n. Ok, it's come back to me: -- and --- are valid tokens that render to long and very long dashes (see e.g. http://tex.stackexchange.com/questions/3819/dashes-vs-vs).\nThe problem seems that KaTeX now parses -- and --- as single tokens (correctly) but still doesn't know how to render them.\n. In fact I've done a few tests with LaTeX and it emerges that -- (resp. ---) is tokenised to two - tokens (resp. 3) in math mode.  So I guess that is what KaTeX should do?  In that case, the fix is simple enough, change the tokenRegex definition in Lexer.js to:\njs\nvar tokenRegex = new RegExp(\n    \"([ \\r\\n\\t]+)|(\" +                                // whitespace\n    \"[!-\\\\[\\\\]-\\u2027\\u202A-\\uD7FF\\uF900-\\uFFFF]\" +   // single codepoint\n    \"|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]\" +               // surrogate pair\n    \"|\\\\\\\\(?:[a-zA-Z]+|[^\\uD800-\\uDFFF])\" +           // function name\n    \")\"\n);\n. ",
    "Vandivier": "Primarily, nothing is rendered. Can you replicate?\nThe console also throws katex is undefined and an irrelevant encoding error:\nReferenceError: katex is not defined\nThe character encoding of the HTML document was not declared...\n. ",
    "razor-x": "Maybe new issue, but it would be nice to get the auto-render lib in there as well, or publish it as its own npm package.\n. ",
    "decademoon": "Rendering this text:\ntext\nI will give you \\$2 if you can solve $y = x^2$.\nwith this delimiter:\njs\n{ left: '$', right: '$', display: false }\nresults in\nhtml\n<#text>I will give you \\</#text>\n<span>KATEX MATH</span>\n<#text>y = x^2</#text>\n<#text>$.</#text>\nwhere <#text> denotes a text DOM node.\n. ",
    "shazrazdan": "Just a question, How can I make the following string be ignored by katex?\n\nJohn bought a shirt, a pair of pants, and a pair of shoes, which cost $10, $20, and $30, respectively.  What percent of the total expense was spent for the pants?\n\nIt is being rendered like this:\n\n. Thanks for replying. I simply replaced my $ with <span>$</span> and this made Katex ignore it. I'm putting it out so that someone else also tries it if they're stuck.. ",
    "Trass3r": "Would be nice for MathJax processEscapes compatibility: http://docs.mathjax.org/en/latest/options/preprocessors/tex2jax.html#configure-tex2jax. Isn't it exactly this issue?\nWhen set to true, you may use \\$ to represent a literal dollar sign. Typically this is set to true if you enable the $ ... $ in-line delimiter. ",
    "iwtwiioi": "But bad support for character 'a'.\n. @edemaine \nyeah, I'm pretty sure I have loaded katex.min.css and used <!DOCTYPE html>.. @edemaine \nOn Windows 10, the problem exists:\nEnvironment:\nPython 3.4.4 (v3.4.4:737efcadf5a6, Dec 20 2015, 20:20:57) [MSC v.1600 64 bit (AMD64)] on win32\nPySide 1.2.4, installed by command pip install pyside --only-binary :all:\nKaTex, the latest version, released on 08 Aug\nHere is another example:\n\nmade by $$ans=|S|-|A_i|+\\sum_{i < j} |A_i \\cap A_j|-...+ |A_1 \\cap A_2 \\cap A_3 \\cap A_4|$$\nOn Linux, everything is ok.\nMy project home:\n. @edemaine \nI didn't say this is a bug with KaTeX, I just want to ask for a way to modify the KaTeX's sources to satisfy my browser...QAQ. ",
    "lambdabaa": "Thanks @xymostech!\n. ",
    "edigleyalexandre": "@invkrh I also hope for the implementation of \\begin {equation} for Katex. It would be fantastic.. @edemaine I added but it did not work.. I added as indicated, but it does not render. Look here.. @edemaine Here's how to get with Mathjax. On here. The idea is to leave it with Katex. The page shows code and rendering.. \\begin {matrix} and \\begin {cases} are supported on Katex. I tested the main page of the Katex website and rendered it, but the blog did not render. What happened? Page with \\begin {cases} that did not render.. It worked. Forgive me for that.. I'm doing testing Katex on a test blog on Blogger. I was able to install and set the delimiters to use only \"$\" and \"$$\". But when I installed in the active main blog Katex did not interpret all symbologies with \"$\" in blog articles.\nI'm doing testing Katex on a test blog on Blogger. I was able to install and set the delimiters to use only \"$\" and \"$$\". But when I installed in the active main blog Katex did not interpret all symbologies with \"$\" in blog articles.\nI installed it like this:\nBelow <head> I added:\n<link href='https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.7.1/katex.min.css' rel='stylesheet'/>\n<script src='https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.7.1/katex.min.js'/>\n<script src='https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.7.1/contrib/auto-render.min.js'/>\nAnd above </ body> I added:\n<script>\n      renderMathInElement(\n          document.body,\n          {\n              delimiters: [\n                  {left: \"$$\", right: \"$$\", display: true},\n                  {left: \"\\\\[\", right: \"\\\\]\", display: true},\n                  {left: \"$\", right: \"$\", display: false},\n                  {left: \"\\\\(\", right: \"\\\\)\", display: false}\n              ]\n          }\n      );\n    </script>\nThat way I got Katex to run normally on the test blog. In the main blog with many Latex symbologies using only \"$\" and sometimes \"$$\", the rendering was not done.\nThanks for listening.. I'm running Katex on a test blog at this link.. In my main blog I'm using Mathjax. With Katex, commands are not rendered.. When I upgraded to version 10 it worked normally on all blogs. Now you just need to switch to a more stylish source. Has as?\nUsing the environment \\ begin {equation *} does not render.. > We haven't supported that particular environment yet\nAh! \\ begin {equation *} would be just one more.. @ronkok How do I recommend a suggestion for Katex in order to implement the specific environment for: \\begin {equation *}? It would be too useful for many blogs.. @edemaine @ronkok Forgive me. It's confusing for me too, because besides not understanding much of Latex, I still have to worry about translating from English to Portuguese (Brazil).\nWhat I'm trying to render with Katex is this page that has {equation}, {equation *}, {bmatrix}, {cases} and {gather}. I saw your result on this page. Not everything was rendered.\nThank you for your attention.. @ronkok You believe these environments will be implemented in the future. If so, I'd rather wait for the new versions. \nOn my page, Katex renders everything perfectly because I do not use {equation}. But I would like to help friends.\nOnce again thank you for your patience. This is admirable today.. ",
    "cavaunpeu": "@xymostechI built a React component to render inline LaTeX:\n``` javascript\nimport React from 'react'\nclass InlineLatex extends React.Component {\n    render() {\n        var math = katex.renderToString(this.props.data);\n        return ();\n    }\n}\nmodule.exports = InlineLatex;\n```\nI then render the component in a separate .js file as part of an ordered-list:\njavascript\n<ol>\n    <li>\n        foo <InlineLatex latex={\"x_{a,b}\"} /> bar\n    </li>\nThe result is as follows:\n\n. hehe. bingo. closed. thanks @spicyj and @xymostech.\n. ",
    "netw0rkf10w": "@sthoch: yes, that's exactly what I meant :D \n. @sthoch : oh yes, you are right, this should be assigned to the autorenderer. Thanks.\n. Nevermind, I simply run \"make\" and the build is created as expected.\n. @xymostech :+1: Thanks! \n. @xymostech The contextual menu is just an example. If overriding the right-click is annoying, how about the left-click? Left-clicking the formula creates a popup window with LaTeX source code. I think that's not a bad idea.\n. @sophiebits @xymostech  Think about math forums. The equations are not there to be read only. For example, if somebody posts a question with a lot of equations, then for people who want to answer the question, it would be much more convenient for them to be able to copy the equations.\nI am an administrator of a (big) math forum, and this is the most important reason why I'm still using MathJax (I once replaced it by KaTeX as an experiment, but that failed quickly). MathJax is very flexible: one can disable the option to view the source code, or can even disable completely the contextual menu.. @ylemkimon @edemaine  Awesome! I will definitely try it on my forum (not now but maybe in a month).\nThanks @edemaine for the great extension! The current \"Select and copy\" is already a very good option, but I think it would be nice to have an additional one that does not require selection (for example: right-click on the formula and \"Copy LaTeX code\", which I think is the best). Unfortunately I am currently not available to do it myself (although you have done almost all the work with copy-tex) as I'm busily writing my PhD thesis :(. ",
    "rdnz": "I just opened a new issue, actually I am looking for the same feature as this issue does.. ",
    "medonja": "That would be awesome. It seems like the project needs some revival :)\n. ",
    "oblitum": "@xymostech ok, thanks!\n. ",
    "polemon": "OK, I guess I'll let the BPG developer know about this. Maybe he'd be willing to change things.\nIn the mean time, I'll see if I can find a work-around and post here if I find anything.\n. ",
    "shd101wyy": "Thank you very much! \nKaTeX is a fancy library!\n. ",
    "msridhar": "Happy to address comments.  I Googled around for MathML and small caps, but couldn't find anything helpful.  So, I just used the same fontMap entry as \"mathrm\" in buildCommon.js.\n. Just a ping for any feedback on this.  Happy to make changes.\n. \nIs this the kind of screenshot you're looking for?  Let me know if I should try some other text.\nOne thing you can see is that space characters seem to be getting ignored.  Typically they won't be needed, but I can try to look into why this is happening.\n. Thanks for the feedback! I'm on vacation now, will look in a couple weeks.\nOn Sat, Jun 25, 2016, 6:24 AM Kevin Barabash notifications@github.com\nwrote:\n\nAs for MathML support, you could try the ab and see that works in your favorite\nMathML viewer.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Khan/KaTeX/pull/472#issuecomment-228497456, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AALyUWgRakucjZCin1S4PS7peXID4_QPks5qPHw1gaJpZM4IYj92\n.\n. @edemaine unfortunately I never had the time to pick up this work, and I likely won't have time soon.  The changes I made were quite simple, but I'm not sure what exactly it would take to address the remaining comments.. Hey, so if someone else could take this one over the finish line that'd be\ngreat. I'm not going to have time in the near future.\n\nOn Wed, Sep 13, 2017, 7:04 PM Kevin Barabash notifications@github.com\nwrote:\n\nI believe that the browser is doing something to the font to generate the\nsmall caps. I found a tool called cap-height\nhttps://github.com/sebdesign/cap-height that can measure the height of\nsmall caps so we could use it to figure out what the height should be.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Khan/KaTeX/pull/472#issuecomment-329347752, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AALyUV4oF0PJSJuodp8XQx1UawmAS_0rks5siInLgaJpZM4IYj92\n.\n. \n",
    "lolmaus": "I've just tried, and these ones fail: #$%^&{}. I expect all of them to work without escaping, except for curlies which should obviously be escaped.\n. @spicyj How can you start math mode from inside \\text{}?\nPS That list is not explicit, some other chars might be broken as well.\n. @spicyj Why not \\text{my favorite variable is } x? If you allow math mode inside \\text, should you also allow \\text inside math mode inside \\text?\nWoah, I just tried it in MathJax and it does allow such nesting.\nAnyway, your code doesn't work in KaTeX! And doing \\$ inside \\text should also be possible, right?\n. Also ran into this issue. It looks like a bug to me.\n. @xymostech So there's no way to render this with current version of KaTeX? \n. @xymostech Well, maybe some dirty hack to make it look similar? I'm absolutely not familiar with TeX, can't come up with a workaround on my own.\n. Thank you so much @sthoch! :bow:\n. ",
    "shuttle1987": "From by discussions in this PR https://github.com/Khan/KaTeX/pull/540 I now realize that throwOnError only changes how KaTeX handles the behavior of unsupported TeX commands. It doesn't currently deal with other parsing related issues, those will still throw exceptions.\n. I agree that the README is not the best place for this and that putting it in with the other documentation would be a lot better. Where are the docs for this project?\n. Implemented in https://github.com/Khan/KaTeX/pull/540/commits/5c38ab96089d527f5b356ec1966bb70647f5597d\n. For the sake of not wanting to break existing code I tried using the library with String objects and the library appeared to work OK on the limited cases I tried. While I personally don't use String objects in any of my code that uses KaTeX I wouldn't feel comfortable making the decision to throw an exception on getting one. I think a maintainer would have to make the call here, allow String objects or not?\nI would more than happily add test cases for the other types as well. \n. Would it be better to say something such as:  \"Note that the throwOnError option only deals with how missing TeX commands are handled by the KaTeX parser. Other invalid input such as mismatched braces will always throw exceptions regardless of the throwOnError setting.\"\n. Suggestion of testing for more diverse types done in https://github.com/Khan/KaTeX/pull/540/commits/95acda3824e6587160554e33ea0674aaaf63f017\n. I added a test case simply for not throwing on correct types being supplied in https://github.com/Khan/KaTeX/pull/540/commits/3dc527683003d918f487e09f4d7dc810e0e5a894 I also think it's good to not advertise using String objects. I could see reusing some of the tests from describe(\"An HTML font tree-builder\", with String objects if the coverage tests are desirable. I can add those test cases if that is desired.\n. Tests implemented in https://github.com/Khan/KaTeX/pull/540/commits/cd584e0a1531f087c615577d018ededef061ed7d\n. After the discussion here I see I don't have the required understanding to make this change in the README/documentation so I've removed it from this PR in this commit: https://github.com/Khan/KaTeX/pull/540/commits/42e21c2232e55dc360578244feee280a00510ae4\n. ",
    "pouriaMaleki": "Thanks @xymostech and other dudes on the team, nice and tidy work :)\nCan you guys give me some tips and directions for adding new mono-space font for those chars and metrics and how to show them (escape from throwing)?\n. I do think these 2 PR's might be useful for me, right?\nhttps://github.com/Khan/KaTeX/pull/409/files#r60113059\nhttps://github.com/Khan/KaTeX/pull/410/commits/d2ae5ed2f374a1b8ef404f312dd335bf5cfb810c\n. Unfortunately not completely, I did some research and code reading, but my\nfriend @hosseinAgha started to work on it.\nOn Thu, Mar 2, 2017, 10:32 PM Sassan Haradji notifications@github.com\nwrote:\n\n@pouriaMaleki https://github.com/pouriaMaleki were you able to use\nPersian characters in KaTeX?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Khan/KaTeX/issues/476#issuecomment-283746595, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ACHRqh78P-T4UXzh803QOSU3295UsS9Aks5rhxIngaJpZM4IhXtG\n.\n. How it's going? @kevinbarabash . \n",
    "HosseinAgha": "@sassanh I'm going to fix this in the following month. \nI will mention this issue as soon as pull request was ready.. @kevinbarabash I started to migrate the remaining files to use ES2015 classes - \nI had to make some minor changes to .eslintrc and add transform-class-properties plugin. \nHere is the first commit. all the tests are passing. I will continue if this style okay?. Yes .eslintrc changes are here. I think we can squash some of the commits at the end.\nI've already updated the Parser.js and all the tests are passing. \nYou can find the updated Parser.js here. Also the changes can be found at the end of this  commit (commit is folded because of the long size)  . I had to move all the constants before the prototype functions to a single block at the top the class.. Sure. \nI didn't do this because statics were not constants of course. . @kevinbarabash Katex uses pure node for jasmine tests and rely on node.js support of ES6 features so I couldn't make the static work with existing configuration.\nso I can think of 3 solutions:\n   - Update tests to compile modules to es5 before doing anything\n   - Use static-accessor-properties whenever we wanted to use a static property (It works everywhere but using it for our constants looks a bit awkward)\n   - Abandon migrating static functions altogether and use same old ES5 syntax for that. Fantastic! Thanks.. @kevinbarabash I recently found out that for the development server (server.js) you serve ES6 untranspiled code to the browser and a transpiled version of that on a /babel route.\nI think we should transpile the code by default and forget about the /babel route because import and export support is still experimental in all browsers.. Thank you all the KaTeX team specially @kevinbarabash for all your help and patiently answering questions.. @kevinbarabash All Done.. @kevinbarabash Sure, if you did not do anything yet. \nI had problems with server.js file you have a babel and none babel endpoint for it. Is it OK to change it to only use babel transpiled files?\nI will start merging as soon as you give a OK here.. @kevinbarabash I've described the problem at the end of\nthis issue. @kevinbarabash OK\n. @kevinbarabash I created the PR (#756) for server.js fix. I working on fixing conflicts now.. @kevinbarabash everything is merged and all tests are passing.\nCould you please consider merging this before any new merge? because fixing merge conflicts in this scale is a bit time consuming and git is a bit dumb in this case. Thanks. . All Done. I'm really fan of adding a lightweight plugin system to add fonts to KaTeX and I also don't like MathJax way of handling extensions. I'll be happy to contribute and I think we may discuss this in a different issue in detail.  \n@edemaine Regarding the Farsi patch:\n- Yes monospace fonts are not very beautiful in Farsi either. I cannot explain the problem with Farsi and Arabic characters better than this W3C picture. as you can see Farsi and Arabic letters are cursive and can join and change size. In other words Farsi letters are semantically encoded to unicode so a single unicode code point may represent multiple glyphs. using a monospace font does not eliminate but minimizes this issue by preserving a fixed character width.\n- Yes IMHO unicode is the best way to represent Farsi and Arabic in web.\n- Good Idea thanks! For Persian in TeX we use XePersian package. In the package I found a  IranianSans font and I will investigate more but as I said due to the way KaTeX renders Math and cursive nature of Farsi alphabet I'm not optimistic using these fonts creates best results.\n-  We need Farsi and Arabic only inside \\text as far as I know schools don't use Farsi variable names at all. So Farsi mathords in math mode is not required.\nWe also need Persian numerals in math mode (textord) they are exactly a map of normal english (arabic to be precise!) numerals but adding support for them is absolutely necessary because most of the K12 mathematics (all of Persian schools) use these numerals you can find a table showing this mapping here.\nI've added both Farsi in \\text and Farsi (eastern arabic) numerals support in my proposal.. @edemaine @kevinbarabash thank you for your comments.\nAs I understand you both think we need a plugin architecture in order to add Persian-Arabic (or any new language + font) support.\nSo I'll work on that then I'll create a new pull request with my proposal plugin architecture.. @ronkok @kevinbarabash Because of huge changes in #670 I should change some of my plans for adding plugin system to KaTeX. This is to only say that I have not given up on this but I was too busy lately and I need to take a deep look inside #670 changes and your discussions under the PR before finalizing any idea.  . As I described above the biggest challenge to add these alphabets is that we have a map of unicode number --> glyph font metrics in KaTeX font metrics file it is a many to one map so for each unicode character we can have a single metric. but in Persian literature for example each unicode character maps to up to 4 glyphs! So we need to have a many to many mapping function to find a glyph metrics based on it's unicode and it's context. Only solution that I found out was to use a monospace font so we can have roughly same metrics for each unicode character.\n@edemaine, @kevinbarabash, @ronkok your possible solutions and ideas on this issue is highly appreciated.. @ronkok Cool! I did not know that you handled horizontal width using css tricks in #670! So I think most of my concerns about horizontal aligning of the math symbols were unnecessary after all. Thanks for #670. \nI think I should only worry about vertical changes in glyphs now. . @kevinbarabash good point. We always use Persian and Arabic characters that need to collate inside \\text{} in our schools. So fortunately it shouldn't make any problems. in other words, we don't have math mode mathord variables in Persian and Arabic.\nBut we need Persian numbers in math mode and fortunately these numbers don't need to be collated. . @kevinbarabash sorry that was an unwanted merge on my side.. @kevinbarabash thanks for opening this issue! \nI think we don't need to start with a full featured plugin system. We can start with a MVP api only supporting symbols and metrics and new styles then we can continue to support complex functions.\nI investigated some of other good plugin systems in js ecosystem. Webpack is an interesting example because they are generally a compiler like KaTeX. I think we don't need a plugin system as sophisticated as webpack but we can use awesome ideas behind it. You can find the api here.. I think we can have 2 different approaches for this:\n  1. Async: make plugins to subscribe to events (like webpack) and call all event handlers with functions that we want to expose like defineSymbol as their callback for example. this way we have lots of flexibility in the future but it generally have some conflicts with synchronous nature of KaTeX. In this approach we can add all plugins once before any compilations and use the changed katex object or make KaTeX to call plugin functions on every compilation to obtain symbol values for example. This approach is also more fun! because creating event bus in js is always easy and fun :)\n  2. Static & Sync: Add plugin changes to library before doing any compilation. The main advantage here is that we have a slightly faster synchronous pipeline. We also don't have to call new callbacks on different places around the codebase.\n   ```javascript\n   import katex from 'katex';\n   import katexPersianArabicPlugin from 'katex-persian-arabic-plugin';\n   katex.plugin(katexPersianArabicPlugin);\n   katex.render(someFormulaWithPersianStringm, element);\n   ```\n   ```javascript\n   // example plugin api with main api exposure \n   import { symbol } from 'katex-plugin-utils';\n   module.exports = {\n        getFontMetrics() {\n            return {// object containing map of unicode number to glyph dimensions }\n        }\n        getSymbols(createSymbol, defaults) { \n            // createSymbol does not change anything on the main lib and is provided by `katex.plugin`\n            const { groups, modes, fonts } = defaults;\n        }\n   }\n   ```\n\nUsing either approach we can have a api like above. but internals of katex.plugin may differ.  \nHere we don't expose defineSymbol (and maybe a appendFontMetrics function!) to every plugin but we expose them to katex.plugin function and this function uses them to add plugins' symbols or add new fontMetrics, this way we can also have a layer of safety.\nI think it would be very interesting if we had a plugin boilerplate so every user could start from there. . @ylemkimon I dropped the cleanup commit. @kevinbarabash \n- I reverted all remaining cleanups \n- Added defineSymbol to main katex object only in this PR\n- Removed old PluginManager class and katex.plugin function\n- Removed the yarn.lock from the PR\n- Created a new PR for changes related to addFontMetric: katex #1269\n- Rebased and squashed all the commits\n- Abandon exposing defineFunction altogether as it has to be done in another PR . @kevinbarabash everything is fixed, I think we are ready to merge.. Please take a look at persian-katex-plugin this is a complete implementation of Persian formulas for KaTeX using this branch. I tested it against around 100K Persian formulas and the formulas are beautiful!  \nYou can also find out how I generated the metrics using generateDefaultMetrics.js and ultimately extractMetricsFromTTF.js.\nI'm not sure how to add proper tests because these test need to add new fonts and metrics to the KaTeX object. \nI also would be very happy if I could add the generateMetrcis.js as a utility function to the main library. . Thank you @kevinbarabash for your review.\nI'll start fixing the issues tonight.   . @kevinbarabash Is it OK if we warn the user if one of the default KaTeX metrics was being overwritten?\nsomething like (in setFontMetrics): \njavascript\nif (metricMap.hasOwnProperty(fontName)) {\n  console.warn(`metrics for ${fontName} is being overwritten by a plugin`)\n}\nUnfortunately there is no way for this to pass linter. I think after adding more functions for plugins to use we can consider plugin developers as another group of KaTeX users so It would be great if we warn them specially in none production environments.\nUsing debug package would be a good option if we want to be standard.. I added normal and snapshot tests as you requested and fixed the conflicts. I think we are ready to merge.\n@kevinbarabash Thank you for your review.. @ronkok I think it would be better if we mention the plugin after the #1269 merge. \nAlso I only support Persian formulas in the plugin. Adding Arabic support is a much more complicated task and should be handled in another plugin as Arabic formulas are written right-to-left.  . @kevinbarabash sorry I missed that one. Fixed.. @kevinbarabash Adding classes adds about 4 spaces to each line. I can decrease it to 84 but a number less than that makes a lot of lint errors. \nmost of the Parser code (about 13 lines) would have error for example.. Done\n. Done. These functions are basically internal utilities of KaTeX. I thought having an additional abstraction layer in API makes room for future breaking changes without breaking the API.\nI did not think exposing them to normal users was a good idea on the other hand advanced users can use them without defining a new javascript class (plugin) so I'll directly expose them as you're OK with it.. Yes I refactored the code. \nPlease checkout my following comment.. It will not work until user defines a font-face and adds appropriate font metrics to use a new font. \nI will revert this as we have to deal with this issue in #1269. These types are not much useful for katex users until we add katex libdef to flow-typed project or use something like .js.flow files when they got stable.\nAfter deleting this I don't think we need any new tests in this PR.\n. It shallowly merges the source object into destination object so sub objects will be overwritten take a look at this link. \nIt was a intended behaviour to prevent users from partially changing a font metrics. as fonts come as a whole file so their metrics should also come as whole.. I initially made a mistake in my code and some of tests failed but the error I got was result.message is not a function. I looked at the documentation of jest and found out that message should be a function. \nIt seems like tests for these parts of katex-spec always passed so we never got any error that covered these error types so we never found out.   . It is the same line that prevented the failing tests mentioned above.\nIn some cases font was undefined. It looked strange to me but I assumed this is needed in somewhere else so I did not change the old behaviour. \n. Done. Done. Yes, good idea. I think __defineFont can be added besides setFontMetrics and use it as a utility function.\nWhat is the difference between baseFontName and fontFamily here?. ",
    "j13z": "\ud83d\udc4d \n. ",
    "arogozhnikov": "Is there any support for macros in auto-render?\nIs defining macro in settings currently the only option?. Hi @kevinbarabash, thanks for pointing.\nIt didn't work with 0.6 (I see release was before this merge), so I as I understand current stable code doesn't have define / macro or any other way to create shortcuts, I'll have to write my own microcode. . @gagern is support planned also in auto-render?. ",
    "librilex": "I would like to add the \\sfrac macro to KaTeX. So I tried this:\njavascript\nkatex.render(\"\\\\sfrac{1}{2}\", div, {macros: {\"\\\\sfrac\": \"^{#1}\\\\!/_{#2}\"}})\nBut I get the following parse error: Expected '}', got '#' at position 3: ^{#\u03321}\\!/_{#2}. I also tried ## but I still get the same error. How can I define a macro with more than one input?. Which font did you use? On the demo site entering \nlatex \nm=10^{-10} \\cdot \\text{\u00c5}\nworks perfectly fine:\n\nAs well as\nlatex\nm=10^{-10}\\cdot \\text{\\r{A}}\n\nKaTeX does not support the commands \\aa or \\AA, though.\nSo I assume it is a problem with the font you are using?. ",
    "balthild": "Can we define macros with JS?\nFor example, \\pdv{f}{x} \u2192 \\frac{\\partial f}{\\partial x} and \\pdv{f}{x}{y} \u2192 \\frac{\\partial^2f}{\\partial x\\,\\partial y}. We cannot do this with only #s.. ",
    "runemadsen": "A quick update. I've pinpointed the problem down to the following CSS:\n.katex .mfrac .frac-line:before {\n    border-bottom-style: solid;\n    border-bottom-width: 1px;\n    content: \"\";\n    display: block;\n}\nBecause of display:block, the renderer makes the line 100% of its parent. I tried display: inline-block, but it moved the line. Thoughts?\n. cc @shiffman. Let's test this.. ",
    "deltakam": "Then, it wouldn't it be great to have \\textrm as an alias to \\text? Equations are usually not written just to work with KaTex.\nI would vote for aliasing \\mbox, too.\n. I agree that we should do it properly, but if it will take forever, it would be better to have it as an alias -- it will have different effect so it might be ugly but for most cases not too serious. I would rather have it ugly than having the whole equation not drawn properly.\n. ",
    "i-am-the-slime": "How does this work? Do I need to configure something special?\nI just get this:\nParseError: KaTeX parse error: Expected '}', got '\u00df' at position 9: \\text{Ma\u00df\u0332einheit}. Same for \u00e4 etc.. ",
    "HStaaf": "@kevinbarabash Shoot :( can it be mitigated by just increasing the font size perhaps? Are you guys working on a fix?\n. @spicyj one last question. Is there a font size that is considered optimal for rendering katex?\n. ",
    "jbg77": "I have a template:\n```\n\n\n\n\n\n\n\n2016-2017\n\n\n  <h1 style='margin:0'>{{subject}} - {{title}}</h1>\n  <h2 style='margin:0'>{{notions}}</h2>\n\n\n\n  <h2 style='margin:0;'>Carnet du tuto</h2>\n\n\n\n\n\n\n                      text\n                  \n\n\n\n(x = \\frac{1}{4})\n\n\n\n\n  body {\n    @import 'https://fonts.googleapis.com/css?family=Roboto+Condensed';\n\n    font-size: 20px;font-family: 'Roboto Condensed', sans-serif;\n\n    }\n    h1, h2{\n      font-weight: 525;\n    }\n    blockquote {\n    padding: 10px 20px;\n    margin: 0 0 20px;\n    font-size: 17.5px;\n    border-left: 5px solid #eee;\n    }\n    table {\n    border-spacing: 0;\n    border-collapse: collapse;\n}\n\n```\nSo I load the css in head tag, then I transform MathJax tag to Katex\nvar html = Spacebars.toHTML( dataContext, Assets.getText('lesson_pdf.html') );\nvar re = /((.+))<\\/span>/gmi;\nvar htmlR = html.replace(re, function(match, i,g){\n  return Katex.renderToString(i);\n});\nAnd I put the html in phantom js: \n```\n..\npage.settings.userAgent = 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.120 Safari/537.36';\npage.content = html\nwindow.setTimeout(function () {\n            page.render(documentPath);\n            console.log(msg)\n            phantom.exit();\n        }, 1000); \n```\nI test phantomjs on khan.github.io, and no problem with fraction.\nEdit: I add <!DOCTYPE html> declaration and it seems to work, thank you a lot !\n. It's \\vec{f}\nI'm using phantomJs, with the doctype: https://github.com/Khan/KaTeX/issues/514\n. I will look that\nThe code is simply \\frac{\\partial V}{\\partial r} < 0\nAnd what about the support of char like: \u00e9, \u00e8 etc\nThank you by the way :) \nEdit: same problem with &\u0332nbsp;and '  ' (space), and it's why < or > doesn't work,  because they are html entities \n. ",
    "jason-s": "Is there something I can override for basic.css to fix it?\n. This was Chrome on Windows 7 (whatever the autoupdater is at, as of today). I will try with Firefox/IE/Opera tomorrow and see how they do.\nI'll also try <!DOCTYPE html> without the XHTML1.0 Transitional, not sure whether that will screw up Sphinx but it's worth a shot.\n. OK, updated info (all on my Windows 7 PC):\n- Chrome Version 51.0.2704.103 m: this is the version I use as of today, problem occurs\n- Firefox 47.0: same problem\n- IE 11: same problem\n- Opera 12.16: same problem\nIf I use <!DOCTYPE html> the issue goes away. (so this may be a valid workaround for me.)\n. That should be added to the front page https://github.com/Khan/KaTeX\n. Is there a way to get around this without \\\\ ? I'm using Sphinx which automatically wraps the whole thing in a \\begin{split}\\end{split} if it sees \\\\.\n. excellent... is there a release plan or roadmap for upcoming releases of KaTeX? (just wondering when this propagates to the default version available on the webpage https://khan.github.io/KaTeX/ ). I rewrote test case for one equation (so it can be easily tested on the KaTeX page https://khan.github.io/KaTeX/)\n\\begin{aligned}\nA*B+C-D = E \\cr\nA_1 * B^2 + C_3^4 + D^5_6 = E_0 \\cr\n\\mathbf{A}*\\mathbf{B}+\\mathbf{C}-\\mathbf{D} = \\mathbf{E} \\cr\n\\mathbf{A}_1 * \\mathbf{B}^2 + \\mathbf{C}_3^4 + \\mathbf{D}^5_6 = \\mathbf{E}_0\n\\end{aligned}. At larger font sizes this is less of an issue (although still noticeable)\n\n\n. more examples (this one from my work laptop:\n<p>\\( K_m = K_e\\sqrt{\\frac{3}{2R}} \\)  (motor constant, N&middot;m/&radic;W)</p>\n<p>\\( \\tau_e = L / R \\) (electrical time constant, s)</p>\n<p>\\( \\tau_{m1} = J / K_m{}^2 \\) (mechanical time constant, s)</p>\n<p>\\(\\xi = L_q / L_d \\) (saliency ratio)</p>\nKaTeX:\nhttps://cdn.rawgit.com/jason-s/c913d7810ea9a72138eadbe3f87135dd/raw/dfbba51a989db940bb341669210acf19350cace1/katex695.html\n\nMathJax:\nhttps://cdn.rawgit.com/jason-s/c913d7810ea9a72138eadbe3f87135dd/raw/37cf37aa54b4c83fe3c80e5fa013cab764173a3b/katex695-mathjax.html\n\n. > I hesitate to make our fonts thicker just to be like MathJax.\nIt's not \"just to be like MathJax\", it's to be more readable on the web. When I find PDFs or Postscript files of LaTeX documents on the web, I groan. They look great on paper. They look poor on a screen, due to limited resolution.\nHere is another sample: https://gist.github.com/jason-s/816b732498b9d356013ae4283bac6ffc along with some screenshots (Lenovo P51 + Win7 + Chrome or Acrobat DC; my goof for copy-paste errors foo/bar/baz and for not using https:// in the Open Sans font stylesheet)\nPDF screenshots:\n125%:\n\n110%:\n\n100%:\n\n90%:\n\n80%:\n\nKaTeX 0.9.0:\n125%:\n\n110%:\n\n100%:\n\n90%:\n\n80%:\n\nMathJax:\n125%:\n\n110%:\n\n100%:\n\n90%:\n\n80%:\n\n. Here are some side-by-sides: (from left to right, KaTeX 100%, Adobe Reader 125%, MathJax 100% -- the Adobe Reader is doing scaling, not re-rendering, so I wanted to show something comparable in size)\n\nA couple of specific observations:\n\nThe 1, 2, 3, R (in 3/2R) and infinity in KaTeX look narrower (horizontally smaller) than in LaTeX or MathJax\nThe minus signs in KaTeX look thinner than in LaTeX or MathJax (I know, thanks, Mr. HTML Rendering Model, for antialiasing)\n. Perhaps if there were an option for someone to choose \"as-LaTeX-as-possible\" or \"robust for Web viewing\".\n\nI would choose the latter.. Or here's e^{-1234567890abcdefghijklmnopqrstuvwxyz\\alpha\\beta\\gamma\\delta\\epsilon}\n(top-to-bottom: KaTeX 0.9.0 100%, LaTeX + Adobe Reader 125%, MathJax 100%, all on Lenovo P51 + Win 7 + Chrome / Acrobat DC)\n\n. without the superscripts:\n(top-to-bottom: KaTeX 0.9.0 100%, LaTeX + Adobe Reader 125%, MathJax 100%, all on Lenovo P51 + Win 7 + Chrome / Acrobat DC)\n\nIn this case, KaTeX is very close to LaTeX whereas MathJax opts for more bold, although the height of the characters is greater in KaTeX (at least in the numbers; I can't tell with the letters).. At 150% zoom it looks ok:\n\n. (same example case as in #695). hmm... will try, I have MiKTeX installed but I use it extremely rarely, just for TiKZ work.. \nhere we go:\n```\n\\documentclass{article}\n\\begin{document}\n$ K_m = K_e\\sqrt{\\frac{3}{2R}} $  (motor constant, Nm/root-W) \n$ \\tau_e = L / R $ (electrical time constant, s) \n$ \\tau_{m1} = J / K_m{}^2 $ (mechanical time constant, s)\n$\\xi = L_q / L_d $ (saliency ratio)\n\\end{document}\n```\n(courtesy of TikzEdt)\n\nPDF output: katex695-latex.pdf\n. >Hmm, yeah, the closer I look at the 150% zoom vs. the LaTeX rendering, the closer they look. So I'm not sure there is a bug here (viewing LaTeX as the reference specification). \nThere is perhaps a philosophical issue here. TeX (and LaTeX), as far as I am aware, has always been aimed at high-end high-resolution typography -- namely for printing or for viewing in applications that can zoom in and see equations in detail (dvi viewer, PDF, postscript). MathJax and KaTeX are specifically aimed at on-screen viewing. Following LaTeX output as a reference makes sense for large-size output, where quantization issues are not significant, but for small-size output, the readability of individual pixels is important. Furthermore, the default font size in browsers is closer to this small-size case rather than the large-size case. \nNot sure how to resolve this issue, given that KaTeX sticks to HTML+CSS, and pure scaling doesn't solve this problem.. I wonder if this is a fonts issue; KaTeX looks pretty good on my Chromebook (at least at 100% size) but has problems on my Windows 7 laptop. Both show up as KaTeX_Math rendered fonts... odd.. >Are you running Chrome on both Chromebook and Windows 7? (There are differences even between Chrome and Firefox.) \nYes. (see updated issue description)\n\nAre they identical DPI screens? If so, it'd be interesting to compare screenshots.\n\nhmm, not sure, also not sure if that's relevant; the Lenovo W520 laptop has a 15.6\" 1920x1080 display, but I also have a 24\" external monitor with 1920x1080 that I use and has the same issue. Same pixels, after all -- unless I'm missing something obvious.\nRight now I am at work with an ASUS 27\" 2560 x 1440 external display (CPU = Lenovo W520 running Windows 7) and it has the same problem in Chrome at 100% resolution; here's a screenshot below, which again, I would expect to have the same pixel content independent of video cards or displays... the determining factor should be (?) the fonts that are loaded and how the browser (Chrome in this case) renders them.\n\n. Just for kicks, here are a couple of different zoom factors in Chrome (on my W520 laptop running Windows 7): (100% was in previous comment)\n110%:\n\n125%:\n\n90%:\n\n80%:\n\n75%:\n\n67%:\n\n. Hmm, I tried experimenting in Chrome's developer tools console to tweak the CSS for the .katex .mfrac .frac-line:before rule:\nwas:\nborder-bottom-style: solid;\n    border-bottom-width: 1px;\n    content: \"\";\n    display: block;\ntweaked to:\nborder-top-style: solid;\n    border-top-width: 0.05ex;\n    padding-top: 0.07ex;\n    content: \"\";\n    display: block;\nand removed the .katex .mfrac .frac-line:after rule which was the following (why is border-bottom-width in terms of em (width) rather than ex (height) ?)\nborder-bottom-style: solid;\n    border-bottom-width: .04em;\n    content: \"\";\n    display: block;\n    margin-top: -1px;\nand got something that sort of looks better but it gets quantized by Chrome to jostle up or down to join the numerator or denominator depending on the resolution.\nI guess I should just blame Chrome's renderer (or the CSS spec) for the way it handles quantization and rounding to determine exactly where the pixels go.\nSigh. I have a real job, back to it..... https://cdn.rawgit.com/jason-s/c913d7810ea9a72138eadbe3f87135dd/raw/8cabc52f75e3b162eaff55d13eb8d4b34ccfce64/katex695-0.9.0.html\nOn Lenovo P51 + Chrome:\n100%: (poor spacing)\n\n110%: (good)\n\n125%: (good)\n\n90%: (poor spacing)\n\n80%:  (very poor spacing)\n\n75%: (very poor spacing)\n\n67%: (good)\n\n. Same on Acer C720 Chromebook:\n125%: (good)\n\n110%: (good)\n\n100%: (good)\n\n90%: (mediocre)\n\n80%: (very poor spacing)\n\n75%: (very poor spacing)\n\n67%: (good)\n\n. ",
    "arnaudriegert": "@kevinbarabash Yes I am also working on a fix on my side, but that would only apply to this specific scenario. I thought a KaTeX-side pre-cleaning would be appropriate too.\n. ",
    "kevinburke": "Thanks!\n. ",
    "erichake": "Well I'm really new to the katex code, but I understood that for the dom part, everything rely on css classes (for span elements). That's probably why it's a bit more difficult to get things such arrow ends or widehats... \nTo realize this in the dom part, I used a css class with 0px width but with borders. The result is four arrow heads (left,top,bottom,right), but each of theses arrow heads are isoc\u00e8le triangles (as you can see in the example of my first post). So yes it's not as beautiful as the one you get in real LaTeX results... if someone have an idea of another css trick I could use for a better result, you're welcome !\nrightarrow in katex is a unicode symbol. I didn't use this because I can't see how you could manage the stretch effect above vectors.\nOn the other hand I implemented this overrightarrow also for the canvas version of katex (thank's Martin!), and it looks much more nice I think:\n\nWith canvas everything is much easier, because you can draw things exactly the way you want...\n. With the unicode 27A4 (\u27a4), I have now this result in the DOM version:\n\n. My first try was to use this unicode 2192 (rightarrow), but unfortunately this is not only the arrow head, but the whole arrow... So when you use it in css you have to stretch it, and it doesn't look great in some cases. I also tried to hide the line arrow behind an overline, and again the result was not so good in some cases.\n. All my tries to superimpose lines and rightarrow failed depending on which browser or on which font size... So I changed radically my approach, as I saw that the \\u2212 (minus) was in katex lib, and with the same vertical position characteristics than the rightarrow. I also discovered that mathjax uses this \\u2212 to render the overrightarrow.\nSo now my overrightarrow is really close from LaTeX standards:\n\n. ",
    "asmeurer": "I didn't notice it was using \\dots instead of \\ldots. Perhaps there should be a third issue about the error message. If I replace \\dots with a fake command, like \\dts, LaTeX gives me this message:\n! Undefined control sequence.\nl.131 ...{p,q}^{m,n} \\left(\\begin{matrix}a_1, \\dts\n                                                  , a_n & a_{n+1}, \\dots, a_...\n!  ==> Fatal error occurred, no output PDF file produced!\nAnd MathJax renders the whole equation with a red \\dts.  The KaTeX error message doesn't indicate what went wrong. \nAt any rate, \\dots doesn't sound like something you should ever use. \n. Also, it's funny, 5 years ago I reported \\middle not working to MathJax, and they gave a similar response. \n. In case anyone comes here looking for a workaround, you can use\n\\left.\\left( \\frac{1}{x} \\right| x \\right)\nif the left side is larger and\n\\left( x \\left| \\frac{1}{x} \\right) \\right.\nif the right side is larger (I don't think there's a uniform workaround for both cases, which is probably why \\middle exists in the first place).\n. ",
    "bryanph": "I get the same for horizontal spacing:\n```\n\\begin{aligned}\nx =\n\\begin{bmatrix}\nx_0 \\\nx_1 \\\nx_2 \\\n... \\\nx_n\n\\end{bmatrix}\n\\in \\text{ }\\mathbb{R}^{n+1}\n&\n\\theta =\n\\begin{bmatrix}\n\\theta_0 \\\n\\theta_1 \\\n\\theta_2 \\\n... \\\n\\theta_n\n\\end{bmatrix}\n\\in \\text{ }\\mathbb{R}^{n+1}\n\\end{aligned} \n```\n\nAny way to specify the horizontal spacing?\n. ",
    "wster": "You're right! I had relocated the fonts folder, which resulted in the issue.\nSorry for the false alarm.\n. ",
    "sidorares": "thanks @gagern , this is very helpful! Yes, basically my question is a duplicate of #376 \n. ",
    "bzsy": "Thank you guys. {=}\\!{=}\\!{=} works well.\n. ",
    "connorshea": "Unfortunately since KaTeX uses LESS we can't reasonably add it directly to our assets since we use SCSS and would rather not have two parsers to deal with.\nSimilarly, the JS is fairly complex so an unminified-but-compiled katex.js would be great rather than having to convert the build process to work with our asset pipeline.\nWould be happy to work with you guys/gals on this :)\n. ",
    "khanbot": "CLA signature looks good :+1:\n. CLA signature looks good :+1:\n. CLA signature looks good :+1:. CLA signature looks good :+1:. CLA signature looks good :+1:. Hey @tabatkins,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. Hey @mateddy,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. CLA signature looks good :+1:. Hey @edemaine,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. Hey @pashinin,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. CLA signature looks good :+1:. CLA signature looks good :+1:. Hey @alexpearce,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. Hey @j-lenoch,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. Hey @j-lenoch,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. Hey @j-lenoch,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. Hey @Flauschbaellchen,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. CLA signature looks good :+1:. CLA signature looks good :+1:. CLA signature looks good :+1:. Hey @jsmaniac,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. CLA signature looks good :+1:. Hey @johnmcconnell,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. CLA signature looks good :+1:. CLA signature looks good :+1:. CLA signature looks good :+1:. CLA signature looks good :+1:. CLA signature looks good :+1:. Hey @hblumberg,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. Hey @marcianx,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. Hey @schmuli,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. Hey @schmuli,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. Hey @spontaliku-softaria,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. Hey @raoulb,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. Hey @rrandallcainc,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. CLA signature looks good :+1:. CLA signature looks good :+1:. CLA signature looks good :+1:. CLA signature looks good :+1:. Hey @garciparedes,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. Hey @aterenin,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. CLA signature looks good :+1:. Hey @ysawa,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. Hey @glebm,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. Hey @glebm,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. CLA signature looks good :+1:. CLA signature looks good :+1:. CLA signature looks good :+1:. Hey @ccorn,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. Hey @Syndesi,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. Hey @jl2922,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. Hey @dudko,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. CLA signature looks good :+1:. Hey @LukasDrgon,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. CLA signature looks good :+1:. Hey @youqad,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. Hey @ian-r-rose,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. CLA signature looks good :+1:. CLA signature looks good :+1:. CLA signature looks good :+1:. CLA signature looks good :+1:. CLA signature looks good :+1:. CLA signature looks good :+1:. Hey @lukekrikorian,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. CLA signature looks good :+1:. Hey @greenkeeper[bot],\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. Hey @zacharyrs,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. Hey @greenkeeper[bot],\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. Hey @bpiwowar,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. Hey @otacke,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. CLA signature looks good :+1:. Hey @tonton-pixel,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. CLA signature looks good :+1:. Hey @leungbk,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. CLA signature looks good :+1:. Hey @zegulas,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. Hey @iSumitG,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. Hey @nickgravelyn,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. CLA signature looks good :+1:. Hey @AlbertHilb,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. Hey @kokopelli314,\nThanks for the PR! Mind signing our Contributor License Agreement?\nWhen you've done so, go ahead and comment [clabot:check] and I'll check again.\nYours truly,\nkhanbot. CLA signature looks good :+1:. CLA signature looks good :+1:. ",
    "deckar01": "Thanks for reviewing @kevinbarabash and @xymostech.\n. ",
    "mroth": "@kevinbarabash Apologies, looks like this all happened while I was out of the country last week.  The only change in this PR from the standard doc was adding our new external email address, but please see our KA #opensource Slack channel for much of the discussion around this thus far. \n(Which is bad for transparency reasons I know, but that just happened to be where it was most convenient to discuss at the time.)\n. ",
    "hojas": "@gagern thanks.\n. ",
    "appeye": "Ah great work! I've missed this. Looking forward to the next release!\n. ",
    "Apanatshka": "Sounds like a good reason to choose sr-only. \nI'm afraid I'm not familiar with the common frameworks that are in vogue today. It's been years since I worked on front-end website stuff, and I've never used a screen reader before. So if anyone else with more experience would like to take a look?* The frameworks mentioned in the bug report are:\n\nhtml5-boilerplate\nhttps://github.com/h5bp/html5-boilerplate/blob/v5.0.0/dist/doc/css.md#common-helpers\n.visuallyhidden, .hidden, .invisible\nyahoo ydn / a11yproject\nhttps://developer.yahoo.com/blogs/ydn/clip-hidden-content-better-accessibility-53456.html\n.visually-hidden, .hidden\nbootstrap\nhttp://getbootstrap.com/css/#helper-classes\n.hidden, .invisible, .sr-only\n\n*I will do the work myself eventually if nobody else champions this issue, but I currently don't have the bandwidth to take this on. Maybe next year...\n. Ok, so I found a blog post online of someone using bootstrap and KaTeX. I added .sr-only to the .katex-mathml versions. And it works!\nThere is one annoyance though... The MathML version renders great in Reader View, but the HTML version loses styling info so super/subscripts don't work anymore etc. \ud83d\ude22 And I have no idea how to make it so the HTML version is hidden in Reader View instead of the MathML version without favouring the MathML version entirely...\nDoes anyone have ideas? Otherwise I think the original proposal is still the best solution to the duplication problem. \n. I suppose you could see it as a benefit..\nI think it's reasonable to expect that a browser supporting a Reader View also supports MathML (which renders correctly in Reader View!). Ideally I'd like the Reader View to ignore the HTML version of the KaTeX formulas, but doing so with one of the \"hidden\" CSS classes conflicts with the meaning on a normal view of the webpage.\nSo yeah, unless someone else has a brilliant idea, it's either duplication or messed up styling. At this point I'm fine with both if there's no better option, and the least amount of work is leaving it as is. \n. ",
    "bigtan": "@edemaine but there are only source code but no compiled code, and no release note, why ?. @edemaine There is a katex.tar.gz/katex.zip and detailed release note in release v0.6.0, I mean why there is no such thing for the latest release v0.7.0 ?. ",
    "MaxNoe": "That uppercase greek is upright by default is a strange thing about the typesetting conventions used in default TeX. I like italic greek letters more and it's more consistent.\nFor particle physics, where elementary particles are usually typeset upright, upright lowercase greek would really be appreciated.\n. I'm mostly using lualatex/fontspec/unicode-math, when I'm forced to use pdflatex I usually go with upgreek.\n```latex\n\\documentclass[parskip=half]{scrartcl}\n\\pagestyle{empty}\n\\usepackage{fontspec}\n\\usepackage{mathtools}\n\\usepackage[\n  math-style=ISO,\n  bold-style=ISO,\n]{unicode-math}\n\\setmathfont{Latin Modern Math}\n\\begin{document}\n\\huge\n$\u03b1\u03b2\u03b3\u03bc\u03bd\u03c0$\\\n$\\symup{\u03b1\u03b2\u03b3\u03bc\u03bd\u03c0}$\n$\u0394\u03a0\u03a9$\\\n$\\symup{\u0394\u03a0\u03a9}$\\\n\\end{document}\n```\n\n. ",
    "SamanthaYu": "Sorry for the missing context, but yes, I was trying to put KaTeX-rendered math instead of the <option> tags.\nThank you, @xymostech, for clearing that up! That makes a lot of sense.. ",
    "dyzpku": "Thanks for reply! The \\boldmath function is also not yet supported in release v0.6.0 right? Does it mean that you will support \\boldmath in later version? Thank you!  . ",
    "sunsheeppoplar": "Would love to help contribute. Been looking around the code for a bit and was wondering where I could start for this problem. Thanks!. Sorry, y'all, got a bit caught up with transitioning at work. Is this still something y'all are looking at or has a PR been proposed elsewhere that encompasses this?. ",
    "jeanm": "As far as I know, \\boldmath is a declaration, so it will make the whole formula bold until you \\unboldmath. You must also include the math mode expressions within the scope of the declaration, which makes it quite impractical.\nIn my field we would normally use \\boldsymbol from the amsmath package, although it seems that this has now been superseded by \\bm.. Great stuff! Would it be possible to add \\bm as an alias, too?. Not in LaTeX, true, but do these differences still apply here? And even in LaTeX, the differences are so minimal that they don't matter in the majority of real-world use cases I see in papers in my field.\nIt would be annoying to have to rewrite a bunch of formulae that use \\bm. An alias to \\boldsymbol supported out-of-the-box, even just as a temporary fix, would avoid that.. ",
    "tscholak": "This is still very much needed.. ",
    "stapeleliz": "I'm using Katex on my math-lessons website. Questions and answers are bolded and, naturally, these questions and answers commonly contain variables. It would be really nice to be able to format bolded AND italicized letters. Is anybody working on this issue currently? Thank you!. Okay; thank you!. I'm using KaTeX from the CDN, which is using version 0.9.0-alpha2.\nAm I correct that support for bolded italics has not yet been included in the CDN?\nThank you!\n  . ",
    "aterenin": "Just wanted to comment that this feature is very badly wanted.\nA note that both \\boldsymbol and \\mathbf are important - the former produces bold italic symbols, including bold greek letters, that often refer to vectors, whereas the latter produces bold non-italic symbols that often refer to matrices.. Sorry, these are custom macros to make my TeX source more readable. They are all included in a macro definition at the beginning.\nAlso my apologies if this is a duplicate issue - I searched the repo and did not find that one.. If they do, the interference is minimal - I have lots of large formulas on my blog with ^_& and other syntax and it all works correctly. Smart quotes is the only thing that gets through.\nMy site is built using GitHub pages, and I do not have the kind of control over the environment that would allow me to modify Jekyll or enable 3rd party plugins to work around the issue. Even if I did, I wouldn't use any due to potential security implications.\nMy current solution is to add a small bit of JavaScript to automatically undo the problematic smart quotes client-side. This works, but I feel that smart quotes in particular are common enough that they shouldn't cause KaTeX to throw an error, especially when there is no valid TeX using them in math mode that I'm aware of.. A solution using the macro system would work great for me.. It works great! In addition, the &= bug for the aligned environment is also fixed. Thanks very much!. Was this ever implemented? The README says that it is possible to map align to aligned, but I can't find a way to actually do this.. [clabot:check]. Tests implemented.\nI'm currently in the middle of travel (coded up this PR while on a flight) so I'm not equipped to install docker to run the screenshotter at the moment. It'd be great if someone could run it and add to the PR, otherwise I'll handle it later.. There's something to be said for simplicity, especially given people can define a macro for \\bm if they want to use that command instead. \nI can easily add an alias for \\bm if the consensus is to add that in. Let me know if people want this.. Alias added.. Test updated.. No worries. I pushed a 1-character fix to make CI happy. Any idea when this'll make it into the release? With this added, I can now switch the live version of my blog from MathJax to KaTeX.\nOnly thing missing for me now is auto equation numbering, which I've no doubt will make it in eventually. And if I'm allowed to wish for things MathJax can't do autobreak would be awesome.. I'm not familiar with either of those packages, but autobreak seems like it would work well. Its behavior is very much like the idea above, except that it treats newlines as break candidates, and requires breakable math to be wrapped in \\begin{autobreak}. This seems like it would be a good addition in my view.. Automatic line breaking for inline math is I think a separate issue. Most inline math that I've seen - both online and in journals - is not very long, because authors will typically use display style for a sufficiently large equation.\nThe behavior of autobreak is almost the same as flexbox. The main difference is that that after a linebreak, new lines begin at the end of the first line in the environment. Here's one idea for how to do it.\n\nEverything inside the autobreak environment, except the first line, gets wrapped in a span tag with display: inline-flex.\nEvery line inside of the autobreak environment, except the first line, gets wrapped in another span tag.\n\nWith appropriate CSS, this already behaves almost exactly like the package.\nUnless I'm mistaken, autobreak is by supported only inside an align environment, and produces undefined behavior if & is used anywhere in that environment by the user, including outside of autobreak. In contrast, the use of \\\\ is allowed, but only outside of autobreak. This means that if we want to replicate LaTeX behavior, then interaction with aligned is simple - it should throw an exception.\nFurther thoughts? This doesn't seem too bad.\n. I think that's acceptable, since KaTeX does not support the align environment, though this does deviate from LaTeX behavior. Maybe that can change later if align/align* is added to KaTeX - I'm not sure why we don't just allow it inside $$, since this is what MathJax does.\nI should look at the array code to better understand what we're looking at.. I'm still interested in trying to put something together, but unfortunately have no time capacity to do so at the moment. I might have capacity closer to summertime once semester ends and upcoming conference deadlines have passed. I've put a note on my calendar, let me get back to this around then.. I believe so. I tested it with the latest alpha version (beta version 404s because it has yet to propagate across the CDN), and it seems to just work. I also tested loading the CSS asynchronously by adding the following to the auto-render code.\njavascript\nvar link = document.createElement(\"link\");\nlink.rel = \"stylesheet\";\nlink.href = \"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0-alpha2/katex.min.css\";\nlink.integrity = \"sha384-exe4Ak6B0EoJI0ogGxjJ8rn+RN3ftPnEQrGwX59KTCl5ybGzvHGKjhPKk/KC3abb\" ;\nlink.crossorigin=\"anonymous\";\ndocument.getElementsByTagName(\"head\")[0].appendChild(link);\nI had to use the load event instead of DOMContentLoaded because it happens later, but other than that, everything seems to just work.. The code I have above is, for whatever reason, not reliable - have noticed on my own site that it occasionally fails to load the style sheet.\nI've thus reverted back to what is in README.md but if I end up figuring out what to change to make it work consistently I'll document everything.. I do not understand what those tests do or how they work. There are no similar tests implemented for \\mathbf or any similar command. Could you either provide reference on how to implement that or accept as-is and move to mathml-spec.js later, when \\mathbf is moved there too?. make screenshots does not work. I get the following:\n```\n/Users/aterenin/Git/KaTeX/node_modules/selenium-webdriver/lib/promise.js:654\n    throw error;\n    ^\nError: Timed out waiting for the WebDriver server at http://127.0.0.1:49315/hub\n    at onError (/Users/aterenin/Git/KaTeX/node_modules/selenium-webdriver/http/util.js\n:87:11)\n...\n``. Figured out the problem: I previously didn't install the correctdocker`.\nScreenshots added and pushed.. Done. Done. Are you sure? These include the imaginary number symbol, as well as the plus symbol, for which mathvariant=\"bold\" is not set even for \\mathbf.. The symbols for \\imath and + that are present in the font looks as follows.\n\nThis is from inspecting the element and manually adding \\boldsymbol to the CSS. I don't know how to make KaTeX do that, and given the symbols don't match, should this be done at this stage?. Update: the problem is that bold italic symbols for \\imath, +, and 2 are contained in a different font: KaTeX-main. See screenshot below.\n\n. Turns out the same situation occurs for \\mathit - using that as a template, I was able to implement \\imath and 2. + is still not correct, because for some reason the font doesn't get applied to it, will look at that shortly.. Done. Please see new screenshots that have been pushed.. Fixed. I've removed the hardcoded symbols - this was done for mathit so I copied the approach - and am now using lookupSymbol.. ",
    "tabatkins": "[clabot:check]. Yes, I get what it does. The point of my rephrasing is that \"true\" or \"false\" is neither \"display\" nor \"text\", and there's no natural mapping between the two.  The current wording assumes you can intuit that displayMode = False means \"default to textstyle\", which I don't think is a reasonable assumption.\nI'm not attached to the exact wording at all, I just wanted to make it clear what True and False each do.  Suggested alternative text is welcome.. I can't comment on the technical aspects, but that definitely satisfies my original \"make it clear what True and False actually map to\" goal.. All right, wording updated and checks passed. Ready for merge!. I copied the import statement from one of the other files, but the linter complained about the use of var, so I switched it to const. Happy to switch back to stay consistent if someone else can fix the linter, or :+1: to me ignoring it.. Ah, yes, I forked on Dec 2nd and haven't re-upped yet. Thanks for the merge!. ",
    "glebm": "@ronkok Perhaps coloring into an arbitrary color can be done with CSS Filter Effects on the black images.\nHere is a demo showing that it might be possible to get any color from grayscale using filter:\nhttp://stackoverflow.com/a/25524145/181228\nThere is no formula there unfortunately. I've asked on StackOverflow about the formula.\nCSS Filter Effects are supported everywhere except IE, but perhaps this is not something to be concerned about.\nAnother idea:\nUse SVG as the mask-image for a solid background-color - much easier, but is not yet supported in Edge (it is in the backlog though).. @ronkok That's great! By the way, Firefox does support mask-image according to caniuse.. https://github.com/Khan/KaTeX/issues/681#issuecomment-298190721 mentions that \\rotatebox can be implemented (possibly not fully correctly) by using CSS transform: rotate.\nPerhaps it is possible to implement \\cancelto similar to how \\cancel is implemented in #670?. @ronkok Thanks for the explanation. After some investigation, I believe it might be possible with a trick.\nThe trick's core insight is that CSS percentage values for vertical margin/padding are actually the percentages of the width. There is a more detailed write up here: http://kizu.ru/en/fun/rotated-text/\nI wrote a couple of demos:\n1. Only adjusting the height: https://codepen.io/glebm/pen/BZvqox\n2. Adjusting both height and width: https://codepen.io/glebm/pen/pwBdLz\nHowever:\n Both demos fit the middles of the bounding box edges instead of the corners.\n The second demo adjust the width, but unfortunately does not do it correctly, and even then for some reason the total width of the row doesn't change.\nSomething like this might be viable if we can find a way to correctly adjust the width.. I see, thank you for the explanation.\n\nCalculating the width of a fraction or an environment is much more complex than just summing up character widths. Not only that, but option 2 takes on still more complexity in languages like Arabic or Persian.\n\nJust a though, perhaps we could use the CanvasRenderingContext2D.measureText(text) method on the browser and polyfill it with node-canvas on the server?\nnode-canvas supports custom fonts via Canvas.registerFont out of the box.\nThis approach should also be plenty fast as long as we don't recreate the canvas (once https://github.com/Automattic/node-canvas/issues/920 is fixed).\nI use KaTeX with server-side rendering, in an environment where JavaScript may be disabled on the client.. > I think this is a common use-case in any forum/post system that wants automatically embeddable LaTeX formatting\nThis is impossible to do correctly without support from the markup language, because you need to avoid certain contexts, such as code blocks, which are markup-specific.\nBy the way, if you use markdown via kramdown, server-side KaTeX rendering support is built-in (https://github.com/gettalong/kramdown/pull/489).. @hmzlam The code you've linked won't work correctly for Markdown if $$ is inside a code block (~~~).\nIt also won't work correctly for HTML if $$ is inside pre, script, etc.. > So it would be faster.\nNot necessarily, as the browser would need to parse and render a separate SVG image for every arrow from scratch. The giant HTML payload would also make server-side rendered downloads much slower.\nI'd much prefer to always use CSS masks and render black arrows for browsers that do not support them (via @supports not + IE hacks). The SVGs can be inlined into the CSS at build time to avoid XHR requests.. @ronkok I believe the !important qualifier in the property values inside the @supports not should take priority over the inline styles (so the background-color can be set back to transparent if the browser does not support masks).. @ronkok WRT inlining.\nExternal SVGs:\n\nTrigger a re-render of the katex block when loading the page.\nMay slightly complicate using KaTeX from frameworks that generate resource filenames on deployment.\n\nInline SVGs:\n\nApproximately the same size because gzip eliminates much of the duplication.\nThe browser has to parse each instance anew. This can be mitigated with <use>, but not completely as there may be multiple katex blocks / server-side rendering.\nDo not benefit from browser-side caching in the case of server-side rendering.\n\nIf the SVGs are small (no more than a few KiB), I'd go with inline, but no strong opinion.. Confirmed, it works! Thank you!. Yes. Sorry, I'll look into it and post an update here. Might be a problem with my setup.. The previous issue was caused entirely by me forgetting to whitelist background-color in the HTML sanitizer. v0.8.3 works as well.. I can't sign this CLA (at least not without a possibly lengthy approval process from Google that is likely but not guaranteed to succeed), so I hope it's not necessary for this PR.. It has been brought to my attention that Google already has a CLA on file for Khan Academy!\nI can't sign an individual CLA but it should not be necessary.. Currently this will not emit the mask when rendering server-side. It'd be nice to emit the mask, or both, perhaps using @supports somehow.. To always emit the mask for SSR, you could do something like:\njs\nfunction maskIsSupported() {\n  // If rendering server-side, assume the client supports CSS masks,\n  // as most clients do:\n  if (typeof document === \"undefined\") return true;\n  ...\n}. These SVGs should be minified, ideally at build time. I recommend svgo for this, can easily shave off 30%.. @ronkok \n\nIf Edge does look at the output from such a server-side installation, it will render a span-wide blob of color instead of the subject matter.\n\nIf we go with option 3, it is possible to always render a black arrow for browsers that do not support it:\ncss\n@supports not (mask-image: #000) {\n  .stretchy {\n    background-color: transparent !important;\n  }\n  .x-arrow {\n    background-image: url(...) !important;\n  }\n  ...\n}\nFor IE, @supports is not supported but the \\9 hack can be used instead.. ",
    "mateddy": "[clabot:check]. ",
    "AJBALA": "I used escaping character but still the math is not working. This is my code:\n$$\\begin{bmatrix} 0 &amp; \\cdots &amp; 0 \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ 0 &amp; \\cdots &amp; 0 \\end{bmatrix}$$\n\nAlso below <![CDATA[$$ \u2026 $$]]> is not used by replacing escapting character &amp; into & but still is not working.\n<![CDATA[$$\\begin{bmatrix} 0 &  \\cdots &  0 \\\\ \\vdots &  \\ddots &amp; \\vdots \\\\ 0 &  \\cdots &  0 \\end{bmatrix}$$]]>\n\nThanks,\nBala AJ. Thank you so much. I got it.. Sorry for the trouble. One more thing I noted that some alignment issue in chrome for the below formula. i.e. each rows are touching together. If you have quick solution then let me update.    \nThanks in Advance!\n$$  \\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix}\n\\mathbf{i} &amp;   \\mathbf{j} &amp;   \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &amp;   \\frac{\\partial Y}{\\partial u} &amp; 0 \\\\\n\\frac{\\partial X}{\\partial v}  &amp;   \\frac{\\partial Y}{\\partial v} &amp; 0\n\\end{vmatrix}$$\n\n. ",
    "sinabahram": "Hi all, I hope everyone is doing well. I want to start by thanking you for the strides in accessibility you have made so far. For blind computer scientists like me, it is so often the case that ignorance, not bad intentions of any variety, is the source of so much frustration when accessing the world\u2019s digital information.\nBy including MathML, you allow me to hear the mathematics using a variety of screen readers on various platforms. You allow me to interact with the mathematics to semantically zoom in, zoom out, navigate across different granularities at a myriad of verbosities, read the mathematics in nemeth code (a Braille code used for the display of mathematical information), and so much more.\nI come to this thread with some expertise and context. I am fortunate enough to be one of the individuals who has contributed to this body of work through a variety of projects and collaborations, not the least of which is multiple years spent co-designing the interaction models behind MathPlayer 4. My background is in computer science, having undergraduate and graduate degrees in the field. I now run an accessibility consulting firm that focuses on collaborating with organizations of various sizes around the world on inclusive design projects.\nIt is difficult to overstate the delta of experience, usability, and accessibility between MathML being available and its absence. I urge you to please leave this critical and impactful work within the code base. I understand, am sympathetic to, and am completely willing to discuss ways to minimize the code surface area impact effect of leaving MathML there, making it more usable to more folks, allowing for different presentation formats to be used, etc., but I urge you in the strongest possible terms to please not make your service inaccessible to those users who have the actionable opportunity that I did not have in my education, which is to have accessible and significant access to digital mathematics.\nI thank you all again for the time and effort you put into this and other technical discussions. It is so often overlooked by those who simplify such tasks into a simple coding problem.\n. ",
    "geekvijay": "this feature will be very much helpful for server-side rendering \ud83d\udc4d . zzish/react-latex have the function latexString which parse tex string to katex string. it would nice to have something in the katex library which will help rendering tex string at server side. . ",
    "hmzlam": "i think it's possible to add support in few lines , take a look at\nhttps://github.com/hmzlam/katexWithDelimiters. @glebm , many users want quickly a simple render to string with mixed text, they may add a parser for their own markdown, than use katex, we have auto-render.js, so we are not looking for a DOM parser, just very basic text+MATH with basic html tags like   p,h1 ,  br    nothing fancy.. ",
    "ymakhloufi": "Well it appears as if pulling in v0.6.0 with bower works, only from v0.7.0 ist is a problem, but since we need the support for umlaut characters, that is not an option.... Exactly the same for me. \nWhen I compare the two tar balls of 0.6.0 and 0.7.0, I can see that v0.6.0 does have a dist folder in it, where as the 0.7.0 doesn't...\nhttps://github.com/Khan/KaTeX/archive/v0.7.0.tar.gz\nvs.\nhttps://github.com/Khan/KaTeX/archive/v0.6.0.tar.gz. @gagern Thanks a lot for you lightspeed rection. Much appreciated!. Yup, all good now. Thanks a ton!. ",
    "zeitgeist87": "I have the exact same issue. Bower 1.8.0 reports this:\n```bash\nnode_modules/bower/bin/bower install -V\nbower katex#               not-cached https://github.com/Khan/KaTeX.git#\nbower katex#                  resolve https://github.com/Khan/KaTeX.git#\nbower katex#                 download https://github.com/Khan/KaTeX/archive/v0.7.0.tar.gz\nbower katex#                  extract archive.tar.gz\nbower katex#             invalid-meta for:/tmp/andreas/bower/f1a02a1ae7fa47b237f875a1e98ba21e-7732-wZegpf/bower.json\nbower katex#             invalid-meta The \"name\" is recommended to be lowercase, can contain digits, dots, dashes\nbower katex#             invalid-meta The \"main\" field cannot contain minified files\nbower katex#             invalid-meta The \"main\" field cannot contain minified files\nbower katex#                 resolved https://github.com/Khan/KaTeX.git#0.7.0\nbower katex#                  install katex#0.7.0\nkatex#0.7.0 bower_components/katex\n```\nAfter that the directory ./bower_components/katex/ contains only bower.json.. I can confirm that v0.7.1 solves the problem. Thanks!. ",
    "lazarljubenovic": "Here's a reproduction.\nI can confirm the effect on Chrome Version 54.0.2840.59 (64-bit) and Firefox 50.1.0, under Ubuntu 16.10.. ",
    "apowers313": "I downloaded the 0.7.1 release, which seems to be from two days after this issue was closed, but I'm still getting the problem reported here:\n\nKaTeX auto-render: Failed to parse y'^2 = x'^3 + b' with  Error: KaTeX parse error: Double superscript at position 3: y'^\u03322 = x'^3 + b'\n\nShould this be fixed in 0.7.1?\n. Thanks, it looks like cutting and pasting these lines into the un-minified release seems to fix the problem. I'll roll with that until there's a new release.\nThanks again for the help.. npm install hits the same error.\nI'm on node v6.10.1 and npm 5.0.3 (just upgraded from 2.15.11).. I blew away the entire directory and did a fresh git clone and had the same problem.\nThen I did npm install -g babel-cli and did a fresh git clone and ran make in (second) fresh clone and it worked.\nTo see if the global install of babel-cli was the issue, I did npm uninstall -g babel-cli and ran that in a (third) fresh clone, and it worked.\nI'm not able to replicate the problem anymore, so maybe we close this out and re-open it if someone else has issues in the future.. ",
    "yanana": "When is this feature released?. ",
    "asmsuechan": "Got it. Thanks for your answer!. ",
    "arnog": "I think the fix might be to set the style.marginTop property to -(height - shift) and to not set style.bottom.. The extra space between rows in the gathered environment is the same extra spacing from the aligned environment, introduced by the \\jot command (3pt). \nThere's another important difference between gathered and array{x}, the cells of the former are in displaystyle while the cells of the later are in textstyle. See for example:\n\\begin{gathered} \\text{gathered}   \\\\ \\frac12 x^2+y^2=z^2 \\\\ x < y \\end{gathered}\n     =\n  \\begin{array}{c} \\text{array\\{c\\}} \\\\ \\frac12 x^2+y^2=z^2 \\\\ x < y \\end{array}\n\n. Sorry, I should have been more explicit. Here's a simpler case demonstrating the issue.\n\\begin{aligned}A\\\\B\\end{aligned}\nTeX:\n\nKaTeX\n\nThe problem is specific to the aligned environment. It turns out that in order to support equation numbering, even though there's no numbering in this particular case, there's an extra gap of 3pt (by default) inserted in between the rows of an aligned environment. It's called '\\jot' in the LaTeX source.. I believe this may be an issue with the rendering of sub-pixel borders since Chrome 62. A workaround/fix is to use a 'thin' line instead of 0.04em.. @edemaine agree that it's extremely annoying and only partially addresses the issue. I think the only viable fix is to have it fixed in Chrome.\nTo reproduce the problem more easily, in addition to using retina screens, try to vary the zoom level (up or down). In some (apparently) random cases, the borders will disappear. This happens on both Mac and Windows.. Yes, there are a few that still do disappear, at 67% zoom level. The same thing happens with both min-height: 1px; and if (resolution > 192 dpi) {\u00a0\u00a0\u00a0\u00a0min-height: 0.5px;}.\n(Tested on Chrome 64 Mac displayed on a Retina screen)\n\n\n. That's a reasonable course of action. One can hope that this issue will get fixed in Chrome at some point anyway. It's probably related to https://bugs.chromium.org/p/chromium/issues/detail?id=756345 or https://bugs.chromium.org/p/chromium/issues/detail?id=763402.. ",
    "jkm": "It seems to be a Javascript issue since \njavascript\nvar str = String.raw`\\xi`;\ncauses a problem. It's fine to close this here, if you wish. Maybe anyone with deeper Javascript knowledge can enlighten me.. ",
    "alexpearce": "[clabot:check]. I like the idea. It was my first thought after seeing that renderMathInElement only passes two properties of the options argument on to other methods. It's makes more sense to me to just pass the whole options object along the method chain (that is: renderMathInElement \u2192 renderElem \u2192 renderMathInText).\nThe downside, I suppose, it that each method then needs to assume more about the structure of options. But we could declare that options should have the same structure as the Settings object, plus the auto-render-specific delimiters and ignoredTags properties, to keep the semantics similar to katex.render.. > There could also be two separate options objects\u2026\nThis is also a nice idea!\nThere are two possible implementations then:\n\nExtend the Settings class as AutoRenderSettings, adding the delimiters and ignoredTags properties and inheriting everything else. This AutoRenderSettings will then be passed along the chain, and then a version stripped of the auto-render-specific properties is passed to katex.render.\nCreate a standalone AutoRenderSettings to hold the delimiters and ignoredTags properties (constructed just like Settings), and then pass both an AutoRenderSettings instance and a Settings instance along the method chain. The Settings instance will be passed to katex.render.\n\nOption 2 does sounds cleaner to me, so I propose going with that one. The API of renderMathInElement will change to:\njs\nconst renderMathInElement = function(elem, autoRenderOptions, renderOptions) { \u2026 }\nI think this is backwards compatible, as callers only supplying an autoRenderOptions (matching today's API) will just mean renderOptions is undefined, and so the default settings will be used when the Settings object is initialised.. I've implemented @kevinbarabash's suggestion.\nI guess I should updated the auto-render README to include the new argument?. Sorry for the very long delay \ud83d\ude05 \nI've tried to implement the requested changes.. Although the PR started as adding support only for macros, now anything accepted bykatex.render is accepted by the auto-renderer. If you could test that the options you want work in this PR @Gungrave223, that'd be great!. Thank for the feedback @gagern! I pushed a couple of commits to address your comments.. We could have only one object, assuming the delimiters and ignoredTags keys would never conflict with the renderer settings keys.\nI don't have a preference whether to require one or two objects in the API, so I'll let the KaTeX developers decide \ud83d\ude0a . Thanks for the feedback @edemaine. I've changed the API to accept a single configuration object.. @kevinbarabash @edemaine about modifying renderOptions: I actually thought the comment from @gagern was referring to the object passed to renderMathInElement, which is now cloned. From then on everything is done in internal functions (only renderMathInElement is exposed), so it should be safe to modify as we 'own' it from then on.\nIf you still think it's worth doing then I can add it. (I would probably use Object.assign instead of re-adding extend.)\n\nA new comment: Do you think ignoredTags should be part of the renderOptions argument? It seems odd to have both arguments now. To keep backwards compatibility, we could detect when renderOptions is an Array and treat it as a spec for ignoredTags\n\nI'm sorry but I'm not sure what you mean \ud83d\ude0a What are you suggesting, to modifying the renderElem signature?. Thanks for the reminder @edemaine. I've done the refactoring, rebased, and squashed the commits.. I've implemented the remaining comments. Now this PR removes more lines than it adds \ud83d\ude04 . Good catch! Thanks a lot for the extra PR and, of course, for the review.. I'm not very familiar with ES2015. Is this the correct way to import these things from katex? Perhaps there's something like require('katex.utils') instead? . :+1: added. I don't think that's true because new AutoRenderSettings will return a new object.. Relative links should work on GitHub, but the absolute URL is clearer, so I'll switch to that.. I think this logic might work instead:\njs\nconst optionsCopy = Object.assign({}, defaultOptions, options);\ndefaultOptions is merged first (probably should rename this to defaultAutoRenderOptions) and then the user options is merged. So if options contains the same keys as defaultOptions, the former will override the latter. Then indeed there's no need for AutoRenderSettings.\nWhat do you think?. ",
    "Gungrave223": "Can I make a suggestion to also support throwOnError and errorColor as well since you're already adding support for macros \ud83d\ude05. @alexpearce sorry just getting back to this...your solution does in fact work without an issue...my only question would be ... is there a reason for 2 separate objects? would it not be simpler to simply combine autoRenderOptions and renderOptions?. ",
    "katef": "I agree about getting the markup supported now (a \\raisebox or similar sounds fine!) and drawing a proper glyph later.\nSO lists a few ways to mark that up for TeX: http://tex.stackexchange.com/questions/4216/how-to-typeset-correctly. ",
    "joernlenoch": "[clabot:check]. Thank you very much, I'll take care of it!. ",
    "autarkaw": "Thank you.  It worked. \nAutar Kaw \nhttp://autarkaw.com\n\nOn Feb 17, 2017, at 12:15 PM, Emily Eisenberg notifications@github.com wrote:\nYou need to add a doctype to your HTML file to make KaTeX render correctly. (there is a warning in the console telling you this!) See e.g. #332\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thank you for your quick response.  It worked.. \n",
    "Rokt33r": "This is my temporary solution. You can also check the result of this fix via the following link.\ncss\n/* Temporary fix for \\frac and subscript */\n.katex .frac-line {\n  top: 0.85em;\n  position: relative;\n}\n.katex .reset-textstyle.scriptstyle {\n  top: 0.4em;\n  position: relative;\n}\n\nhttps://gist.github.com/Rokt33r/46f20b604ae3884276183b323c41e4d2. Yes, you're right. Thanks for helping me. \ud83d\udcaf \ud83d\udcaf \ud83d\udcaf . @xymostech I think just adding one option, like ignoreCompatModeWarning (false by default), would fix this.... @edemaine \nHow could I install this?. I actually have no idea how should I install the unpublished code. Should I clone and install it manually?. I've tried just now, but still got same warning.\n\n. I see. Now, I know how to do try. Just ping me again when you ready.. I think KaTeX should throw another type of error for this.\nIt is confusing because both of them look same type. Most people would expect same behavior.\n\nUnescaped dollars :KaTeX parse error: Expected 'EOF', got '$' at position 1: $\u0332\nInvalid command : KaTeX parse error: Expected 'EOF', got '\\alpa' at position 1: \\a\u0332l\u0332p\u0332a\u0332\n. ",
    "jsmaniac": "@xymostech Good point, I had forgotten TeX's bogus behaviour for these commands. The \\texttt{>} does print fine with LaTeX though (and that's what I was using). Incidentally, the \u201ccorrect\u201d form \\textrm{\\textgreater} also fails with KaTeX.. Also, adding \\usepackage[T1]{fontenc} to the preamble of a LaTeX document makes the other commands produce the expected > symbol, so i'd argue that should be KaTeX's behaviour as it is very common to use T1, and the behaviour seems more reasonable than the upside-down question mark.. Thank you very much @xymostech for your prompt and detailed answer.\n\nBased on this answer and this answer and this wikipedia page on License Compatibility, the MIT license is compatible with the GPL license. So by including the KaTeX source inside of scribble, the code of KaTeX that is distributed with it will become subject to the restrictions of the LGPL (like copyleft), but the package overall will remain LGPL licensed (actually, the answers are about GPL licenses, so maybe this is different, but GPL vs. LGPL seem similar enough on this front).\n\nThe KaTeX folder distributed with scribble-math is copied as-is, as a resource, if you will (just like KaTeX itself contains fonts under a different (SIL) license, as resources), so I suspect the \"outer\" scribble-math package's license should affect the bundled KaTeX in the first place. It is good to know that, in this case (LGPL), it wouldn't be a problem anyway.\n\n\n\nIs there any impact on the license of the source scribble documents which make use of the scribble-math library?\n\n\nAs long as the KaTeX license is distributed with the KaTeX code, I don't think so. If it isn't, you'd have to include the KaTeX license in there, I think.\n\nThat's good to know, thanks for the clarification. The LICENSE file is kept, and the license header in the katex.min.js file is preserved, so users shouldn't have issues here, without the need to explicitly mention KaTeX and its license in the document itself (IIUC).\n\n\n\nSome fonts are included in the KaTeX folder. Are there any issues related to distributing those, as long as they are left in their respective subfolders, without altering the LICENSE files?\n\n\nAccording to this answer, the output that KaTeX generates isn't licensed under the KaTeX license, so it shouldn't have an impact.\n\nThat seems to depend on whether substantial parts of the KaTeX source code are included in the generated output (e.g. copied over from constant strings etc.), the answer you linked to mentions for example YACC which embeds chunks of source code in its output. I would think in the case of KaTeX that such code to be small enough fragments that the issue will not arise, but I would prefer confirmation, rather than just assuming (the legal notion of \"small enough that it does not taint the output\" is not particularly precise, AFAIK).\n\nI think I'll take care to clearly state that in the scribble-math repository, the LGPL (currently, hopefully CC0 sometime in the future) applies only to the scribble-math code, not to the KaTeX folder (just as KaTeX's license affects KaTeX itself, not the fonts distributed alongside). I will also mention in the scribble-math user documentation that the katex folder in the generated HTML output, and the fonts within, are under their respective licenses.. > Ah, that's a good point, I forgot to point that out explicitly. KaTeX does not embed any of its code inside the output, so you should be good there!\nThanks for the clarification!\n\nI'm not even sure you need to do that; since the licenses are compatible, it sounds like you can just say \"all of this code is LGPL licensed; some of it was originally MIT licensed and here's the license for that\" but maybe I'm reading things wrong.\n\nI think you're right, as long as it's in the MIT \u2192 LGPL direction. If I eventually manage to drop the few LGPL'd files and switch to CC0/Public Domain, I obviously shouldn't make it sound like the MIT code from KaTeX is licensed as CC0. Right now (LGPL), I think you're right in saying it shouldn't be a problem :) .\nThanks again for the helpful answers, and good luck with KaTeX!. [clabot:check]. @ronkok Thanks a lot for the solution! I hadn't thought about the font issue.. Note that the best might be to support \\not\\ni, which works with AMSMath IIRC, but I'm not sure if KaTeX supports defining macros with arguments. So \\notni seems a good compromise (its meaning is clear, it exists in (non-AMS) LaTeX packages).. @ronkok I added the  TODO.. @edemaine I know about docker but don't use it in my regular development so I tend to forget the syntax, and google is proving itself unhelpful at telling me how to start a Dockerfile. I tried docker start dockers/texcmp and docker exec -ti dockers/texcmp /bin/sh, but both fail. Care to remind me what's the one-liner?. @edemaine Sorry, I tried running sudo dockers/texcmp/texcmp.sh Sqrt on my local machine, and inside a fresh Ubuntu 14.04 machine (with the default NodeJS and with NodeJS 6 too), and it fails in both cases with SyntaxError: Use of const in strict mode..\nI also tried with the node dockers/texcmp/texcmp.js Sqrt command directly, and it throws module.js:471 throw err;.\nYou'll have to run texcmp, as I cannot.. @kevinbarabash Sure! I'll look into this next week if you don't mind. Thanks for the update!. Hi @kevinbarabash, sorry I didn't remove the defineSymbol quick enough. I thought it would allow typing the unicode character in the TeX source, and wanted to ask why it wasn't working when testing with the npm test server. I hadn't realised it was meant to translate the other way round (from the TeX command to the unicode char for MathML).\nThanks for fixing this and merging!. ",
    "riteme": "@kevinbarabash Thanks!. Hello, I'm using Chrome 67.0.3396.99 on Ubuntu 18.04 and I found that there seems to be a similar issue with \\not\\mid.\n![](https://gitee.com/riteme/blogimg/raw/master/other/katex-not-mid.png)\n\nSo does \\not E, whose output looks like the first image in this issue. But KaTeX works fine for \\not=, \\not\\equiv, \\not<.\nI have also tried Firefox 61.0.1 and got the same result.. @edemaine That's strange... I have just switched to KaTeX from MathJax. It seems that MathJax simply translates \\not\\mid into \\nmid.. Fraction bars begin to show after the CSS added. However it seems that horizontal lines are too thick:\n\nIs that a bug with Chrome? Since the underline of \"display math\" has the same width.. @ronkok That does not help.. @ronkok @mbourne I finally find out that with a larger font-size the relative thicknesses become reasonable. No matter what unit is used. Either 3em or 39px looks fine on my screen.. ",
    "ntessore": "@edemaine I think that \\tag would be an ideal addition to KaTex, because it is for manual equation numbering. While \\label and \\ref might be more complicated, as long as we have \\tag, we can give names to our equations and reference them in text.\nThat would be a much cleaner solution than the CSS equation numbering, and probably cover most use cases where not every equation needs to be numbered.. For what it's worth, here is a fiddle with a crude \\tag hack: link. It uses a macro to define \\tag as \\pod\\text, which gives you a nice equation number with a bit of space to the left. The rest is dirty JS+CSS trickery to make the equation number right-aligned in display mode.\njs\nkatex.render(tex.textContent, tex, {\n  displayMode: true,\n  throwOnError: false,\n  macros: {\n    '\\\\tag': '\\\\pod\\\\text'\n  }\n});. @kevinbarabash I think an official \\tag command could be as simple as that. It would only need to add parentheses around a textmode block and wrap the whole thing in a <span> with some new class. That class can then be picked up by CSS and moved to the right of the .katex-display block.\nI slightly updated the example to better position the equation number on the right. This should keep the vertical positioning of the equation number block intact and just move it to the right of the display block.\nIt also appears as if \\tag inside \\aligned etc. is illegal in LaTeX, so that would not be an issue for a simple solution either. You might even detect that, as well as \\tag outside displaymath, and simply throw an error.. For what it's worth, I would argue that the equation number is not part of the math typesetting at all, and could simply produce an additional HTML element within katex-display. That way, the tag can easily be styled and positioned without the risk of throwing the math off.\nBesides, it would be nice if the tags could function as anchors in some automatic way.. ",
    "pyramation": "I'm only including the library without rendering a component in a test, and it still displays this warning in every single test. Can this console.warn just be removed, please?. @kevinbarabash I understand, I actually wrote the library #3 was referring to. @waywaaard (thanks) I think that's generally what I'm talking about.. ",
    "tgrant59": "@kevinbarabash I'm still seeing this waring on jest v21.1.0. ",
    "bergwerf": "I understand. Thanks for the explanation.\nInteresting to see that KaTeX is (at least in this case) even more compliant than MathJax. And I do agree the borders on MathJax are ugly. It was even worse at other zoom levels (one potential cause is that people have determined to border to be 1px thick or something. Then when zoomed out everything looks fine because of anti-aliasing and because border rendering probably ceils to 1px (for example when specifying in em), but when zooming in, well, you guessed it).. I noticed 10^{10^{100}} is fine. Perhaps my TeX is wrong. Or the way certain styles are applied are wrong (not sure what the expected output is supposed to be.. I just tested from the master branch and there at least the issue seems to be resolved (I imagine this to be quite tricky, maybe dependent on font settings and such, all I did was make && make serve and removing the font-size: 7*px from the demo page). Out of curiosity, what was causing this issue?. ",
    "saintthor": "i found the doc.. i was asking how to do it in KaTeX.\nsince there is no docs about it, i tried the ways in latex.. is there any guide about how to write it in KaTeX style?\ni tried some latex strings. some of them works in katex. some not.. it seems not. for example, to draw a matrix in latex:\n[ \\left( \\begin{array}{ccc}\na & b & c \\\nd & e & f \\\ng & h & i \\end{array} \\right)] \nthis works in katex too. if there is no better way.. thank you.. ",
    "Flauschbaellchen": "[clabot:check]. ",
    "keshavkaul": "@xymostech Thanks for the quick response. I'm making a react native project and I'm using katex via npm. I had planned on storing mathematical expressions along with custom stylized HTML text and pass it on to katex to render the final html. Since this is not currently possible with renderToString, I could start writing a PR for this feature. I have checked auto-render.js as well and would like to add the delimiter option into the options object that we pass to renderToString function. I would appreciate if you could let me know if this aligns with the project's goal. Thanks. @edemaine Thanks for the direction. \ud83d\udc4d  I shall have a look at formats.coffee over the weekend!. ",
    "looeee": "I'm having the same problem. It seems like any with a \\begin and \\end won't render. So for example, this works, as do many more complex expressions:\n$$\n\\dbinom{n}{k}\n$$\nBut this doesn't, and it seems any other expressions that start with \\begin also don't:\n$$\n\\begin{pmatrix}\n  a & b \\\\\n  c & d\n\\end{pmatrix}\n$$\nEven though both expression do work in the example app. I'm including Katex as described on the autorender page, by including this at the foot of my page: \nhtml\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0/katex.min.css\" integrity=\"sha384-TEMocfGvRuD1rIAacqrknm5BQZ7W7uWitoih+jMNFXQIbNl16bO8OZmylH/Vi/Ei\" crossorigin=\"anonymous\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0/katex.min.js\" integrity=\"sha384-jmxIlussZWB7qCuB+PgKG1uLjjxbVVIayPJwi6cG6Zb4YKq0JIw+OMnkkEC7kYCq\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0/contrib/auto-render.min.js\" integrity=\"sha384-IiI65aU9ZYub2MY9zhtKd1H2ps7xxf+eb2YFG9lX6uRqpXCvBTOidPRCXCrQ++Uc\" crossorigin=\"anonymous\"></script>\n<script>renderMathInElement(document.body);</script>\nPerhaps it's a problem with autorender? It's not caused by #661, my HTML is valid.. \\cr works! \nThanks \ud83d\ude04  \nYeah I figured it out - it's because I'm writing in markdown and the // is replaced with a <br>. \n. ",
    "wilbowma": "@gagern, thanks a lot for the feedback! I'm pretty new to both MathJax and KaTeX, but wanted to try to contribute some of my personal scripts for wider use.. You're right, there are definitely some bugs in this code. There at least ought to be a \"mode=\" before the display, and probably ought to compare case-insensitively. Unfortunately, I'm having trouble finding how MathJax does this. I'll keep looking.. That's a good point. I don't actually use MathJax directly, but through a Markdown parser that generates output in using the custom script types that MathJax can understand. I figured that was the normal interface, but reading the docs I see I'm wrong.. @edemaine, sorry about that. Got busy with other things and forgot about this. I'll take a look today.. I used this URL based on user-contrib/auto-render/README.md. You're right, of course, that this path won't work just now, but I assumed that this script would be handled similarly to auto-render.. Also, don't the build scripts automatically update the integreity hashes in the contrib README? (see above comment on earlier version of my Makefile.) Surely they can be modified to update the version in the CDN string.. Ah of course. Okay.. ",
    "dainiak": "Are there any concrete plans for CSS extensions then? A lot seems to have changed in the architecture of KaTeX since 2014 effort for adding \\cssid and \\class. Is it at all possible now?. ",
    "garciparedes": "Based on this question, I started the development of an open source project to typeset TeX math expressions with Angular. The project is on https://github.com/garciparedes/ng-katex.\nYou can install the module with:\nnpm install ng-katex --save\n\nTo add the module to your proyect add the KatexModule to import's field of your parent module:\n```js\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app/app.component';\nimport { KatexModule } from 'ng-katex';\n@NgModule({\n  imports: [BrowserModule, KatexModule],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent]\n})\nclass AppModule {}\nplatformBrowserDynamic().bootstrapModule(AppModule);\n```\nAnd then you can use it as follows:\n```js\nimport { Component } from '@angular/core';\n@Component({\n  selector: 'my-app',\n  template: <ng-katex [equation]=\"equation\">\n})\nexport class AppComponent {\n  equation: string = ''\\sum_{i=1}^nx_i'';\n}\n``. Hi @edemaine, thank you very much. Do I make a pull request to thereadme.mdor do you prefer to be yours?. I made the changes inreadme.md` and opened the https://github.com/Khan/KaTeX/pull/959 pull request.. [clabot:check]. ",
    "nitishkumarnitc": "@garciparedes. Thanks a lot.. @kevinbarabash \nYes, Method is getting called. If it's static text its fine, but incase of dynamic, it's not working.. I don't have issue with error, but when their is no error it should render, but nothing is coming.. Thanks for the help.\nThanks for helping me in DP(MIT course) @edemaine as well . . ",
    "benstevens48": "Ah yes, I didn't see that. For what it's worth I think it would be simplest to implement this as I suggested above (possibly with a different name) since keeping the katexOptions (to pass to katex.render) completely separate is conceptually simple for both writing the code and for the user and is future-compatible, and merging and un-merging the two sets of options seems like an added complication. This seems to be quite standard in a lot of javascript stuff e.g. compilerOptions in the typescript config file and a lot of the gulp plugins which wrap some other module. But I don't want to delay anything!. Yes, as long as the function gets passed the HTML element being considered so can look at the attributes then I don't mind. I'm not sure that having renderTags as well as ignoredTags would add much - you would really need access to the attributes I think unless you were using custom elements (which is possible I suppose). E.g. if you put 'div' in renderTags, that's quite general! But, yes I suppose you might define a  element in which case a list of renderTags could make sense.. Yes I suppose I'm just trying not to pollute the window namespace. I'm using a module loader to load all my javascript files and it seems to go against the trend a little bit to force a module to be globally defined. I suppose it's not a big issue at the moment though.. Yes I guess something like that would be the easiest although I'd put it in the options object to avoid having lots of extra parameters. Having thought about it a conditional require might cause problems for some module loaders. It's not a big issue but then again it would also but quite simple to add this extra option.. ",
    "skillogs": "I don't know why, but the multi-line coding doesn't work for me.... ",
    "jl98": "My apologies, I misinterpreted the issue, and found a solution. I was misusing round brackets vs. curly brackets.. ",
    "johndpope": "https://github.com/orsharir/github-mathjax. ",
    "ebertmi": "MathJax is also an equation rendering system like KaTeX, only that it automatically renders all wrapped LaTeX nodes.\nThe same is possible using the auto render plugin https://github.com/Khan/KaTeX/blob/master/contrib/auto-render/README.md \nKaTeX uses an synchronous approach for rendering LaTeX, which makes it a faster than MathJax. ",
    "MathSalomon": "@kevinbarabash Many thanks!, \nI changed it to  https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.7.1/katex.min.css and https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.7.1/katex.min.js in the preamble. And now the environment begin{aligned}. Many thanks :). @kevinbarabash I see. Well, at least I can create custom tables in html and fill them with Katex. Thank you anyway.. ",
    "redstoneleo": "@xymostech Thank you, after reversing the order of the delimiters as following \n```\n\n\n\n\n    renderMathInElement(document.body,{delimiters: [\n                        {left: \"$$\", right: \"$$\", display: true},\n                      {left: \"$\", right: \"$\", display: false}\n]});</p>\n<p>\n``\nIt magically works !optionsis an optional object argument infunction renderMathInElement(elem, options)according here https://github.com/Khan/KaTeX/blob/master/contrib/auto-render/README.md\nSo Does key order matter for javascript object? especially foroptionsobject here ? BTW, I am not familiar with JavaScript . Thanks guys! \nI think $ and $$ are the most frequently used MathJax delimiters under the advocate of https://math.stackexchange.com\nso perhaps we should uncomment this line\nhttps://github.com/Khan/KaTeX/blob/38ba9f91877cdbc3b687de16803c41d6fffafb74/contrib/auto-render/auto-render.js#L78\n for ease of switching from MathJax to KaTeX.. I have never did that thing,  but I think you have to redirecthttps://cdnjs.cloudflare.com/ajax/libs/KaTeX/latest/katex.min.jsto the latest version of KaTeX, for example,  tohttps://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.7.1/katex.min.js` currently .. ",
    "GeeLaw": "Another first thought could be calling renderMathInElement twice, as the following:\njavascript\nrenderMathInElement(document.body,{delimiters: {left: \"$$\", right: \"$$\", display: true}]});\nrenderMathInElement(document.body,{delimiters: {left: \"$\", right: \"$\", display: false}]});\nJust providing a general idea you might find useful when dealing with other problems.\n. That's the other point I mentioned earlier:\n\nThis disables resetting the background. Note that using this rule will still let .katex change its color and background according to the scheme, which is expected and desired.\n\nWhen there is an unremoved image under the formula, the formula will not have background added to it, resulting less contrasted text (text-on-image, instead of text-on-background + textbox-on-image).\nImagine a title with hero image that looks like this under non-High Contrast theme:\n\nThe background is a hero image, therefore might well be kept for branding reason. The expected rendering under High Contrast White is\n\nBut if we set .katex { -ms-high-contrast-adjust: none !important; }, that will look like\n\nNote If the color: white is set on the element (or on a selector that selects the element), it will not be adjusted to black, but color is often inherited from ancestors, therefore disabling adjusting on this element does not prevent it from inheriting the scheme value. That is also why disabling adjusting on descendants of .katex does not prevent it from having the scheme-defined foreground color -- they are inherited from .katex, which is adjusted.\nSemantically, things that need transparent background are those components of the formula, and the formula itself requires background adjusting, therefore I have suggested and still suggest this way:\ncss\n.katex * { -ms-high-contrast-adjust: none !important; }\n. ",
    "stsievert": "I'm running into this same bug (math delimited by $$ doesn't display), but re-ordering my delimiters with $ and $$ doesn't display the math. This is the last barrier to switching from MathJax.\nWhen I view the HTML of the page I'm viewing locally, I see that wrapping math in\n\n$$ results in a <script type=\"math/tex\">x+y</script> tag and does not display.\n$ gives a <span class=\"katex\"> block (and displays inline)\na new delimiter %% to replace $$ gives a <span class=\"katex\"> and does display.\n\nI do have macros defined in my call to renderMathInElement. Deleting them didn't display the math. I have added spacing (i.e., $$ x = y $$, $$ x+y$$, $$x-y$$) with no effect.\nI am writing my pages in markdown and serving via Jekyll.. Ah! Turns out my markdown parser (kramdown) automatically includes math blocks, which converts Markdown $$...$$ to <script type='math/tex'>...</script>, which means that katex doesn't have a chance to touch the $$ delimiter.\nI resolved this by adding \nyaml\nkramdown:\n  math_engine: nil  # for katex (because kramdown defaults to mathjax)\nto by _config.yml.",
    "q2apro": "Link to the auto-render extension was missing: https://github.com/Khan/KaTeX/tree/master/contrib/auto-render. ",
    "piojanu": "Sorry my bad. It's bug in Remark.. ",
    "cemulate": "Ah, that makes sense. I didn't find any particular documentation on macros so I think I inferred a lot of information from the github issues. I didn't realize the issue in question hadn't made it into release. . ",
    "buaabarty": "\nI think we should do a release once #670 lands.\n\n@kevinbarabash release please \ud83d\ude04 . ",
    "jamalex": ":+1: !\nThis will be important for KA Lite and Kolibri, now that we're moving to support RTL and Arabic.. ",
    "davidflanagan": "For supporting new scripts inside \\text{}, see PR #1060. I don't know what RTL issues will arise, but this patch that just landed makes it easy to add new scripts that are supported in \\text{} environments.. Is there any kind of CSS media query that we could use to determine whether a screen reader is in use? Seem like that would be the ideal way to deal with this.\nFailing that, maybe we could solve this (specifically for the Khan webapp) by having a per-user setting that we could query. For KaTeX that would mean we'd want an option to render() to specify visual rendering or a VoiceOver compatible rendering.. Pull request #1060 just landed and adds support for Devangari, Bengali and various other indic scripts, but only in \\text{}.\nIt won't fix the MathJax issue that @rah4927 is having, but KaTeX should now be able to render:\n\\text{\u09a2\u09be\u09b2}= \\dfrac{\\text{\u0985\u0995\u09cd\u09b7\u09c7}}{\\text{\u09b6\u09b0\u09a3}}. \n. Note that I had to add \\text{} around the left hand side of the equation. We still don't support @rah4927's original source text. But hopefully this is close enough. So I'm going to close the issue.. What do you think, Kevin?. @kevinbarabash: sorry for asking for a review and then continuing to work on this... I believe I've addressed all of your requests. The new unicodeScripts.js file has changed substantially since you reviewed it, so you might want to take another look.. Issue #1086 looks like it was a duplicate of this one, but also demonstrated that there are issues with the ring accent over lowercase u (in Czech) and the dot over an uppercase I in Turkish. (Note that those characters are not in the Latin-1 charset, but I just landed a PR the other day to add support for Latin Extended A and B.)\nI'm pretty sure that that the LaTeX source code I was using was using the single unicode codepoints, not combining forms to get these diacritics. But the parser is pulling them apart and rendering them as accented forms, which surprises me.\nIf Kevin is right that this is just a font issue, we could presumably work the Turkish and Czech issues by defining the css class 'latin-fallback' which should be defined on any \\text{} mode characters in the Latin Extended A and B blocks.\nWould it be simpler to to modify the parser so that (in text mode, at least) it doesn't break single accented characters apart into their combining forms?. This is the HTML I get both \\text{\\r A} and \\text{\u00c5}\n<span class=\"mord text\">\n  <span class=\"mord accent\">\n    <span class=\"vlist-t\">\n      <span class=\"vlist-r\">\n        <span class=\"vlist\" style=\"height: 0.94677em;\">\n          <span class=\"\" style=\"top: -3em;\">\n            <span class=\"pstrut\" style=\"height: 3em;\"></span>\n            <span class=\"mord\">A</span>\n          </span>\n          <span class=\"\" style=\"top: -3.25233em;\">\n            <span class=\"pstrut\" style=\"height: 3em;\"></span>\n            <span class=\"accent-body\" style=\"left: -0.375em;\">\u02da</span>\n          </span></span></span></span></span></span>\nSo when I use \u00c5 in the input, it doesn't just get decomposed into an A and a Unicode combining form, it gets decomposed into an A and a manually positioned ring glyph. In this case, if the -0.375em had been about -0.25em instead we might not have noticed the issue.\nAh ha! I see now that unicodeSymbols.js decomposes all latin accented forms, so that \u00c5 really does end up parsing just like \\r A.  \nIf I comment out this line:\n\"\\u00c5\": \"\\u0041\\u030a\",  // \u00c5 = \\r{A}\nThen I get a parse error for \\text{\u00c5} because it is not a recognized codepoint.\nBut since I've just added Latin Extended A and B, I bet that this trick will work for characters in those blocks:\n\\text{\u016f} displays with the ring too far to the left, but if I comment out unicodeSymbols.js:125 then it displays as a single font glyph and the ring is in the right place. (This only makes it display correctly in text mode, however, and prevents it from displaying in math mode)\nI don't know much about unicodeSymbols.js, or how KaTeX uses fonts, but I'd propose that we assume that in text mode all the characters we want are going to be supported directly by the font. I think I'd try to fix this by:\n1) modify unicodeScripts() to extend the definition of the Latin script to include all of Latin-1 and not just the extensions. So that \u00c5, for example, is a supported codepoint.\n2) Modify Parser.js:1036 so that it only does the unicodeSymbols substitutions in math mode and not in text mode.\n3) I was going to say that the third step was to make \u00c5 look right in math mode by figuring out why was causing the ring to be mis-positioned. But it turns out that math mode \u00c5 has a special case in symbols.js so it doesn't get decomposed in math mode. So I guess just fixing these accented forms in text mode may be all that is needed.  (The Czech u with the ring and Turkish I with the dot don't work in math mode, so there is nothing to fix there.)\n. I was assuming that \\text{} environments just inherited whatever font was used outside of KaTeX, and that we could assume they had support for all the necessary glyphs. But if KaTeX renders text mode with its own fonts (and I understand that there are probably good typographical reasons for doing that) then either the fonts have to get big or we have to manually handle the accents. So I retract my proposal above.. The BoldSymbol screenshot test failed... I'm not sure why. I'll have to try running those locally.. The BoldSymbol screenshot failure has to do with the rendering of the (turkish) dotless i. In the original it is a curvy script i, but with this patch it becomes a straight sans-serif i. That seems like a regression, not an improvement!\nThe screenshot tests are hard, though: running them locally, I get a number of failures even on the master branch where I haven't changed anything.. Somehow with this patch the \\boldsymbol\\imath is rendered with css classes \"mord boldsymbol latin_fallback\" instead of \"mord mathbf\" as it is on master.  The latin_fallback is expected and does nothing, but boldsymbol instead of mathbf is a problem: it changes the font from Katex_Main to Katex_Math, and adds font-style:italic. Thanks, Kevin for merging for using the Mode type.  It turns out that my problem with running the screenshot tests locally was that didn't clone the repo recursively when I started, so I didn't have the fonts submodule.... It sounds like this is a duplicate of issue #1066 \nThanks for filing this Daniel, but let's move discussion over to that other bug.. Duplicate of #1066. This is what I had in mind for fixing issue #1066. @kevinbarabash  and @edemaine what do you think? This approach is somewhat at odds with https://github.com/Khan/KaTeX/pull/1069 which supports the decomposed approach to accented forms in text mode. \nI'm not sure what LaTeX approach to Unicode is: do we embrace codepoints like \u00e5 and allow them to display as single glyphs while also retaining support for pre-Unicode things like \\aa?. It turns out that this is an issue even without the svg-inside-svg. We need to prevent our svg glyphs from inheriting styles that should not affect them:\n\nI created this screenshot by using the npm start test bed, and then using devtools to add some CSS styles to the containing div element. The color style was properly picked up by both the text and the SVG, but by setting SVG-specific CSS properties I was able to get the square root and vector to display in a way that is inconsistent with the text.. This screenshot was created by using the npm start testbed, and adding some new style properties on the  element that contains the KaTeX output. It demonstrates that with this patch applied, we inherit color, font-size and transform, but we are not affected by things like fill-opacity and stroke-width.\n\nCompare this screenshot to the one in issue #1088 \nNote also that previously we inherited fill color for  elements, but not the stroke color, so it was possible for the environment to add a colored outline to our svg paths. Now we inherit both fill and stroke on the svg element itself, so setting the stroke style does not give a colored outline.. Okay, still need to make tests pass, but I'm hoping that the fix can be basically as simple as this.. That's a great idea, Kevin. I'll do it.. Actually, the pre and post attributes on the screenshot tests set the content of spans before and after the math, but they're both siblings of the math element, not ancestors, so I can't use them to set styles that would affect the math...\n. Since you mentioned me and screenshot tests, I had an idea this weekend that I'll just drop here: I don't know how the screenshots are being generated in headless mode inside those docker containers, but I wonder if there is an option to specify the dpi resolution of the virtual screen that is used. For some of @ronkok's recent work on horizontal lines it seems like testing high resolution and low resolution screenshots might be helpful. This is for emacs backup files.. Note the && !metricMap bit I added on this line... I was thinking that this allows the addition of other font metrics in the future. Not sure whether that makes sense, though.. I could make this faster by statically concatening all of the ranges for all scripts into a single array. Then there wouldn't be a nested loop. I'm assuming that this has similar performance to using a regex. But could also compile the ranges into a regexp at startup time and use that here on a character instead of a codepoint if performance is a concern.. Actually, I think I need to think some more about this.  In Devangari (and probably most of these other Brahmic scripts) there are a lot of combining characters which generally turn into ligatures and have no intrinsic width on their own.  Using a full em width is wrong given that somewhere around half of the characters are zero width vowels.\nAt a minimum I should choose a narrower character for Brahmic scripts. Really though, I think we can't really measure characters from those scripts in isolation: to actually be accurate we have to measure the whole string of them. I haven't looked yet at how this code is used, but I worry that this is a larger architectural change required here for complete accuracy.\nFor our needs at KA we only need to be able to display these characters in plain \\text{} environments. Not trying to center them above a big capital sigma character or anything, so I'd guess that super-accurate measurements are not all that necessary.. I ended up changing this all around to make Flow happy and to speed up perf. (I was making those changes before you started the review... sorry about that.) But now that I've made codepointSupported() fast, I can probably make this change to make the data structure clearer.... I suspect you should also remove the comment on line 467 that says this function handles \\left and \\right. I don't see where you're actually using the ParseNode class anywhere. Can't you leave this as a flow 'import type' like you had before?. Yes, please add a comment, at least. Alternatively, you could break the \"leftright\" function into two distinct \"left\" and \"right\" functions. Given that \"middle\" is handled separately, this might be nicely parallel. I suppose the HTML and MathML output would still go mostly in the \"left\" function?  \nBut that is probably a bigger change than you want to make here... So just commenting is okay.. Would it be clearer to say right: delim.value on this line?. It wasn't clear to me that parseExpression() would stop before \\right. A comment to that effect here would make the code easier to understand.. This predates this PR, but it seems weird to me to have these import statements interleaved with defineFunction() calls. It would be nicer to move all the import statements up to the top of the file, I think.\nI'm new to using import in JavaScript, but it also seems strange to use import just for side effects. Is that an accepted pattern of use? To have an import statement that does not actually import any symbols?  It feels like a step back to #include in C code.\nI would have expected something like:\nimport * as accentFunction from './functions/accent';\ndefineFunction(accentFunction)\nBut this issue isn't new with this PR, so I don't expect you to fix it now.\n. Or buildCommon.svgData['vec'][1] to get the number more directly?\nOr, just have staticSvg() set the width property like it does the height property? Then, in both cases, you'd have a void accent.width.\nIt seems like it is more future proof to keep accent.width valid like you had in the code you're moving. That is, if buildCommon.makeSpan() or something it calls ever starts to actually care about accent.width, it would be nice to have that property set on the accent object in both the symbol and svg cases.\nThis is just a nit, though.. nit: are there functions other than \\utilde that would match this and we just haven't implemented them yet? If not, this seems like a silly place to use a RegExp. Maybe change to:\nconst kern = (group.value.label === '\\\\utilde') ? 0.12 : 0;. For performance, consider moving the array of stretchy function names outside the function so it doesn't get re-created on each invocation. \nAccording to https://jsperf.com/static-arrays-inside-functions/1 moving the array out of the function will make this operation twice as fast.. Unless this set of two functions is likely to grow, consider just doing a normal funcName === '\\widehat' || funcName === '\\widetilde' comparison. A regexp (outside the function) seems like it would also be a good choice here instead of an array of strings.. Is it worth defining a flow type for this string-to-string map?. Also, you should probably update the comment to mention this argument (and maybe also explain when to use styles instead of classes?). This TODO seems to have gone away. Just want to make sure that was intentional. Similarly in accentunder.js. this.style is mutated below, so it seems dangerous to use the passed in style object without copying it-it probably works now, but could be a source of difficult bugs the the calling code changes to reuse the style object. \nDoes this project have babel set up so that you can use {...style} here?\nThe rest of my comments are just nits, but for this one I'm actually going to request changes...\n. I would have forgotten to double the backslashes here. Glad you go this right!. TIL: that the second argument to Object.assign() can be null or undefined. This is great!. KA has specific bug reports from translators about e with a double acute accent and turkish dotless i and dotted captial I, so if you're willing to add those here as well that would be great.. feature request for the future: it would be nice if the script that generates this file included comments up at the top saying that it is an autogenerated file and explaining how to regenerate it.. That would be great, if you don't mind. And maybe add an explicit dotted capital I as well to make the whole row the same. Thanks!. This line and the three lines above might work in both the if and else cases... Maybe you can omit the nested if/else. Don't forget!. Is this the line that prints out the ops/sec for each test? That is such a non-intuitive event name that I think a comment is warrented here.. This doesn't seem like useful output. I'd cut it.. What does async do? None of the tests are async, so is this needed? (I guess I'm wondering if this affects the stability of timing or anything).. Nits: This line seems like it is worth a comment for readers who don't already know about this benchmark package. I skimmed over it the first time and then had to come back to it. Also, I think that the variable name 'tests' would make the code below a little clearer.. ",
    "Brett99": "Thank you, that seemed to fix it. Why is this? . ",
    "ylian": "Yes indeed. I actually noticed the issue on MathJax before I tried it on KaTeX. Thanks for looking into the issue.. @ronkok Yes, I can confirm this bug is fixed in release 0.9.0-beta. Thanks!. ",
    "ParveshChauhan": "I am using app which runs on both platforms(ios and android) and connected to same backend server and app getting data in form of JSON. Different syntax supported on both platforms as i explained in question. And according to my app structure, i use webView for rendering Katex syntax. I am attaching screenShots.\n\n\n. @kevinbarabash Thanks for reply but actually I need help in ios because in Android I have done already. I am facing problem in ios for same syntax, In above I am showing that Katex syntax works in one and for same syntax not in another.. ya its render correctly but not for syntax( \"\\(\\frac{1}{2}\\)\") which is working fine in android.. And one more question, why it is not supporting this symbol (\u00f7 ,> ,<). thanks for your help, only one issue remain that how to wrap the content in katex view.. \nThe text in top red area is not wrap means not fit in view although i specify the width and height of view. I use methods like aWebView.scalesPageToFit = YES; and Scaling methods but it not works for me. Please tell me any method to wrap content inside view.. not supporting HTML tags.. Like I want to display this simplify:  so i use <i>simplify: </i> code but text view is empty ,shows nothing. And currency symbol is not render as well  like \u20b9 and for this i  am using hexacode &#8377;. so what should i do for render symbol or it is possible or not and what about html tags ?\n. ",
    "nmatpt": "Just a note: I had this issue while integrating the Katex npm package into another project and I solved it by updating to the latest Katex release (0.9.0-beta at the moment). ",
    "johnmcconnell": "[clabot:check]. @xymostech Yeah, totally. They are not exported as window.renderMathInText and window.renderMathInElement.\nIt is window.renderMathInElement.window.renderMathInText and window.renderMathInElement.window.renderMathInElement. I'll make the changes.. Not anytime soon. Feel free to close the issue. ",
    "obedm503": "I also have a similar use case @mbourne with katex-latex  but I would like to have a way to intercept asciimath with some custom/specific delimiters and convert to latex before it is rendered using the renderMathInElement extension. so, some form of plugin system would be beneficial. this would be really cool. right now the dist build has repeated babel utilities which would be avoided if using rollup's fancy scope hoisting. didn't know you were using webpack. I guess the same thing could be achieved using the ModuleConcatenationPlugin. that would remove the duplicated utilities. looking into this. can you explain the build system? from what I gather, you're using webpack during dev but browserify for production? also, npm run prepublishOnly, what I assume is the production command, doesn't build successfully\nshell\nMakefile:61: recipe for target 'build/fonts' failed\nmake: *** [build/fonts] Error 1. prepublishOnly now works! and no I'm not on windows.\nwith that out of the way, can you explain the build system?. ",
    "hallvors": "I hope you will accept this pull request however minor this issue might be: https://github.com/Khan/KaTeX/pull/772\nThanks for your attention.. Prince XML supports much of the DOM but not everything. As its purpose is generating static PDFs from web pages, it does not render pages to a user and handle user input, thus it supports very few events. This fix is of course not Prince XML-specific as such, the issue will affect any legacy browser that does not support the input event and does not emulate IE's attachEvent method.\nIt is very useful to be able to run test suites / test pages of various libraries in Prince to check compatibility. I can work around this issue easily, but I thought I would suggest a fix anyway :).\nYou could apply the same fix to permalink listener setup, however you are definitely not the only script or page to assume attachEvent is supported if addEventListener isn't - there are millions of scripts out there and because of the compatibility pressure this assumption is considered pretty safe by now. \nAgain, I know this is a very minor issue likely affecting very few people, so if you choose not to spend time on integrating and testing the fix I'll understand.. ",
    "jpzwarte": "@kevinbarabash i'm running Version 62.0.3178.0 (Official Build) dev (64-bit) on a mac. My guess is that somehow on my non-retina monitor the bottom border isn't drawn because it's too small?. I can also reproduce this on a retina display:\n\n. Cannot reproduce on Firefox, but see a visual change happening when i disable the font rule (the horizontal line moves slightly lower): \n\n. @kevinbarabash does the body font-size/line-height have to be a certain value for a sqrt to render correctly?. 10.12.6 here but i doubt if that makes a difference.. Very cool!. ",
    "sandhose": "I'm not using Vue.js in this case, but the issue is quite the same. You could avoid using dangerouslySetInnerHTML by using React.createElement (with a small wrapper) as an hyperscript function to the renderer. By doing this, you're creating real React elements, and you take advantage of React's virtual dom.\nIn my case, the output of the markdown engine is in one stage represented by a HAST node (HAST is a HTML AST). \nThe way the plugin that parses the math elements in the markdown works, is that it passes the raw math input to KaTeX through the renderToString function, and then uses rehype-parse to parse the HTML string to a HAST node. \nThis parse is heavy, and the parser itself adds ~250Kb to the bundle.\nIt could be avoided by directly transforming the KaTeX tree to an HAST tree, but buildTree doesn't seem to be publicly exported, and thus has no stability guarantee.\nI'm proposing here to provide a renderHyperscript function that renders using the provided hyperscript function. This would totally cover my case (because there's hastscript that provides a hyperscript function to create a HAST node), and would be beneficial in frameworks with some kind of virtual dom like React or Vue.js (they all provide a hyperscript-like API, either officially or by the community). It might be a good idea (and @wooorm would be pleased). I'll try to do something.\nFYI I have a branch that implements hyperscript rendering, with a react example here (built version here). Well, it just got a lot harder with #807 because it means I have to re-parse the innerHTML in spans to render them (and it is expensive).. ",
    "wooorm": "@kevinbarabash Hi! \ud83d\udc4b\n\ncould we not add a innerHTML property which is a string? https://github.com/syntax-tree/hast#properties seems to indicate that both attributes and properties.\n\nHAST is for HTML, so think of it as only \u201cattributes\u201d being supported, not DOM properties like the innerHTML setter.\nI suggest against using raw HTML inside a virtual DOM, for the same reasons that React uses the name dangerouslySetInnerHTML \u2014 it\u2019s dangerous and slow.\nI know it\u2019s not always possible, but using an object structure (like HAST, or your own) instead of building strings makes things great for non-server-side rendering!. @kevinbarabash Yup! You can opt for an array of nodes.\nOr if you\u2019d like, returning a root node ({type: 'root', children: [...]}) is also fine, but root nodes shouldn\u2019t be inserted somewhere else in a tree (only the top node may be a root). This is not entirely true: fragments can be stored in a root too, and className is an array! Finally, style could be discussed. It used to be an object in fact, and could be mapped to that again, pending further discussion.. > > There\u2019s no special format for style.\n\nWhat does that mean? Is it a string or an object?\n\nIt used to be under discussion, but removed in 2016.\nThere are downsides to doing style as an object, because you need to parse styles in some cases, which includes quite the library. In other cases, you need to stringify it, which is less of a problem.\n\nAre there any examples of how fragments are dealt with? We'll never return a fragment so fragment support isn't a deal breaker.\n\nAny document, whether it\u2019s a complete one or a fragment, is stored in a root node. There\u2019s no other handling for it. To be honest, now I\u2019m not entirely sure what your use case is!. ",
    "cjh9": "It would be awesome to have some kind of public API to build vnode trees. Right now I'm doing:\nKatex tostring => fast HTML parser => build vnode tree in MithrilJS with hyperscript calls (recursively walk the three). \nIs there a way I could skip the parsing? Should I look internally for buildTree and modify the katex source or is this feature coming soon? . @edemaine Sorry for late response, yes that would be awesome if they could be exposed in the distribution! In what format would  __buildHTML return the tree, in real HTML-nodes or more light-weight Json format?  Only the later seem to integrate well with webworkers..\n. @edemaine Super great! \ud83c\udf89  And it is also serializable to JSON :) Would it also be possible to expose __bulidTreeHTML if I don't need MathML? Not super important though I can work around It :). @edemaine Sorry for late reply, super great! You guys are awesome :D . ",
    "AlbertHilb": "Auto left/right delimiters can be extremely handy.\nFor square brackets, to avoid recursion, one can set:\n\"[\": \"\\\\left\\\\lbrack\",\n\"]\": \"\\\\right\\\\rbrack\"\nSomething similar could be done with parentheses if we had \\lparen and \\rparen delimiters as synonyms of ( and ) respectively.\nIf you agree I can submit  a PR implementing them.\n. > Just as long as \\\\lbrack isn't a macro for [\nThat means if one between \\\\lbrack and [have to become a macro for the other, we'll choose [! :smile:. @kevinbarabash, @edemaine \nI use KaTeX to render math formulas in a JavaScript editor.\nTo show an equation is selected I add outline: 3px solid dodgerblue to the inline style of the span containing the math.\nOn Chrome it works flawlessly, on Firefox the outline is too high.\nIt's not a big deal because I can overcome it drawing a border around the formula instead , but borders take up some space, thus the math becomes surrounded by more space than needed.\nSo, if I could, I would prefer to use outline property.. [clabot:check]. Test added and spaces fixed.. HI @kevinbarabash.\n\ndid you make this PR against Khan/KaTeX or KaTeX/KaTeX?\n\nI think KaTeX/KaTeX. How can I verify?. Check failure fixed.. Sorry for typos! :disappointed:\nFixed!. Done.. Added. Let me know if it's OK. :-). Yes, you are right. With that change katex is included in the auto-render build.\nI tried leaving katex absolute imported here and included in the test/auto-render-spec build, but still check fails.\nI should confess I have no idea how to fix this. :disappointed:.\n. Yes the test fails without preProcess, however I understand your concern. So I update the test in order to be more future-proof.. Moreover, unfortunately, the check doesn't fail locally. So I find a bit difficult to test potential fixes.. Hi @kevinbarabash.\nFinally I managed to fix the check failure.\nauto-render is built without including katex. During test execution, since we are in a node.js environment, it tries to import katexas node.js module but no such module can be found in the default paths.\nMy solution consists in adding the root folder to the NODE_PATH environment variable before executing jest.\n. ",
    "pauljadam": "@kevinbarabash You could detect iOS or detect Safari and then render the MathML version. . @edemaine the aria-hidden currently is placed on the inaccessible visual math rendering so that would not help the screen reader because they don't want to see the visual rendering, the MathML is not hidden with ARIA it's hidden with CSS visually only. VoiceOver iOS want's to see the MathML not the other rendering that does not have the math semantics. \nThe issue is with any mobile screen readers that use explore by touch like VoiceOver for iOS and TalkBack for Android. Chrome is not rendering MathML though so it's not so much an issue on Android as MathML is not supported yet but eventually it will be and would have the same issues as iOS VoiceOver currently. \nAnother possibility is some sort of button to render the MathML that is accessible placed right next to the inaccessible visual math rendering? . aria- ID references will render the MathML equation as flat static text spoken with no semantics so that won't work. You also can't detect screen readers in web pages. . http://www.freedomscientific.com/content/html/jawshq/MathML-Samples.html These examples seem to work with explore by touch on iOS, it's using MathJax but I guess the visually hidden MathML content is taking up the same space as the MathJax rendered equation so when you touch it with VoiceOver on the iPad it reads the MathML. @kevinbarabash  but in Chrome it renders the MathJax. Here's another example that renders MathJax in Chrome but MathML in Safari iOS http://wet-boew.github.io/wet-boew/demos/mathml/mathml-en.html. ",
    "somewhatabstract": "I think this can be solved by using the aria-describedby (or perhaps aria-labelledby) tag on the rendered equation, specifying the id of the hidden MathML section.. ",
    "SmashManiac": "Here is my perspective as a web developer.\nThe real issue is that 2 of the major modern browsers, Chrome and Edge, do not support MathML even though they are part of the HTML 5 standard. Note that in both cases, MathML is among their top requested features. If they did implement it, then KaTeX would only need to render a single visible MathML version. This, in my opinion, would be the proper fix for this issue.\nOf course, we cannot control Microsoft's priorities for Edge beyond feature requests, but their market share is relatively low and they usually follow behind competitors. For Chrome and its huge market share however, as it is based on the open-source Chromium project, it's only a matter of developers investing the necessary resources in solving that issue. Here is the open Chromium issue for reference: https://bugs.chromium.org/p/chromium/issues/detail?id=6606\nI'm not sure what the technical challenges for solving the Chromium issue currently are, or why it's taking so long to do so despite the huge demand for it, but in my opinion this investment should be the number one priority in order to stop wasting countless hours of development and maintenance in alternate methods of rendering math formulas on the web. If people from Khan Academy or other organizations could work with the Chromium developers to resolve this situation, it would be ideal for everyone and a worthy investment for science and education in general.\nRegardless of how long it would take for complete MathML browser support, the only plan that seems appropriate to me for KaTeX's development specifically would be to do the following:\n\nUpdate KaTeX's MathML version so it can be visually rendered. (Same as @kevinbarabash suggested, as it would need to be done anyway.)\nAllow web developers to easily toggle between both KaTeX rendering versions at run time through CSS or JavaScript. (This would enable workarounds similar to what @pauljadam showed as examples earlier.)\n(Optional) Provide an option for web developers to disable KaTeX's basic HTML rendering at build time. (This would ensure future compatibility and cover use cases where developers only want MathML.)\nContribute to MathML's implementation in Chromium. (See above.)\nDeprecate/remove KaTeX's basic HTML rendering completely. (It would be technical debt at that point.)\n\nYou may want to create separate feature issues to tackle some of the stories of that high-level plan.\nI hope you found my insights useful.. Not sure why LaTeX was brought up when KaTeX's documentation only mentions dealing with TeX expressions. In any case, HTML is not a visual language, SVG is not well-suited for math accessibility, and it doesn't matter if a browser renders a math expression slightly differently from another as long as the meaning is the same.\nRight now there is only one web standard for mathematics, and it's MathML. Yes, it's verbose and hard to read, but it solves a lot of other issues, and it's the best that we have right now for web output. TeX is great for inputting math formulas though, but it wasn't designed for web output, and that's why projects like KaTeX are valuable for conversion as of now.\nUntil someone can come off with a better standard than MathML for mathematics on the web, I'm afraid my proposed solution is the best we can do to solve this issue.. Unless someone can come up with a useful and complete use case for TTF fonts over WOFF fonts in KaTeX, I believe keeping both of them would be technical debt.. ",
    "hblumberg": "[clabot:check]. ",
    "jasonsperske": "Here is an example of the unicode \u21bd (U+21BD) http://www.unicode.org/charts/PDF/U2190.pdf which is officially called \"LEFTWARDS HARPOON WITH BARB DOWNWARDS\". ",
    "kkiningh": "I'm using 0.9.0-alpha1 and I think I'm still seeing this issue. See the attached screenshot (100% zoom in Chrome on 15\" Macbook Pro).\n\n. Table 1:\n\nTable 2:\n\nTable 3:\n\n. Same screen (15\" 2017 MBP), although my chrome and OSX version have changed.. ",
    "jeffmcmahan": "When using katex.renderToString(), fraction lines are not appearing. I'm using the following LaTeX expression: p = \\frac{1}{1.8} (properly escaped).\nIn Chrome 65:\nnpm install katex@0.7 -> lines appear\nnpm install katex@0.8 -> no lines\nnpm install katex@0.9 -> no lines\nIn FireFox 59:\nnpm install katex@0.7 -> lines appear\nnpm install katex@0.8 -> lines appear\nnpm install katex@0.9 -> no lines\n... Using the correct CSS file in each case.\nSame results whether in display mode or not.. @edemaine - Thanks!\n@ronkok - 0.9.0 until a newer patch version is published to npm. (@0.7 installs 0.7.1.). @ronkok - is a live page essential? I don't have a node server up that I can easily use to post a demo page. Here is a screenshot generated with 0.9.0 installed (using the provided 0.9.0 stylesheet as well):\n\nLaTeX: p = 1 - \\bigg(\\frac{1}{1.8 \\times 10^9}\\bigg)^{5 \\times 10^8}\nHere's the HTML that katex.renderToString() produces:\nhtml\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi><mo>=</mo><mn>1</mn><mo>\u2212</mo><mo fence=\"false\">(</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mn>1</mn><mi mathvariant=\"normal\">.</mi><mn>8</mn><mo>\u00d7</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow></mfrac><msup><mo fence=\"false\">)</mo><mrow><mn>5</mn><mo>\u00d7</mo><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow></msup></mrow><annotation encoding=\"application/x-tex\">p = 1 - bigg(frac{1}{1.8 times 10^9}bigg)^{5 times 10^8}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.82682em;\"></span><span class=\"strut bottom\" style=\"height:2.77685em;vertical-align:-0.95003em;\"></span><span class=\"base\"><span class=\"mord mathit\">p</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">1</span><span class=\"mord rule\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">\u2212</span><span class=\"mord rule\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord rule\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">\u00d7</span><span class=\"mord rule\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"stretchy\" style=\"height:0.2em;\"><svg width=\"400em\" height=\"0.2em\" viewBox=\"0preserveAspectRatio=\" xminyminslice'=\"\"><path d=\"M0H400000v40H0zM0H400000v40H0z\"></path></svg></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">&#8203;</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"delimsizing size3\">)</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.82682em;\"><span style=\"top:-3.9029000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mbin mtight\">\u00d7</span><span class=\"mord mtight\">1</span><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913142857142857em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>\nIf you need a live page, I can probably put one up this weekend.. Yes, you're right. This was all on me. My HTML parser made a booboo. Sorry!. ",
    "schmuli": "[clabot:check]. ",
    "codecov[bot]": "Codecov Report\n\nMerging #835 into master will increase coverage by 0.87%.\nThe diff coverage is 70%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #835      +/-\n==========================================\n+ Coverage   79.62%   80.49%   +0.87%   \n==========================================\n  Files          59       59            \n  Lines        3882     3902      +20   \n  Branches      654      660       +6   \n==========================================\n+ Hits         3091     3141      +50   \n+ Misses        658      635      -23   \n+ Partials      133      126       -7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildTree.js | 88.23% <\u00f8> (\u00f8) | :arrow_up: |\n| src/buildCommon.js | 85.1% <100%> (+0.06%) | :arrow_up: |\n| src/Settings.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/Options.js | 92.72% <100%> (+0.27%) | :arrow_up: |\n| src/domTree.js | 67.37% <58.33%> (+15.14%) | :arrow_up: |\n| src/buildHTML.js | 93.22% <75%> (-0.32%) | :arrow_down: |\n| src/functions.js | 88.88% <0%> (+1.85%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 06e0393...ffe152a. Read the comment docs.\n. # Codecov Report\nMerging #1073 into master will decrease coverage by 0.03%.\nThe diff coverage is 78.57%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1073      +/-\n=========================================\n- Coverage   83.83%   83.8%   -0.04%   \n=========================================\n  Files          61      61            \n  Lines        3971    3982      +11   \n  Branches      659     662       +3   \n=========================================\n+ Hits         3329    3337       +8   \n- Misses        543     546       +3   \n  Partials       99      99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 84.81% <100%> (+0.29%) | :arrow_up: |\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/accent.js | 90.16% <70%> (-4.29%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f01f504...facd231. Read the comment docs.\n. # Codecov Report\nMerging #1103 into master will increase coverage by 0.35%.\nThe diff coverage is 89.28%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1103      +/-\n==========================================\n+ Coverage   79.01%   79.37%   +0.35%   \n==========================================\n  Files          59       59            \n  Lines        3875     3865      -10   \n  Branches      655      648       -7   \n==========================================\n+ Hits         3062     3068       +6   \n+ Misses        672      662      -10   \n+ Partials      141      135       -6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/href.js | 72.72% <0%> (+34.63%) | :arrow_up: |\n| src/functions/delimsizing.js | 65.85% <100%> (+1.8%) | :arrow_up: |\n| src/buildHTML.js | 93.53% <92.3%> (+1.09%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9b2101f...44381dc. Read the comment docs.\n. # Codecov Report\nMerging #1111 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1111      +/-\n==========================================\n+ Coverage   79.59%   79.61%   +0.02%   \n==========================================\n  Files          59       59            \n  Lines        3871     3876       +5   \n  Branches      648      652       +4   \n==========================================\n+ Hits         3081     3086       +5   \n  Misses        656      656            \n  Partials      134      134\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/operatorname.js | 45.16% <\u00f8> (\u00f8) | :arrow_up: |\n| src/buildMathML.js | 93.5% <100%> (\u00f8) | :arrow_up: |\n| src/functions/text.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/font.js | 95.45% <100%> (+0.45%) | :arrow_up: |\n| src/functions/styling.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/Options.js | 92.45% <100%> (+0.29%) | :arrow_up: |\n| src/buildCommon.js | 84.97% <100%> (+0.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b341034...953eab0. Read the comment docs.\n. # Codecov Report\nMerging #1117 into master will decrease coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1117      +/-\n=========================================\n- Coverage   79.61%   79.6%   -0.02%   \n=========================================\n  Files          59      59            \n  Lines        3876    3879       +3   \n  Branches      652     653       +1   \n=========================================\n+ Hits         3086    3088       +2   \n- Misses        656     657       +1   \n  Partials      134     134\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/Parser.js | 92.89% <100%> (-0.23%) | :arrow_down: |\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/Settings.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7de91f7...e85d540. Read the comment docs.\n. # Codecov Report\nMerging #1127 into master will increase coverage by 0.12%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1127      +/-\n==========================================\n+ Coverage    79.6%   79.73%   +0.12%   \n==========================================\n  Files          59       59            \n  Lines        3879     3883       +4   \n  Branches      653      655       +2   \n==========================================\n+ Hits         3088     3096       +8   \n+ Misses        657      653       -4   \n  Partials      134      134\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/unicodeAccents.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/fontMetrics.js | 88.88% <\u00f8> (+3.7%) | :arrow_up: |\n| src/functions/accent.js | 100% <100%> (+5.55%) | :arrow_up: |\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aed1c1e...54d1f0e. Read the comment docs.\n. # Codecov Report\nMerging #1134 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1134   +/-\n=======================================\n  Coverage   79.01%   79.01%         \n=======================================\n  Files          59       59         \n  Lines        3875     3875         \n  Branches      655      655         \n=======================================\n  Hits         3062     3062         \n  Misses        672      672         \n  Partials      141      141\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 82.6% <\u00f8> (\u00f8) | :arrow_up: |\n| src/fontMetrics.js | 85.18% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3f69de5...7c5a5f6. Read the comment docs.\n. # Codecov Report\nMerging #1135 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1135   +/-\n=======================================\n  Coverage   78.95%   78.95%         \n=======================================\n  Files          59       59         \n  Lines        3872     3872         \n  Branches      655      655         \n=======================================\n  Hits         3057     3057         \n  Misses        674      674         \n  Partials      141      141\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 73d80f5...cee7c03. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@2aee354). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1140   +/-\n=========================================\n  Coverage          ?   78.94%         \n=========================================\n  Files             ?       59         \n  Lines             ?     3870         \n  Branches          ?      655         \n=========================================\n  Hits              ?     3055         \n  Misses            ?      674         \n  Partials          ?      141\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2aee354...89a39b9. Read the comment docs.\n. # Codecov Report\nMerging #1143 into master will increase coverage by 0.02%.\nThe diff coverage is 70.37%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1143      +/-\n==========================================\n+ Coverage   79.36%   79.38%   +0.02%   \n==========================================\n  Files          59       59            \n  Lines        3862     3871       +9   \n  Branches      648      648            \n==========================================\n+ Hits         3065     3073       +8   \n- Misses        662      663       +1   \n  Partials      135      135\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/genfrac.js | 58.94% <\u00f8> (\u00f8) | :arrow_up: |\n| src/svgGeometry.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/stretchy.js | 82.02% <62.5%> (-0.2%) | :arrow_down: |\n| src/delimiter.js | 41.76% <70.58%> (+1.44%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bceb7bd...3580760. Read the comment docs.\n. # Codecov Report\nMerging #1144 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1144      +/-\n==========================================\n- Coverage   78.94%   78.93%   -0.01%   \n==========================================\n  Files          59       59            \n  Lines        3870     3873       +3   \n  Branches      655      656       +1   \n==========================================\n+ Hits         3055     3057       +2   \n- Misses        674      675       +1   \n  Partials      141      141\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/Parser.js | 93.17% <100%> (+0.05%) | :arrow_up: |\n| src/MacroExpander.js | 91.57% <0%> (-1.06%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f977c25...2c09c1e. Read the comment docs.\n. # Codecov Report\nMerging #1145 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1145      +/-\n==========================================\n+ Coverage   78.94%   78.95%   +0.01%   \n==========================================\n  Files          59       59            \n  Lines        3870     3872       +2   \n  Branches      655      655            \n==========================================\n+ Hits         3055     3057       +2   \n  Misses        674      674            \n  Partials      141      141\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f977c25...ce39952. Read the comment docs.\n. # Codecov Report\nMerging #1146 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1146   +/-\n=======================================\n  Coverage   79.01%   79.01%         \n=======================================\n  Files          59       59         \n  Lines        3875     3875         \n  Branches      655      655         \n=======================================\n  Hits         3062     3062         \n  Misses        672      672         \n  Partials      141      141\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d80be86...1fb4498. Read the comment docs.\n. # Codecov Report\nMerging #1151 into master will increase coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1151      +/-\n==========================================\n+ Coverage   78.95%   79.01%   +0.06%   \n==========================================\n  Files          59       59            \n  Lines        3872     3875       +3   \n  Branches      655      655            \n==========================================\n+ Hits         3057     3062       +5   \n+ Misses        674      672       -2   \n  Partials      141      141\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 82.6% <100%> (+0.38%) | :arrow_up: |\n| src/functions.js | 87.03% <0%> (+3.7%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 383a68b...78c9ae0. Read the comment docs.\n. # Codecov Report\nMerging #1152 into master will increase coverage by 0.02%.\nThe diff coverage is 71.65%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1152      +/-\n==========================================\n+ Coverage   83.78%   83.81%   +0.02%   \n==========================================\n  Files          61       61            \n  Lines        3989     4089     +100   \n  Branches      663      676      +13   \n==========================================\n+ Hits         3342     3427      +85   \n- Misses        548      563      +15   \n  Partials       99       99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions.js | 97.72% <\u00f8> (+1.43%) | :arrow_up: |\n| src/functions/underline.js | 8.33% <0%> (\u00f8) | :arrow_up: |\n| src/functions/overline.js | 25% <0%> (\u00f8) | :arrow_up: |\n| src/functions/genfrac.js | 72.48% <71.85%> (+13.53%) | :arrow_up: |\n| src/buildCommon.js | 89.12% <75%> (-0.29%) | :arrow_down: |\n| src/Parser.js | 92.59% <78.57%> (-0.29%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3613885...306a978. Read the comment docs.\n. # Codecov Report\nMerging #1156 into master will increase coverage by 0.72%.\nThe diff coverage is 80%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1156      +/-\n==========================================\n+ Coverage   81.56%   82.29%   +0.72%   \n==========================================\n  Files          78       77       -1   \n  Lines        4259     4242      -17   \n  Branches      734      732       -2   \n==========================================\n+ Hits         3474     3491      +17   \n+ Misses        670      649      -21   \n+ Partials      115      102      -13\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/defineFunction.js | 93.75% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/symbols.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/symbolsSpacing.js | 64.7% <0%> (-35.3%) | :arrow_down: |\n| src/buildCommon.js | 89.78% <100%> (\u00f8) | :arrow_up: |\n| src/macros.js | 87.9% <100%> (+0.97%) | :arrow_up: |\n| src/functions/kern.js | 81.25% <100%> (+9.02%) | :arrow_up: |\n| src/functions/operatorname.js | 42.42% <100%> (\u00f8) | :arrow_up: |\n| src/mathMLTree.js | 75.43% <78.78%> (+4.47%) | :arrow_up: |\n| src/SourceLocation.js | 100% <0%> (+11.11%) | :arrow_up: |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 978148e...200ded1. Read the comment docs.\n. # Codecov Report\nMerging #1157 into master will decrease coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1157      +/-\n==========================================\n- Coverage   79.37%   79.36%   -0.02%   \n==========================================\n  Files          59       59            \n  Lines        3865     3862       -3   \n  Branches      648      648            \n==========================================\n- Hits         3068     3065       -3   \n  Misses        662      662            \n  Partials      135      135\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 627fc11...ae63194. Read the comment docs.\n. # Codecov Report\nMerging #1159 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1159   +/-\n=======================================\n  Coverage   79.37%   79.37%         \n=======================================\n  Files          59       59         \n  Lines        3865     3865         \n  Branches      648      648         \n=======================================\n  Hits         3068     3068         \n  Misses        662      662         \n  Partials      135      135\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/underline.js | 8.33% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 439cea3...b823a50. Read the comment docs.\n. # Codecov Report\nMerging #1161 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1161   +/-\n=======================================\n  Coverage   79.38%   79.38%         \n=======================================\n  Files          59       59         \n  Lines        3871     3871         \n  Branches      648      648         \n=======================================\n  Hits         3073     3073         \n  Misses        663      663         \n  Partials      135      135\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 789aabe...71f0f28. Read the comment docs.\n. # Codecov Report\nMerging #1162 into master will decrease coverage by 0.11%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1162      +/-\n==========================================\n- Coverage   81.33%   81.22%   -0.12%   \n==========================================\n  Files          76       76            \n  Lines        4212     4218       +6   \n  Branches      727      727            \n==========================================\n  Hits         3426     3426            \n- Misses        666      672       +6   \n  Partials      120      120\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/lap.js | 14.28% <0%> (-5.72%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ef666c1...c31dfbd. Read the comment docs.\n. # Codecov Report\nMerging #1164 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1164   +/-\n=======================================\n  Coverage   79.38%   79.38%         \n=======================================\n  Files          59       59         \n  Lines        3871     3871         \n  Branches      648      648         \n=======================================\n  Hits         3073     3073         \n  Misses        663      663         \n  Partials      135      135\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 95ffb4f...2ba58bc. Read the comment docs.\n. # Codecov Report\nMerging #1167 into master will decrease coverage by 0.56%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1167      +/-\n==========================================\n- Coverage   82.44%   81.88%   -0.57%   \n==========================================\n  Files          60       61       +1   \n  Lines        3880     3880            \n  Branches      651      655       +4   \n==========================================\n- Hits         3199     3177      -22   \n- Misses        578      596      +18   \n- Partials      103      107       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildMathML.js | 93.28% <\u00f8> (-0.22%) | :arrow_down: |\n| src/functions.js | 86% <\u00f8> (-1.04%) | :arrow_down: |\n| src/buildHTML.js | 94.85% <\u00f8> (+0.38%) | :arrow_up: |\n| src/functions/raise.js | 100% <100%> (\u00f8) | |\n| src/functions/href.js | 72.72% <0%> (-27.28%) | :arrow_down: |\n| src/domTree.js | 52.23% <0%> (-9.66%) | :arrow_down: |\n| src/macros.js | 82.6% <0%> (-1.4%) | :arrow_down: |\n| src/buildCommon.js | 87.23% <0%> (-1.38%) | :arrow_down: |\n| src/stretchy.js | 82.02% <0%> (\u00f8) | :arrow_up: |\n| ... and 5 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 933a0ee...4bde427. Read the comment docs.\n. # Codecov Report\nMerging #1169 into master will increase coverage by 0.01%.\nThe diff coverage is 93.33%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1169      +/-\n==========================================\n+ Coverage   83.76%   83.78%   +0.01%   \n==========================================\n  Files          61       61            \n  Lines        3978     3989      +11   \n  Branches      662      663       +1   \n==========================================\n+ Hits         3332     3342      +10   \n- Misses        547      548       +1   \n  Partials       99       99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| katex.js | 79.41% <93.33%> (+5.49%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3e529dd...761cbe6. Read the comment docs.\n. # Codecov Report\nMerging #1170 into master will increase coverage by 0.2%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1170     +/-\n=========================================\n+ Coverage   79.38%   79.59%   +0.2%   \n=========================================\n  Files          59       59           \n  Lines        3871     3871           \n  Branches      648      648           \n=========================================\n+ Hits         3073     3081      +8   \n+ Misses        663      656      -7   \n+ Partials      135      134      -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| katex.js | 73.91% <0%> (+13.04%) | :arrow_up: |\n| src/buildTree.js | 88.23% <0%> (+29.41%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 298b482...db16e49. Read the comment docs.\n. # Codecov Report\nMerging #1177 into master will increase coverage by 0.01%.\nThe diff coverage is 86.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1177      +/-\n==========================================\n+ Coverage   79.61%   79.62%   +0.01%   \n==========================================\n  Files          59       59            \n  Lines        3880     3882       +2   \n  Branches      653      654       +1   \n==========================================\n+ Hits         3089     3091       +2   \n- Misses        657      658       +1   \n+ Partials      134      133       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildCommon.js | 85.04% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/delimsizing.js | 65.85% <0%> (\u00f8) | :arrow_up: |\n| src/functions/sqrt.js | 74.28% <100%> (\u00f8) | :arrow_up: |\n| src/delimiter.js | 42.2% <89.28%> (+0.44%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 56cfc7c...82d388e. Read the comment docs.\n. # Codecov Report\nMerging #1179 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1179      +/-\n==========================================\n+ Coverage    79.6%   79.61%   +<.01%   \n==========================================\n  Files          59       59            \n  Lines        3879     3880       +1   \n  Branches      653      653            \n==========================================\n+ Hits         3088     3089       +1   \n  Misses        657      657            \n  Partials      134      134\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildCommon.js | 85.04% <100%> (+0.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aed1c1e...83a4e88. Read the comment docs.\n. # Codecov Report\nMerging #1182 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1182   +/-\n=======================================\n  Coverage   79.62%   79.62%         \n=======================================\n  Files          59       59         \n  Lines        3882     3882         \n  Branches      654      654         \n=======================================\n  Hits         3091     3091         \n  Misses        658      658         \n  Partials      133      133\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9e22012...22897ed. Read the comment docs.\n. # Codecov Report\nMerging #1184 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1184   +/-\n=======================================\n  Coverage   79.61%   79.61%         \n=======================================\n  Files          59       59         \n  Lines        3880     3880         \n  Branches      653      653         \n=======================================\n  Hits         3089     3089         \n  Misses        657      657         \n  Partials      134      134\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 56cfc7c...fb8d0e4. Read the comment docs.\n. # Codecov Report\nMerging #1187 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1187   +/-\n=======================================\n  Coverage   79.62%   79.62%         \n=======================================\n  Files          59       59         \n  Lines        3882     3882         \n  Branches      654      654         \n=======================================\n  Hits         3091     3091         \n  Misses        658      658         \n  Partials      133      133\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0ce53e7...c47d755. Read the comment docs.\n. # Codecov Report\nMerging #1193 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1193   +/-\n=======================================\n  Coverage   79.66%   79.66%         \n=======================================\n  Files          59       59         \n  Lines        3884     3884         \n  Branches      654      654         \n=======================================\n  Hits         3094     3094         \n  Misses        657      657         \n  Partials      133      133\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b148d5d...2e47b16. Read the comment docs.\n. # Codecov Report\nMerging #1194 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1194   +/-\n=======================================\n  Coverage   79.62%   79.62%         \n=======================================\n  Files          59       59         \n  Lines        3882     3882         \n  Branches      654      654         \n=======================================\n  Hits         3091     3091         \n  Misses        658      658         \n  Partials      133      133\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 06e0393...b6d4134. Read the comment docs.\n. # Codecov Report\nMerging #1195 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1195   +/-\n=======================================\n  Coverage   79.62%   79.62%         \n=======================================\n  Files          59       59         \n  Lines        3882     3882         \n  Branches      654      654         \n=======================================\n  Hits         3091     3091         \n  Misses        658      658         \n  Partials      133      133\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/units.js | 77.27% <\u00f8> (\u00f8) | :arrow_up: |\n| src/spacingData.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 96ad6e0...99da4a6. Read the comment docs.\n. # Codecov Report\nMerging #1197 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1197   +/-\n=======================================\n  Coverage   79.62%   79.62%         \n=======================================\n  Files          59       59         \n  Lines        3882     3882         \n  Branches      654      654         \n=======================================\n  Hits         3091     3091         \n  Misses        658      658         \n  Partials      133      133\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 20b5a58...dad8347. Read the comment docs.\n. # Codecov Report\nMerging #1198 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1198   +/-\n=======================================\n  Coverage   83.88%   83.88%         \n=======================================\n  Files          64       64         \n  Lines        4083     4083         \n  Branches      689      689         \n=======================================\n  Hits         3425     3425         \n  Misses        559      559         \n  Partials       99       99\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1ed99d9...61cbcb7. Read the comment docs.\n. # Codecov Report\nMerging #1200 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1200      +/-\n==========================================\n+ Coverage   79.62%   79.65%   +0.03%   \n==========================================\n  Files          59       59            \n  Lines        3882     3883       +1   \n  Branches      654      654            \n==========================================\n+ Hits         3091     3093       +2   \n+ Misses        658      657       -1   \n  Partials      133      133\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildHTML.js | 93.96% <100%> (+0.43%) | :arrow_up: |\n| src/buildCommon.js | 85.1% <100%> (+0.06%) | :arrow_up: |\n| src/buildMathML.js | 93.5% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 017eb7b...65d70f9. Read the comment docs.\n. # Codecov Report\nMerging #1201 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1201   +/-\n=======================================\n  Coverage   79.62%   79.62%         \n=======================================\n  Files          59       59         \n  Lines        3882     3882         \n  Branches      654      654         \n=======================================\n  Hits         3091     3091         \n  Misses        658      658         \n  Partials      133      133\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildMathML.js | 93.5% <\u00f8> (\u00f8) | :arrow_up: |\n| src/buildHTML.js | 93.53% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 017eb7b...3ce484c. Read the comment docs.\n. # Codecov Report\nMerging #1203 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1203      +/-\n==========================================\n+ Coverage   79.65%   79.66%   +<.01%   \n==========================================\n  Files          59       59            \n  Lines        3883     3884       +1   \n  Branches      654      654            \n==========================================\n+ Hits         3093     3094       +1   \n  Misses        657      657            \n  Partials      133      133\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update abfb641...c05991b. Read the comment docs.\n. # Codecov Report\nMerging #1205 into master will not change coverage.\nThe diff coverage is 60%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1205   +/-\n=======================================\n  Coverage   79.66%   79.66%         \n=======================================\n  Files          59       59         \n  Lines        3884     3884         \n  Branches      654      654         \n=======================================\n  Hits         3094     3094         \n  Misses        657      657         \n  Partials      133      133\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/delimsizing.js | 65.85% <\u00f8> (\u00f8) | :arrow_up: |\n| src/delimiter.js | 42.2% <0%> (\u00f8) | :arrow_up: |\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b148d5d...b8db1c7. Read the comment docs.\n. # Codecov Report\nMerging #1206 into master will decrease coverage by 0.07%.\nThe diff coverage is 94.06%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1206      +/-\n=========================================\n- Coverage   81.67%   81.6%   -0.08%   \n=========================================\n  Files          59      59            \n  Lines        3885    3870      -15   \n  Branches      654     653       -1   \n=========================================\n- Hits         3173    3158      -15   \n  Misses        604     604            \n  Partials      108     108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildHTML.js | 93.54% <94.06%> (-0.42%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 65b4743...8fda230. Read the comment docs.\n. # Codecov Report\nMerging #1207 into master will increase coverage by 1.9%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1207     +/-\n=========================================\n+ Coverage   79.76%   81.67%   +1.9%   \n=========================================\n  Files          59       59           \n  Lines        3885     3885           \n  Branches      654      654           \n=========================================\n+ Hits         3099     3173     +74   \n+ Misses        653      604     -49   \n+ Partials      133      108     -25\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/delimsizing.js | 65.85% <\u00f8> (\u00f8) | :arrow_up: |\n| src/delimiter.js | 69.96% <100%> (+27.75%) | :arrow_up: |\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/buildCommon.js | 87.23% <0%> (+0.42%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0d3cf00...0ac7198. Read the comment docs.\n. # Codecov Report\nMerging #1208 into master will increase coverage by 0.1%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1208     +/-\n=========================================\n+ Coverage   79.66%   79.76%   +0.1%   \n=========================================\n  Files          59       59           \n  Lines        3884     3885      +1   \n  Branches      654      654           \n=========================================\n+ Hits         3094     3099      +5   \n+ Misses        657      653      -4   \n  Partials      133      133\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/buildCommon.js | 86.8% <0%> (+1.7%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 75b55a6...9dc5b81. Read the comment docs.\n. # Codecov Report\nMerging #1210 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1210   +/-\n=======================================\n  Coverage   79.76%   79.76%         \n=======================================\n  Files          59       59         \n  Lines        3885     3885         \n  Branches      654      654         \n=======================================\n  Hits         3099     3099         \n  Misses        653      653         \n  Partials      133      133\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0d3cf00...bb40344. Read the comment docs.\n. # Codecov Report\nMerging #1211 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1211   +/-\n=======================================\n  Coverage   79.76%   79.76%         \n=======================================\n  Files          59       59         \n  Lines        3885     3885         \n  Branches      654      654         \n=======================================\n  Hits         3099     3099         \n  Misses        653      653         \n  Partials      133      133\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0d3cf00...de7e965. Read the comment docs.\n. # Codecov Report\nMerging #1213 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1213      +/-\n==========================================\n+ Coverage    81.6%   81.61%   +0.01%   \n==========================================\n  Files          59       60       +1   \n  Lines        3870     3867       -3   \n  Branches      653      651       -2   \n==========================================\n- Hits         3158     3156       -2   \n+ Misses        604      603       -1   \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/defineFunction.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/text.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions.js | 87.03% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/math.js | 100% <100%> (\u00f8) | |\n| src/Parser.js | 92.87% <100%> (-0.02%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5bcdeec...a423b64. Read the comment docs.\n. # Codecov Report\nMerging #1217 into master will increase coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1217      +/-\n==========================================\n+ Coverage   83.76%   83.82%   +0.06%   \n==========================================\n  Files          64       64            \n  Lines        4102     4105       +3   \n  Branches      694      696       +2   \n==========================================\n+ Hits         3436     3441       +5   \n  Misses        567      567            \n+ Partials       99       97       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/Parser.js | 93.01% <100%> (+0.05%) | :arrow_up: |\n| src/buildCommon.js | 89.78% <0%> (+0.42%) | :arrow_up: |\n| src/fontMetrics.js | 88.88% <0%> (+3.7%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4314342...c14bbf2. Read the comment docs.\n. # Codecov Report\nMerging #1218 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1218   +/-\n=======================================\n  Coverage   81.61%   81.61%         \n=======================================\n  Files          60       60         \n  Lines        3867     3867         \n  Branches      651      651         \n=======================================\n  Hits         3156     3156         \n  Misses        603      603         \n  Partials      108      108\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4f29c5a...7014ace. Read the comment docs.\n. # Codecov Report\nMerging #1220 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1220   +/-\n=======================================\n  Coverage   81.38%   81.38%         \n=======================================\n  Files          73       73         \n  Lines        4227     4227         \n  Branches      728      728         \n=======================================\n  Hits         3440     3440         \n  Misses        667      667         \n  Partials      120      120\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 34cf5c2...1362f99. Read the comment docs.\n. # Codecov Report\nMerging #1224 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1224   +/-\n=======================================\n  Coverage   81.61%   81.61%         \n=======================================\n  Files          60       60         \n  Lines        3867     3867         \n  Branches      651      651         \n=======================================\n  Hits         3156     3156         \n  Misses        603      603         \n  Partials      108      108\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 95ea3e3...cc14ca4. Read the comment docs.\n. # Codecov Report\nMerging #1227 into master will increase coverage by 0.48%.\nThe diff coverage is 94.64%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1227      +/-\n==========================================\n+ Coverage   81.61%   82.09%   +0.48%   \n==========================================\n  Files          60       62       +2   \n  Lines        3867     3916      +49   \n  Branches      651      664      +13   \n==========================================\n+ Hits         3156     3215      +59   \n+ Misses        603      594       -9   \n+ Partials      108      107       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions.js | 87.03% <\u00f8> (\u00f8) | :arrow_up: |\n| src/unicodeScripts.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/MacroExpander.js | 92.78% <100%> (+0.15%) | :arrow_up: |\n| src/functions/sysfont.js | 100% <100%> (\u00f8) | |\n| src/fontMetrics.js | 86.66% <66.66%> (+1.48%) | :arrow_up: |\n| src/wide-character.js | 96.87% <96.87%> (\u00f8) | |\n| src/buildHTML.js | 94.47% <0%> (+0.92%) | :arrow_up: |\n| src/buildMathML.js | 94.8% <0%> (+1.29%) | :arrow_up: |\n| ... and 2 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e31ccee...fb306fd. Read the comment docs.\n. # Codecov Report\nMerging #1232 into master will increase coverage by 0.17%.\nThe diff coverage is 93.42%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1232      +/-\n==========================================\n+ Coverage   83.65%   83.83%   +0.17%   \n==========================================\n  Files          60       61       +1   \n  Lines        3898     3971      +73   \n  Branches      651      659       +8   \n==========================================\n+ Hits         3261     3329      +68   \n- Misses        540      543       +3   \n- Partials       97       99       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildCommon.js | 90.41% <100%> (+0.12%) | :arrow_up: |\n| src/buildMathML.js | 94.83% <100%> (+0.03%) | :arrow_up: |\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/wide-character.js | 72.22% <72.22%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f25e08d...c0be220. Read the comment docs.\n. # Codecov Report\nMerging #1235 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1235   +/-\n======================================\n  Coverage    84.1%   84.1%         \n======================================\n  Files          79      79         \n  Lines        4561    4561         \n  Branches      804     804         \n======================================\n  Hits         3836    3836         \n  Misses        630     630         \n  Partials       95      95\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e454eb3...0f91213. Read the comment docs.\n. # Codecov Report\nMerging #1236 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1236   +/-\n=======================================\n  Coverage   82.41%   82.41%         \n=======================================\n  Files          60       60         \n  Lines        3866     3866         \n  Branches      651      651         \n=======================================\n  Hits         3186     3186         \n  Misses        577      577         \n  Partials      103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1c5a7ed...0824010. Read the comment docs.\n. # Codecov Report\nMerging #1237 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1237   +/-\n=======================================\n  Coverage   82.44%   82.44%         \n=======================================\n  Files          60       60         \n  Lines        3880     3880         \n  Branches      651      651         \n=======================================\n  Hits         3199     3199         \n  Misses        578      578         \n  Partials      103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 933a0ee...64dceb5. Read the comment docs.\n. # Codecov Report\nMerging #1239 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1239      +/-\n=========================================\n- Coverage   81.61%   81.6%   -0.01%   \n=========================================\n  Files          60      60            \n  Lines        3867    3866       -1   \n  Branches      651     651            \n=========================================\n- Hits         3156    3155       -1   \n  Misses        603     603            \n  Partials      108     108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildTree.js | 88.23% <\u00f8> (\u00f8) | :arrow_up: |\n| src/domTree.js | 51.58% <\u00f8> (-0.65%) | :arrow_down: |\n| src/functions/verb.js | 11.76% <\u00f8> (\u00f8) | :arrow_up: |\n| src/delimiter.js | 69.96% <100%> (\u00f8) | :arrow_up: |\n| src/buildCommon.js | 87.34% <100%> (+0.1%) | :arrow_up: |\n| src/stretchy.js | 82.02% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e31ccee...32dc35a. Read the comment docs.\n. # Codecov Report\nMerging #1243 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1243   +/-\n=======================================\n  Coverage   82.41%   82.41%         \n=======================================\n  Files          60       60         \n  Lines        3866     3866         \n  Branches      651      651         \n=======================================\n  Hits         3186     3186         \n  Misses        577      577         \n  Partials      103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f35c418...dfd2c30. Read the comment docs.\n. # Codecov Report\nMerging #1246 into master will increase coverage by 0.8%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1246     +/-\n=========================================\n+ Coverage    81.6%   82.41%   +0.8%   \n=========================================\n  Files          60       60           \n  Lines        3866     3866           \n  Branches      651      651           \n=========================================\n+ Hits         3155     3186     +31   \n+ Misses        603      577     -26   \n+ Partials      108      103      -5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/domTree.js | 61.99% <100%> (+10.4%) | :arrow_up: |\n| src/buildHTML.js | 94.47% <0%> (+0.92%) | :arrow_up: |\n| src/buildCommon.js | 88.6% <0%> (+1.26%) | :arrow_up: |\n| src/functions/href.js | 100% <0%> (+27.27%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 850a071...07f32d3. Read the comment docs.\n. # Codecov Report\nMerging #1247 into master will decrease coverage by 0.01%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1247      +/-\n==========================================\n- Coverage   82.41%   82.39%   -0.02%   \n==========================================\n  Files          60       60            \n  Lines        3866     3868       +2   \n  Branches      651      651            \n==========================================\n+ Hits         3186     3187       +1   \n- Misses        577      578       +1   \n  Partials      103      103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/domTree.js | 61.88% <50%> (-0.11%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0f17ac5...0c8967b. Read the comment docs.\n. # Codecov Report\nMerging #1248 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1248      +/-\n==========================================\n+ Coverage   82.41%   82.41%   +<.01%   \n==========================================\n  Files          60       60            \n  Lines        3866     3867       +1   \n  Branches      651      651            \n==========================================\n+ Hits         3186     3187       +1   \n  Misses        577      577            \n  Partials      103      103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f35c418...b1e5e2b. Read the comment docs.\n. # Codecov Report\nMerging #1249 into master will increase coverage by 0.03%.\nThe diff coverage is 80%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1249      +/-\n=========================================\n+ Coverage   83.77%   83.8%   +0.03%   \n=========================================\n  Files          61      61            \n  Lines        4001    3990      -11   \n  Branches      666     666            \n=========================================\n- Hits         3352    3344       -8   \n+ Misses        550     547       -3   \n  Partials       99      99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/genfrac.js | 58.94% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/overline.js | 25% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/underline.js | 8.33% <\u00f8> (\u00f8) | :arrow_up: |\n| src/stretchy.js | 84.14% <\u00f8> (+1.72%) | :arrow_up: |\n| src/environments/array.js | 43.38% <0%> (\u00f8) | :arrow_up: |\n| src/svgGeometry.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/buildCommon.js | 89.36% <100%> (-0.05%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7b7b532...614cc2f. Read the comment docs.\n. # Codecov Report\nMerging #1251 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1251   +/-\n=======================================\n  Coverage   82.41%   82.41%         \n=======================================\n  Files          60       60         \n  Lines        3866     3866         \n  Branches      651      651         \n=======================================\n  Hits         3186     3186         \n  Misses        577      577         \n  Partials      103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0f17ac5...fd8111d. Read the comment docs.\n. # Codecov Report\nMerging #1252 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1252   +/-\n=======================================\n  Coverage   82.39%   82.39%         \n=======================================\n  Files          60       60         \n  Lines        3868     3868         \n  Branches      651      651         \n=======================================\n  Hits         3187     3187         \n  Misses        578      578         \n  Partials      103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cbfcd57...be916dd. Read the comment docs.\n. # Codecov Report\nMerging #1253 into master will increase coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1253      +/-\n==========================================\n+ Coverage   82.39%   82.44%   +0.05%   \n==========================================\n  Files          60       60            \n  Lines        3868     3880      +12   \n  Branches      651      651            \n==========================================\n+ Hits         3187     3199      +12   \n  Misses        578      578            \n  Partials      103      103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/macros.js | 84% <100%> (+1.39%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0a2bd88...a2e8083. Read the comment docs.\n. # Codecov Report\nMerging #1256 into master will not change coverage.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1256   +/-\n=======================================\n  Coverage   83.78%   83.78%         \n=======================================\n  Files          61       61         \n  Lines        3989     3989         \n  Branches      663      663         \n=======================================\n  Hits         3342     3342         \n  Misses        548      548         \n  Partials       99       99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildHTML.js | 96.77% <66.66%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 49e673a...1a09edd. Read the comment docs.\n. # Codecov Report\nMerging #1257 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1257   +/-\n=======================================\n  Coverage   82.44%   82.44%         \n=======================================\n  Files          60       60         \n  Lines        3880     3880         \n  Branches      651      651         \n=======================================\n  Hits         3199     3199         \n  Misses        578      578         \n  Partials      103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 00538f6...7b14c3c. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@b74b237). Click here to learn what that means.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1258   +/-\n=========================================\n  Coverage          ?   83.88%         \n=========================================\n  Files             ?       61         \n  Lines             ?     3978         \n  Branches          ?      661         \n=========================================\n  Hits              ?     3337         \n  Misses            ?      543         \n  Partials          ?       98\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/verb.js | 15.38% <0%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b74b237...4fa14d1. Read the comment docs.\n. # Codecov Report\nMerging #1260 into master will increase coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1260      +/-\n==========================================\n+ Coverage   82.39%   82.44%   +0.05%   \n==========================================\n  Files          60       60            \n  Lines        3868     3880      +12   \n  Branches      651      651            \n==========================================\n+ Hits         3187     3199      +12   \n  Misses        578      578            \n  Partials      103      103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 84% <100%> (+1.39%) | :arrow_up: |\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0a2bd88...649c5a6. Read the comment docs.\n. # Codecov Report\nMerging #1261 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1261   +/-\n=======================================\n  Coverage   82.44%   82.44%         \n=======================================\n  Files          60       60         \n  Lines        3880     3880         \n  Branches      651      651         \n=======================================\n  Hits         3199     3199         \n  Misses        578      578         \n  Partials      103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fe2dc1b...a85bd87. Read the comment docs.\n. # Codecov Report\nMerging #1263 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1263   +/-\n=======================================\n  Coverage   82.44%   82.44%         \n=======================================\n  Files          60       60         \n  Lines        3880     3880         \n  Branches      651      651         \n=======================================\n  Hits         3199     3199         \n  Misses        578      578         \n  Partials      103      103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| katex.js | 73.91% <\u00f8> (\u00f8) | :arrow_up: |\n| src/symbols.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b4b57cb...2fe22d2. Read the comment docs.\n. # Codecov Report\nMerging #1264 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1264   +/-\n=======================================\n  Coverage   82.44%   82.44%         \n=======================================\n  Files          60       60         \n  Lines        3880     3880         \n  Branches      651      651         \n=======================================\n  Hits         3199     3199         \n  Misses        578      578         \n  Partials      103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 933a0ee...658c043. Read the comment docs.\n. # Codecov Report\nMerging #1267 into master will decrease coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1267      +/-\n==========================================\n- Coverage   83.89%   83.88%   -0.01%   \n==========================================\n  Files          79       79            \n  Lines        4550     4549       -1   \n  Branches      800      800            \n==========================================\n- Hits         3817     3816       -1   \n  Misses        638      638            \n  Partials       95       95\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildHTML.js | 97.76% <\u00f8> (-0.02%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e5cb511...79f14e3. Read the comment docs.\n. # Codecov Report\nMerging #1268 into master will not change coverage.\nThe diff coverage is 75.8%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1268   +/-\n=======================================\n  Coverage   82.44%   82.44%         \n=======================================\n  Files          60       60         \n  Lines        3880     3880         \n  Branches      651      649    -2   \n=======================================\n  Hits         3199     3199         \n  Misses        578      578         \n  Partials      103      103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/unicodeAccents.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/defineFunction.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/Token.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/ParseNode.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/color.js | 95.45% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/font.js | 95.45% <\u00f8> (\u00f8) | :arrow_up: |\n| src/ParseError.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/verb.js | 11.76% <0%> (\u00f8) | :arrow_up: |\n| src/functions/mod.js | 8.69% <0%> (\u00f8) | :arrow_up: |\n| src/functions/underline.js | 8.33% <0%> (\u00f8) | :arrow_up: |\n| ... and 43 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 812b350...d9b815a. Read the comment docs.\n. # Codecov Report\nMerging #1269 into master will increase coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1269      +/-\n==========================================\n+ Coverage   82.29%   82.34%   +0.05%   \n==========================================\n  Files          77       77            \n  Lines        4382     4384       +2   \n  Branches      763      764       +1   \n==========================================\n+ Hits         3606     3610       +4   \n+ Misses        673      671       -2   \n  Partials      103      103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/symbols.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/delimiter.js | 69.96% <100%> (\u00f8) | :arrow_up: |\n| src/buildMathML.js | 98.63% <100%> (\u00f8) | :arrow_up: |\n| src/buildCommon.js | 88.06% <100%> (+0.56%) | :arrow_up: |\n| src/fontMetrics.js | 92.3% <100%> (+3.41%) | :arrow_up: |\n| src/Options.js | 98.11% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 251283f...3ec60f6. Read the comment docs.\n. # Codecov Report\nMerging #1270 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1270   +/-\n=======================================\n  Coverage   83.99%   83.99%         \n=======================================\n  Files          62       62         \n  Lines        4017     4017         \n  Branches      670      670         \n=======================================\n  Hits         3374     3374         \n  Misses        546      546         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4801ab8...1e61a65. Read the comment docs.\n. # Codecov Report\nMerging #1273 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1273   +/-\n=======================================\n  Coverage   82.44%   82.44%         \n=======================================\n  Files          60       60         \n  Lines        3880     3880         \n  Branches      651      651         \n=======================================\n  Hits         3199     3199         \n  Misses        578      578         \n  Partials      103      103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 812b350...c3e29c2. Read the comment docs.\n. # Codecov Report\nMerging #1274 into master will increase coverage by 0.56%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1274      +/-\n==========================================\n+ Coverage   83.08%   83.65%   +0.56%   \n==========================================\n  Files          60       60            \n  Lines        3891     3898       +7   \n  Branches      651      651            \n==========================================\n+ Hits         3233     3261      +28   \n+ Misses        559      540      -19   \n+ Partials       99       97       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 84.51% <100%> (+0.73%) | :arrow_up: |\n| src/buildHTML.js | 96.77% <0%> (+1.38%) | :arrow_up: |\n| src/Style.js | 100% <0%> (+4%) | :arrow_up: |\n| src/Options.js | 98.11% <0%> (+5.66%) | :arrow_up: |\n| src/functions/kern.js | 81.25% <0%> (+31.25%) | :arrow_up: |\n| src/functions/sizing.js | 100% <0%> (+37.5%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7fec5ae...685c408. Read the comment docs.\n. # Codecov Report\nMerging #1276 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1276      +/-\n==========================================\n+ Coverage   83.78%   83.79%   +0.01%   \n==========================================\n  Files          61       61            \n  Lines        3989     3992       +3   \n  Branches      663      663            \n==========================================\n+ Hits         3342     3345       +3   \n  Misses        548      548            \n  Partials       99       99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/delimsizing.js | 65.85% <\u00f8> (\u00f8) | :arrow_up: |\n| src/ParseNode.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/buildTree.js | 88.23% <\u00f8> (\u00f8) | :arrow_up: |\n| src/ParseError.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/defineEnvironment.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| katex.js | 79.41% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/math.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/styling.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions.js | 96.29% <100%> (\u00f8) | :arrow_up: |\n| src/parseTree.js | 100% <100%> (\u00f8) | :arrow_up: |\n| ... and 6 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3613885...3045271. Read the comment docs.\n. # Codecov Report\nMerging #1277 into master will increase coverage by 0.58%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1277      +/-\n==========================================\n+ Coverage    82.5%   83.08%   +0.58%   \n==========================================\n  Files          60       60            \n  Lines        3893     3891       -2   \n  Branches      651      651            \n==========================================\n+ Hits         3212     3233      +21   \n+ Misses        578      559      -19   \n+ Partials      103       99       -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 83.78% <\u00f8> (-0.22%) | :arrow_down: |\n| src/functions.js | 96.29% <100%> (+9.25%) | :arrow_up: |\n| src/buildHTML.js | 95.39% <0%> (+0.92%) | :arrow_up: |\n| src/buildMathML.js | 94.8% <0%> (+1.29%) | :arrow_up: |\n| src/buildCommon.js | 90.29% <0%> (+1.68%) | :arrow_up: |\n| src/functions/op.js | 97.18% <0%> (+14.08%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 98b8509...a746a76. Read the comment docs.\n. # Codecov Report\nMerging #1278 into master will decrease coverage by 0.11%.\nThe diff coverage is 78.88%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1278      +/-\n==========================================\n- Coverage   83.99%   83.87%   -0.12%   \n==========================================\n  Files          62       64       +2   \n  Lines        4017     4081      +64   \n  Branches      670      689      +19   \n==========================================\n+ Hits         3374     3423      +49   \n- Misses        546      559      +13   \n- Partials       97       99       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/ParseNode.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/MacroExpander.js | 92.39% <\u00f8> (-0.25%) | :arrow_down: |\n| test/Warning.js | 100% <100%> (\u00f8) | |\n| src/Lexer.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/environments/array.js | 43.63% <100%> (+0.77%) | :arrow_up: |\n| src/macros.js | 85.09% <100%> (+0.09%) | :arrow_up: |\n| src/Parser.js | 92.95% <100%> (+0.07%) | :arrow_up: |\n| src/functions/kern.js | 70.58% <50%> (-10.67%) | :arrow_down: |\n| src/Settings.js | 71.87% <64%> (-28.13%) | :arrow_down: |\n| test/setup.js | 75% <75%> (\u00f8) | |\n| ... and 3 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4801ab8...ca212c8. Read the comment docs.\n. # Codecov Report\nMerging #1279 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1279   +/-\n======================================\n  Coverage    82.5%   82.5%         \n======================================\n  Files          60      60         \n  Lines        3893    3893         \n  Branches      651     651         \n======================================\n  Hits         3212    3212         \n  Misses        578     578         \n  Partials      103     103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| katex.js | 73.91% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5535d72...6d49450. Read the comment docs.\n. # Codecov Report\nMerging #1280 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1280   +/-\n=======================================\n  Coverage   82.44%   82.44%         \n=======================================\n  Files          60       60         \n  Lines        3880     3880         \n  Branches      651      651         \n=======================================\n  Hits         3199     3199         \n  Misses        578      578         \n  Partials      103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bd7a977...6b4c8dd. Read the comment docs.\n. # Codecov Report\nMerging #1283 into master will increase coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1283      +/-\n=========================================\n+ Coverage   82.44%   82.5%   +0.05%   \n=========================================\n  Files          60      60            \n  Lines        3880    3893      +13   \n  Branches      651     651            \n=========================================\n+ Hits         3199    3212      +13   \n  Misses        578     578            \n  Partials      103     103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 85.27% <100%> (+1.27%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4687aa9...7bdb78a. Read the comment docs.\n. # Codecov Report\nMerging #1284 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1284   +/-\n======================================\n  Coverage    82.5%   82.5%         \n======================================\n  Files          60      60         \n  Lines        3893    3893         \n  Branches      651     651         \n======================================\n  Hits         3212    3212         \n  Misses        578     578         \n  Partials      103     103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 85.27% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2554f68...a808803. Read the comment docs.\n. # Codecov Report\nMerging #1285 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1285   +/-\n======================================\n  Coverage    82.5%   82.5%         \n======================================\n  Files          60      60         \n  Lines        3893    3893         \n  Branches      651     651         \n======================================\n  Hits         3212    3212         \n  Misses        578     578         \n  Partials      103     103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 84% <\u00f8> (-1.28%) | :arrow_down: |\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2554f68...d9a793c. Read the comment docs.\n. # Codecov Report\nMerging #1286 into master will decrease coverage by 0.05%.\nThe diff coverage is 20%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1286      +/-\n==========================================\n- Coverage   83.81%   83.76%   -0.06%   \n==========================================\n  Files          61       61            \n  Lines        3974     3978       +4   \n  Branches      661      662       +1   \n==========================================\n+ Hits         3331     3332       +1   \n- Misses        545      547       +2   \n- Partials       98       99       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/verb.js | 12.5% <0%> (-2.89%) | :arrow_down: |\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 43bfaed...e2e0f83. Read the comment docs.\n. # Codecov Report\nMerging #1287 into master will increase coverage by 0.06%.\nThe diff coverage is 94.59%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1287      +/-\n==========================================\n+ Coverage    83.8%   83.87%   +0.06%   \n==========================================\n  Files          61       61            \n  Lines        3990     4018      +28   \n  Branches      666      671       +5   \n==========================================\n+ Hits         3344     3370      +26   \n- Misses        547      549       +2   \n  Partials       99       99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildCommon.js | 89.36% <100%> (\u00f8) | :arrow_up: |\n| src/macros.js | 85% <100%> (+0.18%) | :arrow_up: |\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/domTree.js | 62.11% <75%> (+0.23%) | :arrow_up: |\n| src/buildHTML.js | 96.62% <96.29%> (-0.15%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 34e6458...60f8a8d. Read the comment docs.\n. # Codecov Report\nMerging #1290 into master will decrease coverage by 0.01%.\nThe diff coverage is 83.33%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1290      +/-\n==========================================\n- Coverage   83.79%   83.77%   -0.02%   \n==========================================\n  Files          61       61            \n  Lines        3992     4001       +9   \n  Branches      663      666       +3   \n==========================================\n+ Hits         3345     3352       +7   \n- Misses        548      550       +2   \n  Partials       99       99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/ParseNode.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/op.js | 97.18% <100%> (\u00f8) | :arrow_up: |\n| src/functions.js | 93.65% <81.81%> (-2.65%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5a4aedd...9496a06. Read the comment docs.\n. # Codecov Report\nMerging #1295 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1295   +/-\n=======================================\n  Coverage   83.88%   83.88%         \n=======================================\n  Files          61       61         \n  Lines        3978     3978         \n  Branches      661      661         \n=======================================\n  Hits         3337     3337         \n  Misses        543      543         \n  Partials       98       98\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildCommon.js | 90.41% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ba24d20...3e4b5aa. Read the comment docs.\n. # Codecov Report\nMerging #1297 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1297   +/-\n=======================================\n  Coverage   83.78%   83.78%         \n=======================================\n  Files          61       61         \n  Lines        3989     3989         \n  Branches      663      663         \n=======================================\n  Hits         3342     3342         \n  Misses        548      548         \n  Partials       99       99\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 42f3053...f544810. Read the comment docs.\n. # Codecov Report\nMerging #1298 into master will increase coverage by 0.06%.\nThe diff coverage is 95.23%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1298      +/-\n==========================================\n+ Coverage   83.92%   83.99%   +0.06%   \n==========================================\n  Files          61       62       +1   \n  Lines        4001     4017      +16   \n  Branches      665      670       +5   \n==========================================\n+ Hits         3358     3374      +16   \n  Misses        546      546            \n  Partials       97       97\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/defineFunction.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions.js | 93.33% <\u00f8> (-0.32%) | :arrow_down: |\n| src/Parser.js | 92.87% <\u00f8> (\u00f8) | :arrow_up: |\n| src/ParseNode.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/environments/array.js | 42.85% <100%> (\u00f8) | :arrow_up: |\n| src/buildHTML.js | 96.68% <100%> (+0.08%) | :arrow_up: |\n| src/functions/cr.js | 92.3% <92.3%> (\u00f8) | |\n| src/units.js | 81.81% <0%> (+4.54%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bb1dc0c...f79e221. Read the comment docs.\n. # Codecov Report\nMerging #1300 into master will decrease coverage by 0.06%.\nThe diff coverage is 70%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1300      +/-\n==========================================\n- Coverage   83.88%   83.81%   -0.07%   \n==========================================\n  Files          61       61            \n  Lines        3978     3974       -4   \n  Branches      661      661            \n==========================================\n- Hits         3337     3331       -6   \n- Misses        543      545       +2   \n  Partials       98       98\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildCommon.js | 89.4% <70%> (-1.01%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5c159ab...57ce678. Read the comment docs.\n. # Codecov Report\nMerging #1302 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1302   +/-\n=======================================\n  Coverage   83.78%   83.78%         \n=======================================\n  Files          61       61         \n  Lines        3989     3989         \n  Branches      663      663         \n=======================================\n  Hits         3342     3342         \n  Misses        548      548         \n  Partials       99       99\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2ee5c68...c8e5b8d. Read the comment docs.\n. # Codecov Report\nMerging #1304 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1304   +/-\n======================================\n  Coverage    83.8%   83.8%         \n======================================\n  Files          61      61         \n  Lines        3990    3990         \n  Branches      666     666         \n======================================\n  Hits         3344    3344         \n  Misses        547     547         \n  Partials       99      99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildHTML.js | 96.77% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c2ae9e0...57a8ba8. Read the comment docs.\n. # Codecov Report\nMerging #1305 into master will increase coverage by 0.37%.\nThe diff coverage is 57.89%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1305      +/-\n==========================================\n+ Coverage   83.87%   84.25%   +0.37%   \n==========================================\n  Files          61       61            \n  Lines        4018     3975      -43   \n  Branches      671      662       -9   \n==========================================\n- Hits         3370     3349      -21   \n+ Misses        549      532      -17   \n+ Partials       99       94       -5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/domTree.js | 65.21% <57.89%> (+3.1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 523df29...00f8e15. Read the comment docs.\n. # Codecov Report\nMerging #1306 into master will decrease coverage by 0.31%.\nThe diff coverage is 39.28%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1306      +/-\n==========================================\n- Coverage   84.24%   83.92%   -0.32%   \n==========================================\n  Files          61       61            \n  Lines        3973     4001      +28   \n  Branches      662      665       +3   \n==========================================\n+ Hits         3347     3358      +11   \n- Misses        532      546      +14   \n- Partials       94       97       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/environments/array.js | 42.85% <39.28%> (-0.53%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 929b9bf...0543f9e. Read the comment docs.\n. # Codecov Report\nMerging #1307 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1307      +/-\n==========================================\n- Coverage   84.25%   84.24%   -0.01%   \n==========================================\n  Files          61       61            \n  Lines        3975     3973       -2   \n  Branches      662      662            \n==========================================\n- Hits         3349     3347       -2   \n  Misses        532      532            \n  Partials       94       94\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildHTML.js | 96.59% <100%> (-0.03%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9bb48b8...5f7fa6b. Read the comment docs.\n. # Codecov Report\nMerging #1308 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1308   +/-\n=======================================\n  Coverage   83.92%   83.92%         \n=======================================\n  Files          61       61         \n  Lines        4001     4001         \n  Branches      665      665         \n=======================================\n  Hits         3358     3358         \n  Misses        546      546         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 74422e1...a2c3e81. Read the comment docs.\n. # Codecov Report\nMerging #1309 into master will increase coverage by 0.26%.\nThe diff coverage is 98.79%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1309      +/-\n==========================================\n+ Coverage   81.15%   81.41%   +0.26%   \n==========================================\n  Files          67       67            \n  Lines        4187     4246      +59   \n  Branches      714      728      +14   \n==========================================\n+ Hits         3398     3457      +59   \n  Misses        669      669            \n  Partials      120      120\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/ParseNode.js | 88.88% <\u00f8> (\u00f8) | :arrow_up: |\n| src/buildMathML.js | 95.34% <100%> (+0.61%) | :arrow_up: |\n| src/Settings.js | 72.72% <100%> (+0.85%) | :arrow_up: |\n| src/functions/text.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/parseTree.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/buildHTML.js | 96.82% <100%> (+0.17%) | :arrow_up: |\n| src/MacroExpander.js | 92.85% <100%> (+0.46%) | :arrow_up: |\n| src/Parser.js | 93.01% <100%> (\u00f8) | :arrow_up: |\n| src/macros.js | 86.55% <96%> (+1.46%) | :arrow_up: |\n| src/buildTree.js | 94.11% <0%> (+5.88%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 99b2afa...b12e429. Read the comment docs.\n. # Codecov Report\nMerging #1310 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1310   +/-\n=======================================\n  Coverage   83.92%   83.92%         \n=======================================\n  Files          61       61         \n  Lines        4001     4001         \n  Branches      665      665         \n=======================================\n  Hits         3358     3358         \n  Misses        546      546         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 74422e1...88d0c17. Read the comment docs.\n. # Codecov Report\nMerging #1312 into master will decrease coverage by 0.12%.\nThe diff coverage is 69.23%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1312      +/-\n==========================================\n- Coverage   83.88%   83.76%   -0.13%   \n==========================================\n  Files          64       64            \n  Lines        4083     4102      +19   \n  Branches      689      694       +5   \n==========================================\n+ Hits         3425     3436      +11   \n- Misses        559      567       +8   \n  Partials       99       99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/accentunder.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/stretchy.js | 84.14% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/operatorname.js | 42.42% <0%> (-2.74%) | :arrow_down: |\n| src/defineEnvironment.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/color.js | 95.45% <100%> (\u00f8) | :arrow_up: |\n| src/Parser.js | 92.95% <100%> (\u00f8) | :arrow_up: |\n| src/defineFunction.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/utils.js | 69.56% <100%> (\u00f8) | :arrow_up: |\n| src/functions/cr.js | 95.65% <100%> (+0.19%) | :arrow_up: |\n| src/functions/href.js | 100% <100%> (\u00f8) | :arrow_up: |\n| ... and 7 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7eed150...d80bb5f. Read the comment docs.\n. # Codecov Report\nMerging #1314 into master will decrease coverage by 0.07%.\nThe diff coverage is 75.51%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1314      +/-\n==========================================\n- Coverage   83.96%   83.88%   -0.08%   \n==========================================\n  Files          64       64            \n  Lines        4053     4083      +30   \n  Branches      679      689      +10   \n==========================================\n+ Hits         3403     3425      +22   \n- Misses        552      559       +7   \n- Partials       98       99       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/ParseNode.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/MacroExpander.js | 92.39% <\u00f8> (-0.25%) | :arrow_down: |\n| src/functions/kern.js | 70.58% <0%> (\u00f8) | :arrow_up: |\n| src/Parser.js | 92.95% <100%> (\u00f8) | :arrow_up: |\n| src/Lexer.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/macros.js | 85.09% <100%> (+0.09%) | :arrow_up: |\n| src/environments/array.js | 43.63% <100%> (+0.77%) | :arrow_up: |\n| src/Settings.js | 71.87% <42.85%> (-22.57%) | :arrow_down: |\n| src/functions/cr.js | 95.45% <93.75%> (+3.14%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7ab4f76...51b17e0. Read the comment docs.\n. # Codecov Report\nMerging #1318 into master will decrease coverage by 2.63%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1318      +/-\n==========================================\n- Coverage   83.82%   81.19%   -2.64%   \n==========================================\n  Files          64       66       +2   \n  Lines        4105     4184      +79   \n  Branches      696      714      +18   \n==========================================\n- Hits         3441     3397      -44   \n- Misses        567      667     +100   \n- Partials       97      120      +23\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| test/Warning.js | | |\n| katex.js | | |\n| contrib/copy-tex/copy-tex.js | 0% <0%> (\u00f8) | |\n| contrib/auto-render/auto-render.js | 0% <0%> (\u00f8) | |\n| src/unicodeMake.js | 0% <0%> (\u00f8) | |\n| contrib/mathtex-script-type/mathtex-script-type.js | 0% <0%> (\u00f8) | |\n| contrib/copy-tex/katex2tex.js | 0% <0%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4a3d6a5...de4b006. Read the comment docs.\n. # Codecov Report\nMerging #1322 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1322   +/-\n=======================================\n  Coverage   83.82%   83.82%         \n=======================================\n  Files          64       64         \n  Lines        4105     4105         \n  Branches      696      696         \n=======================================\n  Hits         3441     3441         \n  Misses        567      567         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 369b5a8...253ee6f. Read the comment docs.\n. # Codecov Report\nMerging #1323 into master will decrease coverage by 0.03%.\nThe diff coverage is 92.3%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1323      +/-\n==========================================\n- Coverage   81.19%   81.15%   -0.04%   \n==========================================\n  Files          66       66            \n  Lines        4184     4187       +3   \n  Branches      714      714            \n==========================================\n+ Hits         3397     3398       +1   \n- Misses        667      669       +2   \n  Partials      120      120\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions.js | 94% <\u00f8> (+0.66%) | :arrow_up: |\n| src/functions/op.js | 94.04% <92.3%> (-3.14%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7b22eeb...a235dd1. Read the comment docs.\n. # Codecov Report\nMerging #1324 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1324   +/-\n=======================================\n  Coverage   81.15%   81.15%         \n=======================================\n  Files          67       67         \n  Lines        4187     4187         \n  Branches      714      714         \n=======================================\n  Hits         3398     3398         \n  Misses        669      669         \n  Partials      120      120\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/defineEnvironment.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/defineFunction.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/mathMLTree.js | 70.96% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/op.js | 94.04% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f49a524...82e1377. Read the comment docs.\n. # Codecov Report\nMerging #1325 into master will not change coverage.\nThe diff coverage is 91.3%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1325   +/-\n=======================================\n  Coverage   81.15%   81.15%         \n=======================================\n  Files          66       67    +1   \n  Lines        4187     4187         \n  Branches      714      714         \n=======================================\n  Hits         3398     3398         \n  Misses        669      669         \n  Partials      120      120\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions.js | 96.87% <\u00f8> (+2.87%) | :arrow_up: |\n| src/buildHTML.js | 96.65% <\u00f8> (-0.03%) | :arrow_down: |\n| src/buildMathML.js | 94.73% <\u00f8> (-0.11%) | :arrow_down: |\n| src/functions/mclass.js | 91.3% <91.3%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 73e0c13...e92d0e1. Read the comment docs.\n. # Codecov Report\nMerging #1327 into master will decrease coverage by <.01%.\nThe diff coverage is 85.71%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1327      +/-\n=========================================\n- Coverage   81.41%   81.4%   -0.01%   \n=========================================\n  Files          69      70       +1   \n  Lines        4245    4243       -2   \n  Branches      728     728            \n=========================================\n- Hits         3456    3454       -2   \n  Misses        669     669            \n  Partials      120     120\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildMathML.js | 97.4% <\u00f8> (+2.19%) | :arrow_up: |\n| src/functions.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/buildHTML.js | 96.95% <\u00f8> (+0.16%) | :arrow_up: |\n| src/stretchy.js | 84.33% <100%> (+0.19%) | :arrow_up: |\n| src/functions/arrow.js | 84.84% <84.84%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 35d6181...f01efd6. Read the comment docs.\n. # Codecov Report\nMerging #1328 into master will not change coverage.\nThe diff coverage is 90%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1328   +/-\n=======================================\n  Coverage   81.41%   81.41%         \n=======================================\n  Files          67       67         \n  Lines        4246     4246         \n  Branches      728      728         \n=======================================\n  Hits         3457     3457         \n  Misses        669      669         \n  Partials      120      120\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions.js | 100% <\u00f8> (+3.12%) | :arrow_up: |\n| src/functions/genfrac.js | 61.9% <90%> (+2.95%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5aad11e...8e7ceea. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@fabae7c). Click here to learn what that means.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1329   +/-\n=========================================\n  Coverage          ?   81.41%         \n=========================================\n  Files             ?       68         \n  Lines             ?     4246         \n  Branches          ?      728         \n=========================================\n  Hits              ?     3457         \n  Misses            ?      669         \n  Partials          ?      120\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions.js | 100% <\u00f8> (\u00f8) | |\n| src/functions/environment.js | 100% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fabae7c...6ad219d. Read the comment docs.\n. # Codecov Report\nMerging #1331 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1331      +/-\n==========================================\n- Coverage   81.41%   81.41%   -0.01%   \n==========================================\n  Files          68       69       +1   \n  Lines        4246     4245       -1   \n  Branches      728      728            \n==========================================\n- Hits         3457     3456       -1   \n  Misses        669      669            \n  Partials      120      120\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/buildHTML.js | 96.78% <\u00f8> (-0.04%) | :arrow_down: |\n| src/ParseNode.js | 88.88% <\u00f8> (\u00f8) | :arrow_up: |\n| src/buildMathML.js | 95.2% <\u00f8> (-0.14%) | :arrow_down: |\n| src/functions/raisebox.js | 100% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ea7003f...c8f6011. Read the comment docs.\n. # Codecov Report\nMerging #1332 into master will decrease coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1332      +/-\n==========================================\n- Coverage    81.4%   81.37%   -0.03%   \n==========================================\n  Files          70       71       +1   \n  Lines        4243     4237       -6   \n  Branches      728      727       -1   \n==========================================\n- Hits         3454     3448       -6   \n  Misses        669      669            \n  Partials      120      120\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildMathML.js | 97.35% <\u00f8> (-0.06%) | :arrow_down: |\n| src/functions.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/stretchy.js | 84.33% <\u00f8> (\u00f8) | :arrow_up: |\n| src/buildHTML.js | 96.63% <\u00f8> (-0.33%) | :arrow_down: |\n| src/functions/horizBrace.js | 100% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 28dfa91...0c6bc0f. Read the comment docs.\n. # Codecov Report\nMerging #1334 into master will increase coverage by <.01%.\nThe diff coverage is 97.61%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1334      +/-\n==========================================\n+ Coverage   81.37%   81.38%   +<.01%   \n==========================================\n  Files          71       73       +2   \n  Lines        4237     4227      -10   \n  Branches      727      728       +1   \n==========================================\n- Hits         3448     3440       -8   \n+ Misses        669      667       -2   \n  Partials      120      120\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/symbols.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/buildHTML.js | 97% <\u00f8> (+0.36%) | :arrow_up: |\n| src/functions.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/symbolsOp.js | 100% <100%> (\u00f8) | |\n| src/buildCommon.js | 89.78% <100%> (\u00f8) | :arrow_up: |\n| src/buildMathML.js | 98.16% <100%> (+0.81%) | :arrow_up: |\n| src/functions/symbolsOrd.js | 100% <100%> (\u00f8) | |\n| src/defineFunction.js | 92.85% <50%> (-7.15%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ff8ca60...22df43b. Read the comment docs.\n. # Codecov Report\nMerging #1335 into master will decrease coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1335      +/-\n==========================================\n- Coverage   81.38%   81.36%   -0.02%   \n==========================================\n  Files          73       74       +1   \n  Lines        4227     4223       -4   \n  Branches      728      728            \n==========================================\n- Hits         3440     3436       -4   \n  Misses        667      667            \n  Partials      120      120\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildMathML.js | 98.05% <\u00f8> (-0.11%) | :arrow_down: |\n| src/defineFunction.js | 92.85% <\u00f8> (\u00f8) | :arrow_up: |\n| src/buildHTML.js | 96.87% <\u00f8> (-0.13%) | :arrow_down: |\n| src/functions.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/symbolsSpacing.js | 100% <100%> (\u00f8) | |\n| src/domTree.js | 64.44% <100%> (-0.78%) | :arrow_down: |\n| src/buildCommon.js | 89.78% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 74e84e7...20ff97f. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@c994722). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1336   +/-\n=========================================\n  Coverage          ?   83.87%         \n=========================================\n  Files             ?       79         \n  Lines             ?     4539         \n  Branches          ?      797         \n=========================================\n  Hits              ?     3807         \n  Misses            ?      639         \n  Partials          ?       93\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c994722...c64ef13. Read the comment docs.\n. # Codecov Report\nMerging #1337 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1337   +/-\n=======================================\n  Coverage   81.23%   81.23%         \n=======================================\n  Files          77       77         \n  Lines        4227     4227         \n  Branches      731      731         \n=======================================\n  Hits         3434     3434         \n  Misses        673      673         \n  Partials      120      120\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5a9e4c1...fd9539d. Read the comment docs.\n. # Codecov Report\nMerging #1338 into master will decrease coverage by 0.02%.\nThe diff coverage is 95.83%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1338      +/-\n==========================================\n- Coverage   81.36%   81.33%   -0.03%   \n==========================================\n  Files          74       74            \n  Lines        4223     4212      -11   \n  Branches      728      727       -1   \n==========================================\n- Hits         3436     3426      -10   \n+ Misses        667      666       -1   \n  Partials      120      120\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/genfrac.js | 62.5% <0%> (+0.59%) | :arrow_up: |\n| src/buildMathML.js | 97.91% <100%> (-0.15%) | :arrow_down: |\n| src/functions/text.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/href.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/delimsizing.js | 66.27% <100%> (-0.39%) | :arrow_down: |\n| src/functions/mathchoice.js | 94.44% <100%> (-0.3%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ef9cd5c...4e762f8. Read the comment docs.\n. # Codecov Report\nMerging #1339 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1339   +/-\n=======================================\n  Coverage   81.33%   81.33%         \n=======================================\n  Files          74       76    +2   \n  Lines        4212     4212         \n  Branches      727      727         \n=======================================\n  Hits         3426     3426         \n  Misses        666      666         \n  Partials      120      120\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/defineFunction.js | 92.85% <\u00f8> (\u00f8) | :arrow_up: |\n| src/buildHTML.js | 96.85% <\u00f8> (-0.02%) | :arrow_down: |\n| src/functions.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/mathMLTree.js | 70.96% <\u00f8> (\u00f8) | :arrow_up: |\n| src/buildMathML.js | 97.77% <\u00f8> (-0.14%) | :arrow_down: |\n| src/functions/tag.js | 100% <100%> (\u00f8) | |\n| src/functions/ordgroup.js | 100% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 485c509...e40c3ac. Read the comment docs.\n. # Codecov Report\nMerging #1342 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1342   +/-\n=======================================\n  Coverage   81.33%   81.33%         \n=======================================\n  Files          76       76         \n  Lines        4212     4212         \n  Branches      727      727         \n=======================================\n  Hits         3426     3426         \n  Misses        666      666         \n  Partials      120      120\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4c34391...23616c3. Read the comment docs.\n. # Codecov Report\nMerging #1343 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1343   +/-\n=======================================\n  Coverage   81.33%   81.33%         \n=======================================\n  Files          76       76         \n  Lines        4212     4212         \n  Branches      727      727         \n=======================================\n  Hits         3426     3426         \n  Misses        666      666         \n  Partials      120      120\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 41ac245...abef075. Read the comment docs.\n. # Codecov Report\nMerging #1348 into master will increase coverage by 0.11%.\nThe diff coverage is 95.58%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1348      +/-\n==========================================\n+ Coverage   81.43%   81.55%   +0.11%   \n==========================================\n  Files          77       78       +1   \n  Lines        4218     4256      +38   \n  Branches      726      734       +8   \n==========================================\n+ Hits         3435     3471      +36   \n- Misses        668      670       +2   \n  Partials      115      115\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/Parser.js | 93.04% <100%> (+0.03%) | :arrow_up: |\n| src/parseTree.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/environments/array.js | 43.55% <100%> (\u00f8) | :arrow_up: |\n| src/macros.js | 86.73% <92.3%> (+0.17%) | :arrow_up: |\n| src/MacroExpander.js | 93% <94.73%> (+0.14%) | :arrow_up: |\n| src/Namespace.js | 95.65% <95.65%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3ec752f...d110678. Read the comment docs.\n. # Codecov Report\nMerging #1349 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1349      +/-\n==========================================\n+ Coverage   81.22%   81.24%   +0.01%   \n==========================================\n  Files          76       76            \n  Lines        4218     4222       +4   \n  Branches      727      727            \n==========================================\n+ Hits         3426     3430       +4   \n  Misses        672      672            \n  Partials      120      120\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/defineFunction.js | 92.85% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/horizBrace.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/ParseNode.js | 88.88% <100%> (\u00f8) | :arrow_up: |\n| src/functions/op.js | 94.18% <100%> (+0.13%) | :arrow_up: |\n| src/functions/accent.js | 90.47% <100%> (+0.15%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a5e6b92...04fd5a6. Read the comment docs.\n. # Codecov Report\nMerging #1359 into master will decrease coverage by 0.01%.\nThe diff coverage is 97.95%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1359      +/-\n==========================================\n- Coverage   81.24%   81.22%   -0.02%   \n==========================================\n  Files          76       77       +1   \n  Lines        4222     4224       +2   \n  Branches      727      731       +4   \n==========================================\n+ Hits         3430     3431       +1   \n- Misses        672      673       +1   \n  Partials      120      120\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/mathMLTree.js | 70.96% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/buildMathML.js | 98.3% <\u00f8> (+0.52%) | :arrow_up: |\n| src/buildCommon.js | 89.78% <\u00f8> (\u00f8) | :arrow_up: |\n| src/buildHTML.js | 95.41% <100%> (-1.44%) | :arrow_down: |\n| src/utils.js | 68.18% <100%> (-1.39%) | :arrow_down: |\n| src/functions/supsub.js | 97.89% <97.89%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1e629a0...6eb91b6. Read the comment docs.\n. # Codecov Report\nMerging #1361 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1361      +/-\n==========================================\n+ Coverage   81.22%   81.23%   +0.01%   \n==========================================\n  Files          77       77            \n  Lines        4224     4227       +3   \n  Branches      731      731            \n==========================================\n+ Hits         3431     3434       +3   \n  Misses        673      673            \n  Partials      120      120\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildMathML.js | 98.27% <100%> (-0.03%) | :arrow_down: |\n| src/defineFunction.js | 93.75% <100%> (+0.89%) | :arrow_up: |\n| src/buildHTML.js | 95.38% <100%> (-0.04%) | :arrow_down: |\n| src/defineEnvironment.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/sizing.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/raisebox.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d9fe716...698f3b9. Read the comment docs.\n. # Codecov Report\nMerging #1362 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1362   +/-\n=======================================\n  Coverage   81.22%   81.22%         \n=======================================\n  Files          77       77         \n  Lines        4224     4224         \n  Branches      731      731         \n=======================================\n  Hits         3431     3431         \n  Misses        673      673         \n  Partials      120      120\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9e2d5b1...1a3dd8e. Read the comment docs.\n. # Codecov Report\nMerging #1368 into master will increase coverage by 0.19%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1368      +/-\n==========================================\n+ Coverage   81.23%   81.43%   +0.19%   \n==========================================\n  Files          77       77            \n  Lines        4227     4217      -10   \n  Branches      731      726       -5   \n==========================================\n  Hits         3434     3434            \n+ Misses        673      668       -5   \n+ Partials      120      115       -5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| contrib/auto-render/auto-render.js | 0% <0%> (\u00f8) | :arrow_up: |\n| contrib/mathtex-script-type/mathtex-script-type.js | 0% <0%> (\u00f8) | :arrow_up: |\n| src/unicodeMake.js | 0% <0%> (\u00f8) | :arrow_up: |\n| contrib/copy-tex/katex2tex.js | 0% <0%> (\u00f8) | :arrow_up: |\n| contrib/copy-tex/copy-tex.js | 0% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 25e07a7...544a42c. Read the comment docs.\n. # Codecov Report\nMerging #1369 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1369   +/-\n=======================================\n  Coverage   81.23%   81.23%         \n=======================================\n  Files          77       77         \n  Lines        4227     4227         \n  Branches      731      731         \n=======================================\n  Hits         3434     3434         \n  Misses        673      673         \n  Partials      120      120\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 86.55% <\u00f8> (\u00f8) | :arrow_up: |\n| src/defineEnvironment.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/defineFunction.js | 93.75% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9cde033...11efd2e. Read the comment docs.\n. # Codecov Report\nMerging #1370 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1370   +/-\n=======================================\n  Coverage   81.23%   81.23%         \n=======================================\n  Files          77       77         \n  Lines        4227     4227         \n  Branches      731      731         \n=======================================\n  Hits         3434     3434         \n  Misses        673      673         \n  Partials      120      120\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/genfrac.js | 62.5% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e3fb2f9...bbc2569. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@2974639). Click here to learn what that means.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1371   +/-\n=========================================\n  Coverage          ?   81.23%         \n=========================================\n  Files             ?       77         \n  Lines             ?     4227         \n  Branches          ?      731         \n=========================================\n  Hits              ?     3434         \n  Misses            ?      673         \n  Partials          ?      120\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildCommon.js | 89.78% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2974639...16bdedd. Read the comment docs.\n. # Codecov Report\nMerging #1372 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1372   +/-\n=======================================\n  Coverage   81.23%   81.23%         \n=======================================\n  Files          77       77         \n  Lines        4227     4227         \n  Branches      731      731         \n=======================================\n  Hits         3434     3434         \n  Misses        673      673         \n  Partials      120      120\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 86.55% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d41b0b0...003ae35. Read the comment docs.\n. # Codecov Report\nMerging #1373 into master will increase coverage by <.01%.\nThe diff coverage is 87.5%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1373      +/-\n==========================================\n+ Coverage   81.43%   81.43%   +<.01%   \n==========================================\n  Files          77       77            \n  Lines        4217     4218       +1   \n  Branches      726      726            \n==========================================\n+ Hits         3434     3435       +1   \n  Misses        668      668            \n  Partials      115      115\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/rule.js | 95.23% <\u00f8> (\u00f8) | :arrow_up: |\n| src/parseTree.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/mclass.js | 91.3% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/cr.js | 95.65% <\u00f8> (\u00f8) | :arrow_up: |\n| src/ParseNode.js | 88.88% <\u00f8> (\u00f8) | :arrow_up: |\n| src/environments/array.js | 43.55% <0%> (\u00f8) | :arrow_up: |\n| src/functions/href.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/kern.js | 72.22% <100%> (+1.63%) | :arrow_up: |\n| src/functions/raisebox.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/Parser.js | 93.01% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 659b4e3...37d9e5d. Read the comment docs.\n. # Codecov Report\nMerging #1374 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1374   +/-\n=======================================\n  Coverage   82.34%   82.34%         \n=======================================\n  Files          77       77         \n  Lines        4242     4242         \n  Branches      731      731         \n=======================================\n  Hits         3493     3493         \n  Misses        647      647         \n  Partials      102      102\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3e0ad9f...a2b3be7. Read the comment docs.\n. # Codecov Report\nMerging #1375 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1375   +/-\n=======================================\n  Coverage   81.56%   81.56%         \n=======================================\n  Files          78       78         \n  Lines        4259     4259         \n  Branches      734      734         \n=======================================\n  Hits         3474     3474         \n  Misses        670      670         \n  Partials      115      115\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| contrib/auto-render/auto-render.js | 0% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 70a4733...63c119a. Read the comment docs.\n. # Codecov Report\nMerging #1376 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1376   +/-\n=======================================\n  Coverage   81.55%   81.55%         \n=======================================\n  Files          78       78         \n  Lines        4256     4256         \n  Branches      734      734         \n=======================================\n  Hits         3471     3471         \n  Misses        670      670         \n  Partials      115      115\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/Settings.js | 72.72% <\u00f8> (\u00f8) | :arrow_up: |\n| src/fontMetrics.js | 88.88% <\u00f8> (\u00f8) | :arrow_up: |\n| src/domTree.js | 64.44% <\u00f8> (\u00f8) | :arrow_up: |\n| src/Parser.js | 93.04% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/cr.js | 95.65% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update acccce8...783dcb8. Read the comment docs.\n. # Codecov Report\nMerging #1377 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1377      +/-\n==========================================\n+ Coverage   81.55%   81.56%   +0.01%   \n==========================================\n  Files          78       78            \n  Lines        4256     4259       +3   \n  Branches      734      734            \n==========================================\n+ Hits         3471     3474       +3   \n  Misses        670      670            \n  Partials      115      115\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/macros.js | 86.93% <100%> (+0.19%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e161499...6a76eae. Read the comment docs.\n. # Codecov Report\nMerging #1378 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1378   +/-\n=======================================\n  Coverage   82.29%   82.29%         \n=======================================\n  Files          77       77         \n  Lines        4242     4242         \n  Branches      732      732         \n=======================================\n  Hits         3491     3491         \n  Misses        649      649         \n  Partials      102      102\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 417383e...481b233. Read the comment docs.\n. # Codecov Report\nMerging #1379 into master will increase coverage by 0.1%.\nThe diff coverage is 88.09%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #1379     +/-\n========================================\n+ Coverage    82.3%   82.4%   +0.1%   \n========================================\n  Files          77      77           \n  Lines        4294    4319     +25   \n  Branches      745     753      +8   \n========================================\n+ Hits         3534    3559     +25   \n  Misses        655     655           \n  Partials      105     105\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildCommon.js | 87.91% <0%> (-1.88%) | :arrow_down: |\n| src/mathMLTree.js | 75.86% <100%> (+0.42%) | :arrow_up: |\n| src/functions/symbolsOrd.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/Parser.js | 94.4% <100%> (+1.33%) | :arrow_up: |\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/buildMathML.js | 98.63% <100%> (+0.35%) | :arrow_up: |\n| src/functions/text.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4f9851f...660c7c8. Read the comment docs.\n. # Codecov Report\nMerging #1381 into master will increase coverage by 0.08%.\nThe diff coverage is 90.9%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1381      +/-\n==========================================\n+ Coverage   82.23%   82.31%   +0.08%   \n==========================================\n  Files          77       77            \n  Lines        4255     4275      +20   \n  Branches      737      743       +6   \n==========================================\n+ Hits         3499     3519      +20   \n  Misses        652      652            \n  Partials      104      104\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 88.28% <\u00f8> (\u00f8) | :arrow_up: |\n| src/MacroExpander.js | 93.85% <100%> (+0.85%) | :arrow_up: |\n| src/environments/array.js | 45.02% <75%> (+1.46%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 563b0d5...895f6b9. Read the comment docs.\n. # Codecov Report\nMerging #1382 into master will increase coverage by 0.08%.\nThe diff coverage is 96.87%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1382      +/-\n==========================================\n+ Coverage   82.28%   82.37%   +0.08%   \n==========================================\n  Files          77       77            \n  Lines        4330     4362      +32   \n  Branches      752      760       +8   \n==========================================\n+ Hits         3563     3593      +30   \n- Misses        665      666       +1   \n- Partials      102      103       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/environments/array.js | 46.15% <100%> (+0.43%) | :arrow_up: |\n| src/Namespace.js | 95.83% <100%> (+0.18%) | :arrow_up: |\n| src/MacroExpander.js | 93.96% <100%> (+0.1%) | :arrow_up: |\n| src/macros.js | 89.2% <96.29%> (+0.85%) | :arrow_up: |\n| src/buildCommon.js | 87.5% <0%> (-0.42%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a5ef29f...237556b. Read the comment docs.\n. # Codecov Report\nMerging #1383 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1383   +/-\n=======================================\n  Coverage   82.29%   82.29%         \n=======================================\n  Files          77       77         \n  Lines        4242     4242         \n  Branches      732      732         \n=======================================\n  Hits         3491     3491         \n  Misses        649      649         \n  Partials      102      102\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/Settings.js | 72.72% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3796faa...2fd57c2. Read the comment docs.\n. # Codecov Report\nMerging #1385 into master will increase coverage by 0.04%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1385      +/-\n==========================================\n+ Coverage   82.29%   82.34%   +0.04%   \n==========================================\n  Files          77       77            \n  Lines        4242     4242            \n  Branches      731      731            \n==========================================\n+ Hits         3491     3493       +2   \n+ Misses        649      647       -2   \n  Partials      102      102\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildHTML.js | 96.92% <0%> (+1.53%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b738e3f...a7905fe. Read the comment docs.\n. # Codecov Report\nMerging #1386 into master will not change coverage.\nThe diff coverage is 90.9%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1386   +/-\n=======================================\n  Coverage   82.29%   82.29%         \n=======================================\n  Files          77       77         \n  Lines        4242     4242         \n  Branches      732      731    -1   \n=======================================\n  Hits         3491     3491         \n  Misses        649      649         \n  Partials      102      102\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/ParseNode.js | 88.88% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/delimsizing.js | 66.27% <90.9%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 788aa42...7f700f9. Read the comment docs.\n. # Codecov Report\nMerging #1387 into master will increase coverage by 0.07%.\nThe diff coverage is 80.32%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1387      +/-\n=========================================\n+ Coverage   82.22%   82.3%   +0.07%   \n=========================================\n  Files          77      77            \n  Lines        4282    4294      +12   \n  Branches      745     745            \n=========================================\n+ Hits         3521    3534      +13   \n+ Misses        656     655       -1   \n  Partials      105     105\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/ParseError.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/rule.js | 95.23% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/accent.js | 90.47% <\u00f8> (\u00f8) | :arrow_up: |\n| src/Settings.js | 72.72% <\u00f8> (\u00f8) | :arrow_up: |\n| src/buildTree.js | 94.11% <\u00f8> (\u00f8) | :arrow_up: |\n| src/defineEnvironment.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/stretchy.js | 84.33% <100%> (\u00f8) | :arrow_up: |\n| src/defineFunction.js | 93.75% <100%> (\u00f8) | :arrow_up: |\n| src/Parser.js | 93.06% <100%> (+0.03%) | :arrow_up: |\n| src/functions/smash.js | 87.17% <100%> (\u00f8) | :arrow_up: |\n| ... and 9 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4492eed...86a4d19. Read the comment docs.\n. # Codecov Report\nMerging #1388 into master will increase coverage by 0.19%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1388      +/-\n==========================================\n+ Coverage   82.34%   82.54%   +0.19%   \n==========================================\n  Files          77       77            \n  Lines        4384     4388       +4   \n  Branches      764      766       +2   \n==========================================\n+ Hits         3610     3622      +12   \n+ Misses        671      664       -7   \n+ Partials      103      102       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/mclass.js | 95% <100%> (+3.69%) | :arrow_up: |\n| src/functions/font.js | 96.55% <100%> (+1.09%) | :arrow_up: |\n| src/buildHTML.js | 97.79% <0%> (+0.73%) | :arrow_up: |\n| src/buildCommon.js | 90.53% <0%> (+2.46%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 954ddf4...838e289. Read the comment docs.\n. # Codecov Report\nMerging #1389 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1389   +/-\n=======================================\n  Coverage   82.34%   82.34%         \n=======================================\n  Files          77       77         \n  Lines        4242     4242         \n  Branches      731      731         \n=======================================\n  Hits         3493     3493         \n  Misses        647      647         \n  Partials      102      102\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9d40d66...a70075b. Read the comment docs.\n. # Codecov Report\nMerging #1391 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1391   +/-\n======================================\n  Coverage    82.3%   82.3%         \n======================================\n  Files          77      77         \n  Lines        4294    4294         \n  Branches      745     745         \n======================================\n  Hits         3534    3534         \n  Misses        655     655         \n  Partials      105     105\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 19d2aa6...a6bce48. Read the comment docs.\n. # Codecov Report\nMerging #1392 into master will decrease coverage by 0.08%.\nThe diff coverage is 37.5%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1392      +/-\n==========================================\n- Coverage   82.33%   82.25%   -0.09%   \n==========================================\n  Files          77       77            \n  Lines        4241     4248       +7   \n  Branches      731      735       +4   \n==========================================\n+ Hits         3492     3494       +2   \n- Misses        647      650       +3   \n- Partials      102      104       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/ParseNode.js | 88.88% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/genfrac.js | 60.36% <37.5%> (-2.14%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3d5826c...2a854f5. Read the comment docs.\n. # Codecov Report\nMerging #1393 into master will decrease coverage by 0.02%.\nThe diff coverage is 89.7%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1393      +/-\n==========================================\n- Coverage   82.34%   82.32%   -0.03%   \n==========================================\n  Files          77       77            \n  Lines        4242     4237       -5   \n  Branches      731      731            \n==========================================\n- Hits         3493     3488       -5   \n  Misses        647      647            \n  Partials      102      102\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/defineFunction.js | 93.75% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/underline.js | 8.33% <0%> (\u00f8) | :arrow_up: |\n| src/functions/math.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/sizing.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/Parser.js | 93.02% <100%> (-0.02%) | :arrow_down: |\n| src/functions/smash.js | 87.17% <100%> (\u00f8) | :arrow_up: |\n| src/functions/genfrac.js | 62.5% <100%> (\u00f8) | :arrow_up: |\n| src/functions/environment.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/arrow.js | 84.84% <100%> (\u00f8) | :arrow_up: |\n| src/functions/mclass.js | 91.3% <100%> (\u00f8) | :arrow_up: |\n| ... and 21 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3e0ad9f...06bfd32. Read the comment docs.\n. # Codecov Report\nMerging #1395 into master will decrease coverage by 0.08%.\nThe diff coverage is 28.57%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1395      +/-\n==========================================\n- Coverage   82.31%   82.22%   -0.09%   \n==========================================\n  Files          77       77            \n  Lines        4275     4282       +7   \n  Branches      743      745       +2   \n==========================================\n+ Hits         3519     3521       +2   \n- Misses        652      656       +4   \n- Partials      104      105       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/environments/array.js | 44.53% <28.57%> (-0.49%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fcb32f0...3387093. Read the comment docs.\n. # Codecov Report\nMerging #1397 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1397   +/-\n=======================================\n  Coverage   82.32%   82.32%         \n=======================================\n  Files          77       77         \n  Lines        4237     4237         \n  Branches      731      731         \n=======================================\n  Hits         3488     3488         \n  Misses        647      647         \n  Partials      102      102\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9d2722f...be17e38. Read the comment docs.\n. # Codecov Report\nMerging #1398 into master will decrease coverage by 0.01%.\nThe diff coverage is 88.88%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1398      +/-\n==========================================\n- Coverage   82.25%   82.23%   -0.02%   \n==========================================\n  Files          77       77            \n  Lines        4248     4255       +7   \n  Branches      735      737       +2   \n==========================================\n+ Hits         3494     3499       +5   \n- Misses        650      652       +2   \n  Partials      104      104\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/enclose.js | 90.47% <88.88%> (-2.39%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 08b0045...466197a. Read the comment docs.\n. # Codecov Report\nMerging #1400 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1400      +/-\n==========================================\n+ Coverage   82.33%   82.33%   +<.01%   \n==========================================\n  Files          77       77            \n  Lines        4239     4241       +2   \n  Branches      731      731            \n==========================================\n+ Hits         3490     3492       +2   \n  Misses        647      647            \n  Partials      102      102\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/symbols.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/macros.js | 88.28% <100%> (+0.26%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 97d6229...9b8abc7. Read the comment docs.\n. # Codecov Report\nMerging #1401 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1401   +/-\n=======================================\n  Coverage   82.32%   82.32%         \n=======================================\n  Files          77       77         \n  Lines        4237     4237         \n  Branches      731      731         \n=======================================\n  Hits         3488     3488         \n  Misses        647      647         \n  Partials      102      102\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 59a25fe...7f3b368. Read the comment docs.\n. # Codecov Report\nMerging #1402 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1402      +/-\n==========================================\n+ Coverage   82.32%   82.33%   +<.01%   \n==========================================\n  Files          77       77            \n  Lines        4237     4239       +2   \n  Branches      731      731            \n==========================================\n+ Hits         3488     3490       +2   \n  Misses        647      647            \n  Partials      102      102\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 88.01% <100%> (+0.11%) | :arrow_up: |\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 32fe81a...6081056. Read the comment docs.\n. # Codecov Report\nMerging #1404 into master will decrease coverage by 0.09%.\nThe diff coverage is 25%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1404     +/-\n=========================================\n- Coverage   82.22%   82.13%   -0.1%   \n=========================================\n  Files          77       77           \n  Lines        4282     4287      +5   \n  Branches      745      742      -3   \n=========================================\n  Hits         3521     3521           \n- Misses        656      664      +8   \n+ Partials      105      102      -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/svgGeometry.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/accent.js | 90.47% <\u00f8> (\u00f8) | :arrow_up: |\n| src/stretchy.js | 79.54% <25%> (-4.8%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4492eed...1ca283b. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@1e64519). Click here to learn what that means.\nThe diff coverage is 25%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #1406   +/-\n========================================\n  Coverage          ?   82.2%         \n========================================\n  Files             ?      77         \n  Lines             ?    4299         \n  Branches          ?     742         \n========================================\n  Hits              ?    3534         \n  Misses            ?     663         \n  Partials          ?     102\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/accent.js | 90.47% <\u00f8> (\u00f8) | |\n| src/svgGeometry.js | 100% <\u00f8> (\u00f8) | |\n| src/stretchy.js | 79.54% <25%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1e64519...50bb338. Read the comment docs.\n. # Codecov Report\nMerging #1407 into master will decrease coverage by 0.02%.\nThe diff coverage is 41.37%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1407      +/-\n==========================================\n- Coverage    82.3%   82.28%   -0.03%   \n==========================================\n  Files          77       77            \n  Lines        4324     4330       +6   \n  Branches      750      752       +2   \n==========================================\n+ Hits         3559     3563       +4   \n- Misses        663      665       +2   \n  Partials      102      102\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/environments/array.js | 45.71% <41.37%> (+0.52%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 89e180c...f4a2602. Read the comment docs.\n. # Codecov Report\nMerging #1408 into master will decrease coverage by 0.07%.\nThe diff coverage is 81.48%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1408      +/-\n==========================================\n- Coverage   82.37%   82.29%   -0.08%   \n==========================================\n  Files          77       77            \n  Lines        4362     4382      +20   \n  Branches      760      763       +3   \n==========================================\n+ Hits         3593     3606      +13   \n- Misses        666      673       +7   \n  Partials      103      103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/stretchy.js | 79.54% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/delimsizing.js | 65.16% <0%> (-1.5%) | :arrow_down: |\n| src/functions/accent.js | 90.47% <100%> (\u00f8) | :arrow_up: |\n| src/functions/supsub.js | 97.89% <100%> (\u00f8) | :arrow_up: |\n| src/domTree.js | 63.82% <50%> (-0.62%) | :arrow_down: |\n| src/utils.js | 68.75% <75%> (+0.56%) | :arrow_up: |\n| src/buildHTML.js | 97.05% <97.05%> (+0.13%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1dc2612...cf5ef49. Read the comment docs.\n. # Codecov Report\nMerging #1410 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1410   +/-\n=======================================\n  Coverage   82.28%   82.28%         \n=======================================\n  Files          77       77         \n  Lines        4330     4330         \n  Branches      752      752         \n=======================================\n  Hits         3563     3563         \n  Misses        665      665         \n  Partials      102      102\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/symbols.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/macros.js | 88.34% <100%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 93904c5...db0f4b2. Read the comment docs.\n. # Codecov Report\nMerging #1414 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1414   +/-\n=======================================\n  Coverage   82.37%   82.37%         \n=======================================\n  Files          77       77         \n  Lines        4362     4362         \n  Branches      760      760         \n=======================================\n  Hits         3593     3593         \n  Misses        666      666         \n  Partials      103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6556924...79cacab. Read the comment docs.\n. # Codecov Report\nMerging #1415 into master will increase coverage by 0.83%.\nThe diff coverage is 87.34%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1415      +/-\n==========================================\n+ Coverage   82.57%   83.41%   +0.83%   \n==========================================\n  Files          77       77            \n  Lines        4408     4486      +78   \n  Branches      772      782      +10   \n==========================================\n+ Hits         3640     3742     +102   \n+ Misses        665      644      -21   \n+ Partials      103      100       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/ParseNode.js | 88.88% <\u00f8> (\u00f8) | :arrow_up: |\n| src/Parser.js | 94.24% <75%> (-0.16%) | :arrow_down: |\n| src/functions/genfrac.js | 89.01% <88%> (+28.65%) | :arrow_up: |\n| src/units.js | 86.36% <0%> (+4.54%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 12dcb05...09c11e3. Read the comment docs.\n. # Codecov Report\nMerging #1416 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1416   +/-\n=======================================\n  Coverage   82.37%   82.37%         \n=======================================\n  Files          77       77         \n  Lines        4362     4362         \n  Branches      760      760         \n=======================================\n  Hits         3593     3593         \n  Misses        666      666         \n  Partials      103      103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/delimsizing.js | 66.66% <\u00f8> (\u00f8) | :arrow_up: |\n| src/delimiter.js | 69.96% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f929f0a...ac25f2f. Read the comment docs.\n. # Codecov Report\nMerging #1417 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1417   +/-\n=======================================\n  Coverage   82.37%   82.37%         \n=======================================\n  Files          77       77         \n  Lines        4362     4362         \n  Branches      760      760         \n=======================================\n  Hits         3593     3593         \n  Misses        666      666         \n  Partials      103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 690285a...c79d1f6. Read the comment docs.\n. # Codecov Report\nMerging #1418 into master will increase coverage by 0.22%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1418      +/-\n==========================================\n+ Coverage   83.89%   84.11%   +0.22%   \n==========================================\n  Files          79       79            \n  Lines        4563     4564       +1   \n  Branches      805      805            \n==========================================\n+ Hits         3828     3839      +11   \n+ Misses        639      630       -9   \n+ Partials       96       95       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 90.45% <100%> (+0.03%) | :arrow_up: |\n| src/functions/lap.js | 61.9% <0%> (+47.61%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 74fb394...1e343b7. Read the comment docs.\n. # Codecov Report\nMerging #1420 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1420   +/-\n=======================================\n  Coverage   82.34%   82.34%         \n=======================================\n  Files          77       77         \n  Lines        4384     4384         \n  Branches      764      764         \n=======================================\n  Hits         3610     3610         \n  Misses        671      671         \n  Partials      103      103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 89.11% <\u00f8> (-0.09%) | :arrow_down: |\n| src/functions/delimsizing.js | 65.16% <\u00f8> (\u00f8) | :arrow_up: |\n| src/delimiter.js | 69.96% <100%> (\u00f8) | :arrow_up: |\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8b1e1b4...8769e97. Read the comment docs.\n. # Codecov Report\nMerging #1423 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1423   +/-\n======================================\n  Coverage    82.5%   82.5%         \n======================================\n  Files          77      77         \n  Lines        4390    4390         \n  Branches      767     767         \n======================================\n  Hits         3622    3622         \n  Misses        665     665         \n  Partials      103     103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ffe90a3...8bb6ed3. Read the comment docs.\n. # Codecov Report\nMerging #1425 into master will decrease coverage by 0.03%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1425      +/-\n=========================================\n- Coverage   82.54%   82.5%   -0.04%   \n=========================================\n  Files          77      77            \n  Lines        4388    4390       +2   \n  Branches      766     767       +1   \n=========================================\n  Hits         3622    3622            \n- Misses        664     665       +1   \n- Partials      102     103       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| contrib/auto-render/auto-render.js | 0% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4a29031...c464123. Read the comment docs.\n. # Codecov Report\nMerging #1427 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1427   +/-\n=======================================\n  Coverage   82.54%   82.54%         \n=======================================\n  Files          77       77         \n  Lines        4388     4388         \n  Branches      766      766         \n=======================================\n  Hits         3622     3622         \n  Misses        664      664         \n  Partials      102      102\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4a29031...bd20794. Read the comment docs.\n. # Codecov Report\nMerging #1430 into master will increase coverage by 0.07%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1430      +/-\n==========================================\n+ Coverage    82.5%   82.57%   +0.07%   \n==========================================\n  Files          77       77            \n  Lines        4390     4408      +18   \n  Branches      767      772       +5   \n==========================================\n+ Hits         3622     3640      +18   \n  Misses        665      665            \n  Partials      103      103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/svgGeometry.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/buildCommon.js | 90.53% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/supsub.js | 98% <100%> (+0.1%) | :arrow_up: |\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/op.js | 94.84% <100%> (+0.65%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3f1b13e...b55cbbb. Read the comment docs.\n. # Codecov Report\nMerging #1434 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1434   +/-\n======================================\n  Coverage    82.5%   82.5%         \n======================================\n  Files          77      77         \n  Lines        4390    4390         \n  Branches      767     767         \n======================================\n  Hits         3622    3622         \n  Misses        665     665         \n  Partials      103     103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a7682e6...916aa86. Read the comment docs.\n. # Codecov Report\nMerging #1435 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1435   +/-\n======================================\n  Coverage    82.5%   82.5%         \n======================================\n  Files          77      77         \n  Lines        4390    4390         \n  Branches      767     767         \n======================================\n  Hits         3622    3622         \n  Misses        665     665         \n  Partials      103     103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a7682e6...1652f4d. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@cda184b). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1436   +/-\n=========================================\n  Coverage          ?   93.67%         \n=========================================\n  Files             ?       80         \n  Lines             ?     4666         \n  Branches          ?      813         \n=========================================\n  Hits              ?     4371         \n  Misses            ?      261         \n  Partials          ?       34\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.62% <\u00f8> (?) | |\n| #test | 85.04% <\u00f8> (?) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cda184b...de812e1. Read the comment docs.\n. # Codecov Report\nMerging #1437 into master will decrease coverage by 0.37%.\nThe diff coverage is 44.11%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1437      +/-\n=========================================\n- Coverage   82.57%   82.2%   -0.38%   \n=========================================\n  Files          77      78       +1   \n  Lines        4408    4406       -2   \n  Branches      772     771       -1   \n=========================================\n- Hits         3640    3622      -18   \n- Misses        665     676      +11   \n- Partials      103     108       +5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildHTML.js | 97.79% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/ParseNode.js | 88.88% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/href.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/Parser.js | 94.9% <100%> (+0.5%) | :arrow_up: |\n| src/functions/html.js | 5% <5%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6195f2f...6ce0fde. Read the comment docs.\n. # Codecov Report\nMerging #1440 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1440      +/-\n==========================================\n+ Coverage    83.2%   83.22%   +0.01%   \n==========================================\n  Files          77       77            \n  Lines        4417     4422       +5   \n  Branches      772      773       +1   \n==========================================\n+ Hits         3675     3680       +5   \n  Misses        642      642            \n  Partials      100      100\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/Settings.js | 73.52% <100%> (+0.8%) | :arrow_up: |\n| src/Parser.js | 94.45% <100%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8621f5b...6e2dd7b. Read the comment docs.\n. # Codecov Report\nMerging #1443 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1443   +/-\n=======================================\n  Coverage   82.57%   82.57%         \n=======================================\n  Files          77       77         \n  Lines        4408     4408         \n  Branches      772      772         \n=======================================\n  Hits         3640     3640         \n  Misses        665      665         \n  Partials      103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3e932b1...6c03431. Read the comment docs.\n. # Codecov Report\nMerging #1446 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1446   +/-\n=======================================\n  Coverage   82.57%   82.57%         \n=======================================\n  Files          77       77         \n  Lines        4408     4408         \n  Branches      772      772         \n=======================================\n  Hits         3640     3640         \n  Misses        665      665         \n  Partials      103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6195f2f...7437532. Read the comment docs.\n. # Codecov Report\nMerging #1447 into master will decrease coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1447      +/-\n==========================================\n- Coverage   82.57%   82.56%   -0.02%   \n==========================================\n  Files          77       77            \n  Lines        4408     4405       -3   \n  Branches      772      772            \n==========================================\n- Hits         3640     3637       -3   \n  Misses        665      665            \n  Partials      103      103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/Token.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/Lexer.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 12dcb05...2212c41. Read the comment docs.\n. # Codecov Report\nMerging #1448 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1448   +/-\n=======================================\n  Coverage   82.57%   82.57%         \n=======================================\n  Files          77       77         \n  Lines        4408     4408         \n  Branches      772      772         \n=======================================\n  Hits         3640     3640         \n  Misses        665      665         \n  Partials      103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3e932b1...6d881c9. Read the comment docs.\n. # Codecov Report\nMerging #1449 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1449   +/-\n=======================================\n  Coverage   82.57%   82.57%         \n=======================================\n  Files          77       77         \n  Lines        4408     4408         \n  Branches      772      772         \n=======================================\n  Hits         3640     3640         \n  Misses        665      665         \n  Partials      103      103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/phantom.js | 72.72% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f7880ac...e90f883. Read the comment docs.\n. # Codecov Report\nMerging #1451 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1451   +/-\n=======================================\n  Coverage   82.57%   82.57%         \n=======================================\n  Files          77       77         \n  Lines        4408     4408         \n  Branches      772      772         \n=======================================\n  Hits         3640     3640         \n  Misses        665      665         \n  Partials      103      103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/stretchy.js | 79.54% <\u00f8> (\u00f8) | :arrow_up: |\n| src/svgGeometry.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 062f8fb...ec2055f. Read the comment docs.\n. # Codecov Report\nMerging #1453 into master will increase coverage by 0.63%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1453      +/-\n=========================================\n+ Coverage   82.56%   83.2%   +0.63%   \n=========================================\n  Files          77      77            \n  Lines        4405    4417      +12   \n  Branches      772     772            \n=========================================\n+ Hits         3637    3675      +38   \n+ Misses        665     642      -23   \n+ Partials      103     100       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/genfrac.js | 85.36% <100%> (+25%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 518379a...dd83c3e. Read the comment docs.\n. # Codecov Report\nMerging #1454 into master will increase coverage by 0.19%.\nThe diff coverage is 98.38%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1454      +/-\n==========================================\n+ Coverage   83.37%   83.56%   +0.19%   \n==========================================\n  Files          77       79       +2   \n  Lines        4488     4534      +46   \n  Branches      786      795       +9   \n==========================================\n+ Hits         3742     3789      +47   \n+ Misses        649      648       -1   \n  Partials       97       97\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/ParseNode.js | 88.88% <\u00f8> (\u00f8) | :arrow_up: |\n| src/Parser.js | 93.76% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/htmlmathml.js | 100% <100%> (\u00f8) | |\n| src/macros.js | 90.42% <100%> (+1.13%) | :arrow_up: |\n| src/functions/mclass.js | 95% <100%> (\u00f8) | :arrow_up: |\n| src/functions/char.js | 90.9% <90.9%> (\u00f8) | |\n| src/functions/sizing.js | 79.16% <0%> (-20.84%) | :arrow_down: |\n| ... and 2 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 33ef4bd...f81e54c. Read the comment docs.\n. # Codecov Report\nMerging #1455 into master will increase coverage by <.01%.\nThe diff coverage is 80.24%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1455      +/-\n==========================================\n+ Coverage   83.22%   83.22%   +<.01%   \n==========================================\n  Files          77       77            \n  Lines        4422     4424       +2   \n  Branches      773      773            \n==========================================\n+ Hits         3680     3682       +2   \n  Misses        642      642            \n  Partials      100      100\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/genfrac.js | 85.6% <80.24%> (+0.23%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a8015d0...4dee1ae. Read the comment docs.\n. # Codecov Report\nMerging #1457 into master will increase coverage by 0.09%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1457      +/-\n==========================================\n+ Coverage   83.22%   83.32%   +0.09%   \n==========================================\n  Files          77       77            \n  Lines        4424     4443      +19   \n  Branches      773      778       +5   \n==========================================\n+ Hits         3682     3702      +20   \n+ Misses        642      641       -1   \n  Partials      100      100\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/ParseNode.js | 88.88% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/delimsizing.js | 65.16% <\u00f8> (\u00f8) | :arrow_up: |\n| src/Parser.js | 94.76% <100%> (+0.3%) | :arrow_up: |\n| src/functions/genfrac.js | 87.23% <100%> (+1.63%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c599c61...080e6d1. Read the comment docs.\n. # Codecov Report\nMerging #1458 into master will increase coverage by 0.09%.\nThe diff coverage is 69.84%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1458      +/-\n==========================================\n+ Coverage   83.24%   83.33%   +0.09%   \n==========================================\n  Files          77       77            \n  Lines        4428     4489      +61   \n  Branches      773      786      +13   \n==========================================\n+ Hits         3686     3741      +55   \n- Misses        642      651       +9   \n+ Partials      100       97       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/ParseNode.js | 88.88% <\u00f8> (\u00f8) | :arrow_up: |\n| src/Parser.js | 93.76% <57.14%> (-0.7%) | :arrow_down: |\n| src/functions/genfrac.js | 87.77% <71.42%> (+2.17%) | :arrow_up: |\n| src/units.js | 86.36% <0%> (+4.54%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0fb71c8...1dcd43c. Read the comment docs.\n. # Codecov Report\nMerging #1459 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1459      +/-\n==========================================\n+ Coverage   83.22%   83.24%   +0.01%   \n==========================================\n  Files          77       77            \n  Lines        4424     4428       +4   \n  Branches      773      773            \n==========================================\n+ Hits         3682     3686       +4   \n  Misses        642      642            \n  Partials      100      100\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 89.28% <100%> (+0.17%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c599c61...b251cf3. Read the comment docs.\n. # Codecov Report\nMerging #1461 into master will increase coverage by 0.35%.\nThe diff coverage is 86.95%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1461      +/-\n==========================================\n+ Coverage   83.51%   83.87%   +0.35%   \n==========================================\n  Files          79       79            \n  Lines        4537     4539       +2   \n  Branches      794      797       +3   \n==========================================\n+ Hits         3789     3807      +18   \n+ Misses        651      639      -12   \n+ Partials       97       93       -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/operatorname.js | 91.42% <86.95%> (+49%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f0976ad...cd108f9. Read the comment docs.\n. # Codecov Report\nMerging #1464 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1464   +/-\n=======================================\n  Coverage   83.89%   83.89%         \n=======================================\n  Files          79       79         \n  Lines        4563     4563         \n  Branches      805      805         \n=======================================\n  Hits         3828     3828         \n  Misses        639      639         \n  Partials       96       96\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 71035c7...44b8885. Read the comment docs.\n. # Codecov Report\nMerging #1465 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1465   +/-\n=======================================\n  Coverage   83.24%   83.24%         \n=======================================\n  Files          77       77         \n  Lines        4428     4428         \n  Branches      773      773         \n=======================================\n  Hits         3686     3686         \n  Misses        642      642         \n  Partials      100      100\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f3c167c...5498225. Read the comment docs.\n. # Codecov Report\nMerging #1467 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1467   +/-\n=======================================\n  Coverage   83.24%   83.24%         \n=======================================\n  Files          77       77         \n  Lines        4428     4428         \n  Branches      773      773         \n=======================================\n  Hits         3686     3686         \n  Misses        642      642         \n  Partials      100      100\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 00c91cd...ddead66. Read the comment docs.\n. # Codecov Report\nMerging #1469 into master will increase coverage by <.01%.\nThe diff coverage is 79.26%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1469      +/-\n==========================================\n+ Coverage   83.88%   83.89%   +<.01%   \n==========================================\n  Files          79       79            \n  Lines        4549     4563      +14   \n  Branches      800      805       +5   \n==========================================\n+ Hits         3816     3828      +12   \n- Misses        638      639       +1   \n- Partials       95       96       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/mathMLTree.js | 76.27% <0%> (\u00f8) | :arrow_up: |\n| src/functions/accent.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/Namespace.js | 96% <100%> (+0.16%) | :arrow_up: |\n| src/functions/operatorname.js | 92.1% <100%> (+0.43%) | :arrow_up: |\n| src/functions/font.js | 95.83% <100%> (-0.17%) | :arrow_down: |\n| src/buildCommon.js | 91.09% <100%> (+0.14%) | :arrow_up: |\n| src/SourceLocation.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/unicodeScripts.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/domTree.js | 64.97% <73.21%> (+0.05%) | :arrow_up: |\n| src/unicodeMake.js | 0% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8eed4e2...49b6e2b. Read the comment docs.\n. # Codecov Report\nMerging #1470 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1470   +/-\n=======================================\n  Coverage   83.37%   83.37%         \n=======================================\n  Files          77       77         \n  Lines        4488     4488         \n  Branches      786      786         \n=======================================\n  Hits         3742     3742         \n  Misses        649      649         \n  Partials       97       97\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/defineFunction.js | 93.75% <\u00f8> (\u00f8) | :arrow_up: |\n| src/buildTree.js | 94.11% <\u00f8> (\u00f8) | :arrow_up: |\n| src/buildHTML.js | 97.77% <\u00f8> (-0.02%) | :arrow_down: |\n| src/functions/accent.js | 90.62% <100%> (+0.14%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 35aece7...1990061. Read the comment docs.\n. # Codecov Report\nMerging #1471 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1471      +/-\n==========================================\n+ Coverage   83.33%   83.37%   +0.04%   \n==========================================\n  Files          77       77            \n  Lines        4489     4488       -1   \n  Branches      786      786            \n==========================================\n+ Hits         3741     3742       +1   \n+ Misses        651      649       -2   \n  Partials       97       97\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/domTree.js | 64.7% <100%> (+0.87%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update db585fa...6534f55. Read the comment docs.\n. # Codecov Report\nMerging #1474 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1474   +/-\n=======================================\n  Coverage   83.37%   83.37%         \n=======================================\n  Files          77       77         \n  Lines        4488     4488         \n  Branches      786      786         \n=======================================\n  Hits         3742     3742         \n  Misses        649      649         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 747a985...36a7574. Read the comment docs.\n. # Codecov Report\nMerging #1475 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1475   +/-\n=======================================\n  Coverage   83.54%   83.54%         \n=======================================\n  Files          78       78         \n  Lines        4534     4534         \n  Branches      795      795         \n=======================================\n  Hits         3788     3788         \n  Misses        649      649         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9783ac1...209e554. Read the comment docs.\n. # Codecov Report\nMerging #1477 into master will decrease coverage by 0.02%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1477      +/-\n==========================================\n- Coverage   83.56%   83.54%   -0.03%   \n==========================================\n  Files          79       78       -1   \n  Lines        4534     4534            \n  Branches      795      795            \n==========================================\n- Hits         3789     3788       -1   \n- Misses        648      649       +1   \n  Partials       97       97\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/unicodeMake.js | 0% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b727704...d21ec26. Read the comment docs.\n. # Codecov Report\nMerging #1478 into master will decrease coverage by 0.03%.\nThe diff coverage is 70.37%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1478      +/-\n==========================================\n- Coverage   83.54%   83.51%   -0.04%   \n==========================================\n  Files          78       79       +1   \n  Lines        4534     4537       +3   \n  Branches      795      794       -1   \n==========================================\n+ Hits         3788     3789       +1   \n- Misses        649      651       +2   \n  Partials       97       97\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/domTree.js | 64.91% <\u00f8> (+0.2%) | :arrow_up: |\n| src/defineFunction.js | 93.75% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/sqrt.js | 74.28% <100%> (\u00f8) | :arrow_up: |\n| src/mathMLTree.js | 76.27% <100%> (+0.4%) | :arrow_up: |\n| src/functions/op.js | 94.84% <100%> (\u00f8) | :arrow_up: |\n| src/functions/symbolsOrd.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/buildHTML.js | 97.77% <100%> (\u00f8) | :arrow_up: |\n| src/functions/mclass.js | 95% <100%> (\u00f8) | :arrow_up: |\n| src/buildCommon.js | 90.94% <100%> (\u00f8) | :arrow_up: |\n| src/functions/operatorname.js | 42.42% <100%> (\u00f8) | :arrow_up: |\n| ... and 2 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 48e9058...c48bc7d. Read the comment docs.\n. # Codecov Report\nMerging #1479 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1479   +/-\n=======================================\n  Coverage   84.42%   84.42%         \n=======================================\n  Files          79       79         \n  Lines        4623     4623         \n  Branches      812      812         \n=======================================\n  Hits         3903     3903         \n  Misses        618      618         \n  Partials      102      102\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/Lexer.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/Settings.js | 73.52% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/arrow.js | 84.84% <\u00f8> (\u00f8) | :arrow_up: |\n| src/Parser.js | 93.94% <\u00f8> (\u00f8) | :arrow_up: |\n| src/environments.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 295d933...aa46813. Read the comment docs.\n. # Codecov Report\nMerging #1484 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1484   +/-\n======================================\n  Coverage    84.1%   84.1%         \n======================================\n  Files          79      79         \n  Lines        4561    4561         \n  Branches      804     804         \n======================================\n  Hits         3836    3836         \n  Misses        630     630         \n  Partials       95      95\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 83e8eac...0a03484. Read the comment docs.\n. # Codecov Report\nMerging #1485 into master will increase coverage by 0.14%.\nThe diff coverage is 57.14%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1485      +/-\n==========================================\n+ Coverage   84.39%   84.53%   +0.14%   \n==========================================\n  Files          79       79            \n  Lines        4607     4617      +10   \n  Branches      803      806       +3   \n==========================================\n+ Hits         3888     3903      +15   \n+ Misses        624      618       -6   \n- Partials       95       96       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/sqrt.js | 93.93% <\u00f8> (+18.18%) | :arrow_up: |\n| src/Options.js | 91.66% <42.85%> (-6.45%) | :arrow_down: |\n| src/delimiter.js | 69.54% <64.28%> (-0.42%) | :arrow_down: |\n| src/functions/sizing.js | 100% <0%> (+20.83%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 50c0240...e08e457. Read the comment docs.\n. # Codecov Report\nMerging #1486 into master will decrease coverage by <.01%.\nThe diff coverage is 89.74%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1486      +/-\n==========================================\n- Coverage   83.89%   83.89%   -0.01%   \n==========================================\n  Files          79       79            \n  Lines        4539     4550      +11   \n  Branches      795      800       +5   \n==========================================\n+ Hits         3808     3817       +9   \n  Misses        638      638            \n- Partials       93       95       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/symbolsOrd.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/href.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/buildCommon.js | 90.94% <100%> (\u00f8) | :arrow_up: |\n| src/buildMathML.js | 98.73% <100%> (+0.1%) | :arrow_up: |\n| src/functions/sqrt.js | 75.75% <100%> (+1.47%) | :arrow_up: |\n| src/functions/symbolsOp.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/supsub.js | 98% <100%> (\u00f8) | :arrow_up: |\n| src/utils.js | 66.66% <50%> (-2.09%) | :arrow_down: |\n| src/functions/operatorname.js | 91.66% <80%> (+0.23%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5788777...5274860. Read the comment docs.\n. # Codecov Report\nMerging #1487 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1487      +/-\n==========================================\n+ Coverage   83.87%   83.89%   +0.02%   \n==========================================\n  Files          79       79            \n  Lines        4539     4539            \n  Branches      797      795       -2   \n==========================================\n+ Hits         3807     3808       +1   \n+ Misses        639      638       -1   \n  Partials       93       93\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/font.js | 96% <\u00f8> (-0.56%) | :arrow_down: |\n| src/functions/mclass.js | 100% <100%> (+5%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8f5239c...ec95d6d. Read the comment docs.\n. # Codecov Report\nMerging #1493 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1493   +/-\n=======================================\n  Coverage   83.89%   83.89%         \n=======================================\n  Files          79       79         \n  Lines        4550     4550         \n  Branches      800      800         \n=======================================\n  Hits         3817     3817         \n  Misses        638      638         \n  Partials       95       95\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7150c25...f94fd16. Read the comment docs.\n. # Codecov Report\nMerging #1494 into master will increase coverage by <.01%.\nThe diff coverage is 79.26%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1494      +/-\n==========================================\n+ Coverage   83.88%   83.89%   +<.01%   \n==========================================\n  Files          79       79            \n  Lines        4549     4563      +14   \n  Branches      800      805       +5   \n==========================================\n+ Hits         3816     3828      +12   \n- Misses        638      639       +1   \n- Partials       95       96       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/mathMLTree.js | 76.27% <0%> (\u00f8) | :arrow_up: |\n| src/SourceLocation.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/buildCommon.js | 91.09% <100%> (+0.14%) | :arrow_up: |\n| src/unicodeScripts.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/accent.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/font.js | 95.83% <100%> (-0.17%) | :arrow_down: |\n| src/functions/operatorname.js | 92.1% <100%> (+0.43%) | :arrow_up: |\n| src/Namespace.js | 96% <100%> (+0.16%) | :arrow_up: |\n| src/domTree.js | 64.97% <73.21%> (+0.05%) | :arrow_up: |\n| src/unicodeMake.js | 0% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8eed4e2...dd34b63. Read the comment docs.\n. # Codecov Report\nMerging #1496 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1496   +/-\n======================================\n  Coverage    84.1%   84.1%         \n======================================\n  Files          79      79         \n  Lines        4561    4561         \n  Branches      804     804         \n======================================\n  Hits         3836    3836         \n  Misses        630     630         \n  Partials       95      95\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cbd3afd...8042644. Read the comment docs.\n. # Codecov Report\nMerging #1497 into master will decrease coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1497      +/-\n=========================================\n- Coverage   84.11%   84.1%   -0.02%   \n=========================================\n  Files          79      79            \n  Lines        4564    4561       -3   \n  Branches      805     804       -1   \n=========================================\n- Hits         3839    3836       -3   \n  Misses        630     630            \n  Partials       95      95\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildHTML.js | 97.69% <\u00f8> (-0.07%) | :arrow_down: |\n| src/macros.js | 90.49% <100%> (+0.03%) | :arrow_up: |\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 237986a...7fdcacd. Read the comment docs.\n. # Codecov Report\nMerging #1499 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1499   +/-\n=======================================\n  Coverage   83.89%   83.89%         \n=======================================\n  Files          79       79         \n  Lines        4563     4563         \n  Branches      805      805         \n=======================================\n  Hits         3828     3828         \n  Misses        639      639         \n  Partials       96       96\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 78870ab...76f7f34. Read the comment docs.\n. # Codecov Report\nMerging #1500 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1500   +/-\n=======================================\n  Coverage   84.11%   84.11%         \n=======================================\n  Files          79       79         \n  Lines        4564     4564         \n  Branches      805      805         \n=======================================\n  Hits         3839     3839         \n  Misses        630      630         \n  Partials       95       95\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b43ed4b...e002a05. Read the comment docs.\n. # Codecov Report\nMerging #1502 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1502   +/-\n======================================\n  Coverage    84.1%   84.1%         \n======================================\n  Files          79      79         \n  Lines        4561    4561         \n  Branches      804     804         \n======================================\n  Hits         3836    3836         \n  Misses        630     630         \n  Partials       95      95\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9fe5e22...9d27140. Read the comment docs.\n. # Codecov Report\nMerging #1511 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1511   +/-\n======================================\n  Coverage    84.1%   84.1%         \n======================================\n  Files          79      79         \n  Lines        4561    4561         \n  Branches      804     804         \n======================================\n  Hits         3836    3836         \n  Misses        630     630         \n  Partials       95      95\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8a38035...62dc55e. Read the comment docs.\n. # Codecov Report\nMerging #1514 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1514   +/-\n======================================\n  Coverage    84.1%   84.1%         \n======================================\n  Files          79      79         \n  Lines        4561    4561         \n  Branches      804     804         \n======================================\n  Hits         3836    3836         \n  Misses        630     630         \n  Partials       95      95\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update edede08...ae82cdd. Read the comment docs.\n. # Codecov Report\nMerging #1515 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1515   +/-\n======================================\n  Coverage    84.1%   84.1%         \n======================================\n  Files          79      79         \n  Lines        4561    4561         \n  Branches      804     804         \n======================================\n  Hits         3836    3836         \n  Misses        630     630         \n  Partials       95      95\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3cce293...164d6ac. Read the comment docs.\n. # Codecov Report\nMerging #1516 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1516   +/-\n======================================\n  Coverage    84.1%   84.1%         \n======================================\n  Files          79      79         \n  Lines        4561    4561         \n  Branches      804     804         \n======================================\n  Hits         3836    3836         \n  Misses        630     630         \n  Partials       95      95\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e97a23e...4dc8072. Read the comment docs.\n. # Codecov Report\nMerging #1517 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1517   +/-\n======================================\n  Coverage    84.1%   84.1%         \n======================================\n  Files          79      79         \n  Lines        4561    4561         \n  Branches      804     804         \n======================================\n  Hits         3836    3836         \n  Misses        630     630         \n  Partials       95      95\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update db2aecc...17d2b13. Read the comment docs.\n. # Codecov Report\nMerging #1518 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1518   +/-\n======================================\n  Coverage    84.1%   84.1%         \n======================================\n  Files          79      79         \n  Lines        4561    4561         \n  Branches      804     804         \n======================================\n  Hits         3836    3836         \n  Misses        630     630         \n  Partials       95      95\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c1b6668...b071bf4. Read the comment docs.\n. # Codecov Report\nMerging #1519 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1519   +/-\n======================================\n  Coverage    84.1%   84.1%         \n======================================\n  Files          79      79         \n  Lines        4561    4561         \n  Branches      804     804         \n======================================\n  Hits         3836    3836         \n  Misses        630     630         \n  Partials       95      95\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4114288...d17628a. Read the comment docs.\n. # Codecov Report\nMerging #1520 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1520   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bd0ac91...dcf975f. Read the comment docs.\n. # Codecov Report\nMerging #1521 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1521   +/-\n=======================================\n  Coverage   84.53%   84.53%         \n=======================================\n  Files          79       79         \n  Lines        4617     4617         \n  Branches      806      806         \n=======================================\n  Hits         3903     3903         \n  Misses        618      618         \n  Partials       96       96\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 98dd7fc...c878494. Read the comment docs.\n. # Codecov Report\nMerging #1522 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1522   +/-\n======================================\n  Coverage    84.1%   84.1%         \n======================================\n  Files          79      79         \n  Lines        4561    4561         \n  Branches      804     804         \n======================================\n  Hits         3836    3836         \n  Misses        630     630         \n  Partials       95      95\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 702b3c8...b9a0a80. Read the comment docs.\n. # Codecov Report\nMerging #1523 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1523   +/-\n======================================\n  Coverage    84.1%   84.1%         \n======================================\n  Files          79      79         \n  Lines        4561    4561         \n  Branches      804     804         \n======================================\n  Hits         3836    3836         \n  Misses        630     630         \n  Partials       95      95\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 20c9440...3dde981. Read the comment docs.\n. # Codecov Report\nMerging #1524 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1524   +/-\n======================================\n  Coverage    84.1%   84.1%         \n======================================\n  Files          79      79         \n  Lines        4561    4561         \n  Branches      804     804         \n======================================\n  Hits         3836    3836         \n  Misses        630     630         \n  Partials       95      95\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2136c96...3ec4b78. Read the comment docs.\n. # Codecov Report\nMerging #1526 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1526   +/-\n======================================\n  Coverage    84.1%   84.1%         \n======================================\n  Files          79      79         \n  Lines        4561    4561         \n  Branches      804     804         \n======================================\n  Hits         3836    3836         \n  Misses        630     630         \n  Partials       95      95\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cd80db5...fc27c4f. Read the comment docs.\n. # Codecov Report\nMerging #1527 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1527   +/-\n======================================\n  Coverage    84.1%   84.1%         \n======================================\n  Files          79      79         \n  Lines        4561    4561         \n  Branches      804     804         \n======================================\n  Hits         3836    3836         \n  Misses        630     630         \n  Partials       95      95\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a76c4b9...b65ad19. Read the comment docs.\n. # Codecov Report\nMerging #1528 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1528   +/-\n======================================\n  Coverage    84.1%   84.1%         \n======================================\n  Files          79      79         \n  Lines        4561    4561         \n  Branches      804     804         \n======================================\n  Hits         3836    3836         \n  Misses        630     630         \n  Partials       95      95\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c88fa70...5b0a68f. Read the comment docs.\n. # Codecov Report\nMerging #1529 into master will increase coverage by 0.03%.\nThe diff coverage is 96%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1529      +/-\n==========================================\n+ Coverage    84.1%   84.14%   +0.03%   \n==========================================\n  Files          79       79            \n  Lines        4561     4565       +4   \n  Branches      804      803       -1   \n==========================================\n+ Hits         3836     3841       +5   \n+ Misses        630      629       -1   \n  Partials       95       95\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/MacroExpander.js | 93.96% <100%> (\u00f8) | :arrow_up: |\n| src/functions/href.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/Lexer.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/Parser.js | 93.86% <92%> (+0.1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b73e438...5fe1fee. Read the comment docs.\n. # Codecov Report\nMerging #1531 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1531   +/-\n=======================================\n  Coverage   84.42%   84.42%         \n=======================================\n  Files          79       79         \n  Lines        4623     4623         \n  Branches      812      812         \n=======================================\n  Hits         3903     3903         \n  Misses        618      618         \n  Partials      102      102\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update db43058...0b3891f. Read the comment docs.\n. # Codecov Report\nMerging #1532 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1532   +/-\n======================================\n  Coverage    84.1%   84.1%         \n======================================\n  Files          79      79         \n  Lines        4561    4561         \n  Branches      804     804         \n======================================\n  Hits         3836    3836         \n  Misses        630     630         \n  Partials       95      95\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c06b36c...d0a77d2. Read the comment docs.\n. # Codecov Report\nMerging #1533 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1533   +/-\n======================================\n  Coverage    84.1%   84.1%         \n======================================\n  Files          79      79         \n  Lines        4561    4561         \n  Branches      804     804         \n======================================\n  Hits         3836    3836         \n  Misses        630     630         \n  Partials       95      95\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 41892af...d105aa4. Read the comment docs.\n. # Codecov Report\nMerging #1534 into master will decrease coverage by 0.02%.\nThe diff coverage is 90.74%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1534      +/-\n==========================================\n- Coverage   84.14%   84.11%   -0.03%   \n==========================================\n  Files          79       79            \n  Lines        4565     4558       -7   \n  Branches      803      803            \n==========================================\n- Hits         3841     3834       -7   \n  Misses        629      629            \n  Partials       95       95\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/supsub.js | 98% <\u00f8> (\u00f8) | :arrow_up: |\n| src/ParseError.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/stretchy.js | 79.54% <\u00f8> (\u00f8) | :arrow_up: |\n| src/Settings.js | 73.52% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/symbolsOrd.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/symbolsOp.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/buildMathML.js | 98.73% <\u00f8> (\u00f8) | :arrow_up: |\n| src/defineEnvironment.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/buildTree.js | 94.11% <\u00f8> (\u00f8) | :arrow_up: |\n| src/utils.js | 66.66% <\u00f8> (\u00f8) | :arrow_up: |\n| ... and 39 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2202aa7...a67dcd0. Read the comment docs.\n. # Codecov Report\nMerging #1536 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1536   +/-\n=======================================\n  Coverage   84.11%   84.11%         \n=======================================\n  Files          79       79         \n  Lines        4563     4563         \n  Branches      807      807         \n=======================================\n  Hits         3838     3838         \n  Misses        630      630         \n  Partials       95       95\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7e97a38...2414e82. Read the comment docs.\n. # Codecov Report\nMerging #1539 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1539   +/-\n=======================================\n  Coverage   84.11%   84.11%         \n=======================================\n  Files          79       79         \n  Lines        4558     4558         \n  Branches      803      803         \n=======================================\n  Hits         3834     3834         \n  Misses        629      629         \n  Partials       95       95\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0ac4b6e...4325fe3. Read the comment docs.\n. # Codecov Report\nMerging #1541 into master will decrease coverage by <.01%.\nThe diff coverage is 90.62%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1541      +/-\n==========================================\n- Coverage   84.11%   84.11%   -0.01%   \n==========================================\n  Files          79       79            \n  Lines        4558     4563       +5   \n  Branches      803      807       +4   \n==========================================\n+ Hits         3834     3838       +4   \n- Misses        629      630       +1   \n  Partials       95       95\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/utils.js | 66.66% <\u00f8> (\u00f8) | :arrow_up: |\n| src/Parser.js | 93.94% <100%> (+0.08%) | :arrow_up: |\n| src/functions/mclass.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/symbolsOp.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/genfrac.js | 87.77% <50%> (\u00f8) | :arrow_up: |\n| src/parseNode.js | 84.21% <83.33%> (-1.51%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 30be53e...4378ca0. Read the comment docs.\n. # Codecov Report\nMerging #1542 into master will decrease coverage by 0.01%.\nThe diff coverage is 97.36%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1542      +/-\n=========================================\n- Coverage   84.11%   84.1%   -0.02%   \n=========================================\n  Files          79      79            \n  Lines        4563    4560       -3   \n  Branches      807     806       -1   \n=========================================\n- Hits         3838    3835       -3   \n  Misses        630     630            \n  Partials       95      95\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/operatorname.js | 92.1% <\u00f8> (\u00f8) | :arrow_up: |\n| src/parseNode.js | 84.21% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/delimsizing.js | 65.16% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/mclass.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/accent.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/op.js | 94.84% <100%> (\u00f8) | :arrow_up: |\n| src/functions/supsub.js | 97.95% <100%> (-0.05%) | :arrow_down: |\n| src/functions/horizBrace.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/stretchy.js | 79.54% <100%> (\u00f8) | :arrow_up: |\n| src/functions/smash.js | 87.5% <100%> (+0.32%) | :arrow_up: |\n| ... and 4 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c7145f0...8d216fe. Read the comment docs.\n. # Codecov Report\nMerging #1545 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1545   +/-\n======================================\n  Coverage    84.1%   84.1%         \n======================================\n  Files          79      79         \n  Lines        4560    4560         \n  Branches      806     806         \n======================================\n  Hits         3835    3835         \n  Misses        630     630         \n  Partials       95      95\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fd6690b...ff9bbcb. Read the comment docs.\n. # Codecov Report\nMerging #1547 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1547   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 02639b4...c66c433. Read the comment docs.\n. # Codecov Report\nMerging #1548 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1548   +/-\n======================================\n  Coverage    84.1%   84.1%         \n======================================\n  Files          79      79         \n  Lines        4560    4560         \n  Branches      806     806         \n======================================\n  Hits         3835    3835         \n  Misses        630     630         \n  Partials       95      95\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 90.49% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ddddd3a...fe59fee. Read the comment docs.\n. # Codecov Report\nMerging #1549 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1549   +/-\n======================================\n  Coverage    84.1%   84.1%         \n======================================\n  Files          79      79         \n  Lines        4560    4560         \n  Branches      806     806         \n======================================\n  Hits         3835    3835         \n  Misses        630     630         \n  Partials       95      95\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f28e3c8...e2e518e. Read the comment docs.\n. # Codecov Report\nMerging #1550 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1550      +/-\n=========================================\n+ Coverage    84.1%   84.1%   +<.01%   \n=========================================\n  Files          79      79            \n  Lines        4560    4562       +2   \n  Branches      806     806            \n=========================================\n+ Hits         3835    3837       +2   \n  Misses        630     630            \n  Partials       95      95\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 90.49% <100%> (\u00f8) | :arrow_up: |\n| src/functions/enclose.js | 90.76% <100%> (+0.29%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aef9256...55adc98. Read the comment docs.\n. # Codecov Report\nMerging #1551 into master will decrease coverage by <.01%.\nThe diff coverage is 76.92%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1551      +/-\n=========================================\n- Coverage    84.1%   84.1%   -0.01%   \n=========================================\n  Files          79      79            \n  Lines        4562    4555       -7   \n  Branches      806     803       -3   \n=========================================\n- Hits         3837    3831       -6   \n+ Misses        630     629       -1   \n  Partials       95      95\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parseNode.js | 84.21% <\u00f8> (\u00f8) | :arrow_up: |\n| src/Parser.js | 93.94% <\u00f8> (\u00f8) | :arrow_up: |\n| src/parseTree.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/tag.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/utils.js | 66.66% <0%> (\u00f8) | :arrow_up: |\n| src/buildCommon.js | 91.09% <0%> (\u00f8) | :arrow_up: |\n| src/buildHTML.js | 97.69% <100%> (\u00f8) | :arrow_up: |\n| src/functions/href.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/mclass.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/font.js | 95.83% <100%> (\u00f8) | :arrow_up: |\n| ... and 5 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b2d3810...ae68f65. Read the comment docs.\n. # Codecov Report\nMerging #1552 into master will increase coverage by 0.01%.\nThe diff coverage is 82.35%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1552      +/-\n==========================================\n+ Coverage    84.1%   84.12%   +0.01%   \n==========================================\n  Files          79       79            \n  Lines        4555     4554       -1   \n  Branches      803      803            \n==========================================\n  Hits         3831     3831            \n+ Misses        629      628       -1   \n  Partials       95       95\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/environment.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/parseNode.js | 84.21% <\u00f8> (\u00f8) | :arrow_up: |\n| src/utils.js | 66.66% <0%> (\u00f8) | :arrow_up: |\n| src/functions/underline.js | 9.09% <0%> (+0.75%) | :arrow_up: |\n| src/buildHTML.js | 97.69% <0%> (\u00f8) | :arrow_up: |\n| src/functions/overline.js | 25% <0%> (\u00f8) | :arrow_up: |\n| src/Parser.js | 93.94% <100%> (\u00f8) | :arrow_up: |\n| src/functions/operatorname.js | 92.1% <100%> (\u00f8) | :arrow_up: |\n| src/functions/enclose.js | 90.76% <100%> (\u00f8) | :arrow_up: |\n| src/functions/raisebox.js | 100% <100%> (\u00f8) | :arrow_up: |\n| ... and 9 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1506dc1...903f19e. Read the comment docs.\n. # Codecov Report\nMerging #1554 into master will increase coverage by 0.05%.\nThe diff coverage is 75%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1554      +/-\n==========================================\n+ Coverage   84.12%   84.17%   +0.05%   \n==========================================\n  Files          79       79            \n  Lines        4554     4551       -3   \n  Branches      803      803            \n==========================================\n  Hits         3831     3831            \n+ Misses        628      625       -3   \n  Partials       95       95\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/cr.js | 95.65% <\u00f8> (\u00f8) | :arrow_up: |\n| src/Parser.js | 93.94% <\u00f8> (\u00f8) | :arrow_up: |\n| src/parseNode.js | 84.21% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/rule.js | 95.23% <\u00f8> (\u00f8) | :arrow_up: |\n| src/environments/array.js | 45.49% <0%> (\u00f8) | :arrow_up: |\n| src/functions/kern.js | 81.25% <100%> (\u00f8) | :arrow_up: |\n| src/functions/raisebox.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/genfrac.js | 89.32% <66.66%> (+1.48%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5b6ffd7...bb07401. Read the comment docs.\n. # Codecov Report\nMerging #1555 into master will decrease coverage by 0.03%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1555      +/-\n==========================================\n- Coverage   84.53%   84.49%   -0.04%   \n==========================================\n  Files          79       79            \n  Lines        4617     4619       +2   \n  Branches      806      807       +1   \n==========================================\n  Hits         3903     3903            \n- Misses        618      619       +1   \n- Partials       96       97       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| contrib/auto-render/auto-render.js | 0% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 69a7634...84c3f28. Read the comment docs.\n. # Codecov Report\nMerging #1556 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1556   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 881d780...8d40166. Read the comment docs.\n. # Codecov Report\nMerging #1557 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1557   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 48e6d9d...96b02a7. Read the comment docs.\n. # Codecov Report\nMerging #1558 into master will increase coverage by 0.21%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1558      +/-\n==========================================\n+ Coverage   84.17%   84.39%   +0.21%   \n==========================================\n  Files          79       79            \n  Lines        4544     4607      +63   \n  Branches      803      803            \n==========================================\n+ Hits         3825     3888      +63   \n  Misses        624      624            \n  Partials       95       95\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 92.21% <100%> (+1.72%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f3a9bd4...88ee3c0. Read the comment docs.\n. # Codecov Report\nMerging #1559 into master will decrease coverage by <.01%.\nThe diff coverage is 61.76%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1559      +/-\n==========================================\n- Coverage   84.17%   84.17%   -0.01%   \n==========================================\n  Files          79       79            \n  Lines        4551     4544       -7   \n  Branches      803      803            \n==========================================\n- Hits         3831     3825       -6   \n+ Misses        625      624       -1   \n  Partials       95       95\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parseNode.js | 84.21% <\u00f8> (\u00f8) | :arrow_up: |\n| src/Parser.js | 93.94% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/raisebox.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/math.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/href.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/styling.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/buildHTML.js | 97.69% <100%> (\u00f8) | :arrow_up: |\n| src/functions/text.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/environments/array.js | 44.3% <48%> (-1.19%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f0b9a34...e327f7d. Read the comment docs.\n. # Codecov Report\nMerging #1561 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1561   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 05dc921...a12d759. Read the comment docs.\n. # Codecov Report\nMerging #1563 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1563   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/delimsizing.js | 65.51% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0a63929...015999f. Read the comment docs.\n. # Codecov Report\nMerging #1564 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1564   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0b8277c...8b4d86a. Read the comment docs.\n. # Codecov Report\nMerging #1565 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1565   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5ce03c4...8a00c5d. Read the comment docs.\n. # Codecov Report\nMerging #1566 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1566   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5ce03c4...8aed6df. Read the comment docs.\n. # Codecov Report\nMerging #1567 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1567   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ed7ad8d...eed47a0. Read the comment docs.\n. # Codecov Report\nMerging #1568 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1568   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 429bb56...6b568cf. Read the comment docs.\n. # Codecov Report\nMerging #1569 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1569   +/-\n=======================================\n  Coverage   84.97%   84.97%         \n=======================================\n  Files          78       78         \n  Lines        4593     4593         \n  Branches      806      806         \n=======================================\n  Hits         3903     3903         \n  Misses        594      594         \n  Partials       96       96\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f829ebc...1165a11. Read the comment docs.\n. # Codecov Report\nMerging #1571 into master will decrease coverage by 0.47%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1571      +/-\n==========================================\n- Coverage   84.97%   84.49%   -0.48%   \n==========================================\n  Files          78       79       +1   \n  Lines        4592     4619      +27   \n  Branches      806      807       +1   \n==========================================\n+ Hits         3902     3903       +1   \n- Misses        594      619      +25   \n- Partials       96       97       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/Lexer.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/functions/delimsizing.js | 65.51% <0%> (\u00f8) | :arrow_up: |\n| contrib/auto-render/auto-render.js | 0% <0%> (\u00f8) | :arrow_up: |\n| src/defineFunction.js | 93.75% <0%> (\u00f8) | :arrow_up: |\n| src/SourceLocation.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/unicodeMake.js | 0% <0%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e790a41...520dda3. Read the comment docs.\n. # Codecov Report\nMerging #1572 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1572   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 00a23b6...5facbce. Read the comment docs.\n. # Codecov Report\nMerging #1573 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1573   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bd0ac91...c827b33. Read the comment docs.\n. # Codecov Report\nMerging #1574 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1574   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dcaa139...9670bde. Read the comment docs.\n. # Codecov Report\nMerging #1575 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1575   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update eab8f24...095f068. Read the comment docs.\n. # Codecov Report\nMerging #1576 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1576   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8fb92f6...1937f53. Read the comment docs.\n. # Codecov Report\nMerging #1577 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1577   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e4db097...c38955c. Read the comment docs.\n. # Codecov Report\nMerging #1579 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1579   +/-\n=======================================\n  Coverage   84.42%   84.42%         \n=======================================\n  Files          79       79         \n  Lines        4623     4623         \n  Branches      812      812         \n=======================================\n  Hits         3903     3903         \n  Misses        618      618         \n  Partials      102      102\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7f1ce37...fc2c86a. Read the comment docs.\n. # Codecov Report\nMerging #1580 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1580   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b99de9a...6e5e382. Read the comment docs.\n. # Codecov Report\nMerging #1581 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1581   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 307b7ab...bef20aa. Read the comment docs.\n. # Codecov Report\nMerging #1583 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1583   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 881d780...78514f7. Read the comment docs.\n. # Codecov Report\nMerging #1584 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1584   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d2f56ce...a1e4d77. Read the comment docs.\n. # Codecov Report\nMerging #1585 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1585   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b99de9a...fb272aa. Read the comment docs.\n. # Codecov Report\nMerging #1586 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1586   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b99de9a...a1a41e3. Read the comment docs.\n. # Codecov Report\nMerging #1587 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1587   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b99de9a...b8c4a4e. Read the comment docs.\n. # Codecov Report\nMerging #1588 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1588   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b99de9a...802d663. Read the comment docs.\n. # Codecov Report\nMerging #1590 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1590   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ea1a226...5d2a9c2. Read the comment docs.\n. # Codecov Report\nMerging #1591 into master will decrease coverage by 0.07%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1591      +/-\n==========================================\n- Coverage   84.49%   84.42%   -0.08%   \n==========================================\n  Files          79       79            \n  Lines        4619     4623       +4   \n  Branches      807      812       +5   \n==========================================\n  Hits         3903     3903            \n+ Misses        619      618       -1   \n- Partials       97      102       +5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| contrib/auto-render/auto-render.js | 0% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 51bf3fa...006a84f. Read the comment docs.\n. # Codecov Report\nMerging #1592 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1592   +/-\n=======================================\n  Coverage   84.42%   84.42%         \n=======================================\n  Files          79       79         \n  Lines        4623     4623         \n  Branches      812      812         \n=======================================\n  Hits         3903     3903         \n  Misses        618      618         \n  Partials      102      102\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9a98428...7911e3c. Read the comment docs.\n. # Codecov Report\nMerging #1594 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1594   +/-\n=======================================\n  Coverage   84.42%   84.42%         \n=======================================\n  Files          79       79         \n  Lines        4623     4623         \n  Branches      812      812         \n=======================================\n  Hits         3903     3903         \n  Misses        618      618         \n  Partials      102      102\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b542c79...b3c04cd. Read the comment docs.\n. # Codecov Report\nMerging #1595 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1595   +/-\n=======================================\n  Coverage   93.85%   93.85%         \n=======================================\n  Files          78       78         \n  Lines        4571     4571         \n  Branches      802      802         \n=======================================\n  Hits         4290     4290         \n  Misses        248      248         \n  Partials       33       33\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/delimsizing.js | 96.55% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 010dc88...6e4bfb1. Read the comment docs.\n. # Codecov Report\nMerging #1597 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1597   +/-\n=======================================\n  Coverage   84.42%   84.42%         \n=======================================\n  Files          79       79         \n  Lines        4623     4623         \n  Branches      812      812         \n=======================================\n  Hits         3903     3903         \n  Misses        618      618         \n  Partials      102      102\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8f95a27...a9377b0. Read the comment docs.\n. # Codecov Report\nMerging #1600 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1600   +/-\n=======================================\n  Coverage   84.42%   84.42%         \n=======================================\n  Files          79       79         \n  Lines        4623     4623         \n  Branches      812      812         \n=======================================\n  Hits         3903     3903         \n  Misses        618      618         \n  Partials      102      102\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fdb155a...1351748. Read the comment docs.\n. # Codecov Report\nMerging #1601 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1601   +/-\n=======================================\n  Coverage   84.42%   84.42%         \n=======================================\n  Files          79       79         \n  Lines        4623     4623         \n  Branches      812      812         \n=======================================\n  Hits         3903     3903         \n  Misses        618      618         \n  Partials      102      102\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 536eb9f...a5a5300. Read the comment docs.\n. # Codecov Report\nMerging #1602 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1602   +/-\n=======================================\n  Coverage   84.42%   84.42%         \n=======================================\n  Files          79       79         \n  Lines        4623     4623         \n  Branches      812      812         \n=======================================\n  Hits         3903     3903         \n  Misses        618      618         \n  Partials      102      102\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d81caf1...f93d6b7. Read the comment docs.\n. # Codecov Report\nMerging #1603 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1603   +/-\n=======================================\n  Coverage   84.97%   84.97%         \n=======================================\n  Files          78       78         \n  Lines        4593     4593         \n  Branches      806      806         \n=======================================\n  Hits         3903     3903         \n  Misses        594      594         \n  Partials       96       96\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 46e7939...bde52a8. Read the comment docs.\n. # Codecov Report\nMerging #1604 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1604   +/-\n=======================================\n  Coverage   84.49%   84.49%         \n=======================================\n  Files          79       79         \n  Lines        4619     4619         \n  Branches      807      807         \n=======================================\n  Hits         3903     3903         \n  Misses        619      619         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 51bf3fa...4759fac. Read the comment docs.\n. # Codecov Report\nMerging #1605 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1605   +/-\n=======================================\n  Coverage   84.97%   84.97%         \n=======================================\n  Files          78       78         \n  Lines        4593     4593         \n  Branches      806      806         \n=======================================\n  Hits         3903     3903         \n  Misses        594      594         \n  Partials       96       96\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0687dd4...32da6b0. Read the comment docs.\n. # Codecov Report\nMerging #1606 into master will not change coverage.\nThe diff coverage is 79.03%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1606   +/-\n=======================================\n  Coverage   84.42%   84.42%         \n=======================================\n  Files          79       79         \n  Lines        4623     4623         \n  Branches      812      812         \n=======================================\n  Hits         3903     3903         \n  Misses        618      618         \n  Partials      102      102\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/href.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/defineFunction.js | 93.75% <\u00f8> (\u00f8) | :arrow_up: |\n| src/parseNode.js | 84.21% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/symbolsOp.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/Parser.js | 93.94% <100%> (\u00f8) | :arrow_up: |\n| src/functions/delimsizing.js | 65.51% <100%> (\u00f8) | :arrow_up: |\n| src/functions/operatorname.js | 92.1% <100%> (\u00f8) | :arrow_up: |\n| src/functions/char.js | 90.9% <100%> (\u00f8) | :arrow_up: |\n| src/functions/enclose.js | 90.76% <100%> (\u00f8) | :arrow_up: |\n| src/buildMathML.js | 98.73% <100%> (\u00f8) | :arrow_up: |\n| ... and 9 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4e53f9d...f228e18. Read the comment docs.\n. # Codecov Report\nMerging #1607 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1607   +/-\n=======================================\n  Coverage   84.42%   84.42%         \n=======================================\n  Files          79       79         \n  Lines        4623     4623         \n  Branches      812      812         \n=======================================\n  Hits         3903     3903         \n  Misses        618      618         \n  Partials      102      102\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1015011...bc6d1f8. Read the comment docs.\n. # Codecov Report\nMerging #1608 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1608   +/-\n=======================================\n  Coverage   84.42%   84.42%         \n=======================================\n  Files          79       79         \n  Lines        4623     4623         \n  Branches      812      812         \n=======================================\n  Hits         3903     3903         \n  Misses        618      618         \n  Partials      102      102\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1015011...0474a4a. Read the comment docs.\n. # Codecov Report\nMerging #1609 into master will not change coverage.\nThe diff coverage is 81.81%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1609   +/-\n=======================================\n  Coverage   84.42%   84.42%         \n=======================================\n  Files          79       79         \n  Lines        4623     4623         \n  Branches      812      812         \n=======================================\n  Hits         3903     3903         \n  Misses        618      618         \n  Partials      102      102\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parseNode.js | 84.21% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/font.js | 95.83% <\u00f8> (\u00f8) | :arrow_up: |\n| src/Parser.js | 93.94% <100%> (\u00f8) | :arrow_up: |\n| src/utils.js | 66.66% <100%> (\u00f8) | :arrow_up: |\n| src/stretchy.js | 79.54% <100%> (\u00f8) | :arrow_up: |\n| src/defineFunction.js | 93.75% <100%> (\u00f8) | :arrow_up: |\n| src/functions/char.js | 90.9% <100%> (\u00f8) | :arrow_up: |\n| src/functions/mclass.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/smash.js | 87.5% <100%> (\u00f8) | :arrow_up: |\n| src/functions/environment.js | 100% <100%> (\u00f8) | :arrow_up: |\n| ... and 3 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8492a75...a7dab67. Read the comment docs.\n. # Codecov Report\nMerging #1610 into master will increase coverage by 0.55%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1610      +/-\n==========================================\n+ Coverage   84.42%   84.97%   +0.55%   \n==========================================\n  Files          79       78       -1   \n  Lines        4623     4593      -30   \n  Branches      812      806       -6   \n==========================================\n  Hits         3903     3903            \n+ Misses        618      594      -24   \n+ Partials      102       96       -6\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e8f2ecd...8056d41. Read the comment docs.\n. # Codecov Report\nMerging #1612 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1612   +/-\n=======================================\n  Coverage   84.42%   84.42%         \n=======================================\n  Files          79       79         \n  Lines        4623     4623         \n  Branches      812      812         \n=======================================\n  Hits         3903     3903         \n  Misses        618      618         \n  Partials      102      102\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parseNode.js | 84.21% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/mclass.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/supsub.js | 97.95% <100%> (\u00f8) | :arrow_up: |\n| src/functions/op.js | 94.84% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fcc5c44...2b8ed8c. Read the comment docs.\n. # Codecov Report\nMerging #1613 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1613   +/-\n=======================================\n  Coverage   84.97%   84.97%         \n=======================================\n  Files          78       78         \n  Lines        4593     4593         \n  Branches      806      806         \n=======================================\n  Hits         3903     3903         \n  Misses        594      594         \n  Partials       96       96\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3f31a50...f8f6c11. Read the comment docs.\n. # Codecov Report\nMerging #1614 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1614   +/-\n=======================================\n  Coverage   84.42%   84.42%         \n=======================================\n  Files          79       79         \n  Lines        4623     4623         \n  Branches      812      812         \n=======================================\n  Hits         3903     3903         \n  Misses        618      618         \n  Partials      102      102\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e7a4522...79fe565. Read the comment docs.\n. # Codecov Report\nMerging #1615 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1615   +/-\n=======================================\n  Coverage   84.97%   84.97%         \n=======================================\n  Files          78       78         \n  Lines        4593     4593         \n  Branches      806      806         \n=======================================\n  Hits         3903     3903         \n  Misses        594      594         \n  Partials       96       96\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 062cfb1...d21d8af. Read the comment docs.\n. # Codecov Report\nMerging #1620 into master will decrease coverage by 0.21%.\nThe diff coverage is 83.15%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1620      +/-\n==========================================\n- Coverage   93.89%   93.67%   -0.22%   \n==========================================\n  Files          79       80       +1   \n  Lines        4571     4666      +95   \n  Branches      796      813      +17   \n==========================================\n+ Hits         4292     4371      +79   \n- Misses        247      261      +14   \n- Partials       32       34       +2\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.62% <82.1%> (+0.06%) | :arrow_up: |\n| #test | 85.04% <73.68%> (-0.24%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/mathMLTree.js | 98.3% <\u00f8> (\u00f8) | :arrow_up: |\n| src/parseNode.js | 84.21% <\u00f8> (\u00f8) | :arrow_up: |\n| src/Parser.js | 97.23% <100%> (+0.03%) | :arrow_up: |\n| src/domTree.js | 88.58% <59.09%> (-4.01%) | :arrow_down: |\n| src/functions/includegraphics.js | 89.85% <89.85%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f628ca1...3df6573. Read the comment docs.\n. # Codecov Report\nMerging #1621 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1621   +/-\n=======================================\n  Coverage   84.97%   84.97%         \n=======================================\n  Files          78       78         \n  Lines        4593     4593         \n  Branches      806      806         \n=======================================\n  Hits         3903     3903         \n  Misses        594      594         \n  Partials       96       96\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 52f3c05...2c99696. Read the comment docs.\n. # Codecov Report\nMerging #1622 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1622   +/-\n=======================================\n  Coverage   84.97%   84.97%         \n=======================================\n  Files          78       78         \n  Lines        4593     4593         \n  Branches      806      806         \n=======================================\n  Hits         3903     3903         \n  Misses        594      594         \n  Partials       96       96\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1eecf2d...887f6f5. Read the comment docs.\n. # Codecov Report\nMerging #1623 into master will not change coverage.\nThe diff coverage is 0%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1623   +/-\n=======================================\n  Coverage   84.97%   84.97%         \n=======================================\n  Files          78       78         \n  Lines        4593     4593         \n  Branches      806      806         \n=======================================\n  Hits         3903     3903         \n  Misses        594      594         \n  Partials       96       96\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| contrib/auto-render/auto-render.js | 0% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0a35a3d...b38e21a. Read the comment docs.\n. # Codecov Report\nMerging #1624 into master will decrease coverage by 0.02%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1624      +/-\n==========================================\n- Coverage   93.91%   93.89%   -0.03%   \n==========================================\n  Files          78       79       +1   \n  Lines        4570     4571       +1   \n  Branches      796      796            \n==========================================\n  Hits         4292     4292            \n- Misses        246      247       +1   \n  Partials       32       32\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.55% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 85.27% <0%> (-0.02%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| contrib/copy-tex/copy-tex.js | 0% <\u00f8> (\u00f8) | :arrow_up: |\n| contrib/copy-tex/copy-tex.webpack.js | 0% <0%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1d79483...9f5b8b0. Read the comment docs.\n. # Codecov Report\nMerging #1628 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1628   +/-\n=======================================\n  Coverage   84.97%   84.97%         \n=======================================\n  Files          78       78         \n  Lines        4593     4593         \n  Branches      806      806         \n=======================================\n  Hits         3903     3903         \n  Misses        594      594         \n  Partials       96       96\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ce64e56...492973a. Read the comment docs.\n. # Codecov Report\nMerging #1629 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1629   +/-\n=======================================\n  Coverage   84.97%   84.97%         \n=======================================\n  Files          78       78         \n  Lines        4593     4593         \n  Branches      806      806         \n=======================================\n  Hits         3903     3903         \n  Misses        594      594         \n  Partials       96       96\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0687dd4...678f5f5. Read the comment docs.\n. # Codecov Report\nMerging #1631 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1631   +/-\n=======================================\n  Coverage   93.84%   93.84%         \n=======================================\n  Files          78       78         \n  Lines        4567     4567         \n  Branches      802      802         \n=======================================\n  Hits         4286     4286         \n  Misses        248      248         \n  Partials       33       33\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 48e5a26...1a0635b. Read the comment docs.\n. # Codecov Report\nMerging #1633 into master will increase coverage by 8.71%.\nThe diff coverage is 97.14%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1633      +/-\n==========================================\n+ Coverage   85.13%   93.84%   +8.71%   \n==========================================\n  Files          78       78            \n  Lines        4573     4568       -5   \n  Branches      801      801            \n==========================================\n+ Hits         3893     4287     +394   \n+ Misses        585      248     -337   \n+ Partials       95       33      -62\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tree.js | 82.35% <\u00f8> (+26.79%) | :arrow_up: |\n| src/functions/verb.js | 100% <\u00f8> (+87.5%) | :arrow_up: |\n| src/functions/text.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/domTree.js | 92.59% <100%> (+27.62%) | :arrow_up: |\n| src/functions/op.js | 96.9% <100%> (+2.06%) | :arrow_up: |\n| src/buildCommon.js | 98.46% <96.87%> (+7.36%) | :arrow_up: |\n| src/buildHTML.js | 99.23% <0%> (+1.53%) | :arrow_up: |\n| src/MacroExpander.js | 95.68% <0%> (+1.72%) | :arrow_up: |\n| src/functions/operatorname.js | 94.73% <0%> (+2.63%) | :arrow_up: |\n| ... and 24 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7ca6f51...518f4cb. Read the comment docs.\n. # Codecov Report\nMerging #1634 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1634   +/-\n=======================================\n  Coverage   84.97%   84.97%         \n=======================================\n  Files          78       78         \n  Lines        4592     4592         \n  Branches      806      806         \n=======================================\n  Hits         3902     3902         \n  Misses        594      594         \n  Partials       96       96\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b2432e8...24ec78f. Read the comment docs.\n. # Codecov Report\nMerging #1635 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1635   +/-\n=======================================\n  Coverage   84.97%   84.97%         \n=======================================\n  Files          78       78         \n  Lines        4593     4593         \n  Branches      806      806         \n=======================================\n  Hits         3903     3903         \n  Misses        594      594         \n  Partials       96       96\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 93b1b79...d2c6a7d. Read the comment docs.\n. # Codecov Report\nMerging #1636 into master will not change coverage.\nThe diff coverage is 93.93%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1636   +/-\n=======================================\n  Coverage   84.97%   84.97%         \n=======================================\n  Files          78       78         \n  Lines        4592     4592         \n  Branches      806      806         \n=======================================\n  Hits         3902     3902         \n  Misses        594      594         \n  Partials       96       96\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tree.js | 55.55% <\u00f8> (\u00f8) | :arrow_up: |\n| src/buildHTML.js | 97.69% <100%> (\u00f8) | :arrow_up: |\n| src/mathMLTree.js | 76.27% <100%> (\u00f8) | :arrow_up: |\n| src/functions/sqrt.js | 93.93% <100%> (\u00f8) | :arrow_up: |\n| src/functions/mathchoice.js | 92.85% <100%> (\u00f8) | :arrow_up: |\n| src/functions/htmlmathml.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/domTree.js | 64.97% <100%> (\u00f8) | :arrow_up: |\n| src/functions/href.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/color.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/phantom.js | 72.72% <100%> (\u00f8) | :arrow_up: |\n| ... and 6 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ead04e5...afedd91. Read the comment docs.\n. # Codecov Report\nMerging #1637 into master will decrease coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1637      +/-\n==========================================\n- Coverage   84.97%   84.97%   -0.01%   \n==========================================\n  Files          78       78            \n  Lines        4593     4592       -1   \n  Branches      806      806            \n==========================================\n- Hits         3903     3902       -1   \n  Misses        594      594            \n  Partials       96       96\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/SourceLocation.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aee4a86...13f2b9e. Read the comment docs.\n. # Codecov Report\nMerging #1638 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1638   +/-\n=======================================\n  Coverage   84.97%   84.97%         \n=======================================\n  Files          78       78         \n  Lines        4592     4592         \n  Branches      806      806         \n=======================================\n  Hits         3902     3902         \n  Misses        594      594         \n  Partials       96       96\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 293af29...83098e6. Read the comment docs.\n. # Codecov Report\nMerging #1640 into master will increase coverage by 8.63%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1640      +/-\n==========================================\n+ Coverage   85.21%   93.84%   +8.63%   \n==========================================\n  Files          78       78            \n  Lines        4571     4567       -4   \n  Branches      802      802            \n==========================================\n+ Hits         3895     4286     +391   \n+ Misses        581      248     -333   \n+ Partials       95       33      -62\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildCommon.js | 98.41% <\u00f8> (+7.25%) | :arrow_up: |\n| src/functions/symbolsSpacing.js | 89.47% <100%> (+24.76%) | :arrow_up: |\n| src/functions/verb.js | 100% <100%> (+86.66%) | :arrow_up: |\n| src/buildHTML.js | 99.23% <0%> (+1.53%) | :arrow_up: |\n| src/MacroExpander.js | 95.68% <0%> (+1.72%) | :arrow_up: |\n| src/functions/op.js | 96.9% <0%> (+2.06%) | :arrow_up: |\n| src/functions/operatorname.js | 94.73% <0%> (+2.63%) | :arrow_up: |\n| src/functions/arrow.js | 87.87% <0%> (+3.03%) | :arrow_up: |\n| src/functions/sqrt.js | 96.96% <0%> (+3.03%) | :arrow_up: |\n| src/Parser.js | 97.12% <0%> (+3.13%) | :arrow_up: |\n| ... and 20 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ddc287e...de7e999. Read the comment docs.\n. # Codecov Report\nMerging #1641 into master will decrease coverage by 0.66%.\nThe diff coverage is 57.89%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1641      +/-\n==========================================\n- Coverage   85.13%   84.46%   -0.67%   \n==========================================\n  Files          78       79       +1   \n  Lines        4573     4615      +42   \n  Branches      801      812      +11   \n==========================================\n+ Hits         3893     3898       +5   \n- Misses        585      615      +30   \n- Partials       95      102       +7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| contrib/copy-tex/katex2tex.js | 0% <0%> (\u00f8) | :arrow_up: |\n| contrib/copy-tex/copy-tex.js | 0% <0%> (\u00f8) | :arrow_up: |\n| contrib/auto-render/auto-render.js | 0% <0%> (\u00f8) | :arrow_up: |\n| src/buildMathML.js | 98.73% <100%> (\u00f8) | :arrow_up: |\n| src/buildCommon.js | 90.94% <100%> (-0.15%) | :arrow_down: |\n| src/buildHTML.js | 97.69% <100%> (\u00f8) | :arrow_up: |\n| src/functions/delimsizing.js | 65.51% <100%> (\u00f8) | :arrow_up: |\n| src/functions/sizing.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/Parser.js | 93.94% <100%> (\u00f8) | :arrow_up: |\n| contrib/auto-render/splitAtDelimiters.js | 100% <100%> (\u00f8) | :arrow_up: |\n| ... and 14 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7ca6f51...44458ce. Read the comment docs.\n. # Codecov Report\nMerging #1642 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1642   +/-\n=======================================\n  Coverage   84.97%   84.97%         \n=======================================\n  Files          78       78         \n  Lines        4592     4592         \n  Branches      806      806         \n=======================================\n  Hits         3902     3902         \n  Misses        594      594         \n  Partials       96       96\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8135611...57c1cb1. Read the comment docs.\n. # Codecov Report\nMerging #1643 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1643   +/-\n=======================================\n  Coverage   93.81%   93.81%         \n=======================================\n  Files          78       78         \n  Lines        4573     4573         \n  Branches      801      801         \n=======================================\n  Hits         4290     4290         \n  Misses        250      250         \n  Partials       33       33\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 41a4397...c46ee25. Read the comment docs.\n. # Codecov Report\nMerging #1644 into master will increase coverage by 8.68%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1644      +/-\n==========================================\n+ Coverage   85.13%   93.81%   +8.68%   \n==========================================\n  Files          78       78            \n  Lines        4573     4573            \n  Branches      801      801            \n==========================================\n+ Hits         3893     4290     +397   \n+ Misses        585      250     -335   \n+ Partials       95       33      -62\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildHTML.js | 99.23% <0%> (+1.53%) | :arrow_up: |\n| src/MacroExpander.js | 95.68% <0%> (+1.72%) | :arrow_up: |\n| src/functions/op.js | 96.9% <0%> (+2.06%) | :arrow_up: |\n| src/functions/operatorname.js | 94.73% <0%> (+2.63%) | :arrow_up: |\n| src/functions/arrow.js | 87.87% <0%> (+3.03%) | :arrow_up: |\n| src/functions/sqrt.js | 96.96% <0%> (+3.03%) | :arrow_up: |\n| src/Parser.js | 97.1% <0%> (+3.15%) | :arrow_up: |\n| src/functions/genfrac.js | 93.25% <0%> (+3.93%) | :arrow_up: |\n| src/macros.js | 97.11% <0%> (+4.89%) | :arrow_up: |\n| src/buildCommon.js | 98.38% <0%> (+7.28%) | :arrow_up: |\n| ... and 18 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9631081...2964f8e. Read the comment docs.\n. # Codecov Report\nMerging #1645 into master will increase coverage by 0.15%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1645      +/-\n==========================================\n+ Coverage   84.97%   85.13%   +0.15%   \n==========================================\n  Files          78       78            \n  Lines        4592     4573      -19   \n  Branches      806      801       -5   \n==========================================\n- Hits         3902     3893       -9   \n+ Misses        594      585       -9   \n+ Partials       96       95       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/utils.js | 77.14% <100%> (+10.47%) | :arrow_up: |\n| src/functions/sizing.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f702227...2229aca. Read the comment docs.\n. # Codecov Report\nMerging #1651 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1651   +/-\n=======================================\n  Coverage   93.81%   93.81%         \n=======================================\n  Files          78       78         \n  Lines        4573     4573         \n  Branches      801      801         \n=======================================\n  Hits         4290     4290         \n  Misses        250      250         \n  Partials       33       33\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cb89a9e...ffc0a43. Read the comment docs.\n. # Codecov Report\nMerging #1653 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1653   +/-\n=======================================\n  Coverage   93.81%   93.81%         \n=======================================\n  Files          78       78         \n  Lines        4573     4573         \n  Branches      801      801         \n=======================================\n  Hits         4290     4290         \n  Misses        250      250         \n  Partials       33       33\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cb89a9e...deed942. Read the comment docs.\n. # Codecov Report\nMerging #1654 into master will decrease coverage by 8.68%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1654      +/-\n==========================================\n- Coverage   93.81%   85.13%   -8.69%   \n==========================================\n  Files          78       78            \n  Lines        4573     4573            \n  Branches      801      801            \n==========================================\n- Hits         4290     3893     -397   \n- Misses        250      585     +335   \n- Partials       33       95      +62\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/underline.js | 9.09% <0%> (-90.91%) | :arrow_down: |\n| src/functions/verb.js | 12.5% <0%> (-87.5%) | :arrow_down: |\n| src/functions/overline.js | 25% <0%> (-75%) | :arrow_down: |\n| src/environments/array.js | 44.3% <0%> (-53.59%) | :arrow_down: |\n| src/functions/delimsizing.js | 65.51% <0%> (-31.04%) | :arrow_down: |\n| src/domTree.js | 64.97% <0%> (-27.69%) | :arrow_down: |\n| src/functions/phantom.js | 72.72% <0%> (-27.28%) | :arrow_down: |\n| src/functions/symbolsSpacing.js | 64.7% <0%> (-23.53%) | :arrow_down: |\n| src/tree.js | 55.55% <0%> (-22.23%) | :arrow_down: |\n| src/mathMLTree.js | 76.27% <0%> (-22.04%) | :arrow_down: |\n| ... and 18 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7bc15d4...b54a3e1. Read the comment docs.\n. # Codecov Report\nMerging #1658 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1658   +/-\n=======================================\n  Coverage   93.84%   93.84%         \n=======================================\n  Files          78       78         \n  Lines        4567     4567         \n  Branches      802      802         \n=======================================\n  Hits         4286     4286         \n  Misses        248      248         \n  Partials       33       33\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.71% <\u00f8> (?) | |\n| #test | 85.28% <\u00f8> (?) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c8f8ebd...4f5a087. Read the comment docs.\n. # Codecov Report\nMerging #1660 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1660   +/-\n=======================================\n  Coverage   93.84%   93.84%         \n=======================================\n  Files          78       78         \n  Lines        4568     4568         \n  Branches      801      801         \n=======================================\n  Hits         4287     4287         \n  Misses        248      248         \n  Partials       33       33\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 16f7943...3048b0d. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@6a06470). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #1661   +/-\n========================================\n  Coverage          ?     94%         \n========================================\n  Files             ?      78         \n  Lines             ?    4550         \n  Branches          ?     792         \n========================================\n  Hits              ?    4277         \n  Misses            ?     242         \n  Partials          ?      31\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.64% <\u00f8> (?) | |\n| #test | 85.36% <\u00f8> (?) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6a06470...a24c427. Read the comment docs.\n. # Codecov Report\nMerging #1662 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1662   +/-\n=======================================\n  Coverage   93.84%   93.84%         \n=======================================\n  Files          78       78         \n  Lines        4568     4568         \n  Branches      801      801         \n=======================================\n  Hits         4287     4287         \n  Misses        248      248         \n  Partials       33       33\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5b30208...02d2dfb. Read the comment docs.\n. # Codecov Report\nMerging #1663 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1663   +/-\n=======================================\n  Coverage   93.84%   93.84%         \n=======================================\n  Files          78       78         \n  Lines        4568     4568         \n  Branches      801      801         \n=======================================\n  Hits         4287     4287         \n  Misses        248      248         \n  Partials       33       33\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5391720...e26a84e. Read the comment docs.\n. # Codecov Report\nMerging #1665 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1665   +/-\n=======================================\n  Coverage   93.84%   93.84%         \n=======================================\n  Files          78       78         \n  Lines        4568     4568         \n  Branches      801      801         \n=======================================\n  Hits         4287     4287         \n  Misses        248      248         \n  Partials       33       33\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5585187...52a6696. Read the comment docs.\n. # Codecov Report\nMerging #1666 into master will decrease coverage by 0.28%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1666      +/-\n==========================================\n- Coverage   93.84%   93.56%   -0.29%   \n==========================================\n  Files          78       78            \n  Lines        4568     4582      +14   \n  Branches      801      807       +6   \n==========================================\n  Hits         4287     4287            \n- Misses        248      256       +8   \n- Partials       33       39       +6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| contrib/auto-render/auto-render.js | 0% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cd8e6e0...240b975. Read the comment docs.\n. # Codecov Report\nMerging #1668 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1668   +/-\n=======================================\n  Coverage   93.84%   93.84%         \n=======================================\n  Files          78       78         \n  Lines        4567     4567         \n  Branches      802      802         \n=======================================\n  Hits         4286     4286         \n  Misses        248      248         \n  Partials       33       33\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.71% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 85.28% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 49017ad...6b62049. Read the comment docs.\n. # Codecov Report\nMerging #1670 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1670   +/-\n=======================================\n  Coverage   93.84%   93.84%         \n=======================================\n  Files          78       78         \n  Lines        4568     4568         \n  Branches      801      801         \n=======================================\n  Hits         4287     4287         \n  Misses        248      248         \n  Partials       33       33\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 16f7943...e6ec746. Read the comment docs.\n. # Codecov Report\nMerging #1674 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1674   +/-\n=======================================\n  Coverage   93.67%   93.67%         \n=======================================\n  Files          80       80         \n  Lines        4666     4666         \n  Branches      813      813         \n=======================================\n  Hits         4371     4371         \n  Misses        261      261         \n  Partials       34       34\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.62% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 85.04% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cda184b...2924351. Read the comment docs.\n. # Codecov Report\nMerging #1680 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1680   +/-\n=======================================\n  Coverage   93.84%   93.84%         \n=======================================\n  Files          78       78         \n  Lines        4568     4568         \n  Branches      801      801         \n=======================================\n  Hits         4287     4287         \n  Misses        248      248         \n  Partials       33       33\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cd8e6e0...4dbf4fc. Read the comment docs.\n. # Codecov Report\nMerging #1683 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1683   +/-\n=======================================\n  Coverage   93.85%   93.85%         \n=======================================\n  Files          78       78         \n  Lines        4571     4571         \n  Branches      802      802         \n=======================================\n  Hits         4290     4290         \n  Misses        248      248         \n  Partials       33       33\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9a6f31a...62aa0d5. Read the comment docs.\n. # Codecov Report\nMerging #1684 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1684   +/-\n=======================================\n  Coverage   93.84%   93.84%         \n=======================================\n  Files          78       78         \n  Lines        4568     4568         \n  Branches      801      801         \n=======================================\n  Hits         4287     4287         \n  Misses        248      248         \n  Partials       33       33\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/domTree.js | 92.59% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cd8e6e0...9a15850. Read the comment docs.\n. # Codecov Report\nMerging #1684 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1684   +/-\n=======================================\n  Coverage   93.85%   93.85%         \n=======================================\n  Files          78       78         \n  Lines        4571     4571         \n  Branches      802      802         \n=======================================\n  Hits         4290     4290         \n  Misses        248      248         \n  Partials       33       33\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/domTree.js | 92.59% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 06cdea9...2643b7e. Read the comment docs.\n. # Codecov Report\nMerging #1687 into master will increase coverage by 5.13%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1687      +/-\n==========================================\n+ Coverage   88.72%   93.85%   +5.13%   \n==========================================\n  Files          73       78       +5   \n  Lines        4424     4571     +147   \n  Branches        0      802     +802   \n==========================================\n+ Hits         3925     4290     +365   \n+ Misses        499      248     -251   \n- Partials        0       33      +33\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/wide-character.js | 72.22% <0%> (\u00f8) | :arrow_up: |\n| src/functions/lap.js | 80.95% <0%> (\u00f8) | :arrow_up: |\n| src/functions/arrow.js | 87.87% <0%> (\u00f8) | :arrow_up: |\n| contrib/auto-render/auto-render.js | 0% <0%> (\u00f8) | |\n| contrib/mathtex-script-type/mathtex-script-type.js | 0% <0%> (\u00f8) | |\n| contrib/copy-tex/copy-tex.js | 0% <0%> (\u00f8) | |\n| contrib/auto-render/splitAtDelimiters.js | 100% <0%> (\u00f8) | |\n| contrib/copy-tex/katex2tex.js | 0% <0%> (\u00f8) | |\n| src/functions/genfrac.js | 93.25% <0%> (+1.12%) | :arrow_up: |\n| src/stretchy.js | 88.63% <0%> (+1.13%) | :arrow_up: |\n| ... and 28 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9b7e10e...27271e4. Read the comment docs.\n. # Codecov Report\nMerging #1688 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1688   +/-\n=======================================\n  Coverage   93.85%   93.85%         \n=======================================\n  Files          78       78         \n  Lines        4571     4571         \n  Branches      802      802         \n=======================================\n  Hits         4290     4290         \n  Misses        248      248         \n  Partials       33       33\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4178639...ad14d1e. Read the comment docs.\n. # Codecov Report\nMerging #1689 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1689   +/-\n=======================================\n  Coverage   93.84%   93.84%         \n=======================================\n  Files          78       78         \n  Lines        4568     4568         \n  Branches      801      801         \n=======================================\n  Hits         4287     4287         \n  Misses        248      248         \n  Partials       33       33\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 89daa02...1e220a4. Read the comment docs.\n. # Codecov Report\nMerging #1690 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1690      +/-\n==========================================\n+ Coverage   93.84%   93.85%   +<.01%   \n==========================================\n  Files          78       78            \n  Lines        4568     4571       +3   \n  Branches      801      802       +1   \n==========================================\n+ Hits         4287     4290       +3   \n  Misses        248      248            \n  Partials       33       33\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/Parser.js | 97.12% <100%> (+0.02%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d3ec100...80662d7. Read the comment docs.\n. # Codecov Report\nMerging #1691 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1691   +/-\n=======================================\n  Coverage   93.84%   93.84%         \n=======================================\n  Files          78       78         \n  Lines        4568     4568         \n  Branches      801      801         \n=======================================\n  Hits         4287     4287         \n  Misses        248      248         \n  Partials       33       33\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d3ec100...f709d76. Read the comment docs.\n. # Codecov Report\nMerging #1694 into master will increase coverage by 5.13%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1694      +/-\n==========================================\n+ Coverage   88.72%   93.85%   +5.13%   \n==========================================\n  Files          73       78       +5   \n  Lines        4424     4571     +147   \n  Branches        0      802     +802   \n==========================================\n+ Hits         3925     4290     +365   \n+ Misses        499      248     -251   \n- Partials        0       33      +33\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/wide-character.js | 72.22% <0%> (\u00f8) | :arrow_up: |\n| src/functions/lap.js | 80.95% <0%> (\u00f8) | :arrow_up: |\n| src/functions/arrow.js | 87.87% <0%> (\u00f8) | :arrow_up: |\n| contrib/auto-render/auto-render.js | 0% <0%> (\u00f8) | |\n| contrib/mathtex-script-type/mathtex-script-type.js | 0% <0%> (\u00f8) | |\n| contrib/copy-tex/copy-tex.js | 0% <0%> (\u00f8) | |\n| contrib/auto-render/splitAtDelimiters.js | 100% <0%> (\u00f8) | |\n| contrib/copy-tex/katex2tex.js | 0% <0%> (\u00f8) | |\n| src/functions/genfrac.js | 93.25% <0%> (+1.12%) | :arrow_up: |\n| src/stretchy.js | 88.63% <0%> (+1.13%) | :arrow_up: |\n| ... and 28 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 761c52f...65eeb42. Read the comment docs.\n. # Codecov Report\nMerging #1697 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1697   +/-\n=======================================\n  Coverage   93.84%   93.84%         \n=======================================\n  Files          78       78         \n  Lines        4567     4567         \n  Branches      802      802         \n=======================================\n  Hits         4286     4286         \n  Misses        248      248         \n  Partials       33       33\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.71% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 85.28% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a88310e...dd3dcd0. Read the comment docs.\n. # Codecov Report\nMerging #1698 into master will decrease coverage by 0.14%.\nThe diff coverage is 84.31%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1698      +/-\n==========================================\n- Coverage   93.88%   93.74%   -0.15%   \n==========================================\n  Files          78       79       +1   \n  Lines        4564     4617      +53   \n  Branches      802      818      +16   \n==========================================\n+ Hits         4285     4328      +43   \n- Misses        246      252       +6   \n- Partials       33       37       +4\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 87.91% <19.6%> (-0.83%) | :arrow_down: |\n| #test | 85.22% <80.39%> (-0.1%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/Options.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/buildCommon.js | 98.41% <100%> (\u00f8) | :arrow_up: |\n| src/domTree.js | 89.44% <61.11%> (-3.15%) | :arrow_down: |\n| src/functions/data.js | 95% <95%> (\u00f8) | |\n| src/functions/op.js | 96.9% <0%> (-2.03%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f71f469...ab56f5e. Read the comment docs.\n. # Codecov Report\nMerging #1700 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1700      +/-\n==========================================\n+ Coverage   93.88%   93.89%   +<.01%   \n==========================================\n  Files          78       78            \n  Lines        4564     4569       +5   \n  Branches      802      805       +3   \n==========================================\n+ Hits         4285     4290       +5   \n  Misses        246      246            \n  Partials       33       33\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.76% <100%> (+0.01%) | :arrow_up: |\n| #test | 85.24% <56.25%> (-0.08%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/wide-character.js | 72.22% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/font.js | 95.83% <\u00f8> (\u00f8) | :arrow_up: |\n| src/buildCommon.js | 98.44% <100%> (+0.03%) | :arrow_up: |\n| src/buildMathML.js | 98.73% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 68fdb52...a9fdd2a. Read the comment docs.\n. # Codecov Report\nMerging #1701 into master will increase coverage by 0.03%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1701      +/-\n==========================================\n+ Coverage   93.84%   93.88%   +0.03%   \n==========================================\n  Files          78       78            \n  Lines        4567     4564       -3   \n  Branches      802      802            \n==========================================\n- Hits         4286     4285       -1   \n+ Misses        248      246       -2   \n  Partials       33       33\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.74% <\u00f8> (+0.03%) | :arrow_up: |\n| #test | 85.31% <\u00f8> (+0.03%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/op.js | 98.93% <\u00f8> (+2.02%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7f7d063...2b6a56b. Read the comment docs.\n. # Codecov Report\nMerging #1706 into master will decrease coverage by 0.09%.\nThe diff coverage is 95.89%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1706     +/-\n=========================================\n- Coverage   94.01%   93.91%   -0.1%   \n=========================================\n  Files          78       78           \n  Lines        4558     4570     +12   \n  Branches      792      796      +4   \n=========================================\n+ Hits         4285     4292      +7   \n- Misses        242      246      +4   \n- Partials       31       32      +1\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.55% <91.78%> (-0.11%) | :arrow_down: |\n| #test | 85.29% <95.89%> (-0.1%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/delimsizing.js | 97.64% <\u00f8> (\u00f8) | :arrow_up: |\n| src/parseNode.js | 84.21% <\u00f8> (\u00f8) | :arrow_up: |\n| src/macros.js | 97.05% <\u00f8> (-0.02%) | :arrow_down: |\n| src/Parser.js | 97.2% <100%> (\u00f8) | :arrow_up: |\n| src/functions/ordgroup.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/buildHTML.js | 95.77% <95.38%> (-3.46%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5f3ab13...2f5c72b. Read the comment docs.\n. # Codecov Report\nMerging #1707 into master will increase coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1707      +/-\n==========================================\n+ Coverage   93.89%   93.95%   +0.06%   \n==========================================\n  Files          78       78            \n  Lines        4585     4584       -1   \n  Branches      811      809       -2   \n==========================================\n+ Hits         4305     4307       +2   \n+ Misses        246      245       -1   \n+ Partials       34       32       -2\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.57% <66.66%> (+0.06%) | :arrow_up: |\n| #test | 85.38% <100%> (+0.1%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/utils.js | 93.1% <\u00f8> (+7.38%) | :arrow_up: |\n| src/functions/arrow.js | 87.87% <100%> (\u00f8) | :arrow_up: |\n| src/buildCommon.js | 98.46% <100%> (+0.02%) | :arrow_up: |\n| src/functions/enclose.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/href.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/sqrt.js | 96.87% <100%> (-0.1%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3514d48...db5f669. Read the comment docs.\n. # Codecov Report\nMerging #1709 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1709   +/-\n=======================================\n  Coverage   93.88%   93.88%         \n=======================================\n  Files          78       78         \n  Lines        4564     4564         \n  Branches      802      802         \n=======================================\n  Hits         4285     4285         \n  Misses        246      246         \n  Partials       33       33\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.74% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 85.31% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f71f469...2187718. Read the comment docs.\n. # Codecov Report\nMerging #1710 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1710   +/-\n=======================================\n  Coverage   93.88%   93.88%         \n=======================================\n  Files          78       78         \n  Lines        4564     4564         \n  Branches      802      802         \n=======================================\n  Hits         4285     4285         \n  Misses        246      246         \n  Partials       33       33\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.74% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 85.31% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 91553c1...07e99c4. Read the comment docs.\n. # Codecov Report\nMerging #1711 into master will decrease coverage by <.01%.\nThe diff coverage is 95.08%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1711      +/-\n==========================================\n- Coverage   93.89%   93.89%   -0.01%   \n==========================================\n  Files          78       78            \n  Lines        4569     4585      +16   \n  Branches      805      811       +6   \n==========================================\n+ Hits         4290     4305      +15   \n  Misses        246      246            \n- Partials       33       34       +1\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.5% <32.78%> (-0.26%) | :arrow_down: |\n| #test | 85.27% <95.08%> (+0.02%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parseNode.js | 84.21% <\u00f8> (\u00f8) | :arrow_up: |\n| src/MacroExpander.js | 95.68% <100%> (\u00f8) | :arrow_up: |\n| src/Lexer.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/SourceLocation.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/Parser.js | 97.04% <94.64%> (-0.09%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ba8e224...f17b571. Read the comment docs.\n. # Codecov Report\nMerging #1721 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1721   +/-\n=======================================\n  Coverage   93.88%   93.88%         \n=======================================\n  Files          78       78         \n  Lines        4564     4564         \n  Branches      802      802         \n=======================================\n  Hits         4285     4285         \n  Misses        246      246         \n  Partials       33       33\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.74% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 85.31% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c52d3be...ce117d5. Read the comment docs.\n. # Codecov Report\nMerging #1723 into master will increase coverage by 0.03%.\nThe diff coverage is 98.61%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1723      +/-\n==========================================\n+ Coverage   93.95%   93.99%   +0.03%   \n==========================================\n  Files          78       78            \n  Lines        4584     4545      -39   \n  Branches      809      792      -17   \n==========================================\n- Hits         4307     4272      -35   \n+ Misses        245      242       -3   \n+ Partials       32       31       -1\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.63% <84.72%> (+0.05%) | :arrow_up: |\n| #test | 85.34% <97.22%> (-0.04%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/environments/array.js | 98.29% <100%> (+0.4%) | :arrow_up: |\n| src/functions/environment.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/delimsizing.js | 97.64% <100%> (+1.09%) | :arrow_up: |\n| src/Parser.js | 97.2% <98.14%> (+0.16%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 94d4338...4452e43. Read the comment docs.\n. # Codecov Report\nMerging #1729 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1729   +/-\n=======================================\n  Coverage   93.89%   93.89%         \n=======================================\n  Files          78       78         \n  Lines        4585     4585         \n  Branches      811      811         \n=======================================\n  Hits         4305     4305         \n  Misses        246      246         \n  Partials       34       34\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.5% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 85.27% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3907545...01d44c5. Read the comment docs.\n. # Codecov Report\nMerging #1733 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1733   +/-\n=======================================\n  Coverage   93.88%   93.88%         \n=======================================\n  Files          78       78         \n  Lines        4564     4564         \n  Branches      802      802         \n=======================================\n  Hits         4285     4285         \n  Misses        246      246         \n  Partials       33       33\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.74% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 85.31% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9733040...23c758b. Read the comment docs.\n. # Codecov Report\nMerging #1734 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1734   +/-\n=======================================\n  Coverage   93.88%   93.88%         \n=======================================\n  Files          78       78         \n  Lines        4564     4564         \n  Branches      802      802         \n=======================================\n  Hits         4285     4285         \n  Misses        246      246         \n  Partials       33       33\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.74% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 85.31% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0cbfaef...cf431eb. Read the comment docs.\n. # Codecov Report\nMerging #1737 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1737   +/-\n=======================================\n  Coverage   93.89%   93.89%         \n=======================================\n  Files          78       78         \n  Lines        4585     4585         \n  Branches      811      811         \n=======================================\n  Hits         4305     4305         \n  Misses        246      246         \n  Partials       34       34\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.5% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 85.27% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5e4c0be...0d47583. Read the comment docs.\n. # Codecov Report\nMerging #1739 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1739   +/-\n=======================================\n  Coverage   93.89%   93.89%         \n=======================================\n  Files          78       78         \n  Lines        4585     4585         \n  Branches      811      811         \n=======================================\n  Hits         4305     4305         \n  Misses        246      246         \n  Partials       34       34\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.5% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 85.27% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 274dfda...7748aee. Read the comment docs.\n. # Codecov Report\nMerging #1741 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1741      +/-\n==========================================\n+ Coverage   93.99%   93.99%   +<.01%   \n==========================================\n  Files          78       78            \n  Lines        4545     4547       +2   \n  Branches      792      792            \n==========================================\n+ Hits         4272     4274       +2   \n  Misses        242      242            \n  Partials       31       31\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.63% <100%> (\u00f8) | :arrow_up: |\n| #test | 85.35% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/delimsizing.js | 97.64% <\u00f8> (\u00f8) | :arrow_up: |\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/delimiter.js | 83.83% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update de961de...9effeb8. Read the comment docs.\n. # Codecov Report\nMerging #1742 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1742   +/-\n=======================================\n  Coverage   93.95%   93.95%         \n=======================================\n  Files          78       78         \n  Lines        4584     4584         \n  Branches      809      809         \n=======================================\n  Hits         4307     4307         \n  Misses        245      245         \n  Partials       32       32\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.57% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 85.38% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a51dc4b...73f912b. Read the comment docs.\n. # Codecov Report\nMerging #1743 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1743   +/-\n=======================================\n  Coverage   93.99%   93.99%         \n=======================================\n  Files          78       78         \n  Lines        4545     4545         \n  Branches      792      792         \n=======================================\n  Hits         4272     4272         \n  Misses        242      242         \n  Partials       31       31\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.63% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 85.34% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0bc31f1...c962ad8. Read the comment docs.\n. # Codecov Report\nMerging #1747 into master will decrease coverage by 0.01%.\nThe diff coverage is 90.9%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1747      +/-\n==========================================\n- Coverage      94%   93.98%   -0.02%   \n==========================================\n  Files          78       78            \n  Lines        4550     4559       +9   \n  Branches      792      794       +2   \n==========================================\n+ Hits         4277     4285       +8   \n- Misses        242      243       +1   \n  Partials       31       31\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.64% <90.9%> (\u00f8) | :arrow_up: |\n| #test | 85.19% <9.09%> (-0.17%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/domTree.js | 92.63% <100%> (+0.04%) | :arrow_up: |\n| src/utils.js | 92.1% <88.88%> (-1%) | :arrow_down: |\n| src/macros.js | 97.13% <0%> (-0.01%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 11490b5...3967649. Read the comment docs.\n. # Codecov Report\nMerging #1748 into master will decrease coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1748      +/-\n==========================================\n- Coverage      94%   93.99%   -0.01%   \n==========================================\n  Files          78       78            \n  Lines        4550     4549       -1   \n  Branches      792      792            \n==========================================\n- Hits         4277     4276       -1   \n  Misses        242      242            \n  Partials       31       31\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.64% <\u00f8> (-0.01%) | :arrow_down: |\n| #test | 85.35% <\u00f8> (-0.01%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 97.13% <0%> (-0.01%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4dd0e2c...d3a4c6f. Read the comment docs.\n. # Codecov Report\nMerging #1750 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1750      +/-\n==========================================\n+ Coverage   93.99%   93.99%   +<.01%   \n==========================================\n  Files          78       78            \n  Lines        4547     4549       +2   \n  Branches      792      792            \n==========================================\n+ Hits         4274     4276       +2   \n  Misses        242      242            \n  Partials       31       31\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.64% <100%> (\u00f8) | :arrow_up: |\n| #test | 85.35% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 97.13% <100%> (+0.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 89bb371...e8bc0bc. Read the comment docs.\n. # Codecov Report\nMerging #1751 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1751   +/-\n======================================\n  Coverage      94%     94%         \n======================================\n  Files          78      78         \n  Lines        4550    4550         \n  Branches      792     792         \n======================================\n  Hits         4277    4277         \n  Misses        242     242         \n  Partials       31      31\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.64% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 85.36% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 11490b5...cfe7568. Read the comment docs.\n. # Codecov Report\nMerging #1752 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1752      +/-\n=========================================\n+ Coverage   93.99%     94%   +<.01%   \n=========================================\n  Files          78      78            \n  Lines        4549    4550       +1   \n  Branches      792     792            \n=========================================\n+ Hits         4276    4277       +1   \n  Misses        242     242            \n  Partials       31      31\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.64% <100%> (\u00f8) | :arrow_up: |\n| #test | 85.36% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 97.14% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0b7b4db...ee7b1ab. Read the comment docs.\n. # Codecov Report\nMerging #1754 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1754   +/-\n=======================================\n  Coverage   93.91%   93.91%         \n=======================================\n  Files          78       78         \n  Lines        4570     4570         \n  Branches      796      796         \n=======================================\n  Hits         4292     4292         \n  Misses        246      246         \n  Partials       32       32\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.55% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 85.29% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bf98931...b875cd6. Read the comment docs.\n. # Codecov Report\nMerging #1757 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1757      +/-\n==========================================\n+ Coverage      94%   94.01%   +0.01%   \n==========================================\n  Files          78       78            \n  Lines        4550     4558       +8   \n  Branches      792      792            \n==========================================\n+ Hits         4277     4285       +8   \n  Misses        242      242            \n  Partials       31       31\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.66% <100%> (+0.02%) | :arrow_up: |\n| #test | 85.38% <100%> (+0.02%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 97.07% <\u00f8> (-0.07%) | :arrow_down: |\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 49f84f7...3774bdd. Read the comment docs.\n. # Codecov Report\nMerging #1759 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1759   +/-\n=======================================\n  Coverage   93.91%   93.91%         \n=======================================\n  Files          78       78         \n  Lines        4570     4570         \n  Branches      796      796         \n=======================================\n  Hits         4292     4292         \n  Misses        246      246         \n  Partials       32       32\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.55% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 85.29% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a3215b2...4985c80. Read the comment docs.\n. # Codecov Report\nMerging #1760 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1760   +/-\n=======================================\n  Coverage   93.91%   93.91%         \n=======================================\n  Files          78       78         \n  Lines        4570     4570         \n  Branches      796      796         \n=======================================\n  Hits         4292     4292         \n  Misses        246      246         \n  Partials       32       32\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.55% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 85.29% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 354b4ba...7230a4b. Read the comment docs.\n. # Codecov Report\nMerging #1761 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1761   +/-\n=======================================\n  Coverage   93.91%   93.91%         \n=======================================\n  Files          78       78         \n  Lines        4570     4570         \n  Branches      796      796         \n=======================================\n  Hits         4292     4292         \n  Misses        246      246         \n  Partials       32       32\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.55% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 85.29% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ca38cbf...47fe944. Read the comment docs.\n. # Codecov Report\nMerging #1763 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1763   +/-\n=======================================\n  Coverage   93.91%   93.91%         \n=======================================\n  Files          78       78         \n  Lines        4570     4570         \n  Branches      796      796         \n=======================================\n  Hits         4292     4292         \n  Misses        246      246         \n  Partials       32       32\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.55% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 85.29% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 78f39d1...92cbb0b. Read the comment docs.\n. # Codecov Report\nMerging #1765 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1765   +/-\n=======================================\n  Coverage   93.91%   93.91%         \n=======================================\n  Files          78       78         \n  Lines        4570     4570         \n  Branches      796      796         \n=======================================\n  Hits         4292     4292         \n  Misses        246      246         \n  Partials       32       32\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.55% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 85.29% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1d79483...e4b331b. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@cda184b). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1778   +/-\n=========================================\n  Coverage          ?   93.67%         \n=========================================\n  Files             ?       80         \n  Lines             ?     4666         \n  Branches          ?      813         \n=========================================\n  Hits              ?     4371         \n  Misses            ?      261         \n  Partials          ?       34\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.62% <\u00f8> (?) | |\n| #test | 85.04% <\u00f8> (?) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cda184b...5b8a63a. Read the comment docs.\n. \n",
    "dennisss": "@kevinbarabash I'm on Chrome 60.0.3112.113 (the latest version as of now), and the screenshot is from the currently served copy of https://khan.github.io/KaTeX/. It seems to work on Firefox, so possibly isolated to only Chrome.. ",
    "jonnydman": "Thanks!\nOn Sep 3, 2017 5:21 AM, \"Ron Kok\" notifications@github.com wrote:\n\nThere is an explanation here\nhttps://khan.github.io/KaTeX/function-support.html#color.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Khan/KaTeX/issues/838#issuecomment-326780152, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AK1izmwuxYF414rHlu6T6GHBXHlYH2Maks5seg0ygaJpZM4PLCWi\n.\n. \n",
    "ariabuckles": "thanks :D. ",
    "raoulb": "@kevinbarabash I installed the latest version of katex with npm and edited the file. I failed to run the cli.js from within the git clone on Debian sid.. [clabot:check]. @kevinbarabash Yes, running cli.js from git would help. (I'm not a JS developer and new to node, hence assumed I'm doing it the wrong way.) I see the value of this tool as a filter for static site generators that want to render math on site build time.. @kevinbarabash Thanks. For the macros, your version would not work with the 'list' property of the '-m' option. We have to write:\n-m '\\a:\\sqrt{2}' -m '\\b:\\frac{3}{5}'\nOne could however change to option parsing to split up something like:\n-m '\\a:\\sqrt{2} \\b:\\frac{3}{5}'\nwhere we need an arbitrary separator character between the individual macros.\nI prefer to write multiple '-m' and I think I'll add an option for reading a list of macros from a text file.\n. @kevinbarabash Exactly, a macro could be:\n\\index : [G : H]\nas in https://en.wikipedia.org/wiki/Index_of_a_subgroup\nThe character : was an ad-hoc choice, chosen because it often has the semantics of assignment (f.e. in dicts / hash tables). It should be pretty save as macro names can not contain special characters, see:\n\nhttp://www.tex.ac.uk/FAQ-whatmacros.html\nhttp://www.tex.ac.uk/FAQ-linmacnames.html\n\nProbably one could break it with something similar to makeatletter.. Ok, I think I'm done with adding features here.\nLet me know what needs to be done next.\nIf you want some test cases, please provide some examples.\n. I wonder what the review status of this PR is?. Running cli.js from a node installation (there called katex) works fine atm.. If I change the line 6 to:\nconst katex = require(\"./katex\");\nI get\n```\nimport ParseError from \"./src/ParseError\";\n^^^^^^\nSyntaxError: Unexpected token import\n    at createScript (vm.js:56:10)\n    at Object.runInThisContext (vm.js:97:10)\n    at Module._compile (module.js:542:28)\n    at Object.Module._extensions..js (module.js:579:10)\n    at Module.load (module.js:487:32)\n    at tryModuleLoad (module.js:446:12)\n    at Function.Module._load (module.js:438:3)\n    at Module.require (module.js:497:17)\n    at require (internal/module.js:20:19)\n    at Object. (/home/raoul/KaTeX/cli.js:6:15)\nNow afaict this is something with new ES6 things.. No, not on 8 yet:\nnodejs --version\nv6.11.3\n```. https://npmcompare.com/compare/commander,minimist,nomnom,optimist,yargs. Initially I had all that, but then the line length was larger than 84 characters, so I dropped it.\nIf we readd the information, then the description must span multiple lines.. Same as above and I agree.. I did not want to introduce a new dependency. Using a proper option parsing library will make things much easier.. Ok. Done, but not sure if this is better.. Done. Hmm: nomnom is deprecated: https://github.com/harthur/nomnom. ",
    "Lin-Buo-Ren": "@kevinbarabash \n\nI'm curious about the use cases of natural language strings outside of \\text?\n\nI'm not sure as I'm not really acquainted with LaTeX and simply using it to write math equations in Markdown documents on GitBook, never used \\text before ;). The issue can still be reproduced via the instructions atop, I guess #992 isn't enables it ATM\n  . ",
    "07pepa": "I know it is utf8 characters related... looked into sources of katex on font and there are only printable english chars maybe it is related to multy-byte-ness of non ascii chars\nPS. czech chars  like \"\u011b\u0161\u010d\u0159\u017e\u00fd\u00e1\u00ed\u00e9\u0165\u0148\u016f\u00fa\" and theri capitalizated version\"\u011a\u0160\u010c\u0158\u017d\u00dd\u00c1\u00cd\u00c9\u0164\u0147\u016e\u00da\" do not work also and  utf-8 emoji also not work \ud83d\ude2d.....only sotlution  is ( if input box is utf-8) do utf 8 filter if it thinking it is procesing ascii)\nit can look like this ( is not corect im writing in hurry) //will return nuber of bytes that  needs to be discarded)\nfunction utf8(char input)\nvar locarvar=0;\n{\nif (input>128){\nshr input; // shift right input\nfor (var i=0;i<7;i++)\n{\nif (odd(input)){\nlocalvar++;\n}\nshr input;\n}\nreturn localwar;\n}else return 0;\n }. i know that problem is same like here https://github.com/Khan/KaTeX/issues/895. ",
    "rwbarton": "It looks like #992 was merged, but without the math mode CJK support; what's the status of this?. I actually haven't used xelatex myself unfortunately--I came across the Zulip issue while investigating something related (which was fixed already in another Unicode-related KaTeX PR).\n  . > Related, I am wondering whether to add support for CJK in math mode, but rendering as text symbols.\nIt sounds like this would be useful to some people, even if actual xelatex doesn't support it (I haven't tried).. ",
    "tanjhysj0": "I have same problem,how to solve?change text content?no I don't want to do that. ",
    "kokopelli314": "I just started working on this one. It seems to be working fine now, but I need to fix a linting issue before submitting the PR (looks like eslint thinks every linbreak in the repo changed to 'CRLF'...). \nShould hopefully have a PR in tomorrow. :). I'd like to give this one a go. I can put the PR up shortly for a basic page, and add helpful information from there.. [clabot:check]. @kevinbarabash Thanks for the pointer! I updated those screenshots in the test/screenshotter/images folder and pushed that. If there's something different I should do, just let me know (first time using CircleCI and screenshot verification).. @edemaine Yup, I think 1/10,000 em would be the precision rounding with 4 decimal places.\nTo put it in perspective, if someone uses KaTeX on a billboard with em's 100 feet tall, the rounding would be to the nearest ~1/10th inch.\nIt's an interesting visual to imagine, but I'm definitely open to increasing the precision a couple orders of magnitude if that makes more sense.. It looks like calculateSize is a better (and much more efficient) place to do the rounding. I'll try making that change this evening, and run performance tests.\n@kevinbarabash With the TeX info that @edemaine found, do you think it's still beneficial to make the precision configurable?. @ylemkimon Thanks for pointing out those lines!\nIt looks like there are some DOM tree elements that don't run their styles through calculateSize, meaning they're not rounded now. In particular I've noticed vlist and strut are not rounded. Would this require a more comprehensive refactor of the buildCommon.makeVList function?. @kevinbarabash It looks like almost all of the culprits are from makeVList, but there may be some one-offs like the height calculation in stretchy.js svgSpan. \nThe more impactful thing with makeVList is that the function currently doesn't receive a group parameter, and group is required for calculateSize. So, the obvious approach would mean passing group into makeVList, which would need to be updated in ~42 places. \nLet me know what you think, I'm not familiar enough with the codebase to know if this is a good idea. :). @kevinbarabash That seems easier. I just made the change, moving the rounding function to utils.js. Does that look good?\n@ronkok Thanks for the tip! The 26,000 eslint error messages show up when I run git commit. I get around it by running dos2unix before each commit, but that has the side effect of marking nearly all files as modified. Know of a way around the commit auto-linting?\n. Thanks! I've just updated the styles and text similar to your screenshot, with #222 text color. For small screens, the equation will be smaller.\nI also made the references to JS and CSS resources absolute (prepending / to the static path), so that a 404 HTTP status can be returned along with the HTML page, while not breaking for long paths (such as katex.org/doesnt/exist/sub/path).. Quite odd, after reverting the file back to its original state, the deploy/netlify step failed. Looking through the Git blame, I'm not seeing any changes from what I previously had to the original commit, either.. Looks like it was just a formatting issue. Reverted the file. . @ylemkimon I feel your pain! Something so simple, Windows can make so complicated.. Sounds good, added your observation and link in there.. ",
    "jgamble": "How to set line ending options, from Pro Git, if you'd rather not fiddle with your editor (and because some tools 'helpfully' use the line endings of the operating system you're on).. ",
    "caiofcm": "I am a beginner user of katex (as in web dev). I am not being able to import auto-render.js using the es6 module scheme.\nIt only works if I change the line in auto-render.js (https://github.com/Khan/KaTeX/blob/master/contrib/auto-render/auto-render.js)\n-module.exports = renderMathInElement;\nto \n+export default renderMathInElement;\nAnalogously to what is done in #902 \n. I am building with webpack (3.8.1) and .babelrc with \"presets\": [ \"es2015\"] }.\nWith the original code line module.exports = renderMathInElement I get the error:\nImporting with:\nvar renderMathInElement = require('katex/contrib/auto-render/auto-render.js').renderMathInElement\nError: Uncaught TypeError: Cannot assign to read only property 'exports' of object '#<Object>'\nImporting with (es6 style):\nimport renderMathInElement from 'katex/contrib/auto-render/auto-render.js'\nerror is as above and with the warning:\n\"export 'default' (imported as 'renderMathInElement') was not found in 'katex/contrib/auto-render/auto-render.js'\n. @rrandallcainc thank you for your reply.\nI wouldn't now how to properly create this PR.\nBut, if the other files in the project uses the export default syntax, such as parseTree.js and also from the contrib folder katex2tex.js, shouldn't auto-render.js also follow it ?\n. ",
    "thiagopnobre": "Maybe the problem is because of the em used in <span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span>. I think that might be a good idea to change it to 1px or something like that.. Sorry for the delay guys. It worked. :slightly_smiling_face: . ",
    "trimbonz": "I can confirm that fraction lines do not appear in old Android webView clients up to and including API 19 (KitKat).  I can work around this by making the fraction line a bit bigger - in katex.min.js I changed the first entry of the DefaultRuleThickness array from 0.04 to 0.06.  This changes the inline style for the fraction line to 0.06em, which is apparently enough for it to show up in a WebView.  Playing with the values I found that 0.059 doesn't display but 0.5999 does, so there is a threshold there somewhere.. Both the box-shadow and SVG methods in this PR fix the issue for my old Android webView clients, that would previously not render any fraction lines up to and including API 19 (KitKat).  Previously I had to tweak the line thicknesses manually to make fraction lines appear, but they all show up without further intervention after I started using the fraclinespan branch.. ",
    "xzel23": "Is this still unresolved in 0.10.0? I get following exception:\n\nnetscape.javascript.JSException: ReferenceError: Can't find variable: renderMathInElement\n\nfor this code:\n\nrenderMathInElement(document.body);\n\nWhat is the suggested workaround to access renderMathInElement?\n. ",
    "Georg-Git": "@kevinbarabash  \ud83d\udc4d \nI have updated KaTeX version and improve integration in TinyMCE:\nhttp://fiddle.tinymce.com/ncgaab/9. ",
    "dominhhai": "Seem that _ plays as Markdown rule.\nI have to place _ with \\_ as s_t = f(U x_t + W s\\_{t-1}). ",
    "ccorn": "Thanks too, though to me it seems that the 2nd test misses an & and thus would let the unfixed version pass as well. Update: Fixed. Thanks!. Just a comment: If such things happen, wouldn't such processors also interfere with usage of _ and the like?\nOr are you referring to (Liquid) filters such as jekyll-katex-block?\nIn both cases the actual problem is that a language intended for only one parser is interpreted by a second parser. This should be addressed by preventing the wrong parser from trying to fiddle with the output from the first.\n(I currently work on a server-side KaTeX implementation that cooperates better with kramdown, so that might fix your issue. The current code works, but I consider factoring out the KaTeX-Ruby interface to a separate gem.). Hmm, when I try it with less intervening Ruby layers, it works. Sorry, that's not your bug, even though it manifests at the Javascript execution level. Have to track it down myself.. Use of the string method includes seems to be the culprit. Using the polyfill from Mozilla's documentation makes the error go away.\nFound by using Spidermonkey 1.8.5 instead of Duktape, which gives more detailed error messages: TypeError: fontFamily.includes is not a function\nI still have not figured out why a bare call to katex.renderToString succeeds however.. I'd propose to use .indexOf(...) !== -1 instead, for compatibility. Or including the polyfill.. I'd like to do that, but I am not a Javascript expert, and I am not familiar with the build system around KaTeX. I can fork the repo, do a minimal .indexOf replacement, but then I would not know how to test that change. I could launch a PR and hope that some CI kicks in and that everything turns out well, but if not, then anyone familiar with KaTeX development should better take over. Also, compatibility issues such as this one are bound to happen again, and the preferred strategy might be different from fixing the instances as they are discovered.. Hmm, there is a Makefile. Known territory. OK, I'll ssh into a server that has Node available, and then try and clone and mess around a bit.\nUpdate: Oh wow, that was easy. A git clone, a git submodule update --init --recursive, and a make seem to do what I need. Great. I'm on my way.. [clabot:check]\n. Indeed, that looks like it could have caught the issue.. Thanks @ronkok for looking into this. Yes, using \\mathrel fixes the issue.. Not a bug. The Escaping rule dictates such behavior. \\s is not a special escape, so the backslash just robs the s from any special meaning (which it hasn't). The backslash gets absorbed in the process. Thus katex.renderToString is called with the argument \"45space a\". Try \"45\\\\space a\" to get an actual backslash into the TeX math string.. OT: Looking at the scripts section around dist:zip, there might be missing a && rm -f ../katex.zip before the && zip -rq. (Imagine releases with different files or one with topdir and the other without; then the zip -rq just adds the new files without deleting the old ones.). MacOS has commands gnutar (aliased to tar) and bsdtar. Even my old Darwin 9 version of gnutar (1.29) supports --transform. In particular, --transform=s,^,katex/, seems to do the trick.. Upps, correction: The gnutar (and tar) version I gave was the MacPorts version. The built-in /usr/bin/{gnu,}tar (v1.15.1 on darwin9) does not support --transform, but newer OS versions might do; and there are always MacPorts, HomeBrew, Fink.... Easiest might be a temporary rename without cd.\nRequires nothing special and also works with zip:\n\"dist:zip\": \"(set -e; test ! -d katex; trap 'mv katex dist' EXIT; mv dist katex; tar czf katex.tar.gz katex; rm -f katex.zip; zip -rq katex.zip katex)\"\n\n. Or with a temporary copy (better if some checks on dist are done in parallel):\n(set -e; test ! -d katex; trap 'rm -rf katex' EXIT; cp -R dist katex; tar czf katex.tar.gz katex; rm -f katex.zip; zip -rq katex.zip katex)\n\nNote: set -e switches on \"exit on errors\", so you do not need && chains. The trap executes whenever the subshell exits, i.e. either at the ) or when some error occurs, or you hit Ctrl-C or whatever. The test aborts if there is a katex directory present (which presumably means another dist:zip in progress, not some earlier abort because the trap should take care of that).. As to the effects:\n Packagers will have to adapt their specfiles / Portfiles / recipes / howver they call them.\n Whoever has unpacked directly into an assets directory will have to clean up carefully and create an empty katex subdirectory before unpacking again.\n  * If he happened to have another README.md in there: It's overwritten now. That's bad.\n* Every user will be reminded of the rule not to make unwarranted assumptions about the contents of archives.. Resolved by #1665.. Hmm. It seems I cannot make this both cross-platform and as noninvasive as I'd like. Therefore I withdraw this pull request.. Note that cp -R dist katex presumes that no directory katex exists. Otherwise, the command does not fail; it produces wrong results instead. Which is why my proposal tested for that. You might want to prepend a rimraf katex && at least.. That said, beginning with an unconditional rimraf katex might violate the principle that one should only delete stuff that is known to be autogenerated. You know the build system better than I, so I won't be the judge of that.\nThinking about it, you might actually want to begin with rimraf katex katex.tar.gz katex.zip to make sure that the archives are not leftovers from an ancient successful yarn dist:zip whilst later runs have aborted early.. Besides, is the cp -R actually cross-platform enough? If not,\nmkdirp katex && tar cf - -C dist . | tar xf - -C katex\n\nmight do the trick.. I do not know rollup but it seems its output directory can be configured. What about using dist/katex for that?. The following seems to work. This configures the output directory for rollup and webpack directly. No temporary copies necessary. However, I do not really know the tools; I have just skimmed their configuration. Please take a look.\n~~~ diff\ndiff --git a/package.json b/package.json\nindex c54e8ac..5ab317d 100644\n--- a/package.json\n+++ b/package.json\n@@ -87,10 +87,10 @@\n     \"prestart\": \"node check-node-version.js && yarn check && node src/unicodeMake.js\",\n     \"start\": \"webpack-dev-server --hot --config webpack.dev.js\",\n     \"analyze\": \"webpack --config webpack.analyze.js\",\n-    \"build\": \"yarn prestart && rimraf dist/ && mkdirp dist && cp README.md dist && rollup -c && webpack\",\n+    \"build\": \"yarn prestart && rimraf dist/ && mkdirp dist/katex && cp README.md dist/katex && rollup -c && webpack\",\n     \"watch\": \"yarn build --watch\",\n     \"dist\": \"yarn test && yarn build && yarn dist:zip\",\n-    \"dist:zip\": \"cd dist && tar czf ../katex.tar.gz * && zip -rq ../katex.zip \"\n+    \"dist:zip\": \"rimraf katex.tar.gz katex.zip && cd dist && tar czf ../katex.tar.gz katex && zip -rq ../katex.zip katex\"\n   },\n   \"dependencies\": {\n     \"commander\": \"^2.16.0\"\ndiff --git a/rollup.config.js b/rollup.config.js\nindex 092c3c4..3fd7708 100644\n--- a/rollup.config.js\n+++ b/rollup.config.js\n@@ -5,7 +5,7 @@ process.env.BABEL_ENV = 'esm';\n export default {\n     input: 'katex.js',\n     output: {\n-        file: 'dist/katex.mjs',\n+        file: 'dist/katex/katex.mjs',\n         format: 'es',\n     },\n     plugins: [\ndiff --git a/webpack.common.js b/webpack.common.js\nindex 3815bc6..42c0e88 100644\n--- a/webpack.common.js\n+++ b/webpack.common.js\n@@ -70,7 +70,7 @@ function createConfig(target /: Target /, dev /: boolean /,\n             // Enable output modules to be used in browser or Node.\n             // See: https://github.com/webpack/webpack/issues/6522\n             globalObject: \"(typeof self !== 'undefined' ? self : this)\",\n-            path: path.resolve(__dirname, 'dist'),\n+            path: path.resolve(__dirname, 'dist/katex'),\n             publicPath: dev ? '/' : '',\n         },\n         module: {\n~~~. @edemaine: Sorry, I have noticed your answer too late. Well then. The direct way is not an option then.. Out of curiosity, since yarn test passes with the above diff: What would* it actually break?. Ah I see, the node_modules/katex/dist/katex.js shall be preserved. Then copying dist to katex seems to be the right approach after all.. Please do not wait for a pull request from me. In most KaTeX matters, I feel like a bull in a china shop. You would have to review it anyway, and it's probably easier for you to write the line yourself.. Deliberately not adding /katex/ to .gitignore because if katex/ shows up in git status output, that indicates that the latest yarn dist:zip attempt has not completed successfully, which I consider useful information. (Remember that katex/ gets removed in case of success.). The above commit line uses the exact script proposal by @ylemkinon.\nIn the context of the considerations here, that seems appropriate to me.\nThe essential assertions about the original proposal also hold here:\nThe commit makes yarn dist produce katex.tar.gz and katex.zip, each containing a single (filled) folder katex. All five test suites invoked by yarn test pass.\nI had to use yarn upgrade and my yarn.lock differs, but I have not included those changes because I think those are platform-specific.. Rebased (and retested with yarn dist which includes yarn test).. There are a lot of such threads on TeX.SE (which I'd recommend for such questions). Basically, use the {aligned} environment, and if you want to align at =, write &=. Every & in a row begins a new column and switches from right-alignment to left-alignment or vice versa.. Shells, Perl, and Ruby allow almost no escapes and no interpolation in single-quoted strings. (In contrast to e.g. Python and JavaScript which treat single and double-quotes similarly.). ",
    "nmanumr": "Just found another way. ",
    "arshucks": "Thanks for taking a look.\nI am using this in a Meteor (+Blaze as frontend) project - so I'll post the relevant sections, and hopefully that provides some clarity; not sure if it is easily extricatable from the project. I was using mathjax & it was working (but really slow) so I'm fairly sure the text syntax is not the issue.\nThese are literally the only changes I made to my project: (In the below, myValidLatexSyntaxText shows up,  but as the literal text (unformatted).)\nHere goes:\nMy HTML template contains:\n<div data-katex='true'><span>{{{ myValidLatexSyntaxText }}}</span></div>\nThen in the js file for that template:\nimport './myTemplate.html';\nTemplate.myTemplate.onRendered(function(){\n    console.log(this.$(\"[data-katex='true']\")); \n    renderMathInElement(this.$(\"[data-katex='true']\"));\n});\nLastly, my head.html file contains: \n<!-- KATEX -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0-alpha1/katex.min.css\" integrity=\"sha384-8QOKbPtTFvh/lMY0qPVbXj9hDh+v8US0pD//FcoYFst2lCIf0BmT58+Heqj0IGyx\" crossorigin=\"anonymous\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0-alpha1/katex.min.js\" integrity=\"sha384-GR8SEkOO1rBN/jnOcQDFcFmwXAevSLx7/Io9Ps1rkxWp983ZIuUGfxivlF/5f5eJ\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0-alpha1/contrib/auto-render.min.js\" integrity=\"sha384-cXpztMJlr2xFXyDSIfRWYSMVCXZ9HeGXvzyKTYrn03rsMAlOtIQVzjty5ULbaP8L\" crossorigin=\"anonymous\"></script>\n<!-- END KATEX -->\n. Actually I got Katex to start rendering some things... turns out \nthis.$(\"[data-katex='true']\")\nreturns  an array, of which the [0] element is the actual html node the renderMathInElement function needs.. @edemaine  Thanks for the tip! I'll refactor to do it that way.\nInteresting project btw; Have been looking at adding editor collaboration functionality in my project & will be looking at it further.... Thanks for the quick reply.\nI am using chrome, but have tested in IE (edge) + Firefox as well, same issue.\nI am pulling the npm package directly from here https://www.npmjs.com/package/katex and updated it today, so I believe it is using v0.9.0-beta (though this issue was present 3-4 months ago as well).\nNote: I am using the autorender functionality (In my case, I'm using Meteor, so I had to take the full auto-render.js and copy it into my app), not sure if that would affect the formatting though.\n. @ronkok  Nope, just a standard html (with some css applied of course - hence the green background in one of the pictures). @ronkok hmm...Its not deployed (and won't be until fixed) into our prod site + behind a log in page.\nIs there a messaging function on github I'm missing or some way to reach you directly? I could try to screenshare code or send you a log in on a dev site. @ronkok  Gotcha. Ok, happy to wait and see on that.\nNot a show stopper, but would be great to have it resolved.\nI will look into the SVG hypothesis in the meantime. Btw, behavior is also weirdly inconsistent  - I haven't changed anything on this page (although I did activate MathJax on another HTML template - this is a \"SPA\" Meteor web app, I'm assuming that's what caused it), and that causes Katex to go haywire:\nhttps://imgur.com/a/QpbOl. @ylemkimon  thanks for the heads up. Will give it a shot later this week (due to other reqs). Still getting the same double-bar issue with 0.9.0-beta1\n\nNot sure if this and the earlier image I posted (https://imgur.com/a/QpbOl)  is related with the haywire fraction layout when mathjax is activated (on another part of the app). ",
    "lastmjs": "Actually, this might be my own issue with the way I've set things up. I'll reopen if it is potentially a problem with KaTex.. ",
    "adammaj1": "thx.\nI have found that  \"Gitlab ships with KaTeX starting from v8.15 \". \nMaye it is a gitlab not KaTex problem so I have also asked on the gitlab\n. Is KaTex using version number ? I have found only 4fb9445a9 or 2015. How do you check it?. ",
    "muzimuzhi": "Here is a more detailed doc about \"custom environments\". See Sec. 12.6 of LaTeX2e: An unofficial reference manual. ",
    "Reikim": "I already checked that fonts are being loaded correctly over the network (as noted in the original issue). Is there something else I should be checking for? This is being dumped straight into a div.. I also explained that I know it works correctly in the demo page and in one of my own demos. I know it's likely an issue with the way I'm using it; I just have no idea where to look, and I don't know why it works fine using one method but not the other.. I noted that it's fine if I use katex.render against an element that already exists on the page. Either way, it feels a bit uncharitable that you'd assume I wasn't smart enough to check the demo page first...I'll get working on ripping out the relevant code into a demo.. Appears to be. Here's a fiddle demonstrating.. One thing I did notice was that, just staring at the generated markup, I can't see any way of distinguishing whether the 2 is a subscript or superscript...and that, when rendering into an existing element, there's some inline style positioning that gets added. Maybe that's the issue?. Ah, damn, you're right. I didn't think to check the markup before it get run through binding...logging confirms that the styles are present when it gets spit out of renderToString.\nThanks for your patience!. ",
    "rah4927": "@kevinbarabash @edemaine sorry for the late response. No I didn't modify the code in any way. I just typed it on the text editor in expii.com and this was the result. . @edemaine https://www.expii.com/t/lines-and-slopes-400\nHere's a link. If you got to the bottom of the page and change the language to Bangla (it's the second one from the top, right under English), you'll find an article that's written in Bangla. Just underneath the picture, you should be able to see some unicode errors inside latex (in the numerator and denominator of a fraction). You can try clicking edit to try it out yourself.(though I'm not sure if you need to sign up). . ",
    "HarrisonB": "Gotcha. I was incorrect to assume that katex/contrib/auto-render was import/require-able. Thanks for clarifying @edemaine.\nI am able to import 'katex' just fine, @rrandallcainc. Thank you for asking :)\nI'm a bit of a JS package novice, but it doesn't that katex/contrib/auto-render is too far from being importable (though I imagine maintaining compatibility as a constraint complicates this). I'm going to change the title to reflect this, but I should point out that changing the import into a require in contrib/auto-render/auto-render.js will still be necessary for Webpack >= 2.2.0 compatibility.\nThank you both for your work on this terrific package. Happy holidays \ud83c\udf81 \u2728 . ",
    "schober-ch": "I'm facing the same issue - I'm trying to include katex with auto-render into a project using webpack(2) to bundle all files.\nUnfortunately I'm no webpack-guru and can't see how #1068 might help to solve this. I tried to add katex_auto_js: './node_modules/katex/contrib/auto-render/auto-render.js', to my entry-block, but this will result in the same error (Uncaught TypeError: Cannot assign to read only property 'exports' of object '#<Object>')\nThe webpack.common.js creates separate webpack configs for each target (I guess for publishing/bundling of katex itself), but that's different from using katex via webpack in a project - at least I think. \nAny ideas how to solve this? Or are we doing it the wrong way? Currently the only working solution I see is to include at least the auto-render via a ",
    "Syndesi": "Hi,\nif I get it right, the width and length of supported characters are currently hardcoded and therefore unknown characters won't get rendered or break the formula.\nWouldn't it be better when the major characters are hardcoded (to improve the performance) and all other strings are put into an invisible paragraph which is then tested for its width & height? With this solution it should be possible to use every language and even those whose width depends on their context (e.g. Arabic).. I struggled with automatic delimiter sizing. Until today I thought that just \\left( and \\right) are working, only the example of \\left\\langle n \\atop k \\right\\rangle could convince me.\nBut compared to Latex and it's derivates, Katex' documentation is easily to find, read and understand. Therefore it's already very usefull.. @kevinbarabash oh I see. I actually can't say something about the documentation inside the source code because I haven't worked with it (yet), but when I catch something I will definetly list it here.. I found even more symbols which are throwing error messages:\n\\textbar\n\\textbardbl\n\\textbraceleft\n\\textbraceright\n\\textdagger\n\\textdaggerdbl\n\\textdollar\n\\textellipsis\n\\textemdash\n\\textendash\n\\textgreater\n\\textless\n\\textquotedblleft\n\\textquotedblright\n\\textquoteleft\n\\textquoteright\n\\textsterling\n\\textunderscore\nBtw., the software does not support \u20ac ^^. @kevinbarabash I think I know what to change so that these symbols are working - but when I'm testing this software with npm 5.6.0, freshly installed modules & the command npm run start I get this result:\n\nError Messages:\n```js\nError: Cannot find module \"./fonts/KaTeX_AMS-Regular.woff2\"\nkatex.less:7:67\nReferenceError: katex is not defined\n[More Informations]\nmain.js:70:1\n[WDS] Errors while compiling. Reload prevented.\nclient:154\n(undefined) ./node_modules/css-loader?{\"minimize\":false}!./node_modules/less-loader/dist/cjs.js!./static/katex.less\nModule not found: Error: Can't resolve './fonts/KaTeX_AMS-Regular.ttf' in 'C:\\xampp\\htdocs\\KaTeX\\static'\n @ ./node_modules/css-loader?{\"minimize\":false}!./node_modules/less-loader/dist/cjs.js!./static/katex.less 7:251-291\n @ ./static/katex.less\n @ ./katex.webpack.js\n @ multi (webpack)-dev-server/client?http://localhost:7936 ./katex.webpack.js\n...\n(undefined) ./node_modules/css-loader?{\"minimize\":false}!./node_modules/less-loader/dist/cjs.js!./static/katex.less\nModule not found: Error: Can't resolve './fonts/KaTeX_Typewriter-Regular.woff2' in 'C:\\xampp\\htdocs\\KaTeX\\static'\n @ ./node_modules/css-loader?{\"minimize\":false}!./node_modules/less-loader/dist/cjs.js!./static/katex.less 7:5384-5433\n @ ./static/katex.less\n @ ./katex.webpack.js\n @ multi (webpack)-dev-server/client?http://localhost:7936 ./katex.webpack.js\n```\nI'm actually not sure if this is another bug or just using it the wrong way, I would suspect the latter. But either way, without seeing the rendered math I can't test/update this software :/. Thank you, but after I ran these I still got these. This time they are in a seperate file (full error log, 343 lines).\nerror_log.txt\nBut to get at least something done I would work on the actual fix and upload it - maybe you/github could test it :/. Thank you, I created the pull request #1105 .\nIt doesn't add math-support for the /text...-symbols because I think text should indicate that this symol should be used only inside \\text{} - therefore the error was on my side.\nBut I added support for \u20ac, \u00a5, \u20b9 and \u20bd.. Ok thank you.. [clabot:check]. ",
    "Jenyay": "No, the arrow is not displayed at all. . @kevinbarabash The page created by the program looks fine in Chrome and Firefox, but in embedded WebKit there is such a problem. . @kevinbarabash Yes, I load KaTeX in embedded WebKit. I use wxPython 3.0.2 which uses WebKitGTK+ inside.\nHere HTML code \n\n. @edemaine\n\n. With 0.9.0 beta \\vec works fine. Thanks :+1: \n\n. I mentioned that the problem with \\frac was observed before version 0.9.0-alpha2. In version 0.9.0-alpha2 \\frac already worked well.. @ronkok yes, i replaced KaTeX entirely.. Yes, this line exists.. Most likely, I will not be able to do this, because WebKitGTK+ does not have a tool like Dev Tools. I can add some JavaScript code to the page to check something out.. @kevinbarabash Thank you, it is very interesting. Unfortunately, I use the old version of WebKit, but I'll try to think of something.. I used JavaScript code (https://stackoverflow.com/questions/9430659/how-to-get-all-the-applied-styles-of-an-element-by-just-giving-its-id) to extract styles for a frac-line. \nResult is:\nbackground-attachment:scroll\nbackground-clip:border-box\nbackground-color:rgba(0, 0, 0, 0)\nbackground-image:none\nbackground-origin:padding-box\nbackground-position:0% 0%\nbackground-repeat:repeat\nbackground-size:auto\nborder-bottom-color:rgb(0, 0, 0)\nborder-bottom-left-radius:0px\nborder-bottom-right-radius:0px\nborder-bottom-style:solid\nborder-bottom-width:0px\nborder-collapse:separate\nborder-image-outset:0px\nborder-image-repeat:stretch\nborder-image-slice:100%\nborder-image-source:none\nborder-image-width:1\nborder-left-color:rgb(0, 0, 0)\nborder-left-style:none\nborder-left-width:0px\nborder-right-color:rgb(0, 0, 0)\nborder-right-style:none\nborder-right-width:0px\nborder-top-color:rgb(0, 0, 0)\nborder-top-left-radius:0px\nborder-top-right-radius:0px\nborder-top-style:none\nborder-top-width:0px\nbottom:auto\nbox-shadow:none\nbox-sizing:content-box\ncaption-side:top\nclear:none\nclip:auto\ncolor:rgb(0, 0, 0)\ncursor:auto\ndirection:ltr\ndisplay:inline-block\nempty-cells:show\nfloat:none\nfont-family:KaTeX_Main, 'Times New Roman', serif\nfont-size:24px\nfont-style:normal\nfont-variant:normal\nfont-weight:normal\nheight:1px\nimage-rendering:auto\nleft:auto\nletter-spacing:normal\nline-height:29px\nlist-style-image:none\nlist-style-position:outside\nlist-style-type:disc\nmargin-bottom:0px\nmargin-left:0px\nmargin-right:0px\nmargin-top:0px\nmax-height:none\nmax-width:none\nmin-height:1px\nmin-width:0px\nopacity:1\norphans:auto\noutline-color:rgb(0, 0, 0)\noutline-offset:0px\noutline-style:none\noutline-width:0px\noverflow-wrap:normal\noverflow-x:visible\noverflow-y:visible\npadding-bottom:0px\npadding-left:0px\npadding-right:0px\npadding-top:0px\npage-break-after:auto\npage-break-before:auto\npage-break-inside:auto\npointer-events:auto\nposition:static\nresize:none\nright:auto\nspeak:normal\ntable-layout:auto\ntab-size:8\ntext-align:center\ntext-decoration:none\n-webkit-text-decoration-line:none\n-webkit-text-decoration-style:solid\n-webkit-text-decoration-color:rgb(0, 0, 0)\n-webkit-text-decoration-skip:ink\n-webkit-text-underline-position:auto\ntext-indent:0px\ntext-rendering:auto\ntext-shadow:none\ntext-overflow:clip\ntext-transform:none\ntop:auto\ntransition-delay:0s\ntransition-duration:0s\ntransition-property:all\ntransition-timing-function:ease\nunicode-bidi:normal\nvertical-align:baseline\nvisibility:visible\nwhite-space:nowrap\nwidows:auto\nwidth:36px\nword-break:normal\nword-spacing:0px\nword-wrap:normal\nz-index:auto\nzoom:1\n-webkit-alt:''\n-webkit-animation-delay:0s\n-webkit-animation-direction:normal\n-webkit-animation-duration:0s\n-webkit-animation-fill-mode:none\n-webkit-animation-iteration-count:1\n-webkit-animation-name:none\n-webkit-animation-play-state:running\n-webkit-animation-timing-function:ease\n-webkit-appearance:none\n-webkit-backface-visibility:visible\n-webkit-background-blend-mode:normal\n-webkit-background-clip:border-box\n-webkit-background-composite:source-over\n-webkit-background-origin:padding-box\n-webkit-background-size:auto\n-webkit-border-fit:border\n-webkit-border-horizontal-spacing:0px\n-webkit-border-image:none\n-webkit-border-vertical-spacing:0px\n-webkit-box-align:stretch\n-webkit-box-decoration-break:slice\n-webkit-box-direction:normal\n-webkit-box-flex:0\n-webkit-box-flex-group:1\n-webkit-box-lines:single\n-webkit-box-ordinal-group:1\n-webkit-box-orient:horizontal\n-webkit-box-pack:start\n-webkit-box-reflect:none\n-webkit-box-shadow:none\n-webkit-clip-path:none\n-webkit-color-correction:default\n-webkit-column-break-after:auto\n-webkit-column-break-before:auto\n-webkit-column-break-inside:auto\n-webkit-column-axis:auto\n-webkit-column-count:auto\n-webkit-column-gap:normal\n-webkit-column-progression:normal\n-webkit-column-rule-color:rgb(0, 0, 0)\n-webkit-column-rule-style:none\n-webkit-column-rule-width:0px\n-webkit-column-span:none\n-webkit-column-width:auto\n-webkit-filter:none\n-webkit-align-content:stretch\n-webkit-align-items:stretch\n-webkit-align-self:stretch\n-webkit-flex-basis:auto\n-webkit-flex-grow:0\n-webkit-flex-shrink:1\n-webkit-flex-direction:row\n-webkit-flex-wrap:nowrap\n-webkit-justify-content:flex-start\n-webkit-font-kerning:auto\n-webkit-font-smoothing:auto\n-webkit-font-variant-ligatures:normal\n-webkit-grid-auto-columns:auto\n-webkit-grid-auto-flow:none\n-webkit-grid-auto-rows:auto\n-webkit-grid-column-end:auto\n-webkit-grid-column-start:auto\n-webkit-grid-definition-columns:none\n-webkit-grid-definition-rows:none\n-webkit-grid-row-end:auto\n-webkit-grid-row-start:auto\n-webkit-highlight:none\n-webkit-hyphenate-character:auto\n-webkit-hyphenate-limit-after:auto\n-webkit-hyphenate-limit-before:auto\n-webkit-hyphenate-limit-lines:no-limit\n-webkit-hyphens:manual\n-webkit-line-align:none\n-webkit-line-box-contain:block inline replaced\n-webkit-line-break:auto\n-webkit-line-clamp:none\n-webkit-line-grid:none\n-webkit-line-snap:none\n-webkit-locale:auto\n-webkit-margin-before-collapse:collapse\n-webkit-margin-after-collapse:collapse\n-webkit-marquee-direction:auto\n-webkit-marquee-increment:6px\n-webkit-marquee-repetition:infinite\n-webkit-marquee-style:scroll\n-webkit-mask-box-image:none\n-webkit-mask-box-image-outset:0px\n-webkit-mask-box-image-repeat:stretch\n-webkit-mask-box-image-slice:0 fill\n-webkit-mask-box-image-source:none\n-webkit-mask-box-image-width:auto\n-webkit-mask-clip:border-box\n-webkit-mask-composite:source-over\n-webkit-mask-image:none\n-webkit-mask-origin:border-box\n-webkit-mask-position:0% 0%\n-webkit-mask-repeat:repeat\n-webkit-mask-size:auto\n-webkit-mask-source-type:alpha\n-webkit-nbsp-mode:normal\n-webkit-order:0\n-webkit-perspective:none\n-webkit-perspective-origin:18px 0.5px\n-webkit-print-color-adjust:economy\n-webkit-rtl-ordering:logical\n-webkit-tap-highlight-color:rgba(0, 0, 0, 0.4)\n-webkit-text-combine:none\n-webkit-text-decorations-in-effect:none\n-webkit-text-emphasis-color:rgb(0, 0, 0)\n-webkit-text-emphasis-position:over right\n-webkit-text-emphasis-style:none\n-webkit-text-fill-color:rgb(0, 0, 0)\n-webkit-text-orientation:vertical-right\n-webkit-text-security:none\n-webkit-text-stroke-color:rgb(0, 0, 0)\n-webkit-text-stroke-width:0px\n-webkit-transform:none\n-webkit-transform-origin:18px 0.5px\n-webkit-transform-style:flat\n-webkit-transition-delay:0s\n-webkit-transition-duration:0s\n-webkit-transition-property:all\n-webkit-transition-timing-function:ease\n-webkit-user-drag:auto\n-webkit-user-modify:read-only\n-webkit-user-select:text\n-webkit-writing-mode:horizontal-tb\n-webkit-flow-into:none\n-webkit-flow-from:none\n-webkit-region-break-after:auto\n-webkit-region-break-before:auto\n-webkit-region-break-inside:auto\n-webkit-region-fragment:auto\nbuffered-rendering:auto\nclip-path:none\nclip-rule:nonzero\nmask:none\nfilter:none\nflood-color:rgb(0, 0, 0)\nflood-opacity:1\nlighting-color:rgb(255, 255, 255)\nstop-color:rgb(0, 0, 0)\nstop-opacity:1\ncolor-interpolation:srgb\ncolor-interpolation-filters:linearrgb\ncolor-rendering:auto\nfill:#000000\nfill-opacity:1\nfill-rule:nonzero\nmarker-end:none\nmarker-mid:none\nmarker-start:none\nmask-type:luminance\nshape-rendering:auto\nstroke:none\nstroke-dasharray:none\nstroke-dashoffset:0\nstroke-linecap:butt\nstroke-linejoin:miter\nstroke-miterlimit:4\nstroke-opacity:1\nstroke-width:1\nalignment-baseline:auto\nbaseline-shift:baseline\ndominant-baseline:auto\nkerning:0\ntext-anchor:start\nwriting-mode:lr-tb\nglyph-orientation-horizontal:0deg\nglyph-orientation-vertical:auto\n-webkit-svg-shadow:none\nvector-effect:none. The \\frac-line appears after setting \"border-width\" style to \"1px\".. I added CSS style \"border-bottom-width: 1px;\" and \\frac-line appeared also.. With border-bottom-width >= 0.05em \\frac-line also visible.. The macros parameter is solution for me... almost. The visibility of the \\frac-line depends on the scale of the equation. Above, I experimented with a larger font. With normal font border-bottom-width must be >= 0.07em. . I modified the macros:\nmacros: {'\\\\frac': '{#1 \\\\above{max(1px, 0.04em)} #2}'}\nIt works fine for me. Are there any other elements that may have similar problems?. Unfortunately, min () function does not work and always returns 1px. I will try to use JavaScript code to search for \\frac-line with border-bottom-width=0 and replace it with border-bottom-width=1px.. I added the following code to the page to get around the problem\n```\nfunction fix_frac_line()\n{\n    var win = window;\n    var frac_lines = document.getElementsByClassName(\"frac-line\");\n    for (var i = 0; i < frac_lines.length; i++) {\n        var frac = frac_lines[i];\n        if (win.getComputedStyle) {\n            style = win.getComputedStyle(frac, '');\n            if (style['border-bottom-width'] == '0px') {\n                frac.style['border-bottom-width'] = '1px';\n            }\n        }\n    }\n};\nfix_frac_line();\n```. ",
    "nyiuang": "@edemaine  the formulas has already exist in database, should I use RegExp to covert align to aligned? Im worry that if there are some other incompatible formulas grammar between latex and katex. thanks\uff0cand one more question: in #604 I see the solution to \"align\",and are there some other risk of  incompatible formulas grammar between latex and katex ?. sqrt line missing:\n20px: \n\n21px: \n\n22px:\n\nexamples: \\because a-b=\\sqrt{2}-1\nI find that when the formula's top has some other elements, it may appear this problem, but when the formulas in one line, it doesn't.\n. ",
    "aaumar": "here it is\n[%\\begin{array}/Cr_2O_7^{-2}+14H^++6e&\\rightarrow 2Cr^{3+}+7H_2O &\\,|\\times 1\\\\\\ \\underline{AsO_3^{3-}+H_2O &\\rightarrow AsO_4^{3-}+2H^++2e} &\\, |\\times 3 \\\\\\  Cr_2O_7^{-2}+3AsO_3^{3-}+8H^+&\\rightarrow 2Cr^{3+}+3AsO_4^{3-}+4H_2O\\end{array}%]\n. ",
    "matteoipri": "Hi all,\nusing the latest  version from CDN, I found that the boldsymbol (great and appreciated feature) renders capital Greek letters in italic, while LaTeX does not.\nLaTeX code:\n```\n$a, b, c, x, y, \\alpha, A, \\beta, B, \\gamma, \\Gamma, \\sigma, \\Sigma, \\sum$\n$\\boldsymbol{a}, \\boldsymbol{b}, \\boldsymbol{c}, \\boldsymbol{x}, \\boldsymbol{y}, \\boldsymbol{\\alpha}, \\boldsymbol{A}, \\boldsymbol{\\beta}, \\boldsymbol{B}, \\boldsymbol{\\gamma}, \\boldsymbol{\\Gamma}, \\boldsymbol{\\sigma}, \\boldsymbol{\\Sigma}, \\boldsymbol{\\sum}$.\n```\nPDF output:\n\nKaTeX output (using Chromium on Arch Linux):\n\nMathJax output (v 2.7.1 from CDN on Chromium on Arch Linux) for comparison:\n\nNote that MathJax renders all capital Greek letters, both normal and bold, as italic, which is wrong, but consistent.\nWould it be possible to make KaTeX behave like LaTeX for capital Greek letters? It seems that this is the last missing bit, since it works as expected for other letters and operators (like \\sum).\nThank you very much for your attention and all the work put in KaTeX.\n. ",
    "pazz": "exactly what I was missing. Thanks a lot for your quick response!. ",
    "santos22": "HI @kevinbarabash! Which file would you like to show the size of?. ",
    "daniellimws": "According to badge-size, the file needs to be in the repository. However, I can't seem to find it. Is it in the repository?\nNot sure if requiring maintainers to update it upon every commit is a good idea. . The closest I could find is \n\nwhich gives the size of the minified and gzipped npm bundle.. Ok so we'll need to remember to be updating the size badge after every release.. Oh cool I'll make a PR for this some time tomorrow, while updating the release script.. But I see something like this being committed in the release script. Or was it done manually?. I think there's one that checks the npm package.\n![npm bundle size (minified + gzip)](https://img.shields.io/bundlephobia/minzip/katex.svg)\n. Should I change it back to badgesize.io?. I think we can use the one from shields.io\n. ",
    "janosh": "Any update on this?. ",
    "reece8765": "Ah, I may be on the wrong page then, I'll go elsewhere, please ignore this issue. ",
    "keithpjolley": "Yes, that would do it. Everything but that little bit was \"cut and paste\" to get to work.\nThank you!. ",
    "nickkolok": "It helped, thanks!. @edemaine, thanks, my version is really old (0.7.1).. @kevinbarabash Can I do something to fastenate integration of this PR into 0.8.x ? I need browserify-compatible version of katex in production, and I'd definitely prefer 0.8.x to 0.7.x.. @kevinbarabash I've backported this patch on v0.8.3 (patch + version bump to v0.8.4): https://github.com/nickkolok/KaTeX/tree/browserify-hotfix-0.8.4\nHope this helps.. ",
    "samuelpmish": "Very cool, thanks for the info!. ",
    "ysawa": "[clabot:check]. @kevinbarabash Those symbols may be LaTeX fonts \n ( https://tex.stackexchange.com/questions/255127/why-is-the-copyright-symbol-in-helvet-asymmetric ) . Actually, they are not in KaTeX fonts, and I think it's better to use those text as normal HTML. Thank you.. ",
    "DominikRocek": "Hi,\nthank you for the answers. I used \\textsf{\u00c5}.\nWhen I use: \\text{\u00c5} .. Result is:\n\nWhen I use: \\textsf{\u00c5} .. Result is:\n\nWhen I use: \u00c5 .. Result is:\n\nWhen I use: \\mathsf{\u00c5} .. Result is:\n\nMy problem solved \\mathsf{\u00c5}. I use a KaTeX on Android.\n. ",
    "dvergeylen": "Hi,\nMay I ask why this PR has been closed? Had it been included in other commits of some kind?\nI would be very interested by adding custom classes.\n1108 and #1154 are both closed by now, is there anything else/reason blocking this PR?. Hi @ylemkimon ,\nAs #1706 and #1711 are both merged by now, do you see anything blocking this?\nIs #1771 blocking this or could a (disabled by default) option (e.g: {allowClass: false, allowId: false} ) be reasonable security setting?\nI am currently needing this feature for a WYSIWYG editor, would be glad to give a hand!. ",
    "leungbk": "With the current version of KaTeX, \\operatorname{x\\pi\\frac{1}{2}} throws no errors for me besides the \"no character metrics\" error.\nI noticed that \\operatorname{\\sum} doesn't work right now, though it is valid LaTeX. Setting acceptUnicodeChar = true for \\sum in its defineSymbol() invocation at line 654 of symbols.js, and enforcing math mode (solely to accommodate \\sum in this test case) in the htmlBuilder of operatorname.js allows \\operatorname{\\sum} to render. What is the reason for not setting acceptUnicodeChar = true by default?. [clabot:check]. I'll try to figure out the decrease in code coverage.\nEDIT: It seems like pasting in the previous version of the file, without my changes, and running yarn test:jest:coverage results in a change to the coverage of only contrib/auto-render: src, src/environments, and src/functions remain at 89.97%, 44.3% and 88.21% respectively; and contrib/copy-tex and contrib/mathtex-script-type are at 0% in either case. Should I need to do anything specifically to placate codecov, or is this how it's supposed to work?. It seems that even if I checkout the master branch, running yarn test:jest:coverage locally still gives only about 85% coverage. The codecov bot on GitHub seemed to report 93% (after reporting about 85% yesterday) after I merged earlier, and continues to report 93%. I'm not sure why codecov is still reporting 85% on my computer, and why the codecov bot reported 85% yesterday and 93% today.. @kevinbarabash What sorts of additional properties did you have in mind? I don't mind adding more; the reason the list is so sparse is that I simply used ripgrep to search for properties that are presently used on the objects of type CssStyle.. I felt it was more intuitive to specify only .ignoredTags (.shouldRender) and have everything not classified as such implicitly satisfy .shouldRender (.ignoredTags).. Would you provide an example of what you have in mind? The way I see it, if a user specifies both optionsCopy.ignoredTags = [\"script\", \"noscript\", \"style\", \"textarea\", \"pre\", \"code\"] and optionsCopy.shouldRender = [\"foo\", \"bar\"], I wouldn't know what to do with a <baz> tag, whereas providing only one of the two properties would make it clearer.. I amended the commit to include // Optional settings for styling. on the line above this snippet (included in the current submission, though you'll have to view the rest of the file to confirm)---does that suffice?. OK, I've added your recommendation to the line just below this snippet.. ",
    "mossadal": "This is on a Macbook Pro with retina display.. Oh, it looks like something on my side. On a blank page with just the KaTeX js and css loaded, everything looks perfect. Trying to isolate where the conflict is.. Very sorry, this was all my mistake. I accidently loaded the 0.90.alpha2 css in one place instead of the 0.90-beta css. Everything looks great now. . ",
    "ribrdb": "I just noticed that currency symbols are not allowed inside \\text{}. Is this the appropriate bug or should I file a new one?. ",
    "soichih": "I am seeing a related but an opposite issue. It looks like the horizontal bars are not displayed in sqrt/frac.\nLike.. I have following syntax.\n```\nc =\\sqrt{2}\nc = \\frac{1}{2}\n```\nwhich is displayed as \n\nIf I downgrade to Katex 0.8.3, I see horizontal line for \\frac (double-lined) but not \\sqrt.. @kevinbarabash I am using Ubuntu16 / Chrome. I am seeing the same issue with Firefox also.\nI've added the text Katex syntax here\n\nhttps://brainlife.io/pub/5a539560b1fd8000452bda45\n. @ylemkimon I am using vue-markdown which uses markdown-it-katex which currently uses katex 0.6.0\nhttps://github.com/waylonflinn/markdown-it-katex/blob/master/package.json#L25\n\nI believe I should ask the maintainer of markdown-it-katex to upgrade to the 0.9.. ",
    "TyOverby": "@ronkok: I'm using the versions recommended on the readme:\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0-beta1/katex.min.css\" integrity=\"sha384-VEnyslhHLHiYPca9KFkBB3CMeslnM9CzwjxsEbZTeA21JBm7tdLwKoZmCt3cZTYD\" crossorigin=\"anonymous\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0-beta1/katex.min.js\" integrity=\"sha384-O4hpKqcplNCe+jLuBVEXC10Rn1QEqAmX98lKAIFBEDxZI0a+6Z2w2n8AEtQbR4CD\" crossorigin=\"anonymous\"></script>. @ronkok: thanks for the correction, turns out markdown thought that was an escape sequence, so I've quoted it.. This was my mistake.  I was overriding the fonts that KaTeX uses.. ",
    "blackhole12": "Given @ronkok's suggestion, linking this page prominently in the main KaTeX documentation instead of in the contributing page would be enormously helpful if someone installs KaTeX only to later find out that something they want to use for a new document isn't supported yet.. ",
    "FavorMylikes": "\n. Thank you for your reply and suggest, I will try it. . ",
    "jaltekruse": "Hey @kevinbarabash,\nI've had a few other project interested in incorporating this editor into their sites, so I'm planning on factoring it out of the larger Free Math project and putting it under a permissive license like Apache or MIT.\nDid you ever hear anything back from your product team? I would be happy to make a contribution to Perseus to integrate it with your question viewer of there is interest.. Hey @kevinbarabash,\nI understand, I know how hard managing open source projects can be.\nI don't know if would consider letting me volunteer, but if you are making improvements to the Perseus components they likely would be useful to incorporate into Free Math.\nI would be happy to do some of the more tedious work of occasionally publishing snapshots of Perseus and your other previously open source repos, even if you wouldn't have the resources to review external contributions and the code would just flow one direction.. @kevinbarabash,\nI did assume that this was part of the motivation of having everything in a mono repo. I understand that it is likely a substantial amount of work, but it could still be beneficial to my project to have access to your continued improvements on these components.\nI do have prior experience managing open source and closed source versions of a codebase. I was previously at Dremio, a company working on a big data processing system, including a complex web application component for configuring and managing data analysis. They release a community version that is Apache licensed and also sell a closed source enterprise edition. Splitting the two required refactoring in some cases, which took an non-trivial amount of time. As providing source code doesn't really impact your users decisions to use Khan, I understand this work doesn't directly serve your organizations core mission.\nI would be willing to volunteer time to make this possible, but I understand it might involve making changes in the mono-repo to support this effort, which would require effort from your team to review. If you would consider mentioning the offer to your team for consideration I would appreciate it.\nThanks,\nJason. ",
    "yeruoforever": "thanks very much. ",
    "goessner": "@kevinbarabash ,\nit should be katex@0.8.3 with respect to package.json.. ",
    "sjorsvanheuveln": "@kevinbarabash I think dangerouslySetInnerHTML it is still supported, but that react-katex is giving me all kinds of problems. Maybe I have some conflicting packages or something, but that would be weird. I'll check that tex component, maybe that will solve all my problems. Thanks.. I now installed react-components through npm. When using the Tex component I'm getting the following error:\nERROR in ./node_modules/react-components/js/tex.jsx\nModule parse failed: /Users/blablabla/node_modules/react-components/js/tex.jsx Unexpected token (202:17)\nYou may need an appropriate loader to handle this file type.\n|         }\n| \n|         return ( <span\n|             style={this.props.style}\n|             onClick={this.props.onClick}\nThis is probably a Babel thing, but until now I already installed 50+ packages without problems, but this is causing issues now.. Hmm, when I compare all the other NPM packages to this package I see that most of this is in JSX and all these other packages are JS only. This package seems to be an exception. Is this built in another fashion or something? Also I cannot just simply do this after installation:\nimport { Tex } from 'react-components';\nIt says the path is unresolved but the folder clearly exists in node_modules.. No worries, is that on the planning though? Is it hard to make it like that? . @edemaine What's a PR? I posted the issue there, thanks. Btw nice lectures on YT man! Learned some stuff from you. Keep it up! . @Jonnygwi How can I change the setup so that the css is already included in the package and doesn't need to be loaded externally? Because I'm not too familiar with my babel/webpack setup (and really don't want to touch it), but I believe it compiles all css into one final file. So including it like that is not very handy for me.. ",
    "Jonnygwi": "@sjorsvanheuveln we have made react-latex and it works for us! Check it out https://github.com/zzish/react-latex\n. @sjorsvanheuveln That is something we were thinking of adding to the project. At the moment you can either download the css or link to the cdn and include it into your template. You should not need to touch your webpack.. ",
    "ArStah": "@kevinbarabash i can't find your organization there. Look here what happens. Maybe it's not KaTeX issue, but i think you must check it. @pascalwhoop \ud83d\udc4d . @MadLittleMods great, thanks for quick reaction :+1:. ",
    "pascalwhoop": "Yes I also believe it shouldn't be positioned in KaTeX although it could be \"good\" to help people who add this library to help themselves by sanitizing against any html inside of KaTeX. Or is there any use case where people have html>KaTeX>html?. Ah sorry. Usually you nest KaTeX code inside of html right? So let's say we use\n<p>$$ f(x) = y^2 $$</p>\nis there any reason why we should have it be something like\n<p>$$ f(x) = y^2 <em>\\text{chickens}</em> $$</p>\nIf not, then forbidding any html inside the string that is passed to katex.render could help developers help themselves. A bit. Because it helps avoid breaking out of the <pre><code> boxes. Okay then how exactly does it occur, that the HTML breaks out? I guess you forbid it, throw an error and the string is output to the UI of the client, which then is in fact our HTML that got injected?. Yes and no. \nGitter probably sanitizes their posts and ensures there is no html in there. But for some reason they exclude the contents of KaTeX and don't turn < into < . Probably because they don't want to mess with the code that's intended to be interpreted by KaTeX.\nThe error thrown by KaTeX parser then is also not sanitized. The error is thrown on the client side and there is no client side wrapping of the error, sanitizing it. But you could sanitize the Error you throw so users don't have to.. @edemaine has been contacted by the Gitter team. Gitter renders the KaTeX error as unsanitized HTML, which causes the trouble. I guess to give the user some feedback of what's not working.\nI vote for close. \nthanks for the triage. Looks good to me. Maybe note that this is specifically important if the latex source code can come from untrusted third parties. . ",
    "MadLittleMods": "@edemaine Thanks for the email response earlier \u2764\ufe0f \nThe situation has been remedied and there is a blog post here, http://blog.gitter.im/2018/02/16/gitter-xss-cryptocoin-mining-security-issue-notification/. ",
    "prabhatmuroor": "@kevinbarabash Unfortunately our site is not public yet. So I cannot give a link to try.\n@ronkok I am using Katex 0.6.0 . ",
    "mbostock": "0.9.0 fixes it for me! Thank you! \ud83d\udc4d . Thanks for fixing this bug! Any ETA on when a release that includes this fix? We\u2019d love to update the version of KaTeX included in Observable\u2019s standard library. Thank you all your work on this excellent library! \u2764\ufe0f . ",
    "alexeymrkn": "@ronkok this code is a part of a project that I maintain locally. After your request I've tried to reproduce the issue on a remote server (simplifying the code to ensure clearness) but failed to do so. It took me quite a time to realize that this bug appears only when inline math is rendered inside a contenteditable block. \nSo here is a jsFiddle playground demonstrating the issue. . @ronkok It was my pleasure to make this nano contribution to such an awesome project. . ",
    "rahulpathakgit": "Thanks Erik, I will surely try this.\n. ",
    "selipso": "Ah ok, makes sense, thanks. The mixed HTML/LaTeX content comes from an effort to unify different equation formats (including MathML :( ) to look consistent with each other. MathJax worked well for a while, but it's inevitable that native HTML/CSS is more cross-platform and scalable.. ",
    "NileshPS": "False alarm. My bad.. ",
    "jiewuza": "@ronkok I brought up the issue after I read Pandoc's  tex_math_dollars.. @edemaine I read the code of the autorender contrib plug. \nIt seems that the delimiters are located by string comparison (not by regexp) when splitting the text.\nThe point I brought up the issue is that it is obscure for users to input a dollar sign when using $ as delimiters. For instance, instead of \nHere is the math $2x^3$, .... $30 is enough\nusers have to input\nHere is the math $2x^3$, .... $\\$$30 is enough \nor \nHere is the math $2x^3$, .... $\\$30$ is enough \nUsing something other than a single $ is a fair option, but I'd rather keep it compatible with LaTex.. @ylemkimon That is exactly what I ask for.\nNow I came up with a config:\ndelimiters: [\n    {left: '$$\\n', right: '\\n$$', display: true},\n    {left: '$$', right: '$$', display: false}\n  ]\nThe idea behind is that $$ is seldom seen in regular text, and \n$$\nmath stuff\n$$\nas display math is visually easy to memorize/use.\nBut it does not work. For example\ntest $$ax^2$$\nand then $$\nax^2\n$$\nThe inline math on the first line is not recognized as math, because the right delimiter which is followed by a \\n is treated as the left delimiter of display math.\nIf you append some text on the first line, it renders perfectly.\nI think it may be a bug, for the right delimiter should be paired first before it be recognized as a left one. . @kevinbarabash \nI tried. Both are treated as inline math in this case.\ntest $$ax^2$$\nand then $$\nax^2\n$$\n. ",
    "yorrd": "It does work in LaTeX. I would absolutely love that, would solve pretty much all our issues :). ",
    "Paalon": "I think such message is not emitted.\n\nThey work fine on Chrome for Ubuntu 16.04.\n. When I enlarged them, I can distinguish them but it's difficult at the default size.\n\n. I failed to test.\n```fish\npaalon at mac in ~/D/KaTeX-e114373f0b7d011236a1b95fec72c6d34a33aa88\n\u21aa npm --version\n5.8.0\npaalon at mac in ~/D/KaTeX-e114373f0b7d011236a1b95fec72c6d34a33aa88\n\u21aa npm install\n\npre-commit@1.2.2 install /Users/paalon/Downloads/KaTeX-e114373f0b7d011236a1b95fec72c6d34a33aa88/node_modules/pre-commit\nnode install.js\nspawn-sync@1.0.15 postinstall /Users/paalon/Downloads/KaTeX-e114373f0b7d011236a1b95fec72c6d34a33aa88/node_modules/spawn-sync\nnode postinstall\nuglifyjs-webpack-plugin@0.4.6 postinstall /Users/paalon/Downloads/KaTeX-e114373f0b7d011236a1b95fec72c6d34a33aa88/node_modules/webpack/node_modules/uglifyjs-webpack-plugin\nnode lib/post_install.js\n\nadded 1459 packages from 780 contributors in 30.036s\npaalon at mac in ~/D/KaTeX-e114373f0b7d011236a1b95fec72c6d34a33aa88\n\u21aa npm start\n\nkatex@0.10.0-pre prestart /Users/paalon/Downloads/KaTeX-e114373f0b7d011236a1b95fec72c6d34a33aa88\nnode check-node-version.js && check-dependencies && cd src && node unicodeMake.js >unicodeSymbols.js\n\nOK\n\nkatex@0.10.0-pre start /Users/paalon/Downloads/KaTeX-e114373f0b7d011236a1b95fec72c6d34a33aa88\nwebpack-dev-server --hot --config webpack.dev.js\n\nProject is running at http://0.0.0.0:7936/\nwebpack output is served from /\nContent not from webpack is served from /Users/paalon/Downloads/KaTeX-e114373f0b7d011236a1b95fec72c6d34a33aa88/static, /Users/paalon/Downloads/KaTeX-e114373f0b7d011236a1b95fec72c6d34a33aa88\nwebpack: wait until bundle finished: /\nHash: 0f94cd626aaf9aede7fd2df94f88ffb9426285fa7d397a8cb7e448cf8a2a175c55389cc4fde21590\nVersion: webpack 3.6.0\nChild\n    Hash: 0f94cd626aaf9aede7fd\n    Time: 159ms\n       Asset     Size  Chunks         Chunk Names\n     main.js  2.74 MB       0  [big]  main\n    katex.js  2.69 MB       1  [big]  katex\n    [./katex.js] ./katex.js 4.03 kB {0} {1}\n    [./katex.webpack.js] ./katex.webpack.js 382 bytes {0} {1}\n    [./node_modules/babel-runtime/core-js/object/get-own-property-names.js] ./node_modules/babel-runtime/core-js/object/get-own-property-names.js 110 bytes {0}\n    [./node_modules/strip-ansi/index.js] ./node_modules/strip-ansi/index.js 161 bytes {0} {1}\n       [0] multi (webpack)-dev-server/client?http://0.0.0.0:7936 webpack/hot/dev-server ./katex.webpack.js 52 bytes {1}\n    [./node_modules/webpack-dev-server/client/socket.js] (webpack)-dev-server/client/socket.js 1.04 kB {0} {1}\n       [1] multi (webpack)-dev-server/client?http://0.0.0.0:7936 webpack/hot/dev-server ./static/main.js 52 bytes {0}\n    [./node_modules/url/url.js] ./node_modules/url/url.js 23.3 kB {0} {1}\n    [./node_modules/webpack-dev-server/client/index.js?http://0.0.0.0:7936] (webpack)-dev-server/client?http://0.0.0.0:7936 7.23 kB {0} {1}\n    [./node_modules/webpack-dev-server/client/overlay.js] (webpack)-dev-server/client/overlay.js 3.73 kB {0} {1}\n    [./node_modules/webpack/hot ^.\\/log$] (webpack)/hot nonrecursive ^.\\/log$ 170 bytes {0} {1} [built]\n    [./node_modules/webpack/hot/dev-server.js] (webpack)/hot/dev-server.js 1.61 kB {0} {1}\n    [./node_modules/webpack/hot/emitter.js] (webpack)/hot/emitter.js 77 bytes {0} {1}\n    [./static/main.css] ./static/main.css 1.04 kB {0}\n    [./static/main.js] ./static/main.js 2.75 kB {0}\n        + 240 hidden modules\nERROR in ./node_modules/css-loader?{\"minimize\":false}!./node_modules/less-loader/dist/cjs.js!./src/katex.less\nModule build failed:\n\n@import \"../submodules/katex-fonts/fonts.less\";\n^\nCan't resolve '../submodules/katex-fonts/fonts.less' in '/Users/paalon/Downloads/KaTeX-e114373f0b7d011236a1b95fec72c6d34a33aa88/src'\n      in /Users/paalon/Downloads/KaTeX-e114373f0b7d011236a1b95fec72c6d34a33aa88/src/katex.less (line 1, column 0)\n @ ./src/katex.less 4:14-125 18:2-22:4 19:20-131\n @ ./katex.webpack.js\n @ multi (webpack)-dev-server/client?http://0.0.0.0:7936 webpack/hot/dev-server ./katex.webpack.js\n\nERROR in ./src/fontMetrics.js\nModule not found: Error: Can't resolve '../submodules/katex-fonts/fontMetricsData' in '/Users/paalon/Downloads/KaTeX-e114373f0b7d011236a1b95fec72c6d34a33aa88/src'\n @ ./src/fontMetrics.js 88:0-66\n @ ./src/buildMathML.js\n @ ./src/buildTree.js\n @ ./katex.js\n @ ./katex.webpack.js\n @ multi (webpack)-dev-server/client?http://0.0.0.0:7936 webpack/hot/dev-server ./katex.webpack.js\n\nERROR in ./src/macros.js\nModule not found: Error: Can't resolve '../submodules/katex-fonts/fontMetricsData' in '/Users/paalon/Downloads/KaTeX-e114373f0b7d011236a1b95fec72c6d34a33aa88/src'\n @ ./src/macros.js 7:0-72\n @ ./src/MacroExpander.js\n @ ./src/Parser.js\n @ ./src/parseTree.js\n @ ./katex.js\n @ ./katex.webpack.js\n @ multi (webpack)-dev-server/client?http://0.0.0.0:7936 webpack/hot/dev-server ./katex.webpack.js\n\nChild\n    Hash: 2df94f88ffb9426285fa\n    Time: 11921ms\n                     Asset     Size  Chunks                    Chunk Names\n    contrib/auto-render.js  1.01 MB       0  [emitted]  [big]  contrib/auto-render\n    [./contrib/auto-render/auto-render.js] ./contrib/auto-render/auto-render.js 3.2 kB {0} [built]\n    [./contrib/auto-render/splitAtDelimiters.js] ./contrib/auto-render/splitAtDelimiters.js 2.78 kB {0} [built]\n    [./node_modules/babel-runtime/core-js/object/assign.js] ./node_modules/babel-runtime/core-js/object/assign.js 94 bytes {0} [built]\n    [./node_modules/loglevel/lib/loglevel.js] ./node_modules/loglevel/lib/loglevel.js 7.74 kB {0} [built]\n    [./node_modules/strip-ansi/index.js] ./node_modules/strip-ansi/index.js 161 bytes {0} [built]\n    [./node_modules/url/url.js] ./node_modules/url/url.js 23.3 kB {0} [built]\n    [./node_modules/webpack-dev-server/client/index.js?http://0.0.0.0:7936] (webpack)-dev-server/client?http://0.0.0.0:7936 7.23 kB {0} [built]\n    [./node_modules/webpack-dev-server/client/overlay.js] (webpack)-dev-server/client/overlay.js 3.73 kB {0} [built]\n    [./node_modules/webpack-dev-server/client/socket.js] (webpack)-dev-server/client/socket.js 1.04 kB {0} [built]\n    [./node_modules/webpack/hot ^.\\/log$] (webpack)/hot nonrecursive ^.\\/log$ 170 bytes {0} [built]\n       [0] multi (webpack)-dev-server/client?http://0.0.0.0:7936 webpack/hot/dev-server ./contrib/auto-render/auto-render.js 52 bytes {0} [built]\n    [./node_modules/webpack/hot/dev-server.js] (webpack)/hot/dev-server.js 1.61 kB {0} [built]\n    [./node_modules/webpack/hot/emitter.js] (webpack)/hot/emitter.js 77 bytes {0} [built]\n    [./node_modules/webpack/hot/log.js] (webpack)/hot/log.js 1.04 kB {0} [built]\n    [katex] external \"katex\" 42 bytes {0} [not cacheable]\n        + 114 hidden modules\nChild\n    Hash: 7d397a8cb7e448cf8a2a\n    Time: 9743ms\n                  Asset    Size  Chunks                    Chunk Names\n    contrib/copy-tex.js  996 kB       0  [emitted]  [big]  contrib/copy-tex\n    [./contrib/copy-tex/copy-tex.css] ./contrib/copy-tex/copy-tex.css 1.06 kB {0} [built]\n    [./contrib/copy-tex/copy-tex.js] ./contrib/copy-tex/copy-tex.js 952 bytes {0} [built]\n    [./contrib/copy-tex/katex2tex.js] ./contrib/copy-tex/katex2tex.js 2.22 kB {0} [built]\n    [./node_modules/loglevel/lib/loglevel.js] ./node_modules/loglevel/lib/loglevel.js 7.74 kB {0} [built]\n    [./node_modules/strip-ansi/index.js] ./node_modules/strip-ansi/index.js 161 bytes {0} [built]\n    [./node_modules/url/url.js] ./node_modules/url/url.js 23.3 kB {0} [built]\n    [./node_modules/webpack-dev-server/client/index.js?http://0.0.0.0:7936] (webpack)-dev-server/client?http://0.0.0.0:7936 7.23 kB {0} [built]\n    [./node_modules/webpack-dev-server/client/overlay.js] (webpack)-dev-server/client/overlay.js 3.73 kB {0} [built]\n    [./node_modules/webpack-dev-server/client/socket.js] (webpack)-dev-server/client/socket.js 1.04 kB {0} [built]\n    [./node_modules/webpack/hot ^.\\/log$] (webpack)/hot nonrecursive ^.\\/log$ 170 bytes {0} [built]\n    [./node_modules/webpack/hot/dev-server.js] (webpack)/hot/dev-server.js 1.61 kB {0} [built]\n    [./node_modules/webpack/hot/emitter.js] (webpack)/hot/emitter.js 77 bytes {0} [built]\n       [0] multi (webpack)-dev-server/client?http://0.0.0.0:7936 webpack/hot/dev-server ./contrib/copy-tex/copy-tex.js 52 bytes {0} [built]\n    [./node_modules/webpack/hot/log-apply-result.js] (webpack)/hot/log-apply-result.js 1.31 kB {0} [built]\n    [./node_modules/webpack/hot/log.js] (webpack)/hot/log.js 1.04 kB {0} [built]\n        + 81 hidden modules\nChild\n    Hash: 175c55389cc4fde21590\n    Time: 9790ms\n                             Asset    Size  Chunks                    Chunk Names\n    contrib/mathtex-script-type.js  942 kB       0  [emitted]  [big]  contrib/mathtex-script-type\n    [./contrib/mathtex-script-type/mathtex-script-type.js] ./contrib/mathtex-script-type/mathtex-script-type.js 765 bytes {0} [built]\n    [./node_modules/ansi-regex/index.js] ./node_modules/ansi-regex/index.js 135 bytes {0} [built]\n    [./node_modules/loglevel/lib/loglevel.js] ./node_modules/loglevel/lib/loglevel.js 7.74 kB {0} [built]\n    [./node_modules/strip-ansi/index.js] ./node_modules/strip-ansi/index.js 161 bytes {0} [built]\n    [./node_modules/url/url.js] ./node_modules/url/url.js 23.3 kB {0} [built]\n    [./node_modules/webpack-dev-server/client/index.js?http://0.0.0.0:7936] (webpack)-dev-server/client?http://0.0.0.0:7936 7.23 kB {0} [built]\n    [./node_modules/webpack-dev-server/client/overlay.js] (webpack)-dev-server/client/overlay.js 3.73 kB {0} [built]\n    [./node_modules/webpack-dev-server/client/socket.js] (webpack)-dev-server/client/socket.js 1.04 kB {0} [built]\n       [0] multi (webpack)-dev-server/client?http://0.0.0.0:7936 webpack/hot/dev-server ./contrib/mathtex-script-type/mathtex-script-type.js 52 bytes {0} [built]\n    [./node_modules/webpack/hot ^.\\/log$] (webpack)/hot nonrecursive ^.\\/log$ 170 bytes {0} [built]\n    [./node_modules/webpack/hot/dev-server.js] (webpack)/hot/dev-server.js 1.61 kB {0} [built]\n    [./node_modules/webpack/hot/emitter.js] (webpack)/hot/emitter.js 77 bytes {0} [built]\n    [./node_modules/webpack/hot/log-apply-result.js] (webpack)/hot/log-apply-result.js 1.31 kB {0} [built]\n    [./node_modules/webpack/hot/log.js] (webpack)/hot/log.js 1.04 kB {0} [built]\n    [katex] external \"katex\" 42 bytes {0} [not cacheable]\n        + 76 hidden modules\nwebpack: Failed to compile.\n```. ## Before Chrome\n\nBefore Safari\n\nAfter Chrome\n\nAfter Safari\n\nLog\n```bash\n\u21aa npm start\n\nkatex@0.10.0-pre prestart /Users/paalon/github/KaTeXe\nnode check-node-version.js && check-dependencies && cd src && node unicodeMake.js >unicodeSymbols.js\n\nOK\n\nkatex@0.10.0-pre start /Users/paalon/github/KaTeXe\nwebpack-dev-server --hot --config webpack.dev.js\n\nProject is running at http://0.0.0.0:7936/\nwebpack output is served from /\nContent not from webpack is served from /Users/paalon/github/KaTeXe/static, /Users/paalon/github/KaTeXe\nHash: ea44e26cdaef5574f7832df94f88ffb9426285fa7d397a8cb7e448cf8a2a175c55389cc4fde21590\nVersion: webpack 3.6.0\nChild\n    Hash: ea44e26cdaef5574f783\n    Time: 155ms\n                                    Asset     Size  Chunks         Chunk Names\n             fonts/KaTeX_Math-Italic.woff  23.8 kB\n              fonts/KaTeX_AMS-Regular.ttf  71.4 kB\n            fonts/KaTeX_AMS-Regular.woff2  33.2 kB\n         fonts/KaTeX_Caligraphic-Bold.ttf  19.6 kB\n        fonts/KaTeX_Caligraphic-Bold.woff  12.1 kB\n       fonts/KaTeX_Caligraphic-Bold.woff2  10.6 kB\n      fonts/KaTeX_Caligraphic-Regular.ttf    19 kB\n     fonts/KaTeX_Caligraphic-Regular.woff  11.9 kB\n    fonts/KaTeX_Caligraphic-Regular.woff2  10.4 kB\n             fonts/KaTeX_Fraktur-Bold.ttf    36 kB\n            fonts/KaTeX_Fraktur-Bold.woff  23.4 kB\n           fonts/KaTeX_Fraktur-Bold.woff2  20.5 kB\n          fonts/KaTeX_Fraktur-Regular.ttf  34.7 kB\n         fonts/KaTeX_Fraktur-Regular.woff  22.8 kB\n        fonts/KaTeX_Fraktur-Regular.woff2  19.9 kB\n                fonts/KaTeX_Main-Bold.ttf  61.8 kB\n               fonts/KaTeX_Main-Bold.woff  36.9 kB\n              fonts/KaTeX_Main-Bold.woff2  30.8 kB\n          fonts/KaTeX_Main-BoldItalic.ttf  44.8 kB\n         fonts/KaTeX_Main-BoldItalic.woff  26.2 kB\n        fonts/KaTeX_Main-BoldItalic.woff2  22.2 kB\n              fonts/KaTeX_Main-Italic.ttf    48 kB\n             fonts/KaTeX_Main-Italic.woff  27.2 kB\n            fonts/KaTeX_Main-Italic.woff2  23.1 kB\n             fonts/KaTeX_Main-Regular.ttf  70.5 kB\n            fonts/KaTeX_Main-Regular.woff  39.7 kB\n           fonts/KaTeX_Main-Regular.woff2  33.1 kB\n          fonts/KaTeX_Math-BoldItalic.ttf  39.7 kB\n         fonts/KaTeX_Math-BoldItalic.woff  23.2 kB\n        fonts/KaTeX_Math-BoldItalic.woff2    20 kB\n              fonts/KaTeX_Math-Italic.ttf  41.4 kB\n             fonts/KaTeX_AMS-Regular.woff  40.2 kB\n            fonts/KaTeX_Math-Italic.woff2  20.4 kB\n           fonts/KaTeX_SansSerif-Bold.ttf    34 kB\n          fonts/KaTeX_SansSerif-Bold.woff  19.2 kB\n         fonts/KaTeX_SansSerif-Bold.woff2    16 kB\n         fonts/KaTeX_SansSerif-Italic.ttf  31.3 kB\n        fonts/KaTeX_SansSerif-Italic.woff  18.1 kB\n       fonts/KaTeX_SansSerif-Italic.woff2  15.2 kB\n        fonts/KaTeX_SansSerif-Regular.ttf  30.2 kB\n       fonts/KaTeX_SansSerif-Regular.woff  16.8 kB\n      fonts/KaTeX_SansSerif-Regular.woff2    14 kB\n           fonts/KaTeX_Script-Regular.ttf  24.9 kB\n          fonts/KaTeX_Script-Regular.woff  13.9 kB\n         fonts/KaTeX_Script-Regular.woff2  12.3 kB\n            fonts/KaTeX_Size1-Regular.ttf  13.2 kB\n           fonts/KaTeX_Size1-Regular.woff  6.98 kB\n          fonts/KaTeX_Size1-Regular.woff2  5.81 kB\n            fonts/KaTeX_Size2-Regular.ttf  12.4 kB\n           fonts/KaTeX_Size2-Regular.woff  6.68 kB\n          fonts/KaTeX_Size2-Regular.woff2  5.56 kB\n            fonts/KaTeX_Size3-Regular.ttf  8.36 kB\n           fonts/KaTeX_Size3-Regular.woff  4.78 kB\n          fonts/KaTeX_Size3-Regular.woff2  3.86 kB\n            fonts/KaTeX_Size4-Regular.ttf  11.3 kB\n           fonts/KaTeX_Size4-Regular.woff  6.46 kB\n          fonts/KaTeX_Size4-Regular.woff2  5.13 kB\n       fonts/KaTeX_Typewriter-Regular.ttf  36.3 kB\n      fonts/KaTeX_Typewriter-Regular.woff  20.9 kB\n     fonts/KaTeX_Typewriter-Regular.woff2  17.5 kB\n                                  main.js   3.3 MB       0  [big]  main\n                                 katex.js  3.26 MB       1  [big]  katex\n    [./katex.js] ./katex.js 4.03 kB {0} {1}\n    [./katex.webpack.js] ./katex.webpack.js 382 bytes {0} {1}\n    [./node_modules/babel-runtime/core-js/object/get-own-property-names.js] ./node_modules/babel-runtime/core-js/object/get-own-property-names.js 110 bytes {0}\n    [./node_modules/loglevel/lib/loglevel.js] ./node_modules/loglevel/lib/loglevel.js 7.74 kB {0} {1}\n    [./node_modules/strip-ansi/index.js] ./node_modules/strip-ansi/index.js 161 bytes {0} {1}\n    [./node_modules/url/url.js] ./node_modules/url/url.js 23.3 kB {0} {1}\n    [./node_modules/webpack-dev-server/client/index.js?http://0.0.0.0:7936] (webpack)-dev-server/client?http://0.0.0.0:7936 7.23 kB {0} {1}\n    [./node_modules/webpack/hot/dev-server.js] (webpack)/hot/dev-server.js 1.61 kB {0} {1}\n    [./node_modules/webpack/hot/log-apply-result.js] (webpack)/hot/log-apply-result.js 1.31 kB {0} {1}\n       [0] multi (webpack)-dev-server/client?http://0.0.0.0:7936 webpack/hot/dev-server ./katex.webpack.js 52 bytes {1}\n    [./node_modules/webpack/hot/log.js] (webpack)/hot/log.js 1.04 kB {0} {1}\n       [1] multi (webpack)-dev-server/client?http://0.0.0.0:7936 webpack/hot/dev-server ./static/main.js 52 bytes {0}\n    [./src/katex.less] ./src/katex.less 1.16 kB {0} {1}\n    [./static/main.css] ./static/main.css 1.04 kB {0}\n    [./static/main.js] ./static/main.js 2.75 kB {0}\n        + 302 hidden modules\nChild\n    Hash: 2df94f88ffb9426285fa\n    Time: 14030ms\n                     Asset     Size  Chunks                    Chunk Names\n    contrib/auto-render.js  1.01 MB       0  [emitted]  [big]  contrib/auto-render\n    [./contrib/auto-render/auto-render.js] ./contrib/auto-render/auto-render.js 3.2 kB {0} [built]\n    [./contrib/auto-render/splitAtDelimiters.js] ./contrib/auto-render/splitAtDelimiters.js 2.78 kB {0} [built]\n    [./node_modules/babel-runtime/core-js/object/assign.js] ./node_modules/babel-runtime/core-js/object/assign.js 94 bytes {0} [built]\n    [./node_modules/loglevel/lib/loglevel.js] ./node_modules/loglevel/lib/loglevel.js 7.74 kB {0} [built]\n    [./node_modules/strip-ansi/index.js] ./node_modules/strip-ansi/index.js 161 bytes {0} [built]\n    [./node_modules/url/url.js] ./node_modules/url/url.js 23.3 kB {0} [built]\n    [./node_modules/webpack-dev-server/client/index.js?http://0.0.0.0:7936] (webpack)-dev-server/client?http://0.0.0.0:7936 7.23 kB {0} [built]\n    [./node_modules/webpack-dev-server/client/overlay.js] (webpack)-dev-server/client/overlay.js 3.73 kB {0} [built]\n    [./node_modules/webpack-dev-server/client/socket.js] (webpack)-dev-server/client/socket.js 1.04 kB {0} [built]\n    [./node_modules/webpack/hot ^.\\/log$] (webpack)/hot nonrecursive ^.\\/log$ 170 bytes {0} [built]\n       [0] multi (webpack)-dev-server/client?http://0.0.0.0:7936 webpack/hot/dev-server ./contrib/auto-render/auto-render.js 52 bytes {0} [built]\n    [./node_modules/webpack/hot/dev-server.js] (webpack)/hot/dev-server.js 1.61 kB {0} [built]\n    [./node_modules/webpack/hot/emitter.js] (webpack)/hot/emitter.js 77 bytes {0} [built]\n    [./node_modules/webpack/hot/log.js] (webpack)/hot/log.js 1.04 kB {0} [built]\n    [katex] external \"katex\" 42 bytes {0} [not cacheable]\n        + 114 hidden modules\nChild\n    Hash: 7d397a8cb7e448cf8a2a\n    Time: 11177ms\n                  Asset    Size  Chunks                    Chunk Names\n    contrib/copy-tex.js  996 kB       0  [emitted]  [big]  contrib/copy-tex\n    [./contrib/copy-tex/copy-tex.css] ./contrib/copy-tex/copy-tex.css 1.06 kB {0} [built]\n    [./contrib/copy-tex/copy-tex.js] ./contrib/copy-tex/copy-tex.js 952 bytes {0} [built]\n    [./contrib/copy-tex/katex2tex.js] ./contrib/copy-tex/katex2tex.js 2.22 kB {0} [built]\n    [./node_modules/loglevel/lib/loglevel.js] ./node_modules/loglevel/lib/loglevel.js 7.74 kB {0} [built]\n    [./node_modules/strip-ansi/index.js] ./node_modules/strip-ansi/index.js 161 bytes {0} [built]\n    [./node_modules/url/url.js] ./node_modules/url/url.js 23.3 kB {0} [built]\n    [./node_modules/webpack-dev-server/client/index.js?http://0.0.0.0:7936] (webpack)-dev-server/client?http://0.0.0.0:7936 7.23 kB {0} [built]\n    [./node_modules/webpack-dev-server/client/overlay.js] (webpack)-dev-server/client/overlay.js 3.73 kB {0} [built]\n    [./node_modules/webpack-dev-server/client/socket.js] (webpack)-dev-server/client/socket.js 1.04 kB {0} [built]\n    [./node_modules/webpack/hot ^.\\/log$] (webpack)/hot nonrecursive ^.\\/log$ 170 bytes {0} [built]\n    [./node_modules/webpack/hot/dev-server.js] (webpack)/hot/dev-server.js 1.61 kB {0} [built]\n    [./node_modules/webpack/hot/emitter.js] (webpack)/hot/emitter.js 77 bytes {0} [built]\n       [0] multi (webpack)-dev-server/client?http://0.0.0.0:7936 webpack/hot/dev-server ./contrib/copy-tex/copy-tex.js 52 bytes {0} [built]\n    [./node_modules/webpack/hot/log-apply-result.js] (webpack)/hot/log-apply-result.js 1.31 kB {0} [built]\n    [./node_modules/webpack/hot/log.js] (webpack)/hot/log.js 1.04 kB {0} [built]\n        + 81 hidden modules\nChild\n    Hash: 175c55389cc4fde21590\n    Time: 11204ms\n                             Asset    Size  Chunks                    Chunk Names\n    contrib/mathtex-script-type.js  942 kB       0  [emitted]  [big]  contrib/mathtex-script-type\n    [./contrib/mathtex-script-type/mathtex-script-type.js] ./contrib/mathtex-script-type/mathtex-script-type.js 765 bytes {0} [built]\n    [./node_modules/ansi-regex/index.js] ./node_modules/ansi-regex/index.js 135 bytes {0} [built]\n    [./node_modules/loglevel/lib/loglevel.js] ./node_modules/loglevel/lib/loglevel.js 7.74 kB {0} [built]\n    [./node_modules/strip-ansi/index.js] ./node_modules/strip-ansi/index.js 161 bytes {0} [built]\n    [./node_modules/url/url.js] ./node_modules/url/url.js 23.3 kB {0} [built]\n    [./node_modules/webpack-dev-server/client/index.js?http://0.0.0.0:7936] (webpack)-dev-server/client?http://0.0.0.0:7936 7.23 kB {0} [built]\n    [./node_modules/webpack-dev-server/client/overlay.js] (webpack)-dev-server/client/overlay.js 3.73 kB {0} [built]\n    [./node_modules/webpack-dev-server/client/socket.js] (webpack)-dev-server/client/socket.js 1.04 kB {0} [built]\n       [0] multi (webpack)-dev-server/client?http://0.0.0.0:7936 webpack/hot/dev-server ./contrib/mathtex-script-type/mathtex-script-type.js 52 bytes {0} [built]\n    [./node_modules/webpack/hot ^.\\/log$] (webpack)/hot nonrecursive ^.\\/log$ 170 bytes {0} [built]\n    [./node_modules/webpack/hot/dev-server.js] (webpack)/hot/dev-server.js 1.61 kB {0} [built]\n    [./node_modules/webpack/hot/emitter.js] (webpack)/hot/emitter.js 77 bytes {0} [built]\n    [./node_modules/webpack/hot/log-apply-result.js] (webpack)/hot/log-apply-result.js 1.31 kB {0} [built]\n    [./node_modules/webpack/hot/log.js] (webpack)/hot/log.js 1.04 kB {0} [built]\n    [katex] external \"katex\" 42 bytes {0} [not cacheable]\n        + 76 hidden modules\nwebpack: Compiled successfully.\n```\n. ",
    "shaunc": "Thanks!. ",
    "meoow": "After searching around, I still can not find the solution, but I managed to figure out a workaround,\n\\mathrlap{\\it{/}}{^0}_{\\,00}\nIt's not perfect but looks pretty decent in text style, but the slash will not be aligned in the right place in display mode when \\frac or \\over in the equation. e.g.\na={1000\\over1000} \\times 1000\\,\\mathrlap{\\it{/}}{^0}_{\\,00}\n. Here is what I found.\n\n\\textperthousand from the package textcomp, also provides \\textpertenthousand but both only work in text mode, not in math mode.\n\\permil from the package wasysym, works in both text mode as in math mode.. \n",
    "henryatman": "@ronkok , it is work, wonderful, very thank you help and reply,. ",
    "Reedbeta": "I'm seeing this issue too. From a bit of experimentation in Firefox dev tools, it appears this is related to the use of display: inline-block on KaTeX spans. If I remove that property from .katex .base, then the browser no longer puts line breaks between inline math and punctuation.\nHowever, removing display: inline-block also messes with the vertical spacing around math blocks (both display and inline), so that's not a complete fix in itself.. ",
    "dudko": "[clabot:check]. @edemaine , thank you for your quick response. I've encountered mentioned issues with react-katex in past. Code base got outdated and incompatible with new react releases. I did contribute to the project recently and hopefully resolved all those issues.\nRegardless of react-latex, it does pretty much the same job as react-katex. Both packages are definitely worth mentioning. It's only on users to decide which one is better. :). ",
    "Kully": "\nI'm personally against changelogs auto-generated from commit logs and/or merged pull requests.\n\nI did not autogenerate this, but I agree with the implication that the current CHANGELOG is too cluttered/needs to be more readable by a user.. closing for now. > The nice thing about the former is that you can see them all together whereas the releases are paginated which isn't that bad imo.\nPlotly's Changelog has sections in each release that work well: Added, Fixed, Updated https://github.com/plotly/plotly.py/blob/master/CHANGELOG.md\n@kevinbarabash \nAn alternative to just one-paging the release info is picking the relevant notes and categorizing based on these 3 sections, or to just organize them all under these sections. WDYT?. > @Kully the CHANGELOG.md file you linked to looks alright. Should I continue with it then? I deleted the branch because you closed the original issue. I can make the CHANGELOG and split Nee Features into Added and Changed as best I can.\nAnd regarding Breaking Changes, I imagine its any change to the code in which functions do not work/raise errors, eg. if \\sqrt{} no longer worked. This seems like it would be a very small category. And Changes would be things like interpolating the sqrt symbol: https://github.com/Khan/KaTeX/issues/1132\nWhat do you think? . @kevinbarabash Yeah exactly. At Plotly that's how we interpret it. > b/c you can load functions.js, symbols.js, environments.js, and macros.js and then read the various tables which store those things.\nHow would I do that?\nAlso, what do you think about a bash script that runs the script each time a commit is merged or something like that? So that we are automating the README updating. > This is an excellent idea. It can take the place of this page\nDo either of you know why that page isn't rendering properly? It was from an old PR iirc. > @Kully will you be able to update this PR?\nYes I will, I am just on vacation for the month of July.. Closed PR: https://github.com/Khan/KaTeX/pull/1237. > We could leave them out for now and then maybe write a script to automate the process later.\nSome of the links are for PRs, some are for Issues.\nI don't mind putting in the links myself for now. If we chose to write a script to scrape the release section I don't think this would be an effective solution because:\n\nWe are only including relevant notes in the CHANGELOG so it would need to know which comments are getting included. It's more of a human job.\nIf we are producing a changelog then checking the release notes for the changelog changes that were taken from there, it may be difficult if sentences are in past tense, restructuring of the lines, etc.\n\nDid you have another approach in mind? I also think going forward it won't be much work to insert the links\nI'm gonna try to get this PR ready by the end of the weekend fyi. > There are older releases that should also be included in this file too.\nOkay, I've aggregated everything.\n\n[X] sentences in past tense\n[X] links inserted in the file\n\nAny other comments? It looks ready to me \ud83d\ude04 . > You should update submodules after checking out, i.e., git submodule update.\nI ran this and the command did not produce any modifications to any files.. @kevinbarabash Can you help me resolve the conflicts above? It looks like I don't have write permissions. I was able to revert the changes I made to the katex-fonts dir.. > @Kully thanks for the PR.\nYou're welcome! My pleasure. \ud83c\udf89 . ",
    "LukasDrgon": "[clabot:check]. ",
    "MartinKolarik": "cdnjs uses CloudFlare, jsDelivr uses a combination of four providers, including one in China.. @ronkok it's < 60 seconds, in most cases there's no delay at all. . jsDelivr links already include dist, see above in readme. ",
    "davidmerfield": "Perfect, thank you for the speedy fix! . ",
    "youqad": "[clabot:check]. I'm sorry, I'm a complete beginner when it comes to KaTeX. I didn't test it (I'm not even sure how to do it, to be honest). Where is defined your defineMacro function? (because I don't think there's an already existing LaTeX command reproducing this \"equal by definition\")\nThanks a lot for your help, and sorry for the inconvenience!. ",
    "rokyed": "@ylemkimon can you please add to options the old behaviour? . @ylemkimon I have latexes stored on the back-end, that I can't modify them anymore, adding mathit or mathnormal on them it's impossible since I'm front-end, my only fix was to revert the version to 0.9.0 which is not ideal. Also all our latex uses multiline and multiline with aligned signs and from what I tested, it's not ideal to write macros. My only solution would be to fork the repo and revert your solution in order to get back the old behaviour, but that's unrealistic. This behaviour was present on every piece of text before. Thanks.. @edemaine So, I need to apply by default on anything \\mathit  but that's not simple since all the latex is stored on the servers and it's not modifiable anymore and to make things even harder \\begin{aligned} bla &= bla\\\\ bla &= 300blas\\\\ the 300 blas  &= boom\\end{aligned} is something that occurs often. So the equations are not simple. Thanks for trying.. javascript\nreturn katex.renderToString(latex, options)\nreturn katex.render(latex, element, options) // the element is usually a <div> empty by default.\nnothing special\njavascript\nlet options = {\n    unicodeTextInMathMode: true,\n    // unicodes are not fully supported yet,\n    // this is how we do 'round here\n    macros: LATEX_MACROS,\n}. I have a solution:\n```javascript\n        /*\n         * @param {String} latex\n         * @param {Object} config\n         * @param {Object} config.charMap Object containing the characters and their corespondent {\"\u2076\":\"6\"}\n         * @param {String} config.startTag e.g. '\\frac{'\n         * @param {String} config.endTag e.g. '}'\n         * @return {String}\n         /\n        unicodeGroupTransform(latex, config) {\n            if (!config)\n                return\n        let charMap = config.charMap\n        let tagIsOpen = false\n        let tagMap = []\n\n        for (let i = 0; i < latex.length; i++) {\n            if (charMap[latex.substr(i, 1)]) {\n                if (!tagIsOpen) {\n                    tagIsOpen = true\n                    tagMap.push({\n                        index: i,\n                        start: true\n                    })\n                }\n            } else {\n                if (tagIsOpen) {\n                    tagIsOpen = false\n                    tagMap.push({\n                        index: i\n                    })\n                }\n            }\n        }\n\n        if (tagIsOpen)\n            tagMap.push({\n                index: latex.length\n            })\n\n        for (let i = tagMap.length - 1; i >= 0; i--) {\n            let tag = tagMap[i]\n            let beforeSlice = latex.slice(0, tag.index)\n            let afterSlice = latex.slice(tag.index)\n            let tagString = tag.start ? config.startTag : config.endTag\n\n            latex = beforeSlice + tagString + afterSlice\n        }\n\n        for (let k in charMap) {\n            let rgx = new RegExp(k, 'g')\n\n            latex = latex.replace(rgx, charMap[k])\n        }\n\n        return latex\n    },\n\n    transformLatexUnicode(latex) {\n        //superscript\n        formula = this.unicodeGroupTransform(latex, {\n            startTag: '^{',\n            endTag: '}',\n            charMap: {\n                '\u207b': '-',\n                '\u2076': '6'\n            }\n        })\n\n        return latex\n    },\n\nall I am missing is to map the characters, feel free to use this in Katex, Thanks.. here's the map (not complete but there):javascript\ntransformLatexUnicode(latex) {\n            //superscript\n            latex = this.unicodeGroupTransform(latex, {\n                startTag: '^{',\n                endTag: '}',\n                charMap: {\n                    '\u207a': '+',\n                    '\u207b': '-',\n                    '\u207c': '=',\n                    '\u207d': '(',\n                    '\u207e': ')',\n                    '\u2070': '0',\n                    '\u00b9': '1',\n                    '\u00b2': '2',\n                    '\u00b3': '3',\n                    '\u2074': '4',\n                    '\u2075': '5',\n                    '\u2076': '6',\n                    '\u2077': '7',\n                    '\u2078': '8',\n                    '\u2079': '9',\n                    '\u2071': 'i',\n                    '\u207f': 'n'\n                }\n            })\n        //subscript\n        latex = this.unicodeGroupTransform(latex, {\n            startTag: '_{',\n            endTag: '}',\n            charMap: {\n                '\u208a': '+',\n                '\u208b': '-',\n                '\u208c': '=',\n                '\u208d': '(',\n                '\u208e': ')',\n                '\u2080': '0',\n                '\u2081': '1',\n                '\u2082': '2',\n                '\u2083': '3',\n                '\u2084': '4',\n                '\u2085': '5',\n                '\u2086': '6',\n                '\u2087': '7',\n                '\u2088': '8',\n                '\u2089': '9',\n                '\u2090': 'a',\n                '\u2091': 'e',\n                '\u2092': 'o',\n                '\u2093': 'x'\n            }\n        })\n\n        return latex\n    },\n\n```. @ronkok i can do it as an add-on, but i don't really have time right now, but i will get back at it \ud83d\ude04thx. @ronkok i also think that it can go in this: https://github.com/Khan/KaTeX/blob/master/src/symbols.js not 100% sure tho. @edemaine i have not tested the way through macros, but ideally we might have a group of superscript unicode characters, that's why i've done the code that way, to tag the start and the end.\nthe point was to render 9k\u207b\u2076 as 9k^{-6} and not 9k^{-^{6}} so, i definitely need a single exponent that handles several objects. ",
    "ian-r-rose": "[clabot:check]. Ah, I see this is also related to #1249 and #1173. Feel free to close if this is not the direction you want to go.. Here is a small example demonstrating the problem: a low-specificity, seemingly innocuous CSS rule will interfere with fraction line rendering:\n```html\n<!DOCTYPE html>\n\n\n\n\n  svg {\n    height: auto;\n  }\n  .example {\n    font-size: 30px;\n    text-align: center;\n    margin: 30px 0;\n  }\n\n\n\n\n\n  window.onload = function() {\n      var tex = document.getElementsByClassName(\"tex\");\n      Array.prototype.forEach.call(tex, function(el) {\n          katex.render(el.getAttribute(\"data-expr\"), el);\n      });\n  };\n\n```\n\n. ",
    "ngryman": "\ud83d\udc4b I'm the author of badgesize.io. I just wanted to mention that I now support https as it's been asked several times. Just in case that was the only blocker for you folks.. ",
    "pzinn": "thanks for your quick response. yes, there are plenty of workarounds (just like there were in mathJax...) but none of them really work for the app I'm building. IMHO the only correct solution is to fix the font so that it's truly fixed width. I hope this is the option you'll choose.. awesome thanks :). Curiously, \\omicron is actually defined in symbols.js even though it doesn't exist in TeX.\nMy original idea was rather to only allow the unicode version, but of course one can also introduce new TeX equivalent \\xxx in the process.. Note that greek caps are normally not italic, try \\Gamma for example.\nUpdated. You're right, \\u0397 doesn't exist. oops.. OK but if you're going to redo this, might as well point out the following.\nIt might be more elegant to do this at the level of the font, rather than at the level of the katex code.\ni.e. you could add in katex-fonts/.../makeFF in the relevant section (I think, \"Main-regular\"; there's also a \"Greek\" section but I'm not sure what it's for) something like say\n0x41 => 0x391,          # for capital Alpha\nand so on for other letters.\nYou might argue that the end result would look the same, but it would be cleaner -- for example copy/pasting would work correctly (and I understand that copy/pasting is probably not a priority right now for KaTeX but one day it might be)\nPS: I just noticed, this is precisely how \\omicron was added as well...\n. in fact I might as well give you the whole list\n0x41 => 0x391,          # (missing Alpha)\n    0x42 => 0x392,          # (missing Beta)\n    [0,1] => 0x393,         # \\Gamma, \\Delta\n    0x45 => 0x395,          # (missing Epsilon)\n    0x5A => 0x396,          # (missing Zeta)\n    0x48 => 0x397,          # (missing Eta)\n    2 => 0x398,             # \\Theta\n    0x49 => 0x399,          # (missing Iota)\n    0x4B => 0x39A,          # (missing Kappa)\n    3 => 0x39B,             # \\Lambda\n    0x4D => 0x39C,          # (missing Mu)\n    0x4E => 0x39D,          # (missing Nu)\n    4 => 0x39E,             # \\Xi\n    0x4F => 0x39F,          # (missing Omicron)\n    5 => 0x3A0,             # \\Pi\n    0x50 => 0x3A1,          # (missing Rho)\n    6 => 0x3A3,             # \\Sigma\n    0x54 => 0x3A4,          # (missing Tau)\n    [7,8] => 0x3A5,         # \\Upsilon, \\Phi\n    0x58 => 0x3A7,          # (missing Chi)\n    [9,0xA] => 0x3A8,       # \\Psi, \\Omega. have a look at omicron:\njs\n    [0x61,0x7A] => 0x61,    # a - z\n    0x6F => 0x3BF,          # omicron\nit definitely redefines o. In case you do decide to go ahead with the font change, let me point out the necessary changes (tested on my fork), before I forget them:\n- replace in makeFF (fonts) and mapping.pl (metrics) the partial capital greek list with the updated one mentioned above\n- in symbols.js replace the latin capital letters of your latest PR with the unicode itself (that's the lazy way; I did it slightly differently but the end result is the same). another workaround is to type -{}-{}-{}. this issue isn't a big deal, but\nI thought I'd point out anyway.\nOn 27 May 2018 at 22:28, Erik Demaine notifications@github.com wrote:\n\nThanks for spotting. As a temporary work-around, \\verb|a---b| should work\ncorrectly. We should be able to fix the \\texttt behavior, though I forget\nhow ligatures like this are processed in KaTeX.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Khan/KaTeX/issues/1367#issuecomment-392327537, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AEawh9bMCIVuJ_wqMbf3BBKpTkTGR1Zgks5t2pwEgaJpZM4UPNiU\n.\n. I think it's the normal behavior for other \\textX.\n\nOn 30 May 2018 at 01:12, Kevin Barabash notifications@github.com wrote:\n\nDoes this occur in any of the other \\textX commands or is it just a\n\\texttt thing?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Khan/KaTeX/issues/1367#issuecomment-392813789, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AEawh0f8JmiHvTXAxhKX7NGB1YY-4IIkks5t3WVMgaJpZM4UPNiU\n.\n. I hadn't thought of using \\includegraphics, I'll give it a try.. oh. oops. in any case, to reply to your comment, I agree that the dimensions (say height/depth) should be mandatory. In a sense I think katex shouldn't worry about it -- if the user gives wrong information (e.g., if the dimensions can't really be determined yet), then so be it.. I'm no expert on security issues, so pardon my very naive question: how is \\html{<script>...</script> a security hole exactly? i.e., whenever one opens a webpage in the browser, one allows the author of the page to execute arbitrary javascript code on our client, so how is the \\html above any different?. As to contributing myself, I'd be happy to, but to be honest there's just not enough documentation for an outsider to be able to write proper code. For example, what are the different types of arguments to a function? is that explained anywhere? I'm reading defineFunction.js but don't see anything there (incidentally, I suspect L73 should read \"math mode\", not \"text mode\"). thanks, will take a look when I have time. and, yes, my current version of \\html is a lame hack of \\url / \\href.. \n",
    "BrianHung": "Example of how this should be rendered out is:\n\n. I have realized this is the same issue as #1189 .. ",
    "Danmou": "Same problem with \u22d8 (U+22D8). ",
    "LiterallyVoid": "Isn't this fixed? #1273 has been merged.. ",
    "DavidSouthgate": "This was an implementation issue. Line is displayed if page is zoomed in in browser. ",
    "EthanLuisMcDonough": "Thanks for the feedback.  Changes have been made.  . Yes, I tested.  katex.version returns \"0.10.0-pre\". . ",
    "lukekrikorian": "[clabot:check]. ",
    "BenjaminHoegh": "well it was just me there have made a typo.\nA little question how to intergrade KaTeX into Marked ?. i know, only problem with that one is that it use require.\nAnd about the error i think it happed when adding normal markdown and html into a markdown file there are rendered by Marked before Katex render it. @ronkok Don't know why but for some reason after I code my project up again and did what you told, it's work. So thanks \ud83d\udc4d \nbtw there should maybe be a specific error message for code like this: $$c = \\\\pm\\\\sqrt{a^2 + b^2}$$ to make the coder knowing that he need to change the \\\\ to \\. > Can you post which cases are matching when they shouldn't be matching?\njsfiddle. ",
    "ibayer": "@edemaine \nThanks for adding the \\tag support!\nCan this be used to reference a tagged equation?\nI also observed that the tag doesn't seem to respect the document layout (see tag way out on the left\nin screen shot below). I have compared this with Mathjax line numbering which stays in the text column.\nIs this the expected behavior?\n\nI'm using KaTex to render equation in markdeep.\n. ",
    "doraven": "@ibayer \nI had the same issue as you.\n\nIt's extremly right of the explore window.\nor this one looking better\n\nlooking inside the dom structure , i found that the upper one did not set div width.\n\nIt's better now. ",
    "zopyx": "Latest 0.9.0.\nYou can check yourself with the evaluation licence of PrinceXML.\nYou just need to run\nprince --javascript test.html -o out.pdf\nThey (PrinceXML, PDFreactor) all support JS and SVG.\nThe same input works fine on normal browsers:\n````\n<!DOCTYPE html>\n\n\n\n\n\n<body>\n    <div id=\"element\">\n    </div>\n\n    <script type=\"text/javascript\">\n        var el = document.getElementById(\"element\");\n        katex.render(\"c = \\\\pm\\\\sqrt{a^2 + b^2}\", el);\n    </script>\n</body>\n\n\n```. I have only checked this simple examples, just for curiosity.\nI am sure that the print css renderers are to blame here (because of their homemade engines for HTML, Javascript and CSS). wkhtmltof does not provide JS support. \nKaTeX seems to work nicely with SlimmerJS (because it uses Webkit under hood). The PrintCSS tools all have their own limited engines. Also PhantomJS should work (although being outdated and unmaintained afaik).. ",
    "NhaPCS": "It runs very well if I have a few of WebView on one screen. In my case, I need multi WebView on one screen. For example https://drive.google.com/file/d/14GlGuDZgYryBb3dL8Fa9uFlV9G2aq42Y/view?usp=sharing\nIt took about 2-4s delay to load data. ",
    "clarfon": "@edemaine You can change the line height for katex and it will actually affect the text, if it takes up only one line. Otherwise, text which takes up multiple lines will always have lines 1.2em tall, as that's factored into the spacing that KaTeX does normally.\nSo, to clarify, setting line-height for katex does work, and setting font-size works too because everything is in terms of em. But because everything is in terms of em, there's actually no way of configuring line-height for multiline content via katex-display. It will only affect the line-height of the first line.. ",
    "infusion": "I would like to see this feature as well, especially with auto-render extracting the line height from the parent DOM node to apply it to multi-line blocks like array or equation. @edemaine I changed the line-height attribute of .katex in the web developer tools on site and it appears to leave exponentials and subscripts of symbols behind, even if it principally works.\nImplementing arraystretch could make sense in a second step but in contrast to LaTex, in the web world the renderer should obey the main document. \nAdding line height as a config option as suggested by the OP plus making it set by the auto-renderer should be the better option in my opinion.. Can confirm this problem with \\neq on OSX and newest Chrome 72.0.3626.109. Yep, in Tex I tend to use \\lightning as well. The question is if we need to increase the file size of the fonts for symbols that are rarely used or could the official recommendation be to use \\text with unicodes. If so, I wonder how to avoid those warnings. Even if the lightning symbol is displayed correctly, I don't know if it conflicts internally somehow to result in that warning. Is it save to adjust the strict setting for that case?. @kevinbarabash I embed KaTex into my site where I use a Google Font. But I think that does not matter. The important thing is that unicode is used on the site. I tested KaTex with html entities which fails with a parse error. But using \\text simply adds\n<span class=\"mord text\"><span class=\"mord\">\u21af</span></span>\nto the DOM - which is all fine. I also have no problem using \\text or add a macro for \\lightning. My concerns are regarding the warnings. Are they save to ignore or it just luck that it works with the tex snippet I parsed?. ",
    "jbolda": ":wave:\nhttps://reactjs.org relies on https://gatsbyjs.org of which builds the docs partially through flowtypes and partially through markdown docs. I use KaTeX within my gatsby websites, so I have been following along here. It should handle all of your requirements from the sounds of it. Thought you would appreciate the heads up!\nCheers and thanks for the hard work!. I haven't used docusaurus, but looking briefly at the docs, it seems to be a documentation site in a box. Everything is driven by markdown files for documentation. Versioning seems to be done by copying the current release into a new folder.\nGatsby is built around making more than just documentation sites, and it has a rich plugin system. It can essentially source \"data\" from anything, including your library itself using a plugin for documentationjs (see the Flow support). Even advanced features become much more attainable as the Reactjs team added a plugin for the code repls seen on the React homepage. You can also write your docs in markdown (and there is already a possibly relevant plugin for some of your needs). The markdown is parsed using remarkjs of which has it's own plugin support.\nI believe gatsby will give you the flexibilty you are looking for while also having docs that stick with the code and are continually updated.. @kevinbarabash they have mostly punted the ball on it. React has \"solved\" it by relying on Netlify's cache of immutable builds, but that feels rather fragile. My only thought might be to keep a branch for each major version, and you can push those to various hosts separately, but that can become unweildy over time.\nIt feels like something tied to Github releases is the best direction, but I don't know of any hosts that support interaction with them. Perhaps a CI/CD system could just deploy to a new S3 bucket, etc. on each new tagged release.\nUltimately, it seems if you are documenting with more then just a couple markdown files, keeping old documentation around becomes much more complex. The positive is that your current version / master docs tend to be much better maintained.. Actually, with remark doing much of the heavy lifting, a KaTeX plugin is surprisingly simple to write. The plugin I linked above uses delimiters as @ronkok mentioned, and I have run my own custom plugins to implement KaTeX in more involved situations.\nWhile I might argue about the difficulting of reproduction in markdown, I think the ultimate point still stands to avoid markdown for the function support page. I suspect it would be a major pain to manage the page in markdown (as I suspect it is already rather involved keeping a html file up to date).\nI think this is one of those places where flow annotations would work really well. Essentially you are writing your docs directly next to your code, and the function list self-updates effectively. It would require some consistent use of the tags, but the html file would become a reactjs file with a handful of maps().. You can annotate each function, and then build the function webpage by pulling in those annotations directly from your source code. As you update or add new annotations, the webpage would update as well.\nAs an example, this core code drives this page directly. It isn't a great example as it probably comes across contrived, but it is part of the core code. It is used to build up the queue of actions to run at the start of the process.. Huh, you are right. Either something changed or I was mistaken. I don't know anything about Docusaurus, but the gatsby plugin relies on documentation.js. I don't know if that is helpful or not.. ",
    "danmackinlay": "Yes, this is rarely essential on web pages but split is really useful in things like IEEE journals where the columns are narrow - obviously this is not quite the primary use-case of KaTeX as such, but for having the same equations across both.\nApropos @edemaine's idea, the AMS implementation seems to be distinct from matrix but I suspect that recycling matrix to this end would be adequate for most KaTeX use-cases.. ",
    "jdmichaud": "Might want to checkout what Latex2JS is able to do. It does not seem to be maintained and is not really documented either, but they were able to use the pspicture environment in the browser.. ",
    "pariola": "I'm using Preact and i'm trying to render a math equation gotten from a MongoDB so when i use renderToString it gives a Parse Error when i use the $$. Thanks for the info \ud83d\udc4d. Thanks, i finally got it. I hooked up the auto-render on the componentDidUpdate's hook of a component . ",
    "balakrishnan1978": "I agree will not work in LaTeX. ",
    "Danita": "Oh, thanks guys! I tried that way now and it works OK. It was just my lack of LaTeX experience :). ",
    "OnlineVagrant": "Thank you. I saw that environment in the Function support but didn't think it could be used this way. Is there a Katex tutorial I can look at for the not so obvious things I may want to achieve?. Thanks a lot.\n. Thank you.However, \\tag adds (). Will you be able to toggle this on or off in a future release?.   \\tag*works fine. In relation to using  HTML/CSS, mathematical symbols don't get displayed when wrapped with <div> <\\div> .. Sorry for the late reply. I have been trying to remember how I achieved  it using the div tags but I cant get it to work. Can you give me an example of how to use html or css to achieve this.( I am using a markdown editor that supports Katex). Thanks you, it seems the problem was with my markdown editor that is now restricting the <div> tag by default. Also the extra line was needed as you suggested. :). Thank you for the reply.. Never mind. I figured it out. :). @edemaine What do you mean by what Context are you using katex? I'm using a software call boostnote that uses katex to renders maths. No I have not. I thought it was a katex issue. Also, I wouldn't even know how to beginning explaining the problem.  . ",
    "twistedcubic": "Thanks for adding macros support! Are there plans to support macros definitions persistence across multiple renderToString calls? This would be useful to parse math across a document, without appending the macros definition each time.. Thanks @edemaine! I was hoping for \\newcommand persistence, because \\newcommand has become much more widely used than \\def or \\gdef, but I could see if it's a design decision to keep \\newcommand local, and resort to \\gdef for everything global. I will do string substitution on the macros in the meanwhile.\nI tried \\gdef with console.log(katex.renderToString(\"\\\\gdef\\\\a{1}\"));\nconsole.log(katex.renderToString(\"\\\\a\"));, but got the \"EOF expected\" error (for the second line) that happens when KaTeX doesn't recognize a symbol. Whereas console.log(katex.renderToString(\"\\\\gdef\\\\a{1} \\\\a\")); produces the expected 1. Can you tell me what I am missing?. Thanks! Using\\newcommand does work for defining macros now, but these definitions don't persist across different calls to renderToString like gdef macros do. \nAre there plans to make macros defined with newcommand global, maybe with an option to do so?. I re-read Erik's answer from June, which I thought was before this PR's merge, but now it looks to be after. So I think the answer to whether newcommand macros can be made global, even as an optional operation, is no.. Thanks for your comment @edemaine. I also find it asymmetric. I do see your point on it being a reflection of LaTex, but since \\newcommand is so frequently nowadays, I think it would be very useful to allow a \\newcommand macro to persist across calls to renderToString. Especially since \\gdef is not as expressive as \\newcommand.. Do you have any tips on how I can write a layer on top of katex.js, to remember the macros parsed from \\newcommand commands in some macros list, and then pass this macros object to other calls of renderToString? Basically what you said should be very easy to do above.\nMy problem is that I can't concatenate the TeX strings together into one call of renderToString, especially since I want to continue parsing even after one string contains illegal syntax. <--Edit: which I can partially address by setting throwOnError: false and checking the rendering color.\nI would be happy to open a separate discussion topic, if this is unnecessarily tagging onto the work that you already finished. Thanks!. ",
    "colinfang": "@twistedcubic  I think @edemaine  means that you need to do \nlet macros = {}\nconsole.log(katex.renderToString(\"\\\\gdef\\\\a{1}\", {macros: macros}));\nconsole.log(katex.renderToString(\"\\\\a\", {macros: macros}));. ",
    "InThisStyle10s6p": "I see, thank you. I suppose I thought the Unicode equivalent of leqslant would have been supported since the equivalent of geqslant seemed to be. I do get that warning about strict mode.\nI can always use the backslash commands for unsupported characters, certainly.. ",
    "OrkhanAlikhanov": "Thank you both! This was the first reason why I didn't use KaTeX instead of MathJax.. @edemaine Hey! I've removed MathJax and integrated KaTeX. Everything seems okay so far. Rendering is now super fast! Especially in android and ios apps. Thank you all!. ",
    "zacharyrs": "[clabot:check]. Think that should do it, now to see if it looks okay.... @kevinbarabash @edemaine \nThanks for the explanations on how to grab screenshots, I assumed I just didn't have access. \nAlso, woops regarding it being too wide, I wasn't sure so I just went overboard with it, I'll tidy it up in a sec. Possibly worth changing the font size of that section so you can have longer output?\nRegarding where this is from, I just needed it for a uni class where they said to use a dashed line, and Boostnote, which uses KaTeX, couldn't. It's basically the arydshln package, but I only implemented ':', as ';' seemed a bit pointless till there's a way to configure the length of the strokes.\nAfter a quick google, I found this https://stackoverflow.com/a/31315911/9440025, which does give a few different ways we could add this with more functionality.\nAlso, on a bit of a tangent, and more just a question regarding LaTeX/KaTeX, why use matrix when there's no support for separators, or more specifically, why not add such support to the various matrix types?\nIt'd be tangent to the existing implementations, but shouldn't be a dealbreaker?. @kevinbarabash @edemaine \nI can't seem to grab the screenshots, not sure where they are.... Okay, lines are back up.\n\nAnd regarding the not adding support, it's something that I needed for uni, so I was curious - it's a real pain to wrap everything in \\left and \\right, plus I'm lazy...\nFrom what I gather, there's no real support to create/modify environments locally, but I can create some macros instead. I'll take a look into adding that to BoostNote I guess.\n. @kevinbarabash update the screenshots?. Woops that makes sense. Done now.\n. When I have some more time, I'll add support for customising the dashes, probably via an SVG.. @ronkok thanks for the feedback, perhaps gradients could be used instead?\nhttps://stackoverflow.com/a/31315911/9440025 suggests three methods to implement a dashed border that's customisable, the second being border gradients.\nWith them, the major con would be browser support, but https://caniuse.com/#feat=css-gradients shows that's fine now.\nThe minor con would be border radius would not work, but that wouldn't be used on the separator anyway.\n. @ronkok thanks for the explanation!\nI'm currently cramming for uni exams, but after these I'll revisit it.\nI did play around with a very thin background image, and can see that if less than 0.5px fills any pixel, it doesn't go black, but otherwise doesn't seem to go grey either. Also, with regards to borders, they do vanish when less than 0.5px coverage occurs. You can see this by just offsetting a 0.5px border by a 0.5px margin.\nI think that with the background image, if a min-width of 1px was set, then at least one pixel would go dark, which should prevent the issue. By setting the background width to a huge number, the lines will span the whole element, which we can then just ensure is at least 1px wide.\nIt appears that, at least in chrome, a margin is simply rounded to the nearest whole pixel.\n. Yes, I'd use that same concept on the gradient border.\nUsing the macOS Color Meter tool, locked onto a pixel, and then fiddling with the margin, it appears to completely black out whichever pixel the background covers more of on Chrome. This also holds true on Firefox. . > browser default settings for printing a page will not print background images\nCan mitigate that on chrome, safari, and firefox with the following:\ncss\n* {\n    -webkit-print-color-adjust: exact !important; /* Chrome, Safari */\n    color-adjust: exact !important; /* Firefox */\n}\nIE is still a pain though.. Woops, okay yeah I'll put that back.. ",
    "nebrelbug": "@edemaine How did you implement the workaround? I'm trying to author a library :). @edemaine thanks! The webpack issue was a little unclear, but I understand now.. ",
    "Honghe": "It is a bug of blackfriday markdown engine https://github.com/russross/blackfriday/issues/199. ",
    "codecov-io": "Codecov Report\n\nMerging #1436 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1436   +/-\n=======================================\n  Coverage   93.66%   93.66%         \n=======================================\n  Files          80       80         \n  Lines        4653     4653         \n  Branches      807      807         \n=======================================\n  Hits         4358     4358         \n  Misses        261      261         \n  Partials       34       34\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.85% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 84.99% <\u00f8> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/svgGeometry.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3dfd17d...cc429e2. Read the comment docs.\n. # Codecov Report\nMerging #1674 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1674   +/-\n=======================================\n  Coverage   93.66%   93.66%         \n=======================================\n  Files          80       80         \n  Lines        4653     4653         \n  Branches      807      807         \n=======================================\n  Hits         4358     4358         \n  Misses        261      261         \n  Partials       34       34\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.85% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 84.99% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 64745b5...e388fdd. Read the comment docs.\n. # Codecov Report\nMerging #1767 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1767   +/-\n=======================================\n  Coverage   93.67%   93.67%         \n=======================================\n  Files          80       80         \n  Lines        4666     4666         \n  Branches      813      813         \n=======================================\n  Hits         4371     4371         \n  Misses        261      261         \n  Partials       34       34\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.62% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 85.04% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 112582d...b6551a0. Read the comment docs.\n. # Codecov Report\nMerging #1781 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1781   +/-\n=======================================\n  Coverage   93.67%   93.67%         \n=======================================\n  Files          80       80         \n  Lines        4666     4666         \n  Branches      813      813         \n=======================================\n  Hits         4371     4371         \n  Misses        261      261         \n  Partials       34       34\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.62% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 85.04% <\u00f8> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/symbols.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f4e2418...603dcb5. Read the comment docs.\n. # Codecov Report\nMerging #1784 into master will increase coverage by 0.85%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1784      +/-\n==========================================\n+ Coverage   93.66%   94.51%   +0.85%   \n==========================================\n  Files          80       80            \n  Lines        4653     4653            \n  Branches      807      808       +1   \n==========================================\n+ Hits         4358     4398      +40   \n+ Misses        261      230      -31   \n+ Partials       34       25       -9\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.85% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 86.54% <100%> (+1.54%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| contrib/auto-render/auto-render.js | 76.92% <100%> (+76.92%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ce3840d...59149d3. Read the comment docs.\n. # Codecov Report\nMerging #1787 into master will decrease coverage by 0.01%.\nThe diff coverage is 83.33%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1787      +/-\n==========================================\n- Coverage   93.67%   93.65%   -0.02%   \n==========================================\n  Files          80       80            \n  Lines        4666     4668       +2   \n  Branches      813      814       +1   \n==========================================\n+ Hits         4371     4372       +1   \n- Misses        261      262       +1   \n  Partials       34       34\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.6% <83.33%> (-0.02%) | :arrow_down: |\n| #test | 85% <83.33%> (-0.04%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/styling.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/raisebox.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/Parser.js | 97% <80%> (-0.24%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ec6a2b4...b111b1a. Read the comment docs.\n. # Codecov Report\nMerging #1789 into master will decrease coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1789      +/-\n==========================================\n- Coverage   93.67%   93.66%   -0.02%   \n==========================================\n  Files          80       80            \n  Lines        4666     4653      -13   \n  Branches      813      807       -6   \n==========================================\n- Hits         4371     4358      -13   \n  Misses        261      261            \n  Partials       34       34\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.85% <52.94%> (+0.23%) | :arrow_up: |\n| #test | 84.99% <100%> (-0.05%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/font.js | 95.65% <\u00f8> (-0.19%) | :arrow_down: |\n| src/SourceLocation.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/styling.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/functions/sizing.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/MacroExpander.js | 95.68% <100%> (\u00f8) | :arrow_up: |\n| src/Parser.js | 97.09% <100%> (-0.15%) | :arrow_down: |\n| src/Lexer.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ec6a2b4...51db9b9. Read the comment docs.\n. # Codecov Report\nMerging #1793 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1793      +/-\n==========================================\n+ Coverage   94.58%   94.59%   +0.01%   \n==========================================\n  Files          80       80            \n  Lines        4655     4665      +10   \n  Branches      809      810       +1   \n==========================================\n+ Hits         4403     4413      +10   \n  Misses        227      227            \n  Partials       25       25\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.86% <100%> (+0.02%) | :arrow_up: |\n| #test | 86.62% <90.9%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/utils.js | 94.87% <100%> (+1.76%) | :arrow_up: |\n| src/mathMLTree.js | 98.3% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8346294...a9a54be. Read the comment docs.\n. # Codecov Report\nMerging #1794 into master will decrease coverage by 0.06%.\nThe diff coverage is 78.94%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1794      +/-\n==========================================\n- Coverage   94.63%   94.57%   -0.07%   \n==========================================\n  Files          80       80            \n  Lines        4664     4678      +14   \n  Branches      811      816       +5   \n==========================================\n+ Hits         4414     4424      +10   \n- Misses        225      229       +4   \n  Partials       25       25\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.76% <68.42%> (-0.1%) | :arrow_down: |\n| #test | 86.66% <78.94%> (-0.05%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parseNode.js | 84.21% <\u00f8> (\u00f8) | :arrow_up: |\n| src/defineFunction.js | 93.75% <\u00f8> (\u00f8) | :arrow_up: |\n| src/utils.js | 93.75% <100%> (+0.64%) | :arrow_up: |\n| src/Parser.js | 97.09% <100%> (-0.02%) | :arrow_down: |\n| src/functions/includegraphics.js | 92.95% <50%> (-1.25%) | :arrow_down: |\n| src/functions/href.js | 92% <50%> (-8%) | :arrow_down: |\n| src/Settings.js | 76.74% <85.71%> (+1.74%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7f778d1...acb9a7f. Read the comment docs.\n. # Codecov Report\nMerging #1796 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1796   +/-\n=======================================\n  Coverage   94.58%   94.58%         \n=======================================\n  Files          80       80         \n  Lines        4655     4655         \n  Branches      809      809         \n=======================================\n  Hits         4403     4403         \n  Misses        227      227         \n  Partials       25       25\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.83% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 86.61% <\u00f8> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/buildHTML.js | 95.77% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1a7ce6c...ec768a4. Read the comment docs.\n. # Codecov Report\nMerging #1798 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1798   +/-\n=======================================\n  Coverage   94.51%   94.51%         \n=======================================\n  Files          80       80         \n  Lines        4653     4653         \n  Branches      808      808         \n=======================================\n  Hits         4398     4398         \n  Misses        230      230         \n  Partials       25       25\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.85% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 86.54% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f10de96...1229c57. Read the comment docs.\n. # Codecov Report\nMerging #1806 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1806      +/-\n==========================================\n+ Coverage   94.58%   94.58%   +<.01%   \n==========================================\n  Files          80       80            \n  Lines        4655     4658       +3   \n  Branches      809      809            \n==========================================\n+ Hits         4403     4406       +3   \n  Misses        227      227            \n  Partials       25       25\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.84% <100%> (\u00f8) | :arrow_up: |\n| #test | 86.62% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/phantom.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/smash.js | 88.09% <100%> (+0.59%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d604965...e092036. Read the comment docs.\n. # Codecov Report\nMerging #1807 into master will increase coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1807      +/-\n==========================================\n+ Coverage   94.51%   94.58%   +0.06%   \n==========================================\n  Files          80       80            \n  Lines        4653     4655       +2   \n  Branches      808      809       +1   \n==========================================\n+ Hits         4398     4403       +5   \n+ Misses        230      227       -3   \n  Partials       25       25\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.83% <50%> (-0.02%) | :arrow_down: |\n| #test | 86.61% <100%> (+0.07%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/Parser.js | 97.1% <100%> (+0.01%) | :arrow_up: |\n| src/functions/includegraphics.js | 94.2% <0%> (+4.34%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 45a58f8...264856c. Read the comment docs.\n. # Codecov Report\nMerging #1808 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1808   +/-\n=======================================\n  Coverage   94.58%   94.58%         \n=======================================\n  Files          80       80         \n  Lines        4655     4655         \n  Branches      809      809         \n=======================================\n  Hits         4403     4403         \n  Misses        227      227         \n  Partials       25       25\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.83% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 86.61% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d604965...2ebf785. Read the comment docs.\n. # Codecov Report\nMerging #1809 into master will decrease coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1809      +/-\n==========================================\n- Coverage   94.58%   94.56%   -0.03%   \n==========================================\n  Files          80       80            \n  Lines        4655     4656       +1   \n  Branches      809      809            \n==========================================\n  Hits         4403     4403            \n- Misses        227      228       +1   \n  Partials       25       25\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.81% <100%> (-0.02%) | :arrow_down: |\n| #test | 86.61% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/phantom.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/smash.js | 87.8% <100%> (+0.3%) | :arrow_up: |\n| src/buildCommon.js | 98.08% <0%> (-0.39%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8346294...7e64e6d. Read the comment docs.\n. # Codecov Report\nMerging #1811 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1811   +/-\n=======================================\n  Coverage   94.74%   94.74%         \n=======================================\n  Files          79       79         \n  Lines        4659     4659         \n  Branches      810      810         \n=======================================\n  Hits         4414     4414         \n  Misses        221      221         \n  Partials       24       24\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.86% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 86.79% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 515411d...2d98dbe. Read the comment docs.\n. # Codecov Report\nMerging #1813 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1813      +/-\n==========================================\n- Coverage   94.56%   94.56%   -0.01%   \n==========================================\n  Files          80       80            \n  Lines        4656     4655       -1   \n  Branches      809      808       -1   \n==========================================\n- Hits         4403     4402       -1   \n  Misses        228      228            \n  Partials       25       25\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.79% <58.33%> (-0.03%) | :arrow_down: |\n| #test | 86.61% <100%> (-0.01%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/operatorname.js | 94.73% <100%> (\u00f8) | :arrow_up: |\n| src/mathMLTree.js | 98.27% <100%> (-0.03%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f5234a2...509bc9e. Read the comment docs.\n. # Codecov Report\nMerging #1814 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1814      +/-\n==========================================\n+ Coverage   94.61%   94.63%   +0.02%   \n==========================================\n  Files          80       80            \n  Lines        4657     4664       +7   \n  Branches      810      811       +1   \n==========================================\n+ Hits         4406     4414       +8   \n+ Misses        226      225       -1   \n  Partials       25       25\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.86% <76.92%> (+0.01%) | :arrow_up: |\n| #test | 86.7% <100%> (+0.04%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/Settings.js | 75% <100%> (+1.47%) | :arrow_up: |\n| src/buildTree.js | 100% <100%> (+5.88%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 58c36c6...875cc61. Read the comment docs.\n. # Codecov Report\nMerging #1816 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1816      +/-\n=========================================\n+ Coverage   94.56%   94.6%   +0.04%   \n=========================================\n  Files          80      80            \n  Lines        4655    4653       -2   \n  Branches      808     810       +2   \n=========================================\n  Hits         4402    4402            \n+ Misses        228     226       -2   \n  Partials       25      25\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.83% <100%> (+0.03%) | :arrow_up: |\n| #test | 86.65% <100%> (+0.03%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/genfrac.js | 94.31% <100%> (+1.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 647c661...1c39b15. Read the comment docs.\n. # Codecov Report\nMerging #1820 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1820      +/-\n=========================================\n+ Coverage    94.6%   94.6%   +<.01%   \n=========================================\n  Files          80      80            \n  Lines        4653    4655       +2   \n  Branches      810     810            \n=========================================\n+ Hits         4402    4404       +2   \n  Misses        226     226            \n  Partials       25      25\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.83% <100%> (\u00f8) | :arrow_up: |\n| #test | 86.65% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 97.07% <100%> (+0.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e85cb97...e27c8b2. Read the comment docs.\n. # Codecov Report\nMerging #1820 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1820      +/-\n=========================================\n+ Coverage    94.6%   94.6%   +<.01%   \n=========================================\n  Files          80      80            \n  Lines        4653    4655       +2   \n  Branches      810     810            \n=========================================\n+ Hits         4402    4404       +2   \n  Misses        226     226            \n  Partials       25      25\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.83% <100%> (\u00f8) | :arrow_up: |\n| #test | 86.65% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 97.07% <100%> (+0.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e85cb97...4fa8d77. Read the comment docs.\n. # Codecov Report\nMerging #1825 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1825   +/-\n======================================\n  Coverage    94.6%   94.6%         \n======================================\n  Files          80      80         \n  Lines        4653    4653         \n  Branches      810     811    +1   \n======================================\n  Hits         4402    4402         \n  Misses        226     226         \n  Partials       25      25\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.83% <100%> (\u00f8) | :arrow_up: |\n| #test | 86.65% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/genfrac.js | 94.31% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e85cb97...77bae83. Read the comment docs.\n. # Codecov Report\nMerging #1827 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1827      +/-\n==========================================\n+ Coverage   94.61%   94.63%   +0.02%   \n==========================================\n  Files          80       80            \n  Lines        4657     4679      +22   \n  Branches      810      813       +3   \n==========================================\n+ Hits         4406     4428      +22   \n  Misses        226      226            \n  Partials       25       25\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.89% <100%> (+0.05%) | :arrow_up: |\n| #test | 86.72% <100%> (+0.06%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/enclose.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/macros.js | 97.08% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 58c36c6...7c27db9. Read the comment docs.\n. # Codecov Report\nMerging #1836 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1836   +/-\n======================================\n  Coverage    94.6%   94.6%         \n======================================\n  Files          80      80         \n  Lines        4655    4655         \n  Branches      810     810         \n======================================\n  Hits         4404    4404         \n  Misses        226     226         \n  Partials       25      25\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.83% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 86.65% <\u00f8> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/functions/op.js | 98.93% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 062a28f...6566257. Read the comment docs.\n. # Codecov Report\nMerging #1839 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1839      +/-\n==========================================\n+ Coverage    94.6%   94.61%   +<.01%   \n==========================================\n  Files          80       80            \n  Lines        4655     4657       +2   \n  Branches      810      810            \n==========================================\n+ Hits         4404     4406       +2   \n  Misses        226      226            \n  Partials       25       25\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.84% <100%> (\u00f8) | :arrow_up: |\n| #test | 86.66% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2cd37ae...aa31bd9. Read the comment docs.\n. # Codecov Report\nMerging #1843 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1843   +/-\n=======================================\n  Coverage   94.74%   94.74%         \n=======================================\n  Files          79       79         \n  Lines        4659     4659         \n  Branches      810      810         \n=======================================\n  Hits         4414     4414         \n  Misses        221      221         \n  Partials       24       24\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.86% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 86.79% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1c2d9d4...e1dfca0. Read the comment docs.\n. # Codecov Report\nMerging #1845 into master will decrease coverage by <.01%.\nThe diff coverage is 90.9%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1845      +/-\n==========================================\n- Coverage   94.63%   94.63%   -0.01%   \n==========================================\n  Files          80       80            \n  Lines        4664     4675      +11   \n  Branches      811      814       +3   \n==========================================\n+ Hits         4414     4424      +10   \n- Misses        225      226       +1   \n  Partials       25       25\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.86% <90.9%> (\u00f8) | :arrow_up: |\n| #test | 86.69% <81.81%> (-0.02%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parseNode.js | 84.21% <\u00f8> (\u00f8) | :arrow_up: |\n| src/environments/array.js | 98.32% <100%> (+0.02%) | :arrow_up: |\n| src/functions/color.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/functions/delimsizing.js | 96.7% <83.33%> (-0.95%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7f778d1...9817d91. Read the comment docs.\n. # Codecov Report\nMerging #1847 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1847   +/-\n=======================================\n  Coverage   94.63%   94.63%         \n=======================================\n  Files          80       80         \n  Lines        4664     4664         \n  Branches      811      811         \n=======================================\n  Hits         4414     4414         \n  Misses        225      225         \n  Partials       25       25\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.86% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 86.7% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7f778d1...097ef84. Read the comment docs.\n. # Codecov Report\nMerging #1851 into master will increase coverage by 0.1%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1851     +/-\n=========================================\n+ Coverage   94.63%   94.74%   +0.1%   \n=========================================\n  Files          80       79      -1   \n  Lines        4664     4659      -5   \n  Branches      811      810      -1   \n=========================================\n  Hits         4414     4414           \n+ Misses        225      221      -4   \n+ Partials       25       24      -1\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.86% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 86.79% <\u00f8> (+0.09%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| contrib/copy-tex/katex2tex.js | 0% <0%> (\u00f8) | :arrow_up: |\n| contrib/copy-tex/copy-tex.js | 0% <0%> (\u00f8) | :arrow_up: |\n| contrib/mathtex-script-type/mathtex-script-type.js | 0% <0%> (\u00f8) | :arrow_up: |\n| contrib/copy-tex/copy-tex.webpack.js | | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2395833...215a02d. Read the comment docs.\n. # Codecov Report\nMerging #1852 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1852   +/-\n=======================================\n  Coverage   94.74%   94.74%         \n=======================================\n  Files          79       79         \n  Lines        4659     4659         \n  Branches      810      810         \n=======================================\n  Hits         4414     4414         \n  Misses        221      221         \n  Partials       24       24\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.86% <100%> (\u00f8) | :arrow_up: |\n| #test | 86.79% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9c05e20...15c2144. Read the comment docs.\n. # Codecov Report\nMerging #1852 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1852   +/-\n=======================================\n  Coverage   94.74%   94.74%         \n=======================================\n  Files          79       79         \n  Lines        4659     4659         \n  Branches      810      810         \n=======================================\n  Hits         4414     4414         \n  Misses        221      221         \n  Partials       24       24\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.86% <100%> (\u00f8) | :arrow_up: |\n| #test | 86.79% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/symbols.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9c05e20...b3fafd3. Read the comment docs.\n. # Codecov Report\nMerging #1861 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1861   +/-\n=======================================\n  Coverage   94.74%   94.74%         \n=======================================\n  Files          79       79         \n  Lines        4659     4659         \n  Branches      810      810         \n=======================================\n  Hits         4414     4414         \n  Misses        221      221         \n  Partials       24       24\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.86% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 86.79% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e016f4b...c318729. Read the comment docs.\n. # Codecov Report\nMerging #1862 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1862   +/-\n=======================================\n  Coverage   94.74%   94.74%         \n=======================================\n  Files          79       79         \n  Lines        4659     4659         \n  Branches      810      810         \n=======================================\n  Hits         4414     4414         \n  Misses        221      221         \n  Partials       24       24\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.86% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 86.79% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e016f4b...0c4d2b5. Read the comment docs.\n. # Codecov Report\nMerging #1870 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1870   +/-\n=======================================\n  Coverage   94.74%   94.74%         \n=======================================\n  Files          79       79         \n  Lines        4659     4659         \n  Branches      810      810         \n=======================================\n  Hits         4414     4414         \n  Misses        221      221         \n  Partials       24       24\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.86% <100%> (\u00f8) | :arrow_up: |\n| #test | 86.79% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/macros.js | 97.07% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 99892bb...22f41e3. Read the comment docs.\n. # Codecov Report\nMerging #1874 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1874   +/-\n=======================================\n  Coverage   94.74%   94.74%         \n=======================================\n  Files          79       79         \n  Lines        4659     4659         \n  Branches      810      810         \n=======================================\n  Hits         4414     4414         \n  Misses        221      221         \n  Partials       24       24\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #screenshotter | 88.86% <\u00f8> (\u00f8) | :arrow_up: |\n| #test | 86.79% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6ae095f...b465910. Read the comment docs.\n. \n",
    "gvgramazio": "Thanks for the fast reply. After my post I noted that the instruction .katex { font-size: 1em !important; } was already posted in your wiki about font options but it seems that is outdated (the last update is on Jul 2, 2017) and has some broken links (like the ones to font.less). Also, it refer to build the project with make but there is no makefile so I don't know if I missed something or if it refers to an older version.\nAh, by the way, your suggestion works like a charm.. ",
    "johnm719": "I just got katex working by having pandoc do a conversion. I am very new to tex and markup languages. Below is a piece of the HTML file. I ended up putting a \\footnotesize and a \\normalsize at the beginning and end of every piece of math that katex renders. Is there a way to put a new G (size) in the header section here?\n```html\n<!DOCTYPE html>\n\n\n\n\n\nNoise Figure One And Two: Friis and IEEE\n\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  \n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    var mathElements = document.getElementsByClassName(\"math\");\n    for (var i = 0; i &lt; mathElements.length; i++) {\n      var texText = mathElements[i].firstChild;\n      if (mathElements[i].tagName == \"SPAN\") { katex.render(texText.data, mathElements[i], { displayMode: mathElements[i].classList.contains(\"display\"), throwOnError: false } );\n    }}});\n\n[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]\n\n\nNoise factor \\footnotesize F \\normalsize is defined two different noninterchangeable ways. \\footnotesize F \\normalsize is the ratio of the input to output SNR of a 2-port device, or it is a non-linear transformation \\footnotesize F=1+T_e/290^\\circ K \\normalsize of an effective noise temperature ...\nOverview\n ... noise-figure and noise-factor are related as,\n\\footnotesize \\text{Noise Figure}=NF=10\\text{ }{\\log }_{10}\\left(F\\right)\\text{ and,} \\normalsize\n\\footnotesize \\text{Noise Factor}=F=\\frac{{10}^{NF}}{10}\\text{.} \\normalsize\nHistory and Derivation of First (Friis) Definition\nIn 1942,  ....\nHistory and Walk Through Of Second (IEEE) Definition\nOn June 11, 1959, the IRE published a standard [4] \nReferences\n\n\n```.",
    "samfearn": "Perfect, that fixed it. Sorry, I hadn't realised I wasn't using the current version, turns out 0.9.0 was hard-coded into a config file. FWIW I was using Safari rather than Chrome, so I guess it was a webkit issue rather than Chrome specific? . ",
    "vmarquet": "@edemaine Thank you for your comment.\nBut I don't understand. What stylesheet are you talking about? The css stylesheet https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0/katex.min.css is included in my fiddle, and yet the MathML is displayed, and display mode doesn't work.. Yes indeed, my bad, css wasn't loaded properly. It works now, thank you.. ",
    "yeshuanova": "I try to use 0.10.0-beta to render same math equation, but it layout is also error status.\n\nIn my case, I generate a statics web site by Hugo(v0.42.1) and use Mainroad theme. This theme default using MathJax to render math equation, so I add Katex support to its mathjax.html template. The new content is\nhtml\n{{ if and .IsPage (eq (.Param \"mathjax\") true) }}\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0/katex.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0/katex.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0/contrib/auto-render.min.js\"></script>\n<script>hljs.initHighlightingOnLoad();</script>\n<script>renderMathInElement(document.body);</script>\n{{ end }}\nThen, I run hugo server preview web site and see this error situation. Other equation has no error but only the formatting of matrix is off.\nBesides, I try to remove the style.css support from web site temporarily,   \n\nRemove style.css\n\n\n\nMainroad theme using katex\n\n\nMaybe the css style cause this layout error, but MathJax work OK. I don't know how to modify css configuration to fix this error. Can anybody give me some comments ?\n. The hugo's default Markdown processor is Blackfriday, it has some problems for latex notation. I had changed Markdown processor to Mmark and show math equation successfully.\nThe below latex expression\nlatex\nX=\\begin{bmatrix} M_1 \\\\ \\vdots \\\\ M_n \\end{bmatrix}\nis converted as \nhtml\n<p><span  class=\"math\">\\[X=\\begin{bmatrix} M_1 \\\\ \\vdots \\\\ M_n \\end{bmatrix}\\]</span></p>\nMy source HTML content is in here and inspector element about math equation is in here\nThe source page like this\n\nOutput HTML file and open it,  The correct layout is  shown\n\nMaybe css style of themes cause this problem, I will try setting another themes to check whether same problem is happened. Thank your answer! \n. I push web site example in Github repo - hugo_katex_examle. This is a Hugo web contents folder. You can install Hugo and run hugo server in the root folder and show the web site. In my case, It generates incorrect matrix equation in my browser (Chrome on macOS).\nIf you want to show MathJax rendering result, you can edit the template html file in themes/mainroad/layouts/partials/mathjax.html. Comment Katex script and uncomment MathJax parts. It should display correct matrix layout.\nThe origin web site folder is in public folder. You can run a http server in public folder like python -m http.server to see the web site.\n. @edemaine @ronkok Thanks yours answers for this problem. I am not familiar with CSS, so this case confused me. I replace all col- with mr-col- in Hugo Mainroad theme and now Katex rendering results is good !!\n. @ronkok I think this is not Hugo's issue. Hugo just generate static web site by template of theme. Hugo's themes is provided by other developers. In this case, this problem is just CSS conflict between Mainroad themes and Katex. (Mainroad is one of Hugo's theme, but Mainroad isn't developed by Hugo's team.)\n. @Vimux  Thanks for your updated. Now, web site show Katex math equation well. . ",
    "Vimux": "Mainroad owner here. I'm sorry for that weird bug. Mainroad doesn't use col-* rules at all. So I'll just delete this piece of code.\n@yeshuanova, please update Mainroad to the latest version.. ",
    "sw-tracker": "How can I check which version https://gitlab.com is using?. I am really sorry, I dont know where the JavaScript console in gitlab is. I created a new project in GitLab today, created a readme.md and started using KaTeX formulas in it.. ",
    "zuwensong": "thanks. ",
    "smilank3": "AsciiMath looks great and i think it is easy (to learn and write) compare to latex. \nany suggestion for AsciiMath -> LaTeX  library. Thank you.. @pkra Thanks it works. \ud83d\udc4d . ",
    "pkra": "\nany suggestion for AsciiMath -> LaTeX library. Thank you.\n\nThis was written with KaTeX in mind: https://github.com/christianp/asciimath2tex. A relevant issue would be https://github.com/mathjax/mathjax-v3/issues/135.\nBefore going all xkcd#386, you might consider that are valid reasons to avoid text mode (e.g., it is essentially a different layout system, also incompatible with CSS). Some are mentioned at https://docs.mathjax.org/en/latest/tex.html#differences.\nIf you are interested in thinking about the larger community, you might consider starting a discussion on the W3C MathOnWeb community group to work towards better compatibility across TeX-like conversion tools. (Disclaimer: I co-chair the CG.). >  I'm glad to hear that you're considering making this configurable in v3\nJust to clarify: I'm merely a community member nowadays, so I can't predict what the MathJax team will decide.. ",
    "Kupuyc": "Thank you for response.\nI don't use LaTeX and don't have good experience in it, so I found online render. It seems there is same behavior.\n```\n\\documentclass[12pt]{article}\n\\usepackage{amsmath}\n\\begin{document}\n\\begin{math}\n{98}^{2\\pi}\n\\\n\\\n{98}^{\\begin{aligned}&{+1.0} \\&-2.7\\end{aligned}}\n\\end{math} \n\\end{document}\n```\nBut as I said I'm bad in LaTeX and maybe I doing something wrong.. ",
    "fsejoseph": "I believe this would go in the Integration section Script: Can someone confirm please?\nhttps://github.com/RocketChat/Rocket.Chat/blob/09f809f67a0a1018b13d050b66ca21d6dbf8cab4/packages/rocketchat-katex/katex.js\n```js\n/\n * KaTeX is a fast, easy-to-use JavaScript library for TeX math rendering on the web.\n * https://github.com/Khan/KaTeX\n /\nimport _ from 'underscore';\nimport s from 'underscore.string';\nimport katex from 'katex';\nclass Boundary {\n    constructor() {}\nlength() {\n    return this.end - this.start;\n}\n\nextract(str) {\n    return str.substr(this.start, this.length());\n}\n\n}\nclass Katex {\n    constructor() {\n        this.delimiters_map = [\n            {\n                opener: '\\[',\n                closer: '\\]',\n                displayMode: true,\n                enabled: () => {\n                    return this.parenthesis_syntax_enabled();\n                }\n            }, {\n                opener: '\\(',\n                closer: '\\)',\n                displayMode: false,\n                enabled: () => {\n                    return this.parenthesis_syntax_enabled();\n                }\n            }, {\n                opener: '$$',\n                closer: '$$',\n                displayMode: true,\n                enabled: () => {\n                    return this.dollar_syntax_enabled();\n                }\n            }, {\n                opener: '$',\n                closer: '$',\n                displayMode: false,\n                enabled: () => {\n                    return this.dollar_syntax_enabled();\n                }\n            }\n        ];\n    }\n    // Searches for the first opening delimiter in the string from a given position\nfind_opening_delimiter(str, start) { // Search the string for each opening delimiter\n    const matches = (() => {\n        const map = this.delimiters_map;\n        const results = [];\n\n        map.forEach((op) => {\n            if (op.enabled()) {\n                results.push({\n                    options: op,\n                    pos: str.indexOf(op.opener, start)\n                });\n            }\n        });\n        return results;\n    })();\n\n    const positions = (() => {\n        const results = [];\n        matches.forEach((pos) => {\n            if (pos.pos >= 0) {\n                results.push(pos.pos);\n            }\n        });\n        return results;\n    })();\n\n    // No opening delimiters were found\n    if (positions.length === 0) {\n        return null;\n    }\n\n    //Take the first delimiter found\n    const pos = Math.min.apply(Math, positions);\n\n    const match_index = (()=> {\n        const results = [];\n        matches.forEach((m) => {\n            results.push(m.pos);\n        });\n        return results;\n    })().indexOf(pos);\n\n    const match = matches[match_index];\n    return match;\n}\n\n// Returns the outer and inner boundaries of the latex block starting\n// at the given opening delimiter\nget_latex_boundaries(str, opening_delimiter_match) {\n    const inner = new Boundary;\n    const outer = new Boundary;\n\n    // The closing delimiter matching to the opening one\n    const closer = opening_delimiter_match.options.closer;\n    outer.start = opening_delimiter_match.pos;\n    inner.start = opening_delimiter_match.pos + closer.length;\n\n    // Search for a closer delimiter after the opening one\n    const closer_index = str.substr(inner.start).indexOf(closer);\n    if (closer_index < 0) {\n        return null;\n    }\n    inner.end = inner.start + closer_index;\n    outer.end = inner.end + closer.length;\n    return {\n        outer,\n        inner\n    };\n}\n\n// Searches for the first latex block in the given string\nfind_latex(str) {\n    let start = 0;\n    let opening_delimiter_match;\n\n    while ((opening_delimiter_match = this.find_opening_delimiter(str, start++)) != null) {\n        const match = this.get_latex_boundaries(str, opening_delimiter_match);\n        if (match && match.inner.extract(str).trim().length) {\n            match.options = opening_delimiter_match.options;\n            return match;\n        }\n    }\n    return null;\n}\n\n// Breaks a message to what comes before, after and to the content of a\n// matched latex block\nextract_latex(str, match) {\n    const before = str.substr(0, match.outer.start);\n    const after = str.substr(match.outer.end);\n    let latex = match.inner.extract(str);\n    latex = s.unescapeHTML(latex);\n    return {\n        before,\n        latex,\n        after\n    };\n}\n\n// Takes a latex math string and the desired display mode and renders it\n// to HTML using the KaTeX library\nrender_latex(latex, displayMode) {\n    let rendered;\n    try {\n        rendered = katex.renderToString(latex, {\n            displayMode\n        });\n    } catch (error) {\n        const e = error;\n        const display_mode = displayMode ? 'block' : 'inline';\n        rendered = `<div class=\"katex-error katex-${ display_mode }-error\">`;\n        rendered += `${ s.escapeHTML(e.message) }`;\n        rendered += '</div>';\n    }\n    return rendered;\n}\n\n// Takes a string and renders all latex blocks inside it\nrender(str, render_func) {\n    let result = '';\n    while (this.find_latex(str) != null) {\n        // Find the first latex block in the string\n        const match = this.find_latex(str);\n        const parts = this.extract_latex(str, match);\n\n        // Add to the reuslt what comes before the latex block as well as\n        // the rendered latex content\n        const rendered = render_func(parts.latex, match.options.displayMode);\n        result += parts.before + rendered;\n        // Set what comes after the latex block to be examined next\n        str = parts.after;\n    }\n    return result += str;\n}\n\n// Takes a rocketchat message and renders latex in its content\nrender_message(message) {\n    //Render only if enabled in admin panel\n    let render_func;\n    if (this.katex_enabled()) {\n        let msg = message;\n        if (!_.isString(message)) {\n            if (s.trim(message.html)) {\n                msg = message.html;\n            } else {\n                return message;\n            }\n        }\n        if (_.isString(message)) {\n            render_func = (latex, displayMode) => {\n                return this.render_latex(latex, displayMode);\n            };\n        } else {\n            if (message.tokens == null) {\n                message.tokens = [];\n            }\n            render_func = (latex, displayMode) => {\n                const token = `=!=${ Random.id() }=!=`;\n                message.tokens.push({\n                    token,\n                    text: this.render_latex(latex, displayMode)\n                });\n                return this.render_latex(latex, displayMode);\n            };\n        }\n        msg = this.render(msg, render_func);\n        if (!_.isString(message)) {\n            message.html = msg;\n        } else {\n            message = msg;\n        }\n    }\n    return message;\n}\n\nkatex_enabled() {\n    return RocketChat.settings.get('Katex_Enabled');\n}\n\ndollar_syntax_enabled() {\n    return RocketChat.settings.get('Katex_Dollar_Syntax');\n}\n\nparenthesis_syntax_enabled() {\n    return RocketChat.settings.get('Katex_Parenthesis_Syntax');\n}\n\n}\nRocketChat.katex = new Katex;\nconst cb = RocketChat.katex.render_message.bind(RocketChat.katex);\nRocketChat.callbacks.add('renderMessage', cb, RocketChat.callbacks.priority.HIGH - 1, 'katex');\nif (Meteor.isClient) {\n    Blaze.registerHelper('RocketChatKatex', function(text) {\n        return RocketChat.katex.render_message(text);\n    });\n}\n```. @ylemkimon  Thank you! I did not see that but I should have noticed that since it is in the package area of RocketChat Github. I guess my brain was tired. . For future people \nAdministration Section(Stroll Down)->Message(Stroll Down)->Katex->Enable. ",
    "rustylife": "Hey Erik,\nYes, I would\nOn Wed, Aug 15, 2018 at 5:02 AM Erik Demaine notifications@github.com\nwrote:\n\n@rustylife https://github.com/rustylife You seem to own katex.org\n(apologies if you just happen to have the same name as the WHOIS entry).\nWould you consider transferring ownership? Please email me if so!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Khan/KaTeX/issues/1509#issuecomment-413137877, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/APH9NRV5haxmDDpaikPNojT2J3CeT80qks5uQ-OygaJpZM4Vkx7A\n.\n. \n",
    "JettHu": "Also while the inequality sign appears at the end of a line.. ",
    "otacke": "[clabot:check]. I'll gladly add that.. @ylemkimon This should do now. Thanks for investing all this time into the project!. @edemaine I kind of caused the discrepancy by my other contribution, so you're welcome ;-). Thanks for the hint! Didn't know that your support covers this old browser version, too. Will fix it.. @ylemkimon I changed the code. Thanks again for the hint! I also learned that every is supported by IE9, so no need to do everything \"manually\" with the for-loops.. ",
    "nickgravelyn": "Wow that's great. Thanks. I'll keep an eye on that PR.. [clabot:check]. Looks like the CI failed due to a Flow error:\n```\nError ------------------------------------- src/domTree.js:190:19\nVirtualNode [1] is incompatible with ChildType [1].\n190| export class Span implements HtmlDomNode {\n```\nI looked at this for a while but I can't figure out what the issue is, probably because I'm just new to Flow. If anyone can provide guidance I'll happily go fix it up.. I was waiting on #1711 to get merged so I could see about leveraging those changes, and I also need to figure out those flow issues. Just haven\u2019t had the time yet. . I've updated the PR with latest master and switched to the new \"raw\" arg type implemented in #1711. I still have no idea how to fix the failing Flow issue because, frankly, it's not a very helpful message. I'd love to get this merged but I do need help deciphering the Flow failure.\nAlso looks like the CI test failed due to the repository group being Katex instead of Khan, which looks like it'll get fixed with #1781.. You know, I wasn't totally sure but it wasn't something that we needed (or that really made sense). Our primary use case is attaching a \"model ID\" to DOM elements so we can do things like selection and interaction, and we didn't need to mark up white space. It also isn't clear which data attributes the space should get, for example in \\data{a=1}{3}\\data{a=2}{+}\\data{a=3}{4} the spaces between the 3, +, and 4 don't really make sense to have any particular value for data-a since the LaTeX doesn't really define the spacing.. That makes total sense and I will make that change. \ud83d\udc4d . I can definitely take a look at this and see what makes sense. In my basic testing buildExpression was returning SymbolNodes which don\u2019t have attribute support by default so that would still need to be added. I also want to make sure things like fraction bars and other visible elements get the appropriate attributes. But assuming I can get that working it does make sense to have this layer handle all of the data attributes so it\u2019s less tangled into the general code base. . I've tried this out and it's close, but I end up with two options, neither works for our scenarios:\n\nWe iterate through elements and their children, applying the attributes. This gets our attributes applied to all children but also applies them to non-visual DOM elements used for spacing and alignment which is not good for us since it makes those invisible elements considered part of the interactive DOM.\nWe iterate through elements without looking at children and apply the attributes. This solves the above problem but then naturally means for things like \\data{modelid=1}{\\frac{3}{4}} we don't get our attribute applied to the 3, 4, or the fraction bar which is something we want so that we can tie all three of those visual elements back to our single model ID.\n\nWithout writing a series of special cases in the data function handler (e.g. apply the attribute to elements that have .text or one of a set of special class names), I'm unsure of a way to have it implement this logic without using Options. I can make the Options object have a more generic attributes instead of dataAttributes and wire it through the existing attribute handling code, but that's the only way I've found to get the full behavior we need for interactivity.. ",
    "VinVaz": "Can I work on this one?. I can see there is still an error, I'm working on it. Since my first PR every time I send a push to my fork it seems it updates the PR for you, sorry for the noise. The local test only throws a Spawn Error and I have not been able to find its source through the test itself . Yes I'm using windows and I had noticed that all my files had its lines ending in CRLF and the tests required them to end in LF, because of that it was not possible for me to see another of their results at first , that's way I changed the format of all the files to UNIX, and it worked since I was able to see the spawn error from then on. So I think you're probably right. I will follow your suggestion.. ",
    "laclance": "perfect, thank you very much.. ",
    "nijynot": "Got it. Thanks for pointing it out. :-). ",
    "anderflash": "So (assuming these modifications doesn't affect the current display result), by \n- removing inline styles,\n- adding \\id and \\class macros,\n- and giving default values for standard KaTeX classes...\n...probably we will solve all the problems of changing the appearance, without adding JS logic related to each style property (maybe we can remove them at all). In this case, the JS code would be reduced to just converting KaTeX to DOM.. I see. LaTeX has a state machine during the rendering, which is difficult to emulate in CSS since it's a static file. We would need to dynamically create a stylesheet, which is not a clean solution. To use CSS in this case, we would need to get rid of this state machine feature.\nWell, the only solution left for me is to wait for the development of \\arraycolsep.\nThanks. ",
    "greenkeeper[bot]": "After pinning to 4.16.5 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. ## Version 4.17.1 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nRelease Notes\nv4.17.1\nBugfixes\n\nfix missing reexports in export * in a concatenated module\n\n\n\nCommits\nThe new version differs by 3 commits.\n\nff3ef5e 4.17.1\n58773ad Merge pull request #7931 from webpack/bugfix/concatenated-star-export\na92c23e fixes #7930\n\nSee the full diff\n\n. ## Version 4.17.2 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nv4.17.2\nBugfixes\n\nfix a spacing issue with the ProgressPlugin on some terminals\nforce-upgrade webpack-sources for performance improvement (was already in semver range)\n\n\n\nCommits\nThe new version differs by 9 commits.\n\ndfe6379 4.17.2\n80bc330 Merge pull request #7961 from aimergenge/patch-1\n3dedc72 Merge pull request #7969 from webpack/deps/upgrade\ncd9525a Upgrade some dependencies\n7996883 solving outputing unnecessary spaces\n76c3193 Merge pull request #7952 from webpack/tooling/prettier\n1b886ee improve prettier and lint config and performance\n6e01fd5 Merge pull request #7942 from webpack/test/performance\n2740d4a improve jest startup performance\n\nSee the full diff\n\n. ## Version 4.17.3 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nv4.17.3\nBugfixes\n\nFix exit code when multiple CLIs are installed\nNo longer recommend installing webpack-command, but still support it when installed\n\n\n\nCommits\nThe new version differs by 16 commits.\n\nee27d36 4.17.3\n4430524 Merge pull request #7966 from webpack/refactor-remove-webpack-command-from-clis\nb717aad Show only webpack-cli in the list\nc5eab67 Merge pull request #8001 from webpack/bugfix/exit-code\n943aa6b Fix exit code when multiple CLIs are installed\n691cc94 Spelling\n898462d refactor: remove webpack-command from CLIs\ndfe6379 4.17.2\n80bc330 Merge pull request #7961 from aimergenge/patch-1\n3dedc72 Merge pull request #7969 from webpack/deps/upgrade\ncd9525a Upgrade some dependencies\n7996883 solving outputing unnecessary spaces\n76c3193 Merge pull request #7952 from webpack/tooling/prettier\n1b886ee improve prettier and lint config and performance\n6e01fd5 Merge pull request #7942 from webpack/test/performance\n\nThere are 16 commits in total.\nSee the full diff\n\n. ## Version 4.18.0 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nv4.18.0\nFeatures\n\nUpgrade webassemblyjs dependency\n\n\n\nCommits\nThe new version differs by 28 commits.\n\nee7d948 4.18.0\nde85978 Merge pull request #7732 from xtuc/chore-bump-webassemblyjs11\nee27d36 4.17.3\n4e02cac chore: bump webassemblyjs\n4430524 Merge pull request #7966 from webpack/refactor-remove-webpack-command-from-clis\n52e1630 bump webassemblyjs\ne0e0061 Merge branch 'master' into chore-bump-webassemblyjs11\nb717aad Show only webpack-cli in the list\nc5eab67 Merge pull request #8001 from webpack/bugfix/exit-code\n943aa6b Fix exit code when multiple CLIs are installed\n691cc94 Spelling\n898462d refactor: remove webpack-command from CLIs\ndfe6379 4.17.2\n80bc330 Merge pull request #7961 from aimergenge/patch-1\n3dedc72 Merge pull request #7969 from webpack/deps/upgrade\n\nThere are 28 commits in total.\nSee the full diff\n\n. ## Version 8.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv8.0.1\n\n#662 - docs: update README.md\n#667 - docs: Remove babelrc from loader-specific options\n#668 - Add a warning if you forget to install @babel/core or install babel-core.\n\n\n\nCommits\nThe new version differs by 6 commits.\n\ndbcc2b5 8.0.1\n34d6d6e Add a warning if you forget to install @babel/core or install babel-core. (#668)\n8b6dd4b Merge pull request #662 from Sibiraj-S/patch-1\n2344855 Merge branch 'master' into patch-1\n053c9f6 Remove babelrc from loader-specific options (#667)\ne1c190d docs: update README.md\n\nSee the full diff\n\n. ## Version 8.0.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv8.0.2\n\n#541 - A bunch of great README fixes\n#574 - Add cacheCompression: false to disable GZip compression of the disk cache\n#670 - Handle both 'sourceMap' and 'sourceMaps' options properly\n#671 - Fix sourceMaps: 'inline' to work properly with babel-loader\n#669 - Fix sourcemaps to work with Webpack's devtoolModuleFilenameTemplate placeholders\n\n\n\nCommits\nThe new version differs by 6 commits.\n\n0e43d0a 8.0.2\n5e0565d Manually fix 'inline' sourcemaps so they work with Webpack. (#671)\nea52d05 Use 'sourceMaps' since that is what we suggest to use in our docs. (#670)\n4c32295 Use absolute filepaths in sourcemap 'sources' list. (#669)\n9621e24 Tidy up README [skip ci]\n67a5f40 Make compressing transforms cache configurable (#574)\n\nSee the full diff\n\n. ## Version 4.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 3 commits.\n\nccd4ddc 4.0.1\n79a9538 Bumped babel deps\n26a2545 Update docs regarding babel versions and matching plugin versions\n\nSee the full diff\n\n. ## Version 4.0.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits.\n\n7617cc6 4.0.2\n11cf7e3 Fix rollup peer dependency (#240)\n\nSee the full diff\n\n. ## Version 4.0.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 4 commits.\n\n21bdef4 4.0.3\n55ade45 4.0.3-0\n60a3627 Fixed fallbackClassTransform\n76a8b96 Tweaked README, added 4.0 CHANGELOG notes\n\nSee the full diff\n\n. After pinning to 2.17.1 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ## Version 3.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 5 commits.\n\n4590ced v3.0.1\nf7cc317 Increase top padding for sidebar content\nd4b26a2 Hide resizer if sidebar if hidden\n0cd709e Don't use float numbers for icon sizes\n6ae609a Limit max-width of the sidebar\n\nSee the full diff\n\n. - The devDependency babel-eslint was updated from 9.0.0 to 10.0.1.\nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes for v10.0.1\nv10.0.1\n\nReverting #584\n\nThe TypeAlias \"conversion\" to a function has issues. Sounds like we need to rethink the change, most likely we can just actually change the scoping rather than hardcode an AST change.\n\n\nCommits\nThe new version differs by 2 commits.\n\n4cf0a21 10.0.1\n98c1f13 Revert #584 (#697)\n\nSee the full diff\n\n. - The devDependency @babel/core was updated from 7.1.1 to 7.1.2.\n- The devDependency @babel/plugin-proposal-class-properties was updated from 7.0.0 to 7.1.0.\n- The devDependency @babel/plugin-transform-runtime was updated from 7.0.0 to 7.1.0.\n- The devDependency @babel/preset-env was updated from 7.0.0 to 7.1.0.\n- The devDependency @babel/runtime was updated from 7.1.1 to 7.1.2.\nYour tests are still failing with these versions. Compare changes. - The devDependency @babel/core was updated from 7.1.1 to 7.1.2.\n- The devDependency @babel/plugin-proposal-class-properties was updated from 7.0.0 to 7.1.0.\n- The devDependency @babel/plugin-transform-runtime was updated from 7.0.0 to 7.1.0.\n- The devDependency @babel/preset-env was updated from 7.0.0 to 7.1.0.\n- The devDependency @babel/runtime was updated from 7.1.1 to 7.1.2.\nYour tests are still failing with these versions. Compare changes. - The devDependency @babel/core was updated from 7.1.1 to 7.1.2.\n- The devDependency @babel/plugin-proposal-class-properties was updated from 7.0.0 to 7.1.0.\n- The devDependency @babel/plugin-transform-runtime was updated from 7.0.0 to 7.1.0.\n- The devDependency @babel/preset-env was updated from 7.0.0 to 7.1.0.\n- The devDependency @babel/runtime was updated from 7.1.1 to 7.1.2.\nYour tests are still failing with these versions. Compare changes. After pinning to 9.6.0 your tests are passing again. Downgrade this dependency \ud83d\udccc.. - The devDependency stylelint was updated from 9.7.0 to 9.7.1.\nYour tests are still failing with this version. Compare changes\n\nRelease Notes for 9.7.1\n\nFixed: at-rule-* false positives for Less variables and mixins (#3759).\n\n\n\nCommits\nThe new version differs by 4 commits.\n\n19e1790 Prepare 9.7.1\n871e975 Update CHANGELOG.md\n2d2ab16 Fix false positives for Less variables and mixins in at-rule-* (#3749) (#3759)\n203ead2 chore(package): update lint-staged to version 8.0.0 (#3751)\n\nSee the full diff\n\n. - The devDependency flow-bin was updated from 0.84.0 to 0.86.0.\nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 1 commits.\n\n73d1b9f v0.86.0\n\nSee the full diff\n\n. ",
    "frogg": "\ud83d\ude31 wow \ud83d\udcaf thanks  \ud83d\ude80 a \ud83c\udf89 lot \ud83d\udc4f that \ud83d\udcaa was \ud83d\udc4d quick! \ud83d\ude4c\nI just ran yarn build successfully without any problems.. ",
    "jessebett": "@edemaine your suggestion throws an error:\n```\n$$\n\\gdef\\niceblue#1{\\textcolor{##0074D9}{#1}}\n\\gdef\\w{\\niceblue{w}}\n$$\n$$\n\\w\n$$\n``KaTeX auto-render: Failed to parse \\w with ParseError: \"KaTeX parse error: Expected 'EOF', got '\\w' at position 1: \\\u0332w\u0332\"`\nIn particular this fails to create a global definition. If they were in the same $$ then this would have worked. Why wouldn't these global definitions be shared across $$?. I believe it's autorender. It is rendered with  a call at the end to renderMathInElement. Just wanted to come in here and say thanks for this!\n. ",
    "alihammad-gist": "how do I draw a normal graph like plotting a function? . ",
    "CurtisHumphrey": "@edemaine yea, I think Katex is following pure latex well.  However, so many other systems use Mathjax that we have an issue where they will not render the same.  If I use the \\_ inside the \\text{} block in Mathjax both chars are displayed and not just _.  So maybe in \\text fewer processing rules are needed?. Yes, I do.  I have users who use jupyter notebooks to author latex equations (that uses Mathjax in preview mode) that we then render the latex in an html page using Katex.  So I was trying to get both to match.  The font isn't an issue in our case.  Good find with \\verb! I had not thought of that.  At the moment I do a preparsing to replace _ with \\_ in the \\text{} blocks only before I give it to katex and that seem to do the trick.\nExample code in case it helps others:\n```js\nconst example = '\\text{Score} = 2\\times\\text{(Protein_(g))}  -  0.75\\times\\text{(Lipid_Tot_(g))}'\nconst regex_text_group = /\\text{([^}]*)}/g\nconst fix_underscore = (match) => match.replace(/_/g, '\\_')\nconst fixed_underscores = example.replace(regex_text_group, fix_underscore)\nkatex.renderToString(fixed_underscores, {displayMode: true})\n```\n. Yes @kevinbarabash I was surprised too that Mathjax wasn't compliant here and that they had rejected the request to make it compliant.  Should we add a section to KaTex's readme about this difference between the two libraries and that KaTex is doing it correctly per spec?. ",
    "dpvc": "As has been pointed out, this has been an issue for MathJax users, and so I have capitulated and put together an extension to allow processing (some) text-mode macros in \\text{} and other text-mode settings.  Perhaps that will make things more compatible.. ",
    "nikilarigela": "in mathjax it renders fine, but in katex it shows ( KaTeX parse error: Expected 'EOF', got '[' at position 2: \\\u0332[\u0332f\\left( x \\righ\u2026 )\nlatex\n \\[f\\left( x \\right)\\, = \\,\\,\\left\\{ {\\begin{array}{*{20}{c}}\n  {\\frac{{ - \\sin \\,\\left\\{ {\\cos \\,x} \\right\\}}}{{x - \\pi /2}}}&{x\\, \\ne \\,\\frac{\\pi }{2}} \\\\ \n  2&{x\\, = \\,\\frac{\\pi }{2}} \n\\end{array}\\,,} \\right.\\]\n\n. Thanks @edemaine , \nI have used without the [ and ]. , but didn't worked. issue is because of the * , do we have any work around for that.. \\begin{array}{cc}. it didn't work. I want to know if below syntax i wanted to generate what is the Tex will be.\n\n. Thanks @edemaine,\nI forgot to put period at end.(i think i'm in phantasm).\n. ",
    "iSumitG": "[clabot:check]. ",
    "chenfengyanyu": "@edemaine @ronkok @ylemkimon @kevinbarabash \n\u62b1\u6b49\uff0c\u770b\u4e86\u4f60\u4eec\u7684\u8bc4\u8bba\uff0c\u786e\u5b9e\u662f\u56e0\u4e3a\u6211\u4f20\u5165katex\u7684\u5b57\u7b26\u4e32\u4e2d\u989d\u5916\u6dfb\u52a0\u4e86</br>\u6807\u7b7e\uff0c\u5f71\u54cd\u5230\u4e86katex\u7684\u89e3\u6790\u6e32\u67d3\u3002\n\u6211\u7684\u5904\u7406\u65b9\u5f0f\u662f\u5728\u4f20\u5165\u524d\u5c06</br>\u6807\u7b7e\u53bb\u9664\u6389\u3002\u611f\u8c22\uff5e. ",
    "MontyThibault": "Has there been any progress on this PR? I'm interested in adding interactivity to KaTeX-rendered documents as well. . ",
    "fsonmezay": "@ronkok , @edemaine Thank you both for your time and detailed explanations.\n@edemaine we already use \\sf for the formulas, but in some cases we thought we can use Arial font. . ",
    "luweikxy": "\n@luweikxy Could you give an example of a formula that, when you delete it, fixes the error?\n\nOk, this is the formula(just one of these cases) that when I delete it ,it is ok:\n\nBUT, if I delete any 4 formulas in this .md file, it is ok... Yes , any four formulas! It will fix...\nmy guess:\nThis md file is large(convert it to PDF which has 44 pages), so I think the reason is these are too many formulas in one md file that may exceed the katex max num limites in one md file.\nSo I wonder if katex has num limite?\nCan katex be configured as lurn in book.json?\n\"pluginsConfig\": {\n\"lunr\": {\n            \"maxIndexSize\": 1000000000\n        }\n}\nthe .md I modify is:\nhttps://github.com/luweikxy/machine-learning-notes/blob/master/content/machine-learning/support-vector-machine/support-vector-machine.md. > @luweikxy According to this page, GitBook's KaTeX plugin uses KaTeX version 0.5.1. A lot has changed in the last three years. The current version is v0.10.0-rc.1. Would it be possible to upgrade the KaTeX plugin?\nMy katex version is 1.1.3 based my book.json:\n\"plugins\": [\n\"katex@^1.1.3\",\nwhere can I know my version is 0.5.1?\nand I update my last reply just now, could you have a look? does katex have a num limites?. > @luweikxy The plug-in version is 1.1.3. But that plugin has dependencies, and the dependencies have me confused. According to the plugin package JSON, it is dependent on KaTeX 0.7.1, but according to the plug-in static file, it is using the CSS and fonts from KaTeX version 0.5.1. That is a little odd, but it should not cause a stack overflow.\n\nKaTeX has no limit on the number of formulas. The plug-in is making repeated calls to the katex.renderToString function, but KaTeX runs each one of those calls sequentially. There is no reason it could not go on indefinitely.\nKaTeX does create quite a lot of HTML for each formula, and your file is quite large. It is possible that the results have met a GitBook size limit.\n\nOk, to not exceed the whatever size, I have deleted 4  arbitrary formulas, then it is OK.\nHow can I upgrade the katex by myself? change the package.json \nfrom\n\"dependencies\": {\n        \"katex\": \"0.7.1\"\n    },\nto \n\"dependencies\": {\n        \"katex\": \"0.10.0\"\n    },\nin my node_modules folder?. > > How can I upgrade the katex by myself? change the package.json[?]\n\nYes, I suppose one could fork GitBook and do that update. Or you could write a pull request to GitBook so that everyone gets the benefit of the update.\nAfter running npm update, check the files in the static folder. They should also be updated to current versions.\n\nI do not kown about the principle of npm and gitbook, I just can use it to write my book...\nIf I forked gitbook, and change it in my github. but when I use npm to install gitbook like:\nnpm install gitbook -g\n,the gitbook is still be download from the original github, not mine.\nSo I think this way can not work.\nthe second way, I've give an issue to the GitBook.\nhttps://github.com/GitbookIO/plugin-katex/issues/22\nOh,someone did it...\nhttps://github.com/GitbookIO/plugin-katex/pull/21. ",
    "gaoxiaosong": "Because gitbook use nunjucks v2.5.2 and its algorithm has the problem when process many blocks. Please see this issue:\nIncluding template many times in forloop causes a RangeError: Maximum call stack size exceeded\nNunjucks has fixed this problem in v3.0 and later, but gitbook has not been updated.. You can split the markdown file to some smaller one. Make sure there is only a few blocks in each file. @luweikxy . ",
    "330wuyanzu": "\nMy guess is that VuePress needs to update to the latest version of KaTeX since \\mathring{U}(x_0) works just fine on katex.org.\n\nthanks. > Yes, \\r and \\mathring are a relatively recent feature addition (0.9.0). You may be able to check what version you're using by typing katex.version in the Javascript console.\nthanks. ",
    "JZQT": "It looks like you can't smoothly migrate from MathJax to KaTex.\n. Is that a bug?. ",
    "Ynjxsjmh": "By using \\stackrel{sa}{\\frown}, I solved the first question. However, the second looks like needs some alignment.\n\n. Actually, I want to represent the formula shown in the picture. If I use \\stackrel{}, it will be a torture for me to do that. So is there any simpler way to do that?\n\n. @kevinbarabash I draw this formula.. @edemaine Your method looks awesome. I think I need to spend some time to learn more about KaTeX advanced skills.. ",
    "cycomachead": "Wow, thanks for the example. \nIn our case (primarily as a part of Gradescope), the use is a user-input field that current allows LaTeX for math, but some of our users (primarily STEM instructors) want to mix math and code. \nWe are probably going to go with a combo markdown + KaTeX model, but the thinking is once you make a block of latex, for those who are comfortable it\u2019s easier to just make 1 big block than to switch back and forth between different modes. \nI definitely get that in an HTML model this isn\u2019t a necessary addition, but I figure I\u2019m not the only one who might run into this. :)\n-- \nMichael Ball\nFrom my iPhone\nmichaelball.co\n\nOn Oct 16, 2018, at 1:16 PM, Erik Demaine notifications@github.com wrote:\nHmm, interesting idea. That wouldn't be too hard to do, I guess. But I do wonder how useful it is. Are you doing multi-line code blocks inside math mode? Can you show an example?\nIf it's outside math mode, can you just use  ? KaTeX is mainly just about LaTeX math mode. (I've hacked together verbatim environment support for parsing text-level LaTeX here: https://github.com/edemaine/coauthor/blob/master/lib/formats.coffee)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "gpykhanna1": "Yes -- you're correct.  It does render find on the site.  Would you happen to know who supports the Wordpress plug-in?  It would be great if it the releases for the plug-in were in sync with the improvements in the engine.. Thank you - I posted this in the support forum for the plug-in.. ",
    "AaronNGray": "I have looked at parsers for TeX in the past they are complex as some tex macros are lexically dependent but think I could probably use jison with bespoke lexer to parse TeX. Then its just down to the semantics.. ",
    "haoqiang": "Hi KaTex team, I don't see your project added to Docusaurus user yet, so I'll be adding for you. :)\nI'll be using this logo: https://katex.org/img/katex-logo-black.svg. ",
    "basilgass": "Thank you very much! It works!\nIs this a normal behavior ? In the \"Supported Functions\", there is no mention of this I think.. ",
    "licstar": "Thank you very much.. ",
    "surpass-wei": "emm, like this:\n\n. @kevinbarabash Chrome 69.0.3497.100. ",
    "HenrySeed": "@edemaine Cool Ill use the \\color tag. Is the coloring via HTML a supported feature or just an unintended side affect?. ",
    "antons": "0.10.0. I can reproduce the issue on katex.org as well (screenshot with .katex-mathml visible).. @kevinbarabash I intentionally made the .katex-mathml visible to demonstrate that &lt; was double encoded with 0.10.0 on katex.org.\nHere\u2019s the full HTML produced, including both HTML and MathML, that shows that HTML entities are double-encoded in MathML, but not in HTML:\nhtml\n<span class=\"katex\">\n  <span class=\"katex-mathml\">\n    <math>\n      <semantics>\n        <mrow>\n          <mi>\n            x\n          </mi>\n          <mo>\n            &amp;lt;\n          </mo>\n          <mi>\n            y\n          </mi>\n        </mrow>\n        <annotation encoding=\"application/x-tex\">\n          x &amp;lt; y\n        </annotation>\n      </semantics>\n    </math>\n  </span>\n  <span class=\"katex-html\" aria-hidden=\"true\">\n    <span class=\"base\">\n      <span class=\"mord mathdefault\">x</span>\n      <span class=\"mrel\">&lt;</span>\n    </span>\n    <span class=\"base\">\n      <span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">y</span>\n    </span>\n  </span>\n</span>. ",
    "tlienart": "Thanks for the detailed answer! some of it is above my understanding (I don't know the KaTeX internals) but my takeaways are\n\nI should be fine if I don't use \\tag (I don't, great)\nCool stuff is coming to do numbering via the \\tag support\n\nWith respect to vertical alignment, I can't complain:\n\nexcept maybe on multiline equations where ideally it should be vertically centered (but to be honest that doesn't bother me too much)\n\nbut I mostly use equation numbers for cross-references in my notes (via my own code) so I'm minimally fussed as long as the numbering appears consistently and visibly on the side of the equation. \nAgain thanks for the answer!. ",
    "JMSS-Unknown": "More related errors\n\\lim_{x\\to\\infty}\ngives\nInvalid markup: Incorrect number of children for <munder/> tag.. For \\log_{10}\\left(x\\right)\nhtml\n<span class=\"katex-mathml\">\n   <math>\n      <semantics>\n         <mrow>\n            <msub>\n               <mi>log</mi>\n               <mo>\u2061</mo>\n               <mn>10</mn>\n            </msub>\n            <mrow>\n               <mo fence=\"true\">(</mo>\n               <mi>x</mi>\n               <mo fence=\"true\">)</mo>\n            </mrow>\n         </mrow>\n         <annotation encoding=\"application/x-tex\">\\log_{10}\\left(x\\right)</annotation>\n      </semantics>\n   </math>\n</span>. It seems to be caused by the empty mo tag.\nI extracted it to a new page to get:\nhtml\n<!DOCTYPE html>\n<html>\n   <head>\n      <meta charset=\"utf-8\">\n   </head>\n   <body>\n      Equation:\n      <span class=\"katex-mathml\">\n         <math>\n            <semantics>\n               <mrow>\n                  <msub>\n                     <mi>log</mi>\n                     <mo>\u2061</mo>\n                     <mn>10</mn>\n                  </msub>\n                  <mrow>\n                     <mo fence=\"true\">(</mo>\n                     <mi>x</mi>\n                     <mo fence=\"true\">)</mo>\n                  </mrow>\n               </mrow>\n               <annotation encoding=\"application/x-tex\">\\log_{10}\\left(x\\right)</annotation>\n            </semantics>\n         </math>\n      </span>\n   </body>\n</html>\nWith the mo tag I get invalid-markup, without it the log renders correctly.. The error still occurs in private browsing with all extensions disabled. I also just tried it on another computer and the error did not show up. Seems like it has something to do with my setup.. The error shows up if you select CSS under filter output in the console. Is this an issue?. ",
    "stonecourier": "Thank you. I thought I tried this before and got an error, but it seems to work, so I am not sure what I was doing incorrectly.. ",
    "Demindiro": "Sorry, I didn't notice this issue was related to #1800 . ",
    "benzsuankularb": "Closed as my misunderstanding.. ",
    "linwaytin": "That works. It seems that I have to put the katex.render() inside a function, and then trigger the function by an event. I will try the autorender extension.\nThanks a lot.. ",
    "filipre": "Wow, thats awesome! \nIs there any reason not to add this macro to KaTeX? If not, then I would like to implement this as my first contribution.\n. I opened #1820. Sadly I could not find any package that defined \\argmax nor \\argmin. It seems like, everyone always defines them on their own. Also, there does not seem to be a consensus how to define it \"properly\". Therefore, I created a new section at the very bottom of the macros.js file. \nI still believe it makes sense to add it, because it will save a bit time and pain for other users :) Once we find out, that it has been implemented in a package, we can still move it to the right place.\nEdit: Okay, now I also found out that you can even pass own macros to the render method. Also \\global\\def seems to be very useful.. ah, alright. I put a reference to that package and updated the PR.. ",
    "kebugcheckex": "Created by mistake. Please ignore. ",
    "perfaram": "@edemaine A bunch of standalone LaTeX macros for this exist on the internet, but my design comes from the lifecon package. As it seems, it is unmaintained, but you can find its guide here, or a version of the package \u2013 that does not give an output conform to the aforementioned guide \u2013 here). \nA currently maintained package providing the \\angl can be found here.\nNote that this symbol is named \\lcroof in lifecon; I decided to name it \\angl because it's what is currently shown as unsupported in the support table.. First thing, I must say that I find \\lcroof's design (according to its user guide \u2013 that is, where the top bar of the angle is thicker than its descender) way more elegant than the uniformly thick angle of actuarialangle, which provides \\angl. In this respect, it may be somewhat misleading to call the function I added \\angl and not have it behave like the usual \\angl but like \\lcroof. \nRegarding the common use, the newer, maintained package is more often used nowadays (I made a couple of exact-match google and GitHub searches to conclude this). However, a lot of (older ?) people obviously stick with \\lcroof (at least it seems so, judging by what I see in my uni). \nTherefore, since the two notations are 100% compatible with each other, it would be easy to rename the function I added with a more generic name, make its style (\"calligraphic\" or uniform-thickness) customisable, and add two macros, \\lcroof and \\angl, each rendering the right style.\nMy suggestion is : \n \\actangle{hbar thickness}{vbar thickness}{text}\n \\lcroof{text} as a macro for \\actangle{0.08em}{0.04em}{text}\n* \\angl{text} as a macro for \\actangle{0.4pt}{0.4pt}{text}\nIf it seems suitable, tell me and I'll do it.. Yup, but what if we're running with a custom, different font ? Hardcoding values such as the depth of a parenthesis seems dodgy to me... . (BTW, thank you VERY much for the help ! And yes, I'll gladly see you trick to avoid using Docker \u2013 but in due time, I'm gonna get everything running and pixel-perfect before.. Quick update !\n\nI notice now that you proposed \\actangle only as a means to define \\angl and \\lcroof, not as a function for use by itself. If that technique allows you to accurately render both \\angl and \\lcroof, then I think it is an excellent idea.\n\nThat's it, and so far so good ! I think it makes the first point :\n\n\nTop line thickness that matches \\hrule. The TeXbook p 221 defines a standard \\hrule as 0.4pt thick.  KaTeX is based on a 10 pt font, so your CSS can emulate a 0.4pt rule with a 0.04em CSS border.\n\n\n...irrelevant, since it the thickness will be set in the macro (building \\angl and \\lcroof atop a single \\\\actangle function, that won't be available to the user), but tell me if I misunderstood.\n\n\n1mu space before and after the argument. That can be emulated by 0.0556em padding. actuarialangle has an option for a 2mu space after the argument, so if you prefer 2mu, I think that stands a good chance of getting approved.\nA 1mu space to the right of the vertical line. Maybe a  CSS margin would be the easiest way to do this.\n\n\nThese were actually more or less done \u2013 I had 'em, but with totally wrong widths. This led me to add two more parameters to my \\\\actangle function \u2013 the margins. This is starting to look as heavy as \\\\genfrac.\n\n\n\\angl always runs its vertical leg as least as low as the depth of a parenthesis, even if the argument's glyph has no descender. opentype.js tells me that the depth of a paren is 0.349em. You will need to check the depth of the argument and make that adjustment when necessary.\n\n\nThanks a lot about this one. It made me rework the whole code actually, and it's cleaner (and actually accurate, I think) now.\n. Reference (using actuarialangle) :\n\n(a_{\\angl{n})\\angl{K}\\angl{1_{j_j}}}, so with a 2mu-thick space before the descender)\nCurrent KaTeX implementation, uniform-width-style (matching \\angl) : \n\n(a_{ \\actangle{n}{0.04em}{0.04em}{0em}{2mu}{1mu}) \\actangle{K}{0.04em}{0.04em}{0em}{2mu}{1mu} \\actangle{1_{j_j}}{0.04em}{0.04em}{0em}{2mu}{1mu}})\nEDIT : And a last one demonstrating the right margin + a thick hline :\n\n(a_{\\actangle{n}{0.08em}{0.04em}{0.04em}{2mu}{1mu}i})\nThe \\actangle invocations are quite tedious, but since the end user won't use directly use it, it doesn't really matter.\nNow, once I'm sure this doesn't need any layout adjustments, I'll make \\actangle \"unusable\" (like \\\\atopfrac) and build the macros.\nFor reference, the syntax is : \n\\actangle{<inner>}{<hline thickness>}{<vline thickness>}{<padding before inner>}{<padding after inner>}{<margin after angle>}. Okay, I built the macros anyway (not really macros in the end, but the same function label replacement logic used in genfrac.js)\nFor the time being, I left \\cmangle (which allows me to directly invoke the underlying, customisable \\actangle function), but I'll remove it once we're done (are we ? Save for the docker stuff and unit tests ?)\nEDIT : ~okay we're not done, CircleCI fails~ now OK + up-to-date with master\nEDIT : Tests are running. I understand your concerns. I suggest simply removing \\\\\\\\actangle, moving back in CSS everything that is not constant across \\lcroof and \\angl, and choosing the right settings (bar width, etc) in htmlBuilder.. Done, although I kept using calculateSize to translate between pt and CSS em units instead of hardcoding, for the bar thickness. All the rest moved back in the stylesheet.\nI also noticed a spacing issue (vertical spacing, depth-wise), that I fixed. \nNext thing is taking the screenshots, but first, is the current code style fit in your opinion ? \n(I just read the CircleCI trick. Love it !). Okay, I think everything's right now \ud83c\udf89\n(@ronkok : yup, I also removed paddingRight in domTree.js's cssStyles, since I had no use for it anymore \u2013 I think it's better to keep things clean)\nEDIT : I also added mathML tests, in addition to the screenshots and the regular katexSpec tests. Hope I did it right.. ",
    "mobigaurav": "@edemaine I have tried suggestion mentioned on Stack Overflow but it did not help. The example i mentioned on Stack Overflow is the obvious one, similar to that for all the equation on android i see a strange character at the end. Did you mean html output which Katex generate for Rendering equation?\nBelow i am uploading screenshot from chrome dev tools for one of the equation , let me know if that helps. You can see Katex html render code on right side.\n\n. ",
    "milosgajdos83": "Thanks @edemaine, I will keep digging. Seems like some random parser shenanigans. I will close this issue now and should I figure out solution I'll pop in and let you know.. @mbourne I don't have any extra Blackfriday extensions settings enabled so I assume, based on the documentation they should be disabled. I've tried nevertheless explicitly disabling it by listing empty extension for blackfriday:\n[blackfriday]\n  extensions = []\nThis however has no effect on the rendering whatsoever.\nYour second suggestions, however somewhat does resolve the problem, alas it places all matrix elements on the same line - it seems \\\\ does not create an extra line between matrix lines:\n\nIs there any way I can enter that extra line  should I decide to go with your second suggestion since it does point in the right direction.\nThank you for pointing me in the right direction.. Major breakthrough \\o/\nEscaping the \\\\ solves the problem:\n$$ \\left[\\begin{array} {rrr} 3.381563 & 3.389113 \\\\\\\\ 4.527875 & 5.854178 \\\\\\\\ 2.655682 & 4.411995 \\\\\\\\ \\vdots & \\vdots \\end{array}\\right] $$\nI suspect now we've gone full circle to what @edemaine was suggesting to have a look at: https://gohugo.io/content-management/formats/#issues-with-markdown\nI suspect if I modify the code which uses katex and add the displayMath math \"hack\" mentioned in hugo documentation I should be fine.. Totally agree with you @edemaine Yes hugo is a static page generator -- that's it. The thing which sort of makes it seem \"dynamic\" are various themes which add all kinds of javascript addons to the rendered HTML.. ",
    "sorenbug": "Thank you!. ",
    "varkor": "\nWe should probably change those too, or change none at all and leave a mix of ' and \u2019.\n\nI've made these consistent too.\n\nEither way, I do not see how these would affect GitHub Pages...\n\nIt wasn't a bare apostrophe: there was some encoding problem with that character (it's only evident in some text editors). GitHub Pages refuses to build any site that has a markdown file that's not correct UTF-8 encoded, so if the repository is used as a submodule in a GitHub Pages site, it will fail to build.\nReplacing it with a correctly-encoded apostrophe would also have worked, but as you say, this is more consistent with the other occurrences.. ",
    "aziis98": "https://codepen.io/aziis98/pen/KJYqZV\nI tried making a prototype of this (at the moment this is all an enormous hack). I wanted to see if it was easily possible to parse the xymatrix syntax and compute all the arrow positions and sizes.\nI don't really know if it is possible to create a parser plugin for Katex that does more then adding some simple macros but this may be a starting point.\nNotes on the Code\nI tried to comment the code as better as I could. For now I only support simple arrows \"->\" and double ones \"=>\" and the support for arrow labels was just too bad to include here (it is commented out).\nThe parsing part completely bypasses Katex's parsing and macro system (but I think that it might be relatively simple to convert a Katex Macro/Function - for now I just splitting strings and call Katex's \"render(expression, node)\" on each sub expression)\nProbability the most useful part might be the arrow creation. I compute the position of start & end of the arrow and it's angle and then rotate and translate it's container with CSS. For porting to Katex one would just need a function for creating an arrow of given length - I haven't really understood how stretchy.js works (?) for doing this.. ",
    "zipang": "I have a PR ready (not pushed yet because i still need help regarding the test page).\nTell me if anyone is interested. @spontaliku-softaria : thank you for this pertinent remark !\nYou're mostly right : there are some importants variations to consider in the implementation of the hyperscript DSL.\nSome flavours of hyperscript support the extended (Emmet-like) tagname syntax, like in the following example : \njs\nh('#id.class1.class2') \n<=> h('div', { className: 'class1 class2', id: 'id'})\nSome of them identify the SVG tags while some other offer a specific hyperscript variant for SVG or support a special namespace attribute : \njs\nh('path', {d : 'M 0 0 L 10 10'}) \n<=> svg('path', {d : 'M 0 0 L 10 10'}) \n<=> h('path', {d : 'M 0 0 L 10 10', namespace: 'http://www.w3.org/2000/svg'})\nAnd finally, some implementations allow for a varying signature where arguments are recognized by their type, when not on their expected position : \njs\nh('div', 'some text')\n<=> h('div', {}, ['some text'])\nHowever, i have found that there is some valid ground for a common form that is accepted by almost every implementations and it is the following one : \nh(tagName : String!, properties: Object!, children: [String|hNode]!)\nWhere \n all three parameters are expected in their respective positions and not null or undefined,\n className and class should be both set as a string property that accepts a space separated list of class names\n* namespace=\"http://www.w3.org/2000/svg\" should be added to the properties object to create a SVG node.\nIt's not perfect (there are still problems occuring on the attributes of the style property as to whether they should be camelCased or kebab-cased) but it allready gives us a good 80/20 ratio : 20% of efforts for ~ 80% support on every hyperscript library.\nNow.. that could be the moment to propose a Level 1 and Level 2 specification for hyperscript along with a test suite, and see the implementations converge, but it is another story... :)\n. @edemaine : Thanks a lot for your interest ! :)\nThere is no need to internally use an hyperscript variant to construct the nodes.. (even if it may allow for some better internal code re-use, but it would be a lot of refactoring)\nI'm only proposing to add this new method to export the inner KaTeX DOM representation to any other representation using an hyperscript API. And.. it means to add this method to any VNode.\nI have a PR in progress, and it allready gives some pretty good results converting to React, Preact and Inferno, but i need now to figure how i will modify the test page without annoying everybody with this feature that is not central to the main purpose of KaTeX, because the test involve loading every external libraries and rendering them side by side...  . ",
    "joergklein": "Yes it is Gitlab. When I type on the demo page \\neq then I see / =.\nWhen I type \\not= then I see also / =.\nYou wrote \\neq \\not= . Please take a look at the screen shot\n\n. The OS is CentOS 7. The browser Chrome displays the wrong charakter. Firefox displays the correct character.\nGoogle Chrome | 72.0.3626.81\u00a0(Official Build)\u00a0(64-bit)\nRevision | ac8b982e05014492d1bd7d317628a4f22a97ffa0-refs/branch-heads/3626@{#796}\nOS | Linux\n. ",
    "q234rty": "Having the same issue with Chrome 72.0.3626.96 on Windows.. ",
    "matteo-ronchetti": "Got the same problem in Chrome 72, as a workaround I replaced \"\\not =\" with \"=\\not\\,\" and it shows the symbol correctly (see demo).\n. ",
    "robbienohra": "I'm having the same issue with Chrome 72.0.3626.109 on my Mac and also Chrome 72.0.3626.105 on Android.\nFreakin' hell.. Anything I can do to help speed up the fix? @edemaine  do you need us to test your fix? I'm currently on GatsbyJS using the css dependency require(katex/dist/katex.min.css). Thanks, dude!. ",
    "eneso": "Same issue with Chrome 72. Actually, it is appearing correctly on my laptop which is using Chrome 71. Yesterday I was having this issue on my desktop which is using Chrome 72.. ",
    "d00mw01f": "After v0.10.1 release \\neq broken in Safari:\n\n. Reproduced both on real mac in Safari and in browserstack.\nAlso reproduced on iPhone in Safari, Chrome and Firefox (do they have same engine?)\nI tried to investigate the problem and managed to find that Safari doesn't render @not symbol (\\ue020). But it will render symbol if it has border. Hope this will help.. ",
    "congxinUSC": "Am I the only one seeing a not filled square after the update on Chrome 72 & Safari?. ",
    "leoluu": "yeah,I have try ,and it not support auto-render,. ",
    "haraldschilly": "well, I'm a webdev myself. I checked this, and also several ones of the styles nested above. Maybe I should ask the other way around: can you tell me how the horizontal bar in such a \\frac is rendered? Is it a border of a div? I'm not familiar with your source code, so that might take a while to figure out. With that knowledge, I am more confident to actually find the relevant element.. Sorry for taking your time, this was all my mistake. There was a configuration mishap and well, if anyone else has this issue, there is a CSS file for an older version of KaTeX :dizzy_face:\nHowever, thank's for pointing out how the fraction line is done.. ",
    "JoeUX": "Thanks! That fixed it. I didn't catch the escaping. Thanks again.. ",
    "songololo": "The webpack configuration is set by vuepress, which I believe is defined in this folder of their repo.\n. This is the dev.js script invoked when running vuepress dev. @kevinbarabash it was quite slow, I seem to recall in the region of 30m.. ",
    "zmj97": "on chinese words.... ",
    "BairDev": "@edemaine Thanks for the fast response. Indeed the KaTeX_Main-Regular.woff[2] file is not loaded. I'm currently trying to add it, which is a little bit complicated due to our development/build process.\nEdit we are using Chrome 73 or the latest FF.\nEdit Alright, I've managed to load the font files in our test page, but the result is still the same.\n\nWhat do you mean by input file? Our environment is not pure HTML, but we are using a framework (CanJS), which creates the HTML from our view files. But if we use the JavaScript for rendering the formula (katex.render()) to a fresh element it does not work either. I think this approach is not that different to Katex' demo suite.. OK, the reason for this problem was, that we used the Katex CSS only party. When I use the original CSS only it works fine.. ",
    "waldyrious": "Indentation mismatch?\n. ",
    "kmeurer": "Happy to move it back.  It was originally just clearer to me because Psi is u03c7 and psi is u03c8.  Didn't mean to mess with the order!\n. ",
    "wburgo999": "Sorry, you're right. Just fixed those issues in a new commit. \n. ",
    "alanbrady": "I went off of what is supported in LaTeX. \\R is double struck R which is the set of all real numbers, \\Z is double struck Z which is the set of integers; Q is rational numbers, and N is natural numbers. They are used fairly heavily in proofs.\nEDIT: Although looking at things closer I believe I may have them in the incorrect group and should potentially be in the \"mathalpha\" group according to ams font documentation. (http://milde.users.sourceforge.net/LUCR/Math/mathpackages/amsfonts-symbols.pdf)\n. Ah I see, woops, didn't realize.  When I have a chance later, I'll remove those and see if there's any other symols I might be able to add.  From what I could tell it seemed fairly robust already.\n. ",
    "rileyjshaw": "Cool! Is the motivation behind this abstraction to limit access to the _environments object? Or do you expect for the bodies of has and get to eventually become more complicated?\nIf this API was added solely for clarity, I don't think has and get improve readability over hasOwnProperty and [].. Thanks for leaving hints like this!. I know this is a copypasta, but while(true) would be clearer here.. Meta-comment on GitHub reviews vs. Phabricator: I'm finding it frustrating that comments need to pin to a single line.. Should props be optional?. I only see numArgs used in this review, but I imagine the rest are used elsewhere / externally?. "
}