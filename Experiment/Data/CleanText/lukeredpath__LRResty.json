{
    "lukeredpath": "I agree and I think I will update Resty to do the same. \nI do think there is a case for making use of the authentication challenge header and that is when you don't know the authentication details up front; in this case I think it Ames sense to wait for the authentication challenge and respond to it (presumably by presenting a login UI). \nThis scenario is probably best handled with a separate delegate method or callback. \n. By default, set the Authorization header when using HTTP Basic authentication. Closed by 1386901f9d8c63587c5a36badf997df12aa0961f.\n. I think the best way of handling this would be to allow the configuration of an error handler block that is used for all requests. It seems unlikely that you would want to handle connection errors like this differently for each request. \nError handling needs improving in general so this is something I will look carefully at. \n. I've made a start on error handling via a block or the delegate in a separate branch:\nhttp://github.com/lukeredpath/LRResty/tree/error_handling\n. I made a decision to not do any smart response code handling, preferring to let the user handle this according to their own application logic. I also want to keep the idea of an error (as returned by NSURLConnection at any stage) and a non-success HTTP status as two distinct concepts. \nOne enhancement would be to add some helpers to the Response object to encapsulate some common tasks like there being a 2xx code (wasSuccess) and a localised status message that encapsulates the snippet mentioned above. \n. Non-string objects should have their description form-encoded when part of a payload. Closed by 393864109ff24efae82b6aa7f24692eb2ea98d88.\n. There should be no need to access the queue directly. As you rightly point out, you can just keep a pointer to the LRRestyRequest returned by any of the request methods and call cancel on it. It is the super-class of LRRestyRequest, LRURLRequestOperation that handles cancellation.\nIf you look at the source of LRURLRequestOperation you will see that all calling \"cancel\" does is set a flag. It's down to the implementation of your operation to periodically check this flag and handle it accordingly, which is what LRURLRequestOperation does.\nIt does sound like having a method to cancel all outstanding operations would be useful though.\n. Hi there, have you tried using the Rake tasks provided?\n. Rake is a tool written in the Ruby programming language and is a bit like Make. It's a tool for building projects or running tasks on the command line.\nAs a Ruby developer, I like to use this to automate tasks on my Objective-C projects too. Most Macs already have a Ruby and Rake installation (try running rake on the command line).\nInstructions for building from source are available here:\nhttp://projects.lukeredpath.co.uk/resty/getting-started.html\nIf you're still having trouble, you can download the latest version of Resty from the \"Downloads\" section on the Github project page. Alternatively, you can grab an automated nightly build from here. \n. Sorry for not replying to this earlier.\nThe rake task you want to run is build:ios:framework.\nThis will build a static framework which looks like an ordinary Mac framework but uses a static library so it can be used on iOS. The import should then work correctly.\n. Never got round to it. Don't know why. It should be a simple addition, would you care to submit a patch? (I'm busy with my newborn daughter at the moment!)\n. This has now been added.\n. No worries, I've spent quite a bit of time myself over the last few days fighting Xcode 4 but the project should now build properly in Xcode 4. I've also figured out a way to get the tests running in Xcode 4 too.\nAutomated builds are also now available:\nhttp://projects.lukeredpath.co.uk/resty/downloads\n. Hi there, caching is one area where LRResty is lacking at the moment but I'm definitely interested in improving it.\nInitially I could do more to use the underlying NSURLConnection caching but I'd like to do some smarter stuff with etags and if-modified-since in the future.\n. Unfortunately this change breaks the acceptance tests, so I'll need to look at this a bit more.\n. OK, this change doesn't seem to be compatible with the current synchronous proxy implementation, which causes it to block indefinitely.\nI've experienced no issues with NSURLConnection running on the operation's background thread so I'm afraid I have to reject this change as it is.\nI will incorporate the runloop change however.\n. In cases where your callback behaviour needs to run on the main thread, I'd suggest you use dispatch_(a)sync with dispatch_get_main_queue().\n. As a compromise, I've committed a new change that ensures all delegate callbacks will occur on the main thread, by making use of GCD. Let me know how this works for you.\n. Not sure what was wrong with the download but I've removed it now. I recommend using the nightly build.\n. Hi there, I can't seem to reproduce this problem. What version of iOS are you using?\n. Yes, your expectations are correct; please take a look at the TimeoutTests in the source for more examples.\n. No problem. Error handling for the block APIs definitely needs some work. It's on my TODO list.\n. I'd happily accept a patch\u2026(with tests)\nOn 3 Sep 2011, at 00:33, mflint wrote:\n\nAny plans to support Digest authentication in LRResty?\n:)\nMatthew\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/lukeredpath/LRResty/issues/14\n. Hi, what do you get back if you put the same string into NSURL +URLWithString? If that, as I suspect, is returning nil, then you will need to properly percent encode the URL. \n\nSent from my iPhone\nOn 7 Sep 2011, at 07:29, i00stevemreply@reply.github.com wrote:\n\nHi Luke.  When I am submitting a url such as:\nhttp://clklabvm11.aaa.bbbbbbbbbb.ca:8000/sap/opu/sdata/sap/ZCWMERCSVC/CustomerCollection?$filter=emailAddress eq 'test@example.com'&$sap-client=100&$format=xml\nResty throws:\n2011-09-07 00:08:49.713 CWMercDemo[2974:b603] * Assertion failure in -[LRRestyHTTPClient requestForURL:method:payload:headers:requestDelegate:], /Users/admin/.jenkins/jobs/LRResty Nightly Builds/workspace/Classes/LRRestyHTTPClient.m:86\n2011-09-07 00:08:49.715 CWMercDemo[2974:b603] * Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'LResty requires a valid HTTP(S) URL, received (null)'\nI am guessing that this is due to the single-quotes in the url string?  I tried to escape them with \\ but the same exception is thrown...\nthanks,\nsteve\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/lukeredpath/LRResty/issues/15\n. Hi Pascal,\n\nI'll look into this over the weekend.\nCheers\nLuke\n. Hi Pascal, yes, I'm sure I'll have time to look at this tomorrow.\nPlease do send me a link to your slides once you've presented them as I'd love to see them, even if they are in German.\n. Hi Pascal\nI've taken a look but I can't quite see what the bug is. The code in your original message is already present. Am I missing something?\nLuke\n. Could you please try this using the latest HEAD version and get back to me.\n. Let me know if this doesn't solve your problem.\n. You need to create these files yourself. An example file is provided:\nhttps://github.com/lukeredpath/LRResty/blob/master/Resources/GithubCredentials.h.example\n. I've not come across this issue before; the functional tests work OK. NSDictionary payloads are sent as form-encoded data; is this what your server is expecting?\n. ",
    "kluivers": "I found that the completion block also doesn't get called when using https. I tried the same resource on http and https. Plain http worked, https did not work. Anything that needs to be done to request a https resource?\n. iOS already contains a caching functionality for NSURLRequests, but doesn't write this cache to disk. So every app restart the cache is gone. I've been using a subclass of the NSURLCache that will actually persist to disk. This will make sure responses for NSURLRequests are persisted to disk if requested using NSURLRequest + requestWithURL:cachePolicy:timeoutInterval:.\nMaybe an idea to integrate something like this in LRResty? See:\nhttps://github.com/rs/SDURLCache\n. ",
    "ir-fuel": "Any news on this? It is very annoying not to be able to handle a connection failure in the response block somehow. Now the app just 'hangs' waiting for something to come back from the HTTP request.\nThanks for this nice http framework btw!\n. ",
    "Caged": "From the grave!  Doing some cleanup of old issues.\n. From the grave!  Doing some cleanup of old issues.\n. That was quick! :D\n. ",
    "NukemHill": "Just getting back to this after being swamped with other priorities.  Luke, which tasks are you referring to?  I don't know what Rake is.  Where do I find what you're talking about?\nThanks for getting back to me.  I'd like to learn this process.  The more skills I have, the easier the process becomes....\n. ",
    "maddox": "yeah i mostly likely will. Keep a look out.\nOn May 4, 2011, at 7:05 PM, lukeredpath wrote:\n\nNever got round to it. Don't know why. It should be a simple addition, would you care to submit a patch? (I'm busy with my newborn daughter at the moment!)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/lukeredpath/LRResty/issues/8#comment_1102760\n. I saw! Awesome. thanks! Lots of work the last week or so. \n\nI added it myself, but between all the tests and getting it to build all the different ways + me using xcode 4, it was a shit ton of stuff to figure OUT before actually getting shit done, so I never sent a pull request. Sorry, lol.\nthanks.\nOn Jun 15, 2011, at 2:08 PM, lukeredpath wrote:\n\nThis has now been added.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/lukeredpath/LRResty/issues/8#issuecomment-1375628\n. \n",
    "mattlanham": "Yup i got the same error\n. ",
    "pbihler": "Yes, very annoying - can you fix this?\n. Hi Luke!\nThat's good news. Do you think it is possible to put the 3-line fix I included into the nightly build the next days?\nCurrently, I workaround the fundamental bug (since I cannot handle e.g. server downtimes without the fix) with a category file for LRRestyClientProxyDelegate and a sub-protocol of LRRestyClientResponseDelegate, but that's really not very nice to present\u2026\nThanks a lot,\nPascal\nAm 23.09.2011 um 16:41 schrieb Luke Redpath:\n\nHi Pascal,\nI'll look into this over the weekend.\nCheers\nLuke\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/lukeredpath/LRResty/issues/17#issuecomment-2179221\n. Hi!\nPlease do send me a link to your slides once you've presented them as I'd love to see them, even if they are in German.\n\nI'll do, even if I don't know whether there will be many slides, since\nit's a lot of \"hands-on\", thus live coding...\nBut there will be a video online, eventually.\nGreetings,\nPascal\n\nDr. Pascal Bihler\nUniversity of Bonn, Institute of Computer Science III\nRoemerstrasse 164,  D-53117 Bonn, Germany\n. Hi Luke!\n\nHi Pascal, yes, I'm sure I'll have time to look at this tomorrow.\n\nHad you time to review the bugfix?\nSincerely,\nPascal\n\nDr. Pascal Bihler\nUniversity of Bonn, Institute of Computer Science III\nRoemerstrasse 164,  D-53117 Bonn, Germany\n. Hi!\nAs far as I know, only the LRRestyRequestDelegate receives the\n\"restyRequest:didFailWithError:\" message, thus (depending on which\nmethod you called on the LRRestyClient instance) the\nLRRestyClientBlockDelegate (who cannot do anything with it) or the\nLRRestyClientProxyDelegate  (who also doesn't do anything with it). So\nthe message it lost in the middle of your framework\nAs a Resty-Framework user, I only write a block or provide a\nLRRestyClientResponseDelegate, neither of both receive a\ndidFailWithError: message.\nSo I proposed to extend the LRRestyClientResponseDelegate with an\noptional method to catch the error, and to forward the error in the\nLRRestyClientProxyDelegate to the LRRestyClientResponseDelegate.\n++ Pascal\nAm 26.09.11 15:29, schrieb Luke Redpath:\n\nHi Pascal\nI've taken a look but I can't quite see what the bug is. The code in your original message is already present. Am I missing something?\nLuke\n\n\nDr. Pascal Bihler\nUniversity of Bonn, Institute of Computer Science III\nRoemerstrasse 164,  D-53117 Bonn, Germany\n. ",
    "mflint": "This is using the iPhone simulator, v4.3., but building with the latest beta Xcode.\nFrom your response, it sounds like my expectations are correct about how it should be working?\nI'll have another go later today.\n. I understand now... \nInstead of causing a timeout, LRRestyRequest is gettingconnection:didFailWithError: callback form NSURLConnection, so my delegate should be responding to restyRequest:didFailWithError:.\nI was using blocks, not the delegate - and LRRestyClientBlockDelegate doesn't handle that selector.\nI'll close this. Thanks for listening! :-)\n. As a workaround, I'll make my own version of LRRestyClientBlockDelegate which takes two blocks - one for the success case, t'other for failure - and then make a category to add get:withBlock:andErrorBlock to LRRestyClient.\n. @krstns\nI dropped the relevant stuff in a gist: https://gist.github.com/1384099\nIt adds a category to LRRestyClient, so I write code against LRRestyClient+FailureBlock.h instead.\nBut I don't remember saying anywhere that it's tested! :-p\n. Reason for asking: I'm happy to fork and submit a pull request, but wanted to check first that it's not something already being worked on, and that you'd be happy to receive a pull request in principle :)\n. Of course it works already. I'm just being dim.\n. ",
    "krstns": "mflint: would you mind sharing your workaround?\nI just hit the same problem as you did and would welcome a tested solution :)\nAnd by the way, timeouts don't work either (I just put a breakpoint in my api and held the thread for longer than the time interval setting in lrresty and it would not call the timeout block).\n. Awesome :) Thanks a lot! I will give it a try now :)\n. ",
    "kcorey": "Hi All,\nHaving a real hard time wrapping my head around all this.  The lack of timeout errors are driving me mad.  I've tried seemingly a million things, and none of them make sense.  (originally code similar to the stuff at the top of this thread, then mflint's solution, and by slowly adding breakpoints so I can see things happening).\nBeing an iOS newbie, I'm getting completely lost in all the blocks/delegates/proxies/protocols and whatever else is going on here.  I feel like I'm just about the come to grips with it, and it all falls shattered to the ground.\nAny chance someone could throw up a simple example of using LRResty with the ability to detect timeouts and other errors?  I don't care if it's using the block syntax, the delegate syntax, or something else...just so long as the errors are reported back to my code so I can take appropriate action.\nI'd sure appreciate it.\n-Ken\n. ",
    "ghost": "Thanks Luke. \n1.  +URLWithString did indeed return nil.\n2.  Percent encoding the url fixes my problem!\nClosing issue!\nsteve\n. ",
    "krasnoukhov": "Maybe you have to do something like that.\n. Guys, please upload file.\n. Found a temporary suggestion for error with building on iOS 5 \u2014 Undefined symbols for architecture i386: \"OBJC_CLASS$_LRResty\"\nJust modify Rakefile, and replace BASE_SDK = 4.3 to BASE_SDK = 5.0 then run rake build:ios:framework.\n. ",
    "arloan": "I've confirmed that the problem is still there with the lastest downloadable version.\n. ",
    "siuying": "i can confirm the issue, at (0.11.0).\n. i think my case are cause by i running unit test, in the main app it has no issue, and only in test it block and hangs (both sync and async calls).\nI test with ASIHTTPRequest and it seems it is okay in sync mode and hang in async mode. It seems some operation of their async code are working in main thread, and my test running in main thread and blocking them to proceed properly.\n. ",
    "pcperini": "I can confirm this issue, using the .framework file from the Mac Nightly Build, dated Fri Dec 09 00:01:55 +0000 2011.\n. ",
    "pctj101": "Yes, just normal form-encoded data expected.  POSTing to a Rails app that otherwise works fine.\nIf I see any more, I'll let you know, but I am not actively focusing on this library since I found another one that worked on the first try. \nThis isn't to put this library down... it might have simply been some coincidence or circumstance that I didn't understand.\nThanks for at least looking.\n. you probably need this define\ndefine DEFINE_SHARED_INSTANCE_USING_BLOCK(block) \\\nstatic dispatch_once_t pred = 0; \\\n__strong static id _sharedObject = nil; \\\ndispatch_once(&pred, ^{ \\\n_sharedObject = block(); \\\n}); \\\nreturn _sharedObject; \\\n. ",
    "eneko": "Hey, I really love this library and it is kind of sad seeing that people cannot download the dmgs any more.. it's been like this for a while. Any plan to fix this issue?\n. ",
    "tomandersen": "You can do away with all the ruby building by just dragging all the .h and .m files into your project directly. Then no changes to anything, and everything compiles seamlessly into whatever you are working on iOS, OS X etc. \n. ",
    "chadams": "I got this too, however, you can build from source. follow the instruction at http://projects.lukeredpath.co.uk/resty/getting-started.html\n**However, there is an error on the page. use \"rake build:ios:framework\" NOT \"rake build:ios: framework\" (notice the space)\n. ",
    "MarcoMoby": "I noticed that the \"arc\" branch does not have a rakefile, how can I build it?\n. ",
    "jasperblues": "Changed all targets to use LLVM-GCC compiler, cleaned build folder and run again. Ok now. \n. ",
    "leftspin": "You could record that it was cancelled yourself when you actually cancel it.\n. ",
    "micho": "I think you're supposed to drag LRResty.framework, as opposed to the xcodeproj file. That will allow you to link it.\n. ",
    "spoulson": "I see the framework download linked on the home page http://projects.lukeredpath.co.uk/resty/, but the iOS download gives me a 404.\nI also found the same download file in github nightly builds at https://github.com/lukeredpath/LRResty/downloads, but the iOS version is also 404.\n. ",
    "jboehler": "Yes I have the Same problem...\n. ",
    "Glideh": "I think I have the same here.\nIsn't it related to https://github.com/lukeredpath/LRResty/pull/11#issuecomment-1680458 ?\n. "
}