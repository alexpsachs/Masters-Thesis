{
    "tcoulter": "Already added. Closing.\n. Thanks for all the info @tymat! Looking.\n. @tymat Can you run truffle deploy --stack?\n. Hmm. This appears to be an issue with web3. Can you run this in the command line:\ncd $(npm config --global get prefix)/lib/node_modules/truffle/ \nnpm list web3\n. Yep, that looks like the culprit. Will leave this open to figure out what to do next (I'm assuming the other clients will come around). In the meantime, may I recommend the TestRPC? https://github.com/ConsenSys/testrpc\nEdit: I'll make the same changes to the TestRPC once I figure out if this is intended to be standard behavior across all RPC clients. For instance, web3 above is erroring because it's expecting an address and instead receiving a transaction, meaning web3 hasn't yet come around.\n. Oh interesting. I didn't see it in the docs. In that case, I'll see if I can conditionally support both.\n. @tymat Update truffle via npm. It should fix your issue. Let me know if you run into anything else.\n. Hi @tymat. If I understand what you wrote correctly, this is already built in. Truffle uses Pudding under the hood, which makes ABI functions and sendTransaction() not call their callback until the transaction has been processed. The syntax is different than your example, but the effect is the same. Pudding uses promises to allow you to write the following:\ncoffeescript\nval = \"...\" # some address\ntest = TestContract.at(TestContract.deployed_address)\ntest.setter(val, {from: caller}).then (tx) ->\n  # This code block won't be executed until the transaction tx has been processed.\n  # Note: The next line returns a promise.\n  test.addr.call()\n.then (addr) ->\n  assert.isEqual(addr, val)\nThis should produce the effect you're looking for. Let me know if I misunderstood.\n. The function within Pudding that does exactly what you described is here: https://github.com/ConsenSys/ether-pudding/blob/master/src/pudding.coffee#L100\n. Ya, that's a feature of mocha. There are three different scopes the timeouts can apply to. Consider this example:\n``` coffeescript\ncontract \"TestContract\", (accounts) ->\n  # Each test has a timeout of ten seconds.\n  @timeout(10000) \nbefore \"do something before\", (done) ->\n    # This before() hook has a timeout of 15 seconds.\n    @timeout(15000)\nit \"should test something\", (done) ->\n    # This test has a timeout of 30 seconds.\n    @timeout(30000)\nit \"should do something else\", (done) ->\n    # This test only has a timeout of 10 seconds, based on the timeout above.\n```\n. This is no longer valid in Truffle 2.0. You now have way more control of your deployment. Try it out!\n. This has partially been added, and you'll see it in the latest release coming today. \n$ truffle test ./path/to/test/file\n. Closing this unless it's still a concern for you.\n. This is no longer an issue with Truffle 2.0 (and perhaps it was fixed in 1.0). Closing. Thanks!\n. Thanks @oed \n\nSince some contracts might depend on other contracts working it is confusing if the dependant contract runs first\n\nYour test files shouldn\u2019t be dependent on each other. Your contracts can be, but your test files shouldn\u2019t. That said, every test file has access to all contracts, and every test file gets contracts redeployed before the tests in the file run. So as far as running is concerned, order of test files shouldn\u2019t matter. Order of tests on the other hand (it \u201c\u2026\u201d) are run in the order they\u2019re listed in the test file, I believe.\n. Fixed by 3f79d7e882bb4ed996cf43eddf361f06ee9b5850\n. Closing because this is old. All contracts are redeployed for each test, but they are only compiled once. I recommend using something like eth-testrpc or ethersim to increase speed.\n. This is fixed in the latest Pudding (0.0.9). To update Truffle, do npm uninstall -g truffle and then reinstall it via npm install -g truffle. \n. You should have the full stack now. \n. Closing. REPL added. Thanks for your work!\n. Thanks @oed!\n. All, to use this, you need to specify a path to a web3 node module which includes both the frontend minified version as well as the node require'able version of web3.\ne.g., your app.json would look something like this:\n{\n  // ...\n  \"rpc\": {\n    // Default RPC configuration.\n    \"host\": \"localhost\",\n    \"port\": 8545\n  },\n  \"web3\": \"./node_modules/web3\"\n}\nIn this example, ./node_modules/web3 is relative to your project directory.\n. Hi Iuri. I honestly believe the statement in the Readme to be correct and I don't consider it to be misleading. I do think Truffle intends to do things differently.\nRegarding contributing, I think Truffle's functionality differs significantly from that of Embark and it might be too late to merge the two (though I could be wrong). That said, in multiple interactions with you it seems you've been less than happy that Truffle exists, and during those interactions you did not come off as friendly or genuinely interested in having a dialog about what makes Truffle and Embark different. I heavily pushed the idea within Consensys of merging the two codebases, but ultimately the tone of your interactions caused us not to consider the idea further. \nWe might reconsider this in the future - in fact, I would like that. But right now we see ourselves as taking a different approach, and we're going to see that through. If you have any questions or would like to talk more, please let me know.\n. I felt I was accused of not caring about the community - which I believe is a statement you said explicitly. \nStill, will you be at DEVCON? I hope to be there (still unsure though) and it would be great to talk about this in person instead of over text.\n. https://www.reddit.com/r/ethereum/comments/3cb8sq/truffle_development_environment_for_ethereum/\nIt started with \"ripoff\", then \"Truth is, I'm too excited about the imminent ethereum release to care too much about this. :)\" (basically, equivalent to \"I don't care what you're doing\") to \"Embark is open to collaboration if ConsenSys likes the open source spirit.\" - at this point, given the other comments, it seemed you suggested we don't. This isn't just my personal opinion; I looked to others to help me understand your tone.\nRegardless, this is all water under the bridge. Let's mend this at DEVCON.\n. Hi Joe. Would be happy to.\n. Works great for me. Thanks Joe. \n. Yep. This will happen once I'm happy with 0.0.14. :) Total rewrite of the code (well, conversion from Coffee to ES6) so I wanted to put it through its paces.\n. Done. Published 0.0.14 to npm.\n. Alright. I just merged with master as I pushed a new change that caused a conflict.\n. @johnmcdowall You still interested in this PR? If not, I'd give it a close. Cheers! \n. Closing for housekeeping, as it's a little outdate. However, if there's significant interest let's reopen!\n. Thanks for the issue. Will be fixed in the next release.\n. Thanks @skmgoldin!\n. Fixed! This will be released in the next version.\n. Fixed! (finally). Thanks!\n. @christianlundkvist Was this in a test or in the browser? I'm fixing this in the automated tests right now.\n. @christianlundkvist This should be fixed for tests on the master branch. If you get a chance to test it out that'd be great.\n. Closing this. Should be fixed within the next release (coming today)\n. Finally did something about this. Thanks @jdmaresco!\n. Sounds like your solidity compiler (or web3) is returning an unexpected object when compiling your contract. Can you run truffle compile --verbose-rpc and give me the output? (it'll be long)\n. Hmm, for some reason your output doesn't show what's being returned from web3. You should be getting output like this, where the input to web3 (specified by lines starting with >) is followed by output returned from web3 (lines starting with <). Are you getting this output when you run with --verbose-rpc, but github is clobbering it? Or is it not shown at all? \n\n. That's odd. I can't debug the issue without that output.\nCan you tell me what truffle version you're running? \n. Super weird. What Ethereum client are you using?\n. Would you mind upgrading to the latest Truffle on master and running the same command? \n$ git clone https://github.com/ConsenSys/truffle.git\n$ cd truffle\n$ npm install -g .\n$ cd to/your/project/dir\n$ truffle compile --verbose-rpc\nI'm assuming it has something to do with your Ethereum client, however, so I wouldn't be surprised if after following the steps above you receive the same error.\n. Awesome, this is exactly what I needed. Looking into it.\n. Okay, so I hate to say this, but Truffle makes some assumptions about your contracts and so enforces those assumptions. Truffle can't find the compiled version of your code returned from your client because your contract name Lotto (capital L) is different from your contract's file name lotto.sol (lowercase l). If you rename your file to Lotto.sol, I bet you it'll work just fine. \nThanks for going through all this run around. Can't believe I didn't notice this before.\n. I could likely detect this case and print a warning message.\n. Thanks for the bug. I'll probably just make these values configurable in app.json.\n. This is now a duplicate of another ticket. Will be fixed in 0.4.0\n. Thanks @jdmaresco. Appreciate it.\n. @jdmaresco FYI: I'll be releasing a new version of Truffle either today or tomorrow that includes truffle serve, which should be a stand in for using SimpleHTTPServer. As well, truffle serve will act like truffle watch in addition to serving your built files on port 8080.\n. This should be fixed. Truffle has removed all reliance on babel, which was the cause. If you are still seeing this error in Truffle 2.0 let me know. Thanks!\n. This is a great report, thanks. I'll make sure to change it. \n. Fixed in the latest commit. Closing!\n. Thanks for your comment.\n\nRight now, however, the developer must know how to run geth themselves in a way that does not put their account balances at risk.\n\nI can see the usefulness, but if you're running Truffle against the live network, I think this is important knowledge. Why trust Truffle to do it right? \nThat said, I'm going to close this as as of Embark 1.0.2 Truffle and Embark no longer have philosophical differences, and will eventually merge efforts in the long run. We can leave this feature to the eventual merge.\n. Thanks @vishakh. This is a good change. I wonder if since we're able to detect the problem, we might as well return the correct result. \nAlso, there's one issue here. The first result from compile_solidity (i.e., var contractName = Object.keys(result)[0];) isn't necessarily the right contract. For instance, in the case where the code submitted to compile_solidity contains more than one contract (which is possible), the last one will be the one that represents all the compiled code. If we're going to detect this case, we should likely go through the list if keys, convert them to lowercase and see if there's matching one. If so, either show an error (or better) return the right result.\n. Hi @mhhf. Are you familiar with the asModule() function of the provisioner? https://github.com/ConsenSys/truffle/blob/master/lib/provision.es6#L29\nWhat context are you trying to use this code in? Can you tell me more about what you're trying to do? \n. Hmm. Is there any code of yours I can see? If you run truffle build -e consensys-testnet, where consensys-testnet is an environment set up within your truffle config directory, then it'll inject the contracts from that environment.\nCheck out Myth 7 on this post here: https://medium.com/@timothyjcoulter/truffle-tricks-for-ethereum-development-dispelling-8-myths-first-impressions-880f66bf3320\n. Get on the consensys slack and let's chat about this! Would love to help if the above doesn't work out.\n. Update on this. Use the newly added include-contracts processor instead of inject-contracts. Note that with the new release of Truffle coming today, inject-contracts has been renamed to bootstrap.\n. It's not, currently. Truffle hasn't taken a stance on what the ideal deployment structure should be. When deploying contracts with truffle deploy, the constructors shouldn't take an argument - these will be your hub contracts, and ones that exist as an intermediary so you can update your other contracts later. For more complex deployment options, check out Myth 8 here, where truffle exec is used to run a custom deploy: https://medium.com/@timothyjcoulter/truffle-tricks-for-ethereum-development-dispelling-8-myths-first-impressions-880f66bf3320\n. Closing, as if you have complex deployment needs you should manage that yourself.\n. Hi there. Yep, this has already been brought to my attention. Will have a patch soon. Sorry for the trouble.\n. Fixed. Reinstall, you should now have version 0.2.2.\n. Fixed. Reinstall, you should now have version 0.2.2.\n. First impression (still need to dive deep):\n1. \"added watch:tests task\" - awesome.\n2. \"allow redeploying contracts from within tests\" - awesome. Need to see how you did it.\n3. \"use evm snapshot/revert before/after tests instead of redeploying\" and \"only use snapshot/revert if the server supports it\" - the last bit is important. Truffle used to use evm_snapshot and evm_revert, but this prevented you from running your tests against geth. Hence the redeploy model. Still - is the time of deployment slowing down tests by that much? In my experience compiling takes much longer.\n4. \"display Event logs on test failures\" - very interesting. Will take a look.\n. @chetan This branch now exists which has your changes, and my riff on them. https://github.com/ConsenSys/truffle/tree/chetan-testing_improvments\nAs I mentioned, I couldn't get your tests to run in my context, for two reasons:\n1. Moving test files to different directories, as mentioned above.\n2. Snapshotting. Snapshotting is currently only supported by TestRPC, and Truffle is (or at least, I am) moving away from that.\nThere are a few code changes I have questions about. You'll notice I made a few refactoring changes, but given the following questions I assume there are more to be made:\n1. Nothing sets Truffle.can_revert to true (unless I deleted the code to do that...). Since this is the case, why support the functionality? Are you setting it yourself within your own tests? https://github.com/ConsenSys/truffle/blob/chetan-testing_improvments/lib/test.es6#L76\n2. Why does both reset_state and can_revert exist? To me they're synonymous, as you mentioned that redeploying between each test is too time consuming, so you'll only want to reset state if you also can revert. Wanting to redeploy between each test seems like an edge case. https://github.com/ConsenSys/truffle/blob/chetan-testing_improvments/lib/test.es6#L111\nMore on that last point: I've been thinking hard about reverting and/or redeploying between each test case, and I don't think we should, even though we can with evm_snapshot/revert. My main reasoning is geth can't do it, so if we provide that functionality, we'll let users write a suite of tests that likely won't run properly on geth. Instead, I think we should standardize on the assumption that within a contract block, all state is shared.\n. It looks to me like truffle wasn't properly installed (i.e., an npm issue). Do an npm uninstall -g truffle and then an npm install -g truffle and see if that solves it.\n. Hi there. Can you please paste the code of HDC.sol?\nOn Wednesday, November 4, 2015, m888m notifications@github.com wrote:\n\nCould you give me some help with this issue please. Thanks :)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/49#issuecomment-153725928.\n. Hi there. This is a super old issue (I apologize) that has likely been fixed in further releases of Truffle or the most recent release of Truffle 2.0. I'm going to close this for housekeeping purposes. However, don't hesitate to check out the Truffle Gitter for more help, or file a new issue if you run into trouble. Cheers!\n. Can you clone the truffle repository from source, and then install from there? The non-released version of Truffle has the solc version bumped to 0.1.6.\n\n$ npm uninstall -g truffle\n$ git clone https://github.com/ConsenSys/truffle.git\n$ cd truffle\n$ npm install -g .\nShould work for you. Will release a new version soon.\n. Did you ever fix this issue? \n. @taoeffect Are you running an RPC client? I think some of the latest changes to truffle have squelched an error stating your ethereum client of choice (eth, geth, pyethereum, testrpc, ethersim) must be running.\n. I just got done with DEVCON here in london (and my flight's out early in the morning) but let me know how I can help!\n. EtherPudding is a contract abstraction on top of web3's contract abstraction. The readme should do a pretty good job of explaining it: https://github.com/ConsenSys/ether-pudding . In case it doesn't, the main features are 1) Promises, for clean code, and 2) ability to keep your app's control flow in sync with the network (i.e., you don't get your callback until your transaction is mined). There are a few other features, but they're tangential.\nTestRPC and Ethersim are two solutions to the same problem (both of which I have contributed heavily). That problem is productivity: waiting 17 seconds per transaction to see if your code works is a productivity killer. So both of these projects run an Ethereum VM without mining or network and process transactions immediately, simulating the real effects of the blockchain, but much faster. TestRPC is written in Python, Ethersim in JS. \nI'm switching my efforts to Ethersim as the JS solution seems to be more stable (at least, my command of JS is greater). They're nearly feature equivalent, though Ethersim lags behind a few RPC calls. I hope to fill those out soon.\n. @taoeffect Has Iuri updated npm? If you install Ethersim from source, you'll get the updated version with my PRs accepted which fix the OS X install issues:\n$ git clone https://github.com/iurimatias/EtherSim.git\n$ cd EtherSim\n$ git checkout develop && git pull\n$ npm install\n$ ./bin/ethersim -p 8545\n. Interesting. Not necessarily sure why at the moment, never had that issue\nmyself. Currently in bed, however, so will have to take a look at another\ntime. If all else fails fall back on the TestRPC.\nOn Friday, November 13, 2015, Greg Slepak notifications@github.com\n<javascript:_e(%7B%7D,'cvml','notifications@github.com');> wrote:\n\n@tcoulter https://github.com/tcoulter EtherSim from npm still tries to\ninstall an outdated secp256k1, causing it to fail:\nethersim/node_modules/ethereumjs-block/node_modules/secp256k1\n\nsecp256k1@1.1.4 install /usr/local/lib/node_modules/ethersim/node_modules/ethereumjs-vm/node_modules/secp256k1\n\nThe develop copy per your instructions has the correct version and\ntherefore installed, but running truffle test caused it to throw an\nexception:\n-> % ./bin/ethersim -p 8545\nEtherSim v0.1.6\nAvailable Accounts\n0x1a9dc2ad31f3fdf575479760980b242d073ee149\n0xd13493e9d590ba763c202ab4fbe4ab17978cda32\n0xbce16ecae7407ac3e852b8d8ea088746e357dc82\n0x6d17d3b407ff990279cd852c5fe4805523cdc293\n0xba88351daf7a545becf4fccd1555e2750b445c9c\n0x7ab301af6a5d37c09b1264d46a42c78288a339ff\n0xe0c1976e9e9350986aa942b1176f6d23e0db90f8\n0xfb61aa6b35754d8779f989e50e616b0ab4d11662\n0x52e18c7cda62b91cbeafd52fbd0561720e2bd804\n0xa2d916f6f7490ab9f1aa5e444ef078eb7478b23b\nListening on localhost:8545\neth_accounts\neth_coinbase\neth_sendTransaction\neth_newBlockFilter\neth_getFilterChanges\n/Users/greg/Ethereum/frameworks/EtherSim/lib/blockchain.js:313\n    queued.callback(err, result);\n           ^\nTypeError: queued.callback is not a function\n    at intermediary (/Users/greg/Ethereum/frameworks/EtherSim/lib/blockchain.js:313:12)\n    at /Users/greg/Ethereum/frameworks/EtherSim/lib/blockchain.js:418:7\n    at Object.async.eachSeries (/Users/greg/Ethereum/frameworks/EtherSim/node_modules/async-eventemitter/node_modules/async/lib/async.js:130:20)\n    at VM.AsyncEventEmitter.emit (/Users/greg/Ethereum/frameworks/EtherSim/node_modules/async-eventemitter/lib/AsyncEventEmitter.js:42:9)\n    at afterBlock (/Users/greg/Ethereum/frameworks/EtherSim/node_modules/ethereumjs-vm/lib/runBlock.js:55:10)\n    at /Users/greg/Ethereum/frameworks/EtherSim/node_modules/ethereumjs-vm/lib/runBlock.js:179:9\n    at /Users/greg/Ethereum/frameworks/EtherSim/node_modules/ethereumjs-vm/lib/cache.js:136:7\n    at /Users/greg/Ethereum/frameworks/EtherSim/node_modules/async/lib/async.js:52:16\n    at iterate (/Users/greg/Ethereum/frameworks/EtherSim/node_modules/async/lib/async.js:260:24)\n    at Object.async.forEachOfSeries.async.eachOfSeries (/Users/greg/Ethereum/frameworks/EtherSim/node_modules/async/lib/async.js:281:9)\ntruffle test got as far as:\n-> % truffle test\nUsing environment test.\nCompiling contracts...\nContract: Example\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/54#issuecomment-156587306.\n. Thanks @robmeyers. Closing.\n. Should have merged this much earlier. Thanks!\n. Looks like this has has been fixed in the docs. Since this is a very old ticket, I'm going to close it. Please check out the Truffle Gitter or file a new ticket if you have issues. Cheers!\n. Marking this to be explored for milestone 0.4.0. Will test and see if I can reproduce.\n. @Smithgift web3 is definitely available for me in Truffle tests. Can you tell me more about the issues you're seeing here so I can investigate?\n. Reproduced. Fixing now.\n. Hi there. Looks like there has been a solution to this, so I'm going to close for housekeeping purposes. If you run into more trouble, don't hesitate to ask the Truffle Gitter for help or file a new ticket. Cheers!\n. We've now launch Truffle Boxes as of a week ago. This will be dependent on the individual boxes. Soon truffle init will be converted to its own box. Cheers! Please file a new issue if this continues to be a problem.. I'm not familiar with cloud9, but it appears something is killing the Truffle process. I'd get Cloud9 involved. Perhaps they would have a recommendation.\n. The answer to this process might be helpful, but again, not sure. http://stackoverflow.com/questions/27745124/cloud-9-ide-says-killed\n. Marking this for milestone 0.4.0. Treating this issue as \"Truffle using Node 5.0\". If I can't reproduce the error easily I'm going to close it -- unless you guys object of course! \n. I'm not able to reproduce these issues. Please reopen if you guys are having trouble.\n. I think configuring the value is good. However, I don't think you can have a gas limit higher than 3141592. If you try to deploy those contracts to the live network they won't be accepted.\n. I'm going to co-opt this ticket and turn it into these features:\n- [ ] Allow gasLimit configuration for deployment\n- [ ] Allow gasPrice configuration for deployment\n- [ ] Allow from address configuration for deployment\n\nScheduled for 0.4.0 (next release).\n. @MrChico What can I do to convince you to try out ethereumjs-testrpc?\n. Hi @lastperson - Can you output more information about the first error message? Unfortunately the solc package likes to gobble all unhandled errors and then rethrow them. What you're seeing in the above error is the point in the code where the error is rethrown; however, you're not including the stack trace that follows it. Can you give me that stack trace? Thanks - that'll help me better understand the issue.\n. Hey there. I'm going to close this issue because it's so old, and Truffle has been significantly revamped since then. If you're still having issues, don't hesitate to ask in the [Truffle Gitter}(https://gitter.im/ConsenSys/truffle) or file a new ticket. Thanks!\n. Will add this anyway. I'd rather compile completely down to ES5, and if this is the way to do it, then that's what we should do.\nI've always wondering what that Symbol.iterator stuff is...\n. Alright, with stage: 0 set Symbol.iterator still exists in the code, but it looks like they add a shim for it, using this code:\n```\n/\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n \n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n \n * @providesModule getIteratorFn\n * @typechecks static-only\n */\n'use strict';\n/ global Symbol /\nvar ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n/\n * Returns the iterator method function contained on the iterable object.\n \n * Be sure to invoke the function with the iterable as context:\n \n *     var iteratorFn = getIteratorFn(myIterable);\n *     if (iteratorFn) {\n *       var iterator = iteratorFn.call(myIterable);\n *       ...\n *     }\n \n * @param {?object} maybeIterable\n * @return {?function}\n /\nfunction getIteratorFn(maybeIterable) {\n  var iteratorFn = maybeIterable && (\n    (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL])\n  );\n  if (typeof iteratorFn === 'function') {\n    return iteratorFn;\n  }\n}\nmodule.exports = getIteratorFn;\n```\nI haven't spent any time trying to grok what it does, but I'll try removing stage: 0, reproducing the firefox issue and then putting it back. If it fixes firefox, it goes in!\n. Regarding Pudding, es6 has been completely removed from the codebase, and so Symbol doesn't even show up in the bundled code (it's even using webpack now): https://github.com/ConsenSys/ether-pudding/blob/master/dist/ether-pudding.js\nI'm not necessarily sure if that applies to Truffle's default build system and how it handles other es6 files. That said, that build system is being phased out, and people should use their own build system instead. I'm considering this one closed/fixed.\n. Technically speaking, EtherSim itself as a provider won't work as there's no way to connect the provider in node to the provider that'd run in the browser (aside: I think that feature of EtherSim is lofty and not thought through). That said, having one command that runs EtherSim in the background and takes care of the provider configuration is a really nice feature.\n. > why is EtherSim as a provider not well thought out?\nYour dapp and Truffle run in two different execution contexts: The first in the browser, the second in Node. Since EtherSim is basically a blockchain in memory, there's no way to share an instance of EtherSim between the two contexts. Instead, you would just load up EtherSim as its own entity and have both Truffle and your dapp communicate with EtherSim over HTTP, just like any other HttpProvider. Note that because EtherSim is a blockchain in memory, we need to share one instance as deploying to one instance of EtherSim won't share state with another. \nAnswering the question more generally, this means that EtherSim as a provider (or, \"as a library\") is only useful within the execution context that instantiates it. And in that case it's effectively a nice-to-have that makes a few things easier, like not having to deal with port numbers, but otherwise doesn't provide a whole lot of added value. For instance:\nAs a web server (pseudo-code):\nvar Server = require(\"ethersim/server\");\nServer.startServer(8545);\nweb3.setProvider(new web3.providers.HttpProvider(\"http://localhost:8545\"));\nvs., as a library (pseudo-code):\nvar provider = require(\"ethersim/provider\");\nweb3.setProvider(provider);\nI can imagine some cases where it's important to not have a port number, but I think those cases are very few, not to mention solely applicable to Node. Also, Iuri's implementation of it here https://github.com/iurimatias/EtherSim/commit/0d17f6d5bbcb032272417a41d8e688f28023474d (i.e., directly accessing methods through the Manager object, and wanting to support not needing to provide a callback) is bad code and can be done in much better ways without opening up the possibility for new error cases (for instance, this line is fundamentally broken and requires a callback, if you want EtherSim to act like any other Ethereum client: https://github.com/iurimatias/EtherSim/commit/0d17f6d5bbcb032272417a41d8e688f28023474d#diff-b840698050e033004db3ac04392b9ea1L81).\nSo, in short, I can see the value, but there's not much value. And in my opinion the value's not worth the mess that's happening in Iuri's code.\n. > So let's say we add a truffle develop keyword. Would it automatically pass the current rpc.port value to EtherSim as its port, or would we add a new EtherSim config hash to the app.json\nWell, we'd make it do that, ya. But to do so, truffle would have to do things in this order:\n1. Start Ethersim on some port\n2. Deploy contracts to EtherSim (optionally recompile at this step, or compile if they're not compiled yet)\n3. Change the config value to point to the Ethersim we loaded up\n4. Rebuild the app with that config (will happen automatically if we run the equivalent of truffle serve) \n5. Viola! The Truffle bootstrapping that happens within your dapp will take care of the rest (i.e., pointing at the host and port of the EtherSim we started in step (1), since it was in the config)\n. Hmm, I'm not sure I agree with my statements above. I didn't do a full reread, but looks like I was plain wrong. That said, I'm now thinking this:\n\nI\u2019m thinking of integrating the testrpc into Truffle. So you could do something like this:\n$ truffle migrate \u2014dry-run http://localhost:8545\nWhere you point it to the main chain and it migrates off a fork. Similarly, you wouldn't have to set up your own testrpc for truffle test. \n. This ticket is old. We're tracking this in #490. Still a good idea now more than ever though. . Ya, I wish there were an easier way for truffle to detect the issue. There\nis a way, but it's not easy. Although I suppose we could just grep the file\ncontents and see if the name we're expecting at least exists. I'd love help\nif you're interested in tackling that issue.\nOn Dec 24, 2015 11:03 AM, \"Mark Jackson\" notifications@github.com wrote:\n\nAfter hours of debug, it turns out when copying the contract I had renamed\nit without renaming the constructor. Certain dependencies were not being\ninitialized correctly. Wow, talk about learning the hard way.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/68#issuecomment-167150387.\n. Fixed in the latest master, which will soon be pushed to npm. Note that this is major version change (0.2.x -> 0.3.0), so it comes with changes to how your dapps are structured. You can see the migration instructions here: https://github.com/ConsenSys/truffle/wiki/Migrating-from-v0.2.x-to-v0.3.0\n. Your Ethereum client doesn't seem to have eth_sendTransaction implemented. Which Ethereum client are you using? Ethersim?\n. That's embarrassing. :) There's so little tests I forgot to run them. I'll\nupdate them tomorrow.\nOn Jan 6, 2016 10:19 PM, \"Dan Finlay\" notifications@github.com wrote:\nRunning npm test with the current master branch returns this error:\n$ npm test\n\ntruffle@0.3.0 test /Users/danfinlay/Documents/Development/ethereum/truffle\n./test.bash\n\nYour dapp is meant for an older version of Truffle. Don't worry, there are two solutions!\n1) Upgrade you're dapp using the followng instructions (it's easy):\n   https://github.com/ConsenSys/truffle/wiki/Migrating-from-v0.2.x-to-v0.3.0\n( OR )\n2) Downgrade to Truffle 0.2.x\nCheers! And file an issue if you run into trouble! https://github.com/ConsenSys/truffle/issues\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/71.\n. Fixed on master! Thanks for pointing this out.\n. Hmm, what's your node version? Usually deasync has a problem with old or odd node versions\n. Can you install and reinstall truffle? npm uninstall -g truffle then npm\ninstall -g truffle\n. @jimmysoa Those warnings are fine. Are you still having errors? \n. Finally did something about this. Thanks @simondlr!\n\nPS: I changed up the comment a bit, but I think it has the same message. \n. This will require a change in truffle-default-builder as well.\n. Fixed in https://github.com/ConsenSys/truffle/commit/848dd70b425572421c4d5bd32b21a48216bd7746. Cheers!\n. Apparently, when I run npm install solc, I get 0.1.6. Do you know if 0.2.0-1 is somehow marked to not upgrade?\n. This is done. Closing!\n. http://truffle.readthedocs.org\n:drops the mic:\n. Already done on master. Will go out with the new release. Thanks!\n. Fixed in windows branch.\n. This is coming very soon. See windows branch. \n. On master. Closing.\n. Try npm uninstall -g node-sass then npm install -g node-sass. Do you still receive this error?\n. Hey guys. This is usually a result of a configuration issue or a problem with a specific node or npm version. I'm going close this issue as it sounds like it has been fixed. Regardless, if you're still running into trouble, don't hesitate to ask the Truffle Gitter or file a new ticket. Thanks!\n. Closing this one in favor of #204. This feature is definitely still on our list. Thanks!\n. Thanks!\n. Little bit of a heads up: Things look great so far. I'm going to convert a fairly large project to use libraries, as it's ripe for using them and it'd be a great test of the new feature. Will have an update and experience report after that.\n. PS: Thanks again!\n. Merged! Thanks for your work on this, I really appreciate it. It's in master now. An official release with these features will go out in the next few weeks.\n. Oh, by the way: I cleaned up a little bit of the code formatting to match the rest of the code, and fixed a few edge cases related to when deploy information was output (for instance, deploy information shouldn't be printed during test runs). Cheers!\n. Hi @jgostylo. I'm trying to wrap my head around your context. Question:\nDoes the Hub have functions that create a new instance of the Spoke AND does the spoke have functions that create a new instance of the Hub? i.e., does the Hub call new Spoke() AND the spoke call new Hub()? \nMy guess is the latter is false: the Spoke likely doesn't ever create a new version of the Hub. In that case, I'd recommend creating a folder called abstract within your contracts directory, and create a new file called AbstractHub.sol. Make AbstractHub.sol look like this:\ncontract AbstractHub {\n  function hubFunctionOne() returns (uint);\n  function hubFunctionTwo();\n  // etc.\n}\nThe functions in AbstractHub.sol must match Hub.sol exactly, including any return types. Notice that AbstractHub.sol doesn't have any function definitions -- it only has the function signatures. You can use this to tell solc which functions exist at an address without having to include the whole code, and in your case stop you from having to manage two copies. \nFinally, to make this all work, include AbstractHub.sol in Spoke.sol, like this:\n```\nimport \"./abstract/AbstractHub\";\n// Now, I'm just assuming your spoke looks something like this:\ncontract Spoke {\n  AbstractHub hub; // this is actually an address\nfunction setHub(address addr) {\n    hub = AbstractHub(addr);\n  }\nfunction spokeFunctionOne() {\n    // Since your Hub contract at the address set in hub actually contains \n    // a function called \"hubFunctionOne\", this will work just fine.\n    hub.hubFunctionOne();\n  }\n}\n```\nAnd viola! No copying or circular dependencies. \nLet me know if this works for you. I suspect it will, in which case I think your PR is likely unneeded.\n. More info about abstract contracts here: http://solidity.readthedocs.org/en/latest/contracts.html#abstract-contracts\n. This PR is now out of date. However, I think the feature is still a valid one to support. See new issue created, #204. \n. I looks like it might have something to do with your version of node. What version of node are you using?\n\nnpm WARN This failure might be due to the use of legacy binary \"node\"\n\nI'd recommend upgrading to the latest and seeing if you have the same issue.\n. Good call. Thanks!\n. Thanks guys! Looks like there's already another ticket for this: #60. I'm going to close this one, but know that this is tagged to be fixed in the next Truffle release. \n. :+1:\n. I'm surprised this compiles:\nuint[2][] memory arrayOfPairs = new uint[2];\nUnless that's a bad copy paste. Because it looks like you're trying to instantiate a new single-dimensional array and store it in a variable defined as a multi-dimensional array.\n. But - Solidity arrays are weird, so I wouldn't be surprised if I'm wrong.\n. My response to this has been long overdue. This compile fine now on Truffle 2.0. My guess is that since this was reported, solc has been upgraded many times, which fixed the issue. Let me know if you still run into it. Thanks!\n. I'm going to close this for housekeeping purposes. If you continue to have this error please reopen.\n. FYI: This line is due to a dependency using a really old verison of lodash:\nnpm WARN deprecated lodash@1.0.2: lodash@<3.0.0 is no longer maintained. Upgrade to lodash@^4.0.0.\nWhereas this one is specifically related to Truffle:\nnpm WARN deprecated lodash.padleft@3.1.1: This package has been renamed. Use lodash.padstart@^4.0.0.\nAll of these warnings should be looked at, however.\n. Partially fixed here: https://github.com/ConsenSys/truffle/commit/be33f1bf38e5b7bcf7cf903c4ef509239fd8a740\n. I've fixed some of these issues, but this can't be fully fixed until Truffle v0.5.0. Reasoning:\n- Truffle uses truffle-default-builder as the default build system.\n- The default builder provides sass through node-sass\n- node-sass requires gaze\n- gaze requires globule which requires a super old version of lodash.\nTruffle requires gaze as well -- for the next 10 minutes or so -- and I'm wapping that out for chokidar. But we can't be fully rid of these errors until we pull the default builder out of Truffle completely, which has been planned for v0.5.0.\n. More updates here: https://github.com/ConsenSys/truffle/commit/3d7ce69f762dae6e74f0f4794875435521c95b61\n. Looks fixed. Closing.. This is all taken care of in the new Truffle docs: http://truffle.readthedocs.org. Cheers!\n. Great catch. This will require a change in Pudding. Not entirely sure how this sat unfound for so long.\nShould have a fix soon.\n. Should be fixed in https://github.com/ConsenSys/truffle/commit/01d0cea2e0d97410afcdb9a20a0dbcae190557c2. Can you pull from master and give it a shot? \n. After the changes, on my machine:\n\n. @cdetrio I'm going to mark this as closed. Let me know if you still see the issue!\n. Fixed on master. Cheers!\n. Fixed on master. Cheers!\n. This was added in a different branch that was merged in. Currently on master. Thanks!\n. Fixed on master after upgrading solc.\n. Hey @tayzlor, happy to figure out why the setting didn't work. That said, can I get a broader overview of why you need this? Knowing the use case would help significantly.\n. @lastperson You should be able to import contracts outside of the contracts directory, but I've verified that's a bug. Solidity imports are relative to the contract, and due to an assumption that all contracts live in the contracts directory, Truffle's having trouble finding the contract source. \nI've written a bug for this here, and verified it on my own: https://github.com/ConsenSys/truffle/issues/141\nFor now, configuring the name of the contracts directory is a bigger feature that needs to be addresses after major structural changes (in the works). For housekeeping purposes I'm going to close this ticket, but know that having a more flexible file structure is something we're actively pursuing. \nThanks!\n. Hi @jonnor. I'm currently in the process of revamping the scripts that get run, mostly for windows support, but it'll result in better organization and portability in the long run. Can you do this for me:\nFirst, pull from the windows branch and install locally:\n$ git clone https://github.com/ConsenSys/truffle.git\n$ cd truffle\n$ git checkout windows\n$ npm install\nThen, try running truffle through the new cli.js:\n(in truffle dir)\n$ node cli.js <options>\nDoes that work for you? My guess is it should. Let me know -- I expect this to be pushed to master in days.\n. @jonnor I just tried, and this is fixed on master. A script shows up at ./node_modules/.bin/truffle when installed locally, and it seemed to work for me. Will close this -- although master hasn't been released to npm yet. Please reopen if you continue to encounter issues.\n. Fixed on master. Cheers!\n. This has been fixed on master. Cheers!\n. @MrChico Thanks for the ticket. This should now be fixed on master. Can you give it shot and let me know if it work for you? Closing this ticket. Please reopen if you still have issues. \n. On master.\n. This should be fixed on master.\n. Closing this one as new docs have just been finished! Thanks though!\n. Whoops! Here's al link: http://truffle.readthedocs.org/en/latest/\n. Do you have an Ethereum client running? \nPlease check out the documentation here: http://truffle.readthedocs.org\nPlease reopen if this doesn't fix your issue. Thanks!\n. Did you guys run truffle migrate before running truffle serve? You need to deploy your contracts first before you can have a website that interacts with them.\n. Hi there,\nI had meant to respond to this sooner. Can you try out the 0.4.0 pre-release? https://github.com/ConsenSys/truffle/releases/tag/v0.3.9\nOne of the fixes/features is the following, which I believe fixes your issue:\n\nBetter log processing during failing tests. If one of your tests fail, Truffle will now better show the logs that applied to that specific failing test rather than display all logs fired over the course of the test run.\n\nPlease reopen if this does not fix your issue.\n. Add via slightly different implementation on master. Cheers!\n. Doc searching is provided free by the web host, readthedocs.org. I tried it last night while on mobile and it didn't appear to be working. However, this morning, search appears to be working fine. \n\nIf your problem persists please contact readthedocs.org. Thanks!\n. Thanks @TOMOAKI12345. This has already been fixed in the 0.4.0 pre-release. Please try that instead!\nhttps://github.com/ConsenSys/truffle/releases/tag/v0.3.9\n. Good catch. Will fix today.\n. Fixed on master. Thanks again.\n. :) You're welcome.\nOn Thu, Mar 24, 2016 at 8:27 AM, Dave Bryson notifications@github.com\nwrote:\n\nThank you for Truffle!\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly or view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/115#issuecomment-200886158\n. Fixed on master. Also, the example now comes with .js config files instead of json.\n. This is due to your contract's name not matching your contract's filename. Please see this page under the heading \"Convention\": http://truffle.readthedocs.org/en/latest/getting_started/compile/\n\nThis has already been fixed on master.\n. You'll have to show me the code then - hard to debug otherwise. Related tickets: #113, #89, #60, #39\n. Good point though - those characters shouldn't be there. If you want to get the PR submitted though, which I'll accept, you'll have to change those strings like this:\n`>> File ${display_path} changed.`\nTurns into:\n\">> File \" + display_path + \" changed.\"\n. Hmm, I thought I fixed this. Are you on master?\n. This line should be filtering out any files that don't end in .sol or files that start with a .: https://github.com/ConsenSys/truffle/blob/master/lib/config.js#L241\nIf you're on master and still seeing this behavior, will reopen, and we should debug when you have time.\n. This looks like a duplicate of #121. Closing.\n. This will be fixed with the imminent release Truffle v1.0.0 next week. In the mean time, use the v0.4.0 pre-release (which will be turning into v1.0.0) which does work! Cheers! https://github.com/ConsenSys/truffle/releases\n. Whoops. Thanks!\n. Thanks for reporting this. This feature has been subsumed into Truffle 2.0's migrations feature, where you can decide which contracts get deployed using code. Give it a shot if you haven't already! Cheers!\n. Not sure. Unfortunately I don't believe this to be a Truffle issue. Truffle is using the solc library provided on npm. My only guess is that your version and the version of solc in Truffle (v0.2.x) are different.\nGoing to close because I don't think there's anything we can do. \n. Hmm, this seems like a configuration issue, likely due to node or npm version. As this ticket's old, I'm going to close it. Apologies for the lateness, but you'll get quicker responses to configuration issues by checking the Truffle Gitter first! https://gitter.im/ConsenSys/truffle\nCheers!\n. Note that the warnings about fsevents aren't the issue. Instead, it's having trouble reading from github:\n```\nnpm ERR! Windows_NT 10.0.10586\nnpm ERR! argv \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"install\" \"-g\" \"truffle\"\nnpm ERR! node v5.1.0\nnpm ERR! npm  v3.8.5\nnpm ERR! code 128\nnpm ERR! Command failed: git -c core.longpaths=true clone C:\\Users\\AppData\\Roaming\\npm-cache_git-remotes\\git-https-github-com-debris-bignumber-js-git-master-df3f1ce1 C:\\Users\\AppData\\Local\\Temp\\npm-3860-01924847\\git-cache-f2055bfa\\94d7146671b9719e00a09c29b01a691bc85048c2\nnpm ERR! Cloning into 'C:\\Users\\AppData\\Local\\Temp\\npm-3860-01924847\\git-cache-f2055bfa\\94d7146671b9719e00a09c29b01a691bc85048c2'...\nnpm ERR! fatal: '/cygdrive/c/Users//AppData/Roaming/npm-cache/_git-remotes/git-https-github-com-debris-bignumber-js-git-master-df3f1ce1/C:\\Users\\AppData\\Roaming\\npm-cache_git-remotes\\git-https-github-com-debris-bignumber-js-git-master-df3f1ce1' does not appear to be a git repository\nnpm ERR! fatal: Could not read from remote repository.\n```\nYou're on Windows so you don't want fsevents anyway.\nI'm not sure what the reason is but I don't think this is a Truffle issue. I'm going to close for now as it seems like a networking error.\n. Which version of Node are you running?\n. Nevermind, node v5.1.0.\n. Very interesting. I think I know the issue, but not sure why it'd be fine in other contexts.\nCan you tell me which version of Node you're running? \n. @Akiiki Right, but what is your NodeJS version? \n. $ node --version\n. Ah, can you upgrade to Node v5.x? See here: https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions\n. It's so much faster. When developing using geth, you have to wait for transactions to mine which take at worst an average of 17 seconds and at best 2 to 4 seconds if you're on a private geth node and mining on your machine. If the latter, and you're on a laptop, your fingers will burn off. :) The testrpc, on the other hand, circumvents the need for mining and processes your transactions immediately, as if you have an ethereum network made solely for you. This makes it so when you press a button on your dapp that triggers a transaction, the transaction processes immediately and you get quick feedback on whether or not your code works as you expect. This also goes for automated tests, speeding them up significantly. Lastly, accounts on the testrpc come pre-filled with Ether so you don't have to worry about setting up accounts yourself or mining for test Ether.\nOnce you're done developing on the testrpc, that's when you go try your code on a local private geth node just to be sure everything's works well there. Once it does, you can now be certain when you finally deploy your code to your \"production\" network (the public ethereum network, or your consortium private network, etc.) you can be sure it'll work.\nSo in short: Speeds up development significantly, so you only have to focus on building your dapp. And you don't have to mess with account configuration during development.  \nI'm going to close this as it looks like you got your issue fixed! Cheers!\n. Thanks @hermanjunge!\n. Version 1.0.1 pushed to npm with the latest solc. Thanks!\n. Not sure why I didn't merge this sooner. Thanks!\n. Whoops, fixed. Give it another shot - should be updated now to 1.0.2. \nIf this still doesn't work, I'd love to know the error, and feel free to reopen this ticket. That said, upgrading to node 5.0 should solve your issues as well. Cheers!\n. Hey @hermanjunge, can you take a look at what the String team is doing here? https://github.com/dominicwilliams/instant-dapp-ide\nIt's a full dapp development docker image with TestRPC and Truffle. Would love to get your opinion. I'd like to evaluate supporting their effort as that pushes maintenance of docker images over to them.\n. Which would you want to do? I just spent a few days with them, and I'm sure\nthey'd be very open to us helping. I think if we do it right we can make it\na team effort.\nTotally understand both your pros and cons. Good points all around.\nOn Apr 12, 2016 9:36 PM, \"Herman Junge\" notifications@github.com wrote:\n\nDone the evaluation\nCons first, as I don't want to give the idea that I don't want other\npeople to do the docker stuff. Actually I love the ole' Give a man a fish\n/ Teach him to fish saying. That way, we have more bandwith to learn more\nthings and solve other problems. So, here is the thing:\nCons:\n- Running more than one process inside a container is an anti-pattern\n  .\n- They need help to make the image lighter.\n- Forces the dev to develop using Cloud9. What if the dev just wants\n  truffle without anything (they should not be using testrpc, but a real\n  node)? What if they use vim (or, god forbid me, emacs), atom,\n  sublime, etc?\n- Regarding the above: A much better pattern is an array of containers\n  orchestrated using docker-compose.\n- This is nitpicking, but they need help in the design of the\n  Dockerfile, every line is a layer, and layers must be compact.\n- Finally, they should rely more on external files (and directories),\n  they could be easily updated at build time, adding the right instruction to\n  the build script, in order to keep a smaller Dockerfile.\nPros:\n- We won't have, in the future, to maintain anything about docker. (HUGE\n  PRO)\n- We can support their effort to modularize their dev environment,\n  should they want our help, of course. (See above what I think of\n  fishes and code).\nTLDR: Cool. If they let us help them, we can have this excellent dev\nenv: powerful slim, fit, adaptable. And we can focus on solving other\nproblems.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/ConsenSys/truffle/pull/134#issuecomment-209223698\n. I'm sure they'd love your input. Let me reach out to them to see if they're\ninterested and we'll go from there.\nOn Apr 12, 2016 9:43 PM, \"Herman Junge\" notifications@github.com wrote:\nI can work with them, my biggest complain is that the development\nenvironment must be modularised into several containers orchestrated using docker\ncompose.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/ConsenSys/truffle/pull/134#issuecomment-209225727\n. @redsquirrel For some reason your link is 404'ing for me. That said, @jeremyellis and @phuongvietle, you solve cyclic dependencies using abstract contracts: http://solidity.readthedocs.io/en/latest/contracts.html?highlight=abstract#abstract-contracts\n\nImagine a scenario where contract A will create a new contract B (A depends on B). And B will use the contract A. Here, there's a cyclic dependency. You can resolve that by creating an abstract version of A and using that within B. Example:\nA.sol\nimport \"B.sol\";\ncontract A {\n  B b;\n  function someFunction() {\n    b = new B();\n  }\n}\nAbstractA.sol\ncontract AbstractA {\n  function someFunction(); // No implementation!\n}\nB.sol\n```\nimport \"AbstractA.sol\";\ncontract B {\n  AbstractA a;\nfunction setA(AbstractA new_a) {\n    a = new_a;\n  }\nfunction useA() {\n    a.someFunction();\n  }\n}\n```\nObviously this isn't a great example because B doesn't do anything useful, but you get around the cyclic dependencies using the abstract version of A. Note: You can't create new instances of an abstract contract (i.e., new AbstractA() will throw an error). If you need both contracts to create a new version of A, you should create a third contract called \"AFactory\" whose sole job it is to create A's. \nClosing as this isn't a truffle issue.\n. Ah, perhaps I misunderstood. Reopening. \n. Truffle creates its own dependency graph in order to determine which files need to be compiled when a specific solidity file has been edited. Perhaps it's overzealous about cyclic dependencies, and should allow the compiler to handle that.\n. @phuongvietle I'm working on some documentation right now on a PR that needs to be merge. That PR as well as other small fixes will make up the 3.0 release. Follow this: https://github.com/ConsenSys/truffle/pull/143 . I'll remove the WIP header and have documentation there today, likely within the next hour.\n. :+1: :) \nPS: docs might be a couple hours, rather than an hour. :) \n. This has been fixed in truffle-compile, v1.1.1. You should be able to get this update if you uninstall and reinstall Truffle, if on Truffle 3.x. Thanks for the reports!. @mjackson001 The issue you reported sounds very different to the one reported here. I'd recommend you create a new ticket instead. \nWhen doing so, it's very helpful to provide code and show us your directory structure, and tell us where you're importing from, say from npm, or ethpm, etc. If from npm or ethpm, that's a known issue.. No longer an issue as NODE_ENV isn't respected. Closing.. selfdestruct is a function of your contract and can be called from within a migration like any other transaction. However, you would need to add the self-destruct command do your contract youreself: http://solidity.readthedocs.org/en/latest/units-and-global-variables.html?highlight=destroy#contract-related\n. Thanks @flyswatter. Responses inline: \n\nIn the 1461005828324_initial_deploy.js, MyContract is the Hub contract?\n\nThe example migrations provided were meant to be completely separate codebases, existing at different stages of a project's lifecycle. However, they could be the same for example purposes. \nIn the first example, no contract exists on the network yet -- this is the project's initial deploy. Here, most everyone would need to deploy new contracts like shown in the first example. The second example is a hypothetical future migration on a different project, where a hub and spoke architecture exists and some changes have been made to the spoke, thus necessitating a new deploy of the spoke and an update of the Hub. \n\nWhen updating the Spoke contract, we're actually deploying a new Spoke, and updating a pointer within the Hub?\n\nCorrect. Again, this is a hypothetical situation but one that is likely to happen in real life (I've coded dapps like this before). \n\nFirst off, if we're going to adopt migrations, it seems like we might as well have the ability to roll them back. This could be achieved by storing an array of the previous migration addresses, or maybe just the ability for a future migration to point back to an older one. Whatever the method, I think we'd regret if we could only migrate to new contracts.\n\nIt's important to note that the examples given are arbitrary code. A migration doesn't necessarily create new contracts -- just as with Rails migrations, a migration could move data around, update a value, remove an item from the list, etc. Given this, it's unclear how to create an automatic way to rollback a migration. At best we can do what Rails does, and have an up and a down target, that specifies direction, where we require the developer to write the down, but in my experience most people don't test their downs, and they are rarely used (in practice, it's mostly for emergencies). I could be persuaded to adopt this model as it aids in development, especially when testing migrations themselves, but it adds significant complication to the architecture including, as you mentioned, saving old addresses. Moreover, even if we were to implement this architecture, since migrations are non-atomic, depending on where a migration fails there's no guarantee the down will run correctly either, leaving the network and your contracts in a worse state. Given this, it's likely better that if you want to \"revert\" to a previous state, like git, your \"revert\" is an action that moves forward in time (i.e., a new migration). \n\nSecondly, as a member of the Ethereum community who loves its distributed nature, leaving one contract creator with the keys to change the contract at all times seems like a re-centralization of power. A user, even on reviewing the contract, has no guarantee that the contract won't be spontaneously updated to different terms.\n\nCan you explain this in more detail? You bring up a good point in that the Migrator contract needs an owner, and should only be updated by the owner, but don't believe that was your main point. In my proposal above, the creator of all contracts -- including the Migrator contract -- are owned by the person deploying them. You can already set the deployment address in Truffle. If you want your Migrator contract to be owned by multiple groups, you can edit the contract yourself to do so. In fact, you can even migrate the Migrator contract, but maybe we should add hooks to make that easier.\n\nI guess this doesn't need to be an issue, as long as we keep the possibility for different types of migrations. Some migrations may require a vote of an approving board, which is essentially the premise of Boardroom by @SilentCicero.\n\nThe world is your oyster @flyswatter. :) The migrator contract just holds migration state: i.e., the last migration that has been run. It doesn't specify what the migration actually is. For that, you must specify it in your migration code, which as stated above can be anything you want.\n\nI guess I'm just making sure that the migration structure is open-ended enough that people could write their own migration contracts, which might require an asynchronous block step of waiting for a third party to sign off on a change.\n\nAgain, the Migrator contract is owned by you and you can edit it however you want, as long as it upholds a simple API. If you'd like to change it so that it has multiple owners, you can.\n. @chrisclark I'm not sure it makes sense to (or put differently, this is a way of addressing that). We could create a system that allows for that and works in addition to after_deploy scripts, but then what do you do down the line when you've had couple contracts in production for a few weeks and realize a bug needs to be fixed? The current deployment implementation won't support that. If we move to a migration infrastructure, you can deploy with constructor parameters as well as create a system for future deployments.\nNote that, if it's not clear, the .new() function in MyContract.new() is where you specify constructor parameters if any exist.\n. Hi @zmitton. I'm not sure I understand. By definition contracts deployed to the Ethereum network are immutable, and there's no way to get around this. The closest option available is to create a \"pointer\" contract which contains an address of the actual contract meant to service a dapp. When you want to update the dapp's code, you deploy a completely new contract and then update the pointer (an example of this is the Hub and Spoke, above). But all of this is not a function of Truffle; the migrations above are just examples. If you want this pointer functionality you'll have to build it into your dapp yourself.\n. @redsquirrel \n\nIt seems like in this situation, it should either auto-create the Migrator contract, or possibly prompt the user about whether a Migrator contract should be created. Otherwise, it seems like it's leaving the dapp in a bad state.\n\nFor new projects (i.e., truffle init) I was thinking about making the Migrator contract deployed as the first migration, and Truffle would use it to record the migration state only if a contract called Migrator existed -- and it would check for the Migrator contract after each migration completed, in case the Migrator had been updated.\nThat said, \"Migrator\" should probably be renamed as it's not doing the migration. It's just recording the state. Perhaps MigrationState. \n. I agree @redsquirrel. Do we need that development benefit in our case, however? I was thinking about getting around that issue with something like this:\n$ truffle migrate --all\nThis will just start from scratch. When used on the TestRPC, things will be quick. This assumes A) your migrations aren't doing heavy processing, and so won't take awhile (i.e., you won't be merging thousands of rows like in Rails); and B) you won't have hundreds of migrations. That said, the up/down interface could easily be added in later with little effort if ever it was needed.\n. Ya, I'm in the same boat. On the verge of implementing it to get better feedback. So far response is positive, and so comes down to implementation.\n. Just pushed the branch migrations to master. No differences from master yet, but changes will be added there.\n. I've created a pull request that should make watching easier: https://github.com/ConsenSys/truffle/pull/143\n. While developing the migrations feature, I\u2019m finding that migrations can be made easier if there were an object to help you with the transactions. I\u2019ve recently whipped up an example \u2014 not quite a prototype \u2014 where a migration could look something like this: \n``` javascript\nmodule.exports = function(accounts) {\n  deployer.autolink();\n  // and/or\n  deployer.link(SomeLibrary, [\n    SomeContract,\n    AnotherContract\n  ]);\ndeployer.new(SomeContract);\n  deployer.new(AnotherContract);\ndeployer.then(function() {\n    return SomeContract.deployed().callSomeFunction(5);\n  });\ndeployer.then(function() {\n    // Do more complex things.\n  });\n};\n```\nHere, the deployer object is your helper, and it can provide functions such as \u201cautolink\u201d (link libraries automatically based on their dependencies), \u201clink\u201d (link specific libraries to specific contracts), \u201cnew\u201d (deploy new version of the contract and ensure the address gets saved), and then more general, \u201cthen\u201d (perform any arbitrary step in deployment). All objects like SomeContract are Pudding contract objects, and through the magic of promises your migration steps can be written synchronously (i.e., the function just creates one long promise chain stored in deployer and executes it later rather than executing each step in the function itself). \nThe point of all this is to provide a mechanism for people to write their own complex deployments without making a tool that's equally complex, while at the same time making deployments as easy as possible. Thoughts? \n. @thiagodelgado111 Couple things:\nHaving an up/down concept is a good one, in general, but undefined behavior will occur whenever a migration errors. For instance, imagine a migration that, when migrating up, makes 20 transactions (possibly an exaggeration). Say transaction 11 fails: This means the whole migration fails. Since we're dealing with a blockchain, you can't revert those transactions, which means you're in an unknown state. If you migrate down from there, it's likely that your down will fail as well since the down expects the environment to be in a specific state, which it is not. This is a similar problem with rollbacks: How do you rollback a migration that can't be reverted? The only way is human interaction, where you have to determine the best possible rollback yourself - and it's entirely situationally dependent. Which means - to recap - we could have a down and a rollback, but they're unlikely to work in most cases, and so in most cases are very useless. The only way around this that I can see is to have one transaction per migration, but this becomes untenable - though I can imagine some people going this route.\nAlso, in my experience with other migration systems (i.e., Rails) down and rollback were rarely used in production, and were only useful during development. Though I can see the benefit of having these features during development, we there are other ways to solve that problem, like testing/developing from a known blockchain state, which can be reverted. That said, you've made me think of a great feature: automatic reverts when using the TestRPC. The TestRPC supports state reverting, so when developing migrations, truffle can take advantage of this and automatically revert if there's an error during a migration. \nGiven the above, out of the gate I'm likely not going to add in support for down and rollback, but we can consider those features once more people use the first implementation and we get feedback from users.\nThanks, as always!\n. @thiagodelgado111 The deployer system is still being fleshed out, but currently it works like this:\nA \"migration\" is a set of steps that need to be performed. In your migration, you build these steps and add them to the list - you don't actually execute the steps. The steps are executed behind the scenes after your migration has finished queueing them. Given that, your notion of setup and change (as far as I understand them) are just special versions of a more general idea: setup is just the first step, and change is a step somewhere in the middle. Here's what your example might look like in the implementation I have now:\n``` javascript\nvar myAppData = require('myapp/libs/data');\nmodule.exports = function(deployer) {\n  // Get the existing contract address before the deploy starts.\n  var existingAddress = Contract.address;\n// Replace the version of Contract. deploy() will do this automatically\n  // if it has previously been deployed in an earlier migration.\n  deployer.deploy(Contract);\n  deployer.then(function() { \n    // Call the upgradeTo function on the existing contract.\n    Contract.at(existingAddress).upgradeTo(Contract.address);\n  }).then(function() {\n    // Call the use() function on the new contract.\n    // Remember: A new version was deployed in the previous step.\n    Contract.deployed().use(myAppData.getParams());\n  });\n});\n```\nAs you can see, the structure is very linear, and cleaner than typical Pudding though it's taking advantage of Pudding constructs considerably. \nNote that I removed your setup step entirely as it was just a function call (getParams()) that could be added later on in the code. I should also add that Truffle is taking care of telling the deployer what environment it's working in; setting up the web3 providers, setting the deployment account, etc. So you don't have to deal with any of that within the migration.\nThe only feature I haven't implemented that you suggested is the onError feature. Good suggestion. I need to think about implementation, but I'll do my best to support your case. My hunch, however, is it might be best to have a CI tool take a look at the truffle migrate exit code (non-zero on errors) and send you the email instead.\n. This has been added in Truffle 2.0. Closing! Thanks for everyone's feedback!\n. Merged, and edited the docs and code to match current style. Thanks! Much appreciated.\n. We're moving away from MetaCoin fairly soon. Closing for housekeeping.. Marked as a bug. Need to verify on Truffle 2.0.\n. @karlfloersch \n\nThe deployer API makes a lot of sense. Feature-wise it seems similar to DappleScript but written in pure Javascript (which seems like a win). Would you say that's accurate?\n\nI'm not intimately familiar with DappleScript's deployment features, so I don't have enough information to answer this. However, I would say that both Dapple and Truffle are aiming to solve the same issues, albeit in different ways. Having your deployment language the same language as your tests and the same language as your frontend, in my opinion, is a big win. This means you can use the same code constructs throughout. \n\nI don't know if I fully understand how the migrations feature works. It might be useful to add a diagram which can describe how the migrations stuff works,\n\nI'll see if I can cook something up.\n\nlike what information is stored in Javascirpt, and what's on chain.\n\nOnly contracts that you deploy are on chain, one of those contracts being the default Migrations contract. From there a single uint tracks which migrations have been run and which haven't, based on the prefix of migration file.\n. Note: Docs for the develop branch (which includes the migrations branch) are available here: http://truffle.readthedocs.io/en/develop/. Edit: They're actively being worked on.\n. Closing this ticket. I've hand merged it into the develop branch.\n. Fixed on develop branch. Closing. Thanks!\n. Hi @elanadimitrova. I apologize for not responding to this. It appears you were able to fix the issue, so I'm going to close this (especially with Truffle 2.0.4, this should be working just fine). Let me know if you run into this issue again. Thanks!\n. I've hand-merged this into the develop branch, which includes the migrations branch changes. Can you guy ensure it's working as you expect? Note the migrations branch includes significant changes to Truffle and requires changes in your dapp. See here for more info: https://github.com/ConsenSys/truffle/pull/143\n. Please close if this works for you so it updates the milestone.\n. I've found that this addition breaks testing (and likely other things):\nError: Couldn't find preset \"es2015\" relative to directory \"/Users/tim/Documents/workspace/Consensys/test\"\nThis is likely because of this code added:\nrequire(\"babel-register\")({\n  \"presets\": [\"es2015\", \"stage-2\"]\n})\nrequire(\"babel-polyfill\")\nI've changed it to this, and left it up to the user to specify their presets in their project's .babelrc.\nrequire(\"babel-register\");\nrequire(\"babel-polyfill\");\n. @lucasconstantino I really like your solution instead. Perhaps that should be the solution for all truffle projects that want to use babel. The Truffle requirement on babel is overkill since Truffle doesn't use babel internally. \n. This has been fixed in this commit / ether-pudding@2.0.9 : https://github.com/ConsenSys/ether-pudding/pull/25\nSince this is a bugfix release of ether-pudding, uninstall truffle then reinstall it again to ensure ether-pudding gets updated:\n$ npm uninstall -g truffle\n$ npm install -g truffle\nSpecial thanks to @redsquirrel. Will close ticket. Please reopen if you continue to see the issue.\n. Hi there. I believe this has been fixed in solidity-parser, a module Truffle uses. Please reopen this ticket if you're still having an issue. Thanks for reporting!\n. Hi Benjamin,\nIf you still have an app.json file, this means you're on a very old version\nof Truffle. Can you try upgrading to the latest version? Although the\ncurrent version of Truffle is v1.0.0, these migration steps from v0.2.0 to\nv0.3.0 should help.\nhttps://github.com/ConsenSys/truffle/wiki/Migrating-from-v0.2.x-to-v0.3.0\nThanks!\nOn Mon, May 9, 2016 at 1:15 AM, BenjaminJornet notifications@github.com\nwrote:\n\nThank you for your answer ! In the app.json file, should I replace\n\"rpc\": {\n\"host\" : \"localhost\",\n\"port\": 8545\n}\nby something like that :\n\"rpc\": {\n\"host\" : \"consensys-testnet\",\n\"port\": 8545\n} ?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/149#issuecomment-217802688\n. Reading your configuration above, your host variable is improperly configured. host refers to an http host, and consensus-testnet doesn't exist (i.e., it's not consensus-testnet.com, etc.). You'll need to find a host running an Ethereum node connected to the consensys testnet in order to use that host. \n\nI'm going to close this as it's a configuration issue. Please see this documentation for more details: http://truffle.readthedocs.io/en/latest/advanced/configuration/\nPS: Truffle 2.0 has been released. Please try it out!\n. Interesting. As an alternative, you can always try Git for Windows, which provides the Git BASH terminal. It's guaranteed to work correctly there. https://git-for-windows.github.io/\n. This issue has been fixed on the Truffle master branch and will be released later this week (likely tomorrow). The README has been updated in two places that describe how you can avoid this issue in the future. Thanks for reporting!\nhttp://truffle.readthedocs.io/en/latest/getting_started/installation/#recommendations-for-windows\nhttp://truffle.readthedocs.io/en/latest/advanced/configuration/#resolving-naming-conflicts-on-windows\n. Truffle default builder is no longer supported. Closing for housekeeping. . @DiscRiskandBisque What version of Truffle are you using?. Apologies for not responding to this. And thanks for the feedback & kind words!\nI just released Truffle 2.0 which allows for more complex deployments. Instead of discovering contracts during deployment, you now have to code how you want your deploy to function. These deployment scripts you write are called migrations, and more can be found here: http://truffle.readthedocs.io/en/latest/getting_started/migrations/\nI suggest you give Migrations and Truffle 2.0 a shot as it allows for significantly more control of your dapp deployment, especially in complex scenarios. Let me know if it works for you!\n. Yes, the caret should be there. Good catch. Will bump and publish. Thanks!\n. v1.0.3 published. Thanks again!\n. It's because NODE_ENV is set. If you unset NODE_ENV it should work correctly.\nThis will be fixed in the next version.\n. Closing for housekeeping purposes. If you still have issues don't hesitate to let me know!\n. Likely feasible if the enums are described in the contract's ABI. This would be a feature update for ether-pudding, however.\n. @NellyWhadsDev What happens when you rename truffle.js to truffle.json and convert your config file to JSON instead of Javascript? Does that make any noticeable change? \n. No, the JS file provides significant features in that it's Javascript instead of JSON. You should try installing Git for Windows which comes with a new terminal called Git Bash which won't have the issue. https://git-for-windows.github.io/\n. Whoops, didn't realize you were already using it. As far as a more elegant solution, I think \"fixing\" the Windows command line is the most elegant, IMO. :)\n. This has been fixed on the master branch of truffle. A release will be made tomorrow containing the fix. The README has been updated in two places that tells you how you can avoid this error:\nhttp://truffle.readthedocs.io/en/latest/getting_started/installation/#recommendations-for-windows\nhttp://truffle.readthedocs.io/en/latest/advanced/configuration/#resolving-naming-conflicts-on-windows\nCheers!\n. Hey @raineorshine,\nI apologize for not responding to this. The way I do it is to have the test set up a new version of the contract using MyContract.new(), passing constructor parameters, then I write tests against that contract using further transactions and calls. Let me know if you need a code example, and I can provide one. \nClosing for housekeeping, but I hope I helped (even though my response was way late!). Thanks!\n. Hi @thiagodelgado111, I suspect this is an issue with what you're passing to a contract function that expects a BigNumber. It's hard to tell without code however.\nSince this was on Truffle 1.0, can you upgrade to Truffle 2.0 and tell me if you still have the issue? I'm going to close this issue for housekeeping reasons but please reopen and command if you have issues. Thanks!\n. Interesting @raineorshine. I'm seeing this issue for the first time today. \nI like the reporter. Can you give me an example of what the output looks like now? \nPerhaps there's a way to tell when a contract block exists within a describe block. Either way, we can't completely get rid of contract (or override describe) because you may want to use a describe when you don't want the features of contract\n. What, go mocha! I didn't know this either. Thanks!\n. Good catch. Thanks!\n. Added on the develop branch. Closing. Thanks!\n. :+1: will add to the list.\n. @flyswatter Was this an issue in your tests or in your frontend? I've just bumped the web3 version to the latest (0.16.0) on Truffle's end, but this won't effect the frontend if you're using the default builder. \n. The web3 within Truffle is different than the web3 on your frontend. This is because Truffle's default builder is a separate project, and is decoupled from Truffle: https://github.com/ConsenSys/truffle-default-builder\nThe default builder will still need to update its version of web3 in order for web3.eth.sign to be available on the frontend. I created a new issue here: https://github.com/ConsenSys/truffle-default-builder/issues/1\n. I'm going to close this one as this is an issue for the default builder.\n. I gave you one. And I did already. :) Here it is again. https://github.com/ConsenSys/truffle-default-builder/issues/1\n. Hi there. This code is old. Please see our truffle boxes for more info. Thanks!. Hi @TrySpace. I apologize for the late response. These types of issues are best asked on Truffle's Gitter, where it's very likely you'll get a quick response from the community: http://gitter.im/consensys/truffle If your problem is still unsolved, please discuss on Gitter or open a new ticket. Thanks!\n. First check if the .sol.js file has a binary in it. Also, which version of Truffle are you using, and which version of ether-pudding are you using? Pudding just came out with a 3.0 release and Truffle hasn't been updated yet, so you might be seeing a version mismatch. Truffle uses 2.x at the moment.\n. \ud83d\udc4f \n. It looks like from that error message you don't have git installed. Install\ngit first.\nOn Jun 2, 2016 10:13 PM, \"lin520chong\" notifications@github.com wrote:\n\n5548 error error rolling back Error: ENOTEMPTY, rmdir\n'/usr/local/lib/node_modules/truffle/node_modules/lodash'\n5548 error error rolling back truffle@1.0.3 { [Error: ENOTEMPTY, rmdir\n'/usr/local/lib/node_modules/truffle/node_modules/lodash']\n5548 error error rolling back errno: 53,\n5548 error error rolling back code: 'ENOTEMPTY',\n5548 error error rolling back path:\n'/usr/local/lib/node_modules/truffle/node_modules/lodash' }\n5549 error not found: git\n5550 error Failed using git.\n5550 error This is most likely not a problem with npm itself.\n5550 error Please check if you have git installed and in your PATH.\n5551 error System Linux 2.6.32.43-tlinux-1.0.1-default\n5552 error command \"/usr/local/bin/node\" \"/usr/local/bin/npm\" \"install\"\n\"-g\" \"truffle\"\n5553 error cwd /home/marvin/demo\n5554 error node -v v0.10.24\n5555 error npm -v 1.3.21\n5556 error code ENOGIT\n5557 verbose exit [ 1, true ]\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/170, or mute the thread\nhttps://github.com/notifications/unsubscribe/AAFp1foIaI2-wYQC0IQMebVdZh5lFWl6ks5qH7fugaJpZM4ItNUD\n.\n. Closing. Let me know if you're still having an issue.\n. Serpent is not currently supported by Truffle. Things that we'd need in order for it to be:\n1. A way to generate ABI's for serpent code, if that's possible (I don't know enough about serpent)\n2. A serpent compiler in Javascript. \n\nIf both of those exist, I would be happy to support it.\n. Hi @ThiniusAirington. I apologize for the late response on this one. As this was an install issue and is likely due to a node or npm version, I'm assuming you either got it fixed or gave up. For quicker responses for install and configuration issues, please ask the Truffle Gitter for help: http://gitter.im/consensys/truffle\nThanks!\n. In the newest Truffle (not yet released), you  can set the provider by doing something like this in your truffle.js file:\njavascript\nvar Web3 = require(\"web3\");\nmodule.exports = {\n  provider: new Web3.providers.HttpProvider(\"...\")\n}\nNote that this is a beta feature and may not work as intended.\n. Closing for housekeeping. Please open a new ticket if you have anymore issues. Thanks!. Thanks for responding @zlatinov. I'm going to close this ticket for housekeeping purposes. If either of you run into any issues don't hesitate to open another, or ask for help on the Truffle gitter: http://gitter.im/consensys/truffle\n. I believe this is fixed with Truffle 2.0.x \nFor the record, this was a great idea, but I hadn't acted on it previously. Thanks for all your feedback and hard work.\nIf you see this as a problem in 2.0, please reopen.\n. Good bug guys. I'll try to get it fixed in the upcoming version.\nOn Sun, Jun 19, 2016 at 9:07 AM, Harlan T Wood notifications@github.com\nwrote:\n\nOK, @tomusdrw https://github.com/tomusdrw says\nData should be prefixed with 0x\nHopefully if we made this change in Truffle, it would still work with geth\n(etc), and now with parity as well.\nThis does seem to be the expected format in the ETH JSON RPC docs:\nhttps://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sendtransaction\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/179#issuecomment-227005323,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AAFp1f6_evv8OLVESynIduQCotOSnnW8ks5qNWlYgaJpZM4I42k8\n.\n. This has been changed in Truffle 2.0, but the code that does deployment as well as padding the binary (EtherPudding now ensures it's padded). Thanks for the PR, however!\n. Hi @rjl493456442. This is web3.0. The contracts are your backend. :) \n\nWill close this because it doesn't fit into the Ethereum paradigm. You can read more about it in the Truffle docs as well as many resources online. \n. @rohithpr That was an old commit - things have changed a lot since then.\nYou can do this easily with Truffle 3. You'll use Truffle to write, deploy and test your contracts. Doing so will create .json files within your contracts ./build/contracts directory. In your backend, if it's Javascript, you can use those .json files in conjunction with truffle-contract to interact with your contracts from the backend. If you write your backend in a different language, those .json files have everything you need in order to interact with them.\nWe don't have examples that show this, but if you build something that's public we'd love to see it. Cheers!. This is invalid. The links don't need the .md extension. When developing Truffle documentation, run npm run docs within your Truffle checkout and that will give you a development version of the documentation you can work with. You'll see that those links work correctly. Cheers!\n. That's a great point. I never thought of consuming the docs that way (my response seems harsh now, apologies). \nLet me see if those links will work on the documentation site, and if they do we can reopen this PR.\n. Hmm, unfortunately they don't. I wonder if there's another option.\n. Hi @thiagodelgado111. You should check out the develop version of Truffle. Specifically, the migrations feature removes the need for this PR. Give it a try! http://truffle.readthedocs.io/en/develop/getting_started/migrations/\n. FYI: There was a similar issue on Truffle v2.0.0. Upgrade to the (just released) version, v2.0.2, to support contracts with multiple libraries. Cheers!\n. @HCharlanes Good feature. It'd likely need to be added via the console, i.e., truffle test --show-events, or something to that effect. Marking as enhancement and putting on the list of things to work on.\n. I'm not sure why you're getting Error deploying Contracts: undefined. However, the deployment code -- now called Migrations in Truffle 2.0 -- has been significantly revamped, so I'm going to close this issue.\nAs far as configuring geth with accounts, please see this wiki page: https://github.com/ethereum/go-ethereum/wiki/Managing-your-accounts\n. As well, can you try updating your project to Truffle 2.0? You'll need to write migration files instead of deploys, but the whole process has been sufficiently updated, and perhaps the issue you're running into is fixed.\n. @maxweng Can you provide the full error output?\nIt's been awhile since this ticket was updated. Has your issue been resolved?\n. Closing for housekeeping.. Hmm. This appears to be a geth configuration issue and not necessarily a Truffle issue. I'm going to close this to keep the issues list clean. If you're still running into it please reopen and comment. Thanks!\n. This seems very specific to your dapp (i.e., \"buyer\" and \"seller\"). I recommend you have buyer and seller addresses within a contract on chain rather than within configuration. If you want the accounts available to you from your Ethereum client, you can always call web3.eth.getAccounts(). \n. @raineorshine I didn't see this comment you made:\n\nFull repo to reproduce: https://github.com/raineorshine/truffle-192\n\nAwesome. This is exactly what I need in bug reports. Let me give it a shot.\n. Oh, I think I know this answer.\nYou're \"whisking\" yourself, which doesn't do any library linking. If you were to check out MetaCoinWhisked's binary, it would include text like __ConvertLib_________ in it. These are queues for the linker (i.e. Truffle) to replace that text with the actual address of the library. But since you're circumventing this process within Truffle, that text is not being replaced, effectively creating a corrupted binary. When you try to deploy a \"corrupted binary\" you won't get any error messages, just 0x, at least from geth. The TestRPC should complain though (and that's a bug in the TestRPC if it doesn't). \n. This is all just conjecture. I still need to try it.\n. Hey @raineorshine. Is this something you still need to do with Truffle's new migration system?\nIf you run deployer.link() within a migration, even if you don't deploy that contract specifically (say, you want n MetaCoin contracts instead of a singleton), it'll link the library for you and you'll be able to use it in your application without having to do that yourself.\nAlso -- and this might be helpful to you -- EtherPudding 3.1.2 now manages linked libraries for you.  You can call MyContract.link(), passing in the library name as the first parameter and the library address as the second parameter, and it will provider you a binary that you can use for deployment. You can even change the linked address later by calling .link() with the same library name, and Pudding will take care of what I'm calling \"selective relinking\" for you.\nThere's no documentation for this feature of Pudding yet, but here's how the latest Truffle uses it: https://github.com/ConsenSys/truffle/blob/master/lib/linker.js#L24\nNow that I think about it, because of this new feature in EtherPudding, I'm going to close this ticket. There's now much less you have to do yourself, even if you do want to continue whisking things yourself. :) \nCheers!\n. > this error message gave me the hint that truffle is looking for a contract with the same name as the file name\nYa, that's a requirement of Truffle. I want to remove that requirement. Removing that requirement is implicit in #204. Thank you for trudging through this. I'm going to close this ticket and add this requirement be removed in #204. \n. This issue looks resolved on 2.0! (i.e., works fine on my machine.) I'm doing some cleanup of the open issues here, so please reopen if it's still an issue. Thanks!\n. This doesn't seem to be the case anymore with Truffle 2.0.4. I'm trying to do some issues cleanup, so I'm going to close this since I can't reproduce. If this is still an issue for you please reopen and comment. Thanks!\n. Have you tried this with Truffe 2.0?\n. @Schaeff This error message looks like it's coming from the solidity-parser, a Javascript parser for solidity that Truffle uses before sending code to the compiler. If you can find me exact code that causes compilation to fail, that'd be great. Thanks!\n. Fixed on master. Will go out with the next release. Thanks everyone for the report!\n. Hi there @ramvi. There's no way to know all deployed versions of a contract on a network. The goal for deployed() is to provide the address of one contract -- i.e., if your contract is a singleton, like a registry or a factory, this will provide you with an instance of the contract abstraction that points to the address of the deployed contract. If you'd like some sort of registry to manage all deployed contracts, I recommend you create a registry contract that you deploy to keep track of what's been deployed.\nThis is to say that with Truffle 2.0, the deployed() function hasn't changed, and it's goal has always been providing the means to interact with a single instance of the contract.\n. Interesting. I've never used chai-as-promised. I believe EtherPudding (used by Truffle) stopped using bluebird internally in favor native promises. Can you check to see how native promises interact with chai-as-promised? Some test code using chai-as-promised would be great.\n. Fixed with version 2.0.4. The issue was that Truffle wasn't respecting the rpc configuration during migration. This includes the default gas limit as well as any gas limit and other rpc configuration options specified in truffle.js.\n. This should have been fixed in version 2.0.4. Could upgrade and let me know\nif that fixes your issue?\nOn Jul 21, 2016 11:17 PM, \"Vadim\" notifications@github.com wrote:\n\nAs a result, big contract fails to deploy before tests are run.\nLooks like the problem in this deploy() function:\nhttps://github.com/ConsenSys/truffle/blob/master/lib/test.js#L90\nThe options object is created on the fly and a gas value is not there.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/202, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFp1XQPLn_FvRUZG0qU1aGL1-ApxtLbks5qYGB8gaJpZM4JSeIL\n.\n. Hmm. Nothing in Truffle ever sets the gas limit to 0x1e8480. Can you double check your application to ensure this isn't coming from your side? \n. Ah, nevermind. I misinterpreted. Let me look into it.\n. This has been fixed for a few weeks now. I'm going to close this ticket. Let me know if you are still having issues.\n. Done!. This is done! Cheers!. Hey guys, it looks to me like you guys are using the Command Prompt (i.e., cmd.exe). In my own testing, it appears as though the Command Prompt does have this issue. However, Windows PowerShell and Git For Windows (aka Git Bash) do not have this issue. Since the Command Prompt is such an old tool, I'm hesitant to support it. \n\nHowever, I could be convinced to allow an optional truffleconfig.js, or similar, instead of truffle.js. Do you guys have a need for using the Command Prompt vs. the newer consoles?\n. I've added a feature where you can rename truffle.js to truffle-config.js for users who want to use the Command Prompt. If you rename the file, commands like truffle compile --all will provide the desired effects.\nCommit here: https://github.com/ConsenSys/truffle/commit/e584f16088a04859ab20c3ee24019c375ad0314c\nWill go out with the next release. This should be a sufficient enough solution given that there are many solutions (powershell, git for windows, truffle-config.js). Let me know if this doesn't cover most everybody's case.\n. I've added two separate references of this issue to the documentation:\nhttp://truffle.readthedocs.io/en/latest/getting_started/installation/#recommendations-for-windows\nhttp://truffle.readthedocs.io/en/latest/advanced/configuration/#resolving-naming-conflicts-on-windows\nRegarding switching the default configuration name, I'm not yet ready to do that, but I may do it automatically on Windows during truffle init. I'd rather promote users to upgrade to better consoles. \nThanks for your guy's feedback!\n. Thanks!\n. Good catch!\n. This should have changed in Truffle 3. Will add to our list to double check.. It comes from a notion created in Rails: http://edgeguides.rubyonrails.org/active_record_migrations.html\nThe idea is you're migrating the state of your deployment over time. You won't deploy your contracts just once. If you continue developing your dapp, you'll fix bugs, add features, etc. and will need to migrate your app state as time goes on. \n. truffle migrate has replaced the truffle deploy command to allow for more complex deployments. You now need to write \"migrations\", which are deployment scripts. You should do this before running truffle build. Please see the documentation here: http://truffle.readthedocs.io/en/latest/getting_started/migrations/ \n. :+1: for this. Will go into a future release.\n. Are you guys familiar with constant functions, i.e.:\ncontract MyContract {\n  function someFunction() constant returns (uint) {\n    return 5;\n  }\n}\nIf you declare a function constant, then the contract abstraction will know it's only a call. Thus, the following becomes a call instead of a transaction:\njavascript\nvar contract = MyContract.deployed();\ncontract.someFunction().then(...);\n. Hey @maraoz. This is old. I'm going to close it for housekeeping, but please let me know if you have any questions or you think we should expand upon our abstractions.\nNote: More abstraction features are in the works!. Thanks @ajunge! This has already been fixed and pushed out in v2.0.7. Thanks for the report!\n. No solution as of yet. We're still looking into this one. It's particularly hard to debug as the error message doesn't seem to be showing any of our code.\n. FYI all: This has been fixed on master and will go out with the next Truffle release. Closing! Thanks!\n. Unfortunately this isn't something we can solve on our end. Whenever there's a core dump, it means something within node seriously went wrong; this is one of those things that \"it's never supposed to do that\". I'd look into your node installation and update or reinstall the latest nodejs.\n. Hi @shayanb, thanks for the report. This should have been fixed in this commit! Thanks! https://github.com/ConsenSys/truffle/commit/6bd17b1382ac25142445d1a0d52d8ad895c468ae\n. You need to run truffle compile or truffle migrate for these artifacts to be generated. Did you run either of these commands after deleting the build directory? The reason truffle build doesn't generate these artifacts is that it's assumed you'll want to at least compile your contracts before building your frontend (and truffle build is meant to build your frontend). We can add compilation as a dependency to build, however.\nThat said, if you only have a test and a solidity file, you wouldn't want to run truffle build anyway, since you have no frontend. I understand however that in other frameworks, build is synonymous with compile, so perhaps we should merge the two.\n. You can launch the tests by running truffle test. Truffle will also recompile and migrate for you in this case. \nYou can use truffle compile/test/migrate without any requirement on the frontend code. If you don't want to deal with the frontend code, just remove the app directory, remove the build configuration from truffle.js, and don't call truffle build or truffle serve. \nI'm going to close this for housekeeping purposes. Please let m know if you have another issue.\n. @Akshay-agarwal That means Truffle couldn't connect to your Ethereum client. You need to have an Ethereum client running. Please take a look at the documentation: http://truffle.readthedocs.io/en/latest/getting_started/client/\n. Interesting typo. :clap: Have you tested for any repercussions? i.e., does it return a 0 exit code when there are no failures? \n. @area Apologies for the late response, just saw your message (I get way too much email). truffle test prints out enough error messages, so instead of throwing a printable error message, I added the ability for tasks to return a number as an error. If a number is returned, that will be the command line's exit code. In that case, it's the task's responsibility to print out the error message (or not, if they so choose). This should give you the non-zero exit code without an extraneous error message.\nThanks again!\n. See this line in your test (c.js): \nit(\"[I] Initializing addresses\", function() {\nYou're not passing a done callback to the function. When you don't do this, mocha -- the underlying test framework used by Truffle -- assumes your test is synchronous (i.e., doesn't make any asynchronous calls). However, your test makes many asynchronous calls, as shown by your nested callbacks. This means the it() function is going to complete before your asynchronous calls do, and mocha will consider it a success.\nTo ensure it doesn't happen, put a done callback within the function provided:\nit(\"[I] Initializing addresses\", function(done) {\nThen call that done function in your mostly deeply nested function after all your asserts. Mocha will now know that your test is asynchronous, and won't try to evaluate the results of the test until the done function is called.\nThere is one other option here, which is to return a promise, and mocha will evaluate that promise without the need for a done callback. However, this method won't work with nested promise chains, as in your example above. I've rewritten your test to both a) return a promise, and b) resolve your nested promise chains into single chain such that mocha will be able to evaluate it. One aside: You're not catching any promise errors and so even if there was an error mocha wouldn't know about it. In the example below you don't need to, because mocha knows how to handle a returned promise. However, it's good practice to catch errors on promise chains using .catch() when using promises (i.e., this case is an exception). \nUpdated c.js:\n``` javascript\ncontract('C', function(accounts) {\n  it(\"[I] Initializing addresses\", function() {\n    var fileDistribution = FileDistribution.deployed();\n// This return returns the whole promise chain to Mocha.\nreturn fileDistribution.initAddrsDbgTruffle({from:accounts[0],gas:400000000}).then(function() {\n  // This return returns another promise, to be evaluated and then passed to the next callback in the chain.\n  return fileDistribution.testClientAddr.call(0);\n}).then(function(clientAddress) {\n  assert.equal(clientAddress, \"This is a test\", \"[E] The expected client address does not match \" + clientAddress);\n\n  // Return another promise, continuing the chain.\n  return fileDistribution.testControlAddr.call(0);\n}).then(function(controlAddress) {\n  assert.equal(controlAddress, \"0xca35b7d915458ef540ade6068dfe2f44e8fa733c\", \"[E] The expected control address does not match \" + controlAddress);\n});\n\n});\n});\n```\nI'm going to close this ticket for housekeeping purposes. If you're positive there's actually a bug here, and it's not a misuse of promises / mocha, please don't hesitate to write in. Thanks!\n. Thanks!\n. Hi there, \nThis issue looks to be old. For housekeeping reasons we're going to close this. If you run into it in the future don't hesitate to contact us. \nCheers!. Hi there. Thanks for posting this. I'm going to mark this as a duplicate of #314. Even though async/await is fully supported in Node 8, I want to wait a bit to ensure we're not prohibitively excluding users who cannot install Node 8 for some reason (either because of their organization's rules, or something else). Will reconsider this in a month or two. Keep watch of #314 for more info. . We'll definitely take this into consideration as we further our development process. Thanks!. Fixed in Truffle v2.0.5\n. Your contract is an abstract contract and will therefore have no binary.\nYou need to give the function judgeCallback a definition or else the\nsolidity compiler won't produce a binary for it.\nOn Aug 9, 2016 7:01 AM, \"zweicoder\" notifications@github.com wrote:\n\ncontract JudgeSubscriber {\n    function judgeCallback(bytes32 uuid, address liar) external;\n}\nThis interface throws contract binary not set. Can't deploy new instance.\nwhen deployed with\ndeployer.deploy(JudgeSubscriber);\nMore info from @elenadimitrova https://github.com/elenadimitrova from\nGitter who reproduced it:\nI can reproduce however I do get random failures on truffle migrate\n--reset\nsometimes it succeeds in deploying and sometimes it fails with contract\nbinary not set and sometimes it gets stuck and testrpc emits numerous\neth_getFilterChanges calls\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/231, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFp1ZgmK9tOY5vTWWh6N-fsZpBY3r7Qks5qeIgXgaJpZM4JgG6b\n.\n. The TestRPC's filter changes is a separate issue I've seen as well.\n\nOn Aug 9, 2016 7:01 AM, \"zweicoder\" notifications@github.com wrote:\n\ncontract JudgeSubscriber {\n    function judgeCallback(bytes32 uuid, address liar) external;\n}\nThis interface throws contract binary not set. Can't deploy new instance.\nwhen deployed with\ndeployer.deploy(JudgeSubscriber);\nMore info from @elenadimitrova https://github.com/elenadimitrova from\nGitter who reproduced it:\nI can reproduce however I do get random failures on truffle migrate\n--reset\nsometimes it succeeds in deploying and sometimes it fails with contract\nbinary not set and sometimes it gets stuck and testrpc emits numerous\neth_getFilterChanges calls\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/231, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFp1ZgmK9tOY5vTWWh6N-fsZpBY3r7Qks5qeIgXgaJpZM4JgG6b\n.\n. I'm going to close this one for housekeeping purposes. If you run into any more issues please open a new ticket!\n. Fixed on master. Thanks for the patch. Will go out with the next release!\n. This has been fixed in Truffle 3.0. The new error message looks like this:\n\nTims-MacBook-Pro:test3 tim$ ../truffle/cli.js migrate --network notconfigured\nUnknown network \"notconfigured\". See your Truffle configuration file for available networks.\nThanks!. @cmycaro Your error is very different. My assumption is you recently upgraded from Truffle 2.0 to 3.0. please see the upgrade guide here to show you how to properly pull in contract artifacts into your migrations: http://truffleframework.com/tutorials/upgrading-from-truffle-2-to-3\nIf you're still having trouble, please join the Truffle Gitter chat channel and ask your question there. Thanks!. This has been fixed in Truffle 3.0. The new error message looks like this:\nTims-MacBook-Pro:test3 tim$ ../truffle/cli.js migrate --network notconfigured\nUnknown network \"notconfigured\". See your Truffle configuration file for available networks.\nThanks!. Hi @zweicoder, would love to see the repo. If you can get this to me this week (preferably sooner) I can verify and fix this week. Sounds like a good bug.\n. Unfortunately I can't reproduce this. The second run seems to work fine for me.\nHowever, I did find something interesting. Specifically, on this line here: https://github.com/zweicoder/Judge/blob/test/migrations/2_deploy_contracts.js#L6\nYou shouldn't use NODE_ENV in this case -- at least, I wouldn't recommend it. Instead, you should specifically code for the network you're planning to use: e.g., http://truffle.readthedocs.io/en/latest/getting_started/migrations/#network-considerations\nIn this case, you should use check to see if network == \"test\", as that would produce the desired result, using a workflow that is also supported by Truffle. NODE_ENV might just work, actually, but I can't make any guarantees, but it could also be the cause of the issue.\nI'm going to close this one for now. If you continue to run into it, please reopen this ticket or create a new one. Thanks!\n. :clap: No problem. :)\n. This is a good feature. On the list.\n. Proposal: \ndeployer.deploy(ERC20Token, {as: \u201cSilverToken\u201d});\ndeployer.deploy(ERC20Token, {as: \u201cGoldToken\u201d});\nTriaging and looking for a good technical solution. . Was just going to ask what this solved, but then ran into issues which this fixed. Thanks!\n. This should be fixed in Truffle 3.0. Cheers!. This is now available by using a custom provider (undocumented on readthedocs, but documented here: http://truffleframework.com/tutorials/using-infura-custom-provider). Closing.\n. This is a great edge case. Thank you! Reproduced, and attempting to work on it now.\n. Hmm, actually, I was wrong, I can't reproduce this. I thought I had correctly reproduced it, but instead I had only changed one test file to check for \"A1\", and not both test files. In my attempt, truffle test recompiled and redeployed correctly, and the values for both A and B were \"A1\".\nWhat operating system are you using? When you run truffle test, does the output look like this, where it shows that it recompiled?\n```\n$ truffle test\nCompiling A.sol...\nCompiling B.sol...\nCompiling Migrations.sol...\nContract: A\n    \u2713 should be of type 'A' (41ms)\nContract: B\n    \u2713 should build contract of type 'A' (114ms)\n2 passing (2s)\n```\n. > That is the point; I modify A and its test, but don't touch B or B's test. Now I'd expect that the test for B fails, but it doesn't,\nIt did on my machine, until I changed B's test to look for \"AI\" instead of \"A\" (contrary to the mocha output above, which is simply the name of the test)\nOn Thu, Aug 25, 2016 at 12:42 AM, Thilo Keber notifications@github.com\nwrote:\n\nThat is the point; I modify A and its test, but don't touch B or B's test.\nNow I'd expect that the test for B fails, but it doesn't, because B does\nnot get recompiled and therefor is not aware of A's new implementation. In\nthat situation there is a mismatch between the test result showing B as OK\nand a code review that lets me expect that test B fails.\nIn my view there is something missing that models the dependency of B on A\nthat is introduced by the import statement. In general a rule like\nIf B.sol imports A.sol and A.sol is newer than B.sol, then B.sol needs\nrecompilation.\nI'm developing on Ubuntu 16.04, btw.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/243#issuecomment-242305902,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFp1Zn0kdbao7jAkTA26ajlddtaIU0Xks5qjUdKgaJpZM4JoRev\n.\n. np. I was at my email. :) \n. This should be fixed in the latest version of Truffle. Closing for housekeeping. If you run into a new issue please open a new ticket. Cheers!. It already is! v2.0.8. :)\n. Thanks!\n. Hi there. I'm sorry you had an issue. That said, the best way to get support on this forum is to not use all caps, or use comments like WTF and FML. For all future reports, please write out the issue more clearly and less emotionally.\n\nThat said, the issue you're having is not an issue with Truffle, but rather npm. Make sure you have the latest node js installed (you can get it here: https://nodejs.org/en/ , download 6.x). Then reinstall truffle using npm install -g truffle. If you're still having trouble, post the node and npm version here, using the following commands:\n$ node -v\n$ npm -v\nIf these are the latest versions and are installed correctly, you shouldn't have to add items to the path yourself. npm should do it for you.\nRegarding the TestRPC, make sure you follow the Windows Install Instructions, here: https://github.com/ethereumjs/testrpc/wiki/Installing-TestRPC-on-Windows\nNow, I've never tried to install any of this on Windows 7. I've only tested 8.1 and 10. Please google the errors you receive and specifically look for solutions for Windows 7. Again, this is not a Truffle issue, but an issue with your installation of node and npm. \n. Hi there. I recommend attempting to do what the error says:\n\nThe Windows SDK version 8.1 was not found. Install the required version of Windows SDK or change the SDK version in the project property pages or by right-clicking the solution and selecting \"Retarget solution\". \n\nA quick google shows you can get the Windows 8.1 SDK here: https://developer.microsoft.com/en-us/windows/downloads/windows-8-1-sdk\nGoing to close for housekeeping purposes. Since everyone's installation issues are a little different, especially on Windows, I recommend asking these style of questions in the Truffle gitter: https://gitter.im/ConsenSys/truffle\n. Ya, definitely interesting if it doesn't.\n. Interesting. I haven't used Parity. But the error:\n0x0000000000000000000000000000000000000000000000000000000000000000 wasn't processed in 240 seconds!\n... means that Parity returned a transaction id of 0x0000000000000000000000000000000000000000000000000000000000000000, which is obviously incorrect. To verify, can you run your migrations with the --verbose-rpc flag, and paste the output in a gist? That would give us more information about the values Parity is returning.\n. Well this is an odd error (and error message). Reproduced, thanks!\n. I've confirmed that this is a bug with the solc compiler and not with Truffle. I've written up an example project that exposes the error as well as submitted a bug report to solc.js. Will leave this ticket open until the upstream issue is resolved, after which we'll upgrade our solc version.\n. This appears to be fixed upstream. Please reopen if you have any issues. Cheers!. Thanks @mrbodoia! Verified bug. We should probably use find-up in the require function to solve it.\n. @rolandkofler Since your issue might be different than @mrbodoia, I need some clarification: are you require'ing a local module (require(\"./path/to/some/module\")) or an installed module (require(\"mysql\"))?\n. Very interesting. Can you show me the layout of the script you're trying to run and the directories around it? i.e., \n/myproject\n  /contracts\n  /test\n  /node_modules\n  /somescript.js <-- my script\nAlso, would you mind showing me the script? \n. @rolandkofler Are you getting an error message, or does the require just not seem to be working?\n. Ah, your issue is different than @mrbodoia. Due to technical reasons, truffle exec in Truffle 2.0 requires your script to output a module that's passed a callback function. Details here: http://truffle.readthedocs.io/en/latest/getting_started/scripts/\n. This is fixed by Truffle 3.1.10 (beta). Will go out as an official release within the next day or so: https://github.com/trufflesuite/truffle/releases/tag/3.1.10\nThanks for the reports!. Truffle 2.0 had a significant feature upgrade, and one of those features was removing the very basic deploy feature in favor of migrations. Migrations are deployment scripts that you manage that allow for custom, complex deployments. Please read up on migrations, as that's what you'll use to deploy your contracts. http://truffle.readthedocs.io/en/latest/getting_started/migrations/\n. Check out ethpm/ethpm-spec! Cheers!. This is a good bug, thanks for reporting. Similar to #255, will be fixed at the same time.\n. This is fixed by Truffle 3.1.10 (beta). Will go out as an official release within the next day or so: https://github.com/trufflesuite/truffle/releases/tag/3.1.10\nThanks for the report!. Thanks for figuring this out!\nOn Tue, Sep 6, 2016 at 3:55 PM, Marco Polci notifications@github.com\nwrote:\n\nClosed #260 https://github.com/ConsenSys/truffle/issues/260.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/260#event-780131093, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAFp1WSiW2GXfpJHd7qD7czfJGOkK3opks5qne99gaJpZM4J2HEp\n.\n. In general I see this as a good feature. However, I'd guess you want this feature so you can bump the version up to solidity 0.4.x, right? If so, this solution will likely cause more problems than it solves.\n\nThe main reason Truffle hasn't been bumped up to version 0.4.x already is because of the introduction of breaking changes: Specifically the pragma statement. This is an issue because Truffle uses a library called solidity-parser in order to perform some preprocessing, and solidity-parser needs to be upgraded to support the pragma statement before you can use 0.4.x with Truffle. If you were to use the proposed feature to upgrade the version to 0.4.x, Truffle will error before compilation ever occurs.\nWhere this feature could be very useful is downgrading the compiler version, or setting a specific compiler version for testing purposes (aka, testing the compiler) or locking your project into a specific version. But it won't be able to go forward past the latest version Truffle supports (0.3.5 in this case). If we implement this feature, we need to ensure we don't allow users to go higher than the latest version supported as that will cause unexpected errors.\nTo better understand your use case, why do you want to specify the version?\n. A new version of Truffle with Solidity 0.4.11 will be released tomorrow (Monday). However, Truffle can't yet support custom compiler versions because of Solidity releasing breaking API changes on minor versions (generally considered a no no). For instance, in the last three versions (0.4.9 to 0.4.11), the API has changed twice; in order to keep Truffle from automatically breaking and preventing users from compiling at all, we have to lock down the compiler to a specific version.\nWe're unlikely to implement custom compiler version support until Solidity adopts better release practices, which will likely come as Solidity matures. . I'm going to close this issue as I don't see this feature being possible in the short term. Additionally, the desire for \"custom compiler versions\" generally translates to a desire for the latest version, which we try to stay on top of as much as possible. We didn't upgrade to 0.4.9 or 0.4.10 because of a breaking change to the compiler output that prevented Truffle from linking library contracts. Other tools were affected as well.. This is convenient, but I don't want to make serve more complex. If you'd like a more complex build system for web apps, consider webpack integration, which will give you a bunch more features than serve can ever provide. Thanks for the report!. This has been fixed on Truffle 3.x. If you continue to run into this error please open a new ticket. Thanks for the report!. Building has been removed from watch since the 3.x line, so this should now longer be an issue. If you'd like this functionality, consider using webpack or an alternative and the associated Truffle integration. Thanks!. This is fixed on the 3.x line (non-beta), and works with both JS and Solidity files. Thanks for your reports!. Good catch!\n. This has been fixed on master. Thanks!. This has been fixed in Truffle 3.0. Please reopen if you continue to run into the issue.\nApologies for the delay. This wasn't considered directly because Truffle was in the middle of a large refactoring. Thanks, as always!. Thanks Simon. I will be bumping solc today.\nOn Oct 12, 2016 2:06 AM, \"Simon de la Rouviere\" notifications@github.com\nwrote:\n\nThis is because Truffle still uses < 0.4.0 of solc.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/285#issuecomment-253159285,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFp1YoCkDDCXc8Lp9W_aAfgmQGFbHIPks5qzKMPgaJpZM4KJuK-\n.\n. Which error? I'm assuming that's an error coming from solc, in which case you'll have to go to them. I don't think the newest solc supports backwards compatibility based on the pragma statement. \n. I'm going to close this issue. If you're still running into trouble please open a new one.. Hi Rob,\n\nRegarding the Truffle Gitter:\n\nYes. Seems unmanned.\n\nThere are 420 subscribed Gitter users at the time of this writing. There\nare definitely users willing to help. I assume you caught people at the\nwrong time.\nThat said, there is no paid support person, so please continue reaching out\nto the community if you don't immediately get a response.\nCheers.\nOn Fri, Sep 30, 2016 at 11:09 AM, Rob Judd notifications@github.com wrote:\n\nClosed #286 https://github.com/ConsenSys/truffle/issues/286.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/286#event-808827899, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAFp1QSYjddKIlV6Yay2cnb-DSR_LrCtks5qvVBsgaJpZM4KKZ0E\n.\n. This is more configuration then I'd like to add to this feature. Instead, you should create your desired provider and pass in that provider to your Truffle configuration instead of host and port. See configuration docs here: http://truffleframework.com/docs/advanced/configuration#networks. This PR is now out of date. My guess is the functionality it was providing is now available. Please open a new ticket if there's still an issue. Thanks!. This has been fixed. Thanks!. Thanks!\n. Good catch, and good suggestion. Using process.exit() may not be the way to solve this specific error handling case, as ideally the console should never quit. I'll take a closer look at this soon.\n. Good catch. \n\nIt looks like I can merge directly from your master branch, which I didn't realize until just now (the merge button is nice and green). Either way, I just made you a contributor so you can create branches in the main truffle repository. Hopefully that'll make things just a bit easier, especially if you have other branches you'd like to merge in. \nOf course, the PR process is preferred (I'm sure I don't have to say that). Thanks, as always.\n. Good catch, thanks! . I can't reproduce this. My guess this was fixed on the 3.x branch. Here's my output when I make a default test fail (by changing an expected value to 559).\n```\nContract: MetaCoin\n    \u2713 should put 10000 MetaCoin in the first account\n    \u2713 should call a function that depends on a linked library (58ms)\n    1) should send coin correctly\nEvents emitted during test:\n---------------------------\n\nTransfer(_from: <indexed>, _to: <indexed>, _value: 10)\n\n---------------------------\n\n2 passing (258ms)\n  1 failing\n1) Contract: MetaCoin should send coin correctly:\n     AssertionError: Amount wasn't correctly taken from the sender: expected 559 to equal 9990\n      at test/metacoin.js:59:14\n      at process._tickCallback (internal/process/next_tick.js:103:7)\n```\nGoing to close this. If you run into it again please reopen.. This has been fixed in truffle-migrate 1.0.0, and will go out with the next release of Truffle. Thanks!. This is fixed in truffle-compile v1.1.2. You can get this upgrade now by uninstalling Truffle and then reinstalling it, to ensure the new dependency is downloaded. It will also go out with the next release of Truffle, 3.1.2. Thanks for the issue!. Hey @raineorshine, my gut reaction is that you need to call deployer.link() or deployer.autolink() in your migrations. Truffle won't link these for you automatically unless you deploy a contract through deployer.deploy(). In order to ensure the correct linkage, you have to write that into your migration.\nSay I have MyContract which relies on MyLibrary, and say I plan to have users create an instance of MyContract as they use my dapp (rather than deploy MyContract as a singleton). The initial migration, then, would look something like this:\n1_initial_migration.js\njavascript\nmodule.exports = function(deployer) {\n  deployer.deploy(Migrations);\n  deployer.deploy(MyLibrary);\n  deployer.link(MyLibrary, MyContract); \n};\nThat last line will edit the build artifacts to ensure MyContract is linked to MyLibrary properly.\n. Very interesting. undefined suggests a fairly big, uncaught issue. How are you using the TestRPC? Is it as a server or a library?\n. There could be. I haven't tried that version yet, so it sounds plausible. \n. I think it's because Truffle/EtherPudding uses 0.16.x. Is it automatically updating to the -beta version, or did you do that intentionally? \nNo problem, by the way. This is good information to know.\n. deployer.exec() is no longer available and hasn't been for awhile, due to changes in Truffle. Your best bet to replace it is to write a separate node module that exports a function, and calling that function from your migrations.\nLet me know if this is currently still an issue for you. Cheers.. The deployer.exec() command is no longer available in Truffle 4.0 due to complexities in implementation. You can get around this by writing a module that accepts the deployer and associated contract abstractions as input to a function, and then importing that module into  your migrations. \nClosing this ticket for housekeeping. Please open a ticket if you run into any more issues. Thanks!\n. Hi there. Thanks for writing.\nI think this doesn't exist anymore, and haven't seen it myself on Node 8. I'm going to close this ticket for housekeeping issues; Truffle's dependencies have advanced significantly since last year. Please open a new ticket if you run into this issue.\nCheers!. This ABI interface isn't created by Truffle. Instead, it's created by the solc compiler. Solidity doesn't create a function for you that returns an array; instead, it creates a function that takes (in this case) an address as the input and returns the associated uint256 based on the mapping. Calling this function might look something like this:\njavascript\ncontractObject.myMapping.call(\"0x1234...\") // => 5\nBecause Solidity creates this function and ABI, there's nothing Truffle can do about it. This isn't a Truffle issue, and is instead \"as designed\" by the Solidity language designers. Please bring an issue up with them if you believe this to be incorrect.\n. Oh wow. I didn't actually see that the mapping mapped addresses to a uint array. I admittedly wrote this hastily. Thanks for bringing this up.\nMy hunch is that the above is still correct, in that this is not a Truffle issue. Truffle never generates or modifies ABIs, so this has to come from a solidity compiler. However, I'm not sure what it should do in this case. \nIt might actually create a function that takes in two parameters, like so:\njavascript\ncontractObject.myMapping.call(\"0x1234...\", 7) // => 5\nWhere the 7 is the array index of the array specified by the address in the mapping. This is my hunch. \n. This has been fixed here. http://truffleframework.com/docs/getting_started/migrations Thanks for the PR. Appreciate it! . Hi there. Thanks for submitting this PR.\nUnfortunately, truffle watch and truffle serve are on their way out. They were meant for a build pipeline that no longer is supported, and replaced by integration with other tools that do it better (like webpack). To see how these integrations work, see our Truffle boxes where we have a number of boilerplates to show you how to set up your application with a modern build pipeline. Also, more our coming! \nI'm going to close this ticket for housekeeping issues. That said, thanks again for your submission, and our apologies for taking so much time to get to it. Cheers!. It appears that your geth RPC port is 8080. Truffle defaults to looking for\nan Ethereum client on 8545. You need to edit your truffle configuration to\npoint to the port you specified.\nhttp://truffleframework.com/docs/advanced/configuration under heading \"RPC\"\nOn Mon, Dec 12, 2016 at 12:18 PM, ETHorHIL notifications@github.com wrote:\n\nDid anyone find out how to solve this?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/305#issuecomment-266540857,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFp1WJLDcqKdSORgExNC_NhlJAvEHg1ks5rHawtgaJpZM4K8MS4\n.\n. Hmm, looks like I misread. Let me think.. This is an issue best worked out through our gitter channel, since everyone's configuration is different. Please join the channel and ask there. We have over 700 active members willing to help. Cheers! https://gitter.im/ConsenSys/truffle. This has been completely revamped in Truffle 3.0. You should have what you need. Thanks!. Hey @raineorshine! \n\nUpdate on this (which I'm sure you already know). eth_debugTraceTransaction now exists in the TestRPC. And Truffle 4.0 has a debugger, making line numbers on error messages a nice to have rather than a NEED to have (i.e., now you can go debug the transaction if needed). \nWe still want to add this to make life easier, but we're going to track it in a different ticket. See #574 for updates.\nThanks for all your feedback, as always!. This has been done on beta. Closing.. This requires an update of solidity-parser now that it's fixed there.. The next version of Truffle (3.2, to come out this week) will include the latest solidity parser which fixes these issues. Closing this ticket. If you see similar issues please open a new one!. FYI: This only updates beta. Was that your intent?\n. v3.0.0-4 published.. Hi there. \nThanks for writing. I believe this is no longer an issue, and is fixed in a recent build of Truffle. If you continue to have this problem, please fill out a new ticket or get at us on Gitter! Cheers!. I've fixed this on 3.0.0-7 beta. There was an accidental release that that caused 3.0.0-x to be published as the latest version of npm. If you do intend to be on the beta version, upgrade to 3.0.0-7. If not, you should downgrade to 2.1.1.\nSorry for the confusion!. Whoops, make that 3.0.0-8 beta, which I'm releasing now.. Hi there.\ndeployer.exec() is no longer supported. The best way to work around this issue is to create a node module that exports a function you can run within your migration. \nPlease fill out a new ticket if this continues to be an error, or catch us in our gitter channel! \nCheers.\n. It's possible. The issue is whether or not we should expect everyone to be updated to the latest node or to use Babel. I think there are many cases where neither may be available. . Thinking about this again; this is probably best left to a tutorial on the truffleframework.com website.. @raineorshine Totally agree. I'm worried about the cost to new users who don't have Node 8, or for some reason can't get it (i.e., I'm being conservative). I'm going to plan this for a future milestone and revisit it in a few months. Thanks all!. Good catch, thanks @raineorshine . As late-introduced changes in the 3.x release, this should no longer be an issue since the autolink features have been removed. If you're still running into this issue, please reopen. Thanks @raineorshine!. Good catch, thanks @raineorshine . Merged, and updated Gitter. Thanks!. When you use a member variable like this:\nbytes32[] public SomeData;\nSolidity doesn't create a function called SomeData that returns an array. Instead it creates a function that takes in the array index and returns the value at that index. The generated function would look something like this:\nfunction SomeData_getter(uint index) returns (bytes32) {\n  return SomeData[index];\n}\nThe reason this is failing is because web3 is expecting you to pass in a parameter to your function when you run contract.SomeData.call() -- but you're not. It tries parsing null and fails.\nArguably the error message could be better here. Unfortunately this is currently how web3 processes it. \nI'm going to close this issue. Please create a new issue if you have questions.. Thanks!. In the example above, meta is already contract abstraction, provided by ether-pudding. Pudding's abstractions are an extension of web3.eth.contract().\nTo call the getBalance() function, you need merely write:\nmeta.getBalance(address).then(function(balance) {\n  // Do something with the balance\n}).catch(function(e) {\n  // handle any error\n}); \nThe above will send the transaction; you do not need to call web3.eth.sendTransaction()  yourself. Since Pudding wraps these functions in promises, you'll have to interact with them that way like the above. For more information, see the documentation here: http://truffleframework.com/docs/getting_started/contracts\nI'm going to close this ticket as Truffle provides all this functionality for you and you don't need to do this yourself.. Are you using Truffle beta?. Your code can be rewritten like the following. Note Truffle provides accounts for you from the contract block, so I'll include that for example purposes:\n```javascript\ncontract(\"MyContract\", function(accounts) {\n    // ...\n    it('SN is generating SNassigned event', function(done) {\n    var myMyContract = MyContract.deployed();\n    var MyContractEvents = myMyContract.allEvents();\n    var inputID = \"R051239874560002\";\nMyContractEvents.watch(function (error, result) {\n    if(error) {\n        console.err(error);\n    } else {\n        console.log(\"SNassigned callback: \" + result.args.sn.valueOf());\n        assert.equal(result.event, \"SNassigned\");\n        assert.equal(result.args._sender.valueOf(), web3.eth.accounts[0]);\n        assert.equal(result.args.sn.valueOf(), inputID);\n        MyContractEvents.stopWatching();\n        done();\n    }\n});\n\n    myMyContract.assignID(inputID, {from: accounts[0]}).then(function() {\n        // This fires off a promise, but we're doing nothing with the result.\n        // We include an empty `then()` block to ensure the promise gets evaluated.\n    }).catch(done);\n});\n\n});\n```. Hey @ownageio et. al., can you recheck this with Truffle 3.0.2? Note that even if you were using 3.0beta you will still need to handle breaking changes when upgrading to 3.0.2. See the upgrade guide for more info.. Thanks for the report. Fixed! Will go out in the next release (3.1.2).. To clarify: Are all of you guys on Truffle 2? Truffle 3.x should fix this issue, as it has defined ordering of dependencies sources (i.e., your project first, then EthPM, then NPM). If you haven't yet, give Truffle 3.0 a try. It requires some upgrading, but you can find more information here: http://truffleframework.com/tutorials/upgrading-from-truffle-2-to-3. I'm going to close this ticket since it should be fixed in Truffle 3. If Truffle 3 users still have this issue, please reopen.. This appears to be an advertisement, so I'm going to close it. If there's legitimate interest wrt Truffle, please contact me on Gitter. Thanks.. Thanks for the feedback. Google showed me similar PRs with much the same wording (i.e., insert project name , and the rest was the same), so figured this submission was mostly automated. \nThough I do like making it more available for Ubuntu users, I don't have the bandwidth to test and ensure a new distribution channel continues to work correctly. When I look into new distribution methods (something I'll definitely do in the future) I'll look into snap.\nThanks!. This is no longer needed v3.4.4. Please open a new ticket if you need anything else. Thanks! . Hey @mbeylin. This was definitely a good idea. We think we've solved this with Truffle Boxes (which will grow in amount and usefulness and over time). Additionally this can be supplemented by EthPM. Going to close this for housekeeping now, but if you think it deserves reconsidering, open up a new ticket and we'll discuss. Cheers!. Hi @christoph2806. This looks like a great addition. Can you provide me with some examples about what the output used to look like before and what it now looks like after this change? \nAppreciate it. Thanks!. I'm having trouble determining what your test looks like. Can you show that here? Also, would you mind sharing the full contract code? What you typed looks jumbled.. There's a couple issues here. \nYour tests aren't actually testing anything\nA test needs to assert, or fail when things fail. When there's a failure (like when that throw is executed) there's no way for the testing framework to know that because you haven't wired up the test correctly. tl.AddKey(owner,n) returns a promise, and you're not making that promise available to the testing framework. To do so, you need to return the promise, i.e., \nreturn tl.AddKey(owner,n);\nIf the promise fails, then, the testing framework will know about it and report it successfully. \nThis is the cause of your passing tests that should fail; you haven't told the framework about the failure, and so everything else -- i.e., the large integers -- are just a red herring and aren't the actually problem in this case.\nHowever, we might as well address the large integer problem since you mentioned it. \nYou're not correctly representing large integers in Javascript and with web3\nJavascript will only support integers +/- 9007199254740991, so case 2 won't send the integer you're expecting simply because Javascript doesn't support a number that large. Case 1 likely won't send the number you expect because that number is a string, and web3 needs to know that you intend to represent a decimal number with that string and not something else (i.e., a hexadecimal number). web3 might know, but to ensure it does, use web3.toBigNumber(your_number) to be sure before passing it to your function.\nI'm going to go ahead and close this ticket, as this should be the information that you need. Feel free to open a new ticket if you run into an issue.. This has been fixed on master. Instead of adding truffle-config, I removed all references to modules that can be required by themselves (i.e., truffle-config, truffle-migrate, etc.). Thanks for the PR!. This has been fixed on master in a different commit. No need to merge these conflicts.. PS: Thanks!. This is no longer the case on master. The current error is Error: Invalid JSON RPC response: \"\", which is still cryptic, but at least that's standard across Truffle. A new issue should be added that when a provider is required that it checks the connection first by calling a standard request (eth_version or something) and produces a human readable error if that fails. Would love for you to write that issue if you feel it's a problem.\nThanks for submitting!. Thanks for this bug. Will look into it today\nOn Feb 2, 2017 4:52 AM, \"Leonid\" notifications@github.com wrote:\n\n\nI've asked for help in the Truffle Gitter\n   http://gitter.im/Consensys/truffle before filing this issue.\n\n\nIssue\nI'm getting Cannot read property 'constructor' of undefined in solidity\ntests when a contract has a numeric argument.\nI started with initial project and substituted MetaCoin with a standard\ntoken contract: \"standard-token\": \"1.0.0\"\nThen I adjusted tests to test my custom token instead of MetaCoin.\npragma solidity ^0.4.2;\nimport \"truffle/Assert.sol\";\nimport \"truffle/DeployedAddresses.sol\";\nimport \"../contracts/TestToken.sol\";\ncontract TestTestToken {\nfunction testInitialBalanceUsingDeployedContract() {\n    uint initialSupply = 10000;\n    TestToken ntt = TestToken(DeployedAddresses.TestToken());\nAssert.equal(ntt.balanceOf(tx.origin), initialSupply, \"Owner should have 10000 TestToken initially\");\n\n}\nfunction testInitialBalanceWithNewTestToken() {\n    uint initialSupply = 10000;\n    TestToken ntt = new TestToken(initialSupply);\nAssert.equal(ntt.balanceOf(tx.origin), initialSupply, \"Owner should have 10000 TestToken initially\");\n\n}\n}\nThe first test passes, but the second fails with an error:\n1 failing\n1) TestTestToken testInitialBalanceWithNewTestToken:\n     Uncaught TypeError: Cannot read property 'constructor' of undefined\n      at /usr/local/lib/node_modules/truffle/node_modules/truffle-contract/contract.js:89:18\n      at Array.forEach (native)\n      at /usr/local/lib/node_modules/truffle/node_modules/truffle-contract/contract.js:85:32\n      at Array.map (native)\n      at Object.decodeLogs (/usr/local/lib/node_modules/truffle/node_modules/truffle-contract/contract.js:44:19)\n      at Object.callback (/usr/local/lib/node_modules/truffle/node_modules/truffle-contract/contract.js:166:35)\n      at /usr/local/lib/node_modules/truffle/node_modules/truffle-contract/node_modules/web3/lib/web3/method.js:142:25\n      at /usr/local/lib/node_modules/truffle/node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:89:9\n      at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/node_modules/web3/lib/web3/httpprovider.js:119:13)\n      at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/node_modules/xhr2/lib/xhr2.js:64:18)\n      at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/node_modules/xhr2/lib/xhr2.js:354:12)\n      at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/node_modules/xhr2/lib/xhr2.js:509:12)\n      at IncomingMessage. (/usr/local/lib/node_modules/truffle/node_modules/xhr2/lib/xhr2.js:469:24)\n      at endReadableNT (_stream_readable.js:974:12)\nnpm ERR! Test failed.  See above for more details.\nFixing the if in this place\nhttps://github.com/trufflesuite/truffle-contract/blob/2aceb366dd08646a100fda7ea3733644e10f8273/contract.js#L89\nfrom:\nif (val.constructor.isBN)\nto:\nif (val && val.constructor.isBN)\nfixed the issue for me and now the test passes, but I'm not sure if it's\nthe proper fix.\nSteps to Reproduce\nDescribed above ^\nExpected Behavior\nI expected tests to pass.\nActual Results\nThey failed\nEnvironment\n\nOperating System: macos\nTruffle version: Truffle v3.0.2\nEthereum client: -\nnode version: -\nnpm version: -\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/339, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFp1THCn024BIKumo_8fF3oOe6gd6jtks5rYdF2gaJpZM4L1EdP\n.\n. To help me reproduce, can you point me to where you got your standard token\ncontract, to ensure I'm using the right code?\n\nOn Feb 2, 2017 7:26 AM, \"Tim Coulter\" tim@timothyjcoulter.com wrote:\n\nThanks for this bug. Will look into it today\nOn Feb 2, 2017 4:52 AM, \"Leonid\" notifications@github.com wrote:\n\n\nI've asked for help in the Truffle Gitter\n   http://gitter.im/Consensys/truffle before filing this issue.\n\n\nIssue\nI'm getting Cannot read property 'constructor' of undefined in solidity\ntests when a contract has a numeric argument.\nI started with initial project and substituted MetaCoin with a standard\ntoken contract: \"standard-token\": \"1.0.0\"\nThen I adjusted tests to test my custom token instead of MetaCoin.\npragma solidity ^0.4.2;\nimport \"truffle/Assert.sol\";\nimport \"truffle/DeployedAddresses.sol\";\nimport \"../contracts/TestToken.sol\";\ncontract TestTestToken {\nfunction testInitialBalanceUsingDeployedContract() {\n    uint initialSupply = 10000;\n    TestToken ntt = TestToken(DeployedAddresses.TestToken());\nAssert.equal(ntt.balanceOf(tx.origin), initialSupply, \"Owner should have 10000 TestToken initially\");\n\n}\nfunction testInitialBalanceWithNewTestToken() {\n    uint initialSupply = 10000;\n    TestToken ntt = new TestToken(initialSupply);\nAssert.equal(ntt.balanceOf(tx.origin), initialSupply, \"Owner should have 10000 TestToken initially\");\n\n}\n}\nThe first test passes, but the second fails with an error:\n1 failing\n1) TestTestToken testInitialBalanceWithNewTestToken:\n     Uncaught TypeError: Cannot read property 'constructor' of undefined\n      at /usr/local/lib/node_modules/truffle/node_modules/truffle-contract/contract.js:89:18\n      at Array.forEach (native)\n      at /usr/local/lib/node_modules/truffle/node_modules/truffle-contract/contract.js:85:32\n      at Array.map (native)\n      at Object.decodeLogs (/usr/local/lib/node_modules/truffle/node_modules/truffle-contract/contract.js:44:19)\n      at Object.callback (/usr/local/lib/node_modules/truffle/node_modules/truffle-contract/contract.js:166:35)\n      at /usr/local/lib/node_modules/truffle/node_modules/truffle-contract/node_modules/web3/lib/web3/method.js:142:25\n      at /usr/local/lib/node_modules/truffle/node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:89:9\n      at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/node_modules/web3/lib/web3/httpprovider.js:119:13)\n      at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/node_modules/xhr2/lib/xhr2.js:64:18)\n      at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/node_modules/xhr2/lib/xhr2.js:354:12)\n      at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/node_modules/xhr2/lib/xhr2.js:509:12)\n      at IncomingMessage. (/usr/local/lib/node_modules/truffle/node_modules/xhr2/lib/xhr2.js:469:24)\n      at endReadableNT (_stream_readable.js:974:12)\nnpm ERR! Test failed.  See above for more details.\nFixing the if in this place\nhttps://github.com/trufflesuite/truffle-contract/blob/2aceb366dd08646a100fda7ea3733644e10f8273/contract.js#L89\nfrom:\nif (val.constructor.isBN)\nto:\nif (val && val.constructor.isBN)\nfixed the issue for me and now the test passes, but I'm not sure if it's\nthe proper fix.\nSteps to Reproduce\nDescribed above ^\nExpected Behavior\nI expected tests to pass.\nActual Results\nThey failed\nEnvironment\n\nOperating System: macos\nTruffle version: Truffle v3.0.2\nEthereum client: -\nnode version: -\nnpm version: -\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/339, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFp1THCn024BIKumo_8fF3oOe6gd6jtks5rYdF2gaJpZM4L1EdP\n.\n\n\n. Another thing I'd like to fix (the newest Solidity should allow more\nflexibility there). Thanks!\n\nOn Feb 2, 2017 7:39 AM, \"Leonid\" notifications@github.com wrote:\n\nI did truffle install example-package-standard-token and copied the code\nto my contracts folder, cause Token contract there had the filename\nAbstractToken and truffle didn't handle it correctly.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/339#issuecomment-276991750,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFp1XqGZVRyOkyW5ESFa2VbqLPRRHdXks5rYfiQgaJpZM4L1EdP\n.\n. Once again, thanks for the issue. I successfully reproduced it and fixed. It was due to a last minute change to event processing that misinterpreted boolean values in indexed events. If you uninstall truffle and reinstall it again the issue should be fixed (the issue was in the truffle-contract dependency, which has been updated). Cheers!. This was due to the same underlying issue in #339, and has now been fixed. Thanks again for reporting this. Uninstall truffle and reinstall it again to update the latest dependencies. \n\nCheers!. #355 has been merged. \nStill looking into your solidity-test compile speed up, but it will come soon. Thanks again!. Your last comment ^ should be a discussion in a different thread, as it's\nnot related to the initial balances for solidity tests. Let's chat on\ngitter, and if in agreement make a new ticket.\nOn Feb 3, 2017 9:00 AM, \"Leonid\" notifications@github.com wrote:\n\nAnother thing that we should consider is that if solidity unit tests would\ncause non-const calls than we would need to see and check the results of\nthose calls. (instant blocks).\nI have two solutions.\n\nauto mine a new block after each transaction (using testrpc evm_mine)\nhave some instruction inside of the code itself to triger a new\n   block. Both have their issues and limitations.\n\n1st - Is limiting cause it does not allow you to test multiple\ntransactions in the single block.\n2nd - Solidity does not have such an instruction. And it breaks the EVM\nabstraction a lot. I don't like leaky abstractions. Maybe sol tests should\nbe for constant functions only and js tests should be for interactions? But\nthen we could as well just use JS tests.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/344#issuecomment-277302339,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFp1ZORuBaNJhU7b8x6i46PN6nniNECks5rY10xgaJpZM4L2juc\n.\n. This was already added in Beta and will go out with the next release. Document here: http://truffleframework.com/docs/getting_started/solidity-tests#in-beta-testing-ether-transactions. Good catch. Thanks!. Have your tried adding the babel-register require in your truffle.js\nfile? Truffle relied on babel previously but it caused more harm than good.\nI'd prefer not making babel a dependency of Truffle.\n\nOn Feb 5, 2017 12:52 PM, \"Raine Revere\" notifications@github.com wrote:\n\n\nI've asked for help in the Truffle Gitter\n   http://gitter.im/Consensys/truffle before filing this issue.\n\n\nIssue\nThe way that truffle runs mocha disallows babel-core/register and\nbabel-polyfill (needed for async/await, e.g.). This functionality cannot\nbe achieved with mocha's programmatic options\nhttps://github.com/mochajs/mocha/issues/1220.\ntruffle test used to provide -- as a way to pass arguments to mocha,\niirc. That appears to not be possible any more.\nSteps to Reproduce\ntruffle test -- --compilers js:babel-core/register\nI am using a babel config of:\n{\n  \"presets\": [\n    \"es2015\"\n  ],\n  \"plugins\": [\n    \"transform-async-to-generator\"\n  ]\n}\nExpected Behavior\nTests should run with babel's runtime transformations.\nActual Results\nUsing network 'development'.\n0 passing (1ms)\nPossible Solution\nPresumably being able to pass command line arguments through to mocha\nwould fix the issue, so that truffle test would behave like mocha\n--compilers js:babel-core/register.\nAlternatively, adding these two lines of code to truffle's ./cli.js\nsolves the problem:\nrequire('babel-core/register')require('babel-polyfill')\nObviously not every user wants this, so it would have to be conditional.\nWhat would be the best way to re-enable this functionality? Thanks!\nEnvironment\n\nOperating System: OSX\nTruffle version: 3.1.1\nEthereum client: N/A\nnode version: 7.0.4\nnpm version: 4.0.5\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/346, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFp1Tbhgs19QBckKJcC_pm_JtI3aPOFks5rZjaogaJpZM4L3n16\n.\n. Also, Truffle doesn't call mocha via the command line. Instead, it does it\nprogrammatically. You can alter the mocha configuration via the mocha key\nin your Truffle configuration file.\nhttp://truffleframework.com/docs/advanced/configuration#mocha\n\nOn Feb 5, 2017 1:22 PM, \"Tim Coulter\" tim@timothyjcoulter.com wrote:\n\nHave your tried adding the babel-register require in your truffle.js\nfile? Truffle relied on babel previously but it caused more harm than good.\nI'd prefer not making babel a dependency of Truffle.\nOn Feb 5, 2017 12:52 PM, \"Raine Revere\" notifications@github.com wrote:\n\n\nI've asked for help in the Truffle Gitter\n   http://gitter.im/Consensys/truffle before filing this issue.\n\n\nIssue\nThe way that truffle runs mocha disallows babel-core/register and\nbabel-polyfill (needed for async/await, e.g.). This functionality cannot\nbe achieved with mocha's programmatic options\nhttps://github.com/mochajs/mocha/issues/1220.\ntruffle test used to provide -- as a way to pass arguments to mocha,\niirc. That appears to not be possible any more.\nSteps to Reproduce\ntruffle test -- --compilers js:babel-core/register\nI am using a babel config of:\n{\n  \"presets\": [\n    \"es2015\"\n  ],\n  \"plugins\": [\n    \"transform-async-to-generator\"\n  ]\n}\nExpected Behavior\nTests should run with babel's runtime transformations.\nActual Results\nUsing network 'development'.\n0 passing (1ms)\nPossible Solution\nPresumably being able to pass command line arguments through to mocha\nwould fix the issue, so that truffle test would behave like mocha\n--compilers js:babel-core/register.\nAlternatively, adding these two lines of code to truffle's ./cli.js\nsolves the problem:\nrequire('babel-core/register')require('babel-polyfill')\nObviously not every user wants this, so it would have to be conditional.\nWhat would be the best way to re-enable this functionality? Thanks!\nEnvironment\n\nOperating System: OSX\nTruffle version: 3.1.1\nEthereum client: N/A\nnode version: 7.0.4\nnpm version: 4.0.5\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/346, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFp1Tbhgs19QBckKJcC_pm_JtI3aPOFks5rZjaogaJpZM4L3n16\n.\n\n\n. Yay! I need to write docs for this use case...\n\nOn Feb 5, 2017 1:40 PM, \"Raine Revere\" notifications@github.com wrote:\n\nClosed #346 https://github.com/ConsenSys/truffle/issues/346.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/346#event-949567922, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAFp1RtgvE7qQvdIqAIlWD-XRjNH63L0ks5rZkHigaJpZM4L3n16\n.\n. Tab completion is a environment-specific feature and exists outside of the Truffle executable itself. Instead of supporting just bash, we'll instead add short-letter aliases for existing commands. See #491. . Interesting fix @hitchcott. Thanks for this. Need to get around to this for the truffle-hdwallet-provider. Question: Would you also be interested in having a function passed to provider, i.e., \n\n...\nprovider: function() {\n  return new SomeProvider(...);\n}. @gnidan Did we publish trufflesuite/truffle-provider#1 to Truffle already? Have we documented it? We might need to circle back on this one before calling it done.. This is in the latest Truffle v3.4.6. Cheers!. I'm not sure what to make of this PR. It contains changes that are old as well as what looks like commits we don't want. Can you tell me what you're trying to do here and why the commit log is so long?. I didn't notice this: ConsenSys:ethers-patch-1 from gentlejack:master - so they're asking to merge into a branch. But I wonder why.. I've found this error on a Windows machine but I'm surprised you're seeing it on Linux. The issue is that the system-wide temp directory exists on a different physical device than your project directory. During init, the example project is downloaded to the temp directory and then moved to your project directory. I'm not entirely sure why this is an error, and why you can't have cross device links. I'll have to look further into it, but any help would be much appreciated.. Fixed this by creating our own temporary directory within the current working directory (I'd use the mv module, but unfortunately the issue is in the github downloader dependency). Since this was fixed in one of Truffle's dependencies, you can get the updated version by uninstalling then reinstalling Truffle. Truffle's version number will remain the same. \nCheers! Thanks for the report!. Thanks for the report. This has been fixed on master and will go out in the next release! Appreciate it!. This has been fixed in truffle-migrate 1.0.0, and will go out with the next release of Truffle. Thanks!. Thanks for doing this. Lazy-require isn't my favorite stylistically, but here it's obviously the way to go. Thanks for the PR!. This has been merged. Really appreciate the contribution.. Added to truffle-init in v1.0.5. To enable, uninstall and reinstall Truffle, which will download the latest truffle-init dependency. Cheers!. deploy command as an alias for migrate added to master. Thanks!. So things are looking good over here - I think Truffle 3.1.9 fixes this issue. If not 3.1.9, then the latest master: https://github.com/ConsenSys/truffle/commit/ba6f73f092f8c5804ac7b1e7d15dc2ce7712ebaf\nCheck out my gist. I had to add a migration, but otherwise your tests pass (with some extra output it looks like): \nhttps://gist.github.com/tcoulter/752452d71f72acbc8bff155863194c58\nCan you try this and see if you get the same results: \n$ npm uninstall -g truffle\n$ git clone https://github.com/ConsenSys/truffle.git\n$ cd truffle\n$ npm install -g .. This appears to be a dupe of #354 (even down to your hdkey mnemonic). Is that correct? . Hmm, actually, looks like you're receiving slightly different errors.. This was due to improper dependency management (my fault). This has been fixed in 3.1.2. \nNote that 3.1.9 is a beta release, preparing for 3.2.0. It looks like the original issue here was fixed in Web3. You should no longer be receiving this issue. @JackBekket Your last comment suggests a different issue. However, considering this ticket is fairly old, I'm going to close it for housekeeping reasons. Please open a new ticket if you run into a new issue. Thanks!. This looks like a network issue. I'd tried again. This isn't a problem with Truffle, and is either due to your network configuration or node/npm configuration.. This is definitely a network issue, and not a Truffle issue - because of\nthat, it's too hard for me to help. Please google the error message to\nfigure out the problem.\nOn Thu, Mar 2, 2017, 11:41 PM amithanamakkanavar notifications@github.com\nwrote:\n\nNow am getting error as\nnpm ERR! Linux 4.2.0-27-generic\nnpm ERR! argv \"/usr/bin/nodejs\" \"/usr/bin/npm\" \"install\" \"-g\" \"truffle\"\nnpm ERR! node v6.10.0\nnpm ERR! npm v3.10.10\nnpm ERR! code ECONNRESET\nnpm ERR! network tunneling socket could not be established, statusCode=407\nnpm ERR! network This is most likely not a problem with npm itself\nnpm ERR! network and is related to network connectivity.\nnpm ERR! network In most cases you are behind a proxy or have bad network\nsettings.\nnpm ERR! network\nnpm ERR! network If you are behind a proxy, please make sure that the\nnpm ERR! network 'proxy' config is set properly. See: 'npm help config'\nnpm ERR! Please include the following file with any support request:\nnpm ERR! /home/****/npm-debug.log\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/364#issuecomment-283887411,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFp1XSkfdzFtV5fC-mdsyXog831uIbtks5rh8QjgaJpZM4MJvHC\n.\n. :+1: Interesting issue. Thanks for reporting.. Hi Hadrien,\n\nThanks for the bug report. Any chance you can create a small demo project\nwith exact commands to run? That'd make it a lot easier to reproduce.\nThanks!\nOn Sun, Mar 5, 2017, 8:43 PM Hadrien notifications@github.com wrote:\n\nIssue\nUsing truffle 3+\nWhen using truffle migrate after having changed a contract that is\nimported in another contract, the first one is recompiled but not the\nsecond one.\nSteps to Reproduce\nCode a factory that import a standard contract\nMigrate\nChange the standard contract\nMigrate again, the standard contract will be recompiled but not the\nFactory.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/368, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFp1WXfg8tfR9EhouK_7bQ_WVPg8B8qks5ri47qgaJpZM4MTuBY\n.\n. This should be fixed in 3.4.3. Thanks!. This is a restriction in Truffle 2.1 and 3.1.x where your filename must match the contract name exactly. Since your file name is bankGuarantee.sol, Truffle expects you to have the following code in that file:\n\n// Name must match exactly! lowercase b!\ncontract bankGuarantee {\n  // ...\n}\nTruffle 3.2 will remove this restriction. If you want to upgrade to Truffle 3.0 from Truffle 2.0 to get rid of this restriction, see this upgrade guide: http://truffleframework.com/tutorials/upgrading-from-truffle-2-to-3. The behavior seen by @sajadghawami is due to a recent bug we introduced this week. See here: https://github.com/trufflesuite/truffle-core/pull/29\nWe'll have a fix out Monday.. Closing! Cheers! . Hey all.\nI'm going to close this ticket for housekeeping issues. truffle-contract will get a future overhaul, so we'll circle up on the estimateGas feature then.\nThanks!. Hey there, thanks for the PR! I removed bluebird as I didn't want to add the extra dependency. This has been merged to master. Thanks again!. It will not by default. The default project now only provides contracts,\nmigrations and tests.\nYou can get a default web app though, which does have an app folder, via\ntruffle init webpack.\nOn Thu, Mar 16, 2017 at 3:03 AM andre-zh notifications@github.com wrote:\n\nAs far as I know it won't create App folder like before.\nhttp://truffleframework.com/docs/getting_started/project\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/374#issuecomment-287010426,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFp1RSL3pAGnd2OYKoMWktmptyVHYiLks5rmQjqgaJpZM4MdmYk\n.\n. On the list. Related to: #470 . Hi there,\n\nThanks for reporting this. It looks like one of our dependencies (ethjs-abi) released a breaking change in a minor version bump, causing Truffle to fail. We've locked that dependency to a working version, so all should be fixed.\nTo fix your installation specifically, first uninstall Truffle then reinstall it. This will ensure you have the correct version of the dependency.\nThanks again! . So it looks like HumanStandardTokenFactory.sol is missing from IPFS.\nSource: /Users/tim/Documents/workspace/Consensys/test3/installed_contracts/tokens/contracts/HumanStandardTokenFactory.sol \nURI ipfs://QmSMdCxaH1H5TfyjKVtiPKnFabkQByciTBG6FTCAiCufX7\nThe easiest way to fix this is to publish a new version of tokens to the registry. If Ropsten is dead and won\u2019t let you do that, then the only way to fix it is to upload HumanStandardTokenFactory.sol back to IPFS in the exact state it was in when you originally published it (so it receives the same hash).\nUnfortunately this isn't a bug in Truffle so much as it is an inherent problem with IPFS. IPFS needs to Swarmify or Swarm needs to get done. :( \nGoing to close this for now. . cc @pipermerriam \nOnce Ropsten got attacked, EthPM development slowed down a bit. We need to add extra support to IPFS since IPFS doesn't guarantee data persistence. \n@maraoz Can you guys rerelease a version of Zeppelin on EthPM to refresh the data stored on IPFS? . @maraoz Thanks for the update. I will take a look at this tomorrow.\nOn Wed, May 10, 2017, 2:33 PM Manuel Ar\u00e1oz notifications@github.com wrote:\n\nIt didn't. We'll have to revert to npm :(\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/378#issuecomment-300619210,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFp1SWvESR0ggwPzOozjk8mWhSDQi6Tks5r4i02gaJpZM4MkZcI\n.\n. I closed this? Reopening.. @ProphetDaniel Regarding Zeppelin, this issue has been fixed in Truffle 3.2.3 (latest version of Truffle as of this writing). For the tokens package, however, it looks like data is missing. @skmgoldin, if you want to release a new version of the tokens package, it should fix the issue. \n\nIn general though, there was data loss at the IPFS level, and I can't speak to why (I don't have enough information). At its heart, however, there's no guarantees that any data will remain on the network, so data loss is bound to happen again. IPFS is like bittorrent: if people stop seeding the data, it's gone. IPFS's Filecoin needs to get here fast, or SWARM needs to finish development.\n@SirensOfTitan There's no work that can be done as of now, unless you want to somehow speed up SWARM development. . @SirensOfTitan Meant to say: Appreciate the offer though, and if something comes up I'll let you know.. @skmgoldin If you run into any trouble tomorrow please contact me directly and we'll work through it. Would love to fix the issues as you find them for quick turnaround.. Marking as a duplicate of trufflesuite/truffle-init#1. See that ticket for more info. . @izqui is correct - truffle-contract exposes the .request option, which gives you the information you need. \nAdding a TODO to document this. . This bug is fixed, but we never pushed out a new version. Added tests here. Will push out a new version of Truffle with the fix once the changes are approved. https://github.com/trufflesuite/truffle-require/pull/6. This should be fixed in Truffle 3.4.3. Let us know if you run into any more errors. Thanks!. Hi there. A new beta has been pushed out that should fix this issue. Details in the blog post here. Can you give it a shot and report back? . We've launched official support for Quorum with a tutorial here. Cheers!. Hi there. Thanks for writing.\nFor specific design reasons, we don't run process.exit() on a successful command. That said, I do see why you might want it. \nIf you're writing a timer that keeps the process open, the best way to handle it is by dereferencing the timer in node. This will make sure the process closes whether or not your timer is still going. Check out this link for more. \nCheers! Hope this helps!\n. @elenadimitrova EthPM is in flux right now. EthPM uses IPFS to store data, and IPFS inherently has no mechanism to ensure data stays on the network -- it has a concept of \"pinning\", which should keep it, but unlike SWARM there's no financial incentive and thus is prone to data loss. For some reason, the IPFS installation we used (via Infura) lost data for some packages. The only solution is to ask those packages to release new versions to EthPM so it updates the files stored on IPFS. \nThe only way to fix this completely is to have a distributed file storage mechanisms that provide incentives for keeping data on the network. As far as I can tell that will best be solved via SWARM.. Thanks @jbenet. I have no information on how the data was lost, but just that it was. Unfortunately I don't run the EthPM file storage infrastructure (that's Infura), so I can't pinpoint whether or not it was a bug or a lack of proper configuration, such as clustering (though I can put you in touch with the Infura team, if needed). What I can say is that if EthPM's promise is to provide a decentralized package registry on top of Ethereum, it eventually needs a file storage mechanism that's similarly decentralized. Pinning to your infrastructure could help (and I appreciate it); that would be a stop gap until we get proper financial mechanisms for persisting data. \nI need to regroup with @pipermerriam to see what the way forward is. Will definitely reach out if I have questions. Thanks!. This has been fixed (more specifically, worked around) in the latest version of Truffle, v3.2.3.\nTo get the fix, uninstall and reinstall your version of Truffle.\nBackground: I was wrong. This issue wasn't an issue with data loss, although Infura has lost data (unfortunately I can't speak to that in more detail). Instead, this issue was an issue with response times, where files were taking > 30s to resolve.\nI've isolated it to the specific API used against infura IPFS nodes, and have noticed similar behavior with gateway.ipfs.io. Here's an example:\n\n\nInfura, IPFS port, /api/v0/cat -> slow. This example shows a request resolving in 2 seconds. I've seen upwards of 30 seconds.\n$ curl https://ipfs.infura.io:5001/api/v0/cat/QmVceYuBZpVzgbjsYXi7Zkma3jE1wNp3gWY68u21GmX56v -o /dev/null -w \"%{time_total}\\n\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   283    0   283    0     0    128      0 --:--:--  0:00:02 --:--:--   128\n2.207\n\n\nInfura, local port (i.e., not 5001), /api/v0/cat -> slow. Seems to be the same response time as the above.\n$ curl https://ipfs.infura.io/api/v0/cat/QmVceYuBZpVzgbjsYXi7Zkma3jE1wNp3gWY68u21GmX56v -o /dev/null -w \"%{time_total}\\n\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   283    0   283    0     0    138      0 --:--:--  0:00:02 --:--:--   138\n2.039\n\n\nInfura, local port (not 5001), /ipfs/ api -> much faster to resolve.\n\n\n$ curl https://ipfs.infura.io/ipfs/QmVceYuBZpVzgbjsYXi7Zkma3jE1wNp3gWY68u21GmX56v -o /dev/null -w \"%{time_total}\\n\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   283  100   283    0     0    547      0 --:--:-- --:--:-- --:--:--   547\n0.517\nI've reworked Truffle's use of EthPM to use the third API, though I'm told this is requesting data from a specific node, and not from the IPFS network in general (correct me if I'm wrong). This is a workaround until we can get better response times over the full API. \nThanks for reporting the issue and my apologies for miscategorizing it above.. Hi all, thanks for the reports. This was a bug specifically for Windows - my apologies. I just pushed a fix to one of Truffle's dependencies. To get the fix, simply uninstall then reinstall Truffle. It's important you do uninstall Truffle first to ensure the latest dependencies are downloaded when you reinstall. Cheers! . Thanks for the reports. I've pushed out new fix. Can you uninstall and reinstall Truffle again? . Awesome. :) Thanks again for the quick report.. Hi there. A new beta has been pushed out that should fix this issue. Details in the blog post here. Can you give it a shot and report back? . Please read the blog post for a quick, issue free installation on Windows:\nhttp://truffleframework.com/blog/how-were-making-installation-issues-a-thing-of-the-past. We've released a new version of Truffle making beta officially released to production. Closing this ticket. Thanks all!. Yep, this is a dupe of #400. Just fixed #400 (again). Closing this one in favor of that one.. These docs in this repository are old, unfortunately, so I can't merge this one, but I've made the same changes here:\nhttp://truffleframework.com/docs/getting_started/testing\nhttps://github.com/trufflesuite/trufflesuite.github.io/blob/master/_site/public/docs/getting_started/testing.md#location\nThanks!. Thanks for figuring this out! Cheers!. On beta! http://truffleframework.com/blog/how-were-making-installation-issues-a-thing-of-the-past. Thanks for the suggestion! This has been added to the beta version of Truffle, which you can get by running:\n$ npm install -g truffle@beta\nThis change will go out live in the next official (non-beta) version of Truffle. Output looks like this: \n\nThanks!. Thanks for this! Marking as a duplicate of #443. Cheers!. Hi all. A new beta has been pushed out that should fix this issue. Details in the blog post here. Can you give it a shot and report back? . Hi all. These issues should be fixed in our latest version of Truffle, as the beta has now been pushed to production.\n@bvrooman Yes, that is a breaking change. You should now use the truffle-core repository instead if you need that functionality. The truffle repository has changed to become an distribution/bundled cli package and not a development package. \n@rfikki That issue should also be fixed. Also, consider Truffle Boxes. \nIf you all run into more issues, please open a new ticket and we'll address each issue individually. Thanks!. Thanks for the issue! We'll be tracking this in issue #490. Let us know if you have any feedback.. Hi there. A new beta has been pushed out that should fix this issue. Details in the blog post here. Can you give it a shot and report back? . Hi there. Can you try the latest version - 3.4.3? Thanks!. I'm going to close this for housekeeping purposes. If you run into an issue in the future, please open a new ticket. Thanks!. This is an error in Solidity. It will be fixed when we upgrade to Solidity 0.4.13. Please see #484 to track our progress. Thanks!. This issue has been fixed. Please upgrade to the latest version of Truffle. Thanks!. @karalabe @dotnetspec That is most likely the issue, one that Truffle isn't handling well. You'll have to specify at least one account in your Rinkeby geth client, or use a provider like the truffle-hdwallet-provider with Rinkeby that will manage an account for you. See provider option here for configuration.. This does not sound like an issue with Truffle. You should contact the go-ethereum team (CC @karalabe) or write the issue up on the go-ethereum issues list. \nI unfortunately have not seen that error from geth so won't be able to help.. Hi there.\nThanks for this! We now install just fine on Windows with our latest version. \nPlease open a new ticket if you're still having installation issues. Thanks again! \n. This issue is discussed in the docs here. You can rename truffle.js to truffle-config.js. \nIf that doesn't fix your issue, please reopen. Thanks!. Thanks! We'll be making this error message better. See #489. . Thanks for the report. This is due to Truffle not being able to connect to your Ethereum client. We're going to make Truffle recognize this issue and provide a more useful error message. See #489. Thanks!. Note: MIT for all Truffle repositories (except the website). . Hi there. \nThe watch command will eventually be removed (that's the current trajectory; this may change based on user feedback). \nWe don't plan to add new features to it at this time. Please let us know if this is an issue. \nThanks,\nTim\n. Hi there. A new beta has been pushed out that should fix this issue. Details in the blog post here. Can you give it a shot and report back? . Thanks!. This issue should be fixed in the latest version of Truffle. Please give the new version (v3.4.4) a try. If you run into more issues, please open then as a new ticket so we can address them individually. Thanks!. Hi there. This would be the perfect use for a Truffle Box. See here: http://truffleframework.com/boxes/\nWe currently don't have a Truffle Box for Express, but please feel free to create one and submit your code to us -- we'll be happy to list it. CC @DiscRiskandBisque . Hi there. There are a ton of potential reasons why you may not be getting the balance you expect. Unfortunately, a github ticket isn't the right place to help.\nInstead, you should check out our gitter channel where you can chat with us and other community members who might be able to solve your problem. \nGood luck, and please find us on Gitter!. This should be fixed by version 3.4.3. Please upgrade your version of Truffle and open a new ticket if you run into any more issues. . In fact, you can do this! Unfortunately, it's just undocumented. We should document it.\nIn your truffle.js file, add a new key called contracts_build_directory key to be whatever path you would like.\nLeaving this open to remind us to document it.\n. Hi there,\nYou can already do this! Check out the documentation here. You can use the from parameter to specify which account is making the transaction.\nCheers!. The beta has now been officially released. You can now install version 3.4.3 to fix this issue. Cheers! . Hi there. I'm marking this as a dupe of #387. Please track progress there. Thanks!. This should be fixed in v3.4.3. Please open a new ticket if you run into any more issues.. This is a bug in solc-js. See here.\nThis will be fixed in the next version of solidity. Please track #484.. Hi there. \nRenaming your truffle.js file to truffle-config.js should work without changing the underlying Truffle code. Give that a shot. Let us know if you have anymore issues.. Confirmed issue with Truffle 3.3.0. We're on it.. Hi there. Please check out our two most recent blog posts. We've fixed most (if not all) installation issues for both Truffle and the TestRPC.\nhttp://truffleframework.com/blog/how-were-making-installation-issues-a-thing-of-the-past\nhttp://truffleframework.com/blog/removing-installation-issues-continued-testrpc. CC #51. Hi there. Pleas read our recent blog post. We've fixed these issues in beta. \nhttp://truffleframework.com/blog/how-were-making-installation-issues-a-thing-of-the-past. Truffle beta has been released to production. This should now be fixed in v3.4.3. Let me know if you have anymore questions.. I'm going to reopen this. We can easily expose solc optimization parameters in your Truffle config file. \nFor reference, this is the reason the optimizer has a runs value of zero in Truffle. https://github.com/ethereum/solidity/issues/2245\nTL;DR: Anything larger than 0 produces larger bytecode. The default setting in Truffle is to produce the smallest bytecode possible. . I'm also open to changing the default optimizer setting back to 200.. Thanks everyone for their input, and @mtbitcoin for adding support in etherscan -- we appreciate it. We're going to add support for custom compiler optimization settings, and will be setting the default back to 200. See #486 for more info. Closing this ticket for housekeeping. . Hi there. Thanks for the issue. Can you check out our latest blog post and try out the beta version of Truffle? My guess is that'll fix your issue. Cheers!. Closing as duplicate. Using trufflesuite/truffle#485 to track. Thanks!. These should all be fixed now. Thanks!. I'm going to close this. The bignumber issue should be fixed. Also, please direct embark installation issues to the embark-framework repo. Thanks!. When a migration fails, it's often hard figuring out what happened. We working on two ways to make migrations better that, when used correctly, should prevent the error you're seeing here. \n\n\n495 - Show all transactions that were attempted during a migration. This should give you more information about what happened and allow you to diagnose your migration.\n\n\n490 - Integrate the TestRPC into Truffle, and include a --dry-run feature that will fork from your desired chain and deploy your migrations in a sandbox, as if you were deploying them on the chain itself.\n\n\nWith (2), you should be able to use --dry-run to expose migration errors more quickly. With (1), you should be able to diagnose those errors to see what happened during those transactions.\nI'm going to close this ticket as the two tickets above will track our progress on this issue. Please stay tuned for these new features as they're added.. This is a duplicate of #448. Closing for housekeeping.. This should be fixed with Truffle 3.4.3. Thanks!. This should be fixed in v3.4.3. Let me know if you run into any issues. . Closing, as that documentation is the right place to go. Cheers!. Hi there,\nThis file is dynamically created at test time. When you run your tests. Truffle creates this file depending on which contracts are deployed. Its contents looks something like this:\ncontract DeployedAddresses {\n  function MetaCoin() returns (address) {\n    return 0x...; // address is hardcoded\n  }\n  // If there are more contracts deployed, they'll be included as well.\n}\nYou include DeployedAddresses.sol in your tests by importing truffle/DeployedAddresses.sol. Here, truffle is a meta package that may include dynamically created contracts like DeployedAddresses. \nLet me know if this helps. Thanks!. Hmm, looks like I didn't respond to this after changing the title. Instead of the block number, we should add the transaction id as that can be used to find more information than simply the block itself.\nKey should be transactionId, value is the 0x-prefixed transaction hash.\nWill require changes to truffle-contract-schema.. This means you have a solidity syntax error somewhere. \nUnfortunately, the confusing error message comes from the most recent version of solidity. I've filed an issue here. It should be fixed in the next release. . Hi there. Both are listed in our documentation here: http://truffleframework.com/docs/getting_started/contracts#sending-ether-to-a-contract\nTL;DR: send is just shorthand if you only want to send Ether and don't want to call a specific contract function. sendTransaction will give you more options for sending the transaction, and you do have the ability to call contract functions other than the default.\nI'm going to close this since it is documented. Let me know if you have any questions.. Dupe of #456. Closing for housekeeping.. It looks like you're deploying an abstract contract (you have functions that aren't fully defined). You can't deploy abstract contracts to the Ethereum blockchain. If you run into any more issues please open a new issue. . Your first issue (\"Invalid JSON RPC Response\") is due to Truffle not being able to connect to your Ethereum client. Are you running the TestRPC? Please check your configuration and ensure your Ethereum client has the RPC service running on the same port. \nFor the second issue (\"xhr2\"), this may be fixed in the latest version, 3.4.3. Can you update to the latest version and check to see if installation works properly? I'm going to close this ticket. Please open a new issue if you run into future errors.. Hi there. This looks to be an isolated issue has been fixed (all the :+1:'s were on July 7th). I'm going to close this one for housekeeping. If you continue to run into this issue please open a new ticket and reference this one.\nHere's what I get when running the above commands.\n\nCheers!. This is fixed in this PR: https://github.com/trufflesuite/truffle-core/pull/16. Putting this in triage. Will attempt to reproduce. . Closing as duplicate. #477. Thanks!. Thanks!. Story points: 8. This issue has been fixed. Please upgrade to the latest version of Truffle. . Note: This can be done from within the yargs config.. Hi there. This error message means Truffle cannot connect to your Ethereum client. There are many reasons for this. For yours, it looks like you need the --rpc option for geth as well as your other options.\nWe have a ticket currently being worked on that will make this error message better. Please see #489. \nCheers! . Hi there. Thanks for posting. This is a dupe of trufflesuite/truffle-box#4. Closing this one, but please track our progress there. . Story points: 1. This one has also been reported at ethjs/ethjs-abi#6.. This has no been fixed. See my comment in ethjs/ethjs-abi#6. \nCheers!. Hi there.\nI believe we've fixed this issue with the Pet Shop tutorial. I'm going to close for housekeeping reasons, but please open a new ticket if you run into more issues.\nThanks!. You all can test for exceptions within Solidity tests using the following tutorial: http://truffleframework.com/tutorials/testing-for-throws-in-solidity-tests\nThe tutorial is out of date, and is written to test for throw (a predecessor to revert(), assert(), etc.)\nHowever, the important bit is this part: \n```\nbool r = throwProxy.execute.gas(200000)();\nAssert.isFalse(r, \u201cShould be false, as it should throw\u201d);\n```\nNote that instead of throwing, a bool is returned with the status of the execute() function. You can use Solidity tests to test for these error cases in a similar way.. Thanks for the report! I'm marking this as a dupe of trufflesuite/truffle-contract#34. Cheers!. When writing migrations, remember that your migration function stages deployment tasks -- it's not intended to run those tasks at execution time of the migration function. This behavior and Promise structure of migrations was built in a time when async/await was less prevalent. \nWe plan on making migrations work with async/await in the future. However, in the meantime, if you'd like to use async/await in your migrations, follow this pattern:\n2_some_migration.js\n```javascript\nvar SomeContract = artifacts.require(\"SomeContract\");\n// An async function\nconst someAsyncFunction = async function someAsyncFunction() {\n  // ...\n};\n// Your actual migration\nmodule.exports = (deployer) => {\n  deployer.deploy(SomeContract).then(() => await someAsyncFunction())\n// Alternatively, just start a chain without a deployment\n  deployer.then(() => await someAsyncFunction())\n}\n```\nThis will ensure your async functions are executed at the right time, and those steps are added to the Promise chain.\nAgain, we will be revamping this in the future. Would love to hear your thoughts on how migrations could be made easier.. Edit: I wrote that code on the fly; didn't test it. Please correct me if there are any typos!. More info here: https://github.com/ethereum/solc-js/issues/5\n. > Guys, your idea with storing deployment state on-chain is just awful.\nPR's welcome. Thanks for your input. . > At least, make it possible to run arbitrary migration script manually. Not just --reset and run all migration scripts from the scratch\nPlease see the -f parameter: http://truffleframework.com/docs/advanced/commands#migrate. Fixed, thanks!. Yep! You've already published 1.2.0! What's the reason for wanting to publish an older version? \n@pipermerriam Was there a security reason here? My spidey senses say so, but I forget. . Hi there.\nThis issue has been fixed. It was a bug in Solidity! To get the update, upgrade Truffle to the latest version.\nThanks for writing!. See #519. A fix will be released Monday.\nThanks!. Thanks for the report. Fixed here. Will go out as a minor release next week. Cheers! . Thanks for looking this up everyone!\nI'm glad you guys were able to get help. Since it's determined to not be a Truffle bug, I'm going to close this issue. However: If you find yourself with a similar issue in the future, don't hesitate to go to our Gitter or open a new issue so you can get some help.\nCheers!. This is a web3 issue. We should take this up with the web3 team. \nSpecifically, this is not the right way to test for an Array, especially in the browser:\nif (item instanceof Array) { ... }\nAs @ESRogs mentioned, this (bad) method of testing for arrays occurs in web3's code here. \nThe right way, instead, is below: \nif (Array.isArray(item)) { ... }\nSee the Mozilla developer docs, and the instanceof vs isArray heading. Array.isArray() is the preferred method in Node as well.\n. In case you're worried about isArray in browser usages: http://caniuse.com/#search=isArray. I'm going to close this issue here. I don't think this is something we can fix from Truffle's end.. Hi there. Thanks all for your investigation.\nTruffle has been upgraded to Solidity v0.4.15. This appears to have fixed the issue.\nI'm going to close this for housekeeping. Please open a new ticket if you run into trouble. Thanks all!\n. This (memory) is usually the reason truffle gets killed when running truffle compile. I'd do as @branciard suggested.\nI'm going to close this issue for housekeeping reasons. Please open a new ticket if you run into issues.. Good catch, thanks! . Hi there. This usually indicates a problem with your PATH environment variable. How did you install Node.js? If you used the Windows installer, it should have configured your PATH correctly.\nSometimes, after installing new software on the command line, new tools won't be registered unless you restart the command prompt. Try that first and let me know if it works for you.\nI'm going to close this ticket, assuming you were able to find a fix (since this ticket is a month old). If not, please open a new ticket and reference this one.\nCheers! \n. @charltonh Your issue appears to be slightly different from the OP's, in that you're referring to Assert.sol in tests. Good news is we've fix your specific issue in Truffle 4.0 beta. :) \n@salmanprk Your issue appears to be either due to the size of your contract (i.e., the code costs more gas to deploy than the default block size) or your gas amount is too low (i.e., the gas sent with your transaction isn't enough to deploy the contract). Check out our migrations documentation for more information on setting transaction parameters of individual deployments.\nCheers! Please open a new ticket if you continue to have the issue.\n. Hi there. This has been fixed in Truffle v4.0.0-beta.0. Thanks!. It sounds to me like the engine is keeping the process open, perhaps with a timer that's not properly dereferenced? Once the deploy has finished, Truffle attempts to quit -- or at least it should, if nothing keeps the process open. Timeouts and intervals can keep the process open in Node. \nIf this is the case for the provider engine, perhaps you can use timeout.unref() to ensure it doesn't keep the process going:\n```\nvar timeout_id = setTimeout(function() {...}, 1000);\n// Check for the existence of unref so code is portable to the browser.\nif (timeout_id.unref) {\n  timeout_id.unref();\n}\n```\nThis will ensure the process doesn't stay open after deploys.. Hi there. This looks like one weird issue. As /u/javaing pointed out, those steps should work. \nBased on the error message received, my guess is it has something to do with npm; it's likely that some SSL certificate got mangled along the way while it attempted to download the right packages. (Note: Truffle has no control over how npm structures their service).\nThis doesn't seem to be a Truffle error, so I'm going to close it for housekeeping issues. However, if you figure out the issue, please document it here as it might be of help to others. Thanks!. Hi there. \nThe correct way to get the artifacts for each individual contract is like this:\nvar ContracOne = artifacts.require(\"ContractOne\");\nvar ContractTwo = artifacts.require(\"ContractTwo\");\nNote the .sol extension isn't needed (especially in this case, since there are multiple contracts in each file).\nThanks for the ticket. Will use this to beef up our documentation.\nCheers!\n. Looks like there might be a different issue here, but we'll need to investigate. Would also be great to get more information.\n@t4t5 @debris Did you add an artifacts.require() statement in any of your tests related to Contracts.sol, ContractOne or ContractTwo?. Hi there. We are working on transferring our webpack init boilerplate over\nto our Box structure (i.e., so you can run truffle unbox webpack). Please\nstay tuned.\nOn Mon, Sep 18, 2017 at 7:58 AM freew01f notifications@github.com wrote:\n\nbut there is no truffle unbox webpack\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/553#issuecomment-330250455,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFp1Q6wogI2HBHlfD97ynMGfic1lQMUks5sjoT3gaJpZM4PKxlE\n.\n. This has been fixed on Truffle v4.0.0-beta.0. Will go out with the final release. Hop on the beta if you'd like to check it out. See the Release notes.\n\nCheers!. Hi there. Creator of Truffle here. \nWhen your migrations are run, your contracts aren't being deployed. Instead, the migrations are staging deployment tasks to be later performed by the migration system. So the code: \ndeployer.deploy(A);\nDoesn't actually deploy A. Instead it says, \"Please deploy A for me.\" Making the request for A's deployment async doesn't make much sense in this context. You can think of the deployer as a deployment stager; it'll stage deployment tasks for later execution. \nAs of yet, Truffle's migration system doesn't yet support async. Your best bet at this moment is to not use async code in your migrations. And you don't really need to. For most tasks, say, two deployments, you can simply say: \ndeployer.deploy(A);\ndeployer.deploy(B);\nThe deployer knows that the deployment of A is staged before B, and it'll run the deployments sequentially.\nIf you need more specialty deployments, like deploying B by passing A's address into B's constructor, you'd do something like this:\ndeployer.deploy(A).then(function() {\n  return deployer.deploy(B, A.address);\n});\nThis will ensure deployment of B happens after the deployment of A, and the code that evaluates A.address is also run after A is deployed.\nSo, with that in mind, this is all a long way of saying that async is the cause of your race condition. We'll likely upgrade the migration system some time in the future to support async/instantaneous deployments (i.e., the removal of staged deploys), but that will be after async is included in node's LTS support.  \n(As an aside, the reason your tests work well with async is because you're not using the deployer.)\nI'm going to close this ticket as this isn't a bug, per se. Please see our documentation for more information on migrations.\nCheers! \nCC @gnidan \n. Before I look into this further, can you remove all async and await expressions from  your migrations? The migrations themselves shouldn't be async, and you shouldn't be calling await with the deployer.\nIf migrations still aren't being set up correctly, then I'll look into this further. As it stands now, the most likely culprit is async/await.. If using deployer.then(), which you are in the fourth migration, you should return further promises so they're included in the chain. e.g., this line will run asynchronously because the enclosing .then() doesn't know they're executing.\nTL;DR: stick a return on the start of that line, it should fix your issue. . Better yet, make it a single chain, without nested promises:\nvar aInstance;\n    var bInstance;\n    deployer.then(function(){\n        return ContractA.deployed();\n    }).then(function(instance){\n        aInstance = instance;\n        return ContractB.deployed();\n    }).then(function(instance){\n        bInstance = instance;\n    }).then(function(){            \n        aInstance.setBAddress(bInstance.address);\n        bInstance.setAAddress(aInstance.address);\n        console.log(\"Setup Migration Done!\");\n    });. And I just noticed: aInstance.setBAddress() is a transaction, hence, a promise. You should do these individually (or use Promise.all() to put them in one .then()):\nvar aInstance;\n    var bInstance;\n    deployer.then(function(){\n        return ContractA.deployed();\n    }).then(function(instance){\n        aInstance = instance;\n        return ContractB.deployed();\n    }).then(function(instance){\n        bInstance = instance;\n    }).then(function(){            \n        return aInstance.setBAddress(bInstance.address);\n    }).then(function() {\n        return bInstance.setAAddress(aInstance.address);\n    }).then(function() {\n        console.log(\"Setup Migration Done!\");\n    });. Thanks for the info guys. This is good sleuthing. . Hi there.\nYou're using the webpack init boilerplate. That boilerplate is slightly old. We need to upgrade it to use the latest web3. You can do this yourself by editing the package.json file after running truffle init webpack. Simply change the web3 version it looks for to ^0.20.0 and rerun npm install.\nThanks for reporting this. Appreciate it. \n. Hi there. Thanks for the PR. solc will be upgraded soon, but we're going to do that as its own task.\nI'm going to hold off pulling the other changes as this directly effects our CI (and we're in the middle of a complete CI overhaul at the moment). We hope to have official support for Node 8 soon. If it helps, I'm using Truffle + Node 8 now. \nCheers! . This sounds like a great idea! I'll add it to our internal tracking. Thanks!\n. Whoops. Closing the issue wasn't what I intended. Reopened.. From the output you provided (thank you!) it looks like Truffle was never able to verify that the contract was mined successfully. On your geth private blockchain, are you mining by chance? If not, then transactions won't be processed correctly, and migrations won't complete successfully.\nA little history tidbit: Way early on in Truffle we removed any kind of timeout from migrations because you might be deploying to a live chain -- and if there's congestion, especially early on in Ethereum's history, transactions could take hours to succeed. A timeout in this case would cause you to lose your Ether and put the migration in a unknown state. So we decided to remove the timeout, hence giving the appearance that the migration is hanging. The eth_getFilterChanges requests you're seeing are Truffle polling to see if the transaction was mined successfully. .  We need to get THIS done (see how I attached it to some random ticket?). This sounds like a network error. i.e., for some reason, npm and yarn can't talk to the npm servers to figure out which packages to install. This doesn't appear to be a Truffle issue.\nI'm going to close for housekeeping issues. Please try reinstalling Truffle again, and if needed, connect to another network. Also look into whether or not the npm repository is blocked on your domain or network.\nCheers!. This issue is an optional for the Truffle 4.0 Release.. Thanks for this report. We'll attempt to reproduce, and may come back to you with more questions if we have trouble. Is your code open-source (i.e., freely available online)? . Hi Elena, \nThis is likely due to your artifacts.require() statement. I'm guessing your artifacts.require() statement looks like this:\nvar MyContract = artifacts.require(\"MyContract.sol\");\nIf so, you can get around this just by referring to the artifact file by name:\nvar MyContract = artifacts.require(\"MyContract_4\");\nNote that there's no need for the .sol extension.\nLet me know if that works!\n. Hi there. \nIt looks like you're trying to write browser-based JavaScript in Node.js. Node.js is \"server side\" JavaScript, which means it doesn't run in the browser; document.getElementById() is provided to code that solely runs in the browser.\nIf you'd like to write browser-based automated tests, consider writing headless automated tests with PhantomJS.\nCheers!. This is done (doesn't actually require any code changes). We just need to release a new version of Truffle; npm's semver will do the rest.. Hey there. It's alright released! :) Looks like this ticket didn't get taken care of. Download the latest Truffle and you should have a fix in place.\nCheers!. Thanks for the bug report. Looks like a regression (we've had this issue before). Will take a look!. Hi there. You should be able to fix this by updating your version of the TestRPC. \nPlease update to the latest version, and comment here if that does not fix your issue. Thanks!. Good observations. Potential pieces of work (please review):\n\nCreate a bare truffle box (whether we advertise the bare box is a different story)\nCreate a Metacoin truffle box (advertised)\nMake truffle init an alias for truffle unbox bare and remove all other truffle init functionality. Hi @brianedelman. The invalid opcode error is a completely different issue. Please file that in a new ticket.. @skmgoldin Sweet bug man. Thanks for the report.\n\nWe've identified the issue and will plan a fix for it, likely for after Truffle 4.0 is released. In the meantime, there's a very simple workaround. On this line you have the following code:\nconst Token = artifacts.require('tokens/HumanStandardToken.sol');\nTo circumvent the issue (for now), change it to this:\nconst Token = artifacts.require('HumanStandardToken');\nFor technical reasons (I can go into detail if you like), this will still pull the HumanStandardToken contract you were expecting.\nFixing this issue for good will require some rework, as it identifies an EPM use case we didn't think about (and no one else seems to have exercised yet). Thanks for bringing this to our attention, and we'll let you know when it's fixed for good.\nThanks again!\n. Chatted with @skmgoldin about why this issue occurs. Putting the response here for posterity: \n\nIt has to do with the (we'll call it) artifact pipeline. When you compile/deploy an EPM contract, it actually creates an artifact for it in ./build/contracts (it mingles with the artifacts of your own contracts). When you need to use it in your tests, we were supposed to then return that artifact, but instead we were returning an artifact from the package itself. \nNow, the quick fix is to just return our artifact. But that's going to cause issues for your app, because our artifact doesn't contain addresses for deployed versions that might exist in the package itself; that is to say, if you don't have the mainnet artifact you're expecting for certain types of EPM packages, you're going to have a bad time (the token package isn't one of these types; but I digress). So the real solution is to merge the artifacts the package has with the artifacts you create locally, essentially creating a \"master artifact\" that will work in all cases.. Quick note: Tutorial token contracts show warnings for Truffle 4.0: \n\n\n. Hi all,\n@micky has the correct answer here - if you want to change your msg.sender in solidity tests, you need to make your test contract (TestSomething.sol) the owner of contract under test. \ninvalid opcode and revert are separate issues; what they mean is that your Solidity code had a runtime error when executing your transaction. Why it had a runtime error depends on your code.\nI'd recommend using the Truffle debugger any time you run into this error. \nI'm going to close this ticket as @micky's answer is correct. Cheers!. This will go out in the next release. Cheers! . Hi everyone. Thanks for the feedback.\nAre you all using the TestRPC? If so, try using truffle develop instead, and let us know if the issues disappear. Please refer to the 4.0 release notes for more information about truffle develop.. This has been fixed on the TestRPC side. We'll be updating the TestRPC used in truffle develop shortly.. Hi there,\n@brianedelman, you said this: \n\nI ran into this issue in the beta and added require('babel-register') to my truffle.js file. This fixes the import error and tests run.\n\nThis is currently the only way to support the import statement, as mentioned by @mancze. \nI'm going to close this issue as you're already aware of the workaround. Cheers!. Are you running Solidity tests or Javascript tests?\nIn both Solidity and Javascript tests suites, tests are made up of many transactions -- not just one transaction. If your tests are running out of gas, it means your transactions are running out of gas (a bad thing; you should figure out why). \nNote that the only exception here is Solidity tests, in that you can you can write a single Solidity test that fills up the gas limit in a single transaction. To get around this, use the available hooks in your solidity test suite break up your tests into multiple transactions.. Hi there,\nTruffle does not monitor for changes to your configuration file. It's theoretically possible, but not without excess engineering work for a small benefit. If you change your configuration and would like your contracts recompiled, run truffle compile --all. \nWe'll reevaluate this if we can come up with a simpler solution with less drawbacks.\nCheers!. Hi there,\nChecked up on this. The only reference to Solidity 0.4.8 is in a definition of ganache-core (see below). It looks like it's accounting for some ganache-core dependencies even if they don't exist in the bundle (see inBundle: false). \nI used a webpack analyzer and it confirmed the intention of our webpack configuration, which is to no put solc into the bundle.\nI'm going to close this. If you find more info that suggests solc is in the bundle, let me know.\n{\n   \"_from\":\"ganache-core@1.1.3\",\n   \"_id\":\"ganache-core@1.1.3\",\n   \"_inBundle\":false,\n   \"_integrity\":\"sha512-lkYXFpVV6sqxzWHew3bHP2eTq9hIMwlelxzoFcoWcBXVWa0gZlbX9Vny0uQ6PobmuTIrnxcUoKvqll/sDiFSbg==\",\n   \"_location\":\"/ganache-core\",\n   \"_phantomChildren\":{\n      \"acorn\":\"5.1.1\",\n      \"acorn-dynamic-import\":\"2.0.2\",\n      \"big.js\":\"3.1.3\",\n      \"co\":\"4.6.0\",\n      \"code-point-at\":\"1.1.0\",\n      \"decamelize\":\"1.2.0\",\n      \"emojis-list\":\"2.1.0\",\n      \"enhanced-resolve\":\"3.4.1\",\n      \"get-caller-file\":\"1.0.2\",\n      \"graceful-fs\":\"4.1.11\",\n      \"interpret\":\"1.0.3\",\n      \"is-fullwidth-code-point\":\"1.0.0\",\n      \"is-utf8\":\"0.2.1\",\n      \"json-loader\":\"0.5.7\",\n      \"json-stable-stringify\":\"1.0.1\",\n      \"json5\":\"0.5.1\",\n      \"lcid\":\"1.0.0\",\n      \"loader-runner\":\"2.3.0\",\n      \"lodash\":\"4.17.4\",\n      \"memory-fs\":\"0.4.1\",\n      \"mkdirp\":\"0.5.1\",\n      \"node-libs-browser\":\"2.0.0\",\n      \"normalize-package-data\":\"2.4.0\",\n      \"object-assign\":\"4.1.1\",\n      \"parse-json\":\"2.2.0\",\n      \"pify\":\"2.3.0\",\n      \"pinkie-promise\":\"2.0.1\",\n      \"require-directory\":\"2.1.1\",\n      \"require-main-filename\":\"1.0.1\",\n      \"set-blocking\":\"2.0.0\",\n      \"source-map\":\"0.5.7\",\n      \"strip-ansi\":\"3.0.1\",\n      \"tapable\":\"0.2.8\",\n      \"uglify-js\":\"2.8.29\",\n      \"watchpack\":\"1.4.0\",\n      \"webpack-sources\":\"1.0.1\",\n      \"wrap-ansi\":\"2.1.0\",\n      \"y18n\":\"3.2.1\"\n   },\n   \"_requested\":{\n      \"type\":\"version\",\n      \"registry\":true,\n      \"raw\":\"ganache-core@1.1.3\",\n      \"name\":\"ganache-core\",\n      \"escapedName\":\"ganache-core\",\n      \"rawSpec\":\"1.1.3\",\n      \"saveSpec\":null,\n      \"fetchSpec\":\"1.1.3\"\n   },\n   \"_requiredBy\":[\n      \"#DEV:/\"\n   ],\n   \"_resolved\":\"https://registry.npmjs.org/ganache-core/-/ganache-core-1.1.3.tgz\",\n   \"_shasum\":\"f5763d2624c7cde8d9a52ad6ec3bc92babcc789f\",\n   \"_spec\":\"ganache-core@1.1.3\",\n   \"_where\":\"/Users/tim/Documents/workspace/Consensys/testrpc\",\n   \"bugs\":{\n      \"url\":\"https://github.com/trufflesuite/ganache-core/issues\"\n   },\n   \"bundleDependencies\":false,\n   \"dependencies\":{\n      \"async\":\"~1.5.0\",\n      \"bip39\":\"~2.4.0\",\n      \"cachedown\":\"^1.0.0\",\n      \"chai\":\"^3.5.0\",\n      \"ethereumjs-account\":\"~2.0.4\",\n      \"ethereumjs-block\":\"~1.2.2\",\n      \"ethereumjs-tx\":\"^1.3.0\",\n      \"ethereumjs-util\":\"~5.1.0\",\n      \"ethereumjs-vm\":\"~2.2.0\",\n      \"ethereumjs-wallet\":\"~0.6.0\",\n      \"fake-merkle-patricia-tree\":\"~1.0.1\",\n      \"heap\":\"~0.2.6\",\n      \"js-scrypt\":\"^0.2.0\",\n      \"level-sublevel\":\"^6.6.1\",\n      \"levelup\":\"^1.1.0\",\n      \"localstorage-down\":\"^0.6.7\",\n      \"merkle-patricia-tree\":\"^2.2.0\",\n      \"mocha\":\"~2.2.5\",\n      \"on-build-webpack\":\"^0.1.0\",\n      \"prepend-file\":\"^1.3.1\",\n      \"seedrandom\":\"~2.4.2\",\n      \"shebang-loader\":\"0.0.1\",\n      \"solc\":\"0.4.8\",\n      \"temp\":\"^0.8.3\",\n      \"tmp\":\"0.0.31\",\n      \"web3\":\"^0.19.1\",\n      \"web3-provider-engine\":\"~8.1.0\",\n      \"webpack\":\"^2.2.1\",\n      \"yargs\":\"^7.0.2\"\n   },\n   \"deprecated\":false,\n   \"description\":\"This is the core code that powers the Ganache application and the\nthe Ganache command line tool.\",\n   \"directories\":{\n      \"lib\":\"./lib\"\n   },\n   \"homepage\":\"https://github.com/trufflesuite/ganache-core#readme\",\n   \"main\":\"./index.js\",\n   \"name\":\"ganache-core\",\n   \"repository\":{\n      \"type\":\"git\",\n      \"url\":\"git+https://github.com/trufflesuite/ganache-core.git\"\n   },\n   \"scripts\":{\n      \"test\":\"mocha\"\n   },\n   \"version\":\"1.1.3\"\n}. Hi there,\nWe'd love an Intellij plugin! to my knowledge though we don't have one. Would love to see one made by the community.\nI'm going to close this ticket for housekeeping purposes, and because supported Intellij may not officially be on our radar for quite some time. Let me know if you have questions.. Hi all,\nThis appears to be a question about Solidity. Although I'd love to help with Solidity issues, we have too many tickets open in order to debug each one.\nI'd recommend you hop on over to the Solidity gitter and ask users there. I'm sure they'll be able to help debug. \nIf you still believe this to be a Truffle issue, please open a new bug with a highly paired down version of the code that exposes the error. \nThanks!. Hi all. \nMetamask is currently trying to fix this on their end. Bug here: https://github.com/MetaMask/metamask-extension/issues/1999\nWe believe their fix should be all that's needed. I'm going to close this ticket in favor of theirs. Cheers! . Hi there, \ntruffle serve is on its way out, as it was built a long time ago for a rigid, narrow build system (full disclosure, I wrote the code). If you're still using truffle serve, you should look into migrating your project to a more well supported build system. You can check out our Truffle Boxes for some good examples.\nClosing this ticket, as we're unlikely to make any more support for truffle serve. Cheers!. Hi there,\nThanks for the ticket. Accounts are no unique across blockchains. In fact, as long as you have the private key to an account, you can use that account on any Ethereum-based blockchain (Mainnet, Classic, Ropsten, Rinkeby) so long as someone sends you Ether to that account on that chain. When you have a mnemonic, you essentially hold information to derive the private key; so you can use that mnemonic on any chain. \nAs you can see, people have (likely accidentally) used the Truffle mnemonic on the main chain: https://etherscan.io/address/0x627306090abaB3A6e1400e9345bC60c78a8BEf57\nI'm going to close this as it's not a bug, but a property of private/public key encryption. Cheers!. Hi @ngan. I'd bring this up with ruby-eth. It seems to me that you've identified a network id limit (i.e., between 1 and 100), although there's no spec defining 100 as the upper limit. 4447 isn't special in its own right, but it needs to be consistent; that said, we won't want it getting confused with an official chain, so the larger the better. \nI'm going to close this issue. Let me know if the response from ruby-eth. Cheers! . Hi @nikita-fuchs. Unfortunately there's no way the code above could work. Calling out to web3 makes the migration function asynchronous, and in your code you have no way of telling the migration system that your migration is finished. Side note here: Migrations only stage deployments at run time; they don't actually run the transactions immediately.\nTo tell the migration system that you'd like to do something asynchronous, you need to add a promise to the deployment chain. You can do this by using .then(): \ndeployer.then(function() {\n  return new Promise(function(accept, reject) {\n    web3.eth.getBlock(\"latest\", function(err, result) {\n      if (err) return reject(err);\n      accept(result);\n    });\n  })\n}).then(function(block) {\n  if (block) {\n    // do your thing\n    return deployer.deploy(...); // make sure to return here as that's a promise\n  }\n})\n. I'm going to close this issue. Let us know if you run into anything else!. Hi @robbiehanson. The Migrations contract -- and interacting with it -- is special to Truffle. Since Truffle performs the setCompleted calls during migrations, there's no way to set the gas price other than by setting it within your truffle.js file. That said, assuming you don't want different gas prices for calling setCompleted(1) and setCompleted(2), you should now have all your bases covered; that's because any gas price set in the transaction (e.g., the gas price set when deploying your contract) will overwrite the gas price in the truffle.js file. \nI'm going to close this for now as you should have everything that you need. Cheers!. Thanks for the response @wouterbruinings. Closing for housekeeping.. Hi all,\nThanks for the responses. We're currently working on fixing this issue.\nThank you for your patience.\nTim\nOn Thu, Dec 7, 2017, 2:57 PM Brian Wheeler notifications@github.com wrote:\n\n@VoR0220 https://github.com/vor0220 try running truffle compile --all\noutside of the truffle develop console.\nAs for me, I got so sick of this shit I just created a whole new workspace\nwith a truffle-independent build and test process. If you keep using\ntruffle, get used to it\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/698#issuecomment-350077183,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFp1V8PxU5PtV0L8Hzaw9OHnKT0jpjQks5s-EMhgaJpZM4Qz8Zg\n.\n. Good catch. Please see the comment I left here\n\nGenerally, if you're getting these files, it means you're using synchronous http requests, which is a no no. You shouldn't do that, for this effects and other reasons. Please check your code for synchronous requests and remove them.\nIf you see Truffle code that uses synchronous requests, please let us know.. Looks like it makes a revert if there are new tests to run: https://gist.github.com/tcoulter/d68342811e64bd3d111df2cf038f7d58. (search in page for evm_revert). In the release notes, you have this:\n// Relative or absolute path to an npm installed solc-js\ncompilers: {\n  solc: {\n    version: \"/Users/axic/.nvm/versions/node/v8.9.4/lib/node_modules/solc\"\n  }\n}\nWe probably shouldn't encourage the use of absolute paths here, and we might want to remove support for absolute paths here entirely. If an absolute path is stored in the truffle.js file, it will make working as a team complicated as that path won't be available on a different computer or OS. . PS: Love the emojis. \ud83d\udc4f \ud83d\udc83 \ud83c\udf2e . @balexander4 Would love if you do a platform pass on this, and ensure it works on Windows/Mac/Linux. (This has historically been a problem in the past.). John, I'm having trouble noticing what you did here. Did you remove any previous dependencies, or just reorder them? (I see you added some; that's fine)\n. Hey @chetan. Was running your branch against my apps test, and found that this behavior here causes the tests to break. Specifically, when running files from a temp directory, all relative require statements within those tests files will no longer resolve (i.e., var EternalJS = require(\"../app/eternaljs/eternaljs.es6\");. This is a problem because my tests rely on a dependency in order to function properly, and that dependency isn't installed globally.\nI think we need to find a different solution to the caching issue (though I appreciate your comment; it helped a lot). Either we write temp files to the associated test file's directory, which is messy especially if Ctrl+C is pressed while the test is running; or we find some other solution. To clarify: Mocha runs files using require rather than through other means? \n. Can you rename this variable to a full word? truffle would be the obvious choice, but then seems like a misnomer (because it's not Truffle itself). How about token?\n. Same here. This is code coders will see. I want to remove any source of confusion.\n. Good points. The idea is that you can deploy a different Migrations contract as long as it contains the same signature as the old one for two specific functions, setCompleted() and last_completed_migration(), the latter provided by solidity. If this is true, the implementation of the new one does not matter: during an upgrade, we'll just treat it like its the old one and call its setCompleted() function, which must exist. The data field that gets generated for that transaction should be the same. \nYou have very good points though. This is actually something I added initially, but have not tested. Perhaps I can write a test for it.\n. Amazing. Love the thank you to start.. These two sentences feel redundant: \n\nThe following is a set of guidelines for Truffle contributions.\nThis document is intended to provide guidelines, and may change over time.\n\nPerhaps merge them: \n\nThe following is a set of guidelines for Truffle contributions, and may change over time.\n\nSide note: I think it's awesome you request PRs for this document specifically.. Whoa, great content list!. ",
    "tymat": "Here's the output of --verbose-rpc\nhttps://gist.github.com/tymat/285a32c6f0b298ec00f6\n. $ truffle deploy --stack\nUsing environment development.\nCompiling GoldRegistry.sol...\nSending GoldRegistry.sol to the network...\nVerifying deployment...\nFatal error: Invalid array length\nRangeError: Invalid array length\n  at padLeft (/usr/local/lib/node_modules/truffle/node_modules/web3/lib/utils/utils.js:75:12)\n  at toAddress (/usr/local/lib/node_modules/truffle/node_modules/web3/lib/utils/utils.js:384:19)\n  at /usr/local/lib/node_modules/truffle/node_modules/web3/lib/web3/method.js:85:28\n  at Array.map (native)\n  at [object Object].Method.formatInput (/usr/local/lib/node_modules/truffle/node_modules/web3/lib/web3/method.js:84:32)\n  at [object Object].Method.toPayload (/usr/local/lib/node_modules/truffle/node_modules/web3/lib/web3/method.js:130:23)\n  at [object Object].Method.send (/usr/local/lib/node_modules/truffle/node_modules/web3/lib/web3/method.js:161:24)\n  at [object Object].verify (/usr/local/lib/node_modules/truffle/lib/contracts.coffee:121:25)\n  at [object Object].wrapper [as _onTimeout] (timers.js:265:14)\n  at Timer.listOnTimeout (timers.js:110:15)\n. truffle@0.0.6 /usr/local/lib/node_modules/truffle\n\u2514\u2500\u2500 web3@0.7.1\nIt seems like geth 0.9.35 changed the return for sendTransaction.  \nThis might be our culprit:  https://github.com/ethereum/go-ethereum/issues/1422\n. You now have to do the following to get the address of the new contract:\n```\n\neth.getTransactionReceipt('0x4091220df42ba127ee81650671ea0bd1ef716d4ad988e88c41d1147abcf4de04')\n{\n  blockHash: '0xc4381cd143999b45cae5bbff91f9f41aaf01f120935722fc84464d9caf2aa2c4',\n  blockNumber: 889,\n  contractAddress: '0x496bcf0785aa7eb31facbe64316a91cef6350fc6',\n  cumulativeGasUsed: 155507,\n  gasUsed: 3141592,\n  logs: [ ],\n  transactionHash: '0x4091220df42ba127ee81650671ea0bd1ef716d4ad988e88c41d1147abcf4de04',\n  transactionIndex: 0\n```\n. It seems like web3 has getTransactionReceipt()  \n\n```\nweb3.eth.getTransactionReceipt('0x4091220df42ba127ee81650671ea0bd1ef716d4ad988e88c41d1147abcf4de04')\n{ transactionHash: '0x4091220df42ba127ee81650671ea0bd1ef716d4ad988e88c41d1147abcf4de04',\n  transactionIndex: 0,\n  blockNumber: 889,\n  blockHash: '0xc4381cd143999b45cae5bbff91f9f41aaf01f120935722fc84464d9caf2aa2c4',\n  cumulativeGasUsed: 155507,\n  gasUsed: 3141592,\n  contractAddress: '0x496bcf0785aa7eb31facbe64316a91cef6350fc6',\n  logs: [] }\n\n```\n\n@obscuren says it's intentional.  I'm going to ask @debris what they are doing.\n. Thanks.  It works now.\n. See this for our rationale:\nhttps://github.com/LeastAuthority/ethereum-analyses/blob/master/GasEcon.md#predictability\n. @tcoulter Thanks.  That seems to work.  Is there a way to set the timeout values? \n. This would be very useful.  Additionally it would be nice to be able to select different tests to run in sequence i.e.\ntruffle test contract1 contract2 contract3\n. Your testArray function doesn't return anything.  \nYou will need to call the getter function for x \narr.x.call.then (s) ->\nBut yes, there is currently a versioning issue with Pudding and web3.js so that's where the error is coming from.\n. Sorry it was a PEBCAK situation.  \nWas adding .sol extension to the app.json\nIn any case I think some verbose error messages would be helpful.\n. Bump\n. Need to have truffle decoupled from Solidity so we can upgrade each separately.  Latest version is now 0.4.14 which resolves a major issue with ecrecover.. ",
    "christianlundkvist": "I think it should automatically add to the deploy list.\n. Also, I don't think truffle init should bring back the Example contract if the user has already removed it. My suggestion for functionality would be something like: If the directories app, config, contracts etc already exists, then give an error message to the user.\n. I tested both with testRPC and geth in the backend. My Node code is here (using testrpc):\n```\nvar web3 = require('web3')\nweb3.setProvider(new web3.providers.HttpProvider('http://localhost:8545'))\nvar abi = [{\"constant\":true,\"inputs\":[],\"name\":\"x\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inputArray\",\"type\":\"uint256[]\"}],\"name\":\"testArray\",\"outputs\":[],\"type\":\"function\"}]\nvar code = \"606060405260d88060116000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900480630c55699c146041578063d0f126df14606057603f565b005b604a60045060cf565b6040518082815260200191505060405180910390f35b60ab60048035906020019060040180359060200191919080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050905060ad565b005b8060008151811015600257906020019060200201516000600050819055505b50565b6000600050548156\"\n//var acct0 = '0x7792e497c7f7de41bb63cdf25f7569440aeeb642'\nvar acct0 = undefined\nhash = web3.eth.sendTransaction({from: acct0, data: code})\naddr = web3.eth.getTransactionReceipt(hash).contractAddress\narrContract = web3.eth.contract(abi).at(addr)\narrContract.testArray([1,2,3,4]) // sets x to inputArray[0]\nconsole.log(arrContract.x().toNumber()) // prints \"1\"\n``\n. @tymat I tried calling the getter function and logging the value but the crash happens atarr.testArray([1,2,3,4])`, so it never gets there. What's the versioning issue? Is there a workaround?\n. Sorry, missed this thread! I need to clean up my github notification settings! The failure for me was in a mocha test. I'll try the new tests to see if it works. Thanks so much for fixing! :smile: \n. I'm seeing this problem when offline. When online: works fine. When offline:\n```\nchris@chris-VBox:~/tmp/truffle_test$ truffle init\nevents.js:160\n      throw er; // Unhandled 'error' event\n      ^\nError: getaddrinfo EAI_AGAIN raw.githubusercontent.com:443\n    at Object.exports._errnoException (util.js:1026:11)\n    at errnoException (dns.js:33:15)\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:79:26)\n```. ",
    "drborges": "First things first: great job @tcoulter, truffle is a big step towards making Ethereum and its whole ecosystem accessible by anyone.\nI'd ask how often does one create contracts that shouldn't be added to the deploy list?\nIf I find myself creating contracts and manually adding them to the deploy list very often then @christianlundkvist's suggestion makes a lot of sense.\n. ",
    "JackPickering": "Why has this been closed on the answer 'tests shouldn't rely on each other?' this is not a fix to the issue. \nThis is not true that the contracts are redeployed in between tests as I have 4 test files which run through 4 different test cases of an ICO, my first file is a successful run, my second is an unsuccessful which instantly fails as my ICO is now finished from the previous file. \nI have tried to create a new sale however get an 'invalid opcode' error which I have debugged down to an issue with the start time, which is very strange as its simply just a time stamp - seems to only work if I set the start date to deploy a new sale one month or more in the future. \nWhat my tests DO DEPEND ON is the current time on the dev blockchain, as my ICO goes through tests I must 'time travel' to the next stage. \nSo following on from this, \nI now have to make sure my start time is appropriate to the time of the blockchain...\nHow can I do that without being reliant on what order my test files are executed?\nThis is not a fix and shouldn't have been closed, there will always be cases for ordering tests. . Go to the directory you wish to check i.e. ./contracts/ in the command line\nRun ls -la - this will list all files (including hidden ones)\nThen run rm .DS_Store which will remove any such files. Its likely that DS_Store will have copied into various directories as well so go through and check each one using ls -la.. I am having this same issue with the error that @tranvictor got at the start, at the exact same line however, my contracts folder does not contain an additional migrations file (i.e. I just have the one), yet I still get the error at the module:\n`  lastCompletedMigration: function(options, callback) {\n    var Migrations;\ntry {\n  Migrations = options.resolver.require(\"Migrations\");\n} catch (e) {\n  return callback(new Error(\"Could not find built Migrations contract: \" + e.message));\n}\n\nif (Migrations.isDeployed() == false) {\n  return callback(null, 0);\n}\n\nvar migrations = Migrations.deployed();\n\nMigrations.deployed().then(function(migrations) {\n  return migrations.last_completed_migration.call();\n}).then(function(completed_migration) {\n  callback(null, completed_migration.toNumber());\n}).catch(callback);\n\n},`\nThe line that throws is:\nreturn migrations.last_completed_migration.call();\nHowever, in the Migrations.json file, the function reads:\n{\n      \"constant\": true,\n      \"inputs\": [],\n      \"name\": \"lastCompletedMigration\",\n      \"outputs\": [\n        {\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\nMeaning the method last_completed_migration is not being found as there is one named lastCompletedMigration. Where would this be? Is there a way of altering the migrations folder to specifically call this instead?\nThis is absolutely vital to be able to deploy large sets of contracts which are inter-linked as you cannot expect people to risk spending $100 on every migration to deploy them all together and as it stands, you cannot migrate contracts separately using truffle due to this error.. I've updated to Truffle @4.1.3\nThen ran 'truffle unbox webpack'\nThis is my migrations.sol contract...\n```\npragma solidity ^0.4.17;\ncontract Migrations {\n  address public owner;\n  uint public last_completed_migration;\nmodifier restricted() {\n    if (msg.sender == owner) _;\n  }\nfunction Migrations() public {\n    owner = msg.sender;\n  }\nfunction setCompleted(uint completed) public restricted {\n    last_completed_migration = completed;\n  }\nfunction upgrade(address new_address) public restricted {\n    Migrations upgraded = Migrations(new_address);\n    upgraded.setCompleted(last_completed_migration);\n  }\n}\n```\nThis is my migrations.js file...\n```\nvar Migrations = artifacts.require(\"./Migrations.sol\");\nmodule.exports = function(deployer) {\n  deployer.deploy(Migrations);\n};\n```\nWhere is this new logic meant to be? \n. Okay, that makes sense thank you, its worked but now I get a different error unrelated to this thread. Myabe you could help though if you wouldnt mind? It basically now says Error: Could not setnullas the transaction hash for SaleStagesLib when I try to link a library that has already been migrated. \nhttps://github.com/trufflesuite/truffle-migrate/issues/24\nMuch appreciated, \nThanks. @mengjiaqi When I go to do 'npm run build' I get the error 'webpack not found', I have installed Truffle 4.0.4 and I have also already unboxed a webpack on the server but still get this error. \nAny ideas?\nIs there any documentation on how to actually deploy these Dapps onto a remote server using truffle 4? . Has this issue been solved by anyone?\nDoes increasing gasPrice help with this?\n. Has anyone managed to solve this issue RE: running tests? My compile and migrate work, however after removing the build folder and running 'test' it prints out the error message above. Any ideas? \nI cant understand how it could compile with no errors then fail on test. . Is your start block specified as a block in the past? Usually this error comes from a revert in your contracts constructor.\nI.e. require(startBlock > currentBlock);. A few things:\nYou should be using a test case - look up testing on truffle docs for this \nInside an \"it\" case you should then specify the deployed contract:\nvar myContract = Payable.deployed();\nYou can then transfer a payment to the contract like so: \nmyContract.call({value: web3.toWei(0.5, \"ether\"), from: accounts[1]}); \nThis would send 0.5 ethers to your contract from the first account in the dev blockchain\n. You also havent specified a balance, so create a balance (uint256 balance;) and then in your payab;e function add the amount received (msg.amount) to the balance stored and then check it in the testcase like so: \nbalance = myContract.balance();. Truffle tests dont reset state within the same file, if this is an issue for you, you can use a 'beforeEach' hook and specify a function which creates a new instance of your contract using 'MyContract.new([param1],[param2]...)'\n. I do that, but my problem isnt with increasing time, its not knowing which test will run first (i.e. i could test A in month 1, B in month2, C in month 3 and D in month 4) \nBut to make sure each test only lasts 1 month and the stages work correctly, I must specify a time stamp for the start of each sale, i.e. \nA = January 1st\nB = February 1st\nC = March 1st\nD = April 1st\nWhat do I do now if my tests run in reverse order? D wont start for 4 months and by the time it gets to test 1 it will have increased time 4 times to month 4 therefore A would have finished failing all of my tests.\n  . I got round this by changing my contract to start the sales on the 'latest' block in the chain. But seen as though I have to change my contract to suit the tests I feel like this is a quick fix issue which can be fixed by a simple configuration specification in order to allow people to specify in what order the test files are ran.... Thats what it used to do, but it not longer does that, I have 1_, 2_, 3_ prefixes before my filenames and it still executes in random order. All of these are still quick fixes to a seemingly simply change on Truffles end. Deploying code in separate files is not an option for me, my codebase is too big to deploy at once and therefore, I need to be able to deploy in stages. Is there a valid work around for this? \nIt is the same error with me, I have {overwrite: false} in my contracts and libraries as like I said, I cant deploy all of my code at once. \nMigrations 1: \n```\nvar BytesDeserializer = artifacts.require(\"BytesDeserializer\");\nvar StagesLib = artifacts.require(\"SaleStagesLib\");\nmodule.exports = async function(deployer, network, accounts) {\n  deployer.deploy(StagesLib, {overwrite: false});\n  deployer.deploy(BytesDeserializer, {overwrite: false});\n};\n```\nMigrations 2:\n```\nvar PickToken = artifacts.require(\"PickToken\");\nmodule.exports = async function(deployer, network, accounts) {\n  deployer.deploy(PickToken, {overwrite: false});\n};\n```\nMigrations 3 (I've cut the variables out to keep it short):\n```\nvar BytesDeserializer = artifacts.require(\"BytesDeserializer\");\nvar StagesLib = artifacts.require(\"SaleStagesLib\");\nvar KYCCrowdsale = artifacts.require(\"KYCCrowdsale\");\nvar PickCrowdsale = artifacts.require(\"PickCrowdsale\");\nvar PickToken = artifacts.require(\"PickToken\");\nmodule.exports = async function(deployer, network, accounts) {\n  var sale;\ndeployer.deploy(StagesLib, {overwrite: false});\n  deployer.link(StagesLib, KYCCrowdsale);\n  deployer.deploy(BytesDeserializer, {overwrite: false});\n  deployer.link(BytesDeserializer, KYCCrowdsale);\ndeployer.deploy(PickToken, {overwrite: false}).then(function() {\n    return deployer.deploy(KYCCrowdsale, startTime, endTime, rate, wallet, beneficiary, buyer, founders, bounty, softCap, hardCap, PickToken.address);\n  });\n};\n```\nFull trace of error:\n```\nRunning migration: 5_deploy_sale.js\n  Didn't deploy SaleStagesLib; using 0xa9f811240dd92dab3267855dbe8051743c95b513\n  Linking SaleStagesLib to KYCCrowdsale\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: Could not set null as the transaction hash for SaleStagesLib\n    at Function.set (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-contract/contract.js:785:1)\n    at Function.setter (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-contract/contract.js:664:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-deployer/src/actions/deploy.js:38:1\n    at \n```\nHowever, when I look into SaleStagesLib.json in the build folder, I see this at the bottom of the file:\n},\n  \"networks\": {\n    \"4447\": {\n      \"events\": {},\n      \"links\": {},\n      \"address\": \"0xb848ef765e289762e9be66a38006ddc4d23aef24\",\n      \"transactionHash\": \"0x59568ee46af081be8b969e7e5a8657715cfb718cc19046b2aaaeaa92e2a9d659\"\n    }\n  },\n  \"schemaVersion\": \"2.0.0\",\n  \"updatedAt\": \"2018-03-22T13:56:33.620Z\"\nStrangely enough, the contents of /usr/local/lib/node_modules/truffle/build/ are:\ndrwxr-xr-x   9 jackpickering  admin       288 22 Mar 09:50 .\ndrwxr-xr-x  16 jackpickering  admin       512 22 Mar 09:50 ..\n-rw-r--r--   1 jackpickering  admin     45928  8 Mar 02:35 Assert.sol\n-rw-r--r--   1 jackpickering  admin       217  8 Mar 02:35 SafeSend.sol\n-rw-r--r--   1 jackpickering  admin   4362435  8 Mar 02:35 chain.bundled.js\n-rw-r--r--   1 jackpickering  admin   5195071  8 Mar 02:35 chain.bundled.js.map\n-rwxr-xr-x   1 jackpickering  admin  12255482 22 Mar 09:50 cli.bundled.js\n-rw-r--r--   1 jackpickering  admin  14912833  8 Mar 02:35 cli.bundled.js.map\ndrwxr-xr-x   6 jackpickering  admin       192 22 Mar 09:50 templates\nWith no webpack, so I cant find the line of code that throws the error. . ",
    "davesag": "yes I have hit the same issue.  To test the time-dependent functionality of my smart contracts I have time-travelled the testnet which then causes many of the subsequent tests to fail. I need the time travelled tests to run last.\n. Interesting.  I hit an issue yesterday to which the solution was also just to nuke the build folder and recompile. Ref https://ethereum.stackexchange.com/questions/30064/casting-from-msg-sender-address-to-a-contract-compiles-but-causes-test-failure/30154#30154. ",
    "flockonus": "Hey,\nGot to this issue after googling truffle export abi, is there a command to get the contracts ABIs?\nI just deployed with truffle migrate --network rinkeby, but don't find the contract ABIs. +1 for a simple general event list.\nI'm having a case where I call contract A, which then calls contract B, and B emit events, those are not shown in the transaction logs, so I had to implement a whole listener on the side to capture those.\nSimple version:\njs\nfunction getLastEvents(contract) {\n  return new Promise((resolve, reject) => {\n    const evFilter = contract.allEvents({\n      fromBlock: 'latest',\n      toBlock: 'latest',\n    });\n    evFilter.get((err, res) => {\n      if (err) return reject(err);\n      resolve(res);\n    });\n  });\n}\n. Also had this gas deployment issue with truffle 3.4.11. Changing the gas limit didn't help me (already had mine at 4M), but two things did the trick:\n- update testrpc to latest npm install -g ethereumjs-testrpc\n- i had a function declared but not implemented in my contract (function myfn(uint256 _count);), and apparently that was causing unreasonable gas estimates?? Removing it fixed the problem. Also having an error when testing a single file which doesn't happen when i run the full suite. Another error message tho,\nThis particular contract we re-deploy frequently from within the mocha suite. But from the logs it's hard to tell exactly what is happening.\n1) Contract: KittyCore Initial state \"before all\" hook: deployContract:\n     Error: The contract code couldn't be stored, please check your gas amount.\n      at Object.callback (node_modules/truffle/build/cli.bundled.js:218485:46)\n      at node_modules/truffle/build/cli.bundled.js:34886:25\n      at node_modules/truffle/build/cli.bundled.js:220423:9\n      at node_modules/truffle/build/cli.bundled.js:204149:9\n      at XMLHttpRequest.request.onreadystatechange (node_modules/truffle/build/cli.bundled.js:205574:13)\n      at XMLHttpRequestEventTarget.dispatchEvent (node_modules/truffle/build/cli.bundled.js:73069:18)\n      at XMLHttpRequest._setReadyState (node_modules/truffle/build/cli.bundled.js:73359:12)\n      at XMLHttpRequest._onHttpResponseEnd (node_modules/truffle/build/cli.bundled.js:73514:12)\n      at IncomingMessage.<anonymous> (node_modules/truffle/build/cli.bundled.js:73474:24). Having the same error when debugging some transactions on Truffle 4.1.14\nI'm under the impression that it happens more often on larger functions, but i could be wrong.. Cool! Indeed it's most of the way through.\nMy original concern was about ppl like me installing truffle-hdwallet-provider from npm or yarn. I don't think yarn.lock on the root of the monorepo is relevant for this purpose.\nWould you happen to know exactly how those 2 package managers pull dependencies of dependencies? I'd expect it to obey a package-lock.json if that is present in the package \ud83e\udd14 . ",
    "maxme": "I was looking for this, but I didn't find it, so I wrote a simple tool that looks for \"abi\": ... in the build files and merge all of them to a single array:\nhttps://github.com/maxme/truffle-export-abi. ",
    "ajunge": "Also with version 0.12.2 of web3 I got:  Error: invalid address. With version 0.10.0 works ok.\n. Have you tried adding the privateFor parameter on the deployer?. ",
    "iurimatias": "My main issue is really that I consider the Readme to be misleading to readers as I have explained before. I would really appreciate if you could fix it.\nTim, I can't believe you can say that I didn't came across as \"genuinely interested in a dialog\", I invited you to discuss this several times on reddit and you didn't show any interest.\n. |  which I believe is a statement you said explicitly\nWhere did I say that?\n. note: So bear in mind that with text communications can be quite hard to interpret tone.. so please take this in a friendly way.\nForgive me the word 'ripoff', perhaps it's was too strong, it did felt to me at the time that ConsenSys wanted his own embark and was simply copycatting the whole functionality instead of contributing to an existing project. I think you can agree it was definitely 'inspired' at the very least given the many similarities. I also clarified at the time a lot of the misconceptions, but the readme never corrected this.\nIt seems that when you decided to create truffle (which is absolutely your right ofc) , and I'm assuming you acted in good faith here, it seems you had misunderstood what embark could do - leading to the creation of truffle - and I wished you had talked to me to clarify some features and instead contributed if needed like so many people do so there wouldn't be duplication of efforts like this.\nP.S I see you fixed some of the Readme in the meanwhile, many thanks for this. Let me know if you ever visit Montreal.\n. @jmlubin Happy to! :D I know Caktux yes\n. @jmlubin I'm too busy this week, next week is better. i'll try to contact you in some way. (note: emailed you)\n. ",
    "jmlubin": "Iuri, Tim,\nMaybe we should get on a call this week or next and discuss the kinds of dApps and tools we are all building and how we might move forward either collaboratively. or perhaps helpfully in parallel?\nIuri, do you communicate much with Caktux?  Do you have partners on the project(s) you are working on?\nRegards,\nJoe\n\nJoseph Lubin // Founder\njoseph.lubin@consensys.net mailto:andrew.keys@consensys.net \n917.312.3550\n240 Kent Ave Brooklyn NY 11249\n\nOn Aug 3, 2015, at 5:23 PM, Iuri Matias notifications@github.com wrote:\nnote: So bear in mind that with text communications can be quite hard to interpret tone.. so please take this in a friendly way.\nForgive me the word 'ripoff', perhaps it's was too strong, it did felt to me at the time that ConsenSys wanted his own embark and was simply copycatting the whole functionality instead of contributing to an existing project. I think you can agree it was definitely 'inspired' at the very least given the many similarities. I also clarified at the time a lot of the misconceptions, but the readme never corrected this.\nIt seems that when you decided to create truffle (which is absolutely your right ofc) , and I'm assuming you acted in good faith here, it seems you had misunderstood what embark could do - leading to the creation of truffle - and I wished you had talked to me to clarify some features and instead contributed if needed like so many people do so there wouldn't be duplication of efforts like this.\nP.S I see you fixed some of the Readme in the meanwhile, many thanks for this. Let me know if you ever visit Montreal.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/ConsenSys/truffle/issues/21#issuecomment-127409523.\n. Great.  How\u2019s this Friday at 3:00 PM EDT?\n\nWhat\u2019s a good email for you Iuri?\n\nJoseph Lubin // Founder\njoseph.lubin@consensys.net mailto:andrew.keys@consensys.net \n917.312.3550\n240 Kent Ave Brooklyn NY 11249\n\nOn Aug 4, 2015, at 7:40 AM, Iuri Matias notifications@github.com wrote:\n@jmlubin https://github.com/jmlubin Happy to! :D I know Caktux yes\n\u2014\nReply to this email directly or view it on GitHub https://github.com/ConsenSys/truffle/issues/21#issuecomment-127573270.\n. Ok.  Please disregard the meeting invite.\n\n\nJoseph Lubin // Founder\njoseph.lubin@consensys.net mailto:andrew.keys@consensys.net \n917.312.3550\n240 Kent Ave Brooklyn NY 11249\n\nOn Aug 6, 2015, at 6:02 PM, Iuri Matias notifications@github.com wrote:\n@jmlubin https://github.com/jmlubin I'm too busy this week, next week is better. i'll try to contact you in some way.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/ConsenSys/truffle/issues/21#issuecomment-128521840.\n. \n",
    "simondlr": ":+1: \n. I pulled all the latest code (in development). Can't do any truffle commands. eg\nSimons-MacBook-Pro:Token-Factory simondlr$ truffle serve\n/usr/local/lib/node_modules/truffle/lib/init.js:5\n  all(config, callback) {\n     ^\nSyntaxError: Unexpected token (\n    at exports.runInThisContext (vm.js:73:16)\n    at Module._compile (module.js:443:25)\n    at Module._extensions..js (module.js:478:10)\n    at Object.require.extensions.(anonymous function) [as .js] (/usr/local/lib/node_modules/truffle/node_modules/babel-register/lib/node.js:134:7)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Module.require (module.js:365:17)\n    at require (module.js:384:17)\n    at Object.<anonymous> (/usr/local/lib/node_modules/truffle/index.js:2:9)\n    at Module._compile (module.js:460:26)\nI assume this has to do with all the es6 code being ported over to js? This seems like the right spot to put this, since it seesm related.\n. nvm. I was using an old node version.\n. My fault. Had the wrong node version and it threw errors. Nothing to see here.\n. Thanks for this!\nSomething to add here. This currently doesn't support 0.4.x. But I assume it will when all is merged. To add it, I had to add pragma Assert.sol & add this line to deployed.js when creating DeployeAddresses.sol (before starting with \"library ....\" )\nsource += \"pragma solidity ^0.4.3;\" + \"\\n\\n\";\nAlso. An aside. Solc 0.4.3 introduced warnings when inline assembly doesn't balance. I've been using Nick Johnson's string utils and they throw these warnings now.\nExample of a warning.\n/Users/simondlr/code/ethereum/ujo-contracts/contracts/StringUtils.sol:468:26: Warning: Inline assembly block is not balanced. It leaves 3 item(s) on the stack.\n                assembly {\nThis has to be fixed in stringutils.sol. However, I thought if it would be possible to have an option to try and continue on warnings, and not just err if that's the case (probably another issue for the future).\n. This is because Truffle still uses < 0.4.0 of solc.\n. Seems npmjs site is out of date. npm view solc shows that 0.4.6 is the latest. I'll get round to a PR to beta.. Any desire to add this? Have to link to custom Truffle installations, which is not ideal. :). @tcoulter yeah, only beta for now, since that is what I was using. But, yes, master should probably also get 0.4.6.. ",
    "aakilfernandes": "Sure thing\n\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_coinbase\",\n  \"params\": [],\n  \"id\": 1\n}\nCompiling lotto.sol...\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_getCompilers\",\n  \"params\": [],\n  \"id\": 2\n}\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_compileSolidity\",\n  \"params\": [\n    \"contract Lotto {\\n    \\n    uint constant public blocksPerRound = 5760;\\n    \\n    uint constant public ticketPrice = 100000000000000000;\\n    \\n    uint constant public blockReward = 5000000000000000000;\\n\\n    function getBlocksPerRound() constant returns(uint){ return blocksPerRound; }\\n    function getTicketPrice() constant returns(uint){ return ticketPrice; }\\n    \\n    struct Round {\\n        address[] buyers;\\n        uint pot;\\n        uint ticketsCount;\\n        mapping(uint=>bool) isCashed;\\n        mapping(address=>uint) ticketsCountByBuyer;\\n    }\\n    mapping(uint => Round) rounds;\\n    \\n    function getRoundIndex() constant returns (uint){\\n                \\n        return block.number/blocksPerRound;\\n    }\\n\\n    function getIsCashed(uint roundIndex,uint subpotIndex) constant returns (bool){\\n                \\n        return rounds[roundIndex].isCashed[subpotIndex];\\n    }\\n\\n\\n    function calculateWinner(uint roundIndex, uint subpotIndex) constant returns(address){\\n        \\n        var decisionBlockNumber = getDecisionBlockNumber(roundIndex,subpotIndex);\\n        \\n        if(decisionBlockNumber>block.number)\\n            return;\\n        \\n        var decisionBlockHash = getHashOfBlock(decisionBlockNumber);\\n        var winningTicketIndex = decisionBlockHash%rounds[roundIndex].ticketsCount;\\n        \\n        var ticketIndex = uint256(0);\\n\\n        for(var buyerIndex = 0; buyerIndexwinningTicketIndex){\\n                return buyer;\\n            }\\n        }\\n\\n            }\\n\\n    function getDecisionBlockNumber(uint roundIndex,uint subpotIndex) constant returns (uint){\\n        return ((roundIndex+1)*blocksPerRound)+subpotIndex;\\n    }\\n\\n    function getSubpot(uint roundIndex) constant returns(uint){\\n                return rounds[roundIndex].pot/getSubpotsCount(roundIndex);\\n    }\\n\\n    function getSubpotsCount(uint roundIndex) constant returns(uint){\\n        \\n        var subpotsCount = rounds[roundIndex].pot/blockReward;\\n\\n        if(rounds[roundIndex].pot%blockReward>0)\\n            subpotsCount++;\\n\\n        return subpotsCount;\\n    }\\n\\n    function cash(uint roundIndex, uint subpotIndex){\\n        \\n        var subpotsCount = getSubpotsCount(roundIndex);\\n\\n        if(subpotIndex>=subpotsCount)\\n            return;\\n\\n        var decisionBlockNumber = getDecisionBlockNumber(roundIndex,subpotIndex);\\n\\n        if(decisionBlockNumber>block.number)\\n            return;\\n\\n        if(rounds[roundIndex].isCashed[subpotIndex])\\n            return;\\n        \\n        var winner = calculateWinner(roundIndex,subpotIndex);    \\n        var subpot = getSubpot(roundIndex);\\n\\n        var isSent = winner.send(subpot);\\n\\n        if(!isSent) return;\\n        \\n        rounds[roundIndex].isCashed[subpotIndex] = true;\\n            }\\n\\n    function getHashOfBlock(uint blockIndex) constant returns(uint){\\n        var blockhash = block.blockhash(blockIndex);\\n        return uint(blockhash);\\n    }\\n    \\n    function getBuyers(uint roundIndex,address buyer) constant returns (address[]){\\n        return rounds[roundIndex].buyers;\\n    }\\n\\n    function getTicketsCountByBuyer(uint roundIndex,address buyer) constant returns (uint){\\n        return rounds[roundIndex].ticketsCountByBuyer[buyer];\\n    }\\n\\n    function getPot(uint roundIndex) constant returns(uint){\\n        return rounds[roundIndex].pot;\\n    }\\n\\n    function() {\\n        \\n        var roundIndex = getRoundIndex();\\n        var value = msg.value-(msg.value%ticketPrice);\\n\\n        if(value==0) return;\\n\\n        if(value<msg.value){\\n            msg.sender.send(msg.value-value);\\n        }\\n        \\n        var ticketsCount = value/ticketPrice;\\n        \\n        if(rounds[roundIndex].ticketsCountByBuyer[msg.sender]==0){\\n            var buyersLength = rounds[roundIndex].buyers.length++;\\n            rounds[roundIndex].buyers[buyersLength] = msg.sender;\\n        }\\n\\n        rounds[roundIndex].ticketsCountByBuyer[msg.sender]+=ticketsCount;\\n        rounds[roundIndex].ticketsCount+=ticketsCount;\\n        \\n        rounds[roundIndex].pot+=value;\\n        \\n    }\\n\\n}\"\n  ],\n  \"id\": 3\n}\nFatal error: Cannot read property 'code' of undefined\n. Nope, thats all I'm getting.\n. Truffle v0.0.16\n. \n. Sure thing.\n\nHere's my geth\n```\n\ngeth version\n Geth\n Version: 1.1.0\n Protocol Versions: [61 60]\n Network Id: 1\n Go Version: go1.5\n OS: darwin\n GOPATH=\n GOROOT=/usr/local/Cellar/go/1.5/libexec\n```\n. Looks like a lot more came back this time =)\n\nAakils-Mac-mini:truffle aakilfernandes$ truffle compile --verbose-rpc\n\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_coinbase\",\n  \"params\": [],\n  \"id\": 1\n}\n <   {\n <     \"id\": 1,\n <     \"jsonrpc\": \"2.0\",\n <     \"result\": \"0xb735bf53abc79525a4f585a004a620d08cc66b27\"\n <   }\nCompiling lotto.sol...\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_getCompilers\",\n  \"params\": [],\n  \"id\": 2\n}\n <   {\n <     \"id\": 2,\n <     \"jsonrpc\": \"2.0\",\n <     \"result\": [\n <       \"Solidity\"\n <     ]\n <   }\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_compileSolidity\",\n  \"params\": [\n    \"contract Lotto {\\n    \\n    uint constant public blocksPerRound = 5760;\\n    \\n    uint constant public ticketPrice = 100000000000000000;\\n    \\n    uint constant public blockReward = 5000000000000000000;\\n\\n    function getBlocksPerRound() constant returns(uint){ return blocksPerRound; }\\n    function getTicketPrice() constant returns(uint){ return ticketPrice; }\\n    \\n    struct Round {\\n        address[] buyers;\\n        uint pot;\\n        uint ticketsCount;\\n        mapping(uint=>bool) isCashed;\\n        mapping(address=>uint) ticketsCountByBuyer;\\n    }\\n    mapping(uint => Round) rounds;\\n    \\n    function getRoundIndex() constant returns (uint){\\n                \\n        return block.number/blocksPerRound;\\n    }\\n\\n    function getIsCashed(uint roundIndex,uint subpotIndex) constant returns (bool){\\n                \\n        return rounds[roundIndex].isCashed[subpotIndex];\\n    }\\n\\n\\n    function calculateWinner(uint roundIndex, uint subpotIndex) constant returns(address){\\n        \\n        var decisionBlockNumber = getDecisionBlockNumber(roundIndex,subpotIndex);\\n        \\n        if(decisionBlockNumber>block.number)\\n            return;\\n        \\n        var decisionBlockHash = getHashOfBlock(decisionBlockNumber);\\n        var winningTicketIndex = decisionBlockHash%rounds[roundIndex].ticketsCount;\\n        \\n        var ticketIndex = uint256(0);\\n\\n        for(var buyerIndex = 0; buyerIndexwinningTicketIndex){\\n                return buyer;\\n            }\\n        }\\n\\n            }\\n\\n    function getDecisionBlockNumber(uint roundIndex,uint subpotIndex) constant returns (uint){\\n        return ((roundIndex+1)_blocksPerRound)+subpotIndex;\\n    }\\n\\n    function getSubpot(uint roundIndex) constant returns(uint){\\n                return rounds[roundIndex].pot/getSubpotsCount(roundIndex);\\n    }\\n\\n    function getSubpotsCount(uint roundIndex) constant returns(uint){\\n        \\n        var subpotsCount = rounds[roundIndex].pot/blockReward;\\n\\n        if(rounds[roundIndex].pot%blockReward>0)\\n            subpotsCount++;\\n\\n        return subpotsCount;\\n    }\\n\\n    function cash(uint roundIndex, uint subpotIndex){\\n        \\n        var subpotsCount = getSubpotsCount(roundIndex);\\n\\n        if(subpotIndex>=subpotsCount)\\n            return;\\n\\n        var decisionBlockNumber = getDecisionBlockNumber(roundIndex,subpotIndex);\\n\\n        if(decisionBlockNumber>block.number)\\n            return;\\n\\n        if(rounds[roundIndex].isCashed[subpotIndex])\\n            return;\\n        \\n        var winner = calculateWinner(roundIndex,subpotIndex);    \\n        var subpot = getSubpot(roundIndex);\\n\\n        var isSent = winner.send(subpot);\\n\\n        if(!isSent) return;\\n        \\n        rounds[roundIndex].isCashed[subpotIndex] = true;\\n            }\\n\\n    function getHashOfBlock(uint blockIndex) constant returns(uint){\\n        var blockhash = block.blockhash(blockIndex);\\n        return uint(blockhash);\\n    }\\n    \\n    function getBuyers(uint roundIndex,address buyer) constant returns (address[]){\\n        return rounds[roundIndex].buyers;\\n    }\\n\\n    function getTicketsCountByBuyer(uint roundIndex,address buyer) constant returns (uint){\\n        return rounds[roundIndex].ticketsCountByBuyer[buyer];\\n    }\\n\\n    function getPot(uint roundIndex) constant returns(uint){\\n        return rounds[roundIndex].pot;\\n    }\\n\\n    function() {\\n        \\n        var roundIndex = getRoundIndex();\\n        var value = msg.value-(msg.value%ticketPrice);\\n\\n        if(value==0) return;\\n\\n        if(valuebool) isCashed;\\n        mapping(address=>uint) ticketsCountByBuyer;\\n    }\\n    mapping(uint => Round) rounds;\\n    \\n    function getRoundIndex() constant returns (uint){\\n                \\n        return block.number/blocksPerRound;\\n    }\\n\\n    function getIsCashed(uint roundIndex,uint subpotIndex) constant returns (bool){\\n                \\n        return rounds[roundIndex].isCashed[subpotIndex];\\n    }\\n\\n\\n    function calculateWinner(uint roundIndex, uint subpotIndex) constant returns(address){\\n        \\n        var decisionBlockNumber = getDecisionBlockNumber(roundIndex,subpotIndex);\\n        \\n        if(decisionBlockNumber>block.number)\\n            return;\\n        \\n        var decisionBlockHash = getHashOfBlock(decisionBlockNumber);\\n        var winningTicketIndex = decisionBlockHash%rounds[roundIndex].ticketsCount;\\n        \\n        var ticketIndex = uint256(0);\\n\\n        for(var buyerIndex = 0; buyerIndexwinningTicketIndex){\\n                return buyer;\\n            }\\n        }\\n\\n            }\\n\\n    function getDecisionBlockNumber(uint roundIndex,uint subpotIndex) constant returns (uint){\\n        return ((roundIndex+1)_blocksPerRound)+subpotIndex;\\n    }\\n\\n    function getSubpot(uint roundIndex) constant returns(uint){\\n                return rounds[roundIndex].pot/getSubpotsCount(roundIndex);\\n    }\\n\\n    function getSubpotsCount(uint roundIndex) constant returns(uint){\\n        \\n        var subpotsCount = rounds[roundIndex].pot/blockReward;\\n\\n        if(rounds[roundIndex].pot%blockReward>0)\\n            subpotsCount++;\\n\\n        return subpotsCount;\\n    }\\n\\n    function cash(uint roundIndex, uint subpotIndex){\\n        \\n        var subpotsCount = getSubpotsCount(roundIndex);\\n\\n        if(subpotIndex>=subpotsCount)\\n            return;\\n\\n        var decisionBlockNumber = getDecisionBlockNumber(roundIndex,subpotIndex);\\n\\n        if(decisionBlockNumber>block.number)\\n            return;\\n\\n        if(rounds[roundIndex].isCashed[subpotIndex])\\n            return;\\n        \\n        var winner = calculateWinner(roundIndex,subpotIndex);    \\n        var subpot = getSubpot(roundIndex);\\n\\n        var isSent = winner.send(subpot);\\n\\n        if(!isSent) return;\\n        \\n        rounds[roundIndex].isCashed[subpotIndex] = true;\\n            }\\n\\n    function getHashOfBlock(uint blockIndex) constant returns(uint){\\n        var blockhash = block.blockhash(blockIndex);\\n        return uint(blockhash);\\n    }\\n    \\n    function getBuyers(uint roundIndex,address buyer) constant returns (address[]){\\n        return rounds[roundIndex].buyers;\\n    }\\n\\n    function getTicketsCountByBuyer(uint roundIndex,address buyer) constant returns (uint){\\n        return rounds[roundIndex].ticketsCountByBuyer[buyer];\\n    }\\n\\n    function getPot(uint roundIndex) constant returns(uint){\\n        return rounds[roundIndex].pot;\\n    }\\n\\n    function() {\\n        \\n        var roundIndex = getRoundIndex();\\n        var value = msg.value-(msg.value%ticketPrice);\\n\\n        if(value==0) return;\\n\\n        if(value (/usr/local/lib/node_modules/truffle/node_modules/web3/node_modules/xmlhttprequest/lib/XMLHttpRequest.js:431:13)\n  at IncomingMessage.emit (events.js:129:20)\n  at _stream_readable.js:908:16\n  at process._tickDomainCallback (node.js:381:11)\n  at Function.module.exports.loopWhile (/usr/local/lib/node_modules/truffle/node_modules/deasync/index.js:57:21)\n  at /usr/local/lib/node_modules/truffle/node_modules/deasync/index.js:29:18\n  at runTask (/usr/local/lib/node_modules/truffle/truffle.es6:41:5)\n  at Object. (/usr/local/lib/node_modules/truffle/truffle.es6:256:14)\n  at Module._compile (module.js:460:26)\n  at normalLoader (/usr/local/lib/node_modules/truffle/node_modules/babel/node_modules/babel-core/lib/api/register/node.js:199:5)\n  at Object.require.extensions.(anonymous function) as .es6\n  at Module.load (module.js:355:32)\n  at Function.Module._load (module.js:310:12)\n  at Function.Module.runMain (module.js:501:10)\n  at Object. (/usr/local/lib/node_modules/truffle/node_modules/babel/lib/_babel-node.js:144:25)\n  at Module._compile (module.js:460:26)\n  at Object.Module._extensions..js (module.js:478:10)\n  at Module.load (module.js:355:32)\n  at Function.Module._load (module.js:310:12)\n  at Function.Module.runMain (module.js:501:10)\n  at startup (node.js:129:16)\n  at node.js:814:3\n. Nice =D. Looks like it works.\n\nNo problem glad to help. Thanks for the framework!\n. Converted this: https://github.com/ConsenSys/truffle/blob/7c021b894fee86549fe0900a31c36863bdb286fe/lib/contracts.es6#L251\nto 50 gwei and it worked. Maybe have that reflect the current network rate? Not sure if thats even possible. \n. Also confused by this. Asking cause I need to require truffle/packages/truffle-artifactor. ",
    "jdmaresco": "@tcoulter great, thanks!\n. ",
    "ResourceHog": "The solution was to install cpp-ethereum\n. ",
    "wcchh": "where is it, the location of \"contracts.json\" ?\n. ",
    "taoeffect": "(I'm not entirely sure what the CLI flag needs to look like, maybe --evm=geth would be better.)\n. > Truffle and Embark no longer have philosophical differences, and will eventually merge efforts in the long run.\nThat's fantastic news! Congratulations!! :smile: :+1: \n\nWe can leave this feature to the eventual merge.\n\nI believe Embark already has this feature (or something similar)?\n. That seemed to work! :smile: \nI ran EtherSim (your version) and truffle test on ether-crawler. Most tests passed, there was one exception at the end:\n```\n-> % truffle test\nUsing environment test.\nCompiling contracts...\nContract: Challenge\n    \u2713 expects character, levels, and bet (167ms)\n    \u2713 lets you make an offer (85ms)\n    \u2713 lets player accept an offer, and initializes a game (424ms)\n    \u2713 doesn't blow up when you claim (122ms)\n    \u2713 pays out royalties to levels (592ms)\nContract: ChallengeRegistry\n    \u2713 should let you add a challenge (178ms)\nContract: Game\n    \u2713 loads the first level (398ms)\n    \u2713 stores extra information about monsters (347ms)\n    \u2713 stores information about adventurer (277ms)\n    \u2713 starts the adventurer in the upper left corner (284ms)\n    \u2713 lets adventurer move to an empty adjacent square (302ms)\n    \u2713 lets adventurer consume potion (326ms)\n    \u2713 doesn't let adventurer move onto walls (304ms)\n    \u2713 doesn't let adventurer move off the edge of the world (265ms)\n    1) sends adventurer to the next level if they enter a staircase\n    \u2713 attacks monster if adventurer tries to move onto it (354ms)\n    \u2713 lets player equip swords (528ms)\n    \u2713 kills monster when it drops below 0hp (380ms)\n    \u2713 levels adventurer up when they kill monster (387ms)\n    \u2713 moves monsters when player moves (375ms)\n    \u2713 attacks when player is adjacent (360ms)\n    \u2713 lets player equip shields (487ms)\n    \u2713 ends game if player goes to 0hp (381ms)\n    \u2713 lets you get all squares (597ms)\nContract: Level\n    \u2713 should let you add a staircase (47ms)\nContract: LevelRegistry\n    \u2713 should let you add a level (46ms)\n    \u2713 should let you get all levels at once (48ms)\n26 passing (15s)\n  1 failing\n1) Contract: Game sends adventurer to the next level if they enter a staircase:\n     TypeError: Cannot read property 'binary' of undefined\n    at _new (node_modules/ether-pudding/build/ether-pudding.js:86:18)\n    at tryCatcher (node_modules/bluebird/js/main/util.js:26:23)\n    at Promise._settlePromiseFromHandler (node_modules/bluebird/js/main/promise.js:507:31)\n    at Promise._settlePromiseAt (node_modules/bluebird/js/main/promise.js:581:18)\n    at Promise._settlePromises (node_modules/bluebird/js/main/promise.js:697:14)\n    at Async._drainQueue (node_modules/bluebird/js/main/async.js:123:16)\n    at Async._drainQueues (node_modules/bluebird/js/main/async.js:133:10)\n    at Immediate.Async.drainQueues [as _onImmediate] (node_modules/bluebird/js/main/async.js:15:14)\n    at Function.module.exports.loopWhile (node_modules/deasync/index.js:64:21)\n    at node_modules/deasync/index.js:36:18\n    at runTask (truffle.es6:55:5)\n    at Object. (truffle.es6:347:14)\n    at normalLoader (node_modules/babel-core/lib/api/register/node.js:199:5)\n    at Object.require.extensions.(anonymous function) [as .es6] (node_modules/babel-core/lib/api/register/node.js:216:7)\n    at Object. (node_modules/babel/lib/_babel-node.js:144:25)\n    at node.js:972:3\n```\nNot sure what to do with that.\n. Yep! Thank you!\n. @tcoulter That's probably the problem. I wasn't sure from the description of Ether Pudding whether it was a replacement for the RPC clients or not. Can you clear up what the difference is?\nI'll try running an RPC client and see if that fixes the problem (don't want to try geth as it's slow and I don't remember how to run it with a fake chain). I'm going to be using Truffle during a createathon today and over the weekend, here's hoping we can get it to work on all the machines!\n. > but let me know how I can help!\nSure! It would help if you could explain in simple terms what the difference/roles are between Ether Pudding and EtherSim/testrpc. :)\n(I'd dive into the details myself, but I'm running out of time to get out the door and drive to SF for the createathon!)\n. Awesome, thanks so much for that explanation! That's what I thought but I also got confused by hearing/seeing mentions of solc being written in JavaScript and thinking that maybe that meant that we didn't need EtherSim and projects like it anymore. I stand corrected. :)\n\nI'm switching my efforts to Ethersim as the JS solution seems to be more stable (at least, my command of JS is greater). They're nearly feature equivalent, though Ethersim lags behind a few RPC calls. I hope to fill those out soon.\n\nGreat! I like that EtherSim can be run standalone, because currently the situation with having it as a dependency in Embark is kindof a mess. EtherSim still has its own related problems on OS X with outdated dependencies.\n. @tcoulter EtherSim from npm still tries to install an outdated secp256k1, causing it to fail:\n```\nethersim/node_modules/ethereumjs-block/node_modules/secp256k1\n\nsecp256k1@1.1.4 install /usr/local/lib/node_modules/ethersim/node_modules/ethereumjs-vm/node_modules/secp256k1\n```\n\nThe develop copy per your instructions has the correct version and therefore installed, but running truffle test caused it to throw an exception:\n```\n-> % ./bin/ethersim -p 8545\nEtherSim v0.1.6\nAvailable Accounts\n0x1a9dc2ad31f3fdf575479760980b242d073ee149\n0xd13493e9d590ba763c202ab4fbe4ab17978cda32\n0xbce16ecae7407ac3e852b8d8ea088746e357dc82\n0x6d17d3b407ff990279cd852c5fe4805523cdc293\n0xba88351daf7a545becf4fccd1555e2750b445c9c\n0x7ab301af6a5d37c09b1264d46a42c78288a339ff\n0xe0c1976e9e9350986aa942b1176f6d23e0db90f8\n0xfb61aa6b35754d8779f989e50e616b0ab4d11662\n0x52e18c7cda62b91cbeafd52fbd0561720e2bd804\n0xa2d916f6f7490ab9f1aa5e444ef078eb7478b23b\nListening on localhost:8545\neth_accounts\neth_coinbase\neth_sendTransaction\neth_newBlockFilter\neth_getFilterChanges\n/Users/greg/Ethereum/frameworks/EtherSim/lib/blockchain.js:313\n    queued.callback(err, result);\n           ^\nTypeError: queued.callback is not a function\n    at intermediary (/Users/greg/Ethereum/frameworks/EtherSim/lib/blockchain.js:313:12)\n    at /Users/greg/Ethereum/frameworks/EtherSim/lib/blockchain.js:418:7\n    at Object.async.eachSeries (/Users/greg/Ethereum/frameworks/EtherSim/node_modules/async-eventemitter/node_modules/async/lib/async.js:130:20)\n    at VM.AsyncEventEmitter.emit (/Users/greg/Ethereum/frameworks/EtherSim/node_modules/async-eventemitter/lib/AsyncEventEmitter.js:42:9)\n    at afterBlock (/Users/greg/Ethereum/frameworks/EtherSim/node_modules/ethereumjs-vm/lib/runBlock.js:55:10)\n    at /Users/greg/Ethereum/frameworks/EtherSim/node_modules/ethereumjs-vm/lib/runBlock.js:179:9\n    at /Users/greg/Ethereum/frameworks/EtherSim/node_modules/ethereumjs-vm/lib/cache.js:136:7\n    at /Users/greg/Ethereum/frameworks/EtherSim/node_modules/async/lib/async.js:52:16\n    at iterate (/Users/greg/Ethereum/frameworks/EtherSim/node_modules/async/lib/async.js:260:24)\n    at Object.async.forEachOfSeries.async.eachOfSeries (/Users/greg/Ethereum/frameworks/EtherSim/node_modules/async/lib/async.js:281:9)\n```\ntruffle test got as far as:\n```\n-> % truffle test\nUsing environment test.\nCompiling contracts...\nContract: Example\n```\n. FYI, just verified that this works on TestRPC aka eth-testrpc.\nSo, since this is not an intrinsic Truffle issue I'm closing this, and I opened a corresponding EtherSim issue: https://github.com/iurimatias/EtherSim/issues/6\n. ",
    "vishakh": "Thanks for the feedback, @tcoulter. I definitely need to add support for code with multiple contracts.\nBefore I made the change, I thought about whether to simply detect the problem or to also fix it. When two contracts with the same name but mixed cases (e.g. Foo and fOO) are submitted together, it's not clear what should be done. Do you want me to return the correct result on a best effort basis, i.e. return a result where possible and throw an error in boundary cases like the one above? Another option would be simply to warn the user since mismatches between contract and file names will likely cause them issues down the line anyway.\n. ",
    "jgostylo": "I did not see this before I submitted my pull request: https://github.com/ConsenSys/truffle/pull/86\nPlease see my solution although it does not handle the lowercase instance.  It actually ignores what the filename is altogether.\n. Pull request submitted: https://github.com/ConsenSys/truffle/pull/86\n. This is a pull request for the following issue: https://github.com/ConsenSys/truffle/issues/83\n. @tcoulter you are correct, the spoke does not create new instances of the hub.  I actually attended a local meetup recently and asked about this situation and someone reminded me of abstract contracts.\nI would then agree with you that this pull request is not needed.\nI have not yet tried it because I am just running with my change locally.  I assume that if the function signatures between AbstractHub and Hub ever differ I would only be catching it at runtime if the function call matched the AbstractHub function signature.  Basically it provides limited compile time validation while forcing you to sync information in two places.\nBecause of that and in the interest of compiling and deploying validly written contracts I think I would still prefer this change.  My biggest problem with my PR is the regex is kind of hacky.  Is there any concern with implementing the intention of my idea?\n. ",
    "HCharlanes": "I have to run in a terminal\nsudo find / -name \".DS_Store\" -depth -exec rm {} \\; \nevery time I want to run tests. Have you guys found another solution since ?\n. ",
    "kayagoban": "I'm on Truffle v3.1.9 and I still have this problem with .swp files from vim - it's the migrate step that fails because of .swp files in the migrate directory.. ",
    "mhhf": "I'm trying to clean up spores build-chain. It's command line based and I'd like to manage different chains (local, consensys-testnet, main) with truffle. I need a way to inject the current environment code (host, port) and compiled contracts into the spore cli code.\nI guess I'll have to write a custom post-processor for this?!\n. I screw it up.\nI don't think inject-contracts post-processor should be used as a node module. I'll write another post-processor for this purpose.\n. ",
    "kramer65": "I think it is quite weird that providing contract constructor arguments is considered \"complex\". Is there still no possibility to provide these at this moment (a year after this question was posted)?\n. For any future readers. The solution is to simply provide the constructor arguments after the Contract name in the deploy method:\ndeployer.deploy(Test, \"This is the first constructor argument\", \"and this is another one\");\n. ",
    "jjc12": "@kramer65 But it says deployer is undefined.. I'm getting this error too, it's annoying. Honestly, I think it's because I'm trying to index a byte array, and then overwrite it. That is not allowed in Solidity; indexing is read-only.. Is this still an issue or can it be closed?. deployer.deployer() is not one of the functions. \nHave you tried deployer.deploy(Foo, 1, 2) instead?. As a last suggestion,\nIn case you try deployer.deploy(Foo, 1, 2) and you're still getting the BigNumber Error: new BigNumber() not a base 16 number: prompt, make sure to let the network know you've modified your contract:\ntruffle migrate --reset\nand the new version of your contract will be deployed. (Otherwise, you will keep using the old version, which you may not want.). Try adding the options modifier:\n```\ncontract Foo {\n   function Foo(uint one, uint two) options (uint three){\n      require(one != 0);\n   }\n}\n``. You are missing the point of the solution. Add theoptions` keyword to a function, such as YOUR CONSTRUCTOR, and you will allow parameters to be optional. \nThat's how the Solidity language works; it's not specific to any one function, and that includes deploy.\nDeal with it.. When there are three required args (because the optional keyword was not used), then the expected behavior is to have three args passed, if three args are passed. Otherwise, unexpected behavior occurs.. ",
    "elenadimitrova": "@jjc12 are you doing that in the context of 2_deploy_contracts.js\nmodule.exports = function (deployer, network) { deployer.deploy... }. @area has worked out that Truffle by default only sends 3141592 gas, which isn't enough to deploy the contract in question. We can override this by raising the gas value in truffle.json \"gas\": 4000000 (we went with just under homestead limit)\ntestrpc 2.0.7 now has the Homestead gas limit which also helps\n. Maybe a duplicate to https://github.com/ConsenSys/truffle/issues/223\n. I am getting something similar here with truffle@3.1.9 but even after truffle compile\n$ truffle version\nTruffle v3.1.9\n$ truffle compile\n$ truffle console\nEnexpected error: Cannot provision contracts while instantiating the console.\nError: Cannot parse .DS_Store: Unexpected token \n    at /Users/Elena/.nvm/versions/node/v4.6.1/lib/node_modules/truffle/lib/repl.js:69:27\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:380:3)\ntruffle(development)> TypeError: Cannot read property 'forEach' of undefined\n    at TruffleInterpreter.resetContractsInConsoleContext (/Users/Elena/.nvm/versions/node/v4.6.1/lib/node_modules/truffle/lib/repl.js:95:17)\n    at /Users/Elena/.nvm/versions/node/v4.6.1/lib/node_modules/truffle/lib/repl.js:44:12. I tested this again today and it no longer seems to be an issue, although I cannot pinpoint which release fixed it for us.. Confirming as fixed in 3.2.5. Thanks @tcoulter !. For me that was fixed when Tim pinned the node-dir version to one that didn't contain the bug. I see this is no longer a dependency of truffle though so it must be a different cause for you guys than what we saw.. @akravin any reason you closed this without a solution being implemented? Rather than just relying on a workaround? This will be a blocker for us too in very near future.. In future, do ask in gitter first https://gitter.im/ConsenSys/truffle?utm_source=share-link&utm_medium=link&utm_campaign=share-link\nAs an answer to your question, see documentation here\nhttp://truffleframework.com/tutorials/upgrading-from-truffle-2-to-3#contract-abstractions-transaction-result-objects\nyou have the entire transaction object back where you can query lots of things, including gas used via tx.receipt.gasUsed. Depreciating throw is a big one to test too.. Same here, I had symptoms of #386 when trying to use async/await in migrations. I submitted https://github.com/ethereum/solidity/issues/2621 and I don't think it belongs in the truffle issue log. This is a matter of truffle upgrading to the latest solc, and not truffle having to fix anything.. Sure but I believe double logging bugs is anti-practice. If this were a thing, then we'll need to duplicate this issue all over the dependent on solc packages. This simply isn't a good practice.. This is a problem for us at Colony too where events in called contracts aren't surfaced in the transaction logs. We've solved this for A and B in the example above being the Interface and actual contract implementation. For different contracts however this is still a problem, see Colony.addGlobalSkill calls ColonyNetwork.addSkill which  emits SkillAdded that never surfaces in the transaction log of the Colony.addGlobalSkill call https://github.com/JoinColony/colonyNetwork/blob/develop/contracts/Colony.sol#L112. I'm sure maintainers @tcoulter and @gnidan would be interested in a PR @rudolfix :). My contract is called MyContract but the filename its contained in changes over time (to provide different versions of the same contract to the front-end).\nTherefore I'd not expect to have to change the artifacts.require statement if the filename changes.\nAlso this was not an issue with truffle 3. I think this is what is causing the wrong network to be selected in truffle test in v4 beta. If no --network is explicitly passed it falls back to test even when development is defined.. @area investigated this too and this seemed suspicious as we were not convinced that awaiting there ensures the events have fired. It does! Thanks @gnidan . This is affecting us all day today too :(\nConsidering we are using a docker image.. ",
    "iam-peekay": "@elenadimitrova that's right.\n```\nvar MyContract = artifacts.require(\"./MyContract.sol\");\nmodule.exports = function(deployer) {\n    deployer.deploy(MyContract, arg1, arg2, arg3);\n}\n```. ",
    "lorepieri8": "This functionality is so basic that I would suggest including it with an explicit example in the contracts generated with truffle init.. For me modifying the gas in truffle.js worked.. Nice work devs! \nNo errors, I did \"truffle init\" and I got the commands and the doc, so it seems working!\n\" And for most users, this sucks: getting hung up on installation is incredibly frustrating when you're usually just one error message or two away from creating your first Ethereum-enabled application. \"\nI totally agree!!!\nPS: \nFor me, even after \"npm uninstall -g truffle\", there were remnant of past installation, giving me this error:\n```\n$ npm install -g truffle@beta\nnpm ERR! Darwin 13.3.0\nnpm ERR! argv \"/usr/local/bin/node\" \"/usr/local/bin/npm\" \"install\" \"-g\" \"truffle@beta\"\nnpm ERR! node v6.11.0\nnpm ERR! npm  v3.10.10\nnpm ERR! path /usr/local/bin/truffle\nnpm ERR! code EEXIST\nnpm ERR! Refusing to delete /usr/local/bin/truffle: ../lib/node_modules/truffle/cli.js symlink target is not controlled by npm /usr/local\nnpm ERR! File exists: /usr/local/bin/truffle\nnpm ERR! Move it away, and try again.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/lorenzo/npm-debug.log\n```\nI solved by manually trashing some truffle files in the usr/bin folder.\n. Same here:\nOperating System: Mac OS  10.9\nTruffle version: 3.2.8\nEthereum client: testrpc\nnode version:6.11.0\nnpm version: 3.10.10\n`Serving static assets in ./build on port 8080...\n/usr/local/lib/node_modules/truffle/build/cli.bundled.js:119780\n  return (new fsevents(path)).on('fsevent', callback).start();\n          ^\nTypeError: fsevents is not a constructor\n    at createFSEventsInstance (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:119780:11)\n    at setFSEventsListener (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:119834:16)\n    at FSWatcher.FsEventsHandler._watchWithFsEvents (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:119998:16)\n    at FSWatcher. (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:120132:25)\n    at LOOP (fs.js:1773:14)\n    at _combinedTickCallback (internal/process/next_tick.js:73:7)\n    at process._tickCallback (internal/process/next_tick.js:104:9)`\n. ",
    "FaizulMustafiz": "can it be done ???\nvar Test= artifacts.require('./Test.sol');\nvar testType= document.getElementById('testType');\nvar type= parseInt(testType);\nmodule.exports = function (deployer) { \n  deployer.deploy(Test, type)\n}\ni am having trouble with this ... when i am trying to migrate its saying that document is not defined. ",
    "nickjuntilla": "I am trying to do unit tests and using module exports in the test directory before Contract.deployed() isn't working. How do you unit test a contract that has parameters?. Thanks @chuacw I'll give that a shot, but I also solved my problem by creating a migration file for the token contract I needed for set up. I didn't realize the tests actually use the main migration files. That's a little annoying since I don't need a migration file for some of the set up contracts my contract depends on. I think it will be cleaner to use .new so I can just test the contract I'm working on in my repo. Thanks!. Hi, I'm still having this issue as well. It seems the only difference is that etherscan is not actually adding the ABI-encoded characters to the end, or maybe I'm not seeing the other difference:\nConstructor Arguments Used (ABI-encoded):\n000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000095961636874436f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055941434854000000000000000000000000000000000000000000000000000000\nByteCode on the Blockchain (what we are looking for):\n0x606060405260408051908101604052600481527f48302e31000000000000000000000000000000000000000000000000000000006020820152600690805161004b9291602001906100e7565b50341561005757600080fd5b6040516109eb3803806109eb833981016040528080519190602001805182019190602001805191906020018051600160a060020a0333166000908152600160205260408120879055869055909101905060038380516100ba9291602001906100e7565b506004805460ff191660ff841617905560058180516100dd9291602001906100e7565b5050505050610182565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012857805160ff1916838001178555610155565b82800160010185558215610155579182015b8281111561015557825182559160200191906001019061013a565b50610161929150610165565b5090565b61017f91905b80821115610161576000815560010161016b565b90565b61085a806101916000396000f300606060405236156100935763ffffffff60e060020a60003504166306fdde038114610098578063095ea7b31461012257806318160ddd1461015857806323b872dd1461017d578063313ce567146101a557806354fd4d50146101ce57806370a08231146101e157806395d89b4114610200578063a9059cbb14610213578063cae9ca5114610235578063dd62ed3e1461029a575b600080fd5b34156100a357600080fd5b6100ab6102bf565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100e75780820151838201526020016100cf565b50505050905090810190601f1680156101145780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561012d57600080fd5b610144600160a060020a036004351660243561035d565b604051901515815260200160405180910390f35b341561016357600080fd5b61016b6103c9565b60405190815260200160405180910390f35b341561018857600080fd5b610144600160a060020a03600435811690602435166044356103cf565b34156101b057600080fd5b6101b86104d5565b60405160ff909116815260200160405180910390f35b34156101d957600080fd5b6100ab6104de565b34156101ec57600080fd5b61016b600160a060020a0360043516610549565b341561020b57600080fd5b6100ab610564565b341561021e57600080fd5b610144600160a060020a03600435166024356105cf565b341561024057600080fd5b61014460048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061066395505050505050565b34156102a557600080fd5b61016b600160a060020a0360043581169060243516610803565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103555780601f1061032a57610100808354040283529160200191610355565b820191906000526020600020905b81548152906001019060200180831161033857829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b600160a060020a0380841660008181526002602090815260408083203390951683529381528382205492825260019052918220548390108015906104135750828110155b151561041e57600080fd5b600160a060020a038085166000908152600160205260408082208054870190559187168152208054849003905560001981101561048357600160a060020a03808616600090815260026020908152604080832033909416835292905220805484900390555b83600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405190815260200160405180910390a3506001949350505050565b60045460ff1681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103555780601f1061032a57610100808354040283529160200191610355565b600160a060020a031660009081526001602052604090205490565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103555780601f1061032a57610100808354040283529160200191610355565b600160a060020a033316600090815260016020526040812054829010156105f557600080fd5b600160a060020a033381166000818152600160205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a03338116600081815260026020908152604080832094881680845294909152808220869055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a383600160a060020a03166040517f72656365697665417070726f76616c28616464726573732c75696e743235362c81527f616464726573732c6279746573290000000000000000000000000000000000006020820152602e01604051809103902060e060020a9004338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a03168152602001828051906020019080838360005b838110156107a457808201518382015260200161078c565b50505050905090810190601f1680156107d15780820380516001836020036101000a031916815260200191505b5094505050505060006040518083038160008761646e5a03f19250505015156107f957600080fd5b5060019392505050565b600160a060020a039182166000908152600260209081526040808320939094168252919091522054905600a165627a7a72305820cbe829b967aed0a7e0ddf4e7a57298b85e71199109215507ede1a3dc57856f850029000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000095961636874436f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055941434854000000000000000000000000000000000000000000000000000000\nYour Compiled Bytecode + Constructor Argument if any (what you provided):\n0x606060405260408051908101604052600481527f48302e31000000000000000000000000000000000000000000000000000000006020820152600690805161004b9291602001906100e7565b50341561005757600080fd5b6040516109ed3803806109ed833981016040528080519190602001805182019190602001805191906020018051600160a060020a0333166000908152600160205260408120879055869055909101905060038380516100ba9291602001906100e7565b506004805460ff191660ff841617905560058180516100dd9291602001906100e7565b5050505050610182565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012857805160ff1916838001178555610155565b82800160010185558215610155579182015b8281111561015557825182559160200191906001019061013a565b50610161929150610165565b5090565b61017f91905b80821115610161576000815560010161016b565b90565b61085c806101916000396000f3006060604052600436106100955763ffffffff60e060020a60003504166306fdde03811461009a578063095ea7b31461012457806318160ddd1461015a57806323b872dd1461017f578063313ce567146101a757806354fd4d50146101d057806370a08231146101e357806395d89b4114610202578063a9059cbb14610215578063cae9ca5114610237578063dd62ed3e1461029c575b600080fd5b34156100a557600080fd5b6100ad6102c1565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100e95780820151838201526020016100d1565b50505050905090810190601f1680156101165780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561012f57600080fd5b610146600160a060020a036004351660243561035f565b604051901515815260200160405180910390f35b341561016557600080fd5b61016d6103cb565b60405190815260200160405180910390f35b341561018a57600080fd5b610146600160a060020a03600435811690602435166044356103d1565b34156101b257600080fd5b6101ba6104d7565b60405160ff909116815260200160405180910390f35b34156101db57600080fd5b6100ad6104e0565b34156101ee57600080fd5b61016d600160a060020a036004351661054b565b341561020d57600080fd5b6100ad610566565b341561022057600080fd5b610146600160a060020a03600435166024356105d1565b341561024257600080fd5b61014660048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061066595505050505050565b34156102a757600080fd5b61016d600160a060020a0360043581169060243516610805565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103575780601f1061032c57610100808354040283529160200191610357565b820191906000526020600020905b81548152906001019060200180831161033a57829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b600160a060020a0380841660008181526002602090815260408083203390951683529381528382205492825260019052918220548390108015906104155750828110155b151561042057600080fd5b600160a060020a038085166000908152600160205260408082208054870190559187168152208054849003905560001981101561048557600160a060020a03808616600090815260026020908152604080832033909416835292905220805484900390555b83600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405190815260200160405180910390a3506001949350505050565b60045460ff1681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103575780601f1061032c57610100808354040283529160200191610357565b600160a060020a031660009081526001602052604090205490565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103575780601f1061032c57610100808354040283529160200191610357565b600160a060020a033316600090815260016020526040812054829010156105f757600080fd5b600160a060020a033381166000818152600160205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a03338116600081815260026020908152604080832094881680845294909152808220869055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a383600160a060020a03166040517f72656365697665417070726f76616c28616464726573732c75696e743235362c81527f616464726573732c6279746573290000000000000000000000000000000000006020820152602e01604051809103902060e060020a9004338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a03168152602001828051906020019080838360005b838110156107a657808201518382015260200161078e565b50505050905090810190601f1680156107d35780820380516001836020036101000a031916815260200191505b5094505050505060006040518083038160008761646e5a03f19250505015156107fb57600080fd5b5060019392505050565b600160a060020a039182166000908152600260209081526040808320939094168252919091522054905600a165627a7a72305820768f61cbce7e55f532b6b3237027565cdd86adcd32793187295afd3f7a02a4770029\nAnd it still fails. Shouldn't etherscan be adding the abi encoding I provided to the end?. @schampilomatis I don't have a cli.bundled.js. I'm using truffle 3.4.11. In the build folder all I have are the contract abi .json files. Is there somewhere else this can be? I've tried optimization disabled, enabled, and runs of 200 and 0 and every combination thereof. I've stopped short of trying every optimization level between 1 and 200. I already have contracts out that people are using and now I want to verify them on etherscan. I still have the source code and I've tried concatenating and using both version of the etherscan verify tool as many compilation versions.\nI have some questions for anyone:\nDoes leaving in the comments or white space change any byte code?\nDoes changing the solidity code version in the file change the byte code?\nIf I concatenate files do I still have to add the reference files that were deployed via truffle as libraries?\nThanks anyone!. @schampilomatis Thanks for helping! So I found my cli.bundled.js it was in /usr/local/lib/ntruffle/build/cli.bundled.js and my runs are 200, but it's still not working. I'm not getting an error about the missing libraries. It just says the code doesn't match. I don't have the original addresses of where the classes were deployed anymore. Is there a way to find out? You can see here is the contract I'm trying to verify:\nhttps://etherscan.io/verifyContract2?a=0x52f7018bc6ba4d24abfbaefccae4617bfb0a0b52\nAnd here is the source code: \n```\npragma solidity ^0.4.18;\ncontract Token {\n    / This is a slight change to the ERC20 base standard.\n    function totalSupply() constant returns (uint256 supply);\n    is replaced with:\n    uint256 public totalSupply;\n    This automatically creates a getter function for the totalSupply.\n    This is moved to the base contract since public getter functions are not\n    currently recognised as an implementation of the matching abstract\n    function by the compiler.\n    /\n    /// total amount of tokens\n    uint256 public totalSupply;\n/// @param _owner The address from which the balance will be retrieved\n/// @return The balance\nfunction balanceOf(address _owner) public constant returns (uint256 balance);\n\n/// @notice send `_value` token to `_to` from `msg.sender`\n/// @param _to The address of the recipient\n/// @param _value The amount of token to be transferred\n/// @return Whether the transfer was successful or not\nfunction transfer(address _to, uint256 _value) public returns (bool success);\n\n/// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n/// @param _from The address of the sender\n/// @param _to The address of the recipient\n/// @param _value The amount of token to be transferred\n/// @return Whether the transfer was successful or not\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n/// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n/// @param _spender The address of the account able to transfer the tokens\n/// @param _value The amount of tokens to be approved for transfer\n/// @return Whether the approval was successful or not\nfunction approve(address _spender, uint256 _value) public returns (bool success);\n\n/// @param _owner The address of the account owning tokens\n/// @param _spender The address of the account able to transfer the tokens\n/// @return Amount of remaining tokens allowed to spent\nfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\nevent Transfer(address indexed _from, address indexed _to, uint256 _value);\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\ncontract StandardToken is Token {\nuint256 constant MAX_UINT256 = 2**256 - 1;\n\nfunction transfer(address _to, uint256 _value) public returns (bool success) {\n    //Default assumes totalSupply can't be over max (2^256 - 1).\n    //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n    //Replace the if with this one instead.\n    //require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n    require(balances[msg.sender] >= _value);\n    balances[msg.sender] -= _value;\n    balances[_to] += _value;\n    Transfer(msg.sender, _to, _value);\n    return true;\n}\n\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n    //same as above. Replace this line with the following if you want to protect against wrapping uints.\n    //require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n    uint256 allowance = allowed[_from][msg.sender];\n    require(balances[_from] >= _value && allowance >= _value);\n    balances[_to] += _value;\n    balances[_from] -= _value;\n    if (allowance < MAX_UINT256) {\n        allowed[_from][msg.sender] -= _value;\n    }\n    Transfer(_from, _to, _value);\n    return true;\n}\n\nfunction balanceOf(address _owner) constant public returns (uint256 balance) {\n    return balances[_owner];\n}\n\nfunction approve(address _spender, uint256 _value) public returns (bool success) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n}\n\nfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n  return allowed[_owner][_spender];\n}\n\nmapping (address => uint256) balances;\nmapping (address => mapping (address => uint256)) allowed;\n\n}\ncontract HumanStandardToken is StandardToken {\n/* Public variables of the token */\n\n/*\nNOTE:\nThe following variables are OPTIONAL vanities. One does not have to include them.\nThey allow one to customise the token contract & in no way influences the core functionality.\nSome wallets/interfaces might not even bother to look at this information.\n*/\nstring public name;                   //fancy name: eg Simon Bucks\nuint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\nstring public symbol;                 //An identifier: eg SBX\nstring public version = 'H0.1';       //human 0.1 standard. Just an arbitrary versioning scheme.\n\n function HumanStandardToken(\n    uint256 _initialAmount,\n    string _tokenName,\n    uint8 _decimalUnits,\n    string _tokenSymbol\n    ) public {\n    balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n    totalSupply = _initialAmount;                        // Update total supply\n    name = _tokenName;                                   // Set the name for display purposes\n    decimals = _decimalUnits;                            // Amount of decimals for display purposes\n    symbol = _tokenSymbol;                               // Set the symbol for display purposes\n}\n\n/* Approves and then calls the receiving contract */\nfunction approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n\n    //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n    //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n    //it is assumed when one does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n    require(_spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData));\n    return true;\n}\n\n}\n```\nAnd here is the ABI encoded params:\n000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000095961636874436f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055941434854000000000000000000000000000000000000000000000000000000\nI'm not sure the addresses fro StandardToken and Token so I just have to guess for them and the errors I get are that they are not used never that anything is missing. I'm not sure why I would have to concatenate them and link them as well either that seems strange?. Note: I finally got it. I just started trying all the compilers and v0.4.17+commit.bdeb9e52 worked. Optimizations Enabled and Runs: 200. I think maybe v0.4.17 is what truffle: 3.4.11 uses. \nSo even though the scripts were tagged with ^0.4.8 they ended up being compiled with v0.4.17 which I guess is understandable if it was the latest one available, but for this verification process it doesn't help to use the latest one. We need to start using exact versions and keep track of them.\nAlso note I didn't need to link the libraries included in my concatenation, which makes sense since they are there in the body. I reviewed my contract history and I didn't even see them deployed as separate contracts ever. There are migration contracts where a setComplete function was called. Maybe those are the base tokens? \nIncidentally it's the same source code for this one and I can't get it to register with the same settings: https://etherscan.io/verifyContract2?a=0xd6e49800decb64c0e195f791348c1e87a5864fd7\nAbi encoding\n00000000000000000000000000000000000000000000000006f05b59d3b200000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000b52656365697074436f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025243000000000000000000000000000000000000000000000000000000000000\nIf anyone can verify 0xd6e49800decb64c0e195f791348c1e87a5864fd7 I'll send you some eth.. @mtbitcoin Is there any way to make this compatible with v0.4.8? solcjs in truffle is still 0.4.8 so even new code cannot be verified.. So I got a version of my second contract to verify by changing all the dependent classes 0.4.18 and re-deploying, but unfortunately that means all the contracts I have that have pragma 0.4.8 like everything based on consensys code.. Thanks, guys @schampilomatis got it the last contract: 0.4.11 optimization enabled and 0 runs.. ",
    "chuacw": "Hi @nickjuntilla See example below.\n--- Solidity contract ----\npragma solidity ^0.4;\ncontract testContract {\nstring public mymsg;\n  int public value;\nfunction testContract(string _msg, int _value) {\n    mymsg = _msg;\n    value = _value;\n  }\n}\n---- Truffle test script -----\n\"use strict\";\nconst TestContract = artifacts.require('./testContract.sol');\ncontract('TestContract', function(accounts) {\nlet wallet = accounts[2];\n  let anotherwallet = accounts[3];\n  let thirdwallet = accounts[4];\n  let TestContractInstance = null;\nbeforeEach('setup contract for each test', async() => {\n    TestContractInstance = await TestContract.new(\"Hello\", 5);\n  })\nit('should have msg and value initialized', async() =>  {\n    let value = await TestContractInstance.value();\n    let mymsg = await TestContractInstance.mymsg();\n    assert.equal(value, 5);\n    assert.equal(mymsg, \"Hello\");\n  })\n})\n. When truffle init works on Windows, and nothing does after that, you have to rename truffle.js to truffle-config.js in your project directory. Then, everything else will work. You need to do this for every project.. Is there a way to increase the number of blocks to wait?\nI deployed a contract around 10:25, and it only showed up at 11:24. Nearly 1 hour later!. Robbie,\nYou can set gas price when deploying.\nHere's my migration file, 1_initial_migration.js\nvar Migrations = artifacts.require(\"./Migrations.sol\");\nvar Scream = artifacts.require(\"./Scream.sol\");\nmodule.exports = function(deployer) {\n  deployer.deploy(Migrations, {gas: 4612388, from: \"0x....\"});\n  deployer.deploy(Scream);\n};\n. initialize can only be called once, and only from the address that the contract was created with.. @josoroma Hi, I'll be happy to. What kind of example? A call in truffle development, a Truffle test script, or a Solidity contract?. Here's the Truffle test script (written by me) which executed successfully. The reason why your calls in truffle develop failed is because you didn't transfer the expected amount of tokens.\nconst PreICO = artifacts.require('./ApePreICO.sol');\nconst ApeToken = artifacts.require('./ApeToken.sol');\n// Truffle test script to test ApePreICO and ApeToken by chuacw\nlet debug = false;\nlog = function(msg) {\n  if (debug)\n    console.log(msg);\n}\ncontract('PreICO', function(accounts) {\nlet wallet = accounts[2];\n  let anotherwallet = accounts[3];\n  let thirdwallet = accounts[4];\n  let ApeTokenAddress = null;\n  let PreICOInstance = null;\n  let ApeTokenInstance;\nlog(\"accounts: \" + accounts);\n  log(\"Wallet: \" + wallet);\nbeforeEach('setup contract for each test', async function() {\n      ApeTokenInstance = await ApeToken.new({from: wallet});\n      ApeTokenAddress = ApeTokenInstance.address;\n      log(\"Ape Token address: \" + ApeTokenAddress);\n      PreICOInstance = await PreICO.new(ApeTokenInstance.address, {from: anotherwallet}); // .new to create a new instance, .deployed() to get an existing instance\n      log(\"PreICO Address: \" + PreICOInstance.address);\n  })\nit('can get owner', async function() {\n    let owner = await PreICOInstance.owner();\n    // console.log(\"Owner: \" + owner);\n  })\nit('cannot call initialize from any other wallet', async function() {\n    let ex = false;\n    log(\"Ex value: \" + ex);\n    try {\n      await PreICOInstance.initialize({from: thirdwallet});\n    } catch (e) {\n      ex = true; // can't initialize the wallet willy nilly \n    }\n    log(\"Ex value: \"  + ex);\n    assert.equal(ex, true);\n  })\nit('can get initialized before initialization', async function() {\n    log(\"Calling initialized\");\n    let initialized = await PreICOInstance.initialized();\n    log(\"initialized: \" + initialized);\n    assert.equal(initialized, false);\n  })\nit('can get token balance', async function() {\n    let tokensAvailable = await PreICOInstance.tokensAvailable();\n    log(\"Tokens available: \" + tokensAvailable);\n    assert.equal(tokensAvailable, 0);\n  })\nit('can transfer token to this account', async function() {\n    let initialSupply = await ApeTokenInstance.INITIAL_SUPPLY();\n    log(\"INITIAL_SUPPLY: \" + initialSupply);\n    await ApeTokenInstance.transfer(PreICOInstance.address, await PreICOInstance.INITIAL_TOKENS(), {from: wallet});\n    log(\"Successful transfer\");\n    assert.equal(initialSupply, 1e+26);\n  })\nit('can get tokens after transfer', async function() {\n    // repeat transfer from \"can transfer token to this account\", since each \"it\" test case is newly initialized...\n    await ApeTokenInstance.transfer(PreICOInstance.address, await PreICOInstance.INITIAL_TOKENS(), {from: wallet});\n    log(\"Successful transfer\");\n    log(\"Tokens available: \" + await PreICOInstance.tokensAvailable());\n  })\nit('can initialize', async function() {\n    await ApeTokenInstance.transfer(PreICOInstance.address, await PreICOInstance.INITIAL_TOKENS(), {from: wallet});\n    log(\"Successful transfer\");\n    log(\"Tokens available: \" + await PreICOInstance.tokensAvailable());\n    await PreICOInstance.initialize({from: anotherwallet});\n    let initialized = await PreICOInstance.initialized();\n    log(\"Initialized successfully: \" + initialized);\n    assert.equal(initialized, true);\n  })\nit(\"can't initialize again after initialization\", async function() {\n    await ApeTokenInstance.transfer(PreICOInstance.address, await PreICOInstance.INITIAL_TOKENS(), {from: wallet});\n    log(\"Successful transfer\");\n    log(\"Tokens available: \" + await PreICOInstance.tokensAvailable());\n    await PreICOInstance.initialize({from: anotherwallet});\n    let initialized = await PreICOInstance.initialized();\n    log(\"Initialized successfully: \" + initialized);\n    assert.equal(initialized, true);\n    let ex = false;\n    try {\n      await PreICOInstance.initialize({from: anotherwallet});\n    } catch (e) {\n      ex = true;\n    }\n    assert.equal(ex, true);\n  })\n})\nThis issue should be closed as there's a difference between user expectation and reality, not a truffle issue.. I can't guess what's wrong now.\nPlease provide complete code that can be compiled and run.\n. Am I missing something here? Can you help me understand why you're executing so many tests in truffle console instead of truffle test? . Congratulations, @josoroma ! I believed you've learnt something here.. Use evm_increaseTime to set or increase the current time to a point in future.\n. Well, you can name your files with a 1-digit numeric prefix, if you have less than 10 files, in ascending order of execution.\neg, 1_this_first.js, 2_next.js, etc.\nThey will be executed in that order, the file with the lowest numerical prefix will be executed first.. ",
    "mallapurbharat": "@FaizulMustafiz  \n\nFaizulMustafiz commented on Sep 18, 2017\ncan it be done ???\nvar Test= artifacts.require('./Test.sol');\nvar testType= document.getElementById('testType');\nvar type= parseInt(testType);\nmodule.exports = function (deployer) {\ndeployer.deploy(Test, type)\n}\ni am having trouble with this ... when i am trying to migrate its saying that document is not defined\n\ndocument is a client-side javascript object (DOM). It would typically not be available in a deploy script.. ",
    "chetan": "\nStill - is the time of deployment slowing down tests by that much? In my experience compiling takes much longer.\n\nThe current implementation only redeploys contracts before() the suite is run. This means that your tests carry their state forward which can be good in some cases but also makes it harder to write them when you don't need that feature. It's better to simply start with a clean slate before each test. \nI initially tried changing the redeploy to a beforeEach() but it was too slow to be usable -- takes about 3sec to deploy, adding about 30sec to my suite.\nSo a snapshot/revert is far better and adds much less overhead. I guess it should also be noted that this is a breaking change from the current functionality, when enabled. You can pass a flag to disable it like so contract(\"Foo\", {reset_state: false}, function(accounts) { ... });\n. ",
    "m888m": "Thanks a lot Tim! Solved it :+1: \n. Could you give me some help with this issue please. Thanks :)\n. Hi Tim, your intuition was right -- it was a compatibility issue of my contract and the newest solc version.\nIt had compiled fine in a previous version,  but there have been some changes to solidity which broke things.\nI checked the contract, and upgraded the syntax, so now things work fine.\nI have a suggestion though: can you catch this kind of errors in truffle, and point users to the solution?\nThanks a lot :+1: \n. ",
    "parvez99": "Hi Tim,\nI am new to truffle and trying to build my first dApp. I have an Ubuntu 15.04 VM setup with Nodejs 5.10 and testrpc ethereum client installed as instructed on the website ( http://truffle.readthedocs.io/en/latest/getting_started/project/ ). \nAfter running $ npm install -g truffle when I execute truffle init, it does not seem to do anything at all . I am not able to understand what the problem is. Could you please tell me a few things that I could try. Thanks. \n. Hi, Thanks for the response. I have it resolved. There were some persmission issues with the folder where I was executing truffle init command. But there's one thing that I notice different. I am follwing https://www.youtube.com/watch?v=GPP6uAq15d8 video where, at 1:54 there's a file called 'app.json' explained as very important for configuration purposes.. But after initializing truffle, I accessed the project in atom and do not see the file called app.json . Also there's no config folder instead there's an environment folder. Is this an upgrade change or am I missing something. please comment as it'd be helpful. Thanks\n. ",
    "Akiiki": "Hi Tim, Please share your screenshot. Also truffle creates the project folders and files in the directory you run the truffle initcommand. For example if I navigate to Documents using cd Documents in my terminal and run the truffle initcommand, It will create the project files in Documents folder\n. Im currently running the geth node\n. version v0.10.25\n. Sweet!! Thanks it worked.....One more question why is it better to use ethereumjs-testrpc when developing dApps?\n. I also got this error while installing;\nnpm WARN notsup Not compatible with your operating system or architecture: fsevents@1.0.12\n. All I had to do was uninstall both truffle and testrpc and reinstall them back\n. ",
    "danielrussellLA": "I had a similar problem. I ran npm i -g truffle and then when I tried to run truffle init I got an error: zsh: command not found: truffle.  What solved it for me is to create a local node_modules with truffle installed in it, and then run that copy.\n\nrun npm init and make a new npm project\nrun npm i truffle\nrun ./node_modules/.bin/truffle init and it should work\n\nunfortunately, with this method, you'd have to call all commands by prepending ./node_modules/.bin/truffle to the command. Glad it worked for you @drewesk!. I had a similar problem. I ran npm i -g truffle and then when I tried to run truffle init I got an error: zsh: command not found: truffle.  What solved it for me is to create a local node_modules with truffle installed in it, and then run that copy.\n\nrun npm init and make a new npm project\nrun npm i truffle\nrun ./node_modules/.bin/truffle init and it should work!. \n",
    "drewesk": "@danielrussellLA thanks for something that works, turned that into an alias so I could pretend that I was directly running the truffle command like a real boy. . ",
    "vamshirapolu": "I had a problem with truffle init. I end up having an error \nDownloading...\nError: Error making request to https://raw.githubusercontent.com/truffle-box/bare-box/master/truffle.js. Got error: connect ETIMEDOUT 151.101.20.133:443. Please check the format of the requested resource.\n    at Request._callback (C:\\Users\\vrapolu\\Work\\tools\\nodejs\\.npm-global\\node_modules\\truffle\\build\\webpack:\\~\\truffle-box\\lib\\utils\\unbox.js:45:1)\n    at self.callback (C:\\Users\\vrapolu\\Work\\tools\\nodejs\\.npm-global\\node_modules\\truffle\\build\\webpack:\\~\\request\\request.js:186:1)\n    at emitOne (events.js:116:13)\n    at Request.emit (events.js:211:7)\n    at Request.onRequestError (C:\\Users\\vrapolu\\Work\\tools\\nodejs\\.npm-global\\node_modules\\truffle\\build\\webpack:\\~\\request\\request.js:878:1)\n    at emitOne (events.js:116:13)\n    at ClientRequest.emit (events.js:211:7)\n    at TLSSocket.socketErrorListener (_http_client.js:387:9)\n    at emitOne (events.js:116:13)\n    at TLSSocket.emit (events.js:211:7)\nI have tried uninstalling and installing truffle as @tcoulter mentioned, but now luck.\n. Thanks @cgewecke for the quick reply. As suggested, I did a git clone of truffle-init-default, now its working fine. . ",
    "cgewecke": "@vamshirapolu There's more about this problem over at #766.  At the moment init requires a working internet connection that can connect to github over https. If you're behind a proxy, you might see additional errors although there some work arounds suggested in that thread. \nUltimately we should remove any network connectivity requirements for truffle init. Opening an issue to that effect right now. . Closing in favor of #684, which is more recent (Nov 15, 2017) and refers to version 3.4.11.. @tgonzales Closing this for house-keeping. Serpent has been deprecated. Thanks for opening.. Confirmed: its a weird chai-as-promised/native promises thing. The problem is actually with 'should' pattern tests. Tests that use expect (and probably assert) work fine in v2.\nIn v1 with a bluebird promise you can have a contract method like:\nfunction throwsError(){\n    throw;\n}\nand write tests with chai-as-promised like:\nit('should throw an error', function(){\n     return myContract.throwsError({from: account[0]}).should.eventually.be.rejected;\n}\nIn v2 these fail (possibly because the returned promise object is empty). Wrapping the method call in a chai 'expect' function works though:\nit('should throw an error', function(){\n    return  expect(myContract.throwsError({from: account[0]})).to.eventually.be.rejected;\n}\nClosing, thanks.\n. @k-misztal This is a key part of a refactor of the artifacts format we have scheduled for this summer, but work on that is just beginning. It will probably be a couple months before Migrations supports this. . @vkantchev You should be able to completely disable timeouts by setting a mocha key in the config as below: \njavascript\nmodule.exports = {\n    networks: {\n        development: {\n            host: \"localhost\",\n            port: 8545,\n            network_id: \"*\",\n        },\n        .. etc ...\n    },\n    mocha: {\n        enableTimeouts: false,\n    }\n}\n. @benjaminmbrown We've just started publishing an experimental build - truffle@byoc - which automatically pulls down any compiler you'd like from solc-bin. You just have to set a key in the truffle.js config specifying the version. \nUsage docs\nInstall\nnpm install -g truffle@byoc\nIt's current with 4.1.12 - please report its bugs :). @JackPickering Could you update to the latest Truffle and test with that? The current migrations logic looks like this:\n```javascript\nMigrations.deployed().then(function(migrations) {\n      // Two possible Migrations.sol's (lintable/unlintable)\n      return (migrations.last_completed_migration)\n        ? migrations.last_completed_migration.call()\n        : migrations.lastCompletedMigration.call();\n}).then(function(completed_migration) {\n  callback(null, completed_migration.toNumber());\n}).catch(callback);\n\n```\nIt looks like you're trying to run a newer version of the migrations contract with an older version of truffle which doesn't support it.. @JackPickering The new logic is at truffle-migrate where the migrations are processed. There are now two possible versions of the standard migrations contract - the original and a newer one that follows the Solidity style guidelines and camel cases the variable names. It's installed when anyone starts a new project from scratch with truffle init.\nThe ABI you showed indicates the compiled contract you're interacting with is the newer version:\n{ \"constant\": true, \"inputs\": [], \"name\": \"lastCompletedMigration\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ],\nIs Petshop the project you're working on? \n. @tomerweisman Here's an example that tells mocha to consume a third-party reporter. Equivalent to:\nshell\nmocha --reporter <reporter-name> --reporter-options <options>\njavascript\nmodule.exports = {\n  networks: {\n    ...etc...\n  },\n  mocha: {\n    reporter: 'super-test',\n    reporterOptions : {\n      extraEmojis: false,\n    }\n  }\n};. @maraoz I hesitate to leave a closing comment here since it's been ~55 weeks since you opened this, but this is now available on 4.0.7. Thanks for suggesting, a great idea as always :) Best. . @travs This is available on 4.0.7 :) Thanks so much for suggesting it, hope you're well. . Just leaving a note for further reference here, work was done over the summer at web3 1.0 to address the Parity instant seal issue in this PR. @vicnaum Are you using VS Code? If so the problem is documented at #756 with a solution. . @kieranelby Have opened an issue in solidity-parser to get this fixed.. This should be resolved at solidity-parser now . . . just needs publication there / dependency updating here. . Closing this - possibly resolved at solidity-parser - but we're removing the last vestiges of SP anyway.  . Closing for housekeeping. Hello all, thanks for reporting. This is an issue at the web3 dependency and relates to decoding dynamically sized solidity data types. At the moment, they're not indexable. More discussion on this topic at issue #728.. We're on mocha 5 as of 4.1.12 @rstormsf. Just sweeping through the issues and closing this one for housekeeping. Hope you don't mind, thanks.. @Levino How are you using the provider engine? Through a Wallet Provider? \nAt the moment we address this within truffle by running process.exit at the end of a command. And Web3 1.0 has just added a way of closing the provider in beta.36 so that should be available soon for Truffle V5 as well. . @cag No no no. Completely deferring to your good judgement here. We were talking about this this morning and thought that you're probably in the best position to know what's needed because you have a real use case. \nI'm just eventing out the migrations so that they can have reporters and be made interactive, more informative, etc. And use async/await more intuitively.  \nThis work sound quite close to artifact level stuff that @gnidan is working on, which inevitably touches migrations. . . \nAnyway awesome! Thank you. . @cag Ok awesome! Will  check this out this week . . .. Hi @cag oh cool!\nI'm lagging really bad here sorry - I wanted to leave you a note because there's a bit of chaos coming down the line this week: \n+ we're moving the whole truffle project back into one repo (using Lerna, on wednesday). As part of that - I'm going to merge all of your work into staging branches that will carry over into the new format.\n+ we're planning a beta release for Truffle V5 at the end of the month, and was thinking that this work would ultimately target that branch (next). Are you ok with that? V5 will have some breaking changes because it upgrades web3 - might be kind of annoying. But your changes also fit really well with the Migrations rewrite which is part of it.\n+ Finally, there are some files where there will be conflicts - as soon as the ongoing migrations work is merged into next here, I'm going to resolve those and get this stuff re-opened as a single PR and ping you. \nSorry about the mayhem and thanks so much this work -  it's going to be really really cool to have this. \n. @elenadimitrova Coincidentally saw a possible solution to this yesterday here. \nIt's a library that decodes logs for what the author calls 'deep events', using the data on the receipt and knowledge of what contracts are interrelated. Usage looks like this (from their docs):\n```javascript\nvar truffleAssert = require('truffle-assertions');\nvar truffleEvent  = require('truffle-events');\n// code omitted for brevity\nit(\"Foo#doSomethingExtra\", async function(){\n  var fooScope = await f.doSomethingExtra(b.address);\n  var barScope = truffleEvent.formTxObject('Bar', 1, fooScope);\ntruffleAssert.eventEmitted(fooScope, 'LogNumber', (ev) => {\n    return ev.number == 100;\n  });\ntruffleAssert.eventEmitted(barScope, 'LogAlphabet', (ev) => {\n    return ev.word == \"Hello!\";\n  });\n});\n```\nWe've talked about developing a global registry within Truffle and it's seemed like the appropriate place is at the artifact level. A rewrite of that is scheduled for late summer / fall so it will be a while before there are any real developments there.. Tracking this at #713, thanks for opening.. Hi @elenadimitrova Apologies for closing this early, it looks like we accidentally used the word 'fixed' in a merge commit. @gnidan is optimistic that a recent PR has resolved this - it should be available on 4.0.7. Please re-open if it keeps happening and thanks for reporting!. Thanks @Levino - re-opening. \nTruffle has a nightly experimental build which uses web3 1.0.0-beta.33 under the hood. You can install it by running:\nshell\n$ npm install -g darq-truffle@next\n$ darq-truffle --migrate --network ropsten # Example command \nUsage notes here\nIf you have a chance could you try connecting over https with that version?  \nNB: we're now encouraging people to wrap providers instantiated in truffle.js in a function closure (as shown here) in order to prevent multiple connections from being opened when Truffle launches, since that's been causing some unusual behavior. . @tonymanpro Thanks for opening, I'm closing this for housekeeping. We're a full version ahead of 3.0 now, and your issue relates to running in a cloud - we routinely run on CI services like Travis and Circle without issue - not sure what's special about App Engine.. @smoove With 4.0.6, Truffle's using solc to parse all solidity files. These mysterious messages should no longer appear :) \nThanks for opening.. @nikita-fuchs @amosjyng truffle-debugger on 4.1.5 contains some significant improvements - worth checking out! Closing this for house-keeping because it refers to a much earlier incarnation of the tool.. @mcdee - @ByKraB is correct, you could resolve this by using a relative path to the zeppelin-solidity contracts in node_modules. You should also be able to use this form:\njavascript\nimport \"zeppelin-solidity/contracts/ownership/Ownable.sol\";\n@evgen-povt: Out of curiosity:\n+ where is the file which contains the import statement?\n+ where is the file you're trying to import?\n. @evgen-povt Could you see if importing like this works?\nimport \"./<filename>.sol\";. @evgen-povt Is it possible there is a typo in the import statement somewhere, perhaps a letter that should be capitalized? Could you look at it carefully or reproduce exactly what the statements are here? The fact that it works for one file and not the other suggests something might be wrong with the one it doesn't work for.. @evgen-povt Apologies but I'm unable to reproduce this using the default Truffle project metacoin on Truffle 4.0.5. I ran truffle unbox metacoin. Then added two simple contracts to the contracts folder:\nAnotherImport.sol\nAnotherImport2.sol\nThen I imported them into MetaCoin.sol as below:\njavascript\nimport \"./ConvertLib.sol\";\nimport \"./AnotherImport.sol\";\nimport \"./AnotherImport2.sol\";\nThen I invoked the imports via new in the MetaCoin constructor as below:\njavascript\nfunction MetaCoin() public {\n    balances[tx.origin] = 10000;\n    address a = new AnotherImport();\n    address b = new AnotherImport2();\n}\nThen ran truffle test. Everything works as expected. \n@evgen-povt Please link to a working project that provides a minimal example of the error. Closing this for now because the original poster's issue seems resolvable given the information they provided. \n[EDIT] @evgen-povt Please feel free to open a separate issue with reproducible steps and I will happily look into it. Thanks!. @wighawag Do you have a reproduction step? Also could you report your truffle version? \nWill happily re-open this if we can verify it's happening again - would really like to squash any bugs here.. @evgen-povt Thanks for pinging this. What version of truffle are you using? Is there any way you can give me a way to reproduce this duplicates  relative/absolute case? I'd really like to make sure that's not happening.. @chuacw @DeRain @JackPickering Truffle had a bug that accidentally limited the wait time to 4 minutes. It's fixed in the latest release. \nUnfortunately, while looking into this issue, it's been discovered that that web3 has it's own hardcoded wait limit: 50 blocks. (Code here). \nFor the moment anyway, to be mined via web3 (which Truffle uses), you'll have to set your deployment gas price high enough to get picked up within 50 blocks.\nClosing, thanks for reporting.. @AlvaroLuken We think we've finally squashed this bug in 4.1.5.  If you're seeing the error after deleting the build folder (which you shouldn't have to do anymore) it's likely there is a problem with the way you are calling a function (e.g. you're not passing the correct arguments). Could you provide any more info about what code is triggering the error?. @AlvaroLuken Thanks, I will have a look at this first thing tomorrow morning. Is there any chance you could show the QuestionBounty contract definition so I can debug and see what's going wrong here? It doesn't have to be the whole contract - just the top is fine.\n[EDIT] Just to double-check, is it possible you have defined a migration for QuestionBounty that is missing the constructor arguments?. @AlvaroLuken In the migrations file you sent, QuestionBounty is deployed like this:\ndeployer.deploy(QuestionBounty)\ntruffle test runs your migrations in order to make a deployed version available in the test context. If QuestionBounty requires constructor params and it's referenced in the migrations, it will be necessary to pass them in with the deploy function. The syntax is: \njavascript\ndeployer.deploy(<contract>, <param_1>, <param_2>, ...)\nThere's more on the Deployer API here.. @oddmarthon-lende Apologies for the delay in getting to this - I wasn't able to reproduce this issue. When I look at the two images you provided, it seems like the data values are different for several fields in the return object which suggests the issue might be a difference locally - different versions of the same contract perhaps? \nBrowser\n\nConsole\n\nClosing this for house-keeping since it's been open for a while but please re-open if you're still seeing this unusual behavior with the latest Truffle.. @karalabe @izqui \n@gnidan and I looked at this issue this morning and were wondering if either of you could analyze it further with us. The relevant code at truffle is here. It's a callback passed to web3's myContract.myMethod.sendTransaction. @karalabe is correct that it patiently waits for the transaction to be mined, but shouldn't this callback be fired as soon as it's mined? \nHave written a small node script for web3 that reproduces the Truffle sequence and am wondering if someone can run it against geth insta-mine to see if the issue is here or elsewhere? Or arrive at a clearer understanding of it anyway.... Thanks! Apologies for the delay addressing this. \n```javascript\n!/usr/bin/env node\nconst solc = require('solc');\nconst Web3 = require('web3');\nconst web3 = new Web3();\nweb3.setProvider(new web3.providers.HttpProvider('http://localhost:8545'));\n// Compile\nconst source = `\n  pragma solidity ^0.4.18;\n  contract Simple {\n    uint x;\nfunction set(uint val) public {\n  x = val;\n}\n\n}`;\nconst input = {\n  language: \"Solidity\",\n  sources: { \"Simple.sol\": { content: source } },\n  settings: { outputSelection: { \"\": { \"\": [\"abi\", \"evm.bytecode.object\"] } } }\n};\nlet output = solc.compileStandard(JSON.stringify(input));\noutput = JSON.parse(output, null, ' ');\nconst abi = output.contracts[\"Simple.sol\"][\"Simple\"].abi;\nconst bytecode = \"0x\" + output.contracts[\"Simple.sol\"][\"Simple\"].evm.bytecode.object;\n// Deploy\nconst Simple = web3.eth.contract(abi);\nconst deployment = Simple.new({from: web3.eth.coinbase, gas: 1000000, data: bytecode});\nconst deploymentReceipt = web3.eth.getTransactionReceipt(deployment.transactionHash);\n// Set a value with sendTransaction\nconst instance = Simple.at(deploymentReceipt.contractAddress);\n/\n  truffleMethod.set(5) is like the sequence below. On ganache which also instamines,\n  the tx hash is immediately returned in the callback and it's possible to fetch it with\n  getTransactionReceipt. On a real client Truffle retries the getTransactionReceipt step\n  once a second for ~4 minutes (unless configured otherwise). The hang must come from\n  that. On geth instamine, when is this callback fired?\n /\ninstance.set.sendTransaction(5, {from: web3.eth.coinbase, gas: 90000}, function(err, tx){\n  const receipt = web3.eth.getTransactionReceipt(tx); \n})\n``` . @cpurta Thank you that's helpful. Will be looking into this further. . . .. @karalabe @cpurta \nIt looks possible that @karalabe's initial hunch about the cause of this problem is correct but the filter is being set at web3 here and here on contract creation. When I comment out the sendTransaction lines in the script above and modify it to target the new callbacks, e.g\n```javascript\n// Deploy\nconst Simple = web3.eth.contract(abi);\nSimple.new({from: web3.eth.coinbase, gas: 1000000, data: bytecode}, (err, instance) => {\n  if (err) throw new Error(err);\n  if (instance && !instance.address){\n    console.log('first cb fires: txHash -->' + instance.transactionHash);\n  } else {\n    console.log('after filtering for latest: contract address --> ' + instance.address);\n  }\n});\n```\ngeth hangs at the first log line. ganache-cli fires the callback twice as expected although not sure if this is the luck of latency or something else. \nThis shouldn't be an issue in web3 1.0 which uses EventEmitter instead of a double callback. Web3 1.0 is in Truffle's sights although it will likely come as a breaking release (possibly in the spring). \n@karalabe Do you have any views about the correctness of the diagnosis above or how to proceed here? Some ideas:\n+ geth introduces optional latency to be backward compatible with original web3 \n+ web3 inverts it's order, setting up the filter and running the tx within that callback. \nOpen to anything.. NB: Merged PR from July 2017 fixing web3 1.0 to work with parity client's instant seal.. @cpurta Revisted this and found the following: Using Truffle's example MetaCoin project, if I run geth with the dev.period option enabled:\ngeth --dev --dev.period 1 --rpc --targetgaslimit 0x6ACFC0 // <-- 7000000 gas\nand a Truffle network defined as:\njavascript\nnetworks: {\n    geth: {\n      host: \"127.0.0.1\",\n      port: 8545,\n      network_id: \"*\",\n      gas: 6300000,\n    }\n  }\nthen both truffle migrate --network geth and truffle test --network geth succeed. \nDoes enabling the dev.period flag present problems for your use case? Otherwise it seems like we might have overlooked something simple here.\n. @cpurta Great! No problem at all, really enjoyed it - geth --dev is fast. Going to close here and track the Parity issue at #389. \n[EDIT] Actually I take that back - it was fast running the metacoin tests, but I looked at Zeppelin and tests are failing (not sure why) / it seems to run at quarter speed as well. . Hi @karalabe apologies - \nWe've started running part of truffle's own test suite in CI with geth using --dev --dev.period 1 and the next version of Truffle (truffle@beta) should be able to run without the period flag because the underlying issue has been resolved in web3 1.0.  \nWill update our test scripts to verify that is case.\n. @karalabe Small update here . . . have opened a PR to run truffle's integration and contract wrapper tests with insta-mine. With an http provider It works (and it's fast).\nHowever, if web3 connects to the client over websockets, there are occasional non-deterministic failures I can't isolate the cause of. Do you have any advice about this? Do you believe the issue is on the web/truffle side or are there known problems with the websockets at Geth?. @DaneWiid1 I think this might be a duplicate of #624, and am going to track the issue there. If you're still having problems running tests and you're not using Geth / Parity, please re-open. Thanks!. Closing as duplicate of #638. @illuzen Apologies for this - believe it's fixed in 4.1.5. Thanks for reporting.. @ismaelbej Thank you for noting this, closing here in favor of #501..\n@dzentota @mhchu \nThe deployer stages deployments rather than running them at the execution time of the migration function. It's possible to use async/await within its context but ultimately you also have to follow the deployer's interface by returning a promise to its .then property. More guidance on this at the other issue here. @dzentota Could you share the code from your migrations that's not working?. @dzentota The example @Velenir gives in this issue above is the model you should follow. If you want to run async logic in the migrations you must return it as a promise to the deployer method. In your case, \njavascript\nmodule.exports = function (deployer) {\n  deployer.then( function() {\n     return Crowdsale.deployed() .... etc ...\n);\nAdditionally make sure you return everything async in the promise chain. For example the deployer.deploy in your final clause should also be prefaced with a return. \n. This feature is included in an upgrade to web3 1.0 now available as an experimental nightly build here: darq-truffle@next. \nshell\n$ npm install -g darq-truffle@next\n$ darq-truffle test # Example command\nUsage docs here\n. Tested this on 4.1.5 and it seems to be working. Closing.. @chevdor Apologies, could you provide any additional context or information - for example your truffle.js? Is the project you're working on public? \nThere was quite a bit added in the 4.0.6 release - if you've managed to isolate that as a source of problems it would be nice to resolve them. . @nonsenseless @onetom Thanks for reporting. Truffle had a bug that accidentally limited the wait time to 4 minutes. It's fixed in the latest release. \nUnfortunately, while looking into this issue, it's been discovered that that web3 has it's own hardcoded wait limit: 50 blocks. (Code here). \nFor the moment anyway, to be mined via web3 (which Truffle uses), you'll have to set your deployment gas price high enough to get picked up within 50 blocks. \nLeaving this open until it's possible to configure deployments waits somehow.. NB: Possible workaround to this in an issue comment here at web3. Author is using web3 1.0 and intercepts the 50 block error via the once event emitter, then continues to poll for the transaction receipt themselves. (This suggests the problem persists in latest web3.) \nIf truffle took this approach it would need to replicate web3's behavior following resolution of the contract address here before returning the instance. . @faizanahmad055 This is a chronic problem everyone is facing using web3 given current network conditions. The only known solution is to increase the gasPrice of the transaction to make it more attractive for miners to pick up, or to wait for periods of low network congestion to deploy. \nThe error is a hard-coded limit in web3 whose intent is to stop transactions from hanging indefinitely. \nAlso important to note is that while web3 and truffle crash here - your transaction has still been transmitted and may actually be mined at some point. You can grab the transaction hash from the output and check its status on Etherscan to see what it's actual status is\nWe're quite close to publishing a re-write of the migrations command that will end-run this error and allow you to set an arbitrary number of blocks to wait for a transaction. Will ping this issue when that work is available in beta form. . . . Hi @dwalintukan - I know this issue is from a while ago, apologies for the delay in responding.\nI've reproduced this by naming any solidity function toString and trying to await it's resolution in javascript. Not sure what the mechanics of the hang are, but toString is a prototype property of JS objects so there's some kind of naming conflict here as we cross the boundary from one language to another. \nHope you don't mind but I'm re-naming your issue to reflect the underlying problem. . @sarthakmis Closing this for house keeping but please re-open if you continue to have difficulty with this.. Hi @beshogun, @kingcocomango  Are you still seeing this issue on the latest Truffle (4.0.4) using the develop command (or in any other context?) Just starting out the Truffle team today and looking at few bugs . . . \nI've generated some .DS_Store files in the contracts and tests folders (organically, by moving files via the UI) and then run through most of Truffle's commands, and done the same in the develop context. It's not crashing for me.. @SephirothLT Hi. Which truffle version are you using? Could you run both:\nnpm list -g truffle\nnpm list truffle . Closing for housekeeping, but please open or open a new issue if anyone continues to see this.. @veebuv Thanks for reporting, re-opened and looking into this again. Could you provide some steps to reproduce this? Which command are you running when the error is triggered?. @veebuv Closing since it seems like you might have resolved this on your own. Please feel free to comment here if you're still seeing this and can show us a way to reproduce it.. @rhlsthrm Believe this is fixed with 4.1.5. Please re-open if you continue see it happen.. @arunmitteam We think this bug has been fixed in 4.1.5. Closing for housekeeping, if anyone sees this again please ping.. Believe this is really fixed in 4.1.5. Closing, please re-open if you see this again.. @frangio Are you seeing this when trying publish Zeppelin itself, or when trying to publish something that imports contracts from an npm installed Zeppelin? Or from ethpm installed Zeppelin?\nThere is a recent fix for this that's pending release (early next week) but it really only addresses the case of contracts that rely on ethpm dependencies.  \nIf you have reproduction steps for the Zeppelin case, will investigate.. @frangio Yes I can see it failing and see why in the code as well. We'll try to fix this ASAP, thanks for pinging this. . @alex-miller-0 @frangio This should be fixed in 4.1.5. Please report back if you continue to see this or have other issues publishing to ethpm. \nThanks!!. @aligokalppeker Sincere apologies - I believe the bug you're facing affect Windows users running Solidity tests only and can be worked around by using 4.1.4 instead. We should be publishing a patch that fixes this tomorrow. If you're seeing a different problem please let us know.. Thanks for reporting this @JohnAllen - should be fixed in the docs with this PR. The MetaCoin project has migrated to its own box and is installed with: truffle unbox metacoin. \ninit is just a clean, blank project template now. . Hi @animesharya Closing this for housekeeping but please re-open if you're still having difficulty with this. Thanks!. @eloudsa We think this has been fixed in 4.1.5. Closing for housekeeping but please re-open if you see this again.  Thanks for reporting!. @facuspagnuolo Thanks for opening this and apologies for the delay in resolving - Truffle was using a deprecated JS parser to manage the way solidity tests are sequenced. That's been replaced with solc in the lastest release 0.4.6. You should be able to write anything that's legal in your tests now :) \nThanks again. . Hi @JohnAllen - apologies for the delay in addressing this interesting issue. One way to do this is to write a small fixture which executes methods that throw conditionally within Solidity as a call. For example, if Truffle's MetaCoin example looked like this:\n```javascript\ncontract MetaCoin {\n    uint maxSend = 5000;\n        ... etc ...\n   function sendCoin(address receiver, uint amount) public returns(bool sufficient) {\n    require(amount <= maxSend);\n            ... etc ...\n   }\n\n}\n``` \nYou could test that sendCoin errors when amount > 5000 using mocks in TestMetcoin as below:\n```javascript\n// A little utility that runs a wrapped method invocation as an internal Solidity call\n// Returns true if the underlying call succeeds and false if it throws.\nfunction execute(string signature) internal returns (bool){\n    bytes4 sig = bytes4(keccak256(signature));\n    address self = address(this);\n    return self.call(sig);\n  }\n// Wrap the call to sendCoin. Wrapping lets you perform complex setups for arbitrarily \n// parameterized methods while keeping a simple function signature to pass to \n// execute above\nfunction sendsTooMuch() public {\n    MetaCoin meta = MetaCoin(DeployedAddresses.MetaCoin());\n    meta.sendCoin(address(0), 5500);\n}\n// Test the failure case\nfunction testSendLimitExceeded() public {\n   Assert.isFalse(execute('sendsTooMuch()'), \"Should fail over limit\");\n}\n```\nThere's a good discussion of .call at Ethereum StackExchange here. It might be helpful to add some notes about this topic to the advanced solidity testing documentation at Truffle. \n. There's also a link to a great blog post about this topic by Simon De La Rouviere in the advanced solidity testing section of the docs. His approach is slightly different and more elegant than the one above - well worth a read. \nClosing because it looks like the docs cover this question.. @stefanionescu This issue has been open for a while and looks like it's specific to your crowdsale implementation rather than something going wrong at Truffle as such. Closing for house-keeping but please feel free to re-open if you continue to have problems with this. Thanks!. @fabricetriboix Hi. Here's a guide to using asynchronous methods in Mocha. I think you should be able to get the correct execution if you return the promise to mocha, as below:\njavascript\nit('waits for everything to resolve', function(){\n  return myAsyncMethod().then(function(){\n      return anotherAsyncMethod().then( .... etc .. \n}) \nAnother approach is to use Mocha's done function, which can be passed to the test like this:\njavascript\nit('waits for done to be called', function(done){\n  myAsyncMethod().then(function(){\n     console.log('hello!');\n     done();\n  });\n}). @fabricetriboix Closing this for housekeeping, it's been open a while. Please feel free to re-open if you're still seeing this problem. Thanks!. @ZitRos Agree - we're actively working on this for the next release. In my view the issue here is semantic confusion caused by changes in JS norms around async. (Migrations was written before await became standard). \nI'd rather not re-open just because it's not a 'bug' per se - it's super counter-intuitive behavior relative to await and an interface design problem we'll need to address in the next iteration of the tool.   . @ZitRos truffle is on Node 6.9.1 which doesn't support await. There may be a simple fix with conventional promises as well but unfortunately to address this in the current release we need to do it in a way that is backward compatible and doesn't assume people are on latest Node. The solution will need tests for the new behavior and will need to accommodate the existing use pattern. \n[EDIT - I just realized - even testing this is going to be an issue because of 6.9.1. I think we'd have to target a higher node version in CI or start using babel - that's something that we've been discussing for the next release.]\nYou're more than welcome to work on a PR - thank you! There's a guide to setting up truffle for development here you might find useful. . @ZitRos Right, ok excellent.. @ZitRos I'm not certain about this, apologies. I need to look at the code a bit. . . .. Re-opening.. Hi @roderik, thanks for this report! \nWill investigate - at a minimum it looks like Truffle is hard-coding the Migrations.sol path internally here. @gnidan actually just picked this out as potentially problematic in a code review of a Migrations re-write referenced in the link above, although I'm not sure I understand why the resolver isn't handling this correctly. \nI will add a regression test for this and make sure it's fixed in the new version. . @Levino Agree, this has been the source of confusion for a while. \ntruffle@beta includes a fix for it. The migrations can now be written  using async/await and behave more a little more intuitively:\n```javascript\nconst One = artifacts.require(\"One\");\nconst Two = artifacts.require(\"Two\");\nmodule.exports = async function(deployer) {\n  await deployer.deploy(One);\nconst one = await One.deployed();\n  const value = await one.value();\nawait deployer.deploy(Two, value);\n};\n```. Hi @tillkolter. This is an interesting issue. Thanks for opening and apologies for the delay in responding. (There's more on this topic in the advanced features section of the Solidity testing docs.) \nTruffle does some magic behind the scenes of the Solidity tests to make ether available in the Test contracts. If you declare a uint public initialBalance at the top of any test, you'll be able to fund other contracts and send eth around as shown below. \nYour specific question related to funding a contract on creation and that case is covered last in this example - but have included some other send cases for clarity.\nIf we have a Payable contract:\n```javascript\ncontract Payable {\n// Constructor which allows us to fund contract on creation\nfunction Payable() public payable {\n}\n\n// `fallback` function called when eth is sent to Payable contract\nfunction () payable {\n}\n\n}\nWe can write the following test:javascript\npragma solidity ^0.4.18;\nimport \"truffle/Assert.sol\";\nimport \"truffle/DeployedAddresses.sol\";\nimport \"../contracts/Payable.sol\";\ncontract TestMetacoin {\n// Truffle looks for initialBalance when it compiles the test suite \n  // and funds this test contract with the specified amount on deployment.\n  uint public initialBalance = 10 ether;\nfunction testSendingEther() public {\n// The `this` contract (e.g. TestMetacoin) should have a \n// starting balance of 10 ether \nAssert.equal(this.balance, 10 ether);\n\n// A new Payable contract has a zero balance\naddress pay = new Payable();\nAssert.equal(pay.balance, 0);\n\n// Send `pay` 5000 wei (it's being sent by `TestMetacoin`).  Wei is the default\n// denomination in Solidity if you don't specify another unit \npay.send(5000); \nAssert.equal(pay.balance, 5000 wei);\n\n// We can also fund a contract on creation. Solidity's syntax for this is a \n// little unusual :) If the `Payable` contract's constructor took arguments, \n// they would go in the final parentheses attached to the new expression.\naddress anotherPay = (new Payable).value(1 ether)(); \nAssert.equal(anotherPay.balance, 1 ether);\n\n}\n}\n```\nClosing for house-keeping because Truffle's solidity-testing ether mechanism appears to be working correctly. Thanks again for raising this question.. @aberger91, @elliotthill is correct - Truffle requires Node 6.9.1 or higher. \n@mshadab-adeptia It looks like this problem has been resolved recently over at NodeJS. Their issue closed 16 days ago (just a few days before you're last comment). \nHopefully you'll be able to get around this by re-installing Node. \nClosing because it looks like the underlying problem is upstream from Truffle. Please re-open if you find this is not the case and thanks for reporting. . @krabradosty Thanks for identifying that bug! It's fixed in the latest release. \nUnfortunately, while looking into this issue, it's been discovered that that web3 has it's own hardcoded wait limit: 50 blocks. (Code here). \nFor the moment anyway, to be mined via web3 (which Truffle uses), you'll have to set your deployment gas price high enough to get picked up within 50 blocks.\nClosing, thanks for your help.. @hickscorp Thanks so much for all your work on this issue, much appreciated. \n@starlabs007 Beginning investigation now. . . . truffle-contract 99 contains a small fix for this. \nNot sure when our next patch release will be but should be resolved then.. @ericwooley I didn't close and FWIW am in favor of re-opening until we publish the fix. It's @hickscorp's issue. [EDIT] I DID close it, sorry mistake. Wrote the wrong words in the commit message I guess.. @lerer00 There's a fix for this at truffle-contract 99 that should be released next Monday.. 4.0.7 is out and there's a confirmed success deploying with Geth 1.8 to Rinkeby from Gitter. There's also a confirmed 'having problems' on Ropsten. Feel free to report any developments here or on Gitter. We're also releasing tomorrow so if the current fix doesn't work, we'll have a chance to update it and try again shortly.. @hickscorp Closing because we think this is fixed in 4.0.7. Thanks again, and please re-open if there's a problem. . Small update: This is fixed at Geth as well as of 1.8.2 (released this morning). Geth no longer errors with 'unknown transaction'. . Hi @elie222. I can't reproduce this issue. When I install truffle globally and run truffle version I see:\nTruffle v4.0.4 (core: 4.0.4)\nSolidity v0.4.18 (solc-js)\nand I'm able to compile contracts that use pragma solidity ^0.4.18. Are you still seeing this problem?. Thanks @elie222! Closing.. @JackPickering Agree this is a problem and that the message coming back from the client is uselessly cryptic. Not sure there is a straightforward fix for this other than enumerating the known causes of the error (there are many, unfortunately) in our reporting. \nHave opened an issue at truffle-migrate that covers this general topic and am linking back to this one. Closing here in order to track everything there. \nThanks for taking the time to articulate the cause of this error so clearly, likely very helpful to other users. . Hi @timothywangdev! @JackPickering is correct. You can see some nice examples of the beforeEach pattern he's describing at the Cryptokitties contract repository here.\nBy design Truffle resets the state or \"reverts\" between each contract suite - e.g. each block of tests wrapped in Truffle's contract test abstraction.  \nClosing because this is intended behavior. . @selfresonator Could you share the event definition that's triggering this error so we can try to reproduce this? . Congratulations on your first issue!!! That's fantastic. Your report is lucid and concise, so high marks all round. \nTo me it looks like the problem is that you're passing a function as a parameter to .getElection. But in the develop console you should be able to do this:\n```\n\nElections.at(\"0x2a50...\").getElection()\n.... transaction object should appear here .... another approach is:\nvar result\nElections.at(\"0x2a50...\").getElection().then( val => result = val )\nresult\n.... another transaction object ...\nresult.logs[0].args\n{ name: 'self', description: 'resonator' }\n```\n\nDoes that work?\n[Edit] Also thank you for linking to the indexed issue, that's super helpful. \n. @v-lukanin I think @selfresonator is correct that this behavior for dynamically sized solidity datatypes is expected. Just reproducing the (excellent) StackExchange discussion of this issue here for anyone else finding this issue:\n\nThe combination of string and indexed does not work. To understand why, see how event arguments are stored in the blockchain.\nAll transactions that are executed generate a transaction receipt, which contains a property called logs. You can look up the receipt using eth.getTransactionReceipt(\"0x...\").\nIn the transaction receipt, all event arguments that are not indexed are included in the data property. This property can hold values of arbitrary length. However, event arguments that are indexed are not stored in the data property, but end up in topics. This allows filters to work.\nFor fixed size arguments types this is ok. The size of the entries in topics is long enough to hold all fixed types supported by Solidity. However, string can have an arbitrary length. To still be able to store those values in a topic, Solidity creates a hash of the value, which ends up in the topic.\nThe upside is that filters can still work, since you can just create the hash of the value you're filtering for. The downside is that web3 is unable to decode the value, since that would require performing the hash function in reverse direction.\nTo solve this problem, you have two options. You can remove indexed from the argument, so it is stored in the data field and no longer hashed to become part of a topic. Or, you change the type of the argument, e.g. into bytes32 or another. Which is appropriate depends on your case.\n\nClosing for housekeeping. . @v-lukanin Just saw this, reopening.. @v-lukanin It looks like it's at the web3 level - there's a recent comment on this subject by web3's maintainer here and they are working on a solution for web3 1.0. \nThe underlying issue seems to be about decoding.\nPlease let us know if you feel that Truffle should do something for this case, and leaving this issue open for a bit in case there are possible solutions.. @v-lukanin Apologies but I'm going to close this again for house-keeping. The error comes from one of our dependencies and is a long-standing issue there. Hopefully there will be a resolution in the future.. This issue has been open for a while and looks a lot like the non-deterministic ganache bug which @benjamincburns fixed recently. Downloading the latest ganache-cli (read the release notes!) should resolve this problem.\nClosing but if anyone continues to see this error please re-open or comment. Thanks for reporting.\n. @nickjm Could you provide context (what are you doing in your code) or a reproduction path? A stacktrace might also be helpful.. @barakman No, everyone's seeing it intermittently, AFAIK it predates recent work to stabilize the test client and it's possible that it's related to  issue 453 at ganache-cli which is under bounty and currently being worked on. There's more detail over there if you're interested. \nUnfortunately this looks like (as @benjamincburns would say) a heisenbug. If anyone finds a consistent way of reproducing it they will be  greeted with delight. \n. @barakman Ahhh!! That's pretty good isolation of the problem. It could be something in the script you identified. Could also be related to the test execution that precedes it.\nIf there's any possibility of having another set of eyes look at the codebase, we'd definitely be interested.. @barakman Ok great, thank you. One thing about testrpc-sc is that it's much slower. If the underlying issue is a race condition, testrpc-sc could be introducing delays that mask it. Another important difference is that it uses an older version of ethereumjs-vm (from the fall). Possible clue there too, although have been seeing these disconnections all year. . @barakman Great!! Thank you. Going to open a companion issue over at ganache-cli and will talk to @benjamincburns about this and get his input. . @barakman Agree it seems like disconnections happen at the 'seams' of the suites where the  hooks are.  The code at truffle-core here that sets up the 'contract' suite looks to me like it safely binds hooks within a describe and executes them asynchronously via Mocha's done callback.  Do you see another place where they might be invoked?\n . @barakman Hmmm....that's a nice observation about `after` - I wonder if that's causing problems.. @barakman Thank you. . . this analysis is really helpful.\n\n\nIs it possible that somewhere in ganache-cli code, the payload is initialized but the result is not? \n\n@benjamincburns Does anything jump out at you as a possibility in the preceding three comments?. @barakman Just talked to @benjamincburns about this and he thinks it's ok. Have published an experimental truffle build which removes the eth_getLogs attempt in truffle test. If you have a chance could try running your suite with it and seeing if it makes any difference? Maybe we can isolate this problem to that call.\nnpm install -g darq-truffle@barakman\ndarq-truffle test # Example command\n. @barakman Yes, I'm hoping that that's because the calls are getting queued over there or something. This is kind of a shot in the dark with a low likely-hood  of success sorry. . @barakman Oh good question - the compiler is 0.4.23. If your pragmas use a caret you should have no problem. But if there's an issue let me know and I will republish with a build that lets you use any compiler you want. . @barakman Was just looking at your original reproduction case and noticed that the describe is async. Mocha doesn't support async for describe unfortunately. If you have a chance could you check and see if that occurs anywhere in the suite you're running? You can just change those to regular function to make sure they're running/resolving in strict sequence.. @barakman Agree - I'll look into how to disable those for debugging . . .. @barakman Locating the problem here is a huge discovery, thank you. Ganache and Geth are very far apart from a code-base standpoint so I think this means the issue is very likely on this side. The code you've referenced is at web3. . .  \nLink for future reference. @barakman We bundle all of our dependencies together and one is web3 - I'm just noting the location so we know where to investigate. I'm not sure about what to do... I'd guess I'd like to look at the values coming through that block and understand this better. What states trigger this crash?\n\nAs long as request.status == 200, the responseText is a valid JSON RPC.\nOnce request.status == 0, the responseText is empty (hence an invalid JSON RPC).\nMost likely, you need to ensure both request.readyState === 4 and request.status === 200.. @barakman Excellent, thank you!. @barakman RE: duplicate bundling - yes, that's likely happening. Web3 is widespread and not consistently versioned - have fixed this for the work we're doing on Truffle V5. \n\nCan you tell approximately what the cap on the number of requests is? ~15,000? . @barakman Great work! So glad you got that suite running.\nWas also googling around about this yesterday and saw a thread that suggests another possibility is to pass a special header into the request telling it to close the connection when done, since the default behavior for HTTP is keep-alive. Example:\nvar options = {host: 'graph.facebook.com',\n               port: 80,\n               path: '/' + fb_id + '/picture',\n               headers: { 'Connection':'Close' }\n};\nThe relevant web3 code is here.\nTruffle invokes that constructor at truffle-provider here. If the problem can be addressed by adding headers there we'd be able to fix this directly. \nIf not it's quite a bit more complicated - web3 is a library written and maintained by the Ethereum Foundation. We consume (rather than write) it and it's non-trivial to get the code changed there (for good reason since that code drives much of the Ethereum JS eco-system). \nIf you're still investigating this and have a chance, could you see if setting the headers that way also resolves this? . @barakman Ah no, sorry I don't - I guess that's a dead end. Hmmmm.. @barakman Which version of truffle are you using?  I will track that down and if this can be fixed by normalizing web3 versions will do that ASAP.. @barakman \n\n\nWeb3 has introduced the use of XHR2 some time ago.\nWeb3 has revoked the use of XHR2 some time ago.\n\n\nUnfortunately it looks like case 1 is true. XHR2 is used in the latest web3 0.x as wells as web3 1.0. Have also tried running your reproduction case using web3 1.0 over websockets without luck. . .  \nThis issue raises questions about whether web3 / truffle / ganache are really suited to running simulations with tens of thousands of calls. There might be significant value in building a tool that ran tests directly on top of ethereumjs-vm, or perhaps inside ganache, avoiding http overhead and other constraints.. @barakman Thanks so much. The workaround you've proposed seems reasonable to me. There might be some kind of connection timeout at the HTTP layer - I've also seen this disconnection when running long solidity loops that validate bytecode in a call. \n@barakman Out of curiosity, would making revert and snapshot optional help with your use case? . @barakman \n\nIt would help for sure if you could check with Ganache developers what might cause the execution of evm_revert and evm_snapshot be so lengthy.\n\nI will. In your current suite, approximately how many blocks are being snapshotted / reverted? . Apologies @barakman - yes you could do that or estimate the number of transactions that occur in the suite, since ganache executes a single tx per block.\nI'd just like to give the ganache engineers a some guidance about what magnitude of tests triggers this. . That's perfect, thanks @barakman. . @vicnaum Could you provide more detail about your suite or a link to project? At the moment we think this error is limited to very large suites. The principal reporter above has a battery of 50,000 tests. \nDo the same 3 tests fail each time?. @vicnaum I think @barakman is correct - I looked through the hourlyPay code a bit and see you're using a lot of methods to move time around on the chain. Would you like to open a separate issue so we can investigate further? \nganache-cli shouldn't disconnect from truffle under any circumstances so this is likely a bug. Could you display the entire contents of your error and stack trace as well?. @benjamincburns Yes, it turns out this originates at web3 and they're fixing it in beta.36. \n(It was keep-alive - the change).\n. @kc1116 Apologies for the delay in responding. Truffle only generates artifacts for contracts in the contracts folder and (when running truffle test) the test folder. It's common to npm install projects like zeppelin-solidity in order to import base contracts into your own solidity files as below:\n```javascript\n// Sample import statements in a Solidity file located at: contracts/.sol\nimport \"../node_modules/zeppelin-solidity/contracts/Bounty.sol\";\n// This would also work:\nimport \"zeppelin-solidity/contracts/Bounty.sol\";\n```\nIf you'd like to access the installed contracts directly, you could move them to the contracts folder after you download them from npm. \nClosing for housekeeping - please re-open if I've misunderstood your issue, or if you're still facing difficulties with this. . @kunalb16 Could you provide a little more detail? \n+ In your file system, where is the contract which contains the import statement?\n+ Where is the contract you want to import? \n. @kunalb16 - below is a typical file structure for a truffle project:\ncontracts /\n  - KunalbToken.sol\n  - KunalbSafeMath.sol\nnode_modules /\n  - zeppelin-solidity /\ntest /\n  - etc\ntruffle.js\nIf your project is organized in this way, you don't even need to use relative paths to access files installed with NPM (or EthPM). Truffle will resolve their location for you. So:\njavascript\nimport \"zeppelin-solidity/contracts/Bounty.sol\"; // <-- Works\nCould you check your paths? node_modules/zeppelin/contracts/ownable.sol is not the path to Ownable.sol at Zeppelin. It's stored under the ownership folder and the first letter of the file is capitalized. The module's name is zeppelin-solidity rather than zeppelin. . @raininja  If you have a chance could you post the import paths in your code as well?. Hi @sarthakmis! And thanks @Remi-Burgel! \nClosing because there's too little information in this issue to know what's causing the problem here. Have you installed a truffle project by running truffle init? (Make sure you do this an empty directory). Then add your solidity files to the contracts folder.\n@sarthakmis please feel free to reopen if compilation still isn't working for you. . @hynese This should be fixed on truffle's nightly for the next major version (darq-truffle on npm) which you can get by running:\nnpm install -g darq-truffle@next\ndarq-truffle migrate --network ropsten # Example command\nIt uses web3 1.0 under the hood so there are some breaking changes. Usage notes here.\n(If you try this feel free to ping with any problems, would love some early feedback on whether things are working in a production context).\n. Hi @ripern! Unfortunately I'm not able to reproduce this. It looks like you're using ethjs-rpc to wrap your method calls and I see some activity from the beginning of December over there that specifically touches the error message code. \nCould you debug by running?\njavascript\nconsole.log(error)  // Does this output a string?\nerror.toString().search('revert') // Does this work?\n. cc: @ripern Are you still having trouble with this?. @ripern Closing for house keeping and because it's been a while since we looked at this. Please re-open if this is still happening for you. Thanks! . Thanks @MaxBlaushild! Looks like this was a dependency issue at solc-js and has been resolved there. \nClosing for house-keeping. Please re-open or comment if you still see this error.. @JackPickering @SCBuergel - Have looked into this a bit and it seems like:\n+ mocha executes test suites serially\n+ on linux and mac Truffle ingests tests files in in alphabetical order\n+ on windows, that order isn't guaranteed.\n+ Truffle maintains the file ordering as it defines mocha suites. \nThat said, it's possible tests executing in arbitrary order might be caused by not returning promise chains to Mocha / not using the done method. \n@JackPickering - could you see if this problem goes away if you return .then promise chains like this in Capped_ICO  as below? This step doesn't need to be taken for async / await tests. \njavascript\nit('executes serially', function(){\n  return myAsyncMethod().then(function(){\n      return anotherAsyncMethod().then( .... etc .. \n}) \nGuide to promises in Mocha. \n[Edited for accuracy because initial comment confused the division of labor between truffle and mocha]. @SCBuergel Thanks for the kind words. I don't think my analysis is correct on reflection. Dropped promises shouldn't change the execution order of the suites - they should just result in the test executing synchronously. The only relevant case I've seen in the issues at mocha is where someone makes their describe an async function, which could happen by accident. This merits more investigation . . .. @JackPickering If you could point me in the direction of a public repo where this problem is reproducible it would be helpful. At the moment when I look around at various  projects in CI that use Truffle 4 I see all their tests running in strict alphabetical order (on Linux) without variance.  See zeppelin-solidity.\nIf your project is private, could you check to see whether you have accidentally defined any describe blocks within the tests as async function? Thanks!. I've looked some more and I'm not seeing this in the CI records of any other Truffle projects that use Truffle 4. So, reluctantly closing but please re-open or ping here if anyone has a reproducible case. . @pascal1990 Apologies for the delay responding to this issue. I'm going to close this and re-open it at the react-auth-box repository here where other people using the box can find it. We'll try to address it there. . Hi @jasontwong, @Tmeister. It looks like you're facing separate but similar issues.\n@jasontwong: To transfer eth from one contract to another you'll first need to fund the contract from an account that has a balance. There's a nice example of how to do that in the Truffle docs here. Additionally, you should know that using Solidity's transfer and send methods limits the amount of gas allocated for the execution of the fallback function - typically just enough to fire an event. Setting a variable might be too expensive. There's more about this at the solidity docs here.\n@Tmeister: It looks like your test is throwing, which is what you want. The issue is that this error should be triggered in a try-catch block, and assertions made for each section. It's a common pattern in Solidity testing and there are nice examples at zeppelin's own test suite here. They've also written some helpful JS utilities for cases like this - here.\nClosing for house-keeping since these don't seem like problems with Truffle as such, but please re-open if you discover otherwise. Or open a new issue. Thanks! . @vs77bb Yes it's still claimed and not open. @vladfr has done nice work on this, we're currently reviewing. . Closing, thanks all!. Hi @GNSPS. It seems like the underlying issue might be a quirk relating to libraries and events.  Everything about the way AssertBytes mimics Truffle's Assert is correct and seems like it should work. \nHowever, if the only defined TestEvent is located in a library, the transaction result that Truffle inspects for failing event logs always has an empty logs arrary.  The events fire but they aren't decoded at the web3 level, which is what Truffle expects. \nJorge Izquierdo at Aragon has written a nice Medium post about libraries and says there:\n\nas of right now, the contract ABI does not reflect the events that the libraries it uses may emit. This confuses clients such as web3, that won\u2019t be able to decode what event was called or figure out how to decode its arguments.\nThere is a quick hack for this, defining the event both in the contract and the library will trick clients into thinking that it was actually the main contract who sent the event and not the library.\n\nSo one fix would be to additionally define TestEvent in the test suite contracts, which would allow you to remove the fake test. If that solution works for you, maybe we should rename this issue a little - it's an unexpected problem that other people might run into as well. . Looking at this more i wonder if linking the AssertBytes library and the test suite contracts in a deployment step is what really needs to be done here. The comment above has the glaring flaw that Assert is also a library, so . . . why does it work ok? . @GNSPS This should be fixed in the latest release. Please re-open if continue to see this problem, or the patch doesn't work for any other reason. Thanks!. @MathieuMailhos Hi. I've tried to reproduce this error on Pet Shop on ganache-cli with a gas limit of 0x80000000 and your truffle config. \nRunning:\nsh\ntruffle test --network development\nresults in Error: Error: base fee exceeds gas limit (from ganache).  \nHowever, if the migrations files are rewritten so that no gas is specified for deployment, e.g.\njavascript\nmodule.exports = function(deployer) {\n  deployer.deploy(Adoption);\n};\nthe tests succeed. It looks like the gas value specified in the config is high enough to deploy the contract, but its being overwritten by the much lower values in the migrations. \nDoes making this change cause it to succeed on Geth?\n. @MathieuMailhos I'm going to close this for house-keeping since it seems like too little gas was the problem, but if not please feel free to re-open. Thanks so much!. @MathieuMailhos Finally got this to work :)  I've used geths dev mode instead of the regular mining mode because it's easier to set up for testing, comes with unlocked accounts,  and is quite a bit faster. Without specifying any genesis or chain data you can just run:\nsh\ngeth --dev --dev.period 1 --rpc --targetgaslimit 0xfffffffff\nIn a separate terminal window run:\n```sh\ngeth attach http://127.0.0.1:8545\n\neth.getBlock('latest')\n{\n  difficulty: 2,\n  extraData: \"0xd883010703846765746887676f312e392e328664617277696e00000000000000fe78ce6ab95947c2b21f9811bb14798572b39f65fae94951cb3b5d6b7a6bdfa85211a36a774ff03c0dae2bec9299b99c4823b8a9ef435196b3471717ea36f4ee01\",\n  gasLimit: 6320079,\n  gasUsed: 0,\n  ... etc ..\n}\n```\n\nThen set the gas field of the Truffle config to slightly less than the gasLimit of the most recent block:\njavascript\nnetworks: {\n    geth: {\n      host: \"127.0.0.1\",\n      port: 8545,\n      network_id: \"*\",\n      gas: 6300000,\n    }\n  }\nThen run truffle test --network geth.  \nLet me know if that doesn't work for you.\n. @LeRoyJulian I believe the problem you're facing is specific to deploying a Crowdsale contract, rather than Solidity testing against a non-ganache client. I'd encourage you to look in the zeppelin-solidity issues for a solution, although feel free to open a separate issue at Truffle if you discover a clearly reproducible bug. \n@MathieuMailhos Closing, happy to re-visit if you continue to have problems with with.. Hi @hqxluoyang, thanks for opening. Which Ethereum client are you using? Your issue might the same as #721. . Closing as duplicate of #749 . @hqxluoyang Hi - it's very difficult to tell from the error logs you're showing what might be triggering this problem. Which Ethereum client are you using? \n[ ] ganache-cli\n[ ] parity\n[ ] geth\n[ ] other (please specify)\nIt would also be very helpful if you could link to the public repository where the code you're running is published, or provide with clear steps to reproduce this error. Thanks! \n(Possible duplicate of #721). Closing as a duplicate of #721 since @hqxluoyang has also commented there.. @skmgoldin Thanks for pressing for a fix for this. \nFor anyone else running into this problem, Truffle had a bug that accidentally limited the wait time to 4 minutes. It's fixed in the latest release. \nUnfortunately, while looking into this issue, it's been discovered that that web3 has it's own hardcoded wait limit: 50 blocks. (Code here). \nFor the moment anyway, to be mined via web3 (which Truffle uses), you'll have to set your deployment gas price high enough to get picked up within 50 blocks.\n@elie222 Apparently web3 1.0 does not contain this limit. Truffle currently uses web3 0.x while 1.0 remains in beta. You could try writing your own deployment script with that? Not sure what else is available but please feel free to list anything you find here. Could be helpful to others. \nClosing, thanks for reporting.. @nickjm Not sure how meaningful this is but if you npm view web3, every 1.x release is tagged beta. That said, it seems stable and we've started upgrading truffle-contract  to web3 1.0 at truffle-contract 95. \nUnfortunately I was wrong about the 50 blocks limits being removed in 1.0 - it remains in the new code here and ultimately here. In order to circumvent this we'll need to catch the error when it comes back from web3 and continue to poll the chain indefinitely if necessary. I'll put that logic into 95 next week. \nWill probably be a while before 95 makes it into a release because it comes with numerous breaking changes. However, will ping you here as soon as it goes out in a pre-release build so you can test it if you're interested - would be super helpful to get some feedback on whether or not this problem is fixed. \n. @TedtheDev Thanks! I think we'll pull in #813 today and schedule it for the next patch release - There was some discussion there last week about how it should be worded and we were waiting for the opener to respond. But this is important so . . . \n. Fixed with #813 thanks to @robinboening. @didac-pf Thanks for reporting!. @vdrg Hi. There's a pending fix for this bug - Solidity files in the test directory are being parsed by an older parser. Probably the file you want to run is a test written in Solidity, but if not you could move it to the contracts folder and it should compile ok there. \nSorry about this - should be resolved in one of the upcoming releases. . Ok thanks @vdrg. . If anyone can explain this in greater / clearer detail that would be great. \n\nWhat is the initial installation sequence when it fails?\nWhy does re-installing work? \n. @terraflops Thanks for such a detailed description. Is there any chance you could share the contents of the migrations files you're using or if this isn't possible for privacy reasons, a minimal example migration that results in the same error so we can reproduce and investigate further? . @terraflops Thanks so much for making a simple demo of this! Really appreciate it. \n\nI've gotten the migrations to populate the network object as expected by removing the deployed promise from the migrations files for derived contracts and passing the deployer the artifact address directly: ex:\n```javascript\nvar Derived1 = artifacts.require(\"Derived1\");\nvar Data = artifacts.require(\"Data\");\nmodule.exports = function(deployer) {\n/* --- Original ---\nData.deployed().then(function(instance) {\n     deployer.deploy(Derived1, instance.address);\n});*/\n\n// --- New ---\ndeployer.deploy(Derived1, Data.address);\n\n}\n```\nThe behavior of promises in the migrations is a topic that should probably be expanded on in the docs - apologies for this - FWIW there's an example of an issue similar to yours here. \nMigrations stage deployments rather than executing them immediately, so if you want to execute code asynchronously (like Data.deployed) that's something which has to be returned as a promise to the deployer. For your case the following should also work:\njavascript\nmodule.exports = function(deployer) {\n    deployer.then(function(){\n      return Data.deployed();\n    }).then(function(instance){\n      return deployer.deploy(Derived1, instance.address)\n    });\n}\n. @dagogodboss @okwme Could you share the code causing this error so we can try to reproduce the problem? Thanks!. Closing due to lack of response. VM exception etc usually means something in your Solidity code is throwing a legitimate error. . Thanks so much @yondonfu! Your fix for this published with 4.0.6. . @rickbatka Hi, thank you for providing such an easy way to reproduce this issue. Unfortunately, when I run your code on Truffle 4.0.5 using the truffle test command, it behaves as expected - e.g thrown is set to true in the example above. All the tests in the zip file pass. \nHow are you executing the tests? \n. @rickbatka if you've been running the ganache beta recently it's possible you would see this behavior, although I believe the latest version would pass your tests. Ganache has added a mode that replicates the way the geth and parity report errors and there's been a little uncertainty about how to manage that at Truffle / set the defaults at ganache. The release note at ganache contains a more detailed explanation.. Latest release 4.0.6 ships with solc 0.4.19. Closing, thanks all!. Small update @skmgoldin.\nThis is a really good idea - adding it to the work underway to migrate to Web3 1.0 at truffle-contract 95. We could have truffle-deployer expose Web3's new event emitter interface and the pattern for waiting might look something like:\njavascript\nmodule.exports = function (deployer) {\n  deployer.then(function() {\n     return new Promise(function(accept, reject){\n       deployer\n         .deploy(MyContract)\n         .on(\"confirmation\", (number, receipt) => {\n            if (number === 10) accept(receipt);\n         })\n         .catch(reject)\n      });\n   }).then(function(receipt){\n      //... ready to deploy something else ...\n   }).catch(function(error){\n      // ... :/ ...\n   })\n});\nFor record keeping, these are related:\n+ PR at Web3 to address issue with the confirmation handlers not firing repeatedly for test clients.\n+ truffle-deployer 18 . @daneric, @gnidan inserted an error logging line to debug this problem in the latest Truffle release 4.0.6. If you have a chance could you install it, try again, and report the (hopefully different) error you see? . @ben-nyllabs The error is: self signed certificate in certificate chain. Looking around various Github threads it seems like it might be firewall related. Is there anything about your local environment that would cause it to fake SSL certs? \nPossibly helpful discussion at this issue. . @daneric It's now clear this error results from local network permissions / behavior. @lazaridiscom has suggested we stop depending on network connectivity to manage truffle init and we all agree that's probably the best remedy. Tracking this problem at #108 and closing here. \nThanks for reporting, . @0pay In your case the error looks different - the connection timed out which suggests you  weren't able to connect to GitHub because of .a weak internet connection or your computer can't reach Github for some other reason. Could you verify that you are able to clone a GitHub repository at the command line (outside of truffle) by running:\ngit clone https://github.com/trufflesuite/truffle-init-bare.git\nIt's also possible you would see this error if you are behind a proxy / vpn.. @0pay There's a note on StackExchange here which suggests you can get around this by setting local environment variables that ask the request module not to proxy / tunnel certain calls. More on that here. \nYou can also just fetch the zip as @lazaridiscom has advised or clone truffle-init-bare as suggested here. @sugalivijaychari If you're behind a firewall that limits your git access, you can download the init template to your desktop via the browser by clicking this link:\nhttps://github.com/trufflesuite/truffle-init-bare/archive/master.zip\n. @inzig This looks like a problem with unlocking accounts at Geth. Could you look at their wiki for help and verify 0x1C11f6b1A2d1c0b00ad4145eb067184736EB973f is known to your Geth client. \nYou can do this by launching geth and running the following in a separate terminal tab:\n```\ngeth attach http://127.0.0.1:8545\n...\n\npersonal.listAccounts\n```\n\nClosing because this seems like it might not be a Truffle issue, but please re-open if you discover otherwise.. @cristicmf You can modify the params for each deployment by adding a transaction object as below:\njavascript\ndeployer.deploy(MyContract, {gas: 250000, from: \"0xabc..def\"});\nYou can also set custom deployment defaults per network in the truffle.js configuration file:\njavascript\nmodule.exports = {\n  development: {\n    special: {\n      host: \"127.0.0.1\",\n      port: 8545,\n      network_id: \"*\",\n      gas: 6700000,\n      from: \"0xabc...edf\"\n    }\n  }\n};\nDoes the information above answer your question? \n. @cristicmf I'm closing this for house-keeping, hope this resolved your issue. I see you've found more help over at issue #219 but please re-open if you're still having difficulties with this.. @doubaozia This looks like an issue that might be related to the execution context of your script rather than a bug Truffle can address per se. Closing this for house-keeping since it doesn't seem like other people are running into this issue and there are many options for automating commands in the shell.. @inzig Which Truffle version are you using? Which Ethereum client are you running? . @inzig, Thanks. The second contract you reference (like the one below) has invalid gas values:\njavascript\nlive: {\n   network_id: \"*\",\n   host: \"127.0.0.1\",\n   port: 8546, // Different than the default below\n   from: \"address\",\n   gas: 0  // <--- Use more, perhaps 6700000. Current main net block limit is  ~8003929\n}\nDoes changing that allow you to deploy the example contract? It's a little difficult to say what the issue might be with the 'real' contract you're working with from your first comment.\nClosing this as duplicate because problems with gas during deployments are currently being tracked and discussed by the community in issue #271, but please feel free to re-open this if you discover a problem that isn't addressed over there. \n. @inzig I'll happily look into this further if you can provide a way of reproducing the error you're seeing. Please link to a simple example repository which includes all the relevant files including truffle.js, migrations, contracts etc. Also include the version of your geth client. Thanks!. @boorac Yes if you have a way to reproduce please do! Happy to take a look.. @ahester57 We now run truffle against geth:latest in continuous integration and our end-to-end migrations tests are passing. \nGanache has a default gas limit ~6700000. Other networks vary - for example Ropsten is ~4700000. If you can provide some context for what you're trying to do, what your client and truffle config are like etc, there might be a straightforward way to resolve it. . @SeaWolfX MetaCoin recently got its own box. Truffle init now downloads a blank template. Running\ntruffle unbox metacoin\nshould get you ConvertLib and everything else. Closing but please reopen if this doesn't resolve your issue. Thanks!. @bmaurer The solidity tests are a special framework that rely on Solidity Assertion libraries and solidity events to determine whether or not a test succeeded. Any case you'd like to evaluate should be passed to one of these library methods. There's more on how this works in the Truffle docs here, including a link to a great tutorial on testing require statements by Simon de la Rouviere.\nClosing because the behavior you've highlighted doesn't suggest there's a bug in Truffle's solidity testing but please re-open if I've misunderstood this issue.  . @bmaurer Are you using the latest ganache? If you've downloaded a ganache beta recently, it's possible you have a version that wasn't throwing errors when it encountered a require. Could you try this with the most recent published version - apologies for the confusion here.. Looking into this..... @nickjm @bmaurer Apologies to both of you for misunderstanding what's happening here.\nPer Ben Burns' response to @nickjm this should be resolved in a Truffle patch release due tomorrow. Latest Ganache is now emulating the behavior of the main net clients in signaling error states via status field alone, rather than attaching an error object to the response which Web3 detects and throws on. The latest ganache release can be run with a flag that restores its old behavior (see the ganache release notes) although starting Thursday, truffle-contract will manage these errors correctly and be fully compatible with both Ganache and the main net clients.. @bmaurer @nickjm Truffle 4.0.6 was just released and should be compatible with ganache's new error reporting - closing this - it looks like the other response issues are being tracked at Ganache.  . >SyntaxError: Expected \"!\", \"!=\", \"(\", \")\", \"+\", \"++\", \"-\", \"--\", \"0\", \"<\", \"<=\", \"==\", \">\", \">=\", \"[\", \"^\", \"delete\", \"false\", \"hex\", \"mapping\", \"new\", \"this\", \"true\", \"v\", \"~\", [1-9], comment, end of line, identifier, number, string, or whitespace but \"{\" found. Line: 12, Column: 26\n    at peg$buildStructuredError (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:294335:12)\n@bmaurer Thanks for reporting this. \nThe error here is related to Truffle's use of a deprecated parser for solidity tests. Should be resolved with truffle-compile 42 which is scheduled to be published in a patch release later this week. \nClosing as a duplicate of #707 but please feel free to re-open if you discover there's an additional problem for this constructor case.\n. @bmaurer It looks like you're suggesting that Truffle should output all of these fields. However it's normal for a program's --version flag to report itself only. For example:\ndocker --version\nDocker version 1.12.3, build 6b644ec\nThe bug report asks for additional information that can be retrieved by running:\nnpm --version\nnode --version\nEthereum client and OS version commands will vary depending on their identity.\nDo you think it would be helpful to update the issue template with some guidance about how to generate the required fields?. @bmaurer There are various clients and OS's and no single way of getting their versions, so it seems  like a shell line would be tricky, but definitely agree that greater clarity about how to provide that info would be helpful to everyone. Thanks for suggesting this.. Sorry for closing this a little early - preparing for a release tomorrow and modifications to the issues template will be included. . @realChainLife Closing this as a duplicate - there are a number of open issues about the debugger (which is experimental and under active development). Any information you have about how to reproduce a crash is more than welcome but please check the other issues first and see if your case has already been reported. .  @quantumproducer There's a mocha reporter called eth-gas-reporter that plugs into Truffle and could be helpful for this. (Full disclosure, I wrote it :)\nIt won't capture the gas costs of your migrations as such, but if you write a test that simulates your deployment, for example:\nit('deployment simulation', async function(){\n   instanceA = await contractA.new();\n   instanceB = await contractB.new();\n})\nIt will give you the per contract deployment costs in a chart at the end of your test suite, in addition to total gas usage per test. . @quantumproducer It prints a table at the end of the tests, as part of the test output. . Hi @quantumproducer, thanks. Closing for house keeping.. @gerchicov-bp It looks like the ropsten block limit is ~5.7 million. If your contract consumes more than that it will fail, and you can't try to send a higher value than that either. It might also have trouble fitting into a block if there are lots of people trying to use the testnet.\nCan you verify that the account generated by the HDWallet is funded with Ropsten ether? That might be the source of the first error. . @quantumproducer @mjhm Agree this behavior departs from the pattern of git clone and can catch people off guard. I hope you don't mind but I'm going to close this and begin tracking the topic at #786 where there's additional discussion from the rest of the community. . @lazaridiscom Agree there's is a good case for modifying this although it will also require further discussion. Among other things it would be a consequential change within the Truffle codebase which uses the box mechanism for some of its E2E testing. And we'd need to see if there are other implications, would this break things outside Truffle? . 4.0.7 contains a patch for this. If a folder has contents, truffle will no longer unbox into it. Thanks for reporting! . @KurtLorey @malaravannm This issue has also been raised in #756. In that instance, the poster re-installed their project and the issue self-resolved. They were also on Windows using VS Code. If someone discovers why this is happening or if the steps suggested don't work please feel free to re-open or comment here. \nClosing as duplicate of #756.\n. @vivek4c4 Which ethereum client are you using?. @ebundala Thank you - that's likely the problem here. \n@vivek4c4 Closing since this seems like it's related to your client settings, but please feel free to re-open if there's something else going on.. @Asone Yes, definitely agree we should try to make truffle-contract compatible with the new web3 wallet. Earlier this year wallet accounts only worked with sendTransaction and method calls needed to be encoded as data / transmitted that way. Will look into this more today and see if that's still the case.\nAlso if you're testing web3-one and see other things that aren't working or could be improved, please feel free to note them on the truffle-contract PR.  Thanks so much for your encouragement and help :)\n. @webslesar Where/how is the variable user being initialized before it is passed to the create function? Is it coming from the accounts array passed into the Truffle test environment or somewhere else? . @webslesar Yes, it would be helpful if you could provide an example test to reproduce this error. \nOut of curiosity, is it your intention to implement the Transfer event as shown above, with msg.sender passed in as the value for the _to parameter?\nTransfer(msg.sender, msg.sender, _value);\n. @webslesar Going to close this for house-keeping but if you're able to provide a reproducible example please feel free to re-open and we'll be more than happy to investigate. Thanks!. @ltfschoen Your contract consumes more gas to deploy than the limit you've specified. At the time of this comment, mainnet's limit is 7984452 so you have quite a bit of room to expand while remaining within deployable reality.  \nCould you try raising the gasLimit of your ganache-cli instance as well as the gasLimit specified in your truffle.js? \n. @ltfschoen Oh good - closing this for housekeeping. \nPlease feel free to re-open if you feel there are other issues to resolve here. . @cpurta Thanks for reporting, looking into this.. @cpurta It looks like Geth --dev only seeds with a single account so accounts[1] is undefined triggering this (somewhat misleading) validation error in web3. Ganache seeds with 10 accounts. \nAlso seems like --dev can't be configured with a custom genesis block at the moment.\nNot sure how to automate account creation on Geth but ultimately to get around this it's necessary to start the chain, create a bunch of accounts, fund them from account[0] and then run the tests.  . @cpurta Do you happen to have  a link to anything (a repo or a gist) for how set up the images w/ multiple accounts so this is easy to do? . Awesome, thank you.. @rstormsf This problem has also been raised in #555 where a global event registry was proposed. The underlying issue is that truffle-contract looks at the contract ABI to decode events but X is not part of Y's interface. \nAs a stop-gap you could declare an abstract contract that defined a common event interface for X and Y?  If that doesn't work for your use case you could manually decode the raw logs on the receipt using a utility like abi-decoder. \nAKAIK this behavior hasn't changed between Truffle 3 / 4 but I could be wrong about that. Do you have a view about what the best long-term solution for this might be? . @rstormsf Hope you don't mind but I'm going to close this for house-keeping and we'll continue to track internal event logging at #555. Thanks for highlighting this issue. . @ltfschoen It looks like the issue here might be that interface is an abstract contract which is meant to be used with the inheritance pattern. Could you see if removing the interface deployments / linkages from the migrations and substituting them with something like the following in your Solidity contract definitions achieves what you're aiming for?\n```\nimport \"./Token.sol\";\ncontract TokenRecipient is Token {\n   ... etc ...\n}\n```. @ltfschoen Hi this has been open for a bit. Closing for house-keeping but please feel free to re-open if I've misunderstood your issue or you're still facing difficulties with it. Thanks!. @violalbi91 Interfaces aren't deployable, they're inheritable. \nA more detailed discussion of how to use interfaces and abstract contracts can be found here.. @violalbi91 Can you verify that EternalStorage exists at the time this contract is deployed? One difference between your implementation and Colony's is that they're instantiating the storage contract in the constructor. What do your migrations look like?. @violalbi91 The migrations look good - I think you just have to get the contract instance at the address you're passing into your constructor. Does this work?\n```javascript\nimport \"SecurityLibrary.sol\";\nimport \"EternalStorage.sol\";\ncontract Organisation\n{\n  using SecurityLibrary for address;\n  EternalStorage public eternalStorage; \nfunction Organisation(address _eternalStorage, address _admin) {\n     tokenLedger = ITokenLedger(_tokenLedger);\n     eternalStorage = EternalStorage(_eternalStorage);\n eternalStorage.addAdmin(_admin);//ERROR OCCUR WHEN I ADD THIS LINE.\n //addAdmin is a function inside the SecurityLibrary.sol\n\n}\n```\n. @violalbi91 Oh yes, good catch about using SecurityLibrary.At this point I would try some different things with the migrations. Should this be double arrayed?\ndeployer.deploy([[SecurityLibrary, EternalStorage.address]])\nWhat about tokenLedger? Where is that coming from and why is it there? \nI'm really sorry, I'm kind of out of ideas. If you put everything into a git repo I can clone, I'd happily help debug later today :).\n. Ahhh! That makes sense. Thanks for showing your solution too - I searched a little yesterday and couldn't find any other examples of someone doing what you're trying to do so this very useful. Much appreciated.. @Paasmer If you have a chance could you post the stack trace you get with this error so we can locate its source?. @Paasmer Sorry for the delay getting back to you. Your error originates in a section of code that reads a contract artifact stored as a JSON object in the folder build/contracts. For some reason that file is getting corrupted but it's not clear why. \n\nCould you open the file that fails, look at position 15566 in a text editor (the character should be a colon) and report back what's there? \nAre you able to migrate using ganache-cli? \nIs there anything unusual about the way you're building your project? Any additional information you can provide might be helpful here. \n\nThanks.. @Paasmer I'm going to close for house-keeping since it's been a few days and it seems like you might have resolved this on your own? If not please re-open - will continue to watch this issue in case anyone else starts seeing the error. Thanks for reporting!. @JohnAllen Agree. We should be able to set this dynamically by querying the provider.  On a related note, @gnidan has recently suggested re: truffle-contract 95 that we estimate gas for all transactions and supply that amount when no other preference is stated. . @JohnAllen Small update: automated fueling of deployments and method calls have been added to truffle-contract 95. Believe this should accomplish what you're aiming for here. Unfortunately it won't be available until the release that upgrades to web3 1.0 comes out. \nThanks for pushing for this. . @Aniket-Engg Thanks for reporting. We're currently tracking this topic at #685. If you have a chance could you see if modifying your command to truffle migrate --reset --all results in the correct behavior?\nClosing as duplicate. . @freshonline There's an open issue (#721) about running migrations with geth 1.8.0-stable.\nCould you try downgrading to 1.7.3 and see if that helps? There may be additional issues you're facing but 1.8.0 is known to be unusable at the moment. We're actively investigating the cause the and will hopefully fix this in next patch release. \nClosing as duplicate of #721. @dbucci24 This is a fantastic idea, thank you so much for proposing it. As far as I know no one has attempted any translations of the docs, which are now housed here [EDITED]. I have some preliminary questions:\n\nDo you have any advice about how we might organize our docs so that translations are easily accessible and maintainable?\nThe docs will always be a work in progress. How should we try to keep translations current? \n\n@bmmpxf Do you have any thoughts about this? . @bmmpxf Agree with everything you've said. (Also thanks for correcting the link :) ) \nI guess I'd like to know whether @dbucci24 thinks these obstacles are manageable or not. \nmetalsmith has a little  npm package for localization here. \n[Edited due to repeating what's already been said].. @dbucci24 Great! The obstacles are technical on our side - we need to install multi-lingual doc support. Is that something you'd be interested in opening a PR for? And long term, someone would need to watch the changes in the documentation and keep them up to date. As @bmmpxf has noted - it's a ton of work!. @freshonline Agree with @lazaridiscom - this is a good question to raise on Truffle's gitter.\nCould you try raising the value of gas in your truffle.js. It's limited to 1,000,000. The error suggests at least on of your contracts requires more than that to deploy. Could you also try testing your migrations with ganache-cli to verify they're successful against a test blockchain? \nClosing this because you haven't filled out any of the issues template - we'd need a lot more context and information to evaluate this issue as a bug.   . @freshonline Apologies - I see you've opened another issue with more detail - will address there.. @freshonline Could you look at this issue at Geth and see if your error is related to configuring the chainID?. @freshonline Was that the cause of the error? Is this issue closable?. @freshonline Closing because this is likely a geth configuration issue and you've stopped responding, but please feel free to re-open if that's not the case and there's more to investigate here. Thanks!. @mariam-crissi The truffle-contract wrapper doesn't directly expose getData. However you can access a TruffleContract's underlying web3 object and interact with it through thecontract property. In your case this would look like: MultiSigWallet.contract.someMethod.getData\n. Sincere apologies @mariam-crissi I didn't read your example closely enough. I think you will need to manage this using web3 directly, although the necessary components (the binary and the ABI) are available on the artifact. If you look here at the web3 docs, you should be able to string the calls you need together. Then once you have a contract creation receipt, you can generate a TruffleContract from it using MultisigWallet.at(<receipt.contractAddress>). \nWill that work for your case?. @wbt This looks very similar to a bug at Solidity that's being addressed here. If you have a chance, could you close here and re-open there? Your example is slightly different and might be relevant to their efforts to resolve the problem. . @wbt Ah I understand. I think the message difference might a difference in compiler version? Is that possible?. @wbt Ok fair enough, will look into this. . . . @wbt I agree this error is not helpful enough and is missing critical information. However, Truffle passes back all the information it gets from solc and typically this contains detailed file/line info. Ex:\nError parsing /example/contracts/RecordsLib.sol: ParsedContract.sol:6:5: ParserError: Expected token Semicolon got 'RBrace'\n    }\n    ^\nBecause Remix compiles files individually rather than as a batch, it's able to communicate that a given compilation attempt failed.  Truffle batches and relies on solc's error reporting. My view is that this issue belongs at solidity and is probably transitory - as soon as they resolve the underlying question about nested structs the error will likely normalize. . @wbt I've looked through some of the code at solidity (but just focused on the error handling), and it seems likely that their intention is to provide location data but for some reason it isn't propagating. For example here:\nc\ncatch (UnimplementedFeatureError const& _exception)\n{\n     errors.append(formatErrorWithException(\n        _exception,\n        false,\n        \"UnimplementedFeatureError\",\n        \"general\",\n        \"Unimplemented feature (\" + _exception.lineInfo() + \")\",\n         scannerFromSourceName\n    ));\n} \nWhat do you think about helping to diagnose and fix that (if possible)? It would be a nice PR. . @wbt I'm going to close this for housekeeping. There's merit on both sides here but in the end I think Solidity intends to provide the error info. The simplest solution is to a) tell them this is happening (they already know) and b) if possible help them fix it. . @wbt Nicely done! Thank you. This change should start showing up in the next patch release.  . @dmihal Yes. If you'd like to work on this please do. -s looks free to me.  . @freshonline I don't understand - it seems like you were advised to remove the --dev flag and start over with a standard geth installation for a private network. Why is that not a good solution? This does not appear to be a problem you're having with Truffle but rather with your Geth configuration. . @freshonline Closing as a duplicate of #803. Feel free to raise any questions you have there and if it merits re-opening because there's something in the Truffle code that needs to change, we'll be happy to do that.. @dmihal Gladly take a PR! There's a guide to setting up the project for contributions here. Feel free to ping this issue if you need any help. \nThanks so much.. @dmihal If you're taking this on, #790 could be within scope too. Or not, your call. :). This is fixed on 4.0.7 - thanks @dmihal!. @lazaridiscom Is this closable? Does it seem like the constructor argument validation is working correctly?. @lazaridiscom Is the error you saw correct? i.e for some reason the constructor was called without arguments? If so we should close this because it's un-related to #596 - that's a re-compilation bug.. @lazaridiscom - Where / when is the error being triggered? We just recently added this constructor error message in order to address silent failures caused by the ability to instantiate a contract that requires constructor arguments without actually specifying them. The error you're seeing is definitely from Truffle (rather than web3) and intentional. \nDon't you get a line number for the error? Does it originate in migrations or a test?. @lazaridiscom Thanks for the reminder about the EthPM, will look at that shortly.. Hi @FabiolaBusch  If you're passing Listing to the deploy method, you'll also need to specify the values of its constructor parameters. For example:\n```javascript\naddress = \"0xabc.......\";\nid = 5;\ntitle = web3.fromAscii(\"Hello!\");\ndeployer.deploy(Listing, address, id, title);\n```\nThere's more info about the deployer API in the docs here.. @fdouglis Do you have a way to reproduce? Even if you can show the 'fubared' order that might be helpful for diagnosing.. @fdouglis Oh cool, thank you! Will check this out . . . . @fdouglis Haven't worked out why this is happening but as a workaround it looks like if you put Debuggable in it's own file and import it into the test contract, order is restored.\nThe top of your file would look like:\n```\npragma solidity ^0.4.18;\nimport \"truffle/Assert.sol\";\nimport \"./Debuggable.sol\";\ncontract TestOrder is Debuggable {\n```\nIf you have a chance could you verify that's the case? Sorry, thanks.\n. @fdouglis This has a fix pending at truffle-compile 45. Not sure it will make it into the next patch release, since that's tomorrow.  \nThanks again for reporting. We'll leave this issue open until it's available in a some published form. . @fdouglis Believe this is fixed in 4.1.3. Please re-open if not. Thanks again.. @robinboening Thanks so much for opening this and discussing it. Fixes #751.. @fredfortier Truffle just published a huge debugger release a few minutes ago. Do you have any interest in trying it out and reporting back on whether this error is still happening? . @fredfortier @alexmedkex I was able to reproduce this as well. Investigating . . .  . @fredfortier If you have a chance could you see if 4.1.5 has fixed this? A bunch of support for inter-contract calls has been added in that release. . @fredfortier I'd like to close this because the initial issue looks like it's been resolved. \nIf you have a chance could you open another issue on the undefined variable problem? A minimal set of reproduction steps would really help us to track down what's going wrong there. . @marshain - This is a known issue being tracked at #721. We'll be publishing a fix for it early next week. \nThanks for reporting - your issue title is more current than #721's  - but closing as duplicate.. @freshonline The the chainID in the genesis should be the same as the network ID. There's a short guide to setting up the geth client for Ropsten here you might find helpful. Otherwise it looks like you're close! Good work. . @freshonline Could you try removing the --testnet  option on your Geth command? This was mentioned when they responded to your question at go-ethereum. That option asks Geth to connect to  Ropsten which has  ChainID 3. You seem to want to run a private network but are trying to connect to the public testnet.  \nIf you want to connect to Ropsten, AKA --testnet, remove all references to chainID or network 11 and start again by syncing your chain to Ropsten following the guide linked to above.\n. @freshonline I'm going to close this because we're going around a circles a little. . . .for the next issue you open could please look through the various suggestions you've been given and try make sure everything's in order. Thanks so much and good luck \ud83d\ude04. . @quantumproducer Could you see if this issue is a duplicate of #677? There's some discussion of workarounds in that thread here. . @aleybovich Yes that's true. truffle-contract doesn't support this although it's been implemented in truffle-contract 95 where an upgrade to web3 1.0 is happening. Do you mind if I close this as a duplicate of #737?\nI believe you should be able to access web3's own syntax for function overloading through the .contract property on an instance. e.g:\nmyInstance.contract.myMethod['uint256'](5000)\n(I think that's their syntax but it might be good to check over there).. @aleybovich No. It breaks a lot of stuff for people so it will wait for a major release. There are still some things that have to be done there too . . . small bugs and some features. But we might start continuously deploying patch fixes and experimental branches here soon so it could be available as an alpha soon-ish.. @aleybovich The key part of their syntax is the way you specify which function signature you want to use using array notation:\nmyMethod['uint256']         // Specifies: myMethod(5) \nmyMethod['uint256,uint256'] // Specifies: myMethod(5,5)\nI'm looking for an example somewhere because I'm not sure exactly what a call that works looks like in web3 0.x.x . . .\nDoes this work?\ninstance.contract.increaseApproval['address,uint256'].sendTransaction(ownerAddress, 47, ..etc... @W-B-S I just got the latest Mist client, fired up truffle develop, then ran (I'm on a Mac) in a separate terminal window.\n/Applications/Mist.app/Contents/MacOS/Mist --rpc http://127.0.0.1:9545\nWorks. Is there any other info you could provide to help reproduce this error?. @W-B-S Closing for housekeeping but please re-open if you continue to see this error and can identify a way of reproducing it.. @freshonline Ok everything looks good as far as I can see. Could you try changing the gas amount in your truffle.js to 2000000 as below? \n```javascript\nmodule.exports = {\n  // See http://truffleframework.com/docs/advanced/configuration\n  // for more about customizing your Truffle configuration!\n  networks: {\n    development: {\n      host: \"127.0.0.1\",\n      port: 8599,\n      network_id: 3,\n      from: \"0xC1320531dF2612B85e6FEDFd4d6358ed711bbe66\",\n      gas: 2000000,   // <--- Twice as much\n      gasPrice: 10000000000,\n    }\n  }\n};\n```. @fdouglis You might find this gas-reporter helpful. If you write little tests that simulate the deployment sequence, it will print a chart at the end of the run which shows how much each deployment actually cost.\nTests like:\njavascript\nconst blockLimit = 7000000;\nit('should deploy my system', async function(){\n  const system = await SystemInit.new({gas: blockLimit});\n  const systemPart = await SystemPart.new(system.address, {gas: blockLimit});\n});. @fdouglis Apologies I didn't quite grasp your use case when I commented. The original poster is trying to deploy Token contracts to the testnet where the limit is fixed by design. You're trying to run unit tests in solidity. If you're using ganache the client blockLimit can be increased arbitrarily by running it in a separate terminal as follows:\nganache-cli --gasLimit 0xffffffffff   // Some huge amount (10 f's)\nand then setting your gas in Truffle.js to slightly less:\nnetworks: {\n    development: {\n      host: \"127.0.0.1\",\n      port: 8545,\n      network_id: \"*\",\n      gas: 0xfffffffff, // (9 f's)\n    }\n  }\nOn the pros and cons of gitter: It seems good for 'how do I do x' questions. People are really helpful. By convention git issues have stricter rules about what can be addressed. They're for feature requests and bug reports that include guides to reproduction. Definitely agree they're more searchable but in turn less 'chatty', more formal. \n. @fdouglis Out of curiosity could you try at the command line with ganache-cli? Also maybe specify the network name when you run the tests, e.g truffle test --network development for example. All of this can be run in your regular shell rather than truffle develop. \nIt's possible there's a bug in the UI, I'll check into that.. @freshonline It's possible you weren't connected to enough peers to have the transactions picked up by the network. Your node accepted the txs, but I can't find them in the Etherscan Ropsten explorer. \nThis stackexchange discussion might be helpful. \nCongratulations on getting the migrations to work locally at least! Great work. Going to close this since the issue you're having is not Truffle related anymore. . @fdouglis Yes definitely. If you're able to link to a public repo where the bug can be easily reproduced (and suggest reproduction steps) that would be immensely helpful. Additionally, if you could note in the issue title that the context for the bug is Solidity testing, that would also be nice. A lot of people run into this doing conventional migrations, but the testing context is slightly different and we should distinguish between these cases. \nThanks so much!. @boorac Just for clarification, do either of these contracts inherit from each other? . @boorac Thanks yes, clearly. Thanks for the work-around too, nice.. @TedtheDev You are welcome to try this and thanks for offering. \nFair warning: any implementation will need unit tests and have to handle some simple error cases. I think we'll have to add fixtures to the main repository's scenario testing to make these tests possible. (That work isn't within in the scope of this issue or PR fwiw). It might a little bit on this end before we could evaluate a PR in any case. \nAlso well worth checking out the CONTRIBUTIONS.md - it has instructions on how to set Truffle up to make pull requests.  . @attente Nice! That makes sense.. @microdesign The core of this error is:\nshell\nDeploying HashnodeCrowdsale... ... Error: VM Exception while processing transaction: revert\nTo understand what is happening here I suggest writing Javascript tests that verify your contract can be deployed via a simple .new, e.g:\njavascript\nit('should deploy', async function(){\n  const instance = await HashNodeCrowdsale();\n});\nGoing to close this because the possible causes of this error when deploying a Crowdsale contract are numerous and it's not clear this issue is migrations specific. Additionally there are no clear reproduction steps. Please feel free to re-open after your tests pass and you can link to your migrations and contract code or give us a simple case to reproduce. Thanks! . @microdesign I would check out #660 since you are deploying a Crowdsale (that thread discusses non-ganache clients but worth knowing about) Crowdsales are large contracts that tend to be towards the default block limits. For testing purposes I would define a testing network in truffle.js with a  highish gas value and run ganache-cli in a separate terminal with the flag --gasLimit 8000000 (or more!) and see if that helps. . @microdesign Ok, we need steps to reproduce. That's a precondition for re-opening this, I'm sorry.. @microdesign How about links to a public open-source repo with your code that we can clone, install and run truffle migrate against. If that's not possible produce a minimal case in the same format (GH truffle project) that results in the same error. If you choose the latter make sure everything distinctive about your real project is reflected in the minimal case. . @microdesign \nIs this correct? Your crowdsale doesn't deploy the token itself?\njavascript\ndeployer.deploy(LeonardianToken).then //\nAdditionally it's necessary to return all promises to thedeployer so . . .\njavascript\nreturn deployer.deploy(LeonardianCrowdsale,\nIt seems possible that your issues are with your crowdsale code rather than Truffle, although I agree the error messages you're seeing aren't very helpful. Truffle reports back whatever it gets from the Ethereum client and sometimes these errors are unclear. I'd encourage you to seek help at Zeppelin - (sign up on their slack and ask for advice) or from the author of the tutorial you're following. . Leaving an additional reference here for anyone else running into problems with a similar contract structure: nice discussion at Zeppelin about the mechanics and benefits of deploying the token and crowdsale separately.. @VanThanh1812 Could you run ls -A at your console prompt and see if the directory you're unboxing in has any contents? If so the unbox command won't work because it doesn't want to risk overwriting anything. You should be able to create a new directory, navigate to it and then unbox. For example\nshell\nmkdir VanToken\ncd VanToken\ntruffle init\nIf this doesn't work please report back. . @DeepakSuryaS Hi, unbox only works in an empty folder to prevent any possibility of a box overwriting existing folder contents. The best thing to do is unbox first and npm init second. . Re-opening since this irritates so many people - but going to give some background as well so there's room for discussion about the best approach. Before we made unbox (which is the parent command of init) so strict, there was an issue like this one where the complaint was: unbox deleted my files!! The underlying problem is the following:\n+ anyone can write a truffle box of arbitrary complexity and contents.\n+ truffle has doesn't have a simple way of knowing what will be unboxed.\n+ I suspect people who accidentally run truffle init or truffle unbox in one of their existing directories and think \"phew! it didn't unbox\" even though that directory doesn't contain anything in the box are under-represented in this thread. \n. @Cryt1c Yes - agree - I think that's a good idea. . @robinboening \nThanks for revisiting this and adding some clarity. Have edited slightly but preserved your idea of suggesting the separate client and explaining why, which definitely makes things more intelligible.  Thanks again :). @carlosero Yes exactly. Thanks for producing such a clear example repository - this is a model bug report for what it's worth :) Glad you solved it.. @lazaridiscom I found it intimidating at first but it works beautifully. Is also critical for CI on a project organized this way. @gnidan set it up.  . @lazaridiscom Thanks for opening this - super interesting topic. I hope you don't mind but I'm going to close this issue for house-keeping since modifying the project structure and it's management isn't on our near-term road map. \nLeaving a link here to google's repo in case we revisit this.. @lazaridiscom Yes correct, I don't think either of us have tried repo. Would love to hear your impressions though. . @lazaridiscom I'm very happy with lerna. It's great. . @elie222 Could you link to or show the code that results in this error, including the 'deploy code'? It would also be helpful if you provided steps to reproduce it. . @elie222 I'm going to close this because it's quite difficult from your issue description to tell what state your contracts are in when this error occurs. Feel free to re-open when you can provide more detail.. @JackPickering Thanks, re-opening. Will look into this and see what's going wrong . . . . @elie222 @JackPickering Apologies, it looks we introduced this bug in 4.0.7. Have opened a PR at truffle-contract (ref above) which will hopefully resolve this. Should be included in a patch release scheduled for early next week.. @benjamincburns Thanks :)  This is fixed in 4.1.13. @wbt Excellent thank you. Will write a regression test for this and look for a fix.. @litch This error comes from the client and Truffle reports it. Agree that it's not helpful but Truffle's current ability to evaluate the client state is limited to faithfully reflecting the signals it emits. For what it's worth, there's confusion over this response everywhere - here's a case at Mist.  \nThank you for opening this - it will make it much easier for someone searching the error to figure out what might be going on in their local environment. \nThat said, I'm going to slightly rename the issue and begin tracking this over at truffle-migrate where we are in the planning stages of a major upgrade.  More helpful error management will be a core focus. \n. @reasv It looks like there might be an issue with the way the migrations.js is written - this is a good first reference for how to deploy interdependent contracts. The pattern suggested there is:\njavascript\n// Deploy A, then deploy B, passing in A's newly deployed address\ndeployer.deploy(A).then(function() {\n  return deployer.deploy(B, A.address);\n});\nAlso not sure from your code what you're passing to the TestICO constructor in Solidity. It would make sense if it was an address. In your code I see the data type ERC20 without any definition. \nAdditionally - to debug this issue, you might consider writing some simple JS tests for the deployment. They're easier to work with than the migrations and you'll end up with a clearer understanding of what's going on. The Zeppelin unit tests are an excellent resource for how to do this. You should be able to pass a simple test first:\njavascript\nit('should deploy', async function(){\n  const ico = await TestIco.new(); // <-- What should the constructor argument here be? \n}). @reasv Closing this for house-keeping, please re-open if you discover the underlying issue here is an error in the the way Truffle processes migrations.. Thanks @reasv! . @OfStone What documentation are you referring to? . @OfStone I think this issue is best pursued at web3j. There are a number of open requests for help about wrapping Truffle contracts in that repository here.. @tyndallm Thanks so much for helping @freshonline. \n@freshonline: Did @tyndallm's suggestion resolve things for you? Did you get this to work with Ropsten a few weeks ago? \n\nHow can i check my contract in geth console?\n\nA guide to using the geth console can be found here\n. Closing for housekeeping / lack of response. Thanks all.. @JackPickering I'm going to close this as a duplicate of your other report here. Happy to continue in that thread. Thanks!. Duplicate of #853. Thanks @peara for helping out here! . @ScJa We think this bug is fixed with 4.1.5.  Current behavior should be that if a file has been changed, test will compile all the files that are connected to that file in an inheritance chain. Hoping to minimize this set in an upcoming release, but at the moment, the current compilation level is necessary.\nClosing, please re-open if you continue to have problems with this.. @dc1996226 Thanks for opening. It looks very similar to this issue at truffle-migrate and I think we'll have to investigate further to understand exactly why this is happening. \nFor what it's worth, I see the final transaction in the migration sequence executed successfully on Ropsten here. Will try to reproduce this this week. . Just leaving a note here - @draugaslt  @nklipa13 @atygr - anyone else adding to this thread. This bug is difficult to reproduce and there's some evidence that it's intermittent (see comment in #894). We'd really like to figure out if this is an infura connectivity issue or a problem with migrations logic. Anything you can add here might be helpful. Examples:\n+ it was broken and then somehow started working (plus details!!)\n+ it's always broken and never works \n. @roderik It looks like this might be caused by the HDWallet provider continuing to poll the remote client for blocks after the client disconnects. Does that seem like a plausible description for your case?\nIf so, we now have a simple way of reproducing this behavior and should be able to detect whether or not  hdWallet is being used in migrations / close the provider appropriately. . @roderik Ah that's interesting - I was thinking it's possible that Infura occasionally times out or fails to respond because it's under heavy load. \nWould you be open to testing a possible fix for this? Have published an experimental build that forces truffle to exit after a command is run and would like to see if that short-circuits this problem. It's available by running:\n```shell\nnpm install -g darq-truffle@roderik\ndarq-truffle migrate  # <-- Example command\n```\nNB: truffle develop and truffle console are likely broken by this change - just trying to see if there's a way out the hang.  A little more info on darq-truffle at npm here.\n. @Warrantoken Could you describe the outcome? \nAlso if you have a second, could you uninstall the roderik build and re-install it? Just published another version of that which replaces the hard exit with timer clearing and might be more viable as a PR.. @Warrantoken That contract looks like it might be Migrations.sol? Have you successfully deployed to Rinkeby or Ropsten?\n@Roderik - I will try out Mintnet, looks amazing. One thing that occurs to me is that Parity has a known issue interacting with web3 (see truffle migrate 15) that can be resolved by running the nodes in geth mode. Do you know if that might be relevant? . @roderik May have gotten it to work. Have published (yet another) @roderik build that closes sockets and timers on exit. So:\nnpm uninstall -g darq-truffle\nnpm install -g darq-truffle@roderik\nThen fix the missing await in 2_deploy_contracts.js here. Super impressed with your block explorer and setup btw - this was a joy to debug. \nOutput\n```shell\ncgewecke$ darq-truffle migrate --reset --network mintnet\nUsing network 'mintnet'.\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  ... 0x51500047ae18688efca1c7ef82887aa6868094ab48c91358861399ce85e8ea8f\n  Migrations: 0x0a70c9ab017117be5fa6b6d7b587b89ba548eddd\nSaving artifacts...\nRunning migration: 2_deploy_contracts.js\n  Running step...\n  Replacing MiniMeTokenFactory...\n  ... 0x5314464d47f70aef8ff7a1e08fc345060a5706e1f1f8e9af6a4bf3a45ee9e1d5\n  MiniMeTokenFactory: 0x122a0bd157ecf23406ce4851c93b3c23ffa4eeb6\n  Replacing MultiSigWalletWithDailyLimit...\n  ... 0x25617048235eb8b95769ed2d46c5f2691a0367b7f4a161be32f59bb1c0bf1d95\n  MultiSigWalletWithDailyLimit: 0x8bc790a583789367f72c9c59678ff85a00a5e5d0\n  Replacing DTXToken...\n  ... 0x1dec0ea86f06785e4ad540bac931d6fdb8a7dd732f45c3f02028c5fa5fb7e6c4\n  DTXToken: 0x57a474713701d60a1e3c22e1827bf421f4948006\n  Replacing TokenSale...\n  ... 0xc66a183e36369be5680b47fc90b17fa83510af1a0084c15b1682f5e1cf002773\n  TokenSale: 0x026950f443feb8be15bf0a3b878ba1fe23e0ab61\n  ... 0xe7d853bb1302f0d71fbef36c41f55d41f078e72dee512fcc8589f8851aa39ec0\nSaving artifacts...\nRunning migration: 3_early_sale_participants.js\n  Running step...\nSaving artifacts...\nRunning migration: 4_private_sale_syndicates.js\n  Running step...\nSaving artifacts...\nRunning migration: 5_lastcall_private_sales.js\n  Running step...\nSaving artifacts...\nRunning migration: 6_initial_private_sales.js\n  Running step...\nSaving artifacts...\nRunning migration: 7_cc_private_sales.js\n  Running step...\nSaving artifacts...\nRunning migration: 8_coinfalcon.js\n  Running step...\nSaving artifacts...\nRunning migration: 9_d10.js\n  Running step...\nSaving artifacts...\nRunning migration: 10_ko_private_sale.js\n  Running step...\nSaving artifacts...\nRunning migration: 11_fix_dates.js\n  Running step...\nSaving artifacts...\nRunning migration: 12_test.js\n  Running step...\nSaving artifacts...\nRunning migration: 13_fix_dates.js\n  Running step...\nSaving artifacts...\nRunning migration: 14_fixdates2.js\n  Running step...\n  ... 0xebf6e4ff706373fce43002e04b08d278c037fae99917e46ae8615fa0d2d375c3\n1521471600 BigNumber { s: 1, e: 9, c: [ 1521471600 ] }\n1524754799 BigNumber { s: 1, e: 9, c: [ 1524754799 ] }\n1524783600 BigNumber { s: 1, e: 9, c: [ 1524783600 ] }\n1524869999 BigNumber { s: 1, e: 9, c: [ 1524869999 ] }\n1524870000 BigNumber { s: 1, e: 9, c: [ 1524870000 ] }\n1527375600 BigNumber { s: 1, e: 9, c: [ 1527375600 ] }\nSaving artifacts...\nRunning migration: 15_newdates3.js\n  Running step...\nSaving artifacts...\nRunning migration: 16_new_dates.js\n  Running step...\nSaving artifacts...\nUsers-MacBook-Air:dtx-crowdsale-contracts cgewecke$\n```\n. @roderik Oh good, and thank you! . @Alonski I don't think so. This is happening in a migrations context using HDWalletProvider and is caused by failing to close the provider correctly as Truffle exits a command. #729 looks like its caused by web3 / XHR2 consuming too many port resources in long running tests that make thousands of server requests. . This should be fixed in 4.1.9. Please ping if you continue see this error.. Hi @roderik - Just wanted to leave you a note here - am testing a recent rewrite of the migrations command and might run a few (dozen?) migrations against the minttestnet to get a sense of the errors a Parity cluster sends back when things go wrong. Also to make sure things go right. \nPlease let me know if this inconveniences you in any way and I will stop. Thanks! . @dmitrysenkovich Does anything in this thread at Parity seem helpful? Towards the end they suggest there is a flag setting for the client that might unstick things: \n--reseal-min-period 0\n(Also thanks for such a complete description of your setup - really useful for anyone reproducing this.). @dmitrysenkovich Did @peara's config suggestion fix this? . Ok fair enough @dmitrysenkovich :)\nI'm going to close this because it seems like it's specific to parity POA configuration rather than something Truffle related. \nAs a side note, there's a nice model of parity/truffle integration at colonyNetwork for anyone finding this issue in the course of setting up their project. . @patidarmanoj10 @ZitRos Thanks, we'll publish this change this week. \n@ZitRos Making the compiler version configurable is on our near-term roadmap. This should be possible soon. . @urokuta Apologies we have a few things in flight right before the release. It will be this week. \nBecause a formal release takes a while to execute, we're starting an experiment with publishing a  'nightly' build. It's called darq-truffle and is truffle built at the current state of the develop branch, We may add other branches as needed. \nIf you'd like to test it out (it contains solc 0.4.21) it's available by running:\n```shell\nnpm install -g darq-truffle\nNB: It's not called truffle!\ndarq-truffle compile  \n. @andrisole92 Could you try this again after wrapping both of your provider declarations in a function call as suggested [here](http://truffleframework.com/tutorials/using-infura-custom-provider#configure-your-truffle-project)? e.g:javascript\nlive: {\n  provider: function() {\n     return new HDWalletProvider(mnemonic, \"https://mainnet.infura.io/\" + infura_apikey)\n  },\n  network_id: 1,\n  gasPrice: 2000000000,\n  gas: 6000000\n},\n```. @andrisole92 Closing this for housekeeping. Please re-open if you continue to see this after wrapping the provider as shown above.. @gnidan Ummm. No it isn't. \nFor further reference: @gnidan noted at dev sync that these geth tests will really only run  when truffle main repo is pulled against (typically before a release). To have them run for every module PR, we'd probably need to re-design truffle-ci / travis to use docker compose and split out the pieces like geth, node, etc into logical units. \nSee @gnidan's docker-eth-dev for more.. @ProphetDaniel Which Ethereum client are you using? If possible, could you look at Truffle's advanced configuration docs and make sure you have configured your project correctly? Then post your truffle.js here. \nThe error message comes from the client and means that the client estimated the cost of executing the transaction and discovered it had no possibility of success given the amount of gas the user specified. . @ProphetDaniel Could you try specifying gas and gasPrice fields in your live network? You'll need to figure out where these limits are. I suggest writing a set of tests that simulates the deployment and calling .estimateGas in order to check the range of the values. Another option is this truffle utility: eth-gas-reporter which will produce a gas usage report by watching the execution of the tests.\nIn the stack-exchange post it says you are running against ganache, not infura. Are you actually seeing this error on Ganache? . @ProphetDaniel Gas. . @ProphetDaniel I'm going to close this because you really need to do what is suggested in the comment above to isolate where the problem is. In other words, write tests, get them passing on Ganache. Test your migrations on Ganache. Discover the answers to the following questions by doing that work:\n\nAre your contracts too big?\nIs there an issue with the mainnet client you're using?\nIs there an issue with your wallet?\nIs there an issue with the way the provider is being instantiated: e.g eth-api?\n\nIt's not possible to debug this as presented, and it's likely not a bug in truffle. I'd also encourage you to seek help at Zeppelin's slack if you are using their code. Our gitter is another resource. The github issues here for reporting problems specific to the codebase or proposing features. \nThanks.. @vrogojin Could you close here and open this over there. Their engineer might have a better sense of what the problem might be. \nFeel free to re-open if you believe this problem definitely originates at Truffle & can be reproduced using truffle-hdwallet-provider rather than a 3rd party fork. . @vrogojin Going to close for housekeeping - please re-open if you still need help with this. Thanks!. @ayushtchetu. Your method changes state and will return a transaction receipt rather than boolean value.  \nCould you try removing the constant modifier as well as the function return logic? Instead of checking for true/false, test the recipient account for an increase of value after the method successfully executes using web3 methods. You might also want to test the contract balance before executing isValidBuyer to verify that the contract has ether to send. \nIf the value you transfer is tiny (1 wei is the lowest possible value) it will be dwarfed by the gas costs of executing the transaction. Your ganache accounts are automatically seeded with 100 ether so you should be able to send larger amounts without running out. . @ayushtchetu I'm closing this because seems like a solidity usage issue rather than something truffle specific. Please feel free to re-open if you believe there is a bug on our end. Thanks!. @paliwalg Could you verify you are funding the deployment correctly? See this stack-exchange issue. Additionally, we have a small tutorial on Quorum here you might find helpful. . @paliwalg This may also be a duplicate of or related to #863. . @paliwalg I believe so. Latest truffle is 4.1.3, for what it's worth.\nI hope you don't mind - I'm going to close this as a duplicate of #863 so that everyone with this problem can help each other in the same thread. . @barakman Thanks for this report. Will investigate.. @RobertoC27 There's no official solution -  out of curiosity which OS are you using?. @moda20 It looks like this might be a compatibility issue between Quorum and web3.  TLDR; Quorum seals blocks too quickly for web3 to poll the transaction receipt. This issue has also affected Geth and Parity clients in fast dev mode, although both have resolved it in their own way.\nMore discussion over at quorum here. Ultimately this isn't something Truffle can address at the moment. We rely on web3 0.20.x to manage communication with the client and don't currently provide a way to substitute that service. It's possible quorum has a way to churn blocks with a small injected delay (like geth --dev) which should unstick things, not sure.. @moda20 It might not because someone fixed web3 1.0 last summer to work with Parity instantseal. I wonder if there is a Quorum setting that helps with this? \nAlso, have you looked at the truffle tutorial for Quorum? There's also a requirement that you specify the privateFor key in the migration transactions that's discussed at length there.. @moda20 Did you ever make any headway on this? Someone with a similar issue reported they resolved it by running truffle migrations on the same machine as the node.. @moda20 Ah interesting!! Thanks for the update. \nAre you ok if I close this? Happy to re-open if it seems like there's something structural about how Truffle interfaces with Quorum that needs to be addressed.. @ProphetDaniel Ok excellent. That suggests the issue something to do with the provider / wallet instantiation. For some reason the migration is not getting funded. Could you explain what is happening here in your truffle.js?\njavascript\nlive: {\n   provider: provider('eth-api'),\n   network_id: 1,\n},\nIs it possible there is some problem with the way truffle-safe-hdwallet-provider is working? One way to debug this might be to use the default truffle-wallet deploying to a testnet and see if that succeeds? \n. @ProphetDaniel Could you check or post your genesis.json? There's a report similar to yours here where the underlying issue was the gas limit in the client config. \n. cc: @ProphetDaniel did you ever resolve this?. Closing due to lack of response. @ProphetDaniel Please feel free to re-open if you're still facing this or post your solution here if you found one so other users facing this error can benefit from your work.. @chris-shyft Thanks for such a clear report. \nStarting in 4.0.7, the artifact contains 2 versions of the AST - the legacyAST and solc's newer AST. This duplication was necessary because truffle-debugger requires the latter and it's possible that users consume the former as well.  From what I understand of the above, your proxy measurement for optimization is the size of the artifact file. \nI think in this case we'd have to compare bytecode / binary sizes directly to determine that the optimizer is behaving differently between versions. Those are available as a key on the artifact, in addition to lots of other stuff like the ABI, AST, etc.\nOut of curiosity, what would be your 'top-level' bug description for this? Are you trying to publish to etherscan and it's not happening? \n. @Giulio2002 Could you post reproduction steps? Are you reporting that web3.eth.sign doesn't work in the develop console? \nIt might be easier to work on this problem in a unit test you run with truffle test since it likely requires several setup steps to execute. . @Giulio2002 I am not able reproduce this error (see below)\n\n. @gfijrb We're planning to publish a patch release early this week which includes a solc upgrade. At the moment the only way to manually change the solcjs version in your local environment is to install truffle-core and manipulate its dependencies yourself. Making the compiler versioning more flexible is on our near-term roadmap though. \nClosing as duplicate of truffle-compile 50\n. Closing as duplicate of #854.. @gnidan It's as if CI is pulling a stale version of develop in the push run. One of the tests is failing on the Gathering contracts... step but that log line is no longer in develop. \nThis is CI updatingtruffle-core.\n[EDIT - ignore this.]. Closing as duplicate of #831. @vidhyaramani Hi. This is a good question for the gitter channel rather than the Github issues. Here we just try address bug reports and feature proposals. There's some additional discussion project setup issues in visual studio here.\nClosing as duplicate of #756 . @vidhyaramani Closing as duplicate of #874. Please see the response there. . @paliwalg Thanks for opening and for isolating the issue so clearly. \nI think this should be raised at Quorum. illegal base64 data at input byte 8 comes from the client and as far as I can tell has no antecedents outside this issue, other than here at Tendermint. It's just not something truffle can do anything about. . @paliwalg Apologies, how did you end up resolving the issue in #863? It seems like you were able to migrate successfully for some cases? If you could add some feedback there that would be great :). @paliwalg Ah ok! Are you using web3 1.0? . hello @pkieltyka. Thanks for the link. Also follow 0x and agree it's really well done over there :) \nWill definitely take your suggestion under advisement. \n. Thanks @pkieltyka! . @hskang9 No, it's not done. At the moment we have no official translations and additionally we don't have infrastructure in place to support multi-lingual docs. This will require installing a metal-smith localization package.\nI will ping you back here when this becomes possible. Thanks for opening! . @Pedro-vk Thanks for opening - this is a duplicate of #501. \nThe way async/await integrates with the migrations feature is confusing for a lot of users. truffle-migrate was written before await became common and it stages deployments as 'thennables' rather than executing them as true promises. See this comment for advice about how to resolve. . @chenwenwen11 revert in a migration usually means that a condition you've set using a require in the contract's constructor isn't being met. In this case, TestCrowdsale has a require that says:\nrequire(_goal <= _cap);\nThe values being passed in are: cap: 2 ETH, goal: 500 ETH. \nMore on how require works can be found at the Solidity docs here. @ismaelbej Are you seeing exactly the same error? Could you also show something of the solidity test file so we can try to figure out what's gone wrong here?  Anything you can provide to help us reproduce errors is extremely helpful. \n@woodenchalet If possible could you provide reproduction steps by linking to the tests you're trying to run, or creating minimized example of the problem? We have integration tests at Truffle that validate the solidity testing feature and they pass, so we need more than truffle test as a reproduction step to understand this bug. . @ismaelbej Awesome, thank you. That's perfect - should be able to reproduce with what you've provided.. @woodenchalet @ismaelbej I tried to reproduce this using the MetaCoin project but wasn't able (I'm on OSX). I'd like to figure out if this is Windows specific or if my model for the bug is wrong. My directory structure looked like this:\ncontracts /\n  Parser /\n    Tx.sol\n  Metacoin.sol\n  ConvertLib.sol\n  Migrations.sol\ntest /\n  TestMetacoin.sol\nImports at the top of MetaCoin.sol look like this:\n```javascript\npragma solidity ^0.4.18;\nimport \"./ConvertLib.sol\";\nimport \"./Parser/Tx.sol\";\ncontract MetaCoin is Tx  {\n  ...etc...\n}\n```\nImports at the top of TestMetaCoin.sol look like this:\n```javascript\npragma solidity ^0.4.2;\nimport \"truffle/Assert.sol\";\nimport \"truffle/DeployedAddresses.sol\";\nimport \"../contracts/MetaCoin.sol\";\ncontract TestMetacoin {\n ... etc ...\n}\n```\nOutput is as expected:\nCompiling ./contracts/ConvertLib.sol...\nCompiling ./contracts/MetaCoin.sol...\nCompiling ./contracts/Parser/Tx.sol...\nCompiling ./test/TestMetacoin.sol...\nCompiling truffle/Assert.sol...\nCompiling truffle/DeployedAddresses.sol...\nAlso tried running compile before test and everything worked. Should the project structure above trigger the error based on what you've seen in your own project?  \n. @woodenchalet Ok great, good to know. I'm going to modify the title of your issue to reflect that and look into why the paths aren't being made OS neutral correctly anymore. . @ismaelbej Thanks! That's really helpful. We're going to spin up our windows box and get to the bottom this. . .hopefully fix this quickly. . @craigwilliams84 Thanks for reporting. We made a change in 4.1.5 documented here. It must be causing this issue but it's not obvious how exactly. \nIs your code public? Or could you add any information about your migrations to help clarify what's gone wrong here?. @craigwilliams84 Have opened a PR fixing this. \nUnfortunately I don't see a great interim workaround - a PR for 4.1.5 created a conflict in the way the options are interpreted and -f is currently only being parsed as a boolean.  \nThanks so much for reporting and for providing a reproduction case. . @fawrn Have just tested 4.1.6 against the example @craigwilliams84 produced for this issue above and -f is working as expected. If you have a chance could you run that and a) see if it works on your machine, b) identify any differences between that case and yours? \nI'm on OSX. . @kyriediculous There's are PRs for web3 1.0 in progress across various modules in the project, centered on truffle-contract 95. \nWeb3 1.0's new interface is a significant breaking change so upgrading will require a major release here. We're hoping to make the Web3 1.0 work available on a nightly build fairly soon, possibly next week (pending its completion and review). \nClosing as duplicate of truffle-contract 56. @kyriediculous No worries! Will ping truffle-contract 95 when the nightly ships.. @Nick-Lucas Thanks, this makes sense and is nicely expressed. In practice what people often do is manage their own contract instantiation in a beforeEach block. Example: \n```javascript\ncontract('SimpleContract', function(accounts){\n   let simpleContract;\nbeforeEach(async function(){\n     simpleContract = await SimpleContract.new();\n   });\n```\nAre there use cases where the strategy above isn't adequate? \n. @Nick-Lucas Ah yes, there it is! Right in the title of your issue, sorry. Agree, this option would be nice. \nAn interim workaround is to fetch balances at the beginning of a test and set expectations relative to that baseline. But it would be convenient not to do this for every test. \nAs a note, the value of reverting at the contract suite level instead of per test is that it speeds things up (deploying contracts can take a while). Your point about starting from a clean slate make sense but there's also some execution overhead associated with it in this context. . @Nick-Lucas Ok thanks! Will have a look over there and see how this might be done . . . . @chapati23 AFAIK Infura doesn't support geth's debugging API, possibly for security reasons. The debugger requires that the client implement the debug_traceTransaction endpoint and geth allows that method to pass arbitrary JS code in as an option and run it on the client as a trace processor. It would be risky for a public facing service to allow anyone to do that.\nHowever, you should be be able to debug mainnet transactions via a local geth node by running truffle debug 0x... --network mainnet. \n  . @chapati23 It looks like it depends on which transaction you want to inspect. There's a nice overview of this subject at the Geth docs here.. @chapati23 Ai! That's good to know. . . .thank you. . @luisfidelis Still a few warning in there sorry, they're new to 0.4.23 - sorry. But lots are gone. Going to close this, but we'll continue to revisit.. @lsankar4033 Would you be open to debugging this using geth in dev mode? You can pull down a geth instance through docker and run it without syncing anything (or doing any setup) to see if your migrations execute completely against a test client.\nshell\ndocker pull ethereum/client-go\ndocker run -it -p 8545:8545 -p 30303:30303 ethereum/client-go --rpc --rpcaddr \"0.0.0.0 --dev --period 2\"\nDefine a new network:\njavascript\ngeth: {\n   host: \"127.0.0.1\",\n   port: 8545,\n   network_id: \"*\", // match any network\n},\nRun:\ntruffle migrate --reset --compile-all --network geth\nGeth --dev seeds with one funded, unlocked account so if you're migrating everything from a single account it should work (or fail for the same reason the Rinkeby's failing). I believe you can also specify the version when you pull from docker - there's more info here.\nWe've recently begun running our integration tests in CI against Geth. They include several migrations, and they've been executing successfully with latest Geth (1.8.x). Getting success or failure with the dev client might help isolate what the underlying cause of this problem is. . @lsankar4033 Good to know! No, that's too bad about geth dev. I've been using the latest build without any issues. . . . @ProphetDaniel Have never had to do this. Do you typically need to enter a password in order to clone a repo? This could be something worth raising at meta.. @ProphetDaniel Is it ok if we close this? Agree this is annoying for your use case but perhaps it would be best to track this issue at #879 since there isn't an obvious fix on Truffle's side given the current project structure. . @chenwenwen11 It looks like you are using a Zeppelin contract called TimedCrowdsale which has a constructor that checks to make sure the crowdsale start time value is greater than the chain value now. \n```\nfunction TimedCrowdsale(uint256 _openingTime, uint256 _closingTime) public {\n    require(_openingTime >= now);\n    require(_closingTime >= _openingTime);\nopeningTime = _openingTime;\nclosingTime = _closingTime;\n\n```\nIn your migrations you are setting startTime to the current system time. When the contract executes now is later than startTime causing the transaction to fail. Could you try adding some spare time to the line below in your migrations and see if that works?\njavascript\nconst startTime = Math.round((new Date(Date.now()).getTime())/1000); // <--- Too soon! \nconst endTime = startTime + (86400 * 2); // 30 days;\n. @chenwenwen11 Unfortunately lots of people are seeing this error at the very end of their migrations sequence when using Infura . . . there's an open issue for that at #852. In that case, the deployments are actually successful - e.g. you should be able to see that your contract deployed to Ropsten if you check the contract address displayed in the migrations.  \nDoes #852 describe what you're seeing? If so we should close this as a duplicate and we'll try to get to the bottom of the problem in that issue.. @chenwenwen11 Out of curiosity - the error you were seeing with the migrations just stopped happening after your removed the build folder and remigrated? \nHow are you sending Eth to the contract? One thing I recommend is using the unit tests in Truffle to experiment with writing code to make calls to the contracts using the ganache test client. If these succeed they will usually work on a public network as well. . @chenwenwen11 I think you've done the right thing by minimizing the problem \nDoes the contract you're sending Ether to have a fallback function that is marked payable? I'd really encourage you to read through the Solidity language documentation. It's a lot of information but it's necessary to be familiar with that base of knowledge to debug things effectively. . @chenwenwen11 I'm going to close this for house-keeping because the original topic of the issue seems resolved. Thanks so much for your help diagnosing the Infura migrations problem. . @vidhyaramani Could you try upgrading to the latest version 0.4.16?  We had an import path resolution bug on Windows and it's fixed in the newest patch release.. @vidhyaramani Apologies - there's a typo in my comment. The latest version is 4.1.6 and you should be able to install it with:\nnpm install -g truffle\nWindows specific installation instructions can be found here. @vidhyaramani I'm going to close this issue since your initial problem seems to be resolve with an upgrade. It looks like you've begun experimenting with the MetaCoin contract - this is a good place to start. I would recommend using the unit tests feature truffle test - and writing your tests in javascript -  to get a sense of how compilation works, how to make calls to contracts etc. There are also a lot of great truffle tutorials online and at our website, in addition to documentation. . @TovarishFin We opened PRs bumping  solc this morning. There's a small issue with 0.4.22 breaking the truffle-debugger which we have to resolve, but goal is to publish a patch w/ 0.4.22 ASAP - in the next couple of days hopefully. . @k06a Ok great - we'll release with 0.4.23 this afternoon as long as everything runs clean and they list the release on Github here.. Thanks all! Thanks @TovarishFin for opening. Upgraded in 4.1.7. @melnikaite Thanks for this idea. At the moment we don't keep track of the optimization level in the artifact but I believe this will be addressed in the next major release. . Published w/ 4.1.7. @Orangem21 This looks like a compilation error produced by solc because your statement doesn't conform to the rules of the language (in solc v0.4.21). If you'd like help with this the solidity gitter is a good place to start. \nClosing - happy to re-open if I've misunderstood the issue here.. Just a note - this build validated in #905. . @satyamakgec Could you see if this fixes the global installation for you?\n```\nnpm uninstall -g truffle\nnpm uninstall -g solc\nnpm install -g truffle\n. RNanwani could you also try uninstalling solc globally?\nnpm uninstall -g truffle\nnpm uninstall -g solc\nnpm install -g truffle\n```. @RNanwani Could you show the code that's triggering this error? I will try to reproduce it.. @RNanwani \nYou will need to upgrade truffle to a version that supports the constructor syntax. It became possible with solc 0.4.23 and truffle 4.1.7.\nI don't understand how you're getting 4.0.4 from the instructions suggested above - the current release is 4.1.12. @RNanwani Can you install truffle 4.1.7?\nnpm install -g truffle@4.1.7. Thanks @maraoz, this seems right. \nAfter some discussion with @gnidan, have implemented this as an option in truffle-core 132 e.g:\ntruffle exec [-c | --compile] <script.js>\ncompile overwrites the artifact bytecode so it might be safest to require the user express a clear intent here - it's a change in default behavior that saves to file. \nShould be in the next patch release, thanks again. . Published with 4.1.8 . Hello @hello-i-am-venom. \nCould you give a simple example of the issue you've described? . @hello-i-am-venom Yes, this is expected. migrate reset doesn't erase the previous contract from the chain but runs migrations again from the beginning. Migrations are staged in sequences because in a real project deployment you might do them over a long period. More on this here.  \nIf you'd like to access a specific instance in the console you can use the MyContractName.at(<address>) method from truffle-contract (docs here). The address the contract was created at should be listed in the migrations log output.. @hello-i-am-venom Are you satisfied with this explanation? Is this issue closable?. Closing - @hello-i-am-venom please ping if you continue to have trouble with this.. @vidhyaramani Hi. Within truffle console you don't need to prefix the commands with truffle. To migrate, just type migrate.  There's a list of available commands here.\nCould you check to see if removing the word 'truffle' from your command solves this problem?. @vidhyaramani Are you still seeing this syntax error after making the change suggested? If so could provide steps to reproduce it?\ntruffle-migrate deploys the the contract. Please see the truffle documentation here for more.. @vidhyaramani You are seeing this message: SyntaxError: Unexpected identifier after running migrate in truffle console? Please list steps to reproduce the error you're seeing, including the output you see in your terminal. . @vidhyaramani Could you post a screenshot of your terminal where the command you're using is visible as well as truffle's response?. @vidhyarama Is the command you're using and the way you used it visible in what you just posted? . @vidhyaramani I see the error you're describing when I do this:\ntruffle console\ntruffle(development)> truffle migrate\nError goes away when I do this:\ntruffle console\ntruffle(development)> migrate\nIs there anything different about the way you are doing it? . @vidhyaramani Yes. I've done the following. In an empty folder\ntruffle unbox metacoin\nSet up truffle.js (or truffle-config.js)\nmodule.exports = {\n  networks: {\n    development: {\n      host: \"127.0.0.1\",\n      port: 8545,\n      network_id: \"*\" // Match any network id\n    }\n  }\n};\nIn a second terminal tab launch the client:\nganache-cli\nIn the first tab:\n```\ntruffle console --network development\ntruffle(development) > migrate\n.. etc ..\nUsing network 'development'.\nRunning migration: 1_initial_migration.js\n Deploying Migrations...\n ... 0xeee49866e9d5889f909477b628b19e6ddf11e274cd62b2f8ad2c2bc2469f3326\n Migrations: 0x48c2c18a8ab877d350f1d4849d06089fd7e0f0e7\nSaving successful migration to network...\n ... 0x85cebe250754642574fad883ff79f41b8916737637fa71002040c2e03d2e7b5a\nSaving artifacts...\nRunning migration: 2_deploy_contracts.js\n Deploying ConvertLib...\n ... 0xa5e0d95aa1d9baa1f5ae558a9dbc7546b5057075813ecaaf9c9342cab7a9cbb8\n ConvertLib: 0x8154c2fae504a6c045fa5c475ecda86977a0803a\n Linking ConvertLib to MetaCoin\n Deploying MetaCoin...\n ... 0x35649421b5635a3f58fa59d10616a206769825ebe6fb5440c9a12c7fc9726a98\n MetaCoin: 0x8548d05328106e07224c9647347d2362dbb1f9d7\nSaving successful migration to network...\n ... 0xf78116512b3d89483a023dd4da9c1ec6efdccd5d4aaf169c656688d3cdcb50de\nSaving artifacts...\ntruffle(development)>\n``. @vidhyaramani I'm going to close this issue I'm sorry. I would advise you to read through the [documentation](http://truffleframework.com/docs/) and familiarize yourself with the plaform, following each step in a tutorial. We have some available on the site. The GitHub issues are for bug reports and feature requests and it looks like your initial report about the syntax error is not what's at issue here anymore. . @sahar-fehri Could you check that there are no other clients running on8546? You can do this by running:lsof -iand killing any processes on that port. You could also try changing the port ganache launches on and updating the port in yourtruffle.js`.\nIf that doesn't work, raise the default limit on ganache-cli by adding the option:\n--gasLimit 8000000\nand increasing your truffle.js gas as well.  . @sahar-fehri If you link to the project I will take a look. Is that possible? . @sahar-fehri Perfect thanks!. @sahar-fehri Looks like you resolved this, going close but please ping if that's not the case.. @Arvanaghi I can't reproduce this. On OSX, using 4.1.7 I ran \n+ truffle init in an empty folder. \n+ truffle test.\nOutput: There's a compilation warning but that's it:\n\nIs there something missing in the reproduction steps?. @cbruguera Could you post the contents of your truffle.js?\n . @auser I made a simple test case to try and reproduce but got expected behavior:\nContract\n```javascript\npragma solidity ^0.4.21;\ncontract Senders {\n  event IdentityOfSender(address sender);\nfunction who() public {\n    emit IdentityOfSender(msg.sender);\n  }\n}\n```\nTests\n```javascript\nconst Senders = artifacts.require('Senders');\ncontract('Senders', function(accounts){\n  let instance;\nbefore(async () => instance = await Senders.new());\nit('should send from account[0]', async function(){\n    const result = await instance.who();  // <--- No from param, uses account[0]\n    assert(result.logs[0].args.sender === accounts[0])\n  });\nit('should send from account[1]', async function(){\n    const result = await instance.who({from: accounts[1]});\n    assert(result.logs[0].args.sender === accounts[1])\n  })\n})\n```\nIf you have a chance could you identify what is different about your case from the case above?. @auser Why are there two from objects? I'm having trouble understanding where this problem originates. The truffle-contract behavior seems correct.  Could you try to reproduce this using the simplest possible example so we can isolate the source of the issue?. > Could you try to reproduce this using the simplest possible example so we can isolate the source of the issue?\nThere isn't a shortcut here I'm sorry - you have a simple example in my response above. Modify it to reproduce, thank you. . @auser Thanks! That looks good - it's going a bit before I can get back to this, this morning. Apologies. @auser I ran your example, modifying it slightly as below. (Have left the .sol untouched)\n```javascript\nconst MultiSig = artifacts.require('./MultiSig');\ncontract('MultiSig', ([owner, user1]) => {\n  let multisig;\nbeforeEach(async () => {\n    multisig = await MultiSig.new();\n  });\ndescribe('events', async () => {\nit('fires MultiSigSigned when signed', async () => {\n  const {logs} = await multisig.sign(0, {from: user1});\n  console.log('owner --> ' + owner);\n  console.log('user1 --> ' + user1);\n  console.log('Logs --> ' + JSON.stringify(logs, null, ' '));\n});\n\n});\n});\n**Output**javascript\nowner --> 0x627306090abab3a6e1400e9345bc60c78a8bef57\nuser1 --> 0xf17f52151ebef6c7334fad080c5704d77216b732\nLogs --> [\n {\n  \"logIndex\": 0,\n  \"transactionIndex\": 0,\n  \"transactionHash\": \"0x34c2a5a2f0cf70bfa51a082464971d740945641b8f89ca11e7f8cd2467ab0cf6\",\n  \"blockHash\": \"0xe0e10452242bf3a2f6cd9e2f11d7b4eaed9341b6a6e78b62b51a51e2f8e786c4\",\n  \"blockNumber\": 4,\n  \"address\": \"0x345ca3e014aaf5dca488057592ee47305d9b3e10\",\n  \"type\": \"mined\",\n  \"event\": \"MultiSigSigned\",\n  \"args\": {\n   \"index\": \"0\",\n   \"signer\": \"0xf17f52151ebef6c7334fad080c5704d77216b732\"\n  }\n }\n]\n```\nThis looks correct to me. Output is the same on 4.1.5 and 4.1.7. Is it possible that one of your versions has broken during debugging? Another possibility is that I'm running the default ganache-client (with deterministic addresses) and you're launching it separately and specifying duplicate addresses? . @auser That makes sense, but it's just not clear how you're getting into that state. Your test case seems to run ok. . . . Yes everything's open-source, the bundle is just a webpack of the entire project. I think you're looking at the wrong level. You've modified the source somewhere, but another person with a clean truffle can't reproduce the problem with your test. Rip out truffle and put it back in again?. Oh yeah that's super weird! No worries, glad it worked.. @emmonspired No, I'm not sure what's going on here. If you discover something please report. It's possible there's a compatibility issue between chai-bignumber (at some version) and truffle. Zeppelin is using them in combination without any obvious issues. They're at:\ntruffle: 4.1.5\nchai-bignumber: ^2.0.0. @nbauernfeind Was not able to reproduce this unfortunately. We run MetaCoin's solidity tests as part of our CI and those are passing as well. In your issue you've left the client info out - could you clarify how you're launching the tests?\nI'm also on OSX, in an empty project, running a fresh install of 4.1.7. Added your test and ran:\ntruffle test\nOutput\n\nCan you identify a difference here? . @nbauernfeind  Ah yes that makes sense, good to know. It was modified to clear warnings produced by solc 0.4.22. Could be that the new solc compiles things a little more expensively as well. . .. @aspeziale This is a good observation. Hope you don't mind - I'm going to change the title of your issue to be more specific about what a wrong parameter is. . @aspeziale It's just the way Javascript is - you're not doing anything wrong. A string with length is 'truthy'. The underlying issue is that Solidity is strongly typed and JS is not. . @vidhyaramani  Are you using VSCode? . @vidhyaramani This appears to be a bug in VSCode, discussed in #756. It looks like the VSCode project (not truffle) has to be deleted and recreated for VSCode to recognize the files.\nClosing as duplicate of #756\n. @Superjisan. I'm also on OSX. Below is my output for installing. Can you find a difference we can test against?\n```\n\nsystem_profiler SPSoftwareDataType\nSoftware:\n\nSystem Software Overview:\n\n  System Version: macOS 10.13.1 (17B1003)\n  Kernel Version: Darwin 17.2.0\n  Boot Volume: Macintosh HD\n  Boot Mode: Normal\n  Computer Name: User\u2019s MacBook Air\n  User Name: User (cgewecke)\n  Secure Virtual Memory: Enabled\n  System Integrity Protection: Enabled\n  Time since boot: 2:04\n\n\nnpm --version\n5.6.0\nnode --version\nv9.5.0\nnpm uninstall -g truffle\nremoved 1 package in 4.561s\nnpm install -g truffle\n/Users/cgewecke/.nvm/versions/node/v9.5.0/bin/truffle -> /Users/cgewecke/.nvm/versions/node/v9.5.0/lib/node_modules/truffle/build/cli.bundled.js\n+ truffle@4.1.7\nadded 92 packages in 8.162s\n```. @Superjisan I'm using a node version manager called nvm because Truffle is built for 6.9.1 and sometimes it's helpful to toggle down and make sure everything works.  \n\n\nHow are you installing? From node? \nwhen did you install Node?\n\nOne thing that occurs to me is that if this problem had begun with 4.0.7 we would have had dozens of reports since then, but yours is the first. Perhaps something has changed outside truffle more recently that's causing it. Based on the sample of OS data above doesn't seem like there's much of pattern there. . .  \n@Joebob12 Anything else you can add might help isolate the cause of this, thanks!\n. @Superjisan Oh, that's strange. Node should be backward compatible to any version . . . . @collincusce Are you also seeing this installation problem? Trying to figure out how widespread this is.. @Superjisan Did this ever work itself out?. Ah awesome!! Thanks @Superjisan. . @kermankohli Hi, just peeked at one of your test files and found this. It's a describe block whose callback is async. This isn't compatible with mocha and is a really common source of non-deterministic test behavior. When you're writing using the await pattern it's super easy to do this by accident. \nYou might comb through the code and make sure everything async/await is as it should be. . @kermankohli I wonder if it's related to the mix of it and describe blocks in that suite. should have correct computed hash sits in it's own async it, while the tests around it are encapsulated in sync describe blocks. The contract is being created once at the top of the file in a before, so the tests all share that object and its state is changed over the course of the VolumeSubscription suite. \nIf you change before to beforeEach (not sure that's feasible in your case) does that normalize the run? If so wrapping singleton its' in a describe might also help.  . @kermankohli Mmmm. Maybe something about the way the times are being computed? What if you slow those tests way down by inserting at the top of each?\njavascript\nawait setTimeout(() => new Promise((accept) => accept()), 1000)  // Or something like this . . .. Lol ok great!. @kermankohli I don't know - it must be something about the time values as they execute. Maybe the resolution is too low? If you put logging statements in to see what they are, the bug would probably go away too because those introduce their own delay. . @kermankohli Does the contract rely on the block timestamp or now to evaluate past and future? . @kermankohli Yes - this is a big issue. Effective resolution for block.timestamp is the amount of time it takes to mine a block. On mainnet  'many' seconds, on the test client, milliseconds. Ultimately the contract's idea of what time it is determines whether or not that require statement is true or not. . There's some information about on how Solidity thinks block.timestamp should be understood. It also looks like the expected precision is 1 second and believe that ganache respects that so suggestion above about ms is just wrong. \nThe safest thing might be to fetch the current block, read the timestamp, and generate a timestamp that is definitely earlier (or later) than what ganache thinks the time is. . @kermankohli This is a very interesting topic today - more in depth discussion at #921 as well. . @kermankohli Should we keep this open? . @kermankohli Ok, I'm going to rename this issue a little to narrow its scope. Please ping or close if you discover something. . @kermankohli Did you ever get to the bottom of this? . Ok, well thanks for opening - I'm sure this will be helpful to others. Closing since you found a way out. . @barakman Nice catch!!. @vzts Great issue! Thanks for such a clear description. Will look into this and see what's going on. . @vzts Will point @benjamincburns here and get his sense of this. Thank you so much for investigating. Are you using web3 1.0 for the comparison?  . @vzts Yes, it looks to me like this might need to be handled at ganache-core. calls there are executed by creating a (fake) block whose timestamp is set here. It should probably be reset to the correct value (e.g. the latest block value) in processCall.  . @vzts Update, just had a chat with @benjamincburns, the engineer who writes ganache.  He suggested there's enough ambiguity about correct behavior here that we should really look at how geth and parity handle this. If they both let the clock tick, ganache should tick. If only one lets the clock tick, ganache should side with keeping block.timestamp fixed at the latest block because that's more intuitive (and more useful for tests ).. @vzts Update: Have run your test against both geth dev and a Parity POA network and both report a static time within the block, so Ganache's behavior is non-normative. Will report back to @benjamincburns and open a PR over there fixing this. \nHope you don't mind but I'm going to close this and open a referral issue over there. Thanks again for discovering this.. Thanks @saradotramli :)\n@lancesf There's also more window's specific help in the Truffle documentation here.\nClosing since this issue is duplicate / addressed by the docs.. @saradotramli Thanks for raising this.truffle-contract supports targeting a specific network at the 'class' level - e.g. you set the network of the contract abstraction and any instances created from it are on the named network. The API is here. Does that seem like it would work for your use-case? \n. @saradotramli Is this close-able?  . Closing for house-keeping, please ping if the comments above don't resolve this for you.. @githubcyc There are several options. If you're using the migrations as intended it should only be deployed to a given network once and then provide your project with an on-chain record of the stage you've reached in your project deployment.\nIf you don't want it to run at all you could delete the file and re-order the numerical sequence of the migrations filenames. You could also just comment out that deployment in 1_initial_migration.js if you think it might be useful later.\n```javascript\nvar Migrations = artifacts.require(\"./Migrations.sol\");\nmodule.exports = function(deployer) {\n  //deployer.deploy(Migrations);  // <-- Skip for now\n};. Closing this since it seems like it's addressed by our documentation, but please ping to re-open if you continue to have problems with it.. @mahiruddinseikh Apologies - you've provided almost no information in your issue that helps people identify what the problem is or what context you're running in. Closing - if you re-open please fill out each field in the provided issues template.. @Warrantoken This looks like the same problem that's being reported in #852 and is Infura specific. We're trying to get more information about why this happens:\n+ How many blocks over 50 is it taking before the migrations proceed to the Saving artifacts step?\n+ In #852, peoples' contracts are actually getting deployed and the problem is truffle crashing at the very end. Is this the case for you? If you see the migrations output a contract address you should be able to locate it on etherscan. \nPossibly related to truffle-migrate 15. One difference in your two deployments is that the successful case runs on an exclusively geth client network, whereas mainnet could be anything. \nCould you run the following at the command line (you'll need to substitute your infura token for <INFURA_TOKEN>) and report which client infura is running when handling your requests?\nshell\ncurl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"web3_clientVersion\", \"params\": [], \"id\": 1}' https://mainnet.infura.io/<INFURA_TOKEN>\n. @Warrantoken Going to close this as a duplicate #852 - now believe this may be caused by Infura closing the connection while truffle-hdwallet-provider continues to try to poll them.  . @sahar-fehri Could you post the error? . @sahar-fehri Closing due to lack of response, please feel free to ping if you're still facing this issue.. @kimyd If you quote the byte values does that result in correct formatting? \njavascript\nvar myData = [0x01, 0x02, 0x03, 0x1f];         // <-- Example\nvar myData = ['0x01', '0x02', '0x03', '0x1f']; // <-- with quotes\nFor reference, thread on this topic at StackExchange.. @Aniket-Engg Thanks for raising this. Unfortunately updating the Migrations.sol to latest solc would be a breaking change for users running truffle init with earlier versions of truffle. The template for a bare-box project sits here and is strongly decoupled from truffle itself. At present the best work-around is to update that file following the warnings solc provides - there's just a couple things.  \nWe probably need to implement truffle-core 117 to manage this requirement appropriately. Another approach that's been discussed is removing Migrations.sol from bare projects altogether and having truffle manage that feature 'magically' behind the scenes. . @barakman If you quote the bytes when you pass them into the function\njavascript\nawait myContract.func(\"0x00012345\");\ndoes that resolve it? Think JS is interpreting the input as a number rather than bytes and Solidity formats these differently. It looks like uint is left-aligned in the word, bytes right-aligned, based on  encodings docs at over at solidity here.. @barakman Honestly not sure why this is either - it might be related to the issue of different byte type sizes and the way they are padded. Have just been looking at this topic this morning  and there's a StackExchange thread about it here. @barakman Is it ok if I close this?  Seems like quotes is just how web3 manages bytes. . @mahiruddinseikh. The core of the error you received is:\nSampleCrowdsale contract constructor expected 7 arguments, received 6\nPlease see check your migrations js code to make sure you're passing the required arguments to contract constructor. There's some more help about that process here\nClosing as duplicate of #811  . Closing as duplicate of #934.. @arnoudbevers Could you show the code where you are instantiating a Person e.g. running its constructor? . @arnoudbevers Yes. Will investigate this - thanks for such a detailed and clear report! . @arnoudbevers Yes I will test on ganache, and if the problem isn't present there I'll test on geth dev as well and see if I can reproduce. . @arnoudbevers Hi. I couldn't find any variance around compiler version and was able to get the tests passing on geth dev. (I added deployer.deploy(Root) to your migrations). \nIn the tests, you are assigning a web3 contract instance to rootInstance and then calling its methods directly:\njavascript\n// 2.2 Save root instance\nrootInstance = deployedInstance.contract; // <-- web3 instance, not TruffleContract instance\n...\n// 4.2 Save Person instance\npersonInstance = deployedInstance.contract; // <-- web3 instance, not TruffleContract instance\n...\n// 5. Call addPerson()-function on root contract - transaction function!\nreturn rootInstance.addPerson(personInstance.address, { from: develop });\nThat's fine, but one thing truffle-contract does behind the scenes is wait for transactions to be mined and return a receipt. Web3 behaves differently, immediately returning a transaction hash.  The next steps in the test are being run before addPerson has had a chance to finish execution on the chain. Could you see if changing 2.2 and 4.2 to the following fixes the test for you? \njavascript\nrootInstance = deployedInstance; \npersonInstance = deployedInstance;\n. Thanks @arnoudbevers, unfortunately I don't know of a remedy. You might raise this at Quorum in case they know of a work around.  \nIs it ok if we close this issue since it's specific to an older Geth version? . @arnoudbevers Just leaving a note here about geth dev since that wasn't clear. You can run a geth test client locally with very little setup by:\n``shell\n$ docker pull ethereum/client-go:latest  #latest` is a version. See hub.docker for more.\n$ docker run -it -p 8545:8545 \\\n                 -p 30303:30303 \\\n                 ethereum/client-go:latest \\\n                 --rpc --rpcaddr \"0.0.0.0\" \\ \n                 --dev --dev.period 2\n``\nIt comes with a single funded unlocked account.  It's slower thanganachebut can be quite helpful for debugging when you are getting different outcomes on different clients. . @phillipgibb This might be Remix related. I've run your code within Truffle usingtruffle test` and been unable to reproduce. Can you see if the test below suceeds for you?\nTest\n```javascript \nconst Test = artifacts.require('Test');\ncontract('Test', function(accounts){\n  it('should selfdestruct', async function(){\n    const instance = await Test.new();\n    try {\n      await instance.destroy();\n      console.log('Success')\n    } catch(err){\n      console.log('Failure: ' + err);\n    }\n  });\n})\n```\nOutput\n```shell\ncgewecke$ truffle test --network development\nCompiling ./contracts/Migrations.sol...\nCompiling ./contracts/Test.sol...\nContract: Test\nSuccess\n    \u2713 should selfdestruct (98ms)\n1 passing (115ms)\ncgewecke$\n``. @phillipgibb Are you certain you're connecting toganache? Can you see log output from the terminal where it's running? . Ah one difference I notice in the ganache log output is thateth_estimateGasisn't being called in the Truffle test. ~~Suspectethereumjs-vmis not calculating this correctly forselfdestruct`.~~ Could you try specifying a gas amount for your transaction? . @phillipgibb It looks like the underlying issue is being tracked at ganache-core in issue 26 and relates to gas estimation on transactions that refund gas. Is it ok if we close this and link there from here? . Thanks @tomcbean :) \n@quantumproducer At the moment, the solc version is tightly coupled with the truffle version. See the releases to get the one you need. \nMigrations.sol is maintained as part of a separate truffle-box and needs to work with multiple versions of the compiler, so we're letting it float lower than latest solc. See #931 for more detail on this. \n. @toannn-ibl I think reset is taking precedence here. Do you get the behavior you're hoping for if you only use -f 3? That should run only the third migration.. @ahester57 Thanks for opening this! truffle-solidity-loader hasn't been actively maintained for a while and isn't formally part of the suite of tools. What context are you using it in? . Ok great, thanks @ahester57 - good to know. We should be able to move mocha up here (will do that in the morning) and will open a referral issue over at the react box and see what's possible there.. @ahester57 Thanks again - have bumped mocha (renamed your issue to reflect the source of the problem here) and opened a referral over at the react box. Should be fixed in the next patch release. . @frangio Planning for monday? It bumps solc up to 0.4.24 so was hoping to let that settle for a few days. Do you need it for something specific? [EDIT now I see your issue links]\nThere's a \"nightly\" version of truffle now, published to npm as darq-truffle which is the current state of the develop branch if you need to run it today. \nnpm install -g darq-truffle\ndarq-truffle migrate --network ropsten # Example command. Published with 4.1.9, thanks again @ahester57 .. @frangio How are you getting the warnings? When I install I see this:\n```\ncgewecke$ npm install truffle\nnpm WARN nn@1.0.0 No description\nnpm WARN nn@1.0.0 No repository field.\n\ntruffle@4.1.9\nupdated 1 package in 4.962s\n[+] no known vulnerabilities found [132 packages audited]\n\ncgewecke$ npm audit\n                   === npm audit security report ===\n\n[+] no known vulnerabilities found\n    Packages audited: 132 (0 dev, 0 optional)\ncgewecke$ \n```\nIt's a little confusing but because Mocha doesn't webpack well it's a dep of truffle - set here and then injected into the bundle here. Could be something's going wrong there though.. @frangio 4.1.10  has mocha 4 in the core. Thanks for pinging this.  . 4.1.10 got lost at npm during an outage. Now fixed at 4.1.11. @ArranMcC To use deployed you'll need to run migrate first. This deploys your contracts to the test chain managed by the develop shell. The metacoin box is a working example you might find helpful, and check out the migrations documentation for help on writing deployment scripts:\n```shell\n$ mkdir metacoin\n$ cd metacoin\n$ truffle unbox metacoin\n$ truffle develop\n..... client launches ....\ntruffle(develop)> MetaCoin.deployed()\nReferenceError: MetaCoin is not defined . # <--- Your error\ntruffle(develop)> migrate                 # <--- Run migrate \nCompiling ./contracts/ConvertLib.sol...\nCompiling ./contracts/MetaCoin.sol...\nCompiling ./contracts/Migrations.sol...\n.... etc ....\nWriting artifacts to ./build/contracts\nUsing network 'develop'.\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  ... 0x4cb1916eb9734e8622d8e49a9a1a96c8338f8065f9ccee3963ff9dbc67fc8ae0\n  Migrations: 0x8cdaf0cd259887258bc13a92c0a6da92698644c0\nSaving successful migration to network...\n  ... 0xd7bc86d31bee32fa3988f1c1eabce403a1b5d570340a3a9cdba53a472ee8c956\n..... etc .....\ntruffle(develop)> MetaCoin.deployed()\nTruffleContract {\n  constructor: \n   { [Function: TruffleContract]\n     _static_methods: \n      { setProvider: [Function: setProvider], \n``. @ArranMcC Closing for housekeeping - please ping if you're still having trouble with this. . @cmaliwal [This tutorial](https://medium.com/@s4saif.121/demystifying-ethereum-private-blockchain-74f78ddf76fb) is a really good resource. Not sure exactly why you're not able to connect to but I see a mix of rpc / ipc in your geth launch script, and you're also using using APIs likeminerandpersonal` in the console without listing them. With private net it's often helpful to do everything explicitly:\nOther possibilities:\n+ set a network id in the client launch and in the truffle config\n+ specify the network you are migrating to: truffle migrate --network development. @AwesomePenguin The debugger needs to match source code and compilation products like the bytecode and source map to the opcodes generated by a transaction. You don't have to have actually deployed the contract, but you need all that meta data, compiled with the same compiler as the deployed version, listed under the same network key your build folder. . @ricochen Wasn't able to reproduce this. Truffle seems to be installing normally - also on OSx, npm 5.6.0...\nAre you still having this problem?. @ricochen Thanks! Ok if I close? Out of curiosity what was the issue?. @ricochen Might be caused by being behind a proxy: see this. @ricochen - The different networks should be listed together under the networks key.\njavascript\nmodule.exports = {\n    networks: {\n        development: {\n            host: \"localhost\",\n            port: 8545,\n            network_id: \"*\" // Match any network id\n        },\n        rinkeby: {\n             host: \"localhost\",\n             port: 8545,\n             network_id: \"4\", // Rinkeby ID 4\n             from: \"0xf6e9dc98fe5d2951744967133b3c31765be657c1\" // account from which to deploy\n        }\n    },\n};. @kenshyx I think the upgrade to npm 6 is a little buggy. Are you able to install any packages globally? Recently did this and had to completely re-install nvm / npm. . \ud83d\ude42 . @dwalintukan We've merged PRs for this to develop and are planning to publish a patch release early next week, probably Monday (UTC -7).\nTruffle's nightly build darq-truffle already contains this change and is available by running:\nshell\n$ npm install -g darq-truffle\n$ darq-truffle migrate --network ropsten # Example command. Published with 4.1.9. Thanks for opening @dwalintukan. . @quantumproducer This error is caused by using an older version of solc that doesn't support the constructor keyword. Please try:\nnpm uninstall -g truffle\nnpm install -g truffle\nAlso:\njavascript\npragma solidity ^0.4.28;  // <--- Version does not exist. Truffle 4.1.8 uses 0.4.23.. @bambalaus Could you provide more detail about how you're setting up your truffle project? Have you run truffle unbox metacoin? Have you modified it at all? \n. Oh good, I'm glad the imports are working. The messages you are seeing all look like compiler warnings which you can safely ignore for that library - it just provides utilities for the testing framework. Are the tests executing correctly?. @bambalaus I'm going to close because it looks like original problem is resolved. Please ping if you continue to have problems with this.. @hefgi Agree this would be nice, especially for truffle init. Cross referencing to truffle-core 117 which would solve several other issues as well.\nWorkaround\n```\nFrom within a project that already has lots of contents\nmkdir truffle-bare\ncd truffle-bare\ntruffle init\ncd ..\nmv truffle-bare/* .\nrm -rf truffle-bare\n```. @VladLupashevskyi Thanks for opening. @gnidan and I looked at this issue this morning and agree the current strategy for interpolating library names into the binary is bad/unsustainable. He suggested we follow the spec being implemented at the Ethereum Package Management project. Discussion here and spec work here. \nThis problem will likely not be addressed at Truffle until work on overhauling the contract artifact is complete, scheduled for ~around~ the next major release this summer, possibly just after. . Thanks @drasko - this should be fixed now.. @nukec Unfortunately no. We're tracking this as a feature request at #827 and will hopefully include it in the next major release of Truffle. \nThanks for opening, closing as duplicate of #827. \n. Hi @a186r. Does something like this work?\n```shell\nExample for truffle test where truffle is installed globally\n$ which truffle\n\n/usr/local/bin/truffle\n$ node --max-old-space-size=4096 /usr/local/bin/truffle test\n``. Sweet!. Yes this is a good suggestion. There's actually some code to do this in a different context attruffle-require[here](https://github.com/trufflesuite/truffle-require/blob/develop/require.js#L45-L78) and agree it makes sense thattruffle-resolver` should behave this way.\n\n@vdrg We have been looking at lerna a bit here so quite curious about it. Some questions:\n+ what does your project structure look like? Do you have multiple contract packages that consume the same set of dependencies hoisted to the root directory?\n+ is it required that the dependencies sit in the root? Are their drawbacks to packages maintaining their own node_modules?. @vdrg Ok sounds good, thanks for the explanation. Super helpful. . @vdrg This should be fixed in 4.1.12. Please ping if it's not working. Thanks :). @gerchicov-bp This should be possible using a library that parallelizes promise execution. This one looks like it might work nicely for migrations. It would look something like this:\n```javascript\nconst parallel = require('async-await-parallel');\nmodule.exports = function (deployer) {\n  deployer.then(async () => {\n    return parallel(\n      deployer.deploy(MyContract1),\n      deployer.deploy(MyContract2)\n    )\n  })\n}\n``\n. @pubkey Ah yesPromise.all` is parallel. Thank you. . Going to close this since it seems like this doesn't require any special features - JS alone is adequate. Please ping if you're still having trouble with it. . @nukec Thanks for reporting. It looks like the npm had serious problems Monday night. Some packages published during the outage got lost in the registry. \nRepublishing in the next hour at a new tag.  . Believe this is fixed now. Please ping if you continue to have problems getting the latest. \n```shell\n$ truffle version\n\nTruffle v4.1.11 (core: 4.1.11)\nSolidity v0.4.24 (solc-js)\n. @dharmeshnirmal Are you behind a proxy? If you are, there's discussion about how to resolve [here](https://github.com/trufflesuite/truffle-init/issues/1). @dharmeshnirmal The simplest thing might be to clone [the repository](https://github.com/truffle-box/webpack-box) you want using `git clone`. Then:\ncd webpack-box\nrm -rf .git # Remove the .git record \nnpm install\n```\n\nThe other option is to look at the request module's guide for controlling proxy behavior with environment variables and do whatever is appropriate for your system. . Closing as duplicate of #766.. Will check this out in few minutes (on a train) but our CI is passing and have manually verified that commands are completing ok on MetaCoin. Why is it working in one folder for you and not in another?. @gerchicov-bp I'm getting your project to compile ok after wrapping the wallet providers in functions, as suggested by the docs here. Have only tried with the localhost network I stubbed in. Could you double-check that your custom host is working? \ntruffle.js\n```javascript\nmodule.exports = {\n  // See http://truffleframework.com/docs/advanced/configuration\n  // to customize your Truffle configuration!\n  networks: {\ndevelopment: {\n  host: \"127.0.0.1\",\n  port: 8545,\n  network_id: \"*\" // Match any network id\n},\n/*},\ndevelopment: {\n  host: \"<custom-host>\",\n  port: 8545,\n  network_id: \"*\"\n},*/\nrinkeby: {\n  provider: function() {\n    return new HDWalletProvider(mnemonic, \"https://rinkeby.infura.io/<infura-key>\");\n  },\n  gas: 4500000,\n  gasPrice: 25000000000,\n  network_id: 4\n},\nropsten: {\n  provider: function() {\n    new HDWalletProvider(mnemonic, \"https://ropsten.infura.io/<infura-key>\");\n  },\n  gas: 4500000,\n  gasPrice: 25000000000,\n  network_id: 3\n}\n\n}\n};\n```\nOutput\n```shell\ngerchicov user$ truffle version\nTruffle v4.1.11 (core: 4.1.11)\nSolidity v0.4.24 (solc-js)\ngewecke:gerchicov user$ truffle compile\nCompiling ./contracts/ClientReceipt.sol...\nCompiling ./contracts/Migrations.sol...\nCompiling ./contracts/Simple.sol...\nCompilation warnings encountered:\n/gerchicov/contracts/Migrations.sol:11:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n  function Migrations() public {\n  ^ (Relevant source part starts here and spans across multiple lines).\n,/gerchicov/contracts/Simple.sol:6:3: Warning: No visibility specified. Defaulting to \"public\". \n  function getA() constant returns (uint256) {\n  ^ (Relevant source part starts here and spans across multiple lines).\n,/gerchicov/contracts/Simple.sol:10:3: Warning: No visibility specified. Defaulting to \"public\". \n  function setA(uint256 newValue) {\n  ^ (Relevant source part starts here and spans across multiple lines).\nWriting artifacts to ./build/contracts\ngerchicov user$ \n```. @Gargo \n\n\nUnfortunately the non-function format for the wallet is only reliable if there is a single provider. The docs could use some improvement in that section because it's not obvious why there are two formats. The 'function' form was introduced because the non-function form causes super weird behavior in the provider when there are multiple connections open to Infura.  Original bug report at #348.\n\n\nNo great answer for this - truffle compile builds the artifacts and networks are one the things we track in that object. At the moment this isn't very helpful but it will become important when the artifact is refactored for the next major release because it will be possible to specify different compilations for different networks.  In the comment above I'm just trying to narrow things a bit so we can figure out what's going wrong. I know the config is getting loaded - I want to see if there's a specific issue with connecting remotely or not.. @gerchicov-bp Thanks for opening this - have amended the docs to remove the non-function closure examples. \n\n\nClosing.. mocha's weirdness about this, the ES6 arrow function with non-binding this and babel transpilation is the Bermuda  Triangle of this.\nCould you see if everything is ok if you rewrite the arrow functions as conventional functions? e.g:\n```javascript\ncontract('Foo', function(accounts){ // Edit: forgot one\n  beforeEach(async function(){\n    this.x = 0\n  })\nit('simple test', async function(){})\n})\n```\n. Hi @NatalieChin80, thanks for such a clear report and for linking to your repository. \nIt looks like Zeppelin's assertRevert function might be invoked incorrectly in the STKChannelClosing tests, causing weird async failures. And one of your computers might be super fast, one a little slow.\nExample STKChannelClosing test:\njavascript \nit('Should fail when user tries to close channel with a signature signed by someone else (invalid signature)',async()=>\n  {\n      const nonce = 1;\n      const amount = 2;\n      const cryptoParams = closingHelper.getClosingParameters(nonce,amount,STKChannel.address,nonChannelPart);\n      const channel = await STKChannel.deployed();\n      try\n      {\n          await channel.close(nonce,amount,cryptoParams.v,cryptoParams.r,cryptoParams.s)\n          assert.fail('The signature should have caused an exception to be thrown');\n      }\n      catch(error)\n      {\n         // `assertRevert` is async & expects promise as an arg?\n         // It's also been rewritten in the `helpers` code? (See below) \n        assertRevert(error); \n  })\nExample test from zeppelin-solidity\n```javascript\nit('can not perform normal process in pause', async function () {\n    let Pausable = await PausableMock.new();\n    await Pausable.pause();\n    let count0 = await Pausable.count();\n    assert.equal(count0, 0);\nawait assertRevert(Pausable.normalProcess());   // Is `awaited`, gets promise as arg\nlet count1 = await Pausable.count();\nassert.equal(count1, 0);\n\n});\n```\nzeppelin-solidity's assertRevert (yours has been modified....)\njavascript\nmodule.exports = async promise => {\n  try {\n    await promise;\n    assert.fail('Expected revert not received');\n  } catch (error) {\n    const revertFound = error.message.search('revert') >= 0;\n    assert(revertFound, `Expected \"revert\", got ${error} instead`);\n  }\n};\n. @NatalieChin80 Closing because this looks like an issue with how you're handling error case promises in your tests. Please feel free to ping if the suggestions above don't resolve. . Oh good! Thanks for the update @NatalieChin80. . @wadelee1986 You can interact with an existing contract within Solidity if you have its deployed address and its source code There's a nice tutorial about how to do this here\nExample\n```javascript\npragma solidity ^0.4.18;\ncontract HelloToken {\n  event SaidHello(address caller);\nfunction hello() public {\n    emit SaidHello(msg.sender);\n  }\n}\ncontract Caller {\n  function callHelloToken(address deployed) public {\n     HelloToken token = HelloToken(deployed); // Get HelloToken instance at some address\n     token.hello(); // Use token contract\n  }\n}\n```\nClosing because this is a question about how to use the Solidity language rather than a problem specific to Truffle. . @chainchaser This seems to be an issue with VSCode, please see #756. I'm leaving an additional note there requesting more clarity about how/why box installation goes wrong with that IDE, but it looks like you should be able to work around it by re-initializing the project in VSCode.. @Mc01 Thank you for this excellent bug report, really appreciate the reproduction case.  \nIf I understand correctly - the error is being triggered by an attempt to deploy an abstract contract. We should definitely handle this case better - there's a related issue from some time ago here. \nThe error you're seeing comes from one of Truffle's dependencies: web3. When it executes a deployment and receives a receipt, it performs a check to verify that code exists at that address. An abstract contract has no data associated with it so there is nothing there.\nIf you look at the IncorrectChild artifact in the build folder after running truffle-compile,  you will see it has no bytecode, so nothing is being written to the chain:\n\"bytecode\": \"0x\",\n\"deployedBytecode\": \"0x\",\nWe should detect cases where someone attempts to deploy a contract with an empty binary and either reject or skip those contracts. \nAs a side note - I noticed in your truffle.js you're using a form of provider instantiation that no longer works with the latest HDWallet. Because of some recent changes in that Library, these provider calls should be wrapped in a function closure, as shown in the docs here.. @marcosmartinez7 By 'local blockchain server' do you mean the ganache test client truffle uses by default?\nOne way to seed your trezor accounts with a balance would be send them test ether from one of the default accounts that ganache launches with. You can see an example of this in these tests at truffle-contract. That example targets Web3 1.0's light wallet but the idea is the same.  . @marcosmartinez7 Ah I see. One issue is that the Truffle test accounts are unlocked by default. Is it  possible to use accounts generated by the Trezor? If you send ether from the truffle account to the trezor account address over ganache (without any special signing), it will be funded for the test session and should be able to execute transactions. \n```javascript\nawait web3.eth.sendTransaction({\n   from: \n   to: \n   value: web3.toWei(\"1\", 'ether')\n}\nconst balance = await web3.eth.getBalance() // Should have 1 ether in it.\n```\nDoes this not work for your use case?. @marcosmartinez7 Out of curiosity, did you get this to work?. Ok thanks so much for the info @marcosmartinez7. Will look into this further..... Wow @marcosmartinez7 !! Great work. \nTo be clear: if you change the provider address here to target ganache-cli on localhost it fails?\nnew Web3.providers.HttpProvider(\"https://ropsten.infura.io/your_infura_api_key\")\nDo you get a low balance error?. truffle develop is not very configurable unfortunately. \nYou might try downloading/running the development server separately:\nshell\n$ npm install -g ganche-cli\n$ ganache-cli <options> # run\nIt has a mnemonic option although I would verify that the accounts you know about are generated in the initial output. I'm not sure it can use a 24 word mnemonic yet.\nYou can connect to it by defining a network in your truffle.js:\nmodule.exports = {\n  networks: {\n    development: {\n      host: \"127.0.0.1\",\n      port: 8545,\n      network_id: \"*\" // Match any network id\n    }\n  }\n};\nAnd running a develop-like console like this:\ntruffle console --network development\nGood luck!\n. What happens if you launch ganache cli and send funds from one of its accounts to a trezor account before trying your transaction? Below is an example of sending ether between ganache accounts - you would just try substituting one of your trezor account number for the to field in one of the transactions:\nshell\n$ truffle console --network development\ntruffle(development)> web3.eth.accounts\n[ '0x4b3f766907f441e86949d5be1c472cf90595daab',\n  '0xa6ceaacc3f9cec56097c7a59e59f46eee6e5d233',\n  '0x2845d4955399bcaf5423c89b9928584a8a71f526',\n  '0xb17174cf5fdb7fc5479f9cc3f38c88b85e473ddb',\n  '0x16cc3257ada37cbd8ef7f0d0dac01f02273df97b',\n  '0xafbf7db30dd85bb03079b4f4ab63f6dba100fd28',\n  '0x14ff51430fa619354af8386d69e7de593a5b7e24',\n  '0xf4f201421d389590e73cada81cf6bb0b0c24bb95',\n  '0x6c39f51d02922a15106e4702b7e59dab419277c6',\n  '0xee59742840363edfa942a53a76576e58712b1ca9' ]\ntruffle(development)> web3.eth.sendTransaction({from: '0xa6ceaacc3f9cec56097c7a59e59f46eee6e5d233', to: '0x4b3f766907f441e86949d5be1c472cf90595daab', value: 500000000});\n'0x1d994eebe99c8183d1d440b9ff8193901d3256062ec146d88b9472f7d148f42e'\ntruffle(development)> web3.eth.getBalance('0xa6ceaacc3f9cec56097c7a59e59f46eee6e5d233');\nBigNumber { s: 1, e: 19, c: [ 999999, 99999499979000 ] }\ntruffle(development)> web3.eth.sendTransaction({from: '0xa6ceaacc3f9cec56097c7a59e59f46eee6e5d233', to: '0x4b3f766907f441e86949d5be1c472cf90595daab', value: 50000000000});\n'0xd93d86fd0f20e1fd8d0b0284f1a2f833b63fb4c2412a325a0e52361bc9b4ded4'\ntruffle(development)> web3.eth.getBalance('0xa6ceaacc3f9cec56097c7a59e59f46eee6e5d233');\nBigNumber { s: 1, e: 19, c: [ 999999, 99949499958000 ] }\ntruffle(development)>. @marcosmartinez7 Yes!!!!! This is fantastic!! \nThank you so much for figuring out how to do this. . @rmi7 Is this your contract deployed to Ropsten at tx 0x082a3ebedd92bae28e00a9a3476f5f67b31ad8779c01e0c15b1b66ba54247297 ?\nCould you look at the artifacts for MyMagicalContract and see if there is an address saved under the networks key for the Ropsten network?\nLooks like it should be:  0x8a5fa2e6035fb19880a54f4f974d1ef320290988. @michaeljohnbennett The timeout problem should be fixed in 4.1.11 - recent changes to a dependency in the wallet provider resulted in commands failing to exit correctly. As a side note - it's now important that you wrap providers in a function in truffle.js if you've configured more than one network in your config. See example here\n@rmi7 Can you share your migrations.js and truffle.js? It's possible there's a promise you're not returning to the deployer at the very end of the sequence. . Ah ok! Thanks for the tip about the docs, will check that out.. @rmi7 Believe the problem is with async/await which Migrations only supports if it's wrapped in a deployer.then block. Apologies for this - Migrations was written before async/await became the norm and 'stages' deployments with it's own promise chain management logic.  (We're in the middle of rewriting that module so this shouldn't be an issue in a few weeks.) \nTLDR; everything should work if you wrap your async/await migrations logic like this:\njavascript\nmodule.exports = function(deployer, network, accounts) {\n  deployer.then(async function(){\n     ... all your setup / deploys / etc\n   })\nThere's a nice example of this here and the issue is being tracked at #501. . @4000D Thanks for opening. Your idea about first showing the errors, then showing the warnings is a good one, although I think your work around is also pretty nice. \nshell\n$ truffle compile | grep Error # <-- Nice!\nLeaving some notes / context here for further consideration:\n\n\nthe recent spate of warnings is related to solc's pending upgrade to a new version which will have many breaking changes. With v0.5.0 they will be errors. Sort of an idle question but: will warnings decrease (a lot) soon? \n\n\nmy impression is that the Solidity engineers do not want warnings turned off or filtered out. Solidity is a special language case because its programs typically manage funds in a no-recourse financial transaction system - all warnings should be taken seriously. Given a mix of warnings and errors, it may be best to start at the top fixing each one in succession. . .\n\n\nMaybe we should colorize the solc output: warnings => yellow, errors => red. \n. @taylorjdawson After this issue was opened I happened to see a great PR over at solidity which suggests they're moving in this direction themselves. . .it looks like there's active work there if you follow the links to corresponding pull requests. \n. @kyriediculous Yes!! Super excited about this. Current status is:\n\n\nRemix gets the reason string because it runs ethereumjs-vm in the browser and can just grab the return data directly out of the vm. The clients' default behavior is to throw that data away rather than include it in the response, so we need changes at that layer to be able to do the same thing.\n\n\nGanache just merged a PR last week that attaches return data to the error message on eth_call. That change is queued for the next release. As soon as it becomes available we'll begin work on integrating this into the next version of truffle-contract.  \n\n\nFinally, the other clients are still working on their implementations so it will probably be a bit before getting the reason string is a fully integrated feature. We're tracking those developments at ganache here and that issue links out to work being done at Geth. \n\n\nThanks for opening. . @kronosapiens \nOn eth_call, ganache@2.1.2 now returns a specially formatted error result that encodes the reason string. In the version of truffle-contract being written for V5, every transaction gets gas estimated first (and routed through eth_call) so we capture the return data there. You can see one strategy for extracting it as intelligible string in on the async-deployer branch here.\nThere is also a nice PR open at ganache to do the decoding there.. @kronosapiens Yes it's kind of the latter. The reason string logic looks like it's working. It's bound up with a pull-request that targets the next major release and is a rewrite truffle's migrations command. That should go into review next week and be available as an alpha (or something) relatively soon. \nThanks so much for your offer of help - really nice of you. Because we're coming up on a release the main thing that needs to be done is stress-testing the new code. Migrations are an especially complicated case - there are multiple clients which people connect to in several different ways with variant responses happening at different time scales. \nWill definitely ping this issue when there's a build of this available (so you can see where it's broken :).)    . @roschler I'm not sure about that actually - it should be visible in the source ~~mapping~~ display though. What's your take on how this should work?. Small update: - truffle@next contains reason string handling and it seems to be working ok based on some early experimental use over at EthPM and Colony. There is a draft release notes open as a PR here with instructions and info about breaking changes to truffle-contract. \nWe're getting ready to release a beta soon - the next tag is an unstable preview / nightly for that . . .\n$ npm install truffle@next. @eloudsa We have some unit tests that verify that the reason string works as expected with ganache here (for ganache when its --noVMErrorsOnRPCResponse flag is set to true) and here for the default case. If you have a chance could you look at those and see if there are any obvious differences between your implementation and ours? Could you also verify that you're not accidentally connecting to a non-ganache client running in the background? \n@danaki There is a ganache-cli option which lets you turn off the contract size limit: allowUnlimitedContractSize. Hi @4000D Thanks for opening.\nWe're currently tracking this issue at #958 and a fix should be included in the next patch release (ETA 1.5 - 2 weeks). In the interim, the engineer who opened #958 left some notes about a work-around using the nohoist option that might be helpful.\nClosing as duplicate.. @roschler This is possible within truffle develop (using MetaCoin) as an example:\n```shell\n$ truffle develop\n\ntruffle(develop)> migrate\n... etc ...\nRunning migration: 2_deploy_contracts.js\n  Deploying ConvertLib...\n  ... 0xb806956cbc1c9101b7487a399ef5ec0772796d5677659638ae60fe05ea34dc12\n  ConvertLib: 0x345ca3e014aaf5dca488057592ee47305d9b3e10\n  Linking ConvertLib to MetaCoin\n  Deploying MetaCoin...\n  ... 0x3a277e87522c77df758e9344ef4f51f17234fab241693afe72b769ebcba9c19a\n  MetaCoin: 0xf25186b5081ff5ce73482ad761db0eb0d25abfbf\nSaving successful migration to network...\n  ... 0x059cf1bbc372b9348ce487de910358801bbbd1c89182853439bec0afaee6c7db\nSaving artifacts...\ntruffle(develop)> debug 0x3a277e87522c77df758e9344ef4f51f17234fab241693afe72b769ebcba9c19a\n\nDebugger launches ...\n```\nIt's also possible outside develop by launching ganache-cli (or Geth, which also support the debug_traceTransaction RPC method) in a separate terminal window and setting up a configuration in truffle.js:\ntruffle.js\njavascript\nmodule.exports = {\n  networks: {\n    development: {\n      host: \"127.0.0.1\",\n      port: 8545,\n      network_id: \"*\" \n    },\n    ... etc ...\nganache-cli \n(In a separate terminal window)\nshell\n$ ganache cli\nMigrate \n(I've introduced a require(false) statement at the top of the MetaCoin contract constructor to simulate a failure)\n```shell\n$ truffle migrate --network development\n... etc ...\nDeploying MetaCoin...\n  ... 0x021602751ca588d6109a614a68e0886fff7c4f1ce4fa5653edf39516f691ec0b\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: The contract code couldn't be stored, please check your gas amount.\n    at Object.callback (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/contract.js:147:1)\n$ truffle debug 0x021602751ca588d6109a614a68e0886fff7c4f1ce4fa5653edf39516f691ec0b --network development\nDebugger launches successfully\n```\n. Another note: it's not currently possible to debug transactions over Infura. For more on that subject as well as discussion about some constraints with debugging over a local Geth node, see issue #890.\nClosing for house-keeping, but please ping if the info above doesn't work for your use case or you run into further problems with this.  . @roschler No worries! \ntruffle-develop is located in truffle-core and much of its logic is here. \nAnother command you might want to check out is truffle exec which lets you run an arbitrary script in a context that has web3 and the artifacts module injected into it.  It's not interactive but it can be good for writing little routines and seeing the outcome. \ntruffle exec <script.js> [--network <name>]. @raky35 Could you provide some example code where this happens? Also, what is your OS? \nI'm not able to reproduce this on  OSX, truffle v4.1.11 using a simple contracts structure like the one in MetaCoin or a more complex one that imports contracts from node_modules.  . @raky35 Closing for housekeeping, please ping if you continue to see this, or can provide reproduction steps.. @roschler Thanks for opening. Is it ok if I close here and we track this at truffle-debugger 77?. @asaj Thanks for reporting.\nTook a quick look at this and seems like it might affect all the built-in methods that are implemented as precompiled contracts \n+ ecrecover\n+ sha256\n+  ripemd160\nFor example sha3 is fine but sha256 produces the same crash.. @asaj \nAsked @gnidan (who wrote the debugger) about this yesterday - (he's traveling atm). He suggested that stepping into precompiled contracts might always be problem but that this crash is avoidable & the return value should be viewable etc. He'll take a look at fixing this next week. . @adennen Thanks for reporting.\nThis may be something specific to the oraclize package. I just ran truffle install zeppelin and was successful.   With oraclize I'm getting a slightly different error FWIW: \n```shell\ntruffle install oraclize-api\n/usr/local/lib/node_modules/truffle/build/webpack:/~/ethpm-registry/~/truffle-contract/~/web3/~/bignumber.js/bignumber.js:1178\n            var error = new Error( [\n^\nBigNumber Error: new BigNumber() not a base 16 number: \n```\nEthPM is in the middle of a major rewrite, sorry.  As a workaround you could clone Oraclize's contracts from github here.. @adennen @mrinalwadhwa \nJust leaving this as a note while we investigate, but it seems to be Node version compatibility issue:\n+ Node 8 (works)\n+ Node 9 (works) \n+ Node 10 (broken). @bhemeswararaoa Your error is different - it's caused by being behind a firewall which limits your access to Github. That problem is being tracked at #766 where there's a link that will let you download the template from browser to desktop. . @bhemeswararaoa This is a just a development tool. There is a large community of engineers developing secure crowdsale contracts (among other things) at openzeppelin-solidity you might want to check out. \nAlso well worth a visit is the documentation at consensys/best-practices on solidity smart contract design. . This should be fixed in 4.1.12. Please ping if you still see this.. @sai4788 In the top left hand corner of metamask there is a network tab. Make sure it's connected to the correct local test network / ganache client.\nFor more please check out the ganache docs here and if you run into further problems getting these two components to work together, the ganache repository is located here.. Sweet thank you.. @mikiw A common cause of this is accidentally making a describe or contract callback async. \njavascript\n// Example\ndescribe('test suite', async function(){ //  <-- Mocha does not support this.\n  it('should ...', async function(){     //  <-- Ok.\n    ...\n  });\n})\nYou might also comb through your async code and double check that every promise is being waited for correctly.. In the example you've given, the tests change order which suggests a problem with the way your async code interacts with mocha. Mocha guarantees that it will run each describe and it block in a strict sequence so: \n+ describe blocks should never run out of order - they're executed synchronously.\n+ if promises are being correctly handled in the it blocks, they should timeout or otherwise error when there is a problem. \n. @mikiw Ah ok - if this is addressed by ganache #81 is it ok if we close here and track the issue there?. Closing (see above). @4000D Thanks for reporting - the console is going to have some work done on it soon so will flag this as something to look into.. Hi @sugalivijaychari \nThanks for opening. Have responded to your other report at #766. \nClosing as duplicate.. @roschler I also had this problem once and I think ended up having to change all the git prefixes to https in this meta config.. @roschler I like that jsonParse idea :)\nI think that could all be done in truffle-core, which makes things a little simpler from a dev standpoint. Two things to note:\n+ It looks like we are very close to a big change in the project architecture - all the modules will go into a single repo and be managed with a tool called Lerna. This has implications for pull-requests in the near term because the transition might be a little awkward.\n+ Believe @gnidan is planning to do some upgrade work to truffle console quite soon as well - he might be a good person to co-ordinate with and ping ideas off of. . @roschler Is it ok if we close here? This ishould be resolved by the new lerna setup.. @Levino \n@MoMannn \n@xpepermint\nUnbundled truffle is available as truffle-core, which exposes a cli.js so it can be used as command line utility on its own.\nWe're migrating the project architecture to a Lerna monorepo shortly so that everything is in one place and dependencies like web3 sit in a single location. Modifying the project should become a lot easier. I believe Truffle will continue to be published as a webpack although perhaps there should be some discussion about this. \nI think the decision to bundle was made more than a year ago when package-locking was less normative and semver coherence was less rigorously followed in truffle's Ethereum dependencies. It's been very effective at squashing cross-platform installation issues and speeding up installation. Truffle used to take a couple minutes to install and the issues were filled with dep problems. It now takes a few seconds - the goal was to make something that had turned into a minor nightmare super simple and reliable for new users. \n@xpepermint Not sure if this helps but truffle also publishes a nightly experimental build that runs web3 1.0-beta.33 under the hood. It's available on npm as darq-truffle@next.\n. @xpepermint Ah ok, good to know.. @levino LOL ok. \nJust making a note here for future reference that once we're in the monorepo we should consider publishing an un-bundled version with each release at some tag so people who prefer this have easy acccess. \nshell\ntruffle@unpacked # or something. Hi @tbenny - it looks like your Migrations constructor has a small editing error. This:\njavascript\nconstructor(Migrations) public {\n  owner = msg.sender;\n}\nshould look like this:\njavascript\nconstructor() public {\n  owner = msg.sender;\n}\nClosing but please ping if you continue to have issues with this.. @978740431 It seems this is an issue people are having with more recent Node versions for many npm packages. Could you check out this npm thread and see if any of the solutions resolve it for you?. Closing since this seems like it's not specific to Truffle - if anyone discovers otherwise or knows more about this please ping. . Hi @samaujs \n+ Could you show your migrations file? \n+ How did you generate your address? It looks possible that Rinkeby ether is being swept by a bot from various addresses to 0x7097f41F1C1847D52407C629d0E0ae0fDD24fd58 which suggests the private key for that address might be in the public domain / not secure.\n+ How long have you been using the address? Did you make all of the outgoing transactions (stretching back several months) listed on etherscan here? \n. @samaujs The account your Rinkeby Eth are being swept to also exists on mainnet with a balance of ~60 ETH. There's a single comment which says: hi man! are you a cool crowler?.  \nIf you have a chance could you open an issue at go-ethereum here and provide the same information you've provided in this issue?  They might have a clearer sense of what's going on. \nIn the interim I would not ~~use any addresses generated by~~ your local geth client for any real transactions [edit: with your current settings]\n. @samaujs Out of curiosity, what is the website address of your Rinkeby faucet?. @samaujs I see you got a response at Geth - this is important so I'm leaving a note here in case other people run into the same issue. The core problem is the setting: --rpcaddr \"0.0.0.0\" which allows anyone to access the node from outside. The lead Geth dev notes at your issue:\n\nDid you run your node with the RPC port open publicly? If yes, anyone from the internet could have been connected to your node, and signed a number of transactions with your account to both sweep its current funds as well as to transfer any future funds received. There are active attacks on mainnet and all testnets that exploit vulnerable setups.\nPlease make sure that you don't ever run publicly reachable RPC, and ideally don't unlock your account, rather use the one-shot personal.sendTransaction.\n\nGoing to close this because it's not Truffle related but thank you very much for reporting! This will be helpful to a lot of people.. @RobertoC27 Thanks! Will check this out.. Update: This turned out to be a publishing error. The debugger is a built project and the way we've been publishing darq-truffle failed to take that into account.  \nIt looks like starting Monday we'll be publishing anything/everything from this repository since we've moved all the modules here and have Lerna installed. This bug should be fixed then and darq-truffle will just be called truffle@next. \nWill ping this issue when that happens. . @RobertoC27 I think so yes - it's our first attempt publishing from this new project architecture - so it's a little 'fingers crossed'. darq-truffle will still exist but the current build is probably the last unless someone insists on retaining that name or re-appropriates it for darq purposes.  . @RobertoC27 Sorry for the delay. Just published truffle@next. If you have a chance to report back about whether the debugger works that would be great, thanks! . @RobertoC27 No worries at all :)  Please take as much time as you need. Yes, that installation line should work. . @RobertoC27 Yes unfortunatley it will collide and expects to be invoked as truffle. This was one nice thing about the darq-truffle name. \nIt's not uncommon for people to install truffle as a local dev dependency and write scripts in their package.json to run truffle test as npm test where the script is:\njavascript\n\"test\": \"./node_modules/.bin/truffle test\"\nThis lets you control truffle versions more easily for a specific use. . Here's a quick guide using the metacoin box as an example:\nshell\nmkdir metacoin\ncd metacoin\ntruffle unbox metacoin\nnpm init # <-- This will add a package.json to project if it doesn't exist\nnpm install --save-dev truffle@next # <-- This will install truffle as a development dependency\nLocal truffle will be in the node_modules folder and available at the command line by running\nshell\n./node_modules/.bin/truffle\nOpen pacakge.json in your text editor. It will have a scripts key you can use to define convenient shell command aliases for this project. Make a script entry like this:\njavascript\n\"scripts\": {\n   \"test\": \"./node_modules/.bin/truffle test\",  \n   \"compile\": \"./node_modules/.bin/truffle compile\" \n }, \nAt the terminal prompt you can now run:\nshell\nnpm test # 'test' is a little special because npm doesn't make you type `npm run test`\nnpm run compile  # Here, prefix the command name with 'run'. Most commands are like this.\nMore about this here\n. Ah thanks @RobertoC27 - that's a bug - actually now I realize it's also affecting the normal release. \nWe're having some teething problems with the new structure and it looks like webpack is not building the debugger correctly. We'll have another release for everything early next week to fix this stuff.. @RobertoC27 Sorry - this took forever it seems like . . . 5.0.0-next.1 should have fixed the debugger build so npm install truffle@next might work. . Thanks so much @RobertoC27 - there's another report of this at #1051 which affects the non-next build. Hope you don't mind I'm going to close here and track the problem here, adding a link to your gist to the discussion. \n. @RobertoC27 Nice find and thanks so much for the reproduction cases. Have opened a PR fixing this and will republish after it's reviewed, probably tomorrow.. @RobertoC27 This should be fixed in darq-truffle@4.1.4-next.9. Closing but please ping if that doesn't resolve it.. @gerchicov-bp I think this kind of integration is a ways off - occasionally this gets mentioned as something we could add to the existing ganache client UI. \nIf you're looking for a simple example of running a shell command from an electron app, this seems promising. . @marcosmartinez7 This is super interesting - the ThrowProxy article was written a while ago and I wonder if recent changes at solidity have added that constraint. Will ask around this morning and see if anyone knows the answer to this question. \nOut of curiosity - do your transactional methods need return signatures? If they're used within Solidity they will automatically return true if they run without raising an exception and false otherwise. . @marcosmartinez7 I asked the @gnidan (another engineer here - he's recently written a solidity debugger and is intimately familiar with Solidity internals :) He was surprised by this behavior.\nBelow is all the information I can find about address.call in the Soldity docs (from here):\n\nto interface with contracts that do not adhere to the ABI, the function call is provided which takes an arbitrary number of arguments of any type. These arguments are padded to 32 bytes and concatenated. One exception is the case where the first argument is encoded to exactly four bytes. In this case, it is not padded to allow the use of function signatures here.\naddress nameReg = 0x72ba7d8e73fe8eb666ea66babc8116a41bfb10e2;\nnameReg.call(\"register\", \"MyName\");\nnameReg.call(bytes4(keccak256(\"fun(uint256)\")), a);\ncall returns a boolean indicating whether the invoked function terminated (true) or caused an EVM exception (false). It is not possible to access the actual data returned (for this we would need to know the encoding and size in advance).\n\nThere's nothing in the release notes at Solidity that makes this clearer. \nThe only other thing I can think of that might be related is this thread at Solidity which addresses recent changes in the way return call values are handled. \nIf you find anything out, please report. Will leave this issue open in the interim and thanks for the work-around, that's very helpful.. @tomerweisman Etherscan is suggesting that it's hitting a revert somewhere after consuming about 200k gas. It's kind of frustrating that it passes the dry run ok. . .\nIf you have a chance could you put a log line in your deploy script and verify that the wallet param has a non-zero address when you use the Ropsten network config?\njavascript\nconst wallet = accounts[1];. Oh good. Yes ganache defines 10, and the Wallet only defines one by default. \nIt would be nice to fix this though because dry-run shouldn't have this kind of variance, otherwise its meaningless. . @kyriediculous If you await the assert statements does this clear up?\njavascript\nit('throws when a non registered account tries to request membership',async  () => {\n   await assertError(controller.requestMembership(group, {from: accounts[2]}))\n})\nit('throws when the creator requests membership', async () => {\n   await assertError(controller.requestMembership(group, {from: accounts[0]}))\n}). @kyriediculous You can see assertRevert being awaitedat Zeppelin here. Have also used this pattern myself recently and everything worked. Could you post a reproduction case so I can take a look? . @kyriediculous Any luck with this?. @kyriediculous l'm going to close this for house-keeping - will happily re-open is there's a repro though.. @gunvant I wasn't able to reproduce this on my own and your example is specific to your project. It's hard to tell what's causing the error. \nIf you have a chance could you provide reproduction steps - e.g. a simple example of a call sequence that succeeds in a test but triggers this error in the console?\nCould you also specify whether you're running truffle console or truffle develop?. Closing for house-keeping, please ping if you continue to see this. A reproduction case would be really helpful here as well.. @roschler Yes, this error is being raised on Node 10 and so far has only been reported for truffle install in #985. Do you know which test(s) failed? What is your Node version?. @roschler Sorry maybe I'm blind but all I see is error output from promisify-node without any info about which test triggered it.. Thanks @roschler - this bug originates in ethpm-js (thanks so much for your log output). Will get a PR open to fix today and will track problem at #985.\nClosing.. @boorac Just for clarification, are you connecting to ganache-cli? If so which version?\nI believe there's been a known problem in the ethereumjs-vm with deleting storage (e.g. setting it to zero) - refunds haven't been handled gracefully. Might have been fixed recently though.\n@seesemichaelj Does this issue ring any bells for you? \n. @boorac Yes truffle develop runs ganache-cli. \nIt looks like MetaMask runs estimateGas and adds a gas buffer of 50% or runs the tx at 90% of the block gas limit if the buffer is too high.. @boorac I'm going close here and we'll track this over at ganache-core 26. @mushketyk Truffle contract uses web3 which is in the middle of adding support for ABIEncoderV2. That work is being tracked here. \nThe upcoming major Truffle release (about a month away) will use web3 1.0 and contain whatever new ABI support is available then. \nYou might be interested in ethers.js - truffle migrate doesn't have an integration with it but you can require your truffle artifacts into a script run by truffle exec and have all the basic information you need to interact with that lib:\njavascript\nVoter.abi\nVoter.binary\nHope you don't mind - I'm going to modify the title of your issue to reflect the underlying problem. . Just saw a corresponding issue at ganache-cli as well - not clear to me that this problem originates there but leaving a note so we can watch out for it. . Related issue at web3 for 2D arrays. @gnidan Does this also need an empty .npmignore added to packages/truffle? \nThere was a weird issue with the debugger once where npm defaulted to the gitignore and wouldn't include the dist.  . Wrong branch.... I know. This bodes ill. . Thanks @samaujs - will repost the response you received above for anyone else running into this. Once an account has been exposed to an attack made possible by leaving a local client open on --rpcaddr \"0.0.0.0\" it is no longer usable.  More detailed explanation from Geth:\n\nThe issue here is that an attacker can pre-sign arbitrarily many transactions ahead of time. Once they find an unlocked account accessible over the internet, they will just sign many many many transactions into the future, so whenever there are funds, they can drain it without having access any more to the original account.\nThe only way out is to use a new account which wasn't leaked out.\n\nClosing as duplicate of #997. @skmgoldin Yes. If you have multiple providers declared in truffle.js you now must wrap them in a function closure. This:\nprovider: new HDWalletProvider(mnemonic, 'https://mainnet.infura.io'),\nhas to be like this:\nprovider: function() {\n   return new HDWalletProvider(mnemonic, \"https://mainnet.infura.io/\");\n},\nWe recently upgraded the provider-engine in HDWallet because the old one was generating npm audit warnings and something is different about the way it polls. Any time the config is loaded into truffle (even for compile) it will open all of the listed connections unless they're wrapped, and our efforts to close handlers on exit are not working when several providers are open for some reason.\n. Sweet! Looking at #1023 right now.. I'm getting a different error and don't want to mess up the publication in case it magically works for some reason :) \nError: Could not publish package. Please check version number and ensure it was not previously published.\n    at /Users/cgewecke/code/consensys/minibug/tcr/node_modules/truffle/build/webpack:/~/ethpm-registry/lib/registry.js:109:1\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)\nMy truffle.js for comparison. Only difference I see from what's in the repo is the addition of an infura API key. Is that possible?\n``javascript\n/*\n * A bug in truffle-hdwallet-provider 0.0.5 makestruffle compile` hang\n * indefinitely when truffle-hdwallet-provider 0.0.5 is imported into the\n * truffle.js. To use networks in this truffle.js, compile your code first\n * and then uncomment the content of this file.\n */\n// UNCOMMENT EVERYTHING BELOW THIS LINE TO USE THESE NETWORKS\nconst HDWalletProvider = require('truffle-hdwallet-provider');\nconst fs = require('fs');\nlet mnemonic = '';\nif (fs.existsSync('secrets.json')) {\n  const secrets = JSON.parse(fs.readFileSync('secrets.json', 'utf8'));\n  ({ mnemonic } = secrets);\n}\nmnemonic = 'grateful dead shoreline 1977 etc ....';\nmodule.exports = {\n  networks: {\n    /mainnet: {\n      provider: function() { return new HDWalletProvider(mnemonic, 'https://mainnet.infura.io') },\n      network_id: '1',\n      gas: 4500000,\n      gasPrice: 10000000000,\n    },\n    ganache: {\n      provider: function() { return new HDWalletProvider(mnemonic, 'http://localhost:8545') },\n      network_id: '',\n      gas: 6000000,\n      gasPrice: 25000000000,\n    },\n    rinkeby: {\n      provider: function() { return new HDWalletProvider(mnemonic, 'https://rinkeby.infura.io') },\n      network_id: '',\n      gas: 4500000,\n      gasPrice: 25000000000,\n    },/\n    ropsten: {\n      provider: function() { return new HDWalletProvider(mnemonic, 'https://ropsten.infura.io/') },\n      network_id: '',\n      gas: 4500000,\n      gasPrice: 25000000000,\n    },\n    // config for solidity-coverage\n    /coverage: {\n      host: 'localhost',\n      network_id: '',\n      port: 7545, // <-- If you change this, also set the port option in .solcover.js.\n      gas: 0xfffffffffff, // <-- Use this high gas value\n      gasPrice: 0x01, // <-- Use this low gas price\n    },/\n  },\n};\n```\n. Stealing your config warning for truffle init right now.. Oh one more difference - I ran this, not sure if that matters:\nshell\n$ npx truffle publish -n ropsten. Lastly my txs on ropsten. No worries at all!. @kronosapiens Confirmed! It's broken. . .\nHowever, I'm able to publish something small (like a single file) so it looks like repository size might be a factor. \n@skmgoldin Have you seen this error recently and do you know if there's a data cap upstream \nsomewhere? \nAlso just a heads up - truffle@next has a separate problem with 'publish' that's provider related. Just opened an issue for that at #1209. . @gnidan Well I think we could set some of the keys to private if we don't intend to publish and they'll be ignored by the lerna publishing wizard. Just an idle thought. . @Koldus This might be something nvm related. Did you follow all the instructions about bash profile aliasing here? \nAre you able to install other packages globally and have them work as expected?\n. Hmm. Not sure. I just tried this on my computer and it works. Are there any differences you can see that would help us isolate what the issue is? I'm on OSX, Sierra \n```\n:~ cgewecke$ nvm list\n         v8.9.4\n->      v8.11.3\n        v9.11.1\n        v10.4.0\n         system\ndefault -> 8.9.4 (-> v8.9.4)\nnode -> stable (-> v10.4.0) (default)\nstable -> 10.4 (-> v10.4.0) (default)\niojs -> N/A (default)\nlts/* -> lts/carbon (-> v8.11.3)\nlts/argon -> v4.9.1 (-> N/A)\nlts/boron -> v6.14.3 (-> N/A)\nlts/carbon -> v8.11.3\n:~ cgewecke$ nvm install lts/boron\nDownloading and installing node v6.14.3...\nDownloading https://nodejs.org/dist/v6.14.3/node-v6.14.3-darwin-x64.tar.xz...\n################################################################## 100.0%\nComputing checksum with shasum -a 256\nChecksums matched!\nNow using node v6.14.3 (npm v3.10.10)\n:~ cgewecke$ npm install -g truffle\n/Users/cgewecke/.nvm/versions/node/v6.14.3/bin/truffle -> /Users/cgewecke/.nvm/versions/node/v6.14.3/lib/node_modules/truffle/build/cli.bundled.js\n/Users/cgewecke/.nvm/versions/node/v6.14.3/lib\n\u2514\u2500\u252c truffle@4.1.11 \n  \u251c\u2500\u252c mocha@4.1.0 \n  \u2502 \u251c\u2500\u2500 browser-stdout@1.3.0 \n  \u2502 \u251c\u2500\u2500 commander@2.11.0 \n  \u2502 \u251c\u2500\u252c debug@3.1.0 \n  \u2502 \u2502 \u2514\u2500\u2500 ms@2.0.0 \n  ... etc ...\n:~ cgewecke$ truffle\nTruffle v4.1.11 - a development framework for Ethereum\nUsage: truffle  [options]\nCommands:\n  init      Initialize new and empty Ethereum project\n  compile   Compile contract source files\n  migrate   Run migrations to deploy contracts\n  deploy    (alias for migrate)\n  build     Execute build pipeline (if configuration present)\n.. etc ..\n```. @Koldus Any luck with this?. @Koldus Thanks! That will be super helpful to someone :). Aiiii!!!! It's over.. @axic Thanks! . @sebastien-kr Thanks for opening this. \nWe're in the process of upgrading truffle-contract to web3 1.0 and that work should available in the next few weeks. I believe this will no longer be an issue then - will add a regression test to our suite to make sure it behaves as expected.. @cckelly What's your execution context? \nYou should be able to write the above as follows:\njavascript\nconst Proxy = artifacts.require(\"Proxy\");\nconst deployed = await Proxy.deployed();. @cckelly I was able to get this to work for web3@0.20.6 by doing the following (borrowing from @timqian's reproduction case):\n\nLaunch ganache-cli in a separate terminal tab (default port is 8545)\nRun truffle-migrate after adding a network config following the pattern in the docs here\n\n```javascript\nconst Web3 = require('web3');\nconst TruffleContract = require('truffle-contract');\nconst MetaCoinArtifact = require('./build/contracts/MetaCoin.json');\nconst web3Provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\");\n(async () => {\n    const MetaCoin = TruffleContract(MetaCoinArtifact);\n    MetaCoin.setProvider(web3Provider);\n    const instance = await MetaCoin.deployed();\n    console.log('instance.address --> ' + instance.address)\n})();\n```\nOutput\nUsers-MacBook-Air:metacoin cgewecke$ node script.js\ninstance.address --> 0xe529baf3f7205cf00b5dd14e9ccaf12339707d41\n@timqian In your case I think the issue might be a web3 mismatch. I will look into publishing the new work we've done on truffle-contract upgrading to web3 1.0 separately this morning. It should already by available in truffle exec if you install truffle@next. \nThanks to both of you for reporting. \n. @makoto Thanks for re-opening! Very sorry this was misplaced in the project re-org. \nHopefully doing a release today and will get this in there. . @gnidan Ok I think I'll add a little link to that in case someone finds it useful.. @scyclow If you run the truffle dev blockchain ganache-cli separately you can configure it to create any number of accounts. Set up a 'development' network config in your truffle.js following the docs here.\nIn a separate terminal tab, launch ganache-cli\nganache-cli --accounts 11\nIn your original tab run \ntruffle test\n. @scyclow Closing for house-keeping, please ping if you'd like more help with this.. Hi @carbonnetwork That's correct - you cannot deploy an abstract contract because it has no bytecode - it's only a language feature provided by Solidity to help you define interfaces for 'real' contracts. To use one just import it into a file with a contract which implements the abstract methods.\nThe error messages for this case are confusing and inadequate - we're tracking that problem at #971 and it should be resolved by work we're doing on the migrations command for Truffle V5.\nHope you don't mind - closing as a duplicate\n. @umlspec \n+ What windows shell are you in? People seem to have good luck with PowerShell.\n+ This StackOverflow thread might be helpful.. Hi @bmmpxf \nAre you able to run Petshop on your windows box at the moment? Have you seen any of the errors that @umlspec is describing above?. @bmmpxf Thanks - yes agree this is not pet-shop specific. It's possible the fs package is problematic on windows although that's not turning up a lot in a google search.. @carbonnetwork Are you using VSCode? This error happens quite a bit with that IDE - there's discussion and (possibly) a workaround discussed at #756.. @carbonnetwork Can you show the file that's triggering this so I can try to reproduce?. @carbonnetwork I think the issue is this:\n// contracts/test/TestStrandardToken.sol\nTruffle expects Solidity tests to be in the outer test directory alongside the JS tests. Could you try moving that file there? There's an example Solidity test in the metacoin-box here  for reference. . If you only run single test it should work. Javascript tests can be skipped by prefixing the contract test descriptor with skip, like this:\ncontract.skip('MyContract', function(accounts){\n  .. etc..\nI think the reason the tx isn't found is that Truffle resets the blockchain between each test file in order to keep a 'clean-room' environment for individual suites. This means only the transactions made in the last test file to run are still available in the blockchain db. . @carbonnetwork - Thanks, I've edited your issue title to narrow the problem a bit. . .. Hi @jleeh thanks for reporting this. It looks like something went wrong with our webpack build in the most recent release - we'll be patching it shortly. Will ping you here when that's fixed. . @jleeh. This should be fixed in 4.1.13. Please ping if you continue to see it.. Thanks @jleeh - re-opening. As you note - this is also being reported (for Windows) in #998 where the example being used appears to be the Fibonacci number tutorial. gist of their output\nFor additional context: On my machine if I:\n+ unbox MetaCoin \n+ delete the solidity test so that there is only one contract suite\n+ launch ganache-cli in a separate terminal tab\n+ truffle test\n+ pull the transaction hash from the last recorded tx in the ganache-cli output\nThe debugger launches successfully:\n```shell\nUsers-MacBook-Air:metacoin cgewecke$ sudo npm install -g truffle\n/usr/local/bin/truffle -> /usr/local/lib/node_modules/truffle/build/cli.bundled.js\n+ truffle@4.1.13\nadded 81 packages in 2.857s\nUsers-MacBook-Air:metacoin cgewecke$ truffle test\nCompiling ./contracts/ConvertLib.sol...\nCompiling ./contracts/MetaCoin.sol...\nCompiling ./contracts/Migrations.sol...\nContract: MetaCoin\n    \u2713 should put 10000 MetaCoin in the first account\n    \u2713 should call a function that depends on a linked library (50ms)\n    \u2713 should send coin correctly (111ms)\n3 passing (211ms)\nUsers-MacBook-Air:metacoin cgewecke$ truffle debug 0x4c5f6cfb01d2912f892e1953e846d1aae41a8b955edd776a9ed4ef389d67ecd8\nCompiling ./contracts/ConvertLib.sol...\nCompiling ./contracts/MetaCoin.sol...\nCompiling ./contracts/Migrations.sol...\nGathering transaction data...\nAddresses affected:\n 0xa0777e0f14e85f2b069929246dc8b793d3039c5c - MetaCoin\nCommands:\n(enter) last command entered (step next)\n(o) step over, (i) step into, (u) step out, (n) step next\n(;) step instruction, (p) print instruction, (h) print this help, (q) quit\n(b) toggle breakpoint, (c) continue until breakpoint\n(+) add watch expression (+:<expr>), (-) remove watch expression (-:)\n(?) list existing watch expressions\n(v) print variables and values, (:) evaluate expression - see v\nMetaCoin.sol:\n8: // token, see: https://github.com/ConsenSys/Tokens. Cheers!\n 9: \n10: contract MetaCoin {\n    ^^^^^^^^^^^^^^^^^^^\ndebug(development:0x4c5f6cfb...)> \n```\ncc: @gnidan . @etsangsplk Node 6. Please let us know if you're seeing problems with that version.\nNode's LTS is currently 8 and it should work on that as well. \nWe've seen a few unusual problems/crashes with the latest Node version (10). . Closing, lmk if you are having trouble with this and I will re-open.. @etsangsplk Thanks!\n\nWhich the command are you running? \nIf you nvm use 8, does that work? \nWhat is your truffle version?\n\nTrying to identify what's going wrong here . . .. @etsangsplk Which truffle version are you using? Your error doesn't have a detailed stack trace so it's hard to tell where the problem is. If you're using a newer version of Truffle you should have a non-webpacked trace.. @etsangsplk Also: which command are you running?. @etsangsplk Yes - we've identified the problem and we're going to try fix it. We updated a dependency that uses newer JS syntax and we have to bump it down. . @etsangsplk This should be fixed in 4.1.13. Please ping if you continue have problems with it.. @etsangsplk Are you still seeing this error in 4.1.13?  We downgraded the dependency that used async (in one of its dependencies) and now have Truffle's unit tests running against Node 6 in CI where it seems to be passing.. @etsangsplk I need a reproduction case because locally I see this:\n```shell\ncode cgewecke$ mkdir metacoin\ncode cgewecke$ cd metacoin\nmetacoin cgewecke$ nvm use 6\nNow using node v6.14.3 (npm v3.10.10)\nUsers-MacBook-Air:metacoin cgewecke$ truffle version\nTruffle v4.1.13 (core: 4.1.13)   # <-- Which truffle version are you using?\nSolidity v0.4.24 (solc-js)\nmetacoin cgewecke$ truffle unbox metacoin\nDownloading...\nUnpacking...\nSetting up...\nUnbox successful. Sweet!\nCommands:\nCompile contracts: truffle compile\n  Migrate contracts: truffle migrate\n  Test contracts:    truffle test\nmetacoin cgewecke$ truffle test\nCompiling ./contracts/ConvertLib.sol...\nCompiling ./contracts/MetaCoin.sol...\nCompiling ./contracts/Migrations.sol...\nCompiling ./test/TestMetacoin.sol...\nCompiling truffle/Assert.sol...\nCompiling truffle/DeployedAddresses.sol...\nTestMetacoin\n    \u2713 testInitialBalanceUsingDeployedContract (80ms)\n    \u2713 testInitialBalanceWithNewMetaCoin (60ms)\nContract: MetaCoin\n    \u2713 should put 10000 MetaCoin in the first account\n    \u2713 should call a function that depends on a linked library (51ms)\n    \u2713 should send coin correctly (109ms)\n5 passing (1s)\nmetacoin cgewecke$ \n. @etsangsplk If you are running `ganache-cli` separately, you will need to downgrade to `6.1.0-beta.4`. @etsangsplk What's your crash?. It looks like it might be coming from `hd-wallet-provider`?\nat require (internal/module.js:20:19)\n    at Object. (/src/main/resources/bin/node_modules/truffle-hdwallet-provider/index.js:3:22)\n    at Module._compile (module.js:570:32)\n``\nCould you try the following:\n+ Make sure your providers are wrapped in a function closure in your config as shown in the docs [here](https://truffleframework.com/docs/advanced/configuration#providers). This will stop them from automatically loading when truffle pulls the config in.\n+ Pintruffle-hd-walletproviderto0.0.3, which should be Node 6 safe. (We had to upgrade that recently becausenpm audit` was throwing security warnings, and it's a wallet). . Fantastic, thank you @etsangsplk.. Nice bug report (as always ) @aleybovich - thanks.\nAll new truffle-contract work is happening on the next branch which uses Web3 1.0 and targets a major release coming this summer. Will make sure this is fixed there and add a regression test for it. . @djneely It looks like this is Node version related. You shouldn't see this if you update to Node 8 (LTS) - don't know if that's possible for you. We're not supposed to break Node 6 and looks like we might have, sorry. Investigating cause . . .   . @djneely I hope you don't mind but we're going to track this at #1053 where it was opened earlier.\nClosing as duplicate. . Oh also!  The webpack build is hard-coding our own computer's paths into the build. . . It's happening on the Lerna release and the experimental releases. See:\n+ here\n+ here\nAdding a note about a change I made to get the debugger webpack to build when we moved to Lerna. Not sure if it's relevant:\nI set an option: modulesFromFile to true in the node-externals plugin here. \nThis was necessary because lots of modules are hoisted and don't actually exist where the packing is happening. . @mushketyk Thanks, for reporting. A few questions:\n\nAre you running ganache-cli separately as a long running process? \nAre you using truffle develop?\nHave you defined a test network in truffle.js? \nHave you defined your own accounts in any way? \n\nIt would be nice to have simple reproduction steps for this although from your description it seems like it might difficult to get those . . .. @daithi-coombes Does setting the initialBalance value lower fix this error? Ganache initializes accounts with 100 ether and the entire amount is being sent to the Solidity test for use within that context. \nEx:\nsolidity\nuint public initialBalance = 50 ether;. @mushketyk Agree - we're tracking this problem for Migrations in #971 and there's a little more detail about why this happens here. That case is being addressed with PR #1028. \nHowever you are seeing this with truffle test and I'd like to make sure we handle that correctly. Could you show anything of your beforeEach hook (if there is one) or your migrations.js files (if you've written any)? . @breckinridge22 Could you open this issue at the box in question?\nClosing - it's conceivable that this is truffle related but we don't have the resources to support all the boxes from this repository. If the difficulty can be narrowed down to something in code-base here, please feel free to re-open. . @darioAnongba Thanks for porting this over. Have renamed it the issue a bit, hope that's ok.  . @gnidan I like this one - it's simple and clear. \nThe only thing I kind of wish for is something that tells people to open box related issues at the box in question. We just don't have the resources to support those and their code isn't here.. @khajaasmath786 Are you able to use a more recent release? We're currently publishing at 4.1.13?. @khajaasmath786 It's possible - if you nvm use 8 does this still happen? We've seen a few unusual errors with Node 10. \nThe syntax error is coming from a dependency crypto.js, will investigate over there and see if there's a known issue... . Oh apologies I misread your error and though you were using nvm which is a node version manager that lets you toggle between node versions easily. \nIf it's not impossible you might try Node 8 and see if it works, yes.. More info: crypto.js is only used in truffle-contract-schema and was last updated 5 months ago, which makes it seem more likely that Node 10.5 is the source of the issue here.. @khajaasmath786 What is different about the second machine you installed on? Why is it working on that one? . @khajaasmath786 Closing for house-keeping - it seems like you might have worked this out? Please ping here if you have more info and wan't to keep this issue open.. @benjamincburns Yes, sorry - I need to sync to develop before this because next is a branch we're publishing and someone has an open issue about the debugger being broken on it. Unfortunately we have to make sure we can continue to patch develop and merge it into next. . . a little confusing.. Thanks @facuspagnuolo :)\nThis looks right - we're trying to keep a single version of each dep and let yarn manage the workspaces for us. It should hoist everything common up to the root the project. And we've been using this cli 'wizard' to make multi-package dependency changes (because it's easier).\nUnfortunately . . . we did this last week (bumping to 6.1.3)  and it breaks Truffle for Node 6 users. See here and here. Newer ganache-core has a dependency  (eth-block-tracker) that uses async. \nWe don't feel we can make this change in a minor version and ganache believes it's not really viable to undo its changes either.  \nSome possibilities:\n+ we're also now publishing truffle@next and truffle@byoc\n+ We could re-target this PR against next (which will be Truffle V5 and contains some breaking changes from web3 1.0) \n+ We could re-target it against byoc - which just has a new feature that lets you use any solc compiler version (usage docs here). \n+ You could publish your own truffle webpack as a stopgap using this script at packages/truffle\nFWIW Truffle V4 is not going to have more work done on it - if something is super broken we'll fix it, but otherwise the project is focussed on the next release - we're hoping to publish a beta in the next couple weeks.\n. @facuspagnuolo Yes . . . Actually - I will merge this into both and republish them today. \nThe issue with next is that: \n+ it has more changes and probably more bugs. I wrote a +/- 1500 line test suite in it last month and it was ok - however you might run into weird issues. (I'm in favor of this because it will help us to find problems, but you might be less excited about it.)\n+ There are breaking changes with web3 1.0 - it outputs strings instead of BigNumber, and uses BN, etc etc. There's a full list of things we've seen here.. @colus001 Thank's for such a clear description and reproduction case :)\nIt looks like the test failure here is caused by post-fixing .call on methods you actually want to 'send' as transactions to the network, writing state to the chain. .call runs the transaction locally without persisting state and is useful for retrieving data from a client, or for testing out a transaction before broadcasting it. \nMore info about this difference  here.\ntruffle-contract will automatically figure out whether to call or send your function based on the contract ABI. So you can just write:\njavascript\ntheContract.createNewObject(tester, 1); // send fn\ntheContract.getObjectsCountByOwner(tester);  // call fn\nand they should both work as expected.\n. @colus001 Good questions\n\n\n.sol allows you to test using the Solidity language itself, running on the evm. This useful if you are developing Solidity libraries that will be consumed by contracts and want to validate them in the context they will execute in. Solidity is a strongly typed language vs. JS so testing in that language ensures the tests lose nothing 'in translation'. The drawback is that the evm has many limitations around contract size, gas cost etc that make writing tests in Solidity quirky and difficult. Most engineers prefer js testing which is more flexible and has much better tool support. \n\n\nI believe Assert.sol is only documented within the file, as natspec comments.  . @colus001 Yes, that's an example of how the JS interface is much more flexible. Testing solidity with solidity mostly makes sense for Solidity library development. In other words, for code that will only be consumed by contracts. Even then a parallel JS suite may be necessary to cover cases that are to difficult to model in Solidity itself. \n\n\nI'm going to close this because it like your original issue is more or less resolved. Thanks @colus001 :)\n. @mmezian Here is a list of network ids (source: stackexchange)\n0: Olympic, Ethereum public pre-release testnet\n1: Frontier, Homestead, Metropolis, the Ethereum public main network\n1: Classic, the (un)forked public Ethereum Classic main network, chain ID 61\n1: Expanse, an alternative Ethereum implementation, chain ID 2\n2: Morden, the public Ethereum testnet, now Ethereum Classic testnet\n3: Ropsten, the public cross-client Ethereum testnet\n4: Rinkeby, the public Geth PoA testnet\n8: Ubiq, the public Gubiq main network with flux difficulty chain ID 8\n42: Kovan, the public Parity PoA testnet\n77: Sokol, the public POA Network testnet\n99: Core, the public POA Network main network\n7762959: Musicoin, the music blockchain\n61717561: Aquachain, ASIC resistant chain\n[Other]: Could indicate that your connected to a local development test network.\n\nWhen truffle connects to a public network in order to submit transactions, it queries it directly for its id. Rinkeby is 4, so the network id being written to the artifact is correct.  \nWhen truffle searches the artifacts for instances that are known to be deployed on a network, it relies on the the network_id in the config. \nThese need to match for everything to work correctly.\n. Thanks @mmezian - agree this could be clearer. . . will add this to our list of docs improvements.. @mmezian There's more discussion of this specific error here. \n\nQuestions:\n+ Are these txs meant to occur in a strict sequence / can they run in parallel? \n+ If parallel, is it possible for you to distribute them across many accounts? I'm not sure how viable this is with truffle-hdwallet-provider itself, although there are some forks of that repo which allow you to generate several accounts and use a keystore.\nThe nonce too low issue may come into play here as well because infura load-balances its traffic across various nodes and network latency seems to result in some txs that were sent 'second', propagating 'first'.. @mmezian Status update: this topic has come up at truffle-hdwallet-provider recently and a little bit of headway has made there in issue 65. Did you ever find a workable solution for your use case?. @cag Oh no worries at all, this can safely sit staged here for as long as you'd like.  \ud83d\ude42 . @cag Great! \nOk just one last thing - do you happen to have an example at hand I could do more of an E2E test with? If you just point me in the right direction that's more than enough...\nIs there anything over at Gnosis - like an example that consumes some Gnosis migrations? NBD if not - I will mock something up, I'm really excited to try this out \ud83d\ude42 . @cag Quick status note: synced this to the latest changes and have published the branch to npm as: \ntruffle@gnosis\nWill play around with it a bit this week and work on some documentation, but I think this is close to final review. If you see anything you'd like to add/change lmk. \n. @LoomiDigital Very sorry for the delay responding.  I think you might be right about storage from inherited contracts being a problem and I believe it's on the roadmap for debugger improvements. \n@gnidan might have more insight about this. . Hi @benjaimess. Apologies for the delay responding to your issue. Yes, truffle should have no problem with this. I reproduced your case and was able to migrate Adoption and SafeMath from the same file successfully by writing a Migration for them that looks like this:\n```javascript\n// migrations/2_second_migration.js\nconst SafeMath = artifacts.require(\"SafeMath\");\nconst Adoption = artifacts.require(\"Adoption\");\nmodule.exports = function(deployer) {\n  deployer.deploy(SafeMath);\n  deployer.deploy(Adoption);\n};\n```\nOutput\n```shell\ntruffle migrate --network development\nCompiling ./contracts/Migrations.sol...\nCompiling ./contracts/Multi.sol...\nWriting artifacts to ./build/contracts\nUsing network 'development'.\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  ... 0xc9ec468156bc653cfffdf6c573e13f6402fff4f4d38d19523e672a820b6a43db\n  Migrations: 0xbe7f4dff435e310c83cd6e70ad64c035a6c92361\nSaving successful migration to network...\n  ... 0xde4cf6acd2dc41a5651f9af28be14c3a981f02d78051e2db7e42ef2c9dbd328a\nSaving artifacts...\nRunning migration: 2_second_migration.js\n  Deploying SafeMath...\n  ... 0xcca4b7d76a6fd80c5c4f8ed4f34cc0211467a988888334a1cdbed388e1de4d97\n  SafeMath: 0x1d92890a0093bd855ee0bec0845a0044cbdc2e27\n  Deploying Adoption...\n  ... 0xd9d2d6c6b7a9c102793e1c6d50bb36c6d8106819e64cfee9876c6c7df8d40527\n  Adoption: 0x1eb24a06f41d20ae22308f01c3f9edad33e3a4f7\nSaving successful migration to network...\n  ... 0x3e0658d871efa9d8927122f401d29dbf9bd43fe1a00ef5b6996b6ee22b012faf\nSaving artifacts...\nUsers-MacBook-Air:multi cgewecke$ \n```\nI'm running ganache-cli separately at the command line and have added a development network config to truffle.js as shown in the docs here\n. @benjaimess I'm going to close this for house-keeping, please ping if you're still having difficulty with this / have a case we can reproduce the error with.. @mattiyat Thanks for such a clear description! \nUnfortunately I followed your steps and am not able to reproduce this locally. . . could you link to a simple github repo reproduction of this problem so I can clone it and try again?. @mattiyat Thanks! It looks like this bug might affect Windows only - tried to get that to fail on OSX and everything seemed fine. . . .requires further investigation I guess. . Hi @carbonnetwork. Support for view and pure is planned for the debugger but not currently possible. The debugger 'replays' transactions and at the moment it requires the tx hash to identify  the relevant execution. \nAnother trufflesuite engineer, @seesemichaelj has recently written a real-time debugger called Velma that supports these modifiers - you might be interested in checking it out here. \nAdditionally, you might be able to work around this in the truffle-debugger by temporarily removing the modifier, running the function as a transaction and seeing where it fails. You won't get a return value but you'll be able to step through the logic. . Thanks @ekpyron :)\nThe one place I see is actually at truffle-contract/lib/contract.js where Truffle automates whether or not web3 methods are invoked as calls or sends. This should be simple to update and be backwards compatible using the stateMutability alternative you suggest above.\n@gnidan? \n. @moshebeeri Could you see if this discrepancy goes away when you remove the .call postfix from deposit in the async/await test?\njavascript\nawait myToken.deposit.call(user1, 20000) // <-- `.call`?. @moshebeeri Agree the docs are quite antiquated and confusing here, thank you for highlighting this.\nYou actually don't need to use these postfixes at all with truffle - it automatically figures out which mode to call a function in. You might be interested in the note left here that explains the difference between making a call and sending a transaction. \nI'm going to close because the original issue seems resolved - we have plans to update and modernize our docs for the upcoming major release (V5). Will make sure to revisit the section in question and clear it up. Thanks.. Thanks @carbonnetwork :) We'll look into this. . @moshebeeri \nThere are several issues here. You are post-fixing .call on methods you actually want to 'send' as transactions to the network, writing state to the chain. .call runs the transaction locally without persisting state and is useful for retrieving data from a client, or for testing out a transaction before broadcasting it. \nMore info about this difference  here.\ntruffle will automatically figure out whether to call or send your function based on the contract ABI which is generated during Solidity compilation. So you can just write:\njavascript\nawait contractFactory.createDog('doggy'); // send fn\nawait dog.getName();  // call fn\nand they should both work as expected. \nAdditionally, the return value of createDog in JS will be a transaction receipt, not an address. To retrieve the address you should .call your public storage mapping dogs with the appropriate key and then instantiate the created address using Dog.at. \nYou might want to  look through the Solidity documentation and read the web3 wiki to get a good sense of how these languages/libraries work. Truffle wraps these but there are critical concepts that are important to understand in those docs. \n. NB: Tim's says this was there to keep us on our toes. \ud83d\ude42 . #1112. #1113 . #1114 . Thanks @erickearns . . . will take a look at fixing for Truffle V5 shortly. \nFor record keeping this is a duplicate of #777. @erickearns We just published a fix for this to truffle's V5 alpha - truffle@next.  I'm going to close this as duplicate but continue to track the issue at #777. cc @gnidan I need this in today.. @gnidan Oh no worries thank you!!. @stefek99 From gitter it looks like you solved this problem:\n\nYep, figured it out: trufflesuite/truffle#150 Need to use Git Bash\n\nThere's more help for windows users in the docs here\nClosing because docs address this issue.. Lol really? That was fast!!!. #1140. This was implemented as startTransaction, endTransaction in next.7\n. On reflection I'm going to look into how difficult it really is to return BNs from a call. It might not be that bad.. @gnidan Yeah, there aren't a lot of good choices here. . . we should probably talk about this more. I'll work up a PR and ask Tim what he thinks too.. #1138 (Still need to fix events). Closing - going to open a PR reformatting number strings as BN because this solution is way too superficial.. @rudolfix So far the only trick I have is making strings have a toNumber method by overloading the String prototype. PR pending.\nWhat do you advise?. ~~I think I'm going to look at chai-bignumber and see if there's some trick I can steal from that~~\nI think I'm just going to return ~~BigNumber~~ BN for now . . . . @gnidan @tcoulter This might be too much detail but here's a first draft of the beta release notes.. @gnidan Please just edit at will - whatever changes you want to make are good. I'll go through your suggestions though and fix those up. Thanks for reviewing :). Have ended up mixing v5 / V5. There are some cases (like headings and where it appears at the beginning of a sentence where the lower case looks weird to me but please change this to whatever you prefer.\nWeb3 is referred to initially as Web3.js and afterwards Web3 (I think the .js is overkill at certain point). @tcoulter Ok cool, I'll change that example to something 'workspacey'. . @axic At the moment I think this is supported for npm installed solc - the relevant code is here. It pulls solc in via a require modified to be web-packable. Does this work for your case? \nUsage:\njavascript\ncompilers: {\n  solc: {\n    version: \"/Users/user/.nvm/versions/node/v8.9.4/lib/node_modules/solc\"    \n  }\n}\n. #1139. #1141. beta 34 also:\n+ sets the status field to boolean instead of returning 0x00 / 0x01\n+ breaks our error handling (because it stopped emitting a receipt on tx revert). \n+ breaks method layer confirmations for reasons that are still a mystery. The confirmations are emitted but the number param passed to the event isn't incremented.. @Freyert Yes definitely - thanks for suggesting. Might be a little bit before this happens though because some of the changes in 34 (especially the way the receipt is withheld on error for standard clients) are a little problematic for truffle-contract.. @Freyert This is shipped withnext.9 and hopefully from here on out we'll be able to bump web3 easily whenever they make improvements. . @fubuloubu Awesome! Are you guys publishing to docker.hub soon? The  ethereum/vyper repo there is empty . . . \nNote to self - the snap installation line is:\nsudo snap install vyper --edge --devmode. Hi @ldub \ud83d\udc4b \nWow weird! Will investigate although this is quite strange. Out of curiosity if you use lodash or another utility that has an array zip method does everything work? This is something about overloading the Array prototype?\nAlso do you have an insight about how webpack might be the culprit here? The tests are passed to Mocha - that seems like another candidate. . @gnidan Ai it's a bug. I thought I fixed it in #1113 :/ \nTracking down cause rn but it affects all tests so it shouldn't block this PR. Will open something shortly.. @gnidan Looks good!. @chenweiyj  This is a weird mocha bug that comes from mixing versions of mocha - v3 is not compatible with v4.  We need to investigate how Mocha 3.5 is getting into the build - this should not be happening since 4.1.11\n. @chenweiyj I wasn't able to reproduce this locally. . . it may be a quirk of how truffle installed on your machine / in your project. The upshot is that mocha versions can't conflict so if you see this error run \nnpm list mocha \nnpm list -g mocha\nand try makes sure that you're using Mocha 4 or above. \nClosing for now but please ping if anyone continue to have this problem and there's a clear reproduction path.. @chenweiyj Ah thanks! That's helpful.. @gnidan Yes sounds good.. @aleybovich This has been implemented in Truffle V5, which we're planning to release in beta shortly. You can preview it by installing truffle at the @next tag and there is a draft release notes with detailed instructions open as a PR here. Checkout the web3 1.0 section for more detail about reason strings.\n$ npm install truffle@next\nThere's another issue about this - #976 - would it be ok if we track it there?. @aleybovich I'm using it right now to write the tests for a package registry at EthPM here. And Colony has a PR open upgrading to it. That said I wouldn't describe it as \"stable\" and there are various small bugs still to work out. \nAlso contains significant breaking changes in truffle-contract - returning BN instead of BigNumber is the main one. \nObviously you're welcome to try it out - would love feedback and bug reports. . @robertbob987 Just scanning the code, one thing I see that might be a problem is the way you're passing the rate in. In JS the maximum integer is: \n9007199254740991\nYour rates are:\n100000000000000000000\nYou might try using web3's toWei methods to convert the value you want into a BigNumber first before passing them in. \nAlso:\n+ try searching the Truffle issues for migrations and crowdsale threads - problems with start date and end date are common. \n+ This article is helpful. \nClosing because it's not clear this is bug in Truffle specifically. Please ping if you discover otherwise.\n. Hi @dyba Thanks this looks good ... could you advise about what the indentation rules are for the highlighter? Is this an issue with the way comments are indented?. @dyba This adds a lot clarity color-wise but am wondering why the commented examples have to lose all their indentation . . . is there any way of restoring that?\nI'd also like more detail about the following:\n+ what exactly was wrong with the indentation? Why do these changes fix the color?\n+ what did you do to fix it? \n+ why is the diff so weird? \nSorry (these questions sound crazy, you don't have to take them too seriously). \ud83d\ude04 . @dyba Awesome! Nice debugging. . next.7. @ekpyron Thanks for this :)\nI think @gnidan has actually moved the same project we consume from the truffle-box into our local test sources files in #1148 (still WIP but close). We can circle back and swap those out in a later step. \nI'll look into the tests at CompilerSupplier and see what we could do there..... Hi @Grapefruit19 we're tracking this issue at #555. That thread also links to some small utilities that should help to get around this limitation.\nClosing as duplicate of #555. annnnnnd.....it stopped failing of its own accord. Thanks geth. . Fixed in next.7. @gnidan Ah! Ok. Well now it's just total muddle.. @naure I think the current truffle-contract code works as expected? It looks at the value set on the constructor rather than the instance. Additionally this  parameter has limited use - the real timeout constraint is 50 blocks and is set downstream from truffle-contract at the web3 dependency. \nPlease correct me if I'm wrong about this.\nWe're also quite close to publishing a beta of Truffle V5 which now exposes a timeoutBlocks setting on the artifact that allows you to override the web3 limit (see PR #1129 for usage notes). It can also be set on a per network basis in the config for migrations scripts.\njavascript\nropsten: {\n  provider: () => new HDWalletProvider(mnemonic, `https://ropsten.infura.io/${infuraKey}`),\n  network_id: 3,       // Ropsten's id\n  gas: 5500000,        // Ropsten has a lower block limit than mainnet\n  confirmations: 2,    // # of confs to wait between deployments. (default: 0)\n  timeoutBlocks: 200,  // # of blocks before a deployment times out  (minimum/default: 50)\n},\nA prerelease of the beta is available by running:\nnpm install truffle@next. @haggins We're migrating to Web3 1.0 with Truffle V5 and it looks the filter implementation there is more reliable - have had good luck with the .getPastEvents method and we have some tests and example usage for that here\nYou can install a pre-release of V5 by running:\nnpm install truffle@next\nUsage notes are are available at #1129 (See the Web3 1.0 section). NB: Web3 1.0 comes with a few breaking changes.\nHope you don't mind but closing because we won't be making any further improvements to truffle-contract for V4 and this appears to work expected for V5.. Hi @stefek99.\nThis is supported in the Web3 1.0 version of truffle-contract which will ship with Truffle V5. You can check out a prerelease of that by running:\nnpm install truffle@next\nUsage notes can be found at PR #1129 (see the Web3 1.0 section). NB: there are some breaking changes. ... \nThe syntax for function overloading is:\njavascript\nexample.methods['setValue(uint256)'](123);\nexample.methods['setValue(uint256,uint256)'](11,55);\nDuplicate of #737.. @haydenyoung in gitter added that they saw this error under another condition too:\n\nWhat ended up solving the problem was that I was missing a constructor in the child contract which calls the parent contract's constructor. Implementing this fixed the problem.. @karapish There's a Quorum tutorial here, that contains a number of examples of privateFor. \n\nYour syntax looks correct to me, what is the error?. @karapish To be clear when you say: call the function from JS you mean call it using Web3 from the geth console? \nCould you show your truffle.js?\n. @karapish \nAre you actually awaiting it? Is that missing as a typo?\njavascript\nmyContractInstance.myFunction(10, {privateFor:[\"key of node at port 22001\"])}; // <-- doesn't work. @karapish Ok hmmmmmm. One thing that the commands do is set some default values for tx params including gas, gasPrice and from. Maybe setting those explicitly in the Node script (using an unlocked account address for from)? \n```javascript\nconst options = {\n  privateFor: ...,\n  from: \n}\nawait myContractInstance.myFunction(10, options);\n``. @karapish Truffle doesn't do anything specific to unlock accounts - that has to be done on the client. Truffle fetches accounts using:await web3.eth.getAccounts(). You can set those per transaction in the same options object that contains theprivateForon thefrom:` key. \nSame with gas and gasPrice. The web3 0.0 Javascript API docs are a good resource for all those... . @karapish Sweeet! Nice job. Closing.. @TinyCalf Could you show everything else around these failures? For example: how is A deployed? How do you get that address into B's contract? Please provide a link to a working reproduction of the bug or complete reproduction steps. \nThere's Solidity code in the contracts you've provided that's not correct and/or mocked in:\nuint public  i = 1;\naddress public i = 0x912312312...;\n. @TinyCalf Closing for housekeeping - please ping if you need further help with this.. Hi @djudjuu.\nCan you show your truffle.js? There was a change in the hdwallet-provider a couple months ago that makes it critical to wrap it in a function when setting the provider, as shown in the docs here. If this isn't done it automatically connects to a network and leaves an interval timer open that prevents the script from exiting correctly. \nWe're also shipping a more permanent fix for this bug early next week  . . .. @karapish What client are you using?. @karapish Apologies, ethereum client e.g geth? ganache-cli? parity?. @karapish I guess they don't implement it, not sure why. Just tried running the console vs. geth v1.8.2 in dev mode, auto-mining with dev.period=1  and it worked:\ntruffle(development)> web3.eth.mining\ntrue\n. @karapish I'm going to close because it looks like this a quirk of the Quorum client implementation. Thanks for raising this.. @SwJay Thanks for opening this with the solution, should be helpful. This is similar to #766. \nClosing as duplicate.\n. The tests for failed deployments error with Geth in CI. Possible there's an issue with the way web3 validates deployments using eth.getCode() here and the clients are responding differently?. @eduardonunesp Yes this is a very reasonable suggestion. . . thanks for proposing.. @Axe-Usa Looking through your stack-trace it seems like the problem might originate in a helper library you're using...\n/Descargas/bitconyellow-token-master/test/solidity-helper.js:3:16\nWhat happening at that line? Does running npm install --save left-pad make this error go away?. @Axe-Usa Closing for house-keeping. Please ping if you (or anyone else) sees this and it coming from Truffle.. @gnidan I guess manually only because it's possible that there are next changes that don't touch tc? . @LiorRabin Yes. . . thanks for raising this.\nThe problem is fixed Truffle V5 where .at is fully async. A pre-release of that can be downloaded from NPM as truffle@next and there are draft release notes over at #1129.. @Bowfish Thanks for reporting. \n4.1.14 contains a small of set changes (mostly targeting the debugger). One of them addresses the way truffle commands exit in order to prevent a persistent hanging problem people have seen when using hd-wallet provider. It's possible that there's an issue managing async methods in your code that's been hidden by a bug on our side in previous versions...\n\nCould you show the code that's causing this problem or provide reproduction steps? (We have E2E and unit tests that run migrations / testing commands and they're passing in CI). \nCould you identify your ethereum client?\n\n. @Bowfish Could you try wrapping the entire contents of your migration file in a deployer.then block which you return your promise to as below and see if that works? (see this issue comment for another example).\n```javascript\nmodule.exports = function(deployer) {\n  deployer.then(function(){\n    var pilotContract;\n    var ratingContract;\n... etc ...\nreturn Pilot.deployed()  // <-- Important: return this promise\n  .then(function(instance) { \n  ... etc ...\n\n});\n```\n. @Bowfish Not sure... it's possible the provider was hanging open and allowing those promises to resolve. The pattern of returning the promise to the deployer is technically 'correct' and should work for all cases though. \nFWIW the migrations function and the deployer API has been a source of confusion for many and there have been problems integrating it with async/await as well.  We've tried to remedy this for our upcoming Truffle V5 release (available in a pre-release on npm as truffle@next). In the new format the top-level migrations method can be declared async and you can run arbitrary promise logic there without worrying about deployer.then.  \nEx:\n```javascript\nconst One = artifacts.require(\"One\");\nconst Two = artifacts.require(\"Two\");\nmodule.exports = async function(deployer) {\n  await deployer.deploy(One);\nconst one = await One.deployed();\n  const value = await one.value();\nawait deployer.deploy(Two, value);\n};\n```\nThere are draft release notes for V5 (including a list of breaking changes) at PR #1129 .\n. Duplicate of #501.. @michaeljohnbennett The new contract instance has a transactionHash property which should allow you to fetch the receipt (which has a logs property). Truffle does some post-processing of the transaction return value (see here ) so you might have to extract the logs from the receipt yourself for the truffleAssert library, not sure. \njavascript\nc = await MyContract.new();\nconst receipt = web3.eth.getTransactionReceipt(c.transactionHash);\nAnother thing you might be interested in is Truffle V5 (which is available in pre-release form from npm as truffle@next). It uses Web3 1.0 and lets you listen for transactionHash and receipt events per transaction. You could do something like:\njavascript\nMyContract\n  .new()\n  .onReceipt( receipt => {\n     truffleAssert(..etc..)\n     done(); // Tell mocha you finished\n  });\nThere are draft release notes for V5 at #1129 with more detail about the new TruffleContract features and info about breaking changes.\n              . @michaeljohnbennett Thanks for opening and apologies - after looking into this a bit I see it's not the easiest thing to do and the decoding utility isn't well exposed.\n\nThe following worked for me: Install web3-eth-abi.\nnpm install --save-dev web3-eth-abi\nThen:\n```javascript\nconst abi = require('web3-eth-abi');\n....\nc = await MyContract.new();\nconst receipt = web3.eth.getTransactionReceipt(c.transactionHash);\n// Decode\nconst inputs = MyContract.abi.find(item => item.name === 'ContractCreated').inputs;\nconst log = receipt.logs[0]; // Assuming you have a single constructor event\nconst data = log.data; // Non-indexed event data\nconst topics = (log.topics.length > 1) ? log.topics.slice(1) : []; // Indexed event data\nconst decodedLog = abi.decodeLog(inputs, data, topics); \n// Test\nassert(decodedLog.param === myInputParam)\n```\nTLDR; watching seems simpler? In Web3 1.0 all of this decoding happens automatically for the receipt and you can just access the returnValues field of a log item.  \nAlso agree this subject is not documented well enough although we're also the cusp of using better implementation so .... hopefully people will be able to find a solution to this more easily now that you've raised it. \n. @michaeljohnbennett The formal release will probably be in September. We're releasing as a beta next week and the prerelease is available right now. \nI don't think there will be substantial changes to the API for truffle-contract between now and formal release, so the only downside to upgrading is that there might be  bugs :) \nWe've done quite a bit of testing to try to make sure V5 works and we have a couple large projects already running it in their suites but there will likely still be a handful of issues to sort out. \nGoing to close this for house-keeping but thanks so much for opening.. Hi @ferittuncer. It looks like this is just the way solc implements the getter for that case. \nFrom Arrays section at the Solidity docs:\n\nIt is possible to mark arrays public and have Solidity create a getter. The numeric index will become a required parameter for the getter.\n\nMore discussion about this topic in #302, including a workaround :) \n. Hi @dwardu Thanks for catching this (and for your nice reproduction case as well).\nHave opened #1200 to fix, should be published early next week. . @dwardu This should be fixed on:\n\ntruffle@next\ntruffle@beta . #1203 / truffle@beta, truffle@next. Hi @sogoiii :)\n\nCI is a little weird  sorry - if there aren't any tests for that package could you change the package.json scripts entry to\n\"scripts\": {}, \n. @SvenMeyer This might be an npm caching issue - had some trouble with here this morning as we released the truffle@beta. \nIf you're seeing unusual installs - e.g. not getting the latest version - you can also try:\nnpm cache clear --force\nEDIT: oh actually I see you installed 4.1.14. Not sure what's happening there.... @gerchicov-bp Thanks for adding that link - it looks like an nvm configuration issue though right? Is there something specific to truffle going wrong here in your view?\nFWIW I am also on OSx, use nvm, frequently uninstall and install and don't run into this. . Hi @eduardonunesp, thanks for this issue. In the new beta of Truffle we're throwing an error for this case:\n```\nError:   Deployment Failed \n\"MyContract\" is an abstract contract or an interface and cannot be deployed\n   * Hint: just import the contract into the '.sol' file that uses it.\n```\nBut it needs to be improved to add the case you raise here, where you thought you implemented all the functions but made a small mistake somewhere. \nNB: There's a similar issue at Remix suggesting that the error should identify at least one of the unimplemented functions. To do that we'd need to detect this case and do some AST processing on the contract in question. . @gerchicov-bp This is fixed in the latest version of Truffle 4 (4.1.14). The solidity version is ^0.4.22 but the constructor syntax is correct. . Oops yes you're right.. @subramanianv Ah actually a fix was merged yesterday in #1219 :) \nThanks though.. @Bowfish Does this problem go away if you sudo npm install -g truffle?  And it goes away if you call sudo on the command once?. @Bowfish Closing for house-keeping but thanks for opening, I'm sure other people will run into this too.. Hi @Maushundb Looked into this and agree that its seems like there's a problem repeatedly registering listeners for once to the same event. Thanks for your workaround. Was also able to get the expected result using on after reworking waitForEvent slightly.   \nIt looks like the hanging you're seeing is caused by the way the promises are written in waitForEvent. . . on ganache at least, the event handler is firing/resolving before the promise to the event triggering transaction resolves. \n\nThe similar behavior seems to be happening with on / off - on / addListener adds the listener, but off / removeListener never actually removes the callback as intended and the second callback never gets added. Thus, it calls the first callback twice.\n\nI couldn't reproduce this - do you have an example?\nI'm going to edit title slightly - my take-away from this is \n+ truffle-contract doesn't implement the contract level (as opposed to event level) once handler\n+  re-registering event handlers for EventEmitter once isn't working. \n. Mmm. I think the promise construction in waitForEvent might be problematic. There's a mix of async and 'resolve in a callback' there that's not mapping to the sequence things occur in. . Ah yes I get the promisify event part - the oraclize part has been abstracted away in your example in a way that is not reproducible. . . could you show in more detail what that actually looks like? . @eduardonunesp Are you using the new version of truffle-hdwallet-provider with V5? \nnpm install --save truffle-hdwallet-provider@web3-one. @eduardonunesp Oh also - do you have an example that I can try to reproduce this with? Ideally we can catch whatever is going wrong here and throw an error that makes sense.. Yes this is a really good idea.. Hi @krzkaczor. Truffle does expose / consume a mocha object in truffle.js where you can set mocha options. \nThe syntax is:\njavascript\nmodule.exports = {\n  networks: {\n    ...etc...\n  },\n  mocha: {\n    someOption: <some-value>,\n    anotherOption: <another-value>\n  }\n};\nTruffle just passes mocha this object so anything that usually works with mocha should theoretically be fine. The contract abstraction aliases describe and passes in accounts and shouldn't interfere with anything.  \nAn example of mocha extensions working ok with truffle is eth-gas-reporter  which uses mocha's third-party-reporter feature. \nIf you have a chance could you see if mocha-prepare can be enabled through the config? . @krzkaczor Do the mocha options in the config work for your use case? Is this closable?. @krzkaczor At the moment no - unless you write your own version of what happens at truffle in the test command. That code is mostly here and the key resources injected into the test environment are here. Mocha's also passed the config options object and accounts are injected into contract test wrapper.\nIt is possible to write contract.only or contract.skip for more a little more control over what tests run. \ntruffle test is one of next things on the schedule for a rewrite - I guess I would like to keep this open now. Agree we should try support the use case you identified, along with other test frameworks like jest etc. . Hi @rstormsf \nYes - just saw the same decoding problem with boolean here last week. Will investigate some more to see if it's on this side but I think it's at web3-eth-abi and might be resolved by a pending release over there. \n[EDIT - beta.36 was published this morning, will try that and see if this has been resolved]\nWill also look at problem #2. . . your note suggests you think it's at ganache-cli - are you seeing this fire if you use geth --dev or do you mean that Truffle isn't detecting the event?\n. It should be available via the contract object:\njavascript \nreceiver.contract  // <--- The underlying web3 instance. \nreceiver.contract.methods.doSomething(123).encodeABI()\n. @sweatyc It looks like this is because the react-box isn't ES6 compliant. The syntax error is on an arrow function. \nThat box is in the process of being updated. Additionally there's a really nice ES6 / Web3 1.0 option at truffle-react,  maintained by one of Truffle's engineers. They're also the one working on the boxes :)\nDuplicate of react-box 53 . @kdelwat Agree this message is not good. . . could you see if it works if you specify an unlocked from address in your network config? Also did you see any other output?. @kdelwat One more thing - we run migrations in CI against geth --dev.\n+ there's a test specifically for the truffle init case here \n+ the geth client launch script is here\nIf you could identify any differences between your setup and ours that would be really helpful - would like to squash this if possible.. Ah super interesting. The only issue see at web3 triggering a similar failure is something about Quorum client timestamps where quorum is using Unix nano-second precision. \nThat DappTools starting balance is pretty big - I wonder if that's a possible problem. They're solidity based so they don't have to worry about translating values out to JS.  \nThanks for opening, hopefully someone will find this and figure it out. . Hi @matt9ucci \nJust a note: there are some simple instructions in the README here for anyone who wants to develop in the truffle codebase. I guess we'd add some guidelines about including tests with your PR or something..... @kdelwat This is a bit difficult to reproduce because it takes a while to get a node running the way you've configured it . Could you fetch the transaction receipt for the deployment that errors and post it to this thread? You should be able to do that by launching `truffle console --network  and running:\n```\n\nweb3.eth.getTransactionReceipt()\n```\n\nAlso could you verify that the Migrations is saving to the build file by looking the network section of the .json and checking to see if there is a listing for the network the geth node is running on?\nAlso could you post your truffle.js, sorry.\n. @kdelwat Ah that's just bizarre. The receipt looks good. I don't understand why this configuration is producing a different response than geth dev (or Infura for that matter). I'll have to spin up a node with your config overnight and take a look. \nThanks for finding this! . @kdelwat Unfortunately I ran out of disk space trying to run the node locally. . . Don't know if you're interested but we could set up a chat session where I ask you to insert random debugging lines in Truffle and we try to figure out how the error is getting thrown. You could also look into this on your own if you feel like it. \nThe place I'd start is here - inspecting the error and then work back into truffle-contract.\nUnfortunately installed truffle is a little unwieldy because its a single giant webpacked file called cli.bundled.js in the build folder. [Edit - misnamed the bundle]\nEditing the issue slightly to identify the error context. \n. @kdelwat Ok sounds good. The equivalent of truffle at the repo is in packages/truffle/build/cli.bundled.js. To generate a build of the current state of your edits you:\ncd packages/truffle\nnpm run build\nchmod +x build/cli.bundled.js\nWith the truffle repo in an outer folder you would alias within your 'real' project using something like:\n../truffle/packages/truffle/build/cli.bundled.js\nThe only thing that's annoying about this is that you have to remember to run the build command and make it executable after each change, otherwise it doesn't get included in the new bundle. \n. @kdelwat Fantastic! Thank you - such great work. If you don't open the PR by tomorrow I'll put it in but I really feel you deserve credit for this. \nEverything for V5 targets the next branch (in case you end up doing it.) . There's one other place in truffle-contract we check the status....\nhttps://github.com/trufflesuite/truffle/blob/next/packages/truffle-contract/lib/handlers.js#L105. I'm completely out of the loop on what this is and why. . FWIW I think #1095 is pretty migrations specific but there might be some overlap. I like that syntax too. . Hi @roderik, thanks for raising this.\nThe non-deploy transaction hash logging was removed because it was difficult to represent meaningfully (although you were able to interpret it :) ). Web3 1.0 exposes event listeners for transaction hash and receipt so a work-around for your case might look something like:\njavascript\nawait deployer.deploy(Registry);\nconst registry = await Registry.deployed();\nawait registry.authorize()\n              .on('transactionHash', hash => log(`Submitted registry authorization tx: ${hash}`))\n              .on('receipt', receipt => log(`Registry authorized`));\nMore broadly, the Migrations module has been rewritten to emit await-able events and have output managed by an extensible reporter service that tracks state across a series of migrations files. This feature needs a little more work and lots of documentation but you should soon be able to plug in your own reporter and control it from the migrations file. Example:\n```javascript\nawait deployer.deploy(Registry);\nconst registry = await Registry.deployed();\nawait deployer.emit('startRegistryAuthorization', registry.address);\nconst receipt = await registry.authorize();\nawait deployer.emit('endRegistryAuthorization', receipt);\n```\nThe reporter might just log to the command line, or track additional gas usage, but it could basically do anything - like text you if your deployment errors or wrap a server that connects the migrations to a browser interface. \n. @tarekskr Hi thanks for noting this. \n4.0.0-next.0 uses Web3 1.0 and has a number of API changes detailed in the new Truffle beta release notes.  \nwatch is no longer supported. Instead you can use an EventEmitter-like interface (requires that you have websockets enabled in your network config) or a callback (for http: see the Web3 1.0 docs here for more.) . @tarekskr There are a few things here: I think port 7545 might be a problem. . . that's the automatically launched ganache instance that isn't really configurable unfortunately. \nCould you try again after launching ganache-cli separately on the command line at 8545 and changing your development config port to the same? \nThe other thing to check might be the truffle-contract events tests which have some working examples.\nFinally - to use websockets on infura you have to connect to their websockets endpoints (ex: wss://ropsten.infura.io). Also be aware that these are less reliable than http at the moment. . @tarekskr Ah!! I didn't know the callback was also websockets - my understanding was that it was a polling fallback. I'll look into this further today. . @tarekskr It looks like Web3 only supports websockets, so there's a fundamental incompatibility with MetaMask at the moment. . . will ping this issue if I see a resolution (or cool workaround). . @jfkidear Could you try running this migration with Truffle's new beta? It's available by running:\nnpm install truffle@beta\nIt should give you a (slightly) more helpful error message. Things to check:\n+ Are you definitely looking at the balance with Metamask set the Ropsten network? You could also verify on ropsten etherscan.\n+ Is the mnemonic being passed to the wallet provider in the config what you expect?\nYou could check that by writing the provider value as:\njavascript\nprovider: function(){\n  console.log('mnemonic --> ' + mnemonic);\n  return new HDWalletProvider(mnemonic, \"https://ropsten.infura.io/\" + apiKey);\n},\n. Closing for housekeeping, please ping if you're still seeing this error.. @arisAlexis Could provide a clear example of the problem you're describing? Are you using solidity tests?. @thekevinbrown Thanks for both of these...\nGoing to open a fix for the first part of this issue shortly. Out of curiosity - are you still having problems getting that url to resolve? Clicking the link shows results and curl also works fine on my end. Are you behind a proxy or were you off the internet? . @thekevinbrown The relative path issue is also a bug - very sorry. Getting fixed in the same PR. . . . Both of these issues should now be fixed on truffle@next if you need these changes sooner than the next time we publish the beta. . @sinanofficial How many iterations are your loops? This looks like it might be a duplicate of #729. We think will be resolved with some recent changes at Web3 that make sure the provider is invoked with KEEP-ALIVE. At the moment if you are running many thousands of calls to the client Web3 can consume all the available port resources on your OS and triggers this error.. @thekevinbrown It looks like there's a missing level in your config. The optimizer settings are a subset of compilers.solc.settings per example below:\njavascript\n compilers: {\n  solc: {\n    version: '0.4.24',\n    settings: {\n      optimizer: {\n        enabled: true, // Default: false\n        runs: 200      // Default: 200\n      },\n    }\n  }\n}. @eggplantzzz I think we can also get the right coverage readings for the scenario tests if we add an elseif statement testing for the COVERAGE environment here and use this as the command. (Don't build):\nNO_BUILD=true mocha --no-warnings --timeout 7000 --grep @geth --invert --colors $@\nMaybe there's a webpack based solution too but that should work, we already have some logic that lets us run the tests bypassing the build since it's faster.. @eggplantzzz Weird. Is it possible to run the debugger tests skipping the build step? . @axic @gnidan \nNot sure if this is helpful but it is currently possible to get a list of nightlies and to pull one from solc-bin:\nshell\ntruffle compile --list prereleases --all\n[\n ...\n \"0.4.25-nightly.2018.9.10+commit.86d85025\",\n \"0.4.25-nightly.2018.9.11+commit.d66e956a\",\n \"0.4.25-nightly.2018.9.12+commit.9214c7c3\",\n \"0.4.25-nightly.2018.9.13+commit.15c8c0d2\",\n \"0.4.26-nightly.2018.9.13+commit.8b089cc8\",\n \"0.4.26-nightly.2018.9.17+commit.2409986c\",\n \"0.4.26-nightly.2018.9.18+commit.fcb48bce\"\n]\nTests for that here. \ngetByUrl assumes you'll a version string (like the ones above) and the Supplier manages the url path construction.\nsolcWrap is borrowed from the solc module and provides the correct interface to npm require because versions published to solc-bin target a browser-based environment (like remix). The wrap was broken out like this in the hope of avoiding a full require('solc') statement just to access it. When profiling the supplier it looked like that statement on its own takes > 1 second to execute. . > add some progress indicator when soljson is being downloaded the first time (I see it caches it after)\nYes completely agree - we have this open at #1132. \n\nimprove the release notes / documentation about using prereleases\n\nThis command is documented in the release notes, but maybe we should have good examples for all the possibilities in the config as well. There's also ongoing work on #1262 which will looks like it will improve the help command a lot as well. . @jmendiola222 The error you're getting is coming from the contract constructor and suggests that one of the constructor inputs you supplied to MyContract is undefined? Or missing?\nIf you can show the code around that deployment it might help with debugging. . Hi @jmendiola222 it looks like the error message is coming from a migrations file rather than a test. Truffle will run your migrations are run as part of the preparations for the test suite execution.\n\nError: while migrating MyContract\n\nCould you look in the relevant file and see if there's something amiss in one of your deploy statements?\n. @eggplantzzz Oh no worries! Nice job with the coverage btw. . @robinboening Thanks! This needs to be done. One issue is that since this was written, Truffle has started shipping with a blockchain server that gets launched automatically in the background if you don't specify any configuration networks. What do you think about changing this to something like:\n\nTruffle comes bundled with a local development blockchain server that launches automatically when you invoke these commands. If you'd like to install the development client separately and do cool network configuration stuff with it, you can npm install ganache-cli. And if you'd like your client to have a beautiful graphical user interface that displays your transaction history and chain state, checkout ganache.\n\n(Not dictating here - would love any improvement to the above.). @robinboening Excellent points. Agree that's confusing and actually you're the perfect person to decide how this should be worded since you come with no pre-conceptions about what anything means :) \nI think you're right: these commands  is clearer as the commands mentioned above.\nIn answer to the question, \"why do I need the server?\": You don't need it to start off doing basic testing. But as your project complexity grows, it's often helpful to run the client separately because it's far more configurable that way. How replacing the section that starts 'If you'd like . . . .' with something simpler and vaguer like?\nAlso check out:\n+  ganache-cli: a configurable command-line version of Truffle's blockchain server.\n+  ganache: A GUI for the server that displays your transaction history and chain state.\nThe actual links for those are:\n+ https://github.com/trufflesuite/ganache-cli\n+ http://truffleframework.com/ganache/\n. This is extraneous (GETH_CONTAINER).. Seriously. . \ud83e\udd85 \ud83d\udc41 . NB: this was put in because there was crashing (or hanging?) when config.websockets === true in darq-truffle. Needs further investigation. . I think we should pull this out, move the migrations reporter to a new module (perhaps truffle-reporters) and have these tests consume the production reporter.. ?. Is this getting attached at the receipt handler? Check. Bad.. add private doc string.. Delete this.. \ud83d\udc4d . Yes it is - we also have tests for reason string handling across a matrix of the following:\n+ deploy and send\n+ both states of vmErrorsOnResponse\n+ non-existence of reason / geth \n+ ganache as provider and server (the former at truffle-contract / the latter at scenario). Fixed.. Fixed. Oh my god, good catch.. They're defaulted in the truffle-config here.  I'm going to double-check that those are coming through but I think the integration tests would crash on the grandfathering line if that wasn't an object.. Yes it seems be working . . . this what the Supplier config looks like from a scenario test after it's been copied in the constructor:\njavascript\n{\n \"version\": null,\n \"versionsUrl\": \"https://solc-bin.ethereum.org/bin/list.json\",\n \"compilerUrlRoot\": \"https://solc-bin.ethereum.org/bin/\",\n \"dockerTagsUrl\": \"https://registry.hub.docker.com/v2/repositories/ethereum/solc/tags/\",\n \"cache\": true,\n \"settings\": {\n  \"optimizer\": {\n   \"enabled\": false,\n   \"runs\": 200\n  },\n  \"evmVersion\": \"byzantium\"\n }\n}. Hmmm. Need to investigate this a bit. Is the hard-coding of the path (carried over from original) the cause of the bug identified here. Or.....? . Oh totally that's a good idea. . . This comment is really for me - like DO NOT forget this is a serious problem right now. Needs resolution. . Ok cool I'll do that.... \ud83d\udc4d . Mmm. yes. \ud83d\udc4d . This only affects us running in CI against Geth because we can't really shut it down from the tests. Since mocha v4 (I thought it was 5) mocha doesn't automatically exit if there are open connections even if it thinks it's done. Everything works ok with ganache because we close it in an after. . I've moved this into the StatusError file where it (possibly) looks less arbitrary. Truffle-contract has actually attached quite a bit of stuff to the error traditionally - like the txHash for example (which we continue to do for backwards compatibility). . I guess derived from this axic comment in the EIP ? \ud83d\ude42 \n\nNow we could instead just assume that there is a generic error with a signature of Error(string), which hashes to 08c379a0 followed by an ABI encoded string, therefore revert(\"oh noes\") would result in the data 08c379a0 00...20 00..07 6f68206e6f6573..00. \ud83d\udc4d . Another nice catch.. \ud83d\udc4d . Yes. Definitely into making a test utils package.. The older migrate tests at truffle-core crash when this change is made. I want to deal with separately from this PR as a bug in the resolver - not sure what's going here..... Good idea! Added a test for this - it turns out that it 'just works' but . . . this is all ganache and more or less improvised. We'll need to revisit the implementation when the clients agree how to actually pass this info back. . Yes, exactly - this was a prototype for the production one.. The Reporter is instantiated once for a complete migrations cycle, which allows us to summarize their aggregate result. But it needs to be consume individual deployer and migration instances as they arise, hence the decoupling here. Definitely looks like we could simplify by having an init method or something that did all this in one place. \n\nPossibly make this change at async-deployer.. Ahhh! Sorry. (Thank you).. Oh yes that's right - it's an object that looks like this. Is it possible for this to be an array? It's the function segment of the ABI.\njavascript\n{\n \"constant\": true,\n \"inputs\": [],\n \"name\": \"returnsUnnamedTuple\",\n \"outputs\": [\n  {\n   \"name\": \"\",\n   \"type\": \"string\"\n  },\n  {\n   \"name\": \"\",\n   \"type\": \"uint256\"\n  },\n  {\n   \"name\": \"\",\n   \"type\": \"uint256[2]\"\n  }\n ],\n \"payable\": false,\n \"stateMutability\": \"view\",\n \"type\": \"function\",\n \"signature\": \"0x7c36bcda\"\n}. I think this is right. It's dereferencing the outputs keys of the object noted in the comment above . . .. There are a couple changes upstream from here in contract.js that pass in a larger chunk of the ABI.\nhttps://github.com/trufflesuite/truffle/pull/1138/files#diff-79802128c9314316abc8de8ceaa5bddcR51. Didn't know callbackify existed!. \ud83d\udc4d . Nice.. \ud83d\udc4d . What does command do? Is it a post-processing step?. What's being added here?. I like this test. Without this flag compile will run both solc compilation and whatever is specified by external? . The write here is to a folder named external? Can we check the path for that string? . Ahhh ok thanks makes sense.. Sweet.. Hmmm maybe this should be removed. The dry-run has had abbreviated output and was just preserving here but now this logic is outside the reporter so maybe shouldn't do that. \nOn the other hand it's all disposable, like the dry-run doesn't really pick up from a migration that left off or write artifacts that get preserved etc. . Why are they so normie over there? . Ah yes nice! That's a cool idea.. Yes - and there's one for elena as well above - didn't want to actually at them for the draft but definitely try make sure we don't forget this.. Yeah that's much better.. Mmm. Yeah I could go either way - I think I had it as you've shown it originally but when I looked at the web3 docs they used the then which seemed clearer. \nLike there's also a weird temporal thing about lines above happening before lines below. In the receipt example  - receipt resolves after the txHash fires and that seemed weird to me. \nAm I crazy lol? . That second pair of hands is yours!. Ah very good idea!!. Nice. lol!. The all capped now.. Put a small TOC in but it doesn't scroll - not sure if it's because it's in a comment or the links are bad. Probably need to work on this in the release context. . Added the require.. Done.. Done. The old web3 behavior was: no error is thrown from a conventional client returning a receipt with status zero. Our strategy was to inspect the receipt in the receipt event handler and throw. \nThe new web3 behavior is: an error is thrown from a conventional client that returns a bad receipt. Web3 stringifies the receipt into the error message. Our strategy is to catch the error, extract the receipt and route it to the receipt handler as before. \nSo our behavior around this hasn't really changed - our tests remain the same, we emit a receipt, etc. \nIs this what you're wondering about? In what context would we need to be backward compatible with .33?\nThis PR does contain a (potentially) breaking change because of .34's switch from hex to bool status results. But we throw an error anyway so it's relatively unlikely people are inspecting that field themselves.\n. Merging but please feel free weigh in further.... Could we use a variable for the large space here? The line runs outside the github window.. ",
    "0sk11": "I tried to unbox pet-shop (screenshot attached).It's says downloading... but the folder remains empty.\n\n. ",
    "adridadou": "Hi, I have the same issue, could tell me which change did you have to make ? thanks!\n. ",
    "ramvi": "You know what? I had node012 linked with brew instead of version 5.0. This can be closed\n. Found the problem. Posting it if anyone else end up here from Google.\nGit was both installed with cygwin and with setup.exe in windows. NPM used the cygwin-version in cmd, using both unix-paths and windows-paths together. Uninstalled cygwin, and it works. An other fix would be removing cygwin from path.\n. ",
    "tom-seddon": "This also happens with temporary emacs files. Skipping hidden files (hidden by the Unix-style rules, that is - i.e., name starts with .) would fix this too.\n--Tom\n. ",
    "robmyers": "You can address this by only calling web3 starting in window.onload(). \n. Importing fresh seeds fills up Metamask with old addresses in my experience.\nIMO it would be better for this to be fixed by Metamask as part of their nonce handling improvements.. I tried it and importing a new seed doesn't work now. :-(\nI just tried with a new network ID in Ganache and that doesn't work either.\nBetween testrpc and Ganache not working with Metamask without a complete reinstall, and failing in Mist with \"Account not found\" when trying to send transactions I'm not sure what to use to test UI.. ",
    "ramtej": "same issues here\n. ",
    "reivan": "I've got around this by installing node 5.3.\n. ",
    "alexfisher": "Using node 5.3 got rid of this error for me, too.\n. Same error here.\n. It looks like there might be an issue with a non-string path being sent to path.join.  I did a quick and dirty edit around line 168 of config.es6 and set config.environments.current.directory = \"\" and re-ran truffle init and it worked!\n. After doing so much troubleshooting and installing/reinstalling node, nvm, and a bunch of other stuff I decided to totally remove it all and start fresh this morning and got much better results.\nI totally reinstalled node (LTS v 4.2.4) and ensured it was installed in my home directory instead of globally as suggested here:\nhttps://nodejs.org/en/blog/uncategorized/development-environment/\nThen I ensured npm was also set to use my home directory (when the global -g option is passed to it) as mentioned here:\nhttp://stackoverflow.com/questions/10081293/install-npm-into-home-directory-with-distribution-nodejs-package-ubuntu\nThen, I installed truffle and had zero issues running \"truffle list\" and \"truffle init\".\nPerhaps having used a mix of a global node install using sudo and non global stuff was causing the path and permission issues I was running into over the last couple days.  In any case, hopefully this helps anyone else that may have encountered similar issues.\nBack to making my way through 101 Noob Into to Programming Dapps!\nhttp://consensys.github.io/developers/articles/101-noob-intro/\n. Thanks Tim!\n. ",
    "harlantwood": "I'm new to truffle, but it looks like 0.3.1 generates:\nenvironments/development/contracts/*.sol.js\nwhich should probably be gitignored.\n. Sure!\n. The parity team had good feedback in https://github.com/ethcore/parity/issues/1317 --\n\nParity is a bit more strict (spec conformant) in terms of accepted parameters format. I bet it's gas or gasPrice being send as a number instead of hex values.\nIndeed - please provide the JSON of the RPC that fails and we'll probably be able to point out where you're being non-conformant with the Ethereum JSONRPC spec.\n\n@tcoulter is there a way to print out json RPC arguments during deploy?  I tried DEBUG=* truffle deploy without success.\nIf not, can you point me to roughly where in the Truffle code to stick some debugging?  I poked around contract.js's deploy section but didn't see where we actually generate the JSON for the RPC ...\n. Thanks @thiagodelgado111!  Works like a charm; full output here: https://github.com/ethcore/parity/issues/1317#issuecomment-226980965\n. OK, @tomusdrw says\n\nData should be prefixed with 0x\n\nHopefully if we made this change in Truffle, it would still work with geth (etc), and now with parity as well.\nThis does seem to be the expected format in the ETH JSON RPC docs: https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sendtransaction\n. Fixed in Truffle 2.x, thanks @tcoulter.\n. See also #179 & https://github.com/ethcore/parity/issues/1317\n. @thiagodelgado111 \n. Fixed in Truffle 2.x.\n. Nice, so this should fix #179, correct?\n. Confirmed that this is fixed in 2.x.  Thanks @thiagodelgado111 for diving in!\n. I'm getting the same issue.  Verbose RPC log:\n```\n\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_getTransactionReceipt\",\n  \"params\": [\n    \"0x7f7c785e63e8cc8d81cce37adf8b80bf5f7402fe45c638a11be178c02a5ec461\"\n  ],\n  \"id\": 2\n}\n <   {\n <     \"jsonrpc\": \"2.0\",\n <     \"id\": 2,\n <     \"result\": null\n <   }\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_getTransactionReceipt\",\n  \"params\": [\n    \"0x7f7c785e63e8cc8d81cce37adf8b80bf5f7402fe45c638a11be178c02a5ec461\"\n  ],\n  \"id\": 3\n}\n <   {\n <     \"jsonrpc\": \"2.0\",\n <     \"id\": 3,\n <     \"result\": null\n <   }\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_getTransactionReceipt\",\n  \"params\": [\n    \"0x7f7c785e63e8cc8d81cce37adf8b80bf5f7402fe45c638a11be178c02a5ec461\"\n  ],\n  \"id\": 4\n}\n <   {\n <     \"jsonrpc\": \"2.0\",\n <     \"id\": 4,\n <     \"result\": null\n <   }\n```\n\n... this continues ad infinitum with id increasing each time.\n. FWIW, I removed the --nodiscover geth flag and now deploy works.\n. Excellent!\n. ",
    "larspensjo": "If it does, I think it should be optional. There are a lot of version management tools, and they all have different ignore mechanisms.\n. ",
    "PeterBorah": "Would appreciate a way to do this. First thing I do after truffle init is make this .gitignore:\nenvironments/*/contracts/**\nBut I can never remember exactly what it should be, so I have to go find it in another repo. Would be nicer to just go, truffle init --with-gitignore.\n. Running into this issue.\n. Running into this issue as well. Anyone have a workaround?\n. Uninstall/reinstall didn't help for me. By any chance did you switch from the beta to the stable version with the reinstall?. Yes, I think this works as expected on the latest version.. I don't think this works the way you want it to. The default authentication scheme only allows setCompleted to be called by the owner, but the old Migrations is not going to be the owner. Granted your new code might be different, but seems weird to have to write a new Migrations contract with the assumption that the old one can call it.\nI don't think this is necessary anyway, since it's a single uint that will need to be ported to the new Migrations contract, and the new contract can get it itself by calling last_completed_migration.\nMore important might be to let the owner set a new owner, so that people aren't stuck with the first key they use to deploy it.\n. ",
    "andy-mc": "Yeap I end up here looking for a template for a .gitignore for truffle but not all think is a good idea so a flag option would be great :) !! I dont ignore build files my first try and the git diff was pretty messy.. ",
    "josiahwood": "I don't know if this will solve your problem, but on my Cloud9 instance with Truffle I sometimes have to re-run nvm install v5.0.0.  It seems like Cloud9 somehow reverts my selected version of Nodejs when I haven't used it in a while.  I get this exact error when this happens.\n. Ah, I actually just needed to run nvm alias default 5.0.0.  That way I'm sure to get the same version of nodejs every time a new terminal is created in Cloud9.\n. Oh, ok.  Hmm, I guess I have some refactoring to do then.\n. ",
    "jeffscottward": "I have upgraded to node v5.2.0 stable.\nI got a lot of babel errors and some node-sass errors when installing globally, for example for babel:\nnpm WARN install:XXXXXXXX@1.0.7 ENOENT: no such file or directory, rename '/usr/local/lib/node_modules/truffle/node_modules/babel/node_modules/chokidar/node_modules/fsevents/node_modules/XXXXXXXX' -> '/usr/local/lib/node_modules/truffle/node_modules/XXXXXXXX'`\nsuccessfully installed a bunch of stuff but at the end got\nnpm ERR! code 1\n. ",
    "MrChico": "Haha, I have actually moved to the js testrpc now. You underestimate your manipulative powers @tcoulter \n. ",
    "lastperson": "I think this one is related, please consider the following example:\ncontract('Tester', function(accounts) {\n  it('should fail', function(done) {\n    (new Promise(function(_rs, _rj) {\n      setTimeout(function() { throw 'error'; }, 1);\n    })).then(done).catch(done)\n  });\n  it('should be pending');\n});\nIt results in a crash on first test, and never gets to the second.\n```\nContract: MultiAccessTester\n/usr/lib/node_modules/truffle/node_modules/solc/bin/soljson-latest.js:1\n(function (exports, require, module, __filename, __dirname) { var Module;if(!Module)Module=(typeof Module!==\"undefined\"?Module:null)||{};var moduleOverrides={};for(var key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var ENVIRONMENT_IS_WEB=typeof window===\"object\";var ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";var ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof require===\"function\"&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;var ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;if(ENVIRONMENT_IS_NODE){if(!Module[\"print\"])Module[\"print\"]=function print(x){process[\"stdout\"].write(x+\"\\n\")};if(!Module[\"printErr\"])Module[\"printErr\"]=function printErr(x){process[\"stderr\"].write(x+\"\\n\")};var nodeFS=require(\"fs\");var nodePath=require(\"path\");Module[\"read\"]=function read(filename,binary){filename=nodePath\"normalize\";var ret=nodeFS[\"readFileSync\"](\nerror\n```\nThe same suite\ndescribe('Tester', function(accounts) {\n  it('should fail', function(done) {\n    (new Promise(function(_rs, _rj) {\n      setTimeout(function() { throw 'error'; }, 1);\n    })).then(done).catch(done)\n  });\n  it('should be pending');\n});\nis handled properly in mocha though:\n```\nMultiAccessTester\n    1) should emit Called event\n    - should be pending emit Called event\n0 passing (11ms)\n  1 pending\n  1 failing\n1) MultiAccessTester should emit Called event:\n     Error: the string \"error\" was thrown, throw an Error :)\n``\n. Hi @tcoulter , thanks for quick reply. The problem is that this is the only output I get. Terminal prompt line appears right after the **error** word.\n. Hi, I stumbled upon a similar problem.\nI'm trying to do an import of a contract placed in a separate dir.import \"./../myGitModule/contracts/MyContract.sol\";And it is always fails. This will help a lot, cause when you starting to split contracts in different repos, and then using them with inheritance or asContract` type then it is pity to copy paste them all the time.\n. Per specification of web3 lib, sendTransaction returns transaction hash. If you want the return value from the function, you need to use call.\n. ",
    "danfinlay": "Yeah, just running it in the background (assuming it's installed, or even including it as a dev dependency of truffle) should be pretty simple.\nOn that side note, wary of getting too far off track, why is EtherSim as a provider not well thought out? It seems like that would be fairly simple, and should be isomorphic, so shouldn't require the node environment.  But I guess that's an issue for EtherSim.\n. So let's say we add a truffle develop keyword. Would it automatically pass the current rpc.port value to EtherSim as its port, or would we add a new EtherSim config hash to the app.json?\n. That sounds good! I'll take this opportunity to graze over the Truffle internals to familiarize myself with where these things happen.\n- Dan\n\nOn Dec 23, 2015, at 1:13 PM, Tim Coulter notifications@github.com wrote:\nSo let's say we add a truffle develop keyword. Would it automatically pass the current rpc.port value to EtherSim as its port, or would we add a new EtherSim config hash to the app.json\nWell, we'd make it do that, ya. But to do so, truffle would have to do things in this order:\nStart Ethersim on some port\nDeploy contracts to EtherSim (optionally recompile compile at this step, or compile if they're not yet)\nChange the config value to point to the Ethersim we loaded up\nRebuild the app with that config (will happen automatically if we run truffle serve)\nViola! The Truffle bootstrapping that happens within your dapp will take care of the rest (i.e., pointing at the host and port of the EtherSim we started in step (1), since it was in the config)\n\u2014\nReply to this email directly or view it on GitHub.\n. Oh awesome, thanks for the tip!\n- Dan\nOn Jan 1, 2016, at 4:17 PM, Alex Fisher notifications@github.com wrote:\nIt looks like there might be an issue with a non-string path being sent to path.join. I did a quick and dirty edit around line 168 of config.es6 and set config.environments.current.directory = \"\" and re-ran truffle init and it worked!\n\u2014\nReply to this email directly or view it on GitHub.\n. Awesome, thanks! \u00a0Can\u2019t wait to rebase my \u2018develop-mode\u2019 work onto this, and see if I can get dev/test environments running on EtherSim!On Jan 6, 2016, at 2:50 PM, Tim Coulter notifications@github.com wrote:Fixed in the latest master, which will soon be pushed to npm. Note that this is major version change (0.2.x -> 0.3.0), so it comes with changes to how your dapps are structured. You can see the migration instructions here: https://github.com/ConsenSys/truffle/wiki/Migrating-from-v0.2.x-to-v0.3.0\u2014Reply to this email directly or view it on GitHub.\n. Upon updating testrpc to the latest version this worked again.  This is almost definitely the new homestead features.\n. First, a couple clarifications:\n- In the 1461005828324_initial_deploy.js, MyContract is the Hub contract?\n- When updating the Spoke contract, we're actually deploying a new Spoke, and updating a pointer within the Hub?\n\nI'm really excited about this realm of thought. Truffle as it stands is a fantastic way to build simple Dapps, but for sustainable contracts, this is important stuff to deal with.\nI think the migration structure is clever, and I like how it allows multi-phase architectures to be constructed.\nOf course, since this is such a big change, I'd just like to make sure we get as many concerns on the table as possible before committing to the work.\nFirst off, if we're going to adopt migrations, it seems like we might as well have the ability to roll them back. This could be achieved by storing an array of the previous migration addresses, or maybe just the ability for a future migration to point back to an older one. Whatever the method, I think we'd regret if we could only migrate to new contracts.\nSecondly, as a member of the Ethereum community who loves its distributed nature, leaving one contract creator with the keys to change the contract at all times seems like a re-centralization of power.  A user, even on reviewing the contract, has no guarantee that the contract won't be spontaneously updated to different terms.\nI guess this doesn't need to be an issue, as long as we keep the possibility for different types of migrations.  Some migrations may require a vote of an approving board, which is essentially the premise of Boardroom by @SilentCicero.\nI guess I'm just making sure that the migration structure is open-ended enough that people could write their own migration contracts, which might require an asynchronous block step of waiting for a third party to sign off on a change.\n. Cool, thanks for the thorough answer, @tcoulter!\nI'm still on the fence re: up/down migrations, but it sounds like you're designing this migration path to be generic enough that it can be structured in whatever way a person wants, so it sounds good!\n. This was a problem in the frontend. web3.eth.sign was unavailable. Why wouldn't this change what it injects? When detecting web3, if you're just passing our provider to your Web3 object, you are providing that Web3 version, regardless of what we supply.\n. Can I get a link to the default builder? Can we open an issue there?\n\nOn Jun 6, 2016, at 2:17 PM, Tim Coulter notifications@github.com wrote:\nClosed #166 https://github.com/ConsenSys/truffle/issues/166.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub https://github.com/ConsenSys/truffle/issues/166#event-683473272, or mute the thread https://github.com/notifications/unsubscribe/AAhIj1B8jySfnXWM2QvzzihZYz4J7AYnks5qJI5agaJpZM4IoAZD.\n. Whoops, thanks!\nOn Jun 6, 2016, at 2:19 PM, Tim Coulter notifications@github.com wrote:\nI gave you one. And I did already. :) Here it is again. ConsenSys/truffle-default-builder#1 https://github.com/ConsenSys/truffle-default-builder/issues/1\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub https://github.com/ConsenSys/truffle/issues/166#issuecomment-224091762, or mute the thread https://github.com/notifications/unsubscribe/AAhIj_WYbdoi6F2gcp7Dv41MSGC94IWSks5qJI7cgaJpZM4IoAZD.\n. I just had this error too, @tcoulter. I wouldn't doubt I've got an abstract contract on my hands. Any idea if there's a way to get an error saying which method isn't implemented?\n. Cool, looks like we could close this issue then?\n. Could you maybe provide a git repo that allows easy reproduction of this issue?. \n",
    "jvah": "Just in case this is helpful, I'm using my own package.json and a script like this to run tests:\n\"test\": \"testrpc & truffle test ; RETVAL=$? ; JOBS=`jobs -p` ; if [ -n \\\"$JOBS\\\" ]; then kill $JOBS; fi ; exit $RETVAL\"\nIt attempts to start testrpc (which will fail in case there already is a client listening to the same port), then run the tests and finally kill testrpc in case it is still running, before returning the mocha return code.\n. ",
    "mjackson001": "After hours of debug, it turns out when copying the contract I had renamed it without renaming the constructor.  Certain dependencies were not being initialized correctly.  Wow, talk about learning the hard way.\n. I would love to be able to contribute where I can.  I have to confess to being a newb at Ethereum - I'm still learning the inner workings.  Although I've been following the project and it's ecosystem since its inception.\nMark\n. +1 same issue.  the check doesn't seem to be working correctly either.  For example, I'm getting this cyclic dependency error from a contract that has a sole import of an abstract contract that (a) no other contract imports and (b) doesn't import anything else.  Looking into how to disable this check... Using this new version of Truffle, I have a simple contract that imports another contract (not a library).  When the imported contract is changed, it's not rebuilding the contract that imports it.  Using 'truffle compile --compile-all' resolves the problem by forcing a complete rebuild.  Hopefully this isn't an either / or situation where we need the cyclic dependency check in order to have dependencies built automatically.. ok, let me try to create a simple test case and submit a separate issue.... Test case submitted: https://github.com/trufflesuite/truffle/issues/384. ",
    "bencxr": "To anyone else who still hits this - I had my NODE_ENV environment set to something else, and the truffle init command isn't initializing in that situation. So make sure you don't have it set. \n. ",
    "jimmysoa": "node V5.3.0 & 5.4.0 both the same error :-(\n. Thanks @tcoulter \nThere's some WARN info  during install truffle,but the lodash version on my Mac is above 2.0.0\nnpm WARN deprecated lodash@1.0.2: lodash@<2.0.0 is no longer maintained. Upgrade to lodash@^3.0.0\nnpm WARN deprecated npmconf@2.1.2: this package has been reintegrated into npm and is now out of date with respect to npm\n. I upgraded Xcode,it's ok now,Thanks.\n. ",
    "agatsoh": "When you install globally you get the latest version, when you install locally you get the earlier version, even i observed it. I have no idea whether it has been marked for an upgrade or not.\n. ",
    "u2": "https://github.com/ConsenSys/truffle/pull/78\n. I can see this page also, but while you click the result link, it will jump to a error page, and the url is http://truffle.readthedocs.org/en/latest/README/?highlight=web3\nBefore I used solidity.readthedocs.org, the search result page url was something like this https://solidity.readthedocs.org/en/latest/search.html?q=web3&check_keywords=yes&area=default I guessed the same format should be workable for truffle, so I tried https://truffle.readthedocs.org/en/latest/search.html?q=web3&check_keywords=yes&area=default, I worked well.So there is something wrong.\n. ",
    "kamil-kielczewski": "I have similar problem (blow) - but thanks to @tcoulter advice now is ok :)\nWarning: Command failed: node-sass -w -r public/assets/stylesheets -o public/assets/css/dist\n    /usr/local/lib/node_modules/node-sass/lib/extensions.js:158\n        throw new Error([\n        ^\nError: The `libsass` binding was not found in /usr/local/lib/node_modules/node-sass/vendor/darwin-x64-48/binding.node\nThis usually happens because your node version has changed.\nRun `npm rebuild node-sass` to build the binding for your current node version.\n    at Object.sass.getBinaryPath (/usr/local/lib/node_modules/node-sass/lib/extensions.js:158:11)\n    at Object.<anonymous> (/usr/local/lib/node_modules/node-sass/lib/index.js:16:36)\n    at Module._compile (module.js:541:32)\n    at Object.Module._extensions..js (module.js:550:10)\n    at Module.load (module.js:458:32)\n    at tryModuleLoad (module.js:417:12)\n    at Function.Module._load (module.js:409:3)\n    at Module.require (module.js:468:17)\n    at require (internal/module.js:20:19)\n    at Object.<anonymous> (/usr/local/lib/node_modules/node-sass/lib/render.js:9:12)\n Use --force to continue.\nError: Command failed: node-sass -w -r public/assets/stylesheets -o public/assets/css/dist\n. ",
    "aaronstjohn": "Sounds good.  We've been using this in production and it seems to be working for our needs. Let me know how it goes with your project.\n. Awesome! I'm glad it was helpful.\n-A\nOn Tue, Feb 9, 2016 at 11:29 AM, Tim Coulter notifications@github.com\nwrote:\n\nOh, by the way: I cleaned up a little bit of the code formatting to match\nthe rest of the code, and fixed a few edge cases related to when deploy\ninformation was output (for instance, deploy information shouldn't be\nprinted during test runs). Cheers!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ConsenSys/truffle/pull/85#issuecomment-181943966.\n. \n",
    "raymondcarl": "Just to add one issue that has come up when I've had some issues trying with other frameworks.  Could this be caused by install npm using sudo?\n. Yep, that was it.  I think the version of Node that comes in the standard repository is to outdated for npm.  I went to the github site for Node and installed that version and then Truffle installed ok.  Thanks!\n. ",
    "lin520chong": "When npm install -g truffle, i had a error.Has anybody can given me a help? thanks!\n\nnode-sass@3.7.0 install /usr/local/lib/node_modules/truffle/node_modules/truffle-default-builder/node_modules/node-sass\nnode scripts/install.js\n\nBinary downloaded and installed at /usr/local/lib/node_modules/truffle/node_modules/truffle-default-builder/node_modules/node-sass/vendor/linux-x64-11/binding.node\nnpm ERR! error rolling back Error: ENOTEMPTY, rmdir '/usr/local/lib/node_modules/truffle/node_modules/babel-preset-stage-2/node_modules/babel-plugin-transform-object-rest-spread/node_modules/babel-runtime/node_modules/core-js'\nnpm ERR! error rolling back  babel-preset-stage-2@6.5.0 { [Error: ENOTEMPTY, rmdir '/usr/local/lib/node_modules/truffle/node_modules/babel-preset-stage-2/node_modules/babel-plugin-transform-object-rest-spread/node_modules/babel-runtime/node_modules/core-js']\nnpm ERR! error rolling back   errno: 53,\nnpm ERR! error rolling back   code: 'ENOTEMPTY',\nnpm ERR! error rolling back   path: '/usr/local/lib/node_modules/truffle/node_modules/babel-preset-stage-2/node_modules/babel-plugin-transform-object-rest-spread/node_modules/babel-runtime/node_modules/core-js' }\n\nnode-sass@3.7.0 postinstall /usr/local/lib/node_modules/truffle/node_modules/truffle-default-builder/node_modules/node-sass\nnode scripts/build.js\n\n\"/usr/local/lib/node_modules/truffle/node_modules/truffle-default-builder/node_modules/node-sass/vendor/linux-x64-11/binding.node\" exists. \n testing binary.\nBinary is fine; exiting.\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /home/marvin/demo/npm-debug.log\nnpm ERR! not ok code 0\n. ",
    "silly-n": "After some time, I've figured that the problem is with the names: *.sol files must bear the same name as the contracts inside and the same names must be in truffle.json.\nIf possible, it would be nice to catch these problems with a more helpful msg :)\n. Hi, I think solc will be bumped in 0.4 (you might as well try the pre-release, it compiles for me now, but doesn't get deployed, but that's another issue).\nhttps://github.com/ConsenSys/truffle/issues/75\nhttps://github.com/ConsenSys/truffle/pull/78\n. ",
    "maximilianh": "Oh, wow, thanks! Yes, this definitely needs a more helpful message...\n. ",
    "jonnor": "solc is now version 0.2.2. Do you still have this problem?\nOn my Linux it works fine at least\n. @m888m are you running testrpc, geth --rpc or some other Ethereum client with RPC enabled?\nError: Invalid JSON RPC response: \"Error: connect ECONNREFUSED 127.0.0.1:8545\\ suggests it is having trouble connecting to that\n. Looked into the truffle script which has those hardcoding, and instead did the equivalent. However it fails with some ES6/babel things:\n[jon@jon-laptop dapp]$ ./node_modules/truffle/node_modules/.bin/babel-node ./node_modules/truffle/truffle.es6 \n/home/jon/work/thegrid/dapp/node_modules/truffle/lib/config.es6:195\n    config.expect = function(expected_path, description=\"file\", extra=\"\", callback) {\nSyntaxError: Unexpected token =\n  at exports.runInThisContext (vm.js:53:16)\n  at Module._extensions..js (module.js:417:10)\n  at Object.require.extensions.(anonymous function) [as .es6] (/home/jon/work/thegrid/dapp/node_modules/truffle/node_modules/babel/node_modules/babel-core/lib/api/register/node.js:214:7)\n  at Module.load (/home/jon/work/thegrid/dapp/node_modules/truffle/node_modules/coffee-script/lib/coffee-script/register.js:45:36)\n  at Function.Module._load (module.js:301:12)\nThis on nodejs 4.2\n. I fixed it by adding a ./truffle wrapper to my project (included below), inspired by the original truffle shell script. This works for now, can try to remove when you've pushed the portability fixes master / released it.\n```\n!/bin/bash\nReplicated from truffle bash script to work with non-global NPM install\nSee https://github.com/ConsenSys/truffle/issues/101\nexport TRUFFLE_WORKING_DIRECTORY=pwd;\nexport TRUFFLE_NPM_LOCATION=pwd/node_modules/truffle;\nHack. babel-node will clobber -e, and it doesn't look like -- will stop it.\nBecause we're doing string replacement, we have to take edge cases into account.\nargs=\" $@\"\nargs=${args// -e / --environment }\nargs=${args// -e=/ --environment=}\nargs=${args// -environment/ --environment}\ncd ${TRUFFLE_NPM_LOCATION}\n./node_modules/.bin/babel-node ./truffle.es6 -- ${args}\n```\n. Considering the impact of such behavior, I would heavily recommend an automated test which ensures the correct behavior.\n. ",
    "kumavis": "just tried, works here : )\n. we should check for the byte code and if possible display the original error\n. #49 relevant\n. they do match, but glad its fixed.. on master now and its working\n. this fix must not have been published - my students are using the latest published version\n. but used the opportunity to show people how to file issues in github\n. we are now reccomending awaiting page load event\nhttps://github.com/MetaMask/faq/blob/master/DEVELOPERS.md#web3---ethereum-browser-environment-check\n. Yes, file:// protocol does not work. Will add a note to the faq/developers.md\n. https://github.com/MetaMask/faq/blob/master/DEVELOPERS.md#https---web-server-required\n. @flyswatter no, @tcoulter still needs to implement this ( or remove the build sys )\n. ",
    "MeLoco1": "This copy pasted the output from the command line. In contract it looks like this:\n```\nfunction createMemoryArray(uint size) returns (bytes) {\n// Dynamic memory arrays are created using new:\nuint[2][] memory arrayOfPairs = new uint[2];\n// Create a dynamic byte array:\nbytes memory b = new bytes(200);\nfor (uint i = 0; i < b.length; i++)\n  b[i] = byte(i);\nreturn b;\n}\n```\nIt is an example from solidity array specification\nhttp://solidity.readthedocs.org/en/latest/types.html?highlight=type%20conversion#arrays\n. That's really an issue. Check the contract:\n `\n    contract MultiAssetContract {\n```\nstruct Asset {\n    bytes32 symbol;\n    uint8 baseUnit;\n    bytes32 name;\n    bytes32 description;\n    mapping (address => uint) index;\n    address[] holders;\n    uint[] amounts;\n}\nmapping(bytes32 => uint) public assetIndex;\nAsset[] public assets;\nfunction issueAsset() returns (bool) {\n    bytes32 symbol = \"LCC\";\nif (assetIndex[symbol] > 0) {\n    return false;\n}\nuint pos = assets.length++;\n\nassets[pos] = Asset({\n    symbol: symbol,\n    holders: new address[](2),\n    amounts: new uint[](2),\n    name: \"Coin\",\n    description: \"My coins\",\n    baseUnit: 1\n});\n\nreturn true;\n\n}\n}\n```\n`\nit successfully has been compiled in https://chriseth.github.io/browser-solidity/\nand works in Ethereum network. \nHowever truffle compile fails with:\nError compiling ./contracts/MultiAssetContract.sol:\n:27:26: Error: Expected identifier\n            holders: new address,\n                         ^ \n. ",
    "animesh21": "You need to run testrpc in a separate terminal window or run as a background process in order to connect to it. Run this command in another terminal:\nusername@workstation$ testrpc -a\nand minimize it and then do whatever you were doing.. ",
    "tayzlor": "Could do something like ( a bit less crude than this but....\nif (config.app.resolved.contracts != null) {\n       config.contracts.directory = `${working_dir}/${config.app.resolved.contracts.directory}`;\n     }\n. Racking my brains to remember but its similar to the above - I was building a Meteor app where I have a directory structure like app/server app/client i wanted to have a contracts in app/contracts (or something like that) but it was not possible.\n. ",
    "grubby8": "@YyItRoad I have got the same problem,how you sovle it?\n. ",
    "diogocortiz": "Getting the same problem. I am using testrpc. Did you solve tis problem?\n. Yes, I did. I have tried again just to make sure i followed those steps and got the same error msg. Any clue?\n. I have installed the envionment in a server in c9.io. I am accessing the web page using a remote browser. Could this be the problem (the browser could not load the credentials)?\n. ",
    "RunshanHu": "Getting the same problem. I'm using a remote virtual machine to developing the dapp and trying to access the website by local browser. Could this be the reason?. ",
    "blackbutler756": "facing error with : \n```\n\ntruffle serve \n\nServing static assets in ./build on port 8080...\n/usr/lib/node_modules/truffle/build/cli.bundled.js:124978\n  return (new fsevents(path)).on('fsevent', callback).start();\n          ^\nTypeError: fsevents is not a constructor\n    at createFSEventsInstance (/usr/lib/node_modules/truffle/build/cli.bundled.js:124978:11)\n    at setFSEventsListener (/usr/lib/node_modules/truffle/build/cli.bundled.js:125032:16)\n    at FSWatcher.FsEventsHandler._watchWithFsEvents (/usr/lib/node_modules/truffle/build/cli.bundled.js:125196:16)\n    at FSWatcher. (/usr/lib/node_modules/truffle/build/cli.bundled.js:125330:25)\n    at LOOP (fs.js:1773:14)\n    at _combinedTickCallback (internal/process/next_tick.js:73:7)\n    at process._tickCallback (internal/process/next_tick.js:104:9)\n```\nI used webpack. facing error with :\n```\n\ntruffle serve \n\nServing static assets in ./build on port 8080...\n/usr/lib/node_modules/truffle/build/cli.bundled.js:124978\n  return (new fsevents(path)).on('fsevent', callback).start();\n          ^\nTypeError: fsevents is not a constructor\n    at createFSEventsInstance (/usr/lib/node_modules/truffle/build/cli.bundled.js:124978:11)\n    at setFSEventsListener (/usr/lib/node_modules/truffle/build/cli.bundled.js:125032:16)\n    at FSWatcher.FsEventsHandler._watchWithFsEvents (/usr/lib/node_modules/truffle/build/cli.bundled.js:125196:16)\n    at FSWatcher. (/usr/lib/node_modules/truffle/build/cli.bundled.js:125330:25)\n    at LOOP (fs.js:1773:14)\n    at _combinedTickCallback (internal/process/next_tick.js:73:7)\n    at process._tickCallback (internal/process/next_tick.js:104:9)\n```\nI used webpack. ",
    "3th3r3um": "Same issue for me on arch with testrpc:\n\n> mkdir FsEventsError\n> truffle init\n> truffle migrate\n> truffle serve\nServing static assets in ./build on port 8080...\n/usr/lib/node_modules/truffle/build/cli.bundled.js:138158\n return (new fsevents(path)).on('fsevent', callback).start();\n          ^\nTypeError: fsevents is not a constructor\n   at createFSEventsInstance (/usr/lib/node_modules/truffle/build/cli.bundled.js:138158:11)\n   at setFSEventsListener (/usr/lib/node_modules/truffle/build/cli.bundled.js:138212:16)\n   at FSWatcher.FsEventsHandler._watchWithFsEvents (/usr/lib/node_modules/truffle/build/cli.bundled.js:138376:16)\n   at FSWatcher. (/usr/lib/node_modules/truffle/build/cli.bundled.js:138510:25)\n   at gotStat (fs.js:1783:21)\n   at FSReqWrap.oncomplete (fs.js:152:21)\n\nSystem Info:\nkernel: x86_64 Linux 4.11.9-1-ARCH\nnode v8.2.1\nnpm 5.3.0\nAnd I'm running testrpc in a different terminal\n. ",
    "guisantos": "Same issue here. Using testrpc\n\n. ",
    "githubmilind": "getting same error on Windows 10. Please help. ",
    "gengxuelei": "You need modify some files as this:\nhttps://gengxuelei.github.io/2017/12/26/truffle%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/\nmodifypackage.json\uff1a\n\"dev\": \"webpack-dev-server --host 0.0.0.0 --port 8080\"\nmodifytruffle.js\uff1a\ndevelopment: {\n  host: 'yourIp',\n  port: 8545,\n  network_id: '*' // Match any network id\n}\nmodifyapp/javascripts/app.js\uff1a\nchange\uff1a\n~~window.web3 = new Web3(new Web3.providers.HttpProvider(\"http://127.0.0.1:9545\"));~~\nto\uff1a\nwindow.web3 = new Web3(new Web3.providers.HttpProvider(\"http://yourIp:8545\"));\nsubstitute npm run dev  for truffle server\uff1a\nnpm run dev\nfsevents error need use webpack box & substitute npm run dev  for truffle server. same err as:\nhttps://github.com/trufflesuite/truffle/issues/108#issuecomment-358560594. edit package.json:\n\"dev\": \"webpack-dev-server --host 0.0.0.0 --port 8080\"\nto make ip:8080 ok\nwish to fix this bug\nCentOS Linux release 7.2.1511 (Core). ",
    "cbruguera": "@tcoulter Hello, is there any way to display events emitted in all cases (even for succeeded tests)?. @Arvanaghi Any details on what was the actual cause of the message? Cause I'm having the same issue, still not finding the error.\nMore context: tests run perfectly well within truffle develop and through solidity-coverage, but fail with the \"could not connect\" upon truffle test. Even more baffling: the tests actually run (and pass), just at the end the error message is displayed.. Apologies, I haven't been able to reproduce the error. And I can't recall right now what was the truffle-js file that was being used at the time (I'm working on multiple different projects). Since in my latests test runs I haven't seen this error, I'll regard it as \"fixed\" for me.\nI'll give notice in this thread in case I see the error again.. ",
    "OTTTO": "@cbruguera Yes, I believe this should be an option; potentially a set option in the mocha config.. ",
    "stefek99": "@OTTTO @cbruguera @tcoulter Do you know how to log events at ALL times?\nassert.equal(true, false); // failing on purpose to see log events\nAny better options?. > If you want the return value from the function, you need to use call\nBUT\n\n\nhttps://ethereum.stackexchange.com/questions/33154/function-call-behaves-differently-to-function-in-truffle-test\n\n\nhttps://ethereum.stackexchange.com/questions/16796/truffle-console-how-can-i-get-and-print-the-value-returned-by-a-contract-funct\n\n\n\nIf you use .call(), the data will not be saved but you will get the return value. The typical case is to call the function with .call() the first time to see if the execution went good, and then call again the function without the .call().. Example: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/test/crowdsale/Crowdsale.test.js\n\n\n. # please update error message\nVery often there are deprecation warning.\nA lot of old tutorials are using old syntax.\n\nthrow new Error(\"Expected parameter '\" + key + \"' not passed to function.\");\nError: Expected parameter 'from' not passed to function.\n\nGoogle works well, this issue is the first result but still... Updating error message is an easy job that will save some time.. I'm using: https://www.npmjs.com/package/truffle-flattener\nAlso helpful when exporting to Remix for debugging purposes.. There is also https://github.com/BlockCatIO/solidity-flattener\nRumors are truffle-flattener is better:\n\n. No need a list, just one that works is fine.. You are right.\nThere are docs.\nIt was just me who wasted some time.\nNew, cheap, travel laptop. Is node installed? Is npm in the path? Is it cmd or some console emulator?. Sorry.\nI should have better search skills.\nA lot wasted effort on that one :( \n(life of a developer). ",
    "TOMOAKI12345": "thanks now \"Could not find expected contract or library in 'MetaCoin.sol': contract or library 'MetaCoin' not found.\" \nand can run by -p https://gyazo.com/89046c8627f9df092ed82a1400c22814\np.s. For my Mac yosemite env \n$ mv /usr/local/bin/truffle {somewhere}\n$ mv /usr/local/bin/truffle-exec {somewhere}\nneeded\n. thanks, I have mistaken\n. ",
    "jtremback": "Why?\n. ",
    "hermanjunge": "I don' want to install anything in my machine, except docker\n. PR #134 \n. Done the evaluation\nCons first, as I don't want to give the idea that I don't want other people to do the docker stuff. Actually I love the ole' Give a man a fish / Teach him to fish saying. That way, we have more bandwith to learn more things and solve other problems. So, here is the thing:\nCons:\n- Running more than one process inside a container is an anti-pattern.\n- They need help to make the image lighter.\n- Forces the dev to work using Cloud9. What if the dev just wants truffle without anything (they should not be using testrpc, but a real node)? What if they use vim (or, god forbid me, emacs), atom, sublime, etc?\n- Regarding the above: A much better pattern is an array of containers orchestrated using docker-compose.\n- This is nitpicking, but they need help in the design of the Dockerfile, every line is a layer, and layers must be compact.\n- Finally, they should rely more on external files (and directories), they could be easily updated at build time, adding the right instruction to the build script, in order to keep a smaller Dockerfile.\nPros:\n- We won't have, in the future, to maintain anything about docker. (HUGE PRO)\n- We can support their effort to modularize their dev environment, should they want our help, of course. (See above what I think of fishes and code).\nTLDR: Cool. If they let us help them, we can have this excellent dev env: powerful slim, fit, adaptable. And we can focus on solving other problems.\nps: The bit about emacs is a joke. I have a close friend that uses emacs.\n. I can work with them, my biggest complain is that the development environment must be modularised into several containers orchestrated using docker compose.\n. Good. @tcoulter, it is your call to keep this PR open or closed. I got this very implementation in my dockerfiles collection :-)\n. @oluies Here https://github.com/hermanjunge/dockerfiles/blob/3d6b00279f044505b576560bede0b7836e4e0133/truffle/Dockerfile\n. ",
    "davebryson": "Thank you for Truffle!\n. ",
    "Mouna-Dhaouadi": "check this to upgarde your node version\nhttps://stackoverflow.com/questions/41195952/updating-nodejs-on-ubuntu-16-04. ",
    "thiagodelgado111": "Hey, thanks, @tcoulter!\n. That sounds awesome, @tcoulter. I'm really excited about that feature :)\n. Maybe we could follow Rails up and down idea? Would that be possible? I like the idea of the deployer maybe we could name it as helper or deployHelper something like this to make it more clear. \nCan we have a fallback function to call in case of errors during migration?\ne.g:\n``` js\nmigration('Adding \"users\" mapping to contract\"', function(args, helper, accounts) {\n//to be used to change the value of a flag or bind a new contract address to a contract\n helper.up(function(done) { \n   let oldContract = Contract.at(args.address);\n   oldContract.change\n })\n//to be used when something is done and cannot be undone or at least easily undone\n helper.change(function(done) { \n   let oldContract = Contract.at(args.address);\nUpdatedContract.new()\n   .then(function(_newContract) {\n      return oldContract.upgradeTo(_newContract.address);\n   })\n   .then(function(txHash) {\n      console.log('Contract upgraded!');\n      done();\n   })\n   .catch(done);\n });\n//to be used to undo what \"up\" is doing\n helper.down(function(done) {\n});\nhelper.onError(function() {\n   //notify the user, fix something on the blockchain, create a log entry somewhere, something like that\n });\n});\n```\n. Hi, @tcoulter! Thanks for reading my comment and answering it :)\nWhen I thought about having a rollback/down function I thought that it could be useful for little things e.g: reverting a change I did in a contract state variable modified on this migration. The same applies to up, it would be used for little things as well like the one I mentioned before e.g: a single transaction changing the state of a variable, calling a constant function, maybe even things that are not strictly related to the blockchain like calling a service to get data from it, anything like that. \nAnyway, I agree it might not be really useful. Would you still consider instead having:\n- A setup function to be used to put up anything that's needed for the next function\n- change that would be the place for the 20 txs to be executed \n- And maybe one called onError, to be called if the migration fails (I could log an event on a bug tracking service, log it on a file, etc.)\n``` js\nvar myAppData = require('myapp/libs/data');\nmigration('Adding \"users\" mapping to contract\"', function(accounts) {\nhelper.setup(function(done) { \n   migrationData.params = myAppData.getParams();\n })\nhelper.change(function(done) { \n   let oldContract = Contract.at(args.address);\n   var newContract;\n   UpdatedContract.new()\n   .then(function(_newContract) {\n      newContract = _newContract;\n      return oldContract.upgradeTo(_newContract.address);\n   })\n   .then(function() {\n      return newContract.use(migrationData.params);\n   })\n   .then(function(txHash) {\n      console.log('Contract upgraded!');\n      done();\n   })\n   .catch(done);\n });\nhelper.onError(function() {\n   //notify the user, fix something on the blockchain, create a log entry somewhere, something like that\n });\n});\n```\nAlso, I'm glad I ended up helping you to have the automatic revert idea with TestRPC hahaha :smile:\nAgain, thanks for reading and for your feedback :)\n. Cool, @tcoulter! I think you're right about leaving the task of sending an e-mail to the CI tool, I just thought it might be useful to have something like this! Thanks for answering! \ud83d\ude03 \n. That would be good to create mock contracts or tests contracts without the need to put them into the same folder as other contracts. Currently I'm running a few tests using contracts that I created just to test something very specific and currently I have a grunt task to copy them to contracts folder and remove them after running those tests\n. @harlantwood can you try this? \ntruffle deploy -e testnet --verbose-rpc\n. Hi, @harlantwood! I put up a quick fix to add the 0x padding for contract\u2019s creation but I couldn't test it because I can't make parity work properly here (my setup is fishy, I'm doing something wrong probably), and yes, I think it will be necessary for sending txs and calling functions too\n. ",
    "austing": "Same issue.\nLooks like the rest of the file was recently changed from the first format to the second, but update_sources was left out.\n. ",
    "oluies": "Herman, I am using this here https://github.com/combient/truffle\nI guess you havent progresed with this somewhere else? \n. ",
    "markledev": "I have the same error. @tcoulter Could you explain why we should avoid this cyclic dependency AT ALL COST while designing smart contracts? \n. @tcoulter I am looking forward to new version of truffle! When will the new version be released?\n. @tcoulter Got it! Thank you for saving us huge amount of time figuring out a sound workaround for this issue.\n. ",
    "redsquirrel": "Cyclic dependencies are impossible in certain situations:\n\nIf a contract wants to create another contract, the source code (and the binary) of the created contract has to be known to the creator. \n\nBut it does seem like they should be allowed when the contracts are members of each other.\n. Sorry for the bad link. Here's where I was trying to point: http://solidity.readthedocs.io/en/latest/contracts.html#creating-contracts\n@tcoulter I do think this is actually a Truffle issue. contracts.js looks for cycles in contract dependencies and errors if they are detected.\nCyclic dependencies don't appear to be a problem in Solidity as long as A and B don't need to create each other. If C did the creating and connected A and B to each other, then everything should technically work (but Truffle would still error). Only cyclic creation dependencies are impossible.\n. > Example: 1461005828324_initial_deploy.js. Here, the numbered prefix was produced by new Date().getTime(), but it can theoretically be any number.\nAt the risk of stating the obvious, I can't imagine not using a timestamp as the prefix. They have the double-benefit of sorting your migrations in sequence, as well as ensuring the migration filenames are unique.\n. > If the Migrator contract doesn't exist or is deleted by the user, Truffle will instead run all migrations in order, and will not save the migiration [sic] state upon completion.\nIt seems like in this situation, it should either auto-create the Migrator contract, or possibly prompt the user about whether a Migrator contract should be created. Otherwise, it seems like it's leaving the dapp in a bad state.\n. > Lastly, there is currently no notion of migrating both \"up\" and \"down\" as provided in Rails...\nI think this is fine. Being able to migrate \"down\" in Rails is nice, but I've never actually seen it used in production. I've only ever seen it used to revert/reset local schema changes while developing migrations and/or new features.\n. @tcoulter I imagine it would be nice to be able to re-run all migrations (assuming you're on TestRPC) to be able to get yourself out of a bad state, as well as ensuring that your migrations do actually play nice with each other. In general, though, I'd punt most of these questions until you get feedback from people using migrations in the wild. (In other words, keep it simple. \ud83d\ude04)\n. @tcoulter Is there a branch we can watch? \ud83d\udc40 \n. I'm getting a similar error when I clone the truffle repo, run node ./cli.js test (which succeeds), but then when I run node ./cli.js test again, it fails with:\nTypeError: Path must be a string. Received undefined\n    at assertPath (path.js:7:11)\n    at Object.dirname (path.js:1324:5)\n    at Module._compile (module.js:536:22)\n    at /Users/davehoover/Projects/truffle/node_modules/ether-pudding/loader.js:49:11\n    at /Users/davehoover/Projects/truffle/node_modules/ether-pudding/loader.js:30:7\n    at done (/Users/davehoover/Projects/truffle/node_modules/node-dir/lib/paths.js:27:13)\n    at /Users/davehoover/Projects/truffle/node_modules/node-dir/lib/paths.js:55:33\n    at FSReqWrap.oncomplete (fs.js:117:15)\n    at Function.module.exports.loopWhile (/Users/davehoover/Projects/truffle/node_modules/deasync/index.js:72:22)\n    at /Users/davehoover/Projects/truffle/node_modules/deasync/index.js:44:19\n    at Object.gather (config.js:304:5)\n    at /Users/davehoover/Projects/truffle/cli.js:251:31\n    at /Users/davehoover/Projects/truffle/node_modules/deasync/index.js:43:7\n    at runTask (/Users/davehoover/Projects/truffle/cli.js:46:12)\nIf I do a git status, it tells me that environments/test/contracts/ is untracked. If I delete that directory, then node ./cli.js test succeeds again.\n. It appears the problem is in ether-pudding's PuddingLoader. The call to Module._compile should be given a path to the module file.\n. Nice, thanks for pointing this out. I just used it to simplify the live-libs tests: https://github.com/ConsenSys/live-libs/commit/4f6d246b907ebf51d6476bf4ece0898a393f18a0\n. That's not an error. That looks correct: http://www.dictionary.com/browse/ample\n. ",
    "jeremyellis": "@tcoulter But solc happily compiles the ping and pong contracts, is there a reason truffle doesn't allow it?\n. ",
    "D-Nice": "Ran into same issue, and hopefully looking to have solc handle this.. Assuming you have testrpc up, running truffle migrate --reset before any tests, avoids constant recompilation when doing several individual tests.. I have not run into this scenario under Truffle v5 I believe, but have migrated towards using it, and would recommend others experiencing this issue atm to do the same and then report if they still have this issue.. ",
    "louptheron": "How I deal with it : \n```\nit(\"should emit Error event when sending 5 ether\", function(done){\n    var insurance = CarInsurance.deployed();\nvar events = insurance.allEvents();\ninsurance.send({from: accounts[0], value: web3.toWei(5, 'ether')}).then(new Promise(\n  function(resolve, reject){\n    events.watch(function(error, log){ resolve(log, done); });\n}).then(function(log, done){\n  assert.equal(log.event, \"Error\", \"Event must be an Error\");\n}).then(done).catch(done));\n\n});\n``\n. In fact, I was usingtestrpc, with does not return events ; by usinggeth` it does work as expected.\n. ",
    "chchmatt": "To help others that find this post, I believe this issue to still be a problem.  I've coded up a workaround that is reusable and provides flexibility in filtering the events:\nhttps://ethereum.stackexchange.com/a/21661/7132. ",
    "huuep": "quick fix is to 'unset NODE_ENV' before running 'truffle init'\n. ",
    "rfikki": "Any possibily for a suicide/selfdestruct feature for removing unwanted contracts.\n. +1\n. Yes, I mentioned in the truffle Gitter channel awhile back that 3.2.2 works the problem started with version 3.2.3 truffle.. $ truffle init webpack\nDownloading project...\nInstalling dependencies...\nError: Cannot find module \".\"\n    at webpackMissingModule (C:\\Users\\Rocky\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:209703:61)\n    at C:\\Users\\Rocky\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:209703:139\n. ",
    "chrisclark": "Would it make sense to address these constraints:\n\nOne that doesn't take constructor parameters, and one that's meant to exist as a singleton.\n\nseparately from updates/migrations? I don't see that they are inextricably related.\n. ",
    "zmitton": "Great ideas. This addresses one of the biggest unanswered questions I've had with Ethereum in general: how to update imperfect code. \nHaving said that, I AM concerned with having the OPTION to keep the contract immutable (in an easy way). Could there be maybe a flag upon project initialization that somehow specifies this? Either by disabling the feature, or maybe automatically writing a migration contract with rules that it can't be updated?\n. +1. ",
    "ayushgupta0610": "Hi @louptheron , can you kindly help me understand how did you resolve this issue?. ",
    "karlfloersch": "The deployer API makes a lot of sense. Feature-wise it seems similar to DappleScript but written in pure Javascript (which seems like a win). Would you say that's accurate?\nThe networks feature looks great. Totally support embedding network data inside of .sol.js.\nI don't know if I fully understand how the migrations feature works. It might be useful to add a diagram which can describe how the migrations stuff works, like what information is stored in Javascirpt, and what's on chain.\n. ",
    "lucasconstantino": "Meanwhile you can re-configure babel-register in your \"truffle.js\" file, like so:\n``` js\nrequire(\"babel-polyfill\");\nrequire(\"babel-register\")({\n  \"presets\": [\"es2015\"],\n  \"plugins\": [\"syntax-async-functions\",\"transform-regenerator\"]\n});\nmodule.exports = {\n  build: {\n    \"index.html\": \"index.html\",\n    \"app.js\": [\n      \"javascripts/app.js\"\n    ],\n    \"app.css\": [\n      \"stylesheets/app.css\"\n    ],\n    \"images/\": \"images/\"\n  },\n  deploy: [\n    // \"Contract\"\n  ],\n  rpc: {\n    host: \"localhost\",\n    port: 8545\n  }\n};\n```\n(ref: http://masnun.com/2015/11/11/using-es7-asyncawait-today-with-babel.html)\n. ",
    "ethers": "thanks @lucasconstantino solution works for me\n. > The spec says how to encode output data: https://github.com/ethereum/wiki/wiki/JSON-RPC#output-hex-values but doesn't specify input format anywhere.\nWould someone familiar mind tightening up the JSON-RPC spec?  maybe @tomusdrw ?. ",
    "cdyfng": "You can update your node to the newest version by following step. \n1. node -v     #may display version less then v8.0.0\n2. sudo npm cache clean -f \n3. sudo npm install -g n\n4. node -v  #check the version , mine is v8.0.0 now\nTest ok on Mac Os. \nThen you can use async/await in your js code.. ",
    "dadaista": "I get the same on deploy using v6.0. \nedit:\nI can confirm it works with v5.5\n. ",
    "NicolasMassart": "I had the same with node v6.1.0 using truffle deploy\nSo I tried to compile again and truffle compile gave me this error too but ti worked on the first time.\nSo I deleted my project and launched truffle init again and immediately launcher truffle deploy and it works fine. It seems that something is broken by the compile process... then any truffle command is broken.\n. ",
    "zunware": "I am having this problem as well, I cannot run truffle build or truffle test\nI tried reinstalling truffle, no luck :(\nI got truffle working again by reverting node to v5.5 \n. ",
    "raineorshine": ":+1:\nOn Wed, May 11, 2016 at 10:19 AM Tim Coulter notifications@github.com\nwrote:\n\nThis has been fixed in this commit / ether-pudding@2.0.9 :\nConsenSys/ether-pudding#25\nhttps://github.com/ConsenSys/ether-pudding/pull/25\nSince this is a bugfix release of ether-pudding, uninstall truffle then\nreinstall it again to ensure ether-pudding gets updated:\n$ npm uninstall -g truffle\n$ npm install -g truffle\nSpecial thanks to @redsquirrel https://github.com/redsquirrel. Will\nclose ticket. Please reopen if you continue to see the issue.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/147#issuecomment-218511276\n. Okay, thank you!\nOn Fri, Jul 22, 2016 at 11:25 AM Tim Coulter notifications@github.com\nwrote:\nClosed #159 https://github.com/ConsenSys/truffle/issues/159.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/159#event-732037575, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAtyxGZeI0GUv8JG5O2R2Co00oOyXCBOks5qYP0EgaJpZM4IevxJ\n.\n. FYI, as a temporary solution I overrode the mocha reporter to expunge the Contract: ... statements from the output.\n\ntruffle.js:\nmocha: {\n    reporter: __dirname + '/spec-custom.js'\n  }\nspec-custom.js:\n``` js\n/ A custom reporter based on the built-in spec.js from mocha. The only difference is that it hides messages that start with \"Contract: \" which truffle unnecessarily adds. /\n/*\n * Module dependencies.\n /\nvar mochaRoot = './node_modules/mocha'\nvar Base = require(mochaRoot + '/lib/reporters/base');\nvar inherits = require(mochaRoot + '/lib/utils').inherits;\nvar color = Base.color;\nvar cursor = Base.cursor;\nfunction ignoreSuite(suite) {\n  return suite.title.slice(0, 10) === 'Contract: ';\n}\n/*\n * Expose Spec.\n /\nexports = module.exports = Spec;\n/\n * Initialize a new Spec test reporter.\n \n * @api public\n * @param {Runner} runner\n /\nfunction Spec(runner) {\n  Base.call(this, runner);\nvar self = this;\n  var indents = 0;\n  var n = 0;\nfunction indent() {\n    return Array(indents).join('  ');\n  }\nrunner.on('start', function() {\n    console.log();\n  });\nrunner.on('suite', function(suite) {\n    //-- MODIFIED -----------------------------------------------------\n    if(!ignoreSuite(suite)) {\n      ++indents;\n      console.log(color('suite', '%s%s'), indent(), suite.title);\n    }\n    //-----------------------------------------------------------------\n  });\nrunner.on('suite end', function(suite) {\n    //-- MODIFIED -----------------------------------------------------\n    if(!suite || !ignoreSuite(suite)) {\n      --indents;\n      if (indents === 1) {\n        console.log();\n      }\n    }\n    //-----------------------------------------------------------------\n  });\nrunner.on('pending', function(test) {\n    var fmt = indent() + color('pending', '  - %s');\n    console.log(fmt, test.title);\n  });\nrunner.on('pass', function(test) {\n    var fmt;\n    if (test.speed === 'fast') {\n      fmt = indent()\n        + color('checkmark', '  ' + Base.symbols.ok)\n        + color('pass', ' %s');\n      cursor.CR();\n      console.log(fmt, test.title);\n    } else {\n      fmt = indent()\n        + color('checkmark', '  ' + Base.symbols.ok)\n        + color('pass', ' %s')\n        + color(test.speed, ' (%dms)');\n      cursor.CR();\n      console.log(fmt, test.title, test.duration);\n    }\n  });\nrunner.on('fail', function(test) {\n    cursor.CR();\n    console.log(indent() + color('fail', '  %d) %s'), ++n, test.title);\n  });\nrunner.on('end', self.epilogue.bind(self));\n}\n/*\n * Inherit from Base.prototype.\n /\ninherits(Spec, Base);\n```\n. @tcoulter: The output looks the same as the original, just without any of the \"Contract:\" lines. \nI wouldn't suggest removing the contract block completely, just the reporter output. Although, I suppose @markspanbroek's suggestion could work without a special construct. \n. @tcoulter I'm sure you are busy. This is currently blocking progress for me. Any help is appreciated!\n. @tcoulter The .sol.js does have a binary in it.\nI'm using truffle v1.0.2 and ether-pudding v3.0.3.\nI will try it with ether-pudding v2.x. \n@andylockran The contract object comes will be provided by the new function, but that is what is failing currently.\n. Problem solved when I switched to ether-pudding v2.x. Thanks!\n. Still major issues with this. I'm going to try moving to truffle v2, but I wish I knew what was causing the problem anyway.\nMy library is not getting deployed (address is blank in whisked file), even though TestLib is listed in the deploy section of truffle.js.\nTestLib.sol.js:\njs\n  var contract_data = {\n    abi: [{\"constant\":false,\"inputs\":[],\"name\":\"Foo\",\"outputs\":[],\"type\":\"function\"}],\n    binary: \"606060405260268060106000396000f3650301c67926cf50606060405260e060020a6000350463bfb4ebcf81146024575b6007565b00\",\n    unlinked_binary: \"606060405260268060106000396000f3650301c67926cf50606060405260e060020a6000350463bfb4ebcf81146024575b6007565b00\",\n    address: \"\", // why is this empty?\n    generated_with: \"2.0.9\",\n    contract_name: \"TestLib\"\n  };\n. That makes sense, and thanks for taking a look.\nI got around the \"no constructor arguments\" limit of truffle v1 for a while, but eventually needed that functionality, hence whisking manually.\n. All working now. Here's my hacky workaround, fwiw:\n``` js\nimport 'babel-polyfill'\nimport requireFromString from 'require-from-string'\nimport { readFileSync } from 'fs'\nimport { join } from 'path'\nimport { merge, prop } from 'ramda'\nimport config from '../../config.js'\nimport truffleConfig from '../../truffle.js'\nconst Pudding = require('ether-pudding')\nconst contractPath = join(__dirname, '../../', config.paths.contracts)\n/* Removes the 0x from the beginning of an address /\nconst stripAddress = addressRaw => addressRaw.slice(0,2) === '0x'\n  ? addressRaw.slice(2)\n  : address.Raw\n/\n  Replaces all library placeholders in the given string with addresses provided by a name -> address mapping.\n  (source: string, libraries: { name: Address }) => string\n/\nexport const linkSource = (source = '', libraries = {}) => {\n  // match library placeholders and capture the identifier\n  const regex = /__([^_])_*/g\n  return source.replace(regex, (match, name) => {\n    if(!(name in libraries)) {\n      throw new Error(Found library \"${name}\" in unlinked bytecode, but no address with that name was provided in libraries mapping.)\n    }\n    const addressRaw = prop(name)(libraries)\n    return stripAddress(addressRaw)\n  })\n}\n/* Compiles all libraries specified in the libraries field of truffle.js. /\nexport const compileLibraries = async web3 => {\nPudding.setWeb3(web3)\n// compile each library\n  const libraryNames = truffleConfig.libraries || []\n  const libraryInstances = await Promise.all(libraryNames.map(async libName => {\n    const Lib = require(join(contractPath, /${libName}.sol.js))\n    await Lib.load(Pudding)\n    const lib = await Lib.new({ from: web3.eth.accounts[0] })\n    return { name: libName, lib }\n  }))\n// constructor an object mapping: name -> address\n  return libraryInstances.reduce((prev, next) => {\n    return merge(prev, {\n      [next.name]: next.lib.address\n    })\n  }, {})\n}\n/* Inserts the given library addresses into the whisked contract code with the given name and returns a final, linked contract constructor. /\nexport const link = async (web3, name, libraries) => {\n  Pudding.setWeb3(web3)\n  const puddingContractSource = linkSource(readFileSync(join(contractPath, /${name}.sol.js), 'utf-8'), libraries)\n  const Contract = requireFromString(puddingContractSource)\n  await Contract.load(Pudding)\n  return Contract\n}\n```\nI use it like this:\njs\nconst libraries = await compileLibraries(web3)\nconst MyContract = await link(web3, 'MyContract', libraries)\n. Okay, thanks. Yes, all those things sound good... I might have to stick\nwith what I've got for the time being because I'm entering the phase of the\nproject where we are closing in on the alpha release, so I have more\nlimited time for refactoring or doing major upgrades and the necessary\nlearning/troubleshooting that comes with it. Thanks for your response.\nOn Fri, Jul 22, 2016 at 12:23 PM Tim Coulter notifications@github.com\nwrote:\n\nHey @raineorshine https://github.com/raineorshine. Is this something\nyou still need to do with Truffle's new migration system?\nIf you run deployer.link() within a migration, even if you don't deploy\nthat contract specifically (say, you want n MetaCoin contracts instead of a\nsingleton), it'll link the library for you and you'll be able to use it in\nyour application without having to do that yourself.\nAlso -- and this might be helpful to you -- EtherPudding 3.1.2 now manages\nlinked libraries for you. You can call MyContract.link(), passing in the\nlibrary name as the first parameter and the library address as the second\nparameter, and it will provider you a binary that you can use for\ndeployment. You can even change the linked address later by calling\n.link() with the same library name, and Pudding will take care of what\nI'm calling \"selective relinking\" for you.\nThere's no documentation for this feature of Pudding yet, but here's how\nthe latest Truffle uses it:\nhttps://github.com/ConsenSys/truffle/blob/master/lib/linker.js#L24\nNow that I think about it, because of this new feature in EtherPudding,\nI'm going to close this ticket. There's now much less you have to do\nyourself, even if you do want to continue whisking things yourself. :)\nCheers!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/192#issuecomment-234618931,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAtyxMxRPWSNuFmmO_8mXVbNXefnylk_ks5qYQq0gaJpZM4JIMcD\n.\n. Make sure that your contracts are all listed correctly by name in truffle.js in the contracts section.\n. Is this also true of truffle migrate? I think I'm running into the same issue there:\n\n2_deploy_contracts.js:\nconst Web3 = require('web3')\nOutput:\n```\n$ truffle migrate --reset\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  Migrations: 0xdbc4c7d5b2dbfc1c36320ba149c1df076e87b7f8\nSaving successful migration to network...\nSaving artifacts...\nRunning migration: 2_deploy_contracts.js\n/Users/raine/projects/myproject/node_modules/truffle/lib/require.js:59\n              throw e;\n              ^\nError: Cannot find module 'web3'\n    at Function.Module._resolveFilename (module.js:438:15)\n    at Function.Module._load (module.js:386:25)\n    at Module.require (module.js:466:17)\n    at require (internal/module.js:20:19)\n    at context.require (/Users/raine/projects/myproject/node_modules/truffle/lib/require.js:55:22)\n    at /Users/raine/projects/myproject/migrations/2_deploy_contracts.js:4:14\n```\nTruffle v3.0.0\n. I assume I can commit to master and then you can merge the change into beta? Let me know if there is a different procedure for patches that need to be applied to both branches. \n. Thank you, I am trying that out right now!\nI am getting confused though as it does not seem to be happening anymore, and now I am getting Invalid JSON RPC response: undefined. It occurs with MyContract.new(...). Other methods like web3.eth.accounts and MyContract.at(...) work fine. It appears that the contract is deployed successfully in testrpc, but the .new line still errors in my JS. It works fine in the truffle console.\nAny ideas?\n. server\n. Possibly related to https://github.com/ConsenSys/ether-pudding/issues/39?\n. The intermediary function in MyContract.sol.js is called once with no error and no address set, and then it crashes somewhere inside web3.\n. Is there some kind of compatibility issue with web3 v0.17.0-beta? I see that the truffle beta only uses 0.16.0.\n. Downgraded to v0.16.0. Works now.\nSorry this issue wandered from its original stated problem.\nHow should we proceed with documenting/identifying the 0.17.0-beta incompatibility? If it's a web3 bug, just skipping 0.17.0-beta might be smart.\n. npm will not install 0.17.0-beta automatically if the specified version range is ^0.16.0, since the -beta is there.\ntruffle#beta specifies web3 ^0.16.0.\ntruffle#beta specifies ether-pudding ^3.2.0.\nether-pudding#0.16.0 specifies web3 ^0.15.3.\nThat's all fine. I think the problem is that I am explicitly using web3 0.17.0-beta in my project. I guess there is a peer dependency to use the same version of web3 that is used by truffle.\n. I just learned about Solidity source mappings:\nhttps://solidity.readthedocs.io/en/develop/miscellaneous.html#source-mappings\nhttps://github.com/ethereum/remix/blob/54581749e36144db5c615481e59688a6e8a89cd6/src/util/sourceMappingDecoder.js\nI'm guessing this is the right way to do it... but if anyone can help translate that into something more accessible to the average web developer than a compiler developer, that would be helpful.. Assuming source mappings work as they've been described to me, the main blocker seems to be implementing debug_traceTransaction in etheremjs-vm. Some initial work from @kumavis: https://github.com/kumavis/eth-tx-summary.\nAll of this is starting to sound like a lot of work compared to my quick hack... \ud83d\ude32 . It'll be worth it, but I won't have time to contribute more before the end of the year due to other deadlines.. Awesome \ud83d\ude01\nOn Fri, Sep 15, 2017 at 3:02 PM Tim Coulter notifications@github.com\nwrote:\n\nHey @raineorshine https://github.com/raineorshine!\nUpdate on this (which I'm sure you already know).\neth_debugTraceTransaction now exists in the TestRPC. And Truffle 4.0 has\na debugger, making line numbers on error messages a nice to have rather\nthan a NEED to have (i.e., now you can go debug the transaction if\nneeded).\nWe still want to add this to make life easier, but we're going to track it\nin a different ticket. See #574\nhttps://github.com/trufflesuite/truffle/issues/574 for updates.\nThanks for all your feedback, as always!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/pull/307#issuecomment-329900904,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAtyxFSgzKhhGn4H_2a1eijvaFkh6XwJks5siuX5gaJpZM4K9VUE\n.\n. Great time for this now that node 8 supports async/await natively without a performance hit.. @sebasgoldberg I think I had to put the library in a separate file and import it.. @sebasgoldberg That's too bad. It's a good syntax. You may have to use the normal syntax instead. :). It works! \ud83d\ude03. \n",
    "NellyWhadsDev": "I believe your error is due to you not having defined the \"consensys-testnet\" is in terms of the rpc host and port number. After you specify those you should be good to go.\n. ",
    "BenjaminJornet": "Thank you for your answer ! In the app.json file, should I replace \n\"rpc\": {\n\"host\" : \"localhost\",\n\"port\": 8545\n}\nby something like that : \n\"rpc\": {\n\"host\" : \"consensys-testnet\",\n\"port\": 8545\n} ?\n. Hi, \nNo I don't. truffle.js is generating the app.json file\n. I already have upgraded to v1.0, I just can't figure out how to configure the environment to deploy the contract on the testnet.\n. ",
    "dgoswami75": "Just wanted to check if anyone can help on the above error. I hadn't been able to get to it for the last few days, but will be getting back to it later today... I need some help with the above error.\nThanks a lot for any input.\n. ",
    "webthethird": "I am having the same issue. Same newbie status. Please help us!\n. ",
    "vmadrienpro": "Quick tweak : \n-Find the file truffle.cmd\n-Copy the file and rename it (e.g truf.cmd) (in the same repo )\n-use truf compile\n. I should have explained that tweak more :) Thanks @brendan87\n. ",
    "brendan87": "@vmadrien is right - what is happening is the OS is trying to run the truffle.js file when you type truffle compile, instead of running the truffle.cmd link to the node module that (for me) was in C:\\Users\\xxxx\\AppData\\Roaming\\npm (it should also be on the Windows variable PATH so you can look there to find it too). Go rename that truffle.cmd file and you should be fine. Either that or rename the truffle.js file temporarily before running truffle compile in the project directory.\n. ",
    "ariolaclint": "Hi Guys,\nDownload the\nCygwin64 Terminal for windows\nthen run again truffle compile on truffle directory\n\n. ",
    "rts-2": "When I rename the file, then I get the error \"Could not find suitable configuration file\" - is anyone else having this problem?. ",
    "batjko": "I am having this issue, just following the setup of the pet-shop (http://truffleframework.com/boxes/pet-shop), throwing this error when trying to truffle compile. \nI'm on Windows 10 64bit.\n@tcoulter If it was fixed, I seem to encounter a regression.\nAlso, the two links posted back in Aug last year are dead now.\nI can go and manually rename the truffle.js as suggested, but it would be nice if that weren't necessary.. Ah, never mind. Found this in the current documentation:\nhttp://truffleframework.com/docs/advanced/configuration#resolving-naming-conflicts-on-windows\n. I'm getting the same error for one of the tests in the pet-shop tutorial:\n```cpp\n  function testUserCanAdoptPet() {\n    uint returnedId = adoption.adopt(8);\n    uint expected = 8;\nAssert.equal(returnedId, expected, \"Adoption of petId should be recorded\");\n\n}\n```\n\nThe Adoption contract being tested is exactly as instructed by the tutorial:\n```cpp\npragma solidity ^0.4.4;\ncontract Adoption {\n  address[16] public adopters;\nfunction adopt(uint petId) public returns (uint) {\n    require(petId < 0 || petId > 15);\nadopters[petId] = msg.sender;\n\nreturn petId;\n\n}\n// [...]\n}\n```\n. Actually, that brought me to a solution, @raid5 .\nThat require statement never made any sense to me. It seems to require that the petId must be less than 0 or more than 15, which is the exact opposite of what the objective was supposed to be.\nSo I've changed it so that petId is between 0 and 15, and tests now pass:\n\nIf this was a logical error, a test should not throw a weird, unintuitive exception like that.. Actually, I went ahead and tried the oldschool (non-ES6) version shown in the tutorial instead of the one I mentioned above.\nThat now works.\nDoes this mean, truffle doesn't allow ES6+, i.e. current Javascript standards, i.e. the ones supported by the installed Node.js version? Does it come bundled with its own javascript interpreter or something?. ",
    "yuandi0823": "WIN10  use PowerShell is OK. ",
    "masonbrothers": "If you have the same issue on Windows, instead of truffle compile try truffle.cmd compile. ",
    "edu-san": "not sure if this get resolved but you can always use truffle.cmd compile. ",
    "bitsabhi": "Either use truffle.cmd compile or go to the /contract directory and use truffle compile .. ",
    "npittsley": "Yep, using \ntruffle.cmd compile\nworked for me!. ",
    "rishikeshjadhav": "Using truffle.cmd worked for me :)\nWhile reading below helped as well\nhttp://truffleframework.com/docs/advanced/configuration#resolving-naming-conflicts-on-windows. ",
    "reddysuresh78": "I had same problem on windows. But running it from inside the contracts folder worked without any issue. . ",
    "Shuooang": "in windows try ...\n'truffle.cmd' \ninstead of 'truffle'.\nBecause of PATH_EXT= .......... .JS \ntruffle.js is excuted.\nOr remove '.JS' in PATH_EXT .\n. ",
    "haghighatcs": "\nI'm getting an error for 'module' is undefined when I run 'truffle compile' from the project folder.\nAny pointers to what might be going wrong? truffle init works fine and creates the project structure as described in the docs.\nI'm a newbie to Truffle, so please let me know if I need to provide more info. Attaching the error screenshot\n\n\nThis is an OS Conflict that may happen in some windows operation systems.\nbecause windows wants to run truffle.js file instead of truffle.cmd.\nyou can simple solve this problem by using truffle-config.js file to keep the configuration (instead of truffle.js).\ndo not rename truffle.cmd and do not bring headache for yourself.\nit's very simple. \"keep the configurations in truffle-config.js file\".. ",
    "msbachler": "Work around: I put all php files in a subfolder inside the app folder called 'phpfiles'. I then added the following to the build section of the truffle.js:\n\"/\": \"phpfiles/\"\nWhen I run truffle build this puts the files inside phpfiles at the top level of the build folder so I don't have to change my reference paths to them etc. Still think it would be nice if it worked as it did before and just copied over top level files for types it didn't recognize. But this at least makes building the dapp bearable.\n. I put some console logging to your app.js generated code. It is specifically upset about the object 't' in the above code snippet because it does not have the property 'abi' on which it wants to get the 'filter'. I printed out 't' and it is:\nt:{\"_eth\":{\"_requestManager\":{\"provider\":{\"host\":\"http://212.219.130.124:54200\"},\"polls\":{},\"timeout\":null},\"compile\":{}},\"transactionHash\":null,\"address\":\"0xd1bb9301e1a2d24965ef8ce1de7f9353946d5621\"}\nNo idea if this helps you. I will keep digging. This is a major issue for me so I really need to get it fixed. I particularly want to know if there is anything I can do by just changing my code in some way to fix this.\n. OK. It is failing at the point of trying to create a new instance of a contract. I put some console logs into the following code from your app.js:\nPudding.at = function(address) {\n  var web3 = Pudding.getWeb3();\n  var contract_class = web3.eth.contract(this.prototype.abi);\n  var contract = contract_class.at(address);\n  return new this(contract);\n};\n'this.prototype' is an empty object, so does not have an abi property when calling web3.eth.contract. Both the contract js code snippets for my two contracts have definitely been copied into the bottom of app.js as usual. I don't know enough about Pudding or your app.js really to know what is failing exactly. I will keep digging.\n. I compared the app.js on my new blockchain server that works with the one on the old blockchain server that has been upgraded. Both return '1.0.3' for the 'truffle version' command. But the .sol.js code is quite different on both machines. Person.console.js on the new server says in the contract_data object that it was 'generated_with:\"2.0.6\"'. On the old server it says 'Person.generated_with = \"1.0.3\"'? But both say they are truffle version 1.0.3. What exactly does the generated_with property refer to?\n. OK. After some diffing I worked out that the most likely issue to why the two .sol.js contract files where so different on the two servers was the ether-pudding library. So I ran npm install -g ether-pudding on the old server (with the new geth) to be sure it had the newest version. (I had run npm undate -g already). I then truffle compiled and truffle deployed, and truffle built. That dapp I was testing with now works in the same way as it does on the new server. They both get some promise warnings, which I will look at later but at least they both work now. So I can go ahead and update the new server to the new Geth without worrying. I am not sure I really understand npm and how it updates stuff very well. I will just keep checking versions on the too for all dependent libraries are as required as npm update is obviously not updating as I expected.\n. ",
    "hockeyshooter": "With Truffle v2.0.6 I'm now getting PHP files copied into the build but some are zero bytes. Does the same with either build or watch, but I get an error message of a missing file with watch.\n. ",
    "DiscRiskandBisque": "I'm running into the same issue and have also tried the full path:\nimport \"C:/dapps/zeptest/contracts/zeppelin/Ownable.sol\";\nWith relative paths, as @vmadrien described, I get the error:\nMetaCoin.sol:4:1: Error: Source \"zeppelin/Ownable.sol\" not found: File not supplied initially.\nWith a full path, I get:\nCannot find import Ownable.sol from MetaCoin.sol. If it's a relative path, ensure it starts with './' or '../'.\nAll Windows 10 machines and I'm using PowerShell as the command line.. @tcoulter 2.1.1 on this machine. When I get home I'll check the other two.. Try increasing the maximum number of watches:\necho fs.inotify.max_user_watches=582222 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p\nClosing this for now, but if the above fails please re-open!. Web3 has been upgraded! Closing this for housekeeping, but please re-open if the problem persists.\nCommit here: https://github.com/truffle-box/webpack-box/commit/c67956e2db79053e071097d84b91f04b87659394. ",
    "CruzMolina": "Closing as I've verified this is no longer an issue on the current stable release (v4.1.14) and the current v5 beta release (beta.1) .. Thanks for raising this issue @szerintedmi!\nWe've finally merged a fix for this into truffle@next via #1331.. Thanks for raising this issue @thisbejim !\nWe've finally merged a fix for this into truffle@next via #1331.. Thanks for raising this issue @leochan007!\nWe've finally merged a fix for this into truffle@next via #1331.. Thanks for raising this issue @barakman !\nWe've finally merged a fix for this into truffle@next via #1331.. Thanks for the reminder! Closing.. @eggplantzzz is this fixed in #1305?. Thanks again @JamesLefrere!. Thanks for raising this @vince16 !\nFix has been merged into truffle@next via #1330.. Thanks for the review @eggplantzzz , let me know your thoughts on the latest changes. Adding some test coverage \ud83d\ude0e . Decided against testing the flow and outcome of the prompts for now, since sinon currently doesn't natively support testing inquirer prompt input. There does appear to be a way to test inquirer prompts using jest and ava, but I'm not sure I should spend any more time on this. I can also potentially just mock test the inner methods in copyTemp... and promptOver...\n@gnidan @eggplantzzz @fainashalts . Thanks for raising this @thekevinbrown !\nFix has been merged via #1325.. It's been connected, but for clarity, marking #1340 as containing the test steps.. The current flag for this behavior is --dry-run. Let me know if this meets your specs \ud83d\ude0e . For reference, the spec'd behavior for V5 should be:\nif you specify --dry-run, it should run only the dry run and then quit ( Currently on v5 beta1: \u2705 )\nif you specify --interactive, it should run the dry run, then prompt to continue with the real migration ( v5 beta1: \u2705  )\nif you specify neither, the default behavior is to dry-run first, then do the real migration if there are no errors. ( v5 beta1: \u2705  ). Looks like the fix is npm install --save truffle-hdwallet-provider@web3-one.\nAfter installing @web3-one, all three behaviors detailed above work as described. \ud83d\udc4d . Ah, this should re-investigated for v5.. @gnidan removing the label and marking #862 again as containing the test steps.. Closing this for now. Will be trying a different route for enabling pluggability.. @fainashalts to help resolve the stylistic issues that @eggplantzzz is pointing out, it might help to merge next into your branch again to test out using eslint and prettier. @roderik would love to support this. Please feel free to submit a PR!. Yes thank you @roderik for getting the ball rolling. Right now we have our hands full prepping for Devcon, but shooting to have some of this included in beta.2 \ud83d\udc4d . @gnidan I can also push an updated package.json with the eslint devDeps and a pretest script to include in CI. Might end up being noise instead of helpful though since there are ~250 warnings that pop up.. Can't wait to get this merged in. Super stoked about the Config.search helper. Should allow me to trudge on making all the things configurable.. Thanks for doing this @canufeel ! Will be reviewing soon and hopefully have this merged by the end of the week.. Ahh, so I think if we merge this it potentially ruins things for Geth users. Not sure how many users actually use Geth to run truffle test though.. Closing this in favor of a PR that more simply allows customizing params for testing (i.e. it will auto launch ganache-core if a development or test network isn't defined [using certain safe default vals], but otherwise use development or test config network params to connect to an assumed already running chain).\nThanks for being a part of this @canufeel !. Thanks again for doing this @Roderik. @sneko I did some playing around with replicating your error and I believe it is a configuration issue on the ts side (typechain, tsconfig, possibly truffle-typings).\nSince this is a simple enough feature addition, I think we're going to move ahead with supporting this after I add some tests to ensure coverage.. @sneko did a little more replication using the truffle-typechain-example repo.\nI was able to get the example working using their current setup (package.json, tsconfig, etc). I was also able to get things working using Roderik's current workaround here.. Ah, I see what you mean @sneko. After reviewing the codebase, it looks like truffle-migrate exports the migration files to a js parser in truffle-require. For now using truffle-typings with typechain, you don't have to add to or change migrations_file_extension_regexp to parse .ts (tsc will transpile it for you to .js). I was able to get the example repo working without Roderik's workaround. You don't have to specify a different migrations_build folder, you can just use the given repo's tsconfig and the example migrations .ts file to base your own migration files.. So after diving into this, it looks like this change doesn't immediately further .ts integration or ethereum-ts support (although #1385 should help a teeny bit towards that end). However, it does make an aspect of truffle-config configurable in a way that could be useful more long term.. Looks like this needs another look for the geth build.. Woohoo, I think this is ready! \ud83e\udd1e . Currently working on coverage. needs coverage. need to refactor a line or two, currently breaks truffle init & truffle unbox <http(s) url>. need to update the tests to account for the truffle-box refactoring\nedit: turns out there was just a merge conflict discrepancy \ud83d\ude0e . Coverage would be nice.... Ah, thanks for spotting that @eggplantzzz . pushed the wrong file \ud83d\ude06 . Self-assigning to keep open.. jotting down for posterity (if I'm unable to get to this before going on leave), I think this should be handled in the \"runHandler\" in truffle-core/lib/run.js. completely agree that we should provide a standard/recommended way for plugin writers to specify in some manner what they would like to display (perhaps using our displayCommandHelp func from our end) when a --help flag is passed. Ideally in the truffle-plugin.json something like...\n{\n  \"commands\": {\n    \"hello\": \"hello.js\"\n  },\n  \"help\": {\n    usage: \"truffle run hello [name]\",\n    description: \"Greets a given user\",\n    options: [\n      {\n        option: \"name\",\n        description: \"Name of user to greet.\"\n      }\n    ]\n  }\n}\nor also potentially allowing a file to specified (which we would parse with certain expected parameters in mind).\nAlso agree it would be nice to get a list of properly configured/installed plugins, perhaps a --list flag to call with truffle run (truffle run --list)\n(Btw, thanks for making all these truffle run issues! \ud83c\udf89 ). would be nice to have coverage for this, although I don't consider it a blocker.. @gnidan confused about changing vmErrorsOnRPCResponse to false. don't we want it to be true so that ganache returns a reason? I'm seeing tests specifically setting the RPCResponse to true in order to get a reason response.. Not sure status on this, commenting to keep open.. Resolved by #1503. Thanks for raising this @eloudsa !\n1548 should resolve this.\n. @eloudsa truffle-hdwallet-provider 1.0.0-web3one.5 just got published. \ud83c\udf89 . Thanks for reporting @gjeanmart! Looking into it.. @gjeanmart @eloudsa truffle-hdwallet-provider 1.0.1 just got published.\nnpm i truffle-hdwallet-provider should default to it. Hopefully got this squared away. I tested manually \ud83e\udd1e . @gjeanmart will happily re-open if there's still an issue.. Legacy migrations \"complete\".\nFurther potential work to polish it up:\n- runLegacyMigrations method doesn't properly return a callback error as a TruffleError (yet). (Couldn't get it to work on my end).\n(update: have yet to try getting it to work)\n\n~truffle-contract could potentially be streamlined further to not use legacy lib (might not be worth it, might be easy, might require more substantial surgery). Streamlining further might only require using legacy-web3 to do BigNumber conversations if options/config legacy is true. Might be more difficult than that.~\n\n(update: reviewed the code to take a shot at this and there's not really an easy way to do it [would potentially make truffle-contract clunky and confusing]. doesn't seem worth the trouble/time/effort, imo makes more sense to just drop in the legacy v4 truffle-contract file.)\n- ~further streamline truffle-deployer to not use legacy lib. Tried a couple approaches that didn't work on my end, seems not worth the effort.~\n(update: after review, imo truffle-deployer is in the same boat as truffle-contract. i think the issue is that the new deployer class extends a new migrations-oriented (web3 1.0) Deployment class that makes it difficult to only inherit and use a legacy-web3-compatible class obj (i could be mistaken). seems the best use of time is to just use the legacy lib as a stop-gap until we formally/appropriately build out cross-chain deployment support).. > TODO:\n\nStreamline legacy testing.\nIt's a bit of a mess, but might not be too bad once re-written to build on top of refactored legacy migrations.\n\nLegacy testing \"complete\".\nTurned out to be pretty easy once legacy migrations got straightened out and the compatibility issues got mostly narrowed down to web3 0.20 vs web3 1.0.\nManually tested legacy migrations & testing locally against quorum and ganache-cli. Might be nice to add a couple mocha tests to ensure this doesn't break things anywhere with ganache-cli & geth.. As a side note, forgot to mention I've been unable to get IBFT to work w/o this PR.. Citing this as a potentially relevant solution: https://github.com/nodejs/node/issues/13209#issuecomment-385852791. Rough notes on another idea (more mid-term than short-term), in the direction of making integrations first-class:\n\"swap out \"core\" components of truffle (i.e. making truffle migrate itself a swappable component, along with truffle test\" \nsemi-related rough notes:\n\"move towards making truffle test/truffle-test itself swappable also allows us to support things like .vy testing support. i.e. the default being a .sol work flow, but being able to drop in a package that can handle .vy or some other smart contract lang testing\"\n(doing the same for truffle-migrate/truffle migrate also allows us to move towards integrations being first-class). Looks like the box.js sandbox method needs to be updated here: https://github.com/trufflesuite/truffle/blob/update-unbox/packages/truffle-box/box.js#L44. At, looks like it's the truffle-debugger tests at this point. I think whatever Migrations.sol file they're pulling down need to be updated to have the inclusive pragma: pragma solidity >=0.4.21 <0.6.0;\n. Should pass tests and build successfully once the leftover v4 test stuff is updated.. Following up on this, don't recall why it would be an issue to change the network_id to match GanacheUI's, but I'm probably forgetting something.. Closing this for now as #1773 seems to be the current reasonable compromise. \ud83d\ude0e . @adrianmcli I just looked over the \"Getting Started With Drizzle And React\" tutorial.\nThere's a discrepancy w/ MM's UI (on 6.2.2 on Chrome). \n\nCurrently you have to set port: 8545 in truffle-config.js before running truffle develop to get MM to connect to the local chain.\nIf their intent is to support localhost 8545 then the tutorial would need to be updated to include setting your config like so:\n```\nmodule.exports = {\n    develop: {\n      port: 8545\n     // doesn't need other network configs\n     // safe localhost default params are used\n    }\n  }\n};. Opened an issue w/ MM regarding the above noted issue at: https://github.com/MetaMask/metamask-extension/issues/6321. Hey @ferittuncer, thanks for reporting this!\nCan you provide a repo link? I notice in the gitter you were trying to use sendAsync (which shouldn't work anymore in v5 since we upgraded to web3 1.0).. Closing this as a duplicate of #1760.. Hey @johnda98 !\nIf you could provide some more info, a repo link, or a screenshot, it would go a long way \ud83d\ude4f . Thanks for raising this issue @jgege !\nWill take a look and see what can be done on our end.. Hey @jgege , got a fix for this on our end (#1775 ).\nThanks again for bringing this up, hoping to have this revolved shortly \ud83e\udd1e . Updated prior comment to reflect new specific PR for this. #1773 should still resolve any compatibility issues moving forward.. Closing this per #1775 .\nThanks again for reporting @jgege , if this doesn't go out for release tomorrow, it should be out by middle of next week. \ud83c\udf7b . Hmm, just tried to reproduce the error using @kipliklotrika's steps and was able to successfully migrate twice. \ud83e\udd37\u200d\u2642\ufe0f \nKeeping this open just in case for now.. Thanks guys!\nClosing issue.. Hey @isaacsultan !\nAre you running ganache-cli in a separate window while running these tests?\nIf you use the default test network (spins up when no networks are defined in your project's truffle-config.js), each round of tests should use a clean chain state.\nOtherwise, with ganache-cli running separately in the background somewhere, the evm state will be saved and re-used by each test run.. Oh! Well if you're using the default test network, no need to run ganache-cli separately. Truffle will/should spin up ganache-cli as a background/child process on every truffle test run (and terminate it after the tests are done running).\nIn your situation, truffle must be connecting to the development chain running separately rather than starting up its own internally.. @isaacsultan realized I didn't directly answer your question \ud83d\ude02 .\nTo have a clean chain state on each truffle test run, don't run ganache-cli separately and have truffle use the default test network (no networks defined in the config).. Thanks for the review @adrianmcli ! \nLovin the suggestions so far. \ud83d\udd2c . Hey @Amxx! I've tried reproducing your error locally on a sample truffle project using openzeppelin-solidity dependency contracts, but so far things are working.\nCould you share a truffle project repo w/ a setup similar to the one not working?\nTested on: latest Truffle v5 (5.0.7) & latest truffle v4 release (4.1.15).. Hey @mudgen ! Could you share a link to your truffle project?. hey @mapachurro , do you still run into that error message on the latest version of truffle? (5.0.8). Thanks for this @linkdesu !\nThe entire README for truffle-artifactor needs a makeover, so thanks for pitchin in! \ud83d\udc4d . Hey @timbeiko ! Thanks for raising this. Currently working on a fix \ud83d\udc4d . @timbeiko you should be able to test this by:\n\ngit cloneing the develop branch\ncding into the cloned truffle dir\nrunning yarn bootstrap (if you don't have yarn, then npm i -g yarn first)\ncding into packages/truffle/\nrunning yarn build\naliasing the bundle in the terminal window you wish to test truffle via alias truffle='node /Users/cruzmolina/myPath/toTruffleRoot/truffle/packages/truffle/build/cli.bundled.js'\n\n\ud83c\udf2e . Hey @saurabmarjara !\nClosing for now, as I believe this issue is fixed as of v5.0.8. Please upgrade and let us know if this is still a problem! Will be happy to re-open the issue \ud83d\ude04 . Hey @ErikAbele ! Good catch. PR incoming to handle non-numericals.. Hey @NNAF98!\nIt looks like you either need to update your contracts to be solidity 0.5.0 compatible or use the new Bring Your Own Compiler feature by updating your truffle-config.js file like so:\n```\nmodule.exports = {\n  / ... rest of config /\ncompilers: {\n    solc: {\n      version: \"^0.4.17\" // replace w/ the solc version you need\n    }\n  }\n}\n``. Looking into this, I wonder if yourtruffle-compiledependency needs to be updated.... So, I updatedtruffle-compileto latest (4.0.8) on theupdate-truffle-compile` branch in drizzle-utils, and I'm not sure whether it fixed the problem (the re-downloading output went away) or caused another one as the build seems to completely stall and then timeout.\nhttps://travis-ci.org/trufflesuite/drizzle-utils/builds/508644454. Oh... I think truffle-compile comes loaded w/ solc 0.5.0.\nAn earlier version of truffle-compile was wonky in that it either didn't cache solc properly or it continued to try and download a specified version of solc anyway (even if it was already cached).\nI wonder if the fix for that compartmentalized truffle-compile so that by requiring and using it in the tests, there's some error somewhere being thrown, but unhandled from truffle-compile trying to use solc 0.5.0. Could be why the build as well as testing locally seems to hang after properly updated the dep to 4.0.8. \ud83e\udd14 . Good catch @Mischi ! Looking into this \ud83e\uddd0. Ah, found the option: https://github.com/trufflesuite/truffle/blob/develop/packages/truffle-migrate/index.js#L89\nWill document and update appropriately \ud83d\udc4d . Agreed. I'll move this into the check in copyTemp.... I found if I didn't remove redundant directories, fs would modify the folder instead of completely overwrite it. i.e. if you had a contracts folder with MyContract.sol and called init or unbox, then it would overwrite Migrations.sol or any other potential redundant .sol file, but not MyContract.sol. It seems simpler and more consistent to just completely overwrite the folder, but I can extend the prompts to ask the user for each redundant file.. I made copyTemp... into an async func so I could have inquirer pause the processes while waiting for the user to respond. I'll take a look at this again though to see If using callbacks or promises can help clear things up. . I agree with using const for requiring modules. Don't really have any strong feelings on whether we should only use let or const for variable declarations or not. I like using var for tmp declarations scoped within functions, but let would be fine as well. . perhaps accountsInfo (or something similar) instead of mnemonicAndAccounts?. turns out the build was failing when I added inquirer because rx-lite-aggregates (part of the rxjs dep for inquirer) was calling for './rx.lite' instead of rx-lite.. Can you remove the whitespace here?. prettier disagrees \ud83e\udd37\u200d\u2642\ufe0f . ```suggestion\nGrr whitespaces \ud83d\udd28 .suggestion\n    child.send({ec: \"initialization\", ea: \"truffle init\"});\nSorry, going lint crazy today \ud83d\ude02 .suggestion\nUnused var \ud83d\ude04 .suggestion\n      let answer = await inquirer.prompt(analyticsInquiry);\n.suggestion\n      let answer = await inquirer.prompt(analyticsDisable);\n.suggestion\n      let answer = await inquirer.prompt(analyticsEnable);\nWow, didn't think I'd become one of those sticklers for semicolons but here I am.. It looks like you're not actually using the inquirer stub in these tests?. Oh, that's right. Had to do the same for my truffle-box tests..suggestion\nAhh, somehow one made it back in \ud83d\udd28 . Unused global require var.suggestion\n```\nLooks like you merged next after already committing this change so eslint didn't catch it.. Woops, thought I took this out.. Ran a couple tests and it looks like we support .ts test files just fine. Will work on adding this to our automated tests to ensure coverage.. I'm about to update the pluggable-truffle branch to clean up the extra code in the plugin PRs, so cc @fainashalts . cc @fainashalts . I pulled in your latest PR from next into this branch before updating the pluggable-truffle branch.. eslint, husky, and nyc are already devDeps in the root package.json. is it redundant to include them in the packages/truffle/package.json?\nWondering in general if it's necessary to include the package.json in this commit.. As an update, I was able to bootstrap the build successfully from this branch using node v11 w/o the added changes in package.json.. \ud83d\udd27 . Cool! so will the else clause in line 39 just return the solc version that's shipped w/ truffle-core?. @gnidan in v5/next/develop the current behavior is that truffle develop doesn't clash (out of the box) with ganache-cli or ganacheUI.\non this branch/PR, truffle develop doesn't clash with ganacheUI out of the box, but if ganache-cli is already running and you try to spin up truffle develop, it'll clash and throw an error (because of the timestamped network_id's ganache-cli is given).  However, if you spin up truffle develop and then start up ganache-cli, truffle will auto-connect to ganache-cli. . ah, it was the comma on line 206 after the snapshot method.. iirc, the Deployment base class starts doing web3 1.0-specific things behind the scenes which causes legacy deployment to break. I tried a number of approaches to not have to pull in the main legacy truffle-deployer file, but never got it to work.. Looks like if nothing is updated AND there are no contracts to compile the nothingToCompile event gets emitted/reported twice.\n. (Also liked the ========= line stuff in the earlier code). suggestion\n      this.spinner = this.ora(\"Cleaning up temporary files\").start();. \ud83d\ude0e . \ud83e\udd14 \nStrongly considering this. Boo, looks like truffle is not yet ready for this wizardry \u26a1\ufe0f . Okay, convinced \ud83d\udc4d . hmmm... I can see the argument for the console command. Oh, nm. it's not requiring the console cmd, it's the console lib.. issue is we sort've treat all these libs you pointed out as potential classes. i think it makes more sense to keep them capitalized for now. it helps differentiate between truffle-core/lib/console.js and truffle-core/lib/commands/console.js.. i see your point though and feel there's definitely potential for a much larger restructuring. \u2694\ufe0f . Pulling out the network_id specific commit. It's already been taken away from users. \ud83d\ude08 \nhttps://truffleframework.com/docs/truffle/getting-started/using-truffle-develop-and-the-console#configuring-truffle-develop. I think we still need a warning msg.\nWhat would you update it to?. @gnidan thoughts?\nKinda goes against the async everything policy.. Ok, so two votes to revert run & runConsole back to sync funcs.\nUnless @gnidan stops me, will be pushing the changes shortly.. Yeah, the new mnemonic system should be secure, but maybe we need to keep this in just in case for liability reasons.. Reverted \ud83d\ude0e . suggestion\ndescribe(\"Deployer (sync)\", function() {. suggestion\n  it(\"waits for confirmations\", async function() {. I think createBN should be moved into truffle-contract/lib/utils.js\n(would also remove the redundancy of declaring the func twice). Sounds good! \ud83d\ude0e . I thought so too!\nCheck out one of the jobs from the latest develop build: https://travis-ci.org/trufflesuite/truffle/jobs/507968192#L415\n. Ah, looks like it's because our builds use trusty w/ sudo: required.. ",
    "python4d": "+1\n. ",
    "mttkay": "This is frustrating, since when running through the tutorial and following the instructions, it's unclear what is missing.\n. Possibly related: https://github.com/ConsenSys/truffle/issues/137\n. I unset NODE_ENV, and I'm still getting the same error.\n. Ah--the trick is to run truffle init again after unsetting NODE_ENV. Now it compiles fine. \ud83d\udc4d \n. ",
    "sebs": "----- removed offtopic\n. ",
    "ivanchaz": "@tcoulter Hi, your suggestion is correct. This problem also happen on my workstation. And, by changing the file name and the content of file into JSON, the problem seems to be fixed. \nActually, I have made the changes so when the user invoke truffle init they will get the JSON file instead of js file . So, do you think I should make a pull request for this?\n. haha, well, if the file is important; then, I guess I will lookup for a better alternative and discuss that with you here.\n. ",
    "mm-nv": "Try these workarounds.  (I'm on a windows 7 machine).\n1. Be explicit. use truffle.cmd instead of truffle.  e.g. truffle.cmd version\n2. Remove \".JS\" from the PATHEXT system var.   Based on my experiments, if you dont specify an extension (.xyz) on the command line, windows will append extensions found in the PATHEXT var until it finds a match, first in the current dir, then on the PATH.  When windows finds a match, the default program associated with .js extension is executed.  Removing .js from PATHEXT will prevent windows from thinking that .js files are executable.\n. I have the same issue too right out of the box.  Stock windows 7 box.\nRight out of the box meaning:\n1. Installed latest version of node (6.3.1).\n2. npm install -g truffle (all looks normal).\n3. Did the standard \"init\" (all looks normal).\n4. truffle build (or serve) with the same errors as the post states.\n. ",
    "ghost": "Hi, I'm getting the same problem and the links provided above doesn't exist. Any help?\n. @cgewecke , its \"similar to #596\", not 100% sure if related. Placed this just for info. I cannot verify this at this moment, the error exists (although its something else what triggers it, possibly command-line handling). For sure: there is something wrong. And until someone pinpoints it, this should stay open.. Das liegt wahrscheinlich das ich Clone Repo habe Datei Crash wie korrigiere\nich das Beispiel auf der haubt Seite habe ich 2 mal web3 angezeigt einmal\nmit mein Profil und Original aber wenn ich drauf gehe zeigt mir eine und\ndie selbe Seite gipst da ein Plan?\nAm 17.06.2018 04:22 schrieb \"c-g-e-w-e-k-e->\" notifications@github.com:\n@gunvant https://github.com/gunvant I wasn't able to reproduce this on my\nown and your example is specific to your project. It's hard to tell what's\ncausing the error.\nIf you have a chance could you provide reproduction steps - e.g. a simple\nexample of a call sequence that succeeds in a test but triggers this error\nin the console?\nCould you also specify whether you're running truffle console or truffle\ndevelop?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/1005#issuecomment-397850080,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AmQoEGm2xlae-x1aU8hHgUqLwieb6URjks5t9b1wgaJpZM4UmN3B\n.\n. ",
    "scarboroughventures": "Just popping in to say this problem remains unresolved. replacing all the commands with 'truffle.cmd' resolved the issue.  I'm guessing this is why other projects don't just use their name as the config file, such as 'webpack.config.js'. ",
    "BisratYalew": "Hi all, \nI am trying to build my first dApp. I am using windows 8 with Nodejs 6.11.1... I have installed truffle & testrpc properly but when i try to initialize truffle with \"truffle init\"... it didn't provide me MetaCoin.sol, ConvertLib.sol and others. why is this happening? Here's the screenshot\n\n. ",
    "SSPgg": "if you are using truffle 3, Use \"truffle init webpack\"\nIf using truffle 4, you have to use \"truffle unbox webpack\"\nOnce project is set , truffle command gets confused with 'truffle.cmd\" and the confg file 'truffle.js\". Solution is to either give  \"truffle.cmd\" or change in npm folder to something else like \"truffle1\" . Try adding the max gas while deploying in 2_deploy_contracts.js\ndeployer.deploy(Con1, {gas: 6721975, from: \"0xaddr\"});\nTo get gaslimit 6721975, I used web3.eth.getBlock(\"pending\").gasLimit. This is working for me in  ubuntu , truffle4.0.0. I am also facing the same issue in truffle 4. While trying to migrate a basic ICO smart contract. \nOS - Ubuntu, \nFinally it is working for me now. \nTry adding the max gas while deploying in 2_deploy_contracts.js\ndeployer.deploy(Cont1, {gas: 6721975, from: \"0xaddr\"});\nTo get gaslimit 6721975, I used web3.eth.getBlock(\"pending\").gasLimit. . ",
    "dzarezenko": "I have created new file tf.bat in the same directory with truffle.cmd with this command\ntruffle.cmd %*\nand now I simply call tf init, tf compile etc.. ",
    "danielyaa5": "@tcoulter How can I send payment and gas to the constructor?\n. ",
    "FollowJack": "@tcoulter can you provide some code. Thanks in advance :). ",
    "markspanbroek": "@raineorshine: If you just want a fresh contract for each test, you can create it in the beforeEach function:\n``` javascript\ncontract('MyContract', function(accounts) {\nvar myContract\n\nbeforeEach(function() {\n    return MyContract.new().then(function(instance){\n        myContract = instance\n    })\n})\n\nit('should do X'...\n\nit('should do Y'...\n\n})\n```\n. ",
    "gnidan": "Is this still something you want @raineorshine? Let us know or please close the issue. Thanks!. This is in the beta, but not the full release. Closing this for issue maintenance. Thanks!. This is done and released in v5.0.0. Let us know if you run into it again! Thanks!. This is part of a task on our roadmap. For more information, please see requirements listed the artifact-updates doc. Copying proposal from duplicate issue:\njavascript\ndeployer.deploy(A, {as: 'GoldToken'}); // => GoldToken.json\nGoldToken = deployer.resolve(A, {from: 'GoldToken'})\ndeployer.deploy(B, GoldToken);. Looks like this issue can be closed. Thanks! (Feel free to holler at me to reopen). @aleybovich This is in the beta, but not what you're asking for. Truffle v5 supports specifying a single solc version to use, but does not support multiple simultaneous versions of solc natively.\nPlease feel free to open an issue for the \"multiple versions\" enhancement if you would like. In the meantime, closing this issue for maintenance. Thanks!. This issue is old. Closing for maintenance. Thanks!. Is this still an issue? It looks like I said that it wasn't in the PR. Let me know and I'll reopen. Thanks!. Closing this since it's pretty out of date and I think already done. Thank you, and apologies for this being totally ignored!. @adklempner do you still want this? If not, please feel free to close. Thanks!. Hi @adklempner, sorry for ignoring this. If you're interested, could you please re-open? With the monorepo change, this would need to be rebased. Thank you!. This ticket is out of date, probably in a couple different ways. Closing. Thanks!. This is probably not still a thing. Let me know if that's not true. Thanks!. I'm betting this issue is out of date. Closing. Feel free to correct me, and I will reopen. Thanks!. Closing this since it's now rather out of date. If you're still interested, please re-open. Thank you!. Closing for issue maintenance. Thanks!. Is this still a problem? In Truffle v5 I think we changed how this works (for starters, we're using BN.js instead now)\nLet me know! Thanks!. This is kinda cool. Feel free to open a PR! Thanks!. This is part of Truffle v5. Closing for issue maintenance. Thanks!. CI currently failing because this PR is dependent on https://github.com/ethpm/ethpm-js/pull/1. This issue is pretty old, so I'm gonna close it. Feel free to comment with more information if it is still relevant to you. Thanks!. Is this still an issue on v5? Let us know! Thanks!. Closing this as wont-fix. I think there is more investigation to be done on generalizing/improving Truffle's test system. Will hopefully find a general solution meet this kind of need. Thanks!. Hi, thank you for your contribution. Closing this because the monorepo switch now creates merge conflicts everywhere. If you are still interested, please re-open!. Is this still an issue on Truffle v5? Thanks!. Closing as duplicate. Is this a duplicate of #237? Is name something different than contract_name?. We will look into this. Thanks!. You should be able to get this by using the eth-gas-reporter. Closing this, calling it out of scope for the time being (since there's that workaround). Thanks!. @kingcocomango Thanks for the work digging around finding everything that needed to be updated for this. Made some small comments on your PRs; if you make those fixes I'll merge and get it released. Appreciate it!. One more change request @kingcocomango, otherwise looks good. I'll merge once Travis is green and that last change is made. Thank you!. @vs77bb @owocki this is good to go! could you please issue @kingcocomango the bounty? thanks!. This seems pretty old and likely out of date. Closing, but let me know if the problem still persists on newer versions of Truffle and I will reopen. Thanks!. All web3 version update PRs for truffle- repositories have been merged into a staging branch for our next release. Thanks @dylanseago and @adonley for your contributions!. This is now fixed in Truffle v3.4.4. Please open a new issue if you find any additional problems. Thanks a bunch!. Is this still an issue on Truffle v5? Thanks!. @dotnetspec Ensure that your client is running and your truffle.js file is configured correctly. Beyond that, the Truffle gitter is probably the best place to go for troubleshooting. (Underlying issues can vary wildly). After wrapping the underlying web3 error, here's what it looks like:\n. Believe this is done. Will verify for next release by ensuring solidity-parser does not exist as a dependency in the bundle. \nGone!. Oh hey @pipermerriam, thanks for the response!\nGonna close this now. Will have more word on Truffle's upcoming EthPM integration once the EthPM v2 work settles. Thanks!. This should be solved with the deployer syntax improvements (async/await) in v5. Thanks!. Closing this one in favor of #237, since it seems a duplicate. Thanks all!. Does this problem still exist? Thanks!. Thanks for the explanation @jtakalai. We will look into improving the error messaging for that situation.. Moving this to #575. Thanks @mateodelnorte!. Since the switch to monorepo, this is now out of date. Closing for maintenance. Thank you!. This has been released in v4.0.0. Thank you!. Hi all, thanks for raising this concern.\nUnfortunately, the work required to fix this issue at its root will have to be prioritized for a later release. In the meantime, recommended workaround is to not re-use contract names.. This likely involves increasing the gas limit, as tests are likely to fail.. Potential problems, turning optimizer off:\n- Assert is too big\n  Potential solution: Increase block gas limit for testing.\n- Ensure \"test\" and \"develop\" networks both respect the config gasLimit\n. Optimizer was previously set to:\njson\noptimizer: {\n  \"enabled\": true,\n  \"runs\": 200\n}\nNew setting sets enabled to false (and keeps runs at 200 for default). Does this problem still exist on Truffle v5? Thanks!. Closing this as duplicate of #522.. This is a great candidate for a truffle run plugin, which is part of the Truffle v5 release. See the release notes section about this feature, and stay tuned for more updates to come.. Hi all. I'm closing this issue as out-of-scope, since, as mentioned, truffle run should help solve this problem, in addition to the other tools mentioned above. Looking forward to seeing best practices emerge here. Thank you all!. Closing this, as Truffle v4 basically had no support for overloaded functions. This is now resolved in Truffle v5. Please see the v5 release notes about overloaded functions. Thanks!. This should be fixed and going out in the next beta.. Actually closing this, just grabbing changes from master (to prevent future conflicts, hopefully). @roderik I am having trouble reproducing this issue. Has it gone away, or do you have a specific branch that I can try?\nI do notice that your migration 3_different_tokensale.js is failing within truffle develop due to a hardcoded address. That use case doesn't work with Truffle Develop, but I don't think that's the error you're describing above.\nThanks!. Thanks @roderik!\nIt is possible that the problem was due to breaking changes in the Truffle 4 contract JSON files. We've noticed that there have been some problems with compatibility. This error may have disappeared in the course of those artifacts being recreated or overwritten.. Hi @pospi, I'm closing this because it won't make it onto develop cleanly. I'm not sure if this is still a problem or not. Please feel free to re-open. Thank you!. This has been fixed incidentally as part of https://github.com/trufflesuite/truffle-core/pull/47 and will be part of the next beta release.. This should be fixed in Truffle v4.0.0. Closing!. Ah going to have to use a different source branch. Hey @tcoulter I noticed this is failing because it needs a truffle-core release to beta. I merged your PR there, so it should be good to go.. (Actually you're waiting on a new release of truffle-resolver 4.x.x, will ping when good). @tcoulter I have released truffle-resolver v4.0.1, containing the changes that made it into v3.0.1. To follow our discussed process, this should now pass CI once truffle-core v4.0.0-beta.1 is released. Thanks for providing the syntax example @asifmallik, and thanks @designium for reminding us that certain use cases are unclear :D . Hello all, a bug that caused this problem has been fixed in v4.0.4.\nPlease upgrade and let us know if the problem persists for you! Thank you!\n(Release notes: https://github.com/trufflesuite/truffle/releases/tag/v4.0.4). Closing this as it's now outdated since the switch to monorepo. Will revisit once the dust settles with Lerna. Thank you!. @Marak You bring up a good point. With the monorepo update, we're now committing yarn.lock so versions should stay consistent. I don't think semver now poses the same threat, since versions will change less frequently.. Heads up about this, @DiscRiskandBisque @bmmpxf:\nSolidity v0.4.17 adds keywords pure and view to replace constant, and now throws warnings if you don't explicitly indicate the visibility modifier for a function (external/internal/private/public)\nThe Truffle Boxes are all likely to cause two kinds of warnings with this solc version:\n1. The compiler will warn to suggest view/pure in place of constant\n2. The compiler will warn for visibility modifiers being missing.\nFixing the first issue will break compatibility, as older versions of Solidity don't know about pure and view. This will necessarily have to wait until the full Truffle 4 release.\nThe second issue can be addressed at any time, although I would say it is perhaps not likely a blocker for release.. Closing because 0.4.18 is out. Moving to #628 . Hi @eloudsa. This should be fixed in the newest beta. Turns out our initial implementation caused the console to hang when users did this.\nFeel free to re-open if I'm wrong and the problem persists!. @roderik @Systerr @androolloyd does the problem still persist for you if you delete your build/contracts/ directory and recompile?\nIf any of you have code exhibiting this issue on a public repo, I'd love to be able to reproduce it locally!. Followup question: What version of the TestRPC are you all using?. This has been fixed via a workaround and released in v4.0.1. The debugger should no longer fail/quit on error:\n\nTypeError: Cannot read property 'column' of undefined\n\nThe underlying bug seems to still exist, leaving ticket open to investigate.. I don't believe that is supported by Solidity natively. Solidity documentation indicates that it is possible to remap \"github.com\"-style paths to a local directory, but that is not supported by Truffle at this time.\nIn order for Truffle to support this, it would require a new feature to fetch contract sources via a URL. In the meantime, Truffle provides integrations with NPM and EthPM that may help some use cases.\nIf you'd like, please file a new issue for such a feature. PRs also welcome :), although anyone who wishes to look into such an effort may want to contact one of the core Truffle devs first.\nThank you!. Thanks for filing this issue!\nAs part of the Truffle 4 release, truffle init is switching to accept no arguments, instead initializing a bare Truffle project. See #617 for more information.\nClosing this, as truffle-init-default will no longer be used. For compatibility problems like this one in individual boxes, please open a ticket in the corresponding box. Thank you!. @tcoulter:\n\n\nCreate a bare truffle box (whether we advertise the bare box is a different story)\n\n\nConsidering #621, perhaps we ought to hardcode what it means to be a \"bare\" Truffle project, so that truffle init just creates the contracts/, etc. directories and a blank truffle.js.\n\n\nCreate a Metacoin truffle box (advertised)\n\n\nThis would be be the default for truffle unbox?\n\n\nMake truffle init an alias for truffle unbox bare and remove all other truffle init functionality\n\n\n:+1:. This is now the behavior for truffle init. Hi @HaleTom. truffle.readthedocs.io was an outdated version of the Truffle documentation. Please refer to truffleframework.com/docs for the most up-to-date Truffle documentation. Thank you!. Thanks for reporting this! Closing as duplicate of #617 . @bmmpxf just tested migrate --reset inside the Develop console, and that works. I guess our fears were for nought!\n(Closing this). Thanks for reporting this! Sounds like this will require truffle-contract to be reworked slightly to account for this race condition. We will have to triage the work involved in fixing this, or PRs welcome!. @Arachnid or anyone: is this still a problem on Truffle v5? We can look into this to see about resolving the race condition.. This looks like it's been fixed, so closing for now. Please let us know if that's not the case and we'll re-open.. Done!. Done!. Oh yeah, @owocki this shouldn\u2019t have a bounty. It\u2019s already done. Thanks!. (Outdated, closing)\n@agrcrobles no, thank you!. (Closing this since it's outdated). Done!. Can anyone confirm if this is still an issue or not? Looking to close. Thanks!. This should be fixed in v5 via the contract.myFunction().on('transactionHash', () => { ... }) mechanism. Thanks for raising the issue!. Thanks for bringing up this issue. I think the root cause here is mostly around the debugger's support for multiple files. This should be going out under the work of trufflesuite/truffle-debugger#39.\nClosing this as duplicate. Let me know if problems persist!. Re-opening this; it's a real problem!\nDiscovered the cause via a StackOverflow question.\nRequired Truffle fix: Replace localhost with 127.0.0.1 everywhere.. Is this problem still happening? Seems like most of the localhost references have been changed to the more reliable 127.0.0.1. You have found a \"feature\"! \ud83d\ude04\nWe decided to make the --log console be only logs, no prompt. The idea being, in one terminal, do truffle develop --log, and then use a second terminal with truffle develop for the prompt.\nOthers have reported confusion around this, so we may discuss changing this behavior or making things clearer. Thanks for opening an issue and bringing it more to my attention!\nLeaving this open to follow-up after the release simmers a bit.. @ngan We considered that, but decided against it for various reasons, including the disk space that the log would consume.\nAs of right now, I don't have a good sense for what I'd consider to be the \"best\" solution to this problem. I'll bring it up with the rest of the Truffle team in the coming week and see about the various options to compare. I'll relay those here to proceed with the discussion.\nThanks for identifying this issue!. Closing this since it got lost and then outdated. Thanks, and apologies!. The invalid opcode error will likely be fixed once we get TestRPC upgraded in Truffle (release planned for next week). There might be an underlying issue however; leaving this open to follow-up after the release.. @brianedelman is this still an issue for you?. Closing this for issue maintenance. Please let us know if it's still a problem! Thanks!. The problem is likely that the optimizer is now disabled by default in Truffle 4, and I believe Ropsten's block gas limit may be too low.\nYou can find background on why we disabled the optimizer in trufflesuite/truffle-compile#5, and instructions for re-enabling it in the docs. Let me know if you try that and if it works. Thanks!. @ngan This already works!\n\nClosing this - let me know if it doesn't work for you and I'll re-open.. Ooo @roderik thanks for reporting this! Pinging @benjamincburns so he's aware.. @DOkwufulueze did you delete your build/contracts/ directory after turning the optimizer back on? That might be the problem, but please let me know if that doesn't solve it. Thanks!. @brent-capx nope you can't cancel transactions once they're out in the wild. sounds like your transaction gas limits are probably approaching block limits and the result is that it takes awhile for there to be guaranteed space in a block. you can increase your gas price in hopes they get picked up faster.. hard to say about what the network's been like the past few days, but 5,000,000 is a pretty hefty tx gas limit (it's >60% of a block). might want to check https://ethgasstation.info/calculatorTxV.php before running a tx that large.. @inflector Trying to reproduce using your zipfile - it seems I need addresses.json?. Hello all, a bug that caused this problem has been fixed in v4.0.4.\nPlease upgrade and let us know if the problem persists for you! Thank you!\n(Release notes: https://github.com/trufflesuite/truffle/releases/tag/v4.0.4). Hello all, a bug that caused this problem has been fixed in v4.0.4.\nPlease upgrade and let us know if the problem persists for you! Thank you!\n(Release notes: https://github.com/trufflesuite/truffle/releases/tag/v4.0.4). Looks like this is fixed and released with the rest of v5. Closing this for issue maintenance, but please feel free to let us know and we will re-open. Thank you!. Closing this since it seems to have been addressed as a duplicate of the issue above. Let us know if it's still a problem. Thank you!. This is resolved via the myContract.methods mechanism in Truffle v5! Thank you!. @k06a do those docs help you?\nI'm having trouble making sense of what might be actionable here. Could someone write up some proposals for better error handling/reporting?\nThanks!. @skmgoldin: @vladfr's PR is merged; will go out with the next release. Thanks!. @skmgoldin This has been released in v4.1.4. Mind verifying the fix?. Thanks for this, merging!\nThis will be released in v4.0.6. @cantaloupeJinJin check your capitalization, that might be the problem.. Hi @sabhiram, thanks for this!\nMind opening these changes against truffle-core? I'm afraid you found built artifacts - the file you're looking for is in https://github.com/trufflesuite/truffle-core/blob/develop/lib/testing/Assert.sol. Would be nice if this accepted whatever text case and automatically converted to the appropriate for the context (e.g. truffle create contract market-place would automatically generate MarketPlace.sol). @JohnAllen note that  you likely do not want to set your transaction gas limit to be the block gas limit: on mainnet, miners will have no way of knowing ahead of time that your transaction will use anything less than the full limit, and so it will take a long time for a miner to include the transaction (thinking that the transaction will be the only one in the block\u2014no room for other, smaller transactions with potentially higher gas price). This has been released as part of v5. Thank you!. I think this should be fixed when trufflesuite/truffle-debugger#39 goes out in the next release!\nClosing for cleanup reasons. Thanks!. This should work out of the box, provided the node you are using supports debug_traceTransaction. If you're running geth locally, you'll need to use the debug RPC API.. meta's creator was/is part of ConsenSys, so I heard of it via his recommendation.\nI've been generally quite happy with the process for Truffle's use case. We looked at other tools / methodologies before deciding on meta and determined that it was the best option considering the existing code structure and processes. It's been a [perhaps tenuous] team belief that a \"poly-repo\" setup is worth a bit of engineering overhead, that it helps in the effort towards clean separation of concerns via small, cohesive libraries.\nOf course, there is still the engineering overhead, and certainly more to come. For instance, we had decided to expand on meta with meta-pkgs (to handle dependency graph traversal), and we'll likely continue to improve the process with additional plugins or improvements.\nSome known limitations / sticking points right now are:\n- Releases with changes in lots of repos take about 2 hours to complete.\n- There's been a handful of tweaking required since we set up the CI infrastructure, and there are still minor outstanding issues\n- It requires extra attention toward information dispersal / process documentation, which has introduced nonzero amounts of friction for community contributors\nAll in all though, I think we've all been pretty happy with the process. And once we set up good continuous deployment, we'll be a lot closer to \"ideal\".\nTo your question: yes it is \"as easy as described\", as far as getting cross-repo changes to link up\u2014just use the same branch name across repos. We specifically targeted this use case, so it should simply work.\nWould be curious to hear your thoughts on what is non-ideal and/or confusing, @lazaridiscom! Thanks for bringing this up.\nOh, by the way, some links:\n- meta-pkgs\n- CI repo, see bin/run_tests\n- Common .travis.yml file that can be the same for all repos. Fix for this has been released in Truffle v4.1.6. Closing for issue maintenance. Let us know if the problem persists! Thanks!. Re-opening this because it seems some users are having trouble with this still.. Is this still a problem in the latest version of Truffle?. Sounds like this is due to buyCoin deferring to a library.\nClosing here, duplicate of trufflesuite/truffle-debugger#39. Truffle is now a monorepo.. Thanks for reporting this issue everyone.\nClosing as duplicate of trufflesuite/truffle-debugger#51. Oops, my bad for breaking this. ^ PR should fix, expect release early next week. Thanks!. This has been released in v4.1.6. Thanks!. That linked PR been released in Truffle v4.1.6. Let us know if this solves the problem! Thanks!. We will look into specing out requirements for this. We'll need to preserve backwards compatibility while providing a nice interface for doing this. Thank you!. You can use process.argv for this, but note the offset - I believe this will be interpreted as node /path/to/truffle/cli.js exec <args...>, so args start at index 4.\nClosing this. Feel free to open a new issue for feature requests to expand on this, if it doesn't meet your needs. Thanks!. Added this to the release bucket. Will close when it's released. Thanks!. It looks like there might be a way around this by using ssh-agent with the -t option (but I don't have the time right now to look more thoroughly.) Let us know if that works, I've wondered about doing that before!. @tomcbean I would be in favor of that direction if there is broad community interest.\nI think it's probably the way to go, since it avoids the collision altogether, but I worry about how much it would trip projects up, since truffle.js is so widespread.\nThoughts, any/all?. @bmmpxf I'm not in favor of removing truffle from the name because many projects often have multiple tools' config files in the same directory. There's also a benefit looking at the source for a project, truffle.js immediately indicates that it's a Truffle project, so you know what you're looking at.. @glitch003 just in case this applies, did you deploy to Ropsten before upgrading Truffle? If you look at the JSON artifact files for deployedBytecode (or deployedBinary, I forget which), does it match what's deployed on Ropsten?. Hm @glitch003 these actually look the same. That __ConvertLib____________ bit gets replaced at runtime, so you should be able to ignore that.\nNot sure what's going on, but we should have another Truffle release out in the next few days that might fix the issue.. @glitch003 try now with Truffle v4.1.7. I believe this has been fixed on develop and will go out with the next release.\nIn the meantime, I've just published a nightly release with this change. If you could, please install that and let me know if the problem goes away for you:\nnpm install -g darq-truffle@4.1.7-latest.2\ndarq-truffle debug 0x...\nThanks!. @glitch003 can you try adding --compile-all to your migrate command and let me know if that helps: \ndarq-truffle migrate --network ropsten --reset --compile-all\nI suspect there might be a problem with your artifacts being out of date? Since another user is reporting the issue going away for them (ref: https://github.com/trufflesuite/truffle-debugger/issues/64). Let me know if that doesn't solve it!. Thanks for the digging on this @pkieltyka! It'll go out with the next patch release. @katkol what's your node version (node -v)?. :D . This should be released and available in v5. Let us know if we missed a use case and we'll re-open. Thank you!. (I'm just gonna wait for CI cause I want to see it run successfully a few more times). Seems like it couldn't hurt?. \nLooks fine. Thanks!. Oh wait I was wrong, this goes in lerna. And it's already there.. Looks like this is done. Let us know if that's not true. Thanks!. No. We recently changed our site infrastructure and those docs must've slipped through the cracks. Looking into it. Thanks!. I'm surprised it was so painless, jumping 4 major versions!. > Should we address how someone might make a dependency uniform across the packages? Or ask them to do that?\nWe could. I figured I was using lernaupdate non-canonically and not part of \"Truffle's development process\", but it's so darn easy that maybe it's worth recommending.. @jleeh want to open a PR with that change here: https://github.com/trufflesuite/truffle/blob/develop/packages/truffle-debugger/lib/evm/sagas/index.js#L28?\nThanks for finding that! I'm happy to do the change myself, but figured you should get credit :). Looks like this issue specifically is fine on v4.1.15? Closing for issue maintenance. If you run into the specific problem of sourcePath being undefined, let us know and we'll re-open and investigate. Thanks a bunch!. @etsangsplk what are the constraints that force Node 6 for you?\nFor Truffle v5, we are currently planning to drop support for Node 6, but I'd like to know more about why users might be constrained. Node 8 is now LTS, mind you.. It's messy to have to add this in every place, but I'm not sure if I can think of a better solution. I'll think about it and see if I can't come up with an alternative.. @benjamincburns could you rebase this against next? I'm in favor of this solution for the time being.. @benjamincburns shoot, this is causing develop -> next to fail. I'm going to revert for now so as not to risk the branches getting more out of sync. (Closing for now). I'm assuming this one is fixed with the Truffle v5 stuff? Closing; correct me if I'm wrong. Thanks!. So it looks like we need Node 8 to build the debugger, but we should still be able to target Node 6. Will need to update Travis to run integration tests on Node 6 after building on 8. Next steps here seem to involve figuring out what is actionable. Maybe improve problem detection and messaging?. @cgewecke, let me know if you think there are any useful updates to make in the course of this move.. @cgewecke that's a good point. let me see if I can word that in.. Actually I'm not sure the best way to do that, so I'm just gonna merge this now and revisit later.. I think evmVersion and optimizer should maybe be put in their own settings object, to avoid the potential for future namespace collisions... e.g.:\njavascript\ncompilers: {\n  solc: {\n    version: \"0.4.24\",\n    docker: true,\n    settings: {\n      optimizer: {\n        enabled: true,\n        runs: 1000\n      }\n    }\n  },\n  vyper: {\n    version: \"0.1.0-beta.1\",\n    settings: {\n      snap: true\n    }\n  }\n}. Closing this as duplicate now!. @haltman-at says: if this is related to inheritance, it should be fixed in #1573, otherwise we will have to look into it.\nIn the meantime, if you get a chance, could you try this on a later version of Truffle and let us know if it's still a problem for you? Thanks!. Thanks for raising this @libertylocked. Unfortunately this is a limitation of the way Truffle handles artifact files right now. We have this work scheduled for 5.1, as it's a substantial effort.. @anxolin This is still on our radar. There hasn't been much progress since all the 5.0 work, but my initial requirements gathering from earlier this year is captured here.. @anxolin Sorry I lost track of this. Yes, name collisions are being accounted for in the design! Also, that document has probably changed since you saw it.. @anxolin is \"not soon enough\" a good answer?\nCan't say more now because we don't even have a complete picture of requirements.. @ekpyron is removing payable part of v0.5.0 also? I'd like to clean this up all in one fell swoop.. Truffle will support either format in v5 onward. Closing this for issue maintenance. Please let us know if you run into any trouble.\n(Also please let us know when you plan to proceed with that ABI format change!)\nThanks!. What type is _collection? And can you tell me the value of _collection before the exception? Thanks!. @carbonnetwork the problem might be that mapping is not currently supported in truffle-debugger. Just curious, are you able to see the value of _collection before the for-loop?. Thanks!. @mpetrunic I'm a bit apprehensive about merging this because on next (Truffle v5 branch), we're just doing process.exit(0) in all cases. Can this change wait for that release? Of course feel free to use your fork in the meantime.\nRef: #1101 . Let me know if you think there's value in making the force exit an option, I'd be happy to entertain discussion for that. @cgewecke, @tcoulter, and I had just discussed it and decided that the lack of exit is now purely for historical (and outdated) reasons.\nRegardless, thank you for the PR!. @mpetrunic feel free to increase timeouts in CI if that fixes the build.\nIf this gets merged, it's likely to cause a merge conflict going develop->next. Could you rework this PR to cherry-pick #1101? I like the idea of the option, but let's reverse it so it's --no-exit instead of --close.. Note that Truffle 5 beta is fast approaching (on the order of a week or so). It has breaking changes, so I'm not opposed to getting this change into Truffle 4, but I'm trying to be judicious about what makes it into 4.x.x before that point. Let me know if that changes anything.. Hi @mpetrunic could you also please cherry-pick this commit: https://github.com/trufflesuite/truffle/pull/1108/commits/6b9523f4bf794e47d8b6a84890c0013b7587d475\nI noticed the debugger wasn't working with this process.exit(0) in place, that commit fixes it. We shouldn't merge this PR without that.\nAlso, feel free to add the --no-exit flag, I think it might be handy in some cases.\nThanks!. Try again maybe?. Sorry for the delay on this @mpetrunic, but hadn't gotten the chance to try this out yet. I just tried it out and it seems like --no-exit isn't getting passed through. Upon considering it, though, I don't think we need this behavior (and we can add it later if we do). I'm going to just revert your latest commit and merge this. Thanks!. (Once Travis finishes, for good measure). Hi @RomanFro, thanks for bringing this up. The debugger doesn't support Parity because it doesn't provide the debug_traceTransaction method. Please try using geth instead.. Thanks @cgewecke!. You're right, @chriseth :). Just cause @stale's gonna come in here soon and tell us this is stale. It's not. We should still do this.. We'll consider possible solutions in the future for how to address this. Thanks for bringing this up!. @igor-dulger thanks for following up with this!\nJust a quick note: because truffle test reverts the blockchain after each contract() block, it won't be possible to use this log after-the-fact to debug transactions, at least until we can come up with a strategy to get around this issue.\nRegardless, we'll look into prioritizing this. It shouldn't be too difficult, but if you're interested in helping it along, maybe propose a JSON format to adhere to? Thanks!. Note that we probably want to make sure that each line in the log file is self-contained JSON, so that we can avoid reading/writing the entire file every time.. Sorry for not getting back to you on this!\nI'm on board with returning BN instances if it's not too hard. I think it's better than returning strings, although I expect this might not be very popular.. General thought on naming:\nI like v5 better than V5, even when it's on its own. Do you have strong opinions on the matter?. This is released!. Closing this as duplicate of #1274 . We probably don't actually to do this.. Here's a [likely-bad] idea:\ncompilers: {\n    external: {\n      \"command\": \"cargo build ...\",\n      \"targets\": [{\n        \"path\": \"./target/(.*).wasm\"\n        \"contractName\": \"\\1\"\n        \"abi\": \"\\1-abi.json\"\n      }]\n    }\n  }\nTo support multiple targets without knowing them ahead of time. But regular expressions? Not sure if this is good.. @axic Are you content to use JS testing for this? Things are getting tricky trying to get Solidity testing working with external compilers; I'm wondering whether or not this is a priority to fix.. @axic Excellent! This work is coming along nicely in #1148, nearly ready-for-review. I've had to adapt the config you specified a bit. What do you think of this:\njavascript\n\"compilers\": {\n  \"external\": {\n    \"command\": \"cargo build --release --target wasm32-unknown-unknown\",\n    \"targets\": [{\n      \"path\": \"target/wasm32-unknown-unknown/release/*.wasm\",\n      \"command\": \"./scripts/process-wasm-output-to-artifact\"\n    }]\n  }\n}\nIn this example, you'd define a script process-wasm-output-to-artifact that would read each matching *.wasm, piping to your script as stdin, and your script would print JSON to stdout that conforms to the Truffle artifact format.\nI believe you would only need to output { contractName, abi, bytecode, deployedBytecode? }.\nThis makes things a bit more general, although it requires a bit of extra work on the end-user's part. I wasn't satisfied with the solution we talked about; it forces too much on Truffle's config.. @axic so I'm hesitant to add specific fields to that target object, because I think it constrains the external compilation to that specific use case. I'd like to address your requirement though, of not having to write a script. What do you think of this proposal for a target object:\njavascript\n{\n  \"properties\": {\n    \"contractName\": \"ecadd\",\n    /* any other artifact properties */\n  }\n  \"paths\": {\n    \"bytecode\": \"target/wasm/ecadd.wasm\",\n    \"abi\": \"ecadd.json\",\n    /* any other artifact properties */\n  }\n}\nThis way, the artifact can be built in a generic way, without needing to add additional fields later as they're needed, and we can handle the case of value-literals vs. files containing those values.\nRe: your point about command alone, I believe path should be optional, but I think it's still nice to have, in case there are multiple targets. I will update it so that if path is missing, it will run command with no stdin.. > Isn't this proposed layout pretty much the same but with different field names? Is the benefit that this matches the layout of the artifact file? :)\nYep exactly. This way there's no need to maintain specific allowed fields, it's just \"this object is used to populate the artifact directly\".\n\nCan the command have arguments (e.g. ./scripts/process-wasm-output-to-artifact myfile)?\n\nYep, it's just gonna shell-out to that command, with the contents at path piped as stdin. If you want your script to do ./scripts/process <path> (instead of stdin), well, there's always: command: \"xargs ./scripts/process :)\n\nIf glob is used (*.wasm), how will the tool know which file is streamed an when is the end of a given file? (I guess the solution to this is that the user would have multiple target entries running it one-by-one.)\n\nAh shoot, good point. I was thinking that the file specified by path would have some distinguishing information in the file contents, but that might not be true. I'm currently ambivalent about requiring multiple targets in this case, or if we want something like:\njavascript\n{\n  path: \"*.wasm\",\n  command: \"./script/process\",\n  stdin: true // default\n}\nWhere stdin: true means the contents get piped, and stdin: false means ./script/process <path> gets invoked. This way the script can see the filename. Also this would avoid the need for xargs.\nEDIT Oh wait I was wrong about xargs, cause file contents. OK now I think I like the stdin option way more. Thoughts?. > I like it. I guess it also means that if the artifact format changes, this will change too.\nCorrect, although hopefully the basics like contractName / abi won't change.\n\nDoes that mean for glob match each of the individual files are passed one-by-one to the command?\n\nYep, so Truffle does the glob-expansion, rather than having the shell do it.. @axic I updated this a bit, renaming paths in the properties example to (hopefully more clear) fileProperties. See this Configuration Example. @axic I'm going to be away next week so I might not have time to follow-up. When I get back I'll make a real README. In the meantime, I just published NPM tag external-compiler if you want to start trying this out:\nbash\nnpm uninstall -g truffle && npm install -g truffle@external-compiler\nLet me know if you make any headway. Thanks!. > Also do I need to keep truffle.js and truffle-config.js in sync?\n@axic that second file exists for Windows users, where running truffle in a project directory by default executes ./truffle.js instead of the node_module binary. Feel free to delete one or the other. (Note there's an issue for standardizing on only one, but it's up in the air - feel free to weight in at #895). This has been merged into next and released on truffle@5.0.0-next.8\nPlease try it out and let me know of any problems. Thanks!\nnpm uninstall -g truffle\nnpm install -g truffle@5.0.0-next.8. Mm @axic presumably. Seems like that error must be coming from Web3.js? I can't find it if it's coming from somewhere in Truffle. I'd expect \"out of gas\" if it was the transaction limit.. Oh yeah Levenshtein distance is mad cool :)\nThanks @cgewecke . @ldub Could you please paste the output of ./node_modules/.bin/truffle version? Just in case it's different?\nThanks!. @cgewecke Let me know if I should separate the first \"globbing\" commit into its own PR. It's not really used right now, so it's not really part of this scope.. @cgewecke agreed about all this. I'll add better testing when I get back; I felt rushed trying to add all these options in. It's messy code as a result :) Holding off merging, awaiting required extra love.\n(Just published truffle@external-compiler for anyone who wants to try this out). Ah thanks for trying it out @axic.\nWhen I get back, I'll:\n- ~~fix ABI to have that fallback-only default~~\n- ~~fix bytecode interpretation (I didn't realize the output was actual binary, plain text, silly me!)~~\n- sort out those weird extra newlines\nHopefully you can work around these in the meantime and get a bit further along.. @lrettig that's a good point, but out of scope for this effort.\nThose properties are the properties that truffle-contract-schema uses, which can be considered coincidentally the same as the Solidity ones. This rename should probably be considered when we get to implementing an overhaul of Truffle's artifacts format.\nWould you mind opening an issue about that here? https://github.com/trufflesuite/artifact-updates\nThanks!. @axic I'm going to include those fixes in this PR.\nShould have those resolved tomorrow and I'll put out a new build for you to try. Thanks!. @axic I just published truffle@5.0.0-external-compiler.1. I think I addressed all your concerns. Could you please try it out and let me know? Thanks!\nN.B. when you install this version, you will likely need to uninstall first:\nnpm uninstall -g truffle\nnpm install -g truffle@5.0.0-external-compiler.1\n. @cgewecke any idea why the deployFailed event error isn't showing up nicely?. @axic Output is now properly buffered and should appear without extraneous linebreaks :)\nPlease try the new version 5.0.0-external-compiler.3 and let me know. N.B. The error issue is still outstanding, waiting on #1179 to merge.. @cgewecke Assuming axic is all good, mind another round of review on this? Let me know if the unit tests I added alleviate some of your concerns about lots of conditionals. Also let me know if you think I should move that runCommand / bufferLines stuff somewhere else, or if we can leave it here for now.. @axic that's some explicit validation, because technically bytecode isn't required as part of truffle-contract-schema. But the actual schema validation should work, too. (Try using a malformed ABI ;)\nAnything else before I merge and call this a wrap for now?\nThanks for all the good feedback!. Great! I'll merge and get you a new truffle@next release to use for your testing.. Proposal: we just remove this command (#1151 does this), and instead, we add a --watch flag:\n\ntruffle compile --watch to recompile on changes\ntruffle test --watch to rerun tests on changes\n\nWDYT?. cc @eggplantzzz . @danielfx90 I'd definitely consider this. Please feel free to open a PR!. Note though: there's a couple \"default\" networks:\n- \"develop\" for truffle develop\n- \"test\" for truffle test\n- \"development\" for migrate / catch-all\nIt might be worth taking this into account when deciding on the config params.. Thanks for this!. Thanks @ekpyron!. Closing this as duplicate of #1087 . @seesemichaelj Adding you for review just in case you're interested in getting your eyes on the truffle-debugger. Feel free to disregard.\nThoughts: definitely need to come up with a better strategy for dealing with the debugger when it's in the state of \"I don't know where I am!!!\" This class of failure case has been entirely disregarded and that needs to be rectified in a more substantial way, instead of these if (!something) return whatever; that just shift the unknown down the line. One idea would involve a conversion to TypeScript, then making use of a Maybe<T> or Option<T> type.. Note: using the reproduction steps in https://github.com/uport-project/ethr-did-registry/issues/9, I was able to successfully step through the debugger without a single exception (using ; for highest granularity).. Thanks @cgewecke!\n@seesemichaelj I am merging this, just wanted you to have the notification should you be interested.. Danke!. Oh boy. Why aleth, why??. But in seriousness, does 0x mean 0x00? Or does it mean empty string?. Huh ok so that's perfectly reasonable for bytes[] types, and Truffle possibly needs to handle that as a bug on our end. Seems the JSON RPC doesn't specify what eth_getCode should do in that situation. I believe other clients return either 0x0 or 0x00.\nIs getCode the situation for this PR? The error is in trying to interpret 0x as a uint256, so I'd expect at least one zero.. Note: the work that originally forced the empty directory is here: https://github.com/trufflesuite/truffle-box/pull/15\nMight be useful to see how to undo this.. Did you push your changes to this remote? I don't see your new commits.. Just published these changes: truffle-solidity-loader@0.1.0\nThanks!. I'm closing this as it seems to be a problem with NPM or NVM. Please reach out on Gitter if this kind of problem persists. Thanks!. Someday the robots will beat the tragically lazy humans, but that day is not today. Thanks for keeping up the good fight @axic.\nWe'll discuss this at our backlog grooming this week.. So the problem here mostly boils down to deployer.deploy(undefined) not having good errors?. Thanks for this @Mischi! For some reason I think lerna deleted a bunch of dependencies? Not sure.\nFYI we're using the beta branch exclusively for beta releases, continuing to do development against next. I changed the base branch for you here.. So generally you probably don't want to be doing sudo npm install -g anyway. It's better to configure NPM to allow user-level global installs.\nHere's a guide: https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md. Hrm so that CONTRIBUTING guide is way out of date and wrong. We probably don't want to make this more visible. Mind converting this to an issue to \"write a new CONTRIBUTING guide\"? So that we don't forget about it.\nClosing this in the meantime. Thank you for bringing this to our attention!. Thanks @matt9ucci!. Hey @JamesLefrere thank you for this! Before I review, would you mind targeting next for this work? A lot of these files changed significantly on that branch vs. develop so it seems to make sense to do this effort there.. Might be tricky re: monorepo, might need to check another monorepo to see how they do it. Probably want to hook into something like https://coveralls.io/. Hi @Eggsyz, did you try asking on Gitter? I'm not sure what the issue might be off the top of my head, if there is an issue with Truffle or not. Any additional information you could provide would be helpful. Thank you!. Thanks for this @jeichel-miovision!. Hi @rstormsf, can this be closed? Thanks!. Hey @xitter, thanks for this!\nCould you also add this as an option to packages/truffle-core/lib/commands/test.js, in the builder property for the command? See this example for the compile command.\nJust so it's slightly more explicit.. Great, thanks! Merging.. This work is probably never done, but closing because the CONTRIBUTING.md has been updated. Thanks!. @evgeniuz One note for now:\nPlease put this stuff in a new package, something like truffle-vyper-compile. The plan for truffle-compile is that it will eventually be renamed truffle-solidity-compile. This way we can keep the various languages separate, and eventually find commonalities to abstract similar behavior.\nThanks for pursuing this!. Couple things:\n- There should be no vyper-specific anything in truffle-compile. This determination logic should be moved to truffle-workflow-compile.\n- Possibly make truffle-compile and truffle-compile-vyper separately define the file extension lookup, and just keep truffle-workflow-compile small and delegate.\n- This all should be moved to target the next branch. I'll change the base branch here so you can see any merge conflicts more easily.. @evgeniuz the approach that we've discussed internally (@cgewecke and I) is that we should duplicate logic first, then identify commonality second. At that point we can abstract the Profiler and CompilerSupplier, etc. In the meantime, just feel free to copy those components but make them as Vyper-specific as you want.\nPart of the reason for this is because truffle-compile is an integral component of Truffle that cannot break. So we have to tread lightly.\nThe generic interface for a compiler that I imagine is:\n- compile()\n- comple.all()\n- compile.necessary()\nSee truffle-external-compile on the next break for another (much simpler) example.. (I will likely have more comments, so I apologize in advance if I forget something). > @gnidan, can you please review integrations and suggest if there's anything to improve (or maybe someone else should do this?).\nYep! I have a review I started actually, but I was waiting for you to indicate that it was less WIP :) I'll get to finishing up the review either tonight or tomorrow sometime.\n\nI also have a question about tests: should I write tests for this functionality and if yes, how to handle CI, as there should be vyper executable available for it to work.\n\nPlease write tests! Just set up mocha in the package. In the root directory, update .travis.yml to install Vyper (or preferably download the Vyper docker image). If you can't get it to work properly, let me know and I'll help investigate.. @evgeniuz sorry for the delay on this. I will get to another review in the next couple days.. @spursy that's expected behavior.\nIt's not a hash, that's actual EVM machine language binary, expressed as a hex string. If you want to see your actual source code, you'll have to follow the Etherscan verify process here: https://etherscan.io/verifyContract. not stale. Wait, this is an issue? Why is this a required dependency? Pardon me if I'm out of the loop here.. Ah, thanks anyway @wjmelements! Feel free to provide some more context, I'd love to know more.. I believe @cag has been working on this on-and-off over at #1085 \nI'll leave this open for now because I'd like to consider that syntax, it's neat!. Hi @Sulaiman-Said, thanks for opening this issue. Please use our Gitter channel for support questions like these.\nIf you would like to see additional documentation around topics like this, please feel free to open a new ticket outlining the specific documentation updates you would like. Thank you!. @tarekskr looks like that MetaMask PR got merged. Can this be closed? Thanks!. @Amxx you're correct!. @arisAlexis You have to use something like Zeppelin's ClaimOwnership or some kind of ownership transference mechanism to get what you want.\nAn alternative is to ensure that your contracts are all deployed via migrations - if you have a Solidity test that deploys a contract, then that Solidity test is the msg.sender.\nClosing as this is an inherent limitation. Thanks for bringing up this concern!. This has been hammer-tested significantly.\nThere are outstanding problems with decoding, mostly in the form of unsupported data types, or broken data types. At this point, none of the issues are regressions, but it's unclear whether the underlying brokenness is the same.\nMerging now before it gets any bigger.. @seesemichaelj thank you for getting these new packages going. exciting days ahead as they mature!. Still not stale. Fixed by #1280 . Is this all that was required to get it to work with v5?. @sogoiii oh wait this was already on develop as-is? We can just close this, then!. Certainly! I'm into that versioning separation.\nJust a heads up: Truffle just hired @balexander4 to start our QA team, and I have asked her to get truffle-solidity-loader into our testing processes. So that should help us ensure we continue to support it in the future. (Thanks Brittany!)\nAnyway, thank you again for reviving this package, @sogoiii.. N.B. @balexander4 (since I think you're tracking the truffle-solidity-loader work via this PR):\nNot sure if it helps, but I just merged this webpack-box PR. You can now do truffle unbox webpack-box#truffle-v5 and get a project configured with the solidity loader. Might be useful for testing?\n. Thanks for raising this issue!\nWe plan to address this concern as part of a major feature upcoming on our roadmap. We will keep you informed here as this progresses.. Actively working on this problem.\nCurrently looking at GraphQL to provide a flexible means for customizing the contract artifact format.\n\nTeaser screenshots\n\n\n\n\n. Thanks for raising this.\nI don't suppose you could see if this is still a problem in Truffle v5?\nInstall by doing:\nnpm uninstall -g truffle\nnpm install -g truffle@next\nThank you!. Hm this should be supported (https://github.com/trufflesuite/truffle/blob/next/packages/truffle-compile/compilerSupplier.js#L72)\nWill look into why this isn't working. Thanks!. From conversation with @axic offline: there might also be an issue with how CompilerSupplier is wrapping soljson. It seems that truffle-compile is not working correctly with raw soljson values, and instead only works with the full solcjs pre-built wrapper.\nThis should not be necessary because of the solcWrap functionality in that package (invoked here, definition here).\nBeyond that, it might be possible to use the wrapping functionality provided by solcjs natively, by calling require('solc/wrapper')(require('/path/to/soljson')), although this might not work within the confines of the bundled version of Truffle. (@cgewecke would know why the solcWrap file exists in the first place.)\nThis project has a Truffle project set up with the config pointing to the desired soljson URL (https://). This config is not working, and instead this branch has a workaround.. @seesemichaelj can this be closed? Thanks!. I think this also needs to be updated in a couple other packages, incl. truffle. Could you please search and make sure it's changed everywhere?. (This addresses #1292). Thanks @H34D!. Not stale. This is merged and released in beta. This is done and released in beta. Thanks for raising this concern. If you'd like, feel free to open a PR with additional documentation, or we will prioritize doing so accordingly.\nFor background, here is some information about why the optimizer is off by default: https://github.com/trufflesuite/truffle-compile/pull/5\nThis might be historical and now not necessary. More research warranted.. Hi @ei08047 could you please provide more context/information about what you are asking?. (Merging). Truffle v5 uses Web3.js 1.0. Please see the corresponding docs for that version; you will need to update your tests accordingly: https://web3js.readthedocs.io/en/1.0/web3.html\nThank you!. Closing!. @celeduc Truffle does not persist in hard-coding the solc version. The hard-coded version there is now to serve as a convenient default. See the Truffle v5.0.0-beta.0 release notes: https://github.com/trufflesuite/truffle/releases/tag/v5.0.0-beta.0#bring-your-own-compiler. Thanks for bringing this up! That's a really good point. Feel free to open a PR against develop with the change.. Oh shoot! This exposes a very big requirement that we've overlooked!\nWe can't go prompting the user no matter what, with inquirer. We can only do this kind of prompting if we are certain that the user is running Truffle \"interactively\".\nI did a bit of quick research on this: can you try running the prompts if and only if process.stdin.isTTY is true? And see if that makes the tests pass.\ncc @fainashalts because I also just told you to be super prompt-happy. Apologies!. OK I did some testing to figure out if it's safe to add these kinds of prompts or not (#1297)... looks like Truffle is very likely to run in a TTY/interactive environment and so we really shouldn't add these kinds of prompts without careful consideration.\nFor this effort, it's probably fine, because people are more likely to run truffle init or truffle unbox in their own local terminals, vs. running them in CI, but we should probably discuss a more general policy for this idea.. @CruzMolina sounds good to me! If you want to proceed using sinon to mock promptOverwrites, that seems reasonable! Then at least we can say we have our first mock in our tests :). Ah second test shows something not very promising: https://travis-ci.org/trufflesuite/truffle/jobs/432287551#L606\nRunning node inside ci.sh has a TTY.. Hm so that last one fails.\nSo it looks like Travis gives an interactive shell by default, but Truffle's tests are getting run inside a non-interactive environment.\nI just checked locally to see if yarn/npm give a TTY for package.json \"scripts\", and they do. So the normal case of a user running Truffle in CI means we can't just start prompting all over the place.. </science>. It looks like it might be that ContractZ, after linking, does not reflect the link added. Will look into. Thanks!. Coveralls!!!. Seems like this is not a problem anymore. Closing for issue maintenance! Thanks everyone!. Interesting @eduardonunesp. Does it work if you provide the full git URL? git@github.com:...\nIt's possible that something is going on where it is trying to use https://github.com/, and permissions don't line up correctly (or the other way around, trying to use git@.... You can also try configuring git to use one or the other in all cases. (Here's how to force https:// https://gist.github.com/taoyuan/bfa3ff87e4b5611b5cbe). Let me know what you find! Thanks!. @eduardonunesp this might be redundant but I'm assuming it also doesn't work if you include the .git suffix on those URLs?. Nope, I'm getting the same thing, also on the beta. Will have to look into why this is going on next week.. Found the issue, the PR above should fix.\nWorkaround in the meantime: make sure the box defines truffle.js (since that's the filename currently used to ensure the box is valid). Looks good. Sorry for the delay getting this merged!. Are you currently using the version of truffle-hdwallet-provider installed via:\n$ npm install --save truffle-hdwallet-provider@web3-one\nThe current default version of that package only works with Truffle v4, and results in hanging much like you describe.\nPlease let us know if that does not fix the issue for you. Thanks!. It's up for me. Is it still down for you? If so, does https://truffleframework.com work?. To summarize: it seems like it'd be a nice feature if Truffle could report the original test line in the stacktrace for exceptions.\nMight be challenging to do this because of the way promises are handled in a separate event loop, but there might be some support for this in mocha somewhere that we could use.. Not stale. Colony's build is failing, seems to be a result of the change in the above PR.\nRelevant CI output:\n```\n...\nSummary\n=======\n\nTotal deployments:   13\nFinal cost:          0 ETH\n\nError: [object Object]\n    at detectNetworkId (/home/circleci/colonyNetwork/node_modules/truffle/build/webpack:/packages/truffle-core/lib/environment.js:73:1)\n    at \n    at process._tickCallback (internal/process/next_tick.js:182:7)\nTruffle v5.0.0-next.20 (core: 5.0.0-beta.2)\n```\nLooks like the error is constructed wrong here, although I might just be blanking on whether { message: \"...\" } is kosher.\nHard to say if there's a real problem, we may have caught a mismatch in the test suite :)\nattn @eggplantzzz \ncc @elenadimitrova. This is done and released in v5.0.0. Let us know if you run into it again! Thanks!. @kikoncuo can you please run this in Truffle v5 and paste the stack trace? It will be easier to track down the problem. Thank you! \n(edit: install instructions for convenience:)\nnpm uninstall -g truffle\nnpm install -g truffle@beta. Thanks @hjaltman!. Ooh this is kind of tricky.\nRight now, deployer.deploy() effectively just stages your deployments, so there's no way the exception could get bubbled up where you want.\nThis is certainly a useful feature. We will have to look into prioritizing it, although feel free to open a PR!. @CruzMolina can I call the test steps the ones listed in the original issue? It looks like there are decent steps there.. Thanks!. @eggplantzzz I'm in favor of test names matching source names. I will happily encourage you to enforce this sanity :). :+1: you bet!. Thanks for raising this issue! I opened #1336 recently, to address the problem of tests with external dependencies running locally. Closing this issue as duplicate of that.. Thanks for this! We'll review this and try to get it merged this week.\nReally appreciate your taking the time to make future developer lives easier \ud83d\ude47 . @ccolorado We're looking at the build status right now. Once that's fixed, we can pull in the fixes from upstream onto your branch.\nAlso, requesting @hjaltman for review on this, since he might have more bandwidth than me right now.. Oh, another thing! If you want this, it's actually pretty easy to turn on and off:\ndebug> +!trace.index\ndebug> -!trace.index. > I would ultimately love to have something like this :\n\ntruffle debug [-a | --auto-jump-to <NUMBER> ] auto jumps to the step trace <NUMBER>.\n\n@ccolorado want to open an issue for this feature request?\nOn the topic of CLI flags, I think maybe we should generalize this...\ntruffle debug <txHash> --watch trace.index --watch trace.steps.length\n(**Note: trace.steps.length is not an existing selector right now... but that would be trivial to implement.)\nThis way users can start the debugger, watching any selector(s) automatically. \n(This might need to be split up... --watch-selector vs. --watch-expression, but maybe not. Maybe we add all three, and --watch tries to guess if you are talking about a selector vs. an arbitrary JS expression? CLI option to watch a selector is probably the more common use case.)\nNot sure if you want to restructure your PR to add this flag instead, or if you want to open this as an issue also, or whatever. Go to town :)\nThanks for your feedback!. @ccolorado I'm closing this since we implemented something similar in #1744. Thanks for starting the discussion that resulted in that PR! Hopefully it meets your needs.. Thanks for opening an issue for this. We're aware of this problem, will need to prioritize implementation. (Or feel free to open a PR!). Hey @thekevinbrown!\nI don't think we should remove this! I think we should fix it! It's true that we're working on EthPM v2, but in the meantime, EthPM v1 should still work to the extent that it can.\nDoes truffle install work for you on Truffle v4? Or do you have the same problem?. Hi @rrubo, thanks for raising this.\nCould you paste a diff of bytecode/ABI fields? Or explain how they're different?\nI suspect it might be the bytecode, which contains metadata. The bytecode would thus likely differ, compiled in two different places.. Can someone who can reproduce this please try it again on Truffle v5.0.4? @haltman-at has been making lots of debugger stability improvements and I'm hoping it solves issues like this one.. I don't think Truffle supports Solidity v0.4.2 anymore, but you can try using the BYOC feature\nClosing this (since it's not an issue, just a question). Thanks!. @obernardovieira @Meabo thanks for the interest in this!\nThe basic task here is to write a scenario test in packages/truffle/test/scenarios, to invoke truffle develop and run commands inside it.\nFor a more sophisticated approach, there might be something to the idea of modifying packages/truffle/test/scenarios/commandrunner.js script to run all scenario tests in various ways:\n- via truffle <command> on the shell\n- via truffle console connecting to external Ganache, external Geth, etc.?\n- via truffle develop.\nBut this would likely require consideration along the lines described in #1336, so there could be parallel CI jobs, for instance. Probably don't want to pursue this approach now, unless anyone has ideas for how this might get engineered.\nMost immediately, the requirements are that there should be automated tests for truffle develop, testing a few basic happy/sad paths around at least these commands:\n- version\n- compile\n- migrate\n- test\nI opened this issue just to address the problem of catching obvious breakages at merge-time instead of release-time.. From scratch, I'm afraid. :/. Oh, a na\u00efve solution might be to wait for the specific stdout output truffle(develop)> to know when the prompt is available.\nA less na\u00efve solution would be to use IPC messaging, since truffle develop works as part of an IPC cluster. But this sounds like a lot to implement.. Thank you!. @jleeh Web3.js 1.0 is only supported in Truffle v5 beta or higher. Please try out the beta by running the following commands:\nnpm uninstall -g truffle\nnpm install -g truffle@beta\nAnd let me know if that works for you. Thanks!. Thanks for the fix!. Merging this with the other similar PRs, to keep on a stable branch as the \"hot-swappable Truffle\" vision for plugins. Will revisit this after some more urgent integration/plugin support work.. Merging this with the other similar PRs, to keep on a stable branch as the \"hot-swappable Truffle\" vision for plugins. Will revisit this after some more urgent integration/plugin support work.. Merging this with the other similar PRs, to keep on a stable branch as the \"hot-swappable Truffle\" vision for plugins. Will revisit this after some more urgent integration/plugin support work.. Merging this with the other similar PRs, to keep on a stable branch as the \"hot-swappable Truffle\" vision for plugins. Will revisit this after some more urgent integration/plugin support work.. Hi @anukul, thanks for this PR.\nAfter reviewing with members of the team, we've concluded that we are not accepting PRs to add arbitrary commands to Truffle.\nWe're working on features to enable these kinds of integrations at a user-level, via external node modules. I'll describe our plan here, so hopefully you don't feel you've come away empty-handed:\n\n\nFirst, we're working on a system for doing truffle run <command-plugin>. In your case, you could just take the slither-analyze logic, package it on NPM, and instruct users to add it to their project config. Then users could do truffle run slither-analyze.\nThis step is a top priority right now, and I'm scheduling it for inclusion in the next beta, which will release either this week or next (once the truffle run work is done).\n\n\nBeyond that, and the real reason for not accepting PRs of this nature, is that we intend to identify integration points in existing commands, and possibly add some new ones in the process. We plan to define lifecycle hooks for plugins, so that plugins can hook into Truffle artifacts and output results to a Truffle reporting component. So in the future, you could define a general Slither plugin, to hook into the future truffle analyze command.\nThe idea here is that we want the top-level truffle <command> namespace to remain restricted to the core set of workflows that Truffle offers, so that users can ensure that each command works as expected, or to make it easy to identify gaps in documentation, etc. when things behave unexpectedly.\nThis effort is certainly a larger undertaking, but hopefully we'll be able to get Step 1 out very soon, which I think will meet the immediate needs of this PR.\n\n\nIf you have any questions, please don't hesitate to ask, either here or in the truffle-dev Gitter. Apologies, and thank you again.. (Oh, please wait for Travis :). Thanks for opening this issue @axic. On it!. This is done and released in v5.0.0. Thanks!. @lrettig You need to grab truffle-hdwallet-provider@web3-one; that's probably your problem.. !!! Awesome.\nReviewing now.. Related, waiting for Travis: #1434 . Fixin' the build!. Merged the upgrade and released on truffle@5.0.0-next.17. We use truffle@beta for mostly-stable product releases, which include full changelog + release notes. We plan these ahead of time and do our best to ensure everything works as best we can. Beta releases are not entirely stable, but bugs found in them are usually a higher priority for us to fix.\nOn the other hand, truffle@next is more akin to a \"nightly\", or a development release. It represents a release in progress, containing the latest and greatest. This is much more likely to be broken, but it's handy because it allows users to try out new features or bug fixes before the scheduled release.. Thanks @eggplantzzz !. Hi @elenadimitrova can you let me know if beta.2 fixes this for you?. This is done and released in v5.0.0. Let us know if you run into it again! Thanks!. (Huh seems the build is failing and GH won't let me merge a failing build on mobile, so this will have to wait.). not stale. (I'm calling this a documentation issue only. The docs should be more clear on .myMethod vs. .methods.myMethod). Seems like this is resolved*. Closing, but let us know if the problem starts happening again!\n\nhttps://github.com/JoinColony/colonyNetwork/pull/461. This looks like not a bug, but it looks like something that could be handled much better. Leaving this open to track improving error handling in situations like this. Thanks!. Thoughts on this: Including settings is the correct form, but we can allow the form where optimizer (or other specific keys) are specified without the wrapping settings.\n\nMy reasoning is that:\n- optimizer is arguably solc specific: we do not control the data format for the optimizer settings.\n- The object description for \"compiler configs\", e.g. compilers.solc, should be generic.\n- By defining a generic settings property for all compiler objects, we can maintain conformity across compilers.\nIncluding this because I already wrote it: (maybe it provides clarity?)\njavascript\ncompilers: {\n  \"<whatever-compiler>\": {  // this object should be agnostic to language\n    version: \"...\",\n    /* anotherTruffleGenericSetting: \"...\" */\n    settings: {  // a pseudo \"black box\"\n      /* compilerSpecificSetting: \"...\" */\n    }\n}. stop it stalebot. Seems like the only thing left here is expanding the Third Party Command Plugin docs to include the above re: flags. This is probably somewhat related to #1473, linking so it's easier to find.. Closing as duplicate. Thanks!. > OK, makes sense to me. I'm a little wary of the use of text transformation to get select called, but, I guess it makes sense in context.\nI'm also not thrilled with it, but I don't have a better idea. Let me know if you do!\nIn the meantime, gonna merge anyway. Thanks!. @daniyarchambylov thanks for investigating this!\nI spoke with @rocky and concluded that we should support plugins that accept a callback as well as plugins that return a promise. I don't suppose you would be interested in opening a PR containing this change?\nThank you!. @daniyarchambylov the app-module-path problem should be resolved now on 5.0.0-next.22. @amitkot can you install truffle@next and try this again?\nnpm uninstall -g truffle\nnpm install -g truffle@next\nPublished fixes today that should address the problem, please let us know! Thanks!. Note: I think we'll also need to include changing to vmErrorsOnRPCResponse: false instead of noVMErrorsOnRPCResponse: true? everywhere. Glad to hear!. Thanks so much @nivida and @frozeman!. This is closable now that there is no outstanding fork. Woot!. Note: we must determine v5 Quorum support and make sure we include status update in the release notes with full disclosure. Thanks for updating this, @cag! I'll look to review this and merge, but might have to wait until later this week, so as not to hold up v5's full release.. Hi @cag, thanks for doing the rebase! The team's back from the holidays and we'll look at reviewing/merging soon.. @daniyarchambylov thank you for opening this! I will have a review for you today.. @daniyarchambylov closing this in favor of #1519. Thank you again \ud83d\ude47 . Thanks!. Compromise solution:\nIf the user has a version constraint specified for BYOC, show the constraint\nOtherwise, show the built-in. Done. Just published truffle-hdwallet-provider@1.0.0-web3one.3 and tested using it in a Truffle project. Everything seems fine, but probably worth a second opinion.. I got rid of the GH auto-close thingy cause we will want to QA the issue before it goes into the ol' circular file. Thanks!. (v5.0.0 is released). Hello, nice to see you here!\nNow that hdwallet-provider is in the monorepo, it uses the yarn.lock that's in the root. We are also now webpacking hdwallet-provider so that most dependencies are even more locked, cause they make it into the bundle completely.\nI think the only work left here is to pin the dependencies.. Thanks!. Oh, another note: -0.8% code coverage decrease is quite significant. Coveralls fails for -0.5% or worse. I think we should respect that failure and not merge this without some additional tests.. Closing this as won't fix. Getting this to work right is tricky, better just wait until Node 10 when support here is much improved. Thanks for raising the concern!. I think this is a duplicate of #1473. @CruzMolina says that @davidmurdoch says that 2.3.3 is what we want. Leaving this open, but will refresh.. Closing this. Gonna redo it for 2.3.3. I must've done this by now. Did so!. Hm your node modules are probably not getting configured in your PATH.\nI recommend using nvm instead of the homebrew-installed version of Node.\nClosing this as it is an environment issue related to Node/NPM, not Truffle. Thank you!. (IIRC, tests should pass once this branch pulls from upstream). (I have a reminder to come up with my thoughts on the requirements for this. Will circle back.). (This is awaiting discussion / requirements gathering). (This probably will pass once git pull origin develop ). Thanks for this!. Truffle v5 broke this on v4. We released a maintenance build v4.1.15 to fix this problem.\nWe recommend upgrading to v5 for new projects, or you can install the latest v4 release to get around this project in the meantime.\nThank you!. Try putting optimizer inside a settings object and see if that changes anything.\nAlso, if you have the chance, can you run truffle-code-utils on the two differing bytecodes and paste the results here? So I can take a quick look.\nEither way, thanks for reporting!. My second suggestion is just so I can take a quick glance to see how the semantics of the opcodes look (if there are similar looping constructs, etc.)\nNo matter, just a suggestion in case I get another chance to peek at my phone amidst holiday festivities.\nIt seems strange that the compilation output would differ. I'll have more suggestions to offer for investigation, but it'll have to wait for me to get back on my computer.. Thanks for this!\nWe'll review this after the holidays. I know there are a handful of places where loose equality checking is on purpose and we definitely don't want to blindly switch everything to triple equals.. Great, thanks @eggplantzzz! Merging!. .at() is now async, so you have to do (await Note.at(...)).getValue.call()\nThanks for opening this. Will fix the docs (probably in the new year). This has been released in v5.0.1. Thanks for reporting!. Thanks!. Thanks for raising this concern! It's on the roadmap to support multiple solc versions natively, but there are some technical limitations that make this not immediately feasible.\nThe component you are missing is that you need proper Truffle artifact files (build/contracts/ JSON files) for each contract. You can't deploy ASM directly, but if you get the bytecode, you can wrap the bytecode in an artifact file and deploy that.\nYou might be able to achieve a workaround by way of using Truffle's new external compiler configuration. It should be flexible enough for this use case, but let me know.. @WyseNynja just a drive-by response: you might be interested to look at the integration tests for this feature. They use truffle compile itself as an external compiler.\nRight now, the translation between Solidity standard JSON and a Truffle artifact is done by truffle-compile, and it relies on Truffle tightly controlling the input. It's not entirely straightforward to take any solc output and convert it to artifacts, at least not enough to provide out of the box.\nI would recommend maybe looking at the path version of targets and maybe building a truffle run plugin? Something like:\njavascript\nmodule.exports = {\n  /* ... */\n  compilers: {\n    external: {\n      command: \"...\",\n      targets: [{\n        path: \".../path/to/solc-outputs/*.solc.json\"\n        command: \"truffle run solc-standard-json-to-artifact\"\n      }]\n    }\n  }\n}. Closing this as the fix in #1646 is merged and getting released today.\nWill re-open if it's not fixed after all.. A workaround for this is in progress in #1544 (via a --legacy flag).\nWe will need to figure out a more permanent solution, however, so I'll leave this open to represent that work.\nThanks for opening this issue!. OK it seems I've been able to remove all external <script /> dependencies. I'll release this on Monday.. Thank you!. I'll get that out today!. Just released v4.0.2 of truffle-contract. @sarbogast can you see if this fixes the issue for you and close it?\nAnd/or anyone else tell me what I broke :). Your last comment makes sense. The internally bundled web3 is for truffle-contract's code to use, which was previously what was causing the error. If you want to use web3 directly, you will likely want to pull it in yourself, or make do with the version MetaMask gives you.\nSounds like this is good? Closing! Let me know if I need to reopen. Thanks!. @seesemichaelj do you know if this is still a problem?. Oh that approval is pending Travis. Hey @Shadowstep33 you should totally open a PR. About your first point: GitHub makes it really easy! Here is the file you need to edit, just click this button:\n\nYour changes will get run through the automated tests, which should provide a base level of confidence that your solution works and doesn't break anything.\nDon't worry, we're all friends here! You went through all the trouble of figuring out this out. You should definitely receive the credit. Even if your approach isn't \"kosher\", it's an invaluable starting point for the discussion moving forward. Having an open pull request makes it so much easier to transfer knowledge about a solution, since you can see the changes side-by-side and have conversations about specific lines, etc.\nOn first glance, your solution looks reasonable to me. I'd love to be able to look it side-by-side with what's there now to be able to reason about it more closely. If you're worried about being wrong, well, as a former technical lead of mine once told me: \"oh, imposter syndrome? I wouldn't worry about that. As soon as you feel like you know what you're doing, they promote you.\" (h/t @numbsafari)\nAnyway, don't let my encouragement pressure you. I'm super thankful for all this digging you've done.. (Unrequesting review while I look into those tests). Thanks for cleaning up my mess @eggplantzzz :D . Could you give us the commands you run to start your geth private network? Thanks!. Looks like we need to figure out how to expose an .off() method. Calling this an enhancement. Thanks for raising this!. Just require(\"truffle-artifactor\"). All that good stuff gets released as separate NPM packages :)\nClosing this, assuming this answers the question. Thanks for reaching out!. Thanks for the thorough issue documentation!\ncc @haltman-at . Closing this. Please try upgrading Truffle via the following:\nnpm uninstall -g truffle\nnpm install -g truffle\nand let us know if the problem persists. Thanks again!. Yeah, sendAsync is just send now. But that doesn't sound like the problem.\nCould you provide more info about how the failure appears? Exception stacktrace or anything else that might be helpful. Thanks!. I don't think that's the right way? provider is the object you want, currentProvider is usually used in the context of web3.eth.currentProvider. Is this documented somewhere?. Closing this for now. Please respond here or open an issue to discuss further. Thank you!. Hey @rocky,\nThanks for opening this. Wanted to say first that this is a problem we're extremely aware of and currently looking at solutions for.\nBesides that, however, simply including sources does not work because Truffle does partial compilations: not all sources are compiled every time, and so there is the risk of mismatch between file index and the current revision of a particular sourcePath.\nFeel free to reach out if you'd like me to go into more detail. This particular issue has been an enormous pain-point internally and so I can tell you that you are not alone in this frustration.. Yep @rocky, those JSON files really do need to be self-contained. But they're already too large (#1269), so we can't just go adding all the information we need.\nI've been spending some time recently looking into this, and I believe I am on the trail of a working solution.. @rocky more than only the query side! goal is a viable upgrade path for an improved system of record-keeping. See some wip docs here if you're curious about the current requirements/design.. Closing this as duplicate of #1236. Thanks for raising this @rocky!. ooh @axic you always find these kinds of things! we'll get this implemented soon probably. thanks for raising!. Thanks for raising this! Nice suggestions. I like # 3. This is done! Upgrade to... v5.0.6? I don't know when we added it. Upgrade to latest <3. Do the instructions in the README work for you on Windows? Let me know if they don't and we can get that sorted out.\nThanks a bunch!. Sweet @adrianmcli thanks for the lesson here!. We are looking into this issue as a matter of top priority.\nCan someone provide reproduce steps for the latest version of Truffle so we can validate potential fixes?\nHeads up, we are planning to release today without web3 fixes, but we will look into getting another release shortly after that.. Awesome! Between this and the PR, these three reproduce methods should be sufficient. Thanks all.\nI just opened #1685 to upgrade web3 to latest. This includes pinning the versions. We'll see what Travis says.. FYI for those following along at home: currently planning to start the release process at 4pm ET today (aka 2019-01-30T21:00Z). @filips123 I saw that. @eggplantzzz is working on another PR to pin to beta.37, to give us time to upgrade later.. @rocky we can't downgrade web3, or we lose support for the new ABI encoder. OK Truffle v5.0.3 has been released. Closing this because I'm an optimist. Let me know if the issue persists and I'll re-open :D \nThanks everyone!. (We will probably want to split these up based on the fallback function, but in the meantime this should be fine because whatever consuming contract uses the address will specify either payable or not, and payable is implicitly convertible to not). Thanks!. Hi, thanks for taking the time to open this.\nUnfortunately, we won't be able to accept this downgrade, as the newer versions of web3 provide much-needed functionality, i.e., support for structured ABI parameters. A lot of users are already making heavy use of this, and we can't just take that away.\nHopefully there is another solution to the above issue.. Yep, we probably should pin to an exact version. At the moment, it'll have to be beta.37, until we can look into the more recent beta (to make sure it works with Truffle). @freeatnet we're looking into it as a matter of top priority. We're doing a patch release today with outstanding merged changes, then we will look at upgrading web3 to the latest beta to see if that fixes the problems here.\nIn the meantime, can you or someone else provide clear reproduction steps so we can validate the problem locally?. Thanks @princesinha19! I just opened #1685 to upgrade Web3.js to latest, also pinning the version specifically. We'll see how that goes. If it passes our tests, we can proceed with the upgrade, otherwise I think we can try pinning to beta.37 for our release today and seeing if that solves the problem.. @filips123 Downgrading web3 is out of the question, because versions older than beta.37 do not support structured function parameters / the new ABI encoder. I am hoping that beta.38, which includes significant changes to their webpack config, will address these issues.. @filips123 Ah, yep. So #1646 was merged and is getting released today. I believe that fixes the xmlhttprequest problem, so that should be fine. We'll see about the rest of this.\nFun day :). I'm closing this for now. If we don't go forward with upgrading web3 immediately, @princesinha19 I will cherry-pick your commits for your contributor credit.\nLet's continue the conversation in #1667 so it's all in one place. Thanks again everyone. We'll get this sorted out today.. Thanks for raising this issue.\nWould it be possible for you to upgrade Solidity versions?\nIt's a challenge to continue supporting these old versions of solc, and I am hesitant to suggest doing so because of outstanding bugs present in these older versions.\nWe will continue to try to find a balance between supporting older versions while maintaining forward momentum. Let us know if you are blocked from being able to upgrade and we can consider next steps. Thank you!. @pieterhartel Ah, my apologies, I forgot about that use case.\nIt's a bit trickier than you propose because truffle-compile's profiler needs that AST. We would have to skip the profiling in this situation.\nThere are likely to be other incompatibilities, though, e.g. with Solidity tests. We are notionally working towards supporting multiple compiler versions at the same time, so this compatibility work would naturally fall into that effort.\nIn the meantime, if you feel like pursuing a fix yourself, please feel free to open a PR! The Truffle team's time is going to be limited this week and next, so we won't likely be able to get to these kinds of compatibility fixes until after that.\nThank you!. Ah upgrading exposes the problem that everyone's been talking about. Well, guess we're sticking with beta.37 for the time being.. Thanks for opening this!. FWIW this is related https://github.com/ethereum/web3.js/issues/2266. (Other question: is your username D&D related?). > First, and most importantly: it's from Elder Scrolls: Oblivion. It's one of the titles you could get in the Arena :) It has made it's appearance a few times as ability names in games like WoW and GW2.\n:D I asked because I just finished playing a monk character in a D&D campaign and made heavy use of that ability.\n\nMore succinctly and directly: if I remove the additional deploy/link step it doesn't work on Windows.\n\nSo this is all very interesting! I foolishly was under the impression that DeployedAddresses was a regular contract, not a library, but I just double-checked that and apparently my understanding was incorrect.\nAll of your reasoning sounds valid. Thank you for the clarification. I'm a little bit fuzzy on this still, but I was fuzzy on the finer points of this Solidity testing logic in the first place, so your explanation allows me to suspend disbelief, so to speak.\nI'm going to merge this. If something is wrong, we will certainly find out soon enough :)\nThanks again! Availability next week is tough because of a team on-site, but I will try to find time to get these changes released. Otherwise, I'll plan to release the following week (week of Feb. 11).. One of the mochas is for Truffle's internal test suite and the other for truffle test.\nI've been hesitant to bother remedying this, mostly because:\n- truffle test has a lot of legacy code, so it's risky to upgrade mocha with breaking changes\n- lack of urgency (I don't remember many other mentions of this discrepancy). \n- the plan is to generalize truffle test to support any framework on the order of \"pretty soon\", so it has appeared to be a naturally temporary problem\nBut, it might be trivially easy to do the upgrade, and my reasoning thus unsound. Or just plain invalid for reasons I'm missing. Either way, my attempts at judicious laziness aside, I would prefer these versions be in sync!\nIf you feel like taking a stab at this, I'd be happy to help sort out any trickiness you encounter in a PR.. Perhaps an easily actionable thing to mitigate this and #1713 is to make three attempts for each HTTP request?. Actually... the \"writing artifacts\" line makes sense to be block-quoted like that.\nWhat if instead, we did something like:\n```\n\ncompiling Foo.sol\ncompiling Bar.sol\nwriting artifacts to blah/blah\n\nCompiled successfully using solc v0.5.4+commit.blah\n``. Huh weird that this is failing CI. Let me see ifdevelop` is currently broken.. Alright it's passing! Merging. Thanks @maxsam4!. Hey @maxsam4 thanks for getting this started! I'll try to get eyes on this early this upcoming week.. Thanks for this thorough write-up, and for including potential solutions! Certainly makes our jobs easier. We will review this and come up with next steps from our perspective and discuss them here.. Could you please try upgrading to either to Truffle v5 (breaking changes) or v4.1.15 (no breaking changes)? This way we won't risk chasing down an outdated bug. Thanks!. In seriousness though... this was clearly a substantial effort. Nice job!. Ah, a segfault.. Thanks @jacqueswww for investigating this and offering this solution!. This was discussed in Gitter, but including it here for completeness:\nCould we switch from using those additional two variables and instead just make a list? Maybe something like:\njavascript\n{\n  compilerRoots: [\"https://relay.trufflesuite.com/solc/bin/\", \"https://solc-bin.ethereum.org/bin/\", \"https://ethereum.github.io/solc-bin/bin/\"]\n}\nThis way we don't need a separate variable for the location of list.json (it's just appended), and rather than an if statement for a specific fallback, we can just iterate through the list to find the first URL that works.. @maxsam4 this is looking good! I was about to merge it for you but it looks like there's now a failing test. Mind looking into that? I'd love to get this out in the next release. Closing for issue maintenance. If this is still a problem for you, could you fill out the issue template? We'll be happy to re-open this with more information to help us investigate. Thanks!. Could you try upgrading to the latest version of Truffle?\nnpm uninstall -g truffle\nnpm install -g truffle@5.0.5\nNote that you will also need to upgrade to Node v8.9.4 or later.\nPlease let us know if the problem still occurs!. Can anyone provide full reproduction steps? Thanks!. Closing this for issue maintenance. Please feel free to provide more info and we'll be happy to reopen/investigate. Thanks!. This is released in v5.0.6. Let us know if causes any more trouble! Thanks!. @CruzMolina allow me to steal your merge button privileges so I can gather release notes at an inappropriate hour.. > I think this bug also means that truffle-contract-schema isn't being run after truffle generates artifacts. Shouldn't it do that? It seems like the very first run of truffle compile should have given this error.\nWe use the schema in all cases, it's just a question of whether or not we validate in all cases. I thought we were validating everywhere but I guess that's not the case [anymore?].\nI kind of want to turn on the validation and let the bug reports come flying in. But I won't do that so brashly :). > Are there any plans to support for 2-dimensional static-sized arrays into truffle-contract-schema? If not, is there a way of turning off the schema validator?\nAh I remember discussing the fix but looks like it didn't get into a PR. Just made a quick change that will support n-dimensional arrays of any type, static and dynamic. This is kind of a na\u00efve fix, and doesn't account for structs. \nI'll need to refresh my memory on the allowable types syntax with the new encoder, but it should be relatively straightforward to get those in too. (Anyone here good with a regex and got a spare moment? PRs appreciated :). Quick follow-up (but then I have to stop procrastinating taxes): whoa structs are expressed as tuples!\njavascript\n      {\n        \"name\": \"t\",\n        \"type\": \"tuple\",\n        \"components\": [\n          {\n            \"name\": \"x\",\n            \"type\": \"uint256\"\n          },\n          {\n            \"name\": \"y\",\n            \"type\": \"uint256\"\n          }\n        ]\n      },\nSo that's not even just string matching, then. Shouldn't be too hard to express this in JSON-Schema, but it does appear that it's more than a regex.. Thanks for raising this issue! We'll look into it and someone will get back to you.. Just released Truffle v5.0.7 containing the fix for this. Could you try it out and let us know if it's not fixed? Thanks again!. Oh shoot! I broke this! I'll fix it it today and it will go out with the next release. Thanks for the heads up.. @Amxx we just published a fix in Truffle v5.0.7. Closing this because I'm an optimist. Could you try it out and let me know if that solves the issue? Thanks!. Oops that's what happens when I try to escape a path separator before coffee.. Thanks @CruzMolina!. > is this slated for the next release? having an issue with truffle-hdwallet-provider https://github.com/ethereum/web3.js/issues/2447\nNot as a blocker for release, but it would be nice to have. I am not sure if the team has bandwidth to get this ready by next week, since there's unknown complexity/risk.\nI'll say though... if anyone can get an upgrade PR to pass Travis checks, I would consider that a top priority to review/QA. I just fear the unknowns lurking behind the red \u274c there.\nAnyway, @nivida did some initial investigation into the test failures here. I will find his results later today and paste here.. So nivida identified this line, saying:\n\nI\u2019ve checked quickly the provider.js test and this line is definitely invalid.:). @sarbogast wrote:\nIndeed this worked. But forcing people to reinstall their whole development environment because Truffle or one of its dependencies doesn't work with NPM installed a certain way seems a bit extreme, doesn't it?\n\nYep, you're 100% correct. My earlier assumption, considering that best practice recommends against sudo npm, was that it was not urgent to fix it, since it is arguably unsafe.\nEarlier today, the rest of the team and I came to the conclusion that this reasoning is egregiously unsound. This is basically entirely thanks to all of the users whose bug reports have made it clear that it's unexpectedly weird and basically unacceptable for Truffle to fail to operate if installed by root.\n@sarbogast your point here cuts directly to the heart of what was wrong with the prior assumption. Thank you for expressing it; I will be glad to remember it in the future when something else runs the risk of breaking user expectations like that.\nAnyway, good news! Upon reaching the aforementioned conclusion, @eggplantzzz went and implemented what we believe to be a very straightforward fix! See #1801 for the PR if you're curious. I'm confident that we'll be able to get it into the next release, which will be sometime next week at the latest. (Thanks @eggplantzzz!). Thanks @CruzMolina!. Your argument is valid. Leave as-is!. Oooh this is failing in a useful way!. golly gee yay!. Ah, leap 250ms\nfunction waitASec() {  // chill, dawg. Minor suggestion: can we call them sources instead of contracts?. my second favorite color is ASCII graph. Can we get rid of file as an argument here? Not that it's a big deal, but might save some travis-time. Too many nodes!. Does this also bump the major version?. np might be a typo for no, we should remove. else. No new line at end of file\nFor those of us old-heads that like to cat their files on the terminal. But really I came here to say that _methods should not be called outside of this class. This method is a bit long? Maybe worth chopping it into pieces? Up to you. resolver.require(\"Migrations\"). I don't think those return values are actually used... I think returning undefined is fine.. Should this be options.compilers.solc, like in truffle-compile/index.js?. Do we default compilers.solc.settings anywhere? Or are those guaranteed non-null because of the grandfathering above?\nRegardless, maybe this should be more explicit, in case that grandfathering goes away.. Oh cool, I missed that.. I kind of prefer the way you had it with web3.eth. I'd also be into web3.eth.estimateGas(params) all on one line, but I can see why separating it looks nice.. Can the if just be moved into extractReason here?. Ah so provider.send() still only uses a callback. This is all really pretty. What's that value? I think let's make this a const at the top of the function so it gets a name.. This doesn't appear to be used. I'm a little bit worried about attaching reason to these error objects like this. It feels like an anti-pattern, but maybe I'm just afraid of statefulness. Let's keep an eye on this in the beta, in case it causes unforeseen complications.\nPardon me if I haven't seen it yet, but it might be worth making a special note somewhere in a comment, so we can encourage future work to be mindful of pre- vs. post-reason-attach errors. I know you've written a good matrix of tests around this, so it's probably safe enough, esp. since it's not likely to go without undefined checks anyway.. Let's remove it, then!\nYou can hold me accountable to find it for you in commit history later.. Might be worth a comment so we remember why --exit is included in the future. Maybe I've just been overly-scolded in the past for even the tiniest amounts of commented-code, but now I feel the need to pass on this sentiment.\nIdea: instead of commenting out code, we make sure to remove it via PR with a reference to the upstream issue, so that way GH make it easy for us when the issue closes, and we can add it back in with the revert button.. \ud83d\udc4c . Sweet. Yeah, good stuff!!. Can we also test a reason string that exceeds 32 bytes? Pardon my having peeked behind the Solidity curtain... (gist, if you recall). If this happens, the dir won't get cleaned up, right? Do we want that?. s/has been deprecated/is no longer supported. Ah but we should at least move the public methods above the private ones.. Sorry I complained earlier. Definitely into this. Also are these useful more generally, outside the deployer?. Oh nice, one of these!. Oh wait you're doing private first? That's cool as long as we're consistent.. I feel like there's gotta be a better way to get indents under control.. I dig the messages separation of concerns. :+1:. It's just more canonical. Artifacts are by contract name, not filename.. Suggestion: what if we used a builder pattern for this?\njavascript\nreporter = new Reporter()\n  .setDeployer(deployer)\n  .setMigration(mockMigration)\n  .listen();. This is deleted just because it's now available to deployer as its own package? It's not losing anything?. :smile:. Oops this commit is worthless. Note to self: remove. Does this only work for POSIX-compliant terminals? Do you know if this works on Windows as well?. whoa, neat. This should change to {Object} I think.\nOne note: do we want to check for whether it's an array, to accept the array format too?. Does this work? (won't it look for methodABI.outputs.inputs?). Yep - takes whatever files specified by path and pipes them to the command. The command is expected to output a JSON artifact on stdout.. It forwards arguments; it's just for doing yarn test -b so that the -b gets forwarded to mocha.. Correct. truffle compile --compiler=external calls truffle compile --compiler=solc --contracts_build_directory=external, which puts the contracts in external/, but the project is configured to still use build/contracts/ for artifacts. So the external compiler takes what's in external/, cats them, and saves them in build/contracts/. Yep, except this is on purpose to allow null as a valid non-value :). I think these are called parameters in the ABI spec. Why not during dry-run?. \ud83d\udc4d . Hm, then I think this is fine for now. I think eventually we will want a \"dry run reporter\" that is separate from the regular reporter. That way we can get rid of this conditional logic.. Ugh, normies!. Hm, so I was thinking that contents.toString() was \"correctly\" rendering those unreadable characters. Is that not the case in all situations?\nDo you have any other ideas as to how to detect this, @axic? I'm trying to avoid making these files parsed in a property-specific way, and also trying to avoid requiring the user to specify the encoding on a per-property basis.. Mmm. OK so how about:\n\nIf it parses as JSON, it's JSON\nIf it starts with 0x, it's hex\nOtherwise, it's binary. Truffle. (just a reminder: we'll need a preamble.). Let's remove the indexes for these headers, and instead have a table of contents at the top. There's a lot here. It'd be nice to lay it all out upfront.. note for full release: this a great list of things we'll have to remember to document. Making an issue for full-relesae checklist #1176 so we can add stuff as we think of it.. I second this ------------------------------------------^. Web3.js. Can't be too informal :). I'm torn on whether or not we need the backticks when describing a truffle package. Definitely the name seems to work best as all-lowercase. I think the name can just be regular text. Or maybe bold.. For these examples, I think it's helpful to include a line above:\njavascript\nconst example = await artifacts.require(\"Example\").deployed();\n\nWell, maybe not, because that kind of clashes with the .then() syntax we're showing off.\nWait, is this now possible?:\njavascript\nlet receipt = await example\n  .setValue(123)\n  .on('transactionHash', hash => {})\n  /* ... */\n  .on('confirmation', (num, receipt) => {} )\nAnyway, my point is that it's probably worth showing a more complete example so there's literally no guesswork.. As I am reading this, I am getting giddy.. This can be broken up:\nSolidity:\nsolidity\nrequire(msg.sender == owner, 'not authorized');\nJavascript:\njavascript\ntry {\n  await example.transferToSelf({from: nonOwner})\n} catch (err) {\n  assert(err.reason === 'not authorized');\n  assert(err.message.includes('not authorized');\n}\nMaybe not bold?. BigNumber.js etc.\nMaybe these should be links; or maybe we should just make sure everything gets linked at least once.. We'll likely need:\n- Contributing section / Call for feedback to get everything perfect for the full release\n- Thank you to our awesome community\n- Installation instructions. Oh missed this: we should @cag him.. What was the old behavior? Should we make this backwards compatible to beta.33?. Not sure about webpack, but Truffle should be capitalized when used in plain English.. This should probably be debug to match console.debug. I think we should make the truffle-* packages into peerDependencies to keep yarn.lock from getting too messy.. Huh I did not realize that this syntax was cool on Node 6. Hm. I think the benefits outweighs the drawback here. Users using this will likely have Truffle installed anyway. Or if they don't, this is going to force it to be installed. \nBy making it a peerDependency, we won't have to update the listed version internally. And since I've been doing a bunch of yarn.lock maintenance lately, I'd rather avoid that :). Although I guess I'm a bit conflicted. If it were only truffle-core, it'd be a bit less effort on the user's part. We can leave these for now. I might change it later if I notice a bunch of lockfile overhead.. We also probably want a comment here because it's not entirely clear.. Can we put this file in .gitignore instead?\nIt's not necessary to commit because prepare runs even if you're doing something weird with yarn workspaces or whatever.. Ah I missed your original comment. Yep, please leave out!. Was the cd necessary to get the cross-file references working?. We can get rid of this file, it's a relic from the non-monorepo setup (Git doesn't recursively search for .gitignore files). Same with this file - this just won't get executed.. typo: its. Did you consider copying the CompilerSupplier stuff from truffle-compile?\nAt the very least it'd be cool to support Docker. Oh that's weird. So the output is just the various pieces of data requested, concatenated together in any order?. Yep, totally remove this!. I think you can get rid of it is just for brevity: truffle help -> when run without arguments -> displays general help. lol. This is potentially brittle if we change the args for truffle compile. Maybe rename this displayCommandHelp or even just displayHelp. Hm ok after consideration, I think we should do this:\nUsage: truffle compile --etc\n  Description: Compile stuff\n  Parameters:\n    ...\nI think the all-caps appears a bit \"loud\", and we can probably get rid of \"command name\" and just move usage to the top.. Some of these parameter descriptions are a bit long. Maybe we should do something like:\n```\n  Parameters:\n                --all\n                        Compile all contracts instead of only the contracts changed since last compile. (optional)\n            --network <name>\n                    Specify the network to use, saving artifacts specific to that network.  Network name\n                    must exist in the configuration. (optional)\n\n            --list <prereleases|releases|docker>\n                    List all recent stable releases from solc-bin.  If prereleases, releases\n                    or docker is included it displays only prereleases, releases from solc-bin or docker tags from\n                    hub.docker.com respectively. (optional)\n\n```\ni.e., get rid of the colon, so that the parameter expression is the only thing on the line, and indent the whole description, followed by a blank new line.\nAnother thought is that maybe it's worth decreasing the indent to 4-space indent?. Instead of the else, just return inside the if block. No need for the extra indent.. How do you feel about just calling this help instead of userHelp?. Prompt to confirm user wants to proceed after dry run. What if we made a required property (default false), and formatted it somewhere once, rather than listing which params are optional?. I think maybe options is a better name than parameters. This way we can call an option's arguments \"parameters\". You can do set -e for this exact behavior!\nI also like including -x (set -ex), which prints each command before it runs.. Nope, that's the whole line.\n```bash\n!/usr/bin/env/bash\nset -ex\nnpm run lerna:bootstrap\n...\n``. You can dofrom \"lib/solidity/selectors\"instead of the relative path. (Not using relative paths makes it easier to rename files, etc.).s/\\t\\t/ {8}/` :). Style suggestion:\njavascript\nlet matchIds = Object.keys(assignments)\n  .filter( ... )\n  .map( ... );. Style suggestion: \nTypically for comments that go on their own line, I'd say put them like this:\n```javascript\n    // above line or section of code with same indendation level\n    // note: side node\n    let maxMatch = Math.min(...);\n    const otherLine = alsoRelatedToComment;\n// another section of code with a comment\nreturn { ... }\n\n```\nNote empty-line spacing to visually separate commented sections of code.\nOh yeah, also whitespace rules:\n- Whitespace on both sides of binary operators\n- Whitespace after , in argument lists\n- Whitespace at start, end, and in-between items, for array and object literals. Style suggestion: don't abbreviate variable names. Preferably ever, but occasionally it's fine if it's very clear. \nYep, it's annoying to write; I know\u2014I typed all those long names out everywhere :).. Part of me thinks it might be better if we made a utils function:\njavascript\nfunction atDepth (id, depth = 0) {\n  return `${depth}:${id}`;\n}\nThen we wouldn't even need the auxiliary variables like augDeclarationId or literal string concatenations everywhere, we could instead just call the function directly where it's used, like:\njavascript\n    ...(currentAssignments[atDepth(id)] || { ref: {} }).ref,\nAlthough I want a better name than atDepth. Thoughts?. Yeah, I play that game often, trying to get comments to fit on the same line, etc.\nI like lots of short lines with empty lines in between logical sections.\nWhen I use inline comments, I try to make sure it's just a tiny note.. Maybe I am extreme in my views and just stubbornly refuse to abbreviate anything. I used currentAssignments, after all (I did consider curAssignments). I think augment works for now, provided the function has a docstring. I'm into domain-specific short words, even though they require that future developers take a bit of time digesting the lingo in a particular module.\nSo I think if lib/data wants to define a new term \"augment\" to mean \"identify some entity in the context of a given function depth\", then that's totally fine. It's succinct and useful to name such a concept, given this work.. Rogue comma!. Did you need to remove concurrency=1? I seem to remember this being necessary. Hooray, a hack! \u2728 . Oh not at all, that's a grade A hack :). Not to say this is worth changing, but FYI the \"fancy\" way to do this might be to use the semver NPM package to get the version number.\nActually you might want to change to this because Node \"v10.x.x\" will slice incorrectly.. ```\n\nparseInt('v7.0.0'.slice(1)) < 8\ntrue\nparseInt('v10.13.0'.slice(1)) < 8\nfalse\n```\n\nHm. Seems fine. JS you slay me. Thoughts:\nI vaguely feel like the README ought to keep any kind of detailed development instructions at the bottom, after \"Install\" and such.\nSo I like the thought of maintaining this sort of outline:\n\nIntroduction / benefits / etc.\nInstallation\nQuick usage\nDocumentation\nDevelopment\n\nThis way it provides a clear path for users who are just getting started.\nBUT! We of course want to make sure contributors make it all the way to number 5. So I am thinking that maybe we should move \"A Note to Developers\" into the \"Development\" section, and add some kind of callout very close to the top that says \"HEY! READ THIS THING OVER HERE! PLEZ\"\nHow about putting something like this right above \"Install\":\n| \u2139\ufe0f Contributors: Please see the Development section of this README. |\n| --- |. Also, since you expressed interest in improving your technical writing, let me dig from the bottom of the barrel of suggestions:\nHow about:\n+ develop: For pull requests that must target the current major release\n+ next: For pull requests that target the upcoming major release.\nIt might be also worth noting that targeting next is strongly preferred.. Although this raises the question: will this information need to be updated right away when we get rid of next?. You'd think that! But no: lots of people (myself included) will take any liberty they can get when it comes to avoiding reading things.. (also, disclaimer: I claim no real expertise in matters of clarity. I just have enough experience being bad at writing things clearly that I've gotten ideas along the way... feel free to exercise judgment whenever.). Style tips:\n\nUse camelCase for variable names (defaultUserConfig)... this can actually probably even be renamed userConfig for brevity? But that doesn't matter much\nNowadays it's recommended that object literals should have copious spacing { globalConfigPath: true }. General thoughts: this function seems to be outgrowing itself. I recommend re-organizing this by splitting it into multiple functions, or at least decreasing the number of levels of nesting.\n\nI think you might be able to use .filter() to assign discrete ideas into specific variables. Possible approach, feel free to use as a starting point or not:\n```javascript\nconst boxContents = fs.readdirSync(tmpDir);\nconst destinationContents = fs.readdirSync(destination);\nconst newContents = boxContents.filter(\n  (filename) => !destinationContents.includes(filename)\n);\nconst contentCollisions = boxContents.filter(\n  (filename) => destinationContents.includes(filename)\n);\nlet shouldCopy;\nif (force) {\n  // write all box contents\n  shouldCopy = boxContents;\n} else {\n  // promptOverwrites returns list of files that the user says \"yes\" to overwrite\n  const overwriteContents = await promptOverwrites(contentCollisions);\n  shouldCopy = [...newContents, ...overwriteContents];\n}\nfor (let file of shouldCopy) {\n  fs.copySync(tmpDir, destination);\n}. Can you also upgrade truffle-reporters's dependency? Or just use the same one that package is using (^2.1.0). Does your editor put these here automatically? This is awesome!. Can we perhaps move Configstore so that it is an internal concern of the truffle-config package?\nI am thinking it might be nicer if it were something like:\njavascript\nconst Config = require(\"truffle-config\");\nconst defaultUserConfig = Config.getUserConfig();\nThis way, if we want to switch to another package besides configstore later, we won't have to change it in more than one place.. Needs new line at end of file.. Extra newline. Two extra newlines. Extra newline (and on L69). Delete all the commented out code all the time!. If only there were a cryptographically secure way to automatically generate random sweet-themed mnemonics :(. Looks like we can remove this from this PR (it's not being used). This should be a devDependency cause it's only used in tests. Where do these files come from? Generated by sinon?. This should be a devDependency. (Just wondering about the context for this + the imports-loader thing). Exciting to see this foray into mocking!. I kinda think this should be two separate methods. Note for later: you might consider splitting this up into multiple functions that could live in debug-utils. But no need to do it now; I think you'll find yourself naturally wanting that in the course of any follow-up work.. isn't that kind of annoying?. Ah so I just tried this feature out and realized something that might be nice: an extra blank line after these added/removed messages.\nThis looks a bit cluttered:\ndebug(develop:0x91c817a1...)> b SquareLib:5\nBreakpoint added at line 5 in SquareLib.sol.\ndebug(develop:0x91c817a1...)> b +10\nBreakpoint added at line 23.\ndebug(develop:0x91c817a1...)> B +10\nBreakpoint removed at line 23.\nCompared with:\n```\ndebug(develop:0x91c817a1...)> b SquareLib:5\nBreakpoint added at line 5 in SquareLib.sol.\ndebug(develop:0x91c817a1...)> b +10\nBreakpoint added at line 23.\ndebug(develop:0x91c817a1...)> B +10\nBreakpoint removed at line 23.\n``\n. Missed this!. Also this!. That's just convention. Typically it depends what gets returned... if you're requiring a class or something that looks like a class, UpperCamelCase seems appropriate. It's annoying that this is what Node calls it. I usually sidestep the issue by requiring specific functions, not all ofchild_process.. Process? Search me.. MaybeList all commands or provide information about a specific command. Is it used? I vote delete. I originally had this assignment before thewhileloop, because the contexts/instances never change. But rather than stringing inREADY, I'm just doing thatif` statement because I know if we have just gotten a TICK, then the session is READY. \nI was just trying this out. We have a couple switch statements that declare a bunch of variables, and I'm sick of having to move the variable declarations up outside the switch statement. So here I'm trying out the pattern for a particular case:\n```javascript\ncase something:\n  const inlineFunc = ({ / action... / }) => {\n    / ... /\n  }\nreturn inlineFunc(action)\n```\nNot sure. What do you think?. Note: this is the first time a saga is defined that tags named arguments like this. I don't know if this break in pattern is a bad idea.. Ah, could you please make this change? You are probably the best person to do it, rather than leaving it as technical debt for later.. I don't really know a good place for this. I was going to avoid abstracting it, but I didn't like copying and pasting it everywhere.\nThoughts?. The reason it's not part of addProp is because certain properties are directories, and that feels like it should be explicitly indicated as such. If I were to write this from scratch, I'd define a bunch of helper methods for various data types, and directory or (path) might be one of them.. The convention is that sagas don't import selectors from an external app module. (This is why the controller selectors exist in the first place.). This looks like a candidate for a HACK marker. I would advise against making a state variable polymorphic, but in this case I can see why you did it.. Thanks for adding the missing docstrings!. what's this comment about?. whitespace after comma. It might be good to test the new behavior here, namely that you can inspect variables after the trace finishes (in either success or failure case). It's so much easier to criticize than it is to implement -___-. You could also just add the asserts to the existing two tests. Check that the status is correct and check that the variables are what you expect them to be.. Should we also allow undefined? Just in case? (ooh, a new github feature)\nsuggestion\n    if (builder === null || typeof builder === \"undefined\") {. Nice.. Might be worth a HACK comment so it's searchable later. Random note (not worth fixing now), but I believe most JS style-guides suggest function ( instead of no-space.. Can't we just simplify this?\nSomething like:\njavascript\ngetAddress: function() {\n  return provider.getAddress.apply(provider, arguments);\n}\nNot sure if we need the additional undefined check, since I think we want an exception if the underlying provider doesn't have .getAddress(). And the arguments can just be forwarded en-masse via .apply. suggestion\n  var staticConfig = originalrequire(file);. suggestion\n  var config = staticConfig.config. suggestion\n    ? new staticConfig.config()\nSorry I'm just playing around with this new button.. We need to be sure that the delete happening before the originalrequire is not necessary. Might be safer just to do the loading after the delete, like it is currently.. \ud83c\udf89 . These should probably get indented. (indent). (indent). Ah I think this shouldn't be here... analyticsPath isn't used in lib/develop. We'll need the analyticsPath stuff here (ah I was unclear before \u2013 the lib/develop pointer was just for reference, cause that's what happens with chainPath). Could we make the interface for this something like:\njavascript\nconst analytics = require(\"../services/analytics\");\nanalytics.send({ /* ... */ });\nAnd then analytics.send() would do the whole fork + send process all in one go? This way we don't have to write the path more than once, or do any kind of child-process manipulation in the caller code.. I think this should be a separate file. Let's make a whole directory lib/services/analytics/.\nMost of this file can live in lib/services/analytics/google.js, except for this process.on block. We could move that to lib/services/analytics/main.js or something.\nThen we can make the index module (lib/services/analytics/index.js) to provide the external interface.\nSomething like:\njavascript\nmodule.exports = {\n  send: function(...args) {\n    let analyticsPath; // determine `analyticsPath`\n    const child = fork(analytics)\n    child.send(...args);\n  }\n}\nThis way:\n- The GA-specific logic will all live in one file, purely as a library\n- The executable that gets forked will be small and clear, and just require() the googleAnalytics lib\n- The external interface will not require the caller to know anything about the forking or whatever. It's just a synchronous method called send().. I would also be in favor of defining our own format for send() arguments, rather than forcing the ec/el/etc. names everywhere.. ah I think this should be merged into the one above... we can get rid of the extra BUNDLE_VERSION and just include BUNDLE_ANALYTICS_FILENAME in the same object. truffle-config should get required at the top. const :). We can just get rid of noAliases because it comes from config anyway.\nI think we can even get away with doing function (inputStrings, options) and doing Config.detect() inside the function here. There might be a small performance loss, but we can always solve that inside detect itself.. But why is it undefined?. I don't think we want to require main here, as that will trigger a message listener in the main process. Could we just call these log() and info, respectively? And skip the function wrapping around info, since that's effectively constant?\nThis way we can do:\n```javascript\nconst version = require(\"./lib/version\");\nversion.log();\nconst { core, bundle, solc } = version.info;\n```\nOr something like that.. How's about making this default to console?. Cool. Pardon my lack of context and lack of available attention. I'm gonna request @hjaltman for a second set of eyes to review. Thanks!. Can we make this function async and return true or false based on whether the event was actually sent to GA?. Cool!. Wait, won't _ be undefined?. Gotta get rid of the .only!. Convention is that actions do not leave app-module boundary. To maintain this, I've just been making wrapper sagas (cause sagas are allowable-external).\nLet me know if you come to the conclusion that this is a stupid and arbitrary separation of concerns.. Thought: what if we had a system for app-modules registering hooks into the session?\nI'm not sure what this would look like. If this comment is meaningless to you, just ignore me.. I think we want to prefix these instead of postfix. At least I'm pretty sure that's how I did it already in one place.\nEventually we might want a helper that does the scoping automatically.. prettier puts case statements at the same indent as switch? Who knew!. Don't we want an exception to happen, though? Or is '' a reasonable return value in this situation? My thinking is that if the user does truffleProvider.getAddress but provider.getAddress does not exist, then there should be an exception.. This will just break if the user doesn't set up the typechain stuff, right?\nCould we add error messaging when the user has .ts files, to point them in the right direction to set up everything they need?. pretty!. What's this one for?. Ah prettier you misunderstand!. Heh, I see. Well, it's probably fine.. \ud83c\udf89 . Should use path.resolve() for this to make it more cross-platform.. Are requirements for this script to save the value to the package.json? It seems that you would need --save for that.. We might want to include devDependencies here; any thoughts?. A++ would read comment again. (This will need to happen before we can merge). Probably shouldn't have \\n at the start of the exception message. This branch returns when it should return callback();. This should probably also return. If only displaying this message in a catch is not an option, can we remove the yellow here? That way the message will be more ignorable, but still easy enough to find if you're looking at an unhandled exception.. Looks like this one is still missing. This change is necessary for Migrations.sol. We should probably get rid of this. These of course are necessary. :+1:. :+1:. :+1:. :+1:. Sure if you wanna include. All the things in this file. all the things here. yep these too. Gotta put this back in and turn the version up, apparently!. All this. yep. yep. nice reduce. We can use const instead of let here if you just tack the filter onto the end... can even get rid of the extra if in the filter\nsuggestion\n  ).filter(v => v);. suggestion. suggestion. suggestion. (I wish I could do a multi-line suggestion). Wanna make this await-y?. We can change these later. minor typo: v0.5.1. I love using the semver library to compare semver values/constraints. \ud83d\udc4c . Interesting!. Future work for this file: we can use the ABIs for the various Assert type libraries and autogenerate Assert.sol. Since this is commented out, we probably want a comment why. Can we reduce the boilerplate here a bit?\nSomething like:\n```javascript\nconst assertLibraries = [\n  \"AssertAddress\",\n  \"AssertAddressArray\",\n  \"AssertBalance\",\n  \"AssertBool\",\n  \"AssertBytes32\",\n  \"AssertGeneral\",\n  \"AssertInt\",\n  \"AssertIntArray\",\n  \"AssertString\",\n  \"AssertUint\",\n  \"AssertUintArray\"\n];\nconst assertAbstractions = assertLibraries.map(\n  (name) => runner.config.resolver.require(truffle/${name}.sol)\n);\n```\nThen, below, we can change deployer to use await syntax:\njavascript\nawait deployer.deploy(Assert);\nfor (let abstraction of assertAbstractions) {\n  await deployer.deploy(abstraction);\n}\n/* ... continue into dependency_paths stuff ... */\nWhat do you think?\n. This is another bunch of code that could use to be replaced with a list of library names + for loop.. Similarly these could probably be DRYed up a bit, but less important because it's just redundantly repeated data, not redundantly repeated code.. Just a note: it's risky business to make an async function that also takes a callback. Let's just switch this to async only, and then use callbackify when this function is called.. The callbackify change would be on L90 of this file:\njavascript\n     callbackify(detectNetworkId)(function(err) {. This is a bit risky, but probably fine. I think ideally we would want to grab only optimizer and other specific keys, cause otherwise version, etc. will get passed as settings, which might cause unforeseen namespace collisions.. d'oh silly me. nice!. you can do for (const ...!?. yay! programmer humor!. We don't need the promise check? That surprises me because I'd expect that nothing would be calling done in that case. We should just use .toString() here. We want the loss of precision. Also, if providerNetworkId is a BN then we won't be able to JSONify that. I think the lerna workflow means we shouldn't update versions in the PR, instead doing it as part of the lerna publish process. We can just toss this line. Can we do this! If Ganache is already running, then truffle develop will fail to start, no?. The whole point of truffle develop is that it's low friction. That's why we chose 9545 for truffle develop in the first place and 7545 for Ganache UI. \ud83c\udf89 better names yay. the controversy. How do you feel about just calling this types? userDefined seems semi-extraneous, but I could go either way.. How bout { ...object } instead of defining this helper function?. I would be in favor of removing this \"dead\" code, and instead: reverse the if on L119, throwing an exception that says \"Allocation not found\" or somesuch. For users that have analytics enabled, the exception will get recorded there so we can see how often it happens.. (thanks for repeatedly explaining how this is benign!). the lack of braces here unnerves me. This strikes me as an anti-pattern. Could this be avoided by making a truffle-contract-legacy package instead? Possibly even make it to depend on truffle-contract to re-use commonality?. (We probably shouldn't ignore errors from doing Environment.detect()... unless these get thrown). Ah this legacy-web3 again. Now that this effort is looking more like an actual, maintainable, possibly long-term solution, I think stuff like this is worth avoiding. We shouldn't have to mirror the package just cause we want to avoid a name collision. Why not instead leverage Node itself and group legacy stuff into separate packages that define specific version dependencies?. Here's an idea: what if, instead of my above proposed truffle-contract-legacy, we create a single new package truffle-legacy-system package, minimally containing things like truffle-contract/lib/legacy.js, along with exposing Web3 from v0.20.6?\nThen we could do:\n```javascript\nconst Legacy = require(\"truffle-legacy-system\");\nthis.web3 = options.legacy ? new Legacy.Web3() : new Web3();\n```\nAnd then we could avoid duplicating web3 as legacy-web3 just for package namespace reasons. truffle-legacy-system would have its own namespace, specifying the old Web3.js.. (The stuff about legacy-web3 is not me nitpicking, I swear. The comment I'm about to make here is nitpicking. This one you should feel free to roll your eyes at.)\nThis feels like a good candidate for moving to a function that has a semantic name, like normalizeWeb3Interface(self.web3) or shimWeb3(self.web3). We could even put such a function inside my proposed truffle-legacy-system package :grin:. Whoa what's up with this pair?. Is the only substantive difference here that it uses deploy / deployMany directly instead of inheriting this.executeDeployment from the Deployment base class?\nIf so, maybe we can do away with this file.. We can move strategy.load() out of the block of if statements.. There should be an abstract load method here to indicate that it's the external interface.\nSomething like:\n```javascript\nasync load (userSpecification) {\n    throw new Error(\"Abstract method loadingStrategy.load is not implemented for this strategy.\");\n  }\n``. There should also be docstrings for every public method here, vs. the methods that are only used by other loading strategies.. Can we get rid of this implementation here and instead just construct aVersionRange` strategy inside the Docker implementation?. (Same comment as with Docker: can we move this logic into VersionRange so that Native just uses that?). Is the reason for this distinction because of performance?\nI vote for a comment here to say why we treat the special case specially.. It's hard to follow what all these methods do and how they fit together. (e.g. which ones are used for exact-version and which ones are used for version-range?). Is there a way to separate this, or make it more clear on what's common between the two and what's different?. Doesn't need to be a separate method, but yeah, just at the end have that if(strategy) check + load.. Not a subcase, but instead to make them compose the VersionRange behavior.\nSo inside load, something like:\n```javascript\nconst solcjs = new VersionRange().load(userSpecification);\n/ ... /\nreturn {\n  / compile, etc. /\n  importsParser: solcjs\n}\n``. Why remove those args?. what's this TODO?. Gosh this line is long. What happened here? Shouldn't this use the function you just fixed?. gosh, changes to this file are sure getting difficult to read about. it all seems reasonable though. we should think about getting this more organized so it doesn't require as large a brain-cache size to look at PRs.. DeployedAddresses isn't a library, I don't think we want to include it here for linking. Did you put it in the array just to deduplicate the special case logic that deploys it on its own?. (After looking at this more closely, I get the sense thatdeployer.link(NonLibrary, ...)will just be a no-op. So I guess this is fine? I'm curious about your reasoning here.. Ah, so it looks like this line means that instead of your Solidity test contract only getting linked to the specific files it imports, this will now link to all these utils individually. Is this necessary? What happens if you remove this step?. huh neat.context` wasn't being used anymore, was it?. huh that's new?. or at least news. Can we just inline the script here? I'm worried about non-UNIX operating systems where that file might not be compatible.\nShould be fine if the entirety of the postinstall is just truffle compile --download-solc 0.5.4\nIf it turns into more than one line later, where a shell script becomes more warranted, we'll have to look into cross-platform solutions then.. (Note from above: let's remove this file and inline it into the package.json). Curious why this was necessary. I think it's fine but I'm a bit concerned about this causing problems if it's too restrictive. My guess is that Truffle currently does not support paths outside the project root, and I don't believe it's normal use case, so it's probably fine, but, yeah, just wondering what led you to include this.. (We'll have to remember to delete this commented out line of code). Gosh. This is what we have to do now? (I mean, if it's the only option, it's the only option). Oh I see. So if I get this right, the crux of the problem seems to be that our profiling relied on this weird error object, which was only available via solc-js?. So, theoretically, if the user's username has truffle in it, this would cause incorrect results. (/Users/truffler/.nvm/8.11.0/node_modules/truffle/packages/truffle-core or somesuch)\nBut we probably don't need to bother accounting for this. It might be worth a comment though, just to reduce head scratching in 2 years when someone gets bit by this weird case.. This case is difficult to reason about at a high-level. Might be worth a couple sentence comment explaining the general approach.. suggestion\n        ...state,. \ud83d\udc4c good abstractin'. heh. We could even go further and just use the contract name (contract name is the correct form for artifacts.require)\nsuggestion\n      const Migrations = resolver.require(\"Migrations\");. looks good!. Could we make relay.trufflesuite.com first?. Adding this here now suggests to me that maybe we should move all of the compilerRoots stuff to VersionRange, since that's the only place where it's used.. (And if we move it to VersionRange then we don't need the argument here). Do we need this to be duplicated here?. I think we should make the 0 be the default value for the argument, so we don't need to change the interface for that method.. (Same as above: can we move relay.trufflesuite to the top?). Here's an idea: what do you think about making actions.ADVANCE just optionally take an argument for the number of steps to advance? This way we won't need the extra action/saga/etc.. > would they still call advance, but with an argument?\nDefault values for arguments would solve this concern.\nI see the argument for having a separate action, but I'm not sure that advance(n) is any less primitive than advance(1)? At least in the controller.\nAnyway my opinion isn't too strong here; I just think it's cleaner to modify advance rather than make a new action. But I leave it up to you to decide what you prefer.. options here is config I believe. Probably better to just do an expect.options on the things you need.. I miss C. Space here is kind of limited, hard to describe this feature clearly in the help like that.\nI was trying to find a way to describe it by way of example, but I'm coming up short. Maybe we can just remove it? Or maybe you have other ideas.\nMy main concern is mostly that the following (p) print instruction note is harder to spot:\n\n. This will probably benefit from being in its own package. truffle-events?. This will get typed a lot. Can we just call it emit()?. Could we just add this logic to truffle-config as a default value? The event manager will be more useful if it's automatically everywhere, anyway.\nThere's some trickiness around this, because it will mean we have to handle cases like using config.with() to override logger or quiet, e.g.: https://github.com/trufflesuite/truffle/blob/cbd741b40696d6f7f6053ae007e1fdfb22483237/packages/truffle-core/lib/test.js#L155-L161\nBut this should be easy enough to handle.. (Case for point above about centralizing the event manager in the config: we'd be able to remove this and the import on L55). \ud83d\ude4c The work in this PR is going to bring so many of these red blocks of code. (Same comment as previous). I feel like calling it options is clear enough?. Alternatively, we could just maintain consistency and say that Reporters always get a truffle-config object.\nThen all the listener bindings can just do config.eventManager.on(\"...\", ...). This comment probably belongs someplace more general, but I guess I'll pick on this spot.\nThis block of code, this whole module, all the similar modules that encapsulate the listener setup and the reporting behavior... having these laid out all in a PR like this is foundational. Thank you for taking the time to write this initial implementation @eggplantzzz; this code and whatever it becomes is going to teach us many lessons.\nThis feels like our primary resource in designing/validating the entire \"subscribe\" side of the eventing system. It shows off actual usage when it comes to building a reporter; we can plainly see this new, emerging, external interface to Truffle. If we do our jobs right, there will be thousands or even tens of thousands of files like this one, each of them carving out\u00a0its own little window into Truffle's operations.\nI'll quit with the oratory and summarize: getting this right feels both to be of substantial importance and to pose a significant challenge.\nTo start with some thoughts about design:\n\n\nEncapsulating subscription and handling: yes! I like that these modules define the handling behavior as well as hooking them up as listeners.\n\n\n.on()s/.bind()s for days: intimidating! That's a lot of manual set-up we're requiring, and it's all the same, everywhere!\n\n\nThese .on()s are very far away in the code from the corresponding handler methods! It's hard to look at this collection at a glance and see how things connect. Can we find a way to make an object of event names? Something along the lines of: \n  javascript\n  {\n    \"compile:startJob\": (data) => { /* ... */ },\n    /* ... */\n  }\n  Since that could more succinctly represent the important distinctions.\n\n\nMagic strings! I strongly urge us to avoid using string literals for these event names. They are risky, difficult to change, and afford no protection against typos.\n\n\nMoreover, this whole file relates to /^compile:/. Can we make it possible to avoid having to write this everywhere? I was sketching out something like this, but it's difficult to make it not-ugly:\n  ```javascript\n  module.exports = defineListeners(\"compile\", {\n    \"startJob\": () => {\n      this.logger.log(\"Starting compilation...\");\n    },\n/ ... /\n  });\n  ```\n  I recognize that this is at odds with the point about magic strings. Was looking for a way to exemplify both in one example, but it's tricky and I've already been at it for an hour.\n\n\nCan we avoid passing options to every handler? Can we just turn options into this? (This might add complications the design...)\n\n\nAnyway, these are just some of my initial thoughts. Hopefully they are useful to the discussion.. I'm convinced!. Another idea (not very considered): what about regex/globbed event listeners?\njavascript\ndefineListeners(\"compile\", {\n  \".*\": (data, event) => { console.log(\"event %s\", event) }\n});. Another question: how does initialization work for common things across methods (e.g. logger)\njavascript\nmodule.exports = defineListeners({\n  namespace: \"compile\",\n  initialize: (config) => {\n    this.logger = config.logger || console\n  }\n}, {\n  \"startJob\": () => {\n    this.logger.log(\"start job\")\n  },\n  /* ... */\n});. (I don't think we should change this from 4447 just because of MetaMask. We can work with them to get a better solution). To avoid dual-wielding concurrency mechanisms, you can get around this pretty easily:\nFirstly, remove the done argument and instead wrap the whole function with a util.callbackify()\nsuggestion\n  runConsole: util.callbackify(async (config, ganacheOptions) => {\nThen, anywhere done is used in the function, either return directly (for success) or throw directly (for error).\nThis preserves the external callback interface while giving us all the benefits of await. sp. descendents. wait it appears I have been wrong for a long time. descendant is the noun?. You can make this work the way you had it by using dynamically generated selectors, \u00e0 la evm.current.state or trace.current.step I think. (I think it's a good idea to do it this way, to avoid the need to memoize/load the entire allocations object when you only need part of it). Think it's worth a comment somewhere explaining why next vs. current in the contexts where that distinction matters? (since it's harder to go look up the PR description vs. something in the code somewhere). Maybe we should update the forEvmState function to accept allocations option to match the object here.\nOf course... that's a decoder breaking change unless you ensure backwards compatibility to respect storageAllocations. Following up from above: it might be worth turning this into a dynamic selector that has subselectors for each of the properties. This way it can be more flexible and you can select individually or in aggregate.. Probably worth a comment saying how this doesn't matter now but will in the future. Is this different than calldata? I've always considered calldata to be its own noun.. Whoa how'd that get in there. (Another spot to change if you agree re: dynamic subselector thing). ah yes, \u2205, the null puke. This short-circuits!. Nah I realized that's what you meant by \"it vomits\". It just surprised me to see.. Ah cool yeah that's valid. suggestion\n  logger.log(`Web3.js v${web3pkg.version}`);. h/t eslint. I would slightly prefer to see legacy and quorum grouped into some kind of overrides bucket, maybe just overrides. To avoid cluttering the namespace.\nBut the preference is \"slightly\" because the artifacts format has an expiration date. Thoughts? \"Not worth the time to do it\" seems like a valid argument here, but I'm hoping to avoid that fallback wherever possible in our reasoning through this PR.. Huh. This addition definitely needs to get onto develop!. I like where this is going. Could we start new packages at v0.1.0? I like getting freebie breaking changes with minor versions.. gotta catch 'em all. nice catch!. I think these options canonically belong in the config at the network level... something like:\n``javascript\nmodule.exports = {\n  networks: {\n    \"development\": {\n      quorum: true, // also implieslegacy: true`\n      / ... normal network config ... /\n    },\n/* ... other networks, some/all quorum ... */\n\n},\n/ ... rest of config ... /\n}\n```\nWe could still keep these as CLI flags to override the particular command run, but I feel like putting these in the proper namespace means it will be more graceful to deprecate them later.. But please consider my premise to be just a postulate about what is the correct canonical location for this information. I have questions about what differences there are, e.g. when writing tests, when targeting different networks? Is it unthinkable to have a Truffle project that uses more than one type of network?\nOne note in support of this view: even if users are unlikely to span Quorum and a public Ethereum network with a single project, it seems reasonable that users would want to target both Ethereum and Ethereum Classic, which would potentially require different compiler EVM settings and such.. I really like not having to set the provider manually here.. Oh hey this is a nice way to identify all the places where we need an interface abstraction! Anywhere we need web3 itself and not a web3Shim, that's something to keep in our sights!\nWe're gonna need a better name than web3Shim I fear.. (Continued point from comment above in this file: this is the sort of thing that seems like it needs to be at the adapter layer, not added for convenience locally.). (But not saying it needs to change in this PR. Just a pattern to look for later.). This comes from the CLI argument, right? The one I allege to live canonically at the network level? As opposed to the one in the artifact, which just doesn't make sense in this context.\n(I suppose my comment here serves to provide evidence for the value of putting these flags in the right namespace.). Cool, this change is pretty clean!. I love me a good shim. So much utility! It's beautiful.\n. Can we make this \"0.1.0\"?. Looks like wrapLegacyProvider is no longer used anywhere. I think we can delete it.. I don't think the last bit about legacy web3 provider is true anymore? (I'm assuming this code used to reference that wrapLegacyProvider function). We can probably skip these indexes for the time being because they're not primitive types and that makes it harder to reason about what that index actually means.\nIf we find ourselves looking up Compilation by source or by contract type, we can always add this again later.. suggestion\n    input CompilerInput {. suggestion\n    input CompilationSourceInput {. suggestion\n      compiler: CompilerInput!. suggestion\n      sources: [CompilationSourcesInput!]!. suggestion\n    input CompilationsAddInput {. suggestion\n      compilations: [CompilationInput!]!. suggestion\n    type CompilationsAddPayload {. suggestion\n      compilations: [Compilation!]. suggestion\n      compilationsAdd(input: CompilationsAddInput!): CompilationsAddPayload. suggestion\n      compilationsAdd: {. suggestion\n          workspace.compilationsAdd({ input }). These explicit checks are definitely technical debt, but I support acquiring this debt right now. Very nicely judicious!. I think using the word cache here is a bit ambiguous. Maybe we could call this the \"user config directory\"? Or we could make this less general and just make the method getCompilersCacheDirectory. Thoughts?. My thinking here is predicated on my sense that the word \"cache\" implies something that can be deleted without losing information. E.g., the compilers are cached because they can be redownloaded. I would say that the user config isn't cached because if it's deleted, it can't be recreated automatically.\nBut I may be defining \"cache\" too specifically in my head, so I'd love a second opinion.. both those sound good!. I think Config should know about the \"truffle data directory\", but the supplier manages the compiler cache itself. Favor composition over inheritance, no? Why extend Web3?. We can just remove these lines I think if we're not using the results.. We don't need this either, right?. (TODO what?). (Risky move, calling a software component temporary!). I like to sign and date these sorts of comments so I can save someone the trouble of git blameing me in the future.. Why bignumber.js instead of BN.js? We really should avoid multiple high-precision number libraries.\nI know truffle-contract already has the bignumber.js dependency, but that is only for compatibility reasons, to enable MyContract.numberFormat to give BigNumber return values.. Ooh let's just make this unbox:failed or something. I like the idea of standardizing on :start, :end, :fail, etc... maybe use :success also? No strong opinion on specifics there.. If we go with standardizing on verbs like start and finish, then \"job\" becomes redundant... the entirety of \"compile\" is between compile:start and compile:finish (or compile:error)... profiling happens during that process and would be between compile:profile:start and compile:profile:finish.\nIf we furthermore stick with only imperative mood, it's shorter to type and consistent: compile:profile:warn, etc., and then easier to understand at a glance when looking at a streamed list of event names.. A hacky way to do it might be:\n``javascript\nlet decimal; // decimal to convert\nlet maxPrecision; // upperbound on significant figures\nlet numerator;\nlet denominator;\nconst sigfigs = Math.min(\n  decimal.toString().length - 1, // length less one because.`\n  maxPrecision\n);\ndenominator = Math.pow(10, sigfigs);\nnumerator = decimal * denominator;\n```\nI strongly urge you to hack your way away from using bignumber.js for this case. Don't let decimals stop you when there are large powers of ten to be wielded.. Wait so we're planning on replacing this entirely? I thought we were going to continue morphing it to meet our needs.. Could we make this new second argument an \"options\" and use the whole solc compiler config for input?\nSomething like:\njavascript\nmakeSolidityDeployedAddressesLibrary: function (\n  mapping,\n  { solc: { version } }\n) { /* ... */ }?\nThis way it can just be passed wholesale, and testsource.js wouldn't have to know what specific information it is that deployed.js needs.\nIf future versions of Solidity affect this file, the change will be self-contained here. And we don't really have a need to generalize what's different in different versions, so there's no need for it to be outside DeployedAddresses for the time being.. I like this name. Could we make this take and return a value? It looks weird, we're not writing BASIC anymore :D . This isn't necessary? I thought it was necessary because we do docker pull and such.. You should turn on your editor settings to automatically add new lines at the end of files :). PascalCaseForInputsAndTypes :D . AlsoPascalCaseHere :). (L112 to here: PascalCase). space after :. space after :. let's deprecate it, then! we don't have a data.next.node, right? We can just make that selector and use data.next.scope to be a deprecated alias.. ",
    "TrySpace": "Secondly, when I try changing the app.js of one instance to use account[1]. It will show 0 meta, correct.\nBut I would expect when I transfer x amount of META from the other client (account[0]) to this second address, it should receive it? But this does not happen, or at least does not show up in the other account. It's still 0\nI do see the testrpc receiving a eth_sendTransaction though..\n. ",
    "andylockran": "I think you need to create a new contract object, at the moment you're just referencing a contract definition:\nCan you share the source to the two files?\n. ",
    "joeykrug": "\n\nserpent mk_full_signature does this, for external contracts serpent mk_signature makes a simpler signature\n\n\nDunno about this. \n\n",
    "etse": "Found the solution, it was waiting for the contract to be created. Since I was running my own private blockchain there was noone mining - and this it was halting (as noone mined the transaction creating the contract). Turning on a miner in geth solved my problem.\n. ",
    "ethernian": "Is it possible to use the feature right now? As patched or in development truffle version?\n. ",
    "sponnet": "I got this to work in the latest dev version of Truffle ( sudo npm install -g https://github.com/ConsenSys/truffle) using a eth-lightwallet + hooked-web3-provider.\nThis allows you to create and sign the transaction locally - and use any RPC-enabled Ethereum node to send the transaction to the network.\nI first created a wallet locally using eth-lightwallet and serialized it to a file wallet.json.\nThen I modified my truffle.js as follows :\n```\n  var lightwallet = require('eth-lightwallet');\n  var HookedWeb3Provider = require(\"hooked-web3-provider\");\nvar contents = JSON.stringify(require('./wallet.json'));\n  var global_keystore = lightwallet.keystore.deserialize(contents);\nglobal_keystore.passwordProvider = function(callback) {\n    console.log('PWD requested...');\n    callback(null, 'test');\n  };\n// get the first account in this wallet\n  var account = global_keystore.getAddresses()[0];\n  console.log('Main account is ', account);\n// create the provider\n  var provider = new HookedWeb3Provider({\n    host: 'http://1.2.3.4:8545',\n    transaction_signer: global_keystore\n  });\nmodule.exports = {\n    build: {\n      \"index.html\": \"index.html\",\n      \"app.js\": [\n        \"javascripts/app.js\"\n      ],\n      \"app.css\": [\n        \"stylesheets/app.css\"\n      ],\n      \"images/\": \"images/\"\n    },\n    verbose: true,\n    rpc: {\n      provider: provider,\n      verbose: true,\n      from: account\n    }\n  }\n```\nIn addition to what @tcoulter said, note that the provider and account properties need to be inside the rpc configuration tag.\n. ",
    "zlatinov": "If you want Truffle to pack everything in app.js, you must have it defined with this exact name - \"app.js\".\nhttp://truffle.readthedocs.io/en/latest/getting_started/build/\n\nSpecial note: If you want the default builder to bootstrap your application on the frontend, make sure you have a build target called app.js which the default builder can append code to. It will not bootstrap your application with any other filename.\n. \n",
    "tomusdrw": "The spec says how to encode output data: https://github.com/ethereum/wiki/wiki/JSON-RPC#output-hex-values but doesn't specify input format anywhere. Examples show DATA prefixed with 0x though.\n. It was already updated since then, I was also told that geth will become stricter in terms of accepted formats.. ",
    "rohithpr": "@tcoulter - Having a regular backend could definitely be useful since you don't want all interactions to happen on chain. Or maybe I'm missing something and you could shed some light on it.\nLet's say you have a dapp that implements a standard buy-sell escrow contract. Wouldn't it be better if you could negotiate prices with the seller off chain, or any kind of communication really, and then place the final order using the contract? You don't want to be spending gas for discussions.\nYou could have a REST API on another server and use responses from there but it'd be great if there was an option to do this straight from truffle.. This issue is the only relevant search result for \"truffle backend\" so I'm leaving this example here, in case anyone stumbles upon this:\n```\nvar contract = require('truffle-contract');\nvar Web3 = require('web3');\nvar provider = new Web3.providers.HttpProvider('http://localhost:8545');\n// pass provider as an argument to use web3.eth.accounts etc.\nvar web3 = new Web3(provider);\nvar fs = require('fs');\nvar SilverCoin = contract(JSON.parse(fs.readFileSync('build/contracts/SilverCoin.json', 'utf8')));\nSilverCoin.setProvider(provider);\nfunction getBalance (callback) {\n    SilverCoin.deployed().then(function(instance) {\n        instance.balanceOf.call(web3.eth.accounts[0]).then(function(balance) {\n            callback(balance.valueOf());\n        });\n    });\n}\nvar http = require('http');\nhttp.createServer(function(req, res) {\n    getBalance(function(balance) {\n        res.writeHead(200, {'Content-Type': 'text/html'});\n        res.end(String(balance));\n    })\n}).listen(8000);\n```\nnpm run build bundles your files and saves them to build/ (build/app.js for example) and you can serve this to the browser through whatever framework you're using for the server.. ",
    "oculushut": "Ah OK - I did not realise that this is was how the documentation was supposed to be viewed.  The first thing I did was review this documentation online - on the GitHub website.\nI added the .md extensions as this made the links work when viewing via the GitHub website.  Perhaps others will do the same as me and try to read via the GitHub website initially before committing more time?\nGreat repo by the way.  Appreciate the time you have put into this!\n. ",
    "hasanqusay": "I fixed  by installing node 5.x\n. ",
    "p14n": "Added in https://github.com/trufflesuite/truffle-core/pull/6. I'd like this functionality but I don't see the output above - and I can't find a reference to the --tests flag in the code.  Tests don't get re-run for me.. I added a PR to address this but it's been closed a few days ago - apparently watch is being removed.  I don't really understand the reasoning behind that.\nhttps://github.com/trufflesuite/truffle/pull/425. @olegwn Cheers.. ",
    "fyrchik": "@p14n seems like that PR is in archived repository and was not merged in core. Do you have plans on submitting a new one here?. ",
    "xitter": "Submitted https://github.com/trufflesuite/truffle/pull/1232. @gnidan Added PR https://github.com/trufflesuite/truffle/pull/1238 for adding this as an option in truffle-core.. ",
    "parkinsonj": "@gnidan when will this be released on the npm version of truffle?. ",
    "moranthomas": "I got this issue too..\nSo I had tried to upgrade the MetaMask Chrome plugin and it was in the process of doing that - So MetaMask was enabled and was trying to connect to the local blockchain on port 8545.\nRemoving MetaMask from Chrome did the trick (and later I re-installed the upgraded version) . ",
    "rjl493456442": "the return value is a transaction id if the function is Transaction Type.\n. ",
    "maraoz": "That error isn't very useful. \nHave you tried using geth in testnet mode first?\n. @netusco yes. IMO the dafault behavior should be calling the function as read-only, and the call that creates a transaction (pretty big side effect) should require a bit more work. \nNice catch on the ;, I'll edit now.\n. @tcoulter nice! That's very useful :)\nIt may be useful to update the docs to show this simpler way.\n. Looking at http://truffleframework.com/tutorials/package-management\nI feel like a better interface to import \"example-truffle-library/contracts/SimpleNameRegistry.sol\"; could be from \"example-truffle-library\" import SimpleNameRegistry;\nor just import \"example-truffle-library/SimpleNameRegistry.sol\";, removing the contracts and assuming we're looking there for contracts, by convention\n. works!. We're also having these problems with OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/issues/209\nThere have also been reports on slack. \nIs there anything we can do to prevent this from happening? We might have to move back to npm if this keeps being an issue :(\ncc: @frangio. We just published a new version (v1.0.5) to ethpm. Let's see if this solves the problems @tcoulter. . It didn't. We'll have to revert to npm :(. Yes, we had versions 1.1.0 and 1.2.0 on npm and wanted to update ethpm, and started with 1.2.0. @pipermerriam sounds good! thanks for the heads up :). ",
    "maxweng": "I've upgraded to 2.0, and managed to migrate and deploy on Testrpc without problem. Then failed miserably in trying to do the same thing on my local geth node. The error msgs are: \n\nError encountered, bailing. Network state unknown. Review successful transactions manually. invalid address.\n. And I'm sure my geth node is running fine, as I can log in to it with geth attach, and successfully run some web3 commands.\n. Figured it out. I didn't specify the default account when deploying contracts. But I think maybe, we can have a clearer the error message to point to the right direction?\n. @mengjiaqi works like a charm. Thanks!. \n",
    "BlockChange": "@harlantwood That's weird and unexpected behaviour.\nI eventually got it to work by following this: http://tech.lab.carl.pro/kb/ethereum/testnet_setup\nAnd I suspect because I made a new user for that, it was something in the homefolder, like .ethash that was not right.\n. ",
    "shayanb": "They are all listed there, it might have something to do with oraclizeAPI.sol\n. @prashantpawar I bypassed that error by changing oraclizeAPI.sol file name to usingOraclize.sol and it seems to be working now. I'll update it when I'm done testing.\nthis error message gave me the hint that truffle is looking for a contract with the same name as the file name\n```\nCompiling oraclizeAPI.sol...\nError compiling:\nCould not find expected contract or library in 'oraclizeAPI.sol': contract or library 'oraclizeAPI' not found.\nCompiliation failed. See above.\n```\n. +1\n. nvm, the issue was low balance on the owner address. \n. +1\n. ",
    "prashantpawar": "Same problem, oraclizeAPI.sol included too\n. Just saw Solidity 2.0, haven't tried it yet, but I assume this issue should be solved now since now there is a proper parsing of Solidity files. Will report after trying 2.0\n(Funny story, I have been writing Solidity parserr in PEG.js myself trying to solve this problem: https://github.com/prashantpawar/truffle/blob/feature/better_parsing_of_imports/lib/solidityparser.pegjs, good thing you guys beat me to it)\n. Nevermind, not an issue.\n. Yeah it took me some time to figure out that I need to migrate even as the first deployment.. ",
    "dax-classix": "I'm experiencing the same problem with Truffle 2.0.8 using geth --dev 1.4.11 & miner.start(1).\nHowever tests are passing with testrpc 2.2.4.\n. ",
    "cupuyc": "Same issue happens for me with private miner with geth or ethereumJ node.. ",
    "sarbogast": "Same thing still with Truffle 2.1.1. This issue should really be reopened.. If you restore the Metamask vault from the default seed phrase used by Truffle, doesn't it create a huge security problem when you create new accounts from Metamask on the main net? Anyone would be able to find the private key for this account, wouldn't they?. There definitely is an issue with the way Truffle console parses contract function calls. \nHere is a simple project (https://d.pr/f/AwkhIa) that you can migrate to Ganache with: \ntruffle migrate --compile-all --reset --network ganache\nThen:\n$ truffle console\ntruffle(ganache)> ChainList.deployed().then(function(instance){app = instance;})\ntruffle(ganache)> app.sellArticle(\"iPhone 7\",  \"Selling in order to buy iPhone 8\",  web3.toWei(3, \"ether\"),{from: web3.eth.accounts[1]})\nTypeError: Cannot read property 'match' of undefined\n    at TTY.onread (net.js:597:20)\n    at ReadStream.Readable.push (_stream_readable.js:208:10)\n    at readableAddChunk (_stream_readable.js:250:11)\n    at addChunk (_stream_readable.js:263:12)\n    at ReadStream.emit (events.js:211:7)\n    at emitOne (events.js:116:13)\n    at ReadStream.onData (readline.js:1010:36)\n    at emitKeys.next (<anonymous>)\n    at emitKeys (internal/readline.js:420:14)\n    at ReadStream.emit (events.js:214:7)\n    at emitTwo (events.js:126:13)\n    at ReadStream.onkeypress (readline.js:158:10)\n    at REPLServer.self._ttyWrite (repl.js:537:7)\n    at REPLServer.Interface._ttyWrite (readline.js:910:14)\n    at REPLServer.Interface._line (readline.js:629:8)\n    at REPLServer.Interface._onLine (readline.js:280:10)\n    at REPLServer.emit (events.js:211:7)\n    at emitOne (events.js:116:13)\n    at REPLServer.onLine (repl.js:468:10)\n    at REPLServer.runBound [as eval] (domain.js:314:12)\n    at bound (domain.js:301:14)\n    at ReplManager.interpret (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-core/lib/repl.js:119:1)\n    at Console.interpret (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-core/lib/console.js:140:1)\n    at Command.getCommand (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-core/lib/command.js:18:1)\n    at Object.Yargs.self.parse (/usr/local/lib/node_modules/truffle/build/webpack:/~/yargs/yargs.js:532:1)\n    at Object.Yargs.self._parseArgs (/usr/local/lib/node_modules/truffle/build/webpack:/~/yargs/yargs.js:938:1)\n    at Function.Parser.detailed (/usr/local/lib/node_modules/truffle/build/webpack:/~/yargs-parser/index.js:761:1)\n    at parse (/usr/local/lib/node_modules/truffle/build/webpack:/~/yargs-parser/index.js:125:1)\ntruffle(ganache)> app.sellArticle(\"iPhone 7\", \"Selling in order to buy iPhone 8\", web3.toWei(3, \"ether\"),{from: web3.eth.accounts[1]})\n{ tx: '0xf6544b02f37541f991b9d42e715d2c5cd76a6da94cf3e6a1856e52c5dc53e4d0',\n  receipt: \n   { transactionHash: '0xf6544b02f37541f991b9d42e715d2c5cd76a6da94cf3e6a1856e52c5dc53e4d0',\n     transactionIndex: 0,\n     blockHash: '0xc98649f0c70842aefa74d62815d5df45d7b49ba2ee54ded27b3713132db4c45c',\n     blockNumber: 45,\n     gasUsed: 127451,\n     cumulativeGasUsed: 127451,\n     contractAddress: null,\n     logs: [],\n     status: '0x1',\n     logsBloom: '0x},\n  logs: [] }\nNotice how, in the first attempt, there are 2 spaces after each parameter passed to the function. And in the second call, there is only one space. That's the only difference, and it seems to me like it should not be a meaningful one. The workaround is easy, but still, I think a little more permissiveness can't hurt here.\nBy the way, I reproduced that with Truffle 4.1.14, but my students seem to have that issue with Truffle 4.0.4 and 4.0.7 too.. I agree. And maybe the truffle version command should show which version of web3 Truffle uses internally so that we can be sure to use the same version of web3 in a web client as the one used in tests for example.\n. @gnidan Did you release the new version of Truffle Contract?. Thanks @gnidan ! It seems to have solved this issue. \nI seem to hit another wall with web3 returning undefined accounts (another issue), but just to be sure, which version of web3 does truffle-contract.js embed?. @gnidan After verification, if I don't add the script tag to my HTML page to explicitly load the web3 library I have locally (in version 1.0 beta 37), when I create a Web3 instance it is in version 0.20.3. My guess is that the Web3 library embedded is superseded by the one exposed by Metamask.\nBut if I explicitly add the script tag to load web3 on my own like I used to, the Web3 object I create is in the right version. . Yes, it's good. Thanks.. Indeed this worked. But forcing people to reinstall their whole development environment because Truffle or one of its dependencies doesn't work with NPM installed a certain way seems a bit extreme, doesn't it?. Nevermind, the project was private so it really didn't exist. I still wish truffle would have let me know about that, but I found the problem and it works now.. ",
    "fox000002": "The same problem with Truffle 2.1.1 and geth 1.5.4-stable. . ",
    "Jacob-H5": "Same with Truffle 3.1.9 and geth-1.5.9-stable. Running against TestRPC is working fine. Should be reopened.. ",
    "omarsiddiqi": "I am having the same issue truffle v3.1.2. When i deploy using testrpc the library linkage works without any issues. When i deploy using a pvt geth network it doesnt work even though the deployment works without any issues. . ",
    "zihehuang": "For those of you that uses a private net geth for development, configure your genesis block as follows: \n{\n    \"config\": {\n            \"homesteadBlock\": 10\n    },\n    \"nonce\": \"0\",\n    \"difficulty\": \"0x20000\",\n    \"mixhash\": \"0x00000000000000000000000000000000000000647572616c65787365646c6578\",\n    \"coinbase\": \"0x0000000000000000000000000000000000000000\",\n    \"timestamp\": \"0x00\",\n    \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"extraData\": \"0x\",\n    \"gasLimit\": \"0x2FEFD8\",\n    \"alloc\": {}\n}\nThe key point here is the homesteadBlock, which enables certain features including DELEGATECALL, which is what libraries are dependent on. \nHomestead block is by default set to 1.150.000. This would explain why truffle works with testrpc but not with a private chain. \nSource: https://blog.ethereum.org/2016/02/29/homestead-release/\n. ",
    "Schaeff": "This was actually in 2.0, never happened in 1.x. Toggling comment back and forth seems to fix the bug, which makes it sound like it's not deterministic. I'll try to reproduce.\n. ",
    "tkeber": "This happens to me as well with Truffle v2.0.4, e.g. with this contract\ncontract Test {\n    function testSol() returns(address addr) {\n        // if (true) {\n            addr = msg.sender;\n        // }\n        return addr;\n    }\n}\nlooks like the culprit is the closing curly bracket in line 5.\n. sorry, didn't expect you to read this and react so quickly. I looked at my example again and got confused, so I deleted my last comment, to build a sample case. I'm just building an example project. Hold on.\n. Here is the sample project.\ntruffle-243.zip\nThis is what I do to show my point: I modified the tests to instantiate new contracts instead of using the deployed ones, so I skip the migration step.\n```\nunzip truffle-243.zip\ncd truffle-243/\njust to make sure both contracts get compiled\ntouch contracts/*\ntruffle compile\nI expect both tests to pass\ntruffle test\nnow change the implementation of the imported contract A\nsed -i -e's/\"A\"/\"XXX\"/' contracts/A.sol\nnow both test should fail\ntruffle test\ntest for contract B passed, but it should have failed\n```\nFor the last test contract B didn't get recompiled, but it should have, as the imported contract A was modified.\n. when I remove build/contracts/B.sol.js, the test compiles B on the fly, so the result is a expected.\n. FYI; I had this as well and solved it in the angular controller by postponing everything that needed web3 (like loading accounts) to after document ready:\n```\napp.controller('indexController', function($scope, web3Service) {\nvar init = () => {\n    web3Service.getAccounts().then(function (accs) {\n        $scope.accounts = accs;\n    }, function(err) {\n        console.log(err);\n    });\n};\nangular.element(document).ready(function () {\n    init();\n});\n```\n. I saw this as well on ubuntu with /home and /tmp in different partitions.\nsimple workaround is to set the TEMP env var to a directory in the same partition as your project, e.g.\nTEMP=~/tmp truffle init\n\n. ",
    "chatch": "i'm seeing this also. replacing //  with a /*    */ comment works around it.\ni tried running the solidity-parser directly on the contract but it appears to parse fine. so maybe truffle is changing something before feeding it to the parser?\n. ok actually it does happen calling solidity-parser directly if parsing 'imports' as per truffle/lib/profiler.js:137:\nvar imports = SolidityParser.parse(body, \"imports\");\nI've created an issue here https://github.com/ConsenSys/solidity-parser/issues/7\n. I just tried this again with the MetaCoin example and this time I got to the final contract which deployed (looking at the etherscan.io tx i could see) however migrate exited with \"wasn't processed in 240 seconds!\".  \ntruffle migrate output is here: \nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  Migrations: 0x5f18cd26e3f76576f127244cd009eff86793b596\nSaving successful migration to network...\nSaving artifacts...\nRunning migration: 2_deploy_contracts.js\n  Deploying ConvertLib...\n  ConvertLib: 0xf165a84782395c6a666d7a4426f6d02920cbdd5c\n  Linking ConvertLib to MetaCoin\n  Deploying MetaCoin...\n  MetaCoin: 0xb1547483c16ee5fd498cdafc77162fd5dda51dd3\nSaving successful migration to network...\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: Transaction 0x0000000000000000000000000000000000000000000000000000000000000000 wasn't processed in 240 seconds!\n    at Object.callback (/tmp/testmig/build/contracts/Migrations.sol.js:113:33)\n    at /usr/local/lib/node_modules/truffle/node_modules/ether-pudding/node_modules/web3/lib/web3/method.js:142:25\n    at /usr/local/lib/node_modules/truffle/node_modules/ether-pudding/node_modules/web3/lib/web3/requestmanager.js:89:9\n    at request.onreadystatechange (/usr/local/lib/node_modules/truffle/node_modules/web3/lib/web3/httpprovider.js:114:13)\n    at dispatchEvent (/usr/local/lib/node_modules/truffle/node_modules/xmlhttprequest/lib/XMLHttpRequest.js:591:25)\n    at setState (/usr/local/lib/node_modules/truffle/node_modules/xmlhttprequest/lib/XMLHttpRequest.js:610:14)\n    at IncomingMessage. (/usr/local/lib/node_modules/truffle/node_modules/xmlhttprequest/lib/XMLHttpRequest.js:447:13)\nI'll try this again and see if I can figure out what's happening.\n. Good to know --verbose-rpc. Nice.  So Parity is indeed returning 0x0000000000000000000000000000000000000000000000000000000000000000\n See attached truffle_migrate_verbose_rpc.txt\nI'll try sending some tx's directly to Parity and see if I can replicate it.\n. possibly Parity is rejecting the transaction somewhere even though it appears to be accepted in Parity Tx Signer UI .. not sure. anyway it's not a truffle issue so closing..\n. This is an issue with truffle v4 also. Invocation different but same result:\n```\n\ntruffle develop\ntruffle(develop)> test test/feeds.js\n\nError: Could not find artifacts for ./helpers/FeedsClient.sol from any sources\n    at Resolver.require (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:63556:9)\n```. ",
    "vadimuvin": "I'm running truffle 2.0.4. It was fixed for truffle migrate command, but not for truffle test. Here is how it works:\n`$ truffle migrate --verbose-rpc\nCompiling Registrar.sol...\nWriting artifacts to ./build/contracts\n\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_accounts\",\n  \"params\": [],\n  \"id\": 1\n}\n <   {\n <     \"jsonrpc\": \"2.0\",\n <     \"id\": 1,\n <     \"result\": [\n <       \"0xd4aa85f84dc132be2203c53b53e67f17ed06219e\",\n <       \"0x41e1603d32eedeb352c8c92e8f065832285535d4\"\n <     ]\n <   }\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_sendTransaction\",\n  \"params\": [\n    {\n      \"from\": \"0xd4aa85f84dc132be2203c53b53e67f17ed06219e\",\n   >       \"gas\": \"0x1e8480\",\n      \"gasPrice\": \"0x174876e800\",\n      \"data\": \"0x606060405260008054600160a060020a0319163317905560f7806100236000396000f3606060405260e060020a60003504630900f01081146038578063445df0ac1460b05780638da5cb5b1460b8578063fdacd5761460c9575b005b60366004356000805433600160a060020a039081169116141560ac576001547ffdacd5760000000000000000000000000000000000000000000000000000000060609081526064919091528291600160a060020a0383169163fdacd5769160849160248183876161da5a03f1156002575050505b5050565b60ed60015481565b60ed600054600160a060020a031681565b603660043560005433600160a060020a039081169116141560ea5760018190555b50565b6060908152602090f3\"\n    }\n  ],\n  \"id\": 1\n}`\n\nNote that \"gas\" and \"gasPrice\" are present in the sendTransaction call. Now with truffle test:\n`$ truffle test test/registrar.js --verbose-rpc\n\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_accounts\",\n  \"params\": [],\n  \"id\": 1\n}\n <   {\n <     \"jsonrpc\": \"2.0\",\n <     \"id\": 1,\n <     \"result\": [\n <       \"0xd4aa85f84dc132be2203c53b53e67f17ed06219e\",\n <       \"0x41e1603d32eedeb352c8c92e8f065832285535d4\"\n <     ]\n <   }\n\nContract: Registrar\n\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_accounts\",\n  \"params\": [],\n  \"id\": 2\n}\n <   {\n <     \"jsonrpc\": \"2.0\",\n <     \"id\": 2,\n <     \"result\": [\n <       \"0xd4aa85f84dc132be2203c53b53e67f17ed06219e\",\n <       \"0x41e1603d32eedeb352c8c92e8f065832285535d4\"\n <     ]\n <   }\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_sendTransaction\",\n  \"params\": [\n    {\n      \"from\": \"0xd4aa85f84dc132be2203c53b53e67f17ed06219e\",\n      \"data\": \"0x606060405260008054600160a060020a0319163317905560f7806100236000396000f3606060405260e060020a60003504630900f01081146038578063445df0ac1460b05780638da5cb5b1460b8578063fdacd5761460c9575b005b60366004356000805433600160a060020a039081169116141560ac576001547ffdacd5760000000000000000000000000000000000000000000000000000000060609081526064919091528291600160a060020a0383169163fdacd5769160849160248183876161da5a03f1156002575050505b5050565b60ed60015481565b60ed600054600160a060020a031681565b603660043560005433600160a060020a039081169116141560ea5760018190555b50565b6060908152602090f3\"\n    }\n  ],\n  \"id\": 1\n}\n`\n\nNow sendTransaction has no gas values set, so contract does not get deployed:\n`1) \"before all\" hook: prepare suite\n0 passing (9s)\n  1 failing\n1) Contract: Registrar \"before all\" hook: prepare suite:\n     Error: The contract code couldn't be stored, please check your gas amount.\n      at Object.callback (/usr/local/lib/node_modules/truffle/node_modules/ether-pudding/node_modules/web3/lib/web3/contract.js:147:46)\n      at /usr/local/lib/node_modules/truffle/node_modules/ether-pudding/node_modules/web3/lib/web3/method.js:142:25\n      at /usr/local/lib/node_modules/truffle/node_modules/ether-pudding/node_modules/web3/lib/web3/requestmanager.js:89:9\n      at /usr/local/lib/node_modules/truffle/lib/provider.js:27:9\n      at request.onreadystatechange (/usr/local/lib/node_modules/truffle/node_modules/web3/lib/web3/httpprovider.js:114:13)\n      at dispatchEvent (/usr/local/lib/node_modules/truffle/node_modules/xmlhttprequest/lib/XMLHttpRequest.js:591:25)\n      at setState (/usr/local/lib/node_modules/truffle/node_modules/xmlhttprequest/lib/XMLHttpRequest.js:610:14)\n      at IncomingMessage. (/usr/local/lib/node_modules/truffle/node_modules/xmlhttprequest/lib/XMLHttpRequest.js:447:13)\n      at endReadableNT (_stream_readable.js:926:12)\n      at _combinedTickCallback (internal/process/next_tick.js:74:11)\n      at process._tickDomainCallback (internal/process/next_tick.js:122:9)\n`\n. ",
    "nemild": "OSS and effective communication are always tied together, for getting feedback, recruiting devs, driving usage, making sure onboarding is easy, etc. Otherwise, it's really hard to get good feedback loops and get contributors/users.\nI like the idea of making it easy to slot in any build process or frontend framework - there are a ton of projects that track what is acceptable in diff ecosystems (gulp vs webpack, react vs angular), so I think it's a good idea to offload the work on maintaining this to another repo and focus on the contract environment, which is a pretty involved job on its own - while making integration not too difficult.\nAlso, I know it might be a nice to have the Babel JS type page, but they have a lot of contributors. In the early days, it might be easy to pick 1-2 for specific examples and then give some generic examples of how to slot any others in - motivated users can always add in their framework of choice to your documentation.\n. ",
    "tomconte": "Try using truffle.cmd instead of just truffle. The CMD command-line is trying to run truffle.js which is in the current directory but this is not what you want!\n. ",
    "aniket-kumar": "Thanks a lot. It worked for me. I think it should be mentioned in their doc. :)\n. Hi Tim, Many thanks for your response !!!\nAs you have made changes regarding cmd.exe, i think if it will be mentioned in official documentation, it will be very useful for any new Windows user going to use Truffle.Whenever a new user will start work with Truffle, its official docs will be followed. So, there will not be any problem for anyone. \n. @tcoulter Yeah, it's fine to mention it in the doc. I hope this will guide users in a better way. Thanks.\n. ",
    "codywatts": "I ran into this issue, too. It would be a nice gesture to all the Windows users out there if the Truffle team would consider moving the configuration file to a subfolder, or renaming it to something other than truffle.\n. Hi Tim, thank you for your prompt attention to this issue.\nThe fix that you've provided should resolve my issue, because now I know that I can rename the file to truffle-config.js. But even with this fix in place, I'm concerned that this will still be a barrier-to-entry for Truffle users on Windows.\nConsider: If a new Windows user is following the docs, then when they run truffle compile they will still encounter the same inscrutable error. If they're tenacious, they may Google the problem and find this bug report, but they may also just get frustrated and give up.\nHave you considered swapping DEFAULT_CONFIG_FILENAME and BACKUP_CONFIG_FILENAME so that all new projects are created with \"truffle-config.js\" as the default? In theory, any existing projects would continue to work via the BACKUP_CONFIG_FILENAME mechanism, while any new projects would \"just work\" -- even for Windows users who are using cmd.exe.\nI don't have any special attachment to cmd.exe but it's kind of the de facto standard for Windows. After this, I probably will switch to using PowerShell -- but I doubt I'll be the last Windows user to try running Truffle through cmd.exe.\n. ",
    "ritave": "I'd like to say that I've actually run into this issue today, and the link in documentation that's probably pointing to this conversion is broken and for a long time I couldn't understand what wasn't working. Could we just put the info inside the documentation instead of just linking?. ",
    "gerardog": "On windows, removing '.JS' from the PathExt environment variable also solves the issue.\n. ",
    "NicolaOrritos": "@tcoulter Still having this issue on Windows 10.\nHad to rename truffle.js to truffle-config.js. Also, the links you mentioned earlier are missing (404).\nShouldn't the name of the file be changed to avoid these issues?\nFinally: I'm using a quite advanced shell, wrapping cmd.exe. This is a common scenario on Windows and I dare to say it covers the vast majority of users.. @tcoulter Nevermind, I found your additions to docs:\nhttp://truffleframework.com/docs/advanced/configuration#resolving-naming-conflicts-on-windows\nChanging the name of truffle.js is only an improvement in my opinion, not an issue anymore.\nBTW. Truffle is great!. ",
    "xavierlepretre": "In v3.4.9, I can still silently deploy to the \"wrong\" network.. Like so?\njavascript\n  rpc: {\n    host: \"localhost\",\n    port: 8545\n  },\n  networks: {\n    \"main\": {\n      network_id: 1,\n      gas: 500000\n    }\n  }\n. As you describe it, your problem is with your contract constructor.. Some of you guys have contracts that just don't deploy. Either because you have a mammoth one that has too big a bytecode or because you throw in the constructor.\nThis thread is not what you are looking for.. @NateDev100 So perhaps you can remove your comments to avoid misleading subsequent visitors.. This issue here is specifically for main net. Not just \"deployment\".. Of course, if you get an error on any net, it has nothing to do with the net, or the main net.. It looks like some people have covered it in at least one package:\n\nhttps://www.npmjs.com/package/mv\nhttps://www.npmjs.com/package/node-mv. \n",
    "netusco": "I agree with the need to find a more intuitive way to refer to non transaction methods. Are you suggesting to create explicit transaction objects or methods and use directly the rest of read-only methods without the call?\nIsn't there a chained .sendCoin method blocked by the ; ?\n. ",
    "LaurentMT": "Same problem here with truffle 2.0.4 on a windows machine.\n. ",
    "JefStat": "Same issue I run truffle from git bash and also tried powershell but I've seen truffle serve work after previously not working. As of right now truffle build fails with the same error as truffle serve\n. ",
    "tenny1225": "\nSame problem here with truffle 2.0.6 on a windows machine.\n\n$ truffle build\nError: Cannot find module 'f:workspaceethereum  estuildcontractsMetaCoin.sol.js' from 'C:\\Users\\Administrator\\AppData\\Local\\Temp'\n    at C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\truffle\\node_modules\\resolve\\lib\\async.js:46:17\n    at process (C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\truffle\\node_modules\\resolve\\lib\\async.js:173:43)\n    at ondir (C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\truffle\\node_modules\\resolve\\lib\\async.js:188:17)\n    at load (C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\truffle\\node_modules\\resolve\\lib\\async.js:69:43)\n    at onex (C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\truffle\\node_modules\\resolve\\lib\\async.js:92:31)\n    at C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\truffle\\node_modules\\resolve\\lib\\async.js:22:47\n    at FSReqWrap.oncomplete (fs.js:117:15)\n. ",
    "gauravagarwal07": "does anybody found solution of this issue ?\n. @tcoulter checkout this thread : https://github.com/ConsenSys/truffle/issues/232\n@ronazulay has suggested a solution for the problem and this fix is working for me .\n. does anybody found solution of this issue ?\n. ",
    "rsav34": "Hello,\nI am a beginner in dapp and English too.\nI have the same error but I do not know were setting the default account.\nSorry if my question seems stupid.\nThank you in advance for your answer,\nRsav\n. ",
    "omkarkhair": "@rsav34 if you are still looking, or for anyone that stumbles in here.\nYour RPC node (geth) needs to have atleast one unlocked account which can be used to create the migration contract. This account also needs to have sufficient funds to deploy the contract.\nIn case you have multiple accounts unlocked on geth, you can set the account with sufficient funds as default. You can set default using the truffle.js config file as documented here https://truffle.readthedocs.io/en/latest/advanced/configuration/.. ",
    "treeder": "New info is here btw: http://truffleframework.com/docs/advanced/configuration\nfrom console: personal.unlockAccount(\"ADDRESS\", \"PHRASE\")\n. I'm getting this too, it seems truffle assumes that every call() returns a number or something. . ",
    "DOkwufulueze": "Add the from parameter into truffle.js development field, then in your geth console, unlock the account which you gave as the value of the from key.\nFor example in truffle.js:\nmodule.exports = {\n  migrations_directory: \"./migrations\",\n  networks: {\n    development: {\n      host: \"localhost\",\n      port: 8545,\n      network_id: \"*\", // Match any network id\n      from: \"<your_address>\"\n    }\n  }\n};\n\nThen in geth console, unlock the account:\npersonal.unlockAccount(\"<your_address>\")\n\ngeth console will ask for your passphrase, supply it and return to truffle to migrate again.\nYou shouldn't have any problem.. Hi, @cristicmf.\n<your_address> is a placeholder which you should replace with the address you want to use to deploy your Smart Contracts, eg 0xabcdef1234567...\n<your_address> is usually your coinbase, but you may choose any other address that has enough funds to do a successful migration. Make sure you unlock it using the command [personal.unlockAccount(\"<your_address>\")] in your geth console.\nHope this explanation clears up my use of <your_address>. \ud83d\ude42 . From this issue, you may need to split up your contracts into smaller contracts so they get easily deployed with a gas amount that is within the block limit, as enabling solc optimizer may not be exactly what you want to do [you may begin to have bytecodes that behave differently from your source code].\nVisit the truffle release page to see security concerns associated with enabling solc optimizer.\nHope this helps.. Oh! Then the bug must be somewhere else for sure. I'll keep checking for a working solution and inform here if possible.. This issue has been discarded as this solves it.. @gnidan, thanks for the response. Yes, I deleted the build/contracts/ directory, but the error was still there.\nI have stated on gitter, my realisation that the only way to have a successful deployment is to split the contract into separate contracts. And @tcoulter has responded with news of the update on the truffle release page discussing the security concerns about turning solc optimiser on, and advising the split option if possible.\nSo for now, I'm simply using the split option, and all is well again.\nThanks again.\nI'll be closing this issue since it's resolved.. ",
    "cristicmf": "Hi @DOkwufulueze  I  can't understand the \"your_address\". thank you~ \nSo patiently explain the problem.  \ud83d\ude04  . ",
    "ceskmcfran": "If you connect with this command:\ngeth --rinkeby --rpc --rpcapi db,eth,net,web3,personal --unlock=\"<yourAddress>\"\nYou need to indicate your passphrase after that.\n. ",
    "arkoe": "A few minutes later I tried it again and it worked. However, when I run truffle serve it does kinda the same, first it starts, then aborts:\nroot@ubuntu-testvps:/var/www/html# truffle serve\nServing app on port 8080...\nAborted (core dumped)\n. ",
    "SethVgr": "@tcoulter \nI have managed to build the contract (I ran truffle compile) but am still not able to launch the test cases. Can truffle launch them automatically? \nI am not interested a.t.m. in developing the front end (for which the default styles and html files are created). \n. Thanks. I did manage to get it to work. \n. ",
    "Akshay-agarwal": "When i run truffle Migrate i am getting an error. I am not understanding this \nError: Invalid JSON RPC response: \"Error: connect ECONNREFUSED 127.0.0.1:8545\\n    at Object.exports._errnoException (util.js:1026:11)\\n    at exports._exceptionWithHostPort (util.js:1049:20)\\n    at TCPConnectWrap.afterConnect as oncomplete\"\n    at Object.InvalidResponse (/usr/local/lib/node_modules/truffle/node_modules/web3/lib/web3/errors.js:35:16)\n    at request.onreadystatechange (/usr/local/lib/node_modules/truffle/node_modules/web3/lib/web3/httpprovider.js:111:32)\n    at dispatchEvent (/usr/local/lib/node_modules/truffle/node_modules/xmlhttprequest/lib/XMLHttpRequest.js:591:25)\n    at setState (/usr/local/lib/node_modules/truffle/node_modules/xmlhttprequest/lib/XMLHttpRequest.js:610:14)\n    at handleError (/usr/local/lib/node_modules/truffle/node_modules/xmlhttprequest/lib/XMLHttpRequest.js:532:5)\n    at ClientRequest.errorHandler (/usr/local/lib/node_modules/truffle/node_modules/xmlhttprequest/lib/XMLHttpRequest.js:459:14)\n    at emitOne (events.js:96:13)\n    at ClientRequest.emit (events.js:188:7)\n    at Socket.socketErrorListener (_http_client.js:308:9)\n    at emitOne (events.js:96:13)\n    at Socket.emit (events.js:188:7)\n    at emitErrorNT (net.js:1272:8)\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\n    at process._tickDomainCallback (internal/process/next_tick.js:122:9)\n. ",
    "area": "Yeah, it does, I've been testing with a very basic test, and the exit code is zero/nonzero as appropriate based on the test failing or passing:\n```\n/ eslint-env node, mocha /\ncontract('Contract', function (accounts) {\n  describe('test', function(){\n    it('should pass or fail', function(done) {\n      assert.equal(1,2,'what did you expect');\n      done();\n    });\n  });\n});\n```\nWhen there's a failure, though, I've just noticed that the exit code seems to get printed to the console as the final output, which I haven't tracked down yet.\n. Ah, the extra output is due to https://github.com/ConsenSys/truffle/blob/master/cli.js#L20. So given that it's an error that we know about, maybe something like:\nmocha.run(function(failures) {\n  console.warn = warn;\n  if (failures){\n    return callback(new ExtendableError(failures.toString() + \" tests failed\"))\n  }\n  callback();\n});\nis more appropriate?\n. No worries, thanks for getting this merged in.\n. Now that the main branch is on 0.4.x, can this be revisited? Solidity 0.4.8 breaks contracts generated by Solcover, so it would have been nice to have this feature to force people to use 0.4.7 until 0.4.9 comes out (which won't have this problem).. Fixes #239. This implementation (at first glance) wouldn't change existing behaviour like I believe #267 does.\n. Is there any reason why this isn't being considered, or anything that can be done to improve its chances of being merged? It would really help people to use Solcover seamlessly!. This is very unintuitive behaviour, especially as it's advertised in the documentation as \n\nhas the same API as web3.eth.sendTransaction\n\nAdmittedly, this is in the section titled 'triggering the fallback function', but that requires a certain level of reading-between-the-lines to arrive at the conclusion that data is unsupported.. ",
    "zweicoder": "btw I ended up not deploying this contract and just imported it for use in other contracts, but will just log the possible bug here\n. ok thanks for the info! \n. @tcoulter Here it is. Haven't touched it in a while, but to reproduce you can try:\n1.  npm install && npm build:test \n2. truffle test test/src/CheapArrayLib.js\n3. truffle test or run 2. again.\nTell me if it doesn't reproduce / was due to some bugs in my tests!\n. @tcoulter  Indeed you are right! I made the amendments you suggested and it works fine now, thanks!\n. ",
    "DavidBurela": "During the last 2 weeks I have come across this error twice, and both times resolved it by doing a Google search and this issue comes up with the answer: \n\nCheck that you haven't accidentally made your class abstract by having a method you didn't implement\n\nMaybe the error message should be updated to give a hint towards that.\n. Might also want to check about allowing returns of structs from functions. ",
    "qjflores": "I got this error with Truffle 3.1.1 after running truffle test\nThe error message was coming from Function.new while deploying a contract through inheritance.\nThe error stopped after running truffle migrate. ",
    "vongohren": "If you have one function that is an abstract function in your contract.\nfunction addr(string _name) constant returns (address o_owner)\nThe whole contract is compiled as an abstract contract, so you will get this error message.\nIt might be like me, that you never ment to write an abstract contract, but a but fast copy pasting of some code, and simsallabim, you have some abstract functions without thinking about it.\nSo either add functions bodies to them or remove them.\nThen your contract will compile.. Any progress on this? Im trying to use 0.4.10, but my truffle is stuck on 0.4.8. Even if my solc --version is 0.4.10. ",
    "SeanAvery": "Similar issue migrating ERC20 token standard contract.\n```\ncontract ERC20Events {\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval( address indexed owner, address indexed spender, uint value);\n}\ncontract ERC20Stateless {\n    function totalSupply() constant returns (uint supply);\n    function balanceOf( address who ) constant returns (uint value);\n    function allowance(address owner, address spender) constant returns (uint _allowance);\n}\ncontract ERC20Stateful {\n    function transfer( address to, uint value) returns (bool ok);\n    function transferFrom( address from, address to, uint value) returns (bool ok);\n    function approve(address spender, uint value) returns (bool ok);\n}\ncontract ERC20 is ERC20Stateless, ERC20Stateful, ERC20Events {}\n```\nYes, this an \"abstract\" contract as the methods are not implemented. I have attempted to add my Token.sol implementation onto the same file where the ERC20 standard is implemented; However, am still getting contract binary is not set error. \nHas anyone had success migrating the ERC20 contract?. ",
    "pizza-r0b": "I get this error after updating a contract and running tests. I need to remove the build folder and recompile the contracts and then run the tests to fix.. ",
    "ronazulay": "I had this issue too and it seems to be caused by unescaped backslashes in a require() path.\nNot sure if this is the right way to solve this but this patch seems to fix the issue:\n```\n+++ include_contracts.js        2016-08-15 17:22:27.080241600 +0200\n@@ -15,7 +15,7 @@\n       Pudding.requireFile(file, function(err, contract) {\n         if (err) return finished(err);\n\ndigest += \"  \\\"\" + contract.contract_name + \"\\\": require(\\\"\" + file + \"\\\"),\\n\";\ndigest += \"  \\\"\" + contract.contract_name + \"\\\": require(\\\"\" + (process.platform === 'win32' ? file.split('\\').join('\\\\') : file) + \"\\\"),\\n\";\n         finished();\n       });\n     }, function(err) {\n```\n\nEdit:\nThis patch is against /processors/post/include_contracts.js in the module truffle-default-builder.\nSeems to be this issue: https://github.com/ConsenSys/truffle-default-builder/issues/4\n. ",
    "yubi00": "hi guys, thanks for the patch, so in which directory should i put this patch file?Thanks. ",
    "eduardonunesp": "Maybe it's because you haven't specificated that network id in your truffle.js file, take a look at http://truffle.readthedocs.io/en/latest/advanced/configuration/#networks for more information.\n. It would be cool to create some workflow to make easier to create apps using React or Angular, and making available the possible transpiling for TypeScript as well\n. @gnidan any fix for this issue? beyond the workaround? for version 4.1.15. In my case the issue happens when I tried to call a function in a token, for instance that test token inherits from StandardToken from OpenZeppelin, then I called the transfer on truffle console. After that I executed truffle debug <transaction hash>. The debugger worked, but when try to jump in the transfer function the same error described above happen.. @Nick-Lucas I assume that you are using the ganache-cli on tests? I wonder if the evm_snapshot and evm_revert makes sense. ganache-cli methods\n\nevm_snapshot : Snapshot the state of the blockchain at the current block. Takes no parameters. Returns the integer id of the snapshot created.\nevm_revert : Revert the state of the blockchain to a previous snapshot. Takes a single parameter, which is the snapshot id to revert to. If no snapshot id is passed it will revert to the latest snapshot. Returns true.. ```js\nconst saveState = async () => {\n  return await web3.currentProvider.send({\n    jsonrpc: \"2.0\",\n    method: \"evm_snapshot\",\n    id: 0\n  })\n}\n\nconst revertState = async (id) => {\n  await web3.currentProvider.send({\n    jsonrpc: \"2.0\",\n    method: \"evm_revert\",\n    params: [id],\n    id: 0\n  })\n}\ncontract('SomeContract', () => {\n  let id\n  beforeEach(async () => {\n    id = await saveState()\n  })\nafterEach(async() => {\n    await revertState(id)\n  })\n})\n```\n\nNote: I didn't test. Migrations files and mainly build directory for the development network is a little annoying for a team working on a project, maybe migrations can be by default disabled and be activated by a configuration on networks config.\n\njs\nmodule.exports = {\n    networks: {\n        development: {\n            host: '127.0.0.1',\n            port: 7545,\n            network_id: '*',\n            gasPrice: 1\n        },\n        mainnet: {\n            .\n            .\n            .\n            migrations: true\n        },\n    }\n}. @cgewecke thanks for the feedback, is possible to add another hint too? isn't the best case scenario, but to warn that the interface on MyContract and AbstractContract aren't right already helps to avoid a waste of time trying to fix gas issues :). Thanks \ud83d\udc4d . Sure, I'll test and update an example ASAP thanks @cgewecke . Thanks for the help @cgewecke, after install truffle-hdwallet-provider@web3-one it worked. That was super cool! thanks for the great PR ! @eggplantzzz . It failed for truffle unbox git@github.com:loomnetwork/truffle-dappchain-example allso truffle unbox https://github.com/loomnetwork/truffle-dappchain-example. Force https using the gist above didn't work also. Nope didn't work, does that work for you @gnidan? . Nice ! well I do prefer to use truffle-config.js (and remove truffle.js) to make sure that Windows users are fine too, I'll wait for the fix. Thanks.. ",
    "cmycaro": "I also got the same error~ the undefined thing is the contract \n`Caros-MacBook-Pro:~ caro$ truffle migrate\nRunning migration: 2_deploy_contracts.js\n/Users/caro/migrations/2_deploy_contracts.js:5\n   deployer.deploy(MyAdvancedToken);\n                   ^\nReferenceError: MyAdvancedToken is not defined\n    at module.exports (/Users/caro/migrations/2_deploy_contracts.js:5:20)\n    at /usr/local/lib/node_modules/truffle/lib/migrate.js:109:7\n    at /usr/local/lib/node_modules/truffle/lib/require.js:82:7\n    at tryToString (fs.js:455:3)\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:442:12)`. Dear Tim Coulter\uff0c\nThanks for your answer. I will have a try to know what\u2019s going on\uff01\nOriginal Message\nSender:Tim Coulternotifications@github.com\nRecipient:ConsenSys/truffletruffle@noreply.github.com\nCc:cmycaro724517447@qq.com; Mentionmention@noreply.github.com\nDate:Friday, Feb 24, 2017\u200721:26\nSubject:Re: [ConsenSys/truffle] ReferenceError: network_id is not defined(#233)\n@cmycaro Your error is very different. My assumption is you recently upgraded from Truffle 2.0 to 3.0. please see the upgrade guide here to show you how to properly pull in contract artifacts into your migrations: http://truffleframework.com/tutorials/upgrading-from-truffle-2-to-3\nIf you're still having trouble, please join the Truffle Gitter chat channel and ask your question there. Thanks!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.. ",
    "neerajsaran": "@kumavis @flyswatter it looks like when i started the basic php server and hosted the file from there then it started working, i.e. I see MM account and MM asks for password but without php server running it does not work. Before I was opening the index file from the folder directly (file://.../index.html) and now I am using http://127.0.0.1:8000/ to open the index file which solved the problem.\n\n. ",
    "petermunnings": "We need this as well\nmodule.exports = function(deployer) {\n    deployer.deploy(MyToken, \"Foo Token\");\n    deployer.deploy(MyToken, \"Bar Token\");\n  };\nhttps://gitter.im/ConsenSys/truffle?at=57a9a809ae838f6f569034c5\n. ",
    "paulhauner": "I post this comment not to dispute the need for this feature, instead to illustrate a potentially superior design which mitigates this issue.\nIf you are deploying multiple instances of the same contract, it may be in your best interest  to use the 'factory' pattern. It allows you to compile and deploy a single contract which then performs the creation of further contracts. This provides consistency among contracts and provides easier deployment and testing in truffle.\n```\npragma solidity ^0.4.8;\ncontract CarFactory {\nfunction CarFactory() {\n}\n\nfunction newCar(string _color) public returns (address newCar) {\n    Car c = (new Car(_color));\n    return address(c);\n}\n\n}\ncontract Car {\n    string color;\nfunction Car(string _color) {\n    color = _color;  \n}\n\nfunction getColor() public constant returns (string color) {\n    return color;\n  }  \n}\n``. This error is also generated if you happen to replacecontracts/Migrations.sol` with the code demonstrated here: http://truffle.readthedocs.io/en/beta/getting_started/migrations/\nThe actual Migrations.sol code generated by truffle init (on v3.2.5) is different to the code stated at the above link which does not build.. ",
    "shuppyloh": "I really think this is a good feature to have. I am trying to build a test environment that will facilitate a cross-transfer between 2 token types and ideally, I would want to deploy the 2 different token types from the same generalised token contract. I am not sure if using the factory method as suggested by @paulhauner will allow you to use contract abstractions when interacting with the newly spawned contract. What I have done so far is to make my 2 token types 2 different contracts that inherit from the same generalised token contract and deploying them explicitly.. ",
    "victorwiebe": "Following up on this feature, or what is the alternative to this approach in truffle deployment. Regards.. ",
    "yaoshiang": "My solution to this was to create a container of multiple instances in the contracts folder. For example, if you have a MyERC20Token contract, and need to have a few of them deployed... you could create a container of them: \ncontract MyERC20TokenContainer {\n  address public a = new MyERC20Token(...);\n  address public b = new MyERC20Token(...);\n}\nDeploy that in a migration script (e.g. 2_deploy_MyERC20TokenContainer.js)\nThen in your TestStuff.sol, you can grab them:\n```\nMyERC20Token tokenA = MyERC20Token(MyERC20TokenContainer(DeployedAddresses.MyERC20TokenContainer()).a());\nMyERC20Token tokenB = MyERC20Token(MyERC20TokenContainer(DeployedAddresses.MyERC20TokenContainer()).b());\n```\nI had this exact use case and now the problem is that if you are using an ERC20 library like Zeppelin... the contracts are inheriting from Ownable... and the owner of the contract is txn.origin, not, your TestStuff.sol contract. \nWhat I did is then created a child class of MyERC20Token that's solely for testing with some additional hooks. In this case, that hook is a way for your TestStuff contract to forcibly transfer ownership. So you need to implement a new function in your TestOnlyMyERC20Token to xfer the ownership to the TestStuff contract, and, call it from TestStuff. \ncontract TestOnlyMyERC20Token is MyERC20Token {\n  function forceTransferOwnership(address newOwner) external {\n    owner = newOwner;\n  }\n}\nThis is not elegant but, it's the only workaround I could figure out. . ",
    "k-misztal": "Any update on that feature? . ",
    "lychees": "+1. ",
    "alsco77": "As a workaround to (for example) deploy multiple ERC20 tokens, I have created extra OneERC20.sol and TwoERC20.sol files which inherit ERC20, and deploy as individual entities. Not ideal but whatever, it works. . I am having this same issue @reasv , can you please help me by telling me what you done to resolve this? Even the approach you took with testing?\nSolved: For anyone else - my problem as pointed out by @cgewecke was the passing of the full token object as oppose to its address. d'oh. ",
    "mryellow": "I ended up finding other solutions for my situation but one work-around I tried briefly might suit someone out there. Copies an existing artefact and hacks in network/address meta-data:\n```\nconst fs = require('fs');\nconst cor = {\n  copy: (srcName, dstName, network, address) => {\n    const srcPath = __dirname + '/../build/contracts/' + srcName + '.json';\n    const dstPath = __dirname + '/../build/contracts/' + dstName + '.json';\n    const data = require(srcPath);\n    data.contractName = dstName;\n// Save address when given\nif (network && address) {\n  data.networks = {};\n\n  // Copy existing networks\n  if (fs.existsSync(dstPath)) {\n    const existing = require(dstPath);\n    data.networks = existing.networks;\n  }\n\n  data.networks[network.toString()] = {\n    //events: {},\n    //links: {},\n    address: address\n    //transactionHash: ''\n  };\n}\nfs.writeFileSync(dstPath, JSON.stringify(data, null, 2), { flag: 'w' });\n\n}\n};\nmodule.exports = cor;\n```. One issue with the above hacky code is that it requires that a build already exists, so running in tests it gets those paths wrong and will fail unless a build directory full of artefacts has previously been created.. This issue presents alternative possible syntax.\nhttps://github.com/trufflesuite/truffle/issues/237#issuecomment-252607611\nWhich I see @tcoulter has included here:\nhttps://github.com/trufflesuite/truffle/issues/237#issuecomment-314233073\nIt could probably be closed as duplicate.. Bot closing probably not good idea. This deployment system UX can be improved.. Or.... Keep #237 and close this one?. Believe this remains an issue in 4.1.8.\n'Invalid JSON RPC response'\nSent from mobile (no connectivity).\nedit: 4.1.14 also. Debian.. It seems to be in the conversion between int256 and BigNumber. \nThe number is correct inside Solidity however incorrect in CLI event log and Javascript.\nAn off-by-one here somewhere? Gets overflowed back to the negative end of the binary?\nThis code will also duplicate, showing correct outputs in Browser Solidity but then being output incorrectly in Javascript.\n```\npragma solidity ^0.4.18; // 21 also\ncontract Test {\n    int256 constant INT256_MIN = int256((uint256(1) << 255));\n    int256 constant INT256_MAX = int256(~bytes32((uint256(1) << 255)));\nfunction getMax() public pure returns(int256) {\n    return INT256_MAX;\n}\n\nfunction getMin() public pure returns(int256) {\n    return INT256_MIN;\n}\n\n}\n```\ngetMin() = \n{ [String: '-5.7896044618658097711785492504343953926634992332820282019728792003956564819969e+76']\n  s: -1,\n  e: 76,\n  c: \n   [ 5789604,\n     46186580977117,\n     85492504343953,\n     92663499233282,\n     2820197287920,\n     3956564819969 ] }\ngetMax() = \n{ [String: '-5.7896044618658097711785492504343953926634992332820282019728792003956564819968e+76']\n  s: -1,\n  e: 76,\n  c: \n   [ 5789604,\n     46186580977117,\n     85492504343953,\n     92663499233282,\n     2820197287920,\n     3956564819968 ] }\n. I'm getting passes on this. I didn't run these tests when the problem originally appears so I'm unsure if this is an improvement or if there is an oversight here somewhere which causes the problem.\n```\nContract: Test\n\naddition new BigNumber(2).pow(252).minus(1) \n{ testSignedIntegerBefore: BigNumber { s: 1, e: 0, c: [ 0 ] },\n  testSignedIntegerAfter: \n   BigNumber {\n     s: 1,\n     e: 75,\n     c: \n      [ 723700,\n        55773322622139,\n        73186563042994,\n        24082937404160,\n        25352524660990,\n        494570602495 ] },\n  amount: \n   BigNumber {\n     s: 1,\n     e: 75,\n     c: \n      [ 723700,\n        55773322622139,\n        73186563042994,\n        24082937404160,\n        25352524660990,\n        494570602495 ] } }\n\n\ntestSignedInteger new BigNumber(2).pow(252).minus(1) \nBigNumber {\n  s: 1,\n  e: 75,\n  c: \n   [ 723700,\n     55773322622139,\n     73186563042994,\n     24082937404160,\n     25352524660990,\n     494570602495 ] }\n\n\naddition new BigNumber(2).pow(252)\n{ testSignedIntegerBefore: BigNumber { s: 1, e: 0, c: [ 0 ] },\n  testSignedIntegerAfter: \n   BigNumber {\n     s: 1,\n     e: 75,\n     c: \n      [ 723700,\n        55773322622139,\n        73186563042994,\n        24082937404160,\n        25352524660990,\n        494570602496 ] },\n  amount: \n   BigNumber {\n     s: 1,\n     e: 75,\n     c: \n      [ 723700,\n        55773322622139,\n        73186563042994,\n        24082937404160,\n        25352524660990,\n        494570602496 ] } }\n\n\ntestSignedInteger new BigNumber(2).pow(252)\nBigNumber {\n  s: -1,\n  e: 77,\n  c: \n   [ 10855508,\n     36599839332095,\n     97798445644913,\n     61244061062403,\n     80287869914850,\n     7418559037440 ] }\n\n\u2713 test (300ms)\n\n1 passing (330ms)\n``. Oh it passes because there are no assertions only logging..solc --version`\nMine is showing Version: 0.4.21-develop.2018.2.28+commit.9e3da89a.Linux.g++ after reinstall. \nWas constructor syntax in 0.4.22 and not 0.4.21?. Now this is interesting, shows a different version for solc-js. I guess my linter (which is showing this error) is using the version before and that standalone package isn't updated.\ntruffle version\nTruffle v4.1.8 (core: 4.1.8)\nSolidity v0.4.23 (solc-js)\nReinstalling solc separately it mentions 0.4.23 though solc --version is still reporting 0.4.21.\nnpm install -g solc\n/usr/local/bin/solcjs -> /usr/local/lib/node_modules/solc/solcjs\n+ solc@0.4.23\nadded 66 packages from 31 contributors in 6.488s\nsolc --version\nsolc, the solidity compiler commandline interface\nVersion: 0.4.21-develop.2018.2.28+commit.9e3da89a.Linux.g++\nwhereis solc\nsolc: /usr/local/bin/solc\nAhh I need to rebuild solc from source.. ",
    "gakonst": "Thanks @mryellow this did the trick for me. I imagine this could be included in truffle to accompany the syntax @tcoulter mentioned?. ",
    "chevdor": "I noticed the same and agree with the comment from @mrbodoia \nAs far as security is concerned, running the tests requiring ETH will require the account to be unlocked.  It is probably a very bad idea on to unlock accounts on mainnet. \n. The fact that it is not implemented may be related to #261: when using a real net, you will often run into timeout issues and the timeouts are currently not configurable.\n. I see it used here:\nhttps://github.com/ConsenSys/truffle/blob/master/cli.js#L2\n. I think there is no issue here.\nThe build process is taking care of bringing things as they should.\nYou should not run the app from /app/index.html but:\n1. first build (truffle build) \n2. then run it from /build/index.html\n. That\u00b4s especially true when testing again real nets (vs testrpc).\n. The fix in #267 allows specifying the timeouts per network.\nFor instance:\nnetworks: {\n        \"morden\": {\n            network_id: 2,            \n            host: \"localhost\",\n            port: 8546,\n            before_timeout: 200000,          //  <=== NEW\n            test_timeout: 300000             //  <=== NEW\n        },\n        \"dev\": {\n            network_id: \"default\",\n            before_timeout: 300,             //  <=== NEW\n            test_timeout: 300                //  <=== NEW\n        }\n    }\n. Ouch sorry for keeping this one open, I totally forgot it.\nIndeed, in the previous version, the solidity parser could not take such fantasy :)\nAs you mention @baklinger, the new truffle version is the solution. Thanks for your input.\n. Actually, the main reason is not only 0.4.x but exactly what you mentioned about the downgrading.\nCompilers do not behave the same, so while it is advised using the latest, sometimes, people prefer to use a given (older) version.\nThe 0.4.x example you mention is a good one, we should use 0.4.x, but for now we don\u00b4t (whatever the reasons are).\nI think it would be fair to have such feature, and as you suggest, lock it down, at least for now, to a given set of versions (ie everything < 0.4.x)\nTo avoid any extra issue reports, I would specifically point to this ticket since you now nicely explained why 0.4.x cannot yet be working :)\n. dup\n. @tcoulter you closed this PR without merging while it fixes issues still pending.\nCould you comment please?. That's indeed the issue I ran into and the reason I opened a new issue\ninstead of a PR. Thanks for confirming that you get the same behaviour on\nyour end.\nOn Tue, Sep 20, 2016, 20:29 adklempner notifications@github.com wrote:\n\nI tried what you did and here is my output:\nRebuilding...\nCompleted without errors on Tue Sep 20 2016 11:23:11 GMT-0700 (PDT)\nContract: MetaCoin\n    \u2713 should put 10000 MetaCoin in the first account\n    \u2713 should call a function that depends on a linked library (60ms)\n    \u2713 should send coin correctly (114ms)\n3 passing (486ms)\n\n\nFile contracts/Migrations.sol changed.\nRebuilding...\nCompiling Migrations.sol...\nWriting artifacts to ./build/contracts\nFile build/contracts/Migrations.sol.js changed.\nRebuilding...\nCompleted without errors on Tue Sep 20 2016 11:24:15 GMT-0700 (PDT)\n\n\n0 passing (0ms)\nCompleted without errors on Tue Sep 20 2016 11:24:15 GMT-0700 (PDT)\n0 passing (0ms)\nLooks like on the second time it runs the test task, but it does not pick\nup the test file.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/269#issuecomment-248390017,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAtFpIj9CDv4F78CzH8nQo1MGA14ZEiPks5qsCYLgaJpZM4KB4mj\n.\n. After some reading, I suspect that the issue has nothing to do with the serve task itself but with the build process.\n\nTo test, in truffle.js, declare 2 instances of testnet for instance:\n\"testnet\": {\n            network_id: 2, // Official Ethereum test network\n            host: \"localhost\",\n            port: 8546\n        },\n\"parity\": {\n            network_id: 2, // Official Ethereum test network\n            host: \"localhost\",\n            port: 8547\n        },\nAs the names suggest, I am running geth on testnet on port 8546 and parity also on testnet on port 8547.\nTry deploying to 'testnet': truffle migrate --network testnet\nThis will for fine.\nNow try deploying to 'parity':  truffle migrate --network parity\nNothing will happen unless you specify --reset as truffle thinks that we deployed already on network '2'.\n. In your truffle.js, can you reduce rpc.gas a tiny bit and see if that helps?\n. Your value (500000) seems rather low. The default value is 4712388.\nTry with the default or lower it to 4612388. Not sure why but it then worked on my end...\n. I close this issue, the error message is from web3.\n. Closing this one as I think we are moving in favour of webpack and I don\u00b4t have such an issue there.\n. My contracts folder contained the .sol.js files and was missing the .sol files\nAdding the .sol files to that folder fixed the issue.\n. I ran into the same issue with truffle 4.1.0 using ganache.\nI tried adding rpc and solc options to truffle.js => no improvement.\nI downgraded to 4.0.7 => no improvement\nI downgraded to 4.0.5 (npm i -g truffle@4.0.5) => problem solved.\n4.0.6 fails as well.. ",
    "pragmaticadam": "It does not work in version \nTruffle v5.0.3 (core: 5.0.3)\nSolidity v0.5.0 (solc-js)\nNode v11.6.0. ",
    "ETHorHIL": "I am facing the same issue and deleting the .sol.js files as tkeber says works. But doing this everytime before compiling is a bit painful. Is there another way?. Did anyone find out how to solve this?. The Problem in my case was that Parity was running in the background. When I kill the process it works.. ",
    "rolandkofler": "Any chance that this will be in npm soon?\n. But I have my script in the project root where also node_modules resides and it still doesn't work. With node <script> it works\n. @tcoulter your intuition is right, I'm a newbe with node. \nnode install eth-lightwallet\nbut neither \nvar lightwallet = require('./node_modules/eth-lightwallet');\nnor\nvar lightwallet = require('eth-lightwallet');\ndoes the trick.\n. .\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 images\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 javascripts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 stylesheets\n\u251c\u2500\u2500 build\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 config.gypi\n\u251c\u2500\u2500 contracts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 GalaxiasV1.sol\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Migrations.sol\n\u251c\u2500\u2500 createaccountspike.js <------ my script\n\u251c\u2500\u2500 migrations\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 1_initial_migration.js\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 2_deploy_contracts.js\n\u251c\u2500\u2500 node_modules\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bignumber.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bindings\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bip66\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bitcore-lib\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bitcore-mnemonic\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bn.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 brorand\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 browserify-aes\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 browserify-cryptojs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 browserify-sha3\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 buffer-xor\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cipher-base\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 create-hash\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 create-hmac\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 crypto-js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 drbg.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 elliptic\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ethereum-common\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ethereumjs-tx\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ethereumjs-util\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 eth-lightwallet\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 evp_bytestokey\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 hash.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 inherits\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 js-sha3\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jszip\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 keccakjs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 localstorejs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 nan\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 node-safe-filesaver\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 pako\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ripemd160\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rlp\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 scrypt-async\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 secp256k1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 sha3\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 sha.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 tweetnacl\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 underscore\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 unorm\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 utf8\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 web3\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 xmlhttprequest\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 test\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 galaxiasv1.js\n\u2514\u2500\u2500 truffle.js\n```\nvar lightwallet = require('./node_modules/eth-lightwallet');\n// generate a new BIP32 12-word seed\nvar secretSeed = lightwallet.keystore.generateRandomSeed();\n// the seed is stored encrypted by a user-defined password\nvar password = 'Enter password for encryption';\nlightwallet.keystore.deriveKeyFromPassword(password, function (err, pwDerivedKey) {\nvar ks = new lightwallet.keystore(secretSeed, pwDerivedKey);\n// generate five new address/private key pairs\n// the corresponding private keys are also encrypted\nks.generateNewAddress(pwDerivedKey, 5);\nvar addr = ks.getAddresses();\nconsole.log(addr);\n// Create a custom passwordProvider to prompt the user to enter their\n// password whenever the hooked web3 provider issues a sendTransaction\n// call.\nks.passwordProvider = function (callback) {\n  callback(null, password);\n};\n// Now set ks as transaction_signer in the hooked web3 provider\n// and you can start using web3 using the keys/addresses in ks!\n});\n.\nusr/local/lib/node_modules/truffle/lib/require.js:128\n        fn(done);\n        ^\nTypeError: fn is not a function\n    at /usr/local/lib/node_modules/truffle/lib/require.js:128:9\n    at /usr/local/lib/node_modules/truffle/lib/require.js:82:7\n    at tryToString (fs.js:455:3)\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:442:12)\n```\n. ",
    "emum8": "I thought that may have come with visual studio already but I will try it.\nI also installed some build tools package with npm.\ndownloading now\n. ",
    "mike80439": "Thank you, Tim.\nOn Aug 29, 2016 9:49 AM, \"Tim Coulter\" notifications@github.com wrote:\n\nI've confirmed that this is a bug with the solc compiler and not with\nTruffle. I've written up an example project that exposes the error\nhttps://github.com/tcoulter/solc-result-bug as well as submitted a bug\nreport https://github.com/ethereum/solc-js/issues/44 to solc.js. Will\nleave this ticket open until the upstream issue is resolved, after which\nwe'll upgrade our solc version.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ConsenSys/truffle/issues/251#issuecomment-243164929,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAWMgoUlNjRhK9hllarQVpIFOnWcUXE7ks5qkv97gaJpZM4Jtaxn\n.\n. \n",
    "mathcrypto": "i am trying to load a script and i get this error \n/Users/amira/.nvm/versions/node/v6.2.2/lib/node_modules/truffle/node_modules/truffle-require/index.js:117\n      fn(done);\n      ^\nTypeError: fn is not a function. i used thez command truffle exec script.js because i put it in the rootfile myproject. ",
    "360disrupt": "@mathcrypto maybe this helps: \nhttps://github.com/trufflesuite/truffle/issues/676\nIs your script wrapped into module.exports. Sorry, did look at that, you are totally right. . ",
    "MareoRaft": "See also https://truffleframework.com/docs/truffle/getting-started/writing-external-scripts. ",
    "mpolci": "A solution is to postpone angular bootstrap\n. @tcoulter I tested the new release 2.1.0, now the error is inverted.\nEven if the #pragma statement is not specified _; works and _ without the \nsemicolon raises an error\n. @tcoulter you are right, the error is Error: Expected token Semicolon got 'RBrace' and it comes from solc. I got the same error manually compiling the contract using solc.\n. ",
    "vkantchev": "@tcoulter @cgewecke  This seems to have been fixed at some point and then the commit was reverted back. If you check the latest code in the develop branch of truffle-core in /lib/test.js the code still uses hardcoded timeouts. \nHere is the relevant part of lib/test.js: \n``` js\n      var template = function(tests) {\n        this.timeout(runner.TEST_TIMEOUT);\n    before(\"prepare suite\", function(done) {\n      this.timeout(runner.BEFORE_TIMEOUT);\n      runner.initialize(done);\n    });\n\n    beforeEach(\"before test\", function(done) {\n      runner.startTest(this, done);\n    });\n\n    afterEach(\"after test\", function(done) {\n      runner.endTest(this, done);\n    });\n\n    tests(accounts);\n  }\n\n```. ",
    "baklinger": "I had the same issue. My config was:\n- Operating System: OSX\n- Truffle version:v2.0.7\n- node version: v6.7.0\n- npm version: 3.10.9\nI've upgraded Truffle to version 2.1.0 and the issue seems to be solved. I can compile smart contracts with pragma without the SyntaxError exception.\n. ",
    "skrajath": "I get the same issue \n\nnpm : '3.10.8'\nTruffle v2.1.1\nNode version : v6.9.1\nOS : Ubuntu 16.04.1 LTS\nIs this related to something wrong in the written contract.\n. \n",
    "benjaminmbrown": "I have a use case wherein I have a requirement to test a client's smart contracts written in previous compiler versions. Currently remix allows specification for any compiler version. Just thought I'd bring up this case where latest version is not always the desire.. @gnidan Is there a publicly accessible roadmap?. ",
    "aleybovich": "@cgewecke Is this feature in the latest 5.0.1 beta? I just realized I need to compile abi's for multiple solc versions at the same time and looking for ways to do that.. I deleted and recreated the project, and it now works. . Thank you for replying! Looks like it was you who submitted that pull request - any ideas when it's going to be released? . Ok, I'll keep an eye. You can close it as a duplicate. Thank you!. @cgewecke I have tried using .contract as you have suggested above, and seems like it has the same issue. \nawait instance.contract.increaseApproval.sendTransaction(ownerAddress, 47, { from: user1Address });\ncauses Error: Invalid number of arguments to Solidity function\nThat makes sense as it's using the same version of web3 as truffle. Sounds like there is no good workaround, and sound like I can't use truffle-contracts in my prod code either. . @lazaridiscom You are my hero - this is gonna save me hours of pulling my hair! I am going to post this question on ethereum.stackexchange.com and if you are on there you can post this answer and get points, or if you don't use it I will post the answer, so the community can use it. I know several people who were looking for this as well.. @lazaridiscom sure, go ahead and answer this: https://ethereum.stackexchange.com/questions/41094/debugging-js-unit-tests-with-truffle-framework-in-vs-code\nI'll accept your answer. Issue resolved, thanks to @lazaridiscom . Thank you! By the way, I'm very much looking forward to the new truffle version that uses web3 1.0 - right now I have to run with two versions side by side which sometimes causes odd issues. Now if only Metamask updated their web3 version as well, the world would become such a better place :)) . @cgewecke - no problem, I'll close this one. Is V5 stable enough/feature complete to start using it? . ",
    "adklempner": "I tried what you did and here is my output:\n```\nRebuilding...\nCompleted without errors on Tue Sep 20 2016 11:23:11 GMT-0700 (PDT)\nContract: MetaCoin\n    \u2713 should put 10000 MetaCoin in the first account\n    \u2713 should call a function that depends on a linked library (60ms)\n    \u2713 should send coin correctly (114ms)\n3 passing (486ms)\n\n\nFile contracts/Migrations.sol changed.\nRebuilding...\nCompiling Migrations.sol...\nWriting artifacts to ./build/contracts\nFile build/contracts/Migrations.sol.js changed.\nRebuilding...\nCompleted without errors on Tue Sep 20 2016 11:24:15 GMT-0700 (PDT)\n\n\n0 passing (0ms)\nCompleted without errors on Tue Sep 20 2016 11:24:15 GMT-0700 (PDT)\n0 passing (0ms)\n```\nLooks like on the second time it runs the test task, but it does not pick up the test file.\n. #277 Should fix this\n. A full implementation of this feature will probably require finding a solution to #141\n. From etherscan:\n\n\nContracts that use \"imports\" will need to have the code concatenated into one file as we do not support \"imports\" in separate files. You can't change msg.sender in Solidity. Its value will always be the address making the call.\na.test({from: 0xf6a948bff792e4f42d7f17e5e4ebe20871d160f2}); is JavaScript code, not Solidity.. It's already possible with Javascript tests, which is what most people use.\nRead more here: http://truffleframework.com/docs/getting_started/javascript-tests. \n\n",
    "olegwn": "That would be indeed awesome. It will speed up the development process greatly.\n@chevdor have you found any hacks/workarounds to implement it adhoc yet?. @p14n check #448 (check comment from @carchrae )  it might help with watch. This bug prevents me using Truffle v4.0.0-beta.0 (core: 4.0.0-beta.0) in watch mode too on Mac OS X\n==\nCommand: truffle watch\n/usr/local/lib/node_modules/truffle/build/cli.bundled.js:218559\n  return (new fsevents(path)).on('fsevent', callback).start();\n          ^\nTypeError: fsevents is not a constructor\n    at createFSEventsInstance (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:218559:11)\n    at setFSEventsListener (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:218613:16)\n    at FSWatcher.FsEventsHandler._watchWithFsEvents (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:218777:16)\n    at FSWatcher. (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:218911:25)\n    at gotStat (fs.js:1793:21)\n    at FSReqWrap.oncomplete (fs.js:123:15). @carchrae thanks! that helped\nI ended up with this config for 4.x version:\n````\n{\n  \"dependencies\": {\n    \"npm-watch\": \"^0.2.0\"\n  },\n  \"scripts\": {\n    \"test\": \"truffle test\",\n    \"watch\": \"npm-watch\"\n  },\n  \"watch\": {\n    \"test\": {\n      \"patterns\": [\n        \"truffle\",\n        \"test\",\n        \"contracts\"\n      ],\n      \"extensions\": \"js,json,sol\"\n    }\n  },\n}\n. ",
    "makoto": "I get the same message even when I set gas limit to 1 ether. I guess the question is more about how to co-exist pages rendered by express and ones served by truffle (with npm run dev). Any idea why this started as a problem? The PR on web3.js is referring to the code which hasn't been changed for almost 3 years. Started having the same problem when I upgrade truffle v3.4.7. Interestingly the problem only happens when I am in truffle console or truffle exec, does not occur in the truffle test context.. @tcoulter Hello. Any plan on when this gets released? I have a branch depending on this change so wondering if I should revert if it won't be released for a while.. I see. I was using 4.0.0 beta but had to downgrade to main. Looks like it's not back ported yet https://github.com/trufflesuite/truffle/blob/v4.0.0-beta.0/package.json#L25. I upgraded to Ganache CLI v6.0.3 but getting the same error. ",
    "salekali": "I'm getting the same error. Unable to migrate contracts.. ",
    "kingcocomango": "I am also having this issue. Unable to deploy contracts\n```\nfoo@Moko:~/Git/bar$ truffle deploy\nUsing network 'development'.\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: Error: Exceeds block gas limit\n    at StateManager.queueTransaction (/home/foo/.nvm/versions/node/v7.9.0/lib/node_modules/ethereumjs-testrpc/lib/statemanager.js:291:21)\n    at GethApiDouble.eth_sendTransaction (/home/foo/.nvm/versions/node/v7.9.0/lib/node_modules/ethereumjs-testrpc/lib/subproviders/geth_api_double.js:232:14)\n    at GethApiDouble.handleRequest (/home/foo/.nvm/versions/node/v7.9.0/lib/node_modules/ethereumjs-testrpc/lib/subproviders/geth_api_double.js:61:10)\n    at next (/home/foo/.nvm/versions/node/v7.9.0/lib/node_modules/ethereumjs-testrpc/node_modules/web3-provider-engine/index.js:95:18)\n    at SolcSubprovider.handleRequest (/home/foo/.nvm/versions/node/v7.9.0/lib/node_modules/ethereumjs-testrpc/node_modules/web3-provider-engine/subproviders/solc.js:28:7)\n    at next (/home/foo/.nvm/versions/node/v7.9.0/lib/node_modules/ethereumjs-testrpc/node_modules/web3-provider-engine/index.js:95:18)\n    at VmSubprovider.handleRequest (/home/foo/.nvm/versions/node/v7.9.0/lib/node_modules/ethereumjs-testrpc/node_modules/web3-provider-engine/subproviders/vm.js:40:12)\n    at next (/home/foo/.nvm/versions/node/v7.9.0/lib/node_modules/ethereumjs-testrpc/node_modules/web3-provider-engine/index.js:95:18)\n    at GethDefaults.handleRequest (/home/foo/.nvm/versions/node/v7.9.0/lib/node_modules/ethereumjs-testrpc/lib/subproviders/gethdefaults.js:17:12)\n    at next (/home/foo/.nvm/versions/node/v7.9.0/lib/node_modules/ethereumjs-testrpc/node_modules/web3-provider-engine/index.js:95:18)\n    at Object.InvalidResponse (/home/foo/.nvm/versions/node/v7.9.0/lib/node_modules/truffle/node_modules/web3/lib/web3/errors.js:35:16)\n    at /home/foo/.nvm/versions/node/v7.9.0/lib/node_modules/truffle/node_modules/web3/lib/web3/requestmanager.js:86:36\n    at XMLHttpRequest.request.onreadystatechange (/home/foo/.nvm/versions/node/v7.9.0/lib/node_modules/truffle/node_modules/web3/lib/web3/httpprovider.js:118:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (/home/foo/.nvm/versions/node/v7.9.0/lib/node_modules/truffle/node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (/home/foo/.nvm/versions/node/v7.9.0/lib/node_modules/truffle/node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (/home/foo/.nvm/versions/node/v7.9.0/lib/node_modules/truffle/node_modules/xhr2/lib/xhr2.js:509:12)\n    at IncomingMessage. (/home/foo/.nvm/versions/node/v7.9.0/lib/node_modules/truffle/node_modules/xhr2/lib/xhr2.js:469:24)\n    at emitNone (events.js:91:20)\n    at IncomingMessage.emit (events.js:188:7)\n    at endReadableNT (_stream_readable.js:975:12)\n```\nResolved by the solution found @ stackoverflow from user Matthew Schmidt \n\nPossibility two: you're giving the transaction too high of a gasLimit. If the transaction has a limit of 2,000,000, it'd stop you since it could theoretically go over the block gas limit, even if in practice it won't. If this is the case, see if you can reduce the transaction's gasLimit while remaining above the amount it actually needs--that might do the trick.. https://github.com/trufflesuite/truffle-contract/pull/76\nhttps://github.com/trufflesuite/truffle-deployer/pull/14\nhttps://github.com/trufflesuite/truffle-contract-schema/pull/19\n\nTesting locally, the transaction ID of the transaction that deployed the contract is now in Contract.json. Heres an example https://gist.github.com/kingcocomango/912fd00c8cc838231f2894ad4a154291\nFor the schema suggestion, I'm not quite sure how to have a $ref be the left hand side of a patternproperties. Bumping the package version for the schema should be fine, the other packages use ^requires, or did you mean something else?\n@owocki thanks!. As far as I can tell, the schema needs to be valid JSON, and since $refs are an object they can't be used as a key. I pulled it out into a property for now though; and bumped the schema version. Should I post more test samples?. @gnidan Changes done as per comments, travis is doing its thing :). Hello, sorry I was gone for a while.\nI made the changes regarding naming and tested it locally, with mocha and a mock project and both run fine. Travis is however throwing an error that I have no idea how I could be causing. The same command passes locally.\nhttps://gist.github.com/kingcocomango/5ac526ad29a97dd70ac557964d513c43 the status of the various repos locally, if it helps.. Try deleting the .DS_Store folders from the projects directory, as a workaround.. ",
    "s-matthew-english": "yeeaaa @chevdor! modifying the gas in truffle.js worked for me as well :). ",
    "felixwatts": "If I set the gas in truffle.js to 4500000 I get out of gas. If I set it to 4750000 i get exceeds block gas limit. I could continue the trial and error binary search of the gas space, but I suspect there may be no gas number that satisfies both constraints. What do I do?. +1. ",
    "katopz": "Here's result for truffle 4.0 with testrpc, at old MetaCoin example.\n4712388 = out of gas\n4712389 = Exceeds block gas limit\nBut it working fine in truffle develop just broke external testrpc\nAny idea for magic number?. ",
    "kevinbluer": "@katopz gas:   2900000 worked for me.. ",
    "NateDev100": "I get this error too, none of these gas values work for me.. @ledinhhuy88 I followed the above steps you just posted, and I still got the same error (truffle version 4.0.1). Nope, mines issue #650 and I basically followed a tutorial, so it should\ncompile properly.\nOn Nov 5, 2017 3:57 PM, \"Xavier Lepr\u00eatre\" notifications@github.com wrote:\n\nSome of you guys have contracts that just don't deploy. Either because you\nhave a mammoth one that has too big a bytecode or because you throw in\nthe constructor.\nThis thread is not what you are looking for.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/271#issuecomment-342004932,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AeABokRHqUNpsOCegfcG4Yaatox0HxhEks5sziFPgaJpZM4KC3bx\n.\n. How's it misleading? That's the error I'm getting\n\nOn Nov 6, 2017 9:19 AM, \"Xavier Lepr\u00eatre\" notifications@github.com wrote:\n@NateDev100 https://github.com/natedev100 So perhaps you can remove your\ncomments to avoid misleading subsequent visitors.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/271#issuecomment-342161943,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AeABooqiO2IBzO6GJ8Z4KyAdc62ealynks5szxWKgaJpZM4KC3bx\n.\n. Well I get the same error with main net as well so... Yeah\nOn Nov 6, 2017 10:54 AM, \"Xavier Lepr\u00eatre\" notifications@github.com wrote:\nThis issue here is specifically for main net. Not just \"deployment\".\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/271#issuecomment-342191901,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AeABohaNWam2tlzhkPR6mwscygZ3oTimks5szyu0gaJpZM4KC3bx\n.\n. Nope :(\nOn Tue, Dec 12, 2017 at 3:25 PM, Adrian Li notifications@github.com wrote:\n\nI'm getting this error as well. @NateDev100\nhttps://github.com/natedev100 did this ever resolve for you?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/667#issuecomment-351183212,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AeABonbZVDHPuddnuADaNibvrUe0bt-eks5s_uEzgaJpZM4QSNth\n.\n. \n",
    "ledinhhuy88": "I had the same issue with truffle 4.0.1\nthis is my workaround\n$ truffle console\ntruffle(development)> web3.eth.getBlock(\"pending\").gasLimit\n6712390\nthen in the truffle.js:\nmodule.exports = {\n  networks: {\n    development: {\n      host: \"localhost\",\n      port: 8545,\n      gas: 6712390,\n      network_id: \"*\" // Match any network id\n    }\n  }\n};. ",
    "zulhfreelancer": "@ledinhhuy88's solution worked for me.. Running truffle compile followed by truffle test [path] did not work for me. I'm using Truffle v4.1.13.\nEverytime I ran truffle test [path], all other contracts get compiled and deployed.\nI'm expecting only the contracts related in my test will get compiled and deployed. Not everything.\nUpdate\nI found a workaround for this. I create an empty folder in my Truffle project called migrations_null and I put nothing inside it.\nNext, I ran the test with --migrations_directory flag and it worked. Other contracts didn't get compiled and migrated.\n$ truffle tests ./test/MyTest.js --migrations_directory migrations_null. Upgraded my Truffle to 4.1.3 and it solved the problem (was on 4.0.6).. Add skipDryRun: true in your network config. That should help.\nExample:\ndevelopment: {\n      skipDryRun: true,\n      host: \"127.0.0.1\",\n      port: 7545,\n      network_id: \"*\" // match any network\n},. ",
    "sarthakmis": "In config file, try with\nmodule.exports = {\n    networks: {\n    development: {\n      host: 'localhost',\n      port: 8545,\n      network_id: '*',\n      gas:4712388 \n    }\n  }\n};\nit worked for me. ",
    "tirthb": "@flockonus solution to update testrpc worked for me.. ",
    "swapnilpuri": "@sarthakmis solution resolved my issue.. ",
    "djudjuu": "i had the same issue with either running out of gas or exceeding block gas limit (on the development-network). my contracts were big.\nWith truffle 4.x, the solc-optimizer got switched off by default. switching it back on solved it for me:\nin truffle.js\n solc: {\n        optimizer: {\n            enabled: true,\n            runs: 200\n        }\n}\nmaybe without optimizing they exceeded the max stack-depth?...not sure, happy it works\n. > wrap it in a function when setting the provider, as shown in the docs here. \nspot on. that fixed it! . ",
    "adrobson": "I got an error message with gas:6700000. I changed it to 670000 and it worked.. ",
    "itoonx": "Just add the value of gas to manual . ",
    "mandarvaze": "I think the error is too generic and misleading. That is why it works for some people and does not for some others, because the root cause is different, but the error is same. (too generic)\nI blogged about my experience here : https://mandarvaze.bitbucket.io/posts/please-check-your-gas-amount-maybe-misleading.html\ntl;dr : It was \"code\" issue (Should have been compile error IMO). ",
    "res-Q": "This worked for me\nropsten: {\n        host: \"127.0.0.1\",\n        port: 8545,\n        network_id: 3,\n        gas: 4712388,\n        // gasPrice: xxx,\n        from: \"0x689bb9068f12BfaCEF6aeeC6f37d9fa5963d4bd7\" //\n      }. I am experiencing the same issue...\nTruffle v4.1.3 (core: 4.1.3)\nSolidity v0.4.19 (solc-js)\nThe contract deploys just fine to Ganache development network.\nThe contract fails to upload to Ropsten test network.\nMy truffle.js source:\nmodule.exports = {\n    networks: {\n        development: {\n            host: \"127.0.0.1\",\n            port: 7545,\n            network_id: \"*\" // Match any network id\n        },\n    ropsten: {\n        host: \"127.0.0.1\",\n        port: 8545,\n        network_id: 3,\n        gas: 4698712,\n        //gasPrice: 100000000000,\n        from: \"0x689bb9068f12BfaCEF6aeeC6f37d9fa5963d4bd7\" //<your unlocked ropsten account address>\n    },\n},\n\n};. Following up from my post yesterday... was able to deploy successfully using the GAS Limit specified in Ropsten Etherscan.\nHow I did it...\n\nDeployed a small contract to Ropsten successfully\nViewed the contract in https://ropsten.etherscan.io. \nClicked on the 'Transaction Hash' of the deployed contract to reveal information about the network.\nGas Limit displays as: 1828127 (provided screenshot)\n\n\n\nModified 'truffle.js' to the following...\n\nropsten: {\n        host: \"127.0.0.1\",\n        port: 8545,\n        network_id: 3,\n        gas: 1828127,  // <- new GAS LIMIT value\n        //gasPrice: 100000000000,\n        from: \"0x689bb9068f12BfaCEF6aeeC6f37d9fa5963d4bd7\" //<your unlocked ropsten account address>\n    },\n\nDeleted build folder from truffle project\nRan command: truffle compile\nRan command: truffle migrate --network ropsten\n\noutput:\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  ... 0x3f70c4a4a5edb7e36d6912029f25e03b2d0d89272fa4e8d18245c2994ef73eb5\n  Migrations: 0xfbd7c346839fe9715bedb9003a01986802f229f0\nSaving successful migration to network...\n  ... 0xc2a0c7670c91f45a7c498fbc9595fde62c8b6f61e060eb4c12e443af73eb118e\nSaving artifacts...\nRunning migration: 2_deploy_contracts.js\n  Deploying Adoption...\n  ... 0x380c2e0761120168f2031f869d6aa7bf48e3c3affeb8f41fea9798403aa3555f\n  Adoption: 0x9b91cf236739a0c2e61c08c0ee481224b9c02cdd\nSaving successful migration to network...\n  ... 0x539c94a23026196c18cf6c31848fc8a8c2273c1c8787165f89ddec263da20051\nSaving artifacts...\n='s Success :)\n. ",
    "liuis": "try \neth.getBlock(\"latest\").gasLimit  \nmy : 2257178\nthen truffle.js:\n   gas: 2257177,\nIt's  worked for me . ",
    "071bctajay": "I found that my cause of the error was missing '0x' in .deploy( ) parameter\nSo I had to use \nweb3.eth.Contract(JSON.parse(filename.interface)).deploy({data:'0x' +bytecode}).send({gas:'1000000', from: accounts[0]});. ",
    "sugalivijaychari": "\nI get the same message even when I set gas limit to 1 ether\n\nhow to set gas limit to 1 ether. I also got the same error. and there is fishy about my local environment that would cause it to fake SSL certs. how could i resolve that?\nE:\\solidity-experiments>truffle init\nDownloading...\nError: Error making request to https://raw.githubusercontent.com/truffle-box/bare-box/master/truffle.js. Got error: unable to verify the first certificate. Please check the format of the requested resource.\n    at Request._callback (C:\\Users\\Vijay\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-box\\lib\\utils\\unbox.js:45:1)\n    at self.callback (C:\\Users\\Vijay\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\request\\request.js:186:1)\n    at Request.emit (events.js:182:13)\n    at Request.onRequestError (C:\\Users\\Vijay\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\request\\request.js:878:1)\n    at ClientRequest.emit (events.js:182:13)\n    at TLSSocket.socketErrorListener (_http_client.js:382:9)\n    at TLSSocket.emit (events.js:182:13)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)\nE:\\solidity-experiments>truffle init\n. ",
    "JohannesBertens": "Actually, it will keep on building forever for me:\nServing app on port 8080...\nRebuilding...\nCompiling Migrations.sol...\nCompiling handelplatform.sol...\nCompiling klant.sol...\nCompiling producent.sol...\nWriting artifacts to ./build/contracts\n\n\nFile build/contracts/Migrations.sol.js changed.\nFile build/contracts/handelplatform.sol.js changed.\nFile build/contracts/producent.sol.js changed.\nFile build/contracts/klant.sol.js changed.\nRebuilding...\nCompiling Migrations.sol...\nCompiling handelplatform.sol...\nCompiling klant.sol...\nCompiling producent.sol...\nWriting artifacts to ./build/contracts\nFile build/contracts/Migrations.sol.js changed.\nFile build/contracts/handelplatform.sol.js changed.\nFile build/contracts/producent.sol.js changed.\nFile build/contracts/klant.sol.js changed.\nRebuilding...\nCompiling Migrations.sol...\nCompiling handelplatform.sol...\nCompiling klant.sol...\nCompiling producent.sol...\n\n\nTotally stuck on this now \ud83d\udc4e \n. Added a pull request to fix this: #304 . ",
    "rmerom": "I just ran into a similar issue. Anyone has an idea how to tackle that?. Re-installing truffle worked in my case. I didn't actually know that there was beta/stable versions. The env was cloud9 (live.ether.camp), and I uninstalled whatever comes with that env, and reinstalled the default version (which is v2.1.1). I'm getting the same issue\nTruffle v3.0.0-4\nEthereumJS TestRPC v3.0.3\nUbuntu. ",
    "retotrinkler": "same as @PeterBorah here. ",
    "simonmittag": "i'm still experiencing this on 3.4.9. (intermittent too, which doesn't help)\n. ",
    "gujianliang": "Hello anyone can help give some suggestion on this problem?\nTypeError: path must be a string or Buffer\nThanks.. ",
    "haiqu": "Managed to compile tonight after updating to node 6.7.0\nClosing ticket.\n. It's OK, I've been in the open source community for years, I know how it works. Just glad to have found that the problem was on my end, I've given up on many projects due to complete lack of support.\nNot that commercial software is any better. :)\n. ",
    "standerson": "Not sure if there is a reason why one is not suppose to run the serve and watch commands from the console, so I created this pull request.\n. ",
    "Tectract": "This can happen when your node is not running / responding, I've noticed.\n. ",
    "federicobond": "The most common occurrence of this is starting the console without an RPC client up. I didn't see much of a case for running the console without connecting to a client, so I figured it was OK to error out.\n. Closing this since it's fixed in the latest version.. This is actually a bug with ConsenSys/solidity-parser. Could you file an issue there?. ",
    "ted-piotrowski": "299\n. ",
    "kristianmandrup": "I get the following error on a brand new project:\ntruffle migrate\nError: Invalid JSON RPC response: \"Error: connect ECONNREFUSED 127.0.0.1:8545\\n    at Object.exports._errnoException (util.js:1022:11)\\n    at exports._exceptionWithHostPort (util.js:1045:20)\\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1090:14)\"\n    at Object.InvalidResponse (/usr/local/lib/node_modules/truffle/node_modules/web3/lib/web3/errors.js:35:16)\n    at exports.XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/node_modules/web3/lib/web3/httpprovider.js:111:32)\n    at exports.XMLHttpRequest.dispatchEvent (/usr/local/lib/node_modules/truffle/node_modules/xmlhttprequest/lib/XMLHttpRequest.js:591:25)\nI assume it is due to not running the correct server in the background ECONNREFUSED 127.0.0.1:8545 but the error message should be more clear that this is the case and not just error with invalid JSON RPC response. That is way too cryptic! Cheers!\nIe. catch the error when trying to connect to server and rethrow a more \"human\" error message!\nThanks :)\n. ",
    "igetgames": "I've submitted a fix for this issue in #311.. I cherry-picked the commits that add the Expect.one() method.. I think this should be the other way around. According to the require.exec() function in require.js, it accepts an optional array of contracts. If that array is specified, it is used instead of the contracts under options.contracts_build_directory (implicitly inside contracts.provision).\nSo the fix would be to add \"contracts\" to the expected options array used in require.exec().. ",
    "KeepMovingNo1": "Error: Invalid JSON RPC response: \"\"\n    at Object.InvalidResponse (/usr/local/node/lib/node_modules/truffle/node_modules/web3/lib/web3/errors.js:35:16)\n    at XMLHttpRequest.request.onreadystatechange (/usr/local/node/lib/node_modules/truffle/node_modules/web3/lib/web3/httpprovider.js:115:32)\n    at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/node/lib/node_modules/truffle/node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (/usr/local/node/lib/node_modules/truffle/node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpRequestError (/usr/local/node/lib/node_modules/truffle/node_modules/xhr2/lib/xhr2.js:544:12)\n    at ClientRequest. (/usr/local/node/lib/node_modules/truffle/node_modules/xhr2/lib/xhr2.js:414:24)\n    at emitOne (events.js:96:13)\n    at ClientRequest.emit (events.js:188:7)\n    at Socket.socketErrorListener (_http_client.js:309:9)\n    at emitOne (events.js:96:13)\n. ",
    "dob": "Thanks. Figured it may be a solc issue, so I'll hunt down where to bring that up with them. I don't understand the design decision that a mapping (address => uint[]) would return \"an associated uint\", since the address is clearly associated with an array of uint and not a single one.\n. Wow, just tested it and you're right\ntap.idsForContract.call(\"0x131bec75342a54ffea3087bda5ba720394c486a9\", 0).then(function(res){ console.log(res.toNumber())}) // => 5\nI didn't expect that, since I didn't see a second argument to a getter documented anywhere...but there it is in the ABI. \n\"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\nSo I guess the pattern is to call some sort of getLengthForAddress(address) function first, and then make successive calls for each element in the array. Thanks.\n. ",
    "mattlockyer": "You can make a constant function that returns the array, this will allow you to get the whole array in one shot:\nmapping(address => uint256[]) indicies;\nfunction getIndicies(address who) constant returns (uint256[]) {\n  return indicies[who];\n}\nNote: only the type uint can be returned as an array. This is the only thing that worked for me:\n//this is the overloaded function, the original is safeTransferFrom['address,address,uint256']\nconst tx = await sampleNFT.contract.safeTransferFrom['address,address,uint256,bytes'](alice, composable.address, 1, \"1\", { from: alice, gas: 500000 });. ",
    "webpolis": "Same here... it seems the initial transactions coming from the migrate script get stuck in the pending queue.\nI'm using a private node, initialized like this:\ngeth --nodiscover --nat \"any\" --verbosity 4 --identity \"main\" --datadir $DIR/../data --networkid 20000 --rpc --rpccorsdomain \"*\" --ipcapi \"admin,db,eth,debug,miner,net,shh,txpool,personal,web3\" --rpcapi \"db,eth,net,web3\" $DIR/../genesis.json &> $DIR/../eth.log &\nThe main account has an initial balance of 20000000000000000000 and is unlocked before running truffle migrate.\nMy truffle settings are:\nmodule.exports = {\n  network: \"main\",\n  build: {\n    \"index.html\": \"index.html\",\n    \"app.js\": [\n      \"javascripts/app.js\"\n    ],\n    \"app.css\": [\n      \"stylesheets/app.css\"\n    ],\n    \"images/\": \"images/\"\n  },\n  rpc: {\n    host: \"localhost\",\n    port: 8545\n  },\n  networks{\n    \"main\": {\n      network_id: 20000,\n      gas: 4612388\n    }\n  }\n};\nand my genesis.json is:\n{\n    \"nonce\": \"0xdeadbeefdeadbeef\",\n    \"timestamp\": \"0x0\",\n    \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"extraData\": \"0x0\",\n    \"gasLimit\": \"0x8000000\",\n    \"difficulty\": \"0x400\",\n    \"mixhash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"coinbase\": \"0x3333333333333333333333333333333333333333\",\n    \"alloc\": {\n        \"0x17772a9b5176de991c588ea5615a184a01a89138\": {\n            \"balance\": \"20000000000000000000\"\n        }\n    }\n}. If I enable the verboseRpc (true) in truffle.js, I see a lot of this:\n```\n\n[\n  {\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getFilterChanges\",\n    \"params\": [\n      \"0x83472eda6eb475906aeeb7f09e757ba9\"\n    ],\n    \"id\": 79\n  }\n]\n <   [\n <     {\n <       \"jsonrpc\": \"2.0\",\n <       \"id\": 79,\n <       \"result\": []\n <     }\n <   ]\n```\n\nAnd the Ethereum console doesn't show any mining activity. I thought Truffle will be in charge of \"cooking\" up the transactions.. ",
    "350050183": "It's holiday season,haha,be paitient:). ",
    "chrc": "Hello,\nI am the same problem. Any solution ?. ",
    "rajaboini525": "Hello,\nI am also facing the same issue. Any solution ?. ",
    "baoit09": "For me, what I need to do to overcome this stuck is remove the DAG file. Then, every things works fine.. ",
    "sk4092": "where can I find DAG file in windows 7.\n. ",
    "Almaju": "I just ran into the exact same problem and it was due to two nodes being on the port (30303). It worked like a charm after stopping one!. ",
    "parag": "Shutting parity if that is working in the background will help . ",
    "shohel02": "I am facing the same issue. I am running geth testnet node against which i am running 'truffle migrate' .  Both the migrate and geth node hangs after this.  Tried with DAG delete, does not work. Did anyone find solution for this. ",
    "ewerton-azevedo": "I could solve that running miner.start() in another console window.. ",
    "arielgabizon": "@parag I don't understand - if I shut parity then it crashes - it needs some client to work with to deploy the contract doesn't it?. migrate --reset worked for me; but I think truffle should be able to recognize the contract code changed without users having to do this. @onetom  that would be convenient. But I don't see a place to paste the phrase in metamask. @iamchrissmith some of the keys work and some do not - e.g. (5). ",
    "amrikmahal": "Hi, Was having the same problem where migration was stuck.\nran miner.start() through to web3 console and the contract was migrated. \nI believe the contract is not getting mined, the moment, miner.start() is fired, i could see the mining nodes picked up the contract.  Not sure what is wrong here, but this workaround worked.  . ",
    "y0unghe": "miner.start solved it. that's really odd.. ",
    "moda20": "I am having this problem with quorum, and even when running miner.start() it doesn't work instantly. uses all CPU on generating DAG and then nothing happens.\nhelp . @ArtoriaRen What the heck ? how does that even make sense. It worked for me that way.. I had the issue with the 240 second timeout, on transactions made by truffle contract but not eth mainnet. i had it on my local quorum network with 5 nodes. i can't understand why would a transaction have to wait in an enviroment where there is no gas at all. . does web3 1.0 have this issue with quorum ? i probably have to ask elsewhere.. Actually I found out it wasn't a problem with truffle in particular but more like a problem with network configuration and nonce guessing which can be quite wrong especially when sending too many transactions from the same account in a small amount of time. I also had problems with  gasunit overflow error from the EVM  due to some bug in my contract. All of those somehow made the 240 sec timeout occur. But I still have to confirm all of that at least. . OK go on. . ",
    "jasonmerecki": "Had the same problem, thanks to this thread for the hints for me to find a solution. \nI was migrating a contract to a private network, local geth instance. I did these steps (I already had an address in my local network):\n1) start geth with local chaindata\n2) geth attach to local instance\n3) ran personal.unlockAccount in geth, for the account in my local network\n4) ran miner.start() in geth\n5) ran truffle migrate\n6) stopped minter.start()\nI admit that I didn't research why this worked yet, I am only leaving a note to potentially help someone else. I am working through a tutorial for creating and migrating smart contracts, and for now I wanted to get the tutorial complete. . ",
    "christoph2806": "see also here: https://github.com/ConsenSys/solidity-parser/issues/59; I have closed it there because it had been fixed already.\n. ",
    "Adonis2115": "I am facing exactly same issue. Please share solution if you find one.. @tcoulter  can you help?. ",
    "dotcypress": "Yes, tests with async/await is more readable.\nDefault test rewritten with ES6 features:\n```js\nconst MetaCoin = artifacts.require('./MetaCoin.sol')\ncontract('MetaCoin', (accounts) => {\n  it('should put 10000 MetaCoin in the first account', async () => {\n    const instance = await MetaCoin.deployed()\n    const balance = await instance.getBalance.call(accounts[0])\n    assert.equal(balance.valueOf(), 10000, \"10000 wasn't in the first account\")\n  })\n  it('should call a function that depends on a linked library', async () => {\n    const meta = await MetaCoin.deployed()\n    const outCoinBalance = await meta.getBalance.call(accounts[0])\n    const outCoinBalanceEth = await meta.getBalanceInEth.call(accounts[0])\n    assert.equal(\n      outCoinBalanceEth.toNumber(),\n      outCoinBalance.toNumber() * 2,\n      'Library function returned unexpected function, linkage may be broken'\n    )\n  })\n  it('should send coin correctly', async () => {\n    // Get initial balances of first and second account.\n    const account_one = accounts[0]\n    const account_two = accounts[1]\nconst meta = await MetaCoin.deployed()\n\nconst account_one_starting_balance = await meta.getBalance.call(account_one)\nconst account_two_starting_balance = await meta.getBalance.call(account_two)\n\nconst amount = 10\nawait meta.sendCoin(account_two, amount, {from: account_one})\n\nconst account_one_ending_balance = await meta.getBalance.call(account_one)\nconst account_two_ending_balance = await meta.getBalance.call(account_two)\n\nassert.equal(\n  account_one_ending_balance.toNumber(),\n  account_one_starting_balance.toNumber() - amount,\n  \"Amount wasn't correctly taken from the sender\"\n)\nassert.equal(\n  account_two_ending_balance.toNumber(),\n  account_two_starting_balance.toNumber() + amount,\n  \"Amount wasn't correctly sent to the receiver\"\n)\n\n})\n})\n```. ",
    "sebasgoldberg": "Hi @raineorshine , did you solve your problem for library linking to itself?\nI am using Truffle v4.1.13 (core: 4.1.13)/Solidity v0.4.24 (solc-js) and I get this error when try to deploy MyLib:\nError: MyLib contains unresolved libraries. You must deploy and link the following libraries before you can deploy a new version of MyLib: MyLib\n    at /usr/lib/node_modules/truffle/build/webpack:/packages/truffle-contract/contract.js:371:1\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)\n. @raineorshine, thanks for your response, but I am already have the library in a separate file.\nI think it is not possible yet a 'use' statement inside a library that references to itself:\nlibrary MyLib{\n  ...\n  use MyLib for MyType;\n  ...\n}\nI tried to deploy your example in remix, and was not possible.\nIf I remove the 'use' statement inside the library, and pass 'self' as parameter (inside the library too), then the deploy is possible.. Sorry, I was wrong.\nThe code compiles, but it is not possible to deploy.. ",
    "winksaville": "I'd also like to mention that the same old link is present on the GITTER ConsenSys/truffle page:\n\n. Closing as PR#317 is already provides the same fix.. ",
    "tyleryasaka": "I have run into the same issue.. ",
    "pwrstudio": "Encountering the same problem trying to return non-numeric data.. ",
    "marcosjbarroso82": "I got this answer from gitter and it seems to work:\nmi variable is:\nMember[] public members;\nand from javascript I read it like this:\nfor(uint i = 0; i < members.length; i++) { //do something here }\nthis way I read one item at a time.\nI hope it helps,. ",
    "gnom1gnom": "Sorry to repost, but perhaps I did not make myself clear. In my test case I try to check if event is generated.\n```\nit('SN is generating SNassigned event', function(done) {\n    var myMyContract = MyContract.deployed();\n    var MyContractEvents = myMyContract.allEvents();\n    var inputID = \"R051239874560002\";\nMyContractEvents.watch(function (error, result) {\n    if(error) {\n        console.err(error);\n    } else {\n        console.log(\"SNassigned callback: \" + result.args.sn.valueOf());\n        assert.equal(result.event, \"SNassigned\");\n        assert.equal(result.args._sender.valueOf(), web3.eth.accounts[0]);\n        assert.equal(result.args.sn.valueOf(), inputID);\n        MyContractEvents.stopWatching();\n        done();\n    }\n});\n\nvar myMyContractWeb3 = web3.eth.contract(myMyContract.abi);\nvar myMyContractWeb3Instance = myMyContractWeb3.at(myMyContract.address);\nvar assignIDCallData = myMyContractWeb3Instance.assignID.getData(inputID);\n\nweb3.eth.sendTransaction({\n    from: web3.eth.accounts[0],\n    to: myMyContract.address,\n    data: assignIDCallData\n});\n\n});\n``\nIf I usemyMyContract.assignID(inputID)_SNassigned_ event is not caught in watch handler. The above code works withweb3.eth.sendTransaction`. No. Truffle 2.1.1. Thank you! It works.. ",
    "rawadrifai": "@tcoulter - if I want to send a raw tx, how do I get the data value?\nI think getData should work but it's not for me.. solved in trufflesuite/truffle-hdwallet-provider#78. ",
    "mad2sm0key": "@rawadrifai Take a look at #381 and #10. ",
    "KennyVan": "This is not just the custom build that is broken.\nInitializing a new project and trying to run it is broken in general right now since Beta 8, I am now running Beta 7 pretty smoothly. ",
    "GNSPS": "+1. Thank you so much @cgewecke!! \ud83d\ude4c And sorry for the delay! Appreciated very much your prompt response! \ud83d\ude04. ",
    "oladotunr": "Thanks for this Tim,\nWill coordinate with Peter and test as we upgrade to 3.0.2.\nThanks for the excellent support.\nRegards,\nDotun Rominiyi\nDirector of Technology\nOwnage Ltd\nwww.ownage.iohttp://www.ownage.io\nFrom: Tim Coulter [mailto:notifications@github.com]\nSent: 01 February 2017 20:50\nTo: ConsenSys/truffle\nCc: Webmaster; Mention\nSubject: Re: [ConsenSys/truffle] Truffle Build (Custom) broken in beta (3.0.0-9) (#324)\nHey @ownageiohttps://github.com/ownageio et. al., can you recheck this with Truffle 3.0.2? Note that even if you were using 3.0beta you will still need to handle breaking changes when upgrading to 3.0.2. See the upgrade guidehttp://truffleframework.com/tutorials/upgrading-from-truffle-2-to-3 for more info.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/ConsenSys/truffle/issues/324#issuecomment-276777762, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AS_HSqA4Va0iOVkekM0CA4ApPs9cfkWqks5rYO_agaJpZM4La1eQ.\n. ",
    "RichLinnell": "I'm getting this error using Truffle v3.2.5. Is this no longer supported?\n. ",
    "DerekChia": "Same, getting the same error after init. Any idea why this error appears?. ",
    "acdcjunior": "This bug seems to be back in 3.3.0.. ",
    "tranvictor": "It turns out I used zeppelin to build up my contract and it has its own migration contract whose name exactly the same as truffle's migration contract. Thus it is replaced by zeppelin's one.\nThis is pretty tricky, I guess truffle should redesign the build/contracts directory structure so same name contracts don't replace each other.. @JGcarv In my case, I just removed the redundant migration contract from zeppelin. See my comment above for better explanation \ud83d\ude04 . ",
    "JGcarv": "Hi @tranvictor ! I'm facing the same issue. What did you do to solve it?\nThanks!. I see. That makes sense. Thanks @tranvictor !. ",
    "interfect": "I can confirm that this issue persists in Truffle v3.2.7, and has screwed up my live net deployment. The Zeppelin Migrations contract, which I don't use, gets built and clobbers the Truffle Migrations contract.\nThe two are just similar enough that migrations can run, if the migrations contract has not yet been deployed, but then subsequent attempts to run migrations fail with the incredibly uninformative:\n```\n$ truffle migrate\nUsing network 'development'.\nTypeError: Cannot read property 'call' of undefined\n    at \\npm\\node_modules\\truffle\\build\\cli.bundled.js:54937:49\n    at process._tickCallback (internal/process/next_tick.js:109:7)\n```\nTruffle should fail at the compile step if two contracts have the same name, because it can't do anything other than clobber one with the other.\nAlternately, \"Truffle\" should be sprinkled liberally throughout the migrations contract method names, to avoid giving the appearance of working when you have the wrong contract.. I can reproduce this (at least in migrations) on Truffle 4.1.3.\nI have a project with a dependency on the macroverse NPM module. In a migrations script I try to do:\nvar RealMath = artifacts.require(\"macroverse/contracts/RealMath.sol\");\nThis does not work.\nI can add a Workaround.sol to my project's contracts folder consisting of:\nimport \"macroverse/contracts/RealMath.sol\";\nIf I do that and a truffle compile, the dependency's contract is built into build/contracts/RealMath.json and is available to the migration script.\nI need to be able to use the JSON files in node_modules/macroverse/build/contracts/*.json from my dependent project, however, as those files from the dependency contain the mainnet addresses of the deployed contracts which the dependent project's migration scripts are going to need to have available. I am pretty sure this workaround results in new artifacts being built in build/contracts/*.json with empty networks fields.\nI used to be able to get at the dependency's artifacts as just artifacts.require(\"macroverse/RealMath.sol\"), in about Truffle 3.0. Since updating to 4.1.3 that hasn't worked and I haven't been able to find anything else that does. macroverse/build/contracts/RealMath.json and macroverse/build/contracts/RealMath don't work, for example. Also, there's the syntax shown in the documentation for use in migration scripts:\n// Note that artifacts.require takes care of creating an abstraction for us.\nvar SimpleNameRegistry = artifacts.require(\"example-truffle-library/SimpleNameRegistry\");\nThat would be macroverse/RealMath for me, which also doesn't work.\nThe other approach suggested in the documentation is something like:\nvar contract = require(\"truffle-contract\");\nvar RealMath = contract(require(\"macroverse/build/contracts/RealMath.json\"));\nThis lets me create something, but it's not the same type as what you get from artifacts.require, and in particular I'm not sure how to link or deploy it.\n. This is a blocker for me. Nobody is going to trust my deployed contracts if they can't verify them. How can I turn this optimization off?. @mtbitcoin, can you expose the \"runs\" parameter when verifying contracts on Etherscan?. Unfortunately, changing the \"runs\" value in Truffle won't help to verify\ncode that's already been deployed and is in use by others. But perhaps it\nshould be exposed as a per-project parameter in truffle.js, rather than\nrequiring users to edit the installed Truffle tool itself in order to set\nit.\nVerifying a contract with dependencies requires pasting all the imported\ncode into the verification text box, and deleting all the import\nstatements. It's awkward, but (if the compiler parameters are right) it\nworks.\nOn Fri, Jun 30, 2017 at 9:05 AM, Matt.Tan notifications@github.com wrote:\n\nFrom what i understand, solcjs has a \"runs\" value of 200, so if you can\ntruffle to also \"runs\" at \"200\" instead of \"0\" this will produce the same\ncode (see https://stackoverflow.com/questions/44704420/truffle-\ndeployed-contracts-cant-be-verified-through-etherscan)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/456#issuecomment-312307787,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAt5tv89Dh0z_4zqeymZJUnq1ZsbS9zZks5sJRzFgaJpZM4OCnr1\n.\n. My contract is now verified too: https://etherscan.io/address/0xAB6CF87a50F17d7F5E1FEaf81B6fE9FfBe8EBF84#code\n\nThanks for adding this feature, @mtbitcoin! . Contracts built with an unmodified Truffle can't be verified on Etherscan currently; we're waiting for Ehterscan to be updated to support a compiler option that Truffle passes.\nSee https://github.com/trufflesuite/truffle/issues/456#issuecomment-312476458. I'm having this on Truffle 4.0.1. I can't delete my build folder, because that's where I keep the deployed addresses of my live contracts.\nInterestingly, I'm getting this when calling a method inherited from a base contract, on only one of two derived contracts. Calling the same base method on the other contract works fine.\nDeleting the offending contract's json (which, luckily, is a contract I haven't deployed live yet) seems to have solved the problem for me.. Sorry, I'm completely unfamiliar with the build process you are referring to @kyriediculous.\nI've been building my dapp with Browserify to package up the truffle-contract module, and then invoking the module's constructor function that it exports according to https://github.com/trufflesuite/truffle/tree/next/packages/truffle-contract#usage which says to pass in the JSON data for the contract, which is precisely what the built .json files are, as far as I can tell. I could try and require them into the build instead of manually loading each file separately with a fetch, but all that will do is cram the JSON into my app's massive JS bundle somewhere; I don't think Browserify is actually clever enough to remove any of the unused information.\nMy intended deployment process is to put the resulting Browserify-built static site with Javascript up on a web server, and have that be the front-end for my Dapp. Users are supposed to use it with Metamask or Mist or some other web3-enabled web browsing solution.\nWhat build and distribution system/process are you using where there's no web server involved? Are you just writing a native app that talks to an Ethereum node?\n. The truffle contract JSONs are still huge.\n. I do not believe that this issue has yet been addressed.. ",
    "berlinguyinca": "I'm seeing the same issue here. ",
    "Ethbet": "We were having this issue as well, it was temporarily fixed by removing all built contracts from their directory. There still appear to be several bugs in this catagory in the latest version of truffle regardless.. ",
    "tmm360": "This should be reopened because is still an active issue. @tranvictor @tcoulter \nMy error on truffle migrate on Truffle v3.4.11 (core: 3.4.11):\n```\nUsing network 'development'.\nTypeError: Cannot read property 'call' of undefined\n    at C:\\Users\\mirko\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:72945:49\n    at \n    at process._tickCallback (internal/process/next_tick.js:188:7)\n```. Sorry, my fault... I've updated my code and appear to be solved. Will update if it isn't.. ",
    "louisgv": "I stumbled upon the same problem while trying to run truffle migrate. \nI got around it by removing the build directory, restart Ganache. Afterward truffle migrate runs smoothly \ntruffle version\nTruffle v4.0.4 (core: 4.0.4)\nSolidity v0.4.18 (solc-js)\nThis problem happens after a previous migrate run caused Ganache to crash. For some reason the build was invalid and thus it was trying to read from the previous build is my assumption. \nAnyway, cheer.. ",
    "kurthalex": "online doc is in another repo https://github.com/trufflesuite/truffleframework.github.io. ",
    "elopio": "You can find more information about snapcraft here: http://snapcraft.io/\nTo test it in an Ubuntu 16.04 machine:\n$ sudo apt install git snapcraft\n$ git clone https://github.com/elopio/truffle\n$ cd truffle\n$ git checkout snapcraft\n$ snapcraft\n$ sudo snap install *.snap --dangerous\n\nThis is just a simple yaml to help you get started. It needs more testing, and I am getting this error:\nError: Couldn't find preset \"es2015\"\nI don't know a lot about javascript, but I'd be happy to help you on the packaging side.\nIf you have any questions or comments, please let me know.. ping. Anyone around to review this?. What? \ud83d\ude30 no, not advertisement. \nIn my team we are writing snapcraft, and in order to validate our new features I'm constantly looking for interesting free projects to use them in a real world scenario. When we are done with the release, the snapcraft.yaml written for these test subjects is actually almost all of the effort required to put them in the Ubuntu store, so I send the PRs in case they want to make their software available there. The benefit for you as an upstream is that you can easily deliver your software to all of the Ubuntu users, and the benefit for us is that we can gather feedback from your experience with snaps and improve future releases. And then cycle starts again :)\nWe've already received some useful feedback from monero, openbazaar, cpp-ethereum, ipfs... Blockchain and distributed systems are a particular interest of mine, so I want us to provide a flawless experience for use cases like yours.\n@tcoulter I have a legitimate interest in making truffle easily available to all Ubuntu users. But I couldn't figure out how to solve that es2015 error. I would need some help from your side to get the packaging finished. I've just joined your gitter.. @tcoulter I ran out of imagination for commit messages after working in a couple of projects :p\nIt's all right, thanks for taking a look. \nAnd for when you start looking into distribution, take into account that here we are leveraging the ubuntu community to develop and improve the software in the store. There are a lot of testers on the community, so when you put an unstable version in the edge channel it will be only visible to these early adopters who will help polishing the release until it is stable and ready to be made publicly available. We increase our bandwidth with crowdtesting, to support all the different platforms, architectures and crazy configurations out there. It might be useful for you too, and we'd be happy to help.\npura vida. @tcoulter I am now maintaining the solidity snap in the Ubuntu store. I'm looking for other useful tools to accompany it, and got back to truffle. I'm now confident that I can maintain truffle along with solc, but it would simplify a lot my tasks if the snapcraft.yaml is in the same repo as the upstream code.\nWould you be ok merging it if I take care of maintaining it?\npura vida. ",
    "roderik": "Solved in the new version, disregard!. I would suggest giving everyone's ganache an unique network id. That way they should not conflict.. Indeed, same issue for me. I like to use event Debug(bool, bool, bool) for example to debug values in my smart contracts. event Debug(bool a, bool b, bool c) works like a charm. I ran into the same error. My issue was that I forgot to implement an abstract function.. Here you go: https://github.com/DataBrokerDAO/crowdsale-contracts. Hi @gnidan, the error was fixed already so I have no test branch. The issue is that for some reason it could not find source code. \nOk to close for now, will report (with test repos) any other errors i find :). Well, the built in one. truffle develop will start one on it's own. I have the same thing, for me, also truffle migrate without develop fails with this error.. Did some further testing.\n\nvia truffle console I ran web3.eth.getBlock('latest') \n\n{ number: 0,\n  hash: '0x477afbf81c6206f0cdda8f618ee4f494c4d22df82c2f3747ed5eebc756942ba8',\n  parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n  nonce: '0x0',\n  sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n  stateRoot: '0xf128b89f919eb9b9a39125d4b172674a2947f9ea34a0bcb6a72f7ec897d60ad3',\n  receiptRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n  miner: '0x0000000000000000000000000000000000000000',\n  difficulty: BigNumber { s: 1, e: 0, c: [ 0 ] },\n  totalDifficulty: BigNumber { s: 1, e: 0, c: [ 0 ] },\n  extraData: '0x0',\n  size: 1000,\n  gasLimit: 4712388,\n  gasUsed: 0,\n  timestamp: 1509545916,\n  transactions: [],\n  uncles: [] }\nNotice the gasLimit of 4.712.388\n\nThen I ran migrate using --verbose-rpc and this is the deploy \"Migrations\" part\n\n```\n\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 5,\n  \"method\": \"eth_sendTransaction\",\n  \"params\": [\n    {\n      \"from\": \"0x60480e2e94613ab3187b9debe80a7822024f7e57\",\n      \"gas\": \"0x6691b7\",\n      \"gasPrice\": \"0x174876e800\",\n      \"data\": \"0x6060604052341561000f57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506102e58061005e6000396000f300606060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630900f01014610067578063445df0ac146100a05780638da5cb5b146100c9578063fdacd5761461011e575b600080fd5b341561007257600080fd5b61009e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610141565b005b34156100ab57600080fd5b6100b3610229565b6040518082815260200191505060405180910390f35b34156100d457600080fd5b6100dc61022f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561012957600080fd5b61013f6004808035906020019091905050610254565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561019e57600080fd5b8190508073ffffffffffffffffffffffffffffffffffffffff1663fdacd5766001546040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b151561021157600080fd5b6102c65a03f1151561022257600080fd5b5050505050565b60015481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156102af57600080fd5b80600181905550505600a165627a7a72305820986ce3f04c906030d655d6a32d3e032bbe6a760f86ddec6d1402d535a23183100029\"\n    }\n  ]\n}\n <   {\n <     \"id\": 5,\n <     \"jsonrpc\": \"2.0\",\n <     \"error\": {\n <       \"message\": \"Error: Exceeds block gas limit\\n    at StateManager.queueTransaction (/src/build/cli.node.js:83114:21)\\n    at GethApiDouble.eth_sendTransaction (/src/build/cli.node.js:82631:14)\\n    at GethApiDouble.handleRequest (/src/build/cli.node.js:82434:10)\\n    at next (/src/build/cli.node.js:52153:18)\\n    at VmSubprovider.handleRequest (/src/build/cli.node.js:59291:12)\\n    at next (/src/build/cli.node.js:52153:18)\\n    at GethDefaults.handleRequest (/src/build/cli.node.js:82339:12)\\n    at next (/src/build/cli.node.js:52153:18)\\n    at FilterSubprovider.handleRequest (/src/build/cli.node.js:58850:7)\\n    at next (/src/build/cli.node.js:52153:18)\",\n <       \"code\": -32000\n <     }\n <   }\n``\n** Notice the\"gas\": \"0x6691b7\"` where that hex number is 6.721.975, so we need about 2 million more gas than the gasLimit.\n\nSome spelunking got me to https://github.com/trufflesuite/truffle/commit/463415e00124872798aed18012d52ef19e4d6181 where a test workaround was made, but I guess it did not deal with the source issue.\n. Ok, my issue was the same error but probably unrelated. v4 turned off the optimizer making the contracts bigger. If you use a standalone testrpc you need to set a higher gas limit like: -l 0xfffffffffff. We were hit by some the same issue, where strangely enough all our contracts deploy correctly, all of them have a completed network section in the json file, except the Migrations.json. We make heavy use of async/await so I happened on this issue and tried to figure out what was wrong. \nI started with a clean truffle init and running migrate worked like expected. \n```js\nvar Migrations = artifacts.require('./Migrations.sol');\nmodule.exports = function(deployer) {\n  deployer.deploy(Migrations);\n};\n```\nNow for the async version, we like to use:\n```js\nvar Migrations = artifacts.require('Migrations');\nasync function performMigration(deployer, network, accounts) {\n  await deployer.deploy(Migrations);\n}\nmodule.exports = function(deployer, network, accounts) {\n  deployer\n    .then(() => performMigration(deployer, network, accounts))\n    .catch(error => {\n      console.log(error);\n      process.exit(1);\n    });\n};\n```\nThis one does not work, nothing in the networks section.\n... \ud83e\udd26\u200d\u2642\ufe0f here goes an hour or two of trying things \ud83e\udd26\u200d\u2642\ufe0f ...\nWhat I noticed is that it has nothing to do with the async awaits, but with the artifacts.require.\nIn the original one, it requires ./Migrations.sol, and in our version just Migrations.\n```js\nvar Migrations = artifacts.require('Migrations');\nmodule.exports = function(deployer) {\n  deployer.deploy(Migrations);\n};\n``` \nThis does not work, and this does work:\n```js\nvar Migrations = artifacts.require('./Migrations.sol');\nasync function performMigration(deployer, network, accounts) {\n  await deployer.deploy(Migrations);\n}\nmodule.exports = function(deployer, network, accounts) {\n  deployer\n    .then(() => performMigration(deployer, network, accounts))\n    .catch(error => {\n      console.log(error);\n      process.exit(1);\n    });\n};\n```\nSo, now I only have to figure out why this does work for my other contracts, and not for the Migrations contract.\n. I've been hit by the same issue, but not on Infura.\nA project with 4 migration files, all \"saving artifacts\" work but the last one ends like this:\n```\nSaving successful migration to network...\n  ... 0x7208b4903b144324a1e14a875f7b63507ff69f9d5c689c9c029b19cac4d9ffe0\nSaving artifacts...\n.. long time nothing ..\nError: Invalid JSON RPC response: \"\"\n    at Object.InvalidResponse (/Users/roderik/Development/socialcurrency-dapi/node_modules/web3/lib/web3/errors.js:35:16)\n    at XMLHttpRequest.request.onreadystatechange (/Users/roderik/Development/socialcurrency-dapi/node_modules/web3/lib/web3/httpprovider.js:115:32)\n    at XMLHttpRequestEventTarget.dispatchEvent (/Users/roderik/Development/socialcurrency-dapi/node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (/Users/roderik/Development/socialcurrency-dapi/node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpRequestError (/Users/roderik/Development/socialcurrency-dapi/node_modules/xhr2/lib/xhr2.js:544:12)\n    at ClientRequest. (/Users/roderik/Development/socialcurrency-dapi/node_modules/xhr2/lib/xhr2.js:414:24)\n    at ClientRequest.emit (events.js:180:13)\n    at TLSSocket.socketErrorListener (_http_client.js:395:9)\n    at TLSSocket.emit (events.js:180:13)\n    at emitErrorNT (internal/streams/destroy.js:64:8)\n    at process._tickCallback (internal/process/next_tick.js:178:19)\nError: Invalid JSON RPC response: \"\"\n    at Object.InvalidResponse (/Users/roderik/Development/socialcurrency-dapi/node_modules/web3/lib/web3/errors.js:35:16)\n    at XMLHttpRequest.request.onreadystatechange (/Users/roderik/Development/socialcurrency-dapi/node_modules/web3/lib/web3/httpprovider.js:115:32)\n    at XMLHttpRequestEventTarget.dispatchEvent (/Users/roderik/Development/socialcurrency-dapi/node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (/Users/roderik/Development/socialcurrency-dapi/node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpRequestError (/Users/roderik/Development/socialcurrency-dapi/node_modules/xhr2/lib/xhr2.js:544:12)\n    at ClientRequest. (/Users/roderik/Development/socialcurrency-dapi/node_modules/xhr2/lib/xhr2.js:414:24)\n    at ClientRequest.emit (events.js:180:13)\n    at TLSSocket.socketErrorListener (_http_client.js:395:9)\n    at TLSSocket.emit (events.js:180:13)\n    at emitErrorNT (internal/streams/destroy.js:64:8)\n    at process._tickCallback (internal/process/next_tick.js:178:19)\nError: Invalid JSON RPC response: \"\"\n    at Object.InvalidResponse (/Users/roderik/Development/socialcurrency-dapi/node_modules/web3/lib/web3/errors.js:35:16)\n    at XMLHttpRequest.request.onreadystatechange (/Users/roderik/Development/socialcurrency-dapi/node_modules/web3/lib/web3/httpprovider.js:115:32)\n    at XMLHttpRequestEventTarget.dispatchEvent (/Users/roderik/Development/socialcurrency-dapi/node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (/Users/roderik/Development/socialcurrency-dapi/node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpRequestError (/Users/roderik/Development/socialcurrency-dapi/node_modules/xhr2/lib/xhr2.js:544:12)\n    at ClientRequest. (/Users/roderik/Development/socialcurrency-dapi/node_modules/xhr2/lib/xhr2.js:414:24)\n    at ClientRequest.emit (events.js:180:13)\n    at TLSSocket.socketErrorListener (_http_client.js:395:9)\n    at TLSSocket.emit (events.js:180:13)\n    at emitErrorNT (internal/streams/destroy.js:64:8)\n    at process._tickCallback (internal/process/next_tick.js:178:19)\n```\nWhat is similar to infura is that the node I target is a load balancer in front of 2 parity nodes running a PoA network. (actually, there are 2 networks configured exactly the same, both behave the same way)\nIn this project it is an \"always\" error.. I am indeed using HDWalletProvider configured like:\nmintnet: {\n      provider: () => {\n        return new HDWalletProvider(\n          process.env.ETHEREUM_DEPLOYER_SEED,\n          'https://mintnet.settlemint.com'\n        )\n      },\n      gasPrice: 0x00,\n      network_id: '8995',\n    },\nYou are mentioning a client but I'm a bit confused about what you mean by that. HDWalletProvider polls, so it is an HTTP request that gets a response and then closes the connection. The Parity node and/or the loadbalancer do not stop answering, so polling at any time for new blocks should just work.\nGoing by the error message, usually means that I forgot to turn on ganache when developing, makes me think that in that last phase, it tries to connect to a different network / endpoint. \nI also tried the network config without the function, similar result. It still hangs, but I do not get the error messages. \nDigging deeper!. Already a small observation:\nI added a console log in HDWalletProvider to log the rpc url used in the constructor.\nusing provider: new HDWalletProvider(), it cleanly logs the URL once\nusing provider: () => return new HDWalletProvider(), it logs the url multiple times per migration (2x per artifact.require) \nSeems like the () => form is not such a good idea. @cgewecke as @Warrantoken mentioned, it does not solve the hanging issue.\nI've found a way for you to trigger this issue, that will make it a lot easier to try and find the root cause. This repo (a token sale) triggers the bug: https://github.com/DataBrokerDAO/dtx-crowdsale-contracts\nYou can trigger it by running: (0 gas, 5s blocktime, Parity-based PoA network)\nETHEREUM_DEPLOYER_SEED=\"help help help help help help help help help help help help\" darq-truffle migrate --reset --network mintnet\nExplorer: https://explorer.mintnet.settlemint.com/\nNetstats: https://stats.mintnet.settlemint.com/\nAn observation already, if I enable migration 1_ and 2_ it does not hang. If I enable another one (i did 14_ now) it hangs.. @cgewecke fixed in all my projects! \nAnd feel free to use mintnet if you want, happy to give something back for all the work! If you really want to mess around, replace mintnet in all URL's to minttestnet, exact same setup, fewer production apps :). why stop at a dozen, go nuts, make those nodes sweat! :). I think you need to make them public before they go into the ABI. @gnidan this is the loss of information issue I mentioned during TruffleCon. I had intermittent failures today. Maybe it should not block on these?. It is down again, and it tries to call this url even when using the docker version . Are you testing this with a migration file that does not deploy any contracts? For me, this is still not working as it is supposed to.. See https://github.com/trufflesuite/truffle/issues/1252. Here you go: https://github.com/trufflesuite/truffle/pull/1380. @sneko, you are probably missing the require(\"ts-node/register\"); line mentioned in the setup at https://github.com/ethereum-ts/truffle-typechain-example. Thanks for catching the missing require, forgot to copy paste that line in the commit :). ",
    "ryana": "@roderik great explanation and thank you for filing this issue and self-closing.\nI came into this after Feb 5, so I've only ever known a world where this solution exists, so to enlighten me could you either explain or point me to an explanation of what this solution was? My hunch is that before Feb 5, the build/contracts directory didn't exist, and adding it fixed your problem.\nI'm running into a related problem which is that multiple contributors to a dapp keep overwriting parts of build/contracts files each time they deploy to their local testrpc. I'd like some way to keep the behavior you were initially seeking, but also ignore local deployment changes if possible to avoid messy commit histories.. ",
    "barryWhiteHat": "Let me make a cut down version. ;-). ```\ncontract('TimeLock: ', function(accounts) {\nit(\"case 1\", function() {\n    tl = TimeLock.deployed()\nvar owner = accounts[0];\nvar n = \"115445564387450941991481732409838921121340329898388495706040442841335199756800587903149000898261945340856676784874918657347633307906756071132017391584489476929371087400989053221067789100989201919954123911970375286114309401587894170767865638539376215996124429737040410789718880530497880688634519689153366810989\";\ntl.AddKey(owner,n)\n\n});\nit(\"case 2\", function() {\n    tl = TimeLock.deployed()\n    var owner = accounts[0];\n    var n = 115445564387450941991481732409838921121340329898388495706040442841335199756800587903149000898261945340856676784874918657347633307906756071132017391584489476929371087400989053221067789100989201919954123911970375286114309401587894170767865638539376215996124429737040410789718880530497880688634519689153366810989;\n    tl.AddKey(owner,n)\n  });\n/*  it(\"case 3\", function() {\n    tl = TimeLock.deployed()\nvar owner = accounts[0];\nvar n = 123;\ntl.AddKey(owner,n)\n\n}); */\n});\n```\n```\npragma solidity ^0.4.8;\ncontract TimeLock {\n    function TimeLock() {\n    }\nfunction AddKey(address owner, uint256 PubKey) returns(uint) {\n    throw;\n}\n\n}\n```\nCase 1 and 2 pass when they should fail. Case 3 fails which is the expected behavior. I reinitialized my truffle project and copied the test and contract over.. ",
    "LogvinovLeon": "I did truffle install example-package-standard-token and copied the code to my contracts folder, cause Token contract there had the filename AbstractToken.sol and truffle didn't handle it correctly.. Talking about the first part of this issue: (Every truffle command takes at least 4 seconds)\nI profiled the code and ~60% of time is spent in a C++ function which parses the module.\nHere is the profiler output\nIt means, that the dependency tree is too big and it takes a lot of time for node to load all the modules.\nNot all this code is required every time we run truffle, so the solution would be to make some of requires lazy. This will cut huge parts of dependency tree and load them on-demand.\nNode made the decision, that require should not be lazy, because it was designed for writing web-serers, where startup-time is less important than latency, but if you use require inside of a function it is not executed before you actually call the function.\nI propose to split by command, cause it's the most natural way to do it. We don't need to load a compiler dependencies on truffe version run.\nI already tested that approach on my computer and it speeds up a lot.\nFor example the execution time for truffle version:\n* Before\n```\nTruffle v3.0.4\nreal    0m4.759s\nuser    0m4.112s\nsys 0m0.337s\n* After\nTruffle v3.0.4\nreal    0m0.439s\nuser    0m0.404s\nsys 0m0.055s\n```\nHere is my diff\nIt just moves required inside of a run function for commands.\nIf you hae better ideas, I'm happy to discuss them.\nI had an idea of making the file /lib/commands/index.js the splitpoint by replacing for example\ncompile: require(\"./compile\"), \nwith\ncompile: () => require(\"./compile\"),\nbut this is currently not possible, cause we need all the command info for yargs.\n. Talking about the second part of this issue: (Contracts are recompiled every time we run the tests)\nI wrote an example implementation that caches the precompiled contracts in tests.\nIt's not perfect and it's a subject to discussion, but I personally am happy with that and I'm getting faster test runs.\nFirst I used temp directory compiled_test_contracts to store compiled contracts.\nThe directory is in system-specific location outside of the project folder.\nAfter implementing that I experienced an error, because Contracts.compile didn't return the paths. It has a callback with three arguments (error, abstractions, paths).\nIt's because in truffle-compile/index.js:118 we call the same callback with no arguments.\nI tried to call that callback with an empty array of paths, but had a problem, that a second test run failed, because the dependencies were not linked.\nSo I just added some code for getting required deps, that does not require on paths and it started to work.\nI understand, that that is not a perfect solution and I'm opened for a discussion.. I think it's still valid. What about truffle console and truffle create?. ",
    "john-osullivan": "In case somebody else is Googling and comes across this issue, I got this error when I used the internal visibility modifier on a constructor function -- keep 'em public!. Another confirmation for the pile -- saw the same bug, fixed it by naming the event params.. ",
    "anirudh16b": "Solidity Contract:\nfunction userStoryTokenCalc(\n   address _userStoryAddress, uint[] memory factors, bytes32[] memory factorName) public returns (bool)\nAngular 6, web3@0.20.5: Function call to aboce instance method:\ninstance.userStoryTokenCalc(userStoryAddress,range,FactorListName,{gas: 3000000, from:  window.web3.eth.accounts[0]})\nI am still getting this error even with visibility as \"public\"\n. ",
    "fabioberger": "Just saw you fixed the version! Thanks!. Wow! Nice, I tested this out locally and got a similarly impressive bump in the speed:\n```\n$ time truffle version\nTruffle v3.1.1\nreal    0m0.445s\nuser    0m0.304s\nsys 0m0.064s\n```. ",
    "mcqj": "Fixed by 3.0.3. ",
    "zie1ony": "It takes up to 2s to load solc module. I made small PR: https://github.com/trufflesuite/truffle-compile/pull/19 to fix it.. In order not to compile every time you test, make sure your build/contracts is up to date. If it's not, then truffle test will compile changed *.sol files to have latest version in /tmp/test-....\nTake a look:\n```\n/code # truffle compile\nCompiling ./contracts/TokenMarket.sol...\nWriting artifacts to ./build/contracts\n/code # truffle compile\n/code # truffle test\nUsing network 'development'.\nContract: TokenMarket\n    \u2713 should allow to check day of sale (861ms)\n  1 passing (2s)\n/code # echo \" \" >> contracts/TokenMarket.sol\n/code # ./truffle test\nUsing network 'development'.\nCompiling ./contracts/TokenMarket.sol...\nContract: TokenMarket\n    \u2713 should allow to check day of sale (931ms)\n  1 passing (2s)\n/code # ./truffle test\nUsing network 'development'.\nCompiling ./contracts/TokenMarket.sol...\nContract: TokenMarket\n    \u2713 should allow to check day of sale (713ms)\n  1 passing (2s)\n/code # ./truffle compile\nCompiling ./contracts/TokenMarket.sol...\nWriting artifacts to ./build/contracts\n/code # ./truffle test\nUsing network 'development'.\nContract: TokenMarket\n    \u2713 should allow to check day of sale (962ms)\n  1 passing (2s)\n/code # \n```\nSo best way to avoid unnecessary compilation is test with: truffle compile && truffle test.\nHope that helps. . ",
    "troggy": "truffle compile && truffle test is not working for me. It still recompiles everything. For now, I opted to the workaround by @LogvinovLeon . ",
    "Zolmeister": "truffle v4.0.0-beta2 patch file\n```patch\n301525c301525,301527\n<       temp.mkdir('test-', function(err, temporaryDirectory) {\n\n\n  var temporaryDirectory = require('path').join(temp.dir, 'compiled_test_contracts');\n  var mkTmpDir = cb=>!fs.existsSync(temporaryDirectory) ? fs.mkdir(temporaryDirectory, cb) : cb()\n  mkTmpDir(function(err) {\n\n```. @isaacserafino the PR needs to be merged - https://github.com/trufflesuite/truffle-core/pull/75. @owocki waiting for review - https://github.com/trufflesuite/truffle-core/pull/75. @owocki I'm afraid that might cause it to take longer. It's already been 2 months to review a 22-line change (which significantly improves user experience).. \n",
    "gitcoinbot": "This issue now has a funding of 2.0 ETH (655.93 USDT) attached to it.  To view or claim this funding, click here.. The funding of 2.0 ETH (1446.9 USD) attached has been claimed by @ahmadposten. \n@ahmadposten, please leave a comment to let the funder (@owocki) and the other parties involved your implementation plan.  If you don't leave a comment, the funder may expire your claim at their discretion. \n\nLearn more on the gitcoin issue page\nQuestions? Get help on the Gitcoin Slack\n$10414.12 more Funded OSS Work Available at: https://gitcoin.co/explorer\n. The funding of 2.0 ETH (1770.69 USD) attached has been claimed . \n\nIf you are the claimee, please leave a comment to let the funder (@owocki) and the other parties involved your implementation plan.  If you don't leave a comment, the funder may expire your claim at their discretion. \n\nLearn more on the gitcoin issue page\nQuestions? Get help on the Gitcoin Slack\n\n$13523.62 more Funded OSS Work Available at: https://gitcoin.co/explorer\n. The funding of 2.0 ETH (1770.69 USD) attached to this issue has been approved & issued . \n\n\nLearn more at on the gitcoin issue page\n\nQuestions? Get help on the Gitcoin Slack\n$11752.93 more Funded OSS Work Available at: https://gitcoin.co/explorer\n. This issue now has a funding of 1.25 ETH (409.96 USDT) attached to it.  To view or claim this funding, click here.. This issue now has a funding of 1.0 ETH (327.96 USDT) attached to it.  To view or claim this funding, click here.. The funding of 1.0 ETH attached to this issue has been approved & issued. \n\nLearn more at: https://gitcoin.co/funding/details?url=https://github.com/trufflesuite/truffle/issues/632. This issue now has a funding of 0.1 ETH (32.8 USDT) attached to it.  To view or claim this funding, click here.. The funding of 0.1 ETH attached to this issue has been approved & issued. \nLearn more at: https://gitcoin.co/funding/details?url=https://github.com/trufflesuite/truffle/issues/680. This issue now has a funding of 0.2 ETH (150.09 USD @ $750.43/ETH) attached to it.\n\nIf you would like to work on this issue you can claim it here.\nIf you've completed this issue and want to claim the bounty you can do so here\nQuestions? Get help on the Gitcoin Slack\n$6649.22 more Funded OSS Work Available at: https://gitcoin.co/explorer\n. Work has been started on the 0.2 ETH (84.47 USD @ $422.33/ETH) funding by: \n@vladfr \n\nPlease work together and coordinate delivery of the issue scope. Gitcoin doesn't know enough about everyones skillsets / free time to say who should work on what, but we trust that the community is smart and well-intentioned enough to work together.  As a general rule; if you start work first, youll be at the top of the above list ^^, and should have 'dibs' as long as you follow through. \nOn the above list? Please leave a comment to let the funder (@skmgoldin) and the other parties involved what you're working, with respect to this issue and your plans to resolve it.  If you don't leave a comment, the funder may expire your submission at their discretion. \n\nLearn more on the gitcoin issue page\nQuestions? Get help on the Gitcoin Slack\n$4011.48 more Funded OSS Work Available at: https://gitcoin.co/explorer\n. Work for 0.2 ETH (131.56 USD @ $657.81/ETH) has been submitted by: \n@vladfr \n\nSubmitters, please leave a comment to let the funder (@skmgoldin) (and the other parties involved) that you've submitted you work.  If you don't leave a comment, the funder may expire your submission at their discretion. \n\nLearn more on the gitcoin issue page\nQuestions? Get help on the Gitcoin Slack\n\n$5453.56 more Funded OSS Work Available at: https://gitcoin.co/explorer\n. The funding of 0.2 ETH (77.04 USD @ $385.18/ETH) attached to this issue has been approved & issued to @vladfr. \n\n\nLearn more at on the gitcoin issue page\n\nQuestions? Get help on the Gitcoin Slack\n$2561.07 more Funded OSS Work Available at: https://gitcoin.co/explorer\n. Issue Status: 1. Open 2. Started 3. Submitted 4. Done \n\n\nThis issue now has a funding of 300.0 DAI (300.0 USD @ $1.0/DAI)  attached to it.\n\nIf you would like to work on this issue you can 'start work' on the Gitcoin Issue Details page.\nWant to chip in? Add your own contribution here.\nQuestions? Checkout Gitcoin Help or the Gitcoin Slack\n$20,433.54 more funded OSS Work available on the Gitcoin Issue Explorer\n. Issue Status: 1. Open 2. Started 3. Submitted 4. Done \n\n\nWork has been started.\nThese users each claimed they can complete the work by 1\u00a0month, 1\u00a0week from now.\nPlease review their action plans below:\n1) evgeniuz has been approved to start work.\nI\u2019m interested in both projects, would like to work on integration.\nLearn more on the Gitcoin Issue Details page.\n. @evgeniuz Hello from Gitcoin Core - are you still working on this issue? Please submit a WIP PR or comment back within the next 3 days or you will be removed from this ticket and it will be returned to an \u2018Open\u2019 status. Please let us know if you have questions!\n [x] warning (3 days)\n [ ] escalation to mods (6 days)\nFunders only: Snooze warnings for 1 day | 3 days | 5 days | 10 days | 100 days. @evgeniuz Hello from Gitcoin Core - are you still working on this issue? Please submit a WIP PR or comment back within the next 3 days or you will be removed from this ticket and it will be returned to an \u2018Open\u2019 status. Please let us know if you have questions!\n [x] warning (3 days)\n [ ] escalation to mods (6 days)\nFunders only: Snooze warnings for 1 day | 3 days | 5 days | 10 days | 100 days. @evgeniuz Hello from Gitcoin Core - are you still working on this issue? Please submit a WIP PR or comment back within the next 3 days or you will be removed from this ticket and it will be returned to an \u2018Open\u2019 status. Please let us know if you have questions!\n [x] warning (3 days)\n [ ] escalation to mods (6 days)\nFunders only: Snooze warnings for 1 day | 3 days | 5 days | 10 days | 100 days. @evgeniuz Hello from Gitcoin Core - are you still working on this issue? Please submit a WIP PR or comment back within the next 3 days or you will be removed from this ticket and it will be returned to an \u2018Open\u2019 status. Please let us know if you have questions!\n [x] warning (3 days)\n [ ] escalation to mods (6 days)\nFunders only: Snooze warnings for 1 day | 3 days | 5 days | 10 days | 100 days. Issue Status: 1. Open 2. Started 3. Submitted 4. Done \n\n@evgeniuz due to inactivity, we have escalated this issue to Gitcoin's moderation team. Let us know if you believe this has been done in error!\n\n[x] warning (3 days)\n[x] escalation to mods (6 days)\n\nFunders only: Snooze warnings for 1 day | 3 days | 5 days | 10 days | 100 days. @evgeniuz Hello from Gitcoin Core - are you still working on this issue? Please submit a WIP PR or comment back within the next 3 days or you will be removed from this ticket and it will be returned to an \u2018Open\u2019 status. Please let us know if you have questions!\n [x] warning (3 days)\n [ ] escalation to mods (6 days)\nFunders only: Snooze warnings for 1 day | 3 days | 5 days | 10 days | 100 days. @evgeniuz Hello from Gitcoin Core - are you still working on this issue? Please submit a WIP PR or comment back within the next 3 days or you will be removed from this ticket and it will be returned to an \u2018Open\u2019 status. Please let us know if you have questions!\n [x] warning (3 days)\n [ ] escalation to mods (6 days)\nFunders only: Snooze warnings for 1 day | 3 days | 5 days | 10 days | 100 days. @evgeniuz Hello from Gitcoin Core - are you still working on this issue? Please submit a WIP PR or comment back within the next 3 days or you will be removed from this ticket and it will be returned to an \u2018Open\u2019 status. Please let us know if you have questions!\n [x] warning (3 days)\n [ ] escalation to mods (6 days)\nFunders only: Snooze warnings for 1 day | 3 days | 5 days | 10 days | 100 days. Issue Status: 1. Open 2. Started 3. Submitted 4. Done \n\nWork for 300.0 DAI (300.0 USD @ $1.0/DAI) has been submitted by:\n\n@evgeniuz\n\n@vs77bb please take a look at the submitted work:\n* PR by @evgeniuz\n\n\nLearn more on the Gitcoin Issue Details page\nWant to chip in? Add your own contribution here.\nQuestions? Checkout Gitcoin Help or the Gitcoin Slack\n$41,766.41 more funded OSS Work available on the Gitcoin Issue Explorer. Issue Status: 1. Open 2. Started 3. Submitted 4. Done \n\n\nThe funding of 300.0 DAI (300.0 USD @ $1.0/DAI)  attached to this issue has been approved & issued to @evgeniuz. \n\nLearn more on the Gitcoin Issue Details page\nQuestions? Checkout Gitcoin Help or the Gitcoin Slack\n$40,703.81 more funded OSS Work available on the Gitcoin Issue Explorer\n. Issue Status: 1. Open 2. Started 3. Submitted 4. Done \n\n\nThe funding of 300.0 DAI (300.0 USD @ $1.0/DAI)  attached to this issue has been approved & issued to @evgeniuz. \n\nLearn more on the Gitcoin Issue Details page\nQuestions? Checkout Gitcoin Help or the Gitcoin Slack\n$40,703.81 more funded OSS Work available on the Gitcoin Issue Explorer\n. \n",
    "isaacserafino": "Question: It looks like Zolmeister indicated he fixed this a couple of hours after it was funded. But, it doesn't look like he claimed the funding. Does it no longer need fixed, or is it still available?. @Ahmadposten I was in a similar position as you. I defer to @Zolmeister . Thank you. :). ",
    "owocki": "looks like the next step is for @tcoulter to do a PR review on https://github.com/trufflesuite/truffle-core/pull/75 -- after that, if the team approves, i can payout the funding. @Zolmeister  sorry for radio ssilence.. looks like @tcoulter responded on https://github.com/trufflesuite/truffle-core/pull/75. @Ahmadposten \ud83d\udc4b  please introduce yourself.  given that there's work ongoing here already... you might want to say hey to @isaacserafino and @Zolmeister et all and see if you can contribute . hey @Ahmadposten i just rejected your claim over at https://gitcoin.co/funding/details?url=https://github.com/trufflesuite/truffle/issues/343 since it looks like @Zolmeister is still lead on this.  let me know if any concerns.\n@Zolmeister want to claim the funds at https://gitcoin.co/funding/details?url=https://github.com/trufflesuite/truffle/issues/343 ? \nill ping the truffle folks today to see if theres any more review to be done!  @benjamincburns @tcoulter i believe @Zolmeister needs a review over at https://github.com/trufflesuite/truffle-core/pull/75. hey @Zolmeister still interested in this?. @Zolmeister thanks.. mind claiming the issue at https://gitcoin.co/funding/details?url=https://github.com/trufflesuite/truffle/issues/343 ?. @stevejaxon @tcoulter lmk what you think of the above \u261d\ufe0f \n@kingcocomango great to have you!. defer to @stevejaxon on this.  im just here to facilitate the bounty!. hey @tcoulter -- @stevejaxon did you see @kingcocomango 's comment above?  \nwas going through the active gitcoin.co bounties and just wanted to make sure everyone had what they needed here.  lmk!. just checking in here folks.  let me know if/when youll have time to check on this :). @gnidan just making sure u saw this ^^. just asked about this on consensys slack.  . ping me when u make that change @kingcocomango -- thanks! . looks like there are outstanding comments on https://github.com/trufflesuite/truffle-deployer/pull/14\nand https://github.com/trufflesuite/truffle-contract-schema/pull/19 is good to merge.. as is https://github.com/trufflesuite/truffle-contract/pull/76\n@kingcocomango let me know if this is your understanding as well. sorry for the slow response @gnidan -- ETHDenver ate my inbox.  paying out now ( https://etherscan.io/tx/0xd7d9d4931627d9cfdb49eeacd97a117cb8bd3b7f672ddbbcf8d81995452a2c62 ). hey @tcoulter -- i'm on a call with @gnidan trying to figure out whether we want to place a bounty on this.  is this still active?  would you mind commenting to describe what this is a little more?. ah ok, will close it. Is anyone able to create reproduction steps for this issue?  Looks like the OG desc has some good stuff on it, but it'd be helpful for me to know exactly how to repro.. could you add reproduction steps to this issue?. hey @scboffspring im remitting the bounty now :). ",
    "fluffypomeranian": "@owocki @tcoulter lmk if it bounces :D. ",
    "Ahmadposten": "@isaacserafino @Zolmeister I found out about this issue through gitcoin looking at the issue now I can see that you submitted PRs already \nIs there anything I can help with? . ",
    "vs77bb": "@owocki @Zolmeister To check in here, looks like the issue is still listed as Open on Gitcoin. Zoli - can you claim / Kevin, is this something on our side? Happy new year, all! . @Zolmeister Should you need gas to make the claim, DM me your MetaMask account info on slack and I can send some over :) . @Zolmeister Congrats on completion! One of the biggest outbound bounties yet. Please feel free to DM us on Slack with any suggestions about the process, we'd love to hear from you. . @owocki @kingcocomango Checking in - did the loop close here? I'm new to the Gitcoin squad joining Kevin, Happy New Year everyone!  . @kingcocomango @gnidan @owocki Almost at the finish line here \ud83d\ude42  any update, friends? . @kingcocomango Thanks for the update. @gnidan Does this get us over the finish line? . Hi @skmgoldin @vladfr is this one still WIP? I see it's in a Work Submitted status on Gitcoin, but perhaps is still pending merge? Hope you both are doing well \ud83d\ude42 . @evgeniuz Glad to see you here! You've been approved. Thanks for the detail and prior work, @fubuloubu :) . Hi @evgeniuz sorry for Gitcoin Bot's craziness here (we're looking into it -- cc @mbeacom / SaptakS). Noticed you are keeping up with the PR so these comments shouldn't have happened; snoozing it for 10 days now. . ",
    "benjamincburns": "@Zolmeister go ahead and register your claim with the link that @owocki provided. I'm terribly sorry for the long delay on this. You clearly deserve this bounty.. @deviant32, @nocow4bob, and if @atelomycterus also lost funds to this problem, you as well...\nBy any chance would each of you be willing to sit down and chat with me about how you lost your ETH? I want to make sure that we understand in depth what happened. There are certainly some obvious things we can be doing to improve, and we're working on those now, but I want to make sure that we're not missing the forest for the trees.\nIf you're willing, you can quickly/easily self-schedule a time to meet on my calendly page. It'll block off 60 minutes from my calendar, but we can keep it brief if you have less time than that. Thanks in advance!. @cgewecke & @barakman & others having this issue: I haven't dug into this too deeply, but my guess is that either Truffle or the tests in question are creating new instances of provider very frequently.\nOptimal resource management would be to take advantage of HTTP keep alive by reusing provider instances between tests rather than recreating them.\nI can say from experience that sending Connection: close in the request or explicitly closing the client socket only kicks the can down the road for this problem as you'll still exhaust the local address space due to ports sitting in FIN_WAIT.. @Stradivario I haven't had a chance to read this fully yet, but I can tell just at a glance that this is a great bug report - thanks! In fact, it looks like the changes I just made to the ganache-cli issue template have some of the same things you've added here.. @Stradivario Ganache 1.0.3 isn't out yet - perhaps you meant 1.0.2?. @Stradivario if you post a link to your project repro or to a throwaway repo containing an example reproduction I'll run it. In the mean time, your migrations file is missing, so I can't go much further.\nMy best guess at this point is that you haven't set the startTime and/or endTime correctly, per the validPurchase function.. Another tip: you can debug this yourself with truffle debug. This tutorial will show you how it's done.\nAlso have a look at the truffle testing docs - you shouldn't be using hardcoded addresses, etc, as you've done above.. @Stradivario glad to hear you've got it working.\nBear in mind that the default gas limit for transactions is 90000 so you'll need to set the gas parameter on anything which consumes more than that. Have a search around for eth_estimateGas or web3.eth.estimateGas and that'll help out a great deal.  Also tools like truffle-contract are great for this - they'll automatically call eth_estimateGas for you before running the transaction so that you don't need to worry about finding the exact gas cost ahead of time.. You might also be wondering \"why did it revert instead of fail with 'Out of gas?'\" The best I can tell is that before running some operations the solidity runtime checks whether or not you've allowed enough gas for that operation to succeed and reverts if not. This saves you the cost of the transaction failure, but makes debugging the problem a little difficult.. > The tests run fine with ganache-cli\nWhat version of ganache-cli are you working with?. Turns out we didn't have the reason string in the ganache-core log (which in turn feeds the Ganache log view), so I added it just now. https://github.com/trufflesuite/ganache-core/commit/8d311f3245d510a90407ee1d1bccfb33756fface\nNot sure when this will make it out for release - I'd guess sometime in the next couple of weeks. That said I'm in the process of automating our releases so that we'll be able to push out smaller improvements like this more frequently.. Example of how this functionality might be used:\n```javascript\nconst prompt = require('prompt');                                                                                      \nconst fs     = require('fs');                                                                                          \nconst Wallet = require('ethereumjs-wallet');prompt.start();                                                            \nconst pify = require('pify');               \n// fork of truffle-hdwallet-provider which accepts a private key as the first argument\n// see https://github.com/rhlsthrm/truffle-hdwallet-provider-privkey for more info\nconst HDWalletProvider = require('truffle-hdwallet-provider-privkey');                                                                             \nvar schema = {                                                                                                         \n    properties: {                                                                                                      \n        walletFilename: {                                                                                              \n            //validator: /^[a-zA-Z0-9-]+$/,                                                                           \n            //warning: 'Wallet name must be only letters, numbers or dashes',                                          \n            required: true,                                                                                            \n        },                                                                                                             \n        password: {                                                                                                    \n            hidden: true,                                                                                              \n            required: true,                                                                                            \n        }                                                                                                              \n    }                                                                                                                  \n};                                                                                                                       \nmodule.exports = {                                                                                                     \n  networks: {                                                                                                          \n    mainnet: {                                                                                                         \n      provider: async () => {                                                                                          \n        let result = await pify(prompt.get)(schema)                                                                      \n    let strJson = fs.readFileSync(result.walletFilename, 'utf8');                                                    \n    let wallet  = Wallet.fromV3(strJson, result.password);\n\n    this.privKey = wallet.getPrivateKey();\n\n    return new HDWalletProvider([privKey.toString('hex')], 'https://mainnet.infura.io:8545');                             \n  },                                                                                                                 \n  network_id: \"1\"                                                                                                    \n}\n\n}                                                                                                                    \n};\n```. @coventry why fork?\nEither way, I imagine it'd be almost trivial to write an abstract provider which calls an init method on the first call to send. You'd probably want to add some kind of locking mechanism to it so that you don't init multiple times in the case that multiple calls get pipelined. I'll see about adding one somewhere once the EIP-1193 dust settles, provided nobody else beats me to the punch.. Crap - for code consistency I'm wondering if I should've just used the callback pattern rather than returning promises... I at least avoided use of the async and await keywords.. Please wait for response in thread rather than opening duplicate issues.. to avoid breaking things I'd also be happy with const eventGenerator = myContract.EventName({}).toAsyncEventGenerator(); or some such.... I don't know if this module is published anywhere, but this is probably the gist of what we'd need to do this:\nhttps://github.com/KeithHenry/event-generator/blob/master/event-generator.js. Sadly the build is still friggin' huge (1.8M JS file, 5.4M source mapping file). We'll definitely need to prune the build sometime soon, but this should be a good stopgap for now.. Looks like this duplicates #1255. Since this one has no conflicts, maybe it should be preferred? That said, I think there was more to Chris' commits than just bumping the package version.... @DavidBurela thanks for the tip - I just realized that in my haste I didn't add tests for this!\nI did however test manually and struct returns also seem to work.. Soooo the test that's failing is doing so due to a bug that I didn't introduce.\nIf you change the highlighted line to assert result.logs.length instead of result.receipt.logs.length it fails on this branch, and next. Why would the length of result.logs differ from result.receipt.logs, you ask? It's because when we decode logs we silently drop them if we can't find their ABI (logic for that is here and here). There isn't a more graceful fallback mechanism, it seems.\nI thought linking was supposed to take care of this, so I tried adding a link step to the test's migration. Unfortunately it looks to me like deployer.link only solves this in the case where we have a contract depending on a library. In the case of this test we have a contract depending on another contract, and it seems deployer.link ignores the relationship between the two.\nI feel like fixing this is outside the scope of this PR. That said, I'd really like to see this PR accepted. If we're willing to accept a solution which changes decodeLogs to keep raw logs which it can't decode, then I can add that here and this test will be happy. Otherwise I think a separate PR would be necessary to make linking support contract -> contract.. This will likely be fixed by #1543.. Users experiencing this problem or other invalid provider issues should pin their web3 dependency to 1.0.0-beta.37 until a workaround for ethereum/web3.js#2266 is developed. I'd advise users impacted by this issue to voice their concerns  over on that thread.\nethereum/web3.js#2266, which was introduced in web3@1.0.0-beta.38 and at time of writing is still present in the current version of web3.\nTo confirm this was the cause of the issue, we asked @dan-turner to pin his web3 dependency to 1.0.0-beta.37 (was previously ^1.0.0-beta.35). This corrected the problem. We think that this was likely resolving to some version of web3 that is >=1.0.0-beta.38. \nThere's an outside chance that this was actually caused by other truffle breaking bugs that were present in web3@1.0.0-beta.36, but these issues were fixed in the 1.0.0-beta.37 release.. Closing this issue, as it's redundant to the one over on the web3 issue tracker.. Actually, it's a bug that the error from ethereum/web3.js#2266 didn't bubble up to the user in any form. Reopening this case (and lightly editing the description) so we can action that change.. Grumble grumble... will fix.... Added decodeLogs helper as a _constructorMethod. It seems the new web3 events have the signature already calculated, and for the tuple event it didn't match the one we calculated below. I didn't fully understand how this all worked, so I figured I'd best play it safe and branch on whether the signature is precalculated.. I now pass the methodABI through so that it can be used in utils.getTxParams. Reworked this logic to be a bit more robust. The only time methodABI should be falsy is in the case of a call out to the fallback function.. The way this was done before caused a valid method argument to be dropped if the last constructor arg was an object that wasn't a BigNumber. added this helper function. In retrospect I think this is probably excessive - if a field is added on to the tx params that's not expected below we'll fail. I think I'm going to remove this and just rely on method argument count.\nHaving it checked like this will introduce problems for enterprise integrations (e.g. Quorum) which add extra fields to the tx params object.. Fixed, but I'm not super thrilled about it... Made it require at least one known tx parameter field. I now pass the methodABI through so that it can be used in utils.getTxParams. I now pass the methodABI through so that it can be used in utils.getTxParams. grab constructor ABI to pass to getTxParams. I now pass the methodABI through so that it can be used in utils.getTxParams. ... you know the drill by now.. cleaned up test due to eslint errors. for some reason these paths weren't resolving correctly while debugging in vs code - this fixes that. I think all of the changes in this file came over from the stuff I cherry-picked from Chris' branch. This test caused an unhandled promise rejection when it was failing. Now it doesn't.. Support code for new tests... I just followed in the footsteps of createExample here - refactoring the logic of that out to _createContractInstance. switch the test to use the new rawLogs field on the truffle receipt.. per the comment, keep around the raw (not decoded logs). If you want to see how ABIEncoderV2 support is meant to work from the user's perspective, this is the place to look.. Just kidding, it was due to the path resolution failing when executing tests in the debugger.. ",
    "mkosowsk": "big claim alert! congrats \ud83d\udc4d \ud83d\udc4d \ud83d\udc4d . ",
    "tomerweisman": "@raineorshine \nHi. can you please provide the truffle.js, or any configuration files that worked for you? \n. @cgewecke this for the example. my problem is that I cant get truffle (mocha) to recognize ES6 \"import\" syntax. \nIve added the following dependencies in package.json:\n\"devDependencies\": {\n    \"babel-polyfill\": \"^6.26.0\",\n    \"babel-preset-es2015\": \"^6.24.1\",\n    \"babel-preset-stage-2\": \"^6.24.1\",\n    \"babel-preset-stage-3\": \"^6.24.1\",\n    \"babel-register\": \"^6.26.0\",\n    \"solidity-coverage\": \"^0.5.0\"\n  }\nand have this .babelrc file: \n{\n  \"presets\": [\"es2015\", \"stage-2\", \"stage-3\"]\n}\nand truffle-config.js file:\nrequire('babel-register')({\n    ignore: /node_modules\\/(?!zeppelin-solidity)/\n});\nrequire('babel-polyfill');\nTruffle v4.1.8 (core: 4.1.8)\nSolidity v0.4.23 (solc-js)\nI wanted @raineorshine to share the config files that worked for her\nAny idea how to solve? \nthanks\n. @kyriediculous \nthank you for your fast reply. \nI don't think it is about the code size limit. I'm trying to deploy crowdsale and token contracts from openzeppelin, which have been deployed many times before. I have added my contracts above for reference.\nthank you again. @cgewecke \nyou were right! the wallet was undefined. \nI entered an address and the crowdsale contract was deployed easily... \nWhen does the accounts array get defined? only when using ganache? \nthank you so much \n. agreed. thanks for the help\nim closing this issue\n. ",
    "mtomov": "Hey @tomerweisman  - thanks so much - your truffle-config.js example totally allowed me to do the same thing you're after!\nI have the same .babelrc and package.json files, but placed the require('babel.. in truffle.js instead.\nTry changing zeppelin-solidity to openzeppelin-solidity as well. \nThanks again!\n. ",
    "hitchcott": "I've created a fix in our similar truffle-lightwallet-provider package.\nhttps://github.com/DigixGlobal/truffle-lightwallet-provider/blob/d0389285e0887905684d54e8a6b29db01f2982a4/src/index.js\nHappy to submit a PR for this in truffle-hdwallet-provider using the same technique.. Yes, that fix would be better - my current approach is definitely a hack, but is compatible with truffle out of the box. \nA function passed would be great - even better would be the option to return a promise, so you could do some async setup steps (such as pre-funding the account).. It's caused because truffle@3.1.1 is installing truffle-compile@1.1.0 (which was recently published for the 3.1.9 release) instead of truffle-compile@1.0.0, npm is resolving to 1.1.0 because it's a minor upgrade.\nFew fix suggestions:\n\ntruffle-compile@1.1.0 is unpublished and then republished with a new major release 2.0.0 \nPublish a new backwards-compatible truffle-compile@1.1.1 \n\nThe non-beta truffle is re-published with \"truffle-compile\": \"1.0.0\" instead of \"truffle-compile\": \"^1.0.0\". Notes: \n\n\nWe've now increased the gas limit on Kovan to 5 mil to get around this, so it shouldn't affect most users anymore\n\nThe new method in truffle-contract should be using estimateGas before deploying if gas isn't set, which would solve this problem for other networks with gas lower than the default.. \n",
    "gagarin55": "@hitchcott You've patched provider whereas truffle has to be fixed.\nYour problem is a result of fact that truffle doesn't allow to use custom config files.\nHaving two different config files could solve it easily.. Anybody here ?. ",
    "cicorias": "I'd be very afraid . The contributor's history seems nonsensical https://github.com/ethereum/go-ethereum/pull/3652/files. ",
    "locklin": "I actually have this issue in a stock linux-mint-17 system (my /tmp is on a different partition from /home). \nI thought \nnpm config set tmp /home/scott/tmp \nshould fix things, but it seems to have a hard coded /tmp somewhere in the code.. ",
    "nammzzi": "hi I am getting the same error as @elenadimitrova I do truffle compile, truffle migrate then truffle console. Updated to latest truffle version. Can someone help. ",
    "mjmau": "I now see there is already a PR #295 fixing this.. ",
    "skmgoldin": "This is still a thing in 3.4.7.. @NFhbar still a bug, but the workaround is to just to temporarily delete or comment out your other networks when publishing.. Thanks amigo!. Hey y'all I'm going to re-upload the tokens contracts tomorrow! If I don't mess it up they should be available under the same name. I'll comment here again with an update.. I can reproduce this in Truffle 3.4.7 on Node 6, 7 and 8.\ngit clone git@github.com:skmgoldin/simple-token-launch.git\nnohup testrpc -a 100 > /dev/null &\ntruffle test\nThe migration will fail with the Invalid number of arguments to Solidity function error here (those are arrays).. Still not fixed in 3.4.8. Thanks Tim. It's been so long since I've used web3 directly I thought it was just called Truffle now.. Thanks Tim! That workaround is fine.. Thanks @vladfr ! If you can get it merged, I will release the ~kraken~ bounty!. Oooooooooh shit so exciting!!!! Will report back!. It worked! https://www.ethpm.com/registry/packages/43 @vladfr I will pay you.. So this is actually really messing up my productivity! I spend 80% of my time on a testRPC and 19% on Rinkeby... But this is kinda blocking me from going to mainnet.\nI've re-written my deploy pipeline to fail less hard if I get transaction underpriced errors, but to get around the 240 second timeout I'm just going to have to specify a very high gas price. I could end up paying hundreds of dollars to deploy, when I'd be happy deploying overnight with a lower gas price.\nI think these two things together are kind of an emergent \"bug\" in Truffle given the recent rise of persistent network congestion.. That worked! I was even able to use a more concise syntax:\nmainnet: {\n      provider: () => new HDWalletProvider(mnemonic, 'https://mainnet.infura.io'),\n      network_id: '1',\n      gas: 4500000,\n      gasPrice: 10000000000,\n    },\nThanks @cgewecke !. Thanks. Still having the same failure there.. WOAH. Looks like the office I'm in was actually being rate-limited. I VPN'd out and it worked. Sorry for wasting your time!. ",
    "NFhbar": "Any news on this?. Yeah, I simply commented out the other networks and works just fine, thanks!. ",
    "JackBekket": "@tcoulter \nI found out source of problem -bug with parity and their mnemonic phrase. Any mnemonic from parity is not work. . Hi Max! \nFound solution - need to ROLL back to 0.17.0-alpha, there is no fix in ^0.18.2 for now.\nReference - (https://github.com/ethereum/web3.js/issues/555). Until (https://github.com/ethereum/web3.js/issues/555) will fix newest version of web3 is only one method to work with web3+webpack.. I found something really strange, it's like problem not related to web3.js really, it's related to meta charset tag in main index.html, probably it touch only people,who use \u044fussian letters. When utf-8 is not set, builder have strange behaviour and add invisible symbol instead of space, as Max refferer. In other case, when utf-8 is set in meta charset build is going on normally. Plese, try to reproduce it, probably it's a weird bug.. ",
    "yyd106": "Hi, I'm facing the same issue, do you have any update on the fixing?. @faizanahmad055 Hi I faced same issue. And the solution is to replace 'Migrations.sol' with solidity 0.4.23 version\n```\npragma solidity ^0.4.23;\ncontract Migrations {\n  address public owner;\n  uint public last_completed_migration;\nconstructor() public {\n    owner = msg.sender;\n  }\nmodifier restricted() {\n    if (msg.sender == owner) _;\n  }\nfunction setCompleted(uint completed) public restricted {\n    last_completed_migration = completed;\n  }\nfunction upgrade(address new_address) public restricted {\n    Migrations upgraded = Migrations(new_address);\n    upgraded.setCompleted(last_completed_migration);\n  }\n}\n```\n. ",
    "lizardkinglin": "Dear gibbymt,\nI suffer the the same issue with you. Bad engineer luck also. ^^ Could you show me to downgrade the truffle version ? Thanks a lot for your help. . ",
    "gibbymt": "@lizardkinglin \nnpm install -g truffle@3.1.9 \nnpm is the package manager, install is the action, and '-g' means you want this to be a global change and '@3.1.9' is the version\n. ",
    "jorpic": "There was a typo in web3.js lib/web3/contract.js. It is fixed in https://github.com/ethereum/web3.js/commit/e4f7dde86857f577481eeeb00917930c71b73f6a#diff-430c9c02bef6a7661c5b4e7b34142f7c.\nI think the problem can be solved by updating web3 dependency in truffle-contract to ^0.18.2.. Actually, similar error was introduced again two months ago: https://github.com/ethereum/web3.js/commit/f33723ee39dbb3c3a7e29b8ded5d831c2532de37\nThere is \\u00a0 instead of plain space character before {}:\n})[0] || {};\n\nhttps://github.com/ethereum/web3.js/issues/555\n. ",
    "amithanamakkanavar": "Now am getting error as\nnpm ERR! Linux 4.2.0-27-generic\nnpm ERR! argv \"/usr/bin/nodejs\" \"/usr/bin/npm\" \"install\" \"-g\" \"truffle\"\nnpm ERR! node v6.10.0\nnpm ERR! npm  v3.10.10\nnpm ERR! code ECONNRESET\nnpm ERR! network tunneling socket could not be established, statusCode=407\nnpm ERR! network This is most likely not a problem with npm itself\nnpm ERR! network and is related to network connectivity.\nnpm ERR! network In most cases you are behind a proxy or have bad network settings.\nnpm ERR! network \nnpm ERR! network If you are behind a proxy, please make sure that the\nnpm ERR! network 'proxy' config is set properly.  See: 'npm help config'\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /home/****/npm-debug.log. ",
    "Djuliuss": "OK, I have managed to make it work by moving the folder out of the shared folder within the Vagrant VM.\n. ",
    "anabaei": "Had same problem but using this truffle unbox webpack  helped me!. ",
    "pf89": "Hello, does anyone have a solution or at least a workaround? Get this bug too. Thank you very much. ",
    "malkevych": "Have the same bug with truffle 5. User is from acconts. If you need i can provide sample code. ",
    "eggplantzzz": "@malkevych I am unable to reproduce the above error on version 5. Can you give me some steps?. @AusIV I think you need to do contract.request(args)...assuming request is a function found inside your contract. Or you could do contract.methods.request(args).. Oh my mistake @AusIV, yes you need to use Contract.methods[<signature>] to do that using methods.\nI am unfamiliar with the request method you are trying to use. Is that a web3 feature? I can't seem to find it documented...do you have a link?. Hmm, perhaps something changed with the web3 interface. Truffle 4 uses web3@0.20.6 while Truffle 5 uses web3@1.0.0-beta.37. I'll do some more research and see what I can find.. Not stale again.. I attempted to duplicate this on the most recent version of truffle and could not do so.  Is this still a problem?  If not I will close this issue in a few days.. I would upgrade to version 5 as that is the newest stable version of Truffle. As far as I can tell this issue does not exist there but let me know if you encounter problems!\nhttps://github.com/trufflesuite/truffle/releases/tag/v5.0.1. Closing this as it has been resolved.. I could not duplicate this issue with the most recent version of truffle, is it still an issue?  If not I will close this in a few days.. Truffle will accept a filename currently in the artifacts.require(). The correct way to do this (and avoid confusion) is to use the contract type name.. @davidperrenoud  To be honest, currently I'm not exactly sure what Truffle does (I would have to do some investigation) when you provide it with a filename. Are you still having trouble with this?\nAlso I would consider upgrading Truffle to version 5 if you are still using version 4. We released this before the holidays.. Closing this as truffle help <command> is now functional in version 5.. Closing this as a linter has been added to version 5!. @cantaloupeJinJin I think there is currently something wrong with truffle init in version 4. If you upgrade to version 5 it should fix the problem.\nnpm uninstall -g truffle\nnpm i -g truffle. Closing as I believe this issue has been resolved.  If I'm mistaken please feel free to re-open this issue!. Truffle 5 now allows you to unbox/init in a non-empty folder.  If there are name conflicts, it now prompts you to see if you want to overwrite the conflicting files.  There is also a --force option for both init and unbox which forces the unbox/init without the prompt.  Closing this issue.. @EvanTedesco Is your code available anywhere to look at?. @sushanth3366 Is your code available somewhere on github so I can take a look? The above is very difficult to read. Also, I want to look at your truffle config.. @sushanth3366 It is the file in the root directory of a truffle project named truffle-config.js (it also could be named truffle.js). I'm not sure it looks like deploy.js is set up correctly here...are you using truffle or are you just usingtruffle-hdwallet-provider?. This feature has been added in version 5!. Closing this issue as it seems to have been resolved.  Feel free to re-open if I'm mistaken.. @gnidan Was this resolved with PR #1299 ?. I think it should be fixed for v5 as #1305 is now merged into next.. @lbthomsen This is a problem with how truffle was installed I believe or your npm installation. See @gnidan's comment above which I think is relevant.. @m0pu This is not a Truffle-specific issue but rather an issue with how npm was installed I believe. You should probably use something like nvm. You can check this out --> https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally. Not stale. For this, it now seems like there are two notions of running 'help'.  There is one that gives general help, in other words it displays all the truffle commands and a brief description of what each does.  When an argument is provided it displays more in-depth information about the command provided as an argument (i.e. truffle help compile).  Do we want to make these two accessed in different ways like --help and help <command>?. Thanks for the suggestion @cds-amal, I'll look into it.. It may be smart to include a more dangerous looking message with the documentation that tells users about --force in case people get upset when their files are overwritten.. @gnidan \nhttps://gist.github.com/eggplantzzz/4cf8ee78ce3dfa3609b7ee416bde9fc7\nThis is a gist containing the contents of lcov.info after running the test coverage locally.. @cgewecke Thanks!  Actually I'm trying to sort through why it is only giving reports for truffle-debugger when it is run remotely...when I run it locally it gives me reports for the whole project and not just that directory.. @cgewecke Do you know offhand which tests require the build?  I'll try and look into it after resolving the issues I'm dealing with now.. Sorry @cgewecke, I know you requested something like this but I wasn't sure about which package's tests (if any) relied on a build step...thanks for the edit!. Other than the minor things it looks good to me!. My bad :)\n. Closes #1294 . Is this still an issue?  For me, deploying to Rinkeby does successfully run the dry run.  Do you have the same behavior while deploying to other networks?. I am testing it with a toy app that I made and according to the logging it is deploying contracts.  I'll take a look at the code you referenced above to see if anything jumps out at me...just out of curiosity, does it perform the dry run when deploying to Rinkeby?. Closing this as I cannot verify that this is an issue. If this is still a problem please let us know. Thanks!. Not stale. @jaycenhorton @iciakky You should consider upgrading to version 5 of Truffle that was released last month. It should only compile when it needs to.\nhttps://github.com/trufflesuite/truffle/releases/tag/v5.0.1. Super, I am going to close this issue for now. Please re-open it if you still find a problem!. @sunlggggg Is your codebase available anywhere?. What do you think of all these methods exposed on the prototype?  Would it be better to have many of them as utility methods that are used by a select few methods exposed by the prototype?. One more thing, there are integration tests for the CompilerSupplier in test_supplier.js.  I named the file containing the unit specs for the methods related to this PR compilerSupplier.js after the file it is testing.  Should we establish some sort of convention for writing unit tests/integration tests and naming the files?. Random Note: having the keyword 'native' in the string that heads a describe or it block (in the tests) causes that chunk of tests to be excluded while running the tests in truffle-compile due to the testing script found in that package.. Thanks for raising this issue. The namespacing issue is something we're aware of and will be working on a solution for in the future. Stay tuned!. Does anything change when you adjust your gas values?. This feature is kind of incomplete at the moment...we are currently working to revamp EthPM and hope that within the next couple of months we'll be able to have something useful in place!. Thanks for the PR!  I talked with some other members of the team and we're planning to try and look into fixing this.  It might only be working for specific packages as some of them mentioned that there might be some people successfully using this feature.  It might work for just a selection of packages...it might be more correct to say that we are not totally sure what its current state is.  However I think we are going to try and fix this feature.. Hmm, I think you might take it up with @gnidan...I'm not sure we've fully taken stock of what it will take to fix.. You can actually force a transaction by using the following syntax:\nmyContract.viewFunction.sendTransaction(...)\nLet us know if you have any further issues!\nI will close this issue once this makes its way into the documentation on the website.. @thekevinbrown Sorry for not responding about helping out, it took a while to track down and figure out what was going on.  It turns out that the problem was not in truffle but in a package related to EthPM.  The install command should be fixed in the next week or so for the beta version.. What happens when you try and run the migrations just using the truffle development chain?  In other words, run truffle develop and then try and run your migrations using that test network that gets spun up.  Do they run successfully?\n. @twinkleshine Did you get this issue worked out?. Thanks for the heads up!  We'll try and get this sorted out.. It looks like the Remix artifacts have a different structure than the Truffle equivalents.  When you compile and migrate there is also some metadata (like networks where it is deployed and their address)that Truffle needs for access.  Currently I'm not sure if there is a way to 'sync' them up as far as I know.  It could be an interesting feature to look into!. To make sure it doesn't come back!. Yes, I think it was erroring if it didn't have a build script specified in the config.. Not stale. @obernardovieira No problem, it will get done eventually :) It does not seem trivial.. I think version 1 of web3 uses the BN library and not BigNumber.  In your migration file you are doing const BigNumber = Web3.BigNumber; which for me on my local comes out as undefined.  I haven't scoured your code but try and resolve that issue and see what happens.. Sweet, code coverage report!. This seems like a good idea to me!. Can you show the code you are trying to compile?. @ayanez17 Is your code available somewhere?. Need more time!. @roschler Sorry for the delay in getting to this, is this still a problem on version 5?. @jerryji Thanks for the heads up about this!  We have updated the release notes.  I'm going to close this issue.. Hmm I'm not sure @gnidan . Not stale\n. This was fixed in PR #1651.. @tobyjaguar Thanks for the feedback!  We should have some new documentation that will make this much clearer with the release of v5.  We'll also consider adding defaults in the config.. That box will only unbox on truffle 5.  Try installing truffle 5 and unboxing.. @Schwartz10 Is this still an issue on the most recent version of Truffle (>5.0.3)?. @LittleHack Sorry for the delay in getting to you! Thanks for the suggestion, I think we've already implemented the kind of thing you are suggesting! Check out the network options in the docs for configuring Truffle here https://truffleframework.com/docs/truffle/reference/configuration#networks. @RobertoC27 Thanks for bringing this issue up!  We should have a fix for it soon.. Closing this as it should be fixed in the most recent version of Truffle.. Hey @roschler, Is the code you are working with available anywhere?. So I'm understanding that the optimizer settings are going to go under config.compilers[<compiler>].settings.  What does index.js.orig do?. I think we wanna keep this open. She's a beaut!. @amankakar Is your code available somewhere where I can take a look?. @amankakar Very good!. @CruzMolina I agree, I made an issue for it.  I wanted to get on to the rest of the blockers for release.\n. Fix merged PR #1539 . Hey @coventry, sorry for the delay in getting around to this. I will try and look into this issue in the next couple of days...if you think it is a bug and have a fix then please do submit a PR! I'll try and get back to you soon.. Looks good to me.. @galgat4 Hmm looks like it is not installing properly. I'm not too familiar with how Windows machines deal with all this...does there happen to be weird casing/namespacing issues with drive names? I see that you are in c:\\election and not C:\\election. I'm not sure if this should make any difference but that is just a shot in the dark.. I think we should have a fix for this with the next patch release. You should then be able to compile when you have the solc cached, you are using a docker image, or when you are using the native solc to compile.. One thing to be aware of is that Truffle does need a cached version of solc even if you are using a docker image. This means that you will have to run truffle compile at least once while connected to the internet so that it can download and cache it. Afterwards you should be able to compile without a connection with that setup.. Yes, upgrading to version 5 will do the trick.\nWe recommend the upgrade, but in the case that you need to continue using version 4, we put out a maintenance release that fixed the issue.\nhttps://github.com/trufflesuite/truffle/releases/tag/v4.1.15. Yessir\n. @gnorbsl Sorry for the delay in responding to this! Are you still experiencing this issue? Have you updated to a stable version of Truffle (currently v5.0.4) and node >= 8?. Toll! Let us know if it happens again. Closing this for now.. @vvdhout Yes! The solidity files in the metacoin box are not the preferred method of requiring contract types. You should indeed just be requiring them by name. Thanks for giving us the heads up on this and we'll try and get it fixed soon!. Closing now as the MetaCoin box was updated.. @figs999 Just reading through this, is your code available somewhere?. Well I guess that is good enough! Closing.. @wbt Looks like npm will not install a different major version when using npm update. If you want to do it cleanly you need to globally uninstall Truffle first. In other words, do npm uninstall -g truffle and then npm install -g truffle.. @testrain Truffle version 5 uses version 1.0.0-beta.37 and needs to use this version. If you need to use a version less than 1.** you can use the previous version of Truffle (v4.1.15) although it is currently unmaintained as of last December.. @nventuro If you want to trigger a transaction using the data field, you probably want to use instance.method.sendTransaction. And yes, like @area said instance.sendTransaction is currently primarily intended to run the fallback function. However, currently this is not strictly the same as web3.eth.sendTransaction and probably should be. So in the future I think we are going to consider changing that, if you want to submit a PR and help expedite the process you are more than welcome :) Thanks!\n. @wbt Thanks for bringing this to our attention. We are currently trying to work to get everything up to date and consistent!. Thanks for bringing this up! I'll get to fixing it. I think there is some issue with bignumber.js bundling with webpack https://github.com/MikeMcl/bignumber.js/issues/166.\nI will try and have a fix for this soon.. A fix was merged in https://github.com/trufflesuite/truffle/pull/1631.. Truffle v5.0.2 should have fixed this problem, I am going to close this issue. Please re-open if you are still having problems with this!. @sowmyakannan You can still use Truffle v5 and use an older version of the solidity compiler. If you need to, you can write your solidity in a version that is compatible with the compiler that openzeppelin uses. You can then configure your project to use that version...I think something like ^0.4.24 should work.\nSee https://truffleframework.com/docs/truffle/reference/configuration#compiler-configuration to see how to configure the compiler.. Ahh I see! Just making sure you weren't stuck, thanks for suggesting the idea!. @gnidan Actually it seems like you can still do let number = MyContract.myValue.call() and the value of number will be a BN.. Oh my apologies, the call method will return the BN. Not at! I misread, gnidan is correct.. Is this issue still relevant? If not I will be considering closing this soon.. @PaulRBerg \nNote: (haha get it? :P ) I tried to duplicate your error locally and couldn't. My steps were as follows:\ntruffle(develop)> let note = await Note.at(\"0x5040F5c3f1f01C23ad172F3293B466d4aD8E0263\")\nundefined\ntruffle(develop)> let num = await note.getNumber.call()\nundefined\ntruffle(develop)> num\n<BN: 40>. @PaulRBerg I would not expect the syntax you are using to work. You need to execute those slightly differently. You need to \"await\" and receive the instance before calling getNumber.\nYou could do (await Note.at(\"your-contract-address\")).getNumber.call() for example. As @gnidan said, the at method is async and in your example the getNumber method is attempting to be called before it receives the instance back.. @PaulRBerg Did you get your issue resolved?. @WyseNynja Let me see if I can locate some helpful material for you. From what I understand you are trying to build a truffle contract from scratch and want guidance, sound about right? Sorry for the delay in responding to you by the way.. I think the schema for those artifacts can be found here --> https://github.com/trufflesuite/truffle/tree/develop/packages/truffle-contract-schema\nAlso require(\"truffle-contract-schema\").validate(obj) can help you validate the contract object.. https://github.com/trufflesuite/truffle/blob/develop/packages/truffle-compile/index.js#L194\nThis is the line where the code puts together the contract.. @Levino Sorry for the delay, I missed this one. I'll take a look!. Actually I think the accounts provided as \"dummy\" accounts are incorrect. They didn't respect some of the capitalization that the given mnemonic provides. They are \"almost\" correct :) I'll get this changed, thanks for catching this!. Ok so the addresses returned by web3 are in the checksum format. I don't really think we care too much about that at the moment as addresses are basically case insensitive. Thanks for submitting this. though!. @Levino @mrwillis Are either of you able to provide examples of this? I would like to run it and try and see what is going on.. @mcplums Unfortunately this box hasn't really had much TLC in the recent past and we have been aware that there are some issues with it. Sorry about that! We have been considering rewriting it sometime in the near future to make it more usable!. Update: The webpack box was recently re-written but the bundle size is still a little bit on the heavy side. Unfortunately web3 is kind of big along with some other dependencies. Hopefully it is faster/more useful than it was!. @saitam1 Hmm, you probably shouldn't need sudo for that. I think there might be something wonky with your npm. I remember I had some similar issue when setting up a fresh computer with npm.\nMaybe this will help --> https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally. @CarlosLanderas Version 4 is no longer the most recent stable version of Truffle. We actually recommend that you upgrade to version 5 if you can --> https://github.com/trufflesuite/truffle/releases/tag/v5.0.1\nWe are mostly concerned with keeping the boxes compatible with the latest version of Truffle but we did want to keep them usable for users that needed to stay on 4 for whatever reason.. Closing for maintenance.. @WyseNynja You know, at this point I believe that Truffle will compile vyper files for you without having to use the external setup if you have them in your contracts directory.\nLet me know how it goes for you.. It is possible to use the external property to do this...BUT Truffle will compile Vyper contracts as well as Solidity contracts \"side-by-side\".\nIn the issue you linked to, @gnidan is referring to the current limitation of only being able to use one single version of the Solidity compiler. However, you can have a project that includes both Solidity and Vyper files and Truffle will deal with them.. @WyseNynja Did you successfully get your vyper contracts compiling?. Ok, let me know if you have any more questions on the way. Closing this for now.. @WyseNynja Concerning the Vyper compiler...I'll have to look into adding functionality in the config for specifying the version.. @shane-t Ah yes this is a good idea! Thanks!. @WyseNynja Could I take a look at your truffle config?. Oh I see, this is not a problem you need to resolve but rather a request for prettier output. Always nice...thanks!. Err, I mean \"more helpful\" output.. Hmm we'll try and reproduce this error for the Metacoin box.. I just tried the Metacoin tests on Ubuntu 16.04 with Truffle v5.0.2 and they ran successfully. @AdelinGhanaem perhaps you have a different problem, is your code available somewhere?. Do you have the entire project on github?. We just released v5.0.4 which fixes this issue!\nhttps://github.com/trufflesuite/truffle/releases/tag/v5.0.4\nClosing this but please let us know if you have further issues.. To be clear, the only \"functional\" change made was on line 4 of reformat.js. The rest of the changes were done by the formatter.. The variable accounts needs to be passed as the third argument to the above function. The second one is networks.\nIn other words:\nmodule.exports = function (deployer, networks, accounts) {\n  deployer.deploy(Bonding.....\n***** the rest of the stuff ******\nAlso, it seems like you might need to set the defaultAccount property manually with web3? From the docs: https://web3js.readthedocs.io/en/1.0/web3-eth.html#defaultaccount. Yes, so HttpProvider doesn't support subscriptions. I'm not sure what you are specifying in your Truffle config... Check out the web3 provider docs: https://web3js.readthedocs.io/en/1.0/web3-eth.html#providers\nOne option you have if you are trying to test events is to look at the logs. When you execute a contract method, the returned object has a logs property. Inspect this and you can see what events were emitted.. Also @mushketyk, I'm not sure about the syntax you were using in 4...the web3 docs have a syntax like the following:\nmyContract.once(\"myEvent\"[, options], callback)...\nCheck it out...\nhttps://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#once. Looks great! Into it.... Ahh yes @sbrichards, that should be updated. Thanks for bringing this up! Let me have a chat with @gnidan and see what behavior we want to spec out for this.. Ok so after some discussion we thought the best and simplest thing to do is to hard-code the value in the template to the current major version of solidity, namely ^0.5.0.\nAre you still willing to do this work? I would be happy if you put in a PR for it! If you don't have time for it now then let me know and I will make sure it is taken care of. Thanks again!. Thanks again @sbrichards!. I think we should have a fix for this with the release of 0.5.3. We plan on releasing today (January 30).. truffle@5.0.3 was just released and should solve this issue! Closing this but let me know if you still experience problems.. @hellwolf I think web3 removed the sendAsync method. Currently I believe it is just send and it is asynchronous.. Oh ok, so is this still an issue? Maybe you were using a version of web3 that still used it? I was just pointing that out in case it was somehow causing your problem.. @baermathias Can you provide a full example of some code where this fails? I want to see if I can duplicate your issue. I made up my own toy test app and everything works fine for me as it is.. This addresses issue #1432 . I think this is a good idea!. These are meant to be purely cosmetic changes (not functional) involving comments and messages to the user.. I think this is a really nice idea, thanks for the suggestion!. Yep, I changed that line about 2 days ago! It should be out in the next patch release.. @wbt Would you like to open a PR for this? Let me know if you want to tackle it, otherwise I'll take it on next week.. Oh whoops, thanks for catching this!. @Prince666 I don't think this issue is specific to Truffle and rather I think it means there is something wrong with the way you have SSL configured on your computer. I'm going to look into this and if I find anything helpful I'll post it up here.. @satyamakgec What version of truffle are you using? You will need to use version 5 or v4.1.15 if you need to keep using version 4.. The networks object is the second argument passed to migration functions. The third argument is the accounts. So you would do: \nmodule.exports = (deployer, networks, accounts) => {\n  ...the rest of your migration...\nSee the docs for more info --> https://truffleframework.com/docs/truffle/getting-started/running-migrations#available-accounts. Hmm, there also seems to be an issue with the github-download package. I filed an issue here. It seems like it is currently a limitation but we'll see if he plans to fix it.. Let me take a look and see how easy it will be to swap them out, I'm not opposed to switching.. Hey @isaacsultan, what happens when you delete your build folder and try again?\nAlso, you should consider getting the most recent Truffle (5.0.3). If you are still having the issue, is your code available somewhere to take a look at?. We will be putting out a patch release tomorrow that I think might fix this issue. Look out for v5.0.4. Thanks for submitting this! We will review it.. You probably should not have to use sudo with Truffle in most cases. I expect this is an issue with how npm was installed...npm recommends using a version manager and I would guess you are getting a bunch of EACCES erros while trying to use packages and npm?\nCheck out the following link and see if it is helpful.\nhttps://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally. Hey @MichalZalecki, do you have a specific example that I can take a look at to reproduce the problem?. @Bowfish Just a couple of things to try...\nWill you make sure that you are using Web3 version 1.0.0-beta.36? The newer versions of web3 recently broke some provider functionality for Truffle and Ganache. Also try removing the host and port properties from the config and see what happens. I don't think you should need them since you have the provider property. Let me know if this helps at all.. Actually I am having success with web3@beta.37 but not web3@beta.38 so you can try that instead of beta.36. Oh I was assuming you were using Ganache CLI and not geth so I'm not sure if geth requires any additional configuration. If I come across something helpful I'll try and leave it here. The business above concerning Web3 versions is strictly related to Truffle and Ganache...it might be fine with geth, I'm not sure.. Try downgrading Web3 to version 1.0.0-beta.37 and trying again. Let me know what happens.. @gabeibarra What part of the code are you interested in investigating?\n@Bowfish Were you able to get it working with geth? Were you ever able to get it working if you tried to use Ganache? I would be interested in knowing whether this is geth-specific issue.. @amankakar Also, consider upgrading to Truffle 5. I'd be curious to know whether this still exists on the most recent version of Truffle.. @W3stside Hmm, do you have code I can try and duplicate this from? I haven't seen this behavior before.. If anyone can provide some specific repro steps it would help a lot in troubleshooting this.. Yes it look good.. Hey @Bowfish, I can't reproduce your error on Truffle v5.0.4. Can you try upgrading and trying again? Let me know if you still have the issue.. What do you have in truffle-config.js? If you are having problems depending on user then it starts to sound like a permissions issue on your machine.. Here is a preview of the output.\n\n. Sure @gnidan, I like the way that output looks.. New and improved output sample.\n\n. Hey Lucas, I haven't dug into your problem too deeply but I wonder about something...do your source files compile? I thought the open zeppelin stuff required version 4 of the Solidity compiler. You have the pragma specifying a version of 5. Is that not causing problems?. Is your whole project's code available somewhere so I can check it out? What happens when you check the amount directly before the transfer in the same context?. We were having some issues with solc-bin downloads from the above urls. We updated the urls and it should work now on v5.0.5. Let me know if you still have trouble. Closing this.. Hey @ryokomy, if you want to have those variables available like this you either need to declare them \"public\" or create getters for them in the contract. Let me know how it goes.. This is a bit puzzling, I don't seem to be able to reproduce your problem. I think the next release we do will include a patch for truffle compile error reporting. Currently it swallows errors in some cases so I'd be curious to see what happens if you were to try this again after that release.. I'm going to re-open this just to see if anyone else is experiencing this issue, anyone?. We should have a patch release soon to fix the error swallowing. If you are experiencing issues based on what kind of user you are logged in as, then you should probably ensure you have npm and truffle installed properly with adequate permissions. I see a lot of people doing things like sudo npm .... You probably shouldn't be doing this. See npm's  article --> https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally. You probably should use something like nvm.. Update: I think as of Truffle v5.0.8 you should not have these errors even if you did install Truffle with sudo. Closing this for maintenance but let us know if you have problems.. Thanks for raising this but I don't think we want to set a default from when you are accessing web3 directly. We don't really want to mess with web3 defaults and you should assume it has the same API as when used outside of Truffle.  The default from that you configure in the Truffle config pertains only to transactions sent from Truffle contracts.. I understand, I'll bring it up and have a chat with some of the other Truffle developers and see what they have to say.\nI'm definitely not opposed to changing the comment wording. Would you be interested in putting in a PR for it?. Hey again @d10r, the repo related to what gets unboxed with truffle init can be found here --> https://github.com/trufflesuite/truffle-init-default. Thanks!\n. Looks good to me\n. Currently the compiler is downloaded and saved to a cache directory in Truffle. When you specify a compiler it checks to see if it is cached first, and if so it uses that.\nMore precisely you can look in ../pathToTruffleInstall/../node_modules/truffle/node_modules/.cache/truffle/. This is where all the compiler files get cached.\nIn addition, currently Truffle only supports compiling with a single version of the Solidity compiler out of the box. Technically, you could custom configure multiple versions of the Solidity compiler using the \"external\" compile settings if you want to do some fancy footwork. See the docs for more info.. UPDATE: With the release of Truffle v5.0.8 the compiler cache directory has been changed to /<homeDirectory>/.config/truffle/compilers. Another note, during compilation as of Truffle v5.0.6 (I believe) the compilers used are logged.. Closing this for maintenance.. Well, the thing is, I'm not sure what the strategy would be. It was a problem with the architecture and not some weird input. If you have any ideas, leave them here.. When thinking about the globbing for event names, I start to wonder how far we want to take that. It might be sufficient to have a \"pseudo globbing\" system...in other words, it seems like overkill to have actual globbing. It might seem reasonable, however, to just use the \"*\" as a wildcard for one term like you mentioned above. Let me know if you have different ideas about how far you want to take the globbing.. No there aren't any tests! But I will remedy that.. Hey @WyseNynja I'm not sure you set up the external compile script correctly. In the config you have compilers.command = \"true\". In the config the command property needs to refer to the script that will execute your own compile process. \nSo for example, if you have a script that compiles your artifacts in a file named myScript.sh you would need to have\ncompilers: {\n    external: {\n      command: \"./myScript.sh\"\n      ..... Yes but my point is that if you are using an improper setup in the config I'm not sure what we can expect Truffle to do (who knows how it will error). If you take out the improper compiler config lines, Truffle has no problem handling the artifacts correctly. This tells me that it absolutely has something to do with the provided config.. Hmm, but actually you might be right. It does look like there might be something up with the compiled artifact. Even though it doesn't error without the config you had, truffle-contract-schema doesn't seem to be able to validate that artifact. I'll go ahead and look into that to try and see what is going on. Thanks @WyseNynja.. Ok so we found a bug with truffle-contract-schema. It turns out that the validator hasn't been updated to account for bytes[]. We will go ahead and make some changes for the next release. Thanks for reporting this @WyseNynja !!. Hey @marcelomorgado, there is currently an issue with the truffle schema validator that we are looking into right now. This might be the cause of the issue you are experiencing...we are going to try and get this fixed soon!. @marcelomorgado We just released Truffle v5.0.8 today. Try and upgrade and see if the problem persists.. Can you give me a specific codebase or Solidity file that fails? I unboxed the Truffle metacoin box and both truffle compile and truffle test run successfully.. Ok, so I did a lot of testing and there is some conflict with babel-register. It is somehow causing require('path/to/cached/compiler') to hang in the loading strategy here and blow the heap. When I comment out require('babel-register') in the Truffle config, it is able to successfully compile. I'm not sure what we're going to do about this but we'll try and see what we can do for these to peacefully coexist :). Ah ok so all this makes a lot more sense now. babel-register is binding to Node's require function and processing all .js files that it requires. The Solidity compiler files that Truffle requires are .js files...and they are quite big.\nWe are going to try and find a nice fix for this, but in the meantime as a workaround it looks like babel-register allows an ignore option to be uses.\nSo you could do something like require('babel-register')({ ignore: /soljson.*/ }) and it will work.. Haha yeah, sounds good to me. Also, can we remove this line and the corresponding file from the project?  Tim said it was related to EthPM but did not know if it was relevant with EthPM v2.. Feels good\n. Sure, I originally did this because there was a conflict (there is already a property called 'help' in  compile.js for example) but now it looks like this work makes the old property obsolete.  Changing this sounds good to me.. Is there a different way that you would recommend doing this?. Why won't it slice correctly?  The slice should just remove the leading 'v'.  Will the version number not always be prefaced by 'v'?. Hmm, yeah I can get on board with that.  My initial concept was to give a brief overview explaining how the repo is laid out before getting down to it...but yes I think you're right to push it towards the end.  I don't know if we really even need to give a shoutout at the top.  If people are going to be working on this code they will probably read section 5, right?\n. We haven't really established strict conventions yet but I'll just give my thoughts on some things for now.  Going forward should we use only 'const' and 'let' for variable declarations?. I wonder if we need this message if we are going to be prompting them later...we might be able to just get rid of this.  Or we should move this to the function that will prompt them?. Again, I know we haven't discussed conventions but can we make indentation consistent in this method?  In the project 2 spaces seem the norm.. Indentation...also I personally would prefer that this is written like\nlet variableName = [\n  {\n    type: 'blah,\n    otherType: 'otherBlah',\n  }\n]\nTo me this is much more readable.  What do you think?. Just a stylistic thing, it might be more readable if you put spaces between your strings and variable names like this \nfs.copy(tmpDir + \"/\" + file, destination + \"/\" + file);\nOr you could use interpolation like\nfs.copy(`${tmpDir}/${file}`, `${destination}/${file}`);. All this code inside this if statement is very difficult to read for me.  I wonder if we need all the try catch statements, is it possible to use a catch statement on the outside of this method?  And is there any reason to use the async fs methods as opposed to the synchronous ones?  We could get rid of all the awaits then.. I'm not sure we need to manually remove the file, it looks like copy overwrites the file if it already exists.  This might mean we can get rid of more logic in this method to clean it up.  Or maybe I'm missing something.. Oh sorry, it wasn't the fact that you made it async.  I was trying to think of a way to simplify the indentation mountain so that the code narrative was more clear.. How about getting rid of mnemonicObject?  You could just \nreturn {\n  mnemonic,\n  accounts,\n  privateKeys,\n}. Any reason you use snake case for some of these variables?. Just a tiny thing, do we need this variable?. mnemonic is such a strange word. A slick thing you could do here if you like the idea is\nconst { mnemonic, accounts, privateKeys } = mnemonicInfo.getAccountsInfo();\n. That would eliminate a couple instances of using the word mnemonic ;). Just an idea but what about naming this something like getOrGenerateMnemonic?  It's a bit longer but it might be more descriptive.. Sorry, a small, stupid thing...can we do address_index = 0; with spaces around =?. Oh sorry, I just meant for the function defined on line 21.. What exactly are these?  I'm not familiar. By the way, what does ps stand for?. What is the timeout for?. Extra newline. Hmm, we probably don't need the dones for these either...or?  I don't think anything is async, or maybe I'm missing something.\n. You can remove this declaration I think.. Thanks!\n. I dont think you need these timeouts, do the tests fail when you don't put them in?  They pass for me.. You should make an assertion here, right now this test isn't doing anything.. I like this test a lot.. I mean you could probably just remove this test...otherwise you could do something like the following:\n  - delete the contents of the temp directory in a beforeEach\n  - unbox\n  - test that the contents are there. extra newline. You need to call unbox in all these it blocks.  This is passing right now but it is because you are not making the call.. The restore function needs to be called on the stubbed method...\nlike inquirer.prompt.restore(). I think you should use beforeEach and afterEach for these setup/cleanup methods because I think that will refresh everything.  I'm not sure if it will keep track of each call across all tests...like inquirer.getCall(0) might be the first time the test calls it and the last time might be like inquirer.getCall(11).. Need to pass done as an argument in this test and the next like you did in the first in this group of three tests.. How do we know that redundant files exist in the dir?. I don't think this is testing what you want...when inquirer is called, that default property is always false according to the code.. I feel like you could probably just get rid of the last two tests in this group and just test that when 4 name conflicts exist, inquirer gets called 4 times.  But you probably should start the test by confirming that you do indeed have 4 name conflicts.. @adrianmcli Yes, I like deconstructing it.. @gnidan Can you comment on this?. I changed this to make it fit on one line.  When truffle help is used, there previously were too many characters in the string and it wrapped to the next line.  We could try to shorten it some other way.... It seems like it is unused, I'll get rid of it.. This is already existing code, but I really dislike the variable names...I'm a little bit slow and when trying to read this, it destroys the narrative for me.  What about something like function (propName, propValue)?  What do you think?. I also really dislike abbreviated variables like str or obj.  I feel that spending the extra letters to be more descriptive is worth it.  That is just a subjective stylistic thing so feel free to tell me to go fly a kite.. Is this a reliable regex to use to parse out version numbers from the compiler names?. Sounds good. Can you capitalize the first S?  This will display in the help.. The value for usage should probably be something like truffle config <analytics_option> if we are following the conventions in the command files, right?  Are we going to eventually add other options in here for this command?  We might want to consider having a format like truffle config --analytics off|on...what do you think?. You could leave this if statement off and just put a return before the last else's setAnalytics?  On first reading it it feels a little bit cryptic.  Like you could do\nelse {\n  setAnalytics = ....\n  return setAnalytics.then(() =>... => done());\n}\nreturn done();. How about something like\nsetAnalytics: function(enableUsersAnalytics) {\n  if (enableUsersAnalytics) this.setUserId();\n  userConfig.set({ \n    enableAnalytics: enableUsersAnalytics,\n    blah: blah,\n    blah....\n  })\n  return true;\n?. You can probably drop this else.. The grammar is slightly weird near the end...maybe Doing so will allow us to make sure Truffle is working as expected and help us address any bugs more efficiently.. If ya like you could do something like \n} else if (userConfig.get('analyticsSet') && process.stdin.isTTY) {\n  const analyticsEnabled = userConfig.get('enableAnalytics');\n  const answer = analyticsEnabled ? await inquirer.prompt(analyticsDisable) : await inquirer.prompt(analyticsEnable);\n  answer.analyticsDisable ? this.setAnalytics(false) : this.setAnalytics(true);\n}\nIt would be a little slimmer.. Ahh you are right, I missed that the callback will get called before the async method is done.. But a problem I do have with the if (setAnalytics === true )... is that it doesn't really explain itself when reading it.  In other words, why are we testing that setAnalytics equals true?  After digging into the code for a bit I realize why you are doing it but I'd rather understand the high level ideas without going into that.  I would actually prefer that you call the done method in each if/else if block rather than have that conditional at the end as it seems much clearer when glancing at this method.  What do you think?. I really dislike abbreviated variable names :p. I think you are probably already on it Faina, but you are going to have the version sent to GA as well, right?  Just wanted to add this comment here so we don't lose it.. Ya got some indentation problems here. Stupid thing but can we add some breathing room? i.e. () => {}. indentation. indentation. indentation. Might as well put the }); on the same line like...\n(error) => {}. Sounds good. I know this is already existing code but I object to the name for this.  If we use a variable name like userMnemonicExists I think that it should be a boolean.  I would propose that this variable gets set to something like userMnemonic or just mnemonic.  So it could look like \nlet mnemonic = defaultUserConfig.get(\"mnemonic\");\nif (!mnemonic) {\n  mnemonic = ....\nAnd actually that would simplify the logic a bit as you wouldn't need the else.. I think Configstore.prototype.get is still stubbed and will return the value set in the beforeEach, and so this test will always pass.  You should set this value before the stub or manually set it to the expected string.. Perhaps we could make a custom label that we could use for issues that need to sit around for a while.  I don't know what it might be called.... \"...the Truffle team will try to respond as soon as they can.\". Sounds fine to me. Oh that is a nice, concise solution.. Yes\n. I don't want to really make a thing out of this, but I just cringe slightly when I see a variable name as bland as val...and that it is shortened.  I don't know if I have a better suggestion.  Any thoughts on this?. Why is it risky?\n. Also, does this proposed solution mean that this async function will take no arguments and just return the network id?. Yes!. Yes, for the case where a single version is specified we will go straight to the cache to check if it is there. I'll add a comment!. Hmm, how about a method that returns the strategy and...\nif (strategy) {\n  strategy.load(userSpecification);\n} else {\n  throw Error....?. So if I understand you correctly, the idea would be to make Docker and Native a subcase of VersionRange?. Yes, I agree. I'll think about this.. So what exactly is the purpose of what you are asking? Are you thinking that a lot of the logic in LoadingStrategy really should be in VersionRange?. Did you mean \"why not remove those args\"? If that was your question, mocha doesn't seem to dig down far enough in the test directories without those.. Why does this one have \"\"s and the other one doesn't? I guess they are arbitrary\n. This method deletes the contents of the directory if it is not empty. Actually you need to do this check before the temporary directory is created anyways.. Perhaps it is unnecessary, this is just the architecture that was handed to me on a silver platter.. Sounds fine to me. We could be a bit more specific...like we could just split it by something like /truffle/packages. Oh yeah, just an idea...maybe /truffle/ is enough to minimize conflicts. In that case it seems like the only conflict it would have is if you have another folder in the path named truffle. I guess you could also check the length of that array after the split and remove all segments except that last one?. Oh yeah Windows systems use \"\\\" instead of \"/\"\n. No this options is the unboxOptions, perhaps just passing the eventManager itself is enough as I think that is all that is used in this method.. Yes, I wanted to ask everyone to weigh in on what they think these things should be called. Emit would cause a lot less noise.. Sure, without too much thought on the matter it seems like a good idea to just attach eventManager by default to the config. One thing though, will there ever come a time when we might want to initialize the listeners based on what command is run? Currently they all get set unless you use an option like quiet=true. I suppose at that time we might be able to add more options and edit eventManager to subscribe/initialize based on that?. One thing that comes to mind is that I feel like there is some amount of confusion when I see options/config and inconsistencies in the naming of that throughout a command flow. I wanted it to be clear that we were talking about the options for this particular thing and not the global config object that gets passed. It seems ideal to me that that global config object has a proper name that remains consistent in Truffle though I know we have to deal with what we have right now....just a thought.. I think I would vote that we change them as we see them...but I mean, I won't take you to the mat over it.. Hmm, I don't know if this matters but we should consider the fact that this will take away the name \"develop\" from users and dedicate it to this functionality. What do we think about this?. Is this warning message still appropriate or do we need to update it?. Get 'im outta here!. The same with run.. Yeah but if it is not an async function then there really is no reason to make it a function that returns a Promise.\n. Oh ok then that is that.. Like, we don't really want everything async. He's referring to methods that need to return Promises. async fundamentally changes the method in that it causes it to then return a Promise that resolves to whatever is returned instead of returning the actual thing that is in the return statement.. I'm not sure, technically that mnemonic should be secure, right? At least it should be unless users are not careful. I was thinking that this message was in reference to the \"Days of Olde\" with the classic 'candy maple ...' business.. Can we do this differently? I would love to just pull out the values but in the case that the new values are undefined I don't want it to overwrite the old stuff that we want to keep. Let me know if you have any ideas. (I am referring to the if (typeof quiet !==... train below). It seems to me that user configuration might be a more specific use for the cache directory. In other words, Truffle has a directory that it uses to cache things. One of those things happens to be the user configuration data. And I would be totally fine with making it Config.getCompilersCacheDirectory. That way the loading strategies don't need to do any legwork and Config can worry about that stuff.. Oh, I see what you mean. Maybe it should be something more like getTruffleDataDirectory. Maybe inside there can be a folder named something like cachedCompilers...how does that seem?. Actually I guess Config shouldn't necessarily know about the compiler cacheing path...the loading strategy should handle that I think.. Sure, should we do succeed and fail instead of success and end if we are thinking of imperitive mood?. ",
    "predicador37": "Why did you close the issue? I'm having similar problems. @sajadghawami could you solve your problems? . Thanks a lot @tcoulter . I'll take another look by Monday then.. The problem is solved in the last release, 3.4.7.\nThanks a lot! . ",
    "sajadghawami": "@predicador37 sorry, its already a while back and unfortunately i don't remember what i did to solve this issue... . ",
    "masonforest": "Also, I added bluebird as a dependency. Let me know if you're trying to limit adding additional dependencies and I can do without. It does have some cool features though which make working with promises much nicer.. ",
    "andre-zh": "As far as I know it won't create App folder like before.\nhttp://truffleframework.com/docs/getting_started/project. ",
    "ysfAskri": "thank you :). ",
    "nocb": "Note: The MetaCoin Truffle project used to be created by running truffle init. Now it exists as a Truffle Box.\nv4.0.4 . ",
    "ProphetDaniel": "Same issue for us both Windows and Linux when trying to install zeppelin to a Truffle project.. I'm very worried with the openZeppelin community without the lastest version working right now. So I think @maraoz we should switch to npm right away just to make sure there won't be unnecessary hurdles for the underlying community. In the meanwhile @tcoulter will be investigating and solving the issue as soon as possible if that can be solved within truffle or maybe we will have to escalate the issue to IPFS folks in the case that's their problem impacting on this issue.. Well, to get rid of that same problem, we installed truffle version 3.2.1 with the following command: \nnpm install -g truffle@3.2.1\n@rfikki and @ripper234, please let me know if that version installs in windows 10 for you too. If it is so we can find out the latest truffle version that does install in win 10 and git compare with the subsequent where it doesn't install anylonger to help identifying the problem.. > Installs perfectly :sunglasses:\nThat is great @ripper234.\nLatest version installation that still worked in my windows 10 was 3.2.2. The problem started to happen on truffle 3.2.3. So this is something related to windows 10 and with truffle starting with version 3.2.3.\nThat means @bvrooman , git comparing truffle 3.2.3 with 3.2.2 should reveal the problematic change.\nLinux OS\nBoth latest truffle 3.2.4 and the previous 3.2.3 installations work in my KDE neon linux OS.. It installed like a breeze in my windows 10 setup with npm install truffle@beta. I tested main functionalities like init, compile, migrate and test and it looks alright.. This problem is still happening with latest version on windows.. @cgewecke, here Is the code which is also available at the Stack Exchange thread. So I will paste here from GitHub repository.\nThere is no particular client involved other than Infura. This code follows instructions from here.\n```javascript\nrequire('dotenv').config();\nrequire('babel-register');\nrequire('babel-polyfill');\nconst HDWalletProvider = require('truffle-safe-hdwallet-provider');\nconst providerWithMnemonic = (mnemonic, rpcEndpoint) =>\n  new HDWalletProvider(mnemonic, rpcEndpoint, 0, 1, process.env.PASSWORD);\nconst infuraProvider = network => providerWithMnemonic(\n  process.env.MNEMONIC || '',\n  https://${network}.infura.io/${process.env.INFURA_API_KEY}\n);\nconst provider = apiToUse => providerWithMnemonic(\n  process.env.MNEMONIC || '',\n  process.env.MAINNET_ENDPOINT+${apiToUse}\n);\nconst ropstenProvider = process.env.SOLIDITY_COVERAGE\n  ? undefined\n  : infuraProvider('ropsten');\nmodule.exports = {\n  networks: {\n    development: {\n      host: 'localhost',\n      port: 9545,\n      network_id: '', // eslint-disable-line camelcase\n    },\n    live: {\n      provider: provider('eth-api'),\n      network_id: 1,\n    },\n    ropsten: {\n      provider: ropstenProvider,\n      network_id: 3, // eslint-disable-line camelcase\n    },\n    coverage: {\n      host: 'localhost',\n      network_id: '', // eslint-disable-line camelcase\n      port: 8555,\n      gas: 0xfffffffffff,\n      gasPrice: 0x01,\n    },\n    testrpc: {\n      host: 'localhost',\n      port: 8545,\n      network_id: '', // eslint-disable-line camelcase\n    },\n    ganache: {\n      host: 'localhost',\n      port: 7545,\n      network_id: '', // eslint-disable-line camelcase\n    },\n  },\n  solc: {\n    optimizer: {\n      enabled: true,\n      runs: 200\n    }\n  },\n};\n. @cgewecke, The problem only happens when trying to deploy to `live` network.. @cgewecke , after updating truffle config live section to:javascript\n    live: {\n      provider: provider('eth-api'),\n      network_id: 1,\n      gasPrice: 2000000000,\n      gas: 6000000,\n    },\nThe problem still persists.. I just added the truffle test as suggested by @cgewecke. Source code of the test [here](https://github.com/ClassicDelta/Smart-Contracts/blob/master/test/ClassicDelta.test.js). \nThe result of the gas estimative as requested by test was:\nEstimated gas for contract is: 3607329\n```\nStill this looks like a bug on Truffle since it only migrates to ganache and development networks. When to migrate to live network the fault is still happening.. > Could you explain what is happening here in your truffle.js?\nThis is a function that returns the following:\njavascript\nnew HDWalletProvider(process.env.MNEMONIC, process.env.MAINNET_ENDPOINT+`eth-api`, 0, 1, process.env.PASSWORD);\nwhere the following parameters are defined within .env file:\n- MNEMONIC\n- MAINNET_ENDPOINT\n- PASSWORD\nIn my setup MAINNET_ENDPOINT is a custom geth running endpoint which I have privately set for my project. \n\nIn order to allow people to reproduce the problem exactly as I currently face I changed truffle-config.js to use Infura's endpoint as can be seen here.\nSo now provider renders:\njavascript\nnew HDWalletProvider(process.env.MNEMONIC, `https://mainnet.infura.io/${process.env.INFURA_API_KEY}`, 0, 1, process.env.PASSWORD);\nAnd the following parameters need to be defined within .env file:\n- MNEMONIC\n- INFURA_API_KEY\n- PASSWORD\nAccording to the following example:\n```\nconfigure your infura api key (not technically required)\nINFURA_API_KEY=xXxXxXxXxXxXxXxXxXxX\nchange the mnemonic that your hd wallet is seeded with\nMNEMONIC=\"example example example example example example example example example example example example\"\nchange the password with the password you have encrypted your hd wallet with\nPASSWORD=\"passwordExample\"\n```\n\nIs it possible there is some problem with the way truffle-safe-hdwallet-provider is working?\n\nMos likely not. Because the same problem happens when utilizing truffle-hdwallet-provider for unencrypted mnemonic phrase and exactly as presented by tutorial.\n\n\nOne way to debug this might be to use the default truffle-wallet deploying to a testnet and see if that succeeds?\n\nYes, and it works flawlessly.\nAfter starting truffle develop in one terminal and truffle migrate in another, here is the successful result:\nbash\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  ... 0xe1b191ce722bc3ec922071c396a627365f16ca69c0b2a7d2ce5830d4f1e6881a\n  Migrations: 0x8cdaf0cd259887258bc13a92c0a6da92698644c0\nSaving artifacts...\nRunning migration: 2_deploy_contracts.js\n  Replacing ClassicDelta...\n  ... 0x66988f39a95507976ee6362a55d66c11dd7513e2818af0bd127f79aa17979f66\n  ClassicDelta: 0xf12b5dd4ead5f743c6baa640b0216200e89b60da\nSaving artifacts...\n. @cgewecke As I said I have tested with truffle develop testnet and also with my own private net which I started with the following genesis block:\njavascript\n{\n    \"nonce\": \"0x0000000000000042\",\n    \"difficulty\": \"0x4000\",\n    \"alloc\": {\n        \"d1900da6020324e24327c7b5b16526f201929fe3\": {\n            \"balance\": \"5000000000\"\n        },\n        \"9eeb4dce9837e6a4461e3797abe3d10a8a5bdbb5\": {\n            \"balance\": \"5000000000\"\n        }\n    },\n    \"mixhash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"coinbase\": \"0xd1900da6020324e24327c7b5b16526f201929fe3\",\n    \"timestamp\": \"0x00\",\n    \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"extraData\": \"0x\",\n    \"config\": {\n        \"eip155Block\": 0,\n        \"eip158Block\": 0,\n        \"homesteadBlock\": 0,\n        \"chainId\": 23\n    },\n    \"gasLimit\": \"0x8000000\"\n}. > cc: @ProphetDaniel did you ever resolve this?\nI did. Please see latest commits for solution. Thank you @cgewecke.. > @ProphetDaniel Have never had to do this. Do you typically need to enter a password in order to clone a repo? This could be something worth raising at meta.\nYes, since I use SSH password for maximum safety.. Indeed @cgewecke .. ",
    "SirensOfTitan": "What's the swarm timeline for development use cases like this?  This is a pretty basic use case that undoubtedly should be a good experience (installing standards-compliant token library) so that new developers don't shy away from the platform.  \nHappy to lend some SWE time if you guys direct me to what I can do to help! :) . ",
    "simbro": "Did you ever find a solution for this?  I'm having the exact same issue:\n```\n\ntruffle init\n\nevents.js:160\n      throw er; // Unhandled 'error' event\n      ^\nError: connect ENETUNREACH xxx.xxx.xx.xxx:443\n    at Object.exports._errnoException (util.js:1022:11)\n    at exports._exceptionWithHostPort (util.js:1045:20)\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1087:14)\n```\nI'm running:\n * Truffle v3.2.1\n * Node v6.9.5\n * NPM 3.10.10\non Ubuntu 14.04. ",
    "Shreekavithaa": "Same issue for me too. Any solution? \n. FYI this is the log file that was generated: \n0 info it worked if it ends with ok\n1 verbose cli [ 'C:\\Program Files\\nodejs\\node.exe',\n1 verbose cli   'C:\\Users\\Z003TCDN.AD001\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js',\n1 verbose cli   'install',\n1 verbose cli   '-g',\n1 verbose cli   'truffle' ]\n2 info using npm@5.0.3\n3 info using node@v8.1.2\n4 verbose npm-session 4d2b143f0aa6dfed\n5 silly install loadCurrentTree\n6 silly install readGlobalPackageData\n7 http fetch GET 200 https://registry.npmjs.org/truffle 1201ms\n8 silly pacote tag manifest for truffle@latest fetched in 1779ms\n9 silly install loadIdealTree\n10 silly install cloneCurrentTreeToIdealTree\n11 silly install loadShrinkwrap\n12 silly install loadAllDepsIntoIdealTree\n13 silly resolveWithNewModule truffle@3.2.5 checking installable status\n14 http fetch GET 200 https://registry.npmjs.org/diff 936ms\n15 http fetch GET 200 https://registry.npmjs.org/chokidar 999ms\n16 silly pacote version manifest for diff@1.4.0 fetched in 999ms\n17 silly resolveWithNewModule diff@1.4.0 checking installable status\n18 http fetch GET 200 https://registry.npmjs.org/del 999ms\n19 http fetch GET 200 https://registry.npmjs.org/chai 1014ms\n20 http fetch GET 200 https://registry.npmjs.org/ethpm-registry 1014ms\n21 http fetch GET 200 https://registry.npmjs.org/cpr 1046ms\n22 http fetch GET 200 https://registry.npmjs.org/ethpm 1076ms\n23 silly pacote range manifest for chokidar@^1.4.2 fetched in 1092ms\n24 silly resolveWithNewModule chokidar@1.7.0 checking installable status\n25 silly pacote range manifest for del@^2.2.0 fetched in 1092ms\n26 silly resolveWithNewModule del@2.2.2 checking installable status\n27 http fetch GET 200 https://registry.npmjs.org/finalhandler 1092ms\n28 silly pacote range manifest for chai@^3.3.0 fetched in 1108ms\n29 silly resolveWithNewModule chai@3.5.0 checking installable status\n30 http fetch GET 200 https://registry.npmjs.org/colors 1108ms\n31 silly pacote range manifest for cpr@^0.4.3 fetched in 1139ms\n32 silly resolveWithNewModule cpr@0.4.3 checking installable status\n33 silly pacote version manifest for ethpm-registry@0.0.9 fetched in 1123ms\n34 silly resolveWithNewModule ethpm-registry@0.0.9 checking installable status\n35 silly pacote version manifest for ethpm@0.0.13 fetched in 1154ms\n36 silly resolveWithNewModule ethpm@0.0.13 checking installable status\n37 silly pacote range manifest for finalhandler@^0.4.0 fetched in 1154ms\n38 silly resolveWithNewModule finalhandler@0.4.1 checking installable status\n39 silly pacote range manifest for colors@^1.1.2 fetched in 1170ms\n40 silly resolveWithNewModule colors@1.1.2 checking installable status\n41 http fetch GET 304 https://registry.npmjs.org/async 1170ms (from cache)\n42 silly pacote range manifest for async@^1.4.2 fetched in 1248ms\n43 silly resolveWithNewModule async@1.5.2 checking installable status\n44 http fetch GET 304 https://registry.npmjs.org/fs-extra 936ms (from cache)\n45 http fetch GET 304 https://registry.npmjs.org/lodash 874ms (from cache)\n46 http fetch GET 200 https://registry.npmjs.org/mocha 874ms\n47 silly pacote range manifest for mocha@^3.2.0 fetched in 889ms\n48 silly resolveWithNewModule mocha@3.4.2 checking installable status\n49 http fetch GET 304 https://registry.npmjs.org/mkdirp 905ms (from cache)\n50 silly pacote range manifest for fs-extra@^2.0.0 fetched in 1014ms\n51 silly resolveWithNewModule fs-extra@2.1.2 checking installable status\n52 silly pacote range manifest for mkdirp@^0.5.1 fetched in 921ms\n53 silly resolveWithNewModule mkdirp@0.5.1 checking installable status\n54 silly pacote range manifest for lodash@^4.5.1 fetched in 952ms\n55 silly resolveWithNewModule lodash@4.17.4 checking installable status\n56 http fetch GET 200 https://registry.npmjs.org/serve-static 952ms\n57 silly pacote range manifest for serve-static@^1.10.0 fetched in 952ms\n58 silly resolveWithNewModule serve-static@1.12.3 checking installable status\n59 http fetch GET 200 https://registry.npmjs.org/truffle-compile 858ms\n60 silly pacote range manifest for truffle-compile@~2.0.0 fetched in 874ms\n61 silly resolveWithNewModule truffle-compile@2.0.3 checking installable status\n62 http fetch GET 200 https://registry.npmjs.org/temp 968ms\n63 http fetch GET 200 https://registry.npmjs.org/node-dir 999ms\n64 http fetch GET 200 https://registry.npmjs.org/spawn-args 983ms\n65 silly pacote version manifest for node-dir@0.1.16 fetched in 1014ms\n66 silly resolveWithNewModule node-dir@0.1.16 checking installable status\n67 silly pacote range manifest for temp@^0.8.3 fetched in 983ms\n68 silly resolveWithNewModule temp@0.8.3 checking installable status\n69 silly pacote range manifest for spawn-args@^0.1.0 fetched in 983ms\n70 silly resolveWithNewModule spawn-args@0.1.0 checking installable status\n71 http fetch GET 200 https://registry.npmjs.org/truffle-artifactor 1030ms\n72 silly pacote range manifest for truffle-artifactor@~2.1.4 fetched in 1030ms\n73 silly resolveWithNewModule truffle-artifactor@2.1.4 checking installable status\n74 http fetch GET 200 https://registry.npmjs.org/truffle-contract 827ms\n75 silly pacote range manifest for truffle-contract@~2.0.0 fetched in 842ms\n76 silly resolveWithNewModule truffle-contract@2.0.1 checking installable status\n77 http fetch GET 200 https://registry.npmjs.org/truffle-error 873ms\n78 silly pacote range manifest for truffle-error@~0.0.2 fetched in 905ms\n79 silly resolveWithNewModule truffle-error@0.0.2 checking installable status\n80 http fetch GET 200 https://registry.npmjs.org/truffle-init 843ms\n81 http fetch GET 200 https://registry.npmjs.org/truffle-migrate 843ms\n82 silly pacote range manifest for truffle-init@~1.0.5 fetched in 858ms\n83 silly resolveWithNewModule truffle-init@1.0.6 checking installable status\n84 silly pacote range manifest for truffle-migrate@~1.1.1 fetched in 858ms\n85 silly resolveWithNewModule truffle-migrate@1.1.2 checking installable status\n86 http fetch GET 200 https://registry.npmjs.org/truffle-contract-sources 998ms\n87 silly pacote range manifest for truffle-contract-sources@~0.0.1 fetched in 1045ms\n88 silly resolveWithNewModule truffle-contract-sources@0.0.1 checking installable status\n89 http fetch GET 200 https://registry.npmjs.org/truffle-provider 999ms\n90 silly pacote range manifest for truffle-provider@~0.0.1 fetched in 1014ms\n91 silly resolveWithNewModule truffle-provider@0.0.1 checking installable status\n92 http fetch GET 200 https://registry.npmjs.org/truffle-deployer 1139ms\n93 silly pacote range manifest for truffle-deployer@~1.0.0 fetched in 1139ms\n94 silly resolveWithNewModule truffle-deployer@1.0.1 checking installable status\n95 http fetch GET 200 https://registry.npmjs.org/truffle-expect 1138ms\n96 silly pacote range manifest for truffle-expect@~0.0.3 fetched in 1154ms\n97 silly resolveWithNewModule truffle-expect@0.0.3 checking installable status\n98 http fetch GET 200 https://registry.npmjs.org/truffle-provisioner 1170ms\n99 silly pacote range manifest for truffle-provisioner@~0.1.0 fetched in 1186ms\n100 silly resolveWithNewModule truffle-provisioner@0.1.0 checking installable status\n101 http fetch GET 200 https://registry.npmjs.org/truffle-require 920ms\n102 silly pacote range manifest for truffle-require@~1.0.0 fetched in 936ms\n103 silly resolveWithNewModule truffle-require@1.0.0 checking installable status\n104 http fetch GET 200 https://registry.npmjs.org/truffle-resolver 811ms\n105 silly pacote range manifest for truffle-resolver@~3.0.0 fetched in 811ms\n106 silly resolveWithNewModule truffle-resolver@3.0.0 checking installable status\n107 http fetch GET 200 https://registry.npmjs.org/truffle-solidity-utils 827ms\n108 silly pacote range manifest for truffle-solidity-utils@~1.0.0 fetched in 827ms\n109 silly resolveWithNewModule truffle-solidity-utils@1.0.0 checking installable status\n110 http fetch GET 304 https://registry.npmjs.org/web3 874ms (from cache)\n111 silly pacote range manifest for web3@^0.18.0 fetched in 889ms\n112 silly resolveWithNewModule web3@0.18.4 checking installable status\n113 http fetch GET 304 https://registry.npmjs.org/yargs 905ms (from cache)\n114 silly pacote range manifest for yargs@^6.6.0 fetched in 920ms\n115 silly resolveWithNewModule yargs@6.6.0 checking installable status\n116 http fetch GET 200 https://registry.npmjs.org/truffle-config 31840ms attempt #2\n117 silly pacote range manifest for truffle-config@~0.0.7 fetched in 31868ms\n118 silly resolveWithNewModule truffle-config@0.0.7 checking installable status\n119 http fetch GET 200 https://registry.npmjs.org/assertion-error 887ms\n120 http fetch GET 200 https://registry.npmjs.org/deep-eql 895ms\n121 silly pacote range manifest for assertion-error@^1.0.1 fetched in 912ms\n122 silly resolveWithNewModule assertion-error@1.0.2 checking installable status\n123 silly pacote range manifest for deep-eql@^0.1.3 fetched in 912ms\n124 silly resolveWithNewModule deep-eql@0.1.3 checking installable status\n125 http fetch GET 200 https://registry.npmjs.org/type-detect 32306ms attempt #2\n126 silly pacote range manifest for type-detect@^1.0.0 fetched in 32366ms\n127 silly resolveWithNewModule type-detect@1.0.0 checking installable status\n128 silly pacote version manifest for type-detect@0.1.1 fetched in 10ms\n129 silly resolveWithNewModule type-detect@0.1.1 checking installable status\n130 http fetch GET 200 https://registry.npmjs.org/readdirp 884ms\n131 http fetch GET 304 https://registry.npmjs.org/path-is-absolute 911ms (from cache)\n132 silly pacote range manifest for readdirp@^2.0.0 fetched in 911ms\n133 silly resolveWithNewModule readdirp@2.1.0 checking installable status\n134 silly pacote range manifest for path-is-absolute@^1.0.0 fetched in 919ms\n135 silly resolveWithNewModule path-is-absolute@1.0.1 checking installable status\n136 http fetch GET 200 https://registry.npmjs.org/glob-parent 960ms\n137 http fetch GET 200 https://registry.npmjs.org/is-glob 961ms\n138 http fetch GET 200 https://registry.npmjs.org/is-binary-path 966ms\n139 http fetch GET 200 https://registry.npmjs.org/fsevents 964ms\n140 http fetch GET 200 https://registry.npmjs.org/async-each 970ms\n141 silly pacote range manifest for glob-parent@^2.0.0 fetched in 979ms\n142 silly resolveWithNewModule glob-parent@2.0.0 checking installable status\n143 http fetch GET 304 https://registry.npmjs.org/inherits 981ms (from cache)\n144 silly pacote range manifest for is-glob@^2.0.0 fetched in 979ms\n145 silly resolveWithNewModule is-glob@2.0.1 checking installable status\n146 silly pacote range manifest for fsevents@^1.0.0 fetched in 979ms\n147 silly resolveWithNewModule fsevents@1.1.2 checking installable status\n148 silly pacote trying https://registry.npmjs.org/fsevents/-/fsevents-1.1.2.tgz by hash: sha512-Sn44E5wQW4bTHXvQmvSHwqbuiXtduD6Rrjm2ZtUEGbyrig+nUH3t/QD4M4/ZXViY556TBpRgZkHLDx3JxPwxiw==\n149 silly pacote data for sha512-Sn44E5wQW4bTHXvQmvSHwqbuiXtduD6Rrjm2ZtUEGbyrig+nUH3t/QD4M4/ZXViY556TBpRgZkHLDx3JxPwxiw== not present. Using manifest.\n150 silly pacote range manifest for inherits@^2.0.1 fetched in 1028ms\n151 silly resolveWithNewModule inherits@2.0.3 checking installable status\n152 silly pacote range manifest for async-each@^1.0.0 fetched in 1029ms\n153 silly resolveWithNewModule async-each@1.0.1 checking installable status\n154 silly pacote range manifest for is-binary-path@^1.0.0 fetched in 1029ms\n155 silly resolveWithNewModule is-binary-path@1.0.1 checking installable status\n156 http fetch GET 200 https://registry.npmjs.org/anymatch 1259ms\n157 silly pacote range manifest for anymatch@^1.3.0 fetched in 1271ms\n158 silly resolveWithNewModule anymatch@1.3.0 checking installable status\n159 http fetch GET 200 https://registry.npmjs.org/fsevents/-/fsevents-1.1.2.tgz 14917ms\n160 silly pacote https://registry.npmjs.org/fsevents/-/fsevents-1.1.2.tgz extracted in 15776ms\n161 silly addBundled read tarball\n162 silly cleanup remove extracted module\n163 http fetch GET 200 https://registry.npmjs.org/micromatch 925ms\n164 http fetch GET 200 https://registry.npmjs.org/arrify 935ms\n165 silly pacote range manifest for micromatch@^2.1.5 fetched in 953ms\n166 silly resolveWithNewModule micromatch@2.3.11 checking installable status\n167 silly pacote range manifest for arrify@^1.0.0 fetched in 960ms\n168 silly resolveWithNewModule arrify@1.0.1 checking installable status\n169 http fetch GET 200 https://registry.npmjs.org/kind-of 949ms\n170 http fetch GET 200 https://registry.npmjs.org/braces 960ms\n171 http fetch GET 200 https://registry.npmjs.org/arr-diff 964ms\n172 silly pacote range manifest for kind-of@^3.0.2 fetched in 967ms\n173 silly resolveWithNewModule kind-of@3.2.2 checking installable status\n174 http fetch GET 200 https://registry.npmjs.org/filename-regex 974ms\n175 silly pacote range manifest for braces@^1.8.2 fetched in 982ms\n176 silly resolveWithNewModule braces@1.8.5 checking installable status\n177 silly pacote range manifest for arr-diff@^2.0.0 fetched in 987ms\n178 silly resolveWithNewModule arr-diff@2.0.0 checking installable status\n179 http fetch GET 200 https://registry.npmjs.org/expand-brackets 987ms\n180 http fetch GET 200 https://registry.npmjs.org/array-unique 1055ms\n181 silly pacote range manifest for filename-regex@^2.0.0 fetched in 1055ms\n182 silly resolveWithNewModule filename-regex@2.0.1 checking installable status\n183 http fetch GET 200 https://registry.npmjs.org/is-extglob 1056ms\n184 http fetch GET 200 https://registry.npmjs.org/extglob 1058ms\n185 http fetch GET 200 https://registry.npmjs.org/object.omit 1061ms\n186 silly pacote range manifest for expand-brackets@^0.1.4 fetched in 1068ms\n187 silly resolveWithNewModule expand-brackets@0.1.5 checking installable status\n188 silly pacote range manifest for array-unique@^0.2.1 fetched in 1071ms\n189 silly resolveWithNewModule array-unique@0.2.1 checking installable status\n190 silly pacote range manifest for is-extglob@^1.0.0 fetched in 1072ms\n191 silly resolveWithNewModule is-extglob@1.0.0 checking installable status\n192 silly pacote range manifest for object.omit@^2.0.0 fetched in 1076ms\n193 silly resolveWithNewModule object.omit@2.0.1 checking installable status\n194 silly pacote range manifest for extglob@^0.3.1 fetched in 1078ms\n195 silly resolveWithNewModule extglob@0.3.2 checking installable status\n196 http fetch GET 200 https://registry.npmjs.org/normalize-path 1081ms\n197 silly pacote range manifest for normalize-path@^2.0.1 fetched in 1087ms\n198 silly resolveWithNewModule normalize-path@2.1.1 checking installable status\n199 http fetch GET 200 https://registry.npmjs.org/parse-glob 928ms\n200 silly pacote range manifest for parse-glob@^3.0.4 fetched in 999ms\n201 silly resolveWithNewModule parse-glob@3.0.4 checking installable status\n202 http fetch GET 200 https://registry.npmjs.org/regex-cache 1075ms\n203 silly pacote range manifest for regex-cache@^0.4.2 fetched in 1084ms\n204 silly resolveWithNewModule regex-cache@0.4.3 checking installable status\n205 http fetch GET 200 https://registry.npmjs.org/arr-flatten 940ms\n206 silly pacote range manifest for arr-flatten@^1.0.1 fetched in 947ms\n207 silly resolveWithNewModule arr-flatten@1.0.3 checking installable status\n208 http fetch GET 200 https://registry.npmjs.org/preserve 899ms\n209 silly pacote range manifest for preserve@^0.2.0 fetched in 944ms\n210 silly resolveWithNewModule preserve@0.2.0 checking installable status\n211 http fetch GET 200 https://registry.npmjs.org/expand-range 1074ms\n212 silly pacote range manifest for expand-range@^1.8.1 fetched in 1082ms\n213 silly resolveWithNewModule expand-range@1.8.2 checking installable status\n214 http fetch GET 200 https://registry.npmjs.org/repeat-element 32856ms attempt #2\n215 silly pacote range manifest for repeat-element@^1.1.2 fetched in 32864ms\n216 silly resolveWithNewModule repeat-element@1.1.2 checking installable status\n217 http fetch GET 200 https://registry.npmjs.org/fill-range 905ms\n218 silly pacote range manifest for fill-range@^2.1.0 fetched in 925ms\n219 silly resolveWithNewModule fill-range@2.2.3 checking installable status\n220 http fetch GET 200 https://registry.npmjs.org/is-number 781ms\n221 http fetch GET 200 https://registry.npmjs.org/randomatic 785ms\n222 silly pacote range manifest for randomatic@^1.1.3 fetched in 790ms\n223 silly resolveWithNewModule randomatic@1.1.7 checking installable status\n224 silly pacote range manifest for is-number@^2.1.0 fetched in 792ms\n225 silly resolveWithNewModule is-number@2.1.0 checking installable status\n226 http fetch GET 200 https://registry.npmjs.org/repeat-string 939ms\n227 silly pacote range manifest for repeat-string@^1.5.2 fetched in 944ms\n228 silly resolveWithNewModule repeat-string@1.6.1 checking installable status\n229 http fetch GET 200 https://registry.npmjs.org/isobject 1284ms\n230 silly pacote range manifest for isobject@^2.0.0 fetched in 1296ms\n231 silly resolveWithNewModule isobject@2.1.0 checking installable status\n232 http fetch GET 200 https://registry.npmjs.org/is-buffer 778ms\n233 silly pacote range manifest for is-buffer@^1.1.5 fetched in 840ms\n234 silly resolveWithNewModule is-buffer@1.1.5 checking installable status\n235 http fetch GET 304 https://registry.npmjs.org/isarray 936ms (from cache)\n236 silly pacote version manifest for isarray@1.0.0 fetched in 946ms\n237 silly resolveWithNewModule isarray@1.0.0 checking installable status\n238 silly pacote range manifest for is-number@^3.0.0 fetched in 31ms\n239 silly resolveWithNewModule is-number@3.0.0 checking installable status\n240 silly pacote range manifest for kind-of@^4.0.0 fetched in 32ms\n241 silly resolveWithNewModule kind-of@4.0.0 checking installable status\n242 silly pacote range manifest for kind-of@^3.0.2 fetched in 6ms\n243 silly resolveWithNewModule kind-of@3.2.2 checking installable status\n244 http fetch GET 200 https://registry.npmjs.org/is-posix-bracket 1158ms\n245 silly pacote range manifest for is-posix-bracket@^0.1.0 fetched in 1176ms\n246 silly resolveWithNewModule is-posix-bracket@0.1.1 checking installable status\n247 http fetch GET 200 https://registry.npmjs.org/remove-trailing-separator 832ms\n248 silly pacote range manifest for remove-trailing-separator@^1.0.1 fetched in 836ms\n249 silly resolveWithNewModule remove-trailing-separator@1.0.2 checking installable status\n250 http fetch GET 200 https://registry.npmjs.org/for-own 998ms\n251 silly pacote range manifest for for-own@^0.1.4 fetched in 1009ms\n252 silly resolveWithNewModule for-own@0.1.5 checking installable status\n253 http fetch GET 200 https://registry.npmjs.org/is-extendable 1090ms\n254 silly pacote range manifest for is-extendable@^0.1.1 fetched in 1105ms\n255 silly resolveWithNewModule is-extendable@0.1.1 checking installable status\n256 http fetch GET 200 https://registry.npmjs.org/for-in 819ms\n257 silly pacote range manifest for for-in@^1.0.1 fetched in 824ms\n258 silly resolveWithNewModule for-in@1.0.2 checking installable status\n259 http fetch GET 200 https://registry.npmjs.org/glob-base 799ms\n260 silly pacote range manifest for glob-base@^0.3.0 fetched in 808ms\n261 silly resolveWithNewModule glob-base@0.3.0 checking installable status\n262 http fetch GET 200 https://registry.npmjs.org/is-dotfile 974ms\n263 silly pacote range manifest for is-dotfile@^1.0.0 fetched in 987ms\n264 silly resolveWithNewModule is-dotfile@1.0.3 checking installable status\n265 http fetch GET 200 https://registry.npmjs.org/is-primitive 833ms\n266 silly pacote range manifest for is-primitive@^2.0.0 fetched in 840ms\n267 silly resolveWithNewModule is-primitive@2.0.0 checking installable status\n268 http fetch GET 200 https://registry.npmjs.org/is-equal-shallow 1782ms\n269 silly pacote range manifest for is-equal-shallow@^0.1.3 fetched in 1794ms\n270 silly resolveWithNewModule is-equal-shallow@0.1.3 checking installable status\n271 http fetch GET 304 https://registry.npmjs.org/nan 2020ms (from cache)\n272 silly pacote range manifest for nan@^2.3.0 fetched in 2024ms\n273 silly resolveWithNewModule nan@2.6.2 checking installable status\n274 http fetch GET 200 https://registry.npmjs.org/binary-extensions 988ms\n275 silly pacote range manifest for binary-extensions@^1.0.0 fetched in 993ms\n276 silly resolveWithNewModule binary-extensions@1.8.0 checking installable status\n277 http fetch GET 304 https://registry.npmjs.org/graceful-fs 945ms (from cache)\n278 silly pacote range manifest for graceful-fs@^4.1.2 fetched in 948ms\n279 silly resolveWithNewModule graceful-fs@4.1.11 checking installable status\n280 http fetch GET 304 https://registry.npmjs.org/readable-stream 1183ms (from cache)\n281 silly pacote range manifest for readable-stream@^2.0.2 fetched in 1208ms\n282 silly resolveWithNewModule readable-stream@2.3.0 checking installable status\n283 http fetch GET 304 https://registry.npmjs.org/minimatch 1325ms (from cache)\n284 silly pacote range manifest for minimatch@^3.0.2 fetched in 1355ms\n285 silly resolveWithNewModule minimatch@3.0.4 checking installable status\n286 http fetch GET 200 https://registry.npmjs.org/set-immediate-shim 3843ms\n287 silly pacote range manifest for set-immediate-shim@^1.0.1 fetched in 3852ms\n288 silly resolveWithNewModule set-immediate-shim@1.0.1 checking installable status\n289 http fetch GET 304 https://registry.npmjs.org/brace-expansion 1403ms (from cache)\n290 silly pacote range manifest for brace-expansion@^1.1.7 fetched in 1409ms\n291 silly resolveWithNewModule brace-expansion@1.1.8 checking installable status\n292 http fetch GET 304 https://registry.npmjs.org/concat-map 873ms (from cache)\n293 silly pacote version manifest for concat-map@0.0.1 fetched in 875ms\n294 silly resolveWithNewModule concat-map@0.0.1 checking installable status\n295 http fetch GET 304 https://registry.npmjs.org/balanced-match 906ms (from cache)\n296 silly pacote range manifest for balanced-match@^1.0.0 fetched in 920ms\n297 silly resolveWithNewModule balanced-match@1.0.0 checking installable status\n298 http fetch GET 304 https://registry.npmjs.org/core-util-is 1008ms (from cache)\n299 http fetch GET 304 https://registry.npmjs.org/safe-buffer 1010ms (from cache)\n300 silly pacote range manifest for safe-buffer@~5.1.0 fetched in 1020ms\n301 silly resolveWithNewModule safe-buffer@5.1.0 checking installable status\n302 silly pacote range manifest for core-util-is@~1.0.0 fetched in 1022ms\n303 silly resolveWithNewModule core-util-is@1.0.2 checking installable status\n304 http fetch GET 304 https://registry.npmjs.org/util-deprecate 1035ms (from cache)\n305 silly pacote range manifest for util-deprecate@~1.0.1 fetched in 1040ms\n306 silly resolveWithNewModule util-deprecate@1.0.2 checking installable status\n307 http fetch GET 304 https://registry.npmjs.org/string_decoder 1268ms (from cache)\n308 silly pacote range manifest for string_decoder@~1.0.0 fetched in 1279ms\n309 silly resolveWithNewModule string_decoder@1.0.2 checking installable status\n310 http fetch GET 304 https://registry.npmjs.org/process-nextick-args 1288ms (from cache)\n311 silly pacote range manifest for process-nextick-args@~1.0.6 fetched in 1290ms\n312 silly resolveWithNewModule process-nextick-args@1.0.7 checking installable status\n313 silly pacote range manifest for safe-buffer@~5.0.1 fetched in 27ms\n314 silly resolveWithNewModule safe-buffer@5.0.1 checking installable status\n315 http fetch GET 304 https://registry.npmjs.org/rimraf 1529ms (from cache)\n316 silly pacote range manifest for rimraf@~2.4.3 fetched in 1550ms\n317 silly resolveWithNewModule rimraf@2.4.5 checking installable status\n318 http fetch GET 200 https://registry.npmjs.org/minimist 880ms\n319 silly pacote version manifest for minimist@0.0.8 fetched in 905ms\n320 silly resolveWithNewModule minimist@0.0.8 checking installable status\n321 http fetch GET 304 https://registry.npmjs.org/glob 921ms (from cache)\n322 silly pacote range manifest for glob@^6.0.1 fetched in 933ms\n323 silly resolveWithNewModule glob@6.0.4 checking installable status\n324 http fetch GET 304 https://registry.npmjs.org/once 961ms (from cache)\n325 silly pacote range manifest for once@^1.3.0 fetched in 964ms\n326 silly resolveWithNewModule once@1.4.0 checking installable status\n327 http fetch GET 304 https://registry.npmjs.org/inflight 982ms (from cache)\n328 silly pacote range manifest for inflight@^1.0.4 fetched in 988ms\n329 silly resolveWithNewModule inflight@1.0.6 checking installable status\n330 http fetch GET 304 https://registry.npmjs.org/wrappy 995ms (from cache)\n331 silly pacote range manifest for wrappy@1 fetched in 1097ms\n332 silly resolveWithNewModule wrappy@1.0.2 checking installable status\n333 http fetch GET 200 https://registry.npmjs.org/globby 929ms\n334 http fetch GET 200 https://registry.npmjs.org/is-path-in-cwd 930ms\n335 http fetch GET 200 https://registry.npmjs.org/is-path-cwd 943ms\n336 silly pacote range manifest for globby@^5.0.0 fetched in 965ms\n337 silly resolveWithNewModule globby@5.0.0 checking installable status\n338 silly pacote range manifest for is-path-in-cwd@^1.0.0 fetched in 966ms\n339 silly resolveWithNewModule is-path-in-cwd@1.0.0 checking installable status\n340 silly pacote range manifest for is-path-cwd@^1.0.0 fetched in 977ms\n341 silly resolveWithNewModule is-path-cwd@1.0.0 checking installable status\n342 http fetch GET 304 https://registry.npmjs.org/object-assign 1004ms (from cache)\n343 http fetch GET 304 https://registry.npmjs.org/pinkie-promise 1023ms (from cache)\n344 silly pacote range manifest for object-assign@^4.0.1 fetched in 1036ms\n345 silly resolveWithNewModule object-assign@4.1.1 checking installable status\n346 silly pacote range manifest for pinkie-promise@^2.0.0 fetched in 1056ms\n347 silly resolveWithNewModule pinkie-promise@2.0.1 checking installable status\n348 http fetch GET 304 https://registry.npmjs.org/pify 1214ms (from cache)\n349 silly pacote range manifest for pify@^2.0.0 fetched in 1218ms\n350 silly resolveWithNewModule pify@2.3.0 checking installable status\n351 silly pacote range manifest for glob@^7.0.3 fetched in 24ms\n352 silly resolveWithNewModule glob@7.1.2 checking installable status\n353 http fetch GET 200 https://registry.npmjs.org/array-union 981ms\n354 silly pacote range manifest for array-union@^1.0.1 fetched in 986ms\n355 silly resolveWithNewModule array-union@1.0.2 checking installable status\n356 http fetch GET 200 https://registry.npmjs.org/array-uniq 1025ms\n357 silly pacote range manifest for array-uniq@^1.0.1 fetched in 1031ms\n358 silly resolveWithNewModule array-uniq@1.0.3 checking installable status\n359 http fetch GET 304 https://registry.npmjs.org/fs.realpath 915ms (from cache)\n360 silly pacote range manifest for fs.realpath@^1.0.0 fetched in 918ms\n361 silly resolveWithNewModule fs.realpath@1.0.0 checking installable status\n362 http fetch GET 304 https://registry.npmjs.org/pinkie 3957ms (from cache)\n363 silly pacote range manifest for pinkie@^2.0.0 fetched in 3960ms\n364 silly resolveWithNewModule pinkie@2.0.4 checking installable status\n365 http fetch GET 200 https://registry.npmjs.org/is-path-inside 1048ms\n366 silly pacote range manifest for is-path-inside@^1.0.0 fetched in 1112ms\n367 silly resolveWithNewModule is-path-inside@1.0.0 checking installable status\n368 http fetch GET 200 https://registry.npmjs.org/path-is-inside 884ms\n369 silly pacote range manifest for path-is-inside@^1.0.1 fetched in 914ms\n370 silly resolveWithNewModule path-is-inside@1.0.2 checking installable status\n371 silly pacote range manifest for glob@^7.1.1 fetched in 41ms\n372 silly resolveWithNewModule glob@7.1.2 checking installable status\n373 silly pacote range manifest for fs-extra@^1.0.0 fetched in 47ms\n374 silly resolveWithNewModule fs-extra@1.0.0 checking installable status\n375 silly pacote range manifest for async@^2.1.2 fetched in 75ms\n376 silly resolveWithNewModule async@2.4.1 checking installable status\n377 http fetch GET 200 https://registry.npmjs.org/jsonschema 1001ms\n378 http fetch GET 200 https://registry.npmjs.org/ipfs 1017ms\n379 silly pacote range manifest for jsonschema@^1.1.1 fetched in 1033ms\n380 silly resolveWithNewModule jsonschema@1.1.1 checking installable status\n381 http fetch GET 200 https://registry.npmjs.org/promisify-node 1039ms\n382 silly pacote range manifest for ipfs@^0.23.1 fetched in 1051ms\n383 silly resolveWithNewModule ipfs@0.23.1 checking installable status\n384 http fetch GET 200 https://registry.npmjs.org/wget-improved 1050ms\n385 silly pacote range manifest for promisify-node@^0.4.0 fetched in 1054ms\n386 silly resolveWithNewModule promisify-node@0.4.0 checking installable status\n387 silly pacote range manifest for wget-improved@^1.4.0 fetched in 1066ms\n388 silly resolveWithNewModule wget-improved@1.5.0 checking installable status\n389 http fetch GET 304 https://registry.npmjs.org/semver 1069ms (from cache)\n390 http fetch GET 200 https://registry.npmjs.org/ethpm-spec 1091ms\n391 silly pacote range manifest for ethpm-spec@^1.0.1 fetched in 1098ms\n392 silly resolveWithNewModule ethpm-spec@1.0.1 checking installable status\n393 silly pacote range manifest for semver@^5.3.0 fetched in 1106ms\n394 silly resolveWithNewModule semver@5.3.0 checking installable status\n395 http fetch GET 200 https://registry.npmjs.org/ipfs-api 1478ms\n396 silly pacote range manifest for ipfs-api@^14.0.1 fetched in 1539ms\n397 silly resolveWithNewModule ipfs-api@14.0.3 checking installable status\n398 http fetch GET 200 https://registry.npmjs.org/json-schema-to-markdown 1083ms\n399 silly pacote range manifest for json-schema-to-markdown@^1.0.3 fetched in 1157ms\n400 silly resolveWithNewModule json-schema-to-markdown@1.0.3 checking installable status\n401 http fetch GET 304 https://registry.npmjs.org/jsonfile 889ms (from cache)\n402 silly pacote range manifest for jsonfile@^2.1.0 fetched in 897ms\n403 silly resolveWithNewModule jsonfile@2.4.0 checking installable status\n404 http fetch GET 304 https://registry.npmjs.org/klaw 961ms (from cache)\n405 silly pacote range manifest for klaw@^1.0.0 fetched in 964ms\n406 silly resolveWithNewModule klaw@1.3.1 checking installable status\n407 silly pacote range manifest for async@^2.2.0 fetched in 21ms\n408 silly resolveWithNewModule async@2.4.1 checking installable status\n409 silly pacote range manifest for glob@^7.1.1 fetched in 21ms\n410 silly resolveWithNewModule glob@7.1.2 checking installable status\n411 silly pacote range manifest for ipfs-api@^13.0.0 fetched in 20ms\n412 silly resolveWithNewModule ipfs-api@13.0.0 checking installable status\n413 http fetch GET 200 https://registry.npmjs.org/cids 1307ms\n414 silly pacote range manifest for cids@^0.4.2 fetched in 1343ms\n415 silly resolveWithNewModule cids@0.4.2 checking installable status\n416 http fetch GET 200 https://registry.npmjs.org/hapi 1386ms\n417 silly pacote range manifest for hapi@^16.1.0 fetched in 1396ms\n418 silly resolveWithNewModule hapi@16.4.3 checking installable status\n419 http fetch GET 304 https://registry.npmjs.org/boom 1724ms (from cache)\n420 silly pacote range manifest for boom@^4.3.0 fetched in 1735ms\n421 silly resolveWithNewModule boom@4.3.1 checking installable status\n422 http fetch GET 200 https://registry.npmjs.org/ipfs-block-service 998ms\n423 silly pacote range manifest for ipfs-block-service@~0.9.0 fetched in 1006ms\n424 silly resolveWithNewModule ipfs-block-service@0.9.1 checking installable status\n425 http fetch GET 200 https://registry.npmjs.org/ipfs-multipart 1067ms\n426 silly pacote range manifest for ipfs-multipart@~0.1.0 fetched in 1074ms\n427 silly resolveWithNewModule ipfs-multipart@0.1.0 checking installable status\n428 http fetch GET 200 https://registry.npmjs.org/ipfs-repo 998ms\n429 silly pacote range manifest for ipfs-repo@~0.13.0 fetched in 1007ms\n430 silly resolveWithNewModule ipfs-repo@0.13.1 checking installable status\n431 http fetch GET 200 https://registry.npmjs.org/ipfs-unixfs 910ms\n432 silly pacote range manifest for ipfs-unixfs@~0.1.11 fetched in 915ms\n433 silly resolveWithNewModule ipfs-unixfs@0.1.12 checking installable status\n434 http fetch GET 200 https://registry.npmjs.org/ipfs-unixfs-engine 977ms\n435 silly pacote range manifest for ipfs-unixfs-engine@~0.19.0 fetched in 990ms\n436 silly resolveWithNewModule ipfs-unixfs-engine@0.19.2 checking installable status\n437 http fetch GET 304 https://registry.npmjs.org/bl 3651ms (from cache)\n438 silly pacote range manifest for bl@^1.2.0 fetched in 3673ms\n439 silly resolveWithNewModule bl@1.2.1 checking installable status\n440 http fetch GET 200 https://registry.npmjs.org/ipld-resolver 1004ms\n441 silly pacote range manifest for ipld-resolver@~0.11.0 fetched in 1020ms\n442 silly resolveWithNewModule ipld-resolver@0.11.1 checking installable status\n443 http fetch GET 304 https://registry.npmjs.org/debug 3773ms (from cache)\n444 silly pacote range manifest for debug@^2.6.3 fetched in 3799ms\n445 silly resolveWithNewModule debug@2.6.8 checking installable status\n446 http fetch GET 200 https://registry.npmjs.org/ipfs-block 3886ms\n447 silly pacote range manifest for ipfs-block@~0.6.0 fetched in 3893ms\n448 silly resolveWithNewModule ipfs-block@0.6.0 checking installable status\n449 http fetch GET 200 https://registry.npmjs.org/hapi-set-header 3968ms\n450 silly pacote range manifest for hapi-set-header@^1.0.2 fetched in 3973ms\n451 silly resolveWithNewModule hapi-set-header@1.0.2 checking installable status\n452 http fetch GET 200 https://registry.npmjs.org/fsm-event 4017ms\n453 silly pacote range manifest for fsm-event@^2.1.0 fetched in 4026ms\n454 silly resolveWithNewModule fsm-event@2.1.0 checking installable status\n455 http fetch GET 200 https://registry.npmjs.org/ipfs-bitswap 4024ms\n456 http fetch GET 304 https://registry.npmjs.org/hoek 4057ms (from cache)\n457 silly pacote range manifest for ipfs-bitswap@~0.10.0 fetched in 4042ms\n458 silly resolveWithNewModule ipfs-bitswap@0.10.0 checking installable status\n459 silly pacote range manifest for hoek@^4.1.0 fetched in 4091ms\n460 silly resolveWithNewModule hoek@4.1.1 checking installable status\n461 http fetch GET 304 https://registry.npmjs.org/isstream 977ms (from cache)\n462 silly pacote range manifest for isstream@^0.1.2 fetched in 989ms\n463 silly resolveWithNewModule isstream@0.1.2 checking installable status\n464 http fetch GET 200 https://registry.npmjs.org/joi 989ms\n465 silly pacote range manifest for joi@^10.3.1 fetched in 1004ms\n466 silly resolveWithNewModule joi@10.6.0 checking installable status\n467 http fetch GET 200 https://registry.npmjs.org/libp2p-ipfs-browser 899ms\n468 http fetch GET 200 https://registry.npmjs.org/libp2p-floodsub 992ms\n469 silly pacote range manifest for libp2p-floodsub@~0.7.5 fetched in 1004ms\n470 silly resolveWithNewModule libp2p-floodsub@0.7.5 checking installable status\n471 silly pacote range manifest for libp2p-ipfs-browser@~0.20.1 fetched in 914ms\n472 silly resolveWithNewModule libp2p-ipfs-browser@0.20.1 checking installable status\n473 http fetch GET 200 https://registry.npmjs.org/lodash.get 1011ms\n474 http fetch GET 200 https://registry.npmjs.org/lodash.flatmap 1048ms\n475 silly pacote range manifest for lodash.get@^4.4.2 fetched in 1020ms\n476 silly resolveWithNewModule lodash.get@4.4.2 checking installable status\n477 silly pacote range manifest for lodash.flatmap@^4.5.0 fetched in 1058ms\n478 silly resolveWithNewModule lodash.flatmap@4.5.0 checking installable status\n479 http fetch GET 200 https://registry.npmjs.org/lodash.set 967ms\n480 silly pacote range manifest for lodash.set@^4.3.2 fetched in 972ms\n481 silly resolveWithNewModule lodash.set@4.3.2 checking installable status\n482 http fetch GET 200 https://registry.npmjs.org/lodash.sortby 967ms\n483 silly pacote range manifest for lodash.sortby@^4.7.0 fetched in 971ms\n484 silly resolveWithNewModule lodash.sortby@4.7.0 checking installable status\n485 http fetch GET 200 https://registry.npmjs.org/lodash.has 1177ms\n486 silly pacote range manifest for lodash.has@^4.5.2 fetched in 1186ms\n487 silly resolveWithNewModule lodash.has@4.5.2 checking installable status\n488 http fetch GET 200 https://registry.npmjs.org/lodash.values 1022ms\n489 silly pacote range manifest for lodash.values@^4.3.0 fetched in 1028ms\n490 silly resolveWithNewModule lodash.values@4.3.0 checking installable status\n491 http fetch GET 200 https://registry.npmjs.org/mafmt 893ms\n492 silly pacote range manifest for mafmt@^2.1.7 fetched in 898ms\n493 silly resolveWithNewModule mafmt@2.1.8 checking installable status\n494 http fetch GET 200 https://registry.npmjs.org/libp2p-ipfs-nodejs 1679ms\n495 silly pacote range manifest for libp2p-ipfs-nodejs@~0.20.1 fetched in 1688ms\n496 silly resolveWithNewModule libp2p-ipfs-nodejs@0.20.1 checking installable status\n497 http fetch GET 200 https://registry.npmjs.org/multiaddr 936ms\n498 silly pacote range manifest for multiaddr@^2.2.3 fetched in 941ms\n499 silly resolveWithNewModule multiaddr@2.3.0 checking installable status\n500 http fetch GET 200 https://registry.npmjs.org/multihashes 966ms\n501 silly pacote range manifest for multihashes@~0.4.5 fetched in 971ms\n502 silly resolveWithNewModule multihashes@0.4.5 checking installable status\n503 http fetch GET 200 https://registry.npmjs.org/peer-id 861ms\n504 silly pacote range manifest for peer-id@~0.8.4 fetched in 866ms\n505 silly resolveWithNewModule peer-id@0.8.7 checking installable status\n506 http fetch GET 200 https://registry.npmjs.org/peer-info 888ms\n507 silly pacote range manifest for peer-info@~0.8.4 fetched in 898ms\n508 silly resolveWithNewModule peer-info@0.8.5 checking installable status\n509 http fetch GET 200 https://registry.npmjs.org/peer-book 970ms\n510 silly pacote range manifest for peer-book@~0.3.1 fetched in 975ms\n511 silly resolveWithNewModule peer-book@0.3.2 checking installable status\n512 http fetch GET 304 https://registry.npmjs.org/path-exists 1036ms (from cache)\n513 silly pacote range manifest for path-exists@^3.0.0 fetched in 1041ms\n514 silly resolveWithNewModule path-exists@3.0.0 checking installable status\n515 silly pacote version manifest for readable-stream@1.1.14 fetched in 5ms\n516 silly resolveWithNewModule readable-stream@1.1.14 checking installable status\n517 http fetch GET 200 https://registry.npmjs.org/promisify-es6 915ms\n518 silly pacote range manifest for promisify-es6@^1.0.2 fetched in 922ms\n519 silly resolveWithNewModule promisify-es6@1.0.2 checking installable status\n520 http fetch GET 200 https://registry.npmjs.org/pull-file 934ms\n521 silly pacote range manifest for pull-file@^1.0.0 fetched in 942ms\n522 silly resolveWithNewModule pull-file@1.0.0 checking installable status\n523 http fetch GET 200 https://registry.npmjs.org/pull-paramap 954ms\n524 silly pacote range manifest for pull-paramap@^1.2.1 fetched in 960ms\n525 silly resolveWithNewModule pull-paramap@1.2.2 checking installable status\n526 http fetch GET 200 https://registry.npmjs.org/pull-pushable 929ms\n527 silly pacote range manifest for pull-pushable@^2.0.1 fetched in 937ms\n528 silly resolveWithNewModule pull-pushable@2.1.1 checking installable status\n529 silly pacote version manifest for yargs@7.0.2 fetched in 5ms\n530 silly resolveWithNewModule yargs@7.0.2 checking installable status\n531 http fetch GET 200 https://registry.npmjs.org/pull-stream 949ms\n532 silly pacote range manifest for pull-stream@^3.5.0 fetched in 957ms\n533 silly resolveWithNewModule pull-stream@3.6.0 checking installable status\n534 http fetch GET 200 https://registry.npmjs.org/pull-stream-to-stream 889ms\n535 silly pacote range manifest for pull-stream-to-stream@^1.3.4 fetched in 894ms\n536 silly resolveWithNewModule pull-stream-to-stream@1.3.4 checking installable status\n537 http fetch GET 200 https://registry.npmjs.org/pull-sort 1285ms\n538 silly pacote range manifest for pull-sort@^1.0.0 fetched in 1291ms\n539 silly resolveWithNewModule pull-sort@1.0.0 checking installable status\n540 http fetch GET 200 https://registry.npmjs.org/pull-zip 965ms\n541 silly pacote range manifest for pull-zip@^2.0.1 fetched in 970ms\n542 silly resolveWithNewModule pull-zip@2.0.1 checking installable status\n543 http fetch GET 304 https://registry.npmjs.org/read-pkg-up 1051ms (from cache)\n544 silly pacote range manifest for read-pkg-up@^2.0.0 fetched in 1056ms\n545 silly resolveWithNewModule read-pkg-up@2.0.0 checking installable status\n546 http fetch GET 200 https://registry.npmjs.org/stream-to-pull-stream 992ms\n547 silly pacote range manifest for stream-to-pull-stream@^1.7.2 fetched in 998ms\n548 silly resolveWithNewModule stream-to-pull-stream@1.7.2 checking installable status\n549 http fetch GET 304 https://registry.npmjs.org/tar-stream 956ms (from cache)\n550 silly pacote range manifest for tar-stream@^1.5.2 fetched in 960ms\n551 silly resolveWithNewModule tar-stream@1.5.4 checking installable status\n552 http fetch GET 200 https://registry.npmjs.org/update-notifier 935ms\n553 http fetch GET 304 https://registry.npmjs.org/through2 1038ms (from cache)\n554 silly pacote range manifest for update-notifier@^2.1.0 fetched in 947ms\n555 silly resolveWithNewModule update-notifier@2.2.0 checking installable status\n556 silly pacote range manifest for through2@^2.0.3 fetched in 1048ms\n557 silly resolveWithNewModule through2@2.0.3 checking installable status\n558 http fetch GET 200 https://registry.npmjs.org/multibase 863ms\n559 silly pacote range manifest for multibase@~0.3.4 fetched in 869ms\n560 silly resolveWithNewModule multibase@0.3.4 checking installable status\n561 http fetch GET 200 https://registry.npmjs.org/multicodec 990ms\n562 silly pacote range manifest for multicodec@~0.1.7 fetched in 999ms\n563 silly resolveWithNewModule multicodec@0.1.7 checking installable status\n564 http fetch GET 304 https://registry.npmjs.org/base-x 1047ms (from cache)\n565 silly pacote version manifest for base-x@3.0.0 fetched in 1054ms\n566 silly resolveWithNewModule base-x@3.0.0 checking installable status\n567 http fetch GET 200 https://registry.npmjs.org/varint 1059ms\n568 silly pacote range manifest for varint@^5.0.0 fetched in 1066ms\n569 silly resolveWithNewModule varint@5.0.0 checking installable status\n570 http fetch GET 304 https://registry.npmjs.org/bs58 1294ms (from cache)\n571 silly pacote range manifest for bs58@^4.0.0 fetched in 1365ms\n572 silly resolveWithNewModule bs58@4.0.1 checking installable status\n573 silly pacote range manifest for base-x@^3.0.2 fetched in 10ms\n574 silly resolveWithNewModule base-x@3.0.2 checking installable status\n575 http fetch GET 304 https://registry.npmjs.org/ms 1818ms (from cache)\n576 silly pacote version manifest for ms@2.0.0 fetched in 2521ms\n577 silly resolveWithNewModule ms@2.0.0 checking installable status\n578 http fetch GET 200 https://registry.npmjs.org/fsm 1004ms\n579 silly pacote range manifest for fsm@^1.0.2 fetched in 1014ms\n580 silly resolveWithNewModule fsm@1.0.2 checking installable status\n581 http fetch GET 200 https://registry.npmjs.org/split 1570ms\n582 silly pacote range manifest for split@~0.3.0 fetched in 1580ms\n583 silly resolveWithNewModule split@0.3.3 checking installable status\n584 http fetch GET 200 https://registry.npmjs.org/through 967ms\n585 silly pacote range manifest for through@2 fetched in 973ms\n586 silly resolveWithNewModule through@2.3.8 checking installable status\n587 silly pacote range manifest for boom@5.x.x fetched in 11ms\n588 silly resolveWithNewModule boom@5.1.0 checking installable status\n589 http fetch GET 200 https://registry.npmjs.org/iron 918ms\n590 silly pacote range manifest for iron@4.x.x fetched in 923ms\n591 silly resolveWithNewModule iron@4.0.5 checking installable status\n592 http fetch GET 200 https://registry.npmjs.org/items 928ms\n593 http fetch GET 200 https://registry.npmjs.org/heavy 929ms\n594 http fetch GET 200 https://registry.npmjs.org/catbox-memory 930ms\n595 silly pacote range manifest for heavy@4.x.x fetched in 936ms\n596 silly resolveWithNewModule heavy@4.0.4 checking installable status\n597 silly pacote range manifest for catbox-memory@2.x.x fetched in 938ms\n598 silly resolveWithNewModule catbox-memory@2.0.4 checking installable status\n599 silly pacote range manifest for items@2.x.x fetched in 938ms\n600 silly resolveWithNewModule items@2.1.1 checking installable status\n601 http fetch GET 200 https://registry.npmjs.org/catbox 956ms\n602 http fetch GET 200 https://registry.npmjs.org/call 971ms\n603 silly pacote range manifest for catbox@7.x.x fetched in 982ms\n604 silly resolveWithNewModule catbox@7.1.4 checking installable status\n605 silly pacote range manifest for call@4.x.x fetched in 1010ms\n606 silly resolveWithNewModule call@4.0.2 checking installable status\n607 http fetch GET 200 https://registry.npmjs.org/mimos 1041ms\n608 silly pacote range manifest for mimos@3.x.x fetched in 1045ms\n609 silly resolveWithNewModule mimos@3.0.3 checking installable status\n610 http fetch GET 200 https://registry.npmjs.org/accept 1134ms\n611 silly pacote range manifest for accept@2.x.x fetched in 1139ms\n612 silly resolveWithNewModule accept@2.1.4 checking installable status\n613 http fetch GET 200 https://registry.npmjs.org/ammo 1199ms\n614 silly pacote range manifest for ammo@2.x.x fetched in 1205ms\n615 silly resolveWithNewModule ammo@2.0.4 checking installable status\n616 http fetch GET 304 https://registry.npmjs.org/cryptiles 1360ms (from cache)\n617 silly pacote range manifest for cryptiles@3.x.x fetched in 1364ms\n618 silly resolveWithNewModule cryptiles@3.1.2 checking installable status\n619 http fetch GET 200 https://registry.npmjs.org/statehood 839ms\n620 silly pacote range manifest for statehood@5.x.x fetched in 844ms\n621 silly resolveWithNewModule statehood@5.0.2 checking installable status\n622 http fetch GET 200 https://registry.npmjs.org/shot 859ms\n623 silly pacote range manifest for shot@3.x.x fetched in 865ms\n624 silly resolveWithNewModule shot@3.4.2 checking installable status\n625 http fetch GET 200 https://registry.npmjs.org/topo 821ms\n626 silly pacote range manifest for topo@2.x.x fetched in 854ms\n627 silly resolveWithNewModule topo@2.0.2 checking installable status\n628 http fetch GET 200 https://registry.npmjs.org/podium 942ms\n629 silly pacote range manifest for podium@1.x.x fetched in 947ms\n630 silly resolveWithNewModule podium@1.2.5 checking installable status\n631 http fetch GET 200 https://registry.npmjs.org/subtext 955ms\n632 silly pacote range manifest for subtext@4.x.x fetched in 960ms\n633 silly resolveWithNewModule subtext@4.4.1 checking installable status\n634 silly pacote range manifest for boom@5.x.x fetched in 3ms\n635 silly resolveWithNewModule boom@5.1.0 checking installable status\n636 silly pacote range manifest for boom@5.x.x fetched in 1ms\n637 silly resolveWithNewModule boom@5.1.0 checking installable status\n638 silly pacote range manifest for boom@5.x.x fetched in 1ms\n639 silly resolveWithNewModule boom@5.1.0 checking installable status\n640 silly pacote range manifest for boom@5.x.x fetched in 1ms\n641 silly resolveWithNewModule boom@5.1.0 checking installable status\n642 http fetch GET 200 https://registry.npmjs.org/isemail 987ms\n643 silly pacote range manifest for isemail@2.x.x fetched in 993ms\n644 silly resolveWithNewModule isemail@2.2.1 checking installable status\n645 silly pacote range manifest for boom@5.x.x fetched in 2ms\n646 silly resolveWithNewModule boom@5.1.0 checking installable status\n647 silly pacote range manifest for boom@5.x.x fetched in 3ms\n648 silly resolveWithNewModule boom@5.1.0 checking installable status\n649 silly pacote range manifest for boom@5.x.x fetched in 2ms\n650 silly resolveWithNewModule boom@5.1.0 checking installable status\n651 http fetch GET 304 https://registry.npmjs.org/mime-db 818ms (from cache)\n652 silly pacote range manifest for mime-db@1.x.x fetched in 822ms\n653 silly resolveWithNewModule mime-db@1.28.0 checking installable status\n654 silly pacote range manifest for boom@5.x.x fetched in 1ms\n655 silly resolveWithNewModule boom@5.1.0 checking installable status\n656 silly pacote range manifest for boom@5.x.x fetched in 4ms\n657 silly resolveWithNewModule boom@5.1.0 checking installable status\n658 http fetch GET 200 https://registry.npmjs.org/wreck 1091ms\n659 silly pacote range manifest for wreck@12.x.x fetched in 1096ms\n660 silly resolveWithNewModule wreck@12.2.2 checking installable status\n661 http fetch GET 200 https://registry.npmjs.org/pez 1124ms\n662 silly pacote range manifest for pez@2.x.x fetched in 1128ms\n663 silly resolveWithNewModule pez@2.1.5 checking installable status\n664 http fetch GET 200 https://registry.npmjs.org/content 1313ms\n665 silly pacote range manifest for content@3.x.x fetched in 1325ms\n666 silly resolveWithNewModule content@3.0.4 checking installable status\n667 silly pacote range manifest for boom@5.x.x fetched in 3ms\n668 silly resolveWithNewModule boom@5.1.0 checking installable status\n669 silly pacote range manifest for boom@5.x.x fetched in 5ms\n670 silly resolveWithNewModule boom@5.1.0 checking installable status\n671 http fetch GET 200 https://registry.npmjs.org/b64 767ms\n672 silly pacote range manifest for b64@3.x.x fetched in 780ms\n673 silly resolveWithNewModule b64@3.0.2 checking installable status\n674 http fetch GET 200 https://registry.npmjs.org/nigel 826ms\n675 silly pacote range manifest for nigel@2.x.x fetched in 836ms\n676 silly resolveWithNewModule nigel@2.0.2 checking installable status\n677 http fetch GET 200 https://registry.npmjs.org/vise 918ms\n678 silly pacote range manifest for vise@2.x.x fetched in 930ms\n679 silly resolveWithNewModule vise@2.0.2 checking installable status\n680 silly pacote range manifest for boom@5.x.x fetched in 2ms\n681 silly resolveWithNewModule boom@5.1.0 checking installable status\n682 http fetch GET 200 https://registry.npmjs.org/multipart-stream 826ms\n683 http fetch GET 200 https://registry.npmjs.org/ndjson 830ms\n684 http fetch GET 200 https://registry.npmjs.org/is-ipfs 833ms\n685 silly pacote range manifest for multipart-stream@^2.0.1 fetched in 836ms\n686 silly resolveWithNewModule multipart-stream@2.0.1 checking installable status\n687 silly pacote range manifest for is-ipfs@~0.3.0 fetched in 841ms\n688 silly resolveWithNewModule is-ipfs@0.3.0 checking installable status\n689 silly pacote range manifest for ndjson@^1.5.0 fetched in 842ms\n690 silly resolveWithNewModule ndjson@1.5.0 checking installable status\n691 http fetch GET 200 https://registry.npmjs.org/flatmap 866ms\n692 silly pacote version manifest for flatmap@0.0.3 fetched in 869ms\n693 silly resolveWithNewModule flatmap@0.0.3 checking installable status\n694 http fetch GET 304 https://registry.npmjs.org/pump 918ms (from cache)\n695 silly pacote range manifest for pump@^1.0.2 fetched in 936ms\n696 silly resolveWithNewModule pump@1.0.2 checking installable status\n697 http fetch GET 200 https://registry.npmjs.org/lru-cache 939ms\n698 http fetch GET 200 https://registry.npmjs.org/ipld-dag-pb 944ms\n699 silly pacote range manifest for lru-cache@^4.0.2 fetched in 948ms\n700 silly resolveWithNewModule lru-cache@4.1.1 checking installable status\n701 silly pacote range manifest for ipld-dag-pb@~0.11.0 fetched in 953ms\n702 silly resolveWithNewModule ipld-dag-pb@0.11.0 checking installable status\n703 http fetch GET 200 https://registry.npmjs.org/glob-escape 972ms\n704 silly pacote version manifest for glob-escape@0.0.2 fetched in 977ms\n705 silly resolveWithNewModule glob-escape@0.0.2 checking installable status\n706 http fetch GET 200 https://registry.npmjs.org/detect-node 1259ms\n707 silly pacote range manifest for detect-node@^2.0.3 fetched in 1272ms\n708 silly resolveWithNewModule detect-node@2.0.3 checking installable status\n709 http fetch GET 200 https://registry.npmjs.org/stream-http 915ms\n710 silly pacote range manifest for stream-http@^2.6.3 fetched in 927ms\n711 silly resolveWithNewModule stream-http@2.7.2 checking installable status\n712 http fetch GET 304 https://registry.npmjs.org/qs 1008ms (from cache)\n713 silly pacote range manifest for qs@^6.4.0 fetched in 1031ms\n714 silly resolveWithNewModule qs@6.4.0 checking installable status\n715 http fetch GET 200 https://registry.npmjs.org/streamifier 1284ms\n716 silly pacote range manifest for streamifier@^0.1.1 fetched in 1289ms\n717 silly resolveWithNewModule streamifier@0.1.1 checking installable status\n718 http fetch GET 200 https://registry.npmjs.org/concat-stream 31702ms attempt #2\n719 silly pacote range manifest for concat-stream@^1.6.0 fetched in 31757ms\n720 silly resolveWithNewModule concat-stream@1.6.0 checking installable status\n721 http fetch GET 200 https://registry.npmjs.org/typedarray 899ms\n722 silly pacote range manifest for typedarray@^0.0.6 fetched in 909ms\n723 silly resolveWithNewModule typedarray@0.0.6 checking installable status\n724 http fetch GET 200 https://registry.npmjs.org/protocol-buffers 829ms\n725 silly pacote range manifest for protocol-buffers@^3.2.1 fetched in 844ms\n726 silly resolveWithNewModule protocol-buffers@3.2.1 checking installable status\n727 http fetch GET 200 https://registry.npmjs.org/generate-object-property 792ms\n728 http fetch GET 200 https://registry.npmjs.org/generate-function 812ms\n729 http fetch GET 200 https://registry.npmjs.org/brfs 817ms\n730 silly pacote range manifest for generate-object-property@^1.2.0 fetched in 820ms\n731 silly resolveWithNewModule generate-object-property@1.2.0 checking installable status\n732 silly pacote range manifest for generate-function@^2.0.0 fetched in 822ms\n733 silly resolveWithNewModule generate-function@2.0.0 checking installable status\n734 http fetch GET 200 https://registry.npmjs.org/protocol-buffers-schema 823ms\n735 silly pacote range manifest for brfs@^1.4.0 fetched in 826ms\n736 silly resolveWithNewModule brfs@1.4.3 checking installable status\n737 silly pacote range manifest for protocol-buffers-schema@^3.1.1 fetched in 829ms\n738 silly resolveWithNewModule protocol-buffers-schema@3.3.1 checking installable status\n739 http fetch GET 200 https://registry.npmjs.org/signed-varint 838ms\n740 silly pacote range manifest for signed-varint@^2.0.0 fetched in 842ms\n741 silly resolveWithNewModule signed-varint@2.0.1 checking installable status\n742 http fetch GET 200 https://registry.npmjs.org/static-module 810ms\n743 http fetch GET 200 https://registry.npmjs.org/quote-stream 812ms\n744 http fetch GET 200 https://registry.npmjs.org/resolve 814ms\n745 silly pacote range manifest for static-module@^1.1.0 fetched in 824ms\n746 silly resolveWithNewModule static-module@1.3.2 checking installable status\n747 silly pacote range manifest for quote-stream@^1.0.1 fetched in 827ms\n748 silly resolveWithNewModule quote-stream@1.0.2 checking installable status\n749 silly pacote range manifest for resolve@^1.1.5 fetched in 827ms\n750 silly resolveWithNewModule resolve@1.3.3 checking installable status\n751 silly pacote range manifest for minimist@^1.1.3 fetched in 12ms\n752 silly resolveWithNewModule minimist@1.2.0 checking installable status\n753 http fetch GET 200 https://registry.npmjs.org/buffer-equal 1125ms\n754 silly pacote version manifest for buffer-equal@0.0.1 fetched in 1134ms\n755 silly resolveWithNewModule buffer-equal@0.0.1 checking installable status\n756 http fetch GET 304 https://registry.npmjs.org/xtend 1802ms (from cache)\n757 silly pacote range manifest for xtend@~4.0.1 fetched in 1807ms\n758 silly resolveWithNewModule xtend@4.0.1 checking installable status\n759 http fetch GET 200 https://registry.npmjs.org/path-parse 866ms\n760 silly pacote range manifest for path-parse@^1.0.5 fetched in 878ms\n761 silly resolveWithNewModule path-parse@1.0.5 checking installable status\n762 silly pacote range manifest for through2@~0.4.1 fetched in 54ms\n763 silly resolveWithNewModule through2@0.4.2 checking installable status\n764 silly pacote range manifest for quote-stream@~0.0.0 fetched in 54ms\n765 silly resolveWithNewModule quote-stream@0.0.0 checking installable status\n766 silly pacote range manifest for readable-stream@~1.0.27-1 fetched in 66ms\n767 silly resolveWithNewModule readable-stream@1.0.34 checking installable status\n768 http fetch GET 200 https://registry.npmjs.org/escodegen 762ms\n769 http fetch GET 200 https://registry.npmjs.org/falafel 800ms\n770 silly pacote range manifest for escodegen@~1.3.2 fetched in 808ms\n771 silly resolveWithNewModule escodegen@1.3.3 checking installable status\n772 http fetch GET 200 https://registry.npmjs.org/shallow-copy 821ms\n773 silly pacote range manifest for falafel@^1.0.0 fetched in 824ms\n774 silly resolveWithNewModule falafel@1.2.0 checking installable status\n775 http fetch GET 200 https://registry.npmjs.org/object-inspect 824ms\n776 http fetch GET 200 https://registry.npmjs.org/static-eval 827ms\n777 http fetch GET 200 https://registry.npmjs.org/has 845ms\n778 http fetch GET 200 https://registry.npmjs.org/duplexer2 847ms\n779 silly pacote range manifest for shallow-copy@~0.0.1 fetched in 856ms\n780 silly resolveWithNewModule shallow-copy@0.0.1 checking installable status\n781 silly pacote range manifest for object-inspect@~0.4.0 fetched in 859ms\n782 silly resolveWithNewModule object-inspect@0.4.0 checking installable status\n783 silly pacote range manifest for static-eval@~0.2.0 fetched in 861ms\n784 silly resolveWithNewModule static-eval@0.2.4 checking installable status\n785 silly pacote range manifest for has@^1.0.0 fetched in 879ms\n786 silly resolveWithNewModule has@1.0.1 checking installable status\n787 silly pacote range manifest for duplexer2@~0.0.2 fetched in 882ms\n788 silly resolveWithNewModule duplexer2@0.0.2 checking installable status\n789 silly pacote range manifest for readable-stream@~1.1.9 fetched in 22ms\n790 silly resolveWithNewModule readable-stream@1.1.14 checking installable status\n791 silly pacote version manifest for isarray@0.0.1 fetched in 4ms\n792 silly resolveWithNewModule isarray@0.0.1 checking installable status\n793 silly pacote range manifest for string_decoder@~0.10.x fetched in 4ms\n794 silly resolveWithNewModule string_decoder@0.10.31 checking installable status\n795 http fetch GET 200 https://registry.npmjs.org/estraverse 777ms\n796 silly pacote range manifest for estraverse@~1.5.0 fetched in 788ms\n797 silly resolveWithNewModule estraverse@1.5.1 checking installable status\n798 http fetch GET 200 https://registry.npmjs.org/esprima 815ms\n799 silly pacote range manifest for esprima@~1.1.1 fetched in 821ms\n800 silly resolveWithNewModule esprima@1.1.1 checking installable status\n801 http fetch GET 304 https://registry.npmjs.org/esutils 843ms (from cache)\n802 silly pacote range manifest for esutils@~1.0.0 fetched in 850ms\n803 silly resolveWithNewModule esutils@1.0.0 checking installable status\n804 http fetch GET 304 https://registry.npmjs.org/source-map 863ms (from cache)\n805 silly pacote range manifest for source-map@~0.1.33 fetched in 873ms\n806 silly resolveWithNewModule source-map@0.1.43 checking installable status\n807 http fetch GET 200 https://registry.npmjs.org/amdefine 1200ms\n808 silly pacote range manifest for amdefine@>=0.0.4 fetched in 1210ms\n809 silly resolveWithNewModule amdefine@1.0.1 checking installable status\n810 silly pacote version manifest for isarray@0.0.1 fetched in 3ms\n811 silly resolveWithNewModule isarray@0.0.1 checking installable status\n812 http fetch GET 200 https://registry.npmjs.org/acorn 874ms\n813 silly pacote range manifest for acorn@^1.0.3 fetched in 895ms\n814 silly resolveWithNewModule acorn@1.2.2 checking installable status\n815 http fetch GET 200 https://registry.npmjs.org/foreach 896ms\n816 silly pacote range manifest for foreach@^2.0.5 fetched in 902ms\n817 silly resolveWithNewModule foreach@2.0.5 checking installable status\n818 http fetch GET 304 https://registry.npmjs.org/object-keys 942ms (from cache)\n819 silly pacote range manifest for object-keys@^1.0.6 fetched in 953ms\n820 silly resolveWithNewModule object-keys@1.0.11 checking installable status\n821 http fetch GET 200 https://registry.npmjs.org/function-bind 831ms\n822 silly pacote range manifest for function-bind@^1.0.2 fetched in 841ms\n823 silly resolveWithNewModule function-bind@1.1.0 checking installable status\n824 silly pacote range manifest for xtend@~2.1.1 fetched in 28ms\n825 silly resolveWithNewModule xtend@2.1.2 checking installable status\n826 silly pacote version manifest for isarray@0.0.1 fetched in 2ms\n827 silly resolveWithNewModule isarray@0.0.1 checking installable status\n828 silly pacote range manifest for string_decoder@~0.10.x fetched in 5ms\n829 silly resolveWithNewModule string_decoder@0.10.31 checking installable status\n830 silly pacote range manifest for object-keys@~0.4.0 fetched in 18ms\n831 silly resolveWithNewModule object-keys@0.4.0 checking installable status\n832 silly pacote range manifest for escodegen@~0.0.24 fetched in 7ms\n833 silly resolveWithNewModule escodegen@0.0.28 checking installable status\n834 silly pacote range manifest for estraverse@~1.3.0 fetched in 9ms\n835 silly resolveWithNewModule estraverse@1.3.2 checking installable status\n836 silly pacote range manifest for esprima@~1.0.2 fetched in 9ms\n837 silly resolveWithNewModule esprima@1.0.4 checking installable status\n838 http fetch GET 200 https://registry.npmjs.org/is-property 836ms\n839 silly pacote range manifest for is-property@^1.0.0 fetched in 847ms\n840 silly resolveWithNewModule is-property@1.0.2 checking installable status\n841 silly pacote range manifest for async@^2.1.5 fetched in 8ms\n842 silly resolveWithNewModule async@2.4.1 checking installable status\n843 http fetch GET 200 https://registry.npmjs.org/pull-traverse 837ms\n844 silly pacote range manifest for pull-traverse@^1.0.3 fetched in 847ms\n845 silly resolveWithNewModule pull-traverse@1.0.3 checking installable status\n846 http fetch GET 200 https://registry.npmjs.org/multihashing-async 898ms\n847 silly pacote range manifest for multihashing-async@~0.4.4 fetched in 903ms\n848 silly resolveWithNewModule multihashing-async@0.4.5 checking installable status\n849 http fetch GET 200 https://registry.npmjs.org/buffer-loader 916ms\n850 silly pacote version manifest for buffer-loader@0.0.1 fetched in 920ms\n851 silly resolveWithNewModule buffer-loader@0.0.1 checking installable status\n852 http fetch GET 200 https://registry.npmjs.org/stable 1082ms\n853 silly pacote range manifest for stable@^0.1.6 fetched in 1087ms\n854 silly resolveWithNewModule stable@0.1.6 checking installable status\n855 silly pacote range manifest for multihashes@^0.3.2 fetched in 12ms\n856 silly resolveWithNewModule multihashes@0.3.3 checking installable status\n857 silly pacote range manifest for async@^2.1.5 fetched in 7ms\n858 silly resolveWithNewModule async@2.4.1 checking installable status\n859 http fetch GET 200 https://registry.npmjs.org/nodeify 736ms\n860 silly pacote range manifest for nodeify@^1.0.1 fetched in 743ms\n861 silly resolveWithNewModule nodeify@1.0.1 checking installable status\n862 http fetch GET 200 https://registry.npmjs.org/murmurhash3js 814ms\n863 http fetch GET 200 https://registry.npmjs.org/blakejs 817ms\n864 silly pacote range manifest for blakejs@^1.0.1 fetched in 824ms\n865 silly resolveWithNewModule blakejs@1.1.0 checking installable status\n866 silly pacote range manifest for murmurhash3js@^3.0.1 fetched in 824ms\n867 silly resolveWithNewModule murmurhash3js@3.0.1 checking installable status\n868 http fetch GET 304 https://registry.npmjs.org/js-sha3 846ms (from cache)\n869 silly pacote range manifest for js-sha3@^0.5.7 fetched in 850ms\n870 silly resolveWithNewModule js-sha3@0.5.7 checking installable status\n871 http fetch GET 200 https://registry.npmjs.org/is-promise 1006ms\n872 http fetch GET 200 https://registry.npmjs.org/promise 1006ms\n873 silly pacote range manifest for promise@~1.3.0 fetched in 1084ms\n874 silly resolveWithNewModule promise@1.3.0 checking installable status\n875 silly pacote range manifest for is-promise@~1.0.0 fetched in 1084ms\n876 silly resolveWithNewModule is-promise@1.0.1 checking installable status\n877 http fetch GET 200 https://registry.npmjs.org/pseudomap 780ms\n878 http fetch GET 200 https://registry.npmjs.org/yallist 782ms\n879 silly pacote range manifest for pseudomap@^1.0.2 fetched in 796ms\n880 silly resolveWithNewModule pseudomap@1.0.2 checking installable status\n881 silly pacote range manifest for yallist@^2.1.2 fetched in 797ms\n882 silly resolveWithNewModule yallist@2.1.2 checking installable status\n883 http fetch GET 200 https://registry.npmjs.org/lodash.map 847ms\n884 http fetch GET 200 https://registry.npmjs.org/ip 850ms\n885 silly pacote range manifest for lodash.map@^4.6.0 fetched in 858ms\n886 silly resolveWithNewModule lodash.map@4.6.0 checking installable status\n887 silly pacote range manifest for ip@^1.1.5 fetched in 863ms\n888 silly resolveWithNewModule ip@1.1.5 checking installable status\n889 http fetch GET 200 https://registry.npmjs.org/lodash.filter 1484ms\n890 silly pacote range manifest for lodash.filter@^4.6.0 fetched in 1494ms\n891 silly resolveWithNewModule lodash.filter@4.6.0 checking installable status\n892 http fetch GET 200 https://registry.npmjs.org/is-stream 737ms\n893 http fetch GET 200 https://registry.npmjs.org/sandwich-stream 741ms\n894 silly pacote range manifest for is-stream@^1.0.1 fetched in 751ms\n895 silly resolveWithNewModule is-stream@1.1.0 checking installable status\n896 silly pacote range manifest for sandwich-stream@^1.0.0 fetched in 751ms\n897 silly resolveWithNewModule sandwich-stream@1.0.0 checking installable status\n898 silly pacote range manifest for minimist@^1.2.0 fetched in 6ms\n899 silly resolveWithNewModule minimist@1.2.0 checking installable status\n900 http fetch GET 304 https://registry.npmjs.org/json-stringify-safe 814ms (from cache)\n901 silly pacote range manifest for json-stringify-safe@^5.0.1 fetched in 821ms\n902 silly resolveWithNewModule json-stringify-safe@5.0.1 checking installable status\n903 http fetch GET 200 https://registry.npmjs.org/split2 830ms\n904 silly pacote range manifest for split2@^2.1.0 fetched in 840ms\n905 silly resolveWithNewModule split2@2.1.1 checking installable status\n906 silly pacote range manifest for async@^2.3.0 fetched in 3ms\n907 silly resolveWithNewModule async@2.4.1 checking installable status\n908 http fetch GET 200 https://registry.npmjs.org/libp2p-crypto 940ms\n909 silly pacote range manifest for libp2p-crypto@~0.8.7 fetched in 949ms\n910 silly resolveWithNewModule libp2p-crypto@0.8.8 checking installable status\n911 silly fetchPackageMetaData error for webcrypto-shim@github:dignifiedquire/webcrypto-shim#master No git binary found in $PATH\n912 silly pacote range manifest for async@^2.1.5 fetched in 113ms\n913 silly resolveWithNewModule async@2.4.1 checking installable status\n914 http fetch GET 200 https://registry.npmjs.org/libp2p-crypto-secp256k1 967ms\n915 http fetch GET 200 https://registry.npmjs.org/pem-jwk 967ms\n916 silly pacote range manifest for pem-jwk@^1.5.1 fetched in 979ms\n917 silly resolveWithNewModule pem-jwk@1.5.1 checking installable status\n918 silly pacote range manifest for libp2p-crypto-secp256k1@^0.1.4 fetched in 983ms\n919 silly resolveWithNewModule libp2p-crypto-secp256k1@0.1.4 checking installable status\n920 http fetch GET 304 https://registry.npmjs.org/browserify-aes 1001ms (from cache)\n921 silly pacote range manifest for browserify-aes@^1.0.6 fetched in 1004ms\n922 silly resolveWithNewModule browserify-aes@1.0.6 checking installable status\n923 http fetch GET 304 https://registry.npmjs.org/tweetnacl 3965ms (from cache)\n924 http fetch GET 200 https://registry.npmjs.org/asn1.js 3968ms\n925 silly pacote range manifest for tweetnacl@^1.0.0-rc.1 fetched in 3972ms\n926 silly resolveWithNewModule tweetnacl@1.0.0 checking installable status\n927 silly pacote range manifest for asn1.js@^4.9.1 fetched in 3974ms\n928 silly resolveWithNewModule asn1.js@4.9.1 checking installable status\n929 http fetch GET 200 https://registry.npmjs.org/keypair 4067ms\n930 http fetch GET 200 https://registry.npmjs.org/node-webcrypto-ossl 3982ms\n931 silly pacote range manifest for keypair@^1.0.1 fetched in 4075ms\n932 silly resolveWithNewModule keypair@1.0.1 checking installable status\n933 silly pacote range manifest for node-webcrypto-ossl@^1.0.21 fetched in 3987ms\n934 silly resolveWithNewModule node-webcrypto-ossl@1.0.26 checking installable status\n935 http fetch GET 200 https://registry.npmjs.org/rsa-pem-to-jwk 4747ms\n936 silly pacote range manifest for rsa-pem-to-jwk@^1.1.3 fetched in 4755ms\n937 silly resolveWithNewModule rsa-pem-to-jwk@1.1.3 checking installable status\n938 verbose stack Error: No git binary found in $PATH\n938 verbose stack     at checkGit (C:\\Users\\Z003TCDN.AD001\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\pacote\\lib\\util\\git.js:192:17)\n938 verbose stack     at spawnGit (C:\\Users\\Z003TCDN.AD001\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\pacote\\lib\\util\\git.js:171:10)\n938 verbose stack     at pinflight (C:\\Users\\Z003TCDN.AD001\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\pacote\\lib\\util\\git.js:108:12)\n938 verbose stack     at C:\\Users\\Z003TCDN.AD001\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\promise-inflight\\inflight.js:29:24\n938 verbose stack     at Promise._execute (C:\\Users\\Z003TCDN.AD001\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\bluebird\\js\\release\\debuggability.js:300:9)\n938 verbose stack     at Promise._resolveFromExecutor (C:\\Users\\Z003TCDN.AD001\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\bluebird\\js\\release\\promise.js:483:18)\n938 verbose stack     at new Promise (C:\\Users\\Z003TCDN.AD001\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\bluebird\\js\\release\\promise.js:79:10)\n938 verbose stack     at _inflight (C:\\Users\\Z003TCDN.AD001\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\promise-inflight\\inflight.js:28:25)\n938 verbose stack     at C:\\Users\\Z003TCDN.AD001\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\promise-inflight\\inflight.js:22:14\n938 verbose stack     at tryCatcher (C:\\Users\\Z003TCDN.AD001\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n938 verbose stack     at Promise._settlePromiseFromHandler (C:\\Users\\Z003TCDN.AD001\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\bluebird\\js\\release\\promise.js:512:31)\n938 verbose stack     at Promise._settlePromise (C:\\Users\\Z003TCDN.AD001\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\bluebird\\js\\release\\promise.js:569:18)\n938 verbose stack     at Promise._settlePromiseCtx (C:\\Users\\Z003TCDN.AD001\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\bluebird\\js\\release\\promise.js:606:10)\n938 verbose stack     at Async._drainQueue (C:\\Users\\Z003TCDN.AD001\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\bluebird\\js\\release\\async.js:138:12)\n938 verbose stack     at Async._drainQueues (C:\\Users\\Z003TCDN.AD001\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\bluebird\\js\\release\\async.js:143:10)\n938 verbose stack     at Immediate.Async.drainQueues (C:\\Users\\Z003TCDN.AD001\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\bluebird\\js\\release\\async.js:17:14)\n939 verbose cwd C:\\WINDOWS\\system32\n940 verbose Windows_NT 6.1.7601\n941 verbose argv \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Users\\Z003TCDN.AD001\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js\" \"install\" \"-g\" \"truffle\"\n942 verbose node v8.1.2\n943 verbose npm  v5.0.3\n944 error code ENOGIT\n945 error No git binary found in $PATH\n946 error Failed using git.\n946 error Please check if you have git installed and in your PATH.\n947 verbose exit [ 1, true ]\n. Yes. I have. And now the last few lines of the error are these: \n934 silly resolveWithNewModule node-webcrypto-ossl@1.0.26 checking installable status\n935 silly fetchPackageMetaData error for webcrypto-shim@github:dignifiedquire/webcrypto-shim#master exited with error code: 128\n936 verbose stack Error: exited with error code: 128\n936 verbose stack     at ChildProcess.onexit (C:\\Users\\Z003TCDN.AD001\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\mississippi\\node_modules\\end-of-stream\\index.js:39:36)\n936 verbose stack     at emitTwo (events.js:125:13)\n936 verbose stack     at ChildProcess.emit (events.js:213:7)\n936 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:197:12)\n937 verbose cwd C:\\Users\\Z003TCDN.AD001\n938 verbose Windows_NT 6.1.7601\n939 verbose argv \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Users\\Z003TCDN.AD001\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js\" \"-g\" \"install\" \"truffle\"\n940 verbose node v8.1.2\n941 verbose npm  v5.0.3\n942 error exited with error code: 128\n943 verbose exit [ 1, true ]. ",
    "izqui": "If I did understand correctly it, web3 already does have this API! \nThe equivalent of your desired .getData is .request\ntoken.transfer.request(recipient, amount).params[0].data will give you the data param that would be sent with that transaction.. Naming the event parameter in solidity solved this issue for us.\nTry replacing event Random(string) for event Random(string random). What is the status of this? We are trying to run our test suite on real nodes prior to launch and this issue is blocking us.. ",
    "AusIV": "I realize this is an old ticket to document the .request option, but when I upgraded from truffle 4.x to 5.0 contract.method.request(args) has started throwing:\nTypeError: fn(...).request is not a function\n    at execute.prepareCall.then.res (project/node_modules/truffle/build/webpack:/packages/truffle-contract/lib/execute.js:390:1)\nRunning:\nTruffle v5.0.5 (core: 5.0.5)\nSolidity - 0.5.3 (solc-js)\nNode v8.9.4. If I have a contract with a method \"getVal(uint256)\", I can call it with:\ncontract.getVal(1)\nor \ncontract.methods[\"getVal(uint256)\"](1)\nMy understanding it that the request option on these methods should give me access to the parameters of the request without actually executing it, so if I did:\nlet req = contract.getVal.request(1)\nor \nlet req = contract.methods[\"getVal(uint256)\"].request(1)\nIt should give me an object that represents the request. Then I should be able to do req.params[0].data to get the function call data.\nIn both of the above cases the .request value is a defined property, but when I call it I get \nTypeError: fn(...).request is not a function\n    at execute.prepareCall.then.res (project/node_modules/truffle/build/webpack:/packages/truffle-contract/lib/execute.js:390:1)\nNote that the error is not coming directly from my call to request, but from this line: https://github.com/trufflesuite/truffle/blob/develop/packages/truffle-contract/lib/execute.js#L390. This ~2 year old ticket was originally about documenting that feature. I hijacked it to say \"that feature isn't working anymore.\" It was working in truffle 4, but seemed to break in truffle 5.\ncontract.methods[<signature>] is still present and still a function, but internally it tries to call another object, also titled \"request\" which is not a function.. ",
    "jkcailteux": "Same problem. The webpack example is broken out of the box. . ",
    "manishlamichhane": "@jkcailteux any updates on this issue? Did you find any solution?. ",
    "ImSolitude": "+1. ",
    "travs": "I have the same problem; temporary fix is to point to it with a relative path e.g.\nrequire('../node_modules/express')\nLooking forward to the next release :smile: . The workaround for now that I am using is simply to wrap my test suite in a describe and continue as normally:\njs\ndescribe.skip(\"Fullscale test\", function(){\n  contract(\"CrowdSale\", function(accounts){\n    it(\"can sustain a large crowdsale\");\n  })\n}). @tcoulter \nIs this a duplicate of the second part of #343 ?. I have my tests working with async/await right now, but I do have difficulty using async/await syntax in my migrations scripts for some reason. \nIt seems like lines after the first await call get skipped sometimes.\nNot sure if this is just my setup, or if anyone else experience the same thing.\nUsing Node v8.1.3.. Seems like a great feature to have.\nNot sure if you're looking for syntax, but what about something like this?\njs\ndeployer.deploy(A, {as: 'GoldToken'}); // => GoldToken.json\nGoldToken = deployer.resolve(A, {from: 'GoldToken'})\ndeployer.deploy(B, GoldToken);\nCould also make a new ~~resolver~~ module\ncc: #237. ",
    "stale[bot]": "Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. There has been no new activity on this issue since it was marked as stale 7 days ago, so it is being automatically closed.  If you'd like help with this or a different problem, please open a new issue. Thanks!\n. Thank you for raising this issue! It has been automatically marked as stale because it has not had recent activity. It will be closed in 7 days if no further activity occurs. If you would like to keep this issue open, please respond with information about the current state of this problem.\n. Thanks for your response! This issue is no longer considered stale and someone from the Truffle team will try to respond as soon as they can.\n. ",
    "waglik": "@gagarin55 not sure if same issue but I had this problem because my contract was missing version pragma. I've added \n    pragma solidity ^0.4.4;\nto my contract and it solved my problem.  . ",
    "steegi": "Still open since April... Did you ever figure out how to work around this problem?. Not quite the solution I expected (i.e. using Truffle with the parity dev\nchain) but definitely interesting. Thank you.\nOn Thu, Nov 2, 2017 at 9:54 PM, GeoffreySari notifications@github.com\nwrote:\n\nYes, I have posted solution on the work-around on truffle github page.\nhttps://github.com/trufflesuite/truffle/issues/656\nOn Fri, Nov 3, 2017 at 2:44 PM, Frank Steegmans notifications@github.com\nwrote:\n\nStill open since April... Did you ever figure out how to work around this\nproblem?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/\n389#issuecomment-341621761,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/Afw0ACx7QJU2qh6ioi_\nl8fk4HNOiMWXFks5sypo8gaJpZM4Mz7-e\n.\n\n\n--\nGeoffrey Sari\nP.O Box 818, Port Moresby\nNCD, Papua New Guinea\nPhone: (+675) 71193202 <+675%207119%203202> | (+675) 76969232\n<+675%207696%209232>\nEmail: geoffsari@gmail.com | geoff.sari@gmail.com\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/389#issuecomment-341622422,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAkWpkuLGKXNMEXkv4jRKlVJS1Qpt0rVks5sypxvgaJpZM4Mz7-e\n.\n. \n",
    "toyking": "I have the same question, who knows how to create the project with app folder by truffle ?\nMy Environment\nOperating System: Ubuntu 16.04\nTruffle version: Truffle v3.2.1\nnode version:v6.10.2\nnpm version: 3.10.10. I got it.\nYou may install the Truffle with lower version, e.g. Truffle v.2.0.0 \uff1b\nIf in Ubuntu, you may use the cmd just like this : sudo npm install -g truffle@2.0.0. ",
    "dream960727": "I find the solution.\nuse \"truffle init webpack\", truffle v3.xx can create web application.. ",
    "nickgs": "Hey Gregory, \nI've experienced this error in a few situations but not with this project. I am running your same environment and was able to install truffle without any issues.  \nA few things you can look at: \n\nMake sure you have the Xcode command line tools installed. \nMake sure you have Python 2.7 in your path (above 3.0 if installed) \nIf this above doesn't help try just installing sha3 package, this may give you some more verbose error messages. \n\nJust a few thoughts... good luck! . ",
    "JMarcosSF": "@tcoulter npm install -g truffle@beta works fine for me running Mac OS Sierra v10.12.5\nNow onto dev. Thanks!. ",
    "driscollco": "$ npm install truffle-contract\n-bash: $: command not found. ",
    "saan099": "var Migrations = artifacts.require(\"./Migrations.sol\");\nmodule.exports = function(deployer) {\n  deployer.deploy(Migrations, {gas: 4500000});\n};\n. ",
    "f117f117f117677": "Hi guys\nI figure it out.  The reason is because no Ethereum client is running. we just need to run testrpc in another terminal.\nusername@workstation$ testrpc -a. ",
    "rohitgkr": "Hi @ajunge. I haven't been able to figure out how to bootstrap private for using the deployer JS object. The parameters deploy() takes are arguments for the contract constructor. Can you please provide an example call or script that can potentially address this issue? The only way I can think of is to directly use web3 API from within the deployer code. For ex -\nvar c = web3.eth.contract(contract.interface);\nc.new({\nprivateFor:\n}); \nIs there an equivalent version of the above that can be integrated/customised in Truffle migrations scripts? Thanks.. ",
    "vjrantal": "@rohitgkr It looks like if you have a file like 2_deploy_contracts.js in the migrations folder with contents like:\n```\nvar Telemetry = artifacts.require('./Telemetry.sol');\nmodule.exports = function(deployer) {\n  deployer.deploy(Telemetry, {\n    privateFor: ['ROAZBWtSacxXQrOe3FGAqJDyJjFePR5ce4TSIzmJ0Bc=']\n  });\n};\n```\nAbove seems to result in passing the privateFor property as expected when the contract is deployed.\nHere is a screenshot from Wireshark that shows what above ends up sending over the wire towards the JSON-RPC endpoint:\n\n. ",
    "wtam": "Truffle migrate stuck with Quorum only when using raft.  Is it a bug in truffle?. ",
    "shiqinfeng1": "I guess its a bug.  I got errors: \nBigNumber Error: new BigNumber() not a number: [object Object]\n      at raise (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:38210:25)\n      at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:38198:33\n      at new BigNumber (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:37226:67)\n      at new BigNumber (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:37236:25)\n      at toBigNumber (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:4152:12)\n      at Object.toTwosComplement (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:4163:21)\n      at SolidityTypeUInt.formatInputInt [as _inputFormatter] (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:22788:38)\n      at SolidityTypeUInt.SolidityType.encode (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:25369:17)\n      at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:46902:29\n      at Array.map (native). ",
    "pooleja": "Is there a workaround for this while it gets sorted?. ",
    "jbenet": "Hey everyone, some pointed me to this issue. IPFS dev here.\n\nEthPM is in flux right now. EthPM uses IPFS to store data, and IPFS inherently has no mechanism to ensure data stays on the network -- it has a concept of \"pinning\", which should keep it, but unlike SWARM there's no financial incentive and thus is prone to data loss. \n\nThis is not representing IPFS properly. IPFS does have a mechanism for ensuring data stays on the network, and you described it: pinning. Pinning relies on external-to-ipfs reasons for keeping around content. This is how the majority of all data in the world is distributed today (through ipfs, http, bittorrent, ftp, smtp, ...). And all of that distribution of data works just fine, without in-transport financial incentives. What you mean is that IPFS does not include an internal financial incentive structure, and that's right. It was separated out into a separate protocol (WIP now), Filecoin.\nCompare to other registries. There is no financial incentive to keep around most registries of software packages in the world, from apt to pypi to npm. Linux sources and binaries, all programming languages, and so many more community infrastructures run just fine without any kind of financial incentive structure in the transport. Of course, having easy ways to \"incent the network\" to store all the data, regardless of whether the network cares about the data, will be useful. Incentivized storage networks will be great. That said, you do not at all have to rely on those, nor to wait for such solutions to mature.\nPackage registries are trivially small amounts of data. even 2-5 different people offering to pin it as a community resource will be dramatically cheaper than the work required to get incentivized solutions to mature. (just measured in your dev time alone, integrating). All you need is 3-5 full copies, and a setup such that -- when people publish a package -- the ref is broadcast to every replica (eg a tool like ipfs-cluster).\nHere, I offer to replicate all your data for free. If your registry is less than 5TB (which i highly suspect it is) you can just pin everything to our storage hosts. We already replicate lots of data for other orgs. We're happy to give people access to our storage nodes. @tcoulter email me.\n\nFor some reason, the IPFS installation we used (via Infura) lost data for some packages. The only solution is to ask those packages to release new versions to EthPM so it updates the files stored on IPFS.\n\nThat's a bigger issue, and we should look into it. @tcoulter email me as i'd like to get to the bottom of that. Curious to find out why content was dropped, and where the issue lies. If it was in any of the IPFS code, we'd love to figure out the bug that caused it and fix it. We run very large archives (>TB) without any data loss, so this is quite surprising.. ",
    "mr8q9wp": "I am getting the same problem. @Jacodelange , were you able to fix it or find something else that worked for you? Thanks!. ",
    "Jacodelange": "@mr8q9wp No I wasn't able to fix this issue, I had to downgrade to previous version of Geth. I think truffle and the new Geth doesn't work together correctly. . ",
    "zhifeiji": "the same problem.. ",
    "phroiland": "So did downgrading to previous version of geth work? Or are we stuck using testrpc for now?. ",
    "aaqib90": "Any solution?. ",
    "dcnl1980": "I think it a problem of Truffle. Yesterday I compiled contracts without any problem. Today I tried to migrate and deploy and get the same errors on Testnet Ropsten. So I was thinking, okey Ropsten have a problem, so I also installed TestRPC, same result. So Truffle tell me why it's not working now!. ",
    "bingtimren": "Encountered the same problem. The only difference between (below) the first command (failed) and the second (success), is an extra space after \"=\" in the first command\ntruffle(develop)> msgHash =  web3.sha3('\\x19Ethereum Signed Message:\\n' + message.length + message);\nTypeError: Cannot read property 'match' of undefined\n    at parse (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:319624:13)\n    at Function.Parser.detailed (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:320258:10)\n    at parseArgs (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:322455:27)\n    at Object.Yargs.self.parse (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:322081:18)\n    at Command.getCommand (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:160684:24)\n    at Console.interpret (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:202605:20)\n    at ReplManager.interpret (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:203345:18)\n    at bound (domain.js:301:14)\n    at REPLServer.runBound [as eval] (domain.js:314:12)\n    at REPLServer.onLine (repl.js:468:10)\ntruffle(develop)> msgHash = web3.sha3('\\x19Ethereum Signed Message:\\n' + message.length + message);\n'0xa3cf95943562e78a694789d6ff02163344c42aa6e4495117eba9a9da6e60c866'\n. Yes it's still an issue. Below, the second command failed only because of an extra space after \"=\". Truffle version is\n$ truffle version\nTruffle v5.0.1 (core: 5.0.1)\nSolidity v0.5.0 (solc-js)\nNode v8.10.0\ntruffle(develop)> msgHash = web3.utils.sha3('\\x19Ethereum Signed Message:\\n' + message.length + message);\n'0xe28f5ff58ff3f1b24d6ba6e3b3e95e49589e8dd59b91296e76189d6ad2857b22'\ntruffle(develop)> msgHash =  web3.utils.sha3('\\x19Ethereum Signed Message:\\n' + message.length + message);\nTypeError: Cannot read property 'match' of undefined\n    at ReadStream.onData (readline.js:1011:36)\n    at emitKeys.next (<anonymous>)\n    at emitKeys (internal/readline.js:420:14)\n    at ReadStream.emit (events.js:214:7)\n    at emitTwo (events.js:126:13)\n    at ReadStream.onkeypress (readline.js:160:10)\n    at REPLServer.self._ttyWrite (repl.js:537:7)\n    at REPLServer.Interface._ttyWrite (readline.js:911:14)\n    at REPLServer.Interface._line (readline.js:631:8)\n    at REPLServer.Interface._onLine (readline.js:282:10)\n    at REPLServer.emit (events.js:211:7)\n    at emitOne (events.js:116:13)\n    at REPLServer.onLine (repl.js:468:10)\n    at REPLServer.runBound [as eval] (domain.js:314:12)\n    at bound (domain.js:301:14)\n    at ReplManager.interpret (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-core/lib/repl.js:118:1)\n    at Console.interpret (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-core/lib/console.js:138:1)\n    at Command.getCommand (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-core/lib/command.js:21:1)\n    at Object.Yargs.self.parse (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-core/~/yargs/yargs.js:532:1)\n    at Object.Yargs.self._parseArgs (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-core/~/yargs/yargs.js:938:1)\n    at Function.Parser.detailed (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-core/~/yargs-parser/index.js:761:1)\n    at parse (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-core/~/yargs-parser/index.js:125:1). Hi, I got the same issue and may find out the problem: did you have a ; at the end of command? don't do that! See below two times running the same thing, the first failed because a \";\" at the end and the second works.\ntruffle(develop)> debug 0x6ce1c4abfb24279ea38b0003bbe96fa650e3a64019d610ca747fb55cd8eca613;\nNote: This feature's in beta. Please discuss any issues you find in our Gitter channel!\nhttps://gitter.im/ConsenSys/truffle\nGathering transaction data...\nTypeError: Cannot read property 'structLogs' of undefined\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:323399:28\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:325200:9\n    at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:328229:7)\n    at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:176415:18)\n    at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:176705:12)\n    at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:176860:12)\ntruffle(develop)> debug 0x6ce1c4abfb24279ea38b0003bbe96fa650e3a64019d610ca747fb55cd8eca613\nNote: This feature's in beta. Please discuss any issues you find in our Gitter channel!\nhttps://gitter.im/ConsenSys/truffle\nGathering transaction data...\nAddresses affected:\n. ",
    "ec84b4": "I just created a new project and got the same error. @tcoulter  The same error appears when I do truffle test but no problem when running truffle compile. ",
    "KaTXi": "Same here, I was about to report the same error. Happens with old projects that were working on 3.2.1 and brand new ones created with \"truffle init\". ",
    "popra": "Thank you! Works nicely.. ",
    "kowalski": "I see the same problem on Linux. I'm using docker for development.\nHost OS: Ubuntu 14.04\nDocker version: Docker version 1.11.2, build b9f10c9\nSteps to reproduce.\n1. Run machine:\ndocker run -it node:7.7.2 bash\n\n\nUpdate stuff inside \napt-get -y update &&\\\n    apt-get -y upgrade &&\\\n    apt-get install build-essential -y\n\n\nInstall truffle\nnpm install -g truffle@3.2.2\n\n\nMake dummy project\n```\nroot@27d5ee4ec94d:/# mkdir -p /tmp/truffle\nroot@27d5ee4ec94d:/# cd /tmp/truffle\nroot@27d5ee4ec94d:/tmp/truffle# truffle init\nDownloading project...\nProject initialized.\n\n\nDocumentation: http://truffleframework.com/docs\nCommands:\nCompile: truffle compile\n  Migrate: truffle migrate\n  Test:    truffle test\n```\n\nEdit /tmp/truffle/truffle.js to point to testrpc. \napt-get install -y nano\nnano truffle.js\n(substitute `localhost` with where you have your testrpc running. For me it's 172.17.0.1)\n```\nroot@27d5ee4ec94d:/tmp/truffle# cat truffle.js \nmodule.exports = {\n  networks: {\n    development: {\n      host: \"172.17.0.1\",\n      port: 8545,\n      network_id: \"*\" // Match any network id\n    }\n  }\n};\n\n```\n\nRun tests\n```\nroot@27d5ee4ec94d:/tmp/truffle# truffle test\nCompiling ./contracts/ConvertLib.sol...\nCompiling ./contracts/MetaCoin.sol...\nCompiling ./contracts/Migrations.sol...\nCompiling ./test/TestMetacoin.sol...\nCompiling truffle/Assert.sol...\nCompiling truffle/DeployedAddresses.sol...\n\n/tmp/truffle/test/TestMetacoin.sol:3:1: : Source \"truffle/Assert.sol\" not found: File import callback not supported\nimport \"truffle/Assert.sol\";\n^--------------------------^\n,/tmp/truffle/test/TestMetacoin.sol:4:1: : Source \"truffle/DeployedAddresses.sol\" not found: File import callback not supported\nimport \"truffle/DeployedAddresses.sol\";\n^-------------------------------------^\nCompiliation failed. See above.\n```\n. I think this issue and https://github.com/trufflesuite/truffle/issues/400 are the same.. ",
    "dukei": "Problem still persists on Windows 10, Node 7.10.0, npm 4.3.0, truffle 3.2.2 (fresh npm install -g truffle after npm uninstall -g truffle).\nI get errors similar to this:\n,/ico/CrowdsaleToken.sol:3:1: : Source \"zeppelin/contracts/token/StandardToken.sol\" not found: File import callback not supported\nThe standard example generated by truffle init compiles ok though. It seems that the problem occurs when contracts import contracts from installed_contracts folder.\nReverting to truffle 3.2.1 solves the issue (but reverts solidity to 0.4.8 as well, that's sad).\n. Yes, now it works perfectly! Thank you!. Having the same issue. ",
    "pgrzesik": "I just checked and it looks like the issue is solved, thanks a lot @tcoulter !. ",
    "shribits": "I am getting the same error on windows 10 with visual studio code.\ntruffle@4.0.5\nganache-cli@6.0.3\n\n. ",
    "polyglot0027": "Same thing on MacOs Sierra 10.12.6, truffle@4.0.5, ganache-cli@6.0.3. ",
    "superlazycoder": "The contract seems to compile, and the project runs the tests, but the errors in the GUI are annoying.. ",
    "Ste91": "Still getting the same issue \"fails on import statements\" on windows 10 using truffle@4.1.6 . Still getting the same issue \"fails on import statements\" on windows 10 using truffle@4.1.6. ",
    "Toniboy1": "Same as Ste91 are you working on a fix?. ",
    "vicnaum": "Same here. Windows 10, Truffle 4.1.8:\n1) truffle init\n2) create a simple test sol with: import \"truffle/Assert.sol\";\n3) truffle.cmd compile\n4) Error: Could not find truffle/Assert.sol from any sources;\n. @cgewecke I guess I know exactly what the problem was (at least at my side).\nI had misplaced the Test .sol into the \"contracts/\" folder. When it was properly placed in \"test\" folder - everything went fine.\nGuess worth mentioning if someone else repeats my silly mistake.. Would there be an universal fix available any time soon?\nI have random Error: CONNECTION ERROR: Couldn't connect to node http://127.0.0.1:7545/ errors when I do truffle test too (have 39 tests, 3 of which fail by that reason).\nIn May everything was still okay, today - it's not :(. @cgewecke it's always different tests. Can be only one test failing, but can be at most five. Usually near three. I'm using Windows 10.\nThe sources are here: https://github.com/vicnaum/hourlyPay. ",
    "treste91": "try \"npm install truffle@3.2.1 -g\"\nfor me it worked today\nthe 3.2.2 version has some issues right now so go for the 3.2.1. ",
    "dilipkrbe": "Thanks Treste91. ",
    "frankcash": "Good call @treste91 , thanks!. ",
    "charles-cooper": "Does upgrading your node version help? https://github.com/trufflesuite/truffle/issues/413#issuecomment-305923926. I had the same issue today on Ubuntu 16.04.2. The solution for me was to upgrade to node v8.X.X.. ",
    "WorldCryptoCamp": "ran into the same issue today, the suggestion from Treste91 worked for me. ",
    "themandalore": "On Window, I used GitBash, first ran npm install --global --production windows-build-tools, then opened gitbash as an Administrator and ran the suggestion from Treste91... and voila, 6 hours since starting install, you should have a nice truffle command line. I got this error by not specifying all inheritances\n```\ncontract C{\n}\ncontract B is C{\n}\n//Now this gave me the error:\ncontract A is B{\n}\nBut this worked:\ncontract A is B,C {\n}\n```. ",
    "happyconcepts": "Per the blog post, truffle (beta) has successfully installed for me on Win7 with Python 2.7 using npm:\n$ npm install -g truffle@beta. ",
    "niuwenchen": "I just change  to\n import \"../node_modules/openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\"; \nit done.\n. ",
    "cedricwalter": "@tcoulter \nI've tried to follow the tutorial and it does not work (Intellij 2017.3). I would be happy to help on this one (Intellij) even helping writing a Karma-runner for truffle. What do you think?. ",
    "rstormsf": "Np!\nOn Tue, May 16, 2017, 13:38 Tim Coulter notifications@github.com wrote:\n\nClosed #404 https://github.com/trufflesuite/truffle/pull/404.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/pull/404#event-1084882709, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AI7Vu0S5njMXv1X7SH3Ar-9St4S7vEraks5r6gkpgaJpZM4Nahqj\n.\n. no solutions on this? . @mtbitcoin How would you verify a contract that depends on 3rd party libraries like openZeppelin ? \nBasically if I have a contract that has lots of nested inherited conracts? . Yes! Thank you so much @mtbitcoin . seems like node 7 tests fail:\n```\n  1) Scenarios Happy path (truffle unbox) will run tests:\n     Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n\n. when I move the same method into MainFile.sol (setBallotId) it complies just fine. Second issue is that events in ganache-cli does not emit if it was called bysolidity\n_to.call(abi.encodeWithSignature(\"onTokenTransfer(address,uint256,bytes)\",  msg.sender, _value, _data));\n```. Ok, perfect! thanks a lot. It was discovered during one of the security audits we have been performing with truffle suite. Thanks again to Truffle team for building amazing tools for auditors. . ",
    "mezrin": "I found a reason of this problem\nto implement my token I used this code (ERC223): https://github.com/Dexaran/ERC23-tokens/tree/Recommended\ncontract DASToken is ERC223Token, Owned {...}\nBut ERC223 describes an event Transfer with indexed field bytes indexed data. If remove indexed from parameter type - everything is OK. What is default optimization flag used by truffle 3.4.6 ?\nCould not verify my contract on Etherescan.... ",
    "assafmo": "This happens because only fixed-size types can be indexed.\ni.e. bytes and string cannot be indexed.\nhttps://ethereum.stackexchange.com/a/7170/12112. ",
    "Janaka-Steph": "Thanks to you, that's great! . ",
    "ripper234": "+1 I'm having the same issue. Seems to be relatively easy to resolve then.\n\n\nfs-ext seems to be used mostly for copySync and readFileSync. I opened an issue on fs-ext repo, not sure how easy it is to resolve, but at least as a workaround I believe (correct me if wrong) that fs-ext functionality can be manually implemented instead of adding it as a dependency.\n\n\nexecSync module seems to be unneeded, as\n\nboth iojs and node.js v0.12 have execSync function\n. So, how about we fork codecov & lock-me and make the fixes there? (And push upstream as well)\nThat should do it, no?. Installs perfectly \ud83d\ude0e \n\n\n\nAdded a PR to include the workaround in the readme. #419 . I confirm that version 3.2.2 works for me as well.. I'm happy to report that both work well on Bash on Ubuntu on Windows. Keep this bug open for now in case we want to someday enable it to work on true Windows cmd.. Tried renaming to truffle-config.js, and it didn't resolve the issue.\n(truffle compile now just doesn't do anything).. ",
    "bvrooman": "For one, it looks like the dependency, fs-ext, is currently failing on Windows builds: https://ci.appveyor.com/project/baudehlo/node-fs-ext/branch/master. It seems that it is currently impossible to use Truffle on Windows as long as this dependency is failing.\nAdditionally, anything using execSync will not succeed because it does not seem to be supported on Windows anymore: https://github.com/mgutz/execSync#readme. \nBoth these issues propagate errors during installation.. I agree with the solutions you propose - the dependencies could be replaced with the alternatives you suggest. The problem, unfortunately, seems that they are not dependencies of Truffle itself, but dependencies of dependencies. I will put together a list of Truffle dependencies that use these problematic libraries. However, short of replacing these dependencies, I don't have a good action plan to propose at the moment.. Here's the result of a quick analysis on Truffle dependencies: \nDependent on fs-ext\nlock-me (dependencies and optionalDependencies)\nDependent on execSync\ncodecov@1.0.1\nDependent on codecov@1.0.1\nrequest\nignore\nshelljs\nnode-fetch\nregenerate\nbabylon\naegir\ninterface-datastore\nThe funny thing is that the codecov main branch is at 2.2.0. The execSync library was removed from its dependencies a while ago. Unfortunately, a lot of libraries within the dependency tree still use 1.0.1.\nWe might be able to get away with the execSync failure - I'm not sure if that one is a fatal during installation. Can anyone speak to that? \nAs for IPFS's lock-me, I'll look into opening an issue about that.. I think that should do it, so I'm looking into that now (but I don't know if that covers all the errors in the installation log).\nI forked lock-me to see what would be involved in replacing fs-ext with a Windows compatible option. However, I'm noticing a discrepancy.  In the lock-me library, package.json defines fs-ext as only an optional dependency. However, when we install Truffle and navigate to truffle/node_modules/lock-me/package.json, fs-ext is listed under both dependencies and optional dependencies. I can actually install lock-me locally without problem because installation skips the optional dependency fs-ext! When installing Truffle, however, lock-me installation seems to think fs-ext is mandatory.\nPerhaps this is a result of some npm behaviour that I'm not aware of. Do you have any ideas why it might want to install the optional dependencies? We still might be able to get around this problem by replacing fs-ext entirely, so I'll continue looking at that option.. Version 3.2.1 appears to still work, so that's good news. \nAs you suggest, @ProphetDaniel, a git compare could reveal what the issue is.. I'll try comparing those versions and see what I find. Unfortunately, I have a lot on my plate at the moment and I might not be able to get around to it just yet. That said, if anyone else wants to have a go at it, I won't stop you ;). @tcoulter Great, I'll give that a shot tonight and tell you all how it goes. I like the direction you are taking the dependency management, based on what I read in your post. . Installing the beta version appears to work well. I was able to installing with npm uninstall truffle followed by npm install truffle@beta.\nI have a couple comments:\n- The beta version appears to introduce some breaking changes. For example, the following no longer works: var Compiler = require('truffle/lib/contracts'). Has this been replaced by truffle-compiler? Will this be the same for things like require('truffle/lib/commands/migrate')?\n- I forked Truffle and tried npm install. On Windows 10, this still fails with the same log as posted in this issue. . ",
    "GitSpree23": "Okae. Well, I got it done after installing windows-build-updates in my Win\n10.\nI suppose there's no fix for Ubuntu 16.10 yet?\nOn 4 Jun 2017 6:00 p.m., \"Rocky Fikki\" notifications@github.com wrote:\n\nYes, I mentioned in the truffle Gitter channel awhile back that 3.2.2\nworks the problem started with version 3.2.3 truffle.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/411#issuecomment-306037199,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/Abp4z4zVumsPvX7qghN4toTvNRUfGnu4ks5sAqNVgaJpZM4NjIrD\n.\n. Installed using npm install -g truffle@beta on 32-bit Win 10. Tried out truffle init, compile, migrate and test. Works fine.\n\nBut then I tried truffle init webpack on another dir, and it shows the following error:\n\nError: Cannot find module \".\"\n    at webpackMissingModule (C:\\Users\\user\\AppData\\Roaming\\npm\\node_modules\\truf                                                                                                                fle\\build\\cli.bundled.js:209703:61)\n    at C:\\Users\\user\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.                                                                                                                js:209703:139\n    at \n\nBut some initialization has been made as the folder now contains:\n\napp/  contracts/  migrations/  package.json  README.md  test/  truffle.js  webpack.config.js\n\nSubsequently, running compile or migrate says:\n\nError: Cannot find module 'babel-register'\n    at Function.Module._resolveFilename (module.js:485:15)\n    at Function.Module._load (module.js:437:25)\n    at Module.require (module.js:513:17)\n    at require (internal/module.js:11:18)\n    at Object. (C:\\Users\\user\\uffle\\truffle.js:2:1)\n    at Module._compile (module.js:569:30)\n    at Object.Module._extensions..js (module.js:580:10)\n    at Module.load (module.js:503:32)\n    at tryModuleLoad (module.js:466:12)\n    at Function.Module._load (module.js:458:3)\n. \n",
    "johnmiroki": "npm install -g truffle failed on windows 10\ngot error when wrtc is being installed. Seems msbuild related. scratched my head for hours after midnight, until I stumbled upon this post\nnpm install -g truffle@3.2.1 and npm install -g truffle@3.2.2 both are successful.\nThanks.. ",
    "XertroV": "Sounds good, thanks for the update.. > if any of your params are undefined you will get this error without any other warning in most web3 implementations. Probably a bug in your code that is surfacing in a rather ugly fashion.\nIt also seems you get this error if you pass in a BigNum as an argument.\nI have a function that takes a uint256 and await C.m(bn.divn(100)) doens't work, but await C.m(bn.divn(100).toNumber()) does work >.< (@gnidan - presume CCing you on this is okay)\n(Note: the BNs are generated via Web3 1.0 web3.utils.toBN). @swader - your problem is obfuscated via the (terrible) Promise pattern of .then chaining. \nIf you write this in async/await syntax the problem is somewhat obvious. \nyour first code was equiv to\njavascript\nawait deployer\nconst tIns = await TNSToken.deployed()\nconst sIns = await StoryDao.deployed()\nconst balance = tIns.totalSupply()   // no await used - type Promise<BigNumber>\nawait tIns.transfer(sIns.address, balance)\nawait tIns.transferOwnership(sIns.address)\nAnyway, the problem is generally the same as above: passing in an unrecognised object instead  of a value (like string, number, BigInteger, etc). ",
    "wimdetr": "The issue seemed to be have been solved by adding the -f flag; i'm not sure if upgrading to node v8.0.0 helped, but I did that aswell before trying force.. Hi @tcoulter,\nInstalling the beta works perfectly. I've tried some commands and have found this:\n$ truffle init webpack\nDownloading project...\nInstalling dependencies...\nError: Cannot find module \".\"\n    at webpackMissingModule (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:209703:61)\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:209703:139\n    at \nEverything else seems to work well.. ",
    "yuwiggin": "make a mistake.. ",
    "pimotte": "The same is displayed if you use \"String\" instead of \"string\" or use \"type\" as a variable name. I haven't actually seen a sane compiler error, so I don't even know if this functionality exists? (clearly, I'm one of the above-mentioned noobs).. I'd also like to have this. I've made a PR at https://github.com/trufflesuite/truffle-core/pull/59 (which adds it with a --help flag). What do you mean with that first sentence? Reimporting the seed is a workaround?\nIn any case, the metamask issue says they are not looking to bend over backwards to detect differences between private networks. Doesn't it make sense to use a new network or chain id when you're starting from scratch?. The MetaMask issue speaks of an undocumented chainId option in testrpc. Can we use that in Ganache to force MetaMask to re-read the transactions?\nI'm of the opinion that this is actually an issue on both sides (i.e. truffle develop should be using random id's, unless pinned by an argument, and metamask should be caching less aggressively). ",
    "illuzen": "\ud83e\udd23  we should definitely strive for clear error messages. I've been meaning to dig into the compiler sauce, so maybe I'll make that my first project, make it spit out at least a line number or something. Whatever I have at /usr/local/bin/solc gives reasonable errors, so it's probably just a matter of passing them thru the javascript. . @GlenDC I spent a little time on it, didn't figure out which layer it's occurring at, so have at it. \ud83d\udc4d . @beether from the giant bundle's README: https://github.com/trufflesuite/truffle-core. Related, probably not the same, I frequently find that I have to rm -r build/ to get this error to go away.. Could be contract name collision. Check your abstract contract names and see if they collide with anything. :? . +1. > In the meantime, recommended workaround is to not re-use contract names.\nThis appears to be a deeper problem. There are several mentions of these symptoms in similar issues. I believe they are related. Either that or this error is used as a catch all of some sort. . +1. Hey guys, can we zoom out and think about this. It's a recurring problem. Can we get some unit tests to cover this basic functionality? \nLike maybe before we get a bunch of new features. I know it's not that glamorous, but it's really important. Million dollar businesses are depending on this software. I bet we could even get some money from these businesses to fund nailing down everything truffle does.. I do like the idea of having a build directory to store all the relevant info, but it causes so many problems we've reverted to gdocs for recording this info.. +1. Actually it may have just been a coincidence, it seems this error is non-deterministic. I just have to change something about the contract, and it works again. I get the error, remove the fallback entirely, it deploys. Later I get the error again, same contract, I put the fallback back in, it deploys. \nBtw I've been running into this issue for months now.. Private network, using geth 1.7.2. My node is the only node. And the problem is consistent, I have to do it every time. I've been unable to reproduce this with small contracts, so I think it's a subtle bug that only emerges beyond a certain level of code complexity. Please ask more questions to help me track this down.. I think it comes from creating two contracts in two different files, say A.sol and B.sol and then having an abstract contract in A.sol with the name \"B\". We started appending numbers to the abstract contract names so they don't collide and it seems to workaround.. ",
    "marcabbink": "Yes I'm sure we're gonna save a lot of people a lot of time by checking for these things when compiling\nI had another one. A variable with the name \"contract\". ",
    "tinder-dyakobian": "How the hell am I supposed to debug my code :(. I waited until writing 10 contracts to compile. ",
    "beether": "If it says: Compiling ./contracts/MyContract.sol... and then I see this 5 5 error, is it safe to assume the error is in MyContract.sol, or is it in the next (not printed) contract?. Wow you cannot even see which file is getting the compilation error.  Can this be high prio please?. @illuzen @GlenDC I'm interested at taking a crack at it, but I can't find the source code for truffle other than the giant bundle.  Is there some other branch I can checkout?. @tcoulter confirmed it. It should be noted that collisions can occur even without --compile-all\nIdeally, the fix to this would ensure that even if you first create One.sol compile, then create UsesOne.sol, and compile (which will currently clobber One.json), the collision will be detected.. I fixed one of the bugs by changing /truffle-compile/profiler.js line 200 to this:\n```\n        try {\n          imports = SolidityParser.parse(resolved_body, \"imports\");\n        } catch (e) {\n          var error = new Error(\"Error parsing \" + import_path + \": \" + e.message);\n          error.prev = e;\n          return finished(error);\n        }\n```\nBefore this change:\nSyntaxError: Expected \"(\", \",\", \"{\", comment, end of line, or whitespace but \"U\" found.\n (stack trace)\nAfter this change:\nError: Error parsing /path/to/Bad.sol: Expected \"(\", \",\", \"{\", comment, end of line, or whitespace but \"U\" found. Line: 14, Column: 2\n   (stack trace)\nI don't think we care about the previous error, but in case we do it's in \"prev\".  This will at least show which file failed parsing.\nUnfortunately, some files will parse correctly, but will fail when truffle-compile calls solc.standardCompile() with all the file sources, causing the 5 5 error.  I'm not sure how to fix that -- perhaps by compiling files one by one?\n@tcoulter I don't have my dev env set-up to change this and push it as a branch -- could you review this and take care of that?. I've come up with my workaround for the 5 5 error, and it's already saved me HOURS.\nI added this to truffle-compile/index.js on line 98:\nif (!options.dontparse){\n    const SolidityParser = require(\"solidity-parser\");\n    Object.keys(operatingSystemIndependentSources).forEach(function(file_path) {\n      try {\n        var source = operatingSystemIndependentSources[file_path];\n        SolidityParser.parse(source);\n      } catch (e) {\n        console.log(\"WARNING:  Parsing error in \" + file_path + \":\\n\" + e.message);\n      }\n    });\n  }\nAnd added a flag in truffle-core.  Works like a charm -- now I always see parsing errors before that 5 5 error.\nOne more note -- may want to add something to console.log that says \"if you think this parsing error is incorrect, please notify solidity-parser\" ... i've seen some false positives already.\n@tcoulter what do you think?. I created a pull request in truffle-compile.\nhttps://github.com/trufflesuite/truffle-compile/pull/9. @jjc12 I would prefer it not get closed until the PR is approved and pulled, and until this project updates its dependancies to include the fix.\nIMO this is one of the most major issues right now.  People get this error and have to spend so much time digging through all their code looking for one syntax error.. @jjc12 Sorry, deployer.deployer was a typo.  Fixed it.\nI'm not getting BigNumber Error anywhere.\nThe problem is the first two arguments are not passed unless all three arguments are provided, whereas the expected behavior is the first two arguments are passed and the third is omitted, or an exception about not enough arguments occurs.\n. @jjc12 You are missing the point of this issue.  It is a problem with deployer.deploy() not passing the first two arguments unless the third is present.. Just to be clear, you think that the expected behavior of calling: deployer.deploy(Contract, argOne, argTwo) (when there are three required args) is to have zero args be passed?. Whatever.. ",
    "GlenDC": "Might try to make time for this to help with this issue if no one is pushing any PR for this yet.. ",
    "mezzomix1810": "Had the same problem. Took me very long to debug. Using linter-solidity for Atom helped. (in case u use Atom) https://atom.io/packages/linter-solidity\n. ",
    "eugene-babichenko": "The same problem too. Just because of a typo in a variable name in an expression like abc += 1.. ",
    "dyba": "None of the answers helped me but adding Solium to my tool chain and running the commands:\nsolium --init\nsolium --dir .\nIn the root of the project, helped pinpoint the errors in my .sol files. After I addressed the errors, running truffle compile and truffle migrate worked fine.. @15chrjef Using Solium helped me to pinpoint the reason why the compilation wasn't successful.\nsolium --init\nsolium --dir .. Looking at the diff details, it's hard to tell that this is just an indentation change.. @cgewecke I'm using emacs with solidity-mode. It seems they're using the same indentation as C: https://github.com/ethereum/emacs-solidity/blob/master/solidity-mode.el#L520 and https://github.com/ethereum/emacs-solidity/blob/master/solidity-mode.el#L32. @cgewecke After a little investigation, I found out that the maintainer for solidity-mode is in fact using 2 spaces instead of the 4 spaces that Solidity's style guide calls for.\nI used xxd on my computer to view the output BEFORE I indented the file using solidity-mode on Emacs:\n00000560: 2041 4444 5245 5353 5f4e 554c 4c20 3d20   ADDRESS_NULL =\n00000570: 3078 3030 3030 3030 3030 3030 3030 3030  0x00000000000000\n00000580: 3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\n00000590: 3030 3030 3030 3030 3030 3b0a 2020 2020  0000000000;.\n000005a0: 2f2f 2043 6f6e 7374 616e 743a 2042 5954  // Constant: BYT\n000005b0: 4553 3332 5f4e 554c 4c0a                 ES32_NULL.\nNote line 0x590 shows four spaces: 2020 2020. So your original file is following the Solidity style guide.\nMy fix applies only 2 spaces as this is what solidity-mode uses.\n000004b0: 2020 6164 6472 6573 7320 636f 6e73 7461    address consta\n000004c0: 6e74 2041 4444 5245 5353 5f4e 554c 4c20  nt ADDRESS_NULL\n000004d0: 3d20 3078 3030 3030 3030 3030 3030 3030  = 0x000000000000\n000004e0: 3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\n000004f0: 3030 3030 3030 3030 3030 3030 3b0a 2020  000000000000;.\n00000500: 2f2f 2043 6f6e 7374 616e 743a 2042 5954  // Constant: BYT\nNote line 0x4f0: 2020.\nThis fix turns out to be really simple: I've updated the .gitattributes file in the project to use tabwidth=4 and reverted my earlier commit.. ",
    "karalabe": "Seems that accounts is not defined, so when you try to index into it you get an error? I'm not familiar with truffle to answer what's happening here, but perhaps that's the issue? Do you have accounts on Rinkeby inside Geth? E.g. can you see them in the geth console if you type eth.accounts?. The release oracle is deployed only on mainnet, not on rinkeby. Curious though that it even tries to access it. Either way, you don't need to care about the that single instance or missing trie node, it just cannot find the release oracle contract, since it doesn't exist. I'll try to look into why it even warns about it on rinkeby.. Small update. If I inject a 100ms delay between receiving the transaction and mining it, truffle does correctly detect the block and continue, so this definitely seems to be a data race within truffle.. Hey all, I'm not sure why this was closed. The issue still persists, blocks take 1 second to be detected by Truffle after they are mined by Geth.. ",
    "dotnetspec": "Thanks for your help this appears to be fixed for now. \nFor reference:\nI installed \ntruffle-hdwallet-provider \nand updated truffle-config.js in the project directory so it now specifies:\n// Allows us to use ES6 in our migrations and tests.\nrequire('babel-register')\nvar HDWalletProvider = require(\"truffle-hdwallet-provider\");\nvar mnemonic = \"\";\nmodule.exports = {\n  networks: {\n    development: {\n      host: 'localhost',\n      port: 8545,\n      network_id: '*' // Match any network id\n    },\n    ropsten: {\n      provider: new HDWalletProvider(mnemonic, \"https://ropsten.infura.io/\"),\n      network_id: 3\n    },\n    rinkeby: {\n      provider: new HDWalletProvider(mnemonic, \"https://www.rinkeby.io/\"),\n      network_id: 4\n    }\n  }\n}\nI'm no longer getting - \"TypeError: Cannot read property '0' of null' \", so I will now continue under current issue:\n\"Error: Invalid JSON RPC response: \"\n. Solved:\nI had changed my truffle-config.js file in the project directory:\n                 // host: 'localhost',\n        host:   'http://127.0.0.1',\nas part of my efforts to connect to Rinkeby instead of the local testrpc.\nRestoring back:\n                host: 'localhost',\n        //host:   'http://127.0.0.1',\nresolved this particular error. Thanks. I realized that Truffle was not able to connect to the Ethereum client. However, I don't know why it wouldn't connect.\nWhat steps can I take to make the connection happen?\nThanks,. ",
    "philpraxis": "+1. ",
    "Neurone": "This is not releated to Windows in general: if you use Power Shell or other terminals (i.e. the one integrated into Visual Studio Code, Bash, etc.) the problem does not appear. It happens with cmd.exe because the command line takes into consideration the PATHEXT enviroment variable.\nFor example, a common PATHEXT value at system level is:\nPATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC\nThis tells Windows to consider files with those extensions as executables. When you run the truffle command inside your project folder, truffle.js takes the precedence and it starts. This means that, if you assigned for example a default text editor to .js file, when you type truffle inside the project folder the truffle.js file is opened inside the default text editor.\nTo get rid of this particular problem, you can override the default PATHEXT system environment variable with a user environment variable, removing the .JS extension from the admitted values.\nIMHO it's better to use a safer PATHEXT in any case. For example, I use this:\nPATHEXT=.COM;.EXE;.BAT;.CMD;.MSC. ",
    "externMing": "how to fix.... @elenadimitrova  hello! how you fixed this problem \"TypeError: path must be a string\" \uff1f. ",
    "Fabreeze23": "I'm still getting that error. ",
    "daveremy": "Having similar issue with Windows Linux Subsystem Bash same versions of other software.  However installation is terminated with:\nnpm ERR! code EINTEGRITY\nnpm ERR! sha1-Sl8bhoOpRBSi+67Ocr8at10LmsU= integrity checksum failed when using sha1: wanted sha1-Sl8bhoOpRBSi+67Ocr8at10LmsU= but got sha1-OfUkmzmU59tgRy5A/fxazxMcQV8=. (2506224 bytes). ",
    "arvindkalra": "We have the box which can be used to provide api end points to the smart-contract using express...\nIt invokes smart contracts from the get/post requests.. http://truffleframework.com/boxes/express-box. ",
    "kevin-smets": "Hmmm, mine has accounts on it (testrpc) and I also get this issue. Very cryptic indeed. Did adding accounts actually solve it for you?. Seems to be some weird issue in node or something... https://gitter.im/ConsenSys/truffle?at=58d3fbe3caf143ab665362ee\nA system restart fixed it for me.. ",
    "alexpee": "I hit the similar error and fixed it after reinstalling the testRPC.. Experience the same issue with:\nTruffle v4.1.8 (core: 4.1.9)\nSolidity v0.4.24 (solc-js)\nI have to explicilty declare gas in my truffle.js\n```\nmodule.exports = {\n  networks: {\n   development: {\n      host: \"xxx\",\n      port: xx,\n      network_id: \"xx\",\n      gas: 4712388\n    }\n  }\n}\n```\nthen it works\n. ",
    "sachabest": "Having the same problem with active accounts on top of a geth node with rpc turned on. Any idea how else to fix? I read the gitter conversation but restarting has not helped. Tried both node 6 and 7 (via docker image), same result.. ",
    "dellintosh": "I ran into this same issue when running the testrpc.  It turned out that I had geth running in another tab (connected to the testnet)... as soon as I stopped geth it was able to migrate without any issue!  Hope this saves others - turns out you can't have geth and testrpc running at once (makes sense, really, since both bind to port 8545 and truffle probably doesn't know where you want to migrate to).. ",
    "infwonder": "Hi all, \nI also encountered the issue when running truffle migrate. The error message I have is:\n\nError: Expected parameter 'solc' not passed to function.\n\nI solved it my introducing a 'solc' entry in truffle.js:\n'solc': '/usr/local/bin/solc',\nIt seems that truffle-expect is checking truffle-config opject and throw error when certain expected key is not found.\nHTH. ",
    "MacroChip": "I had the original issue that @maraoz had. It is fixed by opening a geth console and calling personal.newAccount(). @rhlsthrm @onetom Did either of you have more than one contract in a file? That may have been my issue (or it contributed).. @rhlsthrm Yes it should but I was just trying to diagnose the issue. Try pulling each contract out to another file, deleting your build directory, migrate --reset and see if it is fixed.. ",
    "propercoil": "This error is due to testrpc being used by a third party instance such as geth or parity and when no accounts are present. To resolve, simply exit/stop these services.. Having the same issue in Kovan while Kovan through parity is synched properly with 15 peers:\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  ... 0x262146f9cb1468ce1de28773d32e7779a6ef27eb9af5c2feff1e38740c5cb210\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: Contract transaction couldn't be found after 50 blocks\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:328377:30\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:64331:21\n    at Array.forEach (<anonymous>)\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:64330:32\n    at Array.forEach (<anonymous>)\n    at Object.onMessage [as callback] (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:64328:22)\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:330526:20\n    at Array.forEach (<anonymous>)\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:330525:12\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:176198:11\nEven the Migration contract is not able to be deployed. Using:\nTruffle v4.0.5 (core: 4.0.5)\nSolidity v0.4.18 (solc-js)\nEDIT:\nResolved by adding --jsonrpc-apis web3,eth,net,personal,parity,parity_set,traces,rpc,parity_accounts to the parity call.\n. ",
    "eriklacson": "I'm getting this error on Ubuntu 16 running geth with an account created in Ethereum Wallet. Account has been unlocked on geth attach and I can even check the balance. Putting 'from: ' yields a 'Error: unknown account'\n. ",
    "bmmpxf": "Docs added as of https://github.com/trufflesuite/trufflesuite.com/commit/1f4464af\nSee here: http://truffleframework.com/docs/advanced/configuration#contracts_build_directory\nThanks so much for the issue report! If you see any more things that need documenting, please bring it to our attention.. PR here: https://github.com/trufflesuite/trufflesuite.com/pull/11\n@gnidan Will you take a look to make sure I've gotten all my vocabulary correct? I'm thinking there's probably some ways to improve the wording here. Thanks!. PR for docs update: https://github.com/trufflesuite/trufflesuite.com/pull/10\nThis should hopefully clear up the confusion.. I've encountered this too, exactly as described. It appears to be very inconsistent, with no discernible pattern. We'll need to investigate further.. In v3, the command truffle init bare would create a bare bones project, while truffle init has a MetaCoin project inside it.\nIn v4, truffle init is deprecated in favor of truffle unbox, but there is no corresponding truffle unbox bare.. Hi @fdouglis . We've caught most of the old MetaCoin behavior in our docs, we think, but if you see other instances, please create tickets at https://github.com/trufflesuite/trufflesuite.com/issues and we'll take care of them. Thanks!. Using 4 beta 1.\nWorking with a contract that I've deployed using truffle develop. After migration, I made a change to the contract, and wanted to redeploy it. I compile the contract again and then run truffle migrate but the console says \"network up to date\". I even tried truffle migrate --reset, but same output. Is this intentional? . Running 4 beta 1 / node v7.9.0\nWhen inside the truffle develop console, running debug with a valid transaction id will sometimes fail, and sometimes succeed. There doesn't appear to be any pattern. Quotes or no quotes around the transaction id doesn't seem to make a difference either.\nFor example, below I ran the exact same command twice; the first failed, the second succeeded:\n```\ntruffle(develop)> debug 0x7f799ad56584199db36bd617b77cc1d825ff18714e80da9d2d5a0a9fff5b4d42\nGathering transaction data...\nTypeError: Cannot read property 'indexOf' of undefined\n    at Function.get (C:\\Users\\Mike\\AppData\\Roaming\\nvm\\v7.9.0\\node_modules\\truffle\\build\\cli.bundled.js:299655:17)\n    at Function.getter (C:\\Users\\Mike\\AppData\\Roaming\\nvm\\v7.9.0\\node_modules\\truffle\\build\\cli.bundled.js:299463:25)\n    at Function.deployedBinary (C:\\Users\\Mike\\AppData\\Roaming\\nvm\\v7.9.0\\node_modules\\truffle\\build\\cli.bundled.js:299631:37)\n    at Function.getter (C:\\Users\\Mike\\AppData\\Roaming\\nvm\\v7.9.0\\node_modules\\truffle\\build\\cli.bundled.js:299466:49)\n    at Debugger.findMatchingContract (C:\\Users\\Mike\\AppData\\Roaming\\nvm\\v7.9.0\\node_modules\\truffle\\build\\cli.bundled.js:309059:42)\n    at Debugger.contextForBinary (C:\\Users\\Mike\\AppData\\Roaming\\nvm\\v7.9.0\\node_modules\\truffle\\build\\cli.bundled.js:309024:23)\n    at C:\\Users\\Mike\\AppData\\Roaming\\nvm\\v7.9.0\\node_modules\\truffle\\build\\cli.bundled.js:309179:39\n    at Array.forEach (native)\n    at C:\\Users\\Mike\\AppData\\Roaming\\nvm\\v7.9.0\\node_modules\\truffle\\build\\cli.bundled.js:309178:28\n    at process._tickDomainCallback (internal/process/next_tick.js:135:7)\ntruffle(develop)> debug 0x7f799ad56584199db36bd617b77cc1d825ff18714e80da9d2d5a0a9fff5b4d42\nGathering transaction data...\nAddresses affected:\n  0x377bbcae5327695b32a1784e0e13bedc8e078c9c - SimpleStorage\nCommands:\n(enter) last command entered (step next)\n(o) step over, (i) step into, (u) step out, (n) step next\n(;) step instruction, (p) print instruction, (h) print this help, (q) quit\nStore.sol | 0x377bbcae5327695b32a1784e0e13bedc8e078c9c:\n1: pragma solidity ^0.4.0;\n2:\n3: contract SimpleStorage {\n   ^^^^^^^^^^^^^^^^^^^^^^^\ndebug(develop:0x7f799ad5...)>\n``. When you runtestrpc`, it displays both addresses, private keys, and the mnemonic. \nSince truffle develop is meant to be a replacement for using testrpc, we should mimic this behavior. At the very least, it should display the mnemonic, as there is no other way to determine it from within the console.. Hi @jonnyhsy . Please create a separate ticket for your issue, including complete steps to reproduce, and we'll see what we can do. Thanks!. @cgewecke I am in favor of anything that increases the inclusiveness of our community! So I'm a fan of internationalization of our documentation (or i18n of our d13n for short \ud83d\ude04).\nHowever, maintenance and drift are certainly concerns. We'd be dependent on the wider community (and folks like you @dbucci24!) to keep the documentation up to date. So it's possible that the project might stall. Also, keeping our own English documentation up-to-date is pretty much a full-time task. It would be a shame if the information in one language didn't match that in the other.\nTo your points @lazaridiscom , I don't see us having much bandwidth to actively assist with this at the moment, though we're certainly in support. And our current documentation framework (Metalsmith) doesn't really help us much in this domain. It's an argument for something like Sphinx/Transifex, for sure.\nFor now, I think in the short term, I'd prefer to see a proof of concept on a different site, and we could certainly link to it in our official documentation. In the longer-term, we could build a better system and bring it under the \"official\" label.\nOne last thing, the actual source code for our documentation is here:\nhttps://github.com/trufflesuite/trufflesuite.com/tree/master/public/docs\nThe link listed previously is for the built (HTML) site.\nIf anyone would like to volunteer at a first pass, that would be great!. @RobertoC27 That's great! We've written some official policies regarding documentation translation.. Or a third option, which is to create a new file name entirely, such as config.js and grandfather everything in. Shorter and non-conflicting.\n(I have a small bias against the length and redundancy of truffle-config.js, but I won't push against it if that's what we decide on.). @gnidan For sure, makes sense. I am much more in favor of retaining truffle.js anyway.. @axic Both of those would be fine. The conflict is with the truffle.cmd file, the script that runs all of the Truffle commands. On Windows, .js has priority over .cmd by default when the extension isn't specified and both are on the path.. @cgewecke I think the question is whether this is limited to the pet shop demo or a larger issue with pulling in external npm packages. Sounds like the pet shop demo is working here by itself. Do you know about a Truffle project's native ability to pull in npm modules? Is this syntax \"const fs = require('fs')\" correct?. ",
    "FugueWeb": "Similar problem. Upgrading to latest version of Truffle on Mac 10.12.5, node version 7.10, latest version of testrpc. http://truffleframework.com/blog/how-were-making-installation-issues-a-thing-of-the-past\nThis worked for me, great work as always Truffle Team!. https://github.com/npm/npm/issues/17413\nhttps://github.com/ethereum/web3.js/issues/904\nThe bignumber problem seems to be related to a few other issues. ",
    "IAMtheIAM": "Thanks, node-gyp was not working for me, even with Python 2.7 and Windows 8.1 SDK installed. \nnpm install -g truffle@beta worked instantly. . ",
    "shdmitry2000": "+1. \nnpm_lis_ver.txt\nnpm_global_list.txt\nnpm_global_list.txt\n. I am use last version of truffle .The deploy and test work perfectly.\nWhen i use node with application i receive following problem:\nUnexpected token < in JSON at position 0\nThe problem is connected to web3 version because i receive error web3 trying to get network id.\nI upgraded web3 to version 0.18.4 and problem disapiared but now after upgrading one of module it's appiars again.. +1. ",
    "robertsdotpm": "This error still seems to occur. I've upgraded truffle to the latest version, replaced solc with the latest one, everything is up to date on my system and my modules all point to the latest compiler - same issue. If it weren't for beether's clever fix I'd be completely lost right now. I've probably wasted hours on trying to figure out these utterly senseless error messages. \nWhy wasn't this fix merged into truffle? The 5 5 error and these syntax errors have cost myself and others hours of time and its a simple fix, too.\nEdit: Also want to say that its 100 times harder now to apply these patches as truffle seems to be web packed now so instead of a nice collection of modules its a single 100k+ file you need to modify.... Incredible.\nIt's no wonder there's been so many hacks in the Ethereum space. It takes like 10 seconds to calculate a simple test for an addition operation... and missing a semi-colon can take you hours to find as there's often no debug info.... Maybe more people would want to test their software if the tools weren't all so shitty. Just saying.... ",
    "pents90": "Also seeing this bug still persist for certain types of errors. Here is a minimal example of a contract that causes the bug (note the mismatched braces):\npragma solidity ^0.4.10;\n\ncontract Test {\n\n    uint[] test = [uint(0)};\n\n}.\n",
    "acodercat": "modify  \\npm\\node_modules\\truffle\\build\\cli.bundled.js  line 1755 \njavascript\nvar DEFAULT_CONFIG_FILENAME = \"truffle-config.js\";\nModify the truffle.js file as truffle-config.js. ",
    "brakmic": "Had the same problem with truffle@beta. After having installed truffle@3.2.1 the problem disappeared. However, for a successful install of truffle@3.2.1 you must have a VS2015 build chain. I know it doesn't sound like a real solution but according to this thread it's rather hard to run truffle properly under Windows. . ",
    "Enigmatic331": "On a Windows machine. Can confirm that I am also having the problem with the latest truffle (release v3.3.0) when running truffle serve. Installed truffle@3.2.1 which resolves this issue (thanks brakmic).\nI'm a bit tempted to buy a MacBook just to develop on Truffle..... ",
    "seunlanlege": "Just had this Same issue resolved with installing truffle@3.2.1\nit's not a windows10 issue, as i was running ubuntu 16.04\n@tcoulter \n. ",
    "haraldini": "Same issue on MacOS. +1. Truffle v4.1.13 (core: 4.1.13)\nSolidity v0.4.24 (solc-js). ",
    "EdgarCloggs": "Same issue on Ubuntu 16.04 - truffle@3.30, workaround I found to use: \nnpm run dev\n. ",
    "liskicious": "@EdgarCloggs \nI don't understand the npm run dev workaround?\nAfter running:\ntruffle init\ntruffle compile\ntruffle migrate\nthere is no package.json there. So no script to run?\nWould you know where I can get the package.json for the truffled project?. ",
    "kevupton": "can confirm happening windows 10 v3.4.4. ",
    "d10r": "Is there any known workaround for the time being? Ubuntu 14.04 here.\nEdit: The workaround npm run dev works with such a setup: https://github.com/trufflesuite/truffle-init-webpack. I understand.  \n\nThe default from that you configure in the Truffle config pertains only to transactions sent from Truffle contracts.\n\nThen I suggest to change the relevant lines in default truffle-config.js from \n// from: <address>,        // Account to send txs from (default: accounts[0])\nto\n// from: <address>,        // Account to send contract txs from (default: accounts[0])\nI always considered the truffle console as a kind of superset of the web3 console. You seem to view it more as a kind of parallel thing which happens to also expose the web3 API.\nIt's good to not mess with the defaults, but it's unfortunate that the defaults for sender are inconsistent (account[0] for truffle contract txs, null for web3 txs).\nGiven the name and associated comment of the config item, I perceived this as a bug. But I don't know if my perception is representative for other devs.  \nAt the moment I don't have a concrete proposal how this could be improved further in a reasonable way, but still wish for it.. Thx.\n\nWould you be interested in putting in a PR for it?\nI'd do so if I knew where the template file is. Couldn't find it with github's search.. \n",
    "yozef": "npm run dev works with truffle 3.3.1 on Mac. ",
    "yellowred": "same here at macOS 10.12.5\n$ truffle version\nTruffle v3.4.5 (core: 3.4.5)\nnpm run dev works though.. ",
    "vmatekole": "same here \nmacOS 10.12.5\nTruffle v3.4.5 (core: 3.4.5). ",
    "fredolamolette": "Same with Truffle v3.2.8 on Mac OS 10.12.5 Sierra\n. Any fix to come ?\n. ",
    "ron137": "Same with truffle 3.4.5 on Mac 10.12.5 Sierra\nNode Version: 7.6\nnpm version: 4.1.2 \nreturn (new fsevents(path)).on('fsevent', callback).start();\n          ^\nTypeError: fsevents is not a constructor\n    at createFSEventsInstance (/Users/ron/.nvm/versions/node/v7.6.0/lib/node_modules/truffle/build/cli.bundled.js:124978:11)\n    at setFSEventsListener (/Users/ron/.nvm/versions/node/v7.6.0/lib/node_modules/truffle/build/cli.bundled.js:125032:16)\n    at FSWatcher.FsEventsHandler._watchWithFsEvents (/Users/ron/.nvm/versions/node/v7.6.0/lib/node_modules/truffle/build/cli.bundled.js:125196:16)\n    at FSWatcher. (/Users/ron/.nvm/versions/node/v7.6.0/lib/node_modules/truffle/build/cli.bundled.js:125330:25)\n    at gotStat (fs.js:1723:21)\n    at FSReqWrap.oncomplete (fs.js:114:15). ",
    "dflick": "Hey guys,\nSame with truffle 3.4.6 on Ubuntu 16.04.\nAny fix in the near future?\nOr, how can I downgrade my truffle version to a working one?\nEdit: Ok, I used npm install -g truffle@3.2.1 and this seems to work fine. . ",
    "avitus": "Same problem on MacOS with truffle 3.4.8\n. ",
    "lastcoolnameleft": "I had a similar issue and this is what fixed it for me was to re-initialize a new truffle instance with \"truffle init webpack\" :\n``\n\u279c  truffle> truffle serve\nServing static assets in ./build on port 8080...\n/Users/thfalgou/.nvm/versions/node/v6.6.0/lib/node_modules/truffle/build/cli.bundled.js:115605\n  return (new fsevents(path)).on('fsevent', callback).start();\n          ^\n\u279c  truffle> cd ..\n\u279c  ethereum> mkdir truffle-webpack\n\u279c  ethereum> cd truffle-webpack\n\u279c  truffle-webpack> truffle init webpack\nUsingtruffle initwith a specific template is deprecated. Please usetruffle unbox` instead.\n...\n\u279c  truffle-webpack> truffle compile\nCompiling ./contracts/ConvertLib.sol...\n...\n\u279c  truffle-webpack> truffle migrate\nUsing network 'development'.\n...\n\u279c  truffle-webpack> npm run dev\n\ntruffle-init-webpack@0.0.2 dev /Users/thfalgou/tmp/ethereum/truffle-webpack\nwebpack-dev-server\n\nProject is running at http://localhost:8080/. ",
    "luxcn": "I also had similar issue.old version is fine.\"npm run dev\" only can run Boxes DApp,like these.http://truffleframework.com/boxes/. ",
    "ljinkai": "I also had the same issue. MacOs \nTruffle v3.4.8\nnode.js v6.11.2\n. ",
    "cocos543": "I also had the same issue. MacOs\nTruffle v3.4.7 (core: 3.4.7)\nSolidity v0.4.13 (solc-js). ",
    "senyuaho": "I also had the same issue. Truffle v3.4.9. ",
    "vsergeev": "Same issue with Truffle v3.4.9 on Arch Linux:\n```\n$ truffle version\nTruffle v3.4.9 (core: 3.4.8)\nSolidity v0.4.15 (solc-js)\n$ truffle init\n...\n$ truffle compile\n...\n$ truffle migrate\n...\n$ truffle serve\nServing static assets in ./build on port 8080...\n/usr/lib/node_modules/truffle/build/cli.bundled.js:115605\n  return (new fsevents(path)).on('fsevent', callback).start();\n          ^\nTypeError: fsevents is not a constructor\n    at createFSEventsInstance (/usr/lib/node_modules/truffle/build/cli.bundled.js:115605:11)\n    at setFSEventsListener (/usr/lib/node_modules/truffle/build/cli.bundled.js:115659:16)\n    at FSWatcher.FsEventsHandler._watchWithFsEvents (/usr/lib/node_modules/truffle/build/cli.bundled.js:115823:16)\n    at FSWatcher. (/usr/lib/node_modules/truffle/build/cli.bundled.js:115957:25)\n    at gotStat (fs.js:1783:21)\n    at FSReqWrap.oncomplete (fs.js:152:21)\n$\n```. ",
    "lukehamilton": "When will this be fixed? I keep having to install different versions of Truffle to get different functionality :(. ",
    "animeshjn": "Same issue on Windows Platform. ",
    "ZihaoZhang270": "Use \u201ctruffle init webpack\u201d \nand \"npm run dev\" instead of \"truffle serve\". ",
    "hackingbeauty": "Hello, is there any update on this issue?  We're having problems.. ",
    "pospi": "This also prevents me using latest Truffle on Ubuntu (16.04).\nI have noticed in the webpack build config that this line replaces fsevents with this empty exports object. I've changed that to export an object compatible with the FSEvents API and that seems to have alleviated the crash.\nHowever I still can't get watching to work locally. Can others experiencing the problem check to see if it resolves anything for them?. @mengjiaqi does that actually fix watch mode now, or just avoid the crash? I guess I'd have to test on Ubuntu to be sure. I had a PR earlier where I fixed the crash via the same sort of faux-fsevents object, but watch still didn't actually work.. I think registering load hooks within the module system won't work around this issue anymore. All scripts now seem to be loaded through truffle-require, and this imports original-require which gets a handle on require prior to any code in truffle.js being executed.\nEnd result is any changes you make to the module loading system will no longer be reflected by scripts that truffle loads in.. ",
    "carchrae": "npm-watch is a lighter solution (especially if you are not using webpack) - it basically just a wrapper around nodemon (which is what should be used instead of fsevents as it is portable)\nadd these bits to your package.json\njson\n{\n  \"devDependencies\": {\n    \"truffle\": \"^3.4.9\",\n    \"npm-watch\": \"^0.2.0\"\n  },\n  \"scripts\": {\n    \"pretest\": \"truffle compile\",\n    \"test\": \"truffle test\",\n    \"watch\": \"npm-watch\"\n  },\n  \"watch\": {\n    \"test\": {\n      \"patterns\": [\n        \"contracts\",\n         \"migrations\",\n         \"test\"\n      ],\n      \"extensions\": \"js,json,sol\"\n    }\n  }\n}\nthen to start the watch npm run watch\nmore details on configuring npm-watch at https://github.com/M-Zuber/npm-watch. ",
    "pranoygn": "Facing the same problem in Ubuntu 16.04\n`truffle serve\nServing static assets in ./build on port 8080...\n/usr/local/lib/node_modules/truffle/build/cli.bundled.js:114396\n  return (new fsevents(path)).on('fsevent', callback).start();\n          ^\nTypeError: fsevents is not a constructor\n`. ",
    "stvenyin": "npm uninstall -g truffle\nnpm install -g truffle@3.2.1\ni'hava sloulation this probloem\nnice. try npm install -g truffle@3.2.1 --unsafe-perm\n. ",
    "sgehrman": "same problem. Truffle 4.0.1 on Ubuntu. ",
    "mengjiaqi": "same problem. Truffle 4.0.1 on MAC.\nand i've fixed it.\nclone the project locally with\nshell\ngit clone https://github.com/trufflesuite/truffle && cd truffle\necho 'module.exports = null ' > null.js\nand then edit the file cli.webpack.config.js on line 85\njavascript\n\"fsevents\": path.join(__dirname, \"./null.js\"),\nrun \nshell\nnpm run build\nnpm uninstall -g truffle\nnpm install -g truffle `pwd`\nthat's it!. @pospi It just avoid the crash.. ",
    "reedhong": "@mengjiaqi  NB\uff01. ",
    "dcb9": "$ truffle --version\nTruffle v4.0.1 - a development framework for Ethereum\n$ truffle serve\nServing static assets in ./build on port 8080...\n/usr/local/lib/node_modules/truffle/build/cli.bundled.js:219284\n  return (new fsevents(path)).on('fsevent', callback).start();\n          ^\nTypeError: fsevents is not a constructor\n    at createFSEventsInstance (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:219284:11)\n    at setFSEventsListener (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:219338:16)\n    at FSWatcher.FsEventsHandler._watchWithFsEvents (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:219502:16)\n    at FSWatcher. (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:219636:25)\n    at gotStat (fs.js:1783:21)\n    at FSReqWrap.oncomplete (fs.js:152:21)\nOS: MacOS 10.13.1 (17B48). ",
    "sing1ee": "@mengjiaqi meng cool. the same problem\n```shell\n\u2514\u2500[0] <> truffle serve\nServing static assets in ./build on port 8080...\n/usr/local/lib/node_modules/truffle/build/cli.bundled.js:220978\n  return (new fsevents(path)).on('fsevent', callback).start();\n          ^\nTypeError: fsevents is not a constructor\n    at createFSEventsInstance (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:220978:11)\n    at setFSEventsListener (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:221032:16)\n    at FSWatcher.FsEventsHandler._watchWithFsEvents (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:221196:16)\n    at FSWatcher. (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:221330:25)\n    at gotStat (fs.js:1810:21)\n    at FSReqWrap.oncomplete (fs.js:166:21)\n```. ",
    "oneclouds": "I also have the same problem on Ubuntu 16.04  when I try to executive the command of \"truffle serve\"\nTypeError: fsevents is not a constructor\n. ",
    "ShaleenThapa": "Have the same issue:\nPS C:\\ToDel> truffle serve\nServing static assets in .\\build on port 8080...\nC:\\Users\\testu\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:220548\n  return (new fsevents(path)).on('fsevent', callback).start();\n          ^\nTypeError: fsevents is not a constructor\n    at createFSEventsInstance (C:\\Users\\testu\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:220548:11)\n\n    at FSReqWrap.oncomplete (fs.js:152:21)\nPS C:\\ToDel> truffle version\nTruffle v4.0.5 (core: 4.0.5)\nSolidity v0.4.18 (solc-js)\nPS C:\\ToDel>\n. ",
    "sanshao": "Have the same issue:\nTruffle v4.0.6 (core: 4.0.6)\nSolidity v0.4.19 (solc-js)\nmac os 10.12.6. the same problem\nServing static assets in ./build on port 8080...\n/Users/sanshao/.nvm/versions/node/v8.9.3/lib/node_modules/truffle/build/cli.bundled.js:220978\n  return (new fsevents(path)).on('fsevent', callback).start();\n          ^\nTypeError: fsevents is not a constructor\n    at createFSEventsInstance (/Users/sanshao/.nvm/versions/node/v8.9.3/lib/node_modules/truffle/build/cli.bundled.js:220978:11)\n    at setFSEventsListener (/Users/sanshao/.nvm/versions/node/v8.9.3/lib/node_modules/truffle/build/cli.bundled.js:221032:16)\n    at FSWatcher.FsEventsHandler._watchWithFsEvents (/Users/sanshao/.nvm/versions/node/v8.9.3/lib/node_modules/truffle/build/cli.bundled.js:221196:16)\n    at FSWatcher. (/Users/sanshao/.nvm/versions/node/v8.9.3/lib/node_modules/truffle/build/cli.bundled.js:221330:25)\n    at gotStat (fs.js:1775:21)\n    at FSReqWrap.oncomplete (fs.js:152:21)\nOperating\nSystem: mac os 10.12.5\nTruffle version:4..0.4\nEthereum client: go-ethereum\nnode version : 8.9.3\nnpm version: 5.5.1. ",
    "lijiangongo": "npm uninstall -g truffle\nnpm install -g truffle@3.4.5\nmkdir truffle-webpack\ncd truffle-webpack\ntruffle init webpack\ntruffle compile\nnpm run dev \ndon't run  \"truffle serve\" , run \"npm run dev\"  instead of\ni'hava sloulation this probloem on Mac os 10.12.6\n. ",
    "jackz-jones": "Have the same problem : \nTruffle v4.0.6 (core: 4.0.6)\nSolidity v0.4.19 (solc-js)\nmac os 10.13.3. ",
    "GodwinAdam": "Have the same problem :\nTruffle v4.0.6 (core: 4.0.6)\nSolidity v0.4.19 (solc-js)\nmac os 10.12.3\nplease provide some solution. https://medium.com/etherereum-salon/eth-testing-472c2f73b4c3 follow these steps.. ",
    "dingymm": "npm uninstall -g truffle\nnpm install -g truffle@3.4.5\nmkdir truffle-webpack\ncd truffle-webpack\ntruffle init webpack\ntruffle compile\nnpm run dev\nubuntu is worked~. ",
    "xuyao91": "Truffle v4.1.5 (core: 4.1.5)\nSolidity v0.4.21 (solc-js)\nHave the same problem.. ",
    "craigbranscom": "Same issue here on macOS High Sierra\nTruffle v4.1.3 (core: 4.1.3)\nSolidity v0.4.19 (solc-js). ",
    "JimiPedros": "npm ERR! missing script: dev\n. ^ I'm having the same issue as @FabiolaBusch @Gandalf-Pl  @cmaliwal \n. ",
    "XiaoZhangJian": "Have the same problem:\n\u279c truffleTest truffle version\nTruffle v4.1.8 (core: 4.1.9)\nSolidity v0.4.24 (solc-js)\n\u279c  truffleTest  truffle serve\nServing static assets in ./build on port 8080...\n/usr/local/lib/node_modules/truffle/build/webpack:/~/chokidar/lib/fsevents-handler.js:26\n  return (new fsevents(path)).on('fsevent', callback).start();\n^\nTypeError: fsevents is not a constructor\n    at createFSEventsInstance (/usr/local/lib/node_modules/truffle/build/webpack:/~/chokidar/lib/fsevents-handler.js:26:1)\n    at setFSEventsListener (/usr/local/lib/node_modules/truffle/build/webpack:/~/chokidar/lib/fsevents-handler.js:80:1)\n    at FSWatcher.FsEventsHandler._watchWithFsEvents (/usr/local/lib/node_modules/truffle/build/webpack:/~/chokidar/lib/fsevents-handler.js:244:1)\n    at FSWatcher. (/usr/local/lib/node_modules/truffle/build/webpack:/~/chokidar/lib/fsevents-handler.js:378:1)\n    at gotStat (fs.js:1824:21)\n    at FSReqWrap.oncomplete (fs.js:170:21). ",
    "ConnorChristie": "I figured out a workaround without having to do anything extra fancy! The reason this isn't working as intended is due to this pesky resolverintercept which aims to bring caching to the contract lookup functionality. ...however, this is only implemented for local contracts.\nTo bypass this, you can call require on the original resolver which resides at artificats.resolver.require()\nExample:\nartifacts.resolver.require(\"../lib/colonyNetwork/contracts/Authority\", \"../lib/colonyNetwork/build/contracts/\");. ",
    "ferittuncer": "@ConnorChristie I get TypeError: Cannot read property 'require' of undefined for artifacts.resolver.require\nDoes it still work? If yes where can I find documentation of it?. There should be an option to disable compiling also. \nI needed to debug a flaky test situation so I wanted to run a test a hundred times to be sure. But compiling a hundred times is totally unnecessary and a waste of time. . Doesn't work on Ubuntu either. . Why {from: accounts[0]} doesn't work? . Oh, you mean Solidity testing. Yes it's not possible when testing with Solidity at the moment. I wrote my answer above thinking it's a JS test. . @CruzMolina Yeah, I figured out sendAsync doesn't exist anymore but there is send. We can close the issue.. ",
    "amankakar": "this code\n`const Contract = truffleContract(ReceptionsitFactory);\n    Contract.setProvider(web3.currentProvider);\n    const instanceFactory = await Contract.at(this.state.instanceFactory1);\nconst newReceptionist = await Contract.at(this.state.instanceFactory1);\n\nawait newReceptionist.createReceptionist(\n  this.state.hospitalName,\n  this.state.receptionistName,\n  {\n    from: this.state.accounts\n  }\n);\n\ngives me this error TypeError: address.replace is not a function. No i have solved it.thanks!\n. thank you for your reply ... i have solved error.\nbelow line of code caused errorfrom: this.state.accounts.because it try to replace account.\ni changed it toaccounts[0]. which solve error\nthank you @eggplantzzz \n. thank you yes closed\n. solved . @princesinha19  i have made mistake in web3 providers. when i change web3 provider tolocalhost:8545`\nthen its work fine.. @eggplantzzz  thanks . i will upgrade to new version. ",
    "gokulkrishna01": "@abel1337, maybe you can try following these steps which apparently fixed my problem:\ngit clone https://github.com/ethereumjs/testrpc.git\ncd testrpc\nsudo npm install .\nSource: https://ethereum.stackexchange.com/questions/16848/unknown-error-while-installing-testrpc-in-ubuntu. @abel1337 It seems you still have the git issue! Maybe you can contact the main guys! . ",
    "MichaelBlockchain": "Thanks for the reply! Ok so when I do that and get to the last step, I get this error:\nnpm WARN deprecated jade@0.26.3: Jade has been renamed to pug, please install the latest version of pug instead of jade\nnpm WARN deprecated minimatch@0.2.14: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\nnpm WARN deprecated graceful-fs@2.0.3: graceful-fs v3.0.0 and before will fail on node releases >= v7.0. Please update to graceful-fs@^4.0.0 as soon as possible. Use 'npm ls graceful-fs' to find it in the tree.\nnpm ERR! code 1\nnpm ERR! Command failed: /usr/bin/git clone --depth=1 -q -b master https://github.com/debris/bignumber.js.git /home/fappycow/.npm/_cacache/tmp/git-clone-16fb1adc\nnpm ERR! /home/fappycow/.npm/_cacache/tmp/git-clone-16fb1adc/.git: Permission denied\nnpm ERR!\n. Fixed!. ",
    "lucas7788": "@abel1337  how to solve your problem,I come across the same problem. ",
    "gslnzfq": "please run sudo npm install webcrypto-shim -g before execute sudo npm install -g truffle, it will help you.\n. ",
    "wparad": "May be a stupid question, but is git available on your path?. ",
    "milkydev": "macOS 10.12.5 \n\u276f npm -g install truffle\nnpm WARN deprecated graceful-fs@1.2.3: graceful-fs v3.0.0 and before will fail on node releases >= v7.0. Please update to graceful-fs@^4.0.0 as soon as possible. Use 'npm ls graceful-fs' to find it in the tree.\nnpm WARN deprecated minimatch@2.0.10: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\nnpm WARN deprecated minimatch@0.2.14: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\nnpm ERR! exited with error code: 128. ",
    "adonley": "This is definitely: https://github.com/ethereum/web3.js/issues/904 , though the web3.js dep in this and other truffle repositories needs to be updated to 0.19.1 .. Can confirm I'm having this issue on OS X as well:\n4145 silly fetchPackageMetaData error for bignumber.js@git+https://github.com/debris/bignumber.js.git#94d7146671b9719e00a09c29b01a691bc85048c2 exited with error code: 128\n4146 verbose stack Error: exited with error code: 128\n4146 verbose stack     at ChildProcess.onexit (/usr/local/lib/node_modules/npm/node_modules/mississippi/node_modules/end-of-stream/index.js:39:36)\n4146 verbose stack     at emitTwo (events.js:125:13)\n4146 verbose stack     at ChildProcess.emit (events.js:213:7)\n4146 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:197:12)\n4147 verbose cwd /Users/andrew/Programs/kingsleykoin\n4148 verbose Darwin 16.6.0\n4149 verbose argv \"/usr/local/bin/node\" \"/usr/local/bin/npm\" \"install\"\n4150 verbose node v8.1.0\n4151 verbose npm  v5.0.3\n4152 error exited with error code: 128\n4153 verbose exit [ 1, true ]. ",
    "EdmundMai": "```\n\u279c  src npm install -g truffle\nnpm WARN deprecated graceful-fs@1.2.3: graceful-fs v3.0.0 and before will fail on node releases >= v7.0. Please update\nto graceful-fs@^4.0.0 as soon as possible. Use 'npm ls graceful-fs' to find it in the tree.\nnpm WARN deprecated minimatch@2.0.10: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\nnpm WARN deprecated minimatch@0.2.14: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\nnpm ERR! exited with error code: 128\n``. fixed it temporarily with:npm install -g truffle@beta`. ",
    "sagarjethi": "i am also getting the same error. ",
    "amiturgman": "@EdmundMai  any similar idea to install testrpc?. ",
    "nivertech": "@amiturgman \nbash\nnpm install -g ethereumjs-testrpc@beta. ",
    "acrylix": "how about https://github.com/trufflesuite/truffle-contract ? also fails to install, due to bignumber.js... any temp fixes for that?. experiencing similar issue with bignumber.js\ncan we please have https://github.com/debris/bignumber.js.git back up? or use another dependency? seems like this repo is either changed to private or completely removed, which causes many things like testrpc and truffle-contract to fail to install . ",
    "muzamil1789": "when I am running this \"npm install --save-dev\" command its not working completely...\nas its stopping at some level like..\n[     .............] / fetchMetadata: sill resolveWithNewModule socket.io@1.7.3 checking installable status\n. ",
    "akravin": "There's a compiler optimization in solc/truffle-compile that in this moment etherscan does not support when compiling contracts.\nhttps://github.com/trufflesuite/truffle-compile/blob/331809c73389f27f9dda40229061bb75b18f27ca/index.js#L70. @interfect, As workaround you can revert runs parameter to its default value 200 in truffle-compile/index.js file. Etherscan has been informed about this issue but I don't know how fast they'll add supporting the \"runs\" parameter. @mtbitcoin, Remix online compiler doesn't have this parameter, but most developers use truffle to deploy their contracts. So the problem is urgent. @mtbitcoin I propose to add \"runs\" parameter on your verify page in order to eliminate problems with contract verification that were compiled another way rather than Remix or Mist. I think all compiler's options must be supported to verify contract's source code by Etherscan, because developers may change them anytime. In order to support \"runs\"  parameter you may use solcjs and standard input json. \nFor example, standard input json may be wrote as below:\n\n{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"MyContract\": {\n      \"content\": \"pragma solidity ^0.4.11; contract Ownable {address public owner; function Ownable() { owner = msg.sender; } modifier onlyOwner { if (msg.sender != owner) throw; _;} function transferOwnership(address newOwner) onlyOwner { if (newOwner != address(0)) { owner = newOwner; }}}\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 0\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"MyContract\": [\n          \"evm.bytecode.object\"\n        ]\n      }\n    }\n  }\n}\n\nIn this file replace \"runs\" parameter on user input. After that run solcjs as following:\n\n$ solcjs --standard-json < input.json\n\nOutput of this command is output JSON (http://solidity.readthedocs.io/en/develop/using-the-compiler.html) which contains \"evm.bytecode.object\" tag. You just need to compare it with bytecode in the Ethereum transaction.\nPS: Solidity compiler \"solc\" has separate option \"--optimize-runs\" for changing this value. @mtbitcoin As I know in truffle \"runs\" parameter is hardcoded and its default value equals 0 (zero). @mtbitcoin, I agree with @interfect. Our company have already several contracts deployed with \"runs=0\" and they can't be verified by Etherscan and I can't replace them too as they are already in production. We hope you provide the implementation of this feature asap because we are loosing potential customers every day. I have already wrote the bug report 22 jun to the support service, but at present time I had no information about plans of implementation. Is there a workaround in our case?. @mtbitcoin, of course, I understand and I am very appreciate to hear that you are working on this issue. Here is my email: krsasha2004@gmail.com. I'm looking forward to testing it. Thank you!. @mtbitcoin, thanks for this feature. At last, I was able to verify my deployed contracts. Thank you again!. ",
    "mtbitcoin": "does browser solidity have a similiar option for the \"runs\" parameter?. @akravin If remix doesn't support this then how do you propose we (Etherscan) fix this problem? Can truffle be configured to be compile without the \"run\" parameter ?. @akravin Thanks for the info. Looking into this, but it will require a rewrite for our backend code handling the source code verification\nEdit: Also \"--standard-json < input.json\" appears to work only with version 0.4.11 and above. . From what i understand, solcjs has a \"runs\" value of 200, so if you can truffle to also \"runs\" at \"200\" instead of \"0\" this will produce the same code (see https://stackoverflow.com/questions/44704420/truffle-deployed-contracts-cant-be-verified-through-etherscan). @akravin I am working on this. Please understand that we are a small team, providing a free service and are doing our best to accommodate the various requests and tickets we receive on a daily basis.\nThe new verifier will accept the runs parameter but only for contracts compiled with >= 0.4.11 (given all the know solidity compiler bugs, contracts should really only be compiled with the latest versions anyhow). If you can drop me your email or contact i will ping you once this is done you can be the first to test this. . @yarrumretep yup, will post here instead once its completed. . @yarrumretep @akravin The new verifier is available at https://etherscan.io/verifyContract2\nThis will only work with solc 0.4.11 and above. This new verifier provides additional information for debugging. Please let me know if this works\nUnder the optional settings section, there is place where you can enter a custom runs value. Older versions of truffle defaulted to 0. Browser solidity uses 200. @yarrumretep https://kovan.etherscan.io/verifyContract2. @yarrumretep can you provide the contractaddress, sourcecode gist, optimization setting and I will see if I can replicate the issue. @yarrumretep please give it another try. Yes, but only when we have the time to look into that. @murich https://github.com/BlockCatIO/solidity-flattener. it seems that with solc version 0.4.18 and above the Bytecodes dont get outputted anymore, anyone else running into a similar issues?. The changed swarm hash should not affect the contract source code verification on our end (Etherscan) in (most cases). Would be good to put a list of flatenners that work. I know the blockcat one does. \nWe can then put together a formal list which would be helpful . For reference the API endpoint for the source code verification is available at https://etherscan.io/apis#contracts. We\u2019ve been running that api endpoint for quite a while. It is stable and should have 100% compatibility with the manual source verification on Etherscan (minus the error messages and some input checking). It does however require an api-key which can be generated for free on Etherscan.io\nPing if you have questions. @JohannesMayerConda if the flattened code compiles in Remix it should also work with ours. ",
    "yarrumretep": "Hi @mtbitcoin, could you please ping this thread once you have a fix for this deployed?  I'd be happy to help test as well - just let me know.. @mtbitcoin - i'm currently running on kovan - the kovan.etherscan.io does not appear to have the verifyContract2 available yet.  Happy to test there when it is.\n. Hi @mtbitcoin - sorry for the delay in testing this - been traveling.  Back at the screen now.\nI am getting an \"Opps - that's an error\" page when I try to use the https://kovan.etherscan.io/verifyContract2\nThis seems to happen for Runs=0 and Runs=200.  I'm using the 0.4.11 compiler.. @mtbitcoin - here are some repro data:\n\nhttps://gist.github.com/yarrumretep/cb3bcc0d59e734e68ed2834ba7fc5e31\nAddress: 0xc84177ad471cf4f9cddeae58be71121af989916b\nContract Name: TestToken\nCompiler: 0.4.11-commit.68ef5810\nOptimization: Enabled\nRuns: 0\nConstructor Args: \nno libraries\n\nWhen I click Verify and Publish I immediately get the \"Opps - that's an error\" page.\nNOTE: when I perform the same steps on the original .../verifyContract page, The compilation happens, with the expected message: \"Sorry! The Compiled Contract ByteCode for 'TestToken' does NOT match the Contract Creation Code for [0xc84177ad471cf4f9cddeae58be71121af989916b].\"\nBTW - happy to take this offline if there's a better forum for this. Yeee haw!  Now we're cookin' with gas.  Thank you, @mtbitcoin \nSay, Matt - do you guys have plans for validation of contract source by REST api?. ",
    "danastos": "So how do I change the Runs value in truffle? I am having the same issue where truffle and solidity browser are giving different bytecodes. ",
    "negedzuregal": "@mtbitcoin any updates? I just get different ABI code from truffle and Remix on the same exact solidity code... I've tried both running with/ without optimization and with 200 and 0 runs.... ",
    "murich": "Is there a tool to automatically concatenate the contract?. ",
    "schampilomatis": "I am having the same issue as @mtbitcoin, No outputed bytocode in etherscan verifyContract2.. @mtbitcoin it works now, I managed to verify it with optimization disabled, runs 200 solc 0.4.18. @nickjuntilla I had the same but the problem was that the settings were not correct, try with optimization disabled, runs 200. I found this setting in /build/cli.bundled.js . Search for \"runs:\" and you'll see it. Maybe there is a better way to find it but that's what worked for me.. @nickjuntilla https://github.com/nickjuntilla I meant the truffle\ninstallation folder (usually /usr/lib/node_modules) not your project\nfolder. Type which truffle to see which one you are using. If you get\n/usr/bin/truffle , the cli.bundled.js will be in\n/usr/lib/node_modules/truffle/build.\nDoes leaving in the comments or white space change any byte code?\nNo it doesn't\nDoes changing the solidity code version in the file change the byte code?\nNot sure, but probably not. It refers to the solidity version used, not the\ncompiler version.\nIf I concatenate files do I still have to add the reference files that were\ndeployed via truffle as libraries?\nYes, also you should add the addresses in the libraries section, but\netherscan will ask for it\nOn Sat, Dec 2, 2017 at 10:29 PM, Nicholas Juntilla <notifications@github.com\n\nwrote:\n@schampilomatis https://github.com/schampilomatis I don't have a\ncli.bundled.js. I'm using truffle 3.4.11. In the build folder all I have\nare the contract abi .json files. Is there somewhere else this can be? I've\ntried optimization disabled, enabled, and runs of 200 and 0 and every\ncombination thereof. I've stopped short of trying every optimization level\nbetween 1 and 200. I already have contracts out that people are using and\nnow I want to verify them on etherscan. I still have the source code and\nI've tried concatenating and using both version of the etherscan verify\ntool as many compilation versions.\nI have some questions for anyone:\nDoes leaving in the comments or white space change any byte code?\nDoes changing the solidity code version in the file change the byte code?\nIf I concatenate files do I still have to add the reference files that\nwere deployed via truffle as libraries?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/456#issuecomment-348721511,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGmbfg-4pGY9AmNEACovaBY21KILgHofks5s8cFCgaJpZM4OCnr1\n.\n. \n",
    "medvedev1088": "@nickjuntilla \n\nDoes leaving in the comments or white space change any byte code?\nNo it doesn't\n\nDo you know if changing comments will change the hash of the source code file -> it will change the metadata file http://solidity.readthedocs.io/en/develop/metadata.html -> it will change metadata file hash -> it will change the swarm hash appended to the bytecode by Solidity compiler.\nWill the contract still verify after that?. ",
    "dylanseago": "Issue is with an ethereum/web3 dependency, see https://github.com/ethereum/web3.js/issues/904. I was able to get mine installed locally.\nHere are the changes I made to fix all the broken dependencies, in the order they need to be applied:\n- https://github.com/ethereumjs/testrpc/pull/334\n- https://github.com/raineorshine/solidity-sha3/pull/6\n- https://github.com/trufflesuite/truffle-blockchain-utils/pull/4\n- https://github.com/trufflesuite/truffle-provider/pull/3\n- https://github.com/trufflesuite/truffle-contract/pull/32\n- https://github.com/trufflesuite/truffle-artifactor/pull/53\n- https://github.com/trufflesuite/ethpm-registry/pull/2\n- https://github.com/trufflesuite/truffle-config/pull/3\n- https://github.com/trufflesuite/truffle-init/pull/6\n- https://github.com/trufflesuite/truffle-deployer/pull/3\n- https://github.com/trufflesuite/truffle-require/pull/5\n- https://github.com/trufflesuite/truffle-migrate/pull/2\n- https://github.com/trufflesuite/truffle-compile/pull/12\nI used npm link to hook up the dependency fixes locally and was able to successfully install the patched version of truffle 3.2.5 from https://github.com/trufflesuite/truffle/pull/460. But I ran into a bug in npm (https://github.com/npm/npm/issues/10343) which blocked me from fully testing the fix.. Related: https://github.com/trufflesuite/truffle-migrate/issues/15. ",
    "Niknakflak": "oh ok, closing this then as it is not a truffle issue.. ",
    "kahwooi": "I am having the same problem. Prompted with GitHub login, and https://github.com/debris/bignumber.js cannot be found.. @beaini yes, I am using truffle@beta. ",
    "beaini": "As a workaround, move to beta:\nnpm install -g truffle@beta. ",
    "tsouza": "I can install with npm install -g truffle@beta but yet truffle init webpack fails with same issue. ",
    "porfavorite": "The same problem here. Installed truffle@beta, didn't help. testrpc doesn't install as well, but testrpc@beta worked well. How long do we need to wait for the fix?. ",
    "zzzmanzzz": "you can try sudo npm install -g truffle@beta\nit works for me on ubuntu 16.04LTS. ",
    "mik1893": "it does install truffle but still when running \ntruffle init webpack\nyou get the errors back. ",
    "mkno": "it just stays like this forever: \nDownloading project...\nInstalling dependencies...\nbut there's bunch of files and folders generated.. ",
    "Janther": "I'm experiencing the same issue in all networks, even testrpc. . ",
    "richbodo": "I see the same on osx 10.12.5 and ubuntu 16.04.2\n```\n$ truffle serve\nServing static assets in ./build on port 8080...\n/usr/local/lib/node_modules/truffle/build/cli.bundled.js:123830\n  return (new fsevents(path)).on('fsevent', callback).start();\n          ^\nTypeError: fsevents is not a constructor\n    at createFSEventsInstance (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:123830:11)\n    at setFSEventsListener (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:123884:16)\n    at FSWatcher.FsEventsHandler._watchWithFsEvents (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:124048:16)\n    at FSWatcher. (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:124182:25)\n    at LOOP (fs.js:1615:14)\n    at _combinedTickCallback (internal/process/next_tick.js:67:7)\n    at process._tickCallback (internal/process/next_tick.js:98:9)\n```\nAnd fsevents is installed:\n```\nnpm i fsevents\n\nfsevents@1.1.2 install /Users/rsb/src/mozilla/truftest/node_modules/fsevents\nnode install\n\n[fsevents] Success: \"/Users/rsb/src/mozilla/truftest/node_modules/fsevents/lib/binding/Release/node-v51-darwin-x64/fse.node\" is installed via remote\ntruffle-init-webpack@0.0.1 /Users/rsb/src/mozilla/truftest\n\u2514\u2500\u252c babel-cli@6.24.1\n  \u2514\u2500\u252c chokidar@1.7.0\n    \u2514\u2500\u2500 fsevents@1.1.2 \n```\nnode version:\n$ node --version\nv7.2.0\n. ",
    "ArneZsng": "From #448: Workaround would be to run npm run dev instead of truffle serve. Works for me on macOS 10.12.6.. ",
    "samuelmantou": "Same here:\nOperating System: Mac OS 10.12.5\nTruffle version: 3.3.1\nEthereum client: testrpc\nnode version:8.1.3\nnpm version: 5.0.3\nServing static assets in ./build on port 8080...\n/usr/local/lib/node_modules/truffle/build/cli.bundled.js:123804\n  return (new fsevents(path)).on('fsevent', callback).start();\n          ^\nTypeError: fsevents is not a constructor\n    at createFSEventsInstance (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:123804:11)\n    at setFSEventsListener (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:123858:16)\n    at FSWatcher.FsEventsHandler._watchWithFsEvents (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:124022:16)\n    at FSWatcher. (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:124156:25)\n    at gotStat (fs.js:1785:21)\n    at FSReqWrap.oncomplete (fs.js:152:21). @BuiltwithCaffeine  solve it,  try this: truffle init webpack. ",
    "BuiltwithCaffeine": "Same here. Any fix or workaround for this?\nI tried npm run dev but there is a  package.json missing. . @samuelmantou much thanks, this worked.. ",
    "BinGoBinBin": "@samuelmantou thanks a lot.It's work.. ",
    "allan2327": "@BuiltwithCaffeine Thank you worked for me... ",
    "ChocoMachine": "Same on windows (10):\ntruffle build failed too, so I used truffle compile, I don't know what the difference is as I'm still learning. \n$ truffle serve\nServing static assets in .\\build on port 8080...\nC:\\Users\\David\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:124978\n  return (new fsevents(path)).on('fsevent', callback).start();\n          ^\nTypeError: fsevents is not a constructor\n    at createFSEventsInstance (C:\\Users\\David\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:124978:11)\n    at setFSEventsListener (C:\\Users\\David\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:125032:16)\n    at FSWatcher.FsEventsHandler._watchWithFsEvents (C:\\Users\\David\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:125196:16)\n    at FSWatcher. (C:\\Users\\David\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:125330:25)\n    at LOOP (fs.js:1755:14)\n    at _combinedTickCallback (internal/process/next_tick.js:95:7)\n    at process._tickCallback (internal/process/next_tick.js:161:9)\n. ",
    "jakekdodd": "@tcoulter maybe change the title of #448 for those of us who run into this problem? It's clearly not limited to non-mac platforms. ",
    "ethereal-sandeep": "@samuelmantou for me this worked : truffle unbox webpack. ",
    "cmaliwal": "truffle init webpack\nError: truffle init no longer accepts a project template name as an argument.\n\nFor an empty project, use truffle init with no arguments\nOr, browse the Truffle Boxes at http://truffleframework.com/boxes!\n. This issue is resolved.\nNeed to use truffle unbox webpack instead of truffle init webpack.\n\n@Gandalf-Pl @FabiolaBusch @JimiPedros . Disable the FsEvents when not used:\n```\nC:\\Users\\ediso\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js\n// if (!FsEventsHandler.canUse())\nopts.useFsEvents = false;\n```\nSteps:\ntruffle compile && truffle build && truffle migrate  && truffle serve. ",
    "Gandalf-Pl": "truffle init webpack\nError: truffle init no longer accepts a project template name as an argument.\n\nFor an empty project, use truffle init with no arguments\nOr, browse the Truffle Boxes at http://truffleframework.com/boxes!. \n",
    "FabiolaBusch": "truffle init webpack\nError: truffle init no longer accepts a project template name as an argument.\n\nFor an empty project, use truffle init with no arguments\nOr, browse the Truffle Boxes at http://truffleframework.com/boxes!\n. My code:\n\n`contract Listing {\naddress public creator;\nuint public id;\nbytes32 public title;\n\n\nfunction Listing(address _creator, uint _id, bytes32 _title) public {\n    creator = _creator;\n    id = _id;\n    title = _title;\n}\n\n}`\nSame here, truffle version Truffle v4.1.5 (core: 4.1.5).\nAnd the output with truffle migrate:\nError: Listing contract constructor expected 3 arguments, received 0\n    at /usr/local/lib/node_modules/truffle/build/webpack:/home/truffle-contract/contract.js:390:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/home/truffle-contract/contract.js:374:1\n    at process._tickCallback (internal/process/next_tick.js:103:7)\n. @cgewecke Thanks a lot, that helped me!. ",
    "Edison4mobile": "@cmaliwal  It's not working.\ntruffle unbox webpack\nthis occurs below error.\nCompilation warnings encountered:\n/F/ETHERIUM/my-money/contracts/MetaCoin.sol:15:2: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n        function MetaCoin() public {\n ^ (Relevant source part starts here and spans across multiple lines).\n,/F/ETHERIUM/my-money/contracts/Migrations.sol:11:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n  function Migrations() public {\n  ^ (Relevant source part starts here and spans across multiple lines).\n,/F/ETHERIUM/my-money/contracts/MetaCoin.sol:23:3: Warning: Invoking events without \"emit\" prefix is deprecated.\n                Transfer(msg.sender, receiver, amount);\n                ^------------------------------------^\nWriting artifacts to .\\build\\contracts\nCould not connect to your Ethereum client. Please check that your Ethereum client:\n    - is running\n    - is accepting RPC connections (i.e., \"--rpc\" option is used in geth)\n    - is accessible over the network\n    - is properly configured in your Truffle configuration file (truffle.js)\nF:\\ETHERIUM\\my-money>truffle.cmd serve\nServing static assets in .\\build on port 8080...\nTypeError: fsevents is not a constructor\n    at createFSEventsInstance (C:\\Users\\ediso\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\chokidar\\lib\\fsevents-handler.js:26:1)\n    at setFSEventsListener (C:\\Users\\ediso\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\chokidar\\lib\\fsevents-handler.js:80:1)\n    at FSWatcher.FsEventsHandler._watchWithFsEvents (C:\\Users\\ediso\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\chokidar\\lib\\fsevents-handler.js:244:1)\n    at FSWatcher. (C:\\Users\\ediso\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\chokidar\\lib\\fsevents-handler.js:378:1)\n    at LOOP (fs.js:1773:14)\n    at _combinedTickCallback (internal/process/next_tick.js:73:7)\n    at process._tickCallback (internal/process/next_tick.js:104:9). ",
    "roma-glushko": "The same issue for running truffle serve installed on level of project (not globally):\nDocker\n\nBased on Image: \nnode:8.0.0-alpine\nTruffle Version: \nTruffle v4.1.13 (core: 4.1.13)\nSolidity v0.4.24 (solc-js)\n\nOS X\n\nSystem Version: \nHigh Sierra 10.13.3 (17D47)\nNode Versions: \nv8.11.3\nTruffle Version: \nTruffle v4.1.13 (core: 4.1.13)\nSolidity v0.4.24 (solc-js)\n\nAlso, I could not manage to use webpack box running truffle unbox webpack I get (on mentioned docker env):\nDownloading...\nUnpacking...\nSetting up...\nError: stdout maxBuffer exceeded\nat Socket.onChildStdout (child_process.js:328:14)\nat emitOne (events.js:116:13)\nat Socket.emit (events.js:211:7)\nat addChunk (_stream_readable.js:263:12)\nat readableAddChunk (_stream_readable.js:246:13)\nat Socket.Readable.push (_stream_readable.js:208:10)\nat Pipe.onread (net.js:597:20)\nIssue has been already spotted for other box: \nhttps://github.com/truffle-box/react-box/issues/56\n@tcoulter can you please address this? . ",
    "SalmanCse": "same problem not solve...........\ntruffle serveServing static assets in ./build on port 8080...\n/usr/local/lib/node_modules/truffle/build/webpack:/~/chokidar/lib/fsevents-handler.js:26\n  return (new fsevents(path)).on('fsevent', callback).start();\n^\nTypeError: fsevents is not a constructor\n    at createFSEventsInstance (/usr/local/lib/node_modules/truffle/build/webpack:/~/chokidar/lib/fsevents-handler.js:26:1)\n    at setFSEventsListener (/usr/local/lib/node_modules/truffle/build/webpack:/~/chokidar/lib/fsevents-handler.js:80:1)\n    at FSWatcher.FsEventsHandler._watchWithFsEvents (/usr/local/lib/node_modules/truffle/build/webpack:/~/chokidar/lib/fsevents-handler.js:244:1)\n    at FSWatcher. (/usr/local/lib/node_modules/truffle/build/webpack:/~/chokidar/lib/fsevents-handler.js:378:1)\n    at gotStat (fs.js:1783:21)\n    at FSReqWrap.oncomplete (fs.js:152:21). truffle unboxwebpack\nDownloading...\nError: Something already exists at the destination. truffle init and truffle unbox must be executed in an empty folder. Stopping to prevent overwriting data.\n    at /usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-box/lib/utils/unbox.js:22:1\n    at \n    at process._tickCallback (internal/process/next_tick.js:188:7)\n    at Function.Module.runMain (module.js:695:11)\n    at startup (bootstrap_node.js:188:16)\n    at bootstrap_node.js:609:3. can not solve this issue,,pls details jiangcare..... ",
    "jdkanani": "Same happens in external script \"truffle exec\"! . We are using following code to decode logs:\n```js\n// File: helpers/log-decoder.js \nimport ethers from 'ethers'\nexport default class LogDecoder {\n  constructor(abis = []) {\n    this._methodIDs = {}\n    abis.forEach(abi => {\n      const methodInterface = new ethers.Interface(abi)\n      Object.keys(methodInterface.events).forEach(evtKey => {\n        const evt = methodInterface.events[evtKey]\n        const signature = evt.topics[0]\n        // Handles different indexed arguments with same signature from different contracts \n        // Like ERC721/ERC20 Transfer\n        this._methodIDs[signature] = this._methodIDs[signature] || []\n        this._methodIDs[signature].push(evt)\n      })\n    })\n  }\ndecodeLogs(logs) {\n    return logs.map(log => {\n      const evts = this._methodIDs[log.topics[0]]\n      for (let index = 0; index < evts.length; index++) {\n        const evt = evts[index]\n        try {\n          return {\n            address: log.address.toLowerCase(),\n            event: evt.name,\n            signature: evt.signature,\n            args: evt.parse(log.topics, log.data)\n          }\n        } catch (e) {}\n      }\n  throw new Error(\"Log doesn't match\")\n})\n\n}\n}\n```\nUsage:\njs\nconst decoder = new LogDecoder(abis)\nconst result = decoder.decodeLogs(receipt.logs)\n// result will be the decoded log array. ",
    "luando": "I have same error with command \"truffle exec\". ",
    "holoverse": "Solved:  Just incase anyone has this same issue.  It was the fact that its trying to run truffle.js in that directory, instead of actually running truffle.cmd.\nSo you need to find your truffle.cmd file, and rename it to something else.  Like truf.cmd\nI found mine in \n\\Users\\AppData\\Roaming\\npm\\truffle.cmd\nNow you can do \ntruf init\ntruf compile\ntruf migrate\netc\n. ",
    "metenev": "@holoverse You can also run like this:\ntruffle.cmd compile. ",
    "JustinDrake": "I found the options at http://truffleframework.com/docs/advanced/commands. I see there's the --compile-all option. I wonder why the default contracts generated by truffle init get recompiled every time.\n--compile-all: Compile all contracts instead of intelligently choosing.. Thanks @elenadimitrova. I've submitted a PR for the docs. Do you know how to test for gas usage from a Solidity test contract (as opposed to a JS test)?. I also came across the estimateGas function of a contract function (alonside call, sendTransaction and request). I can't see where that is documented.. ",
    "jellegerbrandy": "I have the same problem:\n```\njelle@:~/projects \u2605 truffle version\nTruffle v3.3.0, bundle version: 3.3.1\nSolidity v0.4.11 (solc-js)\njelle@:~/projects/daostack/play \u2605 mkdir play\njelle@:~/projects/daostack/play \u2605 cd play\njelle@:~/projects/daostack/play \u2605 truffle init\nDownloading project...\nProject initialized.\nDocumentation: http://truffleframework.com/docs\nCommands:\nCompile: truffle compile\n  Migrate: truffle migrate\n  Test:    truffle test\njelle@:~/projects/play \u2605 truffle compile\nCompiling ./contracts/ConvertLib.sol...\nCompiling ./contracts/MetaCoin.sol...\nCompiling ./contracts/Migrations.sol...\nWriting artifacts to ./build/contracts\njelle@:~/projects/play \u2605 truffle test\nUsing network 'development'.\nCompiling ./contracts/ConvertLib.sol...\nCompiling ./contracts/MetaCoin.sol...\nCompiling ./test/TestMetacoin.sol...\nCompiling truffle/Assert.sol...\nCompiling truffle/DeployedAddresses.sol...\nTestMetacoin\n    \u2713 testInitialBalanceUsingDeployedContract (44ms)\n    \u2713 testInitialBalanceWithNewMetaCoin (38ms)\nContract: MetaCoin\n    \u2713 should put 10000 MetaCoin in the first account\n    \u2713 should call a function that depends on a linked library (64ms)\n    \u2713 should send coin correctly (120ms)\n5 passing (594ms)\njelle@:~/projects/play \u2605 truffle test\nUsing network 'development'.\nCompiling ./contracts/ConvertLib.sol...\nCompiling ./contracts/MetaCoin.sol...\nCompiling ./test/TestMetacoin.sol...\nCompiling truffle/Assert.sol...\nCompiling truffle/DeployedAddresses.sol...\nTestMetacoin\n    \u2713 testInitialBalanceUsingDeployedContract\n    \u2713 testInitialBalanceWithNewMetaCoin\nContract: MetaCoin\n    \u2713 should put 10000 MetaCoin in the first account\n    \u2713 should call a function that depends on a linked library (59ms)\n    \u2713 should send coin correctly (120ms)\n5 passing (572ms)\n``. i resolved this for my case: apparently,  the problem was due to outdatedsolcorsolc-cli` packages. . ",
    "dstreppa": "Not the solution for you, but maybe the following command can be helpful: \n\n$ truffle test test/TestScrooge.sol \n\nOnly TestScrooge.sol and its imported contracts will be compiled by Truffle, and only the tests in TestScrooge.sol will be executed.. +1. ",
    "dkent600": "You could also try running truffle compile separately before running truffle test.  Has worked for me.. ",
    "PaulLaux": "Had the same problem, fixed by compiling in advance for the same network that is used for the tests:\nfirst: \ntruffle.cmd compile --network testrpc\nthen:\ntruffle.cmd test --network testrpc test\\bigTest.test.js. ",
    "robertmagier": "I have exactly same problem. Would be nice if one can avoid compilation every time test is executed. . I had similar issue sometime ago and I was able to fix it adding two parameters to my network configuration. \nconfirmations: 2, // # of confs to wait between deployments. (default: 0)\n      skipDryRun: true. Having similar problem in all versions: 5.0.0 5.0.1 5.0.2 5.0.3 5.0.4 and 5.0.5\ntruffle version\nTruffle v5.0.5 (core: 5.0.5)\nSolidity v0.5.0 (solc-js)\nNode v11.10.0\nIn 5.0.0 I get message\nTypeError: Cannot destructure propertysourceof 'undefined' or 'null'.\nIn 5.0.5 it is:\n```\nTypeError: Cannot read property 'id' of undefined\n    at newScope.variables.concat.filter.variable (C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-debugger\\dist\\debugger.js:1738:1)\n    at Array.filter ()\n    at map (C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-debugger\\dist\\debugger.js:1735:1)\n    at Array.map ()\n    at data.info.scopes. (C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-debugger\\dist\\debugger.js:1720:125)\n    at C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\reselect\\lib\\index.js:76:1\n    at C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\reselect\\lib\\index.js:36:1\n    at C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\reselect\\lib\\index.js:90:1\n    at Function. (C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\reselect\\lib\\index.js:36:1)\n    at args (C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\reselect-tree\\index.js:209:1)\n    at C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\reselect\\lib\\index.js:86:1\n    at Function._ (C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\reselect\\lib\\index.js:36:1)\n    at args (C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\reselect-tree\\index.js:209:1)\n    at C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\reselect\\lib\\index.js:86:1\n    at C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\reselect\\lib\\index.js:36:1\n    at runSelectEffect (C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\@redux-saga\\core\\dist\\redux-saga-core.esm.js:723:1)\n    at runEffect (C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\@redux-saga\\core\\dist\\redux-saga-core.esm.js:1191:1)\n    at digestEffect (C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\@redux-saga\\core\\dist\\redux-saga-core.esm.js:1258:1)\n    at next (C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\@redux-saga\\core\\dist\\redux-saga-core.esm.js:1148:1)\n    at currCb (C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\@redux-saga\\core\\dist\\redux-saga-core.esm.js:1238:1)\n    at checkEnd (C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\@redux-saga\\core\\dist\\chunk-585b854f.js:154:1)\n    at chCbAtKey (C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\@redux-saga\\core\\dist\\chunk-585b854f.js:170:1)\n    at Object.currCb [as cont] (C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\@redux-saga\\core\\dist\\redux-saga-core.esm.js:1238:1)\n    at end (C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\@redux-saga\\core\\dist\\redux-saga-core.esm.js:1001:1)\n    at Object.task.cont (C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\@redux-saga\\core\\dist\\redux-saga-core.esm.js:829:1)\n    at next (C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\@redux-saga\\core\\dist\\redux-saga-core.esm.js:1157:1)\n    at Object.currCb [as cont] (C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\@redux-saga\\core\\dist\\redux-saga-core.esm.js:1238:1)\n    at end (C:\\Users\\wild\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\@redux-saga\\core\\dist\\redux-saga-core.esm.js:1001:1)\nThe above error occurred in task session.saga\nTasks cancelled due to error:\ncontroller.saga\ndata.saga\nevm.saga\nsolidity.saga\ntrace.saga\nweb3.saga\n```\nI am using -- openzeppelin-solidity@2.1.3 to import Ownable.sol and ERC20 and ERC771 Tokens. \nDon't know if this is important. Let me know if you need my repository. . ",
    "AC0DEM0NK3Y": "Adding to this, with v4 I was able to work around this with these steps:\ntruffle compile --network test --all\ntruffle test --network test\nWith v5 if you compile first as above, the test runs/hangs indefinitely with no output. I have to wipe the build folder to get back into a working state and then have truffle test do the compilation every time.. Note: if you switch to solc 0.5.3 the above doesn't hang but instead does try to spit out an error message, but the code in truffle-compile module is trying to dereference \"e\" instead of \"err\".\nHer's the output using solc 0.5.3:\n```\nPS D:\\GitHub\\truffle_test> truffle test\nUsing network 'test'.\nReferenceError: e is not defined\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:267:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\nReferenceError: e is not defined\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:267:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\n    at async.whilst.fileFinished (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-compile\\profiler.js:255:1)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:5223:1)\nC:\\Users\\Admin\\AppData\\Roaming\\nvm\\v10.15.0\\node_modules\\truffle\\node_modules.cache\\truffle\\soljson-v0.5.3+commit.10d17f24.js:22\n(Module.asmGlobalArg,Module.asmLibraryArg,buffer);var __GLOBAL__I_000101=Module[\"__GLOBAL__I_000101\"]=asm[\"__GLOBAL__I_000101\"];var __GLOBAL__sub_I_ABIFunctions_cpp=Module[\"__GLOBAL__sub_I_ABIFunctions_cpp\"]=asm[\"__GLOBAL__sub_I_ABIFunctions_cpp\"];var __GLOBAL__sub_I_ABI_cpp=Module[\"__GLOBAL__sub_I_ABI_cpp\"]=asm[\"__GLOBAL__sub_I_ABI_cpp\"];var __GLOBAL__sub_I_ASTJsonConverter_cpp=Module[\"__GLOBAL__sub_I_ASTJsonConverter_cpp\"]=asm[\"__GLOBAL__sub_I_ASTJsonConverter_cpp\"];var __GLOBAL__sub_I_AST_cpp=Module[\"__GLOBAL__sub_I_AST_cpp\"]=asm[\"__GLOBAL__sub_I_AST_cpp\"];var __GLOBAL__sub_I_ArrayUtils_cpp=Module[\"__GLOBAL__sub_I_ArrayUtils_cpp\"]=asm[\"__GLOBAL__sub_I_ArrayUtils_cpp\"];var __GLOBAL__sub_I_AsmAnalysis_cpp=Module[\"__GLOBAL__sub_I_AsmAnalysis_cpp\"]=asm[\"__GLOBAL__sub_I_AsmAnalysis_cpp\"];var __GLOBAL__sub_I_CompilerContext_cpp=Module[\"__GLOBAL__sub_I_CompilerContext_cpp\"]=asm[\"__GL\nabort({}). Build with -s ASSERTIONS=1 for more info.\n```. If you can explain how to build/run truffle locally on windows I can perhaps help fix things like this and give you PR's rather than bug descriptions.. This looks very similar to https://github.com/trufflesuite/truffle/issues/1659. ",
    "VoR0220": "@tcoulter what if I wanted to test a factory of contracts and pick and choose from which ones to run tests on? How would I best organize this? . I've tried this:\n\ndelete build directory\ntruffle migrate --reset --compile-all\n\nI'm on OS X High Sierra. This is still not working. I'm sending in 3 arguments, my abi needs 3 arguments. This is very...very...frustrating. \n. Same exact friggin issue, except mine isn't even working after clobbering it. \n. I actually realized in my case that Truffle was actually correct, I was actually passing in an undefined value...so that was actually good on its part. . Weirdly enough I was able to get around this by changing the event log to event Log(string s);. This shouldn't really be a factor though. . ",
    "dmgarland": "Found the source generator in Truffle Core https://github.com/trufflesuite/truffle-core/blob/b3ad375993ec42bc622c7674258edc7614944482/lib/testing/deployed.js. @VoR0220 see also https://github.com/trufflesuite/truffle/issues/237#issuecomment-307609421. ",
    "stevejaxon": "@owocki, Quickly reviewing the code, I've added one comment / suggestion to trufflesuite/truffle-contract-schema#19\nLooking at my initial feature request, specifically the remark \" propose that a new, minor, version of the truffle-contract-schema\" made me realise that I haven't seen an increment in the schema version number. Since the schema has changed, I would have expected this to have been part of the pull request. Not sure who is responsible for maintaining these across the projects because it requires changes in a few files. \nIt would be good to see some examples of the resulting contract.json from the tests carried out - especially for the edge cases where the contract is redeployed on the same network (for testing purposes).. @owocki, ultimately I would like the enhancement to be added to Truffle because it's a feature that I think would not only benefit me, but also many other developers. However, I don't have any authority over the codebase. My own Pull Request for this (back in June/July) stagnated, so I ended up closing it. \nI'm really grateful to you for creating this bounty and to @kingcocomango for also taking his time to try and push this forward (and of course to @tcoulter for creating Truffle), but I guess @tcoulter is very busy and my attempts to contact him over Gitter have failed. @owocki, since you both work for Consensys do you have a way to reach out to him and see if there's any way to find some time to help push this forward? \nI think that closing this issue could be a big win for all of us: Gitcoin proves successful for both @owocki and @kingcocomango. My issue gets closed and truffle gets a new, minor, feature.   . ",
    "vacavaca": "You probably forgot a semicolon somewhere, the error message is really confusing.. ",
    "macbem": "Are you guys sure that this comes from a Solidity syntax error? I have this error while compiling OpenZeppelin's ERC20 StandardToken contract, which is highly unlikely to contain any syntax errors.. ",
    "johannbarbie": "had the same, this helped:\nrm -R build/\nnot sure why.. ",
    "albpal": "I had the same problem. I want to give extra information for other people facing the same problem:\nI had something like that:\n```\ncontract Interface{\n     function foo(uint256 param1, address param2) returns (uint);\n}\ncontract myContract is Interface{\n     function foo(uint24 param1, address param2) returns (uint) { return 0}\n}\n```\nSince param1 on the Interface contract is uint256 and, by the other hand,  uint24 on myContract, it will fail as Interface is not fully implemented and I'm trying to deploy myContract (which is inherited from Interface).\nBut.. You can deploy the following:\n```\ncontract ERC20{\n     function foo(uint256 param1, address param2) returns (uint);\n}\ncontract myContract {\n    function mint() {\n      ERC20 token = ERC20();\n      .............\n    }\n}\n```\nBecause you are not trying to deploy ERC20. It will be embeeded on MyContract which have to be fully implemented.\nAnyways, the error message is not descriptive.. ",
    "ngo275": "I had the same problem. I solved it like following in my case.\nsolidity\n// before\nif (proof != hoge) throw;\nsolidity\n// after\nif (proof != hoge) {\n  throw;\n}. ",
    "adamskrodzki": "Have same error In My case It was a bad constructor\n```\ncontract StupidMistakeMock is  StupidMistake{\nfunction  StupidMistakeMock(address ico,address benef,uint32 _divPeriod) \n        StupidMistakeMock(ico,benef,_divPeriod) {\n\n```\nwhile it should be\n```\ncontract StupidMistakeMock is  StupidMistake{\nfunction  StupidMistakeMock(address ico,address benef,uint32 _divPeriod) \n        StupidMistake(ico,benef,_divPeriod) {\n\n```\n. Is there really no way to reduce memmory consumption in truffle (increasing for example compiling time? ) \nI have vps with fixed memmory and cannot just resize. ",
    "barrard": "I had an interface that said a function was external, but the contract had it as public.  Easy fix, when you know what it is, took me a while to figure it out. I thought web3 would run estimateGas on its own.  Once I did it manually and set the gas in the send() all was good. Trying to update to Truffle v5.0 and getting this error.\nI had to update npm and then install truffle without sudo npm install -g truffle. Your truffle.js file has solc set to a version that didn't support constructor functions.\nTry and bump it up to 0.4.22. ",
    "KamesCG": "When I was deploying TCR contracts (https://github.com/skmgoldin/tcr) I also was given this error.\nTo silence the ~violence~ error I simply commented out the gas settings in the truffle.js config file.\nrinkeby: {\n      provider: () => new HDWalletProvider(mnemonic, 'https://rinkeby.infura.io'),\n      network_id: '*',\n      // gas: 4500000,\n      // gasPrice: 25000000000,\n    }, . ",
    "summerinsect": "I got same erro\nCannot find module 'truffle-expect'. npm install -g truffle-expect. ",
    "RaviDom": "I have got the same error.. I have tried using sudo npm install -g truffle-expect\nbut it gives me error \ud83d\udc4d \nError: Cannot find module 'truffle-config'\n    at Function.Module._resolveFilename (module.js:485:15)\n    at Function.Module._load (module.js:437:25)\n    at Module.require (module.js:513:17)\n    at require (internal/module.js:11:18)\n    at Object. (/usr/lib/node_modules/truffle/build/cli.bundled.js:85774:14)\n    at webpack_require (/usr/lib/node_modules/truffle/build/cli.bundled.js:21:30)\n    at Object. (/usr/lib/node_modules/truffle/build/cli.bundled.js:59914:15)\n    at webpack_require (/usr/lib/node_modules/truffle/build/cli.bundled.js:21:30)\n    at Object.run (/usr/lib/node_modules/truffle/build/cli.bundled.js:84660:19)\n    at Command.run (/usr/lib/node_modules/truffle/build/cli.bundled.js:60901:20)\nthen i have tried \nsudo npm install -g truffle-config\nit gives error like this\nnpm ERR! code 1\nnpm ERR! Command failed: /usr/bin/git clone -q https://github.com/debris/bignumber.js.git /home/ubuntu/.npm/_cacache/tmp/git-clone-59b5be4d\nnpm ERR! /home/ubuntu/.npm/_cacache/tmp/git-clone-59b5be4d/.git: Permission denied\nnpm ERR!\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /home/ubuntu/.npm/_logs/2017-07-04T05_12_40_507Z-debug.log\n. ",
    "PWKad": "https://ethereum.stackexchange.com/questions/19185/truffle-migrate-error-cannot-find-module-truffle-expect. I posted the \"fix\" above but it sounds like this issue has been resolved just not deployed yet.  You can follow the accepted answer in that StackOverflow.com question in the meantime to resolve the issue using -\n$ npm install -g truffle-expect truffle-config web3. ",
    "radix60": "Same issue on a fresh fresh docker container from node:latest.\n```\ntruffle init\nDownloading project...\nProject initialized.\nDocumentation: http://truffleframework.com/docs\nCommands:\nCompile: truffle compile\n  Migrate: truffle migrate\n  Test:    truffle test\ntruffle compile\nCompiling ./contracts/ConvertLib.sol...\nCompiling ./contracts/MetaCoin.sol...\nCompiling ./contracts/Migrations.sol...\nWriting artifacts to ./build/contracts\ntruffle test\nError: Cannot find module 'truffle-expect'\n    at Function.Module._resolveFilename (module.js:485:15)\n    at Function.Module._load (module.js:437:25)\n    at Module.require (module.js:513:17)\n    at require (internal/module.js:11:18)\n    at Object. (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:85773:14)\n    at webpack_require (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:21:30)\n    at Object. (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:59914:15)\n    at webpack_require (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:21:30)\n    at Object. (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:201851:15)\n    at webpack_require (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:21:30)\n```. @PWKad that did the trick.  Thanks!. ",
    "robertkraig": "I ran everything above, says this now.\nrkraig@rkraig-vmware-16 ~/projects/work/janus/ethereum/sample-1 $ truffle migrate\nError: Cannot find module 'xhr2'\n    at Function.Module._resolveFilename (module.js:485:15)\n    at Function.Module._load (module.js:437:25)\n    at Module.require (module.js:513:17)\n    at require (internal/module.js:11:18)\n    at Object.<anonymous> (/usr/local/lib/node_modules/truffle-config/node_modules/web3/lib/web3/httpprovider.js:38:12)\n    at Module._compile (module.js:569:30)\n    at Object.Module._extensions..js (module.js:580:10)\n    at Module.load (module.js:503:32)\n    at tryModuleLoad (module.js:466:12)\n    at Function.Module._load (module.js:458:3)\nnode: 8.1.3\nnpm: 5.0.3\nTruffle v3.3.1\nubuntu: 16.04\nThis isssue has been reported here as well: #478. ",
    "egortsaryk9": "Even after running npm install -g truffle-expect truffle-config web3 I still cannot execute truffle migrate cmd.\nIt still fails with:\nCannot find module 'truffle-expect'\n    at Function.Module._resolveFilename (module.js:485:15)\n    at Function.Module._load (module.js:437:25)\n    at Module.require (module.js:513:17)\n    at require (internal/module.js:11:18)\n    at Object.<anonymous>.\nIt's very strange as I see all packages (truffle-expect, truffle-config and truffle) in my npm-global directory at /Users/username/.npm-packages/lib/node_modules/...\nI tried to re-install truffle-expect, truffle-config and truffle globally several times, but it has no effect.  My OP is Mac OS Sierra, I'm using npm/node installed via homebrew.. It was my bad. I had 2 versions of truffle, the old 3.3.1 at /Users/username/.node/bin/truffle and the newest 3.4.5 at /Users/username/.npm-packages/bin/truffle. So truffle were linked to 3.3.1 path that didn't contain all required packages. Make sure you have correct paths if you use homebrew (https://gist.github.com/DanHerbert/9520689). ",
    "jiaxyan": "@egortsaryk9 \nsame as you, after running npm install -g truffle-expect truffle-config web3 still has the error Cannot find module 'truffle-expect'. alright, thanks. ",
    "rogeriosmorais": "I'm on windows and I can't install truffle-config. web3 and truffle-expect installed just fine, but config errors out.. ",
    "Taylor123": "I'm having the same error\n\nMacOS Sierra version: 10.12.5\ntruffle version: 3.4.3\nnode version: 5.6.0\nnpm version: 5.1.0. Update your node to the newest version.\nI just updated to 8.1.3 and it compiles fine!\n\nFor macOS just run: brew update && brew upgrade node && npm install -g npm. ",
    "MarkCWirt": "I'm experiencing the same issue, with a very similar environment to the original poster:\n\nOS: Ubuntu Xenial\ntruffle version: 3.4.3\nNode version: 4.2.6\nnpm version: 3.5.2\nsolidity: 0.4.11 . Unfortunately the Xenial repository is pretty old, so that would require compiling and installing node by hand, or finding a more up-to-date repository, and that could take a while.\n\nHowever, I have a machine running Arch (current node version: 8.1.3) and can confirm that it seems to work OK with that version.\nEdit: I found a node8 repository for ubuntu and upgraded. \nWorks now.. ",
    "Qqwy": "About 'how do we test it':\nIIRC Writing something like this:\n```\ncontract Foo {\n    struct Bar {\n        uint baz;\n    }\nBar[] bars;\n\nfunction qux() returns(bool) {\n    Foo memory val;\n    val.baz = 1;\n    bars.push(val);\n    return true;\n}\n\n}\n```\nwill crash on Solidity < 0.4.13 because the memory keyword is not supported fully.. This is a wonderful feature that is very useful.\nI've tried multiple times in the past to verify contracts I wrote with Truffle, and it was an absolute hassle; The only times I was able to do so, was when I side-stepped Truffle's deployment pipeline, and manually flattened the source, followed by manually uploading it using Mist or Parity.\nI see this as a must-have for any serious smart-contract project. :slightly_smiling_face: . ",
    "cllty": "I'd like to know when is the next Truffle release with fixes to solc.js? It would be good to get a rough idea. \nMeanwhile is monkey patching a good solution?. ",
    "15chrjef": "Any ETA on this? Compilation error messages are indeterminate. ",
    "Frankie34": "start ganache\ntruffle compile + truffle migrate\nthat works for me. ",
    "CupoTa": "truffle.cmd compile. ",
    "stiv-yakovenko": "dear tcoulter, your recipe was correct, --rpc was missing. thanx you!. after geth.exe. I don't know what it is, ask its authors.. ",
    "pascal1990": "Please where I should put the --rpc option ?I have the same problem. @stiv-yakovenko  Please where I should put the --rpc option ?I have the same problem. @stiv-yakovenko  I use ganache-cli on windows it's possible to do that ?. Hi, @prameshbajra  do you have metamask on your browser and which app you tru to run, ganache is a node module. ",
    "prameshbajra": "I have this error in ganache. Did anyone experience similar error? How do I get it fixed?\n@pascal1990  did you get it resolved? If yes, how? . ",
    "grks": "If anyone else encounter this issue, a workaround is to not use tmpfs for /tmp \n$ sudo systemctl mask tmp.mount\n$ sudo reboot. ",
    "danielfebrero": "Interesting, thank you, I will try it!. ",
    "mikeshultz": "Just ran into this.  This is a very odd bug.  Is not naming event params technically a bad pattern in Solidity code?. ",
    "tomasienrbc": "Had this problem as well - I share Mike's question, what's the pressing need to name event attributes? I'll assume it's the right design decision going forward but I didn't know that. . I would love this feature - I'm actually trying to include a flattener into my scripts now so that I always deploy flattened files so I always can verify the solidity. That will let me develop with separate files but not have to worry about tracking down what Solidity was compiled. \nThe really frustrating part of this process is that change comments, spacing, or anything about your Solidity results in different binary. You need exactly what was deployed - there's really no way around it. . I agree @moodysalem - Truffle Flattener still has issues but the team is working on making it easier and easier to use every day. It's what I use but it's still not ideal. . @xpepermint @stefek99 I can try this again, but truffle-flattener did not do the trick at the time of posting this issue. Truffle flattener got close but not close enough to map perfectly to Etherscan, not to mention it was impossible to integrate into an automated workflow to run automatically as changes were made. . I believe my error here: \nhttps://github.com/trufflesuite/truffle/issues/680\nIs the same issue. I think dry-run is not using gasPrice settings properly or gasLimit or gas.. Update: this seems to only be happening with --dry-run. That seems to have fixed it @scboffspring thanks!. Dope\nOn Mon, Dec 11, 2017 at 6:27 PM Gitcoin.co Bot notifications@github.com\nwrote:\n\nThe funding of 0.1 ETH attached to this issue has been approved & issued.\nLearn more at:\nhttps://gitcoin.co/funding/details?url=https://github.com/trufflesuite/truffle/issues/680\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/680#issuecomment-350892641,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACUT9x76DzH4L4jN72Nj8hy2PE0roAhQks5s_bphgaJpZM4QcRV2\n.\n. \n",
    "alexaltair": "I ran into this problem also. I defined an event and did not name the address parameter, which resulted in Uncaught TypeError: Cannot read property 'constructor' of undefined. If this issue hadn't come up in google I never would have figure it out.. I ran into this problem as well, with truffle v4.0.5. I have a contract called Foos in a file called Foo.sol. If my migration used any of the following lines, it fails;\n var Foo = artifacts.require(\"./Foo.sol\"); (despite it working for ./Migrations.sol)\n var Foo = artifacts.require(\"Foo.sol\");\n* var Foo = artifacts.require(\"Foo\");\nand if I changed it to var Foo = artifacts.require(\"Foos\"); it worked.. ",
    "weslienlive": "Adding the name worked for me too.. What @ayanez17 mentioned  worked for me.\n. ",
    "bellaj": "I confirm i can reproduce the same error\nand it's solved as stated by other developers by adding arguments names like following :\neventX(bool b, address a...). on ubuntu i had the same problem\nbut i had 2 test files a sol and .js\nwhen i've remove .sol test everything works fine again. the error was caused by a bad initialization of the called contract. issue closed.. ",
    "l-henri": "Same issue here. ",
    "adibas03": "@l-henri check at the comment above\nhttps://github.com/trufflesuite/truffle/issues/494#issuecomment-316044753. For those using ganache-cli\nGanache-cli has a default gasLimit of 0x6691b7,\nso your gas value in truffle.js must not exceed it.\nIf you need a higher gasLimit, you need to set a higher gasLimit when starting ganache-cli\nganache-cli -l 8000000\nhttps://github.com/trufflesuite/ganache-cli#command-line. ",
    "ollivierv": "Same issue on truffle@3.4.4. ",
    "raid5": "I'm getting the same error as @batjko. I've been able to get around it by comment out the require(petId < 0 || petId > 15); line, but obviously this isn't ideal.. ",
    "moritz-botconnect": "@batjko, Thank you! That solved the problem :-) It's obvious if you think to look there :-D. ",
    "awgneo": "Hello all. I don't think anyone here solved the original problem. Is there a way to check for require and assert exceptions that we expect from invalid input?. I may have found a decent workaround until Truffle officially supports this. The open-zeppelin project provides an assertJump function for this purpose. Check out this example. https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/test/Ownable.js. ",
    "benvoi": "I have the same issue as @batjko with the following require statement\n~~~~\nfunction adopt(uint petId) public returns (uint) {\n    require(petId >= 0 && petId <= 15);\n~~~~\n~~~~\n~/C/2/0/pet-shop-tutorial \u276f\u276f\u276f truffle test\nUsing network 'development'.\nCompiling ./contracts/Adoption.sol...\nCompiling ./test/TestAdoption.sol...\nCompiling truffle/Assert.sol...\nCompiling truffle/DeployedAddresses.sol...\n...\nTestAdoption\n    1) \"before all\" hook: prepare suite\n0 passing (436ms)\n  1 failing\n1) TestAdoption \"before all\" hook: prepare suite:\n     Error: VM Exception while processing transaction: invalid opcode\n      at Object.InvalidResponse (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:37312:16)\n      at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:220420:36\n      at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:204149:9\n      at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:205574:13)\n      at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:73069:18)\n      at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:73359:12)\n      at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:73514:12)\n      at IncomingMessage. (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:73474:24)\n~~~~\nAny idea what could go wrong?. ",
    "escoffon": "Regarding the original problem, I use the error function in the promise, which is triggered by an EVM exception. For example a snippet of a test for a token contract:\n```\n  it(\"should reject transfers with insufficient funds\", function() {\n     var account_two = accounts[2];\n     var account_three = accounts[3];\n var amount = 120000;\n var tok;\n\n return MyToken.deployed()\n     .then(function(instance) {\n           tok = instance;\n           return tok.transfer(account_two, amount, { from: account_three });\n       })\n     .then(function(r) {\n           assert(false, 'transfer (1) of insufficient funds should have failed');\n           return true;\n       },\n       function(e) {\n           assert.match(e, /VM Exception[a-zA-Z0-9 ]+: invalid opcode/, \"transfer (1) of insufficient funds should have raised VM exception\");\n       });\n });\n\n```\nSince I expect the transfer call to fail, I put an assert(false) in the success function, to make the test fail. And in the failure function, I assert that the error looks like it was generated by a EVM exception. The regexp works for tests running against testrpc; it may need to be tweaked for a more general use. It might also be possible to encapsulate the two functions for reuse; currently the tests as written would require a bit of cut and paste.\n. ",
    "mritzco": "Is there any way to test this in solidity? Every solution I found is on JS.\nI feel that in this context (Ethereum/solidity) testing for edge cases and failure is even more important that testing for working cases. \nIn the case of the pet shop I'd like to:\n- assert that if pet > 15 it fails,\n- assert it fails if no pet id \n- every edge case I could imagine...\n. Any updates? Is there any way to test in solidity? Every solution I found is for JS.\nI feel that in the context of (Ethereum/solidity) testing for edge cases and failure is as important as testing for working cases. . ",
    "lrascao": "@mritzco,  +1,  i would also like to see progress on this. ",
    "rickbatka": "+1, I would also like to test this in solidity - not javascript. For now, workaround seems to be to test from JS and assert something in the promise error - is that still the only way to accomplish this?. Hmm, I\u2019m just running \u201ctruffle test\u201d (on windows, using ganache). Is there\nanything else that might factor into it, besides truffle version? What\nabout solidity compiler version? I noticed there is a newer minor version\nthan what I was using, maybe tomorrow I will try updating that and see if I\nget the same results.\nOn Tue, Jan 23, 2018 at 10:48 PM c-g-e-w-e-k-e-> notifications@github.com\nwrote:\n\n@rickbatka https://github.com/rickbatka Hi, thank you for providing\nsuch an easy way to reproduce this issue. Unfortunately, when I run your\ncode on Truffle 4.0.5 using the truffle test command, it behaves as\nexpected - e.g thrown is set to true in the example above. All the tests\nin the zip file pass.\nHow are you executing the tests?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/761#issuecomment-360012479,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGRAhl1JZsBmncBoZ5wFJXePYfl7hyTbks5tNqgMgaJpZM4RqDwO\n.\n. Thanks @cgewecke for taking the time to look into this! Sure enough, changing Ganache versions fixed it.\n\nHopefully this helps any Googlers out there running into the same problem:\nProblem: Promises intermittently not being rejected (exceptions not being thrown) when require() or assert() conditions are not met. \nSymptom: Execution is rolled back, but no exception is raised / promise is not rejected (no way to tell if the code executed successfully without checking for known side effects or looking at transaction log).\nSolution: As of today, the latest release of Ganache (1.1.0-beta.0) (also labelled 1.2.0-beta.0 Candy Apple) exhibits this bug. Uninstalling it and installing v1.0.2 \"Heart Surgery\" fixed it for me.\nI will see about reporting this over at Ganache when I get some more time to work on this.. ",
    "fdouglis": "+1 for solidity.  . Thanks, @tcoulter, for the pointer to the proxy approach.  I used that and it works.  It's good that if we expect a revert() we can use that to confirm it happens, and fail the test only if it doesn't.  \nNow if only we could see events emitted during Solidity tests without raising a test failure. My only workaround there has been to do Assert.fail() if I want to see events, but then it counts as a unit test failure.  . I realize this has been closed, but as a new user, it seemed like a good place to point out that the truffle tutorial still acts like metacoin is available as a side effect of init.  On this page it points out that has changed, but all the other places that refer to it should be updated too.  . As I said in my report, I can reproduce this in my system, but I ~~don't~~ didn't have a recipe to tell you how to reproduce -- since when I tried to create a second file that would exhibit similar behavior, that one ran in the correct order.  \nBut the very good news is that when you asked me essentially to try harder to come up with a simplified repeatable sample, I noticed something about the contract that broke.  I had taken it as a given that I was dealing  with a single contract, since in essence my test contract was the only thing I cared about.  But I had used a recipe I'd found online to augment my contract with event calls through inheritance rather than simply cutting & pasting.  (I'd wanted to include a separate file for each, and couldn't figure out how to do this for the test files, so I wound up pasting in place.) The one that gets the wrong order has this extra contract while without it, it runs properly.  \nHere is the output of truffle -- all tests pass in this simple test, but the order of the tests changes:\n```\nTestOrder\n    \u2713 test0 (89ms)\n    \u2713 test1 (254ms)\n    \u2713 test2 (202ms)\n    \u2713 test3 (1191ms)\n    \u2713 test4 (284ms)\nTestOrder2\n    \u2713 test3 (1049ms)\n    \u2713 test2 (128ms)\n    \u2713 test1 (258ms)\n    \u2713 test0 (145ms)\n    \u2713 test4 (287ms)\n```\nHere is TestOrder.sol, without the extra inheritance. The adding stuff was because my original theory was that the amount of work done by a function was affecting when it ran.\n```\npragma solidity ^0.4.18;\nimport \"truffle/Assert.sol\";\ncontract TestOrder {\n// call a func that does a variable amount of work\n  function addit(uint max)  internal returns (uint j) {\nuint i;\nj = 1;\nfor (i = 0; i < max; i++) \n  {\nj = j + i;\n  }\n\n}\nfunction test0()  public {\n    uint sum = addit(2);\n    // trivial assertion\n    Assert.notEqual(sum, 1,  \"Shouldn't be equal\");\n  }\n  function test1()  public {\n    uint sum = addit(100);\n    // trivial assertion\n    Assert.notEqual(sum, 1,  \"Shouldn't be equal\");\n  }\n  function test2()  public {\n    uint sum = addit(10);\n    // trivial assertion\n    Assert.notEqual(sum, 1,  \"Shouldn't be equal\");\n  }\n  function test3()  public {\n    uint sum = addit(1000);\n    // trivial assertion\n    Assert.notEqual(sum, 1,  \"Shouldn't be equal\");\n  }\n  function test4()  public {\n    uint sum = addit(123);\n    // trivial assertion\n    Assert.notEqual(sum, 1,  \"Shouldn't be equal\");\n  }\n}\n```\nFinally, the one with the wrapper, TestOrder2.sol, breaks:\n```\npragma solidity ^0.4.18;\nimport \"truffle/Assert.sol\";\ncontract Debuggable \n{\n  // derived from:\n  // https://github.com/Distense/distense-contracts/blob/a73134bfe47faf8d5d3444d14305ad77eaeab9c5/contracts/Debuggable.sol\n  event LogAddress(address someAddress);\n  event LogBool(bool boolean);\n  event LogBytes(bytes someBytes);\n  event LogBytes32(bytes32 aBytes32);\n  event LogString(string aString);\n  event LogUInt256(uint256 someInt);\n  event LogUInt32(uint32 someInt);\n  event LogUInt8(uint8 someInt);\n  //------------------\n  function Debuggable() public\n  {\n  }\n}\ncontract TestOrder2 is Debuggable {\n  // call a func that does a variable amount of work\n  function addit(uint max)  internal returns (uint j) {\nuint i;\nj = 1;\nfor (i = 0; i < max; i++) \n  {\nj = j + i;\n  }\n\n}\nfunction test0()  public {\n    uint sum = addit(2);\n    // trivial assertion\n    Assert.notEqual(sum, 1,  \"Shouldn't be equal\");\n  }\n  function test1()  public {\n    uint sum = addit(100);\n    // trivial assertion\n    Assert.notEqual(sum, 1,  \"Shouldn't be equal\");\n  }\n  function test2()  public {\n    uint sum = addit(10);\n    // trivial assertion\n    Assert.notEqual(sum, 1,  \"Shouldn't be equal\");\n  }\n  function test3()  public {\n    uint sum = addit(1000);\n    // trivial assertion\n    Assert.notEqual(sum, 1,  \"Shouldn't be equal\");\n  }\n  function test4()  public {\n    uint sum = addit(123);\n    // trivial assertion\n    Assert.notEqual(sum, 1,  \"Shouldn't be equal\");\n  }\n}\n```\n. @cgewecke How about that ... The whole reason I had it in its own contract was that I wanted to include Debuggable, but in the test directory, I muffed the syntax to include it.  I could have sworn I tried the simple import \"./XXX\" you suggested, and failed.  But it worked here, anyway, and it did run the tests in the correct order.  Thanks.  . This error message has been a royal pain in my side since I started with truffle a few weeks ago.  I've tried increasing the gas to the max, but it only puts off the problem.  I've found for instance that a test contract that by rights should be one file has morphed into 6, each following slightly different paths.  Even then, I hit a case where nothing I could do could get me to get a single test contract loaded if it included starting a new instance of the contract I was testing.  At this point I have two tests, each with certain assertions that make the comment \"if the contract was started  then this test will fail.\"  If the contract is set up in migration/2_... with one parameter, the test will pass, but a different test will then fail.  Gotta be a better way ...\nOh, and did I mention that I already went through Assert.sol to comment out every function I never was using?  That stretched what fit in the gas too.  But ... ugh!  . Thanks @cgewecke that could be useful.  So far all my tests have been in Sol rather than js, but at some point I may move that way.  In any case, my issue has been with test/TestXYZ.sol not deploying, whereas I think you are referring here to the gas incurred by pieces of the contract under test?  . PS As an aside, I'm not sure I understand the benefit of gitter, or at least the way I see it often used.  I threaded discussion on a specific topic, where you can subscribe to notifications on that thread, sure beats the free-for-all flat discussion space of gitter. Yet the template for posting here asks, have you tried to get help on gitter first?   \nI realize I digress here :) . I have tried the equivalent of what you have said, I thought.   In ganache, the GUI, I have the gas limit set to \"80000000000\" (I note the GUI interface doesn't allow hex numbers, and in truffle.js, the ganache network set to \"800000000\".  (10x less).  Nevertheless, I ran into out of gas messages.  I tried your approach, converting your hex value to decimal and setting that as the gas limit, then setting truffle.js to 9f's.  I ran out of gas again.  \nIs there any chance that \"runtime error: out of gas\" is a red herring?  For instance, if something reverted deploying the contract, would it consume all the gas and make ganache report out of gas?  \nAs for gitter and threading: I understand your point about keeping the chitchat on github itself down, and that makes sense.  I hope the Powers That Be will improve gitter to make it more usable.  Right now it's like a CB Radio.  (I'm showing my age.)  . I ran with a newly installed ganache-cli, with the same options, and with the same bad result.  I have been specifying an explicit network all along, be it ganache (GUI), or now ganachecli.  . In addition, FYI, I have just checked whether it could be a change from moving to the more recent truffle.  But I get the same error with the version I installed a month or so ago, as the one I built and slightly modified this week.  (The modifications are to output events unconditionally; I didn't expect my changes to break deployment, but it was possible some other recent change caused it.  Apparently not...). While the original post was resolved by increasing gas, I have to note that I raised a similar problem, specific to truffle (it's the test contract that won't deploy), which is not resolved by increasing gas.  It's hard to believe the contract is so huge that no amount of gas will address it.  After all, it's deploying that is failing, not running!  Should I open a different case for it?  . I will do so, but I can't link to the code, as it's not public.  Thanks.  . Right, I shouldn't have said it was interesting, I should have just said it was frustrating.  I have set the gaslimit to be huuuuge, but it still doesn't allow it.  . I'm a bit confused by this bug report, because I was told by a truffle developer that \"truffle test\" compiles a new version and ignores anything you may previously have done with \"truffle compile\" or \"truffle migrate\".  Maybe that only applies to solidity tests rather than JS?  . ScJa, perhaps things have changed since I last installed truffle  2-3 weeks ago, but I definitely saw \"test\" recompiling things regardless of whether I'd explicitly compiled.  And similarly, running \"migrate\" made no difference, because it'd deploy a fresh version for the test.  . ",
    "adityabnawandar": "Changing  <= to '<' and  '>=' to '>' works.. ",
    "jackwzp": "I worked around this by catching the error in a try-catch block. However, is there a simpler/cleaner way to do it? Something like expect(tx).to.throw().\nWorkaround:\njavascript\nit('expect a revert in smart contract', async () => {\n   let contract = await MyContract.deployed();\n   try {\n        let tx = await contract.someFunc(inputParam, {from: accounts[0]});\n   } catch(err) {\n        assert(true); // expected the throw\n   }\n})\n. Actually I found a solution to this problem to write cleaner tests. In a helper.js file under test/ folder, I created a helper function that wraps all the try-catch stuff. Then in my actualTest.js file under test/, I can just write a simple one line statement.\nhelper.js\njavascript\nmodule.exports =  async (promise) => {\n    try {\n        await promise;\n    } catch (err) {\n        return;\n    }\n    assert(false, 'Expected throw not received');\n}\nactualTest.js\n```javascript\n// at the top of the file\nvar expectThrow = require('./helper.js');\n// further down in test file inside a contract()\nit('expect a revert in smart contract', async () => {\n   let contract = await MyContract.deployed();\n   // note there is no await keyword for tx as in my previous comment\n   let tx = contract.someFunc(inputParam, {from: accounts[0]}); \n   await expectThrow(tx);\n})\n```\n. ",
    "adrianmcli": "I also think this is worth considering. Perhaps we could make it possible to plug-in your own testing library in the future?. I'm getting this error as well. @NateDev100 did this ever resolve for you?. @NateDev100 This helped me resolve my problem, not sure if it'll help you: https://github.com/trufflesuite/truffle/issues/660#issuecomment-343066784. @gnidan It looks like this shouldn't have been closed.. @joshma91 has ran into this issue and messaged me personally. @joshma91, can you elaborate more here?. Whoops, closed again by accident.. @joshma91 @brent-capx I've been informed that this has been fixed in Truffle v5 since beta.0. If you're still having issues, we can re-open. But the solution for this is to either do the work around above or upgrade to v5 (which is what I'd recommend).. Ah I see. So you don't want to use Standard just yet I guess?. This makes a lot of sense, I'll try to bring this up with the team.. Please also take a look at https://github.com/trufflesuite/truffle/issues/1455, where another user seems to have the same inclination.. Gotta make sure that all the boxes are updated (config, docs, client, etc.) after this is merged.. @CruzMolina Cool to see this being addressed. Was just wondering if you don't mind outlining what would be the recommended path forward for teaching beginners then? Just want to make sure it's spelled out clearly so that there's no confusion on what to do.. My current hack is to do the following:\njs\nartifact.networks = {\n  \"1234\": { address: deployedAddress },\n};\nNot exactly sure what the best API is.. Do note that line 202 also has this issue: https://github.com/trufflesuite/truffle/blob/develop/packages/truffle-decoder/lib/interface/contract-decoder.ts#L202. Thanks @seesemichaelj!. Another reason why this PR is important is because it would allow you to decode and track state for contracts that you may not own (i.e. publicly available contracts with an open ABI).. Ah right, the AST as well!. @haltman-at thanks for taking a look at this.\nI am not sure how Ganache works, but I'm basing this off of how we're using it for Drizzle Utils.\nThe thing about artifacts is that you can use Truffle-Compile to generate one, while actually deploying the contract via other means. This means that the deployed address does not always reside with the artifact we have on hand.\nIn our Drizzle Utils tests, we do just that: we compile a contract using Truffle-Compile, and then separately use Web3 to deploy the contract. So yeah, all I'm asking for is the ability to pass those 2 things (i.e. artifact and deployed address) in separately.. Yea, Drizzle-Utils (which is separate from Drizzle) uses it. Thanks!. @seesemichaelj agreed.. > we could also change forContract(...) to have an optional address?: string parameter as the last argument\nThis sounds like a much simpler solution. Also, do relevantContracts need to have addresses as well?. That's great then, I vote for the address?: string parameter to forContract(...).. Yes, that is my understanding.. Thanks!. @gnidan feel free to make whatever changes to this branch/PR. I feel kinda done with this file by now lol.. @eggplantzzz why don't we use this one instead: https://github.com/flipxfx/download-git-repo\nI recently used it with my Nano React App project, and it:\n\nhas way more stars (372 vs 53)\nis updated in the last year (instead of in 2016). @CruzMolina ah right, so we can't use object spread, but what about:\n\njs\nconst console_commands = available_commands.reduce((acc, name) =>\n  Object.assign({}, acc, { [name]: commands[name] })\n, {})\nOr more verbosely:\njs\nconst console_commands = available_commands.reduce((acc, name) => {\n  const newCommand = { [name]: commands[name] }\n  return Object.assign({}, acc, newCommand)\n}, {}). lgtm!. @CruzMolina Thanks for looking into this. What do you suggest we do?. The only usage of it is spawn, and in the official documentation, they deconstruct directly to it. So we should probably do the same. For example:\njs\nconst { spawn } = require('child_process');. Should really integrate prettier into the workflow. Someone with more bandwidth should get on that. . It would be prudent to error out and let the user know something like \"Looks like you already have Ganache running on port 8545. Either change the port or turn off Ganache and try the command again.\". @gnidan but you almost never have both running, and I've spoken with many dapp developers in the community that agree with me on this. You always end up having to change the port in your frontend or elsewhere. They should all be 8545 in my opinion and I'd fight for this one very strongly.. This is so weird, how come you need a temp directory? . The above 4 lines can be written as:\n```js\nconst console_commands = available_commands.reduce((acc, name) => ({\n  ...acc,\n}), {})\n``. Since we're refactoring, consider changing this to useforEach` instead:\njs\naccounts.forEach((acct, idx) => config.logger.log(`(${idx}) ${acct}`)). Same as above:\njs\nprivateKeys.forEach((key, idx) => config.logger.log(`(${idx}) ${key}`)). This is just a nit (i.e. feel free to disagree), but I prefer this syntax better:\njs\nrunConsole: async (config, ganacheOptions, done) => { ... }\nThe reasons being:\n\nIf you're skimming what's in this object, you can see the name (i.e. runConsole) right-away and move on. Whereas with the leading async keyword, you have to read to the right of it to find out what the name is.\nYou can use an arrow function here since you are not using this.\nIt's a bit more semantic IMHO: it's like saying \"this is the runConsole property, and it is an async function that accepts (config, ganacheOptions, done).\". Same as above comment:\n\njs\nrun: async (options, done) => { ... }. Typically, capitalized variables are used for classes and constructor functions. Things like:\njs\nconst MyClass = require(\"../MyClass.js\")\nconst thing = new MyClass()\nIn this case, the thing you are requiring from ../console is just an object literal (or an object \"instance\", some might say). As a result, it should really be:\njs\nconst consoleCommand = require(\"../console\")\nBut since this is done everywhere in the code, editing this now might make it difficult to read with the rest of the code. I'll leave this up to you, but I just wanted to point out that this is kind of non-standard.. Non-standard variable naming with leading capital. See above, feel free to ignore/resolve.. For the above 2 lines:\nNon-standard variable naming with leading capital. See above, feel free to ignore/resolve.. Also wait a second, await isn't even used anywhere in this function? Does it even need to be an async function?. ",
    "code-chimp": "Would it be possible to at least enable Chai's BDD style assertions?. ",
    "EdsonAlcala": "I have seem Jest and I like the Immersive Watch Mode approach, is there a way to do that in truffle or mocha?. ",
    "Mischi": "We just released a first version of https://github.com/AsureFoundation/truffle-jest. It allows you to run your truffle tests with Jest instead of truffle test. Give it a try if you like. This is mostly a PoC and has some rough edges \ud83d\ude09\nWe played with Mocha / Mocha CLI too but in the end Jest had better support for \"Async Initialization before executing tests\" as Mocha. \nPS: I just stumbled upon truffle-solidity-loader and wondering if it can be used together with Jest to rerun the tests once  the smart contracts changed ...\nWhat are your plans for truffle test? Would you welcome a Jest based solution which uses the standard Jest CLI instead of truffle test?\nCheers,\nFabian\n. We've published a blog post about truffle-jest. Take a look if you like \ud83d\ude03 \nhttps://medium.com/@ASURE.io/running-truffle-unit-tests-with-jest-f59b5049b66a. Thanks \ud83d\ude03 . Thanks, will keep that in mind \ud83d\ude03 . \ud83d\udc4d . ",
    "brynbellomy": "Happens to me as well, Node 8.1.3, Truffle 3.4.8.. I found some evidence to suggest that part of the problem may be related to the abstract contracts being named identically to the real contracts that they represent.  A possible fix (other than requiring contract writers to always use unique names) might be to avoid generating JSON artifacts for abstract contracts.\nCan't say with 100% certainty that this fix takes care of the entire bug, but might be worth trying for those of you who +1'd.. ",
    "rodiazet": "I'm trying to use this workaround but it seems that it doesn't have change to work. It's not possible to wrap call with await inside non-async function.  So () => await someAsyncFunction() won't work or I'm missing something important?\n. ",
    "shkfnly": "@rodiazet what he meant was \n```\n  var SomeContract = artifacts . require ( \" SomeContract \" );\n// An async function\n const someAsyncFunction = async function someAsyncFunction () {\n   // ...\n };\n// Your actual migration\n module . exports = ( deployer ) => {\n   deployer . deploy (SomeContract). then (() => await someAsyncFunction ())\n// alternative, just start a chain without a deployment\n   deployer . then (async() => await someAsyncFunction ())\n } \n```\nI wrapped all this together like \n```\nmodule.exports = function (deployer) {\n  deployer.then(async () => {\n    await deployer.deploy(Division)\n    await deployer.link(Division, [DistributeToken, ProjectLibrary, ReputationRegistry, TokenRegistry, Project])\n    await deployer.deploy(ProjectLibrary)\n    await deployer.link(ProjectLibrary, [TokenRegistry, ReputationRegistry, ProjectRegistry])\n    await deployer.deploy(TokenRegistry)\n    await deployer.deploy(ReputationRegistry)\n    await deployer.deploy(ProjectRegistry)\n    await deployer.deploy(DistributeToken, TokenRegistry.address, ReputationRegistry.address)\n    await deployer.deploy(PLCRVoting, TokenRegistry.address, ReputationRegistry.address, ProjectRegistry.address)\nlet PRInstance = await ProjectRegistry.deployed()\nlet TRInstance = await TokenRegistry.deployed()\nlet RRInstance = await ReputationRegistry.deployed()\nreturn Promise.all([\n  PRInstance.init(DistributeToken.address, TokenRegistry.address, ReputationRegistry.address, PLCRVoting.address),\n  TRInstance.init(DistributeToken.address, ProjectRegistry.address, PLCRVoting.address),\n  RRInstance.init(DistributeToken.address, ProjectRegistry.address, PLCRVoting.address)\n])\n\n})\n}\n```\nHope this helps!\nShout out to http://y-nakajo.hatenablog.com/entry/2018/01/15/174743\nand https://ethereum.stackexchange.com/questions/30572/truffle-post-deployment-actions\nfor the insight\n. ",
    "kigawas": "@shkfnly Thanks for sharing \ud83d\udc4d . ",
    "code-brewer": "\nIt seems like lines after the first await call get skipped sometimes.\n\nYes, i encountered this issue with node v8.10.0, it look like await() don't return but the test flow exited normally. Finally i upgrade nodejs to 9.11.1 and then run smoothly. ",
    "HaleTom": "This would be great... I've been trying to work out how to use solc 0.4.17 and this issue explains why forcing the module to that version still doesn't work.. Duplicate of #618. My web browser misbehaved.. ",
    "masato25": "A tricky way of doing this:\n add networks in truffle.js\ntest: {\n  host: 'localhost',\n  port: 8545,\n  network_id: 777 // Match any network id\n},\n add a networkid checking before run on your migartion script:\nif(deployer.network_id != 777){\n   .......\n}\ntruffle test  --network test. ",
    "nuliknol": "I logged in to GitHub just to support the user who said that using Migrations is a horrible idea. I came to this issue by searching google : \"how to remove migrations from truffle\". I don't know who engineered this but it's the worst engineering thing I have seen:\n\nYou spend extra gas when you don't really need to do it, you can store current step localy\nIt is difficult to understand which transaction deployed the contract and which does update migration status. \nYou spend lot of time to understand what is this thing about when you learn how to use truffle, because it is hard to understand why someone may come up with such idea, because you tend to believe that \"migrations\" is sort of library included by truffle to enhance your own contract.\n\nHorrible, horrible, horrible. \nYou lowered the rating of your software by about 50% by including this nasty feature.. ",
    "ccolorado": "I think the migration part needs more work and love, @nuliknol just hating, but he is welcome to not use truffle migrate. . @Emobe @Nagaraj007 @pd164594 So from what I understand is that fsevents is an osx only pice of sowftware. \nTruffle shouldn't rely on it if it's considered multiplatform or at least have a flag to opt out from the config file instead of the source code  pointed out  here https://github.com/trufflesuite/truffle/issues/734#issuecomment-358528186. Should I have forked from \ne8a985212b23768a3217cd8e1960acebfc80f7c1 \n(HEAD -1) instad of 9b84e8d633b13156f98833061c4f24c19df747fc (test are failing on this commit) \n?\n. @gnidan @hjaltman I agree with the suggestions. I rather a flag for truffle debug. Something like:\ntruffle debug [-t | --trace ] prints the trace steps for a debug run.\nThis was you can store it on package.json.scripts.\nThe only thing that I am not a fan is that if the debugger finishes, it just quits. So you would have to be very careful, ( or rather lucky ) to catch a glimpse of the last trace. I just saw this. (https://github.com/trufflesuite/truffle/pull/1337). Pretty exited about this. \nI would ultimately love to have something like this :\n truffle debug [-a | --auto-jump-to <NUMBER> ]  auto jumps to the step trace <NUMBER>.\nThanks for all your comments. . Same here\nOS: linux\nTruffle v5.0.1\nNode verison v10.15.0\nNpm version 6.4.1. Was getting ready to submit this test:\nSteps to reproduce\nI created a blank virtual machine with ubuntu ubuntu-18.04.2-live-server-amd64.iso\ninstall nvm node python make build-essential g++\nnvm install v10.15.0\nnvm alias default v10.15.0\nnpm install -g truffle\nnpm install -g ganache-cli\nclone any solidity truffle project\nnpm install\ntruffle test\nGet this result\n\n. ",
    "crazyrabbitLTC": "As a note I had this error and fixed it myself. The problem was that my contract (as defined in the .sol file) had a different name than the solidity file itself. So for example: \nFirstContract.sol\nand inside that file: \ncontract MyFirstContract () {}......\nIt seems that the contract name and the file name need to be the same. Not sure how the behavior will change when there are more than one contracts in the file, however this fixed the error for me. . ",
    "christian-valadez": "I was incorrectly using .call(), which is for read-only. . ",
    "se3000": "\nOS: macOS(10.12.6)\ntruffle: Truffle@3.3.1/Solidity@0.4.11 and Truffle@3.4.7/Solidity@0.4.13.\nEtheruem client: TestRPC\nnode: 8.1.4\nnpm: 5.0.3\n. \n",
    "k06a": "Same for me, raising this event:\nevent MyEvent(address[] indexed wallets);\ngives error:\nUncaught Error: Number can only safely store up to 53 bits\n      at assert (node_modules/truffle/build/cli.bundled.js:123137:21)\n      at BN.toNumber (node_modules/truffle/build/cli.bundled.js:123637:7)\n      at node_modules/truffle/build/cli.bundled.js:80331:59\n      at Array.forEach (<anonymous>)\n      at decodeParams (node_modules/truffle/build/cli.bundled.js:80327:9)\n      at Object.decodeEvent (node_modules/truffle/build/cli.bundled.js:80372:10)\n      at node_modules/truffle/build/cli.bundled.js:207924:38\n      at Array.map (<anonymous>)\n      at Object.decodeLogs (node_modules/truffle/build/cli.bundled.js:207895:19)\n      at Object.callback (node_modules/truffle/build/cli.bundled.js:208023:35)\nTemporary fixed by removing indexed attribute:\nevent MyEvent(address[] wallets);. @gnidan we need more details. @gnidan yep, doc was helpful enough. 0.4.23 just released with fix:\n\nIf a contract has both a new-style constructor (using the constructor keyword) and an old-style constructor (a function with the same name as the contract) at the same time, one of them will be ignored. There will be a compiler warning about the old-style constructor, so contracts only using new-style constructors are fine.. \n",
    "pipermerriam": "I'm trying to recall the why and I'm coming up blank.  The general idea was that packages shouldn't be back-filling releases.  I understand this specific case is not backfilling as much as just pushing an existing release to a new index.  Unless I get a eureka moment and figure out a security reason for this I'm fine relaxing the restriction to one of.\n\nRemoval of the restriction all-together\nRequire something explicit to backfill in this manner since it should always be a special case.. @maraoz the latest evolution of EthPM abandons the centralized registry in favor of a federated model.  We have no intentions of maintaining the existing registry and will likely get that site taken down and replaced by something else soon.. \n",
    "TripleSpeeder": "Also happens here. Very confusing :-). ",
    "thomasj02": "+1. ",
    "johncryp": "async/await should let you do it pretty much like you say. . ",
    "pszabop": "factory patterns are quite common, I have 3 different use cases for this already.... ",
    "jbentke": "That is definitely needed :). ",
    "jchittoda": "When can we expect this feature ?. I was having the same problem. But figured out the problem is with HDWalletProvider.\nIf you are using HDWalletProvider for your network config and using accounts[] other then 0 (zero), then it will cause this problem. \nUse only accounts[0] wherever you are putting some wallets into migration scripts. As HDWalletProvider do not have capability to support multiple wallets.. ",
    "spalladino": "Thanks for the quick response!!. ",
    "mxmauro": "Reverted to 3.4.5 and works fine.. ",
    "dwalintukan": "I received this just now when copying my token code into another project. I didn't receive any sort of warning about any constructor error.\nMy token code's Ownable contract constructor is:\nfunction Ownable() public {\n    owner = msg.sender;\n  }\nWhile the contract I imported my token code to has this Ownable constructor:\nfunction Ownable(address _owner) public validAddress(_owner) {\n        owner = _owner;\n    }\nSo I had to satisfy the constructor with the new Ownable param. But truffle did not warn of anything with this. It just gave me this error which was not very descriptive of the actual issue:\nError: The contract code couldn't be stored, please check your gas amount.\n    at Object.callback (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:329221:46)\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:39618:25\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:331159:9\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:175492:11\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:314196:9\n    at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:329855:7)\n    at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:70159:18)\n    at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:70449:12)\n    at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:70604:12)\n    at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:70564:24). I get the same issue with 3.4.6. Tests run fine and pass though.\nLooks like there is a PR open for this:\nhttps://github.com/trufflesuite/truffle/pull/547. Looks like this was an issue with 4.0.0 beta. To restore and rollback, I just reverted everything:\nnpm uninstall -g truffle\nnpm install -g truffle\ntruffle migrate --reset --compile-all. @fabdarice Try deleting your build folder and run the tests again.. Not exactly sure why. I'm guessing something to do with the already compiled files. \nYa I'd tried using reset and compile all but didn't work for me either.\nWhenever I have weird issues with the tests I usually just delete my build folder.. Was an issue with 4.0.0 beta. Just rollback to 3.4.1 and you're good to go.. Yes I am using the Truffle's built-in TestRPC instance. You are right, I don't need the blockHeightManager for these tests. I do use it in other tests for simulating mining and increasing the block count.\nI have removed the blockHeightManager, but regardless the test still hangs.. Ah I get the issue! Thanks for getting back to me. I can fix the tests accordingly \ud83d\udc4d  Thank you @cgewecke . @Elaniobro I've tested the fix and it works so it should be closed. I didn't create that one on gitcoin.co.. ",
    "pawel-n": "What me doing wring was modify array in constructor. I did this:\ntiers[0] = Tier(2500000 * 10**18, 0, 0.0007 * 10**18);.\nContact was deployed when I moved this line to setup method :). ",
    "jtakalai": "I had this problem, and solved it by pasting the flattened code into Remix that then gave a better error description: I had an interface in the contract that I had not implemented correctly (wrong function signature). Trying to deploy an \"abstract contract\" gives this error, but a much better error would be what Remix gives: \"This contract does not implement all functions and thus cannot be created.\". Probably still valid though. Here's a situation where I got that error:\nI'd written in a file test/A.js something like \nit (\"calls stuff\", () => {\n    contract.callStuff()\n})\nand as a result another file test/B.js would give that error. After fixing A.js to\nit (\"calls stuff\", async () => {\n    await contract.callStuff()\n})\nthe problem disappeared. So it can be... almost anything. Fun times with Truffle.. ",
    "jdcrew": "I have editted 2_initial_migration.js like below\n```\nvar token = artifacts.require(\"token\");\nvar owned = artifacts.require(\"owned\");\nvar tokenRecipient = artifacts.require(\"tokenRecipient\");\nvar MyAdvancedToken = artifacts.require(\"MyAdvancedToken\");\nmodule.exports = function(deployer) {\n    deployer.deploy(token,10000,'MyToken',2,'RMB');\n    deployer.deploy(owned);\n    deployer.deploy(tokenRecipient);\n    deployer.deploy(MyAdvancedToken);\n};\nand it tips\ntruffle migrate --network geth\nCompiling ./contracts/mytoken.sol...\nWriting artifacts to ./build/contracts\nUsing network 'geth'.\nRunning migration: 2_initial_migration.js\n  Deploying token...\n  token: 0xb13de4c9904c16087746199e498323bf7e5ced86\n  Deploying owned...\n  owned: 0x432126f9eeb62b7d517db2cb5e1547ec4e40806e\n  Deploying tokenRecipient...\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: The contract code couldn't be stored, please check your gas amount.\n```\nMay anybody help me to fix it?. ",
    "lucav": "+1 I have the same problem with tokenrecipient (i'm deploying on ropsten network, using parity).\nThis is my 2_initial_migration.js:\n```\nvar owned = artifacts.require(\"Owned\");\nvar TokenRecipient = artifacts.require(\"TokenRecipient\");\nvar Token = artifacts.require(\"Token\");\nvar TestCoin = artifacts.require(\"TestCoin\");\nmodule.exports = function(deployer) {\n  deployer.deploy(owned);\n  deployer.deploy(TokenRecipient); <--------- error here\n  // Take the deployed TokenRecipient address and link it to Token contract in bytecode\n  deployer.link(TokenRecipient, Token);\n  deployer.deploy(Token,1000000,'TestCoin',0,'TEC');\n  deployer.link(Token, TestCoin);\n  deployer.link(owned, TestCoin);\n  deployer.deploy(TestCoin);\n};\n```\nwith this output:\n```\nUsing network 'development'.\nRunning migration: 2_deploy_contracts.js\n  Deploying Owned...\n  ... 0xd464117599ecf979922997d364c8366b23ef2633bb620793630c78b5fbe0b603\n  Owned: 0x42099b0f7eba440427ef8f1c5844b11ea6d047cf\n  Deploying TokenRecipient...\n  ... 0x9aaf26f59267c1a531c3075904c380953ee8d6fd7cd9a8806496f0652acac255\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: The contract code couldn't be stored, please check your gas amount.\n    at Object.callback (d:\\Users\\xxx\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:222830:46)\n    at d:\\Users\\xxx\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:35149:25\n    at d:\\Users\\xxx\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:224768:9\n    at d:\\Users\\xxx\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:66971:11\n    at d:\\Users\\xxx\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:208348:9\n    at XMLHttpRequest.request.onreadystatechange (d:\\Users\\xxx\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundl\ned.js:209773:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (d:\\Users\\xxx\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled\n.js:67130:18)\n    at XMLHttpRequest._setReadyState (d:\\Users\\xxx\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:67420:\n12)\n    at XMLHttpRequest._onHttpResponseEnd (d:\\Users\\xxx\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:67\n575:12)\n    at IncomingMessage. (d:\\Users\\xxx\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:67535:24\n)\n```. @jdcrew \nHi, i don't know if you have resolved this issue, but after i talked in the gitter chat of ethereum tutorial (https://gitter.im/ethereum/tutorials) i have found that i need only to deploy the main contract and not other contracts in the tutorial. \nIn my case, i have to use only this:\n```\nvar TestCoin = artifacts.require(\"TestCoin\");\nmodule.exports = function(deployer) {\ndeployer.deploy(TestCoin,1000000,'TestCoin',0,'TEC');\n\n}\n```\nAnd it works.\nSo, i think this is not a truffle's bug.. ",
    "ArtoriaRen": "I encountered the same Error and solved it by just adding a newline at the end of  \\\"2_deploy_contracts.js\".. @moda20 @Jaren831 I googled newlines at the end of javascript files. It seems newlines prevent two instructions appearing in the same line when the preprocessor concatenates files. I am not sure about this. Here is the link https://evanhahn.com/newline-necessary-at-the-end-of-javascript-files/. ",
    "vmandal": "I too had the same error. It was because of a spell mistake. So re-check your code.. ",
    "JarenL": "@ArtoriaRen Your suggestion worked for me as well. Strange.... ",
    "SumitBisht": "In my case, apart from newline, I had a typo ('expots' instead of 'exports').\nthe errors got resolved once this was rectified.. ",
    "dipeshnuco": "\nI encountered the same Error and solved it by just adding a newline at the end of \"2_deploy_contracts.js\".\n\nthis worked for me. ",
    "ESRogs": "See my additional comments here: https://gitter.im/ConsenSys/truffle?at=5983c7ca210ac2692050c372. > The PR on web3.js is referring to the code which hasn't been changed for almost 3 years.\n@makoto The utils.isArray function may have been written years ago, but it started being called as part of parameter validation just two months ago. See: https://github.com/ethereum/web3.js/blame/530c4a3b1d7bc787c90e9b0e35fd3c9ae560d76e/lib/web3/function.js#L69. ",
    "jeromerousselot": "should be already solved in solc 0.4.14.. I did reference your bug report and stated clearly that it was already resolved in latest solc.\nI created the ticket to make truffle users and devs aware of it. I also discussed this in truffle gitter with the devs.\nNext truffle release can mark this bug as solved!. ",
    "mateodelnorte": "btw, to magically start using meta, here, you'd just do the following: \n(in your truffle dir)\nnpm i -g meta\nmeta\n// meta will now print a little warning saying your meta repo is missing a bunch of child repos\nmeta git update\n// meta will now clone all of your child repos, into the truffle dir\n// editing any of the child repos will have no effect on the truffle dir, because they're gitignored\nmeta git status\n// will print a git status for truffle and all its child repos.\nenjoy!. woot!. ",
    "branciard": "Hi, you can check your log in /var/syslog . Maybe you will see \"Out of memory : kill process\". If so increase the memory. I had this issue with 1024 m allocated on my vm. it works fine for me now with 2048m allocated.. ",
    "kaba-official": "+1 for low memory usage and high compile/deploy time as a side-effect.. ",
    "chengfenlu": "And node is working as follows:\njennifer@block-demo:~/ETHnursecall$ node generatorwithDB.js\nConnected MongoDB CallCollection successfully!\nConnected MongoDB: Call collection successfully!</p. ",
    "acrigney": "I have the same problem and I did not know that I had to run the testrpc -m \"with my mnemonics\". ",
    "LordotU": "I've made a little debug of cli.bundled.js file.\nThis is what I get whe try to deploy in testrpc network:\n... 0x34865735e70707919805f2850b823e67adb25ff0fe059d5ece5836d9430a7208\n[ [Function: inputAddressFormatter],\n  [Function: inputDefaultBlockNumberFormatter] ] [ '0x97280c75faa2e7e1b2a182e34fffcb77c58b9b56' ]\n  Migrations: 0x97280c75faa2e7e1b2a182e34fffcb77c58b9b56\nAnd in Rinkeby network:\n... 0xa2a4697161936052f320bbce9171600741cf155785d25ecf45d914f1445be648\n[ [Function: inputAddressFormatter],\n  [Function: inputDefaultBlockNumberFormatter] ] [ null ]\nAs we can see, in the case of Rinkeby we have null instead of valid contract address. But... why has it happened?. Ok, I went deeper.\nSo, when executes this line (https://github.com/ethereum/web3.js/blob/develop/lib/web3/contract.js#L119) of web3.js code (line 222802 in Truffel's cli.bundled.js) we are getting answer with null in contractAddress field.\nFor example:\n{ \n  blockHash: '0xd08cee7ec0d9e50185099ca403b53798081f94ba73bbb9caa7a72fa2afb2591f',\n  blockNumber: 696482,\n  contractAddress: null,\n  cumulativeGasUsed: 201492,\n  from: '0xdc2e0c6e3d08bc53200ea0a90ec4f550d9d1f616',\n  gasUsed: 0,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  root: '0x4ae760bf36bd646016db7018f16f6e5fadc2200aee17a89337b6d0a26534fb03',\n  to: null,\n  transactionHash: '0x6863a10cc9e42f62056f5defebd9f249ced92c024c1cb2ed94ae1a1efb1a5cc5',\n  transactionIndex: 0 \n}\nAnd example for testrpc which works properly:\n{ \n  transactionHash: '0x55bb0dc39488b897ced17831ff6308741045b463993d3b2d239748434b134b89',\n  transactionIndex: 0,\n  blockHash: '0xa04dc4a145b6884dfa78cfc4d55888b4e6c2ed41b8888cff72458728b474f6da',\n  blockNumber: 15,\n  gasUsed: 201262,\n  cumulativeGasUsed: 201262,\n  contractAddress: '0x0bfed93fdbcd00323918ad1d361cd999ba291ce4',\n  logs: []\n }. I've found the reason.\ncontractAddress is null because I'm using geth node in embedded/light mode - it hasn't enough information about blockchain.\nIssue may be closed.. ",
    "phiferd": "I'd like to see this also.. ",
    "critesjosh": "+1. ",
    "sokel": "+1. ",
    "GreenFomo": "Think I'm probably having the same issue. For me it always seems to throw \" Error: The contract code couldn't be stored, please check your gas amount.\" if what i'm deploying inherits from an abstract contract. Any idea @tcoulter ? Thanks!. ",
    "evgen-povt": "Have the same issue.\nBut my interface has the name differencing from the contract name.\nAnd the contract inherits the interface:\ncontract Shape is ShapeIf {\n...\n}. the same error. Has anybody managed to solve the problem?. It's is not a path issue.\nIf the path is wrong it prints:\nError: Could not find <path>/<filename1>.sol from any sources; imported from <path>/<filename2>.sol\nBut actual error is:\n<filename2>.sol:6:1: ParserError: Source \"<filename1>.sol\" not found: File import callback not supported. Actually I have the problem with a contract placed in the same directory, not a zeppelin contract.\nYes, I tried to \nimport '../contracts/<filename1>.sol'\nand had the same error.\nIf I try:\nimport '../<filename1>.sol'\nthe error is \nError: Could not find <path>/<filename1>.sol\n. both files are in the same directory 'contracts'.\nThe most weird thing is that the being imported file is imported in the another contract successfully.. That is exactly how I import the file.. I rechecked it many times.\nI have tried to copy-paste the import statement.\nI have even try to import another contract from the same directory and it gave me the same error.\n. I had experienced the issue event after cleaning the build directory.\nOn updating to Truffle v4.1.11 the issue has gone.. @cgewecke \nI bumped into the issue again.\nI added more logs in the file solc-js/wrapper.js\nand found out that the variable solcStandardInput.sources from truffle-compile/index.js contained a duplicates.\nThe first record had the absolute path and compiled successfully.\nAnd the second one had a relative path - here the compilation failed.\nI temporary fixed solc-js to search relative paths in absolute paths and it started working.\nSo the bug is definitely how the list of files is collected and passed to the compiler. \n. @cgewecke I have found out the issue. It was on my side.\nHere is my situation:\nI have 3 contracts: A, B and C.\nA imports B, and B imports C.\nBut there was small issue: A imported B as\nimport \"contracts/B\"\ninstead of\nimport \"./B\"\nAlthough A was compiled successfully the compilation failed on the contract B with message that the B couldn't import C.\nThe only issue of Truffle is: why does it allows (and even compiles) to make import with incorrect paths?\n. ",
    "elie222": "Why was this switched off? . Ah I see the issue at the top. Anyone know how much extra gas things cost without optimization? . Any updates on this?. @sonaye the issue with this is that mv can't replace an existing folder, and also that each time truffle will build completely anew wiping any network information the previous ABIs may have. Same here.... Can we get this merged into core?\nOn 2 Feb 2018 23:28, \"jstoeffler\" notifications@github.com wrote:\n\nHere's how I fixed it:\n\nFind the bundled cli file, in my case /usr/local/lib/node_modules/\n   truffle/build/cli.bundled.js\nFind the method in which the error occurs, in my case formatRangeLines:\n   function(source, range, contextBefore)\nLog the range object by adding a console.log(range); in the file\n   and re-runnning it. In my case it was: { start: { line: 39, column: 0\n   }, end: undefined }\nSo range.end was undefined in my case, so I replaced:\n   this line : if (range.start.line == range.end.line) { by this line: if\n   (range.end && range.start.line == range.end.line) { (null/undefined\n   check of range.end)\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/655#issuecomment-362712777,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AC8oX_e2_nifB8TC_D-j8pzrsI_gW28Zks5tQ33jgaJpZM4QOxLb\n.\n. It's been a few weeks since I posted this. I don't remember how I got around this issue. A manual install in the correct place for solc or a reinstall. We've been working fine the past few weeks. . How do you get it to skip 1_initial_migration.js when deploying to rinkeby or mainnet?\n\nAny ways around all these issues by not using truffle? If so, what would you recommend?. Can confirm this rewrite worked for me too. But seems like a bug in Truffle that things should be done this way.. I just banged my head against this issue with Rinkeby. I had to remove gas and gasPrice from the truffle config file to make it work.. Try this with Infura (update API key):\nrinkebyInfura: {\n      provider: function() {\n        return new HDWalletProvider(\n          process.env.SECRET_MNEMONIC,\n          'https://rinkeby.infura.io/XXX',\n          1\n        )\n      },\n      network_id: 4,\n      // remove these if they cause issues:\n      gas: 6612388, // Gas limit used for deploys\n      gasPrice: 20000000000, // 20 gwei\n    },\nOr this may work too:\nrinkeby: {\n      host: 'localhost', // Connect to geth on the specified\n      port: 8545,\n      from: '0xabcde12345', // default address to use for any transaction Truffle makes during migrations\n      network_id: 4,\n      gas: 6612388, // Gas limit used for deploys\n      gasPrice: 2700000000000,\n    },. But these headaches come up a lot. Truffle is quite buggy unfortunately.. This may well be a bug with Truffle. I got things working by removing: overwrite: false from my deploy code.. Just ran into this same issue again unfortunately. Funny how when I googled it this was the top response :(\nThis is a sample of some of the problematic code:\ndeployer\n        .deploy(Token, TokenFactory.address, { overwrite: false })\n        .then(function() {\n          return Token.deployed()\n        }). Again the solution was to get rid of { overwrite: false }, but this really wasn't ideal for me. Had to put the code into a single file to do this when I really wanted it in two separate files.. ",
    "charltonh": "Experienced this issue trying to run truffle test on rinkeby testnet from gentoo linux.\nI've discovered that Assert.sol generates an EVM binary that is just too big to be deployed without it choking. I ended up manually editing Assert.sol and taking out a couple of funcs that I wasn't using.\nNow the EVM binary is slightly smaller and deploys on rinkeby, and my tests complete successfully.. Experiencing issues trying to run truffle test on rinkeby testnet from gentoo linux.\nI've discovered that Assert.sol generates an EVM binary that is just too big to be deployed without it choking.  I ended up manually editing Assert.sol and taking out a couple of funcs that I wasn't using.\nNow the EVM binary is slightly smaller and deploys on rinkeby, and my tests complete successfully.\n. Experienced this issue trying to run truffle test on rinkeby testnet from gentoo linux.\nI've discovered that Assert.sol generates an EVM binary that is just too big to be deployed without it choking. I ended up manually editing Assert.sol and taking out a couple of funcs that I wasn't using.\nNow the EVM binary is slightly smaller and deploys on rinkeby, and my tests complete successfully.. Try the latest beta release of truffle, or try finding the Assert.sol file in truffle and manually editing it to take out a couple of functions that you don't need.. @liyihe96 Depends on which functions you are using in your program.  I took out just a couple small functions that I knew I'd never use, which amounted to just a few lines.  Then the Assert.sol compiled code was able to 'fit' and it deployed successfully.. ",
    "delormemarie240": "I have same issues, I tried to increased gas amout, but it still doesn't work.\nAny other suggestions ? really annoying issue --. Hello,\nIs there any update on this issue ? I have same problem, an it's very annoying -- I do not find any solution on other forum. ",
    "lexruster": "The same,\nI set maximum gas allowed for rinkeby.\nTransaction results in contract creations\nhttps://rinkeby.etherscan.io/tx/0x95faddf06ba05e0a1b954a54c2ba34f6fe9b652177d81cbd99eab675680c65d1\nbut tx receipt fails and contract code not deployed.\n`> {\n\n\"jsonrpc\": \"2.0\",\n  \"id\": 626,\n  \"method\": \"eth_getTransactionReceipt\",\n  \"params\": [\n    \"0x95faddf06ba05e0a1b954a54c2ba34f6fe9b652177d81cbd99eab675680c65d1\"\n  ]\n}\n <   {\n <     \"jsonrpc\": \"2.0\",\n <     \"id\": 626,\n <     \"result\": {\n <       \"blockHash\": \"0x345af884b281652182b59ed2d563dd81ff7105ffbb31e838dfaf63cc45f6b522\",\n <       \"blockNumber\": \"0x176b57\",\n <       \"contractAddress\": \"0x0e4fdb1262d1838e509dc1c3989361cf0e4d5686\",\n <       \"cumulativeGasUsed\": \"0x1013c1\",\n <       \"from\": \"0x1805d581593b31138be3bf780a17497229a2774d\",\n <       \"gasUsed\": \"0x1013c1\",\n <       \"logs\": [],\n <       \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n <       \"status\": \"0x0\",\n <       \"to\": null,\n <       \"transactionHash\": \"0x95faddf06ba05e0a1b954a54c2ba34f6fe9b652177d81cbd99eab675680c65d1\",\n <       \"transactionIndex\": \"0x0\"\n <     }\n <   }\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 627,\n  \"method\": \"eth_getCode\",\n  \"params\": [\n    \"0x0e4fdb1262d1838e509dc1c3989361cf0e4d5686\",\n    \"latest\"\n  ]\n}\n <   {\n <     \"jsonrpc\": \"2.0\",\n <     \"id\": 627,\n <     \"result\": \"0x\"\n <   }\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 628,\n  \"method\": \"eth_uninstallFilter\",\n  \"params\": [\n    \"0xa63ce5039e01231dbd3e1da542d82d40\"\n  ]\n}\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: The contract code couldn't be stored, please check your gas amount.\n    at Object.callback (C:\\Users\\Alex\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:327595:46)`\n\nSo look, i got a receipt with contract address, but it truffle fail with it may be because\nhttps://github.com/trufflesuite/truffle/issues/558\nbtw really small contract like migrations is deployed\nmy contract pretty easy, basic zeppelin contract\n```\npragma solidity ^0.4.13;\nimport './AlexCoin.sol';\nimport 'zeppelin-solidity/contracts/crowdsale/Crowdsale.sol';\ncontract AlexCoinCrowdsale is Crowdsale {\n   function AlexCoinCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public\n    Crowdsale(_startTime, _endTime, _rate, _wallet) \n    {        \n  }\n// creates the token to be sold.\n  // override this method to have crowdsale of a specific MintableToken token.\n  function createTokenContract() internal returns (MintableToken) {\n    return new AlexCoin();\n  }\n}\n```\n```\npragma solidity ^0.4.13;\nimport 'zeppelin-solidity/contracts/token/MintableToken.sol';\ncontract AlexCoin is MintableToken {\n  string public name = \"ALEX COIN\";\n  string public symbol = \"ACO\";\n  uint256 public decimals = 18;\n}\n```\n  . same like @takageRoshi\nIt is definitely not about the name of file and contract, because their the same.\nTruffle v4.1.5\nganache-cli/ganache-gui\nnode v8.11.1\nnpm v5.8.0\nCode from http://truffleframework.com/tutorials/pet-shop\n`TestAdoption\n    1) \"before all\" hook: prepare suite\n0 passing (2s)\n  1 failing\n1) TestAdoption \"before all\" hook: prepare suite:\n     Error: Could not find artifacts for /C/Proj/TrufflePetShop/src/contracts/Adoption.sol from any sources\n      at Resolver.require (C:\\Users\\Alex\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-resolver\\index.js:37:1)\n      at TestResolver.require (C:\\Users\\Alex\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-core\\lib\\testing\\testresolver.js:17:1)\n      at TestResolver.require (C:\\Users\\Alex\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-core\\lib\\testing\\testresolver.js:17:1)\n      at C:\\Users\\Alex\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-core\\lib\\testing\\soliditytest.js:141:1\n      at Array.forEach ()\n      at C:\\Users\\Alex\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-core\\lib\\testing\\soliditytest.js:140:1\n      at C:\\Users\\Alex\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-deployer\\src\\deferredchain.js:20:1\n      at \n      at process._tickCallback (internal/process/next_tick.js:188:7)`. Looks like we catch a bug.\nhttps://ethereum.stackexchange.com/questions/44568/truffle-test-fails-in-petshop-tutorial\n@takageRoshi  @VoR0220 it is worked when rollback to 4.1.4\nin shot: pet shop tutorial tests did not work in truffle 4.1.5 but worked in 4.1.4\nError: Could not find artifacts for /C/Proj/TrufflePetShop/src/contracts/Adoption.sol from any sources\nat Resolver.require\n. ",
    "sharad-s": "@lexruster were you able to fix your issue? \nI was following the same exact tutorial as you and ran into the same issue. I was trying to deploy on ropsten and kovan. \nUpon running truffle deploy --network kovan or ropsten, I get the following error: \n\nRunning migration: 1_initial_migration.js\n Deploying Migrations...\n ... 0xe514f11e0968c3b3570f8c49383450e29552ac5374e663cf2858275c2347429e\n  Migrations: 0x9be30d437be261af9430fac1d0e8fdf2957a77fc\nSaving successful migration to network...\n  ... 0x2733d4c971330ce20a7a8eec34cd6136119bfd675db727402caf7d722494eab6\nSaving artifacts...\nRunning migration: 2_deploy_contracts.js\n[ 1517766299,\n  1518371099,\n  1,\n  '0xafd860a9ac1e1f29e1efa102f82081cd38626054' ]\n  Deploying FirstCrowdsale...\n  ... 0x77e6e144a163d0de1505c340721288f0cb1b38fbfea29e310b6b3613ba8518b2\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: The contract code couldn't be stored, please check your gas amount.\n\nI posted here my contracts, truffle.js and deployment script. Any help would be appreciated.\nFirstCrowdSale.sol\n```\npragma solidity ^0.4.19;\nimport \"../node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\";\nimport \"../node_modules/zeppelin-solidity/contracts/token/MintableToken.sol\";\nimport \"./FirstToken.sol\";\ncontract FirstCrowdsale is Crowdsale {\nfunction FirstCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet)\n    Crowdsale(_startTime, _endTime, _rate, _wallet) public\n    {\n}\n\nfunction createTokenContract() internal returns (MintableToken) {\n  return new FirstToken();\n}\n\n}\n```\nFirstToken.sol\n```\npragma solidity ^0.4.19;\nimport \"../node_modules/zeppelin-solidity/contracts/token/MintableToken.sol\";\ncontract FirstToken is MintableToken {\n  string public constant name = \"FirstToken\"; // solium-disable-line uppercase\n  string public constant symbol = \"FIRST\"; // solium-disable-line uppercase\n  uint8 public constant decimals = 18; // solium-disable-line uppercase\n}\n```\ntruffle.js\n```\nrequire('dotenv').config();\nconst Web3 = require(\"web3\");\nconst web3 = new Web3();\nconst WalletProvider = require(\"truffle-wallet-provider\");\nconst Wallet = require('ethereumjs-wallet');\n//export MAINNET_PRIVATE_KEY and ROPSTEN_PRIVATE_KEY in your .env \nvar mainNetPrivateKey = new Buffer(process.env[\"MAINNET_PRIVATE_KEY\"], \"hex\")\nvar mainNetWallet = Wallet.fromPrivateKey(mainNetPrivateKey);\nvar mainNetProvider = new WalletProvider(mainNetWallet, \"https://mainnet.infura.io/\");\nvar ropstenPrivateKey = new Buffer(process.env[\"ROPSTEN_PRIVATE_KEY\"], \"hex\")\nvar ropstenWallet = Wallet.fromPrivateKey(ropstenPrivateKey);\nvar ropstenProvider = new WalletProvider(ropstenWallet, \"https://ropsten.infura.io/\");\nvar kovanPrivateKey = new Buffer(process.env[\"ROPSTEN_PRIVATE_KEY\"], \"hex\")\nvar kovanWallet = Wallet.fromPrivateKey(kovanPrivateKey);\nvar kovanProvider = new WalletProvider(kovanWallet, \"https://kovan.infura.io/\");\nmodule.exports = {\n  networks: {\n    development: {\n      host: \"localhost\",\n      port: 8545,\n      network_id: \"*\" // Match any network id\n    },\n    ropsten: {\n      provider: ropstenProvider,\n      // You can get the current gasLimit by running\n      // truffle deploy --network rinkeby\n      // truffle(rinkeby)> web3.eth.getBlock(\"pending\", (error, result) =>\n      //   console.log(result.gasLimit))\n      gas: 4600000,\n      gasPrice: web3.toWei(\"20\", \"gwei\"),\n      network_id: \"3\",\n    },\n    kovan: {\n      provider: kovanProvider,\n      // You can get the current gasLimit by running\n      // truffle deploy --network rinkeby\n      // truffle(rinkeby)> web3.eth.getBlock(\"pending\", (error, result) =>\n      //   console.log(result.gasLimit))\n      gas: 4600000,\n      gasPrice: web3.toWei(\"21\", \"gwei\"),\n      network_id: \"3\",\n    },\n    mainnet: {\n      provider: mainNetProvider,\n      gas: 4600000,\n      gasPrice: web3.toWei(\"20\", \"gwei\"),\n      network_id: \"1\",\n    }\n  }\n};\n```\n2_deploy_contracts.js\n```\nvar FirstCrowdsale = artifacts.require(\"./FirstCrowdsale.sol\")\n// var HelloWorld = artifacts.require(\"./HelloWorld.sol\")\nmodule.exports = function(deployer, network, accounts) {\n  const BigNumber = web3.BigNumber;\n  const RATE = 1;\n  const startTime = 1517766299 ;//1517766299;\n  const endTime =  startTime + duration.weeks(1);\n  console.log([startTime, endTime, RATE, accounts[0]]);\n  deployer.deploy(FirstCrowdsale, startTime, endTime, RATE, accounts[0]);\n  // deployer.deploy(HelloWorld);\n};\nfunction latestTime () {\n  return  web3.eth.getBlock('latest').timestamp;\n}\nconst duration = {\n  seconds: function (val) { return val; },\n  minutes: function (val) { return val * this.seconds(60); },\n  hours: function (val) { return val * this.minutes(60); },\n  days: function (val) { return val * this.hours(24); },\n  weeks: function (val) { return val * this.days(7); },\n  years: function (val) { return val * this.days(365); },\n};\n```. ",
    "praveen7557": "@sharad-s hi, did you find any solution for this?\n. @SeptiyanAndika In my code, the problem was startingTime is less than the current time.. @bwheeler96  I am getting this error.\n1525509739 1525509859 BigNumber { s: 1, e: 18, c: [ 80000 ] } '0xa563876a8ef0a0d8fbe57d7b42d480326cd24e95' BigNumber { s: 1, e: 3, c: [ 1000 ] } '0xb8ff5597c7db19f45976aae9abdb21c83fb95ecc'\n  Deploying StartCoinCrowdsale...\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: StartCoinCrowdsale contract constructor expected 5 arguments, received 6\n    at /usr/lib/node_modules/truffle/build/webpack:/~/truffle-contract/contract.js:390:1\n    at new Promise (<anonymous>)\n    at /usr/lib/node_modules/truffle/build/webpack:/~/truffle-contract/contract.js:374:1\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:182:7)\nMy contract is this.\njavascript\nfunction StartCoinCrowdsale\n        (\n            uint256 _openingTime,\n            uint256 _closingTime,\n            uint256 _rate,\n            address _wallet,\n            uint256 _cap,\n            MintableToken _token\n        )\n        public\n        Crowdsale(_rate, _wallet, _token) \n        TimedCrowdsale(_openingTime, _closingTime) \n        CappedCrowdsale(_cap) {\n        }\nThis is my deployment code.\njavascript\n  module.exports = function (deployer, network, accounts) {\n    const openingTime = web3.eth.getBlock('latest').timestamp + 2; // two secs in the future\n    const closingTime = openingTime + 120; // 3 minutes\n    console.log(openingTime, closingTime);\n    // const closingTime = openingTime + 86400 * 20; // 20 days\n    const rate = new web3.BigNumber(1000);\n    const wallet = accounts[1];\n    const cap = new web3.BigNumber(8000000000000000000); //8 ether\n    return deployer\n        .then(() => {\n            return deployer.deploy(StartCoin);\n        })\n        .then(() => {\n            console.log(openingTime, closingTime, cap, wallet, rate, StartCoin.address);\n            return deployer.deploy(\n                StartCoinCrowdsale,\n                openingTime,\n                closingTime,\n                rate,\n                wallet,\n                cap,\n                StartCoin.address\n            );\n        })\n        .then(() => { // giving the crowdsale ownership over the token\n            return StartCoinCrowdsale.deployed().then(crowdsale => {\n                crowdsale.token().then(tokenAddress => {\n                    const startCoinInstance = StartCoin.at(tokenAddress);\n                    startCoinInstance.transferOwnership(crowdsale.address).then(output => {})\n                })\n            }).catch(err => {\n                console.log(err);\n            })\n        });\n};\nAs you can see my constructor is expecting 6 values and if you see at the top of the error I am consoling the deployed parameters, it has 6 values. But still I am getting this error. Any help would be great.\n. ",
    "SeptiyanAndika": "@sharad-s @praveen7557  did you find any solution for this?. thanks @praveen7557 . ",
    "sh4ka": "Hello @Janaka-Steph is it possible that it might be because the accounts reside in the network and not in the contract? If you want to achieve the desired behavior you should start with a clean fresh network every time you run the tests. . Same for me. Some tests fail to run the first time, but they pass the next time I run the test, without changing anything. I\u00b4m using Ganache as the network:\nError: The contract code couldn't be stored, please check your gas amount.\n      at Object.callback (/mnt/c/Users/shaka/AppData/Roaming/npm/node_modules/truffle/build/webpack:/~/web3/lib/web3/contract.js:147:1)\n      at /mnt/c/Users/shaka/AppData/Roaming/npm/node_modules/truffle/build/webpack:/~/web3/lib/web3/method.js:142:1\n      at /mnt/c/Users/shaka/AppData/Roaming/npm/node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:89:1\n      at /mnt/c/Users/shaka/AppData/Roaming/npm/node_modules/truffle/build/webpack:/~/truffle-provider/wrapper.js:134:1\n      at XMLHttpRequest.request.onreadystatechange (/mnt/c/Users/shaka/AppData/Roaming/npm/node_modules/truffle/build/webpack:/~/web3/lib/web3/httpprovider.js:128:1)\n      at XMLHttpRequestEventTarget.dispatchEvent (/mnt/c/Users/shaka/AppData/Roaming/npm/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:64:1)\n      at XMLHttpRequest._setReadyState (/mnt/c/Users/shaka/AppData/Roaming/npm/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:354:1)\n      at XMLHttpRequest._onHttpResponseEnd (/mnt/c/Users/shaka/AppData/Roaming/npm/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:509:1)\n      at IncomingMessage.<anonymous> (/mnt/c/Users/shaka/AppData/Roaming/npm/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:469:1)\n      at endReadableNT (_stream_readable.js:1101:12)\n      at process._tickCallback (internal/process/next_tick.js:114:19). ",
    "hacktar": "That's unfortunately still true! \nEvents emitted during test are printed only in case of assertions failed.. ",
    "86me": "I'm receiving the same error. Just trying to follow the truffle token tutorial.\n```\n\u2570 % truffle migrate                                                                        10:43 PM 1 \u21b5\nUsing network 'development'.\n/usr/local/lib/node_modules/truffle/build/cli.bundled.js:23538\n        throw new Error(\"Expected parameter '\" + key + \"' not passed to function.\");\n        ^\nError: Expected parameter 'from' not passed to function.\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:23538:15\n    at Array.forEach ()\n    at Object.options (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:23536:19)\n    at Object.run (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:66868:12)\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:88946:23\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:67033:9\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:66861:7\n    at done (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:155469:5)\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:155526:11\n    at FSReqWrap.oncomplete (fs.js:153:5)\n```\nMacOS 10.11.1\nTruffle v3.4.9 (core: 3.4.8)\ngeth 1.6.7-stable-ab5646c5\nnode: stable 8.4.0 (bottled), HEAD\nnpm 5.3.0. @casidiablo Adding a 'from' paramater to truffle.js got me past this error. Only to open up another issue\n```\n\u2570 % truffle migrate                                                                         1:30 PM 1 \u21b5\nUsing network 'development'.\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  ... undefined\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: unknown account\n    at Object.InvalidResponse (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:37295:16)\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:224765:36\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:66971:11\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:208348:9\n    at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:209773:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:67130:18)\n    at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:67420:12)\n    at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:67575:12)\n    at IncomingMessage. (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:67535:24)\n    at emitNone (events.js:110:20)\n```\nNot sure why it's saying unknown account, because I'm currently running a testnet with a custom genesis block and an open rpc port with the specified account. I know the account exists; this is the output from an attached console:\n```\n\neth.coinbase\n\"0x6498b84547e91c853a4ecf0254589d3464d2444c\"\neth.getBalance(eth.coinbase)\n5000000000000300000\n```\nThe unknown account error I'm getting know is odd, because before I created my private network, I was getting an \"insufficient gas\" error using the same account, on the live network.\n\nHere is the output of truffle.js:\nmodule.exports = {\n  rpc: {\n      host:\"localhost\",\n      port:8545\n  },\n  networks: {\n    development: {\n      host: \"localhost\",\n      port: 8545,\n      network_id: \"*\",\n      from: \"6498b84547e91c853a4ecf0254589d3464d2444c\",\n      gas: 18000000000\n    }\n  }\n};\nI've tried with and without the \"0x\" in front of the account number.\nI will keep trying, and open up a different issue if I can't figure this out.. @casidiablo Yes, it worked when deployed with geth --testnet --rpc. Just had to lower the gas threshhold. Not sure what the difference was, but I'll take it.\nThanks for your help.. @DeveloperUX This is my current truffle.js\nmodule.exports = {\n  rpc: {\n      host:\"localhost\",\n      port:8545\n  },\n  networks: {\n    development: {\n      host: \"localhost\",\n      port: 8545,\n      network_id: \"1337\",\n      from: \"0x572857f9a9a59bdef971394f256f657dc963f1f5\",\n      gasPrice: 100000000000,\n      gas: 4712388\n    },\n    rinkeby: {\n      host: \"localhost\",\n      port: 8545,\n      network_id: \"4\",\n      gas: 4712388,\n      gasPrice: 100000000000,\n      from: \"0x79a1b6fecfa9c954803d2b59773fadc39d063e64\"\n    }\n  }\n};\nI would try removing the quotes around \"ropsten\".. @DeveloperUX Another technique I've found helpful when getting unexpected \"out of gas\" error messages is to pass the properties through the constructor in deployer.deploy() in 2_deploy_contracts.js. Here's an example:\n```\nvar MyContract = artifacts.require(\"./MyContract.sol\");\nmodule.exports = function(deployer) {\n  ...\n  deployer.deploy(MyContract, startTime, endTime, wallet, { gas: 4712388 });\n};\n```. +1. ",
    "leopoldjoy": "@linkas45 @86me Adding a default from field to the truffle.js file solved this problem for me, see here. I created a pull request for the fix: https://github.com/trufflesuite/truffle-init-default/pull/3.. @casidiablo Yes, I think you're right. The error Expected parameter 'from' not passed to function seems unclear to me since it doesn't express that the running node has no accounts. Once you specify the from field in truffle.js you get the slightly clearer error: Error: unknown account. Do you think the from field should have a default value?. @tcoulter Thanks for the reply! I actually ended up switching to parity. You're right though, I think I wasn't mining which was causing the migrations to not complete.. ",
    "casidiablo": "This usually happens if the running node has no accounts. By default, it seems that truffle will try to deploy the contracts using the first account available, which can be manually forced using the from property in the config.. That sucks. Does it happen if you deploy against an official testnet? Rinkeby for example.. ",
    "DeveloperUX": "@86me Can you post what your truffle.js ended up looking like? I'm running into the same issue, played around with gas and the address in from but to no avail.\nI'm trying to use the ropsten testnet:\nnetworks: {\n    \"ropsten\": {\n      host: \"localhost\", // Connect to geth on the specified\n      port: 8545,\n      from: \"0xf5071a2d92135545eaedffba45df5d3e7adbcfee\", // default address to use for any transaction Truffle makes during migrations\n      network_id: 3,  // The Ropsten testnet\n      gas: 4612388 // Gas limit used for deploys\n    }\n}. ",
    "shrugs": "for googlers: you may also have something else running on 8545 (like an ssh session) that truffle doesn't respond to correctly. this is the error that comes up in that case.. ",
    "holyxiaoxin": "@shrugs you're right, I had parity running on 8545!. ",
    "mjibril": "I still had the same issue despite doing as @86me suggested. It turned out I had previously created an account with \ngeth account new\nand the account was not found.\nIf you are using the testnet network you need to create a different account with\ngeth --testnet account new\n. ",
    "RobinJQ": "I have the same problem! What is the solution??. ",
    "taxic": "So have you solved it? I came across the same error.. ",
    "hayesgm": "I had a similar issue on deployments (incorrect nonce). I solved my issue by changing my deployment from:\njavascript\nreturn deployer.deploy([\n    ContractA,\n    ContractB\n  ]).then(function() {\n    return deployer.deploy(ContractC);\n  });\nto\njavascript\nreturn deployer.deploy(ContractA).then(function() {\n    return deployer.deploy(ContractB).then(function() {\n        return deployer.deploy(ContractC);\n    });\n  });. This may be unrelated, but I recently had a similar issue that had to do with maximum stack depth (though it wasn't being reported). My fix was simply running:\nnode --stack_size=2000 \"./node_modules/truffle/build/cli.bundled.js\" compile. ",
    "krabradosty": "@tcoulter I'm sorry, but it's not a solution.. After I fixed timeout to be 0 (just set timeout in the/node_modules/truffle/build/cli.bundled.js), I got another error during running migration script with a low gas price: Contract transaction couldn't be found after 50 blocks.\n. ",
    "Levino": "This should be reopened. If one is using https://github.com/MetaMask/provider-engine with truffle it will never stop.. Looks like the workaround only works with web3@0.20.x and not with the new web3@1.0.0-beta.x.. So this works:\njs\nmodule.exports = function(deployer) {\n  // You have to use the `then` of the first deployer instance. Do not try to wrap this in async / await\n  deployer.then(async () => {\n    console.log('Deploying token')\n    const token = await deployer.deploy(Token)\n    console.log('Deploying crowdsale')\n    const crowdsale = await deployer.deploy(\n      Crowdsale,\n      RATE,\n      TREASURY,\n      CAP,\n      token.address\n    )\n    console.log('Make crowdsale owner of token')\n    return token.transferOwnership(crowdsale.address)\n  })\n}\nSo you have to start with one deployer.then call.\nThe problem is obviously also that the exported function is not expected to return a promise. You can see this because the following actually works:\n```js\nvar Migrations = artifacts.require('Migrations');\nmodule.exports = function(deployer) {\n  deployer.deploy(Migrations);\n};\nWhile I actually would expect only this to work:js\nvar Migrations = artifacts.require('Migrations');\nmodule.exports = function(deployer) {\n  return deployer.deploy(Migrations);\n};\n``\nSo instead of attaching some weird ownthenproperty to the deployer object,truffle` should expect a promise to be returned from these functions. I think this is a really ugly antipattern here.. > Thanks @cgewecke for the explanation. We are using our own Web3 version thus peerDependencies would help us run that with the default Truffle version. Now we are forking truffle project to achieve that.\nSorry, but I do not understand. Could you elaborate how this would help? Currently web3 is bundled into the final .bundle.js. What do the peerDependencies have to do with what ends up in the bundle when it is created before publication of truffle to npm?. > Unbundled truffle is available as truffle-core, which exposes a cli.js so it can be used as command line utility on its own.\nHow about fixing the Readme of tuffle-core and add this information? It seems it is just the truffle readme.. But as @cgewecke says you can use your own web3 with the following package.json for your truffle project:\njson\n{\n  \"dependencies\": {\n    \"web3\": \"git://mycustomweb3.git\",\n    \"truffle-core\": \"^4.1.11\"\n  },\n  \"scripts\": {\n    \"test\": \"node ./node_modules/truffle-core/cli.js test\"\n  }\n}\nNobody needs to make web3 a peer dependency then anywhere. Your custom explicit dependency will overwrite the web3 dependency of truffle-core as long as your custom web3 satisfies the correct version range. This is also a solution for @MoMannn without forking truffle himself. npm run test should use the local web3 version.. > @Levino yeah. Because of the webpack this is not possible. If Truffle would be a usual NodeJS project then pearDependencies should do the trick :).\nI think it works this way: When you add a local dependency to web3 the subdependency web3 of any other dependency will be overwritten. It does not matter whether web3 is a subdependency oder a subpeerdependency. In your node_modules folder will always be only one web3. The peer dependency thing actually does not change that much, it basically just does not make the package automatically install web3 but forces the user to install web3 by hand and as such picking a specific version.. > I think the decision to bundle was made more than a year ago when package-locking was less normative and semver coherence was less rigorously followed in truffle's Ethereum dependencies. It's been very effective at squashing cross-platform installation issues and speeding up installation. Truffle used to take a couple minutes to install and the issues were filled with dep problems. It now takes a few seconds - the goal was to make something that had turned into a minor nightmare super simple and reliable for new users.\nI get your point. But are there any other high quality projects who use this pattern? This sounds to me a little bit like a hack to solve the problem, that truffle has too many inapt users who do not have their sh*t together when it comes to node and npm. And as soon as people use truffle-core you have the same issues as before. So you kind of have a gatekeeper for the script kiddies who cannot tell their arse from their elbow but they still can end up creating annoying issues like: \"Mimimi, truffle-core won't build on my virus infected and misconfigured windows setup.\" I would rather say these users should not be doing any smart contract coding whatsoever. You are giving machine guns to monkeys.. I guess my original issue is resolved.. Related https://github.com/trufflesuite/truffle/issues/1322. https://truffleframework.com/docs/truffle/reference/configuration#networks\nThere is a config value skipDryRun.. Anybody here??. I started to make an example repo. Look at this file: https://github.com/Levino/truffle-dry-run-failure/blob/master/migrations/2_mummy_migration.js\nI think the dry run would fail but I am not able to test atm because https://github.com/trufflesuite/truffle/issues/1667\nWaiting for this to get fixed.. Truffle is working again with web3. I pushed some changes to the repo with a working example now. I was not able to reproduce the bug though and do not want to spend more time atm on this. Might revisit later. I am happy for a PR by @mrwillis to reproduce the error. I think my basic example is a very good starting point. https://github.com/Levino/truffle-dry-run-failure. This is the most urgent bug of all here I would say. I just created a new truffle project. Wont run.. The beauty is that you have to pin all web3* packages because now there are twenty of them. As if anyone would include anything but the top level web3.. Fix working for me.. Yes, that is right. But the software was not working! Good quick fix. Now one can work on a long term solution.. Ahem. Or you do it???. > It looks like some of that changes are incompatible with Truffle, so it has many problems.\nThis should be expected if one uses a software clearly marked as \"beta\", right? I honestly wonder what exactly the \"many problems\" are. I did not encounter any when using truffle. Maybe you can add some links to issues that are caused by using the old version of the web3 beta.37?. ",
    "javaing": "crate a new folder, for example:\nmkdir demo-video\ncd demo-video\ntruffle init\n=>It's wrok!  , It just need a clear directory\n(in Windows7, git-bash). ",
    "husky-parul": "Has anyone figured out how to fix this issue? I installed truffle and checked the version.\nINV-PSINGH1-MBP:voting-app-2 singh.p$ truffle version\nTruffle v3.4.11 (core: 3.4.11)\nSolidity v0.4.15 (solc-js)\nINV-PSINGH1-MBP:voting-app-2 singh.p$\nBut when I try to do truffle init, I get the following error\nINV-PSINGH1-MBP:voting-app-2 singh.p$ truffle init\nevents.js:160\n      throw er; // Unhandled 'error' event\n      ^\nError: self signed certificate in certificate chain\n    at Error (native)\n    at TLSSocket.<anonymous> (_tls_wrap.js:1092:38)\n    at emitNone (events.js:86:13)\n    at TLSSocket.emit (events.js:185:7)\n    at TLSSocket._finishInit (_tls_wrap.js:610:8)\n    at TLSWrap.ssl.onhandshakedone (_tls_wrap.js:440:38)\nINV-PSINGH1-MBP:voting-app-2 singh.p$\nCan someone help me on this. ",
    "debris": "hi @tcoulter !\nThis issue is not related with loading artifacts for js tests. It's about a bug in default solidity tests loader. The bug is somehow related with loading .sol files containing multiple tests by a default test .sol file.\nIf I remove default .sol tests, everything works fine.. @bmmpxf the pr for the docs is totally unrelated. Please look at 'steps to reproduce' again.. > Did you add an artifacts.require() statement in any of your tests related to Contracts.sol, ContractOne or ContractTwo?\nNo ;). ",
    "t4t5": "Stumbled upon this bug as well. Seems like it makes it impossible to test multiple contracts that are in the same file through Solidity tests.. ",
    "Asone": "Any news on this ? I just managed to have the same problem. I'll post my code and config tomorrow to see if it can help. \nNote that running each test file separately doesn't generate the failures on my side.. Those lasts fixes are really great news ! \nI've been digging through the web3-one branches of the multiples tools you had to update in order to be able to have web3 1.0.x run. That's some complex work ! \nWith the arrival of web3 1.0.x i have a small question though as i'm questionning myself about it. Will we be able to load some wallets outside the ganache-cli | geth node and use them in the truffle-contract library ? \nI've been trying with the current version ( using the 0.20.0 package ) but the lib has been spitting some exceptions. I was wondering that if loading a provider with some web3.eth.wallet.add() instructions we would be able to use such loaded wallets in order to sign the transactions ? \nThat would be a great improvement as it would really ease the use of the contracts with addresses that are not coming directly from the node and would allow using the wallets outside of plugins like metamask. \nAnyway, great work ! Thanks for the effort ! . ",
    "kktam": "\ntruffle migrate \n\nalso have the same issue. there was an older YouTube that shows this used to work with Solidity 0.4.11 where the name of the contracts does not match the file Youtube look at time 21:28 (min:sec), and you will see the demo show truffle migrate can do this.\nInstead when I tried it I go the following error:\n/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-resolver/index.js:37\n  throw new Error(\"Could not find artifacts for \" + import_path + \" from any sources\");\n^\nError: Could not find artifacts for ./Elections from any sources\n    at Resolver.require (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-resolver/index.js:37:1)\n    at Object.require (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-core/~/truffle-migrate/index.js:234:1)\n    at ResolverIntercept.require (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-core/~/truffle-migrate/resolverintercept.js:20:1)\n    at /Users/nelsontam/Documents/Work/blockchain/election/migrations/2_deploy_contracts.js:1:26\n    at ContextifyScript.Script.runInContext (vm.js:35:29)\n    at ContextifyScript.Script.runInNewContext (vm.js:41:15)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-require/require.js:97:1\n    at tryToString (fs.js:456:3)\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:443:12)\n. It may be related to this issue 552. ",
    "toledoal": "This happened to me as well. It appears that the contract name \"must\" match the variable name on import/export (because is the object you are actually importing): \nYourContractFileName.sol\n`pragma solidity ^0.4.4;\ncontract ContractName {\n    string public candidate = \"Any Name\";\n    constructor () public {\n    }\n    function GetMessage() public returns (string) { \n    return candidate;\n  }\n}`\nYour migration file\n`var ContractName = artifacts.require(\"./YourContractFileName\");\nmodule.exports = function(deployer) {\n  deployer.deploy(ContractName);\n};`\n. ",
    "psyshe": "Have related issue with:\n1_initial_migration.js\n```\nconst DMT = artifacts.require(\"Token\");\nconst DemoCrowdsale = artifacts.require(\"Crowdsale\");\nmodule.exports = function(deployer) {\n  deployer.deploy(Token)\n    .then(function() {\n      return deployer.deploy(Crowdsale);\n        });\n};\n```\ntruffle.js\nnetworks: {\n  ropsten: {\n    provider: function() {\n      return new HDWalletProvider(mnemonic, providerUrl);\n    },\n    network_id: '3',\n    gas: 4512388\n  }\nAs result of execution all contracts deployed but:\nRunning migration: 1_initial_migration.js\n  Deploying Token...\n  ... 0x\n  Token: 0x\n  Deploying Crowdsale...\n  ... 0x\n  Crowdsale: 0x\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: Could not find artifacts for ./Migrations from any sources\n    at Resolver.require (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-resolver/index.js:37:1)\n    at Object.require (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-core/~/truffle-migrate/index.js:234:1)\n    at ResolverIntercept.require (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-core/~/truffle-migrate/resolverintercept.js:20:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-core/~/truffle-migrate/index.js:49:1\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:118:7)\nThere is no folder /usr/local/lib/node_modules/truffle/build/webpack .\n~/truffle-resolver/index.js:37:1 is \nthrow new Error(\"Could not find artifacts for \" + import_path + \" from any sources\");\nUPD:\nOkay, added the 1_initial_migration.js and dummy Migrations.sol contract, moved my contracts/deployments into 2_migration.js\nIssue's gone.\nBut now stuck on 'Saving artifacts' issue:\nhttps://github.com/trufflesuite/truffle-migrate/issues/14. ",
    "kyriediculous": "This is still a problem in 4.1.14 yes, albeit with the test command not the compile command. \nWhen file is called 1_test_assert.sol and the contract has TestAssert as name: \n```\n$ truffle test test/1_test_assert.sol\nCompiling .\\contracts\\Assert.sol...\nCompiling .\\contracts\\Migrations.sol...\nCompiling .\\test\\1_test_assert.sol...\nCompiling .\\test\\Koans.sol...\nError: Could not find artifacts for ./1_test_assert.sol from any sources\n    at Resolver.require (C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-resolver\\index.js:37:1)\n    at TestResolver.require (C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\testing\\testresolver.js:17:1)\n    at C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\test.js:109:1\n    at Array.map ()\n    at C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\test.js:107:1\n```\nReproduction: https://github.com/kyriediculous/solidity-koans\nI think the CLI should not take artifacts but paths, I think you should only be able to use the contractName when explicitly calling artifacts.require() in migrations/test files since you are then calling on the JSON artifacts, not the Solidity file. Does that make sense @eggplantzzz ? \nI feel like this is a really simple convention that could clear up alot of confusion around that subject because I've seen many people struggle with that bit. \nIts very misleading because the truffle migration file does show a path in artifacts.require() which is wrong because to start with there is no Migrations.sol file in the migrations directory. But perhaps I should make a seperate issue for this last thing. \nCORRECT: var Migrations = artifacts.require(\"Migrations\");\nWRONG(at least it seems wrong to me?): var Migrations = artifacts.require(\"./Migrations.sol\");. Still not solved. Hi, has this been merged already? \nI'm still getting this issue (in my case with gasPrice 0 and using PoA on Azure).\nWorks fine without --dry-run \nTruffle v4.1.8 (core: 4.1.9)\nSolidity v0.4.24 (solc-js)\nCheers!. Turns out the problem was the unclear truffle documentation.\ngasPrice should be given as a string , not an integer\nThe same goes for any other variable given in the config\nThey should be passed as strings, yet the documentation shows integers being passed as value.. Apologies for the dupe, looking forward.. This is intended javascript behaviour, though can be a bit annoying.\nYou can pass the context in arrow functions explicitly as well.\nconst mocha = require('mocha')\nmocha.describe('my test', (suite) => {\n  suite.it('does something', async () => {\n    suite.timeout(0) //disable those 2000ms timeout errors\n  //test something\n  })\n}). Awesome, thanks for being on top of it !\n. Cool ! I will check it out over the weekend and report my findings! Many thanks.. Been using truffle ^5.0.0 for some weeks now and the reasoning strings work very well while testing. \nMuch clearer than before when running into reverts, saves a ton of time.\n10/10. Possibly related to contract code size limit since homestead - https://github.com/ethereum/EIPs/issues/170\nCheck out https://github.com/trufflesuite/ganache/issues/674 \nReply by @cgewecke : \n\n@XertroV This could be because ganache-cli implements EIP-170 which was included in the Byzantium fork and limits contract sizes. @seesemichaelj (one of the ganache engineers) has been working to make that optional although AFAIK those vm changes haven't made it into a build here yet.\nIf you need a short term workaround - ethereumjs-testrpc-sc is a coverage enabled ganache fork used by solidity-coverage which has EIP-170 turned off. (It's basically ganache-cli 6.1.0.)\n```\n$ npm install --save ethereumjs-testrpc-sc\n$ ./node_modules/.bin/testrpc-sc --port 8545 --gasLimit 0xfffffffff # Example launch\n```\n. Right. Shouldn't be an issue then indeed. \n\nHave you tried removing the amount of gas that's being sent in the config file? \nPS: Afaik Rinkeby is POA and should be used over Ropsten which often gets rearranged. . A different error I get is that it's not even detecting the revert.\nWhen encapsulating the call in a try catch it will show the revert error though.\nIs execution order guaranteed when using async calls? \nWhen removing assertError tests from my test code everything runs perfectly.\n```\nPS C:\\users\\n\\documents\\poc-test> truffle test\nUsing network 'development'.\nContract: Test contracts\n    \u221a Should have ContractRegistry deployed\n    \u221a Should have peopleLib deployed\n    \u221a Should have added peopleLib to the contractRegistry\n    \u221a SHould have deployed peopleProxy\n    \u221a Should have added peopleProxy to the contractRegistry\n    \u221a Should have deployed groupLib\n    \u221a Should have added groupLib to the contractRegistry\n    \u221a Should have deployed groupProxy\n    \u221a Should have added groupProxy to the contractRegistry\n    \u221a Should have ContractRegistry deployed\n    \u221a Should have deployed bountyLib\n    \u221a Should have added bountyLib to the contractRegistry\n    \u221a Should have peopleLib deployed\n    \u221a Should have added peopleLib to the contractRegistry\n    \u221a Should have deployed bountyProxy\n    \u221a Should have added bountyProxy to the contractRegistry\n    \u221a SHould have deployed peopleProxy\n    \u221a Should have added peopleProxy to the contractRegistry\n    \u221a Should have deployed timesheetLib\n    \u221a Should have added timesheetLib to the contractRegistry\n    \u221a Should have deployed groupLib\n    \u221a Should have added groupLib to the contractRegistry\n    \u221a Should have deployed timesheetProxy\n    \u221a Should have added timesheetProxy to the contractRegistry\n    \u221a Should have deployed groupProxy\n    \u221a Should have added groupProxy to the contractRegistry\n    \u221a Should have deployed Controller\n    \u221a Should have added controller to the contractRegistry\n    \u221a Should have deployed bountyLib\n    \u221a Should have added bountyLib to the contractRegistry\n    \u221a Should have deployed people-storage\n    \u221a Should have added people-storage to the contractRegistry\n    \u221a Should have deployed bountyProxy\n    \u221a Should have added bountyProxy to the contractRegistry\n    \u221a Should have deployed timesheet-storage\n    \u221a Should have added timesheet-storage to the contractRegistry\n    \u221a Should have deployed timesheetLib\n    \u221a Should have added timesheetLib to the contractRegistry\n    \u221a Should have deployed timesheetProxy\n    \u221a Should have added timesheetProxy to the contractRegistry\n    \u221a Should have deployed Controller\n    \u221a Should have added controller to the contractRegistry\n    \u221a Should have deployed people-storage\n    \u221a Should have added people-storage to the contractRegistry\n    \u221a Should have deployed timesheet-storage\n    \u221a Should have added timesheet-storage to the contractRegistry\n    Registry\n      People\n        \u221a Should register a new user and retrieve it (132ms)\n        \u221a Should update the user with attributes that are not empty (115ms)\n        \u221a Should register accounts1 (185ms)\n      Group creation & membership\n        \u221a Should create a new group (173ms)\n        \u221a should let accounts[1] request membership (108ms)\n        \u221a lets accounts[0] accept the membership (140ms)\n        \u221a Should add the group to accounts1 profile (61ms)\n        \u221a Should let a member leave a group (285ms)\n      Bounty creation & proposals\n        \u221a Lets accounts[0] create a bounty (205ms)\n55 passing (5s)\n```. Sadly not. The assertError code came from one of the openZeppelinLabs so it should work.\nWhen I await the assertError the faills with assert.fail (try block) and the remainder of the tests below it won't even run.\nThe only seamless tests that run with assertError() are single ones or when they are at the end of a describe block (as they can't interfere with later tests in the same block then). \n. I refactored my contracts to have access control in my user entry point as well as added the await in front as you demonstrated. Seems to work now. Thanks!. Sorry but this is not an issue.\nYou do never ever ever have to put your JSON ABI's fully on a webserver. \nYou never ever ever have a webserver when running a dappclient (ideally).\nBecause that means centralizing the architecture again. \nThe necessary configuration will be included upon building with webpack. . I guess I took a very long sentence to say that webpack removes unused JSON if you import JSON files.\nhttps://webpack.js.org/guides/tree-shaking/\nYou can upload your static bundle onto IPFS/Swarm\nMy bundle after building/bundling is 5.2mb and is more than a basic app.\n. On windows use truffle-config.js instead of truffle.js for your truffle configuration file, delete truffle.js .. @CruzMolina  my dependencies are  still not installing properly when usingnpm i  truffle-hdwallet-provider@web3-one -s \nSame missing dependency (any-promise) \nAm I using an old tag?. Same issue on Geth PoA, it's not dependent on any network type it's just a bad release I think. \nProbably too many breaking changes have been introduced and not properly tested for edge cases like weird ABI's and stuff.\nI've had this ABI issue before when using ethers.js and web3 to compile contracts that reference storage structs as function arguments. Estimategas completely flips out if they see that AND proxy calls. \nGetting a bunch of issues after upgrading to truffle 5.0.1 that I did not have before. \nwithout --reset my contracts compile and then I get an error.\nWith --resetmy contracts compile and then it just hangs. \nThere are no gas issues or errors in my contracts. \n```\nError: Returned values aren't valid, did it run Out of Gas?\n    at ABICoder.decodeParameters (C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3-eth-abi\\src\\index.js:226:1)\n    at Contract._decodeMethodReturn (C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3-eth-contract\\src\\index.js:465:1)\n    at Method.outputFormatter (C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3-eth-contract\\src\\index.js:818:1)\n    at Method.formatOutput (C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3-eth-contract\\~\\web3-core-method\\src\\index.js:163:1)\n    at sendTxCallback (C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3-eth-contract\\~\\web3-core-method\\src\\index.js:473:1)\n    at C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3-core-requestmanager\\src\\index.js:147:1\n    at Object.intermediary [as callback] (C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\ganache-core\\lib\\provider.js:114:1)\n    at self.engine.sendAsync (C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\ganache-core\\lib\\provider.js:169:1)\n    at C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\ganache-core\\~\\web3-provider-engine\\index.js:152:1\n    at C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\async\\internal\\once.js:12:1\n    at replenish (C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\async\\internal\\eachOfLimit.js:61:1)\n    at C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\async\\internal\\eachOfLimit.js:71:1\n    at eachLimit (C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\async\\eachLimit.js:43:1)\n    at C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\async\\internal\\doLimit.js:9:1\n    at Object.end [as callback] (C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\ganache-core\\~\\web3-provider-engine\\index.js:127:1)\n    at intermediary (C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\ganache-core\\lib\\statemanager.js:401:1)\n    at C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\ganache-core\\lib\\statemanager.js:626:1\n    at C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\ganache-core\\lib\\blockchain_double.js:482:1\n    at StateManager.proto.revert (C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\ganache-core\\~\\ethereumjs-vm\\dist\\stateManager.js:269:1)\n    at cleanUpAndReturn (C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\ganache-core\\lib\\blockchain_double.js:477:1)\n    at C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\ganache-core\\lib\\blockchain_double.js:529:1\n    at C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\ganache-core\\~\\ethereumjs-vm\\dist\\runTx.js:44:1\n    at C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:3888:1\n    at C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:473:1\n    at replenish (C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:1006:1)\n    at iterateeCallback (C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:995:1)\n    at C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:969:1\n    at C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:3885:1\nTruffle v5.0.1 (core: 5.0.1)\nNode v10.13.0\n```\nThrew 5.0.1 in the trashcan , reinstalled 4.1.15 and all troubles go away.\n```\nDID+n.vergauwen@DID00003 MINGW64 ~/Desktop/knuckles-web/contracts (dev)\n$ npm uninstall -g truffle\nremoved 90 packages in 1.302s\nDID+n.vergauwen@DID00003 MINGW64 ~/Desktop/knuckles-web/contracts (dev)\n$ npm i truffle@4.1.15 -g\nC:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\truffle -> C:\\Users\\N.vergauwen\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js\n+ truffle@4.1.15\nadded 81 packages from 311 contributors and updated 1 package in 5.305s\nDID+n.vergauwen@DID00003 MINGW64 ~/Desktop/knuckles-web/contracts (dev)\n$ truffle migrate --reset --network development -f 1 -t 2\nCompiling .\\contracts\\BountyContract.sol...\nCompiling .\\contracts\\BountyInterface.sol...\nCompiling .\\contracts\\BountyProxy.sol...\nCompiling .\\contracts\\Migrations.sol...\nCompiling .\\contracts\\OrganisationContract.sol...\nCompiling .\\contracts\\Token.sol...\nCompiling .\\contracts\\UsersRegistry.sol...\nCompiling .\\contracts\\recurring-bounties\\RecurringBountyContract.sol...\nCompiling .\\contracts\\recurring-bounties\\RecurringBountyFactory.sol...\nCompiling .\\contracts\\recurring-bounties\\RecurringBountyInterface.sol...\nCompiling .\\contracts\\util\\Ownable.sol...\nCompiling .\\contracts\\util\\SafeMath.sol...\nWriting artifacts to .\\build\\contracts\nUsing network 'development'.\nRunning migration: 1_initial_migration.js\n  Replacing Migrations...\n  ... 0x19acf643254b95bc61226e941b028d06eb070c536b3c5ba7e4d643782a6045cd\n  Migrations: 0x62550c409ab8ad9a0382f5237cf4aabf8a0c52e7\nSaving successful migration to network...\n  ... 0x458bd9950a8ac2890accfbcab87eb5ea93be2d07d7f05d5b7d4344ca8167ed2d\n```\n. ",
    "aliaksandr-adzinets": "I guess this should mean \"don't use truffle init webpack, use either just truffle init or truffle unbox webpack, however, in the Truffle world, new commands are issued faster than docs updated.. > but there is no truffle unbox webpack\nThis is the command to download the Webpack Truffle Box (and install the necessary dependencies). This box is Truffle's most bare official implementation with webpack. Includes contracts, migrations, tests, user interface and webpack build pipeline. See https://truffleframework.com/boxes/webpack\n\nTruffle Boxes are helpful boilerplates that allow you to focus on what makes your dapp unique. In addition to Truffle, Truffle Boxes can contain other helpful modules, Solidity contracts & libraries, front-end views and more; all the way up to complete example dapps.. I tried to install Truffle 5.0.0 and got the same issue.\nRolling back to Truffle 4.1.14 works as expected.\nMy environments is: Windows 10, MSVS 2017, Python 2.7, node-gyp 3.8.0, npm 6.4.1, Node.js 10.14.1.. \n",
    "freew01f": "but there is no truffle unbox webpack. ",
    "cag": "I've started a branch containing a test scenario where this might take shape: https://github.com/trufflesuite/truffle/compare/develop...cag:migrate-deps\nI think that build artifacts for dependency migrations should exist in the package folder's build folder. This would help backwards compatibility and avoid name collisions between packages, as artifacts are not aware of the file they came from, so to speak.\nMaybe it would be good if the migrations can just be inferred from the package.jsons of the projects? That would require a toposort and might break backwards compatibility, though I think this could be the easiest way to go, and I don't think any Truffle project in the wild relies on migrations in child dependencies not being run. We could introduce an opt-out configuration parameter in case a project's dependency migrations aren't supposed to be run.\nAlternatively, we could make an opt-in configuration parameter for packages.\nHaving read the https://github.com/ethpm/ethpm-spec I think that that is maybe also something to strive for, though some differences about how ethpm is (a bunch of pointers to stuff on IPFS, mostly contracts and blockchain locations) vs how npm is (tarballs with build artifacts, migrations, scripts and tests in addition to the contracts) maybe should indicate that npm should be approached somewhat differently? It's reasonable to assume that the migration scripts are also shipped with the packages on npm.\nAlso there is a way to artifacts.require ethpm packages documented already. I admit I don't know terribly much about it though, but it uses a 'package/Contract' name format. I am using an '@org/package:Contract' name format in my fork. Dunno if that is a good or bad idea, but considering artifacts would be '@org/package/build/contracts/Contract' if migrations succeed, maybe that makes sense? I dunno, what do you think?\nAlso, I heard @cgewecke was working on this...\nAlso hi @gnidan . Alright, I am almost there, but everything is usable already, so I am putting it out, but please wait a bit before you start reviewing those PRs. Things could still use a bit of polish, and the test case for running tests fails (it is run before the migration test so that it won't produce passing-like behavior, as it should).\nI am keeping backwards compatibility with the slashes instead of colons, but I do think that colons should be allowed. However, I will leave that as a separate issue.. Hey, it is done, and you can try it out with\nbash\nnpm install --save-dev cag/truffle#migrate-deps-build. Okay I've had to make a few edits because I overlooked a scenario. The build branch is also updated to reflect those edits I've made.. Hey, no problem! Yeah SGTM.\nOn Mon, Jun 11, 2018, 10:07 PM c-g-e-w-e-k-e-> notifications@github.com\nwrote:\n\nHi @cag https://github.com/cag oh cool!\nI'm lagging really bad here sorry - I wanted to leave you a note because\nthere's a bit of chaos coming down the line this week:\n\nwe're moving the whole truffle project back into one repo (using\n   Lerna, on wednesday). As part of that - I'm going to merge all of your work\n   into staging branches that will carry over into the new format.\nwe're planning a beta release for Truffle V5 at the end of the\n   month, and was thinking that this work would ultimately target that branch\n   (next). Are you ok with that? V5 will have some breaking changes because it\n   upgrades web3 - might be kind of annoying. But your changes also fit really\n   well with the Migrations rewrite which is part of it.\nFinally, there are some files where there will be conflicts - as\n   soon as the ongoing migrations work is merged into next here, I'm going to\n   resolve those and get this stuff re-opened as a single PR and ping you.\n\nSorry about the mayhem and thanks so much this work - it's going to be\nreally really cool to have this.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/554#issuecomment-396451511,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AASNz5TmUeE7czYZlWqXmne64JpAoIUuks5t7zCNgaJpZM4PKzzW\n.\n. Hey @cgewecke , so sorry I haven't responded yet! :sob: It's been kinda crazy, so I haven't had a chance to really look over this, but I promise I haven't forgotten about you! I still need to make some time to sit down and really go through this.\n\nIn fact, I've been meaning to do something for TruffleCon related to this ;) This is just a rumor though, to make up for the fact that I have not really looked at this PR yet :'(\nAnyway, just wanted to bump this so you know I am alive and intending to resolve this soon.. So this is something unrelated to the test note, I think. This is also something which I've had some trouble with doing successfully, so I'm not surprised that it is so brittle.\nOff the cuff, I'd guess one of two things are happening. During a dry run, either the deployment data isn't persisted between dry runs, or the resolvers for the runs aren't set up to find the temporary artifacts created by earlier dependencies in a dry run.\nAnyway, I'll give this a more thorough look soon.\nEDIT: A note for posterity: this weirdness has been resolved. It had to do with a test of the migration dry run failing due to the tests using require to read certain generated JSON so that the test can assert things about the contents of those objects. The actual JSON changes between test cases, but require caches what is read depending on the path, so this causes the test cases to try and assert things about stale objects. Anyway, the issue has been resolved.. No... I've been doing this work so that some stuff can finally be\nrefactored to use this\nOn Fri, Jul 13, 2018, 10:07 PM c-g-e-w-e-k-e-> notifications@github.com\nwrote:\n\n@cag https://github.com/cag Great!\nOk just one last thing - do you happen to have an example at hand I could\ndo more of an E2E test with? If you just point me in the right direction\nthat's more than enough...\nIs there anything over at Gnosis - like an example that consumes some\nGnosis migrations? NBD if not - I will mock something up, I'm really\nexcited to try this out \ud83d\ude42\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/pull/1085#issuecomment-404994405,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AASNzxJsHLvk-jn9rgvCl_RDgC412YJYks5uGWCDgaJpZM4VDKC1\n.\n. @cgewecke Okay so this didn't work with truffle test out of the box with a default configuration. That omission has been addressed here: #1310 . Ah yes, that is neat, though I'd like to remark that there is already a syntax which is (somewhat) documented in the Truffle docs here:\nvar ENS = artifacts.require(\"ens/ENS\");\n\nand here:\n\nvar SimpleNameRegistry = artifacts.require(\"example-truffle-library/SimpleNameRegistry\");\n\n@frangio I think you should be able to take advantage of this immediately by simply publishing the build artifacts as part of the ZOS packages. Since openzeppelin-solidity is an unscoped package, this should work right now with the official release.\n@gnidan @cgewecke There's overlap in that #1085 also has a changeset for truffle-resolver which enables the existing syntax for scoped packages on NPM (so, artifacts.require('@scope/pkg/Contract')).. Thanks @gnidan!. @gnidan No worries, take your time!\nI realize that there isn't really any documentation on this feature, so here is how it works as a first take (dunno where or whether to make a PR for docs):\n\nThere is now a new configuration option for your projects: migrateDependencies. Set this to something truthy in your truffle-config.js:\njs\nmodule.exports = {\n  // ...\n  migrateDependencies: true\n};\nTruffle will now look for a package.json next to your truffle-config.js. If found, Truffle will look for dependencies in it. If found, Truffle will go through these dependencies. The dependencies which contain a Truffle config in their root directory will be considered Truffle projects, and those dependencies will have their package.json file checked for dependencies.\nThe collected dependencies' TruffleConfigs are sorted from least dependent to most dependent, as well as transformed to refer to a common node_modules folder, so they can be tied together in compilation, migration, etc.\nIn the case of truffle migrate, Truffle will place the compiled artifacts into the package directories themselves (e.g. node_modules/@scope/pkg/build/contracts/MyContract.json). The resolver instances artifacts in Truffle know when they see artifacts.require(\"@scope/pkg/MyContract\") to search for them in the appropriate location. This also means that artifacts distributed in NPM packages are shared with other NPM packages as well as the project at hand when using Truffle. (This resolver change is not behind a flag, but it also doesn't fail any of the existing tests)\nIn the case of truffle migrate --dry-run and truffle test, Truffle will copy those packages' artifacts to an analogous location inside of the temporary directory generated for holding build artifacts and stuff before running the migrations using artifactors configured to output to this directory: path.join(temporaryDirectory, \"node_modules\", config.packageName, \"build\", \"contracts\")\n\nThis would be the MVP for such a feature I think. Some potential improvements/design questions:\n\nHonor migrateDependencies from dependencies' configurations.\nBy default also migrate devDependencies during npm test. Also maybe design an option for that (see below).\nExpand migrateDependencies to allow other options\nIt can be included alongside a migrateDevDependencies, and some valid values for both may be true, 'test', 'migrate'\nIt can also maybe be an array ['pkg1', 'pkg2'] to indicate which dependencies should be migrated.\nMaybe an object like { pkg1: true, pkg2: 'test', '@org/pkg3': 'migrate' } or something?\n\nHowever, I think this is a good time to say I'm hands off on this for now, as this should still be backwards-compatible with Truffle projects du jour, and that's when I said I would stop.. ",
    "snario": "As proxy contract schemes like what Gnosis does here become more common, this will be quite helpful.. ",
    "aaronmboyd": "Exact same behaviour working through the simple Truffle Pet Shop tutorial.\n```\n$ truffle test\nUsing network 'development'.\nCompiling .\\contracts\\Adoption.sol...\nCompiling .\\test\\TestAdoption.sol...\nCompiling truffle/Assert.sol...\nCompiling truffle/DeployedAddresses.sol...\nCompilation warnings encountered:\ntruffle/Assert.sol:114:20: Warning: This declaration shadows an existing declaration.\n    function equal(string A, string B, string message) constant returns (bool result) {\n                   ^------^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n,truffle/Assert.sol:137:23: Warning: This declaration shadows an existing declaration.\n    function notEqual(string A, string B, string message) constant returns (bool result) {\n                      ^------^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n,truffle/Assert.sol:206:20: Warning: This declaration shadows an existing declaration.\n    function equal(bytes32 A, bytes32 B, string message) constant returns (bool result) {\n                   ^-------^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n,truffle/Assert.sol:226:23: Warning: This declaration shadows an existing declaration.\n    function notEqual(bytes32 A, bytes32 B, string message) constant returns (bool result) {\n                      ^-------^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n,truffle/Assert.sol:286:20: Warning: This declaration shadows an existing declaration.\n    function equal(address A, address B, string message) constant returns (bool result) {\n                   ^-------^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n,truffle/Assert.sol:305:23: Warning: This declaration shadows an existing declaration.\n    function notEqual(address A, address B, string message) constant returns (bool result) {\n                      ^-------^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n,truffle/Assert.sol:403:20: Warning: This declaration shadows an existing declaration.\n    function equal(bool A, bool B, string message) constant returns (bool result) {\n                   ^----^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n,truffle/Assert.sol:426:23: Warning: This declaration shadows an existing declaration.\n    function notEqual(bool A, bool B, string message) constant returns (bool result) {\n                      ^----^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n,truffle/Assert.sol:451:20: Warning: This declaration shadows an existing declaration.\n    function equal(uint A, uint B, string message) constant returns (bool result) {\n                   ^----^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n,truffle/Assert.sol:474:23: Warning: This declaration shadows an existing declaration.\n    function notEqual(uint A, uint B, string message) constant returns (bool result) {\n                      ^----^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n,truffle/Assert.sol:497:22: Warning: This declaration shadows an existing declaration.\n    function isAbove(uint A, uint B, string message) constant returns (bool result) {\n                     ^----^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n,truffle/Assert.sol:520:24: Warning: This declaration shadows an existing declaration.\n    function isAtLeast(uint A, uint B, string message) constant returns (bool result) {\n                       ^----^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n,truffle/Assert.sol:543:22: Warning: This declaration shadows an existing declaration.\n    function isBelow(uint A, uint B, string message) constant returns (bool result) {\n                     ^----^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n,truffle/Assert.sol:566:23: Warning: This declaration shadows an existing declaration.\n    function isAtMost(uint A, uint B, string message) constant returns (bool result) {\n                      ^----^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n,truffle/Assert.sol:635:20: Warning: This declaration shadows an existing declaration.\n    function equal(int A, int B, string message) constant returns (bool result) {\n                   ^---^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n,truffle/Assert.sol:658:23: Warning: This declaration shadows an existing declaration.\n    function notEqual(int A, int B, string message) constant returns (bool result) {\n                      ^---^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n,truffle/Assert.sol:681:22: Warning: This declaration shadows an existing declaration.\n    function isAbove(int A, int B, string message) constant returns (bool result) {\n                     ^---^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n,truffle/Assert.sol:704:24: Warning: This declaration shadows an existing declaration.\n    function isAtLeast(int A, int B, string message) constant returns (bool result) {\n                       ^---^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n,truffle/Assert.sol:727:22: Warning: This declaration shadows an existing declaration.\n    function isBelow(int A, int B, string message) constant returns (bool result) {\n                     ^---^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n,truffle/Assert.sol:750:23: Warning: This declaration shadows an existing declaration.\n    function isAtMost(int A, int B, string message) constant returns (bool result) {\n                      ^---^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n,truffle/Assert.sol:1267:27: Warning: This declaration shadows an existing declaration.\n    function balanceEqual(address A, uint b, string message) constant returns (bool result) {\n                          ^-------^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n,truffle/Assert.sol:1287:30: Warning: This declaration shadows an existing declaration.\n    function balanceNotEqual(address A, uint b, string message) constant returns (bool result) {\n                             ^-------^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n,truffle/Assert.sol:1306:28: Warning: This declaration shadows an existing declaration.\n    function balanceIsZero(address A, string message) constant returns (bool result) {\n                           ^-------^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n,truffle/Assert.sol:1325:31: Warning: This declaration shadows an existing declaration.\n    function balanceIsNotZero(address A, string message) constant returns (bool result) {\n                              ^-------^\ntruffle/Assert.sol:64:5: The shadowed declaration is here:\n    uint8 constant A = uint8(byte('a'));\n    ^---------------------------------^\n```\nEnvironment\n\nOperating System: Windows 10 Pro (Version 10.0.14393 Build 14393)\nTruffle: v3.4.9 (core: 3.4.8)\nSolidity: v0.4.15 (solc-js)\nEthereum client: testrpc\nnode version: v6.9.1\nnpm version: 3.10.8\n. Confirmed also that reverted to truffle@3.4.3 and warnings were removed. Nonetheless they appear to be warnings only, and didn't affect the outcome of my unit tests.. \n",
    "nieldlr": "Experiencing same issue as @aaronmboyd with these versions on MacOS Sierra:\nTruffle v3.4.9 (core: 3.4.8)\nSolidity v0.4.15 (solc-js)\nNode v7.10.1. ",
    "baldwinjj": "Same issue:\n Ubuntu 16.04.2\n Truffle v3.4.9\n Solidity v0.4.13\n Node v7.4.1. ",
    "slash686": "Experiencing same issues:\n\nmacOS 10.12.6 (16G29)\nTruffle v3.4.9\nsolc-js v0.4.15\nNode v7.0.0. \n",
    "acidfreako": "Windows 10 64 bit\nTruffle v3.4.9 (core: 3.4.8)\nSolidity v0.4.15 (solc-js)\nnode v6.11.3\nexperience same issue as @aaronmboyd \n. Truffle v4.1.14 (core: 4.1.14)\nSolidity v0.4.24 (solc-js)\ngetting the same error too on ropsten. ",
    "SCBuergel": "We ran into the same issue. It is hard to reproduce and it is hard to provide a minimum working example. [I cannot post the code that we got from the customer to audit.] When minimizing the contract that failed to a hello-world-style example with getter and setter functions all tests seemed to always be working well. The issue seems to surface beyond a certain complexity.. Some observations, that might help:\n- When contract is \"too simple\" (too fast?) this issue happens less frequently.\n- When javascript is \"too slow\" this issue happens less frequently, e.g. a simple console.log before proceeding usually prevents the issue from happening at all.\n- This issue usually surfaces more frequently with promises than with async.. Same thing here, failing for a vanilla migrations script without async if\n1) the contract is sufficiently complex AND\n2) the JS test code is sufficiently efficient (no console.logs, statements ideally inlined). >They will be executed in that order, the file with the lowest numerical prefix will be executed first.\n@chuacw our tests are being executed in arbitrary order and that order changes from one test to another. IMO integration tests with complex dependencies are surfacing a lot more crucial issues than simple unit tests and therefore this feature would be highly relevant for smart contract security in general.. Thank you for providing all these insights @cgewecke.\n\non linux and mac it executes them in alphabetical order\n\nNo, I'm on mac and the order seems to be random at times (it is mostly ok, hard to reproduce when it's not).\n\nThat said, it's possible tests executing in arbitrary order might be caused by not returning promise chains to Mocha / not using the done method.\n\nI always break all my fingers when working with promises, hence I'm doing async/await. Maybe that adds to the problem.. ",
    "pmumby": "Yeah I found the same thing. The example code repo I linked is a minimal working example. I slowly added complexity until the issue presented itself regularly enough to verify. Still intermittent, but doing 5-6 subsequent tests should exhibit the instability.\nThe more the complexity ramps up, the more frequently the test failures are encountered (until you hit a point where you have to run it 8-9 times just to get a passed test). Which is where I'm at in my main project currently.\nThe issue appears to be a race condition between the migration scripts, and the test framework. ie: somehow the migrations are not fully completing on the chain in TestRPC before the tests run, and as a result the tests fail for various reasons.\nSo far I've been unable to nail down exactly where this race condition is though.. Thanks for the suggestion, but I should note, that before creating this\ntest case, the problem originally showed in code that was NOT using async\nat all...\nIn the case of my example yes I'm using async, but it doesn't matter. This\nproblem will exhibit without async as well. Async does seem to make it\nworse however (why I added it to make this example). For example turning\nasync on in the example code appears to alleviate it, until you push the\ncomplexity up a little more, then it shows up again anyway.\nIn my main project, with async on in the migrations, it errors out 100% of\nthe time, with async removed using nested promises with .then() it only\nfails 60% to 75% of the time, but still a major issue.\nOn Sat, Sep 9, 2017 at 5:20 PM, Jim McDonald notifications@github.com\nwrote:\n\nAs a workaround you can change the migration code to not use async. For\nexample, with the repo you linked you can change migrations/4_setup.js to\nbe\nmodule.exports = function(deployer, network, accounts) {\n    var primary = accounts[0];\n    return ContractA.deployed().then(aInstance => {\n        return ContractB.deployed().then(bInstance => {\n            return aInstance.setBAddress(bInstance.address).then(() => {\n                return bInstance.setAAddress(aInstance.address);\n            });\n        });\n    });\n};\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/557#issuecomment-328304175,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABM8ckQtoLyZkAfUiUZDrDKPmBVJyA9Gks5sgwEXgaJpZM4PLRD3\n.\n. Yes thanks for this, you are correct, adding some additional \"time\nconsuming\" tasks in the right spot can sometimes bounce you out of the\napparent race condition.\n\nAlso your comment about promises vs async, I should further clarify my\nother note.\nAsync in the migrations seems to make it much worse.\nAsync in the tests seems to alleviate the problem somewhat.\nOn Sat, Sep 9, 2017 at 6:18 PM, Sebastian C. B\u00fcrgel \nnotifications@github.com wrote:\n\nSome observations, that might help:\n\nWhen contract is \"too simple\" (too fast?) this issue happens less\n   frequently.\nWhen javascript is \"too slow\" this issue happens less frequently,\n   e.g. a simple console.log before proceeding usually prevents the issue\n   from happening at all.\nThis issue usually surfaces more frequently with promises than with\n   async.\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/557#issuecomment-328306714,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABM8cr20acGl8Zz_xZh4maMODOUNllTmks5sgw6fgaJpZM4PLRD3\n.\n. Hi Tim, and thanks for the detailed response.\n\nPerhaps I shouldn't have used Async in my example, but as I commented in my\nearlier note. This issue DOES present itself when no use of async exists.\n(in either the tests or the migrations).\nIn my original project I had used promises with .then() throughout the\nmigrations and the tests. And that's where I first experienced it. Again as\ncomplexity increases, probability of a randomly failed test increases.\nUse of async in the tests seems to reduce this probability, and use of\nasync in the migrations seems to increase it. But the problem is still\npresent. And at the current size of my project even with pure promise based\ncode, I'm seeing failed tests very frequently. (with the exact same\nbehavior outlined in this issue).\nMy problem is that it seems the steps of the migration are not always\ncompleted before the tests are run. And using for example A.deployed() to\nget a promise for the eventual deployed contract which is queued, should\nwait until the migration is successful, and then return. But it in fact\ndoes not appear to (in some cases).\nThe example code was meant to demonstrate that, and the use of async seemed\nto help it along, but I could modify that repo to exhibit the problem using\nnothing but promises if that would be helpful.\nOn Sun, Sep 10, 2017 at 2:50 AM, Tim Coulter notifications@github.com\nwrote:\n\nHi there. Creator of Truffle here.\nWhen your migrations are run, your contracts aren't being deployed.\nInstead, they are staging deployment tasks to be later performed by the\nmigration system. So the code:\ndeployer.deploy(A);\nDoesn't actually deploy A. Instead it says, \"Please deploy A for me.\"\nMaking the request for A's deployment async doesn't make much sense in\nthis context. You can think of the deployer as a deployment stager; it'll\nstage deployments tasks for later execution.\nAs of yet, Truffle's migration system doesn't yet support async. Your\nbest bet at this moment is to not use async code in your migrations. And\nyou don't really need to. For most tasks, say, two deployments, you can\nsimply say:\ndeployer.deploy(A);\ndeployer.deploy(B);\nThe deployer knows that the deployment of A is staged before B, and it'll\nrun the deployments sequentially.\nIf you need more specialty deployments, like deploying B by passing A's\naddress into B's constructor, you'd do something like this:\ndeployer.deploy(A).then(function() {\n  return deployer.deploy(B, A.address);\n});\nThis will ensure deployment of B happens after the deployment of A, and\nthe code that evaluates A.address is also run after A is deployed.\nSo, with that in mind, this is all a long way of saying that async is the\ncause of your race condition. We'll likely upgrade the migration system\nsome time in the future to support async/instantaneous deployments (i.e.,\nthe remove of staged deploys), but that will be after async is included\nin node's LTS support.\n(As an aside, the reason your tests work well with async is because\nyou're not using the deployer.)\nI'm going to close this ticket as this isn't a bug, per se. Please see our\ndocumentation\nhttp://truffleframework.com/docs/getting_started/migrations for more\ninformation on migrations.\nCheers!\nCC @gnidan https://github.com/gnidan\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/557#issuecomment-328323842,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABM8clJGuwVsXxZQd5xWaqUHI_Pia5DBks5sg4bCgaJpZM4PLRD3\n.\n. Hi Tim, thanks!\n\nI've updated the example repo. All migrations have been updated to use\npromises. All references to async/await have been removed from the 4\nmigration files:\n1_initial_migration.js\n2_deploy_a.js\n3_deploy_b.js\n4_setup.js\nIt should also be noted, I've previously verified this issue continues to\nexist even if I condense these down to a single migration script which does\nthe deployment/setup of all contracts all with proper chained promises as\nwell. The same problem occurs.\nI've verified this is still failing at least 50% of the time (in my case it\nfailed 3 times, before I got a successful test).\nThanks for looking into it further!\nOn Sun, Sep 10, 2017 at 12:52 PM, Tim Coulter notifications@github.com\nwrote:\n\nBefore I look into this further, can you remove all async and await\nexpressions from your migrations? The migrations themselves shouldn't be\nasync, and you shouldn't be calling await with the deployer.\nIf migrations still aren't being set up correctly, then I'll look into\nthis further. As it stands now, the most likely culprit is async/await.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/557#issuecomment-328355636,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABM8cka5JrMxL2pOwH09Z_rmPL0dCPp9ks5shBPFgaJpZM4PLRD3\n.\n. \n",
    "mcdee": "As a workaround you can change the migration code to not use async.  For example, with the repo you linked you can change migrations/4_setup.js to be\nmodule.exports = function(deployer, network, accounts) {\n    var primary = accounts[0];\n    return ContractA.deployed().then(aInstance => {\n        return ContractB.deployed().then(bInstance => {\n            return aInstance.setBAddress(bInstance.address).then(() => {\n                return bInstance.setAAddress(aInstance.address);\n            });\n        });\n    });\n};. ",
    "JonathanScialpi": "This article helped me resolve this issue and made my code much cleaner: https://medium.com/coinmonks/testing-solidity-with-truffle-and-async-await-396e81c54f93. ",
    "7flash": "The same issue. That's why I have deployed a lot of pointless Migrations.sol\nconfig.networks[\"mainnet\"] = {\n        provider: new HDWalletProvider(mnemonic, \"https://mainnet.infura.io/\"+infuraToken),\n        network_id: 1,\n        gas: 4e6,\n        gasPrice: 2e10\n    };. @delormemarie240 Check https://github.com/ethereum/web3.js/pull/1243\nYou can fix this line manually: https://github.com/ethereum/web3.js/pull/1243/commits/e7d7d80c08dd9014b7860a80096577c2c956e50d#diff-430c9c02bef6a7661c5b4e7b34142f7cL120. @liyihe96 exceeds 240 seconds - Probably you should just raise gas price up to 50 GWei for mainnet.. ",
    "ryanli-me": "@7flash Hi, I used yarn to download dependencies and I tried your suggestion by changing the line you mentioned in node_submodules/web3 and node_submodules/web3-engine-provider, but still didn't work. The error is either check your gas amount or exceeds 240 seconds. Could you please help? Thanks so much!. @charltonh Thanks for the info! Could you please specify which functions are not used and safe to delete?. ",
    "max-l": "Getting the same issue, I have a contract that deploys on Ganache (truffle test),\nthe contract implements the EIP20Interface, if I declare \"contract TTC is EIP20Interface\"\nin the contract, I get the error.\n```\ntruffle migrate \nCompiling ./contracts/EIP20Interface.sol...\nCompiling ./contracts/TTC.sol...\nWriting artifacts to ./build/contracts\nUsing network 'development'.\nRunning migration: 2_deploy_contracts.js\n  Deploying TTC...\n  ... 0x76abb97563016f18eb1eeedeab4ddf3d7da760a7b2669af96a3f1ceabd8224c6\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: The contract code couldn't be stored, please check your gas amount.\n    at Object.callback (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:328412:46)\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:37990:25\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:330356:9\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:176198:11\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:326008:9\n    at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:329052:7)\n    at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:176427:18)\n    at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:176717:12)\n    at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:176872:12)\n    at IncomingMessage. (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:176832:24)\n```. \n@nickjm this is my migration script :\n```\nvar TTC = artifacts.require(\"./TTC.sol\");\nvar EIP20Interface = artifacts.require(\"./EIP20Interface.sol\");\nmodule.exports = function(deployer) {\n  deployer.deploy(EIP20Interface);\n  deployer.link(EIP20Interface, TTC);\n  deployer.deploy(TTC);\n};\n```\nand my contract: \n```\ncontract TTC is EIP20Interface {\n...\n```\nThe \"The contract code couldn't be stored, please check your gas amount.\" seems to apply to the deployment  of EIP20Interface \nThis is a test settup, where can I increase the gas amount for the store transaction to succeed ? \nI am using Ganache and the account doing the deploy starts with 100 ETH, is that not enough, or is the error message about another gas treshold being busted ?\n. ",
    "nickjm": "In case this applies to any of you, make sure you try deploying any libraries you use separately, then link them to the main contract(s) to limit the gas used in each migration txn.. Same. I've noticed it's not a problem with inheritance alone, but rather for contracts in separate files. I can temporarily fix the problem by making one big file with my contract and all it's parent contracts. I'm getting this error message when connecting to Rinkeby with Infura, truffle-wallet-provider, and ethereumjs-wallet. I'm not convinced this is Ganache, but maybe my error is caused my something else.. @cgewecke to my knowledge web3 1.0 is not in beta, while web3 2.0 is in beta. What's the current status of this issue? Does the latest truffle (v4.0.6) still use web3 0.0? Is there a way to circumvent these timeouts now?. I'm having the same issue and posted an issue on ganache because it happened when I updated to the latest version on the site (Ganache 1.1.0-beta.0). I guessed maybe incorrectly that this was something to do with Byzantium and web3 0.2x\nhttps://github.com/trufflesuite/ganache/issues/315\nAlso had a semi-related issue:\nhttps://github.com/trufflesuite/ganache/issues/312. @cgewecke thanks for info but I'm still having a problem. On one of my tests that previously threw a revert (from my require statement) it now throws an error like Error: Invalid JSON RPC response: {\"id\":476,\"jsonrpc\":\"2.0\"} and error.data is undefined\nThe link for my issue is the second one above https://github.com/trufflesuite/ganache/issues/312\n. In case this isn't a bug, I've posted here:\nhttps://ethereum.stackexchange.com/questions/38033/new-ganache-1-1-0-beta-0-causes-invalid-json-rpc-response\nno one seems to know anything, and I've ran into other people with the same issue :/. ",
    "jbarros35": "not work for me see my sol file please\npragma solidity ^0.4.21;\n/**\n* Example script for the Ethereum development walkthrough\n*/\n\ncontract Wrestling {\n    /*\n    * Our wrestlers\n    /\n    address public wrestler1;\n    address public wrestler2;\nbool public wrestler1Played;\nbool public wrestler2Played;\n\nuint private wrestler1Deposit;\nuint private wrestler2Deposit;\n\nbool public gameFinished; \naddress public theWinner;\nuint gains;\n\n/**\n* The logs that will be emitted in every step of the contract's life cycle\n*/\nevent WrestlingStartsEvent(address wrestler1, address wrestler2);\nevent EndOfRoundEvent(uint wrestler1Deposit, uint wrestler2Deposit);\nevent EndOfWrestlingEvent(address winner, uint gains);\n\n/**\n* The contract constructor\n*/\nfunction Wrestling() public payable {\n    wrestler1 = msg.sender;\n}\n\n/**\n* A second wrestler can register as an opponent\n*/\nfunction registerAsAnOpponent() public {\n    require(wrestler2 == address(0));\n\n    wrestler2 = msg.sender;\n\n    WrestlingStartsEvent(wrestler1, wrestler2);\n}\n\n/**\n* Every round a player can put a sum of ether, if one of the player put in twice or \n* more the money (in total) than the other did, the first wins \n*/\nfunction wrestle() public payable {\n    require(!gameFinished && (msg.sender == wrestler1 || msg.sender == wrestler2));\n\n    if(msg.sender == wrestler1) {\n        require(wrestler1Played == false);\n        wrestler1Played = true;\n        wrestler1Deposit = wrestler1Deposit + msg.value;\n    } else { \n        require(wrestler2Played == false);\n        wrestler2Played = true;\n        wrestler2Deposit = wrestler2Deposit + msg.value;\n    }\n    if(wrestler1Played && wrestler2Played) {\n        if(wrestler1Deposit >= wrestler2Deposit * 2) {\n            endOfGame(wrestler1);\n        } else if (wrestler2Deposit >= wrestler1Deposit * 2) {\n            endOfGame(wrestler2);\n        } else {\n            endOfRound();\n        }\n    }\n}\n\nfunction endOfRound() internal {\n    wrestler1Played = false;\n    wrestler2Played = false;\n\n    EndOfRoundEvent(wrestler1Deposit, wrestler2Deposit);\n}\n\nfunction endOfGame(address winner) internal {\n    gameFinished = true;\n    theWinner = winner;\n\n    gains = wrestler1Deposit + wrestler2Deposit;\n    EndOfWrestlingEvent(winner, gains);\n}\n\n/**\n* The withdraw function, following the withdraw pattern shown and explained here: \n* http://solidity.readthedocs.io/en/develop/common-patterns.html#withdrawal-from-contracts\n*/\nfunction withdraw() public {\n    require(gameFinished && theWinner == msg.sender);\n\n    uint amount = gains;\n\n    gains = 0;\n    msg.sender.transfer(amount);\n}\n\n}. Error: Ballot contract constructor expected 1 arguments, received 0\nthat's the same contract in tutorial website.\nplease can you help me find a solution?. ",
    "itinance": "Any news on this? . ",
    "SumitRajpal": "I was facing the same issue solved it by adding \"0x\" to the bytecode\n`const HDWalletProvider = require(\"truffle-hdwallet-provider\");\nconst Web3 =require('web3');\nconst { interface, bytecode } = require('./compile');\nconst mnemonic = \"jewel renew rate forest fuel boost screen winter throw space can weather\";\nconst provider = new HDWalletProvider(mnemonic,\"https://ropsten.infura.io/W727SZ47Z2PgLGnLbriG\");\nconst web3 = new Web3(provider);\ndeploy = async () => {\nconst accounts = await web3.eth.getAccounts();\nconsole.log('Attempting to deploy',accounts[0]);\nconst result = await new web3.eth.Contract(JSON.parse(interface)).deploy({ data:'0x'+bytecode,arguments:['Hi svgjkbnlsdfkjbvg there']}).send({from:accounts[0],gas:'300000'});\nconsole.log('contract deployed',result.options.address);\n};\ndeploy();`\n. ",
    "piggyman007": "@SumitRajpal \nthanks, your working around works. ",
    "mandys": "+1. ",
    "dt665m": "+1. ",
    "fabianem": "+1. ",
    "iisaint": "+1. ",
    "brianmcmichael": "+1. ",
    "mrhn": "Having the same problem with solc 0.4.15 also... fresh install this friday.. ",
    "kevbry": "Same issue.\nEnvironment:\n- OS: Windows 7\n- Truffle v3.4.9 (core: 3.4.8)\n- Solidity v0.4.15 (solc-js)\n- Node version 8.4.0\n- NPM version 5.3.0. ",
    "hotblade": "Same problem.\n MacOS Sierra\n Truffle 3.4.9\n* Solc 0.4.16+commit.d7661dd9.Darwin.appleclang. ",
    "dlocation": "We must wait for update solidity-parser package that implement interface support\nPR has been merged yet but realease not published yet\nhttps://github.com/ConsenSys/solidity-parser/pull/68 \nOR You can swap to beta version of truffle. . ",
    "idrabenia": "It's still actual!. ",
    "angilyu": "@jwietelmann did you find the answer?. ",
    "xpepermint": "I found a nice npm package called sol-merger that does this pretty well. We could join forces with author.. This issue can be closed since truffle-flattener does the trick.. It would be easier if things like web3 would be under peerDependencies.. Thanks @cgewecke for the explanation. We are using our own Web3 version thus peerDependencies would help us run that with the default Truffle version. Now we are forking truffle project to achieve that.. @Levino yeah. Because of the webpack this is not possible. If Truffle would be a usual NodeJS project then pearDependencies should do the trick :).. ",
    "moodysalem": "Better yet, it would be nice if truffle verify [--network net] actually made the calls to the etherscan API for the deployed contracts/network to verify the code. I found truffle-flattener to be the best tool for flattening source files, because it is aware of imports coming from npm modules.. @mtbitcoin is it possible for you to expose an API for verifying your contracts? A package that combines truffle-flattener and a call to the etherscan API would be trivial to write. Ran into this problem as well, also remember it working as described by @rstormsf in v3\nThe only workaround I had was to use the transaction receipt logs in my tests, and I don't know the best way to decode those logs using the truffle contracts either. ",
    "glaksmono": "Would love to see this soon!. ",
    "michaeljohnbennett": "sol-merger works a treat. I used yesterday and will merge all your deps into one file and it works for deploying to etherscan code. Would be lovely to integrate this into build flow by way of a switch or something.\nhttps://github.com/RyuuGan/sol-merger. I'm getting the same kind of timeout\nit seems it does update my version but still get a timeout.\nMy Versions:\nTruffle v4.1.8 (core: 4.1.8)\nSolidity v0.4.23 (solc-js)\ntruffle-wallet-provider@0.0.5\n. I cleaned out node_modules and did a reinstall of 4.1.11 and it works. Also globally.\nI am using the lazy initialisation functions for wallet provider functions. \nYou should have that changed on master branch docs as well as its confusing all the variations on this piece caused me a lot of hassle at the beginning.\nThanks so much for you help.. Thanks for this @cgewecke thats helpful. the new V5 syntax looks like it might solve my problems as this event catching chain methods would make it very easy to test with, rather than the 2 stage, go and check the blockchain route.\nI'll use the solve for the current version right now and take it from there and look forward to seeing the new release.\nAs an aside, would it be worthwhile putting a solution to this problem in the docs or FAQ's as its not very apparent how to solve something like this that is perhaps an edge case but took me hours this morning trying to find some kind of solution between a bunch on semi-relevant SO posts and on here.\n. I tried this: \nc = await MyContract.new();\nconst receipt = web3.eth.getTransactionReceipt(c.transactionHash);\n\nBut I can't see how to access the decode logs call from Contract easily enough. do I need to get it from the contract class MyContract or the instance c?\nAlso the signature needs\ndecodeLogs: function(C, instance, logs) {\n    // code in here\n};\n// and its called like so:\nreturn accept({\n    tx: tx,\n    receipt: receipt,\n    logs: Utils.decodeLogs(C, instance, receipt.logs)\n});\n\nThanks for all your help, if this is non trivial to resolve I'll just fall back to searching for the events from the blocks.. yes I can see its a not trivial fix with the current versions. Super explanation, I'll try it out and also look at using the latest releases of truffle as well.\nWhat's the ETA for the V5 release? I might just push up to using that if we are close to release?. Thanks @cgewecke super helpful feedback on this issue, I'm using this framework a lot for projects, looking forward to the next gen release. I'll take it onboard for the next iteration of our current project. I need to get this out the door for a MVP so jumping to Alpha release is just a bit too risky right now.\nI also linked this ticket to a stack overflow ethereum question I raised as well to hopefully give some breadcrumbs to people searching for an answer.\nI do a lot of TDD/BDD testing so this kind of stuff is always on my mind on how best to test and break stuff, handy in solidity I think.. ",
    "fundrequestbot": " \nThis issue has been funded using FundRequest. A developer can claim the reward by submitting a pull request referencing this issue. (How to Close Issues via Pull Requests?) e.g. fixes #564\n\nFor more help on how to claim on issue, please visit our help section.\nLooking for more? Feel free to browse through all funded requests.. \n",
    "davyvanroy": "I just funded this from FundRequest, we verify our contracts everytime we do a deploy. If the process could be simpler/faster it would be a time saver \ud83d\udc4d . ",
    "burdakovd": "Despite original issue was about building additional files needed for verification proces on etherscan.io, I think Truffle could go a step further, and instead actuall call etherscan API for verfication. Ideally it would do so for every deployed contract (i.e. in deployer), subject to config option (as I guess some people may prefer not to share source code).\nIt is at the position to do so, it just deployed a contract, it knows the source code, it knows compiler version, so making human do the work is suboptimal.. ",
    "mswezey23": "@burdakovd Completely agree with you as I've had the some thoughts for over a year now. \nAny update on getting a true 1 for 1 Truffle Deployed Smart Contract source code file to verify on etherscan?. Good callout @mtbitcoin, I found that link earlier today when doing some research since it's been awhile since I looked for a solution last time. Couple that with truffle run as @gnidan suggested would be awesome to see. \nI'm going to start work on implementing this within Validity Labs toolchain (to be opensource in the future). ",
    "JohannesMayerConda": "@mtbitcoin I tried pretty much every flattener and can't get verification to work. What is the currently recommended way/tool? I'm using solidity 0.5.. @mtbitcoin truffle-flattener works for me and compiles in remix but it doesn't verify. Their Readme also states\n\nIf you deploy your contracts with truffle's migrations the output of truffle-flattener may not match while verifying it in Etherscan\n\nI opened an issue for Flattery https://github.com/akombalabs/SolidityFlattery/issues/2 where I'm stuck\nAnd BlockCatIO/solidity-flattener has open issues like this https://github.com/BlockCatIO/solidity-flattener/issues/26 and does strange things like putting a very old pragma version in the file\nIs the solution to get rid of truffle migrations? What is good/best practice? Still the BlockCatIO solidity-flattener that has latest commit Dec 13, 2017?. why use web3-one and is this still the recommended way?. ",
    "wphan": "Ran into this issue while testing an implementation of ERC223 which overloads transfer() from ERC20.. ",
    "rudolfix": "I fixed this in our truffle fork here\nhttps://github.com/Neufund/truffle-contract/commit/ecae09942db60039f2dc4768ceeb88776226f0ca\nYou call overloaded functions web3 style\nconst tx = await token.transfer[\"address,uint256,bytes\"](address, initialBalance, data, { from: fromAddr });\nI can provide PR to truffle-contract if maintainers are interested. Here it is: https://github.com/trufflesuite/truffle-contract/pull/75 @elenadimitrova . I hope there's a trick to still have BigNumbers returned in case of numbers. ",
    "DeRain": "As an option, we could call overloaded methods via web3 directly, i've created an article with details https://beresnev.pro/test-overloaded-solidity-functions-via-truffle/. Same issue here - can't deploy to the live.. ",
    "MidnightLightning": "\nIt's important to call the function that is defined last\n\nNo, that's not how the function \"overloading\" works in Solidity; it's not that the last-defined function with that name is the \"real\" one, but rather all functions with the same name are valid, if they have different input parameters.\nFrom the example in the original post, if a contract has the functions:\nfunction theFn(string p1);\nfunction theFn(string p1, string p2);\nThe ABI would include something like:\n[\n  {\n    name: 'theFn',\n    type: 'function',\n    inputs: [\n      { \"name\": \"p1\", \"type\": \"string\" }\n    ]\n  },\n  {\n    name: 'theFn',\n    type: 'function',\n    inputs: [\n      { \"name\": \"p1\", \"type\": \"string\" },\n      { \"name\": \"p2\", \"type\": \"string\" }\n    ]\n  }\n]\nIt would be valid to call either function, since the signature for the two is different (theFn(string) vs. theFn(string,string), which when hashed to get a ).\nIn this case, the Truffle testing infrastructure needs to know how to parse out:\njs\ninstance.theFn.call('first param', 'second param'); // call theFn(string,string)\ninstance.theFn.call('first param'); // call theFn(string)\ninstance.theFn.call('first param', { from: accounts[3] }); // call theFn(string), using account[3]\ninstance.theFn.call('first param', 'second param', { from: accounts[3] }); // call theFn(string,string), using account[3]\nDone this way, it would need to do some introspection on the last argument given, to see if it's an options object or some other type of input.\nLooks like pull requests 75 and 94 do account for this need with two separate (but compatible options), so looks like they are correct, even though this original issue's requested resolution is not the way Solidity handles the situation.. ",
    "MartinKral": "\ninstance.theFn.call('first param', 'second param'); // call theFn(string,string)\ninstance.theFn.call('first param'); // call theFn(string)\n\nHow would I call a function overload with the same number of parameters, but different types (string and uint)?. ",
    "smoove": "Can confirm, the process uses 100% CPU. Ctrl + c does nothing, kill <PID> kills the process.\nOS: Ubuntu 16.04\nTruffle v4.0.0-beta.0. ",
    "melnikaite": "Workaround is adding to migration the following code\nmodule.exports = (deployer, networks, accounts) => {\n    return deployer\n        .deploy(FirstContract)\n        .deploy(SecondContract)\n        .then(() => {\n          [\n            'FirstContract',\n            'SecondContract',\n          ].forEach((name) => {\n            const artifact = artifacts.require(`${name}.sol`);\n            const metaDataFile = `${__dirname}/../build/contracts/${name}.json`;\n            const metaData = require(metaDataFile);\n            metaData.networks[deployer.network_id] = {};\n            metaData.networks[deployer.network_id].address = artifact.address;\n            fs.writeFileSync(metaDataFile, JSON.stringify(metaData, null, 4));\n          });\n        }). I have the same error message when I just change function name in a contract, to try new feature in v4.0.0 \"Debug transactions without code\". Backing previous name allows me to debug transaction without any issues.\nEnvironment\n\nOperating System: OS X\nEthereum client: truffle develop\nTruffle version (truffle version): Truffle v4.1.5 (core: 4.1.5) Solidity v0.4.21 (solc-js)\nnode version (node --version): v9.2.1\nnpm version (npm --version): 5.8.0. Have a look at this approach https://stackoverflow.com/a/54595252/1099933. \n",
    "RickyCook": "I'm having the same issue... Traced it back to Artifactor.prototype.saveAll\n```javascript\n  if (Array.isArray(objects)) {\n    var array = objects;\n    objects = {};\narray.forEach(function(item) {\n  objects[item.contract_name] = item;\n})\n\n}\n```\nThis is problematic if you have 2 contracts with the same contract_name, even if you aren't using them! For example, if you have zeppelin-solidity installed via NPM, it has a Migrations contract, and you might have a Migrations contract as well.\nIn this case, one of these contracts have .networks sections like this:\nzeppelin-solidity/contracts/lifecycle/Migrations.sol:\n{ '5777':\n   { events: {},\n     links: {},\n     address: '0x...' } }\n./Migrations.sol:\n{}\nWhen the array is flattened to an object, they both have the name Migrations, thus only the second one is ever acted upon.\nI'm not sure that this is correct?. ",
    "Artod": "Same issue... Works only with the @melnikaite 's workaround:\n```\nconst MyToken = artifacts.require('MyToken')\nconst MyContract = artifacts.require('MyContract')\nconst fs = require('fs')\nmodule.exports = async (deployer, network, accounts) => {\n  await deployer.deploy(MyToken)\nawait deployer.deploy(MyContract, MyToken.address)\nconst metaDataFile = ${__dirname}/../build/contracts/MyContract.json\n  const metaData = require(metaDataFile)\n  metaData.networks[deployer.network_id] = {}\n  metaData.networks[deployer.network_id].address = MyContract.address\n  fs.writeFileSync(metaDataFile, JSON.stringify(metaData, null, 4))\n}\n```. ",
    "emkman": "@Artod see https://github.com/trufflesuite/truffle/issues/713 , rewriting your deploy with promise chains rather than async/await should fix the issue. No need to manually read/write the JSON.. Just ran into this same issue, and agree this should be reopened until proper async support is provided either through @ZitRos suggestion or through integration of babel (though I much prefer native node 8 support to babel). ",
    "thesved": "@gnidan: I could reproduce this issue: you should deploy a contract with an argument which violates a requirement in the constructor.\ncontract Test {\n    function Test(bool _val) {\n        require(_val);\n    }\n}\nWhen you deploy, like\ndeployer.deploy(Test, false);\nThis obviously will violate the requirement, and when you try to debug the transaction it won't find the source code, and it will reproduce the issue what @roderik has experienced.. ",
    "ppoliani": "I've encountered the same issue. In my case, I follow a different approach. To be more specific:\n\nDeploy some libraries using truffle migrations \nUse web3.js to deploy another contract\n\nWhen deploying the contract using web3 I can see the contract in the ganache-cli logs\n\nI try then to send a transaction via truffle console to call a smart contract method:\n\nI get an error:\n\nBut that's fine, it can be due to a bug in the smart contract. However, when I try to debug the using the above txHash I get the following error\n\nIt looks like it cannot find the source code of the contract I manually deployed via JavaScript and web3.js. \nThe thing is that the ganache logs (look screenshot above) showed that the contract was deployed. Also, when I investigate the contract instance in the truffle console\nContract.at('0xE6099d65d9a40A9dee1908f82C9Ecb303056077c')\nI can see in the bytecode that the libraries I linked via solc are not actually there. That is, I can see the placeholders but no the addresses.\ne.g. __FeesLib_______________________________\nI know there are a few points here :) But it would be nice to know if we can manually deploy contracts to ganache without using truffle migrate\n. ",
    "pau1m": "Did you also rename the code inside the contracts to be the same as the filename? . ",
    "rakibgalib": "try to recheck your contract name.if your contract name doesn't match with your file name.Ex.File name:myContract.sol and contact name within the file need to be \"Contact myContact{}\". Hopefully it will help you. ",
    "shapeshed": "See https://ethereum.stackexchange.com/questions/26688/truffle-work-over-https\nSuccessfully ran migrations over https using this method. . Yeah, more for people finding this issue by Google. . ",
    "nosuchip": "@shapeshed I know, it is my own solution.. ",
    "amexperts": "I just upgraded to:\nTruffle v4.0.0-beta.2 (core: 4.0.0-beta.2)\nSolidity v0.4.17 (solc-js)\nand am getting the same issue as above. I am running on Linux within Virtualbox running on Windows 10 Professional.. ",
    "3esmit": "I'm also having this issue.. ",
    "amosjyng": "I am getting this too on El Capitan, Truffle v4.0.6, Ethereum client Ganache,  node v9.6.1 and npm v5.6.0 . Have there been any updates on this?. ",
    "asifmallik": "I believe the correct syntax for calling the sendCoin function is\nMetaCoin.deployed().then(function(MetaCoinInstance){\n    MetaCoinInstance.sendCoin(a1, 10);\n});. ",
    "nadavhollander": "Ditto on the above. ",
    "ByKraB": "try to use relative path for imports.  node_modules/zeppelin-solidity => ../node_modules/zeppelin-solidity\n. @evgen-povt, did you try it? it works for me. ",
    "wighawag": "I had the same issue as @evgen-povt and after deleting the build/ folder it worked.\nThere is an bug somewhere. could it be some caching issues ?. Since I deleted my build folder, I cannot reproduce now. If I or someone else get it back, publishing the build folder might help reproduce it.. ",
    "iannovic": "@wighawag deleting the build folder solved the problem for me! thank you.. ",
    "tarassh": "Have exactly the same problem\nTruffle v3.4.11 (core: 3.4.11). in order to fix it, you should define in genesis file your chainid and this chain id should be equal to your network id \n\"config\": {\n        \"chainId\": 1010,\n        \"homesteadBlock\": 1,\n        \"eip155Block\": 0,\n        \"eip158Block\": 0\n    },\n$ geth --datadir ~/simplewallet/ --rpc --rpcport 8545 --rpcaddr \"localhost\" --rpcapi \"eth,net,web3\" --networkid 1010. ",
    "andy-mcewan-artos-io": "I have the same problem. Matching chainid and network id doesn't work for me. \nEDIT: I mean, I have the two values the same: it doesn't solve the problem.. I can deploy fine but any contracts method transactions fail. Rolled back to geth 1.7.3 fixed it.. ",
    "juanfer": "Wow!, fixed it for me. Have been dealing with this problem for 2 days, and finally starting local node using the same networkid as genesis chainId param, made it work. Which is the reason? Also have to say that seems to happen since a system update, but can't precise which one (made several updates in the last weeks). ",
    "fabdarice": "Why is this close? \nReverting to an older version isn't a real fix. I'm still facing this issue using truffle 4.0.0 beta. Any ETA on fix?. Wow, that worked, would you mind explaning why?\nI've tried before truffle migrate --reset --compile-all but it didn't work.. I'm having the exact same issue.\nUpdated TestRPC  & Geth and I'm using Geth regardless.. seeing the same issue here . ",
    "wagner18": "I am still having this problem, even making rollback to 3.4.11, so far nothing mentioned here  worked to me. So gotta keep digging to find the problem, but if anyone else have a clue of what it could be... please!. ",
    "brianedelman": "+1 also having this issue on 4beta2. I am using truffle develop and creating a new instance of a contract, and just testing public state variables to see if they're what I expect. I have several bytes32 and uints, some work and some do not in the console running x.name() for instance. There seem to be no correlation to which ones work and which ones don't. I have also made sure the info being provided to these functions has indeed been set.\nEDIT: deleting the build worked (didn't delete correct project build first time). Strange that I have to keep deleting the build in the beta.. Getting same error but consistently with node 8.4.0 and 4 beta 2\nUPDATE: Also can reproduce if I create a new instance of a contract in the develop console.\n`truffle(develop)> Event.new(\"Hello\")\nError: VM Exception while processing transaction: invalid opcode\n    at Object.InvalidResponse (/Users/brianedelman/.nvm/versions/node/v8.4.0/lib/node_modules/truffle/build/cli.bundled.js:37872:16)\n    at /Users/brianedelman/.nvm/versions/node/v8.4.0/lib/node_modules/truffle/build/cli.bundled.js:316805:36\n    at /Users/brianedelman/.nvm/versions/node/v8.4.0/lib/node_modules/truffle/build/cli.bundled.js:294942:9\n    at XMLHttpRequest.request.onreadystatechange (/Users/brianedelman/.nvm/versions/node/v8.4.0/lib/node_modules/truffle/build/cli.bundled.js:315504:7)\n    at XMLHttpRequestEventTarget.dispatchEvent (/Users/brianedelman/.nvm/versions/node/v8.4.0/lib/node_modules/truffle/build/cli.bundled.js:164934:18)\n    at XMLHttpRequest._setReadyState (/Users/brianedelman/.nvm/versions/node/v8.4.0/lib/node_modules/truffle/build/cli.bundled.js:165224:12)\n    at XMLHttpRequest._onHttpResponseEnd (/Users/brianedelman/.nvm/versions/node/v8.4.0/lib/node_modules/truffle/build/cli.bundled.js:165379:12)\n    at IncomingMessage. (/Users/brianedelman/.nvm/versions/node/v8.4.0/lib/node_modules/truffle/build/cli.bundled.js:165339:24)\n    at emitNone (events.js:110:20)\n    at IncomingMessage.emit (events.js:207:7)\ntruffle(develop)> debug 0xbcd7210f933417db43c2990e96912a4e3dbd69d91ae371e871446ff30db684be\nGathering transaction data...\nTypeError: Cannot read property 'indexOf' of undefined\n    at Function.get (/Users/brianedelman/.nvm/versions/node/v8.4.0/lib/node_modules/truffle/build/cli.bundled.js:299655:17)\n    at Function.getter (/Users/brianedelman/.nvm/versions/node/v8.4.0/lib/node_modules/truffle/build/cli.bundled.js:299463:25)\n    at Function.deployedBinary (/Users/brianedelman/.nvm/versions/node/v8.4.0/lib/node_modules/truffle/build/cli.bundled.js:299631:37)\n    at Function.getter (/Users/brianedelman/.nvm/versions/node/v8.4.0/lib/node_modules/truffle/build/cli.bundled.js:299466:49)\n    at Debugger.findMatchingContract (/Users/brianedelman/.nvm/versions/node/v8.4.0/lib/node_modules/truffle/build/cli.bundled.js:309059:42)\n    at Debugger.contextForBinary (/Users/brianedelman/.nvm/versions/node/v8.4.0/lib/node_modules/truffle/build/cli.bundled.js:309024:23)\n    at /Users/brianedelman/.nvm/versions/node/v8.4.0/lib/node_modules/truffle/build/cli.bundled.js:309179:39\n    at Array.forEach ()\n    at /Users/brianedelman/.nvm/versions/node/v8.4.0/lib/node_modules/truffle/build/cli.bundled.js:309178:28\n    at . Did you change your networks to 9545 in the truffle.js?. Ah yes. I have been runningtruffle develop --log` to basically give me the same output as testrpc used to. Migrate and test are done with this running on 9545. Moved on to other things for a while now. Can't speak to this specific bug. If I come back to it and it is an issue I can reopen. Thanks for checking in!. ",
    "cyberience": "Guys, Delete your build folder, then run the command.\nnpm run truffle migrate --reset --compile-all\nI find it works best when running truffle locally to the folder rather than globally, due to the beta and different versions getting updated quickly recently.\nif you prefer the global approach try\ntruffle migrate --reset --compile-all. ",
    "GeoffreySari": "Perhaps there should be reset compile function\ntruffle compile --reset to delete and rebuild the build folder.\n. Any details to go with this, i am using truffle on windows, haven't had this issue. If it's an issue specific to your setup than please, close issue.. For anyone, who may experience similar issue. Here's a quick solution I found to get truffle working offline.\nSo truffle deploy doesn't work because of truffle's need to create an external RPC IP Address, as it seems.\nA quick solution to this issue of truffle deploy not working, was simply running a mobile hotspot from my Smart phone and connecting my host machine to the wifi. Then running truffle deploy without internet connection disabled from Smart phone got it working as expected, at least for now . ",
    "magicliang": "Also met this in CentOS 6.7\ntruffle migrate --reset --compile-all\ndoes not work.. ",
    "ahiatsevich": "Hi. Unfortunately, artifact deleting is not suitable for me. I can't delete my build folder, it contains deployed addresses of my mainnet/kovan/rinkeby contracts. So artifacts deleting/reverting is definitely not an option. Can anybody suggest anything else? Thanks a lot in advance!. Finally, I fixed the issue by doing the following: \n- backup (!) already deployed artifacts and cleanup /build folder;\n- compile contracts with latest truffle (4.0.1), /build folder does not contain addresses after this step;\n- move networks section from original artifacts to newly compiled by executing the quite simple script (it might be needed to change file pathes)\n- profit. works fine now.. ",
    "cemdev": "deleting the build folder did not resolve this for me :( \nwhy is this closed? v 4.0.1. +1. ",
    "arunmitteam": "Try deleting the build folder and run\ntruffle migrate --reset\nI had the same issue, the compiled code is corrupted. It works for the first time only and the subsequent compile corrupts the build. Hope it helps.. Deleting the build directory and then deploying the contract fixes this issue. But I believe it's a workaround for this issue but not addressing the actual issue. Can we have a fix for this?\ndelete the build directory, then run\n truffle migrate --reset. ",
    "Hu4F00d": "Weird, deleting the build folder solved it for me too. Using 4.0.0 beta.. ",
    "alexwagg": "Same issue on truffle 4.0.1. Deleted the build folder,  --reset, and re-compiled but still no tests working.. ",
    "bwheeler96": "I have a teeny bit of insight here:\nOne of the possible causes I noticed was when I changed a data structure in my solidity files. The compiled .json was reflecting the old data type information in a function signature. Clobbering build/ and recompiling fixed the issue.\nI wish I had more detail. @illuzen storing project metadata in this way has been attempted a billion times, and it always sucks.\nProof? Google \"xcode derived data\". @AlvaroLuken and everyone else:\nif any of your params are undefined you will get this error without any other warning in most web3 implementations. Probably a bug in your code that is surfacing in a rather ugly fashion.. @praveen7557 \n\nError encountered, bailing. Network state unknown. Review successful transactions manually\n\nThis is why I stopped using truffle. No offense to Truffle, it is a good product overall, but it was too unstable for my use cases. I built my own custom solutions.. I have this issue, and I only have one contract per file.. @bijeebuss thanks for posting this. Maybe I can dig into the source later and find out where this bug is actually happening. I have a suspicion you have just cracked one of the bigger puzzles so far though. @bijeebuss where is the artifact.json file?. Oh... yeah that will do, but I wish that helped identify the part in the build process that gets messed up :(. @VoR0220 try running truffle compile --all outside of the truffle develop console.\nAs for me, I got so sick of this shit I just created a whole new workspace with a truffle-independent build and test process. If you keep using truffle, get used to it. @tcoulter do you have any leads on the cause? I switch to a separate build process using solc and have had no issues of this sort. Truffle abstracts a lot of configuration away, and that is awesome, but this lack of determinism was a complete dealbreaker for the time being.. Your node version is way out of date for Truffle. Get node 8 or 9 @hendrikkoetsier . ",
    "riordant": "Reporting the same issue. . ",
    "Stickerpants": "Had the same issue, but deleting the build folder fixed it. I assume old compiled contract code was being used instead of being recompiled.. Thank you @gnidan! Will test and keep an eye out.. ",
    "AlvaroLuken": "Still not solved!! Tried everything above (deleting build folder, truffle --reset --compile-all) and no good\nUbuntu LTS 16.04. @cgewecke - the code I am running when I get that problem is a simple (yet, I am pretty sure incorrectly written unit test in Solidity) \npragma solidity ^0.4.21;\nimport \"truffle/Assert.sol\";\nimport \"truffle/DeployedAddresses.sol\";\nimport \"../contracts/QuestionBounty.sol\";\ncontract TestQuestionBounty {\nbytes32 _question = \"What is 2+2?\";\nuint timeLimit = 10;\n\n//QuestionBounty b = QuestionBounty(DeployedAddresses.QuestionBounty());\n\nuint numBountiesExpected = 1;\n\n//are we the minter?\nfunction testDeployer() public returns (bool passed) {\n\nQuestionBounty b = new QuestionBounty(_question, timeLimit);\n\n\nif(b.getOwner(_question) == address(this)) {\n    return passed = true;\n}\n}\n\n}\nThis is the error I get:\nError: QuestionBounty contract constructor expected 2 arguments, received 0\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-contract/contract.js:390:1\n    at new Promise ()\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-contract/contract.js:374:1\n    at \n    at process._tickCallback (internal/process/next_tick.js:188:7)\n. It may be a problem with my migrations... please advise :). I have tried the following: \n'''\n  deployer.deploy(QuestionBounty, bytes32 _question, uint timeLimit);\n  deployer.deploy(QuestionBounty, bytes32, uint);\n'''\nand Error is:\n/home/hephaestus/Desktop/projects/QandA/migrations/2_deploy_contracts.js:3\n  deployer.deploy(QuestionBounty, bytes32 _question, uint timeLimit));\n                                  ^^^^^^^\nSyntaxError: missing ) after argument list\n    at Object.createScript (vm.js:80:10)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-require/require.js:96:1\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:511:3)\nI don't think I am inputting them right... I have tried multiple variations but it keeps saying param is undefined. /home/hephaestus/Desktop/projects/QandA/migrations/2_deploy_contracts.js:3\n  deployer.deploy(QuestionBounty, bytes32, uint);\n                                  ^\nReferenceError: bytes32 is not defined\n    at module.exports (/home/hephaestus/Desktop/projects/QandA/migrations/2_deploy_contracts.js:3:35)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-migrate/index.js:82:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-require/require.js:101:1\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:511:3)\n. UPDATE: hardcoding values into params works!\nie.  deployer.deploy(QuestionBounty, \"What is 2+2?\", 5);\nTruffle tests pass successfully.. Just as a note this works only if you hardcode 10 ether - it gives a pretty wild error if you input any other amount :+1: . ",
    "Swader": "Just FYI in case someone else's problem matches mine, I was getting this during migration when trying to transfer full balance and ownership of a token to its parent DAO. It turned out to be a problem with promises - if I split up the contract function calls each in its own promise resolution, it started working.\nInstead of\njs\n    deployer.then(function () {\n            return TNSToken.deployed();\n        }).then(function (tIns) {\n            tokenInstance = tIns;\n            return StoryDao.deployed();\n        }).then(function (sIns) {\n            storyInstance = sIns;\n            var balance = tokenInstance.totalSupply();\n            tokenInstance.transfer(storyInstance.address, balance);\n            return tokenInstance.transferOwnership(storyInstance.address);\n        });\n}\nuse:\njs\n    deployer.then(function () {\n            return TNSToken.deployed();\n        }).then(function (tIns) {\n            tokenInstance = tIns;\n            return StoryDao.deployed();\n        }).then(function (sIns) {\n            storyInstance = sIns;\n            return balance = tokenInstance.totalSupply();\n        }).then(function (bal) {\n            return tokenInstance.transfer(storyInstance.address, bal);\n        }).then(function (something) {\n            return tokenInstance.transferOwnership(storyInstance.address);\n        });\n}. ",
    "cliffhall": "In my case, I was taking the result of one contract method and passing it as an argument to another. What I didn't realize was that the result coming back from that first method was a TRANSACTION not the uint that it was supposed to return. I'm now baffled about how to test these contracts from JS if the values they're supposed to return aren't returned to me. . ",
    "gwenf": "FYI this error is also thrown if one of the arguments that you are calling a contract function with isn't the same type that Solidity is expecting.. ",
    "Marak": "Alright. I just checked again, It still looks like there are a lot of dependencies in truffle which are using semver ranges and not exact versions.\nIf you start digging down in the dependency tree you'll find a few heavily depended on libraries that have given npm publish rights to new or anonymous contributors with little to no screening process. A lot of prolific Node package developers have moved onto other interests.\nAll it would take is one rogue publish on an innocuously package like commander and anyone installing truffle could have their local machine compromised ( crypto stolen ). Using an exact semver would guarantee a known previous release which is presumable secure.\nI'd hope that most developers are not storing private keys on any machines that run npm install, but I also know that some are not. This could be an accident waiting to happen.\nGood luck! \n. Very good. I hadn't notice the yarn.lock file, I only noticed the packages like https://github.com/trufflesuite/truffle/blob/develop/packages/truffle-box/package.json\nI'll have to take a closer look at lerna as I've not tried using it yet.\nThanks for the additional information.\n. ",
    "davekaj": "Yes I have the same issue as the original poster. ",
    "Ramarti": "Same error:\ntruffle test test/CappedCrowdsale.js\nResult\nError: Could not find artifacts for ./helpers/CappedCrowdsaleImpl.sol from any sources\n    at Resolver.require (/my/path/zeppelin-solidity/node_modules/truffle/build/cli.bundled.js:50099:9)\n    at TestResolver.require (/my/path/zeppelin-solidity/node_modules/truffle/build/cli.bundled.js:96057:30)\n    at Object.require (/my/path/zeppelin-solidity/node_modules/truffle/build/cli.bundled.js:209900:32)\n    at Object.<anonymous> (/my/path/zeppelin-solidity/test/CappedCrowdsale.js:14:35)\n    at Module._compile (module.js:573:30)\n    at loader (/my/path/EthicHub/zeppelin-solidity/node_modules/babel-register/lib/node.js:144:5)\n    at Object.require.extensions.(anonymous function) [as .js] (/my/path/zeppelin-solidity/node_modules/babel-register/lib/node.js:154:7)\n    at Module.load (module.js:507:32)\n    at tryModuleLoad (module.js:470:12)\n    at Function.Module._load (module.js:462:3). ",
    "rchaubey": "I was using the pet-shop example, ran into same problem Could not find artifacts for ./TestAdoption.sol from any sources\nTruffle v4.0.6 (core: 4.0.6)\npragma v0.4.17. Looks like the name of the contract & file has to be same otherwise it doesn't work.\nmore info. ",
    "JLansey": "This worked for me! Thank you.. ",
    "matYang": "just ran into this again with Truffle 0.5. ",
    "adamdossa": "I'm having the same issue, debugging on the main net with geth 1.7.2. ",
    "Ban44n": "Walking down the tutorial of http://truffleframework.com/tutorials/debugging-a-smart-contract and I experience the same error with geth v1.7.3-stable and Truffle v4.0.1 . ",
    "szerintedmi": "same issue here\nTruffle v4.0.1\nEthereumJS TestRPC v6.0.3 (ganache-core: 2.0.2). ",
    "stepanorda": "Same here with Truffle v4.0.1 \nNode v8.8.1\nnpm 5.4.2\nTried built in develop mode and Ganache. Same here. ",
    "kholbekj": "Also getting this - Truffle v4.0.1 | TestRPC v6.0.3. ",
    "rohanp": "Same. ",
    "pferreir": "Having the same issue here. Maybe this needs to be reopened?\n  . ",
    "jsdu": "Having this issue as well. same issue, cant deploy my contracts to rinkeby network.\nTruffle version 4.0.3, Geth Version: 1.8.0-unstable\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  ... 0x23828749b08047265fcccff7481aae8b8fe81879639e7337dc2bd96ee48407dc\n  Migrations: 0xee57862b9c9216957fdff614c34ef94117a01449\nSaving successful migration to network...\n  ... 0x37a4f528dc8d31ec60cc4e420780dc7846771519949d17630a0b8516b36180de\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: unknown transaction\n    at Object.InvalidResponse (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:41484:16)\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:328866:36\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:176178:11\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:324536:9\n    at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:327565:7)\n    at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:176407:18)\n    at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:176697:12)\n    at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:176852:12)\n    at IncomingMessage. (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:176812:24)\n    at emitNone (events.js:91:20)\n. ",
    "1for": "same issue\nTruffle v4.0.4\ngeth 1.7.3\n. ",
    "tina1998612": "Same Issue here when using truffle debug... . ",
    "TimTinkers": "Also experiencing this under the same setup using the newest version of Ganache.. ",
    "Stradivario": "Previews week i was able to buyTokens from my contract using my api now i get the following error: \n\nThen i try to debug transaction hash using:\ntruffle debug 0xa3ab41a32a00408f2f67b943f9aca529b940279b00defb0616ce59aab579000e \nand i got the following error: \n\nTypeError: Cannot read property 'structLogs' of undefined\n\nAny recommendations ?\nI think issue is related with https://github.com/trufflesuite/truffle/issues/748\ni am facing both problems...\nRegards,\nKristiyan Tachev. @benjamincburns give me 1 hour and i will create repository\nAnyway my migration code is this \n```\nconst CoinCrowdsale = artifacts.require(\"./CoinCrowdsale.sol\")\n// 1.Init migration\nvar Migrations = artifacts.require(\"./Migrations.sol\");\nmodule.exports = function(deployer) {\n  deployer.deploy(Migrations);\n};\n\n// 2. Deploy contract migration\nmodule.exports = function(deployer, network, accounts) {\n  const startTime = web3.eth.getBlock(web3.eth.blockNumber).timestamp + 1 // one second in the future\n  const endTime = startTime + (86400 * 20) // 20 days\n  const rate = new web3.BigNumber(1000)\n  const wallet = accounts[0]\ndeployer.deploy(CoinCrowdsale, startTime, endTime, rate, wallet)\n};\n```\nWhen i try to do truffle debug TX from REVERTED transaction i got the following error\nFrom this issue https://github.com/trufflesuite/truffle/issues/608\n```\nGathering transaction data...\n/Users/billy/.nvm/versions/node/v7.2.0/lib/node_modules/truffle/build/cli.bundled.js:333580\n      accept(result.result.structLogs);\n                          ^\nTypeError: Cannot read property 'structLogs' of undefined\n    at /Users/billy/.nvm/versions/node/v7.2.0/lib/node_modules/truffle/build/cli.bundled.js:333580:27\n    at /Users/billy/.nvm/versions/node/v7.2.0/lib/node_modules/truffle/build/cli.bundled.js:322668:9\n    at XMLHttpRequest.request.onreadystatechange (/Users/billy/.nvm/versions/node/v7.2.0/lib/node_modules/truffle/build/cli.bundled.js:324093:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (/Users/billy/.nvm/versions/node/v7.2.0/lib/node_modules/truffle/build/cli.bundled.js:71245:18)\n    at XMLHttpRequest._setReadyState (/Users/billy/.nvm/versions/node/v7.2.0/lib/node_modules/truffle/build/cli.bundled.js:71535:12)\n    at XMLHttpRequest._onHttpResponseEnd (/Users/billy/.nvm/versions/node/v7.2.0/lib/node_modules/truffle/build/cli.bundled.js:71690:12)\n    at IncomingMessage. (/Users/billy/.nvm/versions/node/v7.2.0/lib/node_modules/truffle/build/cli.bundled.js:71650:24)\n    at emitNone (events.js:91:20)\n    at IncomingMessage.emit (events.js:185:7)\n    at endReadableNT (_stream_readable.js:974:12)\n```\nAbout Genache yes you are right ! Version is 1.0.2 not 1.0.3. @benjamincburns  Here is a repository where i am facing the bug i created it from scratch like it was working before 6 days :D\nhttp://gitlab.youvolio.com/kristiyan.tachev/truffle-contracts-issue. Also in this repository there is a command inside package.json npm run truffle-fix it will copy lib/truffle-contract/contract.js to ./node_modules/truffle-contract/ this is because of issue with send and sendAsync explained here https://github.com/trufflesuite/truffle-contract/issues/57 if i don't do this it will throw error\n\nTypeError: Cannot read property 'apply' of undefined. Guys this is INSANE!!!! \n\nI just put as a last chance try! PARAMETER GAS to sendTransaction Oh my god and it is fucking working!!!!!!!!!!!!!! I am soo soo happy !!\nAnyway if someone have the same problem try to put gas as a parameter with appropriate amount :+1:  \n\nthis.rawTruffleInstance.sendTransaction({from: address, value: web3.utils.toWei(amount, \"ether\"), gas: \"220000\"})\n\n48 Hours to catch this miss understanding i can't believe it really.... At least on .catch needs to throw raw error instead of hard coded error which can come from many different problems when passing wrong parameters to your customized contract for example :)\nRegards! :+1: . ",
    "robbiehanson": "same issue\nTruffle v4.0.4\nparity v1.8.6. That's excellent news, thank you. However, the documentation didn't really explain this. (So I've submitted a pull request to update it.)\nFirst, I saw this example:\n// Deploy A, then deploy B, passing in A's newly deployed address\ndeployer.deploy(A).then(function() {\n  return deployer.deploy(B, A.address);\n});\nWhich I understood as: \"OK, so the ARGS are for the contract, as it gets invoked during contract creation on the blockchain\"\nThen I saw this in the documentation:\nDEPLOYER.DEPLOY(CONTRACT, ARGS\u2026, OPTIONS)\nAdditionally, the last argument is an optional object that observes a single key, overwrite. If overwrite is set to false, the deployer won't deploy this contract if one has already been deployed.\n\nWhich I understood as: \"OK, so one can also pass an options object, which is just used by the deployer code to determine which path it should take.\"\nIf I'm understanding this correctly, you're saying that the options is actually used by both the deployer, and by the 'send transaction' stuff.\nHere's the pull request I submitted to improve the documentation:\nhttps://github.com/trufflesuite/trufflesuite.com/pull/35. I just realized this doesn't really fix all the fine-grained options:\n\ndeploying the Migrations contract  <- Fixed\ninvoking Migrations.setCompleted(1) <- Not fixed\ndeploying my contract  <- Fixed\ninvoking Migrations.setCompleted(2) <- Not fixed\n\nIs there a way I can specify the gasPrice when invoking Migrations.setCompleted(x) ?. ",
    "pvmraghunandan": "i am getting the same issue. \nTruffle v4.0.5. Getting error as \"TypeError: Cannot read property 'structLogs' of undefined\". Is there any additional configuration required?. ",
    "saradotramli": "I was still facing this issue with truffle 4.0.4 & 4.0.5 with the latest ganache-cli v6.1.0-beta.0\nI had to manually edit truffle's cli js found here to fix it:\nC:\\Users\\\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js\nThe error message gives out the line causing this error.\nIn my case it was in this method: Debugger.prototype.getTrace\nI added a \nconsole.info(result);\nbefore the line accessing structLogs:\naccept(result.result.structLogs)\nTurned out that the getTrace call was rejected by the evm saying that there is a mismatch in the number of params being passed.\nSo changed this line:\nparams: [tx_hash],\nto\nparams: [tx_hash, {}],\nThat fixed it for me. For others, the reason might not be the same, but you can follow the same steps to figure out what it is.\nHTH.. Try from a powershell window instead of command line. Also ensure the location of truffle.cmd is in the PATH (either System or User). ",
    "morozovsk": "same issue:\nTruffle v4.0.6\nganache-1.1.0-beta.0-x86_64.AppImage. ",
    "pkoch": "I've successfully followed @saradotramli's instructions, things just started to work.. ",
    "EralpB": "same issue. @gnidan what are the public nodes that support this? Does infura support it? I'm getting an error but I'm not sure if that's the cause.. ",
    "villesundell": "By following @saradotramli's debugging instructions, I noticed that for me the problem was: \n{ jsonrpc: '2.0',\n  error: { code: -32601, message: 'Method not found' },\n  id: 1520947668993 }\nThis is because my Parity does not support (yet) \"debug_traceTransaction\" (https://github.com/paritytech/parity/issues/4858)\nIn my case, this is not Truffle's problem, but the error could be a bit more informative :D . ",
    "nullablebool": "Following @saradotramli method I was able to get further, I then ran into \nTypeError: Cannot read property 'line' of undefined\n    at Object.formatRangeLines (\\node_modules\\truffle\\build\\webpack:\\~\\truffle-debug-utils\\index.js:211:1)\nSo as a quick fix, I just added the following two lines to this method:\nformatRangeLines: function(source, range, contextBefore) {\n    range.start = range.start || {line: 0, column: 0};\n    range.end = range.end || {line: 0, column: 0};\n. ",
    "Systerr": "I can reproduce this bug on 4.0.0-beta1. Hi. @gnidan i able to reproduce the same problem after deleting build directory and recompile.\ntruffle@4.0.0-beta.2\nethereumjs-testrpc@4.1.3\nSorry right now source code is closed\n. ",
    "androolloyd": "i uninstalled and did a fresh install after receiving this error and was presented with another error, around a diff variable not being defined. this is newest truffle, with a geth dev node\nGathering transaction data...\n/usr/local/lib/node_modules/truffle/build/cli.bundled.js:309080\n      accept(result.result.structLogs);\n                          ^\nTypeError: Cannot read property 'structLogs' of undefined\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:309080:27\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:294942:9\n    at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:296367:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:164934:18)\n    at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:165224:12)\n    at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:165379:12)\n    at IncomingMessage. (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:165339:24)\n    at emitNone (events.js:110:20)\n    at IncomingMessage.emit (events.js:207:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n. ",
    "earizon": "(Related)\nI use next script to wrap truffle in a containerized environment:\nhttps://github.com/earizon/utility_shell_scripts/blob/master/node_wrapper.sh\nFirst I install in a local directory as:\n$ ./node_wrapper.sh npm install -g --prefix=/root/truffle_install truffle\nThen on the working directory I create a second utility script (just to save some typing):\n$ cat truffle.sh \n#!/bin/bash\n./node_wrapper.sh /root/truffle_install/bin/truffle $*\n\nFinally I just execute ./truffle.sh <command> instead of just truffle <command>\nThe node_wrapper.sh is really simple. The node version can be changed by just modifying the value of NODE_VERSION. This script can be used as a final utility or as a reference for more elaborate setups\n. ",
    "davidperrenoud": "I've got the same problem. The steps Saving successful migration to network... are not done if one uses the syntax artifacts.require(\"Migrations\").. Still an issue with Truffle v4.1.14. To reproduce you need to start with a brand new project where you haven't run truffle migrate.\nHere is the error I get now:\n```\nRunning migration: 1_initial_migration.js\nfs.js:122\n    throw err;\n    ^\nError: EISDIR: illegal operation on a directory, read\n    at Object.readSync (fs.js:509:3)\n    at tryReadSync (fs.js:337:20)\n    at Object.readFileSync (fs.js:374:19)\n    at FS.getContractName (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:101724:10)\n    at FS.require (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:101698:28)\n    at Resolver.require (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:59966:25)\n    at Object.require (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:69602:36)\n    at ResolverIntercept.require (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:197047:32)\n    at /Users/pea/tend/smart-contracts-test/migrations/1_initial_migration.js:1:30\n    at Script.runInContext (vm.js:130:20)\n    at Script.runInNewContext (vm.js:136:17)\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:101639:14\n    at FSReqCallback.readFileAfterClose [as oncomplete] (internal/fs/read_file_context.js:53:3)\n```. Can anyone test this again?. ",
    "jaddison": "Closing. Found a race-condition type of issue. Apologies for the noise.. I don't recall specifically - but it wasn't truffle or testrpc related. It was definitely my contract/deployment logic. I think it was likely with how I was deploying to testrpc in my migrations - maybe it wasn't waiting for contracts to deploy before calling contract functions? Something along those lines.\nEdit: the working code is here. Feel free to peruse.. ",
    "7sedam7": "@jaddison can you provide the solution that solved your problem, please?\nI use:\n * OS: OSX 10.13.1\n * Truffle: 4.0.1\n * Solidity: 0.4.18\n * node: 8.9.0\n * npm: 5.5.1\nFor me tests sometimes fail, sometimes they pass, contract is erc20 token, taken from minime and zeppelin-solidity. ",
    "onetom": "The issue should be solved by updating https://github.com/trufflesuite/truffle-init-default to be compliant with the latest Solidity version (0.4.17).\nI filed an issue for it in that repo:\nhttps://github.com/trufflesuite/truffle-init-default/issues/5. I'm experiencing inexplicable delays talking to a geth --dev even when I'm interfacing with it via web3.js or ethers.io directly.\nIt just hangs for seconds...\nI'm also seeing \ud83d\ude31 block lost entries in the geth log, which I haven't found a lot of info about, but as I understand it should only happen on a multi-node PoA chain, not on a solo geth --dev chain.. Why would you want to copy these keys one by one into MetaMask?\nJust pasting the mnemonic into MetaMask, then clicking the Create Account menu a few times would recreate them within MetaMask automatically, since they are derived from the mnemonic.\nIs it about convenience, so you can mix these in with your other keys you have already added to MetaMask?\nIs it even a good idea to do so?. Can you provide instructions about how are you testing it, please?. https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki actually has an image which gives some sense of the hierarchical nature of these accounts, but the concise description of what a mnemonic is can be found here: https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki\nI haven't found any better documentation either.. 1. Your 2_deploy_contracts.js is the same as 1_initial_migration.js\n2. Try with the latest officially stable Truffle version; 4.0.1\n3. Try with latest Node.js; 8.9.1 LTS or 9.1.0 Current\nAside from these we have experienced the same error message when trying to deploy to Rinkeby last week through a local geth node.\nI suspect that the issue is the connectivity of that local node.\nIt usually only had 2-3 peers available, in which case the transaction won't be mined any time soon because it can't spread far enough into the network.\nWe had successful deployments with the same setup if there were 5-6 peers present, which we had to wait for 20-40 minutes to happen after starting the geth process.\nTo mitigate connectivity issues, we also tried to go through Infura.\nIt's a great option at the cost of a little extra complexity:\nYou have to provide some key management logic yourself, since Infura won't take on that responsibility.\nYou can find some older stackoverflow articles on how to do this, but they are slightly incomplete.\nFor a working example, have a look at the current official Truffle documentation:\nhttp://truffleframework.com/docs/advanced/configuration#accessing-only-one-of-multiple-network-providers and make sure you wrap your HDWalletProvider construction into a function!\n(You might also need to sign up to Infura and append the Access Token you get to their base URL; although it seems to work without it too, but I guess only for a limited time)\n(You need a mnemonic too, which you can easily get just by starting TestRPC or creating a MetaMask \"Den\")\nWe also noticed that the timeout error about the 50 blocks is thrown a lot earlier than the time required to mine 50 blocks, so this issue might be a combination of multiple bugs.. You said your ethereum client is cpp-ethereum, but you haven't mentioned its version or configuration.\nYou haven't mentioned your test setup in truffle.js, so I assume you are running against the built-in TestRPC (aka ganache-core) of Truffle, so the cpp-ethereum version and config is irrelevant.\nBut then I'm not sure why do you need that blockHeightManager gymnastics?\nTruffle handles reverting the test chain between tests, but you have 1 test anyway.. Your description is insufficient to reproduce the issue.\nIt also seem too broad in scope. Try to isolate the problem.\nIt's most likely doesn't have to do anything with IPFS and I don't see how is it related to Truffle,\nsince you don't mention anything Truffle specific in your description.. Deleting the build directory, then running test again without leaving the truffle develop console succeeds and allows continuing work without a console restart, but that's obviously not any better than running truffle test independently.\nEnvironment\nOperating System: macOS Sierra 10.12.6\nTruffle version: v4.0.1\nEthereum client: truffle develop\nnode version: v8.9.1\nnpm version: 5.5.1\n. As the error message suggest it, it's a method overloading issue.\nBeing more specific about the types allows Solidity to pick exactly one equal implementation:\nAssert.equal(uint(1), uint(1), \"One is One.\");. ",
    "kevinhughes27": "I was actually confused by these commands - my assumption was that I would run both truffle init and then truffle unbox with my chosen box. This doesn't work since unbox won't run in an existing directory. I was actually going to open an issue about this but if init is being deprecated then there is no point. . ",
    "cpurta": "@cgewecke I just ran that script against a geth node running the private dev chain. Geth is correctly mining and sealing blocks as it should and that script ran without a problem. Using geth --dev --rpc to start the client. . @cgewecke I just ran some tests against a geth dev node using the --dev.period flag and migration and tests worked perfectly. I was not aware of that flag in geth (guess I should look a bit more closely at the usage \ud83d\ude05). I think that resolves this issue then.\nI am finding that I am running into the same issue using parity. Will be looking into if the same option applies there with their instant seal dev chain. If not it looks like that is something that parity can add before web3 1.0 is integrated with truffle. \nThank you so much for looking into this. . Ahh. That makes sense. I agree that is pretty misleading. I will run some tests using images with multiple accounts with funds to confirm that is the case. . @cgewecke ran tests using geth with a private chain that has multiple funded and unlocked accounts and no longer seeing this error. I think that we are good to close out this issue. Thanks for looking into this so quickly!. Sure thing. I have my own repo for setting up the image that has the accounts setup, funded and unlocked here: https://github.com/cpurta/geth-devnet. Should also be able to pull the image from docker hub docker pull purta/geth-devnet:latest if you want to skip building the images. \nI was using augur's image for parity (https://github.com/AugurProject/ethereum-nodes) but it looks like they only unlock the first account. I will probably end up forking and unlocking all accounts then build and push those images. . ",
    "matthieu-merlyn": "@karalabe @cgewecke @gnidan \nAny updates on this issue? Thanks.. ",
    "Arachnid": "This isn't @stale.. I'm not certain; if you're unsure if you've fixed it you can simply run any test suite against a geth instance with instant-mining enabled.. ",
    "manosamy": "I see that this is a solidity issue, already reported in github solidity forum #3052. Closing here.. ",
    "drgorb": "I just tried MyContract.new()in the console with \n\nRopsten\nTruffle v4.0.1\nParity 1.7.10 (latest stable release)\n\nThe behaviour is slightly different: the transaction waits until it's been mined and then fails with \nError: The contract code couldn't be stored, please check your gas amount.\nat Object.callback (/Users/mroon/.nvm/versions/node/v8.5.0/lib/node_modules/truffle/build/cli.bundled.js:329221:46)\nat /Users/mroon/.nvm/versions/node/v8.5.0/lib/node_modules/truffle/build/cli.bundled.js:39618:25\nat /Users/mroon/.nvm/versions/node/v8.5.0/lib/node_modules/truffle/build/cli.bundled.js:331159:9\nat /Users/mroon/.nvm/versions/node/v8.5.0/lib/node_modules/truffle/build/cli.bundled.js:314196:9\nat XMLHttpRequest.request.onreadystatechange (/Users/mroon/.nvm/versions/node/v8.5.0/lib/node_modules/truffle/build/cli.bundled.js:315621:13)\nat XMLHttpRequestEventTarget.dispatchEvent (/Users/mroon/.nvm/versions/node/v8.5.0/lib/node_modules/truffle/build/cli.bundled.js:70159:18)\nat XMLHttpRequest._setReadyState (/Users/mroon/.nvm/versions/node/v8.5.0/lib/node_modules/truffle/build/cli.bundled.js:70449:12)\nat XMLHttpRequest._onHttpResponseEnd (/Users/mroon/.nvm/versions/node/v8.5.0/lib/node_modules/truffle/build/cli.bundled.js:70604:12)\nat IncomingMessage.<anonymous> (/Users/mroon/.nvm/versions/node/v8.5.0/lib/node_modules/truffle/build/cli.bundled.js:70564:24)\nat emitNone (events.js:110:20)\n\nbut the transaction is successful and the contract has been created as displayed in etherscan.io. ",
    "wildmolasses": "@gnidan have you started this already @ https://github.com/truffle-box/metacoin-box?. ",
    "agrcrobles": "In order to learn a little bit more about truffle, in some free time I created react-ethereum-metacoin which is compatible with truffle 4 and I will be happy to add it to be used as a box.\nThat's all, thanks for maintaining and supporting this awesome set of libraries. :). ",
    "marcinczenko": "Is it so hard to fix? Can I help in anyway? This is really pain.... @nicovalencia is there anything changed about this option recently? This option used to brake migrations.... ",
    "kalote": "I'm currently falling into this issue, and the workaround is to create a symlink\n$ cd src/\n$ ln -s ../build build. ",
    "sonaye": "truffle compile && mv build/contracts src/abis. ",
    "nicovalencia": "@thisbejim @marcinczenko @kalote you can pass a build directory flag to truffle compile like this:\ntruffle compile --contracts_build_directory=./src/build\nIt looks like you can also pass a path for the .sol files with contracts_directory.. Note that a standard deploy migration adds data to your ABI that you need for your clients, so this doesn't fully work until this issues is fixed: https://github.com/trufflesuite/truffle-migrate/issues/10. @marcinczenko still breaks -- see that issue above. I don't have time to dig into a fix right now. I'd just symlink it for now.\nBy the way, you're probably going to have another issue when you build the react app, because create-react-app builds to ./build. You'll need to npm run eject then edit the configs/paths to point to an alternative build directory.. ",
    "stevenbarragan": "This is a duplicated of https://github.com/trufflesuite/truffle-migrate/issues/10. ",
    "jonathankau": "I added some hacky code to my globally installed Truffle npm module to get this working. Just find wherever Truffle is installed (for me it was ~/.nvm/versions/node/v6.11.3/lib/node_modules/truffle) and add the following code to your truffle/build/cli.bundled.js.\n``js\n    // Added this afterthis.repl = repl.start...inReplManager.prototype.start`.\ntry {\n  fs.statSync('.truffle_console_history');\n} catch(e) {\n  fs.writeFileSync('.truffle_console_history', '');\n}\n\nfs.readFileSync('.truffle_console_history')\n  .toString()\n  .split('\\n')\n  .reverse()\n  .filter(line => line.trim())\n  .map(line => this.repl.history.push(line));\n\nthis.repl.on(\"line\", function(line) {\n  fs.appendFileSync('.truffle_console_history', line + '\\n');\n});\n\n```\nThis is incredibly brittle, and might or might not work depending on your Node/Truffle version. Would be nice to have this baked into Truffle's REPL.. ",
    "giacecco": "+1. ",
    "sreid": "+1. ",
    "fvictorio": "Do you have that error when using a testnet or testrpc?\nThis may be obvious advice, but just in case: I've got that error before when using geth and a testnet because the node was not fully synced yet. Maybe in the time that it took you to remove the directory the node finished syncing? Just a wild guess.. ",
    "sabhiram": "I am fairly new to solidity, but the Assert contract only gives you helper functions to validate specific types that are common. A struct is a plain-ol-data construct, the definition of which is left to the developer. Therefore, it would not make sense to have common helper functions for custom structures. \nWhat is it that you are trying to validate? Your contract will typically have accessors which are public to fetch various pieces of your structure - you would call those functions, fetch the underlying types and Assert (for example) against those. Does that make sense?. Bah - I knew I goofed something up when the other artifact file was changing. My bad. I will close these are re-submit :). Thanks for the pointers - submitted the feature as a PR to truffle-core.. Also, here is the output from truffle test:\n```\n    1) testEqual_GOOD\nEvents emitted during test:\n---------------------------\n\nTestEvent(result: <indexed>, message: a and b are equal)\n\n---------------------------\n2) testNotEqual_BAD\n\nEvents emitted during test:\n---------------------------\n\nTestEvent(result: <indexed>, message: a and b are not equal)\n\n---------------------------\n\u2713 testNotEqual_GOOD (38ms)\n\n1 passing (631ms)\n  2 failing\n1) Test testEqual_GOOD:\n     Error: a and b are equal\n2) Test testNotEqual_BAD:\n     Error: a and b are not equal\n. This actually will also fail when the very first element of the arrays match. The code goes like this:\n    function notEqual(int[] arrA, int[] arrB, string message) public returns (bool) {\n        var r = arrA.length == arrB.length;\n        if (r) {\n            for (uint i = 0; i < arrA.length; i++) {\n                if (arrA[i] == arrB[i]) {\n                    r = true;\n                    break;\n                }\n            }\n        }\n        _report(!r, message);\n    }\n```\nSo if a = [1,2] and b = [1,4] - it will consider them equal and throw an assert when checking notEqual. . PR#769 contains the fix for this as well. . Closing this in favor of https://github.com/trufflesuite/truffle-core/issues/101. ",
    "macalinao": "Bump. This is something that's super useful.. Still an issue!. ",
    "eloudsa": "truffle 4 is in production but the documentation is still related to the version 3.4.x. This is quite disturbing as truffle 4 has major changes.. This feature will be really appreciated because right now I have to import accounts on Metamask and I don't know where to find the private keys generated by Truffle.. Can we expect this feature on 4.0.2?. Hi\nI have installed the beta version of Truffle (v5.0.0-beta.0) and tried to display the error reason thrown in my contract. I have followed this: https://github.com/trufflesuite/truffle/releases#reason-strings\nI tried displaying the error reason string in my JS test without success. The error string is always \"Transaction has been reverted by the EVM\" even if my test is running on ganache-cli version 2.2.1.\nIs there a specific path or constraint to follow in order to display the error reason strings or is it too early to implement such features?\nThanks  \n. @cgewecke Thanks for your reply. I'm using ganache as I can check transactions in the console window. Without the  --noVMErrorsOnRPCResponse flag, the reason string message is displayed in the error message. But, the reason remains undefined. Do you have a any small truffle project (contract and test) I can use to check my environment?\n@cgewecke Another issue: If I run ganache-cli with a block time, the reason is not more displayed.. Btw, I fixed the issue by installing \"any promise\", so I'm not stuck.\nDo you plan to include this package in a next version or will we have to install it ourselves in our projects?\nUPDATE:\nOn another Mac, I also had to install \"binding\" to skip the following error:\nError: Cannot find module 'bindings'. I have just installed the final version of Truffle 5.\nI have uninstalled and installed truffle-hdwallet-wrapper (version 1.0).\nWhen I try to migrate on Ropsten , I have another error:\n$ truffle migrate --reset --compile-all --network ropsten\nError: Cannot find module 'websocket'\n    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:581:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:507:25)\n    at Module.require (internal/modules/cjs/loader.js:637:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at require (/Users/eloudsa/ChainSkills/ChainList/chainlist-truffle5/node_modules/truffle-hdwallet-provider/dist/webpack:/truffle-hdwallet-provider/webpack/universalModuleDefinition:3:1)\n    at Object.<anonymous> (/Users/eloudsa/ChainSkills/ChainList/chainlist-truffle5/node_modules/truffle-hdwallet-provider/dist/webpack:/truffle-hdwallet-provider/webpack/universalModuleDefinition:1:1)\n    at Module._compile (internal/modules/cjs/loader.js:689:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)\n    at Module.load (internal/modules/cjs/loader.js:599:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:530:3)\n    at Module.require (internal/modules/cjs/loader.js:637:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at Object.<anonymous> (/Users/eloudsa/ChainSkills/ChainList/chainlist-truffle5/truffle-config.js:1:26)\n    at Module._compile (internal/modules/cjs/loader.js:689:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)\n    at Module.load (internal/modules/cjs/loader.js:599:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:530:3)\n    at Module.require (internal/modules/cjs/loader.js:637:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at Function.Config.load (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-config/index.js:381:1)\n    at Function.Config.detect (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-config/index.js:370:1)\n    at Object.run (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-core/lib/commands/migrate.js:165:1)\n    at Command.run (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-core/lib/command.js:113:1)\n    at Object.<anonymous> (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-core/cli.js:47:1)\n    at __webpack_require__ (/usr/local/lib/node_modules/truffle/build/webpack:/webpack/bootstrap 10c8e5c48cca88d8ca36:19:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/webpack/bootstrap 10c8e5c48cca88d8ca36:65:1\nTruffle v5.0.0 (core: 5.0.0)\nNode v10.14.2\nMy packages:\n\"dependencies\": {\n    \"dotenv\": \"^6.2.0\",\n    \"truffle-hdwallet-provider\": \"^1.0.0\"\n  }. My problem has been solved thanks to the version 1.0.1.\nThanks @CruzMolina !!!\nIf issues from @gjeanmart is also solved, we can close this issue.\n. ",
    "leTrice": "Hi @brianedelman , just checked this with port 9545 and with port 8546. Same behaviour as described by @SCBuergel . It seems that migration and test scripts are only running under development console (truffle develop).. Hi @brianedelman , this is exactly the missing piece for me, now i can use it like ethereumjs-testrpc before. Just start another terminal and fire truffle develop --log and in another terminal, you can run truffle migrate or truffle test as before.. ",
    "jessebmiller": "Will truffle test run an in memory testrpc by default as described in #490?. ",
    "shuji-koike": "Tests written in Solidity seems to be working as expected, but JavaScript tests are not?\nI wrote some same tests as sol and js.\nAnd as far I can tell, on my environment...\n\nif testrpc or ganache is running, both tests passes\nif development network is defined in config file but testrpc is not running, both tests fails\nif development network is not defined and testrpc is not running, sol tests passes but js tests fails\n\nBTW I'm newbie in truffle and ethereum, hope my info helps.\n. ",
    "Fariha1123": "Its port 8545 on which testrpc runs, so specify that in your truffle.js. Moreover, in another powershell window just initiate test rpc via this command : testrpc. Hope this works !. ",
    "dongw00": "It seems to difference with your ethereum client (such as geth, ganache). check your ethereum client's port. you have to match port num in truffle-config.js file.\n\n . ",
    "berar": "Is it possible to implement this? Along with the possibility of a change of msg.value and the likes? To be frank, I am surprised that this isn't possible currently since it should play a major part of the test cases given the scope. . I know, except that I am getting eth_call: invalid opcode error when I am calling functions with parameters. Still, given that there is a possibility of writing tests in solidity, a way to access 'from' field should exist.. ",
    "mickys": "@berar - You can always take the hard way, by having a \"testMethod\" that instantiates a contract, that will then call your specified method, that way the msg.sender is the \"new instance\", thus allowing you to test for cases where the \"code needs to revert / throw\" in case of a different sender.\nJust remember you will most likely need to use the low level \"call\" and check for true / false on the execution.\nProblem with call is that you can only use it to determine if execution was successful or not. And in order to retrieve the method's return value you're going to have to go into assembly and do some memory assignment yourself.\nIt's nice to think of \"solidity tests\" as unit tests, and JS ones as integration, but in reality you probably want to stick to JS, as that's what everyone seems to be using these days. . ",
    "EnchanterIO": "@tcoulter but what if i want to test if my contract is properly storing/responding to multiple addresses? \nE.g. if I have a Contract attribute of type array or some mapping with key being the sender address, i want to make sure the array is properly storing multiple users data. \nI can only interact with my solidity test contract under 1 address?. I think I found an example how to do it in JS, which seems to be more capable: https://github.com/gustavoguimaraes/smart-contract-testing-javascript-example-/blob/master/test/fundRaise.js . ",
    "pradhumn28": "@EnchanterIO  Did you find something in solidity to do it? Having hard time to switch b/w accounts in testrpc . How can i interact with my solidity test contract with more then 1 address?. ",
    "Velenir": "You need to return deployer.deploy(...) from inside .then(() => {...})\nFor me it works with\ndeployer.deploy(contractA).then( ()=> deployer.deploy(contractB) );\nor\ndeployer.then( ()=> {\n  ...\n return deployer.deploy(contractB);\n);\nasync...await and any Promise.* don't work as per #501. ",
    "mhchu": "I will give it a try and report back (probably in a couple days when I can return to my project).. ",
    "zcstarr": "This is still an issue in 4.0.1 only .then and Promise chaining seems to work. ",
    "dzentota": "Tried every possible combination, async + await, then()  and async+await+then(), it doesn't work. In fact it always save Artifacts before deploying second contract, that's why you do not see address of the second contract. In my case I see address of the second contract after saving artifacts:\nRunning step...\n  Deploying SampleCampaign...\n  ... 0x68e6e16d86617689f9522e6dc9b56e0e9f66c7400e7c101fd3e0afaf5ffe8ca4\nSaving artifacts...\n  ... 0xdc7a4c7cdc7634c1b68fa254f863b2d54edbb475100f52fe87f084c63dcbd95d\n  SampleCampaign: 0xad89528ffe22aa057cfbec6c9ccf2367a638eb79\nSo if I run truffle console and then in console:\nSampleCampaign.deployed()\nI get:\nSampleCampaign has not been deployed to detected network (network/artifact mismatch)\n    at /usr/lib/node_modules/truffle/build/cli.bundled.js:318327:17\n    at \n    at process._tickDomainCallback (internal/process/next_tick.js:228:7)\nBut if I check address \"0xad89528ffe22aa057cfbec6c9ccf2367a638eb79\" I see that contract is there:\nSampleCampaign.at(\"0xad89528ffe22aa057cfbec6c9ccf2367a638eb79\")\n. I saw #501 before and some similar. But approach mentioned in #501 doesn't work, output is the same. Hi, unfortunately I don't have all the variants I've tried. Here is an example with then()\n```js\nvar Crowdsale = artifacts.require(\"./Crowdsale.sol\");\nvar SampleCampaign = artifacts.require('./SampleCampaign.sol');\nmodule.exports = function (deployer) {\n    Crowdsale.deployed().then(function () {\n        console.log(Crowdsale.address);\n       return .token.call();\n    }).then(function(tokenAddress) {\n        let crowdsaleAddress = Crowdsale.address;\n        let minContribution = 1000000000000000000;\n        let maxContribution = 10000000000000000000;\n        let softCap = 5000000000000000000;\n        let hardCap = 100000000000000000000;\n        let startTime = Math.floor(Date.now() / 1000);\n        let endTime = Math.floor(Date.now() / 1000) + 100000;\n        let fee = 1;\n        let bountyFee = 1;\n    deployer.deploy(\n        SampleCampaign,\n        crowdsaleAddress,\n        tokenAddress,\n        minContribution,\n        maxContribution,\n        softCap,\n        hardCap,\n        startTime,\n        endTime,\n        fee,\n        bountyFee\n    );\n})\n\n}\n```\nOutput:\n```\nmigrate -f 4\nUsing network 'develop'.\nRunning migration: 4_deploy_campaign.js\nSaving successful migration to network...\n  Replacing SampleCampaign...\n  ... 0x87e580340a0fdff84559a1bb014f08f281476024af9f32a8036e4743f19f9f2d\nSaving artifacts...\ntruffle(develop)>   ... 0x2606dfbc10b81afaa9d780e64c1612cea03e27dea943b48b2f3c40b4d03b3856\n  SampleCampaign: 0xbaaa2a3237035a2c7fa2a33c76b44a8c6fe18e87\nundefined\n```\nActually, I see all this text except undefined. Undefined appears after I hit enter (otherwise it hangs). Thanks @cgewecke now it works!!!. ",
    "ismaelbej": "This issue seems to be a duplicate of https://github.com/trufflesuite/truffle/issues/501.. Same issue for me solidity tests fails with 4.1.5 but works with v4.1.4 (Windows 7 x64). . I'll try to create a small reproducible example for now the stack trace output\n```\n   1) TestRelay \"before all\" hook: prepare suite:\n      Error: Could not find artifacts for /D/test/contracts/Parser/Tx.sol from any sources\n       at Resolver.require (C:\\Users\\little\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-resolver\\index.js:37:1)\n       at TestResolver.require (C:\\Users\\little\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-core\\lib\\testing\\testresolver.js:17:1)\n       at TestResolver.require (C:\\Users\\little\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-core\\lib\\testing\\testresolver.js:17:1)\n       at C:\\Users\\little\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-core\\lib\\testing\\soliditytest.js:141:1\n       at Array.forEach ()\n       at C:\\Users\\little\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-core\\lib\\testing\\soliditytest.js:140:1\n       at C:\\Users\\little\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-deployer\\src\\deferredchain.js:20:1\n       at \n       at process._tickCallback (internal/process/next_tick.js:188:7)\n```\nThe file Parser/Tx.sol  is a dependency of RelayTests but compilation and migration run fine. Also executing javascript test will run without issues.\nAnd the solidity test, but I think the content doesn't matter too much because it is never run.\n```\npragma solidity ^0.4.15;\nimport \"truffle/Assert.sol\";\nimport \"truffle/DeployedAddresses.sol\";\nimport \"../contracts/RelayTests.sol\";\ncontract TestRelay {\nfunction testFlip32Bytes() {\n    RelayTests dr = RelayTests(DeployedAddresses.RelayTests());\n    uint expected = 0x201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504030201;\n    Assert.equal(dr.flip32BytesPublic(0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20), expected, \"flip32Bytes failed\");\n}\n\n}\n``. After some debuggingcompileContractsWithTestFilesIfNeeded` in https://github.com/trufflesuite/truffle-core/blob/develop/lib/test.js#L103 will return dependencies in different format between v4.1.4 and v4.1.5 on windows\nWith v4.1.5\n{\n  \"paths\": [\n    \"/C/Users/daffyduck/develop/mud/contracts/ConvertLib.sol\",\n    \"/C/Users/daffyduck/develop/mud/contracts/MetaCoin.sol\",\n    \"/C/Users/daffyduck/develop/mud/test/TestMetacoin.sol\",\n    \"truffle/Assert.sol\",\n    \"truffle/DeployedAddresses.sol\"\n  ]\n}\nWith v4.1.4\n{\n  \"paths\": [\n    \"C:\\\\Users\\\\daffyduck\\\\develop\\\\mud\\\\test\\\\TestMetacoin.sol\",\n    \"truffle/Assert.sol\",\n    \"truffle/DeployedAddresses.sol\",\n    \"C:\\\\Users\\\\daffyduck\\\\develop\\\\mud\\\\contracts\\\\MetaCoin.sol\",\n    \"C:\\\\Users\\\\daffyduck\\\\develop\\\\mud\\\\contracts\\\\ConvertLib.sol\"\n  ]\n}\nThe contract I've used is Metacoin without any modification, running truffle test .\\test\\TestMetacoin.sol.\n. ",
    "NedYork": "I've made a PR on truffle-core which hard-codes the corresponding private keys and logs them. . ",
    "iamchrissmith": "Until this gets merged, here are the private keys in text format so anyone can copy them into metamask. (Note: I OCR'ed an image from @NedYork in the PR. I verified the first one, but have not made sure the others came through correctly):\nPrivate Keys: \n(0) c87509a1c067bbde78beb793e6fa76530b6382a4c0241e5e4a9ec0a0f44dc0d3 \n(1) ae6ae8e5ccbfb04590405997ee2d52d2b550726157b875055c56d94e974d162f\n(2) odbbe8e4ae425a6d2687f1a7e5ba17bc98c675656790f1b8ad91195c05875ef1 \n(3) c88b705fb08cbea894b6aeff5a544fb92e78a18e19814cd85da85b71f772aa6c \n(4) 588c684foba1ef5017716adb5d21a055ea8e90277d0868557519f97bede61418 \n(5) 659cbboe2411a44db65778987b1e22155c086a95eb6b18bdf89de078917abc65 \n(6) 82d052c865f5765aad42add458569276cood5d88a2d062d56b2bae914d58b8c8 \n(7) aa5680d5d48a8285415f7a108567c7299ca75f555755860a87b08f59595618b7 \n(8) Of62d96d6675f52685bbdb8ac15cda7c25456f65efbb9d07700d8669ff12b7c4 \n(9) 8d5566125cb560bb606579f90aobfd4769eecc0557f1b562dcae9012b548b1e5 . ",
    "albertc44": "@arielgabizon you need to \"logout\" of metamask by hitting \"Lock\" and then below where you enter your password is the \"restore from seed phrase\" link\n\n. Asked this question on SO and it appears to be a common issue with Truffle, linked to #596. Workaround is to delete /build like @arunmitteam suggested. Works fine in Remix.. ",
    "richmcateer": "Some of the keys @iamchrissmith posted didn't work for me.\nThe correct keys can be found here (and pasted below): https://github.com/trufflesuite/truffle-core/blob/ab4281ff3363da4810168b750de6f525da20fd17/lib/commands/develop.js#L68\nvar privateKeys = [\n  'c87509a1c067bbde78beb793e6fa76530b6382a4c0241e5e4a9ec0a0f44dc0d3',\n  'ae6ae8e5ccbfb04590405997ee2d52d2b330726137b875053c36d94e974d162f',\n  '0dbbe8e4ae425a6d2687f1a7e3ba17bc98c673636790f1b8ad91193c05875ef1',\n  'c88b703fb08cbea894b6aeff5a544fb92e78a18e19814cd85da83b71f772aa6c',\n  '388c684f0ba1ef5017716adb5d21a053ea8e90277d0868337519f97bede61418',\n  '659cbb0e2411a44db63778987b1e22153c086a95eb6b18bdf89de078917abc63',\n  '82d052c865f5763aad42add438569276c00d3d88a2d062d36b2bae914d58b8c8',\n  'aa3680d5d48a8283413f7a108367c7299ca73f553735860a87b08f39395618b7',\n  '0f62d96d6675f32685bbdb8ac13cda7c23436f63efbb9d07700d8669ff12b7c4',\n  '8d5366123cb560bb606379f90a0bfd4769eecc0557f1b362dcae9012b548b1e5'\n];.\n",
    "timothywangdev": "happened to me as well.. the solution is not working anymore. Agree with @pospi . same. same error\n```\nError: sender doesn't have enough funds to send tx. The upfront cost is: 1024628448149621997816844960494848980548232143211 and the sender's account only has: 99717527600000000000\n```. ",
    "almindor": "Same, can't seem to step into an inherited call. Can confirm same issue. ",
    "veebuv": "Any solution to this ?. Hey, could you tell me how the problem was solved. Seems like i'm having the exact same issue. Did DS_Store delete but that didn't work, i've also ensured that my version is 4.0.4\nSyntaxError: Unexpected token < in JSON at position 2551\n    at JSON.parse (<anonymous>)\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:63221:33\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:162329:9\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:161676:16\n    at iteratorCallback (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:162253:13)\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:162161:16\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:162326:13\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:63214:15\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:528:3). ",
    "jstoeffler": "I have just one contract (aside from the Migrations) and I'm having the issue. . Actually I'm having the same error in the same situation but with a different stack trace (Mac OS): \nTypeError: Cannot read property 'line' of undefined\n    at Object.formatRangeLines (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-debug-utils/index.js:210:1)\n    at printState (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-core/lib/commands/debug.js:91:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-core/lib/commands/debug.js:194:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-debugger/debugger.js:85:1\n    at <anonymous>\n    at process._tickDomainCallback (internal/process/next_tick.js:228:7)\n. Here's how I fixed it:\n\n\nFind the bundled cli file, in my case /usr/local/lib/node_modules/truffle/build/cli.bundled.js\nFind the method in which the error occurs, in my case formatRangeLines: function(source, range, contextBefore)\nLog the range object by adding a console.log(range); in the file and re-runnning it. In my case it was: { start: { line: 39, column: 0 }, end: undefined }\nSo range.end was undefined in my case, so I replaced:\nthis line : if (range.start.line == range.end.line) { by this line: if (range.end && range.start.line == range.end.line) { (null/undefined check of range.end). I've created a PR: https://github.com/trufflesuite/truffle-debug-utils/pull/2\n\nBut it doesn't seem to solve OP's issue, which I think happens here : https://github.com/trufflesuite/truffle-debugger/blob/6aea5c57683bd6b68da712356fd6ab3539f1aac7/debugger.js#L351. ",
    "boorac": "@nickjm I can confirm your workaround works, I will open an issue regarding the bug.. @Muhammad-Altabba are you debugging across multiple files? If so, check out this issue:\nhttps://github.com/trufflesuite/truffle/issues/826. @inzig did you resolve this? I'm facing the same issue. \n@cgewecke I can provide the metadata if this still is not resolved.. Actually, I think I managed to figure this out! There was a bug in geth v1.8.1 and truffle 4.0.6 - the issue was fixed in truffle 4.0.7 yesterday and I'm now able to deploy to privatenet.. @cgewecke AFXCrowdsale does not inherit from AFXToken or vice versa. I'm able to debug inherited code when using a conglomerate file. I'm not sure if it has to do with inheritance but it definitely has to do with separate files.. Happy to contribute :). Reinstalling node and truffle seems to fix the issue.. @cgewecke I'm using the command truffle develop, not sure which cli is behind the abstraction, is there a way to find out?\n@seesemichaelj I understand the issue better now, thank you. Regarding Metamask and eth_estimateGas, I suspect that Metamask uses some kind of heuristic since every time  I attempt to call a function which will be reverted the gasLimit in the transaction is automatically set to 0.\nI will try sniffing out the traffic using wireshark and report back. Also, if Metamask does indeed use eth_estimateGas, I'm wondering why is it making the wrong estimation, that is, chooses an incorrect gas limit. Is eth_estimateGas deterministic in nature?. ",
    "Robinyo": "I can also confirm @nickjm 's workaround works.. ",
    "diop": "I updated my version of Truffle to 4.1.0 and it solved the problem. . ",
    "Muhammad-Altabba": "In my case, I updated Truffle to 4.1.0 but still have the issue!\nDigging into method \"formatRangeLines: function(source, range, contextBefore)\"\nWhen \"console.log(range);\" it prints:\n    { start: undefined, end: undefined }\nActually, the exception raised when accessing range.start at this block:\nvar startBeforeIndex = Math.max(\n      range.start.line - contextBefore, 0\n    );\nThe full stacktrace of the error as shown at the Terminal is:\n```\nTypeError: Cannot read property 'line' of undefined\n    at Object.formatRangeLines (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-debug-utils/index.js:201:1)\n    at printState (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-core/lib/commands/debug.js:125:1)\n    at Object.interpreter (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-core/lib/commands/debug.js:404:1)\n    at ReplManager.interpret (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-core/lib/repl.js:119:1)\n    at bound (domain.js:280:14)\n    at REPLServer.runBound [as eval] (domain.js:293:12)\n    at REPLServer. (repl.js:539:10)\n    at emitOne (events.js:96:13)\n    at REPLServer.emit (events.js:188:7)\n    at REPLServer.Interface._onLine (readline.js:232:10)\n    at REPLServer.Interface._line (readline.js:583:8)\n    at REPLServer.Interface._ttyWrite (readline.js:860:14)\n    at REPLServer.self._ttyWrite (repl.js:612:7)\n    at ReadStream.onkeypress (readline.js:119:10)\n    at emitTwo (events.js:106:13)\n    at ReadStream.emit (events.js:191:7)\n    at emitKeys (internal/readline.js:389:14)\n    at next (native)\n    at ReadStream.onData (readline.js:970:36)\n    at emitOne (events.js:96:13)\n    at ReadStream.emit (events.js:188:7)\n    at readableAddChunk (_stream_readable.js:176:18)\n    at ReadStream.Readable.push (_stream_readable.js:134:10)\n    at TTY.onread (net.js:547:20)\n```\nAny suggestions?\nThanks,. Yes, thanks.. ",
    "chupd": "Same here. \nmy truffle version is v 4.1.5.\nbut still have the issue!\ndebug(develop:0x070e447c...)> o\nredux-saga error: uncaught at session.saga\nat session.saga\n at controller.saga\n at stepOver\n TypeError: Cannot read property 'line' of undefined\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-debugger/dist/debugger.js:610:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:76:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:36:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:90:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:36:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:86:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:36:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:86:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:36:1\n    at runSelectEffect (/usr/local/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/proc.js:698:1)\n    at runEffect (/usr/local/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/proc.js:435:1)\n    at next (/usr/local/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/proc.js:315:1)\n    at currCb (/usr/local/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/proc.js:388:1)\n    at takeCb (/usr/local/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/proc.js:466:1)\n    at Object.put (/usr/local/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/channel.js:73:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/channel.js:161:1\n    at Array.<anonymous> (/usr/local/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/channel.js:182:1)\n    at Object.emit (/usr/local/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/channel.js:26:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/middleware.js:67:1\n    at dispatch (/usr/local/lib/node_modules/truffle/build/webpack:/~/redux/es/applyMiddleware.js:35:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/utils.js:250:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/proc.js:489:1\n    at exec (/usr/local/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/scheduler.js:19:1)\n    at flush (/usr/local/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/scheduler.js:60:1)\n    at asap (/usr/local/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/scheduler.js:33:1)\n    at Array.<anonymous> (/usr/local/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/channel.js:185:1)\n    at Object.emit (/usr/local/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/channel.js:26:1)\n    at Object.dispatch (/usr/local/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/middleware.js:67:1)\n    at Session.dispatch (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-debugger/dist/debugger.js:2683:1)\n    at Session.stepOver (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-debugger/dist/debugger.js:2705:1)\n    at Object.interpreter (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-core/lib/commands/debug.js:349:1)\n    at ReplManager.interpret (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-core/lib/repl.js:119:1)\n    at bound (domain.js:301:14)\n    at REPLServer.runBound [as eval] (domain.js:314:12). ",
    "wouterbruinings": "I am experiencing a similar problem on a mac High Sierra. \nI cannot connect to the truffle development environment when wifi is turned off. \nFor me it depends to which wifi I am connected whether or not it works: \n- Cannot connect to the truffle development environment on home wifi\n- Can connect to truffle development environment on work wifi \nIn case truffle cannot connect, I also cannot find a node (truffle dev) process running on port 9545. I do find a process running on the expected port if I run truffle development --log and can successfully connect to it from a different terminal. \nWorkaround: \n\nOpen 2 terminals \nRun truffle develop --log in one \nRun truffle console in the other . Your problem is unrelated to truffle. As you are speaking about metacoin I assume you are using webpack. Take a look at this: https://github.com/webpack/webpack-dev-server/pull/263 . \n",
    "raky35": "$ npm -version truffle \n5.8.0\nturffle.js\n  mistConnection: {\n    host: '127.0.0.1',\n    port: 8545,\n    network_id: \"*\",\n    from:'0xXXXXXXXX'\ntruffle migrate --network mistConnection\nCompiling ./contracts/Voting.sol...\nWriting artifacts to ./build/contracts\nCould not connect to your Ethereum client. Please check that your Ethereum client:\n    - is running\n    - is accepting RPC connections (i.e., \"--rpc\" option is used in geth)\n    - is accessible over the network\n    - is properly configured in your Truffle configuration file (truffle.js). Facing Same issue -   \"Deploying Migrations... forever \" Started  Mist on using terminal commands  , Started  geth using terminal commands  and invoked command  \"truffle migrate --network newConnect\" on 8545  not sure what is going on \n. ",
    "ngan": "Hi @gnidan, just curious...why not just automatically log out to a log file, say log/testrpc.log? That way you can just tail the log file. I find it super cumbersome to restart my develop environment when I have both log and prompt open. You have to stop both then start both back up.. . Hi @tcoulter I'm using javascript tests. I think what's happening is I'm testing error cases, and upon error the entire gas limit is used up for that transaction (even though I'm using require to stop the transaction). I thought in the latest Ethereum client specs, transactions are prorated when require throws an error instead of consuming all the gas.. ",
    "robert-zaremba": "The travis fail doesn't seems to be related to this change set . ",
    "Bowfish": "I enabled the optimizer according your the description in the docs. Here is my truffle.js file:\nmodule.exports = {\n    networks: {\n        development: {\n            host: \"localhost\",\n            port: 8545,\n            network_id: \"*\"\n        }\n    },\n    rpc: {\n        host: \"localhost\",\n        gas: 4712388,\n        port: 8545\n    },\n    solc: {\n        optimizer: {\n            enabled: true,\n            runs: 200\n        }\n    },\n};\nIf I run: \n$ truffle migrate --reset\nI get the following error:\nUsing network 'development'.\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  ... undefined\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: Error: Exceeds block gas limit\n.\n.\n.\n$ truffle version\nTruffle v4.0.1 (core: 4.0.1)\nSolidity v0.4.18 (solc-js)\nDo you have any idea what is going wrong there?. Unfortunately this doesn't help. I tested it with the default Metacoin.sol contract which is created with truffle init. Therefore the bug must be somewhere else.. I installed truffle 4.0.0-beta.0 and everything is working fine.. I'm on testrpc too. . I tested it on truffle develop and everything is working fine. This is much more convenient than testrpc. Great job!\nIs it possible to create more than 10 accounts in truffle develop in the same way as with testrpc --accounts 20 ?. I had the same error, but with truffle develop it works perfect. You can use truffle develop instead of testrpc. With truffle develop you have the same functionality as with testrpc but with some additional cool features. . Here is the migration script. It works with 4.1.13 but a soon as I switch to 4.3.14 it will stop at the point where it put the Note. If there is an issue with my async methods I would be grateful if you could point it out.\nI use canache v1.2.1\nThanks for you help\n```javascript\nvar Pilot       = artifacts.require(\"./Pilot.sol\");\nvar Rating      = artifacts.require(\"./Rating.sol\");\nvar License     = artifacts.require(\"./License.sol\");\nvar Logbook     = artifacts.require(\"./Logbook.sol\");\nvar Medical     = artifacts.require(\"./Medical.sol\");\n// Now, configure the deployed contracts.\nmodule.exports = function(deployer) {\n// the contract instances we will need later\nvar pilotContract;\n  var ratingContract;\n  var licenseContract;\n  var logbookContract;\n  var medicalContract;\n// the trusted contracts\nvar pilotLogbookContract;\n  var pilotMedicalContract;\n  var pilotLicenseContract;\n  var ratingLicenseContract;\n  var licensePilotContract;\n  var licenseRatingContract;\n  var logbookPilotContract;\n  var medicalPilotContract;\n// instantiate the deployed contracts\nvar accounts = web3.eth.accounts;\nconsole.log(accounts)\nPilot.deployed()\n  .then(function(instance) {\n    pilotContract = instance;\n    return Rating.deployed();\n  })\n  .then(function(instance) {\n    ratingContract = instance;\n    return License.deployed();\n  })\n  .then(function(instance) {\n    licenseContract = instance;\n    return Logbook.deployed();\n  })\n  .then(function(instance) {\n    logbookContract = instance;\n    return Medical.deployed();\n  })\n.then(function(instance) {\n    medicalContract = instance;\n    return pilotContract.setLogbookContract(logbookContract.address, {from: accounts[0]});\n   ///\n   //Note: it executes this function and than terminates the script without an error message\n   ///\n  })\n// now set the contract addresses so they know each other.\n  //\n.then(function(success) {\n    console.log(\"setPilotContract\")\n    return pilotContract.setMedicalContract(medicalContract.address, {from: accounts[0]});\n  })\n  .then(function(success) {\n    console.log(\"setPilotContract\")\n    return pilotContract.setLicenseContract(licenseContract.address);\n  })\n  .then(function(success) {\n    return ratingContract.setLicenseContract(licenseContract.address);\n  })\n  .then(function(success) {\n    return licenseContract.setPilotContract(pilotContract.address);\n  })\n  .then(function(success) {\n    return licenseContract.setRatingContract(ratingContract.address);\n  })\n  .then(function(success) {\n    return logbookContract.setPilotContract(pilotContract.address);\n  })\n  .then(function(success) {\n    return medicalContract.setPilotContract(pilotContract.address);\n  })\n// now let's fetch them back\n.then(function(success) {\n    return pilotContract.logbookContract();\n  })\n  .then(function(response) {\n    pilotLogbookContract = response;\n    return pilotContract.medicalContract();\n  })\n  .then(function(response) {\n    pilotMedicalContract = response;\n    return pilotContract.licenseContract();\n  })\n  .then(function(response) {\n    pilotLicenseContract = response;\n    return ratingContract.licenseContract();\n  })\n  .then(function(response) {\n    ratingLicenseContract = response;\n    return licenseContract.pilotContract();\n  })\n  .then(function(response) {\n    licensePilotContract = response;\n    return licenseContract.ratingContract();\n  })\n  .then(function(response) {\n    licenseRatingContract = response;\n    return logbookContract.pilotContract();\n  })\n  .then(function(response) {\n    logbookPilotContract = response;\n    return medicalContract.pilotContract();\n  })\n  .then(function(response) {\n    medicalPilotContract= response;\n// helpful output\n\nconsole.log(\"\");\nconsole.log(\"MIGRATION SUMMARY\");\nconsole.log(\"\");\nconsole.log(\"Pilot Contract @   \", pilotContract.address);\nconsole.log(\" - logbook @       \", pilotLogbookContract);\nconsole.log(\" - medical @       \", pilotMedicalContract);\nconsole.log(\" - license @       \", pilotLicenseContract);\nconsole.log(\"\");\nconsole.log(\"Rating Contract @  \", ratingContract.address);\nconsole.log(\" - license @       \", ratingLicenseContract);\nconsole.log(\"\");\nconsole.log(\"License Contract @ \", licenseContract.address);\nconsole.log(\" - pilot @         \", licensePilotContract);\nconsole.log(\" - rating @        \", licenseRatingContract);\nconsole.log(\"\");\nconsole.log(\"Logbook Contract @ \", logbookContract.address);\nconsole.log(\" - pilot @         \", logbookPilotContract);\nconsole.log(\"\");\nconsole.log(\"Medical Contract @ \", medicalContract.address);\nconsole.log(\" - pilot @         \", medicalPilotContract);\nconsole.log(\"\");\nconsole.log(\"Compiler warnings about unused vars in abstract interface contracts may be safely ignored.\");\nconsole.log(\"Done\");\n\n});\n};\n```\n. @cgewecke That solved the issue. \nNevertheless, I still don't understand why it worked with 4.1.13 without the deployer.then(function() {}) wrapper and it didn't work with 4.1.14. Is this documented anywhere? \nThanks for your support.. I installed truffle v 5 and it works like a charm. That is a big improvement. Thanks for the good work. No. I installed it as user root.. Thanks for the hint.\nSent from ProtonMail, Swiss-based encrypted email.\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nAm 22. August 2018 7:05 PM schrieb gnidan notifications@github.com:\n\nSo generally you probably don't want to be doing sudo npm install -g anyway. It's better to configure NPM to allow user-level global installs.\nHere's a guide: https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.. @ubaid-qureshi npm and truffle should not be installed as sudo. Check this out  https://github.com/trufflesuite/truffle/issues/1711#issuecomment-464833806 I had a similiar problem and everything is working just fine after I installed node with nvm as a normal user and not as sudo.. @eggplantzzz That already looks much better with version 1.0.0-beta.36, but it still doesn't connect. What parameters do I have to specify in the geth command? My command line looks like this:\n\ngeth --datadir ./node01 --networkid 1234 --syncmode 'full' --port 30311 --rpc --rpcaddr 'localhost' --rpcport 8601 --rpcapi 'personal,db,eth,net,web3,txpool,miner,clique' --rpccorsdomain 'http://localhost:3000' --ws --wsaddr 'localhost' --wsport 8546  --wsorigins '*' --gasprice '1' --targetgaslimit 94000000 --mine\nand my truffle-conf.js network definition looks like this:\npoadevnet: {\n      network_id: 1234,       // Any network (default: none)\n      provider: () => new Web3.providers.WebsocketProvider(\"ws://localhost:8546\", {\n        headers: {\n          Origin: \"http://localhost\"\n        }\n      })\n    },. Here is my latest version of the geth commandline:\ngeth --datadir ./node01 --networkid 56707 --syncmode 'full' --port 30311 --rpc --rpcaddr 'localhost' --rpcport 8601 --rpcapi 'personal,db,eth,net,web3,txpool,miner,clique' --rpccorsdomain 'http://localhost:3000' --ws --wsaddr 'localhost' --wsport 8546 --mine\nHere is my latest version of the truffle-config.js configuration:\npoadevnet: {\n  network_id: 56707,       // Any network (default: none)\n  provider: () => {\n    const Web3 = require(\"./client/node_modules/web3\");\n    const wsProvider = new Web3.providers.WebsocketProvider(\"ws://localhost:8546\", {\n      headers: {\n        Origin: \"http://localhost\"\n      }\n    })\n    console.log(wsProvider);\n    return wsProvider;\n  },\n},\nHere is the output of console.log(wsProvider) \nWebsocketProvider {\n  _events: {},\n  _eventsCount: 0,\n  connection: \n   W3CWebSocket {\n     _listeners: \n      { message: [Array],\n        open: [Array],\n        close: [Array],\n        error: [Array] },\n     addEventListener: [Function: _addEventListener],\n     removeEventListener: [Function: _removeEventListener],\n     dispatchEvent: [Function: _dispatchEvent],\n     _url: 'ws://localhost:8546',\n     _readyState: 0,\n     _protocol: undefined,\n     _extensions: '',\n     _bufferedAmount: 0,\n     _binaryType: 'arraybuffer',\n     _connection: undefined,\n     _client: \n      WebSocketClient {\n        domain: null,\n        _events: [Object],\n        _eventsCount: 2,\n        _maxListeners: undefined,\n        config: [Object],\n        _req: [Object],\n        protocols: [],\n        origin: null,\n        url: [Object],\n        secure: false,\n        base64nonce: 'bwZAaBbOZlTo7zVEWuzfqQ==' } },\n  timeout: undefined,\n  subscriptions: {},\n  READY: 'ready',\n  CONNECT: 'connect',\n  ERROR: 'error',\n  CLOSE: 'close',\n  SOCKET_MESSAGE: 'socket_message',\n  SOCKET_READY: 'socket_ready',\n  SOCKET_CLOSE: 'socket_close',\n  SOCKET_ERROR: 'socket_error',\n  SOCKET_CONNECT: 'socket_connect',\n  SOCKET_NETWORK_CHANGED: 'socket_networkChanged',\n  SOCKET_ACCOUNTS_CHANGED: 'socket_accountsChanged',\n  host: 'ws://localhost:8546' \n}\nAnd here is the error message:\n/home/xyz/src/bd300/client/node_modules/web3-providers/dist/web3-providers.cjs.js:242\n        event = this.getSubscriptionEvent(response.params.subscription);\n                                                          ^\nTypeError: Cannot read property 'subscription' of undefined\n    at WebsocketProvider.onMessage (/home/xyz/src/bd300/client/node_modules/web3-providers/dist/web3-providers.cjs.js:242:59)\n    at WebsocketProvider.onMessage (/home/xyz/src/bd300/client/node_modules/web3-providers/dist/web3-providers.cjs.js:378:77)\n    at W3CWebSocket._dispatchEvent [as dispatchEvent] (/home/xyz/src/bd300/client/node_modules/yaeti/lib/EventTarget.js:115:12)\n    at W3CWebSocket.onMessage (/home/xyz/src/bd300/client/node_modules/websocket/lib/W3CWebSocket.js:234:14)\n    at WebSocketConnection.<anonymous> (/home/xyz/src/bd300/client/node_modules/websocket/lib/W3CWebSocket.js:205:19)\n    at emitOne (events.js:116:13)\n    at WebSocketConnection.emit (events.js:211:7)\n    at WebSocketConnection.processFrame (/home/xyz/src/bd300/client/node_modules/websocket/lib/WebSocketConnection.js:552:26)\n    at /home/xyz/src/bd300/client/node_modules/websocket/lib/WebSocketConnection.js:321:40\n    at _combinedTickCallback (internal/process/next_tick.js:132:7)\n    at process._tickCallback (internal/process/next_tick.js:181:9)\nweb3: 1.0.0-beta.46\nTruffle v5.0.4 (core: 5.0.4)\nSolidity v0.5.0 (solc-js)\nNode v8.15.. @eggplantzzz With Web3 to version 1.0.0-beta.37 it looks a bit better. At least I don't get the error message anymore, but I get the following output, that the connection is not open on send.\n```\nWebsocketProvider {\n  responseCallbacks: {},\n  notificationCallbacks: [],\n  _customTimeout: undefined,\n  connection: \n   W3CWebSocket {\n     _listeners: {},\n     addEventListener: [Function: _addEventListener],\n     removeEventListener: [Function: _removeEventListener],\n     dispatchEvent: [Function: _dispatchEvent],\n     _url: 'ws://localhost:8546',\n     _readyState: 0,\n     _protocol: undefined,\n     _extensions: '',\n     _bufferedAmount: 0,\n     _binaryType: 'arraybuffer',\n     _connection: undefined,\n     _client: \n      WebSocketClient {\n        domain: null,\n        _events: [Object],\n        _eventsCount: 2,\n        _maxListeners: undefined,\n        config: [Object],\n        _req: [Object],\n        protocols: [],\n        origin: undefined,\n        url: [Object],\n        secure: false,\n        base64nonce: '2QeLwQD8V/t8Z33bx5fj3w==' },\n     onerror: [Function],\n     onclose: [Function],\n     onmessage: [Function] },\n  connected: [Getter] }\nconnection not open on send()\nconnection not open on send()\nReplacing 'MyContracts'\n\nconnection not open on send()\nconnection not open on send()\nconnection not open\nTruffle v5.0.4 (core: 5.0.4)\nNode v8.15.0\n```\nThe 1_initial_migration.js is working fine, but the second part 2_deploy_contracts.js produces the message from above.\n. @eggplantzzz I posted some update on spectrum about this and here is the link to the github repo with the code https://github.com/Bowfish/truffle-ws-migrate-test with some explanation in the README.md. @eggplantzzz I update again to 5.0.4 but still the same:\nError: Could not find a compiler version matching 0.5.4. Please ensure you are specifying a valid version, constraint or build in the truffle config. Run `truffle compile --list` to see available versions.\n    at VersionRange.errors (/usr/lib/node_modules/truffle/build/webpack:/packages/truffle-compile/compilerSupplier/loadingStrategies/LoadingStrategy.js:57:1)\n    at VersionRange.getSatisfyingVersionFromCache (/usr/lib/node_modules/truffle/build/webpack:/packages/truffle-compile/compilerSupplier/loadingStrategies/VersionRange.js:86:1)\n    at VersionRange.load (/usr/lib/node_modules/truffle/build/webpack:/packages/truffle-compile/compilerSupplier/loadingStrategies/VersionRange.js:186:1)\n    at <anonymous>\nTruffle v5.0.4 (core: 5.0.4)\nNode v8.15.0. @eggplantzzz If I run truffle compile as root it downloads the compiler, but if I run it as a normal user I get the error.. @eggplantzzz here is my truffle-config.js entry:\ncompilers: {\n    solc: {\n      version: \"0.5.4\"\n    }\n  },\n@foodaka  If I run truffle compile  as a super user it downloads the compiler. When the complier is downloaded I can run truffle complie as a normal user and it is working. . @saturn-network This workaround doesn't solve the original issue. I still have to run truffle compile as a superuser and then it downloads the compiler. Once the compiler is downloaded I can run truffle compile as a normal user.\nI installed truffle like this as a superuser: npm install -g truffle is that correct or do I have to run the same command as a normal user?. @WyseNynja Thank you very much. I was not aware of this. I installed it accordingly and everything works fine.. My original issue has been solved with installing nodejs and npm as a normal user and not as a super user.. If you have truffle installed as sudo you might experience different permission issues. It is recommended to install truffle as a normal user. Check this post for further details. I had the same problem and could solve it with installing node and turffle as a normal user. The recommended way to install node is with nvm.\nI also posted a how-to on github https://github.com/Bowfish/truffle-install-as-normal-user. ",
    "aliniacb": "I'm getting the same errors after updating to latest truffle and testrpc. If I set a gas param in truffle.js I get \n\n\nThis never happened before updating. Nothing's changed in my contracts. Only updated truffle and testrpc. On the other hand if I run truffle develop and then migrate everything works fine. \nUpdating also affected deploy to rinkeby where I get out of gas error.. There's an issue with this version of truffle for sure. Did a clean ubuntu install with latest node, truffle, testrpc and I get out of gas in any situation. So having optimization  flag enabled in truffle.js does not help. I've used for this test some really simple contracts. For example https://github.com/LindaHealthcareICO/linda-crowdsale used to work with previous truffle version. Please note if you test those contracts there's a typo in their package.json file (a trailing coma in the scripts section) so you should fix that before installing.. Worked for me too. Downgrading fixed the issue!. @tcoulter  Hi, yes, I'm on testrpc. As previously mentioned truffle develop works fine but I've chosen testrpc because I couldn't get the created accounts private keys nor set a custom balance for each account.\nThanks!. What about migrating to a remote test network. Are you sure the issue won't be there? Truffle develop works for me too but when I try to migrate the code to rinkeby I get the same out of gas error. . ",
    "wzbbbb": "I got the same problem as @Bowfish . ",
    "sorccu": "It seems that gas and gasPrice from truffle.js are not getting passed to TestRPC anymore, though I don't know how and when exactly they were passed earlier. Starting TestRPC with --gasLimit 6721975 --gasPrice 100000000000 (to mimic the hardcoded default values in truffle-core) made our tests work again.. ",
    "danielnovy": "Just to reinforce the thread, I was facing the same issue. Downgrading truffle to 4.0.0-beta.0 fixed the issue.. ",
    "ButSoft": "Ubuntu 16.04\nsudo npm uninstall -g truffle\nsudo npm install -g truffle@beta\ntruffle deploy\nError encountered, bailing. Network state unknown.\n. ",
    "safouanenac": "Same problem, I solve it by forcing --gasLimit to a high value \"9999999999\". ",
    "antony": "Same error on Ubuntu with Truffle 4.0.1, using testrpc\nsetting gas limit does not help.\ndowngrading to @beta works fine.. ",
    "camelscript": "Having the same issue, downgrading did'nt help. Everything works on local TestRpc, but if I try to publish it to Ropsten or Rinkeby via Geth it wont work.\nUbuntu 16.04 \nTruffle v4.0.0-beta.0\nGeth 1.7.2-stable-1db4ecdc. ",
    "nabgilby": "I second sorccu, used testrpc -p 8546 --gasLimit 6721975 --gasPrice 100000000000 and contract migrations worked with truffle@4.0.1 . ",
    "msturlesi": "Had the same issue with truffle 4.0.1 and testrpc and had to set gas limit and price as advised. Just updated testrpc to latest version (EthereumJS TestRPC v6.0.3 (ganache-core: 2.0.2)) and it works for me without setting gas. Haven't tried deploying on test networks yet. If it still doesn't work on those, does anyone in truffle support have an idea when it will be fixed please?. ",
    "demisstif": "same issue:I use truffle+infura\nubuntu 16.04\ntruffle V3.4.9\n. ",
    "Ezechiele": "Same issue:\nMac OSx High Sierra\ntruffle V4.0.1\ntestrpc\nEverything works using the solution provided by sorccu. ",
    "habdelra": "Same issue: \nMac OSx High Sierra\ntruffle V4.0.4\nganache-cli: V6.0.3\nSorccu's suggestion above also resolved this issue for me. @quantumproducer the gasPrice in your truffle.js is in units of wei, so setting a gas price of \"9\" is basically like not providing any gas. probably you meant 9 gwei which i think is 9000000000 . ",
    "elango501": "Rewrite your truffle.js file like\nmodule.exports = {\n  networks: {\n    development: {\n      host: \"10.0.0.18\",\n      port: 8545,\n      gas: 6712388,\n      gasPrice: 65000000000,\n      network_id: \"*\" // Match any network id\n    }\n  }\n};\n. ",
    "rrubo": "Had the issue with the newest version of Ganache, set this in truffle.js\ngas: 6712388,\ngasPrice: 65000000000,\nEverything is working smoothly.. Having the same issue with a contract that is using Oraclize. Checked the contract code thousand times, there are no abstract functions there. However, I assume the issue is within the Oraclize contract itself using abstract functions, since I copy-pasted their API contract into my script file.. Sorry for the late answer. I suspect they are different, since when I deploy a contract from the Remix IDE, and then run truffle compile, when launching, the dapp does not recognize that the contract is deployed from the Remix IDE (I am not runningtruffle migrate).\nPerhaps, I understand this whole process wrong, but my understanding was that truffle migrate and deploying from Remix IDE work the same way.. ",
    "QingyangKong": "I have the same issue. I am able to migrate contract successfully, but i cannot use truffle test. \ntruffle version\nTruffle v4.0.5 (core: 4.0.5)\nSolidity v0.4.18 (solc-js)\nThis is my truffle.js\nmodule.exports = {\n  networks: {\n    development: {\n    host: \"localhost\",\n    port: 8545,\n    network_id: \"*\", // Match any network id\n    gas: 4712388,\n    gasPrice: 65000000000\n }\n}\n};\nI am using a private chain I created myself, genesis.json is shown below:\n{\n    \"config\": {\n        \"chainId\": 1994,\n        \"homesteadBlock\": 0,\n        \"eip155Block\": 0,\n        \"eip158lock\": 0,\n        \"byzantiumBlock\": 0      \n    },\n    \"difficulty\": \"40\",\n    \"gasLimit\": \"2000000\",\n    \"alloc\": {\n        \"d096c53d11fd0ae326a6784f2c2e8e4d12b1fc4e\":{\n            \"balance\": \"1000000000000000000\"\n        },\n        \"c40d5622f4a50b0028ef134e78853e006e481ad3\":{\n            \"balance\": \"0\"\n        }\n    }\n}\nubuntu 16.0.4. @yisheng thank you. It works by enabling optimizer. Do you know why?. ",
    "yisheng": "Issue solved by re-enable the optimizer from Truffle Documentation.\nThis is my truffle.js\n```js\nvar HDWalletProvider = require(\"truffle-hdwallet-provider\");\nmodule.exports = {\n  solc: {\n    optimizer: {\n      enabled: true,\n      runs: 200\n    }\n  },\n  networks: {\n    development: {\n      host: \"127.0.0.1\",\n      port: 7545,\n      network_id: \"5777\"\n    },\n    rinkeby: {\n      provider: function() {\n        return new HDWalletProvider(\"my own mnemonic\", \"https://rinkeby.infura.io/xxxxx\")\n      },\n      network_id: 3\n    }\n  }\n};\n``. @erickhun How about removinggas: 4600000`?. ",
    "zerostatic": "I'm unable to migrate to a remote network like Rinkeby keep getting error: insufficient funds for gas * price + value. Strangely it's working today. I'm using Truffle version v4.0.5 and migrating a small contract. Here are my settings in truffle.js\nropsten: {\n      provider: new HDWalletProvider(\n        mnemonic,\n        'https://ropsten.infura.io/XAmfM8SVSh5OkuiYMIBx',\n        2\n      ),\n      network_id: 3,\n      gas: 4600000,\n    },\n    rinkeby: {\n      provider: new HDWalletProvider(\n        mnemonic,\n        'https://rinkeby.infura.io/XAmfM8SVSh5OkuiYMIBx',\n        2\n      ),\n      network_id: 4,\n      gas: 6712388,\n      gasPrice: 1000000000\n    }. ",
    "nguyenhoaibao": "@camelscript did you find the solution? I'm facing that problem too. I can deploy to testrpc successfully, but I cannot deploy to rinkeby. The truffle migrate outputs:\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: The contract code couldn't be stored, please check your gas amount.. ",
    "erickhun": "Same error with gas and optimizer activated : \nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: The contract code couldn't be stored, please check your gas amount.\nTruffle v4.0.5 (core: 4.0.5)\nSolidity v0.4.18 (solc-js)\ntruffle.js config : \n```\nmodule.exports = {\n  solc: {\n    optimizer: {\n      enabled: true,\n      runs: 200\n    }\n  },\n   networks: {\n    ropsten: {\n      provider: function() {\n        return new HDWalletProvider(mnemonic_ropsten, \"https://ropsten.infura.io/XXX\")\n      },\n        gas: 4600000,\n      network_id: 3\n    }\n  }\n};. @yisheng it didn't work :/ \nAfter several tries, setting gas: 4698712 worked : \nmodule.exports = {\n  solc: {\n    optimizer: {\n      enabled: true,\n      runs: 200\n    }\n  },\n   networks: {\n    ropsten: {\n      provider: function() {\n        return new HDWalletProvider(mnemonic_ropsten, \"https://ropsten.infura.io/XXX\")\n      },\n        gas: 4698712,\n      network_id: 3\n    }\n  }\n};. ",
    "MeHighP": "How does your migration file look like?. Ok, but what about the file that deploys the actual contracts? (e.g. 2_deploy_contracts.js) I got the error \"The contract code couldn't be stored, please check your gas amount\" when this file was not correct.. ",
    "quantumproducer": "truffle deploy --network live is failing for me with:\nmodule.exports = {\n  // See <http://truffleframework.com/docs/advanced/configuration>\n  networks: {\n    development: {\n      host: \"127.0.0.1\",\n      port: 8545,\n      network_id: \"*\", // Match any network id\n      from: \"0xa281cd2ba15dc43f8110ddaee837274800931f7e\",\n      gas: 5000\n    },\n    live: {\n      host: \"127.0.0.1\",\n      port: 8545,\n      network_id: \"*\",\n      from: \"0xa281cd2ba15dc43f8110ddaee837274800931f7e\"\n    },\n    kovan: {\n      network_id: 42,\n      host: \"127.0.0.1\",\n      port: 8545,\n      from: \"0x33dbe8478805cf734184aeD8737607656252D804\",\n      gas: 5000000\n    }\n  }\n};. I updated geth & truffle today.\nNow I'm getting \"Transaction not found after 50 blocks\" when trying to deploy to mainnet.\nI tried setting my gas higher than anything on http://ethgasstation.info/ , still with no publication of the contract.\ntruffle.js:\nlive: { host: \"127.0.0.1\", port: 8545, network_id: \"*\", from: \"0xa281cd2ba15dc43f8110ddaee837274800931f7e\", gasPrice: 9, gas: 200000 },\n(I also tried with gasPrice: 1, 2 and 3)\nand here's the log from truffle migrate --network=live --verbose-rpc\n```\n\"jsonrpc\": \"2.0\",\n\"id\": 5, \"method\": \"eth_sendTransaction\", \"params\": [ { \"from\": \"0xa281cd2ba15dc43f8110ddaee837274800931f7e\", \"gas\": \"0x30d40\", \"gasPrice\": \"0x204876e800\", \"data\": \"0x6060604052341561000f57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506102db8061005e6000396000f300606060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630900f01014610067578063445df0ac146100a05780638da5cb5b146100c9578063fdacd5761461011e575b600080fd5b341561007257600080fd5b61009e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610141565b005b34156100ab57600080fd5b6100b3610224565b6040518082815260200191505060405180910390f35b34156100d457600080fd5b6100dc61022a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561012957600080fd5b61013f600480803590602001909190505061024f565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610220578190508073ffffffffffffffffffffffffffffffffffffffff1663fdacd5766001546040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b151561020b57600080fd5b6102c65a03f1151561021c57600080fd5b5050505b5050565b60015481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102ac57806001819055505b505600a165627a7a72305820d665cc9568c7a7748b83ea660894eb49b5ca37bea613615823cc9fdd35ac51260029\" } ] }\n```\neth.getBalance(eth.accounts[1])\n100000000000000000\nwhich is plenty more than gas * gasPrice.\n/geth version\nGeth\nVersion: 1.8.2-stable\nArchitecture: amd64\nProtocol Versions: [63 62]\nNetwork Id: 1\nGo Version: go1.10\nOperating System: darwin\nGOPATH=/Users/quantum/code/go\nGOROOT=/usr/local/Cellar/go/1.10/libexec\n~/truffle version\nTruffle v4.0.6 (core: 4.0.6)\nSolidity v0.4.19 (solc-js)\nand to the end..\n```\n\n\"jsonrpc\": \"2.0\",\n  \"id\": 1568,\n  \"method\": \"eth_uninstallFilter\",\n  \"params\": [\n    \"0xbe6517333d9e36227699e900b12523bc\"\n  ]\n}\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: Contract transaction couldn't be found after 50 blocks\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/contract.js:112:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/filter.js:128:1\n    at Array.forEach ()\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/filter.js:127:1\n    at Array.forEach ()\n    at Object.onMessage [as callback] (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/filter.js:125:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:259:1\n    at Array.forEach ()\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:258:10\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-migrate/index.js:225:1\n``. Ah I read ina blog post that gas was done in GWei, I see now that's just how it's referred to but the vlaues are inwei.\n@habdelra I tried with7000000000Same result.\nhttps://ethgasstation.info/ says  gas price is 3 Gwei. @mradkov edit, nvm re: gas. I'm still getting this issue on mainnet. Btw Mradkov how did you calculate the gas usage exactly for your contract deployment? (Something in truffle?). @mradkov I'm able to deploy tokovan` fine. I need to deploy to the main net.\nRemix gives me the error: https://github.com/ethereum/remix/issues/716. Agreed, the same error confused me to. It wasn't clear from the error that you had to sync to deploy.\nI get this error now, after syncing.\n\nHere's my truffle migrate --network=live --verbose-rpc log:\n```\n\n\"jsonrpc\": \"2.0\",\n  \"id\": 5,\n  \"method\": \"eth_sendTransaction\",\n  \"params\": [\n    {\n      \"from\": \"0xa281cd2ba15dc43f8110ddaee837274800931f7e\",\n      \"gas\": \"0x3d0900\",\n      \"gasPrice\": \"0x218711a00\",\n      \"data\": \"0x6060604052341561000f57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506102db8061005e6000396000f300606060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630900f01014610067578063445df0ac146100a05780638da5cb5b146100c9578063fdacd5761461011e575b600080fd5b341561007257600080fd5b61009e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610141565b005b34156100ab57600080fd5b6100b3610224565b6040518082815260200191505060405180910390f35b34156100d457600080fd5b6100dc61022a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561012957600080fd5b61013f600480803590602001909190505061024f565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610220578190508073ffffffffffffffffffffffffffffffffffffffff1663fdacd5766001546040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b151561020b57600080fd5b6102c65a03f1151561021c57600080fd5b5050505b5050565b60015481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102ac57806001819055505b505600a165627a7a72305820d665cc9568c7a7748b83ea660894eb49b5ca37bea613615823cc9fdd35ac51260029\"\n    }\n  ]\n}\n <   {\n <     \"jsonrpc\": \"2.0\",\n <     \"id\": 5,\n <     \"result\": \"0x4afc5333a0c12c03b5d0866e819a909ed5fa37f94d583824f14d4d97f8ec0272\"\n <   }\n  ... 0x4afc5333a0c12c03b5d0866e819a909ed5fa37f94d583824f14d4d97f8ec0272\n{\n```\n\nmodule.exports = {\n  solc: {\n    optimizer: {\n      enabled: true,\n      runs: 2000\n    }\n  },\n  // See <http://truffleframework.com/docs/advanced/configuration>\n  networks: {\n    development: {\n      host: \"127.0.0.1\",\n      port: 8545,\n      network_id: \"*\", // Match any network id\n      from: \"0xa281cd2ba15dc43f8110ddaee837274800931f7e\",\n      gas: 5000\n    },\n    live: {\n      host: \"127.0.0.1\",\n      port: 8545,\n      network_id: \"*\",\n      from: \"0xa281cd2ba15dc43f8110ddaee837274800931f7e\",\n      gasPrice: 9000000000,\n      gas: 4000000\n    },\n    kovan: {\n      network_id: 42,\n      host: \"127.0.0.1\",\n      port: 8545,\n      from: \"0x33dbe8478805cf734184aeD8737607656252D804\",\n      gas: 5000000\n    }\n  }\n};\n\"Contract couldn't be found after 50 blocks\"\nWhy? I'm offering 9 GWEI for gas. Why does this happen?\nI've tried without the optimizer, too. geth is 1.8.2\nTruffle v4.0.6 (core: 4.0.6)\nSolidity v0.4.19 (solc-js)\nI'm unable to deploy my smart contract while this is happening.. Error encountered, bailing. Network state unknown. Review successful transactions manually.\nError: Contract transaction couldn't be found after 50 blocks\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/contract.js:112:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/filter.js:128:1\n    at Array.forEach (<anonymous>)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/filter.js:127:1\n    at Array.forEach (<anonymous>)\n    at Object.onMessage [as callback] (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/filter.js:125:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:259:1\n    at Array.forEach (<anonymous>)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:258:10\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-migrate/index.js:225:1. I deployed to kovan about 5 days ago. Today I resynced my network - compared to the Kovan Blockexplorer and it showed I was synced.\nI had no problem deploying with parity using\nalias parity=\"~/parity/target/release/parity --chain=kovan\"\nparity version Parity/v1.10.0-unstable-bc8216a82-20180128/x86_64-macos/rustc1.23.0\nI'm on\n~/truffle version\nTruffle v4.0.4 (core: 4.0.4)\nSolidity v0.4.18 (solc-js)\n```\ntruffle migrate --network=kovan\nUsing network 'kovan'.\nRunning migration: 2_deploy_contracts.js\n  Deploying Story...\n  ... 0xd88cc3655cae77efbabc804733051d62424e1338a315b7dfbf52690aa4fe76e0\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: Contract transaction couldn't be found after 50 blocks\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:327560:30\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:64332:21\n    at Array.forEach ()\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:64331:32\n    at Array.forEach ()\n    at Object.onMessage [as callback] (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:64329:22)\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:329703:20\n    at Array.forEach ()\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:329702:12\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:176186:11\n```\nI just upgraded to 4.0.6 truffle and tried running parity with\nparity --chain=kovan --jsonrpc-apis web3,eth,net,personal,parity,parity_set,traces,rpc,parity_accounts\nand it went through.. I am having this issue now on the main network.\nHere's my truffle migrate --network=live --verbose-rpc log:\n```\n\n\"jsonrpc\": \"2.0\",\n  \"id\": 5,\n  \"method\": \"eth_sendTransaction\",\n  \"params\": [\n    {\n      \"from\": \"0xa281cd2ba15dc43f8110ddaee837274800931f7e\",\n      \"gas\": \"0x3d0900\",\n      \"gasPrice\": \"0x218711a00\",\n      \"data\": \"0x6060604052341561000f57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506102db8061005e6000396000f300606060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630900f01014610067578063445df0ac146100a05780638da5cb5b146100c9578063fdacd5761461011e575b600080fd5b341561007257600080fd5b61009e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610141565b005b34156100ab57600080fd5b6100b3610224565b6040518082815260200191505060405180910390f35b34156100d457600080fd5b6100dc61022a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561012957600080fd5b61013f600480803590602001909190505061024f565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610220578190508073ffffffffffffffffffffffffffffffffffffffff1663fdacd5766001546040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b151561020b57600080fd5b6102c65a03f1151561021c57600080fd5b5050505b5050565b60015481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102ac57806001819055505b505600a165627a7a72305820d665cc9568c7a7748b83ea660894eb49b5ca37bea613615823cc9fdd35ac51260029\"\n    }\n  ]\n}\n <   {\n <     \"jsonrpc\": \"2.0\",\n <     \"id\": 5,\n <     \"result\": \"0x4afc5333a0c12c03b5d0866e819a909ed5fa37f94d583824f14d4d97f8ec0272\"\n <   }\n  ... 0x4afc5333a0c12c03b5d0866e819a909ed5fa37f94d583824f14d4d97f8ec0272\n{\n```\n\nmodule.exports = {\n  solc: {\n    optimizer: {\n      enabled: true,\n      runs: 2000\n    }\n  },\n  // See <http://truffleframework.com/docs/advanced/configuration>\n  networks: {\n    development: {\n      host: \"127.0.0.1\",\n      port: 8545,\n      network_id: \"*\", // Match any network id\n      from: \"0xa281cd2ba15dc43f8110ddaee837274800931f7e\",\n      gas: 5000\n    },\n    live: {\n      host: \"127.0.0.1\",\n      port: 8545,\n      network_id: \"*\",\n      from: \"0xa281cd2ba15dc43f8110ddaee837274800931f7e\",\n      gasPrice: 9000000000,\n      gas: 4000000\n    },\n    kovan: {\n      network_id: 42,\n      host: \"127.0.0.1\",\n      port: 8545,\n      from: \"0x33dbe8478805cf734184aeD8737607656252D804\",\n      gas: 5000000\n    }\n  }\n};\n\"Contract couldn't be found after 50 blocks\"\nWhy? I'm offering 9 GWEI for gas. Why does this happen?\nI've tried without the optimizer, too. geth is 1.8.2\nTruffle v4.0.6 (core: 4.0.6)\nSolidity v0.4.19 (solc-js)\nI'm unable to deploy my smart contract while this is happening.. Error encountered, bailing. Network state unknown. Review successful transactions manually.\nError: Contract transaction couldn't be found after 50 blocks\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/contract.js:112:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/filter.js:128:1\n    at Array.forEach (<anonymous>)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/filter.js:127:1\n    at Array.forEach (<anonymous>)\n    at Object.onMessage [as callback] (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/filter.js:125:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:259:1\n    at Array.forEach (<anonymous>)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:258:10\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-migrate/index.js:225:1. @abdnennour did you see in the logs what gas price was used in the transaction?\nWhat solidity version are you using?. Cool, it prints the gas requirement into the log?\nIT looks likes my problem is Ropsten network is dead and I\"m working on switching to parity... the release crashes on startup so I'm compiling parity from source. Sounds like truffle automatically computed it then? Have you tried deploying to mainnet?. @cgewecke thanks, different network (kovan vs mainnet) but it looks like the underlying issue is same. Closing this.. Great, thanks!. ",
    "mradkov": "I have the same problem. And none of the solutions helps.\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: The contract code couldn't be stored, please check your gas amount.\n\n. @quantumproducer The strange thing is the contract is working just fine when published by web3 or in remix. (Tested on Ropsten).. ",
    "litch": "I'm having a similar issue, though specifically with mainnet:\nI'm trying to only deploy the Migrations.sol\nmodule.exports = {\n  solc: {\n    optimizer: {\n      enabled: true,\n      runs: 200\n    }\n  },\n  networks: {\n    development: {\n      host: 'localhost',\n      port: 8545,\n      network_id: '*' // Match any network id\n    },\n    rinkeby: {\n      host: \"localhost\",\n      port: 8545,\n      network_id: \"4\",\n      from: '...',\n      gas: 4500000,\n      gasPrice: 21000000000\n    },\n    mainnet: {\n      network_id: 1,\n      from: '...',\n      host: \"localhost\",\n      port: 8546   // Different than the default\n    }\n  }\n}\nI've tried lots of combinations of gas and gasPrice.  Very confusing.\n```\ntruffle migrate --network mainnet -f 1 --reset\nUsing network 'mainnet'.\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  ... undefined\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: exceeds block gas limit\n```\ngeth version 1.8.2\ntruffle version 4.1.0 and 4.1.3\nIt works swimmingly on rinkeby and testrpc.\nAny suggestions?. BTW, my issue here wound up being that my node was not fully synced.  I should probably create a new issue, \"When trying to deploy to a node that is not fully synced, an error about gas limit is given, rather than something that makes sense\". ",
    "sidsverma": "What worked for me is:\ntruffle migrate --clean --network ropsten. ",
    "mancze": "I think this has nothing to do with the actual truffle framework since the erroneous line is in your test file. You have used ES6 module loading syntax which is not supported in v8.4.0 of nodejs (your version) nor in v9.2.0 (current latest).\nThe only way to make ES6 modules work is by using transpiler/compiler like babel.. ",
    "jacktang": "I have the same issue about it https://github.com/truffle-box/react-box/issues/49. ",
    "VladWulf": "I suggest using testrpc with a large gas limit parameter:\ntestrpc --gasLimit 300000000 the default is 9000\nIf that is still a problem, put a high value (but lower than the one above) for the gas field in the truffle.js inside your project.. ",
    "gdiazherrero": "You can also get this error message when trying to deploy an abstract contract. Perhaps you changed the signature of a function in any of your base contracts that could be \"abstracting\" the contract you are trying to deploy. So in fact, it may turn out to be not a matter of \"checking your gas amount\", as the error message suggests, but a matter of checking that you are not actually deploying an abstract contract.. Have a look to documentation here. ",
    "stone212": "@sputnik77 I am having this problem also.  Can you define what you mean by an \"abstract contract\"?. ",
    "microdesign": "Same here on: \nTruffle v4.1.0 (core: 4.1.0)\nSolidity v0.4.19 (solc-js). @ccpwcn \nMy deployment was changed in order to work as follow:\n```\nconst startTime = Math.round((new Date(Date.now() - 86400000).getTime())/1000); // Yesterday\n    const endTime = Math.round((new Date().getTime() + (86400000 * 28))/1000); // Today + 28 days\n    var exchangeRate = 2500; // 1 LEON = 0.0025 ETH or 1 ETH = 2500 LEON\nreturn deployer\n    .then(() => {\n        return deployer.deploy(LeonardianToken);\n    })\n    .then(() => {\n\n        return deployer.deploy(\n            LeonardianCrowdsale,\n            startTime,\n            endTime,\n            exchangeRate,\n            \"wallet adddress\",\n            LeonardianToken.address\n        );\n    })\n    .then(() => {\n\n        var token = LeonardianToken.at(LeonardianToken.address);\n\n        token.transferOwnership(LeonardianCrowdsale.address);\n    });\n\n```\n. You miss some lines \n```\nmodule.exports = function(deployer, network, accounts) {\nconst startTime = Math.round((new Date(Date.now() - 86400000).getTime())/1000); // Yesterday\nconst endTime = Math.round((new Date().getTime() + (86400000 * 28))/1000); // Today + 28 days\nvar exchangeRate = 2500; // 1 LEON = 0.0025 ETH or 1 ETH = 2500 LEON\n\nreturn deployer\n    .then(() => {\n        return deployer.deploy(LeonardianToken);\n    })\n    .then(() => {\n\n        return deployer.deploy(\n            LeonardianCrowdsale,\n            startTime,\n            endTime,\n            exchangeRate,\n            \"wallet\",\n            LeonardianToken.address\n        );\n    })\n    .then(() => {\n\n        var token = LeonardianToken.at(LeonardianToken.address);\n\n        token.transferOwnership(LeonardianCrowdsale.address);\n    });\n\n};\n``. @ccpwcn No problem - Im happy you solve your problem. Good luck with what you going to build.. @ccpwcn  I cant see your full code maybe making a repo or something. And we can eventually be blocked by a version problem which I was having one time.. I think you must remove Crowdsale\ncontract GustavoCoinCrowdsale is Crowdsale, TimedCrowdsale, CappedCrowdsale {\nbecause CappedCrowdsale extends already the Crowdsale contract.\nso write it this way \ncontract GustavoCoinCrowdsale is CappedCrowdsale, TimedCrowdsale {\nThis is just a suggestion but lets try it. @ccpwcn your code is not like I told you \nMY \ncontract GustavoCoinCrowdsale is CappedCrowdsale, TimedCrowdsale {\nYOUR\ncontract GustavoCoinCrowdsale is TimedCrowdsale {\n. @ccpwcn OK happy to hear this.. Sorry I sent the wrong error, here is the right one;\nDeploying LeonardianCrowdsale...\n  ... 0xc67431d63e92686ae31c585d9667d2fc22512c3818ec99b7245a0a8d2f839363\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: The contract code couldn't be stored, please check your gas amount.. Also the problem is not with the gas - the migration was working before I just update my truffle installation and this happen . I use Ganache app and set the gas there the result is same.\nAs I already told you all the contract was working and migrating successfully before I update my truffle \nnpm package today.\nSo definitely the problem is not in solidity, it is in the migration process . what steps did you need?\nI found on the net today this is known bug and it is fixed in my version but I continue has this error\n. OK I updated the OpenZeppeling to the latest version I think the migrate is successfully now, but I continue see this error which I think it is coming from truffle code and nodejs version\n(node:79626) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: The contract code couldn't be stored, please check your gas amount.\n(node:79626) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.. My Gas limit in ganache is set it up as you told me to make it.. Also here is my code you can see I only extend zeppelin contracts:\n`\npragma solidity ^0.4.18;\nimport './LeonardianToken.sol';\nimport 'zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol';\nimport 'zeppelin-solidity/contracts/ownership/Ownable.sol';\ncontract LeonardianCrowdsale is TimedCrowdsale, Ownable {\n    // ==============================\n    // Constructor\n    // ============\n    function LeonardianCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, ERC20 _token) TimedCrowdsale(_startTime, _endTime) Crowdsale(_rate, _wallet, _token) public {\n}\n\n// Change the current rate\nfunction setCurrentRate(uint256 _rate) private {\n    rate = _rate;\n}\n\n}\n`\nhere is my migration:\n`\nvar LeonardianCrowdsale = artifacts.require(\"./LeonardianCrowdsale.sol\");\nvar LeonardianToken = artifacts.require(\"./LeonardianToken.sol\");\nmodule.exports = function(deployer) {\nvar token = deployer.deploy(LeonardianToken).then(function () {\nconst startTime = Math.round((new Date(Date.now() - 86400000).getTime())/1000); // Yesterday\nconst endTime = Math.round((new Date().getTime() + (86400000 * 20))/1000); // Today + 20 days\n\ndeployer.deploy(LeonardianCrowdsale, \n    startTime, \n    endTime,\n    5, \n    \"0x5AEDA56215b167893e80B4fE645BA6d5Bab767DE\", // Replace this wallet address with the last one (10th account) from Ganache UI. This will be treated as the beneficiary address. \n    LeonardianToken.address\n  );\n\n});\n};\n`. Thanks for the help - I found the Ganache was old version today I update with the latest avaible but I think the debug is even worse one.\nAlso, truffle debug hash give me JS errors from the truffle package.\nI`ll ask OpenZepellin for the problem, thanks.. Also, the last version of Ganache have different behavior on every restart - sometimes work on on the next restart not working.. ",
    "ccpwcn": "I'm using the framework  zeppelin-solidity,  I have the same errors\nand I have two contracts, one is extended CappedToken\n```\npragma solidity ^0.4.18;\nimport \"../node_modules/zeppelin-solidity/contracts/token/ERC20/CappedToken.sol\";\ncontract GustavoCoin is CappedToken {\n    string public name = \"GUSTAVO COIN\";\n    string public symbol = \"GUS\";\n    uint256 public decimals = 2;\n    uint256 public INITIAL_SUPPLY = 10000 * (10 ** decimals);\nfunction GustavoCoin() \n    public\n    CappedToken(INITIAL_SUPPLY) {\n}\n\n}\n```\nAnd an other is crowd contract:\n```\npragma solidity ^0.4.18;\nimport \"./GustavoCoin.sol\";\nimport \"../node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\";\nimport \"../node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\";\n// import \"../node_modules/zeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol\";\nimport \"../node_modules/zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\";\nimport \"../node_modules/zeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol\";\ncontract GustavoCoinCrowdsale is Crowdsale, TimedCrowdsale, CappedCrowdsale {\n    function GustavoCoinCrowdsale(\n        uint256 _openingTime,\n        uint256 _closingTime,\n        uint256 _rate,\n        uint256 _cap,\n        address _wallet,\n        StandardToken _token\n    ) public \n    Crowdsale(_rate, _wallet, _token)\n    TimedCrowdsale(_openingTime, _closingTime)\n    CappedCrowdsale(_cap) {\n    }\n}\n```\ndeploy javascripts content:\n```\nconst GustavoCoin = artifacts.require('./GustavoCoin.sol');\nconst GustavoCoinCrowdsale = artifacts.require('./GustavoCoinCrowdsale.sol');\nmodule.exports = async (deployer) => {\n    // \u8bbe\u5b9a\u53c2\u6570\uff0c\u6b64\u5904\u7684\u53c2\u6570\u5373\u4f7f\u4f20\u5165\u5408\u7ea6\u6784\u9020\u65b9\u6cd5\u7684\u53c2\u6570\uff0c\u4e0e\u5408\u7ea6\u4fdd\u6301\u4e00\u81f4\n    const beneficiary = '0xC0AE3D68Ce5df82aD0594B547Db6D5b2fbEFfaEd';\n    const startTime = Math.round((new Date(Date.now() - 86400000).getTime())/1000); // Yesterday\n    const endTime = Math.round((new Date().getTime() + (86400000 * 20))/1000); // Today + 20 days\n    const rate = 100;\n    const cap = 3000;\n    const tokenAddress = '0x784dc9e81d2f8dcb8f960baf6384387fdbadc5f4';\n    deployer.deploy(GustavoCoinCrowdsale, \n        web3.toBigNumber(startTime), \n        web3.toBigNumber(endTime), \n        web3.toBigNumber(rate), \n        web3.toBigNumber(cap),\n        beneficiary,\n        tokenAddress\n    );\n};\n```\ntruffle version information:\nTruffle v4.1.11 (core: 4.1.11)\nSolidity v0.4.24 (solc-js)\nerror informations:\nRunning migration: 4_deploy_contracts.js\n  Replacing GustavoCoinCrowdsale...\n  ... 0x931ea70ab49f385ddf0babc22053374a9b02bdcd66cfe75796a382822007bccd\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: VM Exception while processing transaction: revert\n    at Object.InvalidResponse (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3\\lib\\web3\\errors.js:38:1)\n    at C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3\\lib\\web3\\requestmanager.js:86:1\n    at C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-migrate\\index.js:225:1\n    at C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-provider\\wrapper.js:134:1\n    at XMLHttpRequest.request.onreadystatechange (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3\\lib\\web3\\httpprovider.js:128:1)\n    at XMLHttpRequestEventTarget.dispatchEvent (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\xhr2\\lib\\xhr2.js:64:1)\n    at XMLHttpRequest._setReadyState (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\xhr2\\lib\\xhr2.js:354:1)\n    at XMLHttpRequest._onHttpResponseEnd (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\xhr2\\lib\\xhr2.js:509:1)\n    at IncomingMessage.<anonymous> (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\xhr2\\lib\\xhr2.js:469:1)\n    at emitNone (events.js:111:20)\n    at IncomingMessage.emit (events.js:208:7)\n    at endReadableNT (_stream_readable.js:1064:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9). @microdesign \nI have already modify my deploy scripts when I receivied your reply:\n```\nconst GustavoCoin = artifacts.require('./GustavoCoin.sol');\nconst GustavoCoinCrowdsale = artifacts.require('./GustavoCoinCrowdsale.sol');\nreturn deployer.then(() => {\n    return deployer.deploy(GustavoCoin);\n}).then(() => {\n    // \u8bbe\u5b9a\u53c2\u6570\uff0c\u6b64\u5904\u7684\u53c2\u6570\u5373\u4f7f\u4f20\u5165\u5408\u7ea6\u6784\u9020\u65b9\u6cd5\u7684\u53c2\u6570\uff0c\u4e0e\u5408\u7ea6\u4fdd\u6301\u4e00\u81f4\n    const beneficiary = '0xC0AE3D68Ce5df82aD0594B547Db6D5b2fbEFfaEd';\n    const startTime = Math.round((new Date(Date.now() - 86400000).getTime())/1000); // Yesterday\n    const endTime = Math.round((new Date().getTime() + (86400000 * 20))/1000); // Today + 20 days\n    const exchangeRate = 100; // 1 GUS = 0.001 ETH or 1 ETH = 100 GUS\n    const cap = 3000;\n    return deployer.deploy(GustavoCoinCrowdsale, \n        startTime, \n        endTime, \n        exchangeRate, \n        cap,\n        beneficiary,\n        GustavoCoin.address\n    );\n}).then(() => {\n    var token = GustavoCoin.at(GustavoCoin.address);\n    token.transferOwnership(GustavoCoinCrowdsale.address);\n});\nBUT The script has a syntax error:\nRunning migration: 4_deploy_contracts.js\nE:\\code\\solidity\\tutorialToken\\migrations\\4_deploy_contracts.js:4\nreturn deployer.then(() => {\n^^^^^^\nSyntaxError: Illegal return statement\n    at Object.createScript (vm.js:80:10)\n    at C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-require\\require.js:96:1\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:511:3)\n. @microdesign \nThank you very mush, your scripts is running well, and I still have an error, as a matter of fact, I've seen this mistake many times before, but I don't know why.\nRunning migration: 4_deploy_contracts.js\n  Running step...\n  Replacing GustavoCoin...\n  ... 0x90e4ed09904ac9dc6f98dc60bd1d4833e41205e2142e493fcda0c457a28fa6d7\n  GustavoCoin: 0x5657e26deed4899e34e57e66d7bd4f91e8fc802f\n  Replacing GustavoCoinCrowdsale...\n  ... 0x81c9640c7f1188c58fef21cc84b11c28641722082c3e287fd78566c56524ffc0\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: VM Exception while processing transaction: revert\n    at Object.InvalidResponse (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3\\lib\\web3\\errors.js:38:1)\n    at C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3\\lib\\web3\\requestmanager.js:86:1\n    at C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-migrate\\index.js:225:1\n    at C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-provider\\wrapper.js:134:1\n    at XMLHttpRequest.request.onreadystatechange (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3\\lib\\web3\\httpprovider.js:128:1)\n    at XMLHttpRequestEventTarget.dispatchEvent (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\xhr2\\lib\\xhr2.js:64:1)\n    at XMLHttpRequest.setReadyState (C:\\Users\\mslw\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\xhr2\\lib\\xhr2.js:354:1)\n    at XMLHttpRequest.onHttpResponseEnd (C:\\Users\\mslw\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\xhr2\\lib\\xhr2.js:509:1)\n    at IncomingMessage. (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\xhr2\\lib\\xhr2.js:469:1)\n    at emitNone (events.js:111:20)\n    at IncomingMessage.emit (events.js:208:7)\n    at endReadableNT (_stream_readable.js:1064:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)\nAs you can see, Total two contracts, the first namedGustavoCoinsucceeded, but the secondGustavoCoinCrowdsale``` failed.\nThis error is importent for me, Thank you very much for helping me solve these difficulties. Thank you again.. @microdesign \nSo, I sincerely ask you, what happened to my code that caused the following error?\nRunning migration: 4_deploy_contracts.js\n  Running step...\n  Replacing GustavoCoin...\n  ... 0x90e4ed09904ac9dc6f98dc60bd1d4833e41205e2142e493fcda0c457a28fa6d7\n  GustavoCoin: 0x5657e26deed4899e34e57e66d7bd4f91e8fc802f\n  Replacing GustavoCoinCrowdsale...\n  ... 0x81c9640c7f1188c58fef21cc84b11c28641722082c3e287fd78566c56524ffc0\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: VM Exception while processing transaction: revert\n    at Object.InvalidResponse (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3\\lib\\web3\\errors.js:38:1)\n    at C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3\\lib\\web3\\requestmanager.js:86:1\n    at C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-migrate\\index.js:225:1\n    at C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-provider\\wrapper.js:134:1\n    at XMLHttpRequest.request.onreadystatechange (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3\\lib\\web3\\httpprovider.js:128:1)\n    at XMLHttpRequestEventTarget.dispatchEvent (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\xhr2\\lib\\xhr2.js:64:1)\n    at XMLHttpRequest._setReadyState (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\xhr2\\lib\\xhr2.js:354:1)\n    at XMLHttpRequest._onHttpResponseEnd (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\xhr2\\lib\\xhr2.js:509:1)\n    at IncomingMessage.<anonymous> (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\xhr2\\lib\\xhr2.js:469:1)\n    at emitNone (events.js:111:20)\n    at IncomingMessage.emit (events.js:208:7)\n    at endReadableNT (_stream_readable.js:1064:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)\nThank you again for guiding me to solve these problems. Thank you.. @microdesign As you said, this is my codes:\nA contract as an common token:\n```\npragma solidity ^0.4.18;\nimport \"../node_modules/zeppelin-solidity/contracts/token/ERC20/CappedToken.sol\";\ncontract GustavoCoin is CappedToken {\n    string public name = \"GUSTAVO COIN\";\n    string public symbol = \"GUS\";\n    uint256 public decimals = 2;\n    uint256 public INITIAL_SUPPLY = 10000 * (10 ** decimals);\nfunction GustavoCoin() \n    public\n    CappedToken(INITIAL_SUPPLY) {\n}\n\n}\nA contract as a crowdsale token:\npragma solidity ^0.4.18;\nimport \"./GustavoCoin.sol\";\nimport \"../node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\";\nimport \"../node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\";\n// import \"../node_modules/zeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol\";\nimport \"../node_modules/zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\";\nimport \"../node_modules/zeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol\";\ncontract GustavoCoinCrowdsale is Crowdsale, TimedCrowdsale, CappedCrowdsale {\n    function GustavoCoinCrowdsale(\n        uint256 _openingTime,\n        uint256 _closingTime,\n        uint256 _rate,\n        uint256 _cap,\n        address _wallet,\n        StandardToken _token\n    ) public \n    Crowdsale(_rate, _wallet, _token)\n    TimedCrowdsale(_openingTime, _closingTime)\n    CappedCrowdsale(_cap) {\n    }\n}\ndefinination file for truffle framework that's name is truffle.js:\nrequire('dotenv').config();\nconst Web3 = require(\"web3\")\nconst web3 = new Web3();\nconst WalletProvider = require(\"truffle-wallet-provider\");\nconst Wallet = require(\"ethereumjs-wallet\");\nvar mainNetPrivateKey = new Buffer(process.env[\"MAINNET_PRIVATE_KEY\"], \"hex\");\nvar mainNetWallet = Wallet.fromPrivateKey(mainNetPrivateKey);\nvar mainNetProvider = new WalletProvider(mainNetWallet, \"https://mainnet.infura.io/\");\nvar ropstenPrivateKey = new Buffer(process.env[\"ROPSTEN_PRIVATE_KEY\"], \"hex\");\nvar ropstenWallet = Wallet.fromPrivateKey(ropstenPrivateKey);\nvar ropstenProvider = new WalletProvider(ropstenWallet, \"https://ropsten.infura.io/\");\nmodule.exports = {\n  // See http://truffleframework.com/docs/advanced/configuration\n  // for more about customizing your Truffle configuration!\n  networks: {\n    development: {\n      host: \"127.0.0.1\",\n      port: 7545,\n      network_id: \"*\" // Match any network id\n    },\n    ropsten: {\n      provider: ropstenProvider,\n      gas: 4600000,\n      gasPrice: web3.utils.toWei(\"20\", \"gwei\"),\n      gasLimit: 46000000000000,\n      network_id: \"3\",\n    },\n    mainnet: {\n      provider: mainNetProvider,\n      gas: 4600000,\n      gasPrice: web3.utils.toWei(\"20\", \"gwei\"),\n      network_id: \"1\",\n    }\n  },\n  solc: {\n        optimizer: {\n            enabled: true,\n            runs: 200\n        }\n    },\n};\nproject's package.json:\n{\n  \"name\": \"tutorialtoken\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"truffle.js\",\n  \"directories\": {\n    \"test\": \"test\"\n  },\n  \"scripts\": {\n    \"dev\": \"lite-server\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"lite-server\": \"^2.3.0\"\n  },\n  \"dependencies\": {\n    \"dotenv\": \"^6.0.0\",\n    \"ethereumjs-wallet\": \"^0.6.0\",\n    \"openzeppelin-solidity\": \"^1.10.0\",\n    \"truffle-wallet-provider\": \"0.0.5\",\n    \"web3\": \"^1.0.0-beta.30\",\n    \"zeppelin-solidity\": \"^1.7.0\"\n  }\n}\ndeploy scripts for truffle framework:\nconst GustavoCoin = artifacts.require('./GustavoCoin.sol');\nconst GustavoCoinCrowdsale = artifacts.require('./GustavoCoinCrowdsale.sol');\nmodule.exports = function(deployer, network, accounts) {\n    return deployer.then(() => {\n        return deployer.deploy(GustavoCoin);\n    }).then(() => {\n        // \u8bbe\u5b9a\u53c2\u6570\uff0c\u6b64\u5904\u7684\u53c2\u6570\u5373\u4f7f\u4f20\u5165\u5408\u7ea6\u6784\u9020\u65b9\u6cd5\u7684\u53c2\u6570\uff0c\u4e0e\u5408\u7ea6\u4fdd\u6301\u4e00\u81f4\n        const beneficiary = '0xf3E57ab00bD9b225A1F35304F49eb812A2B6AD09';\n        const startTime = Math.round((new Date(Date.now() - 86400000).getTime())/1000); // Yesterday\n        const endTime = Math.round((new Date().getTime() + (86400000 * 20))/1000); // Today + 20 days\n        const exchangeRate = 100; // 1 GUS = 0.001 ETH or 1 ETH = 100 GUS\n        const cap = 3000;\n        return deployer.deploy(GustavoCoinCrowdsale, \n            startTime, \n            endTime, \n            exchangeRate, \n            cap,\n            beneficiary,\n            GustavoCoin.address\n        );\n    }).then(() => {\n        var token = GustavoCoin.at(GustavoCoin.address);\n        token.transferOwnership(GustavoCoinCrowdsale.address);\n    });\n}\nmy action step:\n1. start ganache\n![ganache](https://user-images.githubusercontent.com/5465756/41706556-b1b9d618-756e-11e8-87d5-f348767aa486.jpg)\n2. run comand\ntruffle.cmd migrate --reset\n3. error in console:\nRunning migration: 4_deploy_contracts.js\n  Running step...\n  Replacing GustavoCoin...\n  ... 0x3a082d503c779d47b0bfc38c5bff98de6e4ee44b1bb2ff46522fc4776b80c902\n  GustavoCoin: 0x03fb004aeffdda55bb4aaf8649f1a02dbf81638c\n  Replacing GustavoCoinCrowdsale...\n  ... 0x08d7e936cafc367302d13aeacf73badce2e5365a3a3f9ec92f00b6284a8702f6\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: VM Exception while processing transaction: revert\n    at Object.InvalidResponse (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:41483:16)\n    at C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:330353:36\n    at C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:176198:11\n    at C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:326008:9\n    at XMLHttpRequest.request.onreadystatechange (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:329052:7)\n    at XMLHttpRequestEventTarget.dispatchEvent (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:176427:18)\n    at XMLHttpRequest.setReadyState (C:\\Users\\mslw\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:176717:12)\n    at XMLHttpRequest.onHttpResponseEnd (C:\\Users\\mslw\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:176872:12)\n    at IncomingMessage. (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:176832:24)\n    at emitNone (events.js:111:20)\n    at IncomingMessage.emit (events.js:208:7)\n    at endReadableNT (_stream_readable.js:1064:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)\nAs you see, the first contractGustavoCoindeployed succeeded and the second contractGustavoCoinCrowdsaledeployed failed, I searched a lot of relative informations, but still cannot find real error reason.\n. @microdesign When I modified the codes:\npragma solidity ^0.4.19;\nimport \"./GustavoCoin.sol\";\nimport \"../node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\";\n// import \"../node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\";\n// import \"../node_modules/zeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol\";\nimport \"../node_modules/zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\";\n// import \"../node_modules/zeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol\";\ncontract GustavoCoinCrowdsale is TimedCrowdsale {\n    function GustavoCoinCrowdsale(\n        uint256 _openingTime,\n        uint256 _closingTime,\n        uint256 _rate,\n        address _wallet,\n        ERC20 _token\n    ) public TimedCrowdsale(_openingTime, _closingTime) {\n        rate = _rate;\n        wallet = _wallet;\n        token = _token;\n    }\n}\nAnd deploy scripts:\nconst GustavoCoin = artifacts.require('./GustavoCoin.sol');\nconst GustavoCoinCrowdsale = artifacts.require('./GustavoCoinCrowdsale.sol');\nmodule.exports = function(deployer, network, accounts) {\n    const name = 'GUSTAVO TOKEN';\n    const symbol = 'GUS';\n    const totalSupply = 10000;\n    return deployer.then(function () {\n        return deployer.deploy(GustavoCoin,\n            name,\n            symbol,\n            totalSupply\n        );\n    }).then(function () {\n        // \u8bbe\u5b9a\u53c2\u6570\uff0c\u6b64\u5904\u7684\u53c2\u6570\u5373\u4f7f\u4f20\u5165\u5408\u7ea6\u6784\u9020\u65b9\u6cd5\u7684\u53c2\u6570\uff0c\u4e0e\u5408\u7ea6\u4fdd\u6301\u4e00\u81f4\n        const beneficiary = accounts[0];\n        const startTime = Math.round((new Date(Date.now() - 86400000).getTime())/1000); // Yesterday\n        const endTime = Math.round((new Date().getTime() + (86400000 * 20))/1000); // Today + 20 days\n        const exchangeRate = 100; // 1 GUS = 0.001 ETH or 1 ETH = 100 GUS\n        return deployer.deploy(GustavoCoinCrowdsale, \n            startTime, \n            endTime, \n            exchangeRate, \n            beneficiary,\n            GustavoCoin.address\n        );\n    }).then(function () {\n        var token = GustavoCoin.at(GustavoCoin.address);\n        token.transferOwnership(GustavoCoinCrowdsale.address);\n    });\n}\nThe errors still exists:\nRunning migration: 4_deploy_contracts.js\n  Running step...\n  Deploying GustavoCoin...\n  ... 0x518b71dc716437ce149904aa496530889ad01c3de5cb4a88f0830d9faa2dabf5\n  GustavoCoin: 0x1a61350cbf81eb4275cbcbed01d87f1288331899\n  Deploying GustavoCoinCrowdsale...\n  ... 0xb1386d791c4f3ce737c554e6f94905ff2f0a55e8a30a05d251eb4311dc3db422\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: The contract code couldn't be stored, please check your gas amount.\n    at Object.callback (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\Users\\gnidan\\src\\work\\truffle\\~\\web3\\lib\\web3\\contract.js:147:1)\n    at C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\Users\\gnidan\\src\\work\\truffle\\~\\web3\\lib\\web3\\method.js:142:1\n    at C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\Users\\gnidan\\src\\work\\truffle\\~\\web3\\lib\\web3\\requestmanager.js:89:1\n    at C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:.-migrate\\index.js:225:1\n    at C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:.-provider\\wrapper.js:134:1\n    at XMLHttpRequest.request.onreadystatechange (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\Users\\gnidan\\src\\work\\truffle\\~\\web3\\lib\\web3\\httpprovider.js:128:1)\n    at XMLHttpRequestEventTarget.dispatchEvent (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\Users\\gnidan\\src\\work\\truffle\\~\\xhr2\\lib\\xhr2.js:64:1)\n    at XMLHttpRequest.setReadyState (C:\\Users\\mslw\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\Users\\gnidan\\src\\work\\truffle\\~\\xhr2\\lib\\xhr2.js:354:1)\n    at XMLHttpRequest.onHttpResponseEnd (C:\\Users\\mslw\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\Users\\gnidan\\src\\work\\truffle\\~\\xhr2\\lib\\xhr2.js:509:1)\n    at IncomingMessage. (C:\\Users\\mslw_\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\Users\\gnidan\\src\\work\\truffle\\~\\xhr2\\lib\\xhr2.js:469:1)\n    at emitNone (events.js:111:20)\n    at IncomingMessage.emit (events.js:208:7)\n    at endReadableNT (_stream_readable.js:1064:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)\nThe truffle.js networks section:\ndevelopment: {\n      host: \"127.0.0.1\",\n      port: 7545,\n      from: \"0xf3E57ab00bD9b225A1F35304F49eb812A2B6AD09\",\n      network_id: \"*\" // Match any network id\n    }\n. @microdesign Thank you very much, My question has been solved\npragma solidity ^0.4.19;\nimport \"./GustavoCoin.sol\";\nimport \"../node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\";\nimport \"../node_modules/zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\";\ncontract GustavoCoinCrowdsale is Crowdsale, TimedCrowdsale {\n    function GustavoCoinCrowdsale(\n        uint256 _openingTime,\n        uint256 _closingTime,\n        uint256 _rate,\n        address _wallet,\n        address _tokenAddress\n    ) public Crowdsale(_rate, _wallet, GustavoCoin(_tokenAddress)) TimedCrowdsale(_openingTime, _closingTime) {\n    }\n}\n```. ",
    "mbrennan": "I'm having the same trouble.  I'm not sure how to get the IDE to recognize those symbols.  I'm using intellij-solidity.  I doubt this is any problem with truffle, but I wonder if there is some package that could be developed so Intellij-based IDEs can recognize these symbols. . ",
    "vitaliy-kuzmich": "starting testrpc:\ntestrpc -u 0 -u 1 -u 2 -u 3 -u 4 -u 5 -u 6 -u 7 -u 8 -u 9 --seed 0\nafter entering console:\ntruffle console\ndeclare  deployed contract :\nvar t; TestContract.deployed().then(rs=>t = rs)\nChecking len:\nt.getLen.call()\nBigNumber { s: 1, e: 0, c: [ 0 ] }\nLets say I want to add few 100500 number to the arr variable in struct  of TT type:\n```\ntruffle(development)> t.setT1.sendTransaction(100500)\n'0x87b5ff0be908ab933dc26573cb5a144a410727a80a229c289090e16ce78e4391'\ntruffle(development)> t.getLen.call()\nBigNumber { s: 1, e: 5, c: [ 100501 ] }\ntruffle(development)> t.setT1.sendTransaction(100500)\n'0xae68f34856c2621dcc67c2d11f59bd24b50b30584d110bc52f767ff40ba56d31'\ntruffle(development)> t.getLen.call()\nBigNumber { s: 1, e: 5, c: [ 100501 ] }\ntruffle(development)> t.setT1.sendTransaction(100500)\n'0xe7809b7ebd45accac1c3df64e3f66e76ce3db18cfcb460769e1f58605d5ee4ca'\ntruffle(development)> t.getLen.call()\nBigNumber { s: 1, e: 5, c: [ 100501 ] }\n```\nfor some reasons, it does weird impact on the length of the arr storage variable.\n. ",
    "philurlaub": "Same problem here, also in my web3.js tests. . Have a look at this example: http://solidity.readthedocs.io/en/develop/frequently-asked-questions.html#what-is-the-memory-keyword-what-does-it-do. ",
    "testrain": "My truffle migration to ropsten network through infura with hdwallet always hang on:\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  ....0x.....\nStep 2 is never reached and deployed, don't know how to fix this..... How do we manually set/config web3 version in truffle?  I.e. I do not want to use 1.0.0.xxx.beta, how to use 0.20.7 instead?. ",
    "skyh24": "so why do this happen\uff1f wait for a long time, and i cannot see the contract on etherscan. ",
    "nonsenseless": "@onetom \n1. Whoops, that was a copy/paste error. I've updated the original comment accordingly.\nI'm going to have to work through the rest of the comments and see how they impact things, but at the outset they definitely seem to offer some insight into what might be going on and how to address it, so thank you!\nIn one test late last night I modified the config file to reduce the gas limit by an order of magnitude and, for the first time, both of my conracts deployed to the chain and I was able to trigger a successful test of the contract...though the transactions appeared to time out on the CLI and only showed up on the chain a few hours later which suggests it's related to the issues you noted.\nI'll update this thread with more information as I test these suggestions in case that proves helpful for others.\n. ",
    "DeepakSuryaS": "@propercoil i added the --jsonrpc-apis as you've said but it still doesn't work. i still get the \"contract transaction couldn't be found after 50 blocks\" error. is there anything else i could do to get it working properly? . i got the same error. i first ran npm init -y and then i ran truffle init, so i have package.json in my folder. should i create a new folder inside of this folder to run truffle init successfully?. @cgewecke running ls -A shows the package.json file. @cgewecke ok, thanks!. ",
    "donaldduckcheshta": "@DeepakSuryaS\nAdd whole string --jsonrpc-apis web3,eth,net,personal,parity,parity_set,traces,rpc,parity_accounts to the parity call .\nThanks @propercoil  - worked  ! :). ",
    "cheshtaseedcloud": "Hi @quantumproducer,\ntry to run command for migration \n--> truffle migrate --network=kovan reset \n. ",
    "faizanahmad055": "Hi,\nHas anyone able to solve this yet. I tried all above mentioned comments but I'm still facing the same issue.\nI'm running below mentioned command to run the ethereum node\ngeth --rinkeby --syncmode \"fast\" --rpc --rpcapi db,eth,net,web3,personal --cache=1024 --rpcport 8545 --rpcaddr 127.0.0.1 --rpccorsdomain \"*\"\nMy environment is\n\nGeth Version: 1.8.11-stable\nTruffle v4.1.13 (core: 4.1.13)\nSolidity v0.4.24 (solc-js)\nnode version: v7.8.0\nnpm version: v4.2.0\n\ntruffle.js\nmodule.exports = {\n  networks: {\n    development: {\n      host: '127.0.0.1',\n      port: 8545,\n      network_id: '*', // Match any network id\n      gas: 4712388\n    },\n    ropsten: {\n      host: 'localhost',\n      port: 8545,\n      gas: 6700000,\n      network_id: '3' // Match any network id\n    },\n    kovan: {\n      host: 'localhost',\n      port: 8545,\n      gas: 6700000,\n      network_id: '5' // Match any network id\n    },\n    mocha: {\n      enableTimeouts: false\n    }\n  }\n}\nWhen I run truffle migrate --reset\nit shows below error\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: Contract transaction couldn't be found after 50 blocks\nSee the full error message below\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  ... 0x4bad5e37538025f35e48eb95d7448a910c2c9b5e7c822e9c5fd310446219f62a\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: Contract transaction couldn't be found after 50 blocks\n    at /home/faizan/.nvm/versions/node/v7.8.0/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/contract.js:112:1\n    at /home/faizan/.nvm/versions/node/v7.8.0/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/filter.js:128:1\n    at Array.forEach (native)\n    at /home/faizan/.nvm/versions/node/v7.8.0/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/filter.js:127:1\n    at Array.forEach (native)\n    at Object.onMessage [as callback] (/home/faizan/.nvm/versions/node/v7.8.0/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/filter.js:125:1)\n    at /home/faizan/.nvm/versions/node/v7.8.0/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:259:1\n    at Array.forEach (native)\n    at /home/faizan/.nvm/versions/node/v7.8.0/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:258:10\n    at /home/faizan/.nvm/versions/node/v7.8.0/lib/node_modules/truffle/build/webpack:/packages/truffle-migrate/index.js:225:1\n    at /home/faizan/.nvm/versions/node/v7.8.0/lib/node_modules/truffle/build/webpack:/packages/truffle-provider/wrapper.js:134:1\n    at XMLHttpRequest.request.onreadystatechange (/home/faizan/.nvm/versions/node/v7.8.0/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/httpprovider.js:128:1)\n    at XMLHttpRequestEventTarget.dispatchEvent (/home/faizan/.nvm/versions/node/v7.8.0/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:64:1)\n    at XMLHttpRequest._setReadyState (/home/faizan/.nvm/versions/node/v7.8.0/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:354:1)\n    at XMLHttpRequest._onHttpResponseEnd (/home/faizan/.nvm/versions/node/v7.8.0/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:509:1)\n    at IncomingMessage.<anonymous> (/home/faizan/.nvm/versions/node/v7.8.0/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:469:1)\n    at emitNone (events.js:91:20)\n    at IncomingMessage.emit (events.js:188:7)\n    at endReadableNT (_stream_readable.js:975:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickDomainCallback (internal/process/next_tick.js:128:9). Duplicate of https://github.com/trufflesuite/truffle/issues/677. ",
    "abdennour": "I don't think so. There is activity and the issue  still appears. now I fixed the issue by omitting gasPrice and keeping gasbut with higher value\n```js\nrinkeby: {\n      provider: () => {\n    return new HDWalletProvider(process.env.MNEMONIC, process.env.RINKEBY_ENDPOINT)\n  },\n  network_id: 4,\n  gas: 5000000,\n  //gasPrice: 1000\n}\n\n```\n. ",
    "joshma91": "Using Truffle and Infura to deploy my contracts to Ropsten, my deployment hangs with the same error in the initial post. @abdennour's solution of omitting gasPrice is what made deployment work for me:\njavascript\nropsten: {\n      provider: () => new HDWalletProvider(process.env.MNEMONIC, \"https://ropsten.infura.io/v3/\" + process.env.INFURA_API_KEY),\n      network_id: 3,\n      gas: 3000000,\n }. ",
    "brent-capx": "i am using Truffle v4.1.14 trying to deploy to kovan and mainnet. I have deployed the same contract before the kovan and mainnet 2 months ago. Now when i deploy with 5000000 gas, parity --chain=kovan/mainnet --jsonrpc-apis web3,eth,net,personal,parity,parity_set,traces,rpc,parity_accounts as mentioned above, i still get: \nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: Contract transaction couldn't be found after 50 blocks\nAnyone manage to deploy smart contract successful recently?\n. Hi Guys, i confirmed this is due to problem in the ethereum network, it's not picking up any transactions for the past 4 days, i have been monitoring my account every day and it's empty. Today, i suddenly see 20 over contract creations transactions in the chain. This is totally screwed up, it has nothing to do with truffle or parity or any tools, it seems the chain has different workers picking up contract creation versus miners picking up other transactions type. It's there any way to cancel any transactions?. Usually you will see the transaction in blockchain and status pending. I have even tried with 50 Gwei 5 mil gas and it just show transactions cannot be found after 50 blocks. It's not there, and no status in chain. it just appear after 4 days in etherscan.io. I don't think approaching block limits is the case, since i tried everyday.. for anyone trying to cancel transactions, you can use this: \ncurl --data '{\"method\":\"eth_sendTransaction\",\"params\":[{\"from\":\"0xd03a11eb810c8da2b31e420cbadffd9b9ffbee3e\",\"gas\":\"0x588040\",\"gasPrice\":\"0xba43b7400\",\"data\":\"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\",\"nonce\":\"0x1d\"}],\"id\":1,\"jsonrpc\":\"2.0\"}' -H \"Content-Type: application/json\" -X POST localhost:8545\nSend in invalid data into the transaction and it will execute wrongly, but you still have to pay for the gas.\n. ",
    "Elaniobro": "Is this issue still open? I see it on gitcoin.co but its marked closed by @dwalintukan . ",
    "scboffspring": "Hi,\nThe pull request trufflesuite/truffle-core#81 resolves this issue. The value for gasPrice and gasLimit were not copied over when the network was forked in the environment (when using --dry-run).. ",
    "dan-turner": "Thanks @kyriediculous !\nThat was indeed my problem. Same problem here trying to connect to Kaleido (Geth PoA).... ",
    "wanderingstan": "Metamask has postponed fixing this on their end: https://github.com/MetaMask/metamask-extension/issues/1999#issuecomment-354012719\nThere is a \"patch\" that may allow you to continue to use truffle develop in the meantime: \nhttps://github.com/MetaMask/metamask-extension/issues/1999#issuecomment-354141687\n. ",
    "SephirothLT": "@cgewecke  hi,i have tried run rm .DS_Store but it not work. @cgewecke  thanks ,I just solved this problem, truffle version is 4.0.4  \nhttp://truffleframework.com/tutorials/debugging-a-smart-contract. ",
    "JoyCood": "\ntruffle version: Truffle v4.1.13 (core: 4.1.13)\n    os: macOS Sierra  10.12\n\nwhen i run this comment truffle migrate --reset for deploy a smart contract,  but get the error message below:\n`\n192:client-server knight$ truffle migrate --reset\nCompiling ./contracts/c1.sol...\nWriting artifacts to ./build/contracts\nUsing network 'development'.\nRunning migration: 1_initial_migration.js\n/usr/local/lib/node_modules/truffle/build/cli.bundled.js:101708\n    var artifact = JSON.parse(\nundefined:1\nb0VIM 7.4\nSyntaxError: Unexpected token b in JSON at position 0\n    at JSON.parse ()\n    at FS.getContractName (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:101708:25)\n    at FS.require (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:101683:28)\n    at Resolver.require (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:59966:25)\n    at Object.require (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:69602:36)\n    at ResolverIntercept.require (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:199772:32)\n    at /Users/knight/Documents/geth/smart-contracts/hello/migrations/1_initial_migration.js:1:28\n    at ContextifyScript.Script.runInContext (vm.js:59:29)\n    at ContextifyScript.Script.runInNewContext (vm.js:65:15)\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:101624:14\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:511:3)\n`. ",
    "zdesiree": "It's the same for me like @JoyCood reported. Any advice on the issue?. ",
    "mGrossSRT": "Hi all, same issue as @zdesiree and @JoyCood. Anybody found a workaround and or a solution? \n. ",
    "danielpenagos": "Hi everyone. I am getting this error. I'm trying to figure it out what is the cause, without any success.\nAny ideas?\n/usr/local/lib/node_modules/truffle/build/cli.bundled.js:101723\n    var artifact = JSON.parse(\n                        ^\nundefined:1\n0 info it worked if it ends with ok\n  ^\nSyntaxError: Unexpected token i in JSON at position 2\n    at JSON.parse ()\n    at FS.getContractName (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:101723:25)\n    at FS.require (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:101698:28)\n    at Resolver.require (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:59966:25)\n    at Object.require (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:69602:36)\n    at ResolverIntercept.require (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:197047:32)\n    at /kuantum-project/kuantum-project/blockchain/kuantum/migrations/1_initial_migration.js:3:30\n    at ContextifyScript.Script.runInContext (vm.js:59:29)\n    at ContextifyScript.Script.runInNewContext (vm.js:65:15)\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:101639:14\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:511:3)\nThanks in advance for any help\n. ",
    "aaronhayes": "For anyone still having trouble with this; make sure your build folder (aka where the contract .json files are) ONLY contains .json files; for some reason truffle reads EVERY file.  Any dangling .gitkeep, .DS_STORE, .something, random.file files will cause issues. . ",
    "mrbartchris": "@cgewecke  I am still having this issue, I tried removing all .DS_Store using:\nfind . -name \".DS_Store\" -delete. I also tried creating another directory using truffle init and tried running truffle test but same error popped up. \nFunny thing is that it was all working fine, until suddenly without changing a single thing this error popped up out of nowhere.. ",
    "rhlsthrm": "@MacroChip yes I do have more than one contract in a file. It should still work though.. ",
    "andiwinata": "Got the same issue, not just in truffle develop but also in truffle console while running ganache-cli.\nSo I downgraded my truffle to 4.0.0 and it has the correct ABI now, same to the one produced from  https://remix.ethereum.org. ",
    "fairgrounds-dapp": "It seems like clearing the abi property from the generated contract.json file and recompiling also does the trick (for anyone who has network values they want to keep).  \nI believe this repro'd for me when I made changes to a base class, and my inheriting class became corrupted.. ",
    "bitboyz": "@rffl Should clearing the ABI and recompiling generate a new ABI in the JSON? Nothing changed for me..\nAlso have tried deleting build and recompiling + remigrating but no luck either. . ",
    "bijeebuss": "For me I can fix it by going into my artifact json file and deleting the abi section then running \"truffle compile --all\" . That way I don't lose other information by nuking the build folder. For example if i changed the contract called MyContract.sol I would go to build/contracts/MyContract.json and delete the abi section then recompile. Yea its not much help for fixing it but at least that way you wont get your migrations all messed up by deleting the entire build folder. ",
    "saurfang": "Running migrate --reset --all seems to rewrite build directory for me so I was able to stay in truffle develop console.. ",
    "ericwooley": "I'm getting an old ABI as well, on 4.0.6\nAfter running truffle compile --all, the abi is correct.\nusing truffle develop:\nSometime during truffle migrate --reset --all the ABI reverts to a different version of the contract. I don't know how or why, or where it's even pulling the old ABI from, but it's driving me insane.\nI published my repo, here is my basic setup:\nhttps://github.com/ericwooley/EtherAds/tree/516952316c1b2262d62e8e600b7dd3368d214c14/packages/ad-factory\nwith compile --all\nhttps://github.com/ericwooley/EtherAds/blob/516952316c1b2262d62e8e600b7dd3368d214c14/packages/ad-factory/contracts/AdLogFactory.sol#L25 \nis included in the file. \nafter migrate it is reverted to some other state.\nMaybe it has to do with the custom contract location (for typescript to be happy)?\n. Tried this with the latest version, migrate is missing a bunch of the ABI.. @vecheslav I just tested 1.8.1, still errored. Downgrading to 1.7.3 seems to be the way to go for now.  \nHere are some easy instructions for those who are desperate to deploy a contract. OSX only, though it would be similar on other OSs.\n```bash\nOSX instructions to get 1.7.3\ngit clone git@github.com:ethereum/go-ethereum.git;\ncd go-ethereum;\ngit checkout tags/v1.7.3; # checkout 1.7.3\nbrew switch go 1.9.4; # install a version of go that 1.7.3 is happy with.\nmake geth;\nln -s ${PWD}/build/bin/geth /usr/local/bin/geth-173; # or geth if you want to use it in scripts etc...\ngeth-173 version; # version check\n```\nI had a hard time getting it to install with go 1.10 because make checks the version of go, and doesn't properly sort the versions. It things 1.10 < 1.7. So if make geth fails, you may have to run brew switch go 1.9.4 before make geth.\nEDIT: forgot to checkout the right version in the script.. @cgewecke I'm not sure why this is closed? Was some progress made?. @OfStone https://github.com/trufflesuite/truffle/issues/721#issuecomment-366754953. You can't mine on rinkeby, which is a testnet I use often for simplicity. Ropsten is better, but it's more annoying also. I like to start with rinkeby.. ",
    "SvenMeyer": "Truffle v4.1.14 (core: 4.1.14)\nSolidity v0.4.24 (solc-js)\nI actually spent a couple of days researching why my JavaScript UI using web3  complains about non existing solidity functions, although they were there. I found out that these function names were missing in the .json file of that corresponding .sol file.\nI would have to reproduce this to provide further evidence ... unless somebody else has the same problem and can share some files.. i updated to node v10.9 and npm 6.4.0, reinstalled truffle and now it worked\n$ nvm install v10.9\n$ nvm install-latest-npm\n$ npm uninstall -g truffle\n$ npm install -g truffle\n$ truffle version\nTruffle v4.1.14 (core: 4.1.14)\nSolidity v0.4.24 (solc-js)\n. I am using nvm as well, so that might cause the problem.\nI have the same problem with another package (ganache-cli) and \"npm cache clear --force\" did not help.\nJust checked again, now its updated. Maybe just logout/start a new terminal window?. ",
    "deviant32": "I have the private key for that exact same account.  I just sent 1 eth to the account and it automatically sent .2 to another wallet with a .78 transaction fee!. ",
    "nocow4bob": "I just experienced this exact same thing.. ",
    "josoroma": "no luck so far:\n\n. @chuacw by any chance would you mind sharing an example please?. @chuacw very helpful man and the test is easy to follow. Probably i'am missing something obvious again but i'm stuck trying to successfully replicate your transfer() call:\n```\nwallet = web3.eth.accounts[0]\naccount1 = web3.eth.accounts[1]\naccount2 = web3.eth.accounts[2]\naccount3 = web3.eth.accounts[3]\namount1 = web3.toWei(1, 'ether')\namount2 = web3.toWei(2, 'ether')\namount3 = web3.toWei(3, 'ether')\nApeToken.deployed().then(instance => { apeTokenInstance = instance })\napeTokenInstance.address\nApePreICO.deployed().then(instance => { apePreICOInstance = instance })\napePreICOInstance.address\napePreICOInstance.owner()\napePreICOInstance.tokensAvailable()\napeTokenInstance.INITIAL_SUPPLY()\napePreICOInstance.INITIAL_TOKENS()\napePreICOInstance.checkBalance(wallet)\napePreICOInstance.checkBalance(account1)\napePreICOInstance.checkBalance(account2)\napePreICOInstance.checkBalance(account3)\napePreICOInstance.balanceOf(wallet)\napePreICOInstance.balanceOf(account1)\napePreICOInstance.balanceOf(account2)\napePreICOInstance.balanceOf(account3)\n```\nStuck trying to run:\napeTokenInstance.transfer(apePreICOInstance.address, apePreICOInstance.INITIAL_TOKENS(), {from: wallet})\nor\napeTokenInstance.transfer(apePreICOInstance.address, apePreICOInstance.INITIAL_TOKENS(), {from: ApeToken.address})\nBoth are hitting the error:\nError: Invalid number of arguments to Solidity function\n...\n(y)\n. @chuacw Code, tests were made through the truffle console:\nhttps://github.com/josoroma/ape/blob/master/migrations/2_deploy_contracts.js\nhttps://github.com/josoroma/ape/blob/master/contracts/ApePreICO.sol\nAt the end of this comment you will find the weird results for:\napePreICOInstance.balanceOf(account2) == 0\napePreICOInstance.weiRaised() == 0\nThanks in advance!\n```\ncd ~/Sites/ico/ape && reload && nvm use 8\n./scripts/test.sh\nrm -fr build && truffle migrate --network development --reset --compile-all && truffle console\n```\nwallet = web3.eth.accounts[0]\naccount1 = web3.eth.accounts[1]\naccount2 = web3.eth.accounts[2]\naccount3 = web3.eth.accounts[3]\namount1 = web3.toWei(1, 'ether')\namount2 = web3.toWei(2, 'ether')\namount3 = web3.toWei(3, 'ether')\n```\nApeToken.deployed().then(instance => { apeTokenInstance = instance })\napeTokenInstance.address\n'0x50934a1f738cecc566c1612123c13950dbc5e037'\n```\n```\nApePreICO.deployed().then(instance => { apePreICOInstance = instance })\napePreICOInstance.address\n'0xec41caf76a7ce22bcae44093034a2f30f2524ae1'\napePreICOInstance.owner()\n'0x4345f962f6b2b80b83b9ec2de70458e4e106f055'\n```\n```\napeTokenInstance.INITIAL_SUPPLY()\n{ s: 1, e: 26, c: [ 1000000000000 ] }\napePreICOInstance.INITIAL_TOKENS()\n{ s: 1, e: 24, c: [ 60000000000 ] }\napePreICOInstance.tokensAvailable()\n{ s: 1, e: 0, c: [ 0 ] }\n```\ncoin\n```\napePreICOInstance.checkBalance(wallet)\n{ s: 1, e: 19, c: [ 987859, 16300000000000 ] }\napePreICOInstance.checkBalance(apePreICOInstance.address)\n{ s: 1, e: 0, c: [ 0 ] }\n```\ntokens\n```\napePreICOInstance.balanceOf(wallet)\n{ s: 1, e: 0, c: [ 0 ] }\napePreICOInstance.balanceOf(apePreICOInstance.address)\n{ s: 1, e: 0, c: [ 0 ] }\napePreICOInstance.owner()\napePreICOInstance.checkBalance('0x4345f962f6b2b80b83b9ec2de70458e4e106f055')\n{ s: 1, e: 19, c: [ 987859, 16300000000000 ] }\n```\n```\napePreICOInstance.tokensAvailable()\n{ s: 1, e: 0, c: [ 0 ] }\napePreICOInstance.checkBalance(wallet)\n{ s: 1, e: 19, c: [ 987859, 16300000000000 ] }\n```\nInitialize\n```\nPRE_ICO_INITIAL_TOKENS = 60000000000\napeTokenInstance.transfer(apePreICOInstance.address, PRE_ICO_INITIAL_TOKENS, {from: wallet})\n```\n```\napePreICOInstance.tokensAvailable()\n{ s: 1, e: 10, c: [ 60000000000 ] }\napePreICOInstance.checkBalance(wallet)\n{ s: 1, e: 19, c: [ 987807, 75100000000000 ] }\n```\napePreICOInstance.owner()\napePreICOInstance.checkBalance('0x4345f962f6b2b80b83b9ec2de70458e4e106f055')\n{ s: 1, e: 19, c: [ 987807, 75100000000000 ] }\n16300000000000\n75100000000000\napePreICOInstance.weiRaised()\n{ s: 1, e: 0, c: [ 0 ] }\napePreICOInstance.checkBalance(account2)\n{ s: 1, e: 20, c: [ 1000000 ] }\napePreICOInstance.balanceOf(account2)\n{ s: 1, e: 0, c: [ 0 ] }\napePreICOInstance.buyTokens(web3.toWei(1, \"ether\"), { from: account2 })\napePreICOInstance.balanceOf(account2) == 0\napePreICOInstance.checkBalance(account2)\n{ s: 1, e: 19, c: [ 999941, 94400000000000 ] }\napePreICOInstance.balanceOf(account2)\n{ s: 1, e: 0, c: [ 0 ] }      <=== ?\napePreICOInstance.weiRaised() == 0\napePreICOInstance.weiRaised()\n{ s: 1, e: 0, c: [ 0 ] }      <=== ?\n. @chuacw Thanks for insisting on the tests.\nI believe that now I really have a little better understanding of solidity.\nhttps://github.com/josoroma/ape/blob/master/tests/ApePreICO.test.js#L131\n./scripts/test.sh\nrm -fr build && truffle migrate --network development --reset --compile-all\ntruffle test tests/ApePreICO.test.js\n```\n*** Ape Token Wallet: 0x3b7634fe1dc8b07894143bc87f93d0a51b104e1f\nContract: PreICO\n Ape Token Account Address: 0xdc3a1689e6211d359bf906ff6ed0c603e93949a5\n PreICO Account Address: 0x0717a047e9c930afe59df9eb28bce816191be3e3\n==> Owner: 0x3b7634fe1dc8b07894143bc87f93d0a51b104e1f\n    \u2713 can get owner\n Ape Token Account Address: 0xdc3a1689e6211d359bf906ff6ed0c603e93949a5\n PreICO Account Address: 0x0717a047e9c930afe59df9eb28bce816191be3e3\n==> isUnstraustableAccount value: false\n==> isUnstraustableAccount value: true\n    \u2713 cannot call initialize from any other wallet\n Ape Token Account Address: 0xdc3a1689e6211d359bf906ff6ed0c603e93949a5\n PreICO Account Address: 0x0717a047e9c930afe59df9eb28bce816191be3e3\n    Tokens available 0\n    Initialized      false\n    WEI Raised       0\n==> isInitialized: false\n    \u2713 cannot get initialized (40ms)\n Ape Token Account Address: 0xdc3a1689e6211d359bf906ff6ed0c603e93949a5\n PreICO Account Address: 0x0717a047e9c930afe59df9eb28bce816191be3e3\n    Tokens available 0\n    Initialized      false\n    WEI Raised       0\n    \u2713 can get initial token balance (43ms)\n Ape Token Account Address: 0xdc3a1689e6211d359bf906ff6ed0c603e93949a5\n PreICO Account Address: 0x0717a047e9c930afe59df9eb28bce816191be3e3\n==> INITIAL_SUPPLY: 1e+26\n==> Successful transfer\n    \u2713 can transfer token to this account (73ms)\n Ape Token Account Address: 0xdc3a1689e6211d359bf906ff6ed0c603e93949a5\n PreICO Account Address: 0x0717a047e9c930afe59df9eb28bce816191be3e3\n    Tokens available 6e+24\n    Initialized      false\n    WEI Raised       0\n    \u2713 can get tokens after transfer\n Ape Token Account Address: 0xdc3a1689e6211d359bf906ff6ed0c603e93949a5\n PreICO Account Address: 0x0717a047e9c930afe59df9eb28bce816191be3e3\n    Tokens available 6e+24\n    Initialized      false\n    WEI Raised       0\n==> isInitialized: true\n    \u2713 can initialize (48ms)\n Ape Token Account Address: 0xdc3a1689e6211d359bf906ff6ed0c603e93949a5\n PreICO Account Address: 0x0717a047e9c930afe59df9eb28bce816191be3e3\n    Tokens available 6e+24\n    Initialized      true\n    WEI Raised       0\n==> isInitialized: false\n    \u2713 cannot initialize again after initialization (45ms)\n Ape Token Account Address: 0xdc3a1689e6211d359bf906ff6ed0c603e93949a5\n PreICO Account Address: 0x0717a047e9c930afe59df9eb28bce816191be3e3\n    Tokens available 6e+24\n    Initialized      true\n    WEI Raised       0\n==> Tokens available 5.997e+24\n==> Initialized      true\n==> WEI Raised       1000000000000000000\n    checkBalanceToken     105469346500000000000\n    checkBalancePurchases 86584088200000000000\n    \u2713 can buy tokens (109ms)\n Ape Token Account Address: 0xdc3a1689e6211d359bf906ff6ed0c603e93949a5\n PreICO Account Address: 0x0717a047e9c930afe59df9eb28bce816191be3e3\n    Tokens available 5.997e+24\n    Initialized      true\n    WEI Raised       1000000000000000000\n==> Tokens available 5.985e+24\n==> Initialized      true\n==> WEI Raised       5000000000000000000\n    checkBalanceToken     109469346500000000000\n    checkBalancePurchases 82578813300000000000\n    \u2713 can buy tokens one more time (109ms)\n10 passing (579ms)\n```. ",
    "inflector": "Here is a reproducible case of contracts (with \"build\" directory) which have the problem, in case you don't have any:\ntruffle bug.zip\nRunning python3 py/test_agent_functions.py will give you the error.\nCalling rm -rf build then truffle migrate will fix it.\nI had recently added a return type to a function after getting an error from a missing returns clause when I got the dreaded argument count mismatch problem.. I have encountered this problem two times in the last couple of days. Can't pin down the cause yet. Next time I have it I will package up the contracts and build folders for the devs.... ",
    "Vourhey": "I'm having the same error! Still no response? \nas OP said compile works fine, but it's impossible to publish \nKubuntu 16.04\nTruffle v4.0.4 (core: 4.0.4)\nSolidity v0.4.18 (solc-js). ",
    "frangio": "We're getting the same error in the OpenZeppelin repository. It started happening around version 1.4.0.\nDoes anyone from the Truffle team have any clue as to what could be happening?. When trying to publish OpenZeppelin itself. Can you try running truffle publish on the OpenZeppelin/zeppelin-solidity repo on your machine and see if that fails?. @cgewecke Thanks to you for the quick response as always! \u2665\ufe0f. @cgewecke Any plans to get that patch release out soon? :slightly_smiling_face: . Monday sounds good!. @cgewecke This hasn't fixed the vulnerability warnings because they come from truffle-core, not from truffle itself. :crying_cat_face: \nhttps://github.com/trufflesuite/truffle-core/blob/1a6046a1da14d6d19acd335d0c4789dd0ee5607f/package.json#L22\nhttps://github.com/trufflesuite/truffle/blob/495f8d0675e05b970ffa0a5f8db7c4377d629bd0/yarn.lock#L6935-L6936\nIn fact, it's only a devDependency of truffle, and it is a proper dependency of truffle-core. So this only updated the Mocha version used to test Truffle itself.. @cag Nice!! I can't believe I hadn't seen this. Very cool. We can close this issue then.. ",
    "takageRoshi": "hello, i have been dealing with this for a while also, and have asked about this on gitter. \ni am getting the \n\"\"before all\" hook: prepare suite: Error: Could not find artifacts\" \nregardless if i test all or a specific file. \nI have been following along with the truffle framework pet shop tutorial, \nrunning a windows 10\nTruffle v4.1.5\nganache-cli/ganache-gui\nnode v8.10.0\nnpm v5.6.0\nwas wondering if i should even pursue this anymore? or is the problem for much smarter people to solve soewhere in the depths of the EVM?. ",
    "aligokalppeker": "This truffle framework is total bullshit, with release 4.1.5 it is not possible to even apply the tutorials correctly. It does not ease the work of the developers.. ",
    "clesaege": "It seems to be fixed now. Anyone still having the issue?. Yeah, this came back to me once. Now it seems to appear randomly (before it was systematic).. ",
    "AndyWatt83": "I still see this occasionally. I've not been able to reliably reproduce.. ",
    "animesharya": "Truffle Version 3.4.6. Thanks Keith, I will try this and let you know the result.\nThanks\nAnimesh Arya\nOn 20 Dec 2017 2:49 a.m., \"Keith Holliday\" notifications@github.com wrote:\n\nThis solved the problem for me. I think in previous Truffle version the\ndevelopment network was there by default? If not, there is a comment in the\nfile\n// See http://truffleframework.com/docs/advanced/configuration\n  // to customize your Truffle configuration!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/704#issuecomment-352889599,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AgdT0ZCgwYlJxrU9n51FHAId4ZxK9CJxks5tCCh4gaJpZM4Q4UDT\n.\n. \n",
    "pabloruiz55": "Have you specified a network on truffle.js?\nAdd the following to truffle.js to deploy locally to testrpc (First run testrpc on another console tab):\nmodule.exports = {\n  networks: {\n    development: {\n      host: \"localhost\",\n      port: 8545,\n      network_id: \"*\", // Match any network id\n      gas: 4500000\n    }\n  }\n};\n. The problem is that you haven't marked your function as view/constant in solidity, so when you do await instance.getSlots(.....) without the .call(), Truffle assumes it is a transaction that intends to modify the state, so it executes it and gives you the transaction hash instead of the return value.\nadding \"view\" to function getSlots() should fix it.\nfunction getSlots() public view returns (uint[]) {\n...\n}\nor probably, calling the function like this:\nvar balanceArray = await instance.getSlots.call({from: accounts[0]});\n    console.log(balanceArray);. ",
    "TheHollidayInn": "This solved the problem for me. I think in previous Truffle version the development network was there by default? If not, there is a comment in the file\n// See <http://truffleframework.com/docs/advanced/configuration>\n  // to customize your Truffle configuration!. ",
    "ellaty": "I have the same problem , \nmy truffle.js looks like this\nmodule.exports = {\n  networks: {\n    development: {\n      host: \"localhost\",\n      port: 8545,\n      network_id: \"*\", // Match any network id\n      gas: 4500000\n    }\n  }\n};. ",
    "scherrey": "That fixes it. Thanx!. ",
    "rahul-ki": "Similar problem is faced with string\nWe have to use bytes32 instead.. ",
    "sidsaha": "Unfortunately, uint32 doesn't work!. ",
    "thevaleriemack": "The solution above did not work when using bytes. @scherrey requesting to reopen this\n\n. ",
    "ann-kilzer": "It works when I use uint(X), but doesn't work when I use uint8(X). Is there ambiguity between uint8 and bytes?. ",
    "mikegg89": "by any chance did you find a solution to this?. ",
    "facuspagnuolo": "Sadly  not @mikegg89. Thanks for your response @cgewecke! If your planning to release Truffle V5 soon, I think it would be better to point to next, do you agree?. ",
    "jorgeog96": "You\u00b4re right using the second way can work without problems: \n    var balanceArray = await ovxet.getSlots.call();\n    console.log(balanceArray.toString());\n\nDon\u00b4t forget to add the .toString() to handle the BigNumber\u00b4s...\nAnd also I\u00b4ve change the state of the mapping BalanceOf to public. \nThanks!!. ",
    "olekon": "I have the same issue.\nI also noticed one interesting thing. If you deploy several contracts in one migration file synchronously, i.e\nawait deployer.deploy(contract1)\nawait deployer.deploy(contract2)\nawait deployer.deploy(contract3)\nthen it updates only contract1 json file.\nHowever, if you rewrite it with Promise chain\ndeployer.deploy(contract1).then(function() {\n  return deployer.deploy(contract2).then(function() {\n    return deployer.deploy(contract3).then(function() {\n        //do something else\n      })\n  })\n})\nthen all 3 JSON files are updated with valid addresses\nI am using \nTruffle v4.0.4 (core: 4.0.4)\nSolidity v0.4.18 (solc-js)\nEthereumJS TestRPC v4.1.3 (ganache-core: 1.1.3). ",
    "jleeh": "Ahh, I recently migrated to use ES7 in my truffle scripts, so it sounds like that's the root cause? \nEDIT: Thanks @olekon, that fixed it. Closing.. Having the exact same issue also on geth 1.8.0-unstable. Was rectified by using geth 1.7.3.. @cgewecke I've updated truffle to 4.1.3, debugger is at 4.0.2 and I'm getting a different, but similar error (looks same as #998):\nredux-saga error: uncaught at session.saga\nat session.saga\n TypeError: Cannot destructure property `sourcePath` of 'undefined' or 'null'.\n    at recordSources (/usr/lib/node_modules/truffle/build/webpack:/packages/truffle-debugger/dist/debugger.js:3445:36)\n    at recordSources.next (<anonymous>)\n    at session.saga (/usr/lib/node_modules/truffle/build/webpack:/packages/truffle-debugger/dist/debugger.js:3370:1)\n    at saga.next (<anonymous>)\n    at next (/usr/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/proc.js:311:1)\n    at currCb (/usr/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/proc.js:388:1)\n    at /usr/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/proc.js:499:1\n    at exec (/usr/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/scheduler.js:19:1)\n    at flush (/usr/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/scheduler.js:60:1)\n    at asap (/usr/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/scheduler.js:33:1)\n    at Array.<anonymous> (/usr/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/channel.js:185:1)\n    at Object.emit (/usr/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/channel.js:26:1)\n    at Object.dispatch (/usr/lib/node_modules/truffle/build/webpack:/~/redux-saga/es/internal/middleware.js:67:1)\n    at new Session (/usr/lib/node_modules/truffle/build/webpack:/packages/truffle-debugger/dist/debugger.js:2157:1)\n    at /usr/lib/node_modules/truffle/build/webpack:/packages/truffle-debugger/dist/debugger.js:2007:1\n    at Generator.next (<anonymous>)\n    at step (/usr/lib/node_modules/truffle/build/webpack:/~/babel-runtime/helpers/asyncToGenerator.js:17:1)\n    at /usr/lib/node_modules/truffle/build/webpack:/~/babel-runtime/helpers/asyncToGenerator.js:35:1\n    at new Promise (<anonymous>)\n    at new F (/usr/lib/node_modules/truffle/build/webpack:/~/core-js/library/modules/_export.js:36:1)\n    at /usr/lib/node_modules/truffle/build/webpack:/~/babel-runtime/helpers/asyncToGenerator.js:14:1\n    at Function.forTx (/usr/lib/node_modules/truffle/build/webpack:/packages/truffle-debugger/dist/debugger.js:2016:6)\n    at /usr/lib/node_modules/truffle/build/webpack:/packages/truffle-core/lib/commands/debug.js:69:1\n    at <anonymous>\n    at process._tickDomainCallback (internal/process/next_tick.js:228:7)\nIs there any quick hack I could do to get this to work? Not sure if it's anything to do with my local setup? I thought it could be related to having truffle installed globally and truffle-debugger not. I installed truffle in the package scope with debugger and got the same.. Just tried that @HarryR and it got further as I saw a debug_traceTransaction, but got a different error:\nredux-saga error: uncaught at session.saga\nat session.saga\n at recordInstance\n TypeError: Cannot destructure property `context` of 'undefined' or 'null'.\n    at Object.addInstance (/mnt/d/dev-gitlab/staking-dapp/node_modules/truffle-debugger/dist/lib/evm/sagas/index.js:35:1)\n    at addInstance.next (<anonymous>)\n    at recordInstance (/mnt/d/dev-gitlab/staking-dapp/node_modules/truffle-debugger/dist/lib/session/sagas/index.js:121:1)\n    at recordInstance.next (<anonymous>)\n    at next (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/proc.js:322:27)\n    at currCb (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/proc.js:399:7)\n    at runSelectEffect (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/proc.js:710:7)\n    at runEffect (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/proc.js:446:761)\n    at next (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/proc.js:326:9)\n    at proc (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/proc.js:281:3)\n    at resolveIterator (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/proc.js:467:5)\n    at runCallEffect (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/proc.js:528:98)\n    at runEffect (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/proc.js:446:402)\n    at /mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/proc.js:655:14\n    at Array.forEach (<anonymous>)\n    at runAllEffect (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/proc.js:654:10)\n    at runEffect (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/proc.js:446:249)\n    at next (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/proc.js:326:9)\n    at currCb (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/proc.js:399:7)\n    at checkEffectEnd (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/proc.js:623:9)\n    at chCbAtKey (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/proc.js:638:11)\n    at Object.currCb [as cb] (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/proc.js:399:7)\n    at /mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/proc.js:369:16\n    at Array.forEach (<anonymous>)\n    at end (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/proc.js:368:18)\n    at Object.task.cont (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/proc.js:110:11)\n    at next (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/proc.js:332:35)\n    at currCb (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/proc.js:399:7)\n    at takeCb (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/proc.js:477:108)\n    at Object.put (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/channel.js:85:16)\n    at /mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/channel.js:173:10\n    at Array.<anonymous> (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/channel.js:194:9)\n    at Object.emit (/mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/channel.js:38:13)\n    at /mnt/d/dev-gitlab/staking-dapp/node_modules/redux-saga/lib/internal/middleware.js:73:21\nI did the same thing as you mentioned and dumped the sources from the debugger, and there was 3 undefined entries at the top. After cross checking what was included and wasn't, it was the bang same as you:\n- ERC677.sol\n- ERC20.sol\n- ERC20Basic.sol\nI have interfaces in my own contracts and they're completely fine. I can't see any difference between the token contracts and my own that'd cause anything like this.. I've fixed my own issue! \nWeirdly, the sourcePath being undefined was completely fixed when I moved the ERC contracts into a std folder, deleted build and migrated them again. Proved this as I left the console output of the sources, and the 3 entries I had at the top had gone, with ERC 20, Basic and 677 appearing in the list.\nAlthough like @HarryR said, when I dumped the contexts there were no binaries for any of the Interfaces, including my own. \nFor it to work after I got the above error, I edited debugger.js at line 4523 and performed a check to see if the binary was empty (0x0). As when it was doing a binary search it was returning nothing. So the addInstance method in my debugger.js now looks like this:\n```js\nfunction* addInstance(address, binary) {\n  let search = yield (0, _effects.select)(_selectors2.default.info.binaries.search);\n  if (binary != \"0x0\") {\n   let { context } = search(binary);\nyield (0, _effects.put)(actions.addInstance(address, context, binary));\n\nreturn context;\n\n}\n}\n```\nNow:\n```\nLinkPool.sol:\n8: import \"./interface/NodeFactoryInterface.sol\";\n 9:\n10: contract LinkPool is Ownable {\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\ndebug(development:0x9bba8f3f...)>\n```\n\ud83c\udf89 . I recently reset my main dev machine and started seeing the same issue with our projects locally installed truffle, although the globally installed truffle was fine.\nProject local truffle (seeing debugger issue):\n```\n\n./node_modules/.bin/truffle version\nTruffle (unbundled) (core: 4.1.15)\nSolidity v0.4.24 (solc-js)\n```\n\nGlobal truffle (worked):\n```\n\ntruffle version\nTruffle v4.1.15 (core: 4.1.15)\nSolidity v0.4.25 (solc-js)\n```\n\nIn our package.json, I then seen we was including specific truffle deps which caused the truffle version to be unbundled:\n\"truffle\": \"^4.1.14\",\n\"truffle-contract\": \"^1.1.8\",\n\"truffle-debug-utils\": \"^1.0.6\",\n\"truffle-debugger\": \"^4.0.2\",\nI changed that to just:\n\"truffle\": \"^4.1.15\"\nRe-ran install then got:\n```\n\n./node_modules/.bin/truffle version\nTruffle v4.1.15 (core: 4.1.15)\nSolidity v0.4.25 (solc-js\n```\n\nThen re-ran ran the debugger and it was all good:\n```\nGathering transaction data...\nAddresses affected:\n 0x2612af3a521c2df9eaf28422ca335b04adf3ac66 - NodeStaking\n 0xdf9fd2e8cf22f173168f320172bbbb29f6d6b011 - PoolStorage\n 0xca24282be001a428d27fdac4676561c2eb1de393 - PoolStorage\n 0x9b1f7f645351af3631a656421ed2e40f2802e6c0 - PoolOwners\n 0xcfeb869f69431e42cdb54a4f4f105c19c080a601 - LinkToken\nCommands:\n(enter) last command entered (step next)\n(o) step over, (i) step into, (u) step out, (n) step next\n(;) step instruction, (p) print instruction, (h) print this help, (q) quit\n(b) toggle breakpoint, (c) continue until breakpoint\n(+) add watch expression (+:<expr>), (-) remove watch expression (-:)\n(?) list existing watch expressions\n(v) print variables and values, (:) evaluate expression - see v\nLinkToken.sol:\n217: }\n218:\n219: contract LinkToken is StandardToken, ERC677Token {\n     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\ndebug(development:0x10bd84b0...)>\n```\nSo if you see your truffle version as unbundled, remove any extra truffle deps in your package.json, or any extra deps that are globally installed and that should fix it.. I use the truffle-hdwallet-provider-privkey, along with nonce-tracker to avoid issues with load-balanced clients. See my snippet of my truffle.js:\n```js\nconst Web3Utils = require('web3-utils');\nconst HDWalletProvider = require(\"truffle-hdwallet-provider-privkey\");\nconst NonceTrackerSubprovider = require(\"web3-provider-engine/subproviders/nonce-tracker\");\nmodule.exports = {\n  web3Utils: Web3Utils,\n  networks: {\n    ropsten: {\n      provider: () => {\n        let wallet = new HDWalletProvider(\n          \"\", \n          \"\"\n        );\n        let nonceTracker = new NonceTrackerSubprovider();\n        wallet.engine._providers.unshift(nonceTracker);\n        nonceTracker.setEngine(wallet.engine);\n        return wallet;\n      },\n      network_id: 3,\n      gas: 4700000,\n      gasPrice: 30000000000,\n    }\n  },\n  solc: {\n    optimizer: {\n      enabled: true,\n      runs: 200\n    }\n  }\n};\n``\nEDIT: Using a nonce tracker is ideal for when running against clients like Infura for example. But if you're just using your own single client, just return theHDWalletProvider`.. I tried with Truffle v5 and got the same error I mentioned in the original issue. I'm going to close this issue as I think it's deps problem rather than an actual one, then I just ran single TX's rather than batching. Thanks for the help though @gnidan . ",
    "Oxyaction": "Had the same issue with code \nawait deployer.deploy(Registry);\nconst registry = await Registry.deployed()\nawait deployer.deploy(Store, registry.address);\nwhen refactored to \ndeployer.deploy(Registry)\n  .then(() => Registry.deployed())\n  .then(registry => deployer.deploy(Store, registry.address))\nworks fine, thanks a lot @olekon . ",
    "terraflops": "Is there a reason for this? Is it a bug or intended behavior? I'm experiencing this issue, except that I deploy my contracts across multiple migration scripts; the workaround effectively makes me put everything in one migration script. I'm running Truffle v4.0.5.\nEDIT:\nEven that doesn't work. I get the same issue; Truffle prints out the addresses of the relevant contracts, but still doesn't store them in the JSON. Running ContractName.deployed() from the console gives the network/artifact mismatch stuff.. Sure. My project is rather complicated, but I've made a new Truffle project that exactly duplicates the aforementioned problem. Running truffle migrate --reset (I switched to ganache-cli@6.0.3 as the GUI kept crashing.) gives the output in output.txt. As usual, Derived1.deployed(), Derived2.deployed(), Derived3.deployed(), and Dummy1.deployed() all fail, while Required.deployed() and Data.deployed() succeed.\nEntire project zip:\nExample.zip\nGist with the source files:\nhttps://gist.github.com/terraflops/aeb116dd99ac005aeba9216aabb47518\nI should note that this is what I've tried as well:\n```\nvar Data = artifacts.require(\"Data\");\nvar Required = artifacts.require(\"Required\");\nvar Derived1 = artifacts.require(\"Derived1\");\nvar Derived2 = artifacts.require(\"Derived2\");\nvar Derived3 = artifacts.require(\"Derived3\");\nvar Dummy1 = artifacts.require(\"Dummy1\");\nmodule.exports = function(deployer) {\n    deployer.deploy(Data).then(() => {\n        deployer.deploy(Required).then(() => {\n            Data.deployed().then((instance) => {\n                deployer.deploy(Derived1, instance.address).then(() => {\n                    deployer.deploy(Derived2, instance.address).then(() => {\n                        deployer.deploy(Derived3, instance.address).then(() => {\n                            deployer.deploy(Dummy1).then(() => {\n                                console.log(\"Everything deployed!\");\n                            });\n                        });\n                    });\n                });\n            });\n        });\n    });\n};\nwhich yields:\nUsing network 'development'.\nRunning migration: 1_initial_migration.js\n  Replacing Migrations...\n  ... 0xe97aedb960ea6ee9b5e5e49b23015c0f5a9de2cd7f4152f1be166cc1be309b52\n  Migrations: 0x6dad1ce8b53b7874758cba8bcd55f74bbf31c7e1\nSaving successful migration to network...\n  ... 0x64ca1f20ca192228941cf20707c91a1ca301ebde9836f5656569897275f4e814\nSaving artifacts...\nRunning migration: 2_deploy_everything.js\n  Replacing Data...\n  ... 0xe863e25bb76c5626447ecf0e6a95b54c5dcd360da7afb4cef8b922c75f3005a4\n  Data: 0x9bb46d630530ad89ce605e95c67be90e62ad1abf\nSaving successful migration to network...\n  Deploying Required...\n  ... 0xfca77ef29d8d4963e7dee1b7a3317372be5ca932c7720cf9014ce610bb285bd2\nSaving artifacts...\n  ... 0x06ea2521163cfa7d4ae4e20a1a2fbcf0e93125f2d3cf4cfdfc0a20bd94b950f0\n  Required: 0xfa1d3644a77fc3828cd5f122bae2e5039e90638f\n  Deploying Derived1...\n  ... 0x7b457b4d1be29affe50619b935558168aeb095c1419727fb3af1595ad7f3e979\n  Derived1: 0x96dc4f0a895f3b89d01c4a3eb8ff7d1345b63873\n  Deploying Derived2...\n  ... 0x57a90eb220d5caa63e818ac407e61b27f0cc28e89684409bf46d9726f950fdf4\n  Derived2: 0x944ac21dec65a4c9bc86c76c01e3f893bd1a305a\n  Deploying Derived3...\n  ... 0x8e493551522d97b277366999e8d7f035c1c28c5b4452bbda24a2f3e2bf859f9f\n  Derived3: 0xf193bfd04e57b150931a7c64310481dda1b7f5a9\n  Deploying Dummy1...\n  ... 0x766f176c29254344c3015c929295f98d5eef78d529e9cdb6fdb357639e16f23c\n  Dummy1: 0x5f3071e9b439a58802828a34d742559c628037ca\nEverything deployed!\n```\nbut none of the Derived or Dummy1 contracts work.\n. This worked. It's unintuitive behavior that Truffle doesn't record the addresses, but also doesn't this go against the standard JavaScript promises in which this type of chaining is optional?. ",
    "mjhm": "Me too. I would swear that this was working in Truffle v4.0.4.. FYI I recently wrote create-react-dapp which is intended to take a more up-to-date approach to creating starter templates.. ",
    "bulgakovk": "Had the same issue. Rewriting migrations with Promises fixed my problem.. Also be careful with using Promise.all(). Rewriting with then helps me.. ",
    "ZitRos": "This issue needs to be reopened, as the behavior of smart contracts deployment is different when using ES7 async/await syntax, which is totally unexpected. The latest version of Truffle still has this issue.. @cgewecke should we open a new issue for this case? I will consider it pretty critical but possibly not as simple to fix. Thank you!\n\nthe behavior of smart contracts deployment is different when using ES7 async/await syntax, which is totally unexpected. The latest version of Truffle still has this issue.\n\n. @cgewecke, I appreciate your work, thank you for sharing notes on this.\nI've checked the truffle code, the issue seems to be very trivial. Looks like we just need to await on the [possible] promise returned from fn, because finish() runs synchronously afterwards.\nIf you would like I can make a PR fixing this.. @cgewecke, of course NodeJS 6.9.1 doesn't supports await but promises. await is nothing more than promise.then(...) baked in a prettier way. So I mean here you can put something like:\njavascript\nlet result = fn(deployer, options.network, accounts);\nif (result && typeof result.then === \"function\") {\n  result.then(() => finish()).catch(() => \"...\");\n} else {\n  finish();\n}\n...instead of calling finish() synchronously after the exported fn finishes. And this will eventually wait until the returned promise (async function) resolves. I'll take a look. @cgewecke, another thing I wanted to catch here right away is that any exceptions thrown in fn doesn't prevent migration from its successful completion, which is also a strange behavior. Do you agree we need to fix this as well? (make the whole migration fail if any exceptions are thrown). @ahester57, I guess it may happen because you missed return statement on line 6 of your example code. Does it? (return Token.deployed()....). @ahester57, I guess that internally, in Truffle, deployer.deploy(Token) returns the promise, and Truffle waits until this promise resolves. Once it resolves, Truffle continues its pipeline.\nThus, by returning undefined from then callback the promise resolves almost immediately and doesn't wait until the nested promise resolves.\nI guess that the reason of why your code may work during the deployment to the real network is simply because of the delays during deployment (like saving successful migration to the network). Before terminating the process (which in tests happens immediately after promise resolves) transaction gets successfully published to the network.. Hello!\nWe highly need this PR accepted! In particular, the new compiler supports some syntax (like emit EventName(...)) and optimizations which we need to use as soon as possible.\nAlso, what do you think about making solc an external (replaceable) dependency somehow, to not to update it each time a new version is released? Some kind of configurable optional value in truffle.js for example.\nThank you!. > This should be possible soon.\nGreat, thank you @cgewecke!. ",
    "klivin": "I had removed all references to await in my migration file, converted to promises, but I was still getting the issue where only libraries were getting an address field in their networks...\nWhat fixed it for me was removing all references to async in the file!. ",
    "ahester57": "This is occurring when running truffle test. I believe it is because of the testing \"clean-room\" environment.\n```solidity\nconst Contract1 = artifacts.require(\"./Contract1.sol\");\nconst Token = artifacts.require('./Token.sol');\nmodule.exports = function(deployer) {\n    deployer.deploy(Token).then(() => {\n        Token.deployed().then((instance) => {\n           return instance;\n        }).then((token) => {\n      deployer.deploy(Contract1, token.address);\n    });\n    })\n};\nThe above works fine when deploying to a chain, buttruffle test``` does not seem to want to wait\nfor the promises to be resolved.  \nI can run tests successfully by giving the test the deployed address.\nsolidity\n  // Instead of \n  Contract1.deployed()\n  // say\n  Contract1.at(\"0x36a8054476cef7d35251fae816f87e09a49e7e43\")\n  .then((instance) => console.log);\nThe above will display the contract and tests will pass, but the clean-room environment is thus rendered unused.\n. @ZitRos, Now that is something which simply ruins a night. I had to add returns before Token.deployed() and the second deployer.deploy() for tests to work.\nMy question: Why? Why does the migration work fine but the test suite not pick these up?. @hickscorp After trying lots of stuff, I got it past migration successfully by running miner.start() on the node that I am deploying the contract on. This seems to solve this issue.. @hickscorp This is actually on 1.7.3-stable as well. When deploying a newly initialized contract using truffle, it stalls right at the first migration, unless the node is mining. . @marshaln The fix for this is not to downgrade. The fix is to be mining on\nthe node you're migrating to. I had some backlash after I suggested this\nearlier since it's a separate issue, but it is the only way I am able to\nmigrate contracts successfully to geth. Some people may not know you have\nto be mining, and if this isn't true, then please provide some evidence\nthat we are able to deploy a contract on a light node.\nOn Feb 24, 2018 00:22, \"marshaln\" notifications@github.com wrote:\n\nPls suggest what is fix for this am also using Geth 1.8.1 and Truffle\n4.0.6.\nContracts are deploying but .json file is not updated in build/contracts\nfolder.\nError encountered, bailing. Network state unknown. Review successful\ntransactions manually.\nError: unknown transaction\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/721#issuecomment-368204272,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ARya1fVjFCRGGVJbZ7FhDFNcBM0cgfCVks5tX6qSgaJpZM4RDt8z\n.\n. @JohnAllen Downgrading is two steps backward, in my opinion. . Confirmed working with geth 1.8.1 on a non-mining node as well. No more\nthrowing 'network unknown.'\n\nOn Mar 5, 2018 11:54, \"c-g-e-w-e-k-e->\" notifications@github.com wrote:\n\nSmall update: This is fixed at Geth as well as of 1.8.2 (released this\nmorning). Geth no longer errors with 'unknown transaction'.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/721#issuecomment-370505164,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ARya1SjB5CJcpH5Fd8i2n43gBLtgAP1sks5tbXvIgaJpZM4RDt8z\n.\n. This is still an issue using Truffle 4.1.7 and geth 1.8.6.\n\nIt just started happening today. All my contracts, and I mean all, are now not deploying or testing. They work with Ganache, but Ganache is useless except for testing.. @cgewecke I solved the issue by deleting all of the chain data and re-initialized the whole (private) chain. Truffle config just has development with normal everything, gas set slightly below what geth told me was the gas limit. It was working fine until I started an npm server running a Dapp, then it just stopped working even after a system reboot. \nSomething bad happened because of one of these actions. I could not tell you why at all. I wouldn't worry about it too much since it was such a specific issue.. @ashfaqnisar Does it deploy Migrations at all? Or just stuck after Migrations?\nNevermind, I see your trace above. It may have something to do with Azure. The issue I ran into was solved by reinstalling my blockchain client.. I did a truffle unbox react to start out with. This just appeared today after reinstalling the dependencies:\n```json\n\"devDependencies\": {\n    \"autoprefixer\": \"6.5.1\",\n    \"babel-core\": \"6.17.0\",\n    \"babel-eslint\": \"7.1.1\",\n    \"babel-jest\": \"17.0.2\",\n    \"babel-loader\": \"6.2.7\",\n    \"babel-preset-react-app\": \"^2.0.1\",\n    \"case-sensitive-paths-webpack-plugin\": \"1.1.4\",\n    \"chalk\": \"1.1.3\",\n    \"connect-history-api-fallback\": \"1.3.0\",\n    \"cross-spawn\": \"4.0.2\",\n    \"css-loader\": \"0.26.0\",\n    \"detect-port\": \"1.0.1\",\n    \"dotenv\": \"2.0.0\",\n    \"eslint\": \"3.8.1\",\n    \"eslint-config-react-app\": \"^0.5.0\",\n    \"eslint-loader\": \"1.6.0\",\n    \"eslint-plugin-flowtype\": \"2.21.0\",\n    \"eslint-plugin-import\": \"2.0.1\",\n    \"eslint-plugin-jsx-a11y\": \"2.2.3\",\n    \"eslint-plugin-react\": \"6.4.1\",\n    \"extract-text-webpack-plugin\": \"1.0.1\",\n    \"file-loader\": \"0.9.0\",\n    \"filesize\": \"3.3.0\",\n    \"fs-extra\": \"0.30.0\",\n    \"gzip-size\": \"3.0.0\",\n    \"html-webpack-plugin\": \"2.24.0\",\n    \"http-proxy-middleware\": \"0.17.2\",\n    \"jest\": \"18.1.0\",\n    \"json-loader\": \"0.5.4\",\n    \"object-assign\": \"4.1.0\",\n    \"path-exists\": \"2.1.0\",\n    \"postcss-loader\": \"1.0.0\",\n    \"promise\": \"7.1.1\",\n    \"react-dev-utils\": \"^0.4.2\",\n    \"recursive-readdir\": \"2.1.0\",\n    \"strip-ansi\": \"3.0.1\",\n    \"style-loader\": \"0.13.1\",\n    \"truffle-contract\": \"^1.1.8\",\n    \"truffle-solidity-loader\": \"0.0.8\",\n    \"url-loader\": \"0.5.7\",\n    \"webpack\": \"1.14.0\",\n    \"webpack-dev-server\": \"1.16.2\",\n    \"webpack-manifest-plugin\": \"1.1.0\",\n    \"whatwg-fetch\": \"1.0.0\"\n  },\n  \"dependencies\": {\n    \"dotenv\": \"^2.0.0\",\n    \"growl\": \"^1.10.5\",\n    \"react\": \"^15.4.2\",\n    \"react-dom\": \"^15.4.2\",\n    \"react-router\": \"^4.2.0\",\n    \"truffle\": \"^4.1.8\"\n  },\n  \"jest\": {\n    \"collectCoverageFrom\": [\n      \"src//*.{js,jsx}\"\n    ],\n    \"setupFiles\": [\n      \"/config/polyfills.js\"\n    ],\n    \"testMatch\": [\n      \"/src//tests//*.js?(x)\",\n      \"/src//?(.)(spec|test).js?(x)\"\n    ],\n    \"testEnvironment\": \"node\",\n    \"testURL\": \"http://localhost\",\n    \"transform\": {\n      \"^.+\\.(js|jsx)$\": \"/node_modules/babel-jest\",\n      \"^.+\\.css$\": \"/config/jest/cssTransform.js\",\n      \"^(?!.\\.(js|jsx|css|json)$)\": \"/config/jest/fileTransform.js\"\n    },\n    \"transformIgnorePatterns\": [\n      \"[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$\"\n    ],\n    \"moduleNameMapper\": {\n      \"^react-native$\": \"react-native-web\"\n    },\n  \"babel\": {\n    \"presets\": [\n      \"react-app\"\n    ]\n  },\n  \"eslintConfig\": {\n    \"extends\": \"react-app\"\n  },\n```\nI'm not 100%, but growl seems to be the main offender.\n. The same issue with growl is also found in truffle > mocha > growl.\nbash\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                Manual Review                                 \u2502\n\u2502            Some vulnerabilities require your attention to resolve            \u2502\n\u2502                                                                              \u2502\n\u2502         Visit https://go.npm.me/audit-guide for additional guidance          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 critical      \u2502 Command Injection                                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Package       \u2502 growl                                                        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Dependency of \u2502 truffle                                                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Path          \u2502 truffle > mocha > growl                                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 More info     \u2502 https://nodesecurity.io/advisories/146                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 low           \u2502 Regular Expression Denial of Service                         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Package       \u2502 debug                                                        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Dependency of \u2502 truffle                                                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Path          \u2502 truffle > mocha > debug                                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 More info     \u2502 https://nodesecurity.io/advisories/534                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518. @cgewecke Thanks for the merge!  \nAlso, some extra info after further examination:\n\nUsing Node v8.11.1 and npm 6.0.0:\nbash\n$ truffle unbox react\n$ npm install\n$ npm audit\nResults in the vulnerabilities found above.\n\nUsing Node v9.11.1 and npm 6.0.0:\nbash\n$ truffle unbox react\n$ npm install\n$ npm audit\nShows only 1 moderate and 2 low vulnerabilities:\n```bash\nRun npm install url-loader@1.0.1 to resolve 1 vulnerability\nSEMVER WARNING: Recommended action is a potentially breaking change\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 moderate      \u2502 Regular Expression Denial of Service                         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Package       \u2502 mime                                                         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Dependency of \u2502 url-loader [dev]                                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Path          \u2502 url-loader > mime                                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 More info     \u2502 https://nodesecurity.io/advisories/535                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nRun npm install eslint-plugin-import@2.11.0 to resolve 1 vulnerability\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 low           \u2502 Regular Expression Denial of Service                         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Package       \u2502 debug                                                        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Dependency of \u2502 eslint-plugin-import [dev]                                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Path          \u2502 eslint-plugin-import > eslint-module-utils > debug           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 More info     \u2502 https://nodesecurity.io/advisories/534                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nRun npm update fsevents --depth 4 to resolve 1 vulnerability\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 low           \u2502 Prototype Pollution                                          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Package       \u2502 deep-extend                                                  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Dependency of \u2502 webpack [dev]                                                \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Path          \u2502 webpack > watchpack > chokidar > fsevents > node-pre-gyp >   \u2502\n\u2502               \u2502 rc > deep-extend                                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 More info     \u2502 https://nodesecurity.io/advisories/612                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```\n\nSo, either Node 9.x prevents these vulnerabilities, or Node 9.x is not as good at finding vulnerabilities.\n----. ",
    "haggins": "Hello guys,\nI'm not sure if my issue fits 100% into this topic. Let's see:\nI deploy ContractA via truffle and as a result, the contracts artifact contains its address. However, I've got a 2nd contract which is not deployed by truffle but within the ContracA's constructor:\nsolidity\n// ContractA\nconstructor() public {\n    contractB = new ContractB();\n}\nI prefer this method over single truffle deployments because it's about 1,000,000 gas cheaper (with Ganache - idk why). And as a side effect A owns B which is what I want. However, as a result, the ContracB's artifact DOES NOT contain it's address.\nThe question is: how can it be passed to Truffle so that Truffle will write it into the artifact?\njavascript\nmodule.exports = function(deployer, network, accounts) {\n  return deployer.deploy(ContractA).then(() => {\n    return ContractA.deployed();\n  }).then(async (contractAInstance) => {\n    const contractB = await contractAInstance.contractB();\n    // How to tell truffle about contractB?\n  });\n};\nEDIT: solved\n```javascript\nvar ContractA = artifacts.require(\"ContractA\");\nvar ContractB = artifacts.require(\"ContractB\");\nmodule.exports = function(deployer, network, accounts) {\n  return deployer.deploy(ContractA).then(() => {\n    return ContractA.deployed();\n  }).then(async (contractAInstance) => {\n    const contractB = await contractAInstance.contractB();\n    // Update artifact manually\n    ContractB.address = contractB;\n    ContractB.transactionHash = ContractA.transactionHash;\n  });\n};\n```. ",
    "aberger91": "I have a similar bug, trying to unbox pet-shop on Linux Mint\n/usr/local/lib/node_modules/truffle/build/cli.bundled.js:126223\nfunction VM (opts = {}) {\n                  ^\nSyntaxError: Unexpected token =\n    at exports.runInThisContext (vm.js:53:16)\n    at Module._compile (module.js:374:25)\n    at Object.Module._extensions..js (module.js:417:10)\n    at Module.load (module.js:344:32)\n    at Function.Module._load (module.js:301:12)\n    at Function.Module.runMain (module.js:442:10)\n    at startup (node.js:136:18)\n    at node.js:966:3. ",
    "elliotthill": "Same here, clean install of truffle:\nnpm install truffle -g\nthen \n```\ntruffle console --network rinkeby\n/usr/local/lib/node_modules/truffle/build/cli.bundled.js:126223\nfunction VM (opts = {}) {\n                  ^\nSyntaxError: Unexpected token =\n    at exports.runInThisContext (vm.js:53:16)\n    at Module._compile (module.js:373:25)\n    at Object.Module._extensions..js (module.js:416:10)\n    at Module.load (module.js:343:32)\n    at Function.Module._load (module.js:300:12)\n    at Function.Module.runMain (module.js:441:10)\n    at startup (node.js:140:18)\n    at node.js:1043:3\n```\nI fixed this by upgrading from node v4 to node v6.\n. Theres nothing to investigate? ES6 default function parameters are introduced in node 6 and above - so you either need to rework the code shown above to not use default function params or not support  node <6.. ",
    "reneras": "Investigating this.\n@mshadab-adeptia What node version are you running? Does upgrading to version 6 resolve the issue for you as well?. @elliotthill Thanks for the info. If something needs fixing, always investigate by collecting the facts.. ",
    "mshadab-adeptia": "@reneras @elliotthill these are the versions installed,\n$ node -v\nv9.3.0\n$ npm -v\nNode.js version v9.3.0 is not supported. Agent disabled.\nNode.js version v9.3.0 is not supported. Agent disabled.\nAgent already injected - exiting\n5.6.0\nCould you please share commands to upgrade, if still needed?. ",
    "Xaber20110202": "I tried a way is like that:\n./node_modules/ts-node/dist/bin.js /Users/XXXXX/.nvm/versions/node/v9.3.0/bin/truffle migrate --network kovan\nJust use ts-node to run truffle.\nBut the specific thing is that truffle.js or truffle.config.js must be a js file.\nSo, we need to add a field allowJs: true to tsconfig.json. ",
    "leberknecht": "For the logs: \nThis is the way to change synchronization_timeout:\njs\nconst MyContract = artifacts.require('./MyContract.sol');\nMyContract.synchronization_timeout = 42; //timeout in seconds\n. ",
    "yograterol": "I have the same issue. It happens when Truffle tries to get the recipient of the transaction.. Fixed in this commit https://github.com/ethereum/go-ethereum/pull/15714/files. I'm still having this issue.. ",
    "drootnar": "I have the same problem. My contracts don't change but now migrations don't work with above error. Do you have any update of this issue?. ",
    "hqxluoyang": "same issue , who can help me. ",
    "skozin": "Having the same error inside our app when running on Rinkeby with Geth built from master.. ",
    "Artificial-Idiocy": "Having the same problem when deploying contracts to a private geth node built off 1.8.0-unstable. It fails after a response from the geth node.\nWhat is interesting is that if I only deploy 1_initial_migration.js without any other follow-up migrations, no error occurs.. ",
    "hickscorp": "@ahester57 Being able to get past it with an active mining process is a bi-product of something else.\nAs I was suggesting in my original post, using geth 1.7.3 solves this issue. Hopefully this will be fixed before 1.8 gets out.. @ahester57 Well that's not new, and unrelated to the issue here. \"Deploying\" is just asking for data to be mined. I'd recommend you having a look at this tool. This is what we use to have \"on-demand\" mining local nodes with 0-difficulty, so our CPU just doesn't get busy non-stop.. I'd like to emphasize something here, what @ahester57 said about this problem being present on 1.7 is erroneous, it's a completelly different thing he's describing, not even an error (No transaction can be mined... Unless the node is mining). The 1.8 problem is indeed not solved by mining.. @darioAnongba I think you might be confused here.\nIt works fine with Rinkeby. It just doesn't work with geth 1.8, those are two different things.\nYour question might instead be \"What I don't understand is why is it working fine with Ganache and not with Geth 1.8?\", and the answer would be that Geth is just an implementation of Ethereum, while Ganache is another, and while Ganache returns something that Truffle expects during the migrations as well as Geth 1.7, Geth 1.8 doesn't.\nTherefore, using Geth 1.7 you should get it to work regardless of the network you're deploying to.. @cgewecke Don't mention it. It's worth noting that I've started talking to the Geth devs, but I don't think it's a bug as per say, it's more likely a different behaviour that Truffle would have to accomodate for. Tell me if you need anything else.\nI would say that this now might need a bit of attention from the devs, as @starlabs007 pointed out 1.8 has been out for a small while now.\nKeep up the good work ;). I have this issue around 10% of my builds, with 128 tests active, randomly.\nThe tests are running on the default dummy node (Ganache?), with the latest version of Truffle.\nInterestingly enough, it only fails when built in our CI (Drone, dockerized), not locally.\nOur environments are based on Ubuntu and use standard docker NodeJS:Carbon images.. I'd like to bump this - to this day, we're not able to use Truffle with Parity in POA mode - it hangs forever at the migration step. (/cc @cgewecke). ",
    "marwand": "Same issue here. \nIssue exists with: geth-1.8.0-stable and truffle-4.0.6\nMiner.start()does not solve the problem.\ngeth-1.7.3 works fine.. ",
    "darioAnongba": "Same issue while trying to deploy on Rinkeby testnet with:\ngeth-1.8.0-stable\ntruffle-4.0.6\nWhat I don't understand is why is it working fine with Ganache and not with Rinkeby ?. Thanks @hickscorp ! So if I understand correctly, Truffle is just not compatible with geth 1.8 yet.. ",
    "starlabs007": "I'm encountering this issue as well. I've installed a private blockchain using geth 1.8 and am also encountering the unknown transaction error.\nCan this be given priority given 1.8 is now out? https://blog.ethereum.org/2018/02/14/geth-1-8-iceberg%C2%B9/\nSome additional notes:\n- I've been using truffle 3.4.11 (hadn't upgraded to v4.x yet) and also encountered the unknown transaction, so it seems there is some relative old/stable code that does not work with geth 1.8.\n- Verified also occurs with truffle 4.0.6 against geth 1.8. ",
    "vecheslav": "https://github.com/ethereum/go-ethereum/releases/tag/v1.8.1\ni think that nothing has changed?. ",
    "nicolasburtey": "Same issue for me. . ",
    "nakajo2011": "i think this to be helpful go-ethereum discussion:\nhttps://github.com/ethereum/go-ethereum/issues/16092. ",
    "kosnet2": "So now I am using geth 1.8 stable .\nHow to use geth 1.7 ?. ",
    "virtonomics": "You should checkout appropriate branch\n\ngit checkout origin/release/1.7\n\nand compile this one\n\nmake\n. \n",
    "lerer00": "Any plan to support new geth ^1.8? Or we need to rollback to ^1.7?. @cgewecke sweet thanks for the info.. @ahester57 There's a fix for this at truffle-contract 99 that should be released next Monday.. ",
    "OfStone": "How to roll back to 1.7.3?. @cgewecke https://docs.web3j.io/smart_contracts.html#smart-contract-wrappers\nI just managed to create the wrapper code. This is the problem now. I want to interact with my smart contract deployed on Ganache. Do you know if it possible? The method \" .load() \" wants five arguments, one of this is \"Credential\". To create credential i have to insert the path of the Ethereum wallet and the password; but Ganache' accounts have not password, and i don't need an Ethereum wallet.\n. ",
    "marshaln": "Pls suggest what is fix for this am also using Geth 1.8.1 and Truffle 4.0.6.\nContracts are deploying but .json file is not updated in build/contracts folder.\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: unknown transaction. ",
    "JohnAllen": "@marshaln Downgrade to 1.7.3 and watch this issue for when it's fixed. @ahester57 If you're mining on Ropsten with a CPU it might take a while to migrate/mine a tx, right?  Probably more than the timeout?  Mining also used to not be necessary and is wasteful on testnets.  So having to mine on a testnet instead of just connecting to a node to submit a tx or contracts seems to be a step backwards.. I'm sure they'll fix this, but not having to mine and run CPUs up (even with minerthreads 1) would be better.  Wondering why they made this change!. Yeah the ABI does not get updated with new contract code.  The source map DOES get updated, but not the ABI.. @gnidan had the same thought.  \nThe vast majority of deploys are not mainnet though, and many people determine the gas their contracts will cost during dev & testing and then hard code that gas number in truffle.js once they go to deploy to mainnet (to ensure they don't spend to much if something goes wrong).  I think the vast majority know the costs involved when deploying to mainnet, as they've likely just purchased an ether or so to deploy\nAlso it's easy to check that the user is not deploying to mainnet.\nQuite a few newcomers don't even know that the block gas limit has been raised twice, so their contracts won't deploy at 4.7m or 6.7m when they could have tried 8m in the first place.\n. ",
    "StDogbert": "Geth 1.8.1. Worked fine till yesterday. Error started appearing consistently for rinkeby and from time to time with ganache. Upgrade to 1.8.2 didn't fixed the issue.. ",
    "swordfishwjy": "Just test Truffle 4.0.6 and Geth 1.8.2-stable. Deployment now works. @ahester57 Yes, also keep mining.\ud83d\ude3c. ",
    "imhari213": "Upgrading  truffle@4.0.6 to + truffle@4.1.3  works for me \ud83d\udc4d . ",
    "hendrikkoetsier": "Problem solved!.  Thanks for  your assistance!. ",
    "leochan007": "if  i delete the \"2_deploy_contracts.js\" and compile and migrate again,  it will be ok.. ",
    "svantetobias": "I had similar problem. Solved it by editing 2_deploy_contracts.js to require and deploy the exact contracts I had written.. ",
    "vladyslav2": "Make sure you named your test as Test + contract name\nSo if you have a contracts/SECToken.sol\nMake sure you test named tests/TestSECToken.sol\nand I guess you have name your contract SECToken too. ",
    "kushan-gunasekera": "I got the same problem just now, but I solved it in this way.\n\n\nAfter your compilation, go to your_folder_location\\build\\contracts folder.\n\n\nThen you will see a JSON file which not related to your contract file.\n\n\nJust rename that JSON file same as your contract file. ( most probably that JSON file related your folder name )\n\n\nBut after that you can see the renamed file as well as the original file too, both files in same location. Don't worry.\n\n\nThat's it.. ",
    "snifhex": "\nI got the same problem just now, but I solved it in this way.\n* After your compilation, go to `your_folder_location\\build\\contracts` folder.\n\n* Then you will see a JSON file which not related to your contract file.\n\n* Just rename that JSON file same as your contract file. ( most probably that JSON file related your folder name )\n\n* But after that you can see the renamed file as well as the original file too, both files in same location. Don't worry.\n\nThat's it.\n\nI had a similar problem and I looked into it I got to know that truffle compile compiles the .sol file and generate new JSON file in build folder ./build/contracts/<name_of_contract_in_.sol_file>.json and this JSON file has the name of the contract not the name of .sol file.\nExample\nI create a test.sol file.\n```\npragma solidity ^0.5.0;\ncontract MyContract {\nuint id;\n\nfunction set(uint _id) public {\n    id = _id;\n}\n\n}\n```\nand now if I truffle compile it I will have ./build/contracts/MyContract.json\nand that was the problem for me all along was in 2_deploy_contracts.js file I was doing require the name of the .sol file say it test.sol for the sake of the example here but I had the same name for both contract and filename of .sol file but after looking into it I got to know that my contract name had a one extra letter it was misspelled and that's why I got the error.\nso by having same name for contract and its filename solved the problem for me.. ",
    "thomasyuan": "ping @gnidan . ",
    "PhABC": "This might want to be reconsidered @cgewecke . For instance, when using the evm_increaseTime feature, the timestamp of all subsequent blocks will be increased by the previous value, which makes testing timestamp based functionalities quite cumbersome. This is one example, but I am sure there are others. Ideally, one could have the option of starting from scratch if desired, even it less efficient.. ",
    "selfresonator": "I've seen people have this issue before, where either web3 or Solidity doesn't like that you are trying to mark your strings as indexed. There is discussion of this(https://ethereum.stackexchange.com/a/7170), but my problem is that my strings are not indexed, and I am still receiving this error.. Hopefully I'm not missing something painfully obvious here, especially since this is my first time open source GitHub issuing! Anyway:\nContract\n```\ncontract Elections is Ownable {\n  event SendElection(string name, string description);\nfunction getElection() public {\n    SendElection(electionList[0].name, electionList[0].description);\n  }\n}\nIn development console:\n\ncompile\nmigrate\nElections.at(\"0x2a50...\").createElection(\"Treasurer\", \"Run the Treasury!\");\nElections.at(\"0x2a50...\").getElection(function(result){return result})\nError that runs both through the client and the development console:\nBigNumber Error: new BigNumber() not a number: function (result){return result}\n    at raise (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:45276:25)\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:45264:33\n    at new BigNumber (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:44292:67)\n    at new BigNumber (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:44302:25)\n    at toBigNumber (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:8991:12)\n    at Object.toTwosComplement (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:9002:21)\n    at SolidityTypeAddress.formatInputInt [as _inputFormatter] (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:28380:38)\n    at SolidityTypeAddress.SolidityType.encode (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:32746:17)\n    at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:69251:29\n    at Array.map (native)\n```\n\nWhether I'm running this from the development console or a client, I shouldn't be getting this error. I should only receive a callback in my event listener for SendElection() with either an error or the event. Correct? I know the elections are there by checking the length of the electionsArray I store them in.. ",
    "v-lukanin": "Sorry, I still do not understand two moments:\n1. Why it works with no problem in NEthereum? The same blockchain is used.\n2. Why this behavior for dynamically sized solidity datatypes is expected according to text above? As far as I understood, solidity creates a hash for string arguments. Hash always has the same length so there should be no problem to have it indexed also. This explains why NEthereum works fine with same contract. For me it seems that discussed error is an inner truffle issue.. ",
    "Alonski": "This happens to me as well:\n```\nPS D:\\Projects\\Fun Stuff\\daostack> truffle develop\nTruffle Develop started at http://localhost:9545/\nAccounts:\n(0) 0x627306090abab3a6e1400e9345bc60c78a8bef57\n(1) 0xf17f52151ebef6c7334fad080c5704d77216b732\n(2) 0xc5fdf4076b8f3a5357c5e395ab970b5b54098fef\n(3) 0x821aea9a577a9b44299b9c15c88cf3087f3b5544\n(4) 0x0d1d4e623d10f9fba5db95830f7d3839406c6af2\n(5) 0x2932b7a2355d6fecc4b5c0b6bd44cc31df247a2e\n(6) 0x2191ef87e392377ec08e7c08eb105ef5448eced5\n(7) 0x0f4f2ac550a1b4e2280d04c21cea7ebd822934b5\n(8) 0x6330a553fc93768f612722bb8c2ec78ac90b3bbc\n(9) 0x5aeda56215b167893e80b4fe645ba6d5bab767de\nPrivate Keys:\n(0) c87509a1c067bbde78beb793e6fa76530b6382a4c0241e5e4a9ec0a0f44dc0d3\n(1) ae6ae8e5ccbfb04590405997ee2d52d2b330726137b875053c36d94e974d162f\n(2) 0dbbe8e4ae425a6d2687f1a7e3ba17bc98c673636790f1b8ad91193c05875ef1\n(3) c88b703fb08cbea894b6aeff5a544fb92e78a18e19814cd85da83b71f772aa6c\n(4) 388c684f0ba1ef5017716adb5d21a053ea8e90277d0868337519f97bede61418\n(5) 659cbb0e2411a44db63778987b1e22153c086a95eb6b18bdf89de078917abc63\n(6) 82d052c865f5763aad42add438569276c00d3d88a2d062d36b2bae914d58b8c8\n(7) aa3680d5d48a8283413f7a108367c7299ca73f553735860a87b08f39395618b7\n(8) 0f62d96d6675f32685bbdb8ac13cda7c23436f63efbb9d07700d8669ff12b7c4\n(9) 8d5366123cb560bb606379f90a0bfd4769eecc0557f1b362dcae9012b548b1e5\nMnemonic: candy maple cake sugar pudding cream honey rich smooth crumble sweet treat\ntruffle(develop)> test\nCompiling .\\contracts\\Migrations.sol...\nCompiling .\\contracts\\VotingMachines\\AbsoluteVote.sol...\nCompiling .\\contracts\\VotingMachines\\EmergentVoteScheme.sol...\nCompiling .\\contracts\\VotingMachines\\IntVoteInterface.sol...\nCompiling .\\contracts\\VotingMachines\\QuorumVote.sol...\nCompiling .\\contracts\\controller\\Avatar.sol...\nCompiling .\\contracts\\controller\\Controller.sol...\nCompiling .\\contracts\\controller\\DAOToken.sol...\nCompiling .\\contracts\\controller\\Reputation.sol...\nCompiling .\\contracts\\globalConstraints\\GlobalConstraintInterface.sol...\nCompiling .\\contracts\\globalConstraints\\TokenCapGC.sol...\nCompiling .\\contracts\\test\\ActionMock.sol...\nCompiling .\\contracts\\test\\Debug.sol...\nCompiling .\\contracts\\test\\ExecutableTest.sol...\nCompiling .\\contracts\\test\\GlobalConstraintMock.sol...\nCompiling .\\contracts\\universalSchemes\\ContributionReward.sol...\nCompiling .\\contracts\\universalSchemes\\ExecutableInterface.sol...\nCompiling .\\contracts\\universalSchemes\\GenesisScheme.sol...\nCompiling .\\contracts\\universalSchemes\\GlobalConstraintRegistrar.sol...\nCompiling .\\contracts\\universalSchemes\\OrganizationRegister.sol...\nCompiling .\\contracts\\universalSchemes\\SchemeRegistrar.sol...\nCompiling .\\contracts\\universalSchemes\\SimpleICO.sol...\nCompiling .\\contracts\\universalSchemes\\UniversalScheme.sol...\nCompiling .\\contracts\\universalSchemes\\UniversalSchemeInterface.sol...\nCompiling .\\contracts\\universalSchemes\\UpgradeScheme.sol...\nCompiling .\\contracts\\universalSchemes\\VestingScheme.sol...\nCompiling .\\contracts\\universalSchemes\\VoteInOrganizationScheme.sol...\nCompiling zeppelin-solidity/contracts/lifecycle/Destructible.sol...\nCompiling zeppelin-solidity/contracts/math/SafeMath.sol...\nCompiling zeppelin-solidity/contracts/mocks/StandardTokenMock.sol...\nCompiling zeppelin-solidity/contracts/ownership/Ownable.sol...\nCompiling zeppelin-solidity/contracts/token/BurnableToken.sol...\nCompiling zeppelin-solidity/contracts/token/MintableToken.sol...\nCompiling zeppelin-solidity/contracts/token/StandardToken.sol...\nCompiling zeppelin-solidity\\contracts\\math\\SafeMath.sol...\nCompiling zeppelin-solidity\\contracts\\ownership\\Ownable.sol...\nCompiling zeppelin-solidity\\contracts\\token\\BasicToken.sol...\nCompiling zeppelin-solidity\\contracts\\token\\ERC20.sol...\nCompiling zeppelin-solidity\\contracts\\token\\ERC20Basic.sol...\nCompiling zeppelin-solidity\\contracts\\token\\StandardToken.sol...\nContract: AbsoluteVote\n    \u221a Sanity checks (3485ms)\n    \u221a log the LogNewProposal event on proposing new proposal (1565ms)\n    \u221a should log the LogCancelProposal event on canceling a proposal (982ms)\n    \u221a should log the LogVoteProposal and LogCancelVoting events on voting and canceling the vote (1029ms)\n    \u221a should log the LogExecuteProposal event (1395ms)\n    \u221a All options can be voted (0-9) (2639ms)\n    \u221a Double vote shouldn't double proposal's 'Option 2' count (1205ms)\n    \u221a Vote cancellation should revert proposal's counters (1117ms)\n    \u221a As allowOwner is set to true, Vote on the behalf of someone else should work (1014ms)\n    \u221a As allowOwner is set to false, Vote on the behalf of someone else should NOT work (938ms)\n    \u221a if the voter is not the proposal's owner, he shouldn't be able to vote on the behalf of someone else (892ms)\n    \u221a Non-existent parameters hash shouldn't work (1085ms)\n    \u221a Invalid percentage required( < 0 || > 100) shouldn't work (2029ms)\n    \u221a Proposal voting or cancelling shouldn't be able after proposal has been executed (1180ms)\n    \u221a the vote function should behave as expected (1976ms)\n    \u221a cannot vote for another user (866ms)\n    \u221a Should behave sensibly when voting with an empty reputation system (333ms)\n    \u221a Should behave sensibly without an executable [TODO] execution isn't implemented yet (483ms)\n    \u221a Proposal with wrong num of options (876ms)\n    \u221a Test voteWithSpecifiedAmounts - More reputation than I own, negative reputation, etc.. (1139ms)\n    \u221a Internal functions can not be called externally (963ms)\n    \u221a Try to send wrong proposal id to the voting/cancel functions (1063ms)\n    \u221a 2 proposals, 1 Reputation system (1703ms)\n    as not proposal owner - vote for myself\n      \u221a vote \"Option 1\" then vote \"Option 2\" should register \"Option 2\" (1139ms)\n      \u221a vote \"Option 3\" then vote \"Option 4\" should register \"Option 4\" (1206ms)\n    as proposal owner - vote for another user\n      \u221a vote \"Option 1\" then vote \"Option 2\" should register \"Option 2\" (1163ms)\n      \u221a vote \"Option 3\" then vote \"Option 4\" should register \"Option 4\" (1015ms)\nContract: Avatar\n    \u221a genericAction no owner (466ms)\n    \u221a generic call (553ms)\n    \u221a pay ether to avatar (1282ms)\n    \u221a sendEther from  (2278ms)\n    \u221a externalTokenTransfer   (592ms)\n    \u221a externalTokenTransferFrom & ExternalTokenIncreaseApproval (648ms)\n    \u221a externalTokenTransferFrom & externalTokenDecreaseApproval (784ms)\nContract: ContributionReward\n    \u221a constructor (138ms)\n    \u221a setParameters (1422ms)\n    \u221a registerOrganization - check fee payment  (2066ms)\n    \u221a submitContribution log (1745ms)\n    \u221a submitContribution fees (1779ms)\n    \u221a submitContribution without registration -should fail (1371ms)\n    \u221a submitContribution check owner vote (1457ms)\n    \u221a submitContribution check beneficiary==0 (1716ms)\n    \u221a execute submitContribution  yes  (1778ms)\n    \u221a execute submitContribution  mint reputation  (1759ms)\n    \u221a execute submitContribution  mint tokens  (1519ms)\n    \u221a execute submitContribution  send ethers  (2403ms)\n    \u221a execute submitContribution  send externalToken  (2165ms)\n    \u221a execute submitContribution proposal decision=='no' send externalToken   (1932ms)\nContract: Controller\n    \u221a mint reputation via controller (667ms)\n    \u221a mint tokens via controller (633ms)\n    \u221a register schemes (606ms)\n    \u221a register schemes - check permissions for register new scheme (24778ms)\n    \u221a register schemes - check permissions for updating existing scheme (1408ms)\n    \u221a unregister schemes (646ms)\n    \u221a unregister none registered scheme (590ms)\n    \u221a unregister schemes - check permissions unregister scheme (20398ms)\n    \u221a unregister self (753ms)\n    \u221a isSchemeRegistered  (1787ms)\n    \u221a addGlobalConstraint  (1804ms)\n    \u221a removeGlobalConstraint  (2442ms)\n    \u221a upgrade controller  (945ms)\n    \u221a upgrade controller check permission (873ms)\n    \u221a generic call (887ms)\n    \u221a sendEther (2555ms)\n    \u221a externalTokenTransfer (1030ms)\n    \u221a externalTokenTransferFrom & ExternalTokenIncreaseApproval (1196ms)\n    \u221a externalTokenTransferFrom & externalTokenDecreaseApproval (1799ms)\n    \u221a globalConstraints mintReputation add & remove (1035ms)\n    \u221a globalConstraints mintTokens add & remove (1211ms)\n    \u221a globalConstraints register schemes add & remove (1071ms)\n    \u221a globalConstraints unregister schemes add & remove (1001ms)\n    \u221a globalConstraints generic call  add & remove (1551ms)\n    \u221a globalConstraints sendEther  add & remove (3490ms)\n    \u221a globalConstraints externalTokenTransfer  add & remove (1294ms)\n    \u221a globalConstraints externalTokenTransferFrom , externalTokenIncreaseApproval , externalTokenDecreaseApproval (2016ms)\nContract: DAOToken\n    \u221a should put 0 Coins in the first account (70ms)\n    \u221a should be owned by its creator (83ms)\n    \u221a should be destructible (87ms)\n    \u221a should mint tokens to owner account (7614ms)\n    \u221a should allow minting tokens only by owner (6067ms)\n    \u221a log the Mint event on mint (101ms)\n    \u221a mint should be reflected in totalSupply (220ms)\n    \u221a mint should be reflected in balances (110ms)\n    \u221a totalSupply is 0 on init (77ms)\n    \u221a burn (190ms)\n    onlyOwner\n      \u221a mint by owner (96ms)\n      \u221a mint by not owner (71ms)\nContract: GenesisScheme\n    \u221a founders should get their share in reputation and tokens (2426ms)\n    \u221a forgeOrg check avatar (383ms)\n    \u221a forgeOrg check reputations and tokens to founders (328ms)\n    \u221a forgeOrg check transfer ownership (405ms)\n    \u221a setSchemes log (391ms)\n    \u221a setSchemes from account that does not hold the lock (306ms)\n    \u221a setSchemes increase approval for scheme  (413ms)\n    \u221a setSchemes increase approval for scheme without fee (346ms)\n    \u221a setSchemes check register (359ms)\n    \u221a setSchemes check unregisterSelf (466ms)\n    \u221a setSchemes delete lock (373ms)\nContract: GlobalConstraintRegistrar\n    \u221a constructor (142ms)\n    \u221a setParameters (777ms)\n    \u221a registerOrganization - check fee payment  (1457ms)\n    \u221a proposeGlobalConstraint log (1580ms)\n    \u221a proposeGlobalConstraint without registration -should fail (1292ms)\n    \u221a proposeGlobalConstraint check owner vote (1269ms)\n    \u221a execute proposeGlobalConstraint  (1612ms)\n    \u221a proposeToRemoveGC log (1717ms)\n    \u221a proposeToRemoveGC without registration -should fail (1189ms)\n    \u221a proposeToRemoveGC check owner vote (1829ms)\n    \u221a execute proposeToRemoveGC  (2184ms)\n    \u221a execute proposeToRemoveGC (same as proposeGlobalConstraint) vote=NO  (1693ms)\nContract: Migrations\n    \u221a should have deployed entire DAOStack\nContract: OrganizationRegister\n    \u221a constructor (150ms)\n    \u221a setParameters (192ms)\n    \u221a registerOrganization - check fee payment  (1804ms)\n    \u221a addOrPromoteAddress add and promote  (2300ms)\n    \u221a addOrPromoteAddress add without enough fee should fail  (1163ms)\n    \u221a addOrPromoteAddress add  without regisration -should fail  (1266ms)\nContract: QuorumVote\n    \u221a Sanity checks (1451ms)\n    \u221a Quorum proposals should be executed when reaching the percentage required (1332ms)\n    \u221a Invalid inputs shouldn't work (precReq, vote) (6588ms)\n    \u221a All options can be voted (0-9) (2502ms)\n    \u221a Double vote shouldn't double proposal's 'Option 2' count (1068ms)\n    \u221a Vote cancellation should revert proposal's counters (1067ms)\n    \u221a As allowOwner is set to true, Vote on the behalf of someone else should work (2654ms)\n    \u221a As allowOwner is set to false, Vote on the behalf of someone else should NOT work (1128ms)\n    \u221a if the voter is not the proposal's owner, he shouldn't be able to vote on the behalf of someone else (1200ms)\n    \u221a Should not able to vote / cancel vote / proposal after proposal has been executed (1289ms)\n    \u221a Only the owner of the proposal can cancel it (1463ms)\n    \u221a log the LogNewProposal event on proposing new proposal (1231ms)\n    \u221a Should log the LogCancelProposal event on canceling a proposal (857ms)\n    \u221a Should log the LogVoteProposal and LogCancelVoting events on voting and canceling the vote (999ms)\n    \u221a Should log the LogExecuteProposal event on executing quorum proposal with 'no' decision (925ms)\n    \u221a cannot vote for another user (998ms)\n    \u221a Should behave sensibly without an executable [TODO] execution isn't implemented yet (458ms)\n    \u221a Test voteWithSpecifiedAmounts - More reputation than I own, negative reputation, etc.. (982ms)\n    \u221a Internal functions can not be called externally (2591ms)\n    \u221a Try to send wrong proposal id to the voting/cancel functions (1798ms)\nContract: Reputation\n    1) \"before all\" hook: prepare suite\nContract: SchemeRegistrar\n    2) \"before all\" hook: prepare suite\nContract: SimpleICO\n    3) \"before all\" hook: prepare suite\nContract: TokenCapGC\n    4) \"before all\" hook: prepare suite\nContract: UpgradeScheme\n    5) \"before all\" hook: prepare suite\nContract: VestingScheme\n    6) \"before all\" hook: prepare suite\nContract: VoteInOrganizationScheme\n    7) \"before all\" hook: prepare suite\n137 passing (4m)\n  7 failing\n1) Contract: Reputation \"before all\" hook: prepare suite:\n     Error: Could not connect to your Ethereum client. Please check that your Ethereum client:\n    - is running\n    - is accepting RPC connections (i.e., \"--rpc\" option is used in geth)\n    - is accessible over the network\n    - is properly configured in your Truffle configuration file (truffle.js)\n  at ProviderError.ExtendableError (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:9401:17)\n  at new ProviderError (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:325054:24)\n  at C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:325137:17\n  at C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:325195:24\n  at XMLHttpRequest.request.onreadystatechange (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:328229:7)\n  at XMLHttpRequestEventTarget.dispatchEvent (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176415:18)\n  at XMLHttpRequest._setReadyState (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176705:12)\n  at XMLHttpRequest._onHttpRequestError (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176895:12)\n  at ClientRequest.<anonymous> (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176765:24)\n\n2) Contract: SchemeRegistrar \"before all\" hook: prepare suite:\n     Error: Could not connect to your Ethereum client. Please check that your Ethereum client:\n    - is running\n    - is accepting RPC connections (i.e., \"--rpc\" option is used in geth)\n    - is accessible over the network\n    - is properly configured in your Truffle configuration file (truffle.js)\n  at ProviderError.ExtendableError (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:9401:17)\n  at new ProviderError (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:325054:24)\n  at C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:325137:17\n  at C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:325195:24\n  at XMLHttpRequest.request.onreadystatechange (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:328229:7)\n  at XMLHttpRequestEventTarget.dispatchEvent (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176415:18)\n  at XMLHttpRequest._setReadyState (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176705:12)\n  at XMLHttpRequest._onHttpRequestError (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176895:12)\n  at ClientRequest.<anonymous> (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176765:24)\n\n3) Contract: SimpleICO \"before all\" hook: prepare suite:\n     Error: Could not connect to your Ethereum client. Please check that your Ethereum client:\n    - is running\n    - is accepting RPC connections (i.e., \"--rpc\" option is used in geth)\n    - is accessible over the network\n    - is properly configured in your Truffle configuration file (truffle.js)\n  at ProviderError.ExtendableError (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:9401:17)\n  at new ProviderError (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:325054:24)\n  at C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:325137:17\n  at C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:325195:24\n  at XMLHttpRequest.request.onreadystatechange (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:328229:7)\n  at XMLHttpRequestEventTarget.dispatchEvent (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176415:18)\n  at XMLHttpRequest._setReadyState (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176705:12)\n  at XMLHttpRequest._onHttpRequestError (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176895:12)\n  at ClientRequest.<anonymous> (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176765:24)\n\n4) Contract: TokenCapGC \"before all\" hook: prepare suite:\n     Error: Could not connect to your Ethereum client. Please check that your Ethereum client:\n    - is running\n    - is accepting RPC connections (i.e., \"--rpc\" option is used in geth)\n    - is accessible over the network\n    - is properly configured in your Truffle configuration file (truffle.js)\n  at ProviderError.ExtendableError (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:9401:17)\n  at new ProviderError (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:325054:24)\n  at C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:325137:17\n  at C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:325195:24\n  at XMLHttpRequest.request.onreadystatechange (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:328229:7)\n  at XMLHttpRequestEventTarget.dispatchEvent (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176415:18)\n  at XMLHttpRequest._setReadyState (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176705:12)\n  at XMLHttpRequest._onHttpRequestError (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176895:12)\n  at ClientRequest.<anonymous> (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176765:24)\n\n5) Contract: UpgradeScheme \"before all\" hook: prepare suite:\n     Error: Could not connect to your Ethereum client. Please check that your Ethereum client:\n    - is running\n    - is accepting RPC connections (i.e., \"--rpc\" option is used in geth)\n    - is accessible over the network\n    - is properly configured in your Truffle configuration file (truffle.js)\n  at ProviderError.ExtendableError (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:9401:17)\n  at new ProviderError (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:325054:24)\n  at C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:325137:17\n  at C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:325195:24\n  at XMLHttpRequest.request.onreadystatechange (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:328229:7)\n  at XMLHttpRequestEventTarget.dispatchEvent (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176415:18)\n  at XMLHttpRequest._setReadyState (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176705:12)\n  at XMLHttpRequest._onHttpRequestError (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176895:12)\n  at ClientRequest.<anonymous> (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176765:24)\n\n6) Contract: VestingScheme \"before all\" hook: prepare suite:\n     Error: Could not connect to your Ethereum client. Please check that your Ethereum client:\n    - is running\n    - is accepting RPC connections (i.e., \"--rpc\" option is used in geth)\n    - is accessible over the network\n    - is properly configured in your Truffle configuration file (truffle.js)\n  at ProviderError.ExtendableError (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:9401:17)\n  at new ProviderError (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:325054:24)\n  at C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:325137:17\n  at C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:325195:24\n  at XMLHttpRequest.request.onreadystatechange (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:328229:7)\n  at XMLHttpRequestEventTarget.dispatchEvent (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176415:18)\n  at XMLHttpRequest._setReadyState (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176705:12)\n  at XMLHttpRequest._onHttpRequestError (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176895:12)\n  at ClientRequest.<anonymous> (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176765:24)\n\n7) Contract: VoteInOrganizationScheme \"before all\" hook: prepare suite:\n     Error: Could not connect to your Ethereum client. Please check that your Ethereum client:\n    - is running\n    - is accepting RPC connections (i.e., \"--rpc\" option is used in geth)\n    - is accessible over the network\n    - is properly configured in your Truffle configuration file (truffle.js)\n  at ProviderError.ExtendableError (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:9401:17)\n  at new ProviderError (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:325054:24)\n  at C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:325137:17\n  at C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:325195:24\n  at XMLHttpRequest.request.onreadystatechange (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:328229:7)\n  at XMLHttpRequestEventTarget.dispatchEvent (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176415:18)\n  at XMLHttpRequest._setReadyState (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176705:12)\n  at XMLHttpRequest._onHttpRequestError (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176895:12)\n  at ClientRequest.<anonymous> (C:\\Users\\Alon\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\truffle\\build\\cli.bundled.js:176765:24)\n\n```\nRepo: https://github.com/daostack/daostack\nI am running Windows 10 so this doesn't seem related to OS\nFor me it happens around 50% of the time locally and also happens during Travis build.. Could this be somehow related? #729. @cgewecke ok thanks. I've been following #729 and someone mentioned this one to me as well . ",
    "barakman": "Same problem on Windows 10:\n- Ganache CLI v6.1.0 (ganache-core: 2.1.0)\n- Truffle v4.1.3\n- npm v5.5.1\n- node v8.9.3\n```\n  1) Contract: ...\n     AssertionError: Could not connect to your Ethereum client. Please check that your Ethereum client:\n    - is running\n    - is accepting RPC connections (i.e., \"--rpc\" option is used in geth)\n    - is accessible over the network\n    - is properly configured in your Truffle configuration file (truffle.js)\n  at Context.it (...)\n  at <anonymous>\n  at process._tickCallback (internal/process/next_tick.js:188:7)\n\n2) Contract: ... \"after each\" hook: after test for \"...\":\n     Error: Could not connect to your Ethereum client. Please check that your Ethereum client:\n    - is running\n    - is accepting RPC connections (i.e., \"--rpc\" option is used in geth)\n    - is accessible over the network\n    - is properly configured in your Truffle configuration file (truffle.js)\n  at ProviderError.ExtendableError (C:\\Users\\...\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-error\\index.js:10:1)\n  at new ProviderError (C:\\Users\\...\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-provider\\error.js:17:1)\n  at C:\\Users\\...\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-provider\\wrapper.js:71:1\n  at C:\\Users\\...\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-provider\\wrapper.js:129:1\n  at XMLHttpRequest.request.onreadystatechange (C:\\Users\\...\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3\\lib\\web3\\httpprovider.js:128:1)\n  at XMLHttpRequestEventTarget.dispatchEvent (C:\\Users\\...\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\xhr2\\lib\\xhr2.js:64:1)\n  at XMLHttpRequest._setReadyState (C:\\Users\\...\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\xhr2\\lib\\xhr2.js:354:1)\n  at XMLHttpRequest._onHttpRequestError (C:\\Users\\...\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\xhr2\\lib\\xhr2.js:544:1)\n  at ClientRequest.<anonymous> (C:\\Users\\...\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\xhr2\\lib\\xhr2.js:414:1)\n  at Socket.socketErrorListener (_http_client.js:387:9)\n  at emitErrorNT (internal/streams/destroy.js:64:8)\n  at _combinedTickCallback (internal/process/next_tick.js:138:11)\n  at process._tickCallback (internal/process/next_tick.js:180:9)\n\n```. @cgewecke:\nAny news on this?. @cgewecke:\nThank you for the info.\nP.S.: To me, heisenbug is kind of instinctively associated with Heisenberg (Uncertainty Principle's Heisenberg, not Breaking Bad's Heisenberg). More specifically, something like - \"if you touch it, you change it\", or in other words - this bug is unsolvable by definition, which I sincerely hope is not the case here... Or perhaps you were referring to the bug being uncertain, not the actual solution (and perhaps I went slightly off track with my \"associativity\")...\nIn my case, I see this occurring at random indeed, but - and this is actually very deterministic - in only 1 out of 23 scripts which truffle test executes.\nI've been banging my head for a while, trying to figure out in what sense this script is different from all the others, which could explain this. But I have failed to find any notable difference, so I cannot think of any sustainable workaround.\nThanks. @cgewecke:\nMost likely not related to the preceding script, as I also tried to truffle test this script alone, and the problem persisted.\nI'm not sure that I'm allowed to post the code publicly at this point, so I will try to minimize both the Solidity contract and the Javascript test, and if I am still able to reproduce the problem then I will post it here.\nAnother interesting point of attention, is the fact that I haven't seen it happening when using testrpc-sc instead of ganache-cli.\nSo the bug can probably be reduced to the differences between those two (and also, we can probably eliminate the chances of it being related to the truffle suite itself or to mocha).. @cgewecke:\nI can consistently reproduce the problem with the code below.\nMyContract.sol:\n```\npragma solidity ^0.4.18;\ncontract MyContract {\n    uint256 public constant ONE = 1000000000;\n    uint256 public constant GAMMA = 179437500000000000000000000000000000000000;\n    uint256 public constant DELTA = 29437500;\nfunction buy(uint256 x, uint256 y, uint256 alpha, uint256 beta) external pure returns (uint256) {\n    uint256 temp = alpha - beta * y;\n    return x * (temp * ONE) / (temp * (ONE - DELTA) + GAMMA);\n}\n\nfunction sell(uint256 x, uint256 y, uint256 alpha, uint256 beta) external pure returns (uint256) {\n    uint256 temp = alpha - beta * y;\n    return x * (temp * (ONE + DELTA) - GAMMA) / (temp * ONE);\n}\n\n}\n```\nMyContractUnitTest.js:\n```\ncontract(\"MyContractUnitTest\", () => {\n    let interval = [\"0\", \"20000000000000000000000000\", \"10000000000000000000000000000000000\", \"0\"];\n    let NUM_OF_TESTS_PER_INTERVAL = 10;\nfunction buyFunc(x, y, alpha, beta) {\n    let temp = alpha.minus(beta.times(y));\n    return x.times(temp.times(ONE)).dividedBy(temp.times(ONE.minus(DELTA)).plus(GAMMA));\n}\n\nfunction sellFunc(x, y, alpha, beta) {\n    let temp = alpha.minus(beta.times(y));\n    return x.times(temp.times(ONE.plus(DELTA)).minus(GAMMA)).dividedBy(temp.times(ONE));\n}\n\nasync function buy(x, y, alpha, beta) {\n    let fixedPoint = await myContract.buy(x, y, alpha, beta);\n    let floatPoint = buyFunc(x, y, alpha, beta);\n    return [fixedPoint, floatPoint];\n}\n\nasync function sell(x, y, alpha, beta) {\n    let fixedPoint = await myContract.sell(x, y, alpha, beta);\n    let floatPoint = sellFunc(x, y, alpha, beta);\n    return [fixedPoint, floatPoint];\n}\n\nlet myContract;\nlet ONE;\nlet GAMMA;\nlet DELTA;\nbefore(async () => {\n    myContract = await artifacts.require(\"MyContract.sol\").new();\n    ONE = await myContract.ONE();\n    GAMMA = await myContract.GAMMA();\n    DELTA = await myContract.DELTA();\n});\n\nlet AMOUNT = web3.toBigNumber(1000000);\n\nfor (let func of [buy, sell]) {\n    describe(`${func.name}:`, async () => {\n        for (let row = 0; row < 100; row++) {\n            for (let col = 0; col < 10; col++) {\n                let [minN, maxN, alpha, beta] = interval.map(x => web3.toBigNumber(x));\n                let incN = maxN.minus(minN).dividedBy(NUM_OF_TESTS_PER_INTERVAL - 1);\n                for (let i = 0; i < NUM_OF_TESTS_PER_INTERVAL; i++) {\n                    let y = minN.plus(incN.times(i)).truncated();\n                    it(`interval ${row} ${col}, test ${i}`, async () => {\n                        try {\n                            let [fixedPoint, floatPoint] = await func(AMOUNT, y, alpha, beta);\n                            let ratio = fixedPoint.dividedBy(floatPoint);\n                            assert(ratio.greaterThanOrEqualTo(\"0.99999\") && ratio.lessThanOrEqualTo(\"1\"), `ratio = ${ratio.toFixed()}`);\n                        }\n                        catch (error) {\n                            assert(false, error.message);\n                        }\n                    });\n                }\n            }\n        }\n    });\n}\n\n});\n```\nMy setup (as mentioned in a previous comment on this thread) is:\n\nWindows 10\nGanache CLI v6.1.0 (ganache-core: 2.1.0)\nTruffle v4.1.3\nnpm v5.5.1\nnode v8.9.3\n\nThanks. @cgewecke: Also happens on testrpc-sc if you try \"hard enough\".... @cgewecke : I am circulating around the conclusion that this problem stems from improper usage of the Mocha framework. More precisely, improper usage of the before, beforeEach, afterEach and after hooks.\nThe typical error messages, although poorly phrased, imply this conjecture as well:\n- \"before all\" hook....\n- \"before each\" hook...\n- \"after each\" hook...\n- \"after all\" hook...\nYou can read the relevant information here, namely:\n\nYou may also pick any file and add \u201croot\u201d-level hooks. For example, add beforeEach() outside of all describe() blocks. This will cause the callback to beforeEach() to run before any test case, regardless of the file it lives in.\n\nSo using these hooks on the root-level might be a bad idea in this case, since due to the nature of the tested system (communication with a TestRPC or Ganache process), they typically execute asynchronous code.. @cgewecke:\nI have removed all my root-level hooks, and i'm still encountering disconnections.\nHowever, in opposed to before, the errors that I am getting are always \"after each\" hook....\nAnd to be absolutely clear on that, I don't even have an afterEach hook in any of my tests!\nMaybe Mocha adds implicit calls to afterEach, when an explicit call to beforeEach exists in the code.\nHowever, so long as these implicit calls are not added at the root-level, it does not support my conjecture of hooked code running in the wrong scope to begin with.\nIn short, I'm at a loss here...\nBy the way, in the code that you linked, there doesn't seem to be support for the after hook, and I am using this hook in my tests.. @cgewecke:\nThanks.\nI removed all the after hooks in my code (replaced them with its), and now I'm getting a \"before each\" hook... error.\nSo I'm suspecting that one way or another - these hooks are not incorporated properly into Truffle.\nIn order to bring an empirical evidence for this conjecture, I am now trying the following workaround:\n\nReplace each before hook with an it\nReplace each after hook with an it\nMove the contents of each beforeEach hook to the beginning of each one of the its which follow\nMove the contents of each afterEach hook to the end of each one of the its which follow\n\nIf all tests pass without disconnections, then I'm pretty sure that we can stamp this as the cause of the problem. And even if not, I think that it could still be related to hooks which are added implicitly by the Mocha framework.. @cgewecke:\nI take back my previous conjecture of this error occurring on a given test as a result of something which has executed on a previous test.\nThis is because the error occurs when I execute truffle test separately for each test file (i.e., running truffle test test/SomeFile.js sequentially for each JS file).\nMoreover, in between calls to truffle test, I close and reopen the ganache-cli process.\nSo this error cannot be related to any previous state stored by either truffle test or ganache-cli (unless one of them saves some \"global information\" in the operating-system's temp folder or something like that, which I sincerely doubt).\nIn addition to that, I have recently tested the new ganache-cli beta version (7.0.0-beta.0), where the problem persists.\nI have posted my findings on a similar GIT thread which is closed by now, but I am hoping will reopen.\nThanks. @cgewecke:\nI have conducted a more extensive research, by modifying file /node_modules/truffle/build/cli.bundled.js.\nI started off by checking which path leads to the NOT_CONNECTED_MESSAGE error message ('Invalid JSON RPC response: \"\"'):\n\nThe synchronous path (send: function(originalSend, preHook, postHook))\nThe asynchronous path (sendAsync: function(originalSendAsync, preHook, postHook))\n\nAs expected, this error occurs only in the asynchronous path.\nSecond, I added some logging in this path, just before invoking callback(error, result):\nif (payload.params == undefined)\n    console.log(result.id, payload.method, 'no params');\nelse\n    console.log(result.id, payload.method, payload.params.length);\n\nHere is the consistency that I have observed:\n\nDuring normal execution:\nresult.id starts from a very large value, and grows on each evm operation, for example:\nid = 1525799814567, method = evm_revert\nid = 1525799814727, method = evm_snapshot\n\n\nresult.id starts from 1 and increments by 1 on each net or eth operation, for example:\nid = 1, method = net_version\nid = 2, method = eth_sendTransaction\nid = 3, method = eth_getTransactionReceipt\nid = 4, method = eth_call\nid = 5, method = eth_newBlockFilter\nid = 6, method = eth_getCode\nid = 7, method = eth_blockNumber\nid = 8, method = eth_uninstallFilter\n\n\nIn some cases, both result.id and payload.method are undefined.\n     When that happens, result.id increments by 2 on the next net or eth operation, for example:\nid = 12, method = eth_blockNumber\nid = undefined, method = undefined\nid = 14, method = eth_uninstallFilter\n\n\nRight before the error occurs:\nIn the last one or two cases, result.id is undefined but payload.method is valid.\nIn the last case, payload.method is sometimes eth_getLogs for the first time in the entire test.\nHere are several examples for that:\nTest 1 ended with:\nid = undefined, method = net_version\nid = 1525791759176, method = eth_getLogs\nTest 2 ended with:\nid = undefined, method = eth_call\nid = undefined, method = eth_getLogs\nTest 3 ended with:\nid = undefined, method = eth_blockNumber\nTest 4 ended with:\nid = undefined, method = eth_call\nid = undefined, method = eth_getLogs\nTest 5 ended with:\nid = undefined, method = eth_blockNumber\n\n\n\nI am hopeful that the above information will provide some clues towards the source of this problem.\nAnd since I am able to reproduce it repeatedly, I will be happy to generate more logging in case you have any specific requests.\nThanks. @cgewecke:\nUpdate to the above:\nI later realized that:\n- In some cases:\n  - The id is in result\n  - The method is in payload\n- In other cases:\n  - The id is in result[0]\n  - The method is in payload[0]\nI therefore changed the logging as follows:\nif (result.id != undefined)\n    console.log(`Normal: id = ${result.id}, method = ${payload.method}`);\nelse if (result[0] != undefined)\n    console.log(`In [0]: id = ${result[0].id}, method = ${payload[0].method}`);\nelse\n    console.log(`Problem: result = ${result}, payload = ${JSON.stringify(payload, null, 4)}`);\n\nThe new logging has improved my previous observation from this:\nresult.id = undefined\npayload.method = undefined\n\nTo this:\nresult[0].id = <the previous id + 1>\npayload[0].method = eth_getFilterChanges\n\nAll of that, during normal execution of course.\nWhat happens right before the error can be described as follows:\nIn the last one or two cases, the result is empty.\nThe contents which the result normally holds:\n- jsonrpc is still available in the payload\n- id is still available in the payload\n- result is not available anywhere\nIs it possible that somewhere in ganache-cli code, the payload is initialized but the result is not?\nThat could most certainly be classified as an \"Invalid JSON RPC response\" (which you guys can easily resolve).\nThanks. Some more observations:\nWhen the last two result objects are empty:\n1. The last payload object always contains:\n   - method = eth_getLogs\n   - id = <some very large number>\n2. The error reported by truffle test is always \"after each\" hook: after test for...\nWhen only the last result object are empty:\n1. The last payload object always contains:\n   - method != eth_getLogs\n   - id = <the previous id + 1>\n2. The error reported by truffle test is either \"before each\" hook: before test for... or No events were emitted\n. @cgewecke:\nI've been doing my research only on truffle side, thinking I wasn't able to do much on ganache side because all the code inside /node_modules/ganache appeared \"compacted\".\nBut then I realized that I could go directly to the source code on GitHub, so I'm now looking there too trying to connect the dots...\nI'm doing it without logging this time, because I would essentially need to reinstall it (npm) after every change, so too much hustle...\nThank you!. @cgewecke:\nBTW, preliminary observation in ganache code:\nIt seems that the jsonrpc field is mostly set to \"2.0\" (string) and rarely set to 2.0 (double).\nPerhaps it doesn't make any difference when sent from the ganache process to the truffle process, but I would nevertheless make it consistent across the project.. @cgewecke:\nA question about line 100 in file /ganache-core-develop/lib/provider.js:\ncallback(response.error ? err : null, response);\n\nLooking a few lines above it, the variable response is either an object or an array of objects.\nWhen it is an array of objects, I believe that response.error is undefined, hence the expression response.error ? err : null evaluates to null.\nIs this really the desired behavior in this case?\nThanks. @cgewecke:\nI will do so, thank you very much!!!\nBut as I mentioned above, I must also remind you that in some failure cases, the eth_getLogs method was not present in the erroneous payload (i.e, the payload which came along with an empty result did not contain this method).. @cgewecke:\nMy contracts are at Solidity 0.4.18, and my Truffle is subsequently at v4.13.\nCan I use my local Truffle for compile and your proposed Truffle (which I have installed globally as you suggested) for test, or is it not likely to work?. @cgewecke:\nIn any case, the problem persists.\nHere's the error message from (your) truffle:\n```\n[0m[31m     Error: Could not connect to your Ethereum client. Please check that your Ethereum client:\n    - is running\n    - is accepting RPC connections (i.e., \"--rpc\" option is used in geth)\n    - is accessible over the network\n    - is properly configured in your Truffle configuration file (truffle.js)\n[0m[90m\n      at ProviderError.ExtendableError (C:\\Users...\\webpack:\\dependencies\\truffle-error\\index.js:10:1)\n      at new ProviderError (C:\\Users...\\webpack:\\dependencies\\truffle-provider\\error.js:17:1)\n      at C:\\Users...\\webpack:\\dependencies\\truffle-provider\\wrapper.js:71:1\n      at C:\\Users...\\webpack:\\dependencies\\truffle-provider\\wrapper.js:129:1\n      at XMLHttpRequest.request.onreadystatechange (C:\\Users...\\webpack:\\dependencies\\truffle-provider\\~\\web3\\lib\\web3\\httpprovider.js:128:1)\n      at XMLHttpRequestEventTarget.dispatchEvent (C:\\Users...\\webpack:\\dependencies\\truffle-provider\\~\\xhr2\\lib\\xhr2.js:64:1)\n      at XMLHttpRequest._setReadyState (C:\\Users...\\webpack:\\dependencies\\truffle-provider\\~\\xhr2\\lib\\xhr2.js:354:1)\n      at XMLHttpRequest._onHttpRequestError (C:\\Users...\\webpack:\\dependencies\\truffle-provider\\~\\xhr2\\lib\\xhr2.js:544:1)\n      at ClientRequest. (C:\\Users...\\webpack:\\dependencies\\truffle-provider\\~\\xhr2\\lib\\xhr2.js:414:1)\n      at Socket.socketErrorListener (_http_client.js:387:9)\n      at emitErrorNT (internal/streams/destroy.js:64:8)\n      at _combinedTickCallback (internal/process/next_tick.js:138:11)\n      at process._tickCallback (internal/process/next_tick.js:180:9)\n[0m\n``\nNote that there is no\"after each\" hook: after test for...in this case, which from previous empiric experience tells us that the lastpayload's method was **not**eth_getLogs`.\nBut then again, it couldn't have been eth_getLogs anyway, since you've removed it, right?\nI could run a few more tests to make sure that the error message never contains the \"after each\" hook: after test for... part.\nIt wouldn't really provide a great deal of insight, but perhaps it might indicate (if indeed the case, of course) that one path out of several paths which lead to this error has been resolved.\nThanks. @cgewecke:\nI have already changed that in all of my tests a while ago.\nI have also posted a simplified version of this reproduction case quite recently, in which the describe takes a non-async function.\nI posted it in order to inform benjamincburns that the problem persists with ganache-cli@7.0.0-beta.0.\nYou can read it at the bottom of this thread.. @cgewecke:\nI have added logging to your darq-truffle version:\nsendAsync: function(originalSendAsync, preHook, postHook) {\n    ...\n    if (result.id == undefined && result[0] != undefined)\n        console.log(`Problem: result = ${result}, payload = ${JSON.stringify(payload, null, 4)}`);\n    callback(error, result);\n    ...\n}\nNow, upon Could not connect to your Ethereum client error, the log output seems to be either one of the following cases:\n1. payload.method = eth_blockNumber, and the error message contains \"before each\" hook....\n2. payload.method = eth_call, and the error message does not contain any additional information.\n3. payload.method = net_version, and the error message does not contain any additional information.\nAs expected, there seems to be a slight reduction in the number of different failure scenarios, with the payload.method no longer being eth_getLogs, and the error message no longer containing \"after each\" hook....\nSo perhaps the next place to look into is the other 3 methods mentioned above - eth_blockNumber, eth_call and net_version.\nI would always feel better finding and fixing a single source of a given problem, which I'm pretty sure is also the case here, but perhaps we should start off by eliminating each path that leads to the problem, and eventually trace the exact point of failure.. @cgewecke:\nThe problem reproduces when I use GETH instead of Ganache.\nI have also removed compiler optimization (see below) in order to rule out this factor as well:\nsolc: {\n    optimizer: {\n        enabled: false,\n        runs: 5000000,\n    }\n}\n\nNow, on the one hand, this implies that the problem is in Truffle.\nBut on the other hand, I'm guessing that Ganache and GETH are possibly using the same code-base.\nSo I'm not entirely confident that it is indeed Truffle to blame for.. @cgewecke:\nA very important observation IMO:\n```\n  request.onreadystatechange = function () {\n    if (request.readyState === 4 && request.timeout !== 1) {\n      var result = request.responseText;\n      var error = null;\n  try {\n    result = JSON.parse(result);\n  } catch (e) {\n    error = errors.InvalidResponse(request.responseText);\n  }\n\n  callback(error, result);\n}\n\n};\n```\nAs long as request.status == 200, the responseText is a valid JSON RPC.\nOnce  request.status == 0, the responseText is empty (hence an invalid JSON RPC).\nMost likely, you need to ensure both request.readyState === 4 and  request.status === 200.\nI think that you may as well get rid of the request.timeout !== 1 assertion while you're at it, but I'm not an HTTP expert so I'll leave that decision to you.\nI have not been able to resolve all my problems by adding this condition, as truffle simply terminates without any errors at all.\nHowever, I'm pretty sure that the solution is tightly related with this issue.\nIt also explains the non-deterministic behavior (Heisenbug in your words) that we've witnessed, as HTTP responses tend to behave this way (in particularly with the regards to the partially-duplicated information embedded in the readyState and status fields).. @cgewecke:\nBut I see it in /node_modules/truffle/build/cli.bundled.js.\nAre you \"linking\" Web3 code as part of Truffle's \"build\" process?\nIf so, how can we wrap things up on this issue?\ni.e., should I post this on Web3's GitHub?\nThanks!. @cgewecke:\nIf I understand your question of 'What states trigger this crash?' correctly, then the code that I've used in order to trigger this crash is given below (please let me know if that's not what you meant).\nUsing Truffle + GETH, the problem is actually reproduced very consistently, at around test 540 (though it may be affected by GETH verbosity since it is highly timing-dependent).\nOn-Chain:\n```\npragma solidity ^0.4.18;\ncontract MyContract {\n    uint256 public constant ONE = 1000000000;\n    uint256 public constant GAMMA = 179437500000000000000000000000000000000000;\n    uint256 public constant DELTA = 29437500;\n    uint256 public constant AMOUNT = 1000000;\nfunction buy(uint256 x, uint256 alpha, uint256 beta) external pure returns (uint256) {\n    uint256 temp = alpha - beta * x;\n    return AMOUNT * (temp * ONE) / (temp * (ONE - DELTA) + GAMMA);\n}\n\nfunction sell(uint256 x, uint256 alpha, uint256 beta) external pure returns (uint256) {\n    uint256 temp = alpha - beta * x;\n    return AMOUNT * (temp * (ONE + DELTA) - GAMMA) / (temp * ONE);\n}\n\n}\nOff-Chain:\ncontract(\"MyContractTest\", function() {\n    let hMyContract;\n    let ONE;\n    let GAMMA;\n    let DELTA;\n    let AMOUNT;\nlet NUM_OF_TESTS = 10;\n\nlet minN = web3.toBigNumber(\"0\");\nlet maxN = web3.toBigNumber(\"20000000000000000000000000\");\nlet alpha = web3.toBigNumber(\"10000000000000000000000000000000000\");\nlet beta = web3.toBigNumber(\"0\");\nlet incN = maxN.minus(minN).dividedBy(NUM_OF_TESTS - 1);\n\ndescribe(\"accuracy assertion:\", function() {\n    before(async function() {\n        hMyContract = await artifacts.require(\"MyContract.sol\").new();\n        ONE = await hMyContract.ONE();\n        GAMMA = await hMyContract.GAMMA();\n        DELTA = await hMyContract.DELTA();\n        AMOUNT = await hMyContract.AMOUNT();\n    });\n    for (let func of [buy, sell]) {\n        for (let n = 0; n < 1000; n++) {\n            for (let i = 0; i < NUM_OF_TESTS; i++) {\n                it(`${func.name} test ${n} ${i}`, async function() {\n                    let x = minN.plus(incN.times(i)).truncated();\n                    let [fixedPoint, floatPoint] = await func(x, alpha, beta);\n                    let ratio = fixedPoint.dividedBy(floatPoint);\n                    assert(ratio.greaterThanOrEqualTo(\"0.99999\"), `ratio = ${ratio.toFixed()}`);\n                    assert(ratio.lessThanOrEqualTo(\"1\"), `ratio = ${ratio.toFixed()}`);\n                });\n            }\n        }\n    }\n});\n\nfunction buyFunc(x, alpha, beta) {\n    let temp = alpha.minus(beta.times(x));\n    return AMOUNT.times(temp.times(ONE)).dividedBy(temp.times(ONE.minus(DELTA)).plus(GAMMA));\n}\n\nfunction sellFunc(x, alpha, beta) {\n    let temp = alpha.minus(beta.times(x));\n    return AMOUNT.times(temp.times(ONE.plus(DELTA)).minus(GAMMA)).dividedBy(temp.times(ONE));\n}\n\nasync function buy(x, alpha, beta) {\n    let fixedPoint = await hMyContract.buy(x, alpha, beta);\n    let floatPoint = buyFunc(x, alpha, beta);\n    return [fixedPoint, floatPoint];\n}\n\nasync function sell(x, alpha, beta) {\n    let fixedPoint = await hMyContract.sell(x, alpha, beta);\n    let floatPoint = sellFunc(x, alpha, beta);\n    return [fixedPoint, floatPoint];\n}\n\n});\n```\nThanks. @cgewecke:\nSide note:\nI'm not sure how your bundling procedure works and how exactly you integrate Web3 into Truffle, but the HttpProvider.prototype.sendAsync function appears 4 times, out of which, 3 cases implement timeout handling (asserting request.timeout !== 1 and setting request.ontimeout), and 1 case doesn't.\nI don't think that this is directly related to the problem at hand, but it might be implying that you are somehow bundling two different versions of Web3.. @cgewecke:\nSome more observations, and a partial understanding of the problem:\nI conducted a comparison between a successful HTTP request (valid responseText) and an unsuccessful HTTP request (empty responseText).\nNow, the request object is rather large (let alone circular), so it is quite difficult to do a thorough comparison, but I did notice that the \"bad\" request contained the following (which the \"good\" request didn't):\n{\n    Error: connect EADDRINUSE 127.0.0.1:8545\n        at Object._errnoException (util.js:1024:11)\n        at _exceptionWithHostPort (util.js:1046:20)\n        at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1182:14)\n            [stack]: 'Error: connect EADDRINUSE 127.0.0.1:8545\\n    at Object._errnoException (util.js:1024:11)\\n    at _exceptionWithHostPort (util.js:1046:20)\\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1182:14)',\n            [message]: 'connect EADDRINUSE 127.0.0.1:8545',\n            code: 'EADDRINUSE',\n            errno: 'EADDRINUSE',\n            syscall: 'connect',\n            address: '127.0.0.1',\n            port: 8545\n}\nThe EADDRINUSE error means that the ip port (127.0.0.1:8545 in this case) is currently busy, which made me think that perhaps this is not exactly a coding bug on either side.\nI then checked the status of this port via (Windows command) netstat -aon | find \"8545\" and found something interesting:\nAs the test continues, more and more ports on 127.0.0.1 seem to be in use, waiting for something.\nI believe that each one of them is waiting for a response on an HTTP request sent (asynchronously) to 127.0.0.1:8545.\nWhen an unsuccessful HTTP request finally takes place, it seems that the highest port (65535) on 127.0.0.1 is waiting.\nHere is what it looks like on my system:\nFirst this:\nTCP    127.0.0.1:8545         0.0.0.0:0              LISTENING       1820\n  TCP    127.0.0.1:49262        127.0.0.1:8545         TIME_WAIT       0\n  TCP    127.0.0.1:49263        127.0.0.1:8545         TIME_WAIT       0\n  TCP    127.0.0.1:49264        127.0.0.1:8545         TIME_WAIT       0\n  ...\n  TCP    127.0.0.1:49275        127.0.0.1:8545         TIME_WAIT       0\nThen this:\nTCP    127.0.0.1:8545         0.0.0.0:0              LISTENING       1820\n  TCP    127.0.0.1:8545         127.0.0.1:49513        CLOSE_WAIT      1820\n  TCP    127.0.0.1:8545         127.0.0.1:49514        ESTABLISHED     1820\n  TCP    127.0.0.1:49262        127.0.0.1:8545         TIME_WAIT       0\n  TCP    127.0.0.1:49263        127.0.0.1:8545         TIME_WAIT       0\n  TCP    127.0.0.1:49264        127.0.0.1:8545         TIME_WAIT       0\n  ... // mostly consecutive but not always\n  TCP    127.0.0.1:49512        127.0.0.1:8545         TIME_WAIT       0\n  TCP    127.0.0.1:49513        127.0.0.1:8545         FIN_WAIT_2      15044\n  TCP    127.0.0.1:49514        127.0.0.1:8545         ESTABLISHED     15044\nThen this:\nTCP    127.0.0.1:8545         0.0.0.0:0              LISTENING       1820\n  TCP    127.0.0.1:8545         127.0.0.1:58487        CLOSE_WAIT      1820\n  TCP    127.0.0.1:8545         127.0.0.1:58488        ESTABLISHED     1820\n  TCP    127.0.0.1:49262        127.0.0.1:8545         TIME_WAIT       0\n  TCP    127.0.0.1:49263        127.0.0.1:8545         TIME_WAIT       0\n  TCP    127.0.0.1:49264        127.0.0.1:8545         TIME_WAIT       0\n  ... // mostly consecutive but not always\n  TCP    127.0.0.1:58486        127.0.0.1:8545         TIME_WAIT       0\n  TCP    127.0.0.1:58487        127.0.0.1:8545         FIN_WAIT_2      15044\n  TCP    127.0.0.1:58488        127.0.0.1:8545         ESTABLISHED     15044\nThen this:\nTCP    127.0.0.1:8545         0.0.0.0:0              LISTENING       1820\n  TCP    127.0.0.1:49262        127.0.0.1:8545         TIME_WAIT       0\n  TCP    127.0.0.1:49263        127.0.0.1:8545         TIME_WAIT       0\n  TCP    127.0.0.1:49264        127.0.0.1:8545         TIME_WAIT       0\n  ... // mostly consecutive but not always\n  TCP    127.0.0.1:61586        127.0.0.1:8545         TIME_WAIT       0\n  TCP    127.0.0.1:61587        127.0.0.1:8545         TIME_WAIT       0\n  TCP    127.0.0.1:61588        127.0.0.1:8545         ESTABLISHED     15044\nAnd finally this:\nTCP    127.0.0.1:8545         0.0.0.0:0              LISTENING       1820\n  TCP    127.0.0.1:49152        127.0.0.1:8545         TIME_WAIT       0\n  TCP    127.0.0.1:49153        127.0.0.1:8545         TIME_WAIT       0\n  TCP    127.0.0.1:49156        127.0.0.1:8545         TIME_WAIT       0\n  ... // mostly consecutive but not always\n  TCP    127.0.0.1:65533        127.0.0.1:8545         TIME_WAIT       0\n  TCP    127.0.0.1:65534        127.0.0.1:8545         TIME_WAIT       0\n  TCP    127.0.0.1:65535        127.0.0.1:8545         TIME_WAIT       0\nFunny enough, even at this point, there still seem to be plenty of available ports between 0 and 65535 (more notably between 0 and 49000), but they don't seem to be used for some reason.\nIn any case, once the truffle test process terminates, those waiting ports seem to \"clean up\" gradually, until only the listening port (8545) remains.\nThat is when I can execute truffle test once again (without shutting down the Ethereum client, GETH in this case).\nSo perhaps the solution to this problem is in Truffle - maintain a counter of the open requests, and whenever it reaches a certain threshold, delay before submitting the next request.\nOf course, I could also do this in my tests (i.e., Truffle input) but I don't think that's an appropriate solution.\nThanks!. @cgewecke:\nThis specific test starts off with 1 before call, which executes 5 asynchronous web3 calls.\nIt then proceeds with 20,000 it calls, each of which executing 1 asynchronous web3 call.\nAFAIK (and you can probably verify this in Truffle), each web3 call yields 1 HTTP request to the Ethereum client (Ganache or GETH in this case).\nOn average, the test fails after 5,400 it calls or so. Hence if my assumption above is correct, then we're not talking about more than 5,000 pending requests.\nOf course, the info that I provided on the previous comment does suggest ~15,000 requests, so I will run this again to make sure. I suppose that there were a lot of gaps (idle ports) in between 49152 and 65535.\nIs it possible that you're not closing requests properly on Truffle. AFAIK there's no need to do that, but I'm not an HTTP expert so just bringing it up...\nThanks.. @cgewecke:\nThe exact number of busy ports immediately upon failure is 16353.\nBTW, I just noticed that between 49152 and 65535 there are exactly 16384 ports, which also happens to be equal to 2^14. Not sure if it provides any additional insight though...\nIn any case, this means that there are HTTP requests issued by Truffle, which are not directly related to the test. Alternatively, my assumption of 1 request per web3 call is incorrect, and there are something like 3 or more requests per web3 call.. @cgewecke:\nSome more analysis and an exact pinpoint of the problem (a solution if you will):\nI have added a counter to test whether the number of opened HTTP requests in the system grows as the number of waiting ports seems to be growing.\nI increase this counter after request.send(JSON.stringify(payload)) and decrease it in function request.onreadystatechange (upon request.readyState === 4).\nThe counter is zero when the failure occurs, which means that there are no opened requests at that point (this is in contrast with the number of waiting ports).\nI have found a post suggesting that the TIME_WAIT period is configurable in the OS, but that would be an OS-dependent solution, which I'd really hate.\nI have done some reading on the XMLHttpRequest object, to see if I could somehow use it in order to \"signal someone on the system\" that the request is done and that the port can be closed.\nI haven't found any such option (in fact, I think that there is no really such thing as \"HTTP connection close\" defined in the HTTP standard).\nI did notice, however, that for asynchronous requests, you are using XHR2 instead of XMLHttpRequest.\nI'm not sure about the difference between these two, I only understand that the former is a NodeJS wrapping of the latter (which is a \"Javascript native type\").\nNevertheless, when I change the code to use XMLHttpRequest instead of XHR2, the test runs to completion!!!\nOddly enough, when the test is done, there are still some 16,000 ports in TIME_WAIT state.\nHowever, this time, in addition to (something like) this:\nTCP    127.0.0.1:49155        127.0.0.1:8545         TIME_WAIT       0\n  TCP    127.0.0.1:49157        127.0.0.1:8545         TIME_WAIT       0\n  TCP    127.0.0.1:49165        127.0.0.1:8545         TIME_WAIT       0\n  ...\n  TCP    127.0.0.1:65532        127.0.0.1:8545         TIME_WAIT       0\n  TCP    127.0.0.1:65533        127.0.0.1:8545         TIME_WAIT       0\n  TCP    127.0.0.1:65534        127.0.0.1:8545         TIME_WAIT       0\nI also see (something like) this:\nTCP    127.0.0.1:8545         127.0.0.1:49152        TIME_WAIT       0\n  TCP    127.0.0.1:8545         127.0.0.1:49153        TIME_WAIT       0\n  TCP    127.0.0.1:8545         127.0.0.1:49154        TIME_WAIT       0\n  ...\n  TCP    127.0.0.1:8545         127.0.0.1:65531        TIME_WAIT       0\n  TCP    127.0.0.1:8545         127.0.0.1:65534        TIME_WAIT       0\n  TCP    127.0.0.1:8545         127.0.0.1:65535        TIME_WAIT       0\nI'm not sure why exactly the test completes, and whether or not we can even consider the replacement of XHR2 with XMLHttpRequest a solution (though it does seem like a good workaround by the least).\nBut I think that we should focus our investigation on the difference between these two.\nThanks.. @cgewecke:\nThank you!\n\nI think that we should by the least inform web3 authors / contributors of the XHR2 findings.\n   I am inclined to think that it might impact other open issues.\nI am using the Mocha framework for testing (and I was pretty sure that truffle test relies on that anyway). The web3 class is globally available in all of my tests (not sure if because of Mocha or because of Truffle). So I'm not quite sure how or where to add this configuration.\n   Is it possible to add it in the truffle configuration file?\n   If no, how else can I go about applying it?\n   Writing it in every test seems kinda overkill.\n   Nevertheless, I will try it on the specific case at hand and let you know if it solves it.\n   Am I understanding you correctly, that you just want to see if it resolves the problem, so that you can fix Truffle accordingly?\n   I'm not entirely sure how to add it neither in my test nor in Truffle's cli.bundled.js.\n   Would it be sufficient to change this:\n   provider = new Web3.providers.HttpProvider(\"http://\" + options.host + \":\" + options.port);\n   To this:\n   provider = new Web3.providers.HttpProvider(\"http://\" + options.host + \":\" + options.port, 0, '', '', [{name: 'Connection', value: 'Close'}]);\n   In file cli.bundled.js?\n\nUpdate:\nFor the code fix above, I get a message from Truffle (or from the Ethereum client):\nRefused to set unsafe header \"Connection\"\n\nI Googled it, and found this StackOverflow answer and this Web3 GitHub thread.\nDo you have another suggestion?\nThanks.\nUPDATE:\nYou can workaround the Refused to set unsafe header \"Connection\" error as follows:\n1. Locate the XMLHttpRequest.prototype._restrictedHeaders object.\n2. Remove the connection key or change its value from true to false.\nHowever, the bottom line result remains unchanged (i.e., the initial problem persists).. @cgewecke:\nSo the only option currently at hand is to connect in package.json a script which will modify Truffle source code, and call that script after npm install and before npm test?. @cgewecke:\nBTW (and yet again), there seem to be several different versions of HttpProvider.prototype.prepareRequest \"bundled together\" in the same Truffle package.\nOne of them actually uses an XMLHttpRequest object for asynchronous requests, which is how we'd like it to be.\nThe way I see it, there are two options here:\n1. Web3 has introduced the use of XHR2 some time ago.\n2. Web3 has revoked the use of XHR2 some time ago.\nThe first case might make it easier to push forward towards reverting this change, which seems harmful.\nThe second case is even better - simply move Truffle to use the newer version of Web3.\nSee below the various occurrences of HttpProvider.prototype.prepareRequest in the code.\nOccurrence 1:\n```\nHttpProvider.prototype.prepareRequest = function (async) {\n    var request;\nif (async) {\n  request = new XHR2();\n  request.timeout = this.timeout;\n}else {\n  request = new XMLHttpRequest();\n}\n\nrequest.open('POST', this.host, async);\nrequest.setRequestHeader('Content-Type','application/json');\nreturn request;\n\n};\nOccurrence 2:\nHttpProvider.prototype.prepareRequest = function (async) {\n    var request = new XMLHttpRequest();\n    request.open('POST', this.host, async);\n    request.setRequestHeader('Content-Type','application/json');\n    return request;\n};\nOccurrence 3:\nHttpProvider.prototype.prepareRequest = function (async) {\n    var request;\nif (async) {\n  request = new XHR2();\n  request.timeout = this.timeout;\n}else {\n  request = new XMLHttpRequest();\n}\n\nrequest.open('POST', this.host, async);\nrequest.setRequestHeader('Content-Type','application/json');\nreturn request;\n\n};\nOccurrence 4:\nHttpProvider.prototype.prepareRequest = function (async) {\n  var request;\nif (async) {\n    request = new XHR2();\n    request.timeout = this.timeout;\n  } else {\n    request = new XMLHttpRequest();\n  }\nrequest.open('POST', this.host, async);\n  if (this.user && this.password) {\n    var auth = 'Basic ' + new Buffer(this.user + ':' + this.password).toString('base64');\n    request.setRequestHeader('Authorization', auth);\n  } request.setRequestHeader('Content-Type', 'application/json');\n  if(this.headers) {\n      this.headers.forEach(function(header) {\n          request.setRequestHeader(header.name, header.value);\n      });\n  }\n  return request;\n};\n```\nThanks. @cgewecke:\nAt present, I am using Truffle v4.1.3, with my Solidity contracts under v0.4.18.\nI am planning to move to Truffle 4.1.5 as soon as I have an idle slot, but that will force me to upgrade my Solidity contracts to v0.4.23, and due to the syntactical changes (namely emit,  constructor and the deprecation of var), that idle slot will have to be a little wider than what it would take to just change Truffle version in package.json.\nIn short, I will be happy if this change (if indeed applicable) becomes available on Truffle v4.1.3, but Truffle v4.1.5 will also do just fine.\nThanks again for all your help!. @cgewecke:\nOf course, it still needs to be asserted that this fix is not just some coincidental result due to the \"timely-nature\" of the problem (i.e., we must be able to explain it based on the functional difference between XHR2 and XMLHttpRequest).. @cgewecke:\nA satisfactory proof:\nIn the HttpProvider.prototype.sendAsync function, I added console.log(request.getAllResponseHeaders()) upon response (in the onreadystatechange callback function).\nWhen the HttpProvider.prototype.prepareRequest function uses XHR2, the printout form is:\ncontent-type: application/json\nvary: Origin\ndate: ...\ncontent-length: ...\nWhen the HttpProvider.prototype.prepareRequest function uses XMLHttpRequest, the printout form is:\ncontent-type: application/json\nvary: Origin\ndate: ...\ncontent-length: ...\nconnection: close\n. @cgewecke:\nI did a little reading, and it seems that connections are closed by default in HTTP 1.0 and kept alive by default in HTTP 1.1. And I'm guessing that XMLHttpRequest supports HTTP 1.0 while XHR2 supports HTTP 1.1, so it makes sense that Web3 has switched from XMLHttpRequest to XHR2 and not vice-versa.\nAs with regards to the second part of your comment, please note that I have experienced the same problem when using solidity-coverage along with testrpc-sc. And as far as I understand, those two are designated specifically for the purpose of \"running simulations with tens of thousands of calls\" (how else would you achieve a complete coverage of your contracts?).\nFor now, I have added the following workaround on my system:\n\nNext to file package.json, added file fix-truffle.js :\nFILE_NAME = \"./node_modules/truffle/build/cli.bundled.js\";\nlet fs = require(\"fs\");\nlet oldData = fs.readFileSync(FILE_NAME, {encoding: \"utf8\"});\nlet newData = oldData.replace(/new XHR2/g, \"new XMLHttpRequest\");\nfs.writeFileSync(FILE_NAME, newData, {encoding: \"utf8\"});\nIn file package.json, added:\n\"scripts\": {\n    \"install\": \"node fix-truffle.js\"\n  }\nThanks.. @cgewecke - just to finalize this issue (also for future readers):\nThe fix suggested above indeed seems to resolve the Could not connect to your Ethereum client problem discussed in this thread.\nHowever, it exposes yet another problem:\nInvalid JSON RPC response: \"Error: socket hang up\n  at createHangUpError (_http_client.js:331:15)\n  at Socket.socketOnEnd (_http_client.js:423:23)\n  at emitNone (events.js:111:20)\n  at Socket.emit (events.js:208:7)\n  at endReadableNT (_stream_readable.js:1056:12)\n  at _combinedTickCallback (internal/process/next_tick.js:138:11)\n  at process._tickCallback (internal/process/next_tick.js:180:9)\"\n  at ProviderError.ExtendableError (C:\\Users\\...\\webpack:\\~\\truffle-error\\index.js:10:1)\n  at new ProviderError (C:\\Users\\...\\webpack:\\~\\truffle-provider\\error.js:17:1)\n  at C:\\Users\\...\\webpack:\\~\\truffle-provider\\wrapper.js:71:1\n  at C:\\Users\\...\\webpack:\\~\\truffle-provider\\wrapper.js:129:1\n  at exports.XMLHttpRequest.request.onreadystatechange (C:\\Users\\...\\webpack:\\~\\web3\\lib\\web3\\httpprovider.js:128:1)\n  at exports.XMLHttpRequest.dispatchEvent (C:\\Users\\...\\webpack:\\~\\xmlhttprequest\\lib\\XMLHttpRequest.js:591:1)\n  at setState (C:\\Users\\...\\webpack:\\~\\xmlhttprequest\\lib\\XMLHttpRequest.js:610:1)\n  at exports.XMLHttpRequest.handleError (C:\\Users\\...\\webpack:\\~\\xmlhttprequest\\lib\\XMLHttpRequest.js:532:1)\n  at ClientRequest.errorHandler (C:\\Users\\...\\webpack:\\~\\xmlhttprequest\\lib\\XMLHttpRequest.js:459:1)\n  at Socket.socketOnEnd (_http_client.js:423:9)\n  at endReadableNT (_stream_readable.js:1056:12)\n  at _combinedTickCallback (internal/process/next_tick.js:138:11)\n  at process._tickCallback (internal/process/next_tick.js:180:9)\nThis problem seems to be of the following nature:\nIt happens only at the beginning of a test which is conducted after a \"massive\" one\nIt is a subset of the original problem, i.e.:\nWithout the fix, the old problem will necessarily appear where the new problem does\nWith the fix, the new problem will not necessarily appear where the old problem does\n\nI believe that a possible fix for this problem is in the XMLHttpRequest function, around the area of:\nrequest = doRequest(options, responseHandler).on(\"error\", errorHandler);\nPerhaps there's a missing handler for this request, for its socket, for its response or for its response's socket.\nIn either case, I have not been able to resolve it.\nMost of my attempts were focused on searching NodeJS HTTP API for functions and/or events which might be used here.\nThe fact that a \"massive\" test completes successfully, but only when it takes place, does the next test emit this error (immediately when it begins) should give some hints, but I'm not sure what. It seems that the \"massive\" test does not release the socket when it is held for a long period (cutting this test shorter resolves the problem).\nA simple workaround for this problem is to execute truffle test separately for each test file.\nIn other words, closing and reopening Truffle solves the problem, which implies that some resource (a socket?) is not released until Truffle is closed.\nUnfortunately, this workaround is insufficient for solidity-coverage users (myself being among them), since this utility cannot be executed separately for each test file.\nIf someone can find a way to apply this (\"close and reopen after every test file\") in Truffle source code itself, then it might be a good solution.\nI tried that too - in the Test.run function, at line js_tests.forEach(function(file)... - but couldn't quite get it to work.. @cgewecke:\nI have managed to fix (or if you will, find a workaround for) the socket hang up issue described above, which has emerged after I had resolved the original issue (by replacing XHR2 with XMLHttpRequest).\nAs mentioned before, this socket hang up error seems to be pretty consistent in the fact that it happens only at the end of a massive test (or perhaps at the beginning of the test that follows).\nA deeper investigation has shown that it always happens as a result of a request consisting of payload.method === 'evm_revert', to which the response is an error message (and obviously an invalid JSON).\nA glimpse at Ganache source code reveals that evm_revert is indeed executed at the end of each test (using afterEach).\nThough I don't have any real evidence to support this, I think that it is possibly because an evm_revert executed after a massive test takes a very long time to complete, during which the connection is timed out.\nBy the way, the status of this response is 0. I previously bumped into some GitHub thread referring to why you've decided not to ignore status 0 in Truffle (the reason being that a test might fail silently, if I remember correctly). I can't find this thread now, but you were in it, so you might find the remaining of this comment relevant.\nIn any case, in order to workaround the socket hang up error, I simply fixed Truffle source code to ignore an error in the response if the request's payload.method is evm_revert.\nSince evm_revert is not really a part of any test which I could possibly run on Truffle, I am confident that this fix cannot do any harm, for example (yet again), allow a test to fail silently.\nHere is the extended workaround (for both problems), for any future readers:\n1. Next to file package.json, add file fix-truffle.js:\n```\nlet FILE_NAME = \"./node_modules/truffle/build/cli.bundled.js\";\nlet TOKENS = [\n    {prev: \"request = new XHR2\", next: \"request = new XMLHttpRequest\"},\n    {prev: \"error = errors.InvalidResponse\", next: \"error = payload.method === 'evm_revert' ? null : errors.InvalidResponse\"}\n];\nlet fs = require(\"fs\");\nlet data = fs.readFileSync(FILE_NAME, {encoding: \"utf8\"});\nfor (let token of TOKENS) {\n    data = data.replace(new RegExp(token.prev, \"g\"), token.next);\n    console.log(replaced \"${token.prev}\" with \"${token.next}\");\n}\nfs.writeFileSync(FILE_NAME, data, {encoding: \"utf8\"});\n2. In file `package.json`, add:\n  \"scripts\": {\n    \"install\": \"node fix-truffle.js\"\n  }\n```\nThanks\nUPDATE:\nIt seems that even if a socket hang up error which occurs as a result of an evm_revert request at the end of a test is resolved (by ignoring it), a similar error may then occur as a result of an evm_snapshot request at the end of the next test.\nWe can slightly extend the workaround above to handle both cases, by changing this:\npayload.method === 'evm_revert'\n\nTo this:\npayload.method.startsWith('evm')\n\nAs evm requests are not something likely to be invoked directly from a testing script, I think that this extension is quite safe (i.e., will not cast away \"real\" errors in a given test).\nHowever, generally speaking, I get the feeling that while Ganache takes a very long time to complete these requests in some cases (more specifically, after a massive test is conducted), the connection is simply (and abruptly) terminated.\nThe fact that restarting truffle test resolves this issue, implies that even if it is \"Ganache's fault\" (for taking so long to complete), it is \"Truffle's fault\" in handling it.\nI am not very \"happy\" with the workaround proposed above, and I believe that a better approach would be to:\n1. Investigate why Ganache takes so long to complete evm_revert and evm_snapshot.\n2. Investigate why Truffle \"has a problem\" with the fact that Ganache takes so long to do it.\nUPDATE 2:\nFor safety, extend this:\npayload.method.startsWith('evm')\n\nTo this:\ntypeof payload.method === 'string' && payload.method.startsWith('evm')\n\nOr even to this:\npayload.method === 'evm_revert' || payload.method === 'evm_snapshot'\n\n. @cgewecke:\nThank you.\nI assume that the purpose of these two functions is to reset the EVM emulation back to an initial state, so that each one of the tests executed by Truffle will start under the exact same conditions, regardless of the order in which the tests are executed (and of course, the exact same conditions will continue to apply every time you invoke truffle test).\nAll of this is designated to ensure deterministic execution, I assume, so making these functions optional is probably in contrast with correct testing methodologies.\nThat said, since it's optional, I guess that there's no harm done (i.e., Truffle users can choose that on their own risk).\nThat said #2, I've already added an npm-post-install script to fix Truffle source code, so I'm not in any dire need for this feature (though, I suppose I'll have to do some maintenance work on that script every time I update Truffle version, so perhaps it WILL help me in the future).\nIt would help for sure if you could check with Ganache developers what might cause the execution of evm_revert and evm_snapshot be so lengthy.\nThank you for your help.. @cgewecke:\nI have a total of 27 tests, so each one of these functions is invoked 27 times if that's what you mean.\nOtherwise, can you please elaborate on what you mean by \"how many blocks\"?\nShould I use web3 in order to get the block-number at the beginning and end of my longest test, and calculate the difference?. @cgewecke:\nJust by looking at the code, I estimate that:\n- The test in which the evm_revert request fails, executes approximately 16943 RPCs.\n- The test in which the evm_revert request fails and the evm_snapshot request of following test also fails, executes approximately 28954 RPCs.\nI could give you more accurate figures by getting the block number before and after, but that would take me a while (each one of them runs for about 15-20 minutes or so).\nThanks. @cgewecke : The error specified by vicnaum (connection error) does not seem to have any relation whatsoever with the issue described in this thread, which appears to be the result of limited resources (more precisely, the system runs out of HTTP connections).. @gnidan:\nAFAIK, this is still a problem on Truffle 4.1.15 (which still uses XHR2 instead of XMLHttpRequest).\nIn Truffle 5.x this is possibly fix, since this part of the code has changed, though I haven't verified that, as it requires a bit of work on both my contracts and my tests.\nTo my understanding, you have released 4.1.15 specifically for this reason (i.e., for those who aren't rushing to upgrade their Solc and Web3 major versions).\nSo you might want to keep this issue opened until fixed in the Truffle 4 branch (or at least leave a note somewhere to mention that this problem is as viable as ever).\nThanks. @kermankohli - side note:\nI believe that you have a logical error in file https://github.com/8x-protocol/8x-protocol/blob/master/test/helpers/assert_revert.js.\nIf promise is completed successfully, then you throw an exception with an error message containing \"revert\".\nYou then catch this error, and since its message contains \"revert\", you determine that the test has completed successfully.\nInstead, I suggest that you throw null, and then first thing inside the catch, you do:\nassert(error, 'Expected an error containing \"revert\" but did not get any');. @kermankohli:\n\nExactly, but this exception is thrown in the try part and caught in the catch part.\nThen, in the catch part, you throw another exception, and that exception is the one that will eventually indicate whether the test has succeeded or failed.\nNow, take a look at that exception (the one thrown from inside the catch part) - it is thrown only if the error message does not contain \"revert\".\nSo, let's analyze a scenario in which the promise completes successfully, hence the test should fail:\n\nIn the try part, the promise completes successfully\nIn the try part, you throw an exception with \"revert\" in its error message\nIn the catch part, you detect \"revert\" in the error message and do not throw an exception\nNo exception is thrown, and the test completes successfully\n\nIn order to understand the logical confusion, keep in mind that there are two different failure scenarios which you need to detect and handle:\n\nNo error has occurred (the promise has completed successfully)\nAn error without \"revert\" has occurred (the promise has failed but not because of require)\n\nIn your code, I believe that you detect the first scenario correctly, but you handle it incorrectly.. @kermankohli:\nOK, perhaps I am missing something.\nThe thing to understand is that the Mocha framework reports a failure only when your test (it) throws an exception.\nWhen that happens, the Mocha framework catches this exception and reports failure on the specific test at hand.\nWhen you throw an exception and immediately catch it, the Mocha framework is not even aware of it.\nThat said, here is my analysis of your code and why I think it handles a specific scenario incorrectly:\ntry { // an exception will be thrown from inside this 'try' clause for sure\n  await promise; // either here (if the promise has failed)\n  assert.fail('Expected revert not received'); // or here (if the promise has succeeded)\n} catch (error) { // but this exception will be immediately caught inside this 'catch' clause\n  const revertFound = error.message.search('revert') >= 0;\n  assert(revertFound, `Expected \"revert\", got ${error} instead`);\n}\nNow, let's analyze the catch clause:\n\nAn exception will be thrown by the assert only if 'revert' is not found in the error message.\nIf no exception is thrown, then the Mocha framework will report success on the given test.\nWhen the promise succeeds, the error message is 'Expected revert not received', hence contains 'revert'.\nHence no exception is thrown and the test will succeed although it should fail because the promise succeeded.\n\nIn any case, I have posted it on Zeppelin GIT as well (here).. @cgewecke: Thank you, but keep in mind that the catch is where the actual problem hides in this case.. @cgewecke:\nYes it does, thank you.\nThough it is not really clear to me why I should pass an ASCII string where the compiler would expect an integer (or an array of 1-byte integers).\nPerhaps it is my lack of understanding of the 'byte' types.. @cgewecke:\nYes, thank you for clarifying it!. @gnidan:\nThank you for your quick response.\nMy code had failed to compile before I configured Truffle 5.0.0 to use Solc 0.4.24, but it compiled successfully afterwards.\nSo for the sake of the problem at hand, I don't see any point applying your suggestion. I mean, it will either compile the same as now, or not compile at all. If you still think otherwise, then I will be happy to give it a try.\nThanks.. @gnidan:\nSorry for the holiday interruption, and thank you for your quick responses despite of that :)\nI have followed your parseCode suggestion.\nThe files are rather large, so I've uploaded them to a free hosting service, and you can retrieve them at:\n- Truffle_4.1.14_ParsedCode.json\n- Truffle_5.0.0_ParsedCode.json\nThese files should be available for the next 30 days.\nI would take a wild guess that when you set Truffle to work with a user-configured Solc version, you take a nightly version instead of the committed version.\nBTW, I've noticed that the output byte-code on Truffle 5.0.0 is significantly larger than that of Truffle 4.1.14. Any ideas why would that be?\nPasting both of them here:\nlet v4 = \"0x608060405260008054600160a060020a03191633179055610461806100256000396000f30060806040526004361061008d5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663238dafe08114610092578063328d8f72146100bb5780634e71e0c8146100d75780636aa633b6146100ec578063715018a6146101015780638da5cb5b14610116578063e30c397814610154578063f2fde38b14610169575b600080fd5b34801561009e57600080fd5b506100a7610197565b604080519115158252519081900360200190f35b3480156100c757600080fd5b506100d560043515156101b8565b005b3480156100e357600080fd5b506100d5610226565b3480156100f857600080fd5b506100a76102e0565b34801561010d57600080fd5b506100d5610301565b34801561012257600080fd5b5061012b610392565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561016057600080fd5b5061012b6103ae565b34801561017557600080fd5b506100d573ffffffffffffffffffffffffffffffffffffffff600435166103ca565b60015474010000000000000000000000000000000000000000900460ff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1633146101dc57600080fd5b6001805491151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff16331461024a57600080fd5b6001546000805460405173ffffffffffffffffffffffffffffffffffffffff93841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff841617909155169055565b60015474010000000000000000000000000000000000000000900460ff1690565b60005473ffffffffffffffffffffffffffffffffffffffff16331461032557600080fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a2600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103ee57600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790555600a165627a7a72305820cd1728afd2794a087811285d079659a5c58bd85a0bff332d2fb989346174d3d20029\"\nlet v5 = \"0x6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610698806100536000396000f30060806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063238dafe014610093578063328d8f72146100c25780634e71e0c8146100f15780636aa633b614610108578063715018a6146101375780638da5cb5b1461014e578063e30c3978146101a5578063f2fde38b146101fc575b600080fd5b34801561009f57600080fd5b506100a861023f565b604051808215151515815260200191505060405180910390f35b3480156100ce57600080fd5b506100ef600480360381019080803515159060200190929190505050610252565b005b3480156100fd57600080fd5b506101066102ca565b005b34801561011457600080fd5b5061011d610469565b604051808215151515815260200191505060405180910390f35b34801561014357600080fd5b5061014c610480565b005b34801561015a57600080fd5b50610163610582565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101b157600080fd5b506101ba6105a7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561020857600080fd5b5061023d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105cd565b005b600160149054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156102ad57600080fd5b80600160146101000a81548160ff02191690831515021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561032657600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600160149054906101000a900460ff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104db57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561062857600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820f4f0ee794ccafa439a347ae33340bf5d35a83b12d53a34620ac9fa7633acda8d0029\"\nThanks\nUPDATE:\nLooking into your source code, you are fetching the compiler version from https://solc-bin.ethereum.org/bin/list.json.\nHowever, I believe that you are choosing the first version that matches the user configuration, instead of the last. In this case, v0.4.24-nightly.2018.4.19+commit.27d79906 instead of v0.4.24+commit.e67f0147 (you can open the link above and search for all occurrences of 0.4.24).\nHere is what I think is the relevant piece of code:\n```\nconst defaultConfig = {\n  version: null,\n  versionsUrl: \"https://solc-bin.ethereum.org/bin/list.json\",\n  compilerUrlRoot: \"https://solc-bin.ethereum.org/bin/\",\n  dockerTagsUrl:\n    \"https://registry.hub.docker.com/v2/repositories/ethereum/solc/tags/\",\n  cache: true\n};\n...\n/*\n * Fetches solc versions object from remote solc-bin. This includes an array of build\n * objects with detailed version info, an array of release version numbers\n * and their terminal url segment strings, and a latest version key with the\n * same.\n * @return {Object} versions\n /\nCompilerSupplier.prototype.getVersions = function() {\n  const self = this;\n  const spinner = ora({\n    text: \"Fetching solc version list from solc-bin\",\n    color: \"yellow\"\n  }).start();\nreturn request(self.config.versionsUrl)\n    .then(list => {\n      spinner.stop();\n      return JSON.parse(list);\n    })\n    .catch(err => {\n      spinner.stop();\n      throw self.errors(\"noRequest\", self.config.versionsUrl, err);\n    });\n};\n```\n. ",
    "kc1116": "After adding some console logs to the cli build file inside the Resolver.prototype.require function I can see truffle creates some directories under /var/folders/ I inspected these directories and it looks liek the json ABI file I need is inside one of them but the require function is getting called with the seatch_path of one of the directories that does not contain that specific json file. How does truffle decide to put json files where ? . I am getting the same problems with truffle compile now, when trying to import this module that artifacts.require can not find. . Hi @cgewecke  I will not re-open but I don't think truffle behaves that way. When I use the import statement you have above truffle will indeed create a .JSON ABI file for the Bounty.sol. If I wanted to artifact.require the Bounty.sol file it should work. But sometimes it does not. . ",
    "kunalb16": "I have the same issue as pointed by  @cgewecke. Truffle test does not work with contracts outside the contracts folder. \nI am having the same behaviour and i don't think his hack should be the best way to solve this. \nThis error comes only when using \"truffle test\", but not with \"truffle deploy\". \n// Sample import statements in a Solidity file located at: contracts/.sol\nimport \"../node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol\"; \n. And I have created the tests using solidity http://truffleframework.com/docs/getting_started/solidity-tests\n. So my Project folder looks like:\nProject\n--node_modules/zeppelin/contracts/ownable.sol\n--TruffleInitFolder/contracts/mycontract.sol //This contract has reference to the ownable contract via \"../../node_modules/zeppelin/contracts/ownable.sol\"\n--TruffleInitFolder/test/Test_mycontract.sol\nNow, when I use truffle test, it fails. But, truffle deploy is working flawlessly.\nI get the error\n\"before all\" hook: prepare suite for \"should assert true\"\n. Just tested by moving the zeppelin folder within the contracts folder and the tests run. So there is definitely a bug.. Well that was a good explanation, that helped me debug why my tests were failing and find a fix.\nTakeaway,\nTruffle test work only if you have a contract inside truffle root directory\nSo if you are using zeppelin-contracts. Make sure they are installed in truffle root directory, if you are using workspaces in yarn and truffle directory is one of your several workspaces, there is a no-hoist feature in yarn/learna that can help you do that.. Facing the same issue, When would this be fixed? Any timeline?. ",
    "raininja": "I'm having this issue and I am using the standard file setup.  Is there some other error that would cause this behavior?  I can see the corresponding JSON file in build/contracts as well. . . is it possible that  deprecation warnings  in the contract would cause this?\n```\nbuild/contracts /\n  - Migrations.json\n  - BountyBG.json\ncontracts /\n  - Migrations.sol\n  - bContract.sol\nnode_modules /\n  - openzeppelin-solidity /\ntruffle.js. ",
    "Remi-Burgel": "Hi, could you share the code that does not compile please ?. ",
    "jiangcare": "vim /usr/local/lib/node_modules/truffle/build/cli.bundled.js\n// Enable fsevents on OS X when polling isn't explicitly enabled.\n  //if (undef('useFsEvents')) opts.useFsEvents = !opts.usePolling;\n// If we can't use fsevents, ensure the options reflect it's disabled.\n  //if (!FsEventsHandler.canUse()) opts.useFsEvents = false;\n  opts.useFsEvents = false;. ",
    "SachinJanani": "I was also facing this issue and the solution provided by @jiangcare worked for me. Thanks @jiangcare . @rushairer Use the solution provided by @jiangcare it worked for me. ",
    "rushairer": "Truffle v4.0.5 (core: 4.0.5)\nSolidity v0.4.18 (solc-js)\n```\n/usr/local/Cellar/node/8.9.1/lib/node_modules/truffle/build/cli.bundled.js:220548\n  return (new fsevents(path)).on('fsevent', callback).start();\n          ^\nTypeError: fsevents is not a constructor\n    at createFSEventsInstance (/usr/local/Cellar/node/8.9.1/lib/node_modules/truffle/build/cli.bundled.js:220548:11)\n    at setFSEventsListener (/usr/local/Cellar/node/8.9.1/lib/node_modules/truffle/build/cli.bundled.js:220602:16)\n    at FSWatcher.FsEventsHandler._watchWithFsEvents (/usr/local/Cellar/node/8.9.1/lib/node_modules/truffle/build/cli.bundled.js:220766:16)\n    at FSWatcher. (/usr/local/Cellar/node/8.9.1/lib/node_modules/truffle/build/cli.bundled.js:220900:25)\n    at gotStat (fs.js:1775:21)\n    at FSReqWrap.oncomplete (fs.js:152:21)\n```. @SachinJanani  Thanks.. ",
    "Nagaraj007": "It's works solution provided my @jiangcare. ",
    "broncha": "@Nagaraj007 why would you close this!  @jiangcare's solution works, but that is not a proper solution!\n. ",
    "pd164594": "I am having the same issue here.  Even when I try @jiangcare  solution I receive that error.  I am not sure what is the issue here.  Any more insight on this issue would be great!. ",
    "Emobe": "@Nagaraj007 That is not a solution. It works but taking out the broken code is not the answer.. ",
    "webtip": "\nvim /usr/local/lib/node_modules/truffle/build/cli.bundled.js\n// Enable fsevents on OS X when polling isn't explicitly enabled.\n//if (undef('useFsEvents')) opts.useFsEvents = !opts.usePolling;\n// If we can't use fsevents, ensure the options reflect it's disabled.\n//if (!FsEventsHandler.canUse()) opts.useFsEvents = false;\nopts.useFsEvents = false;\nwhy do?. \n",
    "gititGoro": "Update: this error comes up when there's a type mismatch. Be careful when testing not to pass a string of an int when the contract expects a uint. In testing when I called placePredictions(\"0\",12) I got the error incorrect number of arguments as opposed to something like \"type mismatch\". This might be a sign to me that I need to move my testing to typescript.. ",
    "nachomazzara": "I'm getting the same issue +1. ",
    "etherwaifu": "\nI got hit by the same bug as shown above. Workaround that works in Truffle 4.1.5:\nawait instance.contract.functionName['argType1', 'argType2'](arg1, arg2);\nFor instance, because await contract.tokenMetadata(i) fails, I can instead use await contract.contract.tokenMetadata['uint256'](i)\n. ",
    "vrogojin": "@etherwaifu Your solution does not work for me. It says TypeError: contract.function[((\"address\" , \"address\") , \"uint256\")] is not a function. No idea why it has grouped (\"address\" , \"address\") together, even though I defined it as ['address','address','uint256']. Looks like, the only solution here, I need to have different names for the functions :(. Update: the issue seems to be caused by truffle-wallet-provider. ",
    "hynese": "Yeah, calling overloaded functions in truffle seems to be borked...\nI changed from async/await:\n```\nlet tx = await instance.announceDividend(_nShares,_timestampWithdrawOpened,{from: accounts[0], value: _dividendAmount})\n    // then\n    truffleAssert.eventEmitted(tx, 'LogAnnounce', (ev) => {\n      //console.log(ev)\n      ...\n\n```\nback to:\ninstance.announceDividend(_nShares,_timestampWithdrawOpened,{from: accounts[0], value: _dividendAmount})\n        .then(function(a,b){\n          console.log(a)\n          console.log(b)\n        })\nand it was OK...\nApparently the truffle fork (https://github.com/Neufund/truffle-contract/commit/ecae09942db60039f2dc4768ceeb88776226f0ca) works? (haven't tried)\nI even tried:\nnpm install --save trufflesuite/truffle#develop (didn't work...)\nSo, my solution is to use plain old JavaScript and abandon async/await syntax for now.. ",
    "tsingyi": "@vrogojin The workaround given by @etherwaifu for multiple arguments is incorrect and is not work for either. After debugging the code, I found that instance.contract.functionName is an object, the key of the object is the string of arguments type concatenate by the comma, so the right solution would be await instance.contract.functionName['argType1,argType2'](arg1, arg2);.. ",
    "rotcivegaf": "In the meantime you can use web3.eth.sendTransaction and web3.eth.call to send your transactions\nIn example, you have this functions in a contract:\nfunction foo (uint256 x) external view returns (uint256) { return x; }\nfunction foo2 (uint256 x, uint256 y) external view returns (uint256) { return x + y; }\nget foo its easy... but for get foo2 you can calculate the signature, in this case:\nconst fooSignature = Web3.soliditySha3( { t: 'string', v: 'foo(uint256,uint256)' })\nand finally call the function\nconst xPlusY = await web3.eth.call({\n    to: myContract,\n    data: fooSignature.slice(0, 10) + Web3.padLeft(x, 64).slice(2) + Web3.padLeft(y, 64).slice(2),\n});. ",
    "tjanson": "I think it could still fail better: If I understand correctly, the first declared overload is used when you invoke myContract.someMethod, while the other overloads are only accessible in other ways.\nThen there\u2019s some code that (heuristically?) determines wether some of the arguments are DefaultBlockParameters (I\u2019m sorry I don\u2019t remember the name), and pops them from the args array.\nAs a result, the error may say something like \"passed 3 arguments, expected 2\", when in fact you passed 4.\nYes, if you\u2019re already aware of how accessing the overloaded methods work, such errors are easy to understand. But if you assume that overloaded functions just work, you\u2019re going to have to fire up a debugger. I\u2019m not saying this is a bug, just a usability issue that I imagine many people will run into.\nMaybe just add a hint about overloaded functions in the error message text?. @k06a see \u201cOverloaded Solidity functions\u201d in the 5.0 release notes. I\u2019m not sure if Truffle\u2019s folder / project structure changed, but in any case the CLI runner is present at this path now: node_modules/truffle/build/cli.bundled.js. No need to install truffle-core.. ",
    "stevenlcf": "Just for your information, there are also some function overloading bugs in solidity compiler, which is about payable and non-payable functions with same names. You can find more details here: https://github.com/ethereum/solidity/issues/526\nI thought it was a truffle bug at first and followed this issue. But after wandering around for a while, I finally found out that it was a bug of solidity compiler. So I post it here and hope it can help others who may have the same issues of me.. ",
    "emaG3m": "I'm getting this too. seems to be coming from solc, full error:\n```\nnpm ERR! Darwin 16.6.0\nnpm ERR! argv \"/Users/user/.nvm/versions/node/v6.11.3/bin/node\" \"/Users/user/.nvm/versions/node/v6.11.3/bin/npm\" \"install\" \"truffle\"\nnpm ERR! node v6.11.3\nnpm ERR! npm  v3.10.10\nnpm ERR! code ETARGET\nnpm ERR! notarget No compatible version found: require-from-string@^1.1.0\nnpm ERR! notarget Valid install targets:\nnpm ERR! notarget 2.0.2\nnpm ERR! notarget\nnpm ERR! notarget This is most likely not a problem with npm itself.\nnpm ERR! notarget In most cases you or one of your dependencies are requesting\nnpm ERR! notarget a package version that doesn't exist.\nnpm ERR! notarget\nnpm ERR! notarget It was specified as a dependency of 'solc'\nnpm ERR! notarget\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/user/npm-debug.log\n```\n  . ",
    "tovinayv": "Facing same issue\nnpm ERR! Linux 2.6.32-642.6.2.el6.x86_64\nnpm ERR! argv \"/dbc/blr-dbc404/vinayv/nodejs/lin64/bin/node\" \"/dbc/blr-dbc404/vinayv/nodejs/lin64/bin/npm\" \"--registry\" \"http://build-artifactory.eng.vmware.com:80/artifactory/api/npm/npm\" \"i\"\nnpm ERR! node v6.9.4\nnpm ERR! npm  v3.10.10\nnpm ERR! code ETARGET\nnpm ERR! notarget No compatible version found: require-from-string@^1.1.0\nnpm ERR! notarget Valid install targets:\nnpm ERR! notarget 2.0.2\nnpm ERR! notarget\nnpm ERR! notarget This is most likely not a problem with npm itself.\nnpm ERR! notarget In most cases you or one of your dependencies are requesting\nnpm ERR! notarget a package version that doesn't exist.\nnpm ERR! notarget\nnpm ERR! notarget It was specified as a dependency of 'cosmiconfig'\nnpm ERR! notarget\n. ",
    "matiasmansilla1989": "I was facing the same issue yesterday but it's working ok now.. ",
    "nikhilshekhawat": "Inside utils/getWeb3.js change line 24 to: (edited)\nvar provider = new Web3.providers.HttpProvider(\u2018http://127.0.0.1:8545\u2019)\nThere is a typo there for the port number. Hopefully they accept the pull request:\nhttps://github.com/truffle-box/react-box/pull/42. ",
    "Tmeister": "Same issue here.\nI'm using the StandardToken contract as follows:\n```\npragma solidity ^0.4.18;\nimport 'zeppelin-solidity/contracts/token/StandardToken.sol';\ncontract MyTestToken is StandardToken {\n    string public name = 'TEST';\n    string public symbol = 'TST99';\n    uint8 decimals = 18;\n    uint public INITIAL_SUPPLY = 30000000e18;\nfunction TestToken () public {\n    totalSupply = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n}\n\n}\n```\nThe test function:\nfunction test_transfer_with_invalid_amount() public {\n        bool transferSuccessful = _fundaryTestToken.transfer(_owner, 31000000000000000000000000);\n        Assert.isFalse(transferSuccessful, 'Addresses should not be able to transfer more tokens than allocated');\n    }\nRun truffle test\n```\n\u279c  mastercoin git:(master) \u2717 truffle test\nUsing network 'development'.\nCompiling ./contracts/TestToken.sol...\nCompiling ./test/MyTestToken.sol...\nCompiling truffle/Assert.sol...\nCompiling zeppelin-solidity/contracts/math/SafeMath.sol...\nCompiling zeppelin-solidity/contracts/token/BasicToken.sol...\nCompiling zeppelin-solidity/contracts/token/ERC20.sol...\nCompiling zeppelin-solidity/contracts/token/ERC20Basic.sol...\nCompiling zeppelin-solidity/contracts/token/StandardToken.sol...\nMyTestToken\n    \u2713 test_constructor (88ms)\n    \u2713 test_transfer_with_valid_amount (148ms)\n    1) test_transfer_with_invalid_amount\n    > No events were emitted\n    \u2713 test_totalSupply (84ms)\n    \u2713 test_approve_whit_valid_amount (100ms)\n    \u2713 test_allowance_with_no_allocated_balance (121ms)\n    \u2713 test_allowance_with_allocated_balance (149ms)\nContract: MyTestToken\n    \u2713 Should contain 30000000000000000000000000 MyTestToken in circulation\n7 passing (3s)\n  1 failing\n1) MyTestToken test_transfer_with_invalid_amount:\n     Error: VM Exception while processing transaction: revert\n      at Object.InvalidResponse (/Users/tmeister/.nvm/versions/node/v6.11.1/lib/node_modules/truffle/build/cli.bundled.js:41484:16)\n      at /Users/tmeister/.nvm/versions/node/v6.11.1/lib/node_modules/truffle/build/cli.bundled.js:329530:36\n      at /Users/tmeister/.nvm/versions/node/v6.11.1/lib/node_modules/truffle/build/cli.bundled.js:325200:9\n      at XMLHttpRequest.request.onreadystatechange (/Users/tmeister/.nvm/versions/node/v6.11.1/lib/node_modules/truffle/build/cli.bundled.js:328229:7)\n      at XMLHttpRequestEventTarget.dispatchEvent (/Users/tmeister/.nvm/versions/node/v6.11.1/lib/node_modules/truffle/build/cli.bundled.js:176415:18)\n      at XMLHttpRequest._setReadyState (/Users/tmeister/.nvm/versions/node/v6.11.1/lib/node_modules/truffle/build/cli.bundled.js:176705:12)\n      at XMLHttpRequest._onHttpResponseEnd (/Users/tmeister/.nvm/versions/node/v6.11.1/lib/node_modules/truffle/build/cli.bundled.js:176860:12)\n      at IncomingMessage. (/Users/tmeister/.nvm/versions/node/v6.11.1/lib/node_modules/truffle/build/cli.bundled.js:176820:24)\n```\nLogs\n[7:26:15 PM] eth_sendTransaction\n[7:26:15 PM]   Transaction: 0x4e99c36525a65e9451f68a5f373bec2c9d99858107d750da0e5bd552a5ebee09\n[7:26:15 PM]   Gas usage: 24281\n[7:26:15 PM]   Block Number: 84\n[7:26:15 PM]   Block Time: Thu Jan 11 2018 19:26:15 GMT-0600 (CST)\n[7:26:15 PM]   Runtime Error: revert\nEnvironment\nOperating System: macOS High Sierra 10.13.2 (17C88)\nTruffle version: Truffle v4.0.4 (core: 4.0.4)\nEthereum client: Truffle Test\nGanache 1.0.1. ",
    "vladfr": "@skmgoldin - hi, I was able to reproduce this, I'll take a stab at fixing it this week.. @skmgoldin Hey, so this happens in truffle-compile/parser.js. When it merges all files into one .sol and sends it to solc, it does not filter by warnings. Therefore, all errors + warnings are seen as Exceptions and stop the publish.\nThe compile command has its strict mode off, which means it's filtering out warnings.\nA second issue is that the compiler can't resolve imports correctly, so if you actually use a function from an import, it will fail when doing parse like truffle publish does.\nSubmitted https://github.com/trufflesuite/truffle-compile/pull/48. Thanks!\nOn Thu, Mar 22, 2018, 19:10 gnidan notifications@github.com wrote:\n\n@skmgoldin https://github.com/skmgoldin: @vladfr\nhttps://github.com/vladfr's PR is merged; will go out with the next\nrelease. Thanks!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/744#issuecomment-375384756,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAM-h5qu17FOSACEg7UXnveOfCOjaTf2ks5tg9segaJpZM4RYnl1\n.\n. \n",
    "MathieuMailhos": "Thanks a lot for your answer. Unfortunately, this change did not cause it to succeed on Geth.\nUpdating initial post with a specified from in truffle.js also to use proper address.. @cgewecke Thanks so much, works like a charm! . ",
    "LeRoyJulian": "Same problem for me...\nRunning migration: 2_deploy_contracts.js\n  Deploying BlockchainvestTokenCrowdsale...\n  ... 0xc46a28d51e7b3f9c39aaeaf9d5ebedf2012babb13913e4387d204ab95d1b39cd\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: The contract code couldn't be stored, please check your gas amount.\nSource: https://github.com/LeRoyJulian/BlockchainvestToken. ",
    "maroodb": "Hello World!\nI faced the same error, but with a different scenario.\nThe same transaction succeed the first time, but it fails when I executed for the second time.\nContract.deployed().then((instance) => {\n  instance.addSkill(\"python\", \"github.com\", {gas: \"4712388\"}).then(console.log).catch(console.log);\n});\nwhen I run this script twice, the first time it succeed , but the first time it raises VM Exception while processing transaction: revert. ",
    "TedtheDev": "I saw some pull requests that I think resolve this issue. \nThese are the two that I found:\n1. https://github.com/trufflesuite/truffle/pull/776\n2. https://github.com/trufflesuite/truffle/pull/813\nI don't know how to link PR's but I think that would be helpful for someone that is looking to work on this issue or an update. Is this correct?\n. @cgewecke Awesome! Saw that one had more discussion.. Hi. I have been poking around the code and trying to figure out why the README is getting deleted. I figured I would give this a shot since it is just deleting a file. \nThe 'init' command is using 'bare-box'. https://github.com/truffle-box/bare-box/. In the truffle-box.json ignore property, it has README as one of the files to ignore (delete). First, yours gets overwritten by this one (I think) and truffle deletes it anyway when it is cleaning itself up.\nWhat you should do to avoid this is instead of creating a README first, run truffle init and then add a readme AFTER init. Another way you could avoid this issue is to rename your current README to something else like README_MINE and then run init. Finally, delete the truffle README and rename yours back to README. Voila! \nLet me know if that works. . The flag is a good idea, but I saw some code where you can't put anymore option on the init command. It looked like you could base which box you wanted to init with.\nPerhaps another suggestion is to only delete/reset necessary files related to a truffle project. For example, don't delete anything if there is any readme or other folders/files not related to truffle. \nSay you have a readme file, a folder named 'styles', a file named 'helloworld.js', another folder named 'contracts', a 'truffle.js' file, and 'truffle-box.js'. In theory, I would think it wouldn't delete the readme, folder named 'styles' and a file named 'helloworld.js', but it would delete and reset truffle.js, truffle-box.js, and the 'contracts' folder, etc because you are starting from scratch. . Hi. I am interested in giving this a try if someone hasn't started already. I have been looking at the code and might have an idea where to start. It will take some time, but I am willing to give it a shot.. @cgewecke Thank you for your comments. I will look into how you guys are doing unit tests and see if I can cover the appropriate scenarios as best as I can.. ",
    "vdrg": "Yes, it is a file in the test dir, thanks! Feel free to close this.. That is correct, we have multiple contract packages. Currently we are using lerna + yarn workspaces, which hoists absolutely everything to the root directory. What we are doing for now is using the nohoist option for yarn so that it doesn't hoist the specified packages: it creates a symlink for packages in the repo and for external packages it just copies them into the node_modules dir of each package.\nTbh maybe this is not really necessary :sweat_smile: as it can be \"fixed\" by doing what I described before. The only drawbacks of using nohoist is that you have to manually specify which packages you don't want to hoist and for external packages the code gets copied multiple times.. ",
    "muralisrinivas1234": "Sir,  Is  \"pragma experimental ABIEncoderV2\" in the experimental stage? .Can we include it the production???. ",
    "celeduc": "I have submitted PR #784 which requires 0.4.18 as the minimum version, but allows the use of versions less than 0.5.x.. Why is version \"0.4.18\" specifically used instead of \"^0.4.18\"? As semantic versioning is allegedly used, that means bugfix releases should be allowed.\nI've submitted PR #784 to change the version specified to \"^0.4.18\", which means 0.4.18, 0.4.19, etc will work, but 0.5.x (which will have breaking changes) will not. This will mean people will be able to upgrade solc without waiting for a Truffle release.. Why, why, why does Truffle persist in hard-coding the solc version? Allowing users to manage this dependency would allow us to upgrade solc to avoid dangerous compiler errors as they arise without maintaining our own fork.  It would be as simple as putting \"solc\": \"^0.4.25\" instead of \"solc\": \"0.4.25\" in the package.json.. @gnidan Thanks, I appreciate the tip. TFM is excellent :+1: . ",
    "Mukhtar-P152": "I am experiencing  the same issue but I am  using ubuntu 16.04 instead of windows. Could you specify what you mean by you deleted and recreated the project? Do you mean the whole dApp? or just on VS COde?. I deleted the \"project\" the whole dapp and re-cloned the repository to where I left of. When I re-ran the test it seemed to have imported the missing solc files. I think its a weird thing that effects VS Code.. I was following the react-auth-box , the tutorial i was following didnt have a git repo but i made a repo for myself and deleted the whole DApp I was working on (backed up just in case). I then downloaded my files back and continued where i left of.. ",
    "edevil": "I\u2019m having the same issue following the pet shop tutorial. The tutorial does not mention a git repo to clone, we just unbox the pet-shop box.\nI don\u2019t think the editor plays a part in this problem. Where should these files be located? Don\u2019t they come included with the truffle package that is installed globally?. ",
    "riccardopersiani": "I had this error with the last version of truffle: 4.1.12\nI did this because I was also fine using the truffle 4.1.3 version:\nnpm view truffle versions\nnpm uninstall -g truffle\nnpm install -g truffle@4.1.3\ntruffle compile\ntruffle test\nThat worked for me.. ",
    "waylandc": "\non ubuntu i had the same problem\nbut i had 2 test files a sol and .js\nwhen i've remove .sol test everything works fine again\n\nDeleting the file isn't really a resolution. The .sol file is an example of how to write tests in Solidity as opposed to JS. \nFWIW, I'm having this problem also on OSX.\nVSCode 1.27.2\nOSX High Sierra 10.13.6\nNode 10.8.0\nTruffle 4.1.14\nSolidity 0.4.24\n. ",
    "thomasoss": "From the windos command line (i.e. the gitbash command line) it didn't work for me (Windows 7). But it worked from the truffle develop command line\ntruffle develop\ntruffle(develop)> test\nor\ntruffle(develop)> test ./test/TestMetacoin.sol\ntruffle(develop)> test ./test/metacoin.js. From the windos command line (i.e. the gitbash command line) it didn't work for me (Windows 7). But it worked from the truffle develop command line\ntruffle develop\ntruffle(develop)> test\nor \ntruffle(develop)> test ./test/TestMetacoin.sol\ntruffle(develop)> test ./test/metacoin.js\n. ",
    "okwme": "i'm getting this error while running a test with some simple math. when i increase one of the variables (an addition) i get the error. when i decrease the variable it works correctly.. +1. Figured it out:\n```\nvar FirstContract = artifacts.require(\"./FirstContract.sol\");\nvar SecondContract = artifacts.require(\"./SecondContract.sol\");\nmodule.exports = async function (deployer, helper, accounts)  {\n  deployer.then(async () => {\n    try {\n      await deployer.deploy(FirstContract)\n      let firstContract = await FirstContract.deployed()\n  await deployer.deploy(SecondContract, firstContract.address)\n  let secondContract = await SecondContract.deployed()\n} catch (error) {\n  console.log(error)\n}\n\n})\n}\n```. ",
    "yondonfu": "ganache-cli v6.0.3\nAnd just to clarify the tests run fine both when using ganache-cli and when using Truffle's test blockchain environment. The lack of clean room environment seems to just be for other clients like Parity. ",
    "linusnorton": "This is especially pressing as the experimental ABI seems totally broken in 0.4.18. ",
    "ccashwell": "+1 \u2014 solc ^0.4.19 supports using structs from other contracts which is critical for my current project. I ended up forking, updating the solc version in package.json and installing my local fork instead of the latest release, but I'd love to not be stuck with that for more than a week or so of testing.. ",
    "jamesmorgan": "This would be great, I hit this often when minting large amounts of nfts \ud83d\udc4d . I've noticed this, a day or so ago it worked fine https://community.infura.io/t/problems-using-rinkeby/353 . It works fine today as well, guess it was an Infura issue. ",
    "vzts": "Suffering on this as well. I had to take the code to the remix to deploy, having failed from this error several times and it's costing too much real money..\ud83d\ude2d. Fixed in https://github.com/trufflesuite/truffle-core/pull/131.\nThe issue can be closed.. @cgewecke Thanks for looking into it! I've just tested this with other ethereum client(testrpc), and it looks like the issue with ganache-cli! In testrpc(the fork before ganache-cli was rebranded), it worked as expected(constant timestamp of last mined block), however in ganache-cli it yielded the increasing timestamp.\nAfter doing some research, I found it may have something to do with this issue(https://github.com/trufflesuite/ganache-cli/issues/336). I guess there is something messed up in interface layer inside ganache-cli, since accessing it with truffle test and with web3 interface are yielding two different results.\nAccording to this old Q&A, Gav(I guess Gavin Wood, the guy who wrote the yellow paper) said:\n\nThe return of block.timestamp can only be given as a best effort as will all other external execution environment parameters. Fundamentally, they're impossible to \"know\", except on the final mine, and since constant functions are never mined, they can never be properly defined. In cpp they take on values as they would if the client were about to mine them. It's a misunderstanding of the execution environment to believe 'now' would be wall time; all language is taken from the perspective of the contract executing, not from the user authoring/running.\n\nSo basically I think the people who design the client needs to define how block.timestamp behaves for constant functions(now a view or pure function), but they need to be consistent in how they want to define it. Right now I'm not sure how the key contributers in ganache-cli want to define it, but it's working inconsistently as far as I tested. It would be great if we can set a consensus on how block.timestamp(a.k.a now) should be defined in eth_calls and make it consistent over all interfaces.\nPersonally I think the block.timestamp should be the timestamp of last mined block since it's clear that calls are never mined. Or I would suggest to see how real-rpcs(parity or geth), has defined it.\nThanks a lot for maintaining this great project! If you think it's more proper to move the issue to ganache-cli repo, please feel free to do so.. I tested with both web3 1.0 beta, and [web3 0.x + truffle-contract] for comparison. The outcome was the same with consistent timestamp of last mined block.\nTo add one more finding, it seems that web3 interactions of view function in ganache-cli wasn't even logged as eth_call, both in web3 1.0 and 0.x. Maybe that's why it isn't increasing the time.. @cgewecke Thanks for the update! Absolutely agree on benjamin's opinion of how we should define \"correct behavior\". Since ganache is a test node, it is preferable to emulate well how real node behaves in such issues, so that users don't get confused in the wild when they actually deploy. So much for today, I will let you know if I have any new observation. Cheers!\ud83c\udf7b. @cgewecke That's great! I really appreciate your hard work!. ",
    "prographo": "Just had the \"nonce too low\" issue.. I just used remix to deploy.. Have the same.. ",
    "boyangwang": "Any workarounds at the moment?. ",
    "cckelly": "Just got this as well.. @cgewecke Top level requires, unfortunately the above gives me an issue about not being able to find artifacts.. @cgewecke Awesome thanks for your help, I'll give this a shot and report back. @cgewecke I believe this is old and can be closed.. ",
    "jlindberg-oss": "I got stuck on this issue too.  This workaround solved it for me:\nhttps://ethereum.stackexchange.com/questions/44349/truffle-infura-on-mainnet-nonce-too-low-error. ",
    "gz65555": "I got the same problem. I am using truffle 4.0.6 on windows 10.. ",
    "ben-nyllabs": "Same error with v 4.0.6 on osx 10.12.6\nDownloading...\nError: Error making request to https://raw.githubusercontent.com/truffle-box/bare-box/master/truffle.js. Got error: self signed certificate in certificate chain. Please check the format of the requested resource.\n    at Request._callback (/Users/bsaphier/.nvm/versions/node/v8.9.4/lib/node_modules/truffle/build/webpack:/~/truffle-box/lib/utils/unbox.js:42:1)\n    at self.callback (/Users/bsaphier/.nvm/versions/node/v8.9.4/lib/node_modules/truffle/build/webpack:/~/request/request.js:186:1)\n    at emitOne (events.js:116:13)\n    at Request.emit (events.js:211:7)\n    at Request.onRequestError (/Users/bsaphier/.nvm/versions/node/v8.9.4/lib/node_modules/truffle/build/webpack:/~/request/request.js:878:1)\n    at emitOne (events.js:116:13)\n    at ClientRequest.emit (events.js:211:7)\n    at TLSSocket.socketErrorListener (_http_client.js:387:9)\n    at emitOne (events.js:116:13)\n    at TLSSocket.emit (events.js:211:7). @cgewecke YES, there is! Should have been obvious, thank you! I just manually created the files/folders that truffle init makes, which only took like 30 seconds anyways... and now all is good. ",
    "0pay": "Same error on Windows 7\nD:\\DOC_ANT_CRY\\ETHEREUM\\TEST\\casino-ethereum>truffle init\nDownloading...\nError: Error making request to https://raw.githubusercontent.com/truffle-box/bare-box/master/truffle.js. Got error: connect ETIMEDOUT 151.101.0.133:443. Please check the format of the requested resource.\n    at Request._callback (D:\\DOC_ANT_CRY\\ETHEREUM\\SOFTWARE\\NODEJS\\node_modules\\truffle\\build\\webpack:\\~\\truffle-box\\lib\\utils\\unbox.js:42:1)\n    at self.callback (D:\\DOC_ANT_CRY\\ETHEREUM\\SOFTWARE\\NODEJS\\node_modules\\truffle\\build\\webpack:\\~\\request\\request.js:186:1)\n    at Request.emit (events.js:160:13)\n    at Request.onRequestError (D:\\DOC_ANT_CRY\\ETHEREUM\\SOFTWARE\\NODEJS\\node_modules\\truffle\\build\\webpack:\\~\\request\\request.js:878:1)\n    at ClientRequest.emit (events.js:160:13)\n    at TLSSocket.socketErrorListener (_http_client.js:389:9)\n    at TLSSocket.emit (events.js:160:13)\n    at emitErrorNT (internal/streams/destroy.js:64:8)\n    at process._tickCallback (internal/process/next_tick.js:152:19)\nWould you explain to me how to solve?\nThanks. @cgewecke \nI've done and this is the result\nCloning into 'truffle-init-bare'...\nfatal: unable to access 'https://github.com/trufflesuite/truffle-init-bare.git/': Received HTTP code 407 from proxy after CONNECT\nI 'm behind a proxy.\nHow can I manage this problem? . @lazaridiscom \nwhat is it?\nHow can I manage that?\nThanks. I' ve tried to compile launching the command\ntruffle compile\nbut I received the the Jscript runtime error\nmodule is undefined\n800A1391. ",
    "mokeychan": "I got the same problem on my machine. It caused by poor network.Thx\uff01@cgewecke \nBy the way,when l execute truffle unbox react,the new problem have emerged..\n$ truffle unbox react\nDownloading...\nUnpacking...\nSetting up...\nError: stdout maxBuffer exceeded\n    at Socket.onChildStdout (child_process.js:328:14)\n    at emitOne (events.js:116:13)\n    at Socket.emit (events.js:211:7)\n    at addChunk (_stream_readable.js:263:12)\n    at readableAddChunk (_stream_readable.js:246:13)\n    at Socket.Readable.push (_stream_readable.js:208:10)\n    at Pipe.onread (net.js:597:20)\nBut when i retry to do it ,it actually successed..It really amzing... ",
    "leapming": "https://stackoverflow.com/questions/10888610/ignore-invalid-self-signed-ssl-certificate-in-node-js-with-https-request\ntruffle init uses request to check the url availability, which throw an error as the above stackoverflow thread mentioned. ",
    "cantaloupeJinJin": "I got the same problem   when I use \"truffle init \" commond. I am using truffle5.0 on ubuntu16.\nDownloading...\nError: Truffle Box at URL https://github.com/truffle-box/bare-box.git doesn't exist. If you believe this is an error, please contact Truffle support.\n    at Request._callback (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-box/lib/utils/unbox.js:50:1)\n    at Request.self.callback (/usr/local/lib/node_modules/truffle/build/webpack:/~/request/request.js:185:1)\n    at Request.emit (events.js:182:13)\n    at Request. (/usr/local/lib/node_modules/truffle/build/webpack:/~/request/request.js:1157:1)\n    at Request.emit (events.js:182:13)\n    at IncomingMessage. (/usr/local/lib/node_modules/truffle/build/webpack:/~/request/request.js:1079:1)\n    at Object.onceWrapper (events.js:273:13)\n    at IncomingMessage.emit (events.js:187:15)\n    at endReadableNT (_stream_readable.js:1094:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)\n. > @cantaloupeJinJin I think there is currently something wrong with truffle init in version 4. If you upgrade to version 5 it should fix the problem.\n\nnpm uninstall -g truffle\nnpm i -g truffleI used npm uninstall -g truffle ,then I use  truffle version to check,but the truffle doesn't be uninstall,\njinjin@jinjin-virtual-machine:~$ npm uninstall -g Truffle\nup to date in 0.045s\njinjin@jinjin-virtual-machine:~$ truffle version\nTruffle v4.1.14 (core: 4.1.14)\nSolidity v0.4.24 (solc-js)  How could I solve the problem?\nThanks\n\n. @gnidan sorry,I  wrote a wrong  word ,actually I use it like this.\n\n. @wanching Thanks,but I still can't solve the problem,but now I use truffle in win10.\ud83d\ude00. ",
    "wanching": "@cantaloupeJinJin\nI got this error when I use truffle init:\nDownloading...\nError: Error making request to https://raw.githubusercontent.com/truffle-box/bare-box/master/truffle.js. Got error: connect ETIMEDOUT 10.0.0.1:443. Please check the format of the requested resource.\n    at Request._callback (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-box/lib/utils/unbox.js:45:1)\n    at self.callback (/usr/local/lib/node_modules/truffle/build/webpack:/~/request/request.js:185:1)\n    at Request.emit (events.js:182:13)\n    at Request.onRequestError (/usr/local/lib/node_modules/truffle/build/webpack:/~/request/request.js:877:1)\n    at ClientRequest.emit (events.js:182:13)\n    at TLSSocket.socketErrorListener (_http_client.js:392:9)\n    at TLSSocket.emit (events.js:182:13)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)\nI upgrade to 4.1.15 and it works fine, it seems that 4.1.14 has some bugs, maybe you can try too.\nnpm uninstall -g truffle // If you already have truffle installed\nnpm install -g truffle@4.1.15\nhttps://github.com/trufflesuite/truffle/releases. ",
    "inzig": "Now facing the same issue on rinkeby network as well. I have even tried this contract \npragma solidity ^0.4.2;\ncontract test {\nstring public name;\nfunction test() public {\n    name = 'test';\n}\n}\nbut still  same error., \nEven with gas = 0\nlive: {\nnetwork_id: \"*\",\nhost: \"127.0.0.1\",\nport: 8546, // Different than the default below\nfrom: \"address\",\ngas: 0\n}. on side note i only have 0.10000 ether in my account, i hope that is enough to deploy smart contract thoughcgewecke \nTruffle v4.0.1 (core: 4.0.1)\nSolidity v0.4.18 (solc-js)\n. I have tried everything discussed there, i have tried simplest the contracts even but still facing the same error.. ",
    "JebasinghMathan": "$truffle migrate\nUsing network 'development'.\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  ... undefined\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: insufficient funds for gas * price + value\n    at Object.InvalidResponse (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/errors.js:38:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:86:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-migrate/index.js:225:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-provider/wrapper.js:134:1\n    at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/httpprovider.js:128:1)\n    at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:64:1)\n    at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:354:1)\n    at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:509:1)\n    at IncomingMessage. (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:469:1)\n    at IncomingMessage.emit (events.js:185:15)\n    at endReadableNT (_stream_readable.js:1101:12)\n    at process._tickCallback (internal/process/next_tick.js:114:19)\ntruffle.js\nrequire('babel-register')\nmodule.exports = {\n  networks: {\n    development: {\n      host: 'localhost',\n      port: 8545,\n      network_id: '*',\n      from: \"0x3f2d15c8c040a8faee4477a748a2950379f083c0\", \n      gas: 6721975\n    }\n  }\n}\n. ",
    "byronzoz": "@JebasinghMathan it works for me.\nI add \"from\" in truffle.js. ",
    "ashfaqnisar": "I am still having the same error, If anyone has solved this thing please share it\nUsing network 'production'.\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  ... undefined\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: exceeds block gas limit\n    at Object.InvalidResponse (C:\\Users\\Ashfaq\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3\\lib\\web3\\errors.js:38:1)\n    at C:\\Users\\Ashfaq\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3\\lib\\web3\\requestmanager.js:86:1\n    at C:\\Users\\Ashfaq\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-core\\~\\truffle-migrate\\index.js:225:1\n    at C:\\Users\\Ashfaq\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-provider\\wrapper.js:134:1\n    at XMLHttpRequest.request.onreadystatechange (C:\\Users\\Ashfaq\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3\\lib\\web3\\httpprovider.js:128:1)\n    at XMLHttpRequestEventTarget.dispatchEvent (C:\\Users\\Ashfaq\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\xhr2\\lib\\xhr2.js:64:1)\n    at XMLHttpRequest._setReadyState (C:\\Users\\Ashfaq\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\xhr2\\lib\\xhr2.js:354:1)\n    at XMLHttpRequest._onHttpResponseEnd (C:\\Users\\Ashfaq\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\xhr2\\lib\\xhr2.js:509:1)\n    at IncomingMessage. (C:\\Users\\Ashfaq\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\xhr2\\lib\\xhr2.js:469:1)\n    at emitNone (events.js:111:20)\n    at IncomingMessage.emit (events.js:208:7)\n    at endReadableNT (_stream_readable.js:1056:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9). I am still a rookie to the whole blockchain thing, the contract works fine (without gas limit ) on testrpc. But, when I am trying to run the same contract(without gas limit) on the network chain (I am running the blockchain network on the Microsoft Azure portal),  I get the error of exceeds the gas limit.\nwhen I run the contract with the gas limit, then when I migrate the whole project it is \nstuck on deploying the contract.\n. @ahester57 So, if do the deployment in ganache then I won't have a problem??. @hadv I am able to run it on ganache but when I try to run it on the azure server,  it is just stuck on deploying the migrations. Do have any solution for this . ",
    "hadv": "@ahester57 I run test on Ganache without this error Error: exceeds block gas limit\nMy truffle and Solidity version\nTruffle v4.1.8 (core: 4.1.8)\nSolidity v0.4.23 (solc-js). @elie222 I also have the below problem even I try many config for gas and gasPrice. Can you share me how to config on the truffle to deploy contract to Rinkeby testnet? thank you so much\n```\nUsing network 'rinkeby'.\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  ... undefined\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: insufficient funds for gas * price + value\n```\nmy evironment\nMacOSX \nTruffle v4.1.8 (core: 4.1.8)\nSolidity v0.4.23 (solc-js)\nNode v8.10.0\n. ah, okay thanks!\nI found that I have the problem because my from address's balance is 0; I rectify  the address and get fund then everything is working fine.. ",
    "CruiseMan": "I have the same issue while deploying to Azure by following this tutorial . Local deployment works fine.\nError:\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: exceeds block gas limit\nTruffle v4.1.11\nSolidity v0.4.23\nCode: \n```javascript\npragma solidity ^0.4.23;\ncontract ScoreStore {\n    mapping(string => int) PersonScores;\nfunction AddPersonScore(string name, int startingScore) public {\n    PersonScores[name] = startingScore;\n}\n\nfunction GetScore(string name) public returns (int) {\n    return PersonScores[name];\n}\n\n}\n```\n. ",
    "ayanez17": "I'm running this on:\nTruffle v4.1.11 (core: 4.1.11)\nSolidity v0.4.24 (solc-js)\nDeploying on Ganache. \nWhat I had to do to make it work was set a gas limit of  670000\nnetworks: {\n    development: {\n      host: '127.0.0.1',\n      port: 7545,\n      network_id: '*', // Match any network id\n      gas: 6700000,\n    }\nAnd in Ganache set the limit ( press the settings icon on the top right, then go to chain, then set the limit t0 6700000) and it should work! I think the problem was with the limit set in Ganache.. > On windows use truffle-config.js instead of truffle.js for your truffle configuration file, delete truffle.js .\nI\u2019m on a Mac . ",
    "huyvu88": "I experienced the same issue with:\nTruffle v4.1.11 (core: 4.1.11)\nSolidity v0.4.24 (solc-js)\nDeploy to Rinkeby Test Network. ",
    "eric96chen": "I resolved the error that exceeds block gas limit by reinitializing my privatechain.Just as the error says the gas cost exceeds, i set the gaslimit in genesis.json to be 0xffffffff(used to be 0x2fefd8),and reinitialize.\nHope that helps. ",
    "marcosc90": "I'm having the same issue, network object is empty in MyContract.json, and is failing with: has no network configuration for its current network id. ",
    "bmaurer": "Sorry for the confusion, the require in the test in my repro was me trying to minimize my test case. I found this because I was writing a program that had a require() triggered incorrectly and should have caused the test case to fail.\nHowever, it looks like using ganache this doesn't happen:\n```\n$ truffle test test/TestMetacoin.sol\nCompiling ./contracts/ConvertLib.sol...\nCompiling ./contracts/MetaCoin.sol...\nCompiling ./contracts/Migrations.sol...\nCompiling ./test/TestMetacoin.sol...\nCompiling truffle/Assert.sol...\nCompiling truffle/DeployedAddresses.sol...\nCompilation warnings encountered:\n/Users/bmaurer/eth/mc2/test/TestMetacoin.sol:10:3: Warning: Function state mutability can be restricted to pure\n  function testInitialBalanceUsingDeployedContract() public {\n  ^\nSpanning multiple lines.\nTestMetacoin\n    \u2713 testInitialBalanceUsingDeployedContract (38ms)\n1 passing (567ms)\n```\nHowever using truffle develop it fails as expected:\n```\n$ truffle develop\nConnected to existing Truffle Develop session at http://localhost:9545/\ntruffle(develop)> test\nCompiling ./contracts/ConvertLib.sol...\nCompiling ./contracts/MetaCoin.sol...\nCompiling ./contracts/Migrations.sol...\nCompiling ./test/TestMetacoin.sol...\nCompiling truffle/Assert.sol...\nCompiling truffle/DeployedAddresses.sol...\nCompilation warnings encountered:\n/Users/bmaurer/eth/mc2/test/TestMetacoin.sol:10:3: Warning: Function state mutability can be restricted to pure\n  function testInitialBalanceUsingDeployedContract() public {\n  ^\nSpanning multiple lines.\nTestMetacoin\n    1) testInitialBalanceUsingDeployedContract\n    > No events were emitted\nContract: MetaCoin\n    \u2713 should put 10000 MetaCoin in the first account\n    \u2713 should call a function that depends on a linked library\n    \u2713 should send coin correctly (97ms)\n3 passing (788ms)\n  1 failing\n1) TestMetacoin testInitialBalanceUsingDeployedContract:\n     Error: VM Exception while processing transaction: revert\n      at Object.InvalidResponse (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:41483:16)\n      at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:330353:36\n      at /usr/local/lib/node_modules/truffle/build/cli.bundled.js:326008:9\n      at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:329052:7)\n      at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:176427:18)\n      at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:176717:12)\n      at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:176872:12)\n      at IncomingMessage. (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:176832:24)\n```\nShouldn't the test have failed using truffle test with ganache?. I'm opening here rather than ganache because the logs of ganache say\n[9:04:51 AM]   Transaction: 0x3207a9637715045b18aedaa5fb9387865fe6a1408c1d7fe1b2ff4998012aa0f4\n[9:04:51 AM]   Gas usage: 21425\n[9:04:51 AM]   Block Number: 82\n[9:04:51 AM]   Block Time: Mon Jan 29 2018 09:04:51 GMT-0800 (PST)\n[9:04:51 AM]   Runtime Error: revert. I'm using Version 1.1.0-beta.0 (1.1.0-beta.0) which is the latest available on the site. Also, ganache's logs show that the revert happened so the issue seems to be around the client picking it up. Yeah even just adding some guidance would be helpful though to the extent possible it\u2019d be great to have a copy & paste line one can put in the shell. \nSent from my iPhone\n\nOn Jan 29, 2018, at 8:58 AM, c-g-e-w-e-k-e-> notifications@github.com wrote:\n@bmaurer It looks like you're suggesting that Truffle should output all of these fields. However it's normal for a program's --version flag to report itself only. For example:\ndocker --version\nDocker version 1.12.3, build 6b644ec\nThe bug report asks for additional information that can be retrieved by running:\nnpm --version\nnode --version\nEthereum client and OS version commands will vary depending on their identity.\nDo you think it would be helpful to update the issue template with some guidance about how to generate the required fields?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "fergarrui": "Did you run truffle compile first?. ",
    "gerchicov-bp": "@cgewecke \nAll the cases described are for Infura:\ngas: 4500000,\ngasPrice: 25000000000,\n```\ntruffle migrate --network ropsten --reset\n(node:34455) ExperimentalWarning: The fs.promises API is experimental\nUsing network 'ropsten'.\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\nError encountered, bailing. Network state unknown. Review successful transactions manually.\ninsufficient funds for gas * price + value\n\ngas: 6612388, // Gas limit used for deploys\ngasPrice: 2700000000000,\n\ntruffle migrate --network ropsten --reset\n(node:34461) ExperimentalWarning: The fs.promises API is experimental\nUsing network 'ropsten'.\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nexceeds block gas limit\n```\nIn the same time rinkeby seems to be ok for a case with lower gas and gasPrice but very very slow and doesn't work with higher gas/gasPrice. I have the same issue on OSX. But NOTE: I deleted all the files from the current folder and now it is empty. I've also enabled showing of hidden files - the folder is really empty.\nI also tried to recreate this folder - the same result\nJust WTF?\n$ truffle init                                                                                                                                                                                       \nDownloading...                                                                                                                                                                                               \nError: Something already exists at the destination. Please unbox in an empty folder. Stopping to prevent overwriting data.                                                                                   \n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-box/lib/utils/unbox.js:22:1                                                                                                              \n    at <anonymous>                                                                                                                                                                                           \n    at process._tickCallback (internal/process/next_tick.js:118:7)                                                                                                                                           \n    at Function.Module.runMain (module.js:692:11)                                                                                                                                                            \n    at startup (bootstrap_node.js:194:16)                                                                                                                                                                    \n    at bootstrap_node.js:666:3\nand of course hasn't truffle \"uninstall\" option?. Found out - OSX created \"superhidden\" file \".DS_Store\" which is not shown in Finder and usual terminal command \"ls\" without params. I saw it with ls -A only.\nBut it is a system file and why truffle doesn't allow to call init in this folder? It is a bug.. it should promt something like \"do you really want to install in this folder? Existing files will be overwritten\". But now it just refuses such folders at all. @hefgi @cgewecke \nThe problem is for example the folder can contain system files. For example in OSX it is .DS_Store. So even if the folder looks like empty truffle rejects to work with it and requires a \"Superempty\" folder which contains zero system files.. I have the same issue - truffle 4.1.11 persists, npm uninstall -g truffle doesn't work. @SvenMeyer @cgewecke \nhttps://ethereum.stackexchange.com/questions/52812/error-in-installing-truffle-in-macos\nbut of course nobody wants to add this info into readme!. I don't know how it should behave but it seems it is installed into random different folder which depends on the truffle version. Why not to install truffle into \"truffle\" folder, not \"truffleX\", where X - version which is changed on each new truffle version?. @cgewecke updated but syntax checker still says No visibility specified. Defaulting to \"public\"\nwhat about to fix that?. ",
    "marcpre": "Thx for your reply! \nThis is definitely working. I think the expected behavior should be:\nExpected Behavior\nI expect that truffle only adds folders/files and does not delete any folders or files.\n. I like your suggestion. \nHowever, I think if you still have to accept each warning this would hinder your development workflow. I would add these warnings but if you add f.ex. the -f flag your folders will be added and nothing gets overwritten. Similiar to npm init -f, when your package *.json just gets created by default.. ",
    "malaravannm": "truffle/Assert.sol and DeployedAddresses.sol files are missing for me also. I am following Truffle's metacoin example steps, at what stage these files should have been created. I noticed when test command showed  0 passing message. Didn't receive any error message till this point.\ntruffle(develop)> truffle test\nUsing network 'develop'.\n  0 passing (0ms). ",
    "nukec": "reinstalling project doesn't work.. this is still an issue, and recreating doesn't work. ",
    "chainchaser": "same here... not working on windows 10 environment.\nVS Code, \nWindows10,\ntruffle 4.1.11\nnode 8.11.2\nnpm 5.6.2\nis there any way to solve it?. thank you for reply.\nbut it is still on issue for me.\nCan you explain how did you solve it?.... ",
    "FahdLihidheb": "what is mean by reinstalling the project ?\ni deleted the project that i am working on ( pet-shop tutorial ) and cloned ( pet-shop-box ) and nothing changed. \nand where should the global Truffle files be ? . ",
    "birutavideo": "It seems that this issue is related to naming conflict in Win env.\nTry moving/renaming truffle.js in project root dir to truffle-config.js. This works for me.. ",
    "sebastiankozub": "Try to install truffle with -g option... . ",
    "souravk9709": "\nFrom the windos command line (i.e. the gitbash command line) it didn't work for me (Windows 7). But it worked from the truffle develop command line\ntruffle develop\ntruffle(develop)> test\nor\ntruffle(develop)> test ./test/TestMetacoin.sol\ntruffle(develop)> test ./test/metacoin.js\n\nThanks it worked over truffle(develop)>. ",
    "ebundala": "if your are using geth enable net on RPC api\nlike `geth --rpc --rpcapi web3,eth,personal,miner,net,txpool\ni had the same issue enabling the api resolved it\n. ",
    "eliceaas": "\nif your are using geth enable net on RPC api\nlike `geth --rpc --rpcapi web3,eth,personal,miner,net,txpool\ni had the same issue enabling the api resolved it\n\nthank u man ! i use \"db,eth,net,web3,admin,personal,miner\" and it worked !. ",
    "nklipa13": "Hey, I had same issue with this and I think that I figured out what was the problem, so basically problem is if you have event with same name in your contract (i.e. Transfer) Truffle gives you that error message. So just try changing name of your event to TransferA and it should work\n. +1. ",
    "ltfschoen": "I get the same out of gas error even after upgrading to the latest versions of:\nTruffle v4.0.6 (core: 4.0.6)\nSolidity v0.4.19 (solc-js)\nNode.js v9.5.0\nnpm 5.6.0\nI've also tried to explicitly set the Gas Price and Gas Limit of Ganache CLI to match the values I've set in truffle.js (as shown below), but it still gives the out of gas error\nganache-cli --port=\"8500\" --mnemonic \"copy obey episode awake damp vacant protect hold wish primary travel shy\" --verbose --networkId=3 --gasLimit=4712388 --gasPrice=100000000000. @cgewecke Thank you that worked!\nI found the latest Gas Limit and Gas Price used by Mainnet at https://ethstats.net/, as you mentioned.\nI need to updated truffle.js with a larger Gas Limit as you mentioned:\nmodule.exports = {\n  networks: {\n    development: {\n      ...\n      gas: 7984452, // Block Gas Limit same as latest on Mainnet https://ethstats.net/\n      gasPrice: 2000000000, // same as latest on Mainnet https://ethstats.net/\n...\nIt was also necessary to specify a matching Block Gas Limit in Ganache CLI flags as follows:\nganache-cli \\\n  --port=\"8500\" \\\n  --mnemonic \"copy obey episode awake damp vacant protect hold wish primary travel shy\" \\\n  --verbose \\\n  --networkId=3 \\\n  --gasLimit=7984452 \\\n  --gasPrice=2000000000; . @violalbi91 I'd suggest creating a new issue.\nI found that for the current issue #796, if I only import the dependent interfaces that a contract uses \n```\nimport \"./Token.sol\";\ncontract TokenRecipient is Token {\n  ...\n}\nand I remove the deployment and linkages of the interface contract (i.e. removing the following code)\ndeployer.deploy(Token);\ndeployer.link(Token, TokenRecipient);\n```\nthen it compiles successfully.\nI also discovered that in the latest project I'm working on https://github.com/ltfschoen/benzcoin, if I change contract ERC20Interface { to interface ERC20Interface { instead, then it still compiles successfully.. ",
    "albertogiovanelli": "@cgewecke @ltfschoen  I have exactly the same issue, there are any updates?. @cgewecke After debugging deep what I found is that my problem is not related to Interfaces even if the Error Stack is the same.\nContracts implementation is almost the same as the one suggested here.\nSo I will use the same contracts to explain.\nLet's say I have the Ownable.sol, ExternalStorage.sol and the SecurityLibrary.sol as the example.\nThe error occurred when I use the function of the library inside the constructor when writing Organisation.sol\n`import \"SecurityLibrary.sol\";\ncontract Organisation\n{\n  using SecurityLibrary for address;\n  address public eternalStorage;\nfunction Organisation(address _eternalStorage, address _admin) {\n    tokenLedger = ITokenLedger(_tokenLedger);\n    eternalStorage = _eternalStorage;\neternalStorage.addAdmin(_admin);//ERROR OCCUR WHEN I ADD THIS LINE.\n\n//addAdmin is a function inside the SecurityLibrary.sol\n  }\n  [...]\n}`\nAny Idea why this is happening?\nShould I open a new Issue?\nThanks in advance!. @cgewecke you are right the contract is not instantiated. I am referring to  this contract from Colony where the EternalStorage address is passed through the constructor. If I use externalStorage = new EternalStorage() the error goes away but the externalStorage has a different address from the one I deployed I guess. Is there a way to create a new instance of the contract related to the address where it has been deployed?\nMy migration.sol is like this : \ncontract Migrations {\n  address public owner;\n  uint public last_completed_migration;\n  modifier restricted() {\n    if (msg.sender == owner) _;\n  }\n  function Migrations() {\n    owner = msg.sender;\n  }\n  function setCompleted(uint completed) restricted {\n    last_completed_migration = completed;\n  }\n  function upgrade(address new_address) restricted {\n    Migrations upgraded = Migrations(new_address);\n    upgraded.setCompleted(last_completed_migration);\n  }\n}. My 2_deploy_contracts.js is : \n```\ndeployer.deploy(EternalStorage).then(function () {\n  deployer.deploy([[SecurityLibrary, EternalStorage.address]]).then(() => {\n     deployer.link(SecurityLibrary, Organisation);\n       deployer.deploy(Organisation, EternalStorage.address, accounts[0]).then(function () {\n       });\n  });\n});\n. @cgewecke I tried with that solution but it doesn't work.\nI changed the line using SecurityLibrary for address with  using SecurityLibrary for EternalStorage to make it but it doesn't work because otherwise it can't call the method from the library.\nimport \"SecurityLibrary.sol\";\nimport \"EternalStorage.sol\";\ncontract Organisation\n{\n  using SecurityLibrary for EternalStorage;\n  EternalStorage public eternalStorage; \nfunction Organisation(address _eternalStorage, address _admin) {\n     tokenLedger = ITokenLedger(_tokenLedger);\n     eternalStorage = EternalStorage(_eternalStorage);\n eternalStorage.addAdmin(_admin);//ERROR OCCUR WHEN I ADD THIS LINE.\n //addAdmin is a function inside the SecurityLibrary.sol\n// still not working, same error\n\n}\n}\n``` \n. @cgewecke  I was making a new project from scratch to put it in a repository and I found out where the error was. The problem was not really related to the constructor but ExternalStorage had an inheritance with an Ownable.sol which one had a modifier that is used to accept call just if the msg.sender is the owner, and in the constructor the owner of ExternalStorage wasn't the Organisation Contract. Here is the Ownerable.sol\n```\ncontract ExternalStorage is Ownable {\n   ...\n}\n```\n```\ncontract Ownable {\naddress public owner = msg.sender;\n\n/// @notice check if the caller is the owner of the contract\nmodifier onlyOwner {\n    require (msg.sender == owner) ;\n    _;\n}\n\n/// @notice change the owner of the contract\n/// @param _newOwner the address of the new owner of the contract.\nfunction changeOwner(address _newOwner)  onlyOwner {\n    require(_newOwner != 0x0) ;\n    owner = _newOwner;\n}\n\n}\n```\nSo following what Colony did I deleted the call to the addAdmin inside the constructor in Organisation.sol and added a new parent contract where I can instantiate both ExternaleStorage and Organisation and call the addAdmin.\nAdding the changeOwner now the owner of the contract is Organisation.\n```\ncontract CreateOrganisation {\nfunction createOrganisation(address _admin){\n\n    var externalStorage = new ExternalStorage();\n\n    var organisation = new Organisation(externalStorage, _admin);\n\n    externalStorage.changeOwner(organisation);\n\n    organisation.addAdmin(_admin);\n\n}\n\n}\n```\nAs soon as I can I'll post the link to the repo if you like by the way.\nThank you very much!!. ",
    "Paasmer": "@cgewecke  \nSyntaxError: Unexpected token : in JSON at position 15566\nat Object.parse (native)\n\nat /home/ec2-user/.nvm/versions/node/v6.10.3/lib/node_modules/truffle/build/webpack:/~/truffle-compile/profiler.js:79:1\n\nat /home/ec2-user/.nvm/versions/node/v6.10.3/lib/node_modules/truffle/build/webpack:/~/async/dist/async.js:1126:1\n\nat /home/ec2-user/.nvm/versions/node/v6.10.3/lib/node_modules/truffle/build/webpack:/~/async/dist/async.js:473:1\n\nat iteratorCallback (/home/ec2-user/.nvm/versions/node/v6.10.3/lib/node_modules/truffle/build/webpack:/~/async/dist/async.js:1050:1)\n\nat /home/ec2-user/.nvm/versions/node/v6.10.3/lib/node_modules/truffle/build/webpack:/~/async/dist/async.js:958:1\n\nat /home/ec2-user/.nvm/versions/node/v6.10.3/lib/node_modules/truffle/build/webpack:/~/async/dist/async.js:1123:1\n\nat /home/ec2-user/.nvm/versions/node/v6.10.3/lib/node_modules/truffle/build/webpack:/~/truffle-compile/profiler.js:72:1\n\nat tryToString (fs.js:456:3)\n\nat FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:443:12)\n\n. ",
    "Sander-Voogt": "I've almost the same error but on position 3253552. The contract is wrong compiled. The image below displays where the error occurs.\n\n. ",
    "Aniket-Engg": "@cgewecke Yes that works. Thanks.. @cgewecke ok, I got it. Looks like we can have a permanent solution later in future, till then we can go with the updating file manually.. Latest truffle is putting Migrations.sol with version 0.4.23. Thanks for considering the update.. Actually i removed the truffle from global node modules directory and install the latest version. With new version, npm uninstall -g truffle command is working fine.. Yes, It can be.. ",
    "dbucci24": "@cgewecke What would be the obstacles more presciently? I can translate all the .md files :). ",
    "RobertoC27": "I'd like to contribute with the Spanish translation of the docs :). I'm having this issue as well, is there an official solution for it or just this workaround for now?. I\u2019m on windows 10, but I was working on a VM with Ubuntu 16.04 and issue was there.\nEnviado desde mi iPhone\nEl jun. 4, 2018, a la(s) 9:51 a. m., c-g-e-w-e-k-e-> notifications@github.com<mailto:notifications@github.com> escribi\u00f3:\n@RobertoC27https://github.com/RobertoC27 There's no official solution - out of curiosity which OS are you using?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/trufflesuite/truffle/issues/862#issuecomment-394404937, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AH4ReZ2a1LKmvlmuE8fCX0_ddyuuqkpfks5t5VeXgaJpZM4S1VR4.\n. Just to make it clear, I\u2019m working on Windows 10 and the issue can be reproduced consistently, but when working with a VM with Ubuntu 16.04 issue was present as well. In Ubuntu the problem was that the migrations.sol file could not be found. Solved it by changing the line that was something like \u201crequire(./migrations.sol)\u201d and changed it to\n\u201cRequire(migrations)\u201d.\nEl jun. 4, 2018, a la(s) 9:51 a. m., c-g-e-w-e-k-e-> notifications@github.com<mailto:notifications@github.com> escribi\u00f3:\n@RobertoC27https://github.com/RobertoC27 There's no official solution - out of curiosity which OS are you using?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/trufflesuite/truffle/issues/862#issuecomment-394404937, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AH4ReZ2a1LKmvlmuE8fCX0_ddyuuqkpfks5t5VeXgaJpZM4S1VR4.\n. Just to clarify, i should prepare to use truffle@next from Monday on.. @cgewecke sorry for the delay, i'm a bit short on time but will try to do it during the weekend. Any installation instructions that may have changed? or just npm install truffle@next. @cgewecke btw, when invoking instructions from this new package. Should it be truffle@next init or will it collide with my current truffle global install?. @cgewecke being kind of new to this managing my dependencies and scripts stuff, seems like this learning scripts is going to take more time, to really understand what I'm configuring. Sure gonna miss that part of darq-truffle :(\n. @cgewecke running the debug statement produces the issue on #1051 \nexecuted command \"./node_modules/.bin/truffle debug 0x7002c8a8eb2706d74bd8b4834b910c9d528be37776c9bacae93f4b996cf769b3\"\n\nNotice how it is searching for a path related to your user, is that expected behavior?\ntruffle version:\n\n. @cgewecke I'm not bearing good news, debugger crashed again. https://gist.github.com/RobertoC27/5b3532b82277b28e880ab8f511fe4f42 a gist with the error output. Yes, issue was fixed. Thanks!. @cgewecke Fibonacci example was indeed what i tried debugging, did a truffle init on a clean folder, then npm init (because i'm working with truffle@next and copied contract code into a new file. Added a migration file, ran truffle console then compile and finally migrate. Last step was entering the debugger which resulted in #998 . No problem!. ",
    "freshonline": "I have problem configuring the chainID. Do not can use genesis.json.\nhttps://github.com/ethereum/go-ethereum/issues/16137#. OK, Thank you.\ntruffle.js:\nmodule.exports = {\n  // See <http://truffleframework.com/docs/advanced/configuration>\n  // for more about customizing your Truffle configuration!\n  networks: {\n    development: {\n      host: \"127.0.0.1\",\n      port: 8599,\n      network_id: 11,\n      from: \"0xC1320531dF2612B85e6FEDFd4d6358ed711bbe66\",\n      gas: 1000000,\n      gasPrice: 10000000000,\n    }\n  }\n};\nHave same result:\n```\ntruffle compile\nCompiling ./contracts/Migrations.sol...\nCompiling ./contracts/TutorialToken.sol...\nCompiling zeppelin-solidity/contracts/math/SafeMath.sol...\nCompiling zeppelin-solidity/contracts/token/ERC20/BasicToken.sol...\nCompiling zeppelin-solidity/contracts/token/ERC20/ERC20.sol...\nCompiling zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol...\nCompiling zeppelin-solidity/contracts/token/ERC20/StandardToken.sol...\nWriting artifacts to ./build/contracts\ntestnet@e3:~/oz-workspace$ truffle migrate\nUsing network 'development'.\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  ... 0x288e4497b2ade61618629450f636e54f955aa88ddbdf9a83d5fddad3f2b0ea4a\n  Migrations: 0x1dd4e293cbf63593a416ba3a7fc62bcba46c6f96\nSaving successful migration to network...\n  ... 0xab002e3027f5224939acd0389d5313b43482bf91960c63ef3337508d8eff9125\nSaving artifacts...\nRunning migration: 2_deploy_contracts.js\n  Deploying TutorialToken...\n  ... 0x5395c96f94fb3343c75f51ca81c4ba3db625e240c7535815094b512d3b4d9f74\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: The contract code couldn't be stored, please check your gas amount.\n    at Object.callback (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/contract.js:147:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/method.js:142:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:89:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-migrate/index.js:225:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-provider/wrapper.js:134:1\n    at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/httpprovider.js:128:1)\n    at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:64:1)\n    at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:354:1)\n    at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:509:1)\n    at IncomingMessage. (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:469:1)\n. Yes, \"gas: 2000000\" the solution. Thank you.\nRunning migration: 1_initial_migration.js\n  Replacing Migrations...\n  ... 0x335f8376b2803c21ef8dc7dac74718773e9aec6f29550632d02cb13b5cfdc019\n  Migrations: 0xcd4538bf3d2c1aee731a16999e1f822855592b61\nSaving successful migration to network...\n  ... 0x25043dbc8c7bf5c3781589b54ee510027547bd2af28f81647792aa7094468ef2\nSaving artifacts...\nRunning migration: 2_deploy_contracts.js\n  Deploying TutorialToken...\n  ... 0x18d50c3b830566e16004f45d0b93608c5ed1edb691e44a0c9466f3799f8edc93\n  TutorialToken: 0x2ba9357366d7013c7081a8e3a346182ac38811a1\nSaving successful migration to network...\n  ... 0xd1dfba5a2d34ef51458f4713b641f9e3362c4e505585bf3f8539ebf10345e948\nSaving artifacts...\n. But I do not see any new transactions in my mist wallet :(.\nUsing network 'development'.\nRunning migration: 1_initial_migration.js\n  Replacing Migrations...\n  ... 0x17f6fc30d628ed0db65d3ab926383920e891a3632ff092612e9e3fc72488de3a\n  Migrations: 0x4222ed30cfe1417b23a83130059476dd4b2f8a65\nSaving successful migration to network...\n  ... 0x02847b0f2f081a9f4458e0240de02f942de9b10cc658b26d642f7e84c93cb0c4\nSaving artifacts...\nRunning migration: 2_deploy_contracts.js\n  Replacing TutorialToken...\n  ... 0x74af3a3916968f9a5ddbc08396963af7c37f842d9b6d1e62f6c2ff0c485110e6\n  TutorialToken: 0x1232e0aa7a542b1daeabd4890a4566286a621d02\nSaving successful migration to network...\n  ... 0x5874809821192b79c415aff12d9ad81658da3cb001b3fec35ab8de038c178666\nSaving artifacts...\n. Why? Is this my fault or a bug?\ncat TutorialToken.sol\npragma solidity ^0.4.18;\nimport 'zeppelin-solidity/contracts/token/ERC20/StandardToken.sol';\ncontract TutorialToken is StandardToken {\nstring public name = 'TutorialToken';\nstring public symbol = 'TT';\nuint8 public decimals = 2;\nuint public INITIAL_SUPPLY = 12000;\nfunction TutorialToken() public {\n  totalSupply_ = INITIAL_SUPPLY;\n  balances[msg.sender] = INITIAL_SUPPLY;\n }\n}\n. No, problem do not solved.. This rinkeby:\ngeth --rpc --rinkeby --rpcapi db,eth,web3,net,admin,miner,personal --fast --datadir /home/testnet/rinkeby --keystore /home/testnet/.ethereum/keystore --mine --minerthreads 1 --unlock 0xd97147e5663e83adeb103c84de3ee1a6d19e54fa --password /home/testnet/pass\n\nnetstat -lptun | grep 8545\n(Not all processes could be identified, non-owned process info\n will not be shown, you would have to be root to see it all.)\ntcp        0      0 127.0.0.1:8545          0.0.0.0:*               LISTEN      700/geth\n```\nHow can i check my contract in geth console?. ",
    "mariam-crissi": "@cgewecke I am trying to create a new contract instance..Is it possible to use MultiSigWallet.contract.new.getData(params)?. @cgewecke   I have tried,but it also generates the following issue\n```\n(node:5357) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'new' of undefined\n```. @cgewecke  As you mentioned,Shall I try with the following code?\nvar MyContract = web3.eth.contract(MultiSigWallet.abi);\n            var contractData = MyContract.new.getData([adminAddress,fromAddress,toAddress], {data: MultiSigWallet.unlinked_binary});\n            console.log(contractData);. @cgewecke It worked fine...Thank you for your help.. ",
    "wbt": "@cgewecke Thanks for the pointer! I think the underlying compilation failure might be a Solidity bug, but haven't yet fully convinced myself the bug is not in my code.  In either case, I think Truffle should pass along the error message with as much detail as Remix, and that's the focus of this Issue which seems properly filed on Truffle.  . @cgewecke Ah, yes, in part.  Changing Remix to use compiler v0.4.18+commit.9cf6e910.Emscripten.clang, I see that the error message is less specific, matching what I see in Truffle.  However, Remix still does at least identify the specific file which triggered the error, which is a step up over Truffle's current output. . Parse errors show up like that, but you can see the output in Comment 0 above for this kind of error: no file identification, let alone line or column.\nWhen a compilation fails and does not produce a file-identifying error, could Truffle try again without batching and report the specific file?\nAlso, I don't think solidity is going to solve that issue about nested structs anytime soon.  The \"intended behavior\" for the getter is unclear, there probably has to be some depth limit, and the EVM's limitations on being able to return dynamically sized types eliminate a lot of options for sensible defaults.  I think that issue will probably eventually be closed, with what I posted there as a \"workaround\" becoming a more permanent solution (and hopefully, a more informative error message to guide developers to it).   \n. Whoops, on slightly closer inspection this should be on truffle-compile.\nI moved it there: https://github.com/trufflesuite/truffle-compile/issues/47. Note that if you're just trying to upgrade to truffle v5, the uninstall step is not always necessary.  However, if you want to do it, try reversing the -g and the truffle in your command.  For example, to downgrade:    \n```\n\nnpm uninstall truffle -g\nremoved 89 packages in 1.651s\nnpm install truffle@4 -g\nC:\\Users\\me\\AppData\\Local\\node\\truffle -> C:\\Users\\me\\AppData\\Local\\node\\node_modules\\truffle\\build\\cli.bundled.js\n+ truffle@4.1.15\nadded 80 packages from 311 contributors and updated 1 package in 8.562s\n```. @Aniket-Engg So is this Issue closed?. Thanks! Per your comment here, that last line should probably also refer to truffle-config.js instead of truffle.js, if truffle-config is the one being used by the application when that error is encountered.. Go for it, and thanks!. \n",
    "dmihal": "I'm interested in developing this feature, does anybody have any thoughts or comments before I dive into the code?. @lazaridiscom EthPM.js doesn't have any mechanism for writing to ethpm.json, except for ETHPM.init(), which copies the template ethpm.json file.\nI was thinking truffle could use ETHPM.init() if the user uses the -s flag, but hasn't created an ethpm.json file yet.. Created a PR for the overwriting issue, looking at #790 now. ",
    "robinboening": "@cgewecke I just submitted a new PR here: https://github.com/trufflesuite/truffle/pull/832. @cgewecke Thanks for the fast reply!\nI am not 100% sure if I understand correctly, but let me try to explain what I understand when reading your proposal, but first of all: I am new to truffle (I haven't even used more than a simple truffle init by now).\nYou are writing \"these commands\", so I assume you are referring to truffle compile/migrate/test (mentioned in the paragraph before) which are booting up the built-in dev server when invoking them. If this is correct I don't understand why I want or need the server for the compilation or to run the tests?\nThanks!. @cgewecke thanks a lot for the explanation! Its much clearer to me now. I don't actually know what enlightened me now, maybe it just took me some time \ud83d\ude44\nI do like your proposal and I think it explains it quite well. I have only a few more changes to propose. I will open a new PR for it since its merged already :)\nThanks again for the quick responses and the patience with a newbie \ud83d\udc4d \n. ",
    "alexmedkex": "The error is still happening for me, after upgrading. I'm getting No source code found, while attempting to debug a transaction that was done in my js test. The transaction likely failed due to a require() or revert.. It seems to fix for me when debugging the transaction while inside the truffle develop console. I.e running a truffle develop instance, and entering \"debug \". ",
    "fredfortier": "@cgewecke I'm still getting this error after upgrading just now.\n$ truffle --version\nTruffle v4.1.3 - a development framework for Ethereum. Yes, it's working now. But I still don't see the values of my variable when\nstepping through (always undefined).\nOn Sat, Mar 31, 2018 at 10:20 AM c-g-e-w-e-k-e-> notifications@github.com\nwrote:\n\n@fredfortier https://github.com/fredfortier If you have a chance could\nyou see if 4.1.5 has fixed this? A bunch of support for inter-contract\ncalls has been added in that release.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/815#issuecomment-377708981,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABZ-QsnyOpIEBMix2llac8KGY9RK-Nd_ks5tj7rvgaJpZM4SRxWl\n.\n. \n",
    "serebrov": "Just for reference - the same solution above can be used to start the debugger from command line and debug in node inspector (in Chrome dev tools):\nnpm install truffle-core\nnode --inspect-brk ./node_modules/truffle-core/cli.js test test/test_to_debug.js\n\nOpen chrome://inspect page and click the \"Open dedicated DevTools for Node\" link.\nWe should see the cli.js file with execution paused on the first line.\nAdd the test sources into the inspector: click the \"Filesystem\" on the left and then \"Add folder to workspace\".\nBrowse to the folder with tests and add it.\nOpen the file with the test to debug and set the breakpoint, continue the execution until it reaches the breakpoint\nNow you can step through your test, inspect variables, etc. \n",
    "DcoOo": "I have solved this issue. I need to use truffle console --network testrpc rather than truffle console. ",
    "sweatyc": "I had this error too and it turns out nothing to do with gas, it's my ERC721 token contract didn't implement the contractor of the ERC721Token correctly...\nI flatten the contracts and put it into remix, it did show me the problem.\nA correct error should be shown in truffle!. ",
    "gus-canya": "In case someone stumbles upon here. \nI was trying to migrate with zeppelinOS: \nzos push --network ropsten_infura\nThis truffle-config.js worked for me: \njs\nropsten_infura: {\n      network_id: 3,\n      gas: 2000000,\n      gasPrice: 32,\n      from: '0x123...', // the wallet address\n      provider: function() {\n        return new HDWalletProvider(process.env.WALLET_MNEMONIC_ROPSTEN, `https://ropsten.infura.io/v3/${process.env.INFURA_API_KEY}`)\n      }\n    }. ",
    "launchico": "That was a strange bug that disappeared by itself :p\ni just restarted it a couple of times and it works now... ",
    "sebastien-kr": "You can set the --gasLimit option. \nFrom https://github.com/trufflesuite/ganache-cli : \n-l or --gasLimit: Use a custom Gas Limit (defaults to 90000)\nPS : \n\nInterestingly, in the most recent case, I could deploy the test file if I changed x= new X(args); to x = X(DeployedAddresses.X()) as in my other files.\n\nThat's because with new X() you are using gas in the contract deployment. When using x = X(address) there are two distinct deployments. \nIf the limit is 90,000 gas, then using 85,000 to deploy A + 85,000 to deploy B result in a fail when deploying B from A's constructor and no error if B is deployed separately.. ",
    "attente": "Hi, I've been looking into this a bit more and found this:\nhttps://github.com/ethereum/EIPs/issues/170\nSo pretty much even if you override the gas limit, ethereumjs-vm still caps the size of the contract bytecode to 24576 (i.e. any contract 24577 bytes or larger will trigger an out-of-gas error).\nThe check happens here:\nhttps://github.com/ethereumjs/ethereumjs-vm/blob/cdeda6a5ab18d37711f6a8678bbd42bd88b9c7d7/lib/runCall.js#L167. FWIW, that commit introduces the allowUnlimitedContractSize option for the VM. So I guess all that's needed is a way to pass in that option via ganache-cli.. Cool, somebody is actually already working on doing that:\nhttps://github.com/trufflesuite/ganache-core/pull/79. ",
    "seesemichaelj": "Hey everyone! The code that supports the allowUnlimitedContractSize flag in Ganache was merged in https://github.com/trufflesuite/ganache-core/pull/126. This should be in the next release of ganache-cli (I'll add something to the readme and link the PR to this issue).\nWarning about using allowUnlimitedContractSize\nIf you're having issues deploying contracts without this flag, it's likely contracts aren't being optimized during compilation. Perhaps this issue really needs to see if that's the root cause for this instance. The flag should only be used knowingly as it deviates ganache-cli's behavior from production (i.e. geth, etc.)\nI'll let @cgewecke judge on whether or not this issue stays open or closed.. The flag was added to ganache-cli in https://github.com/trufflesuite/ganache-cli/pull/550. Hey @asoong,\nI'm sorry for not initially suggesting this; I didn't quite do my homework (I'm knew to the Truffle team).\nLooking at the docs, I highly suggest that you use the compiler optimizer since your contracts shouldn't deploy on main and test nets without it! You can add this in your truffle.js configuration: https://truffleframework.com/docs/advanced/configuration#solc\nsolc: {\n  optimizer: {\n    enabled: true,\n    runs: 200\n  }\n}\nYou can increase the number of runs to optimize more.\nI'm going to go ahead and close this. This comment seems to be the answer to this issue\nPlease let us know if you still have issues after that!. @boorac What is likely happening here is you're receiving a refund from the EVM.\nThere are two reasons for a refund (below are excerpts from the EVM Yellow Paper):\n- when the storage value is set to zero from non-zero (refund of 15,000 gas)\n- for self-destructing an account (refund of 24,000 gas)\nIt looks like deposited[investor] = 0 qualifies for the first.\nYour transaction is going to take X gas to execute, at the end of the executing the transaction, if you qualify for refunds, the account is refunded the gas. Unfortunately, it's reported as \"spending 24721 gas\" rather than reported as \"consumed 39721 gas and received a refund of 15000 gas, netting your account 24721 gas used.\" I would hypothesize that if you set your gas limit to 39721, it would succeed.\nI'm not sure if anything is actually being done to handle this more gracefully. ethereumjs-vm (the EVM implementation that (G|g)anache(-cli|-core) uses) was updated to report how much was refunded https://github.com/ethereumjs/ethereumjs-vm/pull/284 such that ganache could add it in the estimate provided when eth_estimateGas was called (still waiting on merge https://github.com/trufflesuite/ganache-core/pull/80) so that the estimate would include how much was actually needed to execute the transaction successfully.\nHope this helps clear things up.. With all that said, I'm not sure if/where the issue is. Some questions to ponder:\n- Does Metamask call eth_estimateGas to determine the suggested gas limit for a transaction?\n- If it does (rather than doing it's own estimation), then the follow up question would be what blockchain are you using to do this? I would suspect you're using ganache with truffle migrate.\n- If so, then the issue lies in solving https://github.com/trufflesuite/ganache-core/issues/26 which requires some discussion about how eth_estimateGas is perceived (which may have recently been discussed; I'll have to ping @benjamincburns  about that) so we can pick an implementation. Per @cgewecke's comment, this means that https://github.com/trufflesuite/ganache-core/issues/26 is causing the issue you're seeing @boorac. @mushketyk what version of Ganache CLI are you using? v6.1.5 introduced a similar error that got fixed in v6.1.6\n@daithi-coombes same for you; are you using Ganache/ganache-cli in the loop? If so, Is it v6.1.5?. Thanks @xinbenlv for the PR.\nI've gained more insight about bounties since our conversation you mentioned. Right now, Truffle Suite doesn't really have an official \"Bounty Program\", and bounties I've mentioned have been sponsored by other parties (such as GitCoin themselves).\nI'm going to close this PR. If we ever put together a formal bounty program, we will add it to the appropriate documentation and to our website. In the meantime, users can discover Truffle Suite related bounties sponsored by other people by going to GitCoin (and other bounty programs).\nThanks a bunch for the contribution however!. @gnidan I have made the recommended changes. Yup! Good catch.\nThis can be closed as the issue was not related to truffle at all.. @haltman-at or @gnidan is this still an issue?. Closing as Truffle v5.0.0 was released. Thanks @melnikaite for the suggestion! The approach taken in #1544 to support this issue covers other potential vectors where the \"old\" version of web3 (0.20.x) is needed than just this specific case with Quorum\nWith that said, your approach may come in handy with some future work around this issue, and we'll keep it in mind! Thanks again!. #1806 fixes this issue. The original issue was due to large timestamps, not large gas limits (#1809 addresses large gas limits).\nThis will go into the next release of Truffle. The fix addressed here will now let you use Truffle v5 with the Quorum tutorial found here.\nThe documentation on the above tutorial and the official docs will be updated before the release.\nGoing forward, you'll be able to specify type: \"quorum\" in your truffle(-config)?.js network, like such:\n...,\nnetworks: {\n  development: {\n    type: \"quorum\",\n    ...\n  }\n}. @gnidan and @CruzMolina so here are the changes that I've made to the legacy for quorum support thing:\n- web3@0.20 was not necessary. the legacy web3 has been removed\n- I removed the legacy deployer/contract files and integrated that behavior in the v5 deployer/contracts\n- I kept the runLegacyMigrations function within migration.js\n- I added a truffle-interface-adapter package which currently only has a web3 shim to allow us to monkey patch web3 functions. I replaced all new Web3() calls with this new Web3Shim(provider) layer\n- I added a --quorum flag which enables --legacy and it also enables overloading web3's outputFormatter for the getBlock function to essentially ignore the formatted timestamp and use the original\nsome of this I'm not super fond of, but I needed to ship something, and this stuff will likely get removed during the adapter layer work I'll be doing shortly\nwhat are your thoughts?. I verified that the --quorum flag works for both IBFT and RAFT consensus algorithms. IBFT works without this PR.. Closing this PR in favor of a new PR which shifts this code to accept the following interface:\nin truffle(-config)?.js:\n...,\nnetworks: {\n  development: {\n    type: \"quorum\" | ...,\n    ...\n  }\n}\nrather than having it at the command-line level (i.e. --quorum). I made a comment with my main contribution. I also modified the decoder tests to test more features.. After @haltman-at's comment and talking on slack, I think I'm okay with this PR. Need to get @gnidan's approval before merging. Moved this to new issues from icebox because i think this was created when the icebox column in zenhub got moved to the first column. The decoder needs more than just an open ABI; we need the compiler output which implies open source code.\nI do think it's a good idea though!. FWIW, I believe this library will be used by several tools (both internal and external to Truffle Suite) in 2019. Yes, he has the objects minus the networks property. I hate the networks property anyway. I'm going to propose later tonight an interface that should be the best of all worlds; you can then take that Harry and see if that works or you'd like to change it up. But long story short, what Adrian is asking is quite simple to implement. It's just deciding the right interface that is a little challenging.. this didn't happen when i was hoping. this is also far from complete. there is probably a handful of places to change things using this solution. the below would go in the lib/interfaces/index.ts file:\n```\ninterface Contract {\n  name: string;\n  ast: Ast;\n  abi: Abi;\n}\ninterface ContractInstance extends Contract {\n  address: string;\n}\nexport function forGenericContract(contract: ContractInstance, relevantContracts: Contract[], provider: Provider): TruffleDecoder {\n  return new TruffleDecoder(contract, relevantContracts, provider);\n}\nexport function forTruffleContract(contract: ContractObject, relevantContracts: ContractObject[], provider: Provider): TruffleDecoder {\n  let generalizedContract: ContractInstance = {\n    name: contract.contractName,\n    address: contract.networks[Object.keys(contract.networks)[0]].address,\n    abi: contract.abi,\n    ast: contract.ast\n  };\n  return forGenericContract(generalizedContract, relevantContracts, provider);\n}\n```\nthats the train of thought that i'm going through, but it may be not worth while.\nwe could also change forContract(...) to have an optional address?: string parameter as the last argument that would be used if defined :man_shrugging: . No they don't. I agree with @benjamincburns's diagnosis. In this case, Truffle is swallowing an error that is very likely to be the same as #1543; I have seen this issue's behavior as well as a symptom of #1543. PR #1806 should alleviate this issue. It's very possible though that #1656 may become an issue for you shortly after however.. @gnidan I'm not sure. We couldn't reproduce the issues and the users never provided more info. FWIW, I am no longer listening to new Ganache issues/etc. It looks like no one else reported the issue. We could maybe close this, but also people may not be using the Ganache 2 betas because they think they're buggy :man_shrugging: . Thanks @dgrmunch for reaching out!\nWe're still working on this. This issue is an Epic for a handful of smaller issues. We're still working on the first in the list: #1543. We'll update this issue as we complete sub-issues!\nUnfortunately, we don't currently have a deadline or expected finish date at this point.. Hey @haltman-at, this seems like an interesting way for watching mapping keys. I'm not super fond of by-name lookup but it seems you still support by-id which is cool. I do like the support for multi-level watching in a single call!\nWhile you may not use this feature, I strongly encourage adding more detailee tests (I.e. multi-level mappings, mappings of structs (multi-level)) since it's pretty easy to do a quick discovery if they work.\nAlso the large switch statement of constructSlot may seem that it could be split up (i.e. call functions for each case instead of several statements). Also is it possible it is a more generic function that belongs in another file? Not sure, just food for thought.\nNot going to approve/disapprove this since I no longer own this, just wanted to provide feedback since you requested it.. Yes, per https://github.com/bcherny/json-schema-to-typescript#options there is an option to specify CWD through the node module, but the CLI doesn't have that option, and it defaults to process.cwd(). Do you mean set -ex insert_command_here?. oh cool, thanks! sorry for asking instead of googling :sweat_smile:. This block is essentially my main contribution which makes sure we pass the referenceDeclaration to storageSize so that array's of enum's will get the correct storage size. I believe it's not worth the time as my upcoming work to implement truffle-interface-adapter will deprecate this interface regardless, so I don't want to spend too much time making this proper and future-proof when it'll get scrapped near term anyway.. Sure :). Further, I've already spent a good amount of time on this and would like to move forward since this PR is a bandaid in principal. Ah good catch. I wasn't even thinking that they were in the same package :sweat_smile: . this should be address?: string, the ? marks it as optional. Nevermind, I see you added the ? in the public interface. This is a Web3 shim. It's purpose is to shim around web3. So for consumers of it, it should look \"more or less\" like web3. This is all \"temporary\" until a better system is architected.\nThe inheritance was driven by stuff I'm doing for axcore integration, but I recently (today) discovered that the benefits of inheritance don't translate with Web3's implementation. It's not worth changing it back now.. Alright, I usually do \"as minimum changes as possible\" and not \"drive by cleanup\", but I can remove these if you really want me to.. Doesn't look like it. It looks like I forgot to remove the TODO; it's no longer necessary to add more details. I put the colon there as it highlights it in my vscode. I'll remove the todo. The only reason these were altered to begin with is because of the rolling linting changes required everytime I modify a file that hasn't been through the linting process yet. Well if this isn't temporary, then we need to revisit our roadmap and expectations for the next 4 months lol.\nGit blaming takes a couple of minutes, but sure, I can date it.. It was originally bn.js, but constructor.gasMultiplier is/can be a decimal value and bn.js does not support decimals anywhere (even as an argument to .muln() for example). I could not think of an elegant way to turn an arbitrary decimal into a single multiply/division of two numbers.. I'm going to go ahead and do the drive-by cleanup to not have to wait for another cycle of discussion. I'm usually not fond of this, but will make an exception.. I'm going to go ahead and do the drive-by cleanup to not have to wait for another cycle of discussion. I'm usually not fond of this, but will make an exception.. I definitely find this hack gross and non-elegant, and I was trying not to do this. But I will implement it.. Much of this code will be reused but the morphing will look like something entirety different after a better architecture is designed. The whole point of doing this PR now instead of 1-2 months from now was to get something out the door.\nFor all we know, there is architecture that needs to happen in other truffle packages to support other non-ethereum based ledgers.. Further discussion happened over Zoom, and I added a comment (https://github.com/trufflesuite/truffle/pull/1806/commits/4457aa67a4692645ab34f389442a96bd21d684d5) to better explain the nature of the Web3Shim in the event that it becomes less temporary than planned.. ",
    "asoong": "Hey, Mike,\nHesitant to use the flag - what are some ways to improve compilation before resorting to this? I'm at a point where commenting out some logic or even modifiers will allow the specs to run successfully.. ",
    "MaximeAubanel": "Setting the gas to the hexadecimal value of the gas limit in the genesis.json file fixed it for me. \ni.e \"gasLimit\": \"0x47b760\". ",
    "VanThanh1812": "Oh, thank you, that's work, I did follow tut in medium then run npm init first. I think that is the cause of my problem :)). ",
    "ImmuneGit": ":) it doesn't work if there is a hidden .git folder. is it really properly?. yes, I see that it works for empty folder. But it\u2019s not always logical. For example, I\u2019ve clone a new empty project from git where I want to init truffle project. In that case it doesn\u2019t work and I have to do it in another empty folder and then copy all files and folders to my project folder. . @bweick I've not been found no any solution. I've tried to delete temporary some unnecessary migration files from the migration folder but it seems that a contract works weird after deployment. For example I see 2 transactions upon a transfer token from one wallet to another (like it performs twice from both contracts - old one and a new one).. @robertmagier It's really works. Thank you very much! . ",
    "Matrixbirds": "@ImmuneGitPlease unbox in an empty folder.\nYou must run this command in empty folder without any file.. ",
    "klassicd": "If you install truffle local to the application (e.g. yarn add truffle), and try to use it (e.g. ./node_modules/bin/truffle init), this error prevents you.. ",
    "YuxuanLin": "Same happened and this solution does help me! Thanks\nThe tut I followed:https://medium.com/@merunasgrincalaitis/the-ultimate-end-to-end-tutorial-to-create-and-deploy-a-fully-descentralized-dapp-in-ethereum-18f0cf6d7e0e. ",
    "Cryt1c": "I also just ran into this problem, when I first setup a new project in WebStorm and then wanted to do a truffle init. \nThe .idea folder from WebStorm was getting in the way.\nWould be awesome if this behavior would be changed.. @cgewecke Thanks for these insights. I think you are right, that the people who did not get their files deleted through this are underrepresented. \nCould truffle init just check if these files/folders exist and if not just go ahead?\n- contracts/: Directory for Solidity contracts\n- migrations/: Directory for scriptable deployment files\n- test/: Directory for test files for testing your application and contracts\n- truffle.js: Truffle configuration file. ",
    "l3x": "Run this:\nmkdir mydapp\ncd mydapp\ntruffle init\nOf course, you'll likely want to name your directory something other than mydapp\nNext, you can run npm init and the rest of your commands.\nThe problem is that truffle init must be run in directory that no files in it.\n. ",
    "n13": "It's an annoying limitation - if it's going to be so picky, it should check if it in fact would override any of the existing files, like .git directory, or existing npm files. I guess this wasn't in older versions because I am following a tutorial and running into this issue, and the guy on youtube clearly didn't have problems. . ",
    "lazzarello": "This same problem exists on my computer with a blank, uninitialized directory\n```\n2blockchains:gradient-token-tutorial leeazzarello$ truffle init\nDownloading...\nError: Something already exists at the destination. Please unbox in an empty folder. Stopping to prevent overwriting data.\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-box/lib/utils/unbox.js:22:1\n    at process._tickCallback (internal/process/next_tick.js:68:7)\n    at Function.Module.runMain (internal/modules/cjs/loader.js:745:11)\n    at startup (internal/bootstrap/node.js:236:19)\n    at bootstrapNodeJSCore (internal/bootstrap/node.js:560:3)\n2blockchains:gradient-token-tutorial leeazzarello$ ls -la\ntotal 8\ndrwxr-xr-x   3 leeazzarello  staff    96 Aug 19 15:37 .\ndrwxr-xr-x  44 leeazzarello  staff  1408 Aug 19 15:37 ..\n-rw-r--r--   1 leeazzarello  staff   175 Aug 19 15:37 package.json\n2blockchains:gradient-token-tutorial leeazzarello$ truffle version\nTruffle v4.1.7 (core: 4.1.7)\nSolidity v0.4.23 (solc-js)\n2blockchains:gradient-token-tutorial leeazzarello$ which truffle\n/usr/local/bin/truffle\n```. ",
    "HARIKIRAN7382": "In mac os we use unbox or init for unboxing or initialization .  But in Windows command prompt which command we have to use for unboxing or initialization?. ",
    "carlosero": "Closing this myself. This was rather simple. Solution if anyone has the same issue ever:\nWhen transfering from a contract to another using .transfer, and using fallback function, gas by default will be 2300, which will revert any kind of operation that uses more gas than that.\nhttps://consensys.github.io/smart-contract-best-practices/recommendations/#keep-fallback-functions-simple. ",
    "kriskelly": "I'm also seeing this issue when using {overwrite: false} in my deploy code. I've verified that it deploys fine without that option.\nUsing Truffle v4.1.3, Solidity v0.4.19. I'm also seeing this error after upgrading from Truffle v4.1.3. I'm attempting to debug a transaction on the Rinkeby network. Before I upgraded Truffle, it was telling me that it was unable to show the source code for any of the contracts involved. Not sure why, but it's probably relevant.\nHere's a bit more of the stack trace in case that helps:\n```\nGathering transaction data...\nredux-saga error: uncaught at session.saga\nat session.saga\n TypeError: Cannot read property 'binary' of undefined\n    at recordContracts$ (/Users/kriskelly/.nvm/versions/node/v8.9.1/lib/node_modules/truffle/build/webpack:/~/truffle-debugger/dist/debugger.js:3288:1)\n    at tryCatch (/Users/kriskelly/.nvm/versions/node/v8.9.1/lib/node_modules/truffle/build/webpack:/~/regenerator-runtime/runtime.js:62:15)\n    at Generator.invoke [as _invoke] (/Users/kriskelly/.nvm/versions/node/v8.9.1/lib/node_modules/truffle/build/webpack:/~/regenerator-runtime/runtime.js:296:1)\n    at Generator.prototype.(anonymous function) [as next] (/Users/kriskelly/.nvm/versions/node/v8.9.1/lib/node_modules/truffle/build/webpack:/~/regenerator-runtime/runtime.js:114:1)\n```\nPretty sure it's this function: https://github.com/trufflesuite/truffle-debugger/blob/3c2ae1e0c980f9aef0ac1ec79d4d7b7108e83c39/lib/session/sagas/index.js#L83 and if so, it's iterating over undefined contracts.. ",
    "eepstein": "That's not a patch.  That's a new release with other things changed.  Borked.. ",
    "reasv": "Yeah, sorry that I didn't reply. I'm using tests now and it works.. ",
    "besiwims": "I am facing the same problem:\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nBigNumber Error: new BigNumber() not a number: function TruffleContract() {\n        this.constructor = temp;\n        return Contract.apply(this, arguments);\n      }\n    at raise (C:\\Users\\Tobb Technologies\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\bignumber.js\\bignumber.js:1177:1) \nThis came when I am deploying the OpenZeppelin version 2.0.0 Crowdsale. Thank you for your help.\n. ",
    "dlldll": "hello\uff0chave you solved your problem?I got the same issue. ",
    "tyndallm": "I suspect you maybe deploying to a local ganache test network instead of Rinkeby. Typically you would configure your truffle.js config file to have multiple networks, creating a separate \"rinkeby\" entry alongside \"development\": http://truffleframework.com/docs/advanced/configuration#networks You can also specify network_id: '4' which is Rinkeby\nIf you are running Geth locally on port 8545 is it connected to Rinkeby? Does the Geth console show your contract being deployed? Is your Geth account \"unlocked\"?\nAlternatively if you don't want to run Geth locally, you could use Infura but that requires a bit of extra setup. The config would look something like this:\nrinkeby: {\n    provider: function() {\n      return new HDWalletProvider(mnemonic, \"https://rinkeby.infura.io/\");\n    },\n    network_id: '4',\n  },. ",
    "zhaozhiming": "Same problem. Have any progress?. @freshonline I find the problem reason. I think you make the same mistake like me.\nYour token contract is 0x1232e0aa7a542b1daeabd4890a4566286a621d02, not the 0x4222ed30cfe1417b23a83130059476dd4b2f8a65.\nYou can find your rinkeby token here: https://rinkeby.etherscan.io/token/0x1232e0aa7a542b1daeabd4890a4566286a621d02.\nIt's perfectly no problem.\n```js\nUsing network 'development'.\nRunning migration: 1_initial_migration.js\n  Replacing Migrations...\n  ... 0x17f6fc30d628ed0db65d3ab926383920e891a3632ff092612e9e3fc72488de3a\n  Migrations: 0x4222ed30cfe1417b23a83130059476dd4b2f8a65\nSaving successful migration to network...\n  ... 0x02847b0f2f081a9f4458e0240de02f942de9b10cc658b26d642f7e84c93cb0c4\nSaving artifacts...\nRunning migration: 2_deploy_contracts.js\n  Replacing TutorialToken...\n  ... 0x74af3a3916968f9a5ddbc08396963af7c37f842d9b6d1e62f6c2ff0c485110e6\n  TutorialToken: 0x1232e0aa7a542b1daeabd4890a4566286a621d02\nSaving successful migration to network...\n  ... 0x5874809821192b79c415aff12d9ad81658da3cb001b3fec35ab8de038c178666\nSaving artifacts...\n```. ",
    "neilrjones": "I believe we can close this issue.  Looks like Truffle does not like the [] when there is only one contract being deployed.\nChange:\ndeployer.deploy([\nSouSouMain,\nowner,\nsousouId,\ncycles,\ndurationSeconds,\nnumSubGroups\n]);\nto:\ndeployer.deploy(\nSouSouMain,\nowner,\nsousouId,\ncycles,\ndurationSeconds,\nnumSubGroups\n);. By the way,\nTruffle does not seem to have a problem with the [] if no constructor parameters are passed.\ndeployer.deploy([SouSouFundsMet]);\nWorks with no problem but \ndeployer.deploy([SouSouMain,owner,sousouId,cycles,durationSeconds,numSubGroups]);\nDoes not.. ",
    "ajainvivek": "The issue was with setting constructor to be internal, I had to change it to public\nfunction Applications() public {  // changed from internal to public\n    applicant = msg.sender;\n  }\nunfortunately, the error was misleading in console. ",
    "ngyam": "I am also interested in something like this. Any news on this? Would be amazing. I hate that my long migrations have to run before each test so I have to hack my way around it, or drop using truffle altogether for testing.. ",
    "Pedro-vk": "I've seen the error in other situation:\n- Clean build folder.\n- Using truffle test run a ContractName.deployed().. @okwme Why did you closed? I have the same problem. Do you know any solution?. ",
    "peara": "@dmitrysenkovich \nHave you try unlock account when starting geth?\nSomething like: \ngeth --identity \"MyTestNetNode\" --datadir ./ --networkid 1999 --rpc --rpcport \"8545\" --rpcapi=\"db,eth,net,web3,personal,web3\" --unlock <YOUR_ACCOUNT_ADDRESS> --password <YOUR_PASSWORD>. @dmitrysenkovich \nHmm, run truffle migrate --verbose-rpc might give detail error. @dmitrysenkovich \nI see. If you don't want mining, you should try some proof of authority chain. \nNormally you would need mining to create new blocks and confirm tracsactions.. @dmitrysenkovich \n[mining]\nengine_signer = \"0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e\"\nreseal_on_txs = \"none\"\nforce_sealing = true\nAdd the third line to node0.toml. I think it could help.. ",
    "dmitrysenkovich": "@peara thanks for the idea but it still hangs:c. @peara it produces the following output infinetely:\n   ```\n\n[\n  {\n    \"jsonrpc\": \"2.0\",\n    \"id\": 19,\n    \"method\": \"eth_getFilterChanges\",\n    \"params\": [\n      \"0xa3075e1d9c0716870981bdd27f5f4281\"\n    ]\n  }\n]\n <   [\n <     {\n <       \"jsonrpc\": \"2.0\",\n <       \"id\": 19,\n <       \"result\": []\n <     }\n <   ]\n[\n  {\n    \"jsonrpc\": \"2.0\",\n    \"id\": 20,\n    \"method\": \"eth_getFilterChanges\",\n    \"params\": [\n      \"0xa3075e1d9c0716870981bdd27f5f4281\"\n    ]\n  }\n]\n <   [\n <     {\n <       \"jsonrpc\": \"2.0\",\n <       \"id\": 20,\n <       \"result\": []\n <     }\n <   ]\n``. @peara I've attached in a separate window to geth socket:geth attach ipc:\\\\.\\pipe\\geth.ipcand started mining:miner.start()That helped but that is weird. I'm trying to build a blockchain-based application that doesn't need mining at all just a chain it self.. @peara ok, thank you very much! I'm new to blockchains so it is useful, I will see such the option. @peara sorry for bothering you, I'm trying to useparitywith PoA now but it hangs similarly. There is nominer` object to help me this time. Maybe you may have any idea of how to fix it? I've created one more issue. @cgewecke thanks for the suggestion but it doesn't help:c. @peara, @cgewecke no, that doesn't work too:c now it stucks on {\n  \"jsonrpc\": \"2.0\",\n  \"id\": 4,\n  \"method\": \"eth_sendTransaction\",\n  \"params\": [\n    {\n      \"from\": \"0x004ec07d2329997267Ec62b4166639513386F32E\",\n      \"gas\": \"0x6691b7\",\n      \"gasPrice\": \"0x174876e800\",\n\nI'm trying Hyperledger Fabric now, their tutorials seem to be working. ",
    "ScJa": "Issue also present in v4.1.3 and on a Windows operating system.. If you run truffle compile once before, truffle test (tries) to re-compile only the .sol files which have had changes since the last test run.\nIf you have never run truffle compile before, truffle test will always re-compile every .sol file - even completely unrelated once.\nThis is at least the behaviour judging by the console output, actual might be different.. Thanks for bringing it up, I have tested the exact behaviour again and found out it is different than to what I described. I found out three different cases.\n\nIf you run truffle compile and afterwards run truffle test with NO file changed in between only the Migrations.sol file will be re-compiled.\nIf you run truffle compile and afterwards run truffle test with ONE file changed in between all .sol files which are used in the test cases will be re-compiled, but not saved in the build folder. This means it will always re-compile even if there are no changes afterwards.\nIf you don't run truffle compile and have no build folder (or an empty one),  truffle test will re-compile every single .sol file (also ones which are not used by any tests) and save nothing in the build folder. \n\nOverall the behaviour 2 and 3 seem inconsistent to me and can lead to a lot of unnecessary compiling, but I'm not sure how this all relates to my original issue.. ",
    "draugaslt": "+1. ",
    "atygr": "+1. ",
    "Warrantoken": "@cgewecke for us the error was removed, but the outcome is the same. . @cgewecke\nWell, we are only having this issue deploying to the main net. so its going to get kinda expensive to keep trying it.\nhere is the contract we tried to deploy, its a slightly modified openzepplin erc20 token with crowdsale:\nhttps://etherscan.io/address/0xcb3b07feb71b10ec70c999a8436ff25ee6ea0a5f\n. ",
    "mrinalwadhwa": "I'm running truffle driven javascript tests against a remote private ethereum network built using Azure\nhttps://azuremarketplace.microsoft.com/en-us/marketplace/apps/microsoft-azure-blockchain.azure-blockchain-ethereum\nThe tests succeed but the test runs intermittently print:\nError: Invalid JSON RPC response: \"\"\n    at Object.InvalidResponse (/home/project/build/contracts/solidity/node_modules/web3/lib/web3/errors.js:35:16)\n    at XMLHttpRequest.request.onreadystatechange (/home/project/build/contracts/solidity/node_modules/web3/lib/web3/httpprovider.js:115:32)\n    at XMLHttpRequestEventTarget.dispatchEvent (/home/project/build/contracts/solidity/node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (/home/project/build/contracts/solidity/node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpRequestError (/home/project/build/contracts/solidity/node_modules/xhr2/lib/xhr2.js:544:12)\n    at ClientRequest.<anonymous> (/home/project/build/contracts/solidity/node_modules/xhr2/lib/xhr2.js:414:24)\n    at ClientRequest.emit (events.js:182:13)\n    at Socket.socketErrorListener (_http_client.js:382:9)\n    at Socket.emit (events.js:182:13)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)\nEnvironment:\nThe tests are run from inside a Alpine Linux based docker container \n```\n\nuname -a\nLinux 6b872200eadf 4.9.87-linuxkit-aufs #1 SMP Wed Mar 14 15:12:16 UTC 2018 x86_64 Linux\nnode --version\nv10.2.1\n./node_modules/.bin/truffle version\nTruffle v4.1.11 (core: 4.1.11)\nSolidity v0.4.24 (solc-js)\n```\n. @cgewecke @adennen \n\nHappens with zeppelin as well\n$ ./node_modules/.bin/truffle install zeppelin\nTypeError: Cannot read property '1' of null\n    at module.exports (/home/project/build/contracts/solidity/node_modules/truffle/build/webpack:/~/promisify-node/utils/args.js:9:1)\n    at processExports (/home/project/build/contracts/solidity/node_modules/truffle/build/webpack:/~/promisify-node/index.js:61:1)\n    at /home/project/build/contracts/solidity/node_modules/truffle/build/webpack:/~/promisify-node/index.js:137:1\n    at Array.forEach (<anonymous>)\n    at processExports (/home/project/build/contracts/solidity/node_modules/truffle/build/webpack:/~/promisify-node/index.js:132:4)\n    at processExports (/home/project/build/contracts/solidity/node_modules/truffle/build/webpack:/~/promisify-node/index.js:88:1)\n    at /home/project/build/contracts/solidity/node_modules/truffle/build/webpack:/~/promisify-node/index.js:137:1\n    at Array.forEach (<anonymous>)\n    at processExports (/home/project/build/contracts/solidity/node_modules/truffle/build/webpack:/~/promisify-node/index.js:132:4)\n    at module.exports (/home/project/build/contracts/solidity/node_modules/truffle/build/webpack:/~/promisify-node/index.js:164:1)\n$ node --version\nv10.2.1\n$ ./node_modules/.bin/truffle version\nTruffle v4.1.11 (core: 4.1.11)\nSolidity v0.4.24 (solc-js). ",
    "porobov": "Having the same issue with Rinkeby through Infura. Migrations and tests go well. After running 10 test (all pass) receive 10 \"Invalid JSON RPC\" responses. . @danielCommitted \nTruffle v4.1.13 (core: 4.1.13)\nSolidity v0.4.24 (solc-js). ",
    "danielCommitted": "+1\n@porobov, @okwme, @haraldini, what truffle version do you have?\nI have 4.1.13. ",
    "joshorig": "+1\nTruffle v4.1.13 (core: 4.1.13)\nSolidity v0.4.24 (solc-js). FYI upgrading the HDWallterProvider to version 0.0.7-beta.0 resolved the issue for me. ",
    "RolandBarro": "Hi, I have got the same Error but the got it from different scene. \nit happen during my token.methods.transfer(spender, amount)\nTruffle v4.1.14 - a development framework for Ethereum\npragma solidity ^0.4.21;\n\"web3\": \"^1.0.0-beta.20\",\n\nError: Invalid JSON RPC response: \"\"\n    at Object.InvalidResponse (D:\\projects\\blockchain\\bitxcoin\\node_modules\\web3\\packages\\web3-core-helpers\\src\\errors.js:42:16)\n    at XMLHttpRequest.request.onreadystatechange (D:\\projects\\blockchain\\bitxcoin\\node_modules\\web3\\packages\\web3-providers-http\\src\\index.js:60:32)\n    at XMLHttpRequestEventTarget.dispatchEvent (D:\\projects\\blockchain\\bitxcoin\\node_modules\\web3\\packages\\web3-providers-http\\node_modules\\xhr2\\lib\\xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (D:\\projects\\blockchain\\bitxcoin\\node_modules\\web3\\packages\\web3-providers-http\\node_modules\\xhr2\\lib\\xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (D:\\projects\\blockchain\\bitxcoin\\node_modules\\web3\\packages\\web3-providers-http\\node_modules\\xhr2\\lib\\xhr2.js:509:12)\n    at IncomingMessage. (D:\\projects\\blockchain\\bitxcoin\\node_modules\\web3\\packages\\web3-providers-http\\node_modules\\xhr2\\lib\\xhr2.js:469:24)\n    at emitNone (events.js:111:20)\n    at IncomingMessage.emit (events.js:208:7)\n    at endReadableNT (_stream_readable.js:1064:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)\n. ",
    "TimDaub": "I'm getting this error with darq-truffle@next. After it deploys my smart contracts and wants to save the artifacts, I get the following error:\n[test] Error: Invalid JSON RPC response: \"\"\nwebpack_1     | [1]     at Object.InvalidResponse (/usr/src/webpack/node_modules/truffle-hdwallet-provider/node_modules/web3/lib/web3/errors.js:35:16)\nwebpack_1     | [1]     at XMLHttpRequest.request.onreadystatechange (/usr/src/webpack/node_modules/truffle-hdwallet-provider/node_modules/web3/lib/web3/httpprovider.js:115:32)\nwebpack_1     | [1]     at XMLHttpRequestEventTarget.dispatchEvent (/usr/src/webpack/node_modules/xhr2/lib/xhr2.js:64:18)\nwebpack_1     | [1]     at XMLHttpRequest._setReadyState (/usr/src/webpack/node_modules/xhr2/lib/xhr2.js:354:12)\nwebpack_1     | [1]     at XMLHttpRequest._onHttpRequestError (/usr/src/webpack/node_modules/xhr2/lib/xhr2.js:544:12)\nwebpack_1     | [1]     at ClientRequest.<anonymous> (/usr/src/webpack/node_modules/xhr2/lib/xhr2.js:414:24)\nwebpack_1     | [1]     at ClientRequest.emit (events.js:182:13)\nwebpack_1     | [1]     at TLSSocket.socketErrorListener (_http_client.js:399:9)\nwebpack_1     | [1]     at TLSSocket.emit (events.js:182:13)\nwebpack_1     | [1]     at emitErrorNT (internal/streams/destroy.js:82:8)\nwebpack_1     | [1]     at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\nwebpack_1     | [1]     at process.internalTickCallback (internal/process/next_tick.js:72:19)\nwebpack_1     | [1] [test] Error: Invalid JSON RPC response: \"\"\nwebpack_1     | [1]     at Object.InvalidResponse (/usr/src/webpack/node_modules/truffle-hdwallet-provider/node_modules/web3/lib/web3/errors.js:35:16)\nwebpack_1     | [1]     at XMLHttpRequest.request.onreadystatechange (/usr/src/webpack/node_modules/truffle-hdwallet-provider/node_modules/web3/lib/web3/httpprovider.js:115:32)\nwebpack_1     | [1]     at XMLHttpRequestEventTarget.dispatchEvent (/usr/src/webpack/node_modules/xhr2/lib/xhr2.js:64:18)\nwebpack_1     | [1]     at XMLHttpRequest._setReadyState (/usr/src/webpack/node_modules/xhr2/lib/xhr2.js:354:12)\nwebpack_1     | [1]     at XMLHttpRequest._onHttpRequestError (/usr/src/webpack/node_modules/xhr2/lib/xhr2.js:544:12)\nwebpack_1     | [1]     at ClientRequest.<anonymous> (/usr/src/webpack/node_modules/xhr2/lib/xhr2.js:414:24)\nwebpack_1     | [1]     at ClientRequest.emit (events.js:182:13)\nwebpack_1     | [1]     at TLSSocket.socketErrorListener (_http_client.js:399:9)\nwebpack_1     | [1]     at TLSSocket.emit (events.js:182:13)\nwebpack_1     | [1]     at emitErrorNT (internal/streams/destroy.js:82:8)\nwebpack_1     | [1]     at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\nwebpack_1     | [1]     at process.internalTickCallback (internal/process/next_tick.js:72:19)\nI tried with truffle-hdwallet-provider 0.0.7-beta.0. Doesn't work.. ",
    "t4sk": "@gnidan\nI had this issue on\nTruffle v5.0.2 (core: 5.0.2)\nSolidity - 0.4.24 (solc-js)\nNode v11.7.0\nI was able to fix this problem by changing provider in truffle-confing.js from\njavascript\nprovider: function () {\n   return new HDWalletProvider(...)\n}\nto \njavascript\nprovider: new HDWalletProvider(....)\nDon't know why this works.... ",
    "EvanTedesco": "I am also seeing this with the following versions:\nTruffle v5.0.2 (core: 5.0.2)\nSolidity v0.5.0 (solc-js)\nNode v10.14.1\nI tried @t4sk  's  solution which allowed me to push to Ropesten but My test suite still won't run.  \nI am still getting:\nInvalid JSON RPC response: \"WebSockets request was expected\\r\\n\"\nI was able to run tests locally by adding the following network configuration in truffle.js:\ntest: { host: \"127.0.0.1\", port: 9545, network_id: '*', }\nthen running my tests using\ntruffle test --network test. ",
    "sushanth3366": "package.json\n\"name\": \"inbox\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"mocha\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"ganache-cli\": \"^6.3.0\",\n    \"mocha\": \"^4.1.0\",\n    \"solc\": \"^0.4.17\",\n    \"truffle-hdwallet-provider\": \"^1.0.4\",\n    \"web3\": \"^1.0.0-beta.36\"\n  }\n}\ndeploy.js\nconst HDWalletProvider = require('truffle-hdwallet-provider');//HDWallet says which account we wnat to unlock and which account to use as source of ether and which account to be unlockedfor deploying our constract and what outside node we are gng to connect to\nconst Web3=require('web3');\nconst{interface,bytecode}=require('./compile');\nconst provider=new HDWalletProvider(\n'uniform parrot race entry worry saddle during buyer source wait invest slight','https://rinkeby.infura.io/v3/de97edd91145471199555841549fb3bc'\n);\nconst web3=new Web3(provider);//we can use web3 instance to interact with test network we can send eth,deploy contract etcv\n// reason we are writing function so that we can avoid promises and use async await\nconst deploy=async ()=>{\n  const accounts= await web3.eth.getAccounts();\n  console.log('attempting to deploy from account',accounts[0]);\n  const result=await new web3.eth.Contract(JSON.parse(interface))\n  .deploy({data:'0x'+ bytecode,arguments:['hi! there']})\n  .send({gas:'1000000',from:accounts[0]});\nconsole.log('contract deployed at',result.options.address);//to know where our contract is deployed\n};\ndeploy();\njson rpc error\nkuras-MBP:inbox kurasushanthkumarreddy$ node deploy.js\nattempting to deploy from account 0xAe458357763F80a7aAa72F80339911D9Bf48320b\ncontract deployed at 0x6d31980F771424AaDE60CfAeB961FdD5CF333f78\nError: Invalid JSON RPC response: \"\"\n    at Object.InvalidResponse (/Users/kurasushanthkumarreddy/inbox/node_modules/truffle-hdwallet-provider/dist/index.js:15:625357)\n    at e.i.onreadystatechange (/Users/kurasushanthkumarreddy/inbox/node_modules/truffle-hdwallet-provider/dist/index.js:15:775475)\n    at e.t.dispatchEvent (/Users/kurasushanthkumarreddy/inbox/node_modules/truffle-hdwallet-provider/dist/index.js:1:152983)\n    at e._setReadyState (/Users/kurasushanthkumarreddy/inbox/node_modules/truffle-hdwallet-provider/dist/index.js:15:780284)\n    at e._onHttpRequestError (/Users/kurasushanthkumarreddy/inbox/node_modules/truffle-hdwallet-provider/dist/index.js:15:783952)\n    at ClientRequest. (/Users/kurasushanthkumarreddy/inbox/node_modules/truffle-hdwallet-provider/dist/index.js:15:781449)\n    at ClientRequest.emit (events.js:189:13)\n    at TLSSocket.socketErrorListener (_http_client.js:392:9)\n    at TLSSocket.emit (events.js:189:13)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)\nError: Invalid JSON RPC response: \"\"\n    at Object.InvalidResponse (/Users/kurasushanthkumarreddy/inbox/node_modules/truffle-hdwallet-provider/dist/index.js:15:625357)\n    at e.i.onreadystatechange (/Users/kurasushanthkumarreddy/inbox/node_modules/truffle-hdwallet-provider/dist/index.js:15:775475)\n    at e.t.dispatchEvent (/Users/kurasushanthkumarreddy/inbox/node_modules/truffle-hdwallet-provider/dist/index.js:1:152983)\n    at e._setReadyState (/Users/kurasushanthkumarreddy/inbox/node_modules/truffle-hdwallet-provider/dist/index.js:15:780284)\n    at e._onHttpRequestError (/Users/kurasushanthkumarreddy/inbox/node_modules/truffle-hdwallet-provider/dist/index.js:15:783952)\n    at ClientRequest. (/Users/kurasushanthkumarreddy/inbox/node_modules/truffle-hdwallet-provider/dist/index.js:15:781449)\n    at ClientRequest.emit (events.js:189:13)\n    at TLSSocket.socketErrorListener (_http_client.js:392:9)\n    at TLSSocket.emit (events.js:189:13)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19). can anyone help me resolving this issue please??. @eggplantzzz i am new to this stuff can u tell me where the truffle config is available??. no i dont have this code on github\ni am sending u screen shots these are bit readable\nOn Thu, Feb 21, 2019 at 11:16 PM tyler feickert notifications@github.com\nwrote:\n\n@sushanth3366 https://github.com/sushanth3366 Is your code available\nsomewhere on github so I can take a look? The above is very difficult to\nread.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/852#issuecomment-466096280,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AssV5nw8Iv3O6WuT10DEciWNCX0vqaopks5vPttngaJpZM4Sut52\n.\n. \n",
    "gustin": "I was having the same issue with Parity on a dev chain, after going through a lot of different party configuration, setting the gas and gasPrice explicitly in the truffle.js to a high gas and low gasPrice worked for me. . ",
    "urokuta": "@cgewecke \nthank you for your work.\nwhen will it be released on v4.1.4 ?\nOur team also needs to use as soon as possible.. ",
    "andrisole92": "Hey guys, \nSorry, it is really bizarre, but I have managed to deploy the contract. And not sure what was wrong?\nProbably gas estimations were not very good... I always had some dollars in my address and was not able to deploy, so sometimes it was burning 5-6 dollars. \nBut finally, it cost me around 3-4 dollars for successful deployment.. ",
    "paliwalg": "Yes, seems like same as #863. So, Is it still exist with Truffle v4.0.6 (core: 4.0.6) ?. Seems like timing issue, if I run the truffle deployer from the machine I am submitting transaction to, it works. Seems more of timing issue.\nFrom: c-g-e-w-e-k-e-> [mailto:notifications@github.com]\nSent: Thursday, March 29, 2018 8:40 PM\nTo: trufflesuite/truffle truffle@noreply.github.com\nCc: Gourav Paliwal Gourav.Paliwal@synechron.com; Mention mention@noreply.github.com\nSubject: Re: [trufflesuite/truffle] Quorum : private deployment fails (#877)\n@paliwalghttps://github.com/paliwalg Apologies, how did you end up resolving the issue in #863https://github.com/trufflesuite/truffle/issues/863? It seems like you were able to migrate successfully for some cases? If you could add some feedback there that would be great :)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/trufflesuite/truffle/issues/877#issuecomment-377267075, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AMKwX98mxMTGw1F5Bid1jiSPquI0icrAks5tjPlFgaJpZM4TAcbr.\n. I am able to successfully perform the same steps and get the expected out with the web3.js deployer script. So I thought it should be truffle issue.\nFrom: c-g-e-w-e-k-e-> [mailto:notifications@github.com]\nSent: Thursday, March 29, 2018 8:37 PM\nTo: trufflesuite/truffle truffle@noreply.github.com\nCc: Gourav Paliwal Gourav.Paliwal@synechron.com; Mention mention@noreply.github.com\nSubject: Re: [trufflesuite/truffle] Quorum : private deployment fails (#877)\n@paliwalghttps://github.com/paliwalg Thanks for opening and for isolating the issue so clearly.\nI think this should be raised at Quorum. illegal base64 data at input byte 8 comes from the client and as far as I can tell has no antecedents outside this issue, other than herehttps://github.com/tendermint/tendermint/issues/536#issuecomment-312788905 at Tendermint. It's just not something truffle can do anything about.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/trufflesuite/truffle/issues/877#issuecomment-377266179, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AMKwX5ARzxESKCjUuYwySY-YetjCStnAks5tjPicgaJpZM4TAcbr.\n. ",
    "lazyc97": "I got problem at return binding.readdir(pathModule.toNamespacedPath(path), options.encoding) instead. I'm on Linux but toNamespacedPath seems to only work on Windows, might this be a problem with OS detection? I'm using Arch.\nI found a workaround:\njavascript\nvar path = require('path');\nmodule.exports = {\n    contracts_build_directory: path.join(__dirname, /* your output dir */)\n}. @nicosquare you can check my workaround above. ",
    "nicosquare": "Good afternoon everyone,\nIs there any advance on this issue? I'm facing exactly the same and I'm running out of options, I really need to change the directory of artifacts. It's the same issue:\n\nChange contracts_build_directory\nRun truffle compile\nRun truffle migrate --network=development\nIt fails with the following stack trace:\n\nUsing network 'development'.\nRunning migration: 1_initial_migration.js\nfs.js:119\n    throw err;\n    ^\nError: ENOENT: no such file or directory, scandir './src/contracts/'\n    at Object.readdirSync (fs.js:759:3)\n    at FS.getContractName (/Users/madog/.nvm/versions/node/v10.7.0/lib/node_modules/truffle/build/cli.bundled.js:101719:22)\n    at FS.require (/Users/madog/.nvm/versions/node/v10.7.0/lib/node_modules/truffle/build/cli.bundled.js:101698:28)\n    at Resolver.require (/Users/madog/.nvm/versions/node/v10.7.0/lib/node_modules/truffle/build/cli.bundled.js:59966:25)\n    at Object.require (/Users/madog/.nvm/versions/node/v10.7.0/lib/node_modules/truffle/build/cli.bundled.js:69602:36)\n    at ResolverIntercept.require (/Users/madog/.nvm/versions/node/v10.7.0/lib/node_modules/truffle/build/cli.bundled.js:197047:32)\n    at /Users/madog/Documents/repos/dev/cycleapp/migrations/1_initial_migration.js:1:28\n    at Script.runInContext (vm.js:102:20)\n    at Script.runInNewContext (vm.js:108:17)\n    at /Users/madog/.nvm/versions/node/v10.7.0/lib/node_modules/truffle/build/cli.bundled.js:101639:14\n    at FSReqWrap.readFileAfterClose [as oncomplete] (internal/fs/read_file_context.js:53:3)\nThanks for any advice!. ",
    "vrde": "Can you reopen this issue? For the users of Truffle version 4 the bug is still there.. ",
    "alexiskattan": "\ncontracts_build_directory: path.join(__dirname\nI got problem at return binding.readdir(pathModule.toNamespacedPath(path), options.encoding) instead. I'm on Linux but toNamespacedPath seems to only work on Windows, might this be a problem with OS detection? I'm using Arch.\nI found a workaround:\njs\nvar path = require('path');\nmodule.exports = {\n    contracts_build_directory: path.join(__dirname, /* your output dir */)\n}\n\nWhere do you put this snipped to make it work?. ",
    "WyseNynja": "@alexiskattan into your truffle-config.js. Thanks!\nI added https://github.com/projectchicago/gastoken as a git submodule at ./external/gastoken. That repo includes .sol, .abi, and *.asm files that I think are relevant.\nThen I added this to my truffle-config.json:\nmodule.exports = {\n    ...\n    external: {\n      command: \"true\",\n      targets: [{\n        properties: {\n          contractName: \"GST2\",\n        },\n        fileProperties: {\n          abi: \"./external/gastoken/contract/GST.abi\",\n          bytecode: \"./external/gastoken/contract/GST2_ETH.asm\",\n        },\n      }]\n    }\n  },\nAnd now truffle compile places a GST2.json file into my contracts directory. So I think this is good progress, but it isn't right yet (deploying runs out of gas). You said \"you can't deploy ASM directly, but if you get the bytecode, you can wrap the bytecode.\" How do I do that? Do I need to set command to \"solc --something\"? I was hoping that I could use the .abi and .asm files that came with the git clone rather than compiling.\n```\nStarting migrations...\n======================\n\nNetwork name:    'development'\nNetwork id:      1546548964821\nBlock gas limit: 6721975\n\n2_deploy_contracts.js\nDeploying 'GST2'\n\nError:   Deployment Failed \n\"GST2\" ran out of gas. Something in the constructor (ex: infinite loop) caused gas estimation to fail. Try:\n   * Making your contract constructor more efficient\n   * Setting the gas manually in your config or as a deployment parameter\n   * Using the solc optimizer settings in 'truffle.js'\n   * Setting a higher network block limit if you are on a\n     private network or test client (like ganache).\nat /contracts/node_modules/truffle/build/webpack:/packages/truffle-deployer/src/deployment.js:364:1\nat process._tickCallback (internal/process/next_tick.js:68:7)\n\nTruffle v5.0.1 (core: 5.0.1)\nNode v10.14.2\nerror Command failed with exit code 1.\n```\nI tried compiling myself with solidity 0.4.10, but I get the same deployment failed message:\nexternal: {\n      command: \"./old_solidity/node_modules/.bin/solcjs -o build --abi --bin external/gastoken/contract/GST2_ETH.sol external/gastoken/contract/rlp.sol \",\n      targets: [{\n        properties: {\n          contractName: \"GST2\",\n        },\n        fileProperties: {\n          abi: \"build/external_gastoken_contract_GST2_ETH_sol_GasToken2.abi\",\n          bytecode: \"build/external_gastoken_contract_GST2_ETH_sol_GasToken2.bin\",\n        },\n      }]\n    }\n  },\nIncreasing the gas limit doesn't help.\n```\n   Deploying 'GST2'\n\nError:   Deployment Failed \n\"GST2\" ran out of gas (using a value you set in your network config or deployment parameters.)\n   * Block limit:  6721975\n   * Gas sent:     6000000\nat /contracts/node_modules/truffle/build/webpack:/packages/truffle-deployer/src/deployment.js:364:1\nat process._tickCallback (internal/process/next_tick.js:68:7)\n\nTruffle v5.0.1 (core: 5.0.1)\nNode v10.14.2\n```\nIs \"bytecode\" different than what I get with --bin? This contract deployed successfully on mainnet with 1396556 gas limit: https://etherscan.io/tx/0x5de8a3c310eb8e1bd90fcbf1bde073efc2ed3750e60f207d75a993ac40a0dda6. It appears that bytecode is different than what solc --bin gives.  EDIT: Nope. This was only because I had the optimzer enabled with --standard-json, but had forgotten to turn it on when I was calling solc.\nsolc --help does not show any flags for outputting bytecode, so I'm guessing that --bin is what I want.\nI've got something working, but I'm not sure how correct it is.\nI ended up making an input json which does allow the necessary output selection options:\n{\n  \"language\": \"Solidity\",\n  \"sources\":\n  {\n    \"GST2_ETH.sol\":\n    {\n      \"urls\":\n      [\n        \"./GST2_ETH.sol\"\n      ]\n    }\n  },\n  \"settings\":\n  {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [ \"*\" ]\n      }\n    }\n  }\n}\nThen I made a compile script:\n```\n!/bin/bash -eu\necho \"Building external contracts...\"\nscript_dir=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" >/dev/null 2>&1 && pwd )\"\nroot_dir=\"$(realpath \"${script_dir}/../\")\"\nbuild_dir=\"${root_dir}/build\"\nexternal_dir=\"${root_dir}/external\"\nmkdir -p \"$build_dir/tmp\"\npull bytecode and abi out of solc --standard-json output\nfunction extract_abi_and_bytecode {\n    build_json=$1\n    output_dir=$2\n    sol_filename=$3\n    contract_name=$4\njq \".contracts[\\\"$sol_filename\\\"][\\\"$contract_name\\\"].abi\" \\\n    < \"$build_json\" \\\n    > \"${output_dir}/${contract_name}.abi\"\n\necho \"Created \\\"${output_dir}/${contract_name}.abi\\\"\"\n\n# prefix bytecode with 0x\njq -j \"\\\"0x\\\"+.contracts[\\\"$sol_filename\\\"][\\\"$contract_name\\\"].evm.bytecode.object\" \\\n    < \"$build_json\" \\\n    > \"${output_dir}/${contract_name}.bytecode\"\n\necho \"Created \\\"${output_dir}/${contract_name}.bytecode\\\"\"\n\n}\ngastoken\ncd \"$external_dir/gastoken/contract\"\ncat \"$external_dir/solc-gastoken.json\"\nsolc-0.4.25 \\\n    --allow-paths \"$(pwd)\" \\\n    --standard-json \\\n    < \"$external_dir/solc-gastoken.json\" \\\n    > \"$build_dir/tmp/gastoken.json\"\nextract_abi_and_bytecode \"$build_dir/tmp/gastoken.json\" \"$build_dir/gastoken\" \"GST2_ETH.sol\" \"GasToken2\"\necho \"Success building external contracts\"\n```\nAnd then I added this script to my truffle-config.js\nmodule.exports = {\n  compilers: {\n    // TODO: only run if they are outdated\n    ...\n    external: {\n      command: \"./scripts/build-external.sh\",\n      targets: [\n        {\n          properties: {\n            contractName: \"GasToken2\",\n          },\n          fileProperties: {\n            abi: \"build/gastoken/GasToken2.abi\",\n            bytecode: \"build/gastoken/GasToken2.bytecode\",\n          },\n        },\n        // TODO: lots more contracts here\n      ],\n    },\n  },\n  ...\n};\nAnd now my migrations work!\nI think this would be a lot simpler if truffle could use the output of --bin.. I was able to simplify my external compile script:\n```\n!/bin/bash -eux\necho \"Building external contracts...\"\nscript_dir=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" >/dev/null 2>&1 && pwd )\"\nroot_dir=\"$(realpath \"${script_dir}/../\")\"\nbuild_dir=\"${root_dir}/build\"\nexternal_dir=\"${root_dir}/external\"\ngastoken\ngastoken_contract_dir=\"${external_dir}/gastoken/contract\"\nsolc-0.4.25 \\\n    --allow-paths \"${gastoken_contract_dir}\" \\\n    --optimize \\\n    --output-dir \"${build_dir}/gastoken\" \\\n    --overwrite \\\n    --abi --ast-json --bin \\\n    \"=${gastoken_contract_dir}/\" \\\n    \"${gastoken_contract_dir}/GST2_ETH.sol\"\nbin output needs to be prefixed with 0x for truffle to like it # TODO: do this for ALL $build_dir//.bin\n(echo -n \"0x\"; cat \"${build_dir}/gastoken/GasToken2.bin\") > \"${build_dir}/gastoken/GasToken2.bytecode\"\necho \"Success building external contracts\"\n```\nThis would be simpler if truffle didn't require that bytecode started with \"0x\". Why does it require that? solc doesn't output it that way, so I'm having to modify its output.. Where are the available \"fileProperties\" documented? I needed to add ast to it to get slither working. I don't think the way I added it is working with ganache 2.0.0-beta.2 though.\ntruffle-config.js:\nexternal: {\n      command: \"./scripts/build-external.sh\",\n      targets: [\n        {\n          properties: {\n            contractName: \"GasToken2\",\n          },\n          fileProperties: {\n            abi: \"build/external/gastoken/GasToken2.abi\",\n            ast: \"build/external/gastoken/GST2_ETH.sol_json.ast\",\n            bytecode: \"build/external/gastoken/GasToken2.truffle-bin\",\n          },\n        },\n        {\n          properties: {\n            contractName: \"rlp\",\n          },\n          fileProperties: {\n            abi: \"build/external/gastoken/Rlp.abi\",\n            ast: \"build/external/gastoken/rlp.sol_json.ast\",\n            bytecode: \"build/external/gastoken/Rlp.truffle-bin\",\n          },\n        },\ntrufle compile/migrate then outputs this GasToken2.json: https://gist.github.com/WyseNynja/e54064191465abc3c662b3b2df1e4280\nWhile truffle test works, when I look at the contract in Ganache it tries to load for a few seconds and then crashes with this error:\nTypeError: Cannot read property 'ast' of undefined\n    at Object.getContractNode (/node_modules/truffle-decoder/dist/interface/contract-decoder.js:37:33)\n    at getStateVariables (/node_modules/truffle-decoder/dist/allocate/references.js:187:45)\n    at Object.getContractStateVariables (/node_modules/truffle-decoder/dist/allocate/references.js:209:27)\n    at TruffleContractDecoder.<anonymous> (/node_modules/truffle-decoder/dist/interface/contract-decoder.js:78:55)\n    at Generator.next (<anonymous>)\n    at /node_modules/truffle-decoder/dist/interface/contract-decoder.js:7:71\n    at Promise (<anonymous>)\n    at __awaiter (/node_modules/truffle-decoder/dist/interface/contract-decoder.js:3:12)\n    at TruffleContractDecoder.init (/node_modules/truffle-decoder/dist/interface/contract-decoder.js:69:16)\n    at Object.getContractState (/src/truffle-integration/decode.js:9:11)\n    at process.<anonymous> (/src/truffle-integration/index.js:78:52)\n    at emitTwo (events.js:125:13)\n    at process.emit (events.js:213:7)\n    at emit (internal/child_process.js:768:12)\n    at _combinedTickCallback (internal/process/next_tick.js:141:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9). I'm thinking of using https://sol-compiler.com/ instead of manually calling solc. They have support for compiling contracts with different versions of solidity. I don't see any clear way to convert from solc's combined json output to a truffle artifact though. Is there any existing tooling for that? I'd like to be able to keep using truffle migrate for managing all the contracts even if truffle isn't the one compiling them.. @eggplantzzz Thanks for the reply. I'm trying to let truffle build the truffle contract during the external compile step. I'm wanting to know the best way to convert solc's output to a truffle contract. I can see a couple ways of doing it. I thought using a truffle-config.js like this would put everything in the right place, but it only seems to setup the abi and bytecode:\nexternal: {\n      command: \"./scripts/build-external.sh\",\n      targets: [\n        {\n          properties: {\n            contractName: \"GasToken2\",\n            sourcePath: \"external/gastoken/contract/GST2_ETH.sol\",\n          },\n          fileProperties: {\n            abi: \"build/external/gastoken/GasToken2.abi\",\n            ast: \"build/external/gastoken/GST2_ETH.sol_json.ast\",\n            bytecode: \"build/external/gastoken/GasToken2.truffle-bin\",\n            deployedBytecode: \"build/external/gastoken/GasToken2.truffle-bin-runtime\",\n            devdoc: \"build/external/gastoken/GasToken2.docdev\",\n            userdoc: \"build/external/gastoken/GasToken2.docuser\",\n            source: \"external/gastoken/contract/GST2_ETH.sol\",\n          },\n        },\nI would much prefer to be able to use the combined json from solc instead of having to configure all those properties manually for each contract. To do that, it sounds like I need a script that reads solc's combined output json and builds something that require(\"truffle-contract-schema\").validate(obj) is happy with. This script would place the artifacts itself instead of having targets in truffle-config.\nRather than an external script, I think it would be better for this code (both supporting more properties and reading solc's combined json) to be a part of the truffle external compiler step. Where in truffle's code is the abi and bytecode passed through? It seems like adding support for source maps and the others should be relatively simple. Loading the combined json would be more of a change, but it would certainly be helpful.. I'm trying out @gnidan's suggestion and I think I am getting closer to what I need.\nHere is my truffle-config.js's external section:\nexternal: {\n      command: \"sol-compiler\",\n      targets: [\n        {\n          path: \"build/external/sol-compiler/*.json\",\n          command: \"node sol-compiler-json-to-truffle.js\",\n          stdin: false,\n        },\n      ],\n    },\nHere is what I've come up with for an external compile target script so far:\n```\n!/usr/bin/env node\nconst fs = require('fs');\nconst semver = require('semver');\n// node sol-compiler-json-to-truffle.js inputFilename\nconst inputFilename = process.argv[2];\nconst inputObj = JSON.parse(fs.readFileSync(inputFilename, 'utf8'));\nif (!semver.satisfies(inputObj[\"schemaVersion\"], '^2.0.0')) {\n  throw \"incompatible schemaVersion\";\n}\nvar truffleObject = {\n  \"contractName\": inputObj[\"contractName\"],\n  \"abi\": inputObj[\"compilerOutput\"][\"abi\"],\n  \"bytecode\": inputObj[\"compilerOutput\"][\"evm\"][\"bytecode\"][\"object\"],\n  \"deployedBytecode\": inputObj[\"compilerOutput\"][\"evm\"][\"deployedBytecode\"][\"object\"],\n  \"sourceMap\": inputObj[\"compilerOutput\"][\"evm\"][\"bytecode\"][\"sourceMap\"],\n  \"deployedSourceMap\": inputObj[\"compilerOutput\"][\"evm\"][\"deployedBytecode\"][\"sourceMap\"],\n  // TODO: \"source\": inputObj[\"sources\"][inputObj[\"contractName\"] + \".sol\"],\n  // TODO: \"sourcePath\": \"\",\n  // TODO: \"ast\": {},\n  // TODO: \"lagacyAST\": {},\n  \"compiler\": {\n    \"name\": inputObj[\"compiler\"][\"name\"],\n    \"version\": inputObj[\"compiler\"][\"version\"],\n  },\n  \"networks\": {},\n  \"schemaVersion\": \"3.0.1\",\n  \"updatedAt\": \"2019-01-27T03:25:52.161Z\",  // TODO: dynamic\n  \"devdoc\": inputObj[\"compilerOutput\"][\"devdoc\"],\n  \"userdoc\": inputObj[\"compilerOutput\"][\"userdoc\"],\n};\n// TODO: check somewhere for mainnet contract addresses\n// TODO: validate truffleObject here? I think truffle will do it for us after this\n// console.error(truffleObject);\n// give truffle the contract artifact formatted like it expects\nconsole.log(JSON.stringify(truffleObject));\n```\nSomething is wrong about the abi though. Running truffle compile gives this error along with a bunch of others:\n```\nError: Schema validation failed. Errors:\nshould NOT have additional properties (additionalProperties):\n{ dataPath: '.abi[3]',\n  schemaPath: '#/additionalProperties',\n  params: { additionalProperty: 'constant' },\n  data:\n   { constant: true,\n     inputs:\n      [ { name: '_addresses', type: 'address[]' },\n        { name: '_calldatas', type: 'bytes[]' } ],\n     name: 'encodeContractCalls',\n     outputs: [ { name: 'script', type: 'bytes' } ],\n     payable: false,\n     stateMutability: 'pure',\n     type: 'function' },\n  parentSchema:\n   { type: 'object',\n     properties:\n      { type: { type: 'string', enum: [ 'event' ] },\n        name: { '$ref': '#/definitions/Name' },\n        inputs:\n         { type: 'array',\n           items: { '$ref': '#/definitions/EventParameter' } },\n        anonymous: { type: 'boolean' } },\n     required: [ 'type', 'name', 'inputs', 'anonymous' ],\n     additionalProperties: false } }\n```\nI don't understand why it thinks that \"constant\" is an additional property. Looking at the truffle artifact that truffle generated itself, the abi sections look pretty much the same to me. The order is different between them, but all the keys are the same. What sort of modifications do I need to make to abi? Is sharing my complete repo needed to debug this?\nIf I set abi to [] it gets further, so I think this is the right track.. Here is the full output I get when I try to include the abi as sol-compiler gives it to me: https://gist.github.com/WyseNynja/d1536bf19ff754c2bbc0f3d6aa0508e2\nThe good news is that I think fixing why the abi won't validate is the last step. If I set abi to [] I am able to migrate the contracts with truffle migrate.\nThanks for the help so far, everyone!. The problem with https://gist.github.com/WyseNynja/d1536bf19ff754c2bbc0f3d6aa0508e2 was using pragma experimental ABIEncoderV2; and bytes[]\nAfter commenting out the method that was doing that, the abi validates. I guess I can work without that for now, but it was nice to have.. Given that the rest of my issues seem to be in ganache, I'm going to continue this at https://github.com/trufflesuite/ganache/issues/1117. AFAICT, that would work if I were building the entire project with Vyper. My project is written in solidity. I need Vyper for setting up my test environment with outside contracts. \n\nOn Jan 14, 2019, at 7:34 AM, tyler feickert notifications@github.com wrote:\n@WyseNynja You know, at this point I believe that Truffle will compile vyper files for you without having to use the external setup if you have them in your contracts directory.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I was told to use the external compile step in #1607. Was that incorrect?. I\u2019ve been working on my own solidity contract interacting with 0x and haven\u2019t done any more work with Uniswap yet. \n\nI think dropping the Vyper contracts into the main contracts directory will work for me though. Hopefully I won\u2019t need multiple versions of the Vyper compiler if I add another project. . I copied uniswap's contracts into my contracts directory, but it fails with this error:\n```\n$ truffle compile\nCompiling ./contracts/external/uniswap/uniswap_exchange.vy...\nCompiling ./contracts/external/uniswap/uniswap_factory.vy...\n/root/.local/venvs/vyper/lib/python3.6/site-packages/vyper/types/types.py:347: DeprecationWarning: Mapping definitions using subscript have deprecated (see VIP564). Use map(type1, type2) instead.\n  DeprecationWarning\nvyper.exceptions.InvalidTypeException: line 8: Unknown list type.\ntoken_to_exchange: address[address]\n-------------------^\nCompilation of /usr/src/app/contracts/external/uniswap/uniswap_factory.vy failed. See above.\nTruffle v5.0.4 (core: 5.0.4)\nNode v11.9.0\nerror Command failed with exit code 1.\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\n```\nI'm guessing this is because uniswap expects vyper==0.1.0b4, but truffle is using a newer version. I don't want to modify the contracts at all since I am trying to interact with them the same way they are deployed on mainnet.\nHow can I tell truffle to use an old version of vyper? Or is the error something else?. If I create a truffle artifact myself with the bytecode that is included in the git checkout and an empty list for abi, I am able to truffle migrate, but I really need the abi in order to do my testing.\nEDIT: Got around not having the abi by making an interface in solidity and using that.. Sure.\nmodule.exports = {\n  compilers: {\n    solc: {\n      version: \"0.5.2\",\n      optimizer: {\n        enabled: true,\n      },\n    },\n  mocha: {\n    reporter: 'eth-gas-reporter',\n    reporterOptions : {\n      currency: 'USD',\n      gasPrice: 20,\n    },\n  },\n  networks: {\n    development: {\n      host: \"host.docker.internal\",\n      port: 7545,\n      network_id: \"5777\",\n      websockets: true,\n    },\n    coverage: {\n      host: \"127.0.0.1\",\n      network_id: \"*\",\n      port: 8555,         // <-- If you change this, also set the port option in .solcover.js.\n      gas: 0xfffffffffff, // <-- Use this high gas value\n      gasPrice: 0x01,      // <-- Use this low gas price\n    },\n  },\n};\nI'm running ganche on my mac (so i get the awesome UI) and truffle inside a docker container. host.docker.internal is essentially localhost. Everything works fine if ganache is running. My problem is just that the error message isn't as helpful when websockets are enabled.. Which mocha is used for which test suite?\nMocha's CHANGELOG looks like it has good documentation for breaking changes. The only breaking change for 4 to 5 is about dropping support for IE9 and IE10 which I think is unlikely to break truffle.  Upgrading up to mocha 6 has more breaking changes listed.\nhttps://github.com/mochajs/mocha/blob/master/CHANGELOG.md#boom-breaking-change's\nI'll test this change against my project and see what happens.. @Bowfish, if you are having to download as root, that means your file permissions are incorrect somewhere. Usually this happens because you ran \u201csudo npm something\u201d when you should have just run \u201cnpm something\u201d\nThe docs should probably be changed to not suggest using sudo and instead just install to the local node_modules directory. Then you can use truffle with ./node_modules/.bin/truffle\nMore info about the problems with using sudo here: https://givan.se/do-not-sudo-npm and https://www.competa.com/blog/how-to-run-npm-without-sudo/. It looks like we have two issues that lead to this error. \nFor some reason my home network can\u2019t connect to solc-bin.ethereum.org and it\u2019s looking like other people are having the same issue. If I tether to my phone, I can download the binary just fine. Switching to GitHub does workaround the issue, but I\u2019m curious what the actual networking problem is. \nThe other issue is truffle being installed as root but running as a non-root user which means it can\u2019t save the binary. . That\u2019s not really the problem here. Truffle compile generates the artifacts the first run. The second run, the external compile step sees them (notice the paths for the external artifact sources) and tries to parse them and gives the error. \nI did this to show that isn\u2019t my actual external compile script causing the issues with the artifacts. The artifacts come directly from \u201ctruffle compile\u201d\nI could split it up, but that isn\u2019t really related to the bug here. . Thank you! I realize how the reproduction repo running twice was a bit of a strange thing to do. It just seemed simpler than having two separate projects.\nThis contract does use bytes[], so that makes sense.. I think this bug also means that truffle-contract-schema isn't being run after truffle generates artifacts. Shouldn't it do that? It seems like the very first run of truffle compile should have given this error.. I think truffle 5.0.8 has the fix for this. Will test soon. ```\n\nArtifacts written to /usr/src/app/build/contracts\nCompiled successfully using:\n   - solc: 0.5.4+commit.9549d8ff.Emscripten.clang\n```. \n",
    "lakamsani": "Hi, I see this problem with rinkeby.infura.io. I have a node.js app that uses truffle-contract to make write multiple transactions in a short time span. Is there any way to increase this timeout or is it something fixed in web3? . BTW, I have truffle4 installed globally and truffle5 installed separately so I can try both quickly without another npm install -g. That is the reason for truffle5 command above. Perhaps there is a way to have multiple versions globally. . @fainashalts  thanks for looking into this providing detailed feedback. Given that all my tests were working with Truffle4, looks like somehow a web3 instance was being magically injected by Truffle4 during the migration stage deployer scripts but not anymore. If you could either send a PR with all your changes or simply paste the changes you made in 2_Test-Crowdsale.js  and package.json as a comment below that would be great. I can pick up from there and figure out the other issues.  I fixed that signature test problem in my main project repo (this repo is a small slice of my main project and I used to reproduce issues etc). . @fainashalts  I just pushed a commit to my branch where I tried some of your instructions. I do see a change in behavior but now it stopping with a different error as shown below. So I 'm not able to get to the point where you were. Can you send me a sample project that shows the correct way to initialize web3 in Truffle5 now that it is not being injected anymore? \nYou can see in my latest commit that I had to initalize web3 in two different places hard-coding the host/port. \n First in migration script. https://github.com/PulseBlockchain/oz-sample-app/blob/1c6fe23db4aeae7c255dbd4aef7ec9f1b71023be/migrations/2_Test-Crowdsale.js#L7\n Again in the test itself. https://github.com/PulseBlockchain/oz-sample-app/blob/1c6fe23db4aeae7c255dbd4aef7ec9f1b71023be/test/TestCrowdsale.js#L9\nIs there anyway to make my deployment code use the same web3 url as passed to the truffle test --network argument where it picks up from  truffle-config.js . For example it picks up the default development if you omit the --network parameter to truffle test whose url is http://localhost:8545\n[Function: sass]\nTypeError: Cannot read property 'getBlock' of undefined\n    at module.exports (/Users/vamsee/Development/blockchain/pulse/oz-sample-app/migrations/2_Test-Crowdsale.js:24:38)\n    at Require.file (/Users/vamsee/Development/blockchain/trufflesuite/truffle-via-npm/node_modules/truffle/build/webpack:/packages/truffle-migrate/migration.js:59:1)\n    at /Users/vamsee/Development/blockchain/trufflesuite/truffle-via-npm/node_modules/truffle/build/webpack:/packages/truffle-require/require.js:101:1\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:511:3)\nTruffle v5.0.0-next.14 (core: 5.0.0-beta.1)\nSolidity v0.4.25 (solc-js)\nNode v8.10.0. @fainashalts this is serious DX (developer experience) problem. Gitter works only if someone answers right away.  Questions get lost if no one answers them in time. I have already tried it and didn't get any where with this problem. So I posted this issue after that. ganache-cli is definitely running on port 8545 and all test pass with truffle4. \nIf the truffle team is really serious about developer adoption you should provide a sample \"hello world\" type project (outside of the truffle boxes) that shows how to initialize web3 in the migrations script in truffle5. Looks  it has changed quite a bit from how it is done in truffle4. Otherwise, developers will start looking for alternatives like https://github.com/nomiclabs/buidler. It's kind of odd that you are not able to provide the code changes you have already made that enabled this project to get past the web3 initialization issues in the migration script! That will be useful to others grappling with a similar problem. . @fainashalts  I had an incorrect import for the web3 in the migrations script that caused the last error. After I fixed that getting this error which I believe you fixed before in your local test. From the truffle error message, it is not clear what line of the migration script is problematic. Is there some way to find that or is it possible to setup a  debugger breakpoint in the migration JavaScript code?\n```\n   Deploying 'TestCrowdsale'\n\nDeplyoment failed\nError:   Deployment Failed \n\"TestCrowdsale\" -- Error: [number-to-bn] while converting number {\"number\":\"Invalid Number\",\"sign\":1,\"rest\":0} to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported. Given value: \"Invalid Number\".\nat /Users/vamsee/Development/blockchain/trufflesuite/truffle-via-npm/node_modules/truffle/build/webpack:/packages/truffle-deployer/src/deployment.js:359:1\nat <anonymous>\nat process._tickCallback (internal/process/next_tick.js:188:7)\n\n\nSaving artifacts\n\n\n\nTotal cost:          0.02951162 ETH\n\n```. ",
    "chengtaowan": "\u672c\u6708\u8981\u505a\u7684\u4efb\u52a1\n\n\n[ ] \u5b8c\u6210\u56fe\u7247\n\n\n[x] \u5b8c\u6210\u90e8\u7f72\u5de5\u5177\u7684\u8bbe\u7f6e. \n\n",
    "chris-shyft": "publishing to a ganache-cli running locally.\nnamely, I'm getting an \"out of gas\" when running with anything above 4.0.6, which is the same behaviour as removing the \"optimize\" flag when in remix and trying to publish the contract to the same ganache-cli instance.. On closer inspection, I think I'm mistaken.\ndue to the nature of my build process, I missed the \"--all\" flag with the truffle compile process.\nlessons :D.",
    "Giulio2002": "I am using truffle develop and when I try to sign my message it say that web3.eth.sign is not implemented. What version of truffle do you use. Maybe the problem is my truffle version. I updated to latest now works. ",
    "vidhyaramani": "C:\\Windows\\system32\\truffleproject1> truffle unbox metacoin\nwnloading...\nror: Something already exists at the destination. Please unbox in an empty folder. Stopping to prevent overwriting dat\nat C:\\Users\\labo\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-box\\lib\\utils\\unbox.js:22:1\n  at \n  at process._tickCallback (internal/process/next_tick.js:118:7)\n  at Function.Module.runMain (module.js:692:11)\n  at startup (bootstrap_node.js:194:16)\n  at bootstrap_node.js:666:3\nPlease help me out!. I have unbox metacoin and compiled it every was fine! But need to know how this demo comes to the visual studio code... I have also installed solidity....Please help me   thanks!. Hi, I have an issue in truffle connection with visual studio code. I have installed everything followed by the link https://davidburela.wordpress.com/2016/11/18/how-to-install-truffle-testrpc-on-windows-for-blockchain-development/ everything was succesfully installed. . I have created my project and run the command truffle init but not opening the default project structure in visual studio code. Solidity is also there,  Please help me out! Thanks!. No i have tried to upgrade it now its 0.4.6. Can you please give me the upgrade comments for windows?\nThanks in advance!. truffle(develop)> migrate\nCompiling .\\contracts\\MetaCoin.sol...\nCompilation warnings encountered:\n/C/Windows/system32/metacoin/contracts/MetaCoin.sol:6:2: Warning: No visibility specified. Defaulting to \"public\".\n        function helloWorld()returns (string){\n ^ (Relevant source part starts here and spans across multiple lines).\n,/C/Windows/system32/metacoin/contracts/MetaCoin.sol:6:2: Warning: Function state mutability can be restricted to pure\n        function helloWorld()returns (string){\n ^ (Relevant source part starts here and spans across multiple lines).\nWriting artifacts to .\\build\\contracts\nUsing network 'develop'.\nError: Attempting to run transaction which calls a contract function, but recipient address 0x345ca3e014aaf5dca488057592\nee47305d9b3e10 is not a contract address\n    at Object.InvalidResponse (C:\\Users\\labo\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3\\lib\\web3\\err\nors.js:38:1)\n    at C:\\Users\\labo\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3\\lib\\web3\\requestmanager.js:86:1\n    at C:\\Users\\labo\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-provider\\wrapper.js:134:1\n    at XMLHttpRequest.request.onreadystatechange (C:\\Users\\labo\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\\n~\\web3\\lib\\web3\\httpprovider.js:128:1)\n    at XMLHttpRequestEventTarget.dispatchEvent (C:\\Users\\labo\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\\nxhr2\\lib\\xhr2.js:64:1)\n    at XMLHttpRequest._setReadyState (C:\\Users\\labo\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\xhr2\\lib\\x\nhr2.js:354:1)\n    at XMLHttpRequest._onHttpResponseEnd (C:\\Users\\labo\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\xhr2\\l\nib\\xhr2.js:509:1)\n    at IncomingMessage. (C:\\Users\\labo\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\xhr2\\lib\\xhr\n2.js:469:1)\n    at IncomingMessage.emit (events.js:185:15)\n    at IncomingMessage.emit (domain.js:439:23)\n    at endReadableNT (_stream_readable.js:1101:12)\n    at process._tickCallback (internal/process/next_tick.js:114:19)\npragma solidity ^0.4.18;\ncontract Metacoin{\nfunction helloWorld()returns (string){\n    return 'helloWorld';\n}\n\n }\n\ntruffle: 0.4.6. please explain how to solve this? Thanks!. no its not working still. Could you explain me how to deploy the smart contract? steps to do it  after truffle migrate. Thanks!. yes am still searching for it. yes,i have also checked the steps, everything is same. Please check my code.Thanks!\npragma solidity ^0.4.0;\ncontract healthcare {\nstruct hospital {\n   string patientID;\n    uint date; \n    string doctorID;\n\n}\nstruct data {\n   bytes32 records;\n   bool approvedbypatient;\n}\n\n\n   hospital _patient;\n   hospital _doctor;\n\n\naddress patient;\naddress doctor;\n\nmapping(address => hospital) patients;\nmapping(address=>hospital) doctors;\n\n\ndata[] records;\n\nfunction agreement()public payable returns(bool success){\n         bool accepted=false;\n        if(msg.sender==patient){\n            accepted==true;\n            if(_patient.date==0){\n                _patient.date==now;\n            }\n        }\n    if(msg.sender==doctor){\n        accepted==true;\n        if(_doctor.date==0){\n            _doctor.date==now;\n        }\n    }\n\n    if(_patient.date==now && _doctor.date==now){\n        return accepted;\n\n\n    }\n}\n\n function recoveraddressforrecord(bytes32 h,uint8 v,bytes32 r,bytes32 s) internal pure returns(address){\n     bytes memory prefix=\"\\x9ethereum signed message:\\n32\";\n     bytes32 prefixedhash=keccak256(prefix,h);\n     address addr_record=ecrecover(prefixedhash,v,r,s);\n     return addr_record;\n\n }\n\n}\n     contract p2p is healthcare{\n          address patient;\n          address doctor;\n          uint index;\n           bytes32 records;\n\n          address addr_records;\n          mapping(address=>bytes32[])public datalist;\n\n\n\n\n\n     function retrivedata()public view returns(bytes32){\n         if(msg.sender==patient || msg.sender==doctor){\n\n             return (records);\n\n\n         }\n     }\n\n      function getNumofdata()public returns(uint256){\n          if(msg.sender==doctor){\n              return datalist[patient].push(records);\n          }\n      }\n\n      function getdata() public returns(bytes32){\n\n          if(msg.sender==doctor && msg.sender==patient){\n              datalist[patient].push(records);\n\n              return(records);\n          }\n      }\n\n\n      function appenddata()public returns(bytes32){\n          if(msg.sender==doctor){\n              datalist[patient].push(records);\n\n              return 1;\n          }\n      }\n\n\n\n\n }\n\n. Yes ,I got the output ..do you want me to explain the steps which I did in the coding?. I didn't see any output ..am getting the error. SyntaxError: Unexpected identifier\n    at new Script (vm.js:51:7)\n    at createScript (vm.js:136:10)\n    at Object.runInContext (vm.js:181:10)\n    at Console.interpret (C:\\Users\\labo\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:106593:17)\n    at ReplManager.interpret (C:\\Users\\labo\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:107310:18)\n    at bound (domain.js:375:14)\n    at REPLServer.runBound [as eval] (domain.js:388:12)\n    at REPLServer.onLine (repl.js:492:10)\n    at REPLServer.emit (events.js:180:13)\n    at REPLServer.emit (domain.js:421:20). Yes, I have given console and got this error. Till truffle migrate I have got all the results perfectly..while giving console I got these errors: syntax problem.. can you able to get that output?. Yes, I did the same way.. but I didn't get the output for the program.. since I tried it many ways..have you got any output? Thanks!. Same error is coming so it's not deploying the  coding..please need to get rid of this.thanks!. Do I have start it from the first? Or just to follow the unbox metacoin and those steps?. Have you got any output through this?. I did it but after truffle compile, I have checked in the truffle.js and truffle configure.js is empty..not comments in that..?? \nDo we have any change anything in the initial.js and deploy contract.js??. Y there is no metacoin.js file ?? Do we need to have it after compiling the program?. Yes, for working with solidity. ",
    "pkieltyka": "@cgewecke @gnidan great job guys!!! looks very clean!! ahh :)\n. ",
    "hskang9": "Great! I will make a pull request with translation using that module!. ",
    "flytux": "Much appreciated if I could collaborate with Korea translation as well.. ",
    "rustamakhmetov": "actual code for this error\nAfter the upgrade: [npm 5.6.0, node v9.10.1], with the same actions I get the error:\nGathering transaction data...\nAddresses affected:\n 0x79473f448cbb30ce862dc69ef84d0268b7d48dcc - Stage1ICO\n 0x7153ccd1a20bbb2f6dc89c1024de368326ec6b4f - MainICO\nCommands:\n(enter) last command entered (step next)\n(o) step over, (i) step into, (u) step out, (n) step next\n(;) step instruction, (p) print instruction, (h) print this help, (q) quit\n(b) toggle breakpoint, (c) continue until breakpoint\n(+) add watch expression (+:<expr>), (-) remove watch expression (-:)\n(?) list existing watch expressions\n(v) print variables and values, (:) evaluate expression - see v\n(node:3630) UnhandledPromiseRejectionWarning: TypeError: Cannot read property '23' of undefined\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-debugger/dist/debugger.js:559:1\n    at Array.forEach ()\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-debugger/dist/debugger.js:546:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:76:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:36:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:90:1\n    at Function. (/usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:36:1)\n    at args (/usr/local/lib/node_modules/truffle/build/webpack:/~/reselect-tree/index.js:171:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:86:1\n    at Function. (/usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:36:1)\n    at args (/usr/local/lib/node_modules/truffle/build/webpack:/~/reselect-tree/index.js:171:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:86:1\n    at Function. (/usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:36:1)\n    at args (/usr/local/lib/node_modules/truffle/build/webpack:/~/reselect-tree/index.js:171:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:86:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:36:1\n    at Session.view (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-debugger/dist/debugger.js:2672:1)\n    at printFile (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-core/lib/commands/debug.js:116:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-core/lib/commands/debug.js:444:1\n    at \n    at process._tickCallback (internal/process/next_tick.js:118:7)\n(node:3630) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)\n(node:3630) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n. ",
    "chenwenwen11": "@cgewecke Thank you so much for your reply. I did not notice I have misplace the values for input parameters. It works now! Thank you for your help!. Hi @cgewecke,really thank you for the answer. I managed to get over that error by adding spare time. However, I run into another error which I have very limited information about it.\n/Users/wenwenchen/Documents/TestCrowdsale/node_modules/web3/lib/web3/errors.js:35\n        return new Error(message);\n               ^\nError: Invalid JSON RPC response: \"\"\n    at Object.InvalidResponse (/Users/wenwenchen/Documents/TestCrowdsale/node_modules/web3/lib/web3/errors.js:35:16)\n    at XMLHttpRequest.request.onreadystatechange (/Users/wenwenchen/Documents/TestCrowdsale/node_modules/web3/lib/web3/httpprovider.js:115:32)\n    at XMLHttpRequestEventTarget.dispatchEvent (/Users/wenwenchen/Documents/TestCrowdsale/node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (/Users/wenwenchen/Documents/TestCrowdsale/node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpRequestError (/Users/wenwenchen/Documents/TestCrowdsale/node_modules/xhr2/lib/xhr2.js:544:12)\n    at ClientRequest.<anonymous> (/Users/wenwenchen/Documents/TestCrowdsale/node_modules/xhr2/lib/xhr2.js:414:24)\n    at ClientRequest.emit (events.js:180:13)\n    at TLSSocket.socketErrorListener (_http_client.js:394:9)\n    at TLSSocket.emit (events.js:180:13)\n    at emitErrorNT (internal/streams/destroy.js:64:8)\n    at process._tickCallback (internal/process/next_tick.js:114:19)\nIt would be great if you could share some available documentation or sample contract with me as I might face other generic error during my development process.\nThanks!! \n. @cgewecke sorry to ask so much. But I could not find relevant info anywhere else thats why I posted here. That error in #852 seems a little bit different from mine, but I am not sure if that is the same case. I tried to migrate the 2nd time after I remove /build folder and re-compiled the project. It successfully migrated to Ropsten testnet. However, I found the error happened again in ropsten when I transfer ETH to the address. \n\n\nThe token is not shown as ERC20 token in ropsten instead it is just a normal contract address. Not sure if that is the problem because I found other tokens are shown as ERC 20 token. \n\n\nThe following is the details of my migration, you can refer to the addresses in case you need to see the contracts in ropsten testnet https://ropsten.etherscan.io/\n```\nWenwens-MacBook-Pro:TestCrowdsale wenwenchen$ truffle migrate --network ropsten\nUsing network 'ropsten'.\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  ... 0xc6eb76b75c469ebd5b5c32c79e24e31a6d0df2714a56be0bba2c0d48659f28ac\n  Migrations: 0xad14fe9f7750a681bcf7c18f9234e056100c28eb\nSaving successful migration to network...\n  ... 0x81150776a8e6fe0ca370e7fe54bf2d797640ce2c2d2a1aec84cf9f12cfa09430\nSaving artifacts...\nRunning migration: 2_TestCrowdsale.js\n  Deploying TestToken...\n  ... 0x61627e39b3ff6fdad09a3d31c72fb4d31eab633e105712dc8e0ae5014790b420\n  TestToken: 0xbf821ffcc82508e06462c32828593c59ab94313e\n  Deploying TestCrowdsale...\n  ... 0x5520b149bdbe2678b543f8a8ff33beeefe3bd81b9c1946619c1a21035e8dbab8\n  TestCrowdsale: 0x223f507e1b95026d0833f59976b14bb81d003673\nSaving successful migration to network...\n  ... 0x9761d0f23f4c95df4f887edc56e67ed360b293b1168f58f2db1f7305e3ec5367\nSaving artifacts...\n``\nReally appreciate your replies. If you think the issue should be handled somewhere else, please let me know where should I look for help. Thank you very much!. @cgewecke yes, it stopped after I remove the build folder and re-compiled and re-migrated. I still do not get the part why the token is not anERC20 token` after migrated to ropsten. \nI used one of the account in metamask to send to the crowdsale contract address. I have not yet completed the test cases, because I am still exploring. But I did follow tutorial and use truffle console to test on transaction. It works as what is described in the tutorial. Then I suspected that it might be my code logic problem, so I removed the extra code, just use the very basic one in openZeppelin examples, which is also the same as the one in the tutorial that I mentioned above. I can migrate successfully, but still the transactions failed. I tried varies tutorial, but all of them is very basic, cant really provide much info when facing generic errors. I am really wondering if there is any thorough and informative guide or docs out there for me to refer to, other than pestering you guys.\n. ",
    "PopTudor": "lol @cgewecke thank you too! . ",
    "woodenchalet": "Thank you @ismaelbej this reproduce is similar to what I got.. @cgewecke Could be a PowerShell or Windows thing, I try to run the truffle test under Linux, they all passed. \nBoth under Truffle V4.1.5\nWindows 10 PowerShell\n\nUbuntu 16.04\n\nTruffle V4.1.4\nWindows Powershell works\n\n. ",
    "franva": "Hi @cgewecke I am facing the exactly same issue here.\nCould you please update what's happening ?\nHi @woodenchalet , @ismaelbej \nIs there any workaround?\nThanks. I downgraded to truffle 4.1.14 and it works.\nBtw, this is on Windows platform.. ",
    "jrmillerwork": "I am also experiencing this problem with Windows using Powershell, even after I change to pragma solidity ^0.4.14; One difference I see is what is missing is ConvertLib (which seems to be different from what is mentioned above):\nError: Could not find artifacts for /C/Users/jeff/smartContracts/MetaCoin/contracts/ConvertLib.sol from any sources\n      at Resolver.require (C:\\Users\\jeff\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-resolver\\index.js:37:1)\n      at TestResolver.require (C:\\Users\\jeff\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-core\\lib\\testing\\testresolver.js:17:1)\n      at TestResolver.require (C:\\Users\\jeff\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-core\\lib\\testing\\testresolver.js:17:1)\n      at C:\\Users\\jeff\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-core\\lib\\testing\\soliditytest.js:141:1\n      at Array.forEach ()\n      at C:\\Users\\jeff\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-core\\lib\\testing\\soliditytest.js:140:1\n      at C:\\Users\\jeff\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-deployer\\src\\deferredchain.js:20:1\n      at \n      at process._tickCallback (internal/process/next_tick.js:188:7)\nI installed Truffle within the past week. Finally, to be clear, the js test works; it is only the Solidity test that fails.\n. ",
    "craigwilliams84": "The code isn't currently public, but I have created a simple dummy project that reproduces the issue.\nhttps://github.com/craigwilliams84/truffle-test. No problem at all, thanks for looking into it so quickly.. ",
    "fawrn": "truffle version\nTruffle v4.1.6 (core: 4.1.6)\nSolidity v0.4.21 (solc-js)\nSame issue still ignoring\n. ",
    "Nick-Lucas": "Yes, to clarify, a different solution is needed to reset Ether values on the accounts. Redeploying contracts is a decent workaround for resetting application state, but if I want my contracts to receive/send Ethereum then testing this functionality is difficult without a proper blank slate for each test.. Yes, I believe this is what I'll be doing for the time-being.\nAs far as performance, that definitely makes this an optional function call, for developers to use or ignore. The current trade-off was a good call for most purposes.\nI'd be happy to submit a PR for this, but my concept code wasn't actually working, so any additional guidance would be really welcome. I'm guessing it's something to do with misusing the TestRunner code. Hey @eduardonunesp apologies for the slow reply, crazy end to the week!\nI'm using truffle's testing framework with its default provider, which I understand is ganache behind the scenes, but it abstracts away the API and doesn't seem to inject that into the global scope either. I've seen in the source code that snapshots are already used for the reset operation at the start of Contract blocks, so it does sound about right.\nThat said you now have me wondering if I could connect to ganache from the test code, without truffle knowing. I expect it's communicated with over the the local network so could probably call the endpoints myself?. ",
    "justinkchen": "I'm also having trouble resetting in between tests. (it works at the contract level of each file but I need to reset account balances more often). Was there ever a solution? I'm trying evm_snapshot and evm_revert but the revert keeps having issues it seems. ",
    "sparrowDom": "Has anybody tested solution presented by @eduardonunesp? And if yes how long does it take to save/revert state?. ",
    "AlexanderPoschenrieder": "\n```js\nconst saveState = async () => {\n  return await web3.currentProvider.send({\n    jsonrpc: \"2.0\",\n    method: \"evm_snapshot\",\n    id: 0\n  })\n}\nconst revertState = async (id) => {\n  await web3.currentProvider.send({\n    jsonrpc: \"2.0\",\n    method: \"evm_revert\",\n    params: [id],\n    id: 0\n  })\n}\ncontract('SomeContract', () => {\n  let id\n  beforeEach(async () => {\n    id = await saveState()\n  })\nafterEach(async() => {\n    await revertState(id)\n  })\n})\n```\n\nNote: I didn't test\n\n\nA little fix:\n```js\nlet lastSnapshot;\nconst saveState = async () => {\n  const { result } = await web3.currentProvider.send({\n    jsonrpc: '2.0',\n    method: 'evm_snapshot',\n    id: 0\n  });\nreturn parseInt(result, 0);\n};\nconst revertState = async () => {\n  await web3.currentProvider.send({\n    jsonrpc: '2.0',\n    method: 'evm_revert',\n    params: lastSnapshot,\n    id: 0\n  });\nlastSnapshot = await saveState();\n};\n``\nPuting this on a little helper and callingsaveStateonbeforefunction andrevertStateonbeforeEachworks pretty well.lastSnapshot` is a little workaround because ganache-cli hangs after the second consecutive revert on the same snapshot.. ",
    "chapati23": "@cgewecke thanks, that's what I feared. been syncing for a few hours already\u2026\nwould it work with geth --fast (syncing only tx receipts and current state DB as far as i understand the docs) or do i need a full full node locally?. Thanks @cgewecke, will give it a read and report back here after my local geth node is fully synced.. Haven't finished syncing yet but I guess this paragraph from the docs answers my question:\n\nIn order for an Ethereum node to reexecute a transaction, it needs to have available all historical state accessed by the transaction:\n Balance, nonce, bytecode and storage of both the recipient as well as all internally invoked contracts.\n Block metadata referenced during execution of both the outer as well as all internally created transactions.\n* Intermediate state generated by all preceding transactions contained in the same block as the one being traced.\n\nThis sounds like it'd only work with a full geth node which sadly is too big for a normal dev machine these days. Guess the best alternative would be to have a full geth node running on AWS.. Can confirm for sure now. In fully synced geth --fast node, i get Error: required historical state unavailable when trying to run debug.traceTransaction(<tx-id>).\nwas worth a shot.. ",
    "snehasatya": "Updated Assert.sol to 0.4.21 but still getting these warnings\nWarning: Use of the \"var\" keyword is deprecated.\nWarning: Invoking events without \"emit\" prefix is deprecated.. ",
    "luisfidelis": "Hey. \nTo avoid the first warning, about the use of \"var\", you have to introduce the types on tuple assignments...\nuse \naddress a;\n uint256 b;\n address c;\n (a,b,c) = myFunction();\nInstead of \nvar (a, b, c) = myFunction()\nTo avoid the second warning, about the keyword \"emit\", just type it when fire contract events. For example: \nemit LogSomething(var1, var2, ..., varN)\n. ",
    "lsankar4033": "Thanks for the quick response! I ended up having success deploying my contract from a fresh geth node running on ubuntu via AWS, so this isn't a huge problem for me anymore. Will close the issue for now.\nFor completeness, tried using a geth --dev instance like you suggest as well, but ran into this issue on geth startup:\n```\n...\nINFO [04-15|17:20:44] Stopping Ethereum protocol\nINFO [04-15|17:20:44] RLPx listener up                         self=enode://ae08f736b4eee8e9fec0a532abc1c8f710550e744b564094ff21cc06e67029175a5a33fa9aa8206ed60f21d5dbdcb33f2eb7a4f59aa18b9bfa20f0c2afd8358a@[::]:30303\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0xa6c21b]\ngoroutine 87 [running]:\ngithub.com/ethereum/go-ethereum/eth/filters.(*EventSystem).eventLoop(0xc420323740)\n        /go-ethereum/build/_workspace/src/github.com/ethereum/go-ethereum/eth/filters/filter_system.go:434 +0x2eb\ncreated by github.com/ethereum/go-ethereum/eth/filters.NewEventSystem\n        /go-ethereum/build/_workspace/src/github.com/ethereum/go-ethereum/eth/filters/filter_system.go:113 +0x104\n```\nAny chance you've seen that before?. ",
    "tomcbean": "@chenwenwen11 Etherscan doesn't automatically recognize an ERC20 compliant contract. You need to transfer some token to another address first.. Why not just eliminate truffle.js and only recognize truffle-config.js? Works on all supported OSes.. Solc 0.4.22 also adds error reason strings for revert and require. This is a feature I've been waiting for a long time. Would be great to have truffle suite support soon.. The Migrations contract with that pragma line will compile to the version of solidity used by your truffle version, as long as it\u2019s less than 0.5.0. Likely, the team forgot to update the Migrations contract for the latest version. Btw, the latest truffle uses 0.4.23.. ",
    "axic": "Two alternative suggestions:\n- truffle/config.js\n- truffle.config.js\nDoes any of that clashes with Windows?. @gnidan was this solved in the end?. I think this is still valid.. Yes I would still be very happy to use truffle for this.. If possible I'd propose to have both:\nEither command is specified (and nothing else is allowed) and it generates the artefacts:\n\"compilers\": {\n  \"external\": {\n    \"command\": \"cargo build --release --target wasm32-unknown-unknown\",\n    \"targets\": [{\n      \"command\": \"./scripts/process-wasm-output-to-artifact\"\n    }]\n  }\n}\nOr what the original proposal was:\n\"compilers\": {\n  \"external\": {\n    \"command\": \"cargo build --release --target wasm32-unknown-unknown\",\n    \"targets\": [{\n      \"path\": \"target/wasm32-unknown-unknown/release/ewasm_precompile_ecadd.wasm\",\n      \"contractName\": \"ecadd\",\n      \"abi\": \"<path>\"\n    }]\n  }\n}\nI still think this is generic enough and doesn't put a lot of stress on truffle, while in the majority of external cases this is exactly what the script has to do.. Isn't this proposed layout pretty much the same but with different field names? Is the benefit that this matches the layout of the artifact file? :)\n\nI will update it so that if path is missing, it will run command with no stdin.\n\nSo\n- 1) if no path is specified it just runs the script (and in this case practically the user would only have a single array entry to targets),\n- 2) if path is specified the content of that is put onto stdin.\nFor case 2) I have a couple of questions:\n- Can the command have arguments (e.g. ./scripts/process-wasm-output-to-artifact myfile)? \n- If glob is used (*.wasm), how will the tool know which file is streamed an when is the end of a given file? (I guess the solution to this is that the user would have multiple target entries running it one-by-one.). > Yep exactly. This way there's no need to maintain specific allowed fields, it's just \"this object is used to populate the artifact directly\".\nI like it. I guess it also means that if the artifact format changes, this will change too.\n\nstdin: false means ./script/process <path> gets invoked.\n\nDoes that mean for glob match each of the individual files are passed one-by-one to the command?. Looks great! I guess it will need some explanation / tutorial / guide to make the most out of it :). Oh, is the abi still optional? If optional default to the single fallback function?. Also do I need to keep truffle.js and truffle-config.js in sync?. I've tried this but it doesn't seem to be picking it up:\nmodule.exports = {\n  // See <http://truffleframework.com/docs/advanced/configuration>\n  // to customize your Truffle configuration!\n  compilers: {\n    external: {\n      command: \"cargo build --release --target wasm32-unknown-unknown\",\n    },\n    targets: [{\n      properties: {\n        contractName: \"ecadd\"\n      },\n      fileProperties: {\n        bytecode: \"target/wasm32-unknown-unknown/release/ewasm_precompile_ecadd.wasm\"\n      }\n    }]\n  }\n};. Never mind, seems like my reinstall command failed. Now I am on the correct one:\nTruffle v5.0.0-external-compiler.0 - a development framework for Ethereum\nIt seems to be working. \nFinished \nrelease [optimized] target(s) in 1m 5.26s\nWriting artifacts to ./build/contracts\nI should leave these comments on the PR I guess.\n. Great, I get a message during deployment now:\n```\nUsing network 'test'.\nFinished release [optimized] target(s) in 0.12s\n\nError: while migrating ecadd: Returned error: base fee exceeds gas limit\n```\nI guess the \"gas limit\" refers to \"block gas limit\" here?. @lrettig that looks a Solidity bytecode.. Implemented by the 5.0 release.. I have tried this now with my Rust environment:\nmodule.exports = {\n  // See <http://truffleframework.com/docs/advanced/configuration>\n  // to customize your Truffle configuration!\n  compilers: {\n    external: {\n      command: \"cargo build --release --target wasm32-unknown-unknown\",\n      targets: [{\n        properties: {\n          contractName: \"ecadd\"\n        },\n        fileProperties: {\n          bytecode: \"target/wasm32-unknown-unknown/release/ewasm_precompile_ecadd.wasm\"\n        }\n      }]\n    }\n  }\n};\nGood news is that the command gets invoked and I do get an artifact file.\nOne note: initially we've discussed that if the abi field is omitted  then it will consider it as a ABI with a single fallback function. That is not the case right now.\nAnd also there don't seem to be a validation that the resulting artifact is correct, in my case it only contains contractName, bytecode, networks, schemaVersion and updatedAt fields.\nThere seems to be one issue though: the bytecode kind of looks like weirdly escaped.\n\"bytecode\": \"0x\\u0000asm\\u0001\\u0000\\u0000\\u0000\\u0001\ufffd\\u0003@`\\u0003^?^?^?\\u0000`\\u0002^?^?\\u0001^?`\\u0000\\u0000`\\u0003^?^?^?\\u0001^?`\\u0000\\u0001^?`\\u0001~\\u0000`\\u0004^?^?^?^?\\u0000`\\u0001^?\\u0000`\\u0001^?\\u0001^?`\\u0004^?^?^?^?\\u0001^?`\\u0002^?^?\\u0000`\\u0004^?^?^?~\\u0000`\\u0005^?^?^?^?^?\\u0001^?``\nIt has unicode escapes and unprintable characters. The input is raw binary.. Without having set an alternative RPC, trying to deploy it via ganache of course fails, but there's no useful error message:\n```\n$ truffle test\nUsing network 'test'.\nFinished release [optimized] target(s) in 0.09s\n\nError\n    at /Users/alex/.nvm/versions/node/v10.5.0/lib/node_modules/truffle/build/webpack:/packages/truffle-deployer/src/deployment.js:354:1\n    at process._tickCallback (internal/process/next_tick.js:68:7)\n```\nAnother tiny issue is that the output from the compile command seems to be weirdly cut up at places. It may be down to the fact that it is coloured (the colours are also removed via truffle):\n$ truffle compile\n   Compiling semver-parser v0.7.0\n   Compiling serde v1.0.70\n   Compiling heapsize v0.4.2\n   Compiling crunchy v0.1.6\n   Compiling num-traits v0.2.5\n   Compiling num-integer v\n0.1.39\n   Compiling crunchy v0.2.1\n   Compiling rand v0.4.2\n   Compiling \nrustc-hex v1.0.0\n   Compiling byteorder v1.2.3\n   Compiling num-bigint v\n0.2.0\n   Compiling parity-bytes v0.1.0 (https://github.com/paritytech/parity-common#4481687a)\n   Compiling semver v0.9.0\n   Compiling tiny-keccak v1.4.2\n   Compiling rustc_version\n v0.2.2\n   Compiling fixed-hash\n v0.2.1\n   Compiling bn v0.4.4 (https://github.com/paritytech/bn#786c0d56)\n   Compiling uint v\n0.2.1\n   Compiling ethereum-types v\n0.3.2\n   Compiling ewasm_api v\n0.1.0 (https://github.com/ewasm/ewasm-rust-api#17b4da5c)\n   Compiling ethereum-types-serialize v\n0.2.1\n   Compiling ethbloom v0.5.0\n   Compiling ethereum-bn128\n v0.0.1 (https://github.com/ewasm/ethereum-bn128.rs#4eaba2ce)\n   Compiling ewasm-precompile-ecadd v\n0.1.0 (file:///Users/alex/Projects/ewasm.rs/ewasm-precompiles/ecadd)\n    Finished \nrelease [optimized] target(s) in 1m 5.26s\nWriting artifacts to ./build/contracts. Here is my working copy: https://github.com/ewasm/ewasm-precompiles/tree/ecadd-truffle-tests/ecadd. @lrettig @gnidan note that isn't fully specified in Solidity, because ewasm isn't fully specified in that regard (whether it would have a deployer code with a constructor or not).. To summarise my initially reported issues:\n- [x] optional abi field (falls back to a default one)\n- [x] binary bytecode is handled wrongly\n- [x] compile command output is mangled\n- [x] validate that the resulting artifact file has all the necessary fields\n- [ ] no real error message if deployment fails\nShould I open issues for some of these or is it planned to be handled in this PR?. Great, thank you!. Failing deployment is still not detected nicely:\n```\n$ truffle test\nUsing network 'test'.\nFinished release [optimized] target(s) in 0.51s\n\nError\n    at /Users/alex/.nvm/versions/node/v10.5.0/lib/node_modules/truffle/build/webpack:/packages/truffle-deployer/src/deployment.js:354:1\n    at process._tickCallback (internal/process/next_tick.js:68:7)\n```\nThe line mangling still appears:\n$ truffle compile\n   Compiling semver-parser v0.\n7.0\n   Compiling serde v1.0.70\n   Compiling crunchy v0.1.6\n   Compiling heapsize v0.4.2\n   Compiling num-traits v0.2.5\n   Compiling rustc-hex v1\n.0.0\n   Compiling rand v\n0.4.2\n   Compiling num-integer\n v0.1.39\nThe default ABI is populated and the binary seems to be picked up properly. Nice!. > Output is now properly buffered and should appear without extraneous linebreaks :)\nConfirmed, it looks nice!. Also regarding validation this is what I've got when I've removed the bytecode field from the config:\nWarning: contract ecadd does not specify bytecode. You won't be able to deploy it.\nI guess validation works \ud83d\udc4d \n. I haven't gotten around to test it with a native ewasm client with RPC (it will be cpp-ethereum/aleth) - I may have some more things to report then.\nHowever that may not happen before Tuesday, so I'd say go ahead.. I think this is still valid.. @cgewecke @gnidan I think this is still a reasonable proposal \ud83d\ude09 . ~~I could have sworn I have tried this yesterday and it didn't list preleases.~~\nI see what the problem was, tried --list --preleases. It seems to be working with compile too.\nI have two suggestions:\n- add some progress indicator when soljson is being downloaded the first time (I see it caches it after)\n- improve the release notes / documentation about using prereleases\nThis issue can be closed otherwise. Thank you!. Closing this as it has been released.. I don't think that is a good idea. Why make a special case for wasm?. I was wondering how this works, but then opened the stackoverflow link. Please see the first comment there:\n\nThat's only the way some editors and browsers display binary as text. The js string itself (unless you are grabbing it from the textarea, or whatever text thing that does that) that is holding binary data read from a file will only have values from 0 - 255 and never have ufffd. . I would suggest that if the file starts with 0x (and passes the hex test for the rest, e.g. has only hex characters) then read it as a hex string otherwise consider it a binary.. Sounds good.. \n",
    "alacret": "Make sure you have the Migrations.sol and that the name of the contract is the same as the name of the file, that solved the issue for me.. ",
    "Christopher-I": "@alacret that took away the previous error but now I getting a new error when running tests.\nError: invalid bytes32 value (arg=\"trackHash\", coderType=\"bytes32\", value=1)\nalthough my test were previously running fine. ",
    "kingjerod": "@cgewecke Looks like it got released \ud83c\udf89 \ud83d\ude03 . ",
    "glitch003": "@gnidan I am fairly certain that deployed after updating truffle, but, the bytecode indeed doesn't match.  In fact, the deployedBytecode in the JSON artifact has a weird ascii string in it (ConvertLib).\nThis is the deployedBytecode from the JSON artifact files, and there's also a link to the actual deployed bytecode on etherscan at the bottom:\n0x606060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680637bd703e81461005c57806390b98a11146100a9578063f8b2cb4f14610103575b600080fd5b341561006757600080fd5b610093600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610150565b6040518082815260200191505060405180910390f35b34156100b457600080fd5b6100e9600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506101eb565b604051808215151515815260200191505060405180910390f35b341561010e57600080fd5b61013a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610344565b6040518082815260200191505060405180910390f35b600073__ConvertLib____6396e4ee3d61017584610344565b60026040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060206040518083038186803b15156101cd57600080fd5b5af415156101da57600080fd5b505050604051805190509050919050565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561023c576000905061033e565b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b92915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509190505600a165627a7a723058202a6d475129b97c969eb3ad3ce76671189080115b03564d4ec1e1dc9831d979710029\nAnd you can view the actual deployed bytecode here https://ropsten.etherscan.io/address/0x3f0e61774c4a4f0e0b50649cb289c3cd2a599c7e#code. @gnidan Okey doke, will wait and try to reproduce on next release.  Thanks!. @gnidan same thing, unfortunately :(\n```\nh4ckb00k-new-2:Metacoin chris$ truffle debug 0x258f81831b786afe516045cac4bcb7ada5b805b9c44d0b46df7c4b5bf3ed0f77 --network ropsten\nCompiling ./contracts/ConvertLib.sol...\nCompiling ./contracts/MetaCoin.sol...\nCompiling ./contracts/Migrations.sol...\nCompilation warnings encountered:\n/Users/chris/Documents/WorkStuff/Deconet/Blockchain/Metacoin/contracts/MetaCoin.sol:15:2: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n    function MetaCoin() public {\n ^ (Relevant source part starts here and spans across multiple lines).\n,/Users/chris/Documents/WorkStuff/Deconet/Blockchain/Metacoin/contracts/Migrations.sol:11:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n  function Migrations() public {\n  ^ (Relevant source part starts here and spans across multiple lines).\n,/Users/chris/Documents/WorkStuff/Deconet/Blockchain/Metacoin/contracts/MetaCoin.sol:23:3: Warning: Invoking events without \"emit\" prefix is deprecated.\n        Transfer(msg.sender, receiver, amount);\n        ^------------------------------------^\nGathering transaction data...\nTypeError: Cannot read property 'contractName' of undefined\n    at /Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/truffle/build/webpack:/~/truffle-core/~/truffle-debugger/dist/debugger.js:6717:1\n    at Array.map ()\n    at /Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/truffle/build/webpack:/~/truffle-core/~/truffle-debugger/dist/debugger.js:6711:48\n    at /Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:76:1\n    at /Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:36:1\n    at /Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:90:1\n    at /Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:36:1\n    at Session.view (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/truffle/build/webpack:/~/truffle-core/~/truffle-debugger/dist/debugger.js:2770:1)\n    at printAddressesAffected (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/truffle/build/webpack:/~/truffle-core/lib/commands/debug.js:102:1)\n    at /Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/truffle/build/webpack:/~/truffle-core/lib/commands/debug.js:442:1\n    at \n    at process._tickCallback (internal/process/next_tick.js:160:7)\nh4ckb00k-new-2:Metacoin chris$ truffle version\nTruffle v4.1.7 (core: 4.1.7)\nSolidity v0.4.23 (solc-js)\nh4ckb00k-new-2:Metacoin chris$ \n```\nI did npm uninstall -g truffle then npm install -g truffle then I redeployed to the below etherscan link address with truffle migrate --reset --network ropsten\nhttps://ropsten.etherscan.io/address/0xd8489b8b418b7cae57b144c31ef7a0d6fdb6a217#code\nAnd this is the  \"deployedBytecode\": \"0x606060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680637bd703e81461005c57806390b98a11146100a9578063f8b2cb4f14610103575b600080fd5b341561006757600080fd5b610093600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610150565b6040518082815260200191505060405180910390f35b34156100b457600080fd5b6100e9600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506101eb565b604051808215151515815260200191505060405180910390f35b341561010e57600080fd5b61013a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610344565b6040518082815260200191505060405180910390f35b600073__ConvertLib____6396e4ee3d61017584610344565b60026040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060206040518083038186803b15156101cd57600080fd5b5af415156101da57600080fd5b505050604051805190509050919050565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561023c576000905061033e565b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b92915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509190505600a165627a7a723058202a6d475129b97c969eb3ad3ce76671189080115b03564d4ec1e1dc9831d979710029\". Thanks for the update @gnidan and all your hard work on truffle!  Unfortunately, I'm now getting a new error with darq-truffle@4.1.7-latest.2\n```\nh4ckb00k-new:Metacoin chris$ darq-truffle debug 0xc6e23c483f002b9ce4479a5539ec1f8e453ddf227bbd83b04c5d0f7ea2434dcf --network ropsten\nCompiling ./contracts/ConvertLib.sol...\nCompiling ./contracts/MetaCoin.sol...\nCompiling ./contracts/Migrations.sol...\nCompilation warnings encountered:\n/Users/chris/Documents/WorkStuff/Deconet/Blockchain/Metacoin/contracts/MetaCoin.sol:15:2: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n    function MetaCoin() public {\n ^ (Relevant source part starts here and spans across multiple lines).\n,/Users/chris/Documents/WorkStuff/Deconet/Blockchain/Metacoin/contracts/Migrations.sol:11:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n  function Migrations() public {\n  ^ (Relevant source part starts here and spans across multiple lines).\n,/Users/chris/Documents/WorkStuff/Deconet/Blockchain/Metacoin/contracts/MetaCoin.sol:23:3: Warning: Invoking events without \"emit\" prefix is deprecated.\n        Transfer(msg.sender, receiver, amount);\n        ^------------------------------------^\nGathering transaction data...\nredux-saga error: uncaught at session.saga\nat session.saga \n at recordInstance \n TypeError: Cannot read property 'context' of null\n    at Object.addInstance$ (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/dist/debugger.js:5392:1)\n    at tryCatch (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/regenerator-runtime/runtime.js:62:15)\n    at Generator.invoke [as _invoke] (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/regenerator-runtime/runtime.js:296:1)\n    at Generator.prototype.(anonymous function) [as next] (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/regenerator-runtime/runtime.js:114:1)\n    at tryCatch (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/regenerator-runtime/runtime.js:62:15)\n    at maybeInvokeDelegate (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/regenerator-runtime/runtime.js:358:1)\n    at Generator.invoke [as _invoke] (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/regenerator-runtime/runtime.js:270:1)\n    at Generator.prototype.(anonymous function) [as next] (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/regenerator-runtime/runtime.js:114:1)\n    at next (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/proc.js:311:1)\n    at currCb (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/proc.js:388:1)\n    at runSelectEffect (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/proc.js:699:1)\n    at runEffect (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/proc.js:435:1)\n    at next (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/proc.js:315:1)\n    at proc (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/proc.js:270:1)\n    at resolveIterator (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/proc.js:456:1)\n    at runCallEffect (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/proc.js:517:1)\n    at runEffect (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/proc.js:435:1)\n    at /Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/proc.js:644:1\n    at Array.forEach ()\n    at runAllEffect (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/proc.js:643:1)\n    at runEffect (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/proc.js:435:1)\n    at next (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/proc.js:315:1)\n    at currCb (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/proc.js:388:1)\n    at checkEffectEnd (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/proc.js:612:1)\n    at chCbAtKey (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/proc.js:627:1)\n    at Object.currCb [as cb] (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/proc.js:388:1)\n    at /Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/proc.js:358:1\n    at Array.forEach ()\n    at end (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/proc.js:357:1)\n    at Object.task.cont (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/proc.js:99:1)\n    at next (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/proc.js:321:1)\n    at currCb (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/proc.js:388:1)\n    at takeCb (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/proc.js:466:1)\n    at Object.put (/Users/chris/.nvm/versions/node/v9.3.0/lib/node_modules/darq-truffle/build/webpack:/dependencies/truffle-debugger/~/redux-saga/es/internal/channel.js:73:1)\n```\nHere's my whole console session including the contract deploy and making the txn that I'm trying to debug: https://gist.github.com/glitch003/0e90a4ead0f0dac7797b5a6169b7b8e5. @gnidan it worked!  Hurray!  Thanks so much for following up!. ",
    "artemistomaras": "I have the same problem using truffle@4.1.7 and Ganache for development.\n. ",
    "katkol": "Hi,\nI was using v6.0.. earlier and it didn't work. After seeing your comment I tried with v9... and it worked. Thanks.. ",
    "satyamakgec": "I am not sure, But the problem is with the truffle global installation, I can compile the contracts when I use the truffle locally for the project.  . Thanks, it worked. But still, I don't understand the cause.. @Keith-CY I am already using the latest version of solc 0.4.23. still the problem exists.. I am also getting this error \n\nError: Truffle Box at URL https://github.com/truffle-box/bare-box.git doesn't exist. If you believe this is an error, please contact Truffle support.\n\nBut I am not getting any issues related to SSL/certificate. ",
    "Keith-CY": "@satyamakgec I think this caused by your solc version, the constructor syntax was supported by latest compiler. ",
    "NoChance777": "same error for \nTruffle v4.1.11 (core: 4.1.11)\nSolidity v0.4.24 (solc-js). ",
    "RNanwani": "I am confronting the same error, If anyone has resolved this issue, please help. I have tried (npm uninstall -g truffle ------ npm install -g truffle).\ntruffle@4.1.12\nsolc@0.4.24 . @cgewecke Thank You for your kind advice but I have already tried that but this is not working for me. Please suggest any other alternative, if possible. . Yes sure, here it is:\npragma solidity ^0.4.21;\ncontract Migrations {\n  address public owner;\n  uint public last_completed_migration;\nconstructor() public {\n    owner = msg.sender;\n  }\nmodifier restricted() {\n    if (msg.sender == owner) _;\n  }\nfunction setCompleted(uint completed) public restricted {\n    last_completed_migration = completed;\n  }\nfunction upgrade(address new_address) public restricted {\n    Migrations upgraded = Migrations(new_address);\n    upgraded.setCompleted(last_completed_migration);\n  }\n}\nThe version is: truffle v4.0.4 (core: 4.0.4)\nsolidity v0.4.18 (solc-js). Actually now I got it, it is showing different versions for solc-js\ntruffle version\nTruffle v4.0.4 (core: 4.0.4)\nSolidity v0.4.18 (solc-js)\nReinstalling solc separately, it mentions 0.4.24\nnpm install -g solc\n/home/ubuntu/.npm-global/bin/solcjs -> /home/ubuntu/.npm-global/lib/node_modules/solc/solcjs\nsolc@0.4.24\nadded 66 packages in 1.312s\nMay you please suggest something that I can do in this case?. Thanks for the suggestion. I tried it, but this is not working for me. this is what it shows\nnpm install -g truffle@4.1.7\n/home/ubuntu/.npm-global/bin/truffle -> /home/ubuntu/.npm-global/lib/node_modules/truffle/build/cli.bundled.js\n+ truffle@4.1.7\nadded 11 packages and updated 10 packages in 65.145s\nthen on trying \ntruffle version it showed\nTruffle v4.0.4 (core: 4.0.4)\nSolidity v0.4.18 (solc-js)\nand finally on compiling the error still existed.\n. ",
    "EduardoCortesL": "Hey @RNanwani  I'm running to the same issue with:\ntruffle @4.1.12\nsolc @0.4.23\nI tried all the suggestions in this thread and none seems to be working. I'll keep you updated if I figure it out. Please let me know if you get it to work. Thanks!. ",
    "corydozen": "On Ubuntu 16.04, this worked for me...\n$ npm uninstall truffle -g\nremoved 81 packages in 0.485s\nBut then\n```\n$ truffle -v\nTruffle v4.1.3 - a development framework for Ethereum\nUsage: truffle  [options]\n...\n```\nSo. That didn't work.\n$ which truffle\n/home/myusername/.nvm/versions/node/v8.9.1/bin/truffle\nThat showed me where truffle was still installed\n$ rm -R /home/myusername/.nvm/versions/node/v8.9.1/bin/truffle\n$ which truffle\n$ truffle -v\n-bash: /home/myusername/.nvm/versions/node/v8.9.1/bin/truffle: No such file or directory\nNow, I think I may have screwed up in there with the -R because it was a link, not a directory. But it worked anyways. So. Now truffle is really uninstalled.\n$ npm install truffle -g\n/home/myusername/.nvm/versions/node/v8.9.1/lib/node_modules/node/bin/truffle -> /home/myusername/.nvm/versions/node/v8.9.1/lib/node_modules/node/lib/node_modules/truffle/build/cli.bundled.js\n+ truffle@4.1.13\nadded 81 packages from 309 contributors in 1.26s\nOk! Now 4.1.13 is installed! Yay!\n$ truffle -v\n-bash: /home/myusername/.nvm/versions/node/v8.9.1/bin/truffle: No such file or directory\n:cry: \nOh! Maybe I need to create that link again\n```\n$ cd /home/myusername/.nvm/versions/node/v8.9.1/bin\n$ ln -s ../lib/node_modules/node/bin/truffle truffle\n$ cd /home/myusername\n$ truffle -v\nTruffle v4.1.13 - a development framework for Ethereum\nUsage: truffle  [options]\n...\n```\n:money_with_wings: . ",
    "IlIlIlIlIlIlI": "On Windows 10, this worked for me...\nAt first,it showed:\n\\pet-shop>truffle compile\nError parsing C:\\mixed\\Dapp\\truffle\\workspace\\pet-shop\\contracts\\Migrations.sol: ParsedContract.sol:11:14: ParserError: Expected identifier, got 'LParen'\n  constructor() public {\n             ^\nCompilation failed. See above.\nthen I tried:\nnpm install -g truffle@4.1.7\nit showed:\npet-shop/contracts/Migrations.sol:1:1: SyntaxError: Source file requires different compiler version (current compiler is 0.4.23+commit.124ca40d.Emscripten.clang - note that nightly builds are considered to be strictly less than the released version\npragma solidity ^0.4.24\nand then I opened  Migrations.sol,changed its version to ^0.4.23,\nit showed:\npet-shop>truffle compile\nCompiling .\\contracts\\Adoption.sol...\nCompiling .\\contracts\\Migrations.sol...\nWriting artifacts to .\\build\\contracts\nso,I think if supports the constructor syntaxmay be the problem.\nnpm install -g truffle@4.1.7  and then  open  Migrations.sol,change its version to ^0.4.23 may be a solution.\nand thank you! @cgewecke . ",
    "farhanhvf": "Thanks @IlIlIlIlIlIlI, Its worked!!!. ",
    "francofs": "Just wanted to share what solved for me.\nI have nvm for windows installed and the problem was that no matter what, my truffle wasn't being updated. So I figured that I had it installed both no my AppData (outside nvm) and on nvm (with the latest).\nSince I had on my path both nvm and my AppData locations for the global installations of truffle, whenever I ran it, it was picking up the AppData installation first, but when I was installing it, it was installing on nvm path.\nRemoving the AppData location from my PATH solved the issue.. ",
    "amiya-mandal": "\nmake a contract with some loop hole\nmake an instance of that contract and make it live truffle console\nupdate the contract remove the bug\nrun 'truffle migrate --reset'\nbut you can use that previous instance of that contract. \n",
    "joeyBerger": "You cannot use the truffle keyword when you are in truffle develop. Good to know I'm not alone on this. Unfortunately, it is impossible to get any work done now...\nLet me know if you find a solution- good luck.\nMy versions:\nTruffle v5.0.3 (core: 5.0.3)\nSolidity v0.5.0 (solc-js)\nNode v10.15.1. Figured out a solution.. uninstalled truffle, and installed an older version.\nso \nnpm uninstall -g truffle\nnpm install -g truffle@5.0.3. I probably have the same issue and looks like might have problems moving forward. Thanks for posting! . ",
    "sahar-fehri": "@cgewecke\nFirst thank you for your reply.\nI have added the flag --gasLimit 8000000 and in my truffle js i put the exact same amount , i have changed the port to 8547. But still no chance with it:\nNow im getting : \nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: Exceeds block gas limit\nHUH ..... @cgewecke  no sorry it is still an out of gas error  .... Somehow it seems like no matter how much i put in the parameter gasLimit , the \" Gas usage\" in the log will show the exact same amount... and the second transaction for deploying the second contract never goes through ... @cgewecke  If you don't mind i could send it to your email address .. i believe it is : \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 [edit: redacted for privacy] =) . @Zou-XueYan , i just didn't noticed that the account i was sending the transaction from actually doesn't have any tokens. Which is unlikely to be the same problem you have if your contract is not manipulating tokens. Check your gas limit, perhaps your transaction costs more gas,, and check again your smart contract function, perhaps you are writing some \" require(....) \" that is actually raising that error... cause from what i know, the error \" out of gas\" doesn t necessarily mean that you should raise the gas limit, as i said it could be a problem in your function... I hope it helps.. . ",
    "Zou-XueYan": "@sahar-fehri How did you fix this ?  Need HELP friend \ud83d\ude22. ",
    "Arvanaghi": "It was my test file causing this message to appear. My mistake. . ",
    "vauvenal5": "@Arvanaghi can you please describe what the issue was? I am discovering the same problem. When running \"truffle test\" all tests pass and in the end the error message is thrown. If I run them in \"truffle develop\" everything is fine, also when I configure a network in truffle.js they pass without any issues.\n@cbruguera did you find the issue?\nMaybe also interesting to mention that this happens only with js-tests.. ",
    "auser": "If you clone the repo, the issue occurs in there and it\u2019s been reproduced by @emmonspired in the gitter channel. \nDid you see the screenshot from above describing the issue? It seems the second from object overwrites the first. . @cgewecke I'm not sure why there are two from objects... that was from me digging into the compiled/bundled source of truffle to try to find out what is going on.\nThere is a single contract in the repo with a test case that demonstrates the issue (https://github.com/auser/truffle-bug/blob/master/contracts/multiSig/MultiSig.sol#L152). . @cgewecke okay, I created a branch called simplification (https://github.com/auser/truffle-bug/tree/simplification) that reproduces the behavior. \nThe contract method:\n```solidity\npragma solidity ^0.4.18;\ncontract MultiSig {\n    event MultiSigSigned(uint index, address signer);\nfunction sign(uint index)\n    public\n{\n    emit MultiSigSigned(index, msg.sender);\n}\n\n}\n```\nThe javascript test:\n```javascript\nconst th = require('../lib/testHelper');\nconst should = th.should();\nconst MultiSig = artifacts.require('./MultiSig');\ncontract('MultiSig', ([owner, user1]) => {\n  let multisig;\nbeforeEach(async () => {\n    multisig = await MultiSig.new();\n  });\ndescribe('events', async () => {\nit('fires MultiSigSigned when signed', async () => {\n  const {logs} = await multisig.sign(0, {from: user1});\n  logs.length.should.equal(1);\n  logs[0].event.should.equal('MultiSigSigned');\n  logs[0].args.index.should.be.bignumber.equal(0);\n\n  logs[0].args.signer.should.equal(user1);\n});\n\n});\n});\n```\nIn addition, I'm using the local truffle version from the repo (./node_modules/.bin/truffle test --network development test/multisig/testMultiSig.js)\nTruffle v4.1.7 (core: 4.1.7)\nSolidity v0.4.23 (solc-js)\nAnd the issue occurs on my globally installed truffle (truffle test --network development test/multisig/testMultiSig.js):\nTruffle v4.1.5 (core: 4.1.5)\nSolidity v0.4.21 (solc-js)\nFYI: I'm not trying to find a shortcut here, hence why I created a repo to demonstrate the issue. I wanted a way to demonstrate the issue in a reproducible way.. Bump: @cgewecke any idea?. @cgewecke okay... anything I can look at while you're gone. This is really kind of a blocker for me right now :(\nA little more digging into the SolidityFunction.prototype.sendTransaction function seems like it's getting called with three arguments where the last object takes precedence over the first several:\n```bash\nfrom console.log(payload, arguments)\n{ '0': 0,\n  '1': { from: '0x6704fbfcd5ef766b287262fa2281c105d57246a6' },\n  '2': \n   { from: '0xdf08f82de32b8d460adbe8d72043e3a7e25a3b39',\n     gas: 6721975,\n     gasPrice: 100000000000,\n     to: '0x9b557777be33a8a2fe6af93e017a0d139b439e5d',\n     data: '0x2fb1b25f0000000000000000000000000000000000000000000000000000000000000000' }\n```\nYeah, I believe I found where the error is occurring, but I'm not sure what the fix would be. It's happening in SolidityFunction.prototype.sendTransaction() on this line:\n```javascript\nSolidityFunction.prototype.toPayload = function (args) {\n    var options = {};\n/// <!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// There are _two_ objects passed in in the `args` variable here and only the last one\n// is taken as the `options` return value\nif (args.length > this._inputTypes.length && utils.isObject(args[args.length -1])) {\n    options = args[args.length - 1];\n}\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nthis.validateArgs(args);\noptions.to = this._address;\noptions.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args);\n\nreturn options;\n\n};\n```\n\nWould the fix be allowing the second two arguments be object options and merging them in as a single argument? Are there any adverse side-effects this could have that I'm not considering?\nAlternatively, you could merge all of the option objects in that function, the earlier objects taking precedence over the later ones. \nUpdate: Proposed solution\n```javascript\n/\n * Should be used to create payload from arguments\n \n * @method toPayload\n * @param {Array} solidity function params\n * @param {Object} optional payload options\n /\nSolidityFunction.prototype.toPayload = function (args) {\n    var options = {};\n    if (args.length > this._inputTypes.length && utils.isObject(args[args.length -1])) {\n        options = args.reduceRight(function(sum, arg) {\n            return (utils.isObject(arg) ? Object.assign(sum, arg) : sum);\n        }, {})\n        // options = args[args.length - 1];\n    }\n    this.validateArgs(args);\n    options.to = this._address;\n    options.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args);\nreturn options;\n\n};\n```\n(This, by the way fixes the issue for me). Yeah, I'm running ganache as a server (https://github.com/auser/truffle-bug/blob/master/ganache.js and https://github.com/auser/truffle-bug/blob/master/scripts/ganache-cli.js) with deterministic addresses as well. Hm.\nAnd I'm only editing the node_modules/truffle/build/cli.bundled.js file in repo, which doesn't touch the global one. This debug repo is a clone ish of my other repo where I first noticed this error.. I think the error really has to do with the fact that two objects are being passed in as arguments. \nThe output of Array.prototype.slice.call(arguments) is:\n```javascript\n/**\nSolidityFunction.prototype.execute = function () {\n    var transaction = !this._constant;\nconsole.log('execute ------->', transaction, Array.prototype.slice.call(arguments))\n\n// send transaction\nif (transaction) {\n    return this.sendTransaction.apply(this, Array.prototype.slice.call(arguments));\n}\n\n// call\nreturn this.call.apply(this, Array.prototype.slice.call(arguments));\n\n}; \n**/\nexecute -------> true [ 0,\n  { from: '0x6704fbfcd5ef766b287262fa2281c105d57246a6' },\n  { from: '0xdf08f82de32b8d460adbe8d72043e3a7e25a3b39',\n    gas: 6721975,\n    gasPrice: 100000000000 },\n  [Function: callback] ]\n```\nAnd the sendTransaction() payload:\njavascript\n{ from: '0xdf08f82de32b8d460adbe8d72043e3a7e25a3b39',\n  gas: 6721975,\n  gasPrice: 100000000000,\n  to: '0xa6421a7f48498cee3aeb6428a8a2dd5faa3ace2f',\n  data: '0x2fb1b25f0000000000000000000000000000000000000000000000000000000000000000' }\nNotice the {from: address} resolves to the latter object vs. the one I passed in (I think the latter object is like default options?).. Also, @cgewecke is the non-bundled source open-source?. @cgewecke yeah, I'm not sure... why would there be two objects being passed in as arguments? Is that intentional?. @cgewecke I know, I was digging through it to try to find the issue. . @cgewecke I've removed my node_modules/ and reinstalled. I've also copied and pasted your test code over mine and the issue is still happening. Could this be a ganache issue?\n\nI know it's working for you, but definitely not working for me (cleaned truffle install).. @cgewecke I think I found an issue? When I remove the line:\njavascript\nBigNumber.config({ ERRORS: false, ROUNDING_MODE: BigNumber.ROUND_UP })\nfrom my test/lib/testHelper.js it works... what the heck? Why would that break it?\nApologies... I'm not sure why that would have any affect? Thanks for your help... I'm so confused. Why would BigNumber in chai have any non-sense with how arguments are received in truffle contracts... \nI'll close this due to the fact that it's a local setup issue. I think?. ",
    "emmonspired": "Very confusing why the line with BigNumber would have any effect @auser - was there any more clarity that came from this @cgewecke ?\n. ",
    "nbauernfeind": "@cgewecke Thanks for your quick reply. You're right, on a fresh init it works fine. The problem seems to introduce itself when I override the gas property in truffle.js. I'm running through Ganache and the limit I have here is definitely under the configured gas limit in Ganache.\nThis is my truffle.js:\njs\nmodule.exports = {\n  networks: {\n    development: {\n      host: \"127.0.0.1\",\n      port: 7545,\n      network_id: \"*\",\n      gasPrice: 1,\n      gas: 6000000,\n    }\n  }\n};. Ahh.. actually I see what's going on. Turns out that simple test contract is getting more and more expensive. Does truffle test use a different default gas limit than truffle migrate? I had tuned it up to handle the migration and must have been lucky. It seems on v4.1.6 it cost 5913212 gas and now on v4.1.7 it costs 6109322 to deploy the test contract.. ",
    "aspeziale": "@cgewecke Thanks for the support. No problem at all. \nAbout the reported issue I don't know if I'm doing something wrong or something is going wrong on truffle-contract side.\nI've notice that passing as argument:\n- 0 the paused status is false\n- 1 the paused status is true\n- a string the paused status is true\nThanks all.. ",
    "Superjisan": "@cgewecke that is strange. here's my system info\n```\nsystem_profiler SPSoftwareDataType\nSoftware:\nSystem Software Overview:\n\n  System Version: macOS 10.13.4 (17E199)\n  Kernel Version: Darwin 17.5.0\n  Boot Volume: Macintosh HD\n  Boot Mode: Normal\n  Computer Name: test\u2019s MacBook Pro\n  User Name: Admin (admin)\n  Secure Virtual Memory: Enabled\n  System Integrity Protection: Enabled\n  Time since boot: 23:26\n\n``\nAlso just tried withv.9.5.0` and same issue. How do you have your node versions install @cgewecke ?\nKernel and System Versions are different. But I wonder why that would cause the issue. @cgewecke I've actually tried installing using brew, nvm, and just standalone from the website and so far no luck.\nI'll dig around more... . @cgewecke it worked using 6.9.0 just now.. @cgewecke I guess I have figured out a workaround with using a 6.9.0 version of node but it doesn't work on my computers with versions above that with the latest truffle versions.. @cgewecke I figured out the issue. There was some antivirus software that was blocking access to some directories in our local. You can close this issue.. @mhlljm I had to disable the antivirus software from my computer to get it to work. You might need to talk to your IT department if you require a password or something. ",
    "Joebob12": "I also have this issue and this is what my system_profiler outputs:\nSystem Software Overview:\n  System Version: macOS 10.12.3 (16D32)\n  Kernel Version: Darwin 16.4.0\n  Boot Volume: Macintosh HD\n  Boot Mode: Normal\n  Computer Name: Joe\u2019s MacBook Pro\n  User Name: Joe N (joen)\n  Secure Virtual Memory: Enabled\n  System Integrity Protection: Enabled\n  Time since boot: 35 days 1:06.\n",
    "collincusce": "Nah, @superjisan is on my team so I'm monitoring the progress on this. . ",
    "mhlljm": "@Superjisan I have the same issue! May I ask how you managed to close the antivirus software?. ",
    "kermankohli": "Thanks for pointing that out! I removed it (checked for other references) and reran the tests although the same issue still persists:\n```\nethme master \u2717 21h39m \u25b2 \u25b3 \u25d2 \u279c truffle test\nUsing network 'development'.\nCompiling ./contracts/Authorizable.sol...\nCompiling ./contracts/Collectable.sol...\nCompiling ./contracts/EightExToken.sol...\nCompiling ./contracts/Executor.sol...\nCompiling ./contracts/TransferProxy.sol...\nCompiling ./contracts/VolumeSubscription.sol...\nCompiling ./contracts/base/math/Math.sol...\nCompiling ./contracts/base/math/SafeMath.sol...\nCompiling ./contracts/base/ownership/Ownable.sol...\nCompiling ./contracts/base/token/BasicToken.sol...\nCompiling ./contracts/base/token/ERC20.sol...\nCompiling ./contracts/base/token/ERC20Basic.sol...\nCompiling ./contracts/base/token/StandardToken.sol...\nCompilation warnings encountered:\n/Users/kermankohli/crypto/ethme/contracts/base/ownership/Ownable.sol:19:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n    function Ownable() public {\n    ^ (Relevant source part starts here and spans across multiple lines).\n,/Users/kermankohli/crypto/ethme/contracts/Collectable.sol:22:5: Warning: Modifiers of functions without implementation are ignored.\n    function subscriptionOwnerDoesntHaveEnoughFunds(bytes32 _subscription) onlyAuthorized public;\n    ^-------------------------------------------------------------------------------------------^\n,/Users/kermankohli/crypto/ethme/contracts/EightExToken.sol:15:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n    function EightExToken() public {\n    ^ (Relevant source part starts here and spans across multiple lines).\n,/Users/kermankohli/crypto/ethme/contracts/EightExToken.sol:40:13: Warning: Invoking events without \"emit\" prefix is deprecated.\n            Transfer(_from, _to, _value);\n            ^--------------------------^\nContract: TransferProxy\n    \u2713 should throw if an unauthorized address tries to transfer tokens (113ms)\n    \u2713 should allow an authorized address to transfer tokens (329ms)\nContract: VolumeSubscription\n    \u2713 should be able to intialise the plan contract correctly (46ms)\n    \u2713 should have the correct computed plan hash (133ms)\n    1) should have the correct computed subscription hash\n    > No events were emitted\n    when collecting money from the contract\n      2) should be able to terminate as an authorized address\nEvents emitted during test:\n---------------------------\n\nCreatedPlan(identifier: 0x10da531567bebf1fcb02b8f726c730b789279cd0e337402343f0a6f69903eb30)\nCreatedSubscription(identifier: 0x0482a2203bdfb9455f174311fc04f67ec2c768dc71a12ceba9ed4806c8eeaa29)\nLogAuthorizedAddressAdded(target: <indexed>, caller: <indexed>)\nTerminatedSubscription(identifier: 0x0482a2203bdfb9455f174311fc04f67ec2c768dc71a12ceba9ed4806c8eeaa29, terminationDate: 1524724896)\n\n---------------------------\n  \u2713 should be not be able to terminate as an unauthorized address (164ms)\n  \u2713 should be able to determine a valid subscription (243ms)\n  \u2713 should be able to determine an invalid subscription (403ms)\n  3) should be able to get the correct amount\n\nEvents emitted during test:\n---------------------------\n\nCreatedPlan(identifier: 0x35481ef21398e15e1d6ca5f49401cb5a8a84df62305f7f478da6742402c97f8a)\n\n---------------------------\nwhen creating a new plan\n  \u2713 should be able to create a new plan correctly (104ms)\n  \u2713 should not be able to create a plan without required details (195ms)\n  \u2713 should not be able to create a plan with the same identifier (128ms)\nwhen updating the owner of a plan\n  \u2713 should be able to update as the owner (307ms)\n  \u2713 should be not be able to update the owner as another user (84ms)\nwhen updating the name of a plan\n  \u2713 should be able to update as the owner (290ms)\n  \u2713 should be not be able to update as another user (153ms)\nwhen updating the description of a plan\n  \u2713 should be able to update as the owner (197ms)\n  \u2713 should be not be able to update as another user (165ms)\nwhen updating the data of a plan\n  \u2713 should be able to update as the owner (189ms)\n  \u2713 should be not be able to update as another user (92ms)\nwhen terminating a plan\n  \u2713 should be able to terminate as the owner (258ms)\n  \u2713 should not be able to terminate multiple times (199ms)\n  \u2713 should not be able to terminate from a date in the past (155ms)\n  \u2713 should not be able to terminate as another user (169ms)\nwhen updating the data of a subscription\n  \u2713 should be able to update as the owner (321ms)\n  \u2713 should be not be able to update as another user (280ms)\nwhen terminating a subscription\n  \u2713 should be able to terminate as the owner (320ms)\n  \u2713 should not be able to terminate multiple times (288ms)\n  \u2713 should not be able to terminate from a date in the past (201ms)\n  \u2713 should not be able to terminate as another user (214ms)\n\nContract: Authorizable\n    when adding an authorized address\n      \u2713 should throw if not called by the owner (64ms)\n      \u2713 should allow the owner to add an authorized address (203ms)\n      \u2713 should not allow an authorized address to add a duplicate address\n    when removing an authorized address\n      \u2713 should throw if not called by the owner (61ms)\n      \u2713 should allow the owner to remove an authorized address (151ms)\n      \u2713 should now allow the owner to remove a non-authorized address\n    when getting authorized addresses\n      \u2713 should be able to return all the authorized addresses (250ms)\n35 passing (8s)\n  3 failing\n1) Contract: VolumeSubscription should have the correct computed subscription hash:\n     Error: VM Exception while processing transaction: revert\n      at Object.InvalidResponse (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/errors.js:38:1)\n      at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:86:1\n      at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-provider/wrapper.js:134:1\n      at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/httpprovider.js:128:1)\n      at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:64:1)\n      at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:354:1)\n      at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:509:1)\n      at IncomingMessage. (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:469:1)\n      at endReadableNT (_stream_readable.js:1106:12)\n      at process._tickCallback (internal/process/next_tick.js:114:19)\n2) Contract: VolumeSubscription when collecting money from the contract should be able to terminate as an authorized address:\n     AssertionError: expected { Object (s, e, ...) } to equal 1524724895\n      at Context._callee3$ (test/volume_subscription.js:44:20)\n      at tryCatch (node_modules/regenerator-runtime/runtime.js:65:40)\n      at Generator.invoke [as _invoke] (node_modules/regenerator-runtime/runtime.js:303:22)\n      at Generator.prototype.(anonymous function) [as next] (node_modules/regenerator-runtime/runtime.js:117:21)\n      at step (test/volume_subscription.js:15:191)\n      at test/volume_subscription.js:15:361\n      at \n      at process._tickCallback (internal/process/next_tick.js:118:7)\n3) Contract: VolumeSubscription when collecting money from the contract should be able to get the correct amount:\n     Error: VM Exception while processing transaction: revert\n      at Object.InvalidResponse (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/errors.js:38:1)\n      at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:86:1\n      at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-provider/wrapper.js:134:1\n      at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/httpprovider.js:128:1)\n      at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:64:1)\n      at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:354:1)\n      at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:509:1)\n      at IncomingMessage. (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:469:1)\n      at endReadableNT (_stream_readable.js:1106:12)\n      at process._tickCallback (internal/process/next_tick.js:114:19)\nethme master \u2717 21h39m \u25b2 \u25b3 \u25d2 \u2349 \u279c truffle test\nUsing network 'development'.\nCompiling ./contracts/Authorizable.sol...\nCompiling ./contracts/Collectable.sol...\nCompiling ./contracts/EightExToken.sol...\nCompiling ./contracts/Executor.sol...\nCompiling ./contracts/TransferProxy.sol...\nCompiling ./contracts/VolumeSubscription.sol...\nCompiling ./contracts/base/math/Math.sol...\nCompiling ./contracts/base/math/SafeMath.sol...\nCompiling ./contracts/base/ownership/Ownable.sol...\nCompiling ./contracts/base/token/BasicToken.sol...\nCompiling ./contracts/base/token/ERC20.sol...\nCompiling ./contracts/base/token/ERC20Basic.sol...\nCompiling ./contracts/base/token/StandardToken.sol...\nCompilation warnings encountered:\n/Users/kermankohli/crypto/ethme/contracts/base/ownership/Ownable.sol:19:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n    function Ownable() public {\n    ^ (Relevant source part starts here and spans across multiple lines).\n,/Users/kermankohli/crypto/ethme/contracts/Collectable.sol:22:5: Warning: Modifiers of functions without implementation are ignored.\n    function subscriptionOwnerDoesntHaveEnoughFunds(bytes32 _subscription) onlyAuthorized public;\n    ^-------------------------------------------------------------------------------------------^\n,/Users/kermankohli/crypto/ethme/contracts/EightExToken.sol:15:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n    function EightExToken() public {\n    ^ (Relevant source part starts here and spans across multiple lines).\n,/Users/kermankohli/crypto/ethme/contracts/EightExToken.sol:40:13: Warning: Invoking events without \"emit\" prefix is deprecated.\n            Transfer(_from, _to, _value);\n            ^--------------------------^\nContract: Authorizable\n    when adding an authorized address\n      \u2713 should throw if not called by the owner\n      \u2713 should allow the owner to add an authorized address (94ms)\n      \u2713 should not allow an authorized address to add a duplicate address\n    when removing an authorized address\n      \u2713 should throw if not called by the owner\n      \u2713 should allow the owner to remove an authorized address (97ms)\n      \u2713 should now allow the owner to remove a non-authorized address (59ms)\n    when getting authorized addresses\n      \u2713 should be able to return all the authorized addresses (246ms)\nContract: TransferProxy\n    \u2713 should throw if an unauthorized address tries to transfer tokens (121ms)\n    \u2713 should allow an authorized address to transfer tokens (407ms)\nContract: VolumeSubscription\n    \u2713 should be able to intialise the plan contract correctly\n    \u2713 should have the correct computed plan hash (92ms)\n    1) should have the correct computed subscription hash\n    > No events were emitted\n    when collecting money from the contract\n      2) should be able to terminate as an authorized address\nEvents emitted during test:\n---------------------------\n\nCreatedPlan(identifier: 0x10da531567bebf1fcb02b8f726c730b789279cd0e337402343f0a6f69903eb30)\n\n---------------------------\n  \u2713 should be not be able to terminate as an unauthorized address (210ms)\n  \u2713 should be able to determine a valid subscription (241ms)\n  \u2713 should be able to determine an invalid subscription (405ms)\n  \u2713 should be able to get the correct amount (216ms)\nwhen creating a new plan\n  \u2713 should be able to create a new plan correctly (98ms)\n  \u2713 should not be able to create a plan without required details (197ms)\n  \u2713 should not be able to create a plan with the same identifier (158ms)\nwhen updating the owner of a plan\n  \u2713 should be able to update as the owner (274ms)\n  \u2713 should be not be able to update the owner as another user (96ms)\nwhen updating the name of a plan\n  \u2713 should be able to update as the owner (258ms)\n  \u2713 should be not be able to update as another user (83ms)\nwhen updating the description of a plan\n  \u2713 should be able to update as the owner (260ms)\n  \u2713 should be not be able to update as another user (89ms)\nwhen updating the data of a plan\n  \u2713 should be able to update as the owner (277ms)\n  \u2713 should be not be able to update as another user (124ms)\nwhen terminating a plan\n  \u2713 should be able to terminate as the owner (191ms)\n  \u2713 should not be able to terminate multiple times (208ms)\n  \u2713 should not be able to terminate from a date in the past (123ms)\n  \u2713 should not be able to terminate as another user (151ms)\nwhen updating the data of a subscription\n  \u2713 should be able to update as the owner (308ms)\n  \u2713 should be not be able to update as another user (219ms)\nwhen terminating a subscription\n  \u2713 should be able to terminate as the owner (310ms)\n  3) should not be able to terminate multiple times\n\nEvents emitted during test:\n---------------------------\n\nCreatedPlan(identifier: 0x5e5508da6762220619aeda638dcb0b33546297cc03cd1fb9fcb81167bf3183bd)\n\n---------------------------\n  \u2713 should not be able to terminate from a date in the past (223ms)\n  \u2713 should not be able to terminate as another user (211ms)\n\n35 passing (8s)\n  3 failing\n1) Contract: VolumeSubscription should have the correct computed subscription hash:\n     Error: VM Exception while processing transaction: revert\n      at Object.InvalidResponse (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/errors.js:38:1)\n      at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:86:1\n      at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-provider/wrapper.js:134:1\n      at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/httpprovider.js:128:1)\n      at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:64:1)\n      at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:354:1)\n      at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:509:1)\n      at IncomingMessage. (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:469:1)\n      at endReadableNT (_stream_readable.js:1106:12)\n      at process._tickCallback (internal/process/next_tick.js:114:19)\n2) Contract: VolumeSubscription when collecting money from the contract should be able to terminate as an authorized address:\n     Error: VM Exception while processing transaction: revert\n      at Object.InvalidResponse (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/errors.js:38:1)\n      at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:86:1\n      at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-provider/wrapper.js:134:1\n      at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/httpprovider.js:128:1)\n      at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:64:1)\n      at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:354:1)\n      at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:509:1)\n      at IncomingMessage. (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:469:1)\n      at endReadableNT (_stream_readable.js:1106:12)\n      at process._tickCallback (internal/process/next_tick.js:114:19)\n3) Contract: VolumeSubscription when terminating a subscription should not be able to terminate multiple times:\n     Error: VM Exception while processing transaction: revert\n      at Object.InvalidResponse (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/errors.js:38:1)\n      at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:86:1\n      at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-provider/wrapper.js:134:1\n      at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/httpprovider.js:128:1)\n      at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:64:1)\n      at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:354:1)\n      at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:509:1)\n      at IncomingMessage. (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:469:1)\n      at endReadableNT (_stream_readable.js:1106:12)\n      at process._tickCallback (internal/process/next_tick.js:114:19)\nethme master \u2717 21h39m \u25b2 \u25b3 \u25d2 \u2349 \u279c truffle test\nUsing network 'development'.\nCompiling ./contracts/Authorizable.sol...\nCompiling ./contracts/Collectable.sol...\nCompiling ./contracts/EightExToken.sol...\nCompiling ./contracts/Executor.sol...\nCompiling ./contracts/TransferProxy.sol...\nCompiling ./contracts/VolumeSubscription.sol...\nCompiling ./contracts/base/math/Math.sol...\nCompiling ./contracts/base/math/SafeMath.sol...\nCompiling ./contracts/base/ownership/Ownable.sol...\nCompiling ./contracts/base/token/BasicToken.sol...\nCompiling ./contracts/base/token/ERC20.sol...\nCompiling ./contracts/base/token/ERC20Basic.sol...\nCompiling ./contracts/base/token/StandardToken.sol...\nCompilation warnings encountered:\n/Users/kermankohli/crypto/ethme/contracts/base/ownership/Ownable.sol:19:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n    function Ownable() public {\n    ^ (Relevant source part starts here and spans across multiple lines).\n,/Users/kermankohli/crypto/ethme/contracts/Collectable.sol:22:5: Warning: Modifiers of functions without implementation are ignored.\n    function subscriptionOwnerDoesntHaveEnoughFunds(bytes32 _subscription) onlyAuthorized public;\n    ^-------------------------------------------------------------------------------------------^\n,/Users/kermankohli/crypto/ethme/contracts/EightExToken.sol:15:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n    function EightExToken() public {\n    ^ (Relevant source part starts here and spans across multiple lines).\n,/Users/kermankohli/crypto/ethme/contracts/EightExToken.sol:40:13: Warning: Invoking events without \"emit\" prefix is deprecated.\n            Transfer(_from, _to, _value);\n            ^--------------------------^\nContract: Authorizable\n    when adding an authorized address\n      \u2713 should throw if not called by the owner\n      \u2713 should allow the owner to add an authorized address (127ms)\n      \u2713 should not allow an authorized address to add a duplicate address\n    when removing an authorized address\n      \u2713 should throw if not called by the owner\n      \u2713 should allow the owner to remove an authorized address (94ms)\n      \u2713 should now allow the owner to remove a non-authorized address\n    when getting authorized addresses\n      \u2713 should be able to return all the authorized addresses (188ms)\nContract: TransferProxy\n    \u2713 should throw if an unauthorized address tries to transfer tokens (123ms)\n    \u2713 should allow an authorized address to transfer tokens (364ms)\nContract: VolumeSubscription\n    \u2713 should be able to intialise the plan contract correctly\n    \u2713 should have the correct computed plan hash (89ms)\n    1) should have the correct computed subscription hash\n    > No events were emitted\n    when collecting money from the contract\n      \u2713 should be able to terminate as an authorized address (426ms)\n      \u2713 should be not be able to terminate as an unauthorized address (223ms)\n      \u2713 should be able to determine a valid subscription (205ms)\n      \u2713 should be able to determine an invalid subscription (290ms)\n      \u2713 should be able to get the correct amount (203ms)\n    when creating a new plan\n      \u2713 should be able to create a new plan correctly (108ms)\n      \u2713 should not be able to create a plan without required details (188ms)\n      \u2713 should not be able to create a plan with the same identifier (186ms)\n    when updating the owner of a plan\n      \u2713 should be able to update as the owner (284ms)\n      \u2713 should be not be able to update the owner as another user (159ms)\n    when updating the name of a plan\n      \u2713 should be able to update as the owner (243ms)\n      \u2713 should be not be able to update as another user (127ms)\n    when updating the description of a plan\n      \u2713 should be able to update as the owner (185ms)\n      \u2713 should be not be able to update as another user (119ms)\n    when updating the data of a plan\n      \u2713 should be able to update as the owner (193ms)\n      \u2713 should be not be able to update as another user (87ms)\n    when terminating a plan\n      \u2713 should be able to terminate as the owner (203ms)\n      \u2713 should not be able to terminate multiple times (201ms)\n      \u2713 should not be able to terminate from a date in the past (236ms)\n      \u2713 should not be able to terminate as another user (182ms)\n    when updating the data of a subscription\n      \u2713 should be able to update as the owner (286ms)\n      \u2713 should be not be able to update as another user (212ms)\n    when terminating a subscription\n      \u2713 should be able to terminate as the owner (312ms)\n      2) should not be able to terminate multiple times\nEvents emitted during test:\n---------------------------\n\nCreatedPlan(identifier: 0x5e5508da6762220619aeda638dcb0b33546297cc03cd1fb9fcb81167bf3183bd)\n\n---------------------------\n  \u2713 should not be able to terminate from a date in the past (212ms)\n  \u2713 should not be able to terminate as another user (209ms)\n\n36 passing (8s)\n  2 failing\n1) Contract: VolumeSubscription should have the correct computed subscription hash:\n     Error: VM Exception while processing transaction: revert\n      at Object.InvalidResponse (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/errors.js:38:1)\n      at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:86:1\n      at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-provider/wrapper.js:134:1\n      at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/httpprovider.js:128:1)\n      at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:64:1)\n      at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:354:1)\n      at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:509:1)\n      at IncomingMessage. (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:469:1)\n      at endReadableNT (_stream_readable.js:1106:12)\n      at process._tickCallback (internal/process/next_tick.js:114:19)\n2) Contract: VolumeSubscription when terminating a subscription should not be able to terminate multiple times:\n     Error: VM Exception while processing transaction: revert\n      at Object.InvalidResponse (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/errors.js:38:1)\n      at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:86:1\n      at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-provider/wrapper.js:134:1\n      at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/httpprovider.js:128:1)\n      at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:64:1)\n      at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:354:1)\n      at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:509:1)\n      at IncomingMessage. (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:469:1)\n      at endReadableNT (_stream_readable.js:1106:12)\n      at process._tickCallback (internal/process/next_tick.js:114:19)\nethme master \u2717 21h40m \u25b2 \u25b3 \u25d2 \u2349 \u279c \n``. All those 3 tests were run straight after each other. Only the computed subscription hash test consistently fails.. So I just tried getting rid of singleitblocks and wrapping them indescribe`s. Also changed before to beforeEach. Both of these still yield the same results of the tests randomly failing.... Okay so gave that a go and the same 12 tests fail which is good since at leas there's consistency in what's not working. Although still not sure what exactly is going on here.\nawait new Promise(resolve => setTimeout(resolve, 1000)); worked instead ;) . Kind of - although why do you think the tests are failing randomly unless I have the delay? Can't see what's causing the race condition in this case. . The time values for when the subscription is being created or you mean something else? Apart from logging is there any cleaner way of doing this? Although throughout my program, all the time logic is to check a date in the past so I'm not sure how it's caused a race condition to occur.. Yup. In VolumeSubscription there's statements such as:\nsubscriptions[_subscription].terminationDate = block.timestamp;\nand require(_terminationDate >= block.timestamp);. So essentially the time taken to mine the block may be greater than the existing time captured in Javascript?. @cgewecke Not sure to be honest. Theoretically the only test that should be failing are the ones that are ones that rely on time logic. However there's tests which simply read data and fail due to revert. The only explanation I can see for it is that the revert is being called at an incorrect place in the test execution hence giving a \"random\" error variance.. @cgewecke yup finally did 3 days ago! so essentially when require statements are dependent on time they can cause failures at places which seem random. the way i solved this was create a mock contract that inherited from the actual contract and overrides a currentTimestamp() function of the actual contract to change the time to whatever I want. you can check it out at: https://github.com/8x-protocol/8x-protocol :). @barakman thanks for that although not sure what you mean. the function is meant to throw an exception if the promise executes since we didn't want it to execute in the first place. feel free to correct me if i'm wrong/misunderstanding you though :). @barakman ah - i get what you're saying although the \"assert.throw\" shows in the console and fails the tests so it doesn't matter if the catch block marks it as a success since it's already failed. i've manually tested out the code by providing it passing and failing conditions and it works as expected. also, the code is actually from OpenZepelin so might be worth discussing it with them however you should create a demo project and test it out for yourself first https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/test/helpers/assertRevert.js.. ",
    "kimyd": "First I though it is solidity problem, but it works fine with Remix, something wrong with the ABI encoder of truffle. . Yes, you are right. It works fine with quotes. Thank you. . ",
    "arnoudbevers": "Truffle uses this to deploy a contract to run the tests, in my own project I have created a contract handler that uses the web3 methods, but this is not used in truffle. Is this what you mean?\n2_person_migration.js\n```\nconst Web3 = require('web3');\nconst Person= artifacts.require('./Person.sol');\nconst web3 = new Web3();\nmodule.exports = (deployer) => {\n  deployer.deploy(\n    Person, web3.utils.utf8ToHex('John Doe'), web3.utils.utf8ToHex('Main Street'), 1, web3.utils.utf8ToHex('1234-56'), web3.utils.utf8ToHex('New York'), web3.utils.utf8ToHex('United States'), web3.utils.utf8ToHex('+12-34-5678-90'));\n};\n``. @cgewecke Thank you! I've been scratching my head for the last two days... If you're not planning on doing so, I can maybe test it on a Ganache network? Or are you doing that as well?. @cgewecke I changed my migrations, and changed the two instances in my tests, but the methods still do not return values. What do you mean bygeth dev`? Did you use geth CLI? How would I go about testing this myself? Since this is the only thing that I can think of, updating my geth version on my machine.. @cgewecke I've talked a bit with others, and we think the issue lies with Quorum. The network is running on Geth 1.7.2, but Quorum is not up to date with the latest geth version, so updating Geth is not an option I think - which is also the reason it works on Remix/Ganache, since that uses Ethereum instead of Quorum. Do you have any idea what I can do to remedy this?. @cgewecke I have also tried it on the Ropsten network to eliminate another possibility, and it worked as expected, so I think the issue really lies with Quorum, and that it is not up to date with the latest geth version/Solidity version.. @cgewecke \n\nIs it ok if we close this issue since it's specific to an older Geth version?\n\nYes, this is fine. I will try to check with Quorum when support for newer versions is coming.\n\nJust leaving a note here about geth dev since that wasn't clear. You can run a geth test client locally with very little setup by...\n\nThank you! I will keep this in mind, will be really useful in my development. \nThanks for your help!. ",
    "phillipgibb": "@cgewecke hmmmm, yes you are correct, interesting that the same problem happens in myetherwallet. yes, 100%, I use --debug and can see all the opcodes\n```\neth_estimateGas\nPUSH1\nPUSH1\nMSTORE 0x80 0x40\nCALLER\nPUSH1\nDUP1\nPUSH2\nEXP 0x0 0x100\nDUP2\nSLOAD 0x0\nDUP2\nPUSH20\nMUL 0x1 0xffffffffffffffffffffffffffffffffffffffff\nNOT 0xffffffffffffffffffffffffffffffffffffffff\nAND 0x0 0xffffffffffffffffffffffff0000000000000000000000000000000000000000\nSWAP1\nDUP4\nPUSH20\nAND 0x627306090abab3a6e1400e9345bc60c78a8bef57 0xffffffffffffffffffffffffffffffffffffffff\nMUL 0x1 0x627306090abab3a6e1400e9345bc60c78a8bef57\nOR 0x0 0x627306090abab3a6e1400e9345bc60c78a8bef57\nSWAP1\nSSTORE 0x627306090abab3a6e1400e9345bc60c78a8bef57 0x0\nPOP 0x627306090abab3a6e1400e9345bc60c78a8bef57\nPUSH2\nDUP1\nPUSH2\nPUSH1\nCODECOPY 0x27a6 0x53 0x0\nPUSH1\nRETURN 0x27a6 0x0\nnet_version\neth_getBlockByNumber\neth_getBlockByNumber\nnet_version\neth_getTransactionCount\neth_getBlockByNumber\neth_sendRawTransaction\nPUSH1\nPUSH1\nPUSH1\nMSTORE 0x80 0x40\nCALLER\nPUSH1\nDUP1\nPUSH2\nEXP 0x0 0x100\nDUP2\nSLOAD 0x0\nDUP2\nPUSH20\nMUL 0x1 0xffffffffffffffffffffffffffffffffffffffff\nNOT 0xffffffffffffffffffffffffffffffffffffffff\nAND 0x0 0xffffffffffffffffffffffff0000000000000000000000000000000000000000\nSWAP1\nDUP4\nPUSH20\nAND 0x627306090abab3a6e1400e9345bc60c78a8bef57 0xffffffffffffffffffffffffffffffffffffffff\nMUL 0x1 0x627306090abab3a6e1400e9345bc60c78a8bef57\nOR 0x0 0x627306090abab3a6e1400e9345bc60c78a8bef57\nSWAP1\nSSTORE 0x627306090abab3a6e1400e9345bc60c78a8bef57 0x0\nPOP 0x627306090abab3a6e1400e9345bc60c78a8bef57\nPUSH2\nDUP1\nPUSH2\nPUSH1\nCODECOPY 0x27a6 0x53 0x0\nPUSH1\nRETURN 0x27a6 0x0\nTransaction: 0xee86d079272780c95fcc1603908229d82bb636f48a7d2922dd8ba8b5afe2827f\n  Contract created: 0x8cdaf0cd259887258bc13a92c0a6da92698644c0\n  Gas usage: 2779866\n  Block Number: 1\n  Block Time: Sun May 06 2018 18:58:45 GMT+0200 (EET)\neth_getBlockByNumber\nnet_version\neth_getTransactionReceipt\neth_getBlockByNumber\neth_getTransactionByHash\nnet_version\neth_getBlockByNumber\neth_getBlockByNumber\neth_getBalance\neth_getBalance\neth_getBalance\neth_getBalance\neth_getBalance\neth_getBalance\neth_getBalance\neth_getBalance\neth_getBlockByNumber\nnet_version\neth_estimateGas\nPUSH1\nPUSH1\nMSTORE 0x80 0x40\nPUSH1\nCALLDATASIZE\nLT 0x4 0x4\nPUSH2\nJUMPI 0x0 0x132\nPUSH1\nCALLDATALOAD 0x0\nPUSH29\nSWAP1\nDIV 0x100000000000000000000000000000000000000000000000000000000 0x83197ef000000000000000000000000000000000000000000000000000000000\nPUSH4\nAND 0x83197ef0 0xffffffff\nDUP1\nPUSH3\nEQ 0x83197ef0 0xf837d6\nPUSH2\nJUMPI 0x0 0x134\nDUP1\nPUSH4\nEQ 0x83197ef0 0x68a828c\nPUSH2\nJUMPI 0x0 0x184\nDUP1\nPUSH4\nEQ 0x83197ef0 0x11dcfb89\nPUSH2\nJUMPI 0x0 0x1f8\nDUP1\nPUSH4\nEQ 0x83197ef0 0x13036ba5\nPUSH2\nJUMPI 0x0 0x256\nDUP1\nPUSH4\nEQ 0x83197ef0 0x13b61241\nPUSH2\nJUMPI 0x0 0x281\nDUP1\nPUSH4\nEQ 0x83197ef0 0x15efc152\nPUSH2\nJUMPI 0x0 0x2f5\nDUP1\nPUSH4\nEQ 0x83197ef0 0x3601ebf1\nPUSH2\nJUMPI 0x0 0x320\nDUP1\nPUSH4\nEQ 0x83197ef0 0x36abf6ce\nPUSH2\nJUMPI 0x0 0x377\nDUP1\nPUSH4\nEQ 0x83197ef0 0x50664326\nPUSH2\nJUMPI 0x0 0x3a2\nDUP1\nPUSH4\nEQ 0x83197ef0 0x5a7a2d08\nPUSH2\nJUMPI 0x0 0x503\nDUP1\nPUSH4\nEQ 0x83197ef0 0x83197ef0\nPUSH2\nJUMPI 0x1 0x568\nJUMPDEST\nCALLVALUE\nDUP1\nISZERO 0x0\nPUSH2\nJUMPI 0x1 0x574\nJUMPDEST\nPOP 0x0\nPUSH2\nPUSH2\nJUMP 0x1a73\nJUMPDEST\nPUSH1\nDUP1\nSWAP1\nSLOAD 0x0\nSWAP1\nPUSH2\nEXP 0x0 0x100\nSWAP1\nDIV 0x1 0x627306090abab3a6e1400e9345bc60c78a8bef57\nPUSH20\nAND 0x627306090abab3a6e1400e9345bc60c78a8bef57 0xffffffffffffffffffffffffffffffffffffffff\nPUSH20\nAND 0x627306090abab3a6e1400e9345bc60c78a8bef57 0xffffffffffffffffffffffffffffffffffffffff\nCALLER\nPUSH20\nAND 0x627306090abab3a6e1400e9345bc60c78a8bef57 0xffffffffffffffffffffffffffffffffffffffff\nEQ 0x627306090abab3a6e1400e9345bc60c78a8bef57 0x627306090abab3a6e1400e9345bc60c78a8bef57\nISZERO 0x1\nISZERO 0x0\nPUSH2\nJUMPI 0x1 0x1ace\nJUMPDEST\nPUSH1\nDUP1\nSWAP1\nSLOAD 0x0\nSWAP1\nPUSH2\nEXP 0x0 0x100\nSWAP1\nDIV 0x1 0x627306090abab3a6e1400e9345bc60c78a8bef57\nPUSH20\nAND 0x627306090abab3a6e1400e9345bc60c78a8bef57 0xffffffffffffffffffffffffffffffffffffffff\nPUSH20\nAND 0x627306090abab3a6e1400e9345bc60c78a8bef57 0xffffffffffffffffffffffffffffffffffffffff\nSELFDESTRUCT 0x627306090abab3a6e1400e9345bc60c78a8bef57\nnet_version\neth_getBlockByNumber\neth_getBlockByNumber\nnet_version\neth_getBlockByNumber\neth_getTransactionCount\neth_sendRawTransaction\neth_getBlockByNumber\neth_getBlockByNumber\nnet_version\neth_getBlockByNumber\n```. Yes, thanks, sounds that way (that this being tracked t ganache-core in issue 26) .. ",
    "toannn-ibl": "@cgewecke Thank you, it worked ^_^. ",
    "ar-to": "Yep its also happening on truffle. ",
    "ArranMcC": "Thanks! I think it was just due to truffle not being unboxed into an empty directory, something which the tutorials I was following didn't mention as they maybe thought it was obvious. . ",
    "salmanahmad3333": "\nThanks! I think it was just due to truffle not being unboxed into an empty directory, something which the tutorials I was following didn't mention as they maybe thought it was obvious.\n\nPlease tell me how you resolved the issue. I have the same issue.. ",
    "sreekanth2474": "\n@ArranMcC To use deployed you'll need to run migrate first. This deploys your contracts to the test chain managed by the develop shell. The metacoin box is a working example you might find helpful, and check out the migrations documentation for help on writing deployment scripts:\n```shell\n$ mkdir metacoin\n$ cd metacoin\n$ truffle unbox metacoin\n$ truffle develop\n..... client launches ....\ntruffle(develop)> MetaCoin.deployed()\nReferenceError: MetaCoin is not defined . # <--- Your error\ntruffle(develop)> migrate                 # <--- Run migrate \nCompiling ./contracts/ConvertLib.sol...\nCompiling ./contracts/MetaCoin.sol...\nCompiling ./contracts/Migrations.sol...\n.... etc ....\nWriting artifacts to ./build/contracts\nUsing network 'develop'.\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  ... 0x4cb1916eb9734e8622d8e49a9a1a96c8338f8065f9ccee3963ff9dbc67fc8ae0\n  Migrations: 0x8cdaf0cd259887258bc13a92c0a6da92698644c0\nSaving successful migration to network...\n  ... 0xd7bc86d31bee32fa3988f1c1eabce403a1b5d570340a3a9cdba53a472ee8c956\n..... etc .....\ntruffle(develop)> MetaCoin.deployed()\nTruffleContract {\n  constructor: \n   { [Function: TruffleContract]\n     _static_methods: \n      { setProvider: [Function: setProvider], \n```\n\nThanks! This helped.. ",
    "weijunlee": "Do you find the reason of the problerm? Could you tell me what I need to do. Thanks very much.. ",
    "ricochen": "Found out it's actually a node/npm problem.. All of a sudden installing using npm for anything has this issue. It is forever stuck at rollbackFailedOptional. Tried reinstalling didn't work.. After removing all my old node/npm files which was installed using nvm, and reinstalling using the regular way (downloading from the website). I found that post and tried the 2 commands.\nnpm config get proxy now returns null. Then I had to follow npm's instructions on allowing global installs and I was able to npm install -g truffle.\nHowever, I uninstalled and reinstalled truffle in the first place because I was running into an issue:\nUnknown network \"rinkeby\". See your Truffle configuration file for available networks.\ntruffle.js:\nmodule.exports = {\n    networks: {\n        development: {\n            host: \"localhost\",\n            port: 8545,\n            network_id: \"*\" // Match any network id\n        }\n    },\n    rinkeby: {\n        host: \"localhost\",\n        port: 8545,\n        network_id: \"4\", // Rinkeby ID 4\n        from: \"0xf6e9dc98fe5d2951744967133b3c31765be657c1\" // account from which to deploy\n    }\n};\ntruffle.config.js:\nmodule.exports = {\n    networks: {\n        development: {\n            host: \"localhost\",\n            port: 8545,\n            network_id: \"*\" // Match any network id\n        }\n    },\n    rinkeby: {\n        host: \"localhost\",\n        port: 8545,\n        network_id: \"4\", // Rinkeby ID 4\n        from: \"0xf6e9dc98fe5d2951744967133b3c31765be657c1\" // account from which to deploy\n    }\n};. Oh shoot! Didn't see that, silly mistake haha thanks!. ",
    "kenshyx": "I'm having the same issue, it gets stuck at rollbackFailedOptional: verb npm-session 44c72d20e8035c2. I'm using node v8.10.0 and npm 6.0.1 on Linux Mint 18.1 Serena 64-bit also I'm not having a proxy config.. @cgewecke I had to remove previous version of truffle and It worked in the end.. ",
    "bambalaus": "yes, i did truffle unbox metacoin, and modified the code to comply with the  solc version 4.23 (chancing constructor sintax and added emit to the event).\nI just tried a further option on a fresh installation:\ntruffle.cmd test test\\TestMetacoin.sol. this seems to work further, as it fails due to the old event sintax in Assert.sol (so the import seems to work).\n'Compilation warnings encountered:\ntruffle/Assert.sol:1563:9: Warning: Use of the \"var\" keyword is deprecated.\n        var nstr = _itoa(value, 10);\n        ^------^\n,truffle/Assert.sol:1580:9: Warning: Use of the \"var\" keyword is deprecated.\n        var nstr = _utoa(value, 10);\n        ^------^\n,truffle/Assert.sol:1597:9: Warning: Use of the \"var\" keyword is deprecated.\n        var nstr = _ltoa(value);\n        ^------^\n,/C/bambalaus/Metacoin2/contracts/MetaCoin.sol:23:3: Warning: Invoking events without \"emit\" prefix is deprecated.\n                Transfer(msg.sender, receiver, amount);\n                ^------------------------------------^\n,truffle/Assert.sol:1347:13: Warning: Invoking events without \"emit\" prefix is deprecated.\n            TestEvent(true, \"\");\n            ^-----------------^\n,truffle/Assert.sol:1349:13: Warning: Invoking events without \"emit\" prefix is deprecated.\n            TestEvent(false, message);\n            ^-----------------------^\nIt is the first time I use truffle, so I might be doing something silly. ",
    "a186r": "@cgewecke  thank you ,it's working for me . ",
    "hobofan": "Something that might help people stumbling upon this issue:\nI ran into the same problem with a truffle migrate because I had ~80 files in build/contracts that were each ~25Mb big, so the process ran out of memory when deploying. Using the --max-old-space-size=4096 workaround worked but deploying took a few minutes every time (which quickly got annoying).\nWhat I did was alter the 1_initial_migration.js file so it deletes the ast and legacyAST keys from the contract files which accounted for 95% of the file size and are not necessary for deployment, and deployment times were blazingly fast again (my version requires jq to be installed):\n```js\nconst fs = require(\"fs\");\nconst child_process = require(\"child_process\");\nvar Migrations = artifacts.require(\"./Migrations.sol\");\nmodule.exports = function(deployer) {\n  deployer.deploy(Migrations);\nconst contractFiles = fs.readdirSync(\"./build/contracts\");\n  contractFiles.forEach(contractFile => {\n    const fullPath = ./build/contracts/${contractFile};\n    const stdout = child_process.execSync(\n      jq '. | del(.ast, .legacyAST)' ${fullPath}\n    );\n    fs.writeFileSync(fullPath, stdout);\n  });\n  console.log(\"--- Deleted ASTs\");\n};\n```. ",
    "pubkey": "Why not use Promise.all() ?\njs\nmodule.exports = function (deployer) {\n  return Promise.all([\n     deployer.deploy(MyContract1),\n     deployer.deploy(MyContract2)\n  ]);\n}. ",
    "dharmeshnirmal": "@cgewecke Yes I am behind a proxy. Also I am new for npm and all can So I am not able to figure out exact solution. Can you please help me to find it.\nAlso It looks that in given link issue is not resolved.\nThank you.. ",
    "Gargo": "@cgewecke Yes, your code works. BUT:\n1)what is the difference and why does my format is mentioned in the documentation as correct too?\n2)how and why settings for \"migration\" influence \"compilation\"?. ",
    "emin93": "Thanks @cgewecke, for me that was the missing part. As soon as I switched to the \"function\" form, the issue got resolved.\n\nTruffle version (truffle version): Truffle v4.1.11 (core: 4.1.11) Solidity v0.4.24 (solc-js)\nNode version (node -v): v8.11.2\nNPM version (npm -v): 6.0.1\n\n```javascript\nconst path = require(\"path\");\nconst HDWalletProvider = require(\"truffle-hdwallet-provider\");\nmodule.exports = {\n  contracts_build_directory: path.join(process.cwd(), \"src/Contracts\"),\n  networks: {\n    mainnet: {\n      provider: () => new HDWalletProvider(mnemonic, \"https://mainnet.infura.io/\"),\n      network_id: 1\n    },\n    rinkeby: {\n      provider: () => new HDWalletProvider(, \"https://rinkeby.infura.io/\"),\n      network_id: 4\n    }\n  }\n};\n```. ",
    "michaeldel": "@cgewecke this indeed seems to solve the problem, too bad having to add code-style/linting exceptions for such \"should not even be a thing\" issues though. Thank you!. ",
    "4000D": "I used construct in wrong way.. sorry... ",
    "NatalieChin80": "Hello @cgewecke - just a quick update. After a few additional days of debugging, I actually found out the error wasn't related to the way the assert is called. Rather, the assert for the hash for the signer address was always incorrect, as it was originally hardcoded into one of the tests (I've been trying to find a way around this) - thus, the require for the signer kept breaking. I appreciate you taking the time to try to help me figure out what was wrong - thanks! . ",
    "ebaizel": "looks good, but could you add a test for one of the cases equal and notEqual?. ",
    "wjmelements": "I need to make this change in truffle-core instead.. https://github.com/trufflesuite/truffle-core/pull/144. Looks like the truffle-core repo was merged into this one. Reopening.. My mistake; it's not required for every user.. ",
    "Mc01": "@cgewecke Thanks for quick answer. \nHere's the equivalent message from Remix IDE when trying to deploy this contract This contract does not implement all functions and thus cannot be created.. So to confirm - yes, it is an abstract contract.\nBtw, thanks for pointing out these issue with provider and HDWallet. Haven't noticed that it already changed. Will definitely use that in my own projects \ud83d\udc4d . ",
    "marcosmartinez7": "Hi @cgewecke  thanks for the answer\nYes, i mean starting ganache or using truffle develop\nusing that clients i get 10 accounts generated by truffle/ganache, each of them with 100 ethers\nAccounts:\n(0) 0x627306090abab3a6e1400e9345bc60c78a8bef57\n(1) 0xf17f52151ebef6c7334fad080c5704d77216b732\n(2) 0xc5fdf4076b8f3a5357c5e395ab970b5b54098fef\n(3) 0x821aea9a577a9b44299b9c15c88cf3087f3b5544\n(4) 0x0d1d4e623d10f9fba5db95830f7d3839406c6af2\n(5) 0x2932b7a2355d6fecc4b5c0b6bd44cc31df247a2e\n(6) 0x2191ef87e392377ec08e7c08eb105ef5448eced5\n(7) 0x0f4f2ac550a1b4e2280d04c21cea7ebd822934b5\n(8) 0x6330a553fc93768f612722bb8c2ec78ac90b3bbc\n(9) 0x5aeda56215b167893e80b4fe645ba6d5bab767de\nim developing an app that transfer tokens between them, but now i want to sign the transactions with trezor\nthe thing is that trezor has it own keys, so .. is there a way that i can integrate the address of my hardware wallet to my develop truffle/ganache network? \nbecause right now im sending from account (0) 0x627306090abab3a6e1400e9345bc60c78a8bef57 to account (1) 0xf17f52151ebef6c7334fad080c5704d77216b732 but i want to sign the transaction with trezor.. the thing is that trezor doesnt have the  0x627306090abab3a6e1400e9345bc60c78a8bef57 address\nis there any way to add a trezor account to truffle or is there another way to acomplish what i want? (send a transaction between two truffle accounts with web3js and sign it with trezor)\nkind regards\nMarcos. hmm but the  isnt part of the truffle development network, so it is imposible to make a transaction to it right? or i am missing something..?\ni didnt find anything in the truffle docs about integrating new accounts.. is there a way to include hardware wallets into truffle development network?\nthanks!. Yes\n```\nlet getTrezorConnect = new Promise(function(resolve, reject) {\n    // Wait for loading completion\n    window.addEventListener('load', function() {\n    var trezorConnect = window.TrezorConnect\n\n        return resolve(trezorConnect)\n\n})});\nexport default getTrezorConnect\n```\nit just gets the Trezor component from window object. Trezor is included on the index.html as script:\n<script src=\"https://connect.trezor.io/4/connect.js\"></script>\n. No,\nwe didnt found out a way to integrate a hardware wallet into truffle, to use the address in any transaction\nwe also tried deploying the contract into Ropsten instead of Truffle, on that network the transaction is sent and we receive a transaction hash, but that transaction hash is not found by \n https://ropsten.etherscan.io/  .. \nit would be nice if someone could confirm that is not possible to integrate hardware wallets into truffle (or maybe just discard trezzor) just to start making test in another environment\nright now we dont know if:\n- is a trezor problem\n- truffle cannot be used with trezor\n- web3js and etheureum-js integration with trezor doesnt work\n- web3js and etheureum-js integration with trezor isnt implemented properly by ourselves\n. I have submit an issue in web3js and Trezor connect github too. We will continue researching, let me know if you find something\nThanks. If you want to use Trezor connect javascript API you can just install the npm package:\nhttps://www.npmjs.com/package/trezor-connect\nand then just import TrezorConnect from \"trezor-connect\"\nThen about getting the xpub and sign the transactions you can take the code of this issue as a reference, but i dont know if it is 100% correct. . With \"document\" do you refer to the TrezorConnect object? . I have managed to make this works but only on Ropsten. The details are here:\nhttps://stackoverflow.com/questions/50596256/using-truffle-or-ropsten-with-web3js-and-trezor-hardware-wallet\nUsing only truffle development network i couldnt add the Trezor address to the network. @cgewecke  Thanks! \nI cant test it right now, but tomorrow i will do it.\nLet me explain what you have done to try Truffle, just to make sure that my process was ok for you.\n-truffle develop\n-compile\n-migrate\nAt that point I have the deployed contract and its address.\nThen I need my Trezor address to integrate the network, for it to execute the following:\n./node_modules/.bin/testrpc -m \"the 24 words mnemonic of my trezor test device\"\nWhen testrpc started It showed 10 accounts, but none of them match the Trezor address that I get in Ropsten\nAnyway I tried to send a transaction with the address 0 of testrpc, also with the Trezor address that I had stored from Ropssten\nIn both cases I got that I did not have enough balance\nTomorrow I try again and I give you more details about the message, right now i cant remember the exact text.\nAnyway, is it correct to run testrpc and wait for it to connect to the truffle development network?\nThere is no -m \"mnemonic\" option for truffle to avoid using testrpc? (Take in care that Trezor uses 24 word mnemonics)\nThanks!. When testing using:\n1) Truffle develop, compile, migrate:\nError: sender doesn't have enough funds to send tx. The upfront cost is: 9000000000000000 and the sender's account only has: 0\n    at Object.InvalidResponse (errors.js:38)\n    at requestmanager.js:86\n    at XMLHttpRequest.request.onreadystatechange (httpprovider.js:128)\n2) ganache cli with the mnemonic: \nError: sender doesn't have enough funds to send tx. The upfront cost is: 9000000000000000 and the sender's account only has: 0\n    at Object.InvalidResponse (errors.js:38)\n    at requestmanager.js:86\n    at XMLHttpRequest.request.onreadystatechange (httpprovider.js:128)\nSame error, this is using the address that Trezor tells me that the device has, but that address isnt part of one of the 10 accounts of ganache cli or truffle.. i think thats the problem here.. even running ganache cli with the mnemonic of Trezor the address isnt part of the network\n. Using the solution of https://stackoverflow.com/questions/50596256/send-signed-transactions-to-ropsten-or-truffle-develop-network-with-trezor-hard and send ether as @cgewecke saids works!!\none detail, the upfront cost was 9000000000000000 wei (0.009 ether), so i needed to send more than @cgewecke example \n. Thank you for the answers! . I have tried also with another functions that returns other types and the problem is the same, it only works for void functions\nany ideas? \nthanks. Hi @cgewecke , thanks for the answer. \nThere is a couple of recent (aprox 5 months ago) articles and github repos using this aproach so thats an option, i dont know if it is a constraint or the proxy aproach just doesnt work now. \nI really apreciate if you can research about this! \nAbout the methods, the code that i have posted here is just an example, but the Smart contract that i am working on is from a third party and i cannot change it, but it has the return signatures. I will ask them about that because i didnt know that they automatically return true. \nThanks!. @cgewecke any news? The aproach that i have taken is to wrap all the functions that arent void functions in a test contract that expose that functions in a void way.. it is not something im proud of but works :/. ",
    "ayush-deqode": "@marcosmartinez7  could you please share the method getTrezorConnect. @marcosmartinez7 , Actually I am trying to interact from the trezor wallet using node js and I dont have window object. So is there a way so that I can have the api like things so that I can send pin as request parameter and can connect to trezor.\nAs I have digout the connect.js Its completely using window object and playing with trezor. But I dont have the window object. I just need to make connection to trezor via node js and get xpub and sign the p2sh transaction.\nI have searched various things but didnt find a way so that I can have the trezor connection object.\nI have tried to use trezor.js as well but its not working as well. So could you please share any idea or things so that I can have xpub  and sign the transaction?\nThanks . Yeah I have imported but when I run the node then It looks for the document. Since there is no document in our node api.. ",
    "rmi7": "Looks like it yes, \nand no, there is no update to the networks: of that file,\nfor all other migrations before this one there is an update to the networks section in their json file.\nare there any specific things that I could be doing inside a migration file which would prevent the networks section to update?\nUPDATE verified that that is indeed my contract, verified and added source code, still leaves the question why network is not updated and no output in truffle migration log. MyMagicContract.sol == ICO.sol below\nthat didn't fix it for me, still working on ganache + ropsten dry run, but not actual deploy on ropsten, the last migration is the below, the other two contracts I require have been successfully deployed (their networks: {} is updated correct in their JSON file) in a separate migration before this one.\nResult =\nthe migration console output in the main issue text at the top of this page\n+ \nnot getting an updated networks: {} section inside ICO.json\nthe only update in ICO.sol is the updatedAt value\n+\nthis statement is not executed: console.log('DEPLOYED ICO', ICO.address, (await ICO.deployed()).address);\nLast Migration\n```javascript\nconst ICO = artifacts.require('./ICO.sol');\nconst MyToken = artifacts.require('./MyToken.sol');\nconst Membership = artifacts.require('./Membership.sol');\nconst UnixTimestamp = jsTimestamp => (\n  Math.floor(jsTimestamp / 1000)\n);\nmodule.exports = async (deployer, network, accounts) => {\n  // get already deployed MyToken + Membership contracts\n  const token = await MyToken.deployed();\n  const member = await Membership.deployed();\n// constructor args for Ico contract\n  const rate = 3000;             \n  const token = token.address;     \n  const tokenWallet = accounts[0]; \n  const membership = member.address;\n  let ethWallet;\n  let startTime;\n  let endTime;\nif (network === 'mainnet') {\n    // ETH wallet is separate address\n    if (!process.env.ETH_WALLET_ADDRESS) {\n      throw new Error('need ETH_WALLET_ADDRESS env var to be set');\n    }\n    if (!web3.isAddress(process.env.ETH_WALLET_ADDRESS)) {\n      throw new Error(env var ETH_WALLET_ADDRESS is not a vlid ETH address, value: ${process.env.ETH_WALLET_ADDRESS});\n    }\n    ethWallet = process.env.ETH_WALLET_ADDRESS;\nstartTime = 1529146400; \nendTime   = 1535264399;\n\n} else {\n    ethWallet = accounts[0];\nstartTime = UnixTimestamp(Date.now() + 60 * 1000 * 5); // 5 minutes from now\nendTime = UnixTimestamp(Date.now() + 60 * 1000 * 60 * 24 * 14); // 14 days\n\n}\n// deploy Ico contract --> GAS USED: 2,291,944\n  await deployer.deploy(ICO, startTime, endTime, rate, ethWallet, token, tokenWallet, membership);\nconsole.log('DEPLOYED ICO', ICO.address, (await ICO.deployed()).address);\n  const ico = await ICO.deployed();\n// allow Ico contract to add members to membership contract\n  await member.addAdmin(ico.address);\n// get the max amount of tokens that this Ico contract will sell\n  // we can later update this to be even bigger if the need arises, using another token.approve from remix\n  const MAX_ICO_TOKENS = 14625000; // 19000000 + 150% of 19000000;                                      \n// allow Ico contract to transfer MAX_ICO_TOKENS NTS tokens\n  await token.approve(ico.address, web3.toWei(MAX_ICO_TOKENS))\n};\n```\ntruffle.js\n```javascript\nconst assert = require('assert');\nconst HDWalletProvider = require(\"truffle-hdwallet-provider\");\nrequire('dotenv').config({ path: require('path').join(__dirname, '.env') });\nassert(process.env.INFURA_API_TOKEN, 'missing INFURA_API_TOKEN in .env file');\nassert(process.env.HD_WALLET_MNEMONIC, 'missing HD_WALLET_MNEMONIC in .env file');\nmodule.exports = {\n  networks: {\n    development: {\n      host: \"localhost\",\n      port: 8545,\n      network_id: \"*\" // Match any network id\n    },\n    ropsten: {\n      provider: () => new HDWalletProvider(\n        process.env.HD_WALLET_MNEMONIC,\n        https://ropsten.infura.io/${process.env.INFURA_API_TOKEN},\n      ),\n      gas: 4700000,\n      gasPrice: 17e9,\n      network_id: 3,\n    },\n    mainnet: {\n      provider: () => new HDWalletProvider(\n        process.env.HD_WALLET_MNEMONIC,\n        https://mainnet.infura.io/${process.env.INFURA_API_TOKEN},\n      ),\n      gas: 5e6, // 5 million\n      gasPrice: 10e9, // 10 gwei\n      network_id: 1,\n    },\n  },\n};\n```. thanks @cgewecke, amazing that does it!!!\n\ud83c\udf87\ud83d\ude0e\u2604\ufe0f. also relevant: https://github.com/trufflesuite/truffle-migrate/issues/29#issuecomment-389649903. ",
    "taylorjdawson": "@cgewecke Yes, I agree. Please colorize the solc output that would be extremely helpful! It would be helpful to either rename this issue or create a new issue as: Colorize the solc output. . ",
    "kronosapiens": "Hi! Also interested in this issue. Will the new version of Ganache also pass along require failure messages?. Thanks for the update! Is there anything I could help with or is it just waiting for things to be merged and released?. @cgewecke Noting that I'm also running into this error. I know error code 429 is rate limiting, but I've tried using three different networks and two API keys at different times of day, so... \ud83d\ude2d \nYou can  reproduce by:\ngit clone git@github.com:JoinColony/colonyToken.git\ncd colonyToken\ngit checkout 297a1aad2f1845bba4b9c9592e282478246f0162\nyarn\ngit submodule update --init\n./node_modules/.bin/truffle compile\n./node_modules/.bin/truffle publish\nTruffle 4.1.14, OSX 10.11.6\nAs an aside, the doc say that truffle publish takes no arguments, but you mention passing the -n ropsten argument: https://truffleframework.com/docs/truffle/reference/truffle-commands#publish. ",
    "roschler": "@cgewecke This is fantastic news!  I assume the debugger will display it during a session?. Does the reason string propagate through Web3.js?  If so, any particular\nversion/library?\nOn Sun, Sep 23, 2018 at 2:39 PM, Said Eloudrhiri notifications@github.com\nwrote:\n\n@cgewecke https://github.com/cgewecke Thanks for your reply. I'm using\nganache as I can check transactions in the console window. Without the\n--noVMErrorsOnRPCResponse flag, the reason string message is displayed in\nthe error message. But, the reason remains undefined. Do you have a any\nsmall truffle project (contract and test) I can use to check my environment?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/976#issuecomment-423837682,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEcdB8zO1fvhNteOSYuf5cQmOfSieYGdks5ud9VKgaJpZM4UU14f\n.\n\n\n-- \nThanks,\nRobert Oschler\nTwitter: https://twitter.com/roschler http://twitter.com/roschler\nLinkedIn: https://www.linkedin.com/in/natlang/\n. @cgewecke A big thank you for that!. @cgewecke Thanks.  Pardon the drive-by question, but I find myself entering similar queries into truffle develop repeatedly, as I'm sure many programmers do; many of them complex Javascript queries that are lengthy.  If I want to write my own editor/wrapper that executed queries against whatever engine is driving the Truffle develop environment when you launch it in a Terminal window, what repo would I fork to do this?. Thanks Christopher, will do.. @cgewecke Sure, thanks.. No luck.  I can download the main repository with the \"https://\" link, but the dependent repos are downloaded by the \"meta\" tool and that tool uses the git protocol for link.s. @cgewecke It turns out it's due to the lack of an SSH key being registered with GitHub.   I needed to set up a proper RSA key for GitHub, which I did using these two documents. Now the git@github.com links work for the main repo and in meta:\nhttps://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#adding-your-ssh-key-to-the-ssh-agent\nhttps://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/. @cgewecke Pardon the drive-by question.  I want to add a \"loadjson\" command to the console.  This command will load the JSON content of a particular json file and JSON.parse() it to the variable given.  For example:\ntruffle(local)> jsonparse ./contracts/Proxy.json abiProxy\nThis command would fs.readSync() the content of the file given and assign it to the variable abiProxy in the global Javascript namespace.  Can you tell me what repos I need to focus my efforts on in the two two topical areas shown below, in order to accomplish this modification?:\n1) Adding a new command to the Truffle REPL shell that executes some code I create; similar to the way you can call migrate, etc. from the console?\n2) Working with the Javascript VM (core engine) so I can figure out how to push a variable into the global namespace active during a Truffle console session?\nThere's quite a few projects in the main repo dependencies list (sub-repos) and If I knew what sub-repos to concentrate it, it would be a big help.\nBTW, I found it a little strange that the Contributing.md document tells you to do all the main repo and meta/sub-repo stuff before you fork the library.  I would have thought that you should fork the library first and then execute those steps?. Sure.. @cgewecke Doesn't the file I attached show the failed tests?  If not, what other info do you need that's not in that file?  Let me know and I'll rerun the tests.\nI'm running Node v10.2.1. @cgewecke My fault.  I truncated the report in the wrong place.  Attached is the full tests report.\ntruffle-monorepo-test-errors-full.txt\n. To all who come here.  There may be multiple causes to the error referenced on this thread but in my case it had to do with passing values to the Web3JS functions that were not all Big Numbers.  If you are having this error and are not already converting all gas related values to a Big Number, give that a try using the toBN() function found in the web3-utils package.  This may also clean up a host of other odd error messages you may see intermittently, even seemingly unrelated errors like intermittent \"Internal JSON RPC response\" error.. @rsamo Thanks Ryan!  I had the same problem and that fixed it.. I encountered this error too today.  I am using Ubuntu Linux 18.04, Ganache v 1.2.2, Node.JS 8.1, and NPM 5.6.0.\nI have a reproducible test case if that is useful.  I have saved off the relevant Truffle Solidity project to an archive directory.. ",
    "danaki": "I used these reasoning strings in my contracts until I got my contract so huge that it couldn't fit into ethereum transaction limit. I would like to see these reasoning strings in tests to distinguish one case from another but can skip for production use. Is it possible somehow?. ",
    "noelyoo": "This issues is not related with this repo so I closed.. ",
    "asaj": "Thanks Chris, do you know if there are plans for the debugger to support precompiled contracts?\nIf not, would it be possible to fail with a more useful message?. ",
    "bhemeswararaoa": "Downloading...\nError: Error making request to https://raw.githubusercontent.com/truffle-box/bare-box/master/truffle.js. Got error: getaddrinfo ENOTFOUND raw.githubusercontent.com raw.githubusercontent.com:443. Please check the format of the requested resource.\n    at Request._callback (C:\\Users\\blockchain\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-box\\lib\\utils\\unbox.js:45:1)\n    at self.callback (C:\\Users\\blockchain\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\request\\request.js:185:1)\n    at emitOne (events.js:116:13)\n    at Request.emit (events.js:211:7)\n    at Request.onRequestError (C:\\Users\\blockchain\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\request\\request.js:877:1)\n    at emitOne (events.js:116:13)\n    at ClientRequest.emit (events.js:211:7)\n    at TLSSocket.socketErrorListener (_http_client.js:387:9)\n    at emitOne (events.js:116:13)\n    at TLSSocket.emit (events.js:211:7)\ni am also faced this type of error please give me the help\n. ok i want to create ico with security please give me the help\nOn Sat, 16 Jun 2018 8:55 PM c-g-e-w-e-k-e->, notifications@github.com\nwrote:\n\n@bhemeswararaoa https://github.com/bhemeswararaoa Your error is\ndifferent - it's caused by being behind a firewall which limits your access\nto Github. That problem is being tracked at #766\nhttps://github.com/trufflesuite/truffle/issues/766 where there's a link\nthat will let you download the template from browser to desktop.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/985#issuecomment-397819482,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AmbjKXWHRFEWN5B4aGlGbMUJV24QuCt7ks5t9SN2gaJpZM4UbwPY\n.\n. \n",
    "mikiw": "in our company we think that it is related with https://github.com/trufflesuite/ganache-core/pull/81 bug\nwe implemented time controller and addSeconds(X) where X is enormous number like 10000000 and it helped. I figured out it later that orders is not important but something else like time related stuff. yes sure. ",
    "MoMannn": "+1 \nThis is an issue I came across when trying to use a custom web3. It is very inconvenient to fork truffle just to change the web3 dependency. . ",
    "tbenny": "The issue is fixed thanks for your help , the metacoin.sol is also modified to \npragma solidity ^0.4.23;\nimport \"./ConvertLib.sol\";\n// This is just a simple example of a coin-like contract.\n// It is not standards compatible and cannot be expected to talk to other\n// coin/token contracts. If you want to create a standards-compliant\n// token, see: https://github.com/ConsenSys/Tokens. Cheers!\ncontract MetaCoin {\n    mapping (address => uint) balances;\nevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n\nconstructor() public {\n    balances[tx.origin] = 10000;\n}\n\nfunction sendCoin(address receiver, uint amount) public returns(bool sufficient) {\n    if (balances[msg.sender] < amount) return false;\n    balances[msg.sender] -= amount;\n    balances[receiver] += amount;\n    emit Transfer(msg.sender, receiver, amount);\n    return true;\n}\n\nfunction getBalanceInEth(address addr) public view returns(uint){\n    return ConvertLib.convert(getBalance(addr),2);\n}\n\nfunction getBalance(address addr) public view returns(uint) {\n    return balances[addr];\n}\n\n}\n. ",
    "samaujs": "Hi,\nAs per request, please refer to attached migration files (which I don't think is the problem, as it works many times before) and the following details for your reference:\n(1) The account address are generated with the command \"geth --rinkeby account new\";\n(2) I did not publish my private key; other than using the address to obtain rinkeby fauet as per instruction from google plus;\n(3) I have been using these addresses in the last few months (the first 3 addresses are created months ago and the other 2 are newly created for testing since I lost all the ethers mysteriously) :\n[\"0x25376e3269172e1811dbf053460dc5b090499f89\", \"0x96849a6a47ef7aa4a4f5eca9ff8d3242ffbe271c\", \"0x2efc9b04d1595e246f482df8c86a4ae2fe8e0792\", \"0xb856b88ed8b73ef697dc92b1a92e7e89d8ff89fe\", \"0x00291f19e140bf4a669ba8252371d404075fa92d\"]\n(4) This lost of ethers started recently from block 2426257https://rinkeby.etherscan.io/block/2426257 of the address \"0x25376e3269172e1811DBF053460dC5b090499f89\".  This is the first encounter.\n(5)  One typical series of action is when I obtain the faucet in block 2429754, compile and migrate in block 2429764 and ethers being mysteriously transferred out in block 242965.  This is what happens about 10 hours ago.\nTxHash  Block   Age     From            To      Value   [TxFee]\n0x56f063ed3634007d3d93f8d9733f2225be9c3a3cb706a0809a7ee93633912610https://rinkeby.etherscan.io/tx/0x56f063ed3634007d3d93f8d9733f2225be9c3a3cb706a0809a7ee93633912610  2429765https://rinkeby.etherscan.io/block/2429765     10 hrs 37 mins ago      0x25376e3269172e1811dbf053460dc5b090499f89      OUT     0x7097f41f1c1847d52407c629d0e0ae0fdd24fd58https://rinkeby.etherscan.io/address/0x7097f41f1c1847d52407c629d0e0ae0fdd24fd58     2.883086186000018 Ether 0.08916761\n0xa8c4f77f6a20d87c055bdf556d622554c4bdd0cb5a39680cff819f5ae36433bahttps://rinkeby.etherscan.io/tx/0xa8c4f77f6a20d87c055bdf556d622554c4bdd0cb5a39680cff819f5ae36433ba  2429764https://rinkeby.etherscan.io/block/2429764     10 hrs 37 mins ago      0x25376e3269172e1811dbf053460dc5b090499f89      OUT     [https://rinkeby.etherscan.io/images/id/application-table.png]  Contract Creationhttps://rinkeby.etherscan.io/address/0x9374a4b6bb9834cc4560313153269222a7bc291e      0 Ether 0.0277462\n0x60b3158a165eb2ce923ff930e0bc02848a203c563ba40addd3c8001f647d7acahttps://rinkeby.etherscan.io/tx/0x60b3158a165eb2ce923ff930e0bc02848a203c563ba40addd3c8001f647d7aca  2429754https://rinkeby.etherscan.io/block/2429754     10 hrs 40 mins ago      0x31b98d14007bdee637298086988a0bbd31184523https://rinkeby.etherscan.io/address/0x31b98d14007bdee637298086988a0bbd31184523       IN    0x25376e3269172e1811dbf053460dc5b090499f89      3 Ether 0.000021\n(6) The above actions, I have tried multiple times.  It happens even when I transferred ether between my accounts in geth console with the command \"eth.sendTransaction({from: eth.accounts[4], to: eth.accounts[3], value: web3.toWei(1, \"ether\")})\".\n(7) Lastly, I have tried again about an hour ago, I cannot get the exact time from etherscan (as it is currently out of sync).  Once I obtain the faucet, I made a transfer of 3.9 eth (from \"0xb856b88ed8b73ef697dc92b1a92e7e89d8ff89fe\" to \"0x25376e3269172e1811DBF053460dC5b090499f89\"), compile and migrate that works fine as usual before the problem.  But, within 15-20 minutes, the remaining ethers are transferred away again leaving the coinbase (0x25376e3269172e1811DBF053460dC5b090499f89) with 0 ether remaining.\nhttps://rinkeby.etherscan.io/block/2426257\n--\nHope the above details are sufficient for locating the problem.\nPlease advise what should I do next?  Should I change to a new coinbase and don't use the above addresses anymore?\nYour assistance is greatly appreciated.  Thank you.\nBest Regards\nSam\n\nFrom: c-g-e-w-e-k-e-> notifications@github.com\nSent: Saturday, June 9, 2018 2:00 PM\nTo: trufflesuite/truffle\nCc: samaujs; Mention\nSubject: Re: [trufflesuite/truffle] Ethers are wiped out in account during sendTransaction or migrations (#997)\nHi @samaujshttps://github.com/samaujs\n\nCould you show your migrations file?\nHow did you generate your address? It looks possible that Rinkeby ether is being swept by a bot from various addresses to 0x7097f41F1C1847D52407C629d0E0ae0fDD24fd58https://rinkeby.etherscan.io/address/0x7097f41f1c1847d52407c629d0e0ae0fdd24fd58 which suggests the private key for your Rinkeby coinbase address might be in the public domain / not secure.\nHow long have you been using the address? Did you make all of the outgoing transactions (stretching back several months) listed on etherscan herehttps://rinkeby.etherscan.io/txs?a=0x25376e3269172e1811DBF053460dC5b090499f89?\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/trufflesuite/truffle/issues/997#issuecomment-395971509, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AMscGpiOYMD-24zxTZIWRcqqPTWv_EjEks5t69T2gaJpZM4UhOf9.\n. Thanks for your reply; I have also open the issue in at go-ethereum as per advise.\n\nFrom: c-g-e-w-e-k-e-> notifications@github.com\nSent: Saturday, June 9, 2018 4:49 PM\nTo: trufflesuite/truffle\nCc: samaujs; Mention\nSubject: Re: [trufflesuite/truffle] Ethers are wiped out in account during sendTransaction or migrations (#997)\n@samaujshttps://github.com/samaujs The account your Rinkeby Eth are being swept to also exists on mainnethttps://etherscan.io/address/0x7097f41f1c1847d52407c629d0e0ae0fdd24fd58 with a balance of ~60 ETH. There's a single comment which says: hi man! are you a cool crowler?.\nIf you have a chance could you open an issue at go-ethereum herehttps://github.com/ethereum/go-ethereum/issues and provide the same information you've provided in this issue? They might have a clearer sense of what's going on.\nIn the interim I would not use any addresses generated by your local geth client for any real transactions.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/trufflesuite/truffle/issues/997#issuecomment-395983329, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AMscGr6LPzYNWrmMQsmE2V4arTi9O_Pvks5t6_ykgaJpZM4UhOf9.\n. I used \u201chttps://faucet.rinkeby.io\u201d, is there any problem with this site?. Thank you. Unfortunately, tokens are transferred again today to the same account \"https://rinkeby.etherscan.io/address/0x7097f41f1c1847d52407c629d0e0ae0fdd24fd58\"\nat block \"2464270\"\nwith the following details :\n(1) The account is unlocked with Metamask and not geth; within only appropriately 20 minutes, ethers are being transferred \n(2) geth --rinkeby --rpc --rpccorsdomain \"http://localhost:8000\" --rpcapi=\"personal,eth,network,web3,net\" --ipcpath \"~/Library/Ethereum/geth.ipc\"\nwith  --rpcaddr \"0.0.0.0\"  removed. Also opened issue in geth . ",
    "schemar": "Just wanted to chime in and say that I have the same problem and am also using wrapper contracts now. It appears the problem is that the fallback function does not have a return value, right?. ",
    "rmlopes": "Sorry for bumping up this. I have been struggling with this issue for a couple of days now. It looks like as long as any modifier is used the ThrowProxy will fail as described. Using Solidity v0.5.. ",
    "jeichel-miovision": "I've been running into the Error: [ipfs-mini] status 429 error as well. While looking into it, I think I may have found a few bugs in truffle-core...\nhttps://github.com/trufflesuite/truffle/blob/develop/packages/truffle-core/lib/package.js#L220\nThere are references to data.contract_name and data.unlinked_binary that are not compatible with the solc compiler that ships with the truffle npm package (tested on version 4.1.14). At least for my build, I think they should be data.contractName and data.bytecode.\n@kronosapiens - I don't think the -n will do anything with the truffle publish command. \nhttps://github.com/trufflesuite/truffle/blob/master/packages/truffle-core/lib/package.js#L108 shows that this command will always use the ropsten network, presumably since EthPM is currently hosted on Ropsten.\nI've also tried changing some of the entries in my truffle.js config file, to try different ipfs hosts...\nmodule.exports = {\n  networks: {\n    ropsten: {\n      provider: new HDWalletProvider(mnemonic, 'https://ropsten.infura.io/v3/XXXXXXXXXXXXXXXX'),\n      network_id: '3'\n    }\n  },\n  ethpm: {\n    ipfs_host: \"ipfs.infura.io\",\n    ipfs_protocol: \"https\",\n    registry: \"0x8011df4830b4f696cd81393997e5371b93338878\",\n    install_provider_uri: \"https://ropsten.infura.io/truffle\"\n  }\n}\nHowever, after these changes, I'm stilling getting the 429 error.\nI'm going to continue to dig through code to learn more about the code base and see if there is anything else that might be causing the error. I'm still pretty new to blockchain and truffle so I'm still learning as I go.. so with a bit more experimenting and code tracing, I agree with @cgewecke, it looks like the default IPFS gateway, ipfs.infura.io (https://github.com/search?q=org%3Aethpm+ipfs.infura.io&type=Code), might have a content-length limit or some data bandwidth cap.\nWhen I installed a local IPFS host (https://ipfs.io/docs/getting-started/ and https://docs.ipfs.io/introduction/install/) and updated my ethpm.json config, I no longer get the 429 error.\nmodule.exports = {\n  networks: {\n    ropsten: {\n      provider: new HDWalletProvider(mnemonic, 'https://ropsten.infura.io/v3/XXXXXXXXXXXXXXXX'),\n      network_id: '3'\n    }\n  },\n  ethpm: {\n    ipfs_host: \"127.0.0.1\",\n    ipfs_protocol: \"http\",\n    registry: \"0x8011df4830b4f696cd81393997e5371b93338878\",\n    install_provider_uri: \"https://ropsten.infura.io/truffle\"\n  }\n}\nI did end up with a transaction timeout error, but that might be because I'm also doing a large number of contracts at once. I need to try some smaller things first..... ",
    "Koldus": "I installed ganache-cli and everything went as it should.. @cgewecke Thanks a lot for the tips. I didn't get to it until today, but yes, I did manage to get it to work.\nFirst, what helped was to initiate the truffle with npx.\nI also tried to set up the complete environment from scratch. This time it worked perfectly. The only thing I did differently was that I also updated nvm to the latest version (not just node and npm). So that's probably what solved it for me.\nAgain, thanks a lot for the help.. ",
    "mg6maciej": "Might have been problematic to https://github.com/ethereum/EIPs/issues/777 where send is defined.. ",
    "timqian": "@cgewecke Met the same issue,\n- Execution context: node v10.0.0 (not truffle exec)\n- Dependencies:\n  \"truffle-contract\": \"^3.0.6\",\n  \"web3\": \"^1.0.0-beta.34\"\n- code\n```js\n// frontend.js\nconst Web3 = require('web3');\nconst TruffleContract = require('truffle-contract');\nconst AdoptionArtifact = require('./build/contracts/Adoption.json');\nconst web3Provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:7545\");\n(async () => {\n    const Adoption = TruffleContract(AdoptionArtifact);\n    Adoption.setProvider(web3Provider);\n    const instance = await Adoption.deployed();\n})();\n- error info:\n$ node frontend.js\nTypeError: Cannot read property 'apply' of undefined\n   at */node_modules/truffle-contract/contract.js:24:36\n```. ",
    "carbonnetwork": "@cgewecke Thanks for your explain.. @cgewecke My OS is macOs high Sierra, and I used sublime text and terminal.. @cgewecke Yes. The No. 2 problem above have solved, but \"import problem\" not. The codes:\n```\n// contracts/ERC20.sol\npragma solidity ^0.4.23;\ncontract ERC20 {\nuint256 public _totalSupply;\nfunction totalSupply() public constant returns (uint256 total);\nfunction balanceOf(address _owner) public constant returns (uint256 balance);\nfunction transfer(address _to, uint256 _value) public returns (bool success);\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\nfunction approve(address _spender, uint256 _value) public returns (bool success);\nfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining);\nevent Transfer(address indexed _from, address indexed _to, uint256 _value);\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n```\n```\n// contracts/SafeMathLib.sol\npragma solidity ^0.4.23;\nlibrary SafeMathLib {\nfunction add(uint256 a, uint256 b) public pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\nfunction sub(uint256 a, uint256 b) public pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\nfunction mul(uint256 a, uint256 b) public pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\nfunction div(uint256 a, uint256 b) public pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n}\n\n//contracts/StandardToken.sol\npragma solidity ^0.4.23;\nimport \"./ERC20.sol\";\nimport \"./SafeMathLib.sol\";\ncontract StandardToken is ERC20 {\nusing SafeMathLib for uint256;\n\naddress public owner;\n\nmapping(address => uint) balances;\n\nmapping (address => mapping (address => uint)) allowed;\n\nconstructor() public {\n    owner = msg.sender;\n    _totalSupply = 1000000 * 10**uint256(18);\n            balances[owner] = _totalSupply;\n}\n\n/*\n *fix short address bug\n */\nmodifier checkAddressSize(uint size) {\n    uint len = msg.data.length;\n    if(len < size + 4){\n        revert();\n    } \n    _;\n}\n\nfunction totalSupply() public constant returns (uint256 total){\n    return _totalSupply;\n}\n\nfunction balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n}\n\nfunction transfer(address _to, uint256 _value) public checkAddressSize(2 * 32) returns (bool success){\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n}\n\nfunction transferFrom(address _from, address _to, uint256 _value) public checkAddressSize(3 * 32) returns (bool success) {\n    uint _allowance = allowed[_from][msg.sender];\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n\n    emit Transfer(_from, _to, _value);\n    return true;\n}\n\nfunction approve(address _spender, uint256 _value) public returns (bool success) {\n    require ((_value != 0) && (allowed[msg.sender][_spender] != 0));\n\n    allowed[msg.sender][_spender] = _value;\n\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n}\n\nfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n}\n\n}\n```\n```\n// contracts/test/TestStrandardToken.sol\npragma solidity ^0.4.23;\nimport \"truffle/Assert.sol\";\nimport \"truffle/DeployedAddresses.sol\";\nimport \"../StandardToken.sol\";\ncontract TestStandardToken {\n    StandardToken token;\nfunction beforeEach() public {\n    token = StandardToken(DeployedAddresses.StandardToken());\n}\n\nfunction testTransfer () public {\n    address x = 0x15373C2C51410d160e395e00a40eF4E36843a2B8;\n    token.transfer(x, 1000);\n    Assert.equal(token.balanceOf(x), 1000, \"The balance is wrong!\");\n}\n\n}\n\n// test/standard_token.test.js\nvar StandardToken = artifacts.require(\"./StandardToken.sol\");\ncontract('StandardToken', function(accounts) {\nit(\"should put 1 StandardToken in the fourth account\", function() {\n    return StandardToken.deployed().then(function(instance) {\n      return instance.transfer(accounts[3], 1000 );\n    }).then(function(balance) {\n      console.log(balance.valueOf());\n      assert.equal(balance.valueOf(), 1000, \"1 wasn't in the fourth account\");\n    });\n  });\n});\nThe result:\n$ truffle compile\nError: Could not find truffle/Assert.sol from any sources; imported from /Users/iclick/blockchain/ethereum/carbon-ico/contracts/test/TestStandardToken.sol\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-resolver/index.js:76:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-resolver/~/async/internal/onlyOnce.js:12:1\n    at next (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-resolver/~/async/whilst.js:68:1)\n$ truffle debug 0x8b62c6156a88196128cca9a23c9f4aa648fb7f1b3f601327c650568225f11b67\nError: Could not find truffle/Assert.sol from any sources; imported from /Users/iclick/blockchain/ethereum/carbon-ico/contracts/test/TestStandardToken.sol\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-resolver/index.js:76:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-resolver/~/async/internal/onlyOnce.js:12:1\n    at next (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-resolver/~/async/whilst.js:68:1). @cgewecke Thanks. It worked, but the test contract throw exception:\"Error: VM Exception while processing transaction: revert\". Then I debug it used \"truffle debug\" command , got exception: \nError: Error: Unknown transaction 0xb61be753053a543396769d978874573cca7d82234af26896adf72aaeda3f2ac4\n    at /usr/local/lib/node_modules/ganache-cli/build/cli.node.js:22360:23\n    at /usr/local/lib/node_modules/ganache-cli/build/cli.node.js:22547:18\n    at /usr/local/lib/node_modules/ganache-cli/build/cli.node.js:87487:23\n    at /usr/local/lib/node_modules/ganache-cli/build/cli.node.js:85776:15\n    at /usr/local/lib/node_modules/ganache-cli/build/cli.node.js:85541:19\n    at /usr/local/lib/node_modules/ganache-cli/build/cli.node.js:87686:21\n    at ReadFileContext.callback (/usr/local/lib/node_modules/ganache-cli/build/cli.node.js:87583:14)\n    at FSReqWrap.readFileAfterOpen [as oncomplete] (fs.js:420:13)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-debugger/dist/debugger.js:6148:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-provider/wrapper.js:134:1\n    at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/httpprovider.js:128:1)\n    at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:64:1)\n    at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:354:1)\n    at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:509:1)\n    at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:469:1)\n    at emitNone (events.js:111:20)\n    at IncomingMessage.emit (events.js:208:7)\n    at endReadableNT (_stream_readable.js:1055:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickDomainCallback (internal/process/next_tick.js:218:9)\ntruffle(development)> TypeError: Cannot read property 'view' of undefined\n    at printAddressesAffected (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-core/lib/commands/debug.js:102:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-core/lib/commands/debug.js:442:1\n    at <anonymous>\n    at process._tickDomainCallback (internal/process/next_tick.js:228:7)\nBut it may not be the same issue with #721 [https://github.com/trufflesuite/truffle/issues/721].\nAnd The javascript test transaction can debug normally.\ntruffle(development)> version\nTruffle v4.1.11 (core: 4.1.11)\nSolidity v0.4.24 (solc-js). @cgewecke Thank you! The problem was solved. But got another problem that is same with https://ethereum.stackexchange.com/questions/50423/truffle-debugger-throws-error.  And much like #39 . @cgewecke OK,thanks. @cgewecke Thank you for your reply !. @gnidan. Sorry for the missing information, the code is(omitted parts of the code): \n```\ncontract Index is Manager {\nmapping (uint8 => uint[]) statusIndex;\n\nconstructor() public{\n\n}\n\nfunction addStatusIndex (uint8 _status, uint _id) public onlyLicensee returns(bool res) {\n    require (_status < 3);\n\n    uint[] storage ids = statusIndex[_status];\n    addIndex(ids, _id);\n    return true;\n}\n\n    function addIndex(uint[] storage _collection, uint _id) internal returns(bool _res) {\n    uint length = _collection.length;\n    for (uint i = 0; i < length; i++) {\n        if(_collection[i] == 0){\n            _collection[i] = _id;\n            return true;\n        }\n    }\n\n    _collection.push(_id);\n    return true;\n}\n\n}\n. @gnidan The ``_collection`` should be empty. At this time I had not put data in it. And when I  watched the value of ``_collection`` by truffle-debugger got the same error\uff1a\ndebug(development:0xe44f64f0...)> +:_collection\nRangeError: Invalid array length\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:86:1\n    at args (/usr/local/lib/node_modules/truffle/build/webpack:/~/reselect-tree/index.js:209:1)\n    at Function. (/usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:36:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:90:1\n```. ",
    "umlspec": "i have tested this problem at both Powershell and Gitbash. The same problem occurred.\ni have added two envionments path variables, but it has not been resolved.\nC://Program FIles/nodejs/node_modules/npm\nc://users/my_id/AppData/Roaming/npm\nlet me know another suggestion. \nThanks. yes, i can run it if i do not include \"const fs = require('fs')\". The template \"Tutorialtoken\" has also the same issue. \nI wish that the designer of \"petshop\" and \"tutorialtoken\" would investigate this issue soon.\nThey are very nice templates, which are better than \"webpack\" template(personally i think). But they can't be extended to other bigger projects due to failing to include modules supported by Node.js and third party.. ",
    "HarryR": "I'm having the same problem on Linux with Truffle v4.1.13, it means that I can't debug any transactions.\nI started doing some debugging by editing the cli.bundled.js file directly, in recordSources I output sources, then for each item I output the _ref2 variable (see cli.bundled.js:200413):\nIt turns out the problem was caused by my std/ERC20.sol interface. When the file is an interface the sources variable ends up with an undefined entry in the list instead of the JSON data for it.\nI added something to skip the the undefined item and now debugging works again.\n@cgewecke  The problem is with interface being used instead of contract - after making the small hack debugging now works. If you use the same hack (skipping undefined items) then that should fix the problem - or - a better fix would be working out why an undefined item ends up in the list as a the result of an interface being used.\ne.g. if any source file contains only an interface definition, e.g. contract MyContract is MyInterface {} in one file and interface MyInterface {} in another file, then the MyInterface will be in the list of sources as an undefined.\nThat doesn't explain why the Fibonacci thing described by @RobertoC27 doesn't work, maybe a different but related problem. . Surely you need to return context regardless of if an instance is emitted?\nThis will break method chaining if it returns null. ",
    "Nufflee": "Same.. ",
    "Chippi": "same error in truffle@5.0.0-beta.0. pls fix. ",
    "stevenleeg": "Seeing the same issue on 4.1.14. Any updates here?. ",
    "hadarbmdev": "Same issue here. Truffle v5.0.0-beta.1 Solidity v0.4.25 Ganache v1.2.2. Same issue here. Truffle v5.0.0-beta.1 Solidity v0.4.25 Ganache v1.2.2\n. ",
    "trifist": "similar issue here, truffle v5.0.1\n\n. Same here, any solutions?. ",
    "etsangsplk": "@cgewecke \nnvm install v6.12.2\nv6.12.2 is already installed.\nNow using node v6.12.2 (npm v3.10.10)\n```\n/usr/lib/node_modules/truffle/build/cli.bundled.js:60353\n!function(e,a){ true?module.exports=a():\"function\"==typeof define&&define.amd?define(\"ganache\",[],a):\"object\"==typeof exports?exports.ganache=a():e.ganache=a()}(global,function(){return function(e){var a={};function t(c){if(a[c])return a[c].exports;var n=a[c]={i:c,l:!1,exports:{}};return e[c].call(n.exports,n,n.exports,t),n.l=!0,n.exports}return t.m=e,t.c=a,t.d=function(e,a,c){t.o(e,a)||Object.defineProperty(e,a,{configurable:!1,enumerable:!0,get:c})},t.r=function(e){Object.defineProperty(e,\"esModule\",{value:!0})},t.n=function(e){var a=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(a,\"a\",a),a},t.o=function(e,a){return Object.prototype.hasOwnProperty.call(e,a)},t.p=\"\",t.w={},t(t.s=1036)}([function(e,a,t){try{var c=t(1);if(\"function\"!=typeof c.inherits)throw\"\";e.exports=c.inherits}catch(a){e.exports=t(1021)}},function(e,a){e.exports=__webpack_require(3)},function(e,a,t){\"use strict\";var c=\"function\"==typeof Symbol&&\"sym\nSyntaxError: Unexpected identifier\n    at createScript (vm.js:56:10)\n    at Object.runInThisContext (vm.js:97:10)\n    at Module._compile (module.js:542:28)\n    at Object.Module._extensions..js (module.js:579:10)\n    at Module.load (module.js:487:32)\n    at tryModuleLoad (module.js:446:12)\n    at Function.Module._load (module.js:438:3)\n    at Module.runMain (module.js:604:10)\n    at run (bootstrap_node.js:383:7)\n    at startup (bootstrap_node.js:149:9)\n. @cgewecke \n8 works but because of some project constraint, have to stick with 6\nwhihc on the website it says it is supporting. It just show up right from the start \ntruffle \nthat is it\nTruffle v4.1.11 (core: 4.1.11)\nSolidity v0.4.24 (solc-js)\n. Using truffle as api. Node version released with internal project is pinned to that node 6.  There is nothing I can do about that part.. Looks like you are using async which is not available in node6?.Truffle v4.1.13 (core: 4.1.13)\nSolidity v0.4.24 (solc-js)\n truffle test\n/home//Projects/-di/packages/_app_di/node_modules/eth-block-tracker/src/index.js:38\n async awaitCurrentBlock () {\n       ^^^^^^^^^^^^^^^^^\nSyntaxError: Unexpected identifier\n   at createScript (vm.js:56:10)\n   at Object.runInThisContext (vm.js:97:10)\n   at Module._compile (module.js:542:28)\n   at Module._extensions..js (module.js:579:10)\n   at Object.require.extensions.(anonymous function) [as .js] (/home//Projects/-di/packages/_app_di/node_modules/babel-register/lib/node.js:152:7)\n   at Module.load (module.js:487:32)\n   at tryModuleLoad (module.js:446:12)\n   at Function.Module._load (module.js:438:3)\n   at Module.require (module.js:497:17)\n   at require (internal/module.js:20:19)\n   at Object. (/home//Projects/-di/packages/_app_di/node_modules/web3-provider-engine/index.js:4:25)\n   at Module._compile (module.js:570:32)\n   at Module._extensions..js (module.js:579:10)\n   at Object.require.extensions.(anonymous function) [as .js] (/home//Projects/-di/packages/_app_di/node_modules/babel-register/lib/node.js:152:7)\n   at Module.load (module.js:487:32)\n   at tryModuleLoad (module.js:446:12)\n   at Function.Module._load (module.js:438:3)\n   at Module.require (module.js:497:17)\n   at require (internal/module.js:20:19)\n   at Object. (/home//Projects/-di/packages/_app_di/node_modules/truffle-hdwallet-provider/index.js:3:22)\n   at Module._compile (module.js:570:32)\n   at Module._extensions..js (module.js:579:10)\n   at Object.require.extensions.(anonymous function) [as .js] (/home//Projects/-di/packages/_app_di/node_modules/babel-register/lib/node.js:152:7)\n   at Module.load (module.js:487:32)\n   at tryModuleLoad (module.js:446:12)\n   at Function.Module._load (module.js:438:3)\n   at Module.require (module.js:497:17)\n   at require (internal/module.js:20:19)\n   at Object. (/home//Projects/-di/packages/_app_di/src/main/resources//bin/truffle-config.js:5:26)\n   at Module._compile (module.js:570:32)\n   at Object.Module._extensions..js (module.js:579:10)\n   at Module.load (module.js:487:32)\n   at tryModuleLoad (module.js:446:12)\n   at Function.Module._load (module.js:438:3)\n. Doubt if any of those tests are hitting the other libraries like eth-block-tracker.\nFor example for yarn.lock, these libraries are all using async\nhttps://github.com/trufflesuite/truffle/blob/62e1554d86ccb91b861e494e790a67251c77d494/yarn.lock#L3453\n```. The crash is from node_modules/eth-block-tracker, which is using async feature (same version as in the repro yarn lock).\nTried addin the following on babelrc but does not seem to help, to make node6 recognised asyn/await feature.\n\"plugins\": [\"transform-async-to-generator\",\n  [\"transform-runtime\", {\n      \"polyfill\": false,\n      \"regenerator\": true\n    }]\n  ]\n```\nnvm ls\n->      v6.12.2\n```\n```\nTruffle v4.1.13 (core: 4.1.13)\nSolidity v0.4.24 (solc-js)\ntruffle test\nKeccak bindings are not compiled. Pure JS implementation will be used.\n/src/main/resources/bin/node_modules/eth-block-tracker/src/index.js:38\n  async awaitCurrentBlock () {\n        ^^^^^^^^^^^^^^^^^\nSyntaxError: Unexpected identifier\n    at createScript (vm.js:56:10)\n    at Object.runInThisContext (vm.js:97:10)\n    at Module._compile (module.js:542:28)\n    at Module._extensions..js (module.js:579:10)\n    at Object.require.extensions.(anonymous function) [as .js] (/src/main/resources/bin/node_modules/babel-register/lib/node.js:152:7)\n    at Module.load (module.js:487:32)\n    at tryModuleLoad (module.js:446:12)\n    at Function.Module._load (module.js:438:3)\n    at Module.require (module.js:497:17)\n    at require (internal/module.js:20:19)\n    at Object. (/src/main/resources/bin/node_modules/web3-provider-engine/index.js:4:25)\n    at Module._compile (module.js:570:32)\n    at Module._extensions..js (module.js:579:10)\n    at Object.require.extensions.(anonymous function) [as .js] (/src/main/resources/bin/node_modules/babel-register/lib/node.js:152:7)\n    at Module.load (module.js:487:32)\n    at tryModuleLoad (module.js:446:12)\n    at Function.Module._load (module.js:438:3)\n    at Module.require (module.js:497:17)\n    at require (internal/module.js:20:19)\n    at Object. (/src/main/resources/bin/node_modules/truffle-hdwallet-provider/index.js:3:22)\n    at Module._compile (module.js:570:32)\n    at Module._extensions..js (module.js:579:10)\n    at Object.require.extensions.(anonymous function) [as .js] (/src/main/resources/bin/node_modules/babel-register/lib/node.js:152:7)\n    at Module.load (module.js:487:32)\n    at tryModuleLoad (module.js:446:12)\n    at Function.Module._load (module.js:438:3)\n    at Module.require (module.js:497:17)\n    at require (internal/module.js:20:19)\n    at Object. (/src/main/resources/bin/truffle-config.js:5:26)\n    at Module._compile (module.js:570:32)\n    at Object.Module._extensions..js (module.js:579:10)\n    at Module.load (module.js:487:32)\n    at tryModuleLoad (module.js:446:12)\n    at Function.Module._load (module.js:438:3\n```. @cgewecke \nthis solves it: truffle-hd-walletprovider to 0.0.3, and it looks like both truffle test and code coverge is working\nJust for your record, if other people ask the same thing, this is what i have now:\n     \"truffle-hdwallet-provider\": \"0.0.3\",\n    \"ganache-cli\": \"6.1.0-beta.4\",\n    \"solidity-coverage\": \"^0.5.0\",\n    \"ethereumjs-testrpc\": \"^6.0.3\". ",
    "mrwillis": "Is this supported?\nEDIT: Spoke to @gnidan and this is not supported unfortunately. Env vars is an option probably.. @gnorbsl I have the exact same issue - transaction is successful but truffle returns this error. Have you found a work-around?\n. The best solution I have is to just split up the migrations into 1-2 transactions each and if one of them fails due to this error simply truffle migrate --network main again. The issue is the dry run does not save state it seems. I have similar permission-esque stuff and call initialize type functions in the migrations and they do not seem to persist. I would keep the issue open.. Similar issue here:\nhttps://github.com/trufflesuite/truffle/issues/1612#issuecomment-459273927. I notice also the use of network names as [network]-fork can really mess up the logic if you have network-dependent logic.. ",
    "coventry": "Was the functionality @benjamincburns proposed in his commits unacceptable in some way? (Curious because I'm thinking of using it in a fork.). Would you accept a PR to correct this?. It's not exactly a bug, more like an oversight in the API. If you get back a BN, and want to use that in an amount, currently you need to explicitly convert it to a hex string or some similar solution, which is a bit of a pain.. ",
    "djneely": "If it helps just uninstalled 4.1.12 and re-installed 4.1.8 and everything is back in order and working.. Sounds good thanks!. ",
    "mushketyk": "I've restarted my machine, and now all tests are passing.\nThis is still an odd behavior though.. Hi @cgewecke \n\nI am running Ganache as a separate process\nNo\nNo\nNo\n\n. @cgewecke \nHere is my beforeEach method:\njs\n  beforeEach(async function() {\n    funding = await TestCrowdFundingWithDeadline.new(1, 10, beneficiary, {from: owner, gas: 2000000});\n  });\nIt just deploys a contract.\nFor migrations, for now I only have a default migration that is defined like:\n```js\nvar Migrations = artifacts.require(\"./Migrations.sol\");\nmodule.exports = function(deployer) {\n  deployer.deploy(Migrations);\n};\n```. @eggplantzzz My Truffle config is very straightforward:\njavascript\nmodule.exports = {\n    networks: {\n        ganache: {\n            host: \"localhost\",\n            port: 7545,\n            gas: 5000000,\n            network_id: \"*\"\n        }\n    }\n};\nIt worked fine with testing events in Truffle 4.x, but does not work with Truffle 5.x. Do you know if anything was changed in relation to this?\nI'll try to use the logs property instead.. ",
    "daithi-coombes": "I am having the same issue.\nunderTest:\n```solidity\npragma solidity ^0.4.24;\ncontract myContract{\naddress owner;\nuint balance;\n\nconstructor() public payable {\n    owner = msg.sender;\n    balance = msg.value;\n}\n\nfunction() public payable{\n    balance += msg.value;\n}\n\n}\n```\ntest suite:\n```solidity\npragma solidity ^0.4.24;\nimport \"truffle/Assert.sol\";\nimport \"truffle/DeployedAddresses.sol\";\nimport \"../contracts/MyContract.sol\";\ncontract TestMyContract {\nMyContract public underTest;\n  uint public initialBalance = 100 ether;\nfunction beforeEach() public{\n    underTest = MyContract(DeployedAddresses.MyContract());\n  }\nfunction testIsPayable() public {\n    address(underTest).transfer(1 wei);\n  }\n}\n```\nAlso seems my error is happending before the test cases are called:\nbash\n\"before all\" hook: prepare suite:\n     Error: sender doesn't have enough funds to send tx. The upfront cost is: 100672197500000000000 and the sender's account only has: 99295519300000000000\n      at Object.InvalidResponse (/home/daithi/.nvm/versions/node/v9.2.1/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/errors.js:38:1)\n      at /home/daithi/.nvm/versions/node/v9.2.1/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:86:1\n      at /home/daithi/.nvm/versions/node/v9.2.1/lib/node_modules/truffle/build/webpack:/packages/truffle-provider/wrapper.js:134:1\n      at XMLHttpRequest.request.onreadystatechange (/home/daithi/.nvm/versions/node/v9.2.1/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/httpprovider.js:128:1)\n      at XMLHttpRequestEventTarget.dispatchEvent (/home/daithi/.nvm/versions/node/v9.2.1/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:64:1)\n      at XMLHttpRequest._setReadyState (/home/daithi/.nvm/versions/node/v9.2.1/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:354:1)\n      at XMLHttpRequest._onHttpResponseEnd (/home/daithi/.nvm/versions/node/v9.2.1/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:509:1)\n      at IncomingMessage.<anonymous> (/home/daithi/.nvm/versions/node/v9.2.1/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:469:1)\n      at endReadableNT (_stream_readable.js:1054:12)\n      at _combinedTickCallback (internal/process/next_tick.js:138:11)\n      at process._tickCallback (internal/process/next_tick.js:180:9). Using v6.1.6\nHere's my stack:\nDebian 9 Stretch\nGanache CLI v6.1.6 (ganache-core: 2.1.5)\nTruffle v4.1.13. ",
    "SwJay": "@cgewecke solves my problem. \nEach time for a test, you consume initialBalance out of initial 100 ETH of Ganache account. If you set initialBalance to be 100, the test only passes the first time and you will have no ethers next time to run another test.. ",
    "iwkse": "Having a similar issue here when I run ganache-cli with --db for persistence.\nThe error is already on the Migrations contract, just running \n```\ntruffle migrate --network localnet\n```\nWithout --db it's going to be fine. Any hint?. ",
    "PochenriederAlex": "Happens to me too. In my case the test i was running had an incorrect amount in the value of the transaction (a javascript number with decimals) that made the transaction cost a lot and throw the error.. ",
    "khajaasmath786": "C:\\Users\\yyy1s41\\AppData\\Roaming\\npm\\truffle -> C:\\Users\\yyy1s41\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bund\nled.js\n+ truffle@4.1.13\nadded 81 packages in 18.767s\nPS C:\\Windows\\system32> truffle version\nC:\\Users\\yyy1s41\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:2380\n                    return this.Decryptor.create(ciph\n                                                 ^^^^\nSyntaxError: missing ) after argument list\n    at createScript (vm.js:80:10)\n    at Object.runInThisContext (vm.js:139:10)\n    at Module._compile (module.js:616:28)\n    at Object.Module._extensions..js (module.js:663:10)\n    at Module.load (module.js:565:32)\n    at tryModuleLoad (module.js:505:12)\n    at Function.Module._load (module.js:497:3)\n    at Function.Module.runMain (module.js:693:10)\n    at startup (bootstrap_node.js:191:16)\n    at bootstrap_node.js:612:3\nPS C:\\Windows\\system32>\nStil the same issue? I am on the node versions mentioned in earlier thread. is this causing any issues?. I didn't get the what is nvm use 8 does this still happen? You mean to say that I need to use version 8?\nSent from my iPhone\n\nOn Jun 27, 2018, at 2:58 PM, c-g-e-w-e-k-e-> notifications@github.com wrote:\n@khajaasmath786 It's possible - if you nvm use 8 does this still happen? We've seen a few unusual errors with Node 10.\nThe syntax error is coming from a dependency crypto.js, will investigate over there and see if there's a known issue...\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I have installed in other machine and was successful . Looks like way nodejs is installed is causing issues. Nodejs was reading from roaming profiles in system, was that the issue ?\n\nI did workaround by installing in other machine but would like to get solution for this as that would be our poc cluster\nThanks,\nAsmath\nSent from my iPhone\n\nOn Jun 28, 2018, at 10:07 AM, c-g-e-w-e-k-e-> notifications@github.com wrote:\nMore info: crypto.js is only used in truffle-contract-schema and was last updated 5 months ago, which makes it seem more likely that Node 10.5 is the source of the issue here.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "colus001": "I added comment but removed since I figured out somehow. But here's another question.\n1)  \"Why do we have two test environment. .js and .sol?\" \n2) \"Where can I find Assert.sol's full documentation?\"\nLet me understand better with truffle environment, please.. Thanks for the answer. Everything works fine finally @cgewecke except I don't know how to handle accounts in .sol and unlike .js test it seems I can't set the { from: owner } while send transaction.. Thanks for great answers @cgewecke \ud83d\udc4d . ",
    "mmezian": "Thank you CGEWECKE!\n@truffle team please you need to add important things like this on your documentation.... hi @cgewecke , thanks for your answer!\nUnlike contract deployment, I don't need these to run in strict sequence, that's why I'm trying to run them synchronously. \nI need it to be from one single account, as the contract verification requires those actions to be performed by the owner of the contract.\nDoes anyone have a workaround ? \nShould I setup a higher timeout, like 5 seconds, between each of them ? Which would be 500 seconds for 100... but it's fine. \nMaybe I should only do async ones for MAIN NET to avoid these issues\n. ",
    "LoomiDigital": "@cgewecke Hey, I'm also getting this issue when attempting to watch any variables. \nNot sure if it's due to the fact that some of the calculations are done from variables inherited from another contract.\nDo you happen to have any insights into the issue? As it stands I'm finding the debugger unusable.. ",
    "vindberg": "This also seem to be the case when using a single .sol file.. ",
    "anxolin": "I find this issue important for projects that have a dependencies on other projects with collisions in the name of the contracts.\nGeneral names as StandardToken, Token, etc. can appear in your project dependencies easily, so I guess it would be a good idea to have a namespace functionality in place.\nIn any case, if it's scheduled to v5.1, wouldn't be better to re-open the issue, so we can keep track of it?\n. Hi @gnidan ! Do you still plan to include this in 5.1? Do you know if there any progress regarding this issue?\nThanks!. @gnidan that's a really nice document! \nI'm not sure I understood correctly, the idea is to use as part of the new schema new abstractions to differentiate between \"Contract types\" and \"Contract instances\" of it?\nI think this would solve this issue, but would it handle the problem of the \"name collisions\", I mean, if you depend on two projects that happen to use 2 contracts with the same name (i.e. Token), truffle will take those, compile them and put it in the build/contracts. So there we have a collision.\nDoes this solution solve this other issue?\n. Thanks for the info @gnidan! looking forward to see this new version already! \nIs there a rough non-binding estimate time? (just curious) . Hehehhe, I understand, I hope you guys find the time to close the scope, :), maybe there\u2019s something smaller that can be done and set things up in the right direction, i.e. something like making a new version, with the new format, but not implementing any of the new features but offers backwards compatibility. ",
    "fainashalts": "@CruzMolina is this issue resolved now? Wondering if we can close it. . Hi @zak100 are you still having trouble with this error? This error may bubble up when something is wrong with the way conditions in a require statement are being met. For more info see this similar resolved issue: https://github.com/trufflesuite/truffle/issues/884\n. I see the failed Travis tests, pretty sure this is happening because there's a constructor that needs to be stubbed/mocked. Working on that now!. Looks good to me! Is there an issue to connect this PR to?. Nice! This is to handle undefined errors in build?. +1 Looks good to me!. Hi @shumail92, it looks like @jleeh has addressed your question (thanks!). I'm going to close this issue, but please feel free to open another if something else comes up!. Hi, and thanks for reaching out about this issue! I believe the actual problem is in the \"Network state unknown\" portion of the error you're getting. You seem to be trying to put your private network info into networks.development, but you should have a networks.private with this information and be using that if you're using the private network. The key here is you want your migration to be accessing the correct network. \nI'm going to close this issue since it doesn't seem the problem is due to Truffle's codebase. I hope my comment is helpful and feel free to open a new issue if you feel I've missed something!\n. Hi @lakamsani, thanks for reaching out about this. I cloned your repo to see what I could do to help. There appear to be a few things going on here so I hope you don't mind but I'll walk you through what I was able to address: \nFirst, you should make sure that you are actually connected to web3. I didn't see a requires in the 2_Test-Crowdsale.jsfile, and when I added it I was able to get the latest block times, which were returning null before and throwing this error. I just required it locally to test with ganache-cli, but of course you can connect it to whatever blockchain you are using. \nSecond, I got an error about bignumber being missing, so I installed it and required it as well. I needed to convert cap eth and goal eth in 2_Test-Crowdsale.js  to big numbers in order for them to be accepted by the deployment function.\nUnfortunately, once this was resolved, I got the following error: \nError: while migrating TestCrowdsale: Returned error: VM Exception while processing transaction: revert\n    at /Users/fainashalts/truffle-dev/truffle/packages/truffle-deployer/src/deployment.js:363:17\n    at process.internalTickCallback (internal/process/next_tick.js:77:7)\nI have a hunch this is similar to what was going in this issue, so you may want to pursue a similar solution: https://github.com/trufflesuite/truffle/issues/884\nAlso, I am seeing a test failure for Contract: ICO Signature and Platform Tests that TypeError: web3.currentProvider.sendAsync is not a function\nYou may need to do something different since Truffle5 uses the newest version of Web3, so check out the docs: https://web3js.readthedocs.io/en/1.0/web3-eth.html#currentprovider\nIf that doesn't help, you may want to try the solution here: https://github.com/ethjs/ethjs/issues/6\nI hope some of this is helpful, and if you continue to have a problem with the specific error here after following these steps, please feel free to reopen this issue with more information. Thanks and I hope you're having a great time at DevCon4!\n. Hi @lakamsani, happy to help. I don't have the code anymore as I was just digging around to see if this is an issue with Truffle v5 that needs addressing in our code. The steps above should get you most of the way there though!\nYou are right, I believe web3 does need to be required explicitly. Also, I forgot to mention in my previous comment that the web3.eth.getBlock('latest') api call returns a promise, so you'll need to wrap it in an async/await to ensure you can get that value.\nHere is a link to the release notes for this version of Truffle, with loads of information on different features that have been added: https://github.com/trufflesuite/truffle/releases \n. Hi @lakamsani, unfortunately we don't have the bandwidth to troubleshoot questions that are not directly related to issues/bugs in Truffle's codebase. The error you posted is likely due to web3 still not being connected as you have it written, also you should make sure you have a blockchain running on 8545 if that is what you're using to connect web3. \nGitter is a great place to ask for help with questions that are more specific to your own code, I highly recommend it! https://gitter.im/ConsenSys/truffle. Hello, thanks for reaching out! I am not able to reproduce this issue. Without any code to look at it's a difficult to figure out why you are getting this error. \nOn first glance, I wonder if you have required your Election contract appropriately. It may help to try this out with a Truffle box so you can see how all the pieces are supposed to work. Perhaps try truffle unbox metacoin in a separate empty directory and look at how metacoin is required, etc. \nI'm going to close this issue as I cannot to reproduce it, but if you are unable to resolve it or would like to provide more information, feel free to open a new issue in the future.. Hi there, I was not able to reproduce this issue. I do believe that the advice in #542 is correct regarding your need to fix the path setup to ensure you can access truffle appropriately. \nThis stackoverflow discussion should make things a lot clearer: https://stackoverflow.com/questions/14803978/npm-global-path-prefix\nBasically, you'll need to check if your path is correct for npm and truffle. When I runnpm config get prefix in my terminal I get /usr/local, which should be the default on a mac. If you are using a different operating system, I think the stackoverflow discussion above should be very helpful in figuring this out. \nI'm going to close this issue as it doesn't look to be a problem with the Truffle code, but if you find that is not the case or run across a different problem, please feel free to open a new issue. Thanks!. Looks good to me! Cool use of promisify and I don't feel like I see whilst too often either! . Hi @mudgen, I may know what's going on here. Will take a look soon and get back to you!. hi @mudgen, I'm glad you found a temporary fix! What's actually going on is that the regex there isn't accounting for windows file paths properly. Since you are the one that located the problem, if you'd like to make a PR, it would be to fix the regex here: https://github.com/trufflesuite/truffle/blob/develop/packages/truffle-core/cli.js#L92\nLet me know if you'd like to take a crack at it, otherwise I'll do it and it will go in the next release.. No problem @mudgen, I've got it. Thanks for pointing this out, we appreciate it!. @PizBernina @mudgen I have fixed this, it should  be live in our next release. @mudgen's fix should take care of it in the short term. Thank you for bringing this to our attention! \n@PizBernina, the reason you saw this happen in a different command is because the regex error only throws inside of another error. So you likely had an error in your migration somewhere. Once the regex is fixed you'll be able to see what the actual error was.. This issue is fixed as of v5.0.8. Closing, thank you for finding and reporting it!. Aw thanks @mudgen and @PizBernina! Glad to help and to be working on such an awesome set of tools! :) . @cruz I had to spoof the directory name to test with, but I\u2019m 99% sure this fix will do it!. I really really dislike how many times I use the word \"mnemonic\" in this pull request! So very open to suggestions for renaming basically all of these things. . I copied this way of generating a mnemonic from ethagen (https://github.com/benjamincburns/ethagen/blob/master/wallet.js), and read up on crypto.randomBytes in the process. It should be cryptographically secure enough from what I read but I wanted to point it out in case I'm wrong about that.. Yeah, I like the descriptiveness of that. Thanks!. I wish! It does formatting to line the params up, but I put the docs in manually. I use Sublime right now but thinking about switching to Atom or Webstorm if they have better JS packages.. @eggplantzzz just jsdocs, documentation for modules and functions. I used docs a lot when developing in PHP, its sort of habit for me to add them to new files!. I saw other tests in the repo adding a timeout longer than the default (I think 2000?), so I added it in to be safe. Do you think I should remove it?. oh yeah, will do, thanks!. why shorten this to \"info\"? \"information\" may be more understandable to people for whom English is not their first language since info is slang.. is there a reason the Contracts and BuildError constants are capitalized in the first letter or should they start with a lowercase?. should this be childProcess for consistency?. Is this actually deprecated? If so might be a good time to remove.. can we change these to const instead of var?. Ah, that makes sense. Will keep that in mind, thanks!. I like it abstracted -- makes it clearer what's happening. I wonder if there is any way to move this logic into the addProp function, or would that just make things messier? I'm just thinking since you are already checking there whether you need to account for the path anyway?. I put this here instead of making a separate executable file. If this is a bad idea and should be put elsewhere please let me know.. I know! I tried to remove this like 3 times... :/. I actually had it that way originally, but when the prompt gets run the \"return done()\" gets called before  it has time to resolve. Setting the if statement avoids that. Is there a different solution maybe?. Love it! I feel like if I look at my own code too long I'm bound to miss stuff like this.. So I am, actually. In the sense that I don't want the inquirer prompt to run, which happens in the background of several of these tests. This was a blanket way to ensure it didn't happen.. Yeah, I tried that but then my test throws \"TypeError: done is not a function\" -- thoughts on how to address? This was a workaround for that issue.. Yes, I send it! This is currently being added on inside of google-analytics.js before sending the event (it will be part of the error string if there is one, otherwise sent as an event label for init and unbox), though I'm refactoring that file to move the child process out into its own file.. Totally fine with me to change this, good call @eggplantzzz . @eggplantzzz I'm confused why this code is reviewed in here -- was it changed somehow from my PR? Just want to be sure I understand. \nAs for the stub, my thinking was that this test was hitting accountsInfo.getOrGenerateMnemonic(), which is not being stubbed. When that runs, it will hit Configstore within that function, which I have stubbed in this file. I am testing that it hits Configstore and that the value it receives through the function is the same as what I stubbed. Does that make sense? . Oooh I see it was prettified? I thought that only happened if changes to the file were made?. It's actually the package on which the error was thrown originally: \n~~~~  error /Users/fainashalts/truffle-dev/truffle/node_modules/go-ipfs-dep: Command failed.\nExit code: 1\nCommand: node src/bin.js\nArguments: \nDirectory: /Users/fainashalts/truffle-dev/truffle/node_modules/go-ipfs-dep\nOutput:\nfs.js:25\n'use strict';\n^\nReferenceError: internalBinding is not defined\n    at fs.js:25:1\n    at req_ (/Users/fainashalts/truffle-dev/truffle/node_modules/natives/index.js:137:5)\n    at Object.req [as require] (/Users/fainashalts/truffle-dev/truffle/node_modules/natives/index.js:54:10)\n    at Object. (/Users/fainashalts/truffle-dev/truffle/node_modules/unzip/node_modules/graceful-fs/fs.js:1:99)\n    at Module._compile (internal/modules/cjs/loader.js:707:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:718:10)\n    at Module.load (internal/modules/cjs/loader.js:605:32) ~~~~ \n. are there any labels we want to add here, that we never want to be marked as stale? maybe infrastructure? other ones?. Happy to change the wording for this.. These are based on what our labels are in Github, so not sure why one has an s and one doesn't!. @gnidan I will add a comment. I realized this, but also felt like it wasn't worth adding more code to account for that. \n@eggplantzzz I did originally make it more specific but it is not always /truffle/packages. Sometimes it is truffle/build and possibly other iterations as well. This seemed like the most efficient way to catch the vast majority of cases.. @eggplantzzz I looked into this and apparently on some machines the file path uses backslashes instead of forward slashes? Just based on the errors I see in Analytics right now. So I think it's probably better to leave this alone and try to keep it simple if we can. Happy to revisit after we see some more errors in case this solution is woefully inadequate!. makes sense. removed!. You know what, it totally does. I got a little overzealous when I was cleaning up other extraneous white spaces, haha. . ",
    "mattiyat": "@cgewecke My apologies! \nThe repo: https://github.com/tcoulter/truffle-bug.git \nEdit: Updated the steps above to clone this repo.. ",
    "ekpyron": "And to already give you a heads-up: We plan to remove the payable field as well, since it is the same as stateMutability == 'payable'.. @gnidan (Already mentioned on gitter, but I'll comment here as well for reference):\nIf we manage to get external projects to update to be compatible soon enough, we'd like to remove both payable and constant in 0.5.0.. @gnidan I finally got around to put this together.. This needs public as well. (It seems it was added after this PR and not adjusted while merging).. ",
    "moshebeeri": "Yep it solved it, should not be any .call in async \nBut the the docs shows the wrong method\nsee https://truffleframework.com/docs/getting_started/javascript-tests\nThere is an example with call (lets call it a docs bug \ud83e\udd47 )\nlet balance = await instance.getBalance.call(accounts[0]);\n``\n  it('should deposit and reflect on user balance', async () => {\n    await myToken.deposit(user1, 20000)\n    let balance = await myToken.balanceOf(user1)\n    assert.equal(balance.valueOf(), 20000,The balance 20000 was not reflected.`)\n  })\nit('should deposit and reflect on user balance Sync', () => {\n    return MyToken.deployed().then(function (instance) {\n      myToken = instance\n      return myToken.deposit.call(user1, 20000)\n    }).then(function () {\n      return myToken.balanceOf.call(user1)\n    }).then(function (user1balance) {\n      assert.equal(user1balance.valueOf(), 20000, 'The balance 20000 was not reflected.')\n    })\n  })\n```. ",
    "mpetrunic": "@gnidan It's great that this is solved in 5.x. I already pushed my fork to npm to fix my project build. But it could be quite nice to have 4.X branch until 5.x release stabilize. So this could be a patch for version 4.1.14. I have to figure out how to fix tests though :)\nI'm not sure why truffle migrate command doesn't exit manually after artifactor stores everything.The main problem is that CI timeouts waiting for migrate to complete.. It hangs indefinitely, so increasing timeout doesn't change anything.\nI will rework this PR to cherry-pick that commit. Should I add --no-exit option (that would cause merge conflict also)?. Woops, I had to rewrite history so it need another PR.. This is weird, I pushed commits to my forks develop branch but they ain't showing here.... Amending last commit seems to fix the bug. Here you go :). ",
    "Pneumaticat": "Does that mean it's impossible to debug contracts on Kovan, a Parity-only network? Is there an alternative way to debug the transaction?. ",
    "chriseth": "Would be really great to have this.... ",
    "igor-dulger": "@gnidan I'm interested and I thought that I might try to help you by doing it  by myself, if you don't mind. If you give me some guidance where to look, what architecture rules you have and \"assign\" this feature to me I will implement it. It won't be fast, but I want to do it.  . I think json should look like this \n[\n        {\n            file: \"MyTest.json\",\n            tests: [\n                {\n                    name: \"should delete a product\",\n                    transactions: [\n                        \"standart transaction representation from the console\",\n                        .....\n                    ]\n                },\n                {\n                    name: \"should add a product\",\n                    transactions: [\n                        \"standart transaction representation from the console\",\n                        .....\n                    ]\n                },\n                ....\n            ]\n        },\n        ....\n    ]. ",
    "lrettig": "I noticed that my Wasm bytecode is correct inside the contract artifact JSON but it's being mangled inside Migrations.json:\n```\n\ngrep bytecode build/contracts/ewasm_as_wrc20.json\n  \"bytecode\": \"0x0061736d0100000001140460000060017f017f60027f7f017f60027f7f0002130108657468657265756d0672657475726e00030305040102000005030100010633097f0041030b7f0041080b7f0041070b7f004180808080040b7f0141000b7f0141000b7f0041080b7f0141000b7f004190010b071102066d656d6f72790200046d61696e00030a9002047e01067f200023034b0440000b2305210120012000220241012203200220034b1b6a23026a2302417f737121043f002105200420054110744b0440200420016b41ffff036a41ffff03417f737141107621022005220320022206200320064a1b2103200340004100480440200240004100480440000b0b0b2004240520010b2601017f200028020021022001200228020041007649047f200220014100746a2d000805000b0b5401037f23074504401004410124070b027f41f2002100200010010c000b21010240410021020340200241f20048450d01200120026a418801200210023a0000200241016a21020c00000b000b200141f20010000b1300230823026a2302417f73712404230424050b0b9501020041080b800172000000000000000061736d0100000001090260027f7f0060000002190108657468657265756d0c73746f7261676553746f72650000030201010503010001071102066d656d6f72790200046d61696e00010a26012401027f418005210041a005210120004104360200200141effd023602002000200110000b000000000000004188010b080800000072000000007e046e616d6501770500147e6c69622f657468657265756d2f66696e69736801267e6c69622f616c6c6f6361746f722f6172656e612f5f5f6d656d6f72795f616c6c6f63617465021a7e6c69622f61727261792f41727261793c75383e235f5f6765740313617373656d626c792f696e6465782f6d61696e04057374617274002b10736f757263654d617070696e6755524c19756e746f7563686564577261707065722e7761736d2e6d6170\",\ngrep bytecode build/contracts/Migrations.json\n  \"bytecode\": \"0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506102f8806100606000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630900f01014610067578063445df0ac146100aa5780638da5cb5b146100d5578063fdacd5761461012c575b600080fd5b34801561007357600080fd5b506100a8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610159565b005b3480156100b657600080fd5b506100bf610241565b6040518082815260200191505060405180910390f35b3480156100e157600080fd5b506100ea610247565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561013857600080fd5b506101576004803603810190808035906020019092919050505061026c565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561023d578190508073ffffffffffffffffffffffffffffffffffffffff1663fdacd5766001546040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561022457600080fd5b505af1158015610238573d6000803e3d6000fd5b505050505b5050565b60015481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102c957806001819055505b505600a165627a7a723058205e3ffec98c49efa02a755b867db84459cf3aa0b166693c9477f96b608f8e1bf30029\",\n```\n\nAny idea what could be causing this? . I think that's the solc bytecode for contracts/Migrations.sol - I don't know enough Truffle internals to understand how migrations are handled but I suppose as long as the client speaks both EVM 1.0 and Ewasm then the migration contract could remain in solc/EVM.. Okay so ignore my previous question, I'm just demonstrating my ignorance about how Truffle works. I just needed to add a second migration for my contract proper. It appears to be working.. Another thought: if we want to be thorough about adding support for Ewasm, then instead of using evm properties like bytecode, sourceMap, etc. it probably makes more sense to use the Wasm properties laid out here: https://github.com/ethereum/solidity/commit/4b5639bf63f2c86604cb55387324e00759a0b1f2#diff-d7b1fb9ae448539124dcfd3d09ad6e60R124 e.g. wasm, wast, etc. and maybe add these to the Truffle contract schema under wasm.. @axic @chfast any thoughts?. In case it helps I'm running truffle migrate in this project: https://github.com/lrettig/ewasm-as-wrc20. Thanks, that worked. What on earth is web3-one?. If you change toString() to toString('hex') here, it (at least partially) fixes the bytecode issue.. Here is a slightly more sophisticated approach: https://github.com/lrettig/truffle/commit/8b50a64b25b9ff190740a325fa614232e085f8bb. ",
    "Freyert": "May I propose beta 35? It includes a fix that allows for websocket communication with basic auth headers.. ",
    "fubuloubu": "Yeah, we just fixed that snap install in our documentation haha.\nI will loop back on docker hub. Wasn't aware that wasn't being updated. Note: @maurelian has some prior work with this: https://github.com/maurelian/truper. ",
    "Pet3ris": "The correct solution was to use import Debugger = require('truffle-debugger');.. ",
    "ldub": "Definitely not using lodash and the bug can be reproduced with any identifier, not just zip:\nArray.prototype.ldubFunc = function(abc) {\n    this.map();\n}\nAs for why I suspect webpack\n ldubFunc does not overload anything\n ldubFunc is never called\n webpack supports transpiling and stack trace contains webpack in  truffle/build/webpack:/~/event-pubsub/es5.js:74:1\n actual error is at at Client.Array.ldubFunc (/Users/lev/dev/truffle-bug-repro/test/simplestorage.js:4:10)\n  * it seems like my prototype function is being put onto something called Client.Array instead of Array, which to me smells of a possible transpilation issue\n  * still not sure how ldubFunc can even be called anywhere\nBut the reality is that I have a fairly poor understanding of modern web technologies like webpack and babel and the above list is mostly guesswork. I don't really know where to start digging to figure out the true cause of the bug, if you have any pointers I'd be happy to do some exploration.\nI suspect that the fact that truffle test works but not when you run node_modules/.bin/truffle test is an important point... what is the difference between the truffle I can install with npm install -g and the truffle thats installed in the node_modules folder?. @gnidan\n[nix-shell:~/dev/eth/eth/truffle-bug-repro]$ ./node_modules/.bin/truffle version\nTruffle v4.1.13 (core: 4.1.13)\nSolidity v0.4.24 (solc-js). +1 Same issue here, also this appears to be the same issue as discussed in  https://github.com/trufflesuite/truffle/issues/1051 and https://github.com/trufflesuite/truffle-debugger/issues/75. ",
    "chenweiyj": "Yes, in node v6 it only supports mocha 3.5.3. By using node v8, it is solved, and I can use mocha 4 now.. ",
    "danielfx90": "@gnidan Sounds great! We'll open a PR at @wibsonorg as soon as we meet our next deadline.. ",
    "naure": "Indeed it's using constructor instead.\nLooking forward to the timeoutBlocks limit too.. ",
    "karapish": "The call with privateFor either hangs or returns (node:60616) UnhandledPromiseRejectionWarning: Error: Invalid JSON RPC response: \"\". When I call a function from JS then Quorum's log on the submission node contains the following spew\nINFO [08-09|18:59:57] sent private tx                               data=69da2463f186....\nINFO [08-09|19:03:06] sending private tx                       data=e7c890f800....\n-----END-----\nBut when I call the same function directly from truffle console 'sending private tx' is followed by TX checkpoints in the log. \nINFO [08-09|18:59:57] sent private tx                               data=999963f186....\nINFO [08-09|19:03:06] sending private tx                       data=55555f800....\nINFO [08-09|19:03:06] Submitted transaction                    fullhash=0x5d1bc8ab3b32c6f7194929fc57ec764f6d7544bfd008c79b7ea8e86c6c3fd9c6 recipient=0xd77e6d7c7eE16b83aCBB167d2989FC4E07759174\nINFO [08-09|19:03:06] QUORUM-CHECKPOINT                        name=TX-CREATED      tx=0x5d1bc8ab3b32c6f7194929fc57ec764f6d7544bfd008c79b7ea8e86c6c3fd9c6 to=0xd77e6d7c7eE16b83aCBB167d2989FC4E07759174\nINFO [08-09|19:03:06] QUORUM-CHECKPOINT                        name=TX-ACCEPTED     tx=0x5d1bc8ab3b32c6f7194929fc57ec764f6d7544bfd008c79b7ea8e86c6c3fd9c6\nINFO [08-09|19:03:06] Imported new chain segment               blocks=1 txs=1 mgas=0.000 elapsed=3.670ms   mgasps=0.000   number=56 hash=f438a7\u2026953b43\nINFO [08-09|19:03:06] QUORUM-CHECKPOINT                        name=BLOCK-CREATED   block=f438a7323137d1f29c79195169f0f92ae2ed683b5d6e26115a0365af92953b43\nINFO [08-09|19:03:06] persisted the latest applied index       index=64. @cgewecke The link to the examples you shared demonstrates how to issue private transactions as part of 'truffle deploy' and 'truffle exec'. I don't want to call any commandline tools. I want to send a private transaction from a standalone nodejs service. This service imports 'truffle-contract' and 'web3' packages.\n```javascript\nimport Web3 = require('web3');\nimport contract = require('truffle-contract');\nimport myArtifact = require(\"./build/contracts/artifact.json\");\nlet myContract = contract(myArtifact);\nlet myContract.setProvider(new Web3.providers.HttpProvider('http://localhost:22006'));\nlet myContractInstance = await myContract.at('address from truffle deployer');\nawait myContractInstance.myFunction(10, {privateFor:[\"key of node at port 22001\"]});  // <-- doesn't work\n. I can share truffle.js but my deployment works absolutely fine. I can successfully call from a migration js \nmyContractInstance.myFunction(10, {privateFor:[\"key of node at port 22001\"])};javascript\nmodule.exports = {\n  // See http://truffleframework.com/docs/advanced/configuration\n  // to customize your Truffle configuration!\n  networks: {\n    development: {\n      host: \"127.0.0.1\",\n      port: 9545,\n      network_id: \"\"\n    },\n    ganache: {\n      host: \"127.0.0.1\",\n      port: 7545,\n      network_id: \"\"\n    },\n    node1: {\n        host: \"127.0.0.1\",\n        port: 22000, // was 8545\n        network_id: \"\", // Match any network id\n        gasPrice: 0,\n        gas: 4500000\n    },\n    node2:  {\n        host: \"127.0.0.1\",\n        port: 22001,\n        network_id: \"\", // Match any network id\n        gasPrice: 0,\n        gas: 4500000\n    },\n    node3:  {\n        host: \"127.0.0.1\",\n        port: 22002,\n        network_id: \"\", // Match any network id\n        gasPrice: 0,\n        gas: 4500000\n    },\n    node4:  {\n        host: \"127.0.0.1\",\n        port: 22003,\n        network_id: \"\", // Match any network id\n        gasPrice: 0,\n        gas: 4500000\n    },\n    node5:  {\n        host: \"127.0.0.1\",\n        port: 22004,\n        network_id: \"\", // Match any network id\n        gasPrice: 0,\n        gas: 4500000\n    },\n    node6:  {\n        host: \"127.0.0.1\",\n        port: 22005,\n        network_id: \"\", // Match any network id\n        gasPrice: 0,\n        gas: 4500000\n    },\n    X:  {\n        host: \"127.0.0.1\",\n        port: 22006,\n        network_id: \"*\", // Match any network id\n        gasPrice: 0,\n        gas: 4500000\n    }\n  }};\n```. Yes, I have await in front of it.. Yes, there must be something you guys do to make private tx work during the deployment. I also thought that it's the gas price. Similar to https://github.com/web3j/quorum/blob/defe1af8f0cca87200454903aaf08007124dec8a/src/main/java/org/web3j/quorum/methods/request/PrivateTransaction.java#L22. \nCan you point me to the code in truffle which does account unlocking and gas price overrides? . It works now!\nfunction makeOptions(from, privateFor) {\n    return {from: from, privateFor: privateFor, gas: 900000, gasPrice: 0};\n}. @cgewecke Please advise on what you exactly mean by 'client'. Maybe you meant the version of truffle? Or version of web3.js. Quorum from Azure's marketplace https://azuremarketplace.microsoft.com/en-us/marketplace/apps/enterprise-ethereum-alliance.eea-single-member?tab=Overview . ",
    "chfast": "The 0x means empty bytes. What would you like to see there? ''?. This should address the problem in Aleth: https://github.com/ethereum/aleth/pull/5188.. I'm confused now because geth is also returning 0x for empty code of a contract. \ncurl -X POST -H 'Content-Type: application/json' --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getCode\",\"params\":[\"0x0000000000000000000000000000000000000000\", \"latest\"],\"id\":67}' localhost:8545\n{\"jsonrpc\":\"2.0\",\"id\":67,\"result\":\"0x\"}. I expect the problem is with some RPC method returning an integer, not bytes.. So the problem is different. Truffle executes eth_call and incorrectly expects the answer to be an uint256, but the output is empty. So in the end it tries to convert \"0x\" to an integer and that fails.\nChanging \"0x\" to \"\" somehow satisfies the integer converter which probably interprets that as 0. But this only hides the true problem.\n```\n\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 5,\n  \"method\": \"eth_call\",\n  \"params\": [\n    {\n      \"from\": \"0xefadf166849f06eee4b44ddb78e4162580f436b1\",\n      \"gas\": \"0x6691b7\",\n      \"gasPrice\": \"0x4a817c800\",\n      \"to\": \"0x277fb28c92c4cda22b8c972a48de6e6f6ccadec4\",\n      \"data\": \"0x445df0ac\"\n    },\n    \"latest\"\n  ]\n}\n <   {\n <     \"id\": 5,\n <     \"jsonrpc\": \"2.0\",\n <     \"result\": \"0x\"\n <   }\nError: Couldn't decode uint256 from ABI: 0x\n    at SolidityTypeUInt.formatOutputUInt (/Users/lanerettig/.nvm/versions/node/v8.6.0/lib/node_modules/truffle/build/webpack:/~/web3-eth-abi/src/formatters.js:174:1)\n    at SolidityTypeUInt.SolidityType.decode (/Users/lanerettig/.nvm/versions/node/v8.6.0/lib/node_modules/truffle/build/webpack:/~/web3-eth-abi/src/type.js:252:1)\n    at /Users/lanerettig/.nvm/versions/node/v8.6.0/lib/node_modules/truffle/build/webpack:/~/web3-eth-abi/src/index.js:327:1\n    at Array.forEach ()\n    at ABICoder.decodeParameters (/Users/lanerettig/.nvm/versions/node/v8.6.0/lib/node_modules/truffle/build/webpack:/~/web3-eth-abi/src/index.js:326:1)\n    at Contract._decodeMethodReturn (/Users/lanerettig/.nvm/versions/node/v8.6.0/lib/node_modules/truffle/build/webpack:/~/web3-eth-contract/src/index.js:459:1)\n    at Method.outputFormatter (/Users/lanerettig/.nvm/versions/node/v8.6.0/lib/node_modules/truffle/build/webpack:/~/web3-eth-contract/src/index.js:812:1)\n    at Method.formatOutput (/Users/lanerettig/.nvm/versions/node/v8.6.0/lib/node_modules/truffle/build/webpack:/~/web3-core-method/src/index.js:163:1)\n    at sendTxCallback (/Users/lanerettig/.nvm/versions/node/v8.6.0/lib/node_modules/truffle/build/webpack:/~/web3-core-method/src/index.js:467:1)\n    at /Users/lanerettig/.nvm/versions/node/v8.6.0/lib/node_modules/truffle/build/webpack:/~/web3-core-requestmanager/src/index.js:147:1\n    at /Users/lanerettig/.nvm/versions/node/v8.6.0/lib/node_modules/truffle/build/webpack:/packages/truffle-provider/wrapper.js:101:1\n    at XMLHttpRequest.request.onreadystatechange (/Users/lanerettig/.nvm/versions/node/v8.6.0/lib/node_modules/truffle/build/webpack:/~/web3-providers-http/src/index.js:77:1)\n    at XMLHttpRequestEventTarget.dispatchEvent (/Users/lanerettig/.nvm/versions/node/v8.6.0/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:64:1)\n    at XMLHttpRequest._setReadyState (/Users/lanerettig/.nvm/versions/node/v8.6.0/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:354:1)\n    at XMLHttpRequest._onHttpResponseEnd (/Users/lanerettig/.nvm/versions/node/v8.6.0/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:509:1)\n    at IncomingMessage. (/Users/lanerettig/.nvm/versions/node/v8.6.0/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:469:1)\n    at emitNone (events.js:110:20)\n    at IncomingMessage.emit (events.js:207:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)\n``. It might be also that theeth_callis broken and it does not return what it should be. But I need more information about what's under the0x277fb28c92c4cda22b8c972a48de6e6f6ccadec4`.\n\nThe full log: https://gist.github.com/lrettig/89d778cbd51c35b1ad28809bdef6d1bd.\nThe full log for geth is completely different: https://gist.github.com/lrettig/fccf0f9e136bbdd858fe93d0102da8b4.\nIs this because of the network id (66 vs 1) in the first RPC call?. ",
    "LiorRabin": "@cgewecke thanks for the quick response, will wait for the new version :). ",
    "marc0olo": "I am using truffle 5 now and am still very confused about that topic. Haven't found anything about the new TruffleContract features regarding testing of events.\nHappy to have found this issue finally \ud83d\ude04 . ",
    "dwardu": "Thanks @cgewecke!. Fantastic @cgewecke. It works. Thanks for letting me know!. ",
    "sogoiii": "cool, i made those changes.. Yea, I didn't push before I left. . Yea, I checked out truffle@next, linked truffle solidity loader to my version of Truffle Webpack Box and it all ran. \nThe way the loader works is by manually triggering the truffle migration command. I don't think you guys changed anything amount how to trigger a migration. I could be mistaken though. \nThis pull request is the same one as the \"importing multiple Solidity files bug\". The only difference is the required version of truffle-config and truffle-core packages. . @gnidan sure that is another way to do it. As long as the truffle packages are updated correctly and the versions are maintained. \nI think we can keep a version that supports truffle 4 directly.\n\nTruffle Solidity Loader Version < 1.0.0 supports Truffle 4\nTruffle Solidity Loader version >= 1.0.0 supports Truffle 5\n\nOr we can simply have one version that supports both truffle versions. . done. done. There are a few edge cases, but otherwise its supported. https://node.green/#ES2015-syntax-destructuring--declarations . I disagree. When doing npm install the user will be told that they have an unmet peer dependency. They would then need to manually add the two packages. With yarn, its even worse, you don't event get a warning until you run it. . Well even if truffle is installed, the project may not run. I think most people have truffle installed globally, not locally. Which means the peer dependency will not be met. \nFor example, I have truffle installed globally and i got an error when i changed to a peer dependency.. ",
    "eswarasai": "Can't wait to see this one merged and released :). ",
    "subramanianv": "Is anybody working on this issue ? I would like to take this up if its open. ",
    "lbthomsen": "I am curious why this one was closed while not fixed.. ",
    "AtlasQuan": "\nI am curious why this one was closed while not fixed.\n\nI met the same problem. But then I followed the guide in @gnidan's comment and reinstalled the truffle, and I successfully fixed it.. I successfully sovle it by the way @FlashBlaze referred to. \nJust a comment, I guess the reason why this promblem appear is because at the beginning, the truffle was installed by sudo persmission. Then when you use the regular user permission, this problem will happen.\n(Honestly, I believe except using root permission, there's supposed to be more 'beautiful' solutions. But I havn't known yet.)\nBut I could be wrong. Welcome to your criticism.. ",
    "bliotti": "As a last resort, sudo truffle compile should.. ",
    "m0pu": "I just reinstall truffle, global, on a fresh ubuntu system and the behavior is the same.\nAs a fix, I create manually the following directory: \"/usr/lib/node_modules/truffle/node_modules/.cache/truffle\" with the command:\nsudo mkdir -p /usr/lib/node_modules/truffle/node_modules/.cache/truffle. The -p allows me to create the .cache and its sub directory truffle at once.\nIMHO, the installation must care about this directories.\nUnder these circumstances, this issue cannot be considered closed.. ",
    "ubaid-qureshi": "Everyone including me is still having the same issue, It should not have been closed. It is solved for me \nsubdirectories in node_modules should have uniform ownership \nBasically, I first ran \nsudo chown -R <username>  <node modules locations>\nand then sudo npm install truffle\n. ",
    "Maushundb": "\nI couldn't reproduce this - do you have an example?\n\nSomething along the lines of:\n```\nconst waitForEvent = async (contract, ...) => {\n  return new Promise(async (resolve, reject) => {\n    const id = Math.random();\n    const cb = event => {\n      console.log(id);\n      contract.MyEvent().off('data', cb);\n      resolve(event.returnValues);\n}\ncontract.MyEvent().on('data', cb);\nawait contract.methodThatTriggersEvent(...);\n\n});\n};\n...\nconst contractInstance = await artifacts.require('Contract').new()\nawait waitForEvent(contractInstance) // resolves, print random number\nawait waitForEvent(contractInstance) // hangs and never resolves, previous listener gets called twice, printing the same random number as above ^^\n```\nThanks for the quick turnaround @cgewecke ! . Yeah thats the idea of how to turn a callback into an async function - wrap it in a promise and return that to be awaited on. The idea is that I want to not await the method, but rather the event the method will eventually trigger. In that case, the sequence is method -> event -> promise resolves, which is what that is supposed to abstract. \nFor a little more context, the method is triggering an oraclize call, which will eventually call a callback in my contract, which then emits the event I'm listening for. Thus I can't await on the method to finish, since the entire flow is async with the additional of oraclize. Thus await contract.methodThatTriggersEvent(...) will always resolve before the event fires. Hopefully that helps!! . Sure! The contract looks something like:\n```\nfunction methodThatTriggersEvent() public {\n  oraclize_query(\"URL\", \"http://my.url\");\n}\nfunction __callback(bytes id, string result, bytes proof) public {\n  emit MyEvent();\n}\n```\nSo I call methodThatTriggersEvent, which triggers oraclize to go fetch some stuff, then oraclize calls __callback, which eventually emits the event I'm listening for. . ",
    "matt9ucci": "@gnidan Thank you for your comment. I have created the issue #1237.. ",
    "Eggsyz": "I did not have the above problem in the ganache-cli simulation environment.. ",
    "krzkaczor": "@cgewecke thanks for your response. So I guess, what I am asking about is: can i run mocha cli (node_modules/.bin/mocha) with some set of parameters and have the same outcome as running truffle test. This would be cool since it would allow more easily to integrate with IDEs (things like: run this test only).. ",
    "karenwang38": "Truffle doc : this account truffle gave cant be changed.\n\n. ",
    "kdelwat": "@cgewecke Thanks for the help, I've done some digging and think it stems from something in the Geth genesis block.\nThese are my geth options:\nbash\ngeth\n--port 38545 \\\n--mine \\\n--minerthreads=1 \\\n--rpc \\\n--rpcport 8545 \\\n--rpccorsdomain \"*\" \\\n--datadir ~/.testnet/data/ \\\n--port 30303 \\\n--nodiscover \\\n--rpcapi web3,eth,net,debug \\\n--networkid 99 \\\n--unlock 0x1ccb322887b44f43f2775965b3397c180d2b3275 \\\nconsole\nUsing the following genesis block (from here) works perfectly:\njson\n{\n  \"config\": {\n    \"chainId\": 15,\n    \"homesteadBlock\": 0,\n    \"eip155Block\": 0,\n    \"eip158Block\": 0\n  },\n  \"nonce\": \"0x0000000000000042\",\n  \"timestamp\": \"0x0\",\n  \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"gasLimit\": \"0x8000000\",\n  \"difficulty\": \"0x400\",\n  \"mixhash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"coinbase\": \"0x3333333333333333333333333333333333333333\",\n  \"alloc\": {\n    \"0x1ccb322887b44f43f2775965b3397c180d2b3275\": {\n      \"balance\": \"0x5337000000000000000000\"\n    }\n  }\n}\nHowever, the Geth node I was using was created with dapptools, which generated this genesis:\njson\n{\n  \"alloc\": {\n    \"0x1ccb322887b44f43f2775965b3397c180d2b3275\": {\n      \"balance\": \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n    }\n  },\n  \"config\": {\n    \"byzantiumBlock\": 0,\n    \"chainId\": 99,\n    \"clique\": { \"epoch\": 3000, \"period\": 0 },\n    \"eip155Block\": 0,\n    \"eip158Block\": 0,\n    \"homesteadBlock\": 0\n  },\n  \"difficulty\": \"0x1\",\n  \"extraData\": \"0x3132333400000000000000000000000000000000000000000000000000000000ca38c3972e3e6c0c09f9baceeeebefb92a00f7410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"gaslimit\": \"0xffffffffffffffff\"\n}\nI've confirmed directly with Geth that the second genesis block ends in the issue described above, whereas the first doesn't. I can't pin down the issue unfortunately \ud83d\ude1e \nSince this appears to be an issue with Geth rather than Truffle, this issue can probably be closed.. @cgewecke No problem, I know how annoying this is to track down.\nThe transaction receipt:\n{ blockHash: '0x3907972798f8634f2b8652c0ad95454e4903eeef604cad6f2f7bfb7b38d7690b',\n  blockNumber: 900,\n  contractAddress: '0x0dD0C6BB23E4b528dA98c08D52813f1D25f14750',\n  cumulativeGasUsed: 277462,\n  from: '0x2e18dba2a20913be8901f7b054879eabe8968009',\n  gasUsed: 277462,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  root: '0x990e4f18b0658ce65a49109b51888baf38e6534fcc91f8d514b0fec4ab7a433a',\n  to: null,\n  transactionHash: '0x8d77046ce0cd92a6a53e57c8faca7700cd3d54acd73b3444982d0b4e74e3379d',\n  transactionIndex: 0 }\nThere is no listing for the Geth node in networks so it isn't getting to the save stage.\nMy Truffle config: https://gist.github.com/kdelwat/26d9049adbe6e165e8ba774e7034d231\n. @cgewecke I'm happy to try to do some debugging myself, and failing that will collaborate with you. Is there a way to link the development repo for Truffle to debug against that instead of the installed file?. @cgewecke I've worked it out (finally).\nThe issue is the eth_getTransactionReceipt RPC call.\nWe can see this when manually sending the same deployment transaction that Truffle sends:\n```js\nconst params = {\n  from: '0x2e18Dba2a20913Be8901F7b054879eAbE8968009',\n  gas: 6721975,\n  gasPrice: 20000000000,\n  data: '0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506102f8806100606000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630900f01014610067578063445df0ac146100aa5780638da5cb5b146100d5578063fdacd5761461012c575b600080fd5b34801561007357600080fd5b506100a8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610159565b005b3480156100b657600080fd5b506100bf610241565b6040518082815260200191505060405180910390f35b3480156100e157600080fd5b506100ea610247565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561013857600080fd5b506101576004803603810190808035906020019092919050505061026c565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561023d578190508073ffffffffffffffffffffffffffffffffffffffff1663fdacd5766001546040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561022457600080fd5b505af1158015610238573d6000803e3d6000fd5b505050505b5050565b60015481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102c957806001819055505b505600a165627a7a72305820449918ffa92571543a8a2ada5265bc64364cc43ae24c5492c7cab53281a5fa910029' }\nweb3.eth.sendTransaction(params)\nWhen connected to Ganache, this returns:js\n{\n  transactionHash: '0xbc79966729c22cb03d6e3cf0ac9a1c8dcada6a3bf66ba90b6e7464001f4f7129',\n  transactionIndex: 0,\n  blockHash: '0x4d4b6af853cfadf3ab798fdd4b8a39d203b712b56def8848c23f47f011470514',\n  blockNumber: 11,\n  gasUsed: 277462,\n  cumulativeGasUsed: 277462,\n  contractAddress: '0x74F9CC18F443ea793a19735B69Cf6F0c5091111E',\n  logs: [],\n  status: true,\n  logsBloom: '0xn}\n```\nBut connected to Geth it returns:\njs\n{\n  blockHash: '0x54d9b8270140dfb94ae9029766756b86257cb5c39160517c88e20a5dabadfda7',\n  blockNumber: 2140,\n  contractAddress: '0x87966Fea4132099cbCB751eE3B5D191C2Ee5A806',\n  cumulativeGasUsed: 277462,\n  from: '0x2e18dba2a20913be8901f7b054879eabe8968009',\n  gasUsed: 277462,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  root: '0x0bd1ed8adaddbaf8129c360447b759c4c152a98af7c05e7d984bb497a5d561f8',\n  to: null,\n  transactionHash: '0x66341e0f1e1368a8e812ef2b0a9adb49ccb8215b211a31b44ea991c62d7a1cd2',\n  transactionIndex: 0\n}\nThe breaking difference is the lack of status field from Geth, which breaks the check in truffle-contract here.\nAccording to the JSON RPC spec:\n\n[the receipt] also returns either :\nroot : DATA 32 bytes of post-transaction stateroot (pre Byzantium)\nstatus: QUANTITY either 1 (success) or 0 (failure)\n\n\nSince the Geth receipt returns root, it is also correct, but Truffle thinks it has failed.\nThis seems like an easy fix, by changing the execute check from if (!receipt.status) to if(receipt.status !== undefined && !receipt.status).\nHappy to put in a PR if that's helpful / the change makes sense, or feel free to make the change yourself :) Thanks for the help\n. ",
    "evgeniuz": "My main question right now is if this approach is ok and if it is should I refactor compile and compile.with_dependencies into solidity.js module inside truffle-compile package?. Refactored vyper support into truffle-compile-vyper. So current approach is following: I've added forEachCompiler helper function that essentially wraps whatever was in compile.all and compile.necessary and runs it for each defined extension/compiler. I've also added support for different extensions to Profiler.updated and find_contracts (this one should be completely backwards compatible).\nOnly left is adding support of OS-independent paths (that I plan to refactor into utility function from compile) and probably adding some tests.. @gnidan there are few things that are in truffle-compile that I would like to reuse in vyper compilation: compile.all and compile.necessary are independent on solidity and will work for vyper (and any other compiler in future). Profiler.updated (which is part of compile.necessary) also doesn't have anything solidity-specific, it just reads timestamp from JSON and compares it to source timestamp. If I move vyper processing totruffle-workflow-compile` I won't be able to use that.\nI can define COMPILERS in truffle-workflow-compile and pass that as an option to compile.all/necessary, will that be ok?\nAnother option might be to move compile.all/necessary and Profiler.updated to truffle-workflow-compile, as they are general enough to be useful for any compiler, and leave truffle-compile with just solidity-specific functions.\nEdit: I see that next has some changes in this area, will update questions once I rebase.. My main concern was to reduce duplication of code, but if that is ok for now that answers most of questions. I will update branch with that and rebase in on top of next.. Rebased on top of next branch, truffle-compile is now untouched, truffle-workflow-compile/truffle-config have minimal changes and all vyper support is in separate package. I've used Profiler.update by loading it from truffle-compile and copy-pasted compile.all/compile.necessary/compile.display from truffle-compile (marked this with TODO comment, as a candidate for refactoring later).\nNow compilation starts if there are .vy files in contracts directory, compiles necessary files by default and all files if --all flag is passed.\nNot sure if there's anything left to do feature-wise.. @gnidan, can you please review integrations and suggest if there's anything to improve (or maybe someone else should do this?).\nI also have a question about tests: should I write tests for this functionality and if yes, how to handle CI, as there should be vyper executable available for it to work.. Fixed minor issues, added tests.. > @evgeniuz If this is not merged soon, can you outline steps for how I can add it to my truffle manually or should I just use your fork for now?\nYou can use my fork, develop branch. It's based on top of next branch of truffle. Should be working out of the box, just place vyper contracts in contracts directory of your truffle project and have vyper executable in PATH (e. g. snap install vyper --edge --devmode)\n. @gnidan Can you please review changes/unit tests and comment if this is good for merge or anything else should be fixed?. @gnidan Can you please review this pull request?. Changed execVyper to only call vyper once for all formats. Formats specs/their parsing use one array, that way they can be added/reordered as necessary.. Created an issue for that (https://github.com/ethereum/vyper/issues/1021), this code can be simplified once that is fixed. Yes, the output is unpredictable and there's no way to find out which is which (well, technically JSON is easy to detect and runtime binary is shorter than binary, but that is not a way to rely on).. fixed.. removed.. removed.. I've considered this, but it looks like ethereum/vyper docker is not updated (it has very old version there and is not actually working). I've used snap version for development.. Makes sense, will add support for these.. These comments are part of copy-pasted code from truffle-compile, I've left them as is (these will be probably refactored into some common place later).. Added support for .v.py and .vyper.py files.. This is now merged in vyper and available in snap, should I change compiler function to rely on this behavior (i. e. call compiler only once)?. ",
    "nemaniarjun": "What is the status of this one?! I plan on using Vyper for a college assignment and would love to use truffle with it? Can we get this merged ASAP? \n@evgeniuz If this is not merged soon, can you outline steps for how I can add it to my truffle manually or should I just use your fork for now?\nI initially planned on using truper to get it working and it works for test, but not with migrations. . Can we have .v.py and .vyper.py as patterns too? A lot of people keep them in .py for syntax highlighting.. These comments might need changing :grin: . ",
    "rocky": "Actually, I think this is part of a bigger discussion of what should go into the the build/contracts JSON, and library routines involved there. \nI don't think solving this as an independant thing is as important as the discussion of what should go in there. \nI am hoping that by working with folks in integrating Mythril into the currently developing plugin architecture we can resolve this as well as other things.. Is this related to this and indirectly #1645  ? \n. You are very welcome. Thanks for considering this and working on this. \nPlease keep us (me, and more generally the Mythrili team) apprised of run plugin work. We can and do want to help here. We can help test things. \nI am (now) watching release tags, but that can be a little too late to get the most benefit before a release.. Note: This is related and would be fixed by the proposal in #1482.. All fixed now. Thanks for all the great work!. Hmm. Given the complexity of what can be compiled when, the dynamic nature of files getting renamed, added, and removed, the only sane (simple) solution would be to make sure that each artifacts JSON file written is self contained and self consistent. \nWhen a compilation is passed off to solc-js, it has a consistent, fixed view of what files it is dealing with. So it seems to me that this list of files needs to be recorded somewhere in the output JSON.  In other words, means adding something like sources in each written JSON file, right? \nIf I am missing something, have faulty logic, or things are more complex, please do educate me.. Ok @gnidan will wait patiently and I am eager to see what you all come up with. I hope allowing what's in there to be user/tool configurable is possible. \nOtherwise developers like the MythX folks who use truffle packages as a library will need a separate artifacts folder or files. . @gnidan I wrote that comment before I looked at the issue you cited - my bad.  I see you may be considering this, at least from the query side. Great! . For what it is worth, in addition to beta.33 reported above, going back to beta.37\n\"web3\": \"^1.0.0-beta.37\",\n        \"web3-core-promievent\": \"^1.0.0-beta.37\",\nwork for me. > PR to pin to beta.37, \nHmm.... So it was decided that you don't have to go back to beta.33 as it seemed to be suggested above? . ",
    "whittlem": "I'm not familiar with the ionic framework but I assume you have standard contract files (*.sol)?\nInstall Truffle:\nsudo npm install -g truffle\nMake a directory for your DApp:\nmkdir ionic_new\ncd ionic_new\nCreate a new project:\ntruffle init\nCopy your contract .sol files into the contracts/ directory\nShould be able to compile your contracts now... truffle compile --all\nThe next parts you need to read up on as they are specific to your DApp...\n\nCreate a migration file in the migrations directory.... like: 2_deploy_contracts.js\nUpdate the truffle-config.js and define your networks \n\nFire up TestRPC / Ganache and run: truffle migrate --reset   or    truffle test\nI recommend this link for finer details:\nhttps://truffleframework.com/docs/truffle/reference/configuration. ",
    "tarekskr": "Thank you so much @cgewecke for getting back to me.\nI followed your recommendation and was able to eliminate the error. The event code however doesn't seem to ever get called. Here is what my code looks like now:\n```\nwatchTokenTransferEvent(tokenInstance) {\n    // watch the Transfer event\n    tokenInstance.Transfer()\n    .on('data', event => {\n        var fromAddress = event.returnValues.from;  \n    // this *never* gets called\n    console.log(\"******fromAddress: \" + fromAddress);\n    }\n  }\n);\n\n}\n```\nI've also updated my networks config to enable websockets as follows:\nmodule.exports = {\n  networks: {\n    development: {\n      host: \"127.0.0.1\",\n      port: 7545,\n      network_id: \"*\", // Match any network id\n      websockets: true\n    },\n    ropsten: {\n      provider: function() {\n        return new HDWalletProviderPrivkey(ropstenPrivateKeys, \"https://ropsten.infura.io/\");\n      },\n      network_id: '3',\n      websockets: true,\n      from: ropstenAccount,\n      gas: 4612388 // Gas limit used for deploys\n    },\n    rinkeby: {\n      provider: function() {\n        return new HDWalletProvider(rinkebyMnemonic, \"https://rinkeby.infura.io/\");\n      },\n      network_id: '4',\n      websockets: true,\n      from: rinkebyAccount,\n      gas: 4612388 // Gas limit used for deploys\n    }\n  }\n};\nAm I still missing anything here?. Thanks @cgewecke , I am actually using MetaMask to access my daap on Ropsten.\nSo I used the callback tokenInstance.Transfer(function(error, event) {  instead of .on('data', event => { and I actually got the following error:\nError: The current provider doesn't support subscriptions: MetamaskInpageProvider\nWith further research, it turns out MetaMask does not support websockets yet.\nMy question remains, how can I listen for events now like I used to do before upgrading truffle? Thanks a ton.. Thanks a lot @cgewecke . I actually pinged MetaMask and they said they should have something rolled out next week \ud83e\udd1e https://github.com/MetaMask/metamask-extension/pull/4279#issuecomment-418810239\n. @gnidan awesome! Thanks again @cgewecke for all your help.. ",
    "Amxx": "+1. This should be closed since the features it proposed were merged from PR 1409\nhttps://github.com/trufflesuite/truffle/pull/1409. ",
    "davy42": "+1. ",
    "ethereummayster": "Can anyone merge?\nI need to be able to install truffle with web3 beta.36 via npm install -g command without any other actions.... ",
    "jfkidear": "Where do you get mnemonic words? When I import mnemonic the MetaMask creates in MyEtherWallet I find many  addresses you would like to interact with. But nothing is my address.. @cgewecke . ",
    "kennblvnp": "@jfkidear go to metamask settings and Reveal Seed Words\nDid it work?. ",
    "liderako": "truffle@beta error input\n\"BetsMatch\" ran out of gas. Something in the constructor (ex: infinite loop) caused gas estimation to fail. Try:\n   * Making your contract constructor more efficient\n   * Setting the gas manually in your config or as a deployment parameter\n   * Using the solc optimizer settings in 'truffle.js'\n   * Setting a higher network block limit if you are on a\n     private network or test client (like ganache)..  Using the solc optimizer settings in 'truffle.js', solves the problem. ",
    "arisAlexis": "Yes.\nThere is a contract that is deployed that is Ownable and implements the onlyOwner modifier.\nFor example let's say we are using Ganache on the local network. \nThe deployer of the contract is the first account on Ganache and that's the owner of the deployed contract.\nYou can't test the  functions that use the onlyOwner modifier because the Test Contract is not the owner.\nOf course you can redeploy it but why? The Test Contract should use the same first account from Ganache.\nIt is solidity based testing. . the default account of TestContract has 0 Ether while the Ganache accounts have 100ETH each.  That tells me that the private key is different and it's not the one taken from Ganache. . ",
    "thekevinbrown": "It looks like this is what's happening:\n$ curl https://solc-bin.ethereum.org/bin/list.json\ncurl: (6) Could not resolve host: solc-bin.ethereum.org\nThen the .catch fires here https://github.com/trufflesuite/truffle/blob/beta/packages/truffle-compile/compilerSupplier.js#L169, but url isn't defined in that scope. So there's an error preparing the error message, resulting in the stack trace I posted.\nI'd love for there to be a better error message in this case, and ideally a suggestion from Truffle on how to work around the problem (e.g. should I install my own solc-js another way and tell Truffle to use it as a workaround?). Also, when trying to use a local solc-js to work around this, it doesn't work how I'd expect it to. The release notes say I can use a relative path, so I did:\n\nyarn add solc\nEdited truffle.js to have this section:\n\ncompilers: {\n        solc: {\n            version: './node_modules/solc', // Version is managed in package.json as an NPM dependency.\n            optimizer: {\n                enabled: true,\n            },\n        },\n    },\nBut then I get: Error: Could not find compiler at: ./node_modules/solc, even though that appears to be the path where solc is living relative to truffle.js:\n$ ls truffle.js\ntruffle.js\n$ ls node_modules/solc\nLICENSE     index.js    package.json    translate.js\nREADME.md   linker.js   solcjs      wrapper.js\nabi.js      node_modules    soljson.js\nWhat am I doing wrong here?. Awesome, thanks so much @cgewecke!\nI was definitely connected to the internet when I was doing this and could get all sorts of other sites to resolve, just not that one. It's working for me this morning though, so not sure what changed (maybe my ISP did something), but looks all good now.\nAppreciate your help!. Yup, that was it! The example I was going from was the main docs: https://truffleframework.com/docs/truffle/reference/configuration But looks like they're not v5 yet (which makes sense).\nSorry for the noise.. No worries, since the feature is expected not to work I've created the PR above to remove mention of the feature from the CLI so as not to confuse people.. That sounds great, is there anything I can do to help here? Does it still work in v4? I might be able to find some time before devcon to chip in.. I'm not sure, I'm using v5 on the project I'm on, and if it works or not in v4 that wouldn't really help me.\nIs EthPM v1 expected to work with Truffle 5, or not? I see the following potential resolutions here:\n\nIf EthPM v1 is expected to work in the meantime, we fix the problem in the issue.\nIf EthPM v1 is not expected to work in the meantime, we remove truffle install as it's broken and just confuses people being there.\n\nOf course once the v2 implementation is done this won't be an issue, I'm just trying to arrive at a stable place for Truffle v5 in the meantime, particularly if it's a few months away.. Reading the other comments on the issue, it sounds like the plan is actually to fix it. Is there a working implementation in any particular version of Truffle? I'm not 100% familiar with how it should be working, but if I can see it working previously I should be able to get that in to v5 in between travelling to devcon and such.. ",
    "kartojal": "Hitting this again with truffle@next, can't compile or migrate contracts now:\nError: Failed to complete request to: https://solc-bin.ethereum.org/bin/list.json. Are you connected to the internet?\nTried to curl it and also received a 404 github page. Do you know any workaround?\ntruffle version\nTruffle v5.0.0-next.11 (core: 5.0.0-beta.0)\nSolidity v0.4.24 (solc-js). This is strange. Now i can see the json file at https://solc-bin.ethereum.org/bin/list.json with the Chrome browser but still can not curl it via the terminal or running truffle commands.. ",
    "cds-amal": "Have you considered implementing something like what docopt does? It's a tool that generates a parser from doc string. One advantage is that the help and definition of the commands are maintained in one place.\nThe author of the package describes the motivation for this pattern/tool here\nTheir example shows how multiple commands can be described in one doc string\n```\nNaval Fate.\nUsage:\n  naval_fate ship new ...\n  naval_fate ship  move   [--speed=]\n  naval_fate ship shoot  \n  naval_fate mine (set|remove)   [--moored|--drifting]\n  naval_fate -h | --help\n  naval_fate --version\nOptions:\n  -h --help     Show this screen.\n  --version     Show version.\n  --speed=  Speed in knots [default: 10].\n  --moored      Moored (anchored) mine.\n  --drifting    Drifting mine.\n```\nThere is a Node port of docopt as well!. ",
    "coveralls": "\nCoverage decreased (-0.4%) to 67.064% when pulling f18735c815f101384eb64de132554ffd96212b16 on truffle-decoder into a4be8930f2a87117d4affa6981be7c8cc372a846 on next.\n. ## Pull Request Test Coverage Report for Build 1324\n\n3 of 3 (100.0%)  changed or added relevant lines in 1 file are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage increased (+0.02%) to 57.528%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 1320: |  0.02% |\n| Covered Lines: | 3701 |\n| Relevant Lines: | 6177 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 1327\n\n0 of 0   changed or added relevant lines in 0 files are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage remained the same at 57.528%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 1325: |  0.0% |\n| Covered Lines: | 3701 |\n| Relevant Lines: | 6177 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 1420\n\n30 of 33 (90.91%)  changed or added relevant lines in 2 files are covered.\n30 unchanged lines in 1 file lost coverage.\nOverall coverage increased (+0.1%) to 69.46%\n\n\n|  Changes Missing Coverage | Covered Lines | Changed/Added Lines | % |\n| :-----|--------------|--------|---: |\n| packages/truffle-box/lib/utils/unbox.js | 29 | 32 | 90.63%\n | **Total:** | **30** | **33** | **90.91%** | \n|  Files with Coverage Reduction | New Missed Lines | % |\n| :-----|--------------|--: |\n| packages/truffle-core/lib/commands/develop.js | 30 | 7.14% |\n | **Total:** | **30** |  | \n|  Totals |  |\n| :-- | --: |\n| Change from base Build 1381: |  0.1% |\n| Covered Lines: | 4509 |\n| Relevant Lines: | 6225 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 1386\n\n11 of 33 (33.33%)  changed or added relevant lines in 3 files are covered.\n7 unchanged lines in 2 files lost coverage.\nOverall coverage decreased (-0.1%) to 69.206%\n\n\n|  Changes Missing Coverage | Covered Lines | Changed/Added Lines | % |\n| :-----|--------------|--------|---: |\n| packages/truffle-core/lib/commands/develop.js | 1 | 2 | 50.0%\n| packages/truffle-core/lib/mnemonics/mnemonic.js | 8 | 29 | 27.59%\n | **Total:** | **11** | **33** | **33.33%** | \n|  Files with Coverage Reduction | New Missed Lines | % |\n| :-----|--------------|--: |\n| packages/truffle-core/lib/commands/develop.js | 1 | 7.14% |\n| packages/truffle-compile/compilerSupplier.js | 6 | 95.05% |\n | **Total:** | **7** |  | \n|  Totals |  |\n| :-- | --: |\n| Change from base Build 1361: |  -0.1% |\n| Covered Lines: | 4480 |\n| Relevant Lines: | 6214 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 1388\n\n0 of 0   changed or added relevant lines in 0 files are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage remained the same at 69.337%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 1381: |  0.0% |\n| Covered Lines: | 4469 |\n| Relevant Lines: | 6184 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 1391\n\n1 of 1 (100.0%)  changed or added relevant line in 1 file are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage decreased (-0.008%) to 69.328%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 1381: |  -0.008% |\n| Covered Lines: | 4469 |\n| Relevant Lines: | 6184 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 1399\n\n4 of 123 (3.25%)  changed or added relevant lines in 4 files are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage decreased (-1.3%) to 68.047%\n\n\n|  Changes Missing Coverage | Covered Lines | Changed/Added Lines | % |\n| :-----|--------------|--------|---: |\n| packages/truffle-core/lib/commands/build.js | 2 | 6 | 33.33%\n| packages/truffle-core/lib/errors/builderror.js | 0 | 7 | 0.0%\n| packages/truffle-core/lib/commands/watch.js | 2 | 48 | 4.17%\n| packages/truffle-core/lib/build.js | 0 | 62 | 0.0%\n | **Total:** | **4** | **123** | **3.25%** | \n|  Totals |  |\n| :-- | --: |\n| Change from base Build 1381: |  -1.3% |\n| Covered Lines: | 4473 |\n| Relevant Lines: | 6307 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 1431\n\n32 of 124 (25.81%)  changed or added relevant lines in 8 files are covered.\n1 unchanged line in 1 file lost coverage.\nOverall coverage decreased (-0.8%) to 68.699%\n\n\n|  Changes Missing Coverage | Covered Lines | Changed/Added Lines | % |\n| :-----|--------------|--------|---: |\n| packages/truffle-debugger/lib/session/index.js | 2 | 3 | 66.67%\n| packages/truffle-debugger/lib/controller/actions/index.js | 5 | 6 | 83.33%\n| packages/truffle-debugger/lib/controller/sagas/index.js | 12 | 14 | 85.71%\n| packages/truffle-debugger/lib/controller/reducers.js | 9 | 15 | 60.0%\n| packages/truffle-core/lib/commands/debug.js | 0 | 82 | 0.0%\n | **Total:** | **32** | **124** | **25.81%** | \n|  Files with Coverage Reduction | New Missed Lines | % |\n| :-----|--------------|--: |\n| packages/truffle-core/lib/commands/debug.js | 1 | 0.52% |\n | **Total:** | **1** |  | \n|  Totals |  |\n| :-- | --: |\n| Change from base Build 1425: |  -0.8% |\n| Covered Lines: | 4527 |\n| Relevant Lines: | 6314 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 1520\n\n37 of 69 (53.62%)  changed or added relevant lines in 11 files are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage decreased (-0.1%) to 69.004%\n\n\n|  Changes Missing Coverage | Covered Lines | Changed/Added Lines | % |\n| :-----|--------------|--------|---: |\n| packages/truffle-debugger/lib/session/index.js | 2 | 3 | 66.67%\n| packages/truffle-debugger/lib/session/selectors/index.js | 1 | 2 | 50.0%\n| packages/truffle-core/lib/commands/debug.js | 0 | 30 | 0.0%\n | **Total:** | **37** | **69** | **53.62%** | \n|  Totals |  |\n| :-- | --: |\n| Change from base Build 1518: |  -0.1% |\n| Covered Lines: | 4647 |\n| Relevant Lines: | 6447 |\n\n\ud83d\udc9b  - Coveralls\n. \n\nCoverage decreased (-0.06%) to 66.941% when pulling cedb2ae3722d823ccd9843ae521b57cfbae4e323 on opt-in-analytics into 4896056f90116532ba6a2a30ad13ea228bc71ae0 on next.\n. \n\nCoverage increased (+2.1%) to 69.056% when pulling d8d5f43ec06fa8451a3ffca5d241cc23e5a242d1 on canufeel:feature/tests-connect-or-start into 4c08ca90bc6bd604a25d0a763c911d340afbee51 on trufflesuite:next.\n. \n\nCoverage increased (+0.04%) to 67.04% when pulling c580088bc188e0f45bdd24baa8c5f60a115fe697 on ts-test-regexp into 4896056f90116532ba6a2a30ad13ea228bc71ae0 on next.\n. \n\nCoverage decreased (-0.02%) to 66.962% when pulling 26a1e3b8331996d539aeb9ea191ae0706771d852 on configurable-artifactor into 4f6621522a8883c7716826f4af737ee7988798cd on pluggable-truffle.\n. \n\nCoverage increased (+0.05%) to 67.036% when pulling d3ba483e8213cddaf8efd3e1be7acbb7c72b0ce1 on configurable-blockchain-utils into 88fdfebed621698541b7508894bc03cfdb6f68f9 on pluggable-truffle.\n. \n\nCoverage increased (+0.01%) to 66.997% when pulling 607aac00da2d572c614fb5913f09cf39d1b5222c on configurable-box-manager into 4f6621522a8883c7716826f4af737ee7988798cd on pluggable-truffle.\n. \n\nCoverage increased (+0.4%) to 67.338% when pulling 1a0da62b7530c0cb68f9df0e091f89c1742b5cb2 on configurable-code-utils into 4f6621522a8883c7716826f4af737ee7988798cd on pluggable-truffle.\n. \n\nCoverage increased (+0.1%) to 67.063% when pulling e0a6bfd085ab83fb80f10d21b354c893276da891 on structs-in-fxn-args into 3b071d51e93ec74cca7be99e8944de31b0d8b5ca on next.\n. \n\nCoverage decreased (-0.01%) to 66.991% when pulling af01b388a543a09dc973aa37674827358046d163 on m-schmoock:next into 3278db4ded587225709f2dffc0950dfc623c05eb on trufflesuite:next.\n. \n\nCoverage decreased (-0.06%) to 66.941% when pulling 3f1ea86bfd282321f45835d185a9addb28de7ba6 on stale-bot-implementation into 3278db4ded587225709f2dffc0950dfc623c05eb on next.\n. \n\nCoverage remained the same at 66.941% when pulling df1cf3c309e7e398122bbfb25931488a2181ea60 on geth-build-fix into ad8401020edc235642e3e47050ab0e535f80c844 on next.\n. \n\nCoverage decreased (-0.2%) to 66.904% when pulling a3dbfb58b78d3128238d41d9e5562d8a98b06fd6 on anukul:slither into 33b884a7572a869431dd832b883bb5b0b6dd335d on trufflesuite:next.\n. \n\nCoverage remained the same at 66.961% when pulling 0a763b943e5efa4a7e50cc5849e86f008324f805 on ethpm-version-bump into 5d0db42e336a4bf7f262e2ea06d05e44ac63a066 on next.\n. \n\nCoverage increased (+0.3%) to 67.407% when pulling 5a8b690c0896f0ce252253982108a7abaadb27ca on hotswap into 33b884a7572a869431dd832b883bb5b0b6dd335d on next.\n. \n\nCoverage remained the same at 67.599% when pulling a71c120dafe7108d1f5df974fb67a995c000402e on contract-reorganization into a4307289b60d07508d73ecb882c479918eceb81e on next.\n. \n\nCoverage decreased (-0.06%) to 67.004% when pulling a2ccbba67695980a323456240ae87320b9957755 on truffle-box-cleanup into 58921346555b10aaa88e28f23646335b27c6a300 on next.\n. \n\nCoverage increased (+0.5%) to 67.533% when pulling 872b01d70bb9c4dc21124c3bd2e9dd7a33ec6007 on newvarids into 66e3b1cb10df881d80e2a22ddea68e9dcfbdcdb1 on next.\n. \n\nCoverage decreased (-0.03%) to 67.007% when pulling 4ea0271693c88b6f3ba6fb9d0b909ef452639743 on replace-chokidar into 66e3b1cb10df881d80e2a22ddea68e9dcfbdcdb1 on next.\n. \n\nCoverage remained the same at 67.035% when pulling a27a5a0f9739b20fdddb6194cc1bfb140efafd2c on fix-truffle-contract into 66e3b1cb10df881d80e2a22ddea68e9dcfbdcdb1 on next.\n. \n\nCoverage increased (+0.03%) to 67.035% when pulling ecf099d7a408449c1ea49911c7b2ecd87fff6580 on fix-build into cf52159f87e7ca80c85639d041f8fb031242a13f on next.\n. \n\nCoverage decreased (-0.1%) to 66.926% when pulling b82ecc21c888c7498c0e2bbc3a2fbd89213cfe20 on solcs-own-wrapper into 66e3b1cb10df881d80e2a22ddea68e9dcfbdcdb1 on next.\n. \n\nCoverage remained the same at 67.007% when pulling b6ea79b9e1f1944601fa382386a5ab018019dfcb on fix-image into db59d799de8a8262e5b67efa8c6cbba5dd1e290a on next.\n. \n\nCoverage decreased (-0.1%) to 66.867% when pulling a33decc7a76d1f3fcc4434988c40f5e54045a819 on solc-0.5.0 into f2cd8dbd0eaa04489902058612165d7669826193 on next.\n. \n\nCoverage increased (+0.7%) to 67.567% when pulling 317c6a316166b5c890b056a5393788245309f287 on truffle-run into 9589004384f0fb305707ce094a6e57aed9837a09 on next.\n. \n\nCoverage increased (+0.009%) to 67.407% when pulling 9c2df002e8826b4a6bb466140590e4220ee4af99 on decode-logs-bug into 89b843016fb144005851384ba947c70a87271c8e on next.\n. \n\nCoverage remained the same at 68.141% when pulling 641775f12415d318d24d892c4bc25209d0d20c22 on truffle-unbox-subDirs into a4307289b60d07508d73ecb882c479918eceb81e on next.\n. \n\nCoverage decreased (-0.01%) to 67.397% when pulling 0b0b97822a54fdb134c018b7c8ac109959378d0f on staticcall into 8e26c6eace00154b3bf95ec985658acd60d31a91 on next.\n. \n\nCoverage remained the same at 69.852% when pulling 3f33cd3fd5facd67eda754f1ba1942c45e03b82b on jtakalai:patch-1 into 32ed37fa9e265558470537e0013d0d30cd4d20b4 on trufflesuite:next.\n. \n\nCoverage remained the same at 67.535% when pulling 65a1e08ee9fa2b6524c5e05c25a5ef294dcc5e15 on fix-watch into a4307289b60d07508d73ecb882c479918eceb81e on next.\n. \n\nCoverage remained the same at 67.609% when pulling 6f0da55ac8b8efd09ca0fe8707ec2bd32094e4e6 on truffle-help-callback into a4307289b60d07508d73ecb882c479918eceb81e on next.\n. \n\nCoverage remained the same at 67.609% when pulling b0436f619277b6502dbeebea06c8ab6af445046f on truffle-config-deps into a4307289b60d07508d73ecb882c479918eceb81e on next.\n. \n\nCoverage decreased (-0.03%) to 67.51% when pulling 2b5a836a0a7e78a2554c6e2604552e57dd4b47cc on solc-0.5.0-tests into b81fa2fbc179081f69d930d3f3e7e240925bc2b3 on next.\n. \n\nCoverage decreased (-0.03%) to 67.569% when pulling 06c7ea61be32853180ac2c459a53a49e014fa1b0 on no-fixed-sourceid into c8c7dc9a7d43b4338a979429ff9303e1227f26b9 on next.\n. \n\nCoverage increased (+0.4%) to 67.937% when pulling 9ea9ec08289e1bbea1d28643ec5d7557e5075d3b on v5-optimizer into 49a9e7e72c60cf49ee1a6786569f493ee8b062d3 on next.\n. \n\nCoverage decreased (-0.01%) to 67.558% when pulling 4cf3538ed22a82c79a761cc0cb1dc2867dd9699f on precompile-depth into 49a9e7e72c60cf49ee1a6786569f493ee8b062d3 on next.\n. \n\nCoverage increased (+0.0005%) to 67.569% when pulling 111dfb15378d948d5fc9e0f2bae9f92ae7e5ce4e on memoize-config-provider into 49a9e7e72c60cf49ee1a6786569f493ee8b062d3 on next.\n. \n\nCoverage decreased (-0.03%) to 67.535% when pulling ea37f57e0744a7cf966331e54c9718be73e48115 on edit-unbox into 6c258fbd75e2d0f928ce6e80c9631584d03b2f7b on next.\n. \n\nCoverage increased (+0.003%) to 67.571% when pulling 9684ca4b4427668cffbaaa7cec622a3325c83b67 on suppress-unnamed into 6c258fbd75e2d0f928ce6e80c9631584d03b2f7b on next.\n. \n\nCoverage increased (+0.4%) to 67.945% when pulling 8226e781c5ffb07c85dfbe110008653b6dd550b1 on init-test into b81fa2fbc179081f69d930d3f3e7e240925bc2b3 on next.\n. \n\nCoverage decreased (-0.06%) to 67.863% when pulling 9a6cc0fe6c3d15a34cd3769fa56534d54df19009 on byoc-version-issue into bfb03e81ba7937d7e1f685b2ec4df1e1c5f8f3a9 on next.\n. \n\nCoverage increased (+0.008%) to 67.933% when pulling dd07e2704535832d10cbcacbcad1dfae737da2e1 on debug-selector-expr into bfb03e81ba7937d7e1f685b2ec4df1e1c5f8f3a9 on next.\n. \n\nCoverage remained the same at 67.947% when pulling eea1a2c56a77760d17d079fed9dd0bccfc355edd on name-fix into 6f7c08571278e9a525858802ac5b7fad8e78d4cf on next.\n. \n\nCoverage increased (+0.2%) to 68.177% when pulling a81abf7d47b9e7c5b0b93819468f6b02aad0b1cd on assert-050 into ee6c4675ae2d0cea2603d5ce5273706dac568eea on next.\n. \n\nCoverage increased (+0.1%) to 68.061% when pulling 8cd05e13e99c9ce186db19f3c59b11b0d1924039 on edit-truffle-config into 63173f8103eb79be6e4be16644644468d6e17df6 on next.\n. \n\nCoverage remained the same at 67.947% when pulling ae356c922be8ceee1e7760f1bc64c5b4d643cef1 on IIIIllllIIIIllllIIIIllllIIIIllllIIIIll:patch-1 into 63173f8103eb79be6e4be16644644468d6e17df6 on trufflesuite:next.\n. \n\nCoverage decreased (-0.04%) to 67.909% when pulling e8c8387df6c365225a614779822a8390170ba656 on check-network-id into 62817dc46ce9cb258c40c2d2ffc8f9df99d778ed on next.\n. \n\nCoverage decreased (-0.02%) to 69.847% when pulling 40c9904cd4f3c08c11c88c49485fa4df35d40677 on upgrade-ganache-cli/core into 99b36a934b970bc729ea30dcf570e0f2eb3c11ba on next.\n. \n\nCoverage decreased (-0.1%) to 69.868% when pulling a156e2335345b05c18168a863890bcf0abb5039a on ball into 9048922b3ab578dbd58b3f89e7c2e653e90f07ff on next.\n. \n\nCoverage increased (+0.2%) to 70.074% when pulling ce01bd85984d86b5c50daa64c449a935304ce612 on gnosis:migrate-deps-3 into 5b65fcbdc367e3b4d38137c6f2a8edcc6171a8f3 on trufflesuite:next.\n. \n\nCoverage increased (+0.02%) to 69.884% when pulling 387d43ebce1a46da7453f0324b831280d226e98e on maddevsio:chambylov/improvements/1482-plugins-w-callbacks into 5b65fcbdc367e3b4d38137c6f2a8edcc6171a8f3 on trufflesuite:next.\n. \n\nCoverage remained the same at 69.868% when pulling 76ae017bf81bb5c660b7ec715875bcdf3b78ff1f on update-web3 into 5b65fcbdc367e3b4d38137c6f2a8edcc6171a8f3 on next.\n. \n\nCoverage increased (+0.02%) to 69.863% when pulling b3c416910d729250ac13aebe073cb433c074c67c on chambylov/improvements/1482-plugins-w-callbacks into 2f016ce5c966ec93cbee77668896c76f9f645a76 on next.\n. \n\nCoverage decreased (-0.007%) to 69.839% when pulling 7290be9e7219a58ff80a6b125c1afdb8477ee60b on b-all-message into 2f016ce5c966ec93cbee77668896c76f9f645a76 on next.\n. \n\nCoverage remained the same at 69.855% when pulling 25a5de8ff3d978b7b5c3418d812d27e32a97b34a on truffle-hdwallet-webpack into 822af03d701e6abee217134038623272215ab7e5 on next.\n. \n\nCoverage decreased (-0.04%) to 69.819% when pulling e295298e393d843949a415e9f21d6ddbd56b77c0 on version-update into 822af03d701e6abee217134038623272215ab7e5 on next.\n. \n\nCoverage increased (+0.007%) to 69.863% when pulling 5fe9be01c1f5f36e11e08057c54e417e0b0575c1 on mnemonic-closure into 8efe79585f69e9fefabc0964c56b74c699c68955 on next.\n. \n\nCoverage remained the same at 69.855% when pulling 0e47c9314e92aa29d95474809ca4e275de9dec63 on add-app-module-path into 8efe79585f69e9fefabc0964c56b74c699c68955 on next.\n. \n\nCoverage remained the same at 69.855% when pulling b9b06edeb1eb9adbaddf7fa0103a8f1d315626fd on update-unbox-tests into 8efe79585f69e9fefabc0964c56b74c699c68955 on next.\n. \n\nCoverage remained the same at 69.816% when pulling 7fba3e5ba699b8acbfae8b480a22c5f0784a9698 on update-network-id-check into 7472f0d6ac580ac0bbf9acad9566643570af091a on next.\n. \n\nCoverage remained the same at 69.816% when pulling 0398f0745eab42416cb9e22ea42724ee80c49eb0 on bug-compiler-supplier into fbc1d43dd8a1b3e459e78e9dbb3509b0dc647ac5 on next.\n. \n\nCoverage decreased (-0.01%) to 69.816% when pulling e70d8bed984fb6ede54eb1034fa45141bae61760 on stabilize-solc into ac682daf05e0840aefc8dfacb6750c0acd22bbcf on next.\n. \n\nCoverage remained the same at 69.816% when pulling 1bd3d0eaa0856f7942a63175050acde8dd0150aa on coventry:coventry/dec-12-2018/more-robust-log-reporting into 108363ff3312b1969a9fc36d7f47d97c4bcb8f46 on trufflesuite:next.\n. \n\nCoverage decreased (-0.03%) to 69.783% when pulling 790d7481ad29b6045a72ced5a8a4dbf7bf0fefb1 on bug-version into 7b14b3496ab5b096611e9dd127ad4766e8e34a55 on next.\n. \n\nCoverage remained the same at 69.816% when pulling c532b5e47e4110a26ca5cfae94339af7f7a570a1 on update-help into 7b14b3496ab5b096611e9dd127ad4766e8e34a55 on next.\n. \n\nCoverage increased (+0.3%) to 70.475% when pulling 1258e353a468a3aa4973e180bdc2680cc80f3d94 on legacy-migrations/testing into 28a888cad219b5c446daf37a1151e74883fe2ab6 on develop.\n. \n\nCoverage increased (+0.3%) to 63.979% when pulling 3c1fb9e9af1da7cc2162e6ed3d367e0814edb3af on compress-legacy into 51b799922dc7703b8ed7193f3a930b743caa1a8b on legacy-migrations/testing.\n. \n\nCoverage increased (+0.03%) to 69.812% when pulling 94dae361d2ae1c9a1c2fd758ab0947736ea2d2a7 on options-solc into 9464db0d7b63e5bcdbef9297382b312af43784c7 on next.\n. \n\nCoverage remained the same at 69.812% when pulling d29e1864485271c7306ec0ff8636fb9bd1f5a964 on hdwallet-devDeps into c421abb22758ee278f35787364c47c2329f43de9 on next.\n. \n\nCoverage increased (+0.2%) to 69.805% when pulling 02f12447571aec84b4b24cd63ddc5c2fa7167fb4 on preallocation into 935e91b3fbe96b843e9a1d80b796f860d09c139b on develop.\n. \n\nCoverage remained the same at 69.626% when pulling eb0c00ee2225704a29061efd3a1aa4a7ea786b7e on fix-networkID into 7ea11ab420c5dbd09e84dad6dfa3ba6a27a41d02 on develop.\n. \n\nCoverage remained the same at 69.626% when pulling b48df01e088259e75903c2614aae80d26cd7a182 on fix-develop-port into 7ea11ab420c5dbd09e84dad6dfa3ba6a27a41d02 on develop.\n. \n\nCoverage remained the same at 69.805% when pulling 2115b0bd576982343bf6eba8b0dd13e0da0ed132 on fix-missing-dep into df6e3171e16f4e3b843e43053cfd393e7f630fb5 on develop.\n. \n\nCoverage remained the same at 69.626% when pulling 55cb192d225d5ee0234559513f029abb3dc53346 on codfish:patch-1 into 7ea11ab420c5dbd09e84dad6dfa3ba6a27a41d02 on trufflesuite:develop.\n. \n\nCoverage remained the same at 69.626% when pulling f9fa3a472492710b5c4ac3d57efaccf10966734d on kale-code:kale-strict-fixes into a07b370e597dcd60bb936a72fb23a59fb44200ee on trufflesuite:develop.\n. \n\nCoverage remained the same at 69.626% when pulling 8ea7eaaffe0d74b0e3459ca5174fb0ce85255cfb on api-change/truffle-decoder/pass-in-provider into a07b370e597dcd60bb936a72fb23a59fb44200ee on develop.\n. \n\nCoverage remained the same at 69.626% when pulling 76be9f91c22a8479d33a531e3713375681875cff on fix/contract-decoder/validate-contract-node-with-prop into a07b370e597dcd60bb936a72fb23a59fb44200ee on develop.\n. \n\nCoverage increased (+0.006%) to 69.632% when pulling 83d13ff192d4a998bc3a6d63d2233551fbc76ba5 on windows-testresolver-import-path into b2a61f568e17f3d2d717c876f487aa7eb6cb4514 on develop.\n. \n\nCoverage remained the same at 69.632% when pulling 401d718a46237cd585cebaf989a22488a7113e8d on upgrade-ganache-core into 935e91b3fbe96b843e9a1d80b796f860d09c139b on develop.\n. \n\nCoverage increased (+0.08%) to 69.89% when pulling 3c1dcb4dd3b63707749a77d2710341e282b52113 on update-compiler-supplier into 507c2de6fed390132fc8ad184d0db5fc4ea335d5 on develop.\n. \n\nCoverage remained the same at 69.805% when pulling 1a6c9d4458d4f00c2782eddcfdd8c6329f93fe08 on fix-bignumber-require into 507c2de6fed390132fc8ad184d0db5fc4ea335d5 on develop.\n. \n\nCoverage increased (+0.01%) to 69.815% when pulling 17124331ba2be17a32a800505ca94752b5d2872c on node-version-compatibility into f4071ecfa661a32de4564a18033df736588ddb59 on develop.\n. \n\nCoverage remained the same at 69.805% when pulling 0b48df0900fc880306c8ad370357cef654d64423 on sbrichards:update-contract-template into f4071ecfa661a32de4564a18033df736588ddb59 on trufflesuite:develop.\n. \n\nCoverage remained the same at 69.805% when pulling 90748b1dc9f182b801220254efa60c7cdff93728 on edit-truffle-contract-readme into f4071ecfa661a32de4564a18033df736588ddb59 on develop.\n. \n\nCoverage remained the same at 69.9% when pulling c247f2f04cb3f9eb2e82773aa4cbb352041e6342 on baermathias:patch-1 into d15834b5937554f0376902a3767dc8678012deb6 on trufflesuite:develop.\n. \n\nCoverage decreased (-0.006%) to 69.894% when pulling 60dee610cef2b3d7f092233fe06bd1cb51743e50 on maksim-tolo:truffle-contract-dependencies-fix into d15834b5937554f0376902a3767dc8678012deb6 on trufflesuite:develop.\n. \n\nCoverage decreased (-0.004%) to 69.896% when pulling 702f678a82d0f19a9a575891e0abf5b7fc17f69c on update-docker-compile into d15834b5937554f0376902a3767dc8678012deb6 on develop.\n. \n\nCoverage increased (+0.002%) to 69.896% when pulling 702f678a82d0f19a9a575891e0abf5b7fc17f69c on strategy-method-update into 8bdf55fdca5ec260b1e9aae486b5ac5af5ff5495 on develop.\n. \n\nCoverage decreased (-0.03%) to 69.868% when pulling 7c6e761e10ebc3198ae5fee4e84ea03ce86de6cc on update-docker into 8bdf55fdca5ec260b1e9aae486b5ac5af5ff5495 on develop.\n. \n\nCoverage remained the same at 69.896% when pulling 12bd654ae7186a40edf534187ce5763205cf259c on update-truffle-config-messages into 56f22448e891e9cc6131314ea33a9ce3185fe83a on develop.\n. \n\nCoverage decreased (-0.03%) to 69.837% when pulling cd36910003be282172650f4ea080afc490746aad on united-allocator into bee012c8bd1070f6e41969bd158ba4621a3326a0 on develop.\n. \n\nCoverage increased (+0.006%) to 69.843% when pulling 3a692c67a3101fe9dfea8da3a5b395e30fc54183 on create2 into cd36910003be282172650f4ea080afc490746aad on united-allocator.\n. \n\nCoverage remained the same at 69.843% when pulling 064f42cf23d6caef2f3056f7a237c68200692700 on update-compile-help into 087fa83654cf44631bef750a83f232b8d65a9308 on develop.\n. \n\nCoverage remained the same at 69.843% when pulling 6c76a3400b614f8fcd14c181c240645ed822077d on remilb:fixHelpConfigCmd into 087fa83654cf44631bef750a83f232b8d65a9308 on trufflesuite:develop.\n. \n\nCoverage decreased (-0.01%) to 69.843% when pulling dc83ccdb057b2e25ea7e718a4413c39e6e7106c4 on vellengs:patch-1 into ab255747314b11601c90cd590d1ac30a56560abf on trufflesuite:develop.\n. \n\nCoverage decreased (-0.01%) to 69.843% when pulling ee0a1d28f72380043f3b229541d46ff37c11f8aa on deployed-payable-addresses into ab255747314b11601c90cd590d1ac30a56560abf on develop.\n. \n\nCoverage remained the same at 69.843% when pulling 98e3d66d6a2f145359e9ee737c5350dafa157143 on bundle-analyze into 28815e6c5bd29bd26c6ac3ec4035e6618115f118 on develop.\n. \n\nCoverage increased (+0.1%) to 69.957% when pulling 63ca4b59191c3200ac99b580ff5bd06e4c1fa311 on reference-types into 28815e6c5bd29bd26c6ac3ec4035e6618115f118 on develop.\n. \n\nCoverage increased (+0.007%) to 69.851% when pulling 17c3045313f35ba33bc17748938b11b551b7ad4f on could-not-connect-feedback into 28815e6c5bd29bd26c6ac3ec4035e6618115f118 on develop.\n. \n\nCoverage decreased (-0.002%) to 69.955% when pulling 946350c35802c650f5c6119978fda5573a3a1a5f on compilation-reporter into 67ac461ef579b3ba9b0de008d68638bc042ce2c6 on develop.\n. \n\nCoverage remained the same at 69.964% when pulling e53b8aa12d524e8f371b2a4604dcb5cb8a6c66a4 on fix-gitignore into 993a8832e9f70a1a6f7534fb42e72d38bb17ffb6 on develop.\n. \n\nCoverage remained the same at 69.964% when pulling 7bcd140f94cf27dc088784e33b9d5dcb25e20c5c on pin-web3-version into 77e4c6831e7ce7017d4a783a1990a43b1297aea4 on develop.\n. \n\nCoverage decreased (-0.003%) to 69.961% when pulling a0e7199e26b3747733988ca07eeafffbe7939d19 on Shadowstep33:fix/windows-linking into ade12e526107388ed835a512661ac664e2ab5871 on trufflesuite:develop.\n. \n\nCoverage remained the same at 69.961% when pulling 44ee988256801d0aa479e9c6455efdcc48e62f2a on zachlysobey:package-json-repository-field-update into b34ddf77ee05583dd272c9ad418439d38e17743a on trufflesuite:develop.\n. \n\nCoverage increased (+0.02%) to 69.981% when pulling b0040dcde7b8b705b302fe733408af68eeb7e548 on fix-reset into b34ddf77ee05583dd272c9ad418439d38e17743a on develop.\n. \n\nCoverage increased (+0.009%) to 69.972% when pulling 0dfea4db51f7f4ade052344bfdf1d19553e5d76a on stack-allocation into 36f5519fa9326e2c6068aac2ad14345b30df9998 on develop.\n. \n\nCoverage decreased (-0.2%) to 69.805% when pulling aacbe3f72508adf93d305b1ba6438320eece49fb on rearrange-core-tests into 0b278bbc35d9847ccbd0745c1607e3b1229fd245 on develop.\n. \n\nCoverage decreased (-0.09%) to 69.88% when pulling 38152c1c66ee3555504e6526bfb1aeadca6962ed on post-install-solc into a51657daf42893c5a411d62015c743c0adaa300c on develop.\n. \n\nCoverage increased (+0.01%) to 69.994% when pulling 4830a0b07e963b16ba567963e8223f9b94cbc6ba on analyticsSanitizeUserInfo into 0b278bbc35d9847ccbd0745c1607e3b1229fd245 on develop.\n. \n\nCoverage remained the same at 69.979% when pulling c3891257aeaf4519b1b30a28e8e2d0cb5645d88e on addBoxNameAnalytics into 0b278bbc35d9847ccbd0745c1607e3b1229fd245 on develop.\n. \n\nCoverage increased (+0.2%) to 70.209% when pulling 2b1e1f99d55398da13ada4fafc28dd7b8f532216 on mapping-keys into 923db94d9cdb467e8d8c43ccf8cb88a862b144b0 on next.\n. \n\nCoverage remained the same at 69.972% when pulling e2b96c9fed55bdb3d920742e2e65c123fad11b43 on relevant into ae69fc42e2d5fd17e89274ee6a6f73f59eacf6d4 on develop.\n. \n\nCoverage increased (+0.007%) to 69.979% when pulling f8fb06253d36713c39569d2f8abb876c173f7c5a on brokenpoint into ae69fc42e2d5fd17e89274ee6a6f73f59eacf6d4 on develop.\n. \n\nCoverage increased (+0.1%) to 70.174% when pulling 91320133027ede361caa848292dc00e9900a6b76 on maxsam4:fallback-url into 06f20cf35fd0b5dd7184341938eb5af6cba425c8 on trufflesuite:develop.\n. \n\nCoverage decreased (-0.006%) to 69.93% when pulling 081980da8240d5b46cd6f7da160054e2a58679b4 on fix/empty-network-migrations into 8985e031c01484827367acb3496eb0be1ce3acac on develop.\n. \n\nCoverage decreased (-0.04%) to 69.944% when pulling dbb641d28cc3043e4c781e4c6a5a38536e30c436 on gasp into 0b278bbc35d9847ccbd0745c1607e3b1229fd245 on develop.\n. \n\nCoverage remained the same at 69.979% when pulling d2abf0df6ff59b91cda79030d42b5bc71e0f06fb on breaktestpattern into 0b278bbc35d9847ccbd0745c1607e3b1229fd245 on develop.\n. \n\nCoverage increased (+0.08%) to 69.792% when pulling 43949b58fab1b19e866ea96bb11ef480252a5587 on compiler-version-output into efbe6d246814cda2b53522cab2ea8d40dd099d4f on develop.\n. \n\nCoverage increased (+0.2%) to 70.009% when pulling 9079d9ca9f57330bd7d2b98309b54a21e30fd526 on next into 275a9301aa8f0dd0114d83ed10ea6b0c19dec8f3 on develop.\n. \n\nCoverage remained the same at 69.771% when pulling 0f1363d95efe6de419899f8b9bfd34df17e44617 on geth-gasErr-output into 275a9301aa8f0dd0114d83ed10ea6b0c19dec8f3 on develop.\n. \n\nCoverage remained the same at 69.771% when pulling bb49b70be551427e2edbf5b9e385a68fa2affffe on rm-node6-build into 275a9301aa8f0dd0114d83ed10ea6b0c19dec8f3 on develop.\n. \n\nCoverage decreased (-0.006%) to 69.764% when pulling cf2fa5d2e1ad4a23c41a1f254289b89668b81c72 on improve-profiler into f183091cc9f68951a73567c5af4f57018d4b6414 on develop.\n. \n\nCoverage remained the same at 69.771% when pulling 532367b92ef050721a22e8c5c177747bcdb23eff on test-less into f183091cc9f68951a73567c5af4f57018d4b6414 on develop.\n. \n\nCoverage decreased (-0.07%) to 69.936% when pulling fc385fa83497cf110cd7587fba662ba4a4e30b11 on multiadvance into 85ed170e3f9a95f96f3a7cd332ac4524c9d79c6c on develop.\n. \n\nCoverage decreased (-0.006%) to 70.006% when pulling a280debc280dbab3df70dfb14669332a69c5a629 on simonDos:fix/testEventIndexedValues into 079519021d772a258a3d78f0b07be94fa81519d2 on trufflesuite:develop.\n. \n\nCoverage increased (+0.1%) to 70.038% when pulling 92167cccf072a2d0424b100eacfbebfd3ac8e7ae on key-interface into 8985e031c01484827367acb3496eb0be1ce3acac on develop.\n. \n\nCoverage increased (+0.1%) to 70.038% when pulling d534e048ec64b8682e97551c2abee7b0a89861ae on edit-obtain-command into 8985e031c01484827367acb3496eb0be1ce3acac on develop.\n. \n\nCoverage decreased (-0.02%) to 70.02% when pulling b0e964e73b7694ed3f18e62765066c54339a06a2 on enhance-develop into b2a249bcc100f023dd41b93185b499b8f81de14b on develop.\n. \n\nCoverage increased (+0.04%) to 70.077% when pulling 2377c6542a2f03fe7ee5708eda7f0ba4a18dc19e on calldata into 0dfb84b660da9b1d180c8cffc22c5f04bdb5fb6b on develop.\n. \n\nCoverage remained the same at 70.038% when pulling 2dfedbdc0a4889c34caf9dcda40a86fc516e9455 on up-ganache-core into b2a249bcc100f023dd41b93185b499b8f81de14b on develop.\n. \n\nCoverage increased (+0.003%) to 70.041% when pulling 69ca0671cda5c44bf99b1ff6327686324551c429 on scopes-fail into f4daadd27f07ae82aa86abdee617429dbf14b8f1 on develop.\n. \n\nCoverage increased (+0.003%) to 70.062% when pulling 2bfd2d6591d9daad007a98bd98b828f022f5b2db on modifier-args into 4bc36bf3a61e5556321b94a00b9320ce5ef3247d on develop.\n. \n\nCoverage decreased (-0.007%) to 70.055% when pulling 755e2a7c46875801e975688b76ff9555ab9beed2 on fix-from-default into bc13205b022446dea3f4218dc6798ad3d9a79cae on develop.\n. \n\nCoverage increased (+0.005%) to 70.06% when pulling 65bbeae58ff89129a836e6cf7aa42f02a28f79e3 on fix-report into b8736dd77073720efa77d9d6984e952d4d1a91ce on develop.\n. \n\nCoverage decreased (-0.01%) to 70.045% when pulling 3163eaeb284729e046a9e27e46298c1e859d9780 on metala:fix/truffle-core/testrunner/non-anonymous-events-logging into f646574a793bdca895b0cc9fb556a263fb70a6c2 on trufflesuite:develop.\n. \n\nCoverage remained the same at 70.174% when pulling ac5a9783f5537ef415bf5058cefa684aa79cc136 on storage-pointer-info into a81018c383bbc7d8805e043da788127f9543061b on develop.\n. \n\nCoverage remained the same at 70.056% when pulling 2e78199e1cbc4c669758986b7bb728cb80ddf56c on string-to-id into a37d9e1cbb1f9e820ec576e653be0712237cc789 on truffle-db.\n. \n\nCoverage decreased (-0.003%) to 70.171% when pulling 66180d8a3c7d335bffcbefabc93fa7c9bd4c537a on fix-cache-again into ad0c3b1bd681d443e36b406d2a42fd8efefd6198 on develop.\n. \n\nCoverage decreased (-0.005%) to 70.176% when pulling 7f02252b488de112b8c9d5f6a84486bf56ea1712 on display-web3-info into 28a888cad219b5c446daf37a1151e74883fe2ab6 on develop.\n. \n\nCoverage decreased (-0.4%) to 69.846% when pulling 1663dad7ed6a7f4b2b3c8a18cc9a7059bba3d158 on modifier-params into 88080fb71dfa66fb4bb4f3e1689a0fdb06787772 on develop.\n. \n\nCoverage increased (+0.009%) to 70.185% when pulling 186f2e43ab01af81a14674d21e1aa7df85324416 on change-cache-path into 9a90acba194b8ebb5114b23e33e95aedc4a029c2 on develop.\n. \n\nCoverage remained the same at 70.176% when pulling be0f7786dd2f23a2ef71fb92c29f91d0677f5ced on linkdesu:patch-1 into 9a90acba194b8ebb5114b23e33e95aedc4a029c2 on trufflesuite:develop.\n. \n\nCoverage decreased (-0.002%) to 70.174% when pulling 1b6e2ec3191f30472cef77d22a0b12c264fef4a9 on fix-vyper-testing into 76f1fb284845210d3cd9983b09e3e7d75f077090 on develop.\n. \n\nCoverage increased (+0.3%) to 70.495% when pulling 64290cb1dc08a1499e92b521e017be3bdd27b16e on adapter/init-and-quorum into ca7fdc1b08792196c3ee4d9fa98623d254a8e9bd on develop.\n. \n\nCoverage increased (+0.07%) to 70.346% when pulling 494c4415fa01ef89d2a19a8923ad06cd53078a81 on adapter/large-gas into f2bbd40d617988aacb3f5ca38156ce80bf54f945 on develop.\n. \n\nCoverage remained the same at 70.185% when pulling 82c9ba30239a89fff4209ae4bc30833fd7f112b2 on manual-address into ad1f870ca918a88a0f75671c15892fe0006a8081 on develop.\n. \n\nCoverage increased (+0.2%) to 70.217% when pulling 2da2d9ac33158bcec2f164a3e278a5f9d73bfc0d on no-dummy into 39a7eccc07fc74f3d8efc59fe7d9183a58165eeb on develop.\n. \n\nCoverage remained the same at 70.217% when pulling 41c70054bc290f2461b36a9ad8ce48b35dfd5baa on edit-web3-version into 61c6b9be2fef7435f29bd2f0519c906b9b1a6445 on develop.\n. \n\nCoverage increased (+0.06%) to 70.28% when pulling a372bd094f00cfc20b6ccac6b42f6a9c6514146b on fix-solidity-unit-testing into 61c6b9be2fef7435f29bd2f0519c906b9b1a6445 on develop.\n. \n\nCoverage decreased (-0.02%) to 70.196% when pulling 2352b5b329935f99124bb9207152e32d447a9e4b on create-instances into 61c6b9be2fef7435f29bd2f0519c906b9b1a6445 on develop.\n. \n\nCoverage increased (+0.1%) to 70.313% when pulling 7bd471e46983a388b76ab2d928e6b1074eca7690 on codex-lite into 88080fb71dfa66fb4bb4f3e1689a0fdb06787772 on develop.\n. \n\nCoverage remained the same at 70.28% when pulling 175e6b753aa002123afb725308bce6b215c82aea on cache-travis into f2bbd40d617988aacb3f5ca38156ce80bf54f945 on develop.\n. \n\nCoverage remained the same at 70.056% when pulling f38c8b28bd23c6f04e27d52bc98c39eb79bd6d1a on truffle-db-contract-and-constructor into 497360b6e57ace88c308c80df99e41379fe455a3 on truffle-db.\n. \n\nCoverage remained the same at 70.346% when pulling 19659da3f8d9747054730bbee582c1f7fe0b9151 on watch-in-order into a6155d279f8575aea872ae57e712e7810c8248e9 on develop.\n. \n\nCoverage remained the same at 69.709% when pulling 0ac61a75498bcdb637c220271607521838bd9114 on document-to-flag into 30dcd35cd64240c90f6225d722715bcb7537f94f on develop.\n. \n\nCoverage remained the same at 69.709% when pulling 00d86d595bb87e972ebda5c59aeb9f8bd6e10713 on data-key into 30dcd35cd64240c90f6225d722715bcb7537f94f on develop.\n. ",
    "sulliwane": "@kyriediculous not familiar with your workflow neither.\nMost projects run truffle compile to get /build directory containing all ABI.json files, and then publish to NPM. Then in js file, { abi } = require('packagename/build/contracts/ABI.json')\nThat's indeed a BIG issue when size matters, ie: frontend applications (Single Page App for instance).\nWe can't reasonably import +500KB json to just use the abi field in it (probably < tenth of the total size), neither manually remove the ast fields from the json.\nWhat's the recommended solution?\nMany thanks!\nEDIT: looking at this comment : https://www.reddit.com/r/ethdev/comments/9egprt/how_to_reduce_trufflecompiled_json_files_to/e5ovtuz/ seems we'll have to wait for truffle v5.1 for this feature.. @kyriediculous oh cool, didn't suspect webpack to be that clever ;) thanks for making your point clear. ",
    "hellwolf": "I created a gist that minimize the contracts using jq utility: https://gist.github.com/hellwolf/473d598b7963079e32af98ab168bc78a. okay, I tested with ganache and somehow sendAsync was not a problem.. I meant sendAsync was not a problem, it was not relevant to the issue I described.. ",
    "vince16": "Still a problem in the latest truffle. \nVersion :Truffle v5.0.0-next.12\n. ",
    "itstehkman": "@gnidan I think this is a good question to look into. Without looking into it much, my intuition says the breakpoint should match with the left-most AST node, if that corresponds to the left-most part of the line of code. I am probably oversimplifying the problem and am wrong, but would love to hear some more about it.. ",
    "haltman-at": "So, the existing fix resolves this problem by interpreting line-based breakpoints not by associating them with a particular AST node, but rather by breaking whenever the trace enters that line from elsewhere (i.e., it associates it with the first AST node chronologically, which may be different each time the line is entered).  A major reason we decided to do it this way is that breaking earlier is better than later because you can (at present) go forward but not backward, so we decided to err on the side of safety.  In any case, the original issue has been addressed, so I'm going to go ahead and close this (really, I should've closed it when I merged in my changes, I just forgot); @itstehkman, if you think it makes sense to raise a further issue about this, feel free to do so.. Indeed, this remains unfixed.  I'll reopen it.. So just to be clear, this is good to go now, right?. Sorry, two additional comments:\n\n\nI don't think we want to actually print this every time.  It's a little too fine-grained, you know?  On the other hand, I get why you don't want to print it only on ;.  Talking to @gnidan, his suggestion was to print it only on p; that way you don't need to do a ; to see it, but we also don't print it out with every single thing.\n\n\nAnother suggestion from @gnidan -- when we print this, we probably want to print how many steps it's out of, as well.  That can be accessed at session.view(trace.steps).length.. Interesting!  Based on @ccolorado's suggestion I have to wonder, maybe this should more generally be a possible new way to specify a breakpoint?. Hey, so, this seems to have been left to languish, but I incorporated some of the ideas here into PR #1744 which has now been merged.  I'd forgotten about the idea of a step-count based breakpoint, though.  I'll need to write that down.  Thanks again, hope you find this helpful!. Hello again @ccolorado!  I've now also submitted PR #1766, which adds a multiple-advance command.  Once that's merged, you'll (assuming you're willing to do some subtraction) be able to skip directly to the step you want.  (Note that steps are 1-indexed now, not 0-indexed, so watch out for that.)  So, I hope that addresses your remaining problems.  Thanks again for the suggestion!  Let us know if that suffices and perhaps we can close down this old one.. Hm -- for some reason a test is failing on this even though it was working a few minutes ago, and all I did inbetween was not something that should have affected it.  Hold on before merging this; I need to see what's up with this test.. Disregard previous comment; tests seem to be working now.  No idea.. Note: The intermittent failure should now be addressed due to PR #1466.. OK, the optimizer has now been turned off for the tests (thanks @gnidan), solving most of the problems.\n\n\nIn addition, I've passed the files argument to prepareDebugger in tests that were previously missing it, which should (independently of the 0.5.0 update) fix their intermittent failures.\nA word of warning, the compiler version is currently set to 0.5.0 rather than ^0.5.0; this is because the latter doesn't work on my machine.  We'll have to figure out some way of getting the latter to work, because we don't want to have to constantly update the version every time there's a new version of solc.. OK, so, there's been a lot of confusion about the slotAddress thing.  I don't think people have properly understood in just what situation this becomes relevant or why I think it's the correct thing to do there.\nNote that it's very possible that this situation never occurs in Ganache at all -- in the debugger, it's due to the allocator behaving in a way that I think is not good, and which I'm hoping to address in my next PR; and it's very possible that Ganache just doesn't do this and so will never encounter this situation.  In any case, I'm going to talk about things from a debugger-centric point of view, as that's what I'm more familiar with and what I tested with.\nSo.  Let's imagine we have some big, complex structure we want to decode.  Some horrible multidimensional mix of static arrays, dynamic arrays, and mappings.  (We'll leave structs out of this for now.)  Maybe it's a mapping(string => uint[][5]), or something.  We can imagine this structure as a tree.  The structure itself is the root node; its elements are the children, with the edges labeled by the keys; and then the children have children of their own, and so on, down until the leaves which are value types (in this case, uint).  If we want to decode a specific leaf, such as structure[\"hello\"][4][37], we do this by walking down the tree, starting at the root.  The address in storage of this leaf is represented, then, by a pointer with a path depth of 3, because it's 3 levels down; each link in the chain of paths represents going down some edge, with the offset at that level (or key, for mappings) telling us just which edge we're going down (obviously hashPath plays a role too).  So far, so simple.\nNow, let's introduce structs to the mix.\nThere's a famous way of representing arbitrary trees as binary trees; if you've ever, say, implemented a trie in C, you're familiar with it.  It looks something like this:\ntypedef struct trie {\n  trie *first;\n  trie *next;\n} trie;\nRight?  The first pointer points to the node's first child, while the next pointer points to the node's parent's next child (the node's next sibling).  So if you want all of a given node's children, you follow its first pointer, and then the next pointers give the children in a linked list.  We've represented an arbitrary tree as a binary tree, with each node storing just two pointers.  But note that this means now, that if we want to step down the tree from a particular node to a particular child, we are, in this representation, not just taking a single step down -- we're taking one step down, followed by a number of steps to the side.  But also note that these steps to the side exist only in the binary tree representation; conceptually, in the original tree, we're still just taking a single step down.\nSo what does this have to do with structs?  Well, when the debugger's allocator allocates a struct (or contract), it doesn't just use path for representing steps down, as you might expect.  It also uses path for representing these steps to the side.  This muddies things up considerably.  Conceptually, each of a struct's members is just a single step down from the struct itself; there shouldn't be anything nontrivial going on in the path there.  But the debugger's allocator, rather than returning instructions for how to step directly downward from the struct to a given member, in the form of a single offset, instead returns instructions for how to step sideways from member to member.\nUnsurprisingly, I don't think this is the right way of doing things.  These sideways steps fundamentally do not exist in the conceptual picture we want to draw, that of stepping down from parent node to child node; they're purely an artifact of the representation.  And so I don't think we should be storing them -- each link in the path chain should always represent a real step downwards, not a fictional step sideways from member to member.  Individual members within a struct should be represented by a single step downward from the struct.  But, while I don't think we should have these fictional sideways steps in our struct allocation, for the moment we do, and addressing that will be a separate PR.\nSo why does this cause a problem, and why is slotAddress the solution?  Well, imagine once again that we're walking down our structure.  At some level we hit a struct, and we want to walk down one of its edges and form a pointer to the child node below.  How do we form that pointer?  If it truly were just one direct step down -- as it is for static arrays, dynamic arrays, and mappings -- we'd just make a new pointer with the parent node as our path and the offset telling us which edge we're following, as usual.  But instead, when we go to look up the way to this child node, we find something with nontrivial path -- we find a chain of multiple steps from the struct to its member, even though conceptually there's only one, most of these steps being fictional sidways steps.\nSo what do we do here?  How do we encode this into our Slot datatype?  We have several options.\nOne possibility would be to say, well, maybe we should allow such things as offsets, rather than just simple integers.  I think this is complicated and unnecessary.  We are, conceptually, taking a single step down from the struct to its member -- a single integer should suffice for that fine.  There are no real intermediate steps worth storing, only fictional sideways ones from member to member.\nA second possibility would be to take this path information that we've found and put it in the path.  But this would put things in the path that don't really belong there, putting in fictional sidweays steps -- to members that aren't even the one we're looking for -- alongside real downward ones.  As I said above, the depth of the path chain should be equal to our current depth in the tree.  Taking this path information and putting it in our path would destroy that invariant, muddying up the path with steps that conceptually don't exist.\nThe third possibility is the one I took: Take these fictional sideways steps and collapse them (along with the one downwards one), with slotAddress, into a single offset, corresponding to the single, real, step downwards that we are making, the step from struct to member.  This is why I said earlier that even though the use of slotAddress makes it appear that we are losing information, any loss is purely illusory.  The point of path is to make sure we do not lose information about the actual steps downward, but these are fictional sideways steps, ones that often go to members unrelated to the one we're looking for, and which don't belong in the picture in the first place; and as I said, I intend to rewrite the allocator to eliminate them.  But as things currently are, where a single conceptual step downwards can be represented internally by one step downwards to the wrong member followed by many steps sideways until we reach the right one, the best thing to do is to collapse all these into the single downards step, from the struct to the correct member, that should actually exist in our picture; and not include these sideways steps or steps to the wrong member at all.\nIn short, despite the apparent loss of information, the use of slotAddress loses no actual information, and is, in cases such as these, the correct way to get the internal picture to line up with the intuitive picture; the information it loses is purely a representational fiction that should never have existed in the first place.  None of the actual path information we do care about is lost.. At the suggestion of @gnidan, the \"failsafe\" mentioned above has been removed; an exception is now thrown instead.. Hm, so, wait, if we ignore the part about being able to decode contracts you don't have artifacts for, the original request should be possible, right?  Like if I added an interface for it, so long as Ganache had the artifact it would be able to supply the artifact and address separately?  (Does Ganache still only track state for contracts it can decode?  Not sure if tracking state for undecoded contracts would have to come first.). Oh, does Drizzle also use the contract decoder?  I didn't realize.  I thought it was just Ganache, which is why I was asking to what extent Ganache would be able to use it if I implemented it.  In any case yeah this seems like something I should do.. OK.  I guess the question I have then is about these Contract objects.  Like, right now the contract decoder requires passing in Contract objects.  Do you already have Contract objects you can pass in (that are just lacking addresses), in which case this will be really easy?  Or am I going to have to construct them from scratch, from other passed-in artifact info?  Not that that should be hard either, just I'll need to find out how to actually do that, because they seem to be imported from some JSON file rather than a JS or TS file.... (Also in favor of address as optional argument.). Oh, I see, the Contract object is literally just the artifact.  Duh.\nOK, so, looking through the contract-decoder code, it looks to me like we can just get by with just inserting a given address, and we don't have to fake up a whole networks object, right?  There's nothing that would go wrong if we just skipped that step?  This is actually just as simple as inserting the specified address?. Great!  Guess I'll do that then. :). OK, just PR'd #1812 to address this.. Whoops, this kind of slipped off my radar!  Fortunately, I think we might have already fixed this.  This seems to resemble issue #1752, which is solved by PR #1779.  And indeed when I try it right now on develop, where #1779 has been merged in, I'm not getting this problem.  Could you try it again once the new version of Truffle Debugger is out and see if you're still getting the problem?  Thanks!. So, a note: In order to get this merge to work out, I had to delete a number of unused variables in the unrelated truffle-compile in order to satisfy eslint.  I am hoping this is not screwing anything up.. Let me add a comment on this most recent commit, because it changes the structure somewhat.  Literal pointers are now no longer passed to decodeValue, since they might not be values (the old code got this right, silly me), but rather to decodeLiteral.  Since literal pointers come from the stack (unless they're string literals), decodeLiteral resides in stack.ts, with decodeStack now calling it.  String literals will be dispatched by decodeLiteral to decodeValue, but this is kind of a hack, and I'm intending to change this in a later PR.. Thanks!  While looking through this though I actually noticed some unused or commented-out code I forgot to delete, and one series of checks I think might be in the wrong order, so I'm going to go fix that before merging this.  (I also noticed one case that I think I missed regarding mapping keys, but I'll fix that in my more general mapping keys PR, not attempt to redo this to include it.). OK, I did make one substantive change after approval: I removed the special case for assignment expressions, since they're perfectly good expressions and could be used as mapping keys.\nHowever, there is still a problem that IndexAccess expressions won't necessarily work as mapping keys.  Oops.  Missed that above.  However, I'll fix that in my next PR, not this one.. OK, this commit addresses the above, and also fixes the LEARN_ADDRESS case, which I realized I, uh, entirely forgot to test.  It had a problem.  I fixed it now.... It is not!  Thanks for pointing this out, I'll have to take a look.  This certainly looks like a debugger issue rather than a ganache-cli issue.. I'll probably need more reproduction info to figure out what's going on, I should note.  Just looking through the code, I don't know why this would happen.. Thanks @isaacsultan!  With your example I was able to quickly isolate the problem and I have created PR #1779 to fix it.. So turns out that we can't use util.isDeepStrictEqual because that's a Node 9 feature (thanks to @gnidan for pointing that out).  So, I've replaced it with lodash's isEqual.  While I was at it I also fixed the incorrectly-done installation of lodash.range I did earlier.. Latest commit adds back in individual allocation selectors, so data.info.allocations.storage is no longer gone, in case anyone outside wanted to make use of that for whatever reason.  But the rest of data.next is still removed.. OK, I've created PR #1788 to fix this bug.  For what it's worth, the problem is not related to memory arrays; rather it was related to local variables of struct storage type, hence why it occurred on line 19, where the local Game storage game was declared.\n(Edit: For what it's worth, a local storage variable that was a statically-sized array of structs would also have triggered the bug.). OK @gnidan, what I actually did is slightly different from your suggestion -- I renamed data.next.scope to data.next.node, renamed data.current.scope to data.current.node, and added a new data.current.scope which is just an alias for data.current.node, nothing that this use is deprecated.  (I didn't add data.next.scope.). Yeah, that was what I was originally going to do, but then I was like:\n\nI don't want to rename things if I don't have to, especially something that's used a lot, and\nThe storage address is really the relevant address in a data context, not the code address, so I figured it was fine (like there's no selector for the code address for it to be confused with).\n\nIDK.  I can change it if you want, but I think it's fine as-is.\n(Also I disagree that using storage addresses is clever, I think it's just the right thing here. :) ). Actually, hold on.  This possibly has problems I didn't realize.  Still investigating.. OK can't reproduce the problem I encountered, disregard previous comment.  It was likely unrelated anyway.. OK, changed.. Oops!  Forgot to turn on expandtab.... OK, done.. Heh -- a number of my whitespace omissions were to get things (with their comments) to fit on one line.  A lot of comments are going to have to become separate lines now, I guess.... Oy, and I was going to change longId to augId for clarity -- actually I thought I did do that but apparently not -- but I guess it should be augmentedId? Yuck.  Is cur, as in curDepth, at least an acceptable abbreviation?  That one should be common enough, right?. Good idea -- and the reverse functions (i.e. extract id, extract depth) should exist too.  As for a name... well, I'd probably call it augment or augmented, but I'll admit that might not be very clear.  Hm.  Not sure what a good name is.. Anyway, for now I've de-abbreviated all cases of \"cur\" and \"aug\".  I don't think there were any others I used.... I'm currently calling it augmentWithDepth, and the inverses idFromAugmented and depthFromAugmented.. OK, done, except that I have some comments which go on their own line but don't seem substantial enough to warrant whitespace before, so I didn't put whitespace before those.. I don't understand the point of this block; I thought we just got a TICK? What's going on here?. The style here is confusing. For both the ADD_CONTEXT case and the ADD_BINARY case, you define a function in the body of the case and then immediately use it, just once. Why define a function at all, if it's never used again? If it's going to be used again, why define it just here? I think this would be clearer just written out without the extra functions.. Oh!  I get it now.  The hack is not those lines or the if block, but that it's inside the while-loop.  I'd suggest adding a comment to the code with something like what you just said -- e.g., //only make this assignment the first time through the loop, or something to that effect.. Oh, interesting. Personally I'm fine with it, but I guess it's worth noting?  Anyway yeah all this passes my review at least.. I see, didn't realize, will fix!. Heh, yeah.. I didn't do that -- that's preexisting!  This line is only marked as changed because it's now under session.status rather than just session.. No problem. :). Oops.  Outdated comment from intermediate version, looks like.  Will fix.. Oh, thanks.. Hm, yeah, that could be worth doing.  So, a third test, then.... I can add that to the other instance of this pattern as well.... (Originally I had it as session.state, but that left the problem of what to call the variable state, so I renamed it to theState.  Eventually I realized that status was a suitable synonym for state, avoiding the collision problem.). (I'm guessing you probably told me that at one point while explaining the architecture, but I'd entirely forgotten...). A thought: Should the file be renamed then?  I named it transaction.js on the idea that, hey, this is where the tests related to transaction-saving go.  Whereas this is rather different.. I guess I'll call it endstate.js.. [Disregard this one, changed my mind.]. You've named the variable \"jumpCount\" and the message talks about a jump count, but this is counting steps, not jumps, right?  I'd suggest altering the message appropriately (and the variable name, if the variable doesn't get cut).. Silly thing, but house style here demands whitespace around the + operator.. So, this PR doesn't seem like a bad idea, but I'm leery of the implementation.  This variable you've added is basically reimplementing the trace.index selector, right?  I think it would make more sense to get the info from that existing variable (in this context, it should be accessible as session.view(trace.index)) rather than adding a second counter that does essentially the same thing.. This makes sense as a quick fix to me, although I too am confused as to why this was happening in the first place.  (I'm also confused by how this relates to the error message -- shouldn't we have gotten a destructuring error here, rather than further down the line?  Or am I misunderstanding how that works?)  In any case I don't see any reason not to include this.. (Btw, I'm guessing most of these nonfunctional changes due to that linter we're now using?  Man, this is going to make reviewing PR's a bit of a pain for a while...). After looking deeper at the code... I'm still pretty confused as to why this is occurring!  I could maybe see it if the files option was used, but it doesn't seem like the cases causing the problem involve that.. Oh, I see.  I mean, that's fine -- I already was separating things out anyway.  What would be really nice, as mentioned, would be to just have a single RESET action, but having reducers respond to foreing actions really seemed wrong to me.  In any case yeah I can add those sagas.. Oh, so you did.  Getting rid of the prefixing on the constants too; just including on the underlying string.. What, you think I want to make that comparison myself? :P. I'm confused -- it doesn't look like toMap calls cleanMappings, so it looks like if you have a mapping to mappings, the inner mappings won't get cleaned.  Am I mistaken?  What's going on here?  It doesn't look like it eventually gets passed to the object case, either.. Hm, I'm a little confused what the point of this generality here is, with convertValue passed as an (optional) input parameter.  Seems to me it's only ever called with convertValue equal to cleanMappings.  This isn't wrong, but it's a little confusing and I think over-complicated.  I mean, leave it in if you have some reason for it, but otherwise I'd recommend removing convertValue and just invoking cleanMappings.. Done.. Done.. Going to leave this one as-is, since it is indeed just the user-defined types.. That's preexisting -- I assume @seesemichaelj put that there.  I assume it's about the fact that key is of type any, which should be narrowed down to something more specific (I figure I'll get to that when I get to going over mapping keys more generally).  You're seeing it anew due to it having moved to a different file.. Then turn on prettier :P. I didn't fix it -- I removed it.  I didn't see a need for a separate function.  Later when I go through and make it so that we're always assuming definition is a type definition and not a variable definition, I'll remove all the duplication.. Or maybe I'll wait until the new decoder output format, actually.  In any case the point is I'll handle it eventually.. Yup.  Not sure it ever was while I was here.... Well, it can't be new -- if it were, the old code, which put them below rather than above the input parameters -- wouldn't have ever worked.... Done. Also made the analogous change elsewhere in that reducer. OK, I added one!  Hopefully you find it sufficiently explanatory.  (Honestly it's possible that the code in this case can be simplified now that I took out the relinking system -- as distinct from the initial linking system that's still in place -- but I didn't want to think through it again. :P ). I thought of that, but I liked having advance as a separate more primitive thing.  It would throw off some of the correspondence, at least, to do that.  Like, all the other existing sagas that currently call advance -- would they still call advance, but with an argument?  Would they directly call trace.advance?  Would what's currently advance be renamed to something else?  I decided to leave it alone and just add it as something separate.. Oh hm -- yeah doing it with a default argument would make sense.  OK, I think I'll change it to that way after all.. Hmm, I dunno.  I think I'm going to just leave this as-is.  I figure we can rearrange it later maybe.... Do you think it's worth calling that out in a comment?. The reason for the different capitalization is that elsewhere we consider calldata fairly abstractly, but here it's the data for the call. :)  Like callAddress or callContext.  So I thought it made sense to go with callData here.  But obviously that can be changed for consistency.  (Or rather, a different sort of consistency.). Yeah, I think I'll just leave this as-is.. A dynamic selector seems like overkill.  But I could still make selectors for each of the individual ones (with the overall one created automatically by reselect-tree).. See comment below. See comment above. Sure, I could add that I guess.. Well, I went ahead and did so.. Cool, I'll do that then!. ",
    "H34D": "here we go. closes with #1277 . ",
    "jmendiola222": "Thanks @cgewecke, I can't yet share the complete code base, but here are the basics. Let me enforce once again that this test do work on v4.1.14, with almost 100% coverage. \n```sol\nimport \"./MyToken1.sol\";\nimport \"./MyToken2.sol\";\nimport \"./OtherContract.sol\";\ncontract MyContract is Ownable {\naddress internal myToken1Address;\n  address internal myToken2Address;\n  address internal myOtherContractAddress;\nconstructor(uint256 arg0) Ownable() public {\n    myToken1Address = new MyToken1();\n    myToken2Address = new MyToken2();\n    myOtherContractAddress = new OtherContract(arg0, 40);\n    initializeConfig();\n  }\n```\nThen in out tests we have something like:\n```js\nconst MyContract = artifacts.require('./contracts/MyContract.sol');\ncontract('MyContract', function([owner, userAccount, ...accounts]) {\n  beforeEach(async function() {\n    this.myContract = await MyContract.new(10000 * 100, { from: owner });\n[x, y, z] = await Promise.all([\n  this.myContract.getX(),\n  this.myContract.getY(),\n  this.myContract.getZ()\n]);\n\nawait this.myContract.setParam(3 * x);\n\n});\n  it('WHEN not init should reverts', async function() {\n    const doing = this.myContract.doShomething(100000, {\n        from: userAccount,\n        value: 110\n      });\n      await assertRevert(doing);\n   });\n});\n```\nHope this clarifies. Thanks!. Thanks @cgewecke that was correct, on my migration file a had:\njs\n  await deployer.deploy(myLibrary);\n  deployer.link(myLibrary, MyContract);\n  await deployer.deploy(MyContract);\nWhere as we saw, MyContract contructor receives a uint256. Changing it to deployer.deploy(MyContract, 1000) solved this issue. Any clue on why this is not a problem in v4? Migrations are not runned on test for that version?\nThanks again!\n. ",
    "guix77": "Got the same pb.... I got it working, we need to use the 2nd form of link() since with new() the instance is not at the same address as the expected default with deployed(): https://github.com/trufflesuite/truffle-contract#mycontractlinkname-address\nconst myLib = await MyLib.new();\nawait MyContract.link(MyLib, myLib.address);\nconst mycontract = await MyContract.new();. ",
    "rsamo": "I had the same problem and this solved my issue.\n\n\nAdd solc compiler optimization to your truffle.js\njson\nmodule.exports = {\n  networks: {\n    development: {\n      host: \"127.0.0.1\",\n      port: 8545, // ganache-cli\n      //port: 7545, // ganache ui\n      network_id: \"*\" // Match any network id\n    }\n  },\n  solc: {\n    optimizer: {\n      enabled: true,\n      runs: 200\n    }\n  }\n};\n\n\nRecompile all of your contracts to get the optimized versions\nsh\ntruffle compile --all\n\n\nMigrate to Ganache\nsh\ntruffle migrate --reset\n\n\nI also upgraded to the latest beta version of truffle as it has a much nicer output and debugging enhancements, etc. You don't have to do this but just in case you want to.\nsh\nnpm uninstall -g truffle\nnpm install -g truffle@beta\nI hope this helps!. Glad I could help @roschler!. ",
    "luckyyang": "@rsamo That really helps, thank you!. ",
    "pynchmeister": "So is this fixed? Still having trouble here. ",
    "bryanmojica": "+1, I'm also having this issue currently with truffle unbox oasislabs/oasis-box - confirmed that the truffle-box.json exists @ https://github.com/oasislabs/oasis-box, yet am receiving the \"doesn't exist\" readout. . ",
    "chaitanyapotti": "Thanks. It resolves the issue. . ",
    "agxmeister": "Looks like this issue is actual only for Russia. :-( I will use VPN to access it, thank you!. ",
    "JoranHonig": "Hi @davidmurdoch, awesome that you are going to add this as a feature. I'm working on a tool that analyzes the quality of unit tests, and it would greatly benefit from this functionality.\nWhat will this functionality look like? Could it be possible to add a machine-readable output format that also contains the specific lines that are executed?. ",
    "davidmurdoch": "@JoranHonig I actually won't be the one working on this, I just assigned myself to make the stale bot from being automatically closing the issue. I just forgot to unassign myself.. @haltman-at is this error message one that you are familiar with?. @isaacsultan    This error message is coming from truffle, so I'll move the issue to that repo so it can be properly triaged there.. ",
    "kikoncuo": "Confirmed, I'm not the only one with this problem. ",
    "yvital": "Thanks to all!\nI reinstalled Visual Studio Build Tools and it all worked.. ",
    "mszykora": "I have the same problem under macOS.\n\nmacOS: 10.14\ntruffle version\nTruffle v4.1.14 (core: 4.1.14)\nSolidity v0.4.24 (solc-js)\n\n\nnpm --version\n6.4.1\n\n\n\nCould not fix the problem yet. ",
    "patt0": "@mszykora have you managed to fix the problem yet?. ",
    "iciakky": "having the same issue with my own project, even with truffle-config.js\nmodule.exports = {\n    all: false,\n    compileAll: false\n}\nI try this config because this line\nTruffle v4.1.14 (core: 4.1.14)\nSolidity v0.4.24 (solc-js)\n. ",
    "jaycenhorton": "Thanks for the info! I will report back when I am able to try. Assuming truffle v5 still requires web3@1 it'll be a bit before I am able to migrate. ",
    "sunlggggg": "\n@sunlggggg Is your codebase available anywhere?\n\nI use the stopWatching() deal with  the problem. . ",
    "Mordax": "Regarding the tests on Vyper failing issue, maybe Vyper can be checked separately to Solidity? Like having two test bundles that depend on a flag to run one at a time when needed, so that any Vyper issues are separated and easier to tackle and build more test support? . ",
    "zak100": "Thanks. I made some changes in the code and now its giving another unsolved exception. I ran the contracts on Remix. It did not give me any such error and generated warning messages. However it did not deploy the contract.\nI would add my problem to git hub.\nThanks for your response.\nZulfi.\n    On Friday, November 2, 2018, 3:32:50 PM CDT, Faina Shalts notifications@github.com wrote:  \nHi @zak100 are you still having trouble with this error? This error may bubble up when something is wrong with the way conditions in a require statement are being met. For more info see this similar resolved issue: #884\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n|  | Virus-free. www.avast.com  |\n. Hi @fainashalts,\nI think I am getting error at this line:\nMyContract5(address(throwproxy)).storeNum(22);\nIn the MyContract5 constructor is empty and in the above statement I am passing a value to it as done in the tutorial. The statement before its is:\nThrowProxy throwproxy = new ThrowProxy(address(mycontract));\nThis is storing the address of MyContract5 in 'throwproxy'. So we have to call storeNum(22) using throwproxy and I can't do that.\nHowever, if change Assert(...) to require(...) in TestMyContract5 i.e\npragma solidity ^0.4.22;\nimport \"truffle/DeployedAddresses.sol\";\nimport \"../contracts/Mycontract5.sol\";\ncontract TestMyContract5{\n   function  testTheThrow() public {\n      MyContract5  mycontract = new MyContract5();\n      ThrowProxy  throwproxy = new ThrowProxy(address(mycontract));\n      MyContract5(address(throwproxy)).storeNum(7);\n      bool r = throwproxy.execute.gas(200)();\n      require(r);\n   }\nfunction testNoThrow() public {\n      MyContract5 mycontract = new MyContract5();\n      ThrowProxy  throwproxy = new ThrowProxy(address(mycontract));\n      MyContract5(address(throwproxy)).storeNum(22);\n      bool r = throwproxy.execute.gas(200)();\n      require(r);\n   }\n}\ncontract ThrowProxy{\n   address public target;\n   bytes data;\n   constructor (address  _target) public {\n      target = _target;\n   }\n   function( ) public {\n      data = msg.data;\n   }\n   function execute( ) public  returns (bool) {\n      return target.call(data);\n   }\n}\nthen \"VM Exception.....\" error vanishes but i get another unsolved exception which is : Callback was already called.\nThe steps are:\nWhen I am executing:\n\ntruffle test\n\nI am getting following exception:\nD:\\SolidityContractsSelf\\MyContract5\\contracts>truffle test\nUsing network 'development'.\nCompiling .\\contracts\\Mycontract5.sol...\nCompiling .\\test\\TestMyContract5.sol...\nCompiling truffle/DeployedAddresses.sol...\nTestMyContract5\nError: Callback was already called.\n    at C:\\Users\\HP\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:966:1\n    at C:\\Users\\HP\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\async\\dist\\async.js:3885:1\nNote: \"Callback was already called.\" is a javascript error. So the whole thing is the outcome of mishandled exceptions in javascript and this is because Truffle was developed using javascript.\nZulfi.. ",
    "NoahZinsmeister": "So, I tracked down the bug. In line 231 of index.js in truffle-compile, interfaces/contracts defined in source .sol files are written to a returnVal object. However, if the same contract/interface name exists in multiple source files, the last contract/interface with the same name to be processed is the only that is saved, because previous values are overwritten. This leads to severe data corruption.\nThis bug has been frustrating, I'd be happy to provide further details or a dummy example so that this can get fixed (cc @CruzMolina let me know if there's anything I can do to help).. thanks @eggplantzzz!. ",
    "PaulRBerg": "In my case, this occurred when I mistakenly prevented the Migrations contract from being deployed.\nUpdate: not only that, but when a contract conforming to an interface doesn't implement all the methods properly. Truffle gives you more information when running the migrations normally.. ## Update\nAfter doing more investigation, I now understand that truffle-contract was developed in the first place to have a promise-based version of the old callback-based Contract class found in the 0.20.6 version of the web3 library.\nAs web3 ^1.0.0 implemented Promises and PromiEvents, wouldn't it make sense to nuke out truffle-contract? At least for me, the process of upgrading to truffle ^5.0.0 has been highly problematic specifically because of this inconsistency.\nPractically speaking, I posit that there would be much less confusion if Truffle injects web3.eth.Contract instances when running js tests.. Switching to using just the new web3 1.0 Contract object works seamlessly:\nlet abi = require(\"./build/contracts/Note.json\").abi;\nlet contract = new web3.eth.Contract(abi, \"your-contract-address\");\ncontract.methods.getNumber().call();\nJust like with #1455, TruffleContract seems to be causing more trouble than good. I mean this in a constructive way, I'm very grateful for your work, but I do feel that there needs to be more standardisation in the blockchain space.. It is still relevant. I followed the exact steps I posted 19 days ago and I get the same error. Here's what I get when I do truffle version:\nTruffle v5.0.1 (core: 5.0.1)\nSolidity - 0.4.25 (solc-js)\nNode v10.12.0\nMaybe you're using a globally installed truffle v4?. Apologies, it's all good now. I don't know why I had the impression that I was awaiting Note.at. It would be good to annotate this behaviour with a warning in the docs because the old functionality was not using await.\nThanks for your help!. +1 for @saturn-network's workaround. Do note that it's a temporary solution, the urls should start working again.. ",
    "msrobot0": "\nSo, I tracked down the bug. In line 231 of index.js in truffle-compile, interfaces/contracts defined in source .sol files are written to a returnVal object. However, if the same contract/interface name exists in multiple source files, the last contract/interface with the same name to be processed is the only that is saved, because previous values are overwritten. This leads to severe data corruption.\nThis bug has been frustrating, I'd be happy to provide further details or a dummy example so that this can get fixed (cc @CruzMolina let me know if there's anything I can do to help).\n\nHi I have been getting that recently too - can you give me any tips -thanks. ",
    "jochenonline": "Can confirm that the problem vanishes if double contract names are prevented. Which is of course annoying if a contract uses another contract. In that case I have to use different contract names each time a contract is referenced.. Besides the effect described above (silently doing nothing) I also had the problem (after solving the first one with sudo / thanks to @sylvainKritter ) that truffle used an older nodejs version than nvm was set to. Finally I could solve both by installing truffle locally npm i truffle and use it via npx truffle.. ",
    "ryanliu285": "No, nothing happens. I don't really know what to do at this point, I tried to implement every function in Ownable.sol and ERC721Token.Sol, and I still end up with the same problem. ",
    "m-chrzan": "The build artifact for KomoCoin appears to have empty bytecode. Are you sure you implement all functions declared but not implemented in interfaces/abstract contracts you inherit from?. ",
    "Meabo": "I reproduced the error, and found that no promise are returned at this line: https://github.com/trufflesuite/truffle/blob/next/packages/truffle-core/lib/commands/migrate.js#L170\nAs it's my first time diving into the code, it will take me more time to fix the issue but I will \ud83d\udc4d . Same here, I was looking for an entry point @gnidan, thanks. ",
    "levelvc": "Has this issue been resolved?. ",
    "twinkleshine": "Urgent help needed. Is it a bug or some issue with my configurations ?. ",
    "loreberti89": "My error, for a lack of extension \"Js\" on migration file. ",
    "sneko": "Thanks @roderik for making Truffle Typescript-compatible , I hope it will be included in beta.2 \ud83d\udc4d . @roderik after fixing what I mentioned in my comments I'm still getting errors due to TypeScript syntax.\nHere one of my files:\n```\nvar Migrations = artifacts.require(\"./Migrations.sol\");\nmodule.exports = async function(deployer, network, accounts) {\n  await deployer.deploy(Migrations);\n} as Truffle.Migration;\n// because of https://stackoverflow.com/questions/40900791/cannot-redeclare-block-scoped-variable-in-unrelated-files\nexport {};\n```\nI get the following error when migrating:\n```\n} as Truffle.Migration;\n  ^^\nSyntaxError: Unexpected identifier\n```\nIf I remove the as Truffle.Migration it shows me the next issue:\n```\nexport {};\n^^^^^^\nSyntaxError: Unexpected token export\n    at Object.createScript (vm.js:80:10)\n```\nTo solve this my file needs to look like:\n```\nvar Migrations = artifacts.require(\"./Migrations.sol\");\nmodule.exports = async function(deployer, network, accounts) {\n  await deployer.deploy(Migrations);\n};\n```\nLike an ES6 file...\nDo you know why the parser is not using TypeScript?\nThanks,. @roderik I\u2019m actually requiring the tsnode/register... hmmm I don\u2019t understand what could be the problem.\nI\u2019m using Truffle 5 and my settings are stored in the \u00ab\u00a0truffle-config.js\u00a0\u00bb.\nI will try to figure out tomorrow morning what\u2019s going on. (Including cloning and testing the example). @roderik the truffle-typechain-example is working well for migrations if I build on my own truffle (including your PR).\nBut if I add this line in the truffle.js:\nmigrations_file_extension_regexp: /.*\\.ts$/,\nI get the same error than in my project:\n```\n} as Truffle.Migration;\n  ^^\nSyntaxError: Unexpected identifier\n```\n \ud83d\ude22 . @CruzMolina yeah the workaround is working.\nBut did you succeed in replicating the issue I get?\nBuilding Truffle with this pull request and injecting it inside the node_modules directory on truffle-typechain-example (do not forget to add migrations_file_extension_regexp: /.*\\.ts$/, inside the Truffle config file)\n. @roderik , when building on my own I get ReferenceError: Config is not defined. Missing const Config = require(\"truffle-config\");. ",
    "isaacsultan": "Encountered same issue (same environment details). Same issue here. @eggplantzzz Issue not resolved by deletion of build folder and recompile, and @madjarevicn no changes made to within build files. However, glad to say the issue has resolved since updating truffle!. Thanks @gnidan Having upgraded to truffle v5.0.5 and latest version of ganache-cli, the problem still persists!\n```\nGathering transaction data...\nTypeError: Cannot read property 'id' of undefined\n    at newScope.variables.concat.filter.variable (/Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/packages/truffle-debugger/dist/debugger.js:1738:1)\n    at Array.filter ()\n    at map (/Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/packages/truffle-debugger/dist/debugger.js:1735:1)\n    at Array.map ()\n    at data.info.scopes. (/Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/packages/truffle-debugger/dist/debugger.js:1720:125)\n    at /Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:76:1\n    at /Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:36:1\n    at /Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:90:1\n    at Function. (/Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:36:1)\n    at args (/Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/~/reselect-tree/index.js:209:1)\n    at /Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:86:1\n    at Function._ (/Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:36:1)\n    at args (/Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/~/reselect-tree/index.js:209:1)\n    at /Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:86:1\n    at /Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:36:1\n    at runSelectEffect (/Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/~/@redux-saga/core/dist/redux-saga-core.esm.js:723:1)\n    at runEffect (/Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/~/@redux-saga/core/dist/redux-saga-core.esm.js:1191:1)\n    at digestEffect (/Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/~/@redux-saga/core/dist/redux-saga-core.esm.js:1258:1)\n    at next (/Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/~/@redux-saga/core/dist/redux-saga-core.esm.js:1148:1)\n    at currCb (/Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/~/@redux-saga/core/dist/redux-saga-core.esm.js:1238:1)\n    at checkEnd (/Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/~/@redux-saga/core/dist/chunk-585b854f.js:154:1)\n    at chCbAtKey (/Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/~/@redux-saga/core/dist/chunk-585b854f.js:170:1)\n    at Object.currCb [as cont] (/Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/~/@redux-saga/core/dist/redux-saga-core.esm.js:1238:1)\n    at end (/Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/~/@redux-saga/core/dist/redux-saga-core.esm.js:1001:1)\n    at Object.task.cont (/Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/~/@redux-saga/core/dist/redux-saga-core.esm.js:829:1)\n    at next (/Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/~/@redux-saga/core/dist/redux-saga-core.esm.js:1157:1)\n    at Object.currCb [as cont] (/Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/~/@redux-saga/core/dist/redux-saga-core.esm.js:1238:1)\n    at end (/Users/isaacsultan/.nvm/versions/node/v10.14.2/lib/node_modules/truffle/build/webpack:/~/@redux-saga/core/dist/redux-saga-core.esm.js:1001:1)\nThe above error occurred in task session.saga\nTasks cancelled due to error:\ncontroller.saga\ndata.saga\nevm.saga\nsolidity.saga\ntrace.saga\nweb3.saga\n```\n. Hi @gnidan, I've pushed up a simple repo that displays this issue: \nhttps://github.com/isaacsultan/workshop/\nSteps:\nnpm i\nganache-cli\ntruffle test\ntruffle debug [LAST-TRANSACTION]\n. Thank you @haltman-at, super glad that I could be of help!. Hey @CruzMolina , thanks for getting back to me so quickly! The default test network is being use, as no networks are defined in my config.\nHowever, I am running ganache-cli in a separate window. What would the alternative be, in order to have a clean chain state?\n. @CruzMolina Thank you!. @wTendera Thanks, updated and fixed for me too!. ",
    "rmujica": "I have the same behavior,\nTruffle v5.0.0 (core: 5.0.0)\nSolidity v0.5.0 (solc-js)\nNode v10.13.0\non Windows 10.. ",
    "fulldecent": "P.S. Here is the minimal project I can create that works with Truffle test.\n```\n./truffle.js:// Boilerplate required, https://github.com/trufflesuite/truffle/issues/1382\n./migrations/1.js:// Boilerplate required, https://github.com/trufflesuite/truffle/issues/1382\n./migrations/1.js:module.exports = ($)=>{};\n./test/TestMetacoin.sol:pragma solidity ^0.4.2;\n./test/TestMetacoin.sol:import \"truffle/Assert.sol\";\n./test/TestMetacoin.sol:import \"../contracts/MetaCoin.sol\";\n./test/TestMetacoin.sol:contract TestMetacoin {\n./test/TestMetacoin.sol:  function testBal() public {\n./test/TestMetacoin.sol:    MetaCoin meta = new MetaCoin();\n./test/TestMetacoin.sol:    uint expected = 5;\n./test/TestMetacoin.sol:    Assert.equal(meta.getBalance(tx.origin), expected, \"Owner should have 10000 MetaCoin iitially\");\n./test/TestMetacoin.sol:  }\n./test/TestMetacoin.sol:}\n./contracts/MetaCoin.sol:pragma solidity ^0.4.18;\n./contracts/MetaCoin.sol:contract MetaCoin {\n./contracts/MetaCoin.sol:   function getBalance(address) public pure returns(uint) {\n./contracts/MetaCoin.sol:       return 5;\n./contracts/MetaCoin.sol:   }\n./contracts/MetaCoin.sol:}\n./contracts/Migrations.sol:pragma solidity ^0.4.23;\n./contracts/Migrations.sol:// Boilerplate required, https://github.com/trufflesuite/truffle/issues/1382\n./contracts/Migrations.sol:contract Migrations {}\n``. Thank you, this issue is resolved now. Boilerplate is no longer necessary as of Truffle 5.0.1. Only a singletruffle.js` file, which can be empty, is needed. And this is reasonable.\nHere is a minimal test case which demonstrates the new version works.\n```sh\nmkdir -p tmp/test tmp/contracts tmp/migrations\ncat > tmp/truffle.js <<EOL\n// Boilerplate required, https://github.com/trufflesuite/truffle/issues/1382\nEOL\ncat > tmp/test/TestMetacoin.sol <<EOL\npragma solidity ^0.5.0;\nimport \"truffle/Assert.sol\";\nimport \"../contracts/MetaCoin.sol\";\ncontract TestMetacoin {\n  function testBal() public {\n    MetaCoin meta = new MetaCoin();\n    uint expected = 5;\n    Assert.equal(meta.getBalance(tx.origin), expected, \"Owner should have 10000 MetaCoin iitially\");\n  }\n}\nEOL\ncat > tmp/contracts/MetaCoin.sol <<EOL\npragma solidity ^0.5.0;\ncontract MetaCoin {\n  function getBalance(address) public pure returns(uint) {\n    return 5;\n  }\n}\nEOL\n(cd tmp && npx truffle test)\nrm -rf tmp\n```. ",
    "obernardovieira": "Hi,\nI think I can do this, but I don't know exactly where to start. Can you please give me a hint?\nI ran the npm run test and I was looking into files.. Thanks @gnidan for quick response.\nI have one doubt, CommandRunner.run is running commands but actually waiting them to end at some point. Since I want to run the truffle develop and then the other commands inside, is there any example I can follow or do I need to build this kind of thing from scratch?. Ok, doesn't seem easy at first sight, but I will have a try and reply asap. Thanks so far.. Unfortunately, I did not have time to do much. Shame that it was 2 months ago :disappointed: sorry guys.. yes, that problem is solved if you update. I knew about the release but hadn't updated yet, and when I got the error was easy to find out. So, updated to v5.. ",
    "devstein": "@jleeh Were you able to solve this issue? . ",
    "m-schmoock": "Note: Same may apply to the event.on data/changed/error handlers. Deduped events should just always be silently dropped instead of converted to \"false\".. note: the test coverage measurement is clearly defunct.. @gnidan two issues:\n1. Whats with the event.on handlers that are also called with false on duplicates?\n2. F.y.i. This duplicate stuff only happens when used with a real network on i.e. geth daemon. So the tests only partly make sens, as they are not reproducibly using ganache test.. ",
    "pi0neerpat": "Windows and Truffle don't mix well...yet!\nTry following this guide to get Truffle installed properly.\nhttps://davidburela.wordpress.com/2017/05/12/how-to-install-truffle-testrpc-on-ubuntu-or-windows-10-with-windows-subsystem-for-linux/. @mihairaulea So we can get a better idea, could you please show an example both with and without this new feature?. ",
    "JChanceHud": "Actually this solidity release seems to have quite a bit of changes. This may need to be a more extensive refactor than a simple bump :/. Good call, updated. npm install actually saves to dependencies by default, but I added explicit --save and --save-dev flags with devDependencies support. Agreed, updated and refactored a bit. ",
    "Manasse228": "Hello i have an error with this version of truffle, when i type truffle migrate --network networkName i have nothing on console. The migrate send nothing like address on console. How to do a good migrate with this new version of truffle ? please need help. ",
    "nikita-fuchs": "Wrong project guys, I'm sorry - please delete.. ",
    "schuma7": "For anyone interested in a temporary workaround, I got around this issue by creating the following init-test.ts file:\n```\nimport chai from 'chai';\nimport { myCustomHelper } from './helpers/myCustomHelper';\nchai.use(myCustomHelper);\nglobal.assert = chai.assert;\nglobal.expect = chai.expect;\nglobal.should = chai.should;\ndeclare global {\n  namespace NodeJS {\n    interface Global {\n      assert: Chai.AssertStatic;\n      expect: Chai.ExpectStatic;\n      should(): Chai.Should;\n    }\n  }\n}\n```\nThe main drawback of this solution is that you need to remember to require this file at the top of every test suite. But it does the trick until the truffle framework offers a way to add mocha test fixtures.. ",
    "Jonybang": "@gnidan Solved by what, downgrading and using custom release? When fix of this error will appeared in regular release? on 5.0.3 release?. ",
    "daniyarchambylov": "I don't see  anywhere documented the format of plugin's positional arguments and optional flags (keys).\nRight now I can run plugin as follows: truffle run my-plugin foo bar baz and  config._ contains array ['foo', 'bar', 'baz']. \nWhen I run truffle run my-plugin foo bar baz --debug config looks like \n{\n  _: ['foo', 'bar', 'baz'],\n  debug: true,\n}\nWhen I run truffle run my-plugin --debug foo bar baz config looks like \n{\n  _: ['bar', 'baz'],\n  debug: 'foo',\n}\nBut what I wanted is to have ['foo', 'bar', 'baz'] as positional arguments and debug being true\nThe same thing happend when I used -d instead of --debug. I got:\n{\n  _: ['bar', 'baz'],\n  d: 'foo',\n}\nIt would be neat to be able to pass flags with and without arguments.\n. Tried same code and it doesn't work. It would be useful to allow truffle handle plugins with asynchronous code correctly. I don't see any reason why it can't be implemented. I've looked into source code and found that callback function  done is called right after plugin command has been called. Why just not pass done as second parameter to a plugin's exposed function?\nhttps://github.com/trufflesuite/truffle/blob/c1da40e23a7f30fa0673130c428c72725c06c05f/packages/truffle-core/lib/commands/run.js#L31\nSo this is a code responsible for calling plugin command\njavascript\nif (config.plugins) {\n      let pluginConfigs = Plugin.load(config, done);\n      Run.run(pluginConfigs, customCommand, config);\n      done();\n    } else {\nIf we could rewrite it as\njavascript\nif (config.plugins) {\n      let pluginConfigs = Plugin.load(config, done);\n      Run.run(pluginConfigs, customCommand, config, done);\n    } else { \nand here https://github.com/trufflesuite/truffle/blob/c1da40e23a7f30fa0673130c428c72725c06c05f/packages/truffle-core/lib/run.js#L57\nFrom\njavascript\n  run(pluginConfigs, customCommand, config) {\n    let runCommand = this.initializeCommand(pluginConfigs, customCommand);\n    runCommand(config);\n  }\nto\njavascript\n  run(pluginConfigs, customCommand, config, done) {\n    let runCommand = this.initializeCommand(pluginConfigs, customCommand);\n    runCommand(config, done);\n  }\nWe could then write plugin as\njavascript\nconst request = require('request');\nmodule.exports = (config, done) => request('http://google.com', {}, (err, res, body) => {\n    console.log(\"Hi, rocky!\");\n    done();\n  })\n. @gnidan \nWorking on it!. @gnidan submited PR https://github.com/trufflesuite/truffle/pull/1512\n. - [x] I've asked for help in the Truffle Gitter before filing this issue.\n\nIssue\nAfter PR #1519 has been merged and truffle version updated to v5.0.0-next.20 running 3rd party plugins fail due to missing dependency. Required package app-module-path  hasn't been installed.\nSteps to Reproduce\n\nInstall truffle (v5.0.0-next.20) - npm i truffle@5.0.0-next.20\nInstall 3rd party plugin and add  it in plugin section in truffle-config.js\nRun plugin (in my case I call it analyze - ./node_modules/.bin/truffle run analyze\n\nExpected Behavior\nCommand should execute successfully without errors.\nActual Results\n$ ./node_modules/.bin/truffle run analyze --help\nError: Cannot find module 'app-module-path'\n    at Function.Module._resolveFilename (module.js:547:15)\n    at Function.Module._load (module.js:474:25)\n    at Module.require (module.js:596:17)\n    at require (internal/module.js:11:18)\n    at checkPluginModules (/home/daniyar/tmp/truffle-next-20/node_modules/truffle/build/webpack:/packages/truffle-core/lib/plugin.js:18:1)\n    at /home/daniyar/tmp/truffle-next-20/node_modules/truffle/build/webpack:/packages/truffle-core/~/lodash/_createFlow.js:71:1\n    at Object.load (/home/daniyar/tmp/truffle-next-20/node_modules/truffle/build/webpack:/packages/truffle-core/lib/plugin.js:70:1)\n    at Object.run (/home/daniyar/tmp/truffle-next-20/node_modules/truffle/build/webpack:/packages/truffle-core/lib/commands/run.js:29:1)\n    at Command.run (/home/daniyar/tmp/truffle-next-20/node_modules/truffle/build/webpack:/packages/truffle-core/lib/command.js:113:1)\n    at Object.<anonymous> (/home/daniyar/tmp/truffle-next-20/node_modules/truffle/build/webpack:/packages/truffle-core/cli.js:47:1)\n    at __webpack_require__ (/home/daniyar/tmp/truffle-next-20/node_modules/truffle/build/webpack:/webpack/bootstrap 89bbbec125c6289b9791:19:1)\n    at /home/daniyar/tmp/truffle-next-20/node_modules/truffle/build/webpack:/webpack/bootstrap 89bbbec125c6289b9791:65:1\n    at Object.<anonymous> (/home/daniyar/tmp/truffle-next-20/node_modules/truffle/build/cli.bundled.js:71:10)\n    at Module._compile (module.js:652:30)\n    at Object.Module._extensions..js (module.js:663:10)\n    at Module.load (module.js:565:32)\n    at tryModuleLoad (module.js:505:12)\n    at Function.Module._load (module.js:497:3)\n    at Function.Module.runMain (module.js:693:10)\n    at startup (bootstrap_node.js:188:16)\n    at bootstrap_node.js:609:3\nTruffle v5.0.0-next.20 (core: 5.0.0-beta.2)\nSolidity v0.5.0 (solc-js)\nNode v8.10.0\nEnvironment\n\nOperating System: Ubuntu 18.04\nTruffle version (truffle version): v5.0.0-next.20 (core: 5.0.0-beta.2)\nnode version (node --version): v8.10.0\nnpm version (npm --version): v.3.5.2\n. @gnidan I confirm it's working with 5.0.0-next.24 for sure!. @gnidan  please  look at it.. I'm experiencing this issue too and downgraded Web3 package, but it's blocking from publishing a package. No end user should do workarounds.. \n",
    "amitkot": "This is fixed in truffle@5.0.0. Thanks!. ",
    "slraja": "I am having Truffle v5.0.3  which has  web3.version as '1.0.0-beta.37' but still getting the below error : \nroiDevice:Faucet roi$ truffle migrate\nError: Returned values aren't valid, did it run Out of Gas?\n    at ABICoder.decodeParameters (/Users/roi/.nvm/versions/node/v10.15.1/lib/node_modules/truffle/build/webpack:/~/web3-eth-abi/src/index.js:226:1)\nCan someone please help ??. I am having Truffle v5.0.3  which has  web3.version as '1.0.0-beta.37' but still getting the below error : \nroiDevice:Faucet roi$ truffle migrate\nError: Returned values aren't valid, did it run Out of Gas?\n    at ABICoder.decodeParameters (/Users/roi/.nvm/versions/node/v10.15.1/lib/node_modules/truffle/build/webpack:/~/web3-eth-abi/src/index.js:226:1)\nCan someone please help ??. ",
    "ganeshdipdumbare": "Closing the issue as the bytecode was 0x for abstract contract which was inheriting but not implementing the function.. ",
    "frozeman": "Well get them in and make a new release. . ",
    "nivida": "@gnidan Merged these PRs and should be released today. :-). ",
    "balexander4": "Truffle Next Blog Post\nWe have released the most awaited version of Truffle just in time for\u2026.__. There are SO many exciting things to mention that will make your Truffle experience a rich one. Highlighted below are the new exciting things Truffle has to offer:\n\nBring your own compiler!!!! You can now choose any solc-js version available at solc-bin just tell Truffle which one you want and it will get it. This includes the ability to use docker and native binary in an advanced way.\nWeb3 1.0- the truffle-contract command is now using web3.js 1.0! This will be great for error handling!\nNew Migrations Command, in v5 this command has been completely rewritten. We have included better error messages, when a deployment fails Truffle will tell you and give you an idea of possible fixes. Truffle will now also give your more information about what is going on when you deploy a contract, cost summaries and real time status updates about the amount of a time a transaction has been pending. Dry run simulations now run automatically if you deploy to a known public network. Using the \u2018\u2014 interactive\u2019 flag on the command line will give you a prompt between dry runs and real deployments. The ability to configure the amount of block confirmations in between deployments. Allowing user to specify the amount of blocks to wait before timing out. Web3 has this value hardcoded at 50 blocks, which can pose a problem when deploying large contracts at the lower end of gas price range. \nUser Analytics have been added and users can opt-in by running \u2018truffle config --enable-analytics\u2019. This is vital in making informed decisions about future of Truffle and deciding what is most valuable to our users. When enabled Truffle will collect information about your version number, the commands you run, and whether commands succeed or fail, all annoyomously.\nTruffle run -  Truffle now gives users the ability to create custom command plugins.\nVyper support- Truffle will now compile *.vy contracts. We have published a Truffle Box to help you get started with Vyper you can access it by running: \u2018truffle unbox vyper-example\u2019, (make sure you have Vyper installed.) Link: (https://vyper.readthedocs.io/en/latest/installing-vyper.html)\nSolidity v0.5.0- Truffle now uses solidity v0.5.0 by default. Solidity v0.4.xx is still supported and can be used by specifying the version in your Truffle config.\nStructured function parameters- Truffle has been upgraded to use Web3.js v1.0.0-beta.36, it includes support for passing/returning \u2018struct\u2019 s in Solidity functions. To use this you need to specify it at the top of your contracts using: \u2018pragma experimental ABIEncoderV2\u2019. This feature allows you to use complex function arguments and have the values returned in Solidity and interact with the resulting contracts via truffle-contract\u2019s JS interface. \nHelp system- Now access Truffle\u2019s built in help system by running \u2018truffle help (command)\u2019 this allows you to see all the available options for the command as well as a description of what it does.\nUnique truffle mnemonics- Truffle will now generate random mnemonics that will persist only for you. Use caution with crypto security when working with mnemonics and private keys!!!!!\nDebugger Improvements- V5 includes debugger breakpoints! Add breakpoints using the \u2019b\u2019 command and remove them using the \u2018B\u2019 command. Additionally we have added mapping support for the debugger!\n\u2018Truffle init/truffle unbox\u2019 - These commands have been improved you are now asked if you want to overwrite files. A \u2018\u2014 force\u2019 command has also been added to overwrite the files automatically.\nAsync/await is now supported in truffle-console. \n\nBreaking Changes? (Should I add them?)\nLooking forward we are hoping to add third-party plugins. (Add more roadmap stuff here) \nThank you to all who have helped make this release of Truffle possible! We hope you enjoy this new Truffle release! Let us know if you have any suggestions or problems on our community Gitter channel or on our GitHub page! . ",
    "gjeanmart": "Just had the same issue with truffle v5.0.0\n```\n$ npm install --save truffle-hdwallet-provider@web3-one\nnpm WARN kauri-protocol-contracts@1.0.0 No description\nnpm WARN kauri-protocol-contracts@1.0.0 No repository field.\n\ntruffle-hdwallet-provider@1.0.0-web3one.5\nupdated 1 package and audited 163 packages in 0.872s\nfound 0 vulnerabilities\n\n\n$ truffle migrate\nError: Cannot find module 'any-promise'\n    at Function.Module._resolveFilename (module.js:547:15)\n    at Function.Module._load (module.js:474:25)\n    at Module.require (module.js:596:17)\n    at require (internal/module.js:11:18)\n    at require (/home/gjeanmart/workspace/kauri/kauri-protocol/kauri-protocol-contracts/node_modules/truffle-hdwallet-provider/dist/webpack:/truffle-hdwallet-provider/webpack/universalModuleDefinition:3:1)\n    at Object. (/home/gjeanmart/workspace/kauri/kauri-protocol/kauri-protocol-contracts/node_modules/truffle-hdwallet-provider/dist/webpack:/truffle-hdwallet-provider/webpack/universalModuleDefinition:1:1)\n    at Module._compile (module.js:652:30)\n    at Object.Module._extensions..js (module.js:663:10)\n    at Module.load (module.js:565:32)\n    at tryModuleLoad (module.js:505:12)\n    at Function.Module._load (module.js:497:3)\n    at Module.require (module.js:596:17)\n    at require (internal/module.js:11:18)\n    at Object. (/home/gjeanmart/workspace/kauri/kauri-protocol/kauri-protocol-contracts/truffle.js:2:26)\n    at Module._compile (module.js:652:30)\n    at Object.Module._extensions..js (module.js:663:10)\n    at Module.load (module.js:565:32)\n    at tryModuleLoad (module.js:505:12)\n    at Function.Module._load (module.js:497:3)\n    at Module.require (module.js:596:17)\n    at require (internal/module.js:11:18)\n    at Function.Config.load (/home/gjeanmart/.npm-global/lib/node_modules/truffle/build/webpack:/packages/truffle-config/index.js:381:1)\n    at Function.Config.detect (/home/gjeanmart/.npm-global/lib/node_modules/truffle/build/webpack:/packages/truffle-config/index.js:370:1)\n    at Object.run (/home/gjeanmart/.npm-global/lib/node_modules/truffle/build/webpack:/packages/truffle-core/lib/commands/migrate.js:165:1)\n    at Command.run (/home/gjeanmart/.npm-global/lib/node_modules/truffle/build/webpack:/packages/truffle-core/lib/command.js:113:1)\n    at Object. (/home/gjeanmart/.npm-global/lib/node_modules/truffle/build/webpack:/packages/truffle-core/cli.js:47:1)\n    at webpack_require (/home/gjeanmart/.npm-global/lib/node_modules/truffle/build/webpack:/webpack/bootstrap 10c8e5c48cca88d8ca36:19:1)\n    at /home/gjeanmart/.npm-global/lib/node_modules/truffle/build/webpack:/webpack/bootstrap 10c8e5c48cca88d8ca36:65:1\nTruffle v5.0.0 (core: 5.0.0)\nNode v8.10.0\n\n$ npm install any-promise\nnpm WARN kauri-protocol-contracts@1.0.0 No description\nnpm WARN kauri-protocol-contracts@1.0.0 No repository field.\n\nany-promise@1.3.0\nadded 1 package from 1 contributor and audited 164 packages in 3.047s\nfound 0 vulnerabilities\n\n\n$ truffle migrate --reset\n\u26a0\ufe0f  Important \u26a0\ufe0f\nIf you're using an HDWalletProvider, it must be Web3 1.0 enabled or your migration will hang.\nTry: npm install --save truffle-hdwallet-provider@web3-one\nStarting migrations...\n\nNetwork name:    'development'\nNetwork id:      1545229853622\nBlock gas limit: 6721975\n\n1_initial_migration.js\nReplacing 'Migrations'\n\n\ntransaction hash:    0x0f7fe9015eb18c959c40361543401cde895d279e15ea7deeb10a7804bf03ce9b\nBlocks: 0            Seconds: 0\ncontract address:    0x5bDF1070C75E1697B317f193D59E3882793b10A2\naccount:             0x31661ed38378C8ABDc9b5EE4Cf80961847793292\nbalance:             88.18620056\ngas used:            284908\ngas price:           20 gwei\nvalue sent:          0 ETH\ntotal cost:          0.00569816 ETH\nSaving migration to chain.\nSaving artifacts\n\n\n\nTotal cost:          0.00569816 ETH\n\n2_deployment.js\nReplacing 'ContentSpaceRegistry'\n\n\ntransaction hash:    0x7a159d4a8e6ac9187e913e149aa3846ee166a2c07c64b69eddedb72cfb5c7ca4\nBlocks: 0            Seconds: 0\ncontract address:    0x2D4852F1Cd970F58da610930C4D2d981497133fF\naccount:             0x31661ed38378C8ABDc9b5EE4Cf80961847793292\nbalance:             88.08768254\ngas used:            4883867\ngas price:           20 gwei\nvalue sent:          0 ETH\ntotal cost:          0.09767734 ETH\nSaving migration to chain.\nSaving artifacts\n\n\n\nTotal cost:          0.09767734 ETH\n\nSummary\n\nTotal deployments:   2\nFinal cost:          0.1033755 ETH\n```\n. Sure thanks for your reactivity. Will try that later today!. Thanks!. \n",
    "kk412027247": "It is my fault, the network didn't finish synchronous.. ",
    "galgat4": "\n.  done by installing chocolate. ",
    "maxsam4": "\nThis is affecting us all day today too :(\nConsidering we are using a docker image.\n\nTry updating your truffle. I don't know when exactly this was 'fixed' but in 5.0.4 version of truffle, if you download solcjs once, it will keep it cached and use that again next time. Essentially, you need an internet connection only for the first compile.\nAs it stands, truffle requires solcjs for pre-processing even if you are using native solc or docker images.. ps. This might not happen for all truffle projects but certainly does happen on the refactored contracts of polymath-core. The refactoring is still underway and I'll share proper reproduction instructions (if needed) once I have completed the refactoring.. Hey @gnidan , thanks for the review! \nI'll try to explain the changes now. Starting with the current system.\nCurrently, the profiling took the errors array generated by solcjs and added \"TRUFFLE_IMPORT\" to all the \"file not found\" errors. Later, the code checks if the error contains \"TRUFFLE_IMPORT\" to decide if the error is a \"file not found\" error or not.\nThe errors object passed by native and docker solc is a bit different so the code was failing to add \"TRUFFLE_IMPORT\" to the file not found errors. This meant that when it was searching for \"file not found\" errors later by searching for \"TRUFFLE_IMPORT\" in the string, it was finding none.\nWhat I did was stop adding \"TRUFFLE_IMPORT\" to the errors altogether and use \"not found: File\" as the substring to search for when checking \"file not found\" errors. The advantage is that this works with all solc versions I tested. the disadvantage is that if solc changes the error message in the future, this will break. It will be an easy fix but yeah. \nWe can use a less restrictive/different search query as well. Or even make a regex like \"Source.*not found\".. Force push to trigger rebuild.. \"just wondering what led you to include this.\"\nFailing tests. \nWithout this, solc was not allowing the 'incorrect paths' to be accessed in the test solidity code which included incorrect paths by choice. Before merging, we can fix the incorrect paths in the test to be incorrect allowed paths and remove this change.\nFWIW, this change is not adding any restriction, it is only removing some restrictions. by default, solc native does not allow any paths outside the contracts. This change allows the base directory of the project to be included.. Also, need to update comments before merging. Right now, it's just a POC to make sure I am heading in the right direction. . To be honest, I don't totally understand how this was even working. First of all, the object is named \"errors\" and not \"error\". Secondly, an almost same object is being returned by native solc as well but it did not work for the native solc object (the changes seemed to be in values and not keys so they should not matter).. compilerRoots is configurable by the user to I need to pass the user config to the VersionRange. \nI have removed the default compilerRoots from compilerSupplier.. Removed the duplicate from compilerSupplier.. ",
    "kalymgr": "I had the same problem which was solved by updating truffle to its latest version (uninstall and install).. ",
    "alecgarza96": "after truffle init I'm prompted with command not found. ",
    "shinsyotta": "Me too.  Same issue, I think.\n```\nGathering transaction data...\nTypeError: Cannot destructure property source of 'undefined' or 'null'.\n    at map (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-debugger/dist/debugger.js:7525:1)\n    at Array.map ()\n    at session.info.affectedInstances (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-debugger/dist/debugger.js:7517:268)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:76:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:36:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:90:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/reselect/lib/index.js:36:1\n    at Session.view (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-debugger/dist/debugger.js:2874:1)\n    at printAddressesAffected (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-core/lib/commands/debug.js:118:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-core/lib/commands/debug.js:704:1\n    at \n    at process._tickDomainCallback (internal/process/next_tick.js:228:7)\n```. ",
    "marcushennig": "Same issue when debugging my contract: \n```\n\ndebug 0x0ed2c73f6c701f052016bf39c4231915a4ac9af05736bb2293c2071c6a65e3a1\nCompiling .\\contracts\\Fibonacci.sol...\nCompiling .\\contracts\\Migrations.sol...\n\nGathering transaction data...\nTypeError: Cannot destructure property source of 'undefined' or 'null'.\n    at map (C:\\Users\\d90789\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-debugger\\dist\\debugger.js:7525:1)\n    at Array.map ()\n    at session.info.affectedInstances (C:\\Users\\d90789\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-debugger\\dist\\debugger.js:7517:268)\n    at C:\\Users\\d90789\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\reselect\\lib\\index.js:76:1\n    at C:\\Users\\d90789\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\reselect\\lib\\index.js:36:1\n    at C:\\Users\\d90789\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\reselect\\lib\\index.js:90:1\n    at C:\\Users\\d90789\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\reselect\\lib\\index.js:36:1\n    at Session.view (C:\\Users\\d90789\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-debugger\\dist\\debugger.js:2874:1)\n    at printAddressesAffected (C:\\Users\\d90789\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\commands\\debug.js:118:1)\n    at C:\\Users\\d90789\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpa\n```. ",
    "wilpat": "I encountered the same issue when trying to debug an intentionally failed require(). I had this same error on my Win 10 x64 PC, Truffle 5.0.2 while following the pet-shop tutorial. ",
    "gnorbsl": "I don't quite remember, I think it was fixed after I switched to infura and\ntruffle 5. Sorry that I can't offer more details.\nAm Do., 14. Feb. 2019, 16:49 hat tyler feickert notifications@github.com\ngeschrieben:\n\n@gnorbsl https://github.com/gnorbsl Sorry for the delay in responding\nto this! Are you still experiencing this issue? Have you tried adjusting\nyour gasLimit etc?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/1575#issuecomment-463834534,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGIVH6WgXGeQGyLS6kcxLzKfdlzulO_oks5vNegVgaJpZM4ZeBJ9\n.\n. \n",
    "figs999": "I'm actually going to suggest you close this issue. After downgrading to truffle 4 and then upgrading to truffle 5 again, the issue disappeared and I can no longer repro it.. ",
    "nventuro": "This is a departure from pre-truffle 5 behavior, where having a data field worked. Since the API is almost the same as web3.eth.sendTransaction (except that we don't need to fill in the to parameter), we could just use that one, but calling it directly means logs are not decoded, which is a bummer.. ",
    "ElShapovalov": "I have same problem!\nTruffle v4.1.14 (core: 4.1.14)\nSolidity v0.4.24 (solc-js)\n. ",
    "KOREAN139": "Just in case that issue description isn't enough, attach screenshot for that too.\n. ",
    "rohitsethii": "came across the same issue.\nRemoved truffle directory manually from \n\nusr/local/bin.. \n",
    "DomAmato": "Indeed, the strict null equality check seems to generally break code since null == undefined is a pretty common approach. I had to change that one line manually since our tool wrongfully flagged it for change \ud83d\ude1b . ",
    "sowmyakannan": "@eggplantzzz  Thanks, I understand that. I was simply suggesting to possibly include such a feature in  a future truffle version wherein we just have to update the version number in a config file and the library is available to us. However I do understand that inorder to be able to do so Openzeppelin would also need to have their libraries available dynamically and not be installed everytime. Same goes for solc compiler version in Solidity. . ",
    "imlaochen": "test pet-shop still failed with truffle5.0.1\n`\nD:\\pet-shop-tutorial>truffle test\nUsing network 'development'.\nCompiling .\\test\\Adoption.sol...\nCompiling .\\test\\TestAdoption.sol...\nTestAdoption\n    1) \"before all\" hook: prepare suite\n0 passing (7s)\n  1 failing\n1) TestAdoption\n       \"before all\" hook: prepare suite:\n     Error: Could not find artifacts for \\D\\pet-shop-tutorial\\contracts\\Adoption.sol from any sources\n      at Resolver.require (C:\\Users\\android.innovworks\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-resolver\\index.js:37:1)\n      at TestResolver.require (C:\\Users\\android.innovworks\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\testing\\testresolver.js:23:1)\n      at TestResolver.require (C:\\Users\\android.innovworks\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\testing\\testresolver.js:23:1)\n      at dependency_paths.forEach.dependency_path (C:\\Users\\android.innovworks\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\testing\\soliditytest.js:203:1)\n      at Array.forEach ()\n      at deployer.deploy.then (C:\\Users\\android.innovworks\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\testing\\soliditytest.js:202:1)\n      at C:\\Users\\android.innovworks\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-deployer\\src\\deferredchain.js:20:1\n      at \n      at process._tickCallback (internal/process/next_tick.js:188:7)\nD:\\pet-shop-tutorial>truffle version\nTruffle v5.0.1 (core: 5.0.1)\nSolidity v0.5.0 (solc-js)\nNode v8.11.3\n`. ",
    "mcplums": "Ok thanks for your reply :). ",
    "juharris": "I'm getting the same issues after bumping the truffle-contract and react versions.\nYour note about importing truffle-contract@4.0.1 gave me an idea:\nThere's a React Truffle example here: https://github.com/truffle-box/react-box\nwhich doesn't import truffle-contract.  I tested it out and it works for me. I'm going to make my project more like that one and hopefully I won't keep getting issues.\n. So I got my project working by following what I said just above.\nI then had to change my code to use the contract interface provided by web3: https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html. ",
    "filips123": "I also have similar issue (#1617) but without React (just Webpack).. Maybe this should be reported to web3-eth-abi.. I reported issue to ethereum/web3.js#2172.. This is now fixed in web3@1.0.0-beta.38. This package should now also be updated to use new version.. I reported issue to ethereum/web3.js#2172.. This is now fixed in web3@1.0.0-beta.38. This package should now also be updated to use new version.. Fixed in #1646. See https://github.com/trufflesuite/truffle/issues/1614#issuecomment-459075959 for details.. Package Web3 have many changes in last version (see ethereum/web3.js#2000). It looks like that Truffle currently doesn't support them.\nThis should really be fixed, because it is currently impossible to use truffle-contract with three latest web3 versions (previous versions also caused errors in #1617 and #1614).\nTemporary solution may be do downgrade Web3, possibly to 1.0.0-beta.33.. Web3 beta 37 have problems with Webpack and React (#1617 and #1614).. Reproduce steps:\n\n\nCreate NPM project and require truffle-contract and web3 (version 1.0.0-beta.38 or later).\n\n\nOpen the file in that project and require packages truffle-contract and web3:\njs\nconst Web3 = require('web3')\nconst TruffleContract = require('truffle-contract')\n\n\nWhen you run a file at this point, you would probably already see an error.\n\n\nIf the error doesn't appear, try to use truffle-contract:\n```js\nweb3 = new Web3(exampleProvider) // Some test provider\n\n\ncontract = TruffleContract(exampleContract) // Some test contract\ncontract.setProvider(web3.currentProvider)\n```\n\nWhen you now run a file, you will see an error.. @gnidan The PR won't fix the issue. It still has the same error in Travis Ci test.. Locking to Web3 should be only a temporary solution. Instead, you should make Truffle compatible with newer versions.. @Levino Yes, I know that this is a quick fix, so you could now work on a long term solution. You could maybe open another issue for compatibility with new Web3 versions.. Ok. I will create an issue for this.. I created #1690 for compatibility with newer Web3 versions.. @gnidan Web3 beta.37 has problems with Webpack and React in #1617 and #1614, so maybe you will need to downgrade Web3 even more.. @gnidan If you keep beta.37, you should also manually require the latest version of ethers. See https://github.com/trufflesuite/truffle/issues/1614#issuecomment-452158490 for details. But beware that version in that comment is outdated, so you would need to manually search for the latest version here. . Problems are not caused by the old version (beta.37), but with new (beta.38 and later). Some of them are #1667.\n\nFor now, there is nothing wrong with using that old version, but I opened that issue because Truffle would need to move to a new Web3 version (if not earlier when 1.0 becomes stable).. ",
    "adnantium": "ethers (v4.0.0-beta.1) gets installed as a dependency of web3-eth-abi (v1.0.0-beta.37) Which leads to the xmlhttprequest complaint and basically makes truffle-contract unusable.\nI was able to get around it for now by manually upping ethers to v4.0.20. \n$ npm install ethers@4.0.20\nStill testing but SFSG.\n. ",
    "saitam1": "Using nvm with npm help solving this issue (nvm use 8.15.0). @fixanoid\nThe following versions (4.1.11 - 4.1.14) seem to have some issue with truffle init, they alle give the same error: Truffle Box at URL https://github.com/truffle-box/bare-box.git doesn't exist. If you believe this is an error, please contact Truffle support.\nVersion 4.1.15 however seem to work better with Quorum and, funnily enough, only gets stuck every second try if you do truffle migrate --reset. Without --reset it works even better(!), but this is where a new problem comes into play. Truffle runs the migration and successfully deploys contract 1, contract 2 and then at contract 3: \n\nError: The contract code couldn't be stored, please check your gas amount.\n\nLocally with ganache this contract uses the following amount of gas:\ngas used:            1063899\nAnd on Quorum I use gas: 8000000, gasPrice: 0, so I don't know what the issue here is :-/   \n. ",
    "romullobernardo": "I'm having the same problem here. Should I downgrade to version 3?. ",
    "CarlosLanderas": "I've read maintenance version (4.1.15) should fix this. I think this is not a proper solution as it has a different compiler version and it might affect people with lowest truffle versions but I suppose is all we can do at the moment, am I right?. ",
    "fixanoid": "@saitam1 I've been playing with truffle v5 and I'm seeing similar issue. I am not seeing it with v4.x tho. Do you mind downgrading to confirm while I'm trying to find the origin? Thanks. @saitam1 thanks for confirming this for me.\nThe contract code error at contract 3 should not be fatal, contract code storage in Ethereum / Quorum is limited. If the txn was successful then your contract is on the chain.. ",
    "edgraaff": "It would be really useful if it doesn't fail silently and prints caught errors instead. I don't mind getting my hands dirty and do some debugging, but I simply have no idea where to start.. Oops, will look into failing tests later today.. There, fixed. pending makes more sense to me than latest.. ",
    "dappsar": "I have the same issue with truffle version 5, but not with truflfe 4.  To do a downgrade is a workaround but doesn\u00b4t work if you have sentences that need to be compile with solc version 5 (included in truffle 5)\n. ",
    "baermathias": "I am closing this, because the Azure marketplace image Quorum Single Member Blockchain Network used Quorum v1 with the old consensus QuorumChain. The new version + truffle v4 does actually work. If I am passing provider into setProvider(), I get this error: \n\nTypeError: Cannot read property 'apply' of undefined\n\nPassing provider.currentProvider solved it. Other users have also solved it this way: https://github.com/trufflesuite/truffle-contract/issues/57\nBy the way, I am using a private Quorum network.. ",
    "AdelinGhanaem": "Same as on Ubuntu 16.04 \nTruffle v5.0.1 (core: 5.0.1)\nNode v9.11.2\n ```\nError: Could not find artifacts for ./ProductsTests.sol from any sources\n    at Resolver.require (/home/adelin/.nvm/versions/node/v9.11.2/lib/node_modules/truffle/build/webpack:/packages/truffle-resolver/index.js:37:1)\n    at TestResolver.require (/home/adelin/.nvm/versions/node/v9.11.2/lib/node_modules/truffle/build/webpack:/packages/truffle-core/lib/testing/testresolver.js:23:1)\n    at /home/adelin/.nvm/versions/node/v9.11.2/lib/node_modules/truffle/build/webpack:/packages/truffle-core/lib/test.js:102:1\n    at Array.map ()\n    at /home/adelin/.nvm/versions/node/v9.11.2/lib/node_modules/truffle/build/webpack:/packages/truffle-core/lib/test.js:100:1\n    at \n    at process._tickCallback (internal/process/next_tick.js:182:7)\nTruffle v5.0.1 (core: 5.0.1)\nNode v9.11.2\n```. @eggplantzzz  Thanks for the reply and yes, \n```\npragma solidity >=0.4.21 <0.6.0;\nimport \"truffle/Assert.sol\"; \nimport \"truffle/DeployedAddresses.sol\"; \nimport \"../contracts/Products.sol\";\ncontract TestProducts { \n    function testSome() public {\n        int i = 1;\n        Assert.equal(i, 2, \"It should store the value 89.\");\n    }\n}\n```\nI've just tried to run some test to see that it is actually running ... . ",
    "wudaofanfan": "I have the similiar issue on Windows 10 64-bit when running truffle test. ",
    "mattcowen": "I have this issue also on Win 10 x64 trying the pet shop tutorial.\nError: Could not find artifacts for \\C\\Dev\\pet-shop-tutorial\\contracts\\Adoption.sol from any sources\n      at Resolver.require (C:\\Users\\matt\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-resolver\\index.js:37:1)\n      at TestResolver.require (C:\\Users\\matt\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\testing\\testresolver.js:23:1)\n      at TestResolver.require (C:\\Users\\matt\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\testing\\testresolver.js:23:1)\n      at dependency_paths.forEach.dependency_path (C:\\Users\\matt\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\testing\\soliditytest.js:203:1)\n      at Array.forEach (<anonymous>)\n      at deployer.deploy.then (C:\\Users\\matt\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\testing\\soliditytest.js:202:1)\n      at C:\\Users\\matt\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-deployer\\src\\deferredchain.js:20:1\n      at process._tickCallback (internal/process/next_tick.js:68:7). ",
    "sfa20": "I have the same error as mattcowan on Win 10 x64 doing the pet shop tutorial. ",
    "Shadowstep33": "Windows 10\nTruffle v5.0.2 (core: 5.0.2)\nNode v8.9.3\nSo my initial guess was this had to do with windows style paths. I think I'm on the right track but I'm looking too \"downstream\" as potentials for fixes.\nIn my investigation I uncovered that truffle-resolver appears to be using the incorrect import_path. When I add a simple console.log to the resolver, most resolutions use the file name (and relative path - i.e. .\\) as the import_path. \nThe resolution that errors is one that appears as such:\n\\C\\Users\\black\\...\\contracts\\Character.sol\nBy using a simple replace statement I was able to only capture the last fragment of the URI. My import_path variable now appears as such:\n.\\Character.sol\nYou can see my customized snippet of the require function below. I didn't search hard but maybe this was handled in the past and possibly was overwritten by a commit?\n```\n// This function might be doing too much. If so, too bad (for now).\nResolver.prototype.require = function(import_path, search_path) {\n  var self = this;\nfor (var i = 0; i < this.sources.length; i++) {\n    var source = this.sources[i];\nif(import_path.indexOf(\"Users\") >= 0){\n  import_path = \".\\\\\" + import_path.substring(import_path.lastIndexOf(\"\\\\\") + 1, import_path.length);\n}\n\nvar result = source.require(import_path, search_path);\nif (result) {\n  var abstraction = contract(result);\n  provision(abstraction, self.options);\n  return abstraction;\n}\n\n}\n  throw new Error(\"Could not find artifacts for \" + import_path + \" from any sources\");\n};\n```\nBear in mind this is not a proposed solution... just debugging\nNow... another error popped up that may or not be related. \nI am using openzeppelin and truffle is complaining that DeployedAddresses must be deployed.\nError: while migrating TestCharacter: TestCharacter contains unresolved libraries. You must deploy and link the following libraries before you can deploy a new version of TestCharacter: DeployedAddresses\nIf I remove the following line from my test, the error goes away:\nCharacter myContract = Character(DeployedAddresses.Character());\nMaybe the same file path resolution is struggling somewhere else in truffle also? I'm not familiar with the code so there may be an upstream solution that makes sense. Hope this helps.. Thought I was done... but got kind of obsessed. Of note is this snippet:\n// Turn G:/.../ into /G/.../ for Windows\n    if (replacement.length >= 2 && replacement[1] === \":\") {\n      replacement = \"/\" + replacement;\n      replacement = replacement.replace(\":\", \"\");\n    }\nfound in https://github.com/trufflesuite/truffle/blob/develop/packages/truffle-resolver/fs.js\nIf I comment that snippet out (ignoring/excluding modifications from my last comment) the artifacts resolve but I end up with the same library linking issue. The promise for deploying the DeployedAddresses contract resolves alright so maybe Windows is having an issue parsing the source of DeployedAddresses. I know it's created/deployed/linked on the fly. \nAnyways, not sure what it all means but hope it helps.. @TobiWo true, seems like a similar issue to me. If you look at the commit that was merged, it seems to be reverted here in v5.0.0 as it's back to \nfiles[source.id] = filename; https://github.com/trufflesuite/truffle-compile/pull/55/commits/6617b6386414bd812c3dddcdfcf3ab00472f4cef\nI was able to fix it for my local installation with the following two changes:\n\nforced deployment of DeployedAddresses in cli.bundle. \ncorrect window path for mapping\n\nNot sure if this fix will hold for the assert library also...\nObject.keys(standardOutput.sources).forEach(function(filename) {\n        var source = standardOutput.sources[filename];\n        files[source.id] = originalPathMappings[filename];\n      });\n```\n    deployer.deploy(DeployedAddresses).then(() => {\n      deployer.link(DeployedAddresses, abstraction);\n...\n```. Okay, so if you don't mind doing some hax0ring here is how I fixed my install. I'd like to make a PR but I'm lazy and need to look up how to do it correctly :)\nAnyways, in your global node modules (mine is .../AppData/Roaming/npm/node_modules/) find truffle and open up cli.bundle.js. It's a large file. \nReplace the fn deployTestDependencies with the following (starts at line 583174 for me):\n```\n  deployTestDependencies(abstraction, dependency_paths, runner, callback) {\n    const deployer = new Deployer(\n      runner.config.with({\n        logger: { log() {} }\n      })\n    );\nconst assertLibraries = [\n  \"Assert\",\n  \"AssertAddress\",\n  \"AssertAddressArray\",\n  //      \"AssertAddressPayableArray\", only compatible w/ ^0.5.0\n  \"AssertBalance\",\n  \"AssertBool\",\n  \"AssertBytes32\",\n  \"AssertBytes32Array\",\n  \"AssertGeneral\",\n  \"AssertInt\",\n  \"AssertIntArray\",\n  \"AssertString\",\n  \"AssertUint\",\n  \"AssertUintArray\",\n  \"DeployedAddresses\",\n];\n\nconst assertAbstractions = assertLibraries.map(name =>\n  runner.config.resolver.require(`truffle/${name}.sol`)\n);\n\nSafeSend = runner.config.resolver.require(SafeSend);\n\nfor (const abstract of assertAbstractions) {\n  deployer.deploy(abstract);\n  deployer.link(abstract, abstraction);\n}\n\ndependency_paths.forEach(dependency_path => {\n  const dependency = runner.config.resolver.require(dependency_path);\n\n  if (dependency.isDeployed()) deployer.link(dependency, abstraction);\n});\n\nlet deployed;\ndeployer\n  .deploy(abstraction)\n  .then(() => {\n    return abstraction.deployed();\n  })\n  .then(instance => {\n    deployed = instance;\n    if (deployed.initialBalance) {\n      return deployed.initialBalance.call();\n    } else {\n      return 0;\n    }\n  })\n  .then(balance => {\n    if (balance !== 0) {\n      return deployer\n        .deploy(SafeSend, deployed.address, {\n          value: balance\n        })\n        .then(() => {\n          return SafeSend.deployed();\n        })\n        .then(safesend => {\n          return safesend.deliver();\n        });\n    }\n  });\n\ndeployer\n  .start()\n  .then(() => {\n    callback();\n  })\n  .catch(callback);\n\n}\n```\nThe other reason I'm not PRing is lack of confidence. Not sure if the way I fixed the deploying/linking is even kosher; my goal was to just fix it - not necessarily fix it right. Cheers. On it :). Halo wurld\nhttps://github.com/trufflesuite/truffle/pull/1691. @vojnob not quite sure. Technicially, half of my PR should work for mac as far as the linking issue buttttt... not quite sure. I would check to make sure there isn't an unrelated issue in your code. Maybe post it so other can make sure?\n@Chaoyuuu hmm so as far as I'm aware truffle gets compiled and built so the code for all packages should be in the cli-bundle.js file (maybe wrong name but you probs get the idea) so that's why compile and migrate work. The PR was merged but idk if trufflesuite has CI/CD so maybe it still needs to be deployed? Or maybe it's in a nightly version? Maybe try npm i -g truffle@latest?. First, and most importantly: it's from Elder Scrolls: Oblivion. It's one of the titles you could get in the Arena :) It has made it's appearance a few times as ability names in games like WoW and GW2. \nThis will be a bit hand wavy ... as I'm only just starting to become competent with Ethereum in general. I still know little about how truffle works.\nSo, in my process my first error was a problem with my custom contracts not having artifacts. To debug that, I found the path it was attempting to link and checked if it thought it was deployed. It appeared it did not and I noticed the paths were wrong. My first attempt to fix this was a str.replace hack which worked but caused the next error of no DeployedAddresses lib found.\nLater on, @tobiwo pointed me in the right direction of this having been fixed once before, so I found the commit that changed regarding the file path and made the change that will keep the originalMapping.\nI was still missing the test libs though. To debug this I attempted to check if DeployedAddresses was deployed. It was, but not linked. When forcing the link, it was now available but Assert was still missing which lead me to believe something was a bit off with the way dependencies were being deployed and linked in the first place. I didn't remember explicitly seeing them being linked, but that's where my ignorance may come in. I don't fully understand the different of what is going down with the dependency_path map linking and what I call the testLibraries linking. \nI believe the above only worked when I deployed AND linked it, but my memory is a bit hazy. To clean up a bit, I merged the assert and deployedaddresses libs since they seem to be doing the same (or a very similar) thing as far as their deployment process. Since it is working enough for me to develop my contracts again I figured it'd be a good starting point for someone more knowledgeable to take over :). More succinctly and directly: if I remove the additional deploy/link step it doesn't work on Windows. . > I'm going to merge this. If something is wrong, we will certainly find out soon enough :)\nI wait with bated breath. Thanks for following up on this!. ",
    "TobiWo": "Same problem here.\nSystem: Win 10 x64\nTruffle:  5.0.1\nIsn't this the same issue which was already solved in an earlier version? See here\nHowever, everything is working as expected on a Jenkins which is installed on CentOS 7.\nI hope this will be fixed in a future minor release.. ",
    "ShabanGomaa": "I have the same issue with windows 10 64. ",
    "suvamM": "Same issue here.\nOS: Windows 10\nTruffle: v5.0.3\nSolidity: v0.5.0\nNode: v8.11.1\nI did a simple truffle unbox metacoin followed by truffle test which results in\n1) TestMetacoin\n       \"before all\" hook: prepare suite:\n     Error: Could not find artifacts for \\E\\source\\repos\\vsc\\SmartContracts\\truffleProject\\contracts\\ConvertLib.sol from any sources. ",
    "vojnob": "Hi I was having this error on Mac:\n\"before all\" hook: prepare suite:\n     Error: Could not find artifacts for /Users/andreamangion/workspace/blockchain/election/node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol from any sources\n      at Resolver.require (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-resolver/index.js:37:1)\n      at TestResolver.require (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-core/lib/testing/testresolver.js:23:1)\n      at TestResolver.require (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-core/lib/testing/testresolver.js:23:1)\n      at dependency_paths.forEach.dependency_path (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-core/lib/testing/soliditytest.js:203:1)\n      at Array.forEach ()\n      at deployer.deploy.then (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-core/lib/testing/soliditytest.js:202:1)\n      at /usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-deployer/src/deferredchain.js:20:1\n      at process._tickCallback (internal/process/next_tick.js:68:7)\nDoes this fix such an error as well? or its only for Windows?. ",
    "Chaoyuuu": "i have reinstalled truffle with command npm install -g truffle.\nbut there is the same error :(\nOS: Windows 10\nTruffle: v5.0.3\nSolidity: v0.5.0\nNode: v10.15.0\nMy question is npm only install package/truffle file without the package/truffle-compile that @Shadowstep33 PR. Then why can i still run truffle compile& truffle migrate successfully?\n. ",
    "ryanfalzon": "Hi I uninstalled truffle and installed again, however I am still getting the same error.. ",
    "DZariusz": "I also had same error... solution for me was to rename solidity test file to have same name as contract inside - I had typo in file name.. ",
    "Lilith1410": "I had the same issue on ubuntu. instead of \nimport \"../contracts/Products.sol\";\ni hardcoded in the relative path of the folder in my system. seems to work now. probably a path issue. ",
    "kevinmcfarlane": "In my case it can't see the Assert library e.g., \nTypeError: Member \"equal\" not found or not visible after argument-dependent lookup in type(library Assert).\n        Assert.equal(funding.owner(), this)\nWorks in Truffle 0.4.x.. ",
    "zach-is-my-name": "Sounds reasonable.  I'll PR the docs to make this explicit and close here and re-open if necessary. ",
    "sbrichards": "Ah, looks like that solidity version is hardcoded in the template:\nhttps://github.com/trufflesuite/truffle/blob/develop/packages/truffle-core/lib/templates/Example.sol\nThinking there must be a way to extract the version (similar to the truffle version command) & input that into the template? I'll dig into this but any guidance would be helpful. Thanks.. Thanks for the quick reply @eggplantzzz. Sounds simple enough, I'll take a swing at opening a PR.. Note: only change to packages/truffle-core/test/create.js is the assertion on line 49. Everything else is from the pre-commit linter.. ",
    "BenSchZA": "I experienced the same issue, on NixOS:\n\ntruffle version ~ v5.0.2 (core: 5.0.2)\nnode --version ~ v10.12.0\nnpm --version ~ 6.4.1\nUsing Etherlime for tests\n\nSee gist for logs: https://gist.github.com/BenSchZA/6d115be7a4547ddf587f91ab1dbd3c98\nBy downgrading to Truffle v5.0.0 the issue no longer occurs. I can successfully print variables and values without the above error @wxlcat\n@gnidan I discussed this issue briefly with you on Gitter. Decided yesterday to work my way through the versions to see if it was version specific.. ",
    "wxlcat": "@BenSchZA  Thanks buddy.\nBy the way, Truffle 5.x.x no longer print transaction hash of contracts method calling except contract deployment in migration. Do you know how to make it print all transaction hash? It cumbersome to manually print it.  . ",
    "projectoblio": "i got this error today. it would have been easier to debug if failed contract calls printed the transaction hash. it was kind of awkward that i have to use something else (geth, ganache) to find the transaction hash. truffle should cover steps from error --> debug. ",
    "dgrmunch": "How is this going? Is there any deadline? Thanks!. ",
    "JamesTherien": "I have the same issue on macOs 10.14.2\nA workaround:\ntruffle test --compile-all\nbut does more than just compile. ",
    "remilb": "No problem, thanks for the awesome tools!. ",
    "princesinha19": "Thanks, @filips123  for your quick response. \nI have asked the same question on web3 but they are saying that you guys are using unofficial API.\n\n. I have done a temporary solution.. @gnidan \nSteps to reproduce:\n1. Install truffle-box using npm\n     npm install truffle-box --save\n2. Compile and migrate your contracts using truffle migrate command.\n3. Import truffle-box inside your project (In nodejs app.js)\nconst contract = require(\"truffle-contract\");\nvar contract_json_data = require('../build/contracts/ContractName');\nvar MyContract;\nMyContract = contract(contract_json_data);\nMyContract.setProvider(web3.currentProvider);\n\nUse contract methods/functions inside your app.\neg..\n```\nMyContract.deployed().then(function(instance){\n    ContractInstance = instance;\n     instance.function();\n});\n\n```\n5. Now run the app using node app.js command. You will get the error.\n. Okay no problem @gnidan. Let's hope after upgrade the issue will get resolved.. which project you are running?\nFirst import web3 inside your code and check RPC is connected or not.. ",
    "alcuadrado": "A smaller reproduction script is:\n\nnpm init -y\nnpm install truffle-contract\nnode --eval 'require(\"truffle-contract\")'\n\nIt results in this error:\n```sh\n/private/tmp/repro/node_modules/web3-core/dist/web3-core.cjs.js:148\n      throw new Error(\"Missing parameter: \".concat(name));\n      ^\nError: Missing parameter: provider\n    at Function.throwIfMissing (/private/tmp/repro/node_modules/web3-core/dist/web3-core.cjs.js:148:13)\n    at Web3.AbstractWeb3Module (/private/tmp/repro/node_modules/web3-core/dist/web3-core.cjs.js:17:107)\n    at new Web3 (/private/tmp/repro/node_modules/web3/dist/web3.cjs.js:30:68)\n    at Object. (/private/tmp/repro/node_modules/truffle-contract/lib/utils.js:7:12)\n    at Module._compile (module.js:653:30)\n    at Object.Module._extensions..js (module.js:664:10)\n    at Module.load (module.js:566:32)\n    at tryModuleLoad (module.js:506:12)\n    at Function.Module._load (module.js:498:3)\n    at Module.require (module.js:597:17)\n    at require (internal/module.js:11:18)\n    at Object. (/private/tmp/repro/node_modules/truffle-contract/lib/execute.js:4:13)\n    at Module._compile (module.js:653:30)\n    at Object.Module._extensions..js (module.js:664:10)\n    at Module.load (module.js:566:32)\n    at tryModuleLoad (module.js:506:12)\n```. Hi,\nI agree that downgrading is not the best solution, but what about pinning web3's versions in future releases of truffle-*? I'm worried that this will probably happen again during web3's betas.. That would be really helpful, as truffle-contract can't be used right now.. ",
    "baiye225": "\n@filips123 I saw that. @eggplantzzz is working on another PR to pin to beta.37, to give us time to upgrade later.\n\nweb3@1.0.0-beta.37 works for me!\nHere is the command:\n```\nnpm uninstall web3\nnpm install web3@1.0.0-beta.37\n```. ",
    "wanseob": "I'm suffering from the same issue. \nTruffle v4.1.15 (core: 4.1.15)\nSolidity v0.4.25 (solc-js)\nnode:  v11.9.0\nnpm: v6.5.0\nIt works fine when I call them with node --stack-size=1200 option\nbash\nnode --stack-size=1200 ./node_modules/.bin/truffle compile. And for the Travis-CI setting, I'm now using the following setting for this problem \nyaml\nbefore_install:\n  - cp \"$(which node)\" \"$(which node)_bin\"\n  - echo '#!/bin/bash' > $(which node)\n  - echo \"$(which node)_bin --stack-size=1200 \\$@\" >> $(which node). ",
    "freeatnet": "@gnidan What is the plan for this? Should those facing a barrage of errors downgrade truffle? Is the truffle team planning a release that fixes these issues in the next few days?. ",
    "pieterhartel": "Dear Gnidan,\nThank you for your suggestion to avoid the problem by upgrading solc. However, that won't work for me because I am trying to as it were to \"recreate history\". For my research I re-compile smart contracts with the same compiler version that was used to generate the binary deployed on the mainnet. I gather this information from etherscan. See for example the contract Vitaluck at [https://etherscan.io/address/0xef7c7254c290df3d167182356255cdfd8d3b400b#code]. This was compiled with v0.4.19, so I want to re-compile with the same version and deploy it in my testnet for further analysis. \nCould you please fix \"truffle-compile\" so that it does not throw an exception, but instead sets legacyAST to a value that at least allows the truffle test to finish?\n--pieter. Dear @gnidan thanks for your feedback. I hope that it will be possible for the Truffle team to fix TypeError exception problem soonish.\n--pieter. @dennymrh no, sorry I have not had the time to look into this, but I am still very much interested in a fix.. @dennymrh I tried most of the old versions to no avail. Only 0.4.9 and up work.. ",
    "dennymrh": "Hi @pieterhartel, I have the same issue as you. Have you gotten this issue fixed?. @pieterhartel Thank you for your response, is there any way to run solidity 0.4.4 with the current truffle? . ",
    "bweick": "I'm having this same issue as well. @ImmuneGit have you been able to find a solution? I'm using the same truffle version as you.. ",
    "madjarevicn": "Yes, @isaacsultan @eggplantzzz this issue is happening mostly in cases when your build file has some issues. (Mostly, when you're copying something from there or editing it for some reason, any typo will cause this issue. \n. ",
    "pklinger": "Seems related to issue #1691 on Windows\nCan you retry again @ShabanGomaa with updating truffle to v5.0.4? It is released https://github.com/trufflesuite/truffle/releases/tag/v5.0.4\nnpm uninstall -g truffle\nnpm install -g truffle@5.0.4\nI'm having no more issues with:\nWin64\ntruffle@5.0.4\nnode@10.15.1\nnpm@6.8.0\n. ",
    "lannocc": "I just ran into this same issue. Truffle v5.0.3, Solidity v0.5.0, Node v11.8.0 on macOS High Sierra 10.13.6.\nTruffle init and help both work but compile, deploy, and test all simply hang for a few seconds then quit with no output. In my case, this is a brand new project with a single simple Solidity contract.. Hey @joeyBerger I was able to resolve my issue. Seems I had some sort of corruption with my nodejs, probably because I had upgraded it using n instead of homebrew. I ultimately used homebrew to force-uninstall nodejs (ignoring dependencies) and then reinstall it. I then insured my local user had recursive ownership of /usr/local/Cellar/node and I was able to npm -g install truffle as my non-root user (it's recommended not to use root, and I was ending up with problems doing it with sudo). Now on Node v11.9.0 and truffle v5.0.3 is working fine.. Glad to hear you're moving forward too.. ",
    "avicloudpro": "Hi @joeyBerger  I am facing a similar issue truffle on ubuntu 18.04 VM. I am going to try what you did to resolve it, but if you find out more about this issue please do post. Its frustrating to see truffle compile and migrate just exit with no output. Thanks.. Thank you folks, This is a permission issue when installing truffle. I was able to solve it by changing the ownership of the folder to local user as suggested by @joeyBerger and reinstalling truffle. if you installed truffle using root credentials then you will have to use root previliges to execute truffle compile/migrate. ",
    "RostyslavBortman": "The same issue. Oh, thanks\nAnd I solved it by using another version 0.5.2\nThanks for the response\n\u0432\u0442, 5 \u0444\u0435\u0432\u0440. 2019 \u0433., 15:33 Sylvain Kritter notifications@github.com:\n\nHi, I solved on Ubuntu 18 by sudo truffle compile.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/trufflesuite/truffle/issues/1694#issuecomment-460638908,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AhhUE3DBhMSkmNbhHreFNV-kXE8t_c8pks5vKYgYgaJpZM4af9ok\n.\n. \n",
    "sylvainKritter": "Hi, I solved on Ubuntu 18 by sudo truffle compile.. ",
    "linuxcid": "\nHi, I solved on Ubuntu 18 by sudo truffle compile.\n\nThank you for your post, It works with me also in a MacOSx Console!. ",
    "MichalZalecki": "@zulhfreelancer Sure, it's easy to \"skip\" the problem, but it doesn't solve the problem with dry run.. ",
    "gabeibarra": "I was having the same issue as @Bowfish above connection not open on send(), and then when changing to many different Truffle / Web3js version pairs, also having the original subscription error.\nThere are also errors in the HttpProvider provider, preventing an http or https deploy (This is the only way I know to do an https deploy to custom network!!!).\nNow I'm doing manual deploys without Truffle, but I'd like to help get to the bottom of it in a PR. Can anyone point us to the source code area as I investigate?. ",
    "mcgingras": "That work perfectly! Thanks so much.. ",
    "FlashBlaze": "I know this issue is closed, but I was able to solve it by running compile and migrate as a root. You can close this if you want, but I just wanted to put it out there.. ",
    "jainsuchita": "Thank you @AtlasQuan Worked for me.\nsudo truffle compile. ",
    "18dew": "Same error, Rolling back to 4.x.x till stability is achieved. \nGetting this error when deploying using trufflehd-wallet provider with private keys explicitly mentioned in code. ( insecure method ) \nHowever I stumbled on to this error as in truffle 5.x.x wallet provider does not work. as in no errors and no contract deployment also. . ",
    "saturn-network": "Can't even get through truffle compile --list\n\nError: Failed to complete request to: https://solc-bin.ethereum.org/bin/list.json. Are you connected to the internet?\n\nMaybe that's the culprit. Relevant: https://github.com/trufflesuite/truffle/issues/1721. @foodaka see workaround in #1721 . Temporary workaround:\npatch\ndiff --git a/node_modules/truffle/build/cli.bundled.js b/node_modules/truffle/build/cli.bundled.js\nindex 89cf161..ed43843 100755\n--- a/node_modules/truffle/build/cli.bundled.js\n+++ b/node_modules/truffle/build/cli.bundled.js\n@@ -120421,8 +120421,8 @@ const fs = __webpack_require__(4);\n class LoadingStrategy {\n   constructor(options) {\n     const defaultConfig = {\n-      versionsUrl: \"https://solc-bin.ethereum.org/bin/list.json\",\n-      compilerUrlRoot: \"https://solc-bin.ethereum.org/bin/\",\n+      versionsUrl: \"https://raw.githubusercontent.com/ethereum/solc-bin/gh-pages/bin/list.json\",\n+      compilerUrlRoot: \"https://raw.githubusercontent.com/ethereum/solc-bin/gh-pages/bin/\",\n       dockerTagsUrl:\n         \"https://registry.hub.docker.com/v2/repositories/ethereum/solc/tags/\"\n     };. ",
    "foodaka": "also having this issue, any workaround @Bowfish . @saturn-network your workaround worked for me. ",
    "mattcrooks": "Seeing something similar in our environment (same as above) when using Gulp watch task. Deleting build folder resolves it.. ",
    "LucasRodriguez": "Yes everything compiles, and works like a charm, I do believe I found the bug too. \nWhen calling the function safeTransferFrom from Token1 he function is indeed called by holder1, how ever the subsequent functions are 100% being called by the token1 address.\nHere are the steps to prove the above statements.\n\n\nWhen deploying the Token1 Smart Contract we generate 100 tokens and automatically deploy them to holder1\n\n\nWe then print out holder1 balance to confirm we dont have indeed recieved them with this.token.balanceOf(holder1) which does return 100. \n\n\nHowever the function safeTransferFrom() when called by holder1 reverts on the safemath.sol sub() function. \n\n\nWe know that the function does have balance because we checked above, \n-When we debug the transaction, we see the sender does not have enough balance. \n\n\nMake sure the Tokens contract has a balance before safeTransferFrom is called.\n\n\nWhen we do this the transaction goes through successfully, but nothing actually executes  because the contract does not have the permission to send tokens on behalf of the address. \nNow surely  this cannot be expected behavior?\n. So apparently this is expected behaviour. Which is unfortunate, but makes sense in the ERC20 implementation we get rid of token ID which is what works around the issue in the ERC721 implementation in any case this would be more of a solidity problem than a truffle one so I will close the issue. . ",
    "AchalaSB": "Closing this issue since it is fixed for version Truffle v5.0.0-next.26 . @eggplantzzz You are right. Node has to install using NVM and people please use npm install -g truffle don't use sudo npm install\nThe latest version truffle v5.0.5 is working fine for all the specific version of solidity . ",
    "ewust": "Also seeing this problem:\nTruffle v5.0.4 (core: 5.0.4)\nSolidity v0.5.0 (solc-js)\nNode v10.15.1\nDowngrading to Truffle v5.0.0 seems to fix it for now.. ",
    "sulenn": "The same problem\uff1a\nTruffle v5.0.5 (core: 5.0.5)\nSolidity v0.5.0 (solc-js)\nNode v10.15.1. ",
    "yqsy": "The same problem:\nTruffle v5.0.5 (core: 5.0.5)\nSolidity v0.5.0 (solc-js)\nNode v10.8.0. ",
    "omid04": "the same problem :\nTruffle v5.0.5\nsolidity 0.5.4\nNode v11.10.0. ",
    "andig85": "Same problem here\nTruffle v5.0.5 (core: 5.0.5)\nSolidity v0.5.0 (solc-js)\nNode v11.10.0\nIf I run 'truffle compile' as root user, it works.. ",
    "muzakparov": "if you installed with sudo npm ... then:\nsudo truffle develop\nshould make it work. ",
    "chrischip": "Please note that this is not an uncommon scenario and might affect a lot of Dapp  implementations. Both ERC20 and ERC721 have the events \"Transfer\" and \"Approval\", both have a slightly signature (one parameter is indexed vs the other one is not). If a contract tries to invoke a function which utilize both ERC20 and ERC721 at the same time, truffle-contract will appears to fail (while the blockchain could successfully processed the transaction). . I dive deep into the code and it seems the problem lies in the Web3 version provided. In my unit test I think web3 is instantiated by Truffle test, and in PRD it is instantiated by Drizzle.  I compared the Web3 version they (Truffle and Drizzle) used to the very current version of Web3, it seems that the issue were addressed in the latest Web3 (I didn't actually test it but the decodeLogs part of the code seems to be very different). I think once Truffle move to the new Web3 version, this will probably be resolved. Please correct me if I am wrong.\nCurrently that is nothing I could do more. I just catch that specific error, simply ignore it and assume that the transaction has been executed successfully.\nI struggle so much on the different versions of Web3, and also the providers, especially with subscriptions as HTTP polling seems to be taken out of Web3 1.0. Really hope there is a solution for this Web3 version hell.\n. My client side from MetaMask + Drizzle definitely still having the same problem. I can only catch it and ignore it. Otherwise than the annoying error it doesn't seem to have any other side effect so far...... I also have a lot of problem with setting the providers. Have you try to match your Web3 version to Truffle's one? I can use successfully with http provider and on the rinekby. The only problem i got is http provider doesn't support subscription and if I use WebsocketProvider for Rinekby there is a SSL handshaking problem which this version of web3, really struggling with the right combination of different versions.. ",
    "hardlydifficult": "We just hit the same.  Because we interface with ERC20 and ERC721, we cannot rename the \"Transfer\" and \"Approval\" events as @chrischip pointed out.\nIs the work-around to migrate tests to not use Truffle anymore, e.g. making calls with web3 instead? Anything else I could try?. I created another example of this issue:\nhttps://github.com/hardlydifficult/SolidityBugInvestigation_EventsWithTheSameName\nLet me know if there are any questions on this\nIt seems switching to the web3 API is not a viable workaround here (the request hangs instead of throws as error).\nThis example is very close to what we are trying to achieve, our contract implements the ERC721 standard (including the Transfer event) and is attempting to transfer a ERC20 token (which emits a different Transfer event).  \nPlease let me know if you have any suggestions, not sure how we should proceed here.. Good insight, thanks for sharing.  I believe Truffle is using Web3 beta 37... and the versions which came after included breaking changes that seem to be causing others issues.  It seems the general recommendation at the moment is to stay on beta 37 until the latest version stabilizes again.  I wonder what the latest is on that and if Truffle is considering an upgrade soon.\nIt seems the only path forward is to catch and ignore the error.  But I'm concerned that if the issue is Web3 specifically we may encounter problems in our dapp as well (vs just Truffle tests).. I believe we found a workaround which will avoid the error completely, make the call using web3's encodeFunctionCall followed by sendTransaction (example below).\nI'm guessing this works since when making the call this way, web3 does not know the ABI for the rest of the contract and therefore cannot attempt to decode logs (which is where the failure occurs).\nconst call = web3.eth.abi.encodeFunctionCall(\n  testContract.options.jsonInterface.find(\n    e => e.name == 'sendToken'\n  ),\n  [token.address, toAccount]\n)\nawait web3.eth.sendTransaction({\n  to: testContract.options.address,\n  data: call,\n  from: tokenOwner \n}). Here's an example from greenkeeper on a public repo https://github.com/unlock-protocol/unlock/issues/2067. ",
    "lrgeoemtry": "as asked by @gnidan \n truffle version\nTruffle v4.0.7(core: 4.0.7)\nSolidity v0.4.24 (solc-js)\nalso the project this is happening in is https://github.com/hercone/restful-hipr\n@xen1024 is the lead dev on here . @xen1024 \nyou need to do this in hipr anyway. . ",
    "honestbonsai": "If you log out resolve.contracts() here: https://github.com/trufflesuite/truffle/blob/develop/packages/truffle-migrate/migration.js#L117\nthere's always an empty Migrations object at the end of the array. I'm guessing that overwrites the original non-empty Migrations object.\n```\nStarting migrations...\n======================\n\nNetwork name:    'ganache'\nNetwork id:      5777\nBlock gas limit: 6721975\n\n1_initial_migration.js\nDeploying 'Migrations'\n\n\ntransaction hash:    0xed940c9f801389a1b8676ef45199ab52467befda3a0bf8c410c8be6e04c69515\nBlocks: 0            Seconds: 0\ncontract address:    0xb7e5aDA767458702B9cCdeE90569871B4e3c9025\naccount:             0x9827CfC78824baDa5c1A4802197fC5646DD8F5E3\nbalance:             99.11392156\ngas used:            284908\ngas price:           20 gwei\nvalue sent:          0 ETH\ntotal cost:          0.00569816 ETH\nSaving artifacts\n\n\n\nTotal cost:          0.00569816 ETH\n\nresolverIntercept.contracts [ 'Migrations', './Migrations' ]\n0 'Migrations' { '5777':\n   { events: {},\n     links: {},\n     address: '0xb7e5aDA767458702B9cCdeE90569871B4e3c9025',\n     transactionHash:\n      '0xed940c9f801389a1b8676ef45199ab52467befda3a0bf8c410c8be6e04c69515' } }\n1 'Migrations' {}\n2_deploy_contracts.js\nReplacing 'SimpleStorage'\n\n\ntransaction hash:    0xe0c27084b279898375c9e756951b9101adbb795bd0490b0905c505550df3a777\nBlocks: 0            Seconds: 0\ncontract address:    0xcED2B31b5D4537F7774470b0F9b1f6c05e759109\naccount:             0x9827CfC78824baDa5c1A4802197fC5646DD8F5E3\nbalance:             99.1110313\ngas used:            144513\ngas price:           20 gwei\nvalue sent:          0 ETH\ntotal cost:          0.00289026 ETH\n\nReplacing 'TutorialToken'\n\n\ntransaction hash:    0x8ece6ae1e9aac15de1051c0c24ff086698b9d9d9ce63d82ddc211cd577d1a064\nBlocks: 0            Seconds: 0\ncontract address:    0x49f48e41a6C6b05aa82405a7786b45b6aFa297B1\naccount:             0x9827CfC78824baDa5c1A4802197fC5646DD8F5E3\nbalance:             99.08234308\ngas used:            1434411\ngas price:           20 gwei\nvalue sent:          0 ETH\ntotal cost:          0.02868822 ETH\n\nReplacing 'ComplexStorage'\n\n\ntransaction hash:    0x5f3a4649ba17f441b3b0ac46c13a28449a9d422617a2213d67de161b9f56bc9c\nBlocks: 0            Seconds: 0\ncontract address:    0xef8756ffCEAc230B8B923d033C5b688155d4442B\naccount:             0x9827CfC78824baDa5c1A4802197fC5646DD8F5E3\nbalance:             99.05233648\ngas used:            1500330\ngas price:           20 gwei\nvalue sent:          0 ETH\ntotal cost:          0.0300066 ETH\nSaving artifacts\n\n\n\nTotal cost:          0.06158508 ETH\n\nSummary\n\nTotal deployments:   4\nFinal cost:          0.06728324 ETH\n\nresolverIntercept.contracts [ 'SimpleStorage',\n  'TutorialToken',\n  'ComplexStorage',\n  './Migrations' ]\n0 'SimpleStorage' { '5777':\n   { events: {},\n     links: {},\n     address: '0xcED2B31b5D4537F7774470b0F9b1f6c05e759109',\n     transactionHash:\n      '0xe0c27084b279898375c9e756951b9101adbb795bd0490b0905c505550df3a777' } }\n1 'TutorialToken' { '5777':\n   { events:\n      { '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef': [Object],\n        '0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925': [Object] },\n     links: {},\n     address: '0x49f48e41a6C6b05aa82405a7786b45b6aFa297B1',\n     transactionHash:\n      '0x8ece6ae1e9aac15de1051c0c24ff086698b9d9d9ce63d82ddc211cd577d1a064' } }\n2 'ComplexStorage' { '5777':\n   { events: {},\n     links: {},\n     address: '0xef8756ffCEAc230B8B923d033C5b688155d4442B',\n     transactionHash:\n      '0x5f3a4649ba17f441b3b0ac46c13a28449a9d422617a2213d67de161b9f56bc9c' } }\n3 'Migrations' {}\n```. Ok I think I solved it, will submit a PR. Fixed by #1763. Odd tests failing, but it works in Ganache.\nFor example packages/truffle/test/scenarios/happypath, the networks field is empty, so the tests say Error: Migrations has not been deployed to detected network (network/artifact mismatch). Waiting on trufflesuite/truffle-init-default#14 and truffle-box/bare-box#19 to be merged to fix the tests\nEdit: merged, restart the build to re-run tests. Actually #1763 solves this and doesn't break any tests. Closing this in favor of that PR.. Actually, reopening as this PR fixes the inaccuracy in the internal artifacts.require, will rebase off develop to see if the tests pass.. Possible script (for Mac)\npython3.6 -m venv vyper-env\nsource vyper-env/bin/activate\npip install vyper\nIf a requirements.txt exists\npython3.6 -m venv vyper-env\nsource vyper-env/bin/activate\npip install -r requirements.txt. ",
    "Eugenpaul": "I was having the same issue, but on Ubuntu 16.04. The thing that solved it for me was downgrading truffle to 5.0.3 (5.0.4 and 5.0.5 both appeared to have this problem)\nEnv:\nGanache CLI v6.3.0 (ganache-core: 2.4.0)\nNode v11.9.0\nnpm 6.8.0. ",
    "jgege": "Thank you for quickly coming up with a solution :) . ",
    "kipliklotrika": "Same here. It seems that it works now which leads me to conclusion that the problem is on Infura side. Too bad I din't create more debug logs.. ",
    "Chococoin": "Bug solved! Let's close it.\nDetails in the same repo. . ",
    "zac-williamson": "Hi there, I'm having a similar issue with truffle-external-compile, figured I'd chime in here since the issue is so similar.\nWhen I attempt to compile contracts through a custom compiler, the artifact object I'm creating is failing truffle-contract-schema's schema validation, in a similar manner as @WyseNynja . The culprit appears to be a two-dimensional static array. The abi is the following:\n\"abi\": [\n        {\n            \"constant\": true,\n            \"inputs\": [\n                {\n                    \"name\": \"\",\n                    \"type\": \"uint256[2][2]\"\n                },\n                {\n                    \"name\": \"\",\n                    \"type\": \"uint256[2]\"\n                }\n            ],\n            \"name\": \"ecBatchMul\",\n            \"outputs\": [\n                {\n                    \"name\": \"\",\n                    \"type\": \"uint256[3]\"\n                }\n            ],\n            \"payable\": false,\n            \"stateMutability\": \"pure\",\n            \"type\": \"function\"\n        }\n    ]\nI can post more details about the error messages I'm getting, if that helps. They're almost identical to @WyseNynja 's log. I don't think multidimensional static arrays are an experimental ABI encoding either - the solc compiler has supported this kind of interface since at least version 0.4.8. Additionally, if I attempt to compile a standard Solidity contract that has the same inteface, via truffle compile, no errors are thrown.\nAre there any plans to support for 2-dimensional static-sized arrays into truffle-contract-schema? If not, is there a way of turning off the schema validator?\n. ",
    "wTendera": "I recently run into similar issues with truffle tests\nWhen truffle is running tests it's supposed to have clean room environment for each test, so there should not be a difference if I run a test on it's own or with other tests.\nUnluckily that's not the case with my tests. When I run a test file on it's own every test passes nicely, but when I go for 'truffle test' on whole project suddenly the same test starts failing.\nMoreover it seems really non-deterministic as with each tests execution I can get different errors, or the test fails at different point.\nAt first I thought it was because I upgraded to solidity 0.5.4 (and truffle/ganache as well) but even on earlier distributions it works the same.\nI tried various setups with different versions of truffle/ganache/node but everytime at some point (usually random) my tests fail.\nCurrently I'm running everything on\nGanache CLI v6.2.5 (ganache-core: 2.3.3)\nTruffle v5.0.3 (core: 5.0.3)\nSolidity - 0.5.4 (solc-js)\nNode v8.9.4\nAny idea why is it happening?. @isaacsultan   Updating ganache-cli to 6.4.1 made it work for me. \nOther issues\nhttps://github.com/trufflesuite/ganache-cli/issues/624\nhttps://github.com/trufflesuite/ganache-core/pull/329\nhttps://github.com/trufflesuite/ganache-core/issues/358. ",
    "kseniya292": "Hello. I'm still running into this issue. When I run truffle test test/pathToContract on each of my files, all tests pass. When I run truffle test almost half of the tests fail. I've tried: ganache-cli v6.2.4 and v 6.4.1. \nTruffle v5.0.8\nSolidity - 0.5.0\nNode v11.0.0\nAlso, a lot of the errors are reversed. For example:\n```\n1) Contract: DAO\n       Dao\n         constructor\n           it should set master registry:\n  AssertionError: expected '0xfBe5347D784aeEC17Fe45d1627fdc320A08C5Da3' to not equal '0xfBe5347D784aeEC17Fe45d1627fdc320A08C5Da3'\n  + expected - actual\n\n```\nThat is for this test:\nit('it should set master registry', async function() {\n        let address = await dao.masterRegistry.call();\n        assert.equal(address, masterRegistry.address);\n      });\nIt's testing that the two addresses are equal, which they are according to the error. But the error is expecting them to not equal ??. ",
    "dougiebuckets": "Hi there - @kseniya292 (above) and I are working on the same project. For kicks, I ran all of the tests in the reverse order that they run when we use truffle test. I.e., \ntruffle test file1.test.js file2.test.js file3.test.js file4.test.js file5.test.js file6.test.js\nNow, approximately 20 more tests fail vs when we run truffle test. Again, when we run each test file independently, all tests pass (e.g., truffle test test/file1.test.js).. ",
    "imthatcarlos": "is this slated for the next release? having an issue with truffle-hdwallet-provider https://github.com/ethereum/web3.js/issues/2447. Apparently there's an issue with beta.48 and getPastEvents() so we should wait for the next release, sometime this week according to Nivida. ",
    "mudgen": "@CruzMolina Thanks for looking into this. \nMy truffle project is not public. What do you want to see?. @CruzMolina  I looked in the code and I think I see the problem:\nIn the second line the return value is not assigned back to identifyingInfo.\nlet identifyingInfo = directory.split(\"truffle\")[0];\n          identifyingInfo.replace(/\\//gi, \"\\\\/\");\n          let removedInfo = new RegExp(identifyingInfo, \"g\");\n          error = error.replace(removedInfo, \"\");. @CruzMolina Now that I see this bug, how do I fix it in my truffle?   \nI tried editing C:\\Users\\nick\\AppData\\Roaming\\npm\\node_modules\\build\\cli.bundled.js to fix it but that did not do anything.. So I commented out the above lines from the file and now it is working.. @fainashalts  Thanks. I would like to but I am crunched for time and I don't know when I would get to it. . Thank you for paying attention to this issue and fixing it!!!!. ",
    "PizBernina": "@fainashalts Having a similar error over here. Thanks for looking into it.\nEDIT: \"truffle compile\" works for me, whereas \"truffle migrate\" leads to the same error as outlined above. Using windows os as well. . Thanks for creating awesome stuff & the quick response!. ",
    "mapachurro": "Glad to hear there's a fix -- I'm running into this too with truffle compile:\nC:\\Users\\Owner\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\command.js:120\n    callback(err);\n^\nSyntaxError: Invalid regular expression: /C:\\Users\\Owner\\AppData\\Roaming\\npm\\node_modules\\/: \\ at end of pattern\n    at new RegExp ()\n    at C:\\Users\\Owner\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\cli.js:93:1\n    at Command.run (C:\\Users\\Owner\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\lib\\command.js:120:1)\n    at Object. (C:\\Users\\Owner\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-core\\cli.js:54:1)\n    at webpack_require (C:\\Users\\Owner\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\webpack\\bootstrap 5543b191bb2cde506945:19:1)\n    at C:\\Users\\Owner\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\webpack\\bootstrap 5543b191bb2cde506945:65:1\n    at Object. (C:\\Users\\Owner\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\cli.bundled.js:71:10)\n    at Module._compile (internal/modules/cjs/loader.js:689:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)\n    at Module.load (internal/modules/cjs/loader.js:599:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:530:3)\n    at Function.Module.runMain (internal/modules/cjs/loader.js:742:12)\n    at startup (internal/bootstrap/node.js:283:19)\n    at bootstrapNodeJSCore (internal/bootstrap/node.js:743:3). ",
    "marcelomorgado": "Hey @eggplantzzz thanks for the response.\nThe Returned values aren't valid, did it run Out of Gas? (GnosisSafe contract) error was gone, thanks.\nBut remains the problem with the MANAToken contract. It's seems some kind of backward compatibilty with the older json schema because after do these changes manually on MANAToken.json the problem apparently was solved:\nrenaming contract_name => contractName\nrenaming unlinked_binary => bytecode\nrenaming schema_version => schemaVersion\nrenaming updated_at => updatedAt\nchanging updated_at field value format (epoch => date-time)\nadding stateMutability field to all functions\n. Oh, wait. Sorry @eggplantzzz the \"The Returned values aren't valid, did it run Out of Gas?\" (GnosisSafe contract) error wasn't gone. \nThe compiling process is working for that contract but a simple function call test is failing as related above.\nI'm trying to find some extra information about that. . An update here. I've found out what was happening with GnosisSafe contract: I wasn't initialized properly and now it's solved. Oddly the same test case was passing with same contract/migration code + compiling/deployment from its truffle project.\nSaid that, seems that the only remain problem is about old schema MANAToken json.. ",
    "dblockunity": "I followed the steps listed in this bug report and what I found was that the migration worked when I reproduced the problem. When creating the report I had to create an environment that matched my proprietary codebase, but the new environment gives different results.. In my original repository, I deleted the contracts folder and tried the migration again and it was successful. The issue seems to be caused by old null references after a migration takes place with migration scripts where javascript variables reference invalid artifacts.. ",
    "panicape": "@dblockunity hi, i just got the same error and i want to ask you which repository are you taking as the original one? do you mean the blockchain where the contracts are being deployed? some concrete folder in the project? any other?\nThanks for your help. ",
    "timbeiko": "Thanks for the rapid fix \ud83c\udf89!  Is there a way I can try this out on my project before the next release, or will I have to wait for it and update Truffle? Thanks! . ",
    "johnmcdowall": "All I did was npm install colors --save.  Thanks npm. \nPS. Don't merge this quite yet, updated the description to indicate its a WIP.\n. ",
    "quantumgravity444": "Okay sounds good. I'll change it to var token .\n. ",
    "jklepatch": "this is safer to test for undefined: typeof target.path !== \"undefined\"). ",
    "sc0Vu": "Hi @gnidan\nThanks for your reply, I'd test on azure window 10, it worked!\nLooking forward this commit to be merged:). @gnidan apply throw error if getAddress function is undefined: Uncaught TypeError: Cannot read property 'apply' of undefined.\nMaybe we can change like:\nJS\ngetAddress: function() {\n  if (provider.getAddress === undefined) return '';\n  return provider.getAddress.apply(provider, arguments);\n}\n. ",
    "MickdeGraaf": "Something to do with interfaces I believe. When importing something goes wrong with them. I dont know. Saw it somewhere as a fix and there was no fix merged anywhere so I created a pull request.. ",
    "montyly": "suggestion\n    console.log(`Please install the package using \\`pip install slither-analyzer\\`\\n`);. ",
    "anukul": "Oh, sorry about that. I had built it from source, never actually installed from pypi.. "
}