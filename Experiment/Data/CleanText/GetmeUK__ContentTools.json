{
    "anthonyjb": "You're right that's something I need to add to the repo READMEs and the API docs. To help answer your question ahead of that:\nBrowser support\nThe current aim is for all the libraries to support IE9+, Chrome and Firefox. Test suites are complete for all the libraries accept ContentTools and I'm using Jasmine to check that the tests pass in those browsers.\nThere will be some visual differences for ContentTools in IE9 as I use CSS animations for some of the UI feedback.\nMy current development priority is to complete the test suite for ContentTools.\nUnderlying API\nSo whenever text is being edited then the contenteditable attribute is appended to the element (or a wrapper element in the case of table dimensions and list items - thank you IE for that doozy). Even so the output of the contenteditable element is marshalled using the HTMLParser library to ensure that the content output is consistent and not browser specific. \nAs for polyfills the only one I can think of is:\nHACK: Add constructor name property to IE9+, code based on the stackoverflow \nresponse http://stackoverflow.com/a/17056530\nView source\nThere are a number of helper functions provided to support functionality in a consistent way across all browsers (such as adding and removing CSS classes) but they don't overwrite native browser behaviour. \n. Thanks for the feedback @butsjoh and @dburrows. \n. Good question. I've worked on a couple of pretty large React projects in the last 12 months but I'm still not confident I'm qualified to answer. \nThe basic UI for ContentTools attaches itself to the body of the document as a single element <div class=\"ct-app\">...</div> and the editor that's provided as part of the library in turn uses the UI. It's probable that the editor could run alongside other react components without conflict. Alternatively a React based UI for the editor could be created (but that would be quite a bit of work).\nAs for making a child of a React component editable you'd probably have to use something along the lines of <div key=\"...\" dangerouslySetInnerHTML={{__html: '<div data-editable=\\\"region-name\\\">...</div>'}} /> where the key is used to prevent the child component from being replaced on updates and the contents is set as raw HTML. The editor start/stop methods could be modified to trigger an update of the component when the user finishes editing the component(s).\nIf you have something specific in mind I'll happily attempt to put together an example to see what's possible?\n. (Very) Minimal React component example:\n```\n<!DOCTYPE HTML>\n\n\nContentTools react\n\n\n\n\n\n\n\nwindow.onload = function () {</p>\n<pre><code>// Setup editable React component\nvar EditableComponent = React.createClass({\n\n    getInitialState: function () {\n        return {content: this.props.content}\n    },\n\n    componentDidMount: function () {\n        var _this, editor;\n        _this = this;\n\n        // When the react component is mounted initialize the ContentTools\n        // editor.\n        editor = new ContentTools.EditorApp.get();\n        editor.init('[data-editable]', 'data-editable');\n\n        // Capture save events and update the react component\n        editor.bind('save', function (regions) {\n            // Update the state of the component\n            _this.setState({content: regions['my-region']},\n                function () {\n                    // HACK: Reselect the region DOM elements for the\n                    // editor (required because React will re-render the\n                    // contents of the component).\n                    editor._domRegions = document.querySelectorAll(\n                            '[data-editable]');\n                });\n        });\n    },\n\n    render: function () {\n        console.log(this.state.content);\n        return React.createElement(\n            'div',\n            {\n                key: 'my-region',\n                dangerouslySetInnerHTML: {__html:\n                    '&lt;div data-editable=\"my-region\"&gt;' +\n                        this.state.content +\n                    '&lt;/div&gt;'\n                }\n            });\n    }\n\n});\n\n// Mount the react component on the DOM\nReact.render(\n    React.createElement(EditableComponent, {content: '&lt;p&gt;Edit me&lt;/p&gt;'}),\n    document.getElementById('react-mount')\n);\n</code></pre>\n<p>}\n        \n\n\n```\nWhenever the user saves their changes the editor updates the content member of the React component's state, if the user cancels the state stays as it was. Hopefully this is a good starting point if you're looking to integrate the editor into React.\n. So I haven't added support for translations at the moment (and I really don't have a good excuse for not doing so). There's a tiny amount of text that would requires translation (in a quick tally I found approx 40 all of which are short).\nI think setting the language should be an option against the namespace ContentTools.LANGUAGE = 'en' and as you say allowing a languages.json file to be defined/loaded with additional translations.\nI've marked this as an enhancement and will add it to the mile stone in the readme.\n. @MalyshevDmitry thank you!\n. @tvaliasek my plan for tomorrow and over the weekend is to look into adding support for multiple languages. I have an approach that I've used on other libraries I've worked on so I don't think it will take me too long to put something together (and I have volunteers for French and Russian so far and hopefully others will help translate more languages too).\nThe only nasty bit right now I can think of is translating the helper titles in ContentEdit, as the content is currently part of the CSS - so I'll have to change that.\nOnce my solution is in the dev branch I'll let you know and get you to review. \n. Basic multilingual support is now available - I've posted a short tutorial on how to use it. Right now though we're a tad short on languages (Pig Latin is the only one available right now - which is of no use other than to test the concept).\nGuide available here: http://getcontenttools.com/tutorials/multilingual-support\n. Hi @tvaliasek thanks for the suggestion. Any changes would have to be submitted as changes to the CoffeeScript not the JavaScript as the JavaScript is built using grunt from the CoffeeScript. I only leave compiled JavaScript in place for builds and external dependencies (as in this case content-edit.js is a dependancy for ContentTools so the changes would need to be made to the CoffeeScript in that repo https://github.com/GetmeUK/ContentEdit and the dependancy updated in this one - I'm sorry if that seems very convoluted).\nUsing CoffeeScript the function parameters might be changed like so to use splats:\naddCSSClasses: (domElement, classNames...) ->\n    ...\nAllowing the function to be called like so:\nContentEdit.addCSSClasses(myElement, 'alert', 'alert-warning');\nWhich I agree would potentially be an improvement, however really it seems like what you'd really like is to be able to set multiple classes when defining a style, perhaps in the form:\nnew ContentTools.Style('Warning', ['alert', 'alert-warning'], ['p','div']),\nYou'll note that in the sandbox demo included in the repo there is a set of classes for setting good and bad example styles. Here I have to use 3 styles; Example, Good example, Bad example. On this basis I agree with you that support for multiple classes would be an improvement, it requires less options to be shown to the user and also prevents the issue where the user doesn't realise they need to select both Example and Good example.\nI don't believe your suggested solution will solve this problem fully however as whilst multiple classes will be applied the editor wont correctly check that both classes are applied to the current element and therefore the switch wont update correctly (at least I believe that's the case).\nI think the changes actually need to be made in the ContentTools library to the following sections:\n- https://github.com/GetmeUK/ContentTools/blob/master/src/scripts/styles.coffee#L31\n- https://github.com/GetmeUK/ContentTools/blob/master/src/scripts/ui/inspector.coffee#L143\n- https://github.com/GetmeUK/ContentTools/blob/master/src/scripts/ui/dialogs/properties.coffee#L57\nThis is definitely a feature I'd like to add/see moving forward.\n. @tvaliasek  If you get it working in CoffeeScript please submit it back as I'll be making this feature part of the first development milestone for sure :)\n. Hi @btbjosh - I think I closed the issue due to lack of activity. The initially approach taken by to solving this had a number of issues and a new approach would have been required.\nIf you want create a new issue for this I'll happily flag it as an enhancement and either work on myself when I get chance or open it up for others to contribute to? \n. Yes (well sort of) - there is already a behaviour defined for the the mouse up/down events against an image so you'd be changing that behaviour in essence. There are a couple of ways to do that: \nYou can either monkey patch the classes directly:\n```\nOverride the specific behaviour\nContentEdit.Image._onMouseDown = (ev) ->\n    ...Perform my custom behaviour...\nChange the DOM event bindings\nContentEdit.Image._addDOMEventListeners = () ->\n@_domElement.addEventListener 'click', (ev) =>\n    ...Perform my custom behaviour...\n\n```\nAlternatively you could inherit from the Image class and create a new class to override the behaviours:\n```\nclass MyImage extends ContentEdit.Image\n...override the _onMouseDown or _addDOMEventListeners methods here...\n\nRegister your new class as the default class to use for images\nContentEdit.TagNames.get().register(MyImage, 'img')\n```\nFinally you could potentially add custom events via the root node like so:\n```\nCapture node being mounted in the DOM event\nContentEdit.Root().bind 'mount', (node) ->\n# Check the node is an image\nif node.constructor.name != 'Image'\n    return\n\nnode.domElement().addEventListener 'click', (ev) ->\n    ...Perform my custom behaviour...\n\n```\n. @MalyshevDmitry Let me know how you get on - this is bound to be something others want to do so if there's no an easy way potentially this is something I need to improve on.\n. Yes absolutely, the editor has a paste method which can be monkey patched for example:\n```\nMonkey patch editors paste method\neditorCls = ContentTools.EditorApp.getCls()\neditorCls.paste = (element, clipboardData) ->\n    ... add you custom handler here ...\n```\nelement is the element being pasted into, and clipboardData is the content pasted by the user    (https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent/clipboardData).\nYou will need to use the develop branch as I modified the source to ensure the clipboardData is sent to the paste event, previously only a plain text version of the content was sent.\n. So if I patch the editor as you have done and console.log the clipboardData value I get a DataTransfer object which I can use to query for pasted data (https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent).\nThis allows me to query the pasted data, for example: clipboardData.getData('text/plain'), what is the value of clipboardData for you?\neditor.paste = function (element, clipboardData) {\n    console.log(clipboardData.getData('text/plain'));\n}\n. @MalyshevDmitry thanks - yep I got that wrong, that's the answer for #7 will move it now.\n. @crazy4groovy I don't see any reason why not - however you need some way of marking the content that you wanted to be able to change; you couldn't just start the editor, make the entire page editable and then save the HTML out. Either the page's HTML editable regions would need to have been marked in a way that your bookmarklet is set to look for (e.g data-editable=\"region-name\"), or you'd need to provide a mechanism by which the user could configure the bookmarklet before applying it (for example perhaps a way in which the user could click on the elements they want to be able to edit).\nJust to clarify: If you allowed users to mark the areas they wanted to edit the editor would have to be modified as a minimum to allow you to send DOM elements rather than a selector on init(...).\n. Thanks for the spot @saravntbe  - fixed.\n. No problem it was a valid contribution :+1: \n. I will certainly consider it. Oddly enough I'm not a git user for the most part, my version control tool of preference is Mercurial, but I know that most people out there prefer git and so I sold out ;)\nI don't want to get into a debate about ES6 vs CoffeeScript or any other transpiler, I use CoffeeScript because I like it's concise appearance (I use MoonScript for Lua for a similar reason). I find it very simple to switch between the two and have provided code examples in both JavaScript and CoffeeScript.\nThe libraries themselves can be used with JavaScript and documentation is provided, but if you wish to contribute code to the library and haven't used CoffeeScript before or don't like it then I accept that's a barrier. Building the project is pretty simple though grunt build/watch, and I'm guessing you'd have no objection to SASS over CSS. \nSo I have to be honest and say it's not a high priority for me now - but I will reconsider once ES6 is more fully supported by all the target browsers (https://kangax.github.io/compat-table/es6/).\nAs for your statements about CoffeeScript and most people; that may well be true but I don't mind if the project introduces more people to CoffeeScript who might otherwise not be aware of it, even it they don't like it. From my personal stand point CoffeeScript is a joy to use :)\n. Thanks @MarkusRehberg :+1: \n. @MalyshevDmitry I'm afraid not :( It's a drawback of the approach I'm using which is that at any one point only a small section of the content of the page is actually contenteditable, all the other elements on the page are just in there native state. \nYou can drag content blocks to new locations and delete them using the delete tool, but if your looking to select all the content on the page and the delete it then that isn't possible (though a short cut tool to delete all content in a reigion or all regions would be easy to add), a similar limitation is that it's not possible to select across two separate content blocks either. \nIn practice I haven't found this a significant drawback (well I haven't really noticed it for example whilst putting the site content together), but that's just my experience.\nIf you wanted to just select all content on the page you can while the editor is not active of course.\n. Fixed - thanks for the hint your suggestion was correct.\n. @twn39 thank you! :)\n. This is an interesting challenge (I think that would that's yjr correct word). It's something I have considered but I'm really not sure of the best approach. My thoughts have been to either;\n- do as you've suggested and make the layout tool use ContentEdit nodes,\n- or look to create a level above the editable content which allows you to insert layouts (snippets of HTML) and add support for dynamically detecting any regions added.\nBoth approaches have some advantages/pitfalls. \nWith the first approach it's absolutely possible to do as you've suggested and clone what has been done for tables but using a different element type (such as a div div) to layout content. The lowest parent element in this case would have to ideally support more than a single element (as it does in the table division), because you'd want to be able to treat them as effectively their own sub-regions. This has some complications in implementation but would fit in pretty natively with the existing editable structure and editor tools.\nWith the second approach I think you'd need to consider adding a separate mode in which the layout of the page can be modified (sections added, removed, re-ordered). We would need to add support for dynamic detection of regions but everything should else should work as it does now. This approach allows predefined layout templates to be created along the lines you stated (2 column layout, 3 columns, 1:3 split, etc).\nI would be interested to hear some thoughts on what people would like to see in regard to this.\n. Hi @petrleocompel and @jesperstarkar,\nYes I plan to add support for managing content layout/structure in the future through a separate library for more information on what's being planned please checkout my response to this similar question - https://github.com/GetmeUK/ContentTools/issues/50\n@petrleocompel you might also find @bfintal's work with CT interesting, he's already implemented support for layout controls in a WordPress plugin he's working on (https://www.youtube.com/watch?v=kFCWD3m9hyY), he's on the Gitter channel so you maybe able to ask him for a few pointers.\n. Hi @developit - sorry for the slightly delayed reply - so I'll start by stating that I'm not well versed in the use of web components or the shadow DOM but I'm aware of them and hopefully have enough of a grasp to respond to your question.\nSo I think potentially a custom element to provide layout could well be used and that this would be a potentially a very nice solution. In fact I'm sure I've seen an in-page editing tool that takes this approach entirely for all editable content (but I can't find it any more perhaps someone else will be able to post a link to it if they know).\nThe issue at the moment at least would be support and the need to use a polyfill - http://caniuse.com/#search=components. Since I wouldn't want to add a separate polyfill library as a requirement I think we'd have to look to provide options for both approaches.\n. I'm now closing this issue as support for this behaviour will be provided through ContentFlow: https://github.com/GetmeUK/ContentFow. Hi @concept-core - so yep, ContentFlow is an extension to ContentTools, you can run them along side each other, ContentTools can still be run independently however ContentFlow requires ContentTools.. @tommedema so content flow certainly helps you to manage far more complex layouts but it doesn't solve the issue of arbitrary source because if ContentTools doesn't have code in place to handle a particular element type it can only convert it to a static element.\nI'm hoping to put together a 5 minute video this weekend showing ContentFlow in action on a production site (I'm just finishing up at the moment on a project using ContentFlow), I think it showcases very well what's possible with ContentFlow (over just ContentTools) with regard to flexible page layouts and so it well be of interest to you - I'll post a link here once it's uploaded.. Hi @selfrefactor - thanls for the kind comments. To get the current caret position for the focused element you can use the elements selection() method like so:\nvar focused = ContentEdit.Root.get().focused()\nif (focused) {\n    console.log(focused.selection());\n}\nThe selection returned will be a ContentSelect.Range instance. To determine the start/end of the selection use:\nrange.get() // returns an array [start, end]\nIf that's not working for you or I've not answered your question could you post an example of your code and I'll see if I can help further (might well be you've found a bug).\n. @MalyshevDmitry Thank you for this - allowed me to spot an issue with the UI and long words also.\n. @twn39 thank you! \n. @guillaumepiot cheers buddy.\n. Thanks @tvaliasek!\n. Thanks @J2TeaM :+1:\n. Awesome work @guillaumepiot :+1: \n. @martyLauders Where would the directive be inserted? Would it be within an editable region or would the directive actaully be an editable region (e.g contain editable content, <p>, <img>, etc.)\nCould you provide a bit more detail on what you're trying to achieve? \n. Hi @martyLauders sorry my knowledge of Angular is really limiting me here. The problem here I think is that if Angular updates the contents of an editable region while it's being edited then the editor and Angular will become out of sync (e.g the editor wont know about the new element added by Angular). \nIf you can provide an example of the HTML before and after that you're trying to achieve I might be able to provide a solution that's not specific to angular?\n. @iit2011081 this sounds like the issue is caused by the editor being initialized multiple times without being destroyed?. Thanks @bitschubse :+1: \n. Hi @jlgit, thanks for the kind words. Once inserted the image should be resizeable and dragable, so sounds like there's an error. Any chance you can post any error output in the console along with your image uploaded code?\n. Hey @Sirlazer2  if you post me your code I'll take a look for you?\n. Thanks for highlighting those issue - yes some of them certainly look left over from CoffeeScript. If you give me an hour I'll run through the tutorial now and clean those up an  post a full working JavaScript example for you? \n. @Sirlazer2 Make that +15 minutes - almost there just an issue with the resize code in the page now.\n. Right (eventually) - I think that's the tutorial correctly updated and as promised a full working example. Let me know how you get on.\n// Define settings for the uploader\n    var CLOUDINARY_PRESET_NAME = 'ctpreset';\n    var CLOUDINARY_RETRIEVE_URL = 'http://res.cloudinary.com/contenttools/image/upload';\n    var CLOUDINARY_UPLOAD_URL = 'https://api.cloudinary.com/v1_1/contenttools/image/upload';\n```\n// Define the image uploader\nfunction cloudinaryImageUploader(dialog) {\n     var image, xhr, xhrComplete, xhrProgress;\n// Set up the event handlers\ndialog.bind('imageUploader.cancelUpload', function () {\n    // Cancel the current upload\n\n    // Stop the upload\n    if (xhr) {\n        xhr.upload.removeEventListener('progress', xhrProgress);\n        xhr.removeEventListener('readystatechange', xhrComplete);\n        xhr.abort();\n    }\n\n    // Set the dialog to empty\n    dialog.state('empty');\n});\n\ndialog.bind('imageUploader.clear', function () {\n    // Clear the current image\n    dialog.clear();\n    image = null;\n});\n\ndialog.bind('imageUploader.fileReady', function (file) {\n    // Upload a file to Cloudinary\n    var formData;\n\n    // Define functions to handle upload progress and completion\n    function xhrProgress(ev) {\n        // Set the progress for the upload\n        dialog.progress((ev.loaded / ev.total) * 100);\n    }\n\n    function xhrComplete(ev) {\n        var response;\n\n        // Check the request is complete\n        if (ev.target.readyState != 4) {\n            return;\n        }\n\n        // Clear the request\n        xhr = null\n        xhrProgress = null\n        xhrComplete = null\n\n        // Handle the result of the upload\n        if (parseInt(ev.target.status) == 200) {\n            // Unpack the response (from JSON)\n            response = JSON.parse(ev.target.responseText);\n\n            // Store the image details\n            image = {\n                angle: 0,\n                height: parseInt(response.height),\n                maxWidth: parseInt(response.width),\n                width: parseInt(response.width)\n                };\n\n            // Apply a draft size to the image for editing\n            image.filename = parseCloudinaryURL(response.url)[0];\n            image.url = buildCloudinaryURL(\n                image.filename,\n                [{c: 'fit', h: 600, w: 600}]\n                );\n\n            // Populate the dialog\n            dialog.populate(image.url, [image.width, image.height]);\n\n        } else {\n            // The request failed, notify the user\n            new ContentTools.FlashUI('no');\n        }\n    }\n\n    // Set the dialog state to uploading and reset the progress bar to 0\n    dialog.state('uploading');\n    dialog.progress(0);\n\n    // Build the form data to post to the server\n    formData = new FormData();\n    formData.append('file', file);\n    formData.append('upload_preset', CLOUDINARY_PRESET_NAME);\n\n    // Make the request\n    xhr = new XMLHttpRequest();\n    xhr.upload.addEventListener('progress', xhrProgress);\n    xhr.addEventListener('readystatechange', xhrComplete);\n    xhr.open('POST', CLOUDINARY_UPLOAD_URL, true);\n    xhr.send(formData);\n});\n\nfunction rotate(angle) {\n    // Handle a request by the user to rotate the image\n    var height, transforms, width;\n\n    // Update the angle of the image\n    image.angle += angle;\n\n    // Stay within 0-360 degree range\n    if (image.angle < 0) {\n        image.angle += 360;\n    } else if (image.angle > 270) {\n        image.angle -= 360;\n    }\n\n    // Rotate the image's dimensions\n    width = image.width;\n    height = image.height;\n    image.width = height;\n    image.height = width;\n    image.maxWidth = width;\n\n    // Build the transform to rotate the image\n    transforms = [{c: 'fit', h: 600, w: 600}];\n    if (image.angle > 0) {\n        transforms.unshift({a: image.angle});\n    }\n\n    // Build a URL for the transformed image\n    image.url = buildCloudinaryURL(image.filename, transforms);\n\n    // Update the image in the dialog\n    dialog.populate(image.url, [image.width, image.height]);\n}\n\ndialog.bind('imageUploader.rotateCCW', function () { rotate(-90); });\ndialog.bind('imageUploader.rotateCW', function () { rotate(90); });\n\ndialog.bind('imageUploader.save', function () {\n    // Handle a user saving an image\n    var cropRegion, cropTransform, imageAttrs, ratio, transforms;\n\n    // Build a list of transforms\n    transforms = [];\n\n    // Angle\n    if (image.angle != 0) {\n        transforms.push({a: image.angle});\n    }\n\n    // Crop\n    cropRegion = dialog.cropRegion();\n    if (cropRegion.toString() != [0, 0, 1, 1].toString()) {\n        cropTransform = {\n            c: 'crop',\n            x: parseInt(image.width * cropRegion[1]),\n            y: parseInt(image.height * cropRegion[0]),\n            w: parseInt(image.width * (cropRegion[3] - cropRegion[1])),\n            h: parseInt(image.height * (cropRegion[2] - cropRegion[0]))\n            };\n        transforms.push(cropTransform);\n\n        // Update the image size based on the crop\n        image.width = cropTransform.w;\n        image.height = cropTransform.h;\n        image.maxWidth = cropTransform.w;\n    }\n\n    // Resize (the image is inserted in the page at a default size)\n    if (image.width > 400 || image.height > 400) {\n        transforms.push({c: 'fit', w: 400, h: 400});\n\n        // Update the size of the image in-line with the resize\n        ratio = Math.min(400 / image.width, 400 / image.height);\n        image.width *= ratio;\n        image.height *= ratio;\n    }\n\n    // Build a URL for the image we'll insert\n    image.url = buildCloudinaryURL(image.filename, transforms);\n\n    // Build attributes for the image\n    imageAttrs = {'alt': '', 'data-ce-max-width': image.maxWidth};\n\n    // Save/insert the image\n    dialog.save(image.url, [image.width, image.height]);\n});\n\n}\nfunction buildCloudinaryURL(filename, transforms) {\n    // Build a Cloudinary URL from a filename and the list of transforms\n    // supplied. Transforms should be specified as objects (e.g {a: 90} becomes\n    // 'a_90').\n    var i, name, transform, transformArgs, transformPaths, urlParts;\n// Convert the transforms to paths\ntransformPaths = [];\nfor  (i = 0; i < transforms.length; i++) {\n    transform = transforms[i];\n\n    // Convert each of the object properties to a transform argument\n    transformArgs = [];\n    for (name in transform) {\n        if (transform.hasOwnProperty(name)) {\n            transformArgs.push(name + '_' + transform[name]);\n        }\n    }\n\n    transformPaths.push(transformArgs.join(','));\n}\n\n// Build the URL\nurlParts = [CLOUDINARY_RETRIEVE_URL];\nif (transformPaths.length > 0) {\n    urlParts.push(transformPaths.join('/'));\n}\nurlParts.push(filename);\n\nreturn urlParts.join('/');\n\n}\nfunction parseCloudinaryURL(url) {\n    // Parse a Cloudinary URL and return the filename and list of transforms\n    var filename, i, j, transform, transformArgs, transforms, urlParts;\n// Strip the URL down to just the transforms, version (optional) and\n// filename.\nurl = url.replace(CLOUDINARY_RETRIEVE_URL, '');\n\n// Split the remaining path into parts\nurlParts = url.split('/');\n\n// The path starts with a '/' so the first part will be empty and can be\n// discarded.\nurlParts.shift();\n\n// Extract the filename\nfilename = urlParts.pop();\n\n// Strip any version number from the URL\nif (urlParts.length > 0 && urlParts[urlParts.length - 1].match(/v\\d+/)) {\n    urlParts.pop();\n}\n\n// Convert the remaining parts into transforms (e.g `w_90,h_90,c_fit >\n// {w: 90, h: 90, c: 'fit'}`).\ntransforms = [];\nfor (i = 0; i < urlParts.length; i++) {\n    transformArgs = urlParts[i].split(',');\n    transform = {};\n    for (j = 0; j < transformArgs.length; j++) {\n        transform[transformArgs[j].split('_')[0]] =\n            transformArgs[j].split('_')[1];\n    }\n    transforms.push(transform);\n}\n\nreturn [filename, transforms];\n\n}\n// Capture image resize events and update the Cloudinary URL\nContentEdit.Root.get().bind('taint', function (element) {\n    var args, filename, newSize, transforms, url;\n// Check the element tainted is an image\nif (element.constructor.name != 'Image') {\n    return;\n}\n\n// Parse the existing URL\nargs = parseCloudinaryURL(element.attr('src'));\nfilename = args[0];\ntransforms = args[1];\n\n// If no filename is found then exit (not a Cloudinary image)\nif (!filename) {\n    return;\n}\n\n// Remove any existing resize transform\nif (transforms.length > 0 &&\n        transforms[transforms.length -1]['c'] == 'fill') {\n    transforms.pop();\n}\n\n// Change the resize transform for the element\ntransforms.push({c: 'fill', w: element.size()[0], h: element.size()[1]});\nurl = buildCloudinaryURL(filename, transforms);\nif (url != element.attr('src')) {\n    element.attr('src', url);\n}\n\n});\nwindow.onload = function() {\n    var editor, req;\nContentTools.IMAGE_UPLOADER = cloudinaryImageUploader;\n\neditor = ContentTools.EditorApp.get();\neditor.init('.editable', 'data-name');\n\n};\n```\nDon't forget to update your cloud name and upload preset in the settings.\n. P.S @Sirlazer2 - thank you for highlighting this and I'm sorry about this - those were some really sloppy examples on my behalf.\n. @Sirlazer2 ok I've updated my code above to include a really simple editor initialization as well - you should be able to drop it in to the editor.js file for now and remove image.js for the moment - just to see if that works. It's working for me in the sandbox demo in the repo at least.\n. @jlgit thanks :+1: \n. @Sirlazer2 great news glad it's working and thanks for sticking with it - I'll be taking your advice re. the full example.\n. Hi @alexandrubau, You can add new content to any area you've marked up as editable in your template, are you looking at how you might create a new page? Or are you thinking about how you might add a new editable region to a page?\nIf you referring to adding new content within an existing editable area then: To add a new paragrapth you can just hit the return key when an existing text element is selected (pressing enter in the middle of the text will split it so if you want it to be new position the caret at the start or end of the paragraph).\nIf you want to add a heading then create a new paragraph as above and use the (H)eading tool in the floating toolbox to convert the paragraph to a heading.\n. @alexandrubau could you tell me what browser and version you're using? \n. The time required to trigger the pulse is set using the ContentTools.HIGHLIGHT_HOLD_DURATION option, it defaults to 2 seconds.\nI'm using Version 45.0.2454.85 Ubuntu 14.04 (64-bit) and it's working on the demo page of the site (for me). Are you both seeing the issue on the demo page? Can you let me know what OS you're using in case it's an issue with the key events? @ahallicks @alexandrubau\nThanks in advance :+1: \n. So... \nChrome\n\nVersion 45.0.2454.99 m on Windows - Not to working.\nVersion 45.0.2454.101 m on Windows - Not working.\nVersion 45.0.2454.101 (64-bit) on Ubuntu - Working.\nVersion 45.0.2454.99 on OSX - Working.\nVersion 45.0.2454.85 on Ubuntu - Working.\nVersion 46.0.2490.42 beta-m (64-bit) on Windows - Working.\n\nFirefox\n\nVersion 40.0.3 on Windows - Not working.\nVersion 41 on Ubuntu - Working.\n\nReported to me so far. Looking like an issue specific to windows. \n. @ahallicks thanks that's really helpful - I don't have a windows box here but that gives me a starting point to look at.\n. So I finally got a chance to use a few Windows machines today to try to track this bug down, I'd used browserstack to try initially but couldn't reproduce the bug on any version of windows, but today I managed to and after a few console.log statements here's what I found:\nSome of the Windows machines (all Windows 8.1 but it's possible this is happening on eaelier/later version too) fire repeated key up/down events when you hold the shift key down, so because there's a time delay that checks to see if the key is being held down the timeout triggering the highlight action is cancelled because of the repeated key up/down event - so it never gets called.\nIt looks like FF has an event property to detect this (KeyboardEvent.repeat) but I'm not sure about other browsers yet so I'll experiment a bit more and if I can find a clean solution).\nI suspect this may well be occurring on other OSs and browsers.\n. Hi @robinlluu2002 thank you for the translations. Looks like we may have a problem with the naming of both the cn.json file and the tw.json. According to the ISO 639-1 codes Chinese should be named zh.json and I can't find a code for Traditional Chinese. According to the list tw represents Niger\u2013Congo and cn doesn't have a value in the list (I should have checked that when the first translations was provided).\nWould be great to merge these translations in but could you advise on what to name Traditional Chinese? (I can rename existing cn translation file after.) Possibly the files would become zh.json and zh-traditional.json?\n. That makes sense (like en-us, en-gb), I'll merge your changes in and rename the files thanks :+1: \n. Hi @meghart, glad you like the editor :)\nTo clarify - ContentTools is not a CMS - it's a front-end tool that provides a more natural editing environment for HTML pages than traditional rich text boxes. You still need a CMS behind it. \nThe (Saving Strategies)[http://getcontenttools.com/tutorials/saving-strategies] tutorial is intended to help those looking to integrate ContentTools into their CMS understand how the output of the editor can be stored and only briefly touches on the subject of user authentication.\nI am working on an article currently (which I hope to publish early next week) which will look at how to integrate ContentTools into the workflow of your CMS, in particular the UI, and this will cover the basics of user authentication.\nIn the mean time I can tell you that I've integrated ContentTools into a number of projects internally now all of which use existing CMS applications. In these cases I use cookies to determine if the editor should be shown when a user is browsing the front-end of the website (e.g is the administrator cookie set). Of course the server-side view that receives saved changes must still validate the administrator's credentials  before committing any changes.\nI hope that helps better explain the role of ContentTools, I've taken to tweeting when I publish a new tutorial but I'll also try to remember to update this question at the same time.\n. As it stands I know that @guillaumepiot is working on an open source Django based CMS that use's the editor and I'm working with him also on a WordPress integration. I've spoken to someone looking at integrating the editor with Laravel - but nothing more concrete than that to date.\n. Also this video maybe of interest as it shows ContentTools integrated into a CMS https://youtu.be/Vh3Fd91pVqQ\n. Thank you - on both counts!\n. Thank you for the feedback. Right now all dependencies are included with the package in a folder called '/externals' and the build process concatenates them to the start of the final output file - which 'hands up' isn't ideal and moving towards correct node/npm support is a goal for the very near future.\nTo provide a very quick overview: ContentTools is a collection of libraries all written in CoffeeScript (this is up for debate https://github.com/GetmeUK/ContentTools/issues/10), the collection includes:\n- FSM (https://github.com/GetmeUK/FSM) [no dependencies]\n- HTMLString (https://github.com/GetmeUK/HTMLString) [depends on FSM]\n- ContentSelect (https://github.com/GetmeUK/ContentSelect) [no dependencies]\n- ContentEdit (https://github.com/GetmeUK/ContentEdit) [depends on HTMLString, ContentSelect]\n- ContentEdit (https://github.com/GetmeUK/ContentTools) [depends on ContentEdit]\nFull reply to original HackerNews question available here: https://news.ycombinator.com/item?id=10310256\n. This issue has partially been resolved as ContentTools (and all other related libraries) are now registered on Bower. NPM registration is still planned but the issue has been re-raised specifically in that context: https://github.com/GetmeUK/ContentTools/issues/174\n. Yes that makes a lot of sense and it's a popular request, I'm currently looking at node/NPM and bower support.\nThanks for the kind words too :)\n. Just a quick update on the timing of this request, it's next on my priorities list once the test spec for ContentTools is complete. My hope is to have npm and bower distributions ready at the latest by middle of next month for all libraries in the collection.\n. @mydudechris @tmikaeld @ksugiarto thanks for the support guys :) - and your patience - I am slowly but surely getting through the test spec work then I'm on to this.\n. Thanks to @toastercup for pushing the bower spec file ContentTools and all other libraries within the package can now be installed using bower. I'm going to open a new issue specifically for NPM and Browserify support.\n. So just to be clear here calling ContentTools.EditorApp.get() multiple times will always return the same instance of an app. This is function basically enables singleton behaviour. If you call init against the editor multiple times though, without calling destory in between the UI will be implemented multiple times - which is not what you want.\nAs you suspected the correct answer is to only init the editor once. My recommendation therefore would be to mark your editable components up with <... id=\"1\" data-editable> as I think you are and initialize the editor like so:\neditor.init('[data-editable]', 'id');\nAs for getting the Id of the region currently being edited you can do the following:\n```\n// To get the current region ad hoc \nvar focusedElm = ContentEdit.Root.get().focused();\nif (focusedElm) {\n    var region = focusedElm.closest(function (node){\n         return node.constructor.name == 'Region'\n    });\n    console.log(region.domElement().getAttribute('id'));\n}\n// To get the current region whenever a new element is focused\nContentEdit.Root.get().bind('focus', function (focusedElm) {\n    var region = focusedElm.closest(function (node){\n         return node.constructor.name == 'Region'\n    });\n    console.log(region.domElement().getAttribute('id'));\n});\n``\n. Sorry I was a bit trigger happy on the submitting the response there, I've updated it so it's complete now. Let me know if that helps or if I've misunderstood.\n. So you yes if youdestroytheninit` the editor when you switch between components that should work fine and I think that's a clean way to decouple the components.\nI don't see a problem with using CSS to hide the ignition, I use CSS to hide interface buttons I don't want to show to users sometimes like I might hide the code button from a non-technical user. \nOne option would be to unmount the ignition from the editor after initializing, eg:\neditor.init(...);\neditor._ignition.unmount();\nThis would remove ignition from the DOM but shouldn't affect the editors behaviour in any way.\nTo make this cleaner still you might consider modifying the editor for your application to not include the ignition switch at all, it would be pretty easy to remove (I think it's referenced about 9), if your unsure I can send you a CoffeeScript or JS version with no switch.\nP.S sorry for the late reply time zones huh :)\n. I've considered adding support for this numerous times and I'm in favour. Things that have stopped me from doing so so far are:\n- Where the event should trigger? As in at the start/end of the method, this could be solved with onstart, afterstart style events but that wouldn't be consistent with existing event names.\n- The event system is very basic, you can't prevent the default action triggering the event for example (e.g no preventDefault or equivalent). This often means that you have to revert to monkey patching the start/stop methods (as in some of the examples I've posted) when you want to modify behaviour.\nHowever monkey patching is not ideal it makes it difficult to decouple code for one so I welcome your  thoughts on this.\n. One question it raises is the suitability of such a basic events system for a UI, the approach for ContentTools came from ContentEdit where events are really just simple notifications to a Root node. But here in ContentTools events are being used to manage individual UI components and perhaps a more complete event system that allows behaviour to be modified is required.\n. Hi @bfintal so what you've suggested is what I'd recommend as a short term resolution for individual projects (nothing wrong with your CoffeeScript btw :+1:), you could either update the editor directly as you've done or you could monkey patch the methods if you'd prefer to keep the code separate, e.g:\n```\nvar editorCls = ContentTools.EditorApp.getCls();\neditor.start = function () {\n    editorCls.prototype.start.call(this);\n    editor.trigger('start');\n}\neditor.stop = function () {\n    editorCls.prototype.stop.call(this);\n    @trigger('stop');\n}\n```\nBut this solution doesn't provide enough control for many scenarios because:\n- The event is triggered after the action has happened, sometimes you might want to trigger before hand.\n- There's no way to prevent the default action using the triggered event (e.g ev.preventDefault())\n- You don't know if stop was called because the user saved or cancelled (this could be resolved easily though by adding a cancelled event or by updating the editor to pass this flag).\nIdeally the event system would allow a function to:\n- Be bound to before or after an event is triggered.\n- Allow the function to determine whether the default behaviour executes.\n- Allow the function to determine whether other bound functions after this one are executed.\nI have an event system on an early prototype of this library that supports all of this but it felt heavy and when I was re-factoring so I stuck with a much simpler notification system but I think it's too simple for a UI.\nI think now that there's at least 3 of us (including myself) who have all determined there should be a more extensive set of events and that additional functionality is required than currently provided it's clear we're going to need to add this to the to do list.\n. Sightly of topic but... \nI'll hold my hands up and say part of the reason I haven't made much progress on publishing via NPM is I just don't know enough about the process and haven't had time to look into it in detail. I read through some basic tutorials and from what I read I wasn't aware there would need to be a major shift in the code base to move to NPM but would appreciate any guidance you can give me in this area particular what changes will be required.\nUpdating the event system is a big undertaking so any help would be very much appreciated, the current event system is simple and lightweight but just doesn't cut it for a UI and patching is problematic especially when you want to change behaviour of key methods in different sections of the code (e.g can't patch the start method twice).\nThe biggest stumbling block with the existing system is there's no way to change the flow, you can't prevent a default action from occurring and whilst technically it would be possible to do this by triggering events before and after the code you execute and then perhaps checking the return value this would be very ugly in the code, e.g:\n```\nmethod: () ->\n    if not @trigger(''onmethod')\n        return\n...some default action...\n\n@trigger('aftermethod')\n\n```\nI was wondering if it might be possible to simply use the DOM event system since it's there (no overhead and requires no dependencies), well known and documented?\n. @frankbardon sorry for the slightly delayed responses to your last couple of comments - your picking some of the bigger tasks to tackle and they take a while to mull over in my head :)\n. Release 1.2.0 now supports for start/stop events against the editor (http://getcontenttools.com/api/content-tools#editor-app). \nEvents now supports cancelling of the default action by calling preventDefault() and halting the execution of subsequent callbacks by calling stopImmediatePropagation (http://getcontenttools.com/api/content-tools#event). \nWith the new model in place I'm now comfortable adding additional events when required for the UI.\n. Ahh - it should strip HTML commends before attempting to parse inner HTML but perhaps it's failing if there's nothing in the comment - this is an issue with HTMLString. I'll resolve ASAP, thanks for highlighting.\n. Hmmm... that's odd - I don't think there's a test spec for this so will add one at the same time.\n. OK that now correctly removes comments before parsing (my RegExp was incorrect). There's now comments in the test spec data.\nOnly down side is any comments you add will be removed as soon as the element containing them is edited and saved, I hadn't considered supporting comments within the editable regions up to this point and I'm not entirely sure how they would be catered for when a user edits the content - but happy to consider arguments for supporting them :)\n. Can you place those markers outside of the editable regions? For example:\n<!--marker1--><div data-editable=\"marker1\">\n    <p>\n        Here goes my editable content...\n    </p>\n</div><!--/marker1-->\nI actually do something very similar with Jinja2 templates for the getcontenttools.com website.\n. If they need to be inside of the editable element one option would be to consider using a span tag:\n<div data-editable=\"my-region\">\n    <p>\n        Here <span class=\"marker1\">goes my editable content...</span>\n    </p>\n</div>\nIt should still be relatively easy to extract this content safely.\n. Ah OK that makes a lot of sense - if you use a static element then the content inside wont be parsed by the editor, however one thing to be aware of is since the library basically relies on the browsers innerHTML output for static elements it might come back a little bit different once saved and across different browsers - but it should still be valid HTML of course. \n. So if you use comments in static elements they shouldn't be stripped - they certainly aren't in Chrome - however as I say it does depend on the innerHTML output of each browser. \n. Not currently - static elements can contain anything and so the library doesn't interfere with them (so we don't add events to them), it might be an idea to add a sort of mix up, a moveable-static option for when you know it's OK to add behaviour to the element.\n. OK I think I can add a flag that allows statics to be moveable, so you'd add something like data-ce-moveable to your static element and it would then allow the drag behaviour. I don't think it will take me long but I'm just shooting out for the evening - however I can have something for you for tomorrow if that will help?\n. @bfintal OK that should be in place now, to make a static element moveable/draggable add the following attribute to the element itself data-ce-moveable.\nThanks for the suggestion it's a really nice little enhancement and actually now it's in place I can think of a number of times I could/should of used it. :+1: \n. That would be fantastic - integration with mainstream applications like WordPress are going to be the best way for the project to gain traction. If I can help in anyway let me know, once you have something to demo I'm happy to add a link from getcontenttools.com. :+1: \n. I think a ContentEdit.Div might be too generic as you don't know what a <div> will contain or what the behaviour of the contents should be, in the case you've  presented above I think I'd resort to multiple regions, along the lines of:\n<div class\"main\">\n    <div data-editable=\"main-upper\">\n        <p>....</p>\n   </div>\n    <div data-editable=\"main-lower\">\n        <p>...</p>\n    </div>\n</div>\nElements can be dragged between multiple regions and you can move the cursor between them.\nIf you did want to create an editable element specifically for the case in point I think it would be better to require that a data-ce-tag=\"new-element-type\" was used to point to a new element type rather than capture the behaviour of all <div> tags.\nHaving said all of that I'm not 100% confident I understand the problem you're trying to solve, so if I've misunderstood apologies in advance, if you can provide another use case I'll happily review.\n. Hi @mimoduo my preference is to use 4 spaces consistently in both SASS and CoffeeScript, I understand people have different preferences but for the main project repo I'm going to be sticking with 4. \n. Hi @mimoduo - caught me at the right time :)\nWith regard to SASS I don't see the interface for the desktop version of the browser changing much right now - the next major change will be adding support for smaller screen and touch devices as there's been quite a few requests for mobile/tablet support. Whilst mobile support is a fair way off on my list of things still to do if someone wanted to look at UI/UX for the interface on such devices that would be a real help - I'm happy to make the necessary modifications to the JavaScript to support touch in the sort term.\nNot sure how much you're in to UI/UX design but even if your not clearly your SASS stuff is very neat so if you were able to lend your skills to a responsive version of the UI in helping with the SASS required for that that would be awesome.\n. This is the SASS I use to build responsive mixins on the getcontenttools.com website, I think it works well but this isn't my area of expertise to be honest so other recommendations are very welcome:\n```\n/ Responsive breakpoints /\n$tablet-width: 768px;\n$desktop-width: 1024px;\n/*\nThese mixins make it easy to define blocks of CSS for the target devices, for\nexample:\n@include media-tablet {\n    ...tablet CSS here...\n}\n\nAs a general rule the base CSS should target mobiles and conditional blocks\nshould be added for tablet and desktop devices. Don't apply this rule over\nsmaller more manageable code.\n*/\n@mixin media-mobile {\n    @media (max-width: #{$tablet-width - 1}) {\n        @content;\n    }\n}\n@mixin media-tablet {\n    @media (min-width: #{$tablet-width}) {\n        @content;\n    }\n}\n@mixin media-desktop {\n    @media (min-width: #{$desktop-width}) {\n        @content;\n    }\n}\n```\nWith regard to design this is the really tricky bit, it wouldn't be to much work to make the editor work in a touch environment but making the UX great is a whole other matter and kind of why it didn't make it to the first release.\nI was thinking on tablet we might look at docking the toobox top for portrait, right for landscape, with regard to mobile I think we might need to go on the basis that the toolbox is hidden until you select some kind of button to show it, select a tool at which point it's hidden again (but that doesn't sound ideal either).\nOther considerations are what to do with the current dialogs, these are probably fine for tablet as is but for mobile maybe a fullscreen dialog that scrolls would work better?\nWhat are your thoughts? Perhaps I should add an issue for responsive/touch support and open the discussion up?\n. Yes this is absolutely possible, you can align images left of each other by dragging them over each other on the left hand edge which will display them in a row. However, by default the alignment will allow text to try and wrap around the images, so you'll end up with something akin to:\n\nThough you could fill the row, a better solution would probably be to add a CSS class designed specifically for this scenario. The class would need to be applied through the properties dialog > style to each image you want to appear in a row, you'd also need a :last-child rule to add an puedso :after element that will clear after last image.\n```\n.row-image {\n    float: left;\n    margin-right: 10px;\n    ...\n}\n.row-image:last-child {\n    margin-right: 0;\n}\n.row-image:last-child:after {\n    content:'';\n    clear:both;\n    display:table;\n}\n```\nIf you wanted to center the images then this would be slightly more tricky as you'd ideally want to use a parent element to implement the center alignment - this would mean splitting a single editable region potentially into 3 regions, e.g.\n<div data-editable=\"upper\">\n    <p>Upper content</p>\n</div>\n<div data-editable=\"image-gallery\" class=\"image-gallery\">\n    <img class=\"image-gallery__item\" ...>\n    <img class=\"image-gallery__item\" ...>\n</div>\n<div data-editable=\"lower\">\n    <p>Lower content</p>\n</div>\n. Hi @laurent-d  and @jacojvv-dev - I'm definitely not a PHP expert but I'll try to help.\nIf the progress bar stopped at 100% then my guess would be that an error occurred before or during the call to dialog.populate as this changes the state of the dialog and hides the progress bar. The error should be visible in the console output, or if the server is failing tor return a 200 response then under the network tab on Chrome or FF you should be able to see details of the failed response. Can you post any error information you can see please.\n. @laurent-d specific to your original question, yes there are values that need to be returned once the file has been uploaded. Specifically you need to return the URL and size(width, height) of the image uploaded, if you're using the tutorial code from here http://getcontenttools.com/tutorials/handling-image-uploads then size should be specified as an array of the form [width, height] e.g [400, 300].\n. The only reason they are run manually is because I run them across each target browser using browser stack. Would still be good to automate against phantomjs and hook up to traviscli though, at least that way as you say each commit would be tested highlighting the majority of issues - so a PR for this would be great.\n. I've implement this recommendation now - please note that for the ContentTools the test specification is not yet completed.\n. I'm closing this for now as per my responses to #31 as I think this approach offers the required control in particular for the start/stop events - ContentTool UI events are flagged for review now.\n. This issue/enhancement is related to issue #11.\n. @bfintal agreed - the approach ContentTools takes makes this very difficult to achieve without making changes to the approach itself.\n. Hi @iamryandrake,\nYou can't select / give focus to multiple items in a list, when you mouse over you may see 2 levels of highlight (where the list item and parent list(s) you're hovering over are selected) but that's not the same thing.\n. Nice @bfintal :+1: \n. I think the issue here is that you need to mark the <a> tag as an image, e.g:\n<a href=\"#\" data-ce-tag=\"img\">\n    <img  src='http://placehold.it/350x150'>\n</a>\nAs you want the <a> tag to be treated as an image by the parser you need to mark it up in this way, if you create an image through the editor and add a link to it then save the page content you'll see this data attribute appended to the link automatically.\n. So you'd need to change your initial content to:\n<div data-editable data-name=\"main-content\">\n    <p>\n        <a href='#' data-ce-tag=\"img\">\n            <img src='http://placehold.it/350x150'>\n        </a>\n    </p>\n</div>\nBy default <a> tags aren't converted to images as potentially (longer term) they might wrap other elements as well.\nThe image shouldn't be moved outside the link, oddly when I add your code to the sandbox/index.html file in the demo (using Chrome) the <a> tag is just converted into a static element and editing and saving doesn't move the image outside of it.\nCan you test that this issue doesn't occur if you add the following code to the sandbox demo in the repo:\n```\n Static element containing an image \n\n\n\n Editable image with link \n\n\n\n```\nIf you get the same issue then it might well be an issue with a specific browser I need to look at so could you provide details.\n. Ahhh... I understand now you're adding the image within an editable paragraph not as an editable image. You can't add images within paragraphs right now (well you can using HTML and they'll appear but you can't add them via the editor).\nThat does however look like a bug in the the way that the HTMLString library is optimizing, clearly the image should be retained inside the <a> tag. Sorry for the confusion I'll mark it as a bug and have a look at resolving it.\n. Yep - just tested the code in HTMLString Spec and it fails in the way you described, hopefully it's something easy :)\n. @bfintal - OK I think that's resolved that.\n. Awesome (fortunately an easy fix) - sent you a question on Gitter re your early question :)\n. I agree these would be useful additions, happy to add. So the new events will be:\n- drag\n- drop (only executed if content is successfully dropped on another element that accepts the drop action)\nDoes that offer everything needed?\nUPDATE: The drag event would receive the element dragged as a value. The drop event would receive the element dropped as well as the element being dropped onto and the placement.\n. If it's dropped on the the element above, below, left, right in such a way as to stay in the same position on the page the drop event would still trigger, but it would be easy to check if it had moved by reviewing the element (if any) before it.\n. Just updating the documentation for the additional events now - but feel free to use:\nContentEdit.Root.get().bind('drag', function (element) { ... });\nContentEdit.Root.get().bind('drop', function (element, target, placement) { ... });\n. Yeah drop only trigger if the element was dropped on another valid element, I could modify the call so that the target and placement values for the event are null if there is no valid target?\n. @bfintal OK you should now get an event valid or invalid - hope that helps and removes the need for the workaround :)\n. I agree a plugin guide would be a good idea, similar to how jQuery recommends creating plugins for their framework. \nPerhaps the library could do something similar to the image handler support, you could define a list of plugin functions against the ContentTools namespace that you want to use: \nContentTools.PLUGINS = [autoSort, htmlParse, ...]\nAnd then to initialize them you'd call a namespace method such as:\nContentTools.initPlugins()\nThe initPlugins method would then call each plugin function. This allows plugins to be initialized in order and potentially to query which other plugins are supported (even if not yet initialized). It might be we insist on plugins being classes instead of functions and having a static name property so they can be identified.\nThoughts?\n. This isn't in place, it's just lower on the priority list at the moment than number of issues (I don't mind lots of issues as long as there's not too many bugs).\n. Discussion moved to issue https://github.com/GetmeUK/ContentTools/issues/237\n. Hi @fernandofranca the issue is your version of Sass, I've had the same problem in the past, I recommend you update Sass to the latest version, I'm running Sass 3.4.18 (Selective Steve) currently.\n. No problem - can you confirm that fixes just to be sure :)\n. Thanks for confirming :+1: \n. Hi @fernandofranca reporting here is fine - thanks for the info will resolve now :)\n. Fixed :)\n. Hi @fernandofranca, so I understand what you're attempting to do but I don't recommend this approach. Whilst it's possible, longer term I want to solve this type of problem in a different way. Instead of creating more complex editable elements the idea is to introduce the concept of flows and templates. \nFlows will allow users to add new sections of predefined HTML (templates)  to an existing HTML document. Templates can contain regions and therefore will allow the structure not just the content of the page to be edited, your example would therefore be converted to a template along the lines of:\n<div class=\"panel panel-default\" data-flow=\"well\">\n    <div class=\"panel-heading\" data-editable=\"region-#?#\">\n        <h3 class=\"panel-title\">Panel title</h3>\n    </div>\n    <div class=\"panel-body\" data-editable=\"region-#?#\">\n        <p>Panel content</p>\n    </div>\n</div>\n#?# or something similar will be replaced automatically with a unique name for the region.\nThe idea of using flows isn't original there's a number of in-context editors that take this approach, but I want it to be an optional extension to the library (probably named ContentFlows or similar) not a requirement. This is very much just a set of notes at the moment I have nothing concrete started but I wanted to let you know what the intention is moving forward.\nOf course if you need to do this short term then you may need to settle on using a complex editable element instead in the mean time - I believe @bfintal has had some luck in doing this, if he has the time perhaps he might be able to provide a concrete example.\n. Hi @Morganjackson,\nYes support for adding dynamic editable regions (a la ContentFlows) is still very much on the board. We're currently working on a new web development framework/CMS (open source) which we're hoping to launch early-mid 2017, supporting for dynamic editable regions is (along with a number of other features) planned for the initial release of that project.. Agreed :+1:\n. Just updating the documentation for this now but basically you can now do the following, either:\n// Init with a CSS query\neditor.init('[data-editable]', 'data-editable');\n...or...\n// Init with a list of DOM elements\neditor.init([regionA, ...], 'data-editable');\n. No problem, glad I could help :)\n. I agree this is a good idea :) I'm wondering if the logic would be better moved to _onDragOver/_onDragOut method (called from _onMouseOver/_onMouseOut to separate the behaviour being customized) that you can then override for custom elements, calling the parent for the default behaviour and then applying any custom behaviour as above in the overridden method?\n. @bfintal ok you could now achieve this through behaviours by overriding the can method (details here: http://getcontenttools.com/api/content-edit#behaviours), for example:\nJavaScript\nDivCol.prototype.can = function(behaviour, allowed) {\n    var result = DivCol.__super__.can.call(this, behaviour, allowed);\n    if (behaviour === 'drop' && result) {     \n        return this.parent() === ContentEdit.Root.get().dragging().parent();\n    }\n    return result;\n};\n. Blur the element before removing it permenantly, e.g:\nelement.blur();\nelement.parent().detatch(element);\nI'll leave this issue open for now as history should check for this scenario, and possibly the default behaviour for detach should blur the element automatically. Will resolve early next week but that should fix the issue short term.\nCan't test atm tho as only have my iPad so let me know if not and I'll take another look.\n. It might not be as simple as it sounds to blur on detatch because when moving an element you may want it to retain focus - in fact I'm sure some of the code relies on this retained focus. You could refocus but that potential triggers a blur then trigger event that's perhaps unexpected as the focus hasn't moved from the element.\nPerhaps I'll just add a check in history and add a note to the docs for detatch.\n. @bfintal I believe I've fixed the issue you're experiencing by adding a check into the History._store method. \nHowever I'd recommend blurring the element you remove manually also. I'm don't want to add the automatically blurring behaviour I originally proposed as I feel this takes away a level of control that can (and currently is) useful.\n. Hi @bfintal the problem with auto blurring and then focusing when reattaching an element is that this triggers blur/focus events.\nTriggering a blur/focus events on attach/detach could trigger different behaviour (such as removing a text element that's empty), a custom event binding could then cause issues when an element is drag/dropped for example and there would be no easy way for an external event binding to know if the element had been focused because it was reattached or because the user gave it focus.\nOne other thing to note is that if you auto blur then you will also  have manually focus when reattaching, we can't after all auto focus when attaching an element. So again in some circumstances we've just shifted the manual element somewhere else but we've lost control over when the events are triggered.\n. @bfintal believe a fix for the issues you mentioned here are now in place, I'm moving the enhancement suggestions to a separate issue so they can be discussed further.\n. This is now in place (at least it's ready for testing in the wild).\n. Hi @Shannanigans I'm not sure I fully understand the issue you're describing, but yes editor.init('*[data-editable]') is a perfectly acceptable mechanism for selecting all editable content on the page.\nAs for unique data names often what I do is create my editable regions like so:\n<main data-editable=\"article-body\">\n    ...\n</main>\n<main data-editable=\"aside\">\n    ...\n</main>\nAnd to select them I use the following initialisation params:\neditor.init('[data-editable]', 'data-editable');\nAs for dynamic unique keys - I'm currently working on an extension to the library which has a similar problem in that I don't have a key to hand at the point the region is defined (it's dynamic), my current solution is just to generate one on the fly, e.g region-1, region-2, region-x. This allows the data returned to be mapped specifically to an element in the DOM. What I could look to do is automatically create unique Id's for regions that don't have them in this way? For example data-ct-id=\"1\" (or against whatever attribute has been specified as the naming property).\nAs for compound keys at the moment I'd recommend using JavaScript to update the DOM before the editor is initialized to convert your compound keys into unique Ids from, for example for the following HTML:\n<div data-editable data-key-a=\"1\" data-key-b=\"1\">\n    ...\n</div>\n<div data-editable data-key-a=\"1\" data-key-b=\"2\">\n    ...\n</div>\nYou could use something along the lines of:\n```\nvar domRegions = document.querySelectorAll('[data-editable]');\nfor (var i = 0; i < domRegions.length; i++) {\n    var domRegion = domRegions[i];\n    domRegion.setAttribute(\n        'data-compound-key',\n        domRegion.getAttribute('data-key-a') + '-' + domRegion.getAttribute('data-key-b')\n    )\n}\neditor.init('[data-editable]', 'data-compound-key');\n```\nAlternatively I could simply return a list of HTML strings against editable regions with duplicate keys - but I think we'd need a good use case to promote this behaviour and I'd probably prefer to implement automatic Ids.\nI hope that's helpful, appreciate your feedback and interest in CT, I apologise if I haven't fully understood the question but I'm happy to revisit if you can shed some more light on the your specific case.\n. Hi @Shannanigans, thanks for pointing out the typo I've updated the docs :+1: \nThe output of all regions isn't an implementation issue your end it's a bug my end :( - looking at the code there's no check to see if a region has a lastModified date. I'll mark this issue as a bug now and get that fixed.\n. @Shannanigans OK that should now be resolved please let me know if you have any further problems with the save output :)\n. Hi @doonetheprune thanks very much for the error report. It appears IE doesn't allow the blur method to be called using JavaScript against a <div> tag even if it's contenteditable. To resolve this I've put a try catch statement around the blur call with an explanation of why it's acceptable to ignore the error raised in this case.\n. This is a good idea but pointer-events are only supported in IE11 (http://caniuse.com/#feat=pointer-events), no IE9 or 10 support so we'd need a fall back for these.\nWould be happy to look at a PR for this, I'd also love it if we could find some way to show the arrows without using images if I could remove them (and convert the video icon to a font icon) the library would be image free using only the font.\n. Hi @StefanTD and thanks :+1: \nThere's no colour select/set tool in the base editor application, others have added support for such tools, @bfintal has integrated the WordPress colour picker for example, but it's not part of the standard tools.\nMy personal opinion (for what it's worth) is that CSS styles keep things consistent and easy to change globally through CSS where as colour pickers, font selectors and such tools prevent this. \nHaving said that I can imagine that potentially there are instances where picking a colour from a palette - for example being able to set the background colour of a splash to something custom - is useful.\n. I'm going to have a play with this over the weekend and also look at creating a SVG version of the background images instead of the current PNGs (that allows for more control in styling them).\nNot sure why the merge is failing to pass the travis-ci test - I sometimes get failures and have to just re-run the test on travis-ci to make it work but it's not working in this case. Could you do me a favour and run the PR through on your machine with grunt jasmine and opening the SpecRunner.html in a browser - let me know if you see any error.\n. Thanks - the issue is to do with keyboard events and clearly has nothing to do with your chnage - why you get that error and I don't I have no idea, especially considering travis-ci is passing for me and not for your pull request - no matter - one way or the other I'll get this pull request in and passing the tests.\n. I'm having issues with timed tests not always passing on travis-ci (though the issue is with my test spec) - I suspect this might be the culprit - it can't be a CSS change causing the issue surely?\n. I've now had time to test this on my machine and it's a big improvement :+1:  The change actually needs making in the ContentEdit repo, and then ContentTools will need the dependency updating. \nI'm happy to make the change to ContentEdit or accept a pull request there - I still want to try to get SVG images in place for the camera icon and arrows so don't mind making the change at that point.\nThanks again for this it's a really nice improvement :)\n. Hi @tuhlmann - yes there is an event/notification for the editable content it is documented here under the ContentEdit API.\nFor your question specifically if you wanted to know whenever the content of the document was changed you could use the following code:\nContentEdit.Root.get().bind('taint', function (element) {\n    console.log(element, 'just got changed');\n});\nHope that helps and thanks for your interest in CT.\n. You'd need to perform the diff yourself I'm afraid. The array of characters is a HTMLString instance, you can out put either the HTML or text version of the content to perform a diff using:\nvar htmlVersion = element.content.html();\nvar textVersion = element.content.text();\nYou could look to capture focus events, store a snapshot of the elements content and then capture blur events to compare the contents to see if it's changed, as a simplified example you could approach this like so:\n```\nvar snapshot = null;\nContentEdit.Root.get().bind('focus', function (element) {\n// We only care about elements that support content\nif (element.content === undefined) {\n    snapshot = null;\n    return;\n}\n\n// Take a snapshot\nsnapshot = element.content.text()\n\n});\nContentEdit.Root.get().bind('blur', function (element) {\n// Check we have a snapshot to compare\nif (snapshot === null) {\n    return;\n}\n\n// Compare the snapshots\nsomeDiffFunc(snapshot, element.content.text());\n\n// Clear the snapshot\nsnapshot = null;\n\n});\n```\n. Can you confirm that holding the mouse down for a longer time doesn't work for you. That behaviour is already in place and works for me currently - however could be there's a problem in a specific browser.\nWith regard to removing empty rows when they're blurred I don't see any reason not too.\n. @bfintal @Qqwy OK so I've pushed an update that implements the second suggestion...\n\nWhen hitting the backspace / shift-tab on the first cell & first column of an empty row, remove the empty row\n\n...but not the first. Deleting all empty rows on blur didn't end up feeling as intuitive as I expected, for one copying into a table from the document becomes hard because creating a new row then selecting text from the page removes the new row.\nI have however put in place support for empty rows using the delete key however, so if the row is empty and you press the delete key with any table cell selected the row will be removed. This makes it much easier navigate through and delete empty rows.\nWe're further looking at table behaviour in a new issue #152 posted by @Qqwy which has some additional suggestions we might try, so for now I'm closing this issue and suggest any further conversation is moved to the new issue.\n. @bfintal Ctrl + remove support is already in place, I suppose the concern is as you say people might not ever realise it or find it intuitive.\n. @bfintal agreed, especially if they'll toggle the element back to paragraph.\n. OK so I finally got around to implementing some of the changes here. This issue has been up for a while and having had time to think over the various features suggested at this time I decided just to implement the following:\n- Support for link editing when the caret is within an existing link. Now if you click within a link then click the link tool the whole link will be selected for you.\n- Support for headings, paragraphs and pre text being being set to applied when the an element with the same tag name is selected, and support for toggling between headings/pre-text and paragraphs. E.g press the heading tool while a heading is selected and it will revert to a paragraph.\nI'm not currently looking to implement any of the other suggestions as they've not been raised since (that I'm aware of), e.g a link remove tool, a way to handle selecting multiple links.\n. @rosstarran I can't replicate this on Ubuntu Chrome can you try to on windows, @jonolock91 can you try on OSX.\n. Make sense.\nI think we may run into the same complications discussed for adding start/stop events #31 - that the event system needs to be overhauled for ContentTools. I'm considering switching to native events but support seems to be sketch at the moment so I'd need to use deprecated interfaces to support for the target browser list currently.\n. The ToolUI components now trigger apply and applied events (http://getcontenttools.com/api/content-tools#tool-ui) so it is possible to listen for these events now in the toolbox using:\neditor.toolbox()._toolUIs['bold'].addEventListener('apply', function (ev) { ... });\nSo you can monitor the tools applied by the user and/or changes to the region (using ContentEdit events), what you can't do yet is bind events to the Tool static classes at this time (because they don't inherit from the ComponentUI class). However I'm intending to review this for the next release along with adding additional events now the new event model is in place so this discussion will move to a new issue.\n. You can certainly support multiple editable areas or regions (and I do so on a number of sites). Typically the way I tend to approach this is something like:\nhtml\n<ul>\n    <li class=\"post\">\n        <div class=\"post__body\" data-editable=\"1\">\n            <p>...</p>\n        </div>\n    </li>\n    <li class=\"post\">\n        <div class=\"post__body\" data-editable=\"2\">\n            <p>...</p> \n        </div>\n    </li>\n</ul>\nThen for the save init/save code:\n``` javascript\nvar editor = ContentTools.EditorApp.get();\neditor.init('*[data-editable]', 'data-editable');\neditor.bind('save', function (regions) {\n// The regions will be keyed against post Ids and so you can map changes in the content to the\n// individual posts.\nvar payload = new FormData();\nfor (var postId in regions) {\n    if (regions.hasOwnProperty(name)) {\n        payload.append(postId, regions[postId]);\n    }\n}\n\n});\n```\nYou can of course store additional information against the region (e.g data-field-name=\"synopis\") and access it from the HTML using document.querySelector('data-editable=' + postId).getAttribute('data-field-name'); That way you can have multiple editable regions within each post.\nAs for anchoring a tool bar to the top of each editable area that's not currently supported, the toolbox is anchored to the screen not the content. \n. This is just a sensible default for me. I expect people to modify the _content-edit.sass/css to be appropriate for their own projects. Using block removes the padding from images when wrapped in a link, this is the same as default aligning the image to be central. \n. You don't need to override it you can just change it. content-tools.min.css is best generated separately for your projects (using Sass), so for example if a user clones the project, runs npm install then grunt build-styles they'll be able to modify the output of content-tools.min.css to whatever makes sense for their project. For that style they'd just need to modify content-edit.sass. Does that make sense?\nAgreed that it isn't a good idea to override using body img\n. Thanks for that :+1: \n. We've actually spotted another issue that may be related to this where dragging doesn't always work across regions when editable regions are within certain tags, such as <a> tags. I'm going to be looking at this tomorrow and hope to fix both issues, I think that it may have something to do with the HTML drag events conflicting with CT's own drag/drop.\n. Hi @bsdo64, thanks for you're interest in the project.\nContentTools itself doesn't provide any image uploading facilities, what it does do is provide a simple UI for implementing you're own image uploader that's really only focused on single image uploads. If you're proposing that we look to add support for a UI that supports multiple uploads I think that would be a really great addition and I'd be happy to see someone working on it.\nI apologise in advance if I've misunderstood your question, if so if you can elaborate a little further I'll try again :)\n. Hi @nickground - thanks for your interest and the kind comments.\nI'd certainly consider it, would it be possible in the meantime for you to convert the HTML created by the editor to MarkDown and vice-versa using libraries such as to-markdown and markdown-js?\n. Thanks for the pull request @kpost. As the fix is to external/scripts/content-edit.js the changes need making to the CoffeeScript in the ContentEdit library and then the external script updating here (from the build folder within ContentEdit).\nI'll review the code you've committed and make the same changes on ContentEdit before pushing them back here. I realize this isn't idea, I need to get npm support in place for each of the packages so that the dependencies can be managed more easily.\n. This fix has now been implemented as discussed - thanks for the submission and solution.\n. HI @calebelt thanks for your interest in CT.\nForgive me but I'm struggling a little bit to understand what you're attempting to do here, it looks like you want to start and stop the editor using you're own code rather than ignition switch class.\nInstead of calling the editor start/stop manually my advice would be to trigger the start/stop events against the ignition instance, or to look at the code here to determine the action that needs to be taken when you stop editing. For example you could do,\n```\n// Starting the editor manually\neditor.init(...);\neditor._ignition.trigger('start');\n// Stoping the editor manually (save)\neditor._iginition.trigger('stop', true);\n// Stoping the editor manually (cancel)\neditor._iginition.trigger('stop', false);\n```\nI'd advice against manually removing ct-app as you and instead use editor.destroy(); which in turn calls unmount and should remove the ct-app element for you.\nIf I've misunderstood apologies in advance.\n. Wonderful! Glad it's working for you now :+1: \n. Hi @ahmedatya. The ignition buttons are positioned purely using CSS, you can see the code that positions them here.\nThe easiest way to position them elsewhere is to change the CSS (or override it) for .ct-ignition, depending on where you position the buttons you may also need to modify the individual .ct-ignition__button--busy, --confirm, --cancel, --edit buttons to.\n. Hi @dominicr - There's no way to do this right now. I'm working on a new editable element currently (ContentEdit.Field) which will act a lot more like a form field for editable content that is less free form and more purposeful, e.g a blog article heading, date, etc.\nIn the meantime whilst there's no clean solution that comes to mind if it's something you need urgently then one approach would be to be to update the toolbox code here: https://github.com/GetmeUK/ContentTools/blob/master/src/scripts/ui/toolbox.coffee#L448 to check for a special attribute against an element as you suggested, e.g:\nCoffeeScript\n    if @tool.canApply(element, selection) and element.attributes()['data-no-edit'] is undefined\n        @disabled(false)\n    else\n        @disabled(true)\n        return\nWe also require this functionality for a current project so it is a confirmed feature.\n. Hi @frankbardon \nSo currently I'm working on a CMS project for a client that requires the ContentEdit.Field functionality that's described, the deadline for the project is end of March so I would hope to have a working draft ready in the next 4-6 weeks.\nHaving said that I'm not opposed to some help (in fact I'd be grateful of it). If you think you have some time to spare on the issue perhaps we can plan and agree on an interface for the new ContentEdit.Field class here before moving on to create it.\nAs it stands my requirements for the ContentEdit.Field class are:\n- to support validation of the content\n- to allow an error to be set against the field directly (so that server-side validation can be reflected)\n- to support tool configuration (exactly how is a bit of a question since the class will reside in ContentEdit and tools reside in ContentTools and I don't want to tightly couple them, however it could be a suggested tool set that ContentTools or other UIs can interpret for themselves.\nThe tag type itself wouldn't matter in this case and we'd always use a custom tag attribute to flag that an element was a field, e.g something along the lines of:\n<time data-ce-tag=\"field\">11:00</time>\nThat's at least a starting point, if you add in your requirements thoughts then we can make sure we achieve everything in the new class.\n. Hi @frankbardon, thanks for the information and in particular the example and explanation of how your hooking in currently - I like this approach and it's similar to what I had in mind the use of the WebPage schema though is very interesting.\nI'm playing around with a few different models/approaches for setting up content fields at the moment in particular how we hook in validation libraries without resorting to lots of custom mark up.  Over the weekend I hope to post a draft/example API snippet against the issue based on your comments. \nOne question I do keep coming back to is whether or not validation should be performed on the frontend, we have an older version of CT we us in house (much older) that supported validation server and client side. Towards the end of it's life though we switched to always validating server side but instead of waiting for submission we used AJAX to request validation of a field in advance. This has the benefit of only having to write the validation code in one place and removing potential inconsistencies between the two - however potentially it's a more complex approach if you require real-time validation (but I do think client side validation at least should be optional perhaps, based on whether you hook in a validation library like the one you've mentioned).\n. For those of you following this issue we are making head way, release 1.2.2 introduces element behaviours (which you can read about here http://getcontenttools.com/api/content-edit#behaviours). This is an important step in being able to provide control over the layout of editable content and in the next minor release I'm planning to finish integrating this with ContentTools so that the editor respects the behaviour flags set for elements (e.g the remove tool wont remove an element where the remove behaviour flag is set to false).\nInternally we have a deadline to have a first draft implementation of this feature in place for the 15th of April so I expect to have a release out that week which resolves this issue.\nThanks for your patience :)\n. For all those interested the latest release 1.2.4 now contains an early version of fixtures which support standalone fixed position elements on the page.\nThere's still quite a bit to do before I'll be documenting and recommending people use fixtures in live projects but if you want to have a play there's an example fixture in the ContentEdit sandbox now.\n. Another update on fixtures - release 1.2.5 now provides a working sandbox demo where the title is a Fixture. This is quite a big release in terms of changes though the API is uneffected.\nI'm hoping to use fixtures in a current project and over the next 2-3 weeks bring them to a point where I have something stable I can publish as a minor release with documentation.\nI'm away for the next couple of weeks but will be checking in so any questions/feedback here or on gitter about fixtures I'll be happy to try and help with.\n. Hi @mmoskal - those aren't tags registered as editable text elements, you'd need to either register them or set a different tag against them, e.g:\nhtml\n<footer data-ce-tag=\"p\">...</footer>\n. Fixtures aren't a separate element as such they effectively wrap an existing editable element type in a fixed region, for the fixture to know what type of element it is wrapping it still needs to either recognize the element tag, or be assigned a replacement.\nIf you don't want the data-ce-tag against your footer you can register the footer tag as an editable text element, for example:\nJS\nContentEdit.TagNames.get().register(ContentEdit.Text, ['footer']);\nIn the future I want to trial supporting for other element types within fixtures such as images, hence fixtures wrap existing elements rather than functioning as a separate element.\n. Having said that might not be a bad shout to default to a text element if the tag isn't recognized for fixtures? @mmoskal \n. I'm closing this issue now as support for Text and Image fixtures is now present with ContentTools/ContentEdit - which at least to the extent I require resolves this feature. I understand there will be people who still find functionality/features they want missing but I think these are best handled as new issues - thanks all for your patience with this issue.  . I agree this would be better behaviour for links. I think this can be fixed if I ensure that <a> tags are added as the first tag in the stack (perhaps HTMLString.format could accept a flag to allow you to indicate you want a tag added at the start of the stack).\n. OK so I've reviewed this issue fully now and actually it's not the whole story, so the behaviour described is as stated and the reason for this is that form performance reasons strings of HTML aren't optimized when operations are performed on them, that optimization (using optimize) happens when the string of HTML is saved.\nSo actually if you then save the page (in my tests at least), since optimized is called the HTML that's output to the save event appears as <a href='#'><b>I'm bold</b> I'm not</a>.\nI'm not 100% sure if the fact the HTML is not optimzed after the link tag is insert is potentially an issue or not but it seems safer to simply call optimize against the content when an in-line tag is inserted using one of the tools and so this is the change I have made. \n. Hi @bfintal can you explain the issue further please - ContentTools doesn't support Copy/Paste of HTML by default, it only provides plain/text C&P.\n. Ah I see what you mean, yes currently if you paste content it is plain text so if you don't paste inside the bounds of a formatted area the formatting will be lost. I think if you paste outside of the bounds this is the correct behaviour, but agree if you paste at the bounds then we should look at applying the existing format to the pasted code (e.g as if we'd pasted with it).\n. Hi @shvetsovdm - There's no way to display text in flashes at the moment. Flashes are almost entirely CSS so it might be possible to override the content attribute with a short text message (you'd also need to change the font-family) - but that's probably not the best option unless you're in a pinch.\nI did consider adding a MessageDialog early on - this would require a user to close the dialog (so it's not really a flash), but if that would be acceptable I'm happy to look at implementing that feature?\n. Sorry about that @shvetsovdm , the question I'm posing is whether a suitable alternative for a flash with text is a dialog box that shows a message? \n. In effect yes, though using the UI dialog boxes provided in content tools, e.g\n\n. Can you provide an example - using the sandbox the tool behaves as I'd expect and allows you to set the table properties.\n. np - glad it wasn't a bug :D\n. Hi @Eeliya, my recommendation here would be to prevent keydown events propagating from your input to the contenteditable parent (e.g the paragraph). To do this you'll need to ensure that you bind event listeners to your input elements whenever they are created since the process of converting them to editable content will replace them they will loose any associated event listeners.\nOne approach you might consider (this code should be applied before setting up the editor):\n``` JavaScript1\n// Listen for elements being mounted\nContentEdit.Root.get().bind('mount', function (element) {\n    var i, inputs;\n// We're only interested in elements that support content\nif (element.content === undefined) {\n    return;\n}\n\n// Search for inputs within the newely mounted element\ninputs = element.domElement().querySelectorAll('input');\nfor (i = 0; i < inputs.length; i++) {\n    // Prevent the propagation of the `keydown` event to the parent of the input \n    inputs[i].addEventListener('keydown', function (ev) {\n        ev.stopPropagation();\n    });\n}\n\n});\n```\nI hope that proves helpful - let me know how you get on.\n. Cool - glad you found a work around\n. I think an event triggered at the end of construction of a ContentEdit.Region is a good idea - however if there are multiple regions then I presume you'd want an event once all regions had been parsed - which would be a ContentTools event rather than a ContentEdit event - and comes back https://github.com/GetmeUK/ContentTools/issues/31.\n. This event is now part of the core ContentEdit library, documented here: http://getcontenttools.com/api/content-edit#events\n. So a number of the editable elements already do this type of thing (e.g Video and Image), this is done by having mount() do one thing and html() do another.\nThe best approach will be to override the html and mount methods against the class that you want to add this behaviour to (e.g ContentEdit.Text - I'm assuming this is at least one of the elements you want to customize). Remember though that behaviour is inherited so if that's a problem you may want to consider inheriting from the class instead and replace it in the tags names:\n``` coffeescript\nclass MyNewElement extends ContentEdit.Text\n# My custom text elemment\n...\n\nAssociate my new class with all text elements\nContentEdit.TagNames.get().register(\n    MyNewElement,\n    'address',\n    'blockquote',\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'p'\n    )\n```\nWhether you override just the methods or the entire class you will need to change mount's behaviour to output more than html. For example if you're just looking to display information then you might consider the approach taken by images for size, here a data-... attribute is set against the element when mounted and that information is then displayed using a :before pseudo element and the CSS content: attr(data-...); rule, the attribute is not stored in the list of attributes for the element so on output html does not include this attribute. \nIf you need something more complex than this you will most likely need to mount additional DOM elements, and if so you'll also need to look at modifying the _syncContent method so that instead of the entire content of the text element being selected using this._domElement.innerHTML that any additional nodes mounted are excluded.\nI hope this sets you in the right direction, I'm happy to provide more guidance but a concrete example of what you're attempting to do would be useful in providing more specific advice.\n. OK so support for attaching the toolbar to the current selected region has been suggested before and I think it will be a necessary task when we move to mobile, however I don't think I'd look to inline the toolbar inside the content itself, I think I'd do as you are doing now and use JavaScript to keep it's position and size in sync. Whilst this is more effort for the browser it's cleaner IMHO as it keeps ContentTools and ContentEdit decoupled. ContentEdit shouldn't need to know how to handle a ContentTools toolbar ideally.\n. Thanks for the update @Evanion :)\n. Hi @Nisthar - if the html being posted to your server is correct but the save is failing then this sounds like it's specific to the server-side code and not CT. My PHP is very sketchy (I'm primarily a Python developer) but if you post the save code you're using I'll take a look (or ask a few friends with more PHP experience to) and see if I can spot the issue - seems odd that iframes are causing the issue.\n. Can I confirm that when you print the value of $content to a log/terminal you get a JSON dict contain a region name for a key and the HTML for the value, and that this is the case with or without the iframes?\n. @guillaumepiot any chance you could take a look at the code above and see if you can spot anything obvious - looks good to me.\n. Thanks for the help @guillaumepiot and @alexrussell :+1:\n. I might be missing something but if you just want to show a confirm message  before some action is triggered you can use window.confirm('Some message') (that's all CT does at the moment), for example:\n``` coffeescript\nAsk the user if they want to save before performing this action\nif window.confirm('Do you want to save before you make this change?')\n    # Set up a save event that will be called when the document is saved\n    _performTask = () ->\n        # Remove the task from future save events\n        ContentTools.EditorApp.get().unbind('save', _performTask)\n    # ...perform task...\n\nContentTools.EditorApp.get().bind('save', _performTask)\n\n# We send the `true` flag to ensure the save is passive (the DOM is not modified) \nContentTools.EditorApp.get().save(true)\n\nelse\n    # ...perform task...\n```\n. Cool :+1: \n. @bfintal tag names can now contain colons.\n. The editor currently allows you to create a new paragraph after an image by selecting the p tool, if you want support for this against an image you could monitor key presses against the document and check to see if the selected element is an image, for example:\n``` coffeescript\ndocument.addEventListener 'keypress', (ev) ->\n    # Was the enter key pressed\n    if ev.keyCode != 13\n        return\n# Is the selected element an image\nselectedElm = ContentEdit.Root.get().focused()    \nif selectedElm and selectedElm.typeName is 'Image'\n    # Attach a new paragraph to the parent after the image\n    p = new ContentEdit.Text('p', {}, '')\n    selectedElm.parent().attach(p, selectedElm.parent().children.indexOf(selectedElm) + 1)\n\n    # Move the focus and selection to the new paragraph\n    p.focus()\n    selection = new ContentSelect.Range(0, 0)\n    selection.select(p.domElement())\n\n```\n. Not that I'm aware of though editable images don't actually hold focus so you might need to handle the event in a more safe way, preventing a submission of example if a form element is focused.\nI think it might be a reasonable change to make to the core library to be honest - so I'll convert the status of this post to an enhancement.\n. @Nisthar can you elaborate a little more? Does this tutorial cover your needs http://getcontenttools.com/tutorials/adding-new-tools or do you have something else in mind? \n. If you want to insert custom HTML into a content element you can use the code tab when inspecting the element. E.g select the tag in the tag path at the bottom of the page, when the dialog opens select the code icon (<> 3rd from the left), and you'll get a textarea in which you can insert custom HTML. \n. @Nisthar This isn't something I have planned I'm afraid, however @bfintal has something like this in place on his word press plugin for ContentTools (https://pagebuildersandwich.com/) which automatically converts special tags into HTML for example a form can be inserted by entering a pre-defined short tag. \nSo this is possible - I suspect you need to monitor for the blur event on text elements and then review the content to see if it contains HTML, if it does (under whatever special conditions defined HTML would be converted) then the element would be converted/updated to contain the specified HTML.\n@bfintal is this how you're converting tags in your plugin? \n. Hi @grsmv, thank you for the kind comments :)\nContentTools CSS (SASS) doesn't (shouldn't) apply any general styles, the ct-widget class is used as a wrapper to ensure general styles only impact elements with that class or children of elements with that class.\nContentEdit is a little different, most styles are only applied to elements with the ce-element class however as you've highlighted there are some defaults added to aid alignment of images, iframes and video blocks. These are provided because once the HTML is no longer editable the alignment of those elements still needs to be retained.\nThese are only defaults though and as per the comment (within the SASS) it is expected that they will be removed / overridden by the site CSS. For example they can be reset using the following CSS at any point after including the ContentTools/Edit CSS.\ncss\n/* Reset ContentEdit default styles for images, iframes and videos */\nimg,\niframe,\nvideo {\n    display: initial;\n    margin: initial;\n}\nI agree in most cases you'd then typically redefine those styles in the scope of editable regions (in whatever way you choose to define an editable region), e.g:\ncss\n[data-editable] img,\n[data-editable] iframe,\n[data-editable] video,  {\n    ...\n}\n. Yes but if you compile the CSS yourself then you can remove that section (or use it and wrap it in a class that limits the scope to your own requirements), or simply reset the styles as per the example in my last comment.\nThe only alternatives that don't require a default like this (that I can think of at least) are to either:\n- Have a requirement for editable areas, such as requiring editable regions to have the CSS class editable.\n- Applying a CSS class to all images, iframes and videos (along the lines ct-image) which remains against these elements once the document is no longer editable. \n- Removing these rules and requiring users to implement them per their requirement with no default.\nMy preference is to retain the default though and allow anyone implementing the library to either modify the SASS for their requirements (and build themselves) or reset the styles (if they prefer not to build from SASS) and then implement there own in CSS, e.g:\n``` css\n/ This CSS is defined after the content-tools-min.js is included in the page /\n/ Reset image, iframe, video styles defined by default in CE /\nimg,\niframe,\nvideo {\n    display: initial;\n    margin: initial;\n}\n/ Scope the alignment styles for image, iframe, video to only apply to content within an editable block /\n.editable img,\n.editable iframe,\n.editable video {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n}\n.editable img.align-left,\n.editable iframe.align-left,\n.editable video.align-left {\n    clear: initial;\n    float: left;\n}\n\n.editable img.align-right,\n.editable iframe.align-right,\n.editable video.align-right {\n    clear: initial;\n    float: right;\n}\n\n```\nWhere editable in this case is a CSS class applied to all elements that contain editable content.\nI am open suggestions though if you can see a cleaner solution that still provides a default.\n. Today I learned IE doesn't support initial - I guess for the benefit of anyone else reading this issue for the interim the reset would need to look more like:\nimg,\niframe,\nvideo {\n    display: inline-block;\n    margin: 0;\n}\nThanks @grsmv :)\n. Hi @quantiletree and thanks for you interest in the project. The reason for setting a default for image styles is discussed in some detail in the previous comments but thinking about it again has given me time to propose a change I think will help.\nThe more I mull this over the more I believe that really the problem is one of documentation and the initial file structure (e.g these styles being mixed in with the content-edit.scss). From my own experience using the library and initial feedback I believed that typically users would modify the SASS/CSS defaults to meet their requirements when integrating ContentEdit/Tools - but clearly this is not always the case. Furthermore there is no documentation on this task and the defaults are not apparent unless you fall over the issue. Which as you state is a bad experience for the developer and one I'm keen to avoid.\nSo I'm going to split out the default styles for images, videos and iframes into a separate CSS file (defaults.sass/css) with comments explaining that the styles are required for alignment when ContentEdit/Tools CSS is not present (e.g in a non-editing environment) but that the SASS/CSS should be modified when integrating CE/CT to limit it's scope to editable regions of the document. I'll also add a section about this in the getting started guide.\nThe contents of this file can then be either modified and copied into the existing CSS for the site (recommended) or included as a separate file.\n. As stated in my last comment I've now removed the default global styles and instead provided guidance including an example set of styles in the getting started guide within the documentation - http://getcontenttools.com/getting-started#preparing-the-css\n. @grsmv Thank you :)\n. Thanks for this :+1: \n. Hi @dakotalightning - when does the error occur? The moment you start editing, when you first select an element or on some other action? \nAlso I'm assuming this is a custom build process, does the error occur if you include content-tools.js as a separate <script> tag on the page? If so can you post that error as it may help in identifying where the code is failing, if not could you describe the build process a bit more, if it's grunt can you post it here?\n. I don't have much experience with rails, is it possible to disable the uglify step in the build to identify if that step is causing the issue?\n. We use uglify in the grunt build script to generate the content-tools.min.js library, it appears to me that rails uglifier is (https://github.com/lautis/uglifier) is a wrapper for the same library so my guess is something in the configuration, potentially the default configuration is different from the config used to uglify in the projects pipeline.\nCan you provide information about the version of  ugifier your using and the settings for your project please?\n. Reading around on the web it might be a good idea to try disable mangle_names which I think might be on by default.\n. Whilst I like the introspective nature of JS it appears I'm abusing it with the use of constructor.name - and in quite a number of places. Some of these cases can be changed relatively easily, others need a bit more thought but having done a little reading on the subject I think in hindsight this was a poor decision on my part and should be rectified.\n@dakotalightning Thanks for you help in whittling down the issue. \n. Hi @shvetsovdm - I started work on this issue last night and have a local version of ContentEdit working with mangled names (shaves nearly 30kb off the minified source too :) ). I need to get some additional tests in place and make a few changes to ContentTools but I'm confident I'll have the fix in place today/tonight.\n. Hi @shvetsovdm if you want to add an attribute to an inline tag (e.g a DOM element within an edtiable elements content) you can use the code editing section from the inspector (see below):\n\nWe don't have any plans to add an option to manage attributes on inline tags as individuals at the moment.\n. Hi @shvetsovdm, it would really depend on how it was implemented, anchored popups are really only designed with a single field in mind currently and adding an extra field of almost the same size to the link popup that's (IMO) in most cases not used wouldn't feel right to me. However I agree this would be a useful short-cut so if an elegant solution can be reached then yes. \nInitial thoughts are perhaps showing a target icon right of the field that can be clicked to reveal the target field, along with a way to reveal the field using the keyboard also (such as hitting the tab key whilst in the URL field).\nWhat do you think?\n. @aljopro at the moment the only action that uses the popup is the link tool so at the moment there's not UX for this. Since only the add link tool uses the anchored popup right now we probably need to think about some other scenarios where this might come to establish the UX. Adding time data to an attribute might be one (as in the tutorial http://getcontenttools.com/tutorials/adding-new-tools).\n@shvetsovdm the standard dialog is not ideal for actions like this as it takes you away from the content you're editing. With anchored dialogs you remain in context (e.g you can see the section of text you're applying the link to, which would typically be hidden by a normal dialog).\n. @shvetsovdm I think it works but in an ideal world it wouldn't be the approach I'd take. I'm not keen on the large dialog given we're only looking at showing 2 fields (URL and target) and it doesn't keep the context. \nOne other thing to note is I think target should be a field you can set, however the approach here of a simple checkbox for the most common requirement is very nice. So maybe we say if you want to set the target to something other than _blank you can do it in the code editor but we simply have an open in new window icon (replacing the target one I suggested earlier) that can be toggled? \n. I think it looks awesome! Perfect to me.\n. Thank you @mAKEkr :+1: \n. At the moment that would be tricky to implement as the libraries themselves rely on the singleton nature of the editor (e.g they internally call get() to get the root and the editor).\nCan you provide an example use case and I will try to determine the best approach.\n. I'm glad you like/love the editor and it's really nice to hear that :)\nSupport for separate editing environments as your describing isn't going to be an easy thing to implement currently (at least as far as I can tell). The decision to use a singleton pattern to decouple functionality between the libraries and their components in hindsight was perhaps not ideal.\nI do think what your requesting has merit so I'm going to mark this as an enhancement and will support anyone taking up the task ahead of myself getting to it.\nIn the meantime if this is something you need in the short-term one approach could be to be to look at doing the following:\n- Treat each region as a root (it really doesn't matter that they aren't part of the same document in this scenario)\n- Modify the code base to allow a different set of tools to be configured based on a region attribute.\n- Modify the code base to disable drag'n'drop and merge between regions that don't share a specific attribute.\nFor example your HTML might look something like this:\nhtml\n<div data-editable=\"article\" data-model=\"article\">\n    ...\n</div>\n<div data-editable=\"comment-1\" data-model=\"comment\">\n   ...\n</div>\nIn the code base you would then:\n- capture the focus event\n- find the region for the focused element\n- based on the region's data-model attribute set a different list of tools in the tool box, e.g:\n``` coffeescript\nroot = ContentEdit.Root.get()\nCapture focus events\nroot.bind 'focus', (element) ->\n    # Find the region the element resides within\n    region = element.closest (node) ->\n        return node.type() is 'Region'\n# Update the toolbox based on the data-model\neditor = ContentTools.EditorApp.get()\nmodel = region.domElement().getAttribute('data-model')\nif model == 'article'\n    editor._toolbox.tools(ContentTools.DEFAULT_TOOLS)\nelse if model == 'comment'\n    editor._toolbox.tools(['bold', 'italic'])\n\n```\nPreventing drag'n'drop between regions is more complex, for merge you need to patch the behaviour of the merge method on the ContentEdit.Element class. (I haven't written the code to do this but you should be able to use the code above to fill in what I've outlined below to fit your needs).\n``` coffeescript\nContentEdit.Element.merge = (element) ->\n   # >>> Add code here to get the parent region and determine if they are compatible to merge...\n\n    # Determine if either elements class supports the merge\n    if @constructor.mergers[element.type()]\n        @constructor.mergers[element.type()](element, this)\n\n    else if element.constructor.mergers[@type()]\n        element.constructor.mergers[@type()](element, this)\n\n```\nFor drag'n'drop you'd need to do the same for the _onOver method, \n``` coffeescript\nContentEdit.Element._onOver = (ev) ->\n        @_addCSSClass('ce-element--over')\n    # Check an elment is currently being dragged\n    root = ContentEdit.Root.get()\n    dragging = root.dragging()\n    unless dragging\n        return\n\n   # >>> Add code here to check if the region this element and the element being dragged are compatible\n\n    # Check the dragged element isn't this element (can't drop on self)\n    unless dragging != this\n        return\n\n    # Check we don't already have a drop target\n    if root._dropTarget\n        return\n\n    # Check the dragged element can be dragged on to this element\n    if @constructor.droppers[dragging.type()] \\\n            or dragging.constructor.droppers[@type()]\n\n        # Mark the element as a drop target\n        @_addCSSClass('ce-element--drop')\n        root._dropTarget = @\n\n```\nI realise this isn't an ideal solution but for anyone looking right now at doing this then this approach might be a short/medium term solution.\n. I've downloaded the JSON config file and added it to the repo here: https://github.com/GetmeUK/ContentTools/tree/master/external\n. @l2aelba agreed and will do.\n. I've now added a not referencing the config file in the tutorial.\n. So on pressing shift return/enter we'd insert a br instead of a paragraph? I think this is a great idea and I'm happy to implement the change in the next few days if that's it?\nIf you want to do it soon than that you need to look to modify the behaviour in of ContentEdit.Text._keyReturn in the ContentEdit code base (https://github.com/GetmeUK/ContentEdit).\n. Can you let me know which browsers? I only tested on Chromium I must admit.\n. Can you send me a screenshot of what you're seeing as I might be misunderstanding, niether Chromium or Firefox are displaying this issue for me. \n. I don't generate a visual cursor (we use the system text cursor) so it wont be that they're moving independently. Can I ask are you doing this at the end of the line or part way through the text and does it make a difference which - I remember having issues with multiple br tags at the end of a line displaying oddly before.\n. OK I can confirm I'm definitely getting an issue with this when the cursor is at the end of the line on different browsers - will flag as a bug.\n. @dirkjacobs thanks for your help - I pushed a fix that behaves as I would expect on FF and Chrome now, though it's not the nicest of hacks I have to admit (https://github.com/GetmeUK/ContentEdit/blob/f82846d335b5b38e2e4b9c5c95a41ec216c3d19f/src/scripts/text.coffee#L317).\n. Hi @andtii - this is something that is in the pipeline (though it's a long pipeline right now), it's a feature request that's popular and has been discussed in more detailed previously here https://github.com/GetmeUK/ContentTools/issues/13 (I think perhaps we should change the title of the issue to be more appropriate).\nThe idea is to create a ContentFlow library that allows for dynamic creation/management of the editable regions within a page from templates.\nI'm going to mark this as a duplicate for now an close it but only because I just want the one issue regarding it open - and I realise that the existing issue wouldn't be very apparent currently so that needs to change.\nThanks for your interest :+1:  in CT\nDuplucate of #13 \n. Hi @KI-G - thank you for the nice comments :)\nSo there are 2 things to consider:\n1. Detecting when the user has entered the @ or # tag into the content.\n2. Popping up an auto-complete of some sort to allow the user to select from predefined options.\nTo monitor for changes to content I'd recommend monitoring key down events against the document when the editor is live, for example:\n``` coffeescript\nListen for key events against the document\ndocument.addEventListener 'keydown', (ev) ->\n# Get the currently focused element\nelement = ContentEdit.Root.get().focused()\n\n# Check an element is selected and it supports content\nif not element or not element.content \n    return\n\n# Check the element contains a # or @ character\ntext = element.content.text()\ntext = element.domElement().textContent # Likely to be a lot more efficient\n...\n\n# Get the position of the caret/text cursor and determine if the user requires a typeahead\nselection = ContentSelect.Range.query(element.domElement())\n...\n\n```\nNext you'll need to open a popup at the position of the caret/text cursor, for this I recommend you look to use the AnchoredDialog as a basis for the popup and to get the position you use the ContentSelect.Range.rect() method against your selection (referenced here), you can see an example of this usage in the LinkTool.\nHope that helps get you under way and shout if I can help out further. \n. Thanks for this @shvetsovdm I will review the code changes in full over the weekend but initially looks excellent and will be a great addition to CT. :+1: \n. Hi @cesarve77 thanks for contributing this - I'd be happy to consider adding a more complete base image uploader example to the library and a native JavaScript one would be popular with the community I'm sure.\nIn it's current form however I wouldn't be able to consider the code for the core library without the following additions:\n- Comments to make it easy for a user new to the code to pick it up and use it in their own application.\n- Test specifications that can be run using grunt jasmine against the code to ensure any changes made to it or the ContentTools core library do not break its function. (I'm still completing the test specifications for ContentTools currently and I'm trying to ensure that like all the other libraries (ContentEdit, ContentSelect, FSM and HTMLString) there is a comprehensive test specification for the library).\n- Consistent formatting of the cod,e in particular the use of white space. \n. Thanks for the kind comments and contributing the gist - I'm sure people will find it useful in the meantime :+1: \n. I agree this would be a nice addition to the library :+1:\nAre you looking to contribute the feature back to the CT core library? I would be happy to have this option for users. If so then I would suggest we look first at how we can best integrate the new functionality into the existing UI, e.g the ImageDialog?\nIf it's for a separate project then I'll happily provide a run down of what steps I believe are required.\n. No problem, so my advice would be as follows:\n- You need to change the ContentTools.ImageDialog class to support a URL input field and a Fetch button. These additional DOM elements should be added in the mount method. There are examples of adding inputs and buttons in the code base :)\n- You'll then need to listen for either the the Fetch button to be pressed, or the return key to be pressed while the URL input has focus, this code should go in the _addDOMEventListeners method. You might also want to consider monitoring the URL input box (using the input event) to check its content is valid and only enable the Fetch button if it is.\n- When a user uploads an image the associated image handler class will receive the imageUploader.fileReady event, we'll need something similar in place for the URL fetch, for example on the user pressing the 'Fetch' button consider triggering the event imageUploader.fetchURL against the image handler and passing it the contents of the URL input field, e.g:\ncoffeescript\n    @_domFetchButton.addEventListener 'click', (ev) =>\n        url = @_domURLInput.value\n        @trigger('imageUploader.fetchURL', url)\n- In turn you'll then need to listen for that event within you're image handler, how you fetch the image will depend on your implementation but I would imagine you'll submit the URL as an AJAX request (similar to how you would submit and image file) and wait for details of the image to be returned before populating the dialog.\nHope that all makes sense shout if you want me to expand on any of it.\n. Thanks @Eeliya that's a really nice UI solution :+1: \n. Hi @iamryandrake - I'm not 100% sure what you're asking sorry - the existing insert button would I imagine work the same as it does now? \nOnce you hit the fetch button you're image manager would be responsible for contacting the server and requesting that image (see my previous comment above regarding this). As with uploading an image file on fetch the server should return a URL and image dimensions that can be used to insert the image (or potentially to contact the server again and manipulate the image).\n. Hi @Eeliya the FSM (Finite State Machine) is purely about state management, it allows you to say if the application is in this state then it can only move to the following states. FSM is used by HTMLString to manage the state of the parser, e.g if the parser encounters a < it might move to a state of OPENING_TAG at which point it will only accept the next character in the range of [a-z] - I hope I've explained that well enough.\nSo to answer you question the FSM doesn't use setInterval - however I do use setInterval for monitoring the document and implementing undo/redo (e.g I take a regular snapshot of the editable document), and updating the status of tools to determine if they should be enabled, toggled, disabled, etc.\nWhether this is a good idea or not is arguable, another common approach - certainly for undo/redo - is  to implement a message system where a stream of messages to change the document can be logged and run in reverse to provide undo support. This does mean that code needs to be put in place to revert as well as apply a change, but it's more efficient and possibly less prone to issues that might be caused by different application states when a snapshot is taken. This approach works in content tools because we can snapshot the HTML along with the user's current selection and expect the result of an undo/redo to a shapshot to be the same no matter what the state of the editor is.\nI'm still on the fence about the decision I made here, however if you're calling setInterval to trigger a custom function periodically I don't see a problem with this so long as you ensure that the frequency of calls is not causing the browsers performance to suffer.\n. There's no built in way to do this and the toolbox isn't visible by default until you start editing so in all honesty I hadn't previously considered adding this as a feature. One option is to customize the start/stop process which numerous people have done to date, there is some advice here on the subject:\nhttp://stackoverflow.com/questions/34645700/customise-edit-button-for-contenttools/34660462#34660462\nAnd some related questions here:\n- https://github.com/GetmeUK/ContentTools/issues/77\n- https://github.com/GetmeUK/ContentTools/issues/78\nHope will get you started, and if you decided to take the customize route and need a hand do let me know.\n. @bfintal hey bud I'm not getting this exact error I'm getting a different one. I don't believe there should be an issue with replacing \" with &quot; within HTML attributes but at the moment the editor isn't escaping attributes - so setting a background image as per your first example causes the editor to output the HTML with attributes that are unescaped e.g style=\"background-image: url(\"http://somepath.to/image.jpg\")\". At least that's what I'm seeing output from the editor.\nI believe CT should just be escaping attributes when they're set against the element, will have to take a look at this today and get something in place.\n. @bfintal I think that should fix the issue now. Basically similar to your approach I've updated the attributesToString function in the ContentEdit library only instead of replacing \" with ' I escape the output (including quotes with &quot;) which I think is the correct behaviour.\n. Have you tried using a static element? You can drop static elements into editable regions and then drag and drop content around them. At the moment you can't drag the static elements themselves as static elements can contain anything and the drag-drop handling code could easily clash - though this is something we've looked at.\nTo create the static element simply add an attribute to the static element like so:\nhtml\n<div class=\"my-non-editable-content\" data-ce-tag=\"static\">...</div>\nIf this doesn't resolve the issue can you paste your source code, there are a number of circumstances this wont work for and support for an option to be able to dynamically control regions within a page is something we're looking at for the future - https://github.com/GetmeUK/ContentTools/issues/13.\n. Hi @cesarve77 this is the expected behaviour currently, that is CT strips/trims white space from editable elements unless it's a <pre> preformatted tag. <br> and &nbsp; are considered white-space by the HTMLString parser.\nBut your point is a good one as I'm not sure this is the correct behaviour, and in any case it should be consistent and either allow them or strip them on saving out.\nI'll open this up to feedback from others and have a think about what the correct behaviour should be, but I suspect that <br> tags and &nbsp; should be retained as you've stated.\nThanks for highlighting this and your English is far better than my attempt at any language other than English!\n. If no one else has a strong opinion on this ATM I'm going to initially ensure that save trims out line breaks so the behaviour is consistent as I believe this is a simpler option for now and wont risk breaking anything. But once that's in place I'll leave the issue open as an enhancement on the basis that I agree long term this behaviour might need to be changed.\n. OK the behaviour now is consistent and white space (includeing <br> elements) is trimmed from the output of all text elements except PreText.\nIn future we may revise this behaviour if there is a strong enough argument made that it should be switch to preserver white space, or perhaps as an enhancement we might consider allowing the behaviour to be configured as a setting.\n. @hassanakram I'm inclined to agree, there's an example of the changes we might need to make to support this behaviour on this SO post http://stackoverflow.com/questions/36883079/how-to-preserve-multiple-br-when-no-content-before-or-after-with-contenttools/36954440#36954440\nSo we'd have a setting of something like ContentEdit.TRIM_WHITESPACE which by default is true but that could be set to false to provide this behaviour.\n. It's possible the solution there is no longer valid with the current version of CT as it was a valid solution when posting so will check that again later this evening and update the solution if it's not working - it's a bit of a mess of a solution but (if working) it could form the basis of what we're attempting to do.\nIt would be great to get some help on a PR @hassanakram - thank you :+1: - The changes would need making to the ContentEdit library (https://github.com/GetmeUK/ContentEdit) for this change. The only thing that might be a pain for you is the changes need to be made in CoffeeScript, but if you're used to CoffeeScript (or happy to spend an hour learning it) then that wont be an issue.\n. I've posted an enhancement issue for this here on CE: https://github.com/GetmeUK/ContentEdit/issues/10\n. @cesarve77 thanks for the kind words - does this comment relate to your previous issue or is this a new issue?\n. Can you provide a few more details it's not clear from what you've added what the issue is - the issue appears to be formatted incorrectly which might not be helping, after the word 'then' everything is appearing monospace?\n. A the <code> tag was hidden - I've modified your comment to escape it. Can you send a screenshot showing this please?\n. OK I'm really sorry but I'm still struggling to repeat the issue you're describing - can you paste the HTML here?\n. This is perfect thank you - the solution is to hold the Ctrl-key down (Cmd on Apple) and click the (P)aragraph tool, this will create a new paragraph rather and converting the current editable block.\nThere's a note on it here on the demo page http://getcontenttools.com/demo#adding-and-converting-content\n. NP - let me know if you have any issues with it :+1: \n. @shvetsovdm yes we do - in fact internally we have an experimental version of this that works as it has been a requirement for some clients.\nHere's the patch we currently use - it has a number of caveats (including only supporting pasting a single table) and it really hasn't undergone much scutiny/testing yet but it may be acceptable as a short term bridge.\n``` coffeescript\neditorCls = ContentTools.EditorApp.getCls()\neditor = new ContentTools.EditorApp.get()\neditor.init(...)\neditor.paste = (element, clipboardData) ->\n    # This modifies the paste operation to look for tables pasted (as HTML),\n    # if a table is found then that is inserted, otherwised the text is\n    # pasted as normal.\n# Check for HTML data in the paste\nhtml = clipboardData.getData('text/html')\ntable = null\n\nif html\n    # Look for any tables\n    root = document.createElement('div')\n    root.innerHTML = html\n    table = root.querySelector('table')\n\nif table\n    # Insert the table\n    rows = table.querySelectorAll('tr')\n\n    # Build a configuration for the table in question\n    tableConfig = {\n        columns: rows[0].querySelectorAll('td, th').length,\n        head: table.querySelector('thead') != null,\n        foot: false\n    }\n\n    # Create the table\n    tableElement = ContentTools.Tools.Table._createTable(tableConfig)\n\n    # Insert it into the document\n    [insertElement, index] = ContentTools.Tools.Table._insertAt(element)\n    insertElement.parent().attach(tableElement, index)\n\n    # Insert content into the table\n    _createRow = (tbody, values, create=true) ->\n        if create\n            row = new ContentEdit.TableRow()\n            for i in [0...values.length]\n                cell = new ContentEdit.TableCell('td')\n                row.attach(cell)\n                cellText = new ContentEdit.TableCellText('')\n                cell.attach(cellText)\n            tbody.attach(row)\n        else\n            row = tbody.children[0]\n\n        for value, i in values\n            cell = row.children[i].tableCellText()\n            cell.content = new HTMLString.String(value.trim())\n            cell.updateInnerHTML()\n\n    # Insert header\n    if tableConfig.head\n        thead = tableElement.thead()\n        for td, i in rows[0].querySelectorAll('td, th')\n            cell = thead.children[0].children[i].tableCellText()\n            cell.content = new HTMLString.String(td.textContent).trim()\n            cell.updateInnerHTML()\n\n    # Insert body\n    tbody = tableElement.tbody()\n    firstNewRow = 0\n    for row, i in rows\n        if tableConfig.head and i == 0\n            firstNewRow += 1\n            continue\n\n        values = []\n        for td in row.querySelectorAll('td, th')\n            values.push(\n                HTMLString.String.encode(td.textContent.trim())\n                )\n\n        _createRow(tbody, values, i > firstNewRow)\n\nelse\n    # Default paste\n    editorCls.prototype.paste(element, clipboardData)\n\n```\n. Hi @megamuf - I typically use this site for quickly converting Coffee to JS - it's not perfect as you loose the comments and the output is clearly automated and not as neat as if hand written but it does a good job in a pinch and you can always update the code to make it pretty afterwards (providing it's not a huge amount of code):\n``` JavaScript\nvar editorCls = ContentTools.EditorApp.getCls();\nvar editor = new ContentTools.EditorApp.get();\neditor.init(...);\neditor.paste = function(element, clipboardData) {\n  var cell, firstNewRow, html, i, index, insertElement, root, row, rows, table, tableConfig, tableElement, tbody, td, thead, values, _createRow, _i, _len, _len2, _len3, _ref, _ref2, _ref3, _results;\n  html = clipboardData.getData('text/html');\n  table = null;\n  if (html) {\n    root = document.createElement('div');\n    root.innerHTML = html;\n    table = root.querySelector('table');\n  }\n  if (table) {\n    rows = table.querySelectorAll('tr');\n    tableConfig = {\n      columns: rows[0].querySelectorAll('td, th').length,\n      head: table.querySelector('thead') !== null,\n      foot: false\n    };\n    tableElement = ContentTools.Tools.Table._createTable(tableConfig);\n    _ref = ContentTools.Tools.Table._insertAt(element), insertElement = _ref[0], index = _ref[1];\n    insertElement.parent().attach(tableElement, index);\n    _createRow = function(tbody, values, create) {\n      var cell, cellText, i, row, value, _len, _ref2, _results;\n      if (create == null) {\n        create = true;\n      }\n      if (create) {\n        row = new ContentEdit.TableRow();\n        for (i = 0, _ref2 = values.length; 0 <= _ref2 ? i < _ref2 : i > _ref2; 0 <= _ref2 ? i++ : i--) {\n          cell = new ContentEdit.TableCell('td');\n          row.attach(cell);\n          cellText = new ContentEdit.TableCellText('');\n          cell.attach(cellText);\n        }\n        tbody.attach(row);\n      } else {\n        row = tbody.children[0];\n      }\n      _results = [];\n      for (i = 0, _len = values.length; i < _len; i++) {\n        value = values[i];\n        cell = row.children[i].tableCellText();\n        cell.content = new HTMLString.String(value.trim());\n        _results.push(cell.updateInnerHTML());\n      }\n      return _results;\n    };\n    if (tableConfig.head) {\n      thead = tableElement.thead();\n      _ref2 = rows[0].querySelectorAll('td, th');\n      for (i = 0, _len = _ref2.length; i < _len; i++) {\n        td = _ref2[i];\n        cell = thead.children[0].children[i].tableCellText();\n        cell.content = new HTMLString.String(td.textContent).trim();\n        cell.updateInnerHTML();\n      }\n    }\n    tbody = tableElement.tbody();\n    firstNewRow = 0;\n    _results = [];\n    for (i = 0, _len2 = rows.length; i < _len2; i++) {\n      row = rows[i];\n      if (tableConfig.head && i === 0) {\n        firstNewRow += 1;\n        continue;\n      }\n      values = [];\n      _ref3 = row.querySelectorAll('td, th');\n      for (_i = 0, _len3 = _ref3.length; _i < _len3; _i++) {\n        td = _ref3[_i];\n        values.push(HTMLString.String.encode(td.textContent.trim()));\n      }\n      _results.push(_createRow(tbody, values, i > firstNewRow));\n    }\n    return _results;\n  } else {\n    return editorCls.prototype.paste(element, clipboardData);\n  }\n};\n```\n. I think this code is now out of date now actually - the library now requires you to manually bind to this paste event:\n``` JavaScript\nvar editorCls = ContentTools.EditorApp.getCls();\nvar editor = new ContentTools.EditorApp.get();\neditor.init(...);\nContentEdit.Root.get().unbind('paste', editor._handleClipboardPaste);\nContentEdit.Root.get().bind('paste', function(element, ev) {\n    var clipboardData = null;\n# Non-IE browsers\nif (ev.clipboardData) {\n    clipboardData = ev.clipboardData;\n}\n\n# IE browsers\nif (window.clipboardData) {\n    clipboardData = window.clipboardData;\n}\n\nContentTools.EditorApp.get().paste(element, clipboardData);\n\n});\n...code from the example...\n```\n. Yeah the code is only an example of how to solve the issues for tables (because we had a client who needed to paste in lots of tables from word) - it doesn't support full HTML paste yet hence why we have the issue open :)\n. Interestingly this only happens if you create a new element and click it, if you empty the element and click it FF behaves as expected. \n. This issue is both chrome and firefox but as far as I can tell it only occurs if there hasn't been a change of element between changes, e.g this doesn't happen if you select an element change its content, select another element make it a heading then undo - at least for me this works for the first undo but the very last undo never reverts the selection.\n. I'm using Chromium on Ubuntu so I guess that might make a difference as I can still get the same issue (but I've yet to find a difference in behaviour between them).\n. Ah my bad can now replicate the issue on FF exactly was just misreading your original report :/\n. OK I'm not sure why but it seems like preventing the default event for mouse up and down on FF doesn't prevent focus loss so I've added a check to ensure that focus is set for elements when restoring the selection state.\n. I'm testing against the sandbox I haven't yet updated the demo on the website - did you pull down?\n. Ah your right it still has an issue, I don't think my change has been applied - will resolve it now.\n. Dumb mistake - I last second added an if test to prevent focus being called on a focused element but managed to put in a double negative - and didn't test in FF. That should be OK now, have tested it in the sandbox in FF before pushing.\n. Are you talking about within a text element (e.g a p tag), so the content could still be styled overall but there wouldn't be any option to apply markup to text within the element?\n. So no at the moment there isn't a way to do this through the framework, this question has been asked previously though here: https://github.com/GetmeUK/ContentTools/issues/79 and there is some advice on how to approach the problem for now.\n. OK so if we're talking about the region would that mean you still want paragraphs when people hit return?  Would is the advantage over using a styled textarea?\n. The simplest approach would be to hide the icon to select the code tab using CSS, for example:\ncss\n.ct-control--code {\n    display: none !important;\n}\nIt's not the prettiest of solutions but it is simple.\n. @dirkjacobs it's not currently possible to dock or fix the toolbox as part of the standard CT library though a number of other users including @bfintal and @eelija have achieved docked and fixed position toolboxes. \nI think in both cases this was a combination of modifying both the default SASS/CSS and at least in the case of the fixed toolbox CoffeeScript/JavaScript was required to achieve the effect. One simple way to disable the dragging ability is to simple hide the element that allows this using CSS, e.g:\ncss\n.ct-toolbox__grip { \n    display: none; \n}\nWhen I get around to tackling support for mobile devices then support for fixing the position of the toolbox is planned as this is a required change for mobile devices (the floating toolbox isn't practical on smaller touch devices).\nIf you provide a visual for what your looking to achieve I'd be happy to discuss possible approaches and offer up some coding examples of how this might be achieved.\n. Thanks for reporting this @etlel, I'm going to look in to the mootools issue now.\nRe. the other issue you reported I believe this is purely a difference in browser behaviour to what you are expecting. If you insert a newline at the end of a block of content the <br> is inserted (you can see if you inspect the element but the browser may not display a newline or move the cursor. If you start to type the content will however appear on a newline.\n. OK looking into this the cause of the issue I could do with some help from anyone who is more experienced/familiar with mootools. As far as I can tell mootools adds custom attributes to DOM elements (such as $constructor=\"...\") so that when innerHTML is used to sync content on inside the DOM with the editable element representing it these attributes are captured.\nI can't find any documentation or stackoverflow issues on how to disable this behaviour so whilst the approach by mootools seems odd to me I suspect that I'm missing something obvious or that someone more experienced with mootools will know the answer.\n. Bugs keep me up at night :( and this one had been here too long - so I decided this weekend I needed to sit down for a few hours with the mootools code base open and track the issue down.\nThe issue had nothing to do with mootools it was actually an issue in the HTMLParser library that was resetting the attributes store in the parser to a list instead of an object. As mootools extends the native list object and because my code was expecting an object, the mootools extensions to the list object got added as attributes to the node (you can see the fix here https://github.com/GetmeUK/HTMLString/commit/5fbd0a9e8f21c5427d5842bff3912b4ca8f04dc0).\nSo in closing it was my fault, it's not fixed and I'll sleep better this week :)\n. Having read into wmode a bit more (thank you for the stackoverflow link :+) I'm not currently comfortable fixing the value set for this as there are a number of modes each with different trade performance characteristics.\nHowever, prior to you reporting this issue setting a video URL for youtube or vimeo stripped all parameters from the URL inserted. This behaviour has now been changed so that the params are maintained allowing the user to specify the URL parameters required for the video when they add it.\nIn some situations a default of wmode=transparent would likely be beneficial (e.g with a user base unlikely to use this understand that they need to add this. In this scenario one approach would be to listen for the attach event against the ContentEdit root, checking the URL to see if it contains a wmode value and then adding one if not (something like), this way existing youtube videos will have the default set as soon as the page is edited:\n``` coffeescript\nContentEdit.Root.get().bind 'attach', (elm) ->\n# We're only interested in videos\nif elm.typeName() != 'Video'\n    return\n\n# Has `wmode` already been set\nif elm.attr('src').indexOf('wmode') > -1\n    return\n\n# No wmode set so add a default\nif elm.attr('src').indexOf('?')\n    elm.attr('src', elm.attr('src') + '&wmode=transparent')\nelse\n    elm.attr('src', elm.attr('src') + '?wmode=transparent')\n\n```\n. Hi @bshorrosh,\nSo simple answer - not really through as is, more complex answer yes you can but you need to modify the editors behaviour somewhat.\nThe cleanest approach might be to modify the way the ContentEdit.Video works to wrap the output in the element you want it to, I can provide some example code for this but just to check - do you always want the video wrapped in an element (e.g div/p tag) or will it vary (as that's a slightly more complex proposition).\n. So below is an example of how to patch the the ContentEdit.Video class to provide this functionality, it maybe neater to override the class and modify the ContentTool.Tools.Video behaviour, but this is the quickest approach and should serve as a reasonable basis for either (it looks neater in coffee but I don't know which you are using and most people use JS so I stuck with that for the example).\n`` javascript\n// Patch the behaviour of the Videohtml` method to wrap the iframe output\nContentEdit.Video.prototype.html = function (indent) {\n    var indent;\n    if (indent == null) {\n        indent = '';\n    }\n// Return a HTML string for the node\n    if (this.tagName() == 'video') {\n        return ContentEdit.Video.super.html.call(this, indent);\n    } else {\n        // Wrap the returned string in a div tag\n        return indent + '' +\n            \"<\" + this._tagName + this._attributesToString() + \">\" +\n            \"\" + this._tagName + \"\" +\n            \"\";\n    }\n}\n// Patch the behaviour of the Video html method to cater for a wrapped video\nvar _innerFromDOMElement = ContentEdit.Video.fromDOMElement;\nContentEdit.Video.fromDOMElement = function (domElement) {\n    var iframe = domElement.querySelector('iframe');\n    if (iframe) {\n        return _innerFromDOMElement.call(this, iframe);\n    } else {\n        return _innerFromDOMElement.call(this, domElement);\n    }\n}\n```\nThis outputs an iframe wrapped in a div with the class video-wrapper. The data-ce-tag=\"video\" attribute is used so the editor knows to treat the div as a video.\n\nRegarding the video's representation in edit mode, this is a little more tricky so before I offer up an example patch for the mount method I just want to check what you want exactly. In edit mode videos are represented by a single div element with no child nodes. Is it enough for this element in edit mode to have the video-wrapper class or do you need a div element within it. If you could provide some context for what you are trying to achieve with the wrapper in edit mode that would be useful in recommending the best approach :)\n. Hi @Schweinepriester thanks for the kind comments :)\nInternally we use milestones to flag what will be in an upcoming release and so my intention was to use the same approach, and at the same time that would lend itself nicely to a changelog. The first milestone was planned to be when all the tests where complete but I simply have gotten that far yet unfortunately.\nI'm fairly new to git (convert from Mercurial) so I've not used tags much but I'll have a read up on them and how they could be used.\nI'm very happy to hear suggestions from yourself and others on the best route to take :)\n. @guillaumepiot - Yep NPM is in the pipeline (and you're down to help me with that lol :D )\n. Empty paragraphs are removed once they lose focus, this is the intended behaviour.\n. Ah I see, it's almost like it's removed from the virtual DOM but not the actual DOM. Will take a look. \n. OK it was a bit more complex than I at first thought because we've been relying on not blurring an element through native 'blur' events for a while now. Adding back native blur support broke a number of tests and it took a while to fix them.\nAlso the scope of this fix is a little more far reaching than I'd hoped so if you spot anything odd directly related to it please let me know.\n. Yeah I think we're going to have to back this out and think about it some more\u00b8had a feeling it might have bigger knock on effects.\n. Yeah the revert automatically closed it because of the message\n. Thanks @bfintal - so does this mean that the empty element is retained after focus is lost and that it can then be clicked on again to give it back focus?\n. ```\n    # HACK: If the content of the element is empty and it already has focus\n    # then supress the event to stop odd behaviour in FireFox.\n    #\n    # Anthony Blackshaw <ant@getme.co.uk>, 2016-01-30\n    if @content.length() == 0 and ContentEdit.Root.get().focused() is this\n        ev.preventDefault()\n\n```\nOK looking a the source there's a reason that we didn't implement it in this way (e.g on click before) - not a super descriptive comment there though so I'm going to have to have a play.\n. OK so I can confirm this hack is the reason that this bug occurs.\n. To be honest I no longer see an issue in firefox if I remove the hack - I'm think about just removing it.\n. Thank you :) That error still occurs - so I need to resolve the original issue without the hack, figure out why firefox behaves this way.\n. I think as per your code forcing the selection to be 0,0 is the most likely solution btw.\n. So this code seems to resolve the issue, and looks reasonable neat for a hack to me:\n# HACK: If the content of the element is empty and it already has focus\n        # then supress the event to stop odd behaviour in FireFox. See issue:\n        # https://github.com/GetmeUK/ContentTools/issues/118\n        #\n        # Anthony Blackshaw <ant@getme.co.uk>, 2016-01-30\n        if @content.length() == 0 and ContentEdit.Root.get().focused() is this\n            ev.preventDefault()\n            new ContentSelect.Range(0, 0).select(this._domElement)\n. Grrr this still has issue in FF, this is the final hack:\n``` coffeescript\n    _onMouseDown: (ev) ->\n        # Give the element focus\n        super(ev)\n    # If the user holds the mouse down for an extended period then start\n    # dragging the element.\n    clearTimeout(@_dragTimeout)\n    @_dragTimeout = setTimeout(\n        () =>\n            @drag(ev.pageX, ev.pageY)\n        ContentEdit.DRAG_HOLD_DURATION\n        )\n\n    # HACK: If the content of the element is empty and it already has focus\n    # then supress the event to stop odd behaviour in FireFox. See issue:\n    # https://github.com/GetmeUK/ContentTools/issues/118\n    #\n    # Anthony Blackshaw <ant@getme.co.uk>, 2016-01-30\n    if @content.length() == 0 and ContentEdit.Root.get().focused() is this\n        ev.preventDefault()\n        if document.activeElement != this._domElement\n            this._domElement.focus()\n        new ContentSelect.Range(0, 0).select(this._domElement)\n\n``\n. Think that's it fixed - thanks for your help tracking that down, still not happy with the fix as I would like to know why FF displays this behaviour but for another day.\n. Hi @shockdot, thechrome-extension://` errors are I believe to do with the youtube video on the sandbox page. There's some additional information on what causes this here: http://stackoverflow.com/questions/24490323/google-chrome-cast-sender-error-if-chrome-cast-extension-is-not-installed-or-usi\nTo test this remove The content-tools.js include from the sandbox page and see if you still get the errors, if so it's unrelated (this is what I did just to reassure myself and the errors disappear). \nHowever the Cannot read property prototype issue is most likely an issue in your build of content tools. I've pull fresh copies of the repo this morning and checked I can build cleanly and there are no issues running grunt jasmine or in the sandbox.html page so I'm at a loss to what might be causing your issue. \nIf you can post your content-tools.js file and the line number for the error Uncaught TypeError: Cannot read property 'prototype' of undefined as well as your sandbox.js file I'll happily investigate further. \nIf I can offer any help/advice on adding your tool please let me know.\n. @shockdot could you also include the coffeescript or JS just for the tool you're adding?\n. Looking at your source file my initial thoughts are that you seem to be including your new tool code before the ContentTools.Tool class is defined, can you post your Gruntfile.coffee here, or at least just the coffee: section please so I can see the order you're building in.\n. OK I can't reproduce a build error on a clean download at the moment (but I am going to check this again - we have pushed some changes since your report so perhaps something is going on), but my recommendation would be that you include the tool at the end of the build process not at the start as this will definitely fail with a prototype error as described because the base class wont exist yet.\n```\n            build:\n                files:\n                    'src/tmp/content-tools.js': [\n                        'src/scripts/namespace.coffee'\n                    # UI\n                    'src/scripts/ui/ui.coffee'\n                    'src/scripts/ui/flashes.coffee'\n                    'src/scripts/ui/ignition.coffee'\n                    'src/scripts/ui/inspector.coffee'\n                    'src/scripts/ui/modal.coffee'\n                    'src/scripts/ui/toolbox.coffee'\n\n                    # UI - Dialogs\n                    'src/scripts/ui/dialogs/dialogs.coffee'\n                    'src/scripts/ui/dialogs/image.coffee'\n                    'src/scripts/ui/dialogs/link.coffee'\n                    'src/scripts/ui/dialogs/properties.coffee'\n                    'src/scripts/ui/dialogs/table.coffee'\n                    'src/scripts/ui/dialogs/video.coffee'\n\n                    # Other\n                    'src/scripts/editor.coffee'\n                    'src/scripts/history.coffee'\n                    'src/scripts/styles.coffee'\n                    'src/scripts/tools.coffee'\n\n                    # Custom Tools\n                    'src/scripts/small-tool.coffee'\n                ]\n\n```\n. Hi @dantejauregui  and @johnidm - thank you for your support :+1: \nCan you highlight what features you're looking to provide. I can't see from the image anything that isn't already supported by CT but I might well be missing something, with CT you can currently:\n- Resize images\n- Move images (including aligning them)\n- Set attributes against images via the properties dialog (such as alt tags or additional classes/styles)\nIf you would like to implement a pop-up menu then potential @bfintal could help here as I know he's done something similar for his wordpress plugin.\n. BTW Thank you very much for offering to support the project I could certainly use the extra help as there is a lot to do still!\n. I think at the moment unto is just unavailable if an element isn't focused will look at that.\n. So I've fixed this issue here by allowing tools to be flagged as not requiring elements to be applied. Undo/Redo tools are kind of an exception here. To allow a tool to be used even if no element is currently selected/focused the tool must now have the class variable @requiresElement = false set (the default is now true for tools).\nIn addition to this bug I also noticed that the code which checks to see if tools need to be updated was a.) incorrect and b.) the output was being ignored anyway. So I have now fixed this issue (which should be good for performance at least) however given it was always updating before we may see some unforeseen side affects - tests are passing but the suite is not complete yet so not that helpful - I've played around with it and it seems correct but anyone spotting an issue please let me know.\n. Hi @shockdot as @shvetsovdm commented this isn't a feature of ContentTools currently but has been discussed. I can't see it being a short term goal for the library unless it's taken up by others but I'd have no objection to this becoming a feature.\n. Just pushed a fix for this issue, attribute names are now allowed to contain : colons.\n. Hi @Qqwy, thank you for your kind comments. Support for making greater control over editable regions/elements (such as a H1) and for limiting the tools that can be used when editing these has been raised in a number of existing issues:\n- https://github.com/GetmeUK/ContentTools/issues/79\n- https://github.com/GetmeUK/ContentTools/issues/118\n- https://github.com/GetmeUK/ContentTools/issues/130\nIt's something that our clients (getme) would like to have in place to so support is planned, but as per your question no there is no support currently and work creative arounds must be implemented.\n. Hi @Qqwy,\nThe list of restricted attributes can be set by the developer implementing the tool as to what they feel is appropriate, allowing class and id to be set against an element is something I would always want to be able to do (but not everyone will of course which is why it can be configured). Setting an id for example is how I'm able to link to sections within a page from links, without this option that facility wouldn't be possible.\nAs for JavaScript options I agree I think this might be something worth considering as it's potential not good practice to set behaviours inline like this - but there is no basis for the change on the grounds of security. \nThe JavaScript can play no role in securing your website and this is something you must do server-side when saving the code. There are any number of ways that the output from ContentTools which is then posted to the server can be modified client-side and you cannot consider the content you receive safe.\nFor the most part if you're implementing ContentTools as a tool used by trusted users (e.g editors updating their own website from a password protected area) then the level of trust you apply to the content you accept from users will be relatively high, if you're allowing CT to be used by public users and saving the output (or for that matter saving any input from an untrusted user that will then be rendered back as unescaped html) you should treat it with a very health dose of scepticism and make sure you nullify any possible threats server-side.\nThis is getting a little beyond the scope of CT though now so I'll end on that note.\n. Hi @Qqwy, there is no way currently to set a wildcard for matching tags against restricted attributes.\n. Hi @Qqwy,\nI agree we should add support for a getState() method against the editor and I will document the various states so that it's clear what each means. \n. OK the new functionality from this pull request is now in place and documented http://getcontenttools.com/api/content-tools#editor-app\n. Hi @Portekoi thanks for updating the issue and letting me know and sorry I hadn't gotten around to answering the question sooner.\n. Hi @Portekoi can you explain the issue you're having a little further, I managed to edit the button without too much issue: \n\nHaving said that if you remove all content from the button then it will disappear, one way to solve this is to add a style to the editor for the button (http://getcontenttools.com/getting-started#configure-styles) so that user can convert the block to a button (rather than an inline element).\nEDIT: Another thing I noticed playing about with it is that as an inline element it's quite easy to end up outside the button so that when you type at the edge of the button you start typing outside. So I'd definitely recommend creating this buttons as blocks (e.g adding the button class to a paragraph).\n. Hi @Qqwy this looks like it might be a great replacement for the current sandbox and demo uploader as it would allow people to add genuine images in the demo environments. \nI'm sure this could be a interesting starting point for many and I'm def going to have a play with it. Thanks for contributing it :+1: \n. @Qqwy I ended up taking a slightly different approach to solve this moving the scope of the getRestrictedAttributes method to ContentTools along side the RESTRICTED_ATTRIBUTES settings. In addition I put in checks for when a tag name or global tag name (e.g '*') is not defined. You can see the relevant commit here: https://github.com/GetmeUK/ContentTools/commit/3adbf5ca74277e25ed1ad2b120fde1a13fa33ae0\n. Hi @Qqwy thank you for these I've had a quick look and both your recent pull requests make sense and will be merged in this weekend. I will be making a few minor modifications once I've done so and I thought I'l let you know ahead of time.\n- I'll be making some minor changes to comments and code formatting (mostly just keeping things consistent with the existing coded, so line length and use of whitespace).\n- I'll be removing the npm-debug.log file from the commit and adding an entry to the .gitignore file to catch this in future (as I imagine this could be a common accidental additional).\n- With regard to the pull request #137 I wont at this time be setting any global restricted attributes in the core library by default ('style', 'onclick', etc), but I agree the functionality itself is a good addition to the library. This may change in future but at the moment I don't want to introduce this change without further consideration and potential input from other users/contributors.\nThanks again  for your efforts :+1: \n. Hi @BugHunter2k images within paragraphs are not part of the editable environment, rather they are content within the editable paragraph - so not being able to drag-drop them around in the same way as editable images is by design (is as much that I've not looked at implementing that to date - but if it's a popular request I'd happily look into it).\nIf you're stuck for a short term solution you can move the image within the code by using the code section of the properties dialog. \n. Thank you @nXu :+\n. Hi @Folo4ka thanks for your question, this is the topic of some debate and development currently and you can find more information against the following post https://github.com/GetmeUK/ContentTools/issues/79.\nCurrently it's not possible to do this without modifying the library a little bit however support for this feature is planned in the near future.\n. Hi @dirkjacobs the simplest/quickest way would be to define a couple of styles (css classes) for aligning the image in the manner you've described (there's some information here on how to add styles http://getcontenttools.com/getting-started#configure-styles). A user can the use the properties dialog to apply the alignment style they want to the image.\nYou could of course also change/override this default behaviour so that the image was initially aligned say left by updating the CSS/SCSS.\n. You could definitely update the alignment buttons to cater for images, so you'd need to revise the Align set of tools here: https://github.com/GetmeUK/ContentTools/blob/master/src/scripts/tools.coffee#L458\nSo this simplest option would just be to update the @canApply method to allow images, e.g:\n``` coffeescript\n@canApply: (element, selection) ->\n    # Return true if the tool can be applied to the current\n    # element/selection.\n    return element.content != undefined or element.type() is 'Image'\n```\nThis would then allow the align tool to apply the text-left, text-right, text-center classes to images. You'd need to do a bit more work if you wanted to apply different classes for images than to text elements but not too much :)\nI haven't tried the above so if you come across any issues let me know happy to take a look :)\n. Well it's not that different with JS to be honest:\nJavaScript\nContentTools.Tools.AlignLeft.canApply = function (element, selection) {\n    return element.content !== undefined || element.type() === 'Image';\n}\n. I don't want to make this the default behaviour at the moment because I think it would lead to confusion between the 2 types of alignment, for our clients at least.\nHowever now that the new event system is in place it should be possible to listen for the alignment tools and modify the behaviour without the need to monkey patch, for example:\n``` JavaScript\nvar alignLeftBtn = editor.toolbox()._toolUIs['align-left'];\nalignLeftBtn.addEventListener('apply', function(ev) {\n    ev.preventDefault();\n    var element = ev.detail().element;\n// ... perform the align stuff you want to do (perhaps check for the element type\n//     to determine what class will be applied...\n\neditor.toolbox().updateTools()\n\n});\n```\n. Hi @Eeliya,\nTo focus on the first editable element in the first region on start up you could use the following approach:\n``` javascript\n// Select the first editable element when starting to edit\neditor.start = function () {\n    var editorCls = ContentTools.EditorApp.getCls();\n    editorCls.prototype.start.call(this);\n// Select the first editable region\nvar firstRegion = this.orderedRegions()[0];\n\n// Check the region has a child to focus on\nif (firstRegion.children.length > 0) {\n\n    // Select the first element\n    var firstElement = firstRegion.children[0];\n\n    // Give the element focus\n    firstElement.focus();\n}\n\n}\n```\n. Hi @akshaysinha91,\nTo give focus to the first text content element the code should be updated to be:\n``` JavaScript\n// Select the first editable element when starting to edit\neditor.start = function () {\n    var editorCls = ContentTools.EditorApp.getCls();\n    editorCls.prototype.start.call(this);\n// Select the first editable region\nvar firstRegion = this.orderedRegions()[0];\n\n// Check the region has a child to focus on\nif (firstRegion.children.length > 0) {\n\n    // Select the first content element\n    var firstElement = firstRegion.nextContent();\n\n    // Give the element focus\n    firstElement.focus();\n}\n\n}\n``\n. Hi @Eeliya this question is a little too open, to be able to answer it would be useful if you could define what it is you're looking to achieve by changing the behaviour.\n. OK so replacing thedivtag with animgtag could be a little painful purely because we use pseudo elements (:beforeand:after`) to show information about the image.\nHowever you could try using an img tag and then applying the following method to make it support pseudo elements: http://stackoverflow.com/questions/5843035/does-before-not-work-on-img-elements (the answer starting I found a way to make this work in pure css).\nIf that does work you'd just need to change the mount method (https://github.com/GetmeUK/ContentEdit/blob/master/src/scripts/images.coffee#L62) to output an img and set the source instead of the background.\n. That approach would work too :)\n. Hi @dirkjacobs does this happen every time you rotate an image or only sometimes? Could you post the image in your example here so I can download and attempt to reproduce this issue?\n. OK so I've tested here and I don't get this issue with this image which makes me think the issue might be in the ImageUploader code. When you update the image after performing the rotate are you passing the new update dimensions of the image? e.g \n// Populate the dialog\ndialog.populate(image.url, image.size);\nAnd if so can you check what the values you are setting are and make sure they are correct. \n. Excellent news :+\n. Hi @Eeliya , You can override the Element class used to parse an element using the data-ce-tag  attribute. Please read the documentation on custom tag names here: http://getcontenttools.com/api/content-edit#tag-names\n. Yes we're short off an example on how to build custom tags and I agree we should have one. \n. Hi @iamryandrake isDormant is a recent addition to the library have you pulled from the repo recently?\n. Hi @iamryandrake - thanks for you interest in CT. At the moment CT doesn't support inserting images via a link currently though I believe other user's have implemented this behaviour (see an example here https://github.com/GetmeUK/ContentTools/issues/106).\n. No this isn't possible and is a fundemental feature/flaw (perhaps compromise is a better word) with the approach taken to managing content in CT / ContentEdit. This topic has been discussed in the past in particular with regard to deleting content:\n- https://github.com/GetmeUK/ContentTools/issues/11\n- https://github.com/GetmeUK/ContentTools/issues/41\nIt's not dead as a possible enhancement if someone wanted to look at adding support for this to the library it would be a popular change, but currently it's not on the more pressing list of upcomming enhancements.\n. Hi @iamryandrake you can already press shift enter to remain within the same paragraph, shift enter automatically creates a br tag, this was resolved here: https://github.com/GetmeUK/ContentTools/issues/101\n. OK I see what you're saying now but I'm afraid I don't agree that it's the wrong way around.\nModifier(e.g shift) + return/enter is a pretty standard mechanism in applications (e.g skype, slack) for the line-break short-cut and from a HTML perspective I think the br tag is used less often than the paragraph tag, perhaps to list the lines of an address for example, but that it shouldn't be used to separate paragraphs of text.\nWe could consider a feature that allows this behaviour to be configured against the ContentEdit namespace e.g 'ContentEdit.PREFER_LINE_BREAKS' but by default this wouldn't not be the behaviour?\n. OK - well I've tagged as an enhancement for now and changed the title to reflect this, it shouldn't be a huge task so hopefully someone might pick this up before me :) \nFor anyone who does want to implement this enhancement you'd want to start here: https://github.com/GetmeUK/ContentEdit/blob/master/src/scripts/text.coffee#L314 in the ContentEdit library. \n. OK thanks to @Qqwy this feature is not supported, docs have been updated http://getcontenttools.com/api/content-edit#settings, but as an example use:\nContentEdit.PREFER_LINE_BREAKS = true;\n. Hi @Cyrille37 does the console report any errors?\n. OK if you change the content of the HTML before calling start against the editor (e.g editor.start()) then since the HTML is parsed directly from the DOM that should work so it seems like the content is being changed after start has been called.\nIt's a fair while since I've used JQuery so I maybe way off base here (forgive me if so), but looking at the documentation here, I'm not sure done should be called like this against each $.get, e.g from the docs calling $.ajax multiple times:\njavascript\n$.when( $.ajax( \"/page1.php\" ), $.ajax( \"/page2.php\" ) ).done(function( a1, a2 ) {\n  // a1 and a2 are arguments resolved for the page1 and page2 ajax requests, respectively.\n  // Each argument is an array with the following structure: [ data, statusText, jqXHR ]\n  var data = a1[ 0 ] + a2[ 0 ]; // a1[ 0 ] = \"Whip\", a2[ 0 ] = \" It\"\n  if ( /Whip It/.test( data ) ) {\n    alert( \"We got what we came for!\" );\n  }\n});\nThere's nothing in the start editing process I can think of that would break the promise chain like you're describing, like your first example the parsing of the DOM into the editable set of elements is a synchronous process.\nOne other thing to try perhaps is logging to the console in the done methods and the then method in your example so that you can see the order of things in the console.\n. No problem :)\n. Hi @Qqwy,\n- Deleting table rows can be achieve by clicking the delete icon while your cursor is in a table cell.\n- You have to hold the mouse down for 1 second to move a table currently however you can modify this time by setting the ContentEdit.DRAG_HOLD_DURATION setting (by default set to 500ms).\nI agree that the enhancements described in issue #62 need to be made they are on the list. \nAdding icons to to the table rows when selected or hovered over isn't something I'd like to see as I'd prefer not to add to the UI if possible. However I think there's merit in trying out your suggestion regarding cursor changing, I'm open to a new approach as opposed to the hold and wait if it feels more intuitive. If you (or anyone else) can provide a working example to trial and we think it's a better experience I'd be happy to include it either as the default behaviour or as an option if opinion is split? \n. @Qqwy we could also try the same approach for lists also as these use the same approach as tables currently.\n. Hi @gabipetrovay thanks for your interest in CT, with regard to start/stop events and events in general this is something we plan to add. You can see a more detailed discussion on the subject here: https://github.com/GetmeUK/ContentTools/issues/31, including some discussion on the need to be able to prevent execution of the action (as you've highlighted) and some workarounds that can be used currently.\n. Hi @bcreeves,\nSo you can add tools without adding them to the existing build process or content-tools.min.js. If you just want to add a tool that wraps some text in say a sup tag then I would suggest you inherit from the bold class, here's a quick example as to how in vanilla JS:\n```\n// CoffeeScript helpers\nvar __hasProp = {}.hasOwnProperty;\nvar __extends = function(child, parent) {\n    for (var key in parent) {\n        if (__hasProp.call(parent, key)) \n            child[key] = parent[key];\n    }\nfunction ctor() { \n    this.constructor = child; \n}\n\nctor.prototype = parent.prototype;\n\nchild.prototype = new ctor();\nchild.__super__ = parent.prototype;\n\nreturn child;\n\n};\nContentTools.Tools.Sup = (function(_super) {\n    __extends(Sup, _super);\n// This class extends the existing Bold tool    \nfunction Sup() {\n  return Sup.__super__.constructor.apply(this, arguments);\n}\n\n// Stow the tool so we can reference it later using 'sup'\nContentTools.ToolShelf.stow(Sup, 'sup');\n\n// Set the tool tip that will appear\nSup.label = 'Sup';\n\n// Set the name of the icon (this wont exist unless you add one)\nSup.icon = 'sup';\n\n// Set the tag that will be used to wrap content when pressing this tool\nSup.tagName = 'i';\n\nreturn Sup;\n\n})(ContentTools.Tools.Bold);\n// Add the new Sup tool in it's own group to the toolbox\nContentTools.DEFAULT_TOOLS.unshift(['sup']);\n```\nInsert this code anywhere before you initialize the editor and it should work, I tested on the sandbox page and it works fine.\n. Hi @shockdot, at the moment the inspector doesn't show tags which are children of editable elements and the properties dialog isn't set up to support modifying non-editable elements. \nThis is something I believe some one could look at implementing as the HTMLString library provides tools that make inspecting the content pretty easy.\nAt the moment the only way you can do this via the CT editor is to use the properties dialog and then modify the inner code directly. I don't think currently I'd want to consider this as a core library feature but if it was available as an extension I'd happily promote/link to it.\n. Just on looking at places you might start you might want to check out the tutorial on adding a new tool which covers inserting time tags inside of content elements http://getcontenttools.com/tutorials/adding-new-tools\nThis is at least would allow you to insert and modify a span plus it's class via the toolbox, though it doesn't cover integrating this into the inspector bar, there's no existing tutorial around the inspector bar but if you get some code together and need a hand at any point give me a shout :) \n. Hi @shockdot - by root element I presume you're describing the parent element e.g the <p> tag or ContentEdit.Text element not the ContentEdit.Root element? If that's the case then that would be the expected behaviour, the child elements your describing here aren't part of the editable DOM tree (e.g Region > Text) and so the inspector and properties dialog are not designed to interact with them.\nTo change this behaviour is not a small undertaking but I can highlight where you'd need to look:\n- The updateTag method for the inspector bar needs to be updated to add inline tags from elements with content, to do this you'll need to select the character the carat is against in the content and then loop through the tags applied to that content.\n  - https://github.com/GetmeUK/ContentTools/blob/master/src/scripts/ui/inspector.coffee#L53\n  - http://getcontenttools.com/api/content-select (to get the current carat position look at ContentSelect.Range.query(element) where element in this case is element.domElement())\n  - http://getcontenttools.com/api/html-string (to get the current list of sub tags you'll want to use element.content.children[caratIndex].tags())\n- The TagUI class will have to be updated to accept inline elements, I would still send through the parent editable element here but also include the inline element which should then be used to display in the tag itself as well as being passed to the properties dialog. You will also need to update the save event for the properties dialog here to cater for changes being applied to the inline element and not the editable element.\n  - https://github.com/GetmeUK/ContentTools/blob/master/src/scripts/ui/inspector.coffee#L86\n  - https://github.com/GetmeUK/ContentTools/blob/master/src/scripts/ui/inspector.coffee#L142\n- Finally you'll need to update the properties dialog to accept an inline element, again I would still send the parent editable element through. There's quite a few changes need making here to how it queries for information about the element but for the most part it would just be checking to see whether an inline element has been provided and using that instead of the parent editable element if so.\n  - https://github.com/GetmeUK/ContentTools/blob/master/src/scripts/ui/dialogs/properties.coffee#L1\n. Hi @dirkjacobs OK I'll take a look, hopefully not a problem too often for users :) I think I just need to modify the check for empty regions to exclude ContentEdit.StaticElements from the count. Will look at over the weekend :)\n. Static elements no longer count when determining if a region is empty and so a paragraph tag will now automatically be added to any region that is empty or contains only static elements.\n. I suggest something like:\n``` javascript\n// Select the first editable element when starting to edit\neditor.start = function () {\n    // Find the first region\n    var firstRegion = editor.orderedRegions()[0];\n// Add a paragraph to the end of the region\nvar p = new ContentEdit.Text('p', {}, '');\nfirstRegion.attach(p);\n\n// Focus on the element\np.focus()\n\n}\n```\n. @shockdot there's no Element class in CT. CT provides an editor (e.g a set of tools and a UI) but the actual editable elements and the management of a tree of editable elements is provided by the ContentEdit library documented here: http://getcontenttools.com/api/content-edit and available as source here: https://github.com/GetmeUK/ContentEdit.\nEven though you could probably generate an editable element on the fly to send the properties dialog, e.g (http://getcontenttools.com/api/content-edit#text):\n```\nCreate an editable element on the fly\nelement = new ContentEdit.Text('p', {'class': 'foo'}, 'some content')\nSet up the dialog\nmodal = new ContentTools.ModalUI()\ndlg = new ContentTools.PropertiesDialog(element)\nShow the dialog\nContentTools.EditorApp.get().attach(modal)\nContentTools.EditorApp.get().attach(dialog)\nmodal.show()\ndialog.show()\n```\nI don't think this is likely to yield the results you want as it's not designed to be used in this way, e.g what are you expecting to happen once you save the dialog?\n. @shockdot well you can certainly follow the example from my last comment and specify a span instead of a p tag:\nelement = new ContentEdit.Text('span', {}, 'goes here')\nYou will have to manually manage the save action for the properties dialog but a ContentEdit.Text element wont care what tag name you give it.\n. That's correct, you need to manually manage the save action for the properties dialog to update the content of your element per any changes to the inner element.\n. The documentation for HTMLString explains how unformat works in terms of matching, you can find it here: http://getcontenttools.com/api/html-string#string (under s.unformat(from, to, tags...))\nAs per the docs because a HTMLString.Tag instance is passed to unformat the span must match exactly, that is <span some=\"attribute\"> wont be matched, you'll need to either send a tag with matching attributes for the span or instead of sending a Tag send just the tagName, e.g 'span' (which will wildcard match all span tags).\n. np - glad it's working for you\n. @mstojanovv thanks for posting this, I can reproduce and am looking at the issue now.\n. @mstojanovv thanks again for highlighting this, the issue has now been resolved.\n. Hi @shockdot this isn't really the approach I'd recommend for this, partly because as per the docs (http://getcontenttools.com/api/html-string#limitations) the HTMLParser is designed for inline content not block level elements (such as a <div>) and partly because I would recommend a different approach for clearing your content.\nIn my experience a better approach here would be to create a clearfix class and apply it to the block level element (e.g the <p> tag), e.g:\n// Taken from the bourbon library which I love (https://github.com/thoughtbot/bourbon/blob/v4-stable/app/assets/stylesheets/addons/_clearfix.scss)\n.clearfix:after {\n    clear: both;\n    content: '';\n    display: table;\n}\n. Hi @mstojanovv - thanks for the kind comments - support for better event handling in the editor UI is under way and will be available in the next release (I have an early prototype working on my machine and it's a big improvement), but until then this is a bit of a messy area.\nTo start/stop the editor and animate the switch you have to fake the click events against the ignition itself, so for example after calling init against the editor:\n``` CoffeeScript\neditor = ContentTools.EditorApp.get()\nedit.init(...)\nGet the ignition component\nignition = editor._ignition\nStart\nignition._domEdit.click()\nSave\nignition._domConfirm.click()\nCancel\nignition._domCancel.click()\n```\nThis code may well break in the upcoming release (1.2) and there will be a more appropriate approach to solving this problem - but in the short term this should work.\n. Hopefully the new event system will be available early next week (that's my plan at least).\n. @mstojanovv Just a quick update on this, I have a version of the new event system in a usable state - I'm just updating existing tests and checking and updating documentation so I'm confident of releasing this feature next week.\n. Hi @vladyslav2 and thanks for the kind words :+1: \nYou're right I have been asked this question a number of times before, however I actually like the approach you've started on better than my previous suggestions as it's cleaner, so based on your code above this is what I'd suggest. In your image uploader you need to modify the behaviour of the _onSave view:\n``` JavaScript\nImageUploader.prototype._onSave = function() {\n    // Select the currently focused image\n    var focused = ContentEdit.Root.get().focused();\n// Save our new image inserting it into the page\nthis._dialog.save(imageUrl, imageSize, {'alt': imageAlt});\n\n// If the focused element was an image remove it so the new image is \n// switched with the old.\nif (focused.type() === 'Image')\n    focused.parent().detach(focused);\n}\n\n};\n```\nEveryone's ImageUploader tends to be a little different based on their integration but hopefully this gives you enough to go on, however if you do run into any issues with this let me know.\n. Hi @vladyslav2,\nSo there are 2 approaches you can take here, the first is to put the a tag within a paragraph e.g:\n<p>\n    <a class=\"btn btn-danger btn-large\">SIGN UP</a>  \n</p>\nIf this doens't work for you then you can tell the editor that the a tag is a editable text element using the data-ce-tag attribute (http://getcontenttools.com/api/content-edit#tag-names), e.g:\n<a class=\"btn btn-danger btn-large\" data-ce-tag=\"text\">SIGN UP</a>\n. Hi @simonmuys thanks for the kind comments and it's great to hear investing time in CT :)\nSo re your first question, you are correct in assuming that the output of cropRegion should be a 4 item array, so these are the 2 relevant snippets of code that return crop marks.\n``` CoffeeScript\nContentTools.ImageDialog.cropRegion: () ->\n    # Return the defined crop-region (top, left, bottom, right), values are\n    # normalized to the range 0.0 - 1.0. If no crop region is defined then\n    # the maximum region will be returned (e.g [0, 0, 1, 1])\n    if @_cropMarks\n        return @_cropMarks.region()\nreturn [0, 0, 1, 1]\n\nCropMarksUI.region: () ->\n    # Return the crop region (top, left, bottom, right), values are\n    # normalized to the range 0.0 - 1.0.\n    return [\n        parseFloat(@_domHandles[0].style.top) / @_bounds[1],\n        parseFloat(@_domHandles[0].style.left) / @_bounds[0],\n        parseFloat(@_domHandles[1].style.top) / @_bounds[1],\n        parseFloat(@_domHandles[1].style.left) / @_bounds[0]\n        ]\n```\n- https://github.com/GetmeUK/ContentTools/blob/master/src/scripts/ui/dialogs/image.coffee#L41\n- https://github.com/GetmeUK/ContentTools/blob/master/src/scripts/ui/dialogs/image.coffee#L326\nAs you can see you should be returned 4 numbers between 0.0 and 1.0 in the order (top, left, bottom, right). If this isn't what's being returned then there's an issue, could you console.log(dialog.cropRegion()) and post the result here so I can see what you're being returned.\nRe. your second question this is definitely not the expected behaviour and you should certainly be able to edit more than once, this sounds like an issue is being raised during the saving process - can you post any output in the JS console of your browser for me to review please. \n. Hi @simonmuys,\nThe element collection class is actually designed to be inherited from rather than used directly (e.g the List element or Table element), having said that this does work there just a few minor issues with your code (you're very close):\n``` CoffeeScript\nclass ContentTools.Tools.Dialogue extends ContentTools.Tool\n\n    # Convert the current text block to a dialogue block (e.g <div class=\"dialogue\">foo</div)\n\n    ContentTools.ToolShelf.stow(@, 'dialogue')\n\n    @label = 'Dialogue'\n    @icon = 'dialogue'\n    @tagName = 'div'\n\n    @canApply: (element, selection) ->\n        # Return true if the tool can be applied to the current\n        # element/selection.\n        return element != undefined\n\n    @apply: (element, selection, callback) ->\n        # Apply the tool to the current element\n\n        # Create a new dialogue element using the current elements content\n        collection = new ContentEdit.ElementCollection(\n            'div', {class:'dialogue'}\n            )\n        paragraph = new ContentEdit.Text('p', {}, 'My custom wrapped p tag')\n        collection.attach(paragraph)\n\n        # Get the element region or its closest one\n        if element.parent().type() != 'Region'\n            element = element.closest (node) ->\n                return node.parent().type() is 'Region'\n\n        region = element.parent()\n        region.attach(collection, element.parent().children.indexOf(element))\n\n        paragraph.focus()\n\n        callback(true)\n\nContentTools.DEFAULT_TOOLS[0].push('dialogue')\n\n```\nSo here's what I changed:\n- I updated the region.attach call so that the new element is inserted before the selected element (you were inserting it at the end of the region (which is I assume why you couldn't see it).\n- I changed the focus to event to be called against the paragraph (rather than the selected element when the tool is applied).\nHope that helps - Ant\n. @simonmuys drop behaviour must be specified for your new element, for example look at how this is done for the Text element:\nhttps://github.com/GetmeUK/ContentEdit/blob/master/src/scripts/text.coffee#L451\nHave you done this? If not your element can't be dropped or dropped onto by another element.\nMight be a pain but is is it possible to see this up and running somewhere and your full code? It's difficult to grasp what you may be missing without.\n. @simonmuys done, sorry for the late reply I've been away.\n. Hi @mstojanovv can you please post any console information output when you see this issue as it sounds like an issue is occurring sometimes when saving. Also could you format the code above a little (just get the indentations correct) so I can better read it and see if I can spot the problem.\n. OK something really odd here is that the elements all seem to have the ce- prefixed helper classes attached to them and that shouldn't be the case. CT/CE should output HTML without the classes used by the library directly. This indicates that the HTML has at some been saved with those classes applied, which is commonly due to an error saving.\nIf you start with a clean set of content (e.g one that hasn't been corrupted with the CT/CE CSS classes) and remove auto-save does the error still occur? I'm wondering if the auto-save which is something I don't actually use anywhere other than in the tutorial is breaking something. \n. Is there any chance I can get access to try this myself - I can't understand why no errors are being reported to the console if the toolbox isn't disappearing - can you replicate this problem in the sandbox or demo site?\n. Thanks for this (beta looks very smart :+1:)\nAs you say I only seem to be able to reproduce the error by inserting an item (either creating a table or inserting a new row).\nIn your code you have this line (may well be my example had this bad scoping in I'm too used to CoffeeScript).\nregion = ContentTools.EditorApp.get().orderedRegions()[0];\nCan you replace it with \nvar region = ContentTools.EditorApp.get().orderedRegions()[0];\nI'm wondering if the scope being set here to global is having side effects.\n. OK I could only produce the error if I used Add item can you confirm this is the case for you and if we take out the Add item code so that the issue not reproducible. I want to identify if the issue is strictly related to this code, if so then we can focus our attention there. \n. OK this is now fixed I believe (I've uploaded a fixed version to your site). The issue was that you were starting the editor multiple times (e.g every time the add item button was clicked). So if the editor wasn't started already there was no problem, if it was then an issue was caused because the editor parsed the current content (which had all the special classes against it).\n. Hi @etlel thanks for highlighting this, the event was being dispatched without the file information. I missed it when converting the event over to the new system I've resolved now.\n. The simplest approach would be to patch the revert method directly, e.g:\nJavaScript\nvar editor = ContentTools.EditorApp.get();\neditor.revert = function () {\n   this.revertToSnapshot(this.history.goTo(0), false);\n   return true;\n};\nYou might also consider keeping the event trigger here: https://github.com/GetmeUK/ContentTools/blob/master/src/scripts/editor.coffee#L375\n. Hmmm... this is a good question, part of the issue is that ContentEdit elements have their mechanism for focus and blur because some of the elements you manage with ContentTools aren't designed to receive focus natively.\nOne option would be to run a function periodically that simply checks whether the element that has focus is one of the inputs where you want the box hidden (using a class check for hide-toolbox perhaps), for example:\nJavaScript\nvar toolboxMonitor = function() {\n    var focused = document.activeElement;\n    if (focused and focused.classList.contains('hide-toolbox')) {\n        ... hide the toolbox\n    } else {\n        ... show the toolbox\n    }\n}\nsetInterval(toolboxMonitor, 250)\nEDIT: Change my logic in the above example which was completely wrong.\n. Hi @adellibovi - thanks for your question and kind words,\nRe. setting custom text align classes, you can currently configure these against their associated static Tool classes, like so:\nJavaScript\n// Set custom CSS class names for text alignment tools \nContentTools.Tools.AlignCenter.className = 'my-align-center';\nContentTools.Tools.AlignLeft.className = 'my-align-left';\nContentTools.Tools.AlignRight. className = 'my-align-right';\nHaving said that the same can't be said for the CSS alignment classes for drag aligned classes like images and videos, these are hard coded in ContentEdit and I think it would make sense to make them configurable against the library.\nRe. the DEFAULT_TOOLS settng, since there's only ever one instance of the editor app typically you might configure the tools initially using:\n``` JavaScript\n// Configure the initial set of tools\nContentTools.DEFAULT_TOOLS = [...tools...];\n// Init the editor\nvar editor = ContentTools.EditorApp.get();\neditor.init(...);\n```\n...or (and this is how you'd change it post init also)...\nJavaScript\neditor.init(...);\neditor.toolbox().tools([...tools...]);\nBut this approach is due to change a bit moving forward as I'm currently working on a new feature that allows you to define the tools that are displayed in the toolbo for individual fields (as well as providing a fallback). I'll be posting some additional information as well as release notes for this over the weekend and I'm expecting to deliver it in the next 2 weeks, this stems from issue https://github.com/GetmeUK/ContentTools/issues/79 which also discuss some of the features we're looking to implement.\n. Ahh... good point - I'll make a note to update those at the same time so that they use the className variable too, these aren't big changes so I should get the update in this weekend - thanks for highlighting.\n. @adellibovi have pushed a version with the fix (just a straight copy of what put in your commit), will look at the image alignment side of things next.\n. Hi @adellibovi just to let you know you can now configure the alignment CSS class names used when editable elements are dragged left / right of another element, the settings are against the ContentEdit.ALIGMENT_CLASS_NAMES setting, see here: https://github.com/GetmeUK/ContentEdit/blob/master/src/scripts/namespace.coffee#L7\nI'm just about to update the API docs now, thanks again for your help with these.\n. Ah yep - my bad incorrectly updated that test in release 1.2 - will push a fix shortly.\n. @sticklvl - thanks for providing a concise bug report (really helps) and for highlighting the code that was causing the issue, it's much appreciated. I've pushed a fix for this now. \n. Hi @SimBioT1954 this is a duplicate of issue #171 and has been fixed, this was a bug introduced in the release 1.2 that prevented the page being reverted to a non-editable state when saved with no changes. It's now resolved.\n. Hi @SimBioT1954 this is one of the features that will be better supported in the upcoming 1.3.0 release. We're planning on allowing individual editable elements to be configured to behave uniquely, so disabling some or all of the tools when selected, or disabling drag and drop support.\nHowever in the mean time this is actually possible right now (if slightly long winded). You need to listen for the focus event against editable elements and then use that event to configure the tools available, for example:\nJavaScript\nContentEdit.Root.get().bind('focus', function (element) {\n    var editor = ContentTools.EditorApp.get();\n    if (element.domElement().classList.contains('no-images')) {\n       editor.toolbox()._toolUIs['image'].disabled(true);\n    } else {\n       editor.toolbox()._toolUIs['image'].disabled(false);\n    }\n}\nAlternatively if you want to remove all tool options you can toggle the tools in the toolbox using:\n``` JavaScript\n// Turn all tools off\neditor.toolbox().tools([]);\n// Turn all tools back on\neditor.toolbox().tools(ContentTools.DEFAULT_TOOLS);\n```\n. OK so this isn't ideal and it's something I'll need to look at but because the ToolBox element is unmounting/mounting itself its not active and therefore hidden, the following fixes that:\n``` JavaScript\n    ContentEdit.Root.get().bind('focus', function (element){\n      var editor = ContentTools.EditorApp.get();\n      if (element.domElement().classList.contains('plain-text')) {\n        editor.toolbox().tools([]); // <-- Turns all tools off\n      } else {\n        editor.toolbox().tools(ContentTools.DEFAULT_TOOLS); // <-- does nothing\n      }\n  // Make sure the toolbox is active\n  editor.toolbox().domElement().classList.add('ct-widget--active');\n});\n\n```\nHowever this causes an unwanted transition to occur, I need to update this to make it more efficient in the way it updates the tools and to prevent this show/hide transition. I'll flag this as an enhancement now and update the title to be more relevant.\n. Hi @SimBioT1954,\nThe develop branch now contains an improvement to the Toolbox.tools method which resolves this issue cleanly, here's an updated example of how to approach this:\n``` JavaScript\nvar editor = ContentTools.EditorApp.get();\neditor.myToolsState = 'rich';\nContentEdit.Root.get().bind('focus', function (element){\nif (element.domElement().classList.contains('plain-text')) {\n    if (editor.myToolsState != 'plain') {\n      editor.myToolsState = 'plain';\n      editor.toolbox().tools([]);\n    }\n  } else {\n    if (editor.myToolsState != 'rich') {\n      editor.myToolsState = 'rich';\n      editor.toolbox().tools(ContentTools.DEFAULT_TOOLS);\n    }\n  }\n});\n```\nI'll push this fix to the master in the next release.\n. @SimBioT1954 no problem and thanks :+1: \n. OK This happens if you change the tools before the toolbox is mounted, I've put in place a check now so that the tools method checks if the toolbox is mounted before attempting to mount the tools - good catch @SimBioT1954 \n. @Predjo sorry for the slightly delayed reply. We're using NPM heavily in our own build pipelines and so this is moving up my internal todo list, I hope to have published all libraries in the collection to NPM by the end of June.\n. OK so thanks to the nudge :+1:  I've published each of the libraries under NPM now, so CT is now available here: https://www.npmjs.com/package/ContentTools, and can be installed like so:\nnpm install --save ContentTools\n. Hi @makasanas - you can actually put any URL into the video embed tool at the moment as it basically just inserts an iframe, the vimeo and youtube URLs are identified and formatted to set some additional default options via the getEmbedVideoURL method (https://github.com/GetmeUK/ContentTools/blob/master/src/scripts/namespace.coffee#L95). This method can be overridden to accept support additional services and if there was a request to add a service that proved popular I'd be happy to add it to the core library.\nIf you wanted to insert HTML directly into an editable region then you could do this using the static element type (http://getcontenttools.com/api/content-edit#static), there's no existing tool to do this so you'd either need to create one that accepted HTML code (which might be a useful feature for the core library as well) or do something similar to wordpress tags like @bfintal has done where special tags are recognized when entered into text fields and automatically converted into predefined HTML blocks.\n. Can you provide an example of the code you want to embed and I'll see if I can put some example code up for you to start from?\n. So for example in that case if you just paste the embed link for that into the video tool URL (e.g //codepen.io/rileyjshaw/embed/MyvWpw/?height=350&theme-id=0&default-tab=result) then that will embed the code pen (see screenshot) - I changed the height parameter for the iframe above to make it fit nicely but other than that this already works, if I've understood you correctly?\n\n. OK I use <pre> tags and prism myself on the http://getcontenttools.com website. To do this basically I disable prism during editing as you can't edit the code and have syntax highlighting on at the same time.\nUsing the editor I typically convert a paragraph to a preformatted element, add or copy > paste my code into the element, then use the code editor (e.g properties > code tab) and wrap the contents in a <code class=\"language-python\"> tag so that prism knows what language highlighter to use.\nWhen the editor isn't enabled (e.g in the page presented to visitors) I enable prism and this auto converts my tags to syntax highlighted blocks,\n. Hi @rvizcaino80,\nThere's no tool/option for doing this though I know others have implemented support for this feature in their own integrations with ContentTools.\nMy personal view point is that changing font size (color, etc.) through an editing tool like CT is generally the wrong approach (though I'm sure there are exceptions) and I prefer to define a set of CSS classes which can be applied to blocks keeping things consistent (e.g http://getcontenttools.com/getting-started#configure-styles).\nHaving said that as I say others have added this functionality and if you let me know what you have in mind I'm happy to provide you with some idea of how you might go about implementing something.\n. Hi @rvizcaino80,\nThere's two options here, either call edit against the ignition switch to start the editor, or manually change the state of the switch when you start the editor, e.g:\n``` JavaScript\n// Use switch to start the editor\neditor.ignition().edit()\n// Change switch manually\neditor.start();\neditor.ignition().state('editing');\n```\n. Hi @bcreeves,\nI've not done this so these are really just a couple of initial thoughts on an approach, based on your question I'm just considering preventing text content from overflowing it's parent.\nStep 1 is to detect whether or not the content has exceed the space afforded to it by its container/parent element. You may already have a tactic for doing this, in the past I've used a couple of approaches but this post on stackoverflow seems pretty solid and is where I'd start: http://stackoverflow.com/questions/143815/determine-if-an-html-elements-content-overflows/143889#143889\nStep 2 If the content has exceed the bounds of the container then we need to revert it to it's state before it exceeded the containers bounds (if we do this we'll also be preventing further entry).\n```\n// Here we're assuming that the paragraphs with fixed heights/widths have\n// the class limited against them.\n// Prevent merge behaviour for elements with the limited class\nContentEdit.Root.get().bind('mount', function (element) {\n    var domElement = element.domElement();\n    if (!(domElement && domElement.classList.contains('limited'))) {\n        return;\n    }\n    element.can('merge', false);\n});\n// Revert any change to the element that causes it to overflow\nContentEdit.Root.get().bind('taint', function (element) {\n    var domElement = element.domElement();\n    if (!(domElement && domElement.classList.contains('limited'))) {\n        return;\n    } \n// On overflow revert\nif (checkOverflow(domElement) && element.previousHTML) {\n    domElement.innerHTML = element.previousHTML;\n}\n\n// Remember the previous state\nelement.previousHTML = domElement.innerHTML;\n\n});\n```\nI've not tested this code and I suspect the revert here is going to be too simplistic and feel like it is but hopefully it helps get things started, let me know how you get on I'm sure this is something others might want to solve if not now in the future at some point.\n. @wrench13 thanks for this :+1: \n. Hi @richardprice,\nThat's a really good question and something that we should allow to be set moving forward (so I'll update this issue to be an enhancement). As it maybe a while before I get to adding this as a core library feature one option you could take in the meantime is to patch the _preventEmptyRegions method for the editor app:\n``` javascript\n// Get the editor class and patch the method that prevents empty regions\nvar editorCls = ContentTools.EditorApp.getCls();\neditorCls.prototype._preventEmptyRegions = function() {\n    var child, hasEditableChildren, i, lastModified, name, placeholder, region, type;\n// Check if any region is empty\nfor (name in this._regions) {\n    region = this._regions[name];\n    if (region.children.length > 0) {\n        continue;\n    }\n\n    // We have to check for elements that can receive focus as static\n    // elements alone don't allow new content to be added to a region.\n    lastModified = region.lastModified();\n    hasEditableChildren = false;\n    for (i = 0; i < region.children.length; i++) {\n        child = region.children[i];\n        if (child.type() !== 'Static') {\n            hasEditableChildren = true;\n            break;\n          }\n    }\n    if (hasEditableChildren) {\n      continue;\n    }\n\n    // If the region is empty add a placeholder element checking to see if\n    // the region has specified a placeholder tag type.\n    type = region.domElement().getAttribute('data-placeholder-type');\n\n    // Insert the placeholder element for the region\n    placeholder = new ContentEdit.Text(type || 'p', {}, '');\n    region.attach(placeholder);\n\n    // HACK: This action will mark the region as modified which it\n    // technically isn't and so we commit the change to nullify this.\n    region._modified = lastModified;\n}\n\n};\n```\nIn this scenario to add set a regions default automatically populate element for a region you'd do something like:\nhtml\n<div class=\"[ author ]  [ editable ]\" data-name=\"author\" data-placeholder-type=\"h3\">\n    ...\n</div>\n. I'll be pushing a fix for this in the next release (1.2.6) but just wanted to provide some detail. \nRather than choose a specific way of defining the default placeholder element for a region I've added a method against the editor that creates them and can be overridden - IMHO this this is flexible and a solid approach to support different workflows. \nSo replacing the patch above you'd now use the following code to implement the same feature:\n``` JavaScript\nvar editorCls = ContentTools.EditorApp.getCls();\neditorCls.prototype.createPlaceholderElement = function(region) {\n    var type = region.domElement().getAttribute('data-placeholder-type');\n    return new ContentEdit.Text(type || 'p', {}, '');\n};\n```\nThe createPlaceholderElement is provided with the region in question as an argument allowing you to customize the placeholder element per region.\n. @wrench13 thanks again for these, quick question which version of IE is this an issue in? Is it all of them?\n. BTW I ask because I'm currently considering dropping support for 9 as it's such a small user base now and most of the workarounds in the code are for IE9. I suspect this is a IE10  problem too reading some posts online. \nWhat are your thoughts on IE9 support, do you think it's still worth it, or is it better to move to IE10 as the base IE browser?\n. What do you think about dropping IE9 support @guillaumepiot?\n. OK excellent so I think as part of release 1.4 (so after the next minor release) we'll look to drop support for IE9 so that we can remove some of the workarounds currently in place for things like CSS class management.\nI'm away for a couple of days now but once I'm back I'll merge this and any other IE bug fixes in and they can go out in the next patch release (1.2.3).\n. Thanks again @wrench13 :+\n. Hi @wrench13 - in the end I've used your pull request to write a general function for getting the scroll position cross browser (just figure it's bound to be useful for other tools). Thanks again for your help here.\n. Hi @iamryandrake - the approach ContentTools uses is different from other editors and makes this difficult to achieve, you can read a more in-depth response to this questions in issue #11 and further discussions on enhancements made around the issue #41.\n. Hi @marc-drulot,\nSo at the moment content tools doesn't provide support for;\n- sub regions (regions within in regions as you're describing above) or,\n- creating regions dynamically.\nThis is something that's been discussed as is a long term goal for the library (see issue #183). Some users such as @bfintal have also added support for this functionality to their editors though it's not a simple undertaking.\n. Hi @richardprice,\nAs you've highlighted this behaviour is caused by binding to the save event multiple times. It looks as if you are using an older version of the library as bind is no longer the correct method call and addEventListener should be used (this changed occurred in release 1.2.0).\nIn the releases prior to 1.2.0 you can use the unbind(eventName, func) to remove a previous binding however I'd recommend you update your library and that you checkout the documentation for the new event methods http://getcontenttools.com/api/content-tools#component-ui, see:\n- component.addEventListener(eventName, callback)\n- component.createEvent(eventName, detail)\n- component.dispatchEvent(ev)\n- component.removeEventListener(eventName, callback)\n. Hi @richardprice - there's no officially documented way but actually it's pretty simple to do at the moment:\njavascript\nif (editor._binding['eventName'] && editor._binding['eventName'].length > 0) {\n    ...has event binding for eventName...\n}\nIf you do upgrade to the latest version of the library then take a look at the getting started and saving strategies pages again.\n. @themoor88 thank you :)\n. @l2aelba can I confirm you solved your issue?\n. OK I'm not entirely sure from your code what you're attempting to do but if you want to perform an action when the editor is started you could listen for the start event (documented here: http://getcontenttools.com/api/content-tools#editor-app)\nJavaScript\neditor.addEventListener('start', function (ev) {\n    ...add your new elements...\n});\nHowever this wont directly solve the issue because you're adding new content to the page that the editor doesn't know about (the editor selects DOM regions when the init method is called), to solve that you'd need to do the following:\nJavaScript\neditor.addEventListener('start', function (ev) {\n    ...add your new elements...\n    @_domRegions = document.querySelectorAll('[data-ce]');\n});\nHowever this will occur each time the editor is started (so new content will be created each time the edit button is clicked), so if you just want the editor to look for new editable regions whenever the edit button is clicked then you could just do:\nJavaScript\neditor.addEventListener('start', function (ev) {\n    @_domRegions = document.querySelectorAll('[data-ce]');\n});\n. Hi @Eeliya please provide the full traceback from the console if possible, also can you provide the steps or code required to reproduce the bug.\nEDIT: Can you include the src as well so I can reproduce.\n. @Eeliya thanks I'll push a fix for this shortly.\n. A fix for this has now been pushed.\n. Hi @jonathandion - your going to have to provide a bit more information I'm afraid, can you provide a copy of the HTML before the edit button is clicked and after?\n. @jonathandion is this before or after?\n. OK can you send the HTML before and your code to initialize the editor?\n. Thanks - looks like it may not be coping with the empty  tags I'll take a look and see if I can reproduce.\n. @jonathandion ok so re. the issue you're reporting I can't reproduce this I'm afraid - I've copied the before HTML you sent me into the sandbox HTML example provided in the library it works as expected and shows the correct number of paragraph tags so my best guess is that somehow something is getting duplicated as part of your integration code. I'm happy to keep looking and to concede it maybe a bug with the library but at this point I need more also, ideally I need you to reproduce the error using the sandbox example and send me the code so I can reproduce the error for myself and track down the problem code.\nRe. your question regarding callbacks the editor is set to ready once the init method is called and when stopped (via the stop method), I'm happy to consider adding a init event for the editor so that you can bind to it using the addEventListener (there is already a stop event) but would like to understand what you're are trying to achieve a little better before I recommend a solution.\n. @jonathandion instead of triggering a click against the ignition switch you could call start against the editor and manually change the state of the switch, for example:\nJavaScript\neditor.start();\neditor.ignition().state('editing');\nWould that help?\n. Hi @jonathandion thanks for your input, can you describe when it triggers and when it doesn't? I'd like to identify if there's something that can be done to improve things here.\n. Hi @l2aelba,\nThe <HR> element is a block level element and therefore the editor want handle it as part of the contents of a text element (see the first note here: http://getcontenttools.com/api/content-select).\nYou'd need to create a custom element class/type to do this ideally, unfortunately there's no tutorial about doing this though I've been working through this task with a friend recently and hope to be able to provide an example in the not too distant future. In the mean time you could take a look an existing element class such as the Static class as a basis for writing your own.\nFor the tool you'd have to look to split the paragraph into 2 elements inserting the horizontal rule between them, if you look at the code for the return key here this is a pretty good example on where to get started.\n. Because you've made it a static element (statics can't be interacted with for the most part) - you would need to create a custom element type for hrs.\n. Hi @AndreasFurster thanks for the interest in CT and sorry for the slightly delayed response,\nAs far as I'm aware there are a number of people using ContentTools in their own personal CMS projects, there's a couple of integrations to existing frameworks and there's one small CMS project that's open source. The CT site itself and several other small sites I've developed are built using the techniques I've discussed in the Saving strategies tutorial and maybe a useful starting point for your project. \nThe team here is also currently working on a Flask based OpenSource CMS that will hopefully be release before the end of the year - but it will be of the bigger variety.\nIntegrations\n\nDyango (https://github.com/Cotidia/django-contenttools-demo)\nYII (http://www.yiiframework.com/extension/yii2-content-tools/)\nWordpress (https://pagebuildersandwich.com/)\n\nCMS projects\n\nLights (https://github.com/bedriva/lights)\n\nHope that helps.\n. Hi @shchedrakov and thanks for your interest.\nContentEdit doesn't recognize col elements I'm afraid, I never added support for them so it's simply ignores them when parsing the table element here: https://github.com/GetmeUK/ContentEdit/blob/master/src/scripts/tables.coffee#L87.\nIt wouldn't be too hard to add support for a col editable element I imagine (though as they're invisible it might be better to make them a property of tables) and I'd be very happy to include this in the core library if some one did. I'll flag as an enhancement request for now though in all honesty it's going to be some time before I get to it given the currently scheduled enhancements.\n. @shchedrakov looking at the col specs (https://developer.mozilla.org/en/docs/Web/HTML/Element/col) it looks like the width attribute you're using it for here is now obsolete and that for the most part col is used for setting the number of columns spanned given that I'm not sure it's much benefit over just setting the colspan attribute. Thoughts?\n. @sticklvl thanks for reporting this and for the information/fix will post a patch shortly.\n. @l2aelba so short answer at the moment this isn't possible, but I think it needs to be so I'm going to tag this as an enhancement and prioritize it hopefully for the next release.\n. Hi @l2aelba,\nOK so the new release is out and it's now possible to modify the StylePalette.styles method to support whatever selection mechanism you want. For the example you've described you might take an approach similar to this:\n``` JavaScript\nvar largeText = ContentTools.Style('Large text','text-large', [{'tagName': 'p'}]);\nvar largeButtonStyle = ContentTools.Style('Large button','button-large', [{'type': 'Button'}]);\nContentTools.StylePalette.add(largeButtonStyle);\nContentTools.StylePalette.styles = function (element) {\n    // If no element is provided return all styles  \n    if (element) { return this._styles.slice() }\n// Build a list of applicable styles\nvar styles = [];\nfor (var i = 0; i < this._styles.length; i++) {\n    var style = this._styles[i];\n\n    // Check if the style is applicable to all elements\n    if (!style._applicableTo) {\n        styles.push(style);\n        continue;\n    }\n\n    // Check if the style is applicable to this element\n    for (var j = 0; j < styles._applicableTo.length; j++) {\n        var applicableTo = styles._applicableTo[j];\n        if (applicableTo.type && applicableTo.type === element.type()) {\n            styles.push(style);\n            break;\n        } else if (applicableTo.tagName && applicableTo.tagName === element.tagName()) {\n            styles.push(style);\n            break;\n        }\n    }\n}\n\n};\n``\n. Hi @l2aelba I haven't tested the code I must admit, thestyles = function(element) { ... }overrides the standardstylesmethod to add support for selecting styles either by atagNameor optionally by atype(where type is the type of element - all element classes have atype` method which should return by default their class name but this does need to be defined by you in your Button class).\nI did spot an obvious issue in the code which I've just updated (was specifying typeName not tagName.\nThe code above should only return all styles if they all match, can you send me the styles you've set up and I'll take a look, if the issue isn't obvious I'll test this in the sandbox later this evening to check the code is solid.\n. Hi @nXu thanks for the information.\nI've tried to reproduce this error as you've described a couple of times now both using the sandbox in the repo and demo page on the website but I'm unable to. This doesn't mean this isn't a bug though just that I can't reproduce it to fix, can you provide me with:\n- Any error information output to the console during your editing session.\n- Can you try to reproduce with the sandbox or demo editors and if you can send me instructions on how to do so so I can track it down.\nThanks for your help in advance.\n. @concept-core if you're able to reproduce the area @concept-core please let me know (ideally using the demo or sandbox page) as we weren't able to making it difficult to follow up on this.\n. Closing as we don't have a reproducable error report but if someone can reproduce the error and provide steps for doing so that would be a big help and I'll re-open the issue.\n. Hi @andreygolovin - thank you highlighting this issue and contributing a patch.\n. Hi @jedidas - thanks for your interest and kind comments.\nThis feature isn't available currently but is planned (see issue/feature #13). However in the mean time as a work around you could try the following approach:\n``` javascript\nfunction addNewRegion(domRegion) {\n    // Add a new region to the editor\n    var editor = ContentTools.EditorApp.get();\n// Add the region to the editor\neditor._domRegions.push(domRegion)\n\n// If the editor is not 'editing' we're done\nif (!editor.isEditing()) {\n    return;\n}\n\n// Initialize the new region\nvar name = domRegion.getAttribute(editor._namingProp);\nif (!name) {\n    name = editor._orderedRegions.length;\n}\n\neditor._regions[name] = new ContentEdit.Region(domRegion);\neditor._orderedRegions.push(name);\n\n// Store the date at which the regions was last modified (used when saving \n// to check for changes).\neditor._regionsLastModified[name] = editor._regions[name].lastModified();\n\n} \n```\nSo in using this code you create your new region element and add it to the DOM, then send a reference to it to the addNewRegion method. I haven't tested the code scavenged directly from the editor init and start methods so it should work - let me know how you get on :)\n. Hi @danielrob - the latest release - 1.2.5 looks to resolve this issue some what, whilst you shouldn't call init consecutively you can now call the editor.syncRegions() method which will pick up additional regions/fixtures.\nThe only caveat is that you will either need to specify a query string on init (e.g editor.init('.editable') ) or provide a new set of regions when calling syncRegions (e.g editor.syncRegions(myDomElements)).\n. Yep I agree with this, I've had a couple of CDN providers contact me an offer a free account to host the project as it's Open Source so I'll take a look over them this weekend and see about hosting the releases on a CDN.\n. Sweet thanks I'll do that :+1: \n. @concept-core took your advice thanks and have submitted a pull request for inclusion on jsdelivr so I'll update and close this issue when/if the project gets approved and included. Hopefully I got my pull request correct!\n. Hi @concept-core, I'm afraid I'm not familiar with kcfinder at all but with a bit of luck someone here has and can be able to help. You might have more luck posing this question on StackOverflow though.\n. Hi Wouter,\nIf you want to detect a double-click against images one approach would be to do the following:\n``` JavaScript\nContentEdit.Root.get().bind('mount', function(elm) {\n    // We're only interested in images\n    if (elm.type() != 'Image') { return; }\n// Add an event listener for double clicks\nelm.domElement().addEventListener('dblclick', function(ev) {\n    ...call kcfinder...\n});\n\n});\n```\nLet me know if that's of any use?\n. Sure I'll be around tomorrow afternoon and evening, my skypename is anthonyblackshaw, if you add me we can try and touch base tm.\n. OK so here's an example of a base integration which I'm hoping you can test for me and that we can improve on once we have it working in it's simplest form:\n``` JavaScript\n// So this little bundle of variables is required because I'm using CoffeeScript\n// constructs and this code will potentially not have access to these. Longer \n// term we can look to bring this into the core library as an integration option\n// and rewrite it in CoffeeScript but (despite appearances) this is probably\n// easier for the moment as you're not used to CoffeeScript.\nvar slice = [].slice,\n__indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n__hasProp = {}.hasOwnProperty,\n__extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super = parent.prototype; return child; },\n__bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n// Define out KCFinder image tool\nvar KCFImageTool = (function(_super) {\n    __extends(KCFImageTool, _super);\nfunction KCFImageTool() {\n  return KCFImageTool.__super__.constructor.apply(this, arguments);\n}\n\n// Register the tool with ContentTools (in this case we overwrite the \n// default image tool).\nContentTools.ToolShelf.stow(KCFImageTool, 'image');\n\n// Set the label and icon we'll use \nKCFImageTool.label = 'Image';\nKCFImageTool.icon = 'image';\n\nKCFImageTool.canApply = function(element, selection) {    \n    // So long as there's an image defined we can alwasy insert an image\n    return true;\n};\n\nKCFImageTool.apply = function(element, selection, callback) {\n\n    // Configure the KCFinder application\n    window.KCFinder = {\n        callBack: function(url) {\n            // Once the user has selected an image insert it\n\n            // Create the image element\n            var image = new ContentEdit.Image({src: url});\n\n            // Insert the image\n            var insertAt = KCFImageTool._insertAt(element);\n            insertAt[0].parent().attach(image, insertAt[1]);\n\n            // Set the image as having focus\n            image.focus();\n\n            // Call the given tool callback\n            return callback(true);\n\n            window.KCFinder = null;\n        }\n    };\n\n    // Open the KCFinder\n    window.open(\n        '/demo/kcfinder/browse.php?type=files&dir=files/public', \n        'kcfinder_textbox',\n        'status=0, toolbar=0, location=0, menubar=0, directories=0, ' +\n        'resizable=1, scrollbars=0, width=800, height=600'\n    );\n\n};\n\nreturn KCFImageTool;\n\n})(ContentTools.Tool);\n```\n. Hi @makasanas,\nThis is perfect thank you - the solution is to hold the Ctrl-key down (Cmd on Apple) and click the (P)aragraph tool, this will create a new paragraph rather and converting the current editable block.\nThere's a note on it here on the demo page http://getcontenttools.com/demo#adding-and-converting-content\nDuplicate of https://github.com/GetmeUK/ContentTools/issues/114\n. Hi @bcreeves thanks for your interested in CT, take a look at this recent question https://github.com/GetmeUK/ContentTools/issues/197 which I think covers your question also. \nLet me know how you get on and if I can help further.\n. @bcreeves sorry completely missed this, not sure how. So yes what you'd ideally do is add a ContentEdit element to the ContentEdit region rather than a DOM element. For example:\nJavaScript\nvar p = new ContentEdit.Text('p', {}, 'My new paragraph');\nvar region = ContentTools.EditorApp.get().regions()['name_of_my_region'];\nregion.attach(p);\n. You're mixing DOM elements and ContentEdit elements here, so region is a ContentEdit element (or collection) that has child ContentEdit elements (like Text, Image, Video, etc). It doesn't know how to remove the DOM element you're selecting, you'd need to pass the detatch method the ContentEdit element.\nIf you want to find an element in the region using the associated DOM element you could do something like:\n``` JavaScript\nfindElementUsingSelector(region, selector) {\n    // Find a ContentEdit element within the region using a DOM selector\n    var targetDOM = region.domElement().querySelector(selector);\n    for (var i = 0; i < region.children.length; i++) {\n        var child = region.children[i];\n        if (child === targetDOM) {\n            return child;\n        }\n}\nregion.detatch(findElementUsingSelector(region, '#my-element'));\n```\nMoving back to your previous question, you can't add DOM elements into the DOM element representing the region, you can however create a DOM element, parse it using the correct class in ContentEdit, and add it to the region:\n``` JavaScript\n// Create an DOM element using innerHTML\nvar wrapper = document.createElement('div');\nwrapper.innerHTML = 'My new paragraph';\n// Convert the DOM element to a ContentEdit Text element\nvar p = ContentEdit.Text.fromDOMElement(wrapper.querySelector('p'));\n// Add the paragraph to the region\nregion.attach(p);\n```\n. Hi @hiepxanh,\nWhat part are you struggling with? For example have you got as far as being able to send the content from CT to the a view on the web server?\n. Hi @andreygolovin - thanks for the detailed report, I'll look to patch this today.\n. Hi @saso-petrov,\nThanks for your interest in CT. Regarding your question can you clarify it for me? Do you want to shrink the image in size (e.g width x height) client-side and then upload the image to the server before using the URL returned by the server to show the image in the CT image dialog?\nIf so, an example of client-side image manipulation was posted here: https://github.com/GetmeUK/ContentTools/issues/136 (thanks to @Qqwy).\nIn my implementations currently I reduce the size of the image server-side and store a copy of the original as well as the working draft (with an admittadly 'space is cheap so ehh...' attitude), this way I always have the original to use when creating resized versions of the image which provides the best output quality. If you haven't already looked it's worth checking out the Handling Image Uploads tutorial.\n. Hi @SimBioT1954,\nLine breaks / <br> tags may disappear if they are positioned at the start or the end of a block of text (other than pre-formatted text, e.g <pre> tags). This is because white-space is trimmed/stripped from the end of text block by default in ContentTools. There is a discussion regarding this behaviour here: https://github.com/GetmeUK/ContentTools/issues/113 and a related stackoverflow post detailing an approach to modify this behaviour should you wish to here: https://stackoverflow.com/questions/36883079/how-to-preserve-multiple-br-when-no-content-before-or-after-with-contenttools/36954440#36954440\n. Hi @rhnkyr - I'll try and help though abroad at the mo and my internet connection is patch at best and I'm using a borrowed netbook with an unfamiliar keyboard layout lol\nSo you seem to be trying to add a CSS class to an element whenever it's focused. You almost had it right in your original sample code but you're calling the addCSSClass method against the  ContentEdit namespace, it needs to be called instead against the element instance, so:\nJavaScript\nContentEdit.Root.get().bind('focus', function (element) { \n    element.addCSSClass('myClass');\n});\n. Thank you for your contribution @WebDevTmas.\nAs this is an external file (e.g in the external folder) the change also needed to be made to the ContentEdit library and I also wanted to make the same change to the variables within the _settings.scss file for CT. \nI've now made this change and the others mentioned as part of the latest release so I haven't merged in your pull request I'm afraid but thank you for submitting ityyy.\n. Hi @l2aelba thanks for this you've highlighted something I haven't come across myself previously.\nSo for scenarios where you have a significant number of styles I agree possibly a compact input option/component would be useful and I'm open for suggestions here. Select/options suffer the same problem as the scrollable on/off options above in that if you have a lot of them you'll need to scroll, they're also unintuitive (IMHO) when selecting multiple options (which is required to set multiple CSS classes).\nIn general with styles I try not to build a list of them in the way you've highlighted in your example, I instead try to keep styles to just the classes a user of the editor will apply in a given scenario (page/element) and give them names that are where possible semantically relevant, such as Quote, Byline, Note, etc. I realize everyone has there own way of doing these things but for the most part I general find few styles which a user may require in the editor are globally applicable to all pages and all elements of a site and that good organizations of those styles will often help keep the list of styles shorter (though this isn't always easy I confess), making it easier for the user and keeping the site's look'n'feel consistent. Move advanced users (such as developers) of course can always manually set styles against an element via the attributes tab. \nThis however is just my 2 cents I'm interested to hear how others are using the system.\n. I'm currently away (back on the 27th) so I'm unable to test but my first thoughts are that this behaviour might be down to the way contenteditable behaviour is implemented in each browser - I'll confirm this when I get back.\nIn the meantime does anyone have any thoughts on which is the correct behaviour and reasons for?\n. OK having tested myself the behaviour appears to be browser specific and occurs using contenteditable (e.g it's not specific to CT). In addition the behaviour only occurs when the cursor is positioned at the end of a block of text, if the cursor is placed at the end of a link within a text block (e.g surrounded by at least spaces on either side) then the behaviour is per the chrome example in both cases.\nAt this time I'm not going to attempt to resolve the behaviour between the browsers as it doesn't have a significant impact on a user's experience (e.g their ability to edit content) and the difference is in the way the browsers have decided to implement contenteditable (or possibly their selection behaviour). \n. Hi @mstojanovv,\nCan you provide a full stack trace from the browser console to help. My first thoughts are that when you upgraded to the latest version of the library you didn't upgrade your image uploader code, the libraries event system changed and this requires some minor changes to your image uploader code. The tutorial has been updated and should help you if this is the cause of the issue: http://getcontenttools.com/tutorials/handling-image-uploads\n. Hi @vudaltsov - thanks for the solid suggestion will add  this to the next release.\n. Short term I'd recommend either modifying the style during editing to remove the border radius (e.g ce-element-type-image border-radius: none !important;) or increase the value of the ContentEdit.RESIZE_CORNER_SIZE to compensate (e.g I your border radius is 15 consider setting this to 30 to compensate.)\nThese aren't ideal though so once I'm back from Mexico I'll have a think about how we might tackle this for the next release - open for suggestions.\n. Hi @oodavid - when you say the editor remains dormant are you referring to the state attribute of the editor (e.g isDormant() returns True) or is it just that the editor button is not displayed?\nIf it's the latter then this is because if the length of DOM elements selected is 0 initially the editor doesn't create the edit buttons - this is actually something that needs to be addressed moving forward with the syncRegions method so I'll mark this as an enhancement that I'll look to introduce in the next release.\nI think in either case as a simple short term option if you simply destroy and init the editor when goinf from no regions to some regions this will solve the problem.\n. OK so basically the previous releases would bail when there were no regions defined effectively preventing the editor leaving the DORMANT state as you specified. I've modified the init method now to always initialize the editor syncRegions is now responisble for hiding or showing the ignition switch depending on whether or not their are any regions defined.\nThe fix will be pushed shortly in release 1.2.6.\n. Hi Wouter,\nThe ratio is fixed by default and set by the size that you give the image when you create it, see here: https://github.com/GetmeUK/ContentEdit/blob/master/src/scripts/images.coffee#L16\nIf your creating the image dynamically in JS that means you'll need to set a width and height in the attributes, e.g:\nvar image = new ContentEdit.Image({src: '...', width: 400, height: 300});\nIf a width and height aren't set and the image is parsed from the page then the editor will query the size of the image in an attempt to set a width and height, see here: https://github.com/GetmeUK/ContentEdit/blob/master/src/scripts/images.coffee#L143\n. It (the image size) defaults to a minimum set by  ContentEdit.DEFAULT_MIN_ELEMENT_WIDTH (80 by default). You can't set a percentage I'm afraid.\nWhat is the problem you're having setting a width and height for the image? Are the diminensions not available to you?\n. @concept-core Did you have any luck with this?\n. Hi @concept-core, thanks for this, whilst the image upload code isn't part of the core library (or any of the libraries people implement there own) I think this is a really helpful snippet so I'll include it in the Image uploads tutorial on the site and credit you for the code. Thanks again :+1:\n. @concept-core the core code doesn't provide an image handler, there's a skeleton image handler in the demo that doesn't actually load an image (so not much use there) but there isn't an core image handler per ce.\n. @concept-core I could add the code above to the sandbox to show how to integrate KCFinder, especially if you fancy helping out with a tutorial about integrating KCFinder for the site ;)\n. Hi @queejie - my guess is that your changing the text in the opening paragraph (white text on blue), if this is the case then basically the reason is I use a reset style sheet for the website and haven't defined styles for the bold, italic or list items within the upper section of the site (e.g the text in blue). If you try again and modify text within the main article (e.g the white section) these styles should work fine.\nYou can modify the behaviours and tools available based on the selected element so as this feature becomes more established I'll look to use it to prevent this confusion moving forward.\nIf this isn't the case do let me know and I'll look into the issue further.\n. Hi @shawnlehner - can you confirm a couple of details for me?\n- Which version of CT are you using?\n- Are you pressing shift-enter in a text or preformatted text block (e.g <p> vs <pre> tag).\n- Does this behaviour occur for you when you use the online demo?\nI can't replicate this in my local sandbox or on the online demo but if you can then my guess is if that perhaps for a given OS and/or browser I'm not registering the shift key being held down. If so can you provide me with OS/Browser details so I can attempt to replicate?\nThanks in advance.\n. Ah I wasn't saving so on inspecting the element in edit mode the BRs are there. Will take a look at this now.\n. Quick experiment and I think the cause is that the shift+enter key isn't triggering a modify event against the text element so when you save it returns an out of date version of the content. Thanks for the spot. Will push out a fix in the next release tomorrow.\n. Hi @a-komarev - I think the behaviour you are describing is the expected/correct behaviour.\nContentTools doesn't use a diff to determine if the contents has changed instead it uses a timestamp against each region which records the last time the region's content was changed (tainted). This is the way many editors work I believe, for example the behaviour of sublime or LibreOffice Writer is the same.\nReverting with Undo sets the modified timestamp for the effected region back to the the timestamp at the point the history snapshot was taken and so if you undo all changes then the timestamp will be reset to the initial timestamp and the editor will know that no changes have occurred.\n. Thanks for the detailed post @a-komarev :+1: \nI do want to provide placeholder text to indicate where to start editing in an empty region and/or text element and I was think along the same lines as we do for table cells where we use the ellipsis (...), e.g:\n\n\n\nI want to use the CSS :empty pseudo-class to set the placeholder for an empty text element and will allow the placeholder (...) to be overridden by setting a data-ce-placeholder attribute (e.g content: attr(data-ce-placeholder); in CSS puesdo class).   \nI'm opposed to adding a button into the page as a core principal of CT is that the page should as far as possible look identical to the non-editable version of page. But it's a balance and there is a usability issue here, especially with regard to how to add a new paragraph after an image (a question which pops up often). \nInitially before I look to add additional control elements to the page/editor I want to modify the editor so that when an image is selected pressing enter/return should create a new paragraph.\nI'm open to further discussion and suggestions on the task at hand.\n. @a-komarev I agree I'm not sure that pressing enter will be obvious to everyone. As I say I'm not keen on the extra button in the the page itself but sounds like I need to take a bit more time to look into a solution for this.\nIn the next release I'll make sure I add the enter button and placeholder text and leave the issue open for further review. Would appreciate your feedback on this once it's available.\n. I've made the changes I described (shortly to be published in release 1.2.7), but I'm not closing the issue at this point as this is just a first step, for the same reason I've moved this issue out of the Release 1.2.7 milestone which will be closed shortly.\n. I've not had any further feedback on this enhancement so I'm closing it for the moment, but happy to re-open if more support for the changes is forthcoming.\n. Hi @a-komarev,\nFrom your description it sounds like the problem your trying to solve is that the ignition (edit buttons top-left) isn't changing state to reflect the state of the editor when you manually start the editor. This is because the ignition is set up to drive the state of the editor not the other way around, so you will need to either trigger an start with the ignition or manually change the state of the editor, for example:\n``` JavaScript\neditor = ContentTools.EditorApp.get()\n// Option 1 -Trigger start with the ignition\neditor.ignition().start();\n// Option 2 -Manually change the state of the editor and ignition\neditor.start();\neditor.ignition().state('editing');\n```\n. @a-komarev there's no specific reason other than this keeps things loosely-coupled, at the moment the editor binds to the ignition events and reacts to those by starting and stopping/saving but the ignition switch itself knows nothing about the editor. Does that help?\n. @afzaalace  Do you want it to appear disabled or to be hidden?\n. OK to not generate it in the first place you need to modify the EditorApp class and remove the ignition, it's not difficult to do this but might be a step further than you want to go. \nThe simplest option is to hide it with CSS, e.g .ct-ignition { display: none !important; }, feels a little hacky but it wont do any harm if hidden.\nA number of people have asked about hiding/removing the ignition switch now so I think I'll post an enhancement request for this feature, just a flag you can set against the EditorApp class before/when you initialize it.\n. @afzaalace cool :+1:  I think a flag is the way to go, even on our own projects we quite often modify the ignition or hide it to integrate more consistently with another tool.\n. @a-komarev, @afzaalace you can now initialize the EditorApp class without the ignition component using the withIgnition flag, e.g:\nJavaScript\nvar editor = ContentTools.EditorApp.get();\neditor.init('[data-editable], [data-fixture]', 'data-name', null, withIgnition=false);\n. @a-komarev if you don't create the ignition component then the ignition() method will return null. Without the ignition component you must start/stop the editor manually.\n. Hi @damiansb thanks for the kind words.\nRe. Adding a class when editing\nIdeally I wouldn't have CT modify the any elements outside of the ct-app, and similarly with ContentEdit classes are only applied to elements managed by the library.\nHaving said that for individual integrations I can certain imagine a number of ways in which this might be very useful. My recommendation for the moment would be to simply add the class as part of the editor start/stop process like so:\n``` JavaScript\nvar editor = ContentTools.EditorApp.get();\n// Add a class to the body when the editor is started...\neditor.addEventListener(\n    'start', \n    function() { \n        document.body.classList.add('editing'); \n    }\n);\n// ...remove the class when the editor is stopped. \neditor.addEventListener(\n    'stop', \n    function() { \n        document.body.classList.remove('editing'); \n    }\n);\n```\n. HI @shawnlehner - there's a stackoverflow post which includes a description on why this is the default behaviour and instructions on patching the editor to modify this behaviour if you need to (http://stackoverflow.com/questions/36883079/how-to-preserve-multiple-br-when-no-content-before-or-after-with-contenttools/36954440#36954440)\nMy recommendation however would be to use CSS and not additional line-breaks or paragraphs to add extra space between elements in scenarios where the default spacing for an element needs to be overwritten. For example:\ncss\n.mind-the-gap {\n    margin-bottom: 40px;\n}\nJavaScript\nContentTools.StylePalette.add([new ContentTools.Style('Mind the gap', '.mind-the-gap')]);\nYou'll then be able to apply the .mind-the-gap class to any editable element (other than static elements) within a region (e.g via the inspector bar > properties dialog > style tab).\n. Hi @themoor88 - to add a paragraph after preformatted text hold down the ctrl key (command on Apple) whilst clicking the paragraph tool.\n. OK I'm using on a documentation project and just tested it on the sites demo page so my guess is perhaps this is an issue specific to one or more OS/browser types/versions. Can you let me know what OS/browser you're using and I'll try to reproduce the issue.\nIn the meantime if you want a quick work around create a new paragraph with some content in it above the preformatted content block and drag the new paragraph below it - not ideal but a short term option.\n. No problem, I'll have access to a mac in the office tomorrow running the same OS and browser so will try to reproduce there (I suspect I'm not detecting the command key on OSX correctly). If I can reproduce I'll flag as a bug and push a fix in the next release (planned early next week).\n. @jonolock91 - hey buddy any chance you can check this for me when you get a mo and let me know if you get the same problem, if so can you take a look at the why CT is failing to register the command key as pressed (or at least confirm that's the cause of this bug)? \n. Hi @Rverm are you looking to build the media manager yourself or are you thinking about integrating an external media manager (such as KCFInder). The reason I ask is that @concept-core is currently looking at creating a tutorial to cover KCFinder integration which supports selecting from an existing folder/list of images.\n. Good spot @damiansb :+1: Will push a fix in the next release (early next week).\n. Hi @sbotting,\nSo what's happening here is that the div isn't registered as an editable tag and so is converted to a static tag with the editable region. While you can place content around static elements you can't edit them or their contents - in the case the paragraph tag inside.\nThe simplest solution here is to move the editable region to the inner div, for example:\n<div>\n    <div data-editable data-name=\"content\">\n        <p>\n            Some content and <a href=\"#\">a link</a>\n        </p>\n    </div>\n    ... If you have more sections you want to make editable within the same outer div\n    add another region...\n    <div data-editable data-name=\"other-content\">\n        <p>\n            Some content and <a href=\"#\">a link</a>\n        </p>\n    </div>\n</div>\n. @sbotting no problem the most relevant documentation is here: http://getcontenttools.com/api/content-edit#tag-names\nI'm not sure however the approach you mentioned will work with CT simply because regions are the only editable tag type that can support an unstructured collection of editable elements (e.g a div with children as opposed to lists or tables with defined structures). Regions can't be nested within each other and therefore you need to define each such region a separately editable region.\n. That's correct.\nOn a related note - the span tag is also not an editable tag by default, typically only block or inline-block elements are encapsulated by the ContentEdit.Element classes (e.g ContentEdit.Text in this case), but you can have inline elements/tags within their content (like spans), so in the example above you should either wrap/replace the span in/with a paragraph tag (e.g a block level element) or let CT know that the span should be handled as a paragraph tag which you can do as follows:\n<span class=\"caption\" data-ce-tag=\"p\">Caption Underneath Image</span>\nNo worries on the help :) I'm grateful to devs like yourself investing their time in CT. Its a relatively young library and we're releasing almost weekly so there's not the knowledge base of articles and tutorials that there is with longer established libraries so I'm keen to fellow devs out and it helps me identify improvements and new features.\n. Cool :) In the case above you don't need the data-ce-tag=\"p\" against the span as that's a valid element inside a Paragraph.\n. @mattsah ContentFlow provides a way of laying out page content using predefined snippets of HTML, these snippets can have editable regions & fixtures, and each snippet can be configured using settings to provide flexibility over the snippet's HTML (for example we often have a setting to control whether a block of text is followed by a CTA (call to action) / button).\nSnippets can also contain content flows (the can also have editable regions & fixtures at the same time but not within the flow itself). When a content flow is defined within a snippet it will appear as a new flow in the drop-down at the top of the snippet draw, you can then select it and insert snippets of content into that.\nThere are numerous things we use this dynamic flows approach for, we're currently experimenting with building a form builder using this approach and we frequently use it to build things like image carousels where we want to repeat a very specific section of content (in the case of a carousel we use a snippet with an image fixture and text (caption) fixture to in a snippet that lays out a single slide).\n. The example you've provided would allow you to add content editable snippets into the two columns, other than the flows need custom names, such as: column-1 and column-2.\nInitially you might want to consider inserting default snippets into both flows so that the user can immediately edit content in them (but that's something for the server side). We often setup default snippets in flows to help with page layout.\nIn effect (and I think this is what you suspected) ContentTools doesn't know anything about ContentFlow, ContentFlow is responsible for building the page layout, then when you're done you switch to edit mode for ContentTools. ContentTools sees the page generated by ContentFlow in the same way it would see any HTML page.\n. While the editor is in the editing state you can get the content for any region like so:\n``` JavaScript\nvar regionHTML = editor.regions()['region-name'].html();\n``\n. Well actually once youinitthe editor you will be able to access the HTML as per my previous comment, the only reason I mentionededitingstate is you can't trigger the save event unless you're in the editing state. \n. I'll look to get a fix out in the next release but sounds like I need to check that only the shift key is down before starting the region outline flash. Thanks for the detailed description :+1: \n. @a-komarev it allows you to visually highlight the editable regions on a page, so if you want to know what can be edited (without starting the editor even) you just hold down shift. \n. @a-komarev sure calleditor.hightlightRegions(true)sendfalse` to disable.\nThe feature/purpose is documented on the demo page second paragraph - Editable regions. In a lot of cases (like the demo page) I guess it's not that useful because almost everything editable is obvious, we've tended to find if useful on pages where only small sections of content are editable, like a product listing page where only a delivery notice top right can be edited in page (that sort of thing).\n. This is now fixed in the develop branch.\n. Hi @Rverm, the inspector bar doesn't display inline tags as is (e.g tags within a paragraph or other textbox). You currently need to add the style manually by viewing the code tab in the properties dialog for the parent element and adding the class against the tag in the HTML.\nCan you describe your use case? If you're looking to insert a button styled link for example then creating a tool to do this might be a simple option.\n. Do you want the link/button to be inside the paragraph or sit at the same level as the paragraph, e.g:\nhtml\n<p>foo</p>\n<p><a href=\"...\" class=\"btn\">Bar</a></p>\nor \nhtml\n<p>foo</p>\n<a href=\"...\" class=\"btn\">Bar</a>\n. Hi @Rverm sorry for the late reply, there are a number of ways to approach this, I think the nicest approach for your user's is a custom tool (though it does feel a little overkill for the situation). The following code mocks up a Button link class you could use as a basis (it's heavily based on the link tool - just cut down some what):\n``` CoffeeScript\nclass ContentTools.Tools.Button extends ContentTools.Tools.Bold\n# Insert a button link.\n\nContentTools.ToolShelf.stow(@, 'button')\n\n@label = 'Button'\n@icon = 'link' # Or set a custom one\n@tagName = 'a'\n\n@getAttr: (attrName, element, selection) ->\n    # Get an attribute for the element and selection\n\n    # Find the first character in the selected text that has an `a` tag\n    # and return the named attributes value.\n    [from, to] = selection.get()\n    selectedContent = element.content.slice(from, to)\n    for c in selectedContent.characters\n        if not c.hasTags('a')\n            continue\n\n        for tag in c.tags()\n            if tag.name() == 'a'\n                return tag.attr(attrName)\n\n    return ''\n\n@apply: (element, selection, callback) ->\n    applied = false\n\n    # If the selection is collapsed then we need to select the entire\n    # entire link.\n    if selection.isCollapsed()\n\n        # Find the bounds of the link\n        characters = element.content.characters\n        starts = selection.get(0)[0]\n        ends = starts\n\n        while starts > 0 and characters[starts - 1].hasTags('a')\n            starts -= 1\n\n        while ends < characters.length and characters[ends].hasTags('a')\n            ends += 1\n\n        # Select the link in full\n        selection = new ContentSelect.Range(starts, ends)\n        selection.select(element.domElement())\n\n    # Text elements\n    element.storeState()\n\n    # Add a fake selection wrapper to the selected text so that it\n    # appears to be selected when the focus is lost by the element.\n    selectTag = new HTMLString.Tag('span', {'class': 'ct--puesdo-select'})\n    [from, to] = selection.get()\n    element.content = element.content.format(from, to, selectTag)\n    element.updateInnerHTML()\n\n    # Measure a rectangle of the content selected so we can position the\n    # dialog centrally.\n    domElement = element.domElement()\n    measureSpan = domElement.getElementsByClassName('ct--puesdo-select')\n    rect = measureSpan[0].getBoundingClientRect()\n\n    # Set-up the dialog\n    app = ContentTools.EditorApp.get()\n\n    # Modal\n    modal = new ContentTools.ModalUI(transparent=true, allowScrolling=true)\n\n    # When the modal is clicked on the dialog should close\n    modal.addEventListener 'click', () ->\n        @unmount()\n        dialog.hide()\n\n        if element.content\n            # Remove the fake selection from the element\n            element.content = element.content.unformat(from, to, selectTag)\n            element.updateInnerHTML()\n\n            # Restore the selection\n            element.restoreState()\n\n        callback(applied)\n\n    # Dialog\n    dialog = new ContentTools.LinkDialog(\n        @getAttr('href', element, selection),\n        @getAttr('target', element, selection)\n        )\n\n    # Get the scroll position required for the dialog\n    [scrollX, scrollY] = ContentTools.getScrollPosition()\n\n    dialog.position([\n        rect.left + (rect.width / 2) + scrollX,\n        rect.top + (rect.height / 2) + scrollY\n        ])\n\n    dialog.addEventListener 'save', (ev) ->\n        detail = ev.detail()\n        applied = true\n\n        # Clear any existing button link\n        element.content = element.content.unformat(from, to, 'a')\n\n        # If specified add the new button link\n        if detail.href\n\n            # Set the CSS class for styling the button link\n            detail['class'] = 'button'\n\n            a = new HTMLString.Tag('a', detail)\n            element.content = element.content.format(from, to, a)\n            element.content.optimize()\n\n        element.updateInnerHTML()\n\n        # Make sure the element is marked as tainted\n        element.taint()\n\n        # Close the modal and dialog\n        modal.dispatchEvent(modal.createEvent('click'))\n\n    app.attach(modal)\n    app.attach(dialog)\n    modal.show()\n    dialog.show()\n\n```\nYou can find more a detailed explanation on how to add tools to your toolbox in the Adding new tool tutorial, if you have time it's not a bad idea to read through this if you're making custom tools. \nIf your not using CoffeeScript (which I recommend if you're creating custom tools but it's not required), then the code above be converted to JS as a starting point here http://js2coffee.thomaskalka.de/#coffee2js though the output cans seem a little cryptic at first.\n. @Rverm let me know how you get on :)\n. This is now in develop branch.\n. @etlel can you provide steps to reproduce please - not quite sure what a blank edit it?\n. @etlel no worries have spotted, if I just keep saving without making any changes the count goes up by 1,000 for me, will review. \n. This issue is actually a more serious issue in that ordered regions aren't being reset on init - will push a fix in the next hour.\n. OK this issue is now fixed on master will assign to next release (so part of the release cycle next week).\n. Hi @themoor88,\nWhen/where is your code above being applied to trigger after an image upload? Is it within your ImageUploader code?\n. In that case you'll have access to the newly created image element I assume, so instead of finding the last element in the region per your code sample if you send the new image element to the paragraph tool the new paragraph will be created after the new image. \n. Hi @concept-core,\nThis has some cross-over with issue #47. I agree an example/demo plugin for CT would be useful inclusion (similar to the ImageUploader example code).\nThis is however quite a big task to undertake as there's currently no set workflow for plugins within the CT user interface (so we'd need to come up with one) and no established approach for creating a plugin (which hopefully a demo would provide at least in part).\nI'm happy to open up that discussion here (moving it from #47) and it would be great if anyone who is developing plugins for CT at the moment could chime in with their thoughts/wishes on the matter.\n. Hi @Macs75,\nThanks for the kind words :+1: I'd recommend overriding the existing table tool to do this, for example:\n``` CoffeeScript\nclass ContentTools.Tools.BootstrapTable extends ContentTools.Tools.Table\n# Insert/Update Bootstrap table\n\nContentTools.ToolShelf.stow(@, 'table')\n\n@_createTable: (section, columns) ->\n    table = ContentTools.Tools.Table._createTable(section, column)\n    table.addCSSClass('table')\n    return table\n\n```\nAnother option would be to listen for the attach event and ensure the table has that class:\n``` JavaScript\nContentEdit.Root.get().bind('attach', function(element) {\n// We're only interested in tables\nif (element.type() !== 'Table') {\n    return;\n}\n\n// Add the table class to table\nelement.addCSSClass('table')\n\n});\n```\nDespite the above options I think supporting for a way to define defaults for elements when added could be very useful, so I'm going to tag this as an enhancement as well.\n. @Macs75 Typing faster than I can think, you are entirely correct, I've updated the code in my previous comment.\n. @Macs75 at the moment there isn't an out of the box solution for layouts of this sort dynamically. There's some discussion on this here #13 and this is a planned enhancement. Some (@bfintal) have already added support for manageable grid layouts as extensions to CT, so depending on how soon you need it - developing a bootstrap style grid element for ContentEdit could be an option.\nOne option available now would be to split your content into multiple regions, for example:\nhtml\n<div>\n    <div data-editable data-name=\"main-content-1\">\n        <blockquote>\n            Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.\n        </blockquote>\n        <p>John F. Woods</p>\n    </div>\n    <div class=\"row\">\n         <div class=\"col-md-7\" data-editable data-name=\"main-content-2\"> \n              <table class=\"table table-bordered\">\n                  <tr>\n                        <td>123455</td>\n                        <td>ABCDEF</td>\n                  </tr>\n              </table>\n         </div>   \n    </div>\n</div>\n. @itsmelion specifically for the case in question if you wanted to rely on ContentTools to ensure rel=\"external,nofollow\" is always in place then the simplest option would be to define your own link tool (based on the existing one but modifying the code here: https://github.com/GetmeUK/ContentTools/blob/master/src/scripts/tools.coffee#L364 to include element.a.ref = 'external,nofollow'). \nLinks are a bit of a special case here because they're not an ContentEdit element type they only exist as elements within the contents of a ContentEdit.Text element so there's no simple way to set set a default for them - though I can see the need here and think this might be something to look at as a future feature. \n. Hi @SimBioT1954,\nThis is something I typically do on sites also, it can be achieved as follows:\nJavaScript\nContentTools.Tools.Heading.tagName = 'h2';\nContentTools.Tools.Subheading.tagName = 'h3';\n. Hi @indyrk - thank you for the kind words.\nI've only worked with bootstrap maybe twice on projects and so I'm not very familiar with it (especially the current version, that was all back on bootstrap 2).\nIt sounds a little like it might be a z-index issue, is there any way you can provide a link to review so I can have a look and see if I can help?\n. Hi @indyrk take a look at this issue https://github.com/twbs/bootstrap/issues/19850\nIt appears that by default Boostrap doesn't allow input elements that aren't a descendant of of the modal dialog to receive focus (by design), and that this is a problem for lots of 3rd party libraries. All CT elements render into an element <div class=\"ct-app\"></div> in the body of the page and therefore are not a child of the dialog.\nThe issue I reference explains that you need to override (exempt) the enforceFocus method of the modal class and provides examples for various versions of bootstrap.\nLet me know if that fixes the issue.\n. Hi @QuantumRevenger,\nThere's a detailed tutorial about Handling image uploads provided on the site, it includes information both on creating a custom image uploader and integrating one. In addition there is a template for a ImageUploader class and an example handler for Cloudinary in the src/sandbox folder for the project.\nTo tell ContentTools to use your image handler you need to assign a function to the namespace that will set up your image handler when called, in the tutorial we pass a function that simply binds to the relevant events, in the sandbox ImageHandler we use a class method that returns an instance of the class, e.g: \nJavaScript\nContentTools.IMAGE_UPLOADER = ImageUploader.createImageUploader;\nIt's possible to define the tools visible in the toolbox at any time like so:\n``` JavaScript\nvar editor = ContentTools.EditorApp.get();\n// Only show the undo, redo and remove tools\neditor.toolbox().tools([['undo', 'redo', 'remove']])\n```\nIt you look here http://getcontenttools.com/api/content-tools#settings you can see how the default tools are structured and how to set up your own.\nIf you want to call a tool directly you can do so like so:\n``` JavaScript\n// Get the bold tool\nvar boldTool = ContentTools.ToolShelf.fetch('bold');\n// Find the currently selected element and text selection (if there is one, you can specify any\n// element/selection you want of course).\nvar element = ContentEdit.Root.get().focused();\nvar selection = null;\nif (element && element.selection) {\n    selection = element.selection();\n}\n// Apply the tools\nboldTool.apply(element, selection, function(applied) {\n    // This callback is optional, applied tells you whether the tool was applied or not, for example it\n    // the user is setting a link or uploading an image they may cancel the action in which case\n    // applied would be false.\n})\n```\n. @QuantumRevenger I did review several such tools before launching the project, I hadn't if I'm honest considered that people would hook into a specific documentation format such as the one you mention in their IDE and that is a good argument for using using such a format.\nThe reason I didn't select a documentation tool/format at the time was that I simply felt documenting the tool by hand using CT would give me more control over the end result. I actually like writing documentation in a rich environment and dislike the use of markdown or other such verbose formats in code comments as I feel they can obscure the code making it more difficult to read. \nThat's not to say I don't comment my code, I do, but I like the presentation of the comments to aid not hinder the flow of code. For example some of the snippets presented here http://usejsdoc.org/about-namepaths.html (particularly the last one) - seem to make the code less readable to my eyes.\nSo I'm on the fence, I'm happy to discuss further, and I think you make a valid point re. IDEs that integrate with such tools/formats.\n. Having looked through some of the examples in more detail I have to say for the most part http://usejsdoc.org/ isn't overly verbose in most cases (I picked a bad example in my previous comment).\n. @guillaumepiot I remember your integration of CT supports loading background images, any chance you can describe the approach you used?\n. Thanks @guillaumepiot :+1: \n. Thanks for spotting this, that's not the desired behaviour - will fix in the next release.\n. This is now fixed in develop.\n. Hi @stepan-perlov,\n1 - Multiple editors aren't supported by CT, the EditorApp class is a singleton and much of the related code (UI, tools, etc.) relies on this. It would of course be possible to create multiple toolboxes. If you provide some information on what you're attempting to do I will try to help further.\n2 - You can configure the tools within the toolbox like so:\n``` JavaScript\nvar editor = ContentTools.EditorApp.get();\n// Only show the undo, redo and remove tools\neditor.toolbox().tools([['undo', 'redo', 'remove']])\n```\n3 - If you want to build your own custom ignition you can initialize the editor without creating the ignition component using the withIgnition option, eg:\nJavaScript\nvar editor = ContentTools.EditorApp.get();\neditor.init('[data-editable], [data-fixture]', 'data-name', null, withIgnition=false);\nThis option is new to release 1.2.7\nYou can then create your own ignition component and that calls:\n- editor.start() - Start editing\n- editor.stop(false) - Stop editing and cancel changes\n- editor.stop(true) - Stop editing and save changes\n. Hi @stepan-perlov,\n1 - There some discussion on changing the singleton nature of CT here: https://github.com/GetmeUK/ContentTools/issues/99 The reality is this isn't a short term goal for us. Based on your description however I'm not sure you need separate editor instances, can't you just re-initialize the editor each time sending the selector for the content you want to make editable? (Apologies in advance if I'm not fully understanding what you're trying to achieve).\n2 - CT doesn't use templates to generate the HTML for UI components, everything is build using JS via the DOM, so whilst you can modify the CSS for the toolbox as much as you want there's template to update. However you can replace the existing toolbox with your own component, either using the CT component model or totally independent code. The tools are available independent of the toolbox and so can be called from any code, e.g:\nJavaScript\nvar boldTool = ContentTools.ToolShelf.fetch('bold');\nvar element = ContentEdit.Root.get().focused();\nvar selection = null;\nif (element.selection) {\n    selection = element.selection();\n}\nboldTool.apply(element, selection, function (applied) { // Logic to execute once tool is applied  } );\nMy advice would be to read through the code for the toolbox itself initially: https://github.com/GetmeUK/ContentTools/blob/master/src/scripts/ui/toolbox.coffee, and then decided on how you want to implement your custom toolbox. It's possible to completely replace any or all of the UI for CT, as an example this Wordpress editor is based on CT but you'd hardly recognize it from the UI https://pagebuildersandwich.com/\n. Hi Wajid,\nHappy to take a look but this seems to be a custom image dialog box so I'd need to see a live version of it (or be able to download a version of the code I can run locally) to try and resolve this.\nAnt \n. Ahh I misunderstood your original post, I see what your getting out now, it's rendering the text cursor/caret through the image dialog - sorry about that.\nSo looking on StackOverflow I found this insightful post (http://stackoverflow.com/questions/27864884/cursor-caret-bleeding-through-overlay-in-ie), this is apparently an IE11 bug (potentially fixed in later versions though I haven't checked). The author of the answer (an IE team member) does post a work around in JS.\nI will look at introducing an IE11 hack that blurs the focused element when a dialog is opened in the next release - no promises though I haven't had chance to look through the potential side effects for IE. Do you know if this issue occurs on latest IE Edge?\n. @themoor88 any chance you could pull down the develop branch and see if this issue is now resolved by the following hack: https://github.com/GetmeUK/ContentTools/blob/develop/src/scripts/ui/dialogs/dialogs.coffee#L99\n. I believe this is now resolved please let me know if not.\n. Hi @aniket27, \nYou need to assign your imageUploader function to the editor for it to be used, like so:\nJavaScript\nContentTools.IMAGE_UPLOADER = imageUploader;\n. Hi @aniket27,\nFor determining which user has made changes to the content I would recommend using cookies to store session information about the current user.\nIn terms of sending other information through when saving your changes via AJAX, it depends a bit on your framework (e.g JQuery, MooTools, etc.) but using vanilla JS you can just do:\n``` JavaScript\n// Create a payload object\nvar payload = new FormData();\npayload.append('nameOfHiddenField', 'valueOfHiddenField');\nvar xhr = new XMLHttpRequest();\nxhr.open('POST', '/save-my-page');\nxhr.send(payload);\n```\nIf you look at the Save changes section of the Getting started guide you should see how this fits in.\n\nOn a slightly different note, I hope this doesn't come off as rude, but I'm trying to get people to post questions, issues, suggestions and so on in the right place. On the readme is a short guide for deciding where to post you items:\n- How do I? -- StackOverflow\n- I got this error, why? -- StackOverflow\n- I got this error and I'm sure it's a bug -- post an issue\n- I have an idea/request -- post an issue\n- Why do you? -- chat with me on gitter (I may then post it as an issue)\n- When will you? -- chat with me on gitter (I may then post it as an issue)\n- You suck and I hate you -- contact us privately at pm@piersmorgan.me!\n- You're awesome -- please find a megaphone and suitably high rooftop (but seriously any help spreading the word about ContentTools is much appreciated)\nNeither of these questions are directly related to ContentTools and the questions would be better posted on StackOverflow as there's a large volume of people who can help there and once an answer is posted there people are more likely to find it in future rather than ask it again.\nI check StackOverflow daily so as long as you mention ContentTools in your question I should find posts and I always try to answer where I can promptly.  \n. JQuery allows you to send a data object to the AJAX call:\n``` JavaScript\nvar data = {};\n// Add hidden fields\ndata['nameOfHiddenField'] = 'valueOfHiddenField';\n// Add regions\nfor (name in regions) {\n    if (regions.hasOwnProperty(name)) {\n        data[name] = regions[name];\n    }\n}\n$.ajax({\n    method: \"POST\",\n    url: \"...\",\n    data: data\n}).done(function( msg ) {\n   ...\n});\n```\nHopefully that helps you - but to clarify I haven't used JQuery in nearly 2 years so I'm certainly not an expert on how best to make an AJAX call with JQuery, StackOverflow is the best place for this kind of question.\n. Hi @aniket27 - CT does not currently support mobile / touch based devices for editing content. I do hope to add support for mobile at some point in the future once the library becomes more mature.\n. Hi @aniket27,\nI think I may need to look at the autosave feature in the tutorial as the library has changed quite a bit since it was written and that feature hasn't been reviewed, I will resolve and update the docs today.\n. OK I've checked this on the sandbox demo and it works as I'd expect so I don't think the issue lies there, can you send the console output of what's being posted so I can inspect.\n. OK the issue is here:\nfor (name in regions) {\n        payload.append(name, regions[content]);\n    }\nit should be:\nfor (name in regions) {\n        payload.append(name, regions[name]);\n    }\nThis is another doc error - thanks again for highlighting it, I'll resolve now :+1: \n. Per the Handling image uploads tutorial you should return at least a URL and the dimensions/size of the image, for example:\nJSON\n{\n    \"url\": \"/foo.jpg\",\n    \"size\": [600, 400]\n}\nThe response from your PHP script must be in JSON format.\nTo remove the image crop and rotate buttons I recommend you simply hide them with CSS, e.g:\nCSS\n.ct-control--rotate-ccw,\n.ct-control--rotate-ccw,\n.ct-control--crop {\n    display: none;\n}\n\nThese questions don't belong on the issue tracker, they should be posted to StackOverflow, just mention ContentTools in your question.\n. @aniket27 based on your code above this is simple a type it should be response.size[0] not image.size[0]. This is also an error in the tutorial docs though (so my fault not yours), I'll resolve when I push the new release later today.\n. This has now been fixed in the tutorial - thanks for the spot.\n. Agreed - I want to look at adding support for tab in preformatted blocks in the next release so I'll review this to.\n. Forgot to close this when I finished it, support for this is now in place.\n. Thank very much for using CT. Unfortunately, this request is not considered to be an issue or idea and therefore has been rejected. Please ask your CT related questions on StackOverflow or consult the documentation.\n. Hi @brunjick, can you describe what you're trying to do sorry? When you say \n\ndynamically update content (previously saved HTML).\n- Are you adding content into the editable regions?\n- Is the editor active (e.g editing) when you're making the change?\n\nsyncRegions (which will work if the editor is editing or not) looks for new or removed editable regions since syncRegions (which is also called by init and start) was last called. What it wont cater for is the contents of a region being modified while the editor is active, it doesn't re-parse regions it already knows about.\nI agree the documentation on this function isn't documented as well as it needs to be be and will flag this as an enhancement - I'll get a better example up in the next release.\n. OK I think I get it :) I'm guessing that posts each have a unique ID and that at any one time there's only one editable region (e.g you can only edit one post at a time). \nIf you don't want to stop/start the editor when switching to a different post then my advice would be to do the following:\nReplacing the region\n- Use the post ID in the region name to ensure it will be unique, for example <div class=\"post\" data-editable data-name=\"post-123\">\n- When you switch between posts, remove the current editable region and replace it with a new region for the switched to post and ID, so now the editable region might be <div class=\"post\" data-editable data-name=\"post-124\">\n- Call syncRegions against the editor which should then recognize the new region and forget the old one.\n. I'm happy to look to add a setContent method to editable regions (sounds like a good idea). Would you mind making the request against the issue tracker here: https://github.com/GetmeUK/ContentEdit/issues (as the change would be against that library).\n. @brunjick OK the setContent is now a method against the Region class and I've updated the documentation for syncRegions along the lines of our conversation.\n. Thanks for report will resolve and push to master (officially will go out with 1.2.9 next week).\n. @johnnylee thanks - I'll update the documentation today :+1: \n. I've now updated this per your example. Thanks again for pointing this issue out and even more so for providing a correct (and neater) example. :+1: \n. @JNazarukPragmaticWorks thanks for reporting this - it seems to be working of the developer tools are open so I'm wondering if I left a console.log in some where and that's causing it to fall over :/ \nWill take a look now.\n. Little more information - this happens only on the latest version of Edge, all other version of IE from 10+ are fine including the last version of Edge. The issue does not occur if you have the developer tools open.\n. Hi @JNazarukPragmaticWorks - is there any chance you can try this again please. I'm using BrowserStack to test, which is great but the caching can be even more difficult to eliminate on there, especially when the issue doesn't occur if the console is open. \n(I work on Ubuntu and don't have a machine I can access to run IE Edge on until tomorrow)\n. @JNazarukPragmaticWorks I'll have to wait until I have access to Edge tomorrow, I've traced the issue down to the HTMLParser and and issue with the selfClosing method not existing against a Tag instance. Since the issue happens randomly for me and not at all when the developer tools are open, (not to mention I can't generate an error message in the console (I have to catch alert it) so no traceback) - it's proving difficult to track down. \n. OK I've pushed a fix up to the demo website and had another user confirm that it works on there Edge as well as tested it on BrowserStack. If it works for you I'll apply the patch the the master and push it out.\nThanks for your help with this :+1: \n. @JNazarukPragmaticWorks thank you for confirming.\nFor those interested here is the problem code and the patch I will be applying:\n``` JavaScript\nCharacter.prototype.addTags = function() {\n      var tag, tags, _i, _len, _results;\n      tags = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      _results = [];\n      for (_i = 0, _len = tags.length; _i < _len; _i++) {\n        tag = tags[_i];\n    // HACK: IE Edge sometimes sends an array containing an empty array to this method.\n    if (Array.isArray(tag)) {\n        continue;\n    }\n\n    if (tag.selfClosing()) {\n      if (!this.isTag()) {\n        this._tags.unshift(tag.copy());\n      }\n      continue;\n    }\n    _results.push(this._tags.push(tag.copy()));\n  }\n  return _results;\n};\n\n```\nI'm concerned about applying this patch because truth be told I don't understand why it is necessary. The issue is limited to the latest version of IE Edge and is difficult to consistently produce because:\n- The error does not occur if the developer tools console is open.\n- The error occurs the majority of the time but it's possible on consistent refreshes that the error will not occur.\n- The error will trigger when parsing a random string of HTML, e.g the element it was parsing content for and erred on the last time will pass fine the next time around and a different string of HTML will trigger the error.\n. I thought this error had been resolved :/ looks like it hasn't - there's a full description of the behaviour here and the hack I implemented. #258 \nIf you're able to help identify the cause of the issue that would be very helpful as I'm a linux user and don't have access to IE Edge other than via BrowserStack which is hard going for bugs of this nature.\nIt's a fool hardy thing to say but I'm beginning to suspect that it may be an issue with Edge as there's just no pattern to the error being triggered - added to which on BrowserStack my hack appeared to work and the original poster of the issue reported it was working for him after the hack also - so appears maybe just refreshing the page removes the issue.\n. I think it maybe related to this Edge issue https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/6664966/ (at least the description of the issue sounds similar if not the set up).\n. No it doesn't - it's only the symptoms that are similar the possible reason they mention (i.e es6/es5) is different, it's just the only issue that's seems the same. I'll have a windows box and edge over the weekend hopefully so I can try to fix it.\n. I can reproduce it on IE Edge consistently though it falls over on different parts of the content. I meant to get some time on it today but left the office earlier than intended - will get time on it tomorrow.\n. @bfintal just to confirm - does the issue no longer occur for you? The patch discussed in #258 is in the current version current master branch and on the ContentTools website editor.\n. @bfintal so the patch you reference #258 that is in the current master branch - so it's added (just not in the current release) and in place on the sites demo page so unfortunately the issue remains, have some more time today to review, if there's any chance of a full console output for the error that would be great.\n. I no longer see an issue in the latest build on browserstack - I'm going to close this issue for now and will reopen if anyone else reports it.\n. I've namespaced the tool tips to used data-ct-tooltip now so hopefeully that resolves the issue.\n. Hey @etlel - thanks for reporting this I've found the cause of the issue it's because taint isn't being called in the return key handler for list items. Will fix now should have the fix in place in the next hour.\n. I can't reproduce with the numbers list using the list of actions you provided - number or bullet isn't a different element class so shouldn't matter which list item - are you using the same steps to reproduce?\n. Good news :+1: \n. Confirmed. Doesn't happen if you use the keyboard short-cut so must be either in the CT bold tool or potentially the HTMLString library - the same issue appears to occur for links and italic text.\n. OK this is now fixed - will go out in the next release (1.2.10) for now it's against the master.\n. You can't add headings inside PreText elements using CT tools (though you can always add it through the HTML source), but as for bold and italic I don't see any reason to disallow them (though it would be easy to). Syntax highlighters wrap different elements within pre tags to style them in a similar way (though I don't imagine they use b or i much, most likely span tags with classes).\n. The character is there intentionally so the presences of them isn't a bug during editing, without it pressing return at the end of a pre element doesn't generate a new line consistently and prevents you from moving in and out of the element with the arrow keys.\nI've noticed that I sometimes they get left in content when saved also but haven't found a consistent way to replicate, do you have one?\n. @bfintal thanks for the suggestions but unfortunately this doesn't resolve it :/ Will keep looking at it now though.\n. I've pushed a fix for this that for me resolves the issue for the steps you've provided to produce it - let me know how you get on.\nYou will still see a zero-width-space (\\u200B) at the end of the content of a PreText, but it wont be present when you save the HTML out and doesn't impact the user's ability to edit the content.\n. Hi @snimavat,\nI guess the question here is how to hook an autocomplete tool, like Awesomplete into the link dialog's select field. Using that library as an example here's a really simple (if slightly ugly way to do this).\n``` JavaScript\n// Patch the behaviour of the link dialog\nvar _linkDialogMount = ContentTools.LinkDialog.prototype.mount;\nContentTools.LinkDialog.prototype.mount = function() {\n    // Call original behaviour\n    _linkDialogMount.apply(this);\n// Add the auto-complete to the link input (we provide a static list but most likely you'd\n// have the auto-complete call the server for a list).\nnew Awesomplete(\n    this._domInput, {\n    list: ['/about-us', '/demo', '/getting-started']\n});\n\n}\n```\nIf you try this out using a Awesomplete you'll also might also need to set the font size in the list items (I do in the sandbox demo):\nCSS\ndiv.awesomplete > ul > li {\n    font-size: 15px;\n}\n. Sure - shouldn't be a big change. Can you provide an example case for this, just so I have something to play around with when implementing (even if it's only the concept of what it will be used for).\n. Hi @carpusmedia - thanks for your kind comments :)\nSo there's not a set solution for this at the moment, the best you can do is set the indentation to be '' like so:\nJavaScript\nContentEdit.INDENT = '';\nBut you'd still then be left with the line endings. I'm going to convert this to an enhancement because I think it would be useful to be able to set the line-endings type as well, something like:\nJavaScript\nContentEdit.LINE_ENDING = '';\nWill add to the next release.\nIn the meantime the easiest solution is to strip the problematic white spaces from your HTML at the point of save, so client-side you could do this like so (I think haven't tested the regex directly):\nJavaScript\nvar regions = ev.detail().regions;\nfor (name in regions) {\n    regions[name] = regions[name].replace(/>\\s+|\\s+</g, '');\n}\n. ContentEdit.LINE_ENDINGS is not a supported setting as of release 1.3.1.\n. Hi @borntodesign can you be more descriptive about the issue you're having, to get to the previous list you should just be able to move the caret left/right or up/down (e.g using the arrow keys to navigate back to the parent list at either end of the current list item).\nIf this isn't the case for you can you let me know what browser you're using in case it's a browser specific issue. \n. Hi @borntodesign - I'm using Chrome also and can't repeat the issue just creating a list from scratch so it sounds like it might be a problem from pasting in the content from word, is there any chance you can send me an example word doc containing a snippet of content that was pasted in and caused the issue so I can repeat the problem and get a fix in place?\nWe are looking to add better support for pasting in HTML and content from other applications, at the moment we convert everything into basic text structures but seems like we may be allowing in special characters or something that's causing a glitch.\n. @cgriffin4 - I don't think this is the same issue as I can't repeat this with unordered list, but I can reproduce the error you have highlighted and will raise an error for that now.\n. @cgriffin4 no problem - thank you for taking the time to notify me about the issue :)\n. The bind method in the ContentTools UI has been replaced with addEventHandler method now (see release 1.2.0 for details).\nThe implementation of save is pretty similar still, the above code would now become:\n``` JavaScript\n// Initialise the editor\nscope.editor = new ContentTools.EditorApp.get();\nscope.editor.init('[ip-editor]', 'ip-editor');\n// Bind a function on editor save\neditor.addEventListener('saved', function (ev) {\n    scope.$apply(function(){\n        scope.regions = ev.regions;\n    });\n// ...\n\n});\n```\n. There isn't an option at the moment, the best I can offer right now is a patch you could apply:\n``` JavaScript\neditor.init(...);\n// Disable refresh message\nwindow.removeEventListener('beforeunload', editor._handleBeforeUnload);\n// Disable cancel message\neditor.addEventListener('revert', function(ev) {\n    ev.preventDefault();\n// Revert\nthis.revertToSnapshot(this.history.goTo(0), false);\nthis.history.stopWatching();\n\n// Hide UI\nthis._toolbox.hide();\nthis._inspector.hide();\n\n// Reset the editor\nthis._history = null;\nthis._regions = {};\nthis._state = 'ready';\n\n// Blue any existing focused element\nif (ContentEdit.Root.get().focused()) {\n    this._allowEmptyRegions = function () {\n            ContentEdit.Root.get().focused().blur();\n    }\n}\n\n});\n``\n. Hi @Petah - I've reopened this and flagged as an enhancement.\n. This feature is now supported, to disable the cancel/refresh alerts simply set theContentTools.CANCEL_MESSAGEvalue tonull`.. Can you post your code for the carousel element here or in a gist so I can take a look and see if I can help?\n. OK I can understand what you're trying to achieve now.\nSaving causes CT to to request a HTML version of the CarouselElement via the html() method, remove the existing ContentEdit element using unmount() (in this case BM.Carousel) and then replace it with with the output of html(). Further in the editor save() method the HTML is not replaced per element but rather all elements are unmounted and then the HTML for the region is inserted into the region.\nYou could conceivable change the save method to replace the regions HTML piecemeal (e.g per element) and to check the type of element before deciding whether to replace the element with the html() output or simply store it for the save operation but leave the element in place - but I don't think this would be the ideal solution.\nI'd recommend taking the approach that videos do, when you manage a video it's converted to a div that you can position and size, when you save out the video is converted to an iframe (if it's youtube or vimeo at least). The JavaScript loaded by the iframe activates the video.\nUsing this approach I recommend that you update your carousel code to detect for changes in the DOM or bind to the editor save/saved event and then reinitialise the carousel at that point (which I think was the conclusion you were coming to). There maybe a small flicker while the JS kicks in, as there is with videos, but so long as you use CSS to keep the elements size the same this shouldn't be substantial.\nHaving said all of this @bfintal has actually created a manageable carousel for his PageBuilderSandwich project so if you have any thoughts/advice Benjamin I'm sure they'd be appreciated.\n. There's no audio element currently in ContentEdit. One needs creating to support inserting audio - if you want to add a request for such an element then please post it on the ContentEdit issue tracker and I'll happy to add it to the enhancements list. \n. Does it matter if the table is in the middle of some content or is this only when the table is at the end?\n. OK so there are a couple of approaches you could take, I'd recommend updating the a Table tool to do this personally, I'll show how to do this in CoffeeScript, if you need it in JS let me know:\n``` CoffeeScript\n    class ContentTools.Tools.TableP extends ContentTools.Tools.Table\n    # Override existing table tool\n    ContentTools.ToolShelf.stow(@, 'table')\n\n    @apply: (element, selection, callback) ->\n\n        _callback = (added) =>\n\n            # Check if we need to add a paragraph\n            if added\n\n                # Find the last child in the collection\n                siblings = element.parent().children\n                lastChild = siblings[siblings.length - 1]\n\n                # If it's a table...\n                if lastChild.type() == 'Table'\n\n                    # ...add a paragraph\n                    p = new ContentEdit.Text('p', {}, '')\n                    element.parent().attach(p)\n                    p.focus()\n\n            # Perform the standard callback\n            callback(added)\n\n        super(element, selection, _callback)\n\n```\n. Sure, hope this helps:\n``` JavaScript\n// Some stuff required when extending a CoffeeScript class\nvar hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) {\n  for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor;\n  child.__super = parent.prototype;\n  return child;\n}, __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n// Our new tool in Javascript\nContentTools.Tools.TableP = (function() {\n// Inherit from the existing table tool\n  __extends(TableP, ContentTools.Tools.Table);\n// Constructor\n  function TableP() {\n    TableP.super.constructor.apply(this, arguments);\n  }\n// Override existing table tool in the default tools\n  ContentTools.ToolShelf.stow(TableP, 'table');\n// Customize the apply method for the tool\n  TableP.apply = function(element, selection, callback) {\n// We wrap the passed callback in out own version that adds the additional\n// paragraph element if needed.\nvar _callback;\n_callback = __bind(function(added) {\n  var lastChild, p, siblings;\n\n  // Check the table was added\n  if (added) {\n    // If the table was added is it the last child...\n    siblings = element.parent().children;\n    lastChild = siblings[siblings.length - 1];\n    if (lastChild.type() === 'Table') {\n\n      // ...if so add a paragraph at the end of the parent collection \n      p = new ContentEdit.Text('p', {}, '');\n      element.parent().attach(p);\n      p.focus();\n    }\n  }\n\n  // Perform the standard callback\n  return callback(added);\n}, this);\n\n// Perform the standard apply method with out wrapped `_callback` function\nreturn TableP.__super__.apply.call(this, element, selection, _callback);\n\n};\n  return TableP;\n})();\n```\n. Hi @megamuf, \nIn line with the Where to post... How do I? guide on in the project readme file please ask this question on StackOverflow for the benefit of everyone - I check SO daily and will happily post an answer there, but it does belong there not here.\nGeneral questions are better on SO as they are just easier for people with the same or similar questions to find in the future.\nThank you in advance.\n. Hi @megamuf - I'll try to get an answer posted for you today.\n. @megamuf I've posted a much neater solution for you on SO now :)\n. Hi @snimavat,\nIf you want the HTML from all the regions you can do the following on save instead:\njavascript\nvar regions = ContentTools.EditorApp.get().regions();\nhtmlMap = {};\nfor (var name in regions) {\n    htmlMap[name] = regions[name].html();\n}\n. From the demo page docs: \n\nPre-formatted blocks of text can be converted back to standard text using the paragraph tool, however if you have a pre-formatted section of text and want to add a new paragraph after it you can hold down the ctrl key (command on Apple) whilst clicking the paragraph tool to achieve this.\n. Hi @snimavat - not a problem, glad to see your using the library :)\n. Hi @okaybmd - this should actually already be possible. The new functionality added allows you to control the element inserted and ContentEdit supports a data-ce-placeholder attribute that lets you set the placeholder content of the element as you describe it, so for example to implement what you're asking for you might use:\n\n``` JavaScript\nvar editorCls = ContentTools.EditorApp.getCls();\neditorCls.prototype.createPlaceholderElement = function(region) {\n    var type = region.domElement().getAttribute('data-placeholder-type');\n    var placeholderText = region.domElement().getAttribute('data-placeholder');\n    return new ContentEdit.Text(\n        type || 'p', \n        {'data-ce-placeholder': placeholderText || ''}, \n        '');\n};\n```\nHowever this isn't ideal as the placeholder attribute will remain against the child element and ideally it would be better if it was taken from the parent not the child.\nI'll take a look at the bug you mentioned and confirm it, and I agree this feature should be improved upon a long the lines you have mentioned moving forward so will flag this as an enhancement. \n. OK will take a look at this tomorrow and see if I can provide a more concrete example, I admit I haven't tried the code I posted I was coding out loud (I'm too used to writing coffeescript so ors tend to slip in), as I mentioned I don't think this is the ideal approach either.\nThe 3 dots you see as placeholders are added using the same CSS as we're attempting to use to set the custom placeholder (https://github.com/GetmeUK/ContentEdit/blob/master/src/styles/content-edit.scss#L155). I'm wondering if the created empty tag isn't getting the placeholder, I'm sure more will be revealed once I look into the bug you reported re. h1s becoming p tags, but at the point the 3 dots show does the element in question have the data-ce-placholder attribute applied to it?\n. Not a bother I'm glad of the feedback :)\n. OK this makes more sense now, so data-ce-placholder is the attribute that needs to be used to set the placeholder currently (baring changes we will make). The code I specified adds the value of data-placeholder against the region tag to the value of data-ce-placeholder against the first child tag for the region created by createPlaceholderElement.\nHowever you're adding your own initial tag currently, e.g <h1>Title 01</h1>, so this either needs to be removed initially so that the region creates the first empty tag or you need to set a placeholder attribute directly against it such as <div class=\"article-title\" data-editable data-name=\"article-title\" data-placeholder=\"Enter a title\"><h1 data-ce-placeholder=\"Enter a title\">Title 01</h1></div>.\nAs I say this isn't idea but at least it explains the first time second time behaviour you're seeing (I think).\n. BTW any official data- attributes for CT or CE are namespaced -ct- and -ce- to prevent clashes with other libraries (we've seen these in the past, data-tooltip the most recent one I can remember). However the createPlaceholderElement allows you to use whatever you want interms od data- tags as you define what attributes to look for.\n. The cursor position discrepancy you are seeing is down to how browsers treat an empty contenteditable element. Funnily enough the reason I added :after elements initially was to solve a problem where some browsers (such as Firefox) completely collapsed some elements if empty (such as list items) - which looks very odd.\nSo to help try and look at this can you tell me what browser you're using and also provide me with the CSS styles associated with your header so I can reproduce the issue. I ask because I don't see this cursor/carat position discrepancy using Chrome to edit the content of the sandbox.html file in the repo.\n. @okaybmd thanks very much for all your detailed feedback - really useful :+1: \n. Thanks @SimBioT1954. \n@snimavat as the issue @SimBioT1954 references shows it is possible to configure the tools available by region.\n. Hi @snimavat - technically yes but the code is a little untested so...\n\nI'd recommend implementing this in CoffeeScript but you could use a converter for my code below if need be (e.g http://js2coffee.thomaskalka.de/) \n\nWe need to define a new FlexibleImage element class that supports an attribute to determine if the aspect raitio is fixed when resizing, that would be done something like:\n``` CoffeeScript\nclass ContentEdit.FlexibleImage extends ContentEdit.Image\n# An image element that can be configured with a flexible aspect ratio\n\nresize: (corner, x, y) ->\n    # Resize the element\n    unless @isMounted() and @can('resize')\n        return\n\n    flexible = @hasAttr('data-ce-flexible')\n    ContentEdit.Root.get().startResizing(this, corner, x, y, flexible)\n\nRegister ContentEdit.FlexibleImage as the tag to associate with images (over Image)\nContentEdit.TagNames.get().register(ContentEdit.FlexibleImage, 'img')\n```\nTo then implement an image with a flexible aspect ratio we just need to set the data-ce-flexible attribute against it:\nHTML\n<div data-editable=\"my-region\">\n    <img src=\"some-image.svg\" width=\"400\" height=\"400\" alt=\"a flexible image\" data-ce-flexible>\n</div>\n. @snimavat I don't recommend using constructor.name it's not safe across browsers (I learned this the hard way). Instead CE provides the type() method against elements, so instead I'd recommend you try:\nCoffeeScript\nreturn element.type() != 'Image'\n. Ah I need to update that then (thanks for letting me know :+1: ) - I used to use constructor.name, then like I say discovered it's not reliable.\n. Thanks again for highlighting this @snimavat - I've now updated all references to element.constructor.name with .type() within the documentation.\n. Hi @akshaysinha91 - Please see this issue https://github.com/GetmeUK/ContentTools/issues/150 for information on inserting line-breaks in paragraphs and how to set the default behaviour. \nThe setting PREFER_LINE_BREAKS setting is also documented here: http://getcontenttools.com/api/content-edit#settings\n. Hi @akshaysinha91 - OK I understand what you mean now - I think this is actual a bug of sorts, you can see the test responsible here: https://github.com/GetmeUK/ContentEdit/blob/master/src/scripts/text.coffee#L330\nThis is too aggressive and should allow br tags to count as content. I'll push a fix for this later today as a hotfix.\n. Hi @akshaysinha91 - I've pushed a hot fix for this issue now.\n. The issue of stripping white space from tags has been discussed in some detail before, I'd recommend taking a look at this post: https://github.com/GetmeUK/ContentTools/issues/205 which provides an overview and the SO post it mentions which provides a patch to achieve this: https://stackoverflow.com/questions/36883079/how-to-preserve-multiple-br-when-no-content-before-or-after-with-contenttools/36954440#36954440\nUltimately outside of pre tags I'm not keen on text elements preserving white space at either end as this this <p><br/><br/></p> or event <p><br />test</p> whilst valid is not something I would like to see clients use to implement padding or spacing between elements.\n. Take a look at #269. Does this help?\n. Thanks for letting me know about the @ sign @jumika :+1: - have fixed now.\n. Hi @beckend - thanks for highlighting this issue, I'll mark this as a bug and look to resolve in the next release.\n. Another approach to this is to use the behaviour flags for the element:\n``` JavaScript\n// Watch for element mount events\nContentEdit.Root.get().bind('mount', function (element) {\n    var domElement = element.domElement();\n// Check the element is an `Image` with the `no-resize` attribute\nif (element.type() === 'Image' && element.hasAttr('data-no-resize')) {\n    // Disable resizing for that element\n    element.can('resize', false);\n}\n\n});\n```\nYou'd then use the data-no-resize attribute to flag that an image should not be resizeable:\nHTML\n<div data-editable=\"my-region\">\n    <img src=\"/images/my-image.png\" alt=\"My image\" width=\"400\" height=\"300\" data-no-resize>\n</div>\n. @Yopi I'm not entirely sure I've correctly understood, do you want the the user be able to resize the image as a percentage? Or do you simply want the image to be a fixed size, based on percentages, but otherwise moveable/draggable.\nThe reason we don't use img as the DOM element when editing images is because as an inline block they don't support child elements including puesdo :before/:after elements which are used to display the size of the image - if you can do without the size because it's fixed then I agree using the img tag is an good approach.\nPerhaps if resize is disabled we could have the element use img instead of div when editing?\n. @Yopi that makes sense now :) The change if you'd like to submit a PR needs to be made in ContentEdit, and then I can upgrade the version of CE that ContentTools uses to support this fix :)\n. Hi @mattsah,\nInline elements are not reported within the inspector and the only way to apply/modify the classes of those elements is by;\n- selecting the parent block element in the inspector, \n- selecting the code tab,\n- manually adding/updating the HTML to have the appropriate class attribute.\nThis functionality has been discussed previously here: https://github.com/GetmeUK/ContentTools/issues/155\nI'm open to adding this feature as an enhancement and implementing myself or finding a volunteer(s) to help contribute a solution, however it's quite a chunk of work as inline tags are not handled in the same way as (inline) block tags (see my final comment on the aforementioned issue for a discussion of what I believe is involved) and my focus currently is on improving the test suite and fixing bugs when there reported - so (in all honesty) it's unlikely to be a feature available in the next few releases.\n. To remove the ignition switch from the editor I recommend using the withIgnition flag when initializing, for example:\nJavaScript\nvar editor = ContentTools.EditorApp.get();\neditor.init('[data-editable]', 'data-name', fixtureTest=null, withIgnition=false);\nTo manually start/stop the editor you can call the named methods against it, for example:\n``` JavaScript\n// Initially start the editor\neditor.start();\n...\n// Some time later perhaps on submitting the reply we stop the editor\neditor.stop();\n```\n. Can you post your html please?\n. OK so this issue here is that the blur event in this instance is only between ContentEdit fields not DOM elements. I'd suggest something along the lines of:\nJavaScript\n// Add DOM level event listeners to allow the element to interact with other \n// DOM elements.\nContentEdit.Root.get().bind('mount', function(element) {\n    element.domElement().addEventListener('blur', function (ev) {\n        return newInquiryEditor.toolbox().tools(FIXTURE_TOOLS);\n    });\n    element.domElement().addEventListener('focus', function (ev) {\n        return newInquiryEditor.toolbox().tools(EMPTY_TOOLS);\n    });\n});\n. I think I got blur and focus the wrong way around on my code example, e.g should be:\nJavaScript\n// Add DOM level event listeners to allow the element to interact with other \n// DOM elements.\nContentEdit.Root.get().bind('mount', function(element) {\n    element.domElement().addEventListener('blur', function (ev) {\n        return newInquiryEditor.toolbox().tools(EMPTY_TOOLS);\n    });\n    element.domElement().addEventListener('focus', function (ev) {\n        return newInquiryEditor.toolbox().tools(FIXTURE_TOOLS);\n    });\n});\nJust heading out but when I'm back I'll take a look at the re-focus issue you mention.\n. Maybe try:\nJavaScript\n// Add DOM level event listeners to allow the element to interact with other \n// DOM elements.\nContentEdit.Root.get().bind('mount', function(element) {\n    element.domElement().addEventListener('blur', function (ev) {\n        return newInquiryEditor.toolbox().tools(EMPTY_TOOLS);\n    });\n    element.domElement().addEventListener('blur', function (ev) {\n        return newInquiryEditor.toolbox().tools(FIXTURE_TOOLS);\n    });\n    element.domElement().addEventListener('mousedown', function (ev) {\n        return newInquiryEditor.toolbox().tools(FIXTURE_TOOLS);\n    });\n});\nI seem to remember having fun with the focus event and contenteditable flagged elements before so maybe this will fix it, let me know.\n. Any chance you can put together a JSFiddle? It's difficult to suggest anything else without actually getting hands on with the same code.\n. Hi @FrancoisYu - I set up a very simple demo of this using just HTML an JS (not used Meteor before I'm afraid), here is the HTML I used:\n`````` HTML\n<!doctype html>\n\n\n\n\n\nTest \n    <div data-node data-name=\"node-1\">\n        <h1>Test</h1>\n        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Illum labore atque facere mollitia repellat dolores, similique nihil deleniti soluta perspiciatis at totam modi saepe suscipit esse reprehenderit quam! Libero, aperiam.</p>\n    </div>\n</body>\n    <script src=\"https://rawgit.com/GetmeUK/ContentTools/master/build/content-tools.js\" type=\"text/javascript\"></script>\n    <script>\n        var EMPTY_TOOLS = [];\n        var FIXTURE_TOOLS = [['bold','image'],['undo', 'redo', 'remove']];\n\n        // Add DOM level event listeners to allow the element to interact with other\n        // DOM elements.\n        ContentEdit.Root.get().bind('mount', function(element) {\n            element.domElement().addEventListener('blur', function (ev) {\n                return ContentTools.EditorApp.get().toolbox().tools(EMPTY_TOOLS);\n            });\n            element.domElement().addEventListener('focus', function (ev) {\n                return ContentTools.EditorApp.get().toolbox().tools(FIXTURE_TOOLS);\n            });\n        });\n\n        var editorCls = ContentTools.EditorApp.getCls();\n        var editor = ContentTools.EditorApp.get();\n        editor.init('[data-node]', 'data-name');\n    </script>\n\n``` \nWhen I view this in Chrome all works as I'd expect, I don't see the tool highlighting issue you're getting.  So my guess is this is either down to the browser or the framework, if you let me know what browser you're using I can try that and see if I can replicate the issue or of you can provide a JSFiddle using Meteor I can take a look at that :)\n``````\n. Hi @FrancoisYu - just to confirm, are you saying it is now working? e.g the code you posted works? If so that's good news though slightly perplexing.\n. Hi @mattsah,\nI'm not entirely sure I can visualise the issue you're getting, an example I could have a look at would be great. \nRegarding the use of the document there are a number of places that rely on the document; incase it helps I've detailed them below:\n- The biggest use of document is the createElement method which is used to generate HTML elements that are inserted into the ContentEdit (CE) editable elements as well as the ContentTools UI.\n- Both CE and ContentTools (CT) add event handlers against the document to listen for mouse events when elements/UI widgets are dragged.\n- CE also uses document.body to add a CSS class to the body element to indicate if an element is being dragged or resized (ce--dragging, ce--resizing). CT does similar for ct--no-scroll and ct--dragging).\n- ContentTools uses document to add a number of document level event listeners (mostly for tracking key modifiers, the delete key, and the visibility of the current page/tab).\n- CT uses document to report on the scroll position of the page.\n- CT mounts the editor itself directly as the last element within the body using document.body.appendChild.\nI'm not sure which of these approaches/uses would be causing the behaviour you describe, but happy to have a look if you can provide an example :)\n. Hi @mattsah - so I've set up the demo you sent and can see that basically nothing works. The issue I believe mostly relates relates to the ContentSelect library which is not able to report on the current selection within the iframe as it's using window.getSelection. This means the selection is always reported as position as a range of [0, 0] meaning tools like bold are disabled, and other tools such as the line break, are always added at the start of the elements content (hence when you spawn a new paragraph with the return key it's like you hit return at the start of the paragraph and therefore added it above the current one).\nAs a quick solution you could patch the ContentSelect library replacing window.getSelection() with gIframe.contentWindow.getSelection() so long as you assign a value to gIframe. Before loading ContentTools (and hence ContentSelect).\nI'll also look to update the ContentSelect library next week to allow you to set the window used to get the selection from against the ContentSelect namespace as a setting.\nThis probably wont solve all the issues your facing however, the library isn't designed to run in an iframe and no thought has been given to this scenario - it could be a bumpy road. One other option to consider (and I don't know how feasible this is for your project), is to run CT in the iframe but patch CT not to mount itself to the document.body, but to the window.parent.document.body here: https://github.com/GetmeUK/ContentTools/blob/master/src/scripts/editor.coffee#L307. I tried this using a simply JS patch and it appears to be a possible viable option (only slight annoyance I had to load the CSS in both the iframe and parent HTML.\nHTML\n<!doctype html>\n<html>\n    <!-- test.html -->\n    <head>\n        <link href=\"https://rawgit.com/GetmeUK/ContentTools/master/build/content-tools.min.css\" rel=\"stylesheet\" />\n        <style>\n            html,\n            body {\n                width: 100%;\n                height: 100%;\n            }\n        </style>\n    </head>\n    <body>\n        <iframe id=\"view\" name=\"view\" src=\"frame.html\" style=\"width:100%; height:100%;\"></iframe>\n    </body>\n</html>\n``` HTML\n<!doctype html>\n\n frame.html \n\n\n\n\n\nTest\nLorem ipsum dolor sit amet, consectetur adipisicing elit. Illum labore atque facere mollitia repellat dolores, similique nihil deleniti soluta perspiciatis at totam modi saepe suscipit esse reprehenderit quam! Libero, aperiam.\n\n\n\n\n",
    "dburrows": "I had the same question and this is a great explanation, think you can just add the two paras above to the README with a quick edit\n. ",
    "butsjoh": "I agree with @dburrows :+1: \n. ",
    "mattgi": "Thanks for the quick response. I guess the editor is the first step and the tools come second. It would be awesome to have an example React component (in ES6, not coffee : P).\nEssentially just a way to set some state to display in a view and then flick between editing and viewing (as per your current demo) with perhaps some comments/console logging around when/why things are happening where they do.\nI'm yet to spend too much time looking, but your structuring at first glance looks very OO and like it was written as a React component so the thought to port to React has also crossed my mind - but what you have is already rock solid so, if it's simple to integrate, seems like a no brainer to just use it as-is. \n. Awesome, thanks!\nI added the editor to state so that I could also destroy it on Unmount; otherwise, your sample code worked on my first attempt, so good! \nNow to hook it up with data and look at how to save things :)\nThanks again\n. For the sake of completeness:\n```\n'use strict';\nimport React    from 'react';\nimport Reach    from 'reach-react';\nimport Snackbar from '../snackbar';\nimport './style.scss';\nexport default class Content extends React.Component {\n/*\n   * @constructor\n   /\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      record : null,\n      editor : null\n    };\n  }\n/*\n   * @method componentDidMount\n   /\n  componentDidMount() {\n    this.setState({\n      record : this.props.record || {},\n      editor : new ContentTools.EditorApp.get()\n    }, () => {\n      this.state.editor.init('[data-editable]', 'data-editable');\n      this.state.editor.bind('save', (regions) => {\n        this.editorChange(regions['text-component']);\n      });\n    });\n  }\n/*\n   * @method componentWillUnmount\n   /\n  componentWillUnmount() {\n    this.state.editor.destroy();\n  }\n/*\n   * @method editorChange\n   * @param  {Object} event\n   /\n  editorChange(value) {\n    let record = this.state.record;\n    record.html = value;\n    this.setState({\n      record : record\n    }, () => {\n      this.submit();\n      // HACK: Reselect the region DOM elements for the editor after state change.\n      this.state.editor._domRegions = document.querySelectorAll('[data-editable]');\n    });\n  }\n/*\n   * @method submit\n   /\n  submit() {\n    Reach.APIthis.props.method}\n/*\n   * @method render\n   /\n  render() {\n    let innerHtml = {\n      __html : <div data-editable=\"text-component\">${ this.state.record ? this.state.record.html : '' }</div>\n    };\nreturn (\n  <div\n    key                     = 'text-component'\n    className               = 'text-component'\n    dangerouslySetInnerHTML = { innerHtml }\n  >\n  </div>\n);\n\n}\n}\n``\n. We are running on Babel Stage 0.. may drop back to 1 or 2 when we revisit potential issues... not sure we actually make use of anything from Stage 0 tbh.\n. I should add that if the correct answer is - \"only provide support for one editor on the view, and allow a way to obtain theid` of the Content that is being edited\", could you suggest how this could be accomplished?\n. Thanks Anthony.. it does help, but it it also means a parent needs to be aware that it has a content section and then initialize the editor accordingly... which is a bit of an anti-pattern in our app as we are trying keep each component modular and encapsulated.\nDo you see issues in calling init more than once (other than the placement of the ct-widgets)? The query passed to init is specific for the content in question (e.g. init('#some-id [data-editable], 'some-id')... perhaps there is a way to specific the parent selector for the ct-widget (current appended to body is my guess) if this is the only real issue (which maybe could be configurable? is this body append the only place)?\n. I actually think I can handle things by calling init via my own buttons within my component.\n```\n  startEdit() {\n    if (this.state.editor) {\n      this.state.editor.init('[data-editable]', 'id');\n      this.state.editor.bind('save', this.submit);\n      this.state.editor.start();\n    }\n  }\nstopEdit() {\n    if (this.state.editor) {\n      this.state.editor.stop();\n      this.state.editor.save();\n    }\n  }\n```\nin my save handler, i also have\nthis.state.editor.unbind('save', this.submit);\nthis.state.editor.destroy();\nThis seems pretty clean.. I just need to figure out how to not load the ignition buttons (or at worst, set them to display : none ).\nSeem like an acceptable approach?\n. ",
    "guillaumepiot": "@mattgi dumb question, is your sample code ES6 or Babel?\n. @martyLauders that should be no problem, I can provide you with an example. But first, which version of Angular are you running on your project?\n. Hi @martyLauders, I have created a demo which can check here: https://github.com/Cotidia/contenttools-angularjs\nBasically, you can create a directive that will bind the DOM element to the editor. Then, the data will retrieve in the scope as $scope.regions.\n``` javascript\nangular.module('editorApp', [])\n    .directive('ngEditor',  function(){\n    function link(scope, element, attrs){\n\n        // Initialise the editor\n        editor = new ContentTools.EditorApp.get()\n        editor.init('[ng-editor]', 'ng-editor')\n\n        // Bind a function on editor save\n        editor.bind('save', function(regions, autoSave){\n\n            scope.$apply(function(){\n                scope.regions = regions;\n            });\n\n            // \"regions\" contains all the html for each editable regions\n            // Now, \"regions\" can be saved and used as needed.\n\n        })\n\n    }\n\n    return {\n        link: link\n    }\n\n})\n\n```\nIn the HTML, you can simply use the directive as follows:\n``` html\n\nSome content...\n\n\nAnother content....\n\n```\nI hope that helps.\n. @katopz Do you mean as an editor for emails as opposed to web pages?\nAt the moment, Content Tools focuses on standard HTML pages. In that sense, it is possible to edit an  HTML email template, but the problem comes in with the nature of email HTML, which uses a lot of work-around code to display correctly on multiple platforms (eg: Outlook).\nYou would need to add extra features such as inlining CSS, and pre-build template with HTML tables which renders well in all email client before hand (here some great examples internations.github.io/antwort/). Then, you could create editable regions within that template, where the editor will enable you to change text and images. \n. @jacojvv-dev as @andyjbgm mentioned, the server response data needs to contain a size array, representing the width and height of the image.\nAt the moment, your imagePost.php script (which is the one called on 'fileready') returns the file size of the image as opposed to its dimensions:\nphp\n$arr = array('size' => $_FILES[\"image\"][\"size\"], 'url'=>''...\");\nMy recommendation would be to return the same array format as imageSave.php is returning, eg:\nphp\n$items = list($width, $height) = getimagesize($_POST['url']);\n$arr = array('url' => $_POST['url'], 'size' => array($items[0], $items[1]));\nOf course, the javascript console is the best starting point to identify potential issue with the UI.\n. @jacojvv-dev no worries, just let me know how it goes.\n. My guess is that PHP has some limitations when it comes to saving HTML to file, and maybe the HTML need to be formatted / compiled a different way to save to a file.\nAfter a quick look online, I found this https://laracasts.com/discuss/channels/laravel/saving-html-contents-of-view-to-disk where people are having the same issue.\nI would suggest trying saving the file that way instead, and see if it works: \n```\n$formatted = (string) $content;\nfile_put_contents(public_path() . '/contents/'.Session::get('file').'.html', $formatted);\n```\n@alexrussell what do you think?\n. Bump. Just changed the PHP sample.\n. @alexrussell thank you for your attention on this issue, very useful information here.\n@Nisthar good stuff!\n. Just a thought:\nI tend to use commits to manage dependencies on older projects, because creating tags can be time consuming in a sense that they have to be fully tested to earn their name!\nTags are a great way to flag milestone though. I think they will be useful once the lib becomes available on node, and people will be compiling it as part of their project code. Eg:\nnpm install contenttools@1.0\nNPM is in the pipeline I believe?\n. @anthonyjb Ahah that's true! That's for the next dev day.\n. I confirm I saw the same issue on IE10, link tooltip doesn't show when testing on client windows laptop. I told them to use Chrome for now.\n. I think supporting for IE9 is now obsolete since there's currently 0.4% of users according to W3 stats. \nhttp://www.w3schools.com/browsers/browsers_explorer.asp\nAlso considering that the tools will be mostly used by website administrators, I would always advised the clients to run the latest version of their favourite browsers.\nI think we should leave the current bug fix in place for IE and focus on IE10 and above for further enhancement. It would then be up the developer to add backward compatibility on a project basis.\n. From looking at a broad audience website analytics, IE 10 & 11 constitute about 85% of the IE traffic. IE traffic being only 10% of total traffic. \n. @anthonyjb the approach I took which you recommended was to create a custom tag for ContentEdit.\nWe want ContentEdit to recognise the tag type data-ce-type=\"bkgimg\", so we can manipulate it in edit mode. The background image display trick is to use a div within a div, where the inner div is absolute positioned to fill all the space of the parent div. The parent div act as a hook for ContentEdit, while the inner div sole role is to hold the background image.\nThe source code of the integration below needs to be included a load time, which will extend the ContentEdit tag on the following line:\nContentEdit.TagNames.get().register(ContentEdit.BackgroundImage, 'bkgimg')\nAs a prerequisite, you will need to have an ImageDialog already in place for uploading the image.\nHere's the process that the custom tag implement:\n- Load the custom tag and create a virtual dom element for manipulation\n- Generate a button that triggers the image dialog\n- Once the image is uploaded, use the \"save\" event to apply to the new image as a background image\nOnce the update is complete, the new background image will show and get sent a new region for saving in the API.\nHere's the link to the gist: https://gist.github.com/guillaumepiot/a5dfb4ab58a31360979e3d1ad64878e1\nI hope that helps.\n``` coffeescript\nExample integration of a background-image uploader\nAuthor: Guillaume Piot\nEmail: guillaume@cotidia.com\nCompany: Cotidia Ltd\nLicence: MIT\n\nThe div holder is absolute positioned within the parent div\n\n\n<div\ndata-ce-tag=\"bkgimg\"\nclass=\"article-image__container\"\nstyle=\"background-image:url('/static/img/blog-header-placeholder.jpg')\">\n\nclass ContentEdit.BackgroundImage extends ContentEdit.Element\n# An editable background image element \n# (e.g <div data-ce-type=\"bkgimg\" data-url=\"...\"></div>).\n\nconstructor: (attributes) ->\n    super('bkgimg', attributes)\n\n# Read-only properties\n\ncssTypeName: () ->\n    return 'background-image'\n\ntype: () ->\n    # Return the type of element (this should be the same as the class name)\n    return 'BackgroundImage'\n\ntypeName: () ->\n    # Return the name of the element type (e.g BackgroundImage, List item)\n    return 'BackgroundImage'\n\n# Methods\n\nhtml: (indent='') ->\n    # Return a HTML string for the node\n    bkgimg = \"#{ indent }<div#{ @_attributesToString() }></div>\"\n    return bkgimg\n\nmount: () ->\n    # Mount the element on to the DOM\n\n    # Create the DOM element to mount\n    @_domElement = document.createElement('div')\n\n    # Set the classes for the backgound image element\n    classes = ''\n\n    if @_attributes['class']\n        classes += ' ' + @_attributes['class']\n\n    @_domElement.setAttribute('class', classes)\n\n    # Set the background image for the dom element\n    style = if @_attributes['style'] then @_attributes['style'] else ''\n\n    @_domElement.setAttribute('style', style)\n\n    # Add the button to edit the background image\n    @_domButtonElement = document.createElement(\"button\")\n    buttonText = document.createTextNode(\"Upload background image\");\n    @_domButtonElement.appendChild(buttonText) \n    @_domButtonElement.className = 'btn btn--upload-background-image'\n    @_domButtonElement.style.position = 'absolute'\n\n    # Just below the toolbox level\n    @_domButtonElement.style.zIndex = '9998'\n    @_domElement.appendChild(@_domButtonElement)\n\n    super()\n\n    # Get the selected element position\n    rect = @_domElement.getBoundingClientRect()\n    @_domButtonElement.style.bottom = \"-16px\"\n    @_domButtonElement.style.right = \"-16px\"\n\n_addDOMEventListeners: () ->\n    super()\n\n    @_domButtonElement.addEventListener 'click', (ev) =>\n        ev.preventDefault()\n        editor = ContentTools.EditorApp.get()\n\n        modal = new ContentTools.ModalUI(transparent=false, allowScrolling=false)\n        dialog = new ContentTools.ImageDialog()\n\n        # Support cancelling the dialog\n        dialog.addEventListener 'cancel', () =>\n            modal.hide()\n            dialog.hide()\n\n        # Insert the image url into the element once saved\n        dialog.addEventListener 'save', (ev) =>\n\n            detail = ev.detail()\n            imageURL = detail.imageURL\n            imageSize = detail.imageSize\n            imageAttrs = detail.imageAttrs\n\n            if not imageAttrs\n                imageAttrs = {}\n\n            imageAttrs.height = imageSize[1]\n            imageAttrs.src = imageURL\n            imageAttrs.width = imageSize[0]\n\n            # node = document.querySelector('[data-name=\"page_image\"]')\n            # element.style.backgroundImage = \"url('#{imageURL}')\";\n            # imageNode = region.descendants()[0]\n\n            style = \"background-image: url('#{imageURL}')\"\n            @attr('style', style)\n\n            console.log(@_domElement.style)\n\n            modal.hide()\n            dialog.hide()\n\n\n        editor.attach(modal)\n        editor.attach(dialog)\n        modal.show()\n        dialog.show()\n\n# Class properties\n\n# Class methods\n\n@fromDOMElement: (domElement) ->\n    # Convert an element (DOM) to an element of this type\n    attributes = @getDOMElementAttributes(domElement)\n\n    return new @(attributes)\n\nRegister ContentEdit.BackgroundImage the class with associated tag names\nContentEdit.TagNames.get().register(ContentEdit.BackgroundImage, 'bkgimg')\n``\n. @sahanjith the background image is using absolute positioning. That means the div with classarticle-image__containercontaining the background image isposition: absolute;, and the parent div with classarticle-imagemust beposition: relative;`.\nHere's an example:\n``` css\n.article-image {\n    position: relative;\n}\n.article-image__container {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background-size: cover;\n}\n```\nThat way the image will always fill the space in the div containing it. Let me know if that works for you.\n. ",
    "oyeanuj": "@mattgi @anthonyjb Glad to have found this! I considering using this for my React project as well and I was wondering if either of you could share your experience with this example or projects and any learnings before I embark on my journey?\n@anthonyjb Any plans by any chance to create a React wrapper for this library?\n. ",
    "MalyshevDmitry": "@anthonyjb I can help with russian translation.\n. @anthonyjb I've added gif to show case.\n. @anthonyjb Thanks! Will try.\n. @anthonyjb I tried to patch 'develop' version with following code, but console.log('Paste', arguments); doesn't shows pasted data:\n``` js\n  window.onload = function() {\n    var editor, req;\n    editor = new ContentTools.EditorApp.get();\n    editor.paste = function(element, clipboardData){\n  console.log('Paste', arguments); // What's wrong?\n\n};\neditor.init('.editable', 'data-name');\neditor.bind('save', function(regions, autoSave) {\n  var saved;\n  editor.busy(true);\n  saved = (function(_this) {\n    return function() {\n      editor.busy(false);\n      return new ContentTools.FlashUI('ok');\n    };\n  })(this);\n  return setTimeout(saved, 2000);\n});\nreq = new XMLHttpRequest();\nreq.overrideMimeType('application/json');\nreq.open('GET', 'https://raw.githubusercontent.com/GetmeUK/ContentTools/master/translations/lp.json', true);\nreturn req.onreadystatechange = function(ev) {\n  var translations;\n  if (ev.target.readyState === 4) {\n    translations = JSON.parse(ev.target.responseText);\n    ContentEdit.addTranslations('lp', translations);\n    return ContentEdit.LANGUAGE = 'lp';\n  }\n};\n\n};\n```\n. Works great! Thank you!\n. It seems, that @anthonyjb answered #7 issue?\n. Amazing!\n. :+1: \n. You're really fast! Thank you!\n. :+1: \n. In my opinion it'll be amazing!\n. Look, how it done in Imperavi Redactor (http://imperavi.com/redactor):\nClick on link:\n\nThen after click on 'Edit':\n\n. ",
    "tvaliasek": "I'm trying to write my own integration of translation, but I must face the fact, that every UI component was already created before the translation was loaded. For example the labels of tools can't be set properly, and fallback to default label text is applied. Is there any way to wait for the moment when translation is ready and defer elements creation?\nI have tried to use some constructions with events and/or setInterval function, but without success.\nnamespace.coffee:\n``` coffeescript\nDefault language url - tvaliasek\nLANGUAGE_URL: '/assets/content-tools/lang/en_US.json'\nSTRINGS: null\nLANG_LOADING: false\n\n...\nloading function for language file. Based on https://coffeescript-cookbook.github.io/chapters/ajax/ajax_request_without_jquery - tvaliasek\nsetLangUrl: (url) -> \n      ContentTools.LANGUAGE_URL = url\n      ContentTools.LANG_LOADING = true\n      req = new XMLHttpRequest()\n      req.addEventListener 'readystatechange', ->\n        if req.readyState is 4\n          successResultCodes = [200, 304]\n          if req.status in successResultCodes\n            data = eval '(' + req.responseText + ')'\n            console.log 'Loaded language file: ', data.langName\n            ContentTools.STRINGS = data;\n          else\n            console.error 'Error loading language file.'\n          ContentTools.LANG_LOADING = false\n      req.open 'GET', url, false\n      req.send()\n...\n```\ntools.coffee:\n``` coffeescript\n...\nCommon tools\nclass ContentTools.Tools.Bold extends ContentTools.Tool\n# Make the current selection of text (non)bold (e.g <b>foo</b>).\n\nContentTools.ToolShelf.stow(@, 'bold')\n\n@label = if ContentTools.STRINGS is null then 'Bold' else ContentTools.STRINGS.tools.labels.bold\n@icon = 'bold'\n\n...\n```\ninit of editor:\n``` javascript\n            ContentTools.setLangUrl('/js/content-tools/lang/cs_CZ.json');\n        ContentTools.StylePalette.add([\n            new ContentTools.Style('Warning', 'alert alert-warning', ['p','div']),\n            new ContentTools.Style('Button', 'btn btn-primary', ['a'])\n        ]);\n\n        var editor = ContentTools.EditorApp.get();\n        editor.init('*[data-editable]', 'data-name');\n\n```\ncs_CZ.json:\njson\n{\n    \"langName\": \"\u010cesky - cs_CZ\",\n    \"tools\": {\n        \"labels\":{\n            \"bold\": \"Tu\u010dn\u011b\",\n            \"italic\": \"Kurz\u00edvou\",\n            \"link\": \"Vlo\u017eit odkaz\"\n        }\n    }\n}\n. Ok, I was just curious how it works. Sign me as volunteer for Czech translation.\n. Thank you for feedback, my JS knowledge is poor, so I meant it only as suggestion of functionality. I will try to rewrite this in coffeescript, just for myself. I also take a look into sandbox. \nOdesl\u00e1no ze smartphonu Sony Xperia\u2122\nAnthony Blackshaw notifications@github.comnapsal/a:\n\nHi @tvaliasek thanks for the suggestion. Any changes would have to be submitted as changes to the CoffeeScript not the JavaScript as the JavaScript is built using grunt from the CoffeeScript. I only leave compiled JavaScript in place for builds and external dependencies (as in this case content-edit.js is a dependancy for ContentTools so the changes would need to be made to the CoffeeScript in that repo https://github.com/GetmeUK/ContentEdit and the dependancy updated in this one - I'm sorry if that seems very convoluted).\nUsing CoffeeScript the function parameters might be changed like so to use splats:\naddCSSClasses: (domElement, classNames...) -> ... \nAllowing the function to be called like so:\nContentEdit.addCSSClasses(myElement, 'alert', 'alert-warning'); \nWhich I agree would potentially be an improvement, however really it seems like what you'd really like is to be able to set multiple classes when defining a style, perhaps in the form:\nnew ContentTools.Style('Warning', ['alert', 'alert-warning'], ['p','div']), \nYou'll note that in the sandbox demo included in the repo there is a set of classes for setting good and bad example styles. Here I have to use 3 styles; Example, Good example, Bad example. On this basis I agree with you that support for multiple classes would be an improvement, it requires less options to be shown to the user and also prevents the issue where the user doesn't realise they need to select both Example and Good example.\nI don't believe your suggested solution will solve this problem fully however as whilst multiple classes will be applied the editor wont correctly check that both classes are applied to the current element and therefore the switch wont update correctly (at least I believe that's the case).\nI think the changes actually need to be made in the ContentTools library to the following sections:\nhttps://github.com/GetmeUK/ContentTools/blob/master/src/scripts/styles.coffee#L31https://github.com/GetmeUK/ContentTools/blob/master/src/scripts/ui/inspector.coffee#L143https://github.com/GetmeUK/ContentTools/blob/master/src/scripts/ui/dialogs/properties.coffee#L57 \nThis is definitely a feature I'd like to add/see moving forward.\n\u2014\nReply to this email directly or view it on GitHub.\ufffc\n. Btw. I think, the switch is updated somehow correctly, I have spent half a day on trying to achieve it. :)\n\nOdesl\u00e1no ze smartphonu Sony Xperia\u2122\nAnthony Blackshaw notifications@github.comnapsal/a:\n\nHi @tvaliasek thanks for the suggestion. Any changes would have to be submitted as changes to the CoffeeScript not the JavaScript as the JavaScript is built using grunt from the CoffeeScript. I only leave compiled JavaScript in place for builds and external dependencies (as in this case content-edit.js is a dependancy for ContentTools so the changes would need to be made to the CoffeeScript in that repo https://github.com/GetmeUK/ContentEdit and the dependancy updated in this one - I'm sorry if that seems very convoluted).\nUsing CoffeeScript the function parameters might be changed like so to use splats:\naddCSSClasses: (domElement, classNames...) -> ... \nAllowing the function to be called like so:\nContentEdit.addCSSClasses(myElement, 'alert', 'alert-warning'); \nWhich I agree would potentially be an improvement, however really it seems like what you'd really like is to be able to set multiple classes when defining a style, perhaps in the form:\nnew ContentTools.Style('Warning', ['alert', 'alert-warning'], ['p','div']), \nYou'll note that in the sandbox demo included in the repo there is a set of classes for setting good and bad example styles. Here I have to use 3 styles; Example, Good example, Bad example. On this basis I agree with you that support for multiple classes would be an improvement, it requires less options to be shown to the user and also prevents the issue where the user doesn't realise they need to select both Example and Good example.\nI don't believe your suggested solution will solve this problem fully however as whilst multiple classes will be applied the editor wont correctly check that both classes are applied to the current element and therefore the switch wont update correctly (at least I believe that's the case).\nI think the changes actually need to be made in the ContentTools library to the following sections:\nhttps://github.com/GetmeUK/ContentTools/blob/master/src/scripts/styles.coffee#L31https://github.com/GetmeUK/ContentTools/blob/master/src/scripts/ui/inspector.coffee#L143https://github.com/GetmeUK/ContentTools/blob/master/src/scripts/ui/dialogs/properties.coffee#L57 \nThis is definitely a feature I'd like to add/see moving forward.\n\u2014\nReply to this email directly or view it on GitHub.\ufffc\n. \n",
    "btbjosh": "Any update on this feature? I'd like to use this within ui frameworks and it makes the most sense to apply multiple css style classes at once like ui button green etc\n. Thanks for the follow-up. We ended up needing a different type of editor. Although I would love to use ContentTools in the future. Great job!\n. ",
    "bfintal": "Interested in this as well.\n. I have created a ContentEdit.Div element, it only handles the scenarios that I can see in my own use-case that's why I haven't created a PR for it. \nI've made divs super strict for my use wherein it extends ContentEdit.ElementCollection so it can only contain other elements. Once you extend it then the rest is quite easy. :+1: \n. I think this should be closed since this is outside the scope of content tools\n. +1 for Bower\n. For my own use, I also need a start event so that I can attach another mousedown event to different toolUIs in the toolbox. I would also use it to attach event handlers to the current area being edited, then remove those handlers when stopping the editor.\n. One solution I can see is to mimic the set up of the existing save event - where the last line of the function is an event trigger.\nSubmitted PR #40\n. @anthonyjb Yes that would be ideal. If there's something like that then others would be able to also attach handlers to the toolbar buttons, this was one of the intentions for the need for a start event.\nand I would be able to fix this quite hacky code :)\n```\nwindow.GBEditor.getToolUI = function( name ) {\n    return ContentTools.EditorApp.get()._toolbox._toolUIs[ name ];\n};\nvar tool = window.GBEditor.getToolUI('align-right')._domElement;\ntool.addEventListener('mousedown', function() {\n    console.log('clicked');\n});\n```\nI'm all against keeping my own separate codebase, I'd rather send a PR :)\n. Even if there's content in it, it's still failing :)\n. The reason I'm actually using comments is that I needed to add some sort of hidden marker inside the html. So for if I generate <!--marker1--> ...unknown html... <!--/marker1-->, I can get the insides of those comments when saving and process them in a different way. \n. Right now as an alternative I'm wrapping the content inside a div with a data-ce-tag=\"static\", although the thing is I don't know what will be inside that so I might be messing up the content by adding a div. The best thing I thought was to add starting & ending comment tags so I can keep track of them. They need to be inside the editable content though.\n. So will comments not be stripped out anymore? :)\n. A moveable-static would be awesome.\nMoving shouldn't be a problem I think. If the movement performed is the same thing that happens with the rest (kinda like just moving the dom around), then there shouldn't be any problem. The main parent that has the movable-static attribute would be wholly moved.\n. Tomorrow would be great!! :+1: \n. Just tried it! and It works great! I'm doing an experimental WordPress plugin using Content Tools and I'll keep you updated on it :)\n. Nevermind, spoke too soon\nvar focused = ContentEdit.Root.get().focused()\nfocused.content = focused.content.concat('something')\nfocused.updateInnerHTML()\n. Here's a bit of background: in a nutshell I'm trying to integrate it with WordPress in such a way that ContentTools will be the content editor while in the frontend of a site. The two major hurdles are 1) you don't really know what content will be there.. any content should be editable and any content can be inserted into the editor. The next hurdle is 2) parts of the content are rendered HTML or shortcodes, and these should not be editable - you also don't know what will be contained in these. I've got second hurdle pinned down by filtering these out and using your new movable static attribute.\nRight now I'm testing various scenarios for the first hurdle, like having divs inside the content which should be editable. I'm using a single editor to make things simpler, since if each div would be turned into an editor, letting users add divs in then initializing those too can make things complicated.\n. FYI: I don't know coffeescript and I'm just winging these\n. Now that I've dug deeper into the code, I don't think this is at all possible.\n. Let's not tackle this :)\n. Here's how I'm doing it. Initially, the content is this:\n<div data-editable data-name=\"main-content\">\n    <p>\n        <a href='#'>\n            <img src='http://placehold.it/350x150'/>\n        </a>\n    </p>\n</div>\nAfterwards, I start the editor then it moves it out. I think the image shouldn't be moved out of the link and it should be handled. What's happening with the image inside the link?\nI can't actually add images as of the moment. I tried it but nothing's happening, probably since I'm doing this in WordPress or that I'm not handling uploads yet. So I can't check the marked up html yet for images with a link.\nPrior to editing, I also tried adding data-ce-tag=\"img\" to the a tag but it still does the same. I also tried adding it to the p tag but it just disappears.\n. Still the same thing. In the sandbox, I added this (this is from the inspector):\n<p>\n    <a href=\"#\">\n        <img src=\"http://placehold.it/350x150\" alt=\"Example of bad variable names\">\n    </a>\n</p>\n<p>\n    <a href=\"#\" data-ce-tag=\"img\">\n        <img src=\"http://placehold.it/350x150\" alt=\"Example of bad variable names\">\n    </a>\n</p>\nAfter clicking the edit, I'm getting this:\n<p class=\"ce-element ce-element--type-text\">\n    <img alt=\"Example of bad variable names\" src=\"http://placehold.it/350x150\">\n    <a href=\"#\"></a>\n</p>\n<p class=\"ce-element ce-element--type-text\">\n    <img alt=\"Example of bad variable names\" src=\"http://placehold.it/350x150\">\n    <a data-ce-tag=\"img\" href=\"#\"></a>\n</p>\nI'm using Chrome in Mac OS X 10.11\n. Yup, you cannot add them, I'm totally fine with that. I'm modifying the HTML for editing them then performing the necessary CT functions so that the editor can see the changes like you mentioned.\nThanks, hopefully we can fix it :)\n. Wow that was fast. Thanks! Confirmed on my end :+1: \n. How about when the drop is performed in the same place?\n. Thank you!\n. Oh, and the docs in the site are already updated too :+1: \n. Okay so I tried the new events. The drop event isn't getting triggered when the drag is cancelled - e.g. you drag it to the same place. I think it should still get triggered, since if you do something during the drag event, you can't perform an undo method on the drop event since it isn't called.\nMaybe you can add a cancelled boolean property to the object?\nI have worked around this, to capture the cancelled drag event by adding a mouseover handler to the dom element after the drag event, then removing it right after.\n. Super thanks yet again! :+1: \n. Yup that fixes the problem. However, the error isn't really affecting the rest of the script so I'm just leaving it as is and just wait for the update :+1:\nSo before detaching, we should check first if the element being detached (or one of it's children) is focused and blur it first before proceeding.\nWill see about putting a PR on this, but I'm focusing on other things right now :(\n. Thanks! What however would be a good use case for the manual blurring upon detachment? Just curious.\nBecause if the issue is with regards to the element being re-attached again after it got detached, then we could just keep note of the element which was auto-blurred then bring back the focus to it if it gets re-attached.\n. I would agree about using the existing INDENT property so we won't have to add another one.\n. On second thought I don't think we need pointer-events: none since you're still hovering over the same element, so the events will be all fired fine.\nSo I think this can be a matter of changing from the background-image into a pseudo element.\n. Just tested this and it works. Looks much better since it's overlaid on top of all the elements:\n.ce-element--drop-below {\n    position: relative;\n    z-index: 1;\n    &:before {\n        position: absolute;\n        content: '';\n        top: 0;\n        right: 0;\n        left: 0;\n        bottom: 0;\n        z-index: 2;\n        background: url(../inc/content-tools/images/ce-drop-below.png);\n        background-color: rgba(25, 181, 254,1);\n        opacity: .8;\n    }\n}\nI also tried a pure css approach but it was quite messy:\n.ce-element--drop-below {\n    position: relative;\n    z-index: 1;\n    &:before {\n        position: absolute;\n        content: '';\n        top: 0;\n        right: 0;\n        left: 0;\n        bottom: 0;\n        z-index: 2;\n        background: -webkit-repeating-linear-gradient(45deg, rgba(255,255,255,0) 0, rgba(255,255,255,0) 90%, rgba(255,255,255,1) 91%, rgba(255,255,255,1) 100%), -webkit-repeating-linear-gradient(-225deg, rgba(255,255,255,0) 0, rgba(255,255,255,0) 90%, rgba(255,255,255,1) 91%, rgba(255,255,255,1) 100%), -webkit-repeating-linear-gradient(45deg, rgba(255,255,255,0) 0, rgba(255,255,255,0) 90%, rgba(255,255,255,1) 91%, rgba(255,255,255,1) 100%), -webkit-repeating-linear-gradient(-225deg, rgba(255,255,255,0) 0, rgba(255,255,255,0) 90%, rgba(255,255,255,1) 91%, rgba(255,255,255,1) 100%);\n        background: -moz-repeating-linear-gradient(45deg, rgba(255,255,255,0) 0, rgba(255,255,255,0) 90%, rgba(255,255,255,1) 91%, rgba(255,255,255,1) 100%), -moz-repeating-linear-gradient(315deg, rgba(255,255,255,0) 0, rgba(255,255,255,0) 90%, rgba(255,255,255,1) 91%, rgba(255,255,255,1) 100%), -moz-repeating-linear-gradient(45deg, rgba(255,255,255,0) 0, rgba(255,255,255,0) 90%, rgba(255,255,255,1) 91%, rgba(255,255,255,1) 100%), -moz-repeating-linear-gradient(315deg, rgba(255,255,255,0) 0, rgba(255,255,255,0) 90%, rgba(255,255,255,1) 91%, rgba(255,255,255,1) 100%);\n        background: repeating-linear-gradient(45deg, rgba(255,255,255,0) 0, rgba(255,255,255,0) 90%, rgba(255,255,255,1) 91%, rgba(255,255,255,1) 100%), repeating-linear-gradient(315deg, rgba(255,255,255,0) 0, rgba(255,255,255,0) 90%, rgba(255,255,255,1) 91%, rgba(255,255,255,1) 100%), repeating-linear-gradient(45deg, rgba(255,255,255,0) 0, rgba(255,255,255,0) 90%, rgba(255,255,255,1) 91%, rgba(255,255,255,1) 100%), repeating-linear-gradient(315deg, rgba(255,255,255,0) 0, rgba(255,255,255,0) 90%, rgba(255,255,255,1) 91%, rgba(255,255,255,1) 100%);\n        background-color: rgba(25, 181, 254,1);\n        background-position: 9px 9px, 9px 9px, 36px 36px, 36px 36px;\n        -webkit-background-origin: padding-box;\n        background-origin: padding-box;\n        -webkit-background-clip: border-box;\n        background-clip: border-box;\n        -webkit-background-size: 50px 50px;\n        background-size: 50px 50px;\n        opacity: .8;\n    }\n}\nI used http://enjoycss.com/ to generate the pattern. If it's that messy though, might as well just base64 encode the image if you want it free from external assets.\n. In the PR, I've removed also the force removal of backgrounds in tables since the background of the element isn't touched any more.\n. I'm getting these:\nContentTools.ToolboxUI > Keyboard short-cuts\n     - should allow a non-content element to be removed with the delete key shor\n     \u2713 should allow a non-content element to be removed with the delete key short-cut\n     X should allow a undo to be triggered with Ctrl-z key short-cut\n       Expected 1 to be 2. (1)\n     X should allow a redo to be triggered with Ctrl-Shift-z key short-cut\n       Expected 2 to be 1. (1)\nI didn't have any changes except for the css though.\n. I've added !important to z-index and the jasmine error (unrelated) magically went away. It's a weird anomaly.\n. I doubt it, the original error I encountered was in js ContentTools.ToolboxUI, and that definitely isn't affected by CSS.\nI do sometimes get errors with Travis-CI in another project and just need to do a refresh to fix it because it failed to download a file, set up something, etc\n. I have not noticed that when you hold the mouse longer it turned into a table drag. Alright, never mind that :+1: \n. No. 2. I think this is the correct behavior except that the link shown shouldn't be the first href but maybe a label that says \"multiple links\". Then overwriting that label would set the link for the entire selection.\nNo. 4. Personally I prefer deleting the rows/list items one by one then when the last one gets deleted the table/list gets deleted entirely. This is mostly because I don't think holding ctrl would be intuitive to most people.\n. @anthonyjb I didn't know that even existed!\n. No. 3 The heading/subheading/paragraph buttons should look depressed if they're applied.\n. - I can replicate in Mac Chrome\n- Can't in Mac Firefox\n- Can't in Mac Safari\nMaybe because in Mac FF & Safari the paragraph won't delete unlike in Chrome.\n. :+1: \n. Native events are fine, but I don't think it's a required change. For me the main benefit would be a shorter syntax with editor.addEventListener, but aside from that, I don't see any other benefits (let me know if there are others, I'm not a Javascript guru).\nWhy overhaul the event system?\n. The reason I placed this here is because I can't override the styles on the image to bring it back to their defaults. I can easily override this with body img but I don't know what the defaults are since the project I'm doing is going on top of sites which may have or may have not their own style rules.\n. +1\nNote that this error only happens when the image/link is highlighted then dragged.\n. I have plans to do something like this. But if this will be built in, then that would be very awesome.\n. To replicate, just create a link, then highlight it or the whole paragraph then paste it. The link (as well as other formatting such as bold) get removed. Is this the intended behavior?\n. Wow my mistake, I never realized that clicking the table tool inside a table opens up it's settings. I thought it was always used for adding tables.\n. @anthonyjb Yup that's pretty much how I'm doing it.\n1. Listen to blur events on Text elements\n2. Check the contents of the text element\n3. If it's valid html (or another thing), create the new element\n4. Swap out the text element with the new element\n. I didn't notice that this was changed now. I also was looking into this before. Thanks @anthonyjb \n. I can see that too, but that's while I'm editing. I see the broken output when I stop editing and when everything gets unmounted.\nYou can see this if you feed this object into the attributesToString function:\n{\n    'style': 'background-image: url(\"http://somepath.to/image.jpg\")'\n}\nIt would return this without the fix:\n'style=\"background-image: url(\"http://somepath.to/image.jpg\")'\"'\n. :+1: \n. I'm unsure about this. At one hand I like everything being trimmed and clean, it kind of forces things to be neat. On the other hand, it feels that linebreaks should be allowed.\n. So far in my tests I only see this in Firefox (which is frustrating), it works great in mine in Mac Chrome, although I haven't tested in a Windows system.\nI'm creating tools and when I do a storeState then restoreState after I perform the changes, everything works in Chrome. In Chrome I can type something, hit a tool, then continue on typing. In Firefox however, you can't continue.\n. Just tried it, it doesn't seem to be working for me\n. It now works! Thanks! :+1: \n. Yup I know. But if you don't click on another element, but just enough to lose the caret, they don't go away. Perhaps that should be the bug :)\n. Thanks!\n. Thanks for the fix. Found something unwanted. Now if you have a blank text element then click on the heading tool, the element now disappears. Prior to the fix the element won't disappear :)\nI think it's because the element lost focus because the toolbox was clicked.\n. I agree, I think instead the fix should be to bring force the caret back on click if it's not there.\n. I think this issue got closed again by accident :)\n. I think this is okay :)\n. I take that back. Now because of the change, you can't add a blank text element, then add an image/video since the focus goes away.\nI really think the right approach would be just to force back the caret if it's gone from an empty text element, since that's the problem. The fix has ramifications :( I'll check into how that should be done. I'm rolling back my copy.\n. Here's a solution to replace the last commit. I took the approach that I mentioned. To avoid any unwanted effects, I only fixed the exact problem: if the text element is empty, it cannot be clicked on again to bring back the cursor. Sorry, as much as I want to send a PR, it's easier and faster for me to do this is pure JS\nText.prototype._addDOMEventListeners = function() {\n    Text.__super__._addDOMEventListeners.call(this);\n    return this._domElement.addEventListener( 'mousedown', (function(_this) {\n        return function(ev) {\n            if ( ! _this.isMounted() ) {\n                return;\n            }\n            if ( _this.content.isWhitespace() ) {\n                var selection = new ContentSelect.Range(0, 0);\n                return selection.select( _this.domElement() );\n            }\n        };\n    })(this));\n};\n. Just found out that the previous change also messed with the history :(\n. @anthonyjb Yup, exactly :)\n. Ah I remember that. From what I remember though, the issue why that was implemented is similar and may actually be also solved by the above fix.\n. Reference: #116 \n. +1 I think this is functionally the same. Good that it can be placed in the same hack fix :)\n. I can confirm that the cast_sender.js errors are from the YT video.\n. Hey @dantejauregui Yup, I've been developing Page Builder Sandwich for quite a while now https://pagebuildersandwich.com\n. Haven't tried the new change yet. I've been extending a lot of aspects of CT extensively, I'll check if the updater thing has some negative impact :)\n. Here's what I'm doing right now to check states. A getState() and a ready event would be great :)\nvar editor = ContentTools.EditorApp.get();\neditor.bind('start', function() {\n    // CT just started.\n});\neditor.bind('stop', function() {\n    // CT just stopped.\n});\nvar starterInterval = setInterval( function() {\n    if ( document.querySelector( '.ct-widget--active' ) ) {\n        clearInterval( starterInterval );\n        // CT is now ready.\n    }\n}, 200);\n. How about editor events? :)\n. Just tested this, the patch worked for us during tests.\n. I also just started to experience this. I'm on a Mac so I can't currently test this, but I had our tester do some tests on her machine. I'm not too sure about what to think about this finding.\nOne way to replicate (at least in Page Builder Sandwich):\n1. Create an empty document with CT,\n2. Write some short text, then save, and reload the page (CT should still work)\n3. Edit again, but now write more text until it wraps to the next line; then save, and reload the page (CT should stop working).\nAs with the OP said, it begins working when you have dev tools open.\n. We are on a holiday tomorrow, but we can test your patch on Thursday when we're back in the office.\n. We'll also test the fix stated in #258 on Thursday and report back\n. Just tested #258, the patch worked for us during tests.\n. @anthonyjb Okay just heard back from our tester. She tested http://getcontenttools.com/demo in Edge and it hangs after clicking the edit/pencil button when the console is closed. After clicking the pencil button, the gear icon shows up that it's busy then nothing happens. When the console is open, the editor starts, but as soon as one of the buttons are pressed (e.g. right-aligning), it errors out. Saying that addTags is undefined (which I think refers to the patch you're going to add in #258)\n. If you think about it, should strong, italic, and headings be allowed inside preformatted text? The pre spec doesn't say anything about restrictions though.\n. Oh yeah nevermind. Because syntax highlighters add span tags :)\n. Thanks for the fix! \ud83d\udc4d \n. The steps I enumerated above works in the sandbox / demo :)\n. In the code for PreText.prototype._onKeyUp.. I think this should fix it:\n//html = html.replace(/\\u200B$/g, '');\nhtml = html.replace(/\\u200B/g, '');\n. I have a Tabs element that's a bit complex and is composed of multiple elements. For example, for an empty 2 tab element, I'd end up with an element with the following element structure:\nTabs\n    TabContainer\n        Tab\n        Tab\n    TabPanelContainer\n        Panel\n        Panel\nEach Tab can be dragged onto one another to switch them around. But for the TabContainer itself, I'd like everything to bypass it completely and instead of having items dropped in it, items would drop around the main Tabs element. The * dropper is currently implemented in the TabContainer element.\nHere's how I implemented it via patching:\n``\n/**\n * Allow` droppers.\n /\n( function() {\n   var proxied = ContentEdit.Element.prototype.drop;\n   ContentEdit.Element.prototype.drop = function( element, placement ) {\n        var root = ContentEdit.Root.get();\n        if ( element && typeof element.type !== 'undefined' ) {\n            if ( ! this.constructor.droppers[ element.type() ] && ! element.constructor.droppers[ this.type() ] && element.constructor.droppers['*'] ) {\n                element._removeCSSClass( 'ce-element--drop' );\n                element._removeCSSClass( 'ce-element--drop-' + placement[0] );\n                element._removeCSSClass( 'ce-element--drop-' + placement[1] );\n                element.constructor.droppers'*';\n                root.trigger( 'drop', this, element, placement );\n                return;\n            }\n        }\n        return proxied.call( this, element, placement );\n    };\n} )();\n( function() {\n   var proxied = ContentEdit.Element.prototype._onOver;\n    ContentEdit.Element.prototype._onOver = function(ev) {\n        var ret = proxied.call( this, ev );\n        if ( ! ret ) {\n        var root = ContentEdit.Root.get();\n        var dragging = root.dragging();\n        if ( ! dragging ) {\n            return;\n        }\n        if ( dragging === this ) {\n            return;\n        }\n        if ( root._dropTarget ) {\n            return;\n        }\n        if ( this.constructor.droppers['*'] ) {\n            this._addCSSClass( 'ce-element--drop' );\n            return root._dropTarget = this;\n        }\n    }\n    return ret;\n};\n\n} )();\n```\n. ",
    "Pandahisham": "following \n. ",
    "crazy4groovy": "@anthonyjb Yup that's true, I was thinking something very basic like a prompt box from the bookmarklet that asks for node(s) the ~~used~~ users wants to edit. \neg. which nodes: p,div\n. ",
    "saravntbe": "@anthonyjb   Just leaving a note to say thanks for accepting this commit. This was my first ever contribution to open source. It was quite small, but it got me started. Thanks :-)\n. ",
    "MarkusCodes": "Thanks for your polite answer! Actually, after reading my onw request, I should have formulated it equally polite. The most important thing is, that you enjoy working on your project. Lucilly, ES6 has adopted many concepts of CoffeeScript (somehow proving the point of CoffeeScript). Regarding browser-support, you may just replace the CoffeeScript-transpiler by babel, typescript etc., but I am sure you know all this better than me. So anyhow, thanks again for this great project!\n. ",
    "edwinyzh": "I also wish this very well written and well documented lib is in javascript :)\n. ",
    "twn39": "don't forget this page :)\nhttp://getcontenttools.com/tutorials/saving-strategies\n. ",
    "petrleocompel": "This would be great feature.\nI'm integrating bootstrap grid on my own.\nSo every div.column should be in div.row and div.row should be in div.container (div.container-fluid).\nI'm making it extendable so you can use any framework (Foundation, Bootstrap, Skeleton) :blush: :relieved: \nBut it's a lot of work. :disappointed_relieved: \n. I havent started yet. But if you want to some drag'n'drop email designer use this.\n. ",
    "jesperstarkar": "Any concrete plans on supporting DIVs and non-block elements? It would be absolutely killer\n. ",
    "developit": "Would it be possible to use Custom Elements (from the Web Components spec) to achieve this?  That would let HTML remain the markup layer, but allow injecting arbitrary content and behavior between the outer and inner portions of a flow/region (using shadow DOM + <content>).  Thoughts?  My use-case for this would be to edit HTML5 with custom elements, using ContentTools' properties editor to configure attributes on the Custom Elements that are used when rendering the content after it is pulled from a CMS.\n. Just wanted to drop a note here mentioning it would be nice to see this migrate to a more standardized npm + (rollup/browserify/webpack/babel/whatever) module architecture. \n. ",
    "carnevlu": "Hi @petrleocompel are you still working on the integration of bootstrap/foundation layout?\nI'll probably try to integrate foundation-email but I'm not sure how, so if there is some guideline, like your idea, it'll be easier.\n@bfintal it'll be possible for your to share your extension of the ContentEdit.ElementCollection? It'll be a valid solution for the foundation-email integration in a first time. \n. +1 for NPM + Browserify\n. ",
    "wotta": "Isn't there a way to add a extra button that gives an option to create a new element,\nAnd after the element has been added to reload content.tools and get all editable elements from the dom ?\n. @anthonyjb will that be integrated in Contenttools? (not really awake yet) . @anthonyjb aah cool, I will need to take a look at it again.\nThanks for the feature \ud83d\udc4d . @anthonyjb If this issue is done you can close it. ( as it give the feeling that there are a lot of issues ).\nAlso you closed the reference issue to.\n. @nXu did you already figured it out and is it solved or not yet ? \n. @anthonyjb I will try to do this tomorrow.\nIt seams it's something I encounterd to but I am not completely sure. \nIf I cannot recreate it and he doesn't respond you can close this issue until further notice.\n. It is possible that you changed the ajax request and you got a 500 error.\nI had that happen and I only saw a gear icon.\nI am not sure if that is what you saw.\n. @nXu @anthonyjb \nThis is what I have encounterd when I saved to a page that returned a 500 internal server error.\nI think this is the closest I can get the to actual problem.\nThe gear icon keeps spinning and doesn't show a actual error for the user.\nhttp://s32.postimg.org/n5av7e2cl/Schermafbeelding_2016_05_02_om_09_46_46.png\n. @nXu What version of contenttools are you running and do you have a demo of the how you implemented it ?\n. Also take a look at : https://github.com/jsdelivr/jsdelivr/blob/master/CONTRIBUTING.md\n. @anthonyjb  sure no problem, thought it was easier for everyone if you can just use a cdn.\nLet's hope it gets accepted now.\n. Hi Anthony. \nLet me rephrase since you are better with js then me.\nIs there a way I can double click the img icon or change the whole body of the image modal ? \nIf I can double click the image I should be able to pass trough the url of the image I want to select.\nAnd if I can change the contents of the modal I should be able to place a iframe of some sort there. \nIf you want you can take a look at kcfinder integration.\nThat's done in js, maybe it can help you come up with a solution. \nBest regards, \nWouter. \n. Heej Anthony, \nCould we be able to talk on Skype tomorrow? \nI still cannot figure it out and I think my explanation goes nowhere.\nIf you think that is ok may I send you a direct mail.\nBest regards, \nWouter. \n. For other people who want to use KCFinder this is the code anthony came up with.\nHere is the code we used to get it working correctly.\n``` javascript\n// So this little bundle of variables is required because I'm using CoffeeScript\n// constructs and this code will potentially not have access to these. Longer \n// term we can look to bring this into the core library as an integration option\n// and rewrite it in CoffeeScript but (despite appearances) this is probably\n// easier for the moment as you're not used to CoffeeScript.\nvar slice = [].slice,\n__indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n__hasProp = {}.hasOwnProperty,\n__extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super = parent.prototype; return child; },\n__bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n// Define out KCFinder image tool\nvar KCFImageTool = (function(_super) {\n    __extends(KCFImageTool, _super);\nfunction KCFImageTool() {\n  return KCFImageTool.__super__.constructor.apply(this, arguments);\n}\n\n// Register the tool with ContentTools (in this case we overwrite the \n// default image tool).\nContentTools.ToolShelf.stow(KCFImageTool, 'image');\n\n// Set the label and icon we'll use \nKCFImageTool.label = 'Image';\nKCFImageTool.icon = 'image';\n\nKCFImageTool.canApply = function(element, selection) {    \n    // So long as there's an image defined we can alwasy insert an image\n    return true;\n};\n\nKCFImageTool.apply = function(element, selection, callback) {\n\n    // Configure the KCFinder application\n    window.KCFinder = {\n        callBack: function(url) {\n            // Once the user has selected an image insert it\n\n            // Create the image element\n            var image = new ContentEdit.Image({src: url, width: 400, height: 400, 'data-ce-max-width': 800});\n\n            // Insert the image\n            var insertAt = KCFImageTool._insertAt(element);\n            insertAt[0].parent().attach(image, insertAt[1]);\n\n            // Set the image as having focus\n            image.focus();\n\n            // Call the given tool callback\n            return callback(true);\n\n            window.KCFinder = null;\n        }\n    };\n\n    // Open the KCFinder\n    window.open(\n        '/path-to-kcfinder/browse.php?type=images&dir=images/public', \n        'kcfinder_textbox',\n        'status=0, toolbar=0, location=0, menubar=0, directories=0, ' +\n        'resizable=1, scrollbars=0, width=800, height=600'\n    );\n\n};\n\nreturn KCFImageTool;\n\n})(ContentTools.Tool);\n```\n. But if I don't set the height and width the image will be inserted very small.\nIs there a  way to insert percentages as values ? \n. Well I need to find a way to get the sizes back from kcfinder.\nBut I also saw that JS has a image class that can be used so I will try that.\n. @anthonyjb No sorry did not have the time since I have been busy with work.\nI will check if I can get it working in the afternoon.\n. @anthonyjb Here is the javascript code that returns the full width and height of a image ( get's it from url )\nfunction getImageSizes(url) {\n    var img = new Image();\n    img.onload = function(){\n        alert( this.width+' '+ this.height );\n    };\n    img.src = url;\n}\nMaybe use that in the core so people do not have to give in the images sizes ?\nI have changed my code with the new snippet but now I cannot save anymore.\nHere is the code now : \n```\n// So this little bundle of variables is required because I'm using CoffeeScript\n// constructs and this code will potentially not have access to these. Longer \n// term we can look to bring this into the core library as an integration option\n// and rewrite it in CoffeeScript but (despite appearances) this is probably\n// easier for the moment as you're not used to CoffeeScript.\nvar slice = [].slice,\n__indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n__hasProp = {}.hasOwnProperty,\n__extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super = parent.prototype; return child; },\n__bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n// Define out KCFinder image tool\nvar KCFImageTool = (function(_super) {\n    __extends(KCFImageTool, _super);\nfunction KCFImageTool() {\n  return KCFImageTool.__super__.constructor.apply(this, arguments);\n}\n\n// Register the tool with ContentTools (in this case we overwrite the \n// default image tool).\nContentTools.ToolShelf.stow(KCFImageTool, 'image');\n\n// Set the label and icon we'll use \nKCFImageTool.label = 'Image';\nKCFImageTool.icon = 'image';\n\nKCFImageTool.canApply = function(element, selection) {    \n    // So long as there's an image defined we can alwasy insert an image\n    return true;\n};\n\nKCFImageTool.apply = function(element, selection, callback) {\n\n    // Configure the KCFinder application\n    window.KCFinder = {\n        callBack: function(url) {\n            // Once the user has selected an image insert it\n            var imageSizes = new Image();\n            imageSizes.src=location.protocol + '//' + location.host + url;\n\n            // Create the image element\n            var image = new ContentEdit.Image(\n                {\n                    src: url,\n                    width: imageSizes.width, // Gets default image width\n                    height: imageSizes.height // Gets default image height\n                });\n\n            // Insert the image\n            var insertAt = KCFImageTool._insertAt(element);\n            insertAt[0].parent().attach(image, insertAt[1]);\n\n            // Set the image as having focus\n            image.focus();\n\n            // Call the given tool callback\n            return callback(true);\n\n            window.KCFinder = null;\n        }\n    };\n\n    // Open the KCFinder\n    window.open(\n        '/filemanager/browse.php?type=images&dir=images/public', \n        'kcfinder_textbox',\n        'status=0, toolbar=0, location=0, menubar=0, directories=0, ' +\n        'resizable=1, scrollbars=0, width=800, height=600'\n    );\n\n};\n\nreturn KCFImageTool;\n\n})(ContentTools.Tool);\n```\nGot it working with the code above.\nI had some double field.\nMaybe a way to scale down the image if is bigger then 800px width ?\nBut still be able to scale to max height and width.\n. But isn't there a way to insert that snippet in the main code and make a option to turn it on or off ?\nMaybe it will help out some people with just turning it on if needed ? \n. @anthonyjb Yeah sure I am willing to help out.\nI actually created a repo for the KCFinder intergration.\nI will make a tutorial for it this week ( I don't know when yet ).\nBut I will contact you when I have more information about it.\nHave a nice day.\n. @Rverm Jup that is completely true.\nIf you use php I will be able to help you with what you need.\nKCFinder is a filemanager that is able to give back the url that you click on from the image folder.\nIt sounds like it is something you want to use.\n. @Rverm I Will try to create the tutorial this weekend.\nThere is only one thing I need to know for you specific.\nDo you use a framework by any change ? \nIf so which one.\n. @Rverm the newer version of codeigniter? \nOr the old one when hosted by Ellis lab ? \n. @Rverm i am going to Wright the tutorial Today.\nIf you wish you can message me.\n. @anthonyjb is your code being compiled to ES6 ? \nthe tickets has a reaction where is being mentioned that ES5 works in edge and Es6 is kinda broken.\n. @turigeza it does not matter if CT allows it.\nIt can be useful in situations to fire off some sort of plugin that is used in multiple spots.\nI also think it is the users concern to use one or more of the same id's.. @turigeza True I know it is meant to be unique, but also some people use it in a not unique way.\nThat is why I commented with my comment hope you don't mind.. ",
    "tommedema": "@anthonyjb would contentflow help edit pages from arbitrary sources, for which no defined dom structure exists?. @anthonyjb does this mean that it is not possible to use ContentTools with arbitrary HTML pages over which you have no control, e.g. HTML that is input by users or that comes from other sites? since you cannot guarantee how the dom is structured? would other editors be more suitable then?. ",
    "pmcp": "That would be amazing. I'm running 1.4.\n. Ok, guillaumepiot, that is already incredible :)\nNow, what I want to achieve is that, when I add in an attribute, that is linked to a directive, that it renders the directive. For example:\n\nAnd my directive would be:\ndirective('testDirective', function() {\nreturn {\n        template: '<div>TEST</div>',\n        restrict: 'A',\n        replace: true,\n        link: function(scope) {\n           console.log('The directive loaded');\n        }\n    };\n})\nDo you think this is possible? I can't seem to get it to work. \nI'd put up a quick demo, but am on the road, sorry!\n. The region would be within an editable region. What I am trying to achieve is that I could add just a , add an attribute, for example: parrallax=true, and the directive would then work on this div.\nBut now I have the feeling that angularjs doesn't notice the change in attributes.\nDoes it make sense what I am asking / trying to do?\n. ",
    "piyushchauhan2011": ":+1: Thread helped a lot for clarifying some issues\n. ",
    "iit2011081": "saved event listener is getting called multiple times when I save one field , any solution for this ?. @anthonyjb this is the whole code which I have written . Please see where I am going wrong.\n```\napp.directive('ngEditor',  function(){\nfunction link(scope, element, attrs){\n\n    // Initialise the editor\n    scope.editor = new ContentTools.EditorApp.get();\n    scope.editor.init('[ng-editor]', 'ng-editor');\n\n    // Bind a function on editor save\n    if (scope.editor._bindings['saved'] && scope.editor._bindings['saved'].length > 0) {\n\n    }\n    scope.editor.addEventListener('saved', function (ev) {\n        scope.$apply(function(){\n            scope.regions = ev.regions;\n            console.log(scope.regions);\n            console.log(ev.detail().regions);\n        });\n    });\n}\nreturn {\n    link: link\n}\n\n})\n. @andyjbgm \nWhere I need to write my event listener , please see my code , i have done this way. Its not working, please tell me where I am going wrong. Also, ev.regions is giving undefined. How can I use 'this' inside $scope.apply.\napp.directive('ngEditor',  function(){\nfunction link(scope, element, attrs){\n\n    // Initialise the editor\n    scope.editor = new ContentTools.EditorApp.get();\n    scope.editor.init('[ng-editor]', 'ng-editor');\n\n    // Bind a function on editor save\n    if (scope.editor._bindings['saved'] && scope.editor._bindings['saved'].length > 0) {\n\n    }\n    scope.editor.addEventListener('saved', function (ev) {\n        scope.$apply(function(){\n            scope.regions = ev.regions;\n            console.log(scope.regions);\n            console.log(ev.detail().regions);\n        });\n    });\n}\nreturn {\n    link: link\n}\n\n})\n```. May be because of directive it is getting initialized mutiple times. . ",
    "jlgit": "I was able to figurate out, there was a mix of browser cache and old css acting out, thank you very much for your response, I really appreciate what you've done with this code!\n. Hello Guys;\nI'm sorry I didn't see the request from @Siriazer2 before, it's being a crazy day today, please let me know if you need any help still.\nTo @anthonyjb, thank you very much for the code, I think this make it easier to handle!\n. ok @Sirlazer2,  Search for the function imageUploader.fileReady and replace it with this code.\n``` javascript\ndialog.bind('imageUploader.fileReady', function (file) {\n    var formData;\n    uploadProgress = function (ev) {\n        // Set the progress for the upload\n        dialog.progress((ev.loaded / ev.total) * 100);\n    }\n    uploadComplete = function (ev) {\n        xhr = null\n        uploadProgress = null\n        uploadComplete = null\n    if (parseInt(ev.target.status) == 200) {\n        var response = JSON.parse(ev.target.responseText);\n        image = {\n            size: response.size,\n            url: response.url\n        };\n        dialog.populate(image.url, image.size);\n    } else {\n        // The request failed, notify the user\n        new ContentTools.FlashUI('no');\n    }\n}\n\ndialog.state('uploading');\ndialog.progress(0);\n\n// POST variables to send to the server\nformData = new FormData()\nformData.append('folder_name', 'uploads');\nformData.append('image', file);\n\nxhr = new XMLHttpRequest();\nxhr.upload.addEventListener('progress', uploadProgress);\nxhr.addEventListener('load', uploadComplete);\nxhr.open('POST', '_UPLOAD_HANDLER_SERVER_SIDE', true);\nxhr.send(formData);\n\n});\n```\nThe server side should handle the image resize and response with a json object with the following info:\njavascript\n{\"url\":\"\\/uploads\\/9375035le.jpg\",\"size\":[500,362]}\nTry that and let us know.\n. ",
    "JapSeyz": "@jlgit could you help me?\nThe image setup is not working for me, no matter what I do, and the documentation for Cloudinary is super buggy\n. I don't have anything yet, I've tired both local and cloudinary so far, but ended up deleting it multiple times.\nBut here is the documentation flaws I've found so far\n// The \"=\" is some leftover thing from Coffeescript I suppose\n\"function = cloudinaryImageUploader(dialog) {\"\n//Object is not defined\nfor (name in transform) {\n            if (object.hasOwnProperty(name)) {\n                transformArgs.push(name + '_' + object[name]);\n            }\n        }\n//A disturbing lack of curly brackets around the array.\n\"transforms.push(c: 'fill', w: element.size()[0], h: element.size()[1]);\"\nFrom URL: http://getcontenttools.com/tutorials/image-uploads-with-cloudinary\n. That would be absolutely fantastic!\nThank you so much :)\n. No worries\n. @anthonyjb Hah, it happens.\nI am still not having any luck though. I have two files, editor.js with auto-saving feature, and image.js with the code you just provided, just copied and pasted.\nI am not even getting a progress bar, but no server error either.\n. @anthonyjb It's working now.\nI suggest uploading a full example somewhere, it's always nicer to look at completed code than something that's patched together through a tutorial. Especially since you somewhere note \"This belongs under function x\" or \"We can put this at the bottom of x, for now\".\nAlso, thank you so much for the supreme and extremely fast support. I am super impressed with you and ContentTools! :+1: \n. @anthonyjb Of course I'm sticking with it, it does have some great potential, ease of use and is super lightweight - I won't let a mere bug stand in the way of that :p\n. ",
    "katopz": "@guillaumepiot Thanks for input. Antwort look great! I think some workflow like this \nemail template -> WYSIWYG custom email content -> finally http://www.sitepoint.com/my-current-html-email-development-workflow/\nWould be awesome services email builder/sender (and fun to dev for me)\nCheers!\n. ",
    "alexandrubau": "Thank you very much @anthonyjb for your help.\nI was referring to \"If you referring to adding new content within an existing editable area\".\nI have noticed that holding the shift key doesn't show the pulsating border. I've tried with the left shift, with the right shift, and nothing. I'm using Windows.\nThanks\n. I am using Google Chrome Version 45.0.2454.101 m\nHow many seconds should I keep the shift key pressed ? I've hold it for about 10 seconds for each of the shift keys.\n. ",
    "ahallicks": "+1 for this, I'm not seeing the pulse for editable regions either in Windows 10 Chrome Version 45.0.2454.101 m\n. Yeah, Chrome and Firefox don't work for me on Windows 10. However, the function that does the highlighting is being called. I added a console log in the script on my test site and it logged but the classes that do the highlighting don't get added.\n. ",
    "robinswaylu": "please feel free to discuss with me\n. Hi @anthonyjb, from my understanding.  Simplified Chinese(China) could be named zh-cn.json and traditional Chinese(Taiwan) be named zh-tw.json. This naming convention is commonly used in dealing with simplified and traditional Chinese.\n. ",
    "Pilskalns": "On kind a same theme - is there any known open source CMS who use ContentTools? Would love to try out for new projects.\nIf there is no one, and if I had enough time in evenings, I would love start new one.\n. ",
    "Svenskunganka": "Great, thanks a bunch! Front-end, especially for angular, is still mostly backed by Bower but NPM is is getting more and more front-end packages too, so I definitely think NPM support is a good choice as well.\n. ",
    "mdartic": "+1 for bower too\n. ",
    "kand": "+1\n. ",
    "Solinx": "+1 for NPM / browserify support\n. Thanks!\n. ",
    "mydudechris": "+1 for NPM + Browserify \n. ",
    "tmikaeld": "Another \"me too\" request for bower support.\n. Thanks, this worked great and i can manually trigger a save.\n. ",
    "ksugiarto": "Hi guys, not trying to spamming this issues, but yes definitely +1 for Bower support. Anw, thanks for the awesome work of ContentTools really love it :D\n. ",
    "paulloz": "Well, I didn't dig the event system at all and don't know where you'd like to go with this.\nA very pragmatic thought however: your second note seems relevent only if the event is fired at the start of the method.\nImho it depends on how this event system is used. Is it only noticing other elements of one's state? Is it to prevent stuff from happening in certain situations?\nI must admit I have not thought of anything before filing this issue and that this open some questions.\n. ",
    "frankbardon": "Since some of the other areas of development seem well in hand, I'll volunteer to extend the even system. My only question would be: If you plan on moving to NPM, there are excellent event handling libraries out there, and no need to re-invent the wheel. Perhaps this is part of that process, since there will be significant changes to the codebase at the same time?\n. @anthonyjb: Is there currently an estimated timeline on your version of this feature, and is there anything I can do to help speed that timeline up? We've currently integrated ContentTools into our CMS (open sourcing at a later date) and it would be nice to, for instance, edit blog post titles without leaving the page or popping a modal. I am more than willing to help, just need to make sure I'm not duplicating effort.\n. @anthonyjb Absolutely, I'd definitely be willing.\nContent validation\nThere is a fantastic validation library we'd be able to incorporate, it supports almost every concern I've had on previous projects. It's strictly a string sanitization/validation library, so there would not really be a code-dance you'd have to do around it in order to sync it to your content. Using this library, we could create either configuration or data attributes that point the save() hook where it needs to be. Essentially, an API hook into the validator library.\nError setting\nYou have done a fantastic job on the aesthetic, in terms of how interaction and display concerns take place. So, as far as this is concerned, I would definitely leave the \"how\" of an field error would take place to you.\nConfiguration\nAbsolutely, the decoupling is exactly why I picked this library for our use here. We could do a bit of environment detection inside of ContentTools allowing it to optionally decide to add field's relevant tooling. I'd just be wary of enforcing how these tools detect where they are placed.\nTo give you a bit of background on what I'm up to with ContentTools...\nWe're developing a CMS (not far from some of your video demos) using Symfony CMF as the backend. Symfony CMF uses CreatePHP as it's REST interface for saving frontend content to the backend. ContentTools allowed me to use the RDFa HTML annotations produced by CreatePHP and initialize the tool on top of those.\nNow, this poses an interesting issue in terms of creating field level editing... The tags would be formatted something like this h1 at the field level.\nhtml\n<div about=\"/cms/content/home\" typeof=\"schema:WebPage\" xmlns:schema=\"http://schema.org/\">\n    <h1 property=\"schema:headline\">The Title</h1>\n    <div property=\"schema:text\">\n        <h2>Welcome to the Symfony CMF Demo</h2>\n        <p>If you see this page, it means that the...</p>\n    </div>\n</div>\nI've hooked into the div by first reading the main div and grabbing the about, typeof and xmlns:schema properties on init and using them in the save hook to create a response. I iterate through all property^=\"schema:\" tags and post their content to the backend. That works perfectly for how ContentTools works right now.\nThe backend already supports sending the h1 as a field, so that's not a concern. We would just need to ensure that the enforcement of validation (and configuration of that validation) is not strictly tied to the markup surrounding the content in question.\n. @anthonyjb I think both approaches have merit. Typically, I use a combination of server and client validation... This could be handled by a generic validation lifecycle hook in the right place that allows a developer to do the actual validation; whether it's server or client side. I guess a decision here could be to do less, but give the developer the job of validating as they see fit. Food for thought. \n. ",
    "Cyrille37": "Hi,\nI use a dirty fashion to get fired on start/stop events : \nvar editor = ContentTools.EditorApp.get();\n    var ignition = editor._ignition ;\n    ignition.bind('start', function() {\n      console.log('Start editing !');\n    });\n    ignition.bind('stop', function() {\n      console.log('Stop editing !');\n    });\nIs there some news about this enhancement ?\nCheers.\n. Hey ;-)\nNo error, all is so nice.\nWith the use of Promise, visually the text change but when opening the properties window, in the \"code\"  tab,  I can see the initial content.\n. mmmhhh... U're right.\nThanks a lot for ur support ;-)\n. U saved me ;-)\nThe right solution was $.when.apply(null,calls).then( ... with the apply() to transform the array in arguments list.\njavascript\neditor.start = function ()\n{\n    var calls = new Array();\n    $(editor.domRegions()).each(function(idx, item){\n        calls.push( $.get({url:'/resource/'+$(item).attr('data-name'), context:{item:item}})\n        .done(function( data ) {\n            // console.log('changing '+$(this.item).attr('data-name'));\n            $(this.item).html( data );\n        }));\n    });\n    $.when.apply(null,calls).then( function(){\n        // console.log('Editing !');\n        ContentTools.EditorApp.getCls().prototype.start.call(editor);\n    })\n};\n. ",
    "gabipetrovay": "If an event refactoring is going to happen, it would be nice to have some events to catch when working with the UI (opening and closing dialogs). Also extending the UI (a new dialog, a new toolbox, or extending a toolbox with more actions) should be easy to write as plugin code.\n. Thanks! I will follow the discussion there! I will close this PR since it was only intended as an example.\n. ",
    "mimoduo": "Hey @anthonyjb you're quick! That makes sense. Anything I could do on the SASS end of things?\n. Hi @anthonyjb - awesome!\nSounds good. \nWhich method would you prefer for beginning a responsive version? My preference is min-width and having media queries directly within the selector. However, i'm open to anything! From a design standpoint we could see how well a condensed version works first yea?\n. ",
    "jacojvv-dev": "Hello, I was also using php to create a file upload.  I modified the code that was in the original page about server side implementation.\nMine also 'stopped' when it reached the end.\nMy code might not be the best, I am still a junior programmer and I have much to learn.\nI have not yet implemented crop and rotate, but will soon.\nHere is all the code I have in my content-tools.js file.\nThis was modified from the upload.\n``` javascript\nfunction imageUploader(dialog) {\n  var image, xhr, xhrComplete, xhrProgress;\n// Set up the event handlers\ndialog.bind('imageUploader.cancelUpload', function () {\n    // Cancel the current upload\n// Stop the upload\nif (xhr) {\n  xhr.upload.removeEventListener('progress', xhrProgress);\n  xhr.removeEventListener('readystatechange', xhrComplete);\n  xhr.abort();\n}\n\n// Set the dialog to empty\ndialog.state('empty');\n\n});\ndialog.bind('imageUploader.clear', function () {\n    // Clear the current image\n    dialog.clear();\n    image = null;\n  });\n//IMAGE UPLOADER FILEREADY START ----------------------------------------------------\n  dialog.bind('imageUploader.fileReady', function (file) {\n// Upload a file to the server\nvar formData;\n\n// Set the dialog state to uploading and reset the progress bar to 0\ndialog.state('uploading');\ndialog.progress(0);\n\n// Build the form data to post  to the server\nformData = new FormData();\nformData.append('image', file);\n\n//AJAX CALL START -------------------------------------------------------------------\n$.ajax({\n  xhr: function() {\n    //Instantiate XHR\n    var xhr = new window.XMLHttpRequest();\n\n    //Add Progress Event Listener\n    xhr.upload.addEventListener(\"progress\", function(evt) {\n      if (evt.lengthComputable) {\n        var percentComplete = evt.loaded / evt.total;\n        percentComplete = parseInt(percentComplete * 100);\n        console.log(percentComplete);\n        dialog.progress(percentComplete);\n\n        if (percentComplete === 100) {\n          //Upload Is Complete\n        }    \n      }\n    }, false);    \n    return xhr;\n  },\n  url: 'assets/imagePost.php',\n  data: formData,\n  cache: false,\n  type: 'POST',\n  contentType: false,\n  processData: false,\n  success: function(result) {\n\n    // Unpack the response (from JSON)    \n    response = JSON.parse(result);\n\n    // Store the image details\n    image = {\n      size: response.size,\n      url: response.url\n    };\n\n    // Populate the dialog\n    dialog.populate(image.url, image.size);\n\n    // Clear the request\n    xhr = null\n    xhrProgress = null\n    xhrComplete = null\n\n  }\n});\n//AJAX CALL END ---------------------------------------------------------------------\n\n});\n  //IMAGE UPLOADER FILEREADY END --------------------------------------------------------\ndialog.bind('imageUploader.save', function () {\n        var crop, cropRegion, formData;\n    // Set the dialog to busy while the rotate is performed\n    dialog.busy(true);\n\n    // Build the form data to post to the server\n    formData = new FormData();\n    formData.append('url', image.url);\n\n    // Set the width of the image when it's inserted, this is a default\n    // the user will be able to resize the image afterwards.\n    formData.append('width', 600);\n\n    // Check if a crop region has been defined by the user\n    if (dialog.cropRegion()) {\n        formData.append('crop', dialog.cropRegion());\n    }\n\n//AJAX CALL START -------------------------------------------------------------------\n$.ajax({\n  url: 'assets/imageSave.php',\n  data: formData,\n  cache: false,\n  type: 'POST',\n  contentType: false,\n  processData: false,\n  success: function(result) {\n\n        // Free the dialog from its busy state\n        dialog.busy(false);\n\n      // Unpack the response (from JSON)\n      var response = JSON.parse(result);\n\n      // Trigger the save event against the dialog with details of the\n      // image to be inserted.\n      dialog.save(\n        response.url,\n        response.size,\n        {\n            'alt': response.alt,\n            'data-ce-max-width': response.size['width']\n        });\n\n        // Clear the request\n        xhr = null\n        xhrComplete = null\n  }\n});\n//AJAX CALL END ---------------------------------------------------------------------\n});\n\n}\n```\nThen Modify The Code On Lines 8502 - 8504 To Look Like This \njavascript\n          imageAttrs.height = imageSize['height'];\n          imageAttrs.src = imageURL;\n          imageAttrs.width = imageSize['width'];\nThen in my imagePost.php I have a basic file uploaded (Which I kind of copied and pasted from W3 :) )\n``` php\n<?php\n$postData = $_FILES;\n\n$target_dir = \"Lessons/1/images/\";\n$target_file = $target_dir . basename($_FILES[\"image\"][\"name\"]);\n$uploadOk = 1;\n$imageFileType = pathinfo($target_file,PATHINFO_EXTENSION);\n// Check if image file is a actual image or fake image\nif(isset($_POST[\"submit\"])) {\n    $check = getimagesize($_FILES[\"image\"][\"tmp_name\"]);\n    if($check !== false) {\n        echo \"File is an image - \" . $check[\"mime\"] . \".\";\n        $uploadOk = 1;\n    } else {\n        echo \"File is not an image.\";\n        $uploadOk = 0;\n    }\n}\n// Check if file already exists\nif (file_exists($target_file)) {\n    echo \"Sorry, file already exists.\";\n    $uploadOk = 0;\n}\n// Check file size\nif ($_FILES[\"image\"][\"size\"] > 1500000) {\n    echo \"Sorry, your file is too large.\";\n    $uploadOk = 0;\n}\n// Allow certain file formats\nif($imageFileType != \"jpg\" && $imageFileType != \"png\" && $imageFileType != \"jpeg\"\n&& $imageFileType != \"gif\" ) {\n    echo \"Sorry, only JPG, JPEG, PNG & GIF files are allowed.\";\n    $uploadOk = 0;\n}\n// Check if $uploadOk is set to 0 by an error\nif ($uploadOk == 0) {\n    echo \"Sorry, your file was not uploaded.\";\n// if everything is ok, try to upload file\n} else {\n    if (move_uploaded_file($_FILES[\"image\"][\"tmp_name\"], $target_file)) {\n\n        $arr = array('size' => $_FILES[\"image\"][\"size\"], 'url' => 'http://localhost:8080/ContentBuilder/assets/Lessons/1/images/'.$_FILES[\"image\"][\"name\"].'');\n        echo json_encode($arr);\n\n    } else {\n        echo \"Sorry, there was an error uploading your file.\";\n    }\n}\n\n?>\n```\nAnd Then Finally In imageSave.php\n``` php\n<?php\n$items = list($width, $height) = getimagesize($_POST['url']);\n\n$arr = array('url' => $_POST['url'], 'width' => $_POST['width'], 'crop' => $_POST['crop'],\n 'alt'=> \"Image\", 'size' => array('width' => $items[0], 'height' => $items[1] ));\n\necho json_encode($arr);\n\n?>\n```\nI hope I was of help, If you can see a way in which I can improve the code, please tell me.\n. Thanks @guillaumepiot I think when I was writing the code I was so focused on getting it to work that I did not even consider what they wanted returned. I am going to implement these changes as soon as I can.\nThank You.\n. ",
    "laurent-d": "Thanks @jacojvv-dev, @anthonyjb and @guillaumepiot for your help, i will try all you tell me in a day.\nand tell you what it happen. My script doesn't return these two vars... Work in progress\n. ",
    "ryanxdrake": "Correction to this: you can highlight multiple bullets even though they're separate elements.\nIt must be possible to highlight multiple paragraphs in a similar vein.\n. @anthonyjb Thoughts on the above statement? ^\n. Hey @Eeliya, I'm using part of your code but I don't see the code working for \"Insert\" button? Is that present?\n. @anthonyjb Anthony, do you have an approach as to how you'd tackle inserting the HTML image into the editor on clicking the button?\nThanks!\n. Hi @Eeliya + @anthonyjb ,\nWith the latest code, I didn't have insert working at all for me, so I've just added this:\nhttps://github.com/iamryandrake/ContentTools/blob/master/build/content-tools.js#L6327\nHowever, when the img is inserted @anthonyjb, I can't click on it at all to resize or manipulate it at all. Any thoughts? \n. So how about binding Shift+Enter to the enter key on keypress?\nIt's annoying that a user has to hit newline just to stay within the same paragraph! \nWouldn't that be a simpler approach, but also solve a lot of usability concerns?\n. I understand, however, it's very unintuitive for a user to be in a paragraph, hit enter and that starts a new paragraph for them. Rather, what I'm suggesting, is that the enter key be used to insert  tag. \n. ^ To add that option in would be SUPERB!\n. ",
    "fernandofranca": "To keep it from crashing due Sass, I've just removed the step from the build array:\n# Tasks\n    grunt.registerTask 'build', [\n        'coffee:build'\n        'concat:build'\n        'uglify:build'\n        'clean:build'\n    ]\n. Sure!\nI'm with Sass 3.3.0.rc.4 (Maptastic Maple). \nUpdating right now.\nThanks, @anthonyjb !\n. Done!\nIt was my outdated Sass tool.\n. Thanks for your help!!!\n. Thanks for your careful response, Anthony!\nIt's nice to know that are intentions to improve ContentTools even more. It is quite promising.\nI've tried to improvise a hacky approach by appending DOM elements by force, but without a deeper knowledge of the library it ends up breaking a lot of functionalities.\nThanks!!!\n. ",
    "Morganjackson": "ContentFlows sounds great, is it still planned? . ",
    "daanvanham": "Thanks! Was trying to fix it myself for a PR, but ran into some trouble with CoffeeScript and Grunt, both not really my favourites... :)\n. ",
    "Shannanigans": "Hi @anthonyjb \nThanks for the quick response. I had issues with editable main regions because of divs within divs. \nI ended up coming right. I have sections of html in a database that can be treated as templates or as an instance. So the section has a unique id and every editable child element has a unique id within that section. In doing so I can \"print\" out the same section multiple times and still be able to edit each editable segment.\nOne thing that I still find frustrating is that the post object contains all editable data instead of just the segments that have been edited. Is this an implementation issue on my side?\nBy the way I came across this typo here.\nhttp://getcontenttools.com/tutorials/handling-image-uploads\nsize: reponse.size,\n. Awesome, very cool of you to get to it so quickly.\n. ",
    "doonetheprune": "That works\nThanks\n. ",
    "tuhlmann": "Thanks for the quick reply- I look into it.\n. @anthonyjb I got a simple integration with our app working and see the fired taint event.\nFrom what I see the event carries all the contents of the region as a \"Character\" array. Is there also a way to see only the changes or would I need to diff it myself?\n. ",
    "dennisoderwald": "+1\n. ",
    "BugHunter2k": "+1\n. ",
    "antonkomarev": "Hello @anthonyjb! Is there any progress on this feature?. Maybe adding blank <p> tag on the end of each page and remove it if it's empty on save will be a solution for this issue?\n. Thank you for detailed clarification.\n. @anthonyjb Pressing enter is possible solution, but not intuitive. A lot of my testers failed this task :D I think that making feature to add button at the end of each editable region as optional will leave current behavior and will give give more flexibility to your awesome tool.\n. @andyjbgm sure, I will keep an eye on updates!\n. @anthonyjb is there any reason why ingnition not listening for editor states being changed? And thanks for solution :}\n. Yes, thank you. It will be good to write about it in documentation if it's not illuminated there.\n. editor.ignition().state('editing'); is useless if withIgnition=false, isn't it?\n``` js\nvar FIXTURE_TOOLS, editor;\nvar withIgnition = false;\neditor = ContentTools.EditorApp.get();\neditor.init('[data-editable], [data-fixture]', 'data-name', null, withIgnition);\neditor.start();\neditor.ignition().state('editing');\n```\nOutput:\n\nUncaught TypeError: Cannot read property 'state' of null\n. @anthonyjb  Could you provide use case of this feature, please? I just found it accidentally after tab switching issue :}\n. @anthonyjb Is there is a way to mark regions this way programmatically? Because I'm not sure at least 1% of users will find this feature themselves.\n. Thanks, working like a charm!\n. Still not working for me in 1.6.1 :(. It doesn't paste text to fixture region. I've made new issue for you with steps to reproduce.. @anthonyjb Thank you for the fix! It works.. \n",
    "cavo789": "Hi all, same question today (june 2018). \nI'm using Simple MDE and would really appreciate to be able to clic on my html rendering like in your demo and see the markdown text.\nUsing a library for the conversion HTML->MD won't be possible to me since my tool is using plugins, for instance, in markdown, I write %TOC_4% and the HTML rendering will be a table of content of headings from 2 till 4 included. So, in a wonderful world, by clicking on the HTML rendering of the table, I wish to be able to retrieve my %TOC_4%  tag (and I can change it to  %TOC_6% f.i.).\nThank you for your great job !. ",
    "kpost": "Ah yes of course! Good point.\n. ",
    "calebelt": "Thanks for the answer! I did not get to stop the script.\nFor example:\n1. From the left pane, drag the \"about\" in the template.\n2. Loading text.\n3. Press the button \"Start editor\"\n4. Edit the text.\n5. Push the button \"Save\". And the script will continue. When you hover over the element receives a class \"ce-element - over\". And if you drag the text block to another position, this element takes the class \"ce-element - focused\".\nhttps://github.com/calebelt/kubiki-cms/blob/master/dnd.html\nI try to do as you have said, but nothing happens - editing not stop. \nI unfortunately do not understand coffee script. :(\n```\n/Editor/\n$(\"#cmsContentEditStart\").on(\"click\",function(){\neditor.destroy();\n if ($(\"div\").is(\"[data-editable]\")){\n  $(\".cmsButtonRow\").css(\"display\",\"none\");\n  $(\"#cmsContentEditCancelRow\").css(\"display\",\"table\");\n  $(\".cmsPosition\").sortable('disable');\n  $(\".cmsDraggable\").css(\"cursor\",\"default\");\neditor.init('*[data-editable]');\neditor._ignition.trigger('start');\n } else {\n  alert(\"\u0410 \u0447\u0442\u043e \u0442\u044b \u0441\u043e\u0431\u0440\u0430\u043b\u0441\u044f \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c? And what are you going to edit?\");\n }\n});\n$(\"#cmsContentEditSave\").on(\"click\",function(){\neditor._iginition.trigger('stop', true);\neditor.destroy();\n $(\".cmsButtonRow\").css(\"display\",\"table\");\n $(\"#cmsContentEditCancelRow\").css(\"display\",\"none\");\n $(\".cmsPosition\").sortable('enable');\n $(\".cmsDraggable\").css(\"cursor\",\"pointer\");\n});\n$(\"#cmsContentEditCancel\").on(\"click\",function(){\neditor._iginition.trigger('stop', false);\neditor.destroy();\n $(\".cmsButtonRow\").css(\"display\",\"table\");\n $(\"#cmsContentEditCancelRow\").css(\"display\",\"none\");\n $(\".cmsPosition\").sortable('enable');\n $(\".cmsDraggable\").css(\"cursor\",\"pointer\");\n});\n```\n. I opened the content-tools.js and commented out the functions and Ignition.prototype.mount IgnitionUI.prototype._addDOMEventListeners.\nStart editing work.\neditor.init('*[data-editable]');\n editor.start();\nSave - work.\neditor.save();\neditor.destroy();\nCancel - not work.\neditor.stop(); (or editor._iginition.trigger('stop', false);)\neditor.destroy();\n. Cancel work.\neditor._ignition.trigger('stop', false);\n editor.destroy();\nThank you very much for your answers! I will continue to develop cms frontend editor.\nIt is waiting for version Touch Content tools. :)\n. ",
    "ahmedatya": "Thanks a lot\n. ",
    "Qqwy": "For my project this is a large requirement as well. I'd love to help if I'm able to.\nAs for the validation approach, I'd suggest to Keep It Simple, and proclaim that 'real time server validation' is something that is very project-specific. When it is possible to attach a callback to a content changed event, and fire a validation failed or validation succeeded event on the same element, I believe this is enough to support any kind of advanced validation schemes.\nUpon re-reading @frankbardon 's post, I think we're pretty much leaning towards the same direction.\n. Has there already been work done on this? If so, is there a (possibly highly unstable) branch that we could check out and tinker with?\n. Hello @anthonyjb ,\nAfter considering this for a bit, I have to agree with you. When dealing with very trusted users, such as a user editing their own site, they should not be limited. And because there is the option to add/change this behaviour, it is good as it is.\nAnd yes, proper validation should always happen server-side. \nThank you for pointing out the flaw in my train of thought.\n. Is there a possibility to restrict attributes on every element right now? The ContentTools.RESTRICTED_ATTRIBUTES hash is nested by tag name.\n. Hmm. It seems that editor._state is a string saying either ready or editing.\nAlthough I of course dislike calling a private property directly. \nI propose the following new methods:\n- editor.getState()\n- editor.isEditing()\n- editor.isReady()\nEDIT:\nThere also seems to be a dormant state?\n. @anthonyjb Great work! I was wondering what would be the best place to create the getRestrictedAttributes method. Your final commit is a lot cleaner than my version.\nThanks a lot for adding my contributions :-).\n. ",
    "mmoskal": "Seems to work nicely with <h1>, <h3>, but I couldn't get it to work on <footer>, <span>, or <div>.\n. Thanks, I will do that!\nOut of curiosity, is it due to internals, or is it intentional? If one can only edit plain text in fixtures, it shouldn't matter what is the enclosing tag?\n. @anthonyjb - yes this sounds like a good idea and thank you for detailed explanation. I'm building a GitLab-based CMS and finding ContentTools great!\n. ",
    "shvetsovdm": "Sorry @anthonyjb I don't understand your question.\n. Did you mean a browser dialog box?\n\n. What about a simple notifications with close button or without button?\nLike so:\n\nIn some cases a ok / close / cancel click is redundant.\n. @anthonyjb  I have the same issue with my project. Do you plan any actions towards resolving this issue. Can I offer any help?\n. @anthonyjb  it's just awesome, thanks!\n. 838c09b resolves problem of rails uglification :beers: @anthonyjb\n. \u041eh yeah, of course, code editor.\nWhat if I make PR with changes how ContentTools.LinkDialog works to add target attribute, will you accept this PR?\n. Hi @andyjbgm I think this will work well.\nI'm curious, why for anchors was not used Content Tools.DialogUE window?\n. @anthonyjb I see, this sounds reasonable.\n@anthonyjb what do you think about @MalyshevDmitry example?\n. @anthonyjb ok, I'll try to implement your \"open in new window icon\" approach.\n. @anthonyjb, looks good?\n\n\n. @anthonyjb awesome, thank you.\n. @anthonyjb, I'm glad to help.\nYou should know that after I added a new icon, for some reasons the icomon.json config file has became smaller from ~700KB to ~500KB.\n. @anthonyjb that's cool, thanks a lot!\n. exactly\n. For example when I want to edit h1 tag. I just want to edit h1 text without allowing to editing markup.\n. Cool, then I'll close this issue.\n. > Are you talking about within a text element (e.g a p tag), so the content could still be styled overall but there wouldn't be any option to apply markup to text within the element?\n@anthonyjb I interpreted your question wrong. What exactly I want is to have a ContentEdit.Region that as a whole can acts as a form input text field or a textarea field. And of course solution for disabling ToolUI is also applicable to that type of Regions.\n. Nope. No paragraphs after pressing return.\n\nWould is the advantage over using a styled textarea?\n\nSorry. Not sure that I understand the question.\nThe reason why I think about this new behavior for Regions is because every region in our app is related with one DB column and I want to be able to edit title as a text string and body as html markup.\n. Hi @shockdot. Looks like you want the same as #118.\n. ",
    "Eeliya": "Thanks for your solution. It worked! :)\nI was trying to bind mount event after initialization, but that did not work. As you said it should be applied before setting up the editor.\n. One issue. This approach does not seem to work if I add input to a element on the fly. \nFor example I add a input tag to paragraph when it is selected and key event still traverse from input to the paragraph.\nI solved this by adding the input into the ct-app like modals and dialog and set its position to the corresponding element position. it's a bit tricky but it works in my case.\n. In my case I only need event for Region ready. I only have one Region at the time.\n. \nAs you can see in the image, the control bar at top of my elements is not inside that element, its over it and I align them via javascript. it works fine but having them inside their corresponded element itself would be much better.\nNow I should keep them visually and logically in sync (which I don't think is a good solution). I want to add other tools into that bar as well. Tools that are provided by the CMS.\nSo if there was an API that could give me the ability to add inline toolbar (or I would call it shadow element) to a element but never get included in html, then that would be more than great.\nThe image you see is a screenshot of the content form of my CMS\n. Ok, so I will try to optimize my code to increase performance.\nThank you :)\n. This answered half of my question. Thank you.\nWhen I stop the editor or try to refresh the page with unsaved content, I see a confirmation again.\nI want to overwrite that as well.\n. OK, I overwrite window.onbeforeunload, and removed all the unload events from window as well and added mine\n. For example Comments and Articles. \nWhen I am writing a comment I do not need all the editor tools. BOLD, italic and text align is enough. I can also use @ to mention a user in comment.\nIn article I don't need @ feature but I do need the rest of tools.\nIn my scenario: User can write an article and/or post a comment at the same time. There is a comment popup that user can interact with while he/she is busy with the article.\nSo now I have 2 editors that are doing different things and have different features. It is not like different editable regions. The singleton nature of the editor makes this kinda impossible.\nI like (in fact love :D) your editor very much, that's why I am integrating it into my CMS. So I need to make it very configurable in a way that I can have multiple editor with different configuration, features and UI at the same time. \n. Alright, I'm partly doing what you describe here. I turn on/off tools according to the region.  I guess I have to wait till you implement this feature, for now I use some trick to do it.\n. I added this to the EditorApp, sorry I am using vanila js:\n``` javascript\n// I save the current editor and root instance in my code before I call this method\nEditorApp.getNew = function () {\n  var cls;\n  cls = ContentTools.EditorApp.getCls();\n  ContentEdit.Root.reset();\n  return new cls();\n};\nEditorApp.setEditor = function (editor, root) {\n   instance = editor;\n   ContentEdit.Root.setRoot(root)\n};\n// In ContentEdit.Root I added this methods\nRoot.reset = function () {\n      instance = null;\n    };\nRoot.setRoot = function (root) {\n      instance = root;\n    };\n```\nI keep the instances of EditorApp and Root in my app and every time I switch the editor I do this:\njavascript\nContentTools.EditorApp.setEditor(currentSelectedEditor, currentSelectedRoot)\nI know this is tricky. In this approach user cant have 2 active editor at the same time.\nofc that's not an issue, but the logic is complicated.And that is the main problem.\nI like simple stuff :D \nBut this is my workaround at moment\n. Hi, I would like to know if there was any try to change the singleton nature of ContentTools.\nMy workaround causes many bugs.\n. Unfortunately I made a lot of changes, which are not compatible with ContetnTools. I'm also using vanilla js :D instead of coffee script.\nActually I created completely a new project called ContentStrike (inspired by counter-strike) which is using ContentTools with many changes.\nI can create it and convert it to coffee script and email it to you, then you can check it and if it was good enough, you could included in your next push :)\n. image.zip\nI attached my dialogs/image.js. It is written in javascript. Sadly online js to coffee converters do not convert it properly to needed coffee.\nI also changed the following css to put the upload button at the center\n``` css\n.ct-widget .ct-control--upload {\n  overflow: hidden;\n  position: absolute;\n  top: 60%;\n  left: 50%;\n  margin: -16px -50px;\n}\n/ hide button when image is populated or an image is being uploaded /\n.ct-widget.ct-image-dialog--uploading .ct-control--fetch {\n  display: none\n}\n.ct-widget.ct-image-dialog--populated .ct-control--fetch {\n  display: none\n}\n```\nI hope you will like it and use it :)\n\n. Hi @iamryandrake, \nI just tested the insert functionality and it works fine for me\n. Thanks for explanation about FSM. I understood it incorrectly. Now I understand it properly.\nI will keep my setInterval then.\n. Thanks, I used your code.\nI also add a on click event to the firstRegion so when I click on it no matter where, the last element get focused so I don't have to specifically click on a it.\nI post my code maybe someone find it handy :)\ninside _EditorApp.prototype._addDOMEventListeners method I added this: \nif(this._regions[0]) {\n    this._regions[0].addEventListener('click', function (e) {\n        _this.focusLastElement(e);\n      });\n }\nAnd I created this method:\n```\n _EditorApp.prototype.focusLastElement = function (e) {\n  if (e.target !== this._regions[0])\n    return;\nvar lastChild = this.regions()[0].children[this.regions()[0].children.length - 1];\n  if (lastChild) {\n    var range = new ContentSelect.Range(lastChild._domElement.innerHTML.length, lastChild._domElement.innerHTML.length);\n    lastChild.selection(range);\n    lastChild.focus();\n  }\n};\n```\n. For example, the Image element use a div with background-image to represent the image in the edit mode. I want to change that and use a img tag instead of div tag.\nMy question is also an extension to #47 \n. Alright,\nBecause I do not want to change the mount method of ContentEdit.Image, I copied the ContentEdit.Image class and add my changes to it and loaded after the ContentTools is loaded.\nSo I overwrite ContentEdit.Image completely with my custom version of it.\n. Thank you,\nit would be great if you could also add an example element to that tutorial :)\n. Thank you :)\n. in ContentEdit - src/scripts/videos.coffee line 50\nThe error line\n. ",
    "Nisthar": "Sure. Here's the code:\nphp\n        public function post(Request $request)\n      {\n        $content = $request->review;\n            File::put(public_path() . '/contents/'.Session::get('file').'.html', $content);\n            $file = Content::findOrFail(Session::get('Id'));\n            $file->active = 0;\n            if($file->save())\n            {\n                return \"true\";\n            }else{\n                return \"false\";\n            }   \n    }\nI Don't know what's wrong with this code. I can't find any error. Because this only get breaks when i add the youtube iframe. if i add it the filesize of the saved file becomes 0. Otherwise it will work fine.\nThere are two possibilities:\n1. The html is breaking when i add the iframe. So the server only saves \" \".\n2. There is some limit in PHP for accepting big files.\n(Sorry for my bad english) \n. Yes. I get the output with and without the iframe. But its only saving when its without iframe.\nI suspect its the problem of double quotes. But I don't see any extra double quotes added for the iframe.\n. Thanks. @guillaumepiot I think its working now.\n. Ok. Its working. \nBut any problem if i insert a p tag when a user press enter key on an image?\n. @anthonyjb BTW any way i can add custom html option in the tool?\n. @anthonyjb Any other way like just inputting the raw html in the editing area and it automatically converted into html. I know its a bit difficult and will cost you a considerable time. Is there any workaround like by using a third-party library?\n. @anthonyjb @bfintal Ok. I'll try it out\n. ",
    "alexrussell": "@guillaumepiot what you say about getting the HTML contents of a Laravel view in a string is indeed correct (you have to force the view to 'render' by casting to string or asking it to render). However, I don't think this is the issue in this case. In the code that @Nisthar supplied, a view is not being rendered - instead the raw HTML from CT being POSTed to the PHP script is (attempted to be) saved directly to a file.\nMy immediate thoughts about the specifics here 9without being able to test on the code or reproduce simply) is that either:\n1. There's an HTML purifier in between the input (POST data) and the string that Laravel gets, seeing an iframe and assuming foul play. (However, as far as I know Laravel does not, by default, have anything of this nature - it has CSRF protectiton, but no XSS or other input purifying.)\n2. CT itself is actually messing with the POSted data. (But as @Nisthar says, echoing the string gives a proper string.)\n3. PHP is imposing some limit on the size of the POST request or an individual POST variable. (PHP does have this functionality built in to an extent, and definitely has it built in if you have the Suhosin patch enabled - but again, if the variable can be echoed, then no issue there.)\n   - Or mod_security - it can also mess with requests.\nSo I'm kinda stuck.\n. @guillaumepiot, @anthonyjb not sure I really helped in any way being as @guillaumepiot's answer seemed to help @Nisthar but hey. Presumably $request->review was sometimes coming as a string (if no iframe) and sometimes an object/array (if iframe present) and that's what stopped it being saved to a file without first being cast to a string. Very weird though!\n. ",
    "pedrordesign": "Use a simple blade tag in the view\n{!! $url !!} THIS WILL RENDER THE VIDEO\ninstead of\n{{ $url }} THIS WILL WRITE AS A STRING (in a input for example)\n. ",
    "grsmv": "Thank you for clarification. But here's extraction from compiled CSS:\ncss\n/**\n * The alignment of elements such as images and videos horizontally is achieved\n * through the `align-left` and `align-right` classes. [...]\n */\nimg,\niframe,\nvideo,\n[data-ce-tag=img],\n.ce-element--type-image,\n.ce-element--type-video {\n  display: block;\n  margin-left: auto;\n  margin-right: auto; }\nwhich applies specific display and margin rules for all images (iframes and videos, which is less important) on the page. I believe that this is overgeneralization because this have unwanted impact on other elements at the page. \n. Unfortunately  initial is not a cross-browser property. This leaves us no choice. OK, let's think about this issue like small payment for ContentTools usage =)\n. ",
    "mbarnathan": "This is a very polished library, but I question this decision. Modifying the behavior of every image on the site without the developer being aware of it is much worse for usability than requiring a hardcoded class or data attribute.\nYou could also change the style of every matching element in the Javascript init call and not even require hardcoding, couldn't you? Let me know what the desired behavior here / reason for this is and I'm reasonably confident I can shoot you a pull request which does it without interfering with the rest of the site.\n. Excellent, thanks for doing this. I think it will be a lot clearer to users.\nOn February 3, 2016 7:26:47 PM EST, Anthony Blackshaw notifications@github.com wrote:\n\nAs stated in my last comment I've now removed the default global styles\nand instead provided guidance including an example set of styles in the\ngetting started guide within the documentation -\nhttp://getcontenttools.com/getting-started#preparing-the-css\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/GetmeUK/ContentTools/issues/92#issuecomment-179550542\n. \n",
    "CJStroud": "Hi, \nI'm sure I had this issue when my files where being concatenated in the wrong order. Do you get the issue if you add the content tools library before the rest of your JavaScript?\n. ",
    "dakotalightning": "@anthonyjb It occurs when I select an element for edit, no the error doesn't happen when I include content-tools.js as a separate <script> tag.\nThe build is rails :uglifier\n@CJStroud thanks, it appears to be still throwing the error.\n. Update: I pulled it out of the compile pipeline app.js and placed it on the page in a separate <script> both content-tools.min.js and editor.js.\nIm still getting the errors\n```\ncontent-tools.min-ed3bd097d02a3e3d9e22ff0eb2beb8001bf0ab7a0f5f06cb8dadeae1a4bb578d.js:7 \n  Uncaught TypeError: this.element.tagName is not a function\n    ContentTools.TagUI.e.mount @ content-tools.min-ed3bd097d02a3e3d9e22ff0eb2beb8001bf0ab7a0f5f06cb8dadeae1a4bb578d.js:7\n    ContentTools.InspectorUI.e.updateTags @ content-tools.min-ed3bd097d02a3e3d9e22ff0eb2beb8001bf0ab7a0f5f06cb8dadeae1a4bb578d.js:7\n    (anonymous function) @ content-tools.min-ed3bd097d02a3e3d9e22ff0eb2beb8001bf0ab7a0f5f06cb8dadeae1a4bb578d.js:7\n    ContentEdit.Node.t.trigger @ content-tools.min-ed3bd097d02a3e3d9e22ff0eb2beb8001bf0ab7a0f5f06cb8dadeae1a4bb578d.js:5\n    ContentEdit.Element.e.focus @ content-tools.min-ed3bd097d02a3e3d9e22ff0eb2beb8001bf0ab7a0f5f06cb8dadeae1a4bb578d.js:5\n    ContentEdit.Text.e.focus @ content-tools.min-ed3bd097d02a3e3d9e22ff0eb2beb8001bf0ab7a0f5f06cb8dadeae1a4bb578d.js:6\n    ContentEdit.Element.e._onMouseDown @ content-tools.min-ed3bd097d02a3e3d9e22ff0eb2beb8001bf0ab7a0f5f06cb8dadeae1a4bb578d.js:6\n    ContentEdit.Text.e._onMouseDown @ content-tools.min-ed3bd097d02a3e3d9e22ff0eb2beb8001bf0ab7a0f5f06cb8dadeae1a4bb578d.js:6\n    (anonymous function) @ content-tools.min-ed3bd097d02a3e3d9e22ff0eb2beb8001bf0ab7a0f5f06cb8dadeae1a4bb578d.js:6\ncontent-tools.min-ed3bd097d02a3e3d9e22ff0eb2beb8001bf0ab7a0f5f06cb8dadeae1a4bb578d.js:7 \n  Uncaught TypeError: Cannot read property 'removeChild' of null\n    ContentTools.ComponentUI.t.unmount @ content-tools.min-ed3bd097d02a3e3d9e22ff0eb2beb8001bf0ab7a0f5f06cb8dadeae1a4bb578d.js:7\n    ContentTools.InspectorUI.e.updateTags @ content-tools.min-ed3bd097d02a3e3d9e22ff0eb2beb8001bf0ab7a0f5f06cb8dadeae1a4bb578d.js:7\n    (anonymous function) @ content-tools.min-ed3bd097d02a3e3d9e22ff0eb2beb8001bf0ab7a0f5f06cb8dadeae1a4bb578d.js:7\n    ContentEdit.Node.t.trigger @ content-tools.min-ed3bd097d02a3e3d9e22ff0eb2beb8001bf0ab7a0f5f06cb8dadeae1a4bb578d.js:5\n    ContentEdit.Element.e.blur @ content-tools.min-ed3bd097d02a3e3d9e22ff0eb2beb8001bf0ab7a0f5f06cb8dadeae1a4bb578d.js:5\n    ContentEdit.Text.e.blur @ content-tools.min-ed3bd097d02a3e3d9e22ff0eb2beb8001bf0ab7a0f5f06cb8dadeae1a4bb578d.js:6\n    ContentEdit.Element.e.focus @ content-tools.min-ed3bd097d02a3e3d9e22ff0eb2beb8001bf0ab7a0f5f06cb8dadeae1a4bb578d.js:5\n    ContentEdit.Text.e.focus @ content-tools.min-ed3bd097d02a3e3d9e22ff0eb2beb8001bf0ab7a0f5f06cb8dadeae1a4bb578d.js:6\n    ContentEdit.Element.e._onMouseDown @ content-tools.min-ed3bd097d02a3e3d9e22ff0eb2beb8001bf0ab7a0f5f06cb8dadeae1a4bb578d.js:6\n    ContentEdit.Text.e._onMouseDown @ content-tools.min-ed3bd097d02a3e3d9e22ff0eb2beb8001bf0ab7a0f5f06cb8dadeae1a4bb578d.js:6\n    (anonymous function) @ content-tools.min-ed3bd097d02a3e3d9e22ff0eb2beb8001bf0ab7a0f5f06cb8dadeae1a4bb578d.js:6\n``\n. So it was theconfig.assets.js_compressor = :uglifierthat was the issue.\n. So looking at the grunt build forcontent-tools.min.js, I changed the settings toconfig.assets.js_compressor = Uglifier.new(:mangle => false)`. It works as it should now. \nThis probably isn't ideal since this is for the whole js asset pipeline, maybe moving towards a mangle safe build?\nShaving yaks again ... \n. :+1: Confirmed\n. ",
    "aljopro": "@anthonyjb do you have a standard UX for modifiers like this yet? I would use whatever has been established by the tool. If not, this might be a good place to establish that UX.\n. ",
    "stepan-perlov": "@anthonyjb says\n\n1 - There some discussion on changing the singleton nature of CT here: #99 The reality is this isn't a \nshort term goal for us. Based on your description however I'm not sure you need separate editor\ninstances, can't you just re-initialize the editor each time sending the selector for the content you want \nto make editable? (Apologies in advance if I'm not fully understanding what you're trying to achieve).\n\nIt can be done with some sophisticated context switches. But this is bad trick, because if will be functionality for separate editors without shared state on screen, this trick not need.\nI can do this feature.\n. Hi @anthonyjb \n1 - On screen I have form for creating new article and list of article.\nWhen I click add button, I want create editor instance.\nWhen I click edit article, I want create editor instance.\nAll items can be in edit mode together.\nI want change singleton nature of CT.\n2 - I want to use custom template.\n. Ok, thanks for feedback.\nGoing to #99 for point 1\n. Need for customization\n. ",
    "l2aelba": "Nice, You should add this on tut : http://getcontenttools.com/tutorials/adding-new-tools\n. Nahhh i think this should work :\njavascript\neditor.destroy();\naddIds();\nEditorSetup();\neditor.start();\n. @anthonyjb Yep, But I need some feedback :D\n. @anthonyjb  Aha ok solved for me :D thanks so much\n. @anthonyjb Thanks , So I came to this so long :+1: \n``` javascript\nContentTools.Tools.HR = (function(_super) {\n    extends(HR,_super);\n    function HR(){return HR.__super.constructor.apply(this,arguments);}\n    ContentTools.ToolShelf.stow(HR,'hr');\n    HR.label = 'HR';\n    HR.icon = 'line-break';\n    HR.canApply = function(element,selection){return element.type()==='Text';};\nHR.apply = function(element, selection, callback) {\n    var hr = new ContentEdit.Static('hr',{},'');\n    element.parent().attach(hr, element.parent().children.indexOf(element));\n    return callback(true);\n};\nreturn HR;\n\n})(ContentTools.Tool);\n```\nBut seems like I cant remove <hr> after added.\n. @anthonyjb Wow , I will wait to next release, thanks\n. @anthonyjb Thanks so much, But must I have the last code ? ContentTools.StylePalette.styles = function (element) {}; ???\nDoesnt it push all style ? Seems like a bug  or I did something wrong\n. @anthonyjb  Sorry so late respone.\nBut im done with this :\njavascript\nContentTools.StylePalette.add([new ContentTools.Style('Large','button-large',[{'type': 'Button'}])]);\nAnd : \njavascript\nContentTools.StylePalette.styles = function(element) {\n    var tagName;\n        tagName = element.tagName();\n        if (element === void 0) {\n            return this._styles.slice();\n        }\n        return this._styles.filter(function(style) {\n            if (!style._applicableTo) {return true;}\n            if (style._applicableTo[0]['type']) {\n                return style._applicableTo[0]['type'] === element.type();\n            }\n            return style._applicableTo.indexOf(tagName) !== -1;\n        });\n};\nPlease review :D\n. Question 2 :\nAnyway can I just collect data just for regions who was edited ?\nThis code is collect all HTML but without checking their region is edited or not.\n``` javascript\nlet regions = ContentTools.EditorApp.get().regions();\nlet data = {};\nfor (let name in regions) {\n    let region = regions[name];\n    data[name] = region.html();\n}\nconsole.log(data);\n```\n. @anthonyjb Oh wow Thanks, This sloved my problem. Cheer !\n. Gotcha !\njavascript\nlet editorPreviewHistory;\nconst ContentTools_Open = function() {\n    editor.start();\n    editor.ignition().state('editing');\n    if(editorPreviewHistory) {\n        editor.history = editorPreviewHistory;\n    }\n};\nconst ContentTools_Preview = function() {\n    editorPreviewHistory = editor.history && editor.history.canUndo() ? editor.history : null;\n    editor.stop(true);\n    editor.ignition().state('cancel');\n};\nWhat you think ?\n. So if you think all is good , im happy :D @anthonyjb Thanks\n. @anthonyjb I have to add editor.history && editor.history.canUndo() condition for preventing few bugs\n. ",
    "dirkjacobs": "Hi Ant,\nthat's exactly what I would experience, from a user point of view, as a \nbig improvement  : pressing shift return/enter inserting a  instead \nof creating a new paragraph.\nNot sure if i'm able to modify the code myself, but glad to hear you're \nin for the change in the next few days.\nTx\nOn 20/01/2016 10:55, Anthony Blackshaw wrote:\n\nSo on pressing shift return/enter we'd insert a br instead of a \nparagraph? I think this is a great idea and I'm happy to implement the \nchange in the next few days if that's it?\nIf you want to do it soon than that you need to look to modify the \nbehaviour in of |ContentEdit.Text._keyReturn| in the ContentEdit code \nbase (https://github.com/GetmeUK/ContentEdit).\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/GetmeUK/ContentTools/issues/101#issuecomment-173150368.\n. Hi, checked it out with different bowsers and I have the impression there is a small issue.\nThe first time you hit SHIFT-RETURN it seems that the 'real cursor' has move to the next line, but the visual experience is different. The 'blinking cursor' stays on the current location (not on the next line) and the 'edit-box' with the yellow background doesn't grow.\n\nFor a user this gives the impression it didn't worked and the user will hit SHIFT-RETURN again and starts typing the same info. After the second hit, the cursor moves to the next line, but not after the full text\n. Firefox 43.0.4\nChrome 47\nEdge\nI have the impression this was already the case with the linebreak in the toolbox too.\nChecked it, and indeed. With the previous version I needed to click the button 'line break' twice to see the effect\n. Step 1\n\nStep 2 After pressing shift-Enter\n\nStep 3 typed 'dirk'\n\nStep 4 Pressed Shift Return again\n\nStep 5 Typed Anthony\n\nStep 6 Pressed Shift Return 2 times\n\n. Tried to add my 'workflow'\n. But works great !\nTx,\nD.\nOn 21/01/2016 16:53, Anthony Blackshaw wrote:\n\n@dirkjacobs https://github.com/dirkjacobs thanks for your help - I \npushed a fix that behaves as I would expect on FF and Chrome now, \nthough it's not the nicest of hacks I have to admit \n(https://github.com/GetmeUK/ContentEdit/blob/f82846d335b5b38e2e4b9c5c95a41ec216c3d19f/src/scripts/text.coffee#L317).\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/GetmeUK/ContentTools/issues/101#issuecomment-173614763.\n. Yes,\nthis seems to work and I think for my use-case is possibly good enough.\n\nTx\nOn 26/01/2016 14:48, Anthony Blackshaw wrote:\n\nHave you tried using a static \nhttp://getcontenttools.com/demo#static-content element? You can drop \nstatic elements into editable regions and then drag and drop them \ncontent around them. At the moment you can't drag the elements \nthemselves as static elements can contain anything and the drag-drop \nhandling code could easily clash - though this is something we've \nlooked at.\nTo create the static element simply add an attribute to the static \nelement like so:\n...\nIf this doesn't resolve the issue can you paste your source code, \nthere are a number of circumstances this wont work for and support for \nan option to be able to dynamically control regions within a page is \nsomething we're looking at for the future - #13 \nhttps://github.com/GetmeUK/ContentTools/issues/13.\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/GetmeUK/ContentTools/issues/112#issuecomment-175022550.\n. Hi,\n\ntx for the quick reply. The idea is in fact to have the possibility to \nuse the allignment buttons on the palette or have the system with the \narrows when dragging. (but I would prefer the allignment buttons on the \npalette)\nThe reason is that for our users the properties dialog is too technical, \nthat's the reason I've hidden the properties dialog.\nDefault behavior for the rest is fine.\nD.\nOn 1/03/2016 23:29, Anthony Blackshaw wrote:\n\nHi @dirkjacobs https://github.com/dirkjacobs the simplest/quickest \nway would be to define a couple of styles (css classes) for aligning \nthe image in the manner you've described (there's some information \nhere on how to add styles \nhttp://getcontenttools.com/getting-started#configure-styles). A user \ncan the use the properties dialog to apply the alignment style they \nwant to the image.\nYou could of course also change/override this default behaviour so \nthat the image was initially aligned say left by updating the CSS/SCSS.\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/GetmeUK/ContentTools/issues/143#issuecomment-190935316.\n. Would be the perfect solution for me, but I'm afraid  coffeescript is not my 'cup of tea' ;-)\n. Tried it out and works fine.\nWould be nice/perfect if \n- Was the std. behavior\n- Generated a different class eg image-left, video-right\n. The image I used in attach\n\n, but this is also the case with other iamges\n. Found the problem. Sometimes, the image was not fully loaded (async) when trying to retrieve the width and height. This returned [0,0] and caused the wrong crop-marks.\nBut your hint helped me in finding the solution.\n. Tx.\n\nOn 11/03/2016 13:47, Anthony Blackshaw wrote:\n\nHi @dirkjacobs https://github.com/dirkjacobs OK I'll take a look, \nhopefully not a problem too often for users :) I think I just need to \nmodify the check for empty regions to exclude \n|ContentEdit.StaticElements| from the count. Will look at over the \nweekend :)\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/GetmeUK/ContentTools/issues/156#issuecomment-195351801.\n. Great, this works.\n\nTo make it perfect it would be nice if it reacts, like other regions, on \npressing the  key.\nIn this case, if the user is on an image without any other paragraphs, \npressing the enter key would add an new paragraph, now the user needs to \npress the 'P' in the toolbox.\nOn 13/03/2016 1:44, Anthony Blackshaw wrote:\n\nStatic elements no longer count when determining if a region is empty \nand so a paragraph tag will now automatically be added to any region \nthat is empty or contains only static elements.\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/GetmeUK/ContentTools/issues/156#issuecomment-195842312.\n. Hi Ant, \n\nstarting to get the feeling. \nI was wondering if there is no possibility to avoid the check every 100ms. \nIs there eg a possibility to send an event every time 'something changes', which could be the trigger to update the state of the buttons. (through an eventlistener)\nD.\n. Already found part of the reason. Seems I installed a new version and the event-binding has changed.\nbind( xx.fileReady ) > addEventListener(xx.fileready) : events are no longer camel-case\n. Seems like when setting the content of an empty region (with setContent), there was a check before or after to check for empty regions who is adding automatically a paragraph tag.\nI think when setting the content of a region, with setContent (nono-empty), the whole content of the region should be replaced and the paragraph with ellipsis shouldn't be there no longer. ",
    "KI-G": "Hi @anthonyjb This is much more information I hoped for and the LinkTool is a good starting point. It could anyway be a good practice to build the tokens as anchor tags...\nVery kind of you, thanks!\n. ",
    "cesarve77": "Perfect I will be glad to contribute, but in this moment i don't have time.\nI hope have it in 2 month then i will do my job..\nWhile I hope  this gist can help someone\nThanks and congrats for this excellent tool\n+sorry for my english\n2016-01-25 16:06 GMT-04:30 Anthony Blackshaw notifications@github.com:\n\nHi @cesarve77 https://github.com/cesarve77 thanks for contributing this\n- I'd be happy to consider adding a more complete base image uploader\n  example to the library and a native JavaScript one would be popular with\n  the community I'm sure.\nIn it's current form however I wouldn't be able to consider the code for\nthe core library without the following additions:\n- Comments to make it easy for a user new to the code to pick it up\n  and use it in their own application.\n- Test specifications that can be run using grunt jasmine against the\n  code to ensure any changes made to it or the ContentTools core library do\n  not break its function. (I'm still completing the test specifications for\n  ContentTools currently and I'm trying to ensure that like all the other\n  libraries (ContentEdit, ContentSelect, FSM and HTMLString) there is a\n  comprehensive test specification for the library).\n- Consistent formatting of the cod,e in particular the use of white\n  space.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/GetmeUK/ContentTools/issues/105#issuecomment-174654739\n.\n\n\nC\u00e9sar Ramos\nAv. Rom\u00falo Gallegos\nCentro Gerencial los Andes.\nOfc 6D. Boleita. Caracas\n04141400601\n02129352802\n. is a new issue\n2016-01-27 13:36 GMT-04:30 Anthony Blackshaw notifications@github.com:\n\n@cesarve77 https://github.com/cesarve77 thanks for the kind words -\ndoes this comment relate to your previous issue or is this a new issue?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/GetmeUK/ContentTools/issues/114#issuecomment-175775744\n.\n\n\nC\u00e9sar Ramos\nAv. Rom\u00falo Gallegos\nCentro Gerencial los Andes.\nOfc 6D. Boleita. Caracas\n04141400601\n02129352802\n. a screenshot will not show the problem.\nLet men try explain better with a example\njust create a editable zone. edit inserting only a    save it, and\nedit again, intent to add a paragraph after de code\n2016-01-27 14:34 GMT-04:30 Anthony Blackshaw notifications@github.com:\n\nA the  tag was hidden - I've modified your comment to escape it.\nCan you send a screenshot showing this please?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/GetmeUK/ContentTools/issues/114#issuecomment-175797069\n.\n\n\nC\u00e9sar Ramos\nAv. Rom\u00falo Gallegos\nCentro Gerencial los Andes.\nOfc 6D. Boleita. Caracas\n04141400601\n02129352802\n. check https://drive.google.com/file/d/0B9cNo8W9ubq0VWNqOXNfY1dpdU0/view\n2016-01-27 14:47 GMT-04:30 Anthony Blackshaw notifications@github.com:\n\nOK I'm really sorry but I'm still struggling to repeat the issue you're\ndescribing - can you paste the HTML here?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/GetmeUK/ContentTools/issues/114#issuecomment-175805742\n.\n\n\nC\u00e9sar Ramos\nAv. Rom\u00falo Gallegos\nCentro Gerencial los Andes.\nOfc 6D. Boleita. Caracas\n04141400601\n02129352802\n. ohh thanks so much for your time\n2016-01-27 15:07 GMT-04:30 Anthony Blackshaw notifications@github.com:\n\nThis is perfect thank you - the solution is to hold the Ctrl-key down (Cmd\non Apple) and click the (P)aragraph tool, this will create a new paragraph\nrather and converting the current editable block.\nThere's a note on it here on the demo page\nhttp://getcontenttools.com/demo#adding-and-converting-content\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/GetmeUK/ContentTools/issues/114#issuecomment-175814955\n.\n\n\nC\u00e9sar Ramos\nAv. Rom\u00falo Gallegos\nCentro Gerencial los Andes.\nOfc 6D. Boleita. Caracas\n04141400601\n02129352802\n. ",
    "hassanakram": "I think it should be available as a setting. Some applications include a lot of editing on daily basis. E.g add few line breaks, remove few line breaks. I am currently working on such application and it requires this feature.\nCurrently even if we add blank space anywhere in the document, it is instantly trimmed on pressing save and nothing gets saved.\nThanks\n. Hi @anthonyjb, Yes sounds great!\nI tried the code given in this SO post last night, looks like we might need to improve that code, because it does not save white spaces correctly. We always need to add some characters after the white spaces in order to save them. May be some function hooked with save button trims the white spaces.\nCan I help you creating this functionality in a PR ? May be you can guide me a bit.\n. Ok sure. CoffeeScript won't be a problem, I am already used to it. I will try to look into this later tonight.\n. ",
    "megamuf": "Hello @anthonyjb\nCould you please post javascript adaptation of this code?  Should I put a question to  http://stackoverflow.com aswell?\n. @anthonyjb \nSorry, I wasnt able to run this code. \nFails with:\nTypeError: clipboardData.getData is not a function\nwhen I debug the code I can see that clipboard data is just a string with space-separated values of the cells:\"1 1 1 2 2 2\" where 1 are values from row 1 and 2 - from row 2.\n. @anthonyjb\nFails with:\n\u00b4\u00b4\u00b4\nTypeError: d.split is not a function\n\u00b4\u00b4\u00b4\nIf this is not the table\n. Thank you for your answer,\nYes, is this only when the table is at the end\n. My experience with CoffieScript is practically null, so could you please provide JS solution?.\n. Thanks for excellent answer!!!\n. Hello,\nI also need to do it this with pictures and videos,\ncan help me with this?\nThanks in advance.\n. http://stackoverflow.com/questions/39074758/content-tools-add-the-tag-p-automatically-after-add-the-image-and-video\nQuestion on stackoverflow\n. Thank you!!!\n. Hello @anthonyjb,\nI'm trying to add a image, but before that i delete the text of the default paragraph, but when i'm inserting the image it gives an error that afects the further functionalities. What i understand of it is that ContentTools deletes the paragraphs without text, and this gives the error. Could you please give me a solution if possible? Thanks\nCode\n             function _followWithP(ev) {\n\n                        var element = ev.detail().element;\n                        // Find the top level element \n                       // Here is where the code has error\n                        if (element.parent().type() !== 'Region') {\n                            element = element.closest(function (node) {\n                                return node.parent().type() === 'Region';\n                            });\n                        }\n\n                        // Find the newely insert element\n                        var newElement = element.nextSibling();\n\n                        // Check if this is the last item in the region\n                        var siblings = newElement.parent().children;\n                        if (newElement === siblings[siblings.length - 1]) {\n                            // This is the last child so apply add a paragraph\n                            var p = new ContentEdit.Text('p', {}, 'Description');\n                            newElement.parent().attach(p);\n                            p.focus();\n                        }\n                    }\n\n                    // Modify the applied behaviour of the image, table and video tools to use\n                    // `_followWithP`.\n                    if (this._toolUIs['image'] !== undefined) {\n                        this._toolUIs['image'].addEventListener('applied', _followWithP);\n                    }\n                    if (this._toolUIs['table'] !== undefined) {\n                        this._toolUIs['table'].addEventListener('applied', _followWithP);\n                    }\n                    if (this._toolUIs['video'] !== undefined) {\n                        this._toolUIs['video'].addEventListener('applied', _followWithP);\n                    }\n                };`\n\nerror\n\n. @anthonyjb,\n\"Problem is that if there is only 1 empty  tag the elemento has its _parent property null aswell as the \u00ad\u00ad\u00ad_domElement property\". @anthonyjb \nhttp://stackoverflow.com/questions/39373723/content-tools-add-br-instead-of-p-when-pressing-the-enter\nQuestion on stackoverflow\n. @anthonyjb\nYes, this resolve the issue!\nThank you!!!\n. ",
    "d0brii": "Just FYI....\nIf you replace in \nContentEdit.Root.get().bind('paste', function(element, ev) { .......\nclipboardData = ev.clipboardData;\nWith\nclipboardData = ev.clipboardData.getData('text/html');    \nand later on  in editor.paste = function(element, clipboardData) { .....\nhtml = clipboardData.getData('text/html');\nWith \nhtml = clipboardData\nIt should resolve; TypeError: d.split is not a function.\n. Thank You very much,\nSecond option feels more natural, or as it should be. :)   \nRegarding my second question, is it possible to keep image image, in the edit mode instead converting it to the div; reason I'm asking is that DIV and IMG respond differently in the (left, right) align situations.  \nSo if i have image just below paragraph in a template. and than, in the edit mode, I drag that image to the left, as it's indicated by arrows in layover, in the edit mode, Image stays on the right side of the paragraph, as it should, but when I switch to preview mode, picture drops below paragraph. \nBoth IMG and DIV have \"align-left\" style applied.  To maintain image position on the left of the paragraph in the preview mode IMG tag should have, float: left, applied instead. \nIs that possible?\nEdit Mode\n\nPreview Mode\n\n. Thank You :) Some how I missed that part regarding CSS \ud83d\udc4d \nRegarding DIV IMG replacment,.. I notice that a payed plugin for WP has implementation of ContentTools with a modifications that can do exactly that. Though code is quite elaborate, and outside of my fun exploration scope :)\n. Thank you for your answer. \nLet's scratch cancel button for a moment, what's confusing me in this point is that close button (little x in right corner) isn't working,  that after dialog is created and visible on the screen. \nI don't have any extra code just plain this (am I missing something?);\nmodal           = new ContentTools.ModalUI(true, false);\ndialog          = new ContentTools.DialogUI('Dialog Window'),\n\neditor.attach(modal);\neditor.attach(dialog);\ndialog.show();\nmodal.show();. Thank you :) needless to say, it's working now.  . It is actually much easier than I was thinking, however i still have a issue with \"TypeError: clipboardData.getData is not a function\", even though html = clipboardData.getData('text/html'); returns pasted html.\n\n. Hi,\nThat error I'm getting is after I applied little patch that gets ubind/bind with paste (as it is written in referred post).\nThis is first time I'm actually dealing with copy paste events in the JS so I'm not quite sure exactly what is to be expected, though it really confusing me why clipboardData.getData('text/html') returns string as it should, but browser repots typeerror in the same line. \n . Hi, \nI removed old code here is version that actually works without errors, code is just modified paste that works bit better with what I need it to do :)\n```\nvar editorCls = ContentTools.EditorApp.getCls();\nvar editor    = new ContentTools.EditorApp.get();\nvar proxied   = editorCls.prototype.paste;\neditor.init('[data-editable], [data-fixture]', 'data-name');\nContentEdit.Root.get().unbind('paste', editor._handleClipboardPaste);\nContentEdit.Root.get().bind('paste', function(element, ev) {\n    var clipboardData = null;\nif (ev.clipboardData) {\n    clipboardData = ev.clipboardData.getData('text/plain');      \n}\n\nif (window.clipboardData) {\n    clipboardData = window.clipboardData.getData('text/plain');\n}\n\n});\neditor.paste = function(element, clipboardData) {\nvar content, cell, firstNewRow, html, i, index, insertElement, root, row, rows, table, tableConfig, tableElement, tbody, td, thead, values, _createRow, _i, _len, _len2, _len3, _ref, _ref2, _ref3, _results;\ncontent = clipboardData;\nlines   = content.split('\\n');\n  lines   = lines.filter(function(line) {\n      return line.trim() !== '';\n  });\nencodeHTML = HTMLString.String.encode;\nif ( lines.length > 1) {\n  var selectedElm = ContentEdit.Root.get().focused();\n\n  lines.forEach(function(line){\n\n    line  = encodeHTML(line);\n    hline = new ContentEdit.Text('p', {}, line);\n\n    selectedElm.parent().attach(hline, selectedElm.parent().children.indexOf(selectedElm) + 1)\n\n  });\n\n  editor          = ContentTools.EditorApp.get();\n\n  editor.syncRegions();\n\n} else  {\n    return proxied.call( this, element, clipboardData ); //AS YOU WHERE\n  }\n};\n```. ",
    "oodavid": "My approach was to use this CSS:\ncss\n.ct-widget.ct-toolbox {\n  top: 80px;\n  left: 5px;\n}\n.ct-toolbox__grip {\n  display: none;\n}\nYou'll also need to run localStorage.removeItem('ct-toolbox-position'); to remove the stored position of the widget as ContentTools sets the top and left inline styles which have the highest priority of all CSS rules.\nAlternatively you could leverage the localStorage value by manually overriding it, ie:\njavascript\nlocalStorage.setItem('ct-toolbox-position', '5,80')\n. You might want to read #120 \n. ",
    "etlel": "Thank you for the commit and the snippet. Here is JS code that worked for me. Im posting it beause It took me a while to find the missing loop. I also added the \" > -1 \" test in line 5.\njavascript\n    ContentEdit.Root.get().bind('attach', function (elm){\n        elm.descendants().forEach(function(elmm){\n            if(elmm.typeName() != 'Video') return;\n            if(elmm.attr('src').indexOf('wmode') > -1) return;\n            if(elmm.attr('src').indexOf('?')  > -1) return elmm.attr('src', elmm.attr('src') + '&wmode=transparent');\n            else return elmm.attr('src', elmm.attr('src') + '?wmode=transparent');\n        });\n    });\n. The word count is increasing after each blank edit.\n. Hi Anthony, the same thing is still happening with the numbers list :)\n. I can't reproduce it anymore. Caching problem maybe? Looks alright !\n. ",
    "bshorrosh": "Hi Anthony,\nYes, I need the video to always be wrapped in an element; preferably a div element.\nAn example will be very much appreciated.\nWhat will happen when the video is dragged to a different position; will it include the div wrapper?\nMany thanks.\n. Anthony, you're awesome. \nThe provided sample worked as expected; no further implementations are needed. Thank you.\nYou may consider enabling dragging and resizing div/p elements similar to images/videos.\nThis is a great tool with much potential; thank you for sharing it with us.\n. ",
    "Schweinepriester": "\nInternally we use milestones to flag what will be in an upcoming release and so my intention was to use the same approach, and at the same time that would lend itself nicely to a changelog. The first milestone was planned to be when all the tests where complete but I simply have gotten that far yet unfortunately.\n[\u2026]\nI'm very happy to hear suggestions from yourself and others on the best route to take :)\n\nAlright, thanks, milestones are good! :)\nAlso looking forward to NPM.\nClosing this issue as my question is answered.\n. ",
    "shockdot": "Hi @anthonyjb I've uploaded my rebuilt content tools (this one has the  tool added to it, at least it should).\nHere's the upload.\nhttps://volafile.io/r/tyX6Dg\nLine that causes the prototype undefined error...(Line 5913) (in content-tools.js\n__extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\nLine that causes add error... (Line 143) (in sandbox.js)\nContentTools.StylePalette.add([new ContentTools.Style('By-line', 'article__by-line', ['p']), new ContentTools.Style('Caption', 'article__caption', ['p']), new ContentTools.Style('Example', 'example', ['pre']), new ContentTools.Style('Example + Good', 'example--good', ['pre']), new ContentTools.Style('Example + Bad', 'example--bad', ['pre'])]);\n. @anthonyjb I uploaded the grunt file to the same upload link above.\nhttps://volafile.io/r/tyX6Dg\nI don't think this is the issue.. because... While I uploaded the content tools build with my tool, I also tried to simply do a clean build with no changes which produced the same errors.\n. Very very strange... that seemed to work, although I'm missing all the icons now haha. I guess I was running a cached version of the script or something... I dunno.\nThe help is greatly appreciated!\n. I've gone through that guide, problem being I don't know how to hook into the Inspector :/. But by the sounds of it, there's not even a similar example to accomplish what I want haha...\nAn alternative might be to make a color picker pop up for the span element...\n. I've managed to just make a Properties tool, which is great then I can just use this tool when I want with my sub tags (such as span, bold, i).\nHowever, the main issue still arises... Which is it gets the root element and not the current actively selected element... So when I open the properties window it opens with the root element.... Is there no way to get the currently selected element in the @apply function.... Maybe by somehow using the element, and selection variables together?\n. I have something like this..\n<p>Some text <span>goes here</span and also here</p>\nI've done so using a span tool that ive added myself. Next I've added another tool that opens up the PropertiesDialog, similar to the inspector... However this tool uses the start & end indexes to locate the first level parent of the selected content in the element variable that is fed to all the tools \"apply\" function.\nNow in this case when I use this custom tool, I call it the Properties tool, it should edit the closest inner html tag to the selection. In this case, if I had the word \"goes\" highlighted when it was pressed it would contain a link to the element goes here.\nNow what I expect to be able to do is use this element to create an object of the same type of the \"element\" variable that is fed into all apply functions in each tool. So that I can create a properties dialog using the selected element and not the root element (p). So when I call the PropertiesDialog, instead of it being for the p tag it will be for the span tag.\nLiterally I'm done everything and am just missing this one step...\n. I was able to produce the desired functionality by just replacing parts of the element variable like so...\nvar element_j = $(element._domElement);\n      if(element_j)\n      {\n        selected = $(\":contains(\" + element._domElement.innerText.substring(from, to) + \")\", element_j);\n        element._cached = $(selected).html();\n        element._domElement = selected[0];\n        element._tagName = $(selected).prop(\"tagName\").toLowerCase();\n      }\nNot sure if this is an acceptable solution, or if it will produce unforseen issues. However, I'm starting to test it now. If it all works the only thing left is for me to convert this into coffee(going to take forever since I don't know coffee, if anyone wants to help out and do that for me thatd be great -.-).\nJust tested and this method had a few issues -.- ugh. It made the text collapse into only the span element, and made it not editable. Ugh.\nEdit...\nJust saw your post, will try.\n. Hmm so I tried this...\nselected = new ContentEdit.Text($(selected).prop('tagName'), {}, element._domElement.innerText.substring(from, to));\nAnd it didn't produce any errors but it also didn't change anything. I'm assuming this is because we actually only created a completely new ContentEdit.Text instead of create a new one that is linked to the original dom_element...\n. Okay well that wasn't working out well entirely... So I took to another route... This time I made the properties dialog appear when ever I apply the span element for the first time...\nThey way it works is...\nUser selects a section of text, clicks the span element for the first time, properties window opens, they select the class, click apply. Then it adds the tag to the selection. Simple. It works great.\nOnly issue now is when we try to remove the span element by clicking the span tool again it doesn't remove it...\nNot sure why...\nThis is my code for the apply function... I expected that if the isApplied condition gets thrown that any tag in the selection with span in it gets removed... Unless I'm mistaken and it just does a character match of wild card? Which thinking about it now it might....?\n```\n    @apply: (element, selection, callback) ->\n        # Apply the tool to the current element\n        element.storeState()\n    [from, to] = selection.get()\n\n    if @isApplied(element, selection)\n        element.content = element.content.unformat(\n            from,\n            to,\n            new HTMLString.Tag(@tagName)\n            )\n\n        element.content.optimize()\n        element.updateInnerHTML()\n        element.taint()\n\n        element.restoreState()\n\n        callback(true)\n    else\n        # Set-up the dialog\n        app = ContentTools.EditorApp.get()\n\n        # Modal\n        modal = new ContentTools.ModalUI()\n\n        # Open a Properties Dialog to choose a class...\n        temp_span = new ContentEdit.Text(@tagName, {}, \"\");\n        dialog = new ContentTools.PropertiesDialog(temp_span);\n\n        # Support cancelling the dialog\n        dialog.bind 'cancel', () =>\n            dialog.unbind('cancel')\n\n            modal.hide()\n            dialog.hide()\n\n            if @element.restoreState\n                @element.restoreState()\n\n        # Support saving the dialog\n        dialog.bind 'save', (attributes, styles, innerHTML) =>\n            dialog.unbind('save')\n\n            attributes = {}\n\n            classes = \"\";\n            for name, value of attributes\n\n                # The `class` attribute has to be handled differently from other\n                # attributes as CSS classes should only be set using the\n                # add/removeCSSClass methods.\n                if name == 'class'\n                    # If the value is null (marked for remove) default it to an\n                    # empty string so all classes will be safely removed.\n                    if value == null\n                        value = ''\n\n                    # Add the classes to the classes list....\n                    classes += value + \" \"\n                else\n                    attributes[name] = value\n\n\n            # Apply the style changes\n            for cssClass, applied of styles\n                    classes = cssClass + \" \"\n\n            # Apply the classes attribute...\n            attributes[\"class\"] = classes\n\n            element.content = element.content.format(\n                from,\n                to,\n                new HTMLString.Tag(@tagName, attributes)\n                )\n\n            # Get rid of the selector...\n            modal.hide()\n            dialog.hide()\n\n            element.content.optimize()\n            element.updateInnerHTML()\n            element.taint()\n\n            element.restoreState()\n\n            callback(true)\n\n        app.attach(modal)\n        app.attach(dialog)\n        modal.show()\n        dialog.show()\n\n```\n. Perfect! Using just the tag name worked :) Thanks for the guidance.\n. ",
    "dantejauregui": "My friend @johnidm and me are really interested in support you,\ncheers!\n. Yeah @anthonyjb  we were thinking about the \"pop-up menu\"  to move to the left center and right  position  the multimedia resources :)   like in the picture attached\n@bfintal nice to meet you!, is it true that u have a project related about a \"pop up menu\"?? :) \nKeep in touch! \n@jonhidm and me are sending warm regards   :) \n. ",
    "Portekoi": "I've found my mistake. In the save.php, I change this : \n$arr = array('url' => $_POST['url'], 'width' => $_POST['width'], \n 'alt'=> \"Image\", 'size' => array('width' => $items[0], 'height' => $items[1] ));\nby this : \n$arr = array('url' => $_POST['url'], 'width' => $_POST['width'], \n 'alt'=> \"Image\", 'size' => array($items[0], $items[1] ));\n. Hi @anthonyjb thanks for your reply. No problem. I really want to use your project but my interface is using bootstrap and as you can see on this link, http://portekoi.com/contentools/ , if you edit the button \"view detail\", you lost the Bootstrap style button :(\nSo, i don't know how to do that. Thanks again. Really nice work.\n. It's ok with the lastest version.. Thanks for your help :)\nI have found a solution for my first problem : Size Image by by : \n```\ndialog.save(\n    response.url,\n    response.size,\n        {\n        'alt': response.alt,\n        'data-ce-max-width': response.size.width,\n        'width': response.size.width,\n        'height': response.size.height\n    });\n```\ndialog.save(\n    response.url,\n    [response.size.width, response.size.height],\n        {\n        'alt': response.alt,\n        'data-ce-max-width': response.size.width,\n        'width': response.size.width,\n        'height': response.size.height\n    });\nBut when I load an image, previous is not replaced by the new one and go on bottom : \n\n. Sorry @anthonyjb to post again but I'm stuck on this problem. Can you take a look when you can? Thanks a lot.. No, sorry. I've created a SO : \nhttps://stackoverflow.com/questions/47401003/contenttool-and-image. ",
    "CapRoberts": "Sounds great, but have not been able to make this work, how do you incorporate this?\n. Ok have worked it out\n. ",
    "brahma-dev": "@CapRoberts \nTry this gist \n. @anthonyjb Is there a way to disable the ignition UI ?\n. @anthonyjb I am looking for the API to \"destroy\" it. Ideally to not generate it in the first place.\n. @anthonyjb Thanks. I am totally comfortable with that. Was just wondering if there was a flag or API to do so.\n. ",
    "patrikengborg": "I came up with a nifty little solution for this. I didn't want to clutter the toolbox further and the properties dialog didn't feel like the perfect solution either. So with this script it toggles between alignment classes (defined in const classes) when you double-click the image.\nwindow.ContentEdit.Root.get().bind('mount', function (element) {\n  if (element.type() !== 'Image') return\n\n  const classes = ['img-left', 'img-center', 'img-right']\n\n  element.domElement().addEventListener('dblclick', function (ev) {\n    const currentClass = classes.find(className => element.hasCSSClass(className))\n    const currentIndex = classes.indexOf(currentClass)\n    const nextIndex = currentIndex < 0 || currentIndex === classes.length - 1\n      ? 0 : currentIndex + 1\n    element.removeCSSClass(currentClass)\n    element.addCSSClass(classes[nextIndex])\n    window.ContentEdit.Root.get().trigger('taint', this)\n  })\n}). +1. @Yopi Do you mind sharing how you changed the Image prototype to create an image instead of background-image div? I want to rely on percentage widths as well and disable pixel-resizing.\n\nThanks!. Thanks a lot! @Yopi . Exactly something like that i was looking for, but couldn't find it. Thanks a lot!\nI'm about to replace the Medium editor for Idnty. it's quite good but even that one adds a lot of  and lineheight and crap. Content tools is the first one i've seen to get it right, plus the brilliant UI. Will let you know how it goes!\nThanks for a quick and detailed reply!. Just tried to remount it manually. Obviously not the prettiest solution, but it seems to work fine. Could it come with any drawbacks?\ndocument.querySelector('#target').appendChild(document.querySelector('.ct-app')). You're a star, thanks!\nWill post questions to Stackoverflow from now on, didn't see the guidelines until after this. Sorry!. ",
    "akshaysinha91": "Hi Anthony, I used the code \n``` JavaScript\n// Select the first editable element when starting to edit\neditor.start = function () {\n    var editorCls = ContentTools.EditorApp.getCls();\n    editorCls.prototype.start.call(this);\n// Select the first editable region\nvar firstRegion = this.orderedRegions()[0];\n\n// Check the region has a child to focus on\nif (firstRegion.children.length > 0) {\n\n    // Select the first element\n    var firstElement = firstRegion.children[0];\n\n    // Give the element focus\n    firstElement.focus();\n}\n\n}\n```\nIts working fine on general scenario, but if the first element in article is a ul or ol then its giving a error\n\"Uncaught TypeError: firstElement.focus is not a function\"\n. hi @anthonyjb,\nThanks for your response, I checked this setting, but it's not I was looking for. I also believe shift+Enter should add a  rather than Enter.\nMy issue is when there is an empty p tag(new para), Shift+Enter does not create  tag, we have to use the Line-break button on toolbar to add  tag but its not intuitive.\n. Functionality is working now but when we move to the next Paragraph, the br tag is getting removed.\nIn an empty para\n1) Press Shift+Enter 2-3 times.\n2) Then enter some text.\n3) Then Press Enter.\n4) It strips the para. br tags get removed.\n. ",
    "Alex360hd": "Could you please share your code that replace a div with background with an img tag to deal with images in content tools ?\nI'm also interested as my website is responsive design, the background method is not appropriate at all to handle this.\n. Any update about this ? In the bootstrap era, it would be really useful to be able to open the popup dialog for link element to add some classes or custom attributes, without having to put them in a block level element to edit code directly (things you cannot explain to a non-technical user).. Yep, lots of css framework require some classes in order to function well, so it would be a extremly useful feature.\n. The problem come from the use of a div with background instead of real img tag when you edit an image.\nYou probably have a css framework like boostrap that apply a max-width:100% to your image to make them \"responsive\".\nThe problem is that due to :before and :after issue, the plugin use background css property in a div when you edit the images.\nBut as you switch to img tag to a div with background, you have a lot of different visual issue that become to appears. Yours is great example.\nTo fix it, you should wait for the module to support real img tag instead of converting it. I think the plugin should allow this in a parameter when you call the plugin.\n. +1 to this, it would be really great to be able to change an image.\nFor inspiration, look at the contentbuilder.js way to do that : http://innovastudio.com/builderdemo/example1.html\n. It would be great to officially add an option to handle images with a real  tag and not with a div and a background. It's a recurring problem everytime I use content tools.. There is problem with responsive design. A div with a background image don't behave like a responsive image.\nFor example, if I remember well, your div that handle the background image have inline width and height defined, which make it non responsive by nature.\nIn addition, your theme may have some rules applied to , rule that don't apply when you are in edit mode with div and background, so you have to add some custom rules to handle that divs to not break your theme when you click on the content tools edit button.\nI understand that working with div and background image allows you to provide some options to place / crop the image, that's why, instead of replacing the widget, I suggest to add a new one.\nBest regards,. Thank you for the informations, but conceptually, I can't understand the choice to replace standard image tag with a div with background. To me, it can only bring problems.. No problem :) This plugin is still an excellent plugin and I thank you for giving it to us !\nThat's why I criticize some part of it, I'm french and we have a proverb that says : \n\nQui aime bien chatie bien\n\nWhich could be translated like that : \n\nWho loves well chatises as well\n\nThat's what I'm doing with your plugin :). At lease, if somebody push a PR to improve image editing ? would you be ok to merge it to officially bring a good support for images ?. shift+enter don't add a new paragraph actually, but it create a line break\nTo me, it sound as a normal behavior, (it's possible you want to use line break in a fixture).\nIf you want to prevent line break in fixture, you could do something like that in CSS : \n[data-fixture] br { display:none; }\n\nShould do the job. ",
    "baldram": "If someone has client-side problem with crop, this comment may be also helpful: https://github.com/GetmeUK/ContentTools/issues/354#issuecomment-298298383 .. I had similar issue. The \"crop feature\" didn't work on client side. Now fixed!\nThe problem was with server-side response while 'imageuploader.fileready' event called an /upload-image server action. Response was invalid. Instead of expected eg.: {size: [320, 200], url: \"/uploads/something.png\"}, by mistake the size was returned with a file size ;-) \nI think also for others this a bit misleading name size instead of \"dimensions\" could lead to similar issue ;-) \nWhen I fixed the \"size\" response, the crop feature worked perfectly!. ",
    "mstojanovv": "Hi @anthonyjb .\nThanks for your reply and yes this worked good now.\nAny ETA for the next release.\nRegards.\n. Thats good. Waiting for the release.\nThanks\n. http://s8.postimg.org/52wkrn2sl/image.png\nHere is the console and also the $_POST data.\nNo errors outputed and cant get it why sometimes the helper elements from the Content Tools is not removed.\nThis happens now ex. I added 2 table rows in the first table rows the  elemnts were filled with text and in the seconds tr the  elements were blank so in this case when i saved it the Content Tools elements were not removed.\n. I dont really use the autosave feature. This is copied from the tutorial.\nI save the data by clicking on the button (the green button) from the editor.\nNow i found when the error occurs but no idea why.\nI start with a clean content. \nhttp://s21.postimg.org/4bsrvcr5z/image.png\nI add 1 paragraph with content TEST and save it - WORKS GOOD.\nAfter that i add table - http://postimg.org/image/s0u3axkwf/\nAnd click the save button this error occurs - http://postimg.org/image/735dt6ynl/\nReally strange.\n. Yes you can try it on the beta site. I sent you an email to your work mail. getme.co.uk\n. I changed this. But seems the problem still exists.\nNow only the paragraph get affected by the helper classes ce-element ce-element--type-text ce-element--focused.\nThanks.\n. Yes i'm quite a sure that the issue produces from the Add item code but only when the cursor is focused to some Content Tools element.\n1. Try this with clean content and click directly add item - In this case you were not previously focused in some Content Tools element and the data send to server is good.\n2. While you are focused on some element (like in the screenshot i sent to you) click Add Items - Data send to server is not good.\nThanks.\n. Hi,\nThis fixed the issue. I didnt thought that this can cause this kind of problem.\nGlad is fixed.\nThanks for your help.\nGreat job.\n. ",
    "simonmuys": "Hi Anthony, just a heads up on this issue:\nFirst, you're entirely right saying all the problems come from my poor handling in back-end :).\nI've solved the problem of the double crop quite easily: I was using pathinfo but since your JS adds a parameter to the URL, I needed to parse it first to escape the parameter. That didn't take long.\nSecond problem, on the crop, logging the $crop array returned the correct values, as you'd have guessed. Back-end, I logged everything little by little and it resulted the problem was I retrieve an array of characters instead of a proper array of the four values. So using $crop[0] or $crop[1] only returning the corresponding character and not the whole value. For example, if my crop array was [0.234, 0.5, 1, 1], $crop[0], $crop[1], $crop[2], $crop[3] were returning respectively '0', '.', '2' and '3'. I don't know where that shit comes from, I've looked extensively to find explanations but nothing to be found. I guess Laravel Request fa\u00e7ade must have something wrong with floats being passed through a formData format. \nWhat I did is to explode the string into a proper array. It's dirty work, but it made the trick. \nAfterwards, the integration with Image Intervention library was headache but nothing maths can't solve. I'll publish the full Laravel Controller so feel free to use it in a tutorial if need be (it might not be perfect but it works for me!).\nNow, for the last problem, I've had time to look a bit more into it and the problem was not on second save but on saving while no modification had been made. But you had provided a piece of code for that in your tutorial so it's not been too hard to solve. \nI have now just one remaining problem with the edit toolbar that remained active when editor was shut or saved was performed. I tried to solve that using widget.hide() but it seems each time I use it it breaks the reste of the saving process. \nI'll now concentrate on building a proper stylesheet and a tool for adding token calling for external content. \nThanks again for your help!\nSimon\nPS: this is the current Laravel Controller\n```\n<?php namespace App\\Http\\Controllers;\nuse File;\nuse Validator;\nuse Redirect;\nuse App\\User;\nuse Intervention\\Image\\ImageManagerStatic as Image;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Auth;\nuse App\\Http\\Controllers\\Controller;\nclass UploadsController extends Controller {\n/**\n * Upload by AJAX.\n *\n * @param $request\n * @return Response\n */ \npublic function upload(Request $request)\n{\n    $user = User::find(Auth::user()->id);\n    $imgid = count(glob(public_path().'/temp/'.$user->slug.'-image-*.*'))+1;\n\n    $image = $request->file('image'); \n    $imagename = $user->slug.'-image-'.$imgid.'.'.$image->getClientOriginalExtension();\n    $request->file('image')->move(public_path().'/temp/', $imagename);\n\n    $size = getimagesize(public_path().'/temp/'.$imagename);\n    $url = asset('temp/'.$imagename);\n\n    return response()->json(['size' => $size, 'url' => $url]);      \n}\n\n/**\n * Rotate image by AJAX.\n *\n * @param $request\n * @return Response\n */ \npublic function rotate(Request $request)\n{\n    $origin = $request->input('url');\n\n    $user = User::find(Auth::user()->id);\n    $imgid = count(glob(public_path().'/temp/'.$user->slug.'-image-*.*'))+1;\n    $imagename = $user->slug.'-image-'.$imgid.'.'.pathinfo(parse_url($origin)['path'], PATHINFO_EXTENSION);\n\n    if ($request->input('direction') === 'CW') {\n        $img = Image::make($origin)->rotate(-90);\n    }\n    elseif ($request->input('direction') === 'CCW') {\n        $img = Image::make($origin)->rotate(90);\n    }           \n    $img->save(public_path().'/temp/'.$imagename);\n\n    $size = getimagesize(public_path().'/temp/'.$imagename);\n    $url = asset('temp/'.$imagename);\n\n    return response()->json(['size' => $size, 'url' => $url]);\n}\n\n/**\n * Insert image by AJAX.\n *\n * @param $request\n * @return Response\n */ \npublic function insert(Request $request)\n{\n    $origin = $request->input('url');\n\n    $user = User::find(Auth::user()->id);\n    $imgid = count(glob(public_path().'/media/'.$user->slug.'-image-*.*'))+1;\n    $imagename = $user->slug.'-image-'.$imgid.'.'.pathinfo(parse_url($origin)['path'], PATHINFO_EXTENSION);\n\n    if ($request->input('crop') !== null) {\n        $crop = explode(\",\", $request->input('crop'));\n\n        $width = Image::make($origin)->width();\n        $height = Image::make($origin)->height();\n\n        $cropparam1 = round(($crop[3]-$crop[1])*$width);\n        $cropparam2 = round(($crop[2]-$crop[0])*$height);\n        $cropparam3 = round($crop[1]*$width);\n        $cropparam4 = round($crop[0]*$height);\n\n        $img = Image::make($origin)->crop($cropparam1, $cropparam2, $cropparam3, $cropparam4);\n    }\n    else {\n        $img = Image::make($origin);\n    }\n\n    $img->save(public_path().'/media/'.$imagename);\n\n    $size = getimagesize(public_path().'/media/'.$imagename);\n    $url = asset('media/'.$imagename);\n    $alt = '';\n\n    return response()->json(['size' => $size, 'url' => $url, 'alt' => $alt]);       \n}\n\n}\n```\n. Hi Anthony,\nI'm struggling with creating new tools with your API.\nRight now, I'm trying nothing more fancy than creating a div wrapper with a class around the current paragraph. Since you have no tool that works this way, I wonder if it's possible using your Tool creation tutorial. But from what I see of your API, it should be possible.\nI've been able to create a div component using ContentEdit.Element, but since I want it as a wrapper, I guess I should use ElementCollection instead.\nYet with the code below, I don't view any new div created. \nI know I haven't yet added the element text to the supposedly created node but I have erased everything that should not be useful for the div to appear.\nCould you point me to what I'm doing wrong again?\nThanks in advance,\nSimon\n```\nclass ContentTools.Tools.Dialogue extends ContentTools.Tool\n# Convert the current text block to a dialogue block (e.g <div class=\"dialogue\">foo</div)\n\nContentTools.ToolShelf.stow(@, 'dialogue')\n\n@label = 'Dialogue'\n@icon = 'dialogue'\n@tagName = 'div'\n\n@canApply: (element, selection) ->\n    # Return true if the tool can be applied to the current\n    # element/selection.\n    return element != undefined\n\n@apply: (element, selection, callback) ->\n    # Apply the tool to the current element\n\n    # Create a new dialogue element using the current elements content\n    collection = new ContentEdit.ElementCollection(\n        'div', {class:'dialogue'}\n        )\n    paragraph = new ContentEdit.Text('p')\n    collection.attach(paragraph)\n\n    # Get the element region or its closest one\n    if element.parent().type() != 'Region'\n        element = element.closest (node) ->\n        return node.parent().type() is 'Region'\n    region = element.parent()\n    region.attach(collection)\n\n    element.focus()\n\n    callback(true)\n\nContentTools.DEFAULT_TOOLS[0].push('dialogue')\n```\n. Thanks a lot Anthony, this works perfectly. I've changed a bit the code now for attaching the initial text element and returning the selection.\nI've started working on the token system. It's basically an insert of a  element with a given class (depending on the tool). I'm using the video modal to give the user the opportunity to select the right content to call. So far everything's working fine so I should be able to do what I need. \nI'm still struggling to pass the array of options from my Laravel DB to the coffee script of the modal and I still have to verify I can easily create a selectbox with options but I'm quite confident on both points. \nI'll share the code once it's done (or if I'm blocked somehow). \nThanks again for the plugin and congrats man. ContentTools is really an amazing library to work with.\n. Hi Anthony, \nI've almost managed to finalize the token system.\nHere is how I've done it. First, I've created a new tool:\n```\nclass ContentTools.Tools.Character extends ContentTools.Tool    \n# Create a character block (e.g </token) that will be parsed and replace by the proper content\nContentTools.ToolShelf.stow(@, 'character')\n\n@label = 'Character'\n@icon = 'character'\n@tagName = 'token'\n\n@canApply: (element, selection) ->\n    # Return true if the tool can be applied to the current\n    # element/selection.\n    return true\n\n@apply: (element, selection, callback) ->\n\n    # If supported allow store the state for restoring once the dialog is\n    # cancelled.\n    if element.storeState\n        element.storeState()\n\n    # Set-up the dialog\n    app = ContentTools.EditorApp.get()\n\n    # Modal\n    modal = new ContentTools.ModalUI()\n\n    # Dialog\n    dialog = new ContentTools.CharacterDialog()\n\n    # Support cancelling the dialog\n    dialog.bind 'cancel', () =>\n        dialog.unbind('cancel')\n\n        modal.hide()\n        dialog.hide()\n\n        if element.restoreState\n            element.restoreState()\n\n        callback(false)\n\n    # Support saving the dialog\n    dialog.bind 'save', (characterID) =>\n        dialog.unbind('save')\n\n        if characterID\n            # Create a new dialogue element using the current elements content\n            collection = new ContentEdit.ElementCollection(\n                'token', {class:'character', tokenType:'character', data:characterID}\n            )\n            collection.can('drag', true)\n            collection.can('remove', true)\n\n            # Find insert position\n            [node, index] = @_insertAt(element)\n            node.parent().attach(collection, index)\n\n        else\n            # Nothing to do restore state\n            if element.restoreState\n                element.restoreState()\n\n        modal.hide()\n        dialog.hide()\n\n        callback(characterID != '')\n\n    # Show the dialog\n    app.attach(modal)\n    app.attach(dialog)\n    modal.show()\n    dialog.show()\n\nContentTools.DEFAULT_TOOLS[2].push('character')\n```\nI've also created a specific dialog tool with a select box for passing the right content to the token (based on the video dialog tool). I've escaped the preview for simplification:\n```\nclass ContentTools.CharacterDialog extends ContentTools.DialogUI\n# A dialog to support inserting a character\n\nconstructor: ()->\n    super('Insert character')\n\nmount: () ->\n    # Mount the widget\n    super()\n\n    # Update dialog class\n    ContentEdit.addCSSClass(@_domElement, 'ct-character-dialog')\n\n    # Update view class\n    ContentEdit.addCSSClass(@_domView, 'ct-character-dialog__preview')\n\n    # Add controls\n    domControlGroup = @constructor.createDiv(['ct-control-group'])\n    @_domControls.appendChild(domControlGroup)\n\n    # Input\n    @_domInput = document.createElement('select')\n    @_domInput.setAttribute('id', 'selectcharacter')\n    @_domInput.setAttribute('class', 'ct-video-dialog__input form-control')\n    @_domInput.setAttribute('name', 'url')\n    domControlGroup.appendChild(@_domInput)\n\n    characters = jsvar.characters\n    for i in characters\n        do ->\n            for j in i\n                domOption = document.createElement('option')\n                domOption.setAttribute('value', j['id'])\n                domOption.innerHTML = j['name']\n                document.getElementById('selectcharacter').appendChild(domOption)\n\n    # Insert button\n    @_domButton = @constructor.createDiv([\n        'ct-control',\n        'ct-control--text',\n        'ct-control--insert'\n        ])\n    @_domButton.textContent = ContentEdit._('Insert')\n    domControlGroup.appendChild(@_domButton)\n\n    # Add interaction handlers\n    @_addDOMEventListeners()\n\nsave: () ->\n    # Save the character. This method triggers the save method against the\n    # dialog allowing the calling code to listen for the `save` event and\n    # manage the outcome.\n\n    # Attempt to parse a character embed URL\n    characterID = @_domInput.value.trim()\n    @trigger('save', characterID)\n\nshow: () ->\n    # Show the widget\n    super()\n\n    # Once visible automatically give focus to the link input\n    @_domInput.focus()\n\nunmount: () ->\n    # Unmount the component from the DOM\n\n    # Unselect any content\n    if @isMounted()\n        @_domInput.blur()\n\n    super()\n\n    @_domButton = null\n    @_domInput = null\n\n# Private methods\n\n_addDOMEventListeners: () ->\n    # Add event listeners for the widget\n    super()\n\n    # Add support for saving the character whenever the `return` key is pressed\n    # or the button is selected.\n\n    # Input\n    @_domInput.addEventListener 'keypress', (ev) =>\n        if ev.keyCode is 13\n            @save()\n\n    # Button\n    @_domButton.addEventListener 'click', (ev) =>\n        ev.preventDefault()\n\n        # Check the button isn't muted, if it is then the character ID field\n        # isn't populated.\n        cssClass = @_domButton.getAttribute('class')\n        if cssClass.indexOf('ct-control--muted') == -1\n            @save()\n\n```\nI then have a JS parser for adding content to the token through a JQuery load control:\n```\n$(function() {\n/*---------------------------------------*/\n/*  AJAX PARSER FOR TOKENS\n/*---------------------------------------*/\n$(document).ready(function(){           \n    $( \"token\" ).each(function() {\n        var tokenType = $( this ).attr('tokenType');\n        var tokenID = $( this ).attr('data');\n        $( this ).load( \"/tokenize/\"+tokenType+\"/\"+tokenID );\n    });\n});\n\n});\n```\nThe parser calls a Laravel controller that adds a blade view with the proper content inside the token div (I don't show the code for that since it's both pretty straightforward and very specific to my website).\nI have a lot of work to do on the editor to be entirely what I need it to be but most of the difficulties are now behind since it's mostly replication of functionalities. \nI still have two core issues I haven't figured out:\n- first, I just can't figure out how to have the drag/drop and remove behaviors on my token divs... I'm using an ElementCollection instead of an Element so it should be why the behavior is not set from the beginning and also why the collection.can('drag', true) method does not work. But when I switch to a regular Element, using the exact same syntaxe for the attributes object, it doesn'twork. Also, since ElementCollection inherits from Element, shouldn't it receive also the \"can\" method? \n- second, I still have a problem reediting the newly created div from the dialogue tool you've helped me build last time (I guess it will be the same for the token part). I can edit, toggle the behavior that creates a new div with the proper classes and appending the selected content, I can save and everything is fine. But when I try to edit again, I can't select the element anymore. My guess would be to say it's because they are ElementCollections instead of regular Elements, but I don't know where or how to specify these div can be selected and edited. Could you point out to the thing I've missed?\nI hope the code I'm sharing can give you some ideas for new implementations on the core of your plugin. I do believe that adding tokens with customized data that can be parsed to add external content is an interesting feature to have in the API.\nThanks again,\nSimon\n. Hi @anthonyjb . \nNo pb to give you an access to the WIP. Can you send me your email address at muys.simon@gmail.com. I'll send you the details for you to see what I've been doing and how it looks so far.\nBest regards,\nSimon\n. ",
    "markusvt": "Thank you! Works great :)\n. ",
    "adellibovi": "Perfect the solution about the alignments classes. I didn't thought about that.\nBut I have to say that is buggy since in ContentTools.Tools.AlignLeft\njavascript\n        # Remove any existing text alignment classes applied\n        for className in ['text-center', 'text-left', 'text-right']\n            if element.hasCSSClass(className)\n                element.removeCSSClass(className)\nContentTools is checking for hardcoded classes.\nThanks for pointing me out to toolbox tools method. I look forward to read more about this new request you are talking about.\n. Ah okay, I was going to make a PR for that (forget about the commit), but I guess it's too little. I will wait for your update :)\nThanks\n. Thank you and keep going with the good work!\n. ",
    "SimBioT1954": "Why is this code does not work?\n``` javascript\nContentEdit.Root.get().bind('focus', function (element){\n    var editor = ContentTools.EditorApp.get();\nif (element.domElement().classList.contains('plain-text')) {\neditor.toolbox().tools([]); // <-- Turns all tools off\n}else{ \neditor.toolbox().tools(ContentTools.DEFAULT_TOOLS); // <-- does nothing\n    }\n});\n```\n. @anthonyjb thanks for your work! \nAmazing library\n. @anthonyjb sorry but looks like \n\nThe develop branch \n\nhas issue.\nConsole: \nTypeError: this._domToolGroups is undefined\n...=j[f],g.unmount();for(this._toolUIs={};this._domToolGroups.lastChild;)this._domT...\n. Thanks! @anthonyjb \n. https://github.com/GetmeUK/ContentTools/issues/173\n. ",
    "Predjo": "Any ETA when it will be available on the NPM?\n. ",
    "makasanas": "You right but i want to embedded other website code than how can i do?\n. I want to embedded this code you http://codepen.io/rileyjshaw/pen/MyvWpw this is for example but this type of many website\n. This is right but not make sense because user need to find that particular link form code and user can't understand it directly like me.\n. an you give me some basic idea for customize any ContentTools element that can i customize my way example i need to use our pre element with prism code highlighting\n. Any way but this library is best than other.\n. ",
    "rvizcaino80": "This is great man! Amazing work. Thank you.\n. ",
    "bcreeves": "Thanks a lot for that! I was able to get it working. I used the parent elements height and width because that was my limiting element. Below is my code for anyone curious.\n```\nfunction checkOverflow(el) {\n    var curOverflow = el.style.overflow;\n    var isOverflowing = el.parentNode.clientWidth < el.scrollWidth || el.parentNode.clientHeight < el.parentNode.scrollHeight;\n    return isOverflowing;\n}\n// Revert any change an element that causes it to overflow it's parent element.\nContentEdit.Root.get().bind('taint', function(element) {\n    var domElement = element.domElement();\n// Stop editing and blur element\nif (checkOverflow(domElement) && element.previousHTML) {\n    domElement.innerHTML = element.previousHTML;\n    element.blur();\n}\n\n// Remember the previous state\nelement.previousHTML = domElement.innerHTML;\n\n});\n``\n. I think I've figured it out:editor.regions().datanamehere.children[0].focus();. Thanks for being so responsive in the issues on this project. That looks like it's for dynamically adding a new region. I want to dynamically add a new element (p, h1, h2, etc) inside of an already existing region. Is there a similar workaround for this situation?\n. Still having issues with this.\n. Is there any way to initialize elements that have already been added to the DOM or must each element be attached separately?\n. On the flip side of this question. How can I remove elements from a region? This is what I'm trying but doesn't seem to work:region.detach(document.querySelector(selector));`\n. ",
    "ghost": "@anthonyjb glad to help, I do a lot of test on IE and I fix bugs on it for my needs. More pull request to come :soon: \n. @anthonyjb I had same issue on IE9, 10 and 11 on windows.\n@guillaumepiot I agree with you on IE9 support. \n. @anthonyjb Sounds great ! I'm away from my computer for few weeks, sorry for my silence on your question.\n. Thanks for your reply Anthony. I don't think it should be too difficult as it seems that the issue is due to conversion into \"blockquote\" style. Let me know if you get it to work.. Perfect. Appreciate your time taken to reply :) . ",
    "richardprice": "Hi @anthonyjb - thats brilliant, cheers :)  Thanks for a really good tool!\n. It occurs to me on the walk home that the reason its firing three times is because I am binding three times - but I cant find any docs on clearing or checking existing bindings...?\n. Heh, typical, started using CT about a month ago :)\nIs there anyway to check if a particular component has a particular event listener for a given event? Or will I just have to clear the event of any listeners just to make sure?\n. @anthonyjb Thats fantastic, thank you very much for that!  I'm using the example angular directive code, so that might be a worthwhile addition to that as Im sure many people will run into the same issue (multiple bindings).\nJust a small correction to the code:\nif (editor._bindings['eventName'] && editor._bindings['eventName'].length > 0) {\n    ...has event binding for eventName...\n}\n(the binding collection/object is component._bindings)\n. ",
    "mike00ward": "+1, this would be a really nice feature.  thanks for the patch, works great!\n. ",
    "marc-drulot": "Ok thanks for your reply !\nsorry for the duplicate post, i've not see the original issue.\nI'm going to check it !\n. ",
    "jonathandion": "@anthonyjb sure\n<div data-editable=\"\" data-name=\"Project_LongDesc\">\n    <p class=\"ce-element--empty ce-element ce-element--type-text\"></p>\n    <p class=\"ce-element--empty ce-element ce-element--type-text\"></p>\n    <p class=\"ce-element--empty ce-element ce-element--type-text\"></p>\n    <p class=\"ce-element ce-element--type-text\">test</p>\n    <p class=\"ce-element--empty ce-element ce-element--type-text\"></p>\n    <p class=\"ce-element--empty ce-element ce-element--type-text\"></p>\n    <p class=\"ce-element--empty ce-element ce-element--type-text\"></p>\n</div>\n. @anthonyjb after the click\n. @anthonyjb \n<div data-editable=\"\" data-name=\"Project_LongDesc\">\n    <p></p>\n    <p>test</p>\n    <p></p>\n</div>\n. @anthonyjb  thanks for the help ! I have another question how to know if the editor is ready ? There is no callback like this :\neditor.isReady(function() {\n// do some stuff here\n})\nand what is the best way to show the the toolbox directly on load ? Right now I'm using the JQuery trigger() function.\nThanks !\n. @anthonyjb thanks allot for your time. \nThe reason I need a callback it's because i'm trying to target some elements from the plugin. I'm actually targeting my elements after the init function but the length is 0. I'm using a setTimeout or setInterval to check if 'editor.isReady()' and then I can manipulate the DOM. Like I said, I trigger a 'click' on the edit button to show the toolbox without clicking on it. I would like to know if there is a better way to do this.\nThanks.\n. Thanks @anthonyjb it's working like the trigger but I still need to wrap it in a setTimeout because sometimes it triggered sometime not. No a big issue.\n. ",
    "Rubytastic2": "Any other projects in the rails / php world that integrate ?\nVery much thanks for content tools looks exactly what we need. ",
    "shchedrakov": "@andyjbgm Thanks for fast answer.\nI use <col> to set column width of all table (columns may have different width). The colspan attribute that's not what I need. But you right that the <col> tag is deprecated. I will try to solve my problem through only CSS. I will write about what I got later.\n. @anthonyjb Thank you.\nI rewrited my html code and now it works good:\n<table class=\"table table-striped table-fixed-layout table-wrap\" id=\"tags-rpt-table-main\" data-editable>\n    <thead>\n        <tr>\n            <th style=\"width: 24%\">URL</th>\n            <th style=\"width: 9%\">Words</th>\n            <th style=\"width: 12%\">Characters</th>\n            ....\n        </tr>\n    </thead>\n    <tbody>\n        {% for data in tables.tagsInfo %}\n            <tr>\n                <td>{{ data.url }}</td>\n                <td>{{ data.words|number_format(0, ' ', ' ') }}</td>\n                <td>{{ data.characters|number_format(0, ' ', ' ') }}</td>\n                ...\n            </tr>\n        {% endfor %}\n    </tbody>\n</table>\n. ",
    "nXu": "Thanks for your quick answer, @anthonyjb \nI could not reproduce the error in the sandbox either, it must be an error in my integration somewhere. I'll try my best to debug.\n. I was not yet able to figure out the reason as I haven't really taken the time, but it apparently doesn't always happen. I can't reproduce it in the online demo so I think it has something to do with how I integrated ContentTools, but for the most part, I just copypasted the code from the Getting started guide\n. @concept-core \nMy error is most likely not related. There is no request being sent, there's just a JS error:\ncontent-tools.js:3523 Uncaught TypeError: Cannot read property 'innerHTML' of null\n. ",
    "danielrob": "I had exactly the same question in mind. Great there is workable workaround. I was curious as to what happens if you call the editor.init method multiple times (as a way for it to pick up the added (or subtracted) elements)? Or would this cause all sorts of madness? \n. Plenty fantastic. I came at the right time! Thanks:)\n. ",
    "Mike8000": "I got it working already. Here it explains how to...\nhttp://stackoverflow.com/questions/7752188/formdata-appendkey-value-is-not-working/14092429#14092429\n. ",
    "rhnkyr": "Anybody? It is really urgent. My client wait for it.\n. Thank u for ur reply @anthonyjb . How did i miss it :)\n. ",
    "mallikarjuna909": "After the couple of Hours, I got the solution. Here you go.\nChange the mount function.\n_EditorApp.prototype.mount = function() {\n      this._domElement = this.constructor.createDiv(['ct-app']);\n      document.getElementById('YourPositionID').insertBefore(this._domElement, null);\n      return this._addDOMEventListeners();\n    };\n. In IE11, When we add Hyperlink then if we hit on enter it is removing the text. Please check this.\nThanks. . I resolved this issue by adding this line ev.preventDefault();  inside enter key!!\nLinkDialog.prototype._addDOMEventListeners = function () {\n            this._domInput.addEventListener('keypress', (function (_this) {\n                return function (ev) {\n                    if (ev.keyCode === 13) {\n                        ev.preventDefault(); // Add this line\n                        return _this.save();\n                    }\n                };\n            })(this));. Hi @anthonyjb ,\nThanks for your help.\nYour snippet working like charm after removing typos.\nelement.content = tip.concat(tail);\nelement.updateInnerHTML() . \nThat's cool and focus is not presenting at current position rather it is going to next or previous elements. So i've made some changes to get it work.\nvar from, to, _ref, cursor;\n_ref = selection.get(), from = _ref[0], to = _ref[1], cursor = from;\n/ Remove selected text from element if there is selected text /\nif (from != to) {\n    tip = element.content.substring(0, selection.get()[0]);\n    tail = element.content.substring(selection.get()[1]);\n    element.content = tip.concat(tail);\n    element.updateInnerHTML();\n    element.taint();\n    selection.set(cursor, cursor);\n    element.selection(selection);\n    element.focus();\n}\nelse {\n    / Remove whole element if there is no selected region /\n    element.parent().detach(element);\n}\n . Hi,\nI think it is required because some event handlers are being called several times if we don't  unbind events.  As per this comment i got \"when you destroy the editor you remove it from the DOM but that doesn't itself remove existing event bindings you have against the editor\". \nPlease correct me and confirm, so that i can close this question.\n. Hi @anthonyjb \nThanks for your kind reply. My doubt is clarified. Hence closed.. ",
    "queejie": "Yes, that's it.  The layout led me to believe I was editing the top, blue portion of the page.  When the two items weren't apparently editable, it seemed as though it wasn't functional.\nThank you for your rapid response!\n. ",
    "shawnlehner": "@anthonyjb Thanks for the quick reply! To answer your questions:\n- I am using the newest released version on the website.\n- I am pressing shift+enter inside of a <p> tag.\n- Yes. I can replicate this issue on the demo site. Please see my screenshots below.\nI am running this on the newest version of Chrome on a full patched Windows 10 machine.\nIn edit mode it shows the new lines correctly.\n\nAs soon as I save it loses the formatting because it has new line characters instead of <br>.\n\n. Great. Thank you very much for the help!\nAmazing editor by the way!\n. ",
    "userdude": "Note: Made some edits to code snippets.\n\nI found this issue trying to resolve an exception that was being thrown by Content Tools History. I'm not using the ignition, so we had removed it. This exception started at some point:\n\ncontent-tools.min.js:6 Uncaught TypeError: Cannot read property 'stopWatching' of null\n    at c.stop (content-tools.min.js:6)\n    at Vue$3.stop_editing (field_config_editor.js:212)\n    at Vue$3.boundFn [as stop_editing] (vue.js:171)\n    at HTMLDocument. (field_config_editor.js:27)\n    at HTMLDocument.dispatch (jquery-2.2.4.min.js:3)\n    at HTMLDocument.r.handle (jquery-2.2.4.min.js:3)\n\nThis is because editor.history is also null. When I looked into it, I notice that the History is initialized as part of the Ignition call. So, I ended up with this and the exception went away; let me know if this is what I should be doing or not:\n```\n    function init_content_editor() {\n        var FIXTURE_TOOLS, req, editor;\n    window.editor = editor = ContentTools.EditorApp.get();\n\n    // Because we aren't initilizing with Ignition(), we need to start\n    // the history manually, otherwise it throws an exception later\n    // because this.history.stopWatching() is null, which means the\n    // this.history reference is null too.\n    editor.history = new ContentTools.History(window.editor._regions);\n\n    // The fourth argument means don't include the Ignition() component\n    editor.init('[data-editable], [data-fixture]', 'data-name', null, false);\n\n    editor.addEventListener('saved', function (ev) {\n    ...\n\n```\nThen, elsewhere (it's a Vue.js app too), we have:\n```\n            start_editing: function() {\n                if (window.editor.isReady()) {\n                    $('.blocklet')\n                        .draggable({disabled: true,})\n                        //.resizable({disabled: true,})\n                    ;\n                window.editor.start();\n\n                return true;\n            }\n\n            return false;\n        },\n        stop_editing: function() {\n            $('.blocklet')\n                .draggable({disabled: false,})\n                //.resizable({disabled: false,})\n            ;\n\n            window.editor.stop(true);\n        },\n\n```. Nevermind, turns out I had states of the editable block being selected and THEN editable, and I wasn't adding the History object at the right time (which it was selected). Ignore the previous comment (which I deleted).. ",
    "damiansb": "I understand your point of view, and your solution covers the needs perfectly. Thanks a lot for your feedback. Keep the good work! \n. ",
    "themoor88": "That doesn't work...I tried it on your homepage demo as well.\n. Okay thanks for the work around. Here are my details for Chrome and for the type of OS I am using. Thanks for the quick reply.\n\n\n. No, I have a custom image uploader, image tool and image dialog. I am calling this specific code in the custom-image-tool in the apply class method.\n. Oh right! That was a silly question. Thanks for your help.\n. Hey,\nYes this is a custom image dialog, but I haven't done much change to the original code. I went to your website and tested on IE11 on a Windows 7 Ultimate SP1 computer. I am witnessing the same results. Checkout the screenshots.\nhttp://snpy.in/nTnTda\nhttp://snpy.in/i1Q92F\nCheers,\nWajid\n. Cool, thanks. The SO fix doesn't work and I think IE11 is no longer being updated \ud83d\ude1e \nThe issue does not occur on IE Edge. I will await your next release. \ud83d\udc4d \nThanks for the help.\nWajid\n. Fixed! Thanks a lot!\n. ",
    "Rverm": "@anthonyjb I would prefer building my own media manager, but I've looked at KCFinder and it also looks cool. \n@concept-core That's exactly what I'm looking for! Looking forward to it!\n. @concept-core I'm using jQuery, and Code Igniter for the php part. Thanks again! \n. @concept-core the latest version, 3.0.6 :)\n. @anthonyjb yes, looking for button styled links as I use multiple/different styles for links. Thanks!\n. In the paragraph would be nice.\n. @anthonyjb Great, going to take a closer look. Thanks!\n. ",
    "sbotting": "Hi @anthonyjb thanks for you quick reply, \nThat definitely helps.\nYou mention about registering editable tags, is there some resource that you can point me to that shows me how to do that, there are several parts of the page I want to edit that have div tags which enclose other tags (for sytlistic reasons) and it would be good if I could edit the content within those div tags.\nThanks very much for your help.\n. Hi @anthonyjb \nJust to make sure I'm understanding it, if I have some content that was marked as one editable region, like:\n```\n\nSome title\n \n \nCaption Underneath Image\n\nLarge paragraph of content...\n... more of the same\n\n```\nAnd I wanted to edit the content within the span, my best bet would to be change the format so that each logical group of tags was an editable region e.g.in the above case it would become three regions:\n```\n\nSome title\n\n \n \nCaption Underneath Image\n \n\nLarge paragraph of content...\n\n... more of the same\n```\nThanks once again for your time\n. Hi @anthonyjb \nI've come up with a workaround for my particular case although  I think it isn't really using it in the spirit it was intended.\nIf I indicate to CT that the div and span tags should be treated like block elements (like p tags for example) using the data-ce-tag=\"p\" attribute in each tag instance,  I can edit their contents so in the above case I can do the following: \n```\n\nSome title\n \n \nCaption Underneath Image\n\nLarge paragraph of content...\n... more of the same\n\n```\nAnd then the content of the span tag becomes editable, although you lose the ability to edit the tags at the bottom of the page with custom styles etc.\n. brilliant, thanks very much\n. ",
    "mattsah": "Hi @anthonyjb,\nCan you provide any insight on how this works and/or is circumvented with ContentFlow?  It's my understanding with ContentFlow that you can have a snippet which creates new flows, and therefore, in which you can insert other snippets.  If one editable area cannot be a child of another (without becoming static) how is this done?  Is the idea that no snippet that provides flows should also provide for editable areas (e.g. anything with a flow should mainly be structural) and all snippets with editable areas are isolated to be inserted in those flows?. @anthonyjb \nI understand all that.  My question was moreso, if I use ContentFlow to insert a snippet that has a flow in it, but is also editable at a higher level, say just for simplicity I have a two column layout for which I want people to be able to add paragraphs and other things directly to the columns, but also have the option of adding snippets.  So the Two column snippet itself contains:\n<div class=\"group split-2\">\n    <div data-editable data-ct-flow=\"column\">\n    </div>\n    <div data-editable data-ct-flow=\"column\">\n    </div>\n</div>\nNow if I add  that, then add a new snippet in one of the columns I might end up an editable section inside the parent which is editable.  How does ContentTools deal with that?  or doesn't it and the columns cannot be directly editable, i.e. would require someone to add an additional snippet that was editable before being able to edit/add content to it.. Here's a small example:\nEditor page:\nSave as whatever you like\n``` html\n<!doctype html>\n\n\n\n\n            html,\n            body {\n                width: 100%;\n                height: 100%;\n            }\n        \n\n\n\n\n\n",
    "jbehrouzi": "If i want get that without editing state , what should i do ? \n. ",
    "Macs75": "Thank you for the workaround, just out of curiosity, why not @_adjustColumns\nand not in @_createTable ?\n. Verified and works fine, thanks again.\nNow I've hit another problem with integration with bootstrap.\nLet's say you want a table inside a content editable area and slyle it to fill only part of the available width, in bootstrap it's done like this:\nhtml\n<div data-editable data-name=\"main-content\">\n    <blockquote>\n        Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.\n    </blockquote>\n    <p>John F. Woods</p>\n    <div class=\"row\">\n         <div class=\"col-md-7\"> \n              <table class=\"table table-bordered\">\n                  <tr>\n                        <td>123455</td>\n                        <td>ABCDEF</td>\n                  </tr>\n              </table>\n         </div>   \n    </div>\n</div>\nIf I include those divs then the table is not editable anymore. It could be useful to have a sort of flag to make the inside table still be editable but part of \"main-content\" data. Maybe adding data-editable to the table without a data-name attribute makes it part of a father editable content  even without being a direct child of the main div. Then at the moment of save the whole div is still sent to be saved. I understand there is already the handling of static content, in this case the static content has inside content-editable parts.\n. ",
    "FrancoisYu": "For the following code, it's not working :  \n```\nContentEdit.Root.get().bind('attach', function(element) {\n// We're only interested in tables\nif (element.type() !== 'Table') {\n    return;\n}\n\n// Add the table class to table\nelement.addCSSClass('table')\n\n});\n```\nInstead, I use:\n```\nContentEdit.Root.get().bind('attach', function(element) {\n// We're only interested in tables\nif (element.type() !== 'Table') {\n    return;\n}\n\n// Add the table class to table\nContentEdit.addCSSClass(element._domElement, 'table');\n\n});\n```\n. Thanks for the info. the following is my codes:\n```\nvar FIXTURE_TOOLS, EMPTY_TOOLS ;\n            ContentTools.IMAGE_UPLOADER = ImageUploader.createImageUploader;\n            ContentTools.DEFAULT_TOOLS = [];\n            FIXTURE_TOOLS = [['bold','image'],['undo', 'redo', 'remove']];\n            EMPTY_TOOLS =[];\n        newInquiryEditor = ContentTools.EditorApp.get();\n        newInquiryEditor.init('[data-editable]', 'data-name', fixtureTest=null, withIgnition=false);\n        newInquiryEditor.start();\n\n        newInquiryEditor.addEventListener('saved', function(ev) {\n            var saved;\n            console.log(ev.detail().regions);\n            if (Object.keys(ev.detail().regions).length === 0) {\n                return;\n            }\n            newInquiryEditor.busy(true);\n            saved = (function(_this) {\n                return function() {\n                    newInquiryEditor.busy(false);\n                    return new ContentTools.FlashUI('ok');\n                };\n            })(this);\n            return setTimeout(saved, 2000);\n        });\n\n        ContentEdit.Root.get().bind('focus', function(element) {\n            console.log('focus:', element);\n            return newInquiryEditor.toolbox().tools(FIXTURE_TOOLS);\n        });\n        ContentEdit.Root.get().bind('blur', function(element) {\n            console.log('blur:', element);\n            return newInquiryEditor.toolbox().tools(EMPTY_TOOLS);\n        });\n\n```\nHowever, it seems that I've encountered another problem. \nThere is 3 fields in my page: rx, subject, body.  I only want to show the toolbox only when the cursor is focusing in the body field ( which is a CT field). But the 'blur' event won't trigger when I click the rx field.\n. I setup a js event to set different tools for the CT. However, once the setup the CT to an empty toolbar, I cannot get the P and Img icon back. The following is my HTML & JS code:\nHTML:\n```\n\n\n\n\n                {{> newInquiryModalInner}}\n            \n\n\n\n\n\nNew Inquiry\n\n\n\n\n\nRX\n\n\n\n\n\nSbuject\n\n\n\n\n\nInquiry\n \n\n\n\n\nAttach\n\n\n\n\nSubmit\nCancel\n\n\n```\nJS:\n```\nTemplate.newInquiryModalInner.events({\n    'blur .js-inquiry': function(evt, tpl) {\n        console.log('inquiry blur');\n        EMPTY_TOOLS = [];\n        FIXTURE_TOOLS = [['bold','image'],['undo', 'redo', 'remove']];\n        newInquiryEditor.toolbox().tools(EMPTY_TOOLS);\n    },\n'focus .js-inquiry': function(evt, tpl) {\n    console.log('inquiry focus');\n    FIXTURE_TOOLS = [['bold','image'],['undo', 'redo', 'remove']];\n    newInquiryEditor.toolbox().tools(FIXTURE_TOOLS);\n    newInquiryEditor.start();\n},\n\n});\n```\nBTW, I'm using Meteor as the framework\n. It works just like a charm. Thank you so much.\nHowever I found another problem. If I click the inquiry and click the rx and click the inquiry again, the toolbar are all in grey. But I can still input the data into the inquiry and the icon will be in black again.\n\n. No. it doesn't work.  By using the codes above, click on any of the 3 fields, I can see the black Bold & Image icon.  \n```\n// Add DOM level event listeners to allow the element to interact with other \n// DOM elements.\nContentEdit.Root.get().bind('mount', function(element) {\n    element.domElement().addEventListener('blur', function (ev) {\n        return newInquiryEditor.toolbox().tools(EMPTY_TOOLS);\n    });\n    element.domElement().addEventListener('blur', function (ev) {\n        return newInquiryEditor.toolbox().tools(FIXTURE_TOOLS);\n    });\n    element.domElement().addEventListener('mousedown', function (ev) {\n        return newInquiryEditor.toolbox().tools(FIXTURE_TOOLS);\n    });\n});\n```\nBy using the following codes, it has the same result as the one I've posted:\n```\nTemplate.newInquiryModalInner.events({\n'blur .js-inquiry': function(evt, tpl) {\n    console.log('inquiry blur');\n    EMPTY_TOOLS = [];\n    FIXTURE_TOOLS = [['bold','image'],['undo', 'redo', 'remove']];\n    newInquiryEditor.toolbox().tools(EMPTY_TOOLS);\n},\n\n'focus .js-inquiry': function(evt, tpl) {\n    console.log('inquiry focus');\n    FIXTURE_TOOLS = [['bold','image'],['undo', 'redo', 'remove']];\n    newInquiryEditor.toolbox().tools(FIXTURE_TOOLS);\n    newInquiryEditor.start();\n},\n\n'mousedown .js-inquiry': function(evt, tpl) {\n    console.log('inquiry mousedown');\n    FIXTURE_TOOLS = [['bold','image'],['undo', 'redo', 'remove']];\n    newInquiryEditor.toolbox().tools(FIXTURE_TOOLS);\n    newInquiryEditor.start();\n},\n\n});\n```\nIt seems that I can see the toolbar, but just cannot reset the color ( clickable).\nAlso, if I input anything in the inquiry field, I can get the Bold & Image icon.\n. I do some test and don't know why it's working now with the following codes:\njs:\n```\n        var CloudinaryImageUploader, _resizeTimeout;\n        var FIXTURE_TOOLS = [['bold','image'],['undo', 'redo', 'remove']];\n        var EMPTY_TOOLS = [];\n    var CloudinaryImageUploader = (function() {\n        CloudinaryImageUploader.CLOUD_NAME = Meteor.settings.public.CloudinaryImageUploader_CLOUD_NAME;\n        CloudinaryImageUploader.DRAFT_DIMENSIONS = Meteor.settings.public.CloudinaryImageUploader_DRAFT_DIMENSIONS;\n        CloudinaryImageUploader.INSERT_DIMENSIONS = Meteor.settings.public.CloudinaryImageUploader_INSERT_DIMENSIONS;\n        CloudinaryImageUploader.RETRIEVE_URL = Meteor.settings.public.CloudinaryImageUploader_RETRIEVE_URL;\n        CloudinaryImageUploader.UPLOAD_PRESET = Meteor.settings.public.CloudinaryImageUploader_UPLOAD_PRESET;\n        CloudinaryImageUploader.UPLOAD_URL = Meteor.settings.public.CloudinaryImageUploader_UPLOAD_URL;\n\n        function CloudinaryImageUploader(dialog) {\n            this._dialog = dialog;\n            this._dialog.addEventListener('imageuploader.cancelupload', (function(_this) {\n                return function() {\n                    return _this._onCancelUpload();\n                };\n            })(this));\n            this._dialog.addEventListener('imageuploader.clear', (function(_this) {\n                return function() {\n                    return _this._onClear();\n                };\n            })(this));\n            this._dialog.addEventListener('imageuploader.fileready', (function(_this) {\n                return function(files) {\n                    return _this._onFileReady(files);\n                };\n            })(this));\n            this._dialog.addEventListener('imageuploader.rotateccw', (function(_this) {\n                return function() {\n                    return _this._onRotate(-90);\n                };\n            })(this));\n            this._dialog.addEventListener(' .rotatecw', (function(_this) {\n                return function() {\n                    return _this._onRotate(90);\n                };\n            })(this));\n            this._dialog.addEventListener('imageuploader.save', (function(_this) {\n                return function() {\n                    return _this._onSave();\n                };\n            })(this));\n        }\n\n        CloudinaryImageUploader.prototype._onCancelUpload = function() {\n            if (this._xhr) {\n                this._xhr.upload.removeEventListener('progress', this._xhrProgress);\n                this._xhr.removeEventListener('readystatechange', this._xhrComplete);\n                this._xhr.abort();\n            }\n            return this._dialog.state('empty');\n        };\n\n        CloudinaryImageUploader.prototype._onClear = function() {\n            this._dialog.clear();\n            return this._image = null;\n        };\n\n        CloudinaryImageUploader.prototype._onFileReady = function(ev) {\n            var file, formData;\n            file = ev.detail().file;\n            this._dialog.progress(0);\n            this._dialog.state('uploading');\n            formData = new FormData();\n            formData.append('file', file);\n            formData.append('upload_preset', this.constructor.UPLOAD_PRESET);\n            this._xhr = new XMLHttpRequest();\n            this._xhr.open('POST', this.constructor._getUploadURL(), true);\n            this._xhrProgress = (function(_this) {\n                return function(ev) {\n                    return _this._dialog.progress((ev.loaded / ev.total) * 100);\n                };\n            })(this);\n            this._xhrComplete = (function(_this) {\n                return function(ev) {\n                    var filename, readyState, status, text;\n                    readyState = ev.target.readyState;\n                    text = ev.target.responseText;\n                    status = ev.target.status;\n                    if (readyState !== 4) {\n                        return;\n                    }\n                    _this._xhr = null;\n                    if (parseInt(status) === 200) {\n                        _this._image = JSON.parse(text);\n                        _this._image.angle = 0;\n                        _this._image.width = parseInt(_this._image.width);\n                        _this._image.height = parseInt(_this._image.height);\n                        _this._image.maxWidth = _this._image.width;\n                        filename = _this.constructor.parseURL(_this._image.url)[0];\n                        _this._image.url = _this.constructor.buildURL(filename, [_this.constructor._getDraftTransform()]);\n                        return _this._dialog.populate(_this._image.url, [_this._image.width, _this._image.height]);\n                    } else {\n                        return new ContentTools.FlashUI('no');\n                    }\n                };\n            })(this);\n            this._xhr.upload.addEventListener('progress', this._xhrProgress);\n            this._xhr.addEventListener('readystatechange', this._xhrComplete);\n            return this._xhr.send(formData);\n        };\n\n        CloudinaryImageUploader.prototype._onRotate = function(angle) {\n            var filename, h, transforms, w;\n            this._image.angle += angle;\n            if (this._image.angle < 0) {\n                this._image.angle += 360;\n            } else if (this._image.angle > 270) {\n                this._image.angle -= 360;\n            }\n            w = this._image.width;\n            h = this._image.height;\n            this._image.width = h;\n            this._image.height = w;\n            this._image.maxWidth = this._image.width;\n            transforms = [this.constructor._getDraftTransform()];\n            if (this._image.angle > 0) {\n                transforms.unshift({\n                    a: this._image.angle\n                });\n            }\n            filename = this.constructor.parseURL(this._image.url)[0];\n            this._image.url = this.constructor.buildURL(filename, transforms);\n            return this._dialog.populate(this._image.url, [this._image.width, this._image.height]);\n        };\n\n        CloudinaryImageUploader.prototype._onSave = function() {\n            var attrs, cropRegion, cropTransform, filename, heightScale, ratio, transforms, widthScale;\n            transforms = [];\n            if (this._image.angle !== 0) {\n                transforms.push({\n                    a: this._image.angle\n                });\n            }\n            cropRegion = this._dialog.cropRegion();\n            if (!(cropRegion.toString() === [0, 0, 1, 1].toString())) {\n                cropTransform = {\n                    c: 'crop',\n                    x: parseInt(this._image.width * cropRegion[1]),\n                    y: parseInt(this._image.height * cropRegion[0]),\n                    w: parseInt(this._image.width * (cropRegion[3] - cropRegion[1])),\n                    h: parseInt(this._image.height * (cropRegion[2] - cropRegion[0]))\n                };\n                this._image.width = cropTransform.w;\n                this._image.height = cropTransform.h;\n                this._image.maxWidth = this._image.width;\n                transforms.push(cropTransform);\n            }\n            if (this._image.width > this.constructor.INSERT_DIMENSIONS[0] || this._image.height > this.constructor.INSERT_DIMENSIONS[1]) {\n                transforms.push({\n                    c: 'fit',\n                    w: this.constructor.INSERT_DIMENSIONS[0],\n                    h: this.constructor.INSERT_DIMENSIONS[1]\n                });\n                widthScale = this.constructor.INSERT_DIMENSIONS[0] / this._image.width;\n                heightScale = this.constructor.INSERT_DIMENSIONS[1] / this._image.height;\n                ratio = Math.min(widthScale, heightScale);\n                this._image.width = ratio * this._image.width;\n                this._image.height = ratio * this._image.height;\n            }\n            filename = this.constructor.parseURL(this._image.url)[0];\n            this._image.url = this.constructor.buildURL(filename, transforms);\n            attrs = {\n                'alt': '',\n                'data-ce-max-width': this._image.maxWidth\n            };\n            return this._dialog.save(this._image.url, [this._image.width, this._image.height], attrs);\n        };\n\n        CloudinaryImageUploader.createImageUploader = function(dialog) {\n            return new this(dialog);\n        };\n\n        CloudinaryImageUploader._getDraftTransform = function() {\n            return {\n                w: this.DRAFT_DIMENSIONS[0],\n                h: this.DRAFT_DIMENSIONS[1],\n                c: 'fit'\n            };\n        };\n\n        CloudinaryImageUploader._getRetrieveURL = function() {\n            return this.RETRIEVE_URL.replace('#CLOUD_NAME#', this.CLOUD_NAME);\n        };\n\n        CloudinaryImageUploader._getUploadURL = function() {\n            return this.UPLOAD_URL.replace('#CLOUD_NAME#', this.CLOUD_NAME);\n        };\n\n        CloudinaryImageUploader.buildURL = function(filename, transforms) {\n            var i, len, name, paramStrs, parts, transform, transformStrs, value;\n            transformStrs = [];\n            for (i = 0, len = transforms.length; i < len; i++) {\n                transform = transforms[i];\n                paramStrs = [];\n                for (name in transform) {\n                    value = transform[name];\n                    paramStrs.push(name + \"_\" + value);\n                }\n                transformStrs.push(paramStrs.join(','));\n            }\n            parts = [this._getRetrieveURL()];\n            if (transformStrs.length > 0) {\n                parts.push(transformStrs.join('/'));\n            }\n            parts.push(filename);\n            return parts.join('/');\n        };\n\n        CloudinaryImageUploader.parseURL = function(url) {\n            var filename, i, j, len, len1, name, pair, part, parts, ref, ref1, transform, transforms, value;\n            url = url.replace(new RegExp('^' + this._getRetrieveURL()), '');\n            parts = url.split('/');\n            parts.shift();\n            filename = parts.pop();\n            if (parts.length && parts[parts.length - 1].match(/v\\d+/)) {\n                parts.pop();\n            }\n            transforms = [];\n            for (i = 0, len = parts.length; i < len; i++) {\n                part = parts[i];\n                transform = {};\n                ref = part.split(',');\n                for (j = 0, len1 = ref.length; j < len1; j++) {\n                    pair = ref[j];\n                    ref1 = pair.split('_'), name = ref1[0], value = ref1[1];\n                    transform[name] = value;\n                }\n                transforms.push(transform);\n            }\n            return [filename, transforms];\n        };\n\n        return CloudinaryImageUploader;\n\n    })();\n\n    window.CloudinaryImageUploader = CloudinaryImageUploader;\n\n    var _resizeTimeout = null;\n\n    ContentEdit.Root.get().bind('taint', function(element) {\n        var resizeURL;\n        if (element.type() !== 'Image') {\n            return;\n        }\n        if (_resizeTimeout) {\n            clearTimeout(_resizeTimeout);\n        }\n        resizeURL = function() {\n            var cls, filename, newSize, ref, transforms;\n            cls = CloudinaryImageUploader;\n            ref = cls.parseURL(element.attr('src')), filename = ref[0], transforms = ref[1];\n            if (filename === void 0) {\n                return;\n            }\n            newSize = element.size();\n            if (transforms.length > 0 && transforms[transforms.length - 1]['c'] === 'fill') {\n                transforms.pop();\n            }\n            transforms.push({\n                w: newSize[0],\n                h: newSize[1],\n                c: 'fill'\n            });\n            return element.attr('src', cls.buildURL(filename, transforms));\n        };\n        return _resizeTimeout = setTimeout(resizeURL, 500);\n    });\n\n    // Add DOM level event listeners to allow the element to interact with other\n    // DOM elements.\n    ContentEdit.Root.get().bind('mount', function(element) {\n        element.domElement().addEventListener('blur', function (ev) {\n            return ContentTools.EditorApp.get().toolbox().tools(EMPTY_TOOLS);\n        });\n        element.domElement().addEventListener('focus', function (ev) {\n            return ContentTools.EditorApp.get().toolbox().tools(FIXTURE_TOOLS);\n        });\n    });\n\n/*            ImageUploader = (function() {\n            function ImageUploader(dialog) {\n                this.reader, this.image_url, this.img;\n                this.canvas = document.createElement(\"canvas\");\n                this.canvas_context = this.canvas.getContext('2d');\n\n                function rotateImage(direction){\n                    //These are swapped when rotating\n                    this.canvas.width = this.img.height;\n                    this.canvas.height = this.img.width;\n                    this.canvas_context.rotate(direction*Math.PI/2)\n                    if(direction > 0){\n                        this.canvas_context.translate(0,-this.canvas.height);\n                    }else{\n                        canvas_context.translate(-this.canvas.width,0);\n                    }\n                    this.canvas_context.drawImage(this.img, 0, 0);\n                    this.setImageFromDataURL(this.canvas.toDataURL(\"image/png\"), this.img.alt)\n                }\n\n                this.setImageFromDataURL = function(data_url, file_name){\n                    this.image_url = data_url;\n                    this.img = new Image();\n                    this.img.src = this.image_url;\n                    this.img.alt = file_name\n                    if(this.img.width>720){ //Scale down to 720px\n                        this.canvas.width = 720;\n                        this.canvas.height = this.img.height*720/this.img.width;\n                        this.canvas_context.drawImage(this.img, 0, 0, this.img.width, this.img.height, 0, 0, this.canvas.width,this.canvas.height);\n                        return this.setImageFromDataURL(this.canvas.toDataURL(\"image/png\"), this.img.alt);\n                    }\n                    this._dialog.populate(this.image_url, [this.img.width,this.img.height]);\n                };\n\n                this.cropImage = function(crop_region){\n                    this.canvas.width = this.img.width*crop_region[2];\n                    this.canvas.height = this.img.height*crop_region[3];\n                    this.canvas_context.translate(-this.img.width*crop_region[0], -this.img.height*crop_region[1]);\n                    this.canvas_context.drawImage(this.img, 0, 0);\n                    this.setImageFromDataURL(this.canvas.toDataURL(\"image/png\"), this.img.alt);\n                };\n\n\n                this._dialog = dialog;\n                this._dialog.addEventListener('cancel', (function(_this) {\n                    return function() {\n                        return _this._onCancel();\n                    };\n                })(this));\n                this._dialog.addEventListener('imageuploader.cancelupload', (function(_this) {\n                    return function() {\n                        return _this._onCancelUpload();\n                    };\n                })(this));\n                this._dialog.addEventListener('imageuploader.clear', (function(_this) {\n                    return function() {\n                        return _this._onClear();\n                    };\n                })(this));\n                this._dialog.addEventListener('imageuploader.fileready', (function(_this) {\n                    return function(ev) {\n                        return _this._onFileReady(ev.detail().file);\n                    };\n                })(this));\n                this._dialog.addEventListener('imageuploader.mount', (function(_this) {\n                    return function() {\n                        return _this._onMount();\n                    };\n                })(this));\n                this._dialog.addEventListener('imageuploader.rotateccw', (function(_this) {\n                    return function() {\n                        return _this._onRotateCCW();\n                    };\n                })(this));\n                this._dialog.addEventListener('imageuploader.rotatecw', (function(_this) {\n                    return function() {\n                        return _this._onRotateCW();\n                    };\n                })(this));\n                this._dialog.addEventListener('imageuploader.save', (function(_this) {\n                    return function() {\n                        return _this._onSave();\n                    };\n                })(this));\n                this._dialog.addEventListener('imageuploader.unmount', (function(_this) {\n                    return function() {\n                        return _this._onUnmount();\n                    };\n                })(this));\n            }\n\n            ImageUploader.prototype._onCancel = function() {};\n\n            ImageUploader.prototype._onCancelUpload = function() {\n                clearTimeout(this._uploadingTimeout);\n                return this._dialog.state('empty');\n            };\n\n            ImageUploader.prototype._onClear = function() {\n                this.img = null;\n                return this._dialog.clear();\n            };\n\n            ImageUploader.prototype._onFileReady = function(file) {\n                var _this=this;\n                var reader = new FileReader();\n                if (file){\n                    reader.readAsDataURL(file);\n                    reader.addEventListener('load', function(){\n                        _this.setImageFromDataURL(reader.result, file.name)\n                    });\n                }\n            };\n\n            ImageUploader.prototype._onMount = function() {};\n\n            ImageUploader.prototype._onRotateCCW = function() {\n                this.rotateImage(-1);\n            };\n\n            ImageUploader.prototype._onRotateCW = function() {\n                this.rotateImage(1);\n            };\n\n            ImageUploader.prototype._onSave = function() {\n                if (this._dialog.cropRegion()) {\n                    this.cropImage(this._dialog.cropRegion());\n                }\n                this._dialog.save(\n                    this.image_url,\n                    [this.img.width, this.img.height],\n                    {\n                        'alt': this.img.alt,\n                        'data-ce-max-width': this.img.width\n                    }\n                );\n            };\n\n            ImageUploader.prototype._onUnmount = function() {};\n\n            ImageUploader.createImageUploader = function(dialog) {\n                return new ImageUploader(dialog);\n            };\n\n            return ImageUploader;\n\n        })();\n\n*/\n    //ContentTools.IMAGE_UPLOADER = ImageUploader.createImageUploader;\n\n\n    ContentTools.DEFAULT_TOOLS = [];\n    ContentTools.IMAGE_UPLOADER = function(dialog) {\n        return CloudinaryImageUploader.createImageUploader(dialog);\n    };\n\n\n\n    newInquiryEditor = ContentTools.EditorApp.get();\n    newInquiryEditor.init('[data-editable]', 'data-name', fixtureTest=null, withIgnition=false);\n    newInquiryEditor.start();\n\n    // Disable refresh message\n    window.removeEventListener('beforeunload', newInquiryEditor._handleBeforeUnload);\n\n    // Disable cancel message\n    newInquiryEditor.addEventListener('revert', function(ev) {\n        ev.preventDefault();\n\n         // Revert\n         this.revertToSnapshot(this.history.goTo(0), false);\n         this.history.stopWatching();\n\n         // Hide UI\n         this._toolbox.hide();\n         this._inspector.hide();\n\n         // Reset the editor\n         this._history = null;\n         this._regions = {};\n         this._state = 'ready';\n\n         // Blue any existing focused element\n         //if (ContentEdit.Root.get().focused()) {\n         //this._allowEmptyRegions = function () {\n         //ContentEdit.Root.get().focused().blur();\n         //}\n         //}\n     });\n\n    $(\"#newInquiryModal\").modal(\"show\");\n\n```\ncss:\n```\nquestion{\nheight: auto;\nborder: 1px solid @mediumgray;\nborder-radius: 5px;\npadding: 5px 10px;\np:empty:not(:focus)::before {\n    content: attr(data-placeholder);\n}\n\n}\n/#newinquiry1 .ce-element--type-image{\n    background-size: 50% auto !important;\n}/\nquestion textarea{\nborder: none;\noverflow: auto;\noutline: none;\n-webkit-box-shadow: none;\n-moz-box-shadow: none;\nbox-shadow: none;\n\n}\n```\nhtml:\n<div class=\"form-group\" id=\"question\">\n                <div class=\"input-group w100\" data-editable data-inquiry-id=\"{{inquiry._id}}\" data-name=\"question\" name=\"question\">\n                    <p class=\"js-question js-inquiry-info\" data-placeholder=\"Please input your inquiry here ...\"></p>\n                </div>\n            </div>\n. Thanks, Anthony. The following is the clean code for anyone wants to use CT in the Meteor framework.\n1. The CT js must be in a function(), and call the function from a click or onRendered. CANNOT put it in the onRendered.\n2. The following is the codes:\ntemplate.html:\n<template name=\"newInquiryModalInner\">\n        <div class=\"form-group\" id=\"question\">\n            <div class=\"input-group w100 js-question\" data-editable data-inquiry-id=\"{{inquiry._id}}\" data-name=\"question\" name=\"question\">\n                <p data-ce-placeholder=\"Please input your inquiry here ...\">{{question}}</p>\n            </div>\n        </div>\n</template>\ntemplate.js:\n```\nTemplate.newInquiryModalInner.onRendered( function(){\n    enableContentTools();\n});\n```\nfunctions.js:\n```\nenableContentTools = () => {\n    var CloudinaryImageUploader, _resizeTimeout;\n    var FIXTURE_TOOLS = [['bold','image'],['undo', 'redo', 'remove']];\n    var EMPTY_TOOLS = [];\nvar CloudinaryImageUploader = (function() {\n    CloudinaryImageUploader.CLOUD_NAME = Meteor.settings.public.CloudinaryImageUploader_CLOUD_NAME;\n    CloudinaryImageUploader.DRAFT_DIMENSIONS = Meteor.settings.public.CloudinaryImageUploader_DRAFT_DIMENSIONS;\n    CloudinaryImageUploader.INSERT_DIMENSIONS = Meteor.settings.public.CloudinaryImageUploader_INSERT_DIMENSIONS;\n    CloudinaryImageUploader.RETRIEVE_URL = Meteor.settings.public.CloudinaryImageUploader_RETRIEVE_URL;\n    CloudinaryImageUploader.UPLOAD_PRESET = Meteor.settings.public.CloudinaryImageUploader_UPLOAD_PRESET;\n    CloudinaryImageUploader.UPLOAD_URL = Meteor.settings.public.CloudinaryImageUploader_UPLOAD_URL;\n\n    function CloudinaryImageUploader(dialog) {\n        this._dialog = dialog;\n        this._dialog.addEventListener('imageuploader.cancelupload', (function(_this) {\n            return function() {\n                return _this._onCancelUpload();\n            };\n        })(this));\n        this._dialog.addEventListener('imageuploader.clear', (function(_this) {\n            return function() {\n                return _this._onClear();\n            };\n        })(this));\n        this._dialog.addEventListener('imageuploader.fileready', (function(_this) {\n            return function(files) {\n                return _this._onFileReady(files);\n            };\n        })(this));\n        this._dialog.addEventListener('imageuploader.rotateccw', (function(_this) {\n            return function() {\n                return _this._onRotate(-90);\n            };\n        })(this));\n        this._dialog.addEventListener(' .rotatecw', (function(_this) {\n            return function() {\n                return _this._onRotate(90);\n            };\n        })(this));\n        this._dialog.addEventListener('imageuploader.save', (function(_this) {\n            return function() {\n                return _this._onSave();\n            };\n        })(this));\n    }\n\n    CloudinaryImageUploader.prototype._onCancelUpload = function() {\n        if (this._xhr) {\n            this._xhr.upload.removeEventListener('progress', this._xhrProgress);\n            this._xhr.removeEventListener('readystatechange', this._xhrComplete);\n            this._xhr.abort();\n        }\n        return this._dialog.state('empty');\n    };\n\n    CloudinaryImageUploader.prototype._onClear = function() {\n        this._dialog.clear();\n        return this._image = null;\n    };\n\n    CloudinaryImageUploader.prototype._onFileReady = function(ev) {\n        var file, formData;\n        file = ev.detail().file;\n        this._dialog.progress(0);\n        this._dialog.state('uploading');\n        formData = new FormData();\n        formData.append('file', file);\n        formData.append('upload_preset', this.constructor.UPLOAD_PRESET);\n        this._xhr = new XMLHttpRequest();\n        this._xhr.open('POST', this.constructor._getUploadURL(), true);\n        this._xhrProgress = (function(_this) {\n            return function(ev) {\n                return _this._dialog.progress((ev.loaded / ev.total) * 100);\n            };\n        })(this);\n        this._xhrComplete = (function(_this) {\n            return function(ev) {\n                var filename, readyState, status, text;\n                readyState = ev.target.readyState;\n                text = ev.target.responseText;\n                status = ev.target.status;\n                if (readyState !== 4) {\n                    return;\n                }\n                _this._xhr = null;\n                if (parseInt(status) === 200) {\n                    _this._image = JSON.parse(text);\n                    _this._image.angle = 0;\n                    _this._image.width = parseInt(_this._image.width);\n                    _this._image.height = parseInt(_this._image.height);\n                    _this._image.maxWidth = _this._image.width;\n                    filename = _this.constructor.parseURL(_this._image.url)[0];\n                    _this._image.url = _this.constructor.buildURL(filename, [_this.constructor._getDraftTransform()]);\n                    return _this._dialog.populate(_this._image.url, [_this._image.width, _this._image.height]);\n                } else {\n                    return new ContentTools.FlashUI('no');\n                }\n            };\n        })(this);\n        this._xhr.upload.addEventListener('progress', this._xhrProgress);\n        this._xhr.addEventListener('readystatechange', this._xhrComplete);\n        return this._xhr.send(formData);\n    };\n\n    CloudinaryImageUploader.prototype._onRotate = function(angle) {\n        var filename, h, transforms, w;\n        this._image.angle += angle;\n        if (this._image.angle < 0) {\n            this._image.angle += 360;\n        } else if (this._image.angle > 270) {\n            this._image.angle -= 360;\n        }\n        w = this._image.width;\n        h = this._image.height;\n        this._image.width = h;\n        this._image.height = w;\n        this._image.maxWidth = this._image.width;\n        transforms = [this.constructor._getDraftTransform()];\n        if (this._image.angle > 0) {\n            transforms.unshift({\n                a: this._image.angle\n            });\n        }\n        filename = this.constructor.parseURL(this._image.url)[0];\n        this._image.url = this.constructor.buildURL(filename, transforms);\n        return this._dialog.populate(this._image.url, [this._image.width, this._image.height]);\n    };\n\n    CloudinaryImageUploader.prototype._onSave = function() {\n        var attrs, cropRegion, cropTransform, filename, heightScale, ratio, transforms, widthScale;\n        transforms = [];\n        if (this._image.angle !== 0) {\n            transforms.push({\n                a: this._image.angle\n            });\n        }\n        cropRegion = this._dialog.cropRegion();\n        if (!(cropRegion.toString() === [0, 0, 1, 1].toString())) {\n            cropTransform = {\n                c: 'crop',\n                x: parseInt(this._image.width * cropRegion[1]),\n                y: parseInt(this._image.height * cropRegion[0]),\n                w: parseInt(this._image.width * (cropRegion[3] - cropRegion[1])),\n                h: parseInt(this._image.height * (cropRegion[2] - cropRegion[0]))\n            };\n            this._image.width = cropTransform.w;\n            this._image.height = cropTransform.h;\n            this._image.maxWidth = this._image.width;\n            transforms.push(cropTransform);\n        }\n        if (this._image.width > this.constructor.INSERT_DIMENSIONS[0] || this._image.height > this.constructor.INSERT_DIMENSIONS[1]) {\n            transforms.push({\n                c: 'fit',\n                w: this.constructor.INSERT_DIMENSIONS[0],\n                h: this.constructor.INSERT_DIMENSIONS[1]\n            });\n            widthScale = this.constructor.INSERT_DIMENSIONS[0] / this._image.width;\n            heightScale = this.constructor.INSERT_DIMENSIONS[1] / this._image.height;\n            ratio = Math.min(widthScale, heightScale);\n            this._image.width = ratio * this._image.width;\n            this._image.height = ratio * this._image.height;\n        }\n        filename = this.constructor.parseURL(this._image.url)[0];\n        this._image.url = this.constructor.buildURL(filename, transforms);\n        attrs = {\n            'alt': '',\n            'data-ce-max-width': this._image.maxWidth\n        };\n        return this._dialog.save(this._image.url, [this._image.width, this._image.height], attrs);\n    };\n\n    CloudinaryImageUploader.createImageUploader = function(dialog) {\n        return new this(dialog);\n    };\n\n    CloudinaryImageUploader._getDraftTransform = function() {\n        return {\n            w: this.DRAFT_DIMENSIONS[0],\n            h: this.DRAFT_DIMENSIONS[1],\n            c: 'fit'\n        };\n    };\n\n    CloudinaryImageUploader._getRetrieveURL = function() {\n        return this.RETRIEVE_URL.replace('#CLOUD_NAME#', this.CLOUD_NAME);\n    };\n\n    CloudinaryImageUploader._getUploadURL = function() {\n        return this.UPLOAD_URL.replace('#CLOUD_NAME#', this.CLOUD_NAME);\n    };\n\n    CloudinaryImageUploader.buildURL = function(filename, transforms) {\n        var i, len, name, paramStrs, parts, transform, transformStrs, value;\n        transformStrs = [];\n        for (i = 0, len = transforms.length; i < len; i++) {\n            transform = transforms[i];\n            paramStrs = [];\n            for (name in transform) {\n                value = transform[name];\n                paramStrs.push(name + \"_\" + value);\n            }\n            transformStrs.push(paramStrs.join(','));\n        }\n        parts = [this._getRetrieveURL()];\n        if (transformStrs.length > 0) {\n            parts.push(transformStrs.join('/'));\n        }\n        parts.push(filename);\n        return parts.join('/');\n    };\n\n    CloudinaryImageUploader.parseURL = function(url) {\n        var filename, i, j, len, len1, name, pair, part, parts, ref, ref1, transform, transforms, value;\n        url = url.replace(new RegExp('^' + this._getRetrieveURL()), '');\n        parts = url.split('/');\n        parts.shift();\n        filename = parts.pop();\n        if (parts.length && parts[parts.length - 1].match(/v\\d+/)) {\n            parts.pop();\n        }\n        transforms = [];\n        for (i = 0, len = parts.length; i < len; i++) {\n            part = parts[i];\n            transform = {};\n            ref = part.split(',');\n            for (j = 0, len1 = ref.length; j < len1; j++) {\n                pair = ref[j];\n                ref1 = pair.split('_'), name = ref1[0], value = ref1[1];\n                transform[name] = value;\n            }\n            transforms.push(transform);\n        }\n        return [filename, transforms];\n    };\n\n    return CloudinaryImageUploader;\n\n})();\n\nwindow.CloudinaryImageUploader = CloudinaryImageUploader;\n\nvar _resizeTimeout = null;\n\nContentEdit.Root.get().bind('taint', function(element) {\n    var resizeURL;\n    if (element.type() !== 'Image') {\n        return;\n    }\n\n    if (_resizeTimeout) {\n        clearTimeout(_resizeTimeout);\n    }\n    resizeURL = function() {\n        var cls, filename, newSize, ref, transforms;\n        cls = CloudinaryImageUploader;\n        ref = cls.parseURL(element.attr('src')), filename = ref[0], transforms = ref[1];\n        if (filename === void 0) {\n            return;\n        }\n        newSize = element.size();\n        if (transforms.length > 0 && transforms[transforms.length - 1]['c'] === 'fill') {\n            transforms.pop();\n        }\n        transforms.push({\n            w: newSize[0],\n            h: newSize[1],\n            c: 'fill'\n        });\n        return element.attr('src', cls.buildURL(filename, transforms));\n    };\n    return _resizeTimeout = setTimeout(resizeURL, 500);\n});\n\n// Add DOM level event listeners to allow the element to interact with other\n// DOM elements.\nContentEdit.Root.get().bind('mount', function(element) {\n    if (element.type() == 'Image') {\n        element.addCSSClass('viewImg');   //working\n    }\n    element.domElement().addEventListener('blur', function (ev) {\n        return ContentTools.EditorApp.get().toolbox().tools(EMPTY_TOOLS);\n    });\n    element.domElement().addEventListener('focus', function (ev) {\n        return ContentTools.EditorApp.get().toolbox().tools(FIXTURE_TOOLS);\n    });\n    element.domElement().addEventListener('mousedown', function (ev) {\n        return ContentTools.EditorApp.get().toolbox().tools(FIXTURE_TOOLS);\n    });\n});\n\nContentTools.DEFAULT_TOOLS = [];\nContentTools.IMAGE_UPLOADER = function(dialog) {\n    return CloudinaryImageUploader.createImageUploader(dialog);\n};\nnewInquiryEditor = ContentTools.EditorApp.get();\nnewInquiryEditor.init('[data-editable]', 'data-name', fixtureTest=null, withIgnition=false);\nnewInquiryEditor.start();\n\n// Disable refresh message\nwindow.removeEventListener('beforeunload', newInquiryEditor._handleBeforeUnload);\n\n// Disable cancel message\nnewInquiryEditor.addEventListener('revert', function(ev) {\n    ev.preventDefault();\n\n    // Revert\n    this.revertToSnapshot(this.history.goTo(0), false);\n    this.history.stopWatching();\n\n    // Hide UI\n    this._toolbox.hide();\n    this._inspector.hide();\n\n    // Reset the editor\n    this._history = null;\n    this._regions = {};\n    this._state = 'ready';\n\n    // Blue any existing focused element\n    if (ContentEdit.Root.get().focused()) {\n        this._allowEmptyRegions = function () {\n            ContentEdit.Root.get().focused().blur();\n        }\n    }\n});\n\n};\n```\n. The reason I'm using element._domElement is that I've got an error msg if I use the .element, I think it's related to the meteor framework. The following is the debug screen shot I took from the Chrome. Is there anything I can do to use ContentEditor.addCSSClass('element', 'viewImg')\n\nBTW, I cannot detect the element.type()==='Image' in the \"attach\" event with the following codes:\n```\nContentEdit.Root.get().bind('mount', function(element) {\n        if (element.type() == 'Image') {\n            debugger;\n            console.log('Image mount');\n            ContentEdit.addCSSClass(element, 'viewImg');\n        }\n        element.domElement().addEventListener('blur', function (ev) {\n            return ContentTools.EditorApp.get().toolbox().tools(EMPTY_TOOLS);\n        });\n        element.domElement().addEventListener('focus', function (ev) {\n            return ContentTools.EditorApp.get().toolbox().tools(FIXTURE_TOOLS);\n        });\n    });\nContentEdit.Root.get().bind('attach', function(element) {\n    if (element.type() == 'Image') {\n        debugger;\n        console.log('Image mount');\n        ContentEdit.addCSSClass(element, 'viewImg');\n    }\n    return ContentEdit.addCSSClass(element._domElement, 'js-question');\n});\n\n```\n. Yes, I've solved the problem by using the code :  \nelement.addCSSClass('viewImg');   //working\nI will try to use the sandbox demo, but since I'm using the Meteor, I may have to re-code the .js to fit the Meteor style.\nThanks again for you kindly help. I do really enjoy using your CT in my project.\n. ",
    "itsmelion": "I need stuff like this also for SEO purposes. But instead of a Default class, i need a default attribute for all anchors of a view: rel=\"external,nofollow\"\nam i missing something? how can i define this?. This should be a Major Feature.\nsometimes you just need edit the HTML.\nI Implemented ContentTools on my project, in to replace an old WYSIWYG and when i get from DB some pages that contain other HTML tags like divs etc, instead of p, tables, it cant be saved nor edited.\nThats really sad. \ud83d\ude1e . ",
    "indyrk": "Hey @anthonyjb  - I've got two pages here to demonstrate:\nNo Modal \nUses Modal \nThat would be amazing if you could take a look!\n-Rob\n. Thank you so much @anthonyjb !  That was definitely a fix for this.  I really appreciate your help.\n. ",
    "PaluMacil": "@indyrk The other issue was asking for an easier override / one that's at least consistent between BS3 and 4. It was closed after referencing this and then this was closed after mentioning that as the fix. This is still an issue of Bootstrap breaking other libraries and needs to be addressed--at minimum by keeping the override consistent so that people don't have a huge headache when things break when going to BS4.\n. ",
    "QuantumRevenger": "Hi @anthonyjb,\nThank you ever so much for pointing me in the right direction, I was under the impression there was no documentation as I was looking for it in the code (My IDE uses @jsdoc to determine descriptions and IntelliSense.)\nIt turns out that this project is far more capable than I initially thought, it really is amazing to have such control for personalising around your own projects. - Mine to simplify editing content for my clients who lack technical expertise.\nDo you think that the code will ever be updated to comply with \"http://usejsdoc.org/\"? If I ever have any spare time, I may contribute to the project by gradually adding in jsdoc (as I learn about the features)\n. I completely agree with you, I am a huge fan of ensuring my code flows and comments are presented well. This is why I took to PHPStorm as my IDE of choice, it is really worth the free trial in my opinion.\nStarted out using notepad, then notepad++, vs code, and then dipped into a free trial of PHPStorm thinking I would never actually buy it, never went back afterwards.\nI often hide the @jsdoc sections by collapsing them.\nHowever, I respect the path you choose for the project and whether supporting http://usejsdoc.org/ or not is ultimately your decision.\n. ",
    "kferran": "Thanks you guys! Greatly appreciated\nOn Jun 17, 2016 4:28 PM, \"Anthony Blackshaw\" notifications@github.com\nwrote:\n\nThanks @guillaumepiot https://github.com/guillaumepiot \ud83d\udc4d\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/GetmeUK/ContentTools/issues/242#issuecomment-226896254,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AAC27YIVtzZvtKJwaHP-QV_5IsL2wWlVks5qMx91gaJpZM4I4lzN\n.\n. \n",
    "sahanjith": "@guillaumepiot  Thank you for sharing this. i would like to have a bit more explanation about custom tag. i've converted your  contenttools-background-image.coffee to js and placed in my content-tools.js. Now its the front end part that i need a help. How to handle the background image in front end. (from HTML) I've placed the both div tags in my html. but it didn't work. \n. @guillaumepiot it worked. Thanks a lot! \n. Hi @anthonyjb I've tried using fixtures according to the example given in the sandbox. but my program is not working the way it should be. Problem is i'm not getting the fixture tools when i select a data fixture. it works for data editables. Could you please show me where it went wrong ? \n`##This is my .html page \n```\n            \nABC Company\n\n        <div data-fixture data-name=\"main-content-2\">\n            <h4>Sign In Page</h4>\n        </div>\n\n```\nSome title...\n\n\n`\n`##This is my editor.js script\nwindow.addEventListener('load', function() {\n    var editor,FIXTURE_TOOLS;\n```\n//Loading Content Tools Palette\neditor = ContentTools.EditorApp.get();\neditor.init('[data-editable], [data-fixture]', 'data-name');\nFIXTURE_TOOLS = [['undo', 'redo', 'remove']];\nContentEdit.Root.get().bind('focus', function(element) {\nconsole.log(\"data fixture function\")\nvar tools;\n  if (element.isFixed()) {\n    console.log(\"fixture\");\n    tools = FIXTURE_TOOLS;\n  } else {\n    console.log(\"else part\");\n    tools = ContentTools.DEFAULT_TOOLS;\n  }\n  if (editor.toolbox().tools() !== tools) {\n    return editor.toolbox().tools(tools);\n  }\n});\n```\n});`\n\n. Hi @anthonyjb, I tried that way also. Still i dont get the fixture tool panel.\n. @anthonyjb here it is:https://jsfiddle.net/495qz6mp/\n. @anthonyjb check this: https://jsfiddle.net/sahanjith93/k0L5kywg/\n. @anthonyjb There was some incompatibility with the content-tools.js version i was using i guess. i made all my libraries up to date and now its working. Thank a lot for all the helps.  \n. @anthonyjb Thank you! and greatly appreciated! I'm using content tools as an editor for my project and its  simply great. but, its  bit unclear for me how come i attach this background image uploader to my project ? a little explanation would do. i've converted the coffee script to js.  \n. @anthonyjb Thanks..It worked! :)\n. @anthonyjb Cant we use the approach that @guillaumepiot used to change the background image? \n. Hi @anthonyjb  Thank you for the response. This works with block level elements. If i want this to be happen with a div how to do that ? \nif (element.domElement().classList.contains('no-images')) \nhow to check this condition with a div ? \n. @anthonyjb yeah.....it worked! Thanks! \n. @anthonyjb - Thanks a lot! It worked and I've manage to mount a new button. Another issue i've faced is that to change the icon of a button. i tried editing the content tag in a button. but it works only for the icons that are already there in ignition.scss page. (Pencil icon, confirm icon, cancel icon and busy icon ). i tried using the codes in icomoon.json and build but its not working. I'm getting my icon like this. \n\n. Thank you @anthonyjb ! I have solved this already. Thank you for your support always! :+1: . ",
    "aniket-s": "How could i achieve it via jquery?\n. Thanks alot for your fast reply. Just some hours ago i opene up my page in mobile browser & i found when i click on insert image the popup is not responsive, is there a way to make the popup responsive\n. Ok thanks i will be waiting to hear from you soon\n. \n\n\ncheck these images! if you need more just let me know\n. okay thanks\n. ",
    "xxzefgh": "@anthonyjb Thanks for quick response. I'll try to explain in detail.\nIn my project, users have ability to write and edit posts, so I've editor with one region for writing post, and I'm doing autosave every one second, which works well. But I also have list of posts in sidebar, to let users quickly switch between them. My application is SPA, so I don't want to refresh page when user clicks on another post to edit. So, how can I replace content in editable area with new data, that I fetch dynamically? I don't even know from where to start with. Should I manually update DOM and call syncRegions?\n. PS. I was previously using medium editor, and what I want is easily implemented there, you can take a look at setContent function for reference https://github.com/yabwe/medium-editor#helper-methods\n. @anthonyjb Thank you very much, I made it.\n. ",
    "JNazarukPragmaticWorks": "@anthonyjb Thanks for the super fast response!\n. @anthonyjb Just tested this again (refreshed several times) and I still receive the same issue on the demo site.\n. @anthonyjb No worries, let me know if there's something you need and thank you for your time.\n. @anthonyjb I've tested this in Edge on my laptop as well as my tablet and it's working great!  Thank you for the fast fix and awesome response.\n. ",
    "ElijahFowler": "So the demo seems to be working now in version 38.14393.0.0, can anyone confirm?\n. ",
    "snimavat": "Thanks @anthonyjb for showing me the way, i will play with it now.\n. Thanks @anthonyjb \n. Oh yes, missed it, Thanks for the quick reply, and sorry for bombarding with issues.\n. Contenttools is the best thing i found.. way much nicer then the bulky editors. Just love it.\nI am doing a simple integration with grails, along with backend to create pages / serve pages / templating etc.\nWill put it on mygithub and upate here, just incase anyone can benifit.\n. Great, i would try it out..\nThe other issue i am facing is, element.constructor.name is always c, but never 'Image'\nResizing code:\n```\n imageResizer = (element) ->\n    $log.debug element.constructor.name\n    return if element.constructor.name != 'Image'\n    $log.debug \"Image resized\", element.constructor.name\n    #src = element.attrs(\"src\")\n    #$log.debug src\nContentEdit.Root.get().bind 'taint', imageResizer\n```\nHowever, it never pass this condition - if element.constructor.name != 'Image'\n. Perfect, that works.. i was following cloudinary example, which uses constructor.name\n. ",
    "carpusmedia": "Thank you @anthonyjb for such an awesome response, apologize for the delay.\nTurned out that the first line-break was the most important to get excluded in order to make the text content respect white-space: pre-line;. So I followed your advice and simply added a listener for the saved event, like so:\neditor.addEventListener('start', function (ev) {\n  ...\n  for (name in regions) {\n    // Remove the first line break\n   regions[name] = regions[name].replace(/\\r?\\n|\\r/,\"\");\n  }\n}\nThis worked out wonderfully.\nThank you again,\nChris\n. ",
    "borntodesign": "I am using the latest version of chrome, I have tested it from a clean slate however I know that the problem came from pasting a block of content in from a word document (sigh). We run a magazine company so all articles are first done in word.\n. ",
    "cgriffin4": "Creating a nested ol is fine but editing one results in collapsing the nested ol.\nProblem seems to be regulated to ol as ul behaves as expected.\n. @anthonyjb Apologies, you are correct. I commented too early and after a bit more testing realized it was not related. Thank you for raising the error.\n. @anthonyjb no problem - thank you for this project. I've had difficulties extending it but everything it does is exactly what I was looking for in a WSIWYG editor. Excellent work on UI/UX!\n. I've extensively reviewed why this happens in some instances and I believe I know the bug's cause (or most reproducible situation). Oddly, in Edge 20 this bug seems even less common. It only occurs when you have an element at the end of a section and then highlight it (or at least one character from the end of it). \nExample Edit showing bug:\n<li>A line with a <a href=\"#\">link<a></li>\nDetailed Explanation:\nWhen selecting link in this example, Edge puts the end of the selection outside the textNode and gives an incorrect endOffset (it's 2 in this example, maybe the number of child nodes?). End result is the _fromRange is 14 (correct) but the _toRange is getOffsetOfChildNode(divNode, divNode) which equals 18 (full length of node because it is not a child) and then afterwards the endOffset is added.\nWorkaround, maybe?:\nOnly adding endOffset to getOffsetOfChildNode if element !== endNode seems to work in my (limited) testing. But this is almost certainly a selection bug that would be more indicative of bigger issues and this \"fix\" will likely not solve the bigger issue of window.getSelection() behaving oddly at the end of your content areas. I'd love to get @anthonyjb input on what/where a proper solution should be implemented.\nComparatively in Chrome:\nHighlighting the word link will result in the proper selected range of [14, 18] in Chrome. this is because window.getSelection() returns the text node as the anchorNode. So window.getSelection().getRangeAt(0) has the startContainer and endContainer as the textNode with startOffset = 0 and endOffset = 4. At this point element is equal to the div that was generated by ContentTools and _getOffsetOfChildNode works as intended.\nEdit: Same bug present at the beginning of sections.. ",
    "RonB": "Thanks... works like a charm.\n. ",
    "dasuchin": "That worked, thanks.\n. ",
    "Petah": "+1 on making this an option\n. ",
    "krebul": "+1 for making this an option. ",
    "Smashr": "+1 ... . Hey Anthony, just wondering if there are any updates. :) Thanks.. ",
    "revyh": "Thanks for the quick response!\nSimplified code should look like this:\n``` coffeescript\nclass CarouselElement extends ContentEdit.ElementCollection\n  constructor: (attributes) ->\n    super('div', attributes)\ncssTypeName: () -> 'carousel'\n  type: () -> 'Carousel'\n  typeName: () -> 'Carousel'\nmount: () ->\n    super()\n@addCSSClass('slider')\n\n@_sliderInstance = new BM.Carousel(@domElement())\n\n@_domElement = @_sliderInstance.holder[0]\n\nunmount: () ->\n    for child in @children\n      child.unmount()\n    ContentEdit.Root.get().trigger('unmount', this)\nclass BM.Carousel\n  constructor: (root) ->\n    @root = $(root)\n    @slides = @root.children()\n    @holder = @root.wrap('').parent()\n    @info = $('')\n    @slidesCount = $('').appendTo(@info)\n    @slidesTitle = $('').appendTo(@info)\n    @fullscreenButton = $('').appendTo(@info)\n    @holder.append(@info)\n@root.owlCarousel\n  margin: 0\n  nav: true\n  dots: false\n  items: 1\n  smartSpeed: 400\n\n```\nWhen CarouselElement is mounted I have a DOM like this:\nhtml\n<div class=\"slider-holder\">\n    <div class=\"slider\">\n        <!-- slides -->\n    </div>\n    <div class=\"slider-info\">\n        <div class=\"slider-info_count\"></div>\n        <div class=\"slider-info_title\"></div>\n        <a class=\"slider-info_fullscreen\" data-current=\"0\"></a>\n    </div>\n</div>\nAnd after save like this:\nhtml\n<div class=\"slider\">\n    <!-- slides -->\n</div>\n. @anthonyjb thanks. It seems that the \"reinitialize on save\" approach more preferable for my current project.\n@bfintal definitely, I would be very appreciated if you share your experience with carousels and CT.\n. Hi @Yopi! I had the same issue. I solve it with padding-bottom hack.\n``` coffeescript\nclass ContentEdit.Image extends ContentEdit.Element\n  mount: ->\n    ...\n    # essential part\n    # before\n    # if @_attributes['width']\n    #   style += \"width:#{ @_attributes['width'] }px;\"\n    #\n    # if @_attributes['height']\n    #   style += \"height:#{ @_attributes['height'] }px;\"\n# after\naspectRatio = @_attributes['height'] / @_attributes['width']\nstyle += \"padding-bottom:#{ aspectRatio * 100 }%\"\n...\n\n```\nThis way you can preserve drop-placement styles.\n. ",
    "okaybmd": "Ok, thanks a lot for your reply :)\nSo, in order to reproduce the bug, you have to edit  the first field, delete all its contents (leave it empty, so a new <h1> will be created), and then click on a different editable region right after you deleted all the text in the first one. That <h1> will be replaced with a <p> element instead of staying a <h1>.\n. I noticed your error in your comment before you fixed it :) (it should have been || not \"or\")\nThe thing is, the code above still doesn't work as expected. It still shows \"...\" (3 dots) while you're still focused on the field if it's empty (instead of the new placeholder). The placeholder is shown after you unfocus the field though.\nI also noticed that starting the 2nd time you're focusing on that field, it does behave properly (well, except the things connected to the bug mentioned above: it will turn into a <p> instead of an <h1>, and it's very noticeable in my environment because of the line height difference)\n. And thanks again for all your help! I hope I wasn't bothering you too much. It's great that you marked this as an enhancement, but take your time. I don't need this right away, but it will be useful for other in the long run too. Take care :)\n. We replied at the same time :)\nNo, is that even an attribute? Wasn't it supposed to be data-placeholder? Because I tried with data-ce-placeholder and it didn't work.\nThis is what I'm using:\n<div class=\"article-title\" data-editable data-name=\"article-title\" data-placeholder=\"Enter a title\"><h1>Title 01</h1></div>\nSo this works fine on the second time you write in that region ;)\n. Ok, thanks for all of this :)\nI tried adding <h1 data-ce-placeholder=\"Enter a title\"> and looks fine now.\nI also realized that I forgot to add data-placeholder-type=\"h1\" in the example above (I was testing with 2 different files, so it's my bad). However, even with the fixed div:\n<div class=\"article-title\" data-editable data-name=\"article-title\" data-placeholder=\"Enter a title\" data-placeholder-type=\"h1\"><h1>Title 01</h1></div>\nThe problem of \"...\" persists on the first focus.\nEDIT: with your latest code is fine: <div class=\"article-title\" data-editable data-name=\"article-title\" data-placeholder=\"Enter a title\" data-placeholder-type=\"h1\"><h1 data-ce-placeholder=\"Enter a title\">Title</h1></div>\n\nRegarding the bug: I've further investigated, and it seems that it does NOT convert to a <p> while you're still focused on the field and is empty, but the cursor will MOVE a few pixels below, looking like a <p> on my environment, this is why I ASSUMED it was a <p>. Here's a screenshot for what I mean by this: image\nSo not an issue as big as I thought.\nCONCLUSION: it's still a <h1>, not a <p>, but for whatever reason, the cursor is moved a few pixels below.\n. Last edit (new screenshot): http://imgur.com/a/iMjvW - even in the updated and fixed version, the cursor position issue is still present. I'll stop bothering you now, I promise :)\n. Hi Anthony :)\nOk, so I have removed everything, left with the barebone of the CSS files too, and found the issue. It was the stupid font (named \"Poppins\")! It works absolutely fine with Arial... So it's totally my fault... I have attached an edited sandbox folder so you can play with it to see how it looked like. \n. Edit: I can't upload a zip file, it says Unfortunately, we don\u2019t support that file type.  Choose Files Try again with a PNG, GIF, JPG, DOCX, PPTX, XLSX, TXT, PDF, or ZIP.  But it is a zip! AAAAH!\nSo I've uploaded the file here: http://www.filedropper.com/contenttools-edit\nThanks again for all you've done :)\n2nd edit: I'm using Chrome too (Version 51.0.2704.103 m) on Windows 7.\n. ",
    "jumika": "Wow, You are blazing fast!\nI'll take a look at it tomorrow.\nThank you, and keep up the good work!\n. No wonder that it's working. Thank you again.\nNote: There is an at sign in the code referenced. I assume it means \"this.\" like in coffescript.\n. ",
    "Yopi": "Haha, it seems like I might have been a bit hasty in creating this issue. Switching the Image prototype in content-edit to creating an img tag instead of a div with background-image solves seemingly what I wanted to accomplish. \nI realise though that this might not be the optimal solution, so I won't close the issue :-).\n. I think that could work for an image that has a static width and height, but I'm not sure -just- disabling resizing on the element will be sufficient for images that need to be full width. Scaling with the browser and so on, since it will still be converted to a div with a background-image, it will not take up any space if it doesn't get a specified height.\n. Sorry for not explaining it very well. In my use case, I would not want the user to be able to resize the images at all, since that is something which is handled by the layout in general. The images would always be the correct size when uploaded (for the layout), so that they can be scaled and refit as needed when the browser resizes, which is why it is not a good idea to set static values for those properties, even if they would be 'correct' in one resolution. Still should be draggable though. Hopefully that explains it a bit better.\nI didn't realise that was why it turned into a div, but that makes perfect sense. And if that is the only reason I think it could probably stay an img if it cannot be resized. I wouldn't mind submitting a PR, although I am not entirely sure if it's something that can be fixed within ContentTools or if it needs to be changed in ContentEdit. In my testing I made changes directly in the mount function for ContentEdit.Image.\n. @patrikengborg what I did was just this:\ncoffeescript  \nContentEdit.Image::mount = ->\n    @_domElement = document.createElement('img')\n    classes = ''\n    if @a and @a['class']\n      classes += ' ' + @a['class']\n    if @_attributes['class']\n      classes += ' ' + @_attributes['class']\n    @_domElement.setAttribute 'class', classes\n    @_domElement.setAttribute 'src', @_attributes['src']\n    ContentEdit.Image.__super__.mount.call this\nIt didn't feel like a clean enough solution to make a PR from, but it works for my use case.\n. ",
    "danielleford04": "Hi @anthonyjb -\nI'll look more into that, thank you for the link. I've included the jade for the whole editable area (most of this is what's -inside- of the area but i included the editable region). It is, however, jade and not html! If you want more of the code, let me know...\neditable.txt\n(I really hope this file format preserves formatting)\n. Ah! I copied and pasted code from Dev Tools and unfortunately formatting was not preserved...but here is the code before and after the save\ncode.zip\n. The alternative approach works! Though it will also require an alternative saving approach. Thanks!\n. ",
    "jimmy4701": "Hi @anthonyjb,\nThanks in advance for your help :)\nAccording to bower info, I'm on 1.2.11 version\nbower ContentTools#*        not-cached https://github.com/GetmeUK/ContentTools.git#*\nbower ContentTools#*           resolve https://github.com/GetmeUK/ContentTools.git#*\nbower ContentTools#*          checkout 1.2.11\nThen, here is what I got doing a console.log( JSON.stringify(dialog) ) : \n{\"_bindings\":{},\"_parent\":null,\"_children\":[],\"_domElement\":null,\"_busy\":false,\"_caption\":\"Insert image\",\"_cropMarks\":null,\"_imageURL\":null,\"_imageSize\":null,\"_progress\":0,\"_state\":\"empty\"}\n. Here are the results for the console logs : \nbind : function (eventName,callback){return void 0===this._bindings[eventName]&&(this._bindings[eventName]=[]),this._bindings[eventName].push(callback),callback}\nevent listener : undefined\n. I've tried with the CDN version, and I've exactly the same results :/\n. @anthonyjb Thanks for your help but I can't give you an access to the code (company code). \nI just created a directive using the code I've pasted in my last posts (with editor.bind('save') ).\nDon't worry if my problem persists. Unfortunately I had to change from ContentTools to another package, because of time.\nThanks for your help and for your time anyway. Hope the problem will still be an exception.\nAnd thanks for ContentTools which is a pretty good package (and which works on my other projects so ...^^)\n. ",
    "joelmoss": "Ok, so I was expecting this to be an event that I can listen for. Wouldn't that be a better way?\nthx\n. That's what I thought, but was half expecting some global way to listen on events for all instances. No worries. Thanks so much, and great work on an amazing project\n. ",
    "zahir-elhoucine": "that's my goal \n\n. ",
    "haberman13": "Update:\nAs a temporary solution, I'm wrapping the content in a div, and applying the styles there, like so:\n// remove previous\nelement.content = element.content.unformat(0, -1, \"div\"); \n// add new\nelement.content = element.content.format(\n                        0,\n                        -1,\n                        new HTMLString.Tag(\"div\", {'style': style})); \nWhere \"style\" = the inline styles as a string \"color:#000;background-color:#28282\" etc.\nIf anyone has any questions about extending Contenttools with javascript, let me know.  I have a good grasp on it now.\n. @anthonyjb - thank you!  That fixed it.\nI (cheated and) was using jQuery(element._domElement).css(); which didn't set the state within your library I'm guessing.\nAgain I'll say this is a fantastic library, you did a great job coding it.\n. ",
    "Reached": "I am the one thanking you for creating this awesome tool \ud83d\udc4d  @anthonyjb\n. ",
    "Hoiy": "@anthonyjb Thanks for your shift response! Good to know that it is a planned enhancement.\n. @anthonyjb \nActually, this is just an user experience issue. User may find it odd that pressing the \"enter\" key does not advance the cursor. We really want the p tags over br tags.\n. @anthonyjb aw I see. I didn't realize that I could use shift key to disable it. And yes, the animation would stay if you press cmd + shift + 4 (and release) on a mac which is used to capture screenshot.\n. @anthonyjb I am not sure if it is a correct behaviour for an input img tag <img src=\"http://jeffpicard.com/blog/wp-content/gallery/widescreen-wallpaper-full-size/yellowleaves.jpg\"> (of size 1920x1200) to become <img width=\"1920\" height=\"488\" src=\"http://jeffpicard.com/blog/wp-content/gallery/widescreen-wallpaper-full-size/yellowleaves.jpg\"> after changing to edit mode and then back to preview mode.\nMoreover, the user really has no chance to see the original picture once they resized it in edit mode, only the trimmed one.\n. ",
    "slowfattler": "Hey! \nFirst of all I am very thankful for the Content Tools! I find them rather terrific. There is ONE Issue though thats bugging me a lot:\nI have a situation, where it would improve workflow A LOT if i could select and manipulate Text across paragraphs... \nI have to transfer couple hundreds of formatted Dokuments from Word to a online Plattform. \nSince Authors heavily used paragraphs in their Dokuments, when copy paste them into CT i am left with sooo many single blocks which i cannot edit properly. \none big issue are lists: when paste a list from office, each line becomes a separate paragraph which won't transform into a list (as there are no more line in this paragraph) \nChanging the breaks in the text to inline breaks (shift+enter) does not help either. \nDo you know any hack i could use maybe to ship around this issue?\nany help appreciated!\nThanks\n. ",
    "koutsenko": "How can i programmatically select all region.children[0] content? I already make it focused, so i want to delete old content while started typing .. I already got answers in your content-tools-spec.js.\nUnit tests are awesome!. @anthonyjb , sorry for delay. I tried to add data-fixture attribute both to parent div and content p tag, and added test function to init method. Still can add new p tag via shift+enter. Where can i read docs about fixtures? Thanks.. \n. And please document it clearly somewhere ... Nothing about it in docs... Hello, @anthonyjb \nI already tried that, but seems it does not work (source). \nIf i apply tool to selected range 3 times , i 'll get 3 wrapped spans :(. You say about lines 33-39?\n\nI just try to overwrite old span. \nBut because i can only replace tags, i trying delete old span tag and wrap content to new span tag.\nMaybe I do something wrong?. element.content = element.content.unformat(from, to, 'span')\nhmmm.... first line of your snippet.\nIt will remove any span, even if it is span class = \"fontsized\", or another feature not related to \"fontfamily\"?. But i don't want to remove all spans in selected region.\nI want remove only spans with font-sized class.\nAnd apply a new font-sized class with new style attr got from Tool.. I checked your code now. Use case:\nBefore: \n<span class=\"fontsized\" style=\"font-size: '15px'>\n<span class=\"fontfamilied\" style=\"font-family: 'roboto'\"> \nblablabla\n</span>\n</span>\nExpectation: I selected all text, used tool \"fontsized\", chose 22px and expected next result:\n<span class=\"fontsized\" style=\"font-size: '22px'>\n<span class=\"fontfamilied\" style=\"font-family: 'roboto'\"> \nblablabla\n</span>\n</span>\nReal behaviour:\n<span class=\"fontsized\" style=\"font-size: '22px'>\nblablabla\n</span>\n. Okay, lets try again.\nLets assume that we have p class 'ce-element' -> span class 'fontsized' -> span class 'fontfamilied' -> span class 'fontsized' -> ... -> some text node.\nSome of that spans have class 'font-sized'.\nI selected all text node.\nAnd applied a 60px font size.\nI want remove all span class 'font-sized' nodes and wrap them to new font-sized with new 60px style.\nResult would be\np class 'ce-element' -> span class 'font-sized' style font-height 60px -> span class 'fontfamilied' -> some text node.\nAll fontsized spans must be dropped recursively.\nAll non-fontsized spans must leave as is.\nAnd in the end, i wrap it to new fontsized span with my style.\nIs it real and with what algorithm?\n. ",
    "Trinitonn": "@anthonyjb, thank you so much for this code. I'm using your ContentTool to interact with an ancient application which uses empty <p> instead of <br> for line breaks. This saved my day!\nI've used your JavaScript approach and it works perfect!. Hi,\nthis is exactly the kind of behavior I also want. As for now the return key sends you to the next cell, which is a very unexpected behavior for me. An expected behavior would be a new line just as if you were hitting the return key outside the table.\nI also strongly believe following behavior would enhance the user experience:\n- If the cursor is in the very first cell, hitting Shift+Tab should focus to the element previous the table. If no previous element; create a paragraph and focus on it. The same behavior should apply if you hit the return key when the cursor is the very first char in the very first cell. This gives you two opportunities to exit the table to an element before the table. As we speak there is no way to insert an element before the table if the table is the first element in an editable area.\n- Hitting the return key from the very last cell; create a new paragraph below the table and focus on it. This is a much easier way to exit the table than using the arrow down key. (Alternative: Actually, I would prefer return key alone gives you a new line and not Shift+Return - this is more like the same behavior as outside the table. If this should be implemented it's OK to use the arrow down to exit the table as it's the only way)\nKeep up the amazing work! @anthonyjb . Just a follow up;\nas I mentioned in my last comment, there is no way to exit a table if the table is the last element in an editable area. I was wrong, it's actually possible by inserting a new header/paragraph by pressing the buttons in the toolbox. Unfortunately i don't find this very intuitive, not that I am complaining :) but, it's not easy to understand for average Joe. I believe we should try to make things as self explaining as possible, and with that in mind there should be other options (like hitting the arrow down key, return key or something like that).\nAlso please note my previous comment:\n- \"As we speak there is no way to insert an element before the table if the table is the first element in an editable area\"\nCan we find any good solution for this? (my suggestion was that hitting the SHIFT+TAB keys would insert a new paragraph before the table)\n. ",
    "ccqgithub": "@anthonyjb i aslo find this solution, but i can be a feature later (keep empty lines) ?. thanks. ",
    "fmay": "+1 while I get the logic behind the approach but it is a complete turn off from a user experience point of view. Is this likely to find its way into the tool. I am somewhat loathe to start hacking it as I am sure it will be a slippery slope.\nThere's a lot to like in ContentTools, through.. ",
    "cadilhac": "Wonderful, thank you.\nIn the same spirit, may I ask a similar question:\nCan I reposition the bottom bar inside a container instead of the bottom of the screen?\n. Unfortunately coffeescript won't fit in my workflow and I am against modifying the library, prefering hooks  to override stuff.\nAbout the css, I was not able to find a non minified css file...\n. It would be great if it was an option too. I imagine I will be able to remove the newlines by myself though...\n. Seems I was not clear. I don't want to upload at all. I just want a dialog to appear where I can type a url to an image. Then the tool embeds the IMG tag in the content (and of course it must be visible, selectable in case I want to delete it). That's all.\n. ok thanks for the info. Since this is a job for a customer and his budget does not allow these kind of customizations, I will have to find another tool that handles img urls natively.\n. Hummm... just wondering how it could scroll if you display an overlay covering the whole surface. I designed an angular component with a sliding panel and a full size overlay and I don't get any scrolling of the page behind...\n. oh I remember what I'm doing in my library. Like you I set hidden to the body overflow, but I also add a margin-right equal to the size of a scrollbar. This does the trick to cancel the shift. Of course I dynamically calculate this scrollbar width since it can be different among browsers...\n. ",
    "BruinY": "good,thanks \n. thanks \n. The mainest is click upload button, and takes a long time to react, let the user to choose photos\n. Chrome on my computer need to wait for about 5-8 seconds.The edge you need to wait for about 4 seconds.Ie11 less than a second.The operating system is Windows 10.\nChrome version 53\n. I don't know whether I only on my computer.I tried several computers, waiting time, don't know how to optimize\n. Operating on the demo page, appears as a chrome click upload button need to wait a few seconds to select the image\n. @anthonyjb  \nThe default accept = \"image / *\" in chrome, 53 per click all need to wait a few seconds to open\nSet to accept = \"image/JPG, image/jpeg, image/PNG\" just opened\n. ",
    "mpatelj": "<div id=\"table-type-0\">\n<p><span style=\"color: #0000ff; font-family: Arial; font-size: large;\"><strong>PERFORMING THE TEST</strong></span></p>\n<p><span style=\"font-family: Arial; font-size: medium;\">To perform the VOR test, a local VOR frequency is selected, a course of 000 is selected, the RMI selector is positioned to VOR, and the VOR test button on the receiver or control panel is depressed.&nbsp; </span></p>\n<ul>\n<li><span style=\"font-family: Arial; font-size: medium;\">The navigation warning flag drops into view for 3-9 seconds (depending on the slew time of the RMI) and then is retracted from the view for the remainder of the 23-second test period.&nbsp; <br /><br /></span></li>\n<li><span style=\"font-family: Arial; font-size: medium;\">The RMI pointer rotates to 180 degrees.&nbsp; <br /><br /></span></li>\n<li>\n<div align=\"left\"><span style=\"font-family: Arial; font-size: medium;\">The HSI course deviation bar is centered and the TO/FROM pointed indicates FROM.<br /><br /><br /></span></div>\n<div align=\"center\"><iframe title=\"vzaar video player\" src=\"https://view.vzaar.com/1279492/player\" frameborder=\"0\" width=\"448\" height=\"280\"></iframe></div>\n</li>\n</ul>\n</div>\n. Thanks for prompt reply.. ",
    "Resurg3nt": "I understand that its not a JS or jQuery dependent library, but insofar as validation is concerned I have previously used jQuery in a dynamic form situation.\nI handled the validation by iteration over #formID with an each, validating all textarea, input, selects etc, and checking whether they had a particular CSS class added - such as valDateReq for example, which would then have a rule such as dates must be in dd/mm/yyyy format and had a custom validation-msg attribute. \nFor each form element that did not validate, an error counter was iterated and an error class was added to the field and label, a summary of all errors was given with an e.preventDefault() on submission and feedback of each validation-msg populated into a div.\nObviously thats an example from my experience, as I only deal with HTML, PHP, jQuery, SQL. I'm not adept at any other language other than a bit of python. \n. ",
    "abishekrsrikaanth": "@anthonyjb I have been having a wonderful time working on this library, but just lacking this functionality alone. Would you have updates on this feature's availability?. @anthonyjb, just checking to see if there are any updates to this request?. ",
    "JeanPierreFig": "just updated the issue.\n. yes I am updating the page, but the function is not being called and nope no errors.\n. Sorry I did get an error editor.js:11 Uncaught ReferenceError: editor is not defined\n. editor.addEventListener('saved', function (ev) { it doesn't know what editor is \n. Thank you.\n. If it's a php file do you have any sample code for that?\n. ",
    "viplike": "Already found:\nvar editor;\neditor = ContentTools.EditorApp.get();\neditor.start();\n. ",
    "k42m": "had to play around with the css (the template wasn't written to good...) but works for me now. \nThank you so much!\nPS: appreciate your work, content tools saved me hours :)\n. ",
    "kanertuncel": "Thanks, it worked. But I dont want it to loose it focused element. How should I do it? Because I'm replacing focused image on new dialog.\n. by the way, @anthonyjb I'm trying to insert some editable contents from a template selector. You may look at screenshot I attached for what I'm trying to do. When I insert a region programmatically it allows me to edit paragraph. But the image is \"static\" and can't make it focused element. \n\nThe html code I insert to editor is:\n<div class=\"section\" data-editable data-name=\"content-text-image\"><div class=\"align-left ce-element ce-element--type-image\" style=\"background-image:url(/assets/newsletters/sample-image-300-200.png);width:300px;height:200px;\" width=\"300\" height=\"200\" data-ce-size=\"w 300 \u00d7 h 200\"></div><p class=\"ce-element ce-element--type-text\">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></div>\n. Hi @anthonyjb,\nThank you very much! I changed my html code into this and it worked. Now content I added programatically is editable. \n<div class=\\\"section\\\" data-editable data-name=\\\"content-text-image\\\"><img src='/assets/newsletters/sample-image-300-200.png' width='300' height='200' class='align-left' /><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></div>\n. ",
    "boyum": "I made it work with <button>. Will file a pull request later today. Might not be of your standards, as I'm no CoffeeScript wiz, so please fix my code if it's needed.\n. ",
    "kure-": "Note: it is probably IE11 related since it may lose focus when focusing contenteditable area\n. Note: every even clicked editable element works with pasting the data via ctrl + v in IE11. Every odd does not work, unless you click twice:\nhttp://getcontenttools.com/demo\n. any update in here?:)\nthanks\n. Is there eventually any quick fix? I have a users who can use just IE/Edge and they're using the editor on daily basis with certain amount of data being transfered from other sources via the editor, which makes the editor not usable right now :)\n. Hi there, there seem to be still an issue with this, once element is nested. E.g. ul > li and pasting to it.  E.g. http://getcontenttools.com/demo  > About content tools\n. ",
    "Moosheep": "The image gets inserted after the selected element  $('.ce-element--focused').after(imgHtml), meaning that it does not have the focus and therefore ContentEdit.Root.get().focused().taint() is returning NULL;.  Can I taint() an element by class? or set the the focus prior to tainting?\nMany many thanks for your help.   \n. I failed to get things to work with taint() so changed my approach. After a crash course in ContentEdit I have come up with the following script:\nvar image = new ContentEdit.Image({\nsrc:url, width:w, height:h\n});\nContentEdit.Root.get().focused().parent().attach(image);\nimage.focus();\nThis is working great in so much as the image is getting inserted and being saved, however I can only get it to insert at the bottom of the region. Is there a way of attaching the image to the focussed element rather than to the parent?\nThanks again\n. That works perfectly.\nThank you very much for your help. \n. ",
    "avramovic": "Nevermind, found it :) http://getcontenttools.com/api/content-tools#editor-app\n. ",
    "DeveloperInResidence": "Thank you, that worked right away!\n. ",
    "jafar-rezaei": "Hi @anthonyjb  ,\nthere is no requirements for RTL just direction should be Right-To-Left and text , image , icons aligned in right :)\nyou can check persian websites to get into it , like my website : http://citygram.ir\nthanks. @anthonyjb  , I almost created a RTL version of content-tools-rtl.css : \ncss\n@import url(\"http://www.citygram.ir/css/yekan.css\");\n.ce--dragging,.ce--resizing{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}\n.ce--dragging{cursor:move!important}\n.ce--resizing{cursor:nwse-resize!important}\n.ce-element--type-image,.ce-element--type-video{background-repeat:no-repeat;position:relative;cursor:pointer;z-index:1}\n.ce-element--type-image:after,.ce-element--type-image:before,.ce-element--type-video:after,.ce-element--type-video:before{background:rgba(0,0,0,.5);border-radius:2px;color:#fff;display:none;font-family:\"BYekan\",tahoma,sans-serif;font-size:10px;line-height:10px;padding:4px 4px 3px;position:absolute}\n.ce-element--type-image:before,.ce-element--type-video:before{content:attr(data-ce-size);right:10px;top:10px}\n.ce-element--type-image.ce-element--over:before,.ce-element--type-image.ce-element--resizing:before,.ce-element--type-video.ce-element--over:before,.ce-element--type-video.ce-element--resizing:before{display:block}\n.ce-element--type-image{background-position:0 0;background-size:cover}\n.ce-element--type-image:after{background:transparent;content:'';display:block;left:0;position:relative;top:0;height:100%;width:100%}\n.ce-element--type-video{background:#333 url(images/video.svg) 50%/auto 48px no-repeat}\n.ce-element--type-video:after{bottom:10px;content:attr(data-ce-title);display:block;left:10px}\n.ce-element--empty:after{content:'...';display:inline-block;font-style:italic;opacity:.5}\n.ce-element--empty[data-ce-placeholder]:after{content:attr(data-ce-placeholder)}\n.ce-element--dragging{background-color:rgba(51,51,51,.1)!important;opacity:.5;z-index:-1}\n.ce-element--dragging.ce-element--type-image,.ce-element--dragging.ce-element--type-video{background-color:#333!important;opacity:1;outline-color:rgba(51,51,51,.1)!important}\n.ce-element--drop{position:relative!important}\n.ce-element--drop:before{background:#f39c12 url(images/drop-vert-above.svg) 50%/auto 32px repeat;bottom:0;content:''!important;left:0;opacity:.8;position:absolute;right:0;top:0;z-index:9}\n.ce-element--drop-below:before{-webkit-transform:rotate(180deg);transform:rotate(180deg)}\n.ce-element--drop-left:before{background-image:url(images/drop-horz.svg);-webkit-transform:rotate(0deg);transform:rotate(0deg)}\n.ce-element--drop-right:before{background-image:url(images/drop-horz.svg);-webkit-transform:rotate(180deg);transform:rotate(180deg)}\n.ce-element--drop.ce-element--type-table-row{background:#f39c12 url(images/drop-vert-above.svg) 50%/auto 32px repeat}\n.ce-element--drop.ce-element--type-table-row:before{display:none}\n.ce-element--drop.ce-element--type-table-row.ce-element--drop-below{background:#f39c12 url(images/drop-vert-below.svg) 50%/auto 32px repeat}\n.ce-element--focused,.ce-element--over{background-color:rgba(243,156,18,.1);outline:none}\n.ce-element--focused.ce-element--type-image,.ce-element--focused.ce-element--type-video,.ce-element--over.ce-element--type-image,.ce-element--over.ce-element--type-video{background-color:#333;outline:4px solid rgba(243,156,18,.35)}\n.ce-element--resize-top-left{cursor:nw-resize}\n.ce-element--resize-top-right{cursor:ne-resize}\n.ce-element--resize-bottom-right{cursor:se-resize}\n.ce-element--resize-bottom-left{cursor:sw-resize}\n.ce-drag-helper{background:#fff;border-radius:2px;box-shadow:0 3px 3px rgba(0,0,0,.25);color:#4e4e4e;font:\"BYekan\",tahoma,sans-serif;font-size:12px;height:120px;left:0;line-height:135%;margin:5px 0 0 5px;overflow:hidden;padding:15px;position:absolute;top:0;width:120px;word-wrap:break-word;z-index:9}\n.ce-drag-helper:before{background:#2980b9;color:#fff;content:attr(data-ce-type);display:block;font-family:\"BYekan\",tahoma,sans-serif;font-size:10px;line-height:10px;padding:4px 4px 3px;position:absolute;right:0;top:0}\n.ce-drag-helper--type-list-item-text:after,.ce-drag-helper--type-list:after,.ce-drag-helper--type-pre-text:after,.ce-drag-helper--type-table-row:after,.ce-drag-helper--type-table:after,.ce-drag-helper--type-text:after{background-image:linear-gradient(hsla(0,0%,100%,0),#fff 66%);bottom:0;content:'';display:block;height:40px;left:0;position:absolute;width:100%}\n.ce-drag-helper--type-image{background-repeat:no-repeat;background-size:cover}\n.ce-element--type-image,.ce-element--type-video{display:block;margin-left:auto;margin-right:auto}\n.ce-element--type-image.align-left,.ce-element--type-video.align-left{clear:none;float:left}\n.ce-element--type-image.align-right,.ce-element--type-video.align-right{clear:none;float:right}\n.ce-measure{display:block!important}\n@font-face{font-family:icon;src:url(icons.woff);font-weight:400;font-style:normal}\n.ct-widget,.ct-widget *{box-sizing:border-box;}\n.ct-widget * a,.ct-widget * b,.ct-widget * caption,.ct-widget * div,.ct-widget * form,.ct-widget * i fieldset,.ct-widget * iframe,.ct-widget * label,.ct-widget * legend,.ct-widget * span,.ct-widget * table,.ct-widget * tbody,.ct-widget * td,.ct-widget * tfoot,.ct-widget * th,.ct-widget * thead,.ct-widget * tr,.ct-widget a,.ct-widget b,.ct-widget caption,.ct-widget div,.ct-widget form,.ct-widget i fieldset,.ct-widget iframe,.ct-widget label,.ct-widget legend,.ct-widget span,.ct-widget table,.ct-widget tbody,.ct-widget td,.ct-widget tfoot,.ct-widget th,.ct-widget thead,.ct-widget tr{border:0;font-size:100%;font:inherit;margin:0;padding:0;vertical-align:baseline}\n.ct-widget * ol,.ct-widget * ul,.ct-widget ol,.ct-widget ul{list-style:none}\n.ct-widget * table,.ct-widget table{border-collapse:collapse;border-spacing:0}\n.ct-widget{opacity:0;font-family:\"BYekan\",tahoma,sans-serif;font-size:14px;line-height:18px;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;z-index:9999}\n.ct-widget,.ct-widget--active{-webkit-transition-property:opacity;transition-property:opacity;-webkit-transition-duration:.25s;transition-duration:.25s;-webkit-transition-timing-function:ease-in;transition-timing-function:ease-in}\n.ct-widget--active{opacity:1}\n.ct-widget .ct-attribute{border-bottom:1px solid #eee;height:48px;vertical-align:top}\n.ct-widget .ct-attribute:after{clear:both;content:\"\";display:table}\n.ct-widget .ct-attribute__name{background:#f6f6f6;border:none;color:#646464;float:left;height:47px;outline:none;padding:0 16px;font-family:\"BYekan\",tahoma,sans-serif;font-size:14px;line-height:48px;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;width:25%}\n.ct-widget .ct-attribute__name--invalid{color:#e74c3c}\n.ct-widget .ct-attribute__value{-webkit-appearance:none;-moz-appearance:none;appearance:none;background:#fff;border:none;color:#646464;float:right;height:47px;outline:none;padding:0 16px;font-family:\"BYekan\",tahoma,sans-serif;font-size:14px;line-height:48px;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;width:75%}\n.ct-widget .ct-crop-marks{height:320px;left:73px;position:absolute;top:0;width:427px}\n.ct-widget .ct-crop-marks__clipper{height:100%;overflow:hidden;position:relative;width:100%}\n.ct-widget .ct-crop-marks__ruler--top-left{position:absolute}\n.ct-widget .ct-crop-marks__ruler--top-left:after{border:1px solid hsla(0,0%,100%,.5);border-bottom:none;border-right:none;box-shadow:-1px -1px 1px rgba(0,0,0,.25),inset 1px 1px 1px rgba(0,0,0,.25);content:'';height:999px;left:0;position:absolute;top:0;width:999px}\n.ct-widget .ct-crop-marks__ruler--bottom-right{position:absolute}\n.ct-widget .ct-crop-marks__ruler--bottom-right:after{border:1px solid hsla(0,0%,100%,.5);border-top:none;border-left:none;bottom:0;box-shadow:1px 1px 1px rgba(0,0,0,.25),inset -1px -1px 1px rgba(0,0,0,.25);content:'';height:999px;position:absolute;right:0;width:999px}\n.ct-widget .ct-crop-marks__handle{background:#2980b9;border:1px solid #409ad5;border-radius:7px;cursor:pointer;height:15px;margin-left:-7px;margin-top:-7px;position:absolute;width:15px}\n.ct-widget .ct-crop-marks__handle--bottom-right{margin-left:-8px;margin-top:-8px}\n.ct-widget .ct-crop-marks__handle:hover{background:#2e8ece}\n@-webkit-keyframes a {\n0%{transform:translate(-50%,-50%) rotate(0deg);-webkit-transform:transform}\nto{transform:translate(-50%,-50%) rotate(359deg);-webkit-transform:transform}\n}\n@keyframes a {\n0%{transform:translate(-50%,-50%) rotate(0deg);-webkit-transform:transform;transform:transform}\nto{transform:translate(-50%,-50%) rotate(359deg);-webkit-transform:transform;transform:transform}\n}\n.ct-widget.ct-dialog{direction: rtl;background:#fff;box-shadow:0 8px 8px rgba(0,0,0,.35);border-radius:2px;height:480px;left:50%;margin-left:-350px;margin-top:-240px;position:fixed;top:50%;width:700px;z-index:10099}\n.ct-widget.ct-dialog--busy .ct-dialog__busy{display:block}\n.ct-widget.ct-dialog--busy .ct-dialog__body{opacity:.1}\n.ct-widget .ct-dialog__header{color:#a4a4a4;border-bottom:1px solid #eee;height:48px;padding:0 16px;position:relative}\n.ct-widget .ct-dialog__caption{font-family:\"BYekan\",tahoma,sans-serif;font-size:18px}\n.ct-widget .ct-dialog__caption,.ct-widget .ct-dialog__close{line-height:48px;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}\n.ct-widget .ct-dialog__close{border-right:1px solid #eee;cursor:pointer;height:48px;position:absolute;left:0;text-align:center;top:0;font-family:icon;font-size:16px;font-style:normal;font-weight:400;font-variant:normal;speak:none;text-transform:none;width:48px}\n.ct-widget .ct-dialog__close:before{content:'\\ea0f'}\n.ct-widget .ct-dialog__close:hover:before{color:#646464}\n.ct-widget .ct-dialog__body{margin:auto;width:572px}\n.ct-widget .ct-dialog__view{height:320px;margin-top:32px}\n.ct-widget .ct-dialog__controls{margin-top:16px}\n.ct-widget .ct-dialog__controls:after{clear:both;content:\"\";display:table}\n.ct-widget .ct-dialog__busy{display:none;position:absolute}\n.ct-widget .ct-dialog__busy:before{-webkit-animation:a 5s linear;animation:a 5s linear;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards;color:#a4a4a4;content:\"\\e994\";left:50%;position:fixed;top:50%;font-family:icon;font-size:80px;font-style:normal;font-weight:400;font-variant:normal;speak:none;text-transform:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}\n.ct-widget .ct-control-group{font-size:0}\n.ct-widget .ct-control-group--center{text-align:center}\n.ct-widget .ct-control-group--left{float:right}\n.ct-widget .ct-control-group--right{float:left}\n.ct-widget .ct-control{margin-left:16px;position:relative}\n.ct-widget .ct-control:first-child{margin-left:0}\n.ct-widget .ct-control--icon{color:#a4a4a4;cursor:pointer;display:inline-block;height:32px;line-height:32px;text-align:center;font-family:icon;font-size:16px;font-style:normal;font-weight:400;font-variant:normal;speak:none;text-transform:none;width:32px;float: left}\n.ct-widget .ct-control--icon,.ct-widget .ct-control--icon:after{border-radius:2px;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}\n.ct-widget .ct-control--icon:after{background:#000;color:#fff;content:attr(data-ct-tooltip);display:block;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;left:-26.5px;opacity:0;padding:0 8px;position:absolute;bottom:37px;font-family:\"BYekan\",tahoma,sans-serif;font-size:12px;line-height:20px;visibility:hidden;width:85px;word-break:break-word}\n.ct-widget .ct-control--icon:hover:after{opacity:.8;visibility:visible;-webkit-transition-property:opacity;transition-property:opacity;-webkit-transition-duration:0;transition-duration:0;-webkit-transition-timing-function:ease-in;transition-timing-function:ease-in;-webkit-transition-delay:2s;transition-delay:2s}\n.ct-widget .ct-control--icon:before{content:''}\n.ct-widget .ct-control--icon:hover{background:#eee;color:#646464}\n.ct-widget .ct-control--active,.ct-widget .ct-control--on{background:#a4a4a4;color:#fff}\n.ct-widget .ct-control--active:hover,.ct-widget .ct-control--on:hover{background:#646464;color:#fff}\n.ct-widget .ct-control--rotate-ccw:before{content:'\\e965'}\n.ct-widget .ct-control--rotate-cw:before{content:'\\e966'}\n.ct-widget .ct-control--crop:before{content:'\\ea57'}\n.ct-widget .ct-control--remove:before{content:'\\e9ac'}\n.ct-widget .ct-control--styles:before{content:'\\e90b'}\n.ct-widget .ct-control--attributes:before{content:'\\e994'}\n.ct-widget .ct-control--code:before{content:'\\ea80'}\n.ct-widget .ct-control--icon.ct-control--muted{cursor:default}\n.ct-widget .ct-control--icon.ct-control--muted:before{opacity:.5}\n.ct-widget .ct-control--icon.ct-control--muted:hover{color:#a4a4a4;background:transparent}\n.ct-widget .ct-control--text{background:#2980b9;border-radius:2px;color:#fff;cursor:pointer;display:inline-block;font-weight:700;height:32px;overflow:hidden;padding:0 8px;text-align:center;text-overflow:ellipsis;font-family:\"BYekan\",tahoma,sans-serif;font-size:14px;line-height:32px;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;vertical-align:top;width:100px}\n.ct-widget .ct-control--text:hover{background:#2e8ece}\n.ct-widget .ct-control--apply,.ct-widget .ct-control--insert,.ct-widget .ct-control--ok{background:#27ae60}\n.ct-widget .ct-control--apply:hover,.ct-widget .ct-control--insert:hover,.ct-widget .ct-control--ok:hover{background:#2cc36b}\n.ct-widget .ct-control--cancel,.ct-widget .ct-control--clear{background:#e74c3c}\n.ct-widget .ct-control--cancel:hover,.ct-widget .ct-control--clear:hover{background:#ea6153}\n.ct-widget .ct-control--text.ct-control--muted{background:#ccc;cursor:default}\n.ct-widget .ct-control--text.ct-control--muted:hover{background:#ccc}\n.ct-widget .ct-control--upload{overflow:hidden}\n.ct-widget.ct-image-dialog--empty .ct-control--cancel,.ct-widget.ct-image-dialog--empty .ct-control--clear,.ct-widget.ct-image-dialog--empty .ct-control--crop,.ct-widget.ct-image-dialog--empty .ct-control--insert,.ct-widget.ct-image-dialog--empty .ct-control--rotate-ccw,.ct-widget.ct-image-dialog--empty .ct-control--rotate-cw,.ct-widget.ct-image-dialog--empty .ct-progress-bar,.ct-widget.ct-image-dialog--populated .ct-control--cancel,.ct-widget.ct-image-dialog--populated .ct-control--upload,.ct-widget.ct-image-dialog--populated .ct-progress-bar,.ct-widget.ct-image-dialog--uploading .ct-control--clear,.ct-widget.ct-image-dialog--uploading .ct-control--crop,.ct-widget.ct-image-dialog--uploading .ct-control--insert,.ct-widget.ct-image-dialog--uploading .ct-control--rotate-ccw,.ct-widget.ct-image-dialog--uploading .ct-control--rotate-cw,.ct-widget.ct-image-dialog--uploading .ct-control--upload{display:none}\n.ct-widget .ct-image-dialog__view{background:#eee;position:relative}\n.ct-widget .ct-image-dialog__view:empty{font-family:icon;font-size:80px;font-style:normal;font-weight:400;font-variant:normal;speak:none;text-transform:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;line-height:320px;text-align:center}\n.ct-widget .ct-image-dialog__view:empty:before{color:#fff;content:'\\e90d'}\n.ct-widget .ct-image-dialog__image{background-color:transparent;background-position:50%;background-repeat:no-repeat;background-size:contain;height:100%;width:100%}\n.ct-widget .ct-image-dialog__file-upload{cursor:pointer;font-size:400px;left:0;opacity:0;position:absolute;top:0}\n.ct-widget.ct-properties-dialog--attributes .ct-properties-dialog__attributes,.ct-widget.ct-properties-dialog--styles .ct-properties-dialog__styles{display:block}\n.ct-widget.ct-properties-dialog--styles .ct-properties-dialog__styles:empty:before{color:#a4a4a4;content:attr(data-ct-empty);display:block;font-style:italic;margin-top:20px;text-align:center}\n.ct-widget.ct-properties-dialog--code .ct-properties-dialog__code{display:block}\n.ct-widget .ct-properties-dialog__view{border:1px solid #ddd;overflow:auto}\n.ct-widget .ct-properties-dialog__attributes,.ct-widget .ct-properties-dialog__code,.ct-widget .ct-properties-dialog__styles{display:none}\n.ct-widget .ct-properties-dialog__inner-html{border:none;display:block;font-family:\"BYekan\",tahoma,courier,Bitstream Vera Sans Mono,Consolas,Courier,monospace;height:318px;padding:16px;outline:none;resize:none;width:100%}\n.ct-widget .ct-properties-dialog__inner-html--invalid{color:#e74c3c}\n.ct-widget .ct-table-dialog__view{border:1px solid #ddd;overflow:auto}\n.ct-widget .ct-video-dialog__preview:empty{background:#eee;font-family:icon;font-size:80px;font-style:normal;font-weight:400;font-variant:normal;speak:none;text-transform:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;line-height:320px;text-align:center}\n.ct-widget .ct-video-dialog__preview:empty:before{color:#fff;content:'\\ea98'}\n.ct-widget .ct-video-dialog__input{border:none;border-bottom:1px solid #eee;height:32px;line-height:32px;outline:none;padding:0 4px;font-family:\"BYekan\",tahoma,sans-serif;font-size:14px;line-height:18px;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;vertical-align:top;width:456px}\n.ct-widget .ct-video-dialog__input:focus{border-bottom:1px solid #e1e1e1}\n.ct-widget.ct-anchored-dialog{border-bottom:2px solid #27ae60;box-shadow:0 3px 3px rgba(0,0,0,.35);font-size:0;height:34px;left:0;margin-left:-160px;margin-top:-48px;position:absolute;top:0;width:320px;z-index:10099}\n.ct-widget.ct-anchored-dialog:after{border:16px solid hsla(0,0%,100%,0);border-top-color:#27ae60;content:'';left:144px;position:absolute;top:34px}\n.ct-widget .ct-anchored-dialog__input{border:none;color:#646464;outline:none;font-family:\"BYekan\",tahoma,sans-serif;font-size:14px;padding:0 8px 0 16px;vertical-align:top;width:256px}\n.ct-widget .ct-anchored-dialog__button,.ct-widget .ct-anchored-dialog__input{height:32px;line-height:32px;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}\n.ct-widget .ct-anchored-dialog__button{background:#27ae60;cursor:pointer;display:inline-block;text-align:center;font-family:icon;font-size:16px;font-style:normal;font-weight:400;font-variant:normal;speak:none;text-transform:none;width:32px}\n.ct-widget .ct-anchored-dialog__button:before{color:#fff;content:'\\ea10'}\n.ct-widget .ct-anchored-dialog__button:hover{background:#2cc36b}\n.ct-widget .ct-anchored-dialog__target-button{background:#fff;cursor:pointer;display:inline-block;height:32px;line-height:32px;text-align:center;font-family:icon;font-size:16px;font-style:normal;font-weight:400;font-variant:normal;speak:none;text-transform:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;width:32px}\n.ct-widget .ct-anchored-dialog__target-button:before{color:#a4a4a4;content:'\\ea7d'}\n.ct-widget .ct-anchored-dialog__target-button:hover:before{color:#b1b1b1}\n.ct-widget .ct-anchored-dialog__target-button--active:before{color:#27ae60}\n.ct-widget .ct-anchored-dialog__target-button--active:hover:before{color:#2cc36b}\n@-webkit-keyframes b {\n0%{opacity:0;font-size:32px;-webkit-transform:font-size}\n25%{font-size:320px;opacity:1;-webkit-transform:all}\n50%{font-size:320px;opacity:1;-webkit-transform:all}\n75%{font-size:320px;opacity:1;-webkit-transform:all}\nto{opacity:0;-webkit-transform:all}\n}\n@keyframes b {\n0%{opacity:0;font-size:32px;-webkit-transform:font-size;transform:font-size}\n25%{font-size:320px;opacity:1;-webkit-transform:all;transform:all}\n50%{font-size:320px;opacity:1;-webkit-transform:all;transform:all}\n75%{font-size:320px;opacity:1;-webkit-transform:all;transform:all}\nto{opacity:0;-webkit-transform:all;transform:all}\n}\n@-webkit-keyframes c {\n0%{opacity:1;-webkit-transform:opacity}\n99%{opacity:1;-webkit-transform:opacity}\nto{opacity:0;-webkit-transform:opacity}\n}\n@keyframes c {\n0%{opacity:1;-webkit-transform:opacity;transform:opacity}\n99%{opacity:1;-webkit-transform:opacity;transform:opacity}\nto{opacity:0;-webkit-transform:opacity;transform:opacity}\n}\n.ct-widget.ct-flash{color:hsla(0,0%,100%,.9);height:0;left:0;position:fixed;font-family:icon;font-size:16px;font-style:normal;font-weight:400;font-variant:normal;speak:none;text-transform:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;top:0;width:0;z-index:10999}\n.ct-widget.ct-flash:before{left:50%;opacity:0;position:fixed;text-shadow:0 0 20px rgba(0,0,0,.5);top:50%;transform:translate(-50%,-50%)}\n.ct-widget.ct-flash--active{-webkit-animation:c 2s ease-in;animation:c 2s ease-in;-webkit-animation-iteration-count:1;animation-iteration-count:1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}\n.ct-widget.ct-flash--active:before{-webkit-animation:b 2s ease-in;animation:b 2s ease-in;-webkit-animation-iteration-count:1;animation-iteration-count:1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards;font-size:320px;opacity:1}\n.ct-widget.ct-flash--ok:before{content:'\\ea10'}\n.ct-widget.ct-flash--no:before{content:'\\ea0f'}\n.ct-widget .ct-grip{cursor:move;font-size:0;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}\n.ct-widget .ct-grip__bump{background:rgba(70,70,70,.15);border-radius:12px;display:inline-block;height:12px;margin-left:12px;width:12px}\n.ct-widget .ct-grip__bump:first-child{margin-left:0}\n@-webkit-keyframes d {\n0%{transform:rotate(0deg);-webkit-transform:transform}\nto{transform:rotate(359deg);-webkit-transform:transform}\n}\n@keyframes d {\n0%{transform:rotate(0deg);-webkit-transform:transform;transform:transform}\nto{transform:rotate(359deg);-webkit-transform:transform;transform:transform}\n}\n.ct-widget.ct-ignition{right:70px;position:fixed;top:16px}\n.ct-widget.ct-ignition .ct-ignition__button{display:none}\n.ct-widget.ct-ignition--editing .ct-ignition__button--cancel,.ct-widget.ct-ignition--editing .ct-ignition__button--confirm,.ct-widget.ct-ignition--ready .ct-ignition__button--edit{display:block}\n.ct-widget.ct-ignition--busy .ct-ignition__button{display:none}\n.ct-widget.ct-ignition--busy .ct-ignition__button--busy{display:block}\n.ct-widget .ct-ignition__button{border-radius:24px;content:'';cursor:pointer;display:block;height:48px;line-height:48px;opacity:.9;position:absolute;text-align:center;font-family:icon;font-size:24px;font-style:normal;font-weight:400;font-variant:normal;speak:none;text-transform:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;width:48px}\n.ct-widget .ct-ignition__button:before{color:#fff}\n.ct-widget .ct-ignition__button--busy{-webkit-animation:d 5s linear;animation:d 5s linear;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards;background:#646464;cursor:default}\n.ct-widget .ct-ignition__button--busy:before{content:'\\e994'}\n.ct-widget .ct-ignition__button--busy:hover{background:#646464}\n.ct-widget .ct-ignition__button--confirm{background:#27ae60}\n.ct-widget .ct-ignition__button--confirm:before{content:'\\ea10'}\n.ct-widget .ct-ignition__button--confirm:hover{background:#2cc36b}\n.ct-widget .ct-ignition__button--cancel{background:#e74c3c;right: 4px}\n.ct-widget .ct-ignition__button--cancel:before{content:'\\ea0f'}\n.ct-widget .ct-ignition__button--cancel:hover{background:#ea6153}\n.ct-widget .ct-ignition__button--edit{background:#2980b9}\n.ct-widget .ct-ignition__button--edit:before{content:'\\e905';-webkit-transition-property:-webkit-transform;transition-property:transform;-webkit-transition-duration:.1s;transition-duration:.1s;-webkit-transition-timing-function:ease-in;transition-timing-function:ease-in}\n.ct-widget .ct-ignition__button--edit:hover{background:#2e8ece}\n.ct-widget .ct-ignition__button--edit:hover:before{display:inline-block;-webkit-transform:rotate(-15deg);transform:rotate(-15deg)}\n.ct-widget.ct-inspector{background:hsla(0,0%,91%,.2);border-top:1px solid hsla(0,0%,100%,.1);bottom:0;height:32px;left:0;overflow:hidden;padding:3px 16px 0;position:fixed;width:100%}\n.ct-widget .ct-inspector__tags{width:calc(100% - 128px)}\n.ct-widget .ct-inspector__tags:after{clear:both;content:\"\";display:table}\n.ct-widget .ct-inspector__tags:before{color:#464646;content:'\\ea80';display:block;float:left;height:24px;line-height:24px;margin-right:16px;text-align:center;font-family:icon;font-size:16px;font-style:normal;font-weight:400;font-variant:normal;speak:none;text-transform:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;width:24px}\n.ct-widget .ct-inspector__counter{border-left:1px solid rgba(0,0,0,.1);height:24px;line-height:24px;margin-right:16px;position:absolute;right:0;text-align:right;top:3px;width:128px}\n.ct-widget .ct-tag{background-color:#2980b9;border-radius:2px 0 0 2px;color:#fff;cursor:pointer;float:left;font-weight:700;height:24px;line-height:24px;margin-left:24px;padding:0 8px;position:relative;text-shadow:0 1px 0 rgba(0,0,0,.35)}\n.ct-widget .ct-tag:after{border-style:solid;border-bottom:12px solid rgba(255,0,0,0);border-left:12px solid #2980b9;border-right:none;border-top:12px solid rgba(255,0,0,0);content:'';display:block;height:24px;bottom:0;right:-24px;position:absolute;width:24px;-moz-transform:scale(.9999)}\n.ct-widget .ct-tag:first-child{margin-left:0}\n.ct-widget .ct-tag:hover{background-color:#4aa3df}\n.ct-widget .ct-tag:hover:after{border-left-color:#4aa3df}\n.ct-widget .ct-tag:nth-child(1){background-color:#8e44ad}\n.ct-widget .ct-tag:nth-child(1):after{border-left-color:#8e44ad}\n.ct-widget .ct-tag:nth-child(1):hover{background-color:#9b50ba}\n.ct-widget .ct-tag:nth-child(1):hover:after{border-left-color:#9b50ba}\n.ct-widget .ct-tag:nth-child(2){background-color:#2980b9}\n.ct-widget .ct-tag:nth-child(2):after{border-left-color:#2980b9}\n.ct-widget .ct-tag:nth-child(2):hover{background-color:#2e8ece}\n.ct-widget .ct-tag:nth-child(2):hover:after{border-left-color:#2e8ece}\n.ct-widget .ct-tag:nth-child(3){background-color:#27ae60}\n.ct-widget .ct-tag:nth-child(3):after{border-left-color:#27ae60}\n.ct-widget .ct-tag:nth-child(3):hover{background-color:#2cc36b}\n.ct-widget .ct-tag:nth-child(3):hover:after{border-left-color:#2cc36b}\n.ct-widget .ct-tag:nth-child(4){background-color:#d35400}\n.ct-widget .ct-tag:nth-child(4):after{border-left-color:#d35400}\n.ct-widget .ct-tag:nth-child(4):hover{background-color:#ed5e00}\n.ct-widget .ct-tag:nth-child(4):hover:after{border-left-color:#ed5e00}\n.ct-widget .ct-tag:nth-child(5){background-color:#f39c12}\n.ct-widget .ct-tag:nth-child(5):after{border-left-color:#f39c12}\n.ct-widget .ct-tag:nth-child(5):hover{background-color:#f4a62a}\n.ct-widget .ct-tag:nth-child(5):hover:after{border-left-color:#f4a62a}\n.ct-widget .ct-tag:nth-child(6){background-color:#16a085}\n.ct-widget .ct-tag:nth-child(6):after{border-left-color:#16a085}\n.ct-widget .ct-tag:nth-child(6):hover{background-color:#19b698}\n.ct-widget .ct-tag:nth-child(6):hover:after{border-left-color:#19b698}\n.ct-widget.ct-modal{background:rgba(0,0,0,.7);height:0;left:0;position:fixed;top:0;width:0;z-index:10009}\n.ct-widget.ct-modal--transparent{background:transparent}\n.ct-widget--active.ct-modal{height:100%;width:100%}\n.ct-widget .ct-progress-bar{border:1px solid #eee;height:32px;line-height:32px;padding:1px;width:456px}\n.ct-widget .ct-progress-bar__progress{background:#2980b9;height:28px}\n.ct-widget .ct-section{border-bottom:1px solid #eee;color:#bdbdbd;cursor:pointer;font-style:italic;height:48px;padding:0 16px;font-family:\"BYekan\",tahoma,sans-serif;font-size:16px;line-height:48px;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}\n.ct-widget .ct-section:after{clear:both;content:\"\";display:table}\n.ct-widget .ct-section:hover{background:#f6f6f6}\n.ct-widget .ct-section--applied{color:#646464;font-style:normal}\n.ct-widget .ct-section--applied .ct-section__switch{background-color:#27ae60;border:1px solid #1e8449}\n.ct-widget .ct-section--applied .ct-section__switch:before{left:25px;-webkit-transition-property:left;transition-property:left;-webkit-transition-duration:.1s;transition-duration:.1s;-webkit-transition-timing-function:ease-in;transition-timing-function:ease-in}\n.ct-widget .ct-section--contains-input .ct-section__label{width:75%}\n.ct-widget .ct-section__label{float:right;overflow:hidden;text-overflow:ellipsis;width:472px;white-space:nowrap}\n.ct-widget .ct-section__switch{background-color:#ccc;border:1px solid #b3b3b3;border-radius:12px;box-shadow:inset 0 0 2px rgba(0,0,0,.1);float:right;height:24px;margin-top:12px;position:relative;width:48px}\n.ct-widget .ct-section__switch:before{background:#fff;border-radius:10px;content:'';height:20px;left:1px;position:absolute;top:1px;-webkit-transition-property:left;transition-property:left;-webkit-transition-duration:.1s;transition-duration:.1s;-webkit-transition-timing-function:ease-in;transition-timing-function:ease-in;width:20px}\n.ct-widget .ct-section__input{background:#fff;border:none;color:#646464;float:left;height:47px;outline:none;padding:0 16px;text-align:left;font-family:\"BYekan\",tahoma,sans-serif;font-size:14px;line-height:48px;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;width:25%}\n.ct-widget .ct-section__input--invalid{color:#e74c3c}\n.ct-widget.ct-toolbox{background:hsla(0,0%,91%,.9);border:1px solid hsla(0,0%,100%,.5);box-shadow:0 3px 3px rgba(0,0,0,.35);left:128px;padding:8px;position:fixed;top:128px;width:138px}\n.ct-widget.ct-toolbox--dragging{opacity:.5}\n.ct-widget .ct-toolbox__grip{padding:8px 0}\n.ct-widget .ct-tool-group{padding:4px 0}\n.ct-widget .ct-tool-group:after{clear:both;content:\"\";display:table}\n.ct-widget .ct-tool-group:first-child{padding-top:0}\n.ct-widget .ct-tool{color:#464646;cursor:pointer;float:left;height:32px;margin:4px;margin-right:4px;position:relative;text-align:center;font-family:icon;font-size:16px;font-style:normal;font-weight:400;font-variant:normal;speak:none;text-transform:none;width:32px}\n.ct-widget .ct-tool,.ct-widget .ct-tool:after{border-radius:2px;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}\n.ct-widget .ct-tool:after{background:#000;color:#fff;content:attr(data-ct-tooltip);display:block;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;left:-26.5px;opacity:0;padding:0 8px;position:absolute;bottom:37px;font-family:\"BYekan\",tahoma,sans-serif;font-size:12px;line-height:20px;visibility:hidden;width:85px;word-break:break-word}\n.ct-widget .ct-tool:hover:after{opacity:.8;visibility:visible;-webkit-transition-property:opacity;transition-property:opacity;-webkit-transition-duration:0;transition-duration:0;-webkit-transition-timing-function:ease-in;transition-timing-function:ease-in;-webkit-transition-delay:2s;transition-delay:2s}\n.ct-widget .ct-tool:before{line-height:32px}\n.ct-widget .ct-tool:nth-child(3n){margin-right:0}\n.ct-widget .ct-tool:hover{background:hsla(0,0%,100%,.5)}\n.ct-widget .ct-tool--disabled{color:rgba(70,70,70,.33)}\n.ct-widget .ct-tool--disabled:hover{background:transparent}\n.ct-widget .ct-tool--down{box-shadow:inset 0 1px 3px rgba(0,0,0,.25);line-height:34px}\n.ct-widget .ct-tool--down,.ct-widget .ct-tool--down:hover{background:rgba(0,0,0,.025)}\n.ct-widget .ct-tool--applied{background:rgba(0,0,0,.1);box-shadow:inset 0 1px 3px rgba(0,0,0,.25)}\n.ct-widget .ct-tool--applied:hover{background:rgba(0,0,0,.15)}\n.ct-widget .ct-tool--bold:before{content:\"\\ea62\"}\n.ct-widget .ct-tool--heading:before{content:\"H\";font-weight:700}\n.ct-widget .ct-tool--subheading:before{content:\"H\"}\n.ct-widget .ct-tool--paragraph:before{content:\"P\"}\n.ct-widget .ct-tool--preformatted:before{content:\"\\ea80\"}\n.ct-widget .ct-tool--italic:before{content:\"\\ea64\"}\n.ct-widget .ct-tool--link:before{content:\"\\e9cb\"}\n.ct-widget .ct-tool--align-left:before{content:\"\\ea77\"}\n.ct-widget .ct-tool--align-center:before{content:\"\\ea78\"}\n.ct-widget .ct-tool--align-right:before{content:\"\\ea79\"}\n.ct-widget .ct-tool--unordered-list:before{content:\"\\e9ba\"}\n.ct-widget .ct-tool--ordered-list:before{content:\"\\e9b9\"}\n.ct-widget .ct-tool--table:before{content:\"\\ea71\"}\n.ct-widget .ct-tool--indent:before{content:\"\\ea7b\"}\n.ct-widget .ct-tool--unindent:before{content:\"\\ea7c\"}\n.ct-widget .ct-tool--line-break:before{content:\"\\ea6e\"}\n.ct-widget .ct-tool--image:before{content:\"\\e90d\"}\n.ct-widget .ct-tool--video:before{content:\"\\ea98\"}\n.ct-widget .ct-tool--undo:before{content:\"\\e965\"}\n.ct-widget .ct-tool--redo:before{content:\"\\e966\"}\n.ct-widget .ct-tool--remove:before{content:\"\\e9ac\"}\n@-webkit-keyframes e {\n0%{outline-color:hsla(0,0%,100%,0);-webkit-transform:background-color}\n25%{outline-color:#f39c12;-webkit-transform:background-color}\n50%{outline-color:#f39c12;-webkit-transform:background-color}\nto{outline-color:hsla(0,0%,100%,0);-webkit-transform:background-color}\n}\n@keyframes e {\n0%{outline-color:hsla(0,0%,100%,0);-webkit-transform:background-color;transform:background-color}\n25%{outline-color:#f39c12;-webkit-transform:background-color;transform:background-color}\n50%{outline-color:#f39c12;-webkit-transform:background-color;transform:background-color}\nto{outline-color:hsla(0,0%,100%,0);-webkit-transform:background-color;transform:background-color}\n}\n.ct-app,.ct-app *,.ct-app :after,.ct-app :before{box-sizing:border-box}\n.ct--highlight{outline:4px solid #f39c12;-webkit-animation:e .5s ease-in;animation:e .5s ease-in;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}\n.ct--no-scroll{overflow:hidden}\n.ct--puesdo-select{background:rgba(0,0,0,.1)} . ",
    "eightyfive": "It sure does (help) !\nThanks a lot.\n. Hi Anthony,\nThanks for the swift reply. I'm closing this thread since this is already tracked in https://github.com/GetmeUK/ContentTools/issues/321.\nDo you have any rough timeline in mind? Is there already something experimental I can have a look at?\n(I'm looking for directions in order to try to implement it myself meanwhile)\nCheers.\n. Duplicate of https://github.com/GetmeUK/ContentTools/issues/321.\n. I'm closing this one as you gave me hints in #358.\nFor reference, I wanted to update the toolbox state based on the type of the editable element being edited.\nThe key is to listen to the focus event on ContentEdit. This is what I was missing here (was trying to listen to the click event on the editable element, hence this issue...).\nMy specific problem was that I wanted to prevent the use of the toolbox when editing a data-fixture element. Here is my solution:\n```js\nContentEdit.Root.get().bind('focus', function (element) {\n  var isFixture = element.domElement().hasAttribute('data-fixture')\nif (isFixture) {\n    editor.toolbox().hide()\n  } else {\n    editor.toolbox().show()\n  }\n})\n```\n[ This solution is totally based on #173 ]\n. Would you like me to write a raw MD document with simple recipes?\nShould I contribute to this repository? Where?\n. By the way #173 totally did it!\nMy solution:\n```js\nContentEdit.Root.get().bind('focus', function (element) {\n  var isFixture = element.domElement().hasAttribute('data-fixture')\nif (isFixture) {\n    editor.toolbox().hide()\n  } else {\n    editor.toolbox().show()\n  }\n})\n```. ",
    "mohamedveron": "I use the latest version of Firefox and chrome and there is no errors in inspector .\n. it is working in both browsers \n. http://ideone.com/br0wlV\n. And the following code which i use to crop image ..\n// Check if a crop region has been defined by the user\n        if (dialog.cropRegion()) {\n            alert(dialog.cropRegion());\n            formData.append('crop', dialog.cropRegion());\n        }\n. Yes, there is no server side issue, i can insert image in server and ajax return images path and size  successfully .\n. I will but first i need to ask if the following code is enough to crop images..\nif (dialog.cropRegion()) {\nformData.append('crop', dialog.cropRegion());\n}\n. And following screen shot may help ..\n\n. But it still give me array of Nan when i make an alert for crop region..\nif (dialog.cropRegion()) {\nalert(dialog.cropRegion());\n        formData.append('crop', dialog.cropRegion());\n    }\n. yes it returns  [0, 0, 1, 1]\n. But i didn't use sandbox.js file i just use content-tools.min.js and followed the Getting start and image upload tutorials .\n. Is sandbox.js file contain crop methods which is not in content-tool.js ?\n. It worked with me when  sandbox.js  imported in my js file.\nThanks and sorry for wasting your time.\n. And i will check what is the wrong by myself :)\n. ",
    "bangtony": "Thank you for your reply.\nI also got other issue which the construct of table in HTML is changed when editing.\nStep by step reproduce as below:\n1. Run index.html in attached file (getContentTool.zip)\n2. Click \"Edit\" icon\n3. Click \"Save\" icon\nResult: Construct of table in HTML is changed. You can see that on UI.\nI am looking at your code, but I am still not find the reason. Could you please help me get reason?. Yes, I understood.\nThank you for your reply.. ",
    "Teddy95": "Hi @anthonyjb,\nMozilla Firefox 50.0.2\nI use the default contenttools js and css files and additional the file editor.js with following content.\n```javascript\n(function () {\n    window.onload = function () {\n        ContentTools.StylePalette.add([\n            new ContentTools.Style('Alert info', 'alert alert-info', ['p']),\n            new ContentTools.Style('Alert success', 'alert alert-success', ['p'])\n        ]);\n    ContentTools.DEFAULT_VIDEO_WIDTH = '800';\n    ContentTools.DEFAULT_VIDEO_HEIGHT = '450';\n    ContentTools.INSPECTOR_IGNORED_ELEMENTS = ['pt_module_include'];\n\n    editor = ContentTools.EditorApp.get();\n    editor.init('*[data-editable]', 'data-name');\n\n    window.addEventListener('load', function() {\n        var editor;\n    });\n\n    editor.addEventListener('saved', function (ev) {\n        var name, payload, regions, xhr;\n\n        // Check that something changed\n        regions = ev.detail().regions;\n\n        if (Object.keys(regions).length == 0) {\n            return;\n        }\n\n        // Set the editor as busy while we save our changes\n        this.busy(true);\n\n        // Collect the contents of each region into a FormData instance\n        payload = new FormData();\n\n        for (name in regions) {\n            if (regions.hasOwnProperty(name)) {\n                payload.append(name, regions[name]);\n            }\n        }\n\n        // Send the update content to the server to be saved\n        function onStateChange(ev) {\n            // Check if the request is finished\n            if (ev.target.readyState == 4) {\n                editor.busy(false);\n\n                if (ev.target.status == '200') {\n                    // Save was successful, notify the user with a flash\n                    new ContentTools.FlashUI('ok');\n                } else {\n                    // Save failed, notify the user with a flash\n                    new ContentTools.FlashUI('no');\n                }\n            }\n        };\n\n        xhr = new XMLHttpRequest();\n        xhr.addEventListener('readystatechange', onStateChange);\n        xhr.open('POST', document.getElementById('ajaxUrl').value);\n        xhr.send(payload);\n    });\n};\n\n}).call(this);\n``\nThe editor is used in a content management system (my own), so I can't unfortunately provide the whole code to reproduce the error.. I have deleteContentTools.INSPECTOR_IGNORED_ELEMENTS = ['pt_module_include'];` from source, now it's working.\nDid I've used this faulty or is this a bug?. Ok thank you! :). ",
    "quiji": "Thanks for the help! \nFor some reason those events are not firing. Where is the right place to put that event? I just realized that when the editor is in dormant state, there are no tools in _toolUIs, so that explains why I couldn't access that property before. . No, it doesn't show the test message. As I told you before, I created events for start, stop and revertwith success.. Sure, the version is 1.2.6 \n```javascript\n$scope.editor.addEventListener('start', function(ev)  {\n      console.warn(\"start: Started editing...\");\n  var toolbox = $scope.editor.toolbox();\n\n  console.log(\"editContent: toolbox\", toolbox );\n  console.log(\"editContent: toolbox._toolUIs\", toolbox._toolUIs );\n  console.log(\"editContent: toolbox._toolUIs['align-left']\", toolbox._toolUIs['align-left'] );\n\n  if (!toolbox._toolUIs['align-left']) return;\n\n  toolbox._toolUIs['align-left'].addEventListener('apply', function(ev) {\n      var element = ev.detail().element;\n      console.log(\"tools - apply: About to apply align-left to \", element);\n      if (element.type() == 'Image')\n      {\n        console.info(\"tools - apply: It's an image....\");\n        ev.preventDefault();\n        element.removeCSSClass('align-right');\n        element.removeCSSClass('align-center');\n        element.addCSSClass('align-left');\n        editor.toolbox().updateTools()\n      }\n  });\n});\n\n```\nI just noticed that the tools are created after the editor starts. So the console.log messages up there show the tools after I start the editor, stop it and start it again. Still couldn't make it work.\nIt's a lot of code, so let me see if I can dig further into it, if not I'll post it here thanks!\n. worked like a charm! \nThanks!\nI'm enjoying CT a lot :). Thanks for the quick response!\nI noticed there is a paste event. I wonder whats best: patch the paste method or catch the event and prevent bubbling up.. What do you suggest?. ",
    "Vinze": "Great, thanks!. ",
    "rhedin": "ckeditor_4.6.1_standard\nSorry to be slow to respond, Anthony.  I've been sick. \nIf it can't be reproduced, oh well.  Let it go. \n    Rick.\n",
    "akimcsm": "Hi,\nThis was really helpful for me.  Just a small addition to @d0brii 's code\nAfter\nif (window.clipboardData) {\n        clipboardData = window.clipboardData.getData('text/plain');\n    }\nYou should add\nContentTools.EditorApp.get().paste(element, clipboardData);. ",
    "vivex": "CSS Selector was .navbar-lg .navbar-nav > li > a   , But ContentToolJS have inserted one more div  just before a, so this css selector is not working.. I could have use this but these classes are defined in bootstrap lib: https://github.com/twbs/bootstrap/blob/v3.3.0/dist/css/bootstrap.css#L3939\nI tried removing those extra div added by contentTool by following code:\n```\n var editableDivs = body.find(\"div.ce-element \");\n          editableDivs.each(function() {\n            var classes = $(this).attr('class');\n            var content = $(this).contents();\n            var parent = $(this).parent();\n            $(this).remove();\n            content.addClass(classes);\n            content.attr('contenteditable', '');\n            parent.append(content);\n          });\n```\nand it working fine till now,  is it good approach ?. @anthonyjb  no i havnt tried saving yet, i was just trying out contentTools, will check saving and update here.. ",
    "turigeza": "Sure no prob if you wanted it that way :). I thought I mention it because I came across with it as I was looking at how it's implemented. \nid's meant to be unique I think btw ... but I presume you know that already :) \nhttp://stackoverflow.com/questions/9454645/does-id-have-to-be-unique-in-the-whole-page\n. :) Why would I mind for sure ... I didn't allow duplicate id's when I used Content Edit. Just because I would never want duplicate ids and I never thought one would. After all that is what classes are for in some way ...\nSo I warn users and offer them to scroll and highlight the element with the same id. They can then decide what to do. Change the old element or the new but they can not have the same id on the same page. \nThis is quite a work thought because from this onwards you have to think of id clashes when ever you are duplicating content or bringing in content from other pages, custom html name it ....\nKeep in mind the use of ids by users is pretty much limited to anchor links.\nAnd now that I wrote all this down realising maybe it's not even worth the hassle to do all these check ... :)\n. ",
    "BaxterResearchCenter": "Thanks, works great!. Hi,\nQuick (I hope) follow-up question. For some reason that I have not figured out yet, when I use editor.start() and then save the changes and try to edit again, I get a parentNode is null error message. However, if I use editor.ignition().state('editing') instead, everything works great. But..., then the patch you provided to put the cursor in the first element no longer gets called because I am not calling editor.start. Is there a way I can trigger this function to run when the state changes to editing instead of start?\nAnyway, thanks for any help you can provide. Still trying to wrap my head around the inner workings of this tool, as I am customizing a bit to work with my project.\n. Thanks for the reply and help. I'm very impressed with the library and how responsive you are.\nI apologize in advanced for the long post, but I want to try and explain what I'm trying to do in detail to hopefully make it easier to see what is going on. One note about my previous post. Since I last posted the question, I have been trying many different things to try and fix the issue. I have come to the conclusion, that using editor.start() may be a better route then using editor.ignition().state('editing'). I just wanted to point that out so it doesn't look like that is missing in the code. Also, because of this, this post is now a little off topic.\nSo, let me try and explain what I'm trying to do and then I will follow up with some code. \nWhat I am trying to do:\nI am setting up a page that will allow the user to edit only a certain area of the site at one time. I have created my own edit button for each area. When the user clicks to edit a particular area, I lock the rest of the page and show my own save and cancel buttons for that area.\nWhat is happening\nWhen I click to edit a container, everything works great. It goes straight to edit mode and the cursor shows (I added an additional function, shown below in the code, to move the cursor to the end of the container instead of the beginning). \nIf I cancel this edit, again everything appears to work correctly. I can continue to edit and cancel any container and everything works great.\nNow, when I try and save, some weird things start to happen. The first time I go to edit mode and save, everything works fine. If I try and save again (for the same or any other container), everything again works, but I do get a \"Busy\" alert message. Then, if I try and save one more time, I will again get a \"Busy\" alert, but this time an error occurs (this.history is null).\nThe Code\n//CSS - Because I have my own edit and save buttons I hide some items and edit others\n.ct-ignition { display: none !important; }\n.ct-inspector { display:none !important; }\n.ce-element--focused, .ce-element--over { background-color: transparent !important; outline: none !important; }\n.ct-anchored-dialog__target-button {display:none !important;}\n```\n//Setup global variables\nvar editor;\n//Page Load Setup\nfunction PageSetup()\n{\n      var editorCls = ContentTools.EditorApp.getCls();\n      var superStart = editorCls.prototype.start;\n      editorCls.prototype.start = function () {\n            superStart.call(this);\n            // Find the first region on the page\n            var region = editor.orderedRegions()[0];\n            // Find the first text element on the page\n            element = region.nextWithTest(function (node) { return node.type() === 'Text' });\n            // Give the element focus\n            element.focus();\n            // Set the selection at the start of the element's content\n            new ContentSelect.Range(0, 0).select(element.domElement());\n            //function that puts the cursor at the end. Let me know if you need or want to see this and I can post seperately\n            cursorManager.setEndOfContenteditable(element.domElement());\n      }\n}\n//Edit Activated Function\nfunction Edit()\n{\n      editor = ContentTools.EditorApp.get();\n      editor.addEventListener('saved', function (ev) {\n            EditSave(myVars, ev, editor);\n      });\n      editor.addEventListener('stop', function (ev) {\n            ev.preventDefault(); // Prevent save\n           ev.stopImmediatePropagation(); // Prevent save\n           this.history.stopWatching();\n           this.history = null;\n           this._toolbox.hide();\n           this._inspector.hide();\n           this._regions = {};\n           this._state = 'ready';\n      });\n      editor.init('*[data-editable]', 'myUniqueIDOfItemBeingEdited');\n      editor.start();\n}\n//Cancel Action\nfunction EditCancel()\n{\n      editor.revert();\n      editor.stop(false);\n      editor.destroy();\n}\nfunction EditSave()\n{\n      //Run Save Script\n      //Close Editor\n      editor.stop(false);\n      editor.destroy();\n}\n```\nSorry again for the long post. Let me know if I can clarify anything else.\nThanks!\n. That fixed it. Thanks for all your help!. ",
    "senthil49": "great! thats helpful.. Hi @anthonyjb, Thanks for your help so far. \nCan you please take a look at mansoor's question?. ",
    "mansooraziz": "Hi @anthonyjb, \nI have implemented the above solution, I had to take off this check  if (element.content.length() > 0) as it wouldn't work when the paragraph is split into two. \nIt works fine but the problem is that this 'mount' event is also being called on page load, which is unnecessarily copying styles to next p tags. \nI only want this to be called when 'Enter' key is pressed.\nAt the moment I have created a flag like ContentEdit.Root.EnterPressed which is being set in Text.prototype._keyReturn function, and the mounting code is wrapped within the if check. like:\nJavaScript\n// Listen for mount events\nContentEdit.Root.get().bind('mount', function(element) {\nif (ContentEdit.Root.EnterPressed == true){\n  ....\n  //do copying styles\n  ....\n  //unset the enter flag\n  ContentEdit.Root.EnterPressed = false;\n  }\n}\nCan you please confirm if there is any better way of doing this?\n. Hi @anthonyjb \nThanks for your reply,  I have update the _keyReturn method, can you please have a look if it's looks fine?\n * we just wanted to copy font and color and not classes and other styles from previous p tag might    have, like margin-top would not be good idea if we just want it to behave like new line.\nText.prototype._keyReturn = function (ev) {\n    .....\n    ....\n    ..\n    var styleValues = this.getStyleValues(['font', 'color']); //copy selected styles from current P tag\n    element = new this.constructor('p', { style: styleValues }, tail);\n    ..\n    ....\n    .....\n}\nElement.prototype.getStyleValues = function (stylesToCopy) {\n    try {              \n        var currentParagraphStyles = this.attr('style').split(';');\n        var stylesToApply = [];\n        currentParagraphStyles.forEach(function (style) {\n            style = style.trim();\n            stylesToCopy.forEach(function (styleToCopy) {\n                if (style.indexOf(styleToCopy) >= 0 && stylesToApply.indexOf(style) < 0) {\n                    stylesToApply.push(style);\n                }\n            });\n        });\n        //we dont neeed margins to be added for new P tag unless it was requested in parameter\n        if (stylesToApply.indexOf('margin') < 0){             \n            stylesToApply.push('margin: 0;');\n        }\n    return stylesToApply.join(';');\n\n} catch (err) {\n    return \"\";\n}\n\n}\n. There is another modification we had to do i.e. at the moment if user press enter more than once it doesn't allow creation of multiple lines ( i mean empty P tags), \nWe added an option (ContentEdit.PRUNE_BLANK_LINES ) and modified whitespace check in _keyReturn as below\n// Only add an empty paragraph if PRUNE_BLANK_LINES is not set\nif (ContentEdit.PRUNE_BLANK_LINES && this.content.isWhitespace()) { \n                return;\n}\nBut to make it work we had to take out .trim() from many places, because it trims all the empty P tags that we want to keep. \nIt would be great if trimming empty P tags is configurable option. . ",
    "frankspin89": "@anthonyjb Thanks for your replay. I'm now trying to implement it myself. I have the basics working now.\nContentToolsComponent\n```\nconst ContentToolsLib = require('./contenttools.js');\nimport { NgModule, EventEmitter, AfterViewInit, Component, Output, Input, OnDestroy } from '@angular/core';\n@Component({\n  selector: 'app-content-tools',\n  template: '',\n})\n@NgModule({\n  declarations: [ContentToolsComponent],\n  exports: [ContentToolsComponent]\n})\nexport class ContentToolsComponent implements  AfterViewInit, OnDestroy {\n  @Output() onSave = new EventEmitter();\n  editor = ContentToolsLib.EditorApp.get();\nngAfterViewInit() {\n    this.editor.init('*[data-editable]', 'data-name');\n    this.editor.addEventListener('saved', ev => {\n      const regions = ev.detail().regions;\n      this.onSave.emit(regions);\n    });\n  }\nngOnDestroy() {\n    this.editor.destroy();\n  }\n}\n```\nAnd then use the component like this\n<app-content-tools (onSave)=\"onSave($event)\">\n  <div data-editable data-name=\"heading\" [innerHTML]=\"post.heading\">\n  </div>\n  <div data-editable data-name=\"content\" [innerHTML]=\"post.content\">\n  </div>\n</app-content-tools>\nFar from pretty at the moment. Keep updating this thread if I made some progress. All help is welcome to implement this Awesome library in to Angular 2+. @anthonyjb question: I'm trying to implement auto saving. \nThe problem that i'm facing is that angular is replacing the dom when the content is updated. That is resulting in the fact that you can't edit the updated section/region. \nIs there a method that I can call after a successful save to reactive the editor in the updated section/region? Found: this.editor.start(); but that isn't working for me. @anthonyjb I don't think that it makes any difference. I'm using a realtime database and want to create a option to collaborate on a single page in realtime. So after x seconds I save the data from ContentTools to the database. A listener is then updating the dom with the fresh data. \nThe saving part is working correctly at the moment. Only updating the dom with the fresh data is problematic. \nTo make the updated region editable again, I have to manually close the editor and start the editor again. So i'm looking for a function to call after I updated the dom with the fresh data. \n. @anthonyjb I think that .syncRegions is the right function. But I'm not sure why it's not working for me.\nContentToolsComponent\n```\nconst ContentToolsLib = require('./contenttools.js');\nimport {\n  NgModule, ViewChild, EventEmitter, AfterViewInit,\n  ElementRef, Component, Output, Input, OnDestroy, OnChanges\n} from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\n@Component({\n  selector: 'app-content-tools',\n  template: '',\n})\n@NgModule({\n  declarations: [ContentToolsComponent],\n  exports: [ContentToolsComponent]\n})\nexport class ContentToolsComponent implements AfterViewInit, OnDestroy, OnChanges {\n  @Output() onSave = new EventEmitter();\n  @Input() editorState;\n  @ViewChild('contenttools') element: ElementRef;\n  editor = ContentToolsLib.EditorApp.get();\nngAfterViewInit() {\n    this.editor.init('*[data-editable]', 'data-name');\n    const that = this;\nthis.editor.addEventListener('saved', function (ev) {\n  const regions = ev.detail().regions;\n  if (Object.keys(regions).length === 0) {\n    return;\n  }\n  that.onSave.emit(regions);\n});\n\nthis.editor.addEventListener('start', function (ev) {\n  const that = this;\n  function autoSave() {\n    that.save(true);\n  };\n  this.autoSaveTimer = setInterval(autoSave, 5 * 1000);\n});\n\n}\nngOnChanges() {\n    if (this.editorState) {\n      const state = this.editor.getState();\n      const domRegions = this.editor.domRegions();\n  console.log('state', state);\n  console.log('doms', domRegions);\n\n  this.editor.syncRegions('*[data-editable]', true);\n  this.editorState = false;\n}\n\n}\nngOnDestroy() {\n    this.editor.destroy();\n  }\n}\n```\nComponent that uses ContentToolsComponent\n```\nimport { Component, OnInit } from '@angular/core';\nimport { ClientService } from 'app/shared';\nimport { ContentToolsComponent } from '../shared/contenttools/contenttools';\nimport { ProposalService } from '../shared/services/proposal.service';\n@Component({\n  selector: 'app-proposals',\n  templateUrl: './proposals.component.html',\n})\nexport class ProposalsComponent implements OnInit {\nprivate post: Object;\n  private editorState = false;\nconstructor(\n    private proposalService: ProposalService\n  ) { }\nngOnInit() {\n    this.proposalService.loadProposal().subscribe(\n      proposal => this.post = proposal\n    );\n  }\nonSave(regions) {\n    this.post = Object.assign({}, this.post, regions);\n    this.proposalService.updateProposal(this.post).take(1).subscribe(data => this.editorState = true);\n  }\n}\n```\nTemplate\n<h1>Proposals</h1>\n<app-content-tools (onSave)=\"onSave($event)\" [editorState]=\"editorState\" *ngIf=\"post\">\n  <div data-editable data-name=\"heading\" [innerHTML]=\"post.heading\">\n  </div>\n  <div data-editable data-name=\"content\" [innerHTML]=\"post.content\">\n  </div>\n</app-content-tools>\nDOM before update\n<app-content-tools _ngcontent-fkp-20=\"\" ng-reflect-editor-state=\"true\">\n  <div class=\"content-tools\">\n    <div _ngcontent-fkp-20=\"\" data-editable=\"\" data-name=\"content\" ng-reflect-inner-h-t-m-l=\"<h2>&amp;#10;   The content of the page&amp;#10;</h2>&amp;#10;<p>&amp;#10;    &amp;#10;</p>\">\n      <h2 class=\"ce-element ce-element--type-text ce-element--focused\" contenteditable=\"\">The content of the page</h2>\n      <p class=\"ce-element--empty ce-element ce-element--type-text\"></p>\n    </div>\n  </div>\n</app-content-tools>\nDOM after update\n<app-content-tools _ngcontent-fkp-20=\"\" ng-reflect-editor-state=\"true\">\n  <div class=\"content-tools\">\n    <div _ngcontent-fkp-20=\"\" data-editable=\"\" data-name=\"content\" ng-reflect-inner-h-t-m-l=\"<h2>&amp;#10;    The new content of the page&amp;#10;</h2>&amp;#10;<p>&amp;#10;    &amp;#10;</p>\">\n      <h2>The new content of the page</h2>\n      <p></p>\n    </div>\n  </div>\n</app-content-tools>. ",
    "ZsZs": "Hi @frankspin89 , @al-on-github ,\nIs there any publicly available result of this effort? I would love to use ContentTools with Angular 6 too.. ",
    "iursevla": "ping  @frankspin89 @al-on-github @ZsZs any news on this?\n. ",
    "Christian-Schiffer": "ping @frankspin89 @al-on-github @ZsZs any news on this?. ",
    "evromalarkey": "or is there any way to find existing tableCell I need and insert custom value into it? Let's say I know the position of the cell in the DOM (tfoot td), how do I find it and replace the content with my new value? I've spent whole day in the documentation etc. and didn't find the way to do it. I'm kind of lost now. \nI know I can attach some content into region, but how can I specify the position in DOM in that region?. That helps a lot thanks! It's working for me with the ID, but now let's say I don't know ID, can I test it also as tagName? eg.\nreturn node.tagName('tfoot') === id\ntfoot.tableSection()._syncContent();\nwould that work in relation to approach 1?\nThe thing is it has to be plain table, so I only know that my appended value is in tfoot in last td (or I need to add it there) and I guess that it could be tricky to access something so deep in the table without id. Btw it could be more than one table.\nWould be possible for example to sync the whole table(s), regardless if there were changes in the DOM or not?. Thanks a lot, worked nicely! There was only missing .length in the foreach. Btw the element should be the parent region right? eg. ContentTools.EditorApp.get().regions()['wsw']. Ok, thanks once again for the help!. It was simple random text from windows notepad. I suspected it was due the recent update, I've reverted back.. ",
    "Tiseanu": "Hi Anthony,\nThank you so much for your answer and sorry to bother you again.\nI added the code you gave me but it returns an error when insert the image:\nUncaught TypeError: insertNode.parent is not a function - And the pop-up seems to be triggered twice.\nThank you,\nTiseanu\n. ",
    "erikcsonka": "Hi Anthony,\nI have the same issue here. I think you use something to transform that DOM element to some Text element.\nHere is my code:\n$('div#buttons #btn').on(\"click\", function(){\n                var element = $('#edit_box p.ce-element--empty');\n                ContentTools.Tools.Image.apply(\n                  element,\n                  null\n                  );\n            });\nThanks in advance!. ",
    "ErixSoleil": "It seems to come from the change event when this value is changed - > ev.target.value = '';\nI've comment this line and the event isn't triggering twice anymore. I had the same issue.\nImageDialog.prototype._addDOMEventListeners = function() {\n      ImageDialog.super._addDOMEventListeners.call(this);\n      this._domInput.addEventListener('change', (function(_this) {\n        return function(ev) {\n          var file;\n          file = ev.target.files[0];\n          // ed change was triggering event twice\n          //ev.target.value = '';\n          if (ev.target.value) {\n            ev.target.type = 'text';\n            ev.target.type = 'file';\n          }\n          return _this.dispatchEvent(_this.createEvent('imageuploader.fileready', {\n            file: file\n          }));\n        };\n      })(this));. ",
    "marcesh": "thanks for the quick response. would it e.g. be possible to \"unhide\" a special div containing a form with all the settings underneath the blog article itself upon pressing the edit button? how would i catch that event to unhide the form? i can't seem to find anything in the docs. ",
    "chr1smy3rs": "Apologies, meant to open a PR into my forked version.. ",
    "rvanlaak": "We use above listeners to update innnerHTML before editing, because the data we actually want to edit is inside one of the dataset values.\nProblem here is that on stop, we revert innerHTML to the original value, but thereafter ContentTools overwrites the value again. \njs\neditor.addEventListener('start', function (ev) {\n    var elements = Array.prototype.slice.call(document.getElementsByTagName('x-trans'));\n    elements.forEach(function(item, index) {\n        item.innerHTML = item.dataset.plain;\n    });\n});\neditor.addEventListener('revert', function (ev) {\n    var elements = Array.prototype.slice.call(document.getElementsByTagName('x-trans'));\n    elements.forEach(function(item, index) {\n        item.innerHTML = item.dataset.value;\n    });\n});\nSo, start works okay, but stop then sets back the innerHTML value that was set on start. None of the events listed can be used to handle this?. Great @anthonyjb ! I think I was missing them while implementing https://github.com/php-translation/symfony-bundle/pull/104\n... what happened over there, was that the editor was not able to retrieve the proper value (read: old value was returned). Can you confirm that this is \"fixed\" by the two new events before I try again? \ud83d\udc4d . Yes, the first two are correct. So, it sets the value correctly, but I can't properly get back the data to send it for storage.. ",
    "cubiclesoft": "Okay.\nThe actual sentence that some will find offensive is, '\"I feckin' hate coding browser-based image uploading and editing tools\" - A frank look at the dark side of in\u2011page editors.'  Emphasis mine.  The juxtaposition of that description compared to the rest of the tutorial descriptions seemed out of place.\nAt any rate, thanks for taking the time to respond.  I'll move on now.. Someone once said, \"it's always better late than never.\"  :)\nI suspected the UI changes, particularly toolbox, would be too big to just accept immediately into mainline.  A new branch specifically for dealing with mobile readiness is a great solution.\nI agree that touch support for CT is probably the next significant hurdle but I wanted to get your feedback on the first set of changes before proceeding down any particular path.  The separate branch will allow a lot of additional freedom to explore various options.. A lot has happened in the last month.  I went off to work on semi-related things to the project I'm using CT for but the last two weeks have been entirely focused on the next set of changes for CT:  Touch support.  I first attempted to get drag-and-drop to work on touch devices but there are multiple issues that I ran into:\n\nLong press on touch devices triggered existing built-in browser functionality across multiple browsers (e.g. cut, copy, paste).  Anything I tried either didn't work (at all) or interfered with the built-in functionality in unfortunate ways.\nHorizontal motion is guaranteed to interfere with things such as Android ViewPagers (e.g. embedded ContentTools in a native app).  Dragging-and-dropping items to the right would be impossible in some circumstances.\nVertical motion is already handled by vertical scrolling.  Preventing the default behavior globally for just touch events is the only way to handle this.  However, if too much content is on the screen and extends past the area being targeted, stopping the browser from scrolling will cause problems with moving content around.\n\nI ended up reverting my changes for handling touch events and eventually found myself on a different path:  Long-press/long-click the tags in the inspection bar.  A normal, short click still displays the usual inspector dialog.  However, long-pressing draggable elements now displays an anchored dialog with six directional buttons representing the most important actions associated with drag-and-drop.  On resizable elements such as images and video, two text fields also appear for controlling width and height, which allows for pixel-precision resizing on all platforms.\nThe demo has been updated to reflect all of the latest changes:\nhttps://cubiclesoft.com/Unrelated/ContentTools/sandbox/\nAs a minor bonus, the anchored dialog component still has fixed width but now has dynamic, unbounded height.  That could be useful for making other expansions/customizations.\nThere is one new global configuration option that is disabled by default:\nContentTools.MOVE_SIZE_AUTO_SCROLL\nI originally tried to keep the dialog in the same place at all times on the screen by scrolling the view but it's a bit jarring on a smartphone.  Disabling the feature does make moving things around a little more cumbersome since the user has to scroll independently but it becomes much more intuitive that the element has moved in the desired direction.  I left the code in place just in case someone really prefers the jumping behavior and made it a global configuration option.\nThe long-press + anchored dialog approach avoids interfering with built-in functionality on touch devices and expands desktop functionality a little bit more.  Desktop with a mouse is still the best environment for using CT, but touch devices can now do almost everything desktop can do.  I wouldn't want to edit content on a smartphone for too long - maybe just quick two-minute content fixes.  However, extended content editing sessions on a tablet with a Bluetooth keyboard is a real possibility.\nOne other thing:  The six new icons are in icons.woff and I updated the selected icons JSON file from icomoon.  The JSON file they now export is apparently much smaller than when it was previously exported, hence the \"-13,000\" changes at the top of this pull request.. Glad to contribute!\nIt would be nice to have a global option to show the fixed toolbox on all devices.  For example,  ContentTools.FLOATING_TOOLBOX = true by default but always affix it to the side when it is set to false or the screen is too small.  Someone might prefer the fixed toolbox to show at all times for reasons only known to them (e.g. writing an Electron app or putting CT into an iframe).\nSince the floating toolbox code is going to be merged in (eventually), I'm going to go back to the original master repo and see if I can get drag-and-drop of the floating version of the toolbox to function on all devices while what I know about touch-based drag-and-drop is fresh in my mind.  The floating toolbox could still end up appearing on touch-capable laptops (e.g. Chromebooks, Surface), which might result in less than ideal interaction.  That's the only issue I can think of at this point.. @DataCourier - Hmm.  Unlike the video dialog, the default ContentTools image upload dialog requires callbacks to function - that's normal - so why it can't close is possibly related (maybe a Javascript error - been almost a year since I opened this issue).  The \"footer\" is probably the Inspector bar and it is definitely needed for setting classes and moving elements around (especially on mobile).  There is a 'mobile-ready' branch on this repo, but if you want something a bit more, IMO, feature-complete and production-ready with some souped up replacement widgets, check out this branch:\nhttps://github.com/cubiclesoft/ContentTools/tree/barebones\nSee it in action:\nhttps://barebonescms.com/demo/\n. This PR may resolve closed issue #382.. As far as I know, CoffeeScript doesn't and won't ever support the ternary operator.  It's got if-then-else and unless.  Attempting to use the ternary operator in CoffeeScript results in a transpiler error.  Sometimes you can write Javascript or something close enough to it and sometimes you can't.\nhttps://stackoverflow.com/questions/10146080/ternary-operation-in-coffeescript\nAlso, I attempted to stick with the coding style of the surrounding code in this repository.. An alternative approach could be to use attributes in the inspector dialog for the caption bit and a custom class that declares an \"image-card\".  Then you store the content as-is and transform it into a card when delivering it to the browser with a tool like TagFilter.\nThe way ContentTools handles DOM elements when consuming them means you can't bypass img tags for some cases.  All img tags get handled the same way when starting the editor.. CoffeeScript isn't anybody's strong suit.\nA new ContentEdit type is probably necessary to accommodate an official 'hr' tool.  That's way beyond the scope of the documentation.  Adding ContentEdit types pretty much requires deep-diving into the entire source code (all 20,000+ lines of it with ContentEdit being the least commented code and hanging around 16,000 lines long).\nEmoticons/smilies are better implemented via standard emoji.  Desktop can copy-paste the Unicode characters from Emojipedia.  Mobile/tablet devices have their built-in emoji keyboards.\nMy understanding of the code is that divs would be very difficult to implement (especially when allowing layered divs).  Drag-and-drop would be complicated to get right.  ContentTools is mostly flat DOM.  Lists and tables are the deepest that ContentTools goes and they have their issues.  As an alternate solution, you could use, for example, an unordered list with a custom class to wrap your content and then a tool like TagFilter to transform lists containing that class into div-wrapped paragraphs when emitting the content to the final page.  There are other similar approaches.  Now that I'm thinking about it, TagFilter could also be used on an existing tag with a special class called 'hr' to transform the tag into a hr tag (or simply prepend a hr tag to the current tag being processed).. > First, to start, I want to point out that ContentTools states that the editor does not work well on mobile devices. More importantly, at least from my observations, it doesn't have native support for responsive displays.\nTry the mobile_ready branch.  It's a little bit behind master.. Hooray!  (Hooray?)  After a lot of fiddling around, I can (finally) reliably replicate the second issue:\n\nStart editing (and get the keyboard caret onto an empty paragraph).\nPress 'a'.\nPress enter.\nPress 'b'.\nPress up arrow twice.\nPress space.\nPress 'c'.\nPress right and down arrows to your heart's content.  Keyboard caret is stuck.\n\nThe bug can be replicated on the demo, which I assume is running some recent-ish flavor:\nhttp://getcontenttools.com/demo\nI'm still struggling with trying to replicate the first issue.  I'll keep plugging away at it.  When the first issue crops up, it really makes a mess of things.\nEdit:  After some digging around the source code, I've figured out what causes the second issue.  To debug I added:\njavascript\nconsole.log(selection)\nTo Text.prototype._keyRight.  And:\njavascript\nconsole.log(this.content.length());\nconsole.log(this.content.html());\nTo Text.prototype._syncContent.  Here is the output to the Javascript console:\n```\n0  <-- new paragraph\n1  <-- pressed 'a'\na\n1  <-- pressed 'enter'\na\n0\n1  <-- pressed 'b'\nb\n1  <-- pressed left arrow\nb\n1  <-- pressed left arrow\nb\n1\na\n3  <-- pressed space\na \n4  <-- pressed 'c'\na c\nObject { _from: 3, _to: 3 }  <-- pressed right arrow\n4\na c\n```\nPressing right arrow never gets past the <br> element at the end of the string (i.e. can't reach a value of 4) and so the caret never moves to the next paragraph because it isn't actually at the end of the string.. Possibly related to the first issue but can be easily replicated:\n\nStart editing.\nCreate two paragraphs that are each three lines long where the third line is relatively short (just a word or two).\nPlace the caret somewhere in the middle of the second line of the first paragraph.\nPress the down arrow three times. (a)\nPress the up arrow four times. (b)\n\n(a) When the second down arrow is hit, the caret is at the start of the first line of the second paragraph.  The third down arrow moves to the second line at the position that the caret was at on the second line of the first paragraph.  The editor skips moving the caret to the middle of the first line.  I assume part of the issue here has to do with how switching the paragraph being moved into over to contenteditable functions.\n(b) The horizontal caret position is forgotten when changing lines/paragraphs particularly with going back up to the previous paragraph.  It also takes four keypresses to return to the same line as before.\nThis bug/these bugs can be replicated on the demo.\nMost code/text editors seem to only update their memorized internal horizontal caret position when a key other than up or down is pressed.\nThere's also an issue here where changing paragraphs with just up and down arrow keys on rare occasions results in placing the caret at the beginning of the line when moving in-paragraph but the last line remains unaffected.  I seem to be able to replicate it more frequently when there are lots of red underlines from incorrectly spelled words, which suggests a timing issue of sorts.\nAs to replicating the first issue, I've only had it happen twice so far in my attempts to replicate it.  During the most recent \"success,\" I pressed enter in the middle of the paragraph that I was in and the editor put the new paragraph before the current paragraph and did not split the paragraph in which I had pressed enter.  The caret was moved to the new paragraph too.  I assume if I had pressed a different key at that moment, the caret would have jumped to the previous element on the page and started inserting text there as described in my earlier comment.  Given the difficulty I'm having reproducing this, I suspect a timing issue is involved.  There are approximately 20 setTimeout() and setInterval() calls scattered throughout the source code so it could be one of those OR it could be the web browser.  I don't know at this point - I haven't even looked at the code yet.. Yes, I use Firefox as my primary web browser.  I hadn't gotten around to testing other browsers.. I just submitted a couple of fixes for this issue.  Keyboard navigation is a bit better now.  I still can't replicate the first problem with any consistency.  The pull requests fix the second issue (the spurious br tags) and the third issue (navigation to/from text, images, and video elements).\nI briefly attempted to fix horizontal navigation tracking across elements but quickly realized that's a mini-project in itself and gave up.  There are just too many nuances to deal with at the moment.. https://github.com/GetmeUK/ContentTools/pull/439\nTo get touch support working for toolbox, I reverted back to master from mobile_ready and added support for touch events in.  So it's definitely a pristine commit against master.  There's a demo page with just #439 if you want to test/verify:\nhttps://cubiclesoft.com/Unrelated/ContentToolsDragTest/sandbox/\nLooking back at the commit, the only obvious significant change that I see is the addition of ev.preventDefault(), which only affects touchstart (i.e. prevent browser scrolling for touch events while dragging the toolbox) whereas there is no default browser behavior for mousedown events (that I'm aware of).. Just thought of one minor bug:  When switching regions, the 'next-region' and 'previous-region' triggers will still jump to 'content' it finds instead of the navigable.  That is, _handleNextRegionTransition() and _handlePreviousRegionTransition() probably need a minor adjustment or two to clean up transitioning regions if there is non-content at the start or end of a region (or if the region only contains non-content elements).  This bug only affects those who use multiple regions on a page but it's no worse than the existing behavior.. Latest commit fixes next/previous region navigation.. ",
    "guicapanema": "Hi @anthonyjb ! Thanks for answering and sorry for the delay.\nThis is what the HTML looks like:\n```\n\n    Conclus\u00e3o\n\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n\n\n\n\n    Morbi aliquet leo sit amet nisl luctus facilisis sit amet sit amet eros.\n\n\n```\nAnd this is the result:\n\nFrom what I see the problem is the empty <p> tag is left in the DOM. It has the CSS's :before attached to it, which is what messes up the numbering. Not a huge deal, but should be an easy fix, right?. Hi @anthonyjb . Actually, I didn't explain myself well. I added the :before element because I need paragraphs to be numbered, and that's where I'm putting my counters. In a normal situation (that is, with no empty <p> tags), that should work fine.\nThe main thing here is that I would like the editor to remove empty paragraphs before saving to the database. When I reported this, I was thinking no one would like empty <p>s, but that was really shortsighted.\nPerhaps adding an option?. ",
    "kaliel86": "oh, didn't see that inspector bar feature yet, sorry. That's perfect !. ",
    "WaKeMaTTa": "All right. Apologies.. ",
    "zeraphie": "Thing is that I'm using grammarly as a chrome addon, I'm not sure where this issue belongs as well in all honesty, because now that I think about it, should grammarly do the grammar checking on a contenteditable field? or just inputs?. How about that before the save happens, it sanitises the output via a whitelist of tags (stripping just the tag, not the text inside) and removes attributes in prior order to save html? I'll come up with a small something and put it on codepen, see if it works in an isolated way :). Thank you, I had had a discussion about this at the workplace, and am doing the sanitising via PHP which is how I thought it'd happen, it just seemed like there was something already happening :). ",
    "damienflament": "Isn't it a source of serrious bugs ? Even if you're not aware of them (because the detach method is defined in the \"subclasses\" of your projects) ?\n. ",
    "itprogrammer2": "Hi again, I'm really sorry but I think a found a solution/hack. I inspected http://getcontenttools.com/demo and found this in data-editable-demo section class=\"[ page__content ]  [ formatted ]\" and copied this:\n.formatted img.align-right, .formatted iframe.align-right, .formatted video.align-right, .formatted .ce-element--type-image.align-right, .formatted .ce-element--type-video.align-right, .formatted [data-ce-tag=img].align-right {\n    clear: initial;\n    float: right;\n    margin-left: 20px;\n    margin-top: 12px;\n}\n.formatted img.align-left, .formatted iframe.align-left, .formatted video.align-left, .formatted .ce-element--type-image.align-left, .formatted .ce-element--type-video.align-left, .formatted [data-ce-tag=img].align-left {\n    clear: initial;\n    float: left;\n    margin-right: 20px;\n    margin-top: 12px;\n}\nI have another question, Am I allowed to copy your CSS? Thank you so much.\n. ",
    "jpodwys": "Thank you for your response!. ",
    "ruslanmedia": "Can I commit uzbek language to your project?. ",
    "fxi": "Note for future self or maybe webpack user : \nIf you build your project with webpack, adding a new tool (like blockquote) is easy. \nI did not find a way of rebuilding the icons file, but I'm already using fontawesome, so that's it.\nI have no idea if this is a  \"good way\" of doing it, but it works.\nBuild config\n\nInstall coffee-loader  : npm install coffee-loader --save-dev\nIn the webpack file, set the loader to run when importing coffee files:\njavascript\n{\n    test: /\\.coffee$/,\n    use: 'coffee-loader'  \n}\n\nFile\nWrite this into extend_content_tools.coffee\n```javascript\nclass ContentTools.Tools.Blockquote extends ContentTools.Tools.Heading\n# Convert the current text block to a blockquote (e.g <blockquote>foo</blockquote>)\n\nContentTools.ToolShelf.stow(@, 'blockquote')\n\n@label = 'Blockquote'\n@icon = 'blockquote'\n@tagName = 'blockquote'\n\n```\nSet css\ncss\n.ct-tool--blockquote::before {\n    font-family: fontawesome;\n    content: '\\f10e'; /* double quote icon */\n}\nImport ContentTools and extension (asynchronously)\n```javascript\nvar ContentTools;\nimport('ContentTools').then(function(ct) {\nContentTools = ct;\n  return import(\"./extend_content_tools.coffee\");\n}).then(function() {\nContentTools.DEFAULT_TOOLS[0].push(\"blockquote\");\n/*\n   *  Your script\n   /\n})\n```\nResult\n\n. ",
    "hamzaw": "Hi @anthonyjb \nSorry - yes, you cannot select the text or edit it.  When you click on the text it just clicks the button.\nOn Chrome and Safari when you click the button you can select the text and edit it.. Any update on this please?. ",
    "kallekanin": "I run this: console.log(file); and that gives me a JSON, but that JSON is not valid (tested in JSONLint).\nMy browser point out this line for the error:  response = JSON.parse(ev.target.responseText);. file uploaded to server, but i still get: SyntaxError: JSON.parse: unexpected end of data at line 1 column 1 of the JSON data.. Seams like the JSON format from the callback is formated wrong, even tho the file is uploaded to the server, it wount return valid JSON.\nSelect image -> upload to server -> error -> image is not visible in the frame. . The image are uploaded but it wont show in the editing window (added screenshot)\nJS code that trigger uploadscript:\n$.getJSON('save.php', 'test', function(e){\n    console.log(e);\n});\nsave.php:\n<?php\n    move_uploaded_file($_FILES['image']['tmp_name'],\"images/\".$_FILES['image']['name']);\n?>\n\nGives me this message in browser: SyntaxError: JSON.parse: unexpected end of data at line 1 column 1 of the JSON data (  editor.js:128:28 )\n. ",
    "tofsjonas": "That was the information I was looking for. I didn't realize it was for lists only.\nThank you for taking the time to answer. :-). ",
    "aplblpsil": "Hi @anthonyjb and thanks for your answer, \nUnfortunetly the solution given doesn't work for me, I have the same behaviour... \nMethod apply here : \n```\nEditAsHtml.apply = function(element, selection, callback) {\n                  var className, toolDetail, _i, _len, _ref, $container, containerDOM, content, html;\n                  toolDetail = {\n                    'tool': this,\n                    'element': element,\n                    'selection': selection\n                  };\n              $container = $('.content.target-animation-content-txt');\n\n              if (!this.dispatchEditorEvent('tool-apply', toolDetail)) {\n                return;\n              }\n              if ((_ref = element.type()) === 'ListItemText' || _ref === 'TableCellText') {\n                element = element.parent();\n              }\n              if(this.isApplied(element, selection)){\n                // Sync the changes with the ContentEdit.Element\n                content = that.ctCodeMirror.getValue();\n                $container.empty().append(content);\n                that.ctCodeMirror = null;\n                element._syncContent();\n              }else{\n                // $element = $(element._domElement); \n                containerDOM = $container.get().shift();\n                html = $container.html();\n                $container.empty();\n\n                that.ctCodeMirror = CodeMirror(containerDOM, {\n                  value: html,\n                  mode:  \"htmlmixed\"\n                });\n\n                CodeMirror.commands[\"selectAll\"](that.ctCodeMirror);\n                that.ctCodeMirror.autoFormatRange(that.ctCodeMirror.getCursor(true), that.ctCodeMirror.getCursor(false));\n                that.ctCodeMirror.on('change', function(){\n                    // Sync the changes with the ContentEdit.Element\n                    element._syncContent();\n                });\n\n              }                  \n              callback(true);\n              return this.dispatchEditorEvent('tool-applied', toolDetail);\n            };\n\n```\nThank you again for your help.. ",
    "DataCourier": "Just checked out the demo and found two minor issue: upload dialog can't be closed, or used whatsoever, but maybe thats the demo's issue (video dialog didn't have such issue).\nNot sure if I need the footer at all, otherwise this is AMAZING! Being able to use such a powerful content editor from my phone is insane.\n. ",
    "b2550": "I also need to be able to apply styles to container elements so being able to set the base level to the primary [data-editable] container. Right now I have no way to effectively make colored containers (I would also like image-based backgrounds but that probably would require a new tool). . ",
    "Draio": "Thank you!. Just to let you know ... or for someone else who has the same problem.\nThe .img-border-ext class show a single 1 pixel border to 3 pixels from the image.\nRemoving the padding and changing the width make only a big border (4px).\nI added \"background-clip: content-box\" that move the background to the content area of the div .\nSo now I have a class that works both with img and div ... and seems almost  (almost)  equal in normal or edit mode. It's not perfect but it works.\n.img-border-ext {\n  border: solid ;\n  border-width: 1px;\n  padding: 3px;\n  background-clip: content-box;\n}\nhttps://jsfiddle.net/draio/2b277whx/\n. ",
    "wintermute-84": "Hi, I was doing a prototyping of a tool, and I actually used part of your code mixed with demo to make the uploader.\nI will post the whole file, may be it will help you somehow.\nJust remember that it's just that - a quick prototype to test the backend api.\neditor.js.txt\n. ",
    "rohitcoder": "After Selecting Crop area whenever am pressing enter am getting this error in my console\n\n\n. After Selecting Crop Area and pressing insert button its not showing any error in console but it also not cropping images in final preview (after insert). I can do that in server side only after getting Correct Crop Output Right Now whenever am trying to get Current Crop data it always giving me this as output [0, 0, 1, 1] So, can you suggest me final way. how can i get updated crop details so that i can crop it on server side.. 138 to 176 Lines are edited by me (Rotate Functions because this was also not working with crop feature) but i managed it but now only crop is not working.\nThis is my JS Code : https://pastebin.com/WRDG892r \nFlow of Image is something like this\n\nUser Selects Image > Image is transferred to internal_process.php > this php file upload imgae to cloudinary and then it returns back the file url to CT. . ",
    "geonanorch": "OK, thank you @anthonyjb . Leaving the issue open for the long-term solution ;-). ",
    "capr": "Thanks for the response and for considering adding those events. \nThe reason I add/remove the highlight class by hand is because highlightRegions() doesn't also highlight the fixtures.. ",
    "tabuna": "Thanks, I'll let you know if I have any new questions. ",
    "wasinator": "Thank you very much for your advice and for sharing your work. I will try it. Thanks again. :-). I have look into the code of the image fixture as you suggested. So I changed a approach a bit and tried to imitate the image fixture by using the pre element and mounting it to a blockquote element on the DOM. However, when I commit the change the dom won't be replace by a blockquote element even though the mount method has run. I can't figure out what was missing. Here are my code ...\nFirst, I create a new class named PreQuote by inheriting from the Pretext class.\n` ContentEdit.PreQuote = (function(_super) {\n    __extends(PreQuote, _super);\nfunction PreQuote(tagName, attributes, content) {\n  if (content instanceof HTMLString.String) {\n    this.content = content;\n  } else {\n    this.content = new HTMLString.String(content, true);\n  }\n  ContentEdit.Element.call(this, tagName, attributes);\n}\n\nPreQuote.prototype.cssTypeName = function() {\n  return 'pre-quote';\n};\n\nPreQuote.prototype.type = function() {\n  return 'PreQuote';\n};\n\nPreQuote.prototype.typeName = function() {\n  return 'PreQuote';\n};\n\nPreQuote.prototype.mount = function() {\n  var quoteTag, text,\n      content = this.content.text(),\n      classes = '';\n\n  text = document.createTextNode(content); \n  quoteTag = document.createElement(\"blockquote\");\n  quoteTag.appendChild(text);\n\n  this._domElement = quoteTag;\n\n  if (this._attributes['class']) {\n    classes += ' ' + this._attributes['class'];\n  }\n  this._domElement.setAttribute('class', classes);\n  console.log(this._domElement);\n\n  return PreQuote.__super__.mount.call(this);\n};\n\nPreQuote.prototype.unmount = function() {\n  var domElement, wrapper;\n  if (this.isFixed()) {\n    wrapper = document.createElement('div');\n    wrapper.innerHTML = this.html();\n    domElement = wrapper.querySelector('pre');\n    this._domElement.parentNode.replaceChild(domElement, this._domElement);\n    this._domElement = domElement;\n  }\n  return PreQuote.__super__.unmount.call(this);\n};\n\nreturn PreQuote;\n\n})(ContentEdit.PreText);\nContentEdit.TagNames.get().register(ContentEdit.PreQuote, 'pre');\nThen, I create a new tool named Quote that adds a Prequote element  ContentTools.Tools.Quote = (function(_super) {\n    __extends(Quote, _super);\nfunction Quote() {\n  return Quote.__super__.constructor.apply(this, arguments);\n}\n\nContentTools.ToolShelf.stow(Quote, 'quote');\n\nQuote.label = 'Quote';\n\nQuote.icon = 'quote';\n\nQuote.tagName = 'pre';\n\nQuote.canApply = function(element, selection) {\n  if (element.hasCSSClass('ce-edit-only')) return false; \n  if (element.isFixed()) {\n    return false;\n  }\n  return element.content !== void 0 && ['p', 'pre'].indexOf(element.tagName()) !== -1;\n};\n\nQuote.isApplied = function(element, selection) {\n  if (!element.content) {\n    return false;\n  }\n  if (['Text', 'PreText'].indexOf(element.type()) === -1) {\n    return false;\n  }\n  return element.tagName() === this.tagName;\n};\n\nQuote.apply = function(element, selection, callback) {\n  var toolDetail = {\n    'tool': this,\n    'element': element,\n    'selection': selection\n  };\n  var insertAt, text, preText, parent;\n\n  if (!this.dispatchEditorEvent('tool-apply', toolDetail)) {\n    return; }\n\n  if (element.type() === 'PreText') {\n    ContentTools.Tools.Paragraph.apply(element, selection, callback);\n    return; }\n\n  text = element.content.text();\n  preText = new ContentEdit.PreQuote('pre', { 'class': 'quote' }, HTMLString.String.encode(text));\n  parent = element.parent();\n  insertAt = parent.children.indexOf(element);\n  parent.detach(element);\n  parent.attach(preText, insertAt);\n  element.blur();\n  preText.focus();\n  preText.selection(selection);\n\n  // console.log(toolDetail);\n  callback(true);\n  return this.dispatchEditorEvent('tool-applied', toolDetail);\n};\n\nreturn Quote;\n\n})(ContentTools.Tool);\n`\nNOTE: I also disable the default PrFormatted tool when I try running the code. The new tool works fine, but as I mentioned the element won't mount as I expected it to when I commit the change.\n. ",
    "SamWillson": "I didn't use TagFilter but yes the approach I took was the same as you said. In fact I handled the rendering at the client side using jQuery. I let user add a CSS class using ContentTools and then when the page is actually rendered I replaced all instances of the image with a card template.\nI guess this is the only way to implement it so I am also closing this issue.. ",
    "darksnake747": "Hey Anthony. I love this tool set. Great work! And I see you closed this, but following your instructions, I cannot seem to get tables, rows, lists, or paragraphs to work like that with drag and drop. Would be great... but all I can get to do that are images. Any thuoghts why?. Awesome! Thanks a lot Anthony.. @anthonyjb thank you very much for the reply and so much information. I really appreciate you sharing your thoughts and these details. I am using CT in a larger project of mine to simply allow minor edits to select page content. It is a vital piece to the project as a whole, but really small in scale. CT won my vote over other RTEs that I've used (not that I consider CT a typical RTE) for a lot of reasons and the \"lacking\" features aren't really too lacking. I just thought if you were actively looking for thoughts on things that could be added, I'd love to see some things... but with them missing, it's not big deal - for now at least. ContentFlow seems like it could be a pretty nice additional toolset, so maybe I'll look into that some. And the data-ce-movable is a great pointer, I must have missed that or something because I don't remember seeing it when I was making my mods and definitely would have solved some problems I was having.\nThat said, honestly, given my current work load and timeline, I'm probably just going to leave things as they are for now. Perhaps after I get things moving better, I can dive in and make some mods of my own, but until then, I can certainly make due with it as is.\nI will however be looking at the icon code... mostly because I am curious. Thanks again!\nI also want to thank you, @cubiclesoft, for your input on this. I did have to take some time to really dig into the code when I started my mods and had gotten comfortable enough to be dangerous pretty quickly. But, I want to be efficient and skilled, not dangerous; that would have taken a lot more time. I'll be looking at the TagFilter project as well to see if it is anything I could make use of given my current situation. Thanks again!. First, to start, I want to point out that ContentTools states that the editor does not work well on mobile devices. More importantly, at least from my observations, it doesn't have native support for responsive displays. Nor does it have native support for Bootstrap, which I am assuming you are using based on that class name. That said, you can achieve this on your own; in fact, it is how I use it. I don't have mobile support for the edit mode completely perfect, but that is an issue of screen real estate and not something I care to fix.\nBecause of all that, when the content switches to edit mode and your img tags become divs, the Bootstrap CSS no longer applies - that is really why the responsive images aren't working. You should be able to add some CSS to the editor pages that appies the Bootstrap CSS from img.img-responsive, which is: { display: block; max-width: 100%; height: auto; } to the divs. Try this:\ncss\n.ce-element--type-image.img-responsive { display: block; max-width: 100%; height: auto; }\nYou could be having another problem though. Does the div in edit mode have the img-responsive class on it? If not, the easiest way to handle that will be to add a supported style for it, like this:\njavascript\nContentTools.StylePalette.add([\n    new ContentTools.Style('Responsive', 'img-responsive', ['img']),\n]);\nPersonally, I inject that class on my images when they get inserted. That's done like this:\njavascript\ndialog.addEventListener('imageuploader.save', function () {\n    // ... do stuff here ...\n    dialog.save(image.url, [width, height], {\n        'class': 'img-responsive',\n        //... other image settings ...\n    });\n});\nMoving forward, if these things happen, just keep in mind that by wanting to use the ContentTools editor with Bootstrap and a responsive display, you will have to manually add support for it like this.\nI hope this helps you. Let us know if you get the problem resolved.. ",
    "kilobyte2007": "Did you solve this? Is there a way of replacing the current image?. I actually came up with the following solution. Maybe someone has thoughts why this isn't exactly good?\nInside the ImageUploader.prototype._onSave I put this:\n```\n    let imageSrc = imageUrl + '?' + Math.random()\n    let focused = ContentEdit.Root.get().focused()\n    let oldAttributes = {}\n    for (let key in focused._attributes) {\n      oldAttributes[key] = focused._attributes[key]\n    }\n    delete oldAttributes['src']\n    delete oldAttributes['srcset']\nthis._dialog.save(imageSrc, imageSize)\n\nif (focused.type() === 'Image') {\n  focused.parent().detach(focused);\n  setTimeout(() => {\n    let newFocused = ContentEdit.Root.get().focused()\n\n    for (let key in oldAttributes) {\n      newFocused._attributes[key] = oldAttributes[key]\n    }\n    if (!oldAttributes.width) {\n      delete newFocused._attributes['width']\n    }\n    if (!oldAttributes.height) {\n      delete newFocused._attributes['height']\n    }\n  }, 10)\n}\n\n```. ",
    "igdamico": "Hi anthonyjb, thanks for the very fast answer.\nin demo works but it's not the same because i just had text with accents in my \"data-editable\" div before using the editor.. this is my html that works perfect without the editor.\nhttps://jsfiddle.net/0bac3nfb/. don't worry! i add in the header\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\" />\nand now it's working! \nthanks fo the advice!. ",
    "cmangen": "@anthonyjb Thank you very much for the explanation. This helps already a lot.. @anthonyjb Thank you very much for your answer. Yes, I want to insert an existing one.. ",
    "chang-zhao": "IMHO inline styling with a couple of buttons (color & background-color) with drop-down pickers isn't a very complex task (though we would need to handle cases when the selected-for-coloring range overlaps elements with already existing color attributes).\nBut then that solution might be not the most useful - perhaps you would like to have only several specific colors on your page. Then it would be useful to keep a page colors palette, and perhaps a site-wide palette, create custom-color classes for them, and add that functionality to color picker buttons.\nIt's not too complex to consider to implement; it could be a very nice and useful feature.. ",
    "graydwarf": "fwiw: I was also interested in having a color picker as well for changing\nfont colors.\nOn Mon, Jan 1, 2018 at 8:03 AM, Anthony Blackshaw notifications@github.com\nwrote:\n\n@cmangen https://github.com/cmangen I can certainly create this for you\nor help you integrate an existing colour picker if that's your preference\n(email me at ant[at]getme.co.uk), however, if you're considering\nimplementing this yourself (especially if you're going to use an existing\n3rd-party colour picker component) it shouldn't be difficult.\nThere are several other developers who've created color picking tools for\nContentTools as part of their editing environment (@bfintal\nhttps://github.com/bfintal certainly has), and they may well be willing\nto share some code here to help you get started.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/GetmeUK/ContentTools/issues/466#issuecomment-354660784,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AFx-QygF7hEsAQ0X4Ydzg4RVOGpZ00mEks5tGQGzgaJpZM4RONeX\n.\n. \n",
    "STPJ": "Is this was implemented somewhere?. ",
    "babenkoma": "Thank you. For editing, this works. But if I press Enter, a new line \"p\" appears, not \"span\"\n  . <div><span data-fixture data-name=\"text\" data-ce-tag=\"p\">Text</span></div>\nThank you! That's what I need!\n  . ",
    "way5": "HI @anthonyjb! Just as an example:\nvar editor = ContentTools.EditorApp.get();\neditor.editor.addEventListener('saved', function(ev) {\n   ev.detail().regions.regionName.trigger('change');\n});\nIt would be perfect to somehow figure out this functionality via code...\n. ",
    "scmccoy": "Hi Anthony, \nI just had a chance to test a little more - my current work around is checking in _preventEmptyRegions function if the children length is greater than or equal to 1.  (around line 8855)\nplaceholder = this.createPlaceholderElement(region);\n        if(region._domElement.children.length >= 1) {\n          // do nothing\n        } else {\n          region.attach(placeholder);\n        }\n        _results.push(region._modified = lastModified);\nOn the second run of the function the length is 2 and skips the region.attach(placeholder). \nThoughts? I am not sure how this may affect other areas. \nThank you for your time,\nShane M.. You could save your attributes right before you change/update the link. \nI don't have that tool in my repo but from what I can see, in Link.apply function add all your attributes into an array:\n  attrs = Array.prototype.slice.call(element._domElement.attributes)\n\nThen at the end of the function before return, add them back to the element: \n   for(let i = 0; i < attrs.length; i++) {\n    element._domElement.setAttribute(attrs[i].name, attrs[i].value);\n  }\n\nThis isn't tested w/ the Link function but might be a work around for now. You can add as coffeescript in tools.coffee as well, it might look like this: (not 100%, coffee script is not familiar)\n   attrs = Array.prototype.slice.call(element._domElement.attributes)\n\nbefore return: \n    for i in attrs.length \n    element._domElement.setAttribute(attrs[i].name, attrs[i].value) .\n",
    "enesaltinkaya": "Oh wow, thanks a lot!\nThat was a waste of half hour but no matter.\nAgain thanks for your brilliant work.. ",
    "etal2": "There is no built-in support for raw html editing. Personally I added a tool which opens a dialog and integrated codemirror for html editing. It's part of a larger commercial project but I can separate out the relevant code if you want to use it.. Code uploaded to https://github.com/etal2/ContentTools-Codemirror. Added screenshot although it's just a text editor in a dialog box nothing fancy.. ",
    "bananenklops": "@etal2 thank you for your reply. I would like to view the code of your solution.. ",
    "ShalomR": "This sounds handy! Could I see a screen shot of how this looks in action by any chance? :D. Hi Mr. @anthonyjb ! Thanks for your help! That code snippet did the trick for the edge drop, and I resolved double paste problem--I had initiated two instances of the editor. \nI did figure out a simple way to do the inline editing. I'll post it here for others if they are interested. \nInline Tool Editor\n\nEssential CSS Changes: \n```\n.ct-widget .ct-tool-group {display:inline-block;} / inline toolbox /\n.ct-grip {display:none;} / hide the drag-grip /\n.ct-widget.ct-toolbox {position:static; width:100%;background: linear-gradient(#ffe5b4, #ffb847);border: 1px solid #f39c12;} / style toolbox as you wish /\n```\nIn the content-tools.js file make these changes:\n```\nAt line 1, Add this\nvar inlinetools_save;\nBelow this line\nthis.constructor.createDiv(['ct-widget', 'ct-toolbox']);\nAdd this\nthis._domElement.id = 'editor-toolbox';\ninlinetools_save = this._domElement;\nBelow this line (there 3 instances of this line, apply to all)\naddCSSClass('ce-element--focused');\nAdd this\nvar inlinetools = document.getElementById('editor-toolbox');\nif (inlinetools == null) {inlinetools = inlinetools_save;}\ndocument.getElementsByClassName(\"ce-element--focused\")[0].before(inlinetools);\n```\n. Very cool, auto-save is a good approach, I'll run with that.\nThe \"+\" tool is essentially just a tool to mimic what happens when you press \"enter\": a new element/paragraph is created. (Just to enhance user-friendly-ness.) \nWhether it's a tool added to the toolbox, or simply a button added after .ce-element--focused, not sure what the simplest approach would be. \nI think it would be mimicking the Text.prototype._keyReturn function, but ignoring the PREFER_LINE_BREAKS value? \n(By the way, did you write all this code yourself? Thanks for taking the time to reply!). ",
    "laurobecker": "Hi @anthonyjb! \nThanks for your fast answear!. BTW, if you have any idea of a workaround, I'd be very thankful!. Hi @scmccoy!\nI tried to prototype the apply method, but it doesnt seems to work. Take a look:\n```\n        var _superApply = ContentTools.Tools.Link.prototype.apply;\n        ContentTools.Tools.Link.prototype.apply = function(element, selection, callback) {\n          // Never get here...\n          var attrs = Array.prototype.slice.call(element._domElement.attributes)\n          var link = _superApply.call(this);\n          for(let i = 0; i < attrs.length; i++) {\n            element._domElement.setAttribute(attrs[i].name, attrs[i].value);\n          }\n      return link;\n    };\n\n```\nAny idea?\nThanks!. ",
    "chingkit": "Here is a Codepen example https://codepen.io/anon/pen/aYBYWK. ",
    "micahscopes": "I wrote some code that inserts a ContentEdit.Image at the current cursor position, the problem is that it gets deleted whenever I insert it into a table.  Any ideas?. ",
    "pppglowacki": "@Luc-cpl can you provide an example in JS how to add the images? I can then confirm I implemented it correctly and check if it works as expected.. ",
    "Luc-cpl": "Following the \"Handling image uploads\" tutorial.\n```\nfunction imageUploader(dialog) {\n    var image, xhr, xhrComplete, xhrProgress;\nvar myImages = [ '/image1.jpg', '/image2.jpg', '/image3;jpg', '/image4.jpg' ]; //or use any function that return an array with the urls\n\ndialog.addImages(myImages);\n\n// Set up the event handlers\n... event handlers go here ...\n\n}\nContentTools.IMAGE_UPLOADER = imageUploader;\n```\nAdd one if statement in save event:\n```\ndialog.addEventListener('imageuploader.save', function () {\n    if (!image){\n        dialog.save();\n        return;\n    }\n// Rest of code ....\n\n}\n```. ",
    "anhducbkhn": "yes thanks @anthonyjb . ",
    "developer-rakeshpaul": "Could you please try with mounted() instead of created(). ",
    "blocknotes": "Works. Thank you @anthonyjb . ",
    "cyclaero": "Setting ContentEdit.TRIM_WHITESPACE to false serves for my present needs, since with this in place, upon save of <p>The actual text.<br>&nbsp;</p> the line break and &nbsp; or &#8203; are not removed.\n<p>&nbsp;</p> still doesn't work, though.. I implemented the image garbage collection completely on the server side in C. Hence for me this is no issue anymore, and therefore I close this one.\nBest regards\nRolf. ",
    "PubliAlex": "Some of my clients reported the problem to not be able to insert spaces between paragraphs like they want.\nI can understand that contenttools would automatically remove empty paragraphs cause it's not semantically correct. But it should respect line break <br /> when customer do a shift + enter. ",
    "Chryogenic": "Looks like it was an issue with CSSNano using the same names for keyframes.\nSolved it by adding: reduceIdents: false . ",
    "Zhjoker": "I am a newbie, I want to ask how to save the state after the user changes.. ",
    "rutsch": "Hi Anthony,\nThanks for the quick repsonse. This makes sense indeed, changed the code in editor stopped event and thing work as expected. \nI somehow don't see any issues if i add more fixtures and don't use an ID, all seems to work fine?\nI have one other, table related, question. For my project, i need this 'nasty' structure inside table cells for styling purposes. Is it possible to have this structure created when i add a table through the toolbar?\nThanks in advance!!\nRutger. I think i should re-write my last question as follows:\nIn edit mode, is it possible to add a new nested HTML structure containing only Fixtures and init those Fixtures?\nI can create HTML on toolbarbutton click, but i cannot attach it to a region because it's not a ContentEdit element. \nI can replace the empty _domElement with the new HTML, and do a syncRegions() on the editor, but after pressing the save button, the HTML is gone again.\nAny help on this would be highly appreciated!\n. ",
    "nuggets": "Hi @anthonyjb,\nActually you can't see the bug via the sandbox demo because you need to save the image/link and then reload the page to get the infos saved back. \nI give you the steps again with small precisions added (and with an image) : \n\u2022 I add an image and then I add a link upon the image\n\u2022 I save the changes\n\u2022 I reload the page (impossible to simulate it in the sandbox, the datas are not saved in a DB)\n\u2022 I want to edit the link (the one set on the image) -> see and run the code below to simulate the step\n\u2022 I launch the edition mode of ContentTools\n\u2022 Impossible to edit the link or the image. When I clic on the image (to select the element) I am redirected trough the link\nThanks in advance for your feedbacks! \n<!doctype html>\n<html lang=\"fr\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>ContentTools test</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/ContentTools/1.6.10/content-tools.min.js\"></script>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/ContentTools/1.6.10/content-tools.min.css\">\n    <style>\n        /* Alignment styles for images, videos and iframes in editable regions */\n        /* Center (default) */\n        [data-editable] iframe,\n        [data-editable] image,\n        [data-editable] [data-ce-tag=img],\n        [data-editable] img,\n        [data-editable] video {\n            clear: both;\n            display: block;\n            margin-left: auto;\n            margin-right: auto;\n            max-width: 100%;\n        }\n        /* Left align */\n        [data-editable] .align-left {\n            clear: initial;\n            float: left;\n            margin-right: 0.5em;\n        }\n        /* Right align */\n        [data-editable].align-right {\n            clear: initial;\n            float: right;\n            margin-left: 0.5em;\n        }\n        /* Alignment styles for text in editable regions */\n        [data-editable] .text-center {\n            text-align: center;\n        }\n        [data-editable] .text-left {\n            text-align: left;\n        }\n        [data-editable] .text-right {\n            text-align: right;\n        }\n        /* Page styles */\n        body {\n            background: #111;\n        }\n        [data-editable] {\n            max-width: 960px;\n            margin: auto;\n            background: #FFF;\n        }\n        .\n    </style>\n</head>\n<body>\n<div data-editable>\n    <a href=\"https://www.google.fr\">\n        <img src=\"https://remijean.fr/asc/pacman.png\">\n    </a>\n</div>\n<script>\n    editor = ContentTools.EditorApp.get();\n    editor.init('*[data-editable]', 'data-name');\n</script>\n</body>\n</html>\nPS  : the problem persist with the 1.6.1 version. @anthonyjb thanks very much for you answer! Actually we have a filter in our code that remove the tags wich are not in our \"whitelist\" so the data-ce-tag=\"img\" was removed just before the saving. \nThanks again for your support, problem solved! ;). ",
    "anastasiauz": "Thank you @anthonyjb - I didn't include unindent tool and using P seemed to me more logical. With the ctrl key on delete I'll need to give instructions to clients who will use the app. With a button it would be more self-explainatory. But good to know the possibilities are there, out of the box! Thank you for answering so fast ). "
}