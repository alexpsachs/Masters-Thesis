{
    "mzabriskie": "Just published to npm. Enjoy!\n. @epeli this is what I had in mind as well. Only difference is that it would be data instead of body since axios is already using data as the post body property.\n. @nnarhinen @jimthedev #22 takes care of XHR file upload, but still need to handle file upload for node.js\n. Just a status update. I've looked into supporting file uploads with node.js. While it's not technically challenging, I'm trying to come up with a consistent API between node.js and the browser. While the browser uses FormData, node.js uses a Stream. For axios to be truly isomorphic it should allow using the same code in both environments.\n. @geddski you will need to specify the request method. If it's not specified it will default to GET.\n``` js\naxios({\n  url: 'http://requestb.in/ubgv1aub',\n  data: { test: true },\n  method: 'post'\n});\n// or\naxios.post('http://requestb.in/ubgv1aub', { test: true });\n``\n. @geddski actually it looks like something is broken. Requests against my local server worked. Trying RequestBin I am getting 0 bytes transferred (I assume you're seeing the same). I will take a look at it tonight.\n. @kentcdodds @geddski I just added theContent-Lengthparameter and it seems to have done the trick.\n. @kentcdodds @geddski I've fixed the issue withContent-Lengthnot being included. I did discover another issue (#9) while fixing this. So long as you are using JSON you will be unaffected.\n. @nickb1080 thanks for the PR. I wasn't aware of thebrowserfield in package.json.\n. @mathbruyen that's what I get for not having proper tests. Thanks for catching this for me. I will see what can be done.\n. @mathbruyen thanks again for helping catch this bug. This has been resolved (https://github.com/mzabriskie/axios/commit/1fa35ced3c086622807de0c808a797cfbff092cd) and the fix is available with version 0.3.0.\n. This issue was discovered while fixing #3.\n. @mathbruyen thank you for the pull requests!\n. @bitinn this is a great idea. I will see about tweaking the build to provide an option that excludes the polyfill.\n. @wmadden the next release will remove thees6-promisedependency all together. This will require you to either have an environment that natively offersPromise`, or polyfill it yourself. Will that work for your use case?\n. @jimthedev https support for node.js is planned for 0.4.0 release. I will have to do some research on self signed certs. Seems like a valid option.\n. @jimthedev I have added SSL support. I am not going to provide a flag for self signed certs. You can get around it by doing:\njs\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n. @jimthedev current is 0.3.1, SSL support will be on 0.4.0. I have a couple open issues that I will address before the next release. Probably by the end of the week.\n. Here's a couple approaches for the API that might work:\n``` js\n// 1) This style follows Angular's $http service\naxios.interceptors.push({\n  request: function (config) {},\n  requestError: function (rejection) {},\n  response: function (response) {},\n  responseError: function (rejection) {}\n});\n// 2) This style follows express middleware\naxios.interceptors.request.use(function (config) {}, function (rejection) {});\naxios.interceptors.response.use(function (config) {}, function (rejection) {});\n```\nThe first option has the benefit of familiarity for those coming from Angular. That said it is not enough to mimic an API based on familiarity, especially if it's not a good API. As @jmdobry mentioned offline, \"pushing stuff into some random array [is] kinda dumb\". I agree that arbitrarily pushing some config object onto an array is less than ideal.\nThe second option allows for simplicity by just passing in a function, and axios knowing if the function is to be used for request, or response. It is a little uglier to only specify a requestError handler for example, since you have to provide a null value for the request handler:\njs\naxios.interceptors.request.use(null, function (rejection) {});\nA third option could be to do a hybrid of the two. Expose an API that supports the second option, but under the hood it just creates what option one is doing. This would allow for both options to be supported.\n. Closed with #27 \n. @fraserxu how often do you need JSONP? I believe that JSONP is a hack compared to using CORS. I am reluctant to support this.\n. @jimthedev I actually touched on fetch last night in a talk I gave. I totally agree that JSONP is not the right approach compared to CORS.\n. I generally like the concept, however axios.all is just an alias for Promise.all. I don't want to deviate from the ES6 spec as it makes the API less predictable.\n. @jergason your code worked on my box using v0.10.26 of node.js and 0.4.0 of axios.\n. @jergason good catch. I can add the error handler. Not sure how the error fits in the reject either.\nA couple options:\n1. Add an error property to the response object\n2. Just provide the error object directly to reject\nIn either case you're going to have to check if an error exists:\n``` js\n// option 1\n.catch(function (res) {\n  if (!res.data && res.error) {\n    console.log('error', res.error);\n  } else {\n    console.log('it worked!');\n  }\n});\n// option 2\n.catch(function (res) {\n  if (res instanceof Error) {\n    console.log('error', res);\n  } else {\n    console.log('it worked!');\n  }\n});\n```\n. I keep stewing on this, but still don't love either option, and haven't come up with anything else better. Stay tuned...\n. @jmdobry request's API doesn't apply to axios, since request is using a single callback to handle success/error. Versus using then/catch a la Promises. Also Promises limit then/catch to a single argument, so whether I like request's API or not, it can't be done the same way with axios.\nI think I like just rejecting with the Error:\njs\n.catch(function (res) {\n  if (res instanceof Error) {\n    console.log(res.message);\n  } else {\n    console.log(res.status, res.data);\n  }\n});\n. Actually it looks like a PR introduced this pattern already:\nhttps://github.com/mzabriskie/axios/blob/master/lib/adapters/http.js#L35\nAnyone have any heartburn over leaving it this way? I'd prefer not to change an API that people may already depend on in order to resolve this issue.\n. Yes @kentcdodds sums up the approach correctly.\njs\n.catch(function (res) {\n  if (res instanceof Error) {\n    // In this case a request was never sent to the server\n    // Something happened in setting up the request that triggered an Error\n  } else {\n    // Here the request was made, but the server responded with a status code\n    // that falls out of the range of 2xx\n    // You will have the full response details available\n    console.log(res.data); // The data that the server responded with\n    console.log(res.headers); // The response headers from the server\n    console.log(res.status); // The response status code\n    console.log(res.config); // The config that was used to make the request\n  }\n});\n. Thanks everyone for the dialog. I made the change as discussed and it is now on npm.\n. Can you give me an example of what you're trying to do with async transforms?\n. @nickdima I think that interceptors are probably what you are looking for. I have supporting interceptors on the road map (see #14).\n. @kentcdodds yes, this is when you would want interceptors. Based on the Angular spec they are designed to handle async operations. Transformers are for mutating request/response data (JSON.stringify, JSON.parse, etc.), and for modifying headers. Interceptors are for any kind of pre processing on requests, and post processing on responses, either synchronously or asynchronously. With an interceptor you have access to the full config for the request, not just data, and headers as with transformers. This allows for global error handling, timing requests, authentication, session restoration, etc. In your case you could asynchronously fetch data from the server before the request was sent, then modify the data being sent in the original request with the response of the nested request.\n. This is a duplicate and will be resolved with #14 \n. Would you mind sharing a Plunker with an example of your code?\n. There is a responseType property in the config, but it only works in the browser at the moment. I think we could just leverage the same property and implement it for node.js.\n. @nickdima sorry I've totally neglected your issue. Yes, please submit a PR.\n. I believe that this has been solved. See current http implementation https://github.com/mzabriskie/axios/blob/master/lib/adapters/http.js#L93-L96\n. pong @epeli\n. @epeli sorry for the delayed response. I really like the concept behind this. It would be great to have different instances with their own default config for use with various APIs within an application.\nI don't like the name createAxios. A few suggestions: create, factory, getInstance. Others?\n. I'm thinking about verbs used by popular frameworks.\nReact: create\nAngular: factory\nEmber: extend\nBackbone: extend\n. A different approach: http://jsbin.com/funumo/1/\nEdit: View the console\n. @epeli I agree it's ambiguous. Just throwing out any random ideas that I think of.\n. @epeli all right, I've taken long enough to give you a response. I say let's go with create. I like the use cases you've presented, and I think it's worth addressing.\n. @epeli sounds good.\n. @nnarhinen sorry for the delay, I have been overloaded lately. Your PR looks good.\n. This is available with version 0.4.2\n. @powmedia there was a bug #53 that was causing this to be necessary. It is no longer needed.\n. It's a great idea, though not at the top of my list for the roadmap. Would welcome a PR if you want to take a stab at it.\n. @jimthedev thanks for the tip. I'll take a look at it.\n. @jimthedev @OliverJAsh I think I would recommend keeping this functionality out of axios. I want to keep the bloat down as much as possible from the core. Minified pako is 44k vs axios minified is 15k. Should be able to easily create an interceptor to inflate/deflate requests as needed.\n. @ane thanks for filing the issue, and for the detailed explanation. I will take a look at getting it fixed.\n. Fixed with #30 \n. This is resolved with version 0.4.2\n. The only thing that I am not sure about is the hierarchy of the API:\njs\naxios.request.interceptors = [];\naxios.response.interceptors = [];\nHow would you feel about reordering so that interceptors is the top level?\njs\naxios.interceptors.request = [];\naxios.interceptors.response = [];\n. Certainly sounds like a bug. Probably a problem with the webpack config. I'll take a look at it.\n. This is resolved with version 0.4.2\n. @torarnek thanks for the PR. I will release this evening.\n. This is available with version 0.4.2\n. This is available with version 0.4.2\n. @jtmarmon I'm not sure where this PR is at with all the back and forth. In either case let me explain my stance. It is not the libraries job to throw based on status code. I actually wish that I hadn't gone with rejecting based on status code. I would rather resolve if the request was successfully sent and a response received, regardless of status. Then reject only if the request erred out entirely (e.g., no network connection).\nI can see the value in having a stack trace for debugging. To that end I would prefer to keep some backwards compatibility on this. Why not create an Error then add the stack to the response?\njs\naxios.get('/user/12345')\n  .catch(function (response) {\n    if (response instanceof Error) {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', response.message);\n    } else {\n      // The request was made, but the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(response.stack);\n    }\n  });\nBasically just the inverse of what you've done, but backwards compatible.\n. @jtmarmon I'm not sure where this PR is at with all the back and forth. In either case let me explain my stance. It is not the libraries job to throw based on status code. I actually wish that I hadn't gone with rejecting based on status code. I would rather resolve if the request was successfully sent and a response received, regardless of status. Then reject only if the request erred out entirely (e.g., no network connection).\nI can see the value in having a stack trace for debugging. To that end I would prefer to keep some backwards compatibility on this. Why not create an Error then add the stack to the response?\njs\naxios.get('/user/12345')\n  .catch(function (response) {\n    if (response instanceof Error) {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', response.message);\n    } else {\n      // The request was made, but the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(response.stack);\n    }\n  });\nBasically just the inverse of what you've done, but backwards compatible.\n. @jtmarmon I guess I'm missing something. You aren't throwing any errors in your PR. So I don't see how it would be any different. How is having the BadStatusCodeError have the response object any better than the response having the error stack?\nLet's back up and forget about implementation. Explain to me the use case that you are trying to solve.\n. @jtmarmon I guess I'm missing something. You aren't throwing any errors in your PR. So I don't see how it would be any different. How is having the BadStatusCodeError have the response object any better than the response having the error stack?\nLet's back up and forget about implementation. Explain to me the use case that you are trying to solve.\n. axios now rejects with an Error for all bad requests as well as runtime errors. I believe that this will resolve this use case.\n. axios now rejects with an Error for all bad requests as well as runtime errors. I believe that this will resolve this use case.\n. I'm reluctant to implement this. The ES6 Promise spec doesn't support finally, and I want to be able to drop the polyfill when browsers have native support.\nIf you feel strongly, or if I'm missing something, please present your argument.\n. I'm reluctant to implement this. The ES6 Promise spec doesn't support finally, and I want to be able to drop the polyfill when browsers have native support.\nIf you feel strongly, or if I'm missing something, please present your argument.\n. @bebraw yes exactly. The es6-promise polyfill uses the native Promise if it exists. In either case the finally shim will work as you indicated. Let's leave it out of axios and let others add it to their own project if they desire.\nI am working on axios today. I can add some documentation about this to the README.\n. @bebraw yes exactly. The es6-promise polyfill uses the native Promise if it exists. In either case the finally shim will work as you indicated. Let's leave it out of axios and let others add it to their own project if they desire.\nI am working on axios today. I can add some documentation about this to the README.\n. @jmdobry thanks for the PR. I'm not going to implement this in the axios core. By using something like https://www.npmjs.com/package/promise.prototype.finally, you can easily add finally shim to your project if you'd like.\n. @jmdobry thanks for the PR. I'm not going to implement this in the axios core. By using something like https://www.npmjs.com/package/promise.prototype.finally, you can easily add finally shim to your project if you'd like.\n. @RobinBressan I'm not familiar with almond. I'll have to do some research to see what's going on.\n. @RobinBressan I'm not familiar with almond. I'll have to do some research to see what's going on.\n. @RobinBressan sounds good. I would recommend using CommonJS with webpack, or browserify, over AMD anyway.\n. @RobinBressan sounds good. I would recommend using CommonJS with webpack, or browserify, over AMD anyway.\n. I'm waiting on a PR I made to karma-jasmine so that I can test this. I currently cannot test response, only responseText. The latest release for jasmine-ajax supports what is needed. As soon as I can get some testing in place I will release a new version including this PR.\n. I'm waiting on a PR I made to karma-jasmine so that I can test this. I currently cannot test response, only responseText. The latest release for jasmine-ajax supports what is needed. As soon as I can get some testing in place I will release a new version including this PR.\n. @vkurchatkin Would you mind providing example code so that I know how to reproduce this?\n. @vkurchatkin Would you mind providing example code so that I know how to reproduce this?\n. Thanks. I'll give this a look.\n. Thanks. I'll give this a look.\n. @vkurchatkin thank you for your diff. I will apply this and write some tests around it.\n. @vkurchatkin thank you for your diff. I will apply this and write some tests around it.\n. @jmdobry is right, you would have to add a generic interceptor, then check config.url to see if it matches what you are looking for.\nIf you are just doing this for caching, I have caching on the roadmap for axios. Should be ready soon.\n. @jmdobry is right, you would have to add a generic interceptor, then check config.url to see if it matches what you are looking for.\nIf you are just doing this for caching, I have caching on the roadmap for axios. Should be ready soon.\n. Is this to accommodate a test scenario?\n. Is this to accommodate a test scenario?\n. With version 0.6.0 you will be able to specify a custom adapter, which facilitates testing. There will also be built in caching of GET requests.\nThere's also this neat lib that is inspired by pretender that you could use https://github.com/aaronshaf/xhr-interceptor :)\n. With version 0.6.0 you will be able to specify a custom adapter, which facilitates testing. There will also be built in caching of GET requests.\nThere's also this neat lib that is inspired by pretender that you could use https://github.com/aaronshaf/xhr-interceptor :)\n. @resistdesign functionality didn't make the cut for 0.6.0. Will work on this for a future release.\n. @resistdesign functionality didn't make the cut for 0.6.0. Will work on this for a future release.\n. For anyone looking to address mocking for a test scenario I have created moxios.\n. For anyone looking to address mocking for a test scenario I have created moxios.\n. It's hard to make a change like this at this point. Where people expect it to catch on anything outside of the 2xx range. In retrospect, if the request was made, and a response received I would have preferred it to be considered a success. This would be a much less opinionated implementation, and much better IMO. I think the way to handle this now would be to pass a config option that specifies what range to catch on, defaulting with anything outside of 2xx.\n. It's hard to make a change like this at this point. Where people expect it to catch on anything outside of the 2xx range. In retrospect, if the request was made, and a response received I would have preferred it to be considered a success. This would be a much less opinionated implementation, and much better IMO. I think the way to handle this now would be to pass a config option that specifies what range to catch on, defaulting with anything outside of 2xx.\n. This has been added as a feature in 0.11.0 by use of validateStatus config option.\n. This has been added as a feature in 0.11.0 by use of validateStatus config option.\n. I am really frustrated with ES6 Promises. I was unfortunately unaware of the error swallowing behavior when I first started with axios, and thought that building on standardized, native Promises was the right thing. I am questioning that decision now.\nI have thought a lot about what should be done, and have ultimately concluded that axios itself won't do anything to try and solve the problem. Instead I will let consumers decide how they want to handle it. Long term, browser dev tools should report an error when the Promise is garbage collected.\nUntil then I personally would consider using a polyfill for done, such as https://www.promisejs.org/polyfills/promise-done-6.1.0.js. I think that it's cleaner than doing the setTimeout yourself.\n. I am really frustrated with ES6 Promises. I was unfortunately unaware of the error swallowing behavior when I first started with axios, and thought that building on standardized, native Promises was the right thing. I am questioning that decision now.\nI have thought a lot about what should be done, and have ultimately concluded that axios itself won't do anything to try and solve the problem. Instead I will let consumers decide how they want to handle it. Long term, browser dev tools should report an error when the Promise is garbage collected.\nUntil then I personally would consider using a polyfill for done, such as https://www.promisejs.org/polyfills/promise-done-6.1.0.js. I think that it's cleaner than doing the setTimeout yourself.\n. After a bit of poking around, it looks like a problem with the version of Jasmine that's being used. I will update the version being depended upon.\n. After a bit of poking around, it looks like a problem with the version of Jasmine that's being used. I will update the version being depended upon.\n. I've pushed the upgrade of Jasmine to master.\n. I've pushed the upgrade of Jasmine to master.\n. @torarnek why do you want to use your own Promise lib? The idea behind using es6-promise is that since it's just a poyfill, I can drop the dependency in the future once all browsers support it natively. In the mean time any browser that already supports native Promises will use the native implementation.\n. @torarnek why do you want to use your own Promise lib? The idea behind using es6-promise is that since it's just a poyfill, I can drop the dependency in the future once all browsers support it natively. In the mean time any browser that already supports native Promises will use the native implementation.\n. @hoppula axios is already using native Promise if it exists. If you're just trying to reduce the bytes, you can use dist/axios.standalone.js which doesn't bundle Promise.\n. @hoppula axios is already using native Promise if it exists. If you're just trying to reduce the bytes, you can use dist/axios.standalone.js which doesn't bundle Promise.\n. @pstoica sounds like a bug. Shouldn't be calling Promise.polyfill when standalone.\n. @pstoica sounds like a bug. Shouldn't be calling Promise.polyfill when standalone.\n. @pstoica standalone build is fixed with 0.5.1\n. @pstoica standalone build is fixed with 0.5.1\n. @kentor the files under dist/ are meant for either global <script src=\"axios/dist/axios.js\"></script> or for use with AMD require(['axios'], function (axios) {});.\nFor CJS there currently isn't an option, which is where I think this issue is stemming from.\nIf you want bluebird just to use finally I would recommend looking at this recipe.\n. @kentor the files under dist/ are meant for either global <script src=\"axios/dist/axios.js\"></script> or for use with AMD require(['axios'], function (axios) {});.\nFor CJS there currently isn't an option, which is where I think this issue is stemming from.\nIf you want bluebird just to use finally I would recommend looking at this recipe.\n. I have reworked the bundling to be UMD compatible. While this will allow requiring dist/axios.standalone.js using CJS I have a couple reservations about moving forward with this.\n1. UMD falls apart under specific conditions. Let's assume we're working in a legacy system, where everything is dumped onto global. In an effort to clean things up we introduce requirejs and start pulling in dependencies with AMD. In any sizable app this cannot be done overnight, so we have a migration strategy, and start converting things over time. As soon as requirejs is on the page any UMD module is immediately unavailable globally. So hypothetically if we wanted to keep axios global until all our project was migrated to AMD, then using UMD for axios just broke the app. The reason for this is that UMD does a test like if(typeof define === 'function' && define.amd). Even if we are loading our UMD module with a script tag, it's going to use the AMD loading strategy.\n2. In order to save bytes in the browser, everything under dist/ ignores the node code path. It is assumed that if you are using node you will just be doing var axios = require('axios'); and there will be no need for a bundled module as is needed in the browser. This means that even though UMD will support use with CJS, doing var axios = require('axios/dist/axios.standalone'); will try and use the XHR adapter, not HTTP as expected. So you're still stuck using the polyfilled Promise.\nI would prefer using UMD as it simplifies dist/, and greatly simplifies the build. At the same time I don't want to do it at the cost of introducing new headaches.\n. I have reworked the bundling to be UMD compatible. While this will allow requiring dist/axios.standalone.js using CJS I have a couple reservations about moving forward with this.\n1. UMD falls apart under specific conditions. Let's assume we're working in a legacy system, where everything is dumped onto global. In an effort to clean things up we introduce requirejs and start pulling in dependencies with AMD. In any sizable app this cannot be done overnight, so we have a migration strategy, and start converting things over time. As soon as requirejs is on the page any UMD module is immediately unavailable globally. So hypothetically if we wanted to keep axios global until all our project was migrated to AMD, then using UMD for axios just broke the app. The reason for this is that UMD does a test like if(typeof define === 'function' && define.amd). Even if we are loading our UMD module with a script tag, it's going to use the AMD loading strategy.\n2. In order to save bytes in the browser, everything under dist/ ignores the node code path. It is assumed that if you are using node you will just be doing var axios = require('axios'); and there will be no need for a bundled module as is needed in the browser. This means that even though UMD will support use with CJS, doing var axios = require('axios/dist/axios.standalone'); will try and use the XHR adapter, not HTTP as expected. So you're still stuck using the polyfilled Promise.\nI would prefer using UMD as it simplifies dist/, and greatly simplifies the build. At the same time I don't want to do it at the cost of introducing new headaches.\n. @nelix that would be preferable in a lot of ways. We could switch es6-promise to be a peerDependency, then it's readily available if needed.\nAnyone else have any opinions on this? It would not be backward compatible, which I'm okay with. This could be communicated with an upgrade guide. The biggest factor is just pushing off the Promise dependency management to the developer consuming axios. At the same time, it allows more flexibility.\n. @nelix that would be preferable in a lot of ways. We could switch es6-promise to be a peerDependency, then it's readily available if needed.\nAnyone else have any opinions on this? It would not be backward compatible, which I'm okay with. This could be communicated with an upgrade guide. The biggest factor is just pushing off the Promise dependency management to the developer consuming axios. At the same time, it allows more flexibility.\n. Once 0.6.0 has been released you will need to provide your own promise implementation.\n. Fixed with 0.5.1\n. Available in 0.5.2\n. Fixed with 0.5.1\n. @nicholasrobinson you say that using interceptors provides \"trivial cookie support\". What is missing for full support? Also, is there a case where you wouldn't want cookie support for node? Specifically, does there need to be an option, or just always manage cookies for requests with node?\n. I'm doing some research to determine if there is a standard.\n. I think that bracket notation is the correct implementation. It looks like rails, express, php, and java support it. My only hangup is if there should be an option for using one vs the other. This change won't be backward compatible for anyone depending on ?foo=bar&foo=baz.\n. I've been thinking and it may be better instead of just using a boolean flag, allow specifying a function for how to handle params. This would accommodate any variety of patterns: foo[]=bar&foo[]=baz, foo=bar&foo=baz, foo=bar,baz, etc.\nThere are a couple options for doing this.\n1. Allow developer to provide a buildUrl method in the config. This would replace the internal buildUrl method if supplied. This could be done per request, or set as the default axios.defaults.buildUrl = function (url, params) { ... };\n2. Allow providing a method that just builds out the params, which would be used by buildUrl. Something like axios.defaults.processParams = function (params) { ... }; This would allow re-using more of the core logic, but isn't as flexible.\n. Yeah, that's basically what I'm thinking. The thing I'm debating is that there's a bit of other logic in buildUrl that it may be nice to preserve. Specifically the encode function keeps the params looking nice.\nMaybe buildUrl could take encode as an argument. Then implementing your own buildUrl could still leverage this functionality. Let me play around with this a bit, and see what makes sense.\n. I have a branch that supports providing your own buildUrl, but I don't love it. Another alternative would be to support params as a string, then you could use qs, or whatever you want, to format params how your backend expects. See #72 \n. Sorry for the delay on this. A little background on the current implementation. The original version of axios was meant to provide an API directly compatible with Angular's $http service. The way that axios is sending Array params is how Angular is doing it.\nIn the time since, axios has diverged in several ways. I was initially pretty set on not breaking backwards compatibility, but after stewing on it, and seeing that most (all?) popular backends support [] for array params, I think it's best to just make a breaking change, and bump the version.\n. @maxhoffmann I would like to merge this. Can you make a couple quick changes?\nlib/helpers/buildUrl.js:12\nAdd the following lines at the end of the encode function:\njs\n  replace(/%5B/gi, '[').\n  replace(/%5D/gi, ']');\ntest/specs/helpers/buildUrl.spec.js:33\nChange the expect to the following:\njs\n  toEqual('/foo?foo[]=bar&foo[]=baz');\nThis will make the URLs look a bit nicer. Thanks!\n. @maxhoffmann sorry for the long delay on this. I just released 0.6.0 which includes your PR.\n. This is a common problem with using Promises. There is no way to return the XHR object from axios since the Promise is already being returned. I have had a lot of requests for this behavior though, and have given it a lot of thought. I actually had an idea last night that I want to play with. I will let you know if it pans out.\n. If you're interested in seeing my proposal, I have it in a Gist https://gist.github.com/mzabriskie/ec3a25dd45dfa0de92c2\n. TL;DR How should aborting a request be handled? Enter an error flow, or act as if request wasn't made (https://www.thenpoll.com/#/jbeyad)\nI have a working version of aborting requests ready to commit. Though I am debating a piece of the implementation. How should aborting a request be handled? Should it be treated as an error, or ignored completely as if the request hadn't even been made? I took a look at jQuery, and superagent to see how they are handling things, and found they are not unified in their approaches.\njQuery:\n``` js\nvar xhr = $.ajax({\n  url: 'https://api.github.com/users/mzabriskie',\n  success: function (data, status) {\n    console.log('success', status);\n  },\n  error: function (xhr, status) {\n    console.log('error', status);\n  },\n  complete: function (xhr, status) {\n    console.log('complete', status);\n  }\n});\nxhr.abort();\n// Logs 'error abort', 'complete abort'\n```\nsuperagent:\n``` js\nvar request = require('superagent');\nvar req = request\n  .get('https://api.github.com/users/mzabriskie')\n  .end(function (err, res) {\n    console.log(err);\n    console.log(res);\n  });\nreq.abort();\n// Nothing is logged\n```\nWhat I'm trying to decide is which approach to follow. I think that superagent has the right idea. Aborting a request should be the same as if it had never happened. It's not an error; it was explicitly canceled.\n. @pstoica what would you want to do with an aborted request?\n``` js\nfunction fetchListData() {\n  // Abort request already in-flight, in case user hits \"Refresh\" repeatedly\n  axios.abort('fetch-list-data');\naxios.get('/list/data', { requestId: 'fetch-list-data' })\n    .then(function (response) {\n      // Populate DOM with data, or whatever\n    })\n    .catch(function (response) {\n      if (response instanceof AbortedRequestError) {\n        // What would I even do with this?\n      } else {\n        // Handle 404, 500, et al, or some other Error\n      }\n    });\n}\ndocument.getElementById('refresh-list-data').onclick = fetchListData;\n``\n. @kentcdodds what do you gain by having an error flow? The only way that the request will get aborted is if you, as a developer explicitly abort itaxios.abort('some-id'). In which case, entering thecatchprovides no value. If you want to do something at the time a request is canceled, why not do it when you callaxios.abort`?\nFor me catch is what it says it is: a way to catch an error that you would have otherwise missed. This is where I would have logic for handling a request not reaching the server, or an error due to an improperly formatted request, etc.\nIn the example above, just move any \"error\" handling logic from the catch up to the line after axios.abort.\n. @kentcdodds :-)\nI had considered that, for the case of abstractions. The trouble comes with having to always check if the error was from aborting in every catch, even if you don't want that behavior. As you mentioned this could be handled by making it configurable, but that adds extra complexity within axios.\n. @thetalecrafter I don't see why a Promise never being settled is any different/worse than a callback not getting invoked. Would you mind elaborating?\n. @herrstucki the drawback to both of these approaches is that it would require you to pass around an object in order to abort a request. Where using an ID you only need to know what the ID is.\n``` js\nfunction uploadFile(file) {\n  var data = new FormData();\n  data.append('file', file);\n  axios.post('/upload', data, {\n    requestId: 'file-upload'\n  }).then(function (response) {\n    alert('File has been uploaded');\n  });\n}\nfunction cancelUpload() {\n  axios.abort('file-upload');\n}\n```\nThis doesn't look too bad, but assume the cancel function is in a cancelable loading type component from a separate file. You would have to pass the object around, vs using a constant.\nThat said, I prefer the API of the object with an abort method that you suggested.\n. @jergason in your use case, what would be causing the abort?\n. See conversation happening at #44 \n. Sounds like a bug. I will have to investigate.\n. This should be fixed with 0.5.4\n. Unfortunately this won't work, because it's not uncommon to include the non-minified file in your project, then run minification yourself on your whole project. In this case the inline sourcemap would remain intact.\n. I shouldn't say that it's common, but it's not unheard of. Might be worth putting up a poll on Twitter.\n. Well, there you go :)\n. For posterity's sake https://www.thenpoll.com/#/ujv4hx\n. Currently no option for this. But it would be a good feature.\n. This will be available when 0.6.0 is released.\n. This will be available when 0.6.0 is released.\n. I just released 0.6.0 which includes a fix for this.\n. I just released 0.6.0 which includes a fix for this.\n. What version did you update to/from? Also what does your require statement look like?\n. What version did you update to/from? Also what does your require statement look like?\n. @braco ping\n. @braco ping\n. Closing due to lack of response. If you have any further trouble feel free to re-open.\n. Closing due to lack of response. If you have any further trouble feel free to re-open.\n. What version are you using?\n. What version are you using?\n. So it looks like the payload is being sent, but the Accept, and Content-Type headers are different. Is your server ignoring the body since it's expecting a different header value?\n. So it looks like the payload is being sent, but the Accept, and Content-Type headers are different. Is your server ignoring the body since it's expecting a different header value?\n. @tony-kerz ping\n. @tony-kerz ping\n. Glad you got it figured out \ud83d\udc4d\n. Glad you got it figured out \ud83d\udc4d\n. This is an example using sinon and jasmine:\n``` js\ndescribe('jwt', function () {\n  beforeEach(function () {\n    this.xhr = sinon.useFakeXMLHttpRequest();\n    var requests = this.requests = [];\n    this.xhr.onCreate = function (xhr) {\n      requests.push(xhr);\n    }\n  });\nafterEach(function () {\n    this.xhr.restore();\n  });\nit('should have Authorization header', function (done) {\n    axios.interceptors.request.use(function (config) {\n      config.headers['Authorization'] = 'token';\n      return config;\n    });\naxios.get('/foo');\n\nvar requests = this.requests;\n\nsetTimeout(function () {\n  expect(requests.length).toEqual(1);\n  expect(requests[0].requestHeaders['Authorization']).toEqual('token');\n  done();\n}, 0);\n\n});\n});\n```\n. This is an example using sinon and jasmine:\n``` js\ndescribe('jwt', function () {\n  beforeEach(function () {\n    this.xhr = sinon.useFakeXMLHttpRequest();\n    var requests = this.requests = [];\n    this.xhr.onCreate = function (xhr) {\n      requests.push(xhr);\n    }\n  });\nafterEach(function () {\n    this.xhr.restore();\n  });\nit('should have Authorization header', function (done) {\n    axios.interceptors.request.use(function (config) {\n      config.headers['Authorization'] = 'token';\n      return config;\n    });\naxios.get('/foo');\n\nvar requests = this.requests;\n\nsetTimeout(function () {\n  expect(requests.length).toEqual(1);\n  expect(requests[0].requestHeaders['Authorization']).toEqual('token');\n  done();\n}, 0);\n\n});\n});\n``\n. Just noticed your edit. Yes,configis the equivalent of the request API. It is exactly what you passed into the second argument:axios.get('/some/url', { ... });, but with some additions such as defaults, etc.\n. Just noticed your edit. Yes,configis the equivalent of the request API. It is exactly what you passed into the second argument:axios.get('/some/url', { ... });`, but with some additions such as defaults, etc.\n. I should probably also mention, that you don't have to use an interceptor for modifying headers. You can use a transformer as well.\njs\naxios.get('/some/url', {\n  transformRequest: axios.defaults.transformRequest.concat(function (data, headers) {\n    headers['Authorization'] = token;\n  })\n});\nOr if you want to use the transformer on every request, not just a single request:\njs\naxios.defaults.transformRequest.push(function (data, headers) {\n  headers['Authorization'] = token;\n});\n. I should probably also mention, that you don't have to use an interceptor for modifying headers. You can use a transformer as well.\njs\naxios.get('/some/url', {\n  transformRequest: axios.defaults.transformRequest.concat(function (data, headers) {\n    headers['Authorization'] = token;\n  })\n});\nOr if you want to use the transformer on every request, not just a single request:\njs\naxios.defaults.transformRequest.push(function (data, headers) {\n  headers['Authorization'] = token;\n});\n. It is not currently possible to access the XHR instance.\n. It is not currently possible to access the XHR instance.\n. This would be solved with #82 \n. This would be solved with #82 \n. @flogball00 are you still having this problem?\n. @flogball00 are you still having this problem?\n. Odd. I'll have to look into jQuery's source, and see what's different.\n. Odd. I'll have to look into jQuery's source, and see what's different.\n. This is definitely not expected behavior. For those experiencing this, can you please provide a gist, or some example how to reproduce? Thanks.\n. This is definitely not expected behavior. For those experiencing this, can you please provide a gist, or some example how to reproduce? Thanks.\n. I just released 0.6.0 which includes a fix for this.\n. I just released 0.6.0 which includes a fix for this.\n. I would have to look to see where document is being used. But I think this could be accomplished.\n. I would have to look to see where document is being used. But I think this could be accomplished.\n. Looks like document is being used in two places:\n- lib/helpers/cookies.js\n- lib/helpers/urlIsSameOrigin.js\nWould need to find a way to make things work in the case where document doesn't exist.\n. Looks like document is being used in two places:\n- lib/helpers/cookies.js\n- lib/helpers/urlIsSameOrigin.js\nWould need to find a way to make things work in the case where document doesn't exist.\n. I would be more apt to support passing a string directly for params, then you can use whatever you like to build the query string yourself. I am trying to keep the library as minimalist as possible, but make it extensible to handle cases like this.\n. I would be more apt to support passing a string directly for params, then you can use whatever you like to build the query string yourself. I am trying to keep the library as minimalist as possible, but make it extensible to handle cases like this.\n. You can now use the paramsSerializer option to provide your own function for formatting params. This will allow you to use qs or any other library.\n. You can now use the paramsSerializer option to provide your own function for formatting params. This will allow you to use qs or any other library.\n. I have decided not to support JSONP as part of axios. You can see the conversation here #15. Also take a look at this recipe as an alternative.\n. I have decided not to support JSONP as part of axios. You can see the conversation here #15. Also take a look at this recipe as an alternative.\n. This is a good idea, and should be supported. Thanks for \"catching\" this :)\n. This is a good idea, and should be supported. Thanks for \"catching\" this :)\n. After consideration I don't think that this will work. If you have a pool of requests any request failing will result in a rejected Promise. The first failing request will be the culprit.\njs\nPromise.all([\n  Promise.reject(Error('foo')),\n  Promise.reject(Error('bar')),\n  Promise.reject(Error('baz'))\n]).then((results) => {\n  console.log(results)\n}, (error) => {\n  // Logs \"foo\" everytime\n  console.log(error.message)\n})\nSo ultimately you will not get an array of errors, just the first failing request.\n. After consideration I don't think that this will work. If you have a pool of requests any request failing will result in a rejected Promise. The first failing request will be the culprit.\njs\nPromise.all([\n  Promise.reject(Error('foo')),\n  Promise.reject(Error('bar')),\n  Promise.reject(Error('baz'))\n]).then((results) => {\n  console.log(results)\n}, (error) => {\n  // Logs \"foo\" everytime\n  console.log(error.message)\n})\nSo ultimately you will not get an array of errors, just the first failing request.\n. Between 0.4.2 and 0.5.0 I made some changes to axios' webpack config, but I don't see how that would affect your build. I am using axios with webpack on this repo, and not seeing any problems. Have you tried using babel-loader instead of jsx-loader?\n. Between 0.4.2 and 0.5.0 I made some changes to axios' webpack config, but I don't see how that would affect your build. I am using axios with webpack on this repo, and not seeing any problems. Have you tried using babel-loader instead of jsx-loader?\n. @laander there is no reason for lack of support. Sounds like something worth looking into.\n. @laander there is no reason for lack of support. Sounds like something worth looking into.\n. @laander you are correct. The code found under dist/ is deployed to bower, and intended for use in the browser. Safer to use index.js when using under node.js environment.\n. @laander you are correct. The code found under dist/ is deployed to bower, and intended for use in the browser. Safer to use index.js when using under node.js environment.\n. @laander I think you may be misusing dist/. This is meant to be used in the browser. It deliberately removes any code path used by node for that purpose. It supports CommonJS since some people may be using it with browserify, or webpack, but for node you should just be including var axios = require('axios'); or using ES6 import axios from 'axios';. This will work for node. If you are using dist/axios you will be getting a browser friendly version.\n. @laander I think you may be misusing dist/. This is meant to be used in the browser. It deliberately removes any code path used by node for that purpose. It supports CommonJS since some people may be using it with browserify, or webpack, but for node you should just be including var axios = require('axios'); or using ES6 import axios from 'axios';. This will work for node. If you are using dist/axios you will be getting a browser friendly version.\n. @paulwehner I was actually working on this over the weekend. Should hopefully have something soon.\n. @paulwehner I was actually working on this over the weekend. Should hopefully have something soon.\n. @nelix I have a working version. I am just debating a piece of the implementation. Should be released soon.\n. @paulwehner nothing has been released yet. I am very torn on the implementation. Looking at other possible solutions.\n. This is a duplicate of #50\n. axios.get only accepts two parameters (https://github.com/mzabriskie/axios#axiosgeturl-config). There is no option for passing the body as get requests have no body, whereas post requests do.\n. It's not necessarily a goal to be 100% API compatible with $http, at the same time, if it's easy enough to support I'm not against it.\nWould you mind elaborating a bit more on where the incompatibility lies? From your example, it looks like headers can be a function?\n. The headersGetter function is only used internally by Angular. This allows either getting the entire headers object passed in the config, or a specific header value by name (case insensitive).\nThe config itself expects an object of key/value pairs https://docs.angularjs.org/api/ng/service/$http#setting-http-headers.\n. @patrickliechty check out moxios for testing axios.\n. It is not the intention of axios to function exactly the same as $http. This lib was definitely inspired heavily by $http, but I am okay with it diverging from here. If there is a strong argument for a feature that you think would make sense in axios I am happy to discuss, but I am not interested in copying $http feature for feature.\n. Thanks for the PR. Unfortunately XMLHttpRequest doesn't exist in older versions of IE. Can you provide a solution that works for IE8?\n. Looks good. Thank you!\n. I'm working on getting a new release out soon.\n. @tomaash I just released 0.6.0 which includes your PR.\n. There was an issue with Content-Type having to be cased correctly (see #89). I just fixed it a few minutes ago. Maybe this was the same issue you were experiencing?\n. Thanks for the PR. Can you remove the dist/ folder. This should only be updated when releasing. Also, I think I would prefer module.exports = function axios, as opposed to using an anonymous function.\n. I think it makes more sense to use numbers so that you can do stuff like statusCode > 200. Long term it may be doing something like #41 where any request made to the server that receives a response will be treated as success. Only errors that can't reach the server will be treated as an error. It would be much more necessary in this case to allow something like statusCode >= 200 && statusCode < 300.\nShould be easy enough to just do String(statusCode).startsWith('2').\n. This is definitely an issue. I'll take a look at it.\n. Do you get an error message, or the request just doesn't get sent?\n. Thanks for the PR. I am hoping to get a release in the next few weeks. I'm swamped with a few other projects right now, so just trying to keep all the balls in the air as it were.\n. I just released 0.6.0 which includes your PR.\n. @deathmood would be happy to merge a PR for this.\n. Closing in favor of a single issue for all typescript requests (#379).\n. @Nthalk can you share an example of how this works, or point me to some Angular docs?\n. @skevy try rebasing. Also, let's call the flag xsrfEnabled, and default it to true.\n. @skevy I was just about to merge this, when I had a thought. Why do we need a config option? I think that axios should be smart enough to know when it is not in a browser environment, and gracefully skip the XSRF stuff itself. This would allow it to work in a web worker as well.\nBasically let's get rid of config.xsrfEnabled, keep your changes to lib/xhr.js, but test for typeof window !== 'undefined'.\n. @skevy would it matter if react-native is running in the browser? In that case it will try adding the xsrf cookie as a header to the request. But if the cookie doesn't exist, no harm done. The real problem is avoiding a reference to window.location or document.cookie when they don't exist. In debug mode they exist, and we're no worse for the wear.\n. I had @tylermcginnis do some testing for me. Here are the findings:\nwindow.location: {host: \"localhost:8081\"}\ndocument.cookie: \"\"\ndocument.createElement: null\nThese are the only browser specific references that axios is using for xsrf protection. I believe that if we test around these conditions, we can make axios work in react-native.\n. The es6-promise polyfill should use a native Promise implementation if it's available. In any case, the next release will remove the es6-promise dependency, and polyfilling will be left up to individual developers.\n. @dfournier I've been organizing a conference (React Rally) and it's taken all my time. The conference was last week, so I should have some more time to focus on open source projects once again.\n. I like that the URLs are better formatted with this approach. I am wondering how the server parses this? With the current implementation, albeit ugly, if you know a param is JSON, you can do something like this:\njs\nvar bar = JSON.parse(decodeURIComponent(\"%7B%22a%22:1,%22b%22:%22hello%22,%22c%22:[1,2,3]%7D\"));\n. Closed in favor of #121 \n. I agree this should be supported. Should work with process.env.http_proxy, and process.env.https_proxy. Would gladly accept a PR for this.\n. Documenting a Stack Overflow thread re: http_proxy with node's http module. http://stackoverflow.com/questions/3862813/how-can-i-use-an-http-proxy-with-node-js-http-client\n. You can now create instances of axios using axios.create which allows you to create interceptors per instance.\n``` js\naxios.interceptors.request.use((config) => {\n  config.foo = 123;\n});\nconst instance = axios.create();\ninstance.interceptors.request.use((config) => {\n  config.foo = 456;\n});\naxios.get('/foo'); // config.foo === 123 -> true\ninstance.get('/foo'); // config.foo === 456 -> true\n```\n. @richardgregory yes, it was done deliberately. Current implementation is a bit dumb. If response is a string, it tries to parse the response as JSON. If it fails, it is assumed that the response must not have been JSON, fails gracefully, and passes the string response along.\nSee #61 for a bit more color.\n. @krolow just barely merged it. Will be releasing a new version with fix soon.\n. What is the error that you are getting?\n. Why can't you just override Promise yourself in your app? That was the goal with removing the es6-promise dependency, it allows consumers of axios to manage the Promise implementation themselves without loading multiple libraries superfluously.\njs\nPromise = require('bluebird');\nvar axios = require('axios');\n. This has been addressed with #128. Just use responseType: 'arraybuffer', and you will get the buffer as the response data.\n. Sorry! Yes, I like this better too. Thanks for the help!\n. Sorry for the delayed response. I totally thought I had already replied.\nI really like this PR! This has been something that I've been meaning to do for a while.\nI would suggest a couple minor changes.\n- I would prefer axios.create over axios.createNew for the factory method.\n- What is the purpose for axios.request? Looks like it takes the place of calling axios directly. I would prefer not to loose this functionality since axios \"competes\" with fetch, and I would like to preserve a similar, succinct API.\n. Thanks for this PR!\n. As @pstoica said, this isn't currently supported. There have been several proposals made, and a couple attempts to implement, but Promises by nature make it quite challenging to solve this. I hope to find some solution, but nothing has made it into master yet.\n. @ctimmerm would you mind rebasing your branch from master?\n. Take a look at the upgrade guide https://github.com/mzabriskie/axios/blob/master/UPGRADE_GUIDE.md\n. Thanks for this PR. Looks great. Please add tests, and docs, then I'll get it merged.\n. @dzannotti yes, I intend to merge. @lachenmayer said that he would add some tests, and documentation first. Just waiting on that.\n. @lachenmayer any chance of getting this resolved? If not I'll do it myself.\n. Closed in favor of #167 \n. I assume that you're asking about XDomainRequest? This is something that still needs to be addressed. Though it shouldn't be terribly complicated.\n. I'm not sure what you're asking. Can you provide more details?\n. I'm not sure what you're asking. Can you provide more details?\n. No problem. Are we okay to close the issue?\n. No problem. Are we okay to close the issue?\n. You need to polyfill Promise yourself. You can see specifics in the upgrade guide https://github.com/mzabriskie/axios/blob/master/UPGRADE_GUIDE.md#es6-promise-polyfill\n. You need to polyfill Promise yourself. You can see specifics in the upgrade guide https://github.com/mzabriskie/axios/blob/master/UPGRADE_GUIDE.md#es6-promise-polyfill\n. @nickuraltsev happy to accept a PR\n. @nickuraltsev happy to accept a PR\n. @samjulien take a look at the xhr adapter (that should take you to the very line). Currently we only send the XSRF values if the request is being sent to the same URL as the origin. To solve this issue we would want to also check if config.withCredentials is true.\n. @samjulien take a look at the xhr adapter (that should take you to the very line). Currently we only send the XSRF values if the request is being sent to the same URL as the origin. To solve this issue we would want to also check if config.withCredentials is true.\n. @samjulien I am adding a failing test. Your mission should you choose to accept it, is to make the test go from red to green :)\n. @samjulien I am adding a failing test. Your mission should you choose to accept it, is to make the test go from red to green :)\n. Wait to fork from master until I commit the test.\n. Wait to fork from master until I commit the test.\n. It's all yours. Let me know if you have any questions.\n. It's all yours. Let me know if you have any questions.\n. A few pointers as you get ready to submit your PR:\n- Make sure the tests are passing with npm test (be sure you've run npm install first)\n- Only commit your code change, no generated files (i.e. dist/)\n. A few pointers as you get ready to submit your PR:\n- Make sure the tests are passing with npm test (be sure you've run npm install first)\n- Only commit your code change, no generated files (i.e. dist/)\n. PR looks great and is merged! Exactly how I would have done it. Glad to provide the opportunity.\n. PR looks great and is merged! Exactly how I would have done it. Glad to provide the opportunity.\n. @miguelc1221 there will be many more opportunities. Stay tuned :)\n. @miguelc1221 there will be many more opportunities. Stay tuned :)\n. Sorry, I thought that I had replied to this already.\nA couple changes need to be made, but overall I like the solution.\n- Don't commit the dist/ files\n- Resolve merge conflicts (probably just rebase on master)\n- Don't make XDomain a config option. This should be transparent to the user. Let's have axios handle the logic internally.\n``` js\n// This would go at the top of lib/adapters/xhr.js\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\n// Slight modification to your code\nvar adapter = (XMLHttpRequest || ActiveXObject);\nvar loadEvent = 'onreadystatechange';\nvar xDomain = false;\n// For IE 8/9 CORS support\nif (!isURLSameOrigin(config.url) && window.XDomainRequest) {\n  adapter = window.XDomainRequest;\n  loadEvent = 'onload';\n  xDomain = true;\n}\n```\n. Sorry, I thought that I had replied to this already.\nA couple changes need to be made, but overall I like the solution.\n- Don't commit the dist/ files\n- Resolve merge conflicts (probably just rebase on master)\n- Don't make XDomain a config option. This should be transparent to the user. Let's have axios handle the logic internally.\n``` js\n// This would go at the top of lib/adapters/xhr.js\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\n// Slight modification to your code\nvar adapter = (XMLHttpRequest || ActiveXObject);\nvar loadEvent = 'onreadystatechange';\nvar xDomain = false;\n// For IE 8/9 CORS support\nif (!isURLSameOrigin(config.url) && window.XDomainRequest) {\n  adapter = window.XDomainRequest;\n  loadEvent = 'onload';\n  xDomain = true;\n}\n``\n. There was a failing test on master when you merged. I have fixed the test. Please try merging master into your branch again.\n. There was a failing test on master when you merged. I have fixed the test. Please try merging master into your branch again.\n. Sorry for the confusion. I'll work on getting a new release out soon.\n. Sorry for the confusion. I'll work on getting a new release out soon.\n. This is strange. Here is the code that processes the response headers and passes it along toresolve/reject. Theoretically the only point of failure would beparseHeaders`.\nhttps://github.com/mzabriskie/axios/blob/master/lib/adapters/xhr.js#L61-L77\n. This is strange. Here is the code that processes the response headers and passes it along to resolve/reject. Theoretically the only point of failure would be parseHeaders.\nhttps://github.com/mzabriskie/axios/blob/master/lib/adapters/xhr.js#L61-L77\n. Glad that you figured it out. Sorry for the delayed response.\n. Glad that you figured it out. Sorry for the delayed response.\n. This has been solved with #149 \n. This has been solved with #149 \n. Redirects will be followed automatically. This is the native behavior for XMLHttpRequest in the browser, and with this PR it is enabled for node.\nIf you mean how to issue a redirect on the server send a 300-308 status code with a Location header to indicate where redirection should go.\n. I'm working on fixing an issue first. Will release once that's done.\n. I'm working on fixing an issue first. Will release once that's done.\n. This is not currently possible. There are plans for implementing cache #31. Ideally this would also support using an external caching mechanism like Redis.\n. Can you try debugging a bit to see where it is failing?\njs\n// Prefer console.log, but you're using IE8 :-P\nalert(typeof axios.get);\nalert(typeof axios.get(url).then);\nalert(typeof Promise);\n. Can you try debugging a bit to see where it is failing?\njs\n// Prefer console.log, but you're using IE8 :-P\nalert(typeof axios.get);\nalert(typeof axios.get(url).then);\nalert(typeof Promise);\n. Just released 0.8.0. Closing for now. Please re-open if you still see this problem.\n. Just released 0.8.0. Closing for now. Please re-open if you still see this problem.\n. This feature will be available in the next version. I'm working on getting something out soon.\n. This feature will be available in the next version. I'm working on getting something out soon.\n. The feature came in with a PR which included the docs. After it merged it ended up in master.\n. The feature came in with a PR which included the docs. After it merged it ended up in master.\n. Working on getting a PR merged, then will release.\n. Working on getting a PR merged, then will release.\n. If you are playing with sandbox make sure you run node ./sandbox/server then just open http://127.0.0.1:3000/ in your browser. This will run sandbox/client.html with the proper dependencies in place. You may also run node ./sandbox/client (with the server running) to test the node client.\nThe build error is coming from a failing test on Travis CI. I am currently working on sorting that out.\n. If you are playing with sandbox make sure you run node ./sandbox/server then just open http://127.0.0.1:3000/ in your browser. This will run sandbox/client.html with the proper dependencies in place. You may also run node ./sandbox/client (with the server running) to test the node client.\nThe build error is coming from a failing test on Travis CI. I am currently working on sorting that out.\n. I'll take a look at it.\n. I'll take a look at it.\n. Can you share your full code for making the request?\n. Can you share your full code for making the request?\n. Can you try running the examples locally?\nbash\nnpm run examples\nThen open http://127.0.0.1:3000/post in your browser, enter some valid JSON, and click POST.\n. Can you try running the examples locally?\nbash\nnpm run examples\nThen open http://127.0.0.1:3000/post in your browser, enter some valid JSON, and click POST.\n. Just released 0.8.0 which includes #160.\n. Just released 0.8.0 which includes #160.\n. With 0.8.0 you can provide your own paramsSerializer option. This will allow you to format your params anyway you'd like.\n. With 0.8.0 you can provide your own paramsSerializer option. This will allow you to format your params anyway you'd like.\n. How does this differ from #155?\n. How does this differ from #155?\n. I agree with @jtangelder that this doesn't belong in the core library. This is a great use case for interceptors as illustrated.\n. I agree with @jtangelder that this doesn't belong in the core library. This is a great use case for interceptors as illustrated.\n. You can certainly do this with interceptors:\n``` js\nlet googleAPIClient = axios.create();\ngoogleAPIClient.interceptors.request.use((config) => {\n  return new Promise((resolve) => {\n    window.gapi_callback = () => { resolve(window.gapi) };\n    $('",
    "justinbelcher": ":+1:\n. ",
    "epeli": "I'd like to see window.fetch style api for uploads https://github.com/github/fetch#file-upload\n. ping @mzabriskie \n. Maybe custom?\n. Having written quite a bunch of Backbone code this doesn't look too bad to me:\njs\nvar testClient = axios.extend({\n   adapter: createSupertestAdapter(app)\n});\nthou there's a miss match with Backbone. In Backbone extend creates constructor and here we create an instance...\n. Personally I would prefer that  but it would require a major version release.\n. > Chiming in here. I don't think there's anything wrong with a major version release. I think those are healthy for OS projects personally.\nI'm certainly ok with it too. But I think it's @mzabriskie's call.\n\nA different approach: http://jsbin.com/funumo/1/\n\nI feel that this is somewhat ambiguous and not a common pattern. Don't remember anyone else doing it.\n. Ok. I'll finish this on next week.\n. ",
    "jimthedev": "This would be a fantastic feature. Since there is a polyfill already for fetch would it be a matter of adding a mapping for the property difference?\n. @nnarhinen Thanks. I'll give it a shot.\n. Makes sense. It doesn't seem like there is any single standards-based or deprecated-standards based API for this, but there is flow.js (a fork of resumeablejs) which might provide at least a proven, successful API as a model. Although it looks primarily browser based, they seem to have a Node example although there is an ambiguous open issue about it. \n. @mzabriskie Awesome! Currently, as a workaround I just swapped out http for https in the adapter and set this rejectUnauthorized: false\nNot safe, but I am only working in dev so it suits my needs.\n. Cool. Thanks a bunch. What tag is this coming in on? 0.4.0? Currently looks like 0.3.1 is still the latest. Is this correct?\n. @mzabriskie Great. Thanks. \n. By it's very nature JSONP requires the dom. I'd really prefer to leave it out. There is also some interesting work being done here that will hopefully lead to more organizations using CORS since the browser side of things will become a lot cleaner:\nhttps://github.com/github/fetch\nhttps://fetch.spec.whatwg.org/#http-fetch\n. Looks like http://nodeca.github.io/pako/ does exactly this. Perhaps it would be worth figuring out if the two can work together so as to keep as much as possible outside of axios core.\n. Sounds good.\nOn Sun, Jan 25, 2015 at 3:21 PM, Matt Zabriskie notifications@github.com\nwrote:\n\n@jimthedev https://github.com/jimthedev @OliverJAsh\nhttps://github.com/OliverJAsh I think I would recommend keeping this\nfunctionality out of axios. I want to keep the bloat down as much as\npossible from the core. Minified pako is 44k vs axios minified is 15k.\nShould be able to easily create an interceptor to inflate/deflate requests\nas needed.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/23#issuecomment-71394224.\n. \n",
    "nnarhinen": "After #22 file uploads using FormData should work just fine. There's an usage example in the PR.\n. @mzabriskie oh yes, that is true\n. Also loosely related, responseType: 'arraybuffer' does not work in the browser because responseText property is not readable in such responses. Has to be read from response instead.\n\n. @mzabriskie ping?\n. ",
    "luin": "really looking forward to the support for uploading file in node.js. any updates?\n. really looking forward to the support for uploading file in node.js. any updates?\n. the concept of custom instances is very useful in my project, will this pr be merged soon?\n. the concept of custom instances is very useful in my project, will this pr be merged soon?\n. ",
    "revolunet": "hey...i'm a little confused. is it possible to upload a file from node using axios+streams ?\n. Hi\nIt should work\nDo you use Safari developer menu to get the simulator console ?\n. Do you have a catch block?\nPromises have the nasty habit to swallow exceptions\n. Ha yes you have in your example... Weird\nCordova version ?\nDo you use wkwebview ?\n. nice catch @rubennorte https://github.com/mzabriskie/axios/blob/6132d9630d641d253f268c8aa2e128aef94ed44f/lib/adapters/xhr.js#L59\n. ",
    "dzcpy": ":+1: It's good to hear that file uploading will be implemented soon. Thanks for your efforts!\n. Need node.js version too\n. Same issue here, how can I use application/x-www-form-urlencoded as request Content-Type? When I set it manually, the content is still converted into JSON string\n. Is it already merged? How to use the proxy option?\nI tried:\njs\naxios.defaults.proxy = {\n  host: '127.0.0.1',\n  port: 8888\n};\n127.0.0.1:8888 is Fiddler, however when I tried axios.get('http://test.com') it goes to http://test.com:8888 and is never passed though the local proxy?\n. There are also many more cross platform libraries, for example superagent, node-fetch && whatwg-fetch. They both support promise api\n. Any updates? Really need to use socksv5 with axios... ",
    "stonexer": "maybe try form-data on the node side? like what node-fetch did.\n. ",
    "LowryTang": "does file upload support in axios for node.js? \n. @donaldparker  this only work for browser. Do you know how to make it on node.js?\n. ",
    "donaldparker": "I copied this example, and it's working for me.\nhttps://github.com/mzabriskie/axios/blob/master/examples/upload/index.html\n. ",
    "maotora": "Hi, I'm trying to upload a file from it's filename instead of uploading it as form-data using Electron.\nI tried both the node.js solution & browser solution but both don't really workout as I get [object Object] as the file request on the server.\nThis is a sample code of what I'm doing ...\nGetting the file from it's fileName Url.\n```js\nexport function generateContract(url, customer) {\n    const data = new FormData()\n    const file = fs.createReadStream(url)\ndata.append('names', customer.names)\ndata.append('email', customer.email)\ndata.append('contract', file)\nconst headers = data.getHeaders()\n\nreturn {data, headers}\n\n}\nSending the returned formData using axios.js\nexport function sendEmail({data, headers}) {\n    return checkConnetion()\n        .then(() => {\n            return axios.post(emailUrl, data, {headers})\n        })\n        .catch(() => {\n            return axios.post(emailUrlOffline, data, {headers})\n        })\n}\n```\nI also made this question on stackoverflow if someone can take a look.\nEDIT\nI wasn't placing form.getHeaders() in headers field on my post requests.\nNow I'm doing it and I'm getting this error on the server instead.\n```\n  Error: MultipartParser.end(): stream ended unexpectedly: state = START_BOUNDARY\n      at MultipartParser.end (/home/user/Projects/Electron/Mijengo/server/node_modules/formidable/lib/multipart_parser.js:326:12)\n      at IncomingMessage. (/home/user/Projects/Electron/Mijengo/server/node_modules/formidable/lib/incoming_form.js:130:30)\n      at emitNone (events.js:105:13)\n      at IncomingMessage.emit (events.js:207:7)\n      at endReadableNT (_stream_readable.js:1059:12)\n      at _combinedTickCallback (internal/process/next_tick.js:138:11)\n      at process._tickCallback (internal/process/next_tick.js:180:9)\n```\nThanks.. @euroclydon37 I couldn't solve my issue.\nSo I ended up using superagent for just one request! I had deadlines to meet so I gave the evil smile & went for it.\nI will be glad to hear a solution, will update my program if I can test and make it work.. ",
    "euroclydon37": "This was closed after having the in progress tag removed. Has an alternative been found?. ",
    "douglasjunior": "I made it work with FormData.\n```js\n        // create the file object: https://developer.mozilla.org/en-US/docs/Web/API/File\n        const file = {\n            lastModifiedDate: ...,\n            lastModified: ...,\n            name: ...,\n            size: ...,\n            type: ...,\n            uri: 'file:///path/to/file.txt', // required value\n        };\n    // create FormData\n    const formData = new FormData();\n    formData.append('field_name', file);\n\n    // send with axios\n    axios.post('http://your/url/', formData);\n\n```\n(Works on Node and React Native). ",
    "kentcdodds": "@geddski, I looked into this and I believe it's an issue with RequestBin. First of all, when I try to post, I get a 503 from RequestBin which means \"Service Unavailable.\" I used a different service called apiary.io and it works great. Try this:\n``` javascript\nvar axios = require('axios');\nvar URL = 'http://kentcdodds.apiary-mock.com/random-user';\nvar BODY = {\n  firstName: 'Joe',\n  lastName: 'Moe'\n};\nfunction handleSuccess(data) { console.log(data); }\nfunction handleFailure(data) { console.log('error', data); }\n// GET\naxios.get(URL, { params: BODY })\n  .then(handleSuccess)\n  .catch(handleFailure);\n// POST\naxios.post(URL, BODY)\n  .then(handleSuccess)\n  .catch(handleFailure);\n```\nThis worked for me...\n. @geddski, I looked into this and I believe it's an issue with RequestBin. First of all, when I try to post, I get a 503 from RequestBin which means \"Service Unavailable.\" I used a different service called apiary.io and it works great. Try this:\n``` javascript\nvar axios = require('axios');\nvar URL = 'http://kentcdodds.apiary-mock.com/random-user';\nvar BODY = {\n  firstName: 'Joe',\n  lastName: 'Moe'\n};\nfunction handleSuccess(data) { console.log(data); }\nfunction handleFailure(data) { console.log('error', data); }\n// GET\naxios.get(URL, { params: BODY })\n  .then(handleSuccess)\n  .catch(handleFailure);\n// POST\naxios.post(URL, BODY)\n  .then(handleSuccess)\n  .catch(handleFailure);\n```\nThis worked for me...\n. oh, is that the problem?\nOn Sep 16, 2014 5:31 PM, \"Dave Geddes\" notifications@github.com wrote:\n\n@kentcdodds https://github.com/kentcdodds maybe requestbin just\nrequires an accurate content length, other services might as well\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/3#issuecomment-55829381.\n. oh, is that the problem?\nOn Sep 16, 2014 5:31 PM, \"Dave Geddes\" notifications@github.com wrote:\n@kentcdodds https://github.com/kentcdodds maybe requestbin just\nrequires an accurate content length, other services might as well\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/3#issuecomment-55829381.\n. Nice\nOn Sep 16, 2014 5:46 PM, \"Matt Zabriskie\" notifications@github.com wrote:\n@kentcdodds https://github.com/kentcdodds @geddski\nhttps://github.com/geddski I just added the Content-Length parameter\nand it seems to have done the trick.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/3#issuecomment-55830531.\n. Nice\nOn Sep 16, 2014 5:46 PM, \"Matt Zabriskie\" notifications@github.com wrote:\n@kentcdodds https://github.com/kentcdodds @geddski\nhttps://github.com/geddski I just added the Content-Length parameter\nand it seems to have done the trick.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/3#issuecomment-55830531.\n. I know that HTTP an angular response with the full response object\nOn Sep 16, 2014 7:33 AM, \"Mathieu Bruyen\" notifications@github.com wrote:\nThe simplest would be resolve the promise with the whole response object\nbuild in adapters (xhr\nhttps://github.com/mzabriskie/axios/blob/f2fd9f7dd3a644ddbd25b4bfe59c86313b24a443/lib/adapters/xhr.js#L33-L42\n& http\nhttps://github.com/mzabriskie/axios/blob/f2fd9f7dd3a644ddbd25b4bfe59c86313b24a443/lib/adapters/http.js#L41-L50)\nbut this breaks backward compatibility and is not nice for most use cases\nwhen one just needs data.\nAnother one is to resolve with an array and recommend the usage of spread\nbut same arguments.\nDon't know if it's a good idea but maybe having a config option which\nchanges the resolve type, like:\naxios({ url : '/foo' }).then(function (data) {\n  /* ... /\n}\naxios({ url : '/foo', responseDetails : true }).then(function (response) {\n  / response.data|headers|status */\n}\nBackward compatibility is fine, and only users actually using\nheaders/status will receive it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mzabriskie/axios/pull/6#issuecomment-55742369.\n. I know that HTTP an angular response with the full response object\nOn Sep 16, 2014 7:33 AM, \"Mathieu Bruyen\" notifications@github.com wrote:\nThe simplest would be resolve the promise with the whole response object\nbuild in adapters (xhr\nhttps://github.com/mzabriskie/axios/blob/f2fd9f7dd3a644ddbd25b4bfe59c86313b24a443/lib/adapters/xhr.js#L33-L42\n& http\nhttps://github.com/mzabriskie/axios/blob/f2fd9f7dd3a644ddbd25b4bfe59c86313b24a443/lib/adapters/http.js#L41-L50)\nbut this breaks backward compatibility and is not nice for most use cases\nwhen one just needs data.\nAnother one is to resolve with an array and recommend the usage of spread\nbut same arguments.\nDon't know if it's a good idea but maybe having a config option which\nchanges the resolve type, like:\naxios({ url : '/foo' }).then(function (data) {\n  /* ... /\n}\naxios({ url : '/foo', responseDetails : true }).then(function (response) {\n  / response.data|headers|status */\n}\nBackward compatibility is fine, and only users actually using\nheaders/status will receive it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mzabriskie/axios/pull/6#issuecomment-55742369.\n. So, while it's an inconvenience to force people to deal with another object to get the actual data, for consistency's sake I think you should resolve with the data.\n. So, while it's an inconvenience to force people to deal with another object to get the actual data, for consistency's sake I think you should resolve with the data.\n. Can I help with this? I'm using js-data and I need this working for my authentication to work :-)\n. Can I help with this? I'm using js-data and I need this working for my authentication to work :-)\n. This PR just basically includes a JSONP library. Because very few people will use the JSONP functionality and it's quite simple to just use the library itself if you want to, I'd say keep that weight out of the library and people needing JSONP can just use the library. You could even put an entry in the Wiki describing how to use that library with axios if you need to use JSONP.\n. This PR just basically includes a JSONP library. Because very few people will use the JSONP functionality and it's quite simple to just use the library itself if you want to, I'd say keep that weight out of the library and people needing JSONP can just use the library. You could even put an entry in the Wiki describing how to use that library with axios if you need to use JSONP.\n. Maybe I'm misunderstanding things, but if they're using .catch then the request didn't \"work\" and there shouldn't be data correct? I mean the response can come back with the reason for the error, but that could be considered the error right? So res will always be an error, right?\n. Maybe I'm misunderstanding things, but if they're using .catch then the request didn't \"work\" and there shouldn't be data correct? I mean the response can come back with the reason for the error, but that could be considered the error right? So res will always be an error, right?\n. Well explained @jmdobry... That last comment was interesting, but I think I'd recommend against going that direction for two reasons 1) you'd be forced to check the status code in your successful requests which would be annoying (especially in cases where you don't care if it was unsuccessful) 2) a lot of people use and love $http, so they'll expect axios to work similarly.\n\nThat second argument is a bit weak I think, but I thought I'd mention it anyway.\nI think something like this would be reasonable:\njavascript\n.catch(function (result) {\n  if (result.error) {\n    // caused by exception in code\n    // handle error from code\n  } else {\n    // determined by status code, no stack trace\n    // handle non 2xx/3xx response\n    console.log(result.data); // what came back from the server.\n  }\n});\n. Well explained @jmdobry... That last comment was interesting, but I think I'd recommend against going that direction for two reasons 1) you'd be forced to check the status code in your successful requests which would be annoying (especially in cases where you don't care if it was unsuccessful) 2) a lot of people use and love $http, so they'll expect axios to work similarly.\nThat second argument is a bit weak I think, but I thought I'd mention it anyway.\nI think something like this would be reasonable:\njavascript\n.catch(function (result) {\n  if (result.error) {\n    // caused by exception in code\n    // handle error from code\n  } else {\n    // determined by status code, no stack trace\n    // handle non 2xx/3xx response\n    console.log(result.data); // what came back from the server.\n  }\n});\n. I think that it's a totally reasonable/sensible solution :+1: \n. I think that it's a totally reasonable/sensible solution :+1: \n. I think that's what @mzabriskie is suggesting with:\n.catch(function (res) {\n  if (res instanceof Error) {\n    console.log(res.message); // this was a js error\n  } else {\n    console.log(res.status, res.data); // this was a non 2xx or 3xx response status\n  }\n});\n. I think that's what @mzabriskie is suggesting with:\n.catch(function (res) {\n  if (res instanceof Error) {\n    console.log(res.message); // this was a js error\n  } else {\n    console.log(res.status, res.data); // this was a non 2xx or 3xx response status\n  }\n});\n. :clap: totally reasonable api. Thanks again for making this thing dude.\n. :clap: totally reasonable api. Thanks again for making this thing dude.\n. I remember once wanting to make a request in a transform to get more info\nfor my model because the endpoint I was hitting didn't have everything I\nneeded for my model. $http supports this so that was helpful.\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Oct 19, 2014 2:09 PM, \"Matt Zabriskie\" notifications@github.com wrote:\n\nCan you give me an example of what you're trying to do with async\ntransforms?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/19#issuecomment-59663195.\n. I remember once wanting to make a request in a transform to get more info\nfor my model because the endpoint I was hitting didn't have everything I\nneeded for my model. $http supports this so that was helpful.\n- Kent C. Dodds\n  Sent from my mobile device, please forgive any errors or brevity. (I may\n  have used speech to text...)\n  On Oct 19, 2014 2:09 PM, \"Matt Zabriskie\" notifications@github.com wrote:\nCan you give me an example of what you're trying to do with async\ntransforms?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/19#issuecomment-59663195.\n. I remembered my use case better. We had data that had a slug and we needed to convert that to the actual value for the model, to get the values of the slugs, we needed to make a request for those. There was a race condition where the request for the data came back before the slug values request came back. This is why it was useful to have async transforms. Perhaps this could also be done with an interceptor though...?\n. I remembered my use case better. We had data that had a slug and we needed to convert that to the actual value for the model, to get the values of the slugs, we needed to make a request for those. There was a race condition where the request for the data came back before the slug values request came back. This is why it was useful to have async transforms. Perhaps this could also be done with an interceptor though...?\n. Awesome. Come to think of it, we may have switched over to an interceptor to accomplish what we were trying to do. Haha. Thanks for explaining that @mzabriskie!\n. Awesome. Come to think of it, we may have switched over to an interceptor to accomplish what we were trying to do. Haha. Thanks for explaining that @mzabriskie!\n. Chiming in here. I don't think there's anything wrong with a major version release. I think those are healthy for OS projects personally.\n\nAlso, I wonder if there'd be a performance hit by having a default instance of Axios.axios. If I create my own instance anyway then I never use that instance. It's probably not a big deal, but just a thought that came to mind when I saw that.\n. Chiming in here. I don't think there's anything wrong with a major version release. I think those are healthy for OS projects personally.\nAlso, I wonder if there'd be a performance hit by having a default instance of Axios.axios. If I create my own instance anyway then I never use that instance. It's probably not a big deal, but just a thought that came to mind when I saw that.\n. I found an npm module a few months ago which adds finally support to promises. I don't think this is the one, but it's the only one I found after a minute of searching: https://www.npmjs.com/package/promise.prototype.finally\n. I found an npm module a few months ago which adds finally support to promises. I don't think this is the one, but it's the only one I found after a minute of searching: https://www.npmjs.com/package/promise.prototype.finally\n. well ok then @jmdobry :+1: \n. well ok then @jmdobry :+1: \n. > I want to be able to drop the polyfill when browsers have native support.\n:clap: \n. I had a hard time with this one. I definitely want to be able to respond to a request cancellation because I think that'd be valuable, but I don't want to have cancel checking logic all over my error handlers... I'm thinking that having the flexibility would be worth it though.\n. I'm mostly thinking of abstractions here. In the case where I'm interacting with axios directly and making a request myself like that, then I don't care as much because I'm the one who canceled so I can handle it there. However, if I have some kind of abstraction and I want to respond to cancellations in some cases but not in others, then not having the flexibility might be a pain...\nBut I don't have a use case for this currently, so you can ignore my opinion :-) I'm just speculating here... I suppose that if a strong use case surfaced itself, a major version change could be made to add this...\nPerhaps it could be configurable on the request...............\n. @mzabriskie, I think we just had a race condition in our comments :-)\n. o_O? really :-( I better check on that one because this is what I'm doing in several of my libraries :-/\n. Oh, I generally include the non-minified files in my project and minify it myself most of the time. I'd say it's definitely common...\n. :tada: :confetti_ball: awesome to see a first-timers-only issue on axios :+1: :clap: \n. :tada: congratulations!\n. ",
    "geddski": "@kentcdodds maybe requestbin just requires an accurate content length, other services might as well\n. Sweet, nice work!!\n\u2014\nSent from Mailbox\nOn Tue, Sep 16, 2014 at 6:33 PM, Kent C. Dodds notifications@github.com\nwrote:\n\nNice\nOn Sep 16, 2014 5:46 PM, \"Matt Zabriskie\" notifications@github.com wrote:\n\n@kentcdodds https://github.com/kentcdodds @geddski\nhttps://github.com/geddski I just added the Content-Length parameter\nand it seems to have done the trick.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/3#issuecomment-55830531.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mzabriskie/axios/issues/3#issuecomment-55833880\n. \n\n",
    "faztp12": "@mzabriskie \nEverything works fine on browser,\nbut do not have POST payload on node\nIt started working once i manually specified Content-Type: application/json\nPlease have this documented / fixed for future devs :). If you look at the _header property of ClientRequest you could see that Content-Type: application/json is set.\nClientRequest {\n        domain: null,\n        _events: [Object],\n        _eventsCount: 6,\n        _maxListeners: undefined,\n        output: [],\n        outputEncodings: [],\n        outputCallbacks: [],\n        outputSize: 0,\n        writable: true,\n        _last: true,\n        upgrading: false,\n        chunkedEncoding: false,\n        shouldKeepAlive: false,\n        useChunkedEncodingByDefault: false,\n        sendDate: false,\n        _removedConnection: false,\n        _removedContLen: false,\n        _removedTE: false,\n        _contentLength: 0,\n        _hasBody: true,\n        _trailer: '',\n        finished: true,\n        _headerSent: true,\n        socket: [Object],\n        connection: [Object],\n        _header: 'DELETE /api/resource/Item/ITEM%20CD HTTP/1.1\\r\\nAccept: */*\\r\\nAccept: application/json\\r\\nCookie: __cfduid=d8e4a4b1cd47534f72f567dfc66200c2e1538560426;user_image=;user_id=Administrator;system_user=yes;full_name=Administrator;sid=362ba7e0aa0df024302e5962edc0efcec4769411e078f16ae51708d8;\\r\\nContent-Type: application/json\\r\\nUser-Agent: axios/0.18.0\\r\\nHost: test-erp.leam.ae\\r\\nConnection: close\\r\\n\\r\\n',        _onPendingData: [Function: noopPendingOutput],\n        agent: [Object],\n        socketPath: undefined,\n        timeout: undefined,\n        method: 'DELETE',\n        path: '/api/resource/Item/ITEM%20CD',\n        _ended: true,\n        res: [Object],\n        aborted: undefined,\n        timeoutCb: null,\n        upgradeOrConnect: false,\n        parser: null,\n        maxHeadersCount: null,\n        _redirectable: [Object],\n        [Symbol(outHeadersKey)]: [Object] }\n\nHi @faztp12 ,\nAccording to this, the default Content-Type is application/x-www-form-urlencoded. Are you using a custom axios instance or just the default one?\naxios/lib/defaults.js\nLines 6 to 8 in b4c5d35\nvar DEFAULT_CONTENT_TYPE = { \n   'Content-Type': 'application/x-www-form-urlencoded' \n }; \nCheers \ud83d\ude04 ,\n\nI am using the default one.\nSearching for the keyword in my entire project brings up only 3 occurrences:\nimport axios from \"axios\";\naxios({\n    ... options ...\n})\nAxios: 0.18.0\nNode: 8.10\nAll fine in browser\nHope it helps :). ",
    "bttmly": "For reference, previously the browserified bundle was 212kb un-minified. After this fix it's ~34kb.\n. ",
    "mathbruyen": "The simplest would be resolve the promise with the whole response object build in adapters (xhr & http) but this breaks backward compatibility and is not nice for most use cases when one just needs data.\nAnother one is to resolve with an array and recommend the usage of spread but same arguments.\nDon't know if it's a good idea but maybe having a config option which changes the resolve type, like:\naxios({ url : '/foo' }).then(function (data) {\n  /* ... */\n}\naxios({ url : '/foo', responseDetails : true }).then(function (response) {\n  /* response.data|headers|status */\n}\nBackward compatibility is fine, and only users actually using headers/status will receive it.\n. You're welcome, thanks for merging!\n. ",
    "wmadden": "@mzabriskie this still causes problems in our project which imports axios indirectly, i.e. we import another library which imports axios. In our case we're building our project using webpack which is eventually importing axios, and naturally we haven't set up the es6-promise external you have in your config.\nA better approach might be to check if a native Promise implementation exists at runtime, because es6-promise's polyfill method will just override anything that already exists in the global namespace.\n. E.g.\njavascript\nvar es6Promise = require('es6-promise');\nif (!global.Promise) {\n  es6Promise.polyfill();\n}\nAlthough I'd question whether it's valuable for axios to be supplying the polyfill at all. It seems like it's useful exclusively for when the library's loaded in isolation - which won't happen in any more complex project with its own build system.\nIn that case it might be better to include a bootstrapping file only for your dist webpack entry, and do the polyfilling there.\nAnyone that imports axios from source can be reasonably expected to have polyfilled their environment to include a Promise implementation.\n. Great, thanks very much @mzabriskie!\n. ",
    "jmdobry": ":+1: \n. Looks like any \"error\" events on the request are unhandled. Something like the following needs to be added to lib/adapters/http.js:\njs\nreq.on('error', function (err) {\n  reject(err);\n});\nEDIT: @jergason Just saw you created #18 \n. Oh? I ran your example locally (Node v0.10.31 and axios 0.4.0) and it worked fine.\n. The issue is combing thrown errors and an http response into a single argument. \nrequest.js example:\njs\nvar request = require('request');\nrequest('http://www.google.com', function (error, response, body) {\n  if (!error && response.statusCode == 200) {\n    console.log(body) // Print the google web page.\n  }\n})\nIn this example it's obvious which argument would be an Error object, caused by some exception in the code execution. \nThe response argument can be inspected separately, as it's status code might represent an error from a different domain, unrelated to our code's execution.\nWith axios:\njs\n.catch(function (res) {\n  // what is res?\n  // was there an exception? \n  // can I print a stack trace?\n  // or do I just need to inspect the status code for 500, etc.?\n});\nThe question is whether res will be the first or second (or both) argument from the first example. An Error object makes sense if an exception occurred, with a stack trace captured. But like @jergason said, it doesn't fit with {data, status, headers, config} which corresponds to the response argument in the first example.\nA few options:\n- Always pass an Error object and requiring the developer to know how to inspect it for exception/stacktrace vs response meta data\n- Pass either an Error object or the response meta data, allowing the dev just check for which one\n- (An extension of #1) Create custom error class(es) (inheriting from Error) and expose them on axios' API. Example below:\njs\n.catch(function (err) {\n  if (err instanceof axios.HttpError) {\n    // determined by status code, no stack trace\n    // handle non 2xx/3xx response\n  } else if (err instanceof Error) {\n    // caused by exception in code\n    // handle error from code\n  } else {\n    // shouldn't get here?\n  }\n});\nAnother solution would be to follow how request.js does it (not how $http does it), as in don't decide for the developer that a particular http response should cause the promise to be rejected. In request.js, only exceptions in the code populate that error argument.\n</spiel>\n. @mzabriskie Yes of course. I was just using request's api as a contrasting example to clearly define this issue by showing what axios can't do. I should have been clearer in my comment.\n. :+1: \n. What about:\n``` js\nvar Axios = require('axios');\n// pre-made custom instance (for convenience?)\nvar default = Axios.axios;\n// uses defaults\nvar axios = new Axios();\n// sets some defaults\nvar axios2 = new Axios({\n  headers: { \n    'my'; 'header'\n  }\n});\n// etc.\n```\nEdit: the pre-made default instance don't need to be there, of course\n. I mentioned it because I've seen some libraries do that\nOn Dec 18, 2014 3:25 PM, \"Kent C. Dodds\" notifications@github.com wrote:\n\nChiming in here. I don't think there's anything wrong with a major version\nrelease. I think those are healthy for OS projects personally.\nAlso, I wonder if there'd be a performance hit by having a default\ninstance of Axios.axios. If I create my own instance anyway then I never\nuse that instance. It's probably not a big deal, but just a thought that\ncame to mind when I saw that.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mzabriskie/axios/pull/21#issuecomment-67567957.\n. Also, I have no problem with a minor version bump with breaking changes\nwhen a library is pre-1.0.0. Document/announce them of course.\n. Sure thing\n\nEdit: done\n. Right now the only way to do this would be to have an interceptor that inspects the route in the config argument and then decides what to do/whether to do anything.\n. ",
    "fraserxu": "Actually I just started to use JSONP like two days ago, because the api provider(Sina Weibo in China, Twitter equivalent) I'm currently using doesn't support CORS, so I have to know what is 'JSONP' and force myself to use it. :(\nI agree that JSONP is not as clean as CORS, but it's the only way I can do because I don't want to include a server somehow.\n. I agree with your ideas above and I don't like JSONP either. \nAnd I think @kentcdodds 's suggestion maybe good. When need to support JSONP, just include the library. :D \n. ",
    "jergason": "These are separate issues. Node exist without calling the callbacks or throwing the error.\n. I'd really prefer an optional way to respond to a request being aborted. This would be helpful for optimistic updates, where you update your UI assuming the request succeeds, and need to roll it back if it doesn't go through. Since you might not always want this behavior though, an optional listener of some kind would be grand.\n. KualiCo, node & browser\n. ",
    "ryanflorence": "I would expect catch to reject with an error object.\n. I'm not doing as much catching up as I should, but the value sent to reject should contain more than just an error (I wasn't very clear before).\nVery often you'll send a non 2xx status code but still send data. You also may need the headers, etc.\nI don't think you can just throw an error into the arg and call it good, there's a lot of information about the response you may need in the handler.\n. seems fine to me then\n. ",
    "nickdima": "I wanted to convert the data into another format and I was using some async API, but in the end I think doing it outside the request is better in this case.\n. I wanted to convert the data into another format and I was using some async API, but in the end I think doing it outside the request is better in this case.\n. This is a stripped down version of my code, in coffeescript\n``` coffeescript\naxios = require 'axios'\nZip = require 'adm-zip'\ndownloadSubitles = () ->\n  axios\n    url: 'http://subscene.com/subtitle/download?mac=PEuUfx42AOa6Sju0WvWBFlbLF_YeiqKwsB62_ws6DQH1khKyJy1_sj0-df29vIFw0'\n  .then (response) ->\n    buffer = new Buffer(response.data, 'binary')\n    zip = new Zip(buffer)\n    srt = zip.readAsText zip.getEntries()[0]\n```\n. This is a stripped down version of my code, in coffeescript\n``` coffeescript\naxios = require 'axios'\nZip = require 'adm-zip'\ndownloadSubitles = () ->\n  axios\n    url: 'http://subscene.com/subtitle/download?mac=PEuUfx42AOa6Sju0WvWBFlbLF_YeiqKwsB62_ws6DQH1khKyJy1_sj0-df29vIFw0'\n  .then (response) ->\n    buffer = new Buffer(response.data, 'binary')\n    zip = new Zip(buffer)\n    srt = zip.readAsText zip.getEntries()[0]\n``\n. That would be good!\n. That would be good!\n. I've been looking a bit into this, so I think maybe we could supportbufferandstringfor theresponseTypein Node.js. When it's set tobufferwe would read the response stream into a buffer and when set tostringjust set the encoding toutf-8and concatenate the chunks.\nI could prepare a PR if you like the idea.\n. I've been looking a bit into this, so I think maybe we could supportbufferandstringfor theresponseTypein Node.js. When it's set tobufferwe would read the response stream into a buffer and when set tostringjust set the encoding toutf-8` and concatenate the chunks.\nI could prepare a PR if you like the idea.\n. Sorry guys, I haven't use axios lately so I wont be able to work on that PR at this point. Maybe someone else could give it a try.\n. Sorry guys, I haven't use axios lately so I wont be able to work on that PR at this point. Maybe someone else could give it a try.\n. ",
    "samuelcastro": "Hey @nickdima, I'm in the same situation here trying to parse responses converting String dates into moment.js object, how did you fix that? I've created a interceptor but its taking much time to parse it when we have a big response, did you a find a way to do that asynchronously?\n. ",
    "sorenbs": "Looking forward to this. My use case is websites that don't properly specify encoding in headers, but do specify it in a meta tag. So I need to parse as utf-8 first, and then possibly re-parse as different content type.\n. ",
    "iam4x": "bump @epeli, would be great I need this.\nIf you don't have time, I can do it myself.\n. bump, waiting on this too :+1: \n. My bad, you need to set Access-Control-Expose-Headers if you use CORS.\n. Ran into this also, thank's for the workaround :+1: \n. I agree with @nickuraltsev, I've made a little wrapper around axios for my own usage:\nhttps://github.com/iam4x/isomorphic-flux-boilerplate/blob/master/shared%2Fapi-client.js\n. @jsdmc You can use npm i -S mzabriskie/axios#master until the new version is released\n. ",
    "JoshZA": ":+1: I need custom adapter :(\n. :+1: I need custom adapter :(\n. Amazon - for api client generation\n. :+1: \n. :+1: \n. :1: Thanks @nickuraltsev \n. :1: Thanks @nickuraltsev \n. ",
    "powmedia": "This is working for me however the fact you need to implement a pass-through transformRequest() seems like an unnecessary step.  If the library is detecting FormData anyway could it skip the need for this requirement?\n. ",
    "jtmarmon": "+1 would love to be able to use this in tests\n. see #32 \n. @mzabriskie \n. Actually on second thought, it makes more sense to me to not throw any error based on a bad status code...\nMany of my tests verify that certain parameter validation is working and expect a 400 response. It doesn't make much sense for the request library to decide for me what type of response is bad.  Seems like a bit of an over reach imo\n. Yeah nevermind #33. We're back! Forgive me for all the activity haha\n. bumpity @mzabriskie \n. ha yes I had a bit of an internal debate whether I agreed with that stance or not. sorry for littering your issue tracker\nAre you suggesting an error should be generated and then the stack attached to the response object? that seems like a even worse way to manage this. why would the response object have a stack? \nYou don't really need a stack trace if you aren't actually going to throw the error. I think the ability to parse the status code and error message in the .then handler solves the issue #24 is trying to solve\n. Actually it appears this was my mistake of not understanding how promises work. Turns out you can .catch a promise and then manually handle errors in the catch callback.\n. ",
    "kilianc": "+1 on this, I was just about to open a new issue, throwing non errors is wrong, and if you async or yield axios that's exactly what happens.\nThis is for some reason not part of the promises specification, and it's a flaw imho.\n. @naw this is a bug fix not a feature change. It may make sense to be more conservative and bump minor. I hope the old behavior just goes away\n. @hugomrdias is 100% right. If you reject you need to use an Error. It is common to use HTTPError in node for !200 to make the handling easier. 99% of cases you want non 200 to be failures and  based on your app logic present something to the user or do something based on err.type.\nI mean I want to .then on success and .catch on failure. !200 is a failure to me as it is an I/O or parsing failure.\n. ref: https://github.com/jshttp/http-errors\n. ",
    "trueter": "+1\n. Its been a month, can we please have this?\n. ",
    "helmus": "\ud83d\udc4d  Please raise the priority on this. This is not a feature, it's a bug.\n. ",
    "naw": "It's possible to address this without breaking backward compatibility simply by making it configurable with a default that uses the current (legacy) behavior.  Then, for a major release, you can simply change the default from the legacy behavior to the new behavior.\n. ",
    "axross": ":+1:\n. ",
    "blittle": "@mzabriskie Yaaay!\n. ",
    "torarnek": "After some more research \"foo\" is not valid JSON response:\nhttp://stackoverflow.com/questions/7487869/is-this-simple-string-considered-valid-json\n. I am eager to start using axios, however I need this PR merged / issue fixed, so I am hoping for minor release asap. ;)\n. Excellent, thank you!\nOn Thu, Dec 11, 2014 at 8:18 AM, Matt Zabriskie notifications@github.com\nwrote:\n\nThis is available with version 0.4.2\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mzabriskie/axios/pull/30#issuecomment-66581562.\n\n\nTor Arne\n. One possible approach could be something similar to:\nhttps://github.com/spoike/refluxjs#switching-promise-library\n. ",
    "ericclemmons": "Heh, I was just looking into this!  I thought that an interceptor could be used or a transformer that'll immediately resolve with a response, but no such luck yet.\nFelix looks interesting for sure...\n. ",
    "englercj": ":+1: The node version isn't super useful for me until we have a plugable caching layer.\n. :+1: User interactions on my app can cause requests, further action can make previous actions invalid and necessary. Right now all requests remain in flight and I have to have to track state to determine if I should use the response. Instead it would be nice to just abort the previous requests and start a new one. That way I only ever have one of a certain type of request in flight.\nI recently switched from superagent to this library, and this is the main feature I am in serious need of before I can release the code that switches over. It is times like these I wish libraries just used callbacks instead of promises :(.\n. ",
    "cezarsmpio": "Any progress in browser? The cache working?\n. +1\n. ",
    "clayreimann": "@mzabriskie I've added support for ttls in mzabriskie/felix#4 and can tackle this if you like my implementation there.\n. @mbektimirov A little late here, but I'm guessing that you're seeing the error in then because your error callback isn't throwing the error.\n. Understandable. No rush, I actually figured out a work around for following redirects \n. Nice! Thanks :smile: \n. We saw this when we were making request to a server we had running on the same machine. The request we were making was ~22k of JSON. The error we were seeing was that Node was telling us that the remote server had closed the connection (which it had, because it was done sending) triggering req.on('error') before our res.then had finished processing.\nNot sure why this behavior is exhibited, but I also can't think of a scenario when an error in the req layer wouldn't propagate down into res. I haven't created a minimal test case for this behavior but I can give it a shot if you need.\n. @mzabriskie ping.\n. ",
    "mccxiv": "Glad to see this issue being revived, it would save me from having to write a bunch of boilerplate :smile: \n. ",
    "rubennorte": "I think right now caching can be implemented via interceptors, although it's not very clean:\n``` javascript\ncache(axios, options);\nfunction cache(instance, options) {\n  instance.interceptors.request.use(function(config) {\n    if (!config.method === 'get') {\n      return config;\n    }\n    return cache.get(generateOptions(config, options))\n      .then(createCachedError, function() { return config; });\n  });\n  instance.interceptors.response.use(null, function(error) {\n    if (error.cachedResult) {\n      return Promise.resolve(error.cachedResult);\n    }\n    return Promise.reject(error);\n  });\n}\n```\nA cleaner way to do this could be defining the default adapter (http, xhr) in the instance defaults and then using a custom adapter like this:\n``` javascript\naxios.get('url', { adapter: cachingAdapter });\nfunction cachingAdapter(resolve, reject, config) {\n  cache.get(generateOptions(config, options)).then(function(result) {\n    resolve(createResponse(result));\n  }, function() {\n    axios.defaults.adapter(resolve, reject, config);\n  });\n}\n```\nI also think that adapters should return promises instead of getting the resolve and reject methods, but that's not an issue right now.\nI think Axios should leave caching out of the core and allow an implementation like this.\nWhat do you think?\n. I'm closing this issue due to inactivity. Feel free to reopen it if you consider it requires further discussion ;)\n. @john1jan hypothetical options for the cache client you use. For example, options for a catbox client.. Please, take a look at https://github.com/mzabriskie/axios/issues/206#issuecomment-233758315\n``` javascript\nvar axios = require('axios');\nvar axiosCookieJar = require('axios-cookiejar'); // It does not exist yet\naxiosCookieJar(axios, options);\n// Or\nvar instance = axios.create(...);\naxiosCookieJar(instance, options);\n```\n@damoclark, you could do that easily with the kind of plugin that I described, using different axios instances for those specific requests you talked about.\n. @lirantal we're rather short maintaining the functionality Axios has at the moment so adding things that can be implemented in plugins won't help that.\nI'm closing this issue as it won't be implemented in core and there's a library that implements this in ECOSYSTEM.md. I think we should close this issue and work on this only in #333.\n. I think we should just reject with the parse errors. That'd make axios more predictable and easier to debug.. I'm closing this issue as it's the expected behaviour. We're considering adding a new parameter to automatically configure the content-type and the data parsing, but that's a different issue.\n. Softonic - Node.js for now\n. This was solved after a refactor a few versions ago.. You can now use axios-retry for this.\n. @clayreimann I think we can close this PR because it's been open for over year and doesn't have a clear purpose. Once the promise the adapter returns is settled (because the complete response has been received or an stream was requested) is cannot change its state, so there's no need to add that flags because your .then will never be called more than once.\nIf you think there's more to this please add a comment and a failing test.\nThanks!. What about configuring axios dynamically with that information? E.g.:\njavascript\nvar port = 8080;\naxios.defaults.baseURL = location.protocol + '//' + location.hostname + ':' + port;\n. I'm closing this as we don't support specifying other granular urls parts as host or protocol and it can be implemented in user-land.. I'm sorry but I'm locking this thread as it seems we're doing circles around the same topic. If you have a specific issue that hasn't been covered in another issue (general CORS issues due to misconfiguration, POST requests being sent as JSON instead of form-urlencoded, etc.) please open a new one with specific details.. I think you should leave caching out of the Axios core, as it's usually complex (caching in memory does not scale in large applications, there isn't a standard interface for external caching services, etc.) and it can be implemented via interceptors.\nAlso, it looks like request cancellation is something that many libraries don't implement or don't document (I'm looking at you, fetch and request) and could be implemented later, after there is some consensus about what's the approach to be used.\nWhat do you think?\n. @mzabriskie I think #48 should be implemented in a plugin instead of inside Axios. Something that would be used like:\n``` javascript\nvar axios = require('axios');\nvar axiosCookie = require('axios-tough-cookie');\naxiosCookie(axios, options);\n// Or\nvar instance = axios.create(...);\naxiosCookie(instance, options);\n```\nIt's very similar to one I made for request retries (I'll open source it soon) and it was very easy to create and use.\nWhat we could define are some guidelines for plugin creation. Maybe a naming recommendation (axios-foo or axios-plugin-foo) or specific keywords in the package.json so they are easy to find (and list them here). Also we could use the plugin community to detect features that are very frequently used and add them to the core. Having this in the 1.0 documentation would be great.\n. @mzabriskie #107 I agree we should probably support it in the core. Not sure if it's a must for 1.0.\nAlso I considered that this could be done via an internal interceptor until I realized that it must be implemented in the http adapter (because it need to manipulate the parsed URL). Do you think we should consider that approach for the cases that allow it?\n. @ashishd751 there are ways to accomplish that other than adding that feature to Axios. Please take a look at https://github.com/mzabriskie/axios/issues/681#issuecomment-290991749 for more details.. AFAIK axios will detect as Node.js any environment without window so it should work fine in AWS Lambda. If it doesn't maybe it's for some other reason. Could you check?. I'd use a docs directory with markdown files and any static site generator as MKDocs.. I'm closing this issue due to inactivity. Feel free to reopen it if needed.\n. We need to start thinking about Promise as we think about Object. It is now a core feature of the language and we shouldn't expect libraries to use a different implementation (as we don't do that for Object, Array, Function or RegExp).\nIf you want to use a different Promise implementation in the backend and in the frontend you can do that either way (I suppose you can have specific polyfill files for each environment).\nIf you want to use .map or another custom method from Bluebird you can use the static version (Bluebird.map(promises, fn)) or you can wrap the promises returned by Axios (Bluebird.resolve(axiosPromise).map(fn)).\n. Maybe you should take a look to https://github.com/mzabriskie/axios/issues/370 before documenting the agent option publicly.\n. httpAgent and httpsAgent are already documented ;)\n. The things that I expected in an API client that made me choose this library where:\n- First-class promise support\n- Isomorphic / universal usage (Node.js, browser...)\n- Default headers & parameters\n- Request retries\n- Timeouts\n- Keep-alive requests\n- Logging\n- Response times\nExtensibility is key in this case. Not all the features I wanted where available in Axios but I could implement them via interceptors. I think it's the most important feature that Axios has.\nI used request-promise in a site that does ~2K requests/min. and I haven't noticed (inspecting application logs) any significant difference in response times when I migrated to axios.\n. You can use a response interceptor for that. Something like this should work (axios v0.12):\njavascript\naxios.interceptors.response.use(null, function(error) {\n  if (error.status === 401) {\n    return defaultResponse;\n  }\n  return Promise.reject(error);\n});\n. I don't know what dispatch is in the code you posted, but I think that's out of the scope of Axios. Maybe you haven't imported it or you're using it before it's defined.\n. That's right. I think it's the only option that can cause this issue.\nI also noticed that global defaults and instance defaults are merged twice: in the instance constructor and in the instance request method. Isn't that redundant?\nThanks!\n. I think that deep merging/cloning is worse in terms of performance and maintainability (in case we add new options we have to take into account that it will be deep cloned and it could fail if it contains circular dependencies).\nI'd whitelist the options we already know we should deep merge: headers (request & defaults), params, data and auth. Maybe transformRequest and transformResponse too.\n. You can do that without Axios. Maybe this can help you: http://stackoverflow.com/questions/20433287/node-js-request-cert-has-expired\nIf you want to use a https Agent configured to ignore SSL certificate errors, you can pass it as an agent option to your axios instance.\n. You can do that without Axios. Maybe this can help you: http://stackoverflow.com/questions/20433287/node-js-request-cert-has-expired\nIf you want to use a https Agent configured to ignore SSL certificate errors, you can pass it as an agent option to your axios instance.\n. Could you provide some code example that shows that behaviour? What default header are you trying to unset?\n. How did you tried to unset the header? Using something like this?\njavascript\naxios.request('/path', {\n  headers: {\n    'Content-Type': null\n  }\n});\n. Sorry I missed the method in my example. Could have been that what made it not work?\n. As someone said in #204, there are some cases where it is impossible to catch network errors in the browser, so Axios responds with a generic error (new Error('Network error')). If you want to distinguish them from bad responses (status code !== 2xx or custom check) I think the best way is just checking the status property instead of the error message. E.g.:\njavascript\naxios.request(options).catch(function(error) {\n  if (!error.status) {\n    // network error\n  }\n});\nI think setting a custom status code would be a bad idea (it could cause more confusion) and setting a specific property would not help at all because we only have a single error case.\nOf course in Node.js is easier because you have access to the actual error and can check according to the Node.js documentation.\n. As someone said in #204, there are some cases where it is impossible to catch network errors in the browser, so Axios responds with a generic error (new Error('Network error')). If you want to distinguish them from bad responses (status code !== 2xx or custom check) I think the best way is just checking the status property instead of the error message. E.g.:\njavascript\naxios.request(options).catch(function(error) {\n  if (!error.status) {\n    // network error\n  }\n});\nI think setting a custom status code would be a bad idea (it could cause more confusion) and setting a specific property would not help at all because we only have a single error case.\nOf course in Node.js is easier because you have access to the actual error and can check according to the Node.js documentation.\n. Axios returns promises so you can apply any promise-related technique that allows that. Maybe there's an external package for that (Bluebird or standalone) but I'd do something like:\n``` javascript\nfunction useNull() {\n  return null;\n}\naxios.all([\n      axios.request(options[ 0 ]).catch(useNull),\n    , axios.request(options[ 1 ]).catch(useNull),\n    , axios.request(options[ 2 ]).catch(useNull)\n]).then(axios.spread(function (res1, res2, res3) {\n    // res1, res2, and res3 contains the response or null if they failed\n}));\n``\n. This is something you can implement using thetransformResponse` config option or using response interceptors.\nSupporting it by default in axios would increase significantly the bundled size, given that we need to include a dependency to parse the received data against a schema. It also doesn't look like something most of our users will use, so I think the best way to go is like I said at the beginning. That feature could also be included in some axios plugin so you don't have to repeat the code every time.\n. Yes, you can use a request interceptor for that. E.g.:\njavascript\naxios.interceptors.request.use(function(config) {\n  if (config.method === 'get') {\n    config.headers.foo = 'bar';\n  }\n  return config;\n});\n. It's a bit hacky but you can. With the response you have the original node.js request which has the original response as a res property. E.g.:\njavascript\naxios.get(...).then(function(response) {\n  var fetchedUrls = response.request.res.fetchedUrls;\n});\n. I think option 2 is better but checking xsrfCookieName instead of xsrfHeaderName.\n. It should work. Could you copy the axios request you are performing (or the configuration if you are modifying the defaults)?\n. I'm closing this issue due to inactivity. Feel free to reopen it if needed.\n. I'm sorry but I'm with @nickuraltsev on this. Perhaps we should detect URLSearchParams objects differently (using duck typing detection instead of instanceof window.URLSearchParams, for example) but the solution isn't adding a specific polyfill to Axios (as it'd increase the bundle size and still won't work with other polyfills).\nAlso, if you don't put that implementation of URLSearchParams in the global scope you're not using it as a polyfill but a ponyfill, and those are meant for your code, not for external dependencies.\n. Sorry but we won't finally implement this. If you need a Promise replacement in the browser patch the global environment or use a tool like Webpack Provide plugin.. Could the error be here?\njavascript\nconsole.dir(response.config.validateStatus(response.response.status));\nThe status code should be in response.status not response.response.status.\nCould you please check?\n. @macnibblet What I meant is that your way of \"debugging\" what validateStatus was returning is not correct, as you weren't passing the right value.\nWhat's really weird in this case is that Axios is resolving with an error instance (according to your fix). Could you add more information about that error? Does it contain a response property? What's its status value?\n. It is intended. Header names are case insensitive. You can see it in the spec here\n. Have you checked in the developer tools if the request is ever sent? Could you copy here the details of the request, if any?\n. I think the issue is caused by the fact that the file: scheme always resolve with 0 as status code. That would explain why it isn't either resolved or rejected according to this part of axios (xhr adapter):\njavascript\n// The request errored out and we didn't get a response, this will be\n// handled by onerror instead\nif (request.status === 0) {\n  return;\n}\nAfter that code the promise is resolved and as onerror is never called the promise is never settled.\nThis is actually an Axios issue that should be addressed.\n. Timeout errors have ECONNABORTED as code. E.g.:\njavascript\naxios.get('/foo', { timeout: 1000 }).then(function(response) {\n  // Good response\n}, function(error) {\n  if (error.code === 'ECONNABORTED') {\n    // Timeout error\n  }\n});\n. Compression is done automatically in the browser, so it must be something unrelated to axios. Please test it with a newer version of your browser or maybe check if there's a bug in Node or Express about this.. There's actually an open PR for that: https://github.com/mzabriskie/axios/pull/437\nI hope it'll be merged soon.\n. It has to do with error detection/recovery, not with sync/async as adapters must return promises by definition. I'm discussing it with him now so I think we'll solve it soon.\n. It has already been merged. I hope it will bd released soon.\n. Mind that agent option has become httpAgent and httpsAgent in 0.14.0\n. I also fixed the test, which wasn't actually testing the changes the PR introduced (b8f6f5049)\n. @GGAlanSmithee it's implemented that way so you can recover from errors returning a new promise.\n@fakiolinho, you need to intercept errored responses in that case to redirect the user. Something like:\n```javascript\naxios.interceptors.response.use(null, (error) => {\n  if (error.response && error.response.status === 401) {\n    window.location = '';\n  }\nthrow error;\n});\n```. I think you can queue authentication requests with something like:\n``` javascript\nlet authTokenRequest;\n// This function makes a call to get the auth token\n// or it returns the same promise as an in-progress call to get the auth token\nfunction getAuthToken() {\n  if (!authTokenRequest) {\n    authTokenRequest = makeActualAuthenticationRequest();\n    authTokenRequest.then(resetAuthTokenRequest, resetAuthTokenRequest);\n  }\nreturn authTokenRequest;\n}\nfunction resetAuthTokenRequest() {\n  authTokenRequest = null;\n}\n```\nAnd then in your interceptor...\njavascript\naxios.interceptors.response.use(undefined, err => {\n    const error = err.response;\n    if (error.status===401 && error.config && !error.config.__isRetryRequest) {\n      return getAuthToken().then(response => {\n          saveTokens(response.data);\n          error.config.__isRetryRequest = true;\n          return axios(error.config);\n       });\n     } \n  });\nI hope this helps you ;)\n. I don't fully understand what your problem is or what is has to do with Axios. Could you elaborate a little and maybe add a code example?\n. Yes, it is the normal behavior as axios encodes the values in params for you. In your example you're getting a 404 because you're encoding the parameters twice.\nAxios doesn't process the query string included in the url, that's why your last case works.\n. ~~It isn't a broken behaviour~~. It's the behaviour defined by the HTTP standard (where any header allowed to have multiple values can be specified either as multiple headers or as a single header with comma-separated values).\nWe could return an array instead of combining the values, but that would be an important breaking change for the library ~~and wouldn't prevent a server from sending a comma-separated Set-Cookie header (which is perfectly valid)~~.\n. I'm sorry but I read the standard for HTTP State Management and it states that Set-Cookie cannot be folded as I explained:\n\nOrigin servers SHOULD NOT fold multiple Set-Cookie header fields into a single header field.  The usual mechanism for folding HTTP headers fields (i.e., as defined in [RFC2616]) might change the semantics of the Set-Cookie header field because the %x2C (\",\") character is used by Set-Cookie in a way that conflicts with such folding.\n\nThis is actually a bug. We'll look into it or will be happy to accept a PR.\nThanks for reporting!\n. This is a known bug. I'm closing this as duplicate of #385. Thanks for reporting.\n. We understand your concern but Axios doesn't mean to replace fetch nor mimic its behaviour. We don't even use it as an adapter to make the calls (we stick to XHR for the moment).\nAxios tries to be as configurable as possible providing the defaults that most people will use. In this case people tend to verify the status code right after a response from the server. E.g.:\njavascript\nfetch(url).then(verifyStatus).then(...);\nThat's why packages like fetch-check-http-status exist.\nWe want to avoid that structure that repeats so frequently. If you want to resolve with any valid response from the server you can always set validateStatus: false.\n. Sorry but we'll finally go with #558 as it's more consistent with Node.js. Thanks for your contribution.. @shyamchandranmec you can set the timeout to 0. That's the default axios value (no timeout).\n. Closing as this will be fixed in #1040 .. I reviewed the code and it should work as you describe. I noticed that in your example you use config.__requestId in the request interceptor and config.requestId in the response interceptor. Is it a bug in your code or a typo in the example?\n. I just did this quick test and worked fine:\n```javascript\nvar axios = require('axios');\naxios.interceptors.request.use((config) => {\n  config.foo = 'bar';\n  return config;\n});\naxios.interceptors.response.use((response) => {\n  console.log('Foo config', response.config.foo);\n  return response;\n});\naxios.get('https://github.com');\n// 'Foo config bar'\n```\nIf you have a failing test please reopen the PR with more context information.. Thanks!. Looks good. Could you please update the tests for this?. I was suggesting that you could use it because we're most likely to do it anywhere in a following PR, so it could save you some work in the implementation of the wildcards. This only works in Node.js so adding a new dependency here wouldn't be an issue.. @nareshbhatia yep, sorry.. I just merged #691, which is related to this one.. @inthemill that'd be great. I can give you some support if you need help with anything.. Does your server set the proper encoding in the content-type header? Maybe that's the issue.. Please, use StackOverflow or a similar service to ask for help. Github issues should be used for bugs or feature requests in this project.. We're sorry but this is too opinionated to be included in axios core and it makes perfect sense to implement it in a plugin (where you can add an interceptor to process the config). If you finally implement it we'd be glad to add it in ECOSYSTEM.md.\nWe've also rejected a proposal to implement URI templates which are similar to this.\nNext time please open an issue requesting the feature so we can discuss this before making the effort to implement it.\nThanks for your contribution.. Default headers shouldn't be set in interceptors. You'd usually set them after loading axios (using require or whichever method).\nIf you set them outside the interceptor you should be able to access them from your component.. This feature makes no sense in the context of Axios because the whole library is built around Promises (which are inherently asynchronous).. @SkaterDad is right. You can use response.config.url.. With that information I can only infer that there's an issue in your server. A 500 status code is an error in the server and not an issue in axios.. The error you're seeing is a regular HTTP response (401).\nWhat is the behaviour that you expect? Is the code in your interceptor running correctly?. >  I would expect the behaviour to return the actual response object (so what it currently does for success) on both success and error? Is this a misunderstanding on my end?\nThat's the intended behaviour so we can define a proper API for errors and we don't always have a response in case of error. Also, rejecting with a non-error is usually considered a bad practice.. That's normal. You can only use relative urls '/attask/...' in the browser. In other environments you must provide the full URL ('http://.../attask/...') or the baseUrl option.. Thanks for the PR!. You could try with two interceptors. A request interceptor (on resolved) that returns a rejected promise (with a custom \"offline error\") and a response interceptor (on rejected) that returns a resolved promise with the offline data (when the error is an \"offline error\"). . Global interceptors are not inherited by custom axios instances (and global defaults are only applied at instance creation time).\nI think in this case is a documentation issue.. We apply all the defaults and compute URLs before all interceptors all called. It's that way by design. If we delay combining the baseURL then we would break all interceptors that already use that feature.\nIf you need to know if the URL belongs to the site you can check the current URL in window.location. If you really need the exact URL used to call Axios the only solution I can think of is overwriting axios.request.\n. FormData isn't supported in Node.js for the moment. We'll track it in #789.. Axios targets Node.js and browsers only, and there is support for gzip and redirection in both environments, but no caching (browser client cache if any).. I'm sorry but this is not the right place to ask. Please try StackOverflow or other forums. This page is just to report issues in Axios (in the library itself or in the documentation) or to ask for features.. Agreed with @Chathula, this is a CORS issue, not a problem in Axios.. If you have any comment to add to the conversation, please do it in that issue.. This is a regular HTTP response, not an issue in Axios.\nYou should check the documentation of the API you're using in order to solve your problem.. Closing as duplicate of #434. Could you provide information about the error that is throwing? . I'm closing as it seems an issue on how the browser handles preflight requests and authorization, not an axios issue.. You can do it. Here you have an article that explains it: http://www.2ality.com/2016/04/unhandled-rejections.html\nI recommend you to catch all possible rejections in your promises manually to avoid ignoring errors and not displaying proper information to your users.. You can see the request being cancelled in the Network section of the developer tools.. You need to throw an error or return a rejected promise from your interceptor.\nAlso, you don't need to define the second parameter of use if it just re-throws the error (not passing a second parameters has the same effect).. Looks like it's an issue in that version of RN. See https://github.com/facebook/react-native/issues/11498#issuecomment-274163448. This could be solved in RN 0.41. Could you test it?. Response interceptors intercept any kind of error, including network errors. You need to register your error handling function as the second parameter of use (the one that handles errors). Could you please add an example where this fails?. I think what you're trying to achieve is a way to stop promise propagation under certain conditions.\nSomething like:\njavascript\naxios(...).then(handleResponse, handleSpecificErrors);\nSo when this request fails due to a network error, neither handleResponse nor handleSpecificErrors are called, right?\nThis is hard to achieve with promises as they're now (some cancellable promises proposals intend to solve things like this), but something you can do is to return a never resolved promise in your error response interceptor.\n```javascript\naxios.interceptors.response.use(null, (error) => {\n  if (!isGenericError(error)) {\n    return Promise.reject(error);\n  }\nhandleGenericError(error);\n  return new Promise(() => {});\n});\n```\nI don't like this solution very much as it may be dangerous in certain conditions, but is the only thing you can do to achieve that. You can also manage the errors sharing some logic in the rejection handlers of each call.\n. You need to authenticate with username and password using basic authentication. Also you're sending JSON with that request and the curl version uses \"application/x-www-form-urlencoded \". Please read the documentation:\n- https://github.com/mzabriskie/axios#request-config\n- https://github.com/mzabriskie/axios#using-applicationx-www-form-urlencoded-format. You must have an error in the request configuration passed to Axios. The library doesn't modify the response returned by the server, even if it's an error. Please review your code and reopen if you're sure there's something wrong with Axios.. I think the problem is that the proxy you're configuring is an HTTP server, not HTTPS.. I think so. I tried HTTP and it worked.. Please take a look at https://github.com/mzabriskie/axios#using-applicationx-www-form-urlencoded-format. You can check the error that is thrown when a request times out (error.code == 'ECONNABORTED') using the returned promise or an error response interceptor.. I don't think so. There are more cases where a promise can be rejected (cancellation, custom logic in interceptors, etc.) so I don't think it'd be a good idea to provide specific callbacks for each one.. I agree, but you should handle any kind of error in the request, not just timeouts, so adding a special case doesn't seem relevant.. PUT is also intented to be passed in lower case. What's the request you're making? What's the error you're seeing?. This isn't an issue but the expected behaviour. We implemented cancellation following the Cancellation Promises spec that was finally withdrawn. From the spec:\nA new class, Cancel, which does not derive from Error.\nWe implemented it as a way to cancel promises that just worked. When there's a new proposal we're open to implement it.. Not sure about what you want to accomplish but as long as this isn't a feature request, a bug or a specific question about axios but about general promise handling please use StackOverflow, our gitter channel or any other means.. Not sure about what you want to accomplish but as long as this isn't a feature request, a bug or a specific question about axios but about general promise handling please use StackOverflow, our gitter channel or any other means.. We don't officially support NWJS but please, include more information about your error. Where are you running it? What's the request you're making?. We don't officially support NWJS but please, include more information about your error. Where are you running it? What's the request you're making?. You need to configure the responseType option. From the README:\n// `responseType` indicates the type of data that the server will respond with\n  // options are 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'\n  responseType: 'json', // default\nIf you use text then response.data will be a string.. You need to configure the responseType option. From the README:\n// `responseType` indicates the type of data that the server will respond with\n  // options are 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'\n  responseType: 'json', // default\nIf you use text then response.data will be a string.. @graingert an HTML or XML DOM tree.. @graingert an instance of Document. Only valid for the browser.. @graingert an instance of Document. Only valid for the browser.. It's a normal server behaviour and Axios cannot avoid it. Please take a look at this page to learn more about CORS: https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS. It's a normal server behaviour and Axios cannot avoid it. Please take a look at this page to learn more about CORS: https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS. Closing as duplicate of #648. Closing as duplicate of #648. The maxRedirects option only works in Node.js (it's specified in the README) because browsers don't allow redirections to be disabled (there's no option for that).. The maxRedirects option only works in Node.js (it's specified in the README) because browsers don't allow redirections to be disabled (there's no option for that).. @mzabriskie could you clarify this?. @mzabriskie could you clarify this?. Sorry but we've finally merged #773 as it seemed more complete. Thanks for your contribution.. Sorry but we've finally merged #773 as it seemed more complete. Thanks for your contribution.. @jcready yes please. @jcready yes please. I'm sorry but this won't be implemented in Axios as sync requests are deprecated in most browsers and unavailable in Node.js.\nIf you absolutely need this you should implement it using the raw XMLHttpRequest object in supported browsers.. I'm sorry but this won't be implemented in Axios as sync requests are deprecated in most browsers and unavailable in Node.js.\nIf you absolutely need this you should implement it using the raw XMLHttpRequest object in supported browsers.. This isn't an Axios issue but a semantics different between arrow functions and regular functions.\nWith arrow functions this is the instance of the method where you call Axios. With regular functions, as you wrote it, this can be the globals object or undefined depending on you're in sloopy or in strict mode.. This isn't an Axios issue but a semantics different between arrow functions and regular functions.\nWith arrow functions this is the instance of the method where you call Axios. With regular functions, as you wrote it, this can be the globals object or undefined depending on you're in sloopy or in strict mode.. Is this being run in Node or in the browser? Have you inspected the request in the developer tools? What is being send? Have you seen any error in the console?. Is this being run in Node or in the browser? Have you inspected the request in the developer tools? What is being send? Have you seen any error in the console?. I haven't tested Axios with Webpack 2. It could be an issue. What is you're target in Webpack, browser or node?. I haven't tested Axios with Webpack 2. It could be an issue. What is you're target in Webpack, browser or node?. Is there a reason you can't use global axios defaults as they are? If not, you can just use the following code and the global defaults are automatically applied:\njavascript\nclass SomeClass extends Axios {\n  constructor(instanceConfig = {}) {\n    super(Object.assign({ baseURL: 'https://fancy.web.site/api' }, instanceConfig));\n  }\n}. Is there a reason you can't use global axios defaults as they are? If not, you can just use the following code and the global defaults are automatically applied:\njavascript\nclass SomeClass extends Axios {\n  constructor(instanceConfig = {}) {\n    super(Object.assign({ baseURL: 'https://fancy.web.site/api' }, instanceConfig));\n  }\n}. Why not? You should be able to do it with the headers option as explained in the docs.. Why not? You should be able to do it with the headers option as explained in the docs.. Could you please add a test for this?. Could you please add a test for this?. Could you please add a test for this?. I just reviewed the code and you should handle onabort as we do in manual cancellations using the cancel token. I suggest you to move onCancel to the request scope and use it in both places.\nAbout the unit tests, you can get the XHR request and manually abort it, to see it axios rejects with the proper error.. I just reviewed the code and you should handle onabort as we do in manual cancellations using the cancel token. I suggest you to move onCancel to the request scope and use it in both places.\nAbout the unit tests, you can get the XHR request and manually abort it, to see it axios rejects with the proper error.. Thanks for your contribution.. Thanks for your contribution.. You need to know what are the requirements of the API you're accessing. Some of them use a custom headers, some of them use parameters, etc. The most common thing is to use the Accept-Language header (which is automatically sent by the browser).\nI'm closing the issue as it isn't an Axios-related problem.. You need to know what are the requirements of the API you're accessing. Some of them use a custom headers, some of them use parameters, etc. The most common thing is to use the Accept-Language header (which is automatically sent by the browser).\nI'm closing the issue as it isn't an Axios-related problem.. Postman doesn't require CORS so you can't take it into account when comparing it with the browser.\nThis doesn't look as an issue in Axios. Are you getting any error from the browser?. Postman doesn't require CORS so you can't take it into account when comparing it with the browser.\nThis doesn't look as an issue in Axios. Are you getting any error from the browser?. I'd need more context to be able to help but I'm closing as it doesn't seem an Axios issue but a CORS one. I recommend you looking for similar issues here and in Stack Overflow. You may find there the problem that's causing this. I also recommend you reading the MDN article about CORS.. I'd need more context to be able to help but I'm closing as it doesn't seem an Axios issue but a CORS one. I recommend you looking for similar issues here and in Stack Overflow. You may find there the problem that's causing this. I also recommend you reading the MDN article about CORS.. At the moment Axios supports IE8+ without polyfills (but Promise), so doing that isn't an option for now. We could consider dropping support for browsers not supporting ES5 but it needs some discussion and work within the contributors.. At the moment Axios supports IE8+ without polyfills (but Promise), so doing that isn't an option for now. We could consider dropping support for browsers not supporting ES5 but it needs some discussion and work within the contributors.. This could be written as a plugin. Something like:\n``javascript\nfunction axiosTiming(axiosInstance) {\n  // Store request timestamp inconfig`\n  axiosInstance.interceptors.request.add(...);\n// Store response timestamp and/or response time in response/error config\n  axiosInstance.interceptors.response.add(...);\n}\n```\nI'm not sure this feature is common enough to add it to the core (although it'd be relatively easy to implement and wouldn't have a performance penalty for those not using it).\n@mzabriskie, @nickuraltsev, thoughts?. Closing due to inactivity.. Closing due to inactivity.. That is an issue in your server and not in axios itself. Please review your code.\nAlso, next time you open an issue please use markdown snippets to include code.. That is an issue in your server and not in axios itself. Please review your code.\nAlso, next time you open an issue please use markdown snippets to include code.. Please take a look at #583 as it's duplicated.. Please take a look at #583 as it's duplicated.. Closing this as it's not an issue in axios.. Closing this as it's not an issue in axios.. The http adapter is not available in the browser and all references to it are replaced by references to the xhr adapter by webpack. That is the expected behaviour.\nAlso, if you need to add interceptors you can do it without modifying the adapter, just using axios.interceptors.request.use(...) and axios.interceptors.response.use(...). More info in the docs.. The http adapter is not available in the browser and all references to it are replaced by references to the xhr adapter by webpack. That is the expected behaviour.\nAlso, if you need to add interceptors you can do it without modifying the adapter, just using axios.interceptors.request.use(...) and axios.interceptors.response.use(...). More info in the docs.. This is the expected behaviour. In the browser relative paths are to the directory so:\n```\nCurrent URL: http://localhost/myapp\nRelative URL: /customers\nAbsolute URL: http://localhost/customers\nCurrent URL: http://localhost/myapp/\nRelative URL: /customers\nAbsolute URL: http://localhost/myapp/customers\n```\nMind the final slash in the current URL.\nThis is how relative URLs work in the browser. If you want to modify this behaviour you can manually set the baseUrl in axios.. If the request is done to the domain configured in the cookie (or exactly the same domain if not configured), the cookie is automatically sent by the browser. Otherwise you there's no way to use it.. URL parameters aren't supported and I doubt they'll ever be given the easy it is with template strings.. You can chain the results as they are regular promises:\njavascript\naxios.get(...)\n  .then((response) => {\n    return axios.get(...); // using response.data\n  })\n  .then((response) => {\n    console.log('Response', response);\n  });. No, it should be defined. Mind the return statement. You've probably missed it.. You can use an array parameter, but it'll be sent as where[]=... instead of as where=....\njavascript\nparams: {\n    start_date: moment().subtract(6, 'd').format('YYYY-MM-DD'),\n    end_date: moment().format('YYYY-MM-DD'),\n    measurement: 'unique',\n    where: [\n      JSON.stringify([\"Campaign Name\", \"=\", this.campaignName]),\n      JSON.stringify([\"$attributed_message\", \"=\", 'Abandoned Cart: Email 1'])\n    ]\n}. I don't recommend you doing so, but if you finally want it you can return a never-resolving promise in your interceptors. E.g.:\njavascript\ninstance.interceptors.response.use((response) =>\u00a0{\n  if (someCondition(response) {\n    return new Promise(() => {});\n  }\n  return response;\n});. This is something that will be fixed once #61 is done.. @nickuraltsev could you answer this?. Files in dist are meant to be used in browsers only, and Axios also works in Node.js.. If the response isn't successful then the second parameter of axios.interceptors.response.use is used. E.g.:\njavascript\naxios.interceptors.response.use(interceptSuccessful, interceptError);. Right, it seems we should move the default method to defaults:\njavascript\nconfig = utils.merge(defaults, this.defaults, { method: 'get' }, config);\nHave you considered creating a PR?\nThanks for reporting.. It's handled differently in the code, not by setting a value in the defaults object. Are you experiencing any issue for this?. Closing as we'll track this in #774 that has more information. Thanks for reporting!. This error could be somewhere else in your code, but doesn't seem an issue related to axios. Please try to debug it better and if you find a specific issue in axios please open a new issue with more details.. Closing as the answered by @jcready is correct.. I'm closing the issue as it's the expected behaviour.. Not sure why it was done the way it is, but axios is not a class/constructor and axios.create doesn't return an instance of it.\nI recommend you to check the existence of a specific interface (like the request function) instead of using instanceof that could have a weird behaviour in some contexts.. Promises are part of the core of axios and it's unlikely to change. There's a proposal to implement a \"finally\" method in promises that you could benefit from if it makes it to the spec.. If you can't make the test work in your computer you can commit and push it so it can be run by our CI. You'll see the results here.. Closing due to inactivity. Please reopen with more information if you need it.. Closing due to inactivity (and the issue seems to be in the way the request is configured).. The response you're providing doesn't set any cookies, so I'm guessing that's not the problem. It should be something related to your authorization server.\nI'm closing the issue because it's not related to axios.. Are you using axios in the server or in the browser? If you're using the browser the compression is done automatically by it. If you're using Node.js the compression of the body isn't supported for the moment. You can do it manually (piping your stream to one of the transform streams in zlib).. The use case you have is very specific. I don't recommend you using any approach that involves setTimeout, setImmediate or nextTick as you'd be making too many assumptions about how axios make the request.\nI'd recommend you to define a custom adapter that just calls the default one, clears the cookies and returns the result. E.g.:\njavascript\nconst defaultAdapter = axios.defaults.adapter;\nconst cookieClearingAdapter = (...args) => {\n  const result = defaultAdapter(...args);\n  clearCookies();\n  return result;\n};\naxios.request({\n  ...,\n  adapter: cookieClearingAdapter\n});\nI hope this helps.. Axios probably shouldn't remove a specific header set in the request, but also your request configuration doesn't make sense. You're telling your server that the content you're sending is 'application/json` but you aren't actually sending any content.. You can do this using an interceptor. E.g.:\njavascript\naxios.interceptors.request.use((config) => {\n  if (config.addTrailingSlash && config.url[config.url.length-1] !== '/') {\n    config.url += '/';\n  }\n  return config;\n});\nWe're trying to only add features to axios that will be used by most users. Otherwise, if possible, you should use interceptors.. @lkmadushan I'm closing the issue. Please reopen if what @xakep139 said didn't work and please provide an example of code that fails.. I think the problem is that you're not returning the axios response (return axios.post(...)). Next time please try to use issues to report bugs in axios or request specific features.. For general programming questions please use StackOverflow or any other forum platform. We're trying to maintain this only to report bugs or request features in axios.. It seems to be an issue in your API. By default axios sends application/json as Content-Type. Maybe your API isn't compatible with that or you should use application/www-x-form-urlencoded instead.. It seems not all browsers support wildcards in Accces-Control-Allow-Headers. Take a look at http://stackoverflow.com/questions/13146892/cors-access-control-allow-headers-wildcard-being-ignored.. Please, next time provide a code example so we can better determine if that's an issue in axios and help you.\nYou may be setting a header that you cannot set in the browser (e.g.: host). See https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name. You can use interceptors for that. You can read more about them in the documentation: https://github.com/mzabriskie/axios#interceptors. Thanks for your contribution!. Thanks for your contribution!. You can implement this using (interceptors)[https://github.com/mzabriskie/axios#interceptors] that can run before requests are sent and after responses are received.. Thanks!. Closing as @lbausch's solution should work.. The spec doesn't forbid it indeed but it's not supported by axios for the moment. Could you consider creating a PR for this?. @Franke123 exactly. Contributions are always welcome ;). Closing as it won't be implemented and it's duplicated from #681.. You can do it manually in Node.js but we don't support it natively in axios for the moment.. I think we're more likely to remove these helpers from axios than adding new ones. The goal of axios isn't to provide utilities for promises but to make requests easily. I'm sure there are libraries out there to do this better than axios would.. I'm closing the issue then. Feel free to reopen if you discover anything new.. It does. There are a couple of references to them in the docs.\nAdding an example in the docs would probably help. We're planning to improve the docs but if you want to help you can open a PR with that example.. axios.post(url[, data[, config]]) already means what you're saying, but I agree it could be clearer. How would you put it? Could you consider creating a PR for this?. before isn't an axios option. Please review the documentation. You may want to use an interceptor to implement hooks before requests are sent.. Could you provide more context (axios version, environment, etc.) and a code snippet that shows your problem?. I'm guessing you're doing it in Node.js because you can't get the final URL in the browser.\nThere isn't a clean way to do this now. You can use your solution or response.request.res.responseUrl which doesn't access any \"private\" property.. Redirects are automatically followed by browsers so you can never get the original 302. It seems that you're server is returning that 504 for the second request.. It seems a difference on how browsers handle active requests after a reload, not an axios issue. If you're seeing a network error is that the browser notified an error instead of a response (with any status code). Browsers don't provide more information to XHR than \"an error occurred\".. Why do you even need to handle this? If the user refreshed the page when it was performing an operation it makes sense to display an error.. I think this is something @mzabriskie should answer, but I don't think there are many ways to pronounce it.. You can use a FormData object in the browser. In Node.js the feature isn't supported yet by axios (see #789).. Closing as this seems duplicated from #265.. This is rather complex and most users won't benefit from it, so it won't make it to axios. You can implement it in an interceptor. We would be glad to add it to ECOSYSTEM.md if you create it and open source it.. Thanks for you contribution, but this can be implemented as an interceptor and we're trying to keep axios as simple as possible. We'd consider it if most users used this feature or it'd be difficult to implement in user-land, but I don't think that's the case.\nNext time please open an issue before implementing a new feature so you can save some effort in case we consider it shouldn't be a part of the library. We've created a PR template to prevent this in the future.. Thanks for you contribution, but this can be implemented as an interceptor and we're trying to keep axios as simple as possible. We'd consider it if most users used this feature or it'd be difficult to implement in user-land, but I don't think that's the case.\nNext time please open an issue before implementing a new feature so you can save some effort in case we consider it shouldn't be a part of the library. We've created a PR template to prevent this in the future.. There's no way to do that with regular HTTP requests. You could split this into different calls to your endpoint to track the progress or implement some mechanism using websockets or any other bidirectional data stream.\nI think StackOverflow is a better place to ask. We try to keep GH issues only for bugs or feature requests.. Closing as duplicate from #813 . That isn't supported for the moment but you can implement it yourself specifying a custom transformResponse function.. This doesn't seem a bug in Axios so please ask for help in StackOverflow or any other forums. We try to keep this only for bugs and feature requests.. Just can just make both calls as they are asynchronous and one won't block the other.. Closing as duplicate from #265.. You can just configure that in your tests instead of in your production code. E.g.:\n```javascript\nimport axios from 'axios';\nimport httpAdapter from 'axios/lib/adapters/http';\naxios.defaults.adapter = httpAdapter;\ndescribe('your test', () => {\n  ...\n});\n```. It should work if you assign the default adapter just after importing axios in the test file. axios defaults are global and they work even if you do it in different files.\nIt should also work if you assign it before dispatching the the action.. It isn't supported for the moment. Also closing as duplicate from #789.. You need to rethrow the error. If you don't axios considers you have recovered from the error.\nYou can make it work doing it this way:\njavascript\naxios.interceptors.response.use((response) => {\n  return response;\n}, (error) => {\n  console.log(error);\n  return Promise.reject(error);\n});. By default params are serialized with a custom format. You can replace how params are serialized passing a function or configuring an external package. See paramsSerializer in the README for more info.. You aren't configuring the request correctly. The body option doesn't exist in axios. You should use data instead. And the first option for post is the data itself, not the axios config.\nYou can see an example request with content type application/x-www-form-urlencoded in the README: https://github.com/mzabriskie/axios#using-applicationx-www-form-urlencoded-format. OK for me. But before merging... @mzabriskie, @nickuraltsev is there any reason why we don't use the latest compatible version? I mean ^1.2.3 instead of 1.2.3.. Thanks @jcready!. There's no support for the complete history but there's a way to get the last url. See #799.. We use follow-redirects internally to implement redirections and it doesn't provide it. In case anyone is interested in this, it should be implemented there and then adapted here.. As this isn't documented nor tested isn't actually a bug, but I understand it should be executed in the proper order.\nThe tests for response interceptors test the actual order but those for the request don't. \nAre you willing to create a PR to solve this?. Please take a look at https://github.com/mzabriskie/axios/issues/978#issuecomment-323174552. That doesn't look like an issue in axios but you haven't provided enough information for us to find out. Please, make sure it's an issue in axios and share a code snippet where something fails (and please be more specific about the error).. You can do it with Axios. When the error response interceptor returns a value or a promise, it'll use that value to resolve the returned value from Axios. If you want to re-throw the error you must throw or return Promise.reject(...).. Thanks for the fixes!. It's a CORS issue, not in axios. Please take a look at the link @jffernandez provided or look for similar issues here.. Sorry but this doesn't point to any actual error in Axios. If you have a concrete use case with examples of Axios failing please reopen with more details.. You can do this using interceptors so a specific feature for this isn't likely to be implemented.. Axios doesn't support it but you can manually replace the default Authorization header when it's received or use an interceptor to set it automatically.. This isn't an issue in Axios but a browser behaviour (probably mimicked by React Native). See https://stackoverflow.com/questions/13783442/how-to-tell-if-an-xmlhttprequest-hit-the-browser-cache for more details.. We're usually avoiding adding new dependencies to the project but since the module is very small I think it's OK. @mzabriskie, @nickuraltsev WDYT?. Passing a cancelToken as an option to axios.create sets it as the default value. You should pass it in your request config.. Axios isn't making those requests, the browser is. Please take a look at CORS.. Please don't commit changes to the files in dist. Could you undo them in the PR?. You need to add the code that uses that variable in a then call of the promise, as the request is asynchronous and you can't access the value immediately after calling axios. This isn't really the proper place to ask, so please use StackOverflow or similar.. @ofirgeller I see the point, but there's also the fact that we don't currently limit the allowed request methods. In this case, you're missing OPTIONS, CONNECT and TRACE from the spec.\n@nickuraltsev you know TS better than I do. WDYT?. Sorry but I don't see the point for this change. relativeURL must be a string and accepting anything else may cause more errors than it solves. You should convert the value in your code.. React Native uses XMLHttpRequest under the hood, so we cannot configure the maximum number of redirections as we can with thefollow-redirects module in Node.js. That should be a restriction of the platform and I don't think you can overcome it with axios.\nNext time please add the proper context in that section of the issue description.. From the code you share I can't really help, as I don't see anything wrong. I'm closing as this isn't an issue in Axios anyway.. You should review your code structure because it doesn't seem Axios can have anything to do with this. Perhaps the exceptions are thrown within a promise handler or an interceptor.. This behaviour is intended as it follows this Cancellable Promise proposal that was finally withdrawn.\nWe don't have plans to replace this until another approach has enough traction in the ecosystem.\n. You can do that with an interceptor that handles authentication errors. Something like:\n```javascript\naxios.interceptors.response.use(null, (error) => {\n  if (error.config && error.response && error.response.status === 401) {\n    return updateToken().then((token) => {\n      error.config.headers.xxxx <= set the token\n      return axios.request(config);\n    });\n  }\nreturn Promise.reject(error);\n});\n``. If you take a look at your stack trace you'll notice there are traces of jsdom. That means you're using a jsdom/browser environment rather than node. It's just a jest configuration issue.. Please take a look at https://github.com/mzabriskie/axios/issues/934#issuecomment-322003342. Theallhelper is only available in the axios object, not in any instance. I'm in favor of removing those helpers from axios, so you should be usingPromise.allanyway.. Fixed in #950 . This works this way by design. If you want to check the headers in a redirect response you shouldn't automatically follow redirects and do it manually. You can do this by settingmaxRedirects: 0in the configuration.. Thanks for your contribution.. Please remove all changes relating the package.json and the generated files indistas that would be part of our release process.. Could you share a more complete example ofdatabeing a stream not working properly? . Could you please solve the conflicts so this can be merged?. That version is compatible with the one in the package.json, so it should work fine if you update it.. Thanks for the PR!. You can use a customtransformResponse` option in your request config. Please review the documentation.. I'm sorry but for the moment there isn't any contributor that speaks Chinese. If any user translates this we'll reopen.. I'm closing this PR as it doesn't seem an issue in Axios but in your web server.. It's clearly not a priority for us as this seems an uncommon use case, but if adding this feature doesn't add much complexity to axios we can consider adding it.\nAre you willing to create a PR for this with some tests?. ping @mzabriskie \n. This is more a feature than a bug (because the behaviour in this case isn't documented). If we implement this we should answer (and document) some questions first:\n\nAre global interceptors inherited by instances in run time or copied when created?\nIf they are inherited in run time, what should be the order of the interceptors?\n\nWe can ask the same about the rest of the instance vs global defaults by in most cases the order factor doesn't exist.\n@mzabriskie, @nickuraltsev: thoughts?. That is a very specific use case and can be implemented via plugins. We're trying to maintain the Axios core small so this isn't likely going to be implemented.. Closing until more information is provided.. Here you have:\nhttps://tools.ietf.org/html/rfc2616#section-9.2\nSpecifically:\n\nthis\n   specification does not define any use for such a body\n\nIn the future they may but not for now.. This should be easy to implement as you don't need to modify any tests (this specific use-case is hard to test so we can do it without them).\nI'd decorate the resolve and reject functions in the Promise so when called you always clear the interval. If it was already cleared it won't cause any errors so you don't need to check it before.\nE.g.:\njavascript\nreturn new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n  var timer;\n  var resolve = function resolve(value) {\n    clearTimeout(timer);\n    resolvePromise(value);\n  };\n  var reject = function reject(value) {\n    clearTimeout(timer);\n    rejectPromise(value);\n  };\n  ...\nThis way you can remove the rest of clearTimeout calls in the code.\nThis implementation would also fix #459 and replace #487 . That isn't likely a problem in Axios so can you please send this to Gitter or StackOverflow and provide enough information to understand what problem you are having? Thanks.\n. You can use Bluebird.map to control the concurrency of any Promise-based code. See http://bluebirdjs.com/docs/api/promise.map.html\nThis is out of the scope of Axios.. You must create a new cancel token for each request. If you use the same one and cancel it, all requests will be cancelled. It works this way by design.. You must create a new cancel token for each request. If you use the same one and cancel it, all requests will be cancelled. It works this way by design.. Merged. Thanks for your contribution.. Merged. Thanks for your contribution.. @mmarvick in Node.js is an HTTP request, so it's fine using any as it's environment dependent. Thanks for your contribution.\nFixes #1014 . @mmarvick in Node.js is an HTTP request, so it's fine using any as it's environment dependent. Thanks for your contribution.\nFixes #1014 . I don't completely understand your code but you must be using the same cancellation token for all request. You should create a new one for each request so this doesn't happen.. I don't completely understand your code but you must be using the same cancellation token for all request. You should create a new one for each request so this doesn't happen.. This issue doesn't follow the issue guidelines. Please edit it to follow the information provided in the issue template.. This issue doesn't follow the issue guidelines. Please edit it to follow the information provided in the issue template.. When Axios returns those errors it's because it's a browser error and the browser doesn't provide the library with more information (Axios can't know what happened). They're usually security errors \n (such as CORS errors) and you must see the console to check them.. When Axios returns those errors it's because it's a browser error and the browser doesn't provide the library with more information (Axios can't know what happened). They're usually security errors \n (such as CORS errors) and you must see the console to check them.. We'll review that PR so I'm closing this as duplicate.. We'll review that PR so I'm closing this as duplicate.. That isn't likely a problem in Axios so can you please send this to Gitter or StackOverflow and provide enough information to understand what problem you are having? Thanks.. That isn't likely a problem in Axios so can you please send this to Gitter or StackOverflow and provide enough information to understand what problem you are having? Thanks.. I'm closing this as it isn't likely an issue in Axios.. I'm closing this as it isn't likely an issue in Axios.. That isn't likely a problem in Axios so can you please send this to Gitter or StackOverflow and provide enough information to understand what problem you are having? Thanks.. That isn't likely a problem in Axios so can you please send this to Gitter or StackOverflow and provide enough information to understand what problem you are having? Thanks.. Axios doesn't limit the number of requests you can perform, so the limit must be somewhere else.. Axios doesn't limit the number of requests you can perform, so the limit must be somewhere else.. There is no problem there. The field is baseURL as documented in the docs. That isn't the cause of any of those issues.. That isn't likely a problem in Axios so can you please send this to Gitter or StackOverflow and provide enough information to understand what problem you are having? Thanks.. That isn't likely a problem in Axios so can you please send this to Gitter or StackOverflow and provide enough information to understand what problem you are having? Thanks.. That isn't likely an issue in Axios, so can you please send this to Gitter or StackOverflow and provide enough information to understand what problem you are having? Thanks.. That isn't likely an issue in Axios, so can you please send this to Gitter or StackOverflow and provide enough information to understand what problem you are having? Thanks.. That isn't likely a problem in Axios so can you please send this to Gitter or StackOverflow and provide enough information to understand what problem you are having? Thanks.. That isn't likely a problem in Axios so can you please send this to Gitter or StackOverflow and provide enough information to understand what problem you are having? Thanks.. Thanks for your contribution, but we hope to solve this in a PR with a broader scope (see #812). Also we aren't likely to add additional dependencies to the library.. Can you please send this to Gitter or StackOverflow and provide enough information to understand what problem you are having? Thanks.. Can you please send this to Gitter or StackOverflow and provide enough information to understand what problem you are having? Thanks.. Could you also remove the && !timer condition from the if? It's only set inside it.. Could you also remove the && !timer condition from the if? It's only set inside it.. @pbarbiero travis isn't working for this specific PR and I'm not sure why. Once I figure it out I'll merge this, but the code looks good to me.. LGTM but I'd like @mzabriskie or @nickuraltsev to confirm the previous behaviour wasn't intended for some reason.. LGTM but I'd like @mzabriskie or @nickuraltsev to confirm the previous behaviour wasn't intended for some reason.. Axios uses Promise.all under the hood so you must be polyfilling it already.. As it's asyncronous code you need to put the code that uses the response inside a then block. You can't the result to threads as if it were sync code.\nClosing as this has nothing to do with Axios anyway.. As it's asyncronous code you need to put the code that uses the response inside a then block. You can't the result to threads as if it were sync code.\nClosing as this has nothing to do with Axios anyway.. This is indeed something worth mentioning in the docs. Would you be interested in creating a PR? ;). Sorry but this doesn't follow the issue guidelines. It doesn't look like an issue in axios anyway.. Please take a look at https://github.com/mzabriskie/axios/issues/934#issuecomment-322003342. That should be an issue in that CDN or the browser. Axios just returns the statusText in the XHR response.. That should be an issue in that CDN or the browser. Axios just returns the statusText in the XHR response.. With the information you provided is hard to say what's wrong. We'd have to see the logs of the browser and the exact response axios is returning to see what's happening. Please add that and we'll reopen the issue.. With the information you provided is hard to say what's wrong. We'd have to see the logs of the browser and the exact response axios is returning to see what's happening. Please add that and we'll reopen the issue.. That isn't an issue in Axios but it's how promise chaining works.\nIn this case:\n``javascript\nconst ajaxPromise = axios({\n    method: \"get\",\n    url: \"https://httpbin.org/get?foo=baz\"\n}).then(response => {\n // This return value will be used to resolveajaxPromise`\n});\najaxPromise.then(response => {\n});\n```\najaxPromise will resolve with what the callback in the first .then() returns.. That isn't an issue in Axios but it's how promise chaining works.\nIn this case:\n``javascript\nconst ajaxPromise = axios({\n    method: \"get\",\n    url: \"https://httpbin.org/get?foo=baz\"\n}).then(response => {\n // This return value will be used to resolveajaxPromise`\n});\najaxPromise.then(response => {\n});\n```\najaxPromise will resolve with what the callback in the first .then() returns.. thanks @robaxelsen . thanks @robaxelsen . There's a typo in the content type. thanks @jcrben . Maybe you should include a test to check that document.cookie isn't read if xsrfCookieName is null, as it's the main motivation of this PR. We can only do that using ES5 getters and we haven't used them in any test (nor the production code). It will work in the test runners but we claim to support IE8+ for the production code, so I'm not entirely sure it's a good idea. What do you think @mzabriskie @nickuraltsev ?\n. I agree. @pracucci, can you add that test?\n. The config that is passed to the interceptors already has all the defaults applied, so that shouldn't be a problem.\n. You don't actually need Bluebird. You can just create a spy function from scratch:\n``` javascript\nvar defaultConfig = jasmine.createSpyObj('defaultConfig' ['Promise']);\n...\nexpect(defaultConfig.Promise).toHaveBeenCalled();\n``\n. I think we better detect it at this point rather than falling back to any other implementation without errors. That way is much harder to debug, don't you think?\n. I think I'll end up using this version more frequently, because I find it clearer than the previous one (it's basically a deferred object). I'd put it before theCancelToken` constructor version so people will find it more approachable.\nMaybe it's just a personal preference and not everybody will see it that way.\n. I'd avoid instanceof because it may cause issues working with different versions of axios in the same application (a Cancel instance from a version will not be an instanceof the Cancel constructor from the other version).\nI'd define an isCancellation property in Cancel instances to do these checks or any other equivalent if it is defined in the spec.\njavascript\n}).catch(function(thrown) {\n if (thrown.isCancellation) {\n. As I said in a previous comment, I'd do this.isCancellation = true; here\n. @nickuraltsev I understand. I wouldn't be a problem with the native objects (but even those may suffer this instanceof problem under certain conditions) but will be with all the polyfills. Perhaps we can define axios.isCancellation(error) that work with both axios-defined classes and native classes if they exist (axios.isTimeout(error) would also be helpful). That way we ease the migration and also protect them from these problems.\n. I order to keep a consistent API, please define auth as the auth parameter used for non-proxy requests (auth: { username, password\u00a0}).\n. You can use this shorter version:\njavascript\nparsed[key] = [].concat(parsed[key], val);. I think it'd be simpler just saying:\njavascript\n// Use `false` to disable proxies, ignoring environment variables.. I'd move the default method to the defaults file so we don't have exceptions in other parts of the code.. It isn't required but I think this way is more consistent (and I'm thinking about 1.0.0). If you don't agree or think the cost is too high I can go back the previous format.. This parameter should be response. Please don't export functions just for testing. This can be tested throught the behaviour of the request.. @vbfox would you mind changing this?. I don't see the benefit of doing so. This would be pretty easy to fix and the library is still 0.x, so I think it's better to just change instead of deprecating it. WDYT?. The default is utf8 (without the dash) but as it's the Node Buffer default value you don't need to set the || 'utf8, you can just pass the config.charset.. I'd use responseEncoding (adding the response prefix to make it clearer and using encoding to match the Node.js naming).. I know it was in the original code but you don't need to set timer = null.. I know it isn't necessary but could you also remove the && !timer from the condition below? I think it never applies because the timer is only set inside the if.. I'd use a protocol option instead, accepting both http and http: formats so parsed URL can be passed as the proxy option.. I'd use isHttpsProxy instead as it's clearer.. I meant function (data, response) { here. I meant function (data, config) { here. ",
    "cristian-eriomenco": "Is there a solution for this? It seems odd that there is no obvious way onto caching requests.... ",
    "john1jan": "@rubennorte what is options in cache(axios, options); ?\n. ",
    "jnv": "Depending on your use case, you can just override get function:\n```js\n// Create intercepting get function which returns cached promise,\n// hence multiple requests to the same URL will be resolved by\n// a single promise.\nfunction cachingGet (get) {\n  const cache = new Map()\nreturn function cachedGet (url) {\n    const key = url\nif (cache.has(key)) {\n  return cache.get(key)\n} else {\n  const request = get(...arguments)\n  cache.set(key, request)\n  return request\n}\n\n}\n}\nconst instance = axios.create(config)\ninstance.get = cachingGet(instance.get)\n```\n. Depending on your use case, you can just override get function:\n```js\n// Create intercepting get function which returns cached promise,\n// hence multiple requests to the same URL will be resolved by\n// a single promise.\nfunction cachingGet (get) {\n  const cache = new Map()\nreturn function cachedGet (url) {\n    const key = url\nif (cache.has(key)) {\n  return cache.get(key)\n} else {\n  const request = get(...arguments)\n  cache.set(key, request)\n  return request\n}\n\n}\n}\nconst instance = axios.create(config)\ninstance.get = cachingGet(instance.get)\n```\n. ",
    "Rebolon": "maybe a better solution would be using adpater pattern ? . ",
    "RasCarlito": "Made a thing for this https://github.com/RasCarlito/axios-cache-adapter :)\nI released a first version but it needs more testing. Hope it can be useful for others.\nI'm going to implement it in a big project for one of my clients.\nBy default it uses an in memory custom store for the cache.\nIn browsers it can receive a Promisified localStorage instance like localForage.\nI haven't explored for an equivalent solution in Node.\nExample:\n```js\nimport axios from 'axios'\nimport { setupCache } from 'axios-cache-adapter'\nconst cache = setupCache(/ options /)\nconst api = axios.create({\n  adapter: cache.adapter\n})\napi.get('some-url').then(response => / Do something awesome with response.data \\o/ /)\n```\nCheers :beers: . Bouygues Telecom - browser. ",
    "kuitos": "I have made a set of extensions for axios, including caching GET request, which depends on axios custom adapter mechanism and lru-cache, and the most important thing is the test coverage has reached 100% \ud83c\udf89. https://github.com/kuitos/axios-extensions\nExample\n```js\nimport axios from 'axios';\nimport { cacheAdapterEnhancer } from 'axios-extensions';\nconst http = axios.create({\n    baseURL: '/',\n    headers: { 'Cache-Control': 'no-cache' },\n    // cache will be enabled by default\n    adapter: cacheAdapterEnhancer(axios.defaults.adapter)\n});\nhttp.get('/users'); // make real http request\nhttp.get('/users'); // use the response from the cache of previous request, without real http request made\nhttp.get('/users', { cache: false }); // disable cache manually and the the real http request invoked\nbtw, I have made another powerful extension, which can throttle the requests in the threshold time.js\nimport axios from 'axios';\nimport { throttleAdapterEnhancer } from 'axios-extensions';\nconst http = axios.create({\n    baseURL: '/',\n    headers: { 'Cache-Control': 'no-cache' },\n    adapter: throttleAdapterEnhancer(axios.defaults.adapter, 2 * 1000)\n});\nhttp.get('/users'); // make real http request\nhttp.get('/users'); // responsed from the cache\nhttp.get('/users'); // responsed from the cache\n```\nfor more information u can check the api doc\nHope that can be useful for u and feel free to ask any questions\ud83d\ude42\n. ",
    "anthlasserre": "To people just want to disable cache I used:\nconst config = {   headers: {'Content-Type': 'application/json','Cache-Control' : 'no-cache'}};\nand call my api like this:\nconst { data } = await axios.get('http://www.youraddress.com/api/data.json', config);. ",
    "hugomrdias": "can we agreed that at least axios should reject with an Error instance ? \nmy view would be always return a native error, NetworkError or ResponseError, the last one with the response object as an instance property ?\nwith this anyone can write an interceptor to resolve or reject with any status code and also silence Bluebird warning about rejecting with a non-error :) \ncheck the fetch polyfil \nhttps://github.com/github/fetch/blob/master/fetch.js#L345\nhttps://github.com/github/fetch/blob/master/fetch.js#L359\n. ",
    "bebraw": "Doesn't that effectively mean that if you want to add finally to axios, then all you need to do it is to shim es6-promise with the aforementioned library? Ie. you would do:\n``` javascript\nvar axios = require('axios');\nrequire('promise.prototype.finally');\n...\n```\nIf so, it's probably better leave it out of the core library and just document that this is possible. That way you don't bloat the current implementation while keeping options open for people that might want the feature.\n. ",
    "toymachiner62": "Google brought me here, but es6 does support finally https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally. \nShould this issue be reopened to add support for .finally?. ",
    "lzl124631x": "@mzabriskie . @TCGV Frankly speaking I like the jQuery way since it's more compact  \ud83e\udd26\u200d\u2642\ufe0f  Thanks for your solution.. @montogeek I'm currently using bluebird (P.pending especially, which is like $.Deferred()) to mimic $.when. As you can see I have to use a promise library.\n```\nimport P from 'bluebird'\nvar loginDeferred = P.pending()\nfunction wechatLogin() {\n  var code = util.getQuery('code')\n  var token = cache.getJSON(code)\n  if (token) {\n    loginDeferred.resolve(token) // <--- $.when(token);\n  } else {\n    post('/wechat/login', {\n        code: code\n      })\n      .then(res => {\n        token = res.data\n        cache.setJSON(code, token)\n        loginDeferred.resolve(token)\n      })\n      .catch(err => {\n        loginDeferred.reject()\n      })\n  }\n  return loginDeferred.promise\n}\n```\n. @raygesualdo Thanks. The ES6 Promises is basically the same as the ones in bluebird. The async/await is so cool.\nTo sum up, use one of the following options:\n ES6 Promise\n ES7 async/await\n* An promise library e.g. bluebird.\nThank you all.. ",
    "RobinBressan": "Hi, thanks for your quick response! It is a light requirejs which aims to replace requirejs after the optimization process to get a lib working without a requirejs dependency.\n. I switched to browserify and it works.\n. ",
    "z424brave": "Hi\nDid this fix ever make it to release.\nI am currently trying to set responseType to \"arraybuffer\" in code to be shared between node and browser. It works fine in node but not in browser. \n. Hi\nDid this fix ever make it to release.\nI am currently trying to set responseType to \"arraybuffer\" in code to be shared between node and browser. It works fine in node but not in browser. \n. ",
    "vkurchatkin": "Here it is\n``` javascript\nvar axios = require('axios');\nvar http = require('http');\nvar assert = require('assert');\nvar str = Array(100000).join('\u0436');\nhttp.createServer(function(req, res) {\n  res.setHeader('Content-Type', 'text/html; charset=UTF-8');\n  res.end(str);\n}).listen(4444, function() {\n  axios.get('http://localhost:4444/').then(function(response) {\n    process.nextTick(function() {\n      assert(response.data === str);\n    });\n  });\n});\n```\nI'm not sure that this test is 100% reliable (or that a 100% reliable test of this exists at all)\n. Here is a quick fix:\n``` diff\ndiff --git a/lib/adapters/http.js b/lib/adapters/http.js\nindex 8a6fbf6..81da7ac 100644\n--- a/lib/adapters/http.js\n+++ b/lib/adapters/http.js\n@@ -52,15 +52,15 @@ module.exports = function httpAdapter(resolve, reject, config) {\n   // Create the request\n   var transport = parsed.protocol === 'https:' ? https : http;\n   var req = transport.request(options, function (res) {\n-    var responseText = '';\n+    var responseBuffer = [];\n     res.on('data', function (chunk) {\n-      responseText += chunk;\n+      responseBuffer.push(chunk);\n     });\n res.on('end', function () {\n   var response = {\n     data: transformData(\n\n\nresponseText,\nBuffer.concat(responseBuffer).toString('utf8'),\n           res.headers,\n           config.transformResponse\n         ),\n@@ -83,4 +83,4 @@ module.exports = function httpAdapter(resolve, reject, config) {\n\n// Send the request\n   req.end(data);\n-};\n\\ No newline at end of file\n+};\n```\n. ",
    "nickuraltsev": "You can create a new instance of axios and set interceptors only for that instance:\njs\nvar instance = axios.create({\n  baseURL: 'https://some-domain.com/api/'\n});\ninstance.interceptors.request.use(function () {/*...*/});\n. @Plummat Yes, it is.\n. This issue is not actionable as is. Please provide a code snippet that reproduces the problem and reopen.\n. Yes. Please see this comment: https://github.com/mzabriskie/axios/issues/350#issuecomment-227270046\n. Reopening... Let me take a closer look at this.\n. Closing this due to inactivity. Please feel free to reopen if needed.\n. axios v0.12.0 supports URLSearchParams which can be used to send the data as application/x-www-form-urlencoded from the browser:\njavascript\nvar params = new URLSearchParams();\nparams.append('param1', 'value1');\nparams.append('param2', 'value2');\naxios.post('/foo', params);\nPlease note that URLSearchParams is not supported by all browsers, so you may need to polyfill it. (Make sure to add the polyfill to the global scope.)\n. Fixed via #366 \n. @mzabriskie - thank you for looking at this! \nI will rename axios.createNew to axios.create. \nAs for request, it doesn't replace the existing API. All the existing static methods including axios(), axios.get(), axios.post() are retained. The difference between request() and axios() is that the former is an instance method. It provides the same functionality, but is called on an instance and uses the default configuration of that instance. This method can be useful in case when you would like to use the new instance API rather than the static one, but the shortcut methods like get and post don't work for you for some reason (e.g., you need to use a non-standard HTTP method). I'm ok with removing it though. What do you think?\n. You are welcome!\n. Closing as axios supports request cancellation now. . Great, I'll create a PR soon.\n. @SkateFreak Do you have this issue when using axios in the browser or node.js? If the former, relative URLs should work fine as far as I know. \n. @ferdinandsalis No, but you can use instance.request({url: '...', method: 'patch', data: {...}}) instead. There is also instance.patch.\n. Closing in favor of #419.\n. Closing in favor of #419.\n. @DIMPLY Are you still having this problem?\n. Closing this due to inactivity. Please feel free to reopen if needed.\n. @JuoCode Can you share the code that sends the request?\n. transformRequest allows changing the request body (data) and headers. Your code makes a GET request that has no body. That's why data is undefined. \nIf can try to use interceptors to change other request properties.\njs\nAPI.interceptors.request.use(\n  config => {\n    // request config can be changed here\n    return config;\n  }, \n  error => Promise.reject(error)\n);\n. Closing in favor of #419.\n. Another option is to use BrowserStack. It's used by React Router (https://github.com/rackt/react-router/blob/master/karma.conf.js).\n. Closing due to inactivity. Please feel free to reopen if further discussion is needed.. I would be interested in working on this. Let me know if you would like my help.\n. Closing this due to inactivity. Please feel free to reopen if needed.\n. I would suggest to implement it so that the port option always take precedence if specified (including scenarios 3 and 4). \n. @dreki Please provide the description of the issue you mentioned.\n. @cressie176 Are you still having this problem?\n. I would be happy to merge a PR that implements this. \n. Closing this due to inactivity. Please feel free to reopen if needed.\n. @naivefun I don't think it's possible. XMLHttpRequest does not allow to retrieve Set-Cookie header value from the response: https://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader%28%29-method\n. Fixed by #307 \n. I don't like the idea of creating an instance of something and then using that instance as a function, but I would be happy to merge a PR that updates the README. Thank you!\n. redux-promise will dispatch the resolved value of the promise. If you would like to dispatch index in addition to the response, you can do something like this:\njs\nexport function updateValue(index) {\n  const payload = axios.get(url).then(response => ({\n    index,\n    response,    \n  }));\n  return {\n    type: ACTION_TYPE,\n    payload,\n  };\n}\n. @fobdy Are you still having this problem? If yes, are you using the latest version of axios?\n. Closing this due to inactivity. Please feel free to reopen if needed.\n. Fixed via #227. The fix has been released (0.10.0).\n. @joshuaflanagan The config passed in axios.create should be applied. Could you please provide a code snippet that reproduces the problem? \n. Fixed by #275\n. @ruchigoyal2005 @mzabriskie I'm still curious why this code rejects the promise in case when request.responseText is empty. For example, it's common to return an empty response body for successful PUT and DELETE requests. \n. Closing as duplicate of #24 \n. Closing since it does not seem to be a problem with axios. Please reopen if you feel otherwise.\n. GH wiki doesn't support pull requests as far as I understand. It's a separate git repository. So when someone submits a PR that adds a new feature, they won't be able to update the documentation in the same PR.\n. Closing in favor of #419.\n. Yes, looks like XMLHttpRequest.response is supported in IE 10+ (https://msdn.microsoft.com/en-us/library/hh872881(v=vs.85).aspx). This needs to be fixed.\n. Thank you all! I am going to create a document that contains a list of axios related libraries and include axios-mock-adapter in that list. \n. Replaced by #274\n. @mzabriskie Yes, looks like we can use Firefox. I will try it out tonight and update the PR.\n. It seems to work. I have updated the PR. \n. You are welcome!\n. Thank you for your question! This is not currently supported, but you can override the default behavior by using the paramsSerializer parameter:\njs\naxios.defaults.paramsSerializer = function(params) {\n  // You can use other libraries like `qs` to stringify params:\n  return qs.stringify(params);\n};\nHope this helps!\n. Per conversation with @mzabriskie, the plan is to continue maintaining the definition in this repo. \n. @voraparth91 You can configure axios to use specific certificates in Node.js, but not in browsers.\n. Closing this due to inactivity. Please feel free to reopen if needed.\n. Fixed by #303.\n. @amiya-pattnaik Are you still having this problem?\n. Closing this due to inactivity. Please feel free to reopen if needed.\n. Yeah. #366 documents the proxy option but it has not been merged yet (waiting for the author to fix an issue).\n. Could you please run the following code in the browser and provide the output?\njs\naxios.post(...).then(response => {\n  console.log('Success', response);\n}).catch(error => {\n  console.log('Error', error);\n});\n. Please see the issue #226. It was fixed in 0.10.0. Are you using the latest version of axios?\n. Closing this due to inactivity. Please feel free to reopen if needed.\n. Thank you for the PR!\n. @wilk The code looks good to me. Are you using the latest version of axios?\n. @wilk Right, it was implemented in 0.11.0\n. @wilk Right, it was implemented in 0.11.0\n. Maybe if the data parameter is not specified, axios fails in IE 11. (If so, this is a bug that needs to be fixed.) Could you please try to make a request with some data? \njs\naxios.post(API_URL, {})\n. @rasmuswoelk Could you please provide a code snippet that reproduces the problem?\n. @rasmuswoelk Could you please provide a code snippet that reproduces the problem?\n. @mzabriskie Yes, I saw that. The problem is that the deprecated API seems to have a better browser support than the new API (see below). This PR actually allows users to choose what to use - ArrayBuffer or ArrayBufferView (instead of forcing them to use ArrayBufferView which does not seem to be supported by IE). \n\n. @mzabriskie Yes, I saw that. The problem is that the deprecated API seems to have a better browser support than the new API (see below). This PR actually allows users to choose what to use - ArrayBuffer or ArrayBufferView (instead of forcing them to use ArrayBufferView which does not seem to be supported by IE). \n\n. Right. They will be able to choose between ArrayBuffer and ArrayBufferView as if they were using XMLHttpRequest directly.\n. Right. They will be able to choose between ArrayBuffer and ArrayBufferView as if they were using XMLHttpRequest directly.\n. Thank you for the PR!\n. Thank you for the PR!\n. Your code sets request headers and then writes response headers to console.\n. Your code sets request headers and then writes response headers to console.\n. Another problem is that axios will serialize an object to JSON be default regardless of Content-Type. As far as I understand, you would like to use application/x-www-form-urlencoded format instead, which is not currently supported (see #97). \n. Another problem is that axios will serialize an object to JSON be default regardless of Content-Type. As far as I understand, you would like to use application/x-www-form-urlencoded format instead, which is not currently supported (see #97). \n. Are you sending requests from the browser? If yes, can you check if there are any outgoing requests in Chrome Dev Tools Network panel?\n. Are you sending requests from the browser? If yes, can you check if there are any outgoing requests in Chrome Dev Tools Network panel?\n. Closing this due to inactivity. Please feel free to reopen if needed.\n. Closing this due to inactivity. Please feel free to reopen if needed.\n. @JoshZA Thanks a lot for the PR! Could you please add a test for this to https://github.com/mzabriskie/axios/blob/master/test/unit/adapters/http.js ?\n. @JoshZA Thanks a lot for the PR! Could you please add a test for this to https://github.com/mzabriskie/axios/blob/master/test/unit/adapters/http.js ?\n. I've just a added a test and merged this.\n. I've just a added a test and merged this.\n. Do you see any outgoing requests in Chrome Dev Tools Network panel?\n. Do you see any outgoing requests in Chrome Dev Tools Network panel?\n. @phantom42 It is possible that the first request was sent via jQuery? The reason why I'm asking this is that jQuery uses x-www-form-urlencoded format by default while axios serializes objects to JSON by default. (This could happen if $.post(url, params, function(result){ ... }) line was uncommented.)\n. @phantom42 It is possible that the first request was sent via jQuery? The reason why I'm asking this is that jQuery uses x-www-form-urlencoded format by default while axios serializes objects to JSON by default. (This could happen if $.post(url, params, function(result){ ... }) line was uncommented.)\n. It looks like your endpoint expects data to be in x-www-form-urlencoded format while axios sends data in JSON format by default. axios does not support x-www-form-urlencoded format at the moment (please see #97), but it will soon. Meanwhile, you can do the following:\njs\naxios({\n  method: 'post',\n  url: url,\n  data: 'param1=value1&param2=value2' // Note: values need to be properly encoded\n})\nHope this helps!\n. It looks like your endpoint expects data to be in x-www-form-urlencoded format while axios sends data in JSON format by default. axios does not support x-www-form-urlencoded format at the moment (please see #97), but it will soon. Meanwhile, you can do the following:\njs\naxios({\n  method: 'post',\n  url: url,\n  data: 'param1=value1&param2=value2' // Note: values need to be properly encoded\n})\nHope this helps!\n. Your data will not be sent as query string params. It will be sent in the request body. \nAs for timeline, I hope we will add support for x-www-form-urlencoded format by the end of next week.\n. Your data will not be sent as query string params. It will be sent in the request body. \nAs for timeline, I hope we will add support for x-www-form-urlencoded format by the end of next week.\n. axios v0.12.0 supports x-www-form-urlencoded. Please see this comment. \n. axios v0.12.0 supports x-www-form-urlencoded. Please see this comment. \n. I totally agree that promises should be rejected with an Error, but it's going to be a breaking change: \njs\naxios('/foo')\n  .catch(error => {\n    if (error instanceof Error) {\n      // Okay, it's a network failure\n    } else {\n      // Some code that handles non-2xx responses...\n      //\n      // The problem is that if we update axios to always reject with an Error \n      // (which is the right thing to do), this code will not be called anymore \n    }\n  })\n. I totally agree that promises should be rejected with an Error, but it's going to be a breaking change: \njs\naxios('/foo')\n  .catch(error => {\n    if (error instanceof Error) {\n      // Okay, it's a network failure\n    } else {\n      // Some code that handles non-2xx responses...\n      //\n      // The problem is that if we update axios to always reject with an Error \n      // (which is the right thing to do), this code will not be called anymore \n    }\n  })\n. Closing as duplicate of #24 \n. Closing as duplicate of #24 \n. @dublx Could you please update README.md?\n. @dublx Could you please update README.md?\n. You can just push a new commit to the same branch. It will be automatically added to your PR. \nAs for max code, my suggestion is to not change the status code error range at all. If you don't want axios to reject the promise for 3XX responses, you will be able to do that via validateStatus config option when #308 is merged.\n. You can just push a new commit to the same branch. It will be automatically added to your PR. \nAs for max code, my suggestion is to not change the status code error range at all. If you don't want axios to reject the promise for 3XX responses, you will be able to do that via validateStatus config option when #308 is merged.\n. @dublx Please let me know if you need any help\n. @dublx Please let me know if you need any help\n. @cspray Yes, I think the right way to deal with this is to merge @dublx commits into your own branch, make necessary changes, and submit a new PR. If you could do that, it would be great. Thank you!\n. @cspray Yes, I think the right way to deal with this is to merge @dublx commits into your own branch, make necessary changes, and submit a new PR. If you could do that, it would be great. Thank you!\n. Merged\n. Merged\n. I think a separate library is the right way to go. I'd be happy to list it on Axios Ecosystem page. Thank you! \n. I think a separate library is the right way to go. I'd be happy to list it on Axios Ecosystem page. Thank you! \n. Are you sending the data from the browser on Node?\n. Are you sending the data from the browser on Node?\n. axios can be used in a browser application (in which case XMLHttpRequest is used under the hood) or on in a Node application running on the server. \n. axios can be used in a browser application (in which case XMLHttpRequest is used under the hood) or on in a Node application running on the server. \n. Could you please check if there are any outgoing requests in Chrome Dev Tools Network panel?\n. Could you please check if there are any outgoing requests in Chrome Dev Tools Network panel?\n. Please take a look at this discussion: http://stackoverflow.com/questions/21177387/caution-provisional-headers-are-shown-in-chrome-debugger . Looks like there are multiple potential reasons why your requests can be blocked.\n. You are welcome!\n. You should not merge your config with axios.config when making a request. Could you please try to use the following?\njavascript\naxios({\n  method: 'delete',\n  url: `/entities/someId`,\n  data: payload,\n  params: {\n    force: true\n  }\n})\n. Ok, and how does your request look like in Dev Tools?\n. The message \"Provisional headers are shown\" indicates that your request has never been sent or the server has never responded. Could you please use chrome://net-internals as suggested here to see what's going on with the request?\n. You are welcome!\n. Thank you for the PR!\n. Thank you for the PR! Could you please elaborate on how this can help with unit testing?\n. Ok, thank you for clarifying! Would you mind resolving the conflicts? I'll then merge this PR.\n. I've just realized that isURLSearchParams will return true for some other built-in objects with similar API like FormData. Can we do the following instead?\njavascript\ntypeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams\nURLSearchParams must be in the global scope to make it work.\n. The code looks good to me. (You don't need to set the Content-Type, but it's not important.) What happens when you try to send a request via axios? \n. Could you please take a look at how your requests look like in Chrome Dev Tools Network panel and provide a screenshot if possible?\n. So there is no Request Payload?\n. I see. And there is no Request Payload section for your requests in Dev Tools, correct?\n. @rrapant The issue with duplicate content type values has been fixed by #317. The fix will be included in the next release. Thank you!\n. @rafaelbiten I've just tried to reproduce the issue but to no avail. I used the following code:\n``` javascript\nconst data = new FormData();\ndata.append('action', 'ADD');\ndata.append('param', 0);\ndata.append('secondParam', 0);\ndata.append('file', new Blob(['test payload'], { type: 'text/csv' }));\naxios.post('http://httpbin.org/post', data);\n```\nThe data was successfully sent to the server:\n\n. @rafaelbiten Could you please try to send a request with FromData to http://httpbin.org/post as in my code snippet?\n. Closing this for now. Please feel free to reopen if necessary.\n. XMLHttpRequest does not allow to set some headers including Cookie. This is described here: https://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\nHope this helps!\n. @reggi If you extend the Axios class, your API will expose Axios methods like get, post, and put and your custom methods like cancelOrder at the same time. Is that what you would like to do?\nI agree with @mikechabot that simply wrapping the instance is the right way to go.\n. Axios allows you to add as many custom headers as you need. When a cross-origin request is made with custom headers, the client will send the so-called preflight request (with the OPTIONS method) first. You should see it in Fiddler. The server needs to respond with Access-Control-Allow-Headers that lists your custom headers:\nAccess-Control-Allow-Headers: access_token, <other custom headers>\nThe client will then make the actual request.\nThis is explained in great detail here: https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\nHope this helps!\n. If we do duck typing in isFormData, it will return true for some other built-in objects like 'URLSearchParams' (as they have almost identical APIs). Please see my comment to #317. Maybe we can do the following instead: \njavascript\ntypeof FormData !== 'undefined' && value instanceof FormData\n@mzabriskie What do you think?\n. Closing as axios supports request cancellation now.. If you use a transpiler like Babel, you can also use the new async/await syntax:\njavascript\nasync function loadPhotos() {\n  const userResponse = await axios.get('/user/');\n  const photosResponse = await axios.get(`/user/${userResponse.data.id}/photos/`);\n  return photosResponse.data;\n}\nHope this helps!\n. @mzabriskie Yes, I'm aware of that proposal. It consists of two parts (slide 23):\n- Cancellation as a third state \n- Cancellation tokens\nI don't think we can use cancelable promises in axios API before they are implemented in the browsers (I may be wrong). But I do think that we can use cancellation tokens to request cancellation. That is what Option 2 is about. I think we should align the cancellation token API to match the one described in the proposal though. \nAs for the third state, I would suggest to reject promises with a special error (e.g. CancellationError) for now. Once cancellable tokens are implemented, we can update axios to cancel the promise instead of rejecting it. This is not going to happen soon, so I don't think we should wait for it.\nThoughts?\n. I believe this feature should be implemented in core. There is no way to build it as a plugin without re-implementing axios adapters as it's done in axios-cancel which seems to be more a fork rather than a plugin. \nHere is my suggestion:\n- Short-term plan: \n  - Add support for cancellation right now\n  - Implementation should be as close as possible to Cancelable promises proposal\n- Long-term plan: \n  - Once cancellation is standardized and implemented in browsers/node, we can update axios to use built-in cancellation primitives. (It will be a breaking change so we will need to bump the version number appropriately.)\nI think that the short-term solution doesn't need to be perfect. The goal is to make it possible to cancel requests and handle cancellations. Once it's in place, users will have a choice of using the axios API as is or build another API on top of it. Now, there are no options except re-implementing the adapter as @just-boris did. \n@mzabriskie If you agree with this approach, I can create a PR. Please let me know what you think.\n. Great, I'll submit a PR soon.\n. Just a heads up that I'm actively working on this feature. I'm hoping it will be ready in a couple of days. \n. I've just submitted a PR\n. #345 improves error handling across the library. It fixes #24 and #242.\n. Yes, this needs to be fixed. I'm planning to rewrite axios type script definitions soon. I will make sure that interceptors are covered. Thank you!\n. Axios typescript definitions really need work. I'm actually planning to rewrite them completely soon. I will make sure to fix the issue with Promise. Thank you!\n. Closing due to inactivity. Please feel free to reopen if further discussion is needed.. Yes, I think there is a bug either in the code or the documentation. \nThe README.md suggests that the following should work:\n``` javascript\n// Set config defaults when creating the instance\nvar instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n// Alter defaults after instance has been created\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\nBut instance.defaults is just a copy of the config passed to axios.create (https://github.com/mzabriskie/axios/blob/master/lib/core/Axios.js#L17):\njavascript\nfunction Axios(defaultConfig) {\n  this.defaults = utils.merge({}, defaultConfig);\n  // ...\n}\nSo the example above won't work as instance.defaults.headers is undefined.\n@mzabriskie Should we fix the code, the docs, or both?\n. There are no plans to add support for JSONP. I would suggest you to consider using CORS for cross-domain requests instead.\n. Axios does not support synchronous requests. I would suggest to look at the Beacon API. It does exactly what you need (but is not supported by all browsers at the moment).\n. Discussion on Stack Overflow. \n@js08 Has it been resolved?\n. Closing due to inactivity. Please feel free to reopen if needed.\n. @jcready We appreciate your time and effort, but we don't think that this API is clean and intuitive as @rubennorte explained above.\n. @SudoPlz Yes, you can set query string parameters using the params config option:\n```js\nvar querystring = require('querystring');\naxios.post('/foo', querystring.stringify({\n  'bar': 123\n}, {\n  params: { foo: 'bar' } // query string\n});\n``. @SudoPlz, no you don't need to implement a params serializer. There is a default one.. Closing in favor of #419.\n. Theprogressoption is only supported for browsers. It won't work in Node.js.\n. Thank you!\n. @JeroenNelen Right, our current definitions are outdated. I'm hoping to find some time this week to update them. I will addtypingsto package.json. \n. @mzabriskie But in the code snippet provided by @alborozd, thedatais set toQuerystring.stringify({...}), sorequestDatashould not beundefined`, right?\n. You can use a library like qs instead:\njavascript\nvar qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 });\n. Could you please try to replace axios.get(...) with the following code\njavascript\nPromise.resolve({\n  data: {\n    autocomplete: [\n      ...\n    ]\n  }\n}).then(response => {\n  // handle the response\n});\nto check whether the issue is caused by axios?\n. Thank you! Looks like you are hitting this issue. As a workaround, you can omit responseType. Axios will parse the response string as JSON by default. \n. IE 9 uses XDomainRequest to make cross-origin requests. XDomainRequest does not allow setting Content-Type. Please see this post for details.\nHope this helps!\n. Thank you for the PR! It looks great. I have added some comments, please take a look.\n. @bomsy Thank you for the updates! I've just added one more comment.\n. @bomsy ping\n. Looks like I was not clear enough (sorry for that!). My suggestion was to set the proxy.host to the proxy URL's hostname:\njs\nvar parsedProxyUrl = url.parse(proxyUrl);\nproxy = {\n  host: parsedProxyUrl.hostname,\n  port: parsedProxyUrl.port\n};\nReplacing proxy.host with proxy.hostname would be a breaking change, so I would prefer to avoid it.\nThank you for working on this!\n. @bomsy Hey! Are you still interested in working on this PR? \n. @bomsy Thank you!\n. @bomsy Thank you!\n. Thank you for the PR!\n. Thank you! So we should not deep merge agent objects, correct?\n. It doesn't seem that there are config options that need to be deep merged except headers.  (I don't believe we need to merge data specified at the global or instance level with data specified at the request level. The same applies to params.) \nAt the same time, if we don't deep merge / clone them, there will be issues like #385. \n. In order to fix #385, we need to do the opposite - make sure that all config options are always deep merged / cloned. (We can exclude the httpAgent and httpsAgent options. Also, cloning data when it contains something like a Stream does not sound like a good idea to me.) \nThoughts?\n. @rubennorte I'm ok with your solution. @mzabriskie What do you think?\nPlease note that we should not deep merge data when it's a Stream or a built-in object like FormData.\n. Fixed via #1395 . @srahulprdxn This is by design. Please see Upgrade Guide for details.\n. @lnmunhoz Yes, this is by design. Starting from v0.13, Promise is always rejected with an Error. Please see this for details.\n. @srahulprdxn You don't have to upgrade. You can use v0.12 if it works for you. Please note that minor versions can introduce breaking changes until axios reaches 1.0 as stated in README.md. All breaking changes are documented in the Upgrade Guide.\n. @SOSANA There is no 'extra response object' in your example. \nWhen an Error is thrown, the response variable will contain the Error. I would suggest to rename that variable to error:\njs\n.catch(error => {\n})\nIf a response has been received from the server, the error.response will contain a response object. The data property of the response object will contain the response payload. (See this for details about the response schema.)\njs\n.catch(error => {\n  if (error.response) {\n    // Response has been received from the server\n    console.log(error.response.data); // => the response payload \n  }\n})\nHope this helps!\n. @olalonde If you set the responseType option to 'stream', the data property of the response object will contain a stream.\n. Just a heads up that I'm working on new definitions for axios.\n. @JeroenNelen Yes, will do\n. New TypeScript definitions have landed to master.\n. axios v0.14.0 has been released with these updates.\nNote: Please use the following import statement to import axios in TypeScript:\n``` typescript\nimport axios from 'axios';\naxios.get('/foo')\n  .then(response => console.log(response))\n  .catch(error => console.log(error));\n``\n. Yes,Content-Typeshould be set automatically. Could you please provide a code snippet that reproduces this issue and the browser information?\n. Closing due to inactivity. Please feel free to reopen if needed.\n. @pnkapadia6 @sms777 Are you still having this issue? If so, could you please provide a code snippet that reproduces this issue and the browser information?\n. @ronaldcurtis Could you please provide the following information?\n- Browser version\n- Code that createsFormData` objects\n- Axios defaults (if you override them)\n. Thank you! This definitely needs to be fixed.\n. @mzabriskie Please take a look at the discussion in #370\nOn Monday, August 15, 2016, Matt Zabriskie notifications@github.com wrote:\n\nI played around with using _.cloneDeep inside the utils.merge and it\ncertainly fixed this problem. However it also somehow broke stuff for node.\nI'm looking into what's going on there.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/385#issuecomment-239839107,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGBhkM7uqsZxyo0RuqnRlwCUwxK1Cor7ks5qgIoQgaJpZM4JSa2R\n.\n. Fixed via #1395 . Fixed by #387.\n. Thank you! Yes, looks like we need to deep clone configs. Closing as #385 already covers this.\n. Closing in favor of #419.\n. The http adapter uses node's http module under the hood. I don't believe the http module is available in React Native environment so the http adapter will not work there.\n\nThere are no plans to create a fetch adapter at the moment. Have you tried to use fetch directly to check if it doesn't have the same issue?\n. @wzl002 You can use the xhr adapter as an example. The code can be found here: https://github.com/mzabriskie/axios/blob/master/lib/adapters/xhr.js. \n. What do you mean by 'JSONString'? What's the difference between 'JSONString' and 'JSON'?\n. Closing due to inactivity. Please feel free to reopen if needed.\n. @kayazinc If you make a request via axios (or the XMLHttpRequest directly), the browser will not automatically redirect on 302. You need to implement this logic in your application. \n. Thank you for the PR! Should we delete the Authorization header in this case as well? \njs\n    var parsed = url.parse(config.url);\n    if (!auth && parsed.auth) {\n      var urlAuth = parsed.auth.split(':');\n      var urlUsername = urlAuth[0] || '';\n      var urlPassword = urlAuth[1] || '';\n      auth = urlUsername + ':' + urlPassword;\n    }\nI would suggest to check whether auth is defined (after the code block above) and if it is, delete the header:\njs\nif (auth) {\n  delete headers.Authorization;\n}\n. When a web app makes a CORS request (a request to a server that runs on a different host or port than the web app), the browser sends a preflight (OPTIONS) request first. (Please see this for details.) Make sure that your back-end handles OPTIONS requests properly.\n. @haveagoodone Do you still have this issue? \n. Closing due to inactivity. Please feel free to reopen if needed.\n. This is how promises work.\nFor example, the code below will print 'caught an error' even if the Promise returned by axios is resolved successfully: \njs\nconst promise = axios.get('http://foobar.com/');\npromise\n  .then(() => {\n    throw new Error('boom!');\n  })\n  .catch(err => {\n    console.log('caught an error', err);\n  });\nThe reason why the error handler is called is that catch is called on a new (rejected) Promise returned by then, rather than on the Promise returned by axios.\nHope this helps!\n. The function passed to then updates the redux store and renders your React components (indirectly). If an error is thrown in render, it will be caught by catch:\njs\nconst promise = axios.get('http://foobar.com/');\npromise\n  .then(() => {\n    // This is what happens when the `Promise` returned by axios is resolved:\n    // - dispatch action\n    //   - update state\n    //     - notify React components\n    //       - render\n  })\n  .catch(err => {\n    // If an error is thrown in `render`, the `Promise` returned by `then` will be rejected\n    // and this error handler will be executed\n  });\n. Could you please explain what is the issue? The server returns 502, but validateStatus returns true?\n. Closing in favor of #419.\n. No, it's not supported at the moment. Please see #48.\n. Your code makes a CORS request to a resource on another domain, but the server does not support CORS. You can learn about CORS here:\n- http://www.html5rocks.com/en/tutorials/cors/\n- https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\n. axios can be used to make cross-origin requests as along as the server supports that.\n. I have not seen your webpack configuration, but most likely you need to exclude node_modules:\njs\nmodule: {\n  loaders: [\n    {\n      test: /\\.js$/,\n      exclude: /node_modules/,\n      // ...\n    }\n  ]\n}\n. Since your code is compiled to run in node.js (target: \"node\"), you need to use json-loader:\njs\n{\n  test: /\\.json$/,\n  loader: 'json'\n}\nThat's because axios node adapter requires package.json. You would not need to use json-loader if your code was compiled for usage in a browser.\n. Your code makes a CORS request, but the server cannot handle preflight (OPTIONS) requests. You can learn about CORS here:\n- http://www.html5rocks.com/en/tutorials/cors/\n- https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\n. Thank you! I would prefer not to add additional dependencies. The issue can be solved by putting the URLSearchParams polyfill into the global scope in your application.\nExample:\njs\nvar URLSearchParams = require('url-search-params');\nself.URLSearchParams = URLSearchParams;\nPlease let me know whether it works for you.\n. @rubennorte Duck typing won't work in this case as URLSearchParams API is almost identical to FormData API. (See #323.)\n. Please note that using URLSearchParams is not the only way to make an application/x-www-form-urlencoded request. You can use something like this instead:\njs\nvar qs = require('qs');\naxios.post(url, qs.stringify({ foo: 'bar' }));\n. Yes, it's documented here.\n. Fixed via #440\n. All breaking changes are documented in the Upgrade Guide, but maybe it's a good idea to highlight them in the changelog as well. @mzabriskie, what do you think?\n. Fixed via #423 \n. The problem is that objects are serialized to JSON by default while you need to send the data in the `application/x-www-form-urlencoded' format. The easiest solution is to use a library like qs:\njs\nvar qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 });\nSee this comment for details.\nHope this helps!\n. @clavecoder I'm hoping to release it this week.\n. Thank you for the PR! It's already explained in the Promises section. \n. @diesal11 Thank you! Could you please also rename the config options in README.md? Everything else looks good to me.\n. @diesal11 Merged. Thank you for the PR!\n. This means that the server does not accept application/json content for this URI and HTTP method (GET /api/Storage/Delete).\n. I think I know what's going on. You are trying to make a request with a body using axios#delete which does not accept request body as a parameter. Please try to use request method instead:\njs\ninstance.request({\n  url: '/Storage/Delete',\n  method: 'delete',\n  data: { storage: storage }\n});\n. delete accepts the following two parameters:\n- url\n- config (optional)\nIt's documented here.\nThe available config options are documented here.\n. The error.config property should contain the request config. \nHope this helps!\n. Looks like the problem is that the server expects the data to be in the application/x-www-form-urlencoded format, while axios sends objects in the json format by default.\nPlease see this comment for details.\nHope this helps!\n. Thank you for the PR!\n. You can use this instead: \ntypescript\nimport axios, { AxiosRequestConfig, AxiosPromise } from 'axios';\n. I agree that axios should honor the no_proxy env variable. As for a config option, we can use the existing option for that: if proxy is explicitly set to null or false, ignore proxy env variables. \nAre you interested in creating a PR for this?\n. @cesarp What's going on with unit tests? \n. Thank you, @aristidesfl! This is a bug that needs to be fixed asap.\nDetails\nIn the current version, axios.defaults is the default instance's config which is not the same as the object exported by the defaults module. Custom instances inherit the latter, but not the former, hence changing axios.defaults has no effect on a custom instance's config. \nI think this can be fixed by modifying the axios.create method to merge the default instance config with the specified config as follows:\njs\naxios.create = function create(defaultConfig) {\n  return createInstance(utils.merge(axios.defaults, defaultConfig));\n};\nBut since there are other issues with configuration (#385, #382, #370), I think it makes sense to address all of them at once . /cc @mzabriskie, @rubennorte\n. Fixed via 6d0e19343a6180fb8f5c50d843dd15feeb1f49f3. axios does not support the family option directly, but you can use a custom agent to achieve this as follows:\njs\nvar http = require('http');\nvar agent = new http.Agent({ family: 4 });\naxios.get('http://www.google.com/', { httpAgent: agent }); // Note: use httpsAgent for HTTPS\nYou can also set the agent at the instance level:\njs\nvar instance = axios.create({ httpAgent: agent });\ninstance.get('http://www.google.com/');\nor at the global level:\njs\naxios.defaults.httpAgent = agent;\nHope this helps!\n. @rubennorte Thank you! I've updated my comment.\n. I've just replaced Object.hasOwnProperty.call with Object.prototype.hasOwnProperty.call (@4c4e648)\n. Closing as this has already been implemented in #437. Thank you for your contribution!\n. Error handling was changed in v0.13. Please take a look at the Upgrade Guide.\nIt's not clear why console.log(response) outputs undefined, but trying to access response.data.error will cause an error.\n. Closing due to inactivity. Please feel free to reopen.\n. @mzabriskie I hope users will not have to change anything at all (unless the cancelable promises spec changes). \nWe will need to update axios though: \n- Export native 'Cancel' and 'CancelToken'  if they are available.\n- Update isCancel so that it can detect native Cancel objects. \n. @radziksh I've just updated the answer. Thank you!\n. @komirad I've updated the cookbook. Thank you!\n. I don't think we need to add a shortcut method for OPTIONS as preflight requests are normally sent by the browser. For test purposes, you can use the request method as follows:\naxios.request({\n  method: 'options',\n url: '/foo'\n})\nThank you!. Closing as it's not an axios issue.\n. @GramParallelo The second parameter to axios.delete is config, not data. Please see this for details.\n. @AndreaMusumeci Looks like the server requires the Content-Type header to be set to application/json.  Instead of passing null or {} as data, you can set the Content-Type:\njs\naxios.delete(url, {\n  headers: {\n    'uid': uid,\n    'Content-Type': 'application/json'\n  }\n})\nHope this helps!\n. Closing due to inactivity. Please feel free to reopen.\n. Closing due to inactivity. Please feel free to reopen.\n. axios uses the application/json format by default, while jQuery uses application/x-www-form-urlencoded. Cross site requests in the former format are always preflighted, while cross site requests in the latter format may be not preflighted. Please see this for details.\nHope this helps!\n. Could you please provide the code that makes requests using axios?\n. If events and eventSchedule are axios instances, you need to pass the url as the first parameter:\njs\naxios.post('/foo', {\n  bar: 123\n})\n. Are you suggesting to add support for this? Another reason to create a fetch adapter (#484) as it's not possible to implement this using XHR.\n. XMLHttpRequest does not support response body streaming, so I don't really understand the point of wrapping an XMLHttpRequest response into a stream. (fetch standard does support streaming so adding support for fetch response streams makes sense to me.) \nCould you please elaborate on the problem you are solving using xhr-stream?\n. Fixed via 3704d57. Cancel must not derive from Error according the cancelable promises spec. Please see this for details.\n. - What error do you get? Also, could you please provide a code snippet that reproduces the issue? \n- I'm not sure I understand what you mean by \"overwriting\" requests.\n- You should use different tokens for different requests unless you need to be able to cancel multiple requests as a group. \n. Fixed via 3fcf54f\n. Interesting. So is XMLHttpRequest available in SW right now or not?\n. We can of course create a fetch adapter but if we do so, we will have to support both the XHR and fetch adapters for a long time. At the same time I think we should support service workers.\n@mzabriskie @rubennorte Thoughts?\n. Fixed in v0.15.1.\n. Could you please try to remove the timeout option and let me know if it fixes the issue? I think the problem is that the value is too large. \n. Are you using Chrome? If yes, Chrome logs all network issues (including 4XX and 5XX errors) by default regardless of whether they are handled in the code or not. You can disable this behavior by checking \"Hide network messages\" checkbox in the Chrome DevTools settings (please see this for details).\nHope this helps!\n. Please ask this question on Stack Overflow.\n. I don't think axios needs to support it. You can filter out parameters with an empty value in your code. You can also implement your own params serializer if necessary. . Please refer to Cancellation section of the docs.\n. @slavomirvojacek Please run npm test locally before submitting a PR / pushing new commits. \n. axios.get accepts only two parameters: url and config (please see this for details).\nI think your code needs to be changed as follows:\njs\naxios.get(SEARCH_USER_BY_NAME, {\n  params: { \n    name: value \n  },\n  headers: {\n    'X-Auth-Token': HASH_TOKEN,\n    'account-id': ACCOUNT_ID\n  }\n});\nHope this helps!\n. But why are you passing undefined?\n. Yes, I think you should just close the stream. If axios closes the stream when cancellation is requested before you have read the complete response, how will you know that it's incomplete?\n. It's not necessary to stringify data before passing it to axios. You should use qs.stringify only if you need to send the data in the application/x-www-form-urlencoded format. You should not do that if you'd like to send the data in the JSON format.\nHope this helps!\n. @francoisromain You are welcome!\n. @Ivykp Agree. Are you interested in creating a PR for this?\n. Fixed via #869. What you see is a preflight (OPTIONS) request. \nYou can learn about CORS and preflight requests here:\n- https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\n- https://www.html5rocks.com/en/tutorials/cors/\nHope this helps!\n. @kol9n93 Could you please provide a code snippet or GitHub repo that reproduces this issue?\n. axios serializes objects to JSON by default, and there are no plans to change the default format. I agree that the documentation can be improved though. Thank you!\n. Duplicate of #479 \n. Duplicate of #479 \n. Yes, I think @tinpee is right. Thank you!\n. Yes, I think @tinpee is right. Thank you!\n. Fixed via 417913b\n. Fixed via 417913b\n. @slavomirvojacek Thank you for the PR! Could you please explain why this change is needed? All the request methods (request, get, post, etc.) would still return AxiosPromise, so you would need to \"cast\" AxiosResponse<any> to AxiosResponse<DataType>. How is that different from \"casting\" data to a specific type?\n. @slavomirvojacek Thank you for the PR! Could you please explain why this change is needed? All the request methods (request, get, post, etc.) would still return AxiosPromise, so you would need to \"cast\" AxiosResponse<any> to AxiosResponse<DataType>. How is that different from \"casting\" data to a specific type?\n. I'm going to close this as AxiosResponse is a generic type now.. I'm going to close this as AxiosResponse is a generic type now.. Fixed via d963368\n. Fixed via d963368\n. You can add an interceptor to a particular axios instance (the default or a custom one), but it's not currently possible to add a global interceptor.\n. You can add an interceptor to a particular axios instance (the default or a custom one), but it's not currently possible to add a global interceptor.\n. @lovanwubing So you create multiple axios instances in you app and would like to add the same interceptors to all of them, correct? \n. @lovanwubing So you create multiple axios instances in you app and would like to add the same interceptors to all of them, correct? \n. Closing as this is more of a StackOverflow question than an axios issue.. Closing as this is more of a StackOverflow question than an axios issue.. I think this is a question for StackOverflow. . I think this is a question for StackOverflow. . axios uses different adapters for Node.js and browsers. The Node.js adapter does use Node.js APIs, but the browser one (which is also used in react-native) does not.\naxios should work fine with old Node.js versions (at least, v0.10+), but you will need to polyfill Promises if you use v0.10. \nHope this helps!\n. axios uses different adapters for Node.js and browsers. The Node.js adapter does use Node.js APIs, but the browser one (which is also used in react-native) does not.\naxios should work fine with old Node.js versions (at least, v0.10+), but you will need to polyfill Promises if you use v0.10. \nHope this helps!\n. Do you override axios.defaults.validateStatus or any other config options? Do you use interceptors? \n. Do you override axios.defaults.validateStatus or any other config options? Do you use interceptors? \n. Yes, you can use the same token to cancel multiple requests.\n. Yes, you can use the same token to cancel multiple requests.\n. > Also with the newest release of Typescript 2.0, typings are no longer being used\nCould you please provide a link to docs or release notes? \n. > Also with the newest release of Typescript 2.0, typings are no longer being used\nCould you please provide a link to docs or release notes? \n. Fixed via #519\n. Fixed via #519\n. @DjebbZ Thank you!\n. @DjebbZ Thank you!\n. Thank you, it's appreciated!\n. Thank you, it's appreciated!\n. Please see this question on StackOverflow.\n. Please see this question on StackOverflow.\n. The difference is that the second parameter of delete is config while the second parameter of post is data. Probably, you need to modify your code as follows:\njs\naxios.delete(\"employee/\" + employeeId, {\n  data: delete_comment\n});\nHope this helps!\n. The difference is that the second parameter of delete is config while the second parameter of post is data. Probably, you need to modify your code as follows:\njs\naxios.delete(\"employee/\" + employeeId, {\n  data: delete_comment\n});\nHope this helps!\n. @candyflip19 You are welcome!\n. @candyflip19 You are welcome!\n. I believe Stack Overflow is a better place for this kind of question. Please feel free to submit an issue if you feel that something doesn't work as expected. \n. I believe Stack Overflow is a better place for this kind of question. Please feel free to submit an issue if you feel that something doesn't work as expected. \n. It doesn't look like you need to use that transform workaround. There are easier ways to convert a JavaScript object to the application/x-www-form-urlencoded format. Please see this comment.\n. It doesn't look like you need to use that transform workaround. There are easier ways to convert a JavaScript object to the application/x-www-form-urlencoded format. Please see this comment.\n. Closing due to inactivity. Please feel free to reopen.\n. Closing due to inactivity. Please feel free to reopen.\n. No, it's not supported, but you can do something like this:\n``` js\n// Override transformResponse to return the original data\nvar transformResponse = axios.defaults.transformResponse;\naxios.defaults.transformResponse = [function (data) {\n  return data;\n}];\n// Add response interceptors here\n// Add an additional response interceptor that applies the default transformations\naxios.interceptors.response.use(function (response) {\n  for (var i = 0; i < transformResponse.length; i++) {\n    response.data = transformResponsei;\n  }\n  return response;\n});\n```\nHope this helps!\n. No, it's not supported, but you can do something like this:\n``` js\n// Override transformResponse to return the original data\nvar transformResponse = axios.defaults.transformResponse;\naxios.defaults.transformResponse = [function (data) {\n  return data;\n}];\n// Add response interceptors here\n// Add an additional response interceptor that applies the default transformations\naxios.interceptors.response.use(function (response) {\n  for (var i = 0; i < transformResponse.length; i++) {\n    response.data = transformResponsei;\n  }\n  return response;\n});\n```\nHope this helps!\n. @yanivefraim Good question! I think changing defaults should affect at least the default instance. For example:\n``` js\ndefaults.baseURL = 'http://foo.com/';\naxios.get('/user');\ndefaults.baseURL = 'http://bar.com/';\naxios.get('/user');  // should make a request to http://bar.com/user\n```\nIf we do so for the default instance, we should probably do the same for custom instances for consistency. Does it make sense?\nThank you for your help!\n. @yanivefraim Good question! I think changing defaults should affect at least the default instance. For example:\n``` js\ndefaults.baseURL = 'http://foo.com/';\naxios.get('/user');\ndefaults.baseURL = 'http://bar.com/';\naxios.get('/user');  // should make a request to http://bar.com/user\n```\nIf we do so for the default instance, we should probably do the same for custom instances for consistency. Does it make sense?\nThank you for your help!\n. I'm not sure about this. Applying instance defaults changes, but ignoring global defaults changes seems confusing too. For example:\n``` js\nconst instance = axios.create();\ninstance.defaults.timeout =123;\ninstance.get('/foo'); // the new timeout will be used\ndefaults.validateStatus = status => true; // all statuses are ok\ninstance.get('/foo'); // should new validateStatus be used?\n```\n. I'm not sure about this. Applying instance defaults changes, but ignoring global defaults changes seems confusing too. For example:\n``` js\nconst instance = axios.create();\ninstance.defaults.timeout =123;\ninstance.get('/foo'); // the new timeout will be used\ndefaults.validateStatus = status => true; // all statuses are ok\ninstance.get('/foo'); // should new validateStatus be used?\n``\n. @yanivefraim Thanks a lot for your help! I've been busy, but I'll review your PRs and get back you soon.\n. @yanivefraim Thanks a lot for your help! I've been busy, but I'll review your PRs and get back you soon.\n. @yanivefraim What if we makeaxios.defaultsa reference to the global defaults object (exported bylib/defaults.js`) instead of creating a new object? Custom instances already use the global defaults when sending a request, so everything will work as designed.\n``` js\n// change the global defaults before creating an instance\naxios.defaults.timeout = 100;\nconst instance = axios.create();\ninstance.get('/foo'); // timeout is 100\n// change the global defaults after creating the instance\naxios.defaults.timeout = 200;\ninstance.get('/foo'); // timeout is 200 because the global defaults are merged in request()\n// also, we can override anything at the instance level\ninstance.defaults = 300;\ninstance.get('/foo'); // timeout is 300 because the instance defaults take precedence over the global defaults\n```\nThoughts?\n. @yanivefraim What if we make axios.defaults a reference to the global defaults object (exported by lib/defaults.js) instead of creating a new object? Custom instances already use the global defaults when sending a request, so everything will work as designed.\n``` js\n// change the global defaults before creating an instance\naxios.defaults.timeout = 100;\nconst instance = axios.create();\ninstance.get('/foo'); // timeout is 100\n// change the global defaults after creating the instance\naxios.defaults.timeout = 200;\ninstance.get('/foo'); // timeout is 200 because the global defaults are merged in request()\n// also, we can override anything at the instance level\ninstance.defaults = 300;\ninstance.get('/foo'); // timeout is 300 because the instance defaults take precedence over the global defaults\n```\nThoughts?\n. Closed by mistake\n. Closed by mistake\n. What's the reason for replacing the default instance's config with defaults after the default instance is created? Can we pass the correct config to the constructor instead (for the default and custom instances)? . What's the reason for replacing the default instance's config with defaults after the default instance is created? Can we pass the correct config to the constructor instead (for the default and custom instances)? . Closing in favor of 6d0e19343a6180fb8f5c50d843dd15feeb1f49f3. Could you please provide a GitHub repo that reproduces the issue?\n. You can implement this in your apps using interceptors. Please see this for details.\n. Do you transpile axios code using babel? \n. Closing due to inactivity. Please feel free to reopen if needed.\n. Here are my thoughts:\n- merge function should not be specific to axios domain logic\n- We should create a new function in core instead. For example: mergeConfigs.\n- The new function can use merge if necessary.\n- We can try to use lodash.cloneDeep, but we should make sure it works in IE8 (as axios still supports IE8) and it's not too big. I'm ok with writing our own function too. \n. I don't think it's safe to copy all defaults as you suggested. Look at the issue #370 for example. Creating a deep copy of the defaults will break apps that override defaults.httpAgent or defaults.httpsAgent. \nI would suggest to do the following:\n\nDefine what config options can be inherited. For example, I don't think we should support inheritance of options like data and params. In other words, I think it should be possible to set data at the request level, but not at the instance or global levels. \nFor each option that can be inherited, we should define whether to merge or overwrite its values. For example, we should not merge httpsAgent objects. (I cannot think of a example of a config option whose values need to be merged, so maybe it does not exist at all.)\n\nSeparately, creating copying / merging the configuration objects in the constructor is not enough. I think it should be done in the request method as well. Otherwise, changing the request config in an interceptor will change the instance configuration. . You can solve this by creating an interceptor that converts Cancel to Error to make Bluebird happy.\n. I don't think we can solve this. You can either disable warnings in Bluebird or use another Promise implementation.. You can configure axios to use a custom agent and set rejectUnauthorized to false for that agent:\n``` js\n// At instance level\nconst instance = axios.create({\n  httpsAgent: new https.Agent({\n    rejectUnauthorized: false\n  })\n});\ninstance.get('https://something.com/foo');\n// At request level\nconst agent = new https.Agent({\n  rejectUnauthorized: false\n});\naxios.get('https://something.com/foo', { httpsAgent: agent });\n```\nHope this helps!\n. Please see this comment.\n. Fixed via #1399 . Check error.response.data property. console.log(err) will not output the response body. \n. You can create two axios instances - one with the interceptor, another one without it. Hope this helps!. Right, Accept-Encoding is a forbidden header name (see this for details). . Duplicate of #506. Please see this if you'd like to use the application/x-www-form-urlencoded format. Hope this helps!. We don't support forks here, please contact the fork's maintainers.. The chart actually shows the opposite: axios has been tested with Safari 9. What makes you think it does not work in Safari 9?. Browsers (at least some of them) convert POST requests to GET when following redirects. Please see this and this for details.. Are you getting an error?. Closing as it does not seem to be an axios issue. . Yes, you can use interceptors for that:\njs\nvar instance = axios.create();\ninstance.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  // Handle error here\n  return Promise.reject(error);\n});. You should be able to pass an archiver stream to axios as follows:\njs\narchive.append(fs.createReadStream(file), { name: 'file.txt' });\naxios.post(url, archive);\nPlease let me know if it does not work.. No, there is no way to configure it at the moment. . It's JSON vulnerability protection. You can read about it here. The vulnerability itself is discussed here. \nSince the problem exists only in Firefox 2.0 or earlier, I think we can get rid of this code.. The UMD build is only for browsers. Please use the npm package in Node.js.. There is no standard way of serializing arrays. Please see this discussion: http://stackoverflow.com/questions/6243051/how-to-pass-an-array-within-a-query-string\nIf you'd like to use another format, you can set a custom paramsSerializer as follows:\njs\naxios.defaults.paramsSerializer: function(params) {\n  // return a query string\n}\nUsing the qs library:\njs\naxios.defaults.paramsSerializer: function(params) {\n  return qs.stringify(params, { indices: false }); // param=value1&param=value2\n}\nHope this helps!. The browser will not allow you to access the response of a CORS request if the Access-Control-Allow-Origin header is missing.\nHere are some great articles that explain how CORS works:\n- https://www.html5rocks.com/en/tutorials/cors/\n- https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\nHope this helps!. When data is serialized to JSON using JSON.stringify, Date values are converted to ISO 8601 format. If you'd like to use another format, you can convert all Date values to the desired format in your code before passing data to axios. \nFor example:\njs\naxios.post('/foo', {\n  date: 'Fri Dec 02 2016 09:33:48 GMT+0800'\n});\nHope this helps!. Here is an article that explains how this works in JavaScript: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\nHope this helps!. Looks like your server does not include the Access-Control-Allow-Origin header in response to a preflight request (OPTIONS). A CORS request will fail if Access-Control-Allow-Origin is missing. \nHere are some great articles that explain how CORS works:\n- https://www.html5rocks.com/en/tutorials/cors/\n- https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\nHope this helps!. Please see my answer on StackOverflow: http://stackoverflow.com/a/40953463/6218152. From https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS :\n\nwhen responding to a credentialed request,  server must specify a domain, and cannot use wild carding. The above example would fail if the header was wildcarded as: Access-Control-Allow-Origin: *.\n\nHope this helps!. Sorry, the fact that tools that you use fail to parse valid JavaScript code is not a sufficient reason to make changes to axios.  . I'd be happy to accept a PR for this. Thank you!. No, axios does not support synchronous requests.. The default transformResponse attempts to parse the response body using JSON.parse. If parsing fails, it returns the response body as a string. Please see the code for details: https://github.com/mzabriskie/axios/blob/master/lib/defaults.js#L58\nYou can see a different behavior if you use a custom transformResponse. If so, please provide the code of your transformResponse.\n. Does this example really do anything? The percentCompleted variable is assigned but never used.. Take a look at interceptors: https://github.com/mzabriskie/axios#interceptors. Closing in favor of #1061. Closing in favor of #1061. @loklaan Thanks a lot for the contribution!. You cannot use the token in a response interceptor, but you can throw a Cancel instead:\njs\n  axios.interceptors.response.use(function (response) {\n    throw new axios.Cancel('Operation canceled by the user.');\n  }, function (error) {\n    return Promise.reject(error);\n  });\nHope this helps!. Closing in favor of 3704d57. It's ^1.2.5 now. Closing in favor of #1399 . Thank you!. Closing due inactivity. I'm going to close this PR as { method: 'get' } is no longer merged into config here.. You can add a trailing slash in your code. I don't see why it needs to be done by axios.. I didn't realize you were going to provide more details on this. Reopening.... Yeah, progress events work only in browsers at the moment.. Please take a look at this question and answer: http://stackoverflow.com/questions/37897523/axios-get-access-to-response-header-fields. Fixed via #773 . use adds a new interceptor. eject removes an existing interceptor.. Please see this: https://github.com/mzabriskie/axios#cancellation. Thank you!. I think this a bit redundant. There are signatures of all the request methods right above this block.. @rubennorte This is great!. It looks good to me.. Yes, I think we should use ^1.2.3. @jcready Could you please add ^? Thank you!. Please see upgrade instructions here: https://github.com/mzabriskie/axios/blob/master/UPGRADE_GUIDE.md#015x---0160\n. @johntron Sorry for the delay! I'm going to merge it now.. I'm ok with this dependency. @fgnass Thank you for the PR!. axiox.delete does support a request body. It accepts two parameters: url and optional config. You can use config.data to set the response body as follows:\njs\naxios.delete(url, { data: { foo: \"bar\" } });\npost, put, and patch accept 3 parameters: url, data, and config so you can you can use the second parameter to set the response body like this:\njs\naxios.put(url, { foo: \"bar\" });\nHope it helps!. Fixed via #887.. I don't believe we should limit the allowed request methods. If someone wants to use a non-standard HTTP method like PURGE, axios should let them do that.. Thank you for the PR!. @pbarbiero Thank you for the fix!. Closing in favor of #1125. Thank you!. @d-fischer Thank you!. @d-fischer Thank you!. @psachs21 Hopefully, this weekend. Closing this as it's not an axios issue. . @jaketoolson It should work for POST requests as well. \nI think you may want to set isLoading to false regardless of whether the request has failed or been canceled.\nCan you please try something like this?\njs\n.catch((error) => {\n  this.isLoading = false;\n  if (axios.isCancel(error)) {\n    console.log('Request canceled');\n  }\n});. Closing due to inactivity. @MarshallOfSound Thank you!. @sofuxro It can easily be avoided by passing both callbacks to then instead of using catch:\njs\naxios.delete(base + '/addresses/' + params)\n    .then(data => { // Success\n        Vue.delete(/* something */);\n    }, error => { // Failed\n        notifyError('The Address couldn\\'t be deleted!');\n    });\nSee this for details.\nHope this helps!. Fixed via #1061. Fixed via #1061. The fix was included in 0.17.0.. @keenondrums Thank you!. @jmmk Thank you!. Please use StackOverflow for general questions.. Fixed. Fixed via #1160 . I'd be happy to accept a PR that fixes this.. Fixed via #1177 . Right! I'd be happy to accept a PR.. Fixed via #1177. typeof returns \"object\" for an array. Please see this for details: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof. @clarkdo Yeah, you are right. Thank you for the contribution! . Thank you!. Fixed via #1160. Looks good, thank you!. Using { filter: 'filter[nid][condition][path]=nid...' } will generate the following query string:\n?filter=filter[nid][condition][path]=nid&...\nIs that what you want or you want something like this:\n?filter[nid][condition][path]=nid&...\n. @shalldie Are you fine with closing it now?. Looks like you want to use the application/x-www-form-urlencoded format, but use the JSON format instead. Please take a look at this: https://github.com/axios/axios#using-applicationx-www-form-urlencoded-format\nHope it helps!. Yeah, you cannot use an axios instance as a function.. Thank you!. Thank you!. Closing in favor of #1192. Thank you for the PR!. Fixed via #1192 and #1254 . Thank you, @aaronang !. Closing this PR as the issue with nock has been resolved. Thank you, @felixmosh !. Closing this PR as the issue with nock has been resolved. Thank you, @felixmosh !. Closing as this is not an axios issue.. Thank you, @robaxelsen !. You should be able to specify a custom agent instead:\n```js\nconst https = require('https');\nconst fs = require('fs');\nconst axios = require('axios');\nconst agent = new https.Agent({ pfx: fs.readFileSync('foo.pfx') });\naxios.get(url, {\n  httpsAgent: agent,\n})\n```\nHope this helps!. Thank you for your PR! I'm closing it because additional options are already supported through custom agents. Please see my comment for details: https://github.com/axios/axios/issues/1304#issuecomment-359489991. These changes have already been merged, as far as I can see.. Yeah, that is by design. There is no need to add all axios helper functions and classes like CancelToken to axios instances.\njs\nconst axios = require('axios');\nconst source = axios.CancelToken.source();\nconst instance = axios.create();\ninstance.get('/foo', { cancelToken: source.token });. @rhys-vdw Thank you for bringing this up!. @codeclown First of all, thank you so much for working on this!\nHere are some comments:\n\nI really like the idea of freezing instance defaults. I think we on the right track.\nPlease move mergeConfig and friends to core. utils is a library of generic helper functions non-specific to axios as this comment suggests. \nI have some other comments on the PR, but if you'd like to clean it up first, I'll be happy to review it when you are ready.\n\n@emilyemorehouse We don't have to wait for the 1.0 release. It's ok to introduce breaking changes in 0.19, 0.20, etc. There is a warning here: https://github.com/axios/axios#semver\n. @codeclown Thank you so much! I'll review it over the weekend.. @codeclown Sorry for delay! I've just submitted my review. The PR looks great. There are just a few minor issues / questions.. @codeclown Thank you for the changes! I've just added a few new comments. Most of them are related to naming, but there is also a really important comment about the url, method, params, and data props. Please take a look!. I'll look into failing tests.. @codeclown Thank you again for working on this! I agree with all your comments. You are totally right about { proxy: false }. \nI'll try to figure out what is going on with tests and merge the PR soon.. @codeclown Thank you for this PR!\n@emilyemorehouse Thank you for looking into the issue with tests! \n. @mattridley - This is great! Thank you for the contribution!. @ascott18 Thank you for the PR!. @JustinBeckwith Tests now fail in IE10: https://travis-ci.org/axios/axios/builds/363405054. @JustinBeckwith  I'll send you SuaceLabs credentials in a minute so you can run tests in different browsers including IE.. Right, we cannot run tests on SauceLabs for PRs for security reasons. . Sure, let's ignore it for now.. I've just deleted it. Thank you!. I agree with @mzabriskie . On a side note, I'm going to submit a PR that adds support for a config option that allows specifying status codes for which an error should be thrown. \n. See #308 \n. I suggest to refactor this a bit to eliminate duplication:\n``` javascript\nvar proxy = config.proxy;\nif (!proxy) {\n // try to retrieve proxy settings from env variables \n}\nif (proxy) {\n  // override options.host, options.port, and options.path\n}\n``\n. Can settinghttp_proxyaffect other tests (executed after this test)? If so, maybe we should resethttp_proxyintearDown.\n. I think we should use thehostnameproperty of the URL object rather thanhost. The latter contains the host name _and_ the port (e.g. 'foo.com:8080'), which is not what should be passed tohttp.request` (see https://nodejs.org/api/http.html#http_http_request_options_callback).\njavascript\nvar parsedProxyUrl = url.parse(proxyUrl);\nproxy = {\n  host: parsedProxyUrl.hostname,\n  port: parsedProxyUrl.port\n};\n. I think we can make an assumption that the adapter doesn't access document.cookie directly, but rather uses the cookies helper. It's seems to be much easier to spy on a function than on a property with Jasmine. \n. I would suggest to rename progressUpload and progressDownload to onUploadProgress and onDownloadProgress respectively.\n. It doesn't look like upload is supported by all modern browsers (please correct me if I'm wrong) so I would suggest to check whether this property is present before calling addEventListener: \njs\nif (typeof config.progressUpload === 'function' && request.upload) {\n  // ...\n}\n. I don't think it's safe to rely on jasmine-ajax internals (request.eventBus). \n. I agree with @rubennorte. Silently falling back to another adapter is not going to make anyone's life easier. \n. @rubennorte Yeah, I agree. I've just updated README.md.\n. @rubennorte It makes sense, but my goal was to implement Cancel and CancelToken as close to the cancelable promises spec (in its current form) as possible. It's tempting to add isCancellation (or Cancel.isCancel), but it can make future migration path to built-in Cancel and CancelToken harder. Thoughts?\n. @rubennorte I think adding axios.isCancel(value) is the way to go. We can easily update it to support native Cancel objects (when they are available). I'll update the PR soon. \n. @rubennorte Added axios.isCancel, please take a look\n. Cancel must not derive from Error according the cancelable promises spec. Please see this for details.\n. If relativeURL is '/', it will not be added, right? For example:\njs\ncombineURLs('http://test.com/foo', '/'); // => 'http://test.com/foo'\nI would suggest to append relativeURL unless it's falsy ('', undefined, null). Thoughts?. Does \"options to be added like keepAlive\" sound good to you?. Cool, could you please update the PR?. Why is this necessary?. The options method does not accept data parameter. Could you please remove data and place options between head and post in README.md?. @rubennorte Do we really need to make this breaking change to the API? I think the current API is good enough and should not be changed without a strong reason.. I like the idea of making this improvement in v1.0, but we are not there yet. What do you think about supporting both formats now and removing support for the old one when we ready to release v1.0? . I would rather use the post method here:\njs\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n}). Can we merge this and previous snippets into one to keep the documentation short? I would insert axios.post() (without error handling) between axios.get()  and source.cancel(). . assignValue is a general-purpose utility function. I don't believe it should handle headers differently than any other keys. . @heisian I don't see why Clone needs to be a class constructor. Why can't it be a regular function that returns a new object instead?. @heisian You can just create an empty object as follows: {}.. I don't think this issue has anything to do with the fact that merge creates plain objects. The root cause is that merge does not always create a new object. For example, if headers exists in the source object, but does not exist in the target object, merge will take the source headers as is (without cloning it). If headers exists in both objects, merge will create a new object. \nUnfortunately, simply cloning the config object will fix some of the issues but will also introduce new ones. That is discussed here: https://github.com/axios/axios/pull/533#issuecomment-262427146\nIt's also discussed here: https://github.com/axios/axios/issues/370. Show we use merge or deepMerge here?. deepMerge?. Nitpicking: I'm not sure about the parameter names (defaults and instanceConfig). mergeConfig is also used to merge the request config with the instance config in the request method so I would suggest to rename them to config1 and config2.. As far as I can see, it's safe to pass undefined or null to utils.deepMerge (correct me if I'm wrong), so we can probably simplify this block as follows:\njs\nif (defaults[prop] || instanceConfig[prop]) {\n  config[prop] = utils.deepMerge(defaults[prop], instanceConfig[prop])\n}. I would suggest to add if (typeof instanceConfig[prop] !== 'undefined') check here so we don't create entries like data => undefined, etc.. It would be great to add some tests for deepMerge. . Instead of listing all these properties here, we could apply this function to all properties that don't belong to the first two groups. Or maybe, it's actually a great idea to specify all properties explicitly so that every time a new property is added, we will have to think whether its values should be merged or not. What do you think?. Also, please see my comment about parameter names.. Could you please update the comment so it doesn't suggest that this function can be used only to merge defaults with an instance config?. I've just realized that we always want to use url, method, params, and data values from the request config (not from defaults or the instance config). It means that we should probably remove the if (typeof config2[prop] !== 'undefined') check. Sorry for the back and forth!. valueFromInstanceConfig name is misleading. valueFromConfig2?. Can we simplify it like this?\njs\nfunction mergeValues(prop) {\n  if (config1[prop] !== 'undefined' || config2[prop] !== 'undefined') {\n    config[prop] = utils.deepMerge(config1[prop], config2[prop]);\n  }\n}\nIt should be ok to pass null or undefined to deepMerge so I would just check if at least one of the config objects contains the prop.. I would also change the name to smth like mergeValues. Could you please rename it to something like defaultToConfig2? . ",
    "aaronshaf": "From what I can tell, this isn't possible with the current version of axios. An interceptor needs some way of preempting dispatchRequest.\n. Yes, that and caching\nOn Mon, Feb 2, 2015 at 9:05 PM, Matt Zabriskie notifications@github.com\nwrote:\n\nIs this to accommodate a test scenario?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/40#issuecomment-72589236.\n. \n",
    "resistdesign": "@mzabriskie How do you specify a custom adapter now?\n. ",
    "DominicTobias": "Any update on this? I much prefer axios's Promise api than superagent's callback api but I would need a way of mocking to adopt it. Thanks\n. ",
    "mik01aj": "@mzabriskie +1\n. The code says that it's resolved when request.status >= 200 && request.status < 300 and rejected in any other case.\nhttps://github.com/mzabriskie/axios/blob/1629a026da17a1e1d8999a02f3fe6b6b60aaac9c/lib/adapters/xhr.js#L58\nhttps://github.com/mzabriskie/axios/blob/db85c7bf3ae19d680f5c16cd85d06c5e11fedc5f/lib/adapters/http.js#L80\n. @dantman :+1: \n. Related: https://github.com/domenic/cancelable-promise and https://github.com/w3c/web-animations/issues/141. Maybe it will inspire you :)\nAlso: http://stackoverflow.com/questions/21781434/status-of-cancellable-promises\n. It's working as expected. Try it:\n```\n$ node\n\nvar axios=require('axios')\naxios.get('https://github.com/invalidurl').then(function(){console.log(1)}, function(){console.log(2)});\n{ _id: 7,\n  _state: undefined,\n  _result: undefined,\n  _subscribers: [] }\n2\n```\n. \n",
    "AndrewRayCode": "I'm confused. Does axios fail the promise on 4xx? This thread makes it sound like it DOES, but in my code i'm getting a resovled promise on status 4xx. It doesn't appear to be documented. \n. Please make axios use standard finally :) \n. Also hoping for a fix. An ajax library that incorrectly serializes an array is not good!\nFYI express's req.query also expects the key[]=val notation\n. For anyone hitting this, I made a wrapper around axios that is 100% untested and definitely only suits the bare minimum of my needs, but it addresses this issue.\nIt assumes a function where you pass in params (query string params) as an object, and the method, and the url\n//  see https://github.com/mzabriskie/axios/pull/49\nif( method.toLowerCase() === 'get' ) {\n    for( let key in params ) {\n        if( _.isArray( params[ key ] ) ) {\n            url += '?' + key + '[]=' + _.map( params[ key ], encodeURIComponent ).join( '&' + key + '[]=' );\n            delete params[ key ];\n        }\n    }\n}\n. ",
    "mbektimirov": "Same thing for me, 400 (BAD REQUEST) error resolves in then, not in catch. Very annoying bug, breaks all REST flow.\n. The problem is with response interceptor. It puts error object in then callback instead catch:\njavascript\naxios.interceptors.response.use(response => {\n  return response;\n}, error => {\n  return error;\n});\n. ",
    "mountHouli": "+1\nUsing axios for the first time.  Definitely like it, but did just run into this; it would be great for the 400s to not throw errors.\nYay! Assigned and in progress as of 4 days ago.  Thanks y'all!\n. +1\nUsing axios for the first time.  Definitely like it, but did just run into this; it would be great for the 400s to not throw errors.\nYay! Assigned and in progress as of 4 days ago.  Thanks y'all!\n. ",
    "adadgio": "I totally y agree, it shouldn't throw any error passed 500 errors, which basically prevents doing any REST... I think this is very \"bad design\" (don't be mistaken, the library is great!!)\nHow is this resolved pass 0.11.0, any example on how to use the option maybe ? (using 0.16 here)\nIs there any way to use this in a classic GET/POST shortcut?\nThanks!. ",
    "roberto-formulatrix": "Agreed, luckily the response is in the error object so you can deal with it, but would make sense to have it in the regular flow.  I always felt like 200-400s was more related to http, whereas 500+ were more application errors.  E.g. validaation failed, etc.\n. ",
    "AndreiBru": "(on 0.16.2) - 400 Response still resolves in then instead of catch, and response object is undefined regardless of what server returns.. Verified that it behaves the same for success callbacks as well\n. ",
    "carlojacobs": "I agree, I use 401 response in case of a login failure, in that case I'm also sending a message, but because it passes it to the .catch(), I can't access that data.\nAny news on how to fix/modify this?. ",
    "jonathanpmartins": "@carlojacobs you can access error.response.data\naxios.post('/').then(response => {\n    console.log(response.data);\n}).catch(error => {\n    console.log(error.response.data);\n});. ",
    "kerembaydogan": "@mbektimirov After seeing @clayreimann suggestion I have changed my interceptor as below.\nNow error resolves in catch block rather than then block. \nHope this helps someone.\nJavaScript\naxios.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  return Promise.reject(error);\n});. @mbektimirov After seeing @clayreimann suggestion I have changed my interceptor as below.\nNow error resolves in catch block rather than then block. \nHope this helps someone.\nJavaScript\naxios.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  return Promise.reject(error);\n});. ",
    "ivan-kleshnin": "@mzabriskie, thank you for this comprehensive answer! \nI actually agree with your advice, and already made the same choice of polyfilling.\n. @mzabriskie, thank you for this comprehensive answer! \nI actually agree with your advice, and already made the same choice of polyfilling.\n. Ah, maybe you're right. \n. Ah, maybe you're right. \n. Same error. Tried:\njs\n A.defaults.baseURL = `https://localhost:8080`\n A.defaults.httpsAgent = new HTTPS.Agent({\n   keepAlive: true,\n   rejectUnauthorized: false,\n })\ngot The \"options.agent\" property must be one of type Agent-like\nReplaced with:\njs\nlet axios = A.create({ ... })\nwhich works but first is more convenient so I'd like to have this fixed.. Same error. Tried:\njs\n A.defaults.baseURL = `https://localhost:8080`\n A.defaults.httpsAgent = new HTTPS.Agent({\n   keepAlive: true,\n   rejectUnauthorized: false,\n })\ngot The \"options.agent\" property must be one of type Agent-like\nReplaced with:\njs\nlet axios = A.create({ ... })\nwhich works but first is more convenient so I'd like to have this fixed.. ",
    "hoppula": "+1 for possibility to switch promise implementation, using native-promise-only in many projects, this would reduce the bundle size.\n. +1 for possibility to switch promise implementation, using native-promise-only in many projects, this would reduce the bundle size.\n. ~~Thanks @mzabriskie, standalone build works great with browserify after the fix.\n@kentor you should just require('axios') and then in your package.json:~~\nreally late edit: @kentor you're right, my build hadn't been properly updated, can confirm that it just returns an empty object.\n. ~~Thanks @mzabriskie, standalone build works great with browserify after the fix.\n@kentor you should just require('axios') and then in your package.json:~~\nreally late edit: @kentor you're right, my build hadn't been properly updated, can confirm that it just returns an empty object.\n. ",
    "pstoica": "In webpack or browserify, alias the package to:\naxios/dist/axios.standalone.js\nIt will be prebuilt, but it won't require a separate promise. Promise must be defined globally.\n. Oops, just tried it and the standalone build still assumes Promise.polyfill exists.\n. I'm using babel and its runtime. Calls to Promise are swapped with babel-core's Promise. So I already have something taking care of polyfilling.\n. Sounds good. How about making a __STANDALONE__ flag with DefinePlugin to remove that?\n. Great, thanks so much! Seems like this can be closed now?\n. Great, thanks so much! Seems like this can be closed now?\n. It sounds like browserify is picking up the file fine. Wouldn't one UMD build fix all these issues? (I didn't realize axios.js was one var declaration.)\n. It sounds like browserify is picking up the file fine. Wouldn't one UMD build fix all these issues? (I didn't realize axios.js was one var declaration.)\n. You're getting an empty object because nothing is being exported yet. One UMD build will give you either AMD, CommonJS, or a global. It also means you wouldn't have to specify AMD/etc in the filename.\n. You're getting an empty object because nothing is being exported yet. One UMD build will give you either AMD, CommonJS, or a global. It also means you wouldn't have to specify AMD/etc in the filename.\n. Yeah, I think at this point it'd be better to ask people to responsibly manage their own Promise/ES6 polyfills. I think people would be using Promises in general if they decided to use axios.\n. Yeah, I think at this point it'd be better to ask people to responsibly manage their own Promise/ES6 polyfills. I think people would be using Promises in general if they decided to use axios.\n. Since you're dealing with promises, I would still expect some kind of completion where I can choose to ignore the error if I'm expecting an abort. RxJS-DOM also throws an error with a type abort: https://github.com/Reactive-Extensions/RxJS-DOM/blob/master/doc/operators/ajax.md#returns\n. Since you're dealing with promises, I would still expect some kind of completion where I can choose to ignore the error if I'm expecting an abort. RxJS-DOM also throws an error with a type abort: https://github.com/Reactive-Extensions/RxJS-DOM/blob/master/doc/operators/ajax.md#returns\n. Also, maybe you'd want to return another promise as the result of an abort?\n. Also, maybe you'd want to return another promise as the result of an abort?\n. You should consider RxJS for these kinds of problems (this is a common demo). Aborting requests isn't currently implemented: https://github.com/mzabriskie/axios/issues/50\n. ",
    "kentor": "Would also be interested in this. I'm using browserify and would like to use bluebird as the promise implementation for axios since it supports finally. \n. I'm using browserify. require('axios/dist/axios.standalone') just returns an empty object?\n. @hoppula that work for you? I tried it and it's the same, I just get a {}. I think specifying an alias in the browser field is basically the same as explicitly calling require('axios/dist/axios.standalone.js').\n@mzabriskie thanks that recipe does work indeed. Though, I guess I will need to use the same promise implementation as the one in axios in other places in my code if I want to save bytes in my bundle.\n. I'm :+1: on removing the promise from the library. I would even go as far as not specifying it as a peerDependency. I'm with facebook's on this one:\nhttps://facebook.github.io/react/docs/working-with-the-browser.html#browser-support-and-polyfills\n\nwe've also taken the stance that we, as authors of a JS library, should not be shipping polyfills as a part of our library. If every library did this, there's a good chance you'd be sending down the same polyfill multiple times, which could be a sizable chunk of dead code. \n. \n",
    "nelix": "Can you not just not require es6-promise (by default instead of in the global build) and add something to the readme telling the consumer to use babel or es6-promise?\n. I mean because I use babel I'd rather let it provide the promise polyfill\n. Did you make much progress with this @mzabriskie?\n. ",
    "tomatau": "+1 to remove polyfills from library.\n. +1 to remove polyfills from library.\n. ",
    "NervosaX": "+1 for allowing me to change the promise implementation.\n. ",
    "ascrazy": ":+1: on removing es6-promise from the library.\n. ",
    "CrisLi": "0.6.0 has released, and in the upgrade guide, only es6-promise has been mentioned.\njavascript\nrequire('es6-promise').polyfill();\nvar axios = require('axios');\nHow to config axios using bluebird?\n. @bboydflo \nSorry, I have switched to use Fetch API.. @deyhle I am agree to use different node modules. But node will cache the module when you require it at first time. So when I add interceptors to one of them, all axios will have the interceptors. I have check the source code, the axios does not use factory pattern to exports its instance.\n. ",
    "bboydflo": "@CrisLi have you found out how to configure axios to rely onBluebird as promise library? . @CrisLi I solved the issue by checking if Promise attribute is in the global scope, otherwise, window.Promise =BluebirdPromise;. as @leyume said, if it worked with jquery, than passing config object with headers\nheaders: {\n     'Content-Type': 'application/x-www-form-urlencoded'\n  },\nfixed the problem for me. Also make sure to have \"Access-Control-Allow-Origin\" = \"*\" set on the server side.. ",
    "dev-tim": ":+1  to this issue\n. :+1: \n. ",
    "nicholasrobinson": "I would imagine that \"full\" cookie jar support would:\n- respect cookie deletion headers in server response\n- respect cookie expiration\n- maybe more..?\nAs for cases where you wouldn't want cookie support:\n- Unit testing of http endpoints?\n- Deliberately ignoring cookie headers?\nIMO there should be a flag to disable cookie jar support. More generally speaking though it is useful to be able to emulate browser functionality in automated testing scenarios.\n. I would imagine that \"full\" cookie jar support would:\n- respect cookie deletion headers in server response\n- respect cookie expiration\n- maybe more..?\nAs for cases where you wouldn't want cookie support:\n- Unit testing of http endpoints?\n- Deliberately ignoring cookie headers?\nIMO there should be a flag to disable cookie jar support. More generally speaking though it is useful to be able to emulate browser functionality in automated testing scenarios.\n. ",
    "damoclark": "In Node, you may also wish to use different cookie jars depending on which sites you are accessing.  A default cookie jar could be defined, but an alternate used on specific requests.  Just leverage the existing merging of options that Axios already provides.\n. Hey Matt,\nThis is a simple contribution that allows Axios to be easily used in browser userscripts, such as Greasemonkey, Tampermonkey etc.  The patch is quite modest in terms of changes.  \nI fixed up the PR with a second commit according to the Travis-CI checks relating to the Node.js Style Guide.\nUnfortunately, the Greasemonkey API includes a function name that doesn't conform to the style guide, and is thus failing the Travis-CI check.  So I'm not sure how I can get around this.\nThe Greasemonkey API has the function GM_xmlhttpRequest which is equivalent to the usual xmlHttpRequest, except that it isn't restricted by cross-site limitations - a prominent feature of userscripting.\nWill you accept this PR?\nRegards,\nDamien.\n. Hey Matt,\nFixed the Travis-ci errors.  \nCould you please advise if you plan to merge this PR or not?\nCheers,\nDamien.\n. ",
    "andreportela": "I was recently trying to do just that (add trivial cookie support) and I've used the code sample posted by @nicholasrobinson. Unfortunately I couldn't make it work like that. \nIt seems that axios.interceptors.request is triggered between the request being made and then callback being executed. So it doesn't inject the cookie in the request.\nI made it work by manually capturing the cookie on the first server response and then manually injecting the cookie into the following requests (which is ugly) like this\n``` javascript\nfunction getCookie(response) {\n    return response.headers['set-cookie'];\n}\nfunction makeRequestWithGivenCookie(cookie) {\n    return axios.get('/',{headers: {\"Cookie\": cookie}});\n}\n```\nAm I missing something here? BTW axios is great! Cookie support would really be an awesome feature.\n. ",
    "maxhoffmann": "Any opinion on this one?\n. Cool, thanks. :+1: \n. Any update on this? I\u2019m currently using my fixed version directly from github. Would be nice to merge this in. :)\n. According to my research Rails and PHP only support the bracket notation.\n. I could add an option so that people can enable it if the change breaks something. Although I\u2019d say increasing the major version and adding a line to changelog should be sufficient.\nIn case you\u2019d add an option: how would you name and add the config parameter?\njs\naxios({\n  disableGetBracketNotation: true\n});\nI think bracket notation should be the default, so the option should fall back to the old behavior.\n. Yep, passing a function sounds better. So would you move buildUrl to defaults.js and make it a config option like transformRequest?\n. Sure, changes are done. Looking forward to remove my fork from our package.json. :+1: \n. Thanks for merging! When is the next release?\n. any plans for bumping the version number?\n. ",
    "webbushka": "Any decisions made on this?\n. duplicates #49 \n. duplicates #49 \n. ",
    "renfredxh": "I'm using a Python backend and ran into this issue. An extensible buildUrl function would be nice, but I think the bracket notation is such a wide use case that it would be useful to have a boolean flag option for it. jQuery's $.get enables bracket encoding by default and many people are used to having it available.\n. I'm using a Python backend and ran into this issue. An extensible buildUrl function would be nice, but I think the bracket notation is such a wide use case that it would be useful to have a boolean flag option for it. jQuery's $.get enables bracket encoding by default and many people are used to having it available.\n. ",
    "liverbool": ":+1: \n. ",
    "paulwehner": "I like the idea of it being ignored since you actively choose to abort the\nrequest. No need to send an error that I have to do extra work to handle.\nOn Jul 25, 2015 3:46 PM, \"Patrick Stoica\" notifications@github.com wrote:\n\nAlso, maybe you'd want to return another promise as the result of an abort?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/50#issuecomment-124908875.\n. I just saw this: https://github.com/mzabriskie/axios/issues/50. Hopefully it will be implemented soon.\n. Awesome. Thanks for responding.\n. Was this released? Is there documentation for this?\n. \n",
    "vanwagonet": "For some reason a promise that is never resolved seems much worse than an event never firing or a callback never being called. If it was an event or callback based API, it would be easier to ignore.\nEven in an extra layer of abstraction though, if I abort an ongoing operation, it is because I no longer care about the result, so needing to handle it in all of my error handling is just superfluous work. If it is important in the new abstraction, it can expose its own abort method that aborts the request and resolves/rejects/emits/calls back as it prefers.\n. I think rejecting the promise on abort is better than leaving it hanging. It's better to have too much information than not enough. If I'm aborting the request, I can make sure the rejection is ignored. If something else aborted, I should be informed via rejection.\nMy initial thought on callbacks not getting called or events not triggered vs promise unresolved is probably mostly derived emotion from terminology. \"You promised you'd do it, and never even told me when you decided not to.\"\n. ",
    "herrstucki": "FWIW, Bluebird rejects cancelled promises with a CancellationError (docs). That way you can still handle cancellations if needed.\n. Before this ID-based (I know, I suggested it :sweat_smile:) approach lands in the API, and maybe just useful for completeness, here are two other approaches I've seen while researching this:\nCancel/abort using the promise itself\njs\nvar req = axios.get(/*...*/);\naxios.abort(req);\nThe drawbacks are that axios would need to keep track of all requests and that it only would work with the original promise (so not if we returned another one in .then).\nReturn an object with a abort method\njs\nvar req = axios.get(/*...*/);\n// req.promise would be the actual promise\nreq.abort();\nThat would be a breaking change in axios' API. But it would make it a bit more flexible, and other things could be added, like xhr onprogress handlers.\n. ",
    "robcolburn": "I mostly don't care because if you synchronously aborted, then you're responsible for can deal with consequences.  But, I could see a case for rejections once you've abstracted a bit.\n``` js\nrenderLoading()\nPromise\n  .all(stuff.map(src => Lib.load))\n  .then(render, renderFail)\nLib={\n  reqs:[],\n  load:src=>\n    (this.reqs.push(let x=axios(src)) && x),\n  stop:()=>\n    this.reqs.map(req=>req.abort())\n}\nEvent.on(\"user scrolled\", () => Lib.stop())\n```\n. @ergason,\nNo worries there, failed requests already go down the Promise error path. This is specifically when you, the developer, manually abort the request. \n. @jergason ^\n. ",
    "ponty96": "i think @mzabriskie  is right. The whole need of catching is when the developer cannot foresee all possible errors not for an event triggered manually by him. \n@jergason  even if we have a use case where the user cancels the upload, the developer still has the total country of UI updates...\nlike\n```\n      function uploadFile(file) {\n   var data = new FormData();\n  data.append('file', file);\n  axios.post('/upload', data, {\nrequestId: 'file-upload'  }).then(function (response) {\nalert('File has been uploaded');\n});\n    }\nfunction unCancelButtonClicked()\n\n{\n     axios.abort('file-upload');\n      UIUpdate(''Hey you just cancelled the update\");\n  }\n```\nthou @mzabriskie, how sure are you that the abort() action will be carried out and that it won't come back as an error.... (I'm new to the whole promise thing).\n. ",
    "dantman": "Leaving promises unresolved when a request is aborted is a bad idea.\nThe examples I see here on why one might want to abort a request are a limited set. The code that wants to abort the request may not always be directly integrated with the code making a request. And saying code calling abort should be responsible for cleanup can end up actually making code messier and/or add duplication to code.\nHere's an example for a different use case. Say this is part of an application is written to use the browser's pushState API. When a user navigates to a new page this app decides it's best to abort any API request that is related to the context of the previously open page.\nSay this runs as part of an AJAX form submit.\njs\nvar obj = createExpensiveObject();\nbutton.pending(); // Disable submit button and display a pending indicator\nBluebird.cast(axios.get('/api/req', {requestId: 'api-req'}))\n  .then((response) => {\n    // Do something with the result data and expensive object\n  })\n  .finally(() => {\n    // Disable the pending indicator when the request has either succeeded or failed\n    button.pending(false);\n    // Allow the expensive object to be garbage collected\n    obj = null;\n  });\napiRequestIds.push('api-req');\nAnd the cleanup when navigating pages runs this.\njs\napiRequestIds.forEach((id) => {\n  axios.abort(id);\n});\nIn this code a finally is used to turn off a pending button state if the request fails or succeeds and a separate piece of code wants to abort the request. Under this use case if an abort leaves a promise hanging in the pending state either the button will never leave that state (in this case not a big deal since the button will probably disappear, but not always the case). And saying that the code doing the aborting should be responsible for aborting should be responsible for handling it is saying two bad things. A) This disconnected code that only wants to abort a HTTP request should be responsible for digging into the state of every button, etc... related to the requests and cleaning them up. Which of course can be handled by making a more complex system where abort callbacks that can handle cleanup are passed. B) That code in the .finally needs to be duplicated for aborts to work.\nAdditionally the finally also cleans up a reference to an expensive object. In this example, depending on whether references belonging to a promise that is pending and not resolved but references to the promise itself have been lost are garbage collected the expensive object may be collected after all. However if the reference being cleaned up is global, then you're guaranteed a leak.\n. Attempting to set testEnvironment to node didn't work for me, I still get the error.\nI guess I'm going to have to make due with a hack.. ",
    "ralphholzmann": "Jumping in as this is affecting my current project. Have you considered what Angular does with $http? They have a timeout parameter that takes milliseconds or a promise. If that timeout promise gets resolved, the request gets aborted. For axios, it might look something like:\n``` javascript\nvar cancelRequest = Promise.defer();\naxios.post('/upload', data, {\n  timeout: cancelRequest.promise\n});\ncancelRequest.resolve(); // Aborts request\n```\nThis solves a couple of problems -- you can differentiate between requests that were cancelled versus requests that were aborted. Furthermore, you don't have to worry about colliding \"request IDs\".\n. Hi friends! Anyway we could get this fix tagged in npm? We need this fix over at Vine, and I would rather not have to peg to a git commit in my package.json.\nThanks :)\n. @mzabriskie thanks so much!\n. Vine - node and browser\n. ",
    "ssetem": "Angular has an elegant way, where you pass in a promise to abort, meaning if that promise resolves it aborts it. The cool thing with this strategy is that you can do timeout + abort with the same abstraction\ne.g. axios.post(..., {timeout:somePromise})...\ntimeout or manual abort = somePromiseDeffered.resolve()\n*edit I just saw Ralph's post above with same suggestion :D\n. ",
    "eknkc": "How about providing 2 functions instead of an abort?\nSomething like:\n``` js\nlet req = axios.post(...).then(...);\n// Would abort the request in flight but resolve the promise to supplied object.\nreq.resolve({ foo: 'bar' });\n// Would abort the request in flight and reject the promise if an argument is supplied\n// Can be aliased as abort.\nreq.reject(new Error(\"Aborting Request\"));\n```\nOr making it configurable?\njs\nreq.abort({ resolve: {foo: 'bar'} });\nreq.abort({ reject: new Error(\"Foo\") });\nreq.abort(); //silent\n. How about providing 2 functions instead of an abort?\nSomething like:\n``` js\nlet req = axios.post(...).then(...);\n// Would abort the request in flight but resolve the promise to supplied object.\nreq.resolve({ foo: 'bar' });\n// Would abort the request in flight and reject the promise if an argument is supplied\n// Can be aliased as abort.\nreq.reject(new Error(\"Aborting Request\"));\n```\nOr making it configurable?\njs\nreq.abort({ resolve: {foo: 'bar'} });\nreq.abort({ reject: new Error(\"Foo\") });\nreq.abort(); //silent\n. BTW, my arguments against silent aborts:\n- ES7 async functions will never continue over await calls. It is better to have an AbortedError or something so the async functions can complete execution.\n- Some promise libraries tend to keep a registry of running promises for lifecycle management etc. Bluebird recently added such features, I'm not sure about the implementation details but forgotten promises might lead up to memory leaks.\n- Easier to check and ignore an aborted exception than to work around that if you need the promise to resolve / reject.\nI think .abort should just reject with an error.\n. BTW, my arguments against silent aborts:\n- ES7 async functions will never continue over await calls. It is better to have an AbortedError or something so the async functions can complete execution.\n- Some promise libraries tend to keep a registry of running promises for lifecycle management etc. Bluebird recently added such features, I'm not sure about the implementation details but forgotten promises might lead up to memory leaks.\n- Easier to check and ignore an aborted exception than to work around that if you need the promise to resolve / reject.\nI think .abort should just reject with an error.\n. ",
    "danielfalk": "+1 for the way Angular does it, via resolving a promise.  It has worked very well for me in practice.\n. ",
    "geowa4": "I believe the best way to handle aborting a request is to steal from the Context pattern in Go. In this case, the context would be another Promise.\nConsider these example invocations using Q for brevity.\ncancelationDeferred = Q.defer()\np = axios.get('/user?ID=12345', { context: cancelationDeferred.promise })\npp = axios({\n  method: 'post',\n  url: '/user/12345',\n  data: {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  },\n  context: cancelationDeferred.promise\n})\nTo cancel either p or pp, we'd call cancelationDeferred.reject({ foo: 'bar' }). Doing this should abort the XHR and reject both p and pp with { foo: 'bar' }. \n. ",
    "Plummat": "is this still on the roadmap?\n. is this still on the roadmap?\n. ",
    "hoschi": "New fetch API is also promise based and has the same problem, see discussion on whatwg/fetch#27\n. ",
    "coveralls": "\nCoverage remained the same at 87.17% when pulling 145ecca1fb2e3d8bf1eef1ee5c9df20398a3d248 on ryiwamoto:add_typescript_definition_to_package_json into 5ab9c2f05e193ad9c87077b805538ffa65c26d96 on mzabriskie:master.\n. \nCoverage remained the same at 87.17% when pulling c2e9821f4491f0329f0edfc9cfabc75fdcee3bcb on kentcdodds:patch-1 into 34dc46f8aa53087379895b3f6a9f847e6768a51d on mzabriskie:master.\n. \nCoverage decreased (-2.8%) to 84.55% when pulling 7ed3b5e693a3c743e991a1b4b6ca651f0fffa2d4 on webbushka:master into 1629a026da17a1e1d8999a02f3fe6b6b60aaac9c on mzabriskie:master.\n. \nCoverage remained the same at 91.369% when pulling 8972ea52086d2f4db20591f59904a40240498123 on Deamon87:patch-1 into 92e15fa0d1847210ae04017c078c9248c29b82fe on mzabriskie:master.\n. \nCoverage remained the same at 91.369% when pulling 256f87e9542ec841693a0af3e260527790a39530 on nickuraltsev:ecosystem into 7c039e89945c67c8ed036847c1b01556a95bb84c on mzabriskie:master.\n. \nCoverage decreased (-0.05%) to 91.317% when pulling 4d83ba91f5d4f2bf10a60961c0c6ad6d7202c567 on nickuraltsev:array-buffer-fix into 5c58b831cc9090a6ca499f9d86305c915ce08448 on mzabriskie:master.\n. \nCoverage remained the same at 91.369% when pulling 0ec09f7be9bc0797e62d5e11664caf09c9228b5a on jergason:patch-1 into 5c58b831cc9090a6ca499f9d86305c915ce08448 on mzabriskie:master.\n. \nCoverage remained the same at 91.369% when pulling 716e487038fca364648f61c6c432063f1d2c41c0 on JoshZA:compression-errors into 8a60a4eb8b0e12993875a944e3db6f75c1318975 on mzabriskie:master.\n. \nCoverage increased (+0.2%) to 91.884% when pulling 91d823f546cde513a03fb847d3cab4a361176d31 on nickuraltsev:validate-status into 093593cbcafa0d829e3d84e363bc76c0c961996e on mzabriskie:master.\n. \nCoverage decreased (-0.6%) to 91.254% when pulling f32b5a6ce4778aa94fd270f409eee0482e44c4c9 on icracked:master into ea375220a26fc8b0ec837e7526e678cd737eabda on mzabriskie:master.\n. \nCoverage increased (+0.03%) to 91.279% when pulling aac2ab634dab0781ef343112edeeb7f6e2b0df6a on josh-egan:add-request-function into 580ef523d5ac20e4b6357183593a83bd3f4f7dc6 on mzabriskie:master.\n. \nCoverage increased (+0.03%) to 91.279% when pulling 785b0455befc7f39c79056457fa1b982db6ef493 on josh-egan:add-request-function into 580ef523d5ac20e4b6357183593a83bd3f4f7dc6 on mzabriskie:master.\n. \nCoverage increased (+0.3%) to 91.573% when pulling f20490eb6b7d37478bd9906649ce085e0a269c6c on nickuraltsev:urlsearchparams into 580ef523d5ac20e4b6357183593a83bd3f4f7dc6 on mzabriskie:master.\n. \nCoverage increased (+0.4%) to 91.62% when pulling 2b8d89a65e0d3de0bcc643af35bae593a98eaf13 on nickuraltsev:urlsearchparams into 580ef523d5ac20e4b6357183593a83bd3f4f7dc6 on mzabriskie:master.\n. \nCoverage increased (+0.03%) to 91.279% when pulling 5a20edeb0c6d175c22b3baf77d86bcda032cf3cf on reggi:patch-1 into 580ef523d5ac20e4b6357183593a83bd3f4f7dc6 on mzabriskie:master.\n. \nCoverage remained the same at 91.254% when pulling b1e6e753fff37c56b0241307a0a76191469f5c2c on kimrgrey:issue#323 into 580ef523d5ac20e4b6357183593a83bd3f4f7dc6 on mzabriskie:master.\n. \nCoverage remained the same at 91.304% when pulling 600653e293e94bcc039f0fb29cde55826407d755 on pr/303 into 05a522fc123f8e9f5b1424c35f42bbfa9ec95307 on master.\n. \nCoverage remained the same at 91.304% when pulling 72829cf94c0a3bcfca7ad29c2e091e8e1ec2ac72 on azizhk:patch-1 into c311466a2c1ad9afa1bced687db44d8aa3bd4ffd on mzabriskie:master.\n. \nCoverage increased (+0.5%) to 91.821% when pulling bba252124988c5569e9e66fd9afb7dd434cdb3b2 on msangui:master into c311466a2c1ad9afa1bced687db44d8aa3bd4ffd on mzabriskie:master.\n. \nCoverage increased (+1.0%) to 92.8% when pulling 6f2186d863be5c886e6e78d4c96cba8c9f232541 on nickuraltsev:errors2 into 120e8f5557975668ba2bbc2ac78b0dee3998e4e9 on mzabriskie:master.\n. \nCoverage increased (+1.3%) to 92.876% when pulling 01790b72519fee07fe62749ee029c9191e6eafe9 on Willian-Zhang:patch-1 into 1725e0808dea179cf820408a45609714c5156850 on mzabriskie:master.\n. \nCoverage increased (+1.3%) to 92.876% when pulling cdec7d4c6f2d0afe074b8c975b0604e5499f2cfb on nettofarah:patch-1 into 1725e0808dea179cf820408a45609714c5156850 on mzabriskie:master.\n. \nCoverage remained the same at 92.876% when pulling a70434be6057e0e56911e98cbeeb19d7d7f794b8 on bomsy:http_proxy-support into 54f3a5dd93b2c83a4c04675b1b59a5189a9646f7 on mzabriskie:master.\n. \nCoverage remained the same at 92.876% when pulling d7ed28bfdf5b5233764e385e6601b303a1c06092 on bomsy:http_proxy-support into 54f3a5dd93b2c83a4c04675b1b59a5189a9646f7 on mzabriskie:master.\n. \nCoverage remained the same at 92.876% when pulling 65cf8c5d965613b1e3b12be6b967d3b117a62fa7 on bomsy:http_proxy-support into 8abe0d4007dd6b3fae5a1c4e019587b7a7f50930 on mzabriskie:master.\n. \nCoverage increased (+1.07%) to 93.947% when pulling 338a08f8454212802e88df69dc67ca6035b21653 on bomsy:http_proxy-support into 8abe0d4007dd6b3fae5a1c4e019587b7a7f50930 on mzabriskie:master.\n. \nCoverage increased (+0.02%) to 92.895% when pulling 235c19c876c2d3933bf776b396859053b012a7a5 on rubennorte:feature/improve-error-handling into 54f3a5dd93b2c83a4c04675b1b59a5189a9646f7 on mzabriskie:master.\n. \nCoverage decreased (-0.08%) to 92.819% when pulling 157efd5615890301824e3121cc6c9d2f9b21f94a on rubennorte:promise-adapters into 8f3a4301ab1abb0f6224401dc9bf1810471e1227 on mzabriskie:master.\n. \nCoverage remained the same at 92.876% when pulling 4c790d5a7a7df7a11e094a431a00e64bff65a19f on rubennorte:feature/allow-http-and-https-agents into 0578445929019efe370dae56cd6f39647e8a73c1 on mzabriskie:master.\n. \nCoverage remained the same at 92.876% when pulling f504dbaba8aba2843f05a13be7d218f4d7469cbc on rubennorte:feature/allow-http-and-https-agents into 0578445929019efe370dae56cd6f39647e8a73c1 on mzabriskie:master.\n. \nCoverage remained the same at 92.876% when pulling 45d64cb40dc6498c75f6da4256d1320958221625 on jonathanfishbein1:master into 8332392bfdf55602d4e0cd120f00d58b381063a4 on mzabriskie:master.\n. \nCoverage remained the same at 92.876% when pulling 441522108a6eb11de062f7d9b49fce40009769ce on madebyherzblut:fix-auth-header into 8332392bfdf55602d4e0cd120f00d58b381063a4 on mzabriskie:master.\n. \nCoverage remained the same at 92.876% when pulling 1ffcbb0369cd241077f610600cc6e61e092afba1 on madebyherzblut:fix-auth-header into 8332392bfdf55602d4e0cd120f00d58b381063a4 on mzabriskie:master.\n. \nCoverage remained the same at 92.876% when pulling c2049ea3bc54a0ac73ebaa66e9f159ad32239c97 on Baavgai:master into 8abe0d4007dd6b3fae5a1c4e019587b7a7f50930 on mzabriskie:master.\n. \nCoverage remained the same at 92.876% when pulling c2049ea3bc54a0ac73ebaa66e9f159ad32239c97 on Baavgai:master into 8abe0d4007dd6b3fae5a1c4e019587b7a7f50930 on mzabriskie:master.\n. \nCoverage remained the same at 92.876% when pulling 40b789e18f0b103f98945c6b79c782b34e9dbe22 on Baavgai:master into 8abe0d4007dd6b3fae5a1c4e019587b7a7f50930 on mzabriskie:master.\n. \nCoverage remained the same at 92.876% when pulling 85b90158907ba7fa21a02edb4bb26bfa08bafa61 on pracucci:master into 8abe0d4007dd6b3fae5a1c4e019587b7a7f50930 on mzabriskie:master.\n. \nCoverage remained the same at 92.876% when pulling e861a6cf756d25598c32ee8531a4d8c7e54fbb8d on pracucci:master into 8abe0d4007dd6b3fae5a1c4e019587b7a7f50930 on mzabriskie:master.\n. \nCoverage remained the same at 92.876% when pulling 1525e8771b9d2461cdbdd2e7181a11bb881e3cca on axelboc:patch-2 into 8abe0d4007dd6b3fae5a1c4e019587b7a7f50930 on mzabriskie:master.\n. \nCoverage increased (+0.02%) to 92.895% when pulling 36e4c8fc9f97cc9eae21132765a3a6dd20efb256 on tanzoniteblack:url-search-params-polyfill into 8abe0d4007dd6b3fae5a1c4e019587b7a7f50930 on mzabriskie:master.\n. \nCoverage decreased (-0.2%) to 92.67% when pulling 735e30c8da8e05c1864dc3a5dfc0c8062e646807 on jvmccarthy:fix290-configPromise into 8abe0d4007dd6b3fae5a1c4e019587b7a7f50930 on mzabriskie:master.\n. \nCoverage increased (+0.06%) to 94.041% when pulling 6b84ea47ed3f96c280018ee38a50490a3e608abb on jvmccarthy:fix290-configPromise into d982cf99324124582721d1cd15a99cb975e93716 on mzabriskie:master.\n. \nCoverage increased (+0.06%) to 94.041% when pulling 2574f9877b38b271d93a00686913e58f6078879d on jvmccarthy:fix290-configPromise into d982cf99324124582721d1cd15a99cb975e93716 on mzabriskie:master.\n. \nCoverage remained the same at 92.876% when pulling 7241be2160bad7da55f9b06d266c0699ee4b76f6 on woodb:changelog-breaking-changes into fa5ce95fdcee5c3a6c0ffac0164f148351ae3081 on mzabriskie:master.\n. \nCoverage increased (+0.04%) to 92.913% when pulling 0dfd53f1518e4b3b9dc16acbf3924d09c3a66d58 on nickuraltsev:ts into fa5ce95fdcee5c3a6c0ffac0164f148351ae3081 on mzabriskie:master.\n. \nCoverage remained the same at 92.913% when pulling 95754996527c7a386d577d1f703c3e5403aa2964 on rishabhsrao:readme-interceptors-note-about-promise-polyfill into 59080e68d983782445eded3a39f426161611e749 on mzabriskie:master.\n. \nCoverage increased (+1.03%) to 93.947% when pulling 10a986ccc8b3c1c4616caba1afdaaf809afcdfea on diesal11:master into 59080e68d983782445eded3a39f426161611e749 on mzabriskie:master.\n. \nCoverage decreased (-23.7%) to 69.211% when pulling 2dffe909df7c9470d567e333fe8e72c50d46a2d7 on diesal11:master into 59080e68d983782445eded3a39f426161611e749 on mzabriskie:master.\n. \nCoverage increased (+1.03%) to 93.947% when pulling 3f5d411833a26ce0df02c71586813c8c1b08641b on diesal11:master into 59080e68d983782445eded3a39f426161611e749 on mzabriskie:master.\n. \nCoverage increased (+1.03%) to 93.947% when pulling bcad5b15b81f6c574ee73939601213db2b1dae49 on diesal11:master into 59080e68d983782445eded3a39f426161611e749 on mzabriskie:master.\n. \nCoverage increased (+1.03%) to 93.947% when pulling f6238090b0efc1d7df0f6df73e6e7f12b31b619a on diesal11:master into 59080e68d983782445eded3a39f426161611e749 on mzabriskie:master.\n. \nCoverage remained the same at 93.947% when pulling 58a734e652dc52b0c5675df93349979b6d150b35 on andykog:patch-1 into 0b8c86e2979557e41beaa1f42ce4504266c9081f on mzabriskie:master.\n. \nCoverage remained the same at 93.947% when pulling 977512da64415b31fc49d4b7f85715de7a858d2f on 3846masa:3846masa/cookiejar into 755a9b345953b1eb08f18ca1bc7c5b54cedf9858 on mzabriskie:master.\n. \nCoverage remained the same at 93.947% when pulling 88130689589872cd6f19866680162abb46a39d7a on kenvunz:patch-2 into 755a9b345953b1eb08f18ca1bc7c5b54cedf9858 on mzabriskie:master.\n. \nCoverage remained the same at 93.947% when pulling 077153a0a73cceeba917a985078319b5a8e9be48 on tony-kerz:tk/has-own-prop into 755a9b345953b1eb08f18ca1bc7c5b54cedf9858 on mzabriskie:master.\n. \nCoverage decreased (-0.2%) to 93.701% when pulling 7c780e67e06048b1169c01eded48400b167c49be on dan-turner:default-adapter into 755a9b345953b1eb08f18ca1bc7c5b54cedf9858 on mzabriskie:master.\n. \nCoverage increased (+0.4%) to 94.313% when pulling 5efca1ebbc9df85ff88758a9523480eccca531d7 on nickuraltsev:cancel into b8f6f5049cf3da8126a184b6b270316402b5b374 on mzabriskie:master.\n. \nCoverage increased (+0.4%) to 94.313% when pulling 920769d0d74b6f37c64e715051aa7ed1ee50fc74 on nickuraltsev:cancel into b8f6f5049cf3da8126a184b6b270316402b5b374 on mzabriskie:master.\n. \nCoverage increased (+0.4%) to 94.366% when pulling 216e2a6787fa836d0aeb0b000c2849ba88e2f462 on nickuraltsev:cancel into b8f6f5049cf3da8126a184b6b270316402b5b374 on mzabriskie:master.\n. \nCoverage increased (+0.4%) to 94.393% when pulling 8f304903863800f1efe9d4fd15f7611d1b0d4e15 on nickuraltsev:cancel into b718ebfb2190d9c9899a7a7d19c48af6296d30da on mzabriskie:master.\n. \nCoverage increased (+0.4%) to 94.393% when pulling 8f304903863800f1efe9d4fd15f7611d1b0d4e15 on nickuraltsev:cancel into b718ebfb2190d9c9899a7a7d19c48af6296d30da on mzabriskie:master.\n. \nCoverage remained the same at 93.947% when pulling aeadad44533e77c95bdec608d30fa062d4939011 on comamitc:master into b8f6f5049cf3da8126a184b6b270316402b5b374 on mzabriskie:master.\n. \nCoverage remained the same at 93.979% when pulling 2e0adc1cae76eb214800ce64cfb5d27c032c8556 on theikkila:master into d982cf99324124582721d1cd15a99cb975e93716 on mzabriskie:master.\n. \n\nCoverage decreased (-0.3%) to 93.687% when pulling 2e0adc1cae76eb214800ce64cfb5d27c032c8556 on theikkila:master into d982cf99324124582721d1cd15a99cb975e93716 on mzabriskie:master.\n. \n\nCoverage decreased (-0.3%) to 93.687% when pulling 8cdfcd02849057d901b2140b7d398f34a0e2685e on theikkila:master into d982cf99324124582721d1cd15a99cb975e93716 on mzabriskie:master.\n. \nCoverage increased (+0.03%) to 94.419% when pulling c2a4b20dbb2f3d5bd86c75c13179455d75c90b75 on kompot:master into 12341d88c08eda84919c07c858a4d3168521613c on mzabriskie:master.\n. \n\nCoverage decreased (-0.7%) to 93.719% when pulling 5f08fab54190deefc0ecaaa74ebbe3f016b25257 on kompot:master into 12341d88c08eda84919c07c858a4d3168521613c on mzabriskie:master.\n. \nCoverage increased (+0.2%) to 94.393% when pulling 48bc8fbadeb3b9e1e52d13fa7f524d0244058a7c on mawrkus:support-proxy-auth into e8c5c49ea2f2cf4fd45eaf81270a6d23546e2c93 on mzabriskie:master.\n. \nCoverage increased (+0.2%) to 94.393% when pulling 8647ffa410b09337c16508089fe3837fe0fa6662 on mawrkus:support-proxy-auth into e8c5c49ea2f2cf4fd45eaf81270a6d23546e2c93 on mzabriskie:master.\n. \nCoverage remained the same at 94.419% when pulling 3d1ec20ab336aef80f2220fe829bba7520f32fbc on mawrkus:support-proxy-auth into b78f3fe79298a000f056ff40bbd1447c2d667cc5 on mzabriskie:master.\n. \nCoverage remained the same at 94.393% when pulling 8e7cb1283026729fa46b2a63a26bb260f8aa7a72 on TheRock1987:master into 3f8b128da4ab11e34f0b880381f9395b2ab0e22f on mzabriskie:master.\n. \nCoverage remained the same at 94.393% when pulling ce1ecdae7a035c144b3726e976c3d1a98caa7bd0 on Jarlotee:patch-1 into 3f8b128da4ab11e34f0b880381f9395b2ab0e22f on mzabriskie:master.\n. \nCoverage remained the same at 94.393% when pulling ce1ecdae7a035c144b3726e976c3d1a98caa7bd0 on Jarlotee:patch-1 into 3f8b128da4ab11e34f0b880381f9395b2ab0e22f on mzabriskie:master.\n. \nCoverage increased (+0.2%) to 94.419% when pulling 7c89704262913cebd98f7a27918b92c87c48c9e1 on mgmcdermott:master into b21a280df0475c89b8cd0ca7ac698a16eca46ec0 on mzabriskie:master.\n. \nCoverage increased (+1.5%) to 93.83% when pulling a2a86cc2257829dcb0209c38668ae8c3b6baaf2c on slavomirvojacek:master into f40de498e6af74d9ef45d1321118549f64584764 on mzabriskie:master.\n. \nCoverage increased (+1.5%) to 93.83% when pulling cb56169931c58950d921ac05ae43271109627c86 on slavomirvojacek:master into f40de498e6af74d9ef45d1321118549f64584764 on mzabriskie:master.\n. \nCoverage increased (+1.5%) to 93.83% when pulling 4bfc63ab072396214d6c8c3af8d249a0f452c8a1 on slavomirvojacek:master into f40de498e6af74d9ef45d1321118549f64584764 on mzabriskie:master.\n. \nCoverage remained the same at 93.924% when pulling 35726f82be308370a7421d7cad78d20e8edd0c74 on DenisCarriere:master into d963368960e2e1b3ec6a2eb78ff8fd085e4e229c on mzabriskie:master.\n. \nCoverage remained the same at 93.924% when pulling e167b82a8681433a98dfa5b6ccdaafb723fa8c5e on DjebbZ:patch-1 into d963368960e2e1b3ec6a2eb78ff8fd085e4e229c on mzabriskie:master.\n. \nCoverage remained the same at 93.924% when pulling 194f41a53755a20e1d2c1e48a9f6d9931b7f92b4 on yanivefraim:feature/443 into 949d08df71c87cac1754087128eb845be9a6ba2c on mzabriskie:master.\n. \nCoverage remained the same at 93.924% when pulling 194f41a53755a20e1d2c1e48a9f6d9931b7f92b4 on yanivefraim:feature/443 into 949d08df71c87cac1754087128eb845be9a6ba2c on mzabriskie:master.\n. \nCoverage increased (+0.03%) to 93.955% when pulling dfcb18ac0dc3a7eacc230dfbb9bc8647d39319c8 on yanivefraim:feature/443 into 949d08df71c87cac1754087128eb845be9a6ba2c on mzabriskie:master.\n. \nCoverage increased (+0.03%) to 93.955% when pulling 17971ff3e2798b9f2c5a049bd66044a126ece636 on yanivefraim:feature/385 into 63ee3573c2132bd3ef090e0214f069bd0bc7ad28 on mzabriskie:master.\n. \nCoverage increased (+0.2%) to 94.118% when pulling b1afe2bdf771d73c70679239f3a3824616ca3e4b on yanivefraim:feature/385 into 63ee3573c2132bd3ef090e0214f069bd0bc7ad28 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.924% when pulling 17b0c973cb2f1143a6682244833accc94e7549c4 on Rossolson:patch-1 into 5faebabcd8f065e312b5c92081433d6ae1ef8c8f on mzabriskie:master.\n. \n\nCoverage decreased (-0.4%) to 93.516% when pulling 4f54471e898858ed23eb4497e925879ded1a73e9 on Kovensky:patch-1 into 4976816808c4e81acad2393c429832afeaf9664d on mzabriskie:master.\n. \n\nCoverage decreased (-0.03%) to 93.909% when pulling eaba7875fceabb9a5a6c84c4848bba8c39eab9f9 on dominykas:remove-protection-prefix into 4976816808c4e81acad2393c429832afeaf9664d on mzabriskie:master.\n. \n\nCoverage increased (+0.3%) to 93.909% when pulling ed47ef8b568018928e4560f7380d1752573a5e32 on inthemill:master into cfe33d4fd391288158a3d14b9366b17c779b19e3 on mzabriskie:master.\n. \n\nCoverage increased (+0.08%) to 93.734% when pulling 24ecb51227b516fc903b3fe5b518f2fbccdb36e4 on inthemill:master into cfe33d4fd391288158a3d14b9366b17c779b19e3 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.734% when pulling bdcad151e08437e7dcf61ff812a817a49a36f8cf on inthemill:master into f1fb3de38fc96287763aeb7c5fee23858c851955 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.812% when pulling 44967bf9510b884c4580419ba95bfd91713dfadb on inthemill:master into 07a7b7c84c3ea82ea3f624330be9e0d3f738ac70 on mzabriskie:master.\n. \n\nCoverage decreased (-0.5%) to 93.154% when pulling c11a9f23dc6fdfa4730f11be8bfe2837eb7a58c0 on grupawp:master into cfe33d4fd391288158a3d14b9366b17c779b19e3 on mzabriskie:master.\n. \n\nCoverage increased (+0.3%) to 93.909% when pulling 13bc0e032faaca301863a118316dda7be30bc40f on IgorDePaula:master into cfe33d4fd391288158a3d14b9366b17c779b19e3 on mzabriskie:master.\n. \n\nCoverage increased (+0.3%) to 93.909% when pulling 21db0e176b552442b4d9c825f1fbf101c3c893d8 on IRus:master into cfe33d4fd391288158a3d14b9366b17c779b19e3 on mzabriskie:master.\n. \n\nCoverage increased (+0.3%) to 93.924% when pulling 2bd48d4f95a7e04110badf3fcabd8595c1c5f7fe on loklaan:support-base-url-only into cfe33d4fd391288158a3d14b9366b17c779b19e3 on mzabriskie:master.\n. \n\nCoverage increased (+0.3%) to 93.909% when pulling 8816bf6ff1b5b57aaea5253fde327334d72ce213 on loklaan:support-base-url-only into cfe33d4fd391288158a3d14b9366b17c779b19e3 on mzabriskie:master.\n. \n\nCoverage increased (+0.3%) to 93.909% when pulling 75965ff0652c978de55de3b239c9e8c6615b9f9c on loklaan:support-base-url-only into cfe33d4fd391288158a3d14b9366b17c779b19e3 on mzabriskie:master.\n. \n\nCoverage increased (+1.4%) to 93.812% when pulling 0d9882a9415084190229a467cf3aa81fbd661da8 on andresusanto:master into 322be107301c5c725b13e3c0c00108e55655f540 on mzabriskie:master.\n. \n\nCoverage increased (+1.4%) to 93.797% when pulling 0bb2dd49332c0606fd2bd795b86b1b863a44864f on andresusanto:master into 322be107301c5c725b13e3c0c00108e55655f540 on mzabriskie:master.\n. \n\nCoverage increased (+1.4%) to 93.812% when pulling 0bb2dd49332c0606fd2bd795b86b1b863a44864f on andresusanto:master into 322be107301c5c725b13e3c0c00108e55655f540 on mzabriskie:master.\n. \n\nCoverage increased (+1.4%) to 93.812% when pulling 6acb9c915b4592eebc3f54d7f976b2da762c9dc6 on andresusanto:master into 322be107301c5c725b13e3c0c00108e55655f540 on mzabriskie:master.\n. \n\nChanges Unknown when pulling a87e0b7c0e2a3c89f241bc19efe6cf4f7ca70ff9 on eu81273:master into  on mzabriskie:master.\n. \n\nCoverage increased (+1.5%) to 93.687% when pulling d7bd29a97fa351e003324b9f7def26d5d89f74a8 on vbfox:disable_proxy into 5630d3be55cd591cd279927616f895356a10a361 on mzabriskie:master.\n. \n\nCoverage increased (+1.5%) to 93.687% when pulling 9373bf98e01827f900509e6a1b23546befdaf108 on vbfox:disable_proxy into 5630d3be55cd591cd279927616f895356a10a361 on mzabriskie:master.\n. \n\nCoverage increased (+1.6%) to 93.812% when pulling db8457ceda63cc9fbdb493e34ffc4a44ed8813e5 on vbfox:disable_proxy into f31317aeca8f7fa385d6aee94ef6ec8ac9d7c072 on mzabriskie:master.\n. \n\nCoverage increased (+1.6%) to 93.812% when pulling db8457ceda63cc9fbdb493e34ffc4a44ed8813e5 on vbfox:disable_proxy into f31317aeca8f7fa385d6aee94ef6ec8ac9d7c072 on mzabriskie:master.\n. \n\nChanges Unknown when pulling 5df39d8fa056e7eadf5aaceedb778b2568a4a73c on Viktor6713:master into  on mzabriskie:master.\n. \n\nCoverage remained the same at 93.687% when pulling bf2163c68e26e9c508d6e16ea38545d016473c52 on model3volution:Update/readme into fe810b1e3c132fea761378441a9b63916e5a6758 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.687% when pulling bf2163c68e26e9c508d6e16ea38545d016473c52 on model3volution:Update/readme into fe810b1e3c132fea761378441a9b63916e5a6758 on mzabriskie:master.\n. \n\nCoverage decreased (-3.7%) to 90.0% when pulling e4628b85ae8352985b2e23e7db8d2455fe22b4b8 on SeokHeo:request-default-meh into fe810b1e3c132fea761378441a9b63916e5a6758 on mzabriskie:master.\n. \n\nCoverage decreased (-3.7%) to 90.0% when pulling e4628b85ae8352985b2e23e7db8d2455fe22b4b8 on SeokHeo:request-default-meh into fe810b1e3c132fea761378441a9b63916e5a6758 on mzabriskie:master.\n. \n\nCoverage increased (+1.5%) to 93.703% when pulling 5f206ae5d749f46a6a44933ab08780a4ce7be124 on jerfowler:node-buffers into 5630d3be55cd591cd279927616f895356a10a361 on mzabriskie:master.\n. \n\nCoverage increased (+1.5%) to 93.703% when pulling 5f206ae5d749f46a6a44933ab08780a4ce7be124 on jerfowler:node-buffers into 5630d3be55cd591cd279927616f895356a10a361 on mzabriskie:master.\n. \n\nCoverage increased (+1.5%) to 93.687% when pulling ed13f14423d58215bc5586e45decad11f3302711 on Khaledgarbaya:patch-2 into 5630d3be55cd591cd279927616f895356a10a361 on mzabriskie:master.\n. \n\nCoverage increased (+1.5%) to 93.687% when pulling ed13f14423d58215bc5586e45decad11f3302711 on Khaledgarbaya:patch-2 into 5630d3be55cd591cd279927616f895356a10a361 on mzabriskie:master.\n. \n\nCoverage increased (+1.5%) to 93.687% when pulling 0104ad6c64c6d29cdbd801f923868994d6bf4f0a on TomyJaya:TomyJaya-patch-1 into 5630d3be55cd591cd279927616f895356a10a361 on mzabriskie:master.\n. \n\nCoverage increased (+1.5%) to 93.687% when pulling 0104ad6c64c6d29cdbd801f923868994d6bf4f0a on TomyJaya:TomyJaya-patch-1 into 5630d3be55cd591cd279927616f895356a10a361 on mzabriskie:master.\n. \n\nCoverage increased (+1.5%) to 93.687% when pulling 5bbbecceab466ca16ed7dc05b006ce162fbcdd05 on Maopy:patch-1 into 5630d3be55cd591cd279927616f895356a10a361 on mzabriskie:master.\n. \n\nCoverage increased (+1.5%) to 93.687% when pulling 5bbbecceab466ca16ed7dc05b006ce162fbcdd05 on Maopy:patch-1 into 5630d3be55cd591cd279927616f895356a10a361 on mzabriskie:master.\n. \n\nCoverage increased (+1.5%) to 93.687% when pulling 07cb8809ff1a8c36be18a3ba0af52b213f7bcdfd on cappslock:master into 5630d3be55cd591cd279927616f895356a10a361 on mzabriskie:master.\n. \n\nCoverage increased (+1.5%) to 93.687% when pulling 07cb8809ff1a8c36be18a3ba0af52b213f7bcdfd on cappslock:master into 5630d3be55cd591cd279927616f895356a10a361 on mzabriskie:master.\n. \n\nCoverage increased (+1.3%) to 93.484% when pulling 80f2b94b5bd90c3fe6da1c9603a6a92177eb9c4c on jcready:patch-2 into 19b794848047e51f5d8689cf48820c986df49d25 on mzabriskie:master.\n. \n\nCoverage increased (+1.3%) to 93.484% when pulling 80f2b94b5bd90c3fe6da1c9603a6a92177eb9c4c on jcready:patch-2 into 19b794848047e51f5d8689cf48820c986df49d25 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.687% when pulling 23c4dfcf559be56e9370fe98206c87ef156c661e on carlosromel:patch-1 into a8dab5767cf2e9a25b148f977ef566c7cee6a124 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.687% when pulling 23c4dfcf559be56e9370fe98206c87ef156c661e on carlosromel:patch-1 into a8dab5767cf2e9a25b148f977ef566c7cee6a124 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.687% when pulling 00fbadf19bcb3bc925bb0ac61293bbb08820f017 on reid3290:master into a8dab5767cf2e9a25b148f977ef566c7cee6a124 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.687% when pulling 00fbadf19bcb3bc925bb0ac61293bbb08820f017 on reid3290:master into a8dab5767cf2e9a25b148f977ef566c7cee6a124 on mzabriskie:master.\n. \n\nCoverage decreased (-0.3%) to 93.434% when pulling 34b63f8ce2745b766f90469113fd625a1fa4d16c on github-templates into a8dab5767cf2e9a25b148f977ef566c7cee6a124 on master.\n. \n\nCoverage decreased (-0.3%) to 93.434% when pulling 34b63f8ce2745b766f90469113fd625a1fa4d16c on github-templates into a8dab5767cf2e9a25b148f977ef566c7cee6a124 on master.\n. \n\nCoverage remained the same at 93.687% when pulling 34b63f8ce2745b766f90469113fd625a1fa4d16c on github-templates into a8dab5767cf2e9a25b148f977ef566c7cee6a124 on master.\n. \n\nCoverage remained the same at 93.687% when pulling 34b63f8ce2745b766f90469113fd625a1fa4d16c on github-templates into a8dab5767cf2e9a25b148f977ef566c7cee6a124 on master.\n. \n\nCoverage remained the same at 93.687% when pulling 88cc84c91e614dfe15528c9fc4c71596a1710697 on feature/return-last-request-in-redirects into 08eb98582e4eb9b4009f35285b231c2c1e8e7faa on master.\n. \n\nCoverage remained the same at 93.687% when pulling 88cc84c91e614dfe15528c9fc4c71596a1710697 on feature/return-last-request-in-redirects into 08eb98582e4eb9b4009f35285b231c2c1e8e7faa on master.\n. \n\nCoverage remained the same at 93.703% when pulling 04982a2ef99b2d46cbf1058d9f4a220675063fe0 on jcready:patch-3 into 19644bac7bc87a994c77346a1374258f54f713b7 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.703% when pulling 04982a2ef99b2d46cbf1058d9f4a220675063fe0 on jcready:patch-3 into 19644bac7bc87a994c77346a1374258f54f713b7 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.703% when pulling df6b46c076869caf935780e136fc05fbf944ef0f on jcready:patch-3 into 19644bac7bc87a994c77346a1374258f54f713b7 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.703% when pulling df6b46c076869caf935780e136fc05fbf944ef0f on jcready:patch-3 into 19644bac7bc87a994c77346a1374258f54f713b7 on mzabriskie:master.\n. \n\nCoverage increased (+0.02%) to 93.719% when pulling 1e76ea36f3d631cb68779d28d445a9da58dac189 on feature/include-request-in-errors into 5c8095e48329dacaec1f8d43a9b84ed275fbd0ef on master.\n. \n\nCoverage increased (+0.02%) to 93.719% when pulling 1e76ea36f3d631cb68779d28d445a9da58dac189 on feature/include-request-in-errors into 5c8095e48329dacaec1f8d43a9b84ed275fbd0ef on master.\n. \n\nCoverage decreased (-0.3%) to 93.451% when pulling b6c6a158cddd1f3f0a2eb0d751666280586f2a09 on feature/pass-agents-to-follow-redirects into 5c8095e48329dacaec1f8d43a9b84ed275fbd0ef on master.\n. \n\nCoverage decreased (-0.3%) to 93.451% when pulling b6c6a158cddd1f3f0a2eb0d751666280586f2a09 on feature/pass-agents-to-follow-redirects into 5c8095e48329dacaec1f8d43a9b84ed275fbd0ef on master.\n. \n\nCoverage remained the same at 93.703% when pulling 7c9ed24c20375b8aa374d37b53c5af470fc5bfb0 on berfarah:transform-data-with-status into 5c8095e48329dacaec1f8d43a9b84ed275fbd0ef on mzabriskie:master.\n. \n\nCoverage remained the same at 93.734% when pulling 38649948ffed7d07d1dbc0d7bde51de42e8e9ce9 on berfarah:transform-data-with-status into f1fb3de38fc96287763aeb7c5fee23858c851955 on mzabriskie:master.\n. \n\nCoverage increased (+0.02%) to 93.827% when pulling c43432d0b25f7a0fdc88f21d4c7a9ae35b701b07 on berfarah:transform-data-with-status into 62db26b58854f53beed0d9513b5cf18615c64a2d on mzabriskie:master.\n. \n\nCoverage increased (+0.02%) to 93.827% when pulling c43432d0b25f7a0fdc88f21d4c7a9ae35b701b07 on berfarah:transform-data-with-status into 62db26b58854f53beed0d9513b5cf18615c64a2d on mzabriskie:master.\n. \n\nCoverage increased (+1.5%) to 93.719% when pulling 30c5a3b0bb47acb79b6c727c9eea3eb501389429 on martinjoiner:master into f31317aeca8f7fa385d6aee94ef6ec8ac9d7c072 on mzabriskie:master.\n. \n\nCoverage increased (+1.5%) to 93.719% when pulling 30c5a3b0bb47acb79b6c727c9eea3eb501389429 on martinjoiner:master into f31317aeca8f7fa385d6aee94ef6ec8ac9d7c072 on mzabriskie:master.\n. \n\nCoverage increased (+1.5%) to 93.719% when pulling 5c825a7e6cdca54485b08da9cddc6ae8cd6bc431 on johntron:master into f31317aeca8f7fa385d6aee94ef6ec8ac9d7c072 on mzabriskie:master.\n. \n\nCoverage increased (+1.5%) to 93.719% when pulling 5c825a7e6cdca54485b08da9cddc6ae8cd6bc431 on johntron:master into f31317aeca8f7fa385d6aee94ef6ec8ac9d7c072 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.734% when pulling 83406f8b50c6d3cdc70502ad851d44b2a56b3563 on johntron:master into 46e275c407f81c44dd9aad419b6e861d8a936580 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.734% when pulling f600705f54af63192b9907c486480aebb6c65382 on johntron:master into 46e275c407f81c44dd9aad419b6e861d8a936580 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.734% when pulling f600705f54af63192b9907c486480aebb6c65382 on johntron:master into 46e275c407f81c44dd9aad419b6e861d8a936580 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.812% when pulling 7340c5d5fb48411ac49723b203273834cea90a5e on johntron:master into 07a7b7c84c3ea82ea3f624330be9e0d3f738ac70 on mzabriskie:master.\n. \n\nCoverage increased (+1.6%) to 93.797% when pulling 48c41036c3087e05e0c0a5f0a58884ea79305715 on tybro0103:duplicate-header-handling into f31317aeca8f7fa385d6aee94ef6ec8ac9d7c072 on mzabriskie:master.\n. \n\nCoverage increased (+1.6%) to 93.797% when pulling d29962a0515c29092025634d14977cc5b618585a on tybro0103:duplicate-header-handling into f31317aeca8f7fa385d6aee94ef6ec8ac9d7c072 on mzabriskie:master.\n. \n\nCoverage increased (+1.5%) to 93.734% when pulling 8f5872d8afdfe75c361e154d1eca6ae98c779e16 on luciy:master into f31317aeca8f7fa385d6aee94ef6ec8ac9d7c072 on mzabriskie:master.\n. \n\nCoverage increased (+0.02%) to 93.734% when pulling 9d45d2fc983a0ab989409c345ae1ac0df5ee6db1 on luciy:master into d1278dfe353d772c689a7884913a46f122538cd2 on mzabriskie:master.\n. \n\nCoverage increased (+0.02%) to 93.734% when pulling 29903e2ed82fb03d700ecd85ed26d95fd5184f14 on luciy:master into d1278dfe353d772c689a7884913a46f122538cd2 on mzabriskie:master.\n. \n\nCoverage increased (+1.5%) to 93.719% when pulling f6f1c28b598e73a34079d4ea1f4e634ea3ee04dd on ofirgeller:patch-1 into f31317aeca8f7fa385d6aee94ef6ec8ac9d7c072 on mzabriskie:master.\n. \n\nCoverage increased (+1.5%) to 93.719% when pulling 38b8e0bb3ce44236c300f808f6de0d51696dc4f6 on lzxb:master into f31317aeca8f7fa385d6aee94ef6ec8ac9d7c072 on mzabriskie:master.\n. \n\nCoverage increased (+0.02%) to 93.734% when pulling 2ad0ee04678ba1491ca80550f1db54d42c370fa0 on hugocaillard:fix-error-on-cancel into 1beb245f3a9cdc6da333c054ba5776a2697911dd on mzabriskie:master.\n. \n\nCoverage increased (+0.02%) to 93.734% when pulling e4e32120cec8ba53fc1f69415d6a8ac10b9c9756 on luciy:master into d1278dfe353d772c689a7884913a46f122538cd2 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.734% when pulling e834d337bfe6ebc1717ad7fd1402e14074c62ede on jmnote:patch-1 into 46e275c407f81c44dd9aad419b6e861d8a936580 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.734% when pulling 9587f9394c633009daf0beb2acfb02e199b8f631 on jdrydn:master into 46e275c407f81c44dd9aad419b6e861d8a936580 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.812% when pulling a4b7a6f73700d4c6efc90bebc04631d3238c8fb0 on geoffdutton:safari_extension_protocol into 62db26b58854f53beed0d9513b5cf18615c64a2d on mzabriskie:master.\n. \n\nCoverage remained the same at 93.734% when pulling accd1b24485901545c3d2afd81b65a6582a48211 on Baoyx007:master into 46e275c407f81c44dd9aad419b6e861d8a936580 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.734% when pulling fe0522ecf6a966f02c977601c397fbbc26e81249 on Baoyx007:master into 46e275c407f81c44dd9aad419b6e861d8a936580 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.734% when pulling 61330d0dc545fe375620e0435fd45adcb2168a8b on EsrefDurna:master into 46e275c407f81c44dd9aad419b6e861d8a936580 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.734% when pulling 214cfa249bc07bc9207c17398443ebea8a70f9ba on ThomasLandauer:patch-1 into 46e275c407f81c44dd9aad419b6e861d8a936580 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.734% when pulling 3aaef4f9fb1f02efc2bab23a35909eb2c8437bb5 on kmayer:kmayer-patch-1 into 46e275c407f81c44dd9aad419b6e861d8a936580 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.734% when pulling 27375aabf08a8039f427fff37ffc772901603d5a on contentful:fix/https-via-http-proxy into 46e275c407f81c44dd9aad419b6e861d8a936580 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.734% when pulling b829df33e5a8071b0fe850085f3f6d0e7df091a0 on contentful:fix/https-via-http-proxy into 46e275c407f81c44dd9aad419b6e861d8a936580 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.734% when pulling b2c7cb4dc18f00bf8eb189d3e74f6be2bc5b571a on contentful:fix/https-via-http-proxy into 46e275c407f81c44dd9aad419b6e861d8a936580 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.734% when pulling e6c944fbfe14cd1af37f4a689388590393c52fa0 on contentful:fix/https-via-http-proxy into 46e275c407f81c44dd9aad419b6e861d8a936580 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.734% when pulling 486c956313b4937d83202ae72304d3eb210487bb on contentful:fix/https-via-http-proxy into 46e275c407f81c44dd9aad419b6e861d8a936580 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.734% when pulling e2367ba0a0fc1a8e964664074414e0170ecf8da6 on Gerhut:patch-2 into 46e275c407f81c44dd9aad419b6e861d8a936580 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.812% when pulling 9d17d231cbabfbc72d1de7e5091c4b499c205e65 on Gerhut:patch-2 into db4acb2ec99509942b2664eb0fae3e309ffcfc54 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.734% when pulling b03a697b86752d2a05f2df3d483ecb1ab4092325 on BrodaNoel:BrodaNoel-patch-1 into 46e275c407f81c44dd9aad419b6e861d8a936580 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.734% when pulling a27610d14a15901417ddc5da3be2cd868dd144db on rayrutjes:refactor/http-aborted into 46e275c407f81c44dd9aad419b6e861d8a936580 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.734% when pulling 4c54a9265a92785825db976431a1e25599204029 on siddharthkp:master into 46e275c407f81c44dd9aad419b6e861d8a936580 on mzabriskie:master.\n. \n\nCoverage increased (+0.02%) to 93.827% when pulling 4007cd9f6bb242df8e9657d3d8f2eb53b3cca6aa on le0nik:feature/request-interceptors-preserve-order into db4acb2ec99509942b2664eb0fae3e309ffcfc54 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.812% when pulling 5ed3d204bf1d15a7e04e656953edad8aa3ae3659 on sahanatroam:patch-1 into 07a7b7c84c3ea82ea3f624330be9e0d3f738ac70 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.812% when pulling 69d5a4c2c068cdc8cfab47594387434e0c292b74 on fridzema:patch-1 into 07a7b7c84c3ea82ea3f624330be9e0d3f738ac70 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.812% when pulling b26f351b6d15475a18312e7b6915a38814cbc224 on jin5354:patch-1 into 07a7b7c84c3ea82ea3f624330be9e0d3f738ac70 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.812% when pulling b01ce193a567dcf3a7c2c62cff5d582f264daae2 on MarshallOfSound:patch-1 into 07a7b7c84c3ea82ea3f624330be9e0d3f738ac70 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.812% when pulling 256d59ef34f86b08924045562e9167f80e7afbbd on jjingrong:patch-1 into 07a7b7c84c3ea82ea3f624330be9e0d3f738ac70 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.812% when pulling 49d95a5bd0b363057d0660ffbed84900a373530c on pmarrone:fix/pass-agent-mixed-protocol-redirects into 07a7b7c84c3ea82ea3f624330be9e0d3f738ac70 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.812% when pulling d6c5beb1cc8e0233dd79739267493188055ae47c on pmarrone:fix/pass-agent-mixed-protocol-redirects into 07a7b7c84c3ea82ea3f624330be9e0d3f738ac70 on mzabriskie:master.\n. \n\nCoverage remained the same at 93.812% when pulling 28616a0ba7d2da93935f7700747d763fe78fe40b on rbown:master into 07a7b7c84c3ea82ea3f624330be9e0d3f738ac70 on mzabriskie:master.\n. ",
    "ryiwamoto": "Thank you!\n. ",
    "WillsB3": "+1 for this feature.\n. Awesome - Thanks :+1:\n. ",
    "chrismcv": "FYI - I'm doing it like this presently as a workaround\ntimeout = (s, promise) ->\n  new Promise (resolve, reject) ->\n    promise.then(resolve);\n    setTimeout((-> \n      e = new Error('Timeout after '+s+' s')\n      e.statusCode = 'timeout'\n      reject e\n    ), s * 1000);\ntimeout(10, axios.get(url)).catch globalErrorHandler\n. FYI - I'm doing it like this presently as a workaround\ntimeout = (s, promise) ->\n  new Promise (resolve, reject) ->\n    promise.then(resolve);\n    setTimeout((-> \n      e = new Error('Timeout after '+s+' s')\n      e.statusCode = 'timeout'\n      reject e\n    ), s * 1000);\ntimeout(10, axios.get(url)).catch globalErrorHandler\n. ",
    "laander": "I'm having a related problem. When using axios in a library and bundling it together in my dist, I'm getting an error when resolving vertx in es6-promise (when run in node.js):\n/Users/las/timekit-io/js-sdk/dist/timekit.js:1629\n            lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);\n            ^\nTypeError: undefined is not a function\nI'm using webpack myself for bundling and for debugging, I've tried ignoring vertx in my build:\nplugins: [\n  new webpack.IgnorePlugin(/vertx/)\n]\nThis removes the above error, but instead i get:\n[ReferenceError: navigator is not defined]\nUsing Axios v 0.5.4\n. I'm having a related problem. When using axios in a library and bundling it together in my dist, I'm getting an error when resolving vertx in es6-promise (when run in node.js):\n/Users/las/timekit-io/js-sdk/dist/timekit.js:1629\n            lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);\n            ^\nTypeError: undefined is not a function\nI'm using webpack myself for bundling and for debugging, I've tried ignoring vertx in my build:\nplugins: [\n  new webpack.IgnorePlugin(/vertx/)\n]\nThis removes the above error, but instead i get:\n[ReferenceError: navigator is not defined]\nUsing Axios v 0.5.4\n. On a second revision, I dont think the vertx \"problem\" is related to this one. It just simply happened to be the first error thrown and therefore only one shown.\n. On a second revision, I dont think the vertx \"problem\" is related to this one. It just simply happened to be the first error thrown and therefore only one shown.\n. @idan Support of the Authorization header is even better - as long as I don't have to add it manually :)\n. @idan Support of the Authorization header is even better - as long as I don't have to add it manually :)\n. Related https://github.com/mzabriskie/axios/issues/58\nIMO, it seems that the correct context isn't read (browser vs. server) and the code assumes that its in browser context, thus using the xhr adapter that checks for navigator. Could it be somerthing to do with https://github.com/mzabriskie/axios/blob/master/package.json#L58 ?\nI'm having the same problem when I'm developing a library that is built and bundled to both server and client (UMD target with webpack)\n. Related https://github.com/mzabriskie/axios/issues/58\nIMO, it seems that the correct context isn't read (browser vs. server) and the code assumes that its in browser context, thus using the xhr adapter that checks for navigator. Could it be somerthing to do with https://github.com/mzabriskie/axios/blob/master/package.json#L58 ?\nI'm having the same problem when I'm developing a library that is built and bundled to both server and client (UMD target with webpack)\n. Digging a bit deeper, it seems that the webpack build points to the the same adapter file for both browser (window !== undefined) and server (process !== undefined) - __webpack_require__(8) which is lib/adapters/xhr.js\nSee https://github.com/mzabriskie/axios/blob/master/dist/axios.js#L494 & L498\nI'm honestly not sure why. If i dont use webpack for the packaging (i.e. requires axios in node.js directly), everything seems to work as it should.\n. Digging a bit deeper, it seems that the webpack build points to the the same adapter file for both browser (window !== undefined) and server (process !== undefined) - __webpack_require__(8) which is lib/adapters/xhr.js\nSee https://github.com/mzabriskie/axios/blob/master/dist/axios.js#L494 & L498\nI'm honestly not sure why. If i dont use webpack for the packaging (i.e. requires axios in node.js directly), everything seems to work as it should.\n. I'm a little sad to see this closed. If the dist version isn't safe for Node/CommonJS, it shouldn't be built as an UMD module. I spent quite a few hours debugging this and it's a false positives IMO. As a minimum there should be warning, a note in the README and it would be even better if the bug could be fixed (and thereby make Axios more embeddable into other UMD-ready libs)\n. I'm a little sad to see this closed. If the dist version isn't safe for Node/CommonJS, it shouldn't be built as an UMD module. I spent quite a few hours debugging this and it's a false positives IMO. As a minimum there should be warning, a note in the README and it would be even better if the bug could be fixed (and thereby make Axios more embeddable into other UMD-ready libs)\n. Good stuff! Although, be aware that this will fail in IE8 + IE9 as they don't support window.btoa, see http://caniuse.com/#feat=atob-btoa\n. Good stuff! Although, be aware that this will fail in IE8 + IE9 as they don't support window.btoa, see http://caniuse.com/#feat=atob-btoa\n. @idan Seeing that the source for that is only ~500 bytes, I think it would be fine :+1: \n@mzabriskie Your thoughts? \n. @idan Seeing that the source for that is only ~500 bytes, I think it would be fine :+1: \n@mzabriskie Your thoughts? \n. ",
    "aaayushsingh": "did anyone happen to find a solution to this? I'm using this with webpack and keep getting navigator is undefined.. ",
    "tony-kerz": "\"axios\": \"~0.5.4\"\na little more info:\naxios:\n\njquery:\n\n. hey @mzabriskie, sorry to leave you hangin, got distracted, but put in a few cycles just now, and we can safely chalk this up to operator-error. the following setup worked for the gulp based server and body-parser middleware:\n```\ngulp.task 'server', ->\n  gulp.src buildApp\n  .pipe plug.webserver(\n    livereload: false\n    directoryListing: false\n    open: true\n    middleware: [\n      bodyParser.json()\n  (req, res, next) ->\n    if (req.url == '/comments.json') and (req.method == 'POST')\n      fileName = \"#{buildApp}/comments.json\"\n      fs.readFile fileName, (err, data) ->\n        if err\n          console.log 'read-file: err=%o', err\n        comments = JSON.parse data\n        comments.push req.body\n        fs.writeFile fileName, JSON.stringify(comments, null, 4), (err) ->\n          if err\n            console.log 'write-file: err=%o', err\n          res.end JSON.stringify(comments)\n    else\n      next()\n]\n\n)\n```\ni originally tried bodyParser.json instead of bodyParser.json() which was the issue.\nso axios was working great, i just wasn't using the express components correctly,\nsorry bout that, but thanks for the help!\nregards,\ntony. \n. yes, i just got burned by this as well using from node, something like:\n```\n  import axios from 'axios'\n  import queryString from 'querystring'\nconst query='foo=bar'\n  const params = queryString.parse(query)\n  return axios.get(url, {params})\n```\ni think related to this perhaps: https://github.com/nodejs/node/pull/6055\n. ",
    "srph": "I see, thanks! Great work, sir :+1:\n. Ah, last question -- should I stub out axios? Thanks\n. Ah, nevermind! I just realized that you were using setTimeout in your examples. Thanks, again.\n. I see, thanks a bunch!\n. Mind showing the code?\n. Fixed by https://github.com/webpack/webpack/issues/353\n. Can you put \"not working\" into detail?\n. Anybody making any progress?\n. +1 doesn't help out here. Check out https://github.com/mzabriskie/axios/pull/96\n. ONE Network eCommerce - node & browser (universal app)\n. ONE Network eCommerce - node & browser (universal app)\n. Hey there - If you don't mind, can you provide a snippet?. Have you tried using a different library to check if axios was the problem? Like fetch, for instance, just to check.. ",
    "BrunoQuaresma": "I'm trying to use this example but the console shows this error => Error: connect ECONNREFUSED 127.0.0.1:80\n. Here, error.response return undefined in 0.14.0 version.\n. axios.interceptors.response.use(undefined, error => {\n      console.log(error.status)\n      return Promise.reject(error)\n    })\nThe console.log returns undefined.\n. Thanks @AlahmadiQ8.\n. ",
    "jamesseanwright": "Personally, I think Promise rejection is a good solution. At the very least, one could invoke console.error in the catch block to make developers aware of what has happened.\n. ",
    "youurayy": "Just got burned on this. Instead of correctly rejecting the promise on invalid (truncated) JSON, it simply returns the orignal string object. Bad bad bad. At least put a warning in the docs about this.. imagine first finding out in production - not sure where the logical thinking has gone on this one. @emilyemorehouse is this something you could fix, for the sake of all humanity?. @emilyemorehouse maybe it would be a good idea to advertise that in the README.md, I'm sure there are folks who want to help.. ",
    "batiste": "I also spent 1 hour today tryng to understand what is happening with some invalid JSON. Just reject the Promise, or at least console.log something...?. ",
    "vinnymac": "Not sure how others are avoiding this issue after almost 3 years, but I decided to try to work around it for one of my projects. I would like to see how other people have been doing this as well.\nI took notes from here and only raise an error for 2xx response codes.\nIf people find it useful I can make a PR of my commit. If you need this to raise for other response codes, just remove lines 67 and 71 in defaults.js\nAnother option for those who don\u2019t want to fork is to just override transformResponse, and detect when data is a string, and parse on your own. Unfortunately this means you\u2019ll do more work, and you can\u2019t check the status code if you do that, but at least you have options.. Not sure how others are avoiding this issue after almost 3 years, but I decided to try to work around it for one of my projects. I would like to see how other people have been doing this as well.\nI took notes from here and only raise an error for 2xx response codes.\nIf people find it useful I can make a PR of my commit. If you need this to raise for other response codes, just remove lines 67 and 71 in defaults.js\nAnother option for those who don\u2019t want to fork is to just override transformResponse, and detect when data is a string, and parse on your own. Unfortunately this means you\u2019ll do more work, and you can\u2019t check the status code if you do that, but at least you have options.. ",
    "thame": "I also encountered a scenario where this behavior is problematic. If the network connection is interrupted partially through the request, axios would not call an error and my application received malformed JSON which obviously led to lots of errors.\nI too think that JSON parse errors should be caught and reported. I wasn't keen on forking or modifying the source files so my solution was to transform the response like this: \naxios.get(URL, {\n  transformResponse: [(response) => (JSON.parse(response))], \n}). ",
    "jmkenz": "My approach to handling this is to wrap all axios requests in a promise, and reject that promise if the response from axios show a response.headers['content-type'] of 'application/json' and a response.data that is a string.  From this I infer there was a JSON parsing error.\nreturn new Promise((resolve, reject) => {\n  axios.request(options)\n    .then(response => {\n      if (response.headers && response.headers['content-type'] && response.headers['content-type'].indexOf('application/json') >= 0 && _.isString(response.data)) {\n        reject(new Error('Error parsing response data as JSON object'));\n      } else {\n        resolve(response);\n      }\n  });\n});. ",
    "soundstep": "+1 here, swallowing errors is never good. +1 here, swallowing errors is never good. ",
    "0xR": "Apparently I don't understand CORS,  so probably no issue with Axios \n. ",
    "AurelioDeRosa": "I think this should be a different issue. While there are cases where only the onProgress is needed (addressed by #96), there are other cases where an application need to access the XHR instance to perform other operations.\n. Hi @mzabriskie.\nI hate to have to ask this, but could you take a look at this PR? We (the team behind Github.js) have switched to axios for our requests and this is the only piece left for the new release. In the previous versions we exposed the XHR istance, so not having it would cause a breaking change.\n. Hi @mzabriskie.\nI hate to have to ask this, but could you take a look at this PR? We (the team behind Github.js) have switched to axios for our requests and this is the only piece left for the new release. In the previous versions we exposed the XHR istance, so not having it would cause a breaking change.\n. Any chance to review this PR so that we can address #214?\n. Hi.\nTo clarify why we use a fork is because we need to expose the XHR request to avoid any backward incompatibility. I proposed the fix we needed in this PR but it hasn't been merged yet.\n. ",
    "flogball00": "Yep,  both axios and superagent were not able to transmit the filename.  When i looked at the request payload, i would get something like \"Content-Disposition: form-data; name=\"File1\"; filename=\"\"\n. ",
    "kalaspuffar": "@flogball00: Have you tried to use the third argument for formData suppling the filename?\nhttps://developer.mozilla.org/en-US/docs/Web/API/FormData/append\n. I've tried to use formData but this is still sent like a body tag in chrome and not as formData.\nHeaders\nPUT /url/path HTTP/1.1\nHost: hostname\nConnection: keep-alive\nContent-Length: 1234\nUser-Agent: Mozilla/5.0 \nContent-Type: multipart/form-data; boundary=----WebKitFormBoundaryJsCvT2m1SBzbA23B\nAccept: application/json, text/plain, */*\nReferer: URL\nAccept-Encoding: gzip, deflate, sdch\nAccept-Language: en-US,en;q=0.8\nPayload\n```\n------WebKitFormBoundaryJsCvT2m1SBzbA23B\nContent-Disposition: form-data; name=\"firstname\"\nDaniel\n------WebKitFormBoundaryJsCvT2m1SBzbA23B\nContent-Disposition: form-data; name=\"surname\"\nPersson\n```\nInstead of\nHeaders\nPUT /url/path HTTP/1.1\nHost: hostname\nConnection: keep-alive\nContent-Length: 1234\nAccept: */*\nOrigin: http://adminhost\nUser-Agent: Mozilla/5.0\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\nReferer: URL\nAccept-Encoding: gzip, deflate, sdch\nAccept-Language: en-US,en;q=0.8\nForm data\nfirstname=Daniel&surname=Persson\nIf this shouldn't be standard then I think it atleast should be an option to send as form data.\n. Made a small work around to fix the issue for me.\nconfig['transformRequest'] = [function (data, headers) {\n        var str = [];\n        for(var p in data)\n          if (data.hasOwnProperty(p) && data[p]) {\n            str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(data[p]));\n          }\n        return str.join(\"&\");\n      }];\n. ",
    "pnkapadia6": "Any updates on this?\n. ",
    "ConAntonakos": "@nickuraltsev's answer in https://github.com/mzabriskie/axios/issues/318#issuecomment-218948420 really helped me out.\n. Edit: Oh, my. I just realized that the defaults.adapter = ... was misspelled. The Network Error disappeared at least!\nUsing:\n- axios 0.14.0\n- react 15.3.1\n- nock 8.0.0\nI tried axios.defaults.adatper = require('axios/lib/adapters/http'); for the particular file I'm testing, but I'm still encountering an issue.\nI'm also using nock to mock the API request, and testing an axios request in a React.js lifecycle method.\nI'm probably using all of this incorrectly, but would love to read others' thoughts. \ud83d\ude03 \nThis is the error I'm receiving:\n{ [Error: Network Error]\n      config:\n       { transformRequest: { '0': [Function: transformRequest] },\n         transformResponse: { '0': [Function: transformResponse] },\n         headers: { Accept: 'application/json, text/plain, */*' },\n         timeout: 0,\n         xsrfCookieName: 'XSRF-TOKEN',\n         xsrfHeaderName: 'X-XSRF-TOKEN',\n         maxContentLength: -1,\n         validateStatus: [Function: validateStatus],\n         adatper: [Function: httpAdapter],\n         method: 'get',\n         params: { initial: true },\n         url: 'http://localhost:8080/api/test,\n         data: undefined },\n      response: undefined }\n. ",
    "besabellacyrus": "@ConAntonakos  that is the solution to my problem.. ",
    "jasperf": "@ConAntonakos Would be great if you could share how you adjusted your code in the end. Working on passing data with .append now as well as it won't with my regular setup.. Was thinking about something like\nsaveSearchedUnsplashPhotoToServer : function(result) {\n                axios({\n                    url: '/backend/upload-image/',\n                    method: 'get',\n                    responseType: 'stream',\n                    headers: {\n                    'Accept': '*/* '\n                    },\n                }).then(function(response) {\n                    download(result.links.download_location, 'image-file-name-as-on-other-server');\n                })\n            }\nbased on what @mauzepeda wrote. But how can I use the image to be downloaded as name instead of a hardcoded one? And is / the best header for all sorts of images?. ",
    "Nicolab": "Here also. Axios catch an Exception generated by a Chrome extension\n. May be because an exception is thrown into the then() method.\nIn my case in the then() method I have an events dispatcher and the Chrome extension explain the Flow. \n. Hmm, Axios even catch exceptions thrown out of the method then(). \n. ",
    "zackify": "Glad I'm not the only one, I don't get how more people aren't seeing this. \n. ",
    "csm123": "I'm using the same sort of promises as Axios on a project, and the promise catches exceptions in then. That is, exceptions in then don't throw an error in the Chrome console - instead the promise has the error. You can tack on .catch(function(err) { console.error(err); }); for debug purposes, but that's not really a lasting solution. Unsure of what to do here.\n. I'm using the same sort of promises as Axios on a project, and the promise catches exceptions in then. That is, exceptions in then don't throw an error in the Chrome console - instead the promise has the error. You can tack on .catch(function(err) { console.error(err); }); for debug purposes, but that's not really a lasting solution. Unsure of what to do here.\n. Related: https://github.com/jakearchibald/es6-promise/issues/40\n. Related: https://github.com/jakearchibald/es6-promise/issues/40\n. Also, this is how it's handled in es6-promise's parent library, RSVP.\nhttps://github.com/tildeio/rsvp.js#error-handling\n. Also, this is how it's handled in es6-promise's parent library, RSVP.\nhttps://github.com/tildeio/rsvp.js#error-handling\n. ",
    "dmt0": "According to this it's actually the correct behavior apparently.\n. Nope, doesn't do it.\nThe line \"let res = err.response\" doesn't work - there's no response in err. \nIf I leave it out, than the success gets triggered - so login happens, but the original request doesn't get retried.\n. That was with 0.12.0.\nNow that I updated to 0.13.1, err has become a string with call stack.\n\nError: Request failed with status code 401\n    at createError (eval at  ...\n. @heeton Nope, been busy with other things. The solution posted didn't \"just work\". But it might have been due to some funny behavior in my backend. Will keep you posted...\n. \n",
    "gee1k": "I am also getting this error. Is there an explanation for this?. ",
    "aboutqx": "Thanks for your work,but this lib is kind of bad to use in browser.. ",
    "holyjak": "Ok, so I have found out that I can use global-tunnel and likely also http(s)-proxy-agent if I manually set http(s).globalAgent to set the proxy for all http(s) calls (unless they specify their own agent). Perhaps it would be worth mentioning this in the docs? Thanks!\n. Ok, so I have found out that I can use global-tunnel and likely also http(s)-proxy-agent if I manually set http(s).globalAgent to set the proxy for all http(s) calls (unless they specify their own agent). Perhaps it would be worth mentioning this in the docs? Thanks!\n. ",
    "pahund": "+1, I could really use this fix in my project\n. mobile.de, Node.js\n. ",
    "nerdgore": "+1 We could really use this fix but don't want to (read: can't) fetch directly from github.\n. ",
    "mrozbarry": "@mzabriskie this might still be a problem when setting default headers in nodejs.\nFor my unit tests, I have the following config:\n```\nimport axios from \"axios\"\nconst instance = axios.create()\ninstance.defaults.headers.common[\"User-Agent\"] = \"unit-test\"\nglobal.axios = instance\n```\nThe intent is that I don't want to modify any of my code to conditionally set the user agent.\nWhen I look at my development server, I see the following headers:\njson\n{ \"accept\": \"application/json, text/plain, */*\",\n  \"user-agent\": \"axios/0.16.2\",\n  \"host\": \"localhost:3000\",\n  \"connection\": \"close\" }. ",
    "Blechhirn": "@mzabriskie Would it be possible to make the cookie-based XSFR header an opt-in rather than the default? Reading cookies from a worker won't work anytime soon, so all you can do really is pass in the information from the main script and inject it into the call to axios - which renders this convenience functionality kind of useless as you could as well inject the header directly.\nI would be willing to take a crack on this task, but it would be a behavior change I'd rather bring up first. \n. ",
    "skevy": "@mzabriskie With urlSameOrigin...is all that's happening there just the url parsing (and you didn't want to depend on an external lib)?\n. Yah, I'd agree with @Blechhirn that the xsrf should be opt-in. It's nice to have...but a lot of API's don't need it.\n. I'll send a PR if you're down to make that change. It doesn't necessarily close THIS issue, because while it would technically work, there could be other testing that might be useful to do for using webworkers. But this would fix it for non-browser JS clients (like react-native).\n. Would help with #70, though without further testing I'm not sure it would fully resolve.\n. I'm confused about this test failure...not sure it has anything to do with my code. Seems like a configuration issue.\n. I'm confused about this test failure...not sure it has anything to do with my code. Seems like a configuration issue.\n. awesome. Thanks @dfournier! I'll wait to fix until #100 is merged and then I'll rebase.\n. awesome. Thanks @dfournier! I'll wait to fix until #100 is merged and then I'll rebase.\n. @mzabriskie should be all set. Sorry for the delay on this :)\n. @mzabriskie should be all set. Sorry for the delay on this :)\n. @mzabriskie while I think the idea is right, I'm not sure what the best way to detect that would be. At the moment, especially when running in debug mode, there's really no way to easily tell whether RN is a browser or not. There's an open proposal to add something to navigator to help with this: https://github.com/facebook/react-native/issues/1331\n. @mzabriskie while I think the idea is right, I'm not sure what the best way to detect that would be. At the moment, especially when running in debug mode, there's really no way to easily tell whether RN is a browser or not. There's an open proposal to add something to navigator to help with this: https://github.com/facebook/react-native/issues/1331\n. @mzabriskie fwiw, the issue @TuxujPes surfaced it's ugly head when using axios on react-native.\nThis issue -- es6-promise#140 (https://github.com/jakearchibald/es6-promise/issues/140) -- discusses the problem. The key is this line:\njavascript\nObject.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast)\nOn chrome (and react-native), that fails, and thus it always gets polyfilled.\nIt seems like in the next release this won't matter, but I just thought I'd let you know that it actually IS a problem.\n. @mzabriskie fwiw, the issue @TuxujPes surfaced it's ugly head when using axios on react-native.\nThis issue -- es6-promise#140 (https://github.com/jakearchibald/es6-promise/issues/140) -- discusses the problem. The key is this line:\njavascript\nObject.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast)\nOn chrome (and react-native), that fails, and thus it always gets polyfilled.\nIt seems like in the next release this won't matter, but I just thought I'd let you know that it actually IS a problem.\n. ",
    "jmoguelruiz": "Yes in my case, just put in .htaccess file:\n\nHeader set Access-Control-Expose-Headers \"X-Pagination-Current-Page, X-Pagination-Total-Count\"\n\nThis for my custom pagination in yii2.\n. ",
    "pirelenito": "Although I would appreciate this feature to be available in the library itself, I understand and support your reasoning.\nThanks.\n. ",
    "kevinob11": "Is there a work around until we can get something working for this?\n. ",
    "samusgray": "Awesome. Thanks for the note! I didn't see the cookbook before. Thanks for sharing.\n. Awesome. Thanks for the note! I didn't see the cookbook before. Thanks for sharing.\n. ",
    "theverything": "I'm not sure this is a bug because of the Fast Fail behavior of Promise.all.\naxios.all just passes the array of promises to Promise.all and then returns the resulting promise.\nSeems like the only way to make this work would be to implement your own axios.all function that catches all errors and then returns them. This might be unintuitive because it goes against the spec of Promise.all. \n. I'm not sure this is a bug because of the Fast Fail behavior of Promise.all.\naxios.all just passes the array of promises to Promise.all and then returns the resulting promise.\nSeems like the only way to make this work would be to implement your own axios.all function that catches all errors and then returns them. This might be unintuitive because it goes against the spec of Promise.all. \n. ",
    "tylermcginnis": "babel-loader works. Not sure what's up with jsx-loader. Thanks for the suggestion (and for Axios!).\n. babel-loader works. Not sure what's up with jsx-loader. Thanks for the suggestion (and for Axios!).\n. Let me know if you need any more help, glad to help.\n. Let me know if you need any more help, glad to help.\n. ",
    "switz": "+1\n. ",
    "timjacobi": "+1\n. ",
    "idan": "This is actually a bad idea, see #167 \n. Heroku, browser (via webpack)\n. @laander herp derp, didn't notice that. Fixing\n. @laander do you think it's legit to call out a polyfill dependency similar to promises? Specifically, https://github.com/davidchambers/Base64.js\n. Yup, also seeing as ES2015 promises are required and not even supported in any flavor of IE, seems justified to say that older IE needs a polyfill for btoa.\n. Roger.\n. @mzabriskie Done. I did the polyfill check in xhr.js to facilitate testing of the polyfill module independently.\nAlso removed support for user and pass in favor of the non-abbreviated flavors.\n. :heart: :sparkles: :cake: !\n@mzabriskie can you please cut a new release for NPM too? \nMany many thanks for Axios. :smile: \n. ",
    "chez14": "Can anyone give a little example here?\nOr on the example folder?\nthankyou. ",
    "emartini": "@onlyongunz ,  it's explained on the readme. ",
    "falmp": ":+1: \n. ",
    "wuct": "+1 for this feature\n. ",
    "rafaelfragosom": "+1\n. ",
    "pandaiolo": "+1 \n. +1 \n. ",
    "willdady": "+1\n. @mzabriskie Can this be merged please? @mzabriskie are you still maintaining axios?\n. ",
    "SZEth8": "+1\n. ",
    "Celsius273": "+1\n. ",
    "soluml": "+1\n. ",
    "liuq": "+1\n. ",
    "chrisfinch": "Any progress here?\n. ",
    "devotox": "ha off course i just needed to move the params to the other argument. thank you\n. ",
    "petejohanson": "AFAICT, headers is always a function in AngularJS. Here's the relevant source:\nhttps://github.com/angular/angular.js/blob/master/src/ng/http.js#L192\nYou can either do:\nheaders('location')\n=> '/foo'\nor:\nheaders()\n=> { 'location': '/foo', 'content-type': 'application/json' }\n. It is not only internal. See:\n- https://github.com/angular/angular.js/blob/master/src/ng/http.js#L1268 - passed as headers field of response promise.\n- https://github.com/angular/angular.js/blob/master/src/ng/http.js#L918 - passed into transformation function.\nYou can see this in the docs here: https://docs.angularjs.org/api/ng/service/$http under the Usage of $http(config) for transformRequest, transformResponse, and the return value.\nThose are in fact the two cases where the API differs between $http and axios.\n. So is there any intention to change this difference in API between the two? This was closed without explanation...\n. ",
    "patrickliechty": "I will look into moxios thanks.  Ya I don't think it has to work just the same as $http\n. The request is across multiple files, but essentially, it builds up a chain of promises like this:\naxios.get(\"url\").then(function(data){\n\n```\nreturn axios.get(\"url\").then(function(data){\n   return axios.get(\"url\").then(function(data){\n\n      return axios.get(\"url\").then(function(data){\n          return axios.get(\"url\").then(function(data){\n>                   return axios.get(\"url\").then(function(data){\n  >                      return axios.get(\"url\").then(function(data){})\n\n```\n\n\nthen I have logic in each of the success handlers.\n. Actually that is not what is happening.  This is a better representation of what is happening.\nfunction().then(function() {\n\nreturn function().then(function() {\n    >  return function().then(function() {\n      >    return function().then(function() {\n         >   return function().then(function() {\n            axios.get(\"url\").then(function() {});\n\nEach function returns a promise.  The get call unwinds the promise chain.\n. To answer your question, yes my requests are dependent upon the response.\n. ",
    "tomaash": "Damn, I always forget about those IE specialities. I added check for ActiveXObject, so now it should work in IE8 as well.\n. Thanks for merging this. Can you please also bump patch version?\n. Cool, thanks!\nOn Tue, Sep 22, 2015 at 12:58 AM, Matt Zabriskie notifications@github.com\nwrote:\n\n@tomaash https://github.com/tomaash I just released 0.6.0 which\nincludes your PR.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mzabriskie/axios/pull/85#issuecomment-142132054.\n. \n",
    "alejandronanez": "Well, I wasn't able to send the header 'Content-type' at all on my request. @mzabriskie let me give it a try and I'll let you know.\nThanks.\n. ",
    "mcmire": "This doesn't appear to be working for me, either. It looks like perhaps it's this line here? https://github.com/mzabriskie/axios/blob/master/lib/adapters/xhr.js#L77\n. Yeah, the request body was empty.\nOn closer inspection, it appears that Axios is doing the right thing here. Content-Type only applies to the request body, so if it's missing then it shouldn't pass along that header.\n. I'd vote for this issue to be closed, then. @alejandronanez what do you think?\n. @teleyinex Content-Type describes what format the request data is in. If there is no request data, there is no need to specify the Content-Type. So you can correct me if I'm wrong but I believe the present behavior makes sense, aside from the fact that it should still not add the header if data is null. What do you think?. Yeah, agreed about that, it's definitely something worth documenting.. ",
    "aprzywara": "Is your request body empty by any chance?\nFor me manually passing data: null to axios, in order to manually set an empty body, prevented IE from sending undefined as body.\n. Yes it is correct to remove the headers, you need to pass on an empty body though (IE does not do that, it passes \"undefined\" which triggers errors in some/most backends).\nWe are using  Restler in a project to serve JSON and Restler was throwing 403 errors because the \"undefined\" string gets passed as Content-Type: text/plain which doesn't work.\n. ",
    "dinodsaurus": "Yep, I can confirm. If there is no data passed it removes the Content-Type...\nI just added data: {} to my GET request, and it works fine.\nIt's really weird to pass data on get requests but I don't mind :+1: \n. @EJIqpEP check what @mcmire said.. so basically you need to handle this on your backend. ",
    "teleyinex": "@mcmire then I agree completely. But, it might be good to add this to the docs, so others can easily find it. . One example in the README will do the trick :D. ",
    "BenAhlander": "SignIn = () => {\n    console.log('login clicked')\n    let data = JSON.stringify({\n        password: this.state.password,\n        username: this.state.email\n    })\n\n    axios.post('url', data, {\n        headers: {\n            'Content-Type': 'application/json',\n        }\n    }\n    )\n}. \nSignIn = () => {\n    console.log('login clicked')\n    let data = JSON.stringify({\n        password: this.state.password,\n        username: this.state.email\n    })\n\n    axios.post('url', data, {\n        headers: {\n            'Content-Type': 'application/json',\n        }\n    }\n    )\n}. ````\n\nSignIn = () => {\n    console.log('login clicked')\n    let data = JSON.stringify({\n        password: this.state.password,\n        username: this.state.email\n    })\naxios.post('url', data, {\n    headers: {\n        'Content-Type': 'application/json',\n    }\n}\n)\n\n}\n```. ",
    "mdrideout": "Just for other people Googling, this is how I had to format my axios.post request\n```\n    var postData = {\n      email: \"test@test.com\",\n      password: \"password\"\n    };\nlet axiosConfig = {\n  headers: {\n      'Content-Type': 'application/json;charset=UTF-8',\n      \"Access-Control-Allow-Origin\": \"*\",\n  }\n};\n\naxios.post('http://<host>:<port>/<path>', postData, axiosConfig)\n.then((res) => {\n  console.log(\"RESPONSE RECEIVED: \", res);\n})\n.catch((err) => {\n  console.log(\"AXIOS ERROR: \", err);\n})\n\n```. Just for other people Googling, this is how I had to format my axios.post request\n```\n    var postData = {\n      email: \"test@test.com\",\n      password: \"password\"\n    };\nlet axiosConfig = {\n  headers: {\n      'Content-Type': 'application/json;charset=UTF-8',\n      \"Access-Control-Allow-Origin\": \"*\",\n  }\n};\n\naxios.post('http://<host>:<port>/<path>', postData, axiosConfig)\n.then((res) => {\n  console.log(\"RESPONSE RECEIVED: \", res);\n})\n.catch((err) => {\n  console.log(\"AXIOS ERROR: \", err);\n})\n\n```. This is how I had to format my POST request\n```\n    var postData = {\n      email: \"test@test.com\",\n      password: \"password\"\n    };\nlet axiosConfig = {\n  headers: {\n      'Content-Type': 'application/json;charset=UTF-8',\n      \"Access-Control-Allow-Origin\": \"*\",\n  }\n};\n\naxios.post('http://<host>:<port>/<path>', postData, axiosConfig)\n.then((res) => {\n  console.log(\"RESPONSE RECEIVED: \", res);\n})\n.catch((err) => {\n  console.log(\"AXIOS ERROR: \", err);\n})\n\n```. This is how I had to format my POST request\n```\n    var postData = {\n      email: \"test@test.com\",\n      password: \"password\"\n    };\nlet axiosConfig = {\n  headers: {\n      'Content-Type': 'application/json;charset=UTF-8',\n      \"Access-Control-Allow-Origin\": \"*\",\n  }\n};\n\naxios.post('http://<host>:<port>/<path>', postData, axiosConfig)\n.then((res) => {\n  console.log(\"RESPONSE RECEIVED: \", res);\n})\n.catch((err) => {\n  console.log(\"AXIOS ERROR: \", err);\n})\n\n```. ",
    "EJIqpEP": "Thanks for clarifying @dinodsaurus.. ",
    "SirSerje": "@mcmire I've just needed to fix the hole quickly. Now I can go by more sophisticated way, thank you for clarification.. ",
    "adamrbennett": "If a user of this package wants to set a Content-Type header without a body, shouldn't they be able to do that? I don't see the argument for limiting the use here by either forcing a dummy payload or preventing the Content-Type header from being set. This choice should be up to the user unless there is a good reason to prevent it.. ",
    "apoco": "Figured out that if I used Content-Type instead, it works. Maybe this ought to be made case-insensitive.\n. ",
    "daktwigim": "it still doesn't work... why did it closed?. ",
    "chadmetcalf": "@daktwigim It looks like it was closed because if the correct header key is used, the Content-Type changes.\njavascript\nheaders: {\n  'Content-Type': 'application/vnd.myapp.type+json'\n}\n. Depending on what you are doing, you need to make sure that the Accept header is set too.\njavascript\naxios.defaults.headers['Content-Type'] = 'application/vnd.api+json';\naxios.defaults.headers['Accept'] = 'application/vnd.api+json';. ",
    "duyngha": "I set Content-Type to application/x-www-form-urlencoded but it seems still not work.\nheaders: {\n  'Content-Type': 'application/x-www-form-urlencoded'\n}\nAny helps?\n\nAlso I pass my body as empty.. ",
    "samayo": "I still don't understand why this is closed. Care to explain @mzabriskie?. I still don't understand why this is closed. Care to explain @mzabriskie?. +1 reopen. +1 reopen. Well this is strange. If I am sending post request to login in to a server via axios, then axios does not let me see the cookie on the body response, so how do we get the cookie? Does anyone know?  Currently I am doing this \njson\nheaders: {\n  Accept: \"application/json\",\n  Cookie:\n   \"connect.sid=s%..........g\"\n},\nbut this gives me the above error. Well this is strange. If I am sending post request to login in to a server via axios, then axios does not let me see the cookie on the body response, so how do we get the cookie? Does anyone know?  Currently I am doing this \njson\nheaders: {\n  Accept: \"application/json\",\n  Cookie:\n   \"connect.sid=s%..........g\"\n},\nbut this gives me the above error. Thanks @joembaya, I have looking for the answer since August 2017 :). Thanks @joembaya, I have looking for the answer since August 2017 :). I also got this error today, I don't know what the problem is, this is my script: \njs\n    var url = \"http://localhost:8000/\";\n    Axios.get(url).then(function(response){\n      alert(response)\n    }).catch(function(error){\n      alert(error)\n    });\nhttp://localhost:8000/ returns a JSON response, this does not work on other hosts. @sean-hill Do you have any idea why it can't get the first token of the image?  I don't see data:image/png;base64, part for some reason, which makes the base64 data invalid. @sean-hill Do you have any idea why it can't get the first token of the image?  I don't see data:image/png;base64, part for some reason, which makes the base64 data invalid. This is still an issue that we ought to discuss about. I just sent a GET request to http://httpbin.org/headers as: \njs\nvar post = axios('http://httpbin.org/headers', {\n  method: 'GET',\n  mode: 'no-cors',\n  data: some.data,\n  withCredentials: true\n})\nAnd I am getting all the responses, except for the cookie. . Never mind  console.log('ERROR::', error.response.data); did the job, I hope this will be documented clearly. . ",
    "RobertWSaunders": "I can also verify that setting Content-Type within the headers object is not working! Please could someone explain what is going on here.... To follow up my issue was related to CORS.. ",
    "AgoloAhmedElhady": "I am facing the same issue but only with GET Requests\njs\nconst config = {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${user.jwt}`,\n        },\n      };\naxios.get(url, config)\nEDIT : According to #86 I added empty data object and luckily it worked.\njs\nconst config = {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${user.jwt}`,\n        },\n        data: {},\n      };\naxios.get(url, config). ",
    "stevehu": "@mzabriskie I don't have error message and it does send the request to the back end after further investigation. It is just not return the response to the application as I expected. Here is my code...\nAnd I have made comment on the return response line with !!!!!! I am pretty sure it is due to my limited knowledge with Native Promise. It is not the same as $q in angular:) Any help is much appreciated. \n```\nrequire('bootstrap/less/bootstrap.less');\nvar React = require('react');\nvar Router = require('react-router')\n    , RouteHandler = Router.RouteHandler\n    , Route = Router.Route;\n//var AjaxInterceptor = require('ajax-interceptor');\nvar AuthActionCreators = require('./actions/AuthActionCreators.js');\nvar AuthStore = require('./stores/AuthStore.js');\nvar AppConstants = require('./constants/AppConstants.js');\nvar axios = require('axios');\nvar buildUrl = require('./utils/buildUrl.js');\n// Add a request interceptor\naxios.interceptors.request.use(function (config) {\n    config.headers = config.headers || {};\n    var accessToken = AuthStore.getAccessToken();\n    if (accessToken) {\n        config.headers.Authorization = 'Bearer ' + accessToken;\n    }\n    return config;\n}, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n});\n// Add a response interceptor\naxios.interceptors.response.use(function (response) {\n    // Do something with response data\n    console.log('response interceptor', response);\n    return response; \n    // !!!!!  If there is no error the response returns to the caller and the application works. And if token\n   // expired and response goes to error brand with refresh token call and replay the original request\n   // control goes here but stops. The caller never get the response returned here.\n}, function (error) {\n    // Do something with response error\n    console.log('error response interceptor', error);\n    if (error.status == 401) {\n        //console.log('401 error response')\n        if (error.data.error == 'token_expired') {\n            console.log('token expired');\n            var originalConfig = error.config;\n            // get accessToken from refreshToken\n            var promise = rereshToken(originalConfig);\n            axios(originalConfig, promise);\n        }\n} else if (error.status == 403) {\n    console.log('403 error response');\n    // 403 forbidden. The user is logged in but doesn't have permission for the request.\n    // logout and redirect to login page.\n\n    return Promise.reject(error);\n}\n\n});\nfunction refreshToken(originalConfig) {\n    var refreshTokenPost = {\n        category: 'user',\n        name: 'refreshToken',\n        readOnly: true,\n        data: {\n            refreshToken: AuthStore.getRefreshToken(),\n            userId: AuthStore.getUserId(),\n            clientId: AppConstants.ClientId\n        }\n    };\n// Return a new promise.\nreturn new Promise(function (resolve, reject) {\n    // Do the usual XHR stuff\n    var req = new XMLHttpRequest();\n    req.open('POST', 'http://example:8080/api/rs');\n\n    req.onload = function () {\n        // This is called even on 404 etc\n        // so check the status\n        if (req.status == 200) {\n            console.log('refresh token success', req.response);\n            var accessToken = JSON.parse(req.response).accessToken;\n            console.log('accessToken in refreshToken', accessToken);\n            AuthActionCreators.refresh(accessToken);\n            originalConfig.headers = originalConfig.headers || {};\n            var accessToken = AuthStore.getAccessToken();\n            if (accessToken) {\n                originalConfig.headers.Authorization = 'Bearer ' + accessToken;\n            }\n            // Resolve the promise with the response text\n            resolve(req.response);\n        }\n        else {\n            // Otherwise reject with the status text\n            // which will hopefully be a meaningful error\n            reject(Error(req.statusText));\n        }\n    };\n\n    // Handle network errors\n    req.onerror = function () {\n        reject(Error(\"Network Error\"));\n    };\n\n    // Make the request\n    req.send(JSON.stringify(refreshTokenPost));\n});\n\n};\nfunction retryRequest(config, promise) {\n    console.log(\"retryRequest config\", config);\n    function successCallback(response) {\n        console.log('internal retryRequest response', response);\n        promise.resolve(response);\n    }\n    function errorCallback(response) {\n        promise.reject(response);\n    }\n    axios(originalConfig).then(successCallback, errorCallback);\n}\nfunction buildUrl(url, serializedParams) {\n    if (serializedParams.length > 0) {\n        url += ((url.indexOf('?') == -1) ? '?' : '&') + serializedParams;\n    }\n    return url;\n};\nfunction type(obj) {\n    return Object.prototype.toString.call(obj).slice(8, -1);\n}\nvar router = require('./stores/RouteStore.js').getRouter();\nrouter.run(function (Handler) {\n    React.render(, document.getElementById('content'));\n});\n```\n. It looks like we are going into a interceptor loop.\nHere is the console log if token expired.\ntoken expired\nbundle.js:86 refresh is called.\nbundle.js:94 refresh token success {\"accessToken\":\"eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJuZXR3b3JrbnQuY29tIiwiYXVkIjoibmV0d29ya250LmNvbSIsInR5cCI6Im5ldHdvcmtudC5jb20vYXV0aC92MSIsImlhdCI6MTQzODE2MzI4NCwiZXhwIjoxNDM4MTYzMzQ0LCJ1c2VyIjp7IkByaWQiOiIjMTQ6MCIsInVzZXJJZCI6InN0ZXZlaHUiLCJjbGllbnRJZCI6ImV4YW1wbGVAQnJvd3NlciIsInJvbGVzIjpbIm93bmVyIiwidXNlciJdfX0.BM2hokUajTswCbKt74U1GjYs42XkcpZ_hSjwQqCKaK4\"}\nbundle.js:96 accessToken in refreshToken eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJuZXR3b3JrbnQuY29tIiwiYXVkIjoibmV0d29ya250LmNvbSIsInR5cCI6Im5ldHdvcmtudC5jb20vYXV0aC92MSIsImlhdCI6MTQzODE2MzI4NCwiZXhwIjoxNDM4MTYzMzQ0LCJ1c2VyIjp7IkByaWQiOiIjMTQ6MCIsInVzZXJJZCI6InN0ZXZlaHUiLCJjbGllbnRJZCI6ImV4YW1wbGVAQnJvd3NlciIsInJvbGVzIjpbIm93bmVyIiwidXNlciJdfX0.BM2hokUajTswCbKt74U1GjYs42XkcpZ_hSjwQqCKaK4\nbundle.js:554 refresh in AuthActionCreators is called.\nbundle.js:3309 payload Object {type: \"REFRESH\", accessToken: \"eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJuZXR3b3JrbnQuY29tI\u2026JdfX0.BM2hokUajTswCbKt74U1GjYs42XkcpZ_hSjwQqCKaK4\"}\nbundle.js:3311 type REFRESH\nbundle.js:3346 refreshed access token is saved\nbundle.js:4207 payload Object {type: \"REFRESH\", accessToken: \"eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJuZXR3b3JrbnQuY29tI\u2026JdfX0.BM2hokUajTswCbKt74U1GjYs42XkcpZ_hSjwQqCKaK4\"}\nbundle.js:55 response interceptor Object {data: Array[3], status: 200, statusText: \"OK\", headers: Object, config: Object}```\nas you can see, once the original config is replayed in the failure function, it goes back to the success function of the interceptor and stops there. Somehow, the control is not returned to the caller. I think the caller is expecting the original response and the interceptor gives it a brand new response. Don't know why this works in angular $http but not here. This is a very small package and I really want to use it in my framework instead of including angular.js. Thanks for your help.\n. @feiyingx I could not make it work and switched to JQuery instead.\n. ",
    "feiyingx": "@stevehu did you ever figure out a solution for this?\n. ",
    "kayoubi": "it works fine for me , just use axios(error.config) and make sure to change the header in error.config to sue the new access_token. @shenshouer my code looks something like \nerror.config.headers['Authorization'] = \"Bearer \" + access_token;\nreturn Promise.resolve(\n      axios_instance(error.config).then((response) => {\n            return response;\n      }).catch((error) => {\n            return Promise.reject(error);\n      })\n);. ",
    "lakshayjn95": "@stevehu  I think issue lies in code`\nyou used  axios(originalConfig, promise); instead of retryRequest on 401 error handling. ",
    "shenshouer": "@kayoubi I met the same error, can you tell me how to set axios(error.config) ?. @kayoubi I met the same error, can you tell me how to set axios(error.config) ?. ",
    "Jenan": "@kayoubi Can you please share whole sample of axios interceptor? :) Thx. Based on this sample: https://github.com/axios/axios/issues/450#issuecomment-247446276\nI have used this version for refreshing token - as is described on post above. This interceptor is created for prevent refresh token repeatly if it is created more request and you probable want to call this operation only once.\nThis is typescript version but I think it is very similiar to js version.\n```ts\nexport default class AuthorizationHelper {\nauthTokenRequest: Promise<any>;\n\ngetNewAccessToken() {\n\n    const refreshToken = window.localStorage.getItem(\"refreshToken\");\n\n    if (!this.authTokenRequest) {\n        this.authTokenRequest = this.refreshToken(refreshToken);\n        this.authTokenRequest.then(response => {\n            this.resetGetAccessTokenRequest();\n        }).catch(error => {\n            this.resetGetAccessTokenRequest();\n        });\n    }\n\n    return this.authTokenRequest;\n}\n\nresetGetAccessTokenRequest() {\n    this.authTokenRequest = null;\n}\n\nrefreshToken(refreshToken: string): Promise<any> {\n\n    return axios.post('/api/token/refresh',\n        {\n            refreshToken: refreshToken\n        });\n}\n\nregisterAxiosInterceptor() {\n    axios.interceptors.response.use((response) => {\n        return response;\n    }, err => {\n        const error = err.response;\n\n        if (error.status === 401 && error.config && !error.config.__isRetryRequest) {\n\n            return this.getNewAccessToken().then(response => {\n                error.config.__isRetryRequest = true;\n\n                //set new access token after refreshing it\n                axios.defaults.headers.common[\"Authorization\"] = `Bearer ${response.access_token}`;\n                error.config.headers[\"Authorization\"] = `Bearer ${response.access_token}`;\n\n                return axios(error.config);\n            }).catch(error => {\n\n                //refreshing has failed => redirect to login\n                //clear cookie (with logout action) and return to identityserver to new login\n                //(window as any).location = \"/account/logout\";\n\n                return Promise.reject(error);\n            });\n        }\n\n        return Promise.reject(error);\n    });\n}\n\n}\n```. +1. How do you fix it? :). ",
    "instagibb": "@mzabriskie any thoughts on this? Also when do you see the next version being released?\n. No worries. Thanks for the update :)\n. Awesome. Thanks for the heads up \n. Awesome. Thanks for the heads up \n. ",
    "dralletje": "Browser XHR requests do not support getting the 'Set-Cookie' header that contains the cookies.\nIt would be possible though to get a list of all cookies before the request and compare it to a list all cookies after the request.\nOn the server it is possible to get the 'Set-Cookie' header, but you'll have to parse it yourself :)\n. ",
    "creativeux": "Does this mean that Axios does not support automatic inclusion of JSESSIONID cookies?\n. Does this mean that Axios does not support automatic inclusion of JSESSIONID cookies?\n. ",
    "guncha": "Should probably use the global promise type Promise<axios.Response> as it causes incompatibilities when chaining promises.\n. Actually, it's in the master, just not on NPM, is all. npm publish !! :smile: \n. If anyone is wondering, here's an example how to use FormData with axios. You basically have to stream the data into a buffer and pass the correct headers.\n```js\nconst concat = require(\"concat-stream\")\nconst fd = new FormData()\nfd.append(\"hello\", \"world\")\nfd.append(\"file\", fs.createReadStream(file))\nfd.pipe(concat(data => {\n  axios.post(\"/hello\", data, {\n    headers: fd.getHeaders()\n  })\n}))\n```. ",
    "barberdt": "The suggestion in #82 also suggests a different method signature that would require parsing the event and passing loaded and total to the configured function. I also have no opinion here. Those params would satisfy my use case, however, sometimes it's nice to have the whole event.\n. @mzabriskie Just wanted to check in on this. If there's anything you'd like me to change/update, please let me know. Happy to discuss other options if this doesn't fit into your roadmap. Thanks!\n. ",
    "Pavel910": "@mzabriskie @barberdt  This would be very useful to me also. Anything we can do to make it to official release?\n. @mzabriskie @barberdt  This would be very useful to me also. Anything we can do to make it to official release?\n. ",
    "IDontEatSoap": "+1, please merge.\n. ",
    "alopes": "+1\n. ",
    "joaoahmad": "+1\n. ",
    "buraktamturk": "+1 why this PR is not merged yet...\n. +1 why this PR is not merged yet...\n. ",
    "druska": "+1\n. ",
    "danikenan": "+1\n. ",
    "molily": "How about axios including the above-mentioned serialization code so a Content-Type of application/x-www-form-urlencoded triggers the right encoding when an object is passed?\njs\naxios.post(\n  '/foo',\n  { some: 'data' },\n  { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }\n);\n\u2026 should work out of the box IMHO. Or do I miss something?\n. ",
    "Lothiraldan": ":+1: for supporting x-www-form-urlencoded when the headers is set\n. ",
    "G3z": "+1\n. ",
    "chadxz": "is there any interest in having first-class support for urlencoded put/post baked into axios?\n. ",
    "nmaves": "Yes\n. Sorry to bring up an old issue but @jcready are you positive that axios can't control the redirects?\nHow are other libraries like https://github.com/request/request able to do this?. Sorry to bring up an old issue but @jcready are you positive that axios can't control the redirects?\nHow are other libraries like https://github.com/request/request able to do this?. Makes sense thank you !. The work around for us is to use null for the data.  \nif (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n }\nThey only check undefined, so around we go :) At least until they see my post and fix it.. ",
    "naivefun": "+1\n. UDoc.io - browser & Chrome extension as proxy for HTTP request\n. @mzabriskie Is there a way to read cookies from response?\n. @nickuraltsev  thanks. I used chrome.cookies api to get it done.\n. ",
    "homerjam": "+1\nGlad to see this is in progress\n. ",
    "damianprzygodzki": "+1 It should be handled by library. The data parameters should be just object and we don't want to care which request type it is.\n. No interceptor is needed to crash this thing. I've set content type header defaults axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';, and i can't send any payload in POST body.\nI've used workaround with URLSearchParams:\nvar params = new URLSearchParams();\n    params.append('email', email);\n    return (dispatch) => {\n        axios.post('/stack/' + uri, params)\nBut this is not supported by Safari and IE.\nEdit: Okay :) Next update on workaround. Full supported workaround is send data as query string.\ndata: \"flashcard=\" + JSON.stringify(flashcard) + \"&stackUri=\" + stackUri. It hurts, but it works \ud83d\udc4d \n. Any updates here? Because i've lost 1h today on researching why my POSTs are not affecting API (til i reminded about that issue)... Or there are no plans to fix that and it's better to go somewhere else?. > hyanmandian commented 14 hours ago\nI use a interceptor with qs library to solve this problem. Works fine for me.\nGreat, but it is not a way to solve issue in libraries IMHO by installing another.. +1 I can't get error status at all\n. +1 I can't get error status at all\n. Yeah, there it is (if anyone still got the problem check your version).\nBut i am wondering, that something is missing (or documentation, or implementation) or it is unclear.\nFor example, when i follow documentation, and want to log error:\naxios.interceptors.response.use(function (response) {\n    return response;\n}, function (error) {\n    console.log(error);\n    return Promise.reject(error);\n});\nIt returns only Error message \"Error: Request failed with status code 405\". So the last thing it would be trying to call error properties error.response. \nSo it should be more elaborated in docs, or for me more clear and straightforward solution is to just provide this heck error object, because i believe, any web dev would be handling his error with this message \"Error: Request failed with status code 405\".\nRegards.\n. ",
    "fraserc": "+1 still having issues with this.\n. ",
    "pwrinc": "+1 \nI used the recommended URLSearchParams polyfill. Still seems to have the issue when using IE11.\nEdit: \nThe problem was caused by cloning the axios config object before it is given to axios for requesting. If the config object contains an instance of URLSearchParams for data in IE11 using the recommended Polyfill then the instance of URLSearchParams in the cloned object  is not cloned correctly. It just isn't an URLSearchParams instance any longer.\n. +1 \nI used the recommended URLSearchParams polyfill. Still seems to have the issue when using IE11.\nEdit: \nThe problem was caused by cloning the axios config object before it is given to axios for requesting. If the config object contains an instance of URLSearchParams for data in IE11 using the recommended Polyfill then the instance of URLSearchParams in the cloned object  is not cloned correctly. It just isn't an URLSearchParams instance any longer.\n. ",
    "nusson": "@kalaspuffar improvement of your function to also parse objects\naxios.post(url, {user: {\n  name: 'john'\n}}, ...) will be encoded as user[name] = john\njavascript\nfunction jsonToFormEncoded(data, headers) {\n  var str = [];\n  for(var p in data){\n    if(_.isObject(data[p])){\n      var d = data[p];\n      for(var o in d){\n        if (d.hasOwnProperty(o) && d[o]) {\n          str.push(p+'['+encodeURIComponent(o) + \"]=\" + encodeURIComponent(d[o]));\n        }\n      }\n    }else{\n      if (data.hasOwnProperty(p) && data[p]) {\n        str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(data[p]));\n      }\n    }\n  }\n  return str.join(\"&\");\n}\n. @kalaspuffar improvement of your function to also parse objects\naxios.post(url, {user: {\n  name: 'john'\n}}, ...) will be encoded as user[name] = john\njavascript\nfunction jsonToFormEncoded(data, headers) {\n  var str = [];\n  for(var p in data){\n    if(_.isObject(data[p])){\n      var d = data[p];\n      for(var o in d){\n        if (d.hasOwnProperty(o) && d[o]) {\n          str.push(p+'['+encodeURIComponent(o) + \"]=\" + encodeURIComponent(d[o]));\n        }\n      }\n    }else{\n      if (data.hasOwnProperty(p) && data[p]) {\n        str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(data[p]));\n      }\n    }\n  }\n  return str.join(\"&\");\n}\n. ",
    "tomasp1189": "Having the same Issue. Using OWIN middleware and since the axios.put request sends raw JSON I cant handle it correctly.. ",
    "dannyb648": "Still having issues. Surprised it hasnt been fixed since its such a core feature? . ",
    "mvkasatkin": "+1. ",
    "wumble": "i use this interceptor, which works quite well.\n``javascript\nVue.axios.interceptors.request.use((config) => {\n    if (config.headers['Content-Type'] && config.headers['Content-Type'] === 'application/x-www-form-urlencoded') {\n      config.transformRequest = (data) => {\n        const str = [];\n        Object.keys(data).forEach(key => str.push(${encodeURIComponent(key)}=${encodeURIComponent(data[key])}`));\n        return str.join('&');\n      };\n    }\nreturn config;\n\n}, error => Promise.reject(error));\n```. i use this interceptor, which works quite well.\n``javascript\nVue.axios.interceptors.request.use((config) => {\n    if (config.headers['Content-Type'] && config.headers['Content-Type'] === 'application/x-www-form-urlencoded') {\n      config.transformRequest = (data) => {\n        const str = [];\n        Object.keys(data).forEach(key => str.push(${encodeURIComponent(key)}=${encodeURIComponent(data[key])}`));\n        return str.join('&');\n      };\n    }\nreturn config;\n\n}, error => Promise.reject(error));\n```. i use this interceptor, which works quite well.\n``javascript\nVue.axios.interceptors.request.use((config) => {\n    if (config.headers['Content-Type'] && config.headers['Content-Type'] === 'application/x-www-form-urlencoded') {\n      config.transformRequest = (data) => {\n        const str = [];\n        Object.keys(data).forEach(key => str.push(${encodeURIComponent(key)}=${encodeURIComponent(data[key])}`));\n        return str.join('&');\n      };\n    }\nreturn config;\n\n}, error => Promise.reject(error));\n```. ",
    "BitOfGold": "@kalaspuffar -s code as default config, thank you it works now!\n```\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\naxios.defaults.transformRequest = [function (data, headers) {\n    var str = [];\n    for(var p in data)\n      if (data.hasOwnProperty(p) && data[p]) {\n        str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(data[p]));\n      }\n    return str.join(\"&\");\n  }];. You can patch axios to use application/x-www-form-urlencoded\nSolution here:\nhttps://github.com/axios/axios/issues/97\n```\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\naxios.defaults.transformRequest = [function (data, headers) {\n    var str = [];\n    for(var p in data)\n      if (data.hasOwnProperty(p) && data[p]) {\n        str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(data[p]));\n      }\n    return str.join(\"&\");\n  }];. Other solution: use param: {} instead of data: {} in POST, it works fine!\n(Just adds parameters to the URL like a GET). ",
    "Disorrder": "jQuery has this from the box a lot of years ago. But axios can't recognize formData. jQuery has this from the box a lot of years ago. But axios can't recognize formData. ",
    "dfournier": "I had the same problem. I opened a PR which fixes your problem. Have a look at #100 :smile: \n. Sorry @mzabriskie to ping you, I just wanted to know if you had the time to have a look to this PR :smiley: \n. @mzabriskie is this package is still active?\n. Good to know! So welcome back ;)\n. There are no standards about doing it. But most of them use this syntax. It's called query string, an here is an implementation. If you'd like, I can rewrite my PR in order to add an optional callback in the config in charge of encoding params so all implementation can be use.\n. @mzabriskie so do you think it's a better solution than #101? I think so :smile_cat: \n. @mzabriskie are you still busy? Is the PR could be merged or should I a custom version on my project? :crying_cat_face: \n. You're welcome :+1: \n. :+1: \n. :clap: \n. ",
    "tpreusse": "Sorry I got this wrong. I didn't see the reassignment of promise \u2013 so the library is not actually returning a resolved promise.\nThe error got swallowed by the ES6 promise polyfill instead \u2013 I was using it via webpack and I guess it's impossible to polyfill promises without try / catch \u2013 marking the exception as handled and making a catch block mandatory.\nWhats the correct way to include axios without the polyfill in webpack?\n. ",
    "zwsf": "sorry, I doesnot set transformRequest to handle the request data... please ignore this question.\n. @marcoscssno use transformRequest function to handler the request data and return a string or an ArrayBuffer, then server-side can receive the data.\n. ",
    "marcoscssno": "@zwsf How did you solve it?\n. ",
    "AlbertoTorre": "Hello, my problem with the following:\n\nAnd the code is executed:\n`\ncomponentWillMount(){\n```\n    const peticion = this;\n    const config = { \n                        headers: {'X-Requested-With': 'XMLHttpRequest'},\n                        transformRequest: [function (data) { return data; }],\n                        transformResponse: [function (data) { return data; }],\n                    };\nAxios.get('procesos/lista.php', config)\n.then(function(r) {\n\n    console.log(r);\n\n    peticion.setState({\n        datos:[r.data] | []\n    });\n})\n.catch(function (error) {\n    console.log(error);\n});\n\n}\n```\n`\nFirst of all, Thanks.\n. ",
    "bomsy": "looking into this!\n. looking into this..\n. @mzabriskie Would we want reject with an err object or with a response on this one? leaning towards the err object.\n. I think we can close this issue.\n. @mzabriskie It seems to happen for other pull requests. The issue may have to do with the version node also.\n. @mzabriskie Hey any hope of this getting sorted out? I was hoping to help out with fixing more issues. Thanks\n. Should fix https://github.com/mzabriskie/axios/issues/107\n. Thanks for the review. updates coming.\n. Thanks for the review. updates coming.\n. @nickuraltsev updated!\n. fixing the conflict now!\n. done!\n. @nickuraltsev hey ... yeah. been busy. will get it out in a bit.\n. @nickuraltsev done! \n. ",
    "deyhle": "It is indeed really bad to add the interceptors to the global object. Makes it impossible to use two different node modules that both require axios with their own interceptors.\n. ",
    "lovell": "Great, thanks both.\n. ",
    "krolow": "do you have this fix in any tag? i'm getting same error here\n. alright looking for to get the release :+1: \n. ",
    "benjamingeorge": "OPTIONS \nXMLHttpRequest cannot load http://example/. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://example.dev' is therefore not allowed access. The response had HTTP status code 404.\nis jQuery sending something that Axios isn't?  Headers or preflight ?\n. ",
    "peterpuzos": "+1\n. ",
    "arpitHub": "+1\n. ",
    "anttti": "Stumbled upon this very same issue. jQuery AJAX POST works, Axios (and isomorphic-fetch FWIW) POSTs fail in the preflight phase. What's even more weird is if I \"Copy as cURL\" both of the requests from Chrome inspector's network tab, they're identical!\n. Stumbled upon this very same issue. jQuery AJAX POST works, Axios (and isomorphic-fetch FWIW) POSTs fail in the preflight phase. What's even more weird is if I \"Copy as cURL\" both of the requests from Chrome inspector's network tab, they're identical!\n. ",
    "HknL": "I had this problem as well, but I got it working now as I simply had Access-Control-Allow-Origin set up wrong on the server side. I suspect that the rest of you have this as well because jquery POST sends the requests as application/x-www-form-urlencoded as default, and thus doesn`t get preflighted. While axios correctly sends it as application/json and will be preflighted.\n. ",
    "rafaeleyng": ":+1:\n. I was setting up a little API to learn Grails. Doing a POST request, only by changing from jQuery to Axios, I went from getting this:\n\nto this:\n\n. ",
    "ajacquelin": "+1\n. ",
    "mdarif": "+1\n. ",
    "dmavrin": "+1\n. ",
    "mcfa77y": "+1\n. ",
    "AndrejGajdos": "+1\n. I have the same issue. I use Axios 0.16.2 and sending by XMLHttpRequest works, but not by Axios.\nI have basic FormData object:\nconst formData = new FormData();\nformData.append('name', 'textName');\nI tried @Janekk's suggestion:\naxios({\n      method: 'post',\n      url,\n      withCredentials: true,\n      data: { formData },\n    })\nthen @faalkhah's suggestion:\nconst config = { headers: { 'Content-Type': 'application/json' } };\n    axios({\n      method: 'post',\n      url,\n      withCredentials: true,\n      data: { formData },\n      config,\n    })\nor @askona's suggestion:\nconst config = { headers: { 'Content-Type': undefined } };\n    axios({\n      method: 'post',\n      url,\n      withCredentials: true,\n      data: { formData },\n      config,\n    })\nRequest header is application/json and formData is empty.\nI don't know how to try @demeter-macik fix, because it seems like it works only in back-end https://stackoverflow.com/a/13454425/968379\n. ",
    "steelx": "+1\n. @leyume\nstill doesnt work, you can check it here, OPTIONS call goes thru, but POST call fails\nhttps://reduxapp.herokuapp.com/signin\n. Im also facing the same issue.\nOPTIONS Call goes thru, but POST calls gets stuck into cors.\nhttp://stackoverflow.com/questions/36907693/axios-cors-issue-with-github-oauth-not-getting-access-token\n. +1\n. ",
    "leyume": "Another way to deal with this, especially if it worked in jQuery\n\nvar config = {\n       headers: {\n             'Content-Type': 'application/x-www-form-urlencoded'\n       },\n       params: {\n             email_address: emailAddress\n       }\n};\naxios.post( endpoint, {}, config)\n.then(function (response) {\n       console.log(response);\n})\n.catch(function (response) {\n       console.log(response);\n});\n\nFrom Homyk comment on Dec 9, 2015, was able to come up with this and it worked.\n. ",
    "pdewouters": "@steelx were you able to find a solution? I have the same issue, OPTIONS is successful. but POST throws an error.\nEDIT: nevermind, was an issue with DB connection\n. ",
    "dhirajbasukala": "Spent almost a day testing POST request via Axios with unsuccessful result. The Jquery worked just out of the box. After trying out all suggested setting none worked and frustrating. Later I compared the data being sent by Axios POST and jquery POST and the source format in Chrome Dev Tool showed; jquery sent data in the url string fromat i.e., x=1&y=10&z=abc... while I was sending data via Axios as \njson object {x:1, y:10,z:\"abc\"} as shown in examples. Later I changed it to url string format and it just worked. Hope it helps some one. However I don't know why it worked at first place, since all the examples in git repo shows sending json object in post requst.\n. @unuigbee, below is example that worked for me.\naxios.post(url,'key1=value1&key2=value2',{withCredentials: true})\n.then((res)=>{console.log(res))\n.catch((res)=>{console.log(res)) \nwhere as earlier JSON object being sent case didnt' work which was as below: \naxios.post(url,{\"key1\":\"value1\",\"key2\":\"value2\"},{withCredentials: true})\n.then((res)=>{console.log(res))\n.catch((res)=>{console.log(res)) \nI hope it helps. \n. @unuigbee, below is example that worked for me.\naxios.post(url,'key1=value1&key2=value2',{withCredentials: true})\n.then((res)=>{console.log(res))\n.catch((res)=>{console.log(res)) \nwhere as earlier JSON object being sent case didnt' work which was as below: \naxios.post(url,{\"key1\":\"value1\",\"key2\":\"value2\"},{withCredentials: true})\n.then((res)=>{console.log(res))\n.catch((res)=>{console.log(res)) \nI hope it helps. \n. ",
    "unuigbee": "Hi @dhirajbasukala I'm having the same issue. Can you post an example please?\n. @dhirajbasukala Thanks I tried it but it didn't work. I had to set Headers for Access-Control-Allow-Origin to all (*) on my dev server. I know it's not safe but I had to for testing purposes.\n. ",
    "crazy4groovy": "+1 issue\n. ",
    "hadv": "+1\n. ",
    "image72": "maybe you need check server accepts content type, I used angular $http from jquery.ajax encounter this problem.\njust set like that\n```\n$httpProvider.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8';\n```\njquery v1 default content-type is 'application/x-www-form-urlencoded;charset=utf-8'\n. ",
    "afilp": "@rubennorte Is this automatic configuration implemented?\n. @mzabriskie  Is the above automatic configuration idea about to be implemented? It appears that this makes it difficult to use axios, for certain use cases. Thanks in advance!\n. ",
    "Pau1fitz": "+1\n. ",
    "jartaud": "I've spent all night trying to make axios work. It always sends OPTIONS instead of POST and my CORS cofiguration gets ignored. Vue Resource works for me.\nVue.js 2 (front), Laravel 5.4 (api), Ubuntu (dev machine), Google Chrome & Firefox. ",
    "Jerjomins": "+1. ",
    "apurav2007": "+1\n. +1\n. ",
    "jacekgalazka": "you can must use qs to serialize your data\nconst qs = require('qs');\nconst data = qs.stringify({\n    data1: 'a',\n    data2: 'a',\n   data3: 'a',\n  });\naxios.get('host', data, {\n    'Accept': 'application/json',\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Access-Control-Allow-Origin':'*'\n  }). ",
    "reducio": "+1. Solution!\nhttps://stackoverflow.com/questions/48597306/dynamic-host-in-axios/48598061#48598061. ",
    "mkyukov": "+1 . ",
    "Ethan0007": "Hello,\nI just want to ask if how can i do it in get request when in CORS?\nit seems its not working when i tried this:\n\nBut when i used jquery get request, it allows me to access the api.\nThanks.\n. Hi,\nAny update on this issue, I'm using .net core 2.1 and axios 0.18.\nThanks.. Hi, Just want to ask what is the exact way to request in axios when in CORS?\nI'm getting the same issue when i used axios, but i works in jQuery.\n\nThanks. @diegosps Hi,\nThis is my axios request that get blocked by cors:\n\nand this is my jQuery the works fine:\n\nWhy I'm getting OPTIONS request method instead of GET request?\nDid i forgot something in the request? \nThank you!\n. @diegosps ,\nI already added those set:\nbut the same issue i received:\n\n. @chinesedfan thank you for the reply, just to be specific which part do i set Access-Control-Request-Headers: x-request-width in server or client side?\nThanks. ",
    "llambda": "That's a good point. I didn't think of that. In node I could just do global.Promise = require('bluebird'). I think that will be the better solution. :+1: \n. ",
    "jaketrent": "Pluralsight - browser, node\n. ",
    "peterpme": "Trunk Club!\n. ",
    "vineethawal": "Housing - node & browser\n. Ok, will look into it, see what I can do.\n. Feature added\n. Closes #131 \n. @mzabriskie if the PR looks good can you have it merged?\n. @mzabriskie can we have this merged? we are waiting to use this feature in our project.\n. Done!\n. ",
    "pwatsonwailes": "Builtvisible - node & browser\n. ",
    "nathanboktae": "Appuri, browser & node\n. ",
    "jtangelder": "Blendle.com, browser\n. Blendle.com, browser\n. I don't think this kind of functionality should be in this library. If you need this, you can create a interceptor for this. \n. js\nfunction retryFailedRequest (err) {\n  if (err.status === 500 && err.config && !err.config.__isRetryRequest) {\n    err.config.__isRetryRequest = true;\n    return axios(err.config);\n  }\n  throw err;\n}\naxios.interceptors.response.use(undefined, retryFailedRequest);\nSomething like this! It retries 500 errors once.\n. js\nfunction retryFailedRequest (err) {\n  if (err.status === 500 && err.config && !err.config.__isRetryRequest) {\n    err.config.__isRetryRequest = true;\n    return axios(err.config);\n  }\n  throw err;\n}\naxios.interceptors.response.use(undefined, retryFailedRequest);\nSomething like this! It retries 500 errors once.\n. It might have to do with the limitations of XDomainRequest. It only supports GET and POST. I'm also making DELETE and PUT calls to our Rest server. Also, we're setting content-type headers, which aren't supported, see the page below.\nhttp://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\n. It might have to do with the limitations of XDomainRequest. It only supports GET and POST. I'm also making DELETE and PUT calls to our Rest server. Also, we're setting content-type headers, which aren't supported, see the page below.\nhttp://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\n. I guess running tests on Saucelabs could help to prevent bugs like this! I might have some time left this next weeks, maybe I can help setting this up.\n. I guess running tests on Saucelabs could help to prevent bugs like this! I might have some time left this next weeks, maybe I can help setting this up.\n. :tada: awesome!\n. :tada: awesome!\n. You can also drop most of utils.js then. CoreJS/Babel will add polyfills for them.\n. You can also drop most of utils.js then. CoreJS/Babel will add polyfills for them.\n. Great, I've made some improvements to this though, see https://github.com/mzabriskie/axios/pull/185\n. Viewing with https://github.com/mzabriskie/axios/pull/185/files?w=1, makes line 40-60 less scary \n. @mzabriskie ping!\n. @mzabriskie ping!\n. I don't know why this check was in the handleReadyState method. The request always contains the instance filled at this point.\n. Added it! I understand and agree that the error handling should be improved, but in the meantime, it would be awesome to have this merged. I guess the output would be a lot like this in the final implementation...\n. ",
    "fowkswe": "Paddle8, browser for now.\n. ",
    "eschaefer": "Edenspiekermann, RedBull Amaphiko, browser and node!\n. ",
    "barwin": "Ylopo - browser and node.js\n. ",
    "medeeiros": "mycujoo.tv - node and browser\n. ",
    "djsmith42": "HireVue - browser only\n. ",
    "nathanharper": "InterExchange - browser\n. @batusai513 I did manage to get nock to work with axios after this update got merged. Are you still having issues?\n. ",
    "levithomason": "TechnologyAdvice - browser, ~~probably node soon too~~ and node\n. ",
    "DevPoint": "Book-In Manager - Browser\n. Book-In Manager - Browser\n. ",
    "hartmamt": "The University of Cincinnati - part of PeopleSoft Campus Solutions Portal\n. ",
    "regou": "Patsnap - browser, node\n. ",
    "StephenGrider": "Browser - mPath and Learn Modern React With Redux\n. ",
    "timqian": "star history: The missing star history graph of github repos\nGiG: Content Management System using github as its backend\nauth api: auth part of your RESTful API\nbrowser and node(for unit test)\n. ",
    "tquetano-r7": "Rapid7 - browser\n. Totally solves #236 \n. Use axios.all to manage your dispatch rather than dispatching with each result.\n. ",
    "raulmatei": "PropertyBook browser\n. Hi,\nI have created Axios instance again, as I mentioned in my first post, with responseType: 'json', and then I've replaced the autocomplete service to return the above and it works. I should mention that I use es6-promise polyfill and it seems to work well if not using the responseType in the config.\nSo it looks to me that the issue is somewhere in Axios, not in the Promise polyfill, or if the error is happening inside the Promise polyfill, it's triggered by adding that setting when creating the Axios instance.\nRaul.\n. Hi,\nThanks for the clarification. As you said, I've removed responseType and it works.\nThanks,\nRaul.\n. ",
    "byCedric": "Peakfijn - browser and node.js\n. ",
    "AlexR1712": "MSClics.com  browser\n. ",
    "djbobbydrake": "KidPass.com - browser and node\n. ",
    "rawrmaan": "Falcross.com - Browser, and soon react-native\n. Would love to see this merged ASAP. It has been my main pain point developing with this library and TS!. @nickuraltsev Could we get this published to npm in a new minor version? Thanks!. ",
    "lebe-dev": "KAMIS, browser. did you tried insert some logging info into .catch() ? please, provide logs from devconsole. ",
    "yanivefraim": "Wix.com - browser & node. @mzabriskie @nickuraltsev  - Is someone working on this? I would be happy to take this!\n.  Might be related to https://github.com/mzabriskie/axios/pull/533\n. @robaxelsen - as I said, I would really love to help here!. Is someone working on that? Can I help? (: I would love to continue from here\n@nickuraltsev  ?\n. Not sure this is related to nock (I use nock and it is working). Can you add code example?\n. I have an example with nock @ axiosV0.15.2 - everything is working fine. I think that this issue is not related to nock / was already fixed. We might consider closing it..\ncc @nickuraltsev \n. What about somw kind of integration test for that? You can use nock to simulate 401 response, and then to make your axios call, and check that storage is cleared.\n. Question - do we want defaults to affect instances after instance was created? \nFor example - I create an instance using default 'a'. Then I change this default to be 'b'. Do I want my instance to change accordingly?  \nI know that this is just a one from several related issues (here). I believe that it can be a good starting point - I would love to help fixing them all...\n. @nickuraltsev - IMO when you create an instance with specific defaults, it will be confusing / not predictable if those defaults will be changed later when someone is changing the main defaults... And what if I already changed my instance's defaults? Then I would definitely not want those to be changed!\nAnyway, if we want it to be changed after instance was created, I will have to change my test and update axios.defaults after instance was created + add a new test to verify that after changing my instance's defaults they are not changed by main defaults anymore.\nAnd change my implementation, of course...\n. I agree. Anyway, it should be well documented, and I will be happy to implement whatever you guys decide...\n. I think that those issues are critical, it is a show stopper for us. Mainly https://github.com/mzabriskie/axios/issues/385, which can create a mess in your requests. I'll be happy to help and fix those, but we must have a decision from maintainers.\ncc @nickuraltsev @mzabriskie\n. Cool. I would really love to be involved and contribute here. I think you / we should consider refactoring defaults mechanism, due to all of those issues \n. @nickuraltsev - I fixed the PR according to your idea. axios.defaults is now a reference to global defaults.\nAnother thing that we might consider is exposing global defaults, something like:\naxios.GLOBAL_DEFAULTS or  axios.global_defaults, so we'll have axios as a default instance on one hand, and as an api on the other hand (including axios.Cancel, axios.CancelToken and so on, and including the new axios.global_defaults). This might prevent confusion between axios default instance defaults and global defaults.\nWDYT?\n. ping... ? \n@nickuraltsev @mzabriskie \n. One comment: I used JSON.parse/stringify trick to avoid using libraries like lodash. A better solution might be writing our own function / importing only lodash's required method\n. Copying only headers by value (whitelisting) will not completely solve the problem. If tomorrow we have another nested default value, it will be copied by reference and can then overwrite all defaults.\nA better solution is to copy all defaults by value before merging. This way, every axios instance has a copy of the defaults object that can be mutated and will only affect that instance.\n@nickuraltsev - Can you plz look at my last commit? WDYT?\n. ping... ? \n@nickuraltsev @mzabriskie \n. I'll gladly help here, but it is impossible to work when owners are not responding (it takes too much time to get a response here). For a project with so many users we must have an option for contributors to feel comfortable to add PRs / fix issues.\n@nickuraltsev - fyi. Async await will work for any promise, as long as you have the appropriate transpile / polyfill.\nTake a look at this example (it uses babel stage-0 preset + babel-polyfill\nHope this was helpfull\n. There are some issues with request headers which I hope https://github.com/mzabriskie/axios/pull/533 will solve. \nI'm not sure if the problem you experienced is the same, but worth checking. \nBTW - quickest check will be to take my fork (with this fix), link it to your project, and see if the problem was resolved. You'll have to use the relevant branch. Plz tell me if it works/ if you need help with that.\n. ",
    "abhijeet-fractal": "Fractal Analytics - Node and browser. ",
    "terry90": "Getpro - along with React / Redux for browser and Chrome extension. Getpro - along with React / Redux for browser and Chrome extension. ",
    "emredoganm": "Makinecim uses Vue with Axios in browser. ",
    "rogerjin12": "ButterCMS uses it for our Node.js API client. ",
    "refaelos": "SOOMLA is using it for Traceback Dashboard. I found out the I just have to handle the rejection of a promise ... I thought I could just ignore it .... @charlesrochati not necessarily but I do wonder if queueing them will help?. ",
    "jaredmurphy": "Air Tailor - browser & node!. I believe this is just an issue with the fact that any error in the promise chain will bubble up to .catch(). It's not an Axios problem, per say, it's more a feature of promises in general. . ",
    "parkerproject": "Fyxes - node. ",
    "yannvr": "Coin Advisor - client. ",
    "JustinBeckwith": "Google!  \nhttps://github.com/google/google-auth-library-nodejs\nhttps://github.com/google/google-api-nodejs-client. Awesome ideas.  I rolled a fair bit of this up into an npm module, if folks are interested:\nhttps://github.com/JustinBeckwith/retry-axios\nHappy to take feature requests \u2728. Do folks here have any thoughts on TypeScript?  We're using it quite happily, and I'd be happy to help with a conversion if y'all are into that kind of thing. . Greetings!  It's been a while since we heard anything on this one.  If you're still running into issues... please do let us know!  We're closing this one out for now. . @SidKwok I'd be interested in helping push this through.  If you're still into making this happen, I think we need to:\n- [ ] Rebase and resolve any conflicts\n- [ ] Ensure webpack and all its assorted packages are fully removed\n- [ ] Address karma integration, as that seems to be missing from the PR\nIf you'd still be willing to help out with this - it would be awesome \ud83d\ude0e . Sweet \ud83c\udf6c I'm still pretty new around these parts, but I think you're supposed to leave dist/ changes out of this according to the contributing guide:\nhttps://github.com/axios/axios/blob/master/CONTRIBUTING.md#developing\nProbably best just to drop those changes!. That's a little weird.  I'm guessing this is just helping webpack to ignore that file, since it contains the nodejs focused implementation.  We don't need that in the client :)\n  . Greetings folks!  Can y'all please share a full code sample that includes the enclosing function?  This totally \"works on my machine\":\n```js\nconst axios = require('axios');\nconst nock = require('nock');\nnock.disableNetConnect();\nconst url = 'http://example';\nnock(url).get('/').reply(500);\nasync function main() {\n  try {\n    const res = await axios.get(url);\n    console.log('Success!');\n    console.log(r.status);\n    console.log(r.data);\n  } catch (e) {\n    console.error('Failure!');\n    console.error(e.response.status);\n  }\n}\nmain().catch(console.error);\n```\n```\nbeckwith-macbookpro:ax beckwith$ npm start\n\nax@1.0.0 start /Users/beckwith/Code/ax\nnode server.js\n\nFailure!\n500\n```. \ud83d\udc4b @LukasDrgon would you mind posting a link here to the previous conversation?  For my own edification.. Unless anyone objects, I see no issue with posting both links since they're both cached automatically.  @Jamesking56 do you want me to close this out?  Or is it cool to consider both?. Greetings!  It looks like this one has been answered.  If you're still running into problems - let us know!. Greetings!  This looks like an issue with the built-in behavior of the browser.  I don't think there's a whole lot we can do here.  If you think this should be re-opened...  let us know!. Greetings!  It's been a while since we got any feedback on this one.  If you're still having problems... please do let us now!  . Greetings!  This issue has been hangin' out here for a while.  If you're still running into issues... please do let us know!. Greetings @omegaphoenix!  It would be rad to have this test.  It got a little crusty sitting around (sorry about that....). Would you mind rebasing and fixing the conflicts?  Just @ me and I'll make sure it gets merged this time :)\nThanks! . Greetings!  It's been a while since we heard anything from you.  If you're still running into any issues... please let us know and we'll re-open this!. Greetings!  Thanks for the contribution, but I think we're going to keep the README the way it is :). Greetings, and thanks for the PR!  Having this opened against the 1.x branch is a little problematic.  It was an easy change, so I went ahead and opened this agains the master branch in #1461.  Thanks!. Greetings!  Looks like a pretty good answer up there.  If you're still running into issues... please do let us know!. Greetings!  This appears to be answered.  If you're still having any issues... please do let us know!. Greetings!  It looks like you're trying to ask for an endpoint on localhost:8080, while serving the web page on localhost:3000.  When you make a request from one domain to another domain, this is called a Cross Origin Request.  This requires a special set of permissions, which led to a deep subject called CORS (Cross Origin Resource Sharing).  You can read all about it here:\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\nThe browser will automatically send a preflight request, which uses an OPTIONS header before making a GET to a different domain.  To support this request, your server needs to have CORS explicitly enabled.  You can learn how to do that with express here:\nhttps://github.com/expressjs/cors\nThis can be a little tricky to get going, but hopefully I've given you enough to go read and learn :)  I'm going to close this for now, but please do let me know if you run into any troubles as you forge ahead here. \nGood luck!\n. Greetings! This looks like a pretty good answer :)  If you're still having issues... please do let us know!. Greetings!  It's in Bytes :)  I submitted #1463 to clear it up.  Thank you for the feedback!. Greetings!  This is a pretty common issue.  Another way to work around this is to use a different querystring parameterizer, which is actually pretty easy to do!  I use qs, which handles arrays quite nicely:\nhttps://github.com/ljharb/qs\nCheckout the paramsSerializer config option here:\nhttps://github.com/axios/axios#request-config\nPlease do let us know if you run into any other issues. Good luck!. Greetings!  By default, Axios will just use application/json if you give it the right kind of data.  It looks like you're being a tad overzealous with the JSON.stringify action :)  You don't need to do all that!  Give this a shot:\n```js\nlet body = {\n  grant_type: 'password',\n  username: this.username,\n  password: this.password\n};\naxiosInstance.post('tokens', body, {\n  headers: { 'Content-Type': 'application/json' }\n})\n  .then(function (response) {\n    console.log(\"response: \" + response);\n  })\n  .catch(function (error) {\n    console.log('An error occurred.' + error);\n  });\n```\nIf this doesn't work out for you - please do let us know and we'll take another look!. Greetings!  We're going to need a little more information to help with this one.  Please include:\n- A reproducible code sample\n- The way you're figuring out this is a get instead of a post :) \nThanks!. Greetings!  Can you please share a snippet of code that reproduces the error? It would be super helpful.  . Greetings!  At a glance, it looks like you're trying to send a POST that contains JSON data, and one of the fields in your JSON is a JSON.stringify-ed string.  That's a little weird to be honest :)  You can probably just POST your json without the stringify overhead.  The default content-type with Axios is going to be application/json, so this should \"just work\":\njs\nconst fakeData = [ { fake: 'data' } ];\nconst url = 'http://192.168.90.251:8764/common/dotLogController/sendLog';\naxios.post(url, {\n  topic: 'topic',\n  logs: fakeData, // look ma, no JSON.stringify()!\n});\nOf course, that makes the assumption that your server endpoint can handle JSON in the payload instead of application/x-www-form-urlencoded.  If your server needs form urlencoded data in the post payload, you could do something like this:\n```js\nconst fakeData = [ { fake: 'data' } ];\nconst payload = {\n  topic: 'topic',\n  logs: fakeData,\n};\nconst url = 'http://192.168.90.251:8764/common/dotLogController/sendLog';\naxios.post(url, qs.stringify(payload));\n```\nHope this helps!. FWIW, I needed to swap out the default qs serializer in here for qs as well.  This would be a valuable feature IMO. . Apologies, Google Translate couldn't really help me in a meaningful way with this one :)  If you have a question, please submit in english!. Greetings!  I just wrote up a little test, and it appears that this is working exactly how I'd expect it to:\n```js\nconst axios = require('axios');\nconst nock = require('nock');\nconst url = 'http://funkyfreshyo';\nnock.disableNetConnect();\nconst start = Date.now();\naxios.get(url, { timeout: 1000 })\n  .then(r => console.log)\n  .catch(e => {\n    const end = Date.now();\n    const diff = (end - start)/1000;\n    console.error(e.code);\n    console.log(\u2728 that request took ${diff} seconds \u2728);``\n  });\n```\nIf I run this, I get:\n```\nbeckwith-macbookpro:ax beckwith$ npm start\n\nax@1.0.0 start /Users/beckwith/Code/ax\nnode server.js\n\nENETUNREACH\n\u2728 that request took 0.006 seconds \u2728\n```\nIt does the same if I get rid of the nock stuff and just disable my network.  Is it possible you have a proxy or something that's not immediately timing out?  What happens if you disconnect your network and try to hit that url in your browser?\nAm I misunderstanding what you're trying to do?  Thanks!. Thanks for the fix!. Greetings!  An HTTP 413 is a \"Payload too large\" error:\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413\nThis error is returned from your server when the contents of your post (a big ol' base64 encoded string in this case) is too big.  This is an option that's typically configured on the server, and can't be changed from the client (axios in this case). \nHope this helps!. Greetings!  I'm not entirely sure what you're asking :)  These two pieces of code do very different things.  When you issue an axios.get, the second parameter contains the Request Config options you can find here:\nhttps://github.com/axios/axios#request-config\nThe params option will encode data into the querystring, like this:\njs\naxios.get('/page', { params: { hello: 'world' } });\nWill make a GET to /page?hello=world.\nWhen you issue an axios.post, the second parameter in the function is the data you want to send in the post payload.  \nHope this helps!\n. Yar, apologies!  I had assumed that if Travis tests passed, that meant everything was GTG.  Is that not the case?. Pretty sure you can drop the custom count handling and just use Object.keys(this.handlers).length - let me know if this works!. This is another one of those places where it might be nice to use Object.keys. ",
    "aljones": "I got this error from: axios.post('/api' [this.props.query])  If you don't see it, the comma is missing between the arguments. I tested this in node too.\n```\n\nvar f = function(s, a) { return { s, a }};                                    \nf('s', ['a'])                               \n{ s: 's', a: [ 'a' ] }                        \nf('s' ['a'])                                \n{ s: undefined, a: undefined }\n```\n\nSo I guess the error is related to an argument being undefined.  I'm surprised that isn't a syntax error.\n. ",
    "zhangjinling": "I also meet this question.But I also can send get and post request.\nI use it in VUE,when I use Vue.use(axios);,not do otherthing .The error occured.\nisURLSameOrigin.js?94c0:57 Uncaught (in promise) TypeError: Cannot read property 'protocol' of undefined\nchrome : 55.0.2883.87 m. ",
    "vpiskunov": "Any solution? I am also using it with Vue.use(axios)\nisURLSameOrigin.js?142d:61 Uncaught (in promise) TypeError: Cannot read property 'protocol' of undefined\nPerhaps could be about the way we import it into VueJS? There doesn't seem to be any docs on how to properly import it to Vue, especially when using Webpack...\nAny ideas greatly appreciated!. @rohmanhm That's because the Ajax request runs on a separate isolated \"thread\"-like environment. You might have some luck by calling .bind(this) or .bind(window). ",
    "rookiebulls": "@vpiskunov Maybe it's because you are using the origin axios, not a vue plugin, you should use Vue.prototype.$axios = axios if you want vue's instance to call it. @vpiskunov Maybe it's because you are using the origin axios, not a vue plugin, you should use Vue.prototype.$axios = axios if you want vue's instance to call it. ",
    "rohmanhm": "I got same problems guys, but I'm not using Vue.\nIt's happend when I process the response.data using window object, but when I just console.log(response.data) this not show any errors.. @vpiskunov would you give me some example?. ",
    "qinyueshang": "I am also using it with Vue.use(axios)\nisURLSameOrigin.js?142d:61 Uncaught (in promise) TypeError: Cannot read property 'protocol' of undefined\nwhen I remove 'Vue.use(axios)',it is ok. ",
    "EmadAdly": "If you use vue or another just \njs\nimport axios from 'axios'\nAnd use Axios normally without using  Vue.use(axios)\nEverything works fine. ",
    "Spencehiko": "Hey, when I write Vue.use(axios); in main.js I get  \"Uncaught ReferenceError: axios is not defined\" error and it dows not change when I delete it. How can I solve this problem? \nThanks in advance!. ",
    "huainanhai": "If you use:\nimport axios from 'axios';\naxios.defaults.baseURL = process.env.BASE_URL;\nexport default axios;\nThe error occurs\n. ",
    "mr-twady": "Using Laravel VUE JS, I experienced this same issue. This fixed it for me however - \nwindow.axios = require('axios'); in resources/js/bootstrap.js already scaffolds axios. You wouldn't need to do Vue.use(require('axios')); in resources/js/app.js.\nIn my own case, this was the issue, so I removed it from app.js. . ",
    "lynnard": "Can we reopen this issue? I just stumbled upon this as well. Promise-based api should handle all errors as reject or at least provide a mechanism for the user to call reject. With the current api I have to do this\naxios({\n  transformResponse: [data => {\n    try {\n      //... data\n    } catch(e) {\n    }\n    return null;\n  }]\n}).then(resp => {\n  if (resp == null) {\n    throw new Error('NULL!');\n  }\n  return resp;\n})\nWhich is not ideal.\n. ",
    "angelxmoreno": ":+1: \n. ",
    "aripalo": "Any change you could publish new version of Axios into npmjs.org with this instantiation feature? I am actually in dire need of this :) (Okay, I'll survive, I can use axios as git depedency for now)\n. ",
    "WoLfulus": "This is also happening for me.\n. ",
    "Elyx0": "@mzabriskie This is still happening at least in React-Native\njavascript\naxios.post(`/create/`, Qs.stringify(payload),{timeout: 1000})\n    .then(json => {}).catch(e => {}).\nMy request is sent, the result is there before timeout runs out and the .then() is not called if I add the timeout parameter.\n. Bumping for same issue.\n. ",
    "amithgc": "any update on this issue? I have the same problem in some of the android devices (React Native), Timeout doesn't happen at all.. ",
    "milewski": "the same is happening for me... after a bunch of request... one will hang forever...  :( ... using nodejs. the same is happening for me... after a bunch of request... one will hang forever...  :( ... using nodejs. ",
    "1c7": "happening to me too, using React Native 0.52 for Android. ",
    "kdomagal": "happens in nodejs as well. Why is this issue closed @mzabriskie ?. happens in nodejs as well. Why is this issue closed @mzabriskie ?. ok actually issue is not the timeout I think. Simply try to do couple of hundreds of requests in a loop. It will hang after few. . ok actually issue is not the timeout I think. Simply try to do couple of hundreds of requests in a loop. It will hang after few. . ",
    "emilyemorehouse": "From what I can gather, the original issue is solved. Timeouts are working properly for me:\n\nIs this just an issue when many requests are being sent? If someone can provide code to reproduce the issue, I'm happy to look into it.\n. From what I can gather, the original issue is solved. Timeouts are working properly for me:\n\nIs this just an issue when many requests are being sent? If someone can provide code to reproduce the issue, I'm happy to look into it.\n. Hm. I tried with 1000 requests and it didn't trip it up for me. \ud83d\ude1e . Hm. I tried with 1000 requests and it didn't trip it up for me. \ud83d\ude1e . Closing this in favor of #1333.\nThe remaining open task from this list (Documentation #257) has also been included on the new issue.. Closing this in favor of #1333.\nThe remaining open task from this list (Documentation #257) has also been included on the new issue.. Closing, as this issue was resolved in #1395. \ud83d\ude4c . Closing, as this issue was resolved in #1395. \ud83d\ude4c . When using Axios in a browser, the underlying network request is handled using an XMLHttpRequest. This doesn't support sending data for GET requests and thus this issue can't be fixed if/until that is changed. There are definitely other options for handling requests, but it would cause a loss of browser compatibility and therefore we're super hesitant to make big changes like that.\nYou can test this out in your browser if you're curious:\nvar xmlhttp = new XMLHttpRequest();   // new HttpRequest instance\nxmlhttp.open(\"GET\", \"https://jsonplaceholder.typicode.com/posts\");\nxmlhttp.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\nxmlhttp.send(JSON.stringify({ email: \"hello@user.com\", response: { name: \"Tester\" } }));\nIf you look at the request in the network tab of your dev tools, you'll see that no data is sent up.\nSorry if there was any confusion on this issue previously! This is definitely something on my radar for increasing support in the future.. When using Axios in a browser, the underlying network request is handled using an XMLHttpRequest. This doesn't support sending data for GET requests and thus this issue can't be fixed if/until that is changed. There are definitely other options for handling requests, but it would cause a loss of browser compatibility and therefore we're super hesitant to make big changes like that.\nYou can test this out in your browser if you're curious:\nvar xmlhttp = new XMLHttpRequest();   // new HttpRequest instance\nxmlhttp.open(\"GET\", \"https://jsonplaceholder.typicode.com/posts\");\nxmlhttp.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\nxmlhttp.send(JSON.stringify({ email: \"hello@user.com\", response: { name: \"Tester\" } }));\nIf you look at the request in the network tab of your dev tools, you'll see that no data is sent up.\nSorry if there was any confusion on this issue previously! This is definitely something on my radar for increasing support in the future.. Thanks, @DjebbZ! Looks like this helped kick off work that got merged in from other PR/commits, so I'm going to close this out.. Thanks, @DjebbZ! Looks like this helped kick off work that got merged in from other PR/commits, so I'm going to close this out.. Closing, as this issue was resolved in #1395. \ud83d\ude4c . Closing, as this issue was resolved in #1395. \ud83d\ude4c . Fixed in #1342 . Fixed in #1342 . I'm happy to look into this, but I'm having trouble reproducing the issue.\nHere's my current test case with v0.17.1, where the specified access-token header is getting added to the request header:\n\n. I'm happy to look into this, but I'm having trouble reproducing the issue.\nHere's my current test case with v0.17.1, where the specified access-token header is getting added to the request header:\n\n. access-token isn't a standard header, but here's with X-RandomToken in any case. \ud83e\udd14 \n\n. access-token isn't a standard header, but here's with X-RandomToken in any case. \ud83e\udd14 \n\n. Fixes from #1395 have been released as part of 0.19.0-beta.1.\nThis can be installed using npm install axios@0.19.0-beta.1 or npm install axios@next. Fixes from #1395 have been released as part of 0.19.0-beta.1.\nThis can be installed using npm install axios@0.19.0-beta.1 or npm install axios@next. @astappev this definitely looks like it needs a fix ASAP. There's a lot of related issues and PRs that I need to sift through, but I'll add it to my 0.19.0 roadmap.. #959 was merged and is available in 0.19.0-beta.1. #959 was merged and is available in 0.19.0-beta.1. @pbarbiero no worries! \nI've got a work deadline tomorrow morning, but I'll make sure it gets merged this week. I'll also get it included in the next release. \ud83d\udc4d . @pbarbiero no worries! \nI've got a work deadline tomorrow morning, but I'll make sure it gets merged this week. I'll also get it included in the next release. \ud83d\udc4d . The only potential issue I'm seeing is if a user sets both a socket and a proxy. The HTTP module says you should only use one or the other (see here: https://nodejs.org/api/http.html#http_http_request_options_callback) since setting a proxy winds up setting the hostname/port/etc.\nI'd be fine with adding a note to the README to let users know they should only use either a socket or proxy, and what happens if they try to use both. From what I could see, if you do specify a proxy and a socket, it just uses the socket. @sam3d could you verify this since you have a test environment?. The only potential issue I'm seeing is if a user sets both a socket and a proxy. The HTTP module says you should only use one or the other (see here: https://nodejs.org/api/http.html#http_http_request_options_callback) since setting a proxy winds up setting the hostname/port/etc.\nI'd be fine with adding a note to the README to let users know they should only use either a socket or proxy, and what happens if they try to use both. From what I could see, if you do specify a proxy and a socket, it just uses the socket. @sam3d could you verify this since you have a test environment?. @sam3d How did you set up the socket to test? I toyed around with either socat or a TCP server and am afraid I don't know nearly enough about sockets to get it working successfully!. @sam3d How did you set up the socket to test? I toyed around with either socat or a TCP server and am afraid I don't know nearly enough about sockets to get it working successfully!. Awesome, thanks @sam3d! That was super helpful.\nMy assumption was correct, it does default to the socket if you provide a proxy.\nI'll actually handle updating the README and adding a test for this in a separate PR to keep this one moving.\nThanks, all!. Awesome, thanks @sam3d! That was super helpful.\nMy assumption was correct, it does default to the socket if you provide a proxy.\nI'll actually handle updating the README and adding a test for this in a separate PR to keep this one moving.\nThanks, all!. Closing, as this issue was resolved in #1395. \ud83d\ude4c . Closing, as this issue was resolved in #1395. \ud83d\ude4c . Fixed in #1122. Fixed in #1122. This was fixed in #1342, but I prefer this implementation. Thanks!. This was fixed in #1342, but I prefer this implementation. Thanks!. Closing, as this issue was resolved in #1395. \ud83d\ude4c . Closing, as this issue was resolved in #1395. \ud83d\ude4c . This has been completed and will be included in the 1.0.0 release, tracked here: #1333. This has been completed and will be included in the 1.0.0 release, tracked here: #1333. Hi @jishnu7, thank you for the PR! \nThis has been added as part of the roadmap for v1.0.0 (tracked here: #1333) and was completed by someone on that branch.. Hi @jishnu7, thank you for the PR! \nThis has been added as part of the roadmap for v1.0.0 (tracked here: #1333) and was completed by someone on that branch.. Closing in favor of #385 - which has further discussion.\nThanks!. Closing in favor of #385 - which has further discussion.\nThanks!. Thanks @dericcain!. Thanks @dericcain!. @mividtim I've got this on my radar now.\nThe current implementation isn't sufficient since process.env.HOME is not consistently used across operating systems and isn't guaranteed to be defined.\nI'd suggest checking out detect-node's method or doing some research on Node-specific environment variables to handle compatibility (for example, I know that process.env.NODE_VERSION is now used, though I'm not sure if it has always been set for all older versions of Node).. @mividtim I've got this on my radar now.\nThe current implementation isn't sufficient since process.env.HOME is not consistently used across operating systems and isn't guaranteed to be defined.\nI'd suggest checking out detect-node's method or doing some research on Node-specific environment variables to handle compatibility (for example, I know that process.env.NODE_VERSION is now used, though I'm not sure if it has always been set for all older versions of Node).. Will do!\nI think the best way currently is to check the changelog, especially if you have a specific PR # you're checking on.. Will do!\nI think the best way currently is to check the changelog, especially if you have a specific PR # you're checking on.. There was a call for assistance about a month ago (http://www.mattzabriskie.com/blog/axios-help-wanted). A few of us have stepped up, along with the original owners, and are working hard to get through the backlog of issues and PRs. Bear with us! . There was a call for assistance about a month ago (http://www.mattzabriskie.com/blog/axios-help-wanted). A few of us have stepped up, along with the original owners, and are working hard to get through the backlog of issues and PRs. Bear with us! . @mividtim No worries! The squeaky wheel gets the grease, right? In terms of helping out, I've been trying to clear out the backlog of issues by determining which ones are really bugs and which are issues with a user's implementation. I'll usually start by providing a working example (unless I can reproduce a bug) or even just pinging old issues to see if they'll still respond. Feel free to reach out to me if you want more info or collaboration, I'm quite accessible on the internet.\n@dnfield I'll ping the person who's acting as a release manager, we definitely need an updated release.\n. I'm now a person who can cut releases \ud83e\udd37\u200d\u2640\ufe0f\nSo... this is released in 0.18.0!. Here's an example of how to cancel multiple requests individually:\n\nAnd copy/paste friendly:\n```\nvar axios = require(\"axios\")\nvar CancelToken = axios.CancelToken;\nvar call1 = CancelToken.source();\nvar call2 = CancelToken.source();\naxios.get('http://slowwly.robertomurray.co.uk/delay/3000/url/https://jsonplaceholder.typicode.com/posts/1', {\n  cancelToken: call1.token\n}).catch(function(err) {\n  if (axios.isCancel(err)) {\n    console.log('First request canceled', err.message);\n  } else {\n    // handle error\n  }\n});\n// Make call again\naxios.get('http://slowwly.robertomurray.co.uk/delay/3000/url/https://jsonplaceholder.typicode.com/posts/1', {\n  cancelToken: call2.token\n}).catch(function(err) {\n  if (axios.isCancel(err)) {\n    console.log('Second request canceled', err.message);\n  } else {\n    // handle error\n  }\n});\ncall1.cancel('Operation canceled by the user.');\ncall2.cancel('Operation canceled by the user.');\n```\nSince this doesn't look like an Axios bug, I'm closing this issue.\nIf you need further assistance debugging your code, please post on Stack Overflow, Gitter, or comment again on this issue and I'll try to help.. Hi @sirb0rab0g1,\nIf you can submit a short snippet that shows a reproducible bug, I'm happy to help. Since this issue hasn't received a response and this doesn't look like an Axios bug based on the info we have, I'm closing this issue.\nIf you need further assistance debugging your code, please post on Stack Overflow, Gitter, or comment again on this issue. \nThanks!. Hi @Croge32,\nSince this issue hasn't received a response and this doesn't look like an Axios bug based on the info we have, I'm closing this issue.\nIf you need further assistance debugging your code, please post on Stack Overflow, Gitter, or comment again on this issue. \nThanks!. Hi @Artiiz-ZA,\nSince this issue hasn't received a response and this doesn't look like an Axios bug based on the info we have, I'm closing this issue.\nIf you need further assistance debugging your code, please post on Stack Overflow, Gitter, or comment again on this issue. \nThanks!. @vvusts are you still having this issue, or did you find a solution?. Hi @rajalive28!\nIf you can submit a short snippet that shows a reproducible bug, I'm happy to help. If you're still stuck debugging this, please post on Stack Overflow, Gitter, or comment again on this issue. . @corujoraphael I'm not sure that your code runs as-is. The config where you specify your headers should be an object, but it's missing a curly brace:\n```\n(newData) => {\n  const data = new FormData();\n  data.append('name', 'raphael');\n  data.append('file', {\n    uri: newData.image.path,\n    type: 'image/jpeg',\n    name: 'teste'\n  });\nreturn axios.post(\n    ${constants.development.URL_API}/file,\n    data, \n    { \n      headers: {\n        'Content-Type': 'multipart/form-data',\n      }\n    },\n  )\n}\n```\nSince this issue hasn't received a response and this doesn't look like an Axios bug based on the info we have, I'm closing this issue.\nIf you need further assistance debugging your code, please post on Stack Overflow, Gitter, or comment again on this issue. \nThanks!. If someone can provide a reproducible example, I'm happy to open this back up. \n@Ernie6711 it looks like you have an error in your code -- I don't think you should stringify the file data before appending it to your form data. Also, the arguments for axios.post are axios.post(url[, data[, config]])\nHere's an example based on your code:\n```\nconst file ={ uri: localUri, name: filename, type: type};\nconst formData = new FormData();\nformData.append('file', s);\nconst config = {\n        headers: {\n                'Content-Type': 'multipart/form-data; charset=utf-8; boundary=\"another cool boundary\";'\n        }\n};\naxios.post(\"http://10.0.1.2:8888/uploadphoto\", formData, config).then((resp) => {\n        console.log(resp);\n}).catch(err => {\n        console.log(err);\n});\n```. I have a local client and server example for file uploads, albeit outside of the React Native environment, that works and is properly encoded. The example above isn't really reproducible since it relies on variables and a server that I don't have access to.\nMy guess is that if there's something incorrect with the upload, it's because the data appended to the form data object is not valid.. Y'all, I appreciate the direction but \"just test a file upload in React Native\" isn't that easy. I don't often work in React Native and it would take a decent amount of time to spin up a project with file uploads to test with.\nI do have a simple POST with form data that works in React Native:\n```\n    const formData = new FormData();\n    formData.append(\"data\", true);\nconst config = {\n  headers: {\n    \"Content-Type\": \"multipart/form-data; charset=utf-8;\"\n  }\n};\n\naxios.post(URL, formData, config).then(\n  response => {\n    console.log({ response });\n  },\n  error => {\n    console.log({ error });\n  }\n);\n\n``true` gets stringified when sent to the server, which is interesting.\nThat said, if anyone can provide an example that I can easily spin up, I'm happy to look into it more. . Hi @refucktor,\nSince this issue hasn't received a response and this doesn't look like an Axios bug based on the info we have, I'm closing this issue.\nIf you need further assistance debugging your code, please post on Stack Overflow, Gitter, or comment again on this issue. \nThanks!. Do we have a way of tracking deprecations/breaking changes for 1.0.0?. @Khaledgarbaya perfect. Wanted to make sure #1042 / #1234 can be tracked and deprecated properly. Thanks!. @Keecat here's a working example:\n\nAnd copy/paste friendly:\n```\nvar axios = require(\"axios\")\nfunction onFullfilled(response) {\n    console.log('onFullfilled');\n    return response;\n}\nfunction onRejected(err) {\n    console.log(onRejected: ${err});\n    console.log(status: ${err.response.status});\n    return Promise.reject(err);\n}\nvar axiosInstance = axios.create();\naxiosInstance.interceptors.response.use(onFullfilled, onRejected)\n// call endpoint that purposefully does not exist\naxiosInstance.get('https://jsonplaceholder.typicode.com/post')\n.then(function(resp) {console.log(resp);})\n.catch(function(err) {console.log(err.response.status);})\n```\nSince this doesn't look like an Axios bug, I'm closing this issue.\nIf you need further assistance debugging your code, please post on Stack Overflow, Gitter, or comment again on this issue and I'll try to help.. @vesper8 did this solve your issue? \nIn an effort to get our GitHub issues under control, I'm going to close this out. If you still need assistance, feel free to comment again and I'll see if I can help!. @xiaoyueyue165 take a look at what is returned in your .then -- it's actually already an object that's been parsed, so you don't need to call JSON.parse at all. You also probably want to access data.data.\nSee this example:\n\nIf you need further assistance debugging your code, please post on Stack Overflow as our GitHub issues are meant to track bugs and new feature discussions.\nHope this helps!. You can name that variable whatever you'd like. I used .then(function(response) {...}) but .then(function(data) {...}) or anything else works also.\nDo you mean that your .catch is being executed instead of your .then? That means that your status code is considered an error. You can check this by accessing status.\nHere's another snippet for you:\n```\nvar axios = require('axios')\naxios.get('https://jsonplaceholder.typicode.com/posts')\n.then(function(response) {\n    console.log(response.status)\n})\n.catch(function(err) {\n    console.error(err.response.status);\n})\n```. Hi @GermanMontejo! \nI believe this is a misunderstanding of the difference between 302 and 307 requests. \nRFC7231 6.4.7 states: \n\nThe 307 (Temporary Redirect) status code indicates that the target\n   resource resides temporarily under a different URI and the user agent\n   MUST NOT change the request method if it performs an automatic\n   redirection to that URI.  Since the redirection can change over time,\n   the client ought to continue using the original effective request URI\n   for future requests.\n\nEssentially what this means is that if you have a POST that redirects via a 302, the redirect is done with a GET.\nIf you have a POST that redirects via a 307, the redirect is done with a POST. You can actually see where this happens in one of Axios' dependencies follow-redirects here. \nPerhaps this is messing up your redirect call?\nNonetheless, this doesn't seem to be an issue with Axios, so I'm closing this out. If you still need help, feel free to comment again and I'll see if I can help!. Hm. Without being able to debug your API, I'm not sure I'll be of any help. I tested redirects with a 307 and it still follows them.\nHere's an example, adapted from one of our tests (it creates a server that redirects /one to /to):\n```\nvar axios = require('axios')\nvar http = require('http');\nvar url = require('url');\nhttp.createServer(function (req, res) {\n  var parsed = url.parse(req.url);\nreq.on('data', function (data) {\n    console.log(DATA: ${data});\n  });\nif (parsed.pathname === '/one') {\n    console.log(TYPE: ${req.method}, URL: ${req.url});\n    res.setHeader('Location', '/two');\n    res.statusCode = 307;\n    res.end();\n  } else {\n    console.log(REDIRECTED -- TYPE: ${req.method}, URL: ${req.url});\n    res.end('test response');\n  }\n}).listen(4444, function () {\n  axios.post('http://localhost:4444/one', {'foo': 'bar'});\n});\n```\nHere's a link to the running code  as well, which outputs:\n\"TYPE: POST, URL: /one\"\n\"DATA: {\\\"foo\\\":\\\"bar\\\"}\"\n\"REDIRECTED -- TYPE: POST, URL: /two\"\n\"DATA: {\\\"foo\\\":\\\"bar\\\"}\". Hi @ngohungphuc!\nYour Axios POST looks correct - here is an example that runs properly with the expected header. You don't even need to explicitly set your header for this case.\n\nOr, for ease of copying:\n```\nvar axios = require(\"axios\")\naxios({\n    method: 'POST',\n    url: 'https://jsonplaceholder.typicode.com/posts',\n    params: {\n        'id': 1\n    }\n}).then(function(response) {\n    console.log(response.config.headers);\n}).catch(function(err) {\n    console.error(err);\n})\n```\nThe only other thing I noticed is that when you use xhr for a successful request, your data and dataa keys do not match up - though I don't think this would change the error you're receiving.\nIf you need further assistance debugging your code, please post on Stack Overflow as our GitHub issues are meant to track bugs and new feature discussions.\n. Since this doesn't appear to be a bug with Axios itself, it helps maintainers focus on bugs and features instead of implementation issues. Stack Overflow is a great place to find support, but you can feel free to comment here and I'll still get notified and help you!. Hi @JohnRSim,\nIt's important to note is that mode, credentials, and crossdomain aren't supported for configuring Axios. The reason why your example works when using fetch is because those options are part of the Request API (docs for mode are here).\nProbably TMI, but Axios uses a XMLHttpRequest under the hood, not Request.\nI believe that your request using Axios fails because CORS is still being enforced, though I'm not sure why you're getting a Network Error. I'll try to duplicate this locally as well.. @JohnRSim Unfortunately, I think this boils down to one of the dreaded CORS issues that developers often face. I could duplicate this and I tried a bunch of ways to poke at it to get the preflight request to work, but I couldn't find an opening in the server to let me through. \ud83d\ude1e \nSince this isn't really an issue Axios can solve currently (it's possible that fetch could be supported in the future, but we'd lose browser compatibility), I'm going to close this out. Feel free to comment and I'll still respond if I can help any further!. @Axnyff is correct - here's an example:\n\nAnd copy/paste friendly:\n```\nvar axios = require(\"axios\")\nfunction onFullfilled() {\n    console.log('onFullfilled');\n}\nfunction onRejected(err) {\n    console.log('onRejected', err);\n}\nfunction onFullfilled2() {\n    console.log('onFullfilled2');\n    throw Error('Nope')\n}\nfunction onRejected2(err) {\n    console.log('onRejected2', err);\n}\nvar axiosInstance = axios.create();\naxiosInstance.interceptors.request.use(onFullfilled, onRejected)\naxiosInstance.interceptors.request.use(onFullfilled2, onRejected2)\naxiosInstance.request('https://jsonplaceholder.typicode.com/posts/1')\n.then(function(resp) {console.log('resp', resp);})\n.catch(function(err) {console.log('err', err);})\nI'm not sure why config is undefined when trying to read cancelToken from it, but this is certainly unrelated.\nSince this doesn't look like an Axios bug, I'm closing this issue.\nIf you need further assistance debugging your code, please post on Stack Overflow, Gitter, or comment again on this issue and I'll try to help.. @Axnyff is completely correct -- it's expected that data is defined for a POST request to have a Content-Type. If there's no data, then there's nothing for the Content-Type header to correlate to (since if you use URL params, the type is inferred since you can't pass something like JSON as a URL encoded parameter).. While I can't speak to the design of your use case, here's an example of cancellation with your example in mind:\n\nAnd copy/paste friendly:\n```\nvar axios = require(\"axios\")\nvar CancelToken = axios.CancelToken;\nvar call1 = CancelToken.source();\nvar call2 = CancelToken.source();\naxios.get('http://slowwly.robertomurray.co.uk/delay/3000/url/https://jsonplaceholder.typicode.com/posts/1', {\n  cancelToken: call1.token\n}).catch(function(thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('First request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n// Fake time between user searches\nsetTimeout(function() {\n    // Cancel current call\n    call1.cancel('Operation canceled by the user.');\n// Make call again\naxios.get('https://jsonplaceholder.typicode.com/posts/1', {\n  cancelToken: call2.token\n}).then(function(resp) {\n    console.log('Success', resp.status);\n});\n\n}, 1000) \n```\nSince this issue doesn't look like an Axios bug, I'm closing this issue.\nIf you need further assistance debugging your code, please post on Stack Overflow, Gitter, or comment again on this issue and I'll try to help! . Ah, I understand. I think the part that's missing in your code is the tokens -- you do indeed need unique tokens for each request in order to cancel just that request. Otherwise, all requests that share a token are canceled.\nSo for my example, I had two tokens, one for each request. For your use case, you'll have to dynamically manage the tokens in order to have one token per request.. Awesome, glad to hear!. I'm having trouble duplicating this locally (and I actually went down quite a rabbit-hole of finding cases that get caught by Axios from maxContentLength but not follow-redirects maxBodyLength). \ud83d\ude05 \nCan you share an example that demonstrates the error?. Thanks @mdlavin! . Ah, good point! Thanks!. Ehh nevermind, this does break. I'd love an explanation though!. This PR wasn't actually merged -- are you using the 0.19 beta? There were config changes that could be causing this (and if so, I'd love to track it down and fix it because it's not intentional).. Hi @Foberm,\nI'm unable to reproduce your issue. Here's my test case, I just swapped out your URL for a test one:\n\nAre you sure you're looking at the POST and not OPTIONS call? If I run your exact example, I get a CORS error, which is not related to the data payload:\n\n. You should definitely be able to access that information. I don't see anything jumping out at me that's incorrect in your response or request info. \nI'm not sure if it will help you or if you've already seen this info, but here's an example test that passes:\n```\n    var data = {\n      reason: 'Invalid something or other',\n    };\nserver = http.createServer(function (req, res) {\n  res.statusCode = 500;\n  res.setHeader('Content-Type', 'application/json;charset=utf-8');\n  res.end(JSON.stringify(data));\n}).listen(4444, function () {\n  axios.get('http://localhost:4444/').catch(function (error) {\n    test.deepEqual(error.response.data, data);\n    test.equal(error.response.status, 500);\n    test.done();\n  });\n});\n\n``\nYou can see that you're able to access the status and data viaerror.response.statusorerror.response.data`. \nCan you see if you can access either of those attributes? If you just log error, you'll get the actual Error object, but you can drill down further. See this example:\n\n. Glad you got it working!\nWe're doing a decent overhaul for v1.0.0, so I'll definitely keep your suggestion in mind! I agree that it can be confusing as is.. Hi @sony-mathew! Thanks for the PR.\nThis approach doesn't actually work, unfortunately. The headers still wind up getting applied to both the instance config as well as Axios config:\n\n. There's no way to bypass the request handler (.then or .catch) completely. \nYou can still reject in your if (403 === error.response.status || 401===error.response.status) { . See this related issue: #1375 \nSince this doesn't look like an Axios bug, I'm closing this issue.\nIf you need further assistance debugging your code, please post on Stack Overflow, Gitter, or comment again on this issue and I'll try to help! . Why don't you use return Promise.reject(error); within if(error.response.status===404)?\nYou don't have to do anything in the .catch, but you have to reject the promise in order to stay out of the .then.\nSince this doesn't look like an Axios bug, I'm closing this issue.\nIf you need further assistance debugging your code, please post on Stack Overflow, Gitter, or comment again on this issue and I'll try to help! \n. Hello!\nFrom what I can gather, this looks like an error with your Webpack configuration. Without more information, there's not much we can do to help you.\nSince this doesn't look like an Axios bug, I'm closing this issue.\nIf you need further assistance debugging your code, please post on Stack Overflow, Gitter, or comment again on this issue and I'll try to help! . Hi @Mathiasduc, thanks for the PR!\nThe current documentation is actually correct, but definitely a bit confusing. \n\n// validateStatus defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If validateStatus returns true (or is set to null\n  // or undefined), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n\nSo for the example in the README,\nvalidateStatus: function (status) {\n    return status < 500; // Reject only if the status code is greater than or equal to 500\n}\nwill resolve if the status code is less than 500, and therefore rejects if the status code is 500 or greater. \nIf you're interested, feel free to update your PR to clarify this and I'll get it merged in!. Hello!\nThere's information in #1361 or #1294 on managing cancel tokens for multiple requests. You'll need a unique token for each request that needs to be canceled, as all requests associated with a token are canceled when .cancel() is called on your source.\nSince this doesn't look like an Axios bug, I'm closing this issue.\nIf you need further assistance debugging your code, please post on Stack Overflow, Gitter, or comment again on this issue and I'll try to help! \n. Looks like y'all figured this out and that it isn't a bug, so I'm closing this out \ud83d\ude42 . Closing, as this issue was resolved in #1395. \ud83d\ude4c . Can you post how you're attempting to access the file from your server? I can't see any issues in your code that you posted.. Another approach would be to handle this when creating the defaults object here. I think that may be a bit more clean, because then each instance has an isolated configuration, and the order of config precedence gets handled already when requests are made. I'm not sure we'll get away with just depending on the type to judge whether a clone needs to be made or not, but I'd have to spend a bit more time looking at this.\nWe absolutely need thorough tests as well, as it's highly possible that making these changes will break things that we didn't foresee.\n@codeclown laid it out well -- that would be a good place to start for what needs to be tested.\nHere are a couple that I was using when poking at this issue:\n```\nit('should change only the baseURL of the specified instance', function() {\n    var instance1 = axios.create();\n    var instance2 = axios.create();\ninstance1.defaults.baseURL = 'http://instance1.example.com/';\nexpect(instance2.defaults.baseURL).not.toBe('http://instance1.example.com/');\n\n});\nit('should change only the headers of the specified instance', function() {\n    var instance1 = axios.create();\n    var instance2 = axios.create();\ninstance1.defaults.headers.common['Authorization'] = 'faketoken';\ninstance2.defaults.headers.common['Authorization'] = 'differentfaketoken';\nexpect(instance1.defaults.headers.common['Authorization']).toBe('faketoken');\nexpect(instance2.defaults.headers.common['Authorization']).toBe('differentfaketoken');\nexpect(axios.defaults.headers.common['Authorization']).toBe(undefined);\n\n});\n``. (Oooo, didn't know they` trick, I'll definitely use that!)\n@codeclown that's a great point and something I was wondering about. I think it was mentioned in other discussions, but I can't put my finger on it now.\nIn that example, if the instance also had baseURL set, it should use the config from the instance and not the general axios default though, correct? Whenever a request is made, the configuration gets re-merged, which should handle updates to the default config even when using an instance. I'm not 100% sure that it works that way or if that was the intention, but that's what I've gathered so far.\n. @poison I'll have the time today or tomorrow to thoroughly review this and will cut a release as soon as that's done. I believe config defaults is what you are looking for.. I'm a fan of this -- I also think that creating an instance should freeze its defaults. I'm not sure if this will get a push into 0.19 (I'd like to focus on getting the security issues fixed in the least difficult way possible) but I would definitely want this in 1.0.0.\n(As a side note -- 1.0.0 has ditched most of the custom utils in favor of lodash, which could make things easier as well). I went ahead and looked into the failure -- it's actually failing on testSocket in test/unit/adapters/http.js, the error just isn't caught which causes the build to fail.\nTurns out that the config is not quite correct for sockets.\nHere's the config before this PR:\n{ method: 'get',\n  adapter: [Function: httpAdapter],\n  transformRequest: { '0': [Function: transformRequest] },\n  transformResponse: { '0': [Function: transformResponse] },\n  timeout: 0,\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n  maxContentLength: -1,\n  validateStatus: [Function: validateStatus],\n  headers:\n   { common: { Accept: 'application/json, text/plain, */*' },\n     delete: {},\n     get: {},\n     head: {},\n     post: { 'Content-Type': 'application/x-www-form-urlencoded' },\n     put: { 'Content-Type': 'application/x-www-form-urlencoded' },\n     patch: { 'Content-Type': 'application/x-www-form-urlencoded' } },\n  socketPath: './test.sock',\n  url: '/' }\nAnd after:\n{ url: '/',\n  headers:\n   { common: { Accept: 'application/json, text/plain, */*' },\n     delete: {},\n     get: {},\n     head: {},\n     post: { 'Content-Type': 'application/x-www-form-urlencoded' },\n     put: { 'Content-Type': 'application/x-www-form-urlencoded' },\n     patch: { 'Content-Type': 'application/x-www-form-urlencoded' } },\n  transformRequest: [ [Function: transformRequest] ],\n  transformResponse: [ [Function: transformResponse] ],\n  timeout: 0,\n  adapter: [Function: httpAdapter],\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n  maxContentLength: -1,\n  validateStatus: [Function: validateStatus],\n  method: 'get' }\nHandling the socketPath config key in mergeConfig should settle it. Might be good to add a disclaimer that any new config options that are added must also be added in mergeConfig.\nOtherwise, GREAT work @codeclown, I'm very excited to release this.. ATM merging this caused tests to fail on Travis (see https://travis-ci.org/axios/axios/branches). We'll be able to release as soon as that's fixed.. @Dakkers the current build is still failing (even with cutting older IE versions) so I haven't released it yet \ud83d\ude14. Released as part of 0.19.0-beta.1.\nThis can be installed using npm install axios@0.19.0-beta.1 or npm install axios@next. Thanks for the PR! Being able to control withCredentials fully is definitely important. \nI think we should also add the explicit default for withCredentials set to false in https://github.com/axios/axios/blob/dd16944ecf70d8939ce77d79b57463e193d023a6/lib/defaults.js#L28 so that React Native users don't need to set this themselves.. I'm hoping you were able to figure this out.\nThere's also a new beta release that can be installed using npm install axios@0.19.0-beta.1 or npm install axios@next. I\u2019ve been hoping to get out a 0.19 release but last I checked, master was failing CI. I\u2019d definitely like a more solid/regular release schedule once we get 1.0 to land. . I\u2019ve been hoping to get out a 0.19 release but last I checked, master was failing CI. I\u2019d definitely like a more solid/regular release schedule once we get 1.0 to land. . Hey all. I'm currently managing the NPM releases. I'd love to issue another pre-1.0.0 release, but the Travis tests are failing and I haven't had a chance to fix them yet. Once they're fixed, I'm more than happy to get this out immediately \ud83d\ude2c . Hey all. I'm currently managing the NPM releases. I'd love to issue another pre-1.0.0 release, but the Travis tests are failing and I haven't had a chance to fix them yet. Once they're fixed, I'm more than happy to get this out immediately \ud83d\ude2c . Released as part of 0.19.0-beta.1.\nThis can be installed using npm install axios@0.19.0-beta.1 or npm install axios@next. Working on it -- there was a major feature that's currently breaking master (see https://travis-ci.org/axios/axios/branches). As soon as we can get master to a stable state, I'll push another release!. Released as part of 0.19.0-beta.1.\nThis can be installed using npm install axios@0.19.0-beta.1 or npm install axios@next. The fix you're referencing is from #1395 / #385 This actually caused tests to fail for the master branch and therefore isn't stable. As soon as we can get that fixed, I can issue a release.. Released as part of 0.19.0-beta.1.\nThis can be installed using npm install axios@0.19.0-beta.1 or npm install axios@next. Hm, this seems like a bug to me. Let's what's causing this before changing the documentation. cancelToken should definitely be part of the config object instead of the payload.\nI know it's been a while since you opened this PR, but were cancelToken and name being received as part of the payload with your tactic?. Sorry I didn't catch this before -- 0.18 should have been tagged as latest automatically. Looks like it is now if it wasn't before.. This has been fixed and merged!. We're still supporting older versions. Any release should have all tests passing (if they didn't -- that was an oversight!).\nMaster is currently failing for IE 7, and the failing tests are actually a blocker for the next release. Looks like there isn't any info on the issue. Please open a new issue if you're still having trouble.. I agree with @dotboris (thanks for posting such a thorough response!)\nClosing this out since it doesn't appear to be an Axios issue.. Glad to see people helping people!\nThanks for creating this, @delirius325. Feel free to issue a PR and tag me if you want to add https://github.com/augmnt/axios-curlirize to the Axios README so people can find it. \ud83d\ude04 . The data of a request is always sent as a string, the Content-Type header tells the server what to do with it. Are you using a third-party API or one that you control? If it's your API, you'll have to parse the string, or your framework may have a helper method (for example, Flask provides a request.get_json() helper).\nHere's the code I tested in a React Native project:\n```\n     axios.interceptors.request.use(\n      config => {\n        console.log(\"Request:\", config);\n        return config;\n      },\n      error => {\n        console.log(\"Request Error:\", error);\n        // Do something with request error\n        return Promise.reject(error);\n      }\n    );\nconst config = {\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n};\n\naxios\n  .post(URL, { foo: \"bar\" }, config)\n  .then(response => {\n    console.log(\"Response: \", response);\n  })\n  .catch(error => {\n    console.log(\"Error: \", error);\n  });\n\n```. Hi @kosanna, I've been managing releases and this is definitely on my radar.\nI haven't been able to fix the failing tests for master and therefore can't release as-is. As soon as I (or someone else!) gets that done, I'll issue a release.\nI added a task to the next release project here, so I'm going to close this out.. Hi @shaodahong , I've been managing releases and this is definitely on my radar.\nI haven't been able to fix the failing tests for master and therefore can't release as-is. As soon as I (or someone else!) gets that done, I'll issue a release.\nI added a task to the next release project here, so I'm going to close this out.. This looks like a CORS error -- you can usually spot those when your request gets stopped at OPTIONS and never reaches the POST. You'll have to handle CORS in your API. If you're using Express, there is a CORS middleware, or you can find one for the framework you're using.\nSince this doesn't look like an Axios bug, I'm closing this issue.\nIf you need further assistance debugging your code, please post on Stack Overflow, Gitter, or comment again on this issue and I'll try to help! \n. Thanks!\nThe build is failing for.. reasons that are not documentation or this PR. \ud83d\udc4d . I've issued the last couple of releases and am happy to continue managing them, I've just been waiting on passing tests. As soon as that's settled, I'll cut the release.\nI do have access to run local code using Sauce Labs, so I've been poking at it to see if I can get the tests to behave. My gut was that something changed with the dependencies and is causing it to hang, but I haven't found anything that works.. I've released 0.19.0-beta.1.\nThis can be installed using npm install axios@0.19.0-beta.1 or npm install axios@next\nI'll cut the official 0.19 release when tests are passing \ud83d\ude42. We have our green checkmark back!\n\nI'm going to give the beta a couple of weeks before releasing 0.19 -- there's already #1718 which points out a possible regression.. I was just looking at why CI is now failing for everything (master was stable and is now failing with only documentation changes, which is suspect). Hoping to get that fixed and cut a release with #1831 if no one is opposed.. Hi @cygnusss, thanks for the PR!\nI just reviewed a related PR (#1728) and wanted to share some feedback as I think through this:\n\nI just went back and looked at other encoding issues (which now have their own label!) and want to make sure this is the best choice, especially considering backwards compatibility for all users.\nI think it would be awesome to add a config option to enforce RFC3986 or not, so that both use cases are handled.. Looks like y'all figured this out! Closing.. Here's more info on CORS from another Axios user (I can't locate the attribution, sorry!):\nThe error your getting about the preflight request is because the server is not responding with the proper CORS headers.\nFrom your code, it seems like you're trying to pass the CORS headers on the client. CORS headers need to be returned by the server. You need to change your Java backend so that it handles CORS properly.\nThere's a guide on the spring site explaining this: https://spring.io/guides/gs/rest-service-cors/\nCORS are a very important security feature in the browser. You should really understand how they work and what kind of security implications they have.\nMDN has a in-depth article on this: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\nHere's an article that describes what the security implications of CORS are: https://mobilejazz.com/blog/which-security-risks-do-cors-imply/\n\n\nSince this doesn't look like an Axios bug, I'm closing this issue.\nIf you need further assistance debugging your code, please post on Stack Overflow, Gitter, or comment again on this issue. \n. Hi @matthewlowry, thanks for the PR!\nGive me a couple of days to work through this. I just went back and looked at other encoding issues (which now have their own label!) and want to make sure this is the best choice, especially considering backwards compatibility for all users.\nI think it would be awesome to add a config option to enforce RFC3986 or not, so that both use cases are handled.\n(also applies to #1671, and some other related issues/prs tagged 'encoding'). Thank you @atrauzzi! There's just the small update needed (see my comment) and I'll merge this.. CI seems to be broken, this doesn't actually break anything \ud83d\ude42 . @LinusU is correct, this should be left as-is. Merged your PR, thanks!. It's not dead, I just haven't been able to personally do as much on the project lately. We had a big issue with fixing configurations, which introduced breaking changes, that have halted things until that gets fixed. \nSo yes, if there are people willing to step up and help as maintainers, I welcome them!. \ud83d\ude2d y'all are AWESOME.\nTo anyone who wants to help, here are a few ideas I have:\n\nTriage issues: I recently added issue templates to help auto-tag issues (and filter out actual bugs vs usage issues). There's a lot of noise for this project and I spend the majority of my time trying to filter through issues and wind up closing most of them with a simple \"This doesn't seem like an Axios bug (many I can't even duplicate), I think X may be your issue, feel free to post on Gitter or Stack Overflow for help debugging your code\". If you find a real bug that doesn't have example code, providing example code is a HUGE help. Bonus points if it's as simple as copy/pasting into Runkit with calls to an example API like JSON Placeholder. \nPR Review:  Not quite as noisy as issues, but this can still be a lot to go through. I really appreciate people who tag me in PRs that have high priority/fix known issues. Feel free to ping me if I don't respond after a few days. Currently, the focus is definitely getting things stable before focusing on new features or 1.0.0.\nCI: Our CI is finicky - we often hit weird edge cases or issues that cause CI to break and that slows up the whole procress. If we have a broken master branch, I can't release, plain and simple. So if you ever see that master is failing (or PRs are failing for issues not caused by the PR), any help there is massively appreciated.\n\nI'm happy to give anyone access as needed. The only thing I'd like to hold onto is acting as the release manager to ensure consistency.\nI plan on adding this info to the contributing doc along with my response templates for others to use and guidelines for how issues should be labeled, etc.. Closing this as there isn't anything in the issue content other than the template.. Thank you!!\nAny chance you've seen a changelog or something for follow-redirects? Did I miss it? I was hoping to find a list of possible breaking changes. . Please don't update the version, this gets done automatically when a release is made.. Nit-picky, but can you use a lower camel case name to match the other functions?. Ah gotcha, I didn't catch that change. This is fine as is.. config should be optional (it falls back to only using the default settings). ",
    "ksnyde": "Using the following code -- which overly verbose in error handling -- I'd expect there be no way to not get a message to stdout from the Axios get call but indeed at random intervals it fails and just hangs. I rerun from where I left off and the endpoint which failed almost always works only to have it fail randomly somewhere else. I would strongly support this being a real issue.\n```typescript\ntry {\n    content = await axios.create().get(url, {timeout: 5000});\n    console.log(chalk.grey('- axios content returned from endpoint'));\nif(content.status !== 200) {\n  console.log(chalk.red(`- Returned status from ${url} was ${chalk.bold.yellow(String(content.status))}}`));\n  problemsCaching.push(business);\n  return business;\n}\nif(!content.data) {\n  console.log(chalk.red(`- Axios responded correctly but payload is empty (${url})`));\n  problemsCaching.push(business);\n  return business;\n}\n\n} catch (e) {\n    console.log(chalk.red(- Problems loading \"${url}\" for ${business.name}));\n    problemsCaching.push(business);\n    return business;\n  }\n```. ",
    "Braunson": "Any solutions to this issue since?. I'm having this same issue on the same Axios versions and on Chrome Windows 10.\nCancel token has no effect in network requests.. ",
    "ctimmerm": "@mzabriskie done.\n. This should be fixed by https://github.com/mzabriskie/axios/commit/1e2cb9bdca0e19298aa7c242a7db4b45427967ea\n. Could you give some more information about what you're trying to do?\nAny of the axios API calls returns a plain Promise (the axiosRequest in your example is just a Promise), so in that sense using axios isn't any different from using any other Promise for the payload.\nIf you used the index in the request and want to have access to it where you're processing the response, it should already be available in response.config.\n. The http adapter is used when running axios on node.js. url, zlib and buffer are core modules included with node itself and thus do not need to be listed as external dependencies.\n. I made this to enable easy mocking of requests made through axios, I thought it could be useful for others: https://www.npmjs.com/package/axios-mock-adapter\n. ",
    "dzannotti": "@mzabriskie any chances of getting this merged?\n. ",
    "lachenmayer": "Sorry, haven't gotten around to this yet, should be able to do that tomorrow!\n. ",
    "Chris911": "Any updates on this? Would be really useful.\n. ",
    "msangui": "bump, any comment?\n. I guess what I did doesn't follow the wished guidelines or ideas.\nThe abort feature is a must, IMHO.\n. Abort on retry can be even more important than abort by itself. For example the most common use case for aborting XHR requests is when you are doing an autocomplete logic, we should discuss that feature as well.\n. ",
    "ericraio": "please merge the proxy option!\n. ",
    "gajus": "Is this still not in the ./dist?\n. ",
    "JacquesBonet": "Sorry, Matt, I made a mistake, the issue is for redux-crud, not axios.\n. Sure\n2015-10-27 21:56 GMT+01:00 Matt Zabriskie notifications@github.com:\n\nNo problem. Are we okay to close the issue?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/134#issuecomment-151641201.\n\n\nJacques Bonet\nres Margaut, app 44\n411 cours de la Liberation,\n33400 Talence\nFrance\n\u2706 +33 6 35495090\n\u2709 jacques.bonet@gmail.com\n. ",
    "musbaig": "Wow, suggestion worked perfectly. Thanks for the superfast response!! \nGreat work btw on axios, loving it.\n. Hi there: ah sorry my bad, I should have written config.axios not its reverse, where: \nconfig.axios={headers: {\n      \"X-Requested-With\": \"XMLHttpRequest\",\n      \"Expires\": \"-1\",\n      \"Cache-Control\": \"no-cache,no-store,must-revalidate,max-age=-1,private\",\n      \"Content-Type\": \"application/json\"\n    },\n    responseType: \"json\"}\n. **General:** \nRequest URL:http://localhost:3000/api/v1.0/entities/experiment:738c52aa-0280-483b-a9ca-77d9b17bdccc/lock\n**Request Headers:**\nProvisional headers are shown\nAccept:application/json, text/plain, */*\nCache-Control:no-cache,no-store,must-revalidate,max-age=-1,private\nContent-Type:application/json\nExpires:-1\nOrigin:http://localhost:3000\nReferer:http://localhost:3000/elements/workspace/experiment/experiment:fbd71a4e-6dd7-4cac-8167-0eca47c85cab\nUser-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36\nX-Requested-With:XMLHttpRequest\n**Request Payload:**\n{lockToken: \"12345\"}\nlockToken: \"1234\"\n. Note the request is malformed, the http verb, Request Method: header, is missing from General:, among others.\n. Ok, will try that and let you know, thanks!\n. Looks like there was an api issue on our side, axios is handling delete correctly! Sorry for the confusion, thanks again @nickuraltsev for your help and the pointer above.\n. Confirmed. I'm also seeing something similar when using axios with redux-saga where some 422's aren't being handled as a rejected promise.. Never mind, found my problem. Interceptors weren't properly propagating errors down to the app layer, d'oh! \ud83d\ude33 . ",
    "velopert": "es6-promise-polyfill did not work for me when I was using webpack + babel.\nThis one solved my issue: https://babeljs.io/docs/usage/polyfill/\n. I was having the same issue. Why is the instance setting not working? . ",
    "dogotaru": "thanks a lot @velopert, your suggestion worked\n. ",
    "jflayhart": "Like @velopert, I'm running webpack and was able to add babel-polyfill as a vendor file and npm dependency to resolve the issue.. ",
    "jmathew": "Regarding usage with webpack 2: \nI was already using BlueBird in my project and axios is part of the bundle. So I used the ProvidePlugin to give axios wings:\nmodule.exports = {\n  plugins:[     \n        new webpack.ProvidePlugin({\n            Promise: \"bluebird\"\n        })\n    ],\n}. ",
    "mgashraf": "importing promise from core-js solved the issue for me as below\nimport 'core-js/fn/promise';. ",
    "marktolson": "@mgashraf thanks this is the only solution that worked for me.. ",
    "bigsee": "@velopert thank you! worked for me... :). +1. +1. +1. ",
    "ruscoder": "+1\n. +1\n. ",
    "diessica": "Awesome!\n. Awesome!\n. Loved it :-)\n. Loved it :-)\n. Option 1 seems good enough for me. Also liked @herrstucki's approach to the issue.\n. Option 1 seems good enough for me. Also liked @herrstucki's approach to the issue.\n. ",
    "SkateFreak": "is that why this doesn't work:\naxios('/user')\nand this does?\naxios('http://localhost:3000/user')\n. is that why this doesn't work:\naxios('/user')\nand this does?\naxios('http://localhost:3000/user')\n. ",
    "samjulien": "First-timer here. Can you point me to where this is? I'm guessing perhaps the Axios.prototype.request method?\n. Cool, thanks @mzabriskie - I will give the PR a shot. Stand by...\n. Perfect, was just going to ask about a test.\n. :white_check_mark: \n. Thanks, will do!\n. Okay, I just submitted it. Hopefully I did the PR right. But all tests are passing.\n. And thank you for the opportunity, @mzabriskie! I've been trying to figure out how to get started with OSS contributing.\n. Thanks!\n. ",
    "miguelc1221": "i was just about to submit too = ), thanks for guiding us!\n. i was just about to submit too = ), thanks for guiding us!\n. ",
    "terrierscript": "+1\n. ",
    "ldabiralai": "Good job! Any news on when this'll be merged?\nLooking to use it in a project without having to reference the commit hash.\n. ",
    "agentidea": "ah we see there is no body passed to the delete method, so sorry!\n. ",
    "jsdmc": "@iam4x Yeah, I know) Just curios why this merged to master and highlighted in docs but not published.\n. @iam4x Yeah, I know) Just curios why this merged to master and highlighted in docs but not published.\n. ",
    "ferdinandsalis": "Yes, this just tripped me to.\n. @mzabriskie thanks. no worries. It also seems that when you use an instance by using var instance = axios.create() you can not use it like this instance({method: 'patch', data: {\u2026}}).\n. thanks @nickuraltsev. Still I was expecting it to work because it works with the default instance.\n. ",
    "ir-fuel": "The result is the same when logging the response object in this call:\n```\n  return axios.get(BaseUrl+path).then(function(response) {\n    responseInterceptor(response)\n    return Promise.resolve(response)\n  })\n``\n. I found why. It had to do with CORS. You need to set which reponse headers are allowed to 'survive' a CORS request.\n. Never mind, seems the server had a bug in the implementation when handling theOPTIONShttp method\n. Just tested by replacing the host with its IP\nThis gives a 404 response .... Rebooting the computer solved it ..... You should add the header to theconfig` object. What you did is add them to the global axios object, so they will only be used on the next request.. ",
    "conquest19": "Does anyone have an code example on how to do re-directs in axios? I'm new to axios.\n. ",
    "dublx": "Hi,\nI really like Axios, but unfortunately with the follow-redirects replacement for http/https there is no way to actually NOT follow redirect.\nI looked at follow-redirects, they have an option called maxRedirects that is a Integer that defaults to 5.\nUnfortunately I tried to make my fork of Axios to pass that option to follow-redirects but they don't actually support doing no redirections. I know it's a bit awkward they would, given the purpose of their module but if they claim to be a drop-in replacement for http/https then Axios could possibly take this maxRedirects option. If value is 0 then use the core http/https modules rather than follow-redirects. \nDoes this sound reasonable? \nOr if there is a simpler way to have Axios not follow a redirect please let me know!\nThanks!\n. Hi, I'm not too experienced with PR's.. do I update README and then submit new one?\nAnyway, reason I change max code was because then the promise would be rejected.\nI will change it then:  check if maxRedirects === 0, the idea being that there should be no redirects, but also no promise rejection. Agree?\n. ",
    "anthonydaga": "Any resolution to this?. ",
    "shllg": "Any updates? Still follows redirects even with \"maxRedirects=0\". ",
    "Schnueggel": "Saw its in the master already\n. ",
    "dmatteo": "Sorry I haven't had the chance to try and debug this, but if you think this may work I'm happy to try it once released \n. ",
    "jetien": "Hi, so why write it in the doc ? \n. Hi, so why write it in the doc ? \n. ",
    "dnutels": "Hi.\nI must be misunderstanding something - this still is the case as of 0.7.0, why would you close the issue?\n. Hi.\nI must be misunderstanding something - this still is the case as of 0.7.0, why would you close the issue?\n. ",
    "DIMPLY": "Also every branch shows \"build:error\".\nWhat do these mean?\n. @mzabriskie I did as you told me but I can only GET, I can't POST:\njavascript\n{\n  \"url\": \"http://xxx.xxx.xxx/sendMail\",\n  \"data\": {\n    \"content\": \"from ex-server\",\n    \"title\": \"okokok\",\n    \"from\": \"abc@128.com\"\n  },\n  \"method\": \"POST\",\n  \"headers\": null\n}\nNothing happens when I POST like this. No record in Chrome Developer Tools, no error or warning in console, nor did the server receive any post request.\n. @mzabriskie Here in this issue, I made the request from webpage client.html without writing my own code.\n. I did as you told me and now I can get \"POST data received\" on the server part.\nBut this time the querying address is the same with the browser address.\nWhat should I do if I want to post to an outer address such as \"http://google.com\"?\n. I have test through it using title=example&content=abccc&from=axios@a.com instead of JSON format. And I also added a request header according to my server's CORS settings.\nSorry for bothering before enough trials.\n. ",
    "JuoCode": "export function fetchProjects () {\n  return dispatch => {\n    return API.get('http://example.com/projects')\n      .then(response => {\n        dispatch({ type: PROJECTS_RECEIVED, payload: response.data });\n      });\n  };\n}\n. Get it! #160 is necessary\n. ",
    "johan-gorter": "Typescript has adopted the commonjs/es2015 style of making modules. They have dropped the 'ambient module' way of declaring a module. Having a \"typescript\":{\"defintion\":\"\"} entry in the package.json has never been an official standard as far as I know.\nFor more information about typings see the official wiki: https://github.com/Microsoft/TypeScript/wiki/Typings-for-npm-packages\nFor a more in-depth discussion about typings see: https://medium.com/@mweststrate/how-to-create-strongly-typed-npm-modules-1e1bda23a7f4\nIf you want to see a demonstration about how to create a typescript project using my suggested method, just drop me a line.\n. ",
    "xogeny": "@johan-gorter is right. My previous attempt with #155 was never standard.  This way is the way to do this and having it allows TypeScript users to seamlessly incorporate axios.\n:+1: \n. @johan-gorter is right. My previous attempt with #155 was never standard.  This way is the way to do this and having it allows TypeScript users to seamlessly incorporate axios.\n:+1: \n. ",
    "incubus8": "any update on this?\nI think this is very important. The scenario maybe when we implement Axios for mobile web, then the user switch the internet source from WiFi to any kind of mobile connection. \n. ",
    "hyzhak": "@jtangelder @mzabriskie thanks! actually it is great example for documentation too\n. ",
    "AlahmadiQ8": "The example in @jtangelder  should be included in the cookbook page\n. The example in @jtangelder  should be included in the cookbook page\n. // Add a response interceptor\naxios.interceptors.response.use(function (response) {\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Do something with response error\n    console.log(error.response);\n    return Promise.reject(error);\n  });\nhope that helps \n. // Add a response interceptor\naxios.interceptors.response.use(function (response) {\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Do something with response error\n    console.log(error.response);\n    return Promise.reject(error);\n  });\nhope that helps \n. ",
    "chuckhacker": "I agree. This should really be a part of the library, or at least better-documented.. I agree. This should really be a part of the library, or at least better-documented.. ",
    "KyleRoss": "@mericsson I am too in need of exponential backoff when retrying. I've put together the following which works great. You my want to add in checking for specific errors/status codes as this currently just intercepts and retries all errors.\n```js\naxios.interceptors.response.use(undefined, function axiosRetryInterceptor(err) {\n    var config = err.config;\n    // If config does not exist or the retry option is not set, reject\n    if(!config || !config.retry) return Promise.reject(err);\n// Set the variable for keeping track of the retry count\nconfig.__retryCount = config.__retryCount || 0;\n\n// Check if we've maxed out the total number of retries\nif(config.__retryCount >= config.retry) {\n    // Reject with the error\n    return Promise.reject(err);\n}\n\n// Increase the retry count\nconfig.__retryCount += 1;\n\n// Create new promise to handle exponential backoff\nvar backoff = new Promise(function(resolve) {\n    setTimeout(function() {\n        resolve();\n    }, config.retryDelay || 1);\n});\n\n// Return the promise in which recalls axios to retry the request\nreturn backoff.then(function() {\n    return axios(config);\n});\n\n});\n```\nTo use:\njs\naxios.get('/some/endpoint', { retry: 5, retryDelay: 1000 })\n    .then(function(res) {\n        console.log('success', res.data);\n    })\n    .catch(function(err) {\n        console.log('failed', err);\n    });\nConfig Options:\nretry - Number of times to retry the request after first failed request.\nretryDelay - Number of milliseconds to wait in between failed requests (defaults to 1).\nI may make this a bit more configurable in a gist at some point.. @mericsson I am too in need of exponential backoff when retrying. I've put together the following which works great. You my want to add in checking for specific errors/status codes as this currently just intercepts and retries all errors.\n```js\naxios.interceptors.response.use(undefined, function axiosRetryInterceptor(err) {\n    var config = err.config;\n    // If config does not exist or the retry option is not set, reject\n    if(!config || !config.retry) return Promise.reject(err);\n// Set the variable for keeping track of the retry count\nconfig.__retryCount = config.__retryCount || 0;\n\n// Check if we've maxed out the total number of retries\nif(config.__retryCount >= config.retry) {\n    // Reject with the error\n    return Promise.reject(err);\n}\n\n// Increase the retry count\nconfig.__retryCount += 1;\n\n// Create new promise to handle exponential backoff\nvar backoff = new Promise(function(resolve) {\n    setTimeout(function() {\n        resolve();\n    }, config.retryDelay || 1);\n});\n\n// Return the promise in which recalls axios to retry the request\nreturn backoff.then(function() {\n    return axios(config);\n});\n\n});\n```\nTo use:\njs\naxios.get('/some/endpoint', { retry: 5, retryDelay: 1000 })\n    .then(function(res) {\n        console.log('success', res.data);\n    })\n    .catch(function(err) {\n        console.log('failed', err);\n    });\nConfig Options:\nretry - Number of times to retry the request after first failed request.\nretryDelay - Number of milliseconds to wait in between failed requests (defaults to 1).\nI may make this a bit more configurable in a gist at some point.. @lawloretienne you need you make sure you add the code in my example prior to using any of the retry parameters. Since it acts more like a plugin, the new properties are not documented as part of axios itself. . @lawloretienne you need you make sure you add the code in my example prior to using any of the retry parameters. Since it acts more like a plugin, the new properties are not documented as part of axios itself. . ",
    "akhayoon": "@KyleRoss Thanks for the code, I made an adjustment for the retries to be exponential\n```\n// Create new promise to handle exponential backoff. formula (2^c - 1 / 2) * 1000(for mS to seconds)\n    const backOffDelay = config.retryDelay \n        ? ( (1/2) * (Math.pow(2, config.__retryCount) - 1) ) * 1000\n        : 1;\nconst backoff = new Promise((resolve) => {\n    setTimeout(() => {\n        resolve();\n    },  backOffDelay);\n});\n\n```. ",
    "mkhahani": "@KyleRoss Thanks for sharing.\nThe delay can be set increasingly:\nconst RETRY_TIMEOUTS = [1, 3, 5, 10]; // seconds\nconst delay = RETRY_TIMEOUTS[config.retryCount] * 1000;. ",
    "moffsugita": "axios-retry vs retry-axios. ",
    "lawloretienne": "@KyleRoss I tried adding the retry and retryDelay configuration options to AxiosRequestConfig but it doesnt look like they exist.  How did you get that to work?. ",
    "mhelvens": "OK, thanks!\nYour example code does have invalid syntax on line 10-12. I think I know what you meant to do there, but could you correct the code for the record?\n. May I ask how this issue was resolved? Even with axios@0.19.0-beta.1 I am unable to do axios.create().create().. ",
    "samtheson": "Many thanks for this addition @idan. What would it take for Axios, given a url like https://jane:doe@example.com, to pick out the auth info and add it to the config automatically? :boom: . I see, thanks. Probably not the best place to ask this, I was going to ask if there's a way to not have the callback called once all the promises are complete - but for the callback to be called for each of them that  completes. Will ask on S/O since maybe that's more to do with promises in general than axios, but would make a great addition to the docs I think (for concurrent requests with progress). Currently trying at a solution with bluebird's .reflect\n. ",
    "sashashakun": "First timer here! Is it correct that i should remove extra colon in http basic authentication implementation?\n. Thanks. Start right now.\n. ",
    "aukevanleeuwen": "Sorry I was doing something else, but had this fix commited on my fork already before I saw your comment. Not sure what you prefer, but you seemed to have the check already in place so I just thought I'd use it. \n. ",
    "solepano": "Hi, I'm using axios within a react + redux app and I'm getting same error when a request that expects a JSON result fails with a 400 error:\nDOMException: Failed to read the 'responseText' property from 'XMLHttpRequest': The value is only accessible if the object's 'responseType' is '' or 'text' (was 'json').\nIs the issue re-opened?\n. ",
    "GerryFudd": "I just encountered the same problem.\n(Edit: I redact my request to reopen this.  I was seeing an error from another package that was reported in such a way that it looked like there was an issue with the way axios was handling api responses.). ",
    "ihorml": "If you use redux-axios-middleware  just take a look at this issue. ",
    "qtttttttttting": "I encounter similar problem @0.16.2.\najaxInject.js:1 Uncaught DOMException: Failed to read the 'responseText' property from 'XMLHttpRequest': The value is only accessible if the object's 'responseType' is '' or 'text' (was 'blob').\nThank you for your help~. ",
    "rkmax": "@mzabriskie this bug was fixed on the 0.9.1 version? because I'm experiencing it\nI have a small module\n``` js\nimport axios from 'axios'\nexport default () => {\n  // API = http://api.service.com\n  return axios.create({baseUrl: API})\n}\n```\nlater when I use I got a wrong baseUrl\njs\nimport client from '/rest-module'\n// request is made to http://localhost:3000/relative/path\nclient().post('relative/path')\n. never mind! I realize I'm using the wrong property baseUrl instead baseURL\n. ",
    "batusai513": "@nathanharper were you able to intercept axios requests with nock?\n. @chibicode to bad, i use axios because the request and response interceptors, it would be cool to be able to use nock with this library\n. @nathanharper yeah, i tried with v 0.10 and the test still hit the endpoint :/\n. @nathanharper can you show me some gist of how you are implementing nock with axios, thanks.\n. @chibicode yeah, this is probably what is happening, have you been able to fix this?\n. ",
    "chibicode": "@batusai513 I'm stuck trying to intercept axios requests with nock. This:\njs\nnock(...)\n  .log(console.log)\nalways says it didn't match. I swapped axios w/ isomorphic-fetch and it starts matching...\n. @batusai513 could be an issue w/ this (nock's matching against OPTIONS instead of POST)\nhttps://github.com/mzabriskie/axios/issues/225\n. I wrote this on https://github.com/mzabriskie/axios/issues/175 but are you failing on a POST request from axios? I'm getting mismatch on nock because nock seems to be attempting to match OPTIONS method. https://github.com/mzabriskie/axios/issues/225\nI'm using axios 0.10.0 and nock 8.0.0.\nHere's my nock interception code:\njs\nnock('http://localhost:5000')\n  .post(`/path`, data)\n  .log(console.log)\n  .reply(200, { id: 1 })\nMy axios initialization:\n``` js\nimport axios from 'axios'\nconst instance = axios.create({\n  baseURL: (process.env.NODE_ENV === 'production') ? 'https://foo.com/' : 'http://localhost:5000/',\n  headers: {\n    ...\n  }\n})\nexport default instance\n```\nCalling axios:\njs\naxios.post('/path', {})\nThen I get Network Error on the test. log(console.log) on nock outputs this:\nmatching http://localhost:5000 to POST http://localhost:5000/foo: false\nWhen I run it with DEBUG=nock.* I get this:\nhttps://gist.github.com/chibicode/39a17e2e7aa46899865b8b10379b26f4\nI'm seeing a bunch of OPTIONS requests, maybe nock isn't correctly matching against it?\n. ",
    "yasharma": "javascript\nimport axios from 'axios'\nwindow.axios.defaults.headers.common = {'X-Requested-With': 'XMLHttpRequest'}\nwindow.axios.defaults.baseURL = (process.env.NODE_ENV !== 'production') ? 'http://localhost:9000/api/' : ''\nThis is also working, you can also do like this, i also want to know that is it correct way to do??. ",
    "xingx-xx": "@monday1994 Did you solved it yet? I met the same problem, an extra \"http:\" inserted in my url.... ",
    "Femina": "How can we use this with CORS ?. How can we use this with CORS ?. ",
    "juanr2001": "Too late, but the way you can set only the root URL to baseURL like this\nvar url = ''\n  if (process.env.NODE_ENV === 'development') {\n    url = 'your domain' // you must hardcode it somewhere. In production you don't.\n  }\n  {\n...\n  baseURL: url + '/' // in production the url variable will be set to the root url of your domain. '/' forces        the basedURL to only use the root url with NO endpoints.\n}. Yea, I am not sure if this could relate this current bug. But it happens on my end, I still don't understand why cancel request happens.\nWhen the API triggers on .doc ready, this happens (look at images):\n\n\n. \nI am experiencing the same guys. I would love to know how to fix this... Help!\nIt stops here, when it hit the loadend\n\n. Found the solution guys! @AoDev \nAxios documentation has a timeout of 1000 like:\naxios.create({\n  ...,\n  timeout: 1000,\n  ...\n})\nI increased the timeout to 5000. I think Axios documentation needs to be updated to change the timeout to a higher number to prevent newcomers to go crazy trying to figure out what's going on.\nI hope this solutions helps!\n. ",
    "lauri108": "\nHow can we use this with CORS ?\n\n@Femina if you've got the Authorization: Bearer header in your API requests, you need to add the Access-Control-Allow headers into your API. For example, Node.js and Express it's like this:\n\napp.use((req, res, next) => {\n  res.header(\"Access-Control-Allow-Origin\", \"*\")\n  res.header(\"Access-Control-Allow-Headers\", \"Authorization, Origin, X-Requested-With, Content-Type, Accept\")\n  res.header(\"Access-Control-Allow-Methods\", \"GET,POST\")\n  next()\n}) \n\nin the application's entry file.\n. ",
    "Klaasvaak": "IE 10: \n. IE 10: \n. You can download any IE version in a VM for free here: https://dev.windows.com/en-us/microsoft-edge/tools/vms/\n. You can download any IE version in a VM for free here: https://dev.windows.com/en-us/microsoft-edge/tools/vms/\n. duplicate of https://github.com/mzabriskie/axios/pull/334?\n. duplicate of https://github.com/mzabriskie/axios/pull/334?\n. Did you add the Self-signed SSL certificate to the browser? In Chrome you can add it in chrome://settings/ at the option HTTPS/SSL.\nWhen a certificate is not valid the browser will make sure the requests errors. Axios can not change this, and you shouldn't want that either.\nMake sure you have a valid certificate when running in production.. Did you add the Self-signed SSL certificate to the browser? In Chrome you can add it in chrome://settings/ at the option HTTPS/SSL.\nWhen a certificate is not valid the browser will make sure the requests errors. Axios can not change this, and you shouldn't want that either.\nMake sure you have a valid certificate when running in production.. You can use an interceptor. See: https://github.com/mzabriskie/axios#interceptors. You can use an interceptor. See: https://github.com/mzabriskie/axios#interceptors. A request interceptor executes before a request is made.. A request interceptor executes before a request is made.. Can you proider the error you are getting in the console? \nAlso are you sure it's not the default browser error logging?. Can you proider the error you are getting in the console? \nAlso are you sure it's not the default browser error logging?. I still think it's a browser logging. See for example:\nhttp://babeljs.io/repl/#?babili=false&evaluate=true&lineWrap=false&presets=latest%2Creact%2Cstage-2&experimental=false&loose=false&spec=false&code=fetch('test')%0A%20%20.catch(()%20%3D%3E%20null)%3B&playground=true\nWhen you open the console on this page you also see an error.. I still think it's a browser logging. See for example:\nhttp://babeljs.io/repl/#?babili=false&evaluate=true&lineWrap=false&presets=latest%2Creact%2Cstage-2&experimental=false&loose=false&spec=false&code=fetch('test')%0A%20%20.catch(()%20%3D%3E%20null)%3B&playground=true\nWhen you open the console on this page you also see an error.. Does request.headers['Content-Type'] = 'application/json; charset=utf-8'; work?. Does request.headers['Content-Type'] = 'application/json; charset=utf-8'; work?. ",
    "anthw": "I've implemented a possible fix here:  https://github.com/anthwinter/axios/commits/master\nBut don't have access to any IE versions to test.\n. ",
    "djyde": "Is there a plan to rewrite some code in ES6(class Axios (), e.g.)?\n. Have a try to set \"allowSyntheticDefaultImports\": true in tsconfig.json\n. You are welcome :)\n. I'd been waiting generic type for several months... Any progression?. ",
    "TheLarkInn": "Just stumbled across this, @mzabriskie were you hoping to also publish the loose es6 as well via the \"modules\" field in package.json? webpack users can benefit from this as it can \"natively\" read and understand the esm harmony import statements.. ",
    "RikkiGibson": "It would be great to make this happen as it could help with tree shaking in webpack (if I'm understanding the mechanics of it properly). I'd be happy to help in any way possible.. Re: the original problem-- try using the HTTP HEAD method if only the response headers are desired.\nI feel that the most useful behavior is for cancellation to close the response stream implicitly, closing the underlying connection if necessary. \n\nYes, I think you should just close the stream. If axios closes the stream when cancellation is requested before you have read the complete response, how will you know that it's incomplete?\n\nThis kind of ambiguity is handled by emitting an error event in the stream-- just as a cancel before the Promise.resolve for the response results in a Promise.reject.. Any timeline for when this will be published?. What remains is to publish it :). What remains is to publish it :). the IE 9 build broke--seems like 10 and 11 are fine. However it seems worth noting that Microsoft has ended support for IE versions before 11 over 2 years ago. Would it be reasonable to drop IE 9, bump to 0.19, and note the change in the CHANGELOG?\n. the IE 9 build broke--seems like 10 and 11 are fine. However it seems worth noting that Microsoft has ended support for IE versions before 11 over 2 years ago. Would it be reasonable to drop IE 9, bump to 0.19, and note the change in the CHANGELOG?\n. I would be happy to help in any way possible. I imagine it's not too hard to jump in and figure out what needs to change based on what you describe :). I would be happy to help in any way possible. I imagine it's not too hard to jump in and figure out what needs to change based on what you describe :). Let's talk about this in #1656.. Let's talk about this in #1656.. I'm experiencing this issue as well. Is anyone working on this? Would a PR that does something like uppercase the HTTP method before passing it to follow-redirects be accepted?. I'm experiencing this issue as well. Is anyone working on this? Would a PR that does something like uppercase the HTTP method before passing it to follow-redirects be accepted?. @Khaledgarbaya @axe312ger @emilyemorehouse  This is still a problem requiring a fairly strange workaround that is actually now broken with the new type definitions.\nWould be very happy to open the PR to just uppercase the HTTP method before passing it off to follow-redirects. Just wanted to check again: is that something you guys would accept? :). @Khaledgarbaya @axe312ger @emilyemorehouse  This is still a problem requiring a fairly strange workaround that is actually now broken with the new type definitions.\nWould be very happy to open the PR to just uppercase the HTTP method before passing it off to follow-redirects. Just wanted to check again: is that something you guys would accept? :). Looks like the noting maxContentLength being in bytes is in the README now, which is good: \nhttps://github.com/axios/axios/pull/1463\nIt might be useful to indicate what the default for maxContentLength is. But it seems like it might just be inherited from follow-redirects... Looks like the noting maxContentLength being in bytes is in the README now, which is good: \nhttps://github.com/axios/axios/pull/1463\nIt might be useful to indicate what the default for maxContentLength is. But it seems like it might just be inherited from follow-redirects... You can also just pass null for the body and the Content-Type will be preserved. There might be some interceptor you can install to automatically add a null body if none is present and get around the issue, but I haven't tried it.\nBeing unable to POST over CORS seems like a meaningful limitation, so I think it's too bad that it happens to work this way.. You can also just pass null for the body and the Content-Type will be preserved. There might be some interceptor you can install to automatically add a null body if none is present and get around the issue, but I haven't tried it.\nBeing unable to POST over CORS seems like a meaningful limitation, so I think it's too bad that it happens to work this way.. Pasting in my comment from an unrelated PR:\n\nthe IE 9 build broke--seems like 10 and 11 are fine. However it seems worth noting that Microsoft has ended support for IE versions before 11 over 2 years ago. Would it be reasonable to drop IE 9, bump to 0.19, and note the change in the CHANGELOG?\n\nIt seems reasonable enough to ask those who target old, unsupported versions of IE to use old versions of axios.. Pasting in my comment from an unrelated PR:\n\nthe IE 9 build broke--seems like 10 and 11 are fine. However it seems worth noting that Microsoft has ended support for IE versions before 11 over 2 years ago. Would it be reasonable to drop IE 9, bump to 0.19, and note the change in the CHANGELOG?\n\nIt seems reasonable enough to ask those who target old, unsupported versions of IE to use old versions of axios.. Is there consensus here or anyone in a position to make a call on this one way or the other? I would be happy to do whatever I can to help bring this project back in a state where it's fit for publishing--whether that is removing IE 9 or booting up a VM with IE 9 on it to triage and fix the IE 9 issues.\nI think my PR takes care of the IE8/9 workarounds for the published code, and there's just a few things in test code that could go away.\nAt the moment I'm in a position where in order to make use of some recent axios improvements I'd be forced to depend on a GitHub reference or publish a forked version, and I'd like to avoid those options if possible.. Is there consensus here or anyone in a position to make a call on this one way or the other? I would be happy to do whatever I can to help bring this project back in a state where it's fit for publishing--whether that is removing IE 9 or booting up a VM with IE 9 on it to triage and fix the IE 9 issues.\nI think my PR takes care of the IE8/9 workarounds for the published code, and there's just a few things in test code that could go away.\nAt the moment I'm in a position where in order to make use of some recent axios improvements I'd be forced to depend on a GitHub reference or publish a forked version, and I'd like to avoid those options if possible.. I'll make one more pass over the PR to remove any other old IE stuff--I'll consider IE 10 fair game to remove--and then ping you for feedback.. I'll make one more pass over the PR to remove any other old IE stuff--I'll consider IE 10 fair game to remove--and then ping you for feedback.. Very strange-- it looks like Edge and Safari support were broken after merging #1689. But I'm sure I had at least the Safari tests passing locally.\nPart of the difficulty is I have no idea how to interpret the output I'm seeing on Sauce Labs. Nothing related to the actual Karma output appears to be visible. Anyone more experienced able to comment? @zcei @axe312ger . Thanks for the information and please let me know if there\u2019s any way I can assist :). Thanks for the information and please let me know if there\u2019s any way I can assist :). Thank you so much!!. Thank you so much!!. https://github.com/azure/autorest.typescript uses axios under the hood when running in nodejs and adapts XMLHttpRequest directly when built for the browser to minimize the size. However AutoRest is limited to Swagger 2.0 as far as I know.\nI think swagger-codegen works with Swagger 3.0 and they have an isomorphic typescript-fetch generator. Maybe that would work for you?. https://github.com/azure/autorest.typescript uses axios under the hood when running in nodejs and adapts XMLHttpRequest directly when built for the browser to minimize the size. However AutoRest is limited to Swagger 2.0 as far as I know.\nI think swagger-codegen works with Swagger 3.0 and they have an isomorphic typescript-fetch generator. Maybe that would work for you?. OK, I believe I've removed all IE 9 and IE 10 workarounds, and the bundle size is now 13.2 KB. Please have a look at your convenience @zcei @axe312ger @Khaledgarbaya.\nI was able to verify that the Karma tests all pass in IE 11 on my PC, and that they pass in Safari, Firefox and Chrome on my Mac.\nNote that the msie special case in isURLSameOrigin.js:24 is still needed.. OK, I believe I've removed all IE 9 and IE 10 workarounds, and the bundle size is now 13.2 KB. Please have a look at your convenience @zcei @axe312ger @Khaledgarbaya.\nI was able to verify that the Karma tests all pass in IE 11 on my PC, and that they pass in Safari, Firefox and Chrome on my Mac.\nNote that the msie special case in isURLSameOrigin.js:24 is still needed.. Can you share a page or script which reproduces the problem?. Can you share a page or script which reproduces the problem?. Seems Edge doesn't automatically parse JSON either--are you able to validate that this PR fixes that too?\nThe only thing that seems off to me about this is that strings are valid JSON values. So if the JSON value you got back was just a string this might try to double parse it and cause problems.\n```js\n\nJSON.parse('\"foo\"')\n< \"foo\"\nJSON.parse(JSON.parse('\"foo\"'))\n< SyntaxError: JSON Parse error: Unexpected identifier \"foo\"\n```. Seems Edge doesn't automatically parse JSON either--are you able to validate that this PR fixes that too?\n\nThe only thing that seems off to me about this is that strings are valid JSON values. So if the JSON value you got back was just a string this might try to double parse it and cause problems.\n```js\n\nJSON.parse('\"foo\"')\n< \"foo\"\nJSON.parse(JSON.parse('\"foo\"'))\n< SyntaxError: JSON Parse error: Unexpected identifier \"foo\"\n```. Yeah, thinking on it a bit, it seems very, very niche for any ill effects to result from this.\n\nSpecifically, you'd need a response body which is decodable as a JSON string, which is itself decodable as JSON:\n```js\n\nvar weird = '\"{\\\"name\\\": \\\"strange\\\"}\"';\nJSON.parse(JSON.parse(weird))\n< {name: \"strange\"}\n```\n\nAnyone who somehow encounters this can just set responseType: text and be in full control of it anyway.. Yeah, thinking on it a bit, it seems very, very niche for any ill effects to result from this.\nSpecifically, you'd need a response body which is decodable as a JSON string, which is itself decodable as JSON:\n```js\n\nvar weird = '\"{\\\"name\\\": \\\"strange\\\"}\"';\nJSON.parse(JSON.parse(weird))\n< {name: \"strange\"}\n```\n\nAnyone who somehow encounters this can just set responseType: text and be in full control of it anyway.. Since ProgressEvent requires \u201clib\u201d: [\u201cdom\u201d] to be specified in tsconfig, users who compile against these type definitions but aren\u2019t targeting the web would get build errors.\nTypescript 3 added the /// <reference lib=\u201c...\u201d /> directive so maybe this can be updated eventually.. Other libraries solve this by copying the relevant interfaces of lib.dom.ts into their own libraries to provide some helpful type definitions while still preventing errors for non-web users. I\u2019m not 100% sure whether that approach or the aforementioned reference lib directive is preferred now with typescript 3.. Other libraries solve this by copying the relevant interfaces of lib.dom.ts into their own libraries to provide some helpful type definitions while still preventing errors for non-web users. I\u2019m not 100% sure whether that approach or the aforementioned reference lib directive is preferred now with typescript 3.. It looks like request.setTimeout sets a read timeout handler on the underlying socket. It's not the same thing as a request timeout.\nIs the issue is that aborting a request before the connection is established doesn't properly dispose of the socket?. It looks like request.setTimeout sets a read timeout handler on the underlying socket. It's not the same thing as a request timeout.\nIs the issue is that aborting a request before the connection is established doesn't properly dispose of the socket?. The request timeout applies to receiving the entire HTTP response.\nThe socket timeout, set by request.setTimeout, applies to any activity on the socket (individual reads and writes). The browser doesn't provide any way to set this.\nI said \"read timeout\" previously because a lot of languages will let you configure read and write timeouts separately, while node appear to combine them into one. Sorry for any confusion.\nLet's use the setTimeout function like before so that we don't change the meaning of the timeout property. In the timeout handler, we can do something like the following:\njs\nif (request.socket.connecting) {\n  request.socket.on('connect', function() {\n    request.abort();\n  }\n} else {\n  request.abort();\n}\nDoes that seem reasonable?. So response.data comes back as a string of the chunked-encoded data? That's really weird.. So response.data comes back as a string of the chunked-encoded data? That's really weird.. I just played with one of the axios unit tests to explore this and found that:\n- The test passed with Transfer-Encoding: chunked\n- The test showed the same bad behavior as in @DaveStein's description with  Transfer-Encoding: chunked, chunked\nI think this is an issue with the underlying transport (i.e. the nodejs built-in http module). I just played with one of the axios unit tests to explore this and found that:\n- The test passed with Transfer-Encoding: chunked\n- The test showed the same bad behavior as in @DaveStein's description with  Transfer-Encoding: chunked, chunked\nI think this is an issue with the underlying transport (i.e. the nodejs built-in http module). Does cross site mean something different than cross origin?. Does cross site mean something different than cross origin?. Does cross site mean something different than cross origin?. It would be great if you could provide a jsfiddle or something that reproduces the issue.. It would be great if you could provide a jsfiddle or something that reproduces the issue.. It would be great if you could provide a jsfiddle or something that reproduces the issue.. That might help, but the most actionable bug report is gonna be something where you've figured out an example that's independent of your project which illustrates the bad behavior in axios.\nI created this fiddle which seems to show a cross-origin POST with the data being sent properly. httpbin just echoes the request body back. Maybe you can compare the conditions in this code to what you've got to try and narrow down what causes the bug.\nhttps://jsfiddle.net/n2eoa3ct/11/. That might help, but the most actionable bug report is gonna be something where you've figured out an example that's independent of your project which illustrates the bad behavior in axios.\nI created this fiddle which seems to show a cross-origin POST with the data being sent properly. httpbin just echoes the request body back. Maybe you can compare the conditions in this code to what you've got to try and narrow down what causes the bug.\nhttps://jsfiddle.net/n2eoa3ct/11/. That might help, but the most actionable bug report is gonna be something where you've figured out an example that's independent of your project which illustrates the bad behavior in axios.\nI created this fiddle which seems to show a cross-origin POST with the data being sent properly. httpbin just echoes the request body back. Maybe you can compare the conditions in this code to what you've got to try and narrow down what causes the bug.\nhttps://jsfiddle.net/n2eoa3ct/11/. Are you passing withCredentials: true in the request config?. I believe this is a limitation of browsers themselves that can\u2019t be configured in a client side library.\nThe solution is probably to modify the server to handle OPTIONS requests without requiring authentication. https://stackoverflow.com/questions/15734031/why-does-the-preflight-options-request-of-an-authenticated-cors-request-work-in. Yep, you will need to modify the server to pass the response headers:\nAccess-Control-Allow-Origin: myhost\nAccess-Control-Allow-Credentials: true\nIt might be possible to get the server to pass back an Allow-Origin that basically echoes the origin that sent the request. Not sure, and also not sure if that's a secure practice. Note that Allow-Credentials will not work with Allow-Origin: *.\nYou'll also need to change your client code to include the option withCredentials: true.. Yep, you will need to modify the server to pass the response headers:\nAccess-Control-Allow-Origin: myhost\nAccess-Control-Allow-Credentials: true\nIt might be possible to get the server to pass back an Allow-Origin that basically echoes the origin that sent the request. Not sure, and also not sure if that's a secure practice. Note that Allow-Credentials will not work with Allow-Origin: *.\nYou'll also need to change your client code to include the option withCredentials: true.. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\ndocs indicate this is a forbidden header, i.e. client libraries like axios can't set it directly. It's unlikely that this issue can be solved by making changes to axios.\nhttps://stackoverflow.com/questions/20784209/internet-explorer-11-does-not-add-the-origin-header-on-a-cors-request\nLooks like IE considers a request to a different port on the same host to be \"same origin\" when the spec considers it to be cross-origin. Maybe that's related to the problem?. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\ndocs indicate this is a forbidden header, i.e. client libraries like axios can't set it directly. It's unlikely that this issue can be solved by making changes to axios.\nhttps://stackoverflow.com/questions/20784209/internet-explorer-11-does-not-add-the-origin-header-on-a-cors-request\nLooks like IE considers a request to a different port on the same host to be \"same origin\" when the spec considers it to be cross-origin. Maybe that's related to the problem?. I wrote an adapter for axios to provide uniform behavior for these handlers among other things. You may benefit from seeing the code for it:\nhttps://github.com/Azure/ms-rest-js/blob/3c131b37/lib/axiosHttpClient.ts#L103\nBTW, your code may work better with fs.createReadStream as you won't have to wait for the file to be completely read before starting to upload it.. I wrote an adapter for axios to provide uniform behavior for these handlers among other things. You may benefit from seeing the code for it:\nhttps://github.com/Azure/ms-rest-js/blob/3c131b37/lib/axiosHttpClient.ts#L103\nBTW, your code may work better with fs.createReadStream as you won't have to wait for the file to be completely read before starting to upload it.. That's right. It's not perfectly accurate, but convenient to implement. I think the discrepancy between the amount of file content read and the amount of content received so far by the server will be at most the socket.highWaterMark (defaults to 16 KB).\nIn case you find it interesting, node.js has built in backpressure mechanisms to prevent the system from running out of memory e.g. when the disk is faster than the network on a large upload, or the network is faster than the disk on a large download.. That's right. It's not perfectly accurate, but convenient to implement. I think the discrepancy between the amount of file content read and the amount of content received so far by the server will be at most the socket.highWaterMark (defaults to 16 KB).\nIn case you find it interesting, node.js has built in backpressure mechanisms to prevent the system from running out of memory e.g. when the disk is faster than the network on a large upload, or the network is faster than the disk on a large download.. It doesn't look like that DEFAULT_CONTENT_TYPE gets applied to DELETE requests.\nIt would be useful to know if this line of code gets hit in the debugger\nhttps://github.com/axios/axios/blob/b4c5d35d2875191dfa8c3919d4227dce8e2ad23f/lib/defaults.js#L52. It doesn't look like that DEFAULT_CONTENT_TYPE gets applied to DELETE requests.\nIt would be useful to know if this line of code gets hit in the debugger\nhttps://github.com/axios/axios/blob/b4c5d35d2875191dfa8c3919d4227dce8e2ad23f/lib/defaults.js#L52. Please let us know the minified size difference of this change. Please let us know the minified size difference of this change. This usually means you're downloading with a chunked encoding. The server isn't telling you the content length up front so you'll have to figure it out somehow.. This usually means you're downloading with a chunked encoding. The server isn't telling you the content length up front so you'll have to figure it out somehow.. edit: Actually I\u2019m not aware of a way to specify that you don\u2019t want a chunked encoding in the browser. Maybe the server can be configured differently or maybe you can use some kind of heuristic to determine a size or approximate size.. edit: Actually I\u2019m not aware of a way to specify that you don\u2019t want a chunked encoding in the browser. Maybe the server can be configured differently or maybe you can use some kind of heuristic to determine a size or approximate size.. consider val != null here if the goal is to be equivalent to val !== null && val !== undefined. also consider checking typeof Buffer !== \"undefined\" so that we don't get strict mode errors related to the Buffer variable not being defined (browser tests should catch this?). ",
    "ChristianMurphy": "The babel team wrote a blog post on their recommended approach https://babeljs.io/blog/2018/06/26/on-consuming-and-publishing-es2015+-packages. The babel team wrote a blog post on their recommended approach https://babeljs.io/blog/2018/06/26/on-consuming-and-publishing-es2015+-packages. ",
    "ardalanamini": "@mzabriskie @nickuraltsev I'd be happy to help with the rewriting in es6 or even typescript. ",
    "cjcenizal": "Great job fixing this! I was just wrestling with the problems this solves, e.g. headers set via an interceptor inadvertently being cached by the defaultConfig.headers object. Thank you! :+1: \n. Great job fixing this! I was just wrestling with the problems this solves, e.g. headers set via an interceptor inadvertently being cached by the defaultConfig.headers object. Thank you! :+1: \n. ",
    "AykutCevik": "http://enable-cors.org/server_nginx.html\n. ",
    "kcjonson": "Example use case would be when the class doing the get/post doesn't actually know what the full baseUrl is, but does know what port the request needs to happen on.\naxios.get('/api/items', {port: 9091}).then(...\nIn my case I'd rather not hardcode or rely on a global for where the server actually is, particularly for the switch for dev/prod and just rely on the browsers mechanism to resolve it to the same domain.\n. ",
    "OliverUv": "I would also like this feature. Usecase is the same as that of @kcjonson \nI have other services running on the same host, on weird ports, but I don't necessarily know which host I'm currently on. Can work around it by grabbing this from configs that differ on dev/host environments, but being able to use the standard '/location' uri scheme along with port specification would be nice.\n. ",
    "jousby": "+1 similar usecase.\nWe have a continuous delivery pipeline for deploying to AWS. I'm serving my static content (the webpack'd reactjs app) from apache on port 80 and the api to drive it from a scala http4s server on port 3000. Server is the same but port is different. At the moment I have to wait until the EC2 instance is stood up and then replace the name of the Api Server in the reactjs app as part of the deployment step. \n. ",
    "usergit": "I second this, it would be useful to specify a port as one of the config options\n. to add to @FourStacks answer, you can use the Destructuring assignment and do \nPromise.all([ getUsers(), getSessions() ])\n    .then(([users, sessions]) =>  console.log(users, sessions))\n    .catch(error => // do whatever);\n. ",
    "liorsaar1": "+1.\nUse case:  the target url has 3 services running on it, at 80, 8000 and 9000. So the url is composed of:\nhost + port + endpoint + args\nIt would be great to specify those like in the original 'http'.\n. Looking for something that looks like node's http:\nhttp.get({\n  hostname: 'localhost',\n  port: 80,\n  path: '/',\n}, (res) => {\n  // Do stuff with response\n})\nSince all my api calls are:  host, port, path, args. \n. ",
    "benwiley4000": "@mzabriskie I think 1 and 2 should be implemented, both 3 and 4 ignored. It's absolutely expected behavior that the port should be 80 if not specified in the URL.\nI think @rubennorte slightly misses the point with the suggestion to configure using the location object, which isn't available in Node.\nMy use case is wanting to make localhost fetches directly from my Node server, which isn't running on port 80. In production the proxy server would be able to forward requests, but I'm not testing in production! If I specify http:// in front of localhost, then I'm hard-coding the transfer protocol, which is bad.\nETA: would it be wild to suggest that port should take precedence in cases 3 and 4 if specified in an options hash, but not if only specified in axios.defaults ? Either way, the only scenarios I could really imagine this being used commonly would be 1 and 2.\n. ",
    "SimonDKnight": "Any news on this? I really need to specify port on my axios requests. Thanks\n. Any news on this? I really need to specify port on my axios requests. Thanks\n. ",
    "raitucarp": "what is the status of this issue? Please update, application with port will broke your code. ",
    "streetrun": "\nAny news on this? I really need to specify port on my axios requests. Thanks\n\nheywanted to know, did you get the solution to this. I ahve the same issue now\n. ",
    "jaclas": "how to set port? it is possible without string concatenation?. ",
    "ketabi": "Yes Promise wasn't introduced for Android until 4.4.4 .\nYou can use  es6-promise:\nplugins: [\n        new BundleTracker({filename: './webpack-stats.json'}),\n        new webpack.ProvidePlugin({\n            $: 'jquery',\n            jQuery: 'jquery',\n            'window.jQuery': 'jquery',\n            Promise: 'es6-promise'\n        }),\n        new ExtractTextPlugin('[name].css'),\n    ],\nin your webpack config.\n\nhttps://github.com/stefanpenner/es6-promise\n. Yes Promise wasn't introduced for Android until 4.4.4 .\nYou can use  es6-promise:\n\nplugins: [\n        new BundleTracker({filename: './webpack-stats.json'}),\n        new webpack.ProvidePlugin({\n            $: 'jquery',\n            jQuery: 'jquery',\n            'window.jQuery': 'jquery',\n            Promise: 'es6-promise'\n        }),\n        new ExtractTextPlugin('[name].css'),\n    ],\nin your webpack config.\n\nhttps://github.com/stefanpenner/es6-promise\n. Yes Promise wasn't introduced for Android until 4.4.4 .\nlook at this answer:\nhttps://stackoverflow.com/a/48203092/6200607. Yes Promise wasn't introduced for Android until 4.4.4 .\nlook at this answer:\nhttps://stackoverflow.com/a/48203092/6200607. \n",
    "Ma27": "ping @mzabriskie do you agree with that concept and is it planned to merge this?\n. rebased master and resolved conflicts\n. @mzabriskie pls review so we can decide about the future.\nThe branch is now up-to-date with master, but travis fails (due to some issues with karma maybe)\n. closing because of lack of time\n. a testcase for the missing name parameter should be implemented\n. should be lowercase as the api is also lowercase\n. docs could be a bit more precise\n. this verification should be done for the default request aliases, too\n. ",
    "Sinistralis": "I just ran into this issue as well and it only seems to happen for me on Mac. I spent a good 3 days and nights trying to debug my network and decided on a whim to try this using a vanilla XHR request and realized the problem wasn't my network, but axios.\nI too am doing cross-site requests with credentials set to true. Looking at the network request, you get an ERR_EMPTY_RESPONSE and it's like the request failed before it even left the browser.\nThis is my config:\nconst myApi = axios.create({\n  baseURL: 'http://someUrl/someEndpoint',\n  timeout: 10000,\n  withCredentials: true,\n  transformRequest: [(data) => JSON.stringify(data.data)],\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n  }\n});'\nIf I get a chance I will try to look into this further.\n. Turns out my issue was unrelated to Axios. Cisco Anyconnect was blocking options requests from my machine... because reasons?\n. I can't speak for Jenny  but something in particular this library does causes requests to be block by Cisco Anyconnect default security which means it's possible other security settings do this too. I'm trying to track this down but no luck so far. \nThis can be reproduced by making a cross site request on a mac installed with cisco Anyconnect and possibly other VPN clients. \n. ",
    "j-planet": "Yes, I understand that. But the server is not mine. I'm using a Baas (backend-as-a-service). And they have already added my domain to the allowed list. I have checked that other people using said Baas have not had such problems.\n. Here are the headers:\n\n. I see I see hmm. Sorry for the super late reply. Let me look into this a bit more. Thank you very much.\n. ",
    "kwhitaker": "I'm not sure if what I'm seeing is related or not.  Basically, I can send an auth request to our remote server and get back a cookie, but then subsequent calls to the server don't send the cookies along with them, resulting in an error.\nHere are the headers from the POST call to login:\n\nAnd now a followup GET call:\n\nThe IP address listed under origin is my own, so that shouldn't be an issue.  If this is the wrong place for this, I am happy to make a new issue, or attach to the appropriate existing one.\n. As a new wrinkle; I've tested a follow-up GET call using just straight XHR, and the cookie is sent along just fine.  Doing the same call through Axios, however, results in the same issue I mentioned above.\n. Ugh. Please disregard - I wasn't sending things as expected through Axios :)\n. ",
    "dsacramone": "How is such a HUGE issue, not addressed?\n. ",
    "chrisg220": "+1\n. ",
    "thunderball1": "+1\n. ",
    "lenichols": "+1\n. ",
    "incleaf": "+1\n. ",
    "rohandey": "+1\n. fixed this using\naxios.post('http://localhost:5000/api/users', post_data)\n. ",
    "andyfen": "getting this too \n\nXMLHttpRequest cannot load https://en.wikipedia.org/w/api.php?action=opensearch&format=json&search=fish. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access.\n\nalso getting it using fetch to note. i think its chrome have recently made their request setting policy more strict, i think it will need some sort of header (not sure what tho).\nhere's some example (both served over https)\nExample 1 - Works fine\n```\naxios.get('https://randomuser.me/api/')\n  .then(function (response) {\n    console.log(response.data);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\nExampel 2 - Not working - showing error ?\naxios.get('https://en.wikipedia.org/w/api.php?action=opensearch&format=json&search=fish')\n  .then(function (response) {\n    console.log(response.data);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\nhere's the error response\n```\n[object Error] {\n  config: [object Object] {\n    data: undefined,\n    headers: [object Object] { ... },\n    maxContentLength: -1,\n    method: \"get\",\n    timeout: 0,\n    transformRequest: [object Object] { ... },\n    transformResponse: [object Object] { ... },\n    url: \"https://en.wikipedia.org/w/api.php?action=opensearch&format=json&search=fish\",\n    validateStatus: function validateStatus(status) {\n      return status >= 200 && status < 300;\n    },\n    xsrfCookieName: \"XSRF-TOKEN\",\n    xsrfHeaderName: \"X-XSRF-TOKEN\"\n  },\n  response: undefined\n}\n```\nsomething that might be relevant is in the transformResponse ? i'm wondering what PROTECTION_PREFIX bit means?\n[object Object] {\n  0: function transformResponse(data) {\n      /*eslint no-param-reassign:0*/\n      if (typeof data === 'string') {\n        data = data.replace(PROTECTION_PREFIX, '');\n        try {\n          data = JSON.parse(data);\n        } catch (e) { /* Ignore */ }\n      }\n      return data;\n    }\n}\neven trying \n\nmode: 'no-cors'\nin fetch still gives this error\n\ni'm sure the answers pretty simple and just needs some sort of header, just not sure what tho, will keep playing around.\n. the wikipedia api might just be a wonky example,same error on others?\n. ",
    "zlyi": "I delete this code,can work: axios.defaults.withCredentials = true \n. ",
    "thiagodebastos": "I got the wikipedia api to work fine with jsonp\n``` js\nvar jsonp = require('jsonp');\n// search for 'frog'\njsonp('https://en.wikipedia.org/w/api.php?action=opensearch&search=frog&format=json', null, function (err, data) {\n  if (err) {\n    console.error(err.message);\n  } else {\n    console.log(data);\n  }\n});\n```\nNo extra configs required.\n. ",
    "EngineeredTruth": "Getting the same error with axios. Here's my React component:\n```\nimport React, { Component } from 'react'\nimport axios from 'axios'\nexport default class User extends Component {\n  constructor(props){\n    super(props)\n// axios.defaults.withCredentials = true\n\nconst config = {\nmethod: 'get',\nurl: 'https://api.airbnb.com/v2/users/2917444?client_id=3092nxybyb0otqw18e8nh5nty&_format=v1_legacy_show',\nheaders: {'X-Requested-With': 'XMLHttpRequest'},\nresponseType: 'json',\nwithCredentials: true,\n\n}\naxios.request(config)\n  .then(response => { console.log('response: ', response) });\n\n}\nrender() {\n    return (\n      User\n    )\n  }\n}\n```\nNote: I can hit the API perfectly fine with Node request.\n. ",
    "dreki": "The misleading CORS error is still in axios. The fetch polyfill supports mode: 'no-cors' to fix this issue.\nWe need to do these kinds of requests to make requests against machines in other environments we operate, as well as on the same machine on different ports!\n. ",
    "Regaddi": "You can't do a thing on the client-side, when the server simply does not accept requests from your origin. If you could, we'd have a huge security leak here (and with \"we\" I mean the whole internet)...\nI think axios acts and reacts totally conformy here.\nThe important Response header is Access-Control-Allow-Origin which basically sets the valid origins, that are allowed to call this server-side service. If your client is not calling from any of these configured origins, the request will be declined with a console error like this:\n\nXMLHttpRequest cannot load http://localhost:8080/v1/api/search?q=candles. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:9999' is therefore not allowed access.\n\nYou're not on the guest list.\n. @mellogarrett This is not an axios related problem. Read this: https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\nImportant cite:\n\"For security reasons, browsers restrict cross-origin HTTP requests initiated from within scripts. For example, XMLHttpRequest and Fetch follow the same-origin policy. So, a web application using XMLHttpRequest or Fetch could only make HTTP requests to its own domain. To improve web applications, developers asked browser vendors to allow cross-domain requests.\". ",
    "smithb1994": "Fixed my problem.\nWas trying to access my express api on localhost:3000 from my vue app on localhost:8080, but was getting an error back.\nTurns out you need to add http:// to make it work.\nSo use http://localhost:3000 instead of localhost:3000 when doing dev testing. . ",
    "PreciseAsteroid": "I had the same problem with wikmedia api. looking into their CORS page (https://www.mediawiki.org/wiki/Manual:$wgCrossSiteAJAXdomains) I added origin=* to the request and it fixed the issue.\naxios.get('https://en.wikipedia.org/w/api.php?action=opensearch&format=json&origin=*&search=Albert')\n    .then(function(res) {\n      console.log(res);\n    })\n    .catch(function(err) {\n      console.log('Error: =>' + err);\n    }). ",
    "mellogarrett": "Even though I got the scary cors error message, my request was hitting the server. \nXMLHttpRequest cannot load \"...url here...\". No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access.\nAxios team, can you please fix???. ",
    "chrisp": "Many of those having this issue probably don't have the server responding to the OPTIONS request.  Make sure you have handlers (with CORS headers) for both OPTIONS and POST requests.  The client (axios) will first ping OPTIONS and then do the POST. . ",
    "khalidalkassoum": "I've got the same error on Firefox, but not on Chromium. Then I remembered NoScript was there (in Firefox) preventing the request to the remote server. In case you have NoScript (or a similar plugin) installed, check that first.\nIn my case the issue was not related to Axios. Thanks for the great work.. I've got the same error on Firefox, but not on Chromium. Then I remembered NoScript was there (in Firefox) preventing the request to the remote server. In case you have NoScript (or a similar plugin) installed, check that first.\nIn my case the issue was not related to Axios. Thanks for the great work.. ",
    "daltonamitchell": "For anyone else googling a fix to this issue, I had all the same symptoms but traced the problem to a php.ini setting on the server.\nMy preflight OPTIONS request was successful and followed by a proper POST request but I was still getting No 'Access-Control-Allow-Origin' header is present on the requested resource... similar to @mellogarrett . This seemed totally weird so I used a Chrome plugin to temporarily disable CORS protection. After that, I could see the problem was actually a PHP error:\nDeprecated: Automatically populating $HTTP_RAW_POST_DATA is deprecated and will be removed in a future version. To avoid this warning set 'always_populate_raw_post_data' to '-1' in php.ini and use the php://input stream instead. in Unknown on line 0\nThis post has more info on the problem, but in short, if you're using PHP 5.6 you should uncomment always_populate_raw_post_data in your php.ini and set to -1. Hope this saves somebody else a few hours of troubleshooting \ud83e\udd13. ",
    "woutrbe": "Is anyone still experiencing this issue? I'm running into the same:\nconst instance = axios.create({\n    baseURL: 'http://localhost/',\n    responseType: 'json',\n    headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'test',\n        'X-Test': 'testing'\n    }\n})\naxios.get('v2/portal/bar/foo?')\nResponse headers\nHTTP/1.1 401 Unauthorized\nServer: nginx/1.11.10\nDate: Fri, 24 Mar 2017 07:12:13 GMT\nContent-Type: application/json; charset=UTF-8\nContent-Length: 0\nConnection: keep-alive\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: POST, PUT, DELETE, GET, OPTIONS\nAccess-Control-Allow-Headers: *\nRequest headers\nOPTIONS /v2/portal/bar/foo? HTTP/1.1\nHost: localhost\nConnection: keep-alive\nAccess-Control-Request-Method: GET\nOrigin: http://localhost:3000\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36\nAccess-Control-Request-Headers: authorization,content-type,x-test\nAccept: */*\nReferer: http://localhost:3000/dashboard/report\nAccept-Encoding: gzip, deflate, sdch, br\nAccept-Language: en-US,en;q=0.8,fr;q=0.6,nl;q=0.4,zh-TW;q=0.2,zh;q=0.2,zh-CN;q=0.2\nI can't figure out why none of my headers are being send correctly.. Is anyone still experiencing this issue? I'm running into the same:\nconst instance = axios.create({\n    baseURL: 'http://localhost/',\n    responseType: 'json',\n    headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'test',\n        'X-Test': 'testing'\n    }\n})\naxios.get('v2/portal/bar/foo?')\nResponse headers\nHTTP/1.1 401 Unauthorized\nServer: nginx/1.11.10\nDate: Fri, 24 Mar 2017 07:12:13 GMT\nContent-Type: application/json; charset=UTF-8\nContent-Length: 0\nConnection: keep-alive\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: POST, PUT, DELETE, GET, OPTIONS\nAccess-Control-Allow-Headers: *\nRequest headers\nOPTIONS /v2/portal/bar/foo? HTTP/1.1\nHost: localhost\nConnection: keep-alive\nAccess-Control-Request-Method: GET\nOrigin: http://localhost:3000\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36\nAccess-Control-Request-Headers: authorization,content-type,x-test\nAccept: */*\nReferer: http://localhost:3000/dashboard/report\nAccept-Encoding: gzip, deflate, sdch, br\nAccept-Language: en-US,en;q=0.8,fr;q=0.6,nl;q=0.4,zh-TW;q=0.2,zh;q=0.2,zh-CN;q=0.2\nI can't figure out why none of my headers are being send correctly.. Wouldn't it be easier and more readable to do it like this:\n```js\nfunction(method, url, data) {\n    axios({\n        method: method,\n        url: url,\n        data: data\n    })\n// or\naxios({ method, url, data })\n\n}\n. Wouldn't it be easier and more readable to do it like this:js\nfunction(method, url, data) {\n    axios({\n        method: method,\n        url: url,\n        data: data\n    })\n// or\naxios({ method, url, data })\n\n}\n``. That's normal behaviour if you're passing an array. What's the format you need to pass it in?\nIf you need it any other way, likedepartmentIds=36,23,28,25`, then you'll need to convert your array to a string.\nYou can do this, by using .join:\nparams: { departmentIds: departmentIds.join(',') }. That's normal behaviour if you're passing an array. What's the format you need to pass it in?\nIf you need it any other way, like departmentIds=36,23,28,25, then you'll need to convert your array to a string.\nYou can do this, by using .join:\nparams: { departmentIds: departmentIds.join(',') }. ",
    "danielo515": "I was facing the same problem as @kwhitaker explained, axios was not sending my cookie properly resulting in responses with less information (I suppose due to the security concerns).  In the other hand regular XHR request worked fine. Then as @zlyi suggested I just added the line axios.defaults.withCredentials = true; and everything started worked as expected. . What about axios.get('./path') ? Why isn't that respecting the relative of the path ?\n. ",
    "mossen": "Tried everything and still having the issue. :(. ",
    "tobyond": "I was able to address this by using a proxy. Add the proxy to the package.json\njson\n{\n    \"proxy\": \"http://some-url/some-endpoint\"\n}\nThen request:\njs\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    console.log(response)\n  })\n  .catch(function (error) {\n    console.log(error)\n  })\n. ",
    "profnandaa": "This is a server-side issue, need to have 'Acces-Control-Allow-Origin': '*' in your response header. If you are using Express, can use npm-cors for a more robust/elegant implementation.. ",
    "mhhansen": "+1 @ProfNandaa \ni've created an export in my local server\n```\ncors.js file\nmodule.exports = (req, res, next) => {\n  res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n  res.setHeader(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n}\nso then i assign:\nconst cors = require('cors');\nrouter.use(cors);\n````\nnow move on... thanks. ",
    "nguyenvanduocit": "The error will happen when the server does not accept OPTION request.. ",
    "alexanderbanks": "For those commenting saying \"Add OPTION request handling to your server\", that does not work. I'm running a local environment  that has OPTION request handling enabled.\nI experienced this issue identically as a user above, where Axios.post(url, obj) returned the CORS 403 forbidden error, but updating that to Axios.post(url, JSON.stringify(obj)) worked correctly.. @robins-eldo Again, I do not believe you are correct.\nMy original comment:\n```\nFor those commenting saying \"Add OPTION request handling to your server\", that does not work. I'm running a local environment that has OPTION request handling enabled.\nI experienced this issue identically as a user above, where Axios.post(url, obj) returned the CORS 403 forbidden error, but updating that to Axios.post(url, JSON.stringify(obj)) worked correctly.\n```\nIf it was in fact a server problem, and not an Axios problem, stringifying an object would've had no affect, as the OPTIONS request would've failed either way.. ",
    "birchb": "I'm working on just a simple tutorial project and have had trouble accessing various apis. The only solution I've found to work is the one mentioned by thiagodebastos above.\nI simply substituted jsonp for get and I was able to access the data.. ",
    "linx97": "I had this problem and koa-cors was a simple solution! (npm-cors for Express users according to ProfNandaa). ",
    "Kyslik": "Anyone having the issue, ...Allow-Headers: Content-Type is important.\nAccess-Control-Allow-Origin: '*'\nAccess-Control-Allow-Methods: ...\nAccess-Control-Allow-Headers: Content-Type, Accept. ",
    "jarangseo": "Im using this chrome extension named 'Allow-Control-Allow-Origin: *'\nhope it could help ur problem.\n\n. ",
    "robins-eldo": "For anyone who does not understand why Axios CANNOT fix this error:\nThis is not an Axios problem. It is an issue with the browser. JS in the browser will reject requests to servers that do not have the proper headers set. If you're using this with something like React on the client then do not be confused, this is not a React or Axios problem, it is simply the browser respecting CORS standard.\nJakeElder gives a good description of what you need to do on the server-side of your API here: https://github.com/mzabriskie/axios/issues/191#issuecomment-311069164\nIf you have no control over the server you're trying to access then you should create a proxy server to fetch the content for you and return it with the correct headers.\nNot sure why this was implemented. It sure is annoying when you just want to make a request to a server to get some info but can't because the server doesn't have a specific header set. Seems extremely restrictive. Oh well .... @alexanderbanks \nNot sure about the OPTION HTTP method but my specific problem was that I have a React client trying to POST to an internal API I wrote (the internal API being the server here). I kept getting this error: Failed to load resource: Origin http://localhost:7149 is not allowed by Access-Control-Allow-Origin. XMLHttpRequest cannot load http://localhost:8902/user-login due to access control checks.\nI thought it may be an Axios problem so I tried Unirest instead and kept getting the same error. So I figured it must be something else. Not sure if this is a browser problem or React, but as soon as I added the following to my API server (which is a Nodejs + Express API), everything started working with both Axios and Unirest on the client side:\napp.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  next();\n});\nPerhaps my understanding of what is actually happening behind the scenes here is somewhat limited, however, this bit of code on the server solved the problem for me.. In React, this worked for me:\nimport axios from 'axios';\nimport querystring from 'querystring';\nconst data = querystring.stringify({id:32, name:'john'});\naxios.post('http://example.com/posturl', data)\nThe reason for this is that axios is not automatically encoding post data before adding it to the body of the HTTP request, so it needs to be encoded before sending the request. That's what query string does. It takes {id:32, name:'john'} and produces something like id=32&name=john and then axios sets that as the body of the post request.\nYou can test this by making the following request:\naxios.post('http://example.com/posturl', 'id=32&name=john')\nThat should have the same result as the code above.. ",
    "techhysahil": "API acting weird. All cors GET request was working with \"credentials : true\". \nFor POST requests, same origin request is working without stringify data object while for CORS POST request also start working when i stringify data object.\nDidn't get exactly the reason but problem solved for me.. ",
    "cressie176": "Sorry - haven't had time to test yet.\n. 0.9.0 running in live now. Will close in a couple of days if the problem resolves.\n. No - still errors with the same\n. Both, but the logs we have are from when it's running on node. I tried to replicate in a standalone script with nock but couldn't. Will keep investigating\n. I've not worked on that part of the app for a while, but we started getting different errors on timeouts (calling then with no response object if I remember) in other parts so we switched out Axios another isomorphic friendly library. Sorry.\n. ",
    "gdamjan": "@mzabriskie that still waits for the result.\nthe point of rejecting/aborting a request is to destroy a potentionaly stuck request (cause of stuck TCP sessions, for ex.)\nXHR supports .abort for ex. \nhttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#abort%28%29\n. ",
    "vandosant": "Would hate to replace one bug with another! I was thinking the null check was overkill and might have side effects. Thanks for catching it.\n. ",
    "olafguesswhapp": "thank you - I was also looking into my CORS settings but I already had allowed wild card access:\nres.header('Access-Control-Allow-Origin', '*');\nI will look into the OPTIONS request method which I seem to be missing. I will check and get back. THANK YOU\n. thanks to your feedback I implemented to OPTIONS request method correctly (found it in stack overflow):\nvar allowCrossDomain = function(req, res, next) {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\n    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, Content-Length, X-Requested-With');\n    // intercept OPTIONS method\n    if ('OPTIONS' == req.method) {\n      res.sendStatus(200);\n    } else {\n      next();\n    }\n};\napp.use(allowCrossDomain);\n. ",
    "nikrb": "wasn't expecting my ref to this issue to appear here, apologies. I have removed the links in my repo but seems ref is still there\nIf anyone else finds this thread, upgrade to express 4 to see the post payload data in req.body.\n. wasn't expecting my ref to this issue to appear here, apologies. I have removed the links in my repo but seems ref is still there\nIf anyone else finds this thread, upgrade to express 4 to see the post payload data in req.body.\n. ",
    "albertchan": "I'm still seeing this issue when I do a POST, req.body is still empty. The I'm currently running Node v.6.6.0\n. ",
    "MatthieuHPP": "Hello,\nI do have similar difficulty with POST, req.body stays undefined. I am using the 0.15.3 version of axios\nOn the browser side, \"index.vue\", the related code is : \naxios.post('donnees/member/create', {\n        Pseudo: this.pseudo,\n        Email: this.email,\n        Password: this.password,\n        Inscription_Date: ''\n      })\n      .then(function (response) {\n        console.log(response)\n      })\n      .catch(function (error) {\n        console.log(error)\n      })\nOn the server side, the route is well adressed, but req.body stays undefined\nexports.member_create_post = function(req, res, next) {\n  console.log('BODY ' + req.body)\n}\nI do not see how to go further with my bug, any idea ?\nMany thanks\nMatthieu. It works !\nI was not using the module \"body-parse\" :\napp.use(bodyParser.json()) // handle json data\napp.use(bodyParser.urlencoded({ extended: true })) // handle URL-encoded data\nMatthieu. ",
    "mdhafiz": "When I submit form by laravel resources route vue axios generate this error\n\n\nPOST http://localhost/task 404 (Not Found)\n. ",
    "lomse": "@MatthieuHPP body-parser not body-parse. ",
    "track0x1": "I was thinking more along the lines of something like an .axiosrc for my project, so whenever I import axios it will be preconfigured with those default options. Kind of like your second example but with global effect instead of per-file.\n. ",
    "MarkHerhold": "@track0x1 Why couldn't you just wrap axios in your own module and apply the config yourself? Then every time you want Axios with your own settings you can just require('my-axios').\n. @fatuhoku FYI, RequestPromise has an issue open for abstracting away from Bluebird. https://github.com/request/request-promise/issues/65\n. ",
    "gschambers": "Great, thanks :+1: \n. ",
    "tomasswood": "I had the same issue and mine was to do with having .catch before .then. Whoops.. ",
    "greenzeal": "tomasswood this should not be the case actually.\nconst doRefreshToken = () => {\n  return new Promise(\n    function (resolve, reject){\n       if (success){\n          resolve(success)\n       }else{\n          reject(error)\n       }\n   })\n}\nso actually there is no any difference if write .catch first or .then. Yes, I was mistaken, there is a order in promises. First to use .then after .catch\n. ",
    "dengunya": "@greenzeal there is difference. this is strange, but the order does matter.\nI wanted to use smth like\nvar func = () => axios.post(....).catch();\nto implement error handling before calling this async function.\nfunc().then(...)\nBut in this case \"then\" callback fires on error (ex. 404 status) and \"catch\" cb is ignored.. @greenzeal there is difference. this is strange, but the order does matter.\nI wanted to use smth like\nvar func = () => axios.post(....).catch();\nto implement error handling before calling this async function.\nfunc().then(...)\nBut in this case \"then\" callback fires on error (ex. 404 status) and \"catch\" cb is ignored.. ",
    "dacastro4": "This just happens to me and my problem was (correct me if I'm wrong) that any kind of error you have inside the then() callback it will be caught by the \"catch\" callback.\nExample:\naxios.get(url)\n    .then( data => {\n        //some sort of error\n    })\n    .catch(error => {\n        /it's gonna fall here. If you console log \"error\" is gonna be the error that happened in the then callback \n    }). ",
    "Jam0r85": "@dacastro4 THANK YOU! Was pulling my hair out trying to figure out why my request kept catching when it was successful. Re-read through my .then and found a bug \ud83d\udc4d . ",
    "sachintbits": "@dacastro4 Thank you, my error was in the then execution. Fixed the error in the function that was called by the then statement and the problem was resolved.. @dacastro4 Thank you, my error was in the then execution. Fixed the error in the function that was called by the then statement and the problem was resolved.. ",
    "divyenduz": "I think this will occur only on old opera according to http://caniuse.com/#search=promise, I am closing this one. Thanks \n. ",
    "latentflip": "It looks at first glance like request.onload = request.onerror = function () {... might work, since we're already handling if (!request), will take a look.\n. @mzabriskie oh, so you'd rather reject with the error, rather than a response object with a 0 status?\n. So it looks like onerror doesn't actually return an error, but a progress event. At least in the case of http://localhost:5000 when the api isn't actually running.\n\nThrowing that event I don't think makes sense since it's not even an error object. According to: http://stackoverflow.com/questions/4844643/is-it-possible-to-trap-cors-errors in at least the situation of cors errors, the actual error is not available to your JS code (just gets logged to the console).\nSo I guess we're back to: either rejecting with a 0 status, or just throwing something like new Error('Unknown XHR error') thoughts?\n. :+1: agreed, done: #205\n. ",
    "zbobyuan": "I run this issue too, when your plan release this fix?\n. ",
    "nicklaw5": "I'm receiving \"Network error\" but server is responding with \"500 Internal Server Error\".\nWould be great if this error response could be more explicit for better application handling. Is this possible?\n. ",
    "FarhadG": "Thanks for the update, @mzabriskie. I'd love to help with the caching feature. Are you planning to use a module for this functionality or build one?\n. ",
    "sathishkumarsoundharajan": "Thanks @mzabriskie .. Waiting for it long time.. Nice work.. !! \n. ",
    "MMeent": "I would like to use this as an include in my ES6 project, so #181 is something I'd like to see.\n. I would like to use this as an include in my ES6 project, so #181 is something I'd like to see.\n. @mzabriskie I cannot seem to find the place of the ES6 module. My file structure is axios/dist/axios.[js, min.js], and none of those two have the standard ES6 module export. \nI currently use Bower (which pulls from NPM) as my resource manager.\n[edit] Note that I do not wish for the compilation (through babel) to succeed, but rather that it would work in an environment which implemented ES6 modules\n. @mzabriskie I cannot seem to find the place of the ES6 module. My file structure is axios/dist/axios.[js, min.js], and none of those two have the standard ES6 module export. \nI currently use Bower (which pulls from NPM) as my resource manager.\n[edit] Note that I do not wish for the compilation (through babel) to succeed, but rather that it would work in an environment which implemented ES6 modules\n. ",
    "gtrevg": "This message was created automatically by mail delivery software.\nA message that you sent could not be delivered to one or more of its\nrecipients. This is a temporary error. The following address(es) deferred:\ngtrevg@gmail.com\n    Domain plentyproductions.com has exceeded the max emails per hour (204/200 (102%)) allowed.  Message will be reattempted later\n------- This is a copy of the message, including all the headers. ------\nReceived: from github-smtp2-ext8.iad.github.net ([192.30.252.199]:34924 helo=github-smtp2a-ext-cp1-prd.iad.github.net)\n    by server21.abstractdns.com with esmtps (TLSv1:DHE-RSA-AES256-SHA:256)\n    (Exim 4.87)\n    (envelope-from noreply@github.com)\n    id 1bJ0DA-0008MD-MI\n    for github@trevorgattis.com; Fri, 01 Jul 2016 15:18:32 +0000\nDate: Wed, 29 Jun 2016 20:55:08 -0700\nDKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=github.com;\n    s=pf2014; t=1467258908;\n    bh=nzLi6VEFhdvhMx5cCA2Gn2P7YPrTgTF7Zy1mlZBEhGs=;\n    h=From:Reply-To:To:Cc:In-Reply-To:References:Subject:List-ID:\n     List-Archive:List-Post:List-Unsubscribe:From;\n    b=jLunGVPSaSRIUEqz30dlKbBZqiA9wIV3AoCchJlRpUa7Ym9LiUwyQIwDSly+Vegk2\n     NPw1Bw3QNUq1BYgbgt7Vg3MxSEpH4VSV4QiE9bzPNtHVwxRtwW5NkLZFZWy60lQsvr\n     TWhmKobYsbgc/XQ9OTT5MgMw+PeF3lyc4jNm+IrU=\nFrom: Matt Zabriskie notifications@github.com\nReply-To: mzabriskie/axios reply@reply.github.com\nTo: mzabriskie/axios axios@noreply.github.com\nCc:\nMessage-ID: mzabriskie/axios/issues/206/229553459@github.com\nIn-Reply-To: mzabriskie/axios/issues/206@github.com\nReferences: mzabriskie/axios/issues/206@github.com\nSubject: Re: [mzabriskie/axios] Planning for 1.0 (#206)\nMime-Version: 1.0\nContent-Type: multipart/alternative;\n boundary=\"--==_mimepart_5774981c6bb20_45173fec9feed2b85211aa\";\n charset=UTF-8\nContent-Transfer-Encoding: 7bit\nPrecedence: list\nX-GitHub-Sender: mzabriskie\nX-GitHub-Recipient: gtrevg\nList-ID: mzabriskie/axios \nList-Archive: https://github.com/mzabriskie/axios\nList-Post: mailto:reply@reply.github.com\nList-Unsubscribe: mailto:unsub+001038ed022b9db053ef36b36f42682a36ed0994e93d8fc592cf00000001138c5a1c92a169ce07a422c8@reply.github.com,\n https://github.com/notifications/unsubscribe/ABA47Q4KABu99rp3nxyI6ABroMN5VT31ks5qQz4cgaJpZM4HKgtd\nX-Auto-Response-Suppress: All\nX-GitHub-Recipient-Address: github@trevorgattis.com\n----==_mimepart_5774981c6bb20_45173fec9feed2b85211aa\nContent-Type: text/plain;\n charset=UTF-8\nContent-Transfer-Encoding: 7bit\n@MMeent you should be fine to include axios into an ES6 module as is. Are you getting an error?\n\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub:\nhttps://github.com/mzabriskie/axios/issues/206#issuecomment-229553459\n----==_mimepart_5774981c6bb20_45173fec9feed2b85211aa\nContent-Type: text/html;\n charset=UTF-8\nContent-Transfer-Encoding: 7bit\n@MMeent you should be fine to include axios into an ES6 module as is. Are you getting an error?\n\u2014You are receiving this because you are subscribed to this thread.Reply to this email directly, view it on GitHub, or mute the thread.\n\n\n\n\n\n\n\n----==_mimepart_5774981c6bb20_45173fec9feed2b85211aa--\n. This message was created automatically by mail delivery software.\nA message that you sent could not be delivered to one or more of its\nrecipients. This is a temporary error. The following address(es) deferred:\ngtrevg@gmail.com\n    Domain plentyproductions.com has exceeded the max emails per hour (204/200 (102%)) allowed.  Message will be reattempted later\n------- This is a copy of the message, including all the headers. ------\nReceived: from github-smtp2-ext8.iad.github.net ([192.30.252.199]:34924 helo=github-smtp2a-ext-cp1-prd.iad.github.net)\n    by server21.abstractdns.com with esmtps (TLSv1:DHE-RSA-AES256-SHA:256)\n    (Exim 4.87)\n    (envelope-from noreply@github.com)\n    id 1bJ0DA-0008MD-MI\n    for github@trevorgattis.com; Fri, 01 Jul 2016 15:18:32 +0000\nDate: Wed, 29 Jun 2016 20:55:08 -0700\nDKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=github.com;\n    s=pf2014; t=1467258908;\n    bh=nzLi6VEFhdvhMx5cCA2Gn2P7YPrTgTF7Zy1mlZBEhGs=;\n    h=From:Reply-To:To:Cc:In-Reply-To:References:Subject:List-ID:\n     List-Archive:List-Post:List-Unsubscribe:From;\n    b=jLunGVPSaSRIUEqz30dlKbBZqiA9wIV3AoCchJlRpUa7Ym9LiUwyQIwDSly+Vegk2\n     NPw1Bw3QNUq1BYgbgt7Vg3MxSEpH4VSV4QiE9bzPNtHVwxRtwW5NkLZFZWy60lQsvr\n     TWhmKobYsbgc/XQ9OTT5MgMw+PeF3lyc4jNm+IrU=\nFrom: Matt Zabriskie notifications@github.com\nReply-To: mzabriskie/axios reply@reply.github.com\nTo: mzabriskie/axios axios@noreply.github.com\nCc:\nMessage-ID: mzabriskie/axios/issues/206/229553459@github.com\nIn-Reply-To: mzabriskie/axios/issues/206@github.com\nReferences: mzabriskie/axios/issues/206@github.com\nSubject: Re: [mzabriskie/axios] Planning for 1.0 (#206)\nMime-Version: 1.0\nContent-Type: multipart/alternative;\n boundary=\"--==_mimepart_5774981c6bb20_45173fec9feed2b85211aa\";\n charset=UTF-8\nContent-Transfer-Encoding: 7bit\nPrecedence: list\nX-GitHub-Sender: mzabriskie\nX-GitHub-Recipient: gtrevg\nList-ID: mzabriskie/axios \nList-Archive: https://github.com/mzabriskie/axios\nList-Post: mailto:reply@reply.github.com\nList-Unsubscribe: mailto:unsub+001038ed022b9db053ef36b36f42682a36ed0994e93d8fc592cf00000001138c5a1c92a169ce07a422c8@reply.github.com,\n https://github.com/notifications/unsubscribe/ABA47Q4KABu99rp3nxyI6ABroMN5VT31ks5qQz4cgaJpZM4HKgtd\nX-Auto-Response-Suppress: All\nX-GitHub-Recipient-Address: github@trevorgattis.com\n----==_mimepart_5774981c6bb20_45173fec9feed2b85211aa\nContent-Type: text/plain;\n charset=UTF-8\nContent-Transfer-Encoding: 7bit\n@MMeent you should be fine to include axios into an ES6 module as is. Are you getting an error?\n\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub:\nhttps://github.com/mzabriskie/axios/issues/206#issuecomment-229553459\n----==_mimepart_5774981c6bb20_45173fec9feed2b85211aa\nContent-Type: text/html;\n charset=UTF-8\nContent-Transfer-Encoding: 7bit\n@MMeent you should be fine to include axios into an ES6 module as is. Are you getting an error?\n\u2014You are receiving this because you are subscribed to this thread.Reply to this email directly, view it on GitHub, or mute the thread.\n\n\n\n\n\n\n\n----==_mimepart_5774981c6bb20_45173fec9feed2b85211aa--\n. ",
    "Wyntau": "\n@FarhadG I built a module for caching that I had considered using for this, but I am not married to that. It would be nice to allow whatever is used to be pluggable, so people can provide their own cache mechanism if they want.\n\nI like angular's set cache config style when perform a request. And I split out angular's $cacheFactory to do it.\nAnd as long as we define a  cache Interface, like required method put, get, remove, removeAll etc. then any cache implemention can be used in our request. \n. > @FarhadG I built a module for caching that I had considered using for this, but I am not married to that. It would be nice to allow whatever is used to be pluggable, so people can provide their own cache mechanism if they want.\nI like angular's set cache config style when perform a request. And I split out angular's $cacheFactory to do it.\nAnd as long as we define a  cache Interface, like required method put, get, remove, removeAll etc. then any cache implemention can be used in our request. \n. ",
    "pbassut": "@naivefun Bother saying how you did it?. ",
    "smilingpoplar": "@mzabriskie Thanks for the quick reply. It works. For instance only (axios v0.8.1), I set: \ninstance.defaultConfig.headers.authorization = 'foo bar'\n. @mzabriskie Thanks for the quick reply. It works. For instance only (axios v0.8.1), I set: \ninstance.defaultConfig.headers.authorization = 'foo bar'\n. Yes, I should update the version.\nhttps://github.com/mzabriskie/axios/blob/v0.8.1/lib/axios.js#L12\nAnd for axios v0.9.0, set for instance:\nObject.assign(instance.defaults, {headers: {authorization: 'foo bar'}});\n. Yes, I should update the version.\nhttps://github.com/mzabriskie/axios/blob/v0.8.1/lib/axios.js#L12\nAnd for axios v0.9.0, set for instance:\nObject.assign(instance.defaults, {headers: {authorization: 'foo bar'}});\n. ",
    "XidongHuang": "hi I have the issue after setting axios.defaults.headers.common[].\nRequests all worked well before I tried to set the users' token in request header, but they send OPTIONS to my back-end and 404, not matter POST or GET method I use there.\nthe pic from chrome devTools:\n\nthe way I set headers is:\n```javascript\nimport axios from 'axios';\nexport default function setAuthorizationToken(token) {\n    if(token) {\n        axios.defaults.headers.common['authorization'] = Bearer ${token};\n    } else {\n        delete axios.defaults.headers.common['authorization'];\n    }\n}\n```\nI know it is about CORS, so I also set up on the server side:\n```javascript\n//app.js\napp.use((ctx, next) =>{\n// Website you wish to allow to connect\nctx.set('Access-Control-Allow-Origin': '*');\n\n// Request methods you wish to allow\nctx.res.setHeader();\n\n// Request headers you wish to allow\nctx.res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type,authorization');\n\n// Set to true if you need the website to include cookies in the requests sent\n// to the API (e.g. in case you use sessions)\nctx.res.setHeader('Access-Control-Allow-Credentials', true);\nctx.res.setHeader('withCredentials', true);\n\n// Pass to next layer of middleware\nnext();\n\n});\n...\n``\nand we can see these request features from the firstOPTIONS` request on the devTool pic.\n\nUpdate\nSolved it, the problems is from the first OPTIONS request, server replies browser a 404, so I change in server:\n```javascript\n//app.js\napp.use((ctx, next) =>{\n// Website you wish to allow to connect\nctx.set({\n             'Access-Control-Allow-Origin': '*',\n             // Request methods you wish to allow\n             'Access-Control-Allow-Methods': 'GET, POST, OPTIONS, PUT, PATCH, DELETE',\n             // Request headers you wish to allow\n             'Access-Control-Allow-Headers': 'X-Requested-With,content-type,authorization',\n             'Access-Control-Allow-Credentials': true,\n         });\n\nif(ctx.req.method = 'OPTIONS') {\n        ctx.res.statusCode = 204;\n}\n    // Pass to next layer of middleware\n    await next();\n});\nThen the program works.\n``` \n\nThank you.\n. ",
    "Dheeraj89": "Thank you very much. :) \ud83d\udc4d . ",
    "longcuxit": "i think should change:\nif(ctx.req.method = 'OPTIONS') {\n        ctx.res.statusCode = 204;\n        ctx.res.end()\n} else {\n       next()\n}\n. ",
    "berdyshev": "But it seems that instance.defaults.headers.common[HEADER_NAME] = 'some value' changes the defaults not only for the instance but for the any axios request made even directly with axios.get() (not instance.get()). ",
    "cmcleese": "I also have the same issue @berdyshev described.\nIf I need to make a new axios request by creating a new axiosInstance and this new request I need to remove some default header.\nLets say I need to remove the default Authorization header.\nI would expect something like this:\ndelete axiosInstance.defaults.headers.common.Authorization\nto be safe as it should only remove from the axiosInstance I created.\nHowever I can confirm also that this seems to removing also from the main axios instance the header.\nAnyone know of a work around for this?\n. ",
    "TAUnionEd": "\nI also have the same issue @berdyshev described.\nIf I need to make a new axios request by creating a new axiosInstance and this new request I need to remove some default header.\nLets say I need to remove the default Authorization header.\nI would expect something like this:\ndelete axiosInstance.defaults.headers.common.Authorization\nto be safe as it should only remove from the axiosInstance I created.\nHowever I can confirm also that this seems to removing also from the main axios instance the header.\nAnyone know of a work around for this?\n\nI have same question (in 0.16.2) . ",
    "lmj0011": "https://github.com/axios/axios/issues/209#issuecomment-174206234\nThis will not update an already created \"instance\" of axios v0.18\nYou will need to also do for example:\n```js\nconst axiosInstance = axios.create({\n          baseURL: 'http://example.com',\n          headers: {\n            'Auth-Token': 'bar foo',\n          }\n        });\n// only affects the global instance and instances created afterwards\naxios.defaults.headers.common['Auth-Token'] = 'foo bar'; \n// immediately affects this instance\naxiosInstance.defaults.headers['Auth-Token'] = 'foo bar'; \n```. ",
    "scerelli": "It's strange because i get this error only if user and pass are wrong otherwise if i type correct login data the promise works well because the server return 200\n. Good one\n. ",
    "renanrmelo": "If you dont have access to configure CORS on the server, and are you using\nGoogle Chrome you can use this extension:\nhttps://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi\nworked\nfor me yesterday.\nEm qua, 27 de jan de 2016 \u00e0s 14:58, Stefano notifications@github.com\nescreveu:\n\nIt's strange because i get this error only if user and pass are wrong\notherwise if i type correct login data the promise works well because the\nserver return 200\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/213#issuecomment-175743717.\n. \n",
    "hatto": "Hi I have the same problem.\nI've just switched from jquery ajax to axios, but I can't make it works.\n$.post(url, params, function() {...}); -> works great\naxios({\n   method: 'post',\n   url: url,\n   data: params,\n   headers: {\n       'Content-Type': 'application/json'\n    }\n });\ndoesnt work. I get allways 'method non allowed' error, and I dont know why, but it sent as request method \"OPTIONS\" not \"POST\".\nand I cant see my parameters either.\nAm I missing something? any solution?\nit needs to be POST and 'Content-Type': 'application/json'.\nthanks\n. ",
    "alexisargyris": "will do, thanks\n. Ok, thanks\n. ",
    "vjpr": "False alarm!\nIn my console I was seeing two 401s for two different endpoints.\nHowever, one endpoint was working perfectly, the other was being invoked twice and producing two unhandled rejections. Such is life.\n. ",
    "szujak": "when i do this\n```\n// config/axios.js\nimport axios from 'axios';\nimport ApiHelper from '../helper/ApiHelper';\nimport InterceptorHelper from './../helper/InterceptorHelper';\nexport const interceptorHelper = new InterceptorHelper();\nexport const apiClient = axios.create({\n   baseURL: ApiHelper.getUrl()\n});\n```\nand then in another file i try to\n```\nimport { apiClient, interceptorHelper } from './axios';\nconst interceptor = apiClient.interceptors.request.use((config) => {\n        console.log(config);\n});\n```\nthen i don't get this console.log and interceptor variable is 0\nsolution for now:\n```\n// config/axios.js\nimport axios from 'axios';\nimport ApiHelper from '../helper/ApiHelper';\nimport InterceptorHelper from './../helper/InterceptorHelper';\naxios.defaults.baseURL = ApiHelper.getUrl();\nexport const interceptorHelper = new InterceptorHelper();\nexport const apiClient = axios;\n```\n. when i do this\n```\n// config/axios.js\nimport axios from 'axios';\nimport ApiHelper from '../helper/ApiHelper';\nimport InterceptorHelper from './../helper/InterceptorHelper';\nexport const interceptorHelper = new InterceptorHelper();\nexport const apiClient = axios.create({\n   baseURL: ApiHelper.getUrl()\n});\n```\nand then in another file i try to\n```\nimport { apiClient, interceptorHelper } from './axios';\nconst interceptor = apiClient.interceptors.request.use((config) => {\n        console.log(config);\n});\n```\nthen i don't get this console.log and interceptor variable is 0\nsolution for now:\n```\n// config/axios.js\nimport axios from 'axios';\nimport ApiHelper from '../helper/ApiHelper';\nimport InterceptorHelper from './../helper/InterceptorHelper';\naxios.defaults.baseURL = ApiHelper.getUrl();\nexport const interceptorHelper = new InterceptorHelper();\nexport const apiClient = axios;\n```\n. ",
    "fatuhoku": "@MarkHerhold Okay, good to know! I'm using axios now. Definitely works well for me.\n. ",
    "uglymunky": "So far, using Browserstack I was able to successfully run all the examples on both Safari 6 and 7.  For now, gonna go ahead and assume that its supported...\n. @nickuraltsev , I'm seeing this same problem.  I can not get axios to catch on timeout.\nMy code:\naxios.get(<some api endpoint>, {timeout: 10}).then(() => { debugger; }).catch(() => { debugger; }).finally(() => { debugger; })\nIn this example, the network tab shows the request as cancelled but none of the handlers get triggered.\n. ...aaand, updating from version 0.9 to the latest version of axios fixed it for me :)\n. ",
    "SamuelNorbury": "This is an issue I'm dealing with too, forced to use global defaults instead, which is far from optimal.\n. This is an issue I'm dealing with too, forced to use global defaults instead, which is far from optimal.\n. ",
    "xuoe": "I work around it by doing this:\n``` javascript\nimport axios, { defaults } from 'axios'\nconst http = axios.create(defaults)\n```\nBut there's also the option of doing this:\n``` javascript\nimport { Axios, defaults } from 'axios'\nconst http = new Axios(defaults)\n```\nAFAICT, both options are equivalent.\n. I work around it by doing this:\n``` javascript\nimport axios, { defaults } from 'axios'\nconst http = axios.create(defaults)\n```\nBut there's also the option of doing this:\n``` javascript\nimport { Axios, defaults } from 'axios'\nconst http = new Axios(defaults)\n```\nAFAICT, both options are equivalent.\n. ",
    "1000ch": "or...\nhttps://github.com/mzabriskie/axios/blob/master/lib/defaults.js#L34\nshould be convert Object into FormData when Content-Type is multipart/form-data?\n. ",
    "aoberoi": "i wasn't able to repro this\n. ",
    "Zensavona": "All good, thanks anyway!\n. ",
    "mikechabot": "@rogeriochaves Thanks, I just hit this - can confirm #227 had the desired effect.\n. I don't understand the use case here. You already have access to create an axios instance that meets your needs for any specific API. Why do you feel you need to extend the Axios base class. More to the point, please explicitly  describe that what create() offers is insufficient. \n. What do you want to add to the base class that can't be achieved by instancing Axios and just wrapping the instance? Are you attempting to add prototype methods? I apologize for my confusion, just trying to understand. \n. FWIW, here's how I expose Axios - it's a three tiered approach which provides great flexibility. No need to extend the base library, since the instance provides everything we need:\n1. Generic AJAX service\n2. Generic Data Access Service\n3. Domain services (i.e. OrderService, PersonService)\nGeneric AJAX service (Instantiate Axios, return instance request)\n```\nimport ConfigService from '../common/config-service';\nimport axios from 'axios';\nconst instance = axios.create({\n    baseURL: ConfigService.getBaseUrl(),\n    timeout: 4000,\n    withCredentials: true   // Issue CORS requests with credentials\n});\nexport default {\n    request(options) {\n        return instance.request(options);\n    }\n};\n```\nGeneric Data Access Service (Use AjaxService's request method, just happens to be implemented with Axios, but could be swapped out ad hoc)\n```\nimport AjaxService from './ajax-service';\nconst _request = (method, url, data) => {\nlet options = {\n    method: method,\n    url: url,\n    responseType: 'json'\n};\nif (data && method == 'GET') {\n    options.params = data;\n} else if (data) {\n    options.data = JSON.stringify(data);\n    options.headers = {\n        'Content-Type': 'application/json'\n    };\n}\n\nreturn new Promise((resolve, reject) => {\n    AjaxService.request(options)\n        .then(response => {\n            resolve(response.data);\n        })\n        .catch(error => {\n            error.message = error.message || `${error.status} ${error.statusText}`;\n            reject(error);\n        });\n});\n\n};\nconst DataAccessService = {\n    get(url, data) {\n        return _request('GET', url, data);\n    },\n    post(url, data) {\n        return _request('POST', url, data);\n    },\n    delete(url) {\n        return _request('DELETE', url);\n    }\n};\nexport default DataAccessService;\n```\nExample Domain Service\n```\nimport DataAccessService from '../data/data-access-service';\nconst ExampleDomainService = {\n    getFoo() {\n        return DataAccessService.get('/foo');\n    }\n};\nexport default ExampleDomainService;\n```\n. ",
    "leozdgao": "How soon could this patch been updated to npm?\n. ",
    "adanperez": "Seeing this issue too\n. Hi @mzabriskie is there an ETA for this to be released?  thanks!\n. ",
    "rgranger": "Hi ! This issue is still relevant. When will the fix be released on npm ? Thanks.\n. ",
    "L3V147H4N": "im using version 0.13.0 in react native 0.24.1 and it doesn't work\n. im using version 0.13.0 in react native 0.24.1 and it doesn't work\n. I'll try it\n. I'll try it\n. @mcs07 Im using version 0.13.0 and react native 0.24.1 and still doesnt work\n. @mcs07 Im using version 0.13.0 and react native 0.24.1 and still doesnt work\n. @nickuraltsev im using version 0.13.0 in react native 0.24.1 and it doesn't work, catch doest not fire on timeout, it just goes forever\n. @nickuraltsev im using version 0.13.0 in react native 0.24.1 and it doesn't work, catch doest not fire on timeout, it just goes forever\n. ",
    "beilunyang": "i have the same issue. \nversion 0.13.1 in react native 0.31.0 and it doesn't work\n. ",
    "abdelav": "I got it working in axios 0.14.0 with:\nconst {status, data} = await axios.patch('url', body, {headers: {'Content-Type': 'application/json'}});\nI just add the content type in the request.\n. ",
    "rogeriochaves": "any chances of getting this in soon?\n. ",
    "nettofarah": "What about node.js timeouts?\nit would probably make sense to add some tests to this code path too.\n. @LestaD a way to solve this is to declare all requests you need to perform as a static array property in your react component.\nSomething like this:\n``` javascript\nclass Home extends React.Component {\nstatic dataDependencies = [\n    fetchHome\n  ]\ncomponentDidMount() {\n    const { dispatch } = this.props\n    dispatch(fetchHome())\n  }\nrender() {\n    ...\n  }\n}\n```\nYou can then write a function in your backend server that does something like this:\njavascript\nconst reqs = Home.dataDependencies.map((req) => ...)\nPromise.all(reqs).then(function() {\n  renderToString...\n})\n. Is there any way to tell that you're running code in an electron process?\nSome sort of ENV variable or something like that.\n. Here's the PR: https://github.com/mzabriskie/axios/pull/359\n. Maybe we could extract (request.readyState !== 4 && !xDomain) into an explaining variable so it would be easier for people reading the code that understand what this condition is about.\nI'm not sure what this does tbh. what does (request.readyState !== 4 && !xDomain) mean?\n. ",
    "ACCTFORGH": "I tried 0.10.0 and 0.11.0 in React Native 0.24 but still the code in catch does not run after timeout. The way I tested was I turned off the laptop wifi while left the Genymotion emulator WIFI on. In this way, the app would think there was internet so axios would still send the network request but would for sure not get any response. Any ideas on this?\n. ",
    "joshuaflanagan": "Does any of the configuration passed when creating an instance get applied? It doesn't seem like it. I don't understand why this isn't considered a major bug - seems to make create() completely useless.\n. You're right, I am seeing the instance config being applied. Turns out I had a local config problem. This issue seemed like it was describing my same problem, but it wasn't. Sorry for the alarm!\n. ",
    "reggi": "This works:\njs\naxios.defaults.params = {}\naxios.defaults.params['public_key'] = publicKey\n. @mzabriskie If you have the time and there's a simple answer would love to hear your thoughts?\n. With the patch this works :/\n``` js\nimport { Axios } from 'axios'\nclass Api extends Axios {\n  constructor (...args) {\n    super(...args)\n    this.defaults.baseURL = 'https://api.com'\n  }\n  cancelOrder (id) {\n    return this.put(/cancel/order/${id})\n  }\n}\n``\n. StackOverflow convo here: http://stackoverflow.com/questions/37217716/using-es6-class-to-extend-axios/37218835#37218835\n. @mikechabot.createcalls thenewon the Axios instance, and to extend it directly as an es6 class I need access to the class itself. The use case isclass Api extends Axios. How am I supposed to useaxiosand create an es6 style class without extending the Axios base class?\n. @mikechabot You can see in my comment above that I am trying to add prototype methods, in [this comment](https://github.com/mzabriskie/axios/issues/320#issuecomment-219140706) I have a.cancelOrdermethod. I have a pretty long list of operations and conditions that I currently run on theinstanceof axios I.create()including default headers, default bodys, error handling with interceptors and a lot more, all that goes into creating a custom API wrapper and Axios supports out of the box. However I would like to use the syntactic sugar that the es6 class syntax provides to organize my wrapper andaxiosin a clean way other developers that pick up my wrapper will understand as well as use the class syntax to add methods to my custom class rather then adding.prototypeto theinstance` that axios creates.\nI really don't think this request is too much. All I want is direct access to the code written in the library. Why keep it private / locked away?\n. @nickuraltsev yep that's exactly what I want to do.\n. @mikechabot Thanks for taking the time and energy for the demonstration above. However It's still is not relevant to this inquiry. It's pretty much exactly how I'm doing it now. Your example does not create an es6 class or call extends on Axios which is again, simply the functionality I'm looking for. Understandably there may be \"No need to extend the base library\" but that's the way I'd like to write my code. Again, I don't know why I'm getting such push-back on such a simple request.\n. sending the defaults through super works\n``` js\nimport { Axios } from 'axios'\nexport class Alpha extends Axios {\n  constructor () {\n    super({headers: {'alpha': 'alpha'}})\n  }\n}\nexport class Beta extends Axios {\n  constructor () {\n    super({headers: {'beta': 'beta'}})\n  }\n}\nlet alpha = new Alpha()\nlet beta = new Beta()\nconsole.log(alpha)\nconsole.log(beta)\n```\nand cloning this.default works\n``` js\nimport { Axios } from 'axios'\nimport { cloneDeep } from 'lodash'\nexport class Alpha extends Axios {\n  constructor () {\n    super()\n    this.defaults = cloneDeep(this.defaults)\n    this.alpha = 'alpha'\n    this.defaults.headers.alpha = 'alpha'\n  }\n}\nexport class Beta extends Axios {\n  constructor () {\n    super()\n    this.defaults = cloneDeep(this.defaults)\n    this.beta = 'beta'\n    this.defaults.headers.beta = 'beta'\n  }\n}\nlet alpha = new Alpha()\nlet beta = new Beta()\nconsole.log(alpha)\nconsole.log(beta)\n``\n. Just to note changes to defaults root level do not transfer to the other class, only changes to defaults one level deeper, like toheaders`.\n. Yeah this was my solution:\n``` js\nimport { Axios as AxiosRoot } from 'axios'\nimport { cloneDeep } from 'lodash'\nexport default class Axios extends AxiosRoot {\n  constructor () {\n    super()\n    this.defaults = cloneDeep(this.defaults)\n    this.interceptors = cloneDeep(this.interceptors)\n    return this\n  }\n}\n```\n. ",
    "Sokal21": "This is still working? I'm trying to use and the params are not being shown in the URL. ",
    "baumannzone": "Im had the same issue, and it's working for me. I tried this:\naxios.defaults.params = {};\naxios.defaults.params[ 'locale' ] = d3.locale;\naxios.defaults.params[ 'apikey' ] = d3.apikey;\nCheck for any typo @Sokal21 . Im had the same issue, and it's working for me. I tried this:\naxios.defaults.params = {};\naxios.defaults.params[ 'locale' ] = d3.locale;\naxios.defaults.params[ 'apikey' ] = d3.apikey;\nCheck for any typo @Sokal21 . You should show your code. You should show your code. ",
    "aasm-moura": "This is an really a+ feature that should be implemented in core, imo.. ",
    "sergeysova": "@mzabriskie can you help me?\n. Or give me a link on projects react ssr+axios\n. I don't know how to stop rendering until all requests will resolved.\nI make request in componentWillMount()\n. @nettofarah good solution\n. ",
    "ashishd751": "@mzabriskie can you please provide an in-built solution to this problem. I know all AJAX calls are supposed to be async, but i am in a situation where the control of the program shouldn't proceed until the response arrives. \nTo be more specicifc, i need to stop the render function from executing, before response arrives in the componentWillMount() of the same component. . ",
    "samueleaton": "If you are in the main Electron process process.type will be browser and if you are in an Electron renderer it will be renderer. In a generic node runtime process.type will be undefined. \nBut Electron can do anything you can do in Node, so I don't see why you would need to be more specific than typeof process !== undefined, which is already what axios checks for. I can't think of when the code would need to be different than typical Node http request. \n. ",
    "marsch": "just as a side note: i really don't like this descision, because many of us writing their tests using something like sinon.useFakeXMLHttpRequest, which would normally fail now. But as a build in workaround, you just need to use the axios build in adapters, as a custom adapter. If anybody is looking for a solution, here is what I used:\n```\nimport xhrAdapter from 'axios/lib/adapters/xhr';\nimport httpAdapter from 'axios/lib/adapters/http';\nlet adapter = xhrAdapter;\nif (typeof XMLHttpRequest === 'undefined') {\n  // For browsers use XHR adapter\n  adapter = httpAdapter;\n}\n```\nand than in the config of axios:\nthis.axios = axios.create({\n   headers: {\n      'Authorization': `Bearer ${this.token}`,\n      'Accept': 'application/json'\n   },\n   adapter: adapter\n});\n. ",
    "nerdpad": "+1\n. ",
    "tj": "nice nvm the config isn't too bad\n. ",
    "pitzcarraldo": "Cool :+1: \nThanks :)\n. ",
    "psulek": "Same issue but for usage in mocha unit tests\n. ",
    "ruchigoyal2005": "This is the error description:\n{\ndescription: \"Access is denied.\",\n   message: \"Access is denied.\",\n   name: \"Error\",\n   number: -2147024891\n}\nIt is thrown from request.open in xhr.js. yes, I am making request from .net to .com\n. Finally I got this working. There were couple of issues with IE9\n1) I was getting above access denied error because locally I was pointing to Api which has https://. but local was http. In IE9 it should be either http to http or https to https. so change the local code to point to http. \n2) XDomainRequest in IE9 doesn't support custom headers. After removing custom headers atleast my api calls were working. \n3) After fixing 1st and 2nd, I was getting promise rejection. After debugging I found that in xhr.js file in onLoad() response.resonseText is undefined. responseText comes as a part of request. so I did send the pull request to fix this issue.\n. I tested this change manually in Chrome/firefox/IE9/IE10/IE11. I updated the commit message. thanks for the suggestion !!!\n. Request is XDomainRequest and it has responseText property which retrieves the response body as a string.\nhttps://msdn.microsoft.com/en-us/library/cc288060(v=vs.85).aspx\n. Request is XDomainRequest and it has responseText property which retrieves the response body as a string.\nhttps://msdn.microsoft.com/en-us/library/cc288060(v=vs.85).aspx\n. @mzabriskie : For XMLHttpRequest we do get the response status. This scenario exists only for XDomainRequest. If you see this condition:\n((response.status >= 200 && response.status < 300) ||\n     (!('status' in request) && request.responseText) ?\n      resolve :\n      reject)(response);\nIn 1st condition response status getting checked. For XMLHttpReuqest this 1st condition gets executed. For XDomainRequest we don't get the status in the response, that's why we need to check the request.responseText. \n. @mzabriskie : For XMLHttpRequest we do get the response status. This scenario exists only for XDomainRequest. If you see this condition:\n((response.status >= 200 && response.status < 300) ||\n     (!('status' in request) && request.responseText) ?\n      resolve :\n      reject)(response);\nIn 1st condition response status getting checked. For XMLHttpReuqest this 1st condition gets executed. For XDomainRequest we don't get the status in the response, that's why we need to check the request.responseText. \n. Can you please merge this pull request if it looks ok ?..thanks !\n. Can you please merge this pull request if it looks ok ?..thanks !\n. ",
    "matthew-rister": "Thanks, I will try to do so soon as I really do like axios. As a workaround for this, I was able to utilizing Promise.all (by referencing es6-shim.d.ts) instead of axios.all to allow for my TS code to compile without errors.\n. ",
    "Cameron-C-Chapman": "@rubennorte, @mzabriskie  would you be open to using Docusaurus instead of MKDocs? It is pretty similar but doesn't require Python to build, just an npm package.\n  . ",
    "ericwooley": "@mzabriskie Sorry I should have updated this issue.\nMy project is using the https://github.com/davezuko/react-redux-starter-kit, which included TechnologyAdvice/flow-interfaces automatically. Which is where flow was getting the information. Once I realized that, I submitted a PR to flow-interfaces, and that should work after their next publish.\n. ",
    "jamesblight": "This isn't an axios issue. You need to set your server to accept CORS requests. Look at the first answer to http://stackoverflow.com/questions/20035101/no-access-control-allow-origin-header-is-present-on-the-requested-resource\n. This isn't an axios issue. You need to set your server to accept CORS requests. Look at the first answer to http://stackoverflow.com/questions/20035101/no-access-control-allow-origin-header-is-present-on-the-requested-resource\n. ",
    "9tor": "Hi,\nI've already used it. by fixed at server added \n\"routes\": {\n          \"cors\": true\n  }\nat Hapi configuration connection\nThank you.\n. ",
    "kant2002": "@mzabriskie Could you merge in? Having updated type definitions in NPM module allow not install custom type definitions, but outdated API declaration is big miss.\n. ",
    "adamredwards": "I am also seeing this behaviour in IE 9 with the axios library. Can we expect the fix in @yp's fork to make it's way into release?. ",
    "Teddy-Schmitz": "We are also seeing this in Android Versions < 4.4.4 which don't support json as a responseType.  Is there any hope of getting @yp's fork into release to fix this issue?. ",
    "wang7x": "We are also seeing this in IE8, we use this temporary solution\njs\naxios.interceptors.response.use(\n  response => {\n    // IE 8-9 \n    if (response.data == null && response.config.responseType === 'json' && response.request.responseText != null) {\n      try {\n        // eslint-disable-next-line no-param-reassign\n        response.data = JSON.parse(response.request.responseText);\n      } catch (e) {\n        // ignored\n      }\n    }\n    return response;\n  }. ",
    "heeton": "@dmt0 Did you get this working? \n. ",
    "geocine": "You could do something like this:\n``` js\naxios.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\nconst originalRequest = error.config;\nif (error.response.status === 401 && !originalRequest._retry) {\noriginalRequest._retry = true;\n\nconst refreshToken = window.localStorage.getItem('refreshToken');\nreturn axios.post('http://localhost:8000/auth/refresh', { refreshToken })\n  .then(({data}) => {\n    window.localStorage.setItem('token', data.token);\n    window.localStorage.setItem('refreshToken', data.refreshToken);\n    axios.defaults.headers.common['Authorization'] = 'Bearer ' + data.token;\n    originalRequest.headers['Authorization'] = 'Bearer ' + data.token;\n    return axios(originalRequest);\n  });\n\n}\nreturn Promise.reject(error);\n});\n``\n. may you tryerror.statusplease\n. I am pretty sure it should beerror.response.status` you could check out the error object if it has those properties. I don't know why it doesn't work on your end if you only have that isolated sample code similar to what you have posted above. \n. ",
    "sripri": "Is this issue resolved?  I am using 0.15.2 and running into this weird problem. Is this issue resolved?  I am using 0.15.2 and running into this weird problem. ",
    "Calvin92": "@dmt0 The same with you...   I am using 0.15.2 ... So, which version is okay for this ?. ",
    "rlambertsen": "I used @geocine example from Oct, 5th 2016. I am using Vue.js 2.0 my solution was to watch the token for changes in the Vuex if it changed then to update anything that changed. I.E. if someone wanted to like a post but the JWT was expired, it intercepts the request and runs it again once the JWT has been refreshed. \njavascript\nVue.axios.interceptors.request.use((config) => {\n    if (store.state.auth) {\n      config.headers.common['Authorization'] = 'Bearer ' + store.state.token\n    }\n    return config\n  }, function (error) {\n    // Do something with request error\n    return Promise.reject(error)\n  })\nVue.axios.interceptors.response.use((response) => {\n    return response\n  }, function (error) {\n    let originalRequest = error.config\n    console.log(originalRequest)\n    if (error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true\n      Vue.axios.post('/users/token', null).then((data) => {\n        store.dispatch('authfalse')\n        store.dispatch('authtruth', data.data)\n        originalRequest.headers['Authorization'] = 'Bearer ' + store.state.token\n        return Vue.axios(originalRequest)\n      })\n    }\n    // Do something with response error\n    return Promise.reject(error)\n  }). @NanoDev777 Can you show me the code you are using? Also make sure you are updating the token or using the new one in the next request like so \noriginalRequest.headers['Authorization'] = 'Bearer ' + store.state.token // new header new token. ",
    "ametad": "In the response interceptor rejection function, the error.response.status is returned correctly in the latest version (0.15.3).. ",
    "muhammadaser": "is this solved ? im using version 0.15.3 but error.response is undefined. i try to handle 401 error.\nbtw im using \"Custom instance\". is this solved ? im using version 0.15.3 but error.response is undefined. i try to handle 401 error.\nbtw im using \"Custom instance\". ",
    "rmoskal": "I was able to adapt @rlambertsen example.  Worked fine.  . ",
    "dennis2k": "This is also an issue for me - v.0.15.3 - the error is just a callstack error string. ",
    "Toilal": "it works here, i'm running axios v0.16.1.\nThe only thing to note is that if you have set baseURL in your configuration, you have to remove it from the error.config object before retrying the initial request.\n```javascript\nthis.responseInterceptor = this.axios.interceptors.response.use((response) => response, (error) => {\n  let value = error.response;\nif (value.status === 401 && value.data.message === 'Expired JWT Token'\n    && (!value.config || !value.config.renewToken)) {\n    console.log('Token JWT expir\u00e9. Reconnexion ...');\n// renewToken performs authentication using username/password saved in sessionStorage/localStorage\nreturn this.renewToken().then(() => {\n  error.config.baseURL = undefined; // baseURL is already present in url\n  return this.axios.request(error.config);\n}).then((response) => {\n  console.log('Reconnect\u00e9 !');\n  return response;\n});\n\n} else if (value.status === 401 && value.config && value.config.renewToken) {\n    console.log('Echec de la reconnexion !');\nif (error.message) {\n  error.message = 'Echec de la reconnexion ! ' + error.message + '.';\n} else {\n  error.message = 'Echec de la reconnexion !';\n}\n\n} else if (value.status === 401) {\n    console.log('Acc\u00e8s refus\u00e9.');\n    // TODO: We could ask for username/password in a modal dialog...\n  }\nreturn Promise.reject(error);\n});\n``. Can youconsole.log(error)? Maybe it's an internal error and fails before a response is actually read ?. Can youconsole.log(error)` ? Maybe it's an internal error and fails before a response is actually read ?. Maybe Laravel (or something else) intercept the error before axios, and reject the promise with another data type ? I'm using axios in a VueJS app, it's currently a tiny app as it's a new project.\nTry to find out if you have another axios interceptor running before this one ?. I use both and it works. Do you return the right objects in your request\ninterceptor promise ?\nLe 11 avr. 2017 18:55, \"vijay kumar\" notifications@github.com a \u00e9crit :\n\n@Toilal https://github.com/Toilal I figured out the problem and not\nsure what could be the fix. If I remove\naxios.interceptors.request part, it works great. Should we use both\nrequest and response in same call ? if yes do you know a work around ?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/266#issuecomment-293326920,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABHJvmxkHSGY0mEXmiygeUW7xViqiiMXks5ru7CGgaJpZM4Hwec2\n.\n. \n",
    "vijaythecoder": "I looking for solution for the past 3 to 4 months on this and still nothing worked. I am using Laravel to return the error and browser is able to identify the 401 (Unauthorized) but no help with axios. \n@Toilal I am trying for hours to fix this every time I see a comment which could help but no luck, today I tried again with \"axios\": \"^0.16.1\"  no luck. Can someone please help on this? there are lot of people who need help with this. \nThe below code consoles Undefined. Simple the error doesn't have a response, no matter how you to try \njavascript\naxios.interceptors.response.use((response) => response, (error) => {\n    let value = error.response\n    console.log(value)\n}). Its a string \nconsole.log(error)\nError: Network Error\n    at createError (eval at <anonymous> (app.js:1611), <anonymous>:15:15)\n    at XMLHttpRequest.handleError (eval at <anonymous> (app.js:1590), <anonymous>:87:14)\nThis is when I console error.config\n. Yes I am using the axios with Vuejs App, This is how I did \n```javascript\n/ global API_URL /\nwindow.axios = require('axios').create({\n  baseURL: API_URL,\n  timeout: false,\n  params: {} // do not remove this, its added to add params later in the config\n})\n// Add a request interceptor\n/ global window axios /\naxios.interceptors.request.use(function (config) {\n  / global window Store /\n  let token = Store.get('jwt.token')\n  let location = Store.get('location')\n// console.log(location.id, location)\n  if (token) {\n    config.headers.common['Authorization'] = 'Bearer ' + token\n  }\n  // Append location id for every post/get request\n  if (location) {\n    if (config.data) {\n      config.data.location_id = location.id\n    }\n    else if (config.params) {\n      config.params.location_id = location.id\n    }\n  }\nreturn config\n}, function (error) {\n  // Do something with request error\n  return Promise.reject(error)\n})\naxios.interceptors.response.use((response) => response, (error) => {\n    console.log(error.config)\n})\n``\n. @Toilal I figured out the problem and not sure what could be the fix. If I removeaxios.interceptors.requestpart, it works great.  Should we use both request and response in same call ? if yes do you know a work around ?. I solved it, the 401 doesn't havecors. If any one using Laravel with Laravel Cors Package then here is the solution and you will haveerror.response` available \nhttps://github.com/barryvdh/laravel-cors/issues/89. ",
    "felixbuenemann": "I had the problem, that error was undefined in a response interceptor and it was caused by not resolving the promise for config in a token refresh request interceptor, if the token refresh failed.\nFaulty code in request interceptor:\njavascript\naxios.interceptors.request.use(config => this.dispatch('refreshAuthToken').then(() => {\n  // do stuff to set Authorization header\n  return Promise.resolve(config);\n}))\nFixed code:\njavascript\naxios.interceptors.request.use(config => this.dispatch('refreshAuthToken').then(() => {\n  // do stuff to set Authorization header\n  return Promise.resolve(config);\n// ensure we resolve config in error case\n}), () => Promise.resolve(config));\n. ",
    "Godofbrowser": "```javascript\n/// for multiple parallel requests\nlet isRefreshing = false;\nlet failedQueue = [];\nconst processQueue = (error, token = null) => {\n  failedQueue.forEach(prom => {\n    if (error) {\n      prom.reject(error);\n    } else {\n      prom.resolve(token);\n    }\n  })\nfailedQueue = [];\n}\naxios.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\nconst originalRequest = error.config;\nif (error.response.status === 401 && !originalRequest._retry) {\n  if (isRefreshing) {\n    return new Promise(function(resolve, reject) {\n      failedQueue.push({resolve, reject})\n    }).then(token => {\n      originalRequest.headers['Authorization'] = 'Bearer ' + token;\n      return axios(originalRequest);\n    }).catch(err => {\n      return err\n    })\n  }\n\noriginalRequest._retry = true;\nisRefreshing = true;\n\nconst refreshToken = window.localStorage.getItem('refreshToken');\nreturn new Promise(function (resolve, reject) {\n   axios.post('http://localhost:8000/auth/refresh', { refreshToken })\n    .then(({data}) => {\n        window.localStorage.setItem('token', data.token);\n        window.localStorage.setItem('refreshToken', data.refreshToken);\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + data.token;\n        originalRequest.headers['Authorization'] = 'Bearer ' + data.token;\n        processQueue(null, data.token);\n        resolve(axios(originalRequest));\n    })\n    .catch((err) => {\n        processQueue(err, null);\n        reject(err);\n    })\n    .then(() => { isRefreshing = false })\n})\n\n}\nreturn Promise.reject(error);\n});\n```. ",
    "rupertrutland": "No problem.\n. ",
    "UnsungHero97": "@mzabriskie why did you close this issue?\n. I accidentally pressed the close button, but I immediately reopened it, and as soon as I reopened it, I saw the update that you closed it. super strange.\n. Hmmm... I changed webpack to export to node instead of web, and it's working now. Not sure what the difference is, but seems like this isn't a real problem.\n. @mzabriskie ping\nI just wanted to follow up on this to try and get a better understanding of why this happens. I found that the build is different depending on if webpack is targeting node or web. In the case of web, webpack is picking up the browser field from axios's package.json:\n\"browser\": {\n  \"./lib/adapters/http.js\": \"./lib/adapters/xhr.js\"\n},\nAs such, if I configure webpack with target: 'web', I get the following in the bundle:\nvar adapter;\nif (typeof config.adapter === 'function') {\n  // For custom adapter support\n  adapter = config.adapter;\n} else if (typeof XMLHttpRequest !== 'undefined') {\n  // For browsers use XHR adapter\n  adapter = __webpack_require__(\"./node_modules/axios/lib/adapters/xhr.js\");\n} else if (typeof process !== 'undefined') {\n  // For node use HTTP adapter\n  adapter = __webpack_require__(\"./node_modules/axios/lib/adapters/xhr.js\");\n}\nNow, when I change to target: 'node', I get the following:\nvar adapter;\nif (typeof config.adapter === 'function') {\n  // For custom adapter support\n  adapter = config.adapter;\n} else if (typeof XMLHttpRequest !== 'undefined') {\n  // For browsers use XHR adapter\n  adapter = __webpack_require__(\"./node_modules/axios/lib/adapters/xhr.js\");\n} else if (typeof process !== 'undefined') {\n  // For node use HTTP adapter\n  adapter = __webpack_require__(\"./node_modules/axios/lib/adapters/http.js\");\n}\nShouldn't the build be consistent no matter what webpack is targeting? Isn't the point of this if-elseif-elseif block to determine which adapter to use based on the current environment at run-time? Why even have that if-elseif-elseif block if it gets changed at build-time?\n. I ended up creating 2 separate builds, each targeting their respective environments, 1 for web and 1 for node.. I ended up creating 2 separate builds, each targeting their respective environments, 1 for web and 1 for node.. ",
    "aeirola": "Axios supports custom adapters since 0.9.0, which can be used for testing. See commit https://github.com/mzabriskie/axios/commit/b9bb6ae7aacc7ec6053ae0551be7a403a33a5b18.\n. ",
    "batjko": "Since you closed this yourself, can you mention what solved the problem for you?\n. @nickuraltsev So what is a server doesn't send a cors header (and it's not your server so you can't change that), how would axios handle this? \nWe're still getting this issue.\n. ",
    "zhaoxiongfei": "Did supported file upload on node.js, now?. ",
    "grd2345": "well i want to test the response to see if they are still logged in,\nbasically if any log off response i cancel it so i dont have to test which\neatch request.\nOn Sat, Jul 16, 2016 at 12:38 PM, Matt Zabriskie notifications@github.com\nwrote:\n\nRequests cannot be canceled currently. See #333\nhttps://github.com/mzabriskie/axios/issues/333 for discussion around\nthat.\nAs for canceling a response can you provide more information about what\nyou are trying to do? What scenario do you have that you don't want the\nresponse from the request that has been made?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/277#issuecomment-233141869,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AFw0LOGQ24kf9CYse5zIAUGVkX_-uGrLks5qWRcUgaJpZM4H3YEh\n.\n\n\nDalum Software Solutions\nhttp://www.mygymsoftware.com\nPhone: 1-877-401-4567\nFax: 1-877-401-4567\n. ",
    "xixilive": ":+1: \n. ",
    "bojueWjt": "useful\n. ",
    "antegulin": "+1\n. ",
    "eckenroed": "+1. ",
    "jameskleeh": "How is this not supported? Seems like a very basic thing to do\n. ",
    "voraparth91": "I am trying to run this project in browser. I cannot find https module available. Can you tell me how this was made possible?\n. @nickuraltsev Is there any other way you can suggest me where I can configure specific certificates in browser for XHR requests?\n. Seems Axios also takes the string as an argument. This worked for me:\naxios.post('http://localhost:9000', \"{ dateTime: '\\\\/Date(1477384200000)\\\\/'}\" );. ",
    "zatziky": "Careful, the correct way to assign agent is by using the field httpsAgent.\nconst instance = axios.create({ httpsAgent: agent });. ",
    "johndvorakHR": "? I am currently facing this same problem.\n. ",
    "rasmuswoelk": "@johndvorakHR  My problem was that I was setting axios.defaults.xsrfHeaderName to null which IE didn't like. I set it to a random string instead and it worked :-) \n. @nickuraltsev Good point. Actually I am sending data with my post requests - I just forgot to add it to the example here. I have now added it.\nI am having problems with get requests as well.\n. I have now tested the same code with ajax $.get instead of axios and then it works fine. So the problem should be narrowed down to some compabillity problem with axios I guess?\n. Update: I have now tried to use the fetch library and this works fine. All of my code is tied up to axios so I would like to be able to use this instead though \ud83d\udc4d \nAny suggestions?\n. @nickuraltsev I have now tried to reproduce the problem by creating an isolated piece of code and then it worked just fine. \nKinda frustrated a looked through my own code and since IE didn't provide me with a very useful error code, I had to uncomment stuff until I narrowed down the root of the problem.\nWhat I found out was this:\nI have created a small module that I use in my project called request.js. All it really does is take an instance of axios, add some defaults and then export it.\nIt looked like this:\n```\nimport axios from 'axios';\naxios.defaults.headers.post['X-XSRF-TOKEN'] = Athliit.token;\naxios.defaults.xsrfHeaderName = null;\nexport default axios;\n```\nThe reason why I am overwritting the \"xsrflHeaderName\" is that in my project I supply my own token and therefore had to deactivate the default token. I did this by making it null and this apparently caused an error in IE.\nInstead I just renamed it to some random string: \naxios.defaults.xsrfHeaderName = 'xsrf_default_overwritten';\nAnd then it worked!\nSo the problem wasn't directly caused by axios but the reason I had to overwrite it was (as mentioned earlier) that axios suplies it's own token and I needed to use my own like this:\naxios.defaults.headers.post['X-XSRF-TOKEN'] = App.token;\nNow, I am not aware of any obvious solutions to this problem already provided by axios, so please refer me if so. \nIf not; maybe the default token should be overwritten when I set my own custom token under the same name.\nThanks for a good library though and I am just glad that I found the bug so I can continue using it :-) \ud83d\udc4d \n. ",
    "michaeleekk": "@mzabriskie What do you think about this PR ? Or use library like https://github.com/ljharb/qs ?\nI think it's a good idea to have the GET params work out of the box \ud83d\udc4d \n. ",
    "Morgul": "+1 Here's my use case: I use Bluebird on the server side. I also want to use axios on the server side for accessing some external REST APIs. However, since I'm on node 5, axios returns promises that work with the default Promise implementation, and I have to wrap them whenever I want to use .map or the like, which is common.\nMy choices are to either patch the global Promise, or tell axios which promise library to use. I'd rather do the latter.\n. ",
    "jvmccarthy": "Hi @rubennorte, funny that I was working on a PR at the same time you were closing this issue. I'm glad to see that promises are now a native feature, but I still think there are reasons for making promises pluggable.\nThank you and the team for your work on axios and for your consideration.\n. Thanks for the notes @rubennorte. When I tried a full spy, the test was failing because it was looking for config.Promise.resolve. While I could try to provide a more fully defined mock Promise, this shows that Bluebird can work with this approach. While it's a lot to bring in a new dev dependency for one test, I wasn't having success spying on es6-promise (or rsvp) since they don't react well to being wrapped in a spy.\nIf you like, I can try a more fleshed out spy. Thanks again for the consideration.\n. Nice reference @firstdoit. I didn't know about any-promise, and I think it's a great fit for libraries personally. Hopefully in a few years we can leave old browsers behind but for now this seems like a necessity and helps this library play nicely with others. I'll look into updating the PR to use any-promise. Thanks!\n(Also, I tried using Babel's runtime transform, and it has a pretty heavy footprint to pull in core-js. I would much rather allow for plugging in a promise impl where I can.)\n. (Updating branch and will then change to use any-promise.)\n. Updated to use any-promise. I like this model a lot more, and it really helps axios to be configurable for more applications and in libraries, in my opinion.\n. I don't know the interceptor API very well, and this change concerns me. If interceptors can set the config and defaults don't apply, does the Promise property always need to be specified with this addition? Or, should the absence of the Promise config here be protected against somewhere else?\n. ",
    "le0nik": "@rubennorte axios supports IE8+. You can't say, that Promises are a native feature, unless axios drops support of all browsers, that don't implement them natively.\nFor example, I recently had a use case, where I couldn't redefine globals, because I didn't own the environment(was developing a widget), but I also had to support browsers, that don't support Promises natively. So the code would just crush on axios. The only thing I can do is control which promise library is used by all the code in the widget. And I can't do that with axios. So I had to use another xhr library.\n. Sure. PR: https://github.com/mzabriskie/axios/pull/1041. Friendly ping :). Is this PR still relevant or should it be closed?. ",
    "ghost": "@nickuraltsev\nhttp://stackoverflow.com/questions/36591762/how-to-catch-status-cancelled-in-axios\n^^ I posted here in detail.. If not a problem, can you please go through the post?\n. @nickuraltsev I'll be posting the result for\naxios.post(...).then(response => {\n  console.log('Success', response);\n}).catch(error => {\n  console.log('Error', error);\n});\nsoon.\n. ```\nconst callApi = (url, params) => {\n  const formData  = new FormData()\n  for(let name in params) {\n    let param = params[name]\n    if (typeof param === 'object') {\n      param = JSON.stringify(params[name])\n    }\n    formData.append(name, param)\n  }\nreturn axios.post(url, formData)\n    .then(response => {\n      console.log(response)\n    })\n}\n```. Same here. There is some issues with the error object. Previously, we were able to retrieve the error object. We are facing issues now. I am rolling back to the previous version.\nBelow is the error message I get in the console:\nError: Request failed with status code 404\n    at createError (eval at <anonymous> (https://localhost:8080/vendors.js:34:14382), <anonymous>:15:15)\n    at settle (eval at <anonymous> (https://localhost:8080/vendors.js:59:22824), <anonymous>:18:12)\n    at XMLHttpRequest.handleLoad (eval at <anonymous> (https://localhost:8080/vendors.js:34:48), <anonymous>:75:7)\nIn the previous version, I used to get the proper error object with status code.\n. @mzabriskie \n```\nPOST https://192.168.1.188:3000/vendor/customerlocation/1 404 (Not Found)\nvendor-list.js?2389:57 \nObject {data: \"Unfortunately, No vendor was found.\", status: 404, statusText: \"Not Found\", headers: Object, config: Object\u2026}\n```\nI reverted to 0.12.0 and now I get a proper error object.\n. @lnmunhoz I reverted to the previous version. That's all I could think about. @nickuraltsev 75% of our project is built. So I hope you understand that right now, if we keep changing our pattern, it might be time consuming and our clients won't accept it pleasantly. ;)\n. @nickuraltsev Awesome and noted. :+1: \n. @Rewieer @all, Even I was facing this issue. I used to stop the server where I send API requests and then I used to make a request. It used to take minutes for displaying the error message.\nThen I found a solution provided by someone in the issues. I do not remember the issue number or title. (Please attach the issue here if someone recognizes the title of the issue from the code I am providing)\nThis is what I did:\n```\n// Rough implementation. Untested.\n// This is the code provided by some angel\nexport function timeout(ms, promise) {\n  return new Promise(function(resolve, reject) {\n    setTimeout(function() {\n      reject(new Error(\"timeout\"));\n    }, ms);\n    promise.then(resolve, reject);\n  });\n}\n// This is how I implemented it in my code\n    return timeout(5000, axios.get(${ROOT_URL}/customer/${id})).then((response) => {\n    if(response.status === 200) {\n\n      // Dispatch the success action\n      dispatch(receiveAddr());\n\n      return response;\n    }\n  }).catch(err => {\n\n    // If there was a problem, we need to\n    // dispatch the error condition\n    if(err.data && (err.status >= 400 && err.status <= 600)) {\n      dispatch(errAddr(err.data));\n    } else {\n      dispatch(errAddr('Please check your network connection and try again.'));\n    }\n\n    return err;\n  });\n\n```\n. @Rewieer Awesome. Thanks a lot for finding this post. I had any issues with response. Hence, can't comment anything on that. Sorry.\n. Yes, with post and get all works good\n``\nrequestInterceptor = axios.interceptors.request.use(function (config) {\n    config.headers = { Authorization:Bearer ${accessToken}` };\nreturn config;\n\n}, function (error) {\n    return Promise.reject(error);\n  });\nresponseInterceptor = axios.interceptors.response.use(function (response) {\n    return response;\n  }, function (error) {\n    const { message } = error;\nif (message.indexOf('401') !== -1) {\n  cookies.remove('access_token');\n  cookies.remove('refresh_token');\n  cookies.remove('expires_in');\n\n  replace('/login');\n}\n\nreturn Promise.reject(error);\n\n});\n```\n. There is nothing in the spec that says it can't send a body.\nOn Mar 24, 2017 5:47 AM, \"amgadserry\" notifications@github.com wrote:\n\nbecause get requests doesn't have a body use query params instead\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/787#issuecomment-289013505,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABxkwwcokyrLJMgAnIWfG39QZdi8WYR6ks5ro7tNgaJpZM4MnsIr\n.\n. https://stackoverflow.com/questions/29571284/for-restful-api-can-get-method-use-json-data. Yes I've tried setting content type.\n\nOn Mar 26, 2017 6:30 PM, \"Kautzmann\" notifications@github.com wrote:\n\n@Franke123 https://github.com/Franke123 Have you tried to set the\nheaders prop?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/787#issuecomment-289333666,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABxkwxC5Z1XstMLzIWKH2wZo5lPpzOUvks5rpxEbgaJpZM4MnsIr\n.\n. @rubennorte thanks for the response, create a PR as in try and fix it?. @rubennorte I'll try! I have little experience with big libraries like these so no promises :P. @rubennorte it might take some more investigation but it looks like XHR doesn't support sending data in GET requests. Not only this library.. having the same issue, the same GET request works on Postman but axios isn\u2019t passing the headers. Any updates on this ? thanks a lot. This was because I was being a bit stupid and not realising the default action of a button is to submit. \n\nWe live and we learn!. Encountered the same with react-boilerplate. Just installing the axios library results in errors. I need to run build again in react-boilerplate to get started.. Issue resolved  ! it's related to the axils-mock-adapter ( used in tests) in which I must used the passed url ( not the baseURL + url) \nin my api/index.js\n  axios.defaults.baseURL = 'http://localhost:3000/'\n\n  fetchShoppingLists: () => {\n    return axios.get('shoppinglists')\n    .catch(error => {\n      throw error\n    })\n  },\n\nand in my test spec.js\nmock.onGet('shoppinglists').reply(() => {\n  return new Promise((resolve, reject) => {\n\n. Thanks. Thanks. @sabakugaara thank you, but i just made a function that does my axios.post part and i just call the function every time in loop. The, response of every iteration function call does come a little late than the time taken by for loop to just iterate next. Hence a mismatch but looking at the end it gives desired result.\n```\nthis.previewFucnction(mainMetal,responseMetal,nameF,Layout)\n       })  \n  }\n},\n\npreviewFucnction(mainMetal,responseMetal,nameF,Layout){\n      var folderUrl = this.$store.state.fileUrl;\n      console.log(\"folderUrl:\",folderUrl)\n      return axios.post('http://localhost:3030/flows-dir-listing', {\n                  filename: mainMetal,\n                  text: responseMetal,\n                  type: 'file'\n              }).then( (response) => {\n```. I guess the late callback is not efficient when the loop runs for more no. of iteration.. @sabakugaara Yes you are getting my point.\nSo, how can i make promise.then synchronous with my for loop ?. thanks, ok~. I've also come across this issue before. In some cases even when I had a server error it showed as if it were blocked by a CORS policy.. Have you tried using this format?\naxios.post('https://api-helper.azurewebsites.net/token', {\n    username: 'api', \n        password: 'MY_PASSWORD', \n        grant_type: 'MY_GRANT_TYPE'\n}, {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n        }\n})\n.then(response => { \n    console.log(response)\n})\n.catch(error => {\n    console.log(error.response)\n});. There : https://github.com/axios/axios/blob/master/index.d.ts. @delirius325 Not yet!. @delirius325 I want to use api.get('appload') instead of axios(\"url1\") in the promises.push(axios(\"url1\")). How this could be done?. ",
    "devmarco": "I have the same question, and I didn't found anything talking about it.\n. I am not testing exactly @srahulprdxn posted. But I have the same question.\nTo reproduce you can try following:\nSet the timeout for example to 300\naxios.defaults.timeout = 300;\nThe request will be 'canceled'\n\nWe should be able to catch the error on 'catch'.\naxios.get(...).catch(error => {\n  console.log('Get canceled error', error);\n});\n. Cool, Thanks for the reply @nickuraltsev \n. ",
    "mherodev": "I found my way here because I was running into a silent timeout occurring, so for my past self, here's a tip:\nThe default timeout for Axios' requests may be longer than the timeout for the parent process, which will swallow this error. Manually set your Axios request timeout to be short and you'll see the error, e.g.\njavascript\naxios.get(url, { timeout: 5000 }). I found my way here because I was running into a silent timeout occurring, so for my past self, here's a tip:\nThe default timeout for Axios' requests may be longer than the timeout for the parent process, which will swallow this error. Manually set your Axios request timeout to be short and you'll see the error, e.g.\njavascript\naxios.get(url, { timeout: 5000 }). ",
    "a-eid": "I'm seeing this in 17.1, \ncould somebody explain what is the status of cancelled  ?. ",
    "nelsonomuto": "A wrapper I wrote for this  https://www.npmjs.com/package/@nelsonomuto/axios-request-timeout\nhttps://github.com/nelsonomuto/axios-request-timeout\n```\nimport axiosRequest from '@nelsonomuto/axios-request-timeout';\ntry {\n  await axiosRequest({\n    url: 'https://www.cnn.com/',\n    method: 'GET',\n    timeout: 10\n  });\n} catch(error) {\n  console.log({ error });\n  expect(error).toEqual({'message': 'timeout cancel'});\n}\n```\npassing tests\n```\ntest('request', async () => {\n  let resp = await axiosRequest({\n    url: 'https://www.cnn.com/',\n    method: 'GET'\n  });\n  expect(resp.status).toEqual(200);\n});\ntest('cancel request', async () => {\n  try {\n    await axiosRequest({\n      url: 'https://www.cnn.com/',\n      method: 'GET',\n      timeout: 10\n    });\n  } catch(error) {\n    console.log({ error });\n    expect(error).toEqual({'message': 'timeout cancel'});\n  }\n});\n. I created a wrapper for this to make is simply throw a timeout error you can catch \nhttps://www.npmjs.com/package/@nelsonomuto/axios-request-timeout\nimport axiosRequest from '@nelsonomuto/axios-request-timeout';\ntry {\n  await axiosRequest({\n    url: 'https://www.cnn.com/',\n    method: 'GET',\n    timeout: 10\n  });\n} catch(error) {\n  console.log({ error });\n  expect(error).toEqual({'message': 'timeout cancel'});\n}\n```. ",
    "rmartins90": "Can't find it too. Does anyone have any hint on this?. Can't find it too. Does anyone have any hint on this?. ",
    "MuraraAllan": "there is a \"set-cookies\" in response headers.\n. ",
    "sunnynegi": "Same problem unable to get set cookies from the header also try with withcredential : true. Any help on this. ankitsinghaniyaz Use withCredentials: true, in axiios they will help.\nmethod: 'GET',\n      url: BACKEND_URL+'/notification/new/?pageNum='+pageNum+'&pageSize='+resultSize,\n      withCredentials: true,\n      headers : {'Content-Type': 'application/x-www-form-urlencoded'}\nThis one work for me.. ",
    "ankitsinghaniyaz": "I'm also facing this. The cookie is there on the network tab, but nothing inside the response from axios.. So I had some gaps in my knowledge regarding how cookies work. Putting it here so that others can benefit from this.\n\nHTTP ONLY (Secure) cookies cannot be accessed in JavaScript. If you try to read some token, etc from a secure cookie it's not going to work.\nCross-domain cookies cannot be accessed. In case you are building a single page application and your server is on a different domain. You cannot access the cookies on your SPA. The withCredentials flag will just make sure that the network calls made include the cookies and accept any incoming cookies.\n\nI hope this will help someone. :). ",
    "gil-air-may": "\nSo I had some gaps in my knowledge regarding how cookies work. Putting it here so that others can benefit from this.\n\nHTTP ONLY (Secure) cookies cannot be accessed in JavaScript. If you try to read some token, etc from a secure cookie it's not going to work.\nCross-domain cookies cannot be accessed. In case you are building a single page application and your server is on a different domain. You cannot access the cookies on your SPA. The withCredentials flag will just make sure that the network calls made include the cookies and accept any incoming cookies.\n\nI hope this will help someone. :)\n\nThis saved me a lot of time. Thank you !. ",
    "BlakeLucchesi": "@nickuraltsev Can you share any additional documentation on what is required to support upload streams on the server side?  Also, if I stream data to the server does that mean the response has to be streamed back as well?\nReally great job on the PR btw, updated tests and documentation are great!\n. ",
    "wilk": "I didn't understand how this is implemented from axios.\nCan I use axios with form-data on Node.js?\nThis is an example but it's not working:\n``` javascript\nvar FormData = require('form-data'),\n      axios = require('axios'),\n      fs = require('fs'),\n      data = new FormData();\ndata.append('something', 'something');\ndata.append('file', fs.createReadStream('myFile.md');\naxios.post('http://localhost:12345/api', data, {headers: data.getHeaders()}).then(...).catch(...);\n```\nThis doesn't send data to the server.\nWhat's wrong with that code?\nThanks in advance,\nWilk\n. @nickuraltsev right, it's working with 0.11.0, thanks ;)\n. ",
    "jeffijoe": "How do I specify a file name for the stream upload on the server? Usually when you send a HTML file from the browser, it has a file name which is sent to the server.. Right but I think for it to be as agnostic as possible you would need to specify it in some way for libraries like busboy to pick it up. Right but I think for it to be as agnostic as possible you would need to specify it in some way for libraries like busboy to pick it up. I like the idea of cancellation tokens as @just-boris is doing - this is also how it's done in .NET.\nBasically make a cancellation token and pass it in, and when cancel() is called, abort the request and reject with a CancellationError.\n. I like the idea of cancellation tokens as @just-boris is doing - this is also how it's done in .NET.\nBasically make a cancellation token and pass it in, and when cancel() is called, abort the request and reject with a CancellationError.\n. ",
    "digital-flowers": "@jeffijoe i don't think this is an issue when you create form data you can send the filename as another form data value formdata.append(\"filename\",filename). axios in react native uses the nodejs implementation as an adapter and it's working fine in both android and ios but in android I don't know why you should add the correct image/file type to your form data or it will raise \"Network Error\" try this formData.append('file', {...photo,type:\"image/jpeg\"}); or png \n. ",
    "isNeilLin": "var FormData = require('form-data');\nvar axios = require('axios');\nvar form = new FormData();\nform.append('bookid',id);\nform.append('classes',classes);\nform.append('data',fs.createReadStream(__dirname + `${file}`));\naxios.defaults.headers.common = form.getHeaders();\naxios.post(`${baseUrl}/outline/create`,form)\n.then((response)=>{\n    console.log(response.data)\n})\n.catch(e=>{console.log(e)})\nI try to post formdata,but not success because content-length\n\n. ",
    "shyamchandranmec": "@nickuraltsev \n I am facing the same issue in IE edge. Its not even firing the request. The response which I get is same as what @rasmuswoelk  posted. I am following the same approach by creating a module and making a generic instance of axios. It works in other browsers like chrome and firefox and safari. \nHere is the code which I am using:\nvar req = axios.create({\n        baseURL: config.fullURL,\n        timeout: 1000000000000000000000,\n    })\nreq.defaults.headers.common['Authorization'] =  'JWT ' + token;\nAny help would be of great help.\n. @nickuraltsev \nI have opened a new issue. Here is the link : https://github.com/mzabriskie/axios/issues/486\n. +1 Please fix this issue.. @nickuraltsev  I will try it out and let you know. Thanks for the quick response.\n. @nickuraltsev  I reduced the timeout to 5000 and it worked!!!. Thanks a lot. \nThe reason for having a huge timeout is because we enable our users to upload huge files close to 25gb. So I need a huge timeout.. Is there any way to keep an infinite timeout if I can't specify a large timeout.\n. @nickuraltsev  I reduced the timeout to 5000 and it worked!!!. Thanks a lot. \nThe reason for having a huge timeout is because we enable our users to upload huge files close to 25gb. So I need a huge timeout.. Is there any way to keep an infinite timeout if I can't specify a large timeout.\n. ",
    "anhvoduy": "at Client Side, can set headers for request:\n        - axios.defaults.headers.get['Pragma'] = 'no-cache';\n        - axios.defaults.headers.get['Cache-Control'] = 'no-cache, no-store';\nat Server Side, set headers for response:\n        - https://www.npmjs.com/package/nocache\n. ",
    "js08": "@mzabriskie hey I went through the code but not sure how you guys implemented...any documentation will help us in understanding the implementation...\n. @mzabriskie hey I went through the code but not sure how you guys implemented...any documentation will help us in understanding the implementation...\n. @mzabriskie can you help me :(\n. ",
    "phantom42": "Yes, I'll get a screenshot in the morning. The response sent back is the error message that the post variables are missing from the data sent. \n. @mzabriskie definitely sounds similar. \nSorry for the delay. Here's some screenshots from my network inspector. I've only called the actioncreator and axios once, but It's sending two POSTS. The second one is getting a 302, but again, if I change this to just a standard jQuery ajax post, everything works fine. \n\n\n. No, I just added that commented line into the example so I could reference exactly how I have successfully sent the data via jQuery. I've removed it entirely from the code that is running.\n. If I use the jQuery POST instead, this is what I see in my network tab. Just the one connection is made, and all the data is posted correctly.\n\n. Ok, I think the extra post must have had something to do with redux-logger, which I removed yesterday, and now I'm only getting the single post going out, resulting in the 302 and the payload not being submitted properly.\n. Ok, I think the extra post must have had something to do with redux-logger, which I removed yesterday, and now I'm only getting the single post going out, resulting in the 302 and the payload not being submitted properly.\n. Damn. Any expected timeline? We have some forms with too much data for url strings. This should work short-term for my specific problem right now, though.\n. Damn. Any expected timeline? We have some forms with too much data for url strings. This should work short-term for my specific problem right now, though.\n. Awesome on both counts. Thanks so much.\n. Awesome on both counts. Thanks so much.\n. ",
    "sathify": "Same problem here not able to test with nock. \n. ",
    "jordanpapaleo": "After three days of 'nock'ing my head against the wall, I found this post and tried moxios.  Worked first time.  Thank you @mzabriskie for preventing me from retiring as a developer and becoming a barista ;)\n. ",
    "dyakimenko-p": "Works for me:\n```js\nimport {expect} from 'chai'\nimport axios from 'axios' // v0.15.3\nimport httpAdapter from 'axios/lib/adapters/http'\nimport nock from 'nock' // v9.0.2\nconst host = 'http://localhost';\naxios.defaults.host = host;\naxios.defaults.adapter = httpAdapter;\ndescribe('suite', () => {\n  it('test', done => {\n    nock(host)\n      .get('/test')\n      .reply(200, 'test data');\naxios.get('/test').then(response => {\n  expect(response.data).to.be.equal('test data');\n  done();\n});\n\n});\n});\n```\n. ",
    "shai32": "to test the React lifecycle, I need to add\naxios.defaults.adapter = httpAdapter;\nnot in the test file but in other files (my action creator that import axios, so adding the line in test will not help)\nmeaning this line will run also when I am not testing. does it affect how axios work and will cause problem in production?\n. to test the React lifecycle, I need to add\naxios.defaults.adapter = httpAdapter;\nnot in the test file but in other files (my action creator that import axios, so adding the line in test will not help)\nmeaning this line will run also when I am not testing. does it affect how axios work and will cause problem in production?\n. @rubennorte \nI can't do that, I am testing Redux store and actions.\nso in my test file I am dispatching an action:\n    const dispatchResult = await store.dispatch(authRequest({}));\nauthRequest is an action creator that does the api call and adding \naxios.defaults.adapter = httpAdapter;\nto the test file doesn't work.\nauthRequest.js is independent file that define the action creator and does it's own import axios.\n. @rubennorte \nI can't do that, I am testing Redux store and actions.\nso in my test file I am dispatching an action:\n    const dispatchResult = await store.dispatch(authRequest({}));\nauthRequest is an action creator that does the api call and adding \naxios.defaults.adapter = httpAdapter;\nto the test file doesn't work.\nauthRequest.js is independent file that define the action creator and does it's own import axios.\n. I tried it but all my test failes, maybe I am doning somthine wrong:\nIn my test file:\n\nimport axios from 'axios';\nimport httpAdapter from 'axios/lib/adapters/http';\naxios.default.adapter = httpAdapter;\nnock(process.env.SEVER_URL).post('/auth', credentials).reply(200, data);\n\nIn my authRequest.js\n\nconst app = axios.create({\n  baseURL: process.env.SEVER_URL,\n  timeout: 2000,\n});\napp.post('/auth', credentials)\n\nabove example doesn't work, If I will move the 'axios.default.adapter = httpAdapter' from test file to authRequest.js, every thing will work.\nwhat should I do?\n. I tried it but all my test failes, maybe I am doning somthine wrong:\nIn my test file:\n\nimport axios from 'axios';\nimport httpAdapter from 'axios/lib/adapters/http';\naxios.default.adapter = httpAdapter;\nnock(process.env.SEVER_URL).post('/auth', credentials).reply(200, data);\n\nIn my authRequest.js\n\nconst app = axios.create({\n  baseURL: process.env.SEVER_URL,\n  timeout: 2000,\n});\napp.post('/auth', credentials)\n\nabove example doesn't work, If I will move the 'axios.default.adapter = httpAdapter' from test file to authRequest.js, every thing will work.\nwhat should I do?\n. ?. ?. ?. any update?. ",
    "hems": "I believe the ideal solution would be nock to transparently fallback to xhr-mock when appropriate?\nas i suggested recently here: https://github.com/nock/nock/issues/1160. ",
    "cdaringe": "FYI, node 4.4.2\n. ",
    "cspray": "@nickuraltsev Hi, I've really enjoyed using axios in the chatbot I'm creating for my company. I need this PR to support some needed functionality and currently plan to fork my own copy until this is available. If it is ok with @dublx I would be comfortable with cleaning this branch up to not change the status code error range, update the README and fix any conflicts. Alternatively I could simply create a new PR.\nIn short, I'd like to see the work I'm about to do be put back into axios to share with others and so I don't have to maintain my own fork. Please let me know if I can be assistance.\n. @nickuraltsev  Will do!\n. ",
    "brbsk": "Hi guys @dublx @nickuraltsev @cspray @mzabriskie, is there a chance that this PR would be merged soon? I'm really looking forward to it :) Can I help with it somehow?\nCheers :)\n. ",
    "eilgin": "excellent, i was thinking about doing that since our REST API does send 404 that shouldn't be treated as an error.\nSo definitely \ud83d\udc4d \n. ",
    "lazharichir": "can't wait for this to be fixed as my backend also returns 400 that shouldn't trigger errors but simply a *_REJECTED so I can handle it / translate it for the user on the frontend. . What is the right fix for that, even if it has to be done on our app logic? Happens with http://charlesfloate.co.uk/topical-seo-introduction. ",
    "capaj": "sorry, this was a CORS issue\n. ",
    "skdavies": "What do you mean by the \"browser on Node\"? \n. I'm using it in a browser app\n. There are 2 requests. The first one is successful but the second with the actual request payload says \"with provisional headers shown.\" Preview and response are unavailable, the request never hits the server, and has no status. I can make the same call successfully using postman.\nThanks very much for the fast response time.\n. Using chrome://net-internals, I can see the request is being cancelled. Can't tell why yet, but it doesn't appear to be an issue with axios so I am closing the issue. Thanks for the help.\n. ",
    "niftylettuce": "I wrote a fetch implementation, which was inspired by axios, superagent, and request here https://github.com/glazedio/frisbee.  I really do wish axios used fetch though!!! I love this package.\n. ",
    "es6Test": "I see, I'm surprised the fetch guys haven't sorted this yet.\n. ",
    "GanbilegBor-minted": "Also as of right now fetch is not supported on any Safari and EI versions (scroll down), unless you want to add a polyfill. And unfortunately even if you're using babel fetch polyfill doesn't come with it so it's a little bit of extra work to add a polyfill like this one.\n. ",
    "larsnystrom": "Fetch does not support upload progress.\nPerhaps the information in this thread could be added to the readme? I think there are plenty of people who choose fetch over xhr just because it's the shiny new thing, and then have to refactor a bunch of code as they realise fetch doesn't support as many use cases as xhr does.\n. @niftylettuce No, not always. You need permissions to run a WebSocket-server on your host. That\u2019s not always a possibility. Many people have sites on cheap hosts with LAMP-stacks. Even when you have full control of your web host, the fact that you have to change your server-side code to deal with file uploads just because you decided to use fetch over XHR in the client should give paus for thought.. ",
    "pke": "@larsnystrom I also just now discovered axios because of apisauce using it. I wondered why it didn't use fetch. I am using fetch because its the default for any reactjs sample out there.\nBut after reading this comparison here I'll ditch fetch because I want timeouts and always wondered why fetch does not have it. And if you see the referenced issues over there, they are so old I doubt they will ever end up in fetch.\nSo I think a comparison of two libraries on the front pages' readme would help people to choose one over the other.\n. I really struggle to understand why one has to know the type of response before sending the request. Since the HTTP spec allows the server to respond with anything he wants, and treat Accept as SHOULD how can we know beforehand what the response will be? Can't Axios figure out the responseType internally based on the actual servers response?\nFiguring out why axios corrupted a download that downloaded just fine with cURL took hours :(. ",
    "gustawdaniel": "There is great article about this:\n\nhttps://medium.com/@thejasonfile/fetch-vs-axios-js-for-making-http-requests-2b261cdd3af5\n\n\nfetch is better for low level sollution eg. streaming\naxios is better for typical web applications. There is great article about this:\n\n\nhttps://medium.com/@thejasonfile/fetch-vs-axios-js-for-making-http-requests-2b261cdd3af5\n\n\nfetch is better for low level sollution eg. streaming\naxios is better for typical web applications. \n",
    "vzaidman": "not so great since it discusses only one minor difference as far as i see. ",
    "ruchern": "Axios interceptors for me. That is a breeze to setup configuration for global contents.. ",
    "cludden": "This would also be useful for global error handling with helpful info\njavascript\naxios.interceptors.response.use(function(res) {\n    return response;\n}, function(err, config} {\n    // log all failed/errored requests with their config details\n    bugsnag.notify(err, config);\n});\n. ",
    "lidianhao123": "@mzabriskie \nconst instance = axios.create({\n    baseURL: host,\n});\ninstance.interceptors.response.use((response) => {\n    return response;\n  }, (error) => {\n    let response = error.response;\n    console.info(response); // undefined\n  });. ",
    "felix9ia": "(error) =>{\nconsole.info(error.config);\n}. (error) =>{\nconsole.info(error.config);\n}. ",
    "josh-egan": "Ya you bet.\nWe're using sinon and sinon-as-promised for creating stubs in our tests. Stubbing the axios.get method looks something like this:\n``` js\nconst axios = require('axios')\nconst sinon = require('sinon')\nrequire('sinon-as-promised')\n...\nbeforeEach(() => {\n  const mockApiResponse = { id: 'asdf' }\n  sinon.stub(axios, 'get').resolves({ data: mockApiResponse })\n})\nafterEach(() => {\n  axios.get.restore()\n}\n```\nIt is not possible to mock out the root axios function with sinon. The only way to mock a function that is exported as the root of module.exports is to mock the module loading system using something like mock-require or proxyquire. Mocking the module loading system is more heavy handed and takes more setup, so I prefer not to go that route.\nIf axios.request was available, then I could simply sinon.stub(axios, 'request').resolves({ data: mockApiResponse }) and my test would be ready to go.\n. Sounds good, thanks! merge conflicts have been resolved.\n. ",
    "rafaelbiten": "I noticed that setting Content-Type or not doesn't change anything on this case. When I try to send the request with Axios, seems like data goes as an empty string so the backend will respond with an error related to missing parameters.\nI was using 0.9.1 but the problem persists on 0.11.0.\nPlease let me know if there's anything else I can do to help debug this, ok?\nTks @nickuraltsev !\n. @nickuraltsev see if this helps:\n\nI think the Request Headers are wrong.\n. Well, we should have but the data goes as an empty string. I don't know what may be breaking it (considering the code I shared on my first post).\n. @nickuraltsev right! What you see on that screenshot is all I have on dev tools.\n@rrapant  may be right, but I'm almost sure that setting 'Content-Type'or not, at least on this case, wasn't changing anything. I would have to check again to be sure.\n. I'm also new to TS and I've been trying to use it on a very small/simple project.\nI'm really confused on how to use TypeScript without using 'any' or getting any TS errors/warnings.\n\nI tried many different things, but the image above was probably my best attempt but for some reason I still get the Type 'void' is not assinable to type 'string' error. I was wondering if this could be related to this bug.\nIf I use (u: string): Axios.IPromise<any>, it fixes the issue, but I'm trying to avoid using 'any'.\nTks!\n. ",
    "rrapant": "Possibly related header issue.  When content-type is set in config object in request it is concatenated e.g. \n        axios.post(\n            'https://example.com/login',\n            {emailAddress: email, password: hashedPassword},\n            {headers: {'content-type': 'application/json'}}\n        );\nheader content-type comes in as application/json,application/json\nbody will not be parsed in this case\n. Possibly related header issue.  When content-type is set in config object in request it is concatenated e.g. \n        axios.post(\n            'https://example.com/login',\n            {emailAddress: email, password: hashedPassword},\n            {headers: {'content-type': 'application/json'}}\n        );\nheader content-type comes in as application/json,application/json\nbody will not be parsed in this case\n. ",
    "Sreekhar": "Hi @nickuraltsev , I'm getting the same issue.\n```\n      var fd = new FormData();\n      fd.append('file', this.refs.multipartfiles.files[0]);\n        const config = { headers: { 'Content-Type': 'multipart/form-data' } };\n        axios.post('/dataAPI/sendFile', {\n            \"UploadCommand\": fd\n          }, config)\n          .then(function (response) {\n            console.log(response);\n          })\n          .catch(function (error) {\n            console.log(error);\n          });\n\n```\nPlease find the screen shot of my header information below, \n\nI have a question, does axios support sending multi-part data files to node server?\n. @yungpanda I found an alternative for doing that. I guess I'll have to recreate the API now. Anyways I'll try and check if it works, I'll keep the thread updated. Thanks for your reply.. ",
    "yungpanda": "@Sreekhar I don't know if it will work, but could you maybe add the FormData as the second argument instead of wrapping it in another object?\naxios.post('/dataAPI/sendFile', fd, config)\nIf you need to use 'UploadCommand' as the name of the part where the file is, you need to use this\nfd.append('UploadCommand', this.refs.multipartfiles.files[0]);. @Sreekhar I don't know if it will work, but could you maybe add the FormData as the second argument instead of wrapping it in another object?\naxios.post('/dataAPI/sendFile', fd, config)\nIf you need to use 'UploadCommand' as the name of the part where the file is, you need to use this\nfd.append('UploadCommand', this.refs.multipartfiles.files[0]);. ",
    "askona": "@Sreekhar Set Content-Type to undefined to let browser change it to multipart/form-data and add boundary automatically. ",
    "krzkaczor": "@nickuraltsev this is a minimal example that doesn't work on node:\n```\nconst data = new FormData();\ndata.append('action', 'ADD');\ndata.append('param', 0);\ndata.append('secondParam', 0);\naxios.post('http://httpbin.org/post', data).then(req => {\n  console.log('Req done: ', req)\n}).catch(err => {\n  console.error('Error: ', err)\n})\n```\nError: write after end. @nickuraltsev this is a minimal example that doesn't work on node:\n```\nconst data = new FormData();\ndata.append('action', 'ADD');\ndata.append('param', 0);\ndata.append('secondParam', 0);\naxios.post('http://httpbin.org/post', data).then(req => {\n  console.log('Req done: ', req)\n}).catch(err => {\n  console.error('Error: ', err)\n})\n```\nError: write after end. @PierreCavalet nope, I used request-promise instead. . @PierreCavalet nope, I used request-promise instead. . @dan-boa here u go: https://gist.github.com/krzkaczor/bdbe09d4096b051a3c18387c4ca79a06 It also shows a hack how to send string as file (setting path). @dan-boa here u go: https://gist.github.com/krzkaczor/bdbe09d4096b051a3c18387c4ca79a06 It also shows a hack how to send string as file (setting path). ",
    "PierreCavalet": "@krzkaczor Have you found any work around to send multipart/form-data with axios ?. @krzkaczor thanks, forced to switch too. ",
    "juan-nunez": "@krzkaczor Try adding in the content-type if you have not done so already\nconst config = { headers: { 'Content-Type': 'multipart/form-data' } };\nlet fd = new FormData();\nfd.append('file',files[0])\nreturn axios.post(\"http://localhost:5000/upload\", fd, config)\n. ",
    "bibiboot": "@krzkaczor i am also facing the same issue with axios and multipart/form-data. Can you post the gist of the code you used with request-promise.. ",
    "Janekk": "I had the same issue (in the browser, not in node). Turned out it works if you don't set Content-Type header at all and let axios to figure things out (also check if you don't set that header as a default in the axios interceptors too. If you need some defaults for the rest of the API calls, you can make a seperate axios instance for FormData() requests). ",
    "andrefox333": "I ended up going with request-promise in the node side when trying to upload to another remote server.. I ended up going with request-promise in the node side when trying to upload to another remote server.. ",
    "ryhinchey": "I switched over to request-promise for this same reason.  Love axios otherwise though!. I switched over to request-promise for this same reason.  Love axios otherwise though!. ",
    "RichardWithnell": "@guncha Your example worked for me in 0.15.3, until I tried to upload a binary file, which ended up encoded as UTF8. Telling concat to use a buffer fixed the issue. \n```javascript\nconst concat = require(\"concat-stream\")\nconst fd = new FormData()\nfd.append(\"hello\", \"world\")\nfd.append(\"file\", fs.createReadStream(binaryFile))\nfd.pipe(concat({encoding: 'buffer'}, data => {\n  axios.post(\"/hello\", data, {\n    headers: fd.getHeaders()\n  })\n}))\n```. ",
    "msonowal": "same issue here\n. ",
    "demeter-macik": "just add boundary to Content-Type:\n```js\nconst request = require('axios');\nconst FormData = require('form-data');\nconst fs = require('fs');\nlet data = new FormData();\ndata.append('file1', fs.createReadStream('./image1.jpeg'), 'image1.jpeg');\ndata.append('file2', fs.createReadStream('./image2.jpeg'), 'image2.jpeg');\nlet options = {\n    method: 'POST',\n    url: 'http://localhost:3200/upload',\n    headers: {\n        'Content-Type': multipart/form-data; boundary=${data._boundary}\n    },\n    data\n};\nreturn request(options)\n    .then(response => {\n        console.log(response);\n    });\n```. ",
    "vinaygoel79": "Hey,\nI am get this file in json format can anyone help me how should i convert it into multipart file.\nPlatform used is java8.\n\"body\": \"------WebKitFormBoundaryQsJGeBuR8e9dQ4Pm\\r\\nContent-Disposition: form-data; name=\\\"file\\\"; filename=\\\"backup prolog.txt\\\"\\r\\nContent-Type: text/plain\\r\\n\\r\\n%All the Pre-Defined relations\\r\\nconnected(hira,rohit,father).\\r\\nconnected(rohit,rakesh,father).\\r\\nconnected(ram,hira,father).\\r\\nconnected(kavri,hira,mother).\\r\\nconnected(hira,kavri,son).\\r\\nconnected(arun,vinayak,father).\\r\\nconnected(vinayak,arun,son).\\r\\nconnected(arun,shashi,husband).\\r\\nconnected(shashi,arun,wife).\\r\\nconnected(vinayak,vardaan,brother).\\r\\nconnected(vardaan,vinayak,brother).\\r\\nconnected(shashi,vinayak,mother).\\r\\nconnected(vinayak,shashi,son).\\r\\n\\r\\n\\r\\n\\r\\nconnected2(X,Y,D) :- connected(X,Y,D).\\r\\n%connected2(X,Y,D) :- connected(Y,X,D).\\r\\n\\r\\nnext_node(Current, Next,R, Path) :-connected2(Current, Next, R),not(member(Next, Path)).\\r\\n\\r\\nfunc(how,is,X,related,to,Y):-depth_first(X,Y,[X],P),write(P).\\r\\n%Procedure to Start the depth_first\\r\\ndepth_first(Goal, Goal, _, [Goal]).\\r\\n\\r\\ndepth_first(Start, Goal, Visited, [Start,is,R,of|Path]) :-next_node(Start, Next_node,R, Visited),depth_first(Next_node, Goal,[Next_node,R|Visited], Path).\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n------WebKitFormBoundaryQsJGeBuR8e9dQ4Pm--\\r\\n\"\nthanks. Hey,\nI am get this file in json format can anyone help me how should i convert it into multipart file.\nPlatform used is java8.\n\"body\": \"------WebKitFormBoundaryQsJGeBuR8e9dQ4Pm\\r\\nContent-Disposition: form-data; name=\\\"file\\\"; filename=\\\"backup prolog.txt\\\"\\r\\nContent-Type: text/plain\\r\\n\\r\\n%All the Pre-Defined relations\\r\\nconnected(hira,rohit,father).\\r\\nconnected(rohit,rakesh,father).\\r\\nconnected(ram,hira,father).\\r\\nconnected(kavri,hira,mother).\\r\\nconnected(hira,kavri,son).\\r\\nconnected(arun,vinayak,father).\\r\\nconnected(vinayak,arun,son).\\r\\nconnected(arun,shashi,husband).\\r\\nconnected(shashi,arun,wife).\\r\\nconnected(vinayak,vardaan,brother).\\r\\nconnected(vardaan,vinayak,brother).\\r\\nconnected(shashi,vinayak,mother).\\r\\nconnected(vinayak,shashi,son).\\r\\n\\r\\n\\r\\n\\r\\nconnected2(X,Y,D) :- connected(X,Y,D).\\r\\n%connected2(X,Y,D) :- connected(Y,X,D).\\r\\n\\r\\nnext_node(Current, Next,R, Path) :-connected2(Current, Next, R),not(member(Next, Path)).\\r\\n\\r\\nfunc(how,is,X,related,to,Y):-depth_first(X,Y,[X],P),write(P).\\r\\n%Procedure to Start the depth_first\\r\\ndepth_first(Goal, Goal, _, [Goal]).\\r\\n\\r\\ndepth_first(Start, Goal, Visited, [Start,is,R,of|Path]) :-next_node(Start, Next_node,R, Visited),depth_first(Next_node, Goal,[Next_node,R|Visited], Path).\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n------WebKitFormBoundaryQsJGeBuR8e9dQ4Pm--\\r\\n\"\nthanks. ",
    "tkshnwesper": "Code works in browser but not on node.\nes6\nconst fdata = new FormData();\nfdata.append('user', u);\nfdata.append('hostnames', n.join(' '));\nconst host = localStorage.getItem('host');\nconst port = localStorage.getItem('port');\naxios({\n  url: `http://${host}:${port}/hosts/remove`,\n  method: 'post',\n  data: fdata\n}).then(response => {\n  if (response.status === 200) {\n    console.log(response.data);\n    console.log('Removed host successfully');\n  }\n  return null;\n}).catch(er => console.log(er));. Yeah, I tried with that form-data package. Well, it's ok now, I changed the server-side API to parse JSON instead.. you can try this https://expressjs.com/en/4x/api.html#req @ar412 . ",
    "corysimmons": "Please reopen until there is some consistent answer/workflow for this. It seems like a lot of people are still experiencing issues with this.. Please reopen until there is some consistent answer/workflow for this. It seems like a lot of people are still experiencing issues with this.. @doytch What is myBigObject?? Where is that coming from?. I should've updated. We ended up just making a helper that converted every body to FormData (similar to what @doopcl did) then passed to axios. Afterwards we cleaned it up to not rely on axios and just use native fetch.. ",
    "DavidRueter": "HTTP posts that include binary file data seem to work fine in axios v0.16.2\n```\n// The following was tested successfully with axios v0.16.2\n// Create a new form.  Note:  could also specify an existing form as\n// the parameter to the FormData() constructor to copy all the elements\n// from the existing form to the new one being created.\nvar tempFormData = new FormData();\nvar someNoteValue = 'Hello World';\nvar someAudioData = [];  // populate this with data from file, with MediaRecorder() etc.\n// Add form fields\ntempFormData.set('SomeNote', 'Hello World');\ntempFormData.set('SomeRecording', someAudioData[0], 'SampleRecording.webm');\n// Optional:  output list of form fields to the console for debugging\nfor (var pair of tempFormData.entries()) {\n    console.log('Form field: ' + pair[0] + ', ' + pair[1]);\n}\n// Call Axios to post the form to myurl\naxios({\n    method: 'post',\n    url: 'myurl',\n    data: tempFormData,\n    config: { headers: {'Content-Type': 'multipart/form-data' }}\n})\n    .then(function (response) {\n        //handle success\n        console.log(response);\n    })\n    .catch(function (response) {\n        //handle error\n        console.log(response);\n    });\n        }\n\n```\n. This is definitely working for me\u2014all browsers, including Safari iOS.\nMy code is something like this:\nfunction samplePost (config) {\n// save reference this\n\nlet that = this;\n\n\n\n// can optionally pull in form fields from an existing HTML form)\n\nlet myForm = document.getElementById('myForm');\n\nlet myFormData = new FormData(myForm);\n\n\n\n// add in data from config.data if applicable\n\nif (config && config.data) {\n\n    that.objToStr(config.data, '', myFormData);\n\n\n\n    for (let n2 in config.data) {\n\n        if (config.data.hasOwnProperty(n2)) {\n\n            myFormData.set(n2, config.data[n2]);\n\n        }\n\n    }\n\n}\n\n\n\nif (config.binaryFiles && config.binaryFiles.length > 0) {\n\n\n\n    for (let i = 0; i < config.binaryFiles.length; i = i + 1) {\n\n        let thisFile = config.binaryFiles[i];\n\n        myFormData.append(thisFile.fieldName, thisFile.binaryData, thisFile.fileName)\n\n    }\n\n}\n\n\n\n\n\nlet axiosConfig = {\n\n    method: 'post',\n\n    url: config.url,\n\n    data: myFormData,\n\n\n\n    onUploadProgress: config.onUploadProgress,\n\n};\n\n\n\nif (config && config.binaryFiles && config.binaryFiles.length > 0) {\n\n    axiosConfig.headers = {'Content-Type': 'multipart/form-data'};\n\n}\n\nelse {\n\n    axiosConfig.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n}\n\n\n\nconst ax = axios.create();\n\n// note that passing in config to the constructor is broken as of axios v0.19.0-beta.1\n\n// So we work around by passing in config to the request() method\n\n\n\nax.request(axiosConfig)\n\n    .then(function (response) {\n\n        // handle success\n\n\n\n        alert(response.data);\n\n\n\n    })\n\n};\n// call samplePost to upload\nsamplePost({\nurl: 'async',\n\ndata: {somefield: 'some value'}, //note: passes in as form fields\n\n\n\n// optionally include array of binary files\n\nbinaryFiles: thisFileList\n\n});\nFrom: Antonio V\u00e1zquez notifications@github.com \nSent: Tuesday, September 11, 2018 11:23 AM\nTo: axios/axios axios@noreply.github.com\nCc: DavidRueter drueter@assyst.com; Comment comment@noreply.github.com\nSubject: Re: [axios/axios] Can't get a .post with 'Content-Type': 'multipart/form-data' to work (#318)\n4 hours and counting to make a post request from Safari. Still not happening... what the hell guys ??\nNone of the solutions here worked from me... :(\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub https://github.com/axios/axios/issues/318#issuecomment-420371510 , or mute the thread https://github.com/notifications/unsubscribe-auth/AFbi6JQBv06LTwL4z3HIAlvXAXDyps1-ks5uZ_9wgaJpZM4Ibm_z .  https://github.com/notifications/beacon/AFbi6BSPfwPvNaWPFSdvtLKRYXS1m4uKks5uZ_9wgaJpZM4Ibm_z.gif \n. It may be that this change broke something else:  Now when creating an instance, the config that is passed to the constructor is NOT respected.  For example:\nlet myconfig = {...};\nconst ax = axios.create(myconfig);\nax.request();\n...will fail, because the values from myconfig are not actually present.\nOn the other hand, this works:\nlet myconfig = {...};\nconst ax = axios.create();\nax.request(myconfig);\nIf this change is intentional, the documentation should be updated:  https://github.com/axios/axios#creating-an-instance. Yes, I am on v0.19.0-beta.1  Let me know if I can help.  I'm not all that familiar with axios however.. ",
    "elhigu": "Also when using buffers to represent file, this worked for me:\n```js\n      const form = new FormData();\n      const fileBuffer = new Buffer(\n        'MM2 - noticeably shallower than the original - score: 101%', 'utf-8'\n      );\n      form.append('name', 'reviews.txt'); // additional form data field\n      form.append('file', fileBuffer, 'original-file-name.bar');\n  const res = await axios.post(`/uploadfile`, form, { headers: form.getHeaders() });\n\n```. ",
    "danielduwaer": "Important to note: any of the above solutions do NOT work if you have any default data parameters set in the defaults of the Axios instance. You might also check if you specify a default Content-Type header in your Axios instance (via axios.defaults.headers and axios.defaults.parameters).. Important to note: any of the above solutions do NOT work if you have any default data parameters set in the defaults of the Axios instance. You might also check if you specify a default Content-Type header in your Axios instance (via axios.defaults.headers and axios.defaults.parameters).. ",
    "dkoloditch": "This may not be on point, but the issue might be related to using body-parser on the server side. I was struggling with a similar issue and ran across this post:\nhttps://philna.sh/blog/2016/06/13/the-surprise-multipart-form-data/\nTL;DR - body-parser doesn't handle multipart/form-data. In other words, axios isn't the problem and body-parser is. This might be why the buffer solutions mentioned above work.\nI assume this functionality is for security reasons, as noted here:\nhttp://andrewkelley.me/post/do-not-use-bodyparser-with-express-js.html\nI hope that helps someone!. ",
    "giangcoibg": "hi all,\nI have the same problem\nmy code in client\n`       \n    const url = '/file/uploadTest';\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('params1', value);\n    formData.append('params2', value2)\n\n    const config = {\n        headers: {\n            'Content-Type': 'multipart/form-data',\n        }\n    }\n    axios.post(url,formData,config)`\n\nin sails server, i log console req.body\nI found, when i call request 10 times, there are about 3 4 times the server does not receive the body (body is empty).\ni checked in devtool of chrome, the request still have transmits the file and body in the payload.\nI still have not figured out why, but i have a solution\nthat is request header.\n`code\n    const url = '/file/uploadTest';\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('params1', value);\n    formData.append('params2', value2)\n    const config = {\n        headers: {\n            'Content-Type': 'multipart/form-data',\n            'params1': value,\n            'params2': value2\n        }\n    }\n    axios.post(url,formData,config)`\n\n. ",
    "YashKharel19": "Hi @Sreekhar, \nDid you solve the problem ? I didn't find the solution can someone help me ,Please.\nAlso, Thank You on advance. ",
    "Ruchi2729": "Hello,\nI have been trying to post  multiformdata(it is an Eztext SMS api)\nusing axios with node.js.\nIt works well for following code,\nreturn new Promise(function(resolve, reject) {\n        var request = require(\"request\");\n        var options = {\n            method: 'POST',\n            url: 'https://app.eztexting.com/sending/messages',\n            qs: {format: 'json'},\n            formData:\n                {\n                    User: '**',\n                    Password: '**',\n                    'PhoneNumbers[0]': '8572222***',\n                    Message: 'Appointment Reminder',\n                    MessageTypeID: '1'\n                }\n        };\n        request(options, function (error, response, body) {\n            if (error) {\n                console.log(error);\n                reject(error);\n            }\n            else {\n                console.log(response);\n                resolve(response);\n            }\n\n            // console.log(body);\n        });\n\nBut it doesn't work with axios as SMS doesnt get sent but I get the status code as 200 for following request:-\nvar axios=require('axios');\n         axios.post('https://app.eztexting.com/sending/messages', {\n             qs: { format: 'json' },\n             headers: {\n                 'Content-Type': 'application/x-www-form-urlencoded'\n             },\n             formData:\n                 { User: '****',\n                     Password: '2sH****5',\n                     'PhoneNumbers[0]':'85722******',\n                     Message: 'Hello Yahska',\n                     MessageTypeID: 1 }\n         })\n             .then(function (response) {\n                 console.log(response);\n             })\n             .catch(function (error) {\n                 console.log(error);\n             });\n\nwhy  post request is a success with 'request' library and not with Axios?\n. @Iamuertepeluda\nI tried following thing as per ur suggestion but no luck,,, same behavior as I get status 200 ok but SMS is not getting sent with following request\n  var axios=require('axios');\n    const FormData = require('form-data');\n\n    const form = new FormData();\n\n    //fo this jason I created a form\n    // formData:\n    // {\n    //     User: '*****',\n    //         Password\n    // :\n    //     '******',\n    //         'PhoneNumbers[0]'\n    // :\n    //     '8****2763',\n    //         Message\n    // :\n    //     'Appointment Reminder',\n    //         MessageTypeID\n    // :\n    //     '1'\n    // }\n\n    form.append('User','****');\n    form.append('Password','*****');\n    form.append('PhoneNumbers[0]','*****');\n    form.append('Message','Appointment Reminder');\n    form.append('MessageTypeID','1');\n\n\n         axios.post('https://app.eztexting.com/sending/messages', form,\n    {\n        qs: {format: 'json'},\n        headers:\n        {\n                'content-type'\n        :\n            'multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW'\n        }\n    }\n)\n             .then(function (response) {\n                 console.log(response);\n             })\n             .catch(function (error) {\n                 console.log(error);\n             });\n\n. Hey I am referring this document :- https://www.eztexting.com/developers/sms-api-documentation/rest#Sending\nwhich document are you referring for API key and all?. ",
    "lamuertepeluda": "Have u tried converting the data from JSON to FormData without setting any header?\nHeaders for the data (i.e. besides authentication headers) should be automatically handled\n```js\nasync function sendMessage(myJSONPayload){\n  try{\n    const data = convertJSON2FormData(myJSONPayload);\nconst response = await axios.post('https://app.eztexting.com/sending/messages', {\n\ndata\n});\n    console.log(response);\n  } catch(ex){\n    console error(err);\n  }\n}\nsendMessage ({ User: '*',\n                     Password: '2sH5',\n                     'PhoneNumbers[0]':'85722*',\n                     Message: 'Hello Yahska',\n                     MessageTypeID: 1 }\n         });\n```\nFor the conversion from JSON to FormData use something like in this answer\nRemember that nested keys are tricky to handle. For instance, when sending data to our backend it works if we flatten them like this:\n{a: {b: 2}} --> formData.append(\"a.b\",2). of course, @michaelscheurer! Setting the headers of a request is not enough: you must submit a FormData in order to make it work. It's a browser object that will be serialized with all the proper boundaries to work with the request... nor axios nor vanilla js will convert a JSON data to FormData for you. Axios will recognize that it's a FormData and also set the headers for you, so you don't really need to set them\nTry following my previous answer hints.... @Ruchi2729 are you using node.js or browser?\nin a browser you don't need const FormData = require('form-data'); since FormData is native.\nFurthermore try without setting headers and qs, or try\naxios.request({\n url: \"https://app.eztexting.com/sending/messages\"\n type: \"post\",\n data: form //the instance of FormData of your stub\n});\nas I mentioned, it should set headers automatically in a browser. @Ruchi2729 i see you are using node, sorry.\nI remember having used form-data with axios once but I don't recall if it actually worked.\nBut are you sure this is the correct way of sending SMS with eztexting? From their docs it seems different, like you should use an api key and their own node client.... @Ruchi2729 \nSorry I confused with Nexmo, which is another SMS service and has its own client for node \ud83d\ude05 \nBut anyway, according to the documentation you referred to, you can avoid FormData by setting format to json and let axios send a JSON payload (you can let it guess headers implicitly by the payload format)\nhttps://app.eztexting.com/sending/messages?format=json. ",
    "michaelscheurer": "same problem here.. ",
    "epferrari": "can we get this reopened? Looks like a lot of people are still bumping up against this, including myself. For example, this request doesn't make it to the server as expected via axios, but if I send the same file over Postman as multipart/form-data, all works.\n\nEdit: My problem was trying to send a base64 encoded data-uri as form-data. If anyone else is struggling with the same issue, here is some sample code to convert it:\n```javascript\nasync function importCsv(data: CsvImportData): Promise {\n    const formData = new FormData();\n    const headers = {'Content-Type': 'multipart/form-data'};\nformData.append('csv', dataURItoFile(data.file, `upload_${Date.now()}.csv`));\n\ntry {\n  await axios.post('https://example.com/api/upload/csv', formData, {headers});\n} catch(e) {\n  console.error(e);\n}\n\n}\nfunction dataURItoFile(dataURI: string, defaultFileName: string): File {\n  let byteString: string;\n  const [metadata, data] = dataURI.split(',');\n  if (/base64$/.test(metadata)) {\n    byteString = atob(data);\n  } else {\n    byteString = unescape(data);\n  }\nconst mimetype: string = metadata.split(':')[1].split(';')[0];\n  const filename: string = (metadata.match(/name\\=(.*);/) || [])[1] || defaultFileName;\nlet dataView: Uint8Array = new Uint8Array(byteString.length);\n  for (let i = 0; i < byteString.length; i++) {\n    dataView[i] = byteString.charCodeAt(i);\n  }\n  return new File([dataView], filename);\n}\n```\n. ",
    "jlumia": "I struggled with this a lot longer that I want to admit, so hopefully this helps someone. I am using axios, express, and express-fileupload. I can successfully upload to Node with params I have appended to the FormData. I pick up the files with req.files and I pick up the rest of the form data with req.body['yourfilename']\nServer (Express):\n\nrouter.post('/helper/amazon/upload', function(req, res) {\n  if (!req.files) {\n    return res.status(400).send('No files were uploaded.')\n  }\n  console.log(req.body.filename);\n  return console.log(req.files);\nFront-end (axios)\n\nconst formData = new FormData();\n      formData.append('file', this.validFile);\n      formData.append('filename', 'trails/' + this.$route.params.id.split('-')[0] + '/camping/');\n      axios.post(/api/helper/amazon/upload, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\nResult:\n\n. ",
    "dker92": "I have the same problem , I can see that I successfully send the file data with my dev tools but inside my contoller my $request->file('file') is empty \nMy component\n\nsubmitForm() {\nthis.formData =new FormData();\n     this.formData.append('file',this.$refs.file.files[0]);\n     this.formData.append('analysis',this.analyticsForm.analysis);\n    this.formData.append('_method','PATCH');\n    axios.post('/analytics', \n        this.formData\n        ,{headers: {'Content-Type': 'multipart/form-data'}}).then(response => this.isSubmittedRedirect(false,'/sources/'+this.source+'/description'+''))\n            .catch((error) => console.log(error))\n    },\n\n. @navyjax2 \nI was doing like you said , it was working with small file but I need to send larges file ( > 250Mo), and yeah it was locking up my browser. ",
    "navyjax2": "I found that doing anything with FormData was a problem, since MVC doesn't seem to like getting anything that way, because you have to specify the Content-Type as multipart/form-data and it was throwing an exception when I'd check if (!Request.Content.IsMimeMultipartContent()) { throw new HttpResponseException(HttpStatusCode.UnsupportedMediaType); }, as the Microsoft site says to do:  https://docs.microsoft.com/en-us/aspnet/web-api/overview/advanced/sending-html-form-data-part-2\nWas better just to get my file into a base64 string:\nhttps://stackoverflow.com/questions/37134433/convert-input-file-to-byte-array/49676679#49676679\nThis post might be more relevant to how to do that, as I used a DropZone in this example:\nhttps://stackoverflow.com/questions/32556664/getting-byte-array-through-input-type-file/49660172#49660172\nAnd I go more in detail on it, here:  https://stackoverflow.com/questions/47574218/converting-from-blob-to-binary-to-save-it-to-mongodb/49660839#49660839\nThen I could create a JSON object:  \nconst myObj = {\n   file = myBase64String,\n   title = \"myfileTitle.jpg\"`\n   type = \"image/jpeg\"`\n}\n\nInstead of using axios, I just used an XMLHttpRequest.\n const xhr = new XMLHttpRequest();\n\nAnd open and set the header:  \n xhr.open('POST', '/api/FileUpload/Post', true);\n xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8' );\n xhr.withCredentials = true;\n\nI set the onreadystatechange to capture the response: \nxhr.onreadystatechange = (response) =>\n    if (xhr.readyState === 4 && xhr.status === 200) {\n        console.log(response.target.responseText);\n    }\n}\n\nand send:\n xhr.send(JSON.stringify(myObj));\n\nIf you use axios, it would probably be:\ntry {\n    var axios = require('axios');\n    const config = {\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n        }\n    }\n    await axios.post('https://example.com/api/upload/post', myObj, config)\n        .then(function (response) {\n             console.log(response);\n         })\n         .catch(function (error) {\n             console.log(error);\n         });\n}\ncatch(e) { console.log(e); }\n\nOn the MVC side, you need a matching model:\npublic class MyModel {\n    public string file { get; set; }\n    public string title { get; set; }\n    public string type { get; set; }\n}\n\nand then have that as a parameter in your Post call with a [FromBody] tag:\n[System.Web.Http.HttpPost]\npublic virtual JsonResult<string> Post([FromBody]MyModel myModelObject)\n{\n    string strBase64FileString = myModelObject.file;\n    string strTitle = myModelObject.title;\n    string strFileType = myModelObject.type;\n\n    return Json(JsonConvert.SerializeObject(new { file = myModelObject.file, title = myModelObject.title, myModelObject.type }));\n}\n\nYou should get back what you sent.  Note, if you implement this as a test, do so with a very small file, so you aren't waiting forever with the potential of locking up your system's browser/memory.. Yeah, for that, you might want to break the file array into chunks of a manageable size and send in blocks, having a method on the other (server-side) end that can re-combine them, and giving it a parameter so it knows which chunk it is (1st, 2nd, 3rd, etc.) and how many total chunks to expect before it processes the file on the server-side.  But I think, no matter what you do, with a file that size, you're going to have to wait for it to do its thing.  Will have to be careful of memory management if you do it the chunk way, too, because you'd have to ensure you're clearing or re-using your variables each time and not re-instantiating new versions of the same variables each time you do a block.  One of the few times a global variable is good - or just set to a model field each run.. ",
    "iwestlin": "I agree with @epferrari,  please consider reopen this issue.\nIt's ok to send a base64 string with FormData in chrome, but just can't get it done with axios in node(v8.9.3).\nAnd it works with node-fetch...\n```javascript\nconst fetch = require('node-fetch')\nconst axios = require('axios')\nconst FormData = require('form-data')\nconst base64Img = require('base64-img')\nconst b64 = base64Img.base64Sync('./test.jpg').split('base64,')[1]\nconst form = new FormData()\nform.append('b64_data', b64)\nconst headers = form.getHeaders()\n// with node-fetch it worked\nfetch('http://some.url', {\n  method: 'POST',\n  body: form,\n  headers,\n}).then(res => res.text()).then(console.log).catch(console.log)\n// not working with axios\naxios({\n  method: 'POST',\n  url: 'http://some.url',\n  data: form,\n  headers,\n}).then(console.log).catch(console.log)\n```\n=== update ===\nI don't understand, I use the same headers for node-fetch and axios, and it seems that they post the same form data to server, how come they end up differently?\nBy the way, the real url which I'm posting comes from here, what I'm doing is mock the browser's http request with nodejs, to send a image to server and get a link back.\n. ",
    "bqnzelot": "I got around this by using:\n```\n\nfunction emitImageInfo($event){\n  let files = $event.target.files\n  let formData = new FormData();\nfor (let i = 0; i < files.length; i++)\n      formData.append('image[' + i + ']', files[i])\naxios.post('file/upload', formData)\n     .then((result) => { console.log('got it') })\n     .catch((err) => { console.log(err) })\n}\n```. ",
    "shanekoss": "this worked:\naxios.post(localhost:3000/items, formData, { headers: { 'Content-Type': 'multipart/form-data' }});. this worked:\naxios.post(localhost:3000/items, formData, { headers: { 'Content-Type': 'multipart/form-data' }});. ",
    "tale503": "I  have the same problem. ",
    "cooervo": "not working with golang . ",
    "jeremysu0131": "Just find a simple way in Vue, but I think it can be used in other situations.\ud83d\ude00\nBack-end: Express.js and express-fileupload package.\n```html\n\n\n\nSend\n\n\n\nexport default {\n  data() {\n    return {\n      formData: new FormData(),\n    };\n  },\n  methods: {\n    filesChange(fileList) {\n      // First: append file to FormData\n      Array.from(Array(fileList.length).keys()).map(x => {\n        this.formData.append(fileList[x].name, fileList[x]);\n      });\n    },\n    handleSubmit() {\n      // Append Text\n      this.formData.append('username', 'Jeremy');\n\n      // Append Number: Will be string\n      this.formData.append('number', 9527);\n\n      // Append Array: Need to be converted to a string\n      this.formData.append('arrData', JSON.stringify([1, 2, 3]));\n\n      // Append Array: Need to be converted to a string\n      this.formData.append(\n        'objData',\n        JSON.stringify({ name: 'Jeremy', age: 28 })\n      );\n\n      this.axios({\n        method: 'post',\n        url: `file/multi-users`,\n        data: this.formData,\n      }).then(res => {\n        console.log(res);\n      });\n    },\n  },\n};\n\n```\n\n. ",
    "shuchitaprasad": "Even we were facing the same issue. The content -type header was removed from react java script and then it worked fine. Earlier the boundary was not being set up when you explicitly set in the content-type. Even we were facing the same issue. The content -type header was removed from react java script and then it worked fine. Earlier the boundary was not being set up when you explicitly set in the content-type. ",
    "GroomedGorilla": "EDIT: After further reading about it appears Express was the issue on my end. Using a library like multer to read multipart forms was the key for my issue. Hopefully this could be of use to others\nSame issue here. @nickuraltsev  Would STRONGLY recommend reopening the issue.\nI'm trying to post a file to my node server via axios using the following code:\n``\nlet ff = new FileReader();\nff.onload = (ev) => {\n      var result = ev.target.result;\n      console.log(result: ${result} of type ${typeof(result)});\n      axios.post('/test', {\n                 file: result\n                 })\n                 .then((response) => {\n                         console.log(Response: ${response})\n                  })\n                  .catch((err) => {\n                        console.log(Test error: ${err}`);\n                   })\n}\nvar sampleFile = //getting the file here\nff.readAsArrayBuffer(sampleFile);\n```\nBody of the request is completely empty server-side though\nTried sending the file directly, reading the file as an ArrayBuffer and reading the file as text (payload too large though) and all 3 didn't work.. ",
    "ty-me": "Two years latter: \n    Same problem...\n. Same problem, the server received an empty object.. Same problem, the server received an empty object.. ",
    "arvi": "@demeter-macik thanks, adding boundary worked for me :smile: \n```js\n    const form = new FormData();\n    form.append('email', 'test2@pay-mon.com');\n    form.append('phone_no', '63');\n    form.append('phone_code', '9179303100');\nif (logo) {\n  form.append('logo', logo);\n}\n\nconst response = await axios({\n  method: 'post',\n  url: `${apiUrl}users`,\n  data: form,\n  headers: {\n    'content-type': `multipart/form-data; boundary=${form._boundary}`,\n  },\n});\n\n```. @demeter-macik thanks, adding boundary worked for me :smile: \n```js\n    const form = new FormData();\n    form.append('email', 'test2@pay-mon.com');\n    form.append('phone_no', '63');\n    form.append('phone_code', '9179303100');\nif (logo) {\n  form.append('logo', logo);\n}\n\nconst response = await axios({\n  method: 'post',\n  url: `${apiUrl}users`,\n  data: form,\n  headers: {\n    'content-type': `multipart/form-data; boundary=${form._boundary}`,\n  },\n});\n\n```. ",
    "pacosanchezm": "this worked for me too, thanks @arvi \ntwiliosms = async (Codigo) => {\nvar FormData = require('form-data');\n  var fs = require('fs');\nvar form = new FormData();\n  form.append('To', '+524772773737');\n  form.append('From', '+737373737');\n  form.append('Body', Codigo);\ntry {\n    let axapi = await axios(\n      {\n        url: '2010-04-01/Accounts/AC8aa53c907943af79234414bb725c2cd3/Messages.json',\n        baseURL: 'https://api.twilio.com',\n        headers: {'content-type': multipart/form-data; boundary=${form._boundary},},\n        data: form,\n        auth: {\n          username: 'AC8aa53c907943af79234414bb725c2cd3',\n          password: ***,\n        },\n        method: 'post',\n      }\n    )\n} catch (e) {console.error(e)}\n}. this worked for me too, thanks @arvi \ntwiliosms = async (Codigo) => {\nvar FormData = require('form-data');\n  var fs = require('fs');\nvar form = new FormData();\n  form.append('To', '+524772773737');\n  form.append('From', '+737373737');\n  form.append('Body', Codigo);\ntry {\n    let axapi = await axios(\n      {\n        url: '2010-04-01/Accounts/AC8aa53c907943af79234414bb725c2cd3/Messages.json',\n        baseURL: 'https://api.twilio.com',\n        headers: {'content-type': multipart/form-data; boundary=${form._boundary},},\n        data: form,\n        auth: {\n          username: 'AC8aa53c907943af79234414bb725c2cd3',\n          password: ***,\n        },\n        method: 'post',\n      }\n    )\n} catch (e) {console.error(e)}\n}. ",
    "AlexPravdin": "I'm wandering this library still require self-written workarounds for form data posts..... ",
    "filips123": "Any update?\nI have similar error in NodeJS 10.11.0 and Axios 0.18.0 (see #1892). I've tried @arvi's fix but it don't work.. This is similar to #318. However, it is old and closed and I could not fix it.\nI've tried https://github.com/axios/axios/issues/318#issuecomment-413152638, but I still have same error.\n. I've fixed this using formData._streams instead of just formData. I've also added formData.getHeaders() to headers and some other changes (see form-data/form-data#414).\nThis is probably some temporary and quick solution so this issue should not be closed until it works better.\n```js\nconst axios = require('axios')\nconst FormData = require('form-data')\nlet avatar = Buffer.from(['00', '01', '03', '04', '05', '06', '07', '08', '09']) // Buffer data of image file\nlet url = 'https://example.com/' // Some URL\nlet formData = new FormData()\nformData.append('avatar', avatar)\nlet data = ''\nfor (var i = 0, len = formData._streams.length; i < len; i++) {\n  if (typeof formData._streams[i] !== 'function') {\n    data += formData._streams[i] + '\\r\\n'\n  }\n}\nawait axios.post(url, data, { // Await is called inside async function\n    headers: formData.getHeaders()\n})\n```. ",
    "xxmyjk": "for me , this works:\n```javascript\nlet formData = new FormData(document.querySelector('#form'));\naxios.post(\"/api/xxx\", formData).then(console.log).catch(console.error)\n```\nand this won't work\n```javascript\nlet formData = new FormData(document.querySelector('#form'));\naxios.post(\"/api/xxx\", {data: formData}).then(console.log).catch(console.error)\n```\nbe aware of the postdata param format should be  (url , FormData), not (url, {data: FormData}). ",
    "AndreGuerra123": "```\nbeforeAll(function (done) {\n      //parse form fields\n      var parsefields = function(req,res){\n        var form = new formidable.IncomingForm();\n        form.parse(req, function (err, fields, files) {\n          if (err) res.status(404).json(err)\n          else res.status(200).json(fields);\n        });  \n      }\n\n      router.route('parsefields').post(parsefields)\n\n      //start server\n      s = express()\n      s.use('/',router)\n      s.listen(4000,(err)=>{done(err)})\n      done()\n    });\n\n    it('should parse and return form fields', function (done) {\n\n      const fd = new FormData()\n      fd.append('key','value')\n\n      axios({\n        method: 'POST',\n        url: 'http://localhost:4000/parsefields',\n        data: fd,\n        headers : fd.getHeaders(),\n      }).then(function (res) {\n        expect(res).to.exist\n        expect(res.body.key).to.equals('value')\n      }).catch(err => {\n        expect(err).not.to.exist\n      })\n      done()\n\n    });\n\n});\n```\nI'm having the same issue. Receiving a 404 with no error. Using formidable for form parser, express and axios.. ",
    "msachi": "I don't know if this helps anyone, but I was seeing this issue only on Safari and fixed it by using formdata-polyfill. Safari should be supporting FormData.append() natively but maybe the implementation is slightly different?. ",
    "tiagovdot": "What got me stuck was that my server was not handling files properly, using https://www.npmjs.com/package/multer fixed it. ",
    "kaimiyang": "it's useful for me! Thanks!. const func1: any = () => { return axios.request(...) }. ",
    "adamtal3": "Nothing here worked for me because my code was perfectly good.\nThe real issue was with the file I was dragging from windows search results - Chrome couldn't find the real location and it broke the entire FormData parsing. Navigating to the file and dragging it solved the issue.. Nothing here worked for me because my code was perfectly good.\nThe real issue was with the file I was dragging from windows search results - Chrome couldn't find the real location and it broke the entire FormData parsing. Navigating to the file and dragging it solved the issue.. ",
    "GalustGevorgyan": "Hi all,\nPlease help me.\nPOST https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart HTTP/1.1\nAuthorization: Bearer [YOUR_AUTH_TOKEN]\nContent-Type: multipart/related; boundary=foo_bar_baz\nContent-Length: [NUMBER_OF_BYTES_IN_ENTIRE_REQUEST_BODY]\n--foo_bar_baz\nContent-Type: application/json; charset=UTF-8\n{\n  \"name\": \"myObject\"\n}\n--foo_bar_baz\nContent-Type: image/jpeg\n[JPEG_DATA]\n--foo_bar_baz--\naxios does not support multipart/related request type. Hi all,\nPlease help me.\nPOST https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart HTTP/1.1\nAuthorization: Bearer [YOUR_AUTH_TOKEN]\nContent-Type: multipart/related; boundary=foo_bar_baz\nContent-Length: [NUMBER_OF_BYTES_IN_ENTIRE_REQUEST_BODY]\n--foo_bar_baz\nContent-Type: application/json; charset=UTF-8\n{\n  \"name\": \"myObject\"\n}\n--foo_bar_baz\nContent-Type: image/jpeg\n[JPEG_DATA]\n--foo_bar_baz--\naxios does not support multipart/related request type. ",
    "PIYatGitHub": "For me it was (I guess) gulp. Because I was getting the error with minified files on my server. I deleted manually everything from the dist folder, left the content type as undefined and everythingg works as expected. \nSo you will have sth like: \nformdata.append(\"selectPaymentType\", $scope.extraFields.selectPaymentType);\n        formdata.append(\"pickupMethod\",  $scope.extraFields.selectPickupType);\n        let request = {\n            method: 'POST',\n            url: baseURL + 'orders',\n            data: formdata,\n            headers: {\n                'Content-Type': undefined,\n                'x-access-token': $scope.userToken\n            }\n        };\n        $http(request)\n            .success(function (d) { })\n            .error(function () { });\nPS: This is excerpt ... I also attach files and alot more fields...\nSERVER: \nvar form = new multiparty.Form({uploadDir : './uploads/orders/'});\nform.parse(req, function(err, fields, files) {\n//YOUR CODE HERE\n})\n. For me it was (I guess) gulp. Because I was getting the error with minified files on my server. I deleted manually everything from the dist folder, left the content type as undefined and everythingg works as expected. \nSo you will have sth like: \nformdata.append(\"selectPaymentType\", $scope.extraFields.selectPaymentType);\n        formdata.append(\"pickupMethod\",  $scope.extraFields.selectPickupType);\n        let request = {\n            method: 'POST',\n            url: baseURL + 'orders',\n            data: formdata,\n            headers: {\n                'Content-Type': undefined,\n                'x-access-token': $scope.userToken\n            }\n        };\n        $http(request)\n            .success(function (d) { })\n            .error(function () { });\nPS: This is excerpt ... I also attach files and alot more fields...\nSERVER: \nvar form = new multiparty.Form({uploadDir : './uploads/orders/'});\nform.parse(req, function(err, fields, files) {\n//YOUR CODE HERE\n})\n. ",
    "kokizzu": "btw, but this works on server side right?. btw, but this works on server side right?. confirmed: 0.16.1 shows an error:\nERROR in [at-loader] ./node_modules/axios/index.d.ts:61:39 \n    TS2304: Cannot find name 'Promise'.. confirmed: 0.16.1 shows an error:\nERROR in [at-loader] ./node_modules/axios/index.d.ts:61:39 \n    TS2304: Cannot find name 'Promise'.. ",
    "joembaya": "@samayo Your axios header should look like this:\nIn your Javascript code:\nconst axiosConfig = {\n    headers: {\n        'content-Type': 'application/json',\n        \"Accept\": \"/\",\n        \"Cache-Control\": \"no-cache\",\n        \"Cookie\": document.cookie\n    },\n    credentials: \"same-origin\"\n};\n        axios.defaults.withCredentials = true;\n       axios.get('/url',\n        axiosConfig)\n        .then((res) => {\n             // Some result here\n        })\n        .catch((err) => {\n            console.log(':(');\n        });\nI hope it helps...\n       . ",
    "duducv": "thanks @joembaya .. Your answer save me time a lot!!. ",
    "SavePointSam": "For anyone that ends up here in the future. If you're just trying to define a way to get a new instance with application standard options, or wrap an axios instance in a custom es6 class. You just need to return the instance you define from the class constructor.\n```\nimport axios from 'axios';\n// add session token to all requests\nconst requestInterceptor = (config) => ({\n  ...config,\n  headers: {\n    ...config.headers,\n    'x-auth-token': localStorage.getItem('token'),\n  },\n});\nclass Client {\n  constructor() {\n    const options = {};\n    const instance = axios.create(options);\ninstance.interceptors.request.use(requestInterceptor);\n\nreturn instance;\n\n}\n}\nexport default Client;\n```\n```\nimport Client from './Client';\nconst getUsers = () => (\n  new Client().get('/api/users')\n);\n```. I think both options are certainly valuable. I'm just a fan of using es6 classes and my pattern follows the idea of 'subclassing' Axios. In my actual implementation there is much more documentation that makes it very clear that Client is a subclass of an Axios instance. \n\nEdit: My solution is also geared toward the original issue request. You don't get a class with the function-based solution.. ",
    "yordis": "Just for a little feedback in about @SavePointSam comment\nThat is just a function call, you do not need to create a class for do what he is suggesting to do.\n```js\nconst Client = () => {\n    const options = {};\n    const instance = axios.create(options);\ninstance.interceptors.request.use(requestInterceptor);\n\nreturn instance;\n\n}\nconst client = Client()\n```\nalso in terms of readability I wouldn't do it either. It is not a good practice to be returning different objects from the original object you are trying to create a from.\nWhen I do new Client() I am expecting a instance of Client no AxiosInstance.. > My solution is also geared toward the original issue request. You don't get a class with the function-based solution.\nThat statement is just wrong, do not take it personally or hard, just a feedback.\nBoth implementations do the same. Both implementations do a function call. \nFirst, there is no such of thing of classes in Javascript (this is where I am agains class keyword, some people do not get what is happening under the hood)\nThe differences that you are doing something that people wouldn't expect, normally new keyword should returns you a new object with the prototype of the original object (just because you can it doesn't mean you should)\nAnyway,\nThe ES5 output of your code is this one\n```js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nvar Client = function Client() {\n   // you do not care about this\n  _classCallCheck(this, Client);\nvar options = {};\n  var instance = axios.create(options);\ninstance.interceptors.request.use(requestInterceptor);\n  // you just return a AxiosInstance\n  return instance;\n};\n```\nnotice that it is exactly the same when you execute your code, no differences at all.\n\nI'm just a fan of using es6 classes\n\nThere is no classical classes in Javascript.. ",
    "davidyell": "How does this work if you're authenticating using a custom header?. I have the same issue here. When I try and send my api authentication header, the header is not sent with the request, so I get a 403 Forbidden.\nI've tried setting the header in my axios.create() and also in the instance with no luck.. Use a non-standard header would be the thing to try. Something like X-RandomToken. Did this work for you? When I try and set custom headers they are not sent with my request.. ",
    "BigChief45": "^ Same question here.\nI am using the following headers to make a PATCH request:\njavascript\nheaders = {'Content-Type': 'application/json', 'Authorization': 'Token <my_token>'}\nYet Axios doesn't seem to recognize the Authorization header..... @liukan0211 Thanks! That seems to work. But it seems odd, why does it have to be set like this? It is not how it is described in the documentation.\nI've read through a lot of similar issues about this. Some people keep saying it is not a bug, but it certainly looks like a bug to me.. @liukan0211 Thanks for the help. Unfortunately I kept experiencing more problems with Axios, so I switched to got, works like a charm!. @beckler I am experiencing the exact same issue as @MINOSai , yet I can make a perfect successful CORS request using a Python client. I don't really understand why I have to add additional configuration to the existing Django REST Framework one.... Some comments here indicate that this is a CORS issue from the server side, yet I can submit the same request perfectly using a different client in Python, sending the same authorization header and same data.\nYet it will not work with Axios.. ",
    "liukan0211": "@BigChief45 \ntry the following way:\naxios.defaults.headers.Authorization = Token . @BigChief45 \nI reviewed the source code and found that axios will ignore the Authorization header if it's set in custom headers, you can refer to https://github.com/axios/axios/blob/master/lib/helpers/parseHeaders.js.. ",
    "kimrgrey": "@nickuraltsev, I've created a PR with fix that you proposed: https://github.com/mzabriskie/axios/pull/325.\n. @nickuraltsev @mzabriskie cool, thanks! Could you please clarify when release with this changes is expected? Support of FormData in Safari is really critical for us \ud83d\ude10 \n. It would be great, thanks! \ud83d\udc4d \n. ",
    "romainneutron": "@mzabriskie Any thoughts on this?\n. @mzabriskie Any thoughts on this?\n. Closing in favor of #334\n. Closing in favor of #334\n. This PR is quite important as it allows proper retry implementation. As I explained in #324 it's not possible at the moment. This PR solves the current issue without changing the current spirit of implementation.\nIMHO, merging this one now, improving error handling very soon would be the best option\n. This PR is quite important as it allows proper retry implementation. As I explained in #324 it's not possible at the moment. This PR solves the current issue without changing the current spirit of implementation.\nIMHO, merging this one now, improving error handling very soon would be the best option\n. This would have required a note in the UPGRADE_GUIDE.md file\n. This would have required a note in the UPGRADE_GUIDE.md file\n. Thanks\n. Thanks\n. err.code = 'EREQUESTERROR'; would be <3\n. ",
    "josh-egan-ps": "Thanks for merging my pull requests in for adding request to the static api! Would it be possible to get an axios release out with these changes?\n. ",
    "designeng": "Works with \nresponseType: 'arraybuffer'\nin config.\n. ",
    "azizhk": "I have no idea why \"eval npm install \" is failing in the travis build.\n. ",
    "bimusiek": "Any plans to support it? \n. ",
    "hcapp01": "Here is my workaround by using iconv\n``` javascript\n            var response = await axios.get(query.url, { responseType: 'arraybuffer' });\n            var ctype: string = response.headers[\"content-type\"];\n        if (ctype.includes(\"charset=GB2312\"))\n            var data = iconv.decode(response.data, 'gb2312');\n        else\n            data = iconv.decode(response.data, 'utf-8');\n\n```\n. Here is my workaround by using iconv\n``` javascript\n            var response = await axios.get(query.url, { responseType: 'arraybuffer' });\n            var ctype: string = response.headers[\"content-type\"];\n        if (ctype.includes(\"charset=GB2312\"))\n            var data = iconv.decode(response.data, 'gb2312');\n        else\n            data = iconv.decode(response.data, 'utf-8');\n\n```\n. ",
    "pasin": "Is there a timeline for the abort API to be finalized and implemented? IMO, it is a good idea to have the API inline with the Cancelable Promise spec.\n. ",
    "just-boris": "I think it is possible to implement any option as a custom adapter (based on XHR) and then try it in a real project.\nIs there anybody who already tried that?\n. I think that while promise calcellation spec is not finalized, this feature will not be implemented in core. To gracefully adopt cancellation feature, it would be better to use this as plugin, like I did.\nIf anybody interested, I can publish axios-cancel on NPM for convinience.\n. ",
    "beckiechoi": "I also second Option 2, it's more future proof. @nickuraltsev any ETA? In the meantime, I might just do what @just-boris did or deal with a fork...\n. ",
    "andrewmclagan": "Option 2 is really  awesome...!\n. Option 2 is really  awesome...!\n. Just figured it out. For the record and future reference i will include the following:\nWithin package.json we need to include it as both a devDependancy for testing and a peerDependancy to end users of the NPM package retrieve axios within their node_modules folder.\nThen from Webpacks point of view, we simply list axios as an extermal dep and make sure we list all the possible import environments so our package works in node, the browser and bundlers:\njavascript\n  externals: {\n    'axios': {\n      root: 'axios',\n      commonjs2: 'axios',\n      commonjs: 'axios',\n      amd: 'axios'\n    }\n  },. Just figured it out. For the record and future reference i will include the following:\nWithin package.json we need to include it as both a devDependancy for testing and a peerDependancy to end users of the NPM package retrieve axios within their node_modules folder.\nThen from Webpacks point of view, we simply list axios as an extermal dep and make sure we list all the possible import environments so our package works in node, the browser and bundlers:\njavascript\n  externals: {\n    'axios': {\n      root: 'axios',\n      commonjs2: 'axios',\n      commonjs: 'axios',\n      amd: 'axios'\n    }\n  },. ",
    "miraage": "@nickuraltsev what's current progress status?\n. ",
    "nhducit": "I vote for option 1 or option 2\n. ",
    "pavel06081991": "Any news?\n. ",
    "wlingke": "Any news on when this will be released in an official version?\n. Any news on when this will be released in an official version?\n. This is a serious bug. Can we prioritize fixing it? It's been over a year and half. This is a serious bug. Can we prioritize fixing it? It's been over a year and half. ",
    "comerc": "FYI: Promise Cancellation Is Dead\u200a\u2014\u200aLong Live Promise Cancellation!. But when I call axios.post(), axios performs two network requests: OPTIONS and POST.. ",
    "rajchourasia": "These are request headers. Access-Control-Allow-Origin and Access-Control-Allow-Methods headers are set as required in the response.\n. These are request headers. Access-Control-Allow-Origin and Access-Control-Allow-Methods headers are set as required in the response.\n. @mzabriskie \nCan you help me get this working?\n. @mzabriskie \nCan you help me get this working?\n. ",
    "chuwik": "Hi @rajchourasia \nTo make sure it's not a CORS related issue, maybe try opening your website with Chrome with these flags: \"--disable-web-security --user-data-dir\". If with this you get it working fine, then you have a problem with CORS :)\n. ",
    "WhyIExist": "Did anyone got some solution.. I'm badly stuck in same issue\n. ",
    "rafaismyname": "@rubennorte you answered my doubt perfectly. thanks!!!\ni'm mesmerised by this lib, much more cleaner than any other, but i was a little bit concerned about performance...\nthat's solves the case for me! migriting to axios in 3,2,1......\n. ",
    "nik-kor": "I made some benchmarks here https://github.com/nik-kor/http-libraries-perf-test . Not sure is the test correct and the numbers very different between libs.\nWhat do you think about it? Why are these libs are so slow compared to http.request?) \n. ",
    "yhosun": "Yes. That will allow to start using JSON API.\nHere is a list of libraries supporting JSON API, and it simplifies a response.  But, that would depends on how a library want to support JSON API.\n. ",
    "Joudee": "It's doesn't work!\n. ",
    "falmar": "@Joudee what exactly?\n. ",
    "theGABS": "Axios override default Content-Type \naxios.defaults.headers.common['Content-Type'] = 'application/vnd.api+json' \nthis doesnt work! . ",
    "anlek": "I agree, I've tried many different ways and am unable to change the default application/json;charset=UTF-8 which I didn't set anywhere.. ",
    "pandomic": "@chadmetcalf's proposal worked for me\nDocumentation says to set axios.defaults.headers.<common/patch/put...>['Content-Type'], but it did not work for me. Onle after setting headers[] I was able to override content-type to application/vnd.api+json. ",
    "coolblabla": "+1 I'd like to merge defaultConfig to instance by default. var instance = axios.create(axios.defaults);\n. ",
    "Frondor": "And this is how you screw a good library.. As far as I know, in those workarounds data can be an \"extended\" error object, and you'll need to access the response through data.response instead. ",
    "liximomo": "I want to overwrite it too!\n. ",
    "gbauxy": "At least this logic conflicts with docs config-order-of-precedence \nMoreover, when someone explicitly type\naxios.get('https://api.github.com', {\n  withCredentials: false\n});\nit verbose enough to understand what do you do. \nAnd the third point is that this logic can lead to security issues when developer try to fulfill partial request without cookies but cookies will be sent anyway.\nSo my proposal is to discard this rule.\n. ",
    "fatpandaria": "Is there any update about this issue?I also want to overwrite the withcredential option for some specific request which withcredential will lead to unprocessable error.But I just couldn't make it,so I am just wondering whether this issue is the reason?. ",
    "stevenmusumeche": "Unfortunately that will not work for my use case because I need to set custom headers on the request. \n. @sanusart did this behavior change between .11 and .15? I have code that was receiving response as the catch parameter and now it requires error.response to receive the same info.. @sanusart did this behavior change between .11 and .15? I have code that was receiving response as the catch parameter and now it requires error.response to receive the same info.. I see in the upgrade now that the error response was changed.  Thanks!. ",
    "misund": "Breaking changes should mean a major version change.\n. ",
    "woodb": "~~Could you please note that this is a breaking change in the CHANGELOG?~~\nI've opened PR #416 in an attempt to add this note.\n. > All breaking changes are documented in the Upgrade Guide\nI knew this when making this PR, but I found that the upgrade guide hadn't contained notes on breaking changes in nearly a year, and I had simply stopped checking it, so I missed this change.\n. ",
    "donadley": "I solve my question.\nI removed .then from the method getEmailCredentials(). This allowed axios.all to collect the Promise that the method returnes.\nThis is the fixed method.\nfunction getEmailCredentials(store) {\n    return axios.get(store.endpoint);\n}\n. ",
    "uhtred": "But why axios don't return a promise on \"then\" and \"catch\"?\n. ",
    "Sigura": "https://github.com/axios/axios/issues/1037#issuecomment-349042937. > That isn't likely a problem in Axios\n~~no, it's. because requests through other libs like fetch work perfectly.~~\nsee the same problem in Edge (40) only, FF, Chrome work perfect.\nother environment staff:\n\nrequest with CORS support, localhost, ports differed\nresponse body json, all headers correct\n\n. ",
    "SudoPlz": "Thanks @nickuraltsev.\nThis works, but what about also sending params. \nCan we do:\n```javascript \n    var querystring = require('querystring');\naxios.post('/foo', querystring.stringify({\n  'bar': 123\n},\n{\n    data: {foo:'bar'}\n}\n);\n\n```\n?\nIf not, how can I also send params while sending a query string?\nThank you.\n. Thanks @nickuraltsev.\nThis works, but what about also sending params. \nCan we do:\n```javascript \n    var querystring = require('querystring');\naxios.post('/foo', querystring.stringify({\n  'bar': 123\n},\n{\n    data: {foo:'bar'}\n}\n);\n\n```\n?\nIf not, how can I also send params while sending a query string?\nThank you.\n. Amazing, I assume if we are to use query string params we have to also implement a paramsSerializer as well. \nThanks.. Ah, awesome. I craved a fix for #978  for such a long time.. Ah, awesome. I craved a fix for #978  for such a long time.. What about creating a pull request and fix axios instead?. I'm getting the same error, did you find a solution @rainwalkerhu ?. I'm getting the same error, did you find a solution @rainwalkerhu ?. I'm a bit confused with the cancellation token system. I thought that I could just have several tokens and cancel only the requests assigned to each of those tokens separately, but because of that error I now think I can only make 1 token and cancel requests from that.\nIs that right @nickuraltsev ?. I'm a bit confused with the cancellation token system. I thought that I could just have several tokens and cancel only the requests assigned to each of those tokens separately, but because of that error I now think I can only make 1 token and cancel requests from that.\nIs that right @nickuraltsev ?. I'm experiencing the same thing also. Cancelling cancels all requests and not each one individually..!. I'm experiencing the same thing also. Cancelling cancels all requests and not each one individually..!. \nThat makes sense, and I never used a default cancel token. I always create a new cancellation token for each request, but I still get the same problem.. \nThat makes sense, and I never used a default cancel token. I always create a new cancellation token for each request, but I still get the same problem.. ",
    "gitlovenotwar": "I had the same issue when using 'application/x-www-form-urlencoded'. How should it be sent when using these approach?\n\naxios({\n  url: 'some_post'\n  method: 'post',\n  data: {\n    name: 'John'\n  }\n});\n\nshould be the data be stringify first? ex. data: JSON.stringify(data);. ",
    "jjingrong": "@gitlovenotwar \nYou should do it in this way \nimport qs from 'qs';\n.\n.\n.\naxios({\n  url: 'some_post'\n  method: 'post',\n  data: qs.stringify({\n    name: 'John'\n  }),\n});. ",
    "naxir": "@nickuraltsev  Thanks it really helped in my case  \n. @kailashjakhar  Just Try this Hope it will help in your case \n```\nexport const UploadFile = file => {\n  var formData = new FormData();\n  formData.append(\"file\", file);\nreturn dispatch => {\n    axios\n      .post(REST_API.ImportExport.UploadFile, formData, {\n        headers: { \"Content-Type\": \"application/octet-stream\" }\n      })\n      .then(response => {\n        formData.delete(\"file\");\n        console.log(response);\n        if (response.data.success) {\n          customFn.success(response.data.message);\n          dispatch({\n            type: actionTypes.SHOW_BULK_SUCCESS,\n            payload: \"File Upload Successfully\"\n          });\n          dispatch({\n            type: actionTypes.LOADING_HIDE\n          });\n        } else {\n          customFn.failure(response.data.message);\n          dispatch({\n            type: actionTypes.SHOW_BULK_ERROR,\n            payload: response.data\n          });\n        }\n      })\n      .catch(error => {\n        customFn.failure(error);\n      });\n  };\n};\n```\nCheers \nHappy Coding . @kailashjakhar \nAre you using default axios header ? . & have you tried Content-Type\": \"application/octet-stream in header?. @kailashjakhar is it possible if you take a screenshot to know  how your requests look like in Chrome Dev Tools Network panel\n. @nickuraltsev  can you please help to @kailashjakhar  , what's going wrong. ",
    "happilymarrieddad": "Hey guys, \nIt's working for me but it's putting all the values in a slice in GO.. am I doing something wrong?\naxios.post('http://localhost:8001/session/store',qs.stringify({email:\"nkotenberg@fusionware.com\",password:\"\"}))\n```\npackage main\nimport (\n    \"github.com/gorilla/handlers\"\n    \"github.com/gorilla/mux\"\n    \"log\"\n    \"net/http\"\n    \"os\"\n    \"time\"\n)\nconst (\n    DefaultWriteTimeout = 15 * time.Second\n    DefaultReadTimeout  = 15 * time.Second\n)\nfunc SessionStore(w http.ResponseWriter, r *http.Request) {\n    r.ParseForm()\nlog.Println(r.Form)\nlog.Println(r.PostForm)\n\nw.Write([]byte(\"TEST\"))\n\n}\nfunc main() {\n    port := \"8001\"\n    r := mux.NewRouter().StrictSlash(true)\nr.HandleFunc(\"/session/store\", SessionStore).Methods(\"POST\")\n\nhandler := handlers.LoggingHandler(os.Stdout, handlers.CORS(\n    handlers.AllowedOrigins([]string{\"*\"}),\n    handlers.AllowedMethods([]string{\"GET\", \"PUT\", \"PATCH\", \"POST\", \"DELETE\", \"OPTIONS\"}),\n    handlers.AllowedHeaders([]string{\"Origin\", \"Authorization\", \"Content-Type\"}),\n    handlers.ExposedHeaders([]string{\"\"}),\n    handlers.MaxAge(10),\n    handlers.AllowCredentials(),\n)(r))\n\nnewServer := &http.Server{\n    Handler:      handler,\n    Addr:         \"0.0.0.0:\" + port,\n    WriteTimeout: DefaultWriteTimeout,\n    ReadTimeout:  DefaultReadTimeout,\n}\n\nlog.Println(\"Starting server on port\", port)\nlog.Fatal(newServer.ListenAndServe())\n\n}\n```\n\n. Hey guys,\nI found out that it's normal for it to be in a slice/array... There can be more than 1 of the same property in a URL parameter. Anyways, I hope this helps if anyone has the same question as me.. @JChermy can you post your code with the cookieDomainRewrite? I think I'm encountering the same problem.\n```\n_req(path,packet = {},method = 'get') {\n        let self = this\n    let uri = self.baseurl + path\n    let pack = self._package(packet)\n    let config = {\n        headers:{ Cookie:\"token=\" + self.token },\n        withCredentials:true\n    }\n    return axios[method](uri,pack,config)\n}\n\n```\n\n. ",
    "isaaclem": "@nickuraltsev : Please allow me to ask amateur question. I tried with your suggestion below and it worked.\n```\nconst ax = axios.create({\n  timeout: 30000,\n  headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n});\nax.post(\n  someURL, \n  qs.stringify({ json: '{ \"var1\": \"value1\" }', /Needed help on this part/ })\n)\n```\nMay I know how to modify the above if I wish to upload image? I've tried to just provide the key with the filePath but it didnt seems to work?\nqs.stringify({ \n  json: '{ \"var1\": \"value1\" }', \n  photo: '/Users/isaac/Library/Developer/CoreSimulator/Devices/xx/data/Containers/Data/Application/yy/tmp/zz.jpg' })\n. ",
    "weichx": "right now if I require('axios') i get the following files included via webpack automatically:\n[94] ./~/axios/index.js 40 bytes {1} [built]\n  [95] ./~/axios/lib/axios.js 3.45 kB {1} [built]\n  [96] ./~/axios/lib/defaults.js 1.66 kB {1} [built]\n  [97] ./~/axios/lib/utils.js 5.98 kB {1} [built]\n  [98] ./~/axios/lib/core/dispatchRequest.js 946 bytes {1} [built]\n  [99] ./~/axios/lib/adapters/xhr.js 4.08 kB {1} [optional] [built]\n [100] ./~/axios/lib/helpers/buildURL.js 1.49 kB {1} [built]\n [101] ./~/axios/lib/helpers/parseHeaders.js 784 bytes {1} [built]\n [102] ./~/axios/lib/helpers/transformData.js 550 bytes {1} [built]\n [103] ./~/axios/lib/helpers/isURLSameOrigin.js 2.25 kB {1} [built]\n [104] ./~/axios/lib/helpers/btoa.js 1.1 kB {1} [built]\n [105] ./~/axios/lib/helpers/cookies.js 1.36 kB {1} [built]\n [106] ./~/axios/lib/core/InterceptorManager.js 1.25 kB {1} [built]\n [107] ./~/axios/lib/helpers/isAbsoluteURL.js 563 bytes {1} [built]\n [108] ./~/axios/lib/helpers/combineURLs.js 348 bytes {1} [built]\n [109] ./~/axios/lib/helpers/bind.js 256 bytes {1} [built]\n [110] ./~/axios/lib/helpers/spread.js 564 bytes {1} [built]\nwhen I change index.js to be require('./dist/axios'), I get the following (as expected)\n [94] ./~/axios/index.js 41 bytes {1} [built]\n  [95] ./~/axios/dist/axios.js 30.6 kB {1} [built]\nbasically, the dist directory isnt used right now, it should be.\n. ",
    "johanmynhardt": "OK, thank you for having a look Matt, I appreciate it! I will do some more\ndigging in the morning :)\nOn Thu, 23 Jun 2016, 21:57 Matt Zabriskie, notifications@github.com wrote:\n\nI did a quick search and can't find anything in the spec that suggests why\na preflight requests is used for requests using onprogress. Using Firefox\nthe XHR that doesn't use onprogress makes a simple POST. The XHR that\ndoes use onprogress makes an OPTIONS preflight request followed by a POST\nrequest that is identical to the non-progress request.\nSo I can't really explain why it's making the preflight request, but\naxios is only adding an event listener to the request, nothing more, so I\ndon't know how it can be avoided.\nhttps://github.com/mzabriskie/axios/blob/master/lib/adapters/xhr.js#L146-L152\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/356#issuecomment-228165393,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AAsZBdE_vE3b1QR2I61MFBa_kShtG7Bdks5qOuUugaJpZM4I9KGc\n.\n. Sigh... I've done some more careful reading, and it seems easy to get it wrong, especially since XMLHttpRequest and CORS spec is scattered around a bit (IMO).\n\nWith much concentration in reading the following and traverse the web of links, it is clear that I missed something:\nhttps://dvcs.w3.org/hg/xhr/raw-file/tip/Overview.html#the-send()-method (4.6.6, item 10, Otherwise-part)\nhttps://www.w3.org/TR/cors/#cross-origin-request\nI don't feel bad for expecting what I did :smiley:\nIn the end it does what is expected.\n. ",
    "Willian-Zhang": "this does not add extra files compared to #155 \n. ",
    "Kekesed": "Browser, i think it's got stucked on \"Network Error\" when no CORS header added.\ni havn't examine it really close.\n. ",
    "eparizzi": "I have already created an issue on this and the author said he's planning on rewriting the definition file. I don't know when though.\nhttps://github.com/mzabriskie/axios/issues/346\n. ",
    "electricessence": "Pull request it? :/\n. Pull request it? :/\n. ",
    "JeroenNelen": "I also have the impression that the definitions aren't complete, for example the defaults attribute is not defined (which makes typescript angry when trying to set it via axios.defaults.baseUrl = ...), correct?\n. I'm getting is one: Property 'defaults' does not exist on type 'AxiosStatic'.\nBecause the typings don't seem to be defined for the default options.\nIf I find some time I can try to make a PRQ.\nKind regards, \n. @nickuraltsev in that case, I'll wait until your finished, are you also providing typings for the defaults option?\n. ",
    "alborozd": "The cause is interceptors. I can't send request with that Content-Type only when I use interceptors.\nHere is my code:\n```\naxios.interceptors.request.use(function (config) {\n        var token = LoginStore.getJwt();\n        if (token) {\n            config.headers[\"Authorization\"] = \"Bearer \" + token;\n        }\n        return config;\n    }, function (error) {    \n        return Promise.reject(error);\n    });\n\n```\nInside interceptor I can see 'Content-Type' header, but it is not sent to the server.\nDo I correctly use interceptors?\n. @mzabriskie I think you're right. When I use request interceptor fiddler shows that data is empty. Without interceptor I can see data and header and it works fine. \nSo, probably the problem occurs when you work with interceptors.\n. this is not a solution. What is difference if I will use \"Querystring\" or \"qs\" ? The problem is the header ['Content-Type'] = 'application/x-www-form-urlencoded' is empty because of interceptors.\n. ",
    "rahuljiresal": "Any updates on this? I have the same issue. Axios doesn't send the header I set.\n. Any updates on this? I have the same issue. Axios doesn't send the header I set.\n. This seems to be the culprit line \u2192 https://github.com/mzabriskie/axios/blob/master/lib/adapters/xhr.js#L117\nAny idea why the Content-Type header is removed before the request is sent?\nA workaround option is to change your data to data || {} when you're making an axios request. This will make sure data is not undefined.\n. This seems to be the culprit line \u2192 https://github.com/mzabriskie/axios/blob/master/lib/adapters/xhr.js#L117\nAny idea why the Content-Type header is removed before the request is sent?\nA workaround option is to change your data to data || {} when you're making an axios request. This will make sure data is not undefined.\n. ",
    "Dunkat": "I have the same problem... still waiting for fix.... I have the same problem... still waiting for fix.... ",
    "cadavre": "Please reopen @nickuraltsev as this is not fixed by your solution.\n+1 for issue.. ",
    "hyanmandian": "I use a interceptor with qs library to solve this problem. Works fine for me.\n```\nimport qs from 'qs';\naxios.interceptors.request.use((request) => {\n  if (request.data && request.headers['Content-Type'] === 'application/x-www-form-urlencoded') {\n      request.data = qs.stringify(request.data);\n  }\n  return request;\n});\n```. ",
    "brickgale": "+1 for issue.. ",
    "reznord": "You can just add a data: {} to the config, so the interceptor doesn't skip the headers which we specify. \nThis is what I did, and it worked for me: \n```\nimport request from 'axios'\nexport const playSound = (soundFile) => (dispatch) => {\n    dispatch(playSoundPending());\n    return request\n    .get(/play/audio/${soundFile}, { headers: {'Content-Type': 'audio/x-wav'}, data: {} })\n    .then(response => response.data)\n    });\n};\n```\nThis changed the Content-Type from application/json to audio/x-wav for me in the request headers in the network tab.. @bruddah cool, glad it worked. \nSent from my OnePlus ONEPLUS A3003 using FastHub. ",
    "sandervspl": "Has this been fixed yet? I can't seem to set my Content-Type with any of the solutions posted here.. ",
    "szare": "I have same problem, any help?. I solved the problem using encodeURIComponent:\nstatic getToken(username, password) {\n    return axios({\n      method: 'post', \n      url: 'endpoints',\n      data:       Username=${**encodeURIComponent**(username)}&\n                      password=${**encodeURIComponent**(password)}&\n                     Grant_type=password\n    }). ",
    "joshlangner": "bump. One would definitely assume that if one sets defaults, they would be always be respected. Axios is definitely ignoring the defaults in certain contexts, causing issues for poor folks.. ",
    "polyakoff": "+1 for this issue.\nSpent over 3 hours trying to figure out what's wrong with my Tomcat config and apparently appears my headers were stolen on the way to the server. Workarounds did not help. God save the headers!. @usopan Still stuck.. ",
    "usopan": "@polyakoff how did you solve for this?or are you still stuck. What I have observed is that this issue happens intermittently . I moved to isomorphic-fetch for this particular request as a workaround.\nThings seem to work OK on most browsers, but still not working on certain Safari versions.\nI am begining to think that Safari is screwing me.. I found the solution. Solution is to detect browser.\nIn Chrome use - https://github.com/ljharb/qs to parse json data to string and set Content-Type header\nIn Safari use - FormData as body and dont set any Content-Type header\n. @HakamFostok I am successfully using github/fetch in production for getting api token you could explore that as an alternative to jquery.\nhttps://github.com/github/fetch\n. ",
    "mezhmal": "+1 for this issue.. ",
    "estorski": "Can't imagine how an issue like this does not get fixed for more than half a year already.. +1, does not work for me either. +1, does not work for me either. ok, I figured it out.\nAs soon as you put transformResponse in place, you override the default transformation that actually performs JSON.parse on the response string.\nSo, in order to keep it working \"transparently\", you need to do it like that:\n```\n        transformResponse: [\n            (data) => {\n                if (typeof data === 'string') {\n                    try {\n                        data = JSON.parse(data);\n                    } catch (e) { / Ignore /\n                    }\n                }\n                return data;\n            },\n            (data) => {\n                // here you actually transform the response you would get by default when no transformation specified\n                return data;\n            },\n```\nIn my opinion, an action is required on this issue by the axios team.\nAt the very least, the documentation must be updated to make the behavior clear.\nAlso, I'd expose the default transformation function from the 'axios' exports, to not make every consumer write their own version of the default transformation.. ok, I figured it out.\nAs soon as you put transformResponse in place, you override the default transformation that actually performs JSON.parse on the response string.\nSo, in order to keep it working \"transparently\", you need to do it like that:\n```\n        transformResponse: [\n            (data) => {\n                if (typeof data === 'string') {\n                    try {\n                        data = JSON.parse(data);\n                    } catch (e) { / Ignore /\n                    }\n                }\n                return data;\n            },\n            (data) => {\n                // here you actually transform the response you would get by default when no transformation specified\n                return data;\n            },\n```\nIn my opinion, an action is required on this issue by the axios team.\nAt the very least, the documentation must be updated to make the behavior clear.\nAlso, I'd expose the default transformation function from the 'axios' exports, to not make every consumer write their own version of the default transformation.. ",
    "namgyu": "+1. ",
    "MatteCarra": "+1. ",
    "mrtongkatali": "+1. ",
    "nachofassini": "+1. ",
    "xiaoxintiaoda": "+1. ",
    "moshen1223": "const querystring = require('querystring');\nlogin(){\n      var _this = this;\n      this.$http({\n        url: url,\n        method: 'post',\n        data: querystring.stringify({\n          email:  email,\n          password: pass\n        }),\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      }).then(function (response) {\n        console.log(response);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }. ",
    "sebastianks": "+1. +1. ",
    "lfilipowicz": "+1. +1. ",
    "BorisBresciani": "+1 . ",
    "weichendahai": "1\n. ",
    "ChristianTucker": "+1. ",
    "Maxwell2022": "@bsjaffer I've posted the code sample, what else do you want? . ",
    "bsjaffer": "@Maxwell2022 i am good with it now. . ",
    "lukasborawski": "+1. +1. ",
    "indigoboi": "+1. ",
    "wooptoo": "+1. ",
    "bxyoung": "+1. ",
    "chunlaw": "+1. ",
    "warplan": "+1. ",
    "wangqi060934": "+1. ",
    "adeelibr": "Just do this, hope it helps.\n``\nlet details = {\n      key1: 'data1',\n      key2:data2,\n      key3:data3`,\n    };\nvar formBody = [];\nfor (var property in details) {\n  var encodedKey = encodeURIComponent(property);\n  var encodedValue = encodeURIComponent(details[property]);\n  formBody.push(encodedKey + \"=\" + encodedValue);\n}\nformBody = formBody.join(\"&\");\n\nconst URL = `PUT-YOUR-API-URL-OVER-HERE`;\nreturn axios({\n  method: 'POST',\n  url: URL,\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded',\n  },\n  data: formBody,\n})\n.then(res => res.data)\n.catch(error => { throw error });\n\n```. Just do this, hope it helps.\n``\nlet details = {\n      key1: 'data1',\n      key2:data2,\n      key3:data3`,\n    };\nvar formBody = [];\nfor (var property in details) {\n  var encodedKey = encodeURIComponent(property);\n  var encodedValue = encodeURIComponent(details[property]);\n  formBody.push(encodedKey + \"=\" + encodedValue);\n}\nformBody = formBody.join(\"&\");\n\nconst URL = `PUT-YOUR-API-URL-OVER-HERE`;\nreturn axios({\n  method: 'POST',\n  url: URL,\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded',\n  },\n  data: formBody,\n})\n.then(res => res.data)\n.catch(error => { throw error });\n\n```. ",
    "12343954": "+1. @purplecones  same issue as yours +1\nserver can not accept the  \bjson values. @iamendy \nmake the {data} to querystring, like: a=1&b=2&c=3\nvar data={a:1,b:2,c:3}\n              axios.post('http://your.ajax.url',\n                    Object.keys(data)\n                        .map(k =>${encodeURIComponent(k)}=${encodeURIComponent(data[k])})\n                        .join('&')\n                )\n                .then((response) => {\n                    console.log(response);\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n. ",
    "marcus-crane": "Yup, you guessed it, +1. ",
    "e-abdelbasset": "+1. ",
    "tangyouze": "+1. ",
    "bruddah": "+1, reznord's solution did the magic ( setting data alongside headers ): \nconst config = { headers: { 'Content-Type': 'multipart/form-data' }, data: {} };. ",
    "kennethross": "+1. ",
    "rodrigowpl": "Using qs work for me!. ",
    "prichey": "+1. ",
    "sirtimid": "+1. ",
    "DavidJiang7": "Hey guys! You can try this, it works fine for me,but i don't know why. \nget (url, data) {\n    return axios({\n      method: 'get',\n      url: url,\n      baseURL: 'http://xxxxx/api',\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n      },//this is important !\n      data: data,//this is important !\n      params: data//this is important !\n    }).then(\n      (response) => {\n        console.log(response)\n        return checkStatus(response)\n      }\n    )\n  }. ",
    "jess8bit": "Trying to send Content-Type:application/json-patch+json in a Patch request (following RFC6902),\nthe following worked for me (I have the right type in the request headers):\naxios.patch(\n          url,\n          data,\n          { headers: { 'Content-Type': 'application/json-patch+json;charset=UTF-8' } }  \n          ))\n. ",
    "lamarios": "For those having this issue because of the interceptor overwriting the headers just use in your interceptor:\nJavascript\nconfig.header['yourheader'] = value;\ninstead of\nJavascript\nconfig.header = {'yourheader': value}. ",
    "jamoy": "@DavidJiang7 solution should work. ",
    "kamil-kielczewski": "This works for me:\n```\nstatic register(token, email, lang)\n{\n        let config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }; // we do it to send SIMPLE post eequest (to avoid send CORS OPTIONS request before post)\n        let params = new URLSearchParams(); // and we cannot send json but params are transform to  url-style\n        params.append('email', email);\n        params.append('lang', lang);\n    return axios.post(ENV.API_URL + '/device/' + token + '/register', params, config);\n\n}\n```\nInteresting picture showing CORS cases HERE. The OPTIONS request will be not send when we send SIMPLE request. Simple request is request which is GET, HEAD, POST and has header 'content-type' equal to application/x-www-form-urlencoded, multipart/form-data, or text/plain and any custom headers.. @hellomrbigshot probably CORS problem (read about it, also in this thread) . ",
    "jesusantguerrero": "Just do this\njavascript\nconst data = {name: 'my name'}\nconst form = 'data=' + JSON.stringify(data)\naxios.post('/my_url', form)\nEdited\nsorry about the typo. and it works for me I've been using this  for months.\nI forgot to mention that in the server you have only the  data param\nphp \n...\n $data = json_decode($_POST['data'], 1);\n echo $data['name']; // my name\n.... ",
    "oshalygin": "bump for a clean solution, willing to help as well.. bump for a clean solution, willing to help as well.. > @jesusantguerrero \nJust do this\n\nconst data = {name: 'my name'}\nconst form = 'data=' + JSON.stringfy(data)\naxios.post('/my_url', form)\n\ndoesn't work, but its JSON.stringify ^^typo above.. > @jesusantguerrero \nJust do this\n\nconst data = {name: 'my name'}\nconst form = 'data=' + JSON.stringfy(data)\naxios.post('/my_url', form)\n\ndoesn't work, but its JSON.stringify ^^typo above.. For those of you using Node.js, this works.  Thanks everyone in the thread I basically combined a bunch of peoples solutions and references the Node.js docs\nThis is the cleanest I could come up with.\n```javascript\nimport { URLSearchParams } from 'url';\nasync function auth() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    };\n    const params = new URLSearchParams();\n    params.append('grant_type', 'client_credentials');\n    params.append('client_id', configuration.yelpClientId);\n    params.append('client_secret', configuration.yelpClientSecret);\nconst { data } = await axios.post(\n  YELP_AUTH_ENDPOINT,\n  params.toString(),\n  config,\n);\n\nreturn data;\n\n} catch (error) {\n    console.log(error.response.data);\n    return {};\n  }\n}\n```. For those of you using Node.js, this works.  Thanks everyone in the thread I basically combined a bunch of peoples solutions and references the Node.js docs\nThis is the cleanest I could come up with.\n```javascript\nimport { URLSearchParams } from 'url';\nasync function auth() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    };\n    const params = new URLSearchParams();\n    params.append('grant_type', 'client_credentials');\n    params.append('client_id', configuration.yelpClientId);\n    params.append('client_secret', configuration.yelpClientSecret);\nconst { data } = await axios.post(\n  YELP_AUTH_ENDPOINT,\n  params.toString(),\n  config,\n);\n\nreturn data;\n\n} catch (error) {\n    console.log(error.response.data);\n    return {};\n  }\n}\n```. > @skuarch \n\nuse params instead of data\n\nIf that works, its the cleanest solution by far.. > @skuarch \n\nuse params instead of data\n\nIf that works, its the cleanest solution by far.. ",
    "skuarch": "use params instead of data\njavascript\naxios({\n    method: 'post',\n    url: '/my/api',\n    headers: {\n        'Content-type': 'application/x-www-form-urlencoded'\n    },\n    params: {\n        'grant_type': 'code',\n        'client_id': '1231453',\n        'client_secret': 'THIS_IS_THE_SECRET'\n    }\n})\n    .then((response) => {\n        console.log(response);\n    })\n    .catch((error) => {\n        console.log(error);\n    }\n);\n. ups, same problem here!. ",
    "jpittner": "@oshalygin it sets the params to the query string, doesn't send as post variables.\nAn ajax library that can't post a simple form? Really?\n. ",
    "gaga-change": "\n\n",
    "hellomrbigshot": "anyone know who to set content-type to application/json.\naxios.post(`${DOMAIN}${url}`,params, {'headers': {\"Content-Type\": \"application/json;charset=UTF-8\"}})\nit doesn't works.. ",
    "mwardm": "The troublesome bit of code in Axios for me (having trouble getting the payload right without using URLSearchParams) appears to be\nif (utils.isURLSearchParams(data)) {\n          setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n          return data.toString();\n        }\n        if (utils.isObject(data)) {\n          setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n          return JSON.stringify(data);\n        }\n        return data;\n      }\nSo if data is an object that isn't a URLSearchParam (or one of a few other types that are checked for prior to this - FormData is in the list and used raw) then it's going to be JSON.stringified and might cause the header to be set to application/json.\nOn the other hand, if I pass in a string then it's just used as-is, so adeelibr's Jul 4 comment is the one that works for me and my form data.. ",
    "aftabalamdev99": "They should provide a default header type. I solved this problem by using this code. \nthis is my vue + axios code on client side\n```\nVue.prototype.$http = axios;\nnew Vue({\n    el: '#root',\n    data: {\n        site_url: params.site_url,\n        name: '',\n        description: ''\n    },\n    methods:{\n        onSubmit(){\n            var url = this.site_url + 'project/create';\n            this.$http.post( url, {\n                name: this.name,\n                description: this.description\n            } ).then(\n                response => console.log(response.data)\n            );\n        }\n    },\n    mounted(){\n}\n\n});```\nHere this.$http means axios. I using axios instead of vue resource.\nMy Server Side Code\nif ( isset( $_POST ) ) {\n            $fields_to_add = array( 'name', 'description' );\n            $response = json_decode(file_get_contents(\"php://input\"), true);\n            foreach ( $response as $k => $v ) {\n                if( in_array($k, $fields_to_add) ){\n                    $_POST[$k] = $v;\n                }\n            }\n            echo json_encode(  $_POST );\n            exit();\n        } else{\n            echo json_encode( array( 'message' => 'Invalid Request' ) );\n            exit();\n        }\nPut field names as list of fields name. It will auotmatically convert it into post\nHope this helps \n. ",
    "akakoori": "+1. ",
    "chashwan88": "+1. ",
    "Limycuk": "+1. ",
    "redstrike": "OMG \ud83d\ude31 I didn't know sending a POST request with some application/x-www-form-urlencoded form data is so complicated like this. I have to re-read the README many times, and wrong understanding that the config's data field could be used with qs.stringify(), also params field.\nAt the moment, it seems that only instance methods support sending x-www-form-urlencoded form data such as:\n- axios#post(url[, data[, config]])\n- axios#put(url[, data[, config]])\n- axios#patch(url[, data[, config]]). ",
    "estinchon": "+1. ",
    "weituotian": "not solved!. ",
    "rodrigogs": "It's open like... forever. The old request lib used to make it so simple.. It's starting to get ridiculous!\nNot even a \"f**k you, we will never fix this!\" :/. I moved to got pagkage, since axios seems abandoned.. It still doesn't work at all.... ",
    "skybird": "+1. ",
    "djamrozik": "+1. ",
    "Shanguo": "+1. +1. ",
    "aditya43": "Here is an easy way to do this.\nFirst of all, please read here : https://github.com/axios/axios#using-applicationx-www-form-urlencoded-format\nHere is a fix :\n\n\nGo to : https://github.com/WebReflection/url-search-params\n\n\nYou can npm install it or simply download the library from here : https://github.com/WebReflection/url-search-params/blob/master/build/url-search-params.js\n\n\nIf you have downloaded the library, simply include it in your file. \n\n\n//For e.g. in your index.html, \n<script src=\"url-search-params.js\"></script>\n\nThen make a POST request like this :\n\nvar params = new URLSearchParams();\nparams.append('param1', 'value1');\nparams.append('param2', 'value2');\naxios.post('/foo', params)\n.then(function (response)\n                {\n                    console.log(response.data);\n                })\n                .catch(function (error)\n                {\n                    console.log(error);\n                });\nIt will work like a charm! :+1: . ",
    "cengiz-demir": "@aditya43 Thank You!. ",
    "DZuz14": "You can actually do this as well. This comes straight from the axios Github Page. You will have to create the encoded URL yourself, but I just tested it, and it works.\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';. Is this really even a bug? I am doing url encoded in two different projects with axios, and it works just fine. The comment I posted here previously is the only thing I set, and it works. . ",
    "wlisesrivas": "This bug still exists, any update?. This bug still exists, any update?. @DZuz14 I try it and doesn't work. Using the axios globals, per instance, and nothing. \nIt appear to be hardcoded.. @DZuz14 I try it and doesn't work. Using the axios globals, per instance, and nothing. \nIt appear to be hardcoded.. ",
    "Fyerl": "+1. thanx. ",
    "frank0718": "axios sucks \uff0c use request for replacement. ",
    "semiromid": "+1. It is working!\nhttps://www.npmjs.com/package/form-data-urlencoded\n```\nimport getFormData from 'form-data-urlencoded';\nlet data = getFormData({\"_csrf\": 'wrwrwrvwg4657rhed4hehe4',\n                            \"Res1[Test1]\": \"segf96767\", \n                            \"Res2[Test2]\": \"hello\"});\nlet options = {\n     method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' },\n    url: 'http://fhfhfhfh/455454545/fhfhfhf',\n    data\n};\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\naxios(options).then(function (response) {\n              console.log(response);\n    }).catch(function (error) {\n             console.log(error);\n        });\n```\n. ",
    "trx404": "I defined the charset (UTF-8) in the \"Content-Type\" and I modified the above \"interceptors\" solution.\nFinally it works.\n```javascript\nimport axios from 'axios'\nimport qs from 'qs'\naxios.interceptors.request.use((request) => {\n  if (request.data && (request.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') !== -1)) {\n    request.data = qs.stringify(request.data)\n  }\n  return request\n})\naxios({\n  method: 'POST',\n  url,\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n  },\n  data\n}).then(() => {\n// DO SOMETHING\n})\n```. I defined the charset (UTF-8) in the \"Content-Type\" and I modified the above \"interceptors\" solution.\nFinally it works.\n```javascript\nimport axios from 'axios'\nimport qs from 'qs'\naxios.interceptors.request.use((request) => {\n  if (request.data && (request.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') !== -1)) {\n    request.data = qs.stringify(request.data)\n  }\n  return request\n})\naxios({\n  method: 'POST',\n  url,\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n  },\n  data\n}).then(() => {\n// DO SOMETHING\n})\n```. ",
    "sowork": "I found only cors cases, the failure of sending options request headers set cross-domain failure, behind the operation will not be implemented. . ",
    "AeonFr": "+1. +1. ",
    "Silve2611": "+1. @HakamFostok \nThe easiest way to get past this error is to use QS. You do not have to install qs just use it directly with qs.stringify\nlet qs = require('qs');\nlet result = await axios.post(url,\n    qs.stringify({\n        refresh_token: refresh_token,\n        grant_type: 'refresh_token'\n    }),\n    {\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        auth: {\n            username: 'username',\n            password: 'secret'\n        }\n    });\nWith that you can use axios which ist much better with ES6 ;) \nBut you are completely right. This Bug should have been solved ages ago. Don't know what is taking them so long. . Of course it is a bug! It does not work as described in the docs. Also it does not make sense to add the additional step for something that should clearly be handled by axios. Other methods do not need the step.. It should \u201eguess\u201c it for us or throw an error that we can handle. At the moment everything looks fine but the parans are obviously not correcf. A beginner working with axios will not be able to trace down such an error. At least it should be documented correctly.. > @mzabriskie\n\nShouldn't this be closed as fixed?\nTested it with appropriate headers and they are getting correctly set in the request.\nHeaders in request\nSetting headers here\n\nno this cannot be closed!!! \nEverybody is running into the problem and does not where to find the solution. It should work without setting headers or a standard header should be set. \nIf not an error should be thrown showing where the problem is. \nAlso the documentation has to be updated.\nIt is still broken! . ",
    "DanielFaria": "+1. ",
    "pseudophpt": "+1. ",
    "saloustrosm": "+1. ",
    "mrnagydavid": "+1. ",
    "cjds": "+1. ",
    "bertho-zero": "+1. Related to https://github.com/axios/axios/issues/191. It's a issue due to Jest default environment.\nhttps://facebook.github.io/jest/docs/en/configuration.html#testenvironment-string\n\nThe test environment that will be used for testing. The default environment in Jest is a browser-like environment through jsdom. If you are building a node service, you can use the node option to use a node-like environment instead.\n\n\nWhat creates XMLHttpRequest and misleads this function:\nhttps://github.com/axios/axios/blob/9a6abd789f91a87d701116c0d86f1cfbc3295d66/lib/defaults.js#L16-L26\n\nTo fix this I had to add this in my jest.config.js file:\njs\n{\n  // ...\n  testEnvironment: 'node'\n  // ...\n}. When an object is passed as paramsSerializer, it must be passed as options to encodeParams.\nAnd we should add the option arrayFormat: 'repeat' (to fix https://github.com/axios/axios/issues/1443 like qs)\n```js\naxios.get(\n  \"/url\",\n  { params: { a: [\"b\", \"c\"] } },\n  { paramsSerializer: { arrayFormat: \"indices\" } }\n);\n// '/url?a[0]=b&a[1]=c'\naxios.get(\n  \"/url\",\n  { params: { a: [\"b\", \"c\"] } },\n  { paramsSerializer: { arrayFormat: \"brackets\" } }\n);\n// '/url?a[]=b&a[]=c'\naxios.get(\n  \"/url\",\n  { params: { a: [\"b\", \"c\"] } },\n  { paramsSerializer: { arrayFormat: \"repeat\" } }\n);\n// '/url?a=b&a=c'\n```. This PR with https://github.com/axios/axios/pull/1565 allow to have a behavior similar to qs natively.. ",
    "Halceyon": "+1. ",
    "iChaosren": "+1. ",
    "HakamFostok": "I started with axios, as one of my colleagues recommended it to me, and the first endeavor for me was to get the access token from a working API. and I collide with this bug, and then I returned to jQuery, (honestly, I heat jQuery so much, but it was forced to do that). So I think there is no better way to make people flee from this library than this old, unsolved bug.\nI appreciate all the work done in this library, as a developer I know creating a library is not a trivial task, and I hope to let the jQuery down one day and come back to here again.. @usopan thank you very much, I will take a look at it\n. ",
    "ngohungphuc": "Yes, it not make sense when you have to add adition step.\nIf I want to post \nheaders: {\n     'Content-type': 'application/x-www-form-urlencoded'\n}\nI have to write like this\naxios.post(\n      \"connect/token\",\n      qs.stringify({\n        username: this.state.username,\n        password: this.state.password,\n        grant_type: \"password\",\n        scope: \"offline_access\"\n      })\n    );\n. Seem like this issue will not be fixed. Why did you close the issue and dont let me verify again. ",
    "earllapura": "I had the same issue with setting Content-Type to application/vnd.api+json, similar to #340, which was unfortunately closed without resolution.\nMy workaround was to stringify the object data in order to send the Content-Type, which is a bit hacky, since we'd have to deal with axios way of setting application/json;charset=utf-8 when dealing it is with an object data.\nHope we'd have more capability in manually setting the Content-Type rather than have axios \"guess\" it for us.. ",
    "gabriellet": "+1 Just spent 2 hours tracking this issue down. Would have appreciated a better explanation/note in the readme at the very least. Will update if qs solves the problem. \nUPDATE: Using react, qs worked for me. This was my solution. I needed both form parameters and a query parameter in my case.\nvar data = qs.stringify({\n    id: 'MY_ID',\n    action: 'MY_DATA'\n});\nvar params = {\n  params: {\n    token: 'MY_TOKEN'\n  }\n};\naxios.post('MY_URL', data, params)\n    .then(function (response) {\n      console.log(response);\n    })\n    .catch(function (error) {\n      console.log(error);\n    });. ",
    "master-of-null": "+1. ",
    "clintonqwert": "+1. ",
    "tiodot": "+1 there still has the problem. ",
    "romgrk": "+1\nping @mzabriskie @nickuraltsev. +1\nping @mzabriskie @nickuraltsev. The issue on the nodejs side is that one of the dependencies, follow-redirects, is deleting the content-type header:\n\nhttps://github.com/olalonde/follow-redirects/blob/1b6340f83ad5596a0a38c16a7113692bd90301f2/index.js#L188-L192. The issue on the nodejs side is that one of the dependencies, follow-redirects, is deleting the content-type header:\n\nhttps://github.com/olalonde/follow-redirects/blob/1b6340f83ad5596a0a38c16a7113692bd90301f2/index.js#L188-L192. ",
    "tonyweed": "+1 definitely running into the same issue here. ",
    "mgsod": "+1. ",
    "lopans": "fix this finally not to use hacks as qs (but yes, qs works). ",
    "matpeder": "Hej\n\nmaj 2018 23.31 skrev \"Leonid Ershov\" notifications@github.com:\n\nfix this finally not to use hacks as qs\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/axios/axios/issues/362#issuecomment-390337824, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AJZ-B0lPoCseiT4WNhJFlHVUTBHbmo9Yks5tzz3FgaJpZM4JAIfw\n.\n. ",
    "yanaxua": "+1. +1. ",
    "luizmello": "+1. +1. ",
    "camposjorge": "It seems that some hero, fixed it and created a specific version \"aaxios\" \nAllow setting of content-type\nDidn't test it though, moved on to fetch. It seems that some hero, fixed it and created a specific version \"aaxios\" \nAllow setting of content-type\nDidn't test it though, moved on to fetch. > Is there any workaround on this issue atm?\nLookup a year up here and you will see plenty of workarounds... Though I would recommend, like others and myself included, move on from axios. It's abandoned... . > Is there any workaround on this issue atm?\nLookup a year up here and you will see plenty of workarounds... Though I would recommend, like others and myself included, move on from axios. It's abandoned... . ",
    "brycelund": "+1. ",
    "dhruvparmar372": "+1. +1. ",
    "AlicLee": "+1. ",
    "ejose19": "+1. ",
    "Oliboy50": "\ud83d\udc4d \nas @camposjorge said we may see a fix (soon?) thanks to https://github.com/axios/axios/pull/1544. \ud83d\udc4d \nas @camposjorge said we may see a fix (soon?) thanks to https://github.com/axios/axios/pull/1544. @aaroninn this does not seem to be the same problem, please open a new issue if you think your problem is related to axios (which seems to be more related to a basic usage of vuex to me, but I can't be sure)\nthis thread is already full of +1, no need to gather other issues here. @aaroninn this does not seem to be the same problem, please open a new issue if you think your problem is related to axios (which seems to be more related to a basic usage of vuex to me, but I can't be sure)\nthis thread is already full of +1, no need to gather other issues here. > https://github.com/axios/axios/issues/362#issuecomment-229817415\n@mzabriskie it seems that you're the author of the commit which introduced this issue, can't you do anything about it (if you don't even understand why you did it in the first place, you could/should revert it, right?)\nthanks in advance. > https://github.com/axios/axios/issues/362#issuecomment-229817415\n@mzabriskie it seems that you're the author of the commit which introduced this issue, can't you do anything about it (if you don't even understand why you did it in the first place, you could/should revert it, right?)\nthanks in advance. ",
    "qxqxqxqx": "no fix?. solved it! it's not a axios problem,just about cross origin. ",
    "kdeloach": "+1. ",
    "lastube": "set { headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}}\nand \njust use  transformRequest from axios options\ntransformRequest: [function (data) { return format(data) }],\nformat function used to parse {a:\"a\",b:\"b\"} to \"a=a&b=b\". \nset { headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}}\nand \njust use  transformRequest from axios options\ntransformRequest: [function (data) { return format(data) }],\nformat function used to parse {a:\"a\",b:\"b\"} to \"a=a&b=b\". ",
    "connorgilheany": "+1, and none of the above solutions worked. ",
    "Patskimoto": "Seems like a lot of people are still waiting for a fix for this issue, myself included - surely after all this time there must be some proposed solution to this.. ",
    "mervyns": "fixed this issue with qs.stringify in react.\nu just have to qs.stringify the data before passing it into axios.post. ",
    "TaifRaoof": "the problem is that by default the CSRF Token is register as a common header with Axios so\n to solve this issue \n1- replace these lines in bootstrap.js \"\nwindow.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\nlet token = document.head.querySelector('meta[name=\"csrf-token\"]');\nif (token) {\n    window.axios.defaults.headers.common['X-CSRF-TOKEN'] = token.content;\n} else {\n    console.error('CSRF token not found: https://laravel.com/docs/csrf#csrf-x-csrf-token');\n}\n\"\nby this line \"\n     window.axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n\" \n2- install qs module by npm  click here\n3- define const of qs like below : \nconst qs = require('qs');\n4- use axios by defult like this : \naxios.post('your link here ',qs.stringify({\n                        'a1': 'b1',\n 'a2 ':'b2' \n}))\n.then(response => {\n                     alert('ok');\n\n                })\n                .catch(error => alert(error));\n\n. ",
    "joshuachinemezu": "With this I was able to submit a form using axios irrespective of the fact that the content-type cannot be changed on axios\n```\nconst { fullname, email, password, phone } = this.state;\naxios(url, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      data: this.serialize({\n        name: fullname,\n        email: email,\n        password: password,\n        phone: phone\n      })\n    })\n      .then(response => {\n        console.log(response);\n      })\n      .catch(error => {\n        console.log(error.response);\n      });\nserialize = obj => {\n    let str = [];\n    for (let p in obj)\n      if (obj.hasOwnProperty(p)) {\n        str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n      }\n    return str.join(\"&\");\n  };\n. ",
    "robben1234": "Bump. Ridiculously, after years, this annoying bug is still not fixed. . Bump. Ridiculously, after years, this annoying bug is still not fixed. . ",
    "dractw": "Bump. Same issue here, fix required af.. ",
    "Abhicoding": "@mzabriskie \nShouldn't this be closed as fixed?\nTested it with appropriate headers and they are getting correctly set in the request.\nHeaders in request\nSetting headers here. @mzabriskie @rubennorte Replacing spaces with '+'. @hezhongfeng @emilyemorehouse\nIt looks like a non-issue. The function below is running the encodeURIComponent on '[(H)]' and returning %5B(H)%5D, but the last two replace functions are changing it back to '[(H)]'\nfunction encode(val) {\n    return encodeURIComponent(val).\n    replace(/%40/gi, '@').\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}. ",
    "Party4Bread": "form-urlencoded library help me to fix that (for temporary).\njavascript\nreturn preset.post(\"/app/BookingProc.do\",formurlencoded(dat),{\n        headers:{\n            Cookie:session\n        }\n    }).then(response=>{\n        return response\n    }). ",
    "victorusachev": "Bump. This bug is still in its place and feels great!. ",
    "mikementor": "bump. ",
    "proCrichard": "I also am experiencing this here bug.. ",
    "gp15237125756": "still disgusting here . ",
    "ChBernat": "const axios = require('axios');\nconst qs = require('querystring');\n\naxios.post(`${this.api}siteverify`, qs.stringify({\n  secret: this.secret,\n  response: recaptchaToken,\n  remoteip: userIP,\n}), {\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded',\n  },\n});\n\nThis works for me. I ripped it off from the app I'm currently developing, this part is for verifying google's recaptcha.\n. ",
    "laurenz-glueck": "Still having the same problem...\nSetting as default is not working:\naxios.defaults.headers.common['Accept'] = 'application/json'; // working\n        axios.defaults.headers.common['Content-Type'] = 'application/json;charset=UTF-8'; // NOT working\nAnd also setting in request is not working:\naxios.get(url, {\n                headers: {\n                    'Content-Type': 'application/json;charset=UTF-8'\n                }\n            }). @jeremycare I just create a PR for that problem... I think it's a really annoying \"bug\" and should be fixed. Especially it's really easy to fix this and get rid of that problem.. I created a PR that would fix the problem over two months ago... I don\u2019t understand why it not get merged?!. ",
    "SylarRuby": "It's 2018! Which answer, above, should I not downvote?. ",
    "jeremycare": "This issue need a fix ? Or it's voluntary, i'm asking, it's opened since 2 years but no one fixed it. Is it voluntary and no need to be fix ?. ",
    "airs0urce": "Guys, I think I understand why this ticket still open.\nPeople who tell that it works for them now use \"qs\" module, those who tells it doesn't work use \"querystring\" module.\nI see people aslo having problems with headers, this ticket so long to read everything and may be I understand not everything about issue in this ticket, but if somebody can't make requests with form data work, checkout this before trying other things:\nDescribed everything here: https://github.com/axios/axios/issues/1894. @wasnlosdu they should look like this:\na%5Bb%5D=1&a%5Bc%5D=2\nOr like this without escape:\na[b]=1&a[c]=2\nSure, it should be documented in querystring docs. But to make it more clear that there is difference between two libs I think it makes sense to make a note in axios docs where it\u2019s suggested to ise any of those libs, because result of using different libs is not equal and loks like handling nested objects is most common mistake people do. @wasnlosdu Sure. Will do it. Done. ",
    "perry-mitchell": "It's disappointing to see a swap in of native fetch in browsers work instantly with the setting of Content-Type when Axios fails to set it. Interop between platforms was its biggest selling point for me.\nI can see in the transformRequest method that the header is set but it never makes it to the actual request. I can't use the qs module as I'm simply sending a body of text.. It's disappointing to see a swap in of native fetch in browsers work instantly with the setting of Content-Type when Axios fails to set it. Interop between platforms was its biggest selling point for me.\nI can see in the transformRequest method that the header is set but it never makes it to the actual request. I can't use the qs module as I'm simply sending a body of text.. To rephrase what I'm experiencing: I can't set a Content-Type header in the browser using axios as it's overwritten. I'm sending a string payload (no formdata), so the qs/querystring modules are not relevant for my case.\nWhat can we do to fix this?\nEDIT: ~~For now I'm just going to use fetch when in browser, but this kind of negates the whole point to using axios for me. I'm ready and willing to test ideas if anyone has something I can try.~~\nEDIT2: I've built my own library - cowl -to handle my requests in multiple environments (targeting Node/Browser/React-Native). It's by no means a replacement for axios and its wealth of features, but it does support all the basics.. To rephrase what I'm experiencing: I can't set a Content-Type header in the browser using axios as it's overwritten. I'm sending a string payload (no formdata), so the qs/querystring modules are not relevant for my case.\nWhat can we do to fix this?\nEDIT: ~~For now I'm just going to use fetch when in browser, but this kind of negates the whole point to using axios for me. I'm ready and willing to test ideas if anyone has something I can try.~~\nEDIT2: I've built my own library - cowl -to handle my requests in multiple environments (targeting Node/Browser/React-Native). It's by no means a replacement for axios and its wealth of features, but it does support all the basics.. I've actually had to create yet another messy hybrid app by using fetch in browsers and axios in node and within react-native. Seems funny that it's like this and not the other way around. Really hoping to see this tackled soon so I can remove my monkey-patch.\nI think it's important to realise that this is definitely not only an issue with querystring.. My body content is just raw text with no parameters, yet I can't send it using axios with a Content-Type.. I've actually had to create yet another messy hybrid app by using fetch in browsers and axios in node and within react-native. Seems funny that it's like this and not the other way around. Really hoping to see this tackled soon so I can remove my monkey-patch.\nI think it's important to realise that this is definitely not only an issue with querystring.. My body content is just raw text with no parameters, yet I can't send it using axios with a Content-Type.. ",
    "Felomeng": "Got the same issue. And if I set the key to anything else, it works, except for \"Content-Type\"! Please help!. I tried using post, it works fine, default of post is json. ",
    "StriderHND": "I'm experiencing this bug right now... so there Is no solution for this after years? wow.... ",
    "jovanmaric": "\nI created a PR that would fix the problem over two months ago... I don\u2019t understand why it not get merged?!\n\nKeep in mind that no one has pushed anything since september last year, maybe they're searching for maintainers?. Also, I think you missed a test when I compare your PR with: https://github.com/axios/axios/pull/1544/files\n@mzabriskie could you maybe take the responsibility to merge one of these PR's? As currently some software requires get requests to have a content-type set (RoR params for instance: https://guides.rubyonrails.org/api_app.html#using-actiondispatch-request). The solution specified in https://github.com/axios/axios/issues/362#issuecomment-229817415 seems like the proper way to go and it would most of all solve all the desperate hacks like using fetch for this specific use case. \n. ",
    "bertolo1988": "So Axios is officially unable to send requests with 'Content-Type': 'application/x-www-form-urlencoded' or does @ChBernat solution actually work?. ",
    "funkindy": "Is there any workaround on this issue atm?. ",
    "justintime4tea": "Wow... they should just abandon the project at this point, I know I am. Almost 3 years since issue originally reported and now we're still trying to solve this thing? Unbelievable. I love open source so I'm not harboring any ill feelings for this project not have maintainers but... it's used by TONS of people so the least you could do is abandon it so we all know this project is dead/dying. Thanks.. This was a misunderstanding on my part and it does not appear that Axios actually performs an immediate GET request. Apologies for the submission.. ",
    "kslr": "@justintime4tea Do you have a new recommendation?. ",
    "tarim": "same as here.It cannot handle errors properly. \n. Hi @rubennorte ,\nThank you very much for your response. It works, but, dispatch doesn't work inside interceptors.\nfor example \nif(err.status===401) {\n            localStorage.removeItem('token');\n            dispatch(sessionOutSuccess(err.message));\n        }\nAny idea please?\nThanks,\n. Hi @rubennorte ,\nSorry, I am using redux, and, anything come up it will update redux store. \nThanks,\n. same problems here. We used local storage for token based authentication, and it never update common['Authorization'] values(until refresh whole browser). \nFYI: I updated 0.13 version and it is same.\nThanks\n. Hi @DjebbZ ,\nWhere I can find an example for this? or could you show me how to use this please?\nThanks, \n. ",
    "ChrisDillinger": "How do I tell if the version of axios I'm using has this fix?\nI'm using v0.11.0 and I do set http_proxy and https_proxy before I make my request, but the script appears to ignore them.. At what time in the lifetime of my nodejs script executing must process.env.http_proxy or process.env.https_proxy be set? My proxy settings don't appear to work. Also, I'm using v0.11.0 of axios, and I'm not sure how to tell what version this PR is a part of.. Thanks a bunch @peruukki !\nWeird yeah I\u2019ve just been using request-native-promise instead \ud83e\udd37\u200d\u2642\ufe0f\nI see why one should normally not set env vars after script starts but I wrote a CLI program that optionally let\u2019s the user configure proxy settings for the rest of the lifetime of the script\nThe root problem here tho was version of library I was using, setting env vars after script starts was just accidental red herring \nThank u!!. ",
    "haxxxton": "@tarim, Not sure if you found a solution to this, but you can access dispatch as a property of your store. You just need to include where you've defined your store, and then call the function you need. For example:\n```javascript\nimport axios from 'axios';\n// assumed locations of your exports/files\nimport { sessionOutSuccess } from '~/js/actions';\nimport store from '~/js/configured-store';\naxios.interceptors.response.use(null, function(err) {\n    if(err.status === 401) {\n        localStorage.removeItem('token');\n        store.dispatch(sessionOutSuccess(err.message));\n    }\n    return Promise.reject(error);\n});\n```. ",
    "linesh-simplicity": "might be a bit late but regarding the redux dispatch thing one of the solutions can be using middlewares where dispatch will be passed in as available parameters: \n```js\nconst createAxiosMiddleware = (axios) => ({ dispatch, getState }) => {\n  axios.interceptors.response.use(null, (error) => {\n    if (error.response.status === 401) {\n      dispatch(actions.logout())\n    }\n  })\nreturn (next) => (action) => next(action)\n}\nexport default createAxiosMiddleware(axios)\n``. might be a bit late but regarding the redux dispatch thing one of the solutions can be using middlewares wheredispatch` will be passed in as available parameters: \n```js\nconst createAxiosMiddleware = (axios) => ({ dispatch, getState }) => {\n  axios.interceptors.response.use(null, (error) => {\n    if (error.response.status === 401) {\n      dispatch(actions.logout())\n    }\n  })\nreturn (next) => (action) => next(action)\n}\nexport default createAxiosMiddleware(axios)\n```. ",
    "diiq": "Ditto here.  The problem specifically occurs when using an instance (the result of axios.create).. Ditto here.  The problem specifically occurs when using an instance (the result of axios.create).. ",
    "lmittmann": "@nickuraltsev When will this fix be available in a release? . ",
    "gtorodelvalle": "Even a more recent issue in Axios: https://github.com/axios/axios/issues/1627. ",
    "c0d3ster": "I just wanted to tack on that there's a small syntax error on the above solution, for anyone reading through this issue trying to use axios.all.  The above solution is missing a closing parenthesis on the call to .then(\naxios.all([\n    axios.get('http://google.com'),\n    axios.get('http://apple.com')\n  ])\n  .then(axios.spread((googleRes, appleRes) => {\n    // do something with both responses\n  }));\nHappy coding!. I just wanted to tack on that there's a small syntax error on the above solution, for anyone reading through this issue trying to use axios.all.  The above solution is missing a closing parenthesis on the call to .then(\naxios.all([\n    axios.get('http://google.com'),\n    axios.get('http://apple.com')\n  ])\n  .then(axios.spread((googleRes, appleRes) => {\n    // do something with both responses\n  }));\nHappy coding!. @Cholowao lol I did not copy and paste his code block, but I did realize there was an error after trying to implement a similar .all call for three simultaneous requests.  I hadn't seen the axios.spread syntax before, so I figured I'd try to save some people a few minutes counting parenthesis in the future!. ",
    "franciscop-invast": "You can do the same natively with deconstructing:\njs\nPromise.all([\n  axios.get('http://google.com'),\n  axios.get('http://apple.com')\n]).then(([google, apple]) => {\n  // do something with both responses\n});\nOr with await (you must be inside an async function):\n```js\n(async () => {\n  const [google, apple] = await Promise.all([\n    axios.get('http://google.com'),\n    axios.get('http://apple.com')\n  ]);\n// do something with both responses\n})();\n```. You can do the same natively with deconstructing:\njs\nPromise.all([\n  axios.get('http://google.com'),\n  axios.get('http://apple.com')\n]).then(([google, apple]) => {\n  // do something with both responses\n});\nOr with await (you must be inside an async function):\n```js\n(async () => {\n  const [google, apple] = await Promise.all([\n    axios.get('http://google.com'),\n    axios.get('http://apple.com')\n  ]);\n// do something with both responses\n})();\n```. ",
    "Suyash-Purwar": "Is it possible to handle .catch() block for two requests separatelty.\n\naxios.all([\n    axios.get('http://google.com'),\n    axios.get('http://apple.com')\n  ])\n  .then(axios.spread((googleRes, appleRes) => {\n    // do something with both responses\n  }))\n  .catch((googleErr, appleErr) => {\n    // do something with request failures\n  });\n. ",
    "rochdev": "Just got hit by this as well. Workaround is to use the transformResponse option.\njs\nrequest({\n  ...\n  transformResponse: [data => data]\n}). ",
    "alexi21": "I worked around this by nesting my response call:\n.catch(response => {\n  dispatch(authError(response.response.data.error));\n});\ninstead of \n.catch(response => {\n  dispatch(authError(response.data.error));\n});\nThe original error was a type error because response.data didn't exist.\n. Okay cool, thanks Pr0digy...so I am using 0.13.1 and catching a 422 and it works okay. Is your code online I am happy to have a look at it.\n. ",
    "pr0digy": "@alexi21 It's not the same. You are talking about a documented change mentioned here.  In my case the catch method is not even called. \n. @alexi21 Thanks for your offer, but it's a private project and I've rolled back to 0.12.0.\n. ",
    "lnmunhoz": "I am having the same issue @srahulprdxn with the version 0.13.1\nI am returning a json with an error message from the server and a status code 401, but the error from catch is always an exception.\nPOST http://localhost:8080/authenticate 401 (Unauthorized)\nbundle.js:54853 Error: Request failed with status code 401\n    at createError (http://localhost:3000/bundle.js:37601:16)\n    at settle (http://localhost:3000/bundle.js:37579:13)\n    at XMLHttpRequest.handleLoad (http://localhost:3000/bundle.js:37472:8)\nThe 0.12.0 did the trick and now I am receiving an object again.\n. @nickuraltsev I followed the examples using .catch(err) but the err is just an exception. Doesn't contain the returning object like the example shows.\n. ",
    "SOSANA": "@nickuraltsev I still have this issue with v 0.13.1 :-1: \nAs per your upgrade guide console.log(error.response); // Only available if response was received from the server did not make a response from my server\nfor anyone having similar issue was able to fix this issue by passing in the following and worked\n.catch(response => {\n        // if request is bad, show an error to the user provided by the server\n        // api issue with axios, quick fix add extra response object\n        dispatch(authError(response.response.data.error));\n      });\n. @nickuraltsev I still have this issue with v 0.13.1 :-1: \nAs per your upgrade guide console.log(error.response); // Only available if response was received from the server did not make a response from my server\nfor anyone having similar issue was able to fix this issue by passing in the following and worked\n.catch(response => {\n        // if request is bad, show an error to the user provided by the server\n        // api issue with axios, quick fix add extra response object\n        dispatch(authError(response.response.data.error));\n      });\n. @nickuraltsev Thanks brother I will give it a try, for what ever reason when I tried last few days didn't get it to work but I will try your suggestion\n. ",
    "EasonWang01": "nickuraltsev's answer solve this problem,a hidden error.response.. ",
    "ummahusla": "Had this issue\nError: Request failed with status code 422\n    at createError (bundle.js:34466)\n    at settle (bundle.js:34438)\n    at XMLHttpRequest.handleLoad (bundle.js:34311)\nGot it fixed by\n.catch(error => {\n  if (error.response) {\n    dispatch(authError(error.response.data.error));\n  }\n}). Had this issue\nError: Request failed with status code 422\n    at createError (bundle.js:34466)\n    at settle (bundle.js:34438)\n    at XMLHttpRequest.handleLoad (bundle.js:34311)\nGot it fixed by\n.catch(error => {\n  if (error.response) {\n    dispatch(authError(error.response.data.error));\n  }\n}). ",
    "aendrew": "As somebody trying to use Axios with TypeScript for about two weeks now, I'm still not sure whether it's better to use the d.ts file in the main repo or the DefinitelyTyped definition. I started with the latter, which was fine until I tried to use Axios.all, which suffers from the issues mentioned in #253. I then did:\ntypings install github:mzabriskie/axios/axios.d.ts#8332392 --save --global\n...To install the first-party ones and they seem to work far better.\nI'm considering writing a blog entry about using Axios with TypeScript if there's any appetite for it, but it would be nice to get some clarification on which definitions are ultimately the most, uh, definitive? \ud83d\ude05 \n. +1 for this. I was really lost until I found this issue.. ",
    "ericeslinger": "I'm not sure if I'm suffering from typescript-newbie syndrome, but I had to modify the package.json file distributed with axios to include \"typings\": \"./axios.d.ts\" in order to build a file that had an import from axios in my project (using gulp-typescript and tsc 2.0.0)\n. ",
    "shanekenney": "@ericeslinger The updates haven't been published to npm yet. https://github.com/mzabriskie/axios/pull/419#issuecomment-241912066\n. ",
    "renke": "Hi, I know this one is closed, but I noticed I can no longer type the response like this:\nconst res = await httpClient.post<string>(url, bookmark); \nEdit: httpClient is an axios instance here.\nI was using the @types/axios typing before and now use the typing that come with axios itself. \nAny reason we can no longer type the response?\n. ",
    "cjke": "Ditto - is there any way to use the old typings that supported this?\nA sample of what I had set up looked like this:\nexport function index<T>(resource: string): Axios.IPromise<Axios.AxiosXHR<T>> {\n    return axiosInstance.get<T>(resourceUrl(resource));\n}\nMeaning, in turn, I could do:\nconst response = await index<IProfile>('me');\nAnd I would know that the response would be of type IProfile.. . ",
    "levrik": "Okay, I see. This is fixed by #345.\nThanks!\n. @zmts Just looked into my code and found this:\n```javascript\nimport Promise from 'bluebird';\n// overwrite native Promise implementation with Bluebird's (for axios)\nwindow.Promise = Promise;\n```. ",
    "zmts": "@levrik How you integrate Bluebird to Axios ? Need help plz!. ",
    "sms777": "We are seeing the same issue. We are using chrome 51 and have tried setting the content-type explicitly to mulitpart/form-data and also letting it set automatically. \n. ",
    "mwcbrent": "Nevermind - we found the issue was that we were passing in a header to our axios options and it was overriding the functionality built into Axios.  This feature works and this issue should be closed.\n. ",
    "ronaldcurtis": "I'm also still getting this issue. @mwcbrent do you know what header you were passing in that was overriding the functionality?\nAt the moment, all I'm sending is:\n{\n  url: 'some-endpoint',\n  headers: {'Authorization' : 'somekey'},\n  data: FormData,\n  method: 'PATCH'\n  responseType: 'json'\n  withCredentials: false\n}\nHowever, when I open the network tab, it seems like axios is still setting the 'Content-Type' to 'application/json;charset=UTF-8', and emptying the request body.\nI set the content type application/json;charset=UTF-8 manually for previous requests, is this somehow telling axios to continue setting this header for future requests, if they don't have a 'Content-Type' header set?\n. @nickuraltsev \n- Browser Version is Google Chrome Version 53.0.2785.116 (64-bit) on OSX El Capitan\n- No Axios Defaults\n- Using the fetch lib at https://github.com/github/fetch, the request works fine. Simply appending an image Blob to the FormData:\no = data.entries[0]\nreader = new FileReader()\nreader.addEventListener 'load', () ->\n  result = reader.result\n  blob = dataUrltoBlob(result, o[2])\n  formData = new FormData()\n  formData.append(o[0], blob, o[2])\n  # Append fd prop as angular-file-upload\n  # overwrites the native FormData implementation!\n  opts.body = formData.fd\n  fetchHelpers[type] url, opts, (err, data) ->\n    if err then reject(err)\n    else resolve(data)\nreader.readAsDataURL(o[1])\nOf course, the code above is for the fetch lib, when using axios I attach the form data to opts.data instead. After comparing both requests in the network tab, the only differences is the Content-Type header, and the request body.\n. ",
    "antoinerey": "@nickuraltsev \nI get the exact same issue as @ronaldcurtis. I tried to make it work, but couldn't. I always get the same results :\n\nThe request Content-Type header is always application/json\nThe FormData instance seems to be transformed into a standard JS object\n\nI tried multiple browsers :\n\nFirefox 48.0.1\nFirefox 49.0.2\nFirefox 50.0.2\nChrome 54.0\n\nAnd multiple Axios versions :\n\n0.13.1\n0.14.0\n0.15.0\n0.15.1\n0.15.2\n0.15.3\n\n\n@ronaldcurtis Did you find any workaround ?\n@nickuraltsev Do you have any idea where it could come from ? I could look into it and try to solve this.. @nickuraltsev \nI get the exact same issue as @ronaldcurtis. I tried to make it work, but couldn't. I always get the same results :\n\nThe request Content-Type header is always application/json\nThe FormData instance seems to be transformed into a standard JS object\n\nI tried multiple browsers :\n\nFirefox 48.0.1\nFirefox 49.0.2\nFirefox 50.0.2\nChrome 54.0\n\nAnd multiple Axios versions :\n\n0.13.1\n0.14.0\n0.15.0\n0.15.1\n0.15.2\n0.15.3\n\n\n@ronaldcurtis Did you find any workaround ?\n@nickuraltsev Do you have any idea where it could come from ? I could look into it and try to solve this.. @svlada I can't remember. I left my job I had then, so I can't help you, sorry.. @svlada I can't remember. I left my job I had then, so I can't help you, sorry.. ",
    "svlada": "@antoinerey Have you found solution for this problem? . ",
    "txl1123": "i had solved this problem\nfile.vue\nuploadFile (file) {\n        let formData=new FormData()\n        let fileModule = this.$props.fileModule || 1\n        formData.append(\"fileModule\", fileModule)\n        formData.append(file.filename, file.file, file.name)\n        console.log(formData)\n            apiUploadFiles(formData).then(res=>{\n                console.log(res)\n            })\n      },\napi.js  config\n{\n  url: '/file',\n    method: 'post',\n    headers:{'Content-Type':'multipart/form-data'},\n    withCredentials: false,\n    data\n}\nBe prepared for the worst\uff0ccreate a new Axios to prevent the post contamination of the underlying configuration from headers, resulting in the failure to upload successfully.\nand then\uff0cdon't JSON.stringfy(params), eg:\n```\nservice.interceptors.request.use(config => {\n  user = getUserInfo()\n  // debugger\n  if (user) {\n    config.headers['Authorization'] = user.accessToken \n  }\n  if (config.method === 'post' || config.method === 'put' || config.method === 'delete') {\n    if (typeof (config.data) !== 'string' && config.headers['Content-Type'] !== 'multipart/form-data') {\n      config.data = qs.stringify(config.data)\n    }\n  }\n  return config\n}, error => {\n  // Do something with request error\n  Promise.reject(error)\n})\n. ",
    "tyrsius": "If I set axios.defaults.headers.common['Content-Type'] = 'application/json', I cannot unset that that header for an individual request, I can only set it to another value.\n. If I set axios.defaults.headers.common['Content-Type'] = 'application/json', I cannot unset that that header for an individual request, I can only set it to another value.\n. Yes. That did not work\n. I have tried setting the method as well. I suspect it has to do with an Object.assign() somewhere just not paying attention to the undefined value. \n. ",
    "Madalosso": "I had this problem too.\nI'm trying to remove the header 'Authorization' from 'common' but the only way that I've found to make it work is delete the property from the axios.defaults.header, make the request, and then add the property back again.\nThis will be easier when this bug is fixed\n. ",
    "chipit24": "This is also a problem for me (using axios v0.14.0), especially for endpoints that use Access-Control-Allow-Headers, in which case I need to make sure certain headers aren't sent with the request at all.\n. ",
    "SepiaGroup": "i am using version 15.2 and when i do\n```\nheaders: {\n      'Content-Type': null\n    }\n```\nit does set the header value to null. but i really need the header name to be removed completely. \nfor example when using s3 and generating a presigned url to post a file to a bucket you can not have an Authenticate header. but i have a default Authorization set because the vast majority of my requests require it for my own api. \nthe way i got around this is by doing the following \n```\n    var instance = axios.create();\n    instance.defaults.headers.common = {};\ninstance.put(signedUrl, file, {headers: {'Content-Type': file.type}})\n    .then(function (result) {\n        console.log(result);\n    })\n    .catch(function (err) {\n        console.log(err);\n    });\n\n```\nEdit: this does not work as expected. the issue is that when you clear the headers\ninstance.defaults.headers.common = {};\nit removes it at a global level. this will log me out as i use a header for Auth. \nto get around this issue until there is a better way of handling global config i am passing the required headers on every call, not ideal.\n. my fault changed \n{'Content-Type': entity.file.type}\nto\n{headers: {'Content-Type': entity.file.type}}\nworks.\n. ",
    "paseo": "545 .",
    "axelgenus": "I had the same problem but solved with\ndelete axios.defaults.headers.common[\"Authorization\"]; // or which ever header you have to remove. ",
    "Christilut": "I have the exact situation as @SepiaGroup \nI tried to overwrite it with null and '' but then AWS sees null as my Authorization and complains.\nI tried to delete it from the instance but then my Authorization is deleted globally so I get 403 on my own server.\nI guess my workaround will be to use an old XHR for this but it makes me sad :(. ",
    "yaronlevi": "+1 Also stuck with not being able to clear the default header for a specific call.. +1 Also stuck with not being able to clear the default header for a specific call.. +1. +1. ",
    "ojczeo": "+1\n. +1\n. ",
    "tannerlinsley": "I'm also seeing this behavior in the latest version (0.16.2).  Sadness ensues :(. ",
    "MrFahey": "+1. ",
    "Spacelapp": "+1. ",
    "michaelcpuckett": "+1. ",
    "matthewlilley": "+1. ",
    "deb0rian": "+1\nTry this guys on specific request object, alongside with headers, data and method:\ntransformRequest(data, headers) {\n     delete headers.common.Authorization;\n     return data;\n}. ",
    "mukeshyadav": "Try this, its solve my problem:\ndelete axios.defaults.headers.common[\"Authorization\"]; // and create your own headers. ",
    "wdews": "@mukeshyadav That solution has been mentioned several times further up in this thread.\nThe point made is that this isn't necessarily the ideal solution. Imagining a scenario where you've added your own custom request/response interceptors to an Axios instance, but you want one specific request to not include headers used everywhere else, you'd have to delete the header(s) and re-add after the request is completed.\nConversely, wondering if there's a way you can, with relative ease, simply duplicate an Axios instance to use in these types of one-off cases.. @aaronatmycujoo That seems like the sexiest solution here. Although, wondering if deleting the header like that removes it from an Axios instance further up the chain. May have to create a deep copy of headers or something.\nI'll have to test that.. ",
    "luskin": "+1. ",
    "aaronatmycujoo": "transformRequest: [(data, headers) => {\n    delete headers.common.Authorization\n    return data\n}]\nworks for me. transformRequest: [(data, headers) => {\n    delete headers.common.Authorization\n    return data\n}]\nworks for me. from what i can tell it doesn't. although there could be an edge case that i'm not triggering. ",
    "apoca": "@SepiaGroup you don't need to add headers in whole your requests... Do this:\naxios.defaults.headers.common = {};\naxios.defaults.headers.common.accept = \u2018application/json\u2019;\nAnd in headers of request you'll only see \u2018application/json\u2019. ",
    "vidukapoor": "+1 thanks @axelgenus ur solution worked. ",
    "tarumam": "+1. ",
    "Raid55": "@aaronatmycujoo FTW!!! His solution worked like a charm...ty!. ",
    "shuangq": "Faced the same issue when trying to upload files to S3 (only allow one auth mechanism).\nTried the solution from @SepiaGroup  but it also removes the auth header globally for all the following instances :(\n@aaronatmycujoo This solution works perfectly for me! \ud83c\udf89\nThank you guys for saving my day!. ",
    "watch-janick": "+1. ",
    "ststaynov": "+1. ",
    "pdeschampssos": "\naxios.defaults.headers.common = {};\naxios.defaults.headers.common.accept = \u2018application/json\u2019;\n\nWorks great for me!!!. ",
    "nickgrealy": "Not sure if this is common knowledge, but there is a set of \"forbidden headers\", which cannot be deleted.\n\nAccept-Charset\nAccept-Encoding\nAccess-Control-Request-Headers\nAccess-Control-Request-Method\nConnection\nContent-Length\nCookie\nCookie2\nDate\nDNT\nExpect\nHost\nKeep-Alive\nOrigin\nReferer\nTE\nTrailer\nTransfer-Encoding\nUpgrade\nVia. \n",
    "jonathan-stone": "Ah, so any error thrown by an Axios call is guaranteed to either 1) have a status, or 2) be a generic network error? I suppose that's good enough.\n. Network Error means Axios couldn't connect to your server at all, so it can't get any error code from the server. Maybe try it with another tool (curl, postman, or a browser) to ensure you can connect to it?. It's in error.response.status.\n. When error is \"network error\" that means Axios coudn't connect to your server, or for some reason does not get the response from your server. So that 401 error is never making it into Axios. Maybe post a question with some sample code on StackOverflow?. ",
    "ShivakumarRavi": "So far, I cant able to get the error code like 404,500.., Still I am getting Network Error. How to solve this?\ninstance.post('/foo', {request_id : 12345})\n.then(function(response) {})\n.catch(function(error){                                   \nconsole.log(error); // Network Error\nconsole.log(error.status); // undefined\nconsole.log(error.code); // undefined\n});. I can able to connect with my server, it actually returns 404 Error code and with some other API calls server returns 500 Internal server error, but still i can't able to get the network error code through scripting(i.e.,console.log(error.status); // undefined ).. ",
    "fgiarritiello": "I'm having this issue. Can anyone help me please?\nThe server response is 401  but axios gives me this:\nerror --> \"Network Error\"\nerror.response --> undefined\nerror.status --> undefined\n. @codygreen I'm still having this issues and I ran into this https://forums.aws.amazon.com/message.jspa?messageID=763752\nHave you found a workaround?. ",
    "codygreen": "Ran into this when using AWS API-Gateway. For anyone seeing the same issues it's a problem with 4xx errors (in my case a 401) not responding with the CORS headers.  Spent hours troubleshooting this damn issue! Thanks @jonathan-stone for pointing my troubleshooting in the right direct.. ",
    "joelnet": "My problem was with Jest+ Axios. I solved it by adding this to my package.json:\n\"jest\": {\n    \"testEnvironment\": \"node\"\n}. Still an issue in 2019. I have abandoned the timeout option since it is unreliable. Unreliable axios timeout is making my application unreliable. (a single unresolved promise prevents the entire app from continuing).\nNow I must manually timeout axios using the CancellationToken method listed above.\nI have created this helper function that works for my project:\n```javascript\nconst config = {\n  timeout: 1000\n}\nconst axiosGet = (url, options = {}) => {\n  const abort = axios.CancelToken.source()\n  const id = setTimeout(\n    () => abort.cancel(Timeout of ${config.timeout}ms.),\n    config.timeout\n  )\n  return axios\n    .get(url, { cancelToken: abort.token, ...options })\n    .then(response => {\n      clearTimeout(id)\n      return response\n    })\n}\n// example usage\naxiosGet(${url}/status.json)\n```. ",
    "hammadzz": "This works, although I can't seem to find documentation to support it.  I am assuming that error.response should be empty on a network error otherwise it is an api error.\njavascript\naxios.request(options).catch(function(error) {\n  if (!error.response) {\n    // network error\n  } else {\n    // http status code\n    const code = error.response.status\n    // response data\n    const response = error.response.data\n  }\n});. My problem was a dns issue. It worked in postman but failed in axios. Tried a curl to find out that it was also failing there. So my DNS was not configured correctly. Check that if you run into this issue.. ",
    "rexgama": "Did anyone find a best solution about this? Axios people make some noise :(. ",
    "dcshiman": "Line 87, it has been set to 'Network Error' in the xhr adapter ? how to change this so that the error can be caught ?\nhttps://github.com/axios/axios/blob/d7f021b8d4cc50bfa0653011bc02452d234d1255/lib/adapters/xhr.js#L84-L91\n. My bad, its not an issue but expected behavior due to browser security. XHR error responses now receives an ProgressEvent on error status codes.. What is your response code of the response?  if it's a network error, when using the Fetch API browsers will log it to the console but not pass it to JavaScript for security reasons hence the body is empty. See FETCH STANDERS, if you want to access the network errors of the response, change the HTTP response code to 200 and include the error message in the body of the response.. ",
    "amir-beheshty": "I'm having the same issue. I believe it's an issue with CORS. Has anyone found a good solution for this?. ",
    "jon123": "Same general problem here.  For me it was definitely CORS.  Browser was making OPTIONS requests to the server and I didn't have a handler setup for them (in node).   Axios would complete the (failed) request successfully but with an undefined response\nreturn axios.httpClients.server.post('/someUrl, {\n        someData:some_data\n      }).then(response => {\n        console.log(response);\n        //the following errors out because response is undefined\n        if (response.data && response.data.success === true) {\n        }\n      }).catch(err => {\n           //catch never triggered\n            console.log(err)\n      });. Same general problem here.  For me it was definitely CORS.  Browser was making OPTIONS requests to the server and I didn't have a handler setup for them (in node).   Axios would complete the (failed) request successfully but with an undefined response\nreturn axios.httpClients.server.post('/someUrl, {\n        someData:some_data\n      }).then(response => {\n        console.log(response);\n        //the following errors out because response is undefined\n        if (response.data && response.data.success === true) {\n        }\n      }).catch(err => {\n           //catch never triggered\n            console.log(err)\n      });. ",
    "iorrah": "Not sure if this is applicable to other cases, but here is how I solved this same issue (considering that we are talking CORS).\nOn the Frontend side, make sure you are passing the headers as parameter in your PUT or POST requests:\n```\nconst axiosParams = {\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Accept': 'application/json',\n  },\n};\naxios.put(${api.url}/like, axiosParams)\n  .then((response) => {\n    // ...\n  });\n```\nAnd on the Backend side, make sure that you are using CORS with Express:\n```\n// server.js\nconst express = require('express');\nconst app = express();\nvar cors = require('cors'); // Yep, you need to install this\napp.use(cors()); // Works \ud83c\udf89\n```\nRefs: here and here.. ",
    "scmyhexinhao": "Guys, I also struggling on this issue for quit while. But I figured out the issue of my axios post network createError on Android device now. The reason to axios Network Error is because the form data I passed to axios contains wrong type of data object I guess. I have include an image object(ImagePicker object from Expo) as a one of param of form data which not accept by axios I think. Axios might only receive string, float, int or image as param. image cannot pass as param, it is not an type of image, it is an react native object, I have removed it and include an image field as param by assign image.uri to value of param then it works. Hope this will help some of people who may encounter same problem as I was facing before. \n  Deleting some of your form data one by one when you are testing axios Network error, you will find out which one is the cause of issue.   . Guys, I also struggling on this issue for quit while. But I figured out the issue of my axios post network createError on Android device now. The reason to axios Network Error is because the form data I passed to axios contains wrong type of data object I guess. I have include an image object(ImagePicker object from Expo) as a one of param of form data which not accept by axios I think. Axios might only receive string, float, int or image as param. image cannot pass as param, it is not an type of image, it is an react native object, I have removed it and include an image field as param by assign image.uri to value of param then it works. Hope this will help some of people who may encounter same problem as I was facing before. \n  Deleting some of your form data one by one when you are testing axios Network error, you will find out which one is the cause of issue.   . Guys, I also struggling on this issue for quit while. But I figured out the issue of my axios post network createError on Android device now. The reason to axios Network Error is because the form data I passed to axios contains wrong type of data object I guess. I have include an image object(ImagePicker object from Expo) as a one of param of form data which not accept by axios I think. Axios might only receive string, float, int or image as param. image cannot pass as param, it is not an type of image, it is an react native object, I have removed it and include an image field as param by assign image.uri to value of param then it works. Hope this will help some of people who may encounter same problem as I was facing before. \n  Deleting some of your form data one by one when you are testing axios Network error, you will find out which one is the cause of issue.   . ",
    "nathanbirrell": "~@codygreen @hammadzz did you find a solution to this with Amazon API Gateway?~\nUpdate: if anyone stumbles on this with API Gateway and CORS, you'll need to add a access-control-allow-origin response header to your responses.. ",
    "pzanitti": "\nAs someone said in #204, there are some cases where it is impossible to catch network errors in the browser, so Axios responds with a generic error (new Error('Network error')). If you want to distinguish them from bad responses (status code !== 2xx or custom check) I think the best way is just checking the status property instead of the error message. E.g.:\njs\naxios.request(options).catch(function(error) {\n  if (!error.status) {\n    // network error\n  }\n});\nI think setting a custom status code would be a bad idea (it could cause more confusion) and setting a specific property would not help at all because we only have a single error case.\nOf course in Node.js is easier because you have access to the actual error and can check according to the Node.js documentation.\n\nIf you're here from Google, note that this API is deprecated. This is from 2016, v <0.13.\nYou want to check for error.response when the server responds, error.response === undefined for offline status and the special case of error.code === 'ECONNABORTED' for timeouts.\n\nUpdate: if anyone stumbles on this with API Gateway and CORS, you'll need to add a response header to your responses:\naccess-control-allow-origin: *\n\nDefinitely don't do this. Set the origins accordingly instead of *.. If there is no standard/RFC that defines this, why was it decided that [] should be used? I understand a custom paramsSerializer can be implemented, but the current implementation shouldn't be opinionated.\nI used this solution, unfortunately it requires an additional package for something that perhaps can be fixed with a simple toggle config.\nhttps://github.com/axios/axios/issues/559#issuecomment-264689998. ",
    "elbakly": "For me it was cors problem , if you are using laravel, and you define a \n->middleware(['auth:api'])\nyou have to add all other middleware that you need to this route explicitly its not inherited\n->middleware(['auth:api','cors']); . For me it was cors problem , if you are using laravel, and you define a \n->middleware(['auth:api'])\nyou have to add all other middleware that you need to this route explicitly its not inherited\n->middleware(['auth:api','cors']); . ",
    "faizan992": "I also faced this issue, use your local IP address instead of localhost (eg 10.0.0.12:8083  ). it's worked for me.. ",
    "json2d": "So if I have the correct, the 0 status from an axios request seems to appear in some cases. but it cannot be programmatically determined exactly which case it's encountered. \nThese cases include when a CORS preflight request has failed, and hence the actual request is never even attempted. Because of this the 404 status would not be appropriate. . So if I have the correct, the 0 status from an axios request seems to appear in some cases. but it cannot be programmatically determined exactly which case it's encountered. \nThese cases include when a CORS preflight request has failed, and hence the actual request is never even attempted. Because of this the 404 status would not be appropriate. . ",
    "dgreene1": "Someone needs to buy @joelnet a beer. This saved my day:\nhttps://github.com/axios/axios/issues/383#issuecomment-308606088\nOther people might have different problems, but that worked for me.. ",
    "sandeshds": "I am getting this error intermittently. I am guessing its not a CORS issue. \nMy api/server is a .net server. \nAnyone else facing this intermittently ? . I am getting this error intermittently. I am guessing its not a CORS issue. \nMy api/server is a .net server. \nAnyone else facing this intermittently ? . ",
    "vivonk": "I was having this error because I wasn't specifying HTTP or https. Mainly code itself throw an error on protocol undefined. This should be handled or in error meta, it should be included.. ",
    "ComputerCarl": "As @jonathan-stone  said,  I don't think this can be rectified, because Axios simply doesn't know what happened. It's like sending your friend out for Funyuns and he says the store was closed. It says \"always open\" - why was the store closed. Did they close for good (404)? Is someone sick (500)? Did they run out of inventory (503)? He doesn't know, they're just closed (network error)!\nI was getting this error when firing Axios in rapid succession against a local Express server trying to retrieve different kinds of data from my API. It's not that Axios didn't report a correct error - it can't - my Express server didn't respond with anything because it was too busy.\nIf I retry the request (using retry-axios from #164 ) I can get the data or maybe a real error if there's something wrong with the AVAILABLE server.. You cannot execute JavaScript on a client (without disabling CORS and making you a target for XSS) to retrieve information from another site.\nThis is to prevent you from gaining access to a client's browser and potentially draining their bank accounts or posting to some site without their permissions. The same goes for scraping sites (which is essentially what the op is trying to do).\nYou can scrape the web (i.e., fetch data) using a server with a CORS module, and proxy via that server.. ",
    "isterin": "BTW, easily fixed with lodash.cloneDeep when merging.  I'm not sure though you want to bring in lodash dependency or implement deep cloning outside of it?\n. Is bringing in outside deps like lodash acceptable? \n. ",
    "codeclown": "Note that instead of _.cloneDeep or other external dependency, JSON.parse(JSON.stringify(defaults)) may work nicely, assuming there are no circular references.\n. There is a PR open to fix this issue but it's stuck currently due to no interaction from project owners. https://github.com/axios/axios/pull/533. @robaxelsen I understand, and I sincerely apologize for seeming hostile towards the project owners. It appeared to me that the comment on the issue did not involve direct review/instructions for the PR maintainer to act upon, but rather a wider context which can also be found on the issue https://github.com/axios/axios/issues/812.\nI just looked into the problem myself in an attempt to provide a PR and discovered that the issue https://github.com/axios/axios/issues/812 really captures the tricky situation we are in due to wanting to get rid of merging all the options.. @heisian @wlingke This is not a simple issue to fix. Currently it is intended behaviour that Axios keeps a reference to the global defaults, as seen in this test:\n```js\nit('should be used by custom instance if set after instance created', function (done) {\n  var instance = axios.create();\n  axios.defaults.baseURL = 'http://example.org/';\ninstance.get('/foo');\ngetAjaxRequest().then(function (request) {\n    expect(request.url).toBe('http://example.org/foo');\n    done();\n  });\n});\n```\nThis makes it impossible to have the following test passing:\njs\nit('should not be affected by changes to global defaults', function (done) {\n  var instance = axios.create();\n  axios.defaults.headers['X-Foobar'] = 'test';\n  expect(instance.defaults.headers['X-Foobar']).toNotBe('test');\n});\nWell, it would be possible with some specific logic (e.g. if instance-specific baseURL === null, grab from global defaults), but I would rather see less specific logic and get rid of this restriction posed by keeping reference to global defaults.. @heisian \n\nThe current behaviour doesn't make any sense. Why is the reference kept?\nOne would think that calling .create creates a new instance, and any configuration defaults applied to that instance are localized to it, not arbitrarily setting a mutable global instance. This is flawed logic.\n\nI agree completely. I'm not sure where to propose deprecating this \"functionality\", because there are so many issues regarding this defaults-issue. I do, however, think that it should be deprecated because it is not only illogical but harmful and even dangerous (especially on the server-side).\n\nAnyways, whenever that problem is resolved, the second half of fixing this defaults-issue is noticing that not all the configuration can be just deep merged with the defaults. In a comment to another issue (expand the second section) I categorized the configuration properties based on how they should be defined when a new instance is created. I hope this list is of help to anyone who might be stabbing away at this later.. @heisian \nHere's how the options for an individual request are set:\nhttps://github.com/axios/axios/blob/d4dc124f15c8dc69861b9cf92c059dbda46ae565/lib/core/Axios.js#L35\nSo, the problem comes from nested objects, e.g. headers, not primitive values such as timeout.\n\n\nat the end of the day we haven't heard from the owner in a year and a half so at best we're stuck with forks only even if there is a definite fix.\n\nI'm sure that a PR would be very appreciated by many, considering the amount of times this issue has been reported. I personally got stuck with that one failing test. I would encourage you or anyone to create a PR if you are able to propose a fix.. Which version does this occur on?\nOn current master this test passes, so there should be no difference between using an instance or not:\n```js\n// Altered copy of test 'should set xsrf header for cross origin when using withCredentials'\n// in xsrf.spec.js\nit('should set xsrf header for cross origin when using withCredentials (instance)', function (done) {\n  document.cookie = axios.defaults.xsrfCookieName + '=12345';\nvar instance = axios.create({\n    withCredentials: true\n  });\ninstance('http://example.com/');\ngetAjaxRequest().then(function (request) {\n    expect(request.requestHeaders[axios.defaults.xsrfHeaderName]).toEqual('12345');\n    done();\n  });\n});\n```. I think there are two sides to this, right?\n\nFixing the behaviour when responseType: 'text' should be considered an essential bugfix which addresses a bug in current behaviour.\nImplementing dataType would be a new feature, and it also is confusing because currently the automatic type detection of request body is quite nice and works.\n\nThe landscape for fixing the responseType bug is quite hazardous:\n\nThis test asserts that a response containing a valid JSON string (and content-type header) is parsed as JSON automatically, regardless of responseType:\n\nhttps://github.com/axios/axios/blob/ec97c686efcc4a8968d632dab018e77215c5fe6d/test/unit/adapters/http.js#L53\n\nThis test asserts that also in case of failure (non-2xx response), if the response contains a valid JSON string (even without content-type header), it is parsed automatically:\n\nhttps://github.com/axios/axios/blob/ec97c686efcc4a8968d632dab018e77215c5fe6d/test/specs/requests.spec.js#L161\nBoth of these stem from the fact that response parsing has defaulted to always trying to parse JSON , regardless of responseType or headers['content-type'].. I spent a few hours trying to overhaul this but couldn't unfortunately. Writing down some notes to further the discussion. Hopefully these comments are of value to whomever wants to take a stab at this.\n\nFirst issue: modifying defaults of one instance affects others'\n\n\nExpand\n\n\nWhat makes fixing this issue very difficult is the fact that losing reference to the original `options` object is not allowed:\n\n```js\n// Original, passes:\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  // ...\n}\n\n// Fails:\nfunction Axios(instanceConfig) {\n  var instanceDefaults = utils.merge(instanceConfig); // lose reference\n  this.defaults = instanceDefaults;\n  // ...\n}\n```\n\n```\nChrome 63.0.3239 (Mac OS X 10.11.6) defaults should be used by custom instance if set before instance created FAILED\n    Expected '/foo' to be 'http://example.org/foo'.\n        at webpack:///test/specs/defaults.spec.js:146:0 <- test/specs/defaults.spec.js:192:28\n        at \n```\n\nTherefore it is not possible to simply mutate the object right there in the constructor.\n\nSo, how is it possible to make the following test pass?\n\n```js\nit('should not be affected by change to another instance defaults', function () {\n  var instance1 = axios.create();\n  var instance2 = axios.create();\n\n  instance1.defaults.headers.common['X-Example'] = 'sample header';\n  expect(instance2.defaults.headers.common['X-Example']).not.toContain('sample header');\n});\n```\n\n\n\nSecond issue: should not deep merge everything\n\n\nExpand\n\n\nI split the possible properties of `options` into the following categories. Could someone take a look and verify that this makes sense?\n\n```\nShould be grabbed from request config only, never from any defaults:\n  url  method  params  data\n\nIf present in request config, should deep merge with defaults:\n  headers  auth  proxy\n\nGrab from wherever specified without any deep cloning, in this order: request config -> instance defaults -> global defaults:\n  baseURL  transformRequest  transformResponse  paramsSerializer  timeout\n  withCredentials  adapter  responseType  xsrfCookieName  xsrfHeaderName\n  onUploadProgress  onDownloadProgress  maxContentLength  validateStatus\n  maxRedirects  httpAgent  httpsAgent  cancelToken\n```\n\nI believe this could be quite easy to accomplish without deep merging everything, just by looping over the allowed properties in `Axios.prototype.request`.\n\nSomething like the following, which I couldn't get to work:\n\n```js\nvar requestConfig = config\nvar instanceDefaults = this.defaults;\n\nconfig = {\n  url: requestConfig.url,\n  method: requestConfig.method || 'get',\n  params: requestConfig.params,\n  data: requestConfig.data\n};\n\nutils.forEach(['headers', 'auth', 'proxy'], function(property) {\n  config[property] = utils.merge(defaults[property], instanceDefaults[property], requestConfig[property]);\n});\n\n// Would've just looped over all keys in `defaults` but it is apparently\n// encouraged to mutate it directly anywhere so it can lose properties due to user\nutils.forEach([\n  'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',\n  'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',\n  'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'maxContentLength',\n  'validateStatus', 'maxRedirects', 'httpAgent', 'httpsAgent', 'cancelToken'\n], function(property) {\n  if (typeof requestConfig[property] !== 'undefined') {\n    config[property] = requestConfig[property];\n  } else if (typeof instanceDefaults[property] !== 'undefined') {\n    config[property] = instanceDefaults[property];\n  } else if (typeof defaults[property] !== 'undefined') {\n    config[property] = defaults[property];\n  }\n});\n```\n\n. IMO the most straight-forward way would be to lowercase all header names (a) in defaults, and (b) when headers are passed to instance/request. Only dealing with lowercase header names would remove any fiddling around which case to check.. I'm not a huge fan of introducing a new class for this purpose, it seems too bloaty for the codebase. I think it would be best to convert all header names to lowercase at all times, which would remove the need for any special logic related to this.. The config situation was addressed a while ago (https://github.com/axios/axios/pull/1395) and it shouldn't be possible to mutate defaults to instances after they have been set. However, you make a good point which I did not initially consider.. > headers is the only nested object that needs cloning in the defaults property.\nWhy should auth and proxy not be cloned?. This should probably include a test.... If we look at all the possible properties in the configuration-object...\n\n\n```\n  url  method  params  data\n  headers  auth  proxy\n  baseURL  transformRequest  transformResponse  paramsSerializer  timeout\n  withCredentials  adapter  responseType  xsrfCookieName  xsrfHeaderName\n  onUploadProgress  onDownloadProgress  maxContentLength  validateStatus\n  maxRedirects  httpAgent  httpsAgent  cancelToken\n```\n\n\n\n... and the grouping I propose for these properties, based on discussions that I saw earlier in some threads by @nickuraltsev & co...\n\n\n```\nNever from any defaults, always specific to request:\n  url  method  params  data\n\nMerge request-specific config with defaults:\n  headers  auth  proxy\n\nNever merge, but reference directly:\n(priority order: request-specific <- instance defaults <- global defaults)\n  baseURL  transformRequest  transformResponse  paramsSerializer  timeout\n  withCredentials  adapter  responseType  xsrfCookieName  xsrfHeaderName\n  onUploadProgress  onDownloadProgress  maxContentLength  validateStatus\n  maxRedirects  httpAgent  httpsAgent  cancelToken\n```\n\n\n\n... I would suggest that instead of fiddling with the util assignValue, why not just manually construct the config-object when making a request? This would be slightly more verbose but very explicit.\njs\nconst finalConfig = {}\n['url', 'method', 'params', 'data'].forEach(prop => {\n  finalConfig[prop] = requestConfig[prop]\n})\n['headers', 'auth', 'proxy'].forEach(prop => {\n  finalConfig[prop] = utils.merge(\n    globalDefaults[prop],\n    instanceDefaults[prop],\n    requestConfig[prop]\n  )\n})\nObject.keys(globalDefaults)\n  .filter(prop => !finalConfig.hasOwnProperty(prop))\n  .forEach(prop => {\n    finalConfig[prop] =\n      requestConfig[prop] || instanceDefaults[prop] || globalDefaults[prop]\n  }). I agree very much with @emilyemorehouse that it would be nicest to construct the instance defaults when a new instance is created, and in the request-function we could forget about the global defaults (btw. when linking to code, better to link to specific commit hash instead of master, press y when viewing source to update URL automatically).\nOne thing that has to be kept in mind is this existing test and limitation:\n```js\nit('should be used by custom instance if set after instance created', function (done) {\n  var instance = axios.create();\n  axios.defaults.baseURL = 'http://example.org/';\ninstance.get('/foo');\ngetAjaxRequest().then(function (request) {\n    expect(request.url).toBe('http://example.org/foo');\n    done();\n  });\n});\n```\nMeaning, making a request must always fall back to global defaults in the end. I personally would prefer the new instance to have a completely isolated defaults of its own, which is basically a clone of the global defaults at the point in time when the instance was created, BUT this existing requirement doesn't allow that.. I agree very much with @emilyemorehouse that it would be nicest to construct the instance defaults when a new instance is created, and in the request-function we could forget about the global defaults (btw. when linking to code, better to link to specific commit hash instead of master, press y when viewing source to update URL automatically).\nOne thing that has to be kept in mind is this existing test and limitation:\n```js\nit('should be used by custom instance if set after instance created', function (done) {\n  var instance = axios.create();\n  axios.defaults.baseURL = 'http://example.org/';\ninstance.get('/foo');\ngetAjaxRequest().then(function (request) {\n    expect(request.url).toBe('http://example.org/foo');\n    done();\n  });\n});\n```\nMeaning, making a request must always fall back to global defaults in the end. I personally would prefer the new instance to have a completely isolated defaults of its own, which is basically a clone of the global defaults at the point in time when the instance was created, BUT this existing requirement doesn't allow that.. > I'm not sure if this will get a push into 0.19 but I would definitely want this in 1.0.0.\nIt's a breaking change so that's definitely understandable. If this would only ship in 1.0.0, then a deprecation notice in the next minor version wouldn't make sense either.\nWhat is the leadership on this project at the moment? Who decides what goes into which version?\n\nI'd like to focus on getting the security issues fixed in the least difficult way possible\n\nIs there any other way to fix the security issue other than by losing all references between global defaults and/or separate instances?\n\n(As a side note -- 1.0.0 has ditched most of the custom utils in favor of lodash, which could make things easier as well)\n\nDoes it make sense for me to work on cleaning up this PR at all at this time? I don't mind closing it if it would be redundant work. I would still love to help out in some way if possible.\n\nAlso another thing just occurred to me. Some config-properties are arrays. Should they always lose reference between instances?\n```js\nconst instance1 = axios.create()\nconst instance2 = axios.create()\n// Should this never affect instance2?\ninstance1.defaults.transformRequest.push(anotherTransformer)\n```\nObviously that could result in some accidents.\nOne could also argue that there is a use case for keeping the reference:\n```js\nconst commonTransformers = [...]\nconst instance1 = axios.create({ transformRequest: commonTransformers })\nconst instance2 = axios.create({ transformRequest: commonTransformers })\n// Add new transformer to all instances, yay!\ncommonTransformers.push(anotherTransformer)\n```. > I'm not sure if this will get a push into 0.19 but I would definitely want this in 1.0.0.\nIt's a breaking change so that's definitely understandable. If this would only ship in 1.0.0, then a deprecation notice in the next minor version wouldn't make sense either.\nWhat is the leadership on this project at the moment? Who decides what goes into which version?\n\nI'd like to focus on getting the security issues fixed in the least difficult way possible\n\nIs there any other way to fix the security issue other than by losing all references between global defaults and/or separate instances?\n\n(As a side note -- 1.0.0 has ditched most of the custom utils in favor of lodash, which could make things easier as well)\n\nDoes it make sense for me to work on cleaning up this PR at all at this time? I don't mind closing it if it would be redundant work. I would still love to help out in some way if possible.\n\nAlso another thing just occurred to me. Some config-properties are arrays. Should they always lose reference between instances?\n```js\nconst instance1 = axios.create()\nconst instance2 = axios.create()\n// Should this never affect instance2?\ninstance1.defaults.transformRequest.push(anotherTransformer)\n```\nObviously that could result in some accidents.\nOne could also argue that there is a use case for keeping the reference:\n```js\nconst commonTransformers = [...]\nconst instance1 = axios.create({ transformRequest: commonTransformers })\nconst instance2 = axios.create({ transformRequest: commonTransformers })\n// Add new transformer to all instances, yay!\ncommonTransformers.push(anotherTransformer)\n```. @emilyemorehouse When you have time, could you check out the questions I posted above, so I know if I should close this PR or not?\n@heisian By freezing the object I did not mean making the configuration-object immutable, which is what Object.freeze is intended for. I would honestly appreciate it if you could collapse (with <detail>) or delete your comment because it takes a lot of vertical space in this discussion and is not relevant to this PR.. @emilyemorehouse When you have time, could you check out the questions I posted above, so I know if I should close this PR or not?\n@heisian By freezing the object I did not mean making the configuration-object immutable, which is what Object.freeze is intended for. I would honestly appreciate it if you could collapse (with <detail>) or delete your comment because it takes a lot of vertical space in this discussion and is not relevant to this PR.. @emilyemorehouse I went ahead and cleaned up this PR. There are a few questions above that I'd appreciate an answer to. I would also like to know if this PR is worth pursuing or if I should close it. Currently Travis fails due to some network error, I can spend time on resolving it if this PR has a future.\nThe functionality in this PR is similar to what has been agreed to a long time ago in the comments: https://github.com/axios/axios/issues/370. Yes, I'll try to address the comments some evening this week. Of course I have no issue if someone has the time and wants to do it before me.\n\nOn 21 Mar 2018, at 17.57, Nick Uraltsev notifications@github.com wrote:\n@codeclown Hey, are you still interested in working on this PR?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @nickuraltsev @emilyemorehouse Sorry for the delay on this. Changes in latest commit:\n\n\nMoved mergeConfig from utils.js to core/mergeConfig.js\nImplemented new deepMerge alteration of merge, and used it in place of my original JSON.parse(JSON.stringify(...)) work-around\n(I'm surprised there are no unit tests for these internal functions.)\n\nPlease let me know if there's any refactoring or other changes you'd like to see.. @nickuraltsev @emilyemorehouse Sorry for the delay on this. Changes in latest commit:\n\nMoved mergeConfig from utils.js to core/mergeConfig.js\nImplemented new deepMerge alteration of merge, and used it in place of my original JSON.parse(JSON.stringify(...)) work-around\n(I'm surprised there are no unit tests for these internal functions.)\n\nPlease let me know if there's any refactoring or other changes you'd like to see.. @nickuraltsev No problem. Thank you for the review, much appreciated. I've addressed your comments. Please let me know if there's anything to change still. I also don't mind squashing these commits into one before merging if that's preferred.\nI still don't know why the tests are failing in CI, because I haven't unfortunately had time to dive into the test setup. Apparently some local server instance is not responding as expected. I will save tinkering with that to last, after the PR is otherwise OK to go. If you have an idea about it, would be cool to hear.. @nickuraltsev No problem. Thank you for the review, much appreciated. I've addressed your comments. Please let me know if there's anything to change still. I also don't mind squashing these commits into one before merging if that's preferred.\nI still don't know why the tests are failing in CI, because I haven't unfortunately had time to dive into the test setup. Apparently some local server instance is not responding as expected. I will save tinkering with that to last, after the PR is otherwise OK to go. If you have an idea about it, would be cool to hear.. @nickuraltsev I did all the naming changes and improved the comment. My apologies for being a bit inconsistent/careless with renaming parts of the code only.\nHowever, regarding https://github.com/axios/axios/pull/1395#discussion_r179829478, simplifying that part of the function in any way I've tried causes random errors in the tests. Example:\nRunning \"nodeunit:all\" (nodeunit) task\nTesting http.jsFF(node:34466) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: Request failed with status code 404\nThis is the reason I said \"I actually was not able to simplify this at all\" before.\nAnyways, I will make a spec for mergeConfig as well and using it will track down what exactly is causing these strange errors, by comparing what is different in the config-object with these variations.. @nickuraltsev I did all the naming changes and improved the comment. My apologies for being a bit inconsistent/careless with renaming parts of the code only.\nHowever, regarding https://github.com/axios/axios/pull/1395#discussion_r179829478, simplifying that part of the function in any way I've tried causes random errors in the tests. Example:\nRunning \"nodeunit:all\" (nodeunit) task\nTesting http.jsFF(node:34466) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: Request failed with status code 404\nThis is the reason I said \"I actually was not able to simplify this at all\" before.\nAnyways, I will make a spec for mergeConfig as well and using it will track down what exactly is causing these strange errors, by comparing what is different in the config-object with these variations.. @nickuraltsev So, after all it's not as simple as giving anything we have to deepMerge. The rules have to be more specific. Dealing with falsy values especially.\nWhy? Because if e.g. request-specific options contain { proxy: false }, it should override anything in the defaults. deepMerge({ ... }, false) would just return another object with the defaults still in.\nHere's a commented version of the rules. Please let me know if you can see any potential for simplifying this, but I honestly can't:\njs\nif (utils.isObject(config2[prop])) {\n  // config1 property is an object, always merge\n  // E.g. { proxy: { host: '', ... } }\n  config[prop] = utils.deepMerge(config1[prop], config2[prop]);\n} else if (typeof config2[prop] !== 'undefined') {\n  // config1 property is present, it overrides config2\n  // E.g. { proxy: false }\n  config[prop] = config2[prop];\n} else if (utils.isObject(config1[prop])) {\n  // config1 property is not present and config2 property is an object, which must be dereferenced\n  config[prop] = utils.deepMerge(config1[prop]);\n} else if (typeof config1[prop] !== 'undefined') {\n  // Finally, if there's config1 property, use it\n  config[prop] = config1[prop];\n}\nPS. JavaScript is great! typeof null === 'object'\n\nMy latest commit adds a spec for mergeConfig, checking this logic.\nI also added back the checks for undefined, to reduce noise in the generated object. Lots of undefined properties showed up in tests.\nI'm sorry for the effort it takes to review this PR. I am trying to make all the reasoning as clear as possible, but I also just bump into new requirements all the time. Thank you for taking the time to review.. @nickuraltsev So, after all it's not as simple as giving anything we have to deepMerge. The rules have to be more specific. Dealing with falsy values especially.\nWhy? Because if e.g. request-specific options contain { proxy: false }, it should override anything in the defaults. deepMerge({ ... }, false) would just return another object with the defaults still in.\nHere's a commented version of the rules. Please let me know if you can see any potential for simplifying this, but I honestly can't:\njs\nif (utils.isObject(config2[prop])) {\n  // config1 property is an object, always merge\n  // E.g. { proxy: { host: '', ... } }\n  config[prop] = utils.deepMerge(config1[prop], config2[prop]);\n} else if (typeof config2[prop] !== 'undefined') {\n  // config1 property is present, it overrides config2\n  // E.g. { proxy: false }\n  config[prop] = config2[prop];\n} else if (utils.isObject(config1[prop])) {\n  // config1 property is not present and config2 property is an object, which must be dereferenced\n  config[prop] = utils.deepMerge(config1[prop]);\n} else if (typeof config1[prop] !== 'undefined') {\n  // Finally, if there's config1 property, use it\n  config[prop] = config1[prop];\n}\nPS. JavaScript is great! typeof null === 'object'\n\nMy latest commit adds a spec for mergeConfig, checking this logic.\nI also added back the checks for undefined, to reduce noise in the generated object. Lots of undefined properties showed up in tests.\nI'm sorry for the effort it takes to review this PR. I am trying to make all the reasoning as clear as possible, but I also just bump into new requirements all the time. Thank you for taking the time to review.. @nickuraltsev @emilyemorehouse Thank you both!\nI added socketPath to mergeConfig. I'm not sure where exactly to add a note/comment about remembering to add any new config-options to mergeConfig, but I also don't think it's completely necessary because when anyone implements a new feature with a new config-option, they will notice it doesn't get through anyway, and it's quite straightforward to find the cause.\nTests passed! Nice.. @nickuraltsev @emilyemorehouse Thank you both!\nI added socketPath to mergeConfig. I'm not sure where exactly to add a note/comment about remembering to add any new config-options to mergeConfig, but I also don't think it's completely necessary because when anyone implements a new feature with a new config-option, they will notice it doesn't get through anyway, and it's quite straightforward to find the cause.\nTests passed! Nice.. I actually was not able to simplify this at all. If I got rid of explicitly checking for undefined and just did ||, the tests would fail. I assume something somewhere relies on null values and that broke it. If absolutely necessary, I can try to dig deeper into this later. I do agree that the if-statements are nasty.. I didn't notice that unit tests were in specs folder. I've now copied the merge tests and added two additional ones.. I would keep this explicit listing, that was also partly the idea behind this config-specific merge-function. The idea is that it's no longer a mystery where config-options originate from, and as you said, when adding new properties it forces to consider how they should be merged (or not).. ",
    "matiishyn": "looks like the issue is still present in the newest version. looks like the issue is still present in the newest version. so how can we fix this with cloneDeep?\nhere's what I tried, but no luck:\n```js\n// BASE URL\naxios.defaults.baseURL = CONFIG.API_SERVER;\n// SEPARATE INSTANCES\nconst authAxios = axios.create();\nauthAxios.defaults = _.cloneDeep(authAxios.defaults);\nconst apiAxios = axios.create();\napiAxios.defaults = _.cloneDeep(apiAxios.defaults);\n// SETTING JWT HEADER\nconst savedToken = LS.getJwt();\nif (savedToken) {\n  apiAxios.defaults.headers.common.Authorization = JWT ${savedToken};  \n  // ^=== this will set headers to both instances :( \n}\nconsole.log(authAxios.defaults);\nconsole.log(apiAxios.defaults);\n```\nBut both authAxios and apiAxios instances have the Authorization headers.\nDid anyone fix it somehow?. thanks @reggi for your solution but this doesn't work for me.\nAnd the issue is still present in the newest version.\nI've also tried this way:\n```js\n// BASE URL\naxios.defaults.baseURL = CONFIG.API_SERVER;\n// SEPARATE INSTANCES\nconst authAxios = axios.create();\nauthAxios.defaults = _.cloneDeep(authAxios.defaults);\nconst apiAxios = axios.create();\napiAxios.defaults = _.cloneDeep(apiAxios.defaults);\n// SETTING JWT HEADER\nconst savedToken = LS.getJwt();\nif (savedToken) {\n  apiAxios.defaults.headers.common.Authorization = JWT ${savedToken};  \n  // ^=== this will set headers to both instances :( \n}\nconsole.log(authAxios.defaults);\nconsole.log(apiAxios.defaults);\n```\nBut both authAxios and apiAxios instances have the Authorization headers.\nDid anyone fix it somehow?. ",
    "lukaszgrolik": "@matiishyn try this:\njs\nif (savedToken) {\n  const headers = _.cloneDeep(apiAxios.defaults.headers);\n  headers.common.Authorization = `JWT ${savedToken}`;\n  apiAxios.defaults.headers = headers;\n}\nCloning and setting whole headers object works for me. Took hours of debugging and finding this thread though, so I look forward to see this fixed in the future releases.. @matiishyn try this:\njs\nif (savedToken) {\n  const headers = _.cloneDeep(apiAxios.defaults.headers);\n  headers.common.Authorization = `JWT ${savedToken}`;\n  apiAxios.defaults.headers = headers;\n}\nCloning and setting whole headers object works for me. Took hours of debugging and finding this thread though, so I look forward to see this fixed in the future releases.. ",
    "prakashgp": "This worked for me \nrequest.defaults.headers = Object.assign({}, request.defaults.headers, {'X-Customer-Id': '123'}). This worked for me \nrequest.defaults.headers = Object.assign({}, request.defaults.headers, {'X-Customer-Id': '123'}). ",
    "marbemac": "Using Axios in a server side rendering situation (next.js, meteor, any SSR focused library) leads to a huge security issue when using defaults.headers to set the currently logged in user token... this should be an urgent and critical bug IMHO. We only just discovered this, crazy its been open for over a year :/.. Regardless of the conclusion on this issue, in the interim there should be a big bold notice on the readme that warns NOT to use defaults for sensitive info when in a server context (SSR w react, for example) - because it can result in bad security issues w shared API keys etc.. ",
    "MartinGian": "I use the @jonjaques solution and works fine!. ",
    "robaxelsen": "@codeclown if you look at the issue you linked to, you will see that @nickuraltsev came with PR review feedback that was never acted on by @yanivefraim.\nWhile this project currently has a lot of old issues, there was a recent popular \"help wanted for axios\" by the creator or Axios. Let's hope that will help clear old issues and increase response time for new ones.\nAlso, if you feel you can contribute, please let us know.. Thanks for sharing your working solution, @jacobarriola. That seems to solve this issue.. @pekosoG I was referring to the solution given by jacobarriola. Did you try that?\nIf you did try, and it didn't help, please provide examples and console output.. Hi @stevenvachon, and thanks for your suggestion. It would be really helpful if you could submit a PR if this is something you still see the need for.\n\n@mzabriskie @nickuraltsev @rubennorte in accordance with the Collaborator Guide I propose to close this issue on 16.01.2018 if no response from OP.\n  . Hi @C0deZLee, thanks for posting an issue with your suggestion. I checked the documentation, and the README.md already had a section about this at the time of you posting this issue.\nIf you find that lacking, could you please come with some concrete suggestions on what type of information you are looking for in the documentation?\n\n@mzabriskie @nickuraltsev @rubennorte I propose to close this issue on 16.01.2018 (7 days) if no response from OP.\n. Hi @J2quared, thanks for posting about this. Are you still having this issue?. @karuppasamy if you've abandoned that project I suggest we close close this issue for now. It can always be reopened if you have some additional logs/info/findings to report.. Closing due to solution provided by @gs-akhan. For further questions regarding this I would recommend StackOverflow or a Typescript forum/community.. @betalb I would propose you submit your PR directly, as it's easier for the maintainers to notice it and potentially approve it.. Closing as @ligne13 reported this as solved. . Hi @aprilmintacpineda. This doesn't fall under the scope of axios to handle. For troubleshooting the error message I would suggest StackOverflow or similar. Good luck!. Thanks for posting your issue @jezikk!\nThe validateStatus config does not do anything else than simply check the status code, so this is not a bug with axios. I would have a look at the API endpoint itself, and troubleshoot there. Do you get the expected result with curl/postman/browser?. Have you verified that your request works as expected, with curl/API-client/browser?\nI am not too familiar with async/await (just promises), I am afraid. But what are you expecting to happen after validateStatus prevents rejection?\nI'll reopen this issue for visibility, in the hopes that someone else can offer some help solving your issue.. ",
    "SzymonLisowiec": "I found simple solution (temporarily). While creating new instance only need to add empty headers.\n```\nlet api = axios.create({\n  baseURL: 'http://localhost:8080/',\n  headers: {\n}\n});\napi.defaults.headers['Authorization'] = 'Bearer xxx';\n```. ",
    "sony-mathew": "I think this problem is because headers for global config is named axios.defaults.headers.common and the same thing is accessible via instance.defaults.headers.common.\nIf you want instance level headers you don't need to use defaults.headers.common. You can directly use instance.defaults.headers['X-My-Header'] = 'XXX'.\n@SzymonLisowiec has given a nice code sample in the above answer.. ",
    "heisian": "@nickuraltsev \n\nThank you! This definitely needs to be fixed.\n\nHow's that comin, eh?. @codeclown The current behaviour doesn't make any sense. Why is the reference kept?\nOne would think that calling .create creates a new instance, and any configuration defaults applied to that instance are localized to it, not arbitrarily setting a mutable global instance. This is flawed logic.\nIf the defaults property was truly meant to be a global reference, then it should be immutable from the child instance. There should also be a separate property, like config, in the child instance that holds defaults for the child instance.\nCurrently I cannot do:\nnode\nmyClient = axios.create()\nmyClient.baseURL = 'https://google.com' // Doesn't work.\nIf we wanted to retain the reference to the global defaults, then this should be viable:\n```node\naxios.defaults.baseURL = 'https://asdf.com'\nmyClient = axios.create()\nmyClient.config.baseURL = 'https://google.com'\nmyClient.get('/') // should GET 'https://google.com/'\nconsole.log(myClient.defaults.baseURL) // should output 'https://asdf.com'\n``\nI'm not sure this is not a \"simple\" issue, in fact it is a pretty basic issue for pretty basic functionality that many other languages simply leveragecurlfor, alas, everyone in the node ecosystem wants to reinvent the wheel. /rant. @codeclown \nYeah, I'm not sure.. there seems to be a dangling reference somewhere, because I _can_ setdefaults.timeoutindependently across different axios instances.. maybe I'll keep digging, but at the end of the day we haven't heard from the owner in a year and a half so at best we're stuck with forks only even if there is a definite fix.. @codeclown Got it. I'll give it a shot.. @codeclown #1391. The problem is theutils.mergefunction passes by reference on the nestedheadersobject. This shouldn't even be called a **feature**, but rather a **bug**. Trying to get #1391 pushed through.. @emilyemorehouse . Problem is theutils.mergefunction passes by reference on the nestedheaders` object. Trying to get #1391 pushed through.. @emilyemorehouse Seems like you're the current maintainer of this project now, since the original Owner is AWOL. Can we get this addressed, ASAP, please?\nthanks.. @hontas that's what axios.create is supposed to do, since the utils.merge function first creates an empty {} object then proceeds to assign values to its properties.. I don't imagine it would have been done that way without the intention of the returned object not being a copy. Unfortunately Javascript's built-in mechanisms for cloning an object are pretty much non-existent so the assignment just assigns by reference instead.\nI first attempted to perform a \"true clone\" (JSON.parse()(JSON.stringify())) of property values that had a certain typeof with the intention of targeting the headers property. Without lack of typing,  however, and utils.merge being a general utility function as @nickuraltsev stated, it fudges with other assignments elsewhere in the code.\nThus, next thing I can think of is to designate certain keys within the configuration schema (that we know are plain objects with nested data) as being of a certain pseudo-type such that the merge utility can detect that pseudo-type. It can then perform the parse/stringify clone without affecting any other properties that are being assigned/merged such as functions, Date objects, or objects with nested functions and Date objects.\nThe utils.merge function is called on HTTP requests as well, not just on axios.create.. @emilyemorehouse yeah that's pretty much 1:1 with the test script I've been running locally to see if what I'm doing works.. although the latest CI tests are failing on the config.cancelToken.throwIfRequested property which I did not know about until now.\nI did consider adding logic to the function you referenced, but I thought that it was such a neat looking snippet I'd try first messing with something that's more tucked away. \nContinuing the hunt for the minimum viable solution... Motherfuckin' Eureka!\nHow about now everyone?\n. @emilyemorehouse @codeclown @nickuraltsev \n Added better cloning method which gets called in axios.create to \"pass by value\" the defaults object.\n Added additional tests.\n* The light, at the end of the tunnel, I can see it.. @nickuraltsev have we got any headway on this?\nthanks. so... any chance to merge this as a bug fix?. @codeclown deleted. I think the terminology you are looking for is to clone rather than to freeze.\n\nI think that when creating a new Axios instance, it should freeze its own defaults in time\n\nThe above statement strongly suggests that you want to freeze the defaults. When you want one instance to not affect the other instance that is called passing by value - not freezing.. @codeclown @emilyemorehouse agreed after reading the threads referenced by @nickuraltsev This PR seems like the best route to go, or at least is most in-line with what was discussed in those threads. If we can get tests to pass we may be in good shape.\nPersonally I am not a fan of having different behaviours between different properties within the defaults object, but I suppose that's a compromise to make if going for the most backwards-compatibility.\nI definitely agree on headers being critical, as it often contains Authorization data that shouldn't be shared between instances.. Still alive?. good point, i'll look else where to do a really tiny edit. IMO this is not something that should require a whole lotta code and/or another dependency... added Clone function which gets called during axios.create to truly clone the defaults object. utils.merge changes have been undone.. modify this line to\nnode\nforEach(['url', 'method', 'params', 'data'], function assignProp(prop) {\nto pass eslint warnings in CI tests (or some other function name of your choosing). I capitalized it since it's invoked using the new keyword which typically implies a \"class,\" or a function that has constructor: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\nHowever, if you still want me to lowercase it I can.. pls confirm.. done. okidoki, thank you. @nickuraltsev The functionality of new is the key here. It guarantees that the object being assigned to this[prop] is a completely new object. Using Object.assign({{}, obj[prop]) doesn't work here, nor does Object.create(obj[prop]), you can try it yourself.\nIf you have any other ideas, I'm open, but this seems to be the simplest way to recursively create a perfect clone of an object. Again, the new keyword and its inherent functionality are what enables this to work at all.. If you want to avoid a class constructor which really isn't even a class in the ES6 sense but a constructor function which has been readily available and widely used since Javascript 1.0, be my guest, but please propose an alternative solution that works here.\nOtherwise, let's just get on with our lives and fix this issue that's been around for way too long.. Yes, that is what your utils.merge function does, where it was written: var result = {}. Clearly, however, this is not working to \"separate,\" or clone, a new instance's defaults object from the global axios defaults object.\n..which is the very root of this issue. So if the current behaviour has a bug, this PR is intended to fix it.\nHaving the defaults of a separate instance of axios be able to modify all other instances of axios in a single script completely negates the point of having separate instances to begin with, IMO.\nDo you not agree?. OK, then how about creating an empty headers object if merge finds that it does not exist on the target object?\nAside from that, and looking at the previous discussions, it looks like you all came to an agreed-upon solution but nobody did anything about it... so if that didn't even happen I suppose I can't expect this to get fixed on my account.\nWill ignore this PR and just continue to use my own fork until you all can figure it out.. Thanks.. ",
    "throrin19": "Same problem here. Same problem here. ",
    "j-funk": "That did the trick, thanks!\n. ",
    "hbarcelos": "The solution is not working on node@8.9.3 and axios@0.17.1. Any idea why?. ",
    "heipei": "Same here, is there still a way to easily get the redirect chain? @hbarcelos did you find out anything?. ",
    "hoanganh25991": "When debug, i see redirect url under responseURL key, get fetchedUrl by:\nconst fetchedUrl = response.request.res.responseURL;\nDebug screenshot\n\nEnvironment\nnode: v8.9.4\naxios: ^0.18.0\n. ",
    "inv8der": "I'm experiencing this issue, too. My guess is that with how the defaults are merged for each instance, the defaults attribute is just a shallow copy of the global axios.defaults\n```\nimport axios from 'axios';\nconst client = axios.create();\nconsole.log(axios.defaults.headers.common.Authorization);  // undefined\nconsole.log(client.defaults.headers.common.Authorization); // undefined  \nclient.defaults.headers.common.Authorization = 'Token foobar'\nconsole.log(axios.defaults.headers.common.Authorization);  // 'Token foobar'\nconsole.log(client.defaults.headers.common.Authorization); // 'Token foobar'\n```\n. Duplicate of #385? I know my issue is \u261d\ufe0f \n. ",
    "jamessawyer": "same issue! I have stuck for this for days. same issue! I have stuck for this for days. @mattstrayer can you show me the getToken() method? Do you storage your token in localStorage or AsyncStorage(React Native)? Thanks in advance!. +1 when 1.0.0 will release?. +1 when 1.0.0 will release?. I want to use brotli in a react native project. It's a great feature, please add it to axios! thanks. I want to use brotli in a react native project. It's a great feature, please add it to axios! thanks. @ericmdantas thanks for your help! I just change my code like this.\n```\nlet axiosInterceptor = null; // outer variable\nconst fetchGet = async (url, reqParam, hasToken = true, baseURL = '') => {\n  // remove interceptor if exists\n  // I found axiosInterceptor starts with 0, then +1.\n  if (!!axiosInterceptor || axiosInterceptor === 0) {\n    axios.interceptors.request.eject(axiosInterceptor);\n  }\n  const reqConfig = {\n    params: reqParam,\n  };\n  // use for remove an interceptor later\n  axiosInterceptor = axios.interceptors.request.use((config) => {\n    console.log('GET interceptors triggers')\n    config.baseURL = ${appGlobal.BASE_URL}api/client/;\n    const headers = deepClone(config.headers);\n    if (hasToken) {\n      console.log('add token');\n      headers.common.Authorization = appGlobal.TOKEN; // appGlobal.TOKEN is the token\n      config.headers = headers;\n    } else {\n      console.log('remove token');\n      delete config.headers.common.Authorization;\n    }\nreturn config;\n\n});\nconst response = await axios.get(url, reqConfig);\n  return response.data;\n};\nNow everything works fine! Thanks again!. @ericmdantas thanks for your help! I just change my code like this.\nlet axiosInterceptor = null; // outer variable\nconst fetchGet = async (url, reqParam, hasToken = true, baseURL = '') => {\n  // remove interceptor if exists\n  // I found axiosInterceptor starts with 0, then +1.\n  if (!!axiosInterceptor || axiosInterceptor === 0) {\n    axios.interceptors.request.eject(axiosInterceptor);\n  }\n  const reqConfig = {\n    params: reqParam,\n  };\n  // use for remove an interceptor later\n  axiosInterceptor = axios.interceptors.request.use((config) => {\n    console.log('GET interceptors triggers')\n    config.baseURL = ${appGlobal.BASE_URL}api/client/;\n    const headers = deepClone(config.headers);\n    if (hasToken) {\n      console.log('add token');\n      headers.common.Authorization = appGlobal.TOKEN; // appGlobal.TOKEN is the token\n      config.headers = headers;\n    } else {\n      console.log('remove token');\n      delete config.headers.common.Authorization;\n    }\nreturn config;\n\n});\nconst response = await axios.get(url, reqConfig);\n  return response.data;\n};\n```\nNow everything works fine! Thanks again!. ",
    "wzl002": "@nickuraltsev  Yes, I tried to use fetch, and It's OK. And I write a simple 'fetch' adapter for our RN project by my self, but I thought it didn't support enough config correctly, so I wish would you show a official example.\nThanks for reply\n. ",
    "kayazinc": "@nickuraltsev thanks for the response.\nI've googled and find out that the redirect is automatically followed by the browser. (http://stackoverflow.com/questions/282429/returning-redirect-as-response-to-xhr-request).\nI'm kinda confused.  Are you able to help me to the links / keyword which describe the overview of implementing the logic for the redirection in my application?\n. ",
    "ganesharulanantham": "@kayazinc Did you find the solution?. ",
    "Aterr": "same problem here.. ",
    "newtrat": "The Problem:\nI think that when you send a 302 in response to an Axios request, the browser interprets that to mean you want to redirect the Axios request it just sent out, not the web page as a whole.\nThe process is:\n1. You send a request to quote using Axios.\n2. Your server responds with a 302, saying \"no, redirect to logon.\" Note that the name for the 302 response is \"Found\" -- what it means is \"The content you were looking for exists, but in a different location.\" So...\n3. Your browser hears that the stuff it was looking for at quote is actually at logon instead. So it sends another request to logon through Axios. In other words, it sends another asynchronous request in the background. The user isn't aware of anything happening.\n4. Your server responds with a 200, and tells your browser the contents of the logon page.\n5. Your browser reads these contents, but it's still doing all this work in the background, so the user isn't redirected. The browser sees what logon should look like, but it doesn't display anything to the user.\nPossible Solution:\nI think your server should instead respond with something like 401 Unauthorized. Then you'd look for this response in Javascript and, if you saw it, you'd redirect using Javascript. This is what nickuraltsev meant by implementing logic in your application.\nExample:\njavascript\naxios.post(\"quote\", params)\n  .catch(function(error) {\n    if (error.response && error.response.status === 401) {\n      window.location.href = \"logon\";\n    } else {\n      // Handle error however you want\n    }\n  });. ",
    "madebyherzblut": "Thank you and nice catch @nickuraltsev \ud83d\udc4d  I made the changes and amended the original commit to keep the history clean.\n. ",
    "haveagoodone": "Yeah, it is a string. \n. Hi, we changed the content-type to json.\nThanks anyway\n. ",
    "malyzeli": "Thanks for the explanation, though I still don't really get it. \nI understand your example, where an error is raised by code inside the callback, but I don't see the connection in my case, where the error happens in another part of application.\nCan you recommend some approach how to easily distinguish between http request error and some other error? I don't see comparing strings as effective and error-prone way to achieve that.\nI expect the catch clause handle http request errors only, while all other application errors should be handled in places they can eventually occur.\n. Now it makes perfect sense. \nThank you, Nick!\n. ",
    "vdh": "This feels somewhat inelegant, but I found a workaround by wrapping dispatch in a setTimeout to prevent unrelated errors bubbling up into the request promise.\njs\nconst promise = axios.get('http://example.com/');\npromise\n  .then((response) => {\n    // Do stuff\u2026\n    setTimeout(() => {\n      // Now this dispatch is not connected to the request promise\u2026\n      dispatch(successAction(response));\n    });\n  })\n  .catch((error) => {\n    // Now this only catches errors from the request, or other code outside the setTimeout call\n  });. ",
    "sarink": "The best way to handle this is to utilize the second argument to .then, which is an error callback:\npromise.then(\n  (successResponse) => { ... },\n  (errorResponse) => { ... },\n). ",
    "qq645381995": "Did not go in this method\n. ",
    "Baavgai": "Clearly, I don't know how to set up a request.  Or that close button is too bloody easy.\nThis one package.json line makes my typescript projects happy.  I don't see it negatively impacts anything.  Please consider adding it.  Thank you.\n. Clearly, I don't know how to set up a request.  Or that close button is too bloody easy.\nThis one package.json line makes my typescript projects happy.  I don't see it negatively impacts anything.  Please consider adding it.  Thank you.\n. Slight modification to this request.  The definition file itself needed a change.\n. Slight modification to this request.  The definition file itself needed a change.\n. ",
    "thuy-le-ep": "So , the browser version used to do while not cross domain?\n. Thanks @nickuraltsev !\n. ",
    "Uniphix": "Yeah I am getting this issue to and it's driving me nuts, only happening on firefox\n. ",
    "ngtranthanhtoan": "I'm using jquery and it's working just fine. But it's still got error with axios. ",
    "asiniy": "@nickuraltsev it's excluded:\njavascript\nmodule.exports = {\n  entry: {\n    component: \"./web/static/js/application.js\",\n  },\n  target: \"node\",\n  output: {\n    path: \"./priv/server/js\",\n    filename: \"component.js\",\n    library: \"Application\",\n    libraryTarget: \"commonjs2\"\n  },\n  module: {\n    loaders: [{\n      test: /\\.js$/,\n      exclude: /node_modules/,\n      loader: \"babel-loader\",\n      query: {\n        presets: [\"es2015\", \"react\"]\n      }\n    }, {\n      test: new RegExp(`/\n        stardust\n        |utils/errors.js\n        |sign_in\n        |modal\n        |redux-form\n      `),\n      loader: \"null-loader\"\n    }],\n  },\n  resolve: {\n    alias: {\n      phoenix_html:\n        __dirname + \"/deps/phoenix_html/web/static/js/phoenix_html.js\",\n      phoenix:\n        __dirname + \"./deps/phoenix/web/static/js/phoenix.js\"\n    }\n  }\n};\n. ",
    "jaingeet": "@nickuraltsev When Im hitting as POST request it is working fine. And i checked it too that PATCH request is allowed at server.\n. ",
    "hbstone": "If it's fixed on the application side rather than the axios side, wouldn't that mean that axios doesn't actually support IE or Safari? Mostly it will work, but if you pass URLSearchParams then in some browsers it would be sent with Content-Type: application/x-www-form-urlencoded;charset=utf-8 and in others it would be sent with Content-Type: application/json;charset=utf-8, requiring all servers to support both since it doesn't know which one it might get.\n. ",
    "tanzoniteblack": "1.) The point that @hbstone brings up is quite valid, that this library just doesn't work as expected on Safari/Edge, with little to no warning.\n2.) The method you recommend to make axios actually work on Safari/Edge doesn't work for me directly, since we're using webpack which isn't a big fan of global variables. I did manage to get it to work by using the expose-loader and the line require('expose?URLSearchParams!url-search-params');.\nIn any event, the fact that on browsers that don't support URLSearchParams, unless you bend over backwards with the polyfill, cause the library to silently not work as stated is probably problematic.\n. ",
    "amyliu1062": "```\nimport { URLSearchParams} from \"axios\";\nfunction login(url, data, callback, errcallback) {\n    let param = new URLSearchParams();\n    param.append(\"password\", \"xxxx\");\n}\n```\nin this way , will show the error:\n\"TypeError: undefined is not a construuctor(evaluating 'new_axios.URLSearchParams()')\"\nwhat i should do?. ",
    "firstdoit": "This would be an immensely welcome change! But have anyone suggested using any-promise?\nhttps://github.com/kevinbeaty/any-promise\nI think it's quickly becoming the default way to offer promise configurability.\n. ",
    "ramesaliyev": "What is the last status of this PR? I'm really waiting for it.. What is the last status of this PR? I'm really waiting for it.. ",
    "brendensoares": "It just wasn't clear to me that v0.9.1 was affected.\nThanks for clarifying.\n. ",
    "macnibblet": "The current hack I have to resolve this issue is the following, and it's the first few lines of the resolved fat arrow function. \n``` javascript\n        // todo: remove this, when the bug is resolved https://github.com/mzabriskie/axios/issues/412\n        if (response instanceof Error) {\n          return Promise.reject(response);\n        }\n```\n. 0.13.1 in the browser \n. @rubennorte Please read the issue again :p \n. @rubennorte Actually I found the cause of the issue it was related to an edge-case in a interceptor one of my minions added.\n. ",
    "hannes-dahlberg": "@macnibblet Found this issue when having the same problem as you and ended up with the same solution. An interceptor was causing the problem. Thank you.. ",
    "joshglenn": "Yes. I am able to debug the code , but no error is ever returned, nor do either of the \"then\" blocks get executed.\nOn Aug 12, 2016, 11:04 AM -0500, Julien Bouquillonnotifications@github.com, wrote:\n\nHi\nIt should work\nDo you use Safari developer menu to get the simulator console ?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly,view it on GitHub(https://github.com/mzabriskie/axios/issues/414#issuecomment-239487131), ormute the thread(https://github.com/notifications/unsubscribe-auth/AGoZOsv03NnhjaK7-5fzScjkejjZcnyFks5qfJlRgaJpZM4JituL).\n. @revolunet my Cordova version is 5.4.1 according to the npm list command. And I'm not familiar with wkwebview, so I'm guessing not.\n\n@rubennorte Thanks. It looks like the request is being sent, and data apparently is being returned. However, it looks like a status nothing is coming back in the Status of the response, just a blank dash according to the developer tools.\n\n. ",
    "wojciech-bilicki": "NVM I was doing it wrong after all\n1) Remember to choose correct 'Contect-Type'\n2) I'm sending File not a Blob now and it works great\n. ",
    "bericoberin": "+1  I need the same!. ",
    "JeSuis": "@bericoberin headers: { 'content-type': 'multipart/form-data' }. ",
    "AtNovember": "\nheaders: { 'content-type': 'multipart/form-data' }\n\nI also put the same content-type value,\nbut in Network tools see, thet my File instanse became empty object, just {}. ",
    "diesal11": "PR is done. :)\n423\n. @nickuraltsev the Jasmine AJAX fakeXHR hasn't implemented upload events. So i can't do any tests on that yet. I'm gonna create an issue/PR over there so we can test this properly, not sure if you wanna wait for that before merging this.\nIn the meantime i've switched the tests to use spies which is much nicer.\n. Yeah i agree, i don't like that at all on a second look!\nPlus the upload test doesn't actually test for anything atm as i couldn't figure out the best way to test it as Jasmine AJAX doesn't seem to catch/handle upload events.\nI'll have another dive in and see how i can improve both. :)\n. It's not really clear which browsers support request.upload and when they did. It was included in the XHR2 spec so older browsers definitely won't support it. Will add a check.\n. ",
    "bubuzzz": "Another way is putting the values into the FormData object and post\n. ",
    "vanpav": "I wrote small wrapper aroud axios which works fine with default Django >1.8 settings. Hope this helps somebody!. I wrote small wrapper aroud axios which works fine with default Django >1.8 settings. Hope this helps somebody!. ",
    "clavecoder": "Any ideas when you are planning on NPM releasing this? Right now I'm renaming your axios.d.ts to index.d.ts to get the auto take-up of VSCode to work.\n. Any ideas when you are planning on NPM releasing this? Right now I'm renaming your axios.d.ts to index.d.ts to get the auto take-up of VSCode to work.\n. ",
    "rssfrncs": "@nickuraltsev any chance you have any insight on my newly opened issue #1510 ?. @zcei ooh actually this wouldn't work for global interceptors e.g. axios.interceptors.response.use. @zcei hi sorry but this really doesn't work with my example, i've created a codesandbox to highlight this issue.\nCheck it out here. First it's interesting to know you are doing the same thing @Etheryte !\nIn our app the r => r.data is the final response interceptor in the chain and we use others which rely on status codes to handle refresh tokens etc. but at a global level as there is no need for us to handle this for specific calls.\nI understand that it might just not be possible to accommodate this use case with TS. However, @zcei it's undeniable that this is a legitimate way to use Axios as it is using an official part of the Axios API (interceptors) :). . @zcei That looks good! Defaulting to AxiosResponse of course makes sense 99% of the time \ud83d\udc4d . @zcei That looks good! Defaulting to AxiosResponse of course makes sense 99% of the time \ud83d\udc4d . @zcei not a problem! Out of interest what is the release cycle for Axios? . @zcei not a problem! Out of interest what is the release cycle for Axios? . @zcei i'll try it out tomorrow. ",
    "chobo2": "Thanks it does return a promise but how do I get the data back to the top level promise? \nprops.fetchStorage().then(function(response) {\n            console.log(\"heyhey\");\n        //  props.setPreLoader(false);\n        }).catch(function(){\n         //  props.setPreLoader(false);\n        });\n. ah I think I got it, got to return \"response\" as well. \n. hmm, when I use postman and setup my header to application/json and put a body in it. It works. Just not through axios. So not sure what I am doing wrong.\nI also see this error message when I look deeper\n{\"message\":\"The request contains an entity body but no Content-Type header. The inferred media type 'application/octet-stream' is not supported for this resource.\",\"exceptionMessage\":\"No MediaTypeFormatter is available to read an object of type 'Storage' from content with media type 'application/octet-stream'.\",\"exceptionType\":\"System.Net.Http.UnsupportedMediaTypeException\",\"stackTrace\":\"   at System.Net.Http.HttpContentExtensions.ReadAsAsync[T](HttpContent content, Type type, IEnumerable1 formatters, IFormatterLogger formatterLogger, CancellationToken cancellationToken)\\r\\n   at System.Web.Http.ModelBinding.FormatterParameterBinding.ReadContentAsync(HttpRequestMessage request, Type type, IEnumerable1 formatters, IFormatterLogger formatterLogger, CancellationToken cancellationToken)\"}\n. How does the shorthand .delete work then? there is not example on it?\n. @Dinuz \nCan you explain more what you mean? I sort of switched away from this though my new way still has some bugs.\nThe reason I left this way was if I had multiple requests going off at one and one of them triggered a refresh it was possible for the others to have an invalid token.\nI gone to a method that checks a couple mins before the refresh token needs to be refreshed and it does  this before any other request goes out but I got some bug where I guess this is not happening and I get logged out.\nSo I am still looking for a good solution. . Sure if you can put some sample code that would be great. I not in rush as I was planning to handle this in a few week from now.. @gcox \nhmm, I updated my code but I still don't see the headers, I would have thought this would be done on request. Maybe because I am getting 401 right now it is not executing the headers code?. @gcox \nOk, I will try to build something, but basically it just the code you have and then doing a post/get/delete/put. @gcox \nI got past the problem that I was trying to solve but without being able to see the headers, but I never got time to try what you posted. Hopefully maybe this weekend I will have time to try.. ",
    "mehi-shokri": "Just after opening issue notices that second param is for data, and third one relates to config.\n. ",
    "8bitjoey": "So @chobo2 can basically use:\naxios.delete(url, { data: {storage: storage}})\nright?. So @chobo2 can basically use:\naxios.delete(url, { data: {storage: storage}})\nright?. ",
    "ingro": "Thanks @nickuraltsev for the insights, I also agree with @damianprzygodzki that this feature should be better documented, great work with axios anyway!\n. ",
    "cddsgtc": "@nickuraltsev ok\uff0cif i use the file_get_contents('http://input') in the server side ,it will correctly process.\n. And thank you for your help.\n2016-08-28 4:28 GMT+08:00 Nick Uraltsev notifications@github.com:\n\nLooks like the problem is that the server expects the data to be in the\napplication/x-www-form-urlencoded format, while axios sends objects in\nthe json format by default.\nPlease see this comment\nhttps://github.com/mzabriskie/axios/issues/350#issuecomment-227270046\nfor details.\nHope this helps!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/426#issuecomment-242939006,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/APj1DUdxoQZyivzDyFCN35tJlDSxKjtdks5qkJ3kgaJpZM4Jso1V\n.\n. \n",
    "bmarchete": "@cddsgtc  I've handled the same issue. I used this solution:\nWhen you send the axios.post, you can attach the parameters in the url, like\naxios.post('http://api?name=some-name')\nDon't forget to receive the values in the server side using $_REQUEST, like\nphp\nheader('Content-type: application/json');\n$name = $_REQUEST['name'];\nIt works for me!. ",
    "sajumani": "Itseem your plugin issue.. i fixed ...!!!\n. ",
    "ShakurOo": "@mzabriskie When I do this i have a typescript error : \nProperty 'concat' does not exist on type : '<U>(data: any) = > U'\nWhat does it mean ? What is <U> type ?  How bypassing this error ? . ",
    "devrelm": "@ShakurOo transformResponse (including axios.defaults.transformResponse) is the type AxiosTransformer | AxiosTransformer[], meaning that it technically might or might not be an array.\nSo, TypeScript is complaining because AxiosTransformer (the non-array option for axios.defaults.transformResponse's type) doesn't have a concat method on it.\nI fixed this with the following:\nts\n{\n    transformResponse: [].concat(\n        axios.defaults.transformResponse,\n        myTransformResponse,\n    ),\n}\nArray.prototype.concat automatically flattens arrays one level deep, so it will work correctly no matter whether axios.defaults.transformResponse and myTransformResponse are objects, arrays, or mixed.. ",
    "vasilevich": "why is transformResponse so inefficent? why no checking weather the client expects JSON\nespecially in configurations such as this:\naxios.create({\n      url: '',\n      baseURL: `${api.length ? `${httpProtocol}://` : ''}${api}/`,\n      responseType: 'json',\n      withCredentials: true,\n      validateStatus: (status: HTTPStatusCodes) => {\n        return status >= HTTPStatusCodes.OK && status < HTTPStatusCodes.MULTIPLE_CHOICES; // default\n      },\n    })\nwhere responseType is clearly set to \"json\", \nbut in another client it might be set to octet stream.\nwhy to attempt to parse everything and hurt perfomance for no reason?\n, why is there no ability within transformResponse  to access the headers/original client config, to compensate for this problem?. ",
    "achingbrain": "Not sure those issues would stop me from releasing a v1 \ud83d\ude09  - cancelling Promises is a problem bigger than this library and IMHO the README.md is comprehensive enough to stand in for a documentation website for the time being.\nThe reason I bring it up is I have a project that has a few different versions of axios in the dependency tree - 0.13, 0.14, etc with no observed functional difference between them - the multiple versions play havoc when trying to stub them in our testing, set global defaults, etc.  If v1 were to be released they could all resolve to the same version (e.g. ^1.0.0) which would make life much simpler.\n. ",
    "StefH": "Thanks for the answer.\n. ",
    "ChuckJonas": "this took me forever to figure out.... ",
    "cesarp": "@nickuraltsev I can help with the fix since I need it too but I am unable to run the unit tests so not sure if I am breaking something else.\n. The unit tests hang on my Linux machine but work properly in macOS\n. ",
    "vilinski": "Hi! Is there any progress with this PR? thx. there is already an open PR, which if merged solves your problem. ",
    "dan-turner": "Any updates with this one?\n. @rubennorte cheers mate. I notice that your PR seems to also include some extra refactoring. I suspect there was a reason @mzabriskie used the Promise.resolve(config) approach to support the adapter function being async or sync.\nI submit this PR as the lightest touch to fix the issue of not having access to the default adapter.\n. ",
    "Softeqa": "Update: \nIn lib/defaults.js:\nvalidateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n}\nFails for greater status codes greater than 300 so a 401 isn't handled. Setting:\nvalidateStatus: function (status) {\n     return true;\n }\nin the instance config is a workaround.\n. @IgorDePaula No, I do understand that :) The problem is that even though my file gets uploaded, onUploadProgress never gets called so:\nonUploadProgress: function(progressEvent) {\n              console.log('Look at me uploading!!!')\n            }\n         }; \nNever console.log's. Am I missing something completely and getting an F- for this class? :( . Thanks for your interest. Your example works perfectly. Browser is Chrome 55.*. I suspect my problem is CORS related. I'm looking into it and will report back. . @IgorDePaula I found the issue but need some guidance here if you can. \nonUploadProgress: function(progressEvent) {\n              var percentCompleted = Math.round( (progressEvent.loaded * 100) / progressEvent.total );\n              console.log('%',percentCompleted);\n            }\nFails\nprogress: function(progressEvent) {\n                var percentCompleted = Math.round( (progressEvent.loaded * 100) / progressEvent.total );\n                console.log('%',percentCompleted);\n            }\nWorks\nThe source code in xhr.js <145>\nif (typeof config.progress === 'function') {\nSo what is 'onUploadProgress'? \nSomething, I missing badly. Any help appreciated :(\n. :( Old version of Axios. So sorry to have bothered you. Thanks for your help on this excellent product. . ",
    "leviathan88": "@sorCrer with that you've created a bug only, that will send to the first (undefined in your case) callback a valid response even if there is an error (>300) response, do something like this\ninstance.interceptors.response.use(undefined, err => { \n    const res= err.response;\n    console.log(res.status);   //401\n})\n. Thanks @rubennorte it works! It's so simple, here is the SO question, if you want to answer it I will accept it, thanks\n. ",
    "franciscolourenco": "The same with other options like timeout and interceptors.\n. Thats is what I understood from https://github.com/mzabriskie/axios#config-order-of-precedence \nGlobal defaults get used if instance options are not provided.\nIf Global defaults are changed with axios.defaults then they should be reflected in instances.\nIf this is not supported, global defaults is a bit pointless. It would be a nice feature in any case.\n. @nickuraltsev as a workaround I've been using axios.create(axios.defaults) where  axios.defaults is the modified defaults.\n. ",
    "cannap": "hi you need to set the base url for the new Axios instance are you sure it should inherit?\njs\nmyAxios.defaults.baseURL = \"https://api.icndb.com\";\n. hi you need to set the base url for the new Axios instance are you sure it should inherit?\njs\nmyAxios.defaults.baseURL = \"https://api.icndb.com\";\n. ",
    "dparmar74": "Thank you for the suggestions.  It worked with 0.12.0   (agent=agent) version but for 0.14.0 (httpAgent=agent) I'm getting ETIMEDOUT error.   My test case involves making a http call to one of our micro service deployed on AWS EC2.  Just wondering why it doesn't work with 0.14.0 version\n. It was proxy issue\n. Not an issue.  The website was internally redirecting to https. ",
    "beeant": "me too! thank you @demetriusnunes !!. me too! thank you @demetriusnunes !!. ",
    "bjunc": "And if you were like me, and you stumble upon this thread looking for a method to download images client-side, here's an example:\nvar imageUrl = \"myfavoriteimage.jpg\";\nvar imageEl = el.querySelector(\"img\");\n\naxios.get(imageUrl, { responseType:\"blob\" })\n    .then(function (response) {\n\n    var reader = new window.FileReader();\n    reader.readAsDataURL(response.data); \n    reader.onload = function() {\n\n        var imageDataUrl = reader.result;\n        imageEl.setAttribute(\"src\", imageDataUrl);\n    }\n});\n\n. This would be a nice feature to have.  My use case is to consider any API request as \"lastActivity\", for front-end based session timeouts (of course, redundancy on the server).\nMy solution was to hijack XMLHttpRequest.prototype.send, add my logic, then call send.  Works with axios, but also works for any XHR call.  Not sure how axios could implement this without hijacking all XHR requests. In my case, that was desirable.. ",
    "timster": "@bjunc Thank you! Wish I would have discovered this thread 2 hours ago.. ",
    "vinikatyal": "What about when downloading excel files?. ",
    "imzyf": "@vinikatyal Have you solved your problem?. @2ming no, I use GET request to download excel file.. ",
    "2ming": "@imzyf  @vinikatyal Have you solved your problem?. @imzyf  @vinikatyal Have you solved your problem?. ",
    "Itachi-Uchiha78": "...and excels in a zipped file...? Tried many approach nothing works from browser.... ",
    "ribeiroguilherme": "@vinikatyal  @imzyf did you solve the excel problem? I'm facing with the same here.. ",
    "Nevosis": "Thank you for this thread @demetriusnunes , half a day to find this.. ",
    "kkbxxi": "And is there a way to download the file directly to disk as a stream, instead of first getting it into response.data? \nHopefully, with a \"resume download\" happening automagically?. ",
    "kgrosvenor": "For me this worked, and it's also passing Authorisation headers which i set globally elsewhere @mauzepeda thank you for your comment example it helped me solve the issue of opening in a new window and changing my backend code.\n```\naxios.get(finalUrl, {\n          responseType: 'blob',\n          headers: {\n            'Accept': 'application/vnd.ms-excel'\n          }\n        })\n          .then(function (response) {\n            self.isExporting = false;\n            download(response.data, 'WeightData.xlsx')\n          });\n```\n      . It is possible @frayhan32 \ntry {\n      let response = await http.get('Types/AllOptions');\n      commit('setTypes', response.data);\n    }\n    catch (err) {\n      console.log(\"Types loading error\", err);\n    }. When there is no internet, the error.response is undefined - is this the best way? . You are most likely hitting a timeout then, try checking if 'response' exists in the error\naxios.get()\n.then(function(done) {\n   //fine and can get done.data\n})\n.catch(function(err) {\n  //catch the error, check it has a response object with lodash \n  if(_.has(err, 'response') {\n     console.log(error.response.status);  \n     console.log(error.response.data);\n } \n else {\n    console.log(\"Most likely a server timeout or an internet connection error\");\n    console.log(\"error response property is undefined\")\n }\n});. You can handle 500 status regardless, but pretty bad practice to return it on purpose from the server side in my opinion... . You can handle 500 status regardless, but pretty bad practice to return it on purpose from the server side in my opinion... . ",
    "Pixelatex": "I'm puzzled, I have to download any possible file but it keeps corrupting my binary files.. I tried download as blob, array buffer,... anyone got any idea?\nI noticed a lot of people including the exact file type they are expecting as a header which is not possible for me :/\njavascript\n axios(url, {\n                method: 'GET',\n                responseType: 'arrayBuffer',\n                headers: {\n                    'x-user': getEnvironment().DB_USER,\n                    'x-password': getEnvironment().DB_PASSWORD\n                }\n            })\n                .then(response => {\n                    res.json({\n                        error: null,\n                        data: response.data\n                    })\n                })\n                .catch(e => {\n                    console.log(e, 'error download')\n                    res.json({error: e.message, documents: []})\n                })\nFetching the files with postman actually works with these headers so that's not the issue. autocorrect in fact, sadly it is not that easy a fix :/. ",
    "Superjisan": "@Pixelatex, not sure if this might be the issue or a typo, but you should set the responseType as blob not blog\n  Also, make sure to add 'Accept': 'application/vnd.ms-excel' in the header object if that is what the server is passing back to you.. ",
    "fritx": "The workaround is worth a try: https://github.com/axios/axios/issues/815#issuecomment-340972365. +1 for this, I had a hack for it:\n``js\n// Here is a hack, works well for me.\n// You can put it intotransformResponse`, etc as well.\nimport fileDownload from 'js-file-download'\nopts.responseType = 'blob' // <--- force blob at the beginning, anyway\nres = await axios(opts)\nlet resBlob = res.data // <--- store the blob if it is\nlet resData = null\ntry {\n  let resText = await new Promise((resolve, reject) => {\n    let reader = new FileReader()\n    reader.addEventListener('abort', reject)\n    reader.addEventListener('error', reject)\n    reader.addEventListener('loadend', () => {\n      resolve(reader.result)\n    })\n    reader.readAsText(resBlob)\n  })\n  resData = JSON.parse(resText) // <--- try to parse as json evantually\n} catch (err) {\n  // ignore\n}\n// Now you have resData and resBlob at the same time.\n// resData would be the normal data object,\n// or the error object if resBlob is expected.\nif (resData) {\n  if (resData.error) {\n    // handle error\n  } else {\n    // handle data\n  }\n} else {\n  // handle blob\n  fileDownload(resBlob, filename)\n}\n```\n. +1 for this, I had a hack for it:\n``js\n// Here is a hack, works well for me.\n// You can put it intotransformResponse`, etc as well.\nimport fileDownload from 'js-file-download'\nopts.responseType = 'blob' // <--- force blob at the beginning, anyway\nres = await axios(opts)\nlet resBlob = res.data // <--- store the blob if it is\nlet resData = null\ntry {\n  let resText = await new Promise((resolve, reject) => {\n    let reader = new FileReader()\n    reader.addEventListener('abort', reject)\n    reader.addEventListener('error', reject)\n    reader.addEventListener('loadend', () => {\n      resolve(reader.result)\n    })\n    reader.readAsText(resBlob)\n  })\n  resData = JSON.parse(resText) // <--- try to parse as json evantually\n} catch (err) {\n  // ignore\n}\n// Now you have resData and resBlob at the same time.\n// resData would be the normal data object,\n// or the error object if resBlob is expected.\nif (resData) {\n  if (resData.error) {\n    // handle error\n  } else {\n    // handle data\n  }\n} else {\n  // handle blob\n  fileDownload(resBlob, filename)\n}\n```\n. ",
    "thevangelist": "I was one of the unlucky ones as well.. Here's my solution:\n\nset responseType: 'arraybuffer' in Axios\nresponse handling /w js-file-download:\n\n```\n.then((response) => {\n    this.filedownLoad(response, 'filename.pdf')\n})\n```\n\nin Node/Express.js backend /w html-pdf:\n\n```\n    pdf.create(htmlDocumentWithStyles, pdfOptions).toStream((err, result) => {\n      let body = [] // Store all the chunks of binary data.\n      result.on('data', (data) => {\n        body.push(data) // Build up an array of Buffers.\n      })\n  result.on('end', () => {\n    res.set('Content-Type', 'application/pdf')\n    res.end(Buffer.concat(body), 'binary')\n  })\n})\n\n```. I was one of the unlucky ones as well.. Here's my solution:\n\nset responseType: 'arraybuffer' in Axios\nresponse handling /w js-file-download:\n\n```\n.then((response) => {\n    this.filedownLoad(response, 'filename.pdf')\n})\n```\n\nin Node/Express.js backend /w html-pdf:\n\n```\n    pdf.create(htmlDocumentWithStyles, pdfOptions).toStream((err, result) => {\n      let body = [] // Store all the chunks of binary data.\n      result.on('data', (data) => {\n        body.push(data) // Build up an array of Buffers.\n      })\n  result.on('end', () => {\n    res.set('Content-Type', 'application/pdf')\n    res.end(Buffer.concat(body), 'binary')\n  })\n})\n\n```. ",
    "ekaitzht": "@mzabriskie @nickuraltsev \nYou don't think this should be treated as a bug? Why by default any request has be treated as utf8 string?\nI think axios should be check 'Content-type' if is binary file (octet-stream, jpeg, zip, etc) and not to stringify the response:\nhttps://github.com/axios/axios/blob/ccc78899bb6f595e3c44ec7ad6af610455859d78/lib/adapters/http.js#L197\nI think this implementation will avoid a lot of bugs in projects that are using Axios.. ",
    "quirinobrizi": "As pointed out this is a fairly easy fix just using basics of HTTP, just check the content-type response header and/or the accept header instead of require the requestType option. \nAt the same time I think I understand the idea of responseType as way of making the library more flexible, and I do agree on it as I think flexibility bring more goods than constant guess. \nI believe that in a well organised application we can just set the responseType based on the repository we are implementing, reference to DDD, but in general our DALs should have single responsibility so it becomes easy to set the responseType. \nNow for cases where the implementation is/need-to-be generic and there is no such luxury we can still guess based on request and response and the media type associate with Accept and Content-Type headers, the difference is that this guess will by based on our business needs which is for sure narrower than the possible scenarios this library should account for.\nAnyway my workaround is that:\n1) try determine the responseType based on the accept header, by default return arraybuffer so that we can try guess the response type later:\njavascript\ndetermineResponseType(req) {\n    let answer = 'arraybuffer';\n    if (req.headers.accept) {\n      const match = /.+\\/(.+)/gi.exec(req.headers.accept);\n      if (['javascript', 'json', 'plain', 'csv', 'xml', 'css', 'html',].some(st => match[1] == st)) {\n        answer = match[1];\n      }\n    }\n    return answer;\n  }\n 2) if Accept request header is not provided the responseType is set to arraybuffer and as per axios/lib/adapters/http.js the response is returned as-is, that means we can try guess the format from the response.\njavascript\nextractResponseData(res) {\n    let answer = res.data;\n    if (res.headers['content-type']) {\n      const match = /.+\\/(.+)/gi.exec(res.headers['content-type']);\n      if (['javascript', 'json', 'plain', 'csv', 'xml', 'css', 'html',].some(st => match[1] == st)) {\n        answer = answer.toString('utf-8');\n      }\n    }\n    return answer;\n  }\nAfter this we have the proper response data and setting the proper Content-Type on your client response, whatever is the framework you use, just copy/cherrypick server response header to client response headers and we will have proper rendering/download on our client. i.e. if we are using express we can simply do something like this:\njavascript\nlet responseData = this.extractResponseData(serverResponse);\nclientResponse.status(serverResponse.status);\nObject.entries(serverResponse.headers || {}).forEach(entry => clientResponse.set(entry[0], entry[1]));\nclientResponse.send(responseData);\nIn short I believe this is not really an issue of the library but a question of interpretation so here the greater good of the library purpose should prevail.. ",
    "RadioAc": "thanks, really solved my problem. ",
    "GGAlanSmithee": "Thinking some more about it, it is probably like this because it allows you to chose where to go;\n- return error goes to fetch\n- Promise.reject(error) goes to catch\nI guess it would be hard to implement the same if returning would go to catch.\n. Thinking some more about it, it is probably like this because it allows you to chose where to go;\n- return error goes to fetch\n- Promise.reject(error) goes to catch\nI guess it would be hard to implement the same if returning would go to catch.\n. ",
    "fakiolinho": "I 've started using Interceptor recently to handle failed ones globally but it seems I cannot avoid getting into catch() after Promise.reject(error) is used.\nSo let's say a 401 is returned by the server and I have to logout the user by force and redirect him to login page. This is a very common error that could be handled globally in a SPA. Unfortunately, i still have to pass through catch(). If I omit catch() in cases like this one, then an unhandled exception is thrown. Is this the wanted behavior or i am missing sth here? How do you tackle these occasions?. ",
    "NanoDev777": "@rubennorte\ncan you check this thread please take time without solving this problem https://github.com/axios/axios/issues/1290\n. @rlambertsen  I followed your example since I am making a login using laravel with the jwt library to generate my token and vue.js ahead, but I have problems in the interceptor, after updating my new token the request should continue however I still receive the error : Uncaught (in promise) Error: Request failed with status code 401, in my console. @ligne13  did you manage to make it work? you can check this thread https://github.com/axios/axios/issues/1290 \nI've had time with a similar problem that breaks my head, since I'm also a novice in promises, you can look at it and try to guide me. @smingam  What version of axios did you use when it did not work ?, I use the 0.16.2 axios and it does not work for me, what do you currently use?. @ligne13 Is it possible to adapt your solution to my reference code? I have something different, I would also like to know what version of axios you use. @ligne13  I'm sorry, I already format the code to make it more understandable\n. ",
    "johndatserakis": "@rubennorte your answer needs to go up on a plaque somewhere - literally just saved my life. Also there's little other mention of this seemingly normal situation other then this thread. Thank you.. ",
    "radziksh": "@nickuraltsev could you update the answer at stackoverflow? http://stackoverflow.com/questions/38329209/how-to-cancel-abort-ajax-request-in-axios\n. ",
    "uhoh-itsmaciek": "After some consideration, we're going to go with separate test suites. I'm still interested in feedback in case other axios users or devs have thoughts on this, but I'm going to close the issue to avoid cluttering the repo.\n. After some consideration, we're going to go with separate test suites. I'm still interested in feedback in case other axios users or devs have thoughts on this, but I'm going to close the issue to avoid cluttering the repo.\n. ",
    "gustavohenke": "I haven't used axios yet (still under consideration), but I've been developing an isomorphic app and all my tests are written in Node, no real browsers envolved.\nI've been happy using jsdom when testing something that happens only in a DOM environment.\nHowever, this app is still in its early stages, so I know that the time to use real browsers will come... \nEveryone needs to deal with strangeness in old IE behavior, or perhaps bugs dating from Firefox 1.0. Who knows.\n. ",
    "XXChester": "I am experiencing the exact same problem via axios.get requests.. ",
    "leepowellcouk": "@UnsungHero97 Did you resolve this? I'm having the same issue - trying to build a single bundle I can use on both the browser and node. At the moment I'm having to inject the xhr adapter into the defaults in Node. It works but isn't a clean solution.. ",
    "Naramsim": "Using the target: 'node' with the entry node: { process: false }, and a plugin\nplugins: [\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV)\n    })\n  ]\nMakes the output library both working on the web and node.. ",
    "geraldfullam": "I think you're right. Please, feel free to close this issue. Thanks for the response.\n. ",
    "olalonde": "Temporary workaround:\n``` javascript\nvar Timeout = require('stream-timeout')\nclient.get('/stop-writing-body-halfway', {\n    responseType: 'stream',\n  }).then((response) => {\n    const { data } = response\n    return new Promise((resolve, reject) => {\n      const bufs = []\n      data\n        .pipe(new Timeout(200))\n        .on('timeout', () => {\n          data.req.abort()\n          const err = new Error('timeout')\n          err.data = Buffer.concat(bufs)\n          reject(err)\n        })\n      data.on('data', (buf) => {\n        bufs.push(buf)\n      })\n      data.on('end', () => resolve(Buffer.concat(bufs)))\n    })\n  })\n``\n. @dtryon I'm not sure I understand what you mean. My request was that we have a timeout for response bodies because sometimes servers shutdown unexpectedly and you don't want to be forever stuck waiting for a response that will never arrive.\n. On a related note, I wrote https://github.com/blockai/broken-http-server to help test those sort of things in my code. Could be helpful in axios tests.\n. I was more hoping for a Node.js readable stream but I guess a whatwg stream would be better than nothing :) I ended up using https://github.com/kumavis/xhr-stream but yeah, it's a hacky implementation.\n. I have a long lived http response that emits new line delimited JSON objects, and want to start display the result in the browser without waiting for the response to finish.xhr-streamseems to work although I'm not sure how it works. I am piping the xhr stream to https://github.com/jahewson/node-byline which is why a Node.js compatible read stream would have been helpful. I'm sure there are probablywhatwg streamtonode.js streamwrappers somewhere though.\n. Right. Unfortunately, there is no standard for closing Node.js streams (though it's usually.closeor.destroy`) so it'd be useful if this was mentioned in the README.\nAlso, things like https://github.com/mzabriskie/axios/blob/master/lib/adapters/http.js#L145 can make things more complicated because you don't have a reference to the original stream (which is presumably an http.IncomingMessage that does have a  .destroy() method).\n. Edit: the test passes in axios@0.15.2 so the breaking change seems to be introduced in axios@0.15.3.. https://github.com/mzabriskie/axios/compare/v0.15.2...v0.15.3. I think I further isolated the issue to the bump from follow-redirect@0.0.7 to follow-redirects@1.0.0: https://github.com/mzabriskie/axios/compare/v0.15.2...v0.15.3#diff-b9cfc7f2cdf78a7f4b91a753d10865a2L75 ... which of course is my module, full circle!. Further isolated... bug was first introduced in follow-redirects@0.3.0 https://github.com/olalonde/follow-redirects/compare/v0.2.0...v0.3.0. Updating to follow-redirects to 1.2.4 should fix this issue.. Oops, just realized I could use interceptors for that.. ",
    "dtryon": "Shouldn't the timeout be cleared on stream.on('end'?\nWhat would be the downside of waiting until the entire response has been received before clearing?\nhttps://github.com/mzabriskie/axios/blob/master/lib/adapters/http.js#L161\n. @olalonde Yes, exactly.  At the moment, the current timeout is cleared before the response body has been completely received:\nhttps://github.com/mzabriskie/axios/blob/master/lib/adapters/http.js#L116\nThe timeout gets cleared before the body stream is processed.\nInstead the timeout could be be cleared later (when the body has been completely received).\n. @srahulprdxn This is interesting, but unless I'm mistaken, this solution will not abort the underlying request (and socket).\n. ",
    "rewieer": "Any solution for this ? I'm having the same problem, response data is halfway received but after the defined timeout, it just stops and there are no signal a timeout has been triggered.\nUsually we want timeout to be applied on request. If the data start to be fetched, timeout shouldn't apply (or might we use a responseTimeout variable in the config ?). \n. @srahulprdxn sounds very good for request timeout, but any clue for response timeout ? What if I receive a success response ? It will trigger the timeout, see the success status code and just consider things are done even through the JSON isn't entirely parsed.\nEven worst, sometimes it just magically parse the JSON but it's only a fraction of data. \n. I've come to this solution.\n``` js\nconst defaultConfig = {\n  method: 'GET',\n  params: null,\n  data: null,\n  timeout: 2000\n};\nconst fetch = (url, method, config) => {\n  const finalConfig = Object.assign({}, defaultConfig, config);\n  return axios({\n    url,\n    method,\n    params: finalConfig.params, // QUERY\n    data: finalConfig.data, // REQUEST\n    headers: finalConfig.headers,\n    timeout: finalConfig.timeout,\n  }).then(response => {\n    if(response.headers['content-length'] > response.request._response.length){\n      response.__incomplete = true;\n    }\nreturn response;\n\n});\n};\n`\n```\n. @srahulprdxn  The post relating the issue thing is #56 \n. ",
    "teb02": "Faced with the same issue (axios 0.12.0).\nI am working with the server that doesn't close connections properly and as a result - axios' Promise never resolves (even with timeout being set). I solved the problem wrapping axios request by own Promise and rejecting it by own timeout. \nI believe timeout should reject promise, counting in total request + response time. I mean if timeout is 5 secs, request took 3 secs and the response is receiving more than 2 secs - timeout should break this axios request. Is there any chance the behavior of axios timeout would be changed? :). Faced with the same issue (axios 0.12.0).\nI am working with the server that doesn't close connections properly and as a result - axios' Promise never resolves (even with timeout being set). I solved the problem wrapping axios request by own Promise and rejecting it by own timeout. \nI believe timeout should reject promise, counting in total request + response time. I mean if timeout is 5 secs, request took 3 secs and the response is receiving more than 2 secs - timeout should break this axios request. Is there any chance the behavior of axios timeout would be changed? :). ",
    "evenfrost": "Happens for me from time to time on different requests even if timeout is set.. ",
    "hiranya911": "We've been using the following trick in one of our projects:\nreq.on('socket', (socket) => {\n          socket.setTimeout(timeout);\n          socket.on('timeout', () => {\n            req.abort();\n            reject({....});\n          });\n        });\nCan a similar logic be implemented in Axios (perhaps with a new socketTimeout config parameter)? I believe this would fix the issue reported by the original poster. For more info: https://nodejs.org/api/net.html#net_socket_settimeout_timeout_callback. It looks like req.setTimeout() will also achieve the same result: https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback\nShall I put  a small PR together to implement this fix? This will enable wider usage of Axios in our server-side projects.. ",
    "theikkila": "This is for making the API consistent across all standardized HTTP-verbs. Options is sematically used ie. when fetching dynamic options for some endpoint.\nUsually the response can tell the allowed or required fields.\n. This is for making the API consistent across all standardized HTTP-verbs. Options is sematically used ie. when fetching dynamic options for some endpoint.\nUsually the response can tell the allowed or required fields.\n. OPTIONS are not just related to preflight requests but also for actually inspecting meta-data about some REST api endpoint. OPTIONS-shortcut is not for preflight requests but as I said  ie. to gather some options about the validation. So closing this PR for that is just wrong.\nAccording to RFC-2616 / 9.2 OPTIONS:\nhttps://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\n\nThe OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI. This method allows the client to determine the options and/or requirements associated with a resource, or the capabilities of a server, without implying a resource action or initiating a resource retrieval.\n\nReal world example is Django Rest Framework, it uses the OPTIONS-verb exacly for that purpose.\nAnother reason to merge this PR is to make the API of axios consistent. All other RFC-verbs are implemented as shortcuts except this.\nPlease reopen this PR @nickuraltsev  . OPTIONS are not just related to preflight requests but also for actually inspecting meta-data about some REST api endpoint. OPTIONS-shortcut is not for preflight requests but as I said  ie. to gather some options about the validation. So closing this PR for that is just wrong.\nAccording to RFC-2616 / 9.2 OPTIONS:\nhttps://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\n\nThe OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI. This method allows the client to determine the options and/or requirements associated with a resource, or the capabilities of a server, without implying a resource action or initiating a resource retrieval.\n\nReal world example is Django Rest Framework, it uses the OPTIONS-verb exacly for that purpose.\nAnother reason to merge this PR is to make the API of axios consistent. All other RFC-verbs are implemented as shortcuts except this.\nPlease reopen this PR @nickuraltsev  . Fixed reviewed problems. Also updated the documentation from instance methods to contain the new added alias.. Fixed reviewed problems. Also updated the documentation from instance methods to contain the new added alias.. Yeah, sure!. ",
    "ianks": "I would like to use this to test that my API is returning the correct CORS headers.\n. I would like to use this to test that my API is returning the correct CORS headers.\n. ",
    "jzzj": "No, It's not working. ",
    "tarun": "Could the browser be blocking it?. ",
    "0X1A": "@nickuraltsev I believe this is still an issue in browser. ",
    "rafaelsales": "Can we reopen this?. @emilyemorehouse ah, got it now. Thanks for the clarification!. ",
    "cedw032": "Apparently canary supports this, but I am not sure when it will become mainstream in browsers.. ",
    "puppeteer701": "Is there a way to disable encoding of the url?. Is there a way to disable encoding of the url?. ",
    "sqren": "I'm seeing the same issue when bundling axios with rollup. There's an issue for it here:\nhttps://github.com/rollup/rollup-plugin-commonjs/issues/110\nMight be due to protected keyword default or similar.\n. Removing this seems to fix the problem:\nmodule.exports.default = axios;\n. I'll only remove the \"default\" attribute. It's still exported.\n. It's probably better to wait for the PR to be merged. Seems like an issue with rollup rather than Axios.\n. ",
    "dhndeveloper": "I'll give it a shot but that sounds like it's removing axios which means the supeelogin client library won't work. \n. Oh! Gotcha. Report back soon. Thanks!\n. @sqren I removed the \"default\" attribute and now I got this error: \nbundle dev failed:  Unexpected token (70:0) in /Users/Dan/Documents/WebProjects/vacayerV5/node_modules/axios/lib/helpers/isURLSameOrigin.js\nI did it in the axios.js file \nI changed it from this at line 41-46:\n```\naxios.spread = require('./helpers/spread');\nmodule.exports = axios;\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n```\nto \n```\naxios.spread = require('./helpers/spread');\nmodule.exports = axios;\n// Allow use of default import syntax in TypeScript\nmodule.exports = axios;\n```\nI know it says module.exports twice so I actually just removed one of the lines and still got the same error.\nMay be that pr update will fix it....\n. ",
    "JamyDev": "There's a pr in the rollup-plugin-commonjs module which supposedly resolves this. But whatever works :)\n. The PR I mentioned doesn't resolve the issue completely. Looking into what else is going on now.\n. ",
    "magicspon": "FYI, I'm aware that this is a rollup issue, however as I've just come across the issue I thought i'd share my solution, which is probably not the best but it works.\nIn package.json i change main to \"main\": \"dist/axios.js\",\nnot ideal, but i've not managed to get anywhere with rollup.\nta. FYI, I'm aware that this is a rollup issue, however as I've just come across the issue I thought i'd share my solution, which is probably not the best but it works.\nIn package.json i change main to \"main\": \"dist/axios.js\",\nnot ideal, but i've not managed to get anywhere with rollup.\nta. ",
    "lukasjuhas": "Thanks @magicspon,\nI had similar issue, this seems to be working for me:\nimport axios from 'axios/dist/axios';. Hey @michaelryancaputo,\nI had similar problem, I solved it by doing:\nimport axios from 'axios/dist/axios';\nMaybe that helps!. ",
    "jcready": "Why not simply copy the Headers interface?\njs\nres.headers.get('set-cookie') // Returns \"cookie_key_1=yyy; Path=/\"\nres.headers.getAll('set-cookie') // Returns [ \"cookie_key_1=yyy; Path=/\", \"cookie_key_2=xxx; expires=Mon, 17-Oct-2016 17:16:25 GMT; httponly; Max-Age=1209600; Path=/\" ]\nYou could also maintain the existing API, but also provide the getAll method.\njs\nres.headers['set-cookie'] // Returns \"cookie_key_1=yyy; Path=/\"\nres.headers.getAll('set-cookie') // Returns [ \"cookie_key_1=yyy; Path=/\", \"cookie_key_2=xxx; expires=Mon, 17-Oct-2016 17:16:25 GMT; httponly; Max-Age=1209600; Path=/\" ]\n. I'm also running into the problem with follow-redirects. Setting maxRedirects: 0 fixes the problem, but is obviously not ideal.. It looks like the problem with follow-redirects was fixed in 1.1.0 but axios locks down the version to 1.0.0.. @rubennorte what about the issue with follow-redirects? Should that be opened as a separate PR?. @cggaurav it is supported.\njs\naxios.delete('/some/uri', { body: 'my delete body' }). @aricsangchat that's likely because you're using express which is not affiliated with axios at all. When express refers to params it is talking about dynamic values matched in the request path. When axios refers to params it is referring to query string parameters.\njs\n// Express\nrouter.get('/:foo/:bar', (req, res) => {\n  res.json({\n    query: req.query,\n    params: req.params\n  })\n})\njs\n// Axios\naxios.get('/some/uri', { params: { id: 1 } })\n.then((response) => console.log(response.data))\nThe output you'd get from running that would be:\njson\n{\n  \"query\": { \"id\": 1 },\n  \"params\": {\n    \"foo\": \"some\",\n    \"bar\": \"uri\"\n  }\n}. @duhseekoh \n```js\nconst extension_url = 'mycompany.auth0.com'\nconst access_token = 'abc123'\nconst user_id = 12345\nconst role_id = 67890\naxios.delete(https://${extension_url}/users/${role_id}/roles, {\n  headers: {\n    'Authorization': Bearer ${access_token},\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify([\n    user_id\n  ])\n})\n```. Done. The best you're going to do is something like this:\n```js\naxios.interceptors.response.use((response) => response, (error) => {\n  if (typeof error.response === 'undefined') {\n    alert('A network error occurred. '\n        + 'This could be a CORS issue or a dropped internet connection. '\n        + 'It is not possible for us to know.')\n  }\n  return Promise.reject(error)\n}). Again, this isn't an issue with axios. Browsers will not allow JS to see any response information when there is a CORS issue for security reasons. You can test this yourself with the following:\njs\nx = new XMLHttpRequest()\nx.onerror = (e) => console.log('THIS IS ALL THE INFO WE HAVE', e, x)\nx.open('GET', 'https://www.google.com')\nx.send()\nYou'll see that there is no helpful information. There is no way to distinguish between no internet connection, bad DNS, or CORS issues, etc. All you know is that there was a Network Error.. The Access-Control- headers are response headers that need to be sent by the server back to the client making the request. There's no point in setting them in your request headers.. Browsers always follow redirects for XHRs or fetch() requests. There is no library that could prevent the redirect. What you need to do on your server-side is distinguish between XHR requests and normal browser navigation requests and send either a 403 w/ JSON and specify the URL you want to redirect to in there or send a 302 if the request is being made by a browser navigation request. You can do this a couple different ways, but I'll list some here assuming you're using Express:\nCheck the req.xhr to respond based on its boolean value\njs\n// The user needs to login again\nif (req.xhr) {\n  res.status(403).json({\n    error: 'You must login to see this',\n    location: 'https://login.microsoftonline.com'\n  })\n} else {\n  res.redirect('https://login.microsoftonline.com')\n}\nUse res.format() to respond based on what the client accepts\nBy default axios sends an Accept header of application/json, text/plain, */* where as browser generally send the Accept header with text/html being listed first.\njs\n// The user needs to login again\nres.format({\n  json: () => res.status(403).json({\n    error: 'You must login to see this',\n    location: 'https://login.microsoftonline.com'\n  }),\n  html: () => res.redirect('https://login.microsoftonline.com')\n  default: () => res.redirect('https://login.microsoftonline.com')\n})\nThen on your client-side you would use something like this when using either of the above solutions:\njs\naxios.interceptors.response.use((response) => {\n  return response\n}, (error) => {\n  if (error.response && error.response.data && error.response.data.location) {\n    window.location = error.response.data.location\n  } else {\n    return Promise.reject(error)\n  }\n}). @nmaves the request library can only handle redirects when running inside node, not the browser. If you use something like browserify to use the request library inside the browser it will no longer be able to handle/respond to redirects.. ",
    "GSingh01": "@mzabriskie any suggestion on this?\n. @rubennorte Thanks.\n. ",
    "stevebauman": "Awesome thanks @AlahmadiQ8!. ",
    "scazzy": "I tried to search SO and closed issues but couldn't find a proper solution.\nI wanted to return response.data in first param, and error.status or error.response in second param, but it didn't work.\nThe error object doesn't have any response or status. Seems it consumes output from  response.data returned in the success/first param\naxios.interceptors.response.use(res => response.data, function (error) {\n    // Do something with response error\n    console.log(error.response);\n    return Promise.reject(error);\n  });. @rubennorte Was planning on a routing every api in my RN app from a single entry point (Controller). At this point, I can handle or update the Requests and Responses, add default params, and importantly - handle errors.\nAPI errors, Network errors, or any other - can be handled from a single place since the responses are generally structured. Plus, it prevents repeated error handling code wherever fetch is called.\nAPI response errors - Can be handled via interceptors\nBut unable to handle Network error via interceptors because interceptors are called before .then() and .catch() of a promise.\nI want to show error messages, alerts, dialogs etc from a single place, and prevent exception errors to crash the app. ",
    "AndreaMusumeci": "So.. i haven't errors in client console.. in server side service controls for content type which is \"wrong\" or at least different than the second way to invoke service\n. ",
    "GramParallelo": "Similar issue:\naxios({method: 'delete', url: '/delete', data: {id: id}) works but \naxios.delete('/delete', {id: id}) does not - It looks like req.body does not get populated\n(note: this is only for the delete method  and I'm in chrome) \n. @nickuraltsev They have the same signatures: axios.get(url[, config]) axios.delete(url[, config])\ndocs\nAn example in the docs would be helpful to show what config is.  It works if I just pass an object with the info I need.  But with delete as I mentioned it doesn't seem to work.\n. ",
    "uxlayouts": "Yeah an example in the docs would be nice. Using all @nickuraltsev example, but json-server deletes all records.. ",
    "artiship": "This is not work\naxios(url, {headers: {'Content-Type': 'application/json'}})\nadd data property as null then it works\naxios({\nmethod: 'delete'\nurl: `${url}`,\ndata: null,\nheaders: {'Content-Type': 'application/json'}\n}). ",
    "DanielRamosAcosta": "It's possible to get the progress callback in nodejs?\n. Nope, I ended using other library to manage large downloads \ud83d\ude22 . @maxhar I used request/request-promise. In this file you can see that I'm calling an onProgress callback with the percentage downloaded.. ",
    "victorpavlenko": "@DanielRamosAcosta You find answer?. ",
    "maxhar": "@DanielRamosAcosta what other library? would you please explain a bit.. because i am having the same issue with axios onDownloadProgress call \n. ",
    "omasback": "I think you can use validateStatus config option to always resolve when there is a server response. from the docs:\njavascript\n// `validateStatus` defines whether to resolve or reject the promise for a given\n// HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n// or `undefined`), the promise will be resolved; otherwise, the promise will be\n// rejected.\nvalidateStatus: function (status) {\n  return status >= 200 && status < 300; // default\n}\n. ",
    "accetone": "@v1rt I think you need to access response object that passed with error\njavascript\n.catch(function(error) {\n  console.log('>>> ERROR', error.response.data);\n}\n. ",
    "SamVerschueren": "Have a look at CORS and more specifically to the pre-flighted requests.\nBasically the OPTIONS request is used to check if you are allowed to perform the GET request from that domain and what headers can be used for that request. This is not axios specific.\n. Have a look at CORS and more specifically to the pre-flighted requests.\nBasically the OPTIONS request is used to check if you are allowed to perform the GET request from that domain and what headers can be used for that request. This is not axios specific.\n. ",
    "darkylmnx": "oh of course i know that, but as said above, i find it weird that jQuery's method for ajax doesn't send the option request and the thing is, this CORS issue has to be done on the server and the thing is, i don't have access to the server in my use case. I just wanted to know why axios behaviour differs from jQuery or other libs i have tried now.\n. ",
    "FemcTadej": "nickuraltsev: Useful answer. Thanks.... nickuraltsev: Useful answer. Thanks.... ",
    "chabgood": "if you do axios.post, why is it not sending it as a post request?. > crossdomain: true\nI had to enable the port '8080' on the backend CORS and it then worked.. ",
    "DCzajkowski": "@chabgood It is making a post request, but before that it makes a so-called preflight request, that is of type options. This is how browsers verify that the request is possible. As @nickuraltsev has said, you can make requests with application/x-www-form-urlencoded content type header. That way the browser won't make the options request.. ",
    "HaoH": "there is a cors module, just use it.. ",
    "nikitanalawade": "@DCzajkowski After changing the content type header there is no preflight request but still the post request is not sent.. You need to have the header which allows CORS to be set as 'allow'.\nAnd I would suggest you type the following command in RUN and then start\nyour application in this browser.\nchrome.exe --user-data-dir=\"C:/Chrome dev session\" --disable-web-security\nOn Mon, Oct 22, 2018 at 11:20 PM Bhaskar Nair notifications@github.com\nwrote:\n\nCan someone give a simple example of how to perform a POST request for\ncross domain url instead of linking to random articles on the web. I have\nchecked this\nhttps://stackoverflow.com/questions/45975135/access-control-origin-header-error-using-axios-in-react-web-throwing-error-in-ch\nand various other articles/questions to no avail. Just one simple example\nwould be really helpful.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/axios/axios/issues/475#issuecomment-432074852, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AeyC-YU9ZXksT_hlfl6TUy0T3vfXtLXrks5unosYgaJpZM4KSK-a\n.\n. Yes its not the problem with the code but with the browser.\nCertain browsers do not allow you to use CORS.\nTherefore,I gave you the command to type in run which will allow you to use\nCORS.\n\nOn Mon, Oct 22, 2018 at 11:39 PM Bhaskar Nair notifications@github.com\nwrote:\n\nI am curently using\naxios.post( \"http://localhost:5050/search\", { data: \"data\" }, { headers:\n{ \"Access-Control-Allow-Origin\": \"*\", } } ) .then(resp => (this.info =\nresp));\nin my VueJS method. But I require a permanent solution for allowing CORS\nas the API would be hosted elsewhere.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/axios/axios/issues/475#issuecomment-432078532, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AeyC-VMq0N8sbCgeYhQLcNtKvfR_XAzVks5uno9xgaJpZM4KSK-a\n.\n-- \nThanks and Regards,\n\nNikita Nalawade\nMasters in Computer Science-Student\nUniversity of North Carolina,Charlotte\n. Great!\nOn Tue, Oct 23, 2018 at 12:07 AM Bhaskar Nair notifications@github.com\nwrote:\n\nOkay, I ran\ngoogle-chrome --disable-web-security --user-data-dir\nand it worked as desired,\nThanks!\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/axios/axios/issues/475#issuecomment-432083581, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AeyC-btygE5kF8MuKJrWN7r1fItgsUQ-ks5unpYRgaJpZM4KSK-a\n.\n-- \nThanks and Regards,\n\nNikita Nalawade\nMasters in Computer Science-Student\nUniversity of North Carolina,Charlotte\n. ",
    "bhaskar-nair2": "Can someone give a simple example of how to perform a POST request for cross domain url instead of linking to random articles on the web. I have checked this and various other articles/questions to no avail. Just one simple example would be really helpful.\n. I am curently using \naxios.post(\n          \"http://localhost:5050/search\",\n          {\n           data: \"data\"\n          },\n          {\n            headers: {\n              \"Access-Control-Allow-Origin\": \"*\",\n            }\n          }\n        )\n        .then(resp => (this.info = resp));\nin my VueJS method. But I require a permanent solution for allowing CORS as the API would be hosted elsewhere.. Okay, I ran \ngoogle-chrome --disable-web-security --user-data-dir \nand it worked as desired, \nThanks!. ",
    "fannyhasbi": "\naxios uses the application/json format by default, while jQuery uses application/x-www-form-urlencoded. Cross site requests in the former format are always preflighted, while cross site requests in the latter format may be not preflighted. Please see this for details.\nHope this helps!\n\nThanks, my problem is solved when I change the Content-Type header in the axios request config.\njavascript\nheaders: {\n  'Content-Type': 'application/x-www-form-urlencoded'\n}. > axios uses the application/json format by default, while jQuery uses application/x-www-form-urlencoded. Cross site requests in the former format are always preflighted, while cross site requests in the latter format may be not preflighted. Please see this for details.\n\nHope this helps!\n\nThanks, my problem is solved when I change the Content-Type header in the axios request config.\njavascript\nheaders: {\n  'Content-Type': 'application/x-www-form-urlencoded'\n}. ",
    "mawrkus": "Hi guys,\nFirst of all @mzabriskie: thanks for the good work on Axios, it's great library!\nI've been facing the same issue and been able to make it work properly by:\n1. adding the proper \"Host\" and \"Proxy-Authorization\" fields to the headers and \n2. adding \"hostname\" to the options object in Axios http adapter\nI hope to find some time to submit a PR this week. I have the feeling it should be straightforward but I suspect it might have other implications.\n. Just submitted the PR, let me know how it looks like.\n. Hi @rubennorte ! Any progress on this? I have a similar use case.. Thanks for the merge!. Updated!\n. ",
    "peruukki": "Great, thanks @mawrkus!\n. According to the changelog, the fix was included in v0.15.3. Though it still wouldn't work in our environment and I couldn't figure out why in a reasonable time, so we kept using superagent instead. \ud83e\udd37\u200d\u2642\ufe0f\nI've always seen environment variables being set before/when the application starts, I'm not sure if it's possible to set them afterwards (and it doesn't sound like a good idea anyway).. ",
    "Ridermansb": "@nickuraltsev I edit the question ..\n. @nickuraltsev , i create a instance..\nvar events = axios.create({\n  baseURL: '/api/events'\n})\nbut you're right.\nI thought he would use baseUrl\nThnks\n. ",
    "iraklisg": "If this could be any help for somebody, I had the same error occurred when I mistakenly typed the relative /url/ without putting it inside the double quotes \" \" as I should (i.e. \"/url/\"). I fixed this and the error's gonne. ",
    "iVapor": "I meet this problem. Because I add parameter [method post] in axios.post function. Hope it helps someone.. ",
    "mividtim": "Why was this closed?  Actually, XHR does support chunked reading, through readyState 3 rather than 4.. https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState. You closed 505 as a duplicate of this issue, and then closed this issue.  Neither has been resolved.  This issue should be re-opened.. \ud83d\udc4d . @Khaledgarbaya How can I help this along?. @Khaledgarbaya How can I help this along?. What is your environment, @DeroSavage ?. Installing Node 9.3.0 now.... Running typeof process !== 'undefined' && process.env && typeof process.env.HOME === 'string' in Node 9.3.0 returns true.  Which index.js are you testing with?  node index.js from the root of this branch returns no output.  I'm not sure what the expected result is, or if this is what you are testing.. @DeroSavage I cannot reproduce your issue. Could you please provide some sample code that fails? I'd love to get this merged soon. Thanks!. @DeroSavage I cannot reproduce your issue. Could you please provide some sample code that fails? I'd love to get this merged soon. Thanks!. Thanks, @emilyemorehouse ! I just pushed up the change to use the same method as the file you referenced. It checks out in my environment, so I'm totally happy with this. Your diligence is appreciated. :-). Thanks, Emily! Any tips on how I can know when my two axios PRs are published in an axios release?\nhttps://github.com/axios/axios/pulls?q=is%3Apr+author%3Amividtim+is%3Aclosed. @emilyemorehouse  Oh, I forgot. My other PR was already released in 0.18.0. Please tag me when this is released! I'd much appreciate it!. PR: https://github.com/axios/axios/pull/1287. PR: https://github.com/axios/axios/pull/1287. @chenchengwork The PR was merged, in case you care enough to use the Github version of axios - or, I guess, wait for the next release.. @Khaledgarbaya Please review and merge.. @Khaledgarbaya Please review and merge.. @emilyemorehouse Sorry for being short. I just started using this project fairly recently, so I must have missed the call to action, or it just didn't reach me on channels I was watching. I'd love to pitch in any way I can. Could you lead me in the right direction?\nThanks for the merge!. Also consider https://github.com/axios/axios/issues/1286 please (a PR is available here: https://github.com/axios/axios/pull/1287). Any idea on time-frame?. @jcrben @zcei I've run into a similar situation in a separate, logging project before (global configuration that can be updated at runtime), and discovered this pattern, which may be useful to you: https://stackoverflow.com/questions/40271823/es6-emitting-events-from-static-methods\nBasically, new up a private static emitter = new EventEmitter() on the class, and all instances can then listen for it: AxiosInstance.emitter.on('configChanged') or something similar. The risk here, of course, is cleanup. If all instances have a reference to a static event emitter, and the emitter never loses scope, none of the instances will ever be cleaned up. It's a conundrum.. ",
    "rizkyramadhan": "any news about this ?\n. any news about this ?\n. ",
    "cgomezmendez": "What about react-native?. I'm getting the same error, I'm using it in a rect-native application.. ",
    "affanshahid": "Any news on this?. Getting this in the browser, compiled using CRA (webpack). ",
    "vedadeepta": "any progress on this . ",
    "croes": "Ran into the same error. The Promise in axios.d.ts (https://github.com/mzabriskie/axios/blob/master/axios.d.ts#L61) seems to be incompatible with the ES6 Promise defined in lib.es6.d.ts (https://github.com/Microsoft/TypeScript/blob/master/lib/lib.es6.d.ts#L1356).\n. ",
    "pmlamotte": "Ran into a similar error that is breaking my vscode setup. My hacky workaround right now was to copy the axios typings locally, remove the promise definition, and reference it through includes in .tsconfig. I then had to manually typecast the return values to make it happy.\naxios.post(\n    ...\n).then(response => response.data as User) as Promise<User>\nWhen I modified the node_modules/axios/axios.d.ts file directly to remove the Promise definition none of that typecasting was necessary since I'm already making use of es2015 promise definitions.\nI'm totally new to typescript so I'm not sure what the appropriate fix might be.\n. ",
    "DenisCarriere": "If you use async you'll be able to return a Promise<void> from that function, I don't think this issue has anything to do with Axios.\nI was able to run this function without any Typescript errors using the default axios.d.ts definition.\njavascript\nasync authenticate(credentials: AuthenticationCredentials): Promise<void> {\n  const response = await axios.post('backend://authentication')\n  this.processToken(response.data.token)\n}\n. Oh wait, that's not true, it's when installing axios with yarn the types value in the package.json is not being used.\nI just installed axios again using npm install axio and the typings get installed.\nhttps://github.com/Microsoft/TypeScript-Handbook/blob/master/pages/declaration%20files/Publishing.md\nRegardless, changing your types to index.d.ts will import the types by default without having to look into the package.json\nTypescript prefers bundling within the library, what you are currently doing.\n\n\nbundling with your npm package, or\npublishing to the @types organization on npm.\n\nIf you control the npm package you are publishing declarations for, then the first approach is favored. That way, your declarations and JavaScript always travel together.\n. \n",
    "mktange": "This is fixed with the following PR #588 . This is fixed with the following PR #588 . @dpoineau That issue is fixed with this PR: #588. @dpoineau That issue is fixed with this PR: #588. ",
    "gluons": "Same here.\nPromise from then is not compatible with native Promise.\nerror TS90010: Type 'Promise<void>' is not assignable to type 'Promise<void>'. Two different types with\n this name exist, but they are unrelated.\n  Types of property 'then' are incompatible.. ",
    "acheshkov": "+1. ",
    "shousper": "+1. ",
    "leemove": "It does't work!. ",
    "luciomartinez": "This worked for me:\nimport axios, {AxiosPromise} from 'axios';\n\nfunction get(): AxiosPromise {\n  return axios.get('http://my.domain/api');\n}.\n",
    "vissermc": "Code snippet:\nUncaught (in promise) TypeError: Cannot read property 'abort' of null(\u2026)onCanceled\nif (config.cancelToken) {\n          // Handle cancellation\n          config.cancelToken.promise.then(function onCanceled(cancel) {\n            request.abort(); <-- here\n            reject(cancel);\n            // Clean up request\n            request = null;\n          });\n        }\n. When calling this function twice, I get:\nError: Uncaught (in promise) TypeError: Cannot read property 'abort' of null(\u2026)onCanceled\nif (config.cancelToken) {\n          // Handle cancellation\n          config.cancelToken.promise.then(function onCanceled(cancel) {\n            request.abort(); <-- HERE\n            reject(cancel);\n            // Clean up request\n            request = null;\n          });\n        }\n. When calling this function twice, I get:\nError: Uncaught (in promise) TypeError: Cannot read property 'abort' of null(\u2026)onCanceled\nif (config.cancelToken) {\n          // Handle cancellation\n          config.cancelToken.promise.then(function onCanceled(cancel) {\n            request.abort(); <-- HERE\n            reject(cancel);\n            // Clean up request\n            request = null;\n          });\n        }\n. ",
    "TheCrow1213": "Can confirm. Looks like lines adapters/http.js:191 and adapters/http.js:159 require null checks. For a method that sets the request var to null in several non-edge-cases, I'm surprised the check isn't in there.\n. Thanks @nickuraltsev :)\n. ",
    "jadelmir": "I am getting an error while doing get request using axios \nTypeError: Cannot read property 'cancelToken' of undefined\nwhat is that and how could deal with it . ",
    "palakvasani": "Hello,\nI am facing same error as mentioned by jadelmir. Please let me know if anyone has fixed for it. I am using Laravel 5.3 and implements Vue.js to build a chat application.\n\ndispatchRequest.js?91bc:14 Uncaught (in promise) TypeError: Cannot read property 'cancelToken' of undefined\n    at throwIfCancellationRequested (eval at <anonymous> (app.js:192), <anonymous>:14:14)\n    at dispatchRequest (eval at <anonymous> (app.js:192), <anonymous>:26:3)\n`\nMy app.js file looks like this\n```\nrequire('./bootstrap');\nVue.component('chat-messages', require('./components/ChatMessages.vue'));\nVue.component('chat-form', require('./components/ChatForm.vue'));\nconst app = new Vue({\n    el: '#main',\ndata: {\n    messages: []\n},\n\ncreated() {\n    this.fetchMessages();\n    Echo.private('chat')\n    .listen('MessageSent', (e) => {\n        this.messages.push({\n          message: e.message.message,\n          user: e.user\n        });\n      });\n},\n\n\n\nmethods: {\n    fetchMessages() {\n        axios.get('/messages').then(response => {\n            this.messages = response.data;\n        });\n    },\n\n    addMessage(message) {\n        this.messages.push(message);\n\n        axios.post('/messages', message).then(response => {\n          console.log(response.data);\n        });\n    }\n}\n\n});\n```\nRegards,\nPalak. ",
    "botverse": "Not in Chrome or Firefox as far as I know\n. @adzm I would be happy to be able to use axios in the service worker knowing that I would not be able to cancel rather than not to be able to use it at all. So in that case is not very versatile.\nOne advantage of using axios in the service worker is to reuse the client code instead of duplicating the flow for all the requests.\n. ",
    "adzm": "Notably, fetch cannot be cancelled, though this will likely change when the cancelable promises spec becomes supported by major browsers and implemented in fetch. Until then XHR is still the most versatile API. \n. ",
    "couturecraigj": "One of the great aspects of SWs is that you can cache their responses... so not being able to cancel would seem to be less of an issue with SWs.  I think axios should definitely support fetch as I have read a handful of articles outlining a need to abandon XHR.  Maybe there could be a plugin so that you do not need to support the Promise library that gets implemented?  Just an idea.. I think with the new implementation of Abortable/Cancellable Promises implemented by Firefox we will start seeing a solution that can be implemented going forward.  https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort. But the abort controller is going through finalization.  There is a few\nrecent videos from people like Jake Archibald\nhttps://developers.google.com/web/updates/2017/09/abortable-fetch. This is\nnot the same as cancelable this aborts the sequence.  The is moving forward\napparently.\nOn Tue, Nov 14, 2017, 12:51 PM Steven Vachon notifications@github.com\nwrote:\n\nThe Cancellable Promises proposal was withdrawn:\nhttps://github.com/tc39/proposal-cancelable-promises\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/axios/axios/issues/484#issuecomment-344341215, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AF9vGCpdAhjoUAC1xZC43YbI21fb0Bhmks5s2dMcgaJpZM4KXAq2\n.\n. But the abort controller is going through finalization.  There is a few\nrecent videos from people like Jake Archibald\nhttps://developers.google.com/web/updates/2017/09/abortable-fetch. This is\nnot the same as cancelable this aborts the sequence.  The is moving forward\napparently.\n\nOn Tue, Nov 14, 2017, 12:51 PM Steven Vachon notifications@github.com\nwrote:\n\nThe Cancellable Promises proposal was withdrawn:\nhttps://github.com/tc39/proposal-cancelable-promises\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/axios/axios/issues/484#issuecomment-344341215, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AF9vGCpdAhjoUAC1xZC43YbI21fb0Bhmks5s2dMcgaJpZM4KXAq2\n.\n. \n",
    "stevenvachon": "It should be based on fetch as it will give access to the redirect history via silent or optional use of {redirect:'manual'}. A fetch shim can always be used when targeting older browsers.\nOnly IE11 and Safari < 10.1 are an issue: http://caniuse.com/#feat=fetch. The Cancellable Promises proposal was withdrawn: https://github.com/tc39/proposal-cancelable-promises. The Cancellable Promises proposal was withdrawn: https://github.com/tc39/proposal-cancelable-promises. You should mention gzip support in the readme.. acks--ee--oh-ss. Why is there no complete history, at least for Node.js? If only for controlled isomorphism, we might as well use fetch.. Node v0.10 is not supported by anyone now. You shouldn't be using it if you want to avoid getting hacked.. ",
    "robodude": "I just started learning service workers in order to build a progressive web application and was pretty disappointed when I realized I couldn't use axios in my service worker. I hope a solution to this is still being considered. . That's too bad. I really prefer axios but I've had to use https://github.com/SamDecrock/node-http-ntlm as an alternative in a recent project.\n. What error is being passed to catch handler?\nI haven't had this issue with axios so I suppose maybe something else is crashing (in your vm.$notify?). What error is being passed to catch handler?\nI haven't had this issue with axios so I suppose maybe something else is crashing (in your vm.$notify?). ",
    "jamesplease": "I'm working on adding support for aborting fetch to GitHub's fetch polyfill.\nPR: https://github.com/github/fetch/pull/592\nFeature detection code: https://gist.github.com/jamesplease/39546faa735779051bd00c3fe2a136f9\nI'm sharing this here in case it's helpful in resolving this issue :v:. :wave: Here is feature detection code for native abortable fetches, which could be useful:\nhttps://gist.github.com/jmeas/39546faa735779051bd00c3fe2a136f9\nIf I could be of any help implementing this, I'd be happy to help out. I'm not an axios user, and I'm not sure what the maintainers' plans are for the CancelToken API, but I'd be happy to help do this migration if any help is needed.. ",
    "Blfrg": "Please revisit this concept to implement a fetch adapter.\nI see some community work has been done here which could jump start the process.\n@jamesplease's work above on fetch polyfill has been merged if that helps squelch outstanding concerns.\nAxios is the suggested library everywhere you look (and for good reason!)\nfetch is needed for PWA+SW which is all the rage now.\nA compromise is highly desired by all, even if it's a choice between features (e.g. ability to cancel vs support offline SW).\nThank you for the essential module and consideration for the feature request.. Please revisit this concept to implement a fetch adapter.\nI see some community work has been done here which could jump start the process.\n@jamesplease's work above on fetch polyfill has been merged if that helps squelch outstanding concerns.\nAxios is the suggested library everywhere you look (and for good reason!)\nfetch is needed for PWA+SW which is all the rage now.\nA compromise is highly desired by all, even if it's a choice between features (e.g. ability to cancel vs support offline SW).\nThank you for the essential module and consideration for the feature request.. ",
    "markwoon": "Here's the error I get:\nsystem.js:4 Uncaught (in promise) Error: (SystemJS) XHR error (404 Not Found) loading http://localhost/js/undefined.js\n    Error: XHR error (404 Not Found) loading http://localhost/js/undefined.js\n    Error loading http://localhost/js/undefined.js as \"undefined\" from http://localhost/js/vendor/axios.js\nYou can see it in action here: http://codepen.io/anon/pen/BLPPNJ?editors=1111\nIf you revert to 0.14.0 you'll get the alert.\n. Here's the error I get:\nsystem.js:4 Uncaught (in promise) Error: (SystemJS) XHR error (404 Not Found) loading http://localhost/js/undefined.js\n    Error: XHR error (404 Not Found) loading http://localhost/js/undefined.js\n    Error loading http://localhost/js/undefined.js as \"undefined\" from http://localhost/js/vendor/axios.js\nYou can see it in action here: http://codepen.io/anon/pen/BLPPNJ?editors=1111\nIf you revert to 0.14.0 you'll get the alert.\n. ",
    "webhacking": "In Internet Explorer you have to do the following setup, because EDGE will take those setting from IE:\n\nInternet Option\nSecurity tab\nLocal intranet click \"sites\"\nAdvanced\nAdd here your domain or localhost\nClose IE\nOpen EDGE and test your domain or localhost now\n\nOr another ways. you should be set to the same orgin your request end point. ",
    "urmilparikh": "Never mind, it was an older version.\n. ",
    "michaelgmcd": "Yes, can happen by accident if setting baseUrl dynamically. Will make a PR.\n. ",
    "Jarlotee": "@mzabriskie found a few bugs while prototyping with your library\n. ",
    "kaze13": "Seems like the latest npm package does not contain this fix\n. ",
    "slavovojacek": "@nickuraltsev sorry my bad, please see https://github.com/mzabriskie/axios/pull/508.\n. Correct\nOn Mon, 31 Oct 2016 at 2:11 pm, Ibragimov Ruslan notifications@github.com\nwrote:\n\nSo looks like #508 https://github.com/mzabriskie/axios/pull/508\ncontains changes from this PR, and this PR should be closed?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/mzabriskie/axios/pull/496#issuecomment-257303642, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AEcVhd9CmF8-9Vb_KVLQAghsad6YZaBiks5q5fcAgaJpZM4KdVDG\n.\n\nSent on the move.\n\n\nSlavomir Vojacek\nM: +44 (0) 7894 846 483\nS: slavomir.vojacek\nW: slavo.london\n. @nickuraltsev No worries. Suppose an Rx stream like below:\n``` typescript\nclass ConstructWithName {\n    name: string;\nconstructor(name: string) {\n    this.name = name.trim();\n}\n\n}\nISomeSuccessResponse {\n    name: string;\n}\nISomeErrorResponse {\n    message: string;\n    error: boolean;\n}\nreturn HttpProvider\n    .request(ApiOperation.GetSomeResponse)\n    .retry(3)\n    .map((response: AxiosResponse) => {\n        return new ConstructWithName(response.data.name);\n    })\n    .catch((errorResponse: AxiosError) => {\n        return Observable.throw(new Http.BadRequestError(errorResponse.data.message));\n    });\n```\nI think the above would be much nicer, easier, and compact compared to something like:\n``` typescript\n    ...\n    .map((response: AxiosResponse) => {\n        const data = response.data as ISomeSuccessResponse;\n    return new ConstructWithName(data.name);\n})\n.catch((errorResponse: AxiosError) => {\n    const error = errorResponse.data as ISomeErrorResponse;\n\n    return Observable.throw(new Http.BadRequestError(error.message));\n});\n...\n\n```\nDoes it make sense or is there something I am missing?\n. @IRus @nickuraltsev any news on the above?. @IRus There should be no conflicts now and the tests should pass, any ETA on getting this in?. ",
    "hnordt": "@nickuraltsev in React, when I omit a property, it's undefined, and I'm using this.props.headers to pass headers:\nhttps://github.com/smalldots/smalldots/blob/master/src/Fetch.js#L52\n. ",
    "montogeek": "@nickuraltsev Should axios use default headers when undefined is passed as headers or should it throw an error?. @rshmiraf Is the issue fixed for you?. @shai32 Could you please publish a code snipper or repository showing the error and nock, axios, node versions? Thanks. @lzl124631x What is your use case?. @betalb Please submit the PR, What you think about using a Map?. @JustinBeckwith A PR would be amazing!. @cloudbluedigital @NotJustClarkKent solution worked for you?. @JustinBeckwith Could you please confirm that it is fixed by using latest master from nock?. You can do it on mounted method or any method, for example: https://medium.com/js-dojo/async-in-vuejs-part-2-45e81c836e38. Please provide a reproducible code. @fractalf Could you please provide a reproducible case?. Your server does not accept cross domain requests, you have to activate it .\nMore info https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS. Why webpack-block is used?. I am worried that new contributors would need to learn an abstraction to make a new change, on the hand, since this is related on how the library is build and distributed I don't think it would change a lot.\nCool abstraction!. What do you think about using Jest?. How much this change decreased or increased the bundle size?. ",
    "francoisromain": "thanks\n. thanks\n. ",
    "Ivykp": "@nickuraltsev of course, that sounds great. I will work on that :+1: \n. @rightaway my bad, i had been busy with the work. However i will retake it this week and send the PR. Meanwhile you can set responseType: 'arraybuffer' and convert it to the format you need.. ",
    "rightaway": "Any progress on this? In the meantime is there any workaround so I can get the body back in an encoding other than utf-8? For example return a Buffer so I can convert to another string encoding myself?. Is that the error message you'd expect to see if if were at HTTP not HTTPS server? Because I tried proxies with the https field set to true.. ",
    "neverendingqs": "Looks like there was some progress at https://github.com/axios/axios/pull/869, but it's also stalled a bit.. ",
    "johntron": "@neverendingqs yep - #869 just needs approval.. @neverendingqs yep - #869 just needs approval.. @nickuraltsev @rubennorte thanks for maintaining this project. Would you mind taking a look at this PR? It's a simple, backwards-compatible improvement for server-side requests - even comes with updated README :D. Thanks so much @rubennorte - I'll make those changes when I get home.. Updated. I agree, but that can be done in a future PR based on the work I've done\nhere. No reason we can't support both methods.\nOn Thu, Oct 5, 2017, 18:51 Tan Nhu notifications@github.com wrote:\n\nI think it would be better to extract charset from response header\ncontent-type. This way you don't have to manually pass the charset per\nrequest.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/axios/axios/pull/869#issuecomment-334622767, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAIDeZ8yLgTrdZNJcpc3T1npR5aNmg1fks5spWuXgaJpZM4NKcyk\n.\n. I agree, but that can be done in a future PR based on the work I've done\nhere. No reason we can't support both methods.\n\nOn Thu, Oct 5, 2017, 18:51 Tan Nhu notifications@github.com wrote:\n\nI think it would be better to extract charset from response header\ncontent-type. This way you don't have to manually pass the charset per\nrequest.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/axios/axios/pull/869#issuecomment-334622767, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAIDeZ8yLgTrdZNJcpc3T1npR5aNmg1fks5spWuXgaJpZM4NKcyk\n.\n. @rubennorte I made those changes in August of last year. Can this be merged yet?. @rubennorte I made those changes in August of last year. Can this be merged yet?. @lepture this PR has already been merged, but feel free to submit another PR. This one served my needs, and I would not like the added dependency for other encodings - I've never worked with an API that returned anything other than UTF-8 or latin-1.. @lepture this PR has already been merged, but feel free to submit another PR. This one served my needs, and I would not like the added dependency for other encodings - I've never worked with an API that returned anything other than UTF-8 or latin-1.. Changed. Changed. \n",
    "nkovalenko93": "Sorry, I think it's not axios issue. It's browser behavior.\n. ",
    "rebotak": "I think I got this too, how do you solve this?. ",
    "nkovalenko-sc": "I've disabled caching for API that returns Content-Range header. If you do the same request, but some header is different, you still get 304 status, because response body hasn't been changed.. ",
    "redheadedstep": "Can I ask what is the correct way to pass data to axios.post?  Since the documentation is not correct, having a fix here may help out in the future.\naxios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  });\ndoes not work since it serializes the object to JSON and it all comes through as a single parameter.\n. ",
    "LostKobrakai": "@redheadedstep Read this part: https://github.com/mzabriskie/axios#using-applicationx-www-form-urlencoded-format. ",
    "ArturGrigio": "with jQuery, you can do this\n````\nvar data = {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n}\naxios.post('API?'+jQuery.param(data)). ",
    "gtamborero": "Thanks LostKobrakai!\nBy default axios sends JSON data and if you receive POST data on PHP you need to configurate the header as urlencoded:\n```\nvar config = {\nheaders: {\n   'Content-Type': 'application/x-www-form-urlencoded',\n}\n};\naxios.post('URL', { data1: this.data1, data2: this.data2 }, config)\n        .then((response) => { ... })\n```. ",
    "edoofx": "@ArturGrigio then why need axios if using jquery ? weird.. ",
    "linkerx07": "For method post use:\nconst params = new URLSearchParams();\nparams.append('param1', 'value1');\nparams.append('param2', 'value2');\naxios.post('/foo', params);\nfor me in the browser is work! . ",
    "hienduyph": "I got the same error and i realized that:\n- In client-side, when get a short-URI like /api/posts, axios known what host is based on the base url in browser.\n- But in server side rendering, it doesn't known.\nSo, you must provide full-URI for axios like: http://localhost/api/posts\nHope this help !\n. ",
    "IRus": "@mzabriskie Hi, when this changes will be merged? PR looks good for me.\n.  @slavomirvojacek hi! i'm not maintainer, but this PR has conflict, so please fix this is first place. Also i found that add generic type to AxiosPromise will be useful.. @dpoineau i think changing Promise declaration out of this PR scope\n. And since TypeScript can merge interfaces i doesn't see any problems here http://www.typescriptlang.org/docs/handbook/declaration-merging.html. @morlay why? export default works well for me. @mzabriskie, @rubennorte, @nickuraltsev Hi, just want to know is there any problems with this PR. ",
    "Jamesking56": "@slavovojacek still showing conflicts with index.d.ts. Please resolve all conflicts so we can review accordingly.. Agreed @JustinBeckwith, it can't hurt to list both.. @LukasDrgon Thank you, I think its best if you create a new issue regarding the SRI usage for both jsDelivr and Unpkg. Maybe lock them to a specific version of the package also?. Can you please put that in a code block instead of inline: https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown. If we're replacing with rollup, why do we still need webpack as a dependency?. By constraining to the version, its something else that has to be updated on every release, do we need this?. ",
    "tangshuang": "Hi @nickuraltsev , I am facing the same problem now. My case:\naxios.defaults.headers.common['X-Request-Id'] = window.REQUEST_ID\naxios.delete(url)\nX-Request-Id is not sent when using delete method.\nCould you have a look?. Well, I found the reason.\nDELETE method request should not be sent with non-emtpy body. When I sent a delete request I set the request body to be null, which contains contect in fact. After I remove the data option in config, it works correctly.\nThanks @ahlusar1989 .. @moeinrahimi Are you sure? You mean you can post data with DELETE method? \nHave you ever tried adding a new header option, like X-Request-Id.. ",
    "ahlusar1989": "@tangshuang Do you mind demonstrating the full steps to reproduce this. . ",
    "dnieh": "You could in theory use the axios.delete method correctly and pass in data with the following:\n```\nconst globalAxiosConfig = {\n  headers: {\n    'X-CSRFToken': 'add csrf token here',\n  },\n}\nasync function axiosDelete(url, data = {}) {\n  const axiosConfig = {\n    ...globalAxiosConfig,\n    ...data,\n  }\n  return await axios.delete(url, axiosConfig)\n}\n```\nHowever, even with data present, Axios seems to ignore it in the request which makes sense since passing back data on a HTTP DELETE request was not defined in the HTTP 1.1 spec: https://tools.ietf.org/html/draft-ietf-httpbis-p2-semantics-19#section-6.7\n\nBodies on DELETE requests have no defined semantics.  Note that sending a body on a DELETE request might cause some existing implementations to reject the request. \n",
    "moeinrahimi": "in my case doing delete with axios in below method doesn't send header.\njavascript\n       let {data} = await axios.delete(baseUrl+`/likepost`,\n       {\n         postId:postId\n       },{headers:{Cookie:`sid=${cookie}`}})\nbut this way it's working correctly\njavascript\n  let {data} = await axios({\n        url:baseUrl+`/likepost`,\n        method:'delete',\n        data : {postId},\n        headers:{Cookie:`sid=${cookie}`}\n      }). ",
    "lovanwubing": "I would like to have this feature. In our website we'd like to handle all of response with status 401 to popup a login dialog. I really don't want to handle 401 in all of those axios instance, it looks very stupid.  @nickuraltsev \n. I would like to have this feature. In our website we'd like to handle all of response with status 401 to popup a login dialog. I really don't want to handle 401 in all of those axios instance, it looks very stupid.  @nickuraltsev \n. ",
    "hyper315": "@nickuraltsev This still remain the question, each instance would have the duplicated interceptor config code line, still look stupid, global interceptor is useful on this way.. ",
    "harinair": "@nickuraltsev  @hyper315 \n+1\nA common example is adding request correlation header or if I have to add a request time header. I need to add an interceptor that will intercept and put a Header named CorrelationId with UUID for every request. This helps services trace every call I am making across different servers. Currently, I have to add this interceptor in every instance.. ",
    "suminksudhi": "@lmammino \nHi,\nwhat is the \"client\" in the above snippet \nIs it the instance of axios.create or something I may have missed?. ",
    "psychosis448": "@suminksudhi that is your axios instance. @velopert I got the same question.\n@mshibl thank you for sharing! <3. I updated the dependencies on my project last week & I was able to set the withCredentials option within the axios instance. Unfortunately I won\u2019t be able to check the axios Version til next Friday.\n\nOn 10. Oct 2018, at 04:30, mdavid88 notifications@github.com wrote:\nAnything on this?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @waspar @veselinnguyen \nIt works for me on axios 0.18.0!\n\nPart of my HTTP setting:\n```javascript\nimport axios from 'axios'\nconst HTTP = axios.create({\n  withCredentials: true\n})\nexport default HTTP\n```. ",
    "okovalov": "\nTo be more specific, if I have the following interceptor:\njs\nconst instance = axios.create()\ninstance.interceptors.response.use(\n  response => response.data,\n  err => {\n    const error = new Error(err.response.statusText)\n    error.statusCode = err.response.status\n    error.data = err.response.data\n    return Promise.reject(error)\n  }\n)\nThis is how I test it with jest:\n```js\nexpect(client.interceptors.response.handlers[0].fulfilled({data: 'foo'})).toBe('foo')\nexpect(client.interceptors.response.handlers[0].rejected({\n  response: {\n    statusText: 'NotFound',\n    status: 404,\n    data: {message: 'Page not found'}\n  }\n})).rejects.toMatchObject({\n  message: 'NotFound',\n  statusCode: 404,\n  data: {message: 'Page not found'}\n})\n```\nI hope this is still useful, even if the original issue is dated almost a year ago :)\n\nIt looks like I am getting there. My only problem is that handlers are empty.. Maybe because I use mocking?.. but I had to use it otherwise I could not deal with that annoying 'axios.create() undefined error!' \nnot sure what I am doing wrong..\nhere is my mocks/axios.js\n```js\nconst mockAxios = jest.genMockFromModule('axios')\n// this is the key to fix the axios.create() undefined error!\nmockAxios.create = jest.fn(  () => mockAxios)\nexport default mockAxios\n```\nhere is the Api (axios instance I use)\n```js\nimport axios from 'axios'\nimport { API_ROOT } from '../configs/api'\nconst Api = axios.create({\n  baseURL: API_ROOT,\n  headers: { 'Content-Type': 'application/json' }\n})\nApi.interceptors.request.use(\n  function(config) {\n    / For the future authentication routine /\n    const token = localStorage.getItem('user')\nif (token) config.headers.Authorization = `Bearer ${token}`\nconsole.log('req fullfilled config', config)\n\nreturn config\n\n},\n  function(error) {\n    console.log('req rejected error', error)\nreturn Promise.reject(error)\n\n}\n)\nApi.interceptors.response.use(\n  (response) => {\n    console.log('response ok ')\nreturn response\n\n},\n  (error) => {\n    console.log('response rejected error', error)\nreturn Promise.reject(error.response)\n\n})\nexport default Api\n```\nand here is the test\n```js\nimport Api from  '../../services/api'\nimport * as Methods from \"../../constants/methods\"\nimport mockAxios from 'axios'\ntest('calls axios() with endpoint, method and body', async () => {\n  mockAxios.get.mockImplementationOnce(async () =>\n    Promise.resolve( dataToReturn ),\n  )\nconst dada = await Api.get(Methods.GET,'comments', {})\nexpect(dada).toEqual( dataToReturn) // it works fine obviously\nconsole.log('Api.interceptors.request', Api.interceptors.request) // here I see that handlers are empty\nexpect(mockAxios.interceptors.request.handlers[0].fulfilled({data: 'foo'})).toBe('foo') // this one obviously fails because handlers are empty...\n})\n```\nplease advise what I am missing?\nthank you\n. @rs-8 unfortunately, no. ",
    "rs-8": "\n\nTo be more specific, if I have the following interceptor:\njs\nconst instance = axios.create()\ninstance.interceptors.response.use(\n  response => response.data,\n  err => {\n    const error = new Error(err.response.statusText)\n    error.statusCode = err.response.status\n    error.data = err.response.data\n    return Promise.reject(error)\n  }\n)\nThis is how I test it with jest:\n```js\nexpect(client.interceptors.response.handlers[0].fulfilled({data: 'foo'})).toBe('foo')\nexpect(client.interceptors.response.handlers[0].rejected({\n  response: {\n    statusText: 'NotFound',\n    status: 404,\n    data: {message: 'Page not found'}\n  }\n})).rejects.toMatchObject({\n  message: 'NotFound',\n  statusCode: 404,\n  data: {message: 'Page not found'}\n})\n```\nI hope this is still useful, even if the original issue is dated almost a year ago :)\n\nIt looks like I am getting there. My only problem is that handlers are empty.. Maybe because I use mocking?.. but I had to use it otherwise I could not deal with that annoying 'axios.create() undefined error!'\nnot sure what I am doing wrong..\nhere is my mocks/axios.js\n```js\nconst mockAxios = jest.genMockFromModule('axios')\n// this is the key to fix the axios.create() undefined error!\nmockAxios.create = jest.fn(  () => mockAxios)\nexport default mockAxios\n```\nhere is the Api (axios instance I use)\n```js\nimport axios from 'axios'\nimport { API_ROOT } from '../configs/api'\nconst Api = axios.create({\n  baseURL: API_ROOT,\n  headers: { 'Content-Type': 'application/json' }\n})\nApi.interceptors.request.use(\n  function(config) {\n    / For the future authentication routine /\n    const token = localStorage.getItem('user')\nif (token) config.headers.Authorization = `Bearer ${token}`\nconsole.log('req fullfilled config', config)\n\nreturn config\n\n},\n  function(error) {\n    console.log('req rejected error', error)\nreturn Promise.reject(error)\n\n}\n)\nApi.interceptors.response.use(\n  (response) => {\n    console.log('response ok ')\nreturn response\n\n},\n  (error) => {\n    console.log('response rejected error', error)\nreturn Promise.reject(error.response)\n\n})\nexport default Api\n```\nand here is the test\n```js\nimport Api from  '../../services/api'\nimport * as Methods from \"../../constants/methods\"\nimport mockAxios from 'axios'\ntest('calls axios() with endpoint, method and body', async () => {\n  mockAxios.get.mockImplementationOnce(async () =>\n    Promise.resolve( dataToReturn ),\n  )\nconst dada = await Api.get(Methods.GET,'comments', {})\nexpect(dada).toEqual( dataToReturn) // it works fine obviously\nconsole.log('Api.interceptors.request', Api.interceptors.request) // here I see that handlers are empty\nexpect(mockAxios.interceptors.request.handlers[0].fulfilled({data: 'foo'})).toBe('foo') // this one obviously fails because handlers are empty...\n})\n```\nplease advise what I am missing?\nthank you\n\nDid you find a solution?. > > To be more specific, if I have the following interceptor:\n\n\njs\nconst instance = axios.create()\ninstance.interceptors.response.use(\n  response => response.data,\n  err => {\n    const error = new Error(err.response.statusText)\n    error.statusCode = err.response.status\n    error.data = err.response.data\n    return Promise.reject(error)\n  }\n)\nThis is how I test it with jest:\n```js\nexpect(client.interceptors.response.handlers[0].fulfilled({data: 'foo'})).toBe('foo')\nexpect(client.interceptors.response.handlers[0].rejected({\n  response: {\n    statusText: 'NotFound',\n    status: 404,\n    data: {message: 'Page not found'}\n  }\n})).rejects.toMatchObject({\n  message: 'NotFound',\n  statusCode: 404,\n  data: {message: 'Page not found'}\n})\n```\nI hope this is still useful, even if the original issue is dated almost a year ago :)\n\nIt looks like I am getting there. My only problem is that handlers are empty.. Maybe because I use mocking?.. but I had to use it otherwise I could not deal with that annoying 'axios.create() undefined error!'\nnot sure what I am doing wrong..\nhere is my mocks/axios.js\n```js\nconst mockAxios = jest.genMockFromModule('axios')\n// this is the key to fix the axios.create() undefined error!\nmockAxios.create = jest.fn(  () => mockAxios)\nexport default mockAxios\n```\nhere is the Api (axios instance I use)\n```js\nimport axios from 'axios'\nimport { API_ROOT } from '../configs/api'\nconst Api = axios.create({\n  baseURL: API_ROOT,\n  headers: { 'Content-Type': 'application/json' }\n})\nApi.interceptors.request.use(\n  function(config) {\n    / For the future authentication routine /\n    const token = localStorage.getItem('user')\nif (token) config.headers.Authorization = `Bearer ${token}`\nconsole.log('req fullfilled config', config)\n\nreturn config\n\n},\n  function(error) {\n    console.log('req rejected error', error)\nreturn Promise.reject(error)\n\n}\n)\nApi.interceptors.response.use(\n  (response) => {\n    console.log('response ok ')\nreturn response\n\n},\n  (error) => {\n    console.log('response rejected error', error)\nreturn Promise.reject(error.response)\n\n})\nexport default Api\n```\nand here is the test\n```js\nimport Api from  '../../services/api'\nimport * as Methods from \"../../constants/methods\"\nimport mockAxios from 'axios'\ntest('calls axios() with endpoint, method and body', async () => {\n  mockAxios.get.mockImplementationOnce(async () =>\n    Promise.resolve( dataToReturn ),\n  )\nconst dada = await Api.get(Methods.GET,'comments', {})\nexpect(dada).toEqual( dataToReturn) // it works fine obviously\nconsole.log('Api.interceptors.request', Api.interceptors.request) // here I see that handlers are empty\nexpect(mockAxios.interceptors.request.handlers[0].fulfilled({data: 'foo'})).toBe('foo') // this one obviously fails because handlers are empty...\n})\n```\nplease advise what I am missing?\nthank you\n\nDid you find a solution?. ",
    "runebaas": "This was our solution, it works like a charm\njavascript\nreturn axios.get('http://example.com/image.png', { responseType: 'arraybuffer' })\n      .then((response) => {\n        let image = btoa(\n          new Uint8Array(response.data)\n            .reduce((data, byte) => data + String.fromCharCode(byte), '')\n        );\n        return `data:${response.headers['content-type'].toLowerCase()};base64,${image}`;\n      });\nThe reason this won't work is that axios puts everything in a json object. Since you cannot put binary in a json object it converts it to a string which breaks the binary.. This was our solution, it works like a charm\njavascript\nreturn axios.get('http://example.com/image.png', { responseType: 'arraybuffer' })\n      .then((response) => {\n        let image = btoa(\n          new Uint8Array(response.data)\n            .reduce((data, byte) => data + String.fromCharCode(byte), '')\n        );\n        return `data:${response.headers['content-type'].toLowerCase()};base64,${image}`;\n      });\nThe reason this won't work is that axios puts everything in a json object. Since you cannot put binary in a json object it converts it to a string which breaks the binary.. ",
    "b4dnewz": "if you are on node like me and you are using v >= 6, there was a change and you should use Buffer.from or similar.\njs\nfunction getBase64(url) {\n  return axios\n    .get(url, {\n      responseType: 'arraybuffer'\n    })\n    .then(response => Buffer.from(response.data, 'binary').toString('base64'))\n}\nReference safe-buffer\nnew Buffer()' was deprecated since v6. Use 'Buffer.alloc()' or 'Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead\n. what is the fix for that or at least how to turn off this validation?. ",
    "inyee786": "this work for me\nfunction getImage(imageUrl) {\nvar options = {\n    url: `${imageUrl}`,\n    encoding: \"binary\"\n};\n  return new Promise(function (resolve, reject) {\n    request.get(options, function (err, resp, body) {\n        if (err) {\n            reject(err);\n        } else {\n            var prefix = \"data:\" + resp.headers[\"content-type\"] + \";base64,\";\n            var img = new Buffer(body.toString(), \"binary\").toString(\"base64\");\n            //  var img = new Buffer.from(body.toString(), \"binary\").toString(\"base64\");\n            var dataUri = prefix + img;\n            resolve(dataUri);\n        }\n    })\n})\n}\n`` \nfunction getImage(imageUrl) {\nvar options = {\n    url:${imageUrl}`,\n    encoding: \"binary\"\n};\nrequest.get(options, function (err, resp, body) {\n    if (err) {\n        reject(err);\n    } else {\n        var prefix = \"data:\" + resp.headers[\"content-type\"] + \";base64,\";\n        var img = new Buffer(body.toString(), \"binary\").toString(\"base64\");\n       //  var img = new Buffer.from(body.toString(), \"binary\").toString(\"base64\");\n        var dataUri = prefix + img;\n    }\n})\n\n}\n```. ",
    "XAHTEP26": "javascript\nreturn axios.get('http://site.com/img.png', { responseType: 'arraybuffer' })\n  .then(response => `data:${response.headers['content-type']};base64,${btoa(String.fromCharCode(...new Uint8Array(response.data)))}`);. javascript\nreturn axios.get('http://site.com/img.png', { responseType: 'arraybuffer' })\n  .then(response => `data:${response.headers['content-type']};base64,${btoa(String.fromCharCode(...new Uint8Array(response.data)))}`);. ",
    "voidpls": "\njs\nreturn axios.get('http://site.com/img.png', { responseType: 'arraybuffer' })\n  .then(response => `data:${response.headers['content-type']};base64,${btoa(String.fromCharCode(...new Uint8Array(response.data)))}`);\n\nNode Version: \njs\n    return axios.get(url, { responseType: 'arraybuffer' }).then(res => {\n      ;`data:${res.headers['content-type']};base64,${Buffer.from(String.fromCharCode(...new Uint8Array(res.data)), 'binary')\n        .toString('base64')}`\n    }). ",
    "DjebbZ": "Wonderful. Thank you !\n. Ok, imagine something like this. Quickly thrown-out markdown, feel free to correct me if I'm wrong. I wrote it so it's almost copy-pastable (formatting, wording etc.)\n\nFirst, a rewrite of Handling Errors section\n\nHandling Errors\njavascript\naxios.get('/user/12345')\n  .catch(function (error) {\n    // handle error here\n  });\nThere are 2 cases to take into account when handling errors : we got a response and we didn't get a response.\nIn all cases, the error has the following information :\njavascript\n{\n  // `config` is the config that was provided to `axios` for the request\n  config: {}\n} \nWhen we got a response, but the server responded with a status code that falls out of the range of 2xx\n`` javascript\n{\n  // every additional information is under the response property\n  response: {\n    //data` is the response that was provided by the server\n    data: {},\n// `status` is the HTTP status code from the server response\nstatus: 500, // could be any number that doesn't pass the `validateStatus` predicate (by default 2xx), see below\n\n// `headers` the headers that the server responded with\nheaders: {},\n\n}\n}\n````\nIn case we got no response, there will be no response property, instead the following :\njavascript\n{\n  // Something happened in setting up the request that triggered an Error\n  message: '',\n}\nYou can define a custom HTTP status code error range using the validateStatus config option.\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Reject only if the status code is greater than or equal to 500\n  }\n})\nExample error handling that demonstrates all cases :\njavascript\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made, but the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    // You can always access the request config\n    console.log(error.config);\n  });\n\nSecond, explaining better the error cases in interceptors : the following won't be a rewrite proposal but inline questions because it's not clear to me at all. I'm quoting part of the interceptors section.\n\n``\n// Add a request interceptor\naxios.interceptors.request.use(function (config) {\n    // Do something before request is sent\n   // QUESTION : can config be mutated ?\n    return config;\n  }, function (error) {\n    // Do something with request error\n    // QUESTION : What does request error means ? In which cases it may happen ? Is it the same thanHandling Errorsabove ?\n    // QUESTION : What is the schema oferrorhere ?\n    // QUESTION : Why Promise.reject ? Why not simplythrow` ?\n    return Promise.reject(error);\n  });\n// Add a response interceptor\naxios.interceptors.response.use(function (response) {\n    // Do something with response data\n    // QUESTION : Can I mutate response here ?\n    // QUESTION : If I mutate config in the request interceptor, do I get the mutated config ?\n    return response;\n  }, function (error) {\n    // Do something with response error\n    // QUESTION : What does request error means ? In which case it may happen ? Is it the same than Handling Errors above ?\n    // QUESTION : What is the schema of error here ?\n    // QUESTION : Why Promise.reject ? Why not simply throw ?\n    return Promise.reject(error);\n  });\n```\nI hope I made myself clearer and that it will lead to some changes to the docs. I know that there are some repetitions but it's because some things are still unclear to me, so better make everything crystal clear.\nKeep up the good work !. BTW, I would also move the Handling errors section just after the Response Schema. It's weird to talk about errors after interceptors, since you must handle errors in interceptors but in normal requests too.. By the way, I know there are already issues about the config object, I did read them all.\n. Typo in my example. I tried just before posting to be sure and response.config.__requestId was undefined.\n. \ud83d\udc4d \n. ",
    "peacechen": "This is an old thread but Google returns it as one of the top results for axios cancelSource.  Here's sample code that cancels the request after 10 seconds without response:\n```\nimport { CancelToken } from 'axios';\nthis.cancelSource = CancelToken.source();\nlet watchdogTimer = setTimeout(() => {\n    this.cancelSource.cancel(\"Operation timed out\")\n}, 10000);  // 10 second watchdog timer\nlet apiConfig = {cancelToken: this.cancelSource.token};\nCore.api.request.post( 'some/url', {}, apiConfig ).then(response => {\n    if (response.ok) {\n        // Success\n        clearTimeout(watchdogTimer);\n    }\n});\n```\n. ",
    "Marcholio": "The documentation seems to be updated, this could be closed now maybe?. This can maybe be closed since it hasn't been active lately.. I suggest that this could be closed due to inactivity.. It seems that there are still conflicts, is this issue still active?. @vvusts RN is at 0.58.4 now, can you check if the issue has been solved?. @k3341095 can you confirm if this is fixed now?. Can this now be closed as the problem is solved?. Can you verify whether this is still an issue?. Can this be reproduced with the current version?. I guess this is something about token expiration. You could use the interceptors for that purpose.. ",
    "loklaan": "I just noticed this behaviour!\nThe original config is not passed to the response's config property. Instead a mutated object is [passed][pass] to the configured adapter.\nA fix for this could potentially be too shallow copy the config, and pass that as a second argument to the adapter so that they can use it on response.config instead of the mutated config.\nBut I suppose this mutative behaviour on response.config is the expected in some codebases by now... For now, I am depending on it so that a response interceptor can (re)parse the config.data back to an object \ud83d\ude43.\nIf the project wants to fix this, it must either:\n1. Make a breaking change, replacing the value of config property to the original\n2. Add to the response by attach another property, such as originalConfig, with the value of the original request config\nIf a major release is already around the corner, then  no. 1 is better.\n[pass]: https://github.com/mzabriskie/axios/blob/cfe33d4fd391288158a3d14b9366b17c779b19e3/lib/core/dispatchRequest.js#L52. Oh I didn't notice that axios was major version zero, woot 'easy' breakages. (I did notice the upgrade doc, which would need to be updated for this change)\nI am happy to put a PR together. Would appreciate some feedback from collaborators before jumping into it prematurely though, thanks!. Cool! #581 . Hey @nickuraltsev, this should be good to go now! Squashing the commits on merge would be good.. Thanks for the help! Hope to contribute more via #520. :). I thought about this, and covered the case by using the full baseURL (it could include an ending slash).\njs\ncombineURLs('http://test.com/foo/', ''); // => 'http://test.com/foo/'\nBut yes I think it may be confusing without the support for your suggestion.. ",
    "SimonOdell": "I've solved the problem now; I wrote my own promised based object wrapper around axios which takes the same arguments so no need to patch the rest of the code, and it manages the request and responses with it's own internal state which can be referred to if the axios request fails. \nThe wrapper also allowed me to do away with any need for interceptors as all requests are sent through it already.\n. ",
    "kmanishprdxn": "@nickuraltsev Thanks for the links. It works for me.\nUpdated code as below\n/* action to get OTP */\nexport function getOTP(phoneNumber) {\n  return dispatch => {\n    return axios.post(`${ROOT_URL}/generate/otp`, {'phoneNumber': phoneNumber})\n      .then(response => {\n        return response;\n      })\n      .catch(err => {\n        console.log(err.response);\n        return err.response;\n      });\n  };\n}\n. ",
    "candyflip19": "And of course it worked! :)\nYou were totally right with the second parameter. Don't know how I could have oversee that.\nThanks for your fast reply! Really appreciate that :)\n. ",
    "andreixk": "Had the same issue and boy am I glad to see this thread; but can you please put this in the documentation somewhere? It's very difficult to find these kinds of details.. ",
    "matheus208": "Is there a plan to merge this?\nThis makes testing apps that use axios.create() SO much easier using axios-mock-adapter.\n. Regarding syncing the default and custom instance configs: I agree with @yanivefraim. Once you create a new instance, I wouldn't expect its configs to change if I change the defaults.\n. ",
    "fernandosouza": "Hi, guys. Thx for your comments.\n@djyde, allowSyntheticDefaultImports works. Thank you. :)\n. ",
    "kumarryogeshh": "I am receiving both shipments and events as undefined, although both apis are returning data in browser separately.. ",
    "edgeadjei": "sorry about the late reply but yes i'm using babel to transpile my es6 code.\nI ended up using the code below as a workaround.\n```js\nimport Bluebird from \"bluebird\";\ngetUsers(){\n  return axios.get(${url})\n  .then((users) => {\n    ...\n  })\n  .catch((err) => {\n    ...\n  });\n}\ngetSessions(){\n  return axios.get(${url})\n  .then((sessions) => {\n    ...\n  })\n  .catch((err) => {\n    ...\n  });\n}\ngetServices() {\n  return (dispatch) => {\n    dispatch();\n    Bluebird.join([\n      getUsers(),\n      getSessions(),\n      ...\n    ]);\n  };\n}\n. @slimzc i couldn't find a solution using just axios.\nBased on the level of activity around axios I think it's safe to say that a fix might take some time. but as described in my second comment, a seamless workaround would be to use bluebird.js\nconst Bluebird = require(\"bluebird\");\nBluebird.join([\n getUsers(), // axios promise \n getSessions(), // axios promise \n (users, sessions) => console.log(users, sessions) // optional\n]);\n```\nyou can also use Bluebird.all([p])  if you expect all promises to pass. ",
    "jbmeslin": "I have the same issue with ES6 (babel) with axios.all or Promise.all \n!Edit: \nMe it was my error i forget a resolve (in a promise middleware with redux) so it works great\n. ",
    "slimzc": "Anybody find a solutions for use axios.all() with Babel? I'm working in a  ReactJS app, using create-react-app and I can't use axios.all() because I get a error like _api.m2Api.all is not a function\nwhere m2Api is an instance of axios.. ",
    "fourstacks": "I'm having the same problem it would seem.  I'm using axios in a Vue spa and I'm getting the same error:\nUncaught TypeError: axios.all is not a function\naxios is an instance created with some custom defaults and set on the window object.\nFWIW, the presets in my babelrc file are:\n\"presets\": [\"es2015\", \"stage-2\"]\nAny insight on this would be great . The bluebird solution is cool but if you don't want to pull in another library just to get around this issue then you can always just use Promise.all instead:\n```\ngetUsers(){\n    return axios.get('/users');\n}\ngetSessions(){\n    return axios.get('/sessions');\n}\nPromise.all([ getUsers(), getSessions() ])\n    .then(results => {\n        // Use the data from the results like so:\n        // results[0].data\n        // results[1].data\n    })\n    .catch(error => {\n        // do whatever\n    });\n```\nObviously a bit uglier than axios.all but it gets the job done without having to pull in a library just to get around things.. ",
    "daGaiGuanYu": "I think the reason is that there isn't an all method in an instance of axios.. I think the reason is that there isn't an all method in an instance of axios.. ",
    "thundo": "Any update on this? Instances at the moment are quite crippled :/. ",
    "brunocascio": "Any update, please?. ",
    "omeb": "sounds like a great idea to me. sounds like a great idea to me. ",
    "yoyo837": "1395 has been merged.. #1395 has been merged.. I have the same problem.\nprogressEvent.loaded will immediately return the size of progressEvent.total.. #639 This may be related to the problem, but I am still confused.. duplicate #1127 . Maybe it's too fast to upload.. @xybin1990  This is my code:\najaxCover\n```js\naxios.interceptors.request.use(function(config) {\n  ajaxCounter++\n  const myOptions = config[custOptKey]\n  if (!myOptions.silent) {\n    myOptions._loadingInstance = popup.loading()\n  }\n  return config\n}, function(fail) {\n  return Promise.reject(fail)\n})\naxios.interceptors.response.use(function(response) {\n  ajaxCover(response)\n  return response\n}, function(fail) {\n  ajaxCover(fail.response || {\n    config: fail.config\n  }, fail.code)\n  return Promise.reject(fail)\n})\n``. In addition to admiring the author in a witty manner/in a humorous way in the title, he did not express any other meaningful content.. \u793e\u533a\u8bf7\u4f7f\u7528\u56fd\u9645\u8bed\u8a00\u54e6\uff0c\u8fd9\u6837\u624d\u66f4\u591a\u4eba\u53c2\u4e0e English please \ud83d\ude0a. ![image](https://user-images.githubusercontent.com/6134547/49560102-2053e580-f94c-11e8-88ee-3e40a0c6f98f.png)\n.mergeConfig(cfg1, null)` will break it. . ",
    "alex-shamshurin": "I tried this, but warning still exists\naxios.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  if (axios.isCancel(error)) {\n    console.log(\"Axios intercept cancel response\");\n    return Promise.reject(new Error(\"It's an error object, but warning happened before\"));\n  } \n  // Do something with response error\n  return Promise.reject(error);\n});\nPromise has been rejected before the interceptor.\n\nAnd only then\nAxios intercept cancel response\n. Please reopen the issue. We can solve this. Just do if (cancelled) return Promise.reject(new Error('request cancelled')). ",
    "bairisuresh": "@nickuraltsev \nits not working with above changes\nconst https = require('https');\naxios({\n      url: url,\n      method: 'GET',\n      headers: {\n       'Content-Type': 'application/json'\n      },\n      responseType: 'json',\n      httpsAgent: new https.Agent({  rejectUnauthorized: false })\n    })\n    .then(response => {\n    })\n    .catch(error => {\n    })\n}\n}. @Eric24 \nIt's not working if i add the above code at first line of my file.\nPlease let me know exact path for adding.. ",
    "Eric24": "Actually, I find that it does work, but it specifically addresses self-signed certificates. It does not allow expired or invalid certificates. To allow any certificate, you have to add this line near the top of your code;\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\nThis will allow just about anything, but it's also dangerous, so use with caution.. For me (needing to ignore an expired but otherwise valid certificate), it worked by simply adding this line right after \"use strict\"; at the top of the main node.js file, before any other code. It's an all-or-nothing setting, but it's purpose is to allow an HTTPS transaction to complete when the agent would otherwise terminate the transaction due to a certificate issue. Maybe your particular scenario is not related to the certificate?. ",
    "fairyly": "if not in node ,how to get https module????. if  not  in  node  ,how  to get https module\n??? @FastNinja . @rubennorte  I don't understand , how to disable the option before get/post??. ",
    "psahni": "https module DOES NOT work with react-native. @Germinate - Looks great!. Thanks for sharing it. So after making those changes. Can we use react-native module directly ?. ",
    "xmeltrut": "+1. ",
    "Germinate": "@psahni  Do you know how to ignore the ssl issue in React Native?. @psahni  Have you tried this solution?. @psahni  Have you tried this solution?. ",
    "zaiz91": "Still not working with react native :/. Still not working with react native :/. ",
    "lben": "Does it work in the browser? I am using axios with a vue js application and I am getting this net::ERR_CERT_AUTHORITY_INVALID error with a self signed certificate. The proposed solution assumes that I can use https.Agent but I don't know how can I use the https module on vue. Is there another way? thanks. ",
    "lulzimfazlija": "do we have https inside react-native? if yes how do we include it?\n. ",
    "RobotOptimist": "if you are using nuxt/axios you can achieve the above by creating a plugin with the following code:\nHere is the documented method to create the plugin in nuxt: https://axios.nuxtjs.org/extend.html\nThis pattern of development can be useful if you are developing an API locally with a self-signed cert.\n```\nimport https from 'https';\nexport default function ({ $axios, store }) {\n    const agent = new https.Agent({\n        rejectUnauthorized: false\n      });  \n    $axios.onRequest(config => {\n        if (process.env.dev) {\n            config.httpsAgent = agent;\n        }                   \n    });\n}\n```. ",
    "mehsieh89": "what is a \"post\" example of this?\nCurrently trying to do a post request, and ignore SSL. . ",
    "willwillis": "\nif you are using nuxt/axios you can achieve the above by creating a plugin with the following code:\nHere is the documented method to create the plugin in nuxt: https://axios.nuxtjs.org/extend.html\nThis pattern of development can be useful if you are developing an API locally with a self-signed cert.\n```\nimport https from 'https';\nexport default function ({ $axios, store }) {\n    const agent = new https.Agent({\n        rejectUnauthorized: false\n      });  \n    $axios.onRequest(config => {\n        if (process.env.dev) {\n            config.httpsAgent = agent;\n        }                   \n    });\n}\n```\n\nDo I call my existing asyncData or axios requests any differently after creating axios.js in the modules folder?. ",
    "libertyAlone": "@nickuraltsev It works, thx~\n. ",
    "fvicente": "Hi @mzabriskie \nI have exactly the same problem and I can reproduce it consistently. My app has a long pull ajax, if I put my laptop to sleep, when it comes back the ajax es cancelled by chrome but never completed/rejected the promise.\ncode is like this:\njavascript\n  const timeStamp = (new Date()).getTime();\n  return axios.get(`${API_LISTEN_URL}?subject=POS${posId}&syncId=${syncId}&_ts=${timeStamp}`, {\n    headers: defaultHeaders,\n    responseType: 'document'\n  })\n  .then(response => {\n    // we need to retrieve the new synchronization ID - this needs to be sent on the next request\n    return { 'ok': true, 'syncId': response.headers[\"x-sync-id\"], 'xml': response.data }\n  }, error => {\n    const message = \"Error while listening for an event\"\n    console.log(message)\n    return { 'ok': false }\n  })\nYou have to put some sleep on your server side in order to reproduce the problem. Then when the ajax is pending, close your laptop monitor, after a few seconds lift and you will see that the request is cancelled, but the promise not resolved.\nNote: I'm using chrome Version 55.0.2883.95 (64-bit) on a MacBook computer, MacOS X \"El Capit\u00e1n\" version 10.11.6 (15G1217)\n. Pull request created to fix this issue: https://github.com/mzabriskie/axios/pull/689. Hey @mattridley \nI'm not saying is the best solution, but you can always monkey-patch the library, by putting in your code something like this:\njavascript\n  try {\n    // monkey patch for \"onAbort\" not being handled by axios correctly, this is to avoid an\n    // unresolved promise on the long-pull ajax if the computer goes to sleep\n    // https://github.com/axios/axios/pull/689\n    const oldSend = XMLHttpRequest.prototype.send\n    XMLHttpRequest.prototype.send = function () {\n      this.onabort = this.onerror\n      oldSend.apply(this, arguments)\n    }\n  } catch (e) {\n    console.error(e)\n  }\n. @rubennorte \nI would like to help, but I don't know how to simulate a computer going to sleep and then wake up. I tested it in my computer by closing and lifting the monitor of my laptop.\nDo you have any ideas?. ",
    "mattridley": "I'm encountering the same issue - given @fvicente is no longer working on a PR to resolve this does anyone have an objection if I pick the issue up and run with it?. I have used interceptors for this purpose. If the base URL of the request is to my API I add the auth header (to prevent sending credentials to third parties). This is run on each request so if the token changes (for example as a result of a token refresh) then the next request picks up the new token. I also ensure I check for existing values in the request to allow overriding of the header from the call site if that happened to be necessary for whatever reason.\n```\naxios.interceptors.request.use(\n  config => {\n    if (config.baseURL === baseApiAddress && !config.headers.Authorization) {\n      const token = getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n}\n\nreturn config;\n\n},\n  error => Promise.reject(error)\n);\n```. I was seeing the same thing with requests chrome cancelled when the machine went into sleep - https://github.com/axios/axios/pull/1399 (which was merged to master) ensures that an error is thrown when the request is aborted so you should start catching these once it is out (not sure when the next release is planned). ",
    "sky790312": "ok, thx!. ",
    "yifeikong": "I hope this is mentioned in the README file. ",
    "frayhan32": "I think at this moment there is no possibility to combine ajax function with async/await. The only thing you can do is you can use Promise.all to get all return value from your promise call. Then use that value to execute your next function. ",
    "foomip": "@lebe-dev Sorry didn't add it in the snippet there but .catch function never gets called. The upload completes successfully its just that I never see the onUploadProgress function being called with any progress updates. I tried with large files as well and still nothing.. @IgorDePaula that's great, will test latest master get back to you.. ",
    "IgorDePaula": "Here is called, but loaded and total properties are the same, strange, no?. I found the solution: https://github.com/mzabriskie/axios/pull/577\n. Thank you.\n2016-12-06 11:43 GMT-02:00 Nelson Pascoal notifications@github.com:\n\n@IgorDePaula https://github.com/IgorDePaula that's great, will test\nlatest master get back to you.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/540#issuecomment-265152460,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACs-SUcvRQWLABYnnfKA9LaNKn8I7Rv3ks5rFWaMgaJpZM4K1Xbu\n.\n. Can be the browser, what browser you are using?. Please, test this example: https://jsfiddle.net/v70kou59/1/ . Select a file and click upload.. Can be cors too.. Look https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest, see \"Monitoring progress\" section. Axios abstract the xmlhttprequest object, which has eventos for upload. onUploadProgress should be a callback for your function to monitor upload progress.. See this lines:\nhttps://github.com/mzabriskie/axios/blob/master/lib/adapters/xhr.js#L152-L154. I'm happy for help you.. The programmer need have creativity to use this variable. I used it to\nverify if really this function works, I put console.log() on math calc for\nthis. The programmer can use this variavel for build a progress bar.\n\n2016-12-07 0:47 GMT-02:00 Nick Uraltsev notifications@github.com:\n\nDoes this example really do anything? The percentCompleted variable is\nassigned but never used.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mzabriskie/axios/pull/577#issuecomment-265340201, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ACs-ScvcxbZ0nahtacYipUxjORngKsE0ks5rFh5NgaJpZM4LEbu-\n.\n. \n",
    "ayoola-solomon": "Any progress on this ?. ",
    "dgurns": "onUploadProgress is working well for me on iOS, but doesn't seem to be firing at all on Android. \nHere's my code:\nlet response = await axios({\n  method: 'post',\n  url: imageUploadUrl,\n  data: {\n    connectorId,\n    data\n  },\n  onUploadProgress: (progressEvent) => {\n    const { loaded, total } = progressEvent;\n    dispatch(updateImageUploadProgress(loaded, total));\n  },\n  cancelToken: new CancelToken(token => {\n    cancelAxiosRequest = token;\n  })\n});. ",
    "l1zard": "@dgurns +1 same problem. ",
    "thovt93": "I don't know why onUploadProgress only response data after request success. Can I get percent uploaded each 1s?. ",
    "zhukmj": "Experiencing a similar issue. onUploadProgress works fine until cancelToken provided.. ",
    "andreechristian": "It works when i turn off crossDomain config. But crossDomain is too important :(. ",
    "hos4m": "This is late and I'm sure you already fixed your issue, but for reference. You don't have to create two Axios instances, here is how I managed to solve that:\nThe Axios instance:\nlet axiosInstance = axios.create({\n  baseURL: \"http://localhost:9000\",\n  timeout: 10000,\n});\nThe interceptor:\naxiosInstance.interceptors.request.use(\n  config => {\n    config.headers.authorization = localStorage.getItem(\"token\");\n    return config;\n  },\n  error => Promise.reject(error)\n);. ",
    "andykmiller": "Thanks Yaniv. I didn't take your fork (wasn't sure how to do that), but I did take your source code changes and apply them to my version. That didn't help the issue.\n. I think XMLHttpRequest (used by Axios) does not allow setting Accept-Encoding header. So maybe I'm on the wrong track and need to focus on why compressed response is causing problems.\n. ",
    "irisdan": "Hi, I'm having the exact same issue and I'm not sure how to solve it. Could you please share what you did to fix it? Thanks!. I think I fixed it by playing around with request config. haha I don't know if that's what you are supposed to do.. @hellsinglord22 It was the proxy issue in my case. I was just testing things locally.\nreturn axios.get('/api/employees', {\n            proxy: {\n                host: '127.0.0.1',\n                port: 1337\n            }\n        })\n        .then(res => {\n        })\n        .catch(err => console.log(err));. ",
    "hellsinglord22": "@irisdan can you please post your configuration, for now i will use https until i get your response .. . Thank you @irisdan, \nin my case i was trying to connect to uncertified https server, \nso i used certificate and worked just fine ....\njust for record the server wasn't on my local machine so i didn't need to use proxy like you ...   . ",
    "myckel": "with the http i fix my problem thanks. with the http i fix my problem thanks. ",
    "isaldin": "if i implement this request via fetch, all works fine.. if i implement this request via fetch, all works fine.. i'm sorry for this 'bug'\nthis issue related to fork of your lib for react-native (https://github.com/qiangmao/axios). \n. i'm sorry for this 'bug'\nthis issue related to fork of your lib for react-native (https://github.com/qiangmao/axios). \n. ",
    "hcivelek": "Thanks @Klaasvaak .\nWhen I read your first sentence then I realized what is wrong..  I didn't go settings. I just opened a new tab and go to my issued ssl page. Then browser ask me about safety and I proceed.. Done! no more error.. ",
    "paul321": "i'm getting this error \n\"adapter(...).then is not a function\"\ni'm using \nvar axios = require('axios');\naxios.defaults.adapter = function() {\n    return require('axios/lib/adapters/http'); // always use Node.js adapter\n};. Solved:\naxios.defaults.adapter = require('axios/lib/adapters/http'); \n. ",
    "StarpTech": "I also have the same issue and want to pipe any data to a request (the node way) \nhttps://github.com/mzabriskie/axios/issues/961. Please reopen! Issue is not fixed.. When I pass a readable stream as data the data will never arrive but only a empty object. When I try the same with request package it works.\njs\nAxios({\n  url: '....',\n  method: 'post',\n  data: <readableStream>\n}). Hi  @rubennorte just try to pass a stream as data and you will run into it.. ",
    "moldray": "I have the same problem. . ",
    "insipx": "\ud83d\udc4d \nI have this same problem..... ",
    "ratze90": "Does anyone found a solution for this problem?. Does anyone found a solution for this problem?. ",
    "libasoles": "I'm doing something tricky that may help someone else. \nBasically, I'm forwarding a stream using koa and axios. It's a file attachment, so I have to deal with FormData.\n```\napi.post('/registrations/:id/withholding-tax-exclusion', async ctx => {\n  const { id } = ctx.params;\nconst request = (chunk) => {\nconst data = new FormData();\ndata.append('attachment', chunk);\n\nreturn BACKEND({\n  method: 'POST',\n  url: `/registrations/${id}/withholding-tax-exclusion`,\n  data,\n  headers: {\n    'Content-Type': ctx.req.headers['content-type'],\n  },\n}).then((response) => {\n\n  ctx.res.headers = response.headers;\n  ctx.body = response.body;\n  console.log(\"UPLOAD OK\")\n  ctx.status = 200;\n});\n\n};\nawait streamToPromise(ctx.req).then(request);\n  console.log(\"END\");\n});\n```\nMagic happens here:\nwait streamToPromise(ctx.req).then(request);\nI'm converting the stream to a promise, so I can wait for axios response before sending back the koa response to client.\nSee:\nhttps://github.com/bendrucker/stream-to-promise\n. I confirm it's possible to use POST verb to stream a file. I'm doing so with nextJs and koa. \nIn my specific case, I'm not forwarding a concrete file, though. Basically I expose a backend endpoint (in nextjs), which acts like a proxy between front end uploads and a backend API built on PHP. Don't ask me why we have this proxy, but let's just discuss the stream issue.\nSo, using pipe sends a GET request by default. Anyway, I think this should work for simple forms (with no formData): \nfs.createReadStream('file.json').pipe(request.put('http://mysite.com/obj.json'))\nor \nctx.req.pipe(request.put('http://mysite.com/obj.json')) \nBut if you need to use formData, then this approach will not work and you need to use stream events instead.\nSee:\n```\napi.post('/registrations/:id/my-attachment', ctx => {\n  const { id } = ctx.params;\nconst request = async (chunk) => {\n    const data = new FormData();\n    data.append('attachment', chunk);\nconst response = await axios({\n  method: 'POST',\n  url: `/registrations/${id}/my-attachment`,\n  data,\n  headers: {\n    'Content-Type': ctx.req.headers['content-type'],\n  },\n})\n\nctx.res.headers = response.headers;\nctx.body = response.body;\nconsole.log(\"UPLOAD OK\")\nctx.status = 201;\n\n};\nctx.req.on('data', request);\n  console.log(\"END\"); // sadly, this is executed before \"UPLOAD OK\"\n});\n```\nThis works. However this sents back koa response before axios execution.\nSo, solutions for me wat to convert the stream to a promise using this library:\nhttps://github.com/bendrucker/stream-to-promise\nDoing that is a piece of cake:\nawait streamToPromise(ctx.req).then(request); // being request the one I show before\nIf you want to read something more about events, see this article:\nhttps://medium.freecodecamp.org/node-js-streams-everything-you-need-to-know-c9141306be93. ",
    "Gregcop1": "I don't import it directly, I'm using js-data, but I go check with them. Tanks a lot. ",
    "jlubeck": "Mmm, I can't replicate this issue now as I changed the backend language from PHP to NodeJS and now everything is working for me. So I'm not sure if maybe it was a backend issue?. ",
    "Jessidhia": "Looks like this also would fix #465, but without affecting other headers.. @rubennorte where could I find the appropriate tests? This should only run in a browser.... IE < 10 does not support CORS at all, and having different scheme (https vs http) is enough to make a request not be same-origin.\nThere is a way to hack around it using the XDomain ActiveX control, but it in turn doesn\u2019t support https access from http.. I'm not entirely sure this is needed, as almost all of these headers are only seen in requests, not responses, but it's probably better to match node's behavior.. ",
    "skmvasu": "Thanks @nickuraltsev. I did just that, but was curious to know why this had to be implemented :). ",
    "jonjaques": "I use a cookie to persist the token for SSR purposes, but then for all my API requests I send an Authorization header. So getToken function for express-jwt looks like this:\nlet token = null;\nif (req.headers.authorization) {\n  let bearer = req.headers.authorization.split(' ')\n  if (bearer[0] === 'Bearer') {\n    token = bearer[1]\n  }\n}\nelse if (req.cookies && req.cookies.token) {\n  token = req.cookies.token;\n}\nreturn token;\nIf a token cookie is present on the server, I populate it into redux state (which is wasteful I know because we are sending it via initial state and cookie, but whatevs).\nAnd then I have a special redux middleware to set the Authorization header in axios, which is read from the store.\nSome code just to give you the idea; Of course the hard part is wiring up all the plumbing for this \ud83d\ude09 .\n// called on both server and client immediately following store creation\nexport function initializeStore(store, http) {\n  let token = cookie.load('token', { path: '/' })\n  if (__SERVER__ && token && token.length) {\n    store.dispatch(setToken(token))\n  }\n}\nThen this is an abstracted part of my middleware, but runs on every action\nexport function buildContext(store) {\n  axios.defaults.headers['Authorization'] = getBearerToken(store.getState())\n}\n. ",
    "shizpi": "Great! My solution was very similar to yours, I ended up also adding the token to the store and dispatching it on every action.\nThanks!. ",
    "mbistuer": "i have is the same problem with api  but i resolve error etag express (304 not modified) but i don\u00b4t works yet\n\n. ",
    "geekflyer": "can we please merge this soon? Spend hours to figure out why our integration tests were not running in CI environment and it turns out this is due to axios' lack of interpreting no_proxy.. ",
    "gustarus": "Guys, hello! Is there any movements? We need this feature :fire:.. ",
    "lgordey": "@mzabriskie @nickuraltsev @rubennorte Hi guys!\nWe are waiting for this improvement 4 months. \nCan we merge this or find out the comments?\nOtherwise we will be forced to refuse to use your package, although we really like it \ud83d\ude22 . ",
    "jphilipstevens": "We are running into issues because of this. Please bring this in ASAP. @nickuraltsev @rubennorte\nCan you provide any update? . ",
    "nareshbhatia": "Any reason why this PR has not been merged since last 8 months? I have spent over 2 weeks tracking down a proxy issue, which could have been solved in 2 minutes if this had been merged. @mzabriskie and other committers, could you please help by accepting this PR?\nThanks in advance.. @rubennorte, proxy-from-env looks good but if we use that, it will interfere with Axios. Since Axios already supports HTTP_PROXY and HTTPS_PROXYit will take the URL provided by proxy-from-env and apply the proxy to it anyway. I would prefer to simply add NO_PROXY support to Axios and not have to worry about one more dependency. Of course, the NO_PROXY support would have to implement wildcards also.. Ah, ok @rubennorte. So I assume that your message to use proxy-from-env was addressed to @inthemill - the submitter of the PR.. @ZhangYiJiang, thanks for helping out. I am now catching and logging the error returned by axios. It says:\n\n(node:13728) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): TypeError: Converting circular structure to JSON.\n\nUnfortunately, there is no circular structure in the returned JSON. I can hit the same URL from the browser and I get simple objects with two properties (id and name):\n[\n  {\n    \"id\": \"design-patters\",\n    \"name\": \"Design Patterns\"\n  },\n  ...\n]. If I put a breakpoint in the catch clause, and inspect the error object, I am getting a 504 error from a gateway inside the firewall. The response is an HTML page displaying the 504 error. I wonder the app it is trying to reach an outside port instead of localhost where the server is running.. Ok, I think I have determined the root cause of this issue, but don't know the solution.\nThe Windows VM has HTTP proxy settings by setting the environment variable HTTP_PROXY (there is also one called HTTPS_PROXY). For some reason, Axios thinks that it needs to go through the proxy to access http://localhost:3000. Bottom line, it is hitting the proxy, which is returning the 504 error. It is not even hitting the server at http://localhost:3000. If I remove the environment variable, then the problem goes away.\nSo the question is, should Axios be going through the proxy to access local ports when HTTP_PROXY is set? What is the right way to solve this issue? The HTTP_PROXY variable is required for other applications to work correctly.\nBTW, node-fetch seems to be ignoring the HTTP_PROXY variable and works fine even if it is set. I don't know if that's good or bad!. After a bit of research, I found that I should set NO_PROXY to exclude hosts that should not go through the proxy. So I set up NO_PROXY as follows:\nset NO_PROXY=localhost,127.0.0.*\n\nUnfortunately that doesn't work. Then I stumbled across https://github.com/mzabriskie/axios/issues/434 which has been open since Sep, 2016. Furthermore there is a PR for it, ready to be merged since Dec, 2016: https://github.com/mzabriskie/axios/pull/565. I am baffled why something as important as this has not been merged in 8 months! My faith in Axios is shaken :-(. Please prove me wrong.. ",
    "inthemill": "@rubennorte When I use proxy-from-env it would make sense to change the whole part where the proxy is read from env-variables. This will have a much deeper impact on existing code. Seeing that it is only covered by integration tests, i'm not very confident doing this. I could try, but i would need some help testing all edge cases. Do you want me to do that?. Yes please. @rubennorte let's merge this PR, it's old enough.. of course. I'll fix that, and check, why the tests don't fail.. ",
    "williangd": "Any update about no_proxy?. ",
    "ian-harshman-ck": "@nickuraltsev @rubennorte Please, let's get this merged! We love axios and are looking to support axios connections for a Thrift client library, but we need no_proxy support to use it anywhere beyond dev environments.. @nickuraltsev @rubennorte Please, let's get this merged! We love axios and are looking to support axios connections for a Thrift client library, but we need no_proxy support to use it anywhere beyond dev environments.. ",
    "gigachel": "Any news about no_proxy?. I'm having the same problem of https request over proxy. I do not want to move to request.js. \nreturn axios({\n   url: 'https://site.com',\n   proxy: {\n        host: 'proxy.xxxxxx.com',\n        port: 3128\n    }\n})\nResult:\nError: write EPROTO 139800246822688:error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol:../deps/openssl/openssl/ssl/s23_clnt.c:794\nrequest.js and curl in this situation works well.\nContext\n\naxios version: v0.16.1\nEnvironment: node v6.9.5, CentOS release 6.8 (Final). \n",
    "JulienBourgain": "It's not a good idea to wait 1year before merging an important PR without good reasons.... ",
    "dejayc": "This is so typical of the Node ecosystem, lol.  Becoming dependent upon abandonware.. This is so typical of the Node ecosystem, lol.  Becoming dependent upon abandonware.. ",
    "daggerjames": "seems like we should wait for next year lol. ",
    "alexbonhomme": "Hey guys ! \nYou should close this PR in favor of #1693 who's merged into master and fix the problem \ud83c\udf89\nThis this confusing to keep this open.\nPlease give a try to https://github.com/axios/axios/tree/v0.19.0-beta.1. ",
    "noahmonster": "After doing more research it has become apparent that IE is actually hiding the response even though the browser is receiving it.  Looks like there is nothing that can be done.. ",
    "rroslaniec": "You have problem with context. try this:\ngetData() {\n    const url = \"https://jsonplaceholder.typicode.com/todos\";\n    axios.get(url).then(response => { \n        this.setState({ todos: response });\n        console.log(JSON.stringify(response)); \n    }).catch(function(error) { console.log(error); }); \n}\nSee arrow funcion? This keeps you current context (like var _this = this; in old style). ",
    "andylacko": "it was problem in server not accepting OPTIONS requests, because routes were declared as GET::sometnig or POST:: something, so the preflight couldn't pass and the POST request was decliend, hope this will help another people to prevent hours of googling. ",
    "lmiller1990": "Hey everyone, I had this problem too, not sure is it's the same as everyone else but I had\naxios.get('localhost:3000/posts')\n.then((res) => { ... })\nwhich I was able to make work by simply adding \naxios.get('http://localhost:3000/posts')....\n. ",
    "hpsoar": "My server added Access-Control-Allow-Origin header to options request.\nstill get the error.\nAnd it's strange that axios actually received 200 & the data server returned. Don't know why I still get the error.. ",
    "aksperiod": "Same. Using Flask with flask-cors. ",
    "jameskandau": "Create a middleware with the headers..\nthen bind your routes in that middleware group. install this https://github.com/barryvdh/laravel-cors.. if it still gives this issue use ngrok to test your apis. ",
    "DavidCWebs": "I had the same issue sending a POST request from a Vue app to Laravel API. The comment on 4 Dec by @andylaci helped! Fixed by adding a new route responding to the OPTIONS request method in the backend. This gives back the access control headers required for the POST request to proceed.. ",
    "ilazakis": "Not sure why this was closed.  I can see 200s for both the OPTIONS and the subsequent request (PUT). axios still reports it as an error.. ",
    "gbrits": "I found that when your (backend) method's response isn't interpretable by the front-end, you can receive a CORS-looking issue. For example, I was using die('message'); in my Laravel method and I received a CORS complaint, despite my CORS being whitelisted. After changing my response to just be return ['status' => 'success']; which formats over into JSON to the FE - problem solved. Curious if this may be the issue for some of you too. :). ",
    "jaime48": "his error is caused by CORS security. When Browser hits the request to another domain, by default, it denies the request.\nPossible Solutions:\nWe need to allow this origin to Laravel server side. So we need to create one middleware at the backend and apply this middleware to every API request. By putting this middleware, we are explicitly told Laravel that we are allowing this request to access our resources.\nDownload the following Laravel Specific CORS package to avoid this issue and follow the steps.\ncomposer require barryvdh/laravel-cors\nAdd the Cors\\ServiceProvider to your config/app.php provider\u2019s array\nBarryvdh\\Cors\\ServiceProvider::class,\nTo allow CORS for all your routes, add the HandleCors middleware in the $middleware property of app/Http/Kernel.phpclass:\nprotected $middleware = [\n    // ...\n    \\Barryvdh\\Cors\\HandleCors::class,\n];\nYou can publish the config using this command:\nphp artisan vendor:publish --provider=\"Barryvdh\\Cors\\ServiceProvider\"\nNow, try again, it will save the data into the database. I have not set the redirect after saving the data but will set in short, while you can check the values in the database.. ",
    "docmattman": "@gbrits thanks for the tip!  This was the case for me.  I couldn't figure out why CORS wasn't working for me.  Turns out I was debugging some things using die('...'); in my code which didn't allow the middleware headers to be sent in the response.  Removing the die did the trick.  Thanks!. ",
    "nithingrao": "Disable the chrome security.Create a chrome shortcut right click -> properties -> target, paste this \"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\" --disable-web-security --user-data-dir=\"c:/chromedev\". ",
    "klabusta": "I'm also getting this. Even if I get a 200, also while in Chrome debugging, I get a valid response (JSON, exactly what I expect).\nWhy does axios throw an error even if the status is 200? I have to state that I have withCredentials enabled and I couldn't find a way to set crossDomain to true.. I'm also getting this. Even if I get a 200, also while in Chrome debugging, I get a valid response (JSON, exactly what I expect).\nWhy does axios throw an error even if the status is 200? I have to state that I have withCredentials enabled and I couldn't find a way to set crossDomain to true.. ",
    "aamustapha": "in my own case, I manage the nginx installation. It was working until I switched to another VPS instance, and even with the same nginx configs, it's not working and I've no clue why.\nI'm using uwsgi + django + nginx for my rest API.. ",
    "ehsankhfr": "There is no option as crossDomain inside the Axios. Please study the source-code before giving/using wrong clues.. There is no option as crossDomain inside the Axios. Please study the source-code before giving/using wrong clues.. There is no option as crossDomain inside the Axios. Please study the source-code before giving/using wrong clues.. ",
    "Koshukey": "I use Flask and by adding flask-cors, I could solve this problem !!!!!!!!. ",
    "GraxMonzo": "My solution is\naxios.get('https://cors-anywhere.herokuapp.com/' + yourUrl). My solution is\naxios.get('https://cors-anywhere.herokuapp.com/' + yourUrl). ",
    "Abdorabi": "Route::options('{any}', ['middleware' => ['cors'], function () { \n    return response(['status' => 'success']); \n}])->where('any', '.*');\n\n@andylaci i found a good example from the vue-auth demo https://github.com/websanova/laravel-api-demo\n\nThanks a lot, i did compare my routes with it's route and i found what was missing, i was missing the option response, after adding this snippet of code at the end of my api routes, it worked.\nThanks again \nRoute::options('{any}', ['middleware' => ['cors'], function () { \n    return response(['status' => 'success']); \n}])->where('any', '.*');. ",
    "AleksandarSavic95": "CORS issue occured to me suddenly, \"in the middle of the development\", and what helped was to clear the cache. I'm talking about Laravel, so here are the commands:\n```\nphp artisan cache:clear\nphp artisan config:clear\nphp artisan route:clear\nphp artisan config:cache\nphp artisan route:cache\n```. ",
    "aldomendez": "\nI found that when your (backend) method's response isn't interpretable by the front-end, you can receive a CORS-looking issue. For example, I was using die('message'); in my Laravel method and I received a CORS complaint, despite my CORS being whitelisted. After changing my response to just be return ['status' => 'success']; which formats over into JSON to the FE - problem solved. Curious if this may be the issue for some of you too. :)\n\nYou hust saved my day. a dd(...) was ruining my day!. ",
    "diegomagikal": "\nI found that when your (backend) method's response isn't interpretable by the front-end, you can receive a CORS-looking issue. For example, I was using die('message'); in my Laravel method and I received a CORS complaint, despite my CORS being whitelisted. After changing my response to just be return ['status' => 'success']; which formats over into JSON to the FE - problem solved. Curious if this may be the issue for some of you too. :)\n\nThanks a lot! :1st_place_medal: . > I found that when your (backend) method's response isn't interpretable by the front-end, you can receive a CORS-looking issue. For example, I was using die('message'); in my Laravel method and I received a CORS complaint, despite my CORS being whitelisted. After changing my response to just be return ['status' => 'success']; which formats over into JSON to the FE - problem solved. Curious if this may be the issue for some of you too. :)\nThanks a lot! :1st_place_medal: . ",
    "theristes": "Just avoid using the word \"localhost\".  Why not IP instead?. ",
    "zappee": "@nickuraltsev Thank you a lot!. @nickuraltsev Thank you a lot!. ",
    "basarat": "I have reviewed this and this is exactly what I was about to PR. looking forward to this getting released \ud83c\udf39\u2764. ",
    "dpoineau": "Is there a reason that these updated Typescript definitions (and the original ones) include their own re-declaration of the Promise<T> type, rather than just relying on the global (or polyfilled) type existing ( https://github.com/Microsoft/TypeScript/blob/master/lib/lib.es6.d.ts#L5261 or https://github.com/DefinitelyTyped/DefinitelyTyped/blob/types-2.0/es6-promise/index.d.ts )\nThis can actually cause issues because you end up with two incompatible Promise types if you directly use the global/polyfilled type elsewhere, which can cause an error like was seen here: https://github.com/mzabriskie/axios/issues/480#issuecomment-255993904\nMy assumption would be that there's no reason to re-declare Promise at all: for example, see how the fetch API typescript definitions just assume it's available: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/whatwg-fetch/index.d.ts. Is there a reason that these updated Typescript definitions (and the original ones) include their own re-declaration of the Promise<T> type, rather than just relying on the global (or polyfilled) type existing ( https://github.com/Microsoft/TypeScript/blob/master/lib/lib.es6.d.ts#L5261 or https://github.com/DefinitelyTyped/DefinitelyTyped/blob/types-2.0/es6-promise/index.d.ts )\nThis can actually cause issues because you end up with two incompatible Promise types if you directly use the global/polyfilled type elsewhere, which can cause an error like was seen here: https://github.com/mzabriskie/axios/issues/480#issuecomment-255993904\nMy assumption would be that there's no reason to re-declare Promise at all: for example, see how the fetch API typescript definitions just assume it's available: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/whatwg-fetch/index.d.ts. ",
    "morlay": "export default axios should be export = axios. @IRus Sorry, I miss this line code module.exports.default = axios;\n. ",
    "Fantasim": "this is the problem in actual use : \nhttp://www.giphy.com/gifs/l2JhvO3UbIICeegp2. equivalent of <meta charset=\"utf-8\"> is setted by default on React Native, to \"solve\" the bug i used fetch :/. ",
    "TylerBrock": "Can you do a release for this one? It's a very common use case.. ",
    "michaelalhilly": "Hi @mzabriskie. Unfortunately not. I checked the logs but depending on the error Lambda may not output any info which was the case here.\nI got this working with a completely different approach so I'm not motivated to check this version of the code. Now that I look at the code I submitted I see a potential issue on my part.\nReally sorry!\nI'm going to close this issue unless you object or request that I test with Lambda.. Sounds good. Thanks for getting back!. ",
    "JounQin": "@nickuraltsev What I if want to handle the error but do not reject it further?\njs\naxios.interceptors.response.use(response => response, error => {\n   const response = error.response;\n   if(response.status === 404) {\n       // how to cancel the Promise here?\n       return false;\n   }\n    return Promise.reject(error);\n  });. But how can I ignore these error or just alert an error message then not reject promise? There are obviously no need to catch 404 error in every request.. For now I'm using unhandled-promise-rejections to handler the global Promise.reject.. ",
    "latel": "\n@nickuraltsev What I if want to handle the error but do not reject it further?\njs\naxios.interceptors.response.use(response => response, error => {\n   const response = error.response;\n   if(response.status === 404) {\n       // how to cancel the Promise here?\n       return false;\n   }\n    return Promise.reject(error);\n  });\n\nsame question!. order still reversed here with version 0.18.0. why this is not merged?. Thank you for your reply @delirius325,\nand as @OpenGG mentioned, I also notice this PR, it is merged but now it's gone again @le0nik.\nI think sometimes it's better to have an option to specify the order we really need, whether it's reverse or not. The default execute oder of request intercepters and response intercepters are opposite, which is a confusing thing.\nThink about the following situation:\n\nWe have a request modules which just wrappers axios for default behaviour management, and expose beforeEach and afterEach hook, and it also defines a request intercepter which just mark every request with a uniq id index.\n\n```javascript\nimport axios from 'axios';\nconst beforeEach = (succFn, errFn) =>\n  axios.interceptors.request.use(succFn, errFn);\nconst afterEach = (succFn, errFn) =>\n  axios.interceptors.response.use(succFn, errFn);\n// this interceptor add a uniq id index\nbeforeEach(config => {\n  config.id = uniqIndexedId();\n  return config;\n});\nexport { beforeEach, afterEach }\n```\n\nHere we have a module which import the above request module, and define interceptors using thebeforeEach hook.\n\n```javascript\nimport { beforeEach } from '@/service/request';\nbeforeEach(config => {\n    console.log(config.id); // => UNDEFINED\n});\n```\nThis fails because the later registered interceptor is executed before the interceptor which is registered in request module.\nI think we do need the first-in-first-out order because sometimes we have to convergence some logic into a single module, and ensure that these interceptors are executed earlier.. anyone here to see this problem?. > I'd like to support this change too.\n\nThere's an old PR #1041 to solve it.\n\nthis pr seemed to be merged, but for some reason is now gone. ",
    "wufeng87": "same question too! I want to handle the error status in interceptors, and do not to call the .catch() anymore. Thanks.. >  instance.interceptors.request.use(config => { return false;})\nThis would cause a error:\nTypeError: Cannot create property 'headers' on boolean 'false'\n    at e.exports (dispatchRequest.js:34)\n```\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n// Support baseURL config\n  if (config.baseURL && !isAbsoluteURL(config.url)) {\n    config.url = combineURLs(config.baseURL, config.url);\n  }\n// Ensure headers exist\n  config.headers = config.headers || {};\n```. >  instance.interceptors.request.use(config => { return false;})\nThis would cause a error:\nTypeError: Cannot create property 'headers' on boolean 'false'\n    at e.exports (dispatchRequest.js:34)\n```\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n// Support baseURL config\n  if (config.baseURL && !isAbsoluteURL(config.url)) {\n    config.url = combineURLs(config.baseURL, config.url);\n  }\n// Ensure headers exist\n  config.headers = config.headers || {};\n```. ",
    "shoutcool": "I have the same question. i'm doing the whole error handling in the interceptor. So i dont want to call .catch() anymore. How can this be achieved?. ",
    "gertjanwytynck": "Same question here. Doing error handling for 401/404/500 in interceptor.response. When triggered I'm redirecting to another page, on that moment I don't want to trigger the .catch() anymore. \nI'm using axios in VueJs. \nAnyone has a proper solution for this?. ",
    "smstamm": "Thanks, but when I copy and paste in this code I get a 500 error. The service can't even be hit. Any further suggestions?. I got this working by pulling the headers out into their own variable. \nexport function customTemplateSave(updatedTemplate) {\n    const url = `${ROOT_URL_CT}/TemplateSave`;\n    return function(dispatch) {\n        axios.post(url, updatedTemplate, axiosConfig)\n            .then(response => {\n                dispatch({ type: CUSTOMIZED_TEMPLATES_SAVE, payload: response });\n                hashHistory.push(\"templates\");\n            });\n    };\n}\nThanks for your help. ",
    "KKSzymanowski": "@mzabriskie So there's no easy way of getting the number of pending requests like eg. jQuery.active?\nAre you planning to add that?. ",
    "decademoon": "Please read the README\nhttps://github.com/mzabriskie/axios#promises. ",
    "sjxhgjxf": "thanks!. ",
    "mshibl": "I'm having the same issue .. what I have found out is setting axios.defaults.withCredentials = true; and not using an instance at all solves the issue. ",
    "mqliutie": "@mshibl Thanks for your share. @mshibl Thanks for your share. In iE9 content type not in headers, and server side return to me message is Content type 'application/octet-stream' not supported . In iE9 content type not in headers, and server side return to me message is Content type 'application/octet-stream' not supported . @zp1112 \u6700\u540e\u4f60\u7684\u95ee\u9898\u89e3\u51b3\u4e86\u5417?. @zp1112 \u6700\u540e\u4f60\u7684\u95ee\u9898\u89e3\u51b3\u4e86\u5417?. @ShawnCholeva Hi, I found my mistake. I used axios in jest. This is not axios's business. \n. @ShawnCholeva Hi, I found my mistake. I used axios in jest. This is not axios's business. \n. @ShawnCholeva Hi, I found my mistake. I used axios in jest. This is not axios's business. \n. ",
    "mdavid88": "Anything on this?. My mistake, withCredentials set on the instance IS working for me. My issue was I wasn't seeing the set-cookie header in the response in the network tab or in document.cookie, but it's probably because I don't have a good enough understanding of what Chrome lets you see from cross-origin cookies.\nGoing to chrome://settings/siteData let me search by the domain of the cookie, and I saw that it was being set correctly with:\naxios.create({\n  withCredentials: true,\n})\nand it wasn't being set at all without, so it's working for me in axios version 0.18.0. ",
    "maamounapprise": "it's not an issue with axios i just made it work on the latest version, I was using express cors so i simply added credentials: true, origin: http://yourdomain:3000. This won't work on localhost you have to point your localhost into some fake domain and have all your apps run on that domain. ",
    "waspar": "Is there any progress on this issue? \ud83d\ude22\n. ",
    "ctot-nondef": "Whilst the Setting of withCredentials is working(on both instantiated and directly created) , passing custom XSRF headers still is not: \njs\naxios.post('https://testtest.com/api/v1/entity/', e, {\n    withCredentials: true,\n    xsrfCookieName: 'csrftoken_testtest',\n    xsrfHeaderName: 'X-CSRFToken',\n})\nincludes all cookies, however does not extract and set the mentioned xsrfheader (even though the cookie is definitely present!) - \nam I holding it wrong?\n. ",
    "gyzerok": "Have same issue. There is no way now to use library in the project because of that.. ",
    "dimkinv": "I'd like this pull request to be merges as well. Very useful for projects written in TypeScript.\nThanks for this fix. I'd like this pull request to be merges as well. Very useful for projects written in TypeScript.\nThanks for this fix. ",
    "3plusalpha": "Would also like to see it merged!. ",
    "johngibbons": "Also having this problem and verified that we are getting 400 and false returned from validateStatus using the following:\naxios.defaults.validateStatus = function (status) {\n  console.log(status);\n  console.log(status >= 200 && status < 300);\n  return status >= 200 && status < 300;\n}. yup was getting undefined due to not returning Promise.reject(error).  That solved it thanks. ",
    "borov333": "Thanks guys for helping out. It turned out to be that my return statement was wrapped in the 401 status code check and therefore never returned. More details can be traced in the original post\nHere is the fix I applied and it started to work:\napi.interceptors.response.use(\n  function (response) {\n    // continue sending response to the then() method\n    return Promise.resolve(response)\n  },\n  function (error) {\n    // check if unauthorized error returned\n    if (error.response.status === 401) {\n      router.replace({ name: 'Signin' })\n    }\n    // request is rejected and will direct logic to the catch() method\n    return Promise.reject(error)\n  }). ",
    "kylecho": "Thanks @borov333, for me, not returning Promise.resolve(response) from the helper method api.interceptors.response.use was what was causing the problem.. ",
    "ashwintastic": "ThnQ it worked :). ThnQ it worked :). interceptor executes after a request is made or after a response is received... Is there anything in axios which can trigger a logic before a get/post is made !!. interceptor executes after a request is made or after a response is received... Is there anything in axios which can trigger a logic before a get/post is made !!. ",
    "johnmerced": "I'm having the same issue!\nHere's a GIF to demonstrate it:\n\nMy code looks similar to this:\n```javascript\n// Progress\n var config = {\n     onUploadProgress: function (progressEvent) {\n          let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total)\n          console.debug('onUploadProgress called with', arguments, 'Percent Completed:' + percentCompleted)\n     }\n}\n// Call API\naxios.get(endpoint, data, config)\n```. ",
    "davidjor-hpan": "@johnmerced Did you get solution ?\n. ",
    "mtrabelsi": "@Klaasvaak : the error is already provided in the attached gif \n\nAlso are you sure it's not the default browser error logging?\n\nNice catch! I'll check this now... Yes, it's from the xhr.js.\nI actually tried to make a PR, but we need to check it first, if it's a known issue?\nThat being said, it's ugly having ton of errors in the console this is a bad experience to the user.\n. Arf.. Also it's seems that it's not even possible to solve  with only Javascript..  Thanks for your sample! @Klaasvaak . ",
    "maxKimoby": "Setting request.headers['Content-Type'] = 'application/json; charset=utf-8'; does not work either. \nWhen using request.headers.common['Content-Type'] = 'application/json; charset=utf-8';, the Content-Type is correctly set on the returned request value but it does not apply to the rest of the flow.\nThis issue seems to be happening only on GET requests. The request.headers object contains the following keys : common, put, patch and post. Where are the headers for the GET requests?. Bump. Any ideas on this? . ",
    "camerow": "I am not able to set { headers: { 'Content-Type': 'application/json' } } right now on a request either.. ",
    "zs-sz": "does anybody know why google are against this? . ",
    "simonsmith": "Yes. I currently am. \nhttps://github.com/facebook/react-native/blob/master/docs/Networking.md#using-other-networking-libraries. ",
    "itxuye": "@simonsmith That's cool . Thanks .  . ",
    "raphox": "Updated url to doc: https://facebook.github.io/react-native/docs/network.html#using-other-networking-libraries. Updated url to doc: https://facebook.github.io/react-native/docs/network.html#using-other-networking-libraries. ",
    "jicjjang": "Just using async/await...?. ",
    "stsourlidakis": "According to this test  it seems to be the expected behavior. \nIn order to get around it you could probably use the \"paramsSerializer\" method.. ",
    "marksauter": "I'll look into that, thank you.. ",
    "uniquejava": "Thank you @kmmbvnr , but I'd rather this was a built-in behavior when handling arrays (checkbox values)\nPS:\nI finally found that this is not a problem, I don't have to use paramsSerializer, as I can easily get the params from backend(Spring Boot) like this:\njava\n@GetMapping()\npublic String search(@RequestParam(name = \"country[]\") String[] country). ",
    "steniowagner": "Refactoring @AndreyPatseiko 's answer to ES6+ style:\n```\nconst parseParams = (params) => {\n  const keys = Object.keys(params);\n  let options = '';\nkeys.forEach((key) => {\n    const isParamTypeObject = typeof params[key] === 'object';\n    const isParamTypeArray = isParamTypeObject && (params[key].length >= 0);\nif (!isParamTypeObject) {\n  options += `${key}=${params[key]}&`;\n}\n\nif (isParamTypeObject && isParamTypeArray) {      \n  params[key].forEach((element) => {\n    options += `${key}=${element}&`;\n  });\n}\n\n});\nreturn options ? options.slice(0, -1) : options;\n};\n```\nand\n```\naxios.get('api/', {\n   'params': {'country': ['PL', 'RU'], 'nacionality': 'FOO' } // result: country=PL&country=RU&nacionality=FOO\n'paramsSerializer': params => parseParams(params) \n});\n```\nBTW, thank you, @AndreyPatseiko! Your answer helped me a lot!. ",
    "ckken": "same problem. same problem. Fixed  it  add expose . Fixed  it  add expose . ",
    "OmgImAlexis": "I'm on ^0.15.21.\nTry post as that's where I'm getting the issue.. Okay this is weird. Testing in the node cli I get different results than I do inside of Vue 2.\nimport 'axios' from 'axios';\nlet baseUrl = 'http://localhost:8081/api/v2';\nlet idToken = '';\nlet username = 'xo';\nlet password = 'fakePassword';\nconst api = axios.create({\n    baseURL: baseUrl,\n    timeout: 10000,\n    headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'X-Api-Key': idToken\n    }\n});\napi.post('auth/login', {\n    username: username,\n    password: password\n}).then(function(response) {\n    console.log(response.headers); // { content-type: \"application/json; charset=UTF-8\" }\n});\nWhere as using node via cli I get this.\n```\n\nlet axios = require('axios');\nlet baseUrl = 'http://localhost:8081/api/v2';\nlet idToken = '';\nlet username = 'xo';\nlet password = 'fakePassword';\nconst api = axios.create({\n    baseURL: baseUrl,\n    timeout: 10000,\n    headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'X-Api-Key': idToken\n    }\n});\napi.post('auth/login', {username: username, password: password}).then(function (response) {console.log(response.headers)}).catch(function(error){console.log(error)});\nPromise {  }\n{ 'content-length': '46',\n  'access-control-allow-methods': 'POST, OPTIONS',\n  'x-medusa-server': 'v0.1.8.1',\n  vary: 'Accept-Encoding',\n  server: 'TornadoServer/4.3',\n  date: 'Wed, 21 Dec 2016 02:09:19 GMT',\n  'access-control-allow-origin': '*',\n  'access-control-allow-headers': 'Origin, Accept, Content-Type, X-Requested-With, X-CSRF-Token, X-Api-Key',\n  'content-type': 'application/json; charset=UTF-8' }\n```. \n",
    "dmitriid": "Similar problem here for \"axios\": \"0.15.2\",. The response object contains no headers.\nMore info: Page on http://localhost:8000/ with requests towards http://localhost:9000/. The server has Access-Control-Allow-Origin set to *.\nSample session:\naxios.request({\n    method:  \"POST\",\n    url:     \"/api/login\",\n    baseURL: \"http://localhost:9000\",\n    data:    \"...some....data...\",\n    headers: {},\n    params:  {}\n  })\n```\nRequest URL:http://localhost:9000/api/login\nRequest Method:POST\nStatus Code:204 No Content\nRemote Address:[::1]:9000\nResponse Headers\nAccess-Control-Allow-Origin:*\nDate:Thu, 29 Dec 2016 15:34:21 GMT\nServer:Jetty(9.3.4.v20151007)\nVary:Origin\nX-Location:/users/252\nRequest Headers\nAccept:application/json, text/plain, /\nAccept-Encoding:gzip, deflate, br\nAccept-Language:en\nCache-Control:no-cache\nConnection:keep-alive\nContent-Length:56\nContent-Type:application/x-www-form-urlencoded\nHost:localhost:9000\nOrigin:http://localhost:8000\nPragma:no-cache\nReferer:http://localhost:8000/users/login\nUser-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36\n```. ",
    "ishen7": "how to resolved? please tell me?. ",
    "shangxinbo": "I got the same problem.what's the resolvation?. \u54c8\u54c8\uff0c\u56fd\u4eba\u4eba\u559c\u6b22\u7c98\u4ee3\u7801\uff0c\u5b66\u4e0d\u4f1a\u8868\u8ff0\u95ee\u9898\u3002\u53e6\uff1a\u4f60\u7684\u573a\u666f\u63a8\u8350\u4f60\u7528request\uff0caxios\u65e0\u80fd\u4e3a\u529b\uff0c\u6211\u6709\u4e00\u4e2a\u722c\u866b\u9879\u76ee\u548c\u4f60\u9047\u5230\u7684\u95ee\u9898\u662f\u4e00\u6837\u7684\uff0caxios\u548csuperagent\u6211\u90fd\u8bd5\u8fc7\u4e86\uff0c\u4e0d\u597d\u4f7f\uff0c\u4f46\u662frequest\u8f7b\u677e\u65e0\u538b\u529b. \u54c8\u54c8\uff0c\u56fd\u4eba\u4eba\u559c\u6b22\u7c98\u4ee3\u7801\uff0c\u5b66\u4e0d\u4f1a\u8868\u8ff0\u95ee\u9898\u3002\u53e6\uff1a\u4f60\u7684\u573a\u666f\u63a8\u8350\u4f60\u7528request\uff0caxios\u65e0\u80fd\u4e3a\u529b\uff0c\u6211\u6709\u4e00\u4e2a\u722c\u866b\u9879\u76ee\u548c\u4f60\u9047\u5230\u7684\u95ee\u9898\u662f\u4e00\u6837\u7684\uff0caxios\u548csuperagent\u6211\u90fd\u8bd5\u8fc7\u4e86\uff0c\u4e0d\u597d\u4f7f\uff0c\u4f46\u662frequest\u8f7b\u677e\u65e0\u538b\u529b. ",
    "mark4321": "I have an api call with a header token of  \"Authorization: Bearer xxxxxxxx\", sometimes it works, sometimes not.\nWhen I check the log file at server side, found the token sometimes is transmited complete, sometimes is not.\nAny ideas?\ndeleteImages (cb, pic, accessToken, cbError = null) {                  \n    axios.delete(APIURL + '/img/delete/' + pic.img_id + '/' , {headers: {'Authorization': 'Bearer ' + accessToken}})\n    .then(response => {                                                       \n      cb(response.data)                                                       \n    })                                                                        \n    .catch(e => {                                                             \n      if (cbError) {                                                          \n        cbError(e)                                                            \n      }                                                                       \n    })                                                                        \n  }      \n. ",
    "xveganxxxedgex": "I'm running into the same issue. \naxios.interceptors.response.use(resp => {\n  console.log('response is fine', resp, resp.response);\n  return stopRecording(resp);\n}, resp => {\n  console.log('response is bad', resp, resp.response);\n  return stopRecording(resp);\n});\nThat prints out this for success:\n\nAnd this on unsuccessful request (even though this is actually happening in the first success callback method -  it never actually reached my 'response is bad' handler, so it's not triggering an actual error?):\n\nSo on success, the resp is the actual response object, where you can call resp.status and such. But on error, you'd have to call resp.response to get to the actual response object. I would expect the behaviour to return the actual response object (so what it currently does for success) on both success and error? Is this a misunderstanding on my end?\nThanks!. ",
    "kemaltatar": "```js\nimport axios from 'axios';\naxios.interceptors.response.use(function (response) {\n  // Do something with response data\n  return response;\n}, function (error) {\n  console.log(' This is not called ');\n  return Promise.reject(error);\n});\nconst instance = axios.create({\n    baseURL: someBaseUrl\n})\nconst otherInstance = axios.create({\n    baseURL: someOtherBaseUrl \n})\ninstance.get('/');\n```\nIs there a way to use an inherited default interceptor like this ? \nBecause i have many instances but i want them to be handled by only one interceptor. ",
    "altinselimi": "Hello, so how would I go about accessing a relative path after I've set my baseURI?\nFor example: baseURI is 'http://myapi.com', and I want to call '/config.json' from the path I am right now (localhost:8080/config.json)?. ",
    "sanusart": "You suppose to read it from error.response.data of the .catch() as it documented in handling-errors:\nuploadFile(file) {\n  importFile(file)\n    .then(response => {\n      console.log(response);\n    })\n    .catch(error => {\n      if (error.response) {\n      // This will have your response data as object  \n      console.log(error.response.data);\n     }\n    });\n}. ",
    "paladin2005": "@dlakata how do you fixed this problem???. ",
    "rap1ds": "Axios is using follow-redirects package under the hood. Based on this Issue, it might be that this is a bug in follow-redirects, and not in Axios itself.\nTry this: set maxRedirects config to 0. This will make Axios to use native Node.js http or https module, instead of follow-redirects.\nIf this solves the issue, then it is a strong signal that the bug is probably in follow-redirects package.. ",
    "ebertlast": "Configure the base path with interceptors\nimport axios from 'axios'\nimport join from 'url-join'\nvar isAbsoluteURLRegex = /^(?:\\w+:)\\/\\//;\naxios.interceptors.request.use(function(config) {\n  if ( !isAbsoluteURLRegex.test(config.url) ) {\n    config.url = join('https://jsonplaceholder.typicode.com/', config.url);\n  }\n\n  return config;\n});\n. ",
    "ryanhomer": "Does anyone know why caching doesn't work under Android? According to the user-agent string that it sends, the underlying http layer is okhttp/3.8.1 which seems to have full support for cache headers.\nI'm currently using axios with React Native. Caching works perfectly under iOS but doesn't function at all under Android (Galaxy S6, Android 6.0.1).. Found this: Networking on Android doesn't use Cache. When creating the OkHttpClient, no cache file is initialized.. ",
    "PierBover": "Any way to determine the download progress of a request?. ",
    "jrtnq514": "@PierBover Use onDownloadProgress instead of onUploadProgress. Found it in the Request Config section here https://github.com/mzabriskie/axios.\nHope this helps!\nUPDATE: Found this issue https://github.com/mzabriskie/axios/issues/928. ",
    "jayzyaj": "How can I track the complete progress from 0 - 100%? I always got 0 or Nan and 100. ",
    "jcmidia": "Hi all! Is it possible to use onDownloadProgress with the axios.all function?. ",
    "li-xinyang": "@jcmidia download is handled by the browser, right?. ",
    "aprilmintacpineda": "Hey guys, you can use the intercetor if you want to handle this in a global form. Like so:\n```js\nimport Axios from 'axios';\nfunction onUploadProgress (ev) {\n  console.log(ev);\n  // do your thing here\n}\nfunction handleUploadProgress (ev) {\n  console.log(ev);\n  // do your thing here\n}\nAxios.interceptors.request.use(config => {\n  ...config,\n  onUploadProgress,\n  onDownloadProgress\n});\n```\nAdd those codes on your entry file, then on your other files (views or components):\naFile.js\n```js\nimport Axios from 'axios';\nfunction makeRequest () {\n  axios.get('/to/path')\n  .then(({ data })=> {\n    console.log(data);\n  });\n}\n```\nanotherFile.js\n```js\nimport Axios from 'axios';\nfunction makeRequest () {\n  axios.post('/to/path', data, yourConfigIfAny)\n  .then(({ data }) => {\n    console.log(data);\n  });\n}\n```\nget use the onDownloadProgress, other requests use the onUploadProgress. (Please mention me for any corrections)\nThere's a trade off to this. If you sent multiple requests it would be up to you to maybe sum their total and their loaded to get the total percentage of the progress.\nYou can modify the code above a little bit to be more flexible like so:\n```js\nimport Axios from 'axios';\nfunction onUploadProgress (ev) {\n  console.log(ev);\n  // do your thing here\n}\nfunction handleUploadProgress (ev) {\n  console.log(ev);\n  // do your thing here\n}\nAxios.interceptors.request.use(config => {\n  ...config,\n  onUploadProgress: config.onUploadProgress || onUploadProgress,\n  onDownloadProgress: config.onDownloadProgress || onDownloadProgress\n});\n```\nNow you can provide a custom onUploadProgress and onDownloadProgress handler, it will adjust accordingly.\n```js\nimport Axios from 'axios';\nfunction customOnUploadProgress (ev) {\n  console.log('customOnUploadProgress', ev);\n}\nfunction makeRequest () {\n  axios.post('/to/path', data, {\n    onUploadProgress: customOnUploadProgress\n  })\n  .then(({ data }) => {\n    console.log(data);\n  });\n}\n``. I think I got what's wrong. Since it's cors the browser is throwingAccess-Control-Allow-Originbut then, why the hell is the file there with response of 200... That does not make sense at all.... I think I got what's wrong. Since it's cors the browser is throwingAccess-Control-Allow-Origin` but then, why the hell is the file there with response of 200... That does not make sense at all.... ",
    "LorrainInfinity": "Hi guys.  I followed what you told us, but sadly, just like @jayzyaj , I'm always getting \"100\" as a result, both on upload/download.  Do you know where that could come from?  My code is very similar to @aprilmintacpineda , an interceptor, and then I just copied/pasted the 2 functions.. ",
    "seemlessly": "Only 100% can be fired in case your upload files are too small, or download/upload speed is too fast. Try to upload 10mb file maybe.\nAlso same issue for me was solved with \n\nupload: data => axios.post(\n   \"api/\",\n    data,\n    {\n      headers: { 'Content-Type': 'multipart/form-data' },\n      onUploadProgress: (progressEvent) => {\n        const percentCompleted = Math.floor((progressEvent.loaded * 100) / progressEvent.total);\n        // dispatch\n      },\n    },\n  ),\n};\n\nconfiguring axios requests with object was an issue, as axios({method: \"\",  config: {}, data: data}). ",
    "Chathula": "you need to enable CORS(cross-origin resource sharing) from the server(API) side\nwhat do you use for API? if you use Framework like laravel, you can use a package like Laravel-cors . if not, try below methods.\nyou can add this code into your API . (DEV Only)\nheader(\"Access-Control-Allow-Origin: *\");\nfor production you can use something like this...\n```php\n    function cors()\n    {\n        $domains = ['http://localhost:8080'];\n    if (isset($_SERVER['HTTP_ORIGIN'])) {\n        $origin = $_SERVER['HTTP_ORIGIN'];\n        if (in_array($origin, $domains)) {\n            header('Access-Control-Allow-Origin: ' . $origin);\n            header('Access-Control-Allow-Headers : Origin, Content-Type, Authorization');\n        }\n    }\n}\n\n```\nusing this, if you want you can give access only to the specific client domains.\nNote: if you use something instead from php for Server API, you have to implement this into that.\n. give a try by creating a instance...\n```javascript\n// Set config defaults when creating the instance\nvar instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n// Alter defaults after instance has been created\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```. ",
    "ryannealmes": "This was happening to me as well and I thought it was axios. Thought I would just pass on the way post that help me solve it in a couple of minutes :) \nCORS with nginx for 401-404-501 and any other http status\nSorry for thinking it was axios :P. It would be great for someone with knowledge on the internals of axios to potentially explain why axios couldn't provide a response even though the response is clearly in the network tab. I know the issue is clearly CORS related, but why is this preventing CORS from getting to the information even though the browser has it.\nCurios cat here \ud83d\udc31 . ",
    "hyosh": "I've solved it,\nThe probleme was in an other axios.get()\nand the url was undefined. ",
    "shapl": "// Vue.use(axios) \nok\u3002\u3002\u3002. ",
    "michaelbrawn": "I was getting this with \nVue.use(axios, VueAxios);\nInstead of the correct \nVue.use(VueAxios, axios);. I was getting this with \nVue.use(axios, VueAxios);\nInstead of the correct \nVue.use(VueAxios, axios);. ",
    "davidsneal": "Old issue, but for anyone that might have a facepalm moment such as myself...\nI was using a new process.env as the URL I was calling (Vue project), and hadn't stop/started npm run dev.. ",
    "Billy-": "This should be a comment on that issue.... Without an equals to me should denote a boolean true. null and undefined are both \"empty\" values and so I would argue this is equivalent of an empty string.\nThe fact that a property exists on the query object to me means that you want something to be passed through. If you don't want something in your query string then surely you should not have that property on your params object in the first place?. This is nothing to do with axios... That is how promises work. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\nReturn what you want to pass on in the catch. ",
    "lephuhai": "Hi @Chathula, I also research about to handle this. You can using validateStatus config in this case.\nSee about this here !. ",
    "achilleskineur": "validateStatus work Fine \nThank you. ",
    "Bilal112": "\n. getting this error how can solve it\n. ",
    "guastallaigor": "@Bilal112 Did you try catching the error with error.response.data.error? See example:\nthis.$http.$post('url', user).then((response) => {\n  //\n})\n.catch((error) => {\n  this.showErrors(error.response.data.error)\n})\nBtw, i'm using Nuxtjs and axios module.. ",
    "c0b": "have an issue with socks5 either, from https://github.com/mscdex/socksv5 I can create by new socks.HttpAgent({ ... }) make it work with node builtin http request, but with this axios.request httpAgent, it seems ignoring the proxy; does anyone have progress here?. ",
    "jiangfb": "Answer is here:\nhttps://medium.com/@paynoattn/using-a-socks-proxy-to-make-requests-in-node-js-ba5125c7999f. ",
    "SimonSchick": "FYI this applies to both XHR and NodeJS adapters.. ",
    "mikeynova": "@firaskrichi I'm having the same issue that you were dealing with. Could you tell me how you resolved this? \nI'm a little confused as to how you did it based off of the past few comments here.. ",
    "rugaard": "I also have this issue. I'm uploading images as well.\nI'm testing the upload request with a 10 MB image. The onUploadProgress returns 100% almost instantly and then the promise returns successfully after a whole 9-10 seconds.\n@rubennorte Can you maybe help out with an example or a snippet of what you mean? I'm not greatest JS coder, so a little help would be much appreciated \ud83d\ude0a. ",
    "Sharklegs": "I have this issue too.\nonUploadProgress console.log() only once and the percent is 100%\nimage 5m and the network is slow 3g. I have this issue too.\nonUploadProgress console.log() only once and the percent is 100%\nimage 5m and the network is slow 3g. ",
    "YL2014": "@Sharklegs The same with you. Did you resolved  that ?. @hetzbr Thanks, that worked for me. when the server was running on localhost, if i visit the server http://127.0.0.1:port rather than http://localhost:port, theonUploadProgresswill called many times. ",
    "arist0tl3": "Dropping this here in case it helps anyone:\n```\nconst options = {\n  headers: {\n    'Content-Type': file.type,\n  },\n  onUploadProgress: (progressEvent) => {\n    const { loaded, total } = progressEvent;\n    // Do something with the progress details\n  },\n};\naxios.put(url, file, options)\n  .then(() => {\n    // Do your complete callback\n  });\n```. ",
    "hetzbr": "@Sharklegs \nProblem for me was that my server was running on localhost. If you host the server it works just fine. @yashSrijan try running your server on a different machine (ex: VM, docker, etc.). ",
    "cahyowhy": "i have this issue too. i try both in localhost & 127.0.0.1 . but its still same. ",
    "yashSrijan": "i am facing the same issue.. the progress bar immediately goes to 100 % but the actual response comes seconds later.. i tried this with files of 40 to 50MB. ",
    "bledarhaxhia": "I think this is not a problem. If you are using a web server locally this upload is instantaneously and show just 100% value. Try to throttle the request in chrome and this will show some other numbers before upload is completed.. ",
    "tsnolan23": "I am also getting this error and tried the resolutions steps as well, but nothing seems to resolve it.. @kfir91 Thanks for the suggestion, it worked for me as well.. ",
    "kfir91": "I solved the problem.\ni downgrade my react-native version to 0.35.0 and the problem was solved.. ",
    "tsongas": "I recently had a similar issue and it turned out that the browser's OPTIONS request, which is made in advance of a GET or POST, didn't include the auth info and so the actual GET or POST was never made due to the OPTIONS request error. However, the first error you show is a CORS error. Hmm..... I recently had a similar issue and it turned out that the browser's OPTIONS request, which is made in advance of a GET or POST, didn't include the auth info and so the actual GET or POST was never made due to the OPTIONS request error. However, the first error you show is a CORS error. Hmm..... Also tried this and it didn't work either:\naxios.defaults.baseURL = ROOT_URL;\naxios.defaults.headers.common['Authorization'] = localStorage.getItem('token');\naxios.get('/path'). Also tried this and it didn't work either:\naxios.defaults.baseURL = ROOT_URL;\naxios.defaults.headers.common['Authorization'] = localStorage.getItem('token');\naxios.get('/path'). I'm having the same problem with the fetch API, where I'm getting the error \"Response for preflight has invalid HTTP status code 401\" so I think IIS is doing something to block my requests before they are even made. Will investigate further..... I'm having the same problem with the fetch API, where I'm getting the error \"Response for preflight has invalid HTTP status code 401\" so I think IIS is doing something to block my requests before they are even made. Will investigate further..... It turned out to be the browser's OPTIONS request, which apparently gets made before any other type of request, that was borking because it didn't include the required auth header. So, I tweaked my API to not require auth credentials for OPTIONS requests, now that I know they exist. Derp.. It turned out to be the browser's OPTIONS request, which apparently gets made before any other type of request, that was borking because it didn't include the required auth header. So, I tweaked my API to not require auth credentials for OPTIONS requests, now that I know they exist. Derp.. ",
    "nikea1": "Ah, I think I saw something about OPTIONS in my error as well. That was what threw the 401 error code I think. So then how do you make the OPTIONS request take the key and secret? I tried setting them as a header but it still wouldn't take it.. ",
    "kohkimakimoto": "I have same issue.. My issue was about OPTIONS request. Now I don't have any workaround to send auth info with OPTIONS request. But I solved the problem by modifying the server (nginx) configuration to disable basic auth only when clients send OPTIONS requests.\nMy configuration like the following:\nlocation / {\n    if ($request_method = OPTIONS ) {\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Allow-Methods \"POST, GET, OPTIONS\";\n        add_header Access-Control-Allow-Headers \"Origin, Authorization, Accept, Content-Type\";\n        add_header Access-Control-Allow-Credentials true;\n        add_header Content-Length 0;\n        add_header Content-Type text/plain;\n        return 200;\n    }\n    auth_basic \"Restricted\";\n    auth_basic_user_file /path/to/passwordfile;\n}. ",
    "johnharris85": "Same issue here. OPTIONS gets made a preflight request and the server (which I have no control over) requires auth information and I get a 401. Anyway to make OPTIONS send auth details?. ",
    "johan-lejdung": "I just solved this as well by not using axios.post(), instead using axios(). In my case the OPTIONS request was accepted by the server, but the following POST didn't have any headers in it.. ",
    "SLCH": "Had same issue - was just fine everywhere but in IE.\nSwitching to fetch did not help.\nSwitching to axios() did not help.\nAdding site to site lists of 'Local intranet', 'Trusted sites' did not help.\nRemoving Kerberos/negotiate did not help. ( https://stackoverflow.com/questions/16222946/remove-negotiate-from-windowsauthentication-in-iis )\nIssue was, site was not in Intranet zone.\nTemorary switching from\n'Automatic logon only in Intranet zone'\nto\n'Automatic logon with current user name and password'\nin\n'Internet options'-'Security'-'Internet' zone-'Custom level'-'User Authentication'-'Logon'\nsolved it for me.\nSooo... it was kinda my bad :man_facepalming: . Had same issue - was just fine everywhere but in IE.\nSwitching to fetch did not help.\nSwitching to axios() did not help.\nAdding site to site lists of 'Local intranet', 'Trusted sites' did not help.\nRemoving Kerberos/negotiate did not help. ( https://stackoverflow.com/questions/16222946/remove-negotiate-from-windowsauthentication-in-iis )\nIssue was, site was not in Intranet zone.\nTemorary switching from\n'Automatic logon only in Intranet zone'\nto\n'Automatic logon with current user name and password'\nin\n'Internet options'-'Security'-'Internet' zone-'Custom level'-'User Authentication'-'Logon'\nsolved it for me.\nSooo... it was kinda my bad :man_facepalming: . ",
    "JerryLeeCS": "+1. ",
    "maxzhou0": "same method, post worked,and get didn't. i changed my api method from get to post on the server and client, i got the expected result.\nseems use axios.get can't send basic auth to server. ",
    "sepehr": "It has nothing to do with the http client, no matter Axios or others. Server should be configured in a way that it allows non-authenticated OPTIONS requests. Read more.. Sure, we can made a credentialed request to a protected endpoint. However, the thing is that we can\u2019t control browser\u2019s preflight request with Axios or any other http client. @GabrielDelepine. ",
    "GabrielDelepine": "@sepehr I agree but Axios still provide the withCredentials option.\nSome API is not perfect but we still have to deal with, unfortunately.. @sepehr preflight request is made by the browser, I understand this point.\nBut on the current documentation of axios, the option withCredentials pretends to be able to control the behaviour of preflight request.\n\nCurrently, on Chrome 70, this withCredentials does not work for me.\nAt this point, I don't know if it's an Axios issue or a new policy from the newest version of Chrome and Firefox.\n. ",
    "PRABIRSOFT": "In server side try to add this block with your response head\nres.header('Access-Control-Allow-Origin', 'http://' + url.parse(req.headers.referer).host)\nres.header('Access-Control-Allow-Credentials', true)\nres.header('Access-Control-Allow-Methods', 'GET, POST')\nres.header('Access-Control-Allow-Headers', 'X-Requested-With,content-type,authorization')\n. ",
    "L-Jovi": "@rubennorte  thanks for your reply, but in react native chrome debug network, I can't watch history of request from js side like below image, it only record local behaviour of request\n\n. ",
    "hoangtubatu": "Timeout doesn't work too on react native 0.39\nThis is my code:\n        axios.get('http://10.0.2.2:8080/api/login', {\n            params: {\n                name: 123,\n                pass: 456,\n            },\n            timeout: 1000,\n        })\n            .then((response) => {\n             // code here\n            })\n            .catch((error) => {\n             // code here\n            });. ",
    "Lxxyx": "Same problem.. ",
    "robcaldecott": "Same issue here with Chrome (Windows). Chrome seems to ignore any timeout setting. I'm setting it when making a request like this:\njs\naxios({\n  url: 'myurl',\n  method: 'post',\n  data: data,\n  timeout: 1000\n})\n. ",
    "camflan": "Same, timeout doesn't work - I've implemented my own timeout functionality using CancelToken. I'd love to remove this cancelling boilerplate. @talwaserman I think we'll need more information. I, and many others, successfully use yarn to install this lib. I've never \"enabled yarn\" in any of my published npm packages and it hasn't caused any issues. @adeelibr I wrote an example of how to get this working a while back. It could be updated or incorporated into the document. Feel free to use it in a PR\nhttps://github.com/axios/axios/issues/647#issuecomment-310204008. ",
    "MrLyfing": "Still doesn't work on me either using React Native 0.42.3 .. \n@camflan Would you show how you implemented your own timeout functionality with CancelToken ? Thanks :) . ",
    "zhuyifan2013": "same issue!!. I found the timeout in  axios is response timeout , not connection timeout , for example if you connect a local ip address 192.168.11.11 which dose not exist, it will take a long time , the timeout looks like invalid , but if you connect to a normal , well-connected server , the timeout take effects.\nMy platform is react-native.\nSo I solve this problem by the method provided by @camflan , thanks very much , my code : \n```javascript\nconst connectToServer = ip => {\n    let source = CancelToken.source();\n    setTimeout(() => {\n        source.cancel();\n    }, 300);\n    return axios.get(ip + '/config', {cancelToken: source.token}).then((result) => {\n        // My logic\n    })\n};\n```. ",
    "robomc": "Is there a reason to think this is fixed? There's no code change referenced in this or the linked Axios ticket.. ",
    "dekm": "I'm seeing the same issue.  Looks like axios doesn't work with latest RN.\nI've tried cleaning the gradlew cache and reinstalling everyhthing but none of that works.. ",
    "lopezjurip": "+1. ",
    "agarcia17": "+1. ",
    "davebro": "+1. ",
    "shirilad": "+1. ",
    "jussisaurio": "+1. ",
    "wyvasi": "+1\nIf you're doing some sort of tutorial like me you can use fetch instead of axios, check it here\nhttps://facebook.github.io/react-native/docs/network.html. ",
    "anthony-skr": "+1. ",
    "AndrewMarkley": "+1. ",
    "GantMan": "+1\n. https://github.com/facebook/react-native/issues/11498#issuecomment-273972902. @oun - yes, see my link above.. ",
    "wilomgfx": "+1. ",
    "Jacob-Allen": "I am aware it is an issue with this version of RN, but none of my other packages where experiencing this issue when using RN 0.40.0, so I assumed this issue belonged here. . As mentioned in my original post, you can use an older version of RN. \nRubennorte has also made progress with addressing this issue with the RN team and this issue is supposedly going to be fixed in RN 0.41. ",
    "Gvade": "Still +1. ",
    "t2": "+1\n. +1\n. ",
    "oun": "Is there any workaround?. Thanks @GantMan. Does this work on Mac OS machine?. ",
    "franzejr": "@rubennorte, it works on the RN 0.41 version! Cool!. ",
    "jinxac": "its working for me on RN 0.40. But after reading the comments here I am little confused. Is it suppose to work?\nP.S axios version: 0.15.3. ",
    "learntoswim": "I came here because I'm also having problems changing the default headers after they've been set globally, although; I'm using vue-axios @ ^1.2.2, and Vue @ 2.1.8 and can confirm:\naxios.defaults.headers.common.Authorization = 'Bearer xxxxx';\nconsole.log(axios.defaults.headers.common.Authorization);\nResults in Bearer xxxxx in my console. Perhaps try with vue-axios?\nAs for this issue, I've tried overwriting the headers in config, and using interceptors, and I cannot for the life of me overwrite the headers after using the axios.defaults... property.. ",
    "fallenner": "Me too. ",
    "xAockd": "Have the same problem. Solved it by creating new file axios.js and import instance of axios instead of global.\n```\nimport axios from 'axios';\nexport default axios.create({\n    headers: {\n        'X-CSRF-TOKEN': '...',\n        'X-Requested-With': 'XMLHttpRequest'\n    }\n});`\n```. ",
    "jacobarriola": "This worked for me, should anyone need a bit more guidance \ud83d\udc4d \n```javascript\nimport axios from 'axios'\nexport default () => {\n  return axios.create({\n    baseURL: 'http://localhost:4444/',\n    headers: {\n      'Authorization': Bearer ${localStorage.getItem('user-token')}\n    }\n  })\n}\n```. This worked for me, should anyone need a bit more guidance \ud83d\udc4d \n```javascript\nimport axios from 'axios'\nexport default () => {\n  return axios.create({\n    baseURL: 'http://localhost:4444/',\n    headers: {\n      'Authorization': Bearer ${localStorage.getItem('user-token')}\n    }\n  })\n}\n```. ",
    "pekosoG": "@robaxelsen im not quite sure of how to use your approach, could you explainme a bit more?. ",
    "ChuckkNorris": "Not totally sure why, but if I set the Authorization header in the axios.create() function, I was unable to change it at a later time.\nI had to initialize the axios instance and set the header separately\n```\nimport axios from 'axios'\nconst axiosApi = axios.create({\n   baseURL: 'http://localhost:5000/'\n});\nexport const setAuthHeader = (token) => {\n   axiosApi.defaults.headers.common['Authorization'] = Bearer ${token};\n}\n// Set the initial header from storage or something (should surround with try catch in actual app)\nsetAuthHeader(localStorage.getItem('ACCESS_TOKEN'));\nexport default axiosApi;\n``. Not totally sure why, but if I set theAuthorizationheader in theaxios.create()` function, I was unable to change it at a later time.\nI had to initialize the axios instance and set the header separately\n```\nimport axios from 'axios'\nconst axiosApi = axios.create({\n   baseURL: 'http://localhost:5000/'\n});\nexport const setAuthHeader = (token) => {\n   axiosApi.defaults.headers.common['Authorization'] = Bearer ${token};\n}\n// Set the initial header from storage or something (should surround with try catch in actual app)\nsetAuthHeader(localStorage.getItem('ACCESS_TOKEN'));\nexport default axiosApi;\n```. ",
    "Nedson202": "This worked for me\n    import axios from 'axios';\n\n    export default function setAuthToken(token) {\n         const instance = axios.create({\n         baseURL: 'http://localhost:4000/'\n    })\n\n    instance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n   }\n\n. ",
    "isaacghorbani": "hi guys just include Bearer in the first of token like this:\naxios.defaults.headers.common['Authorization'] = \"Bearer \"+token;. ",
    "joinjoohny": "Hi, I have same problems.\nExample code:\njavascript\naxios.interceptors.response.use((response) => {\n  if (response.data.error) {\n    return Promise.reject(response);\n  }\n  return response;\n}, (error) => (\n  console.log(error); // result -> Error: Network Error(\u2026)\n));\nHow to get the error ?. Helped for me  https://github.com/mzabriskie/axios/issues/383. ",
    "gentle-noah": "Might as well post my sessionReducer as well:\n```\n// Absolute imports\nimport { browserHistory } from 'react-router';\n// Relative imports\nimport * as types from '../actions/actionTypes';\nconst INITIAL_STATE = { user: null, status: null, error: null, loading: false };\nexport default function sessionReducer(state = INITIAL_STATE, action) {\n  let error;\nswitch (action.type) {\n    case types.LOG_IN_SUCCESS:\n      browserHistory.push('/dashboard');\n      return { ...state, user: action.payload.user, status: 'authenticated', error: null, loading: false };\ncase types.LOG_IN_FAILURE:\n  error = action.payload.data || { message: action.payload.message };\n  return { ...state, user: null, status: 'sign-in', error: error, loading: false };\n\ncase types.LOG_OUT:\n  return { ...state, user: null, status: 'logout', error: null, loading: false };\n\ndefault:\n  return state;\n\n}\n}\n``. Nevermind... misread the docs... needed to usecatchinstead oferror`. ",
    "TigaxMT": "@Spartano You solved the problem ? I'm trying to do the same thing and give me a 401 too and this message \"Authentication failed due to invalid authentication credentials or a missing Authorization header.\"\nMy code here: \n```\naxios.post('https://api.sandbox.paypal.com/v1/oauth2/token', querystring.stringify({\ngrant_type: 'client_credentials',\n\nwithCredentials: true,\n\nheaders:{\n\n    'Accept': 'application/json',\n    'Accept-Language': 'en_US',\n    'Content-Type': 'application/x-www-form-urlencoded',\n},\n\nauth: {\n\n    username: 'ClientID',\n            password: 'Secret'\n}\n\n})).then((response) => {\nconsole.log(response);\n\n}).catch((err) => {console.log(err);});\n```. @Spartano You solved the problem ? I'm trying to do the same thing and give me a 401 too and this message \"Authentication failed due to invalid authentication credentials or a missing Authorization header.\"\nMy code here: \n```\naxios.post('https://api.sandbox.paypal.com/v1/oauth2/token', querystring.stringify({\ngrant_type: 'client_credentials',\n\nwithCredentials: true,\n\nheaders:{\n\n    'Accept': 'application/json',\n    'Accept-Language': 'en_US',\n    'Content-Type': 'application/x-www-form-urlencoded',\n},\n\nauth: {\n\n    username: 'ClientID',\n            password: 'Secret'\n}\n\n})).then((response) => {\nconsole.log(response);\n\n}).catch((err) => {console.log(err);});\n```. I solved it! I made a Gist to show how I solved it if someone needs help: https://gist.github.com/TigaxMT/b57c11df3e4ebd0510858ec3df775efa. I solved it! I made a Gist to show how I solved it if someone needs help: https://gist.github.com/TigaxMT/b57c11df3e4ebd0510858ec3df775efa. ",
    "jcrben": "@yp this is failing eslint https://travis-ci.org/axios/axios/builds/192971788\nit would also be nice to test this - perhaps some sort of fake server response would be the easiest for now. affects IE9, Android < 4.4, zombie.js, \nin terms of returning fake responses, I use https://github.com/node-nock/nock a bit\n@zcei @nickuraltsev @rubennorte. @rubennorte @nickuraltsev small change which seems reasonable, let's keep these small things moving - either it's OK and accepted, or reject with a reason why. or ask for more information\nleaving people in limbo discourages people from helping out. This would help get axios into the semantic versioning update cycle.\n@rubennorte @nickuraltsev . @rubennorte @emilyemorehouse this is just a docs change, should be pretty straightforward to merge. If the plan is to drop a feature in the future, I would prefer to warn users immediately in the docs as soon as that decision is made. The sooner we can get this out there, the less we will force users to rewrite their code.\nAlso, in this case it's recommending a feature which is already widely-supported and understood.. Please use Stackoverflow (https://stackoverflow.com/questions/tagged/axios) for general questions, or chat in gitter (https://gitter.im/mzabriskie/axios).\n@nickuraltsev @rubennorte can we tag this as question / non-issue and close?\n  . Please use Stackoverflow (https://stackoverflow.com/questions/tagged/axios) for general questions, or chat in gitter (https://gitter.im/mzabriskie/axios).\n@nickuraltsev @rubennorte can we tag this as question / non-issue and close?\n  . LGTM - in general, we shouldn't have to mess with removing headers - the user agent (browser) can handle rejecting forbidden headers. Technically that link applies to browser; nodejs prolly has a similar preference altho I'm not sure about the details.\nBtw, I like the idea of preventing the user from shooting themselves in the foot, but I kinda prefer to throw with a helpful error message (strip out those checks when building for prod) rather than messing around with what they've passed\n@nickuraltsev @rubennorte up for merging?\n  . Technically that link applies to browser; nodejs prolly has a similar preference altho I'm not sure about the details.\nBtw, I like the idea of preventing the user from shooting themselves in the foot, but I kinda prefer to throw with a helpful error message (strip out those checks when building for prod) rather than messing around with what they've passed\n@nickuraltsev @rubennorte up for merging?\n  . Err, good point - https://github.com/axios/axios/blob/db44a8f316da7e1f058eaed3556e9a391a2ffd3e/lib/defaults.js#L89 and https://github.com/axios/axios#global-axios-defaults\nWe really need integration tests - this is probably not the right fix.\n  . It looks like you're only updating the build dependencies? Perhaps that's just due to happenstance, but it reduces the risk.\nAlso, sadly, npm@5 doesn't really create reproducible builds with a lockfile - hopefully soon.... Fixed the text, good catch (it was a copy paste).\nI think it would be better to collect donations and dole out money for tasks completed. @contentful can also support by sponsoring time for employees to help out.\nHonestly, this codebase isn't very large or complex. Grokked pretty much the entire codebase in an hour or two. \nOnce more structure is added (esp integration tests) and the backlog is worked thru I doubt it'll need a lot of investment, but where it needs support is boring stuff like fielding questions and so on.. Fixed the text, good catch (it was a copy paste).\nI think it would be better to collect donations and dole out money for tasks completed. @contentful can also support by sponsoring time for employees to help out.\nHonestly, this codebase isn't very large or complex. Grokked pretty much the entire codebase in an hour or two. \nOnce more structure is added (esp integration tests) and the backlog is worked thru I doubt it'll need a lot of investment, but where it needs support is boring stuff like fielding questions and so on.. Can we agree that no (or extremely limited) breaking changes will be made in 1.0 and instead only deprecation warnings will be added? Then the code can be removed in 2.0.\nThis is how both Ember.js (example) and React (example) typically handle deprecations / removals.. The 0 major version rule for semver catches some people off-guards, but 0.18 sounds OK - I'm just hoping can run the new stuff and the old stuff at the same time for a version. Then introducing deprecations along the way in 1.0 and removed in 2.0...\nAs far as tracking assignment to global defaults (https://github.com/axios/axios/tree/14057dc0bd9811a9fda773588f66de9f4aa0f617#global-axios-defaults), maybe a setter with defineProperty() or a proxy?. Something like prettier (https://github.com/prettier/prettier) could handle this automatically. while reworking this nested ternary, please replace void 0 with undefined - we're in strict mode here so undefined is read-only. ",
    "zcei": "Can you please unwind the nested ternary operator? That's really hard to grasp.. Are you sure the issue comes from the Buffer encoding? According to Node's Buffer docs utf8 is the default, so there should be no difference. \nEither way, a more precise issue title would be great, as there were other Nock related issues beforehand. Smth like \"Header serialization should be compatible with nock\" maybe?. @mrchief are you trying to connect to an HTTP endpoint through an HTTPS proxy? Do you have a small code snippet that fails?. @mrchief Did you pass it like this literal value? '127.0.0.1:8888'? Pretty sure it should be 'https://127.0.0.1:8888' then, to indicate your intention to connect via HTTPS. @mrchief thanks for the additional info! \ud83d\ude4f \nThe create vs request thing caused a lot of confusion/issues beforehand, as it is (or at least has been, when I checked last) some kind of weird global shared state, so when you do a request, you're actually using a shared default instance. Maybe there's something wrong with applying this configuration to new instances, but I guess that's out of scope for this PR.\nGlad you faced it, though, so other people can refer to your findings in case they face it as well.. I like the approach you mentioned in Gitter:\n\nfor the codebase to be non-fragile, it would be best to set up docker containers which run axios requests against real servers with various configurations (e.g., node, Apache, nginx, reverse proxies, http versus https, etc)\n\nBut that's a prerequisite the library needs to provide in order to be implemented by PR issuers.\nWe really didn't feel like putting more effort in here, i.e. figuring out ourselves how to properly set up integration testing against different scenarios. In fact we did set up some test environment internally which we developed the solution against.\n\nnon related explanation why\nWe didn't get any good feedback by maintainers, aside from suggesting removing the bundled-up code - which was only introduced after we desperately needed to use the fix for business reasons.\nHow we solved it by mis-using the branch as a dependency in our project wasn't great, though.\n\n\nIn my point of view there should be an active discussion which leads to some documentation for contributors on how the integration set-up is integrated with current test setup (Grunt, delegating to various browsers for testing, bundling) and what is needed to add a new scenario - like the proxies now.\nThat's why the \"Integration test\" TODO has a question mark.\nMe (and I think @Khaledgarbaya as well) would love helping in the discussion, but prior to this, there needs to be some general maintenance submission statement by the owner(s).\nIt has already been moved to an axios organization, but as far as I can see only three people are in there.\nTriaging the 185 issues into (non-)actionable ones and updating the 41 PRs in what they lack to land would be a good start IMHO.\nCodeTriage could help there, but only if there are enough active maintainers who will sift though the yielded PRs. Maybe adding one or two more people with proper rights would help this effort.\nEDIT: I just found out (via Gitter) that Matt actually stepped up and asked for help, which validated and invalidated my points above at the same time.\n  . @jordie23 I'm so sorry that happened again! I've brought the attention to the SDKs team, that this is a not properly handled situation that needs to acted upon.\nI'm super sure we do have versions released that do not rely on the branch, and I asked my fellows to check that as well. As I don't \"own\" the SDK and am not familiar with the release process, I'd rather let them figure it out than just releasing something. I hope you can understand.\nEdit: I've also set the branch to protected now, so that no one should be able to delete it anymore.. @jordie23 I'm so sorry that happened again! I've brought the attention to the SDKs team, that this is a not properly handled situation that needs to acted upon.\nI'm super sure we do have versions released that do not rely on the branch, and I asked my fellows to check that as well. As I don't \"own\" the SDK and am not familiar with the release process, I'd rather let them figure it out than just releasing something. I hope you can understand.\nEdit: I've also set the branch to protected now, so that no one should be able to delete it anymore.. Err, it's finally merged since two weeks \ud83d\ude42  @danieladams456 . Master is still failing due to something that has been merged that breaks IE.\nI'm not a front-end dev, so the likelyhood of me tracing down the IE bug is rather low - I'm not even having a clue how I'd set this up in my non-Windows env \ud83d\ude07 . Noooo, that was the best PR since a good while \ud83d\ude22(scoping defaults to the instance). Can we move this to a seperate issue / PR then, please? \ud83d\ude42. @necevil you're not using the normal proxy configuration for this. You need to pass in an httpsAgent  - this is the agent used for every target HTTPS page (no matter what your proxy is). This agent on the httpsAgent property can for example make a connection to a http proxy. The agent option is intended to be set by yourself whenever it's applicable for it to be used. Bundling this up with Axios and having its usage deep buried in the adapter doesn't seem like a good solution.\nAlso your code disallows any agent to be set from the outside, as the one specified by the user is set here, but gets overwritten afterwards.. @jcrben btw Axios is using XMLHttpRequest, but still the user agent can reject headers there.\nAs your link states correctly, HTTP verbs are not included in the list of forbidden headers, so this functionality has nothing to do with it, but merely shields the user from trying to send crap like { get: [Function] } as headers.. @jcrben btw Axios is using XMLHttpRequest, but still the user agent can reject headers there.\nAs your link states correctly, HTTP verbs are not included in the list of forbidden headers, so this functionality has nothing to do with it, but merely shields the user from trying to send crap like { get: [Function] } as headers.. @jcrben I just stumbled through the code, and it looks like the defaults.headers can contain verb specific default headers.\nE.g. for POST / PUT / PATCH (all three contain a request body) a default content type header is set. That's why they get removed on request \ud83d\udca1 . @jcrben I just stumbled through the code, and it looks like the defaults.headers can contain verb specific default headers.\nE.g. for POST / PUT / PATCH (all three contain a request body) a default content type header is set. That's why they get removed on request \ud83d\udca1 . The dist part will be created by the release tooling and therefore should not be included in a PR. \nApart from this, some indentation seems to have been auto-fixed in a way that it doesn't make too much of sense to the human eye (at least not to mine). In order to enable OpenCollective the issues around the project governance should settle first I guess. I have never worked with it, but assume only collaborators (i.e. members of the org/repo) can manage funds.\nFor the moment, I subscribed to the CodeTriage to get started in the project - that's something we can do without cash.\nAs Contentful's JS client is heavily relying on Axios there's an interest to keep the project running, yes. I can't make any monetary commitments though, but @ohookins might (he brought up the topic in Gitter).\nVery tiny style nit: all the other alt texts are lowercased, the newly introduced is capitalized.. Sorry, I don't have any collaborator rights granted. What we can do is pinging @nickuraltsev & @rubennorte, maybe they can do a quick v0.17.2 hotfix release if they have time \ud83e\udd1e . Sorry, I don't have any collaborator rights granted. What we can do is pinging @nickuraltsev & @rubennorte, maybe they can do a quick v0.17.2 hotfix release if they have time \ud83e\udd1e . Let's just mention them as fixed, but I wouldn't necessarily close them before it lands in master / the first alpha is released. @mividtim those three lines should still be merge-able afterwards, the HTTP adapter won't change much.\nFor a timeline, there's nothing specific, but we have everything mentioned in Pull Requests ready. The branches will be updated one-by-one to the latest of release/1.0.0 when I open them as PRs. Then it's mainly about reviews - and for the last one (Change external surface) I expect some discussions (but the overall direction was discussed with Matt already).\nAfter that, we should give people some time trying the alpha, which will be the most blocking part time-wise I guess.. Ah there are even issues for that - thanks for pointing out. @Khaledgarbaya can add them to the list of issues.. As noted in the readme & how SemVer works, we could do a 0.18 with the deprecations, once we have a quite stable alpha for 1.0, and know exactly which implications will happen.\nI personally don't see the value in losing the \"symbolic act\" of a v1.0 to only add deprecations.\nEverything that we're planning to get rid of can be achieved today, expect for a more deterministic global config (no mutation, changed defaults don't propagate to already created instances). \nAny idea how we could track that people use defaults that have been added after an instance has been created? Then we could trigger a deprecation warning only for these use-cases. And already provide the method to change defaults instead of the axios.defaults assignments.. Proxy was my first thought as well, but might be hard to bring to older versions of browsers. (Polyfills / transpilations could increase bundle size to an unknown extend).\ndefineProperty setter sounds good, but then we can only give a generic deprecation, that one should use <insertYetToBeDefinedMethodNameHere> instead of mutating - doesn't fix the case of warnings for using modified defaults in an instance that was created before.. The PR Karma with Webpack config (see #1333 for details on order of PRs) will fix the test setup. Currently the provided config is incompatible with Webpack, but for overview purposes the PR for changing Karma is split up to its own PR. Webpack's configuration object is a low-level format, that nearly no-one grasps fully. Therefore it's error prone and not easily to relate single lines to the functionality it should enable.\nTherefore a composable higher-level abstraction was chosen, that makes obvious what shall be achieved, which can get expanded to the verbose lower-level syntax.. Indeed. But given the fact what it takes to learn configuring Webpack properly (also in its different versions) and how often there's a need to change this config later (very few) the readability was my main driver.\nEven when you don't know the library, reading it gives you a pretty clear idea on what's going on (of course that's only my opinion \ud83d\ude42 ). These are most likely to be resolved in the future PRs. This is only about auto-fixable stuff for a good foundation, as there is no manual review needed.. While I have a general tendency to like Jest, I haven't really worked with it yet - while migrating the karma specs I did a small research and read it would be quite painful to have Jest running in a Browser environment via Karma.\nSo @axe312ger decided to have the unit tests use the same lib as the specs, so we don't mix & match test suites.. Sure, I just kept that for visibility. As we currently have no replacement for usebanner & coverage.\nAt least something for coverage would be nice in mid-term. But probably CodeCov instead of CoverAlls?\nThen I'd be fine with just getting rid of everything now and introduce proper new tooling later.. > Fixing the tests itself is another PR, I guess @zcei?\nNext PR is adjusting the tests itselfs (removing some tests that will be obsolete, requiring instead of globals, etc)\nIn \"TDD\" approach the tests will get fixed by the PRs to come.. The overall bundle size at the end in release/1.0.0 (not necessarily in this PR) was still meeting the defined threshold of bundlesize. If I recall correctly, it was 4.95 kB.\nThe advantage is that every single project which is using axios & lodash at the same time (which has a somewhat high probability) can share their dependencies.\nSo for the end-user it is likely to result in a lower bundle size than before.. The failing tests are somewhat expected, as we haven't adjusted the lib to the new behavior that specs are intending to consume.. > btw may i know who is the leading the 1.0 release?\nAs @axe312ger mentioned: it's @Khaledgarbaya leading it, but with me being one of the main implementors of the change (so it's us three who were incepting and pushing for these changes). Hej @BeanWei,\nwhere did you get those object keys from? \ud83e\udd14 \nIn order to have Basic auth working as expected, the auth object needs to look like this:\njs\n{\n  username: 'test',\n  password: '123123'\n}. Yes, it's defined here to be a \"pair of user-id and password\" and axios uses username as the identifier for the user-id:\nhttps://github.com/axios/axios/blob/0b3db5d87a60a1ad8b0dce9669dbc10483ec33da/lib/adapters/xhr.js#L39-L43\nhttps://github.com/axios/axios/blob/0b3db5d87a60a1ad8b0dce9669dbc10483ec33da/lib/adapters/http.js#L58-L62. Use the axios.request<T>(...args) style definition.\nThe last Response-interceptor in the array implicitly comply to an interface like (currentResponse: any) => T\nSo if you have data being something like: \n```ts\ninterface ServerResponse {\n  data: ServerData\n}\ninterface ServerData {\n  foo: string\n  bar: number\n}\n```\nThen you can say:\nts\naxios.request<ServerData>({\n  url: 'https://example.com/path/to/data',\n  transformResponse: (r: ServerResponse) => r.data\n}).then((response) => {\n  // `response` is of type `AxiosResponse<ServerData>`\n  const { data } = response\n  // `data` is of type ServerData, correctly inferred\n}). I think it does - the interceptors are currently very \"relaxed\" typed (aka any), so you can just attach the response interceptor and have it (r: any): any => r.data (which is basically as if you'd omit any typing in non-strict mode).\nOnly at the point where you call axios.request you can configure it's generic, which then get's passed through as the type of the data property.\n(Actually I made a mistake in above code snippet, data is actually AxiosResponse<ServerData> which has a field called .data with the type ServerData - updated it). This is intentionally. You are supposed to transform the data in the interceptor, but not to hoist response keys.\nhttps://github.com/axios/axios/blob/0b3db5d87a60a1ad8b0dce9669dbc10483ec33da/lib/core/dispatchRequest.js#L63-L67\nI thought you would have a server response like\njson\n{\n  \"data\": {\n    \"foo\": 42\n  }\n}\nand wanted to get rid of the response.data.data nesting. If you return response.data in the interceptor, then you can later access it via response.data.foo instead of response.data.data.foo.\nBut accessing response.foo wouldn't work, as this is the \"root\" response level that keeps track of other stuff, like the response code and alike.. > Whenever a request is successful, which having a then means, I don't really care about the response code \nWell, you might not care for any other information, but constraining to everyone using an HTTP client that you only care about the body is not really a solution.\nThere are enough legit use-cases for status codes & headers even on successful calls. Like making distinctions on 204 vs 200, checking rate limit headers, extracting Link headers for additional resources (pagination), etc. pp.\nIf you don't care, wrap Axios and throw away everything:\n```ts\nthis.instance.request = (...args) => {\n  return axios.request(...args).then(({ data }) => data)\n}\nthis.instance.request({ method: 'post', ... }).then(data => { ... });\nthis.instance.request({ method: 'get', ... }).then(data => { ... });\n```\n. You were reasoning about \"the point in all that code repetition\", so I just tried to explain why the information is necessary.\nI can't really find a way on how you'd like to keep type safety in the interceptors and the response, if any interceptor could scramble the whole response without a common structure. :/\nThe response type for a request would need to become any I guess and put the effort into developers hands to make sure they do the correct thing.\nThat to me at least sounds more error prone due to the relaxed typings, than accessing one property.\nIf you can come up with a PR that allows interceptors to overwrite the root response while keeping type safety for \"the 80% use-cases\", I'd be more than happy!. Doh! I've been looking at the wrong code all the time \ud83e\udd26\u200d\u2642\ufe0f  and was in the transformResponse section, not the interceptor - I'm so sorry!\nHow would you update the typings to account for the interceptor changing the return type?. Maybe something like this?\nts\ninterface AxiosInstance {\n  request<T = any, R = AxiosResponse<T>> (config: AxiosRequestConfig): Promise<R>;\n}\nYou'd call it like this: \nts\naxios.request<User, string>({\n  method: 'get',\n  url: '/user?id=12345'\n})\n  .then((foo: string) => { // <-- you could leave out the type annotation here, it's inferred\n    console.log(foo)\n  })\nJust tried that out locally and seems to do what you're looking for.\nMaybe I can get a PR together in the evening to update that for all the methods.. Maybe something like this?\nts\ninterface AxiosInstance {\n  request<T = any, R = AxiosResponse<T>> (config: AxiosRequestConfig): Promise<R>;\n}\nYou'd call it like this: \nts\naxios.request<User, string>({\n  method: 'get',\n  url: '/user?id=12345'\n})\n  .then((foo: string) => { // <-- you could leave out the type annotation here, it's inferred\n    console.log(foo)\n  })\nJust tried that out locally and seems to do what you're looking for.\nMaybe I can get a PR together in the evening to update that for all the methods.. Great to hear! Sorry again for my confusion \ud83d\ude13. Great to hear! Sorry again for my confusion \ud83d\ude13. There is none - I still have some pending things for the v1 alpha (#1333) and in the meantime @nickuraltsev / @emilyemorehouse are doing releases whenever necessary.\nSince v0.18 there has been some traction (including my favorite: scoping options to instances) so I guess they could cut a release. For more I'd just kindly invite you over to Gitter, so that we keep the issues on point \ud83d\ude42 . There is none - I still have some pending things for the v1 alpha (#1333) and in the meantime @nickuraltsev / @emilyemorehouse are doing releases whenever necessary.\nSince v0.18 there has been some traction (including my favorite: scoping options to instances) so I guess they could cut a release. For more I'd just kindly invite you over to Gitter, so that we keep the issues on point \ud83d\ude42 . @qidaneix you could try installing npm install axios/axios#master until there is a release. #1605 should have fixed it. Would be nice to get some feedback, whether that really helps with real life use-cases and not just tests \ud83d\ude42 . This will be a pre-1.0 release for sure. @Khaledgarbaya did you get added to NPM by Matt as well? Otherwise we need to be nice to the remaining maintainers releasing it \ud83d\ude09 . This will be a pre-1.0 release for sure. @Khaledgarbaya did you get added to NPM by Matt as well? Otherwise we need to be nice to the remaining maintainers releasing it \ud83d\ude09 . We are aware, but blocked currently. \ud83d\ude41 You can get more information over here: https://github.com/axios/axios/issues/1657#issuecomment-410766031. Handling errors is always best practice, and as you could always decide in your interceptor to throw (or just have a typo, or something async fails) you need to be able to handle it.\nE.g. an interceptor which first talks to your OAuth service to obtain a token to send along in the request headers. Imagine the service being down, you probably want to know about that instead of wondering why all request are returning 401s. Mhm fair enough \ud83e\udd14 So for my example you'd need to use two interceptors.\nI always thought Axios would handle this accordingly internal, so that it actually does .then().catch(), but I just looked it up and it's exactly as you stated. So your interceptor is actually handling the errors of the previous interceptors, which doesn't feel right / modular to me, as they need to have knowledge about the potentially thrown errors.. If you need to support such an old version of IE without vendor support, you most likely have to stick with older versions of dependencies / do not even provide further development and ist just \"stays as is\".\nFor a viable ecosystem, I feel like we need to end support at some point. Even SSL has been deprecated in favor of TLS.\n@sprlwrksAprilmintacpineda An adapter is unlikely to work, as newer syntax and behavior will eventually surround such adapter, making Axios incompatible with the targeted browsers of said adapter.\nMaybe we can find a transpiler preset that would make the code work with IE <11, with the trade-off of increased bundle size? // cc @axe312ger. It seems to be in the config merging, which sounds to me like the semantics for object operations weren't the same for IE than for modern JS. The tests are failing with \"got object but expected string\" errors. Maybe some method isn't defined that leads to improper serialization.. @Khaledgarbaya @axe312ger & me have been in a conversation with Matt (the author of the lib) about the future, where our - very ambitious - 1.0 plan came from. For that we agreed on dropping IE <11 support.\nSo I think even for a 0.x we could decide to already go for it. Better than keeping master blocked for ages, imho.. To be honest, I'm not convinced this is a good idea. Arbitrary user data shouldn't be root level keys to a library from my design perspective.\nEven though TypeScript might not be a \"blocker\" in a traditional sense to a JS project: e.g. metod: 'get' wouldn't error, as metod might be a custom configuration.\nUsually I'd recommend abstracting user data into your own class that extends Axios - though I can see how people currently using Axios might rely on this, so my recommendation for an easy upgrade path would be exactly one root key whose value is an object of shape { [key: string]: any }. This way it can contain all the user data you might want to store, but encapsulated (also preventing undesired shadowing of Axios configuration).\nImplementation in current code base would be trivia - just copy over that key as well.\nAccess in interceptors just have one more indirection: config.<key>.testAttr\nWDYT @rikuayanokozy?. I agree we should list it as a breaking change. I'm not sure whether it makes sense to first deprecate it, but still support it.\nWould be quite easy though, I guess. We can assign the lists with known keys to variables and then get all the keys from the two configs. difference(actualKeys, expectedKeys) would then yield the keys we need to warn for. (This might increase bundle size slightly for the time until removed, as I don't think we are using a difference implementation anywhere currently)\nWhat is the reason to type this any? As everyone was using object properties to store data until now, I'd just provide them a clean slate object to start from.. It's just the comma, as pkginfo was added \ud83d\ude02 . It was just wrongly sorted in the package.json beforehand. The dev dependency can be removed in the Karma branch, as until then the karma config has a dependency on the Webpack dev server. Added linting to test script \ud83d\ude42 . Hahahaha, I just copy & \ud83c\udf5d it, but yeah you're right \ud83d\ude02 . @Khaledgarbaya @axe312ger that's why the tests \"didn't run\" aka were run in the background.. I think this merge is fine and shouldn't change any config behavior.\nThe previous utils.merge always constructed a new object, so the {} is just for \"normalizing\" the behavior.. Thanks, that's part of the upcoming PRs described in #1333, where we update the usage of forEach to forOwn on two or three occasions that cause this trouble.\nThe problem here was that we implemented all these changes and only then sat down an split it to logical units, so some small changes might have landed in a different step than anticipated.. suggestion\n    if (!config || !instance.customConfig.retryOnError) {. ",
    "yp": "Thanks @jcrben for the comments. I proposed the PR long time ago and since then I moved to a different library, but I can still contribute if you feel that the solution could be useful to other users. However, since I do not have much time, could you please point me to a part of the current tests where such fake responses are generated and tested?\nThanks again!. ",
    "SteveEdson": "Thats just showing that the logged data is a string (as opposed to a number, array, object etc). If you try\njs\naxios('http://api.ipify.org').then(response => console.log(response));\nIt will log the entire JS object, and\nJS object, and\njs\naxios('http://api.ipify.org').then(response => console.log(response.data));\nwill log the response value, i.e the IP address.. ",
    "chovy": "if i use curl i can fetch it fine. if i use axios I get a 503 not sure url i'm querying is https. yes, that's what I've come to conclude. https urls must be sent to https proxy. Which is not really all that useful. Most proxies are not https.\nrequest-promise works fine.\n. The options are passed on to request -- { proxy: 'http://user:pass@x.x.x.x:8080' }. You'd have to give me your proxy.. It works for me:\nconst request = require('request-promise');\n\nrequest({\n  url: 'https://www.walmart.com/ip/24032132',\n  proxy: 'http://user:pass@x.x.x.x:8080',\n  headers: {\n    'User-Agent': 'Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko; compatible; Googlebot/2.1; +http://www.google.com/bot.html) Safari/537.36.'\n  }\n})\n  .then(console.log)\n  .catch(console.error);\n\nLooks like walmart requires a user agent.. Free proxy lists are no good. Get a paid proxy.. There's many providers. Search for \"paid proxies\" there are premium proxies (that are yours and yours alone) and there are \"shared proxies\" which you pay for (much more reliable than scraping free lists) but others use as well. Typically it ranges from .50 cents - $1 USD per proxy depending on who you buy from.. I still have this issue not being able to hit an https url with an http proxy. I can do it fine in request and also in curl from shell. Something not working with axios. I get an EPROTO error.. @jamesw201 \nThis works fine in request.get('https://ipinfo.io') and with curl -x <proxy-url> https://ipinfo.io\n    const http = rp.defaults({\n      proxy: 'http://asdf:asdf@x.x.x.x:8080',\n      timeout: 4000,\n      resolveWithFullResponse: true\n    });\n\nAxios returns an EPROTO error if I send an https url:\n    const http = axios.create({\n      proxy: {\n        host: 'x.x.x.x',\n        port: 8080,\n        auth: : {\n          username: 'asfd',\n          password: 'asdf'\n        }\n      } \n    });\n\nI'm on a Mac if that makes any difference. I'd like to start using axios over request-promise but proxy support is a deal breaker.\nI believe axios is trying to determine proto for proxy based on request url (it shouldn't as my proxy is http but the request url is https). Perhaps a flag like proxy: {..., http: true } should be added if that's the case.. You don\u2019t need Nginx if you\u2019re using request. Request handled proxies fine. \n-\nAnthony\n\nOn Jan 17, 2019, at 8:44 PM, redbearder notifications@github.com wrote:\ntried all solution and all failed base on axios 0.18\nfinal solution :\ninstall nginx module ngx_http_proxy_connect_module\nthen request https url via http proxy with request-promise\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. huh?. No but I ended up just importing it on every api call:\n\n```\nimport { api, globalErrorHandler } from './api/create-api';\napi.get('/users')\n    .catch(globalErrorHandler);\n```. ",
    "etayluz": "Same here,\n\ncurl -x 144.217.207.164:3128 -L 'https://www.walmart.com/ip/22790128'\n\nThis works totally fine!\nBut this will fail:\n```\n    var config = {\n      proxy: { host: '144.217.207.164', port: 3128 }\n    }\naxios.get('https://www.walmart.com/ip/22790128', config).\n\n.then(result => {\n          // I want to be here\n    })\n   .catch(error => { \n          // But I'm stuck here!!!\n   }\n```\nFrom what I've seen, axios doesn't support https over proxy (even if the proxy supports HTTPS). But it may actually be a node.js configuration thing (not an axios issue). If someone can fill in the blanks please do!. Same here,\n\ncurl -x 144.217.207.164:3128 -L 'https://www.walmart.com/ip/22790128'\n\nThis works totally fine!\nBut this will fail:\n```\n    var config = {\n      proxy: { host: '144.217.207.164', port: 3128 }\n    }\naxios.get('https://www.walmart.com/ip/22790128', config).\n\n.then(result => {\n          // I want to be here\n    })\n   .catch(error => { \n          // But I'm stuck here!!!\n   }\n```\nFrom what I've seen, axios doesn't support https over proxy (even if the proxy supports HTTPS). But it may actually be a node.js configuration thing (not an axios issue). If someone can fill in the blanks please do!. @chovy I don't see any proxy support with request-promise?\nhttps://github.com/request/request-promise. @chovy I don't see any proxy support with request-promise?\nhttps://github.com/request/request-promise. Hey @chovy could you help me out for a second and see if you can get it to work with this URL?\nhttps://www.walmart.com/ip/24032132\nFor the life of me I can't get this to work - I'm wondering if it's something special with Walmart. Hey @chovy could you help me out for a second and see if you can get it to work with this URL?\nhttps://www.walmart.com/ip/24032132\nFor the life of me I can't get this to work - I'm wondering if it's something special with Walmart. Much thanks @chovy !\nSo this is what I'm trying:\n```\nconst request = require('request-promise');\nrequest({\n  url: 'https://www.walmart.com/ip/24032132',\n  proxy: 'http://52.8.172.72:4444',\n  headers: {\n    'User-Agent': 'Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko; compatible; Googlebot/2.1; +http://www.google.com/bot.html) Safari/537.36.'\n  }\n})\n  .then(console.log)\n  .catch(console.error);\n```\nBut with some proxies I receive this error message:\n\n{ RequestError: Error: tunneling socket could not be established, statusCode=401\n\nCould this be an issue with the proxies I'm using?\nI found the proxies here: https://hidemy.name/en/proxy-list/?country=US&type=hs&anon=4#list\nand I only use those that support HTTPS\nNow that I've tried a few different ones, I see that some work and some do not!\nWhere are you getting your proxies, @chovy ?\nAnd last question please - it seems that when I make the call that you've showed me, the HTML coming back is very different than when visiting Walmart's site via Chrome. Have you noticed that?. Much thanks @chovy !\nSo this is what I'm trying:\n```\nconst request = require('request-promise');\nrequest({\n  url: 'https://www.walmart.com/ip/24032132',\n  proxy: 'http://52.8.172.72:4444',\n  headers: {\n    'User-Agent': 'Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko; compatible; Googlebot/2.1; +http://www.google.com/bot.html) Safari/537.36.'\n  }\n})\n  .then(console.log)\n  .catch(console.error);\n```\nBut with some proxies I receive this error message:\n\n{ RequestError: Error: tunneling socket could not be established, statusCode=401\n\nCould this be an issue with the proxies I'm using?\nI found the proxies here: https://hidemy.name/en/proxy-list/?country=US&type=hs&anon=4#list\nand I only use those that support HTTPS\nNow that I've tried a few different ones, I see that some work and some do not!\nWhere are you getting your proxies, @chovy ?\nAnd last question please - it seems that when I make the call that you've showed me, the HTML coming back is very different than when visiting Walmart's site via Chrome. Have you noticed that?. what's a good place to get them? should I make my own on AWS or Azure?. what's a good place to get them? should I make my own on AWS or Azure?. @futurmat not only did I give up on axios for this purpose, but I also gave up on Javascript. I was able to get request-promise to work, but then I noticed performance and memory issues with it. Since then I've switched over to Python using Tornado for networking - and things are running along much more smoothly. Python is really so much easier work with than Javascript.. @futurmat not only did I give up on axios for this purpose, but I also gave up on Javascript. I was able to get request-promise to work, but then I noticed performance and memory issues with it. Since then I've switched over to Python using Tornado for networking - and things are running along much more smoothly. Python is really so much easier work with than Javascript.. ",
    "justbill2020": "+1\nis this issue ever going to be addressed? or is it out of sight out of mind??? . ",
    "americos": "Had a very similar issue using axios 0.18.0 in different node versions: 8.5, 8.6, 9.7.1, 10.8.0. Using request-promise as suggested above fixed my issue.. ",
    "joetidee": "Thank you. Worth adding in as a seperate API option? Just because I would have thought handling timeouts was a very common occurrence.. Hmm, I would have thought that every single request to a server should handle timeouts - this is a common  problem outside the programmers control. . It would save writing (error.code == 'ECONNABORTED') for every request case. I might also help point out to developers that they should be handling timeouts if they have overlooked the idea.. ",
    "sylvainpina": "Hi,\nI have practically the same issue  :(\nDid i miss something ?\nnodejs script :\nnode\nvar axios = require('axios')\nvar params = {\n  url: 'https://raw.githubusercontent.com/mzabriskie/axios/master/README.md',\n  method: 'get'\n}\naxios(params)\n  .then(res => res.data)\n  .catch(error => {\n    console.error('$http:ajax:catch', error)\n  })\nerror : \nnode\n$http:ajax:catch { Error: write EPROTO 140735204655104:error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol:../deps/openssl/openssl/ssl/s23_clnt.c:794:\n    at exports._errnoException (util.js:1022:11)\n    at WriteWrap.afterWrite (net.js:801:14)\n  code: 'EPROTO',\n  errno: 'EPROTO',\n  syscall: 'write',\n  config:\n   { adapter: [Function: httpAdapter],\n     transformRequest: { '0': [Function: transformRequest] },\n     transformResponse: { '0': [Function: transformResponse] },\n     timeout: 0,\n     xsrfCookieName: 'XSRF-TOKEN',\n     xsrfHeaderName: 'X-XSRF-TOKEN',\n     maxContentLength: -1,\n     validateStatus: [Function: validateStatus],\n     headers:\n      { Accept: 'application/json, text/plain, */*',\n        'User-Agent': 'axios/0.15.3',\n        host: 'raw.githubusercontent.com' },\n     method: 'get',\n     url: 'https://raw.githubusercontent.com/mzabriskie/axios/master/README.md',\n     data: undefined },\n  response: undefined }\nhttps module exemple (work fine):\n```\nvar https = require('https')\nvar req = https.get('https://raw.githubusercontent.com/mzabriskie/axios/master/README.md',\n  (res) => {\n    / ... /\n    console.error('https: ok')\n  })\nreq.on('error', (e) => {\n  console.error('https: ko')\n  console.error(e)\n})\nreq.end()\n```. I just tested under windows on another pc (and another netword) and there is no problem ...\ni'm under osx (10.11.6).\ni tested with node 6.9.1 and 6.9.4\nmaybe a proxy issue or another bullshit \ud83d\ude2d \nbest regards :)\nEdit : Found ! (after explore axios source) it's a old config in my .bashrc... my fault \ud83d\ude05 \nHTTP_PROXY=http://.....:8080\nHTTPS_PROXY=http://.....:8080\nhttp_proxy=http://.....:8080\nhttps_proxy=http://.....:8080. @hanzichi, no idea.\ni don't have the problem with reqwest\nmaybe Axios is more advanced and do more check.\nbest regards. ",
    "jamesw201": "Thanks @sylvainpina, looks like your issue was slightly different as I\ncould get the request working using the https library but not with axios.\n@Anthony, does your Axios request look the same as mine? It would be\ninteresting to see your code.\nOn Fri, 3 Feb 2017 at 11:23 Anthony Ettinger notifications@github.com\nwrote:\n\nI still have this issue not being able to hit an https url with an http\nproxy. I can do it fine in request and also in curl from shell. Something\nnot working with axios. I get an EPROTO error.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/662#issuecomment-277225083,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEVwZT1U9_XXxFPttw4PpFFc_Hb69sAOks5rYw47gaJpZM4Lq6oN\n.\n. My original post was wrong, I didn't read the documentation closely enough. The request should have looked like this: \n\n``\nvar instance = axios.create({\n      baseURL: 'https://baseurl.com',\n      httpsAgent: new https.Agent({\n        ca: fs.readFileSync(${path}CA.pem),\n        cert: fs.readFileSync(${path}CERT.pem),\n        key: fs.readFileSync(${path}KEY.pem`),\n        rejectUnauthorized: false\n      }),\n      auth: {\n        username: 'username',\n        password: 'password'\n      }\n});\ninstance.get('/accounts')\n    .then(_ => console.log(response: ${_}))\n    .catch(err => console.log(error: ${err.stack}));\n```. ",
    "FastNinja": "we have exactly same issue after upgrading to latest version of axios. Is anyone is looking at creating pull request?. ",
    "husayt": "This is a show stopper for us too. We have to switch to request.js because of it now.. ",
    "kparkov": "This ticket was closed, but the problem described by @chovy is still there.\n\nI still have this issue not being able to hit an https url with an http proxy. I can do it fine in request and also in curl from shell. Something not working with axios. I get an EPROTO error.\n. \n",
    "JamesMcGuigan": "There is a bug in lib/defaults.js::getDefaultAdapter ()\nIn Jest unit tests, it returns ./lib/adapters/xhr.js even when httpsAgent: is present. XHR adapter has no support for httpsAgent:\nThe workaround solution is:\n```\nlet axiosOverride = axios.create({\n  baseUrl: 'https://localhost:5000',\n  adapter: require('axios/lib/adapters/http'),\n  httpsAgent: new spdy.createAgent (sslOptions),\n  withCredentials: true\n});\nexport default axiosOverride\n```\n. ",
    "ricokahler": "@JamesMcGuigan thanks for your post.\nI've been scratching my head for a while about why I'm getting an error similar to OP's (though it seems unrelated now).\nMore googling lead me to https://github.com/axios/axios/issues/1180 and setting jest's testEnvironment to node also fixes that problem.\nhope this helps anyone else having this issue!. ",
    "hanzichi": "@sylvainpina  thanks for your comments, but why the other http modules do not meet the questions? such as node-fetch?. ",
    "lnfnunes": "As Axios follows API Promise specs and it doesn't have an \"always/finally\" interface, my suggestion (actually I don't know if it's the best) to achieve what you want is to wrap your axios.post into a axios.all and handle it:\njavascript\naxios.all([axios.post('/user/validate', data)])\n  .catch(error => console.log(error))\n  .then(() => router.transitionTo('/'));\nCheck it out on this CodePen\n. ",
    "andreyluiz": "Yeah, it works as I expected. However, I was able to solve this way:\n```javascript\nconst buildResult = (succeeded: boolean, message: string) => ({ succeeded, message });\naxios.post('/api/forgot', data)\n    .then(response => buildResult(true, response.data.message))\n    .catch(error => buildResult(false, error.response.data.message)));\n```\nNot the prettier solution, but for now it works fine. :)\nThank you for the help.. ",
    "samvv": "Could this issue be re-opened? The spec has been withdrawn, with users requested to create their own implementation. In that sense, it would be really useful to make Cancel an instance of Error because currently NodeJS doesn't like it when a non-error object is thrown in my tests.. ",
    "techlab23": "@vignestion Following is the code to demonstrate how i used axios.all and axios.spread in my code. Basically the code query cryptocompare api to pull historical crypto currency data for number of days.  \n```\n// Number of days to pull the data \nconst numberOfDays = 4\n// Initializing days array\nconst days = [...Array(numberOfDays)].map((v,i) => ++i)\n// Fetch function to make get request to cryptocompare api\nlet fetch = (curr,day) => axios.get(https://min-api.cryptocompare.com/data/pricehistorical?fsym=${curr}&tsyms=USD&ts=${day})\n// Building the dynamic array of fetch calls for number of days\nlet fetchCalls = days.map((t) => fetch('BTC',moment().subtract(t, 'days').unix()))\n// Using axios.all and axios.spread with es6 spread operator to access results\naxios.all(fetchCalls).then(axios.spread((...res) => res.map(d => console.log(d.data))))\n```. ",
    "graingert": "Like jsdom or what?. Ah ok. Where's the docs for it?\nOn 8 Oct 2017 16:25, \"Rub\u00e9n Norte\" notifications@github.com wrote:\n\n@graingert https://github.com/graingert an instance of Document\nhttps://developer.mozilla.org/en-US/docs/Web/API/Document. Only valid\nfor the browser.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/axios/axios/issues/667#issuecomment-335013993, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAZQTAwftKC60-LSYPvkkMRN3OaLGHjpks5sqOlXgaJpZM4Lvjik\n.\n. I mean the axios specific docs, that say it returns a Document. @goppman https://www.npmjs.com/search?q=parse%20xml%20browser. @StarpTech can you repeat this on https://runkit.com?. \n",
    "zdila": "\nAh ok. Where's the docs for it?\n\n@graingert see https://github.com/axios/axios/issues/667#issuecomment-335013993 :-)\n. ",
    "goppman": "@rubennorte\nIs it possible to parse XML output from a web-service with an Axios Method? . @rubennorte I received this = \"anyType xmlns:q1=\"http://www.w3.org/2001/XMLSchema\" xmlns:d1p1=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://tempuri.org/\" d1p1:type=\"q1:string\"\n[{\"ID\":\"4a22b17b-0390-47a6-9e18-861ac37ab212\",\"MatchExceptionCodeID\":27,\"ME_Code\":\"CARD\",\"Confidence\":\"High\",\"ContributingFactor\":\"The vendor is Cardinal Health,\"}]\n</anyType \"\nAll I need = [{\"ID\":\"4a22b17b-0390-47a6-9e18-861ac37ab212\",\"MatchExceptionCodeID\":27,\"ME_Code\":\"CARD\",\"Confidence\":\"High\",\"ContributingFactor\":\"The vendor is Cardinal Health,\"}]. @graingert Thank you! I will use this today!  Will let you all know how it goes, Cheers. . ",
    "flexy1994": "I still have the same problem with react native 0.42.0.\nI created a new react natvie project. Imported axios:\nimport axios from 'axios';\nAnd added a componentDidMount to test the Proxyconnection:\nreturn axios.request({\n    url: \"/health-check\",\n    baseURL: 'http://my-server.de/api/',\n    method: \"GET\",\n    proxy: {\n        host: \"proxy-ip\",\n        port: 8888\n    }\n}).then(response => {\n    alert(\"success\");\n}).catch((error) => {\n    alert(\"error\");\n});\nthis is my package.json: \n{\n  \"name\": \"MyTestApp\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"node node_modules/react-native/local-cli/cli.js start\",\n    \"test\": \"jest\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^0.15.3\",\n    \"react\": \"15.4.2\",\n    \"react-native\": \"0.42.0\"\n  },\n  \"devDependencies\": {\n    \"babel-jest\": \"19.0.0\",\n    \"babel-preset-react-native\": \"1.9.1\",\n    \"jest\": \"19.0.2\",\n    \"react-test-renderer\": \"15.4.2\"\n  },\n  \"jest\": {\n    \"preset\": \"react-native\"\n  }\n}\nI get a success response. But the request is not send through the proxy (Using CharlesProxy to debug). \nTested on iOS and Android.. ",
    "thg303": "same issue here. @romanko89 \nmake sure server response contains afterward requests properties, specifically check Access-Control-Allow-Origin: <your host> or * and Access-Control-Allow-Methods: post, get, options,... and don't forget about Access-Control-Allow-Headers it should contain all headers which you're about to send in the afterward requests.. ",
    "uptownhr": "@th303 refer to https://github.com/mzabriskie/axios/issues/668. This is a non issue and related to CORS policy standards on the browser. Browsers will first check to see if CORS is enabled on the server with an OPTION request before moving forward with the actual request. . @rubennorte can we please reopen this. I upgrade to the latest 0.16.1 and I am still experiencing this issue.\nCode Snippet\n```\nsignPip ({commit}, payload) {\n  const {pip_id} = payload\n\n  return axios\n    .post(`/pip/${pip_id}/sign`, payload)\n    .then( res => {\n      commit('setPip', {pip: res.data})\n      return res.data\n    })\n}\n\n```\nHeaders: https://ipfs.io/ipfs/QmRMuQP32EJc94VYCPQ7p39ADrX9gHFQL2B9mUv4D1EbEG\nThis is being used in my Vuejs project. My axios is a newly created instance with some configuration changes as follows.\n```\nimport axios from 'axios'\nimport debug from 'debug'\nimport store from '~store'\nimport router from '~router'\ndebug('bambee:nuxt')('axios plugin')\nlet options = {}\nif (process.SERVER_BUILD) {\n  options.baseURL = http://localhost:3000/api\n} else {\n  options.baseURL = /api\n}\nlet apiHandler = axios.create(options)\napiHandler.interceptors.response.use( response => {\n  return response\n}, error => {\n  if ( error.response.status == 401) {\n    alert('You have been logged out')\n    return store.dispatch('logout').then( res => {\n      router.push('/login')\n    })\n  }\n})\nexport default apiHandler\n```\nBasically, it contains a baseUrl override and also an error handler that listens on status of 401.\n. ",
    "romanko89": "@thg303 , thanks I've figured out that was the reason.. ",
    "ndeixonne": "In the case of Axios, you likely need to authorize headers \"Content-Type\".. In the case of Axios, you likely need to authorize headers \"Content-Type\".. Yes it's about CORS. But if you are like me, then you likely forgot to add Content-Type authorized in your api server.\nAllowedHeaders : Content-Type and X-Requested-With\nAnd authorization in your case.\nAnd of course, don't forget to allow method OPTIONS also.\n. Yes it's about CORS. But if you are like me, then you likely forgot to add Content-Type authorized in your api server.\nAllowedHeaders : Content-Type and X-Requested-With\nAnd authorization in your case.\nAnd of course, don't forget to allow method OPTIONS also.\n. ",
    "rayrutjes": "I just struggle with this one.\nHere is the current check: https://github.com/mzabriskie/axios/blob/188334439f9698c8ddd58697f75e7f0b745c9acc/lib/defaults.js#L16\nI wrote a simple test in Jest but it seems XMLHttpRequest is available there :/\nI guess my left choice is to enforce the adapter ;)\nUpdate: It looks like the http adapter is not accessible :/ any way to force it?\n. ",
    "alexanderjamesking": "I ran into this (or a similar issue) but for the colon \":\"\nAfter doing a bit of research it seems some of these characters are acceptable to be unencoded depending on where in the URL they are used.\nSee RFC3986 - Reserved Characters\nor Stop Using Unsafe Characters in URLs\nI think the \"%20\" is a bug though as it should be \"%2B\"?\n. I ran into this (or a similar issue) but for the colon \":\"\nAfter doing a bit of research it seems some of these characters are acceptable to be unencoded depending on where in the URL they are used.\nSee RFC3986 - Reserved Characters\nor Stop Using Unsafe Characters in URLs\nI think the \"%20\" is a bug though as it should be \"%2B\"?\n. encodeURIComponent(\"+\")\n\"%2B\"\ndecodeURIComponent(\"%20\")\n\" \"\ndecodeURIComponent(\"%2B\")\n\"+\". encodeURIComponent(\"+\")\n\"%2B\"\ndecodeURIComponent(\"%20\")\n\" \"\ndecodeURIComponent(\"%2B\")\n\"+\". ",
    "wonderbeyond": "```javascript\n\ndecodeURIComponent('%20')\n' '\ndecodeURIComponent('+')\n'+'\n```\n\nThe server side cannot parse a plus into space, so why not keep encoding space with %20 just like encodeURIComponent?. How is going now? I am still experiencing the same problem with version 0.18.0!. It is a bug\nDaniel Stern notifications@github.com \u4e8e 2019\u5e742\u670828\u65e5\u5468\u56db 04:39\u5199\u9053\uff1a\n\nLet me summarize this discussion.\ntl;dr:\nEVERYONE Being unable to catch HTTP errors is a problem.\nDEVELOPERS Being unable to catch HTTP errors is not a problem.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/axios/axios/issues/960#issuecomment-468020991, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAN8CbMHohyuSZHYlcieD_5yUqizpkSYks5vRuzygaJpZM4N9Ljl\n.\n. \n",
    "chrisbarnes": "I'm also curious why spaces are not encoded with %20.. ",
    "beckler": "I'm taking a guess that you're making a cross-origin request (aka CORS) by the presence of the Origin header?\nMake sure your server is returning a Access-Control-Request-Origin header that would match the Origin header, and then in your config set withCredentials: true,\nHere's the relevant text from the README\n// `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n. I'm taking a guess that you're making a cross-origin request (aka CORS) by the presence of the Origin header?\nMake sure your server is returning a Access-Control-Request-Origin header that would match the Origin header, and then in your config set withCredentials: true,\nHere's the relevant text from the README\n// `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n. @tsongas Yeah, an OPTIONS request is usually sent before any other request when using CORS. Glad you figured it out! \ud83d\udc4d . @tsongas Yeah, an OPTIONS request is usually sent before any other request when using CORS. Glad you figured it out! \ud83d\udc4d . @chrise86 if you're making a CORS request and you need to pass authorization, be sure to add withCredentials: true to your request config.. There's no need to pass those headers to the server, the server should be returning those headers to let you know that CORS is supported. You might want to look into middle-ware packages for Django like this: https://github.com/OttoYiu/django-cors-headers. There's no need to pass those headers to the server, the server should be returning those headers to let you know that CORS is supported. You might want to look into middle-ware packages for Django like this: https://github.com/OttoYiu/django-cors-headers. ",
    "chrise86": "I'm having this issue using an instance of axios. When setting the headers, logging the object shows the headers on the instance, but the request is made without the Authorization header - all other headers work but the authorization is somehow stripped. This doesn't happen when setting the defaults directly on axios.. ",
    "MINOSai": "Thanks !!. My guess is that Django REST framework by default doesn't have support for CORS. . ",
    "EricMCornelius": "Sorry, I believe the downgrade was because I ran into a serious regression w/ the updated follow-redirects dependency and updated my master branch of my fork.\nUsing the updated follow-redirects causes this reported write after end issue: https://github.com/olalonde/follow-redirects/issues/50 - which I was hitting in the component using my axios fork.  I haven't had time to investigate that dependency defect further.. https://github.com/mzabriskie/axios/issues/623 - I see there's already some awareness of the problem with follow-redirects as well.. ",
    "WinWinHost": "Just wanted to comment that if a programmer really has to line up calls in a synchronous fashion, they might want to try to use something like async.waterfall. Or a fiber based system, maybe.\n. ",
    "pracucci": "It doesn't cover the use case I had when I originally opened this issue. The use case was to issue a tracking URL call on window.unload improving it's likelihood the URL was tracked. The most reliable way I found was to set the sync option on the XHR request.. Done. What's about this?\n. ",
    "iamgoodbytes": "Thanks @lukasjuhas - I had the same issue!. ",
    "buccfer": "@nickuraltsev With sendImmediately: false in request library you can perform a digest auth. Is there any way to achieve the same with axios?. Thanks.. ",
    "shtse8": "any updates? I want to do digest auth, but it seems axios cannot support it.\nhttps://github.com/request/request/blob/b12a6245d9acdb1e13c6486d427801e123fdafae/lib/auth.js#L50. ",
    "emilian": "Digest authentication would be great. +1 from me as well.. ",
    "chukitow": "@rubennorte I was trying to run the script in node. ",
    "actionnick": "https://en.wikipedia.org/wiki/Digest_access_authentication\nThis should probably work. . ",
    "ashavk": "Is there any conclusion/update on the same? Still can't find a way to perform digest auth using axios.. ",
    "tjunussov": "\nneed!. + need!. \n",
    "khoanguyen96": "I'm using it with vue-loader, so browser :). I believe it was due to a configuration error on my part.. ",
    "zhuangya": "in this way i can not extend default headers :(. i mean i can not set foo.defaults.headers.common['Authorization'] =  'Bear 123'; if foo's shape is like {baseURL: 'https://fancy.web.site/api'}, since there is no foo.defaults right?\nthe reason i wanted the default config be exported is that, the default config is a complicated-yet-deep-nested object. :(. for more clear:\n```javascript\nconst { Axios } = require('axios');\nconst axiosDefaults = require('axios/lib/defaults'); \nclass SomeClass extends Axios {\n  constructor(instanceConfig = {}) {\n    super(Object.assign(axiosDefaults, { baseURL: 'https://fancy.web.site/api' }, instanceConfig));\n  }\n// i can not set a global header if there is  no axiosDefaults:\n  this.defaults.headers.common = Object.assign(this.defaults.headers.common, { 'x-ninja': 'nyan' }); \n}\n```. ",
    "sverhagen": "Thanks for the code example. Just curious, are you able to use this without the user getting a dialog in their face, first, asking for user name and password (\"Authentication Required\")?. ",
    "webhive": "Got same issue. This dialog appear before interceptor and interceptor called after this dialog closed (no matter how cancelled or submitted).. ",
    "var23rav": "Hi, The api gives me Status Code:401 UNAUTHORIZED error.\nBut am not able to get the response code using vue-axios interceptor, am getting undefined for error.response.\nAxios: axios@0.17.1, vue-axios@1.2.2. ",
    "nsarvar": "@rlambertsen  great answer! what about if we have multiple requests and we want to retry all of them? \n. ",
    "notflip": "@rlambertsen what does the post to users/token do in your code snippet above? Thanks!. ",
    "codeangler": "thank you @vbfox and others for this additional feature..  thank you @vbfox and others for this additional feature.. ",
    "ninahaack": "Ok, thank you very much for the answer!. Ok, thank you very much for the answer!. ",
    "cnjap": "No error in browser. As stated, it returned status code 200 with empty response body. Seems like you're correct that it is not axios issue because I switched to isomorphic-fetch and still get the same behavior. . ",
    "vnshah": "having same issue. @Martodox Thanks for your reply. All I have is a simple index.php page with the axios.post code which posts data to test.php page and test.php page dumps the $_POST out but for some reason it's empty! Would you know why? May be it's a very broad topic but I tried looking for all the suspects but nothing works. I don't know if you can help me with this? Thanks :). Yes. Its not cross domain. Still I have added access control header in the\nscript but no joy.\nOn 16 Feb 2017 8:12 pm, \"Bartosz Jakubowiak\" notifications@github.com\nwrote:\n\nWhat I meant by my first post was that this is not a place for such\nproblems :D\n@vnshah https://github.com/vnshah, @realtebo\nhttps://github.com/realtebo, Have you checked CORS settings on your\nserver?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/700#issuecomment-280348457,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAQnjfaPD9I_1HtV0uX2d1UMGECxyny3ks5rdGBjgaJpZM4L_qfg\n.\n. \n",
    "durango": "@vnshah and @cnjap try superagent if you're running into OPTION errors.. I'm fairly certain it'll work there, although don't quote me it's been a while since I've dealt with the inane world of browsers. ",
    "HamsterCoder": "Hi, I am trying to implement this myself with the proposed approach with interceptors, but there are a few things I cannot figure out:\nI am not sure whether I can add random stuff to config (will it break axios, is there a right place for metadata), e.g:\n// Request interceptor\nconfig.requestStartTime = Date.now();\n// Response interceptor\nresponse.config.requestTime = Date.now() - response.config.requestStartTime;\nresponse.config.requestId = response.headers['x-request-id'];\n. I am not sure that checking Content-Type is the right way to go. As far as I know responseType that is ignored in transfrormResponse default method is a property of xhr object. The XMLHttpRequest spec says that:\n\nThe response attribute must return the result of running these steps:\nIf responseType is the empty string or \"text\"\nIf state is not loading or done, return the empty string.\nReturn the text response.\nOtherwise\nIf state is not done, return null.\nIf response object is failure, then return null.\nIf response object is non-null, then return it.\nIf responseType is \"arraybuffer\"\nReturn the arraybuffer response.\nIf responseType is \"blob\"\nReturn the blob response.\nIf responseType is \"document\"\nReturn the document response.\nIf responseType is \"json\"\nReturn the JSON response.`\n\nAnd it does not say anything about Accept and Content-Type headers. So checking headers will probably be unintuitive?\nQuestion to maintainers:\nShouldn't the response already be JSON for responseType is set to json? Or is the original transformResponse method dedicated to http (not xhr)? Or is it a way to guess the right answer, even if response type is not set?\n. I also found a simple way to reproduce this (Browser and Node):\nvar axiosPapa = require('axios');\nvar axios = axiosPapa.create();\nconsole.log(Object.keys(axios));\noutputs:\n```\n[ 'request',\n  'delete',\n  'get',\n  'head',\n  'options',\n  'post',\n  'put',\n  'patch',\n  'defaults',\n  'interceptors' ]\n```\nWhich seems to contradict this https://github.com/axios/axios/blob/d963368960e2e1b3ec6a2eb78ff8fd085e4e229c/test/specs/instance.spec.js#L10\nAnd I tried to run this in a clean environment https://codepen.io/sirinity/pen/XZXMZW. ",
    "testerez": "Using the interceptors would provide a timing including the request and the parsing. That would be interesting to have a precise timing for the request itself.. It could be done in your app with something like:\njs\nconst [response] = await Promise.all([\n  doMyRequest(),\n  new Promise(resolve => setTimeout(resolve, 600)),\n]);. ",
    "dev101": "This would be a very useful feature, e.g. for instrumenting and monitoring 3rd party API performance.\nIdeally, to be compatible with request timing schema:\n\n. ",
    "Mouvedia": "You would end up with this subset:\n\ntimingStart (fetch or send)\ntimings\nresponse (readyState 3)\nend (readyState 4)\ntimingPhases\ndownload\ntotal (alias of timings.end). \n",
    "forivall": "Proof of concept for node, as a plugin / interceptors: https://gist.github.com/forivall/cbd363792b5e09c8aa4e8cb5390f8d93\nhooks would need to be added for XHR timings.. ",
    "pmotyka": "@forivall, thanks for providing this POC code!\nHere's some rough steps on how I was able to use it:\nDownload and unpack .zip of cbd363792b5e09c8aa4e8cb5390f8d93 gist\nnpm install -g typscript\nnpm install -D @types/node axios\ntsc *.ts\nCopy resulting axios-timing.js into your project\nconst addAxiosTiming = require('./axios-timing').addAxiosTiming;\naddAxiosTiming(axiosInstance);\ntimings data will be available on the response\n. ",
    "tommymcdonald": "What are the system details you're using this with? I was unable to reproduce on OS X Sierra, Node v7.4.0, axios v0.15.3.. ",
    "Sarmed-armis": "i have same issue how i can solve it?? . ",
    "Martodox": "If it works on one env and doesn't in the other then it is most likely an issue with your setup, not axios library itself.. If it works on one env and doesn't in the other then it is most likely an issue with your setup, not axios library itself.. What I meant by my first post was that this is not a place for such problems :D\n@vnshah, @realtebo, Have you checked CORS settings on your server?. What I meant by my first post was that this is not a place for such problems :D\n@vnshah, @realtebo, Have you checked CORS settings on your server?. ",
    "realtebo": "Same problem here (I've an Ubuntu 16.04 server with Apache and PHP 7.0): \nAxios({\n          method : 'post',\n          url    : 'http://my.server.net/index.php?r=wwwServices/api/setProductCommonCode',\n          data   : {\n            'product_code' : product_code,\n            'common_code' : common_code,\n          }\n      })\nI see that in Chrome DevExt\nRequest URL:http://my.server.net/index.php?r=wwwServices/api/setProductCommonCode\nRequest Method:OPTIONS\nThese are the generated request headers\nOPTIONS /index.php?r=wwwServices/api/setProductCommonCode HTTP/1.1\nHost: my.server.net\nConnection: keep-alive\nAccess-Control-Request-Method: POST\nOrigin: http://my.server.net:3000\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\nAccess-Control-Request-Headers: content-type\nAccept: */*\nReferer: http://my.server.net:3000/\nAccept-Encoding: gzip, deflate, sdch\nAccept-Language: it-IT,it;q=0.8,en-US;q=0.6,en;q=0.4\nMy server is configured to send \n   header('Cache-Control: no-cache, must-revalidate');\n    header('Expires: Mon, 26 Jul 1997 05:00:00 GMT');\n    header('Content-type: application/json');\n    header(\"Access-Control-Allow-Origin: *\");\n\nAlso my server see an empty $_POST.\nI also tried to log $_SERVER, but there is not trace of data sent. \nI see \nREQUEST_METHOD: \"OPTIONS\"\n\nand \nHTTP_ACCESS_CONTROL_REQUEST_METHOD : \"POST\". I added to axios call this header\n\nheaders: { \n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n\nAND changed the way I send the data from object to \n data   : \"product_code=\"+productx_code+\"&common_code=\"+common_code\n\nAND used this into server php response function\n    header('Cache-Control: no-cache, must-revalidate');\n    header('Expires: Mon, 26 Jul 1997 05:00:00 GMT');\n    header('Content-type: application/json');\n    header('Access-Control-Allow-Headers: Content-Type');\n    header(\"Access-Control-Allow-Origin: *\");\n\nactually it's seems working. @acmeid: what do you mean? If you want to do configuration tricks only on client-side actually I'm not able to tell you that it is ever possibile. this is good, otherwise tweaking our code we can do every XS requests to every not-allowed sites... \nIf (I think so) I misunderstood, please explain me better your question / intents.... ",
    "acmeid": "Is there any way to configure Axios only\uff1f. @realtebo Yes, that's what I mean. When using jquery, even if the server without\u00a0configuration 'header', it's OK. I think axios is the same.. ",
    "funway": "in your php file, use $jsonData = json_decode(trim(file_get_contents('php://input')), true). then u will get your post data in $jsonData.\nor in your js file,  change your post data to string\u3002see https://www.npmjs.com/package/axios#using-applicationx-www-form-urlencoded-format. ",
    "milmaj": "the solution of @realtebo also worked for me, but there must be a solution doing data: {key:value}. ",
    "bscoder2": "Funway hit the nail on the head.. ",
    "flushentitypacket": "I'm having the same problem. I dug into it a little and still couldn't figure out what was going wrong.. ",
    "Bnaya": "Read about the validateStatus handler that you can pass\nhttps://github.com/mzabriskie/axios#handling-errors. @ru-web-designer it copies the property from the prototype to the this, so the extend function will also copy it because probably the extends using hasOwnProperty or so. ",
    "clool": "I think there is a typo in your second example. Should it be:\n```\nCurrent URL: http://localhost/myapp/\nRelative URL: customers //no slash here\nAbsolute URL: http://localhost/myapp/customers\n```. ",
    "rmariuzzo": "It would be nice if axios could support url params. That way we don't need to think on escaping values.. ",
    "MichaelDimmitt": "Thought I would post an example regarding template strings.\nThe main idea is that axios.get(url) will not work if in function parameter.\nAnd that axios.get(${url}) for function parameters will work. \nAlso gathering the function parameter as a new string constant will work.\nHopefully this will help others. \nI believe it is inline with the discussion of this issue. \nWill work\njavascript\nconst randomId = 128398723\nconst url = `/post/${randomId}`;\ngetPost(url)\nexport const getPost = (funcParamURL) => {\n  return axios.get(`${funcParamURL}`);\n}\njavascript\nconst randomId = 128398723\nconst url = `/post/${randomId}`;\ngetPost(url)\nexport const makeRequest = (funcParamURL) => {\n  const url = funcParamURL;\n  return axios.get(newUrl);\n}\nWill not work\njavascript\nconst randomId = 128398723\nconst url = `/post/${randomId}`;\ngetPost(url)\nexport const getPost = (funcParamURL) => {\n  return axios.get(funcParamURL);\n}. ",
    "Doogiemuc": "For a random number this is fine.  But keep in mind that you MUST encode url parameters!  Especially when the value comes from any user input (SQL injection!). ",
    "hbgl": "I am also in favor of a URL path parameter feature. From my point of view at least two good reasons for having the feature:\n\nIt's concise. You don't have to repeat encodeURIComponent everywhere in your code.\n\nIt's harder to forget to encode the parameters. Forgetting to encode the path parameter is a security issue because it allows to inject arbitrary sub-paths and query parameters based on user input. If nothing else it is a source of bugs.. I am also in favor of a URL path parameter feature. From my point of view at least two good reasons for having the feature:\n\n\nIt's concise. You don't have to repeat encodeURIComponent everywhere in your code.\n\nIt's harder to forget to encode the parameters. Forgetting to encode the path parameter is a security issue because it allows to inject arbitrary sub-paths and query parameters based on user input. If nothing else it is a source of bugs.. \n",
    "evollu": "Sorry for the late reply. Axios does take undefined for the first parameter so I can just pass function to second parameter to just handle error response . ",
    "bkrall": "In this example, response comes back as undefined even when the request is successful? . In this example, response comes back as undefined even when the request is successful? . ",
    "ukazap": "ayyyyy \ud83d\udc4d . ",
    "Liaohuanle": "I have a loop(for) to send axios post,and i have found that each request hasn't send out after each loop,they had send out together after thees loop over\nthis is my code\n\n` \nfor (let i = 0;i < differ;i++) {\n        tem.start = moment(start).add(i, 'days').format('YYYY-MM-DD')\n        tem.end = moment(tem.start).endOf('day').format('YYYY-MM-DD 23:59:59')\n        tem.date = tem.start\n        // if (V.hasSameValue(title, tem.start, tem.end))continue\n        V.addEventsToCalendar(tem)\n      }\naddEventsToCalendar: (event) => {\n    axios.post(requestUrl('calendar'), {...event})\n      .then(res => {\n        V.eventsRender(V.dataToEvent([res.data]))\n        successTip()\n      })\n      .catch(errorTip)\n  },\n\n`. ",
    "akhar": "@Liaohuanle \nFor is asynchronous, it doesn't wait end of each operation. Instead of loop you can use simple recursion.. ",
    "alejogamboa": "Why don't just try this? \naxios.get(...)\n  .then((response) => {\n    axios.get(...)\n   .then((response) => {\n      console.log('response);\n    })\n})\n  . ",
    "abruzzi": "@alejogamboa Yet another callback hell, what do you think? . ",
    "jericopulvera": "var array = [0,1,2];\naxios.get('api/' + array[0]).then(response => {\n    axios.get('api/' + array[1]).then(response => {\n         axios.get('api/' + array[2]).then(response => {\n            alert('done');\n         });\n    });\n});\nhow do I chain it based on array?. Already got the solution here #1413 . @Axnyff This solved my problem. Thank you!. ",
    "gibo": "@jericopulvera have a look at using \naxios.all([])\nfor (...) {\n  arr.push(axios.get(\"url\"));\n}\n\nlet result = await axios.all(arr);\nconsole.log(res);\n\n. @jericopulvera have a look at using \naxios.all([])\nfor (...) {\n  arr.push(axios.get(\"url\"));\n}\n\nlet result = await axios.all(arr);\nconsole.log(res);\n\n. ",
    "TimonLukas": "This is not at all recommended (and not possible in JS). While it is theoretically possible to have the same key multiple times in a request, it is not at all recommended, and I wouldn't think that many servers even properly support this kind of behaviour.\nInstead it seems like you are deliberately passing an array- why don't you send the second string in the same array?\njavascript\nparams: {\n    start_date: moment().subtract(6, 'd').format('YYYY-MM-DD'),\n    end_date: moment().format('YYYY-MM-DD'),\n    measurement: 'unique',\n    where: JSON.stringify([[\"Campaign Name\", \"=\", this.campaignName], [\"$attributed_message\", \"=\", 'Abandoned Cart: Email 1']])\n}\nBut either way, this is not an issue with Axios and should be closed.. ",
    "g0ld3lux": "but the api we are using uses this kind of method...\nit allows them to receive multiple params of same name...\ni already tried that method , but their server is only parsing the last array you send... \nseems like there is no solution to this?\n:(\n. if i did what you recommend\nyes it would send the params like this\nstart_date:2017-02-10\nend_date:2017-02-16\nmeasurement:unique\nwhere:[[\"Campaign Name\",\"=\",\"feb value 1\"],[\"$attributed_message\",\"=\",\"Abandoned Cart: Email 1\"]]\nbut their server is giving me 500 Internal Server Error. ",
    "FranckFreiburger": "Just note that Google Maps API use multiple same param to set multiple map markers (https://developers.google.com/maps/documentation/static-maps/intro#Markers). ",
    "eino-makitalo": "I agree even that this is not recommended there are some APIs using this style of repetitive parameters and now have to tackle this different way. (not show stopper but annoying). I agree even that this is not recommended there are some APIs using this style of repetitive parameters and now have to tackle this different way. (not show stopper but annoying). ",
    "wellyal": "Seems like a lot of apis do things like this.. To help future people issues I solved passing params inside stringfy and than parsing it back when setting on get request like so:\n```javascript\nconst params = qs.stringify({ params: { a: ['b', 'c', 'd'] } }, { indices: false })\nreturn service.get(\n    'some/ap/endpoind',\n    qs.parse(params)\n  )\n```\nNot even close to be proud of this. Smells really bad. Should be handled by axios itself.. ",
    "jarnail1004": "@supra28 , can you please look whats issue in below code: \n`axios.get('https://apisite.com//api/Stock/GetStockItems',\n    { \n        keyWord: 5055967419551,\n        locationId: '',\n        entriesPerPage: 10000,\n        pageNumber: 1,\n        excludeComposites: true,\n\n        headers: \n        { Authorization: 'XXXXX-XXX-XXX-XXXX-XXXXX' \n        }\n    }).then((response) => { console.log(response.data); });`\n\nWorking on PHP: \n$url = 'https://apisite.com/api/Stock/GetStockItems?keyWord=6666777788889&locationId=\"\"&entriesPerPage=10000&pageNumber=1&excludeComposites=true';\npassing paramerters from AXIOS in react-native app. . @supra28, I achieved that and how it possible pass value from first-api-call to 2nd-api-call. \n\ncomponentWillMount() {\n      axios.post('https://APISITE.COM/api/Auth/AuthorizeByApplication?applicationId=b72fc47a-ef82-> 4cb3-8179-2113f09c50ff&applicationSecret=e727f554-7d27-4fd2-bcaf-dad3e0079821&token=cd431b31abd667bbb1e947be42077e9d')\n      .then((response) => { console.log(response.data); });\n  axios.get('https://APISITE.COM//api/Stock/GetStockItems',   \n  { \n      params: {\n          keyWord: 5055967419551,\n          locationId: '',\n          entriesPerPage: 100000,\n          pageNumber: 1,\n          excludeComposites: true,\n          //add other params\n      },\n      headers: {\n         Authorization: '0f32ae0d-XXXX-XXXX-8367-WWWW' \n      }\n  })//.then((response) => this.setState({ products: response.data }));\n  .then((stockItems) => {\n       this.setState({ products: stockItems.data });\n axios.get('https://APISITE.COM//api/Stock/GetStockLevel', {\n\n            params: { stockItemId: '2f80b45c-85ff-449b-9ad6-ffcc4bb640dd'\n                //stockItemId: stockItems.data.StockItemId,\n            },\n                   headers: {\n                    Authorization: '0f32ae0d-XXXX-XXXX-8367-WWWW'\n                   }       \n        }).then((response) => this.setState({ racks: response.data }));\n});\n\n}\n\nPlease guide if you can have look of such things. . ",
    "supra28": "@jarnail1004  This should work:\naxios.get('https://apisite.com//api/Stock/GetStockItems', {\n    params: {\n        keyWord: 5055967419551,\n        locationId: '',\n        entriesPerPage: 10000,\n        pageNumber: 1,\n        excludeComposites: true,\n    },\n    headers: {\n      Authorization: 'XXXXX-XXX-XXX-XXXX-XXXXX' \n    }\n  })\n. This is not a limitation of this library, you are just doing it wrong.\nthose are query params and not a js object as you mentioned, construct them using URLSearchParams API as given in the docs, or alternatively you can use qs library (also mentioned in the docs.\neg.\nquerystring.stringify({ foo: 'bar', baz: ['qux', 'quux'], corge: '' })\n// returns 'foo=bar&baz=qux&baz=quux&corge='\n. Have you tried appending the file directly to formData? That's the way I've always done it.\nvar img = e.target.files[0]\nformData.append('file',img). ",
    "themnd": "@rubennorte the library should allow to perform a request with the desired parameters, using the same parameter multiple times is perfectly legit and it does not indicate any bad behaviour on the server part (for example also solr use multiple parameters with the same name, see fq https://lucene.apache.org/solr/guide/6_6/common-query-parameters.html).\nDo you think to reopen this ticket?. This is what I've used:\n```\n    var apiParamsSerializer = function (params) {\n      var parts = [];\n      for (var key in params) {\n        if (params.hasOwnProperty(key)) {\n          var obj = params[key];\n          if ($.isArray(obj)) {\n            for (var idx = 0; idx < obj.length; idx++) {\n              parts.push(key + '=' + encodeURIComponent(obj[idx]));\n            }\n          } else {\n            parts.push(key + '=' + encodeURIComponent(obj));\n          }\n        }\n      }\n      return parts.join('&');\n    };\n  return axios({\n    method: 'get',\n    url: url,\n    headers: headers,\n    params: opts.params,\n\n    // to handle multiple parameters with the same name\n    paramsSerializer: apiParamsSerializer\n  });\n\n```. ",
    "bartoszhernas": "This is a normal case, a lot of API expect param=1&param=2 instead of param[]=1&param[]=2.\nWas this already resolved? Do anyone have suggestion how to fetch this kind of URL using axios?. ",
    "dydokamil": "If you wish to get something like this: filter=name&filter=date from { filter: ['name', 'date'] } then you would have to do:\nreturn axios.get(url, {\n    params: {\n      ...params\n    },\n    paramsSerializer: (params) => qs.stringify(params, { arrayFormat: 'repeat' })\n  })\nDon't forget to install qs.. ",
    "narazin": "The problem was in limit the file size on the server, I increased it and problem was solved. The problem was in limit the file size on the server, I increased it and problem was solved. @JoelChacon \nmax_post_size in php.ini. @JoelChacon \nmax_post_size in php.ini. ",
    "tmaly1980": "@Rigorbb, where do you get 'files' from? Are they File objects? Or just file names?. I get the same '[object Object]' string in the payload. Anyone figure this out?. I believe this may just be because of using a debugger with Network Inspect enabled. Just some sort of limitation with file uploads. Try turning Network Inspect off (or the debugger off).. I believe this may just be because of using a debugger with Network Inspect enabled. Just some sort of limitation with file uploads. Try turning Network Inspect off (or the debugger off).. @CliveTeow Like i said, you can't inspect file uploads on the client side... It's something you'll have to diagnose/test on the server side exclusively. You have to disable network inspection with your debugger for it to work. It's a limitation of some sort not with axios but with the debugging tools.. @CliveTeow Like i said, you can't inspect file uploads on the client side... It's something you'll have to diagnose/test on the server side exclusively. You have to disable network inspection with your debugger for it to work. It's a limitation of some sort not with axios but with the debugging tools.. ",
    "Grundmanis": "@tmaly1980 \nHTML\n<input id=\"my-file-selector\" type=\"file\" name=\"file\" onchange=\"onFileChange\">\nJS\nonFileChange(e) {\n            let files = e.target.files || e.dataTransfer.files;\n            if (!files.length) {\n                console.log('no files');\n            }\n            console.log(files);\n            console.log(files[0])\n        }\n}. ",
    "JoelChacon": "how did you increase the limit in the server. ",
    "valtido": "I think this is wide spread problem, and the issue is with the actual File API/function, consider the following...\n```\nconst file = files[0]; //this will not work.\nconst file = new Blob([files[0]]); // kind of works and choses stream as content type of file (not request)\nconst file = new Blob([files[0]], { type: 'image/png' });// WORKS much better (if you know what MIME type you want.\nconst formData = new FormData();\nformData.append('test', file, file.filename);\naxios.post('...url...', formData, {}).then(...).catch(...);\n```\nI will reference a few other tickets around github which have the same issue. \n\nhttps://github.com/axios/axios/issues/318\nhttps://github.com/axios/axios/issues/886\nhttps://github.com/github/fetch/issues/505\nhttps://github.com/postmanlabs/postman-app-support/issues/191\n\nA lot of spent time to get to the bottom of this :( \nHope it helps.\n. ",
    "michaelBenin": "After forking and modifying to use v4, problem still persists. Next solutions for my team are to upgrade to latest node, as well more aggressive caching strategy. . This error was actually unrelated to axios. . ",
    "nathanmalishev": "Hey @michaelBenin what did this server end up being related to?. Hey @michaelBenin what did this server end up being related to?. ",
    "yss14": "@michaelBenin Did it work in the end for you by forking and updating node version? I'm currently facing the same error under high load (Node.js 8.9.3).. Got into the same problem. Applying your workaround, do you also see as request payload in chrome [object Object]?. @stop2stare Unfortunally not, I temporally switched to jQuery ajax for media uploads until I figure out, what the problem with axios is.. ",
    "da2018": "me too,I can send GET http request,but post not work.ajax works fine.\nWhat a !. same issue,don't understand why axios just can't do this simple basic thing!\nthe sample code is so easy,but if you try,you got so many problems.. same issue,don't understand why axios just can't do this simple basic thing!\nthe sample code is so easy,but if you try,you got so many problems.. @naixinxiaozi  So what's your \"Access-Control-Expose-Headers\" in response header?I tried ,but still not work.. @leizard Thanks for your help,but they're very different.. Solve this by myself,actually for me I don't need to add Access-Control-Expose-Headers.\nNeed this:\nheaders:{\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'Accept': 'application/json'}\n            }\nAnd I adjust my server,it works.\n. Solve this by myself,actually for me I don't need to add Access-Control-Expose-Headers.\nNeed this:\nheaders:{\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'Accept': 'application/json'}\n            }\nAnd I adjust my server,it works.\n. ",
    "lbellows": "Instead of \ndata: { data}\ntry \nparams: {data}. It doesn't make sense according to the docs but it worked for me.\nEDIT:  Alternatively, read this section: https://github.com/mzabriskie/axios#using-applicationx-www-form-urlencoded-format\nIt may work as well  :). ",
    "bulgariamitko": "nothing works for me.. jquery.post is working for me fine, but axios both post and/or get are not working. and i tried @lbellows methods, they don't work as well... :-1: . ",
    "pudjamansyurin": "try to use this lib https://github.com/ljharb/qs,\nafter that stringify your data before make POST or PUT request, it works for me. ",
    "JasenWu": "have you resolve it now ? i get this issue now , what can I do?. ",
    "kbiedrzycki": "We can close the issue now, we figured it out. The problem was with build step - our code was minified twice and that caused the problem.. ",
    "KaelWD": "Use a response interceptor (assuming your server is sending the correct content-type):\njs\naxios.interceptors.response.use(response => {\n  return response.headers['content-type'] === 'application/json' ? response : Promise.reject(response);\n}, error => Promise.reject(error));. ",
    "Nitiquita": "I am having the same issue. Can someone tell me where the response interceptor should be placed? Thanks!. I am having the same issue. Can someone tell me where the response interceptor should be placed? Thanks!. ",
    "zourtney": "Yes! Any progress on this? It would make sense to also support this on put and post (and maybe delete).\nComing from Angular's $http, I really miss this type safety.. ",
    "RevanScript": "Absolutely agree, it's very useful. Hope to see this feature soon. ",
    "vyrotek": "This is definitely needed! \nUntil we have this is there an elegant workaround to casting all our responses?\nlet response = await axios.get('/api/users/5');\nlet user = response.data as User;. @MichaelTontchev I'm using Async/Await so response is an AxiosResponse. Ideally it would be AxiosResponse<User> so that I can do let user: User = response.data. ",
    "MichaelTontchev": "@vyrotek , doesn't get() return an AxiosPromise?. Also, is there anything stopping us from just modifying the type definitions to be as they are in the first post in this thread? Why not just go with that?. Rename \"dat\" to \"data\". ",
    "AlexStacker": "hi, when is use interceptors response and only return a type what I has defined like:\n\u5f53\u6211\u4f7f\u7528interceptors response\u5e76\u6307\u5b9a\u53ea\u8fd4\u56dedata\u90e8\u5206\u6570\u636e\u7684\u65f6\u5019\uff0c\n```\nexport declare interface ILoginData {\n    expire: number;\n    role: number;\n    secret: string;\n    token: string;\n}\nexport declare interface ILoginResponse extends IResponse {\n    dat: ILoginData;\n}\n\ninstance.interceptors.response.use(function (response: AxiosResponse): Promise {\n        if (typeof response.data == 'string' && !response.data) {\n            return Promise.reject('\u670d\u52a1\u5668\u6ca1\u6709\u54cd\u5e94\u6b63\u786e\u7684\u6570\u636e, \u8bf7\u68c0\u67e5\u53c2\u6570\u662f\u5426\u6b63\u786e\u3002');\n        }\n        return Promise.resolve(response.data);\n}\nI hope used it like this:\n\u6211\u5e0c\u671b\u80fd\u5c06\u5b9a\u4e49\u7684\u6570\u636e\u63a5\u53e3\u7c7b\u578b\u8fd9\u6837\u4f7f\u7528\uff0c\u800c\u4e0d\u662f\u5f3a\u5236 `AxiosResponse`\n http.get(API.HTTP_INTERFACE_ADDRESS + url).then((rst: ILoginResponse): any => {\n       if (rst.dat.role == \"admin\") {\n            return Promise.resolve(rst.data);\n        }\n    });\nNow there is a error report, how should I solve it?\n\u73b0\u5728\u6709\u62a5\u9519\uff0c\u6211\u8be5\u600e\u4e48\u89e3\u51b3\u5462\nArgument of type '(rst: ILoginResponse) => any' is not assignable to parameter of type '((value: AxiosResponse) => ILoginResponse | PromiseLike) | null | undefined'.\n  Type '(rst: ILoginResponse) => any' is not assignable to type '(value: AxiosResponse) => ILoginResponse | PromiseLike'.\n    Types of parameters 'rst' and 'value' are incompatible.\n      Type 'AxiosResponse' is not assignable to type 'ILoginResponse'.\n        Property 'dat' is missing in type 'AxiosResponse'.\n. sorry, I didn't make myself clear\nType 'AxiosResponse' is not assignable to type 'ILoginResponse'.\nI I revised it like that\nexport declare interface IAxiosPromise extends Promise {\n}\nexport interface IHttp extends AxiosInstance {\n  get(url: string, config?: AxiosRequestConfig): IAxiosPromise;\n}\nand I can used like this\nexport declare interface ILoginResponse{\n    expire: number;\n    role: number;\n    secret: string;\n    token: string;\n}\nhttp.get(API.HTTP_INTERFACE_ADDRESS + url).then((rst: AxiosResponse): any => {\n        console.log(rst.data.role);\n});\nType must be specified  every time. How to write the default type AxiosResponse?\nexport declare interface IResponse{\n    err: string,\n    dat: any\n}\nhttp.get(API.HTTP_INTERFACE_ADDRESS + url).then((rst: AxiosResponse): any => {\n        console.log(rst.data.dat);\n});\n=>\nhttp.get(API.HTTP_INTERFACE_ADDRESS + url).then((rst): any => {\n        console.log(rst.data.dat);\n});\n```. ",
    "sowdri": "Guys,\nIf you are looking for generic http methods using Axios, then you could use a simple wrapper as below:\n```\nconst promise = (axiosPromise: AxiosPromise): Promise => {\n  return new Promise((resolve, reject) => {\n    axiosPromise\n      .then(response => {\n        resolve(response.data);\n      })\n      .catch(error => {\n        if (error.response) {\n          // The request was made and the server responded with a status code\n          // that falls out of the range of 2xx\n          // console.log(error.response.data);\n          // console.log(error.response.status);\n          // console.log(error.response.headers);\n          reject({\n            status: error.response.status,\n            message: error.response.data\n          });\n        } else if (error.request) {\n          // The request was made but no response was received\n          // error.request is an instance of XMLHttpRequest in the browser and an instance of\n          // http.ClientRequest in node.js\n          console.log(error.request);\n          reject({\n            status: 444,\n            message: \"The request was made but no response was received\"\n          });\n        } else {\n          // Something happened in setting up the request that triggered an Error\n          console.log(\"Error\", error.message);\n          reject({\n            status: 417,\n            message: \"Something happened in setting up the request that triggered an Error\"\n          });\n        }\n        // console.log(error.config);\n      });\n  });\n};\n```\nThis method converts an Axios promise to a typescript typed promise. To use this, refer to the following example:\n```\n  readonly server = axios.create({\n    baseURL: config.server,\n    timeout: 10000,\n    headers: {\n      Accept: \"application/json\",\n      \"Content-type\": \"application/json\",\n      \"Client-code\": clientInfo.clientCode\n    }\n  });\nconfirm = (request: MobileNumberVerificationRequest): Promise => {\n    return promise(this.server.post(\"/mobile/unsecure/verify\", request));\n  };\n```\nHope this helps. \n. ",
    "RickCarlino": "After investigating this issue, I found that it was actually a local type error hidden deep in the call stack somewhere, leading me to believe that it is a local issue rather than a problem with Axios.\nUPDATE:\nAfter some investigation, I was able to pin this down to a bad \"response rejected\" interceptor.\nWithin the interceptor I wrote:\nreturn error\nand I solved the problem by instead writing:\nreturn Promise.reject(error);. After investigating this issue, I found that it was actually a local type error hidden deep in the call stack somewhere, leading me to believe that it is a local issue rather than a problem with Axios.\nUPDATE:\nAfter some investigation, I was able to pin this down to a bad \"response rejected\" interceptor.\nWithin the interceptor I wrote:\nreturn error\nand I solved the problem by instead writing:\nreturn Promise.reject(error);. ",
    "cameronk": "I also have this issue. It seems to me that instance.request() should use the method defined in options, falling back to GET if necessary.. I wrote a test, but I can't get the testing libs to work on my local copy so I'll post it here:\njs\n  it('the method should not change when using instance.request()', function (done) {\n    var inst = axios.create({\n      method: 'post',\n      url: 'http://example.com'\n    });\n    inst.request();\n    getAjaxRequest().then(function (request) {\n      expect(request.method).toBe('post');\n      done();\n    });\n  });\nThe issue is that calling instance.request() changes the request method to GET. I haven't run this test, but it should make it clear that the request method is changed from POST to GET along the way.. ",
    "mightym": "I even have this with a normal POST request:\naxios.defaults.headers.common['X-CSRFToken'] = getCookie('csrftoken');\n    return axios({\n      method: 'post',\n      url: url,\n      data: {\n        link: link\n      }\n    })\n    .then(function (response) {\n      console.log(response);\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\nIts really strange. Chrome/Safari tell me that it is a XHR GET request.. ",
    "gamtiq": "Yes, I had an issue with this before I realized that responseType: 'json' should be stated explicitly in config.. ",
    "jerfowler": "It's not just PUT, I can confirm POST does it as well. Looks like an issue when using axios from newer versions of Node and passing a buffer to axios that is less than the size of the Buffer.poolSize, which is typically 8192 bytes. If the buffer will fit in the pool, node doesn't allocate its own memory. What axios's node adapter appears to be doing is copying the entire 8192 bytes and sending the entire internal Buffer pool rather than just the file data. That is why the Content Size show 8192 and the data payload will contain random data.\nhttps://nodejs.org/api/buffer.html#buffer_class_method_buffer_allocunsafe_size\n\nUse of this pre-allocated internal memory pool is a key difference between calling Buffer.alloc(size, fill) vs. Buffer.allocUnsafe(size).fill(fill). Specifically, Buffer.alloc(size, fill) will never use the internal Buffer pool, while Buffer.allocUnsafe(size).fill(fill) will use the internal Buffer pool if size is less than or equal to half Buffer.poolSize. The difference is subtle but can be important when an application requires the additional performance that Buffer.allocUnsafe() provides.. \n",
    "hudadiaz": "I think it is related to https://github.com/mzabriskie/axios/issues/503. Can someone recommends any solution for this?. I think it is related to https://github.com/mzabriskie/axios/issues/503. Can someone recommends any solution for this?. ",
    "erikreyna": "What happens if you take baseUrl out of the config and just add it to url?\nurl: 'http://localhost:8882/iam/json/customers/authenticate',. ",
    "markstickley": "Thanks! I'll try it out on Monday morning. Interestingly I tried changing localhost to foo and it still resolved to 127.0.0.1 so I think something strange is going on outside of the regular config...\n\nOn 24 Feb 2017, at 15:46, Erik Reyna notifications@github.com wrote:\nWhat happens if you take baseUrl out of the config and just add it to url?\nurl: 'http://localhost:8882/iam/json/customers/authenticate',\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Ack sorry. I can see what I've done. baseUrl is incorrect - it should be baseURL. Thanks for taking the time to look; closing the issue :). \n",
    "kamok": "In my issue, I had to add https:// infront of my host. . ",
    "vojtechhabarta": "With TypeScript 2.3 Generic parameter defaults feature it is now possible to do this much better.\nClosing this PR in favor of #1061.. ",
    "polco": "change your import * as axios from 'axios' to import axios from 'axios'. change your import * as axios from 'axios' to import axios from 'axios'. ",
    "pinich": "@polco you solved my problem too !!!\nThanks !!!. @polco you solved my problem too !!!\nThanks !!!.",
    "tang-jason": "Why import * as axios from \"axios\" doesn't work but import axio from \"axios\"?. ",
    "bennadel": "I just ran into something similar. I had been using:\nimport axios = require( \"axios\" );\n... which successfully obtained the axios reference; but, was complaining when I tried to access axios.create() (despite the fact that the code was actually working). I'm not sure why switching to import axios worked :D . Ah, I see in the axios source that it uses:\njs\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;. ",
    "charlesrochati": "Nope, this won't work.\nWhat you have to pass to Axios is a Request Config Object and in this object you can find the data and params properties. You will use them to send data to the server.\nThis way: axios.delete(URL, {params: {foo: 'bar'}})\n\nIn a delete request you should use params instead of data, see the docs:\n// \"data\" is the data to be sent as the request body\n// Only applicable for request methods 'PUT', 'POST', and 'PATCH'\n// When notransformRequestis set, must be of one of the following types:\n// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n// - Browser only: FormData, File, Blob\n// - Node only: Stream\ndata: {\n    firstName: 'Fred'\n  },. > params is to send query string parameters, that's not what I'm doing.\nIf you want to make a axios.delete, that's exactly what you have to do.\nYou don't use axios.delete(URL, {\ndata: { foo: 'bar' } //Only applicable for request methods 'PUT', 'POST', and 'PATCH'\n}) \nfor a delete request, you will use axios.delete(URL, {\nparams: { foo: 'bar' }\n}) \nYou will send data as the request body ONLY WHEN you are using 'PUT', 'POST', and 'PATCH'.\nI'm afraid you're using axios.delete just like a axios.post or (axios.put or axios.patch). When using axios.delete,  you'll send an id to a server, and the server itself will find a resource that matches that given id, only then it will be removed (or trigger some action, but the request is mapped as a http delete).\nBy using  axios.delete(URL, {\ndata: { foo: 'bar' }\n})  you're sending a resource, which makes no sense at all.\nTake a look at the links below, you will have a better understanding:\nhttp://stackoverflow.com/questions/12142652/what-is-the-usefulness-of-put-and-delete-http-request-methods\nhttps://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html [Section 9.7]\n. self.trips.push(data[trip]); //push data to self.trips Where is the data coming from?\nShouldn't it be response.data?. Do you have to trigger the requests in some specific order?\n. I don't think that queueing the requests will make any relevant performance improvement (if you're doing it with axios.all).\nCan't you just take those hundreds of requests and refactor them into 5 or 10? Even if those 5 or 10 requests transfer more data, it would be better, once it is not creating lots of process for the client to take care of.. I think the README is making it dificult to understand:\n// `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\nThis part: // Only applicable for request methods 'PUT', 'POST', and 'PATCH' especially.. ",
    "AkiraLaine": "@charlesrochati I'm confused. params is to send query string parameters, that's not what I'm doing. \nAs for what you quoted above, it says nothing about delete.. @charlesrochati I'm confused. params is to send query string parameters, that's not what I'm doing. \nAs for what you quoted above, it says nothing about delete.. In my case, I do give a payload as well. But either way, if it works using data, it should work using the shorthand.\nEDIT: The specification does not disallow/forbid passing a payload.. ",
    "cggaurav": "@rubennorte I think we should support body in DEL\nHTTP 1.1\nAnd for an example, Elastic . ",
    "aricsangchat": "On a side note, On the server the id is showing up in req.query instead of req.params when using axios.delete('/some/uri', {params: { id: 1 } }) like this. Just wanted to throw that out there.. ",
    "duhseekoh": "FYI. Fair points that DELETE should not have a body. However, sometimes you're stuck having to send a body when the api is out of your control. e.g.\nhttps://auth0.com/docs/api/authorization-extension#remove-user-from-roles \ud83d\udc4e . @jcready - For sure and thanks for the example. Just wanted to add some reasoning for why a body may need to be passed on DELETE when using axios.. Thanks @kmarkow - that does it.\nEdit: Oh my bad. I realize that @capaj needs window and doesn't want to run in testEnvironment: node. \ud83e\udd14 . ",
    "mrchief": "@duhseekoh Maybe this will help: https://github.com/axios/axios/issues/897#issuecomment-343715381. @duhseekoh Maybe this will help: https://github.com/axios/axios/issues/897#issuecomment-343715381. Doesn't fix the real problem for me. Instead, fails with a nicer (and faster) error:\nError: Protocol \"http:\" not supported. Expected \"https:\". @zcei I was using Fiddler proxy. I set it up to decrypt HTTPS traffic so that it listens for https requests.\nI don't have any small snippet but it should be reproducible fairly easily by:\n\nconfigure fiddler proxy to decrypt https\npass proxy to axios (127.0.0.1:8888 - fiddler defaults)\nrun unit tests or make a call to any mock HTTPS API (requestbin, mockbin etc. will work) via axios.\n\nThe request should fail with above error.. Tried passing it as https://.... This time its a different error and looks all weird. Here are the axios configs (some parts redacted):\n```\n Message -> getaddrinfo ENOTFOUND https://127.0.0.1 https://127.0.0.1:8888\n\nConfig -> { adapter: [Function: httpAdapter],\n   transformRequest: { '0': [Function: transformRequest] },\n   transformResponse: { '0': [Function: transformResponse] },\n   timeout: 0,\n   xsrfCookieName: 'XSRF-TOKEN',\n   xsrfHeaderName: 'X-XSRF-TOKEN',\n   maxContentLength: -1,\n   validateStatus: [Function: validateStatus],\n   headers:\n    { Accept: 'application/json, text/plain, /',\n      Authorization: 'Bearer ...',\n      'User-Agent': 'axios/0.16.2',\n      host: 'api.test.io' },\n   method: 'get',\n   url: 'https://api.test.io/test',\n   params: { ... },\n   data: undefined,\n   proxy: { host: 'https://127.0.0.1', port: 8888 } }\n\nRequest -> Writable {\n   _writableState:\n    WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: true,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      bufferedRequest: null,\n      lastBufferedRequest: null,\n      pendingcb: 0,\n      prefinished: false,\nEmitted: false,\n      bufferedRequestCount: 0,\n      corkedRequestsFree:\n       { next: null,\n         entry: null,\n         finish: [Function: bound onCorkedFinish] } },\n   writable: true,\n   domain: null,\n   _events:\n    { response: [Function: handleResponse],\n: [Funct] },\n   _eventsCount: 2,\n   _maxListeners: undefined,\n   _options:\n    { maxRedirects: 21,\n      protocol: 'http:',\n      hostname: 'https://127.0.0.1',\n      port: 8888,\n      path: 'https://api.test.io/test?...',\n      method: 'get',\n      headers:\n       { Accept: 'application/json, text/plain, /',       \n         Authorization: 'Bearer ...',\n         'User-Agent': 'axios/0.16.2',\n         host: 'api.test.io' },\n      agent: undefined,\n      auth: undefined,\n      host: 'https://127.0.0.1',\n      pathname: 'https://api.test.io/test',\n      search: '?...' },\n   _redirectCount: 0,\n   _bufferedWrites: [],\n   _onNativeResponse: [Function],\n   _currentRequest:\n    ClientRequest {\n      domain: null,\n      _events:\n       { response: { [Function: bound onceWrapper] listener: [Function] },\n         socket: [Function],\n         abort: [Function],\n         aborted: [Function],\n: [Function] },\n      _eventsCount: 5,\n      _maxListeners: undefined,\n      output: [],\n      outputEncodings: [],\n      outputCallbacks: [],\n      outputSize: 0,\n      writable: false,\n      _last: true,\n      upgrading: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: false,\n      useChunkedEncodingByDefault: false,\n      sendDate: false,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      _contentLength: 0,\n      _hasBody: true,\n      _trailer: '',\n      finished: true,\n      _headerSent: true,\n      socket:\n       Socket {\n         connecting: false,\n: true,\n         _handle: null,\n         _parent: null,\n         _host: 'https://127.0.0.1',\n         _readableState:\n          ReadableState {\n            objectMode: false,\n            highWaterMark: 16384,\n            buffer: BufferList { head: null, tail: null, length: 0 },\n            length: 0,\n            pipes: null,\n            pipesCount: 0,\n            flowing: true,\n            ended: false,\n            endEmitted: false,\n            reading: true,\n            sync: false,\n            needReadable: true,\n            emittedReadable: false,\n            readableListening: false,\n            resumeScheduled: false,\n            destroyed: true,\n            defaultEncoding: 'utf8',\n            awaitDrain: 0,\n            readingMore: false,\n            decoder: null,\n            encoding: null },\n         readable: false,\n         domain: null,\n         _events:\n          { end: { [Function: bound onceWrapper] listener: [Function: onend] },\n            finish: [Function: onSocketFinish],\n            _socketEnd: [Function: onSocketEnd],\n            connect:\n             [ { [Function: bound onceWrapper] listener: [Function: oncreate] },\n               { [Function: bound onceWrapper] listener: [Function: connect] },\n               { [Function: bound onceWrapper] listener: [Function] } ],\n            free: [Function: onFree],\n            close: [ [Function: onClose], [Function: socketCloseListener] ],\n            agentRemove: [Function: onRemove],\n            drain: [Function: ondrain],\n:Listener] },\n         _eventsCount: 9,\n         _maxListeners: undefined,\n         _writableState:\n          WritableState {\n            objectMode: false,\n            highWaterMark: 16384,\n            finalCalled: false,\n            needDrain: false,\n            ending: false,\n            ended: false,\n            finished: false,\n            destroyed: true,\n            decodeStrings: false,\n            defaultEncoding: 'utf8',\n            length: 1456,\n            writing: true,\n            corked: 0,\n            sync: false,\n            bufferProcessing: false,\n            onwrite: [Function: bound onwrite],\n            writecb: [Function: bound onFinish],\n            writelen: 1456,\n            bufferedRequest: null,\n            lastBufferedRequest: null,\n            pendingcb: 1,\n            prefinished: false,\nEmitted: true,\n            bufferedRequestCount: 0,\n            corkedRequestsFree:\n             { next: null,\n               entry: null,\n               finish: [Function: bound onCorkedFinish] } },\n         writable: false,\n         allowHalfOpen: false,\n         _bytesDispatched: 0,\n         _sockname: null,\n         _pendingData: 'GET https://api.test.io/test?... HTTP/1.1\\r\\nAccept: application/json,\n text/plain, /\\r\\nAuthorization: Bearer ...\\r\\nUser-Agent: axios/0.16.2\\r\\nhost: api.test.io\\r\\nConnectio\nn: close\\r\\n\\r\\n',\n         _pendingEncoding: 'latin1',\n         server: null,\n         _server: null,\n         parser: null,\n         _httpMessage: [Circular],\n         read: [Function],\n         _consuming: true,\n         _idleNext: null,\n         _idlePrev: null,\n         _idleTimeout: -1,\n         [Symbol(asyncId)]: 292884,\n         [Symbol(bytesRead)]: 0 },\n      connection:\n       Socket {\n         connecting: false,\n: true,\n         _handle: null,\n         _parent: null,\n         _host: 'https://127.0.0.1',\n         _readableState:\n          ReadableState {\n            objectMode: false,\n            highWaterMark: 16384,\n            buffer: BufferList { head: null, tail: null, length: 0 },\n            length: 0,\n            pipes: null,\n            pipesCount: 0,\n            flowing: true,\n            ended: false,\n            endEmitted: false,\n            reading: true,\n            sync: false,\n            needReadable: true,\n            emittedReadable: false,\n            readableListening: false,\n            resumeScheduled: false,\n            destroyed: true,\n            defaultEncoding: 'utf8',\n            awaitDrain: 0,\n            readingMore: false,\n            decoder: null,\n            encoding: null },\n         readable: false,\n         domain: null,\n         _events:\n          { end: { [Function: bound onceWrapper] listener: [Function: onend] },\n            finish: [Function: onSocketFinish],\n            _socketEnd: [Function: onSocketEnd],\n            connect:\n             [ { [Function: bound onceWrapper] listener: [Function: oncreate] },\n               { [Function: bound onceWrapper] listener: [Function: connect] },\n               { [Function: bound onceWrapper] listener: [Function] } ],\n            free: [Function: onFree],\n            close: [ [Function: onClose], [Function: socketCloseListener] ],\n            agentRemove: [Function: onRemove],\n            drain: [Function: ondrain],\n:Listener] },\n         _eventsCount: 9,\n         _maxListeners: undefined,\n         _writableState:\n          WritableState {\n            objectMode: false,\n            highWaterMark: 16384,\n            finalCalled: false,\n            needDrain: false,\n            ending: false,\n            ended: false,\n            finished: false,\n            destroyed: true,\n            decodeStrings: false,\n            defaultEncoding: 'utf8',\n            length: 1456,\n            writing: true,\n            corked: 0,\n            sync: false,\n            bufferProcessing: false,\n            onwrite: [Function: bound onwrite],\n            writecb: [Function: bound onFinish],\n            writelen: 1456,\n            bufferedRequest: null,\n            lastBufferedRequest: null,\n            pendingcb: 1,\n            prefinished: false,\nEmitted: true,\n            bufferedRequestCount: 0,\n            corkedRequestsFree:\n             { next: null,\n               entry: null,\n               finish: [Function: bound onCorkedFinish] } },\n         writable: false,\n         allowHalfOpen: false,\n         _bytesDispatched: 0,\n         _sockname: null,\n         _pendingData: 'GET https://api.test.io/test?... HTTP/1.1\\r\\nAccept: application/json,\n text/plain, /\\r\\nAuthorization: Bearer ...\\r\\nUser-Agent: axios/0.16.2\\r\\nhost: api.test.io\\r\\nConnectio\nn: close\\r\\n\\r\\n',\n         _pendingEncoding: 'latin1',\n         server: null,\n         _server: null,\n         parser: null,\n         _httpMessage: [Circular],\n         read: [Function],\n         _consuming: true,\n         _idleNext: null,\n         _idlePrev: null,\n         _idleTimeout: -1,\n         [Symbol(asyncId)]: 292884,\n         [Symbol(bytesRead)]: 0 },\n      _header: 'GET https://api.test.io/test?... HTTP/1.1\\r\\nAccept: application/json, text/pl\nain, /\\r\\nAuthorization: Bearer ...\\r\\nUser-Agent: axios/0.16.2\\r\\nhost: api.test.io\\r\\nConnection: close\n\\r\\n\\r\\n',\n      _onPendingData: [Function: noopPendingOutput],\n      agent:\n       Agent {\n         domain: null,\n         _events: { free: [Function] },\n         _eventsCount: 1,\n         _maxListeners: undefined,\n         defaultPort: 80,\n         protocol: 'http:',\n         options: { path: null },\n         requests: {},\n         sockets:\n          { 'https://127.0.0.1:8888:':\n             [ Socket {\n                 connecting: false,\n  : true,\n                 _handle: null,\n                 _parent: null,\n                 _host: 'https://127.0.0.1',\n                 _readableState:\n                  ReadableState {\n                    objectMode: false,\n                    highWaterMark: 16384,\n                    buffer: BufferList { head: null, tail: null, length: 0 },\n                    length: 0,\n                    pipes: null,\n                    pipesCount: 0,\n                    flowing: true,\n                    ended: false,\n                    endEmitted: false,\n                    reading: true,\n                    sync: false,\n                    needReadable: true,\n                    emittedReadable: false,\n                    readableListening: false,\n                    resumeScheduled: false,\n                    destroyed: true,\n                    defaultEncoding: 'utf8',\n                    awaitDrain: 0,\n                    readingMore: false,\n                    decoder: null,\n                    encoding: null },\n                 readable: false,\n                 domain: null,\n                 _events:\n                  { end: { [Function: bound onceWrapper] listener: [Function: onend] },\n                    finish: [Function: onSocketFinish],\n                    _socketEnd: [Function: onSocketEnd],\n                    connect:\n                     [ { [Function: bound onceWrapper] listener: [Function: oncreate] },\n                       { [Function: bound onceWrapper] listener: [Function: connect] },\n                       { [Function: bound onceWrapper] listener: [Function] } ],\n                    free: [Function: onFree],\n                    close: [ [Function: onClose], [Function: socketCloseListener] ],\n                    agentRemove: [Function: onRemove],\n                    drain: [Function: ondrain],\n  :Listener] },\n                 _eventsCount: 9,\n                 _maxListeners: undefined,\n                 _writableState:\n                  WritableState {\n                    objectMode: false,\n                    highWaterMark: 16384,\n                    finalCalled: false,\n                    needDrain: false,\n                    ending: false,\n                    ended: false,\n                    finished: false,\n                    destroyed: true,\n                    decodeStrings: false,\n                    defaultEncoding: 'utf8',\n                    length: 1456,\n                    writing: true,\n                    corked: 0,\n                    sync: false,\n                    bufferProcessing: false,\n                    onwrite: [Function: bound onwrite],\n                    writecb: [Function: bound onFinish],\n                    writelen: 1456,\n                    bufferedRequest: null,\n                    lastBufferedRequest: null,\n                    pendingcb: 1,\n                    prefinished: false,\n  Emitted: true,\n                    bufferedRequestCount: 0,\n                    corkedRequestsFree:\n                     { next: null,\n                       entry: null,\n                       finish: [Function: bound onCorkedFinish] } },\n                 writable: false,\n                 allowHalfOpen: false,\n                 _bytesDispatched: 0,\n                 _sockname: null,\n                 _pendingData: 'GET https://api.test.io/test?... HTTP/1.1\\r\\nAccept: applicati\non/json, text/plain, /\\r\\nAuthorization: Bearer ...\\r\\nUser-Agent: axios/0.16.2\\r\\nhost: api.test.io\\r\\nC\nonnection: close\\r\\n\\r\\n',\n                 _pendingEncoding: 'latin1',\n                 server: null,\n                 _server: null,\n                 parser: null,\n                 _httpMessage: [Circular],\n                 read: [Function],\n                 _consuming: true,\n                 _idleNext: null,\n                 _idlePrev: null,\n                 _idleTimeout: -1,\n                 [Symbol(asyncId)]: 292884,\n                 [Symbol(bytesRead)]: 0 } ] },\n         freeSockets: {},\n         keepAliveMsecs: 1000,\n         keepAlive: false,\n         maxSockets: Infinity,\n         maxFreeSockets: 256 },\n      socketPath: undefined,\n      timeout: undefined,\n      method: 'GET',\n      path: 'https://api.test.io/test?...',\n      _ended: false,\n      res: null,\n      aborted: undefined,\n      timeoutCb: null,\n      upgradeOrConnect: false,\n      parser: null,\n      maxHeadersCount: null,\n      _redirectable: [Circular],\n      [Symbol(outHeadersKey)]:\n       { accept: [ 'Accept', 'application/json, text/plain, /' ],\n         authorization:\n          [ 'Authorization',\n            'Bearer ...' ],\n         'user-agent': [ 'User-Agent', 'axios/0.16.2' ],\n         host: [ 'host', 'api.test.io' ] } },\n   _currentUrl: 'http://https://127.0.0.1/https://api.test.io/test?...' }\n\nResponse -> {}\n\n``. It seems passing it on therequest` object works:\n``\n  const request = {\n    headers\n    , url:${baseUrl}/${path}`\n    , params\n    , data\n    , method\n    , proxy: {\n      host: '127.0.0.1'\n      , port: 8888\n    }\n  }\naxios.request(request) // works and the call shows up on fiddler\n```\nI was trying to set it on the instance before:\n```\n// doesn't work\ninstance = axios.create({\n  proxy: {\n      host: '127.0.0.1'\n      , port: 8888\n    }\n})\n```\nThe readme indicates that the same config can be used (for create and request) or maybe its just an unfortunate allusion due to usage of same word (config). \nIt might help to separate them if that's the case, i.e create config is not the same as request config. \nThe same thing without your patch gives me this error: write EPROTO 101057795:error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol:openssl\\ssl\\s23_clnt.c:797:\nSo I guess your patch does work! :). @robbiemu I think its already documented: https://github.com/axios/axios#handling-errors. @paolavness I'd suggest to open up a new issue instead of commenting here. Not many watch closed issues. Or maybe even ask it on StackOverflow. . ",
    "quinnliu": "const response = await axios.delete('/api/matches/delete_match', {\n        data: { matchInfo }\n    });\nI have it working with data but not working with params with version \"axios\": \"^0.17.1\". const response = await axios.delete('/api/matches/delete_match', {\n        data: { matchInfo }\n    });\nI have it working with data but not working with params with version \"axios\": \"^0.17.1\". ",
    "HanchengZhao": "@quinnliu I think choosing to use data or params depends on how your backend handles the request.\n Using data is to put the payload inside request body, just as you do with post.\n Using params is to treat payloads as url params. Like if you send\njs\naxios.delete(URL, {\n params: { foo: 'bar' }\n})\nit's same as sending request to URL?foo=bar.. @quinnliu I think choosing to use data or params depends on how your backend handles the request.\n Using data is to put the payload inside request body, just as you do with post.\n Using params is to treat payloads as url params. Like if you send\njs\naxios.delete(URL, {\n params: { foo: 'bar' }\n})\nit's same as sending request to URL?foo=bar.. ",
    "arevutsky": "My tempolary solution:\nparamsSerializer: function(params) { return jQuery.param(params) }. ",
    "ekampp": "If someone wants want a solution that doesn't require jquery, here is my solution:\n```\n// Format nested params correctly\naxios.interceptors.request.use(config => {\n  window.console.log(config);\nconfig.paramsSerializer = params => {\n    // Qs is already included in the Axios package\n    return Qs.stringify(params, {\n      arrayFormat: \"brackets\",\n      encode: false\n    });\n  };\nreturn config;\n});\n```. @Trimakas, and @edgarv09 where to put it depends on what framework your running I guess. I usually run a VueJs application, and I would do something like this:\n```\n// main.js\nimport axios from \"axios\";\n// Format nested params correctly\naxios.interceptors.request.use(config => {\n  window.console.log(config);\nconfig.paramsSerializer = params => {\n    // Qs is already included in the Axios package\n    return Qs.stringify(params, {\n      arrayFormat: \"brackets\",\n      encode: false\n    });\n  };\nreturn config;\n});\n```\nI hope that helps.. ",
    "Trimakas": "@ekampp one question.. Where do we put that config? I don't think there is a axios config file, so maybe just before you make the axios request?. ",
    "edgarv09": "@ekampp Just putted it before execute the action like this.\n    axios.interceptors.request.use(config => {\n        config.paramsSerializer = params => {\n          // Qs is already included in the Axios package\n          return Qs.stringify(params, {\n            arrayFormat: \"brackets\",\n            encode: false\n          });\n        };\n        return config;\n      });\n\n    axios.get(URL,{ params})...\n",
    "eithed": "You can pass the variables to url per\nlet payloadString = qs.stringify(payload)\naxios.get(`endpoint?${payloadString}`)\n(qs = querysting, in my case I've used https://github.com/ljharb/qs; I don't see querystring within axios)\nOf course, it would be great if axios.get(url, {params: data}) was symmetric to axios.post(url, data) so if I need to change the method of request, it's as simple as changing what method on axios I'm calling without messing with internals / trying to serialize the object myself.. ",
    "uvtzxpm": "There are already instructions in the readme, so it should have been quite easy to find the answer:\nhttps://github.com/mzabriskie/axios#using-applicationx-www-form-urlencoded-format\nWhether or not Axios should automatically take care of this isn't a question for me to answer, but the main focus of the library is sending JSON, so it optimizes for that use case I guess.. ",
    "c0debreaker": "Oh, thank you for that link. I didn't see it before.. Yup, I went with .post\nshortGarage2WirePins = (doorNum) => {\n    axios.post('/api/garage', qs.stringify({ 'doornum': doorNum }));\n  }\nthen I use it like this\n<button className=\"garage-props\" onClick={() => this.shortGarage2WirePins(0)} onChange={() => this.shortGarage2WirePins(0)}>Door1</button>. I'm not really sure if it's an axios issue or the old ie browser on my phone. I decided to just use .post and not waste time trying to get .get working. Yup, I got it working last night. Thanks.. I will try that. Thanks. ",
    "omidkrad": "You can use params for specifying query strings.\njavascript\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },. ",
    "yolo2013": "Promise based HTTP client for the browser and node.js. ",
    "SeokHeo": "@nickuraltsev \nThe test code was written by @CameronK \nThis is undoubtedly a call to request () with an instance of axios, and the request is sent to post, which changes to get.. ",
    "Alendorff": "Have the same issue with \"axios\": \"^0.18.0\" and Microsoft Edge 41.16299.492.0\nhttps://developer.microsoft.com/en-us/microsoft-edge/platform/issues/9181857/ describes the same issue but marked as fixed despite on other complaints.\nIt seems like I finally found where my problem was. It's tightly related to this issue with dates: https://stackoverflow.com/questions/21413757/tolocaledatestring-changes-in-ie11\nMy request contained one of such date-strings in local format. When I cleaned it with suggested replace function .replace(/[^ -~]/g, '') request has started to work.. ",
    "QuentinDejean": "It looks like the file is not being found in your static assets folder on your server-side .Therefore, your server is returning you whatever you do in your last app.use('*') middleware. Presumably returning you a 404 page?\nIn any case, this surely does not have anything to do with axios itself. HI @purezen,\nLooking at your request, it looks like your header is being sent in the request body instead of the headers.\nI think you'll need to pass the headers in a different way using axios.post: https://github.com/mzabriskie/axios#axioscreateconfig\nOr instead using: https://github.com/mzabriskie/axios#request-config\naxios({\nurl: '',\nmethod: 'post',\nheaders: {}\n})\nDoes that make sense?. ",
    "jephjohnson": "Thanks Quentin, it ended up being my config in express. :/. Thanks Quentin, it ended up being my config in express. :/. I had a scoping issue. Resolved in my server.js config with the following:\n.....\nfs.writeFile(__dirname + '/data/output.json', JSON.stringify(result, null, 4), function(err){. I had a scoping issue. Resolved in my server.js config with the following:\n.....\nfs.writeFile(__dirname + '/data/output.json', JSON.stringify(result, null, 4), function(err){. ",
    "Maximus1000": "If anyone sees this same issue with Laravel (found the thread per a similar issue), check the prefix on your axios ajax URL.  I was missed the default Laravel prefix of 'api' without which I was getting the standard page markup and no json.. If anyone sees this same issue with Laravel (found the thread per a similar issue), check the prefix on your axios ajax URL.  I was missed the default Laravel prefix of 'api' without which I was getting the standard page markup and no json.. ",
    "nckraghu": "@QuentinDejean Thanks, that solved the issue for me!. ",
    "BunkaS": "I was having a similar issue in react-native: \nThe following always returned 400: axios.post(url, data, header);\nWhile the next one returned 200: axios({url: url, method: 'post', data: data, headers: header }); \nIs this an axios post bug. Oh and thanks @QuentinDejean  for the suggestion.. ",
    "Mutmatt": "@BunkaS having your full code of the 400 would be useful as you don't list how the signature looks it should look something like this:\njavascript\naxios.post(url, data, {\n    headers: { 'key': 'value' }\n});. ",
    "alfonsodev": "The problems here is that axios kind of shallows the error, \nBut, as axios exposes request : XMLHttpRequest you can trying to access the \nheader directly from the  XMLHTttpRequest object.\nrequest.getResponseHeader('X-Request-Id')\nand then you get the exact error Refused to get unsafe header \"X-Request-Id\"\nFor people using express and it's cors module, there is a configuration variable called exposedHeaders\nyou can use it like this. \n```\nconst corsOptions = {\n  origin: 'http://localhost:8080',\n  allowedHeaders: ['Accept-Version', 'Authorization', 'Credentials', 'Content-Type'],\n  exposedHeaders: ['X-Request-Id'],\n}\napp.all('*', cors(corsOptions))\n```. ",
    "jasonswearingen": "i tried doing compression manually but I always get errors when inspecting or receiving.. why hasn't this been merged?  seems like a very simple PR . @pmarrone  no, that is a seperate issue.  this issue, as described, exists in the current 0.18 version of axios.\nI think it should be reopened, and this PR should be tested and merged.\nedit: you are the creator of the PR, no need to tell you what it fixes!. well maybe a slightly different bug, as I tried creating a custom axios instance and specifying just a http agent, but still got the\nError: Protocol \"https:\" not supported. Expected \"http:\" fatal error when requesting a http url that redirects to https.\nonly not specifying a httpAgent works.\nadditionally, trying to set the defaults.httpAgent and defaults.httpsAgent fails, but that's another bug to file.....\n. ",
    "gianisegatto": "I have the same problem. How can I specify I want to send a zip request and make my headers only have the content that I want?. I have the same problem. How can I specify I want to send a zip request and make my headers only have the content that I want?. ",
    "BarukhOr": "Glossed over the if statement which was always evaluating to false in the test environment.. ",
    "Fraccaman": "I'm really sorry, but a friend of mine used my computer to \"have fun\" with such a stupid joke. You can close.. ",
    "arryanggaputra": "same here. ",
    "ikosar": "Make Sure \"http://\" is in your URL Address .. ",
    "omair115": "make sure when you are downloading axios library turn off your emulator or connected device and make API call with https.. ",
    "falahatiali": "@da2018 i have such problem but by your approach i cant solve that. \n. ",
    "sergop321": "@WoLfulus If I do this, it will run only after server response. this is not the behavior I am trying to implement.. Both your suggestions runs the code only after the response from server, I trying to run the cookieClear after the request is sent but not to wait for the server response.. @jcready I think I can make it work with this, I think it should be \njavascript\naxios.request({ url: '/logout' });\nsetImmediate(() => {\n setImmediate(clearCookie);\n});\nbecause the axios request execution is promise inside promise. But I haven't tested it yet.\nI am afraid to have different behaviors in different browsers, because you rely on the js engine implementation of code execution.\n@lcrossan The example I gave was simplified for the clearance. The idea is that I need to update the application state to unauthorized state (this will update the relevant UI and everything else).\nthis important to do before waiting for server response for 2 reasons:\n1) The user won't see an immediate UI update if I am waiting for server response (In mobile networks this can take even several seconds). And won't work at all if there is no internet connection.\n2) If user continue do action that require more requests to server, they will be send with the previous credential (Race conditions).\nI can do both things even before sending the request the only problem is the cookie, that is being added by browser for the request, so I am not able to clear it before the request is sent (Otherwise the logout request is sent without the cookie). - (I can modify the logout request to pass the auth data in a different way than a cookie, this probably will solve the issue for me - Thanks for the advice).\nI understand this is not a part of the promise spec but, this can be easily implemented by providing a callback function in request config for example afterRequest, which will be executed inside adapters after request is sent.\n. @jcready I think I can make it work with this, I think it should be \njavascript\naxios.request({ url: '/logout' });\nsetImmediate(() => {\n setImmediate(clearCookie);\n});\nbecause the axios request execution is promise inside promise. But I haven't tested it yet.\nI am afraid to have different behaviors in different browsers, because you rely on the js engine implementation of code execution.\n@lcrossan The example I gave was simplified for the clearance. The idea is that I need to update the application state to unauthorized state (this will update the relevant UI and everything else).\nthis important to do before waiting for server response for 2 reasons:\n1) The user won't see an immediate UI update if I am waiting for server response (In mobile networks this can take even several seconds). And won't work at all if there is no internet connection.\n2) If user continue do action that require more requests to server, they will be send with the previous credential (Race conditions).\nI can do both things even before sending the request the only problem is the cookie, that is being added by browser for the request, so I am not able to clear it before the request is sent (Otherwise the logout request is sent without the cookie). - (I can modify the logout request to pass the auth data in a different way than a cookie, this probably will solve the issue for me - Thanks for the advice).\nI understand this is not a part of the promise spec but, this can be easily implemented by providing a callback function in request config for example afterRequest, which will be executed inside adapters after request is sent.\n. ",
    "mxtetrachord": "if i'm understanding this correctly, you have some authentication data in your cookie, that you need to clear when you hit your /logout endpoint.\ntwo things come to mind -- one, it's a super bad idea to store any sensitive data in a cookie, especially one not flagged HTTP-only as it appears this one is. if i can mount a man in the middle or xss attack on your client, i can grab the cookie from javascript just as easily as you can.\ntwo, i can't think of a reason why the order would matter at all. just clear whatever data you need to clear on the server, and then clear it on the client.\njs\naxios.request({ url: '/login' })\n  .then(() => {\n    clearCookie()\n  })\nthe fact that axios uses Promises under the hood basically means that there's no really guaranteed way to do what you're asking -- Promises just weren't built with that in mind. there's no affordance in the spec for it.. ",
    "Khaledgarbaya": "Me and a colleague of mine identified the problem, a PR should be coming soon. Me and a colleague of mine identified the problem, a PR should be coming soon. the PR is here https://github.com/mzabriskie/axios/pull/959. the PR is here https://github.com/mzabriskie/axios/pull/959. IE9 is no longer supported by Microsoft and I don't see any plans to fix this is axios. IE9 is no longer supported by Microsoft and I don't see any plans to fix this is axios. Can someone post a clear snippet of code that reproduces this issue? Never seen this in axios before.\ninstead of passing the Authorization header and api url with every request, why not pass it as default config\n```js\nvar instance = axios.create({\n  baseURL: 'http://exampleapi.com/',\n  headers: {'Authorization': 'Bearer ksdjfglksgflksgsjdhglaslfkhgasf'}\n})\ninstance.get('user').then(response => ....)\n```. Can someone post a clear snippet of code that reproduces this issue? Never seen this in axios before.\ninstead of passing the Authorization header and api url with every request, why not pass it as default config\n```js\nvar instance = axios.create({\n  baseURL: 'http://exampleapi.com/',\n  headers: {'Authorization': 'Bearer ksdjfglksgflksgsjdhglaslfkhgasf'}\n})\ninstance.get('user').then(response => ....)\n. @dmitrij-onoffapp `get` fundtion does not accept `data` objectjs\nvar config = {\n    headers: { 'Authorization': 'Bearer ksdjfglksgflksgsjdhglaslfkhgasf' }\n}\nreturn axios.get(url, config)\n. @dmitrij-onoffapp `get` fundtion does not accept `data` objectjs\nvar config = {\n    headers: { 'Authorization': 'Bearer ksdjfglksgflksgsjdhglaslfkhgasf' }\n}\nreturn axios.get(url, config)\n``. Me and a colleague of mine identified the problem, a PR should be coming soon. Me and a colleague of mine identified the problem, a PR should be coming soon. the PR is here https://github.com/mzabriskie/axios/pull/959. the PR is here https://github.com/mzabriskie/axios/pull/959. 0.19.0-beta.1 should fix the issue, I am closing the issue and feel free to create a new one if anyone still having the issue. 0.19.0-beta.1 should fix the issue, I am closing the issue and feel free to create a new one if anyone still having the issue. Hey @tomkis can you isolate the problem in a small snippet of code?. Hey @tomkis can you isolate the problem in a small snippet of code?. Please use the emoji to vote, adding +1 comment won't help. This has nothing to do wit axios, the browser is blocking your request for security reasons. This issue has not had recent activity. It will be closed.\nFeel free to open a new one if you still have questions/issues\nThanks. This issue has not had recent activity. It will be closed.\nFeel free to open a new one if you still have questions/issues\nThanks. You can achieve that already if your server returns JSON response.response.datawill be an object. It's up to your server it shapes the data. You can achieve that already if your server returns JSON response.response.datawill be an object. It's up to your server it shapes the data. This issue has not had recent activity. It will be closed.\nFeel free to open a new one if you still have questions/issues\nThanks. This issue has not had recent activity. It will be closed.\nFeel free to open a new one if you still have questions/issues\nThanks. This issue has not had recent activity. It will be closed.\nFeel free to open a new one if you still have questions/issues\nThanks. This issue has not had recent activity. It will be closed.\nFeel free to open a new one if you still have questions/issues\nThanks. This issue has not had recent activity. It will be closed.\nFeel free to open a new one if you still have questions/issues\nThanks. This issue has not had recent activity. It will be closed.\nFeel free to open a new one if you still have questions/issues\nThanks. This issue has not had recent activity. It will be closed.\nFeel free to open a new one if you still have questions/issues\nThanks. This issue has not had recent activity. It will be closed.\nFeel free to open a new one if you still have questions/issues\nThanks. This a normal browser behavior, I am closing this issue now. Feel free to open a new one if you have another issue . This a normal browser behavior, I am closing this issue now. Feel free to open a new one if you have another issue . I am closing this issue now, feel free to create a new one if you have question. I am closing this issue now, feel free to create a new one if you have question. this issue will be closed due to inactivity, feel free to create a new one if you have any questions. Possible duplicate of https://github.com/axios/axios/issues/1153. duplicate of https://github.com/axios/axios/issues/1286. Closing will happen later when we have the alpha release. @emilyemorehouse we'll add aCHANGELOGsoon to therelease/1.0.0branch. @zcei has already something in place in his machine. you can check the axios [API](https://github.com/axios/axios#axios-api) section in the README.\nthe data is insideresponse.data. Can you share a code snippet ?. That's because you are rejecting the promise and if you don't catch somewhere else the error will popup. This has nothing to do with axios, please check stack overflow and I am sure users can help you there. LGTM, thanks a lot for the effort. @AyushG3112 Unfortunately I don't have npm release rights. @zcei I was not added to the npm repo, I can only merge changes. looks like ci is failing https://travis-ci.org/axios/axios/builds/377741133#L2812. This is not related to axios for security reasons the browser won't let you save an image from a different domain.\nYou can use this as a workaround https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image#Storing_an_image_from_a_foreign_origin. Do we need this here?. I don't see this used here, or was it there before ?. It would be nice to have another npm scriptformatso future contributor can use it to reformat their code before submitting a PR. in a second thought this might pollute the changes in the PR, adding a ci step to lint would be better I guess. Usingasyncawaitwill require us to use different configs than the library which may introduce some confusion.\nIt would be nice to usePromisesfor now. To align the feature use across the library. isn'tAlibaba` who said that \ud83d\ude48 . \ud83e\udd26\u200d\u2642\ufe0f . ",
    "trainiac": "this works for me\n```js\nimport Api from 'api/myApi'\nimport { Actions } from 'store'\nexport default store => {\n  Api.interceptors.request.use(config => {\n    return store.dispatch(Actions.ensureIdentity).then(identity => {\n      config.headers.Authorization = Bearer ${identity.token}\n      return Promise.resolve(config)\n    })\n  })\n}\n```\nYou need to change your code to \n```js\nfunction axiosCall () {\n  return new Promise((resolve, reject) => {\n    Axios.post(URL, {apiKey}).then((response) => {\n      resolve(response.data.message);\n    }).catch((error) => {\n      reject(error);\n    });\n  });\n}\ninstance.interceptors.request.use((config) => {\n       return axiosCall().then((tokenResponse) => {\n          setWebCreds(tokenResponse);\n          config.headers.Authorization = Bearer ${tokenResponse};\n          return Promise.resolve(config)\n        }).catch(error => {\n           // decide what to do if you can't get your token\n        })\n}, (error) => {\n  return Promise.reject(error);\n});\n. this works for mejs\nimport Api from 'api/myApi'\nimport { Actions } from 'store'\nexport default store => {\n  Api.interceptors.request.use(config => {\n    return store.dispatch(Actions.ensureIdentity).then(identity => {\n      config.headers.Authorization = Bearer ${identity.token}\n      return Promise.resolve(config)\n    })\n  })\n}\n```\nYou need to change your code to \n```js\nfunction axiosCall () {\n  return new Promise((resolve, reject) => {\n    Axios.post(URL, {apiKey}).then((response) => {\n      resolve(response.data.message);\n    }).catch((error) => {\n      reject(error);\n    });\n  });\n}\ninstance.interceptors.request.use((config) => {\n       return axiosCall().then((tokenResponse) => {\n          setWebCreds(tokenResponse);\n          config.headers.Authorization = Bearer ${tokenResponse};\n          return Promise.resolve(config)\n        }).catch(error => {\n           // decide what to do if you can't get your token\n        })\n}, (error) => {\n  return Promise.reject(error);\n});\n```. ",
    "Shion093": "Yes, thanks you, is working now, but I ended up with this approach\njavascript\ninstance.interceptors.request.use( async (config) => {\n      const tokenResponse = await axiosCall();\n      setWebCreds(tokenResponse);\n      config.headers.Authorization = `Bearer ${tokenResponse.access_token}`;\n      return config;\n  }\n  return config;\n}, (error) => {\n  return Promise.reject(error);\n});. ",
    "neilgirardi": "@trainiac I've been pulling my hair out all day trying to implement this functionality. I kept getting cancelToken errors. Your code was very helpful in solving the issue. Cheers!. @trainiac I've been pulling my hair out all day trying to implement this functionality. I kept getting cancelToken errors. Your code was very helpful in solving the issue. Cheers!. ",
    "ahles": "If I visit the axios code I find this section:\njavascript\n// Add headers to the request\nif ('setRequestHeader' in request) {\n  utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n    if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n      // Remove Content-Type if data is undefined\n      delete requestHeaders[key];\n    } else {\n      // Otherwise add header to the request\n      request.setRequestHeader(key, val);\n    }\n  });\n}\nIf there's no requestData, then the \"Content-Type\" header is removed. The \"Content-Type\" header is for setting the requestData type. So if there's no request data, the 'Content-Type' header gets removed.\nAnd I found a section in the docs about requestData:\njavascript\n// `data` is the data to be sent as the request body\n// Only applicable for request methods 'PUT', 'POST', and 'PATCH'\n// When no `transformRequest` is set, must be of one of the following types:\n// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n// - Browser only: FormData, File, Blob\n// - Node only: Stream\ndata: {\n  firstName: 'Fred'\n},\nSo you can't set data for a GET request, and at the same time the \"Content-Type\" header for a request without data gets ignored.\nOne can't set a \"Content-Type\" header for a GET request in Axios. And that's probably correct behaviour. (I'm only user)\nIf you want to send data to the server, you should use PUT or POST.\nhttps://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Request_fields\n\nContent-Type:\nThe MIME type of the body of the request (used with POST and PUT requests)\n\nIf you want the server to respond with \"application/json\", you would need \"Accept\": \"application/json\", which is already set by Axios I think.. ",
    "concubicycle": "I am doing a post, settings data to an object (verified non-null), and trying to set Content-Type, and it still isn't working: \n```\n    var axiosObj = {\n            method: this.method,\n            params: queryParams,\n            data: bodyParams,\n            url: this._getUrl(params),\n            headers:{\n                'Content-Type': 'application/json'            \n            }\n        };\n    return axios(axiosObj)\n\n```\nIf I comment out \"params: queryParams\", it works. That should be.. my code decides which params to send how during runtime. . ",
    "AbhimanyuVashisht": "how can one change the default 'Content-Type' in axios ?\n. ",
    "Lak0sta": "+1. ",
    "edwardjyu": "I have same problem. The strange thing is that 'Content-Type' is added in headers with Electron main.js while it always is missed at Renderer(web). I did put any dummy data. . I have same problem. The strange thing is that 'Content-Type' is added in headers with Electron main.js while it always is missed at Renderer(web). I did put any dummy data. . ",
    "LeoAref": "@nickuraltsev Why did you close the issue without listening to my argument!!!!. @nickuraltsev My point simply was about having this feature to avoid adding slash to all my URLs\nLet's assume that I've 15 services that call various APIs, and the backend expects that all URLs end with a slash\nSo currently I've to do:\njs\nfunction getUser(id) {\n  return axios.get('/user/' + id + '/');\n}\nAnd repeat adding the slash in all the services\n\nInstead we can simply configure axios to add it:\n```js\naxios.defaults.trailingSlash = true;\nfunction getUser(id) {\n  return axios.get('/user/' + id);\n}\n```. @rubennorte Thanks a bunch for that code snippet \ud83d\udc4d . I got the way of doing that, thanks for the great interceptors feature!\n```js\n// utils.js\nexport function interpolateUrl(config) {\n  const url = config.url;\n  const keys = config.keys;\n// do the magic here...\n  // and return the interpolated url\n  return config;\n}\n// http.js\ncustom.interceptors.request.use(function (config) {\n  return interpolateUrl(config);\n});\n```\n. ",
    "xakep139": "Maybe not this issue, but I can't find \"Location\" in response headers.\n\nResponse object:\n. This solved the problem: http://stackoverflow.com/a/37931084/4963622. ",
    "lkmadushan": "Can you see location header within interceptors?\nFor now I did this.\n```\naxios.interceptors.response.use(function (response) {\n    if(response.headers.location) {\n        return axios.get(response.headers.location);\n    }\nreturn Promise.resolve(response);\n\n}, function (error) {\n    return Promise.reject(error);\n  });\n```. ",
    "Jack-X-Yang": "We were talked not the same question, because my English is sucks that you don't understood me. But  I have figured out that problem. \nThe result of the function in transformResponse is assign to response.data not response, that means we can only change the data of response but not the whole response.\n. ",
    "flo-sch": "Shouldn't it be mentioned in the documentation, though?. ",
    "weikin2015": "@zp1112  Have you solved this problem?I'm the same problem. I'm the same problem with #764,with CROS . @zp1112  No. @zp1112 We are considering server side rendering for better SEO, this problem will no longer exit if we use SSR.Please tell me if you solved this problem,thank you!\n. ",
    "zp1112": "@weikin2015 no ! I use nginx to proxy the api.. Have you solved this problem?. ",
    "randomknowledge": "@rubennorte, It's definitely not a problem with the API (which is the very common Django Rest Framework, http://www.django-rest-framework.org/ in my case).\nIE9 is really not sending the correct headers.\nCan you please reopen this issue or remove IE9 compatibility from the Readme?. @rubennorte, It's definitely not a problem with the API (which is the very common Django Rest Framework, http://www.django-rest-framework.org/ in my case).\nIE9 is really not sending the correct headers.\nCan you please reopen this issue or remove IE9 compatibility from the Readme?. ",
    "xiavn": "I seem to be seeing the same issue - my post request works in all other browsers, but on IE9, the content-type is never set and the request fails.. ",
    "Dakuan": "I've seen this happen when the body is sent as a string rather than json.. I've seen this happen when the body is sent as a string rather than json.. ",
    "chenfaxiang": "@dclovec  bro, The question is it still?. ",
    "Andreyco": "This is still issue for me.\nUnfortunately, request interceptor is run prior this \"clean up\" destroys \"Content-Type\" header. \n@mzabriskie I understand letting browser to do the thing here is good. In certain cases dev should be able to force whatever he needs to. Would it be possible to allow this? \n\n\"You can intercept requests or responses before they are handled by then or catch.\"\n\nBased on statement above, my assumption whatever request interceptor returns is used - not entirely true. Possible to make that true? Would it bring breaking changes?. FYI, you can set custom adapter responsible for handling requests.\nFor now, I ended with modified adapter. The only difference is it does not remove Content-Type header.\n```js\nconst utils = require('axios/lib/utils');\nconst settle = require('axios/lib/core/settle');\nconst buildURL = require('axios/lib/helpers/buildURL');\nconst parseHeaders = require('axios/lib/helpers/parseHeaders');\nconst isURLSameOrigin = require('axios/lib/helpers/isURLSameOrigin');\nconst createError = require('axios/lib/core/createError');\nconst btoa =\n  (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) ||\n  require('axios/lib/helpers/btoa');\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n    var request = new XMLHttpRequest();\n    var loadEvent = 'onreadystatechange';\n    var xDomain = false;\n// For IE 8/9 CORS support\n// Only supports POST and GET calls and doesn't returns the response headers.\n// DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.\nif (\n  process.env.NODE_ENV !== 'test' &&\n  typeof window !== 'undefined' &&\n  window.XDomainRequest &&\n  !('withCredentials' in request) &&\n  !isURLSameOrigin(config.url)\n) {\n  request = new window.XDomainRequest();\n  loadEvent = 'onload';\n  xDomain = true;\n  request.onprogress = function handleProgress() {};\n  request.ontimeout = function handleTimeout() {};\n}\n\n// HTTP basic authentication\nif (config.auth) {\n  var username = config.auth.username || '';\n  var password = config.auth.password || '';\n  requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n}\n\nrequest.open(\n  config.method.toUpperCase(),\n  buildURL(config.url, config.params, config.paramsSerializer),\n  true\n);\n\n// Set the request timeout in MS\nrequest.timeout = config.timeout;\n\n// Listen for ready state\nrequest[loadEvent] = function handleLoad() {\n  if (!request || (request.readyState !== 4 && !xDomain)) {\n    return;\n  }\n\n  // The request errored out and we didn't get a response, this will be\n  // handled by onerror instead\n  // With one exception: request that using file: protocol, most browsers\n  // will return status as 0 even though it's a successful request\n  if (\n    request.status === 0 &&\n    !(request.responseURL && request.responseURL.indexOf('file:') === 0)\n  ) {\n    return;\n  }\n\n  // Prepare the response\n  var responseHeaders =\n    'getAllResponseHeaders' in request\n      ? parseHeaders(request.getAllResponseHeaders())\n      : null;\n  var responseData =\n    !config.responseType || config.responseType === 'text'\n      ? request.responseText\n      : request.response;\n  var response = {\n    data: responseData,\n    // IE sends 1223 instead of 204 (https://github.com/mzabriskie/axios/issues/201)\n    status: request.status === 1223 ? 204 : request.status,\n    statusText: request.status === 1223 ? 'No Content' : request.statusText,\n    headers: responseHeaders,\n    config: config,\n    request: request,\n  };\n\n  settle(resolve, reject, response);\n\n  // Clean up request\n  request = null;\n};\n\n// Handle low level network errors\nrequest.onerror = function handleError() {\n  // Real errors are hidden from us by the browser\n  // onerror should only fire if it's a network error\n  reject(createError('Network Error', config, null, request));\n\n  // Clean up request\n  request = null;\n};\n\n// Handle timeout\nrequest.ontimeout = function handleTimeout() {\n  reject(\n    createError(\n      'timeout of ' + config.timeout + 'ms exceeded',\n      config,\n      'ECONNABORTED',\n      request\n    )\n  );\n\n  // Clean up request\n  request = null;\n};\n\n// Add xsrf header\n// This is only done if running in a standard browser environment.\n// Specifically not if we're in a web worker, or react-native.\nif (utils.isStandardBrowserEnv()) {\n  var cookies = require('axios/lib/helpers/cookies');\n\n  // Add xsrf header\n  var xsrfValue =\n    (config.withCredentials || isURLSameOrigin(config.url)) &&\n    config.xsrfCookieName\n      ? cookies.read(config.xsrfCookieName)\n      : undefined;\n\n  if (xsrfValue) {\n    requestHeaders[config.xsrfHeaderName] = xsrfValue;\n  }\n}\n\n// Add headers to the request\nif ('setRequestHeader' in request) {\n  utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n    if (\n      typeof requestData === 'undefined' &&\n      key.toLowerCase() === 'content-type'\n    ) {\n      // Remove Content-Type if data is undefined\n      delete requestHeaders[key];\n    } else {\n      // Otherwise add header to the request\n      request.setRequestHeader(key, val);\n    }\n  });\n}\n\n// Add withCredentials to request if needed\nif (config.withCredentials) {\n  request.withCredentials = true;\n}\n\n// Add responseType to request if needed\nif (config.responseType) {\n  try {\n    request.responseType = config.responseType;\n  } catch (e) {\n    // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n    // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n    if (config.responseType !== 'json') {\n      throw e;\n    }\n  }\n}\n\n// Handle progress if needed\nif (typeof config.onDownloadProgress === 'function') {\n  request.addEventListener('progress', config.onDownloadProgress);\n}\n\n// Not all browsers support upload events\nif (typeof config.onUploadProgress === 'function' && request.upload) {\n  request.upload.addEventListener('progress', config.onUploadProgress);\n}\n\nif (config.cancelToken) {\n  // Handle cancellation\n  config.cancelToken.promise.then(function onCanceled(cancel) {\n    if (!request) {\n      return;\n    }\n\n    request.abort();\n    reject(cancel);\n    // Clean up request\n    request = null;\n  });\n}\n\nif (requestData === undefined) {\n  requestData = null;\n}\n\n// Send the request\nrequest.send(requestData);\n\n});\n};\n```\n. ",
    "verybluebot": "why this issue was closed? axios should not remove Content-Type on requests with form data.\nAt this point it is not possible to add a Content-Type': 'multipart/form-data in react native..\nany walk arounds?. in axios version 0.18.0 having same issue. \naxios removes internally the header Content-Type if there is no body on the post, put etc for some reason when creating FormData the body remains empty..\nthis is my code:\n``\nconst sendFormData = images => {\n   // images is an array of base64 images (strings)\n    const formData = new FormData();\n    images.forEach((img, i) => {\n        formData.append('file', img);\n        formData.append('name',${type}-${i + 1}`);\n    });\nconfig.headers = {\n    .'Content-Type': 'multipart/form-data'\n };\n\n return axios.post(`http://someurl.com/api/upload-images`, formData, config)\n        .then(response => {\n           // handle success\n        })\n        .catch(err => {\n            // handle err\n });\n\n}\n``\nReact Native version0.55.3this example code is not working. request body is empty and theContent-Type` header is removed. ",
    "LouisJS": "Also facing issue. ",
    "tzc123": "this issue took me a whole day.. ",
    "wonderFF": "why this issue was closed ? \nfacting same issue.. ",
    "Madhavan-reactiveworks": "I'm also facing the same issue. Is there any progress on this?. ",
    "dotbloup": "dparmar74 , it is an error, it does not return a \"redirect\" or a target url, how did you do to solve the issue? I can't check now, would it work to type:\nconst agentHTTPS = new https.Agent({family: 4});\nconst agentHTTP = new http.Agent({family: 4});\naxios.get(\"http://mywebsite.com\", {\n      httpAgent: agentHTTP, httpsAgent: agentHTTPS\n    }). dparmar74 , it is an error, it does not return a \"redirect\" or a target url, how did you do to solve the issue? I can't check now, would it work to type:\nconst agentHTTPS = new https.Agent({family: 4});\nconst agentHTTP = new http.Agent({family: 4});\naxios.get(\"http://mywebsite.com\", {\n      httpAgent: agentHTTP, httpsAgent: agentHTTPS\n    }). ",
    "yadue": "@dparmar74 its an issue, breaks completly node js server and cant be even catched only if the external url configuration is incorrect.. Same error for me, cant catch that error, breaks node js server.. ",
    "soanvig": "Experiencing the same issue. Crashes server, cannot be catched. It happens if I try to access invalid URL.. ",
    "nullptr128": "This can be used as a temporary solution just to prevent from production server dying in this case:\nprocess.on('uncaughtException', (error) => {\n  console.log(error);\n});. ",
    "hebiao6446": "Post do not work !!! Is the something wrong with the server ?  HELP !. ",
    "aerze": "Also good reading\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Expose-Headers. ",
    "greenlaw110": "The thing is that it got the Access-Control-Request-Headers: Authorization in the preflight OPTIONS request, and it still can't access Authorization header  with response.headers for the response of the following POST request.. ",
    "psankar": "This is probably working as intended.\nI rewrote the code, to simulate sequential processing, by using a state variable. Closing the issue.. ",
    "jessica-pixvana": "Looking forward to this fix!. ",
    "Mahi": "\nthose are query params and not a js object as you mentioned\n\nThey are query params passed to get() as a JS object. get() then probably constructs the query param string out of the JS object.\nI am currently using stringify(), but since there is clearly a built-in support for passing the query params as an object, why not improve it and add support for passing multiple params of the same key? Then we wouldn't need stringify() anymore.. ",
    "adam-lynch": "Here's an example using URLSearchParams: https://codepen.io/adam-lynch/pen/QORMyj. See the request in dev tools. ",
    "ventralnet": "@Mahi I agree, this is a slightly confusing implementation detail but it may just be because I am coming from the Angular 1.x $http service which does the GET param object -> string conversion for you.  Doing it for every API call may become error prone.  Looking at the docs I would probably suggest configuring a global paramSerializer like this\naxios.defaults.paramsSerializer = function(params) { /* ... */ }; \nIn the paramsSerializer you can implement one of the strategies @adam-lynch  or @supra28 suggest using QS or the URLSearchParams API. In my case I need to use transformResponse to convert a string representation of json to actual json.  The api call is to a third party so I can't correct the response coming from the API. ",
    "alshakero": "+1. ",
    "jgogstad": "PR https://github.com/mzabriskie/axios/pull/780. Never mind, solved using a dedicated agent that sends CONNECT, https://www.npmjs.com/package/https-proxy-agent. Never mind, no CONNECT is sent, looking into it. ",
    "lbausch": "Try the following (note the second then):\njs\naxios.post('/api/foo', {\n    foo: 'bar'\n}).then((response) => {\n    // success\n}).catch((error) => {\n    // error\n}).then(() => {\n    // always executed\n}). Try the following (note the second then):\njs\naxios.post('/api/foo', {\n    foo: 'bar'\n}).then((response) => {\n    // success\n}).catch((error) => {\n    // error\n}).then(() => {\n    // always executed\n}). ",
    "justanne": "I'm having a similar issue. It runs the post request twice. Response on first is 200 and the other one gets timed out at with 504 response.. @reformer Cool, great to know it works already with you. Thanks for info, will further check my code it might be on my side too. You can already close this issue though - if I'm unable to solve mine I'll open my own. \ud83d\udc4d\ud83c\udffc. ",
    "reformer": "@justanne  hi I resolved this issue. My error come from native android code which invoke in react native component. That android callback was undefined (that is reactScript callback). After my login screen i calling 7-8 webservices using axios spread. I fixed my undefined issue... my code worked fine now. . ",
    "cappslock": "None other than limiting the scope of the change. From my perspective might as well bump it to 1.2.3 and let it through if tests pass, but 1.1.0 is the minimum version fixing this issue.. @nickuraltsev don't mean to hound you but this feels like a pretty big bug with a pretty small fix... Do you have a rough idea of when this might be merged & released?. @nickuraltsev don't mean to hound you but this feels like a pretty big bug with a pretty small fix... Do you have a rough idea of when this might be merged & released?. I'm withdrawing this, as it turns out it doesn't actually solve the issue.. I'm withdrawing this, as it turns out it doesn't actually solve the issue.. ",
    "amgadserry": "because get requests doesn't have a body  use query params instead. ",
    "felipekm": "@Franke123 Have you tried to set the headers prop?. ",
    "skyrpex": "\nlooks like XHR doesn't support sending data in GET requests.\n\n@Franke123 is that true? Uh... I want this feature too. Maybe I'll look into this the current week.. > looks like XHR doesn't support sending data in GET requests.\n@Franke123 is that true? Uh... I want this feature too. Maybe I'll look into this the current week.. Be careful if you're using the transformRequest option: the data from error.config is already transformed into a string.\nFor example, the code from @rubennorte would crash with this setup:\n```js\n// Lets use qs to stringify our request.\nthis.$axios = axios.create({\n  transformRequest: [\n    data => qs.stringify(data),\n  ],\n});\nthis.$axios.interceptors.response.use(null, (error) => {\n  if (error.config && error.response && error.response.status === 401) {\n    return updateToken().then((token) => {\n      error.config.headers.xxxx <= set the token\n      // Here, the request data will be double stringified with qs.stringify,\n      // potentially leading to 422 responses or similar.\n      return this.$axios.request(config);\n    });\n  }\nreturn Promise.reject(error);\n});\n```\nA solution to this problem is not to transform the request data if it's already a string. For example:\njs\nthis.$axios = axios.create({\n  transformRequest: [\n    data => (isString(data) ? data : qs.stringify(data)),\n  ],\n});. Be careful if you're using the transformRequest option: the data from error.config is already transformed into a string.\nFor example, the code from @rubennorte would crash with this setup:\n```js\n// Lets use qs to stringify our request.\nthis.$axios = axios.create({\n  transformRequest: [\n    data => qs.stringify(data),\n  ],\n});\nthis.$axios.interceptors.response.use(null, (error) => {\n  if (error.config && error.response && error.response.status === 401) {\n    return updateToken().then((token) => {\n      error.config.headers.xxxx <= set the token\n      // Here, the request data will be double stringified with qs.stringify,\n      // potentially leading to 422 responses or similar.\n      return this.$axios.request(config);\n    });\n  }\nreturn Promise.reject(error);\n});\n```\nA solution to this problem is not to transform the request data if it's already a string. For example:\njs\nthis.$axios = axios.create({\n  transformRequest: [\n    data => (isString(data) ? data : qs.stringify(data)),\n  ],\n});. ",
    "apieceofbart": "This is not possible. XHR clears the body when running send method. Even using fetch won't work, for example chrome will give you Type Error.. ",
    "caoyuanqi": "I think GET is not for sending data. the only way to pass information with GET is in through request parameter. . ",
    "iokacha": "I was looking for the same feature, XHR should allow HTTP GET payload.\nIMO, It doesn't make much sense not allowing sending payload as the body of a HTTP GET request as far as it doesn't change the state of the server, QueryString or paybload are the same (just data).\nI stumbled across the issue when the payload is very large (> the max allowed URL length). . ",
    "raygesualdo": "This is due in large part to the design of RESTful endpoints. A GET request is specifically (and exclusively) for retrieving data from a server. As such, the only information that needs to be sent to the server - according to general practice - is the URI of the entity and any result augmenting parameters in the URL (sort, filter, limit, etc.). Including a body in a request is reserved for when actual data - not result augmentation - needs to be sent and acted upon by the server (POST, PUT, PATCH). This is the same reason why DELETE doesn't accept a payload. Everything the server needs to know about the entity to be deleted should be in the URL. Hope that helps clarify things \ud83d\ude00 . What is the use-case for needing a Content-Type header on a DELETE request? . @themre In your jsfiddle, if you look in the browser dev tools, you'll notice that the call to httpstat.us/500 errors during the OPTIONS pre-flight request (an automated network call in modern browsers when using CORS). When making a cross-domain request, if the server isn't correctly configured for CORS, axios returns an error without error.response populated. This is because the XHR request fails at the browser level (during the OPTIONS call), which is technically a network error. For network errors, axios does not provide a response because one is not provided by the browser. If one debugs the network error returned to axios from an invalid OPTIONS call, one will notice that there is no way to know the status.. Hey all, I took a few minutes to troubleshoot this issue. Here are some things I found:\n\nI created an example of @robbiemu's code that works. The codesandbox can be viewed here: https://codesandbox.io/s/80jv7k528. Note that while the example makes a cross-domain request, the server is correctly configured for CORS. Let me know if that is helpful.\nI found that, when making a cross-domain request, if the server isn't correctly configured for CORS, axios returns an error without error.response populated. This is because the XHR request fails at the browser level (during the OPTIONS call), which is technically a network error. For network errors, axios does not provide a response because one is not provided by the browser. If one debugs the network error returned to axios from an invalid OPTIONS call, one will notice that there is no way to know the status.. @secisland Currently, the request data is being included in the config as data. If it is instead included as params, it will work:\n\njavascript\naxios.get('/api/test', { params: { t: 1 } })\n  .then(res => console.log(res)). A few things:\n\nIt seems that SSL pinning can only be done by the browser itself on the web. I couldn't find a specific instance where libraries could make use of it.\nIt's being deprecated pretty quickly, at least in Chrome.\n\nFull disclosure: I'm no SSL/TLS expert.. If you use ES6 Promises, it could be re-written like this:\njavascript\nfunction wechatLogin() {\n  var code = util.getQuery('code')\n  var token = cache.getJSON(code)\n  return new Promise((resolve, reject) => {\n    if (token) {\n      resolve(token)\n    } else {\n      post('/wechat/login', {\n        code: code,\n      })\n        .then(res => {\n          token = res.data\n          cache.setJSON(code, token)\n          resolve(token)\n        })\n        .catch(err => {\n          reject()\n        })\n    }\n  })\n}\nOr, if you're using async/await:\njavascript\nasync function wechatLogin() {\n  const code = util.getQuery('code')\n  const token = cache.getJSON(code)\n  if (token) {\n    return token\n  }\n  const response = await post('/wechat/login', {\n    code: code,\n  })\n  cache.setJSON(code, response.data)\n  return response.data\n}. @ThomasSmWatson Setting headers per instance can (and probably should) happen when creating each instance. I've included an example below:\n```javascript\nimport axios from 'axios'\n// Using const\nconst axiosInstance1 = axios.create({ baseURL: 'url1', headers: { Accept: 'HeaderA' } })\nconst axiosInstance2 = axios.create({ baseURL: 'url1', headers: { Accept: 'HeaderB' } })\naxiosInstance1.get('/')\n// Using classes as before\nclass ClassA {\n  constructor() {\n    this.axiosInstance = axios.create({ baseURL: 'url1', headers: { Accept: 'HeaderA' } })\n  }\n}\nconst ClassB = class {\n  constructor() {\n    this.axiosInstance = axios.create({ baseUrl: 'url2', headers: { Accept: 'HeaderB' } })\n  }\n}\nconst mObjA = new ClassA()\nconst mObjB = new ClassB()\nmObjA.axiosInstance.get('/')\n```. Please share your code so we can more accurately troubleshoot the problem.\nFrom the screenshot, I can see the axios call is failing during an OPTIONS request, not the actual GET request. Issues with OPTIONS calls are often CORS-related.. What type of \"raw\" data are you trying to send? Text? A blob? A file?. ",
    "Axnyff": "The spec doesn't forbid sending a payload for a get request, however both xhr and fetch won't allow it so it is probably not possible to do this feature.\nReproduction:\nfetch('/users', {\n  method: 'GET',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    name: 'Hubot',\n    login: 'hubot',\n  })\n}); : type error\nvar a  = new XMLHttpRequest();\na.open('GET', '/');\na.send('test'); : won't send data\nThey both work fine with POST. The spec doesn't forbid sending a payload for a get request, however both xhr and fetch won't allow it so it is probably not possible to do this feature.\nReproduction:\nfetch('/users', {\n  method: 'GET',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    name: 'Hubot',\n    login: 'hubot',\n  })\n}); : type error\nvar a  = new XMLHttpRequest();\na.open('GET', '/');\na.send('test'); : won't send data\nThey both work fine with POST. Hello, did you try to upgrade your axios version? It seems to work fine for me with 0.17.1.\nOtherwise, there might be something I am missing, are you able to produce a reproduction of the bug?. Hello,\nAre you using it in the browser or in node?\nIf I do this \njs\ntry {\n  const { data } = await axios.get('http://foo.bar/')\n} catch (error) {\n  console.log(Object.keys(error), error.message); \n}\nI get [\"config\", \"request\", \"response\"] \"Network Error\" so it seems to work properly\nIt seems weird to have something different as async await are just wrapper around promises. Hello,\ncouldn't you pre-compile your vue component with a single file component so you won't lose time for your ajax request?\nOtherwise, using the right hook seems like it could help ( beforeCreate ?).\nAnyway, do you have a way to reproduce your problem so we could have a look at it?. Hello,\nare you sure this has something to do this axios? To me, it looks more like an encoding problem in the backend. Hello,\nare you sure this has something to do this axios? To me, it looks more like an encoding problem in the backend. It looks like your example both put the same order of arguments.\nAnyway it's documented in the readme that the signature of post is\naxios#post(url[, data[, config]])\nSo it needs to have the data as a second argument and then the config.\nHowever, if you use the axio function directly you can put it in one object of config and do something with key. You do need to had the method though:\naxios({\n   method: post,\n   data: {},\n   headers: {}\n});\n\n. Hello, would you mind providing the full code and what it's supposed to do?. Hello, I have a hard time understanding what is your problem.\nWould you be able to come up with a reproduction if you think it's a bug?. axios needs the ES6 Promise or a polyfill.\nYou then have access to Promise.resolve which looks pretty similar to jQuery.when. It looks like it's a security thing from safari: http://blog.prowebsoftware.net/2013/08/safari-cors-requests-withcredentials/. Hello, can you provide some more information: is the bug on node or in a browser?\nAlso, could you provide a minimal working example of the bug?. Hello.\nThere are a couple of problems with your code.\nYou're relying a lot on global variables as state so it's hard to guess what your code is supposed to do.\nAlso, you're mixing synchronous code and asynchronous code (in isEpisode) so it won't work properly.\nWhat you could do is use the fact that axios always return promises.\nFor instance, if isEpisode return the result of axios.get.then you could probably manipulate it easier.\nDoing something like that could help convert your initial data and make the additional calls\nfunction getPromise(object) {\n  let type = object.content_type.toLowerCase();\n  if (type === \"episode\") {\n    return isEpisode(object.content_url);\n  }\n  if (type === \"episode\") {\n    return isSection(data);\n  }\n}\n\nAnd then call it something like that:\nvar data = response.data.objects;\npromises = data.map(getPromise);\nPromise.all(promises).then(function(arrayOfData) {\n    // arrayOfData contains all the data, you can then maybe transform it correctly instead of manipulating global state.\n});\n\n. Hello, do you have a reproduction of the bug? I tried your snippets but it seems to work fine. This seems to work for me:\naxios({\n  method: 'post',\n  url: '/some/url',\n  data: { prop: true },\n  headers: {\n    'content-type': 'raw'\n  }\n});\n\n. @Jvaeyhcd Doesn't my example work or am I missing something? You just want to change the header, don't you?. It seems to work for me. I have created a simple file with just null in it and then \naxios.get(\"http://localhost:3000/foo\").then(r => console.log(r.data)); // null\n\nWhat code is not working for you?\n. Hello,\nYou're using grant_type: password in postman but grant_type: admin in your axios call, is that normal?\n  . Is this a cross domain request? If so you might need to add withCredentials: true to your options.. Hello,\nDo you have a way to recreate the problem in a couple of lines? It's hard to see where it could come from with so much code?\nAlso, there is some code missing: what is the code of getHeaders for instance? It seems to return a wring authorization key? Why is it Bearer instead of JWT in the token?. Hello,\nIs this normal that you're calling alert.alerts() before the requests has been finished? What is it doing, are you sure it's not link to this?\nAnyway, do you have a way to recreate the issue that can be tested by other users?. It looks like it could be a server issue.. Are you getting the same response from the server in both cases?\nIf so, you should check whether you send the same headers / have the same url in IE11 and other browsers. Do you have an example of a use case that whould necessitate multiple cancel tokens instead of just one? . Hello,\nDid you check the network to verify whether it could be a problem linked to the server?\nOtherwise, could you please provide a reproduction of your bug?\nIn your example I guess that Http is axios but it's not sure, could you clarify?. Hello,\nwhat did you try?\nI think something like\nvar config = {\n   headers: {'Content-Type': 'text/xml'}\n};\n\naxios.put(myUrl, xmlString, config);\n\nshould work. It looks like you are not using axios.post correctly: the signature is\naxios.post(url[, data[, config]])\n\nSo you are sending your whole object as a payload.\nThis should work:\naxios.post( ajaxurl ,\n  {\n    email: this.email,\n    post_id: this.selectedPostID\n  },\n  {\n    params: {\n      action: 'am_send_test'\n    },\n  })\n  .then(response => {\n    console.log(response)\n  })\n  .catch(e => {\n    this.error = true;\n  })\n\n. I've done this:\ntry {\n  a = await axios({\n    method: 'post',\n    url: '/',\n    validateStatus: function(status) {\n      return true;\n    },\n  })\n  console.log(a);\n} catch(e) {\n  console.log('fail');\n}\n\nAnd it seems to work properly ( I'm using a simple http.server in python so this returns a 501).\nIt console logs fail if I remove the validateStatus method. Could this be linked to auth?. Oh sorry, I read your post too fast.\nIt still seems to work with auth though.\nI get an error logged to the console but my code never goes to the catch part because of the validateStatus. Hello,\ncould you provide some more information regarding the bug?\nIf I do, in my browser (chrome)\naxios.head(\"/\", { params: {\"foo\": \"bar\"}})\n    .then(response => console.info(\"headers:\", response.headers))\nIt correctly log the headers. Are you sure your head request does not return an empty response?. Hello, \nAre you sure the data you're getting is valid JSON? If not, it could explain the error. Did you check the payload you're getting from the server?\nsynchronous requests are really really a bad thing to do, why do you think you need those? There's probably a good way to do it asynchronously without blocking everything.. It looks pretty normal relatively to the promise spec that onRejected will not be called with an error in onFulfilled:\n Promise.resolve(true).then(() => {\n      throw new Error('fail');\n  }, () => {\n      console.log('i will never be called');\n  }).then(() => {\n\n  }, err => {\n      console.log(err); // fail\n  });\n\nIf you add several interceptors it should work properly.. It looks like it's done on purpose:\nhttps://github.com/axios/axios/blob/b7d8d126dad7341addcd7b063f7b261955ec9152/lib/adapters/xhr.js#L121\nIf config.data is undefined then it will remove the content-type header. If you add data in your config it will work ( it does not seem to work in your example but it works by adding a data key in the config object. Hello,\ncan you provide a minimal reproduction for your issue?. Something like this should work:\nfunction makeRequestCreator() {\n    var call;\n    return function(url) {\n        if (call) {\n            call.cancel();\n        }\n        call = axios.CancelToken.source();\n        return axios.get(url, { cancelToken: call.token }).then((response) => {\n            console.log(response.title)\n        }).catch(function(thrown) {\n            if (axios.isCancel(thrown)) {\n                console.log('First request canceled', thrown.message);\n            } else {\n                // handle error\n            }\n        });\n    }\n}\n\nYou then use it with\n var get = makeRequestCreator();\n get('someurl');\n\n Each new request will cancel the previous one. It seems pretty normal to me,\n\nif you are posting the characters foo, you don't want the library to actually send \"foo\".\nIf so there wouldn't be any way to post a single string with axios without having the exta \"\" characters.\nWhat axios do, on the other hand, is whenever you send an object, it understands you probably don't want to use .toString on it ( resulting in \"[Object object]\") but probably want to JSON stringify it. Hello,\nI had a quick look and I don't really know what could be a good alternative (without breaking changes) because the ids are necessary to eject so new interceptors always need to be a new array key, we cannot just filter the array as this will change the ids.\nDeleting keys instead of just putting null could help a little but it would just create sparse arrays, I'm not sure this is much better.\nMaybe using a plain object to store the interceptors and another array to know in which order call the interceptor could work ( I don't think relying on keys order in object is a good idea, it's only sure to work in ES6 compliant implementation). Wouldn't that change the order of execution of interceptors? \nI also think that there's a chance that somebody depends on the fact the the indexes always grow to keep track of the last added interceptor so I don't know if that would be ok\nThe more I think about it, the more I'd say that using just an object to store the interceptors could actually be a good idea.. Yes, that seems like the best idea. That's kind of what I was suggesting but with a plain JS object to make sure it will be ES5 compatible. Hello,\nDid you try to do something like this:\nheaders.common = {};\n\nOr maybe:\nObject.keys(headers.common).forEach(key => {\n       delete headers.common[key];\n    });. Hello,\nAre you doing a cross domain request?\nIf so, you might need an extra header to allow it:\nhttps://stackoverflow.com/a/46412839/4949918. Hello,\nI have created a small reproduction of your problem \nconst axios = require('axios');\n\naxios.interceptors.request.use((config) => {\n  console.log(config.data, typeof config.data); // console.log an object\n  return config;\n});\n\naxios.interceptors.response.use((response) => {\n  console.log(response.config.data, typeof response.config.data); // console.log a string\n  return response\n});\n\naxios.get(\"http://localhost:8000\", { data: {foo : true }});\n\nI tried to override this behavior and got this behaviour:\n    Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream\naxios needs a proper data attributes so it can be properly send, in your case I think it will convert your object with JSON.stringify.\nThis seems to be normal behaviour to allow user to directly provide object that will be JSON stringify.. Hello,\nYou are doing a cross request domain so by default, unsafe header are not shown.\nYou need to add Access-Control-Expose-Headers: error to see that header.\nhttps://stackoverflow.com/a/5837798/4949918. Hello,\nI think this works to get the percentage of a progress event:\n        onUploadProgress: function(progressEvent) {\n          var percentCompleted = Math.round( (progressEvent.loaded * 100) / progressEvent.total );\n        }\n\nIf you want to have a way to avoid doing that computation every time, maybe you should use some kind of wrapper function:\nfunction withPercentage(fn) {\n   return function(progressEvent) {\n       var percentCompleted = Math.round( (progressEvent.loaded * 100) / progressEvent.total );\n       fn(percentCompleted);\n   };\n}\n\nThen\nonUploadProgress: withPercentage(function (percent) {\n    console.log(percent)\n}),\n\nshould work. Can you close this issue please?. Can you close this issue please?. Hello,\nAre you sure it's not an issue with your server or your original file?\nI tried your code and it works perfectly.. Here is my full working code:\nconst FileSaver = require('file-saver');\nconst axios = require('axios');\naxios.get('/file.pdf', {\n      responseType: 'arraybuffer',\n      headers: {\n        'Accept': 'application/pdf'\n      }\n}).then(response => {\n    console.log(response);\n    // response.data is an empty object\n    const blob = new Blob([response.data], {\n      type: 'application/pdf',\n    });\n    FileSaver.saveAs(blob, Math.random());\n});\nI added the Math.random part to make sure I was generating a new pdf.\nCan you provide more info on your server, there might be something here that is throwing axios off.\nHere are some more picture of what the headers look like and the content of the file:\n\n\n. It depends on what you want to do with that exceptions.\nIf you just want to keep it failing, then just reject a promise with that error, without doing anything with it.. Do you have a reproduction of your bug? It does not seem to happen with that code:\nconst axios = require('axios');\naxios.get(\"http://host/users/\");\n\n. Can you provide your client side code and your axios version?\nIt does not seem to do that for me:\nconst axios = require('axios');\naxios.get('/foo.json').then(resp => console.log(resp), console.log);\n\ngives me the data as text and not null\n. It looks like it's the regular behavior of the browser:\nhttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType\nvar a = new XMLHttpRequest(); a.open('GET', '/yolo.json?'); a.responseType = 'json'; a.send()\naxios does nothing, it's the browser which just fails silently\n. Hi, thanks a lot for review!\nI totally agree with your first point about not needing to keep a length property and just use the length of Object.keys.\nHowever, I'm not sure whether Object.keys is the best way to loop, I don't think that before ES6 objects are considered ordered so this might break the order of the interceptors for older browsers.\nAbout profiling I don't know a proper way to do it, do you have any suggestions ?. The User Agent header used to be impossible to modified within an XMLHttpRequest because of the spec.\nhttps://stackoverflow.com/a/5862744/4949918\nIt looks like the spec has changed on this but browsers don't have all changed on that.\nChrome will throw an error for instance:\n var a = new XMLHttpRequest();\n a.open('GET', '/');\n a.setRequestHeader('User-Agent', ''); // Refused to set unsafe header \"User-Agent\"\n\nSo it looks like this is not something that can be done reliably, and this has nothing to do with axios.. The User Agent header used to be impossible to modified within an XMLHttpRequest because of the spec.\nhttps://stackoverflow.com/a/5862744/4949918\nIt looks like the spec has changed on this but browsers don't have all changed on that.\nChrome will throw an error for instance:\n var a = new XMLHttpRequest();\n a.open('GET', '/');\n a.setRequestHeader('User-Agent', ''); // Refused to set unsafe header \"User-Agent\"\n\nSo it looks like this is not something that can be done reliably, and this has nothing to do with axios.. It used to be forbidden by the specification but was removed in 2017. Anyway for node, it looks like it is set on purpose by axios.\nThe request works correctly if you remove these lines: https://github.com/axios/axios/blob/master/lib/adapters/http.js#L34. Something like this should work:\n```\nconst axios = require('axios');\nfunction makeRequestsFromArray(arr) {\n    let index = 0;\n    function request() {\n        return axios.get('http://localhost:3000/api/' + index).then(() => {\n            index++;\n            if (index >= arr.length) {\n                return 'done'\n            }\n            return request();\n        });\n}\nreturn request();\n\n}\nmakeRequestsFromArray([0, 1, 2]);\n```\n. Hello,\ndid you try to use the developer tools to see what is actually happening at the request level? \nAre the CORS headers actually sent with the request?. Can you use the devtools in edge to show us the request that is being sent? How do you know it's not a POST request?. It looks more like a edge bug, there's already a similar one: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11126248/\nI don't see a reason why this would be caused by axios.. This is definitely possible, this gives me a header test of false:\nconst axios = require('axios');\nconst inst = axios.create({ headers: {\n    test: true,\n}});\n\naxios.get('/foo', {headers: { test: false}}).then(console.log);\n\n. This is definitely possible, this gives me a header test of false:\nconst axios = require('axios');\nconst inst = axios.create({ headers: {\n    test: true,\n}});\n\naxios.get('/foo', {headers: { test: false}}).then(console.log);\n\n. What is your code that is non working?\nThis works for me:\njs\nconst axios = require('axios');\naxios.get('/foo').then(null, error => console.log(error.response.status)); // 404\n. What is your code that is non working?\nThis works for me:\njs\nconst axios = require('axios');\naxios.get('/foo').then(null, error => console.log(error.response.status)); // 404\n. Did you try to see what happens at the XMLHttpRequest level? If that request simply never succeeds nor fails at that level, it could be tricky for axios to detect anything.\nDoes it work correctly if you add a timeout in your config?. Did you try to see what happens at the XMLHttpRequest level? If that request simply never succeeds nor fails at that level, it could be tricky for axios to detect anything.\nDoes it work correctly if you add a timeout in your config?. What is your fetchData doing? Do you have an easy way to reproduce it natively and check whats happening to the XMLHttpRequest? Otherwise, you could maybe try to make the request object global to see what's happening to it.\nHow do you reproduce the network cancellation, I don't have an idea of how I should do it. You should probably use stack overflow for non issues. Also, what are you trying to do, 400 is not a valid state for xhr (from 0 to 4).\nCan you provide a full working snippet?. If you're doing a CORS request, only basic headers will be sent, not custom ones. If you want to do that, you'll need to add the header\nAccess-Control-Allow-Headers: 'x-access-token'. Your server needs to send it, currently you're sending Access-Control-Request-Headers, not Access-Control-Allow-Headers, the latter is necessary for CORS requests. What are the headers your server is sending?. I think you need to specify the origin allowed explicitely, if you're using credentials. This does not for me, can you provide some more information : browser / node version, axios version?\n\nWhat is axios here, directly the imported library ?\nWhy are you concluding it's a GET request?\nWhat is your server?. Could it be linked to this : https://stackoverflow.com/a/47209376/4949918. Hello, can you provide a reproduction of your bug ?. This could help you: https://stackoverflow.com/questions/36599771/how-force-npm-to-get-the-last-commit-of-package-from-repo-with-master. This is not really a bug,\njQuery ajax method has a feature to add a flag to say that the params need to be tradionally encoded.\nAxios does not have that feature.\nHowever, axios lets you use a param serializer so you could probably do:\nthis.$http({\n    method: 'get',\n    url: 'test',\n    headers: {\n        dataType: 'json',\n        contentType: 'application/json;charset=UTF-8',\n    },\n    params: params,\n    paramsSerializer: function(params) {\n        // the second option is the traditional flag\n        return $.param(params, true);\n    },\n}).then(function (result) {\n    console.info(result);\n});\n\n. Would you mind providing a reproduction of your bug ?. ",
    "psnider": "Yes, it appears there is no way to send data with a GET request from the browser...\nBut it is possible with node.js:\nhttps://nodejs.org/api/http.html#http_http_request_options_callback\nNote that after the http.request() call, the caller may call req.write(), before calling req.end().\nAnd some popular services take advantage of data with a GET request.\nFor example, see Elastic Search:\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html\n. Yes, it appears there is no way to send data with a GET request from the browser...\nBut it is possible with node.js:\nhttps://nodejs.org/api/http.html#http_http_request_options_callback\nNote that after the http.request() call, the caller may call req.write(), before calling req.end().\nAnd some popular services take advantage of data with a GET request.\nFor example, see Elastic Search:\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html\n. ",
    "drinksober": "Hi, I test it's ok to use GET method send body to server from the browser...\nI tried modify the lib/core/Axios.js:65\nreplace\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\nto\nutils.forEach(['delete'', 'head', 'options'], function forEachMethodNoData(method) {\nand replace\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\nto\nutils.forEach(['get', 'post', 'put', 'patch'], function forEachMethodWithData(method) {\nand I want add a Axios config option to support this feature, can I?. ",
    "lq782655835": "get use config.params or write in url query\npost use config.data. ",
    "eddybrando": "The XHR API specification states that the body will get ignored when using the GET method:\n\nThe body argument provides the request body, if any, and is ignored if the request method is GET or HEAD.\n\nSource: https://xhr.spec.whatwg.org/#the-send()-method\nThis applies to browser requests. However, as @psnider states, it should still work with HTTP requests from node.js, which are also supported by axios.\nThe old HTTP specification kind of hinted to try and avoid sending semantic information in the body of GET requests, but it doesn't any more as far as I know: https://tools.ietf.org/html/rfc7231#section-4.3.1. ",
    "binki": "For people like me who google and end up here without having a hint on how to do this manually in nodejs, I wrote a small example using the form-data package.. This might be considered a duplicate of #789.\nI was able to use the form-data package with Axios in nodejs. It basically provides a FormData-like interface. You have to be careful to pass the headers it generates to Axios manually, however. For example:\n```javascript\nconst axios = require('axios');\nconst FormData = require('form-data');\nconst form = new FormData();\n// Second argument  can take Buffer or Stream (lazily read during the request) too.\n// Third argument is filename if you want to simulate a file upload. Otherwise omit.\nform.append('field', 'a,b,c', 'blah.csv');\naxios.post('http://example.org/endpoint', form, {\n  headers: form.getHeaders(),\n}).then(result => {\n  // Handle result\u2026\n  console.log(result.data);\n});\n``\n. @ar412 I tried to give an example at https://github.com/mzabriskie/axios/issues/1006#issuecomment-320165427, could you clarify what you\u2019re asking?. @ar412 For receiving multipart data in Express, you can use something like [busboy](https://github.com/mscdex/busboy) as [recommended bybody-parser\u2019s docs](https://www.npmjs.com/package/body-parser). Basically, for learning how to handle uploaded files in Express, that\u2019s not related to Axios at all, so you\u2019re better off asking elsewhere as you\u2019ve hijacked this thread ;-). For example, see [this answer on SO](https://stackoverflow.com/a/23118138/429091).. @bstolarz if you pass aBuffer, which you are doing, you don\u2019t need to passknownLength. Also, if you read what you wrote (err, copied and pasted from [form-data\u2019s README\u2019s examples](https://github.com/form-data/form-data/blame/7629e30d4175fa07965a59f70ba5022172f9494a/Readme.md#L148)), you should only supply one offilenameorfilepath`\u2014not both. The only things which it might make sense for you to set are:\n\nfilename OR filepath\ncontentType (in case the server requires a particular Content-Type value, otherwise can probably be omitted).\n\nWhat I bet is happening is that the size of the image you are sending has a size that is not 19806 because that 19806 value is something you copied from an example in form-data\u2019s docs rather than calculated for your own data. This is likely to cause form-data to throw an error itself or write invalid data in the HTTP request. Did you check if the axios.post()\u2019s returned Promise is rejecting or if an exception is thrown? If the axios request is rejected, check if the error object has a result key and, if it does, check what the err.result.status value is. If it is a 4xx value other than 404 or 403, that probably means the server is rejecting a malformed request which could result from an incorrect known size.. @bstolarz I have done my best to reproduce your issue. However, I can\u2019t. I wrote this code to try to imitate what you\u2019re doing. However, I purposefully omitted manually setting Content-Length. I am convinced that the fact that you are setting Content-Length might be related to your issue. Please try to let the form-data take care of calculating that for you\u2014that is why you must call form.getHeaders().\nSee this paste: https://gist.github.com/binki/10ac3e91851b524546f8279733cdadad . Perhaps you can modify the way you call axios.post() or axios() to match my example and it will work for you?\nIf you have issues still, please try moving your code to its own script and reproducing it there. It may help you to solve the issue. If you are still stuck, please post full code, including the call to axios() or axios.post() as a gist and link it here and, if I can, I will look into it.. @rodrigogs If you want help, you\u2019ll need to be more detailed ;-).. @smplyjr Can you give more context and let me know how you get form? Without code, we can\u2019t tell what you\u2019re doing or help you.. I think switching to some thing like abort-controller would be great. One issue with CancelToken is that its asynchronous notification mechanism uses a Promise and it is impossible to unsubscribe from a Promise once you have .then() it. Thus, there will be at least a memory leak of the callback function itself and its scope. This is an unavoidable problem with CancelToken, so users of CancelToken\u2014not just users of axios\u2014need to avoid keeping long-lived instances or use their long-lived instances for a very small, fixed number of calls. #1099 seems to be tracking abort controller support.\nWhen I try to run your fiddle and look at it in Chrome developer tools, there are never more than a few XMLHttpRequests sticking around. For example, I have 2 instances after letting it run long enough to have made 500 requests. If you look at the source, all of the possible ways which an XHR can complete will set request = null. This removes the XHR from the CancelToken promise callback\u2019s scope. So I think that the XHR is being cleaned up correctly. Are you certain that the XHRs are actually uncollectible like you\u2019re claiming?. ",
    "doytch": "Ran into this and didn't want to bring in another dependency since I was just POSTing a large string that was too long for a URL. Figured I'd leave my workaround here in case it helps others:\nurl.post('/api/myurl', ``configuration=${encodeURIComponent(JSON.stringify(myBigObject))}``) \n(Ignore the double-backtick, it's a template literal and I'm working around Markdown). ",
    "doopcl": "I have a simple plan to realize it, just use 'form-data'\n\nconst FormData = require('form-data');\nconst fs = require('fs');\nconst axios = require('axios');\nlet form = new FormData();\nform.append('file', fs.createReadStream(__dirname + '/README.md'), {\n    filename: '111.md'\n});\naxios.create({\n    headers: form.getHeaders()\n}).post('http://localhost:8001/sample/upload', form).then(response => {\n    console.log(response);\n}).catch(error => {\n    if (error.response) {\n        console.log(error.response);\n    }\n    console.log(error.message);\n});\n\nTest Success!. ",
    "ashok-sc": "@rubennorte why didn't you just point people here: https://www.npmjs.com/package/axios#nodejs. Isn't this how you expect users of axios to deal with it?. As @heldrida mentioned, use querystring. That is the way axios recommends doing it as well here: https://www.npmjs.com/package/axios#nodejs. The form-data package has all sorts of issues here and you'll just end up pulling your hair out trying to get it to work.. ",
    "DiamondYuan": "formPost(url, form) {\n    return new Promise((resolve, reject) => {\n      console.log(form.getHeaders()['content-type']);\n      axios({\n        method: 'post',\n        url,\n        data: form,\n        headers: { 'Content-Type': form.getHeaders()['content-type'] },\n        cancelToken: new CancelToken((c) => {\n          cancel = c;\n        }),\n      }).then((res) => {\n        resolve(res);\n      }).catch((err) => {\n        console.log(err);\n        reject(err);\n      });\n    });\n  },\ni use this,not work. ",
    "pikitgb": "@ashok-sc comment solved for me :\nInstalling querystring and stringifying the data\nvar querystring = require('querystring');\naxios.post('http://something.com/', querystring.stringify({ foo: 'bar' }));. ",
    "sant123": "Any plan to support it natively? . ",
    "sumanth10": "Solved the multipart issue in the node js rest call. I basically was receiving file from the UI and i need to pass it to a remote server. I used the node js Buffer and converted it into binary format and sent it in the data field in axios\nBoth these functions are called from the app.all in express \n``` \n     fileUploader = function(request){\n        let defer = Q.defer();\n        let fileData = new Buffer('');\n        request.on('data', function (chunk) {\n            fileData = Buffer.concat([fileData, chunk]);\n        });\n        request.on('end', function () {\n            defer.resolve(fileData);\n        })\n        return defer.promise;\n    }\nrestCall = function(request, response , fileData){\n    let payload;\n    if(fileData){\n        payload = fileData;\n    }else{\n        payload = request.body || '';\n    }\n\n            let  axiosjson = {\n                method: request.method,\n                url: \"https://example.com\"\n                headers:{\n                    'Content-Type': request.get(\"Content-Type\") || 'application/json',\n                }\n\n              };\n            if(request.method == \"POST\"){\n                 axiosjson.data = payload\n            }\n\n\n            axios(axiosjson)\n                .then((res) =>  {\n                    response.status(res.status).send(res.data);\n                })\n                .catch((error) => {\n                  if (error.response) {\n                    // The request was made and the server responded with a status code\n                    // that falls out of the range of 2xx\n                    console.log(error.response.data);\n                    console.log(error.response.status);\n                    console.log(error.response.headers);\n                    if(error.response.data){\n                        response.status(error.response.status).send(error.response.data);\n                    }else{\n                        response.status(error.response.status).send(error.response.statusText);\n                    }\n\n\n                  } else if (error.request) {\n                    // The request was made but no response was received\n                    // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n                    // http.ClientRequest in node.js\n                    console.log(error.request);\n                    response.status(error.request.status).send(error.request.statusText);\n                  } else {\n                    // Something happened in setting up the request that triggered an Error\n                    console.log('Error', error.message);\n                    response.status(500).send(error.message);\n                  }\n                  console.log(error.config);\n                })\n}\n\n. ",
    "tomeady": "This is a temporary solution that might help some until formData has native support using a package called express-fileupload.\nIgnore the react syntax.\nSERVER SIDE - Index file\n//use the package\nconst fileUpload = require(\"express-fileupload\");\napp.use(\n    fileUpload({\n      limits: { fileSize: 50 * 1024 * 1024 }\n    })\n  );\nSERVER SIDE - Route\n// @route   POST api/media/\n// @desc    Create a new media\n// @access  Private\nrouter.post(\n  \"/\",\n  (req, res) => {\n    const data = req.files;\n    return res.json({ success: true, data: data });\n  }\n);\nCLIENT SIDE - React.js redux action for context.\nexport const uploadMedia = data => dispatch => {\n  axios\n    .post(API_URL + \"/api/media\", data, {\n      onUploadProgress: ProgressEvent => {\n        dispatch({\n          type: UPDATE_MEDIA_STATUS,\n          payload: (ProgressEvent.loaded / ProgressEvent.total) * 100\n        });\n      }\n    })\n    .then(res => {\n      dispatch({\n        type: UPLOAD_MEDIA,\n        payload: res.data.data\n      });\n    })\n    .catch(err => {\n      dispatch({\n        type: SET_MEDIA_ERROR,\n        payload: err.response.data.errorMessage || err.response.statusText\n      });\n    });\n};\n. ",
    "philippevk": "Seems to be coming from node itself. Will try the script again when the 7.8 update hits arch.\nhttps://github.com/nodejs/node/blob/master/doc/changelogs/CHANGELOG_V7.md#7.8.0\nFix memory leak if certificate is revoked (Tom Atkinson) #12089\nhttps://github.com/nodejs/node/pull/12089\nWill keep you posted!. ",
    "Miguel-Frazao": "Thank you, It worked. I think we can close now. . Thank you, It worked. I think we can close now. . ",
    "adi518": "What if you want to handle always globally? it seems to me the only viable solution is wrapping Axios with the pattern above. Btw, with Interceptors it looks this, which is less verbose/DRY:\n```js\nlet requestCompleteResolve\nconst requestComplete = new Promise(resolve => {\n  requestCompleteResolve = resolve\n}).then(() => {\n  // \"always\" callback\n})\naxios.interceptors.response.use(function (response) {\n  requestCompleteResolve()\n  return response\n}, function (error) {\n  requestCompleteResolve()\n  return Promise.reject(error)\n})\n```. ",
    "noobling": "Thank you I was searching everywhere for this. Is it included in the docs? I couldn't find it.. ",
    "acidjazz": "2nd vote to get this in the docs. I'd like to point out a couple things:\n\nThe second .then() won't fire if the .catch() is not specified.\nUltimately I think a .always() would be a better solution, for syntactic sugar reasons.\n. \n",
    "braian125": "\nTry the following (note the second then):\njs\naxios.post('/api/foo', {\n    foo: 'bar'\n}).then((response) => {\n    // success\n}).catch((error) => {\n    // error\n}).then(() => {\n    // always executed\n})\n\nIt must be specified in the official documentation.. ",
    "evseevnn-zz": "same problem. ",
    "realdubb": "This would be awesome!! I'm having an issue where an API sends json on error and binary data on success so I'm having issues with axios automatically encoding the json in arraybuffer despite content-type being application/json - https://stackoverflow.com/questions/53230205/change-responsetype-in-axios-based-on-response. ",
    "bubakazouba": "Can we close this now?. ",
    "dima74": "It happens for me only if response is not valid json. So I advice you recheck your server response.. ",
    "ariellevitsky": "You are likely getting a string response because you're converting the error into a string type by concatenating it with the \"!\".. ",
    "cubiczx": "On Axios 0.18 say Uncaught (in promise) TypeError: error.response.data.errors.map is not a function. ",
    "nadim": "I'm seeing it as well, and am not modifying the response in the catch block.\n      console.log(error.response.data)\n      console.log(typeof(error.response.data))\n\n\n{ status: 'ASDF'}\nstring\n\nFrom response headers: content-type: application/json;charset=UTF-8\nFrom package.json: axios@0.18.0. Is it for certain status codes only? It's happening on a 401 error for me, where I would like to parse the response.. ",
    "MicroDroid": "I actually somehow go around that like a few days ago of posting this issue. I feel extremely guilty for not posting the solution here. In fact, I don't remember what I have done to make it work. :man_shrugging: . ",
    "cekediz": "I'm having the same issue. \nUsing the CDN version.\n. I'm having the same issue. \nUsing the CDN version.\n. I ran into the issue with axios 0.8.7. Using Laravel 5.4 + VueJS 2.2.4.\nSeems like the latest axios (0.16.0) has solved the problem for me. Thanks.\n. I ran into the issue with axios 0.8.7. Using Laravel 5.4 + VueJS 2.2.4.\nSeems like the latest axios (0.16.0) has solved the problem for me. Thanks.\n. ",
    "slightlytyler": "For those stumbling across this: you're probably using a response interceptor that is swallowing the error. Unless your interceptor is ending with Promise.reject(error) or a throw you're swallowing it. ",
    "markspolakovs": "@rubennorte \n\ncan't get the final URL in the browser\n\nCan't you use XMLHttpRequest.responseURL?. @rubennorte \n\ncan't get the final URL in the browser\n\nCan't you use XMLHttpRequest.responseURL?. ",
    "kevinsimper": "I ended up not using the responseUrl, but instead disabled redirect and just used the header location.\nreturn axios\n        .get(URL, {\n          maxRedirects: 0,\n          validateStatus: null\n        })\n        .then(res => {\n          expect(\n            res.headers.location,\n            'to be',\n            '/'\n          )\n        }). ",
    "b4hand": "Is there any reason not to expose responseUrl directly on the request returned by axios? Would you accept a PR doing this?. @jan-molak's solution worked for me as well. It would really be nice to not have to force the port number on the url though.. ",
    "syzer": "\ud83d\udc4d . \ud83d\udc4d . ",
    "enheit": "@rubennorte, any idea how to prevent this? Because it is huge issue for my app flow.. I have spent a lot of time to find workaround for the issue. \nI fixed it by wrap network issue handler (or bad request handler) in setTimeout function.\nSolutions looks like this:\n```javascript\nconst request = axios.get(url, config);\nrequest.then(response => { \n    // success response handler goes here \n}, error => {\n    const { response } = error; // same as var response = error.response;\n    if(response) {\n        // error handler goes here\n    } else {\n       // Here is wrapper for unexpected errors with i-net/request \n       setTimeout(() => {\n           // handle unexpected errors\n       }, 1000);\n   }\n}\n```\nThis is workaround for FireFox 52.0.2 (64-bit). Other browsers have no issues with request interruption.. @rubennorte, for example, when user try to make an action and suddenly i-net connection has lost, application will handle this exception. But there is no possibility to compare real i-net connection problem with FireFox request interruption. . @rubennorte Could you please provide link to spec? Looks like I read deprecated article.. ",
    "HarryCaveMan": "It is a browser compatibility issue. I think firefox reloads the page on the event before the request can complete. I have used the following as a workaround in leu of just letting the default event reload happen. Tested this in firefox 59 and chrome:\njs\nformSubmit = event => {\n        event.preventDefault();\n        createPost(this.state) //this function contains the axios post request\n        .then(() => window.location.reload());\n    }. ",
    "DanielWLam": "Thanks. @cameronpickham works for me, thanks~!. ",
    "bbsimonbb": "If you're on the browser, you might be able to fill and post a DOM form, and let the browser construct the multipart message?. ",
    "sanphandinh": "Thanks you, I fixed it. Because I forget '\\r' character when break line. . ",
    "aaronplanell": "This code:\nreturn axios.post(url, {\n          name: 'theUsername',\n          pass: 'theTopSecretPassword'\n        }).then(theResponse, theError);\nDoesn't work too :confused: . Hello,\nFinally I wrote:\nreturn axios.post(url, qs.stringify({\n          name: 'theUsername',\n          pass: 'theTopSecretPassword'\n        })).then(theResponse, theError);\nAfter install qs:\nyarn add qs;\nAnd import it:\nimport qs from 'qs';\nAnd works perfectly.\nBest regards!. ",
    "khalidabuhakmeh": "ok, thank you for the consideration.. ",
    "Gavinchen92": "perhaps ie9 not support  CORS. ",
    "alex-exerve": "So, here's the thing about this issue (because I ran into it the other day) How does jquery support CORS in ie9? because I ended up having to make a mokeypatch wrapper in IE9 so it'd use jquery to send an authorization header on a get request.. Okay so here's the fix:\nin xhr.js on line 29:\njavascript\n    window.XDomainRequest && !('withCredentials' in request) &&\nshould really be:\njavascript\n    window.XDomainRequest && !('withCredentials' in config) &&\nand here is the proof:\n\naxios 0.17.1 broken in ie9\naxios 0.17.1 with fixed line\n\nif you run this in IE9 the fixed version will return an \"Authorization\" header with a token.\n. ",
    "takiarek": "I have identical issue. In Chrome DevTools Network tab you can see that the headers map is put into the Request Payload instead of Request Headers.\nA workaround for that is to make an axios instance with headers set:\n```\nconst instance = axios.create({\n    headers: user\n});\ninstance.post(DOMAIN_NAME + '/api/services/ocr')\n  .then(response => console.log(response))\n  .catch(error => console.log(error)\n);\n```. I have identical issue. In Chrome DevTools Network tab you can see that the headers map is put into the Request Payload instead of Request Headers.\nA workaround for that is to make an axios instance with headers set:\n```\nconst instance = axios.create({\n    headers: user\n});\ninstance.post(DOMAIN_NAME + '/api/services/ocr')\n  .then(response => console.log(response))\n  .catch(error => console.log(error)\n);\n```. ",
    "Rob117": "@takiarek Thank you!. ",
    "ClementParis016": "Maybe also https://github.com/axios/axios/issues/724 and https://github.com/axios/axios/issues/907. Then, if we want to keep the default parsing behavior a possible solution could be to add an option to disable automatic parsing?. ",
    "tiarebalbi": "Tested the changes here and I think this issue can be closed. Working as expected.. Please, IGNORE THIS ISSUE. Found the problem: \nI was setting baseUrl but it should be baseURL.. ",
    "adriaanmeuris": "I'm running into the exact same issue. Server returns a blob on success, on error a JSON object is returned containing error details.\nThe data returned in the transformResponse function is typed to the responseType (responseType blob: data is an [object Blob]), and there's no context available to know if the request succeeded or not.\nAn example how to know if the request succeeded and transform it to JSON if it didn't would be greatly appreciated.. @nickuraltsev since I can't re-open this issue, any guidance on how we can handle this situation?. @fritx works perfect, but indeed a bit hacky. @nickuraltsev any ideas how to improve this? thanks!. @fritx works perfect, but indeed a bit hacky. @nickuraltsev any ideas how to improve this? thanks!. ",
    "DaveSweeton": "Same issue for me. I'd like to be able to use a solution like the one referenced here: https://stackoverflow.com/a/29039823\nBut it requires access to the onreadystatechange event of XMLHttpRequest, which isn't exposed. TransformResponse doesn't work since it's too late.. ",
    "farskid": "@fritx Your workaround worked for me on a blob image sent as response. Thanks.. ",
    "aleen42": "Using ArrayBuffer is another option, and do not need to solve the problem that synchrounsly read content of file blob.\n```js\nconst service = axios.create();\nservice.interceptors.response.use(\n    response => {\n        if (!/json$/gi.test(response.headers['content-type'])) {\n            /* not json, like binary string /\n            return response.data;\n        }\n    if (response.request.responseType === 'arraybuffer'\n        && response.data.toString() === '[object ArrayBuffer]'\n    ) {\n        /** error response */\n        const res = JSON.parse(Buffer.from(response.data).toString('utf8'));\n    }\n\n    /** handle res according to the JSON object */\n    /** ... */\n},\nerror => {/** handle error response status */}\n\n);\nconst downloader = require('js-file-download');\nserver.post(url, params, {\n    responseType: 'arraybuffer',\n}).then(data => {\n    downloader(data, 'xxx.csv');  \n});\n```\n. ",
    "nE0sIghT": "In case of error response with json:\n```\nlet axios = ...instantiate...;\naxios.interceptors.response.use(\n           response => { return response; },\n           error => {\n               if (\n                 error.request.responseType === 'blob' &&\n                 error.response.data instanceof Blob &&\n                 error.response.data.type &&\n                 error.response.data.type.toLowerCase().indexOf('json') != -1\n               )\n               {\n                 return new Promise((resolve, reject) => {\n                    let reader = new FileReader();\n                    reader.onload = () => {\n                        error.response.data = JSON.parse(reader.result);\n                        resolve(Promise.reject(error));\n                    };\n                reader.onerror = () => {\n                    reject(error);\n                };\n\n                reader.readAsText(error.response.data);\n             });\n           };\n\n           return Promise.reject(error);\n       }\n   );\n\n```. ",
    "HuYaoPing": "\nPost method or get method   no problem\n\nput method \nwhere is  cookie ??\nno cookie  session don't get \n//myparams is josn \naxios(url, { method:'put', params: myparams,  withCredentials: true}).then(function (response) {\nconsole.log(response);\n\n}).catch(function (error) {\n    console.log(error);\n});\n. @tomaash @idan @lachenmayer Please help me  . i test in egde no problem\nchrome 50+ was Exception. ",
    "dean5277": "\nxhr.js   line 67  responseData is undefined;\nif (var responseData = config.responseType || config.responseType === 'text' ? request.responseText : request.response;)  i can accept the data;\n\nbut chrome is wrong;\n. \n\n\n. if ie9  ,need return request.responseText;. ",
    "mahelder": "Thankyou @rubennorte for your answer, but this was not the correct solution. The problem was on my backend, with the Cors on the configuration of the OAuthServer.\nThankyou. ",
    "clustersnake": "@rubennorte  Thank you very much, I'll check it out . ",
    "thiagosanches": "Hi guys, I opened a ticket that I believe that it might be related to this issue. #1149 \nThank you.. ",
    "devaKumaraswamy": "I discovered that for this particular scenario (calling oauth/token endpoint) axios seems to be case sensitive for the content-type header key. 'Content-Type' works fine but 'content-type' results in a missing grant-type. I am running 0.18.0.  Right now I am slammed with work - otherwise I would step into the debugger to see what is going on. Maybe the folks who are very knowledgeable with the internals of axios can either confirm or reject my statement.\nI do want to state that I use axios extensively in my work - kudos the the author.\n. ",
    "casank25": "@msudgh So what happened here? I'm getting same issue. Did you find solution to this since you closed it?. @msudgh So what happened here? I'm getting same issue. Did you find solution to this since you closed it?. ",
    "kmeda": "I am stuck here too :/. const axios = require('axios');\nconst CircularJSON = require('circular-json');\naxios.get(url, config).then((response)=>{\n    let json = CircularJSON.stringify(response);\n    res.send(json);\n  }).catch((error)=>{\n    console.log(error);\n});\nThis worked for me!. ",
    "Nisthar": "Use util.inspect(object) to convert the data into string. ",
    "gopal-g": "I wonder why this issue was closed without any hint. :( What is the right fix for this.\nUpdate\nWell it was basically a issue with my data object which had value which was conflicting. So if you guys face this issue \nFix 1. Log your data object and check if it has any unwanted object .\nFix 2: Try this https://stackoverflow.com/questions/23117470/passing-an-object-with-circular-references-from-server-to-client-side-javascript/23961876#23961876 it might help.\nThanks.. I wonder why this issue was closed without any hint. :( What is the right fix for this.\nUpdate\nWell it was basically a issue with my data object which had value which was conflicting. So if you guys face this issue \nFix 1. Log your data object and check if it has any unwanted object .\nFix 2: Try this https://stackoverflow.com/questions/23117470/passing-an-object-with-circular-references-from-server-to-client-side-javascript/23961876#23961876 it might help.\nThanks.. This yields the same result incase if the above solution messes up your JS file syntax while indenting or minifying :) \naxios\n.post('ajax/register/otp', this.registerData)\n.then(function (response) {\n       return otpSent(response)\n})\n.catch(function (error) {\n      console.log(error.response);\n });. This yields the same result incase if the above solution messes up your JS file syntax while indenting or minifying :) \naxios\n.post('ajax/register/otp', this.registerData)\n.then(function (response) {\n       return otpSent(response)\n})\n.catch(function (error) {\n      console.log(error.response);\n });. Well @pedro-mass  in that case there might be no response from server side. in my scenario my response was JSON when error occured I could get the response using error.response. Well @pedro-mass  in that case there might be no response from server side. in my scenario my response was JSON when error occured I could get the response using error.response. ",
    "sepehrvakili": "Had this issue and this is how I solved it. \nI passed a response interceptor to axios for handling error responses.\n```javascript\nconst handle_axios_error = function(err) {\nif (err.response) {\n    const custom_error = new Error(err.response.statusText || 'Internal server error');\n    custom_error.status = err.response.status || 500;\n    custom_error.description = err.response.data ? err.response.data.message : null;\n    throw custom_error;\n}\nthrow new Error(err);\n\n}\naxios.interceptors.response.use(r => r, handle_axios_error);\naxios.post(....)\n```\n. ",
    "kevrowe": "We're seeing this issue but, extending the above example, it's the err.request._currentRequest._redirectable which is a circular reference.\njavascript\nrequest:\n   Writable {\n     ...\n     _currentRequest:\n      ClientRequest {\n        domain: null,\n        _events: [Object],\n        _eventsCount: 6,\n        _maxListeners: undefined,\n        output: [],\n        outputEncodings: [],\n        outputCallbacks: [],\n        outputSize: 0,\n        writable: true,\n        _last: true,\n        upgrading: false,\n        chunkedEncoding: false,\n        shouldKeepAlive: false,\n        useChunkedEncodingByDefault: true,\n        sendDate: false,\n        _removedHeader: [Object],\n        _contentLength: null,\n        _hasBody: true,\n        _trailer: '',\n        finished: false,\n        _headerSent: true,\n        socket: [Object],\n        connection: [Object],\n        _header: '...',\n        _headers: [Object],\n        _headerNames: [Object],\n        _onPendingData: null,\n        agent: [Object],\n        socketPath: undefined,\n        timeout: undefined,\n        method: 'POST',\n        path: '...',\n        _ended: false,\n        _redirectable: [Circular], // <----\n        parser: null },\n     _currentUrl: '...' },\n  response: undefined }. ",
    "timneedham": "Not sure why this is closed, it's still occurring... that said @sepehrvakili's workaround works great.\nI'm calling Axios, within another Axios promise and hitting this... is that a bad thing?. ",
    "YassineGherbi": "Why is this issue still open?. ",
    "lrettig": "I'm running into this too. What's best practice around handling this sort of situation? Is there any way to get more info on what went wrong so we can interpret the error and report it to the user or attempt to intercept the error?. I'm running into this too. What's best practice around handling this sort of situation? Is there any way to get more info on what went wrong so we can interpret the error and report it to the user or attempt to intercept the error?. Thanks. This is incredibly frustrating because when a CORS request fails\nand returns a 400 error, we cannot see the error because of this issue. We\ncan't even see the error code! This makes it very difficult to handle these\nerrors.\nOn Thu, May 25, 2017 at 18:04 Wyatt Cready notifications@github.com wrote:\n\nThe best you're going to do is something like this:\naxios.interceptors.response.use((response) => response, (error) => {\n  if (typeof error.response === 'undefined') {\n    alert('A network error occurred. '\n        + 'This could be a CORS issue or a dropped internet connection. '\n        + 'It is not possible for us to know.')\n  }\n  return Promise.reject(error)\n})\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/838#issuecomment-304033403,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADKbNA4gugW2-rXVkjiAe2X1i_G951cGks5r9ZhmgaJpZM4M633f\n.\n. Thanks. This is incredibly frustrating because when a CORS request fails\nand returns a 400 error, we cannot see the error because of this issue. We\ncan't even see the error code! This makes it very difficult to handle these\nerrors.\n\nOn Thu, May 25, 2017 at 18:04 Wyatt Cready notifications@github.com wrote:\n\nThe best you're going to do is something like this:\naxios.interceptors.response.use((response) => response, (error) => {\n  if (typeof error.response === 'undefined') {\n    alert('A network error occurred. '\n        + 'This could be a CORS issue or a dropped internet connection. '\n        + 'It is not possible for us to know.')\n  }\n  return Promise.reject(error)\n})\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/838#issuecomment-304033403,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADKbNA4gugW2-rXVkjiAe2X1i_G951cGks5r9ZhmgaJpZM4M633f\n.\n. I understand. It has nothing to do with axios and you should probably close\nthis issue. I'm just lamenting that the situation is pretty dire and\nfrustrating.\n\nOn Thu, May 25, 2017, 18:34 Wyatt Cready notifications@github.com wrote:\n\nAgain, this isn't an issue with axios. Browsers will not allow JS to see\nany response information when there is a CORS issue for security reasons.\nYou can test this yourself with the following:\nx = new XMLHttpRequest()x.onerror = (e) => console.log('THIS IS ALL THE INFO WE HAVE', e, x)x.open('GET', 'https://www.google.com')x.send()\nYou'll see that there is no helpful information. There is no way to\ndistinguish between no internet connection, bad DNS, or CORS issues, etc.\nAll you know is that there was a Network Error.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/838#issuecomment-304041447,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADKbNMMI_dGW_K9-wAdOaMPcXaDb5Orcks5r9Z-DgaJpZM4M633f\n.\n. I understand. It has nothing to do with axios and you should probably close\nthis issue. I'm just lamenting that the situation is pretty dire and\nfrustrating.\n\nOn Thu, May 25, 2017, 18:34 Wyatt Cready notifications@github.com wrote:\n\nAgain, this isn't an issue with axios. Browsers will not allow JS to see\nany response information when there is a CORS issue for security reasons.\nYou can test this yourself with the following:\nx = new XMLHttpRequest()x.onerror = (e) => console.log('THIS IS ALL THE INFO WE HAVE', e, x)x.open('GET', 'https://www.google.com')x.send()\nYou'll see that there is no helpful information. There is no way to\ndistinguish between no internet connection, bad DNS, or CORS issues, etc.\nAll you know is that there was a Network Error.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/838#issuecomment-304041447,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADKbNMMI_dGW_K9-wAdOaMPcXaDb5Orcks5r9Z-DgaJpZM4M633f\n.\n. \n",
    "gcollombet": "The issue is also happening when their is a preflight request OPTIONS that is validated by the server (so no CORS error happen, the request is valid, and then a regular request return a 400 error).\nOPTIONS 200 OK\nPOST 400 Bad Resquest . ",
    "IAMtheIAM": "I spent hours trying to figure out why I was getting a 400 response. I tried angular's HttpClient, Axios, and jQuery ajax. Finally I realized it was a CORS issue. Lol there goes a few hours. \nIt wasn't saying anything at first. just 400 Bad Request. Then I checked the console and saw the browser error message Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource. I was over in the network tab and it really doesn't give any useful information at all from there, where you would expect it to be.. ",
    "appmux": "This actually sucks big time as it's impossible to override the config if you have multiple interceptors.... Previous behavior did not make sense as you could not override configuration. I approve.. Please merge asap as it's a huge blocker.. ",
    "berfarah": "Hi! I wanted to check in to see if there's anything I can add here that would further the PR. I'm happy to:\n- Add more context around things that are unclear\n- Rewrite code wherever it's needed\n- Take a different approach if this one is not desired\nPlease let me know if there's anything you'd like me to do here - or, alternatively, if you just don't want to maintain this.. Thanks for the feedback, @rubennorte. \ud83d\ude04 I've added your suggested API implementation in a separate commit. I can squash that later. Just wanted to make sure I understood what you were asking for correctly.\nOnce you've confirmed that this is the API you'd like, I'll go back and fix the (now) breaking tests :). Thanks for the feedback, @rubennorte. \ud83d\ude04 I've added your suggested API implementation in a separate commit. I can squash that later. Just wanted to make sure I understood what you were asking for correctly.\nOnce you've confirmed that this is the API you'd like, I'll go back and fix the (now) breaking tests :). Awesome, thanks for the feedback @rubennorte - I'll give it another pass.. ",
    "eddiewang": "@tjausten did you ever figure this out?. ",
    "tjausten": "Hey Eddie, thanks for your response. We found out that the issue was with the SDK we were using rather an issue with Axios itself. I will close this issue.. Hey Eddie, thanks for your response. We found out that the issue was with the SDK we were using rather an issue with Axios itself. I will close this issue.. ",
    "hesher": "same here. same here. I use axios cancelToken to cancel all requests when running in a testing environment:\nexport const axiosCancelToken = axios.CancelToken.source();\naxios.defaults.cancelToken = axiosCancelToken.token;\nand then from the tests:\naxiosCancelToken.cancel('Cancelling all remaining requests after tests ended');\nIs this not the right way to work with cancelToken?\n. I use axios cancelToken to cancel all requests when running in a testing environment:\nexport const axiosCancelToken = axios.CancelToken.source();\naxios.defaults.cancelToken = axiosCancelToken.token;\nand then from the tests:\naxiosCancelToken.cancel('Cancelling all remaining requests after tests ended');\nIs this not the right way to work with cancelToken?\n. ",
    "sunnykgupta": "Generally, browsers automatically add the necessary gzip enabled headers, just like they inject cookies automatically over on XMLRequests.\nDid you check if your server has gzip enabled?. cURL does not enforce CORS rules. Those rules are enforced by browsers for security purposes.\nWhen you mention that you added the relevant header, I assume you mean you added those headers to the request. Actually, the header is expected in the response headers from the server, indicating that the resource is allowed to be accessed by other websites directly.\nFYI, CORS - Cross Origin Resource Sharing. Since your API does not support it, you have two options -\n\nUse a proxy server on the same domain as your webpage to access 4chan's API or,\nUse a proxy server on any other domain, but modify the response to include the necessary headers.\n\nI'd like to vote to close this issue as \"Not an issue\".. Try setting it to null as a workaround till this is fixed?. ",
    "zhaozailin": "thanks. ",
    "adl1995": "Thank you for the suggestion. I have updated my code to route the request through a proxy:\naxios.get('https://a.4cdn.org/a/threads.json', {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n    },\n    proxy: {\n      host: '104.236.174.88',\n      port: 3128\n    }\n    }).then(function (response) {\n        console.log('response is : ' + response.data);\n    }).catch(function (error) {\n        if (error.response) {\n          console.log(error.response.headers);\n        } \n        else if (error.request) {\n          console.log(error.request);\n        } \n        else {\n          console.log(error.message);\n        }\n    console.log(error.config);\n});\nHowever, I'm still getting this error:\n\nCross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://a.4cdn.org/a/threads.json. (Reason: CORS header \u2018Access-Control-Allow-Origin\u2019 does not match \u2018https://boards.4chan.org\u2019).\n\nI have searched through various forums and questions on Stack Overflow and I can't seem to find any solution to this. It would be appreciated if someone could provide some insight.. @ronnin For the record, I tried out your solution, but it doesn't work.. ",
    "JoseTavares": "Any news on this? I'm pretty much in the same boat.... ",
    "priyankachiluveri": "I'm also getting same issue. Can anyone please help me on this. ",
    "yassinmziya": "saaaaame. ",
    "PetitBateau": "@adl1995  It did the trick for me ;). That's why i said it was a temporary solution. And of course for a dev environment.. ",
    "ramziddin": "A Chrome extension helps only for those who have the extension. Depending on Chrome extension in production is not a good idea, as not everyone has that extension.. ",
    "steelow": "The remote service to which you are making your AJAX request does not accept cross origin AJAX requests from your domain. One thing you could do if you have access to your website server-side codebase, is to create a controller action there (assuming you are using an MVC) and then use it to consume the remote service. You can then make AJAX requests to your controller action. A bonus to this approach is that you could run additional checks before contacting the remote service, formatting its response and even caching it.. ",
    "sw-yx": "i always find reference to that MDN document not very helpful. its a long document and it doesnt directly address the question at hand. what do i do if i dont have access to the server side codebase and want to access this API?. ",
    "JigzPalillo": "My solution is to create my own api on my domain server to access any foreign api that doesnt allow cross-origin requests, I call it my repeater api. . Normally this would work, but in the case that it doesn't and you don't have any access to that domain...\naxios.get('https://www.notmydomain.com/1511.json')\n    .then(function (response) {\n        console.log(response.data);\n});\nWhat I did was create a repeater on my server\naxios.get('https://www.mydomain.com/repeater.php?url=https://www.notmydomain.com/1511.json')\n    .then(function (response) {\n        console.log(response.data);\n});\n/* repeater.php */\nfunction collect_data($url){\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); //remove on upload\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_VERBOSE, 1);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_AUTOREFERER, false);\n    curl_setopt($ch, CURLOPT_REFERER, \"https://www.notmydomain.com\");\n    curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    $result = curl_exec($ch);\n    echo curl_error($ch);\n    curl_close($ch);\nreturn($result);\n}\necho collect_data($_GET[\"url\"]);\n. ",
    "mbmohib": "@JigzPalillo Can you share the approach or code? I'm pretty much stuck! :(. ",
    "robertjchristian": "The server needs to respond with CORS headers on the options call.  If you are using nodejs/express, you can fix this for all endpoints with:\napp.use(function(req, res, next) {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n  next();\n});\nBut that's a little loose.  Probably want to tighten up for production.. ",
    "steveswork": "I have long solved that problem though. The server belongs to a 3p service and therefore out of my control. I simply proxied it instead. All is well on that front. \nThanks. ",
    "AdnanCukur": "@steveswork same here, server belongs to a 3p service, pretty sad that I can use ajax, request.js but not axios which i prefer \ud83d\udc4e . ",
    "fadilnatakusumah": "@adl1995 do happen to be able to fix this problem yet? I totally confuse how to handle this error. ",
    "challenger532": "it's 2018 now, is there any update?\n. ",
    "shafikhaan": "@challenger532  Nope Still not.. ",
    "chrisalcantara": "The error is still prevalent. \nMy advice: use a different library.. The error is still prevalent. \nMy advice: use a different library.. ",
    "MichaelNgugiN": "Okay, this kinda solved my problem. You see, I'm working with vuejs and Laravel... i set up my Laravel web route in php as follows:\n```\nRoute::get('distancematrix/{source}/{destination}', function($source,$destination){\n $url = \"https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&origins=$source&destinations=$destination&key=YOUR_API_KEY\";\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, $url);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\ncurl_setopt($ch, CURLOPT_PROXYPORT, 3128);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n$response = curl_exec($ch);\ncurl_close($ch);\nreturn json_decode($response, true);\n});\n```\nthen vuejs file i simply used axios to send a request to my route:\naxios.get(\"distancematrix/place_id:${this.place.source}/place_id:${this.place.destination}\").then(response => {\n                    console.log('====================================')\n                    console.log(response.data)\n                    console.log('====================================')\n   })\nand voila, it works fine.. ",
    "vDiFoung": "if use Laravel, addition function:  \n\nheader('Access-Control-Allow-Origin: *'); \n\nto controller or route before return\nExample: \nRoute::get('post',function(){\n    $jav = Blog::all();\n    header('Access-Control-Allow-Origin: *');\n    return $jav;\n});\nSorry for my English. Hope this can help you.\n. ",
    "robertmagier": "I use vue.js (localhost port 8080 ) and Flask for my API (localhost port 5000) \nI simply had to make small change in  my api code (Flask on port 5000) .\nI added flask extension flask-CORS and modified my code to use it.\nBefore:\n```\nfrom flask import Flask, request\nimport json\napp = Flask(name)\n**After:**\nfrom flask import Flask, request\nimport json\nfrom flask_cors import CORS\napp = Flask(name)\nCORS(app)\n```\nAfter this it worked and I could use my API. \nSo it is not really axios issue, but API problem and you get warning from Firefox not from calling axios.get function. . ",
    "isaacalves": "By setting the headers and proxy options, I got instead the Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource..\nBut I was able to get around that with this extension: https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en .\nSadly, that worked only yesterday and not today...I've been trying to figure out the hell why\n. ",
    "ridercarver": "will help only you, but how about other people?. ",
    "pdaytona": "trying Vue and axios I obviously got the same issue.\nJust tried the solution provided by sundar6445 and it works perfectly.\nThe webpack config file I modified is in /config/index.js. I prefered to modify this one since referenced in /build/webpack.dev.conf.js\nIn it you find \nmodule.exports = {\n  dev: { \n...\nproxyTable: {},\nAs described by sundar, change the proxyTable by for instance something like\nproxyTable: ({\n      '/events': {\n        \"target\": 'http://localhost:3000',\n        \"changeOrigin\": true,\n        \"secure\": false\n      }\n    }),\n which means that everything starting by /events will be routed to http://localhost:3000/events. No 'pathRewrite' in my case, relative url will be the same.\nand of course, don't forget to remove the full URL in your Vue component. I had:\nmounted () {\n    axios.get('http://localhost:3000/events/nb')\n      .then(result => {\n        this.new_et_nb = result.data\n        console.log('*******' + JSON.stringify(result) + ', ' + result.data)\n      }, error => {\n        console.error(error)\n      })\n  }\nit becomes:\nmounted () {\n    axios.get('/events/nb')\n      .then(result => {\n        this.new_et_nb = result.data\n        console.log('*******' + JSON.stringify(result) + ', ' + result.data)\n      }, error => {\n        console.error(error)\n      })\n  }\nand it works perfectly well. Thanks to @sundar6445 \nHope this helps\n. ",
    "benjamindally": "I know this is marked closed, but I wanted to point something out. Sometimes this error will appear on the client side if your API Key is either expired or being used by someone else. \nThis might go without saying of more experienced developers but for those people new to coding, make sure you have a unique API Key. Not all APIs require unique keys, but if they do, you will certainly need it. Refer to the API documentation for your specific API to see what they require.. ",
    "mddanishyusuf": "I think this header config will solve this issue.\nheaders: { 'content-type': 'application/x-www-form-urlencoded' }\nThanks. ",
    "letorruella": "I know this sounds cliche, but my solution to this problem has been creating a custom api to handle this calls.. ",
    "AousAnwar": "\nThe problem is not with axios. The issue is with the server. When you serve up data you must add the following headers, before sending it.\nAccess-Control-Allow-Origin must be set to *\nAccess-Control-Allow-Headers must be set to Origin, X-Requested-With, Content-Type, Accept\n\nSource : CORS error while making axios.get call\nReferring to these answer, i added those lines to my backend express server, like so :\napp.use(function(req, res, next) {\n    res.header(\"Access-Control-Allow-Origin\", \"http://127.0.0.1:8080\"); //My frontend APP domain\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n    next();\n});`\n\nsource : CORS on ExpressJS \nAnd everything works fine for me, without any additional configuration on axios or in the frontend, so it's really not an axios problem but a lack of server side header configuration.\nFinally, i think this other answer on stackoverflow, cover pretty well the subject :\n\nHow to avoid the CORS preflight\nHow to use a CORS proxy to get around \u201cNo Access-Control-Allow-Origin header\u201d problems\nHow to fix \u201cAccess-Control-Allow-Origin header must not be the wildcard\u201d problems \n\nhope it helps.\n. ",
    "yasincidem": "if you want to fetch data from a third party api or url that has a issue with its CORS header(missing or contains multiple values) I think the only solution for this is use this link\n\"https://cors-anywhere.herokuapp.com/\"\n I use the link for small projects but for big projects you may want to create your own api to handle the calls and creating the api you can use the open source project https://github.com/Rob--W/cors-anywhere/ .\nThis one will work:\naxios.get(`${'https://cors-anywhere.herokuapp.com/'}https://a.4cdn.org/a/threads.json`)\n.then(res => {\n  console.log(res)\n})\n. ",
    "ScottyFillups": "I bumped into this problem some time ago while creating 4webm and 4chan-list-webm\nIt's worth noting that if you make a browser plugin, you don't need to play with the headers to hit the API. Maybe if we summon @moot he'll enable CORS :smile:. ",
    "murilobd": "\nsecure\n\nwebpack documentation to a better understanding: https://webpack.js.org/configuration/dev-server/#devserver-proxy. ",
    "bunday": "If you are using laravel or lumen for your backend API. And you are using barryvdh/laravel-cors package already. The solution is to set your cors.php config as the header, method and origin part as this \n'allowedOrigins' => ['*'],\n    'allowedHeaders' => ['*'],\n    'allowedMethods' => ['*'],\nHopefully it solves someone's issue. Hi, I had this issue a while ago, The main problem is that because your request contains a header, it  converts your request to a Patch with a new origin but on getting to the server, the server is not allowing 'ANY ORIGIN', so you have two options either on your server set the Access-Control-Allow-Origin value to * (meaning all origin are welcome). That should solve the issue.. ",
    "harisbaig100": "If you do it in safari it takes no time, Just enable the developer menu from Preferences >> Advanced, and select \"Disable Cross-Origin Restrictions\" from the develop menu. If you want local only, then you only need to enable the developer menu, and select \"Disable local file restrictions\" from the develop menu.\nand in Chrome for OSX open Terminal and run:\n$ open -a Google\\ Chrome --args --disable-web-security --user-data-dir\n\n--user-data-dir required on Chrome 49+ on OSX\n\nFor Linux run:\n$ google-chrome --disable-web-security\nAlso if you're trying to access local files for dev purposes like AJAX or JSON, you can use this flag too.\n-\u2013allow-file-access-from-files\nFor Windows go into the command prompt and go into the folder where Chrome.exe is and type\nchrome.exe --disable-web-security\nThat should disable the same origin policy and allow you to access local files.. ",
    "sunlee-newyork": "The main issue is the difference between server requests and client requests.\nWhen you're making requests via the client (aka most of the time, a browser) you are at the mercy of the browser software. The standard for browser software is to prevent any attempts at malicious activity that may or may not come from your own software.\nIf you are making a request from your own server (aka not a browser client), then the given is that for the code you have written yourself, no one (depending on your server settings) can access nor control it, and you know what kinds of requests are outgoing so there are no concerns for network calls occurring outside of your environment or your knowledge.\nThat's why browsers are strict about cross origin requests, specifically since once your public code is on the client, you have less control over who sees it / who can manipulate it. In the case that your frontend application is compromised and some malicious software is able to conduct network calls off your code at the expense of your visitors/users, they want to ensure that it cannot happen. Therefore, your mydomain.com cannot make calls to allyourdataarebelongtome.com just in case you didn't mean for it to happen.\nThe solution here is not that cross domain requests are not working - it's that either your own server is preventing this and you need to accommodate this circumstance in accepting your origin domain, or that the third party server you're trying to make API calls to has some other method of authentication/authorization on top of that cross domain request.. The main issue is the difference between server requests and client requests.\nWhen you're making requests via the client (aka most of the time, a browser) you are at the mercy of the browser software. The standard for browser software is to prevent any attempts at malicious activity that may or may not come from your own software.\nIf you are making a request from your own server (aka not a browser client), then the given is that for the code you have written yourself, no one (depending on your server settings) can access nor control it, and you know what kinds of requests are outgoing so there are no concerns for network calls occurring outside of your environment or your knowledge.\nThat's why browsers are strict about cross origin requests, specifically since once your public code is on the client, you have less control over who sees it / who can manipulate it. In the case that your frontend application is compromised and some malicious software is able to conduct network calls off your code at the expense of your visitors/users, they want to ensure that it cannot happen. Therefore, your mydomain.com cannot make calls to allyourdataarebelongtome.com just in case you didn't mean for it to happen.\nThe solution here is not that cross domain requests are not working - it's that either your own server is preventing this and you need to accommodate this circumstance in accepting your origin domain, or that the third party server you're trying to make API calls to has some other method of authentication/authorization on top of that cross domain request.. ",
    "ibnclaudius": "@mddanishyusuf Solution worked for me.\n\nI think this header config will solve this issue.\nheaders: { 'content-type': 'application/x-www-form-urlencoded' }\nThanks\n\nThanks! ;). ",
    "Historia2": "From here : https://github.com/axios/axios I've realized that they doesn't put full url to axios url request.\nSo I try and solved this by creating my own API on my site. I just sent request like this \naxios.get('/sample/request')\nthen http://127.0.0.1:8080/sample/request will send another request to https://a.4cdn.org/ and return responses to axios as json.\nIt's work for me, hope it can help you. ",
    "odahcam": "https://github.com/axios/axios/issues/853#issuecomment-408218917 worked with fetch API and a .NET 4.5 web API.. https://github.com/axios/axios/issues/853#issuecomment-408218917 worked with fetch API and a .NET 4.5 web API.. ",
    "fernandoruch": "I was with the same problem and I solve it installing 'cors' in my backend (Express).\nRun:\nnpm install cors\nThen just set this:\nvar cors = require('cors');\napp.use(cors());\n. ",
    "sahgoku": "Thank's @fernandoruch, this is working with my nodejs server. Thank's @fernandoruch, this is working with my nodejs server. ",
    "eladonline": "I had same problem and solved it \napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n  next();\n});\nworked at first, but then it stopped and i couldnt figure out why.\nthen I realized that I moved all my code to another file so I need to use router : \nrouter.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n  next();\n});. ",
    "serafss2": "I don't think the issue is in axios, the issue is in your back-end server.\nFor me I have an architecture with Flask on back-end and using axios in Vue.JS, only thing I had to do on my Flask server is:\npython\n...\nfrom flask_cors import CORS\n...\nCORS(app)\nThis shouldn't go to production though, you can also have a cross origin allow list at the nginx level. I read through this, might be helpful.. I don't think the issue is in axios, the issue is in your back-end server.\nFor me I have an architecture with Flask on back-end and using axios in Vue.JS, only thing I had to do on my Flask server is:\npython\n...\nfrom flask_cors import CORS\n...\nCORS(app)\nThis shouldn't go to production though, you can also have a cross origin allow list at the nginx level. I read through this, might be helpful.. ",
    "adj-dev": "I ran into this issue when I attempted to simply make a axios.get() request to the Darksky weather api. When I read through Darksky's FAQ page I found a question regarding this same exact problem, they answered by saying that they used this as a security measure to prevent unintended malicious access to their information and suggested creating a proxy to access their database. \nI made the following change to my package.json file (I'm using create-react-app):\njson\n{\n  \"proxy\": \"https://api.darksky.net/forecast/[myKey]\n}\nmyKey was provided to me by Darksky to access their data. \nThis was a super simple fix and worked for me! I would suspect that many api services are going to start using this as a security measure. Hopefully my solution can help others with similar issues. \nIn summary: create a proxy. \n. ",
    "maxgfr": "Thank's @fernandoruch . It works for me when I add it to app.js of my node.js server\njavascript\nvar cors = require('cors');\napp.use(cors());\n. ",
    "anilpai": "```\nimport axios from 'axios'\nimport jsonpAdapter from 'axios-jsonp'\naxios.get(${url}, { adapter: jsonpAdapter })\n        .then(result => {\n            console.log('Status Code: ' + result.status)\n        })\n        .catch(error => console.log('Request failed'))\n```\nJSONP (JSON with Padding or JSON-P) is used to request data from a server residing in a different domain than the client. JSONP enables sharing of data bypassing same-origin policy.. ",
    "AlanGreyjoy": "I just use jquery's $.get for external api calls.. ",
    "Bizzle-Dapp": "\nif you want to fetch data from a third party api or url that has a issue with its CORS header(missing or contains multiple values) I think the only solution for this is use this link\n\"https://cors-anywhere.herokuapp.com/\"\nI use the link for small projects but for big projects you may want to create your own api to handle the calls and creating the api you can use the open source project https://github.com/Rob--W/cors-anywhere/ .\nThis one will work:\naxios.get(`${'https://cors-anywhere.herokuapp.com/'}https://a.4cdn.org/a/threads.json`)\n.then(res => {\n  console.log(res)\n})\n@yasincidem - You are an absolute diamond for this suggestion. Cheers - i've followed many trails across the web in search of a solution and yours is the first that has worked for my particular scenario. \n. \n",
    "dlodeprojuicer": "I just came a cross this issue. I had {withCredentials: true} (a copy and paste from my other API) for this particular 3rd party API to work I simply had remove {withCredentials: true}. ",
    "jdpagley": "@sunnykgupta that works! Thanks for the workaround :). ",
    "aocneanu": "+1 This would be really useful\n@rubennorte I think that what @niklabaz wants is to use the interceptors to catch certain errors, and let the others to go to the .catch method from the axios[method] call.\nThe problem is that if you throw or return Promise.reject(...) after you, let's say notify the user in the interceptor, then you must catch the error again, in the .catch method, or it will break you code.\nIf you instead return a console.log() or a toaster for the specific errors that you cover in the interceptor, axios will consider that the response is a success and then execute the code in in the .then(response => {} method.\nHow can this be addressed?\nI suppose that we need something like axios.Cancel() but without throwing an error.. Thank you for your response.\nSo it seems that the only way to handle certain errors globally would be to write a handler mixin and  use it in every axios[method].catch(err => handler(error)).. Thank you for your response.\nSo it seems that the only way to handle certain errors globally would be to write a handler mixin and  use it in every axios[method].catch(err => handler(error)).. ",
    "burakuluu": "My problem is solved by this answer. ",
    "robertgon97": "axios({\n          method: 'POST',\n          url: 'you http api here',\n          headers: {autorizacion: localStorage.token},\n          data: {\n                    user: 'name'\n                    }\n        }). ",
    "sharma848": "Or if you want to get over this CORS error you can install corsproxy package in your node. This will help you with cross origin errors. You can refer to the link below:\nhttps://github.com/gr2m/CORS-Proxy. ",
    "Matu95": "Solve it by adding this header\naxios.post('http://localhost/M-Experience/resources/GETrends.php',\n      {\n        firstName: this.name\n      },\n      {\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n      });. ",
    "mirzaumersaleem": "to solve cors error simply run this command npm i --save cors and then in your app.js import like this \nvar cors = require('cors');\nthen call like this in same file in my case my root file is app.js \napp.use(cors());\nit will solve your cors issue . to solve cors error simply run this command npm i --save cors and then in your app.js import like this \nvar cors = require('cors');\nthen call like this in same file in my case my root file is app.js \napp.use(cors());\nit will solve your cors issue . ",
    "klever34": "@mirzaumersaleem I'm not using the cors but I'm trying to post to my backend using axios and I'm getting a 400 Bad request. @mirzaumersaleem I'm not using the cors but I'm trying to post to my backend using axios and I'm getting a 400 Bad request. ",
    "beeetooo": "Anyone? Having the same problem. It happened to me, but it suddenly started working.\njs\naxios.defaults.headers['Content-Type'] = 'application/json';\nCan you guys put a screenshot of your request?. @dougludlow I ran into that same problem, let me tell you how I solved it (if I remember correctly haha)\nI created a file called client.js and I did something like\n```javascript\nimport axios from 'axios';\nconst client = axios.create({\n  baseURL: BACKEND_URL\n});\nclient.defaults.headers['Content-Type'] = 'application/json';\nreturn client;\n```\nAnd then I made all my gateways or repositories to use that client module to make calls to the back end, and I solved that horrible application/json;charset=utf-8 problem.\nHopefully that can solve your problem \ud83d\ude4c . Lol it's good to know where that line was hahaha.\nYeah, tbh I don't work anymore at the codebase where I had to fix that problem, but I'm pretty sure I solved that problem by putting that line of \nclient.defaults.headers['Content-Type'] = 'application/json';\nIf not, maybe you can try by replacing client with axios, and if that doesn't work, at least I tried \ud83d\ude3fI'm pretty sure it'll get solved :+1:. Let me know if that fixed your problem @dougludlow :+1: so I can send a PR to the README or something haha. ",
    "narodejesus": "yes we are having the same problem in android. yes we are having the same problem in android. ",
    "WhiteFur": "I have the same problem, and solve it by adding \nheaders: {'Content-type': 'application/json'} to the request config.\nProbably the api service is checking if the string \n\"application/json; charset=utf-8\" == \"application/json\". ",
    "MrSandmanEndless": "@rubennorte What kind of answer is this? Sure, the service may need improvement, but that solve the problem? And for those developing for third party API and unable to improve it? So, that's ok not being able to configure the request at our will? If you don't want to help, ok. But close the topic with this kind of attitude, without providing any guidance. Shameful.. ",
    "kitsuyui": "@rubennorte \nI think the point of the problem is not just adding. It does replacing.\nThis replacing happens when the original charset is not only UTF-8, but latin-1, Chinese, Japanese, etc too. Even if specifying other charset explicitly. Like Content-Type: application/json;charset=Shift_JIS.\nAxios overwrites these Content-Type setting and replace it to Content-Type: application/json;charset=utf-8.\nSo web services cannot treat its original charset.. @rubennorte \nI think the point of the problem is not just adding. It does replacing.\nThis replacing happens when the original charset is not only UTF-8, but latin-1, Chinese, Japanese, etc too. Even if specifying other charset explicitly. Like Content-Type: application/json;charset=Shift_JIS.\nAxios overwrites these Content-Type setting and replace it to Content-Type: application/json;charset=utf-8.\nSo web services cannot treat its original charset.. ",
    "dougludlow": "I'm running into problems where axios is seemingly setting the charset and not honoring my default configured Content-Type. It works fine for a while, then all requests have the charset appended to the Content-Type at some point and so requests to the API I'm consuming are failing because it doesn't recognize application/json;charset=utf-8 as a valid format.. Ah, ok, I was doing:\n```\nconst instance = axios.create({\n    ...\n});\ninstance.defaults.headers.common['Content-Type'] = 'application/json';\n```\nI didn't realize you could set the headers property directly. I'll have to give that a try. I was playing around with doing something like:\ninstance.interceptors.request.use((config) => {\n    const isContentTypeNotSetOrContainsApplicationJson =\n        !config.headers ||\n        !config.headers['Content-Type'] ||\n        config.headers['Content-Type'].includes('application/json');\n    if (isContentTypeNotSetOrContainsApplicationJson) {\n        config.headers = config.headers || {};\n        config.headers['Content-Type'] = 'application/json';\n    }\n    return config;\n});\nWhich would probably work, but seems overkill...\nThis looks to be the offending line of code: https://github.com/axios/axios/blob/master/lib/defaults.js#L51\nSomehow, the default Content-Type is seemingly being wiped out or not applied and so axios is filling it with the it's own default...\n. @beeetooo honestly, I'm not sure, I ended up using your solution as well as the interceptor I posted above. Which is probably overkill, but I really need to make sure this doesn't break. So far so good.. ",
    "SEUH": "This is still an error. I don't know why to hard override the content type. We have implemented a fix on the server side but this should not happen.. This is still an error. I don't know why to hard override the content type. We have implemented a fix on the server side but this should not happen.. ",
    "harrydengchao": "This problem has been resolved.\nProblem Cause: When I pass the default parameters to create the instance, my FormData object is converted to an empty object.\njavascript\nlet configDefault = () => {\n  return {\n    method: 'post',\n    url: '',\n    responseType: 'json',\n    data: {},\n    params: {},\n    transformRequest: [function (data) {\n      return data;\n    }],\n    transformResponse: [function (data) {\n      return data;\n    }]\n  }\n}\nAxios.create(defaultConfig())\nWorkaround: When creating an instance, the default parameters are not passed.\njavascript\nAxios.create()\n\nI do not know why this is so, perhaps, only I am a person to encounter this problem. ",
    "RyanLiu0235": "@yss14 I've got the same problem with you. Have you figured it out?. @yss14 I've got the same problem with you. Have you figured it out?. @yss14 I've switched to Vue-Resource.... @yss14 I've switched to Vue-Resource.... ",
    "CliveTeow": "I also get the [object Object] in the payload, is it correct?\n. I am not sure why I keep getting invalid parameter response. @tmaly1980, I am a bit new about this, how to turn network inspect off?. \n@tmaly1980 , does it looks correct? The upload_file is still [object object].\n*I have removed the signature value from the screenshot.. ",
    "lyctea": "\nI get the same '[object Object]' string in the payload. Anyone figure this out?\n\nMy be you can append file.raw into to you new FormData Object if your data is file.. ",
    "jeffersontpadua": "@harrydengchao Thanks for the insight. So, for anyone still struggling with this, you have to override the \"transformRequest\" configuration option, and let it return the data, instead of formatting it to JSON. Something like this:\nAxios({\n      url: process.env.API,\n      data,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        Authorization: Bearer ${getCurrentToken()},\n      },\n      transformRequest: (data, request) => { // This is all that matters\n        return data;\n      },\n    });\n. ",
    "KangYoosam": "What @tmaly1980 said (turning off network inspect of ReactNativeDebugger) solved my problem.\nturning on ReactNativeDebugger affects real form upload. ",
    "Jarvens": "Thank you. This is not axios error, it has ended. ",
    "cycold": "Yeah, Me too.\ncurrently, \njs\n.catch(error => {\n          console.dir(\"error: \", error)\n          if (error.code == \"ECONNABORTED\" && ~error.message.indexOf(\"timeout\")) {\n            console.error(error.message)\n            Vue.$ui.toast.show({\n              text: \"request timeout\",\n              time: 2500,\n              type: \"error\",\n            })\n        }. ",
    "pvinis": "@rubennorte an example would be nice.. @rubennorte an example would be nice.. ",
    "hitchcockwill": "@pvinis \njs\naxios.interceptors.response.use((response) => {\n  return response;\n}, (error) => {\n  if (error.code === 'ECONNABORTED') {\n    // do a thing\n  }\n  return Promise.reject(error); \n});. @pvinis \njs\naxios.interceptors.response.use((response) => {\n  return response;\n}, (error) => {\n  if (error.code === 'ECONNABORTED') {\n    // do a thing\n  }\n  return Promise.reject(error); \n});. ",
    "denizdogan": "I'm having the same problem, but I can't really show you a short code snippet to reproduce it, this is pretty deep in a React+Redux+Flow codebase, but I can tell you that I use it with the new CancelToken variant which sets a scoped variable to the cancelling function, just like in the documentation. Calling the cancel function does not abort the POST request.\nThis is in Chrome 60.0.3112.113, the JS built using Webpack.. ",
    "benjaminreid": "Interestingly I'm using Axios and also receiving duplicate requests. I'm triggering them via Redux Sagas and using recipe to throttle the HTTP requests, tested manually trigger 10 requests simultaneously and the throttling works just fine.\nAfter a period of time, duplicate requests start to show up. Oddly it only seems to occur on Android in release mode.. ",
    "leonardobaggio": "@nouveller I've found out that a late loading state feedback for the users was causing this behavior.\nSome people stills double-click stuff on websites. It was naive not to have prevented this by code.\n```\nexport const contentPost = (props) => {\n    return function (dispatch) {\n        dispatch({ type: CONTENT_POST_ERROR, payload: null })\n        dispatch({ type: CONTENT_POST_LOADING, payload: true });\n        dispatch({ type: CONTENT_POST_SUCCESS, payload: null })\n    const request = axios({\n        method: 'post',\n        url: `/api/content`,\n        headers: auth.getHttpHeader(),\n        validateStatus: function (status) {\n            return status >= 200 && status < 300; // default\n        },\n        data: props\n    }).then((res) => {\n        dispatch({ type: CONTENT_POST_LOADING, payload: false });\n        dispatch({ type: CONTENT_POST_SUCCESS, payload: true, data: res })\n    }).catch(err => {\n        dispatch({ type: CONTENT_POST_ERROR, payload: err.code })\n        dispatch({ type: CONTENT_POST_LOADING, payload: false });\n        dispatch({ type: CONTENT_POST_SUCCESS, payload: false, data: null })\n\n    });\n}\n\n};\n```\nThere are a lot of ways to accomplish a better user experience in this scenario. I chose to completely change the button while user are sending stuff, using the CONTENT_POST_LOADING state.\n{this.props.content_post_loading &&\n    <a className=\"btn btn-primary disabled\">Creating...</a>\n    ||\n    <a className=\"btn btn-primary\" onClick={this.handleCreateClick}>Create</a>\n}\n. ",
    "rof20004": "I am with the same problem, my interceptor not update headers, only if I refresh page. ",
    "atomboulian": "I am having the same issue. We have multiple axios services so we made a redux middleware function to take in the service, get the token out of the action or the state depending on whether they simply log in or check the \"Remember Me\" box as they log in, and to set the headers on the axios client accordingly.\n```import {path} from 'ramda'\nconst {types: {PARSED_TOKEN, LOGIN}} = authDux\nexport default service => ({getState}) => next => action => {\n    if ([PARSED_TOKEN, LOGIN].includes(action.type)) {\n        service.interceptors.request.use(config => ({\n            ...config,\n            headers: {\n                ...config.headers,\n                Authorization: Bearer ${\n                    path(['user', 'token', 'access_token'], action) ||\n                    path(['auth', 'parsed_token'], getState())\n                }\n            }\n        }))\n    }\n    next(action)\n}\n```\nThe behavior is inconsistent for each subsequent axios call. On some pages that use the very same client, I get 401s until I refresh the page.. I am having the same issue. We have multiple axios services so we made a redux middleware function to take in the service, get the token out of the action or the state depending on whether they simply log in or check the \"Remember Me\" box as they log in, and to set the headers on the axios client accordingly.\n```import {path} from 'ramda'\nconst {types: {PARSED_TOKEN, LOGIN}} = authDux\nexport default service => ({getState}) => next => action => {\n    if ([PARSED_TOKEN, LOGIN].includes(action.type)) {\n        service.interceptors.request.use(config => ({\n            ...config,\n            headers: {\n                ...config.headers,\n                Authorization: Bearer ${\n                    path(['user', 'token', 'access_token'], action) ||\n                    path(['auth', 'parsed_token'], getState())\n                }\n            }\n        }))\n    }\n    next(action)\n}\n```\nThe behavior is inconsistent for each subsequent axios call. On some pages that use the very same client, I get 401s until I refresh the page.. ",
    "lepture": "The implementation would be better in this way:\n\nresponseEncoding default value should be null\nwhen responseEncoding has a value, use this encoding\notherwise use the charset in Content-Type header\nfallback to utf-8\n\n\nIt seems that you need to use iconv-lite, since the default supported encodings in Node is very limited.. ",
    "albertogasparin": "Based on axios logic when you are building your webpack bundle XMLHttpRequest is defined.\nYou can try using webpack webpack.NormalModuleReplacementPlugin to pick lib/adapter/http.js\u00a0even when axios requires lib/adapter/xhr.js. Yep, there is already another issue open #846 (with a webpack quick fix) and also an open PR with a proposed fix #887. @csvbox I know, as it's a one liner it looks silly to me importing a 3rd party dependency\n@fgnass Are you sure that by using Buffer.isBuffer() in http.js Webpack is not including Buffer anyway? Is it not the reason why is-buffer was created (and you imported it) in first place?. @csvbox I've tested @fgnass code and it works\n@fgnass May I ask you what it the reason to include is-buffer now? It looks like it's not used anywhere. I think Buffer.isBuffer in http.js is all we need (and it's supported by node since ever, so checking if it exists seems pointless).. My bad, utils.isBuffer is actually used in lib/defaults.js (missed it when I re-checked the project...).\nOnly question left for me is whenever include is-buffer module or write the one liner. . ",
    "dperezmavro": "Facing a similar issue here. I am using webpack 2.6.0, and axios 0.16.1. The bundle builds successfully, but it looks like axios picks XMLHTTPRequest to send HTTP requests, rather than the http module.. Following the suggestions on this answer solved it for me. Basically you need to tell webpack to build for node (by default it builds for the browser). ",
    "bigriot": "I hope this feature eventually get's added. It would be very useful for working with endpoints that require auth tokens that are generated from the current timestamp each time a request is sent.. ",
    "Ecareyu": "How did you solve it?. How did you solve it?. ",
    "agourd": "I had a very similar issues, what I understood is that the OPTIONS request that is issued before the POST request (I was doing cross-site requests) does not carry the cookie header.\nIf your server does not authorize OPTIONS request to be unauthenticated then he rejects it and your browser thinks that Cross-origin is denied.\nI changed my server configuration to authorize unauthenticated OPTIONS requests and it solved my problem.. I had a very similar issues, what I understood is that the OPTIONS request that is issued before the POST request (I was doing cross-site requests) does not carry the cookie header.\nIf your server does not authorize OPTIONS request to be unauthenticated then he rejects it and your browser thinks that Cross-origin is denied.\nI changed my server configuration to authorize unauthenticated OPTIONS requests and it solved my problem.. ",
    "jaspersorrio": "I had the same problem with post not sending cookies!\nI solved my problem by doing \naxios(\"http://mysite.com/api/things/\", {\n  method: \"post\",\n  data: someJsonData,\n  withCredentials: true\n}). ",
    "phistuck": "@rubennorte - why is this closed?. ",
    "synfox": "Do we have a solution for this?  As @Xcelled stated, axios is not sending cookie unless I do JSON.stringify? I do not  want to do that.. ",
    "xgqfrms": "Axios & cookie\n\n`withCredentials: true\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials`\nhttps://stackoverflow.com/questions/43002444/make-axios-send-cookies-in-its-requests-automatically/43178070#43178070\nhttps://stackoverflow.com/questions/40941118/axios-wont-send-cookie-ajax-xhrfields-does-just-fine/43676021#43676021\n```json\n{\n    withCredentials: true\n}\n```\nhttps://www.axios.com/tracking-cookies-are-dead-9c316a2c-33c2-40b8-9801-069df07593a8.html\n. ",
    "stepli1010": "have the same problem with post not sending cookies! Try some solutions but still without work.. ",
    "quicken": "Just in case anyone else stumbles across this thread \"googling\" for a solution.\nIf you are wanting to pass a struct as a set of form fields like you might do in jQuery you would likely be trying something like this when using axios (this will not work and exhibits the behavior titling this issue):\n```\nconfig = {\n    url:'http://somedomain',\n    method:'post',\n    withCredentials: true,\n    data:{myfield:\"myvalue\"}\n};\naxios.request(config);\n```\nInstead of a struct pass a FormData object as follows:\n```\nformData = new FormData();\nformData.append('myfield','myvalue');  \nconfig = {\n    url:'http://somedomain',\n    method:'post',\n    withCredentials: true,\n    data:formData\n};\naxios.request(config);\n```\nDoing the above allowed me to post my form data cross origin while also ensuring cookies were being passed along for the ride. \nNOTE : The server must also be responding with the following headers:\nAccess-Control-Allow-Credentials   true\nAccess-Control-Allow-Headers  X-PINGOTHER, Content-Type\nAccess-Control-Allow-Methods GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS\nAccess-Control-Allow-Origin: http://localhost:3000 // WILD CARD WILL NOT WORK WHEN POSTING\nHope this helps someone. . ",
    "todoconk": "\ud83d\udc4d . ",
    "sufuf3": "@Jamesking56 Thanks for the review.\nThe conflict was fixed. Would you please help me review this PR again?\nMany thanks.. ",
    "michaelbukachi": "I can confirm this too. I don't think it's bug though. However we need confirmation from the developer(s)\naxios version: v0.16.2. ",
    "langfordG": "I'm having the exact same issue and found this thread helpful: https://github.com/mzabriskie/axios/issues/383\nLikely has to do with a CORS header not being present for that response code. . I'm having the exact same issue and found this thread helpful: https://github.com/mzabriskie/axios/issues/383\nLikely has to do with a CORS header not being present for that response code. . ",
    "nabs-grg": "Thanks @tyleriguchi and @graysonlangford for the help. And yes the CORS header wasn't present for the response code.. ",
    "nelson6e65": "This is maybe related...\nIt happens to me that on authenticated (value is set in store.getters.authToken), if I add extra data to axios.interceptors.request, I get the error.\n```js\n// axios-config.js\nimport Vue from 'vue'\nimport axios from 'axios'\nimport store from '~/store'\nimport router from '~/router'\naxios.interceptors.request.use(request => {\n  if (store.getters.authToken) {\n    request.headers.common['Authorization'] = Bearer ${store.getters.authToken}\n  }\nrequest.data.locale = store.getters.locale // <- EXTRA DATA ATTACHED \nreturn request\n})\n```\n```js\n// store/auth.js\n// . . .\nasync fetchUser ({ commit }) {\n    try {\n      const { data } = await axios.get('/user/current') //  <-- I GET THE ERROR HERE\n  commit(types.FETCH_USER_SUCCESS, { user: data })\n} catch (e) {\n  console.error(e)\n  commit(types.FETCH_USER_FAILURE)\n}\n\n},\n```\nFor non successful login it works fine all. I get this error only there (when I try to get the current user). And is gone if I remove the extra data from the interceptors.\nSo, my problem is then the authToken is set.\n\nI ended up to use cookies to get the locale value in my back-end, but... I don't understand why this happens.\n. ",
    "peshi": "having the same issue.. ",
    "ltwaia": "me too\n. ",
    "clarkieryan": "Do you have the full code for this test - could be that this.test is undefined?. By the looks of it self is not defined when you call - addAsset - this could be because the component hasn't been mounted yet - meaning mounted() function to be called after you call addAsset which is where you define self. \nBy adding in the define var self = this inisde the addAsset call it's ensuring it's always defined when you call addAsset.. ",
    "souljacker": "Mine got fixed but I honestly don't know how, which makes me feel very stupid. I'll try to figure it out and report back. ",
    "zehelvion": "Some advice for anyone who's stuck.\n(1) Check the server-side with a tool like Postman. You might be missing body-parser.\n(2) Make sure you are using the current CDN.\n(3) Test your code snippet with jsfiddle to avoid state related issues.\nGood luck!. ",
    "purplecones": "I'm having the same issue. Nothing is sent in the body when I use a javascript object.\nHere I'm using api that I've created with axios.create.\n```javascript\napi.post('/someUrl', { foo: 'bar' })\n// returns { } empty object on server\n```\nHowever, when I use a string with equal sign it works.\n```javascript\napi.post('/someUrl', 'foo=bar')\n// returns { foo: 'bar' } on the server\n```\nThe solutions above don't solve my issue. Has anyone encountered this? Seems strange that passing an object would not work.\nPassing body contents with Postman works just fine.\nUsing \"axios\": \"^0.16.1\". I'm having the same issue. Nothing is sent in the body when I use a javascript object.\nHere I'm using api that I've created with axios.create.\n```javascript\napi.post('/someUrl', { foo: 'bar' })\n// returns { } empty object on server\n```\nHowever, when I use a string with equal sign it works.\n```javascript\napi.post('/someUrl', 'foo=bar')\n// returns { foo: 'bar' } on the server\n```\nThe solutions above don't solve my issue. Has anyone encountered this? Seems strange that passing an object would not work.\nPassing body contents with Postman works just fine.\nUsing \"axios\": \"^0.16.1\". ",
    "iamendy": "@12343954 have you resolved it now? . Thanks @12343954. \nI was able to figure it out. Laravel accepts the data and runs the function assigned to that view, but it does not run it as one would expect via forms. To  check whether the data exist do this:\nVueJs code:\naxios.post('url', data) .then((response) => { console.log(response); }) \n.catch((error) => { console.log(error); });\nLaravel code:\nRoute::post('url', function () {\n        return request()->get('data');\n});\nCheck your console and the data being sent will be returned as json. So it works but not like when you send a post request via forms in laravel. \n. So to get the Jason values, use the global request()->get('key') . ",
    "fabianrios": "If somebody else is working with express.js changing the bodyparser from \nbodyParser.urlencoded({ extended: false })\nto \nbodyParser.json()\nresolves the issue.. ",
    "sreerag-nair": "@fabianrios  You sir, are a life saver!. @fabianrios  You sir, are a life saver!. ",
    "fgnass": "I removed the require call because http.js is only used in Node.js and Buffer is a global there so there's no need for importing it. I'm fine with inlining the is-buffer code in utils.js as we don't really need the extra checks for node 0.10 and Safari 4/5 that are provided by Feross' module.. ... in http.js it's fine to use the native Buffer.isBuffer() check directly which, as a positive side effect, also covers the SlowBuffer case.. @csvbox Webpack respects the \"browser\" field in package.json (https://github.com/mzabriskie/axios/blob/master/package.json#L71) and therefore replaces http.js with xhr.js whenever it is required.. I would opt for keeping is-buffer as it already comes with good test coverage. We would otherwise have to copy the tests too. Small modules FTW.. I would opt for keeping is-buffer as it already comes with good test coverage. We would otherwise have to copy the tests too. Small modules FTW.. ",
    "csvbox": "\nI removed the require call because http.js is only used in Node.js\n\nDoes it matter for the webpack build? In webpack.config.js I don't see separate targets defined for node or web, so even if you reference Buffer only in http.js, it would still be included, right? If yes, all other changes are rendered pointless.\n. > I removed the require call because http.js is only used in Node.js\nDoes it matter for the webpack build? In webpack.config.js I don't see separate targets defined for node or web, so even if you reference Buffer only in http.js, it would still be included, right? If yes, all other changes are rendered pointless.\n. > Webpack respects the \"browser\" field in package.json (https://github.com/mzabriskie/axios/blob/master/package.json#L71) and therefore replaces http.js with xhr.js whenever it is required.\n@fgnass sorry I didn't see that before, thanks. > Webpack respects the \"browser\" field in package.json (https://github.com/mzabriskie/axios/blob/master/package.json#L71) and therefore replaces http.js with xhr.js whenever it is required.\n@fgnass sorry I didn't see that before, thanks. > Webpack respects the \"browser\" field in package.json (https://github.com/mzabriskie/axios/blob/master/package.json#L71) and therefore replaces http.js with xhr.js whenever it is required.\n@fgnass sorry I didn't see that before, thanks. ",
    "larvanitis": "It sounds like you are making a CORS request. In that case you should read this http://stackoverflow.com/questions/29954037/how-to-disable-options-request.. It sounds like you are making a CORS request. In that case you should read this http://stackoverflow.com/questions/29954037/how-to-disable-options-request.. ",
    "ZevenFang": "Look at this\nhttps://github.com/mzabriskie/axios#using-applicationx-www-form-urlencoded-format. ",
    "aztrock": "same question that @fairyly. ",
    "arivera12": "The solution to prevent preflight request is to set the header Access-Control-Max-Age. \nThe Access-Control-Max-Age response header indicates how long the results of a preflight request (that is the information contained in the Access-Control-Allow-Methods and Access-Control-Allow-Headers headers) can be cached.\nFor more information look this link.. this.$axios({\n                method: 'post',\n                url: '/usersaccount/login',\n                data: this.form.model\n            }).then(response => {\n                this.form.isSaving = false\n                this.validateLogin(response);\n            }).catch(response => {\n                this.form.isSaving = false\n                this.$root.$snackbar(this.$i18n.t(\"components.login.form.unknownError\"), { color: 'error' })\n            })\nI am using vuejs and axios on this code. $axios an extended property inside vuejs context.. this.$axios({\n                method: 'post',\n                url: '/usersaccount/login',\n                data: this.form.model\n            }).then(response => {\n                this.form.isSaving = false\n                this.validateLogin(response);\n            }).catch(response => {\n                this.form.isSaving = false\n                this.$root.$snackbar(this.$i18n.t(\"components.login.form.unknownError\"), { color: 'error' })\n            })\nI am using vuejs and axios on this code. $axios an extended property inside vuejs context.. Can I share some images about the code and the request?. Can I share some images about the code and the request?. I can't provide a jsfiddle cause the server is on a intranet. Is innacesible from the outside.. I can't provide a jsfiddle cause the server is on a intranet. Is innacesible from the outside.. I edited some headers on the server side and got this working. Don't know why jQuery worked out of the box without setting some additional headers. But at least I can confirm this issue is fixed for me. Thanks @RikkiGibson and @OpenGG. God bless us all!!!. ",
    "anthonybrown": "axios.interceptors.response.use(response => {\n  return response.headers['content-type'] === 'application/json' ? response : Promise.reject(response);\n}, error => Promise.reject(error));. ",
    "gopchi": "@anthonybrown Where should we put this code? Right before the axios.get() or?. ",
    "Cheese-Yu": "I have the same problem as you. Even I stoped my back-server(use Node.js),the response.status still is 200.\nI used 2rd's method,but no use.. ",
    "immunity20": "When I build production build\naxios doesn't call the APi at all\nit just return the app's (front end) index.html data ( .... \nOn dev the axios works fine, API print the url requested. Yes its the react project proxy problem (it proxy to itself)\n\u03a3\u03c4\u03b9\u03c2 \u0394\u03b5\u03c5, 27 \u0391\u03c5\u03b3 2018 \u03c3\u03c4\u03b9\u03c2 1:54 \u03bc.\u03bc., \u03bf/\u03b7 \u516d\u516d notifications@github.com\n\u03ad\u03b3\u03c1\u03b1\u03c8\u03b5:\n\nI hava similar issue.\nIt is well return on dev\nbut get a index.html on testing or production\nanyone help???\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/axios/axios/issues/889#issuecomment-416189413, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AQeV1qi6XUJmVLKA977oxJyMFgjEnjntks5uU8_cgaJpZM4NRjaP\n.\n\n\n-- \n\u0393\u03b9\u03ac\u03bd\u03bd\u03b7\u03c2 \u03a0\u03b1\u03c0\u03b1\u03b4\u03cc\u03c0\u03bf\u03c5\u03bb\u03bf\u03c2\n. Proxy Is productivity feature so it's not for production only for\ndevelopment\nhttps://github.com/facebook/create-react-app/issues/1087\n\u03a3\u03c4\u03b9\u03c2 \u03a4\u03c1\u03af, 28 \u0391\u03c5\u03b3 2018, 5:57 \u03c0.\u03bc. \u03bf \u03c7\u03c1\u03ae\u03c3\u03c4\u03b7\u03c2 \u516d\u516d notifications@github.com\n\u03ad\u03b3\u03c1\u03b1\u03c8\u03b5:\n\nsorry again\nI set the devServer.proxy just effect on \"quasar dev\", so it may not be\neffect on production.\nNow, how can I set the APIProxy for my production?\nI had try another way that set different API in build, but I got a CORS\nerror.\nThx\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/axios/axios/issues/889#issuecomment-416434576, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AQeV1spRZC55KvDq_kx1FzGWqZqEvetOks5uVLGmgaJpZM4NRjaP\n.\n. \n",
    "Shaunchenzhaojin": "I hava similar issue.\nIt is well return on dev\nbut get a index.html on testing or production\nanyone help???. @immunity20 \nThx so much. what a fast reply.\nI got it and will try again. \nThx again.. sorry again\nI set the devServer.proxy just effect on \"quasar dev\", so it may not be effect on production.\nNow, how can I set the APIProxy for my production?\n\nI had try another way that set different API in build, but I got a CORS error.\nThx\n. @immunity20 \nThx so much.\nYou save my time. . ",
    "arvera": "+1. ",
    "antonioreyna": "any idea of this?. any idea of this?. ",
    "jdtzmn": "See issue #475 . ",
    "LordZombi": "Isn't this just a CORS problem?\nYou need to add CORS-specific response headers on your server side:\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: GET, POST, PUT, DELETE\nAccess-Control-Allow-Headers: Authorization. ",
    "heyarviind": "I am still getting the same problem. I am still getting the same problem. ",
    "shailendra0015": "POST call is converting to OPTION\nI am sending both Authorization and Content-Type application/x-www-form-urlencoded headers using axios . But  only authorization header is send in request header. content-type header is missing from axios call \n. ",
    "sghgh1996": "I had this problem too. My server is a rest api written in php. I have added to all comming request these header:\nheader('Access-Control-Allow-Origin: *');\nheader('Access-Control-Allow-Methods: GET, PUT, POST, DELETE, OPTIONS');\nheader('Access-Control-Allow-Headers: Content-Type, X-Auth-Token, Origin, Authorization');\nThe last line indicates which headers are allowed. I added Authorization so I can set this header to my client.. ",
    "theFang": "Try: \nthis.app.use(function(req, res, next) {\n      res.header(\"Access-Control-Allow-Origin\", \"*\");\n      res.header(\"Access-Control-Allow-Methods\", \"GET,HEAD,OPTIONS,POST,PUT\");\n      res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization,  access-control-allow-origin, profilerefid(whatever header you need)\");\n      next();\n    });. ",
    "pedro-rates": "I'd like to say that I've encountered this error and solved it doing the following:\nInstead of doing:\nreturn axios.get(api + '/api/user/getUserInfo', {\n       params: {\n         UserId: 1\n       }\n     }, config)\nWhere\nconfig = {\n        headers: { 'Authorization': 'Bearer ' + accessToken }\n      }\nI did:\nreturn axios({\n      method: 'get',\n      url: api + '/api/user/getUserInfo?UserId=1',\n      headers: { 'Authorization': 'Bearer ' + accessToken }\n    })\nAnd it worked. I hope to help someone with this.\nCheers!. ",
    "sashnone": "let out = [];\n            for (let key in this.Data) { // in my case it is props: { Data: {} },\n                out.push(key + '=' + encodeURIComponent(thisUI.Data[key]));\n            }\n  this.$root.axios({method: 'POST', data: out.join('&')}).then(function (response) {......\nit's the stupidest solution... but it's work for me and my CORS requests..... ",
    "dmitrij-onoffapp": "@Khaledgarbaya This alias method does not work with Authorization header\n```\nvar config = {\n    headers: { 'Authorization': 'Bearer ksdjfglksgflksgsjdhglaslfkhgasf' }\n}\nreturn axios.get(url, data, config)\n```\nBut this way, it does work\nreturn axios({\n    method: 'get',\n    url: url,\n    headers: { 'Authorization': 'Bearer ' + accessToken }\n}). ",
    "johnpaulada": "@dmitrij-onoffapp Thank you! That worked great!. ",
    "m1m6": "Same issue here with delete request\n. I've added OPTIONS to Access-Control-Allow-Headers, and it works well :D \n. ",
    "codebling": "@Khaledgarbaya still an issue. \naxios.put(url, {headers: headers, params: params}) //headers are not sent \nThanks @dmitrij-onoffapp for providing the workaround\naxios({method: 'put', url: url, headers: headers, params: params}) //headers are sent\nTested on Axios 0.18.0. @Khaledgarbaya still an issue. \naxios.put(url, {headers: headers, params: params}) //headers are not sent \nThanks @dmitrij-onoffapp for providing the workaround\naxios({method: 'put', url: url, headers: headers, params: params}) //headers are sent\nTested on Axios 0.18.0. @RickVM this is not the same issue that most people are experiencing. See below.\n@anoop-kk @roynes have you tried the workaround outlined in the comments above? (reproduced below for convenience)\nReposting workaround for those still having issues with Authorization header not appearing despite being set. Thanks dmitrij-onoffapp for providing the workaround\naxios.put(url, {headers: headers, params: params}) //'authorization' header not sent\naxios({method: 'put', url: url, headers: headers, params: params}) //'authorization' header sent\n(previously tested on Axios 0.18.0)\n. @RickVM this is not the same issue that most people are experiencing. See below.\n@anoop-kk @roynes have you tried the workaround outlined in the comments above? (reproduced below for convenience)\nReposting workaround for those still having issues with Authorization header not appearing despite being set. Thanks dmitrij-onoffapp for providing the workaround\naxios.put(url, {headers: headers, params: params}) //'authorization' header not sent\naxios({method: 'put', url: url, headers: headers, params: params}) //'authorization' header sent\n(previously tested on Axios 0.18.0)\n. @SubashManian please read the comment above yours for the solution.. @SubashManian please read the comment above yours for the solution.. ",
    "EvsWorld": "Works like this as well:\nconst authString = 'Bearer '.concat(AccessToken);\nrequestData = {\n                'DeviceId':  dataStuff,\n                'ParameterId': moreData\n            }\nconst variableIdResponse = await axios({\n                method: 'post',\n                url: variableIdURL,\n                data: requestData,  \n                headers: { 'Authorization': authString }\n            });. ",
    "jsve": "I'm having the same experience with setting headers. Headers are set when using \n\naxios({method: 'post' ...\n\nbut not when using\n\naxios.post({ .... \n",
    "roynes": "I also have some issues, \nafter I received the JWT token. \nthen I set using axios.defaults.headers.common[\"Authorization\"] = 'Bearer '+ constants.token;\nbut after I try to axios.post('api/logout') it returns an error. and it turns out that the Authorization Header is not there.\nIs there any way that I made it wrong? Or do I have to just add the Auth header every now and then?. ",
    "nvsx": "Only one remark to the client/server aspect: \nA possible factor for a missing \"Authenticaton\" header from axios \nmay in fact be the CORS headers sent by the server. \nThe server only sets the headers and does nothing more.\nIt depends on the client implementation how the client reacts to them. \nSo in order to not swallow, but actually send the \u201cAuthentication\u201d-header, \naxios looks, if the server sends the right \u201cAllow\u201d-Headers in it's response.\ne.g. a not sufficient CORS header on server side would be:\nAccess-Control-Allow-Headers: \"Origin, X-Requested-With, Content-Type, Accept\u201d\n(note: the word \"Authorization\" is missing here!)\nThe server needs to explicitly allow the \u201cAuthorization\u201d header lke so: \nAccess-Control-Allow-Headers: \"Origin, X-Requested-With, Content-Type, Accept, Authorization\u201d\nSo the full CORS headers could look something like this:\nAccess-Control-Allow-Origin: \"*\"\nAccess-Control-Allow-Methods: \"DELETE, GET, OPTIONS, PATCH, POST, PUT\"\nAccess-Control-Allow-Headers: \"Origin, X-Requested-With, Content-Type, Accept, Authorization\u201d\nIf \u201cAuthorization\u201d is missing in the header on the server side, \nthen axios already detects this in its \u201cpreflight\u201d request and then \ndoes not send the authorizaton header at all. \nOther clients may have different implementations and do not correctly listen \nto the CORS-headers sent from the server. They then just send everything \nincluding the authorization header without regards to what the server tells \nthem. (In other words: they are not working correctly.)\nSo then it might look, like axios is wrong. But in fact it really isn\u2019t \ud83d\ude09\n. Only one remark to the client/server aspect: \nA possible factor for a missing \"Authenticaton\" header from axios \nmay in fact be the CORS headers sent by the server. \nThe server only sets the headers and does nothing more.\nIt depends on the client implementation how the client reacts to them. \nSo in order to not swallow, but actually send the \u201cAuthentication\u201d-header, \naxios looks, if the server sends the right \u201cAllow\u201d-Headers in it's response.\ne.g. a not sufficient CORS header on server side would be:\nAccess-Control-Allow-Headers: \"Origin, X-Requested-With, Content-Type, Accept\u201d\n(note: the word \"Authorization\" is missing here!)\nThe server needs to explicitly allow the \u201cAuthorization\u201d header lke so: \nAccess-Control-Allow-Headers: \"Origin, X-Requested-With, Content-Type, Accept, Authorization\u201d\nSo the full CORS headers could look something like this:\nAccess-Control-Allow-Origin: \"*\"\nAccess-Control-Allow-Methods: \"DELETE, GET, OPTIONS, PATCH, POST, PUT\"\nAccess-Control-Allow-Headers: \"Origin, X-Requested-With, Content-Type, Accept, Authorization\u201d\nIf \u201cAuthorization\u201d is missing in the header on the server side, \nthen axios already detects this in its \u201cpreflight\u201d request and then \ndoes not send the authorizaton header at all. \nOther clients may have different implementations and do not correctly listen \nto the CORS-headers sent from the server. They then just send everything \nincluding the authorization header without regards to what the server tells \nthem. (In other words: they are not working correctly.)\nSo then it might look, like axios is wrong. But in fact it really isn\u2019t \ud83d\ude09\n. ",
    "ndtreviv": "This problem still exists. The solution is as per @jsve mentioned.\nIs there a plan to actually fix it, or not?\nIn my case it's definitely NOT a CORS issue. And axios is clearly wrong if it works with one method of usage and not with another.. ",
    "LukaszWiktor": "@Khaledgarbaya that was it! I copy and pasted axios.post(url, {}, headers) and changed it to axios.get, but GET is not supposed to send payload. I got rid of the empty payload object and now axios.get(url, headers) works fine for me.. @Khaledgarbaya that was it! I copy and pasted axios.post(url, {}, headers) and changed it to axios.get, but GET is not supposed to send payload. I got rid of the empty payload object and now axios.get(url, headers) works fine for me.. ",
    "anoop-kk": "Hi all , \nthis problem is still existing , \nI am using React + Express + Axios \nMy CORS in server is added below \napp.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", clientURL);\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization\");\n  res.header(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\");\n  // res.header(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE\");\n  next();\n});\n=================================== react app - client side ========================\n var config = {\n      headers: {\n        'Authorization': 'Basic YXBwbGljYXRpb246c2VjcmV0',\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    }\n    // Axios.defaults.headers.common['Authorization'] = 'Basic YXBwbGljYXRpb246c2VjcmV0';\n    // Axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n    // Axios.defaults.headers.common['Authorization'] = \"Basic YXBwbGljYXRpb246c2VjcmV0\"\n    Axios.post('/oauth/token', params, config).then((response) => {\n  if (response.status === 200) {\n   alert(\"request reached in server\");\n}\n).catch((error) => {\n  console.log(error);\n alert.error('Oops some error occured please check the data you have submitted');\n});\n\n============================== End React side =================================\n\nNote : if i remove the Authorization header request header will set properly \nQuick response will be appreciated almost spend a day with this \nThanks in advance \n-anoop . ",
    "RickVM": "\n@dmitrij-onoffapp get fundtion does not accept data object\n```js\nvar config = {\n    headers: { 'Authorization': 'Bearer ksdjfglksgflksgsjdhglaslfkhgasf' }\n}\nreturn axios.get(url, config)\n```\n\nThis was the trick. I was setting the data object, thinking the api would be the same as for post requests..\nGuess its not a bug but rather bad interpretation/reading of the api.. ",
    "SubashManian": "in my code Authorization is not sending. I get the response status 403. attach my code\nvar data =new FormData()\ndata.append('userId',this.state.UserID);\ndata.append('new_password',this.state.password);\ndata.append('confirm_password',this.state.confirm_password); \nvar config = {\n    headers:{'Authorization':this.state.UserToken}\n}\nAxios.post(baseURL,data,config)\n.then((response)=>{\n    console.log(response)\n}).catch((error)=>{\n    console.log(error)\n}). > @SubashManian please read the comment above yours for the solution.\nI tried that too.\nAuthorization is not sent on that method for me. response status:403 for me. In my code Authorization Header is not Working \nvar data = new FormData() \n    data.append(\"userId\",'833')\n    data.append(\"newPassword\",\"zxcvbnm\")\n    data.append(\"confirmPassword\",\"zxcvbnm\")\n    axios.post('url',data,{\n      headers:{\n        Authorization:\"lGzKd4TJqN\",\n      },\n    }).then((res)=>{\n      console.log(res)\n    }).catch((err)=>{\n      console.log(err)\n    }). ",
    "arshbhatti8": "@SubashManian  +1. I tried doing the solution suggested. It doesn't work for me as well.\n. ",
    "apearson": "@XOneto9 I'm not sure this is the place to be asking this question.  If you shoot me an email (email in my profile) I'll try and answer your questions.. ",
    "haies": "It not axios problem!. ",
    "Sphinxs": "What was the error and the solution ?. The same issue, I receive POST /user/login 401 (UNAUTHORIZED) because the password is wrong, but in my case I want to hidden this message on console.. Some update ?. ",
    "howareyouo": "try this:\n/**\n * create vue-resource's resource like object\n *\n * Default Actions\n *   get: {method: 'GET'}\n *   save: {method: 'POST'}\n *   query: {method: 'GET'}\n *   update: {method: 'PUT'}\n *   delete: {method: 'DELETE'}\n *\n * @param path the resource path\n * @param http axios instance\n * @param actions custom actions\n * @returns the resource object\n */\nfunction resource (path, http, actions) {\n  var obj = {\n    get: id => http.get(path + '/' + id),\n    save: obj => http.post(path, obj),\n    query: params => http.get(path, {params}),\n    update: (id, obj) => http.put(path + '/' + id, obj),\n    delete: id => http.delete(path + '/' + id)\n  }\n  return Object.assign(obj, actions)\n}\nthen :\nconst post = resource('/posts', axiosInstance, {\n    paging: (params) => axiosInstance.get('/posts', {\n        params\n    })\n})\nand here you go:\npost.get(1)\npost.delete(1)\npost.update(1, obj)\npost.paging({\n    name: 'blablabla',\n    pageno: 1,\n    ....\n}). ",
    "tiagomatosweb": "Yeah! I am doing something similar to this but not too complex.\nI wonder if there is a native way to do it?\nTks @howareyouo . ",
    "emileber": "\nkeep Axios not too opinionated\n\nI like that way of thinking, and that's why I made a package that helps define REST resources which are easy to test and reuse: \n:link: axios-resource. > keep Axios not too opinionated\nI like that way of thinking, and that's why I made a package that helps define REST resources which are easy to test and reuse: \n:link: axios-resource. ",
    "elowes": "Same problem, Axios expose response headers doesn't contain Cache-Control .. ",
    "pranay-91": "I misunderstood the concept of CORS. Access-Control-Expose-Headers is a response header issued by the service.\nThis issue has nothing to do with axios. \nThe service should allow Content-Disposition header to be exposed for the client, in my case it does.\nDue to HTTP access control CORS in browsers, the client application needs a proxy cors (in my case an express middleware) to read the header value.\nApologies for misunderstanding. \nfurther explanation on this stackoverflow question. ",
    "emkman": "We often use data with GET requests on the server and they are translated to query params. The lack of data support on certain methods is a big downside for axios in my hopes of more isomorphic code.. ",
    "huangche007": "Thanks, Here I found this answer. ",
    "namila007": "please add  this comment to the docs . ",
    "sprlwrksAprilmintacpineda": "It's on the docs https://github.com/axios/axios#request-method-aliases. It's on the docs https://github.com/axios/axios#request-method-aliases. how about https://www.npmjs.com/package/promise-polyfill?. how about https://www.npmjs.com/package/promise-polyfill?. hmmm, I'm not sure if this is a good decision, I mean for our case, we have users who stick with IE (we don't really control them, they are somewhere else around the world).\nI think it'll be better to separate the IE support on a different module, so if others would need it, then we just have to install that module and plug it as a plugin or adapter.. hmmm, I'm not sure if this is a good decision, I mean for our case, we have users who stick with IE (we don't really control them, they are somewhere else around the world).\nI think it'll be better to separate the IE support on a different module, so if others would need it, then we just have to install that module and plug it as a plugin or adapter.. @skbolton I don't want the caller to throw, I actually want them to be somehow unaware of what happened, as if it was a normal call that proceeded normally except it wasn't sent, they should not even be aware that it was not sent. I want to do this to have a customized caching feature on the app that we are working on.. @skbolton I don't want the caller to throw, I actually want them to be somehow unaware of what happened, as if it was a normal call that proceeded normally except it wasn't sent, they should not even be aware that it was not sent. I want to do this to have a customized caching feature on the app that we are working on.. @skbolton Yeah that's what I did for now. Though I'm hoping for a more axios related feature so I don't have to call a custom function. I just need to call axios[method] anywhere I want, then I could put the cache layer on the interceptor. That'll be better.. @skbolton Yeah that's what I did for now. Though I'm hoping for a more axios related feature so I don't have to call a custom function. I just need to call axios[method] anywhere I want, then I could put the cache layer on the interceptor. That'll be better.. @OpenGG thanks for the tip! I'll try to see if I can make one and maybe publish it to npm for future uses and others who might need similar requirement.. @OpenGG thanks for the tip! I'll try to see if I can make one and maybe publish it to npm for future uses and others who might need similar requirement.. so what's the problem?. have you tried\n```jsx\nimport Axios from 'axios';\nconst token;\nconst videos_list = async ({ state, commit }, type) => {\n  if (token.videos) {\n    // token.videos variabla getting other js file object parameters . \n    token.videos.cancel()\n  } else {\n    token.videos = Axios.CancelToken.source()\n  }\nconst REQUEST = await axios.post(${state.url}, {\n    params: [1,2,3]\n  }, {\n    cancelToken: token.videos.token\n  });\n}\n```. nvm ---> https://github.com/AdonisLau/axios-jsonp. ",
    "gomezmark": "what is the difference between these two? \nthis.$axios.$delete(queryData.url,\n        {\n          params: { id: String(queryData.id) }\n        })\nthis.$axios.$delete(queryData.url,\n        {\n          body: { id: String(queryData.id) }\n        })\n[params] worked on my side. @adibkadir have you resolve your issue?\nthanks. @adibkadir have you resolve your issue?\nthanks. @nilobarp \nHow did you solve this?\nEx. im working on a localhost the im using IE.\nTIA. ",
    "boxsnake": "I found a way, it seems work, but the code seems messy and hard to read. My strategy is to use .then().catch() to make pending Promises, then put these pending Promises into all parameters. i.e. (assuming I has an Array called list)\nPre ES6-Style\njs\naxios.all(list.map(function(url) {\n    return axios.get(url).then(function(content) {\n        console.log(content.data);\n    }).catch(function(error) {\n        console.error(error);\n    });\n})).then(function() {\n    console.log('All Done.');\n});\nES6-Style\njs\naxios.all(list.map(url => {\n    return axios.get(url).then(content => {\n        console.log(content.data);\n    }).catch(error => {\n        console.error(error);\n    });\n})).then(_ => {\n    console.log('All Done.');\n});\nSince the example is quite simple, the code is nicely-formatted and easy-to-read. When if the structure goes with a huge bunch of logical steps, it may come messy. Thus, I suggest to have a helper for \"partial dismiss\" spreading.. ",
    "davscro": "hey @nickuraltsev, #887 is not fixing this issue. . hey @nickuraltsev, #887 is not fixing this issue. . ",
    "phillip-haydon": "I can't get it to cancel any request.... ",
    "ben-styling": "I found this SO post\nSo try adding the cancel token in the config\nconfig = {\n      cancelToken: source.token, etc\n};. ",
    "vedran-milic": "@GoldenRust I will try this. Thanks.. ",
    "pschlump": "This makes it impossible to get data from google.com and facebook because they prefix responces with while(1); or for(;;); and you need the \"text\" version of the data so that you can pre-process it.. ",
    "drew-r": "It seems still uses JSON.parse or something.\nI am getting typeof response.data === 'number' for a response of '1702'\n. ",
    "kestereverts": "Is there any progess on this issue? I was just caught out by this bug. I expected that responseType: 'text' would stop automatic JSON parsing.. ",
    "blacksonic": "Is it possible to override the default transformResponse method?. ",
    "punksta": "This is critical in case of validating json scheme before parsing or stream parsing.. This is critical in case of validating json scheme before parsing or stream parsing.. can be solved by passing \ntransformResponse: undefined\nto axios or request configs. can be solved by passing \ntransformResponse: undefined\nto axios or request configs. This is very important pl. Documentation says withCredionals is false by default, but not for react-native. . ",
    "OzqurYalcin": "can be solved by using arraybuffer as responseType\njs\naxios.get('./test.txt', { responseType: 'arraybuffer' }).then(response => {\n    var buffer = new Buffer(response.data, 'binary');\n    var textdata = buffer.toString(); // for string\n    console.log(textdata);\n    var jsondata = buffer.toJSON(); // for json\n    console.log(jsondata);\n});. ",
    "TwinProduction": "@OzqurYalcin that returns [object ArrayBuffer] instead of the original [object Object], which isn't really much help. \nIn my case, I needed the responseType to be text so that the indentation could be preserved when fetching raw code (e.g. https://raw.githubusercontent.com/TwinProduction/show-my-ip/master/manifest.json), but it didn't work when the real response type was JSON due to Axios' automatic JSON parsing.\nHowever, @punksta's solution of setting transformResponse to undefined fixed the issue.. ",
    "sky0014": "Hope fix this issue soon.. ",
    "hojas": "+1. ",
    "YJBeetle": "response.request.response is text. ",
    "zozoh": "@kvillaniholland  I use transformResponse : undefined to escape the auto json converting as @punksta commented above. And I am waiting this issue can be close also ^_^. ",
    "dolsup": "I'm suffering under the same problem too.. It doesn't make sense.\n@rubennorte \ud83d\udd14 \nIs there any progress for it?. ",
    "Etheryte": "That feature should be in your preferred choice of Promise library, not in Axios. One example of a library that supports this is Bluebird, but there are many other options.. It's covered in the readme, but if you don't know to look for it, then yes, you'll run into the issue.. Having the same issue, the interceptor can essentially be boiled down to:\nts\nthis.instance.interceptors.response.use(response => response.data);\nDespite this, the return type of\nts\nthis.instance.post<string>(...);\nis AxiosPromise<string>, which expects the data to be wrapped.. Sorry, but I don't agree with your premise, at least not functionality-wise.\nWithout using the interceptor to unwrap the data property, I would have to do\nts\nthis.instance.post<string>(...).then(response => response.data);\nthis.instance.get<number>(...).then(response => response.data);\nin every endpoint that I define. What's the point in all that code repetition?  \nWhenever a request is successful, which having a then means, I don't really care about the response code etc. I only care about response codes if something didn't work, and that's what error handlers are there for, both on the interceptor as well as on specific endpoints.\nts\nthis.instance.interceptors.response.use(response => {\n  // Everything went well, pass only relevant data through\n  return response.data;\n}, error => {\n  // Something went wrong, figure out how to handle it here or in a `.catch` somewhere down the pipe\n});. I don't see where you got the notion that everyone should be doing things the way I do them in one project. I'm simply trying to solve a problem of how to automatically unwrap data on every request and given that this issue was here before me, I'm not the only one with that problem.  \nInterceptors seem like the correct place to do it, both by their name and their description in the readme (do something with every response). Handling 204 vs 200 etc and then passing the data would also make sense in an interceptor because then you get to do it in one central place.\nIn my opinion, the intuitive solution would be to return what ever you want from the interceptor, not have the library force a single way.\nIf you want to transform some fields in data:\nts\nthis.instance.interceptors.response.use(response => {\n  response.data.foo = JSON.parse(response.data.bar);\n  return response;\n});\nIf you want to just unwrap Axios' data:\nts\nthis.instance.interceptors.response.use(response => response.data);\nThis would leave the choice of what to do to the developer, which in my opinion is better than a very strongly opinionated interceptor. You're free to disagree, of course.. The thing is, both of the above examples I made already work the way I described, functionality wise, it is just the types that are wrong. If returning anything else than the (modified) response in the interceptor is wrong, I think it would be good to update the expected types there.. Perhaps a better wording would be what are the issues that need to be resolved before a release and is there a place to track it? Since there seems to be a lot of interest, spreading the work out and having a clear understanding of the required work could help speed things up.. Perhaps a better wording would be what are the issues that need to be resolved before a release and is there a place to track it? Since there seems to be a lot of interest, spreading the work out and having a clear understanding of the required work could help speed things up.. ",
    "Bram-Zijp": "@Etheryte It also states that the plugin works with IE8+ If you know Promise is not supported in IE11 and the like you are save. However not everyone is aware of this. I feel like this should be noted near the IE8+ supported icon.. ",
    "luciy": "add test. add test. Resubmit the PR at https://github.com/mzabriskie/axios/pull/930. Resubmit the PR at https://github.com/mzabriskie/axios/pull/930. ",
    "igorsechyn": "It also applies to transformRequest parameter as well. I have been bitten by this bug too now. I am using axios version 0.16.2. This has been an issue for me as well. In my case, I am using axios to make requests from a cli to an external server. If that server is down, i.e. there is no response but ECONNREFUSED error instead, the cli will not exit until the timeout is expired. Would be awesome, if this could be merged. . ",
    "ofirgeller": "@rubennorte \nThat can be done simply by changing the code to \nmethod?: 'get'|'delete'|'head'|'post'|'put'|'patch'|'GET'|'DELETE'|'HEAD'|'POST'|'PUT'|'PATCH';\nThat would still be an improvement for the user (no errors due to misspelling).\nI do think that it would be less nice for auto complete and I personally don't like to create two ways of doing the same thing but sure. \u00af_(\u30c4)_/\u00af\n. @nickuraltsev \nI see your point, but this is an edge case and the user can always cast to any to get around the type.\nconfig.method = 'PURGE' as any;\nAlso If it's not an edge case because a none standard method is common in the real world we can include it in the type.. ",
    "leoskyrocker": "You're probably running into the same issue as this. ",
    "Meg4mi": "Same problem here.\nAny news ?. ",
    "kunokdev": "My problem was not related to proxies tho, I had to send GET request to https domain which wasn't certified. In curl inside linux terminal, solution was to use -k or --insecure flag. I couldn't find Axios solution tho, but with request lib I done it like so; might give you idea:\n```\nconst agentOptions = {\n    host: '10.100.0.10',\n    port: '443',\n    path: '/',\n    rejectUnauthorized: false,\n  }\nconst agent = new https.Agent(agentOptions)\nrequest({\n      url: 'https://10.100.0.10/myUncertifiedTargetUrl',\n      method: 'GET',\n      agent,\n    }, (err, resp, body) => {\n...\n```. ",
    "mistermoe": "Feel free to use this until they get #959 merged.. ",
    "PedramMarandi": "Same here, btw @mistermoe's PR works fine . ",
    "sneko": "@mistermoe I just left work without making it succeeded :(\nI use this package : https://github.com/Yoctol/messaging-apis/tree/master/packages/messaging-api-messenger\nAnd if I replace \"axios\" by yours, the following error disappears:\n\"Error: write EPROTO 139800246822688:error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol:../deps/openssl/openssl/ssl/s23_clnt.c:794\"\nBut I have something like:\n\"Error: getaddrinfo EAI_AGAIN\"\nI notice that the Messenger plugin makes requests like that:\n`\nlet client = axios.create({ ... });\nclient.get('...')\n`\nDid you succeed by this way or not directly by Axios \"request\" function?\nThanks!\nEDIT: Another one having this issue:\nhttps://github.com/axios/axios/pull/959#issuecomment-337595602\n. @mrchief it seems it could help:\n1159.",
    "cur3n4": "Any chance of merging this? Could we leverage the newly added config.transport to avoid this issue?. ",
    "jan-molak": "Had a similar issue recently, my solution was to use an HTTPS-over-HTTP tunnel, specify port 443 explicitly in the URL and disable automatic proxy detection in axios:\n```typescript\nimport axios, { AxiosInstance } from 'axios';\nimport * as tunnel from 'tunnel';\nconst tunnel = tunnel.httpsOverHttp({\n    proxy: {\n        host: 'proxy.mycorp.com',\n        port: 8000,\n    },\n});\nconst httpClient: AxiosInstance = axios.create({\n    baseURL: 'https://some.api.com:443',\n    httpsAgent: tunnel,\n    proxy: false,\n});\n```\nMore about the solution in this article.\nHope this helps,\nJan. Had a similar issue recently, my solution was to use an HTTPS-over-HTTP tunnel, specify port 443 explicitly in the URL and disable automatic proxy detection in axios:\n```typescript\nimport axios, { AxiosInstance } from 'axios';\nimport * as tunnel from 'tunnel';\nconst tunnel = tunnel.httpsOverHttp({\n    proxy: {\n        host: 'proxy.mycorp.com',\n        port: 8000,\n    },\n});\nconst httpClient: AxiosInstance = axios.create({\n    baseURL: 'https://some.api.com:443',\n    httpsAgent: tunnel,\n    proxy: false,\n});\n```\nMore about the solution in this article.\nHope this helps,\nJan. ",
    "Sitronik": "@jan-molak My fix is easy to use:\n1. npm install axios-https-proxy-fix\n2. Then\n```javascript \nimport axios from 'axios-https-proxy-fix'; \nconst proxy = {\n  host: 'some_ip',\n  port: some_port_number,\n  auth: {\n    username: 'some_login',\n    password: 'some_pass'\n  }\n};\nasync someMethod() {\n  const result = await axios.get('some_https_link', {proxy});\n}\n```. @necevil \nhost: '192.0.01'. Unfortunately, this pull request doesn't merged, but I fixed this issue too https://github.com/Sitronik/axios . @prokopsimek How do you tried to use this package? With password and username for proxy or without?. @prokopsimek Can you show me the code you are using?. ",
    "Alexis374": "@jan-molak  @Sitronik   I tried your solution but get Error: socket hang up.\nWhat I want is see how the request go through charles,so I open charles,and set proxy to {host:'127.0.0.1',port:8888} in my code. I don't know whether it is suitable to use your solution. @jan-molak  @Sitronik   I tried your solution but get Error: socket hang up.\nWhat I want is see how the request go through charles,so I open charles,and set proxy to {host:'127.0.0.1',port:8888} in my code. I don't know whether it is suitable to use your solution. ",
    "astappiev": "@emilyemorehouse, do you have any estimation when it will be released?\nThe PR #959 solve critical part of the issue, other issues like proxying redirections and so can be improved later. The changes in #959 are pretty simple and can be published in just few minutes.. ",
    "anhnt": "@Sitronik that works for me thanks. ",
    "necevil": "@jan-molak 's fix saved my day.\n+1 to merging the PR.. +1 Still using work arounds mentioned above but would love to see this work out of the box.. @Khaledgarbaya I am still having this issue with 0.19.0-beta.1\nMy question is what should my proxy request look like (and how does the isHttps flag work?).\nI assumed that for HTTPS over HTTP I would simple set the http url / port for the proxy like this:\naxiosRequestOptions.proxy = {\n            host: '192.0.01',\n            port: '8888',\n            // isHttps: true, ?\n        }\nThat being said the above still fails so I am wondering if it is a configuration / documentation issue where my structuring of the proxy property / object is the cause. . @zcei I am about to test the changes to proxying in 0.19.0 and I am curious what the final format would be for a connection running HTTPS over HTTP?\nI am assuming just setting the proxy as normal pointed at the http proxy IP?\nproxy: {\n      host: '192.0.0.1',\n      port: 8888,\n    }\nI read through the above conversations and I am not totally sure when the isHttps flag would be set to true vs when it would be left 'false' (which is the default). ",
    "SrWildman": "Another +1 to merging this!!. ",
    "prokopsimek": "Same issue... please merge!. @Sitronik With username and password.. @Sitronik I'm sorry, it's too late to remember the piece of code. I know that I use this workaround: https://github.com/axios/axios/issues/925#issuecomment-359982190 and it works.\nI guess I tried something like this:\nconst req = await axios({\n  url: 'https://somedomain.com',\n  proxy: {\n    host: '89.151.146.7',\n    port: 6060,\n    auth: {\n      username: 'myname',\n      password: 'mypass',\n    },\n  },\n});\nref.: https://github.com/axios/axios/issues/925#issue-232289309\n...with reference to your master branch with this fix.. ",
    "camueller": "@Sitronik that works for me thanks - please merge!\nHowever the proxy settings does not seem to be read from environment variables (http_proxy / https_proxy) but have to be specified as part of AxiosRequestConfig.. ",
    "fractalzombie": "+1 When you fix this? But we need no_proxy too.... +1. I think if it is implemented, it will be more practical and clearer than using .. ",
    "Makoehle": "@Sitronik please add PR. Your package axios-https-proxy-fix works just fine. axios.defaults.proxy = {host: ip, port: port}. @Sitronik please add PR. Your package axios-https-proxy-fix works just fine. axios.defaults.proxy = {host: ip, port: port}. > would use that package but its many commits behind?\nSame for me while waiting for that change I'm going for node-fetch + httpsProxyAgent + bluebird. Works fine.. > would use that package but its many commits behind?\nSame for me while waiting for that change I'm going for node-fetch + httpsProxyAgent + bluebird. Works fine.. Thank you I know about env variables. I tried everything. My guess is it has to do with #1207 . Thank you I know about env variables. I tried everything. My guess is it has to do with #1207 . ",
    "m2jobe": "Still an issue, would use that package but its many commits behind? Would that be a non issue :S . @Makoehle  \nHey I ended up getting it to work, try export http and https to \"\" on your terminal\nexport http_proxy=\"\" && export https_proxy=\"\". ",
    "lderzhavets": "Waiting for merge too. Why it is so long?. Waiting for merge too. Why it is so long?. ",
    "czl032405": "I can not solve it out in 0.19.0-beta.1, but  I fixed like this \n```\n// default axios usage\nimport * as ProxyAgent from \"proxy-agent\";\nconst proxyAgent = new ProxyAgent(process.env.HTTPS_PROXY);  // http://127.0.0.1:1080\nAxios.defaults.httpsAgent = proxyAgent;\nAxios.defaults.proxy = false;\n// google api usage\nconst Sheets = google.sheets({\n    version: \"v4\",\n    auth: key,\n    httpsAgent: /dev/.test(process.env.NODE_ENV) ? proxyAgent : false,\n    proxy: false\n});\n```. ",
    "bidhan-a": "The 0.19.0-beta.1 still does not work. I kept getting Request failed with status code 400. Wasted a lot of time on this. Switched to the request library and it worked like a charm on the first try.. ",
    "mikkqu": "Ran into the same problem.\nconst axios = require('axios-https-proxy-fix')\nfixed the problem for me.. ",
    "mrodrig": "After updating to 0.18.0 this seems to be working for me. I had to specify the following options for my use case though:\njavascript\naxios.get('<some_url_on_corporate_intranet>', {\n        proxy: false,\n        httpsAgent: https.Agent({\n            rejectUnauthorized: false // Allows the use of self-signed certificates (not recommended)\n    }). ",
    "redbearder": "tried all solution and all failed base on axios 0.18\nfinal solution :\ninstall nginx module ngx_http_proxy_connect_module\nthen request https url via http proxy with request-promise. tried all solution and all failed base on axios 0.18\nfinal solution :\ninstall nginx module ngx_http_proxy_connect_module\nthen request https url via http proxy with request-promise. > You don\u2019t need Nginx if you\u2019re using request. Request handled proxies fine. - Anthony\n\n\u2026\nOn Jan 17, 2019, at 8:44 PM, redbearder @.***> wrote: tried all solution and all failed base on axios 0.18 final solution : install nginx module ngx_http_proxy_connect_module then request https url via http proxy with request-promise \u2014 You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub, or mute the thread.\n\nThank you for reply\nI assume that people will send requests via single IP address as proxy gateway, that is what I will do\nHowever request-promise catch a error \"RequestError: Error: tunneling socket could not be established, code 400\"\nso I dont find solution from Node and then I try to fix it from Gateway side\nand the solution comes out above. > You don\u2019t need Nginx if you\u2019re using request. Request handled proxies fine. - Anthony\n\n\u2026\nOn Jan 17, 2019, at 8:44 PM, redbearder @.***> wrote: tried all solution and all failed base on axios 0.18 final solution : install nginx module ngx_http_proxy_connect_module then request https url via http proxy with request-promise \u2014 You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub, or mute the thread.\n\nThank you for reply\nI assume that people will send requests via single IP address as proxy gateway, that is what I will do\nHowever request-promise catch a error \"RequestError: Error: tunneling socket could not be established, code 400\"\nso I dont find solution from Node and then I try to fix it from Gateway side\nand the solution comes out above. ",
    "micooz": "Did you use axios in Node.js? I think this is because you set username to null which seems invalid to Node.js implementation.\nhttp.js#L52\nhttp.js#L82\nhttp.js#L131\n. ",
    "kiwo12345": "@micooz No I am calling an API that is based on Laravel. Though I am setting username to null in both examples but only the second one works which is strange. ",
    "lewisdiamond": "I'm seeing the same thing in nodejs without setting the username to null. The auth part is just dropped when using axios.post/put. I'm seeing the same thing in nodejs without setting the username to null. The auth part is just dropped when using axios.post/put. ",
    "jeimz143": "i think i have the same problem here :( \nvar config = {\n        //   url:'/api/user',\n        // method:'patch',\n        headers: {\n                    'Authorization': state.token.token_type+' ' + state.token.access_token,\n                    'Accept' : 'application/json',\n                    'Content-Type' : 'application/x-www-form-urlencoded',\n                 },\n       data:state.user,\n      //  params:{\n      //     user:state.user._id\n      //  },\n      };\n      Axios.patch(apipath + url, config)\n            .then((response) => Promise.resolve(response))\n            .catch((error) => Promise.reject(error));\nbut it returns 401 unauthorize. in POST method it works fine but when it comes to put/patch it returns err 401... @huangche007  can you post your solution sir? i am having the same error :) thanks. ",
    "wonder95": "I am dealing with a similar issue using GET.  I'm working with a Solr server, and prior to adding basic HTTP authentication, everything worked fine, including the Access-Control-Allow-Origin header (which I've verified is still set. My original code was\naxios.get('https://my-solr-url.com/solr/my-solr-index/select', {\n    params: params,\n    withCredentials: true,\n    auth: {\n      username: 'myusername',\n      password: 'mypassword'\n    }\n  })\nbut I always get a 401 error. If I vary the format like so\n  axios.get({\n    url: 'https://my-solr-url.com/solr/my-solr-index/select',\n    params: params,\n    auth: {\n      username: 'myusername',\n      password: 'mypassword'\n    }\n  })\n\nI get a different error\nGET http://localhost:8080/[object%20Object] 404 (Not Found)\nAs with above, I can query using the exact same credentials in Postman, from PHP, and in a browser. the only problem is when I use Axios.. ",
    "marianagarciaferreira": "Same problem!. ",
    "ChristophAnastasiades": "The config object should be the third parameter of the get method (see https://github.com/axios/axios#instance-methods). Try this instead:\njavascript\naxios.get('https://my-solr-url.com/solr/my-solr-index/select', {}, {\n    params: params,\n    withCredentials: true,\n    auth: {\n      username: 'myusername',\n      password: 'mypassword'\n    }\n  }). ",
    "Marian0": "\nThe config object should be the third parameter of the get method (see https://github.com/axios/axios#instance-methods). Try this instead:\njs\naxios.get('https://my-solr-url.com/solr/my-solr-index/select', {}, {\n    params: params,\n    withCredentials: true,\n    auth: {\n      username: 'myusername',\n      password: 'mypassword'\n    }\n  })\n\nUse instead:\naxios.get('https://my-solr-url.com/solr/my-solr-index/select', {\n    params: params,\n    withCredentials: true,\n    auth: {\n      username: 'myusername',\n      password: 'mypassword'\n    }\n  })\naxios.get parameters should use two parameters only. At least on version 0.18.*. > The config object should be the third parameter of the get method (see https://github.com/axios/axios#instance-methods). Try this instead:\n\njs\naxios.get('https://my-solr-url.com/solr/my-solr-index/select', {}, {\n    params: params,\n    withCredentials: true,\n    auth: {\n      username: 'myusername',\n      password: 'mypassword'\n    }\n  })\n\nUse instead:\naxios.get('https://my-solr-url.com/solr/my-solr-index/select', {\n    params: params,\n    withCredentials: true,\n    auth: {\n      username: 'myusername',\n      password: 'mypassword'\n    }\n  })\naxios.get parameters should use two parameters only. At least on version 0.18.*. ",
    "sen0rxol0": "is not only in node, it doesn't seem to be working on the browser either. ",
    "hielfx": "I am using the version v0.15.3 and it's working there. Also I am using Ubuntu 16.04, Node v6.9.1 and Chrome 58.0.3029.110 (64-bit), in case you  want to try it on those versions. ",
    "dobeerman": "@rubennorte seems it not works in the browser. I gets total: 0 in the properties.. I'm trying to run this code in the browser:\n```js\n    const instance = axios.create({\n      baseURL: 'https://cors-anywhere.herokuapp.com/http://www.cbr.ru/scripts/XML_dynamic.asp',\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\ntry {\n  const xmlData = await instance({\n    method: 'get',\n    params: {\n      date_req1: `01/01/16`,\n      date_req2: `31/12/18`,\n      VAL_NM_RQ: 'R01235',\n    },\n    onDownloadProgress: function(progressEvent) {\n      console.log('download', progressEvent);\n    },\n  }).then(xmlString => xmlString);\n  console.log('xmlData', xmlData);\n\n```\nThe reason of zero may be in the heroku's middleware. It's just my opinion.. ",
    "athoscouto": "@rubennorte, any solution for file upload?. ",
    "alasdairhurst": "@nickuraltsev Maybe this should have been a major version bump. It broke a lot of my tests which asset that the method passed in is the same as the method in the result.data.config in the callback since CI picked up this version. . ",
    "DavidSvetlik": "Invalid, my bad :-(. Invalid, my bad :-(. ",
    "gugurete": "Yes, I have the same issue. It is critical enough to consider alternatives to axios. ",
    "freeman-g": "@jcready - thanks for the information.\nIn our case, requests flow from Client > Azure Authentication Service > Our app.  In the case of an expired session, the response back to the client comes from the Azure Auth service and I'm not controlling that server side config.  I guess this is a tradeoff of using a PaaS solution.  I think your suggestion would work if our server side app had the Auth layer in it, so we may have to move away from the PaaS solution and implement Auth directly in our app.. ",
    "johnnyodonnell": "\nBrowsers always follow redirects for XHRs or fetch() requests.\n\nDoes this mean the browser will always load the html into memory, but won't always go to that link and display the html? I'm confused because when I get a 302 response from an XHR request, the browser does not go to the redirected link and display the html. . ",
    "skbolton": "Why not have axios instance as part of your ApiService? Then you can change headers and config at any time?\n```\nclass ApiService {\n  constructor () {\n    this.axios = axios.create({\n      baseUrl: 'http://nodejs.org'\n    })\n  }\nlogin (username, password) {\n    this.axios.post('/login', { username, password })\n      .then(({ data }) => {\n        // now you can set headers for every other request\n        this.axios.defaults.headers.common['Authorization'] = data.token\n        return data\n      })\n  }\n}\n```\nThis example is kinda dumbed down and bad naming but hopefully it answers your question\n. This is a rough draft idea (I haven't tried this, also maybe others would have better ideas). You could add a cancellation token to the request config and then immediately cancel it? This means that whoever called it would throw and they could inspect to see if it was cancelled?\nhttps://www.npmjs.com/package/axios#cancellation. Gotcha. Well others might come up with something for you. I would say in your case maybe putting a cache layer before the axios call that either resolved with the cached value or calls axios api is best. ",
    "arashmanteghi": "@skbolton Yes, thanks :). ",
    "mmsmsy": "When using it I get \"config is undefined\". Where should I get it from?. ",
    "mmieluch": "@mmsmsy This line:\nreturn axios.request(config);\nshould be:\nreturn axios.request(error.config);. ",
    "remhume": "@skyrpex Thanks a lot! Your answer brought us on the right track on a long and complicated bug hunt! \nIt seems the default transformRequest handles transformation like in your example, but axios notices the data is a string and will set the content type to text/plain instead of application/json which lead in our case to our API sending back a 400 error.  \nThis was a hard bug to catch!. @skyrpex Thanks a lot! Your answer brought us on the right track on a long and complicated bug hunt! \nIt seems the default transformRequest handles transformation like in your example, but axios notices the data is a string and will set the content type to text/plain instead of application/json which lead in our case to our API sending back a 400 error.  \nThis was a hard bug to catch!. iirc we just manually set the content type to the correct one (in our case application/json), which solved it.. iirc we just manually set the content type to the correct one (in our case application/json), which solved it.. ",
    "NomiasSR": "remhume can you give me a hand? I'm having an issue with the same wrong behaviour that you had on your program.. Thanks for the answer man I've already found other solution to solve my\nissue. Regards\nOn Sat, Jul 28, 2018 at 6:19 PM, remmy hume notifications@github.com\nwrote:\n\niirc we just manually set the content type to the correct one (in our case\napplication/json), which solved it.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/axios/axios/issues/934#issuecomment-408638600, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AVqsr8akXZIWUoLgfSmk7X9f2FwLirA2ks5uLOONgaJpZM4Nu1Oc\n.\n. \n",
    "jmnote": "Good job! Thank you~. ",
    "srmelody": "Hi @Shafley This issue is likely caused by the DefinePlugin in webpack mangling an underlying transitive dependency of axios, the visionmedia/debug used by follow-redirects.  There is some information here that might help you work past this issue:\nhttps://github.com/webpack/webpack/issues/4000\nIf you build your webpack, you probably have code like this (this is for the node environment in https://github.com/visionmedia/debug/blob/master/src/node.js) :\nfunction save(namespaces) {\n  if (null == namespaces) {\n    // If you set a process.env field to null or undefined, it gets cast to the\n    // string 'null' or 'undefined'. Just delete instead.\n    delete false;\n  } else {\n    false = namespaces;\n  }\n} \nYou might also be able to solve this by using webpack's target to make sure you are targeting for the web.  Though from your comment, I think you are using the node (or some other non-web) target on purpose.  Good luck!. Hi @Shafley This issue is likely caused by the DefinePlugin in webpack mangling an underlying transitive dependency of axios, the visionmedia/debug used by follow-redirects.  There is some information here that might help you work past this issue:\nhttps://github.com/webpack/webpack/issues/4000\nIf you build your webpack, you probably have code like this (this is for the node environment in https://github.com/visionmedia/debug/blob/master/src/node.js) :\nfunction save(namespaces) {\n  if (null == namespaces) {\n    // If you set a process.env field to null or undefined, it gets cast to the\n    // string 'null' or 'undefined'. Just delete instead.\n    delete false;\n  } else {\n    false = namespaces;\n  }\n} \nYou might also be able to solve this by using webpack's target to make sure you are targeting for the web.  Though from your comment, I think you are using the node (or some other non-web) target on purpose.  Good luck!. ",
    "iggirex": "I changed the test script in package.json to \"test\": \"react-scripts test --env=node\" but it's still not working for me. Is there another place where this needs to be changed? (My project used create-react-app). ",
    "cwtuan": "jest  --env=node works for me.. ",
    "SidKwok": "I submit a PR to replace webpack with rollup.. @JustinBeckwith I will be happy to help, and may commit a PR in couple days.\nI see the major conflicting files are ./dist and package.json, should I overwrite the dist files in next commit?. ok, I will commit these changes after I read the guide.\nAnd I'm confusing about one thing in krama.conf.js, why var undefined?. ",
    "sheam": "When you access that URL with CURL you aren't making a CORS request, because you are directly polling the URL. You need to configure your server to allow CORS requests. . ",
    "rihannarickeminem": "@sheam i perform the request to third party service https://www.tumblr.com/docs/en/api/v1 not to my local server . ",
    "walleXD": "I am having a very similar issue when it comes box.com api. Fetch works:\nwindow.fetch('https://api.box.com/oauth2/token', {\n      method: 'POST',\n      body: `grant_type=${'authorization_code'}&code=${token}&client_id=${clientId}&client_secret=${clientSecret}`,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n      }\n    }).then(response => console.log(response.json()))\nBut trying to make the same post leads to cors error in chrome\naxios({\n      url: 'https://api.box.com/oauth2/token',\n      method: 'post',\n      data: {\n        grant_type: 'authorization_code',\n        code: token,\n        client_id: clientId,\n        clientSecret: clientSecret\n      },\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n      }\n    }).then(response => console.log(response))\nAny ides on why the discrepancy?. ",
    "ClickSimply": "The cookies need to be passed into the headers object.\njs\nAxios.request({\n     url: \"http://example.com\",\n     method: \"get\",\n     headers:{\n         Cookie: \"cookie1=value; cookie2=value; cookie3=value;\"\n     } \n}).then.... Could you post your code and the context you're using it in?. Try adding withCredentials:true to the request options.. Actually just did some testing, that specific site sets the header and does a 302 redirect, Axios isn't setting the cookie before following the redirect, meaning you just get sent to https://httpbin.org/cookies/ with no cookie set.\nYou can see the cookie with this code:\n```js\nconst Axios = require(\"axios\").default;\nAxios.request({\n    method: \"get\",\n    url: \"https://httpbin.org/cookies/set?a=1\",\n    maxRedirects: 0,\n    validateStatus: function(status) {\n        return status >= 200 && status < 303;\n    },\n}).then(res => {\n    console.log(res.headers[\"set-cookie\"]);\n});\n```. I'm not sure why it does that, not a major contributor to the lib or anything... \ud83d\ude10 . There seems to be an open issue with Edge regarding this issue, might not be related to Axios at all.\nhttps://developer.microsoft.com/en-us/microsoft-edge/platform/issues/7183548/\nTry using a different AJAX library and see if the same problem happens with that specific request in Edge.. Cross domain is when  you're making an ajax request to a url that isn't the one running the ajax script.\nFor example, if you had your app running on domainA, any ajax requests made to a domain other than domainA will be considered cross domain.\nCross domain requests typically follow very strict guidelines on what they can and can't do, they're limited quite a bit when compared to a same origin/domain request.\nAnyway, if you tried another library and the same problem happened then it's safe to say that Axios isn't responsible for the issue. \nThe problem is going to be related to your use case and the Edge browser.. ",
    "jenskuhrjorgensen": "Thanks for the great answer @ClickSimply !\nJust to add to your answer; an alternative way of making a get/post/put/delete/etc. request:\naxios.get(url, {\n            headers: {\n                Cookie: \"cookie1=value; cookie2=value; cookie3=value;\"\n            }\n        }).then.... ",
    "vifird": "@jenskuhrjorgensen @ClickSimply  Thanks a lot.. ",
    "JChermy": "but I got an error \"Refused to set unsafe header \"Cookie\" when set cookie like above way. I have resolved my problem. The code is below\nhandleSearch() {\n      const form = new FormData()\n      form.append('user', 'xxx')\n      form.append('password', 'xxx')\n      axios('/api/Basic/Login/verify', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        data: form\n      }).then(response => {\n        console.log(response)\n        })\n      })\n    }. and I set proxyTable cookieDomainRewrite option. ",
    "sherlock1982": "So when used in Node Axios will not respect Set-Cookie and send them back, right? Is it by design?. May be this will give you idea (nodejs). This is how I return XSRF token using tough-cookie.\n    import Axios, {AxiosInstance} from 'axios';\n    import axiosCookieJarSupport from 'axios-cookiejar-support';\n    import {CookieJar} from 'tough-cookie';\n\n    const jar = new CookieJar();\n    http = Axios.create({baseURL, withCredentials: true, jar});\n    axiosCookieJarSupport(http);\n    await login(http, defaultCredentials);\n\n    const cookies = jar.getCookiesSync(baseURL);\n    http.defaults.headers['X-XSRF-TOKEN'] = cookies.find((x) => x.key === 'XSRF-TOKEN').value;\n\n. ",
    "MartinLasek": "Hey @JChermy, nice you got it working!\nI encounter the same issue with Refused to set unsafe header \"Cookie\".\nCould you share your code how you set the proxyTable and cookieDomainRewrite \ud83d\ude0a ?. I guess I've found your code @JChermy here: https://github.com/JChermy/vue-table/blob/16523f310dd13adb2f27c174e172d31e42d21685/config/index.js#L14-L26 \ud83d\ude0a . ",
    "hungdev": "i found the answer here:\nhttps://stackoverflow.com/questions/43002444/make-axios-send-cookies-in-its-requests-automatically\naxios.get('some api url', {withCredentials: true});\nor: \nconst api = create({\n  baseURL: Configs[env].BACKEND_HOST,\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    Cache: \"no-cache\",\n  },\n  withCredentials: true,  // <=== add here\n  timeout: 60000\n}). ",
    "geoffdutton": "Okay I've removed the file: protocol restriction. \nRegarding the lint errors, if I run grunt test, I see this:\n\nEdit: So strange, when I repeated the CI test instructions on a remote server, it worked as expected, so the errors are something locally on my machine.\nIt appears to be passing tests though.\n. Okay I've removed the file: protocol restriction. \nRegarding the lint errors, if I run grunt test, I see this:\n\nEdit: So strange, when I repeated the CI test instructions on a remote server, it worked as expected, so the errors are something locally on my machine.\nIt appears to be passing tests though.\n. Shoot, I reverted the test as well. I'll update shortly. . Shoot, I reverted the test as well. I'll update shortly. . ",
    "shiyuegongsui": "+1. ",
    "kirakik": "Did anybody find a solution to this?. ",
    "s0mebread": "+1. +1. ",
    "grimpa": "@mrerhuo Try to use Promise.all() instead axios.all(). ",
    "mrerhuo": "look me Custom instance defaults axios.all is not a function #948 my working normal only  all is not a function. ",
    "VitorLuizC": "This issue stuck me a lot. Why is it still open? . ",
    "g00fy-": "I am still having this issue running 0.17.1 when the baseUrl is not absolute eg /api. ",
    "jhblacklock": "I'm sure this can be more succinct...\n```js\nexport function fetchAction(params){\n  return {\n    type: FETCH_ACTION,\n    promise: (axios:any) => {\n      function fetch(page, responses) {\n        return new Promise((resolve) => {\n          axios.get(\"foo/bar\", { params: { ...params, page: page }}).then( response => {\n            responses.push(response);\n            if (response.data.paging && response.data.paging.nextPage <= response.data.paging.lastPage) {\n              fetch(response.data.paging.nextPage, responses).then(() => resolve() );\n            } else {\n              resolve();\n            }\n          });\n        });\n      }\n  const responses = [];\n  return fetch(params.page, responses).then(() => {\n    const results = responses.map(response => response.data.results);\n    return [].concat(...results);\n  });\n}\n\n};\n}\n```. ",
    "zbrukas": "Try\n```js\nexport function fetchAction(params){\n  return {\n    type: FETCH_ACTION,\n    promise: (axios:any) => {\n      function fetch(page, responses) {\n        return new Promise((resolve) => {\n          axios.get(\"foo/bar\", { params: { ...params, page: page }}).then( response => {\n            responses.push(response);\n            const { data: { paging: { nextPage, lastPage } } } = response;\n            if (response.data.paging && nextPage <= lastPage) {\n              const pages = _.range(nextPage, lastPage); // lodash range as example to simplify\n              axios.all(pages.map(m => fetch(m, responses)).then(() => resolve());\n            } else {\n              resolve();\n            }\n          });\n        });\n      }\n  let responses = [];\n  return fetch(params.page, responses).then(() => {\n    return [ ...responses.map(response => response.data.results)];\n  });\n}\n\n};\n}\n```. ",
    "jasonkuhrt": "@ClickSimply Thanks for the informative response! Do you know why the library is designed like this?. @rubennorte thanks makes sense!. ",
    "dalirnet": "status < 303 to status <= 303 \n```javascript\nconst Axios = require(\"axios\").default;\nAxios.request({\n    method: \"get\",\n    url: \"https://httpbin.org/cookies/set?a=1\",\n    maxRedirects: 0,\n    validateStatus: function(status) {\n        return status >= 200 && status <= 303;\n    },\n}).then(res => {\n    console.log(res.headers[\"set-cookie\"]);\n});\n``.status < 303tostatus <= 303` \n```javascript\nconst Axios = require(\"axios\").default;\nAxios.request({\n    method: \"get\",\n    url: \"https://httpbin.org/cookies/set?a=1\",\n    maxRedirects: 0,\n    validateStatus: function(status) {\n        return status >= 200 && status <= 303;\n    },\n}).then(res => {\n    console.log(res.headers[\"set-cookie\"]);\n});\n```. ",
    "yamateH-ch": "@ClickSimply \n thanks\uff0cI tried using Ajax, but the error was the same. Was it cross domain? . ",
    "VitaliyLogvin": "Hi, did you find a solution?\nI use axios.post requests. And on the Windows phone there is no action. Perhaps this technology does not work with such phones.. ",
    "wpegg-dev": "@mzabriskie When is this going to get merged and released? I need it for a project I'm working on and will need to move to something else if it's not going to be soon. ",
    "vcfvct": "Please merge this, for now, we have to use the contentful 3.8.1 as a work around. . Please merge this, for now, we have to use the contentful 3.8.1 as a work around. . ",
    "ctyu": "Please merge this, i need this for a project that i working on.\nThanks.. ",
    "tmpace": "Can we get this merged? We're also having issues with this, and are using a fork for now. . ",
    "colin-riddell": "FWIW: It would be excellent to see this merged in sometime :). ",
    "chiefraccoon": "Didn't manage to resolve issues with our proxy in any way. So, moving temporarily to request. Hope somebody will offer the fix soon.. ",
    "deadwind4": "Please merge this big brother~. ",
    "zgayjjf": "Half year passed...\nIs there any problem with this PR? \n. Glad to see you all are well now.\nOne year passed, when will this PR merged?. Maybe /^https:?/ is better. ",
    "wickdninja": "any movement with this?. ",
    "gengjiawen": "@Khaledgarbaya @arpit2438735 Can you have a review on this pr ? Thanks.. ",
    "jordie23": "@axe312ger \nYou've broken it again. Please read the comments above.\nDeleting this branch has broken older versions of contentful package\n$  npm i contentful@4.6.4\nnpm ERR! code 1\nnpm ERR! Command failed: /usr/bin/git checkout fix/https-via-http-proxy\nnpm ERR! error: pathspec 'fix/https-via-http-proxy' did not match any file(s) known to git.\nnpm ERR!. @axe312ger \nYou've broken it again. Please read the comments above.\nDeleting this branch has broken older versions of contentful package\n$  npm i contentful@4.6.4\nnpm ERR! code 1\nnpm ERR! Command failed: /usr/bin/git checkout fix/https-via-http-proxy\nnpm ERR! error: pathspec 'fix/https-via-http-proxy' did not match any file(s) known to git.\nnpm ERR!. Ping @zcei \nYou could publish a version 4.6.5 that doesn't rely on the broken dependency on the deleted branch.\nYes it's old code, but we have systems that are slower moving that others. We are updating our version as soon as we can, but FYI our production systems were impacted by this problem. We are paying customers of contentful.. Ping @zcei \nYou could publish a version 4.6.5 that doesn't rely on the broken dependency on the deleted branch.\nYes it's old code, but we have systems that are slower moving that others. We are updating our version as soon as we can, but FYI our production systems were impacted by this problem. We are paying customers of contentful.. ",
    "axe312ger": "@jordie23 Sorry for the trouble! Was clearly my mistake, I released a fresh v4.6.5 which points to the correct axios version for v4. This will never happen again :). @jordie23 Sorry for the trouble! Was clearly my mistake, I released a fresh v4.6.5 which points to the correct axios version for v4. This will never happen again :). Looks like it was ec97c686efcc4a8968d632dab018e77215c5fe6d by @nickuraltsev \ud83d\ude48 . I would absolutely vote for removing IE9. I guess then releasing a new version is blocked by a PR which completely removes IE9 support in the code and removes it from the tests.\nCould even reduce bundle size a little \ud83c\udf89 . If your PR has a test case for this I am happy to review it :). So why not doing the following:\naxios.get(api, {\n    params: {\n        language: lang,\n        fields: fields,\n        'filter[nid][condition][path]=nid&filter[nid][condition][value]': nid\n    }\n})\nWe use a similar pattern in our SDK and it works fine. as soon #1334 reaches master, we would close #1209\n@Khaledgarbaya maybe add it to the umbrella including a [x] :). Yep I agree here:\n\nthe readability is definitely better as a common webpack config.\nthe values itself do not really differ, doing changes is basically no real efford\nwe will probably not change these settings at all in the close future (webpack 4 maybe by removing some stuff which is hopefully then part of the config defaults)\n\n. A few manual fixes are still needed:\n/home/travis/build/axios/axios/lib/adapters/http.js\n   34:16  error    'new Buffer()' was deprecated since v6. Use 'Buffer.alloc()' or 'Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead  node/no-deprecated-api\n   36:16  error    'new Buffer()' was deprecated since v6. Use 'Buffer.alloc()' or 'Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead  node/no-deprecated-api\n  114:24  error    'new Buffer()' was deprecated since v6. Use 'Buffer.alloc()' or 'Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead  node/no-deprecated-api\n  132:5   warning  Unexpected var, use let or const instead                                                                                                                no-var\n/home/travis/build/axios/axios/lib/helpers/btoa.js\n  19:5  warning  Unexpected var, use let or const instead  no-var\n/home/travis/build/axios/axios/lib/helpers/isAbsoluteURL.js\n  13:24  error  Unnecessary escape character: \\+  no-useless-escape\n  13:28  error  Unnecessary escape character: \\.  no-useless-escape\n/home/travis/build/axios/axios/lib/helpers/isURLSameOrigin.js\n  47:7  error  'originURL' is never reassigned. Use 'const' instead  prefer-const\n/home/travis/build/axios/axios/lib/utils.js\n  218:7  error  unnecessary '.call()'  no-useless-call\n  224:9  error  unnecessary '.call()'  no-useless-call\n\u2716 10 problems (8 errors, 2 warnings). Sauce Labs Result:\nIE 11.0.0 (Windows 8.1 0.0.0): Executed 178 of 178 (93 FAILED) (0.834 secs / 0 secs)\nIE 9.0.0 (Windows 7 0.0.0): Executed 178 of 178 (90 FAILED) (1.1 secs / 0 secs)\nFirefox 58.0.0 (Windows 7 0.0.0): Executed 178 of 178 (93 FAILED) (0.48 secs / 0 secs)\nSafari 9.1.2 (Mac OS X 10.11.6): Executed 178 of 178 (93 FAILED) (0.474 secs / 0 secs)\nEdge 16.16299.0 (Windows 10 0.0.0): Executed 178 of 178 (93 FAILED) (0.676 secs / 0 secs)\nChrome 64.0.3282 (Windows 7 0.0.0): Executed 178 of 178 (93 FAILED) (0.47 secs / 0 secs)\nIE 10.0.0 (Windows 8 0.0.0): Executed 178 of 178 (93 FAILED) (1.057 secs / 0 secs)\nTOTAL: 648 FAILED, 598 SUCCESS\nLooks like it does what it should. Fixing the tests itself is another PR, I guess @zcei?. IMHO this PR could also get rid of grunt, it is only used for testing (this pr + #1336), building (already rewritten and merged to release/1.0.0) and for bundeling to bower (which should get removed IMHO, bower is obsolete)\nI am also happy to do this in a separate PR, would be a pleasure to simplify the build process further :)\nSee here:\ngrunt.registerTask('test', 'Run the jasmine and nodeunit tests', ['eslint', 'nodeunit', 'karma:single', 'ts']);\n  grunt.registerTask('build', 'Run webpack and bundle the source', ['clean', 'webpack']);\n  grunt.registerTask('version', 'Sync version info for a release', ['usebanner', 'package2bower']);. Thanks, this looks good \ud83d\udc4d Like the passing CI a lot. \u2705 \n@Khaledgarbaya is on holidays at the moment, but I am sure we will come back to this soon :). Ohh yes, this would help a lot. Having kinda the same issue in our SDK.\nCan we add this to #1333 @Khaledgarbaya?. Have to pass on to @Khaledgarbaya \ud83d\ude05 . The power of GitHub mentions :trollface: . I am pretty sure it is possible to have some babel plugins to get it working with IE<11.\nDid we identify which code is atm crashing IE9 and which workarounds for IE<11 are in the code? That would help a lot to judge the effort that needs to be done.. The workarounds seem to be not that many:\nhttps://github.com/axios/axios/search?q=ie&unscoped_q=ie\nhttps://github.com/axios/axios/search?q=internet+explorer&unscoped_q=internet+explorer\nhttps://github.com/axios/axios/search?utf8=%E2%9C%93&q=isOldIE&type=\nhttps://github.com/axios/axios/search?q=MSIE&unscoped_q=MSIE\n. @RikkiGibson go for it \ud83d\udcaa . @emilyemorehouse thank you. Everyone able to fix Sauce Labs tests is very welcome. I can try to do it on my own as soon I find time for it :). Looks like IE 11 is green now. Maybe just a Sauce Labs hickup with Safari?. Wow, awesome! Thank you. Will have a look!. thsi is the PR that fixes the bundle size: #1776 . Yes to make the tests run in this PR, will get removed later on. In the utils for now, later on we might get rid of it when moving to lodash. :drum: . AFAIK will we update the tests later on to be able to handle import. . I guess the tests related to this were supposed to fail. It might have been some preparation for Default instances / Config merge: in #1333. ",
    "danieladams456": "@mistermoe made a fork using this PR as mentioned in this related issue, and it has been getting about 1k pulls a week on NPM for the past two months.  That would seem to be an indication this PR is solid.  What is still to-do on this?. @mistermoe made a fork using this PR as mentioned in this related issue, and it has been getting about 1k pulls a week on NPM for the past two months.  That would seem to be an indication this PR is solid.  What is still to-do on this?. @zcei thanks! I must not be too good at reading icons today \ud83d\ude04 . @zcei thanks! I must not be too good at reading icons today \ud83d\ude04 . Would #959 be close enough for the 1.0.0 release?  It would help when developing within a corporate network.. Would #959 be close enough for the 1.0.0 release?  It would help when developing within a corporate network.. ",
    "PavelPolyakov": "this was merged, but never released, right?\nIn my case this fix didn't completely help: https://github.com/axios/axios/issues/1885 . I just get another kind of error now. \u00af_(\u30c4)_/\u00af. ",
    "alsofronie": "I have exactly the same environment. Try this:\naxios.post('/formulas/create', {\n    name: \"\",\n    parts: \"\"\n})\n.then(response => { \n    console.log(response)\n})\n.catch(error => {\n    console.log(error.response)\n});\nModify from console.log(error) to console.log(error.response) in catch.\nYou can also use a global interceptor and reject only the error.response. The problem is when the console.log tries to output the error, the string representation is printed, not the object structure, so you do not see the .response property.. There is a catch in catch: if the error occurs before the request is made, then in catch you will not have the err.response property, because... well... there is no response. So, the catch will catch any error. The same applies in the situations like the one from @fabiorecife when there is no response because of a network failure. Do not treat the err as a HTTP error because this is not always the case.. ",
    "VSG24": "In case anybody is wondering how to reject only the response property, here's how to do it:\naxios.interceptors.response.use((response) => {\n    return response;\n}, function (error) {\n    // Do something with response error\n    if (error.response.status === 401) {\n        console.log('unauthorized, logging out ...');\n        auth.logout();\n        router.replace('/auth/login');\n    }\n    return Promise.reject(error.response);\n});\nThe important part is return Promise.reject(error.response);. ",
    "pedro-mass": "@gopal-g that's undefined for me.. @gopal-g If I'm watching the Network tab in dev tools, I can see the response. It's a 401 if that makes a difference.. @gopal-g If I'm watching the Network tab in dev tools, I can see the response. It's a 401 if that makes a difference.. ",
    "mu-yu": "I have the same error with @pedro-mass 's.\nhere is my code\n```js\nasync function test () {\ntry {\n  let res = await axios.get('/xxxxx/xxxx')\n} catch (e) {\n  console.log(e.response) // undefined\n}\n}\n```. I have the same error with @pedro-mass 's.\nhere is my code\n```js\nasync function test () {\ntry {\n  let res = await axios.get('/xxxxx/xxxx')\n} catch (e) {\n  console.log(e.response) // undefined\n}\n}\n```. I have the same error with @pedro-mass 's.\nhere is my code\n```js\nasync function test () {\ntry {\n  let res = await axios.get('/xxxxx/xxxx')\n} catch (e) {\n  console.log(e.response) // undefined\n}\n}\n```. ",
    "fabiorecife": "using \"error.response\" does not work, for me. The problem occurs when I disconnected the database server and my web server returned error 500.\nNetwork tab in dev tools\nresponse code: 500\nresponse body: \n{\n  \"error\": {\n    \"statusCode\": 500,\n    \"name\": \"Error\",\n    \"message\": \"read ETIMEDOUT\",\n    \"code\": \"ETIMEDOUT\",\n    \"errno\": \"ETIMEDOUT\",\n    \"syscall\": \"read\",\n    \"stack\": \"Error: read ETIMEDOUT\\n    at exports._errnoException (util.js:1050:11)\\n    at TCP.onread (net.js:582:26)\"\n  }\n}\nchrome console error:\nUncaught (in promise) Error: Request failed with status code 500\n    at createError (createError.js:15)\n    at settle (settle.js:18)\n    at XMLHttpRequest.handleLoad (xhr.js:77)\nversion\n\"axios\": \"^0.15.3\"\n. ",
    "robbiemu": "@alsofronie so what is the preferred method of handling (distinguishing one from another) for example preflight failures like 413?. ",
    "paolavness": "I'm getting a similar issue - Chrome devtools is showing a 401, the response is {\"message\":\"Identity token has expired\"} and I am catch( (error) => {...}) - but error.response blank. I am wondering if this is because the preceding OPTIONS call associated with the GET has a status of 200. What to do in this case and where is the right place to retrieve the 401 status code?. @mrchief thanks for this, good to go over it again. In my case, this solution has works in most cases but the current problem I am experiencing is that the error.response object is present, but fields are undefined, any calls to values inside the response object result in an error.. @mrchief Ah this is closed, thanks for pointing that out. will do.. ",
    "dbshoupe": "I had the same issue. Ultimately, I changed the error code from 401 to 403 and everything worked as I expected it to. I'm guessing the reason for the empty error object and resulting javascript error has to do with this statement that I found in the documentation for 401 errors:\n\"[A 401 error] response must include a WWW-Authenticate header field containing a challenge applicable to the requested resource.\"\nSo if you are going to utilize a 401 error, you must include a www-authenticate header field. If you don't want to do this, just use a 403 error.. ",
    "juliano-barros": "Good morning guys, I had this issue, however,  I fixed it changing my apache configuration to enable cors on my server. Have a look at link below\nhttps://enable-cors.org/server_apache.html\n. ",
    "richellyitalo": "You can debug all response only with console.log(JSON.stringify(error)). You can debug all response only with console.log(JSON.stringify(error)). ",
    "maythukha": "axios.post(url)\n.then((response) => {\n     // something\n})\n.catch((response) => {\n   if (response.status == undefined) {\n        alert('unauthorized')\n       }\n}). ",
    "petruscurtu": "I had exactly the same problem described by @fabiorecife . I solved it but it is not the most elegant solution and I do not understand why this is needed.\n.catch(error=>{\nlet errorObject=JSON.parse(JSON.stringify(error));\nconsole.log(errorObject);\ndispatch(authError(errorObject.response.data.error));\n})\nThis produces the expected results in the errorObject variable.. I had exactly the same problem described by @fabiorecife . I solved it but it is not the most elegant solution and I do not understand why this is needed.\n.catch(error=>{\nlet errorObject=JSON.parse(JSON.stringify(error));\nconsole.log(errorObject);\ndispatch(authError(errorObject.response.data.error));\n})\nThis produces the expected results in the errorObject variable.. ",
    "luxueyan": "@petruscurtu I have the same problem\uff01 It dose not work for me\uff01\n\nI don't khnow why it throw 'no Access-control-allow-origin', but the server has set it! The response header is ok\n\n\nResolved. The auth api was not responsing the right header that must have the Access-control-allow-origin. @petruscurtu  The output is 'JSON.parse(JSON.stringify(error))' in interceptor of response. There has not response property. @chiefie  I am sure that 'Access-control-allow-origin' setting is ok since other ajax api can response right content\uff01Only the capcha code api go wrong\u3002 when it is expired\uff0c it response  error with 478 status and axios can not get the response body\uff01\nUpdate! It was the server api error, it didn't have cors settings in header. Now work well.. ",
    "chiefie": "@luxueyan It seems that you had your Access-control-allow-origin set up for http://localhost:8081  (assuming this is set on the server with this address http://10.31.143.32:8080?) Can you check what is the URL you're running this project from? Is it http://localhost:8081? If it is not, even if the port number is different, then it is violating the CORS domain rules.. ",
    "leodutra": "This raw error is thrown whenever server is unreacheable/CORS invalidated.\nerror.response will just be undefined.\nI just created an IntegrationError which contains message, status and response data... but always following the same structure. This way I can decouple axios/raw error from my handlings.. This raw error is thrown whenever server is unreacheable/CORS invalidated.\nerror.response will just be undefined.\nI just created an IntegrationError which contains message, status and response data... but always following the same structure. This way I can decouple axios/raw error from my handlings.. Axios guys, this should be a HTTP error I think... including an error.response.\nThis can be checked as above. Axios guys, this should be a HTTP error I think... including an error.response.\nThis can be checked as above. Not mangled. Vuex does not mangle this, not even by bug.\nSome kinds of errors, mostly inside Axios interceptors, cause this to not be exposed.. ",
    "jacurtis": "@frostshoxx So i think this is a \"non-issue\". While I am experiencing the same problem as everyone else, i now understand what is happening and I can see that this isn't a bug or issue, but just the way the world works.\nFor everyone that is confused (and in celebration of this issue turning one year old) let me explain what is happening and how to get your server response.\nHow Did you End Up Here?\nThere are many reasons you might encounter the .catch() wasteland. Sometimes Axios encounters an error early on in the request. This sometimes happens with CORS requests. When Axios OPTIONS isn't available, than Axios panics and sends you to .catch() before it actually gets a response from the server, so the response isn't available in these cases.\nSome of you might say, \"No, i see it in DevTools, so the response came back!\". This isn't always true because sometimes Axios will kick off an HTTP request, experience an error, abort itself and send you to .catch() before the server responded back. A few milliseconds after Axios runs the .catch() function than your server might come back with a response, which shows up in DevTools because it is still listening for the response. However, Axios is long done at this point, so the response wasn't available because it didn't exist at the time that Axios initiated the .catch() function.\nThose of you that get a message about a 4XX or 5XX error from the server, are in luck! There is usually a response from the server available to you because in order to get this error, Axios had to wait around for the full server response. In these cases, Axios sends you to .catch() with the response but it wraps the response in its own error object that it creates on the fly.\nSo if you are getting 5XX or 4XX errors, than you probably have the server response available to you, but it is buried DEEP!\nTry error.response.data.data.message. This is confirmed to work for Laravel API requests that return server errors.\nNon-Laravel users -- You will at least need to go error.response.data to get to the core response from the server, but most servers than wrap their responses in another data{} object requiring you to go a layer deeper, and then finally access the response property you want like .message from there.\nBut I Did Console.Log and It Contains No Response!\nYeah i know, but just try to output error.response.data anyway just to humor me.\nFor some reason Axios modifies the output of console.log(error) on the error object. I am not sure why they do this, but if you instead write console.log(JSON.stringify(error)) than you will see the whole object in all its glory.\nThis is serialized JSON which gets hard to read after about 2 layers deep. So you should copy the full thing and paste it into a JSON prettifyer to explore the error object's structure.\n\nIf you are getting a 500 error or a 400 type error (or really any server supplied error code) in Axios, then that means that the request completed and that the server's response is available to you!\nThe problem is that it's super deep, and because Axios modifies the output of our console.log(error) that most people do to see the error{} object, most people don't know that it exists. But it's there!. ",
    "empitechathu": "@VSG24 man!! that's a life-saving answer :D. ",
    "hhowe29": "fwiw, JSON.stringify(error) bombs in 0.18.0 due to circular references.. ",
    "alimirayman": "I set up an interceptor which gives me server response on error\njs\naxios.interceptors.response.use(\n  response => {\n    // do someting on response\n    return response\n  },\n  error => {\n    // do someting on errir\n    return Promise.reject(error.response.data) // => gives me the server resonse\n  }\n)\njs\n    try {\n      const { data } = await htttp.post(login, payload)\n      // do someting with data\n    } catch (e) {\n      console.log(e) // server response data\n    }. I set up an interceptor which gives me server response on error\njs\naxios.interceptors.response.use(\n  response => {\n    // do someting on response\n    return response\n  },\n  error => {\n    // do someting on errir\n    return Promise.reject(error.response.data) // => gives me the server resonse\n  }\n)\njs\n    try {\n      const { data } = await htttp.post(login, payload)\n      // do someting with data\n    } catch (e) {\n      console.log(e) // server response data\n    }. @AllanPinheiroDeLima sorry for the late reply but I don't think anyone writes intercepter on each and every single location of anyone's code. We write intercepter one time on a code base and use it as a helper class, that's number 1. Number 2, the initial query was they did not get server error response, instead, they got the javascript error in the try catch block. there were 2 solution one to change the way server responded error or the way frontend catched error. axios error intercepter is basically acts as a middleware to solve that issue if you don't want to change your ways to code or change a large code base. . @AllanPinheiroDeLima sorry for the late reply but I don't think anyone writes intercepter on each and every single location of anyone's code. We write intercepter one time on a code base and use it as a helper class, that's number 1. Number 2, the initial query was they did not get server error response, instead, they got the javascript error in the try catch block. there were 2 solution one to change the way server responded error or the way frontend catched error. axios error intercepter is basically acts as a middleware to solve that issue if you don't want to change your ways to code or change a large code base. . ",
    "AllanPinheiroDeLima": "@alimirayman It seems to work fine if we don't have to keep an eye on every request. But, when you have to track every request, it's not reasonable to have an error handler repeated in every location in my code. Unless I understood wrong ( wich may be the case ), axios should'nt have to make sure the server has returned an error before it throws an error ?. Yeah, I agree. I found a solution to this problem making the integration into my own server instead using raw keycloak. This way I could intercept the error in the server and then send a legible one to the front end. I think that\u2019s the only way to solve this kind of issue for now :). I'm running this issue too. \nI want to control user logged in state into interceptors. For instance, if my interceptors catch a response with status 401, I want to logoff / redirect this user.\n. ",
    "davalapar": "@hhowe29 use circular-json. ",
    "stemid": "I found this thread like many others and I'm using axios with vue.js and vuex modules.\nMy vuex module action catches the axios error and runs commit(ERROR_HAPPENED, error) to run the ERROR_HAPPENED mutation of the vuex module. But the error arrives without its response property resulting in error.response being undefined if I attempt to set the response to a vuex state.\nIf I console.log(error.response) in the action, before the commit(), I can see the response. So it's being mangled by vuex most likely.\nEither commit(ERROR_HAPPENED, error.response.data) or check if it's a 401 in the action and run some other commit depending on the status code. Because this mangling only happens with a 401 code. Other errors like 404 or 500 are passed through to my mutations.. ",
    "jonasgroendahl": "Any reason 5xx errors are not handled by catch block (doesn't return a response object)? Status code 502 appear in DevTool console but doesn't get handled by Axios. . ",
    "felipanico": "This worked for me (with laravel abort helper: abort(500, 'message'))\n ```\n.catch(error => {\n    console.log(error.response.data.message);\n});\n```. ",
    "movepixels": "Does anyone one have a full working example other than snip of code saying this worked? Snip of 1 line does not help much if you have no idea who they were referring to in this thread, where they put that snip of code, what the final working code looks like?\nI am trying to catch the error in the inerceptor and based on the error code either end the request there with redirect if 401 to login, or if its 422 let the request go back to the calling component to allow updating of the form errors.\nAny ideas?\nI am using Nuxt axios and my onResponseError interceptor looks like:\n$axios.onResponseError(error => {\n    const code = parseInt(error.response && error.response.status)\n    console.log(code, 'Axios onResponseError')\n    console.log(error.response.status, 'status')\n    console.log(error.config, 'config')\n    console.log(error.response, 'response')\n    // Do something with response error\n    if (error.response.status === 401) {\n      console.log('unauthorized, logging out ...')\n      app.$auth.logout()\n      redirect('/login')\n    }\n    if (code === 400) {\n      // redirect('/400')\n      console.log(`400 onResponseError`)\n    }\n    if (code === 408) {\n      console.log(`A timeout happened on url onResponseError`)\n    }\n    if (code === 418) {\n      console.log(`A teapot onResponseError`)\n    }\n    if (code === 428) {\n      console.log(`428 onResponseError`)\n      // redirect('/login')\n    }\n    return Promise.reject(error)\n  })\nAnd a sample call would look like:\nasync postRecord (clear = false) {\n      try {\n        const { r } = await this.$axios.$post(this.endPoint, this.formData)\n        console.log(r, 'response')\n        // do something with response\n      } catch (e) {\n        console.log(e, 'error in crud') // server response data\n        // i should never get here if error since the interceptor should kill the request if 401\n       // for testing this request is returning a 401\n      } finally {\n        this.submitted = false\n      }\n    },\nThanks,\nDave. ",
    "volokolamskspb": "Java programmer sends me error message with 500 error and I can't handle that message. So I'm asking him to return 200 status with error message in response but he's angry at me and says that his HTTP client sees all the messages with 500 status. He thinks that I'm stupid because I can't find error message with 500 status. How do I explain him that axios doesn't handle 500 error message?\n. ",
    "azhararmar": "\nJava programmer sends me error message with 500 error and I can't handle that message. So I'm asking him to return 200 status with error message in response but he's angry at me and says that his HTTP client sees all the messages with 500 status. He thinks that I'm stupid because I can't find error message with 500 status. How do I explain him that axios doesn't handle 500 error message?\n\nActually, you must be able to handle error with status 500, you can check for http status in response and decide on how to handle it in the client side. This is already documented in this link (https://github.com/axios/axios#handling-errors). ",
    "umair-khanzada": "I am also getting error.response undefined then I try below code.\naxios.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  // Do something with response error\n  let {response} = error;\n  // response?.status === 401 es7 way.\n  if (response && response.status === 401) {\n    // Do logout;\n    // Redirect to login;\n    return Promise.reject(error.response);\n  } \n  else if (error.response){\n    // Do something.\n    console.log('some API_CLIENT error');\n    return Promise.reject(error.response);\n  }\n return Promise.reject(error);\n});. ",
    "danielstern": "This is too bad, error handling is important.. ",
    "seth100": "same problem to me: @nuxtjs/axios v5.0.0 . ",
    "Steffi3rd": "You have to mention this issue in the README please, very helpful. Thanks!\nhttps://github.com/axios/axios/issues/960#issuecomment-320659373. I just found this: https://stackoverflow.com/a/47630754/387912, does it help?. ",
    "gr2m": "I think I run into the same problem when passing a readable stream to the data request option\n~~I've created at test case repository at https://github.com/gr2m/axios-upload-stream~~ See my update https://github.com/axios/axios/issues/961#issuecomment-340618719\nI tried to make it work with the fs.createReadStream('file.json').pipe(request.put('http://mysite.com/obj.json')) but dunno how the express handler would look like.. I was able to upload a file read stream using axios by also adding a Content-Length header\n```js\nconst MY_FILE_PATH = 'README.md'\nconst fs = require('fs')\nconst axios = require('axios')\nconst readmeStream = fs.createReadStream(MY_FILE_PATH)\nreadmeStream.on('error', console.log)\nconst {size} = fs.statSync(MY_FILE_PATH)\naxios({\n  method: 'POST',\n  url: 'https://uploads.github.com/repos/gr2m/sandbox/releases/8300256/assets?name=README.md',\n  headers: {\n    'Content-Type': 'text/markdown',\n    'Content-Length': size,\n    'Authorization': 'token 123reducted'\n  },\n  data: readmeStream\n})\n```\nBut that might have been a GitHub-specific requirement. I don't know a different way to test it. I was able to upload a file read stream using axios by also adding a Content-Length header\n```js\nconst MY_FILE_PATH = 'README.md'\nconst fs = require('fs')\nconst axios = require('axios')\nconst readmeStream = fs.createReadStream(MY_FILE_PATH)\nreadmeStream.on('error', console.log)\nconst {size} = fs.statSync(MY_FILE_PATH)\naxios({\n  method: 'POST',\n  url: 'https://uploads.github.com/repos/gr2m/sandbox/releases/8300256/assets?name=README.md',\n  headers: {\n    'Content-Type': 'text/markdown',\n    'Content-Length': size,\n    'Authorization': 'token 123reducted'\n  },\n  data: readmeStream\n})\n```\nBut that might have been a GitHub-specific requirement. I don't know a different way to test it. I've updated my minimal test case: https://github.com/gr2m/axios-upload-stream\nI can confirm that setting data to a fs read stream is working and setting Content-Length is not required.. I've updated my minimal test case: https://github.com/gr2m/axios-upload-stream\nI can confirm that setting data to a fs read stream is working and setting Content-Length is not required.. ",
    "rwpino": "https://stackoverflow.com/questions/53526860/sending-file-from-server-to-server-using-axios. ",
    "BrodaNoel": "Makes sense.. Makes sense.. ",
    "WebMobi59": "When I don't need to pass the data, I should put null as data. then it should work.\nvar config = {\n      headers: {Authorization: token}\n    };\n    return axios.post(url, \n      null, \n    config)\n    .then((response) => {\n      dispatch(apiSuccess(CANCEL_APPOINTMENT, response.data))\n    })\n    .catch((error) => {\n      errorHandler(dispatch, error.response, API_FAILURE, url);\n    });\nHope it give some help to others :). ",
    "mentos1386": "Hey,\nRequest failed with status code 400 means that request was created, but server returned response with HTTP code 400 (Bad Request).. Hey @umutozdemir97 \nYou should check out https://github.com/mzabriskie/axios#handling-errors. Error object itself contains response.. ",
    "brentmitchell25": "I am getting this error as well with Android in React Native. It works fine with iOS.. ",
    "farhaan": "I am also getting this error with Android in React Native.. ",
    "mk-nickyang": "I solved mine by set\nheaders: {\n        Accept: 'application/json',\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n      },. ",
    "rogerluo410": "Same issue, does anyone solve it? . ",
    "milon87": "will work in iOS but will not work in Android. HTTPS doesn't support in android. . ",
    "zhe-he": "mark. ",
    "hashemirafsan": "can any one help https://stackoverflow.com/questions/46307932/network-error-in-axios-post-request-react-native please ?. ",
    "hzburki": "Same Issue under different conditions. \nAxios throwing Network Error, but only on iOS Simulator. \nWorks Fine on android (Tested on actual Device). Using AWS server with http not https.\nHelp Please . ",
    "miriyas": "GET is not able to use body.\nI think you should remove your data when using GET.\njavascript\naxios.interceptors.request.use((config) => {\n  if (config.method !== 'get') {\n    config.data = qs.stringify(config.data) // fix Rails i18n error\n  }\n  if (typeof config.params === 'undefined') {\n    config.params = {}\n  }\n  return AppSettingService.getAppSetting()\n    .then((appSetting) => {\n      config.params.locale = appSetting.locale\n      config.params.currency = appSetting.currency\n      return ProfileService.getCurrentUser()\n        .then((currentUser) => {\n          if (currentUser) {\n            config.headers.common.Authorization = currentUser.token\n          }\n          return config\n        })\n    })\n})\nI hava similar issues, but I fixed this Network Error with omiting data when using GET.. ",
    "hpb0412": "@hzburki I had got the same issue as you, but I found that, on android emulator, the timeout for a network request seems to be 2 or 3 minutes. However, setting default timeout of Axios does not work on android emulator.. ",
    "Winglonelion": "it seem like a \"fetch problem\" i had met on React Native specific for Android 7.0. \nThe reason for that is using self signed certificate. ",
    "PaddyLock": "I am getting the same network error with a simple Get request\n`var instance = axios.create({\n            baseURL: getEnvVars.apiHost,\n            timeout: 5000,\n            headers: {'x-api-key': getEnvVars.apiKey}\n        });\n    return instance.get('/products?brand=' + params.brand)\n        .then((response) => {\n            console.log(response.data);\n        })\n        .catch((error) => {\n            console.log(error);\n        });`\n\n\u25bcNetwork Error\n- node_modules/axios/lib/core/createError.js:16:24 in createError\n- node_modules/axios/lib/adapters/xhr.js:87:25 in handleError\n- node_modules/raven-js/src/raven.js:377:26 in wrapped\n- node_modules/event-target-shim/lib/event-target.js:172:43 in dispatchEvent\n- node_modules/react-native/Libraries/Network/XMLHttpRequest.js:567:29 in setReadyState\n- node_modules/react-native/Libraries/Network/XMLHttpRequest.js:397:25 in __didCompleteResponse\n- node_modules/react-native/Libraries/Network/XMLHttpRequest.js:503:16 in <unknown>\n- node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js:180:12 in emit\n- node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:351:47 in __callFunction\n- node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:116:26 in <unknown>\n- node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:314:6 in __guardSafe\n- node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:115:17 in callFunctionReturnFlushedQueue. @hsunami10 I worked around the issue by setting up an external staging server and pointing to that for testing with the emulator.. @VitaliiK91 do you mean the ADB settings in Genymotion. Where is localhost setting to replace?. ",
    "alexandcote": "I had a similar problem and found a solution. My problem was related to my domain. \nI found that the domain must not have _ in it. For exemple, https://my_api.mydomain.com will not work. But, https://my-api.mydomain.com or https://api.mydomain.com will work. ~Note that my SSL certificate came from CloudFlare so this may be a SSL certificate problem too.~\nEdit: According to http://ssllabs.com, both certificates are identical and are supposed to work on all last Android version.. @hsunami10 What is your domain? Do you have a repo with your app?. ",
    "hsunami10": "please help with this, it still doesn't work, I'm having the same problem. ",
    "daibertdiego": "I'm having the same problem with a simple GET request to my Rest API hosted in heroku. On IOS emulator the same request works well.\naxios.get('https://my-app-api.herokuapp.com/api')\n            .then(response => {\n                this.setState({ bets: response.data })\n            });. I tried to use headers too, but not working too.\naxios.get('https://my-app-api.herokuapp.com/api',\n            {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json; charset=UTF-8',\n                },\n            })\n            .then(response => {\n                this.setState({ bets: response.data })\n            });. ",
    "mahesh-vidhate": "I am also having the same problem. This is only related to Android 7.0, for other Android versions, it works well.\nProblem is that Axios https post request is not even reaching to the server. It got failed with Network Error only because of SSL Handshake got failed.\nIt works well with all iOS versions as well as all Android versions except Android 7.0.\nLooks like Android 7.0 has some serious problem in okhttp.. I am also having the same problem. This is only related to Android 7.0, for other Android versions, it works well.\nProblem is that Axios https post request is not even reaching to the server. It got failed with Network Error only because of SSL Handshake got failed.\nIt works well with all iOS versions as well as all Android versions except Android 7.0.\nLooks like Android 7.0 has some serious problem in okhttp.. @srganeshram  in -> data: $.param (reqData)\nwhat is this $ stands for?\nDo I have to import something for '$' ?\nbecause I am getting an error as '$ is not defined'. @srganeshram  in -> data: $.param (reqData)\nwhat is this $ stands for?\nDo I have to import something for '$' ?\nbecause I am getting an error as '$ is not defined'. ",
    "helloitsm3": "I'm having the same issue as well. I'm on the latest version of Android and I've tried sending a simple text over to my server but still receiving network error. Same thing goes for the get request. I finally manage to fix the issue. Used my networks IP address and it works. eg http://:/api\nMore here. ",
    "JohnsonRyu": "\nIf you are trying to call localhost on android simulator created with AVD, replacing localhost with 10.0.2.2 solved the issue for me.\n\nGot them. ",
    "rollrodrig": "this worked for me. I am using MAC\nhttps://stackoverflow.com/a/53617769/5708097. ",
    "GuillaumeRZ": "(Sorry for the double post)\nI just open a StackOverFlow topic where I tried to be more precise, there it is : https://stackoverflow.com/questions/54108848/network-error-with-axios-and-android-emulator. ",
    "a7urag": "Try https://stackoverflow.com/questions/51902629/how-to-allow-all-network-connection-types-http-and-https-in-android-9-pie. ",
    "accept-li": "I came to this issue as I was experiencing exactly the same symptoms. So this might might be useful information to someone. I'm new to using the Android Emulator, so I was surprised the request, which was working for iOS would fail on Android's Emulator. It turns out that my server, which is https, not self signed had an issue and required a re-install and was therefore not correctly SSL handshaking, which meant I was also getting the same Network Error posted at the start of this post.\nI would suggest 100% confirming the cert is installed correctly, getting a report for example from sslshopper - Hope this may help someone \ud83d\udc4d   . ",
    "clusteratlas": "sindre's got would be more fitting\nhttps://www.npmjs.com/package/got. sindre's got would be more fitting\nhttps://www.npmjs.com/package/got. Force HTTPS?\nUse of Access Keys & Tokens?. Force HTTPS?\nUse of Access Keys & Tokens?. }).catch(error => {\n  console.log(error.message);\n})\nresults into:\nNetwork Error\n\nFrom https://github.com/axios/axios/blob/26b06391f831ef98606ec0ed406d2be1742e9850/lib/adapters/xhr.js#L86-L88\n```\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n  // Clean up request\n  request = null;\n};\n\n.\n}).catch(error => {\n  console.log(error.message);\n})\n```\nresults into:\nNetwork Error\n\nFrom https://github.com/axios/axios/blob/26b06391f831ef98606ec0ed406d2be1742e9850/lib/adapters/xhr.js#L86-L88\n```\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n  // Clean up request\n  request = null;\n};\n\n```. ",
    "deepsweet": "Just faced same issue and found that it's related to server side. For example with Express you can use CORS middleware with special options: cors({ exposedHeaders: [ 'my-header' ] }). ",
    "jolin1337": "Maybe a stupid question but: v0.16.3, does that exist? The latest release is v0.16.2, right? \nAnyway, I am having the exact same error. I am not invoking the axios.default.cancelToken but I am sending the token down when the request is being executed like so:\naxios.get('/path/to/request', {\n  params: newParams,\n  cancelToken: cancelToken\n}).then(function (response) {\n  console.log(response);\n}).catch(function (error) {\n  console.error(error); // <--- Here I am logging the error as @hesher mentions\n});\nAfter some debugging the config object in the dispatchRequest.js does not contain the function throwIfRequested although the function is there when I send the cancelToken into the request as parameter, everything else seems normal to me. I am mainly guessing now but maybe this issue has something to do with the fact that the function is a prototype and the call to utils.merge function removes the prototypes here: https://github.com/mzabriskie/axios/blob/3579da4cb0ebc8d29907f256cfd05e12d9c3216a/lib/core/Axios.js#L37 ?. ",
    "ru-web-designer": "I am a little curious about what does\njavaxript\nthis.source.token.throwIfRequested = this.source.token.throwIfRequested;\ndo?. I am a little curious about what does\njavaxript\nthis.source.token.throwIfRequested = this.source.token.throwIfRequested;\ndo?. @Bnaya got it, thanks :). @Bnaya got it, thanks :). ",
    "pimlie": "Set maxRedirects: 0 in Request Config?. Unfortunately it seems there is no other way, actually axios handles no redirects at all. The maxRedirects option is passed to the http(s) transport from nodejs. The http client from nodejs does the automatic redirect (at least on server side). ",
    "matepaiva": "I arrived here because I had a similar problem: the server was redirecting when the user was not logged in and I was trying to find a way to intercept it. But it turns out that, in my case, when I added a common header to every request telling that it is a XHR, the server started responding correctly. Just writing it down to maybe help another person with the same issue.\naxios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';. ",
    "fewiki": "transformResponse perfect!\nmy code\nimport axios from 'axios'\nconst JSONbig = require('json-bigint');\naxios.defaults.transformResponse =  [function (data) {\n    // Do whatever you want to transform the data\n    return JSONbig.parse(data);\n}]\n. ",
    "adambloomer": "I had the same error so I used Babel Polyfill  https://babeljs.io/docs/usage/polyfill/. ",
    "siddharthkp": "@nickuraltsev @mzabriskie Would you prefer this to be inside the Gruntfile with grunt-exec or grunt-shell?. ",
    "jonnywilliamson": "Wondering the same thing!. Wondering the same thing!. ",
    "ThomasLandauer": "@rubennorte: So what would you currently (i.e. out of the box) suggest to achieve this? The only thing I could think of is to keep track of the to-be-uploaded files (in some array) and proceed to the next entry, whenever the progress reaches 100%.\nIn other words: Relying on the fact that the uploads are done sequentially (i.e. not parallel).. ",
    "bierik": "@rubennorte I would suggest not adding the feature of global interceptors. What about extending an existing axios instance. This way the developer exactly knows what interceptors and options are inherited or extended:\n``` javascript\nimport axios from 'axios';\nexport const api = axios.create({\n  baseURL: process.env.API_ROOT,\n});\napi.interceptors.request.use((request) => {\n  request.headers.Authorization = Bearer mytoken;\n  return request;\n});\n// Here the pdfInstance extends the api instance so the pdfInstance has also access to the request interceptor but is also able to override the baseURL and adding additional header such as Accept\nexport const pdfInstance = api.extend({\n  baseURL: '/file',\n  responseType: 'arraybuffer',\n  headers: {\n    Accept: 'application/pdf',\n  },\n});\n```. ",
    "psachs21": "I agree with @bierik, it would be really nice to be able to extend existing instances, though ordering is in question. I think the safest bet is to inherit your extended interceptors and if you override them, then they no longer trigger. Though it would be nice to optionally trigger previous interceptors, similar to a super() call. This allows the developer to control the ordering.. @nickuraltsev any idea when the next release will be? Looking to use these new typings.. Awesome!\nOn Fri, Oct 20, 2017 at 11:03 AM, Nick Uraltsev notifications@github.com\nwrote:\n\n@psachs21 https://github.com/psachs21 Hopefully, this weekend\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/axios/axios/pull/1061#issuecomment-338232792, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AK61gD5EBfvqq2fES7-csUVOo-J_-Lm7ks5suLZSgaJpZM4PGbNr\n.\n. Closing because #1061 fixes it just fine.. Closing because #1061 fixes it just fine.. Ah, I missed that PR. Awesome! And it's merged!. Ah, I missed that PR. Awesome! And it's merged!. \n",
    "EvanK": "What about a convenience function to pull in interceptors from an existing instance:\n```js\n// from the default instance\nlet api = axios.create({baseUrl:\"http://internal.mycompany.com\"});\napi.interceptors.assimilate(axios);\n// or from another created instance\nlet thirdParty = axios.create({baseUrl:\"https://partner.example.com\"});\nthirdParty.interceptors.assimilate(api);\n```\nOn top of that, you could explicitly pull interceptors from the default instance with a config option:\njs\nlet api = axios.create({defaultInterceptors:true});. ",
    "AuthorProxy": "please add this feature!. I have code like this:\n```\naxios.interceptors.response.use(undefined, err => {\n  console.log('First');\n  return Promise.reject(err);\n});\nlet axiosInstance;\naxiosInstance = axios.create({ baseURL: BACKEND_SERVICES.SPA_BACKEND });\naxiosInstance.interceptors.response.use(undefined, err => {\n  console.log('Second');\n  return Promise.reject(err);\n});\nconsole.log(axiosInstance.interceptors.response);\n```\nAnd after creating new instance - interceptors has not been copied from default axios, I see only Second on console and single interceptor at console.log..\nFurthermore, when I modify code like this:\n```\nconst respInt = axios.interceptors.response.use(undefined, err => {\n  console.log('First');\n  return Promise.reject(err);\n});\nlet axiosInstance;\naxiosInstance = axios.create({ baseURL: BACKEND_SERVICES.SPA_BACKEND });\naxiosInstance.interceptors.response.use(respInt);\naxiosInstance.interceptors.response.use(undefined, err => {\n  console.log('Second');\n  return Promise.reject(err);\n});\nconsole.log(axiosInstance.interceptors.response);\n```\nI can see two interceptors at console.log(), but I still don't see First... \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c \u043c\u043e\u0436\u043d\u043e?. \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c \u043c\u043e\u0436\u043d\u043e?. ",
    "Charles-Hang": "please add this feature! I don't want to copy, please. ",
    "Alexandre-Georges": "I have had a similar issue, it seems like the axios instance is different when the interceptor is added and when a call is performed.\nYou also probably want to have a better handling of the 401 in the interceptor.\nI found a workaround for the not triggered interceptor although it is probably a bug, I add the interceptor to the instance itself:\nconst instance = axios.create();\ninstance.interceptors.response.use((response) => {\n  console.log(`response ${response}`);\n  return response;\n}, (error) => {\n  console.log(`error ${error}`);\n  return Promise.reject(error);\n});. ",
    "packytagliaferro": "@f-desroches  any luck with this? I have this in my code:\n```\nwindow.axios.interceptors.response.use(function (response) {\nconsole.log(response);\n\nreturn response;\n\n}, function (error) {\nif( error.response.status == 401 ){\n    store.commit('logout');\n}\n\nreturn Promise.reject(error);\n});\n``\nWhich works on refresh, but on the first call I just get the401` error. If I refresh and run it works???. ",
    "LoganBarnett": "The connection was reset, so there is no response. You'll want to look at the error's code property for ECONNRESET and handle that case appropriately.. ",
    "lucysyt": "i don\u2018t know\n------------------ \u539f\u59cb\u90ae\u4ef6 ------------------\n\u53d1\u4ef6\u4eba: \"Mary Heng\";notifications@github.com;\n\u53d1\u9001\u65f6\u95f4: 2017\u5e747\u670812\u65e5(\u661f\u671f\u4e09) \u4e2d\u53481:24\n\u6536\u4ef6\u4eba: \"mzabriskie/axios\"axios@noreply.github.com; \n\u6284\u9001: \"Subscribed\"subscribed@noreply.github.com; \n\u4e3b\u9898: [mzabriskie/axios] Using Vue to upload image using Formdata to server(#997)\nHi all,\n When I want to upload an image and send the other data using FormData. Axios seems to serialise the image. Therefore, when i upload the image using Axios, the image is inside the body's payload as a string. As a result, I'm unable to use Multer on the server side to retrieve the uploaded image from the request.\nThis is my HTML code:\n \nThis is my Vue code:\n export default () {   name: 'app',   data () {     image: ''   },   methods: {       onFileChange (e) {       var files = e.target.files || e.dataTransfer.files       if (!files.length) {         return       }       // console.log(files[0])       // var x = files[0]       return this.createImage(files[0])       // return new Buffer(x)     },     createImage (file) {       // var image = new Image()       var reader = new FileReader()       var vm = this       reader.onload = (e) => {         // vm.image = e.target.result         vm.image = file.toString('base64')         console.log(vm.image)       }       reader.readAsDataURL(file)     },     submitStaff () {       const formData = new FormData()       formData.append('file', this.image)       formData.append('name', this.data.name)       formData.append('username', this.data.username)       formData.append('password', this.data.password)       axios.post('api/myApiUrl', formData)         .then(function (response) {           console.log(response)         })         .catch(function (error) {           console.log(error)         })       } }\nRequest Payload (Error with Vue)\nRequest Payload (Successful with Postman) (This is what i want)\nHow do i go about doing this? I have posted this on Stackoverflow too.\n https://stackoverflow.com/questions/45034456/axios-for-vue-not-uploading-image-to-server\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.. you can set a \"console.log(response)\" and see has a error\n------------------ \u539f\u59cb\u90ae\u4ef6 ------------------\n\u53d1\u4ef6\u4eba: \"SnowFlowers\";notifications@github.com;\n\u53d1\u9001\u65f6\u95f4: 2017\u5e748\u670819\u65e5(\u661f\u671f\u516d) \u4e2d\u534811:23\n\u6536\u4ef6\u4eba: \"mzabriskie/axios\"axios@noreply.github.com; \n\u6284\u9001: \"Subscribed\"subscribed@noreply.github.com; \n\u4e3b\u9898: [mzabriskie/axios] https rquest with cdn return no statusText inheader (#1050)\ni used interceptors to verify the response with the response.statusText. It was ok for the http request.but i got empty string when i use https.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.. ",
    "RupenAnjaria": "Agree with @robodude.. ",
    "marcus-sa": "Just recoded it all to create a new HTTP instance instead of it being static.\nSame error occurs, but when I console.log this.axios.defaults before doing a request, it says the params exists in the axios instance, but they don't get appended to the url.. ",
    "cfjedimaster": "I just ran into this as well and was pretty surprised. Using default params for APIs is pretty common. Any simple workaround (outside of adding it to my get()) call?. ",
    "pbarbiero": "@rubennorte sure, I need some guidance however. Is it just a matter of clearing the timeout on abort in that error callback if aborting?. @emilyemorehouse I hate to bother you, but any chance you can get us moving forward on this one?. ",
    "ar412": "can someone please show what is to be done in nodejs app??. @binki if axios is being used to send a post request at a restapi with some data , then how to retreive that data in the rest api (which is inside an express application).. ",
    "westofpluto": "Got error message: form.getHeaders() is not a function. Got error message: form.getHeaders() is not a function. ",
    "bstolarz": "@binki \nHey! I have a hapi.js server in which I want to POST an image file stored in a variable by using fs.readFile(path).\nI am not able to make it work sending that as FormData()\nThis is my code:\n```\nfs.readFile(__dirname+'/../static/lisa_server.jpg', (error, imageData) => {\n          var form = new FormData()\n        form.append('file', imageData,  {\n        filename: 'unicycle.jpg', // ... or:\n        filepath: '/../static/lisa_server.jpg',\n        contentType: 'image/jpg',\n        knownLength: 19806\n      })\n\n```\nThen I send the form as the body of the request and I set options['Content-Type'] = 'multipart/form-data'\nCould you help out?\nMuch appreciated!. @binki \nHey! I have a hapi.js server in which I want to POST an image file stored in a variable by using fs.readFile(path).\nI am not able to make it work sending that as FormData()\nThis is my code:\n```\nfs.readFile(__dirname+'/../static/lisa_server.jpg', (error, imageData) => {\n          var form = new FormData()\n        form.append('file', imageData,  {\n        filename: 'unicycle.jpg', // ... or:\n        filepath: '/../static/lisa_server.jpg',\n        contentType: 'image/jpg',\n        knownLength: 19806\n      })\n\n```\nThen I send the form as the body of the request and I set options['Content-Type'] = 'multipart/form-data'\nCould you help out?\nMuch appreciated!. @binki \nI managed to set the header content-length in the lowest layer and I don't get that error anymore.\nNow that I don't get a 411 from the server, I got back to the error I once had 400- \"No Files Provided\".\nThis is what the request looks like\nStarting Request\n{ adapter: [Function: httpAdapter],\n  transformRequest: { '0': [Function: transformRequest] },\n  transformResponse: { '0': [Function: transformResponse] },\n  timeout: 5000,\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n  maxContentLength: -1,\n  validateStatus: [Function: validateStatus],\n  headers:\n   { common: { Accept: 'application/json, text/plain, */*' },\n     delete: {},\n     get: {},\n     head: {},\n     post: { 'Content-Type': 'application/json' },\n     put: { 'Content-Type': 'application/json' },\n     patch: { 'Content-Type': 'application/json' },\n     'User-Agent': 'trojan server 1.0',\n     'X-Origin-Panamera': 'Staging',\n     'Content-Length': 25247 },\n  baseURL: 'https://letgoar-a.akamaihd.net/api/v1',\n  method: 'post',\n  url: 'https://<baseDomain>/api/v1/images',\n  data:\n   FormData {\n     _overheadLength: 218,\n     _valueLength: 25247,\n     _valuesToMeasure: [],\n     writable: false,\n     readable: true,\n     dataSize: 0,\n     maxDataSize: 2097152,\n     pauseStreams: true,\n     _released: false,\n     _streams:\n      [ '----------------------------677738213014296377492349\\r\\nContent-Disposition: form-data; name=\"file\"; filename=\"/Users/brenda/repos/qreator2/qreator/trojan-server/src/static/lisa_server.jpg\"\\r\\nContent-Type: image/jpg\\r\\n\\r\\n',\n        <Buffer ff d8 ff e0 00 10 4a 46 49 46 00 01 01 01 00 48 00 48 00 00 ff e2 11 2c 49 43 43 5f 50 52 4f 46 49 4c 45 00 01 01 00 00 11 1c 61 70 70 6c 02 00 00 00 ... >,\n        [Function: bound ] ],\n     _currentStream: null,\n     _boundary: '--------------------------677738213014296377492349' },\n  'Content-Type': 'multipart/form-data' }\nHope you check this out. To you, does this look like a reasonable request?\nThanks in advance. @binki \nI managed to set the header content-length in the lowest layer and I don't get that error anymore.\nNow that I don't get a 411 from the server, I got back to the error I once had 400- \"No Files Provided\".\nThis is what the request looks like\nStarting Request\n{ adapter: [Function: httpAdapter],\n  transformRequest: { '0': [Function: transformRequest] },\n  transformResponse: { '0': [Function: transformResponse] },\n  timeout: 5000,\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n  maxContentLength: -1,\n  validateStatus: [Function: validateStatus],\n  headers:\n   { common: { Accept: 'application/json, text/plain, */*' },\n     delete: {},\n     get: {},\n     head: {},\n     post: { 'Content-Type': 'application/json' },\n     put: { 'Content-Type': 'application/json' },\n     patch: { 'Content-Type': 'application/json' },\n     'User-Agent': 'trojan server 1.0',\n     'X-Origin-Panamera': 'Staging',\n     'Content-Length': 25247 },\n  baseURL: 'https://letgoar-a.akamaihd.net/api/v1',\n  method: 'post',\n  url: 'https://<baseDomain>/api/v1/images',\n  data:\n   FormData {\n     _overheadLength: 218,\n     _valueLength: 25247,\n     _valuesToMeasure: [],\n     writable: false,\n     readable: true,\n     dataSize: 0,\n     maxDataSize: 2097152,\n     pauseStreams: true,\n     _released: false,\n     _streams:\n      [ '----------------------------677738213014296377492349\\r\\nContent-Disposition: form-data; name=\"file\"; filename=\"/Users/brenda/repos/qreator2/qreator/trojan-server/src/static/lisa_server.jpg\"\\r\\nContent-Type: image/jpg\\r\\n\\r\\n',\n        <Buffer ff d8 ff e0 00 10 4a 46 49 46 00 01 01 01 00 48 00 48 00 00 ff e2 11 2c 49 43 43 5f 50 52 4f 46 49 4c 45 00 01 01 00 00 11 1c 61 70 70 6c 02 00 00 00 ... >,\n        [Function: bound ] ],\n     _currentStream: null,\n     _boundary: '--------------------------677738213014296377492349' },\n  'Content-Type': 'multipart/form-data' }\nHope you check this out. To you, does this look like a reasonable request?\nThanks in advance. ",
    "brenda-stolarz-olx": "@binki \nHey, thanks for your response. I corrected the things you mentioned, so now my code is\n```\nfs.readFile(__dirname+'/../static/lisa_server.jpg', (error, imageData) => {\n          var form = new FormData()\n      form.append('file', imageData, {\n           filepath: __dirname+'/../static/lisa_server.jpg',\n           contentType: 'image/jpg'\n\n      })\n\n```\nBut the server throws 411 \"Length is required\" (I also tried fs.createReadStream which appears to be fully supported by FormData, but I get the same length error).. ",
    "mnowik": "I followed this helpful research on Axios and the final solution works for me (link)\nHere is the copy / paste of it:\n```JS\nimport fs from 'fs';\nimport FormData from 'form-data';\nimport axios from 'axios';\nlet data = fs.createReadStream(__dirname + '/test.jpg');\nlet form = new FormData();\nform.append('type','image');\nform.append('media',data,'test.jpg');\nfunction getHeaders(form) {\n    return Promise((resolve, reject) => {\n        form.getLength((err, length) => {\n            if(err) { reject(err); }\n            let headers = Object.assign({'Content-Length': length}, form.getHeaders());\n            resolve(headers);\n         });\n    });\n}\ngetHeaders(form)\n.then((headers) => {\n    return axios.post(url, form, {headers:headers})\n})\n.then((response)=>{\n    console.log(response.data)\n})\n.catch(e=>{console.log(e)})\n```\n. ",
    "smplyjr": "@westofpluto, i get the same error too. @binki, any thoughts?\nThe error\nform.getHeaders is not a function. ",
    "heldrida": "For nodejs users solve by using the querystring lib, as follows:\nconst querystring = require('querystring')\naxios\n  .post(URL, querystring.stringify(data))\n  .then((response) => ...)\n  .catch((error) => ...). ",
    "sthuber90": "@heldrida @ashok-sc How do I need to use querystring or qs to upload a file with axios? I'm using axios to upload files from an AWS Lambda and I obviously don't have access to File object from there. ",
    "User3759685": "I got this fixed by using django-cors-headers package in my Django API backend. No bug in axios, though I think OPTIONS headers should probably still be customizable.. ",
    "bram1028": "Are you calling preventDefault() on the form submit event? Something like this:\njavascript\n$('form').on('submit', (e) => {\n    e.preventDefault()\n    axios.delete(...)\n}). ",
    "Pyrolistical": "I wish i could write first.headers.authorization = 'foo' and have it change for that instance. ",
    "emaincourt": "Well the only way to bypass this limitation seems to be forcing the header value :\njavascript\nfirst.get('/posts', {\n    headers: {\n        authorization: 'foo',\n    },\n}). ",
    "dmitry": "Simple implementation is here: https://github.com/bernawil/axios-concurrency. ",
    "zer0tonin": "On my side I can run axios without issues in create-react-app.\nSometimes this kind of issues can be solved by a simple : \nrm -Rf node_modules\nnpm install\nAlso make sure that you have the latest npm version.. ",
    "jenniferkaplannyc": "Thank you! I was working with NPM version 5.0.0. However, now that I upgraded to NPM version 5.3.0 it is fixed.. ",
    "Obsessive-Coder": "you shouldn't have to do this. Does anybody release quality code?. ",
    "rsimp": "@rubennorte I don't believe you published this correctly. I can see the updated index.d.ts on github, but npm is serving up an old version still.. ",
    "mmarvick": "A new version hasn't been released yet: https://github.com/axios/axios/releases. A new version hasn't been released yet: https://github.com/axios/axios/releases. ",
    "marcacyr": "Just came looking for answers to this exact issue. Finding that an HTTP error from the ELB is coming through as:\nError: Network Error\n    at createError (app.3a4d14b\u2026.js:106920)\n    at XMLHttpRequest.handleError (app.3a4d14b\u2026.js:106778)\nThis really throws a wrench in trying to show users messages specific to an ELB timeout (504). . ",
    "ZhangYiJiang": "That warning means that the Promise is getting rejected - you should attach a rejection handler to catch it and see what the error is \ngetBooks()\n    .then(...)\n    .catch(function(error) { \n        // Do something with error, like logging\n    });. ",
    "AlbinoDrought": "This is more-so a browser security feature, and doesn't really have much to do with axios specifically.\nTo bypass prefetch requests, and skip CORS (Access-Control-Allow-Origin), see here.\nIn short, you can perform GET, HEAD, or POST requests, and you can't set completely custom headers. For example, if you do a simple axios.get('http://example.com'), it will work cross-domain because it doesn't trigger a prefetch request.. The function for the methods that accept data, post, put, and patch, looks like this:\njs\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n};\nTo attach headers, you could do the following:\njs\naxios.post(apiPath, params, {\n  headers: {\n    'Foo': 'bar',\n  },\n});\nAlternatively, you could swap the method you are calling, axios.post, with axios.request:\njs\naxios.request('POST', {\n  data: params,\n  headers: {...},\n});. ",
    "herryliq": "@AlbinoDrought Thanks for your suggestion, I had found how to set custom headers with axios instance as follows:\nasync createTicketPriceException(params, operatorCode) {\n    let requestParams = {\n        data: params\n    }\n    let config = {\n        headers: {\n            operatorCode: operatorCode\n        }\n    }\n    return await httpClient.postWithJsonData('/ticket/price/exception', params, config)\n}\n\nIt was worked well for me.\n. @AlbinoDrought Thanks for your suggestion, I had found how to set custom headers with axios instance as follows:\nasync createTicketPriceException(params, operatorCode) {\n    let requestParams = {\n        data: params\n    }\n    let config = {\n        headers: {\n            operatorCode: operatorCode\n        }\n    }\n    return await httpClient.postWithJsonData('/ticket/price/exception', params, config)\n}\n\nIt was worked well for me.\n. ",
    "cristianrosu": "@hackidozone it seems to me like you're trying to post object data, not an array. Remove the square brackets and it should work.\n{\n  \"resource\":  { \n    \"login_id\": \"\", \n    \"name\": \"\", \n    \"username\": \"\",\n    \"photo_url\": \"\", \n    \"email\": \"\" }\n}. ",
    "hackidozone": "nope dude, resource is a key for json array. its solved guys. thanks btw. ",
    "yugasun": "@hackidozone Did you post your json data using qs to stringify?. @TitanKing You can refer to my vue-axios-plugin code:\nhttps://github.com/yugasun/vue-axios-plugin/blob/master/index.js#L77. @TitanKing You're welcome~\nBTW, if you use axios with projects created by vue-cli, you can try to use my vue-axios-plugin, it's helpful~. ",
    "TitanKing": "It would be nice if you could post your solution. Everyone helps you out, the least you can do is give back a little.. Thanks that is very kind of you :). Well thank you very much.. ",
    "omarqe": "@hackidozone really hope that you can share your solution.. ",
    "seedlinktech-william": "I have a workaround way, see: https://github.com/axios/axios/issues/1641#issuecomment-442723844. I have met same situation.  What I used for workaround is delete the data in config, like:\n```javascript\nlet url = '/dsk',\nlet data = {\n    dsk: ['a1', 'a2']\n}\nlet config = {\n    baseURL: 'http://8.8.8.8',\n    // data\n}\naxios.post(url, data, config).then(resp => { console.log(resp.config.data) })\n`` \nWhenaxios.postbe invoked, it will check its arguments and compare thedatawithconfig.data.  Ifconfig.datais false value, it will using thedatadirectly.  Then themerge` will not be called.. ",
    "Kunoky": "It turns out that I need to set the Access-Control-Expose-Headers  header on the server:\nAccess-Control-Expose-Headers: Access-Token, Uid. ",
    "abraztsov": "Finally. This is problem with the CORS headers in response.. @Mohanrau changes done on backend side. Don't know exactly what it was.. ",
    "Mohanrau": "@abraztsov can u help me on the CORS what r the changes u did't.can u share if can. ",
    "Luckyfella73": "I got help from a friend - it turned out that I placed the return at the wrong place..\nThis way it works:\n```\nexport function fetchData(ajaxUrl, postParams) {\n  const params = new URLSearchParams()\n  _.forEach(postParams, (value, key) => {\n    params.append(key, value)\n  })\nreturn axios.post(ajaxUrl, params) // return here\n      .then(response => response.data)\n      .catch(error => error)\n}\n```\nand the calling block:\nfetchData(ajaxUrl, postParams)\n    .then((response) => {\n        this.myCallbackFunction(response)\n    })\n    .catch(error => error)\nOr maybe return the response completely and just pass response.data to the callback function... ",
    "liCat": "I got the same error.. ",
    "pbhisay": "Same here.... the new project surely is giving a lot of issues.. ",
    "zhangzhen": "This happened when pressing Enter in the address bar.. the request is hanging on Chromium, but not on Firefox. It's weird!. ",
    "DmitryGulak": "I got same error when go back in route history.\nI think it's browser problem, when he trying to get cache of api request that seen before.\nCreated disk cache entry of api request:\nt=639965 [st= 0] +DISK_CACHE_ENTRY_IMPL  [dt=11]\n                  --> created = true\n                  --> key = \"http://127.0.0.1:5000/some/api/method\nt=639976 [st=11]    ENTRY_DOOM\nt=639976 [st=11] -DISK_CACHE_ENTRY_IMPL\nAnd trying get this cache when going back in history and got same request:\nt=63083 [st=0] +SOCKET_POOL_CONNECT_JOB  [dt=1]\n                --> group_name = \"127.0.0.1:5000\"\nt=63083 [st=0]   +SOCKET_POOL_CONNECT_JOB_CONNECT  [dt=1]\nt=63083 [st=0]      HOST_RESOLVER_IMPL_REQUEST  [dt=1]\n                    --> address_family = 0\n                    --> allow_cached_response = true <---- Look here\n                    --> host = \"127.0.0.1:5000\"\n                    --> is_speculative = false\nt=63084 [st=1]      CONNECT_JOB_SET_SOCKET\n                    --> source_dependency = 1723300 (SOCKET)\nt=63084 [st=1]   -SOCKET_POOL_CONNECT_JOB_CONNECT\nt=63084 [st=1] -SOCKET_POOL_CONNECT_JOB\nBut i didn't found any way to avoid this. ",
    "binarykitchen": "nah, the es6 rest operator helps:\njs\naxios.spread((...responses) => {\n  responses.each(/* do something */)\n}). ",
    "themre": "I also came across this issue. when I'm doing POST and server returns code 500, I get no response, although I see response on my network tab. Here is fiddle demo: https://jsfiddle.net/8r3dh6hw/61/. @raygesualdo thank you for this detailed explanation! closing the issue.. ",
    "gmkhussain": "Try this.. it will work for POST data via axios\n   const params = {\n              'longitude': -6.3922782,\n              'latitude': 106.8268856\n    };\n\n    axios.post('http://localhost/react/submit.php', params, {\n         headers: {\n              'content-type': 'application/json',\n         },\n    }). Try this.. it will work for POST data via axios\n\n   const params = {\n              'longitude': -6.3922782,\n              'latitude': 106.8268856\n    };\n\n    axios.post('http://localhost/react/submit.php', params, {\n         headers: {\n              'content-type': 'application/json',\n         },\n    }).\n",
    "ciprianvf9": "\nheaders: { 'content-type': 'application/json', }\n\nYou're my hero!. ",
    "gauravsbagul": "thank you! it worked @gmkhussain . ",
    "Macilias": "JS word is cruel, reposnseType is declared directly while content-type must sit in the header.\nThanks Man!. ",
    "iaminvictus1993": "mark, i meet the same problem, prod mode is good, but dev mode error. ",
    "darthmooguy": "I've got the same problem too! Using create-react-app with the webpack-dev server, the requests always fails with a \"Network Error\" in Edge, but not in other browsers. When I run the compiled \"dist\" version, eveything is fine.. ",
    "Orange-way": "I've got the same problem too! How do you solve it finally?. I've got the same problem too! How do you solve it finally?. ",
    "leopku": "I had same issue of multi axios instance with shared headers.\nIs there anyway to fixed this issue currently?. I had same issue of multi axios instance with shared headers.\nIs there anyway to fixed this issue currently?. I had same issue of multi axios instance with shared headers.\nIs there anyway to fixed this issue currently?. I found a small deepcopy lib/util - https://github.com/sasaplus1/deepcopy.js\nCan put this deepcopy to dependency?. I found a small deepcopy lib/util - https://github.com/sasaplus1/deepcopy.js\nCan put this deepcopy to dependency?. Two solutions:\n1. Each client applicate different credential by himself. By this way, Sever side should add oauth 2.0 like feature.\n2. A common credential shared with all clients. The credential could be secured or compressed.. Two solutions:\n1. Each client applicate different credential by himself. By this way, Sever side should add oauth 2.0 like feature.\n2. A common credential shared with all clients. The credential could be secured or compressed.. ",
    "datfinesoul": "Any chance this will be released in the near future?  I believe it will fix a few timeout issues I've run into, when the request errors.. Any chance this will be released in the near future?  I believe it will fix a few timeout issues I've run into, when the request errors.. ",
    "TinOo512": "Any news on that? Having the same issue. ",
    "flyyang": "i think this should be merged cause axios is still beta ... lol. i think this should be merged cause axios is still beta ... lol. ",
    "qm3ster": "Should the following in the README example:\njs\naxios.all([getUserAccount(), getUserPermissions()])\n  .then(axios.spread(function (acct, perms) {\n    // Both requests are now complete\n  }));\nbe replaced with this instead:\njs\nPromise.all([getUserAccount(), getUserPermissions()])\n  .then(function ([acct, perms]) {\n    // Both requests are now complete\n  });\nor this:\njs\nconst [acct, perms] = await Promise.all([getUserAccount(), getUserPermissions()])\n// Both requests are now complete\n. @ChadTaljaardt there's await in the docs already, but the .all example is still axios.all :pizza: \nhttps://github.com/axios/axios/blob/master/README.md#example. ",
    "ChadTaljaardt": "@qm3ster i think the second version is better. \nconst [acct, perms] = await Promise.all([getUserAccount(), getUserPermissions()]) . @emilyemorehouse \nThank you for your response, it was very readable and helpful, however i dont think its the correct example for my use case. \nI have taken your code and adapted it more to my use case. \n```\nvar axios = require(\"axios\")\nconst _ = require('lodash');\nvar CancelToken = axios.CancelToken;\nvar call1 = CancelToken.source();\n//how many seraches to perform\nvar iteration = 10;\n//This loop is used to emulate the consecutive user searches. \nfor (i = 0; i < iteration; i++) {\n    //perform search\n    axios.get('http://slowwly.robertomurray.co.uk/delay/3000/url/https://jsonplaceholder.typicode.com/posts/1', {\n        cancelToken: call1.token\n    }).then((response) => {\n        console.log(response.title)\n    }).catch(function(thrown) {\n        if (axios.isCancel(thrown)) {\n            console.log('First request canceled', thrown.message);\n        } else {\n            // handle error\n        }\n    });\n}\n```\nSo in this example, i have a loop which runs 10 times, each time a request is made. This is to mimic the debounce sending requests. \nThe system should send 10 network requests, each request cancelling the previous request until the last one has run. \nSo the network requests will be like this \n1 ----> 2 ----> 3----> .... ---> 10.\nBecause each request is made before the previous one is returned as there is no delay between the requests, only 1 response should be made with 9 cancelled requests. The response should be the last request as it has not been cancelled yet.\nThe example provided above is not quite right because of the use of two tokens for different requests. \n@Axnyff I dont know if youre still following this thread but here is a easier to understand example. ^^\nThanks a lot for your help with this issue. . Thanks @Axnyff and @emilyemorehouse  for your help. \nI have implemented the solution and this is now fully working.. ",
    "cyrilchapon": "This is still true at this time of writing, and this is a major documentation issue, isn't it ?. ",
    "SnowFlowers": "@lucysyt \u6211\u77e5\u9053\u95ee\u9898\u5728\u54ea\u513f\uff0c\u53ea\u662f\u786e\u5b9a\u4e00\u4e0b\u8fd9\u662f\u4e0d\u662f\u4e2abug\u3002. @lucysyt \u6211\u77e5\u9053\u95ee\u9898\u5728\u54ea\u513f\uff0c\u53ea\u662f\u786e\u5b9a\u4e00\u4e0b\u8fd9\u662f\u4e0d\u662f\u4e2abug\u3002. ",
    "golddragon007": "Finally, I found what is the solution:\nconn.get(\"url\", {\n    auth: false,\n});\n. ",
    "foundryspatial-duncan": "Woah! I didn't know that. Thanks for the quick response!. ",
    "jonlambert": "Has there been any movement on this? Currently using a basic wrapper around axios to get similar functionality but would be great to be able to do this natively \ud83c\udf89. ",
    "christopher1986": "I don't know if this is desired behaviour but when using async/await my IDE (IntelliJ) indicates that response is a User object. In the second example everything works as expected and reponse is a AxiosPromise<User> object.\nMaybe I am doing something wrong but I would have expected that async/await would also return a AxiosPromise object.\n```Javascript\nimport axios from 'axios';\nasync function asyncBroken() {\n    const response = await axios.get.get('http://localhost/users');\n    response.data // Unresolved variable data here because User is inferred.\n}\nfunction getUsers() {\n    axios.get.get('http://localhost/users').then((response) => resonse.data);\n}\n```\n. ",
    "KrishnaPG": "Came across this while facing similar problem, and here is what works:\nthis.axiosInstance.interceptors.response.use(null, error => { \n    if (error.response && (error.response.status === 401 || error.response.status == 403))\n        return this.login().then(() => this.axiosInstance.request(error.config)); // make the request again after updating the login token\n    return Promise.reject(error); // <- important piece\n});\nI noted that you have to return the promise.reject() in the interceptor for the catch handler to work at the calling site.. ",
    "athrunsun": "@robaxelsen @rubennorte I don't think this is covered in \"Interceptors\" section in the documentation.\nThe OP is asking if we can return a rejected promise inside a response interceptor, and most important, he is using res.data.code, NOT res.status. I think that interceptor is used to handle a response with 200 http status code and { code: 401 } as response body, so there's no chance to catch that \"error\" in the documented way. And that's why the OP is asking if we can specifically return a rejected promise to handle a custom error code in response data.\nI would add up to the OP's question that, can we throw an Error inside response interceptor? Can that error be caught in a catch call afterward? e.g.:\njavascript\naxios.request(...).catch(error => {...})\n@luxueyan Even if we can do both, I prefer the way to return a rejected promise, since it accepts object as a parameter (Promise.reject([errorMessage, response])), while Error constructor accepts only string.. @robaxelsen @rubennorte I don't think this is covered in \"Interceptors\" section in the documentation.\nThe OP is asking if we can return a rejected promise inside a response interceptor, and most important, he is using res.data.code, NOT res.status. I think that interceptor is used to handle a response with 200 http status code and { code: 401 } as response body, so there's no chance to catch that \"error\" in the documented way. And that's why the OP is asking if we can specifically return a rejected promise to handle a custom error code in response data.\nI would add up to the OP's question that, can we throw an Error inside response interceptor? Can that error be caught in a catch call afterward? e.g.:\njavascript\naxios.request(...).catch(error => {...})\n@luxueyan Even if we can do both, I prefer the way to return a rejected promise, since it accepts object as a parameter (Promise.reject([errorMessage, response])), while Error constructor accepts only string.. ",
    "indolent-developer": "this causes my build to fail. babel doesnt copy package.json file in final version. may be we can avoid this call ?. ",
    "sam3d": "LGTM \ud83d\udc4d\nWould love to have this feature. Any progress or updates on this? Looks like a pretty straightforward patch and I've tested locally with success.\n/cc @nickuraltsev . @emilyemorehouse Don't suppose you could take a look at this? \ud83d\ude04 . Afraid I won't be able to get to it until tomorrow, so if somebody else can verify this behaviour faster than that feel free to! Otherwise I'll report back tomorrow whether there's any erroneous or unexpected behaviour.\nThank for you for taking a look, will get back to you soon!. I actually used the express library! You can just use a filesystem path instead of a port to create a new socket:\n```javascript\nconst express = require(\"express\");\nconst app = express();\nconst SOCK = \"/var/run/test.sock\";\napp.get(\"/\", (req, res) => {\n    res.send(\"Hello, world!\");\n});\napp.listen(SOCK, err => {\n    if (err) throw err;\n    console.log(Listening on socket ${SOCK});\n});\n```\nThen query the socket on /var/run/test.sock.. ",
    "wood1986": "Any updates about this PR?. ",
    "acupofspirt": "It is awesome pr. \nWhen you have Vue/React SSR, your node process make requests to endpoint like http://foo.bar/api/smth which is processed by, say, ruby process. Even if node and ruby hosted on the same environment, there will be full dns lookup, rtt and other boring words. \nIf we make request to nix socket we can save much time for all that network stuff.\n@rubennorte please look at pr. ",
    "mikezahno": "+1. ",
    "jormar": "+1. ",
    "natee": "@nickuraltsev \naxios cancel request demo\nOpen the console, you could see that api/register has been canceled, but api/login have not been canceled.\nIgnore the cross region.\n\n```javascript\nvar CancelToken = axios.CancelToken;\nvar source = CancelToken.source();\naxios.get('http://zhaoke.proxy.beeceptor.com/api/register', {\n     cancelToken: source.token\n }).then((response)=>{\n}).catch((error) => {\n  if (axios.isCancel(error)) {\n    console.log('get Request canceled');\n  }\n});\naxios.post('http://zhaoke.proxy.beeceptor.com/api/login', {\n     cancelToken: source.token\n }).then((response)=>{\n}).catch((error) => {\n  if (axios.isCancel(error)) {\n    console.log('post Request canceled');\n  }\n});\nsource.cancel();\n. Updated\n[POST worked demo](http://jsbin.com/nigofoj/3/edit?js,console)\nIn post method, `cancelToken` should not be a param, but be a config.Then it works.javascript\naxios.post('http://zhaoke.proxy.beeceptor.com/api/login',{\n  // params\n}, {\n     cancelToken: source.token\n }).then((response)=>{\n}).catch((error) => {\n  if (axios.isCancel(error)) {\n    console.log('post Request canceled');\n  }\n});\n```. ",
    "MidnightP": "@varmeh How did you fix this? . is this helpful?\nhttps://stackoverflow.com/questions/46288437/set-cookie-header-has-no-effect\nOn Mon, 25 Sep 2017 at 22:28, Chris Gillis notifications@github.com wrote:\n\nAlso curious\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mzabriskie/axios/issues/1076#issuecomment-332002134,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AVepSmu6HPCE7R-bdBHXU4wa12co56ekks5smAzWgaJpZM4PPYy9\n.\n. Why does it send an OPTIONS request and why is this closed?. \n",
    "chrisgillis": "Also curious. ",
    "rupesh1": "In hindsight this maybe another manifestation of: https://github.com/mzabriskie/axios/issues/812. In hindsight this maybe another manifestation of: https://github.com/mzabriskie/axios/issues/812. ",
    "KamiKillertO": "\ud83e\udd14 it's seems that utils.merge erase the httpAgent prototype.. There's a pending PR (#1295) that should fix this issue. . ",
    "david4City": "Anything on this subject ?. ",
    "cybercussion": "I got this error on a self-signed cert.  Initially I attempted to use httpsAgent:   { rejectUnauthorized: false } but then opted to use httpsAgent:   new https.Agent({ rejectUnauthorized: false }) and the error went away.  Case someone else has that issue.. ",
    "Gcaufy": "Sorry, it's a long time, so I should close the issue, will reopen it if I have the issue again.. ",
    "kobezone": "sample question. ",
    "djlxiaoshi": "i met the same problem. ",
    "xpauline24": "same problem, how to resolve?. ",
    "FlorianBurgevin": "Same problem an idea ??. ",
    "stevenhurth": "Same here.. ",
    "Ruplahlava": "Any update here? I have the same issue. \nThe rest api i am contacting allows two types of content type and i need to set it.. If request is send like this, Content-Type header is missing in sent headers.\nconst params = {a:b}\n        const headers = {\n            'Content-Type': 'text/plain',\n        };\n        axios.delete(address, { params, headers })\n...\nWorkaround (bypasses if clause here: https://github.com/axios/axios/blob/master/lib/adapters/xhr.js#L121-L123):\nconst params = {a:b}\n        const headers = {\n            'Content-Type': 'text/plain',\n        };\n        axios.delete(address, { params, headers, data: params }). ",
    "Basaltq": "Okay I encountered this bug also. It seems like if you are sending json content with axios.delete(), it will strip the content away. You can bypass it also with using:\n```\naxios({\n    method: 'delete',\n    url: '/whatever',\n    data: content\n});\n. ",
    "johannesnagl": "Same here! I'm calling a JSONAPI.org conform API and I need to set the content-type of a delete call to application/vnd.api+json. This code is not working:\n```\naxios.defaults.headers.common['Accept'] = 'application/vnd.api+json';\naxios.defaults.headers.common['Content-Type'] = 'application/vnd.api+json';\naxios\n  .delete(/api/posts/${id}, {\n    withCredentials: true,\n  })\n  .then(response => {\n    // do something here\n  });\n```\nWhen passing data: null, or data: {}, it basically works that the content-type is set correctly, but then the API is returning another error (no payload allowed for DELETE request). . Same here! I'm calling a JSONAPI.org conform API and I need to set the content-type of a delete call to application/vnd.api+json. This code is not working:\n```\naxios.defaults.headers.common['Accept'] = 'application/vnd.api+json';\naxios.defaults.headers.common['Content-Type'] = 'application/vnd.api+json';\naxios\n  .delete(/api/posts/${id}, {\n    withCredentials: true,\n  })\n  .then(response => {\n    // do something here\n  });\n```\nWhen passing data: null, or data: {}, it basically works that the content-type is set correctly, but then the API is returning another error (no payload allowed for DELETE request). . ",
    "einarjohnson": "any news on this? having a very similar problem when calling resify endpoints. it expects the content-type to be set to application/json when calling DELETE. ",
    "dlandis": "@Khaledgarbaya Do you need any more info on this? I noticed it was still tagged as more-information-needed ?. ",
    "mbain": "Also experiencing an issue with this.. ",
    "whiteb38": "was having this issue also, this works for me:\n.delete(url, {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            data: JSON.stringify(data)\n        }). ",
    "orangemi": "Try error.data or error.status to get all data listed above.\nIt means the error rejected by promise is an error object not a plain object.\nYou can traversal this error object by using Object.keys(error).forEach(key => ...)\n. ",
    "m0ngr31": "Seems to be broken for me as well. Only keys are config and request. Can't get the status code.. I fixed the issue with mine. I was only sending back the response code and not any data with it (using Koa). Adding a response body made it work.. ",
    "baixiaoji": "I use the 0.17.1 log only having the config and request but the same version in my workmate's project having the response ! so sad! . I use the 0.17.1 log only having the config and request but the same version in my workmate's project having the response ! so sad! . ",
    "hoffin": "Using v0.17.1\nAlso the same here, error.response is undefined.\nObject.keys(error).forEach(key => console.log(key)) returns\nconfig, request, response\nbut error.response returns undefined.\nSo it's there but undefined.\n. ",
    "gankit": "I have the same issue. ",
    "rizqyhi": "I've got the same problem. Turns out it was CORS problem from my api server.. ",
    "gutomezencio": "Try error.config. ",
    "awsp": "Please kindly disregard my previous comment. \nStatus can actually be retrieved like this, \njs\nconst instance = axios.create({ \n  // ...options\n}); \ninstance.interceptors.response.use(response => response, \n  err => {\n    const {status} = err.response; \n    // 401 handling logic goes here\n  }\n\n+1 \nAt version 0.18\nSimilarly, I had a plain text for the error instead of an object. \nSo both error.response or error.status are undefined. \n\n. ",
    "hanvyj": "Also facing this issue:\njs\ntry {\n  const location = await axios.get(`https://api.postcodes.io/postcodes/${location}`);\n   ...stuff\n} catch (err) {\n  errorHandling.onError(err, response);\n}\nFails with:\n\nError:  { Error: Request failed with status code 404\n[1]     at createError (D:\\Projects\\Chiron\\node_modules\\axios\\lib\\core\\createError.js:16:15)\n\nWhat confuses me is that this isn't caught by the try-catch. Node even says:\n\n(node:9680) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 2)\n(node:9680) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n\nIt's like the try catch doesn't exist.... ",
    "tedgoddard": "I have the same issue in my application, but the above test case works fine. Here's the stack trace:\n(node:99470) UnhandledPromiseRejectionWarning: Error: Request failed with status code 500\n    at createError (/tmp/server/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/tmp/server/node_modules/axios/lib/core/settle.js:18:12)\n    at IncomingMessage.handleStreamEnd (/tmp/server/node_modules/axios/lib/adapters/http.js:201:11)\n    at IncomingMessage.emit (events.js:187:15)\n    at IncomingMessage.EventEmitter.emit (domain.js:442:20)\n    at endReadableNT (_stream_readable.js:1090:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)\n(This is on node 10.4). It seems possible to \"cure\" this by adding a .catch() to axios/lib/core/dispatchRequest.js:85. Perhaps this is the right approach, since the network events are asynchronous?. ",
    "cltsang": "Having the same problem here.\nI'm using node 10.7.0, react-native 0.55.4, axios 0.18.0\nA failed request from await axios.request(config) triggers catch block, but error argument is undefined.\nReverting to .catch(error => onError(error)) works as documented.. ",
    "sashahilton00": "Also having this problem, is there any fix planned? Currently it doesn't seem to be possible to reliably use this library with async/await. A sample snippet that I'm seeing this behaviour on is below. The console.log(error) has also been changed to console.log(JSON.stringify(error, null, 2)) to see what keys are present, with the following response:\n{\n  \"config\": {\n    \"transformRequest\": {},\n    \"transformResponse\": {},\n    \"timeout\": 0,\n    \"xsrfCookieName\": \"XSRF-TOKEN\",\n    \"xsrfHeaderName\": \"X-XSRF-TOKEN\",\n    \"maxContentLength\": -1,\n    \"headers\": {\n      \"Accept\": \"application/json, text/plain, */*\"\n    },\n    \"baseURL\": \"https://example.com/api\",\n    \"method\": \"get\",\n    \"url\": \"https://example.com/api/customers\"\n  },\n  \"request\": {}\n}\nit's as though axios isn't actually waiting for the request to execute, but rather returning the moment the request is fired?\nThe problematic snippet:\nasync function getCustomers() {\n  try {\n    return await axios.get('/customers')\n  } catch(error) {\n    console.log(error)\n    //Error logic here\n  }\n}. Ignore the above comment; being the smart cookie that I am, I failed to take into account the wonders of CORS when making requests in the dev environment, hence response was not being populated. Have just tested, this is now working fine. Thanks for the great library.. ",
    "hxzhao527": "\nIt will extract value named xsrfCookieName  from cookie and put it to next request header named xsrfHeaderName. Is that clear?. It should be \nconst client = axios.create({\n    headers: { 'Accept': 'text/html' },\n  })\nrefer config\n. ",
    "a-x-": "Yep\nNow I understand.\nThis note will be useful, I guess.. ",
    "nWidart": "Found the solution: https://github.com/mzabriskie/axios/issues/367#issuecomment-231080608\n\ud83d\udc4d . ",
    "zongzi531": "Sorry, I saw this error.\nWarning: Task \"eslint:target\" failed.\u0007 Use --force to continue.. ",
    "ngonzalvez": "Hi @ghprod, first of all I want to make clear that I'm not a contributor to this library nor I use it, but I was passing by and I saw this issue and decided to investigate the code a bit. \nAxios does not support that kind of encoding by default but it allows you to provide a custom serializer. You can accomplish this very easily with the following code:\n```js\n// Axios include here...\naxios.get('/user', {\n    params: {\n        filter: {post: 3, author: 12} \n    },\n    paramsSerializer: customSerializerFunc\n});\n```\nTo make it simpler, I googled a bit for querystring serializer libraries and found qs which has support for browsers and nodejs. You can use it as a serializer this way:\n```js\n// Include axios and qs here...\naxios.get('/user', {\n    params: {\n        filter: {post: 3, author: 12} \n    },\n    paramsSerializer: qs.stringify  // If this doesnt work, append .bind(qs) to the end of this line.\n});\n```\nMaybe you'll see this: filter%5Bpost%5D=3 instead of filter[post]=3, that's because URL encoding is enabled. You can disable it this way:\njs\naxios.get('/user', {\n    params: {\n        filter: {post: 3, author: 12} \n    },\n    paramsSerializer: function(params) {\n        return qs.stringify(params, { encode: false });\n    }\n});\nLet me know if it worked.\nRegards.. ",
    "ghprod": "It's works .. :+1: \nThanks a lot @ngonzalvez \nHave a great day :). It's works .. :+1: \nThanks a lot @ngonzalvez \nHave a great day :). ",
    "pmarrone": "Seems like this has been solved here https://github.com/axios/axios/pull/959. #959 seems to be a slightly different case.. I rebased the PR (https://github.com/axios/axios/pull/1095) fixing this issue to account for the changes in master.. This seems to have been solved here https://github.com/axios/axios/pull/959 is this correct?. @jasonswearingen this PR has conflicts with master and the new code looks like it's taking care of the issue. I'll run the tests again to check if I misread the conflicting code.. That's true. This fixed the specific case when you specify the agents.\nI'll update this shortly, it shouldn't be hard to rebase.. Thank you @jasonswearingen for bumping this PR. I updated the code to match the new master structure. The bug still exists in master. I hope this get's reviewed soon. \nThis should fix #1094\nI preserved the old PR branch here:\nhttps://github.com/pmarrone/axios/tree/fix/pass-agent-mixed-protocol-redirects-old. @robaxelsen @rubennorte could this be retagged as a bug, please?. ",
    "pazguille": "Hey @nickuraltsev, Any news about this PR? I'm using axios at a big company and I had to create a fork it to solve this issue.. ",
    "sakchhams": "I am having this issue still. Running the freshest copy of axios available via npm.. I am having this issue still. Running the freshest copy of axios available via npm.. ",
    "geiseri": "I am also seeing this with:\n\naxios 0.17.1\nelectron 1.8.2\nnode 6.10.3. \n",
    "SrPatinhas": "Is there any updates in this issue? . ",
    "sofuxro": "Why isn't this a practice then ?\nThe axios docs suggest using .catch() instead of the second callback to .then(). ",
    "Buzu": "~~If this is common practice, please say so in the docs. The docs have nothing that I found that suggest this behaviour, or that the preferred way to handle ajax-exclusive errors is to use the second param on then. This is definitely something that can easily surprise new comers. The \"fix\" is as easy as stating this behaviour in the docs.~~\nI will have to take back my comment. It all makes sense once you understand that axios uses native promises. You can read more about promisses here https://ponyfoo.com/articles/es6-promises-in-depth. Try adding a slash '/' right at the start of your url in your call to axios. Also, this seems to be a support question, not an issue with the library.. ",
    "marten-cz": "@libbyf Did you solved it? I'm now having the same problem.. @libbyf Did you solved it? I'm now having the same problem.. ",
    "libbyf": "@marten-cz no:(\nIt's bug of Axios, I saw that it is built into the code, they filter all elements that are equal to null.\nTemporary - I wrote the code for get method:\ngetDataFetcher(method, path, data) {\n        if  (method===\"GET\") {\n            url = path+ getRequestParamData(data)\n        }\n        return axiosmethod;\n    };\nconst getRequestParamData = (data) => {\n    let params = '';\n    if (data) {\n        const keys = Object.keys(data);\n        const firstData = ?${keys[0]}=${!isEmpty(data[keys[0]]) ? data[keys[0]] : ''};\n        const otherKeys = keys.splice(1);\n        params = otherKeys.reduce((prev, next) => prev + &${next}=${!isEmpty(data[next]) ? data[next] : ''}, firstData);\n    }\n    return params;\n};\nIt does not work for complex objects - a parameter that is itself an object\nfor example -it dost not work for profile object:\nconst params = {\nprofile: {profileId:5, name:\"profile\"},\nportfolioId: null,\nportfolioName: portfolio.name\n};. ",
    "ftbastler": "+1. ",
    "alinnert": "Just a thought: I also just had this idea while reading the Observable spec. The spec mentions a Symbol that allows an object to be converted into an Observable:\n~~~js\nconst obj = {\n  ...otherProps,\n  [Symbol.observable] () { return new Observable(...) }\n}\nObservable.from(obj)\n~~~\nPlus: RxJS has a method Observable.fromPromise()\nNow there are two options:\n1) Axios (either itself or a plugin) adds this property to every Promise returned by axios.\n2) Someone adds an ES proposal to add Symbol.observable to Promise.prototype (as far as I know there's none).\nThis way an axios result could be converted into an Observable by doing:\n~~~js\nconst result = axios.get(...)\nObservable.from(result)\n~~~\nIn case of option 2 this is possible with any Promise and axios would supports this out of the box without any change.\nWhat do you think?. Here is my request to implement Promise.prototype[Symbol.observable] as part of ECMAscript:\nhttps://github.com/tc39/proposal-observable/issues/181. I read thought the source and looked for ideas how this could be implemented. In general all that's needed is another transform function provided via the config that transforms the promise returned at lib/core/Axios.js:55 into something different.\nI don't know if it makes sense to support multiple transform functions or if a single one is fine.\nOn the other hand I wonder if this is really necessary. It's very simple to write small wrapper functions that do the same. E. g.:\n~~~javascript\n// Here you could go crazy by using Proxys instead.\nconst observableAxios = {\n  get: (...args) => Rx.Observable.from(axios.get(...args))\n};\nobservableAxios\n  .get('/api/posts')\n  .subscribe(({ data }) => doSomething(data));\n~~~\nWhich is again not much different from using this in the first place:\n~~~javascript\nRx.Observable\n  .from(axios('/api/posts'))\n  .subscribe(({ data }) => doSomething(data))\n~~~\nWhich doesn't need any changes or additional code at all. If you write a middleware for something you probably have a wrapper function anyway (= the middleware function). And turning a Promise into a callback-style function does sound like a downgrade to me. I can't find a use-case for that.\nNow I'm not sure what I should think about this idea... I'm just missing how this would be a big improvement compared to the current implementation.. @hitmands wow, I didn't know flatMap can also return Promises directly. (I tested it, it really works.)\nAnyway, Rx is one thing, but it's still open if native Observables will support this as well. It might be necessary to implement Symbol.Observable in Axios' result object. (the one that gets returned directly by axios.get() etc. directly)\n(btw. you sometimes write \"axsios\" instead of \"axios\", but I guess it's a typo?). ",
    "hitmands": "That's how it should be made!. I think we should provide a basic implementation, just to start a conversation.. Hi @aze3ma,\nI've been thinking about it and based on others contributions, \nit came out that creating an api which would be cleaner than Observable.from() is very difficult.\nAxios is completely promise based and rxjs pairs very well with promises, so, there is probably nothing else to do to make it more rx-friendly.\njavascript\nObservable\n  .from([1, 2, 3, 4])\n  .flatMap(postId => axsios.get(`/api/posts/${postId}`))\n  .subscribe((post) => {\n    console.log(`post ${post.id}`, post);\n  })\n;\nin RxJS 6 they're no longer exporting fromPromise, and this better highlights that rx and promises work just well together.\nwe could keep this conversation open about making axios pluggable but I can't find any practical use case what would justify so much effort.\n. yes, my bad, they're typos.. ",
    "mariomenjr": "Is this feature being developed right now? It is a great idea. I would like to contribute.. ",
    "aze3ma": "@hitmands that's sounds a cool idea and I would like to contribute also I am wondering if you think to re-implementing a wrapper from scratch or just working with something like Observable.from() method.. Hello all does anyone has idea about how we can kick-off the implementation of something like that based purely on observables and if so anyone has already start or something can show us something to start dive into this together.. @kwonoj that's interesting I am in \ud83c\udf89 . ",
    "kwonoj": "I was recently spending some time to write my own native-observable based module, and spin up https://github.com/axios/axios/pull/1783 if axios have desire to support native implementation instead. fyi for anyone interested.. Also: I have spinned off https://github.com/kwonoj/oxid for based purely on observables related with PR proposals. fyi if anyone's interested.. ",
    "sharplet": "I'm using something like this in my code:\njs\ntransformRequest: [...axios.defaults.transformRequest, myCustomTransformer]\nIf you want it to be really safe, there's also this (example in TypeScript):\n```typescript\nconst defaultTransformers = (): AxiosTransformer[] => {\n  const { transformRequest } = axios.defaults;\n  if (!transformRequest) {\n    return [];\n  } else if (transformRequest instanceof Array) {\n    return transformRequest;\n  } else {\n    return [transformRequest];\n  }\n};\n// then use it like this\naxios.create({\n  // ...\n  transformRequest: [...defaultTransformers(), myTransformer],\n});\n```. I'm using something like this in my code:\njs\ntransformRequest: [...axios.defaults.transformRequest, myCustomTransformer]\nIf you want it to be really safe, there's also this (example in TypeScript):\n```typescript\nconst defaultTransformers = (): AxiosTransformer[] => {\n  const { transformRequest } = axios.defaults;\n  if (!transformRequest) {\n    return [];\n  } else if (transformRequest instanceof Array) {\n    return transformRequest;\n  } else {\n    return [transformRequest];\n  }\n};\n// then use it like this\naxios.create({\n  // ...\n  transformRequest: [...defaultTransformers(), myTransformer],\n});\n```. ",
    "m1n0s": "@sharplet  your transformRequest: [...axios.defaults.transformRequest, myCustomTransformer] it's pretty match the same approach as I use :)\nI just want to know that using axios.defaults is allowed by library author.. @IlyaSemenov thanks for your answer.\nActually, I was looking for interceptors.. ",
    "IlyaSemenov": "@m1n0s no, it's not, as it's not type safe:\n\nRelying on the existence of the default transformer and its shape (an array) is unreliable. The type mismatch just makes it apparent.. ",
    "LukasDrgon": "I summarized the advantages in my previous post. If those are not important enough, feel free to close this.. \ud83d\udc4b @JustinBeckwith I think I was referring to my first post in this PR - larger network, including servers in China, failover, and other features focused on reliability (more details here and here). Also usage statistics for maintainers.. I removed SRI, because it sounds like you don't want it there.. ",
    "davidlaym": "I'm facing a similar issue in which I'm making a GET request to a legacy server that doesn't accept + as space and needs %20. Is there a way to configure the encoding or skip it?. I'm facing a similar issue in which I'm making a GET request to a legacy server that doesn't accept + as space and needs %20. Is there a way to configure the encoding or skip it?. To answer my own question, I found out about paramsSerializer in the config parameter and then found the default implementation of paramsSerializer in the code \nhttps://github.com/axios/axios/blob/ae218d0131ecbd683310272c10b0273fd1d97de4/lib/helpers/buildURL.js#L5-L13\nand \nhttps://github.com/axios/axios/blob/ae218d0131ecbd683310272c10b0273fd1d97de4/lib/helpers/buildURL.js#L35-L58\nThis led me to implement my own version overriding the encoder and bypassing some of the util functions as I'm working on TS and nodejs and I can use some built in alternatives: \n```js\nfunction encode(val: any) {\n  return encodeURIComponent(val)\n    .replace(/%40/gi, '@')\n    .replace(/%3A/gi, ':')\n    .replace(/%24/g, '$')\n    .replace(/%2C/gi, ',')\n    .replace(/%5B/gi, '[')\n    .replace(/%5D/gi, ']');\n}\nfunction customSerializer(params: any): string {\n  return Object.keys(params)\n    .map((key: any) => {\n      var val: any = params[key];\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n      var keyName = key;\n      if (Array.isArray(val)) {\n        keyName = key + '[]';\n      } else {\n        val = [val];\n      }\n      return val\n        .map((v: any) => {\n          if (Object.prototype.toString.call(v) === '[object Date]') {\n            v = v.toISOString();\n          } else if (v !== null && typeof v === 'object') {\n            v = JSON.stringify(v);\n          }\n          return encode(key) + '=' + encode(v);\n        })\n        .join('&');\n    })\n    .join('&');\n}\n``. To answer my own question, I found out aboutparamsSerializerin the config parameter and then found the default implementation ofparamsSerializer` in the code \nhttps://github.com/axios/axios/blob/ae218d0131ecbd683310272c10b0273fd1d97de4/lib/helpers/buildURL.js#L5-L13\nand \nhttps://github.com/axios/axios/blob/ae218d0131ecbd683310272c10b0273fd1d97de4/lib/helpers/buildURL.js#L35-L58\nThis led me to implement my own version overriding the encoder and bypassing some of the util functions as I'm working on TS and nodejs and I can use some built in alternatives: \n```js\nfunction encode(val: any) {\n  return encodeURIComponent(val)\n    .replace(/%40/gi, '@')\n    .replace(/%3A/gi, ':')\n    .replace(/%24/g, '$')\n    .replace(/%2C/gi, ',')\n    .replace(/%5B/gi, '[')\n    .replace(/%5D/gi, ']');\n}\nfunction customSerializer(params: any): string {\n  return Object.keys(params)\n    .map((key: any) => {\n      var val: any = params[key];\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n      var keyName = key;\n      if (Array.isArray(val)) {\n        keyName = key + '[]';\n      } else {\n        val = [val];\n      }\n      return val\n        .map((v: any) => {\n          if (Object.prototype.toString.call(v) === '[object Date]') {\n            v = v.toISOString();\n          } else if (v !== null && typeof v === 'object') {\n            v = JSON.stringify(v);\n          }\n          return encode(key) + '=' + encode(v);\n        })\n        .join('&');\n    })\n    .join('&');\n}\n```. ",
    "d-fischer": "Duplicate of #718 - also already fixed in #1061 but nobody merges it. DELETE is alright, although I don't see how any sensible data would be returned from a DELETE request. HEAD on the other hand shouldn't ever return any data in the body, i.e. it should always return AxiosPromise<null> or similar actually... . DELETE is alright, although I don't see how any sensible data would be returned from a DELETE request. HEAD on the other hand shouldn't ever return any data in the body, i.e. it should always return AxiosPromise<null> or similar actually... . ",
    "skaldo": "Hello, could someone please review this?. @nickuraltsev @emilyemorehouse is there a plan releasing this anytime soon?. ",
    "sabakugaara": "maybe you should check variable config.SEARCH_URL, I think it is undefined, not a axios bug. Are you sure it is running on node.js?    I can't repeat it.  This is my test page: https://hooks.upyun.com/r1ZKpgyRb?inspect=true, all have content-length. \nby the way withCredentials option only work in browser side. content-length will auto add by http adapter.  . I create this code snippet: axio content-length, content-length work in browser side too.. bluebird may be helpful for you. If your environment support async/await, it is good to use.. promise.then is asynchronous, for loop is synchronous. so callback looks like it's delayed.\nmaybe i don't get your point, :) . promise.then is asynchronous, for loop is synchronous. so callback looks like it's delayed.\nmaybe i don't get your point, :) . no, you can't. promise.then must be synchronous, then if you write sync code like this:\nconst p = new Promise(function (resolve, reject) {\n  return resolve('promise done')\n})\np.then(function(result) {\n  console.log(result)\n})\nconsole.log('before promise')\n// output is:\n// before promise\n// promise done\nPromise.each, or some other tools may be helpful.\n. no, you can't. promise.then must be synchronous, then if you write sync code like this:\nconst p = new Promise(function (resolve, reject) {\n  return resolve('promise done')\n})\np.then(function(result) {\n  console.log(result)\n})\nconsole.log('before promise')\n// output is:\n// before promise\n// promise done\nPromise.each, or some other tools may be helpful.\n. issue may need be closed, @gkumar77 \nping @nickuraltsev . issue may need be closed, @gkumar77 \nping @nickuraltsev . follow-redirect add this option in v1.3.0 https://github.com/olalonde/follow-redirects/commit/847a47fb00ea2dcb7a8886ca16d9d82dc6accb5d. follow-redirect add this option in v1.3.0 https://github.com/olalonde/follow-redirects/commit/847a47fb00ea2dcb7a8886ca16d9d82dc6accb5d. ",
    "ekimlinger": "Axios should still be throwing some kind of js error in this case though. (Also experiencing the same issue) This is an exception being thrown at the android level which is something that axios should be able to catch. . ",
    "MadReal": "This solved it\n```\nloadApiCoins({ commit }) {\n    Vue.axios({\n        method: 'get',\n        url: 'https://api.coinmarketcap.com/v1/ticker/',\n        transformRequest: [(data, headers) => {\n            delete headers.common.Authorization\n            return data\n        }]\n    }).then(...)\n},\n```. ",
    "Nilegfx": "@rubennorte @nickuraltsev @mzabriskie \nguys, any updates regarding this PR?. ",
    "janko": "I was bitten by this as well. Not being able to set a default request method is definitely a bug, because all other options can be set.. ",
    "jamespacileo": "Having the same issue on an existing project. Having the same issue on an existing project. ",
    "ezralalonde": "@jamespacileo are you using jest?\nI've seen this a couple times now, and the most common (and, thankfully, easiest to address) scenario I saw was using axios within jest tests. The issue can be fixed by forcing the jest environment to what's appropriate (eg. have jest --env node in package.json) rather than relying on the default.. ",
    "decentname": "@yoyo837 This issue is resolved from my end. Just follow their examples and pass parameters only in that manner. . ",
    "Nudelsieb": "Hi @BrianMoreno1994 , this is not axios' fault. I believe, when the component updates (because you executed a method) it reads in the event-handlers/methods again. In your case it does fire again because of addToCart(). You have to use addToCart. Please resort to the VueJS docs. You must never use () when you link a method to a directive, unless you explicitely wish the function to execute during evaluation/linking.. ",
    "ssttm169": "The solution is here Adding Retry Parameter. ",
    "ChrisLahaye": "You can use axios.all, there is an example at https://github.com/axios/axios/blob/master/README.md. Its the right behaviour, more strictly it should actually generate something as file?keythathasnullvalue without equal sign and value. It would be wrong to assume an empty string as value. In order to achieve your desired result you have to assign an empty string to it. . A variable without value is called a declaration which is of type undefined, which actually evaluates in false. If you would evaluate an empty string '' it also evaluates in false, but they are not equivalent since they differ in type, the prior is undefined, the latter is of type string.\nI think I agree with you, but it would be wrong to assume what that something should be. Assuming an empty string would be wrong, but with {a: undefined} it should indeed more preferably generate path?a.. ",
    "TomasRup": "It seems this was our internal issue.. ",
    "brianforkan": "I have seen this issue also. It does not happen on every version of Android.\nSeems this could be a fix https://github.com/axios/axios/issues/1113. ",
    "PeterDKC": "Passing a key with no value as a URL parameter is a perfectly valid use case.\npath?name=Bob&manager\nis a valid URL. If no value is passed for the key, it should just leave off the =, but I agree that an empty string is different than null.. ",
    "ahtik": "The current behavior is actually in line with how JSON values are handled in JavaScript:\nJSON.stringify({ a:1, b:undefined, c:2 }) produces {\"a\":1,\"c\":2}\n{a: undefined} is often used as a construct to ignore a JSON key.\nIf you need \"a=\" then '' seems to be semantically good enough.\nMaybe {a: null} should be interpreted as \"?a\" param? But not undefined.. The current behavior is actually in line with how JSON values are handled in JavaScript:\nJSON.stringify({ a:1, b:undefined, c:2 }) produces {\"a\":1,\"c\":2}\n{a: undefined} is often used as a construct to ignore a JSON key.\nIf you need \"a=\" then '' seems to be semantically good enough.\nMaybe {a: null} should be interpreted as \"?a\" param? But not undefined.. @abodelot by payload and its null-handling, are we still talking about the URL parameters, not the POST/PATCH/etc payload?\nI'd think {a: null} to ?a conversion is a rather safe solution, and both ?a=null and ?a='null' conversion would potentially cause confusion, requires special handling for the url parser, makes it impossible to send an actual \"null\" string value.... @abodelot by payload and its null-handling, are we still talking about the URL parameters, not the POST/PATCH/etc payload?\nI'd think {a: null} to ?a conversion is a rather safe solution, and both ?a=null and ?a='null' conversion would potentially cause confusion, requires special handling for the url parser, makes it impossible to send an actual \"null\" string value.... ",
    "Radiergummi": "@ahtik \ud83d\udc4d for \n\nMaybe {a: null} should be interpreted as \"?a\" param? But not undefined.\n\n. @abodelot So how do these APIs expect null values to be serialized? As ?foo=null? because in that case, setting { foo: 'null' } would be more appropriate than using actual null. . ",
    "abodelot": "What about a web APIs which expects a payload parameter to be explicitly set to null?\nSome APIs enforce strict type checking rules and do not accept an empty string as a substitute for null.\nIn my opinion, axios should not remove parameters with null value from the payload.. @Radiergummi In a JSON payload, I'd expect an actual null value. When serialized in a query string, that would be ?key=.\nI'm afraid using { key: 'null' } isn't a proper solution, value would still be a string.\n@vuoriliikaluoma thank you for taking care of this issue\n. @Radiergummi In a JSON payload, I'd expect an actual null value. When serialized in a query string, that would be ?key=.\nI'm afraid using { key: 'null' } isn't a proper solution, value would still be a string.\n@vuoriliikaluoma thank you for taking care of this issue\n. ",
    "luponZ": "you can import qs and set paramsSerializer(params){return qs.stringify(params)} to replace default setting.. ",
    "vuoriliikaluoma": "Is the {a: null} to ?a conversion acceptable?\nIf so I'll try implementing this and creating a pull request.. Pull request is up. (#1987)\nIt was a pretty simple edit.. All of these are possible:\n{ key: undefined } to ? (not included)\n{ key: null } to ?key\n{ key: '' } to ?key=\n{ key: 'null' } to ?key=null. Note: Mocha tests weren't working to start with. Tried npm run test before any changes.\nI ran the karma tests with .\\node_modules\\.bin\\grunt karma:single and they passed.. If val for some reason is undefined then if (val === undefined) would result in:\nUncaught ReferenceError: val is not defined\nThat's probably why it's a typeof check.\nBut if we know for certain that val cannot be undefined then we can just remove that portion of the if-statement.. Sorry, my bad. I've updated it now. Should have tested it first... \ud83d\ude05. ",
    "corydeppen": "See #1061 . See #1061 . ",
    "guarani": "@themre For me, what worked was to implement validateStatus and return true for the status codes I wanted to handle in the then callback.\n```\n    axios({\n      method: 'post',\n      url: '/sessions',\n      data: {\n        username: this.state.username,\n        password: this.state.password,\n      },\n      validateStatus: (status) => {\n        return true; // I'm always returning true, you may want to do it depending on the status received\n      },\n    }).catch(error => {\n}).then(response => {\n    // this is now called!\n});\n\n```. ",
    "prog-24": "Check that you response is giving the correct headers. I had the same problem and it seemed that my API was not sending all the correct error headers so the response was been read as a network error instead of an actual http error which is different.. ",
    "boxfish-ty": "This is because the XHR request fails at the browser level (during the OPTIONS call), which is technically a network error. For network errors, axios does not provide a response because one is not provided by the browser.\nSometimes, we will intercept the request and return a response with a custom field\uff0cit will trigger the function request.onerror, but, it can not return the response.\nHow can i do to get the custom response.\nnow:\n // Handle low level network errors\nrequest.onerror = function handleError() {\n  // Real errors are hidden from us by the browser\n  // onerror should only fire if it's a network error\n  reject(createError('Network Error', config, null, request));\n  // Clean up request\n  request = null;\n};`\n\nwe want:\n// Handle low level network errors\nrequest.onerror = function handleError(response) {\n  // Real errors are hidden from us by the browser\n  // onerror should only fire if it's a network error\n  reject(createError('Network Error', config, null, request, response));\n  // Clean up request\n  request = null;\n};`.\n",
    "darosh": "Duplicated: #1161,  Related: #1160. ",
    "votuanphong1983": "+1. ",
    "aefox": ":+1: . ",
    "liuzhen88": "I have same question. I have same question. ",
    "audrium": "When this issue will be resolved? By the way, this happens for me also on FF. Same problem here. Error response object is undefined on 302 status code. Are you planning to fix this?. ",
    "rsaleri": "I can confirm the very same issue on Google Chrome 69. ",
    "hnviradiya": "Very same issue in Chrome 70. is this going to be solved. it has been a long time. and this one is crucial and basic.. ",
    "clarkdo": "I think we are the same meaning, if obj is array, typeof obj !== 'object' is false, so no need to add !isArray(obj), right ?. ",
    "alcalbg": "Ok, apparently this is an issue in follow-redirects package included in the axios.. Reported here: https://github.com/axios/axios/issues/1158. ",
    "krmcbride": "Just thought I would chronicle how I arrived at this issue, which ultimately solved the problem I was seeing:\nIt started with a uncaughtException node crash caused by Error: \"toString()\" failed while using axios to send a HEAD to inspect headers of a supposed PDF (let's say http://example.com/file.pdf).  This seemed pretty weird, being a HEAD and all.  It turns out that V8 6.1 and below (node 8 and below) has a 256MB string size limit (I believe its been bumped to 1GB in 6.2) and this HEAD was attempting to build a 350MB string.  This was due to the https redirect converting the HEAD to a GET because of the lower/uppercase mismatch.\nSo that's a axios.head that downloaded a 350MB PDF and crashed node. I thought that was pretty cool  \ud83d\ude06 \nFor now I'm using a request interceptor to uppercase the method, which plays nicely with follow-redirects and now my HEAD stays a HEAD and doesn't explode.. ",
    "aPoCoMiLogin": "If you change method to uppercase here: https://github.com/axios/axios/blob/master/lib/adapters/http.js#L84 it will still be broken, since it will not follow redirect with body or query string.\nxhr adapter already got uppercase method: https://github.com/axios/axios/blob/master/lib/adapters/xhr.js#L45. ",
    "Niefee": "I'm sorry, problem solved. ",
    "Gomah": "As it's an axios issue, here's how I handled it using axios:\n```ts\nimport axios from 'axios';\nimport * as qs from 'querystring';\nexport const Callback = async (req, res): Promise => {\n  const {\n    BITBUCKET_CLIENT_ID,\n    BITBUCKET_CLIENT_SECRET,\n    BITBUCKET_CALLBACK_URL\n  } = process.env;\nconst { code: AUTH_CODE } = req.query;\ntry {\n    const data = await axios({\n      url: 'https://bitbucket.org/site/oauth2/access_token',\n      headers: {\n        'Cache-Control': 'no-cache',\n        'content-type': application/x-www-form-urlencoded,\n      },\n      auth: {\n        username: BITBUCKET_CLIENT_ID,\n        password: BITBUCKET_CLIENT_SECRET,\n      },\n      method: 'post',\n      data: qs.stringify({\n        grant_type: 'authorization_code',\n        code: AUTH_CODE,\n        redirect_uri: BITBUCKET_CALLBACK_URL,\n      }),\n    });\n// Do something\n\n} catch (e) {\n    console.trace(error);\n    return res.sendStatus(400);\n  }\n};\n```. ",
    "andrade1379": "@nickuraltsev thank you for responding. I was hoping for the latter. Where the format would look like so:\n?filter[nid][condition][path]=nid&filter[nid][condition][value]=\nWhere I can do something like:\n```\nlet nid = drupalSettings.path.currentPath.match(/([^\\/])\\/$/)[1];\nlet filterPath = 'filter[nid][condition][path]=nid;\nlet filterValue = 'filter[nid][condition][value]=' + nid;\naxios.get(api, {\n                params: {\n                    language: lang,\n                    fields: fields,\n                    filter: filterPath,\n\nfilter: filterValue\n                    }\n            }).then( (response) => {\n\n                console.log(response);\n\n            }).catch((response) => {\n                console.error(response);\n            });\n\n``\nWhere thefilter` param can be used more than once?  Is that possible as well?. @nickuraltsev thank you for responding. I was hoping for the latter. Where the format would look like so:\n?filter[nid][condition][path]=nid&filter[nid][condition][value]=\nWhere I can do something like:\n```\nlet nid = drupalSettings.path.currentPath.match(/([^\\/])\\/$/)[1];\nlet filterPath = 'filter[nid][condition][path]=nid;\nlet filterValue = 'filter[nid][condition][value]=' + nid;\naxios.get(api, {\n                params: {\n                    language: lang,\n                    fields: fields,\n                    filter: filterPath,\n\nfilter: filterValue\n                    }\n            }).then( (response) => {\n\n                console.log(response);\n\n            }).catch((response) => {\n                console.error(response);\n            });\n\n``\nWhere thefilter` param can be used more than once?  Is that possible as well?. ",
    "shalldie": "\n@Naramsim \nIt seems to bring no change  =\u3002=. @hwen \nThx a lot.\n\u8c41\u7136\u5f00\u6717. @hwen \n\u8fd8\u662f\u6709\u4e9b\u95ee\u9898\u3002\n\u5982\u679c\u53ea\u662f\u7b80\u5355\u7684\u628a\u5b57\u7b26\u4e32\u8fd9\u6837\u63d0\u53d6\u51fa\u6765\u4e0d\u5904\u7406\uff0c\u5e76\u4e0d\u80fd\u6b63\u5e38\u8bc6\u522b expires , path \u7b49\u4fe1\u606f\uff0c\u4e5f\u4f1a\u628a\u4ed6\u5f53\u505acookie\u7684\u952e\u3002. Thx.. @shangxinbo \n \u55ef\uff0c\u4e00\u76f4\u90fd\u7528\u7684request\uff0c\u5f53\u65f6\u60f3\u524d\u540e\u7aef\u7edf\u4e00\uff0c\u6240\u4ee5\u5c1d\u8bd5\u4e00\u4e0baxios. ",
    "hwen": "@shalldie \nIn the first place, withCredentials options is used in the browser env.\nAxios use node built-in module http and https to realize the Request for node side, while it use xhr Object in the browser side.\nso you can set the cookie directly, \njs\nconst headers = {\n  'cookie': result.headers['set-cookie']\n}\nawait instance.post('/cookie', {mes: 'test'}, headers)\nBy the way, do not forget to set cookie-parser middleware in your server side\njs\nconst cookieParser = require('cookie-parser')\n....\napp.use(cookieParser()). @shalldie \n\u8fd9\u8981\u770b\u4f60\u600e\u4e48\u89e3\u6790 cookie \u4e32\u4e86\u5427\uff0c\u53cd\u6b63\u5982\u4f55\u4f20\u7ed9\u540e\u53f0\u77e5\u9053\u4e86\uff0c\u5c31\u770b\u4f60\u8981\u600e\u4e48\u89e3\u6790\u800c\u5df2\u3002\n\u6216\u8bb8\u4f60\u53ef\u4ee5\u770b\u770b cookie \u8fd9\u4e2a\u5305\u3002. ",
    "beans9": "i had the same experience.\nanyone know how to solve it?. ",
    "nenya1840": "+1. But I think it's related to edge's bug. Might help: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12224510/. ",
    "tonoslav": "fixed added .request\n\n. ",
    "nickknissen": "When a timeout happens it will return an error code with the value ECONNABORTED\nhttps://github.com/axios/axios/blob/b7d8d126dad7341addcd7b063f7b261955ec9152/lib/adapters/xhr.js#L95\nThis is more or less how i do it:\njs\naxios.interceptors.response.use(\n  config => config,\n  (error) => {\n    if (error.response.status === 408 || error.code === 'ECONNABORTED') {\n      console.log(`A timeout happend on url ${error.config.url}`)\n    }\n    return Promise.reject(error);\n  },\n);. ",
    "davidlukerice": "The ECONNABORTED code is also used when the request is manually aborted: https://github.com/axios/axios/blob/503418718f669fcc674719fd862b355605d7b41f/lib/adapters/xhr.js#L71\nIs there a good way to differentiate between the server request timeouts and manual aborts?\nWe're not currently using .abort() anywhere, so that check works for us for now, but I could see a bug crop up if we later had to add in a manual request cancel and forgot about our assumption of using that code only for the timeout case.. Right, that works when using the individual callbacks, but we're just catching any errors via \ntry {\n  await axios( ... );\n} catch(error) {\n  // determine if error was from a timeout or not\n}\nPromise type error handling doesn't seem fully supported at the moment.. ",
    "wasnlosdu": "But just a bit below that is:\nhttps://github.com/axios/axios/blob/503418718f669fcc674719fd862b355605d7b41f/lib/adapters/xhr.js#L89\nIs a timeout handler - the Error Code is the same but it's a different handler.. Hey @cerealcoder - are you sure you are using the right port? \u2753 \nIf you did solve it please be so kind an state what the issue was.\nMaybe even close this issue? \ud83c\udfac . This is probably because you did not allow the delete method in the preflight request.\nBasically what happens is:\n\nClient --> Server : \"Hey what methods can I use on this resource? (/api/post/)\"\nServer --> Client : \"You can send a POST, PATCH, GET.\"\nClient --> self : \"Oh - I planned to do a DELETE request, but the server told me it's not allowed\"\nClient --> self : :\"Here - have an exception!\" \u274c\n\nDid this help you ? :). Can this be closed ?\nI think it has no relevance.. Hey it looks like you are using axios inside a Java Project ? \ud83d\ude15 \nCan you please elaborate on your issue?\nMaybe provide the code block that is causing this error message ?. Hey @RobusGauli can you please check what's the matter with the failing test(s) and rename this Pull Request so it's more descriptive?\nI greatly appreciate your contribution and think you cleaned it up rather nice.\nThough I'm not sure if moving the export to the bottom is really necessary. . How would you propose nested object should look like when stringified ?\nHowever I think this should not be noted in the axios documentation but rather in the querystringdocs.. Oh, I see. Maybe you can open a pull request for that change?\nYou would have my \ud83d\udc4d for sure.. This is really not a bug related with axios but rather with block scoping in JS.\nMaybe try reading and understanding this.\nHere is a demo on how I would do it.. Have you looked at the Issue Template? \nI think you would be better of looking for help on StackOverflow :). @sbimochan This really seems to solve a totally different problem.\n@renishdeveloper \nLook here.\nThe solution is to use:\nJavaScript\nconst data = await axios.post(url, {\n  [key] : value,\n}).then(function (response) {\n  console.warn(response);\n}).catch(function (error) {\n  console.log('axios error => ', error);\n});\nNote the []around the key.\nDid this solve it?. So what you mean is when does the JavaScript finally resolve the Promise?. So I managed to something like this: https://stackblitz.com/edit/js-p58qhg\nA then is used for promises, once a promise has been resolved (e.g. data has been fetched) it can be anything (including another promise). So when you are trying to chain then on a then it throws an error - because you try to use a then on an object not on a promise.\nIs this somehow understandable ? :). Hey, maybe it's something with your headers? Have you set them right?\nWhat I can see from your code it should be like this:\nJavascript\ntry{\n  let strBase64 = 'qwqejfavvasdcoqenorfhhotastastj'\n  let response = await Axios.post(url, strBase64, { headers: { 'Content-Type': 'text/plain' } } )\n  console.log(\"Response => \" + JSON.stringify(response));\n}catch(error){\n  console.log(\"Error => \" + error)\n}. These so called preflight request are there for security purposes. The client (e.g. axios) send them to the server to ensure their next request is allowed.\nYou can read this for more in-depth information:\nhttps://stackoverflow.com/questions/15381105/cors-what-is-the-motivation-behind-introducing-preflight-requests. On what hook do you call the method?. Would you be so kind and explain in more details what your problem is?\nMaybe show the proxyTable and write what you want to achieve.. Yes, that is because you have a , before the catch. Replace it with a .. Hey @gustavoaca1997 , you have the answer right in your comment\n\nUsing request method alias axios.post(url[, data[, config]]) won't send Authorization cookie to server. Instead, using axios API will do.\n\nTry to send it like that: \nJavascript\naxios.post(\n      `${constants.MY_SERVER_URL}/api/auth/logout`,\n        {}, // EMPTY OBJECT AS data\n        {withCredentials: true}\n). No it isn't.\nThis is done at a DNS level.\nHope this helps!. @VisualCH do you need some more feedback or can this be closed ? :). @SNOWGUM would you mind closing this issue then? \ud83e\udd47 . suggestion\nstringify method in [`querystring`](https://nodejs.org/api/querystring.html) and [`qs`](https://github.com/ljharb/qs) work different. For example, if you have nested objects then [`querystring`](https://nodejs.org/api/querystring.html) will not stringify it, see https://github.com/nodejs/node-v0.x-archive/issues/1665. In this case use [`qs`](https://github.com/ljharb/qs) module.\nJust a small typo  \ud83d\ude03. ",
    "IshamMohamed": "I would like to see this functionality. . ",
    "maxim25": "+1. ",
    "nidrax69": "+1. +1. ",
    "redfish31": "+1. +1. ",
    "lyonish": "+1. ",
    "konstantinsteinmiller": ":+1: . ",
    "mashintsev": "\ud83d\udc4d. ",
    "AshishKirodian": "+1. ",
    "yumaojun03": "+1. ",
    "MykhailoMatiiasevych": "Since Node 10 is LTS and it has Stable HTTP/2 support I would like to have this functionality in axios. ",
    "qraynaud": "Looking at the actual code in axios, seems like a headache. Wouldn't it be easier to just pass in another transport that would be a wrapper for the http API over the htt2 API? You could write such a code more easily I think!\nRelevant code is here: https://github.com/axios/axios/blob/master/lib/adapters/http.js#L180. Should also be possible to write a simple adapter for this (look adapter in the documentation).. ",
    "robcresswell": "I've got the same issue. Is there no way to discern whether the request was successful? At the moment I'm just programming around it, but it's not really ideal.\nIn my use case, I'm passing in a data key to remap a data array to a generic \"items\" key; i.e. if an API returns \"users\" then remap \"users\" to \"items\" so it can be handled generically further along. My fear is that the error data will contain a key that someone later passes to this utility function, and then it will misbehave in strange ways. Ideally I'd like to be able to only apply the transform on successful requests.. I've got the same issue. Is there no way to discern whether the request was successful? At the moment I'm just programming around it, but it's not really ideal.\nIn my use case, I'm passing in a data key to remap a data array to a generic \"items\" key; i.e. if an API returns \"users\" then remap \"users\" to \"items\" so it can be handled generically further along. My fear is that the error data will contain a key that someone later passes to this utility function, and then it will misbehave in strange ways. Ideally I'd like to be able to only apply the transform on successful requests.. ",
    "HelloQingGuo": "Can I ask why you guys use transformResponse ? I was thinking to put the data transformation logic in the transformResponse, but not sure if it is a right place to do so, espcially seeing this issue ! \nThanks a lot for discovering this issue !. ",
    "diemah77": "Same here. 201 status code is caught as error.. Same here. 201 status code is caught as error.. ",
    "bm2ilabs": "@robodude its catching an empty string , it doesn't show anything , it just go to catch instead . i really don't seem to find the issue that causing this bug so far . this issue happen when your response have an error , for example when the response is correct but in the then response you do something that throw an error , axios then catch that error , even if the response from the server was success, i hope i am making sense . ",
    "AlexMordred": "I'm also having this problem. ",
    "travis-w": "Is that console.log triggering? The catch could be getting triggered because of an exception being thrown inside of then rather than axios failing. ",
    "selfagency": "this is happening to me on a 200 response for no explicable reason\n```\n/ fetch data /\nasync function fetch (apiCall, type) {\n  const response = await axios(encodeURI(apiCall), {\n    maxRedirects: 0,\n    validateStatus() { return true }\n  })\nlet out\n  if (response.status === 200) {\n    if (validJson(type, response.data)) {\n      out = response.data\n      out.status = 200\n    } else {\n      out = new Error(API returned invalid JSON for ${apiCall}.)\n      out.status = 417\n    }\n  } else {\n    out = errorHandler({ status: response.status })\n  }\nlog.info(${type} out: ${out.status})\n  return is.err(out) ? Promise.reject(out) : Promise.resolve(out)\n}\n```\nhere's the result, 200s all the way down but still 404s somehow\n[2018-03-16T17:24:01.049Z]  INFO: nylon/71301 on selfagency-macpro: API call: https://api.nylon.com/api/v2/article/lcd-soundsystem-and-the-absurd-politics\n[2018-03-16T17:24:04.274Z]  INFO: nylon/71301 on selfagency-macpro: article out: 200\n[2018-03-16T17:24:04.288Z]  INFO: nylon/71301 on selfagency-macpro: article cache out: 200 | bad? false | {\"id\":38888,\"published\":\"2018-03-16T12:00:00-04:00\",\"updated\":\"2018-03...\n[2018-03-16T17:24:04.291Z]  INFO: nylon/71301 on selfagency-macpro: API call: https://api.nylon.com/api/v2/author/tanner-howard\n[2018-03-16T17:24:04.292Z]  INFO: nylon/71301 on selfagency-macpro: API call: https://api.nylon.com/api/v2/post/38888/related\n[2018-03-16T17:24:04.476Z]  INFO: nylon/71301 on selfagency-macpro: related out: 200\n[2018-03-16T17:24:04.500Z]  INFO: nylon/71301 on selfagency-macpro: related cache out: 200 | bad? false | {\"related\":[{\"id\":38888,\"published\":\"2018-03-16T12:00:00-04:00\",\"updat...\n[2018-03-16T17:24:05.046Z]  INFO: nylon/71301 on selfagency-macpro: author out: 200\n[2018-03-16T17:24:05.049Z]  INFO: nylon/71301 on selfagency-macpro: author cache out: 200 | bad? false | {\"type\":\"author-page\",\"category\":\"author\",\"author\":{\"url\":\"tanner-howa...\n    raven@2.4.2 alert: failed to send exception to sentry: HTTP Error (413): undefined\n    >> Error: Request failed with status code 404\n    >>     at createError (/Users/daniel/Dev/nylon-web/node_modules/axios/lib/core/createError.js:16:15)\n    >>     at settle (/Users/daniel/Dev/nylon-web/node_modules/axios/lib/core/settle.js:18:12)\n    >>     at IncomingMessage.handleStreamEnd (/Users/daniel/Dev/nylon-web/node_modules/axios/lib/adapters/http.js:201:11)\n    >>     at emitNone (events.js:110:20)\n    >>     at IncomingMessage.emit (events.js:207:7)\n    >>     at endReadableNT (_stream_readable.js:1059:12)\n    >>     at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    >>     at process._tickDomainCallback (internal/process/next_tick.js:218:9)\n    [nodemon] app crashed - waiting for file changes before starting.... this is happening to me on a 200 response for no explicable reason\n```\n/ fetch data /\nasync function fetch (apiCall, type) {\n  const response = await axios(encodeURI(apiCall), {\n    maxRedirects: 0,\n    validateStatus() { return true }\n  })\nlet out\n  if (response.status === 200) {\n    if (validJson(type, response.data)) {\n      out = response.data\n      out.status = 200\n    } else {\n      out = new Error(API returned invalid JSON for ${apiCall}.)\n      out.status = 417\n    }\n  } else {\n    out = errorHandler({ status: response.status })\n  }\nlog.info(${type} out: ${out.status})\n  return is.err(out) ? Promise.reject(out) : Promise.resolve(out)\n}\n```\nhere's the result, 200s all the way down but still 404s somehow\n[2018-03-16T17:24:01.049Z]  INFO: nylon/71301 on selfagency-macpro: API call: https://api.nylon.com/api/v2/article/lcd-soundsystem-and-the-absurd-politics\n[2018-03-16T17:24:04.274Z]  INFO: nylon/71301 on selfagency-macpro: article out: 200\n[2018-03-16T17:24:04.288Z]  INFO: nylon/71301 on selfagency-macpro: article cache out: 200 | bad? false | {\"id\":38888,\"published\":\"2018-03-16T12:00:00-04:00\",\"updated\":\"2018-03...\n[2018-03-16T17:24:04.291Z]  INFO: nylon/71301 on selfagency-macpro: API call: https://api.nylon.com/api/v2/author/tanner-howard\n[2018-03-16T17:24:04.292Z]  INFO: nylon/71301 on selfagency-macpro: API call: https://api.nylon.com/api/v2/post/38888/related\n[2018-03-16T17:24:04.476Z]  INFO: nylon/71301 on selfagency-macpro: related out: 200\n[2018-03-16T17:24:04.500Z]  INFO: nylon/71301 on selfagency-macpro: related cache out: 200 | bad? false | {\"related\":[{\"id\":38888,\"published\":\"2018-03-16T12:00:00-04:00\",\"updat...\n[2018-03-16T17:24:05.046Z]  INFO: nylon/71301 on selfagency-macpro: author out: 200\n[2018-03-16T17:24:05.049Z]  INFO: nylon/71301 on selfagency-macpro: author cache out: 200 | bad? false | {\"type\":\"author-page\",\"category\":\"author\",\"author\":{\"url\":\"tanner-howa...\n    raven@2.4.2 alert: failed to send exception to sentry: HTTP Error (413): undefined\n    >> Error: Request failed with status code 404\n    >>     at createError (/Users/daniel/Dev/nylon-web/node_modules/axios/lib/core/createError.js:16:15)\n    >>     at settle (/Users/daniel/Dev/nylon-web/node_modules/axios/lib/core/settle.js:18:12)\n    >>     at IncomingMessage.handleStreamEnd (/Users/daniel/Dev/nylon-web/node_modules/axios/lib/adapters/http.js:201:11)\n    >>     at emitNone (events.js:110:20)\n    >>     at IncomingMessage.emit (events.js:207:7)\n    >>     at endReadableNT (_stream_readable.js:1059:12)\n    >>     at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    >>     at process._tickDomainCallback (internal/process/next_tick.js:218:9)\n    [nodemon] app crashed - waiting for file changes before starting.... never mind it was a separate call causing the 404. never mind it was a separate call causing the 404. ",
    "rurikhero": "I had the same problem, and i see a dependence unsolved on my .then(). When exploded the exception the flow followed to .catch().\nin other words, the request code 201,200..(20*) go to  catch() only if  there is a error in .then().. ",
    "pezholio": "Having exactly the same problem here. My class is here:\nimport axios from 'axios';\nimport { UUID } from \"../../src/app/utilities/uuid\";\n\nexport class ApiCreateCase {\n\n  caseDetail: any\n  token: string\n  uuid: string\n  domain: string\n  headers: any\n\n  constructor(caseDetail: any, token: string) {\n    this.caseDetail = caseDetail\n    this.token = token\n    this.uuid = UUID.generateUUID()\n    this.domain = 'http://my-domain.com'\n    this.headers = {\n      headers: {\n        'Authorization': this.token,\n        'Accept': 'application/json'\n      }\n    }\n  }\n\n  public async run(): Promise<any> {\n    return this.createCase()\n      .then((response) => {\n        return this.addFamilyMembers()\n      })\n      .then((response) => {\n        return this.assignTeamMember()\n      })\n      .then((response) => {\n        return this.uuid;\n      })\n  }\n\n  private async createCase(): Promise<any> {\n    var body = {\n      \"case\":{\n        \"people\":[],\n        \"team\":{\n          \"members\":[]\n        },\n        \"address\": this.caseDetail.address,\n        \"visits\":[],\n        \"summaries\":[],\n        \"id\": this.uuid,\n        \"caseName\": this.caseDetail.people[0].lastName,\n        \"familyName\": this.caseDetail.people[0].lastName\n      }\n    }\n    return axios.post(`${this.domain}/cases`, body, this.headers)\n  }\n\n  private async addFamilyMembers(): Promise<any> {\n    var people = []\n    for (let person of this.caseDetail.people) {\n      people.push(this.addFamilyMember(person))\n    }\n    return await axios.all(people);\n  }\n\n  private async addFamilyMember(person: any): Promise<any> {\n    var body = {\n      \"person\":{\n        \"dateOfBirth\":\"1901-01-01T00:00:00.000Z\",\n        \"roles\":[],\n        \"id\": UUID.generateUUID(),\n        \"firstName\": person.firstName,\n        \"lastName\": person.lastName,\n        \"email\": person.email,\n        \"relationship\": person.relationship,\n        \"telephoneNumber\": person.telephoneNumber\n      }\n    }\n    return axios.put(`${this.domain}/cases/${this.uuid}/family-member`, body, this.headers)\n  }\n\n  private async assignTeamMember(): Promise<any> {\n    return this.getUserList().then((response) => {\n      var user = response.data.users.find((user) => {\n        return user.displayName == 'Dev'\n      })\n      var body = {\n        teamMember: {\n          id: user.id\n        }\n      }\n      return axios.put(`${this.domain}/cases/${this.uuid}/team-member`, body, this.headers)\n    })\n  }\n\n  private async getUserList(): Promise<any> {\n    return axios.get(`${this.domain}/users/directory?groups=Social%20Workers;Case%20Managers`, this.headers)\n  }\n\n}\n\nAnd I use it in a Cucumber step like so:\nGiven('I am a family member', function (callback) {\n  var world = this;\n  world.case = {\n    address: {\n      streetAddress: address.streetAddress(),\n      extendedAddress: '',\n      locality: address.city(),\n      postalCode: 'SW1A 1AA'\n    },\n    people: [\n      {\n        firstName: name.firstName(), \n        lastName: name.lastName(), \n        phoneNumber: phone.phoneNumber(), \n        relationship: 'Dad'\n      }\n    ]\n  }\n\n  mailslurp.createInbox()\n    .then((response) => {\n      world.emailId = response.id;\n      world.case.emailAddress = response.email;\n    })\n    .then(() => { \n      return login.perform() \n    })\n    .then(() => {\n      return login.getToken();\n    })\n    .then((token) => {\n      world.token = token;\n      var createCase = new ApiCreateCase(world.case, token)\n      return createCase.run()\n    })\n    .then(callback);\n});\n\nAnd this is the error I get:\n1) Scenario: Listing cases - e2e/features/families/visit-note.feature:7\n  Step: Given I am a family member - e2e/features/families/visit-note.feature:4\n  Step Definition: node_modules/cucumber/lib/index.js:176\n  Message:\n    Error: a5489583-4162-4cc4-8923-f89ad2965051\n        at Function.<anonymous> (/Users/stuart/Documents/FamilyStoryUI/fsIonic/node_modules/cucumber/lib/user_code_runner.js:105:21)\n        at Generator.throw (<anonymous>)\n        at Generator.tryCatcher (/Users/stuart/Documents/FamilyStoryUI/fsIonic/node_modules/bluebird/js/release/util.js:16:23)\n        at PromiseSpawn._promiseRejected (/Users/stuart/Documents/FamilyStoryUI/fsIonic/node_modules/bluebird/js/release/generators.js:107:10)\n        at Promise._settlePromise (/Users/stuart/Documents/FamilyStoryUI/fsIonic/node_modules/bluebird/js/release/promise.js:576:26)\n        at Promise._settlePromise0 (/Users/stuart/Documents/FamilyStoryUI/fsIonic/node_modules/bluebird/js/release/promise.js:614:10)\n        at Promise._settlePromises (/Users/stuart/Documents/FamilyStoryUI/fsIonic/node_modules/bluebird/js/release/promise.js:689:18)\n        at Async._drainQueue (/Users/stuart/Documents/FamilyStoryUI/fsIonic/node_modules/bluebird/js/release/async.js:133:16)\n        at Async._drainQueues (/Users/stuart/Documents/FamilyStoryUI/fsIonic/node_modules/bluebird/js/release/async.js:143:10)\n        at Immediate.Async.drainQueues [as _onImmediate] (/Users/stuart/Documents/FamilyStoryUI/fsIonic/node_modules/bluebird/js/release/async.js:17:14)\n        at runCallback (timers.js:763:18)\n        at tryOnImmediate (timers.js:734:5)\n        at processImmediate (timers.js:716:5)\n\nIt's really odd\n. ",
    "jeremy-moore": "It bit me too. ",
    "FagnerMartinsBrack": "Similar problem here. The code is like this:\njavascript\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('./adapters/xhr');\n  } else if (typeof process !== 'undefined') {\n    // For node use HTTP adapter\n    adapter = require('./adapters/http');\n  }\n  return adapter;\n}\nFrom what I can tell, Axios assumes if XMLHttpRequest exists then it's running in a browser environment. However, Jest run the tests in an environment where XmlHttpRequest is present, even if it's running in node.\nMy current hack is similar to the one above, but it's requiring the undocumented http adapter file path:\njavascript\naxios.get(url, {\n  headers: requestIntent.headers,\n  adapter: require('axios/lib/adapters/http'),\n})\nI believe Axios should use the same algorithm when making HTTP requests inside the browser and when it's in node. Am I missing something?. ",
    "agnelpraveen": "Make sure you are setting a testURL in your Jest config. The error is typically generated by jsdom when the URL is invalid.\nInfo from Jest --\ntestURL [string]\nDefault: about:blank\nThis option sets the URL for the jsdom environment. It is reflected in properties such as location.href.. Make sure you are setting a testURL in your Jest config. The error is typically generated by jsdom when the URL is invalid.\nInfo from Jest --\ntestURL [string]\nDefault: about:blank\nThis option sets the URL for the jsdom environment. It is reflected in properties such as location.href.. ",
    "barraponto": "I'm new to Jest and I didn't know jsdom was the default environment.\nI don't think this needs to be fixed in axios, but rather in jest documentation.\nIf you're not testing browser (or dom-enabled) code, you have to set testEnvironment: node in your jest configuration. You can achieve the same by calling jest with --env node.. I'm new to Jest and I didn't know jsdom was the default environment.\nI don't think this needs to be fixed in axios, but rather in jest documentation.\nIf you're not testing browser (or dom-enabled) code, you have to set testEnvironment: node in your jest configuration. You can achieve the same by calling jest with --env node.. ",
    "STLighter": "How about try abort-controller?. @binki Thanks a lot. I tried my fiddle again and it's fixed! It seems to be fixed at #1399 recently.. ",
    "anderson916": "same problem here. @xkortex have you found a solution yet?. ",
    "incorvia": "I was able to get it working with the following format:\n``\n  callFunction(accessToken, deviceId, func, arg) {\n    console.log(Suvie: callFunction ${func}`)\nclient = axios.create({\n  baseURL: this.baseUrl,\n  timeout: 5000,\n  headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n});\n\nreturn client.post(`/devices/${deviceId}/${func}?access_token=${accessToken}`, `arg=${arg}`)\n.then(function (response) {\n  console.log(response)\n  return JSON.parse(response.data)\n})\n.catch(function (error) {\n  console.log(error)\n  return null;\n})\n\n}\n```\n. ",
    "uynap": "BTW. I've tried rejectUnauthorized: false. It's just not working. https://github.com/axios/axios/issues/535. ",
    "gunasevi": "I'm stuck on this issue too. #535 suggests to create a custom https agent and set rejectUnauthorized to false however, https module doesn't exist in node_modules. Is there any workaround for this in react native?. ",
    "florianbepunkt": "+1 Same here. ",
    "xemasiv": "Also encountered this on axios with react-native\nJust use a Free SSL that isn't self-signed instead.\nFree SSL & React Native Apps\nProblem:\n Your react-native app can't reach your http server, since https is required\n Your https server can't be reached, because sites / endpoints using self-signed certificates are disallowed\n* Long story short, XHR / axios / Webview can't reach your server\nSolution:\n\n\nGenerate a CSR\n\n\nYou can use Namecheap's tool - https://decoder.link/csr_generator\n\n\nMake sure you keep the private key, you'll use it later\n\n\nGo get a Free SSL catered by Comodo.\n\n\nhttps://ssl.comodo.com/free-ssl-certificate.php\n\nThe certificate bundle you'll get won't be a self-signed one, a commodo support representative confirmed this with me.\nUse your CSR, then validate your ownership\nAfter couple of minutes you'll receive your cert bundle in your email, with 4 files\napi_realtycoast_io.crt (named after the domain I used, which is api.realtycoast.io)\nAddTrustExternalCARoot.crt\nCOMODORSAAddTrustCA.crt\n\nCOMODORSADomainValidationSecureServerCA.crt\n\n\nDo a CA/End-Entity Certificate matching\n\n\nGo to https://decoder.link/ca_matcher\n\nPaste the content of your api_realtycoast_io.crt equivalent as the END ENTITY CERTIFICATE\nPaste the content of your COMODORSADomainValidationSecureServerCA.crt as the CA CERTIFICATE\n\nValidate that shit, should be successful - if so, we proceed\n\n\nConfigure your Express SSL configuration\n\n\nCreate a /ssl folder\n\nPut all those certificate files there\nCreate a private.key file, PASTE YOUR PRIVATE KEY from STEP 1 there\nNow we use your site's certificate, your private key, and your CA certificate\n\n```\nconst fs = require('fs');\nconst http = require('http');\nconst https = require('https');\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst SSL = {\n  credentials: {\n    key: fs.readFileSync('ssl/private.key', 'utf8'),\n    cert: fs.readFileSync('ssl/api_realtycoast_io.crt', 'utf8'),\n    ca: [\n      fs.readFileSync('ssl/COMODORSADomainValidationSecureServerCA.crt', 'utf8')\n    ]\n  }\n};\nconst app = express();\napp.use(bodyParser.json());\napp.get('/', (req, res) => res.send('Hello World!'));\nhttp.createServer(app).listen(80);\nhttps.createServer(SSL.credentials, app).listen(443);\n```\n\nGit add, commit and push that shit\n\nRun your nodejs server again\n\n\nVerify that shit\n\n\nVisit your https://yoursite.com/ that should be working well\n\nVisit https://www.sslshopper.com/ssl-checker.html\n\nCheck your server endpoint's url there, you should be seeing ALL CHECKS, AND NO X's\n\n\nRebuild your react-native app, and re-run it - should be workign well now\n\n\nTest code for webview\n\n\n```\nimport { WebView, View } from 'react-native';\n// in your component render(), below\nreturn (\n\n\n\n);\n```\n\nTest code for axios\n\n```\n    // replace your baseURL and url, below\n      <Button onPress={\n        ()=>{\n          const x = axios.create({\n            baseURL: 'https://api.realtycoast.io/',\n            timeout: 10000,\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json',\n            }\n          });\n        x.request({\n          url: '/user/123'\n        })\n          .then(function (response) {\n            console.log(response);\n          })\n          .catch(function (error) {\n            console.log(error);\n          });\n        }\n      }>\n        <Text>Axios Test</Text>\n      </Button>\n\n```\nhttps://github.com/xemasiv/my-dev-fixes#free-ssl--react-native-apps. ",
    "shamilsun": "@xemasiv this is not a solution, its example how to add ssl on nodejs backend. but we are looking how to allow self-ssl requests on android . okhttp3 restrict self signed certificate. @xemasiv this is not a solution, its example how to add ssl on nodejs backend. but we are looking how to allow self-ssl requests on android . okhttp3 restrict self signed certificate. with axios\n. with axios\n. ",
    "matthewdordal": "I've seen the access-control-allow-origin issue a few times. Usually this happens to me when I am trying to call an API while I am working on http://localhost and that looks like the case here.\nThis MDN page has a lot of good information on the CORS and the access-control-allow-origin-header. My first guess looking at the headers is that the server set the access-control-allow-origin header to the http://xxxxxxxx.com example domain. But you are trying to hit it from http://localhost which is not the same domain.. I've seen the access-control-allow-origin issue a few times. Usually this happens to me when I am trying to call an API while I am working on http://localhost and that looks like the case here.\nThis MDN page has a lot of good information on the CORS and the access-control-allow-origin-header. My first guess looking at the headers is that the server set the access-control-allow-origin header to the http://xxxxxxxx.com example domain. But you are trying to hit it from http://localhost which is not the same domain.. ",
    "waratah": "CORS always issues two requests.  The first is NOT the post and it is the Cross Domain request.  This is probably the 200 you are seeing.   The second call is blocked if CORS is not allowed.. This is not an axios issue, it is a server security issue.    You can allow CORS on the server you are communicating with.\nIssues you may have:   Running the api on localhost/api but the website is served from localhost:8080.  The port number is different.    Accessing www.xyz.com but calling api.xyz.com,   you are going to a different logical site.\nRead up on your back end software how to allow CORS or request your back end provider to allow you to talk to their services.. ",
    "rubyLiuqq": "First, I'm so sorry that I solved this problem many days ago\nNext,The reason : Server-side interface to the request has been limited, so I use SwitchHost to binding the IP, like:\" 127.0.0.1  xxxxxxxx.com\".\nThe solution @matthewdordal had been given, Thanks. My first guess is the url, you can try use \"/api/test?t=1&n=...&m=...\" . ",
    "vigneshkvw": "can you tell me the solution!!. ",
    "ChiaraSammarco": "In two words: If you are using expressJS like me.\nFor solving the problem: 'Access-Control-Allow-Origin' header on a get request just add: \napp.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});\nSee here the solution: https://enable-cors.org/server_expressjs.html\n. In two words: If you are using expressJS like me.\nFor solving the problem: 'Access-Control-Allow-Origin' header on a get request just add: \napp.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});\nSee here the solution: https://enable-cors.org/server_expressjs.html\n. ",
    "janober": "Sounds like it is related to my issue #1168. I switched in the end to \"request-promise\", can just advise you to do the same. There getting the actual error is very simple.. ",
    "theodoregold": "I have been pulling my hairs out with this issue for a couple of days now, not being able to detect error status code.. ",
    "ben-eb": "I was able to work around this issue by testing that the error message includes 413 and displaying a more user friendly error. It's not elegant though! \ud83d\ude03 \njs\naxios.post('/api/files/new', formData, config)\n  .catch(err => {\n    if (err.message && err.message.includes('413')) {\n      console.log('The file you tried to upload is too large.')\n    }\n  });. ",
    "iansu": "I think @liuqinqin is correct and the get method does not take a data parameter: https://github.com/axios/axios#axiosgeturl-config\nThat being said, it maybe should take a data parameter and turn it into a query string.. ",
    "secisland": "@iansu you are right \uff0cthx to everybody!. ",
    "k1r0s": "Just read this. You're right but since AxiosStatic extends from AxiosInstance, does it make sense to keep function signatures on AxiosStatic?\nhttps://github.com/axios/axios/pull/1244/commits/981426ea214c68435b2688844072264f938d5d8f from https://github.com/axios/axios/pull/1244. ",
    "pntgupta": "Thanks, missed that. ",
    "dylanscott": "Looking into this further, it looks like this was a change between v0.16.1 and v0.16.2, and in fact is a consequence of #930. Changing the method in the code sample to \"post\" results in the same header being included on v0.16.1\nI'm not really sure whether to call this a breaking change, so I will defer to you on that. Presumably technically the code above was considered incorrect pre-0.16.2 because it specified method: POST. But the code still resulted in the correct POST request being sent, even though it stopped the default content-type header from being included, so it was confusing and seemed breaking if you depended on that bug (as I was). ",
    "vouill": "I did encounter a bug related to it. When using a transform request in POST  request, the Content-type header automatically sets to application/x-www-form-urlencoded, even if we correctly re set the header in the transform request callback. i had to fallback on 16.0. ",
    "dlgoodchild": "I've recently started moving from using jQuery for AJAX work to Axios, just because it seems to be all the rage. But I was shocked to learn I can't do a simple POST.\nSo, here's what I first tried:\naxios.post('/api/event/item', {\n    event_id: eventId,\n    item_id: itemId,\n    description: description\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\nOn the backend (using PHP) $_POST was completely empty. So I did some googling, and this works (with the use of a polyfill, sigh):\nconst params = new URLSearchParams();\nparams.append('event_id', eventId);\nparams.append('item_id', itemId);\nparams.append('description', description);\naxios({\n  method: 'post',\n  url: '/api/event/item',\n  data: params\n});\nThis works. So I need to use URLSearchParams? Well this was frustrating because the docs show that the first method should work.\nAnyone else having this trouble?. Ahh good approach! For the benefits of anyone landing here, in the end I got it working using in 3 variants:\n1. FormData\n2. URLSearchParams\n3. querystring.stringify (part of Node)\nThe problem with the first 2 options is browser compatibility (check with caniuse.com). The last is another depdendency.\nI wasn't aware of the transformRequest option, this looks good and is a great option if you want minimise dependencies and work cross browser particularly for older versions.\nI think the documentation is what makes Axios frustrating for many people. The number of StackOverflow questions relating to POST using Axios is a good indication there's a problem somewhere and general misunderstanding.. @yuri-wisestamp couldn't agree more, it's a very odd/unusal design choice. I've mostly stopped using it now as I felt spurned by the hours I lost debugging it due to lack of good documentation to lay this out from the outset.. @latanoil honestly, there's little to no upside to using axios. Best to stick to a simpler, better supported, better documented Ajax library. Jquery is tried and tested and works perfectly well and you'll have none of the issues found here. . ",
    "at88mph": "@dlgoodchild Are you trying to send it as Form data?  I found my POST body was empty too, but I had to use this to transform it into something Form-like:\n```\n   ...\n      data: params,\n      transformRequest: [\n        function(data, headers) {\n          const serializedData = []\n      for (const k in data) {\n        if (data[k]) {\n          serializedData.push(`${k}=${encodeURIComponent(data[k])}`)\n        }\n      }\n\n      return serializedData.join('&')\n    }\n  ],\n\n...\n```\nAgreed, the POST functionality needs work.  . ",
    "yuri-wisestamp": "Have the same problem - spent few hours on research, finally found this issue. Thoughts: POST shouldn't be complicated, and shouldn't require dependencies or extra configuration. This feels like AngularJS 1 all over again. I'll pass on using this library for now.. ",
    "Antoinebr": "Post with Axios and PHP is a true nightmare ! \nI spent two hours, without getting any result... \n. I fixed my issue like that : \nFront\n\u270buserSearchParams() doesn't work everywhere ( https://caniuse.com/#search=URLSearchParams() ) \n```JavaScript \n        let params = new URLSearchParams();\n        params.append('email', this.email );\n        params.append('url', userInfo.url );\n        this.$http.post(\n          'http://localhost:9999/api/record.php', params\n          )\n        .then((response) => {\n          if (response.data.message === \"success\" )  this.$router.push( 'thankyou' );\n        })\n        .catch( (error) =>   console.log(error) ) ;\n``` \nBack\n``` php\nprint_r( $_POST ); \n// $_POST['email'] = 'lol@google.fr'\n// $_POST['url'] = 'http://google.fr'\n```  \n. ",
    "richgoldmd": "Non-form-encoded posts do not populate $_POST in PHP. You have to read the post body:\n$body = file_get_contents('php://input');\nif you expect json:\n$json=json_decode($body);\nThis code:\n```js\naxios = require('axios');\nvar param = {\n   args: {\n      myStringVal: '979251e4-6c9f-460d-ba32-1b6fe58ce8a3'\n   }\n};\naxios({\n   method: 'post',\n   url: 'http://home.test/post.php',\n   data: param,\n});\n```\nAgainst this in the server:\n```php\n<?php\n$entityBody = file_get_contents('php://input');\nfile_put_contents(DIR . '/output.txt', print_r(json_decode($entityBody), true));\n```\nProduced this output:\n```\nstdClass Object\n(\n    [args] => stdClass Object\n        (\n            [myStringVal] => 979251e4-6c9f-460d-ba32-1b6fe58ce8a3\n        )\n)\n```\n. I'm using PHP. No issues. \nIn some cases I want json (usually), so I set the header accordingly. In cases where I want $_POST populated I use a library like qs or my own smaller simpler implementation (which wouldn't handle all cases but is adequate for me) to convert to a query string.\nSee this SO post for an example on one such function: https://stackoverflow.com/a/1714899/6728516\nThis quirk of Axios has been addressed in the main documentation for a long time, though admittedly it could be a bit more descriptive.\nI generally find using JSON so much more versatile that I rarely do this any longer. See my comment above for a method for retrieving the posted JSON in PHP.. ",
    "Legym": "I got mine to work by installing qs.\n```\n          import qs from \"qs\";\n    const params = {\n        name: \"User\",\n        startTime: \"2:00PM\",\n        endTime: \"3:00PM\",\n        status: \"pending\",\n        invitation: \"test\",\n    };\n\n    axios.post(\"DOMAIN/event/new\", qs.stringify(params))\n        .then((response) => {\n            console.log(response);\n        })\n        .catch((error) => {\n            console.log(error);\n        });\n\n```. I actually found a better solution without the need for an external library. The Post request Header is set to form. You'll need to change the header if you are sending a JSON object\n```\n        const params = {\n            name: \"User\",\n            startTime: \"2:00PM\",\n            endTime: \"3:00PM\",\n            status: \"pending\",\n            invitation: \"test\",\n        };\naxios.post('DOMAIN/event/new', params, {\n     headers: {\n          'content-type': 'application/json',\n     },\n})\n```\n. ",
    "ArmandoHerra": "@Legym Thanks! I got mine working as well with qs.stringify! Damn I was about to stop using axios since I could not get my POST requests to work correctly!\nMany thanks!. ",
    "transient-ad": "@Legym    Thank  you very  much!  . ",
    "lerpinglemur": "I really don't understand why POST doesn't work. Legym's headers don't fix it for me.\njquery worked first try so i dont know what's going on.. ",
    "latanoel": "Has anyone been able to POST a file and data via axios?\nI'm using PHP's Laravel framework.. Has anyone been able to POST a file and data via axios?\nI'm using PHP's Laravel framework.. Thanks @dlgoodchild for the advice. I have struggled with this for a couple of days now. I'll just stick to jQuery.. Thanks @dlgoodchild for the advice. I have struggled with this for a couple of days now. I'll just stick to jQuery.. ",
    "HellsingMatt": "axios({\n  method: 'post',\n  url: 'http://blahblahblah',\n  params: {\n    key1: value1,\n    key2: value2\n  }\n})\nwork this way, use params, not data. @mallochine interesting, I do use params with POST in node.js. @mallochine never learnt PHP yet, all my backend using node.js. ",
    "mallochine": "LOL I cannot believe this was so hard to get working.\nSomething this basic, this ... common, should NOT be hard.. @HellsingMatt nope didn't work for me. It's possible you have that confused with $_GET. Because 'params' is what I used to get it working for GET. But it did not work for me with POST.. @HellsingMatt ok. I'm using PHP. It looks like axios completely craps up with PHP. Are you using PHP backend?. ",
    "Daniel217D": "It's seems like mistake in documentation, but should use params object, no data and it's working. I've spent 2 hours to understand it((\n\naxios({\n  method: 'post',\n  url: 'url',\n  params: {\n    key: value\n  }\n})\n. It's seems like mistake in documentation, but should use params object, no data and it's working. I've spent 2 hours to understand it((\n\naxios({\n  method: 'post',\n  url: 'url',\n  params: {\n    key: value\n  }\n})\n. ",
    "pratikpagade": "Thanks alot Daniil. I appreciate your help. Thanks for letting me know the\nerror.\nOn Sat, Nov 10, 2018 at 11:18 AM Daniil notifications@github.com wrote:\n\nIt's seems like mistake in documentation, but should use params object, no\ndata and it's working. I've spent 2 hours to understand it((\naxios({\n  method: 'post',\n  url: '/wp-admin/admin-ajax.php?action=data_fetch',\n  params: {\n    key: value\n  }\n})\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/axios/axios/issues/1195#issuecomment-437612819, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ApIWeUP45k17b70vsaT80KR1g_cxXcMvks5utyZzgaJpZM4Ql8j5\n.\n. \n",
    "AndrianD": "\nI fixed my issue like that :\nFront\n\u270buserSearchParams() doesn't work everywhere ( https://caniuse.com/#search=URLSearchParams() )\njs\n        let params = new URLSearchParams();\n        params.append('email', this.email );\n        params.append('url', userInfo.url );\n        this.$http.post(\n          'http://localhost:9999/api/record.php', params\n          )\n        .then((response) => {\n          if (response.data.message === \"success\" )  this.$router.push( 'thankyou' );\n        })\n        .catch( (error) =>   console.log(error) ) ;\nBack\n```\nprint_r( $_POST ); \n// $_POST['email'] = 'lol@google.fr'\n// $_POST['url'] = 'http://google.fr'\n```\n\nIt help so much, thank you!. ",
    "Twinsen343": "\naxios({\n  method: 'post',\n  url: 'http://blahblahblah',\n  params: {\n    key1: value1,\n    key2: value2\n  }\n})\nwork this way, use params, not data\n\nworks for me too thanks, much cleaner approach.. ",
    "simkessy": "I have an Axios instance already created with the base url. \nI want to make a post using that instance. What's the correct setup? \nThis works: \n    axios({\n        method: \"post\",\n        url: \"https://slack.com/api/chat.postMessage\",\n        params: {\n            token: this.token,\n            channel: this.channel,\n            text: \"Testing API\"\n        },\n        transformRequest: [\n            (data, headers) => {\n                console.log(\"data-in-transform\", data);\n                delete headers.post[\"Content-Type\"];\n                return data;\n            }\n        ]\n    });\n\nThis does not work: \nax = axios.create({\n        baseURL: `https://slack.com/api/`,\n        params: {\n            token: this.token,\n            channel: this.channel\n        },\n        withCredentials: false,\n        transformRequest: [\n            (data, headers) => {\n                delete headers.post[\"Content-Type\"];\n                return data;\n            }\n        ]\n    });\n        this.ax.post(\"chat.postMessage\", {\n            withCredentials: false,\n            params: {\n                text: \"Testing API\"\n            },\n            transformRequest: [\n                (data, headers) => {\n                    console.log(\"data-in-transform\", data);\n                    delete headers.post[\"Content-Type\"];\n                    return data;\n                }\n            ]\n        });. I have an Axios instance already created with the base url. \nI want to make a post using that instance. What's the correct setup? \nThis works: \n    axios({\n        method: \"post\",\n        url: \"https://slack.com/api/chat.postMessage\",\n        params: {\n            token: this.token,\n            channel: this.channel,\n            text: \"Testing API\"\n        },\n        transformRequest: [\n            (data, headers) => {\n                console.log(\"data-in-transform\", data);\n                delete headers.post[\"Content-Type\"];\n                return data;\n            }\n        ]\n    });\n\nThis does not work: \nax = axios.create({\n        baseURL: `https://slack.com/api/`,\n        params: {\n            token: this.token,\n            channel: this.channel\n        },\n        withCredentials: false,\n        transformRequest: [\n            (data, headers) => {\n                delete headers.post[\"Content-Type\"];\n                return data;\n            }\n        ]\n    });\n        this.ax.post(\"chat.postMessage\", {\n            withCredentials: false,\n            params: {\n                text: \"Testing API\"\n            },\n            transformRequest: [\n                (data, headers) => {\n                    console.log(\"data-in-transform\", data);\n                    delete headers.post[\"Content-Type\"];\n                    return data;\n                }\n            ]\n        });. ",
    "brij-dev": "I spent 15 days to solve this issue :( Here is the Code\n Axios({\n\n        method: apiMethod,\n        url: root_url, // Api URL\n        data: (apiMethod === 'POST')? Qs.stringify(apiParams) : undefined, // API post parameters,\n        params:(apiMethod === 'get')? apiParams : undefined, //API get params\n        headers:{\n          'Accept': 'application/json',\n          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n        },\n\n    }).then(function (response) { // On Success\n        console.log('Response', response.data );\n\n        successCallback(response.status, response.data);\n    })\n    .catch(function (error) { // On Failure\n        console.log('error', error);\n\n        errorCallback(error.status, error.data);\n    })\n    .then(function () { // Always\n        alwaysCallback(false);\n    });.\n",
    "holic-cl": "I had same issue i configured the CORS in the server side and the error is gone.\nI used this config to my axios client:\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:8000/',\n  timeout: 1000,\n   withCredentials: false\n}). ",
    "SrTristao": "\nHi, I think that is not a problem with Axios, maybe a CORS problem?\nBy the way, you can use instances to improve the request\n\nHello @victorm95, I think the problem is not in CORS, because axios working others browsers but expecific IE9 not work.\n\nI had same issue i configured the CORS in the server side and the error is gone.\nI used this config to my axios client:\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:8000/',\n  timeout: 1000,\n   withCredentials: false\n})\n\n\nHello @holic-cl not work here =/. ",
    "victorm95": "Can you share more details?\nThe log, maybe a screenshot of the request. ",
    "HelloLeeChan": "I have the same issue. Did you try do enable Access Data Source Cross Domains \nhttps://stackoverflow.com/questions/2044684/access-control-for-cross-site-requests-in-internet-explorer. ",
    "shanger": "hi , I have same issue.\nCORS did't work on IE\uff0cheader did't sent . if u want set header, u need a mid server to forwarding requests. ",
    "fracasula": "Alright, I figured this out myself, posting it here in case someone googles it.\njs\naxios({\n    method: 'PROPFIND',\n    url: '/v1/search'\n});. ",
    "magnusart": "So almost one year later I had forgotten about this insanity and ran into it again! This is such a time waster. This time it was for PUT instead and since the content is empty the header get stripped. If I have an error where the content is missing I instead get a different error (unsupported media type) because Axios is now \"helping\" me by removing the content type. Please remove this feature!. I looked through the blame history and it seems @mzabriskie might be the correct recipient. I'm obviously biased having stumbled upon this twice, but I'm trying to keep an open mind: Why is Axios removing the Content-Type header even if it has been explicitly set in the config?. ",
    "peterjwest": "Can this be merged? (I can't). ",
    "anonrig": "+1. ",
    "PaijoRX": "Hi, \nSSL pinning is a standart on our mobile app. If I want to use Axios, is it possible to implement SSL pinning?\nThanks. ",
    "gagan-bansal": "Yes I also want to use SSL pinning with Cordova.. Yes I also want to use SSL pinning with Cordova.. ",
    "gauravds": "We are using axios inside our React-native apps, and We also want Public key pinning.. ",
    "sagarguhe": "+1. ",
    "andcosta": "+1. ",
    "pgilad": "Headers by definition are case-insensitive so it would make sure to have a single check but only for the lower-case version (or upper, you get the idea). ",
    "echoulen": "any progress?. ",
    "jialixiang": "have the same issue as @kidlj, axios seems cannot redirect properly when using proxy. ",
    "Tidyzq": "same issue here, and here is a minified code to reproduce\n```javascript\nvar axios = require('axios');\nvar http = require('http');\nvar url = require('url');\nvar str = 'test response', proxyStr = ' through proxy'\nvar server = http.createServer(function (req, res) {\n  var parsed = url.parse(req.url);\nif (parsed.pathname === '/one') {\n    res.setHeader('Location', '/two');\n    res.statusCode = 302;\n    res.end();\n  } else {\n    res.end(str);\n  }\n}).listen(4444, function () {\nvar proxy = http.createServer(function (request, response) {\n    var parsed = url.parse(request.url);\n    var opts = {\n      hostname: parsed.hostname,\n      port: parsed.port,\n      path: parsed.path\n    };\nhttp.get(opts, function (res) {\n  var body = '';\n  res.on('data', function (data) {\n    body += data;\n  });\n  res.on('end', function () {\n    if (res.headers.location) {\n      response.setHeader('Location', res.headers.location);\n    }\n    response.statusCode = res.statusCode;\n    response.end(body + proxyStr);\n  });\n});\n\n}).listen(4000, function () {\naxios.get('http://localhost:4444/one', {\n  proxy: {\n    host: 'localhost',\n    port: 4000\n  },\n}).then(function (res) {\n  console.log(res.data); // should be \"test response through proxy\"\n});\n\n})\n});\n```. ",
    "dereknelson": "Turns out I forgot an equals sign in an if statement, so locally it would set the variable = true, but would not update the state. . ",
    "TimBeyer": "The browser uses XHR and as far as I know you cannot override the default follow redirect behavior there.. ",
    "arnav13081994": "I have the same problem.. ",
    "Jerome1337": "Same problem here, trying to execute request with @ char and then Axios return Network error\n. ",
    "lardissone": "+1 to passing the Status Code to transformResponse!. ",
    "tandrewnichols": "Alternatively, abide by the typical node signature and always pass an error as the first argument and a successful response as the second argument. That's still not quite as robust as it could be cause you'd always have to check if (err), but it would be, at least, a nice intermediate step.. I think this is related (the screen shot looks similar to what I'm seeing). If I use a local baseUrl, the port that axios attempts to use is wrong. That is, I'm creating an axios instance with baseUrl: 'http://localhost:8000' but all the requests are throwing ECONNREFUSED on 127.0.0.1:80. Here's part of an error response (I grabbed everything down to baseUrl).\n{ Error: connect ECONNREFUSED 127.0.0.1:80\n              at Object._errnoException (util.js:1024:11)\n              at _exceptionWithHostPort (util.js:1046:20)\n              at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1182:14)\n            code: 'ECONNREFUSED',\n            errno: 'ECONNREFUSED',\n            syscall: 'connect',\n            address: '127.0.0.1',\n            port: 80,\n            config: \n             { adapter: [Function: httpAdapter],\n               transformRequest: { '0': [Function: transformRequest] },\n               transformResponse: { '0': [Function: transformResponse] },\n               timeout: 5000,\n               xsrfCookieName: 'XSRF-TOKEN',\n               xsrfHeaderName: 'X-XSRF-TOKEN',\n               maxContentLength: -1,\n               validateStatus: [Function: validateStatus],\n               headers: \n                { Accept: 'application/json, text/plain, */*',\n                  'X-Request-Id': 'no xri header',\n                  'User-Agent': 'axios/0.17.1' },\n               baseUrl: 'http://localhost:8000/api',. The problem is this line. It's trying to parse config.url before adding baseUrl to it, so there's no protocol or domain or anything. In my case - logging right before that line - config.url is just /v1/members/me, rather than http://localhost:8000/api/v1/members/me as I'd expect.. ",
    "anymost": "+1 to passing the Status Code to transformResponse! this feature is very important for handle different error. +1 to passing the Status Code to transformResponse! this feature is very important for handle different error. ",
    "mreza-kiani": "is this feature available now or it's been forgotten?. ",
    "TCGV": "Coming from jQuery ajax this wasn't straightforward to me as well. I had to do the following to prevent triggering chained then calls after calling catch:\n```\n    var promise = axios.create({ / config / }).then(function (response) {\n        / handle response /\n    });\npromise.catch(function (error) {\n  /* handle error */\n});\n\n/* return original promise */\nreturn promise;\n\n```\nThe equivalent jQuery ajax structure would be:\nreturn $.ajax({ /* config */ }).done(function (response) {\n        /* handle response */\n    }).fail(function (error) {\n      /* handle error */\n    });. ",
    "patrickalexchan": "waiting for the answer here also. ",
    "jabacchetta": "Just noticed this after diving into service workers this week. Is isomorphic-fetch a viable alternative for PWAs?. Great, thanks! I'll take a look.. ",
    "NShahri": "Is there any implementation for 'fetch adapter' in progress? otherwise I can work on it. @ccnokes Ok, I will send pull request soon. @ccnokes Ok, I will send pull request soon. @ccnokes, at the moment I change the code to choose fetch adapter when fetch is available otherwise it will choose XHR adapter.\nAlso I am using whatwg-fetch polyfill in test environment as it lets me to run the all current tests against fetch adapter with minimum changes. This polyfill uses XHR to implement fetch, so I can use it on test environment for running current XHR tests for fetch adapter. But I am no sure about this approach.\nIn addition I have another question about 'withCredentials' as I think it can be mapped to request.credentials which can accept 'include', 'omit' and 'same-origin' as value. I am not sure 'include' or 'same-origin' is the right value when withCredianls=true or should I change axios interface to let user to choose value except true or false.\n@nickuraltsev @mzabriskie \nI am working on 22 failed test to finalise the implementation and send pull request.\n. @ccnokes, at the moment I change the code to choose fetch adapter when fetch is available otherwise it will choose XHR adapter.\nAlso I am using whatwg-fetch polyfill in test environment as it lets me to run the all current tests against fetch adapter with minimum changes. This polyfill uses XHR to implement fetch, so I can use it on test environment for running current XHR tests for fetch adapter. But I am no sure about this approach.\nIn addition I have another question about 'withCredentials' as I think it can be mapped to request.credentials which can accept 'include', 'omit' and 'same-origin' as value. I am not sure 'include' or 'same-origin' is the right value when withCredianls=true or should I change axios interface to let user to choose value except true or false.\n@nickuraltsev @mzabriskie \nI am working on 22 failed test to finalise the implementation and send pull request.\n. @ccnokes this is my first try to implement fetch adapter https://github.com/axios/axios/compare/master...NShahri:feature/fetch-adapter?w=1\nRemaining tasks:\n- Progress handlers (download and upload)\n- ~~Setting timeout~~: When AbortController is supported by browser or polyfill \n- Check new timeout test: It is failing on xhr adapter\n- ~~Abort~~: When AbortController is supported by browser or polyfill \n- Redirects\n- Use new implemented utils/enums in http and xhr adapter\n- Test bundle size\n- Passing all tests using polyfill\n- finalise tests for fetch\n- run tests for all xhr, http and fetch adapters. Thanks @ccnokes, Feel free to start implementing any of remaining tasks. let me know which one you started to avoid both of us working on the same task.. @ccnokes sorry for delay. \nit is up to you fork/PR me or direct commiting. @ccnokes sorry for delay. \nit is up to you fork/PR me or direct commiting. @eybarta \nUnfortunately I am too busy and can not finalise this feature. \nThe minimum requirements are implemented and tested, but I haven't use this in any app. It would be great if you have time and use it in your app. https://github.com/NShahri/axios/tree/feature/fetch-adapter\nThere is a list of remaining tasks in https://github.com/axios/axios/issues/1219#issuecomment-357931915.\nNOTE: \n- there are some missing functionalities because it is not supported by fetch in some browsers like request timeout and progress handler\n- because of the differences between xhr and fetch, there are some functionality in fetch which is not implemented by axios, like credentials: 'same-origin'\nNext phase to finalise fetch adapter would be changing axios interface to accept options which user can use to configure fetch request\n. @eybarta \nUnfortunately I am too busy and can not finalise this feature. \nThe minimum requirements are implemented and tested, but I haven't use this in any app. It would be great if you have time and use it in your app. https://github.com/NShahri/axios/tree/feature/fetch-adapter\nThere is a list of remaining tasks in https://github.com/axios/axios/issues/1219#issuecomment-357931915.\nNOTE: \n- there are some missing functionalities because it is not supported by fetch in some browsers like request timeout and progress handler\n- because of the differences between xhr and fetch, there are some functionality in fetch which is not implemented by axios, like credentials: 'same-origin'\nNext phase to finalise fetch adapter would be changing axios interface to accept options which user can use to configure fetch request\n. ",
    "ccnokes": "@NShahri I haven't started on anything yet, sadly \u2639\ufe0f . I actually just started working on this too (don't let this discourage you @NShahri, yours might be better or I might not finish it, etc). \nStill hoping for some positive signal from a maintainer. @nickuraltsev or @mzabriskie any thoughts on this? \nI haven't gotten too far into the implementation yet but I know one question that'll come up is do you explicitly opt into the fetch adapter or does it take precedence over the XMLHttpRequest one, if available? I'm sure more questions will come later \ud83d\ude04.. Nice @NShahri! Let me know if you need help with anything. . Hey @NShahri sorry for the delay, I'll take a look this week at the Redirects task. \nHow should we do this? Should I fork/PR you or do you want me just committing directly to your fork?. Personally, I'd be wary of working on adding fetch support as a PR, especially as there hasn't been any interest shown from maintainers. Also I noticed there's a 1.0.0 version in the plans: https://github.com/axios/axios/projects/2. Maybe a fetch adapter will be a part of that? . ",
    "eybarta": "Hey guys, any progress on this? I would LOVE to keep using axios, but I need to implement\noffline availability with SW's, can I do anything to help?\nthx. ",
    "rajatvijay": "@NShahri \nare all the remaining task done and released? \nIf not is it up for grabs?. ",
    "Mechazawa": "It'd be great if a fetch adapter can be part of 1.0.0. It'd solve a lot of issues I have with xhrAdapter. . It'd be great if a fetch adapter can be part of 1.0.0. It'd solve a lot of issues I have with xhrAdapter. . @juanarbol What PR was it fixed in? I can't find the fetch adapter in the codebase.. @juanarbol What PR was it fixed in? I can't find the fetch adapter in the codebase.. I'm having the same issue, looking around though this PR claims it fixes it but it doesn't https://github.com/axios/axios/pull/1395. I'm having the same issue, looking around though this PR claims it fixes it but it doesn't https://github.com/axios/axios/pull/1395. @RikkiGibson I think the main advantage would be reducing the dependency tree and not reducing the package size, which would be minimal anyways.. just do this\njs\nreturn val && val.constructor && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val). ",
    "juanarbol": "@ccnokes This issue is already solved, close please.. @ccnokes This issue is already solved, close please.. My bad, if anyone could explain me how to solve, I could help. My bad, if anyone could explain me how to solve, I could help. Just take a look into docs https://github.com/axios/axios#request-config. Using async/await could solve this problem; remember, you must handle your promise errors on every request.. Please do not use non LTS node versions\nYou're not using async/await in the right way:\n```js\n// DO NOT\n// Here .then() is not required, await is like calling .then()\nawait axios.all(axiosArray).then(res => {})\n// DO\nawait axios.all(axiosArray) // await will call .then() for me\n```\nYou could replace your .then() for a .catch()\njs\n// If that promise fails, will go to catch statement\nawait axios.all(axiosArray).catch(error => { // The error is thrown here!  })\nOr you could use try/catch\njs\n// Same that call await axios.all(axiosArray).then().chatch(e => {  // The error is thrown here!  })\ntry {\n await axios.all(axiosArray) \n} catch (err) {\n  // The error is thrown here!\n}. @Shreerang Take a look into const axiosArray = [] defined inside for loop as constant, instead use let axiosArray = [] at the first line of someFunc function. ",
    "cameronpickham": "Try return result.data. ",
    "ErenYatkin": "@cameronpickham I'm getting this error, I tried your solution but still the same.. ",
    "gs-akhan": "Same error.  :(. I notice this works when you have \nmodule : \"commonjs\"\nand does not work when you have module : esnext or es2015\nI wish I could fix this, if someone can help me. \nThanks . try \"moduleResolution\": \"node\" in your tsconf.json\nIt solved for me  \nThanks . ",
    "love2dishtech": "This fixed the problem for me as well. Any idea what's the logic behind the solution.. ",
    "rsmolkin": "I'm having the same problem in Cloud9 without type script\nconst axios = require('axios')\nResponse\n{\n    \"errorMessage\": \"Cannot find module 'axios'\",\n    \"errorType\": \"Error\",\n    \"stackTrace\": [\n        \"Function.Module._load (module.js:417:25)\",\n        \"Module.require (module.js:497:17)\",\n        \"require (internal/module.js:20:19)\",\n        \"Object. (/var/task/getGroupHolesPlayed/index.js:4:15)\",\n        \"Module._compile (module.js:570:32)\",\n        \"Object.Module._extensions..js (module.js:579:10)\",\n        \"Module.load (module.js:487:32)\",\n        \"tryModuleLoad (module.js:446:12)\",\n        \"Function.Module._load (module.js:438:3)\"\n    ]\n}. ",
    "seanpierce": "@gs-akhan 's solution did not work for me, still receiving \"Cannot find module 'axios'\" type error. ",
    "mubarak23": "Module not found: Can't resolve 'axios' in 'C:\\Users\\Mubarak  M Aminu\\Desktop\\ReactClass\\Blog\\src'\nany solution to this problem. ",
    "rgstephens": "Neither @gs-akhan nor @fireappsAdmin solutions worked for me.. ",
    "colincmcc": "If anybody is still having issues with this, copying node_modules/axios/index.d.ts to node_modules/@types/axios/index.d.ts seemed to work for me.\nOr create a folder to hold your custom types and edit your tsconfig to include it.\n\"typeRoots\" : [\"node_modules/@types\", \"custom_type_folder\"]. ",
    "aztack": "The error remains after adding \"moduleResolution\": \"node\" to tsconfig.json .\nBut disappeared after restarting VS Code.. ",
    "pouyajabbarisani": "OHH...\nIt was a logical error about Content-Type (Should be text/html).\n. ",
    "zvxayr": "Just found out that this is caused by how nodes http module handles requests offline. Closing because this is not a problem of axios itself. ",
    "F-12": "it seems that multiple interceptors on both global axios object and instance object still don't work.\njavascript\naxios.interceptors.response.use(undefined, err => {\n  console.log('First');\n  return err;\n});\nvar instance = axios.create({})\ninstance.interceptors.response.use(undefined, err => {\n  console.log('Second');\n  return err;\n});\noutput:\nSecond. \n\nit seems that  multiple interceptors actually appear in handlers list, but only the first works.. ",
    "nassimbenkirane": "The response interceptors are called in reverse order. This is why you have 'Second' as an output.\nIn order to have your next interceptor (the first one) fail, you need to return Promise.reject(error) from your error handlers.\nWhen you return error, it goes through the success handler.\naxios.interceptors.response.use(undefined, err => {\n  console.log('First');\n  return Promise.reject(err);\n});\nvar instance = axios.create({})\ninstance.interceptors.response.use(undefined, err => {\n  console.log('Second');\n  return Promise.reject(err);\n});\nCould you try and see if that fixes your problem ?. ",
    "unguul": "Probably worth mentioning for people using axios in the context of vuejs: If you set the interceptors outside of your Vue instance they will not get triggered on page refresh (by pressing F5).\nI fixed this by moving the setting of interceptors to the created function of my Vue instance.. For people getting here after searching \"axios access response headers\": \nremember js has array access so you can do: response.headers['my-header-name'];\nHere's a pull request making this clear in the docs: https://github.com/axios/axios/pull/1901\n. @mmor93 Please check if #1901 helps.. ",
    "cdeutsch": "Are you using it in a browser? It only works in Node. See #674. ",
    "NiklasRosenstein": "Yes, I am. Apparently I haven't looked through the existing issues well enough, sorry.\nThe second-last comment states that this info is in the README, but that doesn't seem to be the case (anymore?).\nThanks, I'll have to add a \"no redirect\" option to the end-point then.. ",
    "celgra": "Are you still having this issue?\nI looked at the code to merge url configs and there is nothing wrong there. The error you posted a screenshot of I believe is due to your node environment. Axios defers the request to the Node.js http module (when used in Node) all the code between an Axios instantiation and the Node.js http seems correct.. ",
    "koresar": "@tandrewnichols this is such a helpful last message mate. I was banging my head for an hour.\nThank you for creating this issue and then posting the solution.. IP addresses can't start with 0. Thus the EHOSTUNREACH error. See here for example: https://superuser.com/questions/665502/why-cant-ip-addresses-start-with-0-or-255\nThis issue should be closed.. You'd need to find why the address is\naddress: '0.0.31.153',. ",
    "teckel12": "Code snippet I use:\n.catch(error => {\n                if (error.code === 'ECONNABORTED') {\n                    // Do something when there's a timeout\n                } else {\n                    // Not a timeout error, do something else with the error\n                    console.log(error);\n                }\n            });. Code snippet I use:\n.catch(error => {\n                if (error.code === 'ECONNABORTED') {\n                    // Do something when there's a timeout\n                } else {\n                    // Not a timeout error, do something else with the error\n                    console.log(error);\n                }\n            });. ",
    "steelbrain": "I've opened https://github.com/axios/axios/pull/1715 to fix this. Thanks @dighan!\nNow I've made it try/catch, so it tries to set the header but doesn't crash in case the browser disallows. @dighan I am not sure about the bug you seem to be referring to, but the bug that I am trying to solve is this, which this PR does fix\n\nEdit: Oh I see what you mean. ",
    "avengerweb": "@brpaz you can`t use http adapter from electron coz of that: \nhttps://github.com/axios/axios/blob/master/package.json#L72. ",
    "aguynamedben": "This is super annoying. Everything works, but my console is flooded with this warning. I also tried setting my adapter to the http adapter but that is not working.\nAny other ideas? Is this just considered a bug?. ",
    "steerben": "Would be really cool if this could be merged. It's production critical for us. ",
    "yovanoc": "I have a problem with both request and axios.\n\n\nBut how a status code 200 can contain a bad request??? thanks. oh weird because for me it doesn't work only with proxy .. and I've written before a c# program that does the same and all was working without pain. Any news on this? :/. ",
    "stoneChen": "@yovanoc \nIs this problem happened due to proxy?\nIf not, the log line \"data HTTP/1.1 ...\" is the body of the request, not the response header, maybe something is wrong with the server.\nAdditionally, I try blew:\njs\nconst request = require('request')\nrequest({\n  json: true,\n  timeout: 10000,\n  tunnel: false,\n  url: 'https://haapi.ankama.com/json/Ankama/v2/Account/CreateGuest?game=20&lang=fr',\n}, function (error, response, body) {\n  console.log('error:', error);\n  console.log('statusCode:', response && response.statusCode);\n  console.log(body)\n});\nI got:\nerror: null\nstatusCode: 503\n<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n....\n. ",
    "ddgenome": "Until this gets merged and released, here is a published version of this fix: https://atomist.jfrog.io/atomist/npm-dev/axios/-/axios-0.17.1-proxy-fix-20180111160124.tgz\nYou can use this version of axios in your project using the following command:\n$ npm install --save https://atomist.jfrog.io/atomist/npm-dev/axios/-/axios-0.17.1-proxy-fix-20180111160124.tgz\n. We've had better luck with the fix by @Sitronik https://github.com/axios/axios/compare/master...Sitronik:master\nHere's a published version of that https://atomist.jfrog.io/atomist/npm-dev/axios/-/axios-0.17.1-proxy-fix.tgz\n. ",
    "elcolie": "My bad.\nIt is Django configuration. I have to install django-cors-headers\nhttps://github.com/ottoyiu/django-cors-headers. ",
    "betalb": "I've created potential fix, if it looks good, I can adopt to contributing guide, and create PR\nhttps://github.com/betalb/axios/commit/09cbfdca0d0ae07bf072a5eea5db1fe892b68524. Will create PR shortly, need to write failing test first.\n@montogeek about map, we need case insensitive map in this case, which is not offered by ES spec. And I don't see how map will help here, IMHO it will just add more confusion. Even if we will be able to predict in which order keys will be iterated, it won't help library user a lot, as he will need to know how adapter is implemented (maybe adapter is sorting headers by key) and which default values are provided by axios.\nI was trying not to increase the size of library itself too much. Trade off was made and merge method became case-insesnistive merge (that also does whitespace trimming of keys), which should be OK for it's current use case.. I've raised PR, anyone interested please review. Not sure that this is intended behaviour to mutate internal state of axios\nInstead pass additional headers when calling mAxInst.request if they need to be different every time.\nThe code that does merging of configs is not doing full clone, that's why common headers are shared. Well, mucking internal state, which is not advertised in documentation, is always a bad idea.\nConsidering that you can achive the same behaviour using public API, there is no point in increasing complexity of merge method used. transformRequest is a separate story, there you can mutate headers, according to documentation.\nThe question to devs in this case is why transform request is called before merging headers into shallow object. This is causing issues with not cloned common and method specific headers. But this change will be breaking.\n```\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n// Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers || {}\n  );\n```\nAlso strange that you have Authorization in common headers, I see that only Accept is inside of common defaults.. I think there is not enough info.\nCan you share axios config that is used to make request?\nAre you setting withCredentials flag to true?. Just realized that a lot of people are modifying instance.defaults.headers by reference.\nIn this case above PR won't fix the issue to full extent, result sent by adapters make result won't be fully predictable\nIMHO modification of configuration (headers in particular) by reference doesn't seem right. Better place may be transformRequest.\nBut pure functions look like a cleaner approach -- do not allow to mutate anything, require always to produce new object in interceptors, transformers and freeze defaults in DEV mode. I'm not closely following current development effort, but remember that there was talk about reworking way how configuration is done. Especially default configuration.\nI.e. at the time of writhing, there was a way to directly mutate default headers, inherited by all instances that means by the time we receive headers in adapter we already may have ambiguity.\nNote that my PR also doesn't address this issue. ",
    "sakoh": "I'm currently working on adding flow-types to axios on a branch on my fork:\nhttps://github.com/sakoh/axios/tree/flow-types. I'm currently working on adding flow-types to axios on a branch on my fork:\nhttps://github.com/sakoh/axios/tree/flow-types. @no23reason Sure, I'll make them exportable.. @no23reason Sure, I'll make them exportable.. ",
    "hqthao": "Have this branch done and ready to merge yet ? Thanks.. ",
    "jmarceli": "I'm not sure if it is still relevant but in order to add Flow annotations to axios response I use this code:\n```\n// @flow\nimport axios from 'axios';\nimport type { $AxiosXHR } from 'axios';\ntype RateLimit = {\n  limit: number,\n  remaining: number,\n  reset: number\n};\ntype RateLimitResponse = {\n  resources: {\n    core: RateLimit,\n    search: RateLimit,\n    graphql: RateLimit,\n  },\n  rate: RateLimit,\n};\nexport const getRateLimit = async (): Promise => {\n  const query: Promise<$AxiosXHR> = axios('https://api.github.com/rate_limit');\n  const result = await query;\n  return result.data;\n};\n```\nHere is mine more elaborate post on that topic https://www.grzegorowski.com/flow-type-checking-for-axios/. ",
    "datner": "Is there an update on this? It's quite annoying not being able to reach that elusive 100% flow coverage haha. ",
    "shobishani": "Is there any update? . ",
    "stefvw93": "I switched to typescript. Looking back now, after a few years of time and the code example, I'm glad that I did. So no update from me, sorry!. ",
    "hkan": "\nThe code that does merging of configs is not doing full clone, that's why common headers are shared\n\nWell, isn't that a bug? Creating an instance is all about having different configs between requests. That is why I (tried to) use instances for, at least.. > The code that does merging of configs is not doing full clone, that's why common headers are shared\nWell, isn't that a bug? Creating an instance is all about having different configs between requests. That is why I (tried to) use instances for, at least.. @betalb can you explain your comment with a sample code?\nMeanwhile, I solved my issue with this workaround:\naxios.put(endpoint, input, {\n\n    // Deleting Authorization header, because we have one as global Axios\n    // config and Amazon does not play nice with it.\n    transformRequest: [function (data, headers) {\n        delete headers.common.Authorization\n        return data\n    }],\n}). @betalb can you explain your comment with a sample code?\n\nMeanwhile, I solved my issue with this workaround:\naxios.put(endpoint, input, {\n\n    // Deleting Authorization header, because we have one as global Axios\n    // config and Amazon does not play nice with it.\n    transformRequest: [function (data, headers) {\n        delete headers.common.Authorization\n        return data\n    }],\n}). I added `Authorization` myself. Because %99 of the HTTP requests are to my server and it requires user's token. There is only one request that I send to Amazon S3 to upload images.\n\nBTW, this also did not work:\naxios.put(endpoint, input, {\n    headers: {\n         Authorization: null,\n    }\n})\n\nTried null, void 0, undefined and empty string. None of them actually wipe the default one. Funny thing is, Authorization: null (actual null, not 'null') makes that header a string 'null'. This is ultra weird. \ud83d\ude00 \n. I added Authorization myself. Because %99 of the HTTP requests are to my server and it requires user's token. There is only one request that I send to Amazon S3 to upload images. \nBTW, this also did not work:\naxios.put(endpoint, input, {\n    headers: {\n         Authorization: null,\n    }\n})\n\nTried null, void 0, undefined and empty string. None of them actually wipe the default one. Funny thing is, Authorization: null (actual null, not 'null') makes that header a string 'null'. This is ultra weird. \ud83d\ude00 \n. ",
    "cassiopagnoncelli": "@hkan Same problem here, global and instance headers seem quite confusing to manipulate.\nI'm using axios for my API and using request as fallback to outworld calls. . ",
    "mpaarating": "@spesvictus are there any particular areas of the documentation that you think need cleaned up?. @spesvictus are there any particular areas of the documentation that you think need cleaned up?. ",
    "zl810881283": "see this https://github.com/axios/axios/issues/897#issuecomment-343715381. ",
    "serenalucasjose": "I've just replicate this error and i want to shoot my self.. ",
    "rickysang": "@tinwinaung By default, Chrome reports network issues. You can suppress this error here: DevTools -> Settings -> Console -> Hide network messages. \nhttps://developers.google.com/web/tools/chrome-devtools/console/#additional_settings. ",
    "ayushkamadji": "+1 this. > \n\nIt looks like the documentation does now say that it's browser-only (since it is explicitly mentioned as a browser option, but not a Node option).\nThe question is... is there a reason that we can't use Node's URLSearchParams? I ran into this and have been scratching my head for a while until I re-read the README...\n\nIn that case, this should be closed and using URLSearchParams in node can be followed up as feature request.. ",
    "lucasriondel": "any news about that ?. ",
    "JustAHate": "The issue was on backend side. Api server was not answering with correct cors headers so axios did non received data even though I could see it network tab. ",
    "ablankenship10": "Having same issue. I'm uploading a file to S3 from the Chrome FileReader API on the browser. The file data is loaded the correct size(48kb) and then when Axios goes to upload the file it comes out in S3 as 70.7kb and im unable to open the file (zip file). I've tried loading it using all the Filereader.readAs options to the same result. Console.Logging the result shows the correct file size, its only with axios progress event logs that it shows the almost twice the filesize amount.\n```\nreturn fileReader(file)\n          .then((result) => {\n            return axios.put(fileurl, result, {\n              onUploadProgress: progressEvent => console.log('file progress', progressEvent.loaded),\n              headers: { 'Content-Type': 'text/octet-stream' }\n            });\n          })\nfunction fileReader(file){\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        resolve(reader.result)\n      };\n  reader.readAsBinaryString(file)\n})\n\n}\n```\n. ",
    "Remigius2011": "Had the same issue. I resolved it by using reader.readAsArrayBuffer instead of reader.readAsBinaryString. See also:\nhttps://github.com/axios/axios#request-config - description of data\nhttps://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsArrayBuffer\nhttps://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsBinaryString\n(it seems also that there is wider browser support for  reader.readAsArrayBuffer). BTW, my content type is image/jpeg - so even though the content type might have an influence, it did not cause the problem - at least in my case.. ",
    "say8425": "I have a same issue. I have a same issue. ",
    "nycdavid": "@also @say8425 It looks like it's happening in this file\nI've submitted a PR that could be a potential fix but it's my first time contributing to this repo, so I'm not sure when/if it'll get accepted.\nHopefully that'll at least shed some light on the issue!. ",
    "evanshortiss": "Addressed by #1254 . ",
    "karuppasamy": "Did you try the headers in the app/router level middleware like below?. Express middleware router\nrouter.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"http://localhost:3333\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});. ",
    "dantenovski": "@karuppasamy Thanks! It didn't work but it made me think that the server configuration may be the problem. I'm using cors module and it works like a charm\n```javascript\nconst cors = require('cors');\n//app.use(cors());\napp.use(cors({\n  origin: 'http://localhost:3333',\n  credentials: true\n}));\n```. ",
    "vahdet": "So, you may close this issue as it was rather a server side problem, and is solved ;). ",
    "ashishbhangade": "app.all('', function(req, res, next) {\n res.header(\"Access-Control-Allow-Origin\", \"\");\n res.header('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE, OPTIONS');\n res.header('Access-Control-Allow-Headers', \"Origin, X-Requested-With, Content-Type, Accept, Authorization\");\n //Auth Each API Request created by user. \n next();\n});. ",
    "SetareMaghari": "in my case the problem was for my website address\nthe website add is sateh.ir\nso im my ajax request i set the url: http://sateh.ir\nafter getting this error and working on it some hours, i got that i had to set ajax url to: http://www.sateh.ir. \ni dont know why my website cant understand that i'm calling api from the same server if i dont put 'www', but that was my problem at all. ",
    "sanjuraut": "Check out below solution. Hope it will help.\n//server.js\nconst express = require('express');\nconst bodyParser = require('body-parser');\nvar cors = require('cors');\nconst mongoose = require('mongoose');\n// create express app\nconst app = express();\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: true }))\n// parse application/json\napp.use(bodyParser.json())\napp.use(cors());\n// Configuring the database\nconst dbConfig = require('./config/database.config.js');\nmongoose.Promise = global.Promise;\n// Connecting to the database\nmongoose.connect(dbConfig.url)\n.then(() => {\n    console.log(\"Successfully connected to the database\");  \n}).catch(err => {\n    console.log('Could not connect to the database. Exiting now...');\n    process.exit();\n});\n// define a simple route\napp.get('/', (req, res) => {\n    console.log('get request');\n    res.json({\"message\": \"Welcome to EasyNotes application. Take notes quickly. Organize and keep track of all your notes.\"});\n});\nrequire('./app/routes/note.routes.js')(app);\n// listen for requests\napp.listen(3000, () => {\n    console.log(\"Server is listening on port 3000\");\n});\n///note.routes.js\nmodule.exports = (app) => {\n    const notes = require('../controllers/note.controller.js');\n// Create a new Note\napp.post('/notes', notes.create);\n\n// Retrieve all Notes\napp.get('/notes', notes.findAll);\n\n// Retrieve a single Note with noteId\napp.get('/notes/:noteId', notes.findOne);\n\n// Update a Note with noteId\napp.put('/notes/:noteId', notes.update);\n\n// Delete a Note with noteId\napp.delete('/notes/:noteId', notes.delete);\n\n}\n///note.controller.js\nconst Note = require('../models/note.model.js');\n// Create and Save a new Note\nexports.create = (req, res) => {\n    // Validate request\n    if(!req.body.content) {\n        return res.status(400).send({\n            message: \"Note content can not be empty\"\n        });\n    }\n// Create a Note\nconst note = new Note({\n    title: req.body.title || \"Untitled Note\", \n    content: req.body.content\n});\n\n// Save Note in the database\nnote.save()\n.then(data => {\n    res.send(data);\n}).catch(err => {\n    res.status(500).send({\n        message: err.message || \"Some error occurred while creating the Note.\"\n    });\n});\n\n};\n// Retrieve and return all notes from the database.\nexports.findAll = (req, res) => {\n    Note.find()\n    .then(notes => {\n       // console.log(\"===>\"+JSON.stringify(notes));\n        res.send(notes);\n    }).catch(err => {\n        res.status(500).send({\n            message: err.message || \"Some error occurred while retrieving notes.\"\n        });\n    });\n};\n// Find a single note with a noteId\nexports.findOne = (req, res) => {\n    Note.findById(req.params.noteId)\n    .then(note => {\n        if(!note) {\n            return res.status(404).send({\n                message: \"Note not found with id \" + req.params.noteId\n            });          \n        }\n        res.send(note);\n    }).catch(err => {\n        if(err.kind === 'ObjectId') {\n            return res.status(404).send({\n                message: \"Note not found with id \" + req.params.noteId\n            });              \n        }\n        return res.status(500).send({\n            message: \"Error retrieving note with id \" + req.params.noteId\n        });\n    });\n};\n// Update a note identified by the noteId in the request\nexports.update = (req, res) => {\n    // Validate Request\n    if(!req.body.content) {\n        return res.status(400).send({\n            message: \"Note content can not be empty\"\n        });\n    }\n// Find note and update it with the request body\nNote.findByIdAndUpdate(req.params.noteId, {\n    title: req.body.title || \"Untitled Note\",\n    content: req.body.content\n}, {new: true})\n.then(note => {\n    if(!note) {\n        return res.status(404).send({\n            message: \"Note not found with id \" + req.params.noteId\n        });\n    }\n    res.send(note);\n}).catch(err => {\n    if(err.kind === 'ObjectId') {\n        return res.status(404).send({\n            message: \"Note not found with id \" + req.params.noteId\n        });                \n    }\n    return res.status(500).send({\n        message: \"Error updating note with id \" + req.params.noteId\n    });\n});\n\n};\n// Delete a note with the specified noteId in the request\nexports.delete = (req, res) => {\n    Note.findByIdAndRemove(req.params.noteId)\n    .then(note => {\n        if(!note) {\n            return res.status(404).send({\n                message: \"Note not found with id \" + req.params.noteId\n            });\n        }\n        res.send({message: \"Note deleted successfully!\"});\n    }).catch(err => {\n        if(err.kind === 'ObjectId' || err.name === 'NotFound') {\n            return res.status(404).send({\n                message: \"Note not found with id \" + req.params.noteId\n            });              \n        }\n        return res.status(500).send({\n            message: \"Could not delete note with id \" + req.params.noteId\n        });\n    });\n};\n. ",
    "klummy": "I will recommend a customConfig: object | null property to be added to the interface which allows users to add unlimited custom configuration without type errors.\nI am open submitting a PR for this if the community deems it necessary.. ",
    "choi4450": "I need it.. \ud83d\ude2a. ",
    "service-paradis": "This would be great!\nI'm having Type Checking error using https://github.com/kuitos/axios-extensions since it used custom properties!. Same problem here using https://github.com/kuitos/axios-extensions. ",
    "heindrik": "UPDATE: looks like this is a non-issue. Chrome may output a non-negative number, but the actual value when you add them up is a negative.. ",
    "Ventajou": "I just ran into that, and I had the additional issue of using rollup-plugin-commonjs. I discovered that I should declare that plugin after the node-resolve and json plugins in order to avoid getting an error bundling Axios.. @alcandelario I gave up on using Axios in the browser, I'm just using the standard fetch API now, browser support is good enoug: https://caniuse.com/#search=fetch. ",
    "alcandelario": "@Ventajou @AntonioRedondo  any chance you might have a config file snippet handy to show your setup? I have been coming up empty at any attempt to get axios to build, even with these suggestions. \nhere's what gets added to my final bundle\nmodule.exports = require('./lib/axios');\nHere's my config:\n```\nimport vue from 'rollup-plugin-vue'\nimport buble from 'rollup-plugin-buble'\nimport nodeResolve from 'rollup-plugin-node-resolve'\nimport commonjs from 'rollup-plugin-commonjs'\nimport gzip from \"rollup-plugin-gzip\"\nimport uglify from 'rollup-plugin-uglify'\nimport replace from 'rollup-plugin-replace'\nimport livereload from 'rollup-plugin-livereload'\nimport serve from 'rollup-plugin-serve'\nimport includePaths from 'rollup-plugin-includepaths'\nimport CssNano from 'cssnano'\nimport rollupJson from 'rollup-plugin-json'\nconst isProduction = process.env.NODE_ENV === production\nconst isDevelopment = process.env.NODE_ENV === development\nconst isWatch = process.env.NODE_ENV === watch\nconst appLoaderSource = __dirname + '/src/app.js'\nconst appLoaderDest = __dirname + '/dist/app.js'\nlet includePathOptions = {\n    include: { \n        'axios': 'node_modules/axios/index.js'\n    },\n    paths: ['src/plugins', 'src/plugins/custom'],\n    external: [],\n    extensions: ['.js', '.json', '.html']\n}\nlet cssNanoConfig = (isProduction) ? {preset: 'default'} : {preset: 'default'} \nlet postCssPlugins = [\n        CssNano(cssNanoConfig)\n    ]\nvar config = {\n    input: 'src/main.js',\n    output: {\n        file: 'dist/app-bundle.js',\n        format: 'iife'\n    },\n    plugins: [\n        replace({\n            'process.env.NODE_ENV': JSON.stringify('production')\n        }),\n        includePaths(includePathOptions),\n        nodeResolve({\n            module: true,\n            jsnext: true,\n            main: true,\n            browser: true,\n            extensions: ['.vue']\n        }),\n        rollupJson(),\n        commonjs({\n            include: [ 'node_modules/**']\n        }),\n        vue({\n            css: null,\n            compileTemplate: true,\n            postcss: postCssPlugins\n        }),\n        buble(),\n        gzip()\n    ]\n}\nif (isProduction) {\n    config.plugins.push(uglify())\n}\nif (isWatch) {\n  config.plugins.push(livereload())\n  config.plugins.push(serve({\n    contentBase: './',\n    port: 4040,\n    open: true\n  }))\n}\nexport default config\n```. ",
    "pilishen": "actually, to fully compile axios, we still need another two plugins\nrollup-plugin-node-globals\nrollup-plugin-node-builtins\nwhich allow you to do named imports in addition to the default import, otherwise module like http or https, a bunch of other stuff, may be undefined. actually, to fully compile axios, we still need another two plugins\nrollup-plugin-node-globals\nrollup-plugin-node-builtins\nwhich allow you to do named imports in addition to the default import, otherwise module like http or https, a bunch of other stuff, may be undefined. ",
    "kokujin": "Is there a working config documented somewhere? I have been struggling with this problem for a while now. Thanks. Is there a working config documented somewhere? I have been struggling with this problem for a while now. Thanks. ",
    "blendsdk": "I was unable to make it work! Is there a documentation for this?\n+1. ",
    "jl1014171068": "\n\u5b9e\u9645\u4e0a\uff0c\u4e3a\u4e86\u5b8c\u5168\u7f16\u8bd1axios\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u53e6\u5916\u4e24\u4e2a\u63d2\u4ef6\nrollup-plugin-node-globals\nrollup-plugin-node-builtins\n\uff0c\u9664\u4e86\u9ed8\u8ba4\u5bfc\u5165\u4e4b\u5916\u8fd8\u5141\u8bb8\u4f60\u8fdb\u884c\u547d\u540d\u5bfc\u5165\uff0c\u5426\u5219\u50cfhttp\u6216https\u8fd9\u6837\u7684\u6a21\u5757\uff0c\u5176\u4ed6\u4e00\u4e9b\u4e1c\u897f\uff0c\u53ef\u80fd\u662f\u672a\u5b9a\u4e49\u7684\n\n\u8bf7\u95ee\uff0c\u6211\u5728\u5c06\u4f7f\u7528external: ['axios']\u540e\u6d4f\u89c8\u5668\u63d0\u793a axios is not undefined\u5982\u4f55\u5904\u7406\uff1f\u6211\u662f\u60f3\u5c06axios\u4e0d\u6253\u5305\u5728\u4e1a\u52a1js\u6587\u4ef6\u4e2d. ",
    "grunlowen2": "worked for me. thanks.\npackage.json\n      \"rollup-plugin-json\": \"^3.1.0\",\n      \"rollup-plugin-node-resolve\": \"^3.3.0\",\nrollup.config.json\n    import rollupNodeResolve from 'rollup-plugin-node-resolve'\n    import rolllupJson from 'rollup-plugin-json'\n   //plugins:\n    rollupNodeResolve({ jsnext: true, preferBuiltins: true, browser: true }),\n    rolllupJson()\n. worked for me. thanks.\npackage.json\n      \"rollup-plugin-json\": \"^3.1.0\",\n      \"rollup-plugin-node-resolve\": \"^3.3.0\",\nrollup.config.json\n    import rollupNodeResolve from 'rollup-plugin-node-resolve'\n    import rolllupJson from 'rollup-plugin-json'\n   //plugins:\n    rollupNodeResolve({ jsnext: true, preferBuiltins: true, browser: true }),\n    rolllupJson()\n. ",
    "emperorjm": "For some reason the \"this\" keyword can't be used within the \"axios.spread\" function so I had to do the following and the user the \"pointer\" variable instead:\nconst pointer = this;. ",
    "ebrenes": "Your problem is with the Access-Control-Allow-Origin header.  You can only specify one of the following values for it: *, null or a domain. You cannot specify a comma separated list, like you're doing. From the Cors Specification: \n\nRather than allowing a space-separated list of origins, it is either a single origin or the string \"null\".\n\nThat's why the browser is complaining about that header not matching. In this case it's defaulting to \"null\" because your list is invalid. \nYou can simply set it to * and call it a day. \nThe only cases in which you need to specifically call out the domain is when it's in production (because you don't want it to be open, right?) or when using withCredentials: true, which requires the domain be an exact match, otherwise the browser refuses it.. ",
    "ligne13": "Hi, \nI would recommend my solution given in https://github.com/axios/axios/issues/1266#issuecomment-355368279 with the interceptor eject method. \nIt works !. @NanoDev777 I'm using axios 0.17.\nPlease format your code properly to make it quickly readable.. Hi @NanoDev777,\n\"my\" solution is totally doable with your code. The idea is to disable the response interceptor (with the eject method) as soon as you get a 401 (access token expired). You momentarily disable the interceptor in order to be able to make a request to your refresh token endpoint. Once you get your new token, you re-enable the interceptor. So the process is like that :\n- put all your code inside a method so you can re-call it later (createAxiosResponseInterceptor() { ... })\n- you create the interceptor and store it into a property (this.axiosResponseInterceptor = ...) : now you have a reference to the interceptor.\n- you disable it when you get a 401 by calling the eject method on the property you created (window.axios.interceptors.response.eject(this.axiosResponseInterceptor)\n- you do your request to get a new token\n- once done, you recreate the interceptor by calling the method which wraps the whole stuff : this.createAxiosResponseInterceptor()\nIt's hard to explain code by writing... Hope it will help.. Check https://github.com/axios/axios/issues/1266#issuecomment-355368279. OK just found the solution ! https://stackoverflow.com/questions/47208440/axios-xmlhttprequest-is-sending-get-instead-of-post-in-production-environment\nthis was caused the trailing slash at the end of the request URI, which was causing a 301 redirect. The POST request was not visible in the XHR tab of Chrome's debug console.. ",
    "benyanke": "Turns out it was an obscure server-side issue with laravel which only appeared with ajax calls, not with regular requests (which is why I didn't catch it in my debugging). Upon googling, I found a source that said to try adding/removing a slash from the end of the url string, which fixed it for me.\nIn case anyone comes across this issue, try adding or removing a trailing slash from your URL. Some framework handle these in unexpected ways.\n  . ",
    "Aftabnack": "I got the same issue with Django backend. Glad I stumbled upon this! Adding a trailing slash fixed the issue. Just curious if someone could give an explanation as to why it happens.\n\\cc @mzabriskie . ",
    "InvertedX": "@jaesung2061 are you using async await .because  if you wrap try catch around async await, and if any kind error happening in that block will be thrown(not only http) to catch block. @jaredmurphy as he says its not an Axios problem . ",
    "bipin244": "@jaesung2061 Can you find any solution for handle http and non-http errors?. ",
    "RubenVerborgh": "It's a Nock problem, reported in node-nock/nock#1046 and fixed in node-nock/nock#1047.. ",
    "ohookins": "Yes, we (@contentful) could potentially support project maintenance financially. But that requires someone having the time, willingness, skills and capability of doing that (i.e. it's not straightforward for people who already have a full time job). If someone steps forward who fits into that category we could certainly discuss it.. Yes, we (@contentful) could potentially support project maintenance financially. But that requires someone having the time, willingness, skills and capability of doing that (i.e. it's not straightforward for people who already have a full time job). If someone steps forward who fits into that category we could certainly discuss it.. ",
    "felixmosh": "There is any ETA to merge? cause that change fails many of our builds.. There is any ETA to merge? cause that change fails many of our builds.. ",
    "rajeev1690": "Yes sit i am doing it on Mounted itself but still it is not working\n. ",
    "heyamykate": "Correct me if I'm wrong, but I don't think that example is actually using async/await... It would need to look more like this:\n```\n   async useAsync() { \n        try {\n            const response = await axios.get('/user?ID=12345');\n            console.log(response);\n        } catch (error) {\n           console.log(error);\n        }\n```\nSee this example from Wes Bos.. In the updateItem method, I would recommend editing it to put the response variable inside the try/catch block - it won't log out to anything in the catch block because it's not being assigned any value except within the try block, that's why it shows undefined in your console.\nTo try and debug the error itself, I would try logging out e.response or e.response.data instead of just e -  that will get the server error instead of just a JS error.. Have you tried the request in a tool like Postman? That will help you better isolate where the error is. You may want to remove the empty search query param as well.. Closing - this isn't an issue with axios itself.. Closing this since this isn't an issue with axios itself.. Closing this since it's not an issue with axios itself.. When you tried to send this.selectedFile and this.name, did you put it in an object? \nTypically I would post data to an API formatted as follows:\n{ file: this.selectedFile, name: this.name }\nThis assumes that your API endpoint is expecting input data with those field names.. I wouldn't go into too much detail here, since this isn't really an axios issue, but rather a querystring vs qs usage issue. I would perhaps only add the following:\nsuggestion\nThe `qs` library is preferable if you need to stringify nested objects, as the `querystring` method has known issues with that use case (https://github.com/nodejs/node-v0.x-archive/issues/1665).. ",
    "dericcain": "@heyamykate @emilyemorehouse Thanks for the heads up. I have no idea why I left off the actual async/await part of the example. I fixed it and also added a disclaimer. If anything else needs to change, let me know!. ",
    "Jvaeyhcd": "@raygesualdo I'm trying to send Text type of \"raw\". ",
    "omegaphoenix": "@JustinBeckwith I went ahead and fixed the conflicts.  Let me know if I should also rebase to combine my changes into one commit.  (I'm not sure what the convention is for how to rebase a MR.). @JustinBeckwith Redid the merge with a rebase.. ",
    "srganeshram": "@Axnyff for testing I have included that, but I changed to \"grant_type\": \"password\" still the same issue.. Yes right, I am accessing cross domain request, from localhost:2001 to localhost:2002. I tried with \nbut still facing the same issue.\njavascript\nfunction HeaderPostAction(){\n  // Send a POST request\n  axios({\n    method: 'post',\n    url: 'http://localhost:2002/token',\n    **withCredentials: true,**\n    data: {\n      \"username\": \"admin\",\n      \"password\": \"admin123\",\n      \"grant_type\": \"admin\"\n    },\n    headers: { \n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      \"Cache-Control\": \"no-cache\",\n      \"Postman-Token\": \"42e6c291-9a09-c29f-f28f-11872e2490a5\"\n    }\n  }).then(function (response) {\n    console.log(\"Heade With Authentication :\" + response);\n  })\n  .catch(function (error) {\n    console.log(\"Post Error : \" +error);\n  });\n}. Ok,\nI have provided the full code from Jquery as well as Axios, also provided both response from chrome.\nJquery call is success and provided token but Axios returns bad request, please let me know what is the issue on configuration settings of Axios.\nJQuery Function:\n```javascript\nvar settings = {\n            \"async\": true,\n            \"crossDomain\": true,\n            \"url\": \"http://localhost:54368/token\",\n            \"method\": \"POST\",\n            \"headers\": {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                \"Cache-Control\": \"no-cache\"\n            },\n            \"data\": {\n                \"username\": \"ganesh\",\n                \"password\": \"123456\",\n                \"grant_type\": \"password\"\n            }\n        };\n    $.ajax(settings).done(function (response) {\n        console.log(response);\n    });\n\n```\nJquery Response\n\nAxios Function:\njavascript\nfunction HeaderPostAction(){\n  // Send a POST request\n  axios({\n    method: 'post', \n    url: 'http://localhost:54368/token',\n    withCredentials: true,\n    data: {\n      \"username\": \"admin\",\n      \"password\": \"123456\",\n      \"grant_type\": \"password\"\n    },\n    headers: { \n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      \"Cache-Control\": \"no-cache\"\n    }\n  }).then(function (response) {\n    console.log(\"Heade With Authentication :\" + response);\n  })\n  .catch(function (error) {\n    console.log(\"Post Error : \" +error);\n  }); \n}\nAxios Response:\n\nPlease let me know . Hi Guys,\nFound what is the issue, axois by default it does not converts data to query string, but Jquery by default it converts to query string. Hence I just changed my previous  function with $.parse(data), and it worked.\nWorking code\njavascript\nfunction HeaderPostAction(){\n  // Send a POST request\n    var reqData = {\n        \"username\": \"admin\",\n        \"password\": \"admin123\",\n        \"grant_type\": \"password\"\n    };\n    //var reqData = \"username=ganesh&password=123456&grant_type=password\";\n    axios({\n        method: 'post',\n        url: 'http://localhost:49359/token',\n        withCredentials: true,\n        crossdomain: true,\n        data: $.param (reqData),    \n    headers: { \n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      \"Cache-Control\": \"no-cache\",\n      \"Postman-Token\": \"42e6c291-9a09-c29f-f28f-11872e2490a5\"\n    }\n  }).then(function (response) {\n    console.log(\"Heade With Authentication :\" + response);\n  })\n  .catch(function (error) {\n    console.log(\"Post Error : \" +error);\n  }); \n}\n. ",
    "paddykontschak": "@mahesh-vidhate $.param() is a jQuery function.\nYou can use this instead:\njavascript\nObject.keys(reqData).map(function(key) {\n    return encodeURIComponent(key) + '=' + encodeURIComponent(reqData[key])\n}).join('&')\nThat being said, I'm still in the middle of figuring out how to fix the whole issue in my project. I'll update if I find an answer. (if I don't, assume it was something trivial like a wrong variable or something...). ",
    "pravin-d": "Wrt https://github.com/axios/axios/issues/1281#issuecomment-357255541\nI was having the same issue. I had done all the withCredentials and cors on server changes suggested by all other post. However the one thing missing in the mix was {crossdomain : true }.\nTo help anyone coming here with axios issue let me summerize\n1) Axios - axios({withCredentials : true, crossdomain : true,  .. other options .. })\n2) Server (in case running on express) -- app.use(cors({credentials : true, origin : ['your domain where axios is running']}))\n. ",
    "Prateekjaiiho": "i faced the same issue because i didnot pass all the required field data..checking the network in chrome fixed the issue for me. ",
    "TicoGitHubII": "Also read you use  JWT JSON Web Token lib or something . ",
    "DeroSavage": "For me this is not working. It gives me \"adapter is not a function\". @mividtim I'm using node 9.3.0 and executing my script with \"node index.js\". ",
    "chenchengwork": "same problem. ",
    "dnfield": "When will this be part of a released version available through NPM?\nCould we at least get a tag for this?  . ",
    "yoshigev": "Just came across this question, and possibly found the answer. One of config options of axios is httpsAgent (see https://github.com/axios/axios#request-config).\nYou can use it like:\n```javascript\nvar https = require('https');\nvar httpsAgent = new https.Agent({ keepAlive: true });\nvar r = await axios({\n            method: 'post',\n            httpsAgent: httpsAgent\n            ...\n           });. ",
    "yazpid": "Ok, when I am was comparing headers, first thing which I show was strange, POST request have a the same headers like in other browser, but GET request don't have anything in request header, but ONLY when I made the same request on the same page for example second time -> \n1. Go to the page GET is ok, have properly settings in header\n2. POST data to server, have properly settings in header\n3. Trying GET using the same url like in first step (empty req header)\nAdd code below, add application on ie 11 star working propelrly.\n     _beforeRequest(config) {\n        config.headers.common['Cache-Control'] = 'no-cache';\n        config.cache = false;\n        config.headers.get = {};\n        config.headers.get['If-Modified-Since'] = '0';\n        ....... }\n. Ok, when I am was comparing headers, first thing which I show was strange, POST request have a the same headers like in other browser, but GET request don't have anything in request header, but ONLY when I made the same request on the same page for example second time -> \n1. Go to the page GET is ok, have properly settings in header\n2. POST data to server, have properly settings in header\n3. Trying GET using the same url like in first step (empty req header)\nAdd code below, add application on ie 11 star working propelrly.\n     _beforeRequest(config) {\n        config.headers.common['Cache-Control'] = 'no-cache';\n        config.cache = false;\n        config.headers.get = {};\n        config.headers.get['If-Modified-Since'] = '0';\n        ....... }\n. ",
    "mohammadalipak": "I need to be able to cancel a request for multiple reasons:\n When the route is changed\n When a duplicate request is made again\nI want to cancel all the requests for the page when the route is changed, but only want to cancel a single request when the same request is made again. How can I achieve that with axios?\nIf we could have multiple cancelTokens per request, it would be possible. Is there another way?. You are generating a new CancelToken() for each request & overwriting the global cancel in AxiosCancellation.js, so when you call cancel() it can only cancel the last request as the older one got overwritten.\nTo cancel all, you need to create an instance of cancel token & use the same instance in both requests:\n```js\n// File AxiosCancellation.js:\nexport var source = CancelToken.source();\n// File 2:\nreturn axios.get('/get1', {\n  cancelToken: source\n})\n// File 3:\nreturn axios.get('/get2', {\n  cancelToken: source\n})\n// wherever you wanna cancel all\nsource.cancel();\n```\nSee docs for details: https://github.com/axios/axios#cancellation. ",
    "AndyNeale": "To try and simulate this problem, I wrote a basic Node API:\n```\nvar express = require('express');\nvar app = express();\napp.get('/', function (req, res) {\n  setTimeout(() => {\n    res.send('Finished');\n  }, 10000);\n});\napp.listen(8282, function () {\n  console.log('Node API listening on port 8282...')\n});\n```\nand a simple Node client:\n```\nvar express = require('express');\nvar app = express();\nvar axios = require('axios');\napp.get('/', function (req, res) {\n  const config = {\n    url: 'http://localhost:8282',\n    method: 'GET',\n    timeout: 30000,\n  };\n  axios(config)\n  .then((response) => {\n    res.status(200).send(response.data);\n  })\n  .catch((error) => {\n    res.status(500).send({\n      code: error.code,\n      config: error.config,\n      response: error.response,\n    });\n  });\n});\napp.listen(8181, function () {\n  console.log('Node client listening on port 8181...')\n});\n```\nLaunch both applications from the command line, browse to http://localhost:8181, then terminate the API application to simulate the connection being dropped, and the client receives the following error details:\n{\n  \"code\": \"ECONNRESET\",\n  \"config\": {\n    \"transformRequest\": {},\n    \"transformResponse\": {},\n    \"timeout\": 30000,\n    \"xsrfCookieName\": \"XSRF-TOKEN\",\n    \"xsrfHeaderName\": \"X-XSRF-TOKEN\",\n    \"maxContentLength\": -1,\n    \"headers\": {\n      \"Accept\": \"application/json, text/plain, */*\",\n      \"User-Agent\": \"axios/0.18.0\"\n    },\n    \"method\": \"get\",\n    \"url\":\"http://localhost:8282\"\n  }\n}\nSo perhaps the answer is to look at the error code - ECONNRESET in this case. (Note that if a request times out, you get an ECONNABORTED error code back.). Oops, meant to do this on the ebx-axios fork first, sorry!. ",
    "lmanzurv": "Is this issue fixed? I keep having an unusable app after this error happens. It's a react app that's hooked to a rails app with react-on-rails. After this happens, the only way of getting the app working again is to refresh.. ",
    "darren128": "If there is consensus, I'll submit a PR.. ",
    "deltaepsilon": "This is unlikely to be an Axios problem, and we haven't had a good reproduction.\nGo ahead and re-open if you can reproduce it well.. You can set default headers for Axios on your browser:\nhttps://github.com/axios/axios#custom-instance-defaults\nThis will accomplish your goal without modifying Axios.. ",
    "alonisser": "What would you consider backwards compatible? Can you refine that please before I try to write a PR\nWhat about a specific \"TimeoutError\" type we can check?\n. ",
    "GuiRitter": "For me, error is undefined, so I can't even know if it's a timeout.. ",
    "picbenoit": "no one reproduces this error with a request that returns 302 status code ?\nfor the moment I use a new route that doing the same job as the redirect one.. @Khaledgarbaya maybe but for me, the problem is on FF. ",
    "michaeldzjap": "1153 Seems to be related, if not exactly the same issue,.",
    "franklixuefei": "Please fix this.. ",
    "slpixe": "@Croge32 depending on the validation checks on your server for the content type, it may be that an underlying library that react native uses called okhttp appends ; charset=utf-8 to your header on android\nhttps://github.com/facebook/react-native/issues/8237\nThe solutions look to either be to change your api implementation a bit to allow for this.\nOr to swap out the network provider in RN so you can either manually specify the header, or change it to byte so it doesn't get a charset appended. ",
    "paulschneider": "Just to add an additional comment to this report; after testing across all browser variations available in BrowserStack the issue is only present in a very small subset (one that we can live with) of Internet Explorer:\nWin10 IE11 (in IE9 mode)\nWin7 IE9\nThis isn't really an issue for us but thought it worth noting for anyone else that might come across this problem in the future.. ",
    "vvusts": "@emilyemorehouse yes I still have this issue. On android progress never fire. I am waiting RN 0.53 because of this https://github.com/facebook/react-native/pull/17312#pullrequestreview-92002633\nMaybe this will solve my issue.\nI need this the most for 'timeout' as fetch doesn't support it. But this doesn't support progress. Can't have both.. ",
    "Boaz-Compie": "@emilyemorehouse I've also encountered this issue. I'm creating an axios get request on android (react-native) with onDownloadProgress and the progress never fires.\nany idea how they can be triggered?. ",
    "rajalive28": "The above code is incomplete and is just an illustration. ",
    "jezikk": "Thanks for respond.\n// `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\nAccording to the documetation above, the validateStatus function has to prevent rejection If validateStatus returns true (or is set to null or undefined). In my example I set the condition to < 500 and despite that the exception is still called. Is that correct?. Thanks for respond.\n// `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\nAccording to the documetation above, the validateStatus function has to prevent rejection If validateStatus returns true (or is set to null or undefined). In my example I set the condition to < 500 and despite that the exception is still called. Is that correct?. Yes, api works as expected.\n\nI am not too familiar with async/await (just promises), I am afraid. But what are you expecting to happen after validateStatus prevents rejection?\n\n-- Exactly, this is what I need and it should be consistent with the documentation too.. Yes, api works as expected.\n\nI am not too familiar with async/await (just promises), I am afraid. But what are you expecting to happen after validateStatus prevents rejection?\n\n-- Exactly, this is what I need and it should be consistent with the documentation too.. Based on my testing, the 'validateStatus' function is called after rejection of promise.. Based on my testing, the 'validateStatus' function is called after rejection of promise.. @Axnyff Yes, it works. You need to use auth option as you mentioned.. @Axnyff Yes, it works. You need to use auth option as you mentioned.. ",
    "a294465800": "I set a mistake parameter, the correct code is following\njs\n    this._http = axios.create({\n      baseURL: 'https://api.douban.com/'\n    })\ncase question!. ",
    "pedpess": "@corujoraphael Out of curiosity, was this request working earlier?. @corujoraphael Out of curiosity, was this request working earlier?. ",
    "Ernie6711": "@emilyemorehouse , I met the same problem using React Native FormData\n```\nlet s = JSON.stringify({ uri: localUri, name: filename, type: type });\nlet formData = new FormData();\nformData.append('ph0t0', s);\naxios.post(\"http://10.0.1.2:8888/uploadphoto\", {\n        method: \"POST\",\n        headers: {\n                'Content-Type': 'multipart/form-data; charset=utf-8; boundary=\"another cool boundary\";'\n        },\n        body: formData,\n}).then((resp) => {\n        console.log(resp);\n}).catch(err => {\n        console.log(err);\n});\n```\nExpect some key:value pairs exist in MultipartForm, Form, or PostForm\n2018/02/20 18:25:31.740 [W] [photo.go:411] req.MultipartForm:  nil\n2018/02/20 18:25:31.740 [W] [photo.go:412] req.Form:  map[] \n2018/02/20 18:25:31.740 [W] [photo.go:413] req. PostForm:  map[] \n2018/02/20 18:25:31.740 [W] [photo.go:410] req:  &{POST /uploadphoto/dialog/57120e8951c643ab42a8c19f/000000000000000000000001 HTTP/1.1 1 1 map[Content-Type:[application/json;charset=utf-8] User-Agent:[okhttp/3.6.0] Accept:[application/json, text/plain, /] Content-Length:[419] Connection:[Keep-Alive] Accept-Encoding:[gzip] Cookie:[lang=zh-TW; PVsessionID=db9a21d63b2d0ea47b68fa8755bd87e2]] 0xc420e3cb80  419 [] false 10.0.1.2:8888 map[] map[]  map[] 10.0.1.3:46904 /uploadphoto/dialog/57120e8951c643ab42a8c19f/000000000000000000000001    0xc420e3cb40} \n2018/02/20 18:25:31.740 [E] [photo.go:425] [UploadPhotos] err: request Content-Type isn't multipart/form-data \nVersion info\naxios: 0.16.2\nexpo: 25.0.0\nreact: 16.2.0\nreact-native: 0.52.0\n. Second @giladno. Since I'm going forward on other parts, I use a workaround instead: write a specific function with fetch() when uploading images.\nTried before and neither stringifying the data or arguments affect the result. The server received the call but no data sent.. ",
    "giladno": "This bug still happens with latest axios, why was this closed?. @emilyemorehouse please check wireshark traces. The data is uploaded but it does NOT use proper form-data encoding. The above example can reproduce the problem. Again - the request is being sent successfully but is it badly encoded.\n```\nPOST /myserver HTTP/1.1\nContent-Type: multipart/form-data\n_parts=USERX%2Cusername&_parts=FILE1%2C%5Bobject%20Object%5D\n```. @emilyemorehouse  File uploads work perfectly in a browser environment, they only fail on react native. As you mentioned yourself - your tests were outside of react native environment, I would start there :)\nTry a simple file upload in react native and simply check the wireshark traces, you don't even need a working server.... @duongtranpyco I've removed axios from my project, I wrote my own simple class instead, enjoy!\nP.S. If you mainly sending JSON, modify the code. In my case, the server usually expects a form.\n``\nconst request = async ({url, method = 'GET', params, body, responseType = 'json', headers = {}})=>{\n    const escape = (data, encode = encodeURIComponent)=>Object.keys(data||{}).reduce((pairs, key)=>{\n        for (let value of [].concat(data[key]))\n            pairs.push([${key},${value}`]);\n        return pairs;\n    }, []).map(pair=>pair.map(encode).join('=')).join('&');\nif (Object.keys(params||{}).length)\n    url += '?'+escape(params);\nif (method=='POST' && typeof body=='object')\n{\n    if (body instanceof FormData)\n        headers['Content-Type'] = 'multipart/form-data';\n    else\n    {\n        body = escape(body);\n        headers['Content-Type'] = 'application/x-www-form-urlencoded';\n    }\n}\nlet {statusCode, request: req} = await new Promise((resolve, reject)=>{\n    let xhr = new XMLHttpRequest();\n    xhr.open(method, url, true);\n    xhr.withCredentials = true;\n    xhr.responseType = {json: 'text'}[responseType]||responseType;\n    xhr.onload = ()=>resolve({statusCode: xhr.status, request: xhr});\n    xhr.onerror = ()=>reject(new TypeError('Network request failed'));\n    xhr.ontimeout = ()=>reject(new TypeError('Network request timed out'));\n    for (let key in headers)\n        xhr.setRequestHeader(key, headers[key]);\n    xhr.send(body||null);\n});\nif (statusCode<200 || statusCode>=400)\n    throw new Error(`network request failed with ${statusCode}: ${url}`);\nswitch(responseType)\n{\n    case 'json':\n        return JSON.parse(req.responseText);\n    case 'text':\n        return req.responseText;\n    case 'request':\n        return req;\n}\nreturn req.response;\n\n};\nrequest.get = (url, opt = {})=>request({...opt, url, body: null});\nrequest.post = (url, ...args)=>request({...args[1]||{}, url, method: 'POST', body: args[0]});\n```. ",
    "duongtranpyco": "I got the same, Axios does not on react native. ",
    "jlariza": "Hi, I am facing the same problem. Has anybody found a solution?. ",
    "caciobanita": "I did have the some problem in react-native. \nThe problem are not the Headers.\nIn web we can have for example:\nlet formData = new FormData()\nformData.append('key', true // bool value)\nbut in react native the value for key must be string.\nformData.append('key', 'true'). ",
    "brayanL": "I have the same issue on react native when I post to a url, as @giladno mentions, you should test in react native and you could verify the error that people report @emilyemorehouse. I report an error 14 days ago https://github.com/axios/axios/issues/1618, but nobody has responded, please describe in the readme of your library that you do not have support for axios on react native, so that many developers do not waste time..!. ",
    "shushuy": "@corujoraphael how did you solved this?. I added a type inside the image object like \"Image.type='image/png\" just before append and also changed the content type to \"Content-Type\":\"multipart/form-data\":\nimage.type='image/png'\n        formData.append(\"resource\", image);\n        return axios\n          .post('yourBAckendUrl', formData, {\n            headers: {\n              Authorization: \"yourTokenHere\",\n              \"Content-Type\": \"multipart/form-data\"\n            }\n          })\nHope this help someone.. I added a type inside the image object like \"Image.type='image/png\" just before append and also changed the content type to \"Content-Type\":\"multipart/form-data\":\nimage.type='image/png'\n        formData.append(\"resource\", image);\n        return axios\n          .post('yourBAckendUrl', formData, {\n            headers: {\n              Authorization: \"yourTokenHere\",\n              \"Content-Type\": \"multipart/form-data\"\n            }\n          })\nHope this help someone.. any update on this? or at least a workaround?. ",
    "kodayashi": "I was unable to get this to work as well, I'm trying to PUT multipart/form-data to S3 (video). Using the type option didn't help. The multipart/form-data header doesn't seem to be in the PUT request:\njavascript\n      const data = new FormData();\n      data.append('video', {\n          uri: 'file:///<path_to_video_on_iphone.mov',\n          type: 'video/quicktime',\n          name: 'video.mov',\n      });\n      response = yield call(() => {\n        return api.put(url, data, {\n          headers: {\n              'Content-Type': 'multipart/form-data',\n          },\n          transformRequest: [\n            (data, headers) => {\n                delete headers.common.Authorization;\n                return data;\n            }\n          ]\n        });\n      });. ",
    "vampyar": "For this case use fetch :D\n```\nvar data = new FormData();\ndata.append('my_photo', {\n  uri: filePath, // your file path string\n  name: 'my_photo.jpg',\n  type: 'image/jpg'\n}\nfetch(path, {\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'multipart/form-data'\n  },\n  method: 'POST',\n  body: data\n});\n```. ",
    "minhphung210": "i have same issues and my \u001dbody when i check in debug is string \n\nand here my code\n```\n        const formData = new FormData();\n        formData.append('photo', {\n          uri: response.uri.replace('file://', ''),\n          mineType: 'image/jpeg',\n          fileType: 'image/jpg',\n          type: 'image/jpg',\n          name: 'test.jpg'\n        });\n    console.log('form data', formData);\n\n     Axios({\n       method: 'post',\n       url: 'https://dev-host.luxstay.net/api/rooms/10740/photos',\n       data: formData,\n       headers: {\n         Authorization: token,\n         'Content-Type': 'multipart/form-data'\n       }\n     });\n\n```\nUpdate : An error occurred because the app was in debug mode. When i turn off debug mode , it worked . @tkserver  it's look like when you have  a object and then you toString() it.\nconst a = {\n  name: 'dasdasd'\n}\nconsole.log(a.toString());. ",
    "vineethgeorge03": "axios has a code in its xhr adapter \nif (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\ni guess in react-native it deletes the content-type header  if you are sending multipart form data even if you set it in the code .\nBut I am not sure if commenting the line out would resolve your issue in react-native.\n\nin axios version 0.18.0 having same issue.\naxios removes internally the header Content-Type if there is no body on the post, put etc for some reason when creating FormData the body remains empty..\nthis is my code:\n``\nconst sendFormData = images => {\n   // images is an array of base64 images (strings)\n    const formData = new FormData();\n    images.forEach((img, i) => {\n        formData.append('file', img);\n        formData.append('name',${type}-${i + 1}`);\n    });\nconfig.headers = {\n    .'Content-Type': 'multipart/form-data'\n };\n\n return axios.post(`http://someurl.com/api/upload-images`, formData, config)\n        .then(response => {\n           // handle success\n        })\n        .catch(err => {\n            // handle err\n });\n\n}\n``\nReact Native version0.55.3this example code is not working. request body is empty and theContent-Type` header is removed\n\n. ",
    "tkserver": "\nSo what should it look like? I have object object as well.\n. \nSo what should it look like? I have object object as well.\n. > @tkserver it's look like when you have a object and then you toString() it.\n\nconst a = {\n  name: 'dasdasd'\n}\nconsole.log(a.toString());\n\nPerhaps I wasn't clear.  Should the Request Payload show [object Object] when viewing the headers?. > @tkserver it's look like when you have a object and then you toString() it.\n\nconst a = {\n  name: 'dasdasd'\n}\nconsole.log(a.toString());\n\nPerhaps I wasn't clear.  Should the Request Payload show [object Object] when viewing the headers?. Thanks Aman725, minhphung210 and all. When I use the code on a real device the upload works properly.  It would seem this is related to the iOS simulator.. Thanks Aman725, minhphung210 and all. When I use the code on a real device the upload works properly.  It would seem this is related to the iOS simulator.. ",
    "Aman725": "@tkserver if your debugger has network inspect enabled, it will override the react-native's FormData and will result in passing empty FormData object which will look like [Object object] in network inspect.\nTry making request with turning off network inspect, hope this helps.. ",
    "davejamesmiller": "For easy reference:\njs\naxios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';. ",
    "ahsanparacha02": "i have test on v 0.17.1 and 0.16.2 but not worked.  if i already use querystring which is working, then why i install new package for querystring ?   . ",
    "kailashjakhar": "Thanks @naxir for your kind of response. But still i am getting Empty Array  . Yes. yes, When i post some string with this file then i array with POSTED string but there is no info about posted file\n. i am sharing my code schema \n  this.hndlChange(event)}/>\n this.uploadRecord()}>UPLOAD FILE\nwhen click on  upload btn\nuploadRecord()\n    {\n        if(this.state.fileSelected)\n        {\n            let that  = this;\n            var formdata = new FormData();\n            var filedata = document.getElementById('file-upload').files[0];\n            formdata.append('filenm',filedata);\n            const result = uploadFile(filedata);\n        result.then(function(response){\n            console.log(response.data);\n            if(response.data.success)\n            {\n\n            }\n            else\n            {       \n                alert('error\n\n');                  \n                    // that.NetworkError();                \n                }\n        })\n        .catch(function(error){\n            alert('exception');\n\n            // that.NetworkError();\n        });\n\n    }\n\nmy uploadFile is \nexport function uploadFile(data)\n{     \n    const url = \"someurl\";\n   return axios.post(url,data,{\n    headers: { \"Content-Type\": \"application/octet-stream\" }\n  }); \n}\n. @phanthehien \nThanks.\nActually axios was able to post image to my server but there I was making some mistake to read that Image. . ",
    "phanthehien": "hi @kailashjakhar, \nI got the same issue like you. \nBut noticed that if I use .request instead of .post, it works for me.\nconst fr = new FileReader();\nfr.readAsArrayBuffer(fileData);\nfr.onload = () => {\n    const arrayBuffer = fr.result;\n    const bytes = new Uint8Array(arrayBuffer);\n\n    return axios.request({\n      url: getUrl(uri),\n      method: 'POST',\n      headers: { 'Content-Type': 'application/octet-stream' },\n      data: bytes\n    })\n  }\n\n. ",
    "inoch": "Resolved.\nvar instanceA = axios.create({headers: {common:{ xxx:xxx }}})\nvar instanceB = axios.create({headers: {common:{ xxx:xxx }}})\nShould not specify config defaults, they are global config.. ",
    "raphaelsoul": "same problem\n```\nconst axios = require('axios')\nconst request = axios.create({\n    // http://xxx.xxx.xxx/api\n    baseURL: 'https://api.github.com',\n    timeout: 15 * 1000,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n})\nrequest.interceptors.request.use(config => {\n    //console.log(config)\n    return config\n})\nrequest.interceptors.request.use(response => {\n    //console.log(response)\n// updated 20180406\nreturn response\n\n}, err => {\n    return Promise.reject(err)\n})\nrequest({\n    url: '/user',\n    method: 'get'\n}).then(res => {\n    console.log(res.data)\n}).catch(err => {\n    console.error(err)\n})\n```\nUPDATE\n\nmy bad. I forgot to return response in response interceptor function. Pls notice that. same problem\n```\nconst axios = require('axios')\n\nconst request = axios.create({\n    // http://xxx.xxx.xxx/api\n    baseURL: 'https://api.github.com',\n    timeout: 15 * 1000,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n})\nrequest.interceptors.request.use(config => {\n    //console.log(config)\n    return config\n})\nrequest.interceptors.request.use(response => {\n    //console.log(response)\n// updated 20180406\nreturn response\n\n}, err => {\n    return Promise.reject(err)\n})\nrequest({\n    url: '/user',\n    method: 'get'\n}).then(res => {\n    console.log(res.data)\n}).catch(err => {\n    console.error(err)\n})\n```\nUPDATE\n\nmy bad. I forgot to return response in response interceptor function. Pls notice that. \n",
    "jesusvpct": "I have a problem with new instance too. I'm doing:\n```javascript\n    var CancelToken = axios.CancelToken;\n    var source = CancelToken.source();\nvar instance = axios.create({\n    cancelToken: source.token\n});\ninstance .post('/users')\n    .then(function(response){\n        console.log(response);\n    }).catch(function(error){\n        console.log(error);\n});\n\n```\nAnd I have this error:\njavascript\nTypeError: Cannot read property 'cancelToken' of undefined\n    at r (spread.js:25)\n    at e.exports (spread.js:25)\n    at <anonymous>\nAny help?\n. ",
    "dlahuta": "Hey\nThis may be related.\nWhen I use middleware config, it starts throwing this error:\nCannot read property 'cancelToken' of undefined\nWhen I remove middleware config, everything is working.\nMiddleware config is  also pretty simple:\njavascript\nconst axiosMiddlewareConfig = {\n    interceptors: {\n        request: [\n            function ({ getState, dispatch, getSourceAction }, req) {\n                var bearerToken = getState().account.bearerToken;\n                if (bearerToken != null) {\n                    req.headers['Authorization'] = 'Bearer ' + bearerToken\n                }\n            }\n        ]\n    }\n};. Hey\nThis may be related.\nWhen I use middleware config, it starts throwing this error:\nCannot read property 'cancelToken' of undefined\nWhen I remove middleware config, everything is working.\nMiddleware config is  also pretty simple:\njavascript\nconst axiosMiddlewareConfig = {\n    interceptors: {\n        request: [\n            function ({ getState, dispatch, getSourceAction }, req) {\n                var bearerToken = getState().account.bearerToken;\n                if (bearerToken != null) {\n                    req.headers['Authorization'] = 'Bearer ' + bearerToken\n                }\n            }\n        ]\n    }\n};. ",
    "adrianbienias": "If you need to have cancelToken in instance (and probably also isCancel) just add them:\njavascript\nconst instance = axios.create();\ninstance.CancelToken = axios.CancelToken;\ninstance.isCancel = axios.isCancel;. ",
    "dingziqi": "@dlahuta you did not return config in your  request interceptors, this is the reason of Cannot read property 'cancelToken' of undefined. ",
    "cptrodgers": "\"I get incorrect port and dublicate host.\". I think duplicate host because you using api/categories.\nTry \"/api/categories\"\nP/S: I recommend you using a proxy server like nginx, HaProxy for mapping request. Dymanic host will make some error you can't fix because have problem with browser policy (chrome, firefox,...). \"I get incorrect port and dublicate host.\". I think duplicate host because you using api/categories.\nTry \"/api/categories\"\nP/S: I recommend you using a proxy server like nginx, HaProxy for mapping request. Dymanic host will make some error you can't fix because have problem with browser policy (chrome, firefox,...). ",
    "dahudson88": "If you take a look at the image, the data field is empty.\nIs this an issue with the server not actually returning data or is there a way that I can actually get the file from the header's content.. ",
    "sergiusz-roszczyk": "It looks like your question has been answered here: #932 \nClient side redirect is being done before axios ever get any response from XHR. . ",
    "ghenry": "Yeah agreed. The solution in #932 was what I was actually thinking of using to handle the difference between a browser request and xhr request to the same page so you can serve up different things. For example, your index.html for your vue.js SPA with browser request or JSON is xhr.\nClosing.. Yeah agreed. The solution in #932 was what I was actually thinking of using to handle the difference between a browser request and xhr request to the same page so you can serve up different things. For example, your index.html for your vue.js SPA with browser request or JSON is xhr.\nClosing.. Do I have to set anything to send X-XSRF-TOKEN header if I set a XSRF-TOKEN cookie server side?\nhttps://github.com/axios/axios/blob/master/lib/defaults.js#L74 https://github.com/axios/axios/blob/master/dist/axios.js#L1072\nIt reads like I don't, but I'm not seeing one go out.\nI'll add that I have set withCredentials to true, so I do meet the first check in the OR:\n```\nvar xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?\n            cookies.read(config.xsrfCookieName) :\n            undefined;\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n\n}\n```\nso if config.xsrfCookieName is a default.....\nUpdate:\nSo, my OPTIONS preflight CORS is working, as is the POST now, but no X-XSRF-TOKEN being sent.\nmethods: {\n    onSubmit(e) {\n      this.axios\n        .post(\n          e.target.action,\n          { data: this.form },\n          {\n            withCredentials: true,\n            xsrfCookieName: \"XSRF-TOKEN\",\n            xsrfHeaderName: \"X-XSRF-TOKEN\"\n          }\n        )\n        .then(res => {\n          console.log(res)\n        })\n        .catch(err => {\n          this.errors.push(err)\n        })\n    }\n  }\nThanks.. Do I have to set anything to send X-XSRF-TOKEN header if I set a XSRF-TOKEN cookie server side?\nhttps://github.com/axios/axios/blob/master/lib/defaults.js#L74 https://github.com/axios/axios/blob/master/dist/axios.js#L1072\nIt reads like I don't, but I'm not seeing one go out.\nI'll add that I have set withCredentials to true, so I do meet the first check in the OR:\n```\nvar xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?\n            cookies.read(config.xsrfCookieName) :\n            undefined;\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n\n}\n```\nso if config.xsrfCookieName is a default.....\nUpdate:\nSo, my OPTIONS preflight CORS is working, as is the POST now, but no X-XSRF-TOKEN being sent.\nmethods: {\n    onSubmit(e) {\n      this.axios\n        .post(\n          e.target.action,\n          { data: this.form },\n          {\n            withCredentials: true,\n            xsrfCookieName: \"XSRF-TOKEN\",\n            xsrfHeaderName: \"X-XSRF-TOKEN\"\n          }\n        )\n        .then(res => {\n          console.log(res)\n        })\n        .catch(err => {\n          this.errors.push(err)\n        })\n    }\n  }\nThanks.. Should I have to set these config items if they are already default?. Should I have to set these config items if they are already default?. Any one have any ideas? . Any one have any ideas? . No one?. No one?. Not yet. Will be back on this soon when we make https://www.surevoip.co.uk/mobile live. . Not yet. Will be back on this soon when we make https://www.surevoip.co.uk/mobile live. . Not yet. Will be back on this soon when we make https://www.surevoip.co.uk/mobile live. . So this only works with https?. ",
    "AllainPL": "Any update on the situation? I might be able to help make a PR or sth - but some feedback would be welcome :). ",
    "xxRockOnxx": "+1\nworkaround I do is:\nlet formData = new FormData()\nObject.keys(data).forEach(attr => {\n  formData.append(attr, data[attr])\n}). ",
    "AutomaticWaffle": "+1 \n@xxRockOnxx thanks for the workaround, exactly what I needed!\ntransformRequest: function (data) {\n      let formData = new FormData();\n      Object.keys(data).forEach(attr => {\n        formData.append(attr, data[attr]);\n      });\n      return formData;\n}. +1 \n@xxRockOnxx thanks for the workaround, exactly what I needed!\ntransformRequest: function (data) {\n      let formData = new FormData();\n      Object.keys(data).forEach(attr => {\n        formData.append(attr, data[attr]);\n      });\n      return formData;\n}. ",
    "davidalejandroaguilar": "I didn't know I had to create the header object structure within the instance for global header overriding to work:\nThis does not work (but it does not raise any error); global header is used when using the instance:\n```js\n// Index.js\naxios.defaults.headers.common['Authorization'] = 'AUTH_TOKEN';\n// myAxios.js\nconst instance = axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com'\n});\ninstance.defaults.headers.common['Authorization'] = 'AUTH_TOKEN_FROM_INSTANCE';\n```\nThis does work, instance header overrides the global default:\n```js\n// Index.js\naxios.defaults.headers.common['Authorization'] = 'AUTH_TOKEN';\n// myAxios.js\nconst instance = axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com',\n  headers: {\n    common: {\n      Authorization: 'AUTH_TOKEN_FROM_INSTANCE'\n    }\n  }\n});\n```\nIt seems to me that this object structure should be created by default when using #create.\nRelated issues 1, 2. ",
    "VCodepp": "@c0debreaker  Could you tell me how you solved the problem? I am having this problem.\nthe only difference from your code is that I use 'await'.. I solved this problem like this\n```\nimport token from './axios.token'; // this json file.\ntoken.cancel = axios.CancelToken;\nconst albums_list = async ({\n  commit,\n  state\n}, params) => {\n  try {\n    if (token.videos!== undefined) {\n      token.videos();\n    }\n    const REQUEST = await axios.post(url, {\n      data: data\n    }, {\n      cancelToken: new token.cancel(function executor(c) {\n        token.videos = c;\n      })\n    });\n    token.videos = undefined;\n  } catch (e) {}\n};\n```\nI do not know which one is better. your code or this code\n. ",
    "brianmituka": "@Khaledgarbaya hello it's still not working even after correcting the headers in post the response I'm getting from postman is different from the axios response. what could be the issue?\n. ",
    "xiaoyueyue165": "Really thankful, I also found this problem,I got the correct result after serializing the passed parameters.However, the program in the then method is not executed, do I have to use the response as a successful return parameter?\uff08I use data\uff09\nSorry for the inconvenience ...\njquery\n// data\noilPrice=7639&ysfs=%E5%85%AC%E8%B7%AF&tyfs=%E9%85%8D%E9%80%81&xsdw=002&oilinfoId=EAA5A89819F94056AA1A3ED9C7478701\n// response\n{\"biaoshi\":\"\u666e\u901a\",\"price\":7330.00}\naxios\n```\n// data\n{\"oilPrice\":7639,\"ysfs\":\"\u516c\u8def\",\"tyfs\":\"\u914d\u9001\",\"xsdw\":\"002\",\"oilinfoId\":\"EAA5A89819F94056AA1A3ED9C7478701\"}\n```\n//parseQueryString=>\noilPrice=7639&ysfs=%E5%85%AC%E8%B7%AF&tyfs=%E9%85%8D%E9%80%81&xsdw=002&oilinfoId=EAA5A89819F94056AA1A3ED9C7478701\n// response\nbiaoshi: \"\u666e\u901a\"\nprice: 0\n{\"biaoshi\":\"\u666e\u901a\",\"price\":7330.00}\n. ",
    "GermanMontejo": "These were the headers I used when making the request from the react-native app I'm working on:\nheaders: {\n               'content-type': 'application/x-www-form-urlencoded',\n               'X-Requested-With': 'XMLHttpRequest',\n               \"Access-Control-Allow-Origin\": \"*\"\n           }. @mzabriskie @nickuraltsev please help me on this, thanks!. @mzabriskie @nickuraltsev Hi! I've noticed that the redirection works if the status code on my render_template() function in my flask app is 302. If I change it to 307, redirection does not work. I needed 307 to make sure that the method is not updated to GET. 307 maintains the original request method, which in my case is POST. I've added a workaround in my web app but if you could fix this issue, then it would be great.. Hi @emilyemorehouse,\nI know 307 does not change the http method as I stated above:\n\"I needed 307 to make sure that the method is not updated to GET. 307 maintains the original request method, which in my case is POST.\"\nWhat I don't understand is why the redirection works when the status code is 302. 307 is still a redirection, and when I use that status code on my flask web app for the response, my mobile app (with axios) timeout. It can successfully follow if tge status code is 302, though.\n. But not with 307, which is supposed to work as it says axios can follow redirects with 307. *What I don't understand is why the redirection works when the status code is 302 but not with 307, which is supposed to work.. Hi,\nThanks for testing it. Can you try by sending a form (POST) request? My\nflask API accepts the request in a form, not in a raw json body. I've\ntested my flask API with Postman and Curl, and it redirects properly so I'm\nsure I don't need to modify my flask API. Also, please set the header to\nform-url-encoded or multipart/form-data in your axios object.\nWarm regards,\nGerman\nOn 17 Feb 2018 9:34 AM, \"Emily Morehouse\" notifications@github.com wrote:\n\nHm. Without being able to debug your API, I'm not sure I'll be of any\nhelp. I tested redirects with a 307 and it still follows them.\nHere's an example, adapted from one of our tests (it creates a server that\nredirects /one to /to):\nvar axios = require('axios')\nvar http = require('http');\nvar url = require('url');\nhttp.createServer(function (req, res) {\n  var parsed = url.parse(req.url);\nreq.on('data', function (data) {\n    console.log(DATA: ${data});\n  });\nif (parsed.pathname === '/one') {\n    console.log(TYPE: ${req.method}, URL: ${req.url});\n    res.setHeader('Location', '/two');\n    res.statusCode = 307;\n    res.end();\n  } else {\n    console.log(REDIRECTED -- TYPE: ${req.method}, URL: ${req.url});\n    res.end('test response');\n  }\n}).listen(4444, function () {\n  axios.post('http://localhost:4444/one', {'foo': 'bar'});\n});\nHere's a link to the running code https://runkit.com/embed/y7tt53ebuoou\nas well, which outputs:\n\"TYPE: POST, URL: /one\"\n\"DATA: {\\\"foo\\\":\\\"bar\\\"}\"\n\"REDIRECTED -- TYPE: POST, URL: /two\"\n\"DATA: {\\\"foo\\\":\\\"bar\\\"}\"\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/axios/axios/issues/1350#issuecomment-366404472, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AHtgNgN9S-6gIwUkYK9T1qUwNW5z8WGyks5tViy0gaJpZM4R_pl9\n.\n. \n",
    "pju-": "I've run into a similar (the same?) problem in a Craft 3 app, without even touching the xsrfHeaderName.\nFor me the empty url was the problem. I've changed it to '/', now IE plays nice. Might be worth a try for you, too.. ",
    "Jahsis": "I also run in to similar issue and can confirm that issue was with empty url. To point to open url, I am using './'.. ",
    "JohnRSim": "The head response is 200 I'm unsure why its tracking as an error.\n\ntrying just the basic\naxios('https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js', {\n        method: 'HEAD',\n        mode: 'no-cors',\n    }).then((response) => {\n        console.log(response);\n    }).catch((e) => {\n        console.log(e);\n    });\nError: Network Error\n    at createError (createError.js?16d0:16)\n    at XMLHttpRequest.handleError (xhr.js?ec6c:87)\n. @emilyemorehouse ahh \ud83d\udc4d thanks for letting me know.\nI was looking through other issues and saw a number of users using the Request options so I added them to try to get it to work. \nLet me know if you can replicate the issue.\nThanks. ",
    "tomjdickson": "I am getting the exact same issue at the moment, was anyone able to overcome the issue?. I am getting the exact same issue at the moment, was anyone able to overcome the issue?. ",
    "phdog": "Same here. ",
    "frinkfromthedrink": "For anyone facing this issue using express.js, I used\n```js\nvar allowCrossDomain = function(req, res, next) {\n    res.header('Access-Control-Allow-Origin', \"*\");\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n    res.header('Access-Control-Allow-Headers', 'Content-Type');\n    next();\n};\napp.use(allowCrossDomain);\n```\nThis solved the issue, while still restricting to the methods I needed. Let me know if this helps. ",
    "dsanders1234": "Are there any scenarios that would cause the onRejected path in a request interceptor?  Several interceptors?  Is there a test for this somewhere?. ",
    "inostia": "If anyone is interested in an ES6/7 implementation of @Axnyff 's example above, here's mine:\nconst makeRequestCreator = () => {\n  let call;\n  return url => {\n    if (call) {\n      call.cancel(\"Only one request allowed at a time.\");\n    }\n    call = axios.CancelToken.source();\n    return axios.get(url, {\n      cancelToken: call.token\n    });\n  };\n};\nconst get = makeRequestCreator();\nThen you can do:\n``\nconst getSomething = async id => {\n  try {\n    const res = await get(/my/api/path/?q=${id});\n    // do something with res\n  } catch(err) {\n    if (axios.isCancel(err)) {\n      console.error(Cancelling previous request: ${err.message}`);\n  }\n}\n// concurrent requests result in error: \"Cancelling previous request: Only one request allowed at a time.\"\n```. ",
    "NicksonYap": "Solution from @inostia looks good, but the below is more generic, and allows promises\n```\nlet call;\nconst once = (config = {}) => {\n    if (call) {\n      call.cancel(\"Only one request allowed at a time.\");\n    }\n    call = axios.CancelToken.source();\nconfig.cancelToken = call.token\nreturn axios(config);\n\n}\n```\nuse it:\n```\nvar config = {\n        method: \"get\",\n        url: \"/your/url/endpoint\",\n        timeout: 60000\n      }\nonce(config)\n        .then(response => {\n          // success callback\n        })\n        .catch(error => {\n          // error callback\n        })\n        .then(() => {\n          // do no matter error or success\n        });\n```. Solution from @inostia looks good, but the below is more generic, and allows promises\n```\nlet call;\nconst once = (config = {}) => {\n    if (call) {\n      call.cancel(\"Only one request allowed at a time.\");\n    }\n    call = axios.CancelToken.source();\nconfig.cancelToken = call.token\nreturn axios(config);\n\n}\n```\nuse it:\n```\nvar config = {\n        method: \"get\",\n        url: \"/your/url/endpoint\",\n        timeout: 60000\n      }\nonce(config)\n        .then(response => {\n          // success callback\n        })\n        .catch(error => {\n          // error callback\n        })\n        .then(() => {\n          // do no matter error or success\n        });\n```. Solution from @inostia looks good, but the below is more generic, and allows promises\n```\nlet call;\nconst once = (config = {}) => {\n    if (call) {\n      call.cancel(\"Only one request allowed at a time.\");\n    }\n    call = axios.CancelToken.source();\nconfig.cancelToken = call.token\nreturn axios(config);\n\n}\n```\nuse it:\n```\nvar config = {\n        method: \"get\",\n        url: \"/your/url/endpoint\",\n        timeout: 60000\n      }\nonce(config)\n        .then(response => {\n          // success callback\n        })\n        .catch(error => {\n          // error callback\n        })\n        .then(() => {\n          // do no matter error or success\n        });\n```. ",
    "scragg0x": "Keep in mind that follow-redirects's maxBodyLength is in bytes and the Axios example on the README can be confusing because it uses an example of 2000 for maxContentLength.  No mention of units and 2KB is an odd example, I assumed it was 2MB at first.  maxContentLength is assigned directly to maxBodyLength when specified.. Keep in mind that follow-redirects's maxBodyLength is in bytes and the Axios example on the README can be confusing because it uses an example of 2000 for maxContentLength.  No mention of units and 2KB is an odd example, I assumed it was 2MB at first.  maxContentLength is assigned directly to maxBodyLength when specified.. ",
    "gordonk": "For benefit of anyone landing here, @scragg0x is correct, the configuration param is in bytes.\nE.g. for 50MB request/response upper limit, \nmaxContentLength: 52428890. For benefit of anyone landing here, @scragg0x is correct, the configuration param is in bytes.\nE.g. for 50MB request/response upper limit, \nmaxContentLength: 52428890. ",
    "shubhi15": "Facing same issue . Even after adding maxContentLength: 52428890 to axios post request has not fixed it.. ",
    "amjadalibb": "Anyone interested in fixing the issue ? I have below code but still getting same error.\nconst config = {\n      headers: {\n        'Content-Type': mime.getType(fullBinaryPath),\n        'Content-MD5': testData.md5,\n      },\n      maxContentLength: 52428890,\n      ssl: true,\n    };\nconst fileBuffer = fse.readFileSync(fullBinaryPath);\naxios.put(testData.uploadUrl, fileBuffer, config)\n    .then(resp => resolve(resp.status), (err) => {\n      return reject(err);\n    });\n. Worked for me. I just changed the version in package.json\n\"axios\": \"0.18.0\",. ",
    "roccomuso": "axios should default follow-redirect maxBodyLength limit to Infinity. ",
    "vlad-zhukov": "The link should be direct because otherwise it won't work on npm and other websites.. ",
    "MiguelMadero": "\nThe link should be direct because otherwise it won't work on npm and other websites.\n\nGood point! I didn't think about that. . ",
    "ascott18": "As a temporary workaround, you can add the following to augment the type definitions\nts\ndeclare module \"axios\" {\n  export interface AxiosInstance {\n    delete<T = any>(url: string, config?: AxiosRequestConfig): AxiosPromise<T>;\n    head<T = any>(url: string, config?: AxiosRequestConfig): AxiosPromise<T>;\n  }\n}. According to the spec, any 200 response to a DELETE should include a body. If no body is present, the response should be 204.\nYou are right about HEAD, however - that's my mistake in the PR. I would propose that it be changed to AxiosPromise<void> rather than <null>\n. ",
    "rhys-vdw": "Cheers @nickuraltsev. I'm still pretty sure that returning data: any rather than a generic return type would be the \"most correct\" type definition. re: my \"additional thoughts\" section above. However consistency is the most important thing and the T= any type def means that you can still opt into this behaviour.. ",
    "dusan-dragon": "@rdhelms it is included in axios beta 0.19. ",
    "Foberm": "It indeed was an error with the options request.\nApparently axios handles the pre-option request of a post differently than a xmlHttpRequest. ",
    "oscarjlep": "I decided to try using node server to send the error in order to count out the possibility of Tomcat doing something weird, so I created following server script:\nserver = http.createServer(function (req, res) {\n      res.statusCode = 500;\n      res.setHeader('Content-Type', 'application/json;charset=utf-8');\n      res.setHeader('Access-Control-Allow-Origin', '*');\n      res.setHeader('Access-Control-Allow-Credentials', 'false');\n      res.end(JSON.stringify(data));\n    }).listen(4444, function () {\n    });\nThen I call this with:\nreturn axios.get(\"http://localhost:4444/\", {withCredentials: false})\n    .then(function(response) {\n        if(typeof callback != \"undefined\")\n            callback(response.data);\n    }).catch(function (error) {\n        console.log(error);\n});\n... and the outcome is exactly same, un-drillable string! Then I decided to check how it handles with Firefox and it seems that Firefox shows:\n\n.... which is drillable!\nThis felt really strange, so I double checked the existance of error.response and yes, it really DID exist all the time. I must have had done something wrong initially when trying out checking the existance of response. This is very misleading as Chrome for some reason doesn't seem to output as drillable (how is it even able to output object as plain string?).  \nI'd suggest considering separating the response object from mixed result object, so that callback function would have optional response object. Developer could write either function(result) or function(result, response).\nThank you for all the help!. I decided to try using node server to send the error in order to count out the possibility of Tomcat doing something weird, so I created following server script:\nserver = http.createServer(function (req, res) {\n      res.statusCode = 500;\n      res.setHeader('Content-Type', 'application/json;charset=utf-8');\n      res.setHeader('Access-Control-Allow-Origin', '*');\n      res.setHeader('Access-Control-Allow-Credentials', 'false');\n      res.end(JSON.stringify(data));\n    }).listen(4444, function () {\n    });\nThen I call this with:\nreturn axios.get(\"http://localhost:4444/\", {withCredentials: false})\n    .then(function(response) {\n        if(typeof callback != \"undefined\")\n            callback(response.data);\n    }).catch(function (error) {\n        console.log(error);\n});\n... and the outcome is exactly same, un-drillable string! Then I decided to check how it handles with Firefox and it seems that Firefox shows:\n\n.... which is drillable!\nThis felt really strange, so I double checked the existance of error.response and yes, it really DID exist all the time. I must have had done something wrong initially when trying out checking the existance of response. This is very misleading as Chrome for some reason doesn't seem to output as drillable (how is it even able to output object as plain string?).  \nI'd suggest considering separating the response object from mixed result object, so that callback function would have optional response object. Developer could write either function(result) or function(result, response).\nThank you for all the help!. ",
    "adrienthiery": "Hi @Fernando-Parise ,\nDid you ever manage to have that working? \nI'm trying use axios with a proxy right now and it just does not do anything different than fetching without the proxy.... ",
    "deanilvincent": "Oh All I need is to change the [FromBody] to [FromQuery]. Here's the ref. https://docs.microsoft.com/en-us/aspnet/web-api/overview/formats-and-model-binding/parameter-binding-in-aspnet-web-api. ",
    "matsilva": "This doesn't seem like an issue with the axios project. Maybe I am wrong here but stack overflow would be a better place to ask this question?\nNevertheless, I suspect Blog.userId is throwing an error because you are assigning this.Blog = response.data and then trying to reference Blog.userId which is undefined 'as is' because Blog is being assigned to this. So you you could try this.Blog.userId instead.\naxios.get(`https://jsonplaceholder.typicode.com/users/` + this.Blog.userId )\n... also this could be written as axios.get(`https://jsonplaceholder.typicode.com/users/${this.Blog.userId}`)\n. ",
    "Mathiasduc": "Sorry i'm stupid XD. ",
    "half2me": "I see, thanks for the clarification! @Axnyff . ",
    "pendenaor": "And reusing nulled index instead of returning directly the last one in use?. Ok, order is important... maybe, a Map with an auto-incremented numeric key will be sufficient?. ",
    "viktoriiakrause": "Hi!\nAre there any updates on this issue?. ",
    "HappyEmu": "I have a similar use case where it would be great if the passed headers would be evaluated lazily for every request.\nThought:\nInstead of passing the headers hash eagerly as an object (axios.create({headers: {...}}) we could pass a function that returns the headers (axios.create({headers: () => {...}}) which would be evaluated before the request is sent.\nWhat do you think?\nEdit: This is a proposal, I dont think this works at the moment.. ",
    "mattstrayer": "I ran into the same use case. What I ended up doing in the short term was use the transformRequest function. Definitely a hack and would love to assist implementing a proper lazy-loading approach into the codebase. \nSee below for the code snippet. auth() gets the logged in user's token if available. \njavascript\nlet HTTP = axios.create({\n  baseURL: baseurl,\n  transformRequest: [function (data, headers) {\n    headers['Authorization'] = auth()\n    return JSON.stringify(data)\n  }],\n  headers: {\n    'Content-Type': 'application/json'\n  }\n}). ",
    "YujinGaya": "I ended up with this.\nJavaScript\naxios.create({\n  baseURL: '<your-api>',\n  headers: {\n    Authorization: {\n      toString () {\n        return `Bearer ${localStorage.getItem('token')}`\n      }\n    }\n  }\n})\nI'm not sure whether it works for any case.. ",
    "jchiatt": "@danielschmitz thanks for that example!!. ",
    "conorot": "I found it useful to wrap the interceptor in async/await to ensure my token was set before the API call was triggered:\nhttp.interceptors.request.use (\n  async (config) => {\n    const token = await getToken(); // slightly longer running function than example above\n    if (token) config.headers.Authorization = `Bearer ${token}`;\n    return config;\n  },\n  (error) => {\n    return Promise.reject (error);\n  }\n);. ",
    "kamikat": "Here's a similar issue: https://github.com/request/request/issues/2177. ",
    "dancon": "maybe you need set cookie path when you set cookie in server side~~. ",
    "Manubi": "Hi,\n@sebastiaandegeus did you find a solution? :). ",
    "jayudhandha": "Hi,\nI have also similar kind of requirement.\nI have cookies in my node js req.cookies  object.\nNow from my node js application, i am invoking another API (in spring security project) which gives me error: \n\nCould not verify the provided CSRF token because your session was not found.\n\nI have tried to pass X-XSRF-TOKEN in header by reading this from cookies. But it seems i have to pass session as well,\nSo how to pass req.cookies from server side to another API?. ",
    "cqpaul": "who knows this answer, have this error too... who knows this answer, have this error too... So this is just a bug with Edge? not for my code?. So this is just a bug with Edge? not for my code?. ",
    "ninaolo": "If anyone still has this problem and reads this: double check that you're setting domain and path from the server. I see that the creator of this thread did that, but I hadn't and was going crazy over why it didn't work. With fetch instead of axios, it worked without setting those properties, but axios needed them apparently.. If anyone still has this problem and reads this: double check that you're setting domain and path from the server. I see that the creator of this thread did that, but I hadn't and was going crazy over why it didn't work. With fetch instead of axios, it worked without setting those properties, but axios needed them apparently.. ",
    "liveKang": "I have the same problem, i also find that if the response.data is no longer, the result of console.log is object, if it's bigger, the result is string. Any way to slove? what's more, i run this code in Node. Vue + ssr. so just try this in node-module/axios/lib/defaults.js,change this Fun.\ntransformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        if (!String.prototype.trim) {\n          String.prototype.trim = function () {\n            return this.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n          };\n        }\n        data = JSON.parse(data.trim(''));\n      } catch (e) { \n        /* Ignore */\n        console.log('can not JSON.parse the response', e)\n      }\n    }\n    return data;\n  }],\nhope this can help you.. Yes\uff0c i also find this issues.\nI find the way to slove the problem that: in axios/defaults.js and then change the code like this:\ntransformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        if (!String.prototype.trim) {\n          String.prototype.trim = function () {\n            return this.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n          };\n        }\n        data = JSON.parse(data.trim(''));\n      } catch (e) { \n        /* Ignore */\n        console.log('can not JSON.parse the response', e)\n      }\n    }\n    return data;\n  }],\nhope this can help you!\nENV:\naxios version: ^0.18.0\nNode: v8.11.1\nMAC\n. ",
    "TonBits": "@Axnyff interesting. Let me try both scenarios, cross-origin request where response contains Access-Control-Expose-Headers with the value error (to expose the error header). And similarly, will try same domain (non-cross origin request) and see if all the headers are accessible without Access-Control-Expose-Headers. ",
    "MunMunMiao": "@Axnyff thx Solved. ",
    "poison": "When are you guys planning to release this? I also need this in my project, too crazy that currently modifying instance defaults propagate to the rest of the defaults!. ",
    "sky003": "Hello,\nI'm sure that it isn't issue with the server or file. I do the same with Fetch API and it works, but with axios it isn't.\nfetch(\n  '/file.pdf',\n  {\n    headers: {\n      'Accept': 'application/pdf',\n    },\n    responseType: 'blob',\n  }\n)\n.then(response => {\n  if (response.ok) {\n    return response.blob();\n  }\n})\n.then(blob => {\n  FileSaver.saveAs(blob, 'file.pdf');\n});\n. Probably, this may be an issue with javascript compiler, like babel, or some other related to the build configuration. For example, I faced this issue by building my environment using create-react-app tool.. ",
    "molerat619": "And how do you handle errors? E.g. I would like to return a 422 in some cases. But because axios expects a blob as response, I don't know how to handle this.. And how do you handle errors? E.g. I would like to return a 422 in some cases. But because axios expects a blob as response, I don't know how to handle this.. ",
    "joeczucha": "I'm also having the exact same problem\nfetch(\n  'http://assets.xxxxx.org:3000/uploads/3ba6921c-031e-426b-94a3-a4b966fc145f/documents/0f6a1d1166.pdf',\n{\n  headers: {\n    Accept: 'application/pdf',\n  },\n  responseType: 'arraybuffer',\n},\n)\n.then(response => {\n  console.log(response);\n  if (response.ok) {\n    contentType = response.headers.get('content-type');\n    return response.blob();\n  }\n})\n.then(blob => {\n  // download(blob, 'file.pdf', contentType);\n});\n\nworks great. However:\naxios\n  .get(\n    'http://assets.xxxxx.org:3000/uploads/3ba6921c-031e-426b-94a3-a4b966fc145f/documents/0f6a1d1166.pdf',\n    {\n      responseType: 'arraybuffer',\n      headers: {\n        Accept: 'application/pdf',\n      },\n    },\n  )\n  .then(response => {\n    console.log(response);\n    const blob = new Blob([response], {\n      type: application/pdf,\n    });\n    // download(blob, 'file.pdf', 'application/pdf');\n  })\n  .catch(error => console.log(error));\n\nGives me an empty response.data.\nHere are my responses: \n\nAnd here are my network requests (they are identical - on all tabs - for both the fetch and axios requests)\n\nI've also tried downgrading to 0.16.2 to no avail.\nThe back-end is Rails, delivering the file via send_file. However, I've also tried (like in the above example) just using a straight URL to see if it makes any difference. Sadly, it didn't. . ",
    "EvanSanderson": "I was able to get blob responseType working for an axios call using @Axnyff example as a reference. Code looked like:\n```\n            api\n                .getMultipleDownloads(url, headers.multiId)\n                .then(response => {\n                    const blob = new Blob([response.data], { type: 'application/zip' })\n... do stuff with blob\n            })\n            .catch(error => {\n                console.error(error)\n            })\n\n```\nand the actual method looking like:\ngetMultipleDownloads: (endpoint, docIds) => {\n        return axios.get(`${endpoint}`, {\n            responseType: 'blob',\n            headers: {\n                multiId: docIds\n            }\n        })\n    },\nIn this case I'm creating a zip file but the overall process is the same. Hope this helps someone!. ",
    "daxiongz": "\nSummary\nAxios can't handle blob and arraybuffer responseType. It returns empty oject in response.data.\nFor example, downloading of PDF file:\naxios.get('/file.pdf', {\n      responseType: 'arraybuffer',\n      headers: {\n        'Accept': 'application/pdf'\n      }\n}).then(response => {\n    // response.data is an empty object\n    const blob = new Blob([response.data], {\n      type: 'application/pdf',\n    });\n    FileSaver.saveAs(blob, 'file.pdf');\n});\nThe contend of downloaded file is:\n[object Object]\nIs it a bug?\nContext\n\naxios version: v0.18.0\nEnvironment: node v9.5.0, chrome 64, archlinux\n\nHello,\nI'm sure that it isn't issue with the server or file. I do the same with Fetch API and it works, but with axios it isn't.\nfetch(\n  '/file.pdf',\n  {\n    headers: {\n      'Accept': 'application/pdf',\n    },\n    responseType: 'blob',\n  }\n)\n.then(response => {\n  if (response.ok) {\n    return response.blob();\n  }\n})\n.then(blob => {\n  FileSaver.saveAs(blob, 'file.pdf');\n});\n\nAre you solve this problem?\nI have the same problem.. ",
    "magnus80a": "I solved it with Axios 0.18.0 with the following code.\nprivate handleDownloadPdf = () => {\n        axios.post(\"/api/pdf\",\n            {\n                bodyData: myData\n            },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/pdf'\n                },\n                responseType: \"blob\"\n            }).then((response: AxiosResponse) => {\n                const blob = new Blob([response.data], { type: 'application/pdf' })\n                const objectUrl = window.URL.createObjectURL(blob)\n                window.open(objectUrl)\n            }).catch((error: any) => { alert(error) })\n    }\n}. ",
    "Gertiozuni": "This is not working fine for large files, file is downloaded after 1 minute or more depending on file size.\nAlso for large files, for me is working only arraybuffer, blob is giving this error net::ERR_INSUFFICIENT_RESOURCES 200 (OK). ",
    "maleonix": "  `_downloadWeb(url, api, mimeType) {\n    var token = getTokenWeb();\n    let data = {\n        \"siteId\": this.state.idSite\n    }\n    Axios.defaults.headers.common['Authorization'] = `${token}`\n    Axios.defaults.headers.common['Accept'] = `${mimeType}`\n    Axios.defaults.headers.common['Content-Type'] = `application/json`\n    Axios.post(url + api, data, {\n        responseType: 'blob',\n    })\n        .then((response) => {\n            let blob = new Blob([response.data], { type: mimeType });\n            saveAs(blob, guid() + \".xlsx\")\n        })\n        .catch(function (error) {\n            console.log(\"_downloadWeb\", error);\n        });;\n}\n    this._downloadWeb(DebugConfig.apiUrl, `api/enterprise/${this.props.idEnterprise}/export?email=${false}`, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n\n`. ",
    "csalazar": "Same issue here, it worked for me (the context is a redux saga):\n```\n    const response = yield call(\n      axios.get,\n      pdfUrl,\n      {\n        responseType: 'arraybuffer',\n      }\n    )\nconst url = window.URL.createObjectURL(\n  new Blob([response.request.response], {\n    type: 'application/pdf',\n  })\n)\n\n```. ",
    "renetanikolova": "How do you catch an error if the request fails? \nSince we have: responseType: \"blob\" - the method expects blob object and if the request fails, that's what I get in the error.response object:\n\nand there is no error message available there. So, how do you handle the error, or you just throw an error with the same message every time, like \"Error occurred while generating the pdf file.\"?. ",
    "hans-lizihan": "i guess it's the best to create seperate axios instances.\n```js\nconst client1 = axios.create();\nclient1.intercepters.request.use(interceptor1);\nclient1.intercepters.request.use(interceptor2);\nclient1.intercepters.request.use(interceptor3);\nconst client2 = axios.create();\nclient2.intercepters.request.use(interceptor1);\nclient2.intercepters.request.use(interceptor3);\n```. This will completely break npm run test:unit\nShould we use require back?. https://lodash.com/docs/4.17.4#forEach\nif keys with length lodash forEach has different behavior with this custom forEach method. got it. i have fixed it in https://github.com/axios/axios/pull/1407. sorry to change it back to require somehow if i use import the unit test will just fail.... ",
    "soederpop": "This is amazing news.  Thanks for fixing this.  What is the plan for releasing this to npm?. ",
    "Dakkers": "has this been shipped? we have to use a ghetto XMLHTTPRequest atm instead \ud83d\ude3f . ",
    "KateKate": "Plz merge it, thanks in advance!. ",
    "Bezbran": "In Firefox you have to use another way to  mimic \"click\" on a link:\nvar fileURL = window\n                    .URL\n                    .createObjectURL(blob);\n                var fileLink = document.createElement('a');\n                fileLink.href = fileURL;\n                fileLink.download = name;\n                fileLink.title = fileLink.download;            \n                fileLink.dispatchEvent(new MouseEvent(\"click\", {\n                    \"view\": window,\n                    \"bubbles\": true,\n                    \"cancelable\": false\n                }));. In Firefox you have to use another way to  mimic \"click\" on a link:\nvar fileURL = window\n                    .URL\n                    .createObjectURL(blob);\n                var fileLink = document.createElement('a');\n                fileLink.href = fileURL;\n                fileLink.download = name;\n                fileLink.title = fileLink.download;            \n                fileLink.dispatchEvent(new MouseEvent(\"click\", {\n                    \"view\": window,\n                    \"bubbles\": true,\n                    \"cancelable\": false\n                }));. ",
    "deejayxd07": "Have the same problem on expo \"^26.0.0\". I tried using fetch and it works as expected.. ",
    "msmaromi": "same problem. ",
    "baryla": "The problem doesn't lie on axios' side. It's a problem a lot of developers have been facing with RN or Expo for this matter. I have the exact same issue where the requests are fine if the APP and the API are on the same network but if they're on separate networks, it starts to timeout. I read that setting the packer hostname for RN should fix that issue but for me, it doesn't. This is 100% not an axios issue because if you swap axios for the built in Fetch API, you'll get the same issue. . ",
    "zywind": "Hmm, my bad, it does appear to be working. Perhaps it was a server issue earlier.... ",
    "waynebloss": "This project implements a pause/resume upload with Axios. The key is that they send each chunk of the file as a separate request. Therefore, they can \"pause\" the entire upload operation.\nI don't think Axios has a pause/resume for normal XMLHttpRequests.. This project implements a pause/resume upload with Axios. The key is that they send each chunk of the file as a separate request. Therefore, they can \"pause\" the entire upload operation.\nI don't think Axios has a pause/resume for normal XMLHttpRequests.. ",
    "bhansenmd": "The Axios  version is 0.18.0. We'll get you the code to reproduce. . Our app uses Vue.js and Node (via npm). \nThe offending code is the following.\n```javascript\nimport http from 'axios'\n// Other imports\nconst api = {\nfetchTests: () => http.get('/tests'),\n// Other endpoints\n\n}\n```\nIn a file called main.js we give axios some defaults\njavascript\naxios.defaults.baseURL = config.baseURL // localhost:5050 (a Flask server)\naxios.defaults.responseType = 'json'\nIf I comment out the responseType line, data is the string value of the response.. That's a bummer. Thanks for your help anyways :). ",
    "KevinEady": "Ah, interesting. I didn't think about the in-browser usage. I'm using axios in node, testing an API endpoint that behaves differently with different User-Agents, including when one isn't passed at all.\nBut Chrome throwing that error for setting User-Agent sounds more of a Chrome-enforced protection than the XHR standard. Looking at https://fetch.spec.whatwg.org/#forbidden-header-name, User-Agent is not listed.. Ah, interesting. I didn't think about the in-browser usage. I'm using axios in node, testing an API endpoint that behaves differently with different User-Agents, including when one isn't passed at all.\nBut Chrome throwing that error for setting User-Agent sounds more of a Chrome-enforced protection than the XHR standard. Looking at https://fetch.spec.whatwg.org/#forbidden-header-name, User-Agent is not listed.. ",
    "danawoodman": "@JustinBeckwith this is not answered as you cannot remove or change 'User-Agent'. @JustinBeckwith this is not answered as you cannot remove or change 'User-Agent'. ",
    "dkichler": "Looks like this is already possible without exposing it via the API:  https://github.com/kuitos/axios-extensions/blob/master/src/utils/buildSortedURL.js#L7. Looks like this is already possible without exposing it via the API:  https://github.com/kuitos/axios-extensions/blob/master/src/utils/buildSortedURL.js#L7. ",
    "AyushG3112": "This would be simple enough to do, but would be a breaking change.. This would be simple enough to do, but would be a breaking change.. It would be if someone is checking error.constructor.name === 'Error'. It would be if someone is checking error.constructor.name === 'Error'. I'm in favor of this, but personally I would prefer, if the maintainers agree ofcourse, that we bump axios to a semver, v1.0.0\nAxios certainly seems stable enough for that, and following semver-major prevents breakage.\nOn another note, given the widespread use of axios and the preferred HTTP library of React and Vue.js, a breaking change can have major impacts which need to be considered.. I'm in favor of this, but personally I would prefer, if the maintainers agree ofcourse, that we bump axios to a semver, v1.0.0\nAxios certainly seems stable enough for that, and following semver-major prevents breakage.\nOn another note, given the widespread use of axios and the preferred HTTP library of React and Vue.js, a breaking change can have major impacts which need to be considered.. Actually, now that I checked, axios is working on a v1.0.0 branch, I might open a PR for this today.. Actually, now that I checked, axios is working on a v1.0.0 branch, I might open a PR for this today.. /cc @Khaledgarbaya @axe312ger @zcei. /cc @Khaledgarbaya @axe312ger @zcei. The PR is already there, I added a soft fix for the 0.x versions as a flag in #1419, and the Error type change for the 1.x in #1420, refer the linked PRs. The PR is already there, I added a soft fix for the 0.x versions as a flag in #1419, and the Error type change for the 1.x in #1420, refer the linked PRs. @axe312ger  @Khaledgarbaya any updates on this?\n. @axe312ger  @Khaledgarbaya any updates on this?\n. @axe312ger any update please?. @axe312ger @Khaledgarbaya is it too soon to request a release please?. @axe312ger @Khaledgarbaya @nickuraltsev @emilyemorehouse can any of you please @-mention someone with npm publish rights?. Closed in favor of #1419. Please reopen if deemed necessary in v1.0.0. ",
    "cruelbob": "AxiosError has to inherit from Error. This wouldn't breaking change.. I agree but this is a minor breaking change. Can we sacrifice this for better API?. @mzabriskie, @nickuraltsev. @JustinBeckwith. @Khaledgarbaya any updates on this?. That was open source:). #1415. ",
    "seanlindo": "This would be wonderful. Running into this issue now!. ",
    "rhyek": "AxiosError would've been nicer... Can someone publish the isAxiosError change, please?. ",
    "SimpleNice": "yse,This is my screenshot.\nThis is:Microsoft Edge  41.16299.15.0\n\nThis i:Microsoft Edge \n38.14392.1066.0\n\n. ",
    "Sweechirly": "this problem has not been solved.\nEdge version:Microsoft Edge 42.17134.1.0. this problem has not been solved.\nEdge version:Microsoft Edge 42.17134.1.0. ",
    "lvybriage": "I also meet the problem.\nEdge version: Microsoft Edge 41.16299.402.0. ",
    "davidwincent": "I have the same problem, works in other browsers but not in MS Edge\n\"axios\": \"^0.18.0\"\nMicrosoft Edge 42.17134.1.0\nMicrosoft EdgeHTML 17.17134\nMy upload method before babel transpile:\n```\nimport axios from 'axios'\nconst uploadBase64 = (base64, filename) => {\n    const file = dataURLtoFile(base64, filename)\n    const data = new FormData()\n    data.append('data', file, filename)\n    return axios.post(process.env.GRAPHQL_FILE_ENDPOINT, data, {\n        headers: {\n            'Content-Type': 'multipart/form-data'\n        }\n    })\n}\n```\nIn Edge network tab I see this =>\n   Request URL: https://files.graph.cool/cjhhmgaud42cz0195fs7aw02m/cjhuc4pbl02b201631p2bc7oo\n   Request Method: GET\n   Status Code: 304 / Not Modified. I have the same problem, works in other browsers but not in MS Edge\n\"axios\": \"^0.18.0\"\nMicrosoft Edge 42.17134.1.0\nMicrosoft EdgeHTML 17.17134\nMy upload method before babel transpile:\n```\nimport axios from 'axios'\nconst uploadBase64 = (base64, filename) => {\n    const file = dataURLtoFile(base64, filename)\n    const data = new FormData()\n    data.append('data', file, filename)\n    return axios.post(process.env.GRAPHQL_FILE_ENDPOINT, data, {\n        headers: {\n            'Content-Type': 'multipart/form-data'\n        }\n    })\n}\n```\nIn Edge network tab I see this =>\n   Request URL: https://files.graph.cool/cjhhmgaud42cz0195fs7aw02m/cjhuc4pbl02b201631p2bc7oo\n   Request Method: GET\n   Status Code: 304 / Not Modified. @Axnyff agree. Maybe consider uploading with fetch when it is available?. @Axnyff agree. Maybe consider uploading with fetch when it is available?. ",
    "nachii": "Same problem here... any news?\nUpdate 1: it happens only with HTTPS.\nUpdate 2: no problems with Edge 41.16299.402.0 and 38.14393.0.0.\nIt seems a bug introduced in the latest version of Edge (42.17134.1.0).. Really curious. Unfortunately not, no news... it's very annoying and I don't understand if it's a Edge problem or not.. Really curious. Unfortunately not, no news... it's very annoying and I don't understand if it's a Edge problem or not.. ",
    "KiwiNibbler": "Curious.  Has this been solved yet?  We have the same issue..... ",
    "cloder": "Issue reported to Edge Developers: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/19767072/\nThey said, it was resolved on version 44.17763.1.0. ",
    "andreshg112": "How can I do it with Mocha?. ",
    "thomasdom": "Will this enhancement be available in 0.19 version? It would be very useful!. ",
    "dmitry-saritasa": "This didn't help\ninstance.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  return Promise.reject(error);\n});\nI. I think I have no issues with CORS, as this interceptor\ninstance.interceptors.response.use(function (response) {\n  return response;\n}, (error) => {\n  console.log('does it work?', error.response);\n  return Promise.reject(error);\n});\nproperly output error.response in console. I just have no idea why catch makes it undefined. Ah found the stupid error on my side I had another interceptor in another file\n```\n//\n// Intercept 401 HTTP Error code in API\n// response and fire vuex action AUTH_TOKEN_EXPIRED\n// which cleans up the auth state\n// then move the user to login screen\n//\naxios.interceptors.response.use(response => response, (error) => {\n  if (error.response.status === 401) {\n    store.dispatch(AUTH_TOKEN_EXPIRED);\n    app.$router.push('/login?expired=1');\n  }\nreturn Promise.reject();\n});\napp.$mount('#app');\n```\nfixed it with\n```\n//\n// Intercept 401 HTTP Error code in API\n// response and fire vuex action AUTH_TOKEN_EXPIRED\n// which cleans up the auth state\n// then move the user to login screen\n//\naxios.interceptors.response.use(response => response, (error) => {\n  if (error.response.status === 401) {\n    store.dispatch(AUTH_TOKEN_EXPIRED);\n    app.$router.push('/login?expired=1');\n  }\nreturn Promise.reject(error.response);\n});\napp.$mount('#app');\n```. ",
    "codexman0": "@moonshineBoy , any updates?\n. ",
    "rswarup82": "Here is the sample code I am trying out to handle 4xx, 5xx, and 302 response code.\n```js\nimport axios from 'axios';\nclass XHRService {\ngetWithParams(config, filter, request, receivedSuccess, receivedFailure) {\nreturn (dispatch, getState) => {\n\n  if (request) {\n    dispatch(request(filter));\n  }\n\n  const reqConfig = this.prepareConfig('get', config);\n\n  // adding interceptor to find out response or error object structure.\n  axios.interceptors.response.use(function (response) {\n\n    console.log('inside axios response interceptor.');\n    console.log('JSON.stringify(response) ---> ' + JSON.stringify(response));\n    return response;\n  }, function (error) {\n    console.log('inside axios response interceptor catch block.');\n    console.log('JSON.stringify(error) ---> ' + JSON.stringify(error));\n    return Promise.reject(error);\n  });\n\n  return axios(reqConfig).then(response => {\n    if (receivedSuccess) {\n      dispatch(receivedSuccess(filter, response.data));\n    }\n  }).catch(function (error) {\n    console.log('inside catch block.');\n    if (error.response) {\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      console.log(error.request);\n    } else {\n      console.log('Error', error.message);\n    }\n    console.log(JSON.stringify(error));\n  });\n}\n\n}\n// code related to prepareConfig(....)\n// some shared code.\n}\n```\nLet me know your thoughts on the same.\n. Here is the sample code I am trying out to handle 4xx, 5xx, and 302 response code.\n```js\nimport axios from 'axios';\nclass XHRService {\ngetWithParams(config, filter, request, receivedSuccess, receivedFailure) {\nreturn (dispatch, getState) => {\n\n  if (request) {\n    dispatch(request(filter));\n  }\n\n  const reqConfig = this.prepareConfig('get', config);\n\n  // adding interceptor to find out response or error object structure.\n  axios.interceptors.response.use(function (response) {\n\n    console.log('inside axios response interceptor.');\n    console.log('JSON.stringify(response) ---> ' + JSON.stringify(response));\n    return response;\n  }, function (error) {\n    console.log('inside axios response interceptor catch block.');\n    console.log('JSON.stringify(error) ---> ' + JSON.stringify(error));\n    return Promise.reject(error);\n  });\n\n  return axios(reqConfig).then(response => {\n    if (receivedSuccess) {\n      dispatch(receivedSuccess(filter, response.data));\n    }\n  }).catch(function (error) {\n    console.log('inside catch block.');\n    if (error.response) {\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      console.log(error.request);\n    } else {\n      console.log('Error', error.message);\n    }\n    console.log(JSON.stringify(error));\n  });\n}\n\n}\n// code related to prepareConfig(....)\n// some shared code.\n}\n```\nLet me know your thoughts on the same.\n. Here is the sample code I am trying out to handle 4xx, 5xx, and 302 response code.\n```js\nimport axios from 'axios';\nclass XHRService {\ngetWithParams(config, filter, request, receivedSuccess, receivedFailure) {\nreturn (dispatch, getState) => {\n\n  if (request) {\n    dispatch(request(filter));\n  }\n\n  const reqConfig = this.prepareConfig('get', config);\n\n  // adding interceptor to find out response or error object structure.\n  axios.interceptors.response.use(function (response) {\n\n    console.log('inside axios response interceptor.');\n    console.log('JSON.stringify(response) ---> ' + JSON.stringify(response));\n    return response;\n  }, function (error) {\n    console.log('inside axios response interceptor catch block.');\n    console.log('JSON.stringify(error) ---> ' + JSON.stringify(error));\n    return Promise.reject(error);\n  });\n\n  return axios(reqConfig).then(response => {\n    if (receivedSuccess) {\n      dispatch(receivedSuccess(filter, response.data));\n    }\n  }).catch(function (error) {\n    console.log('inside catch block.');\n    if (error.response) {\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      console.log(error.request);\n    } else {\n      console.log('Error', error.message);\n    }\n    console.log(JSON.stringify(error));\n  });\n}\n\n}\n// code related to prepareConfig(....)\n// some shared code.\n}\n```\nLet me know your thoughts on the same.\n. ",
    "paulvoloschuk": "Ok. So I found out that error.response will be null if there is error code together with actual content. That's confusing.\n\naxios version 0.18. \n",
    "tebs1200": "I'm also experiencing this issue.\nOn certain 4XX errors, my API contains a payload in the body with further information on what went wrong. When my 400 response has a body, error.response is null.\nIf you check out section 6.5 of RFC 7231 you'll see that for several codes, the server should be providing response bodies in many situations (403, 406). At the moment, I'm unable to access the response code in the catch which is creating issues.. I tried to reproduce this in a basic unit test by adding the following to test/unit/adapters/http.js:\n```\n  testErrorWithJSON: function (test) {\n    var data = {\n        firstName: 'Fred',\n        lastName: 'Flintstone',\n        emailAddr: 'fred@example.com'\n    };\nserver = http.createServer(function (req, res) {\n  res.setHeader('Content-Type', 'application/json;charset=utf-8');\n  res.statusCode = 403;\n  res.end(JSON.stringify(data));\n}).listen(4444, function () {\n  axios.get('http://localhost:4444/').catch(function (err) {\n    console.log('running 403 test');\n    test.equal(err.response.status, 403);\n    test.done();\n  });\n});\n\n},\n```\nThe test passed and the expected status code was available on err.response. \nI also added the following to test/specs/requests.spec.js:\n```\n  it('should set error status when rejecting with body', function (done) {\n    var response;\naxios('/api/account/signup', {\n  username: null,\n  password: null\n}, {\n  method: 'post',\n  headers: {\n    'Accept': 'application/json'\n  }\n})\n  .catch(function (error) {\n    response = error.response;\n  });\n\ngetAjaxRequest().then(function (request) {\n  request.respondWith({\n    status: 403,\n    responseText: '{\"error\": \"BAD USERNAME\", \"code\": 1}'\n  });\n\n  setTimeout(function () {\n    expect(typeof response).toEqual('object');\n    expect(response.status).toEqual(403);\n    done();\n  }, 100);\n});\n\n});\n```\nThis also passed, so error.response seems to be getting set correctly in the test cases. I'll keep looking into this a bit more.. While watching the Jasmine tests running and seeing that the node unit tests pass, I thought It would be prudent test my web application in different browsers.\nTurns out that in Chrome, the code runs as expected - error.response is there and I can access the status code without issue.\nUsing Safari, error.response is null. Looks like Safari responds differently to an actual remote 4XX response than it does to the mocked response from jasmine-ajax. Can anyone else confirm if they are seeing the issue only in Safari?. Is this a duplicate of #1427?. ",
    "ToKaDev": "I'm also have this issue. I like to show some information about the error reason to the user. But the statusText property is always undefined.\nBut it seems that the statusText is also undefined when I use the fetch function. \n(react-native 0.55.4 with axios 0.18.0). I'm also have this issue. I like to show some information about the error reason to the user. But the statusText property is always undefined.\nBut it seems that the statusText is also undefined when I use the fetch function. \n(react-native 0.55.4 with axios 0.18.0). ",
    "blahmonkey": "Same issue -- backend sends a HTTP 400 with a response body. Axios code does not catch() it as an error, and instead returns a null response object. So I cannot handle different HTTP 400 cases and respond to the user with more nuanced feedback on what they did wrong\nCode - \n\nreturn this.axiosInstance.post(this.confirmEmailUrl, postData).then(res => {\n      console.log(res) // Returns null\n      return res\n    })\n\nContext\naxios version: v0.18.0\nEnvironment: Chrome 68.0.3440.106, OSX High Sierra. This works for me\nhttps://github.com/axios/axios/issues/1143#issuecomment-340331822\n-- you get e.g. 403 as a valid response. Then just filter by status code in your then() handler.. ",
    "stereonom": "\nUsing Safari, error.response is null. Looks like Safari responds differently to an actual remote 4XX response than it does to the mocked response from jasmine-ajax. Can anyone else confirm if they are seeing the issue only in Safari?\n\n@tebs1200 yeah, we're having the same problem with safari. chrome works for us.\n. ",
    "AoDev": "@Axnyff This issue is not easy to reproduce. There is a timeout of 10 sec (10 000) but it is not triggered. Regarding the XMLHttpRequest level, how can I inspect it ? . fetchData is pulling information from a cryptocurrency exchange called Binance.\nUnfortunately, it's hard to reproduce like various people explained in the stackoverflow question I have linked. It works most of the times, but sometimes Chrome cancels the request.\nMore details about the code of the fetch method:\n```\nimport _axios from 'axios'\nimport cryptojs from 'crypto-js'\nimport querystring from 'querystring'\nconst baseURL = 'https://api.binance.com'\nconst axios = _axios.create({\n  baseURL,\n  timeout: 10000,\n})\nclass BinanceApi {\n  fetchBalance () {\n    const params = {\n      timestamp: Date.now(),\n    }\n    const query = querystring.stringify(params)\n    params.signature = this.sign(query).toString(cryptojs.enc.hex)\nconst headers = {\n  'X-MBX-APIKEY': this.key\n}\n\nreturn axios.get('/api/v3/account', {params, headers})\n  .then((res) => {\n    return transformAccountInfo(res.data)\n  })\n\n}\nsign (queryString) {\n    return cryptojs.HmacSHA256(queryString, this.secret)\n  }\nconstructor () {\n    // edited...\n  }\n}\nexport default BinanceApi\n```. Some user commented the following:\n\nI have also had horrible problems with this. One thing that I have found that does consistently trigger this if the AJAX response has a status code 301/302 and the redirect URL is on another domain. This is a consistent reproduction of the problem for me. \u2013 eb80 Oct 11 '13 at 8:17. @mattridley Awesome. Thank you for your PR. I hope it will be released soon :). \n",
    "kldavis4": "I think I'm running into a version of this as well. In my case I have basic auth configured on an nginx server and a PUT api request that is updating the basicauth credentials. This seems to be causing nginx to kill the request prematurely resulting in a cancelled request in the browser. I get no error from axios, though.. ",
    "ZTjack": "@juanr2001 In my case, my request was be canceled within 4ms.... Sad. I am using axios-0.18.0, I checked the source file in node_moudles folders, it doesn't got the 'onabort' function ( https://github.com/axios/axios/blob/master/dist/axios.js Here it is). Then I upgrade to axios@0.19.0-beta.1 which contains the code fixing the problem.. ",
    "vadymkukhtinOD": "Still an issue even on 0.19.0-beta.1 for me. If I am using any other library, XMLHttpRequest or fetch I don't see any problems, but with axios I see cancelled request.\n@ZTjack How you managed to fix it with new version?. This problem can be outplayed by setting global axios \"timeout\" to crazy number like 100000 ms and then request will fail on server side, in my case on Nginx.. ",
    "nobukichi": "0.19.0-beta.1 fixed a hibernation related problem on Chrome for us. . ",
    "davidgoate": "We also have this issue, we want to \"gracefully\" handle client side timeouts but currently our \"success\" handler is running and our error handlers are not being triggered when timeouts happen (we have set ours to 30 seconds and want to leave it at that really).. ",
    "wenshan": "I also met the same problem. Now this problem still exists in axios@0.19.0-beta. I hope it can be solved as soon as possible. I also met the same problem. Now this problem still exists in axios@0.19.0-beta. I hope it can be solved as soon as possible. ",
    "zakalwe314": "A workaround is to use an interceptor with the cancel token.\nThe example below will add a 30 second timeout on the call.  I've tested this on Chrome (and FF and Edge) and it recovers correctly, by rejecting the promise, after the PC wakes up. \njavascript\naxios.interceptors.request.use(config=>{\n    const source = axios.CancelToken.source();\n    config.cancelToken = source.token;\n    setTimeout(()=>source.cancel('Timed out after 30s'), 30000);\n    return config;\n});. Just to add that the solution above may not be compatible with some axios extensions which use interceptors on the response.  For us axios-retry no longer worked with this error because the error object from using the cancel token did not have error.config set (is this a bug?).\nTo fix this an interceptor can be added on the response as well to catch and fix the lack of the config object which should then allow other interceptors to work.  Note that you need to ensure that these interceptors are added before others such as axios-retry so that the response interceptors are called in the correct order.\njavascript\naxios.interceptors.request.use(config=>{\n    const source = axios.CancelToken.source();\n    config.cancelToken = source.token;\n    setTimeout(()=>source.cancel({message:'Timed out after 30s',config}), 30000);\n    return config;\n});\naxios.interceptors.response.use(null,error=>{\n    if (!error.config && error.message && error.message.config){\n        error.config = error.message.config;\n    }\n    throw error;\n});. ",
    "AndyBarron": "I am also seeing this happen in Axios when Chrome cancels a request due to the machine entering sleep mode. I haven't dug to see if XMLHttpRequest detects this as well.. I am also seeing this happen in Axios when Chrome cancels a request due to the machine entering sleep mode. I haven't dug to see if XMLHttpRequest detects this as well.. I am also seeing this happen in Axios when Chrome cancels a request due to the machine entering sleep mode. I haven't dug to see if XMLHttpRequest detects this as well.. ",
    "rabin999": "`var source = null;\nfunction ajaxRequest(options, cb) {\nif(source)\n    source.cancel('Operation canceled by the user.');\n\nif(!options.hasOwnProperty('url'))\n    return;\n\nvar requestUrl          = options.url,\n    requestData         = options.hasOwnProperty('data') ? options.data : '';\n    requestMethod       = options.hasOwnProperty('method') ? options.method : 'get',\n    form                = options.hasOwnProperty('form') ? new FormData(document.getElementById(options.form)) : false,\n    beforeSend          = options.hasOwnProperty('beforeSend') ? (typeof options.beforeSend === 'function') ? true : false : false,\n    CancelToken         = axios.CancelToken,\n    source              = CancelToken.source();`\n\nDone :). ",
    "danielmrd15": "I have added but still its not working..\njs\naxios({\n  method: 'get',\n  url: config.API_URL + 'user/permission',\n  headers: {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Headers': 'x-access-token',\n    'x-access-token': state.tokenid\n  }\n})\n  .then(response => {\n    if (response.data.status == 200) {\n      context.commit('setpermission', { 'permission': response.data.permission })\n      resolve(true);\n    }\n  })\n  .catch(e => {\n    console.log(e)\n  })\nCan you please share me the sample code... I have added but still its not working..\njs\naxios({\n  method: 'get',\n  url: config.API_URL + 'user/permission',\n  headers: {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Headers': 'x-access-token',\n    'x-access-token': state.tokenid\n  }\n})\n  .then(response => {\n    if (response.data.status == 200) {\n      context.commit('setpermission', { 'permission': response.data.permission })\n      resolve(true);\n    }\n  })\n  .catch(e => {\n    console.log(e)\n  })\nCan you please share me the sample code... ",
    "shahalom": "Hi, I am also having same issue :(\n```js\nconst restURL = '';\nconst reqData = {\n    'params': {\n        'posts_per_page': 50,\n        'lang': 'bn',\n    }\n}\nconst reqHeaders = {\n    'headers': {\n        'Access-Control-Allow-Headers': 'x-access-token',\n        'X-WP-Nonce': 'my-wp-nonce-here',\n    }\n}\nawait axios.get(restURL, reqData, reqHeaders)\n.then(response => {\n    console.log(response.data);\n});\n```\nAnybody please tell me - where I am missing .... Thank you @Axnyff  for the reply. This issue is solved at https://stackoverflow.com/questions/49680260/axios-does-not-sending-the-header-info-on-get-post-request/\nsolution is:\nawait axios.get(restURL, Object.assign({}, reqData, reqHeaders))\n.then(response => {\n    console.log(response.data);\n});. ",
    "s-kobets": "Faced the same problem, postman works well, and through localhost it does not work\n\n. Thanks, in my case it was a misconfigured server.. ",
    "alenas": "I had the same problem. It is just misconfiguration with headers or you are not handling OPTIONS request properly. This solved my problem: http://johnzhang.io/options-request-in-express. I had the same problem. It is just misconfiguration with headers or you are not handling OPTIONS request properly. This solved my problem: http://johnzhang.io/options-request-in-express. ",
    "rod-stuchi": "~The same exact issue here~\n~0.18.0 either~\nMy issue was with dotenv, line comments motdotla/dotenv#253. @SeeThruHead do you have any .env file setting out timeout or baseurl ?. ",
    "daniel-lawrence": "@SeeThruHead I had this issue when the response did not include the Access-Control-Allow-Origin header. The error response was received, but disallowed by CORS. When that happens, it looks like axios doesn't actually set error.response, even though there was a received response.\nSo, at least in my case, the fix was to make sure Access-Control-Allow-Origin: * was included in the response's headers when there was an error.. ",
    "thehaytonproject": "Stumbled across this thread whilst debugging the exact same issue.\nTurns out my problem was of my own making. I had a misconfigured request interceptor where I neglected to return the config. I think this was throwing an error that was caught by the response interceptor, even though a request had not been made. I'm pretty sure this can be triggered by code chained to requests too, for example promises.\nNot sure if this is intentional or not, but something worth checking.. ",
    "leijing7": "I got a '500 Internal Privoxy Error' and could not recur the issue.. ",
    "TranDinhKhang": "hello, I have the same problems here and don't know why.\nI'm using axios with vuejs\n\n<q-btn\n                    v-if=\"forgotPasswordMode === false\"\n                    class=\"q-mr-sm\"\n                    outline\n                    color=\"secondary\"\n                    @click.prevent=\"submitLogin\"\n                    label=\"Login\"\n                  />\nThe button already have @click.event\nAnd the result\n\n. ",
    "cyrus3212": "Try changing axios default timeout from 1000 to 5000. ",
    "jkunwar": "hi there, i also have the same problem. Did you find any solution for this.. ",
    "flyher": "@jkunwar \nI have to keep the old version until the issue be fixed.. ",
    "daton89": "guys are you sure that you don't generate and error in the then? \ni have a similar problem... \nin my case it go in the then but i don't receive the full arraybuffer i guess. \n. ",
    "rheinheimer": "@flyher Thank you!!! I've just spent nearly 12 hours trying to figure out how to download a binary file (Flask + React + Axios + FileSaver). After reading this (starting from #1392) I just went back to 0.16.2 and everything works great. So yes, this is an issue.. ",
    "gabrieletondi": "We have the same issue. Even if we set withCredentials: false in react native we get request with \"withCredentials\": true..... ",
    "fanweiGit": "\u6211\u4e5f\u9047\u5230\u4e86\u8fd9\u79cd\u95ee\u9898\uff0c\u8bf7\u95ee\u60a8\u89e3\u51b3\u4e86\u5417~. \u6211\u4e5f\u9047\u5230\u4e86\u8fd9\u79cd\u95ee\u9898\uff0c\u8bf7\u95ee\u60a8\u89e3\u51b3\u4e86\u5417~. ",
    "chao00440": "@fanweiGit \nyou actually need to enable proxy:\n...\napp.enable('trust proxy'); // optional, not needed for secure cookies\napp.use(express.session({\n    secret : 'somesecret',\n    store : ..., // store works fine, sessions are stored\n    key : 'sid',\n    proxy : true, // add this when behind a reverse proxy, if you need secure cookies\n    cookie : {\n        secure : true,\n        maxAge: 5184000000 // 2 months\n    }\n}));\n...\nmore on https://stackoverflow.com/questions/14463972/how-to-set-secure-cookie-using-heroku-node-js-express\n. ",
    "EZarkov": "Sorry it was miss click. ",
    "radreamer": "+1\n@defdata , you can use next code as a temporary solution:\nauth: {\n    username,\n    password: unescape(encodeURIComponent(password)),\n},. +1\n@defdata , you can use next code as a temporary solution:\nauth: {\n    username,\n    password: unescape(encodeURIComponent(password)),\n},. ",
    "cztomsik": "I've simply disabled wifi on my macbook, maybe it is platform specific? Also, I had different error. \n```\nnode test_axios_disconnect.js \nnode:61410) UnhandledPromiseRejectionWarning: Error: getaddrinfo ENOTFOUND github.com github.com:80\n    at errnoException (dns.js:55:10)\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:97:26)\n(node:61410) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 2)\n(node:61410) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n```\n. I've simply disabled wifi on my macbook, maybe it is platform specific? Also, I had different error. \n```\nnode test_axios_disconnect.js \nnode:61410) UnhandledPromiseRejectionWarning: Error: getaddrinfo ENOTFOUND github.com github.com:80\n    at errnoException (dns.js:55:10)\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:97:26)\n(node:61410) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 2)\n(node:61410) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n```\n. Do you need any additional info? How can I help with this?. ",
    "wholegroup": "@JustinBeckwith I have the same issue\nThe issue is that a request is completed in time but then the node process is hanging up during timeout before exiting.\nI suppose there is some issue with clearTimeout if an exception occurs (at least ENOTFOUND).\nPlease re-open this issue.\n. @JustinBeckwith I have the same issue\nThe issue is that a request is completed in time but then the node process is hanging up during timeout before exiting.\nI suppose there is some issue with clearTimeout if an exception occurs (at least ENOTFOUND).\nPlease re-open this issue.\n. @JustinBeckwith I've executed you example with time utility:\n```\nuser@dron:~/Projects/scanner$time node src/server.js \nENETUNREACH\n\u2728 that request took 0.007 seconds \u2728\nreal    0m1.191s\nuser    0m0.167s\nsys     0m0.026s\n```\nThe script was running during about 1 second (like timeout value). @JustinBeckwith I've executed you example with time utility:\n```\nuser@dron:~/Projects/scanner$time node src/server.js \nENETUNREACH\n\u2728 that request took 0.007 seconds \u2728\nreal    0m1.191s\nuser    0m0.167s\nsys     0m0.026s\n```\nThe script was running during about 1 second (like timeout value). ",
    "B-3PO": "@txssseal looks like your code is outputting errors from packaged code. If you add source-maps to your build process, you might find the actual location of the error. \nIt will also help if you post the code with the stack trace.. ",
    "ananth10": "@JustinBeckwith .Yes you were right. we have fixed it now . thank yu. ",
    "biranchi2018": "\n@JustinBeckwith .Yes you were right. we have fixed it now . thank yu\n\nCan you plz explain how you have fixed ? I am also facing the same issue.. ",
    "tirthaguha": "How did it get fixed. Stuck with same issue. ",
    "iamwwc": "From axios Api\n\n// 'proxy' defines the hostname and port of the proxy server.\n  // You can also define your proxy using the conventional http_proxy and\n  // https_proxy environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a no_proxy environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use false to disable proxies, ignoring environment variables.\n  // auth indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an Proxy-Authorization header, overwriting any existing\n  // Proxy-Authorization custom headers you have set using headers.\n\nI solve... luckily\nplease think care of your env. maybe you have set http_proxy. ",
    "DrewBe121212": "The full XHR response is available under the 'request' key. \njs\n.then((response) => {\n      console.log(response.request.statusText);\n}). The full XHR response is available under the 'request' key. \njs\n.then((response) => {\n      console.log(response.request.statusText);\n}). ",
    "chandarsunderraj": "@DrewBe121212  Thanks for the swift reply.\nIs this the same textStatus as in ajax Events which returns (\"success\", \"notmodified\", \"nocontent\", \"error\", \"timeout\", \"abort\", or \"parsererror\").\nReference :  http://api.jquery.com/jquery.ajax/. @DrewBe121212  Thanks for the swift reply.\nIs this the same textStatus as in ajax Events which returns (\"success\", \"notmodified\", \"nocontent\", \"error\", \"timeout\", \"abort\", or \"parsererror\").\nReference :  http://api.jquery.com/jquery.ajax/. ",
    "bluce1017": "The latest version of firefox sends the correct Auth Header. Safari and IE seem to ignore it and continue to send Basic Auth.... ",
    "lukasleitsch": "I have the same issue. In Safari and IE axios send the basic auth and not the authorization that is defined.\nThat is my setup for axios:\n```js\nwindow.axios = require('axios');\nwindow.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\nlet token = document.head.querySelector('meta[name=\"csrf-token\"]');\nif (token) {\n    window.axios.defaults.headers.common['X-CSRF-TOKEN'] = token.content;\n} else {\n    console.error('CSRF token not found: https://laravel.com/docs/csrf#csrf-x-csrf-token');\n}\nlet api_token = document.head.querySelector('meta[name=\"api-token\"]');\nif (api_token) {\n    window.axios.defaults.headers.common['Authorization'] = 'Bearer ' + api_token.content;\n}\n```\nIn a staging environment I use the basic auth to protect the page. Would be great if axios use the authorization that I defined and not the basic auth from the page.\nA workaround would also be great.. ",
    "tylik1": "Any update on this? Also sends basic Auth in Chrome, though proper header for Authorization has been set up\nUPD.\nI've solved issue by updating to latest release: v0.18.0\nThe one where it failed was : v0.16.2. ",
    "mmmikeal": "Having the same issue in Safari with v0.18.0 . My guess is this is on Safari's end based on old open tickets, I did see one suggestion that said to create your own Auth header? Authorization-Fake-X: Bearerr blahblah and then check for that on the serverside?. ",
    "NickSynev": "@mmmikeal We added support for other name of Authorization header on the backend. That was \n a solution. And I guess this is not related to axios at all. This is specific case of safari. ",
    "Joaaofiilho": "Funny enough, that was my problem too. I just realize the mistake after your comment, thank you Mister @tiarebalbi , you were very useful ahahahahahaha. ",
    "castamir": "@ZEROKISEKI what was the issue?. @ZEROKISEKI what was the issue?. ",
    "szahn": "For cross origin requests, the server needs to set the \"Access-Control-Allow-Origin\" header. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin. ",
    "ralphking": "A browser sends an OPTIONS request before a POST request, essentially to check with the server that it's allowed to send the POST request.\nYou need a method in your server that catches OPTIONS requests, and responds with the correct headers as szahn has alluded to above (you need to make sure Access-Control-Allow-Methods is sent). If the right answer comes back (200), the browser follows up by sending the POST request.\n. A browser sends an OPTIONS request before a POST request, essentially to check with the server that it's allowed to send the POST request.\nYou need a method in your server that catches OPTIONS requests, and responds with the correct headers as szahn has alluded to above (you need to make sure Access-Control-Allow-Methods is sent). If the right answer comes back (200), the browser follows up by sending the POST request.\n. It's a bit difficult, as it's a POST request to an internal API, so can't put anything here. Code it below, it's pretty standard. Swapping back to 0.16.1 fixes the issue. I can only assume that forcing camel case is desired behaviour from 0.18.0 onwards, or that some default has changed?\nno fancy headers or options:\nexport const HTTP = axios.create({\n  baseURL: BASE_URL,\n  timeout: 50000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nStandard axios post request (wrapped in an extra promise as we handle all errors elsewhere). Anything until HTTP.post is fine when logged to console, however as soon as it's processed by Axios and  appears in the browser network tab some of the keys change to camel. An example being yAxisID becomes yAxisId. Obviously the latter is probably more correct, however it wasn't how our API was designed...\nexport const post = (path, data) => {\n  return new Promise((resolve, reject) => {\n    HTTP.post(`${path}`, data)\n      .then(response => {\n        resolve(response);\n      })\n      .catch(error => { reject(handleError(error)); });\n  });\n};\n. It's a bit difficult, as it's a POST request to an internal API, so can't put anything here. Code it below, it's pretty standard. Swapping back to 0.16.1 fixes the issue. I can only assume that forcing camel case is desired behaviour from 0.18.0 onwards, or that some default has changed?\nno fancy headers or options:\nexport const HTTP = axios.create({\n  baseURL: BASE_URL,\n  timeout: 50000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nStandard axios post request (wrapped in an extra promise as we handle all errors elsewhere). Anything until HTTP.post is fine when logged to console, however as soon as it's processed by Axios and  appears in the browser network tab some of the keys change to camel. An example being yAxisID becomes yAxisId. Obviously the latter is probably more correct, however it wasn't how our API was designed...\nexport const post = (path, data) => {\n  return new Promise((resolve, reject) => {\n    HTTP.post(`${path}`, data)\n      .then(response => {\n        resolve(response);\n      })\n      .catch(error => { reject(handleError(error)); });\n  });\n};\n. False alarm. False alarm. ",
    "Granddevv": "Thanks. It was not responsible for axios. Issue was in backend.. ",
    "chadams": "I'm getting this exact problem.. @nbcnc I figured it out, your making an electron app like me. seems you can only get the response.data as a stream in the main thread. What I did to fix this was add\n javascript\nipcRenderer.send(\"download\"); // in render thread\nthen in the main thread\n```javascript\napp.on(\"ready\", async () => {\nmainWindow = new BrowserWindow({\n    show: false,\n    width: 1024,\n    height: 728\n  });\n mainWindow.loadURL(file://${__dirname}/app.html);\nipcMain.on(\"download\", (event, arg) => {\n   // axios download code here\n });\n```\ngood luck. ",
    "bintoll": "I am getting this in simple node app. ",
    "melbahja": "Try\njs\naxios.defaults.params = \n{\n   name: 'value'\n}. ",
    "haithai": "The same issue with me !!!. The same issue with me !!!. ",
    "kheyse-oqton": "This PR should not be merged if https://github.com/axios/axios/pull/1479, which implements maxContentLength for browser, is merged instead.. ",
    "dinvlad": "Are there updates on when this fix will be merged?. Are there updates on when this fix will be merged?. ",
    "gregaton": "Same for a request that has been blocked by a CORS policy.. ",
    "andrewriveraj": "I suggest using a CORS Proxy https://github.com/Rob--W/cors-anywhere . ",
    "marswong": "#1440 works. ",
    "jaredscheib": "@hg-pyun is this able to be merged? I'm encountering this bug as well and would love to see it merged to be included in an upcoming release if possible. Thanks!. @hg-pyun It seems good to me! I don't have write access, so I can't approve :) Looks like this needs another approval from someone with write access.. ",
    "hg-pyun": "@jaredscheib I aprove. What about you~? . How about add clean up?\njavascript\n// Clean up request\nrequest = null;. @cctuan Got it. Thanks!. ",
    "boriskor": "what is the status of it? =). ",
    "arturslogins": "Is there any solution? . Workaround for this issue is adding https agent with all your certs: \naxios.create({\n      baseURL: 'https://baseurl.com',\n      httpsAgent: new https.Agent({\n        ca: fs.readFileSync(`${path}CA.pem`),\n        cert: fs.readFileSync(`${path}CERT.pem`),\n        key: fs.readFileSync(`${path}KEY.pem`),\n        rejectUnauthorized: false\n     }),. ",
    "ellis2323": "https://github.com/nodejs/node/issues/16196 ? what's your version of node ?. probably https://github.com/nodejs/node/issues/16196. probably https://github.com/nodejs/node/issues/16196. ",
    "jchook": "I don't think react-native has access to https:\n(node:19240) UnhandledPromiseRejectionWarning: Error: Unable to resolve module `https` from `path/to/api.js`: Module `https` does not exist in the Haste module map. ",
    "BeanWei": "Okay,it's means that the auth object  needs the keys must be username and password,right...?. ",
    "davyzhang": "For later googler the \nconfig should be returned as \nreturn {\n            headers: {},\n            method: config.method,\n            url: \"\"\n          };\nto avoid errors\nI think it should be officially supported because this will save a lot of time of repeating \"if\" statement. Especially many of them might scatter all over the place. ",
    "malykhinvi": "Try this approach:\ninstance.interceptors.request.use(config => {\n    /* some logic */\n   return {\n     ...config,\n     cancelToken: new CancelToken((cancel) => cancel('Cancel repeated request'))\n   };\n});. ",
    "samuelmattos": "Thanks, did i have same problems with PHP and twig.\nAnd solved implemented the function:\n```\nfunction getFormData($form) {\n    var unindexed_array = $form.serializeArray();\n    var formdata = new FormData();\n    $.map(unindexed_array, function (n, i) {\n        formdata.append(n['name'], n['value']);\n    });\n    return formdata;\n}\nvar formData = getFormData($(\"#cad_evolucao\"));\naxios.post(url, formData);\n```\n. ",
    "loclamor": "I had just now the same problem (cannot get axios post data into php $_POST) and I found the workaround (here https://github.com/axios/axios/issues/1195#issuecomment-356143270)  to use file_get_contents('php://input') wich work !\n. ",
    "someden": "I have the same issue. Example:\njavascript\naxios.get('/file', { responseType: 'arraybuffer' })\n  .catch(function (error) {\n    console.log(error.response.data); // ArrayBuffer(61797)\n    // but it should be a simple object { message: '...', trace: [...], ... }\n  });\nAny ideas how to get/set proper responseType for errors?. ",
    "lonnylot": "I have the same experience with Safari. \naxios version 0.18.0\nSafari Version 11.1 (13605.1.33.1.4). ",
    "JonasJonny": "@mzabriskie @nickuraltsev \nI lost two days with this \"issue\" (Axios version 0.16.2) cause it is a feature and not a bug :D. \nMy app is using statusText: \"OK\" but in Chrome 49+ is statusText: \"\" empty. \nActually older versions (<= v.48 \"OK\") looks good. Opera 36+ empty, Safari 10.1.1 empty.\nImportant to know the problem is only on HTTPS. Http is working fine everywhere.\nAfter deep searching it could be all related to:\n- https://github.com/whatwg/fetch/issues/599\n- https://stackoverflow.com/questions/41632077/why-is-the-statustext-of-my-xhr-empty\n- https://stackoverflow.com/questions/42401795/with-http-2-only-xmlhttprequest-responses-statustext-property-seems-to-be-us. ",
    "Mostafa123sh": "when I run it  in console show me this error:\nFailed to load resource: the server responded with a status of 500 (Internal Server Error)\napp.js:11884 Uncaught (in promise) Error: Request failed with status code 500\n    at createError (app.js:11884)\n    at settle (app.js:12543)\n    at XMLHttpRequest.handleLoad (app.js:11758). I solve my problem\n. ",
    "arthurmmedeiros": "Hi @coolgod ,\nFirst of all, thank you so much for the help.\nYou were right, the problem was in the server. I didn't consider that possibility before because even when the connection was closed the application kept processing the data. \nHere is what I did to solve the issue:\nIn the webconfig file in my project I simply added a parameter called \"requestTimeout\" and set it to \"00:50:00\".\n<aspNetCore requestTimeout=\"00:50:00\" ..... />\nThere is one more thing, I don't know why, but I was only able to test it after publishing the application to IIS. The test does not work when debbuging the application.\nAgain,\nThank you so much @coolgod !. ",
    "philjoseph": "You should mark this issue as resolved, shouldn't you ?. ",
    "ziszo": "Adding timeout in the config won't work.\nUse the following instead:\naxios.defaults.timeout = 180000;. @sagomezza:\nYou have to set it for every instance of axios.\nIn the case below, buildAxios() is called for each request.\npublic yourAPIcall(whateverData: any): AxiosPromise<Token> {\n    this.http = this.buildAxios();\n    const path = '/apiService';\n    const config: AxiosRequestConfig = {\n      ...axiosConfig,\n      ...{\n        url: path,\n        method: 'POST',\n        data: whateverData,\n      },\n    };\n    return this.http.request<Token>(config);\n}\nprivate buildAxios(): AxiosInstance {\n    const x = axios.create(this.axiosInfo);\n    x.defaults.timeout = 180000;\n    return x;\n}\nP.S. Above code is typescript. Don't confuse with your code.\nBtw, you only need the buildAxios() snippet.. ",
    "sagomezza": "@ziszo  this works in general or I have to use it with every single request? . ",
    "ouzhou": "@Marcholio yes, use axios.defaults.timeout = 3000;\nif you dont set this value, chrome will show networkerror after long time. ",
    "59023g": "To fix, I realized my Express server was not accepting JSON post bodies:\n```\nconst express = require( 'express' )\nconst server = express()\nserver.use( express.json() )\n```\nSee also: https://stackoverflow.com/questions/10005939/how-do-i-consume-the-json-post-data-in-an-express-application. ",
    "litt1e-p": "same question. ",
    "kucix": "Same here\nHow do i get status == 401?\nIn catch block is in argument only config and empty request (XMLHttpRequest)... response is undefined\nIn network panel i can see status and response body (json) from server, but axios discards it. ",
    "hutsi": "same here. ",
    "evazc": "same here. ",
    "CreativeGP": "You entrust users to do it?\nSo, how about improving the code of this repository with it? . @r3wt Thank you for answering.\nI see. There are certainly some reason to use var even now.\nI've wandered in search for that.. There seems to be no respond for the above comment?\nIt passed a month after last comment, and I don't want this issue be open and silent.\nSo I'll set this closed.. ",
    "r3wt": "@CreativeGP it would just be compiled back to var anyway for compatibility reasons. also, there are instances where const and let won't work, and only var will. here's an example:\nhttps://github.com/r3wt/express-map/blob/master/index.js#L17\nanother common case is variables holding a primitive value that need to be \"globally\" scoped but modifiable from any child scope. you can't use const or let for that. additionally, you can't declare const or let inside of a switch statement.. @chinesedfan no, let is block scoped, so its only available in its scope and any child scopes, unlike var.\njs\nvar age = 100;\nif(age > 12) {\n  let dogYears = age * 7;\n  console.log(`You are ${dogYears} dog years old!`);\n}\nconsole.log(dogYears); // error because it's scoped only to the above block\nconst is also block/function scoped, but it is hoisted. therefore declaring it inside of a switch is undefined behavior. in your example, add another case in your switch statement with the same const being declared, and it will crash with an error.. ",
    "chinesedfan": "\nanother common case is variables holding a primitive value that need to be \"globally\" scoped but modifiable from any child scope. you can't use const or let for that.\n\n@r3wt Sorry, I still don't very understand. Usually, child scope can visit variables in the parent context. Or can you simplify your example codes to show the point?\n(function() {\n    let a = 1;\n    (function() {\n        console.log(a); // 1\n    })();\n})();\n\nadditionally, you can't declare const or let inside of a switch statement.\n\nConsider following codes, is there any problem? I ran in Node.js 8.9.0.\n(function(n) {\n    switch (n) {\n    case 1:\n        let x = 2;\n        const y = 3;\n        console.log(x, y); // 2 3\n        break;\n    }\n})(1);. @r3wt Thanks for your explanations. I know differences between var and let/const, especially for scope hoisting. Forgive me to discuss a little more in this issue.\n\nconst is also block/function scoped, but it is hoisted.\n\nI don't think const is hoisted. Only var can be hoisted, which is the biggest difference with let/const. In your previous example, replacing let with const will result in an error, too.\n\nadd another case in your switch statement with the same const being declared, and it will crash with an error.\n\nThat's right. Wrapping each case with a block is a workaround.\n\nhttps://github.com/r3wt/express-map/blob/master/index.js#L17\n\nFor this example, replacing var with let should still be able to work. Please correct me if I missed something. :)\nIn summary, since ES6 provides let/const, we should always try to use them. The var scope hoisting is really easy to be confusing.\n . @r3wt Thanks for your explanations. I know differences between var and let/const, especially for scope hoisting. Forgive me to discuss a little more in this issue.\n\nconst is also block/function scoped, but it is hoisted.\n\nI don't think const is hoisted. Only var can be hoisted, which is the biggest difference with let/const. In your previous example, replacing let with const will result in an error, too.\n\nadd another case in your switch statement with the same const being declared, and it will crash with an error.\n\nThat's right. Wrapping each case with a block is a workaround.\n\nhttps://github.com/r3wt/express-map/blob/master/index.js#L17\n\nFor this example, replacing var with let should still be able to work. Please correct me if I missed something. :)\nIn summary, since ES6 provides let/const, we should always try to use them. The var scope hoisting is really easy to be confusing.\n . It's a tradeoff between performance with convenience. Compared them directly are not fair. For example, assembly codes should be much \"performance better\" than C/C++/Javascript, but it's hard for people to write. In fact,  axios is a wrapper of http. But if you really care about performance, you can try to use native modules without any other libraries' help.. We suggest users ask similar questions in stackoverflow, instead of Github issues. In fact, you can learn almost everything about CORS here. Good luck!. It seems like a contradiction.\n\nWithout contributions, @emilyemorehouse can't distinguish helpful people and grant permissions.\nWithout permissions, people usually won't start to contribute.\n\nI suggest everyone try to subscribe as code helpers first. If we can persist in triaging issues or sending pull requests, @emilyemorehouse will be more glad to see. And one day, you will be a maintainer naturally.. Yes, onUploadProgress is based on xhr and not supported by all browsers. You can search other packages for showing upload progress in Node.js, like progress-stream.. So it is a problem of your server. Check out why html data is returned.. > There is no library that could prevent the redirect. What you need to do on your server-side is distinguish between XHR requests and normal browser navigation requests\n@abhijithvijayan Check https://github.com/axios/axios/issues/932#issuecomment-307390761.. It is a bug of axios-mock-adapter, https://github.com/ctimmerm/axios-mock-adapter/issues/185.. @Ethan0007 You should set Access-Control-Request-Headers: x-request-width. Because you used a customized header x-request-width.. @Ethan0007 Server side. You can also learn more about CORS here. Simple ways to remember them are,\n\nrequests headers belong to client side, and usually include request keyword\nresponse headers belong to server side, and usually include allow keyword. > is there any short loggable data (summary of request and response)?\n\nLogging is out of the scope of axios. But you can find some useful logger here or write by yourself.\n\nhow can i figure out which error is thrown by axios? is there any flag for error objects?\n\nerror.isAxiosError. Refer to the source file, enhanceError.js, of axios.. Have you printed by console.log? If debugging with Chrome, it is normal that can't see variables belong to upper context. Refer stackoverflow.com.. You really returned nothing from ajax.interceptors.response. See the branch if ($refresh).. @firmantr3 Because in Chrome dev tools, the token is right. It seems more like a backend problem. Sorry I am not a Laravel expert. Maybe you can replace the token with a simple word and try to find out the cause.. Played with frontend codes of your project with a mock server. Everything works well.\nSorry I don't familiar with Django but I think it is a backend problem. You should debug that and find why the method was changed.. > Reason: missing token \u2018x-auth\u2019 in CORS header \u2018Access-Control-Allow-Headers\u2019 from CORS preflight channel\nIt should not a bug of axios. I suggest you check why http://127.0.0.1/aftab/inventory3/v1/repository/all didn't return x-auth in FF, but return in Chrome. Maybe localstorage data are different.. Looks like due to ATS(App Transport Security). Because your endpoint(http://api.zlhuiyun.com/statis/statistic/index) doesn't support HTTPS.. > For some odd reason, it works whenever I try to use the qs package to stringify the data and config. However, the x-authorization header would not be part of the post header.\nOnly stringify the data, but don't stringify the config. That's why your header is failed to be set.\n\nI have tried adding Content-Type to application/json, but it results in the same console.log as above.\n\nMaybe the server only accepts application/x-www-form-urlencoded. That's why it works when you use qs.. Failed to reproduce. The first response is slow(http code 200), but not 307. You can compare request headers of axios by Chrome, with others like jQuery/XHR, and check your server codes.. > You can compare request headers of axios by Chrome, with others like jQuery/XHR\nHave you tried that? At last, we suggest users ask similar questions in stackoverflow, instead of Github issues. Good luck!. How about checking error.isAxiosError directly?. @ruscon I think you can use type assertion.\n```\nimport axios, {AxiosError} from 'axios';\ntry {\n  axios.get('...')\n}\ncatch(err) {\n  if ((err).isAxiosError) { // check to make sure type assertion is right\n      const e = error;\n      console.error(e.response);\n  }\n}\n```. > But this is a bad approach for both js and ts.\n@ruscon I agree a bit in ts, but not in js. There are so many duck types in js. I think that's why ts designs type assertion. Your AxiosException approach is a standard but heavy way. If someday axios were totally refactored, I will stand in your side. Good luck!. @ruscon heavy means extra changes. I am not a native speaker and don't know whether it has strange meanings in English.. Show your codes, instead of descriptions. You tried a lot of things. Make a table to conclude every case, or it's hard to help you.. Sending error out will make other interceptors know more about the reason.. here. here. ",
    "qidaneix": "meet the same problem. Are there any solutions?. @zcei May I ask when it will release?. @zcei May I ask when it will release?. ",
    "m-petkovic": "Is there any update on this issue, will there be a release in the near future, like month-two?. ",
    "hartmut-co-uk": "+1. ",
    "nonameolsson": "\u2764\ufe0f  if this could be released now. \u2764\ufe0f  if this could be released now. ",
    "izayl": "\nMaybe something like this?\nts\ninterface AxiosInstance {\n  request<T = any, R = AxiosResponse<T>> (config: AxiosRequestConfig): Promise<R>;\n}\nYou'd call it like this:\nts\naxios.request<User, string>({\n  method: 'get',\n  url: '/user?id=12345'\n})\n  .then((foo: string) => { // <-- you could leave out the type annotation here, it's inferred\n    console.log(foo)\n  })\nJust tried that out locally and seems to do what you're looking for.\nMaybe I can get a PR together in the evening to update that for all the methods.\n\nUser(T, the first generic param) seems not used, if I want to use custom return types, I looks strange \ud83d\ude15\nts\naxios.request<void, string>({\n    ...\n}) \nusing void may be more clear.. ",
    "billsaysthis": "@emilyemorehouse Not to sound ungrateful but 0.19-beta has been open for three months now, is there an ETA for a GA release? Our project has an issue which requires one of these fixes. I asked this in the Gitter channel but doesn't seem like maintainers respond over there.... @emilyemorehouse Not to sound ungrateful but 0.19-beta has been open for three months now, is there an ETA for a GA release? Our project has an issue which requires one of these fixes. I asked this in the Gitter channel but doesn't seem like maintainers respond over there.... There's already a project milestone for 0.19 but the tickets listed haven't seen any change for several months.. ",
    "Army-U": "I override  AxiosResponse in my axios.d.ts:\n```js\nimport axios from 'axios'\ndeclare module 'axios' {\n  export interface AxiosResponse extends Promise {}\n}\n```. ",
    "paolostyle": "Bumping this issue. It works... okay when I just copied AxiosInstance definition to local typings, but the implemented solution is very verbose in my opinion, unless I'm doing something wrong (not a Typescript expert). Since I'm using a separate axios instance created with axios.create and using this interceptor:\nAxiosClient.interceptors.response.use(\n  response => response && response.data,\n  error => error && error.response && error.response.data\n);\nwhere response.data always has this form:\nexport interface APIResponse<T = any> {\n  data: T;\n  message: string;\n  status: boolean;\n}\nit seems like I have to use AxiosClient.post like this:\nAxiosClient.post<EndpointAPIResponse, APIResponse<EndpointAPIResponse>>('/endpoint', { someData });\nto have proper types in .then. Am I doing something wrong here or should it really be THAT verbose? If not, it would be much better if I could just pass expected response schema when creating the instance, but I can't make it work:\n```\nexport interface AxiosInstance {\n  (config: AxiosRequestConfig): Promise>;\n  (url: string, config?: AxiosRequestConfig): Promise>;\n  defaults: AxiosRequestConfig;\n  interceptors: {\n    request: AxiosInterceptorManager;\n    response: AxiosInterceptorManager;\n  };\n  getUri(config?: AxiosRequestConfig): string;\n  request(config: AxiosRequestConfig): Promise>;\n  get(url: string, config?: AxiosRequestConfig): Promise>;\n  delete(url: string, config?: AxiosRequestConfig): Promise>;\n  head(url: string, config?: AxiosRequestConfig): Promise>;\n  post(url: string, data?: any, config?: AxiosRequestConfig): Promise>;\n  put(url: string, data?: any, config?: AxiosRequestConfig): Promise>;\n  patch(url: string, data?: any, config?: AxiosRequestConfig): Promise>;\n}\nexport interface AxiosStatic extends AxiosInstance {\n  create(config?: AxiosRequestConfig): AxiosInstance;\n  Cancel: CancelStatic;\n  CancelToken: CancelTokenStatic;\n  isCancel(value: any): boolean;\n  all(values: (T | Promise)[]): Promise;\n  spread(callback: (...args: T[]) => R): (array: T[]) => R;\n}\n```\nIt works fine with axios.create() without a generic type or just axios, but if I pass my interface like this:\nconst AxiosClient = axios.create<APIResponse>({\n  // ...\n});\nand then use it like this: AxiosClient.post<string>('/endpoint').then(value => value.data), value.data has type... T. Plus the version above only works if I actually replace these typings in node_modules, otherwise it gets totally mixed up and I end up with some total disaster. Could anyone help me out with this?\nEdit: okay, I guess it won't work because it's not possible to use generics in that way (so R<T> when R is a generic type is not correct syntax but I guess WebStorm for some reason didn't highlight it for me); https://github.com/Microsoft/TypeScript/issues/1213 this, I assume, would solve it but no idea if it ever gets implemented.. ",
    "lenghan1991": "I have the same problem, any solution?. I have the same problem, any solution?. The backend service is based on HTTPS. I correct it  and succeed. However, the stack is quite confusing.. The backend service is based on HTTPS. I correct it  and succeed. However, the stack is quite confusing.. ",
    "ViliusLuneckas": "Hello, any updates on this one?. ",
    "josechoy": "hi, I was facing the same issue in my project recently where I have used laravel as my backend.\naxios.post('api/endpoint/', { \n    // data \n});\nThe code snippet above will actually return the response for an HTTP get request to my API endpoint. The workaround I found is to remove the trailing slash in the url, so it will be api/endpoint, then it worked as expected.. hi, I was facing the same issue in my project recently where I have used laravel as my backend.\naxios.post('api/endpoint/', { \n    // data \n});\nThe code snippet above will actually return the response for an HTTP get request to my API endpoint. The workaround I found is to remove the trailing slash in the url, so it will be api/endpoint, then it worked as expected.. ",
    "carvalhoviniciusluiz": "but the local ip does not begin with 0. As it is  construction, the project is raised in the local address (localhost or 127.0.0.1)\nthis message is not making sense because of this. ",
    "mapleeit": "Hi @carvalhoviniciusluiz , I encountered this problem today. By doing debug, I found some reason may cause this problem.\nIt's about your system bash/zsh proxy settings\nbash\nexport https_proxy=localhost:8888\nexport http_proxy=localhost:8888\naxios will automatically detect your default proxys and use them. \naxios/lib/adapters/http.js\n```javascript\nvar proxy = config.proxy;\n    if (!proxy) {\n      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n      if (proxyUrl) {\n        var parsedProxyUrl = url.parse(proxyUrl);\n        proxy = {\n          host: parsedProxyUrl.hostname,\n          port: parsedProxyUrl.port\n        };\n    if (parsedProxyUrl.auth) {\n      var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n      proxy.auth = {\n        username: proxyUrlAuth[0],\n        password: proxyUrlAuth[1]\n      };\n    }\n  }\n}\n\n```\nthe result of url.parse('localhost:8888'):\n\nget the wrong hostname\nThen your dns will find this hostname, as a result, it returns 0.0.xx.xxx, which throw errors.\nso just remove https_proxy and http_proxy and restart your terminal. ",
    "GabrieleRomeo": "\nso just remove https_proxy and http_proxy and restart your terminal\n\nFor the sake of simplicity, you can remove them in the following way:\nnpm config delete http-proxy\nnpm config delete https-proxy\n. ",
    "yey": "so just request http:// 0.0.0.0:1337/your/path\nthen url will be right. ",
    "ShawnCholeva": "@mqliutie Hey just looking at this, that error callback on the promise returns looks suspicious.  Wouldn't it rather be this?\naxios.put(url,data)\n.then( res => {\n    console.log(res);\n})\n.catch( err => {\n    console.log(err);\n}). @mqliutie Hey just looking at this, that error callback on the promise returns looks suspicious.  Wouldn't it rather be this?\naxios.put(url,data)\n.then( res => {\n    console.log(res);\n})\n.catch( err => {\n    console.log(err);\n}). ",
    "fairps": "Thanks so much for the response.  That's a great solution!  I'd lean more towards a console.error personally though.  Any chance this could get officially included?  Have you created a PR?. ",
    "jjeejj": "you can download 0.18.0 version on releases tab or exec npm install asiox \nsee the Source code to check it. ",
    "JaakkoL": "I came across this same thing when trying to figure out why Googleapis library is unable to fix character encoding when fetching files from Google Drive. It uses Axios for making http requests and it assumes that the response encoding can be passed as a config parameter.\nAfter doing some digging, I realised that release 0.18.0 has fixed encoding to utf-8 while https://github.com/axios/axios/pull/869 PR has already solved this issue.\nAny chance on getting a release with the aforementioned PR included?. ",
    "lukepolo": "@palakvasani What ddi you end up finding ? . ",
    "rikuayanokozy": "https://github.com/axios/axios/commit/82030ae054ba10bbd25ef00b304990632780f11d fixed this, the original deepMerge still kept ref to embedded objects, and the commit fixed it.\nWe need a new version which includes recent fixes, see https://github.com/axios/axios/issues/1519.\n@emilyemorehouse @nickuraltsev can you release a new version use master codebase?. @axetroy how about making a separate package like axios-mini-program?. I'd like to roll out a fix to solve #1718 next week, still need more test to release 0.19.. @zcei \nGreat point. Can we just make config.userData: any to store user data.\nBut since it's a regression, we still need to fix it or put it into breaking changes since it will break some old codes.. ",
    "luisfuertes": "Same issue with \"axios\": \"^0.19.0-beta.1\"\nFailed to load https://api.urlmeta.org/?url=https://www.youtube.com/watch?v=LBLsjOHqst0: Request header field Access-Control-Allow-Headers is not allowed by Access-Control-Allow-Headers in preflight response.\nWith this line it works: delete axios.defaults.headers.common['OAuth-Token'], but if i do login, but continue xd. ",
    "fqborges": "As a workaround, when you create an instance passing the deep object hierarchy it works.\njs\nconst apiAxios = axios.create({\n  headers: {\n    common: {},\n  },\n});. Having the same issue here.\nCreating a custom instance for use on api calls here:\n``` js\nimport axios from \"axios\";\nconst apiAxios = axios.create();\nexport function configureApiClient({ apiBaseUrl, authToken }) {\n  apiAxios.defaults.baseURL = apiBaseUrl;\n  apiAxios.defaults.headers.common[\"Authorization\"] = Bearer ${authToken};\n}\nexport default apiAxios;\n```\nSomewhere else when making a specific call using the global axios:\njs\nimport axios from \"axios\";\nexport function getSomething({ authToken }) {\n  var headers = { AuthToken: authToken };\n  return dispatch =>\n    axios\n      .get(url, { headers })\n      .then(function(response) {\n        // handle\n      })\n      .catch(function() {\n        // handle\n      });\n} \nIt fails with CORS not allowing 'Authorization' header. Inspecting the call I can see axios is including the 'Authorization' header from the apiAxios instance.. As a workaround, when you create an instance passing the deep object hierarchy it works.\njs\nconst apiAxios = axios.create({\n  headers: {\n    common: {},\n  },\n});. ",
    "patotoma": "works for me in 0.19.0-beta.1. works for me in 0.19.0-beta.1. ",
    "jakobdo": "I had the same problem. Setting a custom header in axios global and setting another custom header on the instance. But the header still used the one from the global.\nUsing the \"trick\" from @fqborges works.. ",
    "krazyjakee": "@jakobdo was this issue still with 0.19.0-beta.1?. @jakobdo was this issue still with 0.19.0-beta.1?. ",
    "doowb": "I was having this issue (Authorization header was being used in new instances from .create()) and I updated to 0.19.0-beta.1 for the fix. I can verify that the fix works for me in Node.js v10.14.2.. ",
    "VadymGidulian": "0.19.0-beta.1 works for me too\njs\naxios.defaults.headers        === axios.create().defaults.headers        // false\naxios.defaults.headers.common === axios.create().defaults.headers.common // false\n@fqborges's method works, but I'd use it like this:\njs\naxios.create({\n    headers: {\n        common: {...axios.defaults.headers.common}\n    }\n})\nI believe this is closer to the original intention. ",
    "Ewocker": "Also, I might be misunderstanding something, but if you go to https://github.com/axios/axios/blob/master/dist/axios.js and find \"getDefaultAdapter\"\nfunction getDefaultAdapter() {\n      var adapter;\n      if (typeof XMLHttpRequest !== 'undefined') {\n        // For browsers use XHR adapter\n        adapter = __webpack_require__(8);\n      } else if (typeof process !== 'undefined') {\n        // For node use HTTP adapter\n        adapter = __webpack_require__(8);\n      }\n      return adapter;\n    }\nSeems like no matter what condition, the same module is being used... (look for \"/ 8 /\" it is the packaged xhr.js here) again it might just have been me out of my mind but I am not sure what is going on here.\nPlease explain me if I am thinking wrong.. Also, I might be misunderstanding something, but if you go to https://github.com/axios/axios/blob/master/dist/axios.js and find \"getDefaultAdapter\"\nfunction getDefaultAdapter() {\n      var adapter;\n      if (typeof XMLHttpRequest !== 'undefined') {\n        // For browsers use XHR adapter\n        adapter = __webpack_require__(8);\n      } else if (typeof process !== 'undefined') {\n        // For node use HTTP adapter\n        adapter = __webpack_require__(8);\n      }\n      return adapter;\n    }\nSeems like no matter what condition, the same module is being used... (look for \"/ 8 /\" it is the packaged xhr.js here) again it might just have been me out of my mind but I am not sure what is going on here.\nPlease explain me if I am thinking wrong.. #456 Find similar post. #456 Find similar post. ",
    "Worie": "was it resolved somehow? @Ewocker . ",
    "huy-lv": "Same problem :(. Same problem :(. @robmcguinness Yes, it's application/json. @robmcguinness Yes, it's application/json. @OpenGG sorry for late response, what you need here :D \nhttps://1drv.ms/t/s!AnakDtCf8CG5hIgn2Hemy6zanFi50Q. @OpenGG sorry for late response, what you need here :D \nhttps://1drv.ms/t/s!AnakDtCf8CG5hIgn2Hemy6zanFi50Q. i know, this problem does not happen all the time, it's about 1-2 times each 10 requests (the same API, same response). i know, this problem does not happen all the time, it's about 1-2 times each 10 requests (the same API, same response). ",
    "msforest": "It maybe nothing to this. test that case is in node v6.x.  today, i test no problem when use v8.9. ",
    "CoreyCole": "Feel free to close this as I'm sure it's not an axios issue, I'm getting the same ENOTFOUND error with request-promise-native. My problem was the same as #1418 as my requests were running in jest. ",
    "varHarrie": "add declarations .d.ts, see global-augmentation.. ",
    "westbrma": "@varHarrie thank you for this, it feels like a workaround so I will leave the issue open.. ",
    "Kelanor": "Same here too. I can't catch this error. It just crashes node application\n axios version: v0.18.0\n Environment: node v8.11.3, debian 9. ",
    "guitar9": "it think i have the same problem...\nlet axiosConfig = {\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            \"Access-Control-Allow-Origin\": \"*\",\n        }\n      };\n      axios.post(\"url\", data,axiosConfig).then((response)=>{\n    })\ni want that the Content Type application/json; charset=utf-8 is but it is text/html; charset=iso-8859-1. ",
    "andrew-templeton": "https://github.com/axios/axios/issues/755\nThe maintainer has indicated they do not intend to permit us to explicitly set it.\nThis is unacceptable to me. Some of us are making requests to APIs we do not fully control. I need to talk to a JSON API that only sends JSON if you send Content-Type: application/json, even if you set Accept: application/json (the right way).\nI cannot use normal axios unless I get to choose, and it's kind of ridiculous that an HTTP library not only doesn't let you set a header you want to set, but also silently removes an explicitly configured header in an undocumented manner.\nHere's their test:\nhttps://github.com/axios/axios/blob/b8f6f5049cf3da8126a184b6b270316402b5b374/test/specs/headers.spec.js#L72\nHere is the source code that does this: \nhttps://github.com/axios/axios/blob/master/lib/adapters/xhr.js#L133-L135\nIf I submit a PR to remove this behavior, I am fairly sure it will be rejected.. Sorry, I should have been clearer - someone else reported this EXACT thing and the maintainer closed it as \"Won't Fix\". -> #755 \nThey're not going to fix it. Also, this isn't going to work for your GET requests, if you have any (which is the problem I had with this).\nHere's a fork with only this piece changed: \nhttps://github.com/andrew-templeton/axios\nand the module is deployed here: \nhttps://www.npmjs.com/package/aaxios\n(note there's 2 A's in front).\nI'll open a pull to get this behavior removed from axios, but it's less of a \"they'll see it and fix it!\" and more \"they explicitly have code and a test case to prevent using undefined and it is intentional\". \nUse aaxios@0.18.1 if you want to have the same exact module just with this behavior changed, I guess.. @RikkiGibson Check my last comment for an alternative until they decide to change the behavior, if ever. It's 0.18.0 with just this change.\nMind you, the null is great for posts, but will NOT work for CORS GETs which need to explicitly pass Content-Type (which was my use case for making my aaxios fork available.. ",
    "endlessbest": "check empty data and replace with null is a quick fix. ",
    "aihaibo": "axios is base on promise, when axios.get(...) method has results, the state will be solidify.  so when you want diffrent results, use axios.get('random numbers api') twice or more.. ",
    "savioserra": "Hi, @bnbarak . Does axios.create help you?\n```javascript\nconst api = axios.create({ baseURL: 'random numbers api url' });\napi.get().then(res => console.log(res.data));\napi.get().then(res => console.log(res.data));\nOr even better:javascript\nconst api = axios.create({ baseURL: 'actual base url' });\napi.get('/random number endpoint').then(res => console.log(res.data));\n```. Seems like your endpoint is on port 59288 in the first example. In the second one, you explicitly changed the port to 33333, and got a 404 (not found, which seems right to me).\nI would recommend you to make both requests via curl and share the results with us.. Hi. If just setting a delay solve your problem, then you should check lodash's delay.\nOther solution that may help you is to make the refresh token function async and wait for it's result.. @ChadTaljaardt :( Can you share your code? What about the second solution?. ",
    "foolbirds": "close. ",
    "byr-gdp": "I also met this question.... ",
    "gillib": "This is very important to us as well. but please add this to http adapter as well as xhr. ",
    "lundn": "Would be very nice to have!. Would be very nice to have!. We are experiencing something similar to this.\nSome Axios requests gets logged as ECONNABORTED and the message that its timed out. However, looking at the API logs, the request responded way before the set timeout.. ",
    "wxcchdStar": "I have the similar issue. On Android 4.4.4\uff0cwhen response body is too big, response body will cut the content and JSON.parse(response) will occur the SyntaxError: Unexpected token i in JSON at position.  I print the request body, and this content like this: {\"id\":1,\"name\":\"\"isRequired\":1}, the content after name lose the value\",.  The complete content should be {\"id\":1,\"name\":\"value\",\"isRequired\":1}\nI also set maxContentLength: Number.MAX_VALUE, but it's not work. \nI using react native v0.55.4 and axioa v0.18.0.. ",
    "christopherfujino": "I'm also curious: does adopting axios mean punting IE support? I just need 11.... ",
    "allayli": "I check it on IE. It works fine if I add promise polyfill.. ",
    "ddtch": "yeah very confusing. Could we get some explanations. ",
    "muzi131313": "I use bluebird as promise polyfill, and fix some error in ie9, publish as a new package, address was here: axios-ie\u3002axios team decide not to support ie9 from 0.18.0 version\u3002\n\ncommit was here, go. ",
    "kuma-guy": "@Zhang-Yida Is this solved? I'm in the same situation. @Zhang-Yida Is this solved? I'm in the same situation. ",
    "agardou": "I agree, send dates forced with UTC timezone lost precious information on API client timezone. ",
    "iamdey": "cf. https://github.com/CaliOpen/Caliopen/pull/927. ",
    "no23reason": "It could be useful if the types you are adding were exported as well.. ",
    "jeromemalot": "Hello @Tarasovych ,\nI think you need to indicate whether or not the response to the request can be exposed to the page.\nCould you try to add the following middleware on your Express backend API (sub2.local).\napp.use(function(req, res, next) {\n  res.header('Access-Control-Allow-Credentials', true);\n  res.header('Access-Control-Allow-Origin', req.headers.origin);\n  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,UPDATE,OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'X-Requested-With, X-HTTP-Method-Override, Content-Type, Accept');\n  next();\n});\nOnce in production, don't forget to modify req.headers.origin to the exact website you wish to allow to connect.\n. I'm also using laravel-cors for handling cross-domain requests. At the moment all methods are allowed, credentials are true.\n=>Did you also allowed origins? (and headers to anticipate issues)\n'allowedOrigins' => ['*'],\n'allowedHeaders' => ['Content-Type', 'X-Requested-With']\nIf backend is able to send Cookie but Vue app doesn't accept them, there might be a problem not with Vue but with backend?\n=>Agree hence my answer, your backend needs to indicate whether or not the response is exposed. Technically the blocker is your browser (if you test it on Postman, I think it should works... good test to complete btw). That's why your backend needs to play with your browser's rules.. ... weird. If Insomnia works well (I mean you receive cookies) and you can't see your cookies on your browser, my 2cents is that we should looking for a backend fix. I'm not familiar with Laravel but I would try doing some fine tuning with the cors config. Sorry can't help further :(. ",
    "Tarasovych": "@jeromemalot Hello\nI'm using Laravel as backend API.\nI'm also using laravel-cors for handling cross-domain requests. At the moment all methods are allowed, credentials are true.\nIf backend is able to send Cookie but Vue app doesn't accept them, there might be a problem not with Vue but with backend?. @jeromemalot yes, I've allowed origins and all headers are allowed too. My current cors config:\n'supportsCredentials' => true,\n    'allowedOrigins' => ['*'],\n    'allowedOriginsPatterns' => [],\n    'allowedHeaders' => ['*'],\n    'allowedMethods' => ['*'],\n    'exposedHeaders' => [],\n    'maxAge' => 0,\nI've tested in Postamn analog (Insomnia) - everything was good.... I've found an answer on stack about the problem that Chrome won't set Cookie if there is port in domain url. Can I remove port from domain url? I'm using vue-cli.. @Mont4 can't answer unequivocally. Sometimes I have just restarted server and it worked...\nAnd also your request might have withCredentials = true flag. Can be various implementations of this, depending on what tool do you use to make AJAX requests.. Note that withCredentials flag might be not in the data parameter:\njs\n  axios.post('domain.com', {\n    //data parameter\n    withCredentials: true, //wrong\n    name: 'name',\n    password: 'password',\n  })\nbut\njs\n  axios.post('domain.com', {\n    name: 'name',\n    password: 'password'\n  }, {\n    //AxiosRequestConfig parameter\n    withCredentials: true //correct\n  }). ",
    "Mont4": "@Tarasovych did you find a solution for it?. ",
    "sajadreshi": "I faced the same issue in chrome. My url is localhost:3000. Looks like chrome doesn't like when port is there in the url. However, I tested with Forfox and it worked fine.. ",
    "aquamme": "\"sample2.0com\" isn't a valid identifier so you have to use bracket notation. \"sample2.0com\" isn't a valid identifier so you have to use bracket notation. ",
    "totalamd": "But if we fetch something in function(config) {} and it fails its never gets into function(error) {} by the .then(response, reject) rules, doesn't it? Only if it's fails in .then() in .then().catch() construction.. ",
    "fapspirit": "@zcei hello!\nI just created a package axios-opentracing, where I need to know about any errors in request, but stucked with this issue. Any thoughts about this?. ",
    "msouidi309": "Try using \nheaders: {\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': '*',\n            'Access-Control-Allow-Headers': '*',\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n}\nto see if it's a header problem. Try using \nheaders: {\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': '*',\n            'Access-Control-Allow-Headers': '*',\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n}\nto see if it's a header problem. The only solution i see is to set\nemulateJSON: true\nbetween baseURL and headers for example. Hi, what do you want to do exactly ?\nWhat do you mean by client side ? You want to display data fetched with a GET request ?. Hi, what do you want to do exactly ?\nWhat do you mean by client side ? You want to display data fetched with a GET request ?. You can use axios for example\nhttps://github.com/axios/axios\nto get, post, put, delete data from your client side.\nFor example, to get data :\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  })\nwill get the user with the ID 12345\nI don't know if it's exactly what you want. Have you tried with CORS headers ?\nPlease send the entire error, and maybe a screen of the response headers (Browser). For example : \naxios({\n    url:'https://api.cloudinary.com/v1_1/abcde/upload',\n    method:'POST',\n    headers:{\n     'Access-Control-Allow-Origin': '*',\n     'Access-Control-Allow-Methods': 'POST, GET, PUT, OPTIONS, DELETE',\n     'Access-Control-Allow-Headers': 'Access-Control-Allow-Methods, Access-Control-Allow-Origin, Origin, Accept, Content-Type',\n     'Accept': 'application/x-www-form-urlencoded',\n     'Content-Type':'application/x-www-form-urlencoded'\n    },\n    data:formData\n}). You correctly entered the Cloudinary API KEY ? \nYou displayed something on the catch ??. Take a loot at : https://github.com/facebook/react-native/issues/10404. Hi, the URL must be enclosed in quotation marks.\naxios.get(\"api/tasks/${params.id || 0}/permissions\" .... Hi, how do you make your GET request ?. I just tested the code in a get request, and it works, I think it's a problem with your request. How do you call it ? Here is an example :\naxios.get('http://localhost:8082/files', {\n      onDownloadProgress: function(progressEvent) {\n        console.log('download', progressEvent);\n      }\n    })\n      .then(response => { .... })\n      .catch(error => { ... }). Hi @itwenqiang , please show the code . Hi, try to add \nAccess-Control-Expose-Headers: 'x-pagination-total-count'\nin the axios headers. ",
    "kkseven07": "any solutions?. any solutions?. ",
    "dreamevilgf": "I tryied to set \n```\nimport axios from 'axios'\nvar apiClient = function () {\n    return axios.create({\n        baseURL: 'http://localhost:33333/',\n        headers: {\n            'Access-Control-Allow-Origin': '',\n            'Access-Control-Allow-Methods': '',\n            'Access-Control-Allow-Headers': '*',\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n    });\n}\n```\nOPTIONS http://localhost:33333/token HTTP/1.1\nHost: localhost:33333\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8  - why is it  still text/html.... \nAccept-Language: ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3\nAccept-Encoding: gzip, deflate\nAccess-Control-Request-Method: POST\nAccess-Control-Request-Headers: access-control-allow-headers,access-control-allow-methods,access-control-allow-origin,content-type\nOrigin: http://localhost:59288\nConnection: keep-alive\nPragma: no-cache\nCache-Control: no-cache\nBut nothing change, I don't understand why instance does not use these settings\n. I found out reason of this behavior.\nI didn't allow CORS requests on server side. \nI added cors policy and now axios works fine!. ",
    "ksankumar": "@ChadTaljaardt  Can you share your solution for implementing delay. ",
    "nihp": "I have a server side api to fetch the information, I need to integrate with the client side(Inside my app).. I have a server side api to fetch the information, I need to integrate with the client side(Inside my app).. Thanks @msouidi309 . Thanks @msouidi309 . ",
    "wuliupo": "same with https://github.com/axios/axios/issues/1322. ",
    "yegao": "because of 'use strict' you can do that \n. ",
    "vishal2947": "Not yet. Can you point me in that direction? \nJust to add one thing: My GET request are going fine just POST requests are not working on android.. Just tried and it is still giving same error - \" Error: Network Error\". \nIn the console log i am getting this:\nError: Network Error\n    at createError (createError.js:16)\n    at XMLHttpRequest.handleError (xhr.js:87)\n    at XMLHttpRequest.dispatchEvent (event-target.js:172)\n    at XMLHttpRequest.setReadyState (XMLHttpRequest.js:567)\n    at XMLHttpRequest.__didCompleteResponse (XMLHttpRequest.js:397)\n    at XMLHttpRequest.js:503\n    at RCTDeviceEventEmitter.emit (EventEmitter.js:179)\n    at MessageQueue.__callFunction (MessageQueue.js:351)\n    at MessageQueue.js:116\n    at MessageQueue.__guardSafe (MessageQueue.js:314). Yes. Same code is able to upload image on cloudinary without any issue. The console error is handled at catch of axios.. I have already checked out this link but none of the answers seems to work :|. @msouidi309  i have fixed it by making some underlying changes in axios (though this is not the best way). Thanks for your support. I really appreciate it.. ",
    "Babazon": "@vishal2947 I'm stuck at the same step too, could you explain what you have changed with axios to get it to upload the file if it's not too much to ask? Thank you. . ",
    "rdurel423": "@vishal2947 I'm experiencing an issue similar to what you describe. What were the steps you took to solve it?. ",
    "evan-007": "We've gotten around this by keeping the 'Content-Type':'application/x-www-form-urlencoded' headers, but using a string in the formdata format, instead of FormData, like: \nconst body = { some: 'data', bla: 'asdf' };\n// key=value&otherkey=value is what FormData produces\nconst data = Object.entries(params)\n  .map((pair) => `${pair[0]}=${pair[1]}`)\n  .join('&');\naxios({\n    url:'https://api.cloudinary.com/v1_1/abcde/upload',\n    method:'POST',\n    headers:{\n      'Content-Type':'application/x-www-form-urlencoded'\n    },\n    data,\n}).then(function(response){. ",
    "jsina": "try to change the adb port with this command:\nadb reverse tcp:8880 tcp:8880; adb reverse tcp:8081 tcp:8081; adb reverse tcp:8881 tcp:8881. ",
    "axetroy": "I thought for a moment\nIt is not practical and versatile web scene.. ",
    "retyui": "@AndrewSouthpaw Can you find solving of this problem?. ",
    "AndrewSouthpaw": "I haven't. We had to resort to using fetch. \ud83d\ude1e . ",
    "LeeDavidPriest": "I was having a the same issue with the request body being empty. I managed to get it to work by doing the following:\nI receive a blob, named value in this case, and run axios in the following way:\n``\nconst formData = new FormData();\nconst extension = value.type.split('/')[1];\nconst imageFile = new File([value],${Date.now()}.${extension}`, {\n       type: value.type,\n});\nformData.append('image', imageFile);\naxios({\n        method: 'post',\n        url: '/admin/resources/uploadImage.json',\n        headers: {\n          'X-Requested-With': 'XMLHttpRequest',\n          'X-CSRF-TOKEN': csrfToken,\n        },\n        data: formData,\n      })\n        .then(response => {\n          console.log(response);\n        })\n        .catch(err => {\n          console.log(err);\n        });\n```\nI'm thinking that Axios may be struggling with the blob for some reason. Converting the blob to a File seemed to fix the issue and the request body was sending the image as a binary.\nHopefully this helps!. ",
    "blairzhao111": "auth is parsed into Authorization for http header and is used for basic authentication, so it should be an object containing your basic auth info auth: {\n   username: '...', password: '...'\n}. ",
    "mtdpcs": "no,i just for a example \uff0cthis is also get the error\naxios.get(api/tasks/${params.id || 0}/permissions, {\nheaders: {\ncookie: '\u6d4b\u8bd5',\n},\n})\n. ",
    "snokier": "+1. ",
    "freedomlang": "@nadim1992  do you mean https://unpkg.com/axios/dist/axios.min.js. It's accessible for me. ",
    "nadim1992": "Yeah I know, that's why I closed the PR. But sometimes it returns 404. It's working now.. ",
    "entwicklerRepo": "Same issue while try to have axios within the bundle. Same issue while try to have axios within the bundle. ",
    "apancutt": "Workaround is to use rollup-plugin-replace to strip it out.\nbash\nnpm install rollup-plugin-replace\nIn rollup.config.js\n```javascript\nimport replace from 'rollup-plugin-replace';\nexport default {\n  ...\n  plugins: [\n    replace({\n      'process.env.NODE_ENV': '\"production\"',\n    }),\n    babel({\n      ...\n    }),\n  ],\n};\n```. ",
    "wangduanduan": "i find it in my output umd code, the process.env.NODE_ENV, i use rollup.js too\n// For IE 8/9 CORS support\n        // Only supports POST and GET calls and doesn't returns the response headers.\n        // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.\n        if (process.env.NODE_ENV !== 'test' &&\n            typeof window !== 'undefined' &&\n            window.XDomainRequest && !('withCredentials' in request) &&\n            !isURLSameOrigin(config.url)) {\n          request = new window.XDomainRequest();\n          loadEvent = 'onload';\n          xDomain = true;\n          request.onprogress = function handleProgress() {};\n          request.ontimeout = function handleTimeout() {};\n        }. ",
    "Meekohi": "Three new plugins needed just to get axios working with rollup... not a great look.. Alternatively, installing rollup-plugin-node-globals and adding it as a plugin also worked for me.\n```\n// rollup.config.js\n// for axios\nimport globals from 'rollup-plugin-node-globals';\nimport builtins from 'rollup-plugin-node-builtins';\nimport json from 'rollup-plugin-json';\nexport default {\n  ...,\n  plugins: [\n    ...,\n    globals(),\n    builtins(),\n    json()\n  ]\n}. ",
    "33sKamal": "1 Did you clear your caches,config ...\n2 did you update thye .env cardinals \n. okey \ni think by default the standard  instalaltion take a local cardinals ( APP_URL, ... )\nif Heroko noticed that he will change it else try to do so . ",
    "amine8ghandi8amine": "i dont need .env cardinals i didnt clear the caches i instal it in heroku is like you install a fresh installation of laravel but i try to clear cache ;). Not working look this is the application\nhttp://smarbook.herokuapp.com/\npassword is: 123456789. ",
    "lichenglu": "@amine8ghandi8amine I might be naive here, but I thought the post signature should be\naxios.post(endpoint, body[Object], config[Object])\nBut it seems that you have the reversed order for body and config. ",
    "azlaan4": "@lichenglu \naxios.post(endpoint, body[Object], config[Object])\ncan you explain it more ? with the help of code ?\n. ",
    "OpenGG": "Possibly duplicated: https://github.com/axios/axios/issues/789. Not seem like an axios bug.\nIf XMLHttpRequest() breaks too, file this issue on React Native instead.. Make a simple online demo please.. This actually was asked a year ago, but it got closed and no changes had been made.\nhttps://github.com/axios/axios/issues/841\nIf this feature is to stay, at least it should be documented.. The below code throws error: Uncaught SyntaxError: Unexpected token delete. Because delete is a reserved word in js. This issue is not related to axios.\njs\naxios.all([saveSelectedItemsAsync(), deleteSelectedItemsAsync()]).then(\naxios.spread(function (save, delete) { console.log(\"done\"); })\n);\n. Maybe a custom adapter can help?\nhttps://github.com/axios/axios/tree/master/lib/adapters. Pre-flight request is part of CORS spec.\nTo make the url requested CORS-ready, please configure the target server to handle OPTIONS request properly.\nFor more information about CORS, please refer to https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS. @OriAmir Have you tried axios without baseUrl?\naxios.get('/api/test') should be resolved to ${location.host}/api/test, no matter what current page's path is.. @OriAmir \naxios.get('/api/test') should be resolved to ${location.host}/api/test, no matter what current page's path is.\nThis is what all browsers do. I don't see why this doesn't work.\nCould you put up an online demo?. @OriAmir \nJust as expected.\nhttps://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL#Absolute_URLs_vs_relative_URLs\nAgain, this is not an issue of Axios.. @OriAmir Read the section about relative urls in the given link.. Is it possible you can make a minimal demo project on Github, including the web files and the HTTP server?. Not reproduced. Please provide an online demo.. @frankbolviken Can't locate the problem if no working online demo is provided.. Tested on Chrome, XHR timeout works like charms.\nhttps://codepen.io/OpenGG/pen/wxEbPe\nIf the xhr implementation in React Native is not compatible with the xhr spec, maybe an issue can be filed on RN's repo, instead of axios?. I made a small demo with plain XHR.\nRN: https://snack.expo.io/H1OheCGIX\nweb: https://codepen.io/OpenGG/pen/OweWBe\nTested on:\nRN 0.55.4\nChrome 68\nResults:\nRN on Android:\n\nRN on IOS:\n\nChrome:\nThu Aug 16 2018 18:23:17 GMT+0800 (China Standard Time): start: https://255.255.0.0\nThu Aug 16 2018 18:23:18 GMT+0800 (China Standard Time): onreadystatechange 4,1000\nThu Aug 16 2018 18:23:18 GMT+0800 (China Standard Time): ontimeout 4,1001\nRN on IOS behaves just like chrome, while RN on Android does not.\nConclusion: RN's XHR implementation does not align with browsers. Anyway this is not an issue of Axios, please check again.. I made a small demo with plain XHR.\nRN: https://snack.expo.io/H1OheCGIX\nweb: https://codepen.io/OpenGG/pen/OweWBe\nTested on:\nRN 0.55.4\nChrome 68\nResults:\nRN on Android:\n\nRN on IOS:\n\nChrome:\nThu Aug 16 2018 18:23:17 GMT+0800 (China Standard Time): start: https://255.255.0.0\nThu Aug 16 2018 18:23:18 GMT+0800 (China Standard Time): onreadystatechange 4,1000\nThu Aug 16 2018 18:23:18 GMT+0800 (China Standard Time): ontimeout 4,1001\nRN on IOS behaves just like chrome, while RN on Android does not.\nConclusion: RN's XHR implementation does not align with browsers. Anyway this is not an issue of Axios, please check again.. Are you using axios in browser or Node.js?\nProxy config only works in Node.js.\nhttps://github.com/axios/axios/blob/master/lib/adapters/http.js#L99\nThe README needs to be more accurate.\n. @tevfik6 \nDidn't see any error, or additional request header.\nhttps://codepen.io/OpenGG/pen/BPOvVN\n. The URL requested, \"https://www.google.com\", is not cors-ready.\nMaybe the issue is not about \"keep-alive\" or \"close\".\nhttps://codepen.io/OpenGG/pen/ZjMwEr. For more information about Cross Origin ajax, please refer to https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS. Insert console.log() statement before every request and before adding interceptor. Refresh and observe console, see if interceptor is added before any request.\n```js\nconsole.log(\"add interceptor\");\naxios.interceptors.request.use(...);\nconsole.log(url); // log every request\naxios.get(url);\n```. I know there are some chars can lead to that problem, just need to be sure.\nCould you capture the response and attach it as file?. @huy-lv Not what I'm expecting. Please save the response with curl, then attach the saved file by dropping it to this issue's reply area.. @huy-lv \nNever mind, found it.\nI pasted it on gist and tried loading with axios, can't see any error.\nfile: https://gist.github.com/OpenGG/ac72e79f9ef088e993213473116c0cd0\ndemo: https://codepen.io/OpenGG/pen/bxEqKL. @nighttiger1990 \nCould you make an online demo on expo, and share it? This demo should make the same request with both Axios and XMLHttpRequest, to determine whether Axios or RN cause this issue.. What is api? Please provide a smallest demo to produce the issue, with runtime information, e.g. what browser/os/node version.. @jkirkpatrick \nThis is too verbose, and not runnable at all. The issue can be a bug inside your code, or inside axios. One just can't tell.\nCan you provide a minimal demo, showing the exact problem related to axios.\nFor general development problem, please consider asking on stackoverflow.com .\nBut if it turns out to be a bug of axios, feel free to come back.. Axios with custom headers actually works: https://codepen.io/OpenGG/pen/BPOvVN\nBut there is a bug when using custom headers with Axios.create(): https://github.com/axios/axios/issues/1522. Options requests are transparent to XHR, there is no way axios can get the response status code, i.e. not a bug.\nYou can try XMLHttpRequest() and see if that's true.. This number is larger than the largest safe integer of JS. Not a bug of axios.. For these kind of general question, please consider asking on StackOverflow.\nBut feel free to come back and open an issue if it turns out to be a bug.. Could you be more specific? What is \"this type\" or \"this info\"?\nAxios is http request lib, it doesn't handle loading or anything related to UI, and not supposed to.. Setting content-type overwrites the default one provided by browser, making it impossible for server to do the right parsing.\nRemove content-type and see if it works.\nPossibly duplated to https://github.com/axios/axios/issues/318. Not an Axios issue. Axios itself is capable of making CORS requests with custom headers.\nhttps://codepen.io/OpenGG/pen/VGYgYd\nFor more information about CORS, please refer to the following document:\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/CORS. Not an axios issue, please refer to CORS documents for more information.\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/CORS. Axios uses XMLHttpRequest() on web. Could you make the same request with XMLHttpRequest() and see if that's slow too?\nIf this issue is caused by IE, it can't be fixed by Axios.. Cant reproduce\nhttps://codepen.io/OpenGG/pen/xaGKEP. https://www.google.com/search?q=package.json+browser. Possible duplicated: https://github.com/axios/axios/issues/1418. Need demo. @wormen A web page, with an axios request of this issue. As simple as possible.. Please elaborate. For general development questions, consider ask on stackoverflow.com .. No and no.\nAxios is merely a wrapper of XMLHttpRequest, which have no information about certificates.\nDo it in native code instead. https://github.com/ajinabraham/Android-SSL-Certificate-Pinning. Not related to axios at all.. Please close one of your duplicated issues.\nIf you are filing a bug, please describe expected behavior and current behavior. A demo will be appreciated.\nP.S. Seems like you should set Content-Type, instead of host, and host is not configurable in XMLHttpRequest.. Try adding a DefinePlugin?\njs\nnew webpack.DefinePlugin({\n  'typeof navigator': JSON.stringify('object'),\n  'navigator.product': JSON.stringify('NativeScript'),\n  'navigator.userAgent': JSON.stringify('NativeScript'),\n});\nI agree axios should be more platform neutral.\n. Need online demo.. Demo please.. Demo please.. ",
    "Peter554": "I also am having trouble. Where are they?. ",
    "adam-b-maurer": "I begin to question the decision to treat application/x-www-form-urlencoded data differently (e.g. requiring   data: querystring.stringify(formData) )\nin order for axios to be able to merge such data it would need to understand how to 'deserialize' --> merge --> then 'reserialize'  (else some other 'x-www-form-urlenceded' specific logic).\nIf we swallow the 'needs to be able to deserialize\\reserialze' pill we may as well allow users to pass a javaScript object in and have axios do the serialization to begin with...  I suppose we could still provide backwards comparability by discriminating on the headers and data type to understand if we need to first deserialze before the merge.. ",
    "Snehal1112": "@3jFernando try to add 'Content-type': 'application/x-www-form-urlencoded header from client side. ",
    "Fractalliter": "I did that but same error every time\nI use http://localhost:3000 for client-side and server-side is an API then I try to make a request with header and body (axios(options)) and take same error then i disable CORs of chrome with extension and server give me this error\nOPTIONS https://gateway.tameemco.ir/uaa/oauth/token 403 (Forbidden)\ndispatchXhrRequest @ xhr.js:178\nxhrAdapter @ xhr.js:12\ndispatchRequest @ dispatchRequest.js:59\nPromise.then (async)\nrequest @ Axios.js:51\nAxios.(anonymous function) @ Axios.js:71\nwrap @ bind.js:9\nLoginForm._this.handleSubmit @ login-form.js:41\nonClick @ reactstrap.es.js:1139\ncallCallback @ react-dom.development.js:100\ninvokeGuardedCallbackDev @ react-dom.development.js:138\ninvokeGuardedCallback @ react-dom.development.js:187\ninvokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:201\nexecuteDispatch @ react-dom.development.js:461\nexecuteDispatchesInOrder @ react-dom.development.js:483\nexecuteDispatchesAndRelease @ react-dom.development.js:581\nexecuteDispatchesAndReleaseTopLevel @ react-dom.development.js:592\nforEachAccumulated @ react-dom.development.js:562\nrunEventsInBatch @ react-dom.development.js:723\nrunExtractedEventsInBatch @ react-dom.development.js:732\nhandleTopLevel @ react-dom.development.js:4476\nbatchedUpdates$1 @ react-dom.development.js:16659\nbatchedUpdates @ react-dom.development.js:2131\ndispatchEvent @ react-dom.development.js:4555\ninteractiveUpdates$1 @ react-dom.development.js:16714\ninteractiveUpdates @ react-dom.development.js:2150\ndispatchInteractiveEvent @ react-dom.development.js:4532\nFailed to load https://gateway.tameemco.ir/uaa/oauth/token: Response for preflight has invalid HTTP status code 403.. ",
    "DaruoMatrix": "download the extension \"Allow-Control-Allow-Origin\" if you use chrome. download the extension \"Allow-Control-Allow-Origin\" if you use chrome. ",
    "suhailkc": "chrome extension  \"Allow-Control-Allow-Origin:*\" solved my problem\nthanks @DaruoMatrix . ",
    "LinusBorg": "The second row of icons is not a compatibility list, it shows he results off the latest automated test runs.\nClick it and see for yourself.. ",
    "MeoMix": "Okay, sure. That makes sense. That said, when I look through release tags (such as the most recent 0.17.1) I still see test failures for IE 9/10/11. I suppose that leads me to think that Axios isn't supporting older versions of IE anymore. Are the tests just broken indefinitely?. Okay, sure. That makes sense. That said, when I look through release tags (such as the most recent 0.17.1) I still see test failures for IE 9/10/11. I suppose that leads me to think that Axios isn't supporting older versions of IE anymore. Are the tests just broken indefinitely?. ",
    "dotboris": "The error your getting about the preflight request is because the server is not responding with the proper CORS headers.\nFrom your code, it seems like you're trying to pass the CORS headers on the client. CORS headers need to be returned by the server. You need to change your Java backend so that it handles CORS properly.\nThere's a guide on the spring site explaining this: https://spring.io/guides/gs/rest-service-cors/\nCORS are a very important security feature in the browser. You should really understand how they work and what kind of security implications they have.\nMDN has a in-depth article on this: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\nHere's an article that describes what the security implications of CORS are: https://mobilejazz.com/blog/which-security-risks-do-cors-imply/\n. I've tried this on the master version of axios and I can't reproduce this.\nI tried in node 10 and in chromium. Both don't have a content type when doing a DELETE request.. I just tested this in node 8 and it's not happening either.. ",
    "Ro37A": "You call the getCategories method instead of setting it as a callback.. ",
    "looterz": "I'm getting the same issue, in the latest chrome browser. The only options configured for the axios instance are baseURL and onDownloadProgress.. ",
    "kyledavelaar": "I am having the same issue with multiple browsers.  I can get all the other properties just fine but total is always coming to 0.. ",
    "ybroch": "i also get this same issue, when i deal with download progress function ,it can mark width axios require file, when in progressEvent ,its loaded has change value, but its total always 0. . ",
    "tenbits": "Axios binds the onDownloadProgress function directly to native progress  event of the xmlhttprequest instance: xhr.js#L145. \nThe problem is in gzipped responses.  Chrome for example has always for such responses lengthComputet=false and total=0.  This makes also sens,  as total reports the size of the content itself,  and browsers can't predict how many bytes will be the content.  loaded reports the size after decoding, so even if  you read the content-length header with \n``javascript\nonDownloadProgress(event) {\n  event.srcElement.getResponseHeader('content-length')\n}\n````\nat some point you will getloaded > contentLength.  A workaround would be to send the actual size in headers, smth. likeX-Actual-Content-Lengthand then read the correct size inonDownloadProgress`.\n. ",
    "itwenqiang": "@msouidi309 Need to show the test code, or where the axios source code was modified?. ",
    "guoshuke": "\n. I used es6-promise, babel-polyfill  qs, but it doesn't work.  ie10 ie11 is OK , . ",
    "dewdad": "Sorry. This is redundant and was opened by mistake.. ",
    "csprocket777": "I'm getting this issue right now. What was your solution?. ",
    "stonemakers": "i have the same error ... axios<0.18.0> \n@falost @tomaash @kmayer @idan @lachenmayer . @falost IOS 12 dev. @falost \n``` javascript\naxios.defaults.withCredentials = true\naxios.defaults.headers.post['Content-Type'] =\n  'application/x-www-form-urlencoded'\n```\nIn this way, I set up the request head of Axios, but still can't do it. could you show your demo ?. I have solved my problem. I changed my post method in this way\uff1a\njavascript\naxios.post( apiUrl, qs.stringify({name: 'testName', pass: 'testPass'}), {\n  headers: {\n     'Content-Type': 'application/x-www-form-urlencoded'\n  }\n}).then(//***).catch(//***)\nbash\n1. install qs module, and use qs.stringify(dataObject) to format your data object\n2. add axios config \n{\n  headers: {\n     'Content-Type': 'application/x-www-form-urlencoded'\n  }\n}\nHere are sth comment about axios post: link. ",
    "falost": "what OS are you ? @stonemakers . @MRFCY Yes, I already know where the problem is.  I'm here because the request header is set up.  It can only set part of the request head, for example: content-type and Accept.\nhttps://fetch.spec.whatwg.org/#concept-header-list. @MRFCY  yeah, i think so. but you can look concept-header-list . @stonemakers  of course\uff0c demo commit  , I deleted the normal request header, and the reservation was uploaded.\n'Content-Type': 'multipart/form-data'. you can test it in ios12 , right or error, here is error. update your os\n\n\u5728 2018\u5e7411\u670814\u65e5\uff0c07:13\uff0cliulun notifications@github.com \u5199\u9053\uff1a\nHow about this issue's progressing?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub https://github.com/axios/axios/issues/1600#issuecomment-438474222, or mute the thread https://github.com/notifications/unsubscribe-auth/ANEvM-pBGGRhlXEh3lVHBKYJIh7l7Ibvks5uu1IIgaJpZM4UjKT6.\n\n\n. ",
    "MRFCY": "It happens with axios api and jquery ajax api, I got a response status 0. I think it may be sth wrong with the CORS in wkwebview of iOS 12.  If any one had solved this problem?. It happens with axios api and jquery ajax api, I got a response status 0. I think it may be sth wrong with the CORS in wkwebview of iOS 12.  If any one had solved this problem?. @falost Do you mean I could set only content-type and Accept in my request header ?. @falost Do you mean I could set only content-type and Accept in my request header ?. ",
    "Jialufeng": "ios12  ajax  post\u7684 \u9047\u5230\u540c\u6837\u95ee\u9898  error  status\u8fd4\u56de0. ",
    "cyrecorg": "\u9047\u5230\u540c\u6837\u7684\u95ee\u9898 iOS12 beta1\u7248\u672c https axios\u8fd4\u56denull\uff0c\u53d1\u73b0\u662f\u6d4f\u89c8\u5668\u5185\u6838\u95ee\u9898 \u5bfc\u81f4json\u8bf7\u6c42 \u89e6\u53d1\u4e86cros\u62e6\u622a\u3002\u5347\u7ea7\u5230iOS12 bata2\u89e3\u51b3\u4e86\u95ee\u9898\u3002. ",
    "ovaldi": "http://www.openradar.me/40807782\nhttps://stackoverflow.com/questions/50707146/ios-v12-https-requests-errors\nThis is iOS beta1 bug, and Apple has fixed it on iOS beta2.. ",
    "arfurs": "\u8bd5\u4e86\u4e00\u4e0b\uff0cIOS12 beta1\u7248\u672c\u786e\u5b9e\u662f\u6709\u8fd9\u4e2abug\n\u901a\u8fc7\u4e0a\u9762\u8bf8\u4f4d\u6240\u8bf4\u4ee5\u53ca\u81ea\u5df1\u7684\u8c03\u8bd5\uff0c\u6211\u603b\u7ed3\u5982\u4e0b\uff1a\n\u4e0a\u9762\u6709\u7684\u4eba\u8bf4\u53ef\u4ee5\u628aContent-Type\u4fee\u6539\u4e3aapplication/x-www-form-urlencoded\u3001multipart/form-data\u6216text/plain \u53ef\u4ee5\u89e3\u51b3\uff0c\u4e5f\u786e\u5b9e\u662f\u8fd9\u6837\u7684\uff0c\u4f46\u662f\u8fd9\u6837\u89e3\u51b3\u7684\u524d\u63d0\u6761\u4ef6\u4e3a\u4f60\u7684HTTP headers\u4e2d\u6ca1\u6709\u989d\u5916\u7684header\uff08\u4e5f\u5c31\u662f\u8bf4\u4e0d\u80fd\u8d85\u8fc7\u8de8\u57df\u4e2d\u7684\u7b80\u5355\u8bf7\u6c42\u7684\u5305\u542b\u8303\u56f4 JavaScript MDN\u7b80\u5355\u8bf7\u6c42\uff09\n\u6ce8\uff1aContent-Type\uff1aapplication/json\u4e5f\u88ab\u89c6\u4e3a\u4e86\u975e\u7b80\u5355\u8bf7\u6c42\n\u6211\u8ba4\u4e3a @cyrecorg \u6240\u8bf4\u7684\u662f\u6b63\u786e\u7684\uff0c\u5728IOS12 beta1\u7248\u672c\u4e0b\uff0c\u662f\u6d4f\u89c8\u5668\u5185\u6838\u89e6\u53d1\u4e86cors\u62e6\u622a\uff0c\u4f46\u4ec5\u4ec5\u62e6\u622a\u4e86\u975e\u7b80\u5355\u8de8\u57df\u8bf7\u6c42\uff0c\u5982\u679c\u4f60\u7684\u8bf7\u6c42\u662f\u7b80\u5355\u8bf7\u6c42\uff0c\u90a3\u4e48\u5728IOS12 beta\u4e0b\u4e0d\u4f1a\u51fa\u73b0\u8fd9\u4e2a\u95ee\u9898\n. ",
    "BlueAccords": "hey @chovy did you ever figure this out?. Ah ok, thanks for the update! I'm trying to figure out a clean way to handle certain errors like server errors globally in my client side as well.. ",
    "xland": "How about this issue's progressing?. How about this issue's progressing?. ",
    "tarekadam": "I set up global error handling with interceptors.\nhttps://github.com/axios/axios#interceptors\n```// Add a response interceptor\naxios.interceptors.response.use(function (response) {\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Do something with response error\n    return Promise.reject(error);\n  });\n. ",
    "baijunjie": "I have the same need. interceptors.request support for async function.\njs\naxios.interceptors.request.use(async function (options) {\n    options.headers['Authorization'] = await getToken();\n    return options;\n}, function (error) {\n    console.log('Request error: ', error);\n    return Promise.reject(error);\n});\n. Thanks. ",
    "yehoan": "i  also hava   same problem  and  not know how to solve. ",
    "pynner": "Having same problem, @Zewkin  @yehoan did you ever find a solution?. Ahh ok makes sense. Thanks @Zewkin. \nI might be out of luck then, as this remote server is a third party server not controlled by me. . ",
    "Zewkin": "@pynner the problem was actually with the backend. When subscribing to onUploadProgress, browser sends preflight OPTIONS request before POST, but back was not configured properly to handle OPTIONS requests and responded with 400.. ",
    "Oceanswave": "Looks like when axios detects form data in the request body, it auto-sets a multipart/form-data header, overriding the header value.\nThis gets tricky if you're mocking responses from the server with something like Nock, which will see a different boundary value in the response -or- needing to interact with a api that expects a multipart/related content type.. ",
    "ppozniak": "I am just facing the same issue.\nHave you found any way to solve this @TabrisK. ",
    "TabrisK": "@ppozniak \nUnfortunately, I can't change the behavior of axios. Finally I solved the problem by using XMLHttpRequest.. ",
    "webmastervishal": "axios.get('https://sandboxapi.ampcome.com/api/gokhana/restaurant/categorized', {\n        headers: {'Authorization': 'WqQg2jqLWVIO5JBmQ1LYHU8w41FdzLEsCB6yP1Tw2AFHf2w5KWRkMBV8KAgY6Kl5'},\n        params: {\n            geopoint: {\"near\":{\"lat\":12.9699,\"lng\":77.6499},\"maxDistance\":50,\"unit\":\"kilometers\"},\n            categories: [\"nearby\",\"popular\"],\n            outlettypes:[\"restaurant\",\"foodcourt\"],\n            clientapp:'gokhanacustomer'\n        }\n    })\n    .then(res => console.log(res));\nThis is working fine when used it inside Postman or ARC.\nAt least help me with that parameters are passed correctly or not?. Sorry, this problem isn't related to axios, I tried with different libraries like fetch and request getting the same results. . ",
    "dengue8830": "im having a similar issue. Some request fails randomly, i wrote an error handler trying to collect any useful clue. Im getting this\nerror: Network Error\nmy collected data: {\"status\":0,\"method\":\"post\",\"response\":\"closed\"}\nnow im rewriting the error handler to collect more data but this error doesn't follow any pattern, its totally random. \nI could reproduce the error when i had very bad mobile internet connection, but sometimes it occurs with WiFi, and it fails the original request but not the next request for report the error ... so weird. @jasonandres no, i can't see the cause of the weird behavior. I only see that is more common on android 5 (even more common with mobile network). This is my react native project package.json\n{\n  \"name\": \"xxx\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"proxy\": \"http://localhost:8080\",\n  \"scripts\": {\n    \"start\": \"node node_modules/react-native/local-cli/cli.js start --config ../../../../rn-cli.config.js\",\n    \"test\": \"jest\",\n    \"android\": \"react-native run-android\",\n    \"ios\": \"react-native run-ios\",\n    \"server\": \"react-native start\"\n  },\n  \"dependencies\": {\n    \"axios\": \"0.18.0\",\n    \"geolib\": \"2.0.24\",\n    \"human-readable-ids\": \"1.0.4\",\n    \"react\": \"16.3.1\",\n    \"react-native\": \"0.55.4\",\n    \"react-native-device-info\": \"0.21.5\",\n    \"react-native-exit-app\": \"1.0.0\",\n    \"react-native-fbsdk\": \"0.7.0\",\n    \"react-native-fetch-blob\": \"0.10.8\",\n    \"react-native-firebase\": \"4.2.0\",\n    \"react-native-geocoding\": \"0.3.0\",\n    \"react-native-gifted-chat\": \"0.4.3\",\n    \"react-native-image-picker\": \"0.26.10\",\n    \"react-native-linear-gradient\": \"2.3.0\",\n    \"react-native-maps\": \"0.19.0\",\n    \"react-native-masked-text\": \"1.7.1\",\n    \"react-native-mauron85-background-geolocation\": \"0.5.0-alpha.34\",\n    \"react-native-parallax-scroll-view\": \"0.21.0\",\n    \"react-native-picker-select\": \"3.1.1\",\n    \"react-native-signature-capture\": \"0.4.9\",\n    \"react-native-snap-carousel\": \"3.7.0\",\n    \"react-native-star-rating\": \"1.0.9\",\n    \"react-native-step-indicator\": \"0.0.7\",\n    \"react-native-swipe-list-view\": \"1.0.3\",\n    \"react-navigation\": \"2.0.4\",\n    \"react-redux\": \"5.0.7\",\n    \"redux\": \"4.0.0\",\n    \"redux-devtools-extension\": \"2.13.2\",\n    \"redux-thunk\": \"2.3.0\",\n    \"underscore\": \"1.9.0\",\n    \"validator\": \"10.3.0\"\n  },\n  \"devDependencies\": {\n    \"@types/axios\": \"0.14.0\",\n    \"@types/geolib\": \"2.0.23\",\n    \"@types/jest\": \"22.2.3\",\n    \"@types/node\": \"9.6.8\",\n    \"@types/react\": \"16.3.14\",\n    \"@types/react-native\": \"0.55.14\",\n    \"@types/react-navigation\": \"1.5.11\",\n    \"@types/react-redux\": \"6.0.2\",\n    \"@types/react-test-renderer\": \"16.0.1\",\n    \"@types/redux\": \"3.6.0\",\n    \"@types/underscore\": \"1.8.8\",\n    \"@types/validator\": \"9.4.1\",\n    \"babel-jest\": \"22.4.4\",\n    \"babel-preset-react-native\": \"4.0.0\",\n    \"jest\": \"22.4.4\",\n    \"react-native-typescript-transformer\": \"1.2.5\",\n    \"react-test-renderer\": \"16.3.1\",\n    \"ts-jest\": \"22.4.6\",\n    \"typescript\": \"2.8.3\"\n  },\n  \"jest\": {\n    \"preset\": \"react-native\",\n    \"transform\": {\n      \".+\\\\.tsx?$\": \"ts-jest\"\n    },\n    \"testRegex\": \"(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.(jsx?|tsx?)$\",\n    \"moduleFileExtensions\": [\n      \"ts\",\n      \"tsx\",\n      \"js\",\n      \"jsx\",\n      \"json\",\n      \"node\"\n    ],\n    \"modulePaths\": [\n      \"<rootDir>\"\n    ]\n  }\n}\ni saw others comments about react-navigation causing problems with another libs... may be this could be the case\ni'm using node + express too, but the failed request doesn't hit the api (a saw logs)\nhave you got some clue?. in react native: i solved with this\n- upgrade to rn57\n- upgrade to nginx 1.15.3\n- use https. I don't know if this help but i used anyway\nso the problem was incompatible request config between okhttp and nginx\nin web: i didn't see this error. ",
    "jasonandres": "@dengue8830 We are experiencing the same issue. Front end react App(s) with backend NodeJS Express API.  We have 500k requests per week and receive one or two of these network errors from Axios per day, but the next request for reporting the error is successful.  Our API is up and not under any heavy load and the request never makes it to our API.\nDid you find anything after collecting more data?. ",
    "gabrielpiassetta": "We are having the same issue here. Axios v0.18, Flask Backend. Some of our customers are experiencing network erros randomly. One of them can reproduce the error all the time, but only in one machine, brand new one, anonymous tab. Add ?time in the query string didn't solve the issue.. We are having the same issue here. Axios v0.18, Flask Backend. Some of our customers are experiencing network erros randomly. One of them can reproduce the error all the time, but only in one machine, brand new one, anonymous tab. Add ?time in the query string didn't solve the issue.. @noqcks Turns out that the problem was with our apache configuration, specifically in mpm_event.conf.\nKeepAlive was off, setting it to on solved the issue.\n. @noqcks Turns out that the problem was with our apache configuration, specifically in mpm_event.conf.\nKeepAlive was off, setting it to on solved the issue.\n. ",
    "noqcks": "@gabrielpiassetta Did you ever solve this issue? We're experiencing it as well, but are unable to reproduce. It seems to be only coming from mobile devices.  \nWhat versions are you running?\naxios: 0.18.0\nflask: 0.12.4\nflask-CORS: 3.0.6 \nnginx: 1.15.8. ",
    "cbuchert": "What are you using to serve your Vue assets? NginX? Caddy? Apache? Something else?. What web server are you using to serve your Vue app?. ",
    "gogoIsComing": "@cbuchert what do you mean by serving Vue assets !!!. @imatmati i tried this , and still not working. @imatmati yes i did this in client side and still not working. ",
    "imatmati": "You should add to  you client the following headers through config object by example : \nheaders: {\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Methods\": \"GET, POST, PATCH, PUT, DELETE, OPTIONS\",\n    \"Access-Control-Allow-Headers\": \"Origin, Content-Type, X-Auth-Token\"\n  }. To be precise, I don't mean in server side but in client side. Here an example : \nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  headers: {\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Methods\": \"GET, POST, PATCH, PUT, DELETE, OPTIONS\",\n    \"Access-Control-Allow-Headers\": \"Origin, Content-Type, X-Auth-Token\"\n  }\n});. ",
    "chamoymango": "@gogoIsComing What are you using the bundle the assets with vuecli? Also which version of the cli, are you using? I had a similar issue with my Flask backend, but added a proxy table to my index.js in my config folder with a target of my flask api backend. . ",
    "arpit2438735": "@Khaledgarbaya Can you merge my changes? It's urgent for our application. ",
    "mknx-io": "It not relies to Axios, this is a browser feature.\nWhen you make an AJAX request to a host that is different to the one the app is served on, the browser first performs an OPTIONS request (also known as preflight request), in order to check if the CORS headers are present and valid. If not, the JS console will show you the error you print above, and no further request is performed. That's why you don't have any response object in your catch callback.\nTo fix it, you should first fix your CORS problem, then try again to retrieve the response object.. Btw I don't think this is the best place for sharing this post... StackOverflow will give you better answers.. ",
    "delirius325": "I believe this could probably be useful! Just a simple configuration boolean to change to true (or false) and then every requests made with axios could \"console.log\" the cURL equivalent.\nEDIT: Although, I'm not sure it is in the scope of axios to provide such a functionnality; I'll start developing a module to meet this demand\nThe goal is for the module to be as simple as:\n\nnpm install --save axios-curlirize\nadd the code curlirize() in your app.js\n\nhttps://github.com/augmnt/axios-curlirize. @damianobarbati \nIf you're interested, the module \"axios-curlirize\" has now been published. It's simple to implement but only supports axios@0.17.1 as of right now. This is due to the fact that we're using \"axios-middleware\" for this version. \nWe'll be creating our own middleware and using it instead in a very near future, this way we won't be dependent of any other third-party solutions.\nThanks,. @damianobarbati \nDon't even bother downgrading :) ! We just pushed a new version making use of axios's interceptor instead of a third-party middleware. This way you can basically use any of axios' versions. \nHave fun testing the module tomorrow, and don't be shy to provide us with feedback!. Hi @atrauzzi,\nSorry for the late response..! I'm not sure what you specifically want to achieve, but from what I gather, I believe the use of interceptors could help you! \nBasically, you could use an interceptor to store the URL of an axios request into a variable, and then use it to populate a srcattribute as you mentioned.\nSee the example below:\n```javascript\nconst axios = require('axios');\nlet myVars = [];\naxios.interceptors.request.use(function(config) {\n        // Typically, you would do something and \"return config\" here.\n        // That way, you did something but Axios is still sending the request.\n        // But for your use case, you could assign the URL to another variable like so :\n        myVars.push(config.url);\n}, undefined);\n```\nYou could then use the content of myVars (or any other variable) to populate your srcattributes.\nHope this helps! :smile:. Indeed it would, you would have to trigger something like axios.get('url') for the interceptor to be triggered. Although, in the case I mentioned above, the request wouldn't actually trigger the endpoint.\nCould you perhaps elaborate on your use case? I'm not sure I understand why you would like to use axios instances without ever actually making any requests. After all, Axios is a HTTP client so the sole purpose of the tool is for you to make requests.\nI might be missing something here.\nCheers \ud83d\ude04 !. I get it now! Thanks for the in-depth explanation! \nAlthough, I'm not sure how I personally could help then... So hopefully someone else can jump in and help you with your request \ud83d\ude04 !\nCheers!. Hey there @atrauzzi,\nI was just thinking basically what you want is to be able to access the URL of an already created axios instance, right?\nThen why not just do something like:\n```javascript\nimport axios from 'axios';\nconst fakeConfig = {\n    adapter: () => { return 'dummy' },\n    transformRequest: { '0': () => { return 'dummy' } },\n    transformResponse: { '0': () => { return 'dummy' } },\n    timeout: 0,\n    xsrfCookieName: 'XSRF-TOKEN',\n    xsrfHeaderName: 'X-XSRF-TOKEN',\n    maxContentLength: -1,\n    validateStatus: () => { return 'dummy' },\n    headers: { Accept: 'application/json, text/plain, /', 'Content-Type': 'application/json;charset=utf-8' },\n    method: 'post',\n    url: 'http://localhost:7500/',\n    data: { dummy: 'data' }\n}\nconst myInstance = axios.create(fakeConfig);\nconsole.log(myInstance.defaults.url);\n```\nSee if you execute this code, you'll get :\nbash\nhttp://localhost:7500/\nYou simply access the config's URL property \ud83d\ude04.\nAgain, feel free to shut this idea down if this is not explicitly what you're looking for \ud83d\ude03.\nCheers,. I think I've got an idea of how to implement such a method. I'm working on a little something right now \ud83d\ude04 !. @atrauzzi     GitHub sent me a notification for this - can't seem to know why though. However, I see that it is still opened, this can be closed right?\nThanks \ud83d\ude04 !. Hi @HengCC,\nI believe what you're looking for is something like this:\njavascript\naxios.get('some_url', {headers: {Content-Type: 'application/json'}})\n  .then((res) => {\n    //do something\n  })\n  .catch((err) => {\n    //do something\n  });\nCheers \ud83d\ude04,. Hi there @talwaserman,\nI hope you fixed your issue \ud83d\ude04. If so, would it be possible for you to close this issue?\nCheers,. Hey there @latel,\nAn axios contributor/manager can correct me if I'm wrong, but as I understand it (and from the comments in the code), the interceptors are saved in a stack. Therefore, when comes the time for the interceptors to be executed, it starts with the last added interceptor (first in last out ... or ... last in first out (LIFO)).\nHere's the part of the code where a stack is mentioned:\njavascript\n// axios.js line 1263\n/**\n* Add a new interceptor to the stack\n*/\nNow here's the hookup of interceptors, notice the use of \"unshift()\"\njavascript\n// lib/core/Axios.js line 43\nthis.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n  chain.unshift(interceptor.fulfilled, interceptor.rejected);\n});\nTherefore I believe it's normal for axios to behave the way it behaves. \nOn a side note, may I know your use case? Why do you need two interceptors back to back like this? If one interceptor must be executed before the other, then I suggest you just build one interceptor that does the whole thing.\nAlso, you might want to add this inside your interceptors\njavascript\nreturn config;\nThis way you'll get \njavascript\nnode index.js\n2\n1\nok\nHope this helps \ud83d\ude03  !. Hey there @railgun20001,\nWould it be possible for you to supply a quick code example?\nThanks,. Hey there,\nMight sound stupid, but are you sure your accessToken doesn't have any undesired characters? White spaces?\nThanks,. Hi there,\nI would indeed, as you suggested, make the expiration comparison against a date in ms (Unix time) instead of minutes. This way you'll be super accurate. \nAt first I was also going to explain the interceptor you mentionned, but seems like you get it.\nCheers :smile: !. Hey @chobo2,\nDoing it on the response is a good idea! \ud83d\ude04 \nIf your problem is solved, feel free to close the issue \ud83d\udc4d !\nCheers and have a wonderful day,. Hey there,\nI'm not sure I understand the part where you don't want to use the BaseURL. Couldn't you have some sort of config file (say \"config.js\") which, depending on the environment, sets an environment variable with the base URL?\nLet's say, something like this:\n```javascript\n// config.js\nif(env === 'development') {\n    process.env.BASE_URL = 'localhost-dev:3000';\n} else if (env === 'test') {\n    process.env.BASE_URL = 'localhost-test:3000';\n} else {\n    process.env.BASE_URL = 'prod-environment:8080'\n}\n// add other conditions if needed...\n// -----------------------------------------\n// app.js\nconst axios = require('axios');\nrequire('config.js');\nlet axiosInstance = axios.create({\n  baseURL: process.env.BASE_URL\n});\naxiosInstance.get('/api/getUser')\n  // your promises code\n```\nThis is a very basic example and it's not pretty, but it could work.\nLet me know what you think \ud83d\ude04 \nThanks,. Hi @OriAmir,\nIndeed the \"BASE_URL\" variable is an environment variable that I set myself, that's why when you try to print it to the console it shows as empty. As for initializing other variables depending on the environment, you can simply reproduce the same steps and add your own environment variables in the \"config.js\" file.\nLet me know if that helped you,\nCheers!. Hi again @OriAmir,\nWere you able to fix your problem? \ud83d\ude04\nIf so, could you please close this issue? Otherwise, let me know if my previous comment helped you figure out some stuff.\nThanks,. Very true, if your API is hosted on the same machine as your React app then @OpenGG's solution should work perfectly fine \ud83d\ude04 . Hey there,\naxios requests are based on the follow-redirect module. As you can see in follow-redirect's code here :\nhttps://github.com/olalonde/follow-redirects/blob/master/index.js#L78\njavascript\n  // Only write when we don't exceed the maximum body length\n  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {\n    this._requestBodyLength += data.length;\n    this._requestBodyBuffers.push({ data: data, encoding: encoding });\n    this._currentRequest.write(data, encoding, callback);\n  }\n  // Error when we exceed the maximum body length\n  else {\n    this.emit(\"error\", new Error(\"Request body larger than maxBodyLength limit\"));\n    this.abort();\n  }\nIf the content-length is bigger than the max, an error is thrown and the request is aborted. We can also see the part of axios' code that handles the error part, it is rejecting the promise :\nhttps://github.com/axios/axios/blob/master/lib/adapters/http.js#L196\njavascript\nstream.on('error', function handleStreamError(err) {\n  if (req.aborted) return;\n  reject(enhanceError(err, config, null, lastRequest));\n});\nIsn't that enough already? Otherwise, then adding the stream.destroy() is a great idea.\nCheers \ud83d\ude04 ,. Hi there @amitzur,\nFrom what I gather (and from the Node.js documentation), Buffer.from('') is not returning a string. That would explain why passing '' is working. Therefore you should write Buffer.from('').toString()and everything should work as expected \ud83d\ude04 !\nSee Node.JS documentation\nCheers,. You're right, it should technically support it without having to parse the Buffer as a string.\n```javascript\nif (data && !utils.isStream(data)) {\n      if (Buffer.isBuffer(data)) {\n        // Nothing to do...\n      } else if (utils.isArrayBuffer(data)) {\n        data = Buffer.from(new Uint8Array(data));\n      } else if (utils.isString(data)) {\n        data = Buffer.from(data, 'utf-8');\n      } else {\n        return reject(createError(\n          'Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream',\n          config\n        ));\n      }\n  // Add Content-Length header if data exists\n  headers['Content-Length'] = data.length;\n}\n\n```\nhttps://github.com/axios/axios/blob/master/lib/adapters/http.js#L40\nI will try to debug it on my local machine, I'll push a PR if I find out what's going on \ud83d\ude04 !\nCheers,. I created a PR (#1703) for this request. Basically converting the empty Buffer into a string.\nCheers!. I'm not done investigating, although the problem seems to be lying in the follow-redirects module that axios uses for its requests. Can't seem to find the issue yet though, that's why my PR is just a work-around for now \ud83d\ude04 !. @amitzur The problem was indeed related to the follow-redirectsmodule used by axios. I made a PR to fix the problem in that library (which is the source of the issue) instead of patching the problem into axios.. Hi @amitzur ,\nIssue has been fixed in follow-redirects. The problem was deeper than just the module itself, it goes to Node's http module which does not trigger the callback on empty strings/buffers.\nhttps://github.com/nodejs/node/blob/v10.7.0/lib/_http_outgoing.js#L608\nhttps://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback\nSince the behaviour is weird, it's been reported here (following this investigation)  : https://github.com/nodejs/node/issues/22066 \nThis issue can be closed as it is not related directly toaxios and it's been fixed at the source.\nThanks a lot \ud83d\ude04,  . Ruben, the person who opened the issue is also the biggest contributor of follow-redirects. So when I made my PR to the module, he was curious if it was solely related to follow-redirects or directly to Node. When he discovered that it was directly related to Node he decided to open up an issue \ud83d\ude03 .. Closing PR as the issue is coming from follow-redirects: https://github.com/olalonde/follow-redirects/pull/90. Could you create an axios instance from a config variable? And print the instance to the console? I'm curious to see what the config's url looks like (feel free to hide all the sensitive data).\njavascript\nconst config = {\n  url: endpoint;\n}\nconst instance = axios.create(config);\nconsole.log(instance.defaults.url);\nThanks!. @emilyemorehouse Done \ud83d\ude04 . Hey there @shubham81407,\nYou could try something like this;\n```javascript\nexport function appInitialize(navigator) {\n  return async function (dispatch) {\n    dispatch({ type: APP_INITIALIZE });\n    let promises = [];\npromises.push(axios(\"url1\"));\npromises.push(axios(\"url2\"));\npromises.push(axios(\"url3\"));\n\nconst responses = await Promise.all(promises);\nconst responseDataArr = responses.map(response => response.data);\n\n// make your request with the content of the responses here\n// axios.get('...')\n\n}\n}\n```\nWhat do you think?. Hey there @shubham81407,\nYou could try something like this;\n```javascript\nexport function appInitialize(navigator) {\n  return async function (dispatch) {\n    dispatch({ type: APP_INITIALIZE });\n    let promises = [];\npromises.push(axios(\"url1\"));\npromises.push(axios(\"url2\"));\npromises.push(axios(\"url3\"));\n\nconst responses = await Promise.all(promises);\nconst responseDataArr = responses.map(response => response.data);\n\n// make your request with the content of the responses here\n// axios.get('...')\n\n}\n}\n```\nWhat do you think?. @shubham81407 Have you tried the solution listed above?. @shubham81407 is api just another axios instance? If so, then all you have to do is push api.get to the promises array.. Hi @nguyentiennghiep,\nWhile I find your file structure to be rather strange (that's just my personal opinion, to take with a grain of salt \ud83d\ude05).\nIn your test, you would have to call a done callback. Otherwise your test will hang. See the example below:\n```javascript\n// example:\ndescribe('tests for apiCall', () => {\n  it('should be a post request', done => {\n        axios.interceptors.request.use(req => {\n            expect(req.method).toBe('get');\n            done();\n        });\n    axios.post('http://localhost:7500/', {dummy: 'data'})\n    .catch(err => {\n        done(err);\n    });\n});\n\n});\n```. @emilyemorehouse This should be closed. No information at all.. Hi @ThiagoMiranda,\nThis code works for me... I really didn't change anything except for removing the await from the call to getImage() and the imagePath. It creates an image called someimage.jpg in my current folder, and that image is the response from the axios request.\n```javascript\nconst fs = require('fs');\nconst axios = require('axios');\nasync function getImage() {\n  const response = await axios({\n      url:'https://www.w3schools.com/css/img_forest.jpg',\n      responseType: 'stream'\n   })\n  response.data.pipe(fs.createWriteStream('./someimage.jpg'))\n}\ngetImage();\n```. Hi @ksairamya,\njavascript\naxios.get('url', {headers: \"x-dsi-restful\":1})\nis not working?. Hi @faztp12 ,\nAccording to this, the default Content-Type is application/x-www-form-urlencoded. Are you using a custom axios instance or just the default one?\nhttps://github.com/axios/axios/blob/b4c5d35d2875191dfa8c3919d4227dce8e2ad23f/lib/defaults.js#L6-L8\nCheers \ud83d\ude04 ,. > It doesn't look like that DEFAULT_CONTENT_TYPE gets applied to DELETE requests.\n\nIt would be useful to know if this line of code gets hit in the debugger\naxios/lib/defaults.js\nLine 52 in b4c5d35\nsetContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n\nYou're right, it's probably what's happening. I can't see how anything else would set the Content-Type header to application/json. I'll take a deeper look at it.. ",
    "damianobarbati": "Sounds good! I'll be downgrading axios and testing this right tomorrow, thanks @delirius325 :). ",
    "danielfranca-ene": "Having the same issue but with 0.19 beta, 0.18 works.. Having the same issue but with 0.19 beta, 0.18 works.. ",
    "hazzo": "Finally I could make it work. But just with the executor function, I wasn't able to do it with the source method.\nClosing this issue.. ",
    "DusuWen": "hi there, how did you make it work again?i have same question. ",
    "benisonlg60": "facing the same problem, could you please let me know the fix?. ",
    "atrauzzi": "Does this require that I trigger the request for the interceptor to be called?. Yeah, I think that approach while it might function, would be a bit unwieldy as I don't want to limit my axios instance.  I'd be stuck adding the interceptor, arbitrarily calling axios, getting the captured URL and then removing the interceptor so that other things could use it for real requests.\nSeems like that might be too far into workaround turf.\n\nUse case...\nAll of this is unrelated to axios, so I'm not so much asking you to buy into what I've got going for myself, just that axios is figuratively a millimetre away from being able to help out:\nMy use case is that I statically generate my route table from my server side framework as some JS config objects.  If I have a portion of my UI that needs an <a href download link, or an image src, I want to use the routing table that's being turned into axios config already.\n\nAgain, feel free to just not care about all that.  What I'm really talking about is something axios is already doing internally.  Exposed as a feature, it would be a method on axios that does everything up to but not including sending a GET request.  Instead, all it returns is the URI it would have tried to reach out to.\nThe rationale...\nRather than me recursively merging config structures and then clumsily concatenating strings - or taking on another dependency that literally does what axios is already doing internally -- I'm sure somewhere inside of axios, it assembles the scheme, host, port, path, hash and query for a URI before sending a request.\nSo, given axios is already able to digest its configuration schema into a viable request URI, it would be nice to get access to it too.\nNote: I still want axios as an HTTP client, but the neat thing here is that a configurable HTTP client is a superset of a request URI builder.\n\ud83d\ude04 - hope that all makes sense!. Haha, well I won't call it shutting down, but the issue is that I don't want the URI of the instance, I want the URI of the result of a call to request on a configured instance.\nSo, getting the values from the instance would only get me up to everything but the last step.  As I mentioned, I have a utility class that manages configuration structures to named routes:\n```typescript\n    public async call(name: ConfiguredRouteKey, routeParametersOrConfig?: any|Partial, extraConfiguration?: Partial) {\n    const route = this.getRoute(name);\n\n    const configuration = this.createAxiosRequestConfiguration(\n        route,\n        routeParametersOrConfig,\n        extraConfiguration || routeParametersOrConfig\n    );\n\n    const request = this.axios.request(configuration);\n    const response = await request;\n\n    return response.data;\n}\n\n```\nThe call to this.axios.request receives the value configuration, which has information that wouldn't be included if I only used the instance itself.  It would be missing all the good bits.\n\nI should note -- when I call this.axios.request(configuration), the request is sent immediately.  There's no untriggered representation of a request in axios, and that's okay.  If in some other universe, axios returned an un-triggered request object, then your method would almost definitely be applicable to such a construct.\nI'm not asking that axios provide such an object.\nInstead, I think to remain consistent with the \"trigger the request immediately\" behaviour, this would just need to be another method.  In my case, it might look like:\ntypescript\nthis.axios.getUri(configuration);\n...inside a similar method to the one I posted above.  No request would be triggered in that case, the URI would be built based on the configured axios instance plus the configuration object that has all the route specific information to tack on.. Yeah, same!  I'll close it now, I think we're all happy -- hah.. Woops!  I should have known that...  \ud83d\ude04 \nAlright, change made!. Yeah, kind of wondering the same thing lately.... ",
    "jmonster": "I just ran into this same issue. It literally just hangs and no errors are thrown. I run the same script 10x and 2 of them just hang.\n```js\nconst baseURL = \"http://somewhere\";\nconst axios = require('axios').create({\n  baseURL,\n  timeout: 1000,\n  params: { apiKey: someKey }\n});\naxios\n.get(uri)\n.then(({ data }) => {\n  console.log('this gets called about 5 times and then the entire app just pauses waiting for the rest'); \n  callback(null, data);\n  })\n.catch((err) => {\n  console.error(err); // this doesn't print anything when things are going badly (but it does when a network request legit fails)\n});. ",
    "nastycoder": "We ran into the same problem. As a work around we are leveraging a CancelToken and setTimeout combo.. ",
    "PhilSwift7": "try using 0.19.0-beta.1, I think #1040 fixed it and it's fixed there.. Depending on the error you can access the response object on the .response property of the error object:\naxios.post('example.com/404', data)\n    .catch(err => {\n        console.log(err.response.data);\n    });\nerr is https://github.com/axios/axios/blob/d59c70fdfd35106130e9f783d0dbdcddd145b58f/lib/core/enhanceError.js#L18. ",
    "ashersaupingomez": "Any possibility of getting this working with defaults as opposed to having to create an instance?. ",
    "samxcode": "I have also meet this problem.. ",
    "vasilich6107": "Hey)\nMe too! In axios 0.18.0\nIf I try to retry the request with axios(originalRequest) it will prepend baseURL second time. ",
    "shirbr510": "this is quite weird cause I just had the opposite case.\nmy endpoint expects /api/v1/organizations/ but if I send it /api/v1/organizations and it responds a 301 status, it automatically does a GET request instead of POST.. ",
    "junj1e": "yes\uff0cI also meet the problem. when using the axios config onuploadProgress in electron. The error info is below.\nUncaught (in promise) TypeError: request.upload.addEventListener is not a function\n    at dispatchXhrRequest (xhr.js?b50d:156)\n    at new Promise (<anonymous>)\n    at xhrAdapter (xhr.js?b50d:12)\n    at dispatchRequest (D:\\pyramid\\node_modules\\axios\\lib\\core\\dispatchRequest.js:59)\nhow to solve it?. #1630 is the same problem . ",
    "camelDx": "I use Mock, It has change XhrRequest this object\u3002And it's new name MockXhrRequest \uff0c it doesn't has upload event. So you could find problem about this way in the electron\uff1fHas it change the XhrRequest of object.\nAt 2019-01-24 17:13:19, \"junjie\" notifications@github.com wrote:\nyes\uff0cI also meet the problem. when using the axios config onuploadProgress in electron. The error info is below.\nUncaught (in promise) TypeError: request.upload.addEventListener is not a function at dispatchXhrRequest (xhr.js?b50d:156) at new Promise () at xhrAdapter (xhr.js?b50d:12) at dispatchRequest (D:\\pyramid\\node_modules\\axios\\lib\\core\\dispatchRequest.js:59)\nhow to solve it?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.. I use Mock, It has change XhrRequest this object\u3002And it's new name MockXhrRequest \uff0c it doesn't has upload event. So you could find problem about this way in the electron\uff1fHas it change the XhrRequest of object.\nAt 2019-01-24 17:13:19, \"junjie\" notifications@github.com wrote:\nyes\uff0cI also meet the problem. when using the axios config onuploadProgress in electron. The error info is below.\nUncaught (in promise) TypeError: request.upload.addEventListener is not a function at dispatchXhrRequest (xhr.js?b50d:156) at new Promise () at xhrAdapter (xhr.js?b50d:12) at dispatchRequest (D:\\pyramid\\node_modules\\axios\\lib\\core\\dispatchRequest.js:59)\nhow to solve it?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.. ",
    "leandroferreira": "See https://github.com/axios/axios/issues/1469. ",
    "robertleeplummerjr": "We had a similar issue in an native app where we use webviews which use safari on ios and would fail only in that environment.  The response was a very nondescript: \"Error: Network Error\".  No warnings, no information, just essentially silence.  It ended up being that ios + safari (around v12?) puts a sort of lock on the browser's XMLHttpRequest's and setTimeout's when the browser isn't visible.  We had animated the webview out of view and allowing the user interface on mobile to set settings that would trigger the webview to fire off more events that would result in the above error.\nWe were able to get around this issue by converting out call from:\njs\nfunction event() {\n  callbackThatSetsOffRequest();\n}\nto wrapping with a simple setTimeout:\njs\nlet timeoutId = null;\nfunction event() {\n  if (timeoutId) {\n    window.clearTimeout(timeoutId);\n  }\n  timeoutId = setTimeout(() => {\n    callbackThatSetsOffRequest();\n  }, 3);\n}\nWe set the milliseconds to 1 at first with a lot of success, but it failed once in 50 attempts, so we bumped it to 3.\nI've not seen this documented anywhere, but only was able to infer that it is a behavior because no matter how many times I tried, I couldn't get something like setTimeout(() => alert(\"hi mom!\"), 1); to trigger while the webview was out of focus.  The good news is that as soon as the webview came back into focus, setTimeout would continue where it left off, and XMLHttpRequest is restored to proper functionality.. ",
    "manniL": "I can second this. Related: https://github.com/axios/axios/issues/748. As long as brotli isn't support by Node natively, I'd suggest setting the Accept-Encoding header to gzip, deflate by default (in a node environment) and not accept Brotli when used on Node.js. ",
    "Mattwmaster58": "What needs to be done to move this issue forward? A PR?. ",
    "therealmarv": "@Mattwmaster58 a brotli JS based decompression could work with \"case\" handling as I showed in the bug report. So yes, a PR is needed. There are some brotli JS libraries available.. ",
    "olsonpm": "I just spent a long time wrestling with this - the issue isn't with axios but how chrome deals with unhandled rejections.\nFor example, this causes your issue\n<head>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.js\"></script>\n  <script src=\"/unhandled-rejection-code.js\"></script>\n</head>\nbut if you wget that exact resource then serve it locally, your unhandledrejection hook works as expected\n<head>\n  <script src=\"/axios.js\"></script>\n  <script src=\"/unhandled-rejection-code.js\"></script>\n</head>\nI think it has something to do with this, but I'm not sure.. ",
    "githoniel": "Chrome's CORS protection, error threw from different domain can't be caught.\nIt can be resolve by using a promise polyfill that support 'unhandledrejection'. after use interceptors below \ninstance.interceptors.response.use(() => {} , (e) => {\n    error.type = NetError\n    return Promise.reject(error)\n})\nI found getaddrinfo EAI_AGAIN askjx.test-dns.com:80 will throw twice that cause this bug\nError come from here\n`` axios/libs/adapters/http.js Line 197\n    req.on('error', function handleRequestError(err) {\n      if (aborted) return;\n      reject(enhanceError(err, config, null, req));\n    });\n. resolved by catch error frominterceptors`. ",
    "jwu910": "@kyoukhana Any update? Ran into a similar issue with this. . ",
    "gaofang": "I have recently met this problem,I looked at axios's source code and found the problem.\nFInd function 'merge' in util.js, and you can find this mege function has defect for Array.\nMake the following change and your problem will be solved.\n```\nfunction merge(/ obj1, obj2, obj3, ... /) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n    // add this code for array \n    if (isArray(result[key])) {\n        result[key].push.apply(result[key], val);\n        return\n    }\n    // add this code for array\n\n  result[key] = merge(result[key], val);\n} else {\n  result[key] = val;\n}\n\n}\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n```\n. ",
    "rogercornet": "I have experienced the same issue and found the problem you report in the merge function in utils.js\nI tried the solution that @gaofang brings, but did not worked on my case. I had objects inside the array and those objects were duplicated.\nMy payload structure was: \nconst payload = { string: \"abc\", arrayOfObjects: [ {a: \"a1\", b:\"b1\"}, {a: \"a2\", b: \"b2\"} ] }. \nI solved doing the following:\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    // Check if is Array and it's not an Array of functions (for transformRequest and transformResponse cases)\n    if (isArray(result[key] && typeof result[key][0] !== 'function') { \n       result[key] = val;\n    } else if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = merge(result[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}. ",
    "shaodahong": "@emilyemorehouse thanks. ",
    "hiyangguo": "I have the same problem. This is the source\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%40/gi, '@').\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n. @hezhongfeng I think so .You can set paramsSerializer to resolve it . . ",
    "hezhongfeng": "@hiyangguo \nI think the encode  func is not be executeed.. ",
    "ourfeel": "I don't understand what do this func. ",
    "ericmdantas": "I'm not familiar with the implementation of interceptors in axios, but if you call .use(()=>{}) on it, I'm pretty sure it'll add the passed function to the existing array of interceptors. Pretty much like middlewares on Node.js's Express.\nSo, in your case, you'll have to setup the interceptors somewhere else, not inside a function that's always called.. I'm not familiar with the implementation of interceptors in axios, but if you call .use(()=>{}) on it, I'm pretty sure it'll add the passed function to the existing array of interceptors. Pretty much like middlewares on Node.js's Express.\nSo, in your case, you'll have to setup the interceptors somewhere else, not inside a function that's always called.. Awesome :smile: . Awesome :smile: . ",
    "mrgurdeep": "@delirius325 It does not gets sent as the header gets deleted here\nhttps://github.com/axios/axios/blob/98080381fa78dcffa91a15e6d25617583d13e533/dist/axios.js#L802\nand if you would debug at this line before and after you would see this.. Interceptor can be added by\n1. take the output of axios.create in a variable\n2. then pass this varaible to the function which would be \nfunction (axios) {\n    axios.interceptors.request.use(inputConfig) {\n        var newconfig = inputConfig;\n        newconfig.headers = {\n            ...inputConfig.headers,\n            Authorization: token\n        }\n        return newconfig;\n    }\n}. Interceptor can be added by\n1. take the output of axios.create in a variable\n2. then pass this varaible to the function which would be \nfunction (axios) {\n    axios.interceptors.request.use(inputConfig) {\n        var newconfig = inputConfig;\n        newconfig.headers = {\n            ...inputConfig.headers,\n            Authorization: token\n        }\n        return newconfig;\n    }\n}. Try it with postman or some other tool. If it works, it should work with axios. I don't think there is any limit.. Try it with postman or some other tool. If it works, it should work with axios. I don't think there is any limit.. ",
    "luc-tuyishime": "how to make register form with dropdown select in react with axios?. ",
    "arivanandan": "I supposed I used it wrong.\nChanged it to:\nconst params = { post }\naxios.post(url, null, { ...headers, params }). ",
    "frangeris": "Same error, different URL, seems related to the faq that since 0.9.2 (including 0.10.x) node.js now validates certificates by default.\nError: Hostname/IP doesn't match certificate's altnames: \"Host: .us-east-1.amazonaws.com. is not in the cert's altnames: DNS:apigateway.us-east-2.amazonaws.com\". ",
    "talwaserman": "So it must by another configuration in my environment. Thanks for the answer\n\u05d1\u05ea\u05d0\u05e8\u05d9\u05da \u05d9\u05d5\u05dd \u05d1\u05f3, 9 \u05d1\u05d9\u05d5\u05dc\u05d9 2018, 19:20, \u05de\u05d0\u05ea Camron Flanders \u200f\nnotifications@github.com:\n\n@talwaserman https://github.com/talwaserman I think we'll need more\ninformation. I, and many others, successfully use yarn to install this\nlib. I've never \"enabled yarn\" in any of my published npm packages and it\nhasn't caused any issues\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/axios/axios/issues/1652#issuecomment-403536035, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AEj8kunHZcEZmlZ_nMF_PM4fHKATdq6Bks5uE4KvgaJpZM4VDwz8\n.\n. \n",
    "traviscrist": "This would be very helpful for those using typescript as well so that socketPath can be used without building from a hash of github master. The issue was resolved in https://github.com/axios/axios/commit/524f5bf10a29d5ebd702e0867ccd63809bfd6c74. ",
    "rolledback": "Any update on a 0.19 @emilyemorehouse ? \ud83d\ude41 . Awesome! Thank you. \ud83d\ude04 . ",
    "Blackslash333": "Same issue here. ",
    "mkardas91": "try change options from\nlet options = {\n    headers: {\n      'Authorization': 'Bearer ' + this.$session.get('user').idToken,\n      'responseType': 'application/vnd.ms-excel'\n    }\n  }\nto\nlet options = {\n    responseType: 'blob',\n    headers: {\n      'Authorization': 'Bearer ' + this.$session.get('user').idToken,\n    }\n  }\n. Good option is also use https://github.com/kennethjiang/js-file-download\nconst download = require('js-file-download');\naxios.get(url, {\n  responseType: 'blob',\n})\n.then(res => {\n    download(res.data, 'Detail_Blast.xls');\n })\n. ",
    "dyw934854565": "same issue. same issue. my problem is: frontend host A\uff0capi host is B.\nI set cookies with JS, when i send Ajax with axios, i found cookie not send. i debug it for a whole day to find it will cookies in host B will send with Ajax, not host A.\nMaybe you met the problem as me. ",
    "kunvarsingh": "I want to solve this issue,\nBut how can i run this projects, I have clone it and make new branch for issue, and install npm.\nand i am trying to rum \"npm start\" then it is not running.\ncan anyone help me for run this project???. By design, domain names must have at least two dots; otherwise the browser will consider them invalid. (See reference on http://curl.haxx.se/rfc/cookie_spec.html)\nWhen working on localhost, the cookie domain must be omitted entirely. Just setting it to \"\" or NULL or FALSE instead of \"localhost\" is not enough.\nFor PHP, see comments on http://php.net/manual/en/function.setcookie.php#73107.\nIf working with the Java Servlet API, don't call the cookie.setDomain(\"...\") method at all.\nOR check with\nhttps://stackoverflow.com/questions/1134290/cookies-on-localhost-with-explicit-domain. ",
    "PawelJ-PL": "It isn't problem with loaclhost domain. For test purposes I've added entry 127.0.0.1       localhost myapp1.api myapp2.api in my /etc/hosts and problem is the same:\nWorking example:\n\nbackend defined as myapp1.api:9000\nfrontend as myapp1.api:8080 (in browser)\n\nResult:\ncookie sent in first request\nNot working example:\n\nbackend definied as myapp1.api:9000\nfrontend as myapp2.api:8080 (in browser)\n\nResult:\ncookie not sent\nIn spare time I will try to prepare and publish example project. I've found solution. The problem was GET request (there is no preflight for this method). The workaround is adding non standard header for request (for example X-Version), so preflight request will be performed.\nDuring debugging I've found one more problem: Ghostery Firefox extension is adding some extra headers to each request (so CORS is failing), so I removed this extension.. ",
    "peter527": "I met the same problem,. ",
    "liunian1004": "i get same problems. i set all steps. but not send cookie. ",
    "SeanBurt": "i also have this problem, who can help us?. ",
    "pthorsley": "For now to get past this error, I am using a POST, such a waste of time to try to figure out why Axios does not support just simple HTTP methods, driving me nuts, might have to change libs. . @rhyspang  just use a post so much easier and gets you moving quickly, using .net core and works great.\nhowever have not tried @PawelJ-PL  suggested, that might be worth some investigation.. don't use django but might take a look after I am doing sucking up elixir. :) . ",
    "ijse": "I have the same problems.   Use fetch() that works. . ",
    "nevermo2013": "\u6211\u9047\u5230\u4e86\u540c\u6837\u7684\u95ee\u9898,\u8de8\u57df\u8bf7\u6c42\u65e0\u8bba\u600e\u4e48\u8bbe\u7f6eaxios.defaults.withCredentials = true \u90fd\u65e0\u6cd5\u53d1\u9001cookie. \u6211\u9047\u5230\u4e86\u540c\u6837\u7684\u95ee\u9898,\u8de8\u57df\u8bf7\u6c42\u65e0\u8bba\u600e\u4e48\u8bbe\u7f6eaxios.defaults.withCredentials = true \u90fd\u65e0\u6cd5\u53d1\u9001cookie. ",
    "liyun-li": "Little late to the party but I've been bashing my head against the wall on this.\nI think the issue is not caused by axios but by your browser(s). By default, your browser refuses to send cookies to a \"remote\" location.\nI resolved my issue by using 127.0.0.1 as my host instead of localhost. For anyone who's experiencing this problem during local development, I recommend assuring that your domain name isn't localhost but 127.0.0.1.\nHope this helps.. ",
    "luckcoding": "@ijse +1. ",
    "rhyspang": "same issue. ",
    "DillionApple": "I solved the problem. It turns out to be the wrong configuration in my Django backend. Since Django 2.1+ has introduced some new security features, I need to add these two lines in my settings.py: \nSESSION_COOKIE_SAMESITE = None\nCRSF_COOKIE_SAMESITE = None. ",
    "ppdeassis": "I'd like to support this change too.\nThere's an old PR https://github.com/axios/axios/pull/1041 to solve it.. I'd like to support this change too.\nThere's an old PR https://github.com/axios/axios/pull/1041 to solve it.. ",
    "Mactaivsh": "Yes, I've notice this weird behavior too. If this behavior was made in purpose, it should be well document it.. ",
    "lili21": "feature instead of bug ? . ",
    "jeffbaldwinjr": "I think I have been seeing a similar issue to this. Here is my test code, each instance has the Test header set to test, even if I set headers.common\n```js\n'use strict';\nconst axios = require('axios');\nconst request1 = axios.create({baseURL: 'http://www.google.com'});\nconst request2 = axios.create({});\nrequest1.defaults.headers.common.Test = 'Test';\nconst request3 = axios.create({baseURL: 'http://www.github.com', headers: {common:{}}});\nconsole.log(Request 1 BaseURL: ${request1.defaults.baseURL} and Headers:);\nconsole.log(request1.defaults.headers.common);\nconsole.log(Request 2 BaseURL: ${request2.defaults.baseURL} and Headers:);\nconsole.log(request2.defaults.headers.common);\nconsole.log(Request 3 BaseURL: ${request3.defaults.baseURL} and Headers:);\nconsole.log(request3.defaults.headers.common);\n```. ",
    "hayk94": "This issue is still not fixed, even with the pr\nSuggestion by @fqborges acts as a workaround. ",
    "nicolasflorth": "@sprlwrksAprilmintacpineda How did you solved your problem? I am in the same position and I can't find anything that can help. Can you post your solution please? . ",
    "msssk": "@nicolasflorth the public adapter API is working well enough for me. Based on the docs it looks like response transformers and interceptors will be skipped if you don't use the settle function, but if you don't need them you can simply pass a function as the adapter property on your axios config:\njavascript\nfunction myAdapter (config) {\n    // here you can check config.url or anything else\n    return Promise.resolve({\n        data: someMockDataObject,\n        status: 200,\n        statusText: 'OK',\n        headers: {},\n        config: config,\n        request: {},\n    });\n}. ",
    "darekg11": "I am having the same issue, happening only on IOS (on Android everything is working fine)\nPOST with headers is working\nGET with headers behaves like headers were not passed\nI can confirm that by wireshark, in case of GET request no headers are added.\nReact-Native version: 0.55.2\nAxios: 0.18\nIntresting notes below:\nAs soon as I launch React Native debugger -  a 3rd party tool for debugging React Native Apps, result is still the same but as soon as I switch on Network Inspector headers are added correctly.\nHere is the link to the React Native debugger -> https://github.com/jhen0409/react-native-debugger/blob/master/docs/network-inspect-of-chrome-devtools.md. ",
    "cmendes0101": "I'm having the same issue. With RN 0.56.0 and axios 0.18.\nAndroid works as expected then for iOS I have it switching to use Fetch for now.. ",
    "jevonch": "Hello guys, already solve this.\njust set with this way :\naxios.defaults.headers.get['ID']=res;\nit will solve the problem\ndont use \nheaders: {\n'Content-Type': 'application/json',\n'Authorization':accessToken,\n'ID':res\n}\nwill give different result. ",
    "lucasluca": "I changed axios to fetch, and it resolved the issue. ",
    "ihd2911": "When i console log headers, there is no content-type in it,\nbut when i see request headers, Content-Type: text/plain;charset=UTF-8 is present. ",
    "Dinuz": "@chobo2 what I do is choosing a time limit (eg 2 minutes), and check in the request if the refresh token it\u2019s still valid (if not, logout and redirect to login). If the refresh token is valid, then check the access token expiration time, again here I use a safe time, meaning if I am close to expiration I refresh otherwise I proceed doing nothing except setting in the header the access token (or if not required leaving it empty). \nI use a Vuex solution to manage the state, and I get the data (expirations, tokens etc) from there.\nThe actions in my store are involving calls to my axios client setup(for calling my backend api). Here you need to be particularly careful because if for example you use the same axios instance to call a method that is referred inside of your interceptor you gonna have a circular dependency problem.\nThe way in which I solve this is defining 2 other axios istances, with their respective interceptors; one for the refresh token (the interceptor set the header to refresh token), and one for not Auth required calls (eg logout), and the interceptor is just a basic one that sets url and options that I want.\nThe axios calls in your client api are all made with the instance that triggers the refresh(the first one I described with the time limits), except the call to the refresh endpoint that uses the refresh interceptor, and the call to the logout(or any other not Auth required method that you need).\nThis works extremely well, you cannot have failures because the token check is made in the request (obviously choose your time limit wisely depending on your system - it should take care of concurrently api calls).\nI also have an interceptor in the response, but it only handles potential weird errors on server side(like lost connection, page not found etc).\nTook me a bit to get this working properly, and only due to the circular dependency(I couldn\u2019t really hijack the first interceptor alone).\nI am actually traveling and writing you from my phone, but if you need some help please ask and I can put some code as soon as I land and able to open my laptop.\nCheers. ",
    "bennnjamin": "Thanks I had this exact issue with concurrent 401s and I was able to use your solution to fix it. Hello, my implementation is different but I can confirm it works. Call setupAxios(axios) before you use it to make authenticated requests. In order to test, you will have to clear your JWT before making a request. If you use redux you'll need a special action for this. I use Session Storage so I can clear it use Debug Console in a browser.\nSee #1676 for an approach that handles concurrent 401s as a result of concurrent requests with an expired token.\n```javascript\nexport function setupAxios(axios) {\n  setJwtIfExists();\n  axios.interceptors.response.use(function(response) {\n    return response;\n  }, function(error) {\nconst originalRequest = error.config;\n\nif (error.response.status === 401) {\n\n  originalRequest._retry = true;\n\n  return refreshJwt().then(({data}) => {\n    originalRequest.headers['Authorization'] = 'Bearer ' + String(data.token);\n    return axios(originalRequest);\n  }).catch((resp) => {\n    store.dispatch(logout(1)) //logout on failure to authenticate (e.g. expired refresh token)\n    return Promise.reject(resp)\n  });\n}\nreturn Promise.reject(error);\n\n})\n}\nexport function refreshJwt() {\n  const refreshToken = window.localStorage.getItem('refresh_token');\n  return axios.post('/tokens/refresh', {token: refreshToken}).then((resp) => {\n    window.sessionStorage.setItem('token', resp.data.token);\n    setJwtIfExists();\n    return resp\n  })\n}\nfunction setJwtIfExists() {\n  const token = window.sessionStorage.getItem('token');\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n  } else {\n    axios.defaults.headers.common['Authorization'] = null;\n  }\n}\n```. ",
    "kooff88": "it's OK nows. Thanks.. ",
    "chancedickson": "You can currently use HTTP(s) proxies with the proxy option. You can create an axios instance with these options so you don't have to specify them with each request. Socks proxies are not supported.\n```javascript\naxios.get({\n  url: '/test',\n// 'proxy' defines the hostname and port of the proxy server\n  // Use false to disable proxies, ignoring environment variables.\n  // auth indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an Proxy-Authorization header, overwriting any existing\n  // Proxy-Authorization custom headers you have set using headers.\n  proxy: {\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  }\n});\n// or\naxios.get('/test', {\n  proxy: {\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  }\n});\n// or\nconst inst = axios.create({\n  proxy: {\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  }\n});\ninst.get('/test');\n```. @emilyemorehouse Added the documentation \ud83d\ude42. ",
    "Imbuedhush": "Thx, i saw it in 'http' file\nWould be cool if socks will be supported soon\nthere is no npm package that have this feature( axios+proxies )\nMy current solution is - edit default lib\\adapters\\https.js\nand depending on http/https and proxy type(added as custom config options) - set different agent : socks-proxy-agent, https-proxy-agent, http-proxy-agent\n. ",
    "cyberwombat": "I've had a similar issue and can confirm that this method https://github.com/axios/axios/issues/847#issue-222517050 works. I am not able to use an https proxy but have it working with http.  I am using hookbin.com for testing and it correctly shows my proxy URL.. ",
    "popuguytheparrot": "@Axnyff I have dev server for react. From localhost i post request to api on https.\nwhen i use fetch for post request cookie set in browser but axios with option withCredentials didn't. i close issues because maintainer is not answer. ",
    "OriAmir": "@delirius325  thanks for the example , i understand the idea..\nI try to understand how I add my own enviroments variables to the webpack files\nwhat is exactly 'base_url' variable? because when I console him I see it's empty , I can initialize him, but what if I want another variables depend on the environment ?\nthanks again .\n. @OpenGG @delirius325 \nI try without the baseUrl but it's just add me all path like in the example that in my main question I asked.\n@delirius325 Many Thanks for your great help , I will try to add this like you say , I not sure that in create-react-app add environment variables like this but I will give it a try anyway :). @OpenGG @delirius325 @ajbraus  I back again to this problem..look the senrio.\nI create  a request when I am on this page: http://localhost:3000/admin/main and in componentdidmount of this page: http://localhost:3000/admin/main/recentImages\n\nThis is the watch about window.location obj:\n\nThen,in network you can see request send to all path and not just to host , and I get 404 not found:\n\nIt's really wired. just when i add the base URL it's work as expected. Thank you very much for your help.. @OpenGG So what the issue is? can you help me to figure out how to fix that?\ntnx!. ",
    "ajbraus": "+1. ",
    "StarkL": "Like this response header, only is added to the security response header at background , then, the front end can get it.. Like this response header, only is added to the security response header at background , then, the front end can get it.. ",
    "chrisbraddock": "Try adding this to your stencil.config.js:\nnodeResolve: {\n  browser: true\n},\n\n. @LalitKushwah I don't see it in the docs either. See this PR.. ",
    "LalitKushwah": "Thanks @chrisbraddock It worked, \nCan you please explain the mechanism behind this code ? I haven't found such config in stencil official doc.. ",
    "akankshagore": "ApiUtils.txt\nAbove is the code. I use getResponseForApi() to call api's just pass them header's and different service urls and data. Api is hit successfully, even receive response json in network, but nothing displays on IE and after debugging found response contains undefined. Don't know why? Its works fine for other browser except IE. If you could help it will great. \n. Whats the solution? Why we receive proper response in other browser and not in IE anything specific? or missed out something??\n. Still issues is not solve. Unable to view UI elements.. ",
    "105th": "Same problem\nCode example\n```javascript\n'use strict'\nimport Axios from 'axios'\nimport { parseResponse, handleError } from '@/utils.js'\nexport default {\n  fetchCountries () {\n    return new Promise((resolve, reject) => {\n      Axios.get('/1.0/countries')\n        .then(response => {\n             // Here response is already undefined\n             resolve(parseResponse(response).data)\n        })\n        .catch(err => reject(handleError(err)))\n    })\n  }\n}\n``. @akankshagore in our case, we remove Promise-wrapper, because Axios already return promise. I didn't know why only this method didnt work (only for build-version, and only for IE11)\nCorrect code:\n```javascript\n'use strict'\nimport Axios from 'axios'\nimport { parseResponse, handleError } from '@/utils.js'\nexport default {\n  fetchCountries () {\n    return Axios.get('/1.0/countries')\n        .then(response => {\n             return parseResponse(response).data\n        })\n        .catch(err => {\n             return handleError(err)\n         })\n  }\n}\n```. ",
    "hyperking": "I have ran into the same issue today. I discovered a fix by simply adding the es6 poly-fill for promises\nhttps://www.npmjs.com/package/promise-polyfill. ",
    "frankbolviken": "Having the same issue. Alot of people are having this issue.\nIn my case, using react, redux, redux-thunk, axios and this approach:\n```\nexport const fetchSomething = () => {\n  return async dispatch => {\n    dispatch(actions.fetchRequest());\ntry {\n  const something = await api.fetchSomething();\n  return dispatch(actions.fetchSuccess({ something }));\n} catch (error) {\n  return dispatch(actions.fetchError());\n}\n\n};\n};\nexport const fetchSomething = () => {\n  return client.get(/v1/url).then(response => response.data);\n}\n```\nI get a infinite refresh loop in IE11 and IE11 only.\nSeems like the instant it does client.get the browser reloads and the page re-renders, making it difficult to debug.. ",
    "tribis": "@frankbolviken \nFrom the documentation:\n``javascript \n// Want to use async/await? Add theasync` keyword to your outer function/method.\nasync function getUser() {\n  try {\n    const response = await axios.get('/user?ID=12345');\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\nNOTE: async/await is part of ECMAScript 2017 and is not supported in Internet Explorer and older browsers, so use with caution.\n```\nSo I guess the promise polyfill does not cover async/await. ",
    "akupaka": "I had maybe the same issue. Also at some point I saw something similar to infinite loop as @frankbolviken mentioned.\nI'm using webpack + babel (+@babel/polyfill) + react, IE 11.253.17763.0.\nThe folowing options resolved issue for me.\n\nuseBuiltIns: 'entry' & import \"@babel/polyfill\".\nThis actually results in the biggest output file size.\n\nwebpack.config.js:\nentry: './src/app.js',\nmodule: {\n            rules: [{\n                test: /\\.js$/,\n                include: [ path.join(__dirname, 'src') ],\n                exclude: /node_modules/,\n                loader: 'babel-loader',\n                options: {\n                    presets: [\n                        [\n                            '@babel/preset-env',\n                            {\n                                useBuiltIns: 'entry',\n                                targets: '> 0.25%, not dead'\n                            }\n                        ],\n                        '@babel/preset-react'\n                    ],\n                    plugins: [\n                        '@babel/plugin-proposal-class-properties',\n                        '@babel/plugin-proposal-object-rest-spread'\n                    ]\n                }\n            }]\n}\napp.js:\nimport \"@babel/polyfill\"; // import before everything else\n//...\n\nuseBuiltIns: 'usage'.\nModerate output file size.  Also I have no idea why this option does not work without workaround.\n\nwebpack.config.js is the same except:\nuseBuiltIns: 'usage'\napp.js:\n```\n// import \"@babel/polyfill\" // do not import whole module\n// workaround\nif (false) {\n    const dummyPromise = new Promise();\n}\n```\n\nManually import es6.promise module.\nThe smallest output file size but I guess some imports can be missed.\n\nwebpack.config.js:\npresets: [\n                        '@babel/preset-env',\n                        '@babel/preset-react'\n              ]\napp.js:\nimport 'core-js/modules/es6.promise';\n//.... ",
    "tjjjwxzq": "Not sure, when I try out the code pens with different urls that result in a connection refused (eg. localhost, or a non-existent domain name) the ontimeout callback does not seem to be fired. Related: https://github.com/facebook/react-native/issues/11666 (it's marked as resolved, but the solution is hardly satisfactory. Still not clear whether it's an RN-level issue or an axios issue). Not sure, when I try out the code pens with different urls that result in a connection refused (eg. localhost, or a non-existent domain name) the ontimeout callback does not seem to be fired. Related: https://github.com/facebook/react-native/issues/11666 (it's marked as resolved, but the solution is hardly satisfactory. Still not clear whether it's an RN-level issue or an axios issue). ",
    "Niandalu": "Thanks for reminding. I haven't noticed that Edge have the same issue. I'll give it a try when I got time.\nAs for your JSON.parse(\"string\") concern, it should be fine, since the JSON.parse gets wrapped with try ... catch just like what the original transformResponse did.. @RikkiGibson Edge seems working fine with responseType. I've tested upon the latest Edge vm.\nThe result doesn't match what described in the browser compatibility table... Maybe the table is describing some legacy version of Edge.\n. ",
    "ryuuji3": "I just wanted to comment that I have a work-around, which is not perfect.\nYou can simply just pass the URL.toString() as the axios request URL. Or concatenate the URL with URLSearchParams.toString(). \nI didn't see a feature request so I'll just go ahead and make one then.. @mindriven Thank you for jumping on that so fast! . ",
    "fridaydream": "in the end, I found that I have write the worry address, https => http. But postman is ok,request-promise give me 404, but axios give me this error message, I don't think it is easy for people to understand that.. ",
    "amitzur": "Hey @delirius325 ,\nAKAICT node buffers should be supported as well. From the readme:\n// `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\nFor example this line of code specifically handles buffers:\nhttps://github.com/axios/axios/blob/master/lib/adapters/http.js#L41. thanks!. Thanks for the quick turnaround!\nDo you have an idea why this would happen though?. thanks for the investigation @delirius325 !\nhow did you inform the node team so that they opened an issue?. Fantastic work, thank you so much :). ",
    "danielreiser": "Is you api endpoint publicly available?\nIf so, can you edit this stackblitz https://stackblitz.com/edit/js-93xybc to further investigate your issue?\n. ",
    "MaximVanhove": "I'm afraid it's still in development. It's weird though, because once I tried with another library it worked again with axios too. So I switched back to axios and some moments later it just broke again.... ",
    "PLQin": "instance.interceptors.request.use(config => {\n    /* some logic */\n    return  {\n            headers: {},\n            method: config.method,\n            url: \"\"\n          };\n});\nIs the simplest !. ",
    "tradzero": "@OpenGG yeap i use in browser.  thanks. ",
    "ekilah": "@RikkiGibson ah, ok, so it was in fact more complicated. thanks for getting back.\nI'll admit I don't know the intricacies of building a library that works in browsers and Node, and similarly don't know if the TS 3.0 references stuff helps enough. but it'd be great if it does \ud83d\ude1b . ",
    "tevfik6": "Issue seems like #1522\n. ",
    "TobinFrost": "I wanted to integrate an external API running with php, but when I make a GET request to access a resource I do not receive any data, the ..catch () method is executed and the object error is empty.\nmoreover the API has a method of connection: close.\nI also wonder if this is not a proxy problem.. the problem came from the External API, the header did not have \"Access-Control-Allow-Credentials\", or \"Access-Control-Allow-Headers\", and \"Access-Control-Allow-Origin\" either .\nI will close the issue. ",
    "dighan": "All browsers do not forbid the User-Agent HTTP header (e.g Firefox) to be set via XMLHttpRequest.setRequestHeader(): https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name. All browsers do not forbid the User-Agent HTTP header (e.g Firefox) to be set via XMLHttpRequest.setRequestHeader(): https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name. I don't think you can try/catch runtime-errors generated by CORS preflight requests. When testing with vanilla XMLHttpRequest.setRequestHeader('User-Agent', 'foo'), runtime error is displayed in devtools and the catch block is never reached.. I don't think you can try/catch runtime-errors generated by CORS preflight requests. When testing with vanilla XMLHttpRequest.setRequestHeader('User-Agent', 'foo'), runtime error is displayed in devtools and the catch block is never reached.. ",
    "Jeyloh": "Also have this issue with AWS Amplify connecting to Lambda functions, which uses axios for requests.. ",
    "notmessenger": "\n\"axios\": \"^0.18.0\",\nChrome 70.0.3538.110, OS X 10.13.6, Node v10.6.0\n\nAm experiencing the same issue in a React app (though the library being used is not the issue)\nsrc/index.js\n```js\nimport registerAxiosAuthHeaders from './lib/registerAxiosAuthHeaders';\nReactDOM.render(, document.getElementById('root'));\nregisterAxiosAuthHeaders();\n```\nsrc/lib/registerAxiosAuthHeaders.js\n```js\nimport axios from 'axios';\nimport Auth, { JWT_TOKEN_KEY } from 'services/Auth';\nimport Storage from 'services/Storage';\n/*\n * Set the JWT token on every request if one exists\n /\nconst registerAxiosAuthHeaders = () => {\n  axios.interceptors.request.use((config) => {\n    const token = Auth.JWT_TOKEN || Storage.get(JWT_TOKEN_KEY);\nif (token) {\n  config.headers.Authorization = `Bearer ${token}`;\n}\n\nreturn config;\n\n});\n};\nexport default registerAxiosAuthHeaders;\n```\nthe token is retrieved from the Auth service if one has already been set otherwise it will use a value from local storage if it exists\n/src/scenes/Base/index.js\njs\n  componentDidMount() {\n    Auth.setAuthenticationState().then(() => {}\n  }\nthis is the \"application\" component that every route is rendered within.  It displays an app-level loading indicator while it checks if any present tokens (such as from local storage) are active or not.\nsrc/services/Auth/index.js\n```js\nimport axios from 'axios';\nexport class Auth {\n  constructor() {\n    super();\n// The state will be available to any component we inject the Container instance into\nthis.state = {\n  authenticated: null\n};\n\nthis.axios = axios;\n\n}\n/\n   * Whether or not currently authenticated\n   \n   * @returns {Boolean}\n   /\n  async setAuthenticationState() {\n    let isAuthenticated = false;\nif (this.state.authenticated !== null) {\n  isAuthenticated = this.state.authenticated;\n} else {\n  try {\n    await this.axios.get(`${this.api}/v1/authentication/tokens`).then(() => {\n      this.setState({ authenticated: true });\n      isAuthenticated = true;\n    });\n  } catch (e) {\n    this.setState({ authenticated: false });\n  }\n}\n\nreturn isAuthenticated;\n\n}\n}\n```\nMakes a call to our /v1/authentication/tokens which will either return a 401 if token is invalid or 200 if it is valid.\nSo....\nwhat essentially happens is that the first axios.get() (or other) call does not execute the axios.interceptors.request.use() interceptor logic but any subsequent axios.get() (or other) calls  do.  So in the case that @gongshun describes on an initial load or refresh the interceptor logic is not firing but when transitioning to another route it then is.  It's not the route transition causing it mind you, but the fact that the initial call does not execute the interceptor logic but all subsequent calls do.\nI have not looked into the code at all but feels like there's maybe a shifted index or something somewhere in the related logic?\nOur current workaround is to change\njs\nawait this.axios.get(`${this.api}/v1/authentication/tokens`).then(() => {\nto\njs\nawait this.axios\n    .get(`${this.api}/v1/authentication/tokens`, {\n        headers: { Authorization: `Bearer ${Storage.get(JWT_TOKEN_KEY)}` },\n    })\n    .then(() => {\nin setAuthenticationState() in src/services/Auth/index.js since due to our workflow this is the first entry point into the application.  This way the first call has the header in it (via hardcode config) and then all subsequent calls are configured via the interceptor.. ",
    "Larry850806": "Try response.data. Try response.data. ",
    "ustbhuangyi": "I am looking forward to this feature\ud83d\ude00. I am looking forward to this feature\ud83d\ude00. ",
    "oleduc": "This is still an issue and I've create a PR that fixes it without requiring a new feature #2006 . Reading local files using XHR is not supported by most browser as it is a serious security risk. You should use the File Api instead.\nThe fact that this even  works on IOS is curious enough but I know for sure that you cannot do this on chrome unless you start it with the \"--allow-file-access-from-files\" option enabled.. ",
    "pandemm": "This seems to be in the wrong place, as it doesn't look like you're using Axios.. The signature for the method is axios.post(url[, data[, config]]). \nYou might be confusing it with this syntax of sending a request:\naxios({\n  method: 'post',\n  url: '/user/12345',\n});\nIf you move your data to be the second parameter of the post method, it works as you would expect.. ",
    "giggo1604": "@pandemm looks like this is a vue application where axios is exposed as $http on vue components\n@AliBedaer i can't see why this shouldn't work, considering you don't get an error from /oauth/token\nhttps://codepen.io/giggo1604/pen/MqgRZp?editors=1111\nhere is a basic working example. ",
    "robmcguinness": "@huy-lv,\nIs the content-type the same for both responses?. ",
    "kim-knudsen": "I see the same behaviour. I found that in my case the API response would sometimes contain invalid JSON data, i.e. JSON.parse would throw. For some reason Axios seems to swallow this error, and ends up setting the invalid JSON string on the data property.. I see the same behaviour. I found that in my case the API response would sometimes contain invalid JSON data, i.e. JSON.parse would throw. For some reason Axios seems to swallow this error, and ends up setting the invalid JSON string on the data property.. ",
    "nighttiger1990": "I got this problem, too. When i check response.data of problem case, some invalid JSON String like  \" data added to response, that make JSON.parse got error and return string. . I got this problem, too. When i check response.data of problem case, some invalid JSON String like  \" data added to response, that make JSON.parse got error and return string. . I've checked with Axios, XMLHttpRequest, fetch\n1./ Axios and XMLHttpRequest got same problem\n2./ fetch work perfectly\n. I've checked with Axios, XMLHttpRequest, fetch\n1./ Axios and XMLHttpRequest got same problem\n2./ fetch work perfectly\n. @OpenGG it happen on React-Native. Web App work perfectly.\n. @OpenGG it happen on React-Native. Web App work perfectly.\n. @OpenGG can you give me your mail i'll send you api, i can't public that\nhttps://github.com/nighttiger1990/axiosBug.git. @OpenGG can you give me your mail i'll send you api, i can't public that\nhttps://github.com/nighttiger1990/axiosBug.git. @Druthi now im using 'fetch' instead of 'axios'. @Druthi now im using 'fetch' instead of 'axios'. ",
    "Druthi": "Any luck with this issue? I'm facing it too. ",
    "luatnd": "This might not your case but in my case: \nMy API response string is not valid JSON, so axios cannot parse to JSON, then it return raw string instead.. This is not axios issue.\nPreflight request cannot contain any credentials, you're trying to send Authorization with OPTIONS request - which is omitted by the browser, so you didn't send any Authorization header => you did not pass the Basic Auth guard on server => your server would return 401\nPlz configure your server to disable basic auth if request_method === OPTIONS. ",
    "jkirkpatrick": "Edit: removed example code showing @chovy how to use custom headers.. Edit: removed example code showing @chovy how to use custom headers.. @OpenGG - Not a bug, not intended to be runnable, but intended to show how to use custom headers with  poorly documented software. Besides the security implications, do you really expect a full demo showing how to use standard Authorization headers in a code snippit?. @OpenGG - Not a bug, not intended to be runnable, but intended to show how to use custom headers with  poorly documented software. Besides the security implications, do you really expect a full demo showing how to use standard Authorization headers in a code snippit?. ",
    "muzea": "@madebyherzblut paramsSerializer can solve this problem\n```js\nimport axios from \"axios\";\nimport qs from \"qs\";\n// GET /user?ID%5B%5D=1&ID%5B%5D=2&ID%5B%5D=3\naxios\n  .get(\"/user\", {\n    params: {\n      ID: [1, 2, 3]\n    },\n    paramsSerializer(params) {\n      return qs.stringify(params, { arrayFormat: \"brackets\" });\n    }\n  })\n  .then(function(response) {\n    console.log(response);\n  })\n  .catch(function(error) {\n    console.log(error);\n  })\n  .then(function() {\n    // always executed\n  });\n```\nqs uses the RFC3986 serialization parameter by default, or you can choose to use RFC1738.. ",
    "sutra": "Because of these 2 lines:\nhttps://github.com/axios/axios/blob/master/lib/helpers/buildURL.js#L12. ",
    "matthewlowry": "\nI think it would be awesome to add a config option to enforce RFC3986 or not, so that both use cases are handled.\n\nTotally. This PR is basically just the quick and dirty hack I did to get my company's app working again. If I get some free time I'll try to whip up something better.. This is not an axios problem. This is a CORS problem.\nYour page that you are serving from localhost is not permitting a cross-origin request to the API. You need to make whatever is serving up your page on localhost add the appropriate Access-Control-Allow-Origin response header to permit the cross-origin request.. ",
    "cinatic": "Hi,\nwhat is the status here? IMO the encoding of the \"key\" is just wrong \nhttps://github.com/axios/axios/blob/81eaa3db4cf51bd911f98de5aa1ad130b3c55c8e/lib/helpers/buildURL.js#L54. ",
    "lanrain": "tks, get this knowledge. ",
    "nguyentiennghiep": "You are testing asyncronous behavior, you have to test asyncronously as well\nEither call a done callback or return a Promise at the top level when your test is complete...\nsomeone tell me that but i dont know how to return Promise in insde it test. sorry for my bad example code ;D and my bad english too...\nthanks you very very much.. that is exactly what i need ...\nthanks bro @delirius325 . ",
    "JakeSidSmith": "Really need this feature. Was about to open a PR myself. Would be great to get it merged. \ud83d\ude42. Really need this feature. Was about to open a PR myself. Would be great to get it merged. \ud83d\ude42. ",
    "sumanTitan": "Can this be merged if this is all right?. ",
    "mattiash": "Well, I haven't gotten any feedback on my PR from anyone on the axios team. I solved my problem by using got instead. It allows me to specify timeouts for connect and request separately: https://github.com/sindresorhus/got#timeout. ",
    "ryouaki": "I got a issue with the low response. and i fix it by another way. i dont think this is a good way for fix this problem. because the node event loop system will block some timer at sometime. and error will happend.. @mzabriskie can you help me\uff1f. @nickuraltsev could you help me?. @RikkiGibson Yes\uff0cabort a request before the connection, and does not release socket.\nWhen the server side is too slow and no responed for a long time, sometimes setTimeout will be invoked before connection, and \"socket hang up\" will be got. This only appear at connection does not block setTimeout.\nI think for Borwser the request timeout is not the same as connection timeout, But on nodejs I think it is the same. and sometimes the connection block setTimeout. So if we set 10s for timeout ,but the connection block the event loop about 20s, the setTimeout will be fire after 20s.\nmd\npoll: retrieve new I/O events; execute I/O related callbacks (almost all with the exception of close callbacks, the ones scheduled by timers, and setImmediate()); node will block here when appropriate. . @RikkiGibson Thank you for your explain, \nMaybe my english is not good enough. Yes you want to do timeout like borwser .But sometimes the io event will block setTimeout. the setTimeout will not be invoked in time.\nfor my case like I said before:\n1. I set 10s for timeout by setTimeout function.\n2. Send a request to a low server . and the server very busy. and no respond.\n3. The connection will block setTimeout function. until connection finish. Nodejs event loop\n4. Connection finish after 20s, the setTimeout function will be invoked after 20s.\nSo, when connection block setTimeout function, The timeout will be fired more than millseconds you set before.\nThis is my problem.\n. Nobody else?. @aguynamedben @Khaledgarbaya . ",
    "ksairamya": "No. Its not working. I'm just wondering if it is not working due to CORS issue?. ",
    "Venkatuidevloper": "axios.get('url', {headers: \"x-dsi-restful\":1})\n-----It's working fine thank you. ",
    "H4midR": "axios.get('url', {headers: \"x-custom\":1})will change the Request Method to OPTION.\nmy request is : \nRequest URL: http://localhost:9090/poster/verify/queue\nRequest Method: OPTIONS\nStatus Code: 404 Not Found\nRemote Address: [::1]:9090\nReferrer Policy: no-referrer-when-downgrade\nContent-Length: 9\nContent-Type: text/plain; charset=utf-8\nDate: Sun, 17 Mar 2019 16:50:02 GMT\nProvisional headers are shown\nAccess-Control-Request-Headers: x-hamid\nAccess-Control-Request-Method: GET\nOrigin: http://localhost:8585\nReferer: http://localhost:8585/\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36. ",
    "ludbek": "Did you guys mean axios.get('url', {headers: {\"x-dsi-restful\":1}})?. ",
    "dwerynith": "Thank you for your answer,\nmy requests are made on a jamf server that i do not own.\nIs there a way without having to modify the server itself ?. ",
    "pjotrsavitski": "@dwerynith Sorry for proposing a nasty hack, but that could help you. If you do have a backend of your own, then you could create an endpoint and relay the request there. That one would make the request to the third-party server and provide you with the data you need. You could even create a minimalistic middleware service for just doing that. Although it is a nasty hack.\nAs it is not an issue with axios itself, you should really close the issue to prevent unneeded spamming.. ",
    "dparasam": "It looks like the requests are slow with XMLHttpRequest too.  Are you aware of any workaround to make it work on IE with self-signed certificates?. ",
    "kprasadvnsi": "sorry, i was make json object the wrong way. thanks for the quick response tho . ",
    "dtboy1995": "@OpenGG tnanks , It is the specification that provides reference to the package management tool. ",
    "serverlesspolska": "Thanks @OpenGG . adding const adapter = require('axios/lib/adapters/http') to the config solved the problem for me. ",
    "morphatic": "I also had this problem. This thread led me to this part of the Jest docs. I was able to fix the issue by pasting:\njavascript\n/**\n * @jest-environment node\n */\nAt the top of my test file. FWIW, adding:\njavascript\n{\n  // ...\n  \"testEnvironment\": \"node\"\n  //...\n}\nto either jest.config.js or to my package.json file did not work for some reason. Not sure why.... ",
    "wangdejun": "\nI also had this problem. This thread led me to this part of the Jest docs. I was able to fix the issue by pasting:\njs\n/**\n * @jest-environment node\n */\nAt the top of my test file. FWIW, adding:\njs\n{\n  // ...\n  \"testEnvironment\": \"node\"\n  //...\n}\nto either jest.config.js or to my package.json file did not work for some reason. Not sure why...\n\nreally thanks, this solves my problem\n. > I also had this problem. This thread led me to this part of the Jest docs. I was able to fix the issue by pasting:\n\njs\n/**\n * @jest-environment node\n */\nAt the top of my test file. FWIW, adding:\njs\n{\n  // ...\n  \"testEnvironment\": \"node\"\n  //...\n}\nto either jest.config.js or to my package.json file did not work for some reason. Not sure why...\n\nreally thanks, this solves my problem\n. ",
    "zlq4863947": "I solved this problem with the answer in the link below.\nhttps://stackoverflow.com/questions/42677387/jest-returns-network-error-when-doing-an-authenticated-request-with-axios/43020260#43020260. ",
    "wormen": "@OpenGG what should be reflected in the demo?. as it turned out, this funny bug does not apply to axios. ",
    "wxhawk": "noted. thx!. ",
    "vaibhavconqsys": "any other option..... ",
    "wduvan": "Any solution?, in my sorce i have the same error. ",
    "chenshixue": "Refused to set unsafe header \"host\". ",
    "JCMais": "would love this being merged. ",
    "pkl": "I have no idea what happened here, please disregard this :/. ",
    "NoraGithub": "use this NODE_OPTIONS=--max_old_space_size=4096.  use this NODE_OPTIONS=--max_old_space_size=4096. ",
    "DaveStein": "@OpenGG Hm I am not sure how to go about doing that, given that this API is not mine and I don't have a random server to generate an endpoint to give back this value. The API I am using is an authenticated one and I can't put an API key in a test script. Any suggestions?. I believe chunked, chunked might be a bug on external API. I am reporting this to them. At least if my coworkers read https://tools.ietf.org/html/rfc7230#section-3.3.1 correctly.. Gonna have someone check in a bit. Our current hack is below. We'll just always return res.data and see what happens :) But like I said above, not sure that chunked, chunked is valid.\n```\nfunction getData(res) {\n  const transferEncoding = res.headers['transfer-encoding'];\n  if (!transferEncoding || transferEncoding !== 'chunked, chunked') {\n    return res.data;\n  }\nconst splitString = res.data.split('\\r\\n');\n  return JSON.parse(splitString[1]);\n}\n``. My coworker said this is fixedv0.19.0-beta.1`. Oops, sorry. Mistaken. Still broken in beta.. ",
    "gcox": "You can see the raw headers sent by inspecting the response. Here's an example using a response interceptor:\njavascript\naxiosInstance.interceptors.response.use(res => {\n  console.log(res.request._header)\n  return res;\n}, error => Promise.reject(error));\nHowever, the problem with your setup is that you're using Authorization as if it were a config option for axios, which it is not. It is an HTTP header that you need to set. Same problem with contentType. So, you just need to slightly modify your setup like this:\njavascript\nexport const axiosInstance = axios.create({\n  baseURL: getBaseUrl(),\n  timeout: 5000,\n  headers: {\n    Authorization: 'Bearer 14154151',\n    'Content-Type': 'application/json'\n  }\n});\nSee the request config section of the readme for a list of all the options.. If you add a complete example that reproduces the problem on Repl.it I can take a look. . @chobo2 Catch the error, which will have a request property from which you can obtain the raw headers.\n```javascript\nconst axios = require('axios')\nconst getBaseUrl = () => {\n  return \"http://google.com\"\n}\nconst axiosInstance = axios.create({\n  baseURL: getBaseUrl(),\n  timeout: 5000,\n  headers: {\n    Authorization: 'Bearer 14154151',\n    'Content-Type': 'application/json'\n  }\n});\naxiosInstance.get('test')\n  .catch(err => {\n    console.log(err.request._header)\n  })\nOutput...\nGET /test HTTP/1.1\nAccept: application/json, text/plain, /\nAuthorization: Bearer 14154151\nContent-Type: application/json\nUser-Agent: axios/0.18.0\nHost: google.com\nConnection: close\n```. @chobo2 Catch the error, which will have a request property from which you can obtain the raw headers.\n```javascript\nconst axios = require('axios')\nconst getBaseUrl = () => {\n  return \"http://google.com\"\n}\nconst axiosInstance = axios.create({\n  baseURL: getBaseUrl(),\n  timeout: 5000,\n  headers: {\n    Authorization: 'Bearer 14154151',\n    'Content-Type': 'application/json'\n  }\n});\naxiosInstance.get('test')\n  .catch(err => {\n    console.log(err.request._header)\n  })\nOutput...\nGET /test HTTP/1.1\nAccept: application/json, text/plain, /\nAuthorization: Bearer 14154151\nContent-Type: application/json\nUser-Agent: axios/0.18.0\nHost: google.com\nConnection: close\n``. @chobo2 Did you get past this problem?. @AnnoyedDeveloperaxioshas a documented option for basic authentication calledauth`. It is documented in the request config section of the readme.\nFrom the readme:\njavascript\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\nSo, something like this:\njavascript\naxios({\n  method: 'get',\n  url: url,\n  auth: {\n    username: 'your username',\n    password: 'your password'\n  }\n}) \n. @AnnoyedDeveloper It is a CORS problem, which is controlled by server-side configuration. See this comment. IOW, it isn't an axios problem, and isn't related to authentication.. ",
    "m1neral": "@RikkiGibson @aguynamedben @Khaledgarbaya : please review this pull request, it's small, but important! thank you! . ",
    "apxeonTepukc": "I am sorry I meant to post this on stack overflow... . ",
    "AnnoyedDeveloper": "@gcox Nope that did not work either. Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:8080' is therefore not allowed access.\nis displayed in the console.\nMight this be a problem on the server side, that CORS is not enabled but chrome still prevents?. ",
    "sschadwick": "This is probably better suited in the nuxt-specific axios repo: nuxt-community/axios-module.\nFWIW, I am also using the response interceptor instead of onError.\nLastly, nuxt-community/auth-module integrates with @nuxt/axios, manages auth state, and attachs your token to the request headers for you \ud83d\ude03 \n. I handled it like this. Not sure it's the \"right way\" to do it, but this is how I was able to get it working:\njs\n// ~/plugins/axios.js\nexport default ctx => {\n  ctx.$axios.interceptors.request.use(async config => {\n    let token = ctx.app.$auth.getToken('myauthstrategy');\n    let decode = decodeToken(token);\n    let exp = new Date(decode.exp * 1000);\n    let now = new Date();\n    if (exp <= now) {\n      ctx.app.$auth.logout();\n      await ctx.app.$auth.loginWith('myauthstrategy');\n      return Promise.reject('login');\n    }\n    return config;\n  });\n});\n```js\n// ~/nuxt.config.js\nmodule.exports = {\n  auth: {\n    // Auth-dependent plugins\n    plugins: [{\n      src: '~/plugins/axios.js',\n      ssr: true\n    }],\nstrategies: {\n  local:      false,\n  myauthstrategy: {\n    _scheme:                'oauth2',\n    authorization_endpoint: `${conf.cognitoUrl}/oauth2/authorize`,\n    client_id:              conf.cognitoId,\n    redirect_uri:           `${conf.baseUrl}/login`,\n    response_type:          'token',\n    scope:                  [],\n    token_key:              'id_token',\n    token_type:             '',\n    userinfo_endpoint:      `${conf.baseUrl}/userInfo`\n  }\n}\n\n},\n  modules: [\n    '@nuxtjs/auth',\n    '@nuxtjs/axios'\n  ],\n};\n```. ",
    "MrToxy": "\nThis is probably better suited in the nuxt-specific axios repo: nuxt-community/axios-module.\nFWIW, I am also using the response interceptor instead of onError.\nLastly, nuxt-community/auth-module integrates with @nuxt/axios, manages auth state, and attachs your token to the request headers for you \ud83d\ude03\n\n@sschadwick would you be able to provide me an example on how to deal with this with the onResponse please? I will post this as well on the appropriate repo. ",
    "arunkumargan": "+1. ",
    "tinaboyce": "Experiencing the same issue with axios@0.18.0. ",
    "sivasankars": "+1, Same Issue :(. ",
    "sikhote": "Why close this issue? I was seeing something similar.. ",
    "bkd705": "Have you tried mocking it rather than spying on it?\nDownside to mocking is you have to require the library after you mock it, so you'd have to require callApi after you do the mock.\nFor this, I believe you could do something like:\n```js\ndescribe('callApi()', () => {\n  it('...', () => {\n    jest.doMock('axios', () => {\n      return jest.fn()\n    })\nconst { callApi } = require('./api')\n\n// ... constants\n\ncallApi(endpoint, method, data)\n\nexpect(axios).toBeCalledWith({ url: endpoint, method, data })\n\n})\n})\n```\nUsed doMock here so that it is scoped to this specific test.. ",
    "NERDYLIZARD": "Thank you very much. Problem solved by the method similar to yours. StackOverflow.. ",
    "janewang": "+1 I've seen the same thing as well in chrome memory profiler. Please fix.. ",
    "exalted": "Sure thing!\n\n. \n",
    "nilobarp": "@RikkiGibson thanks for saving my Monday. In my case it was the trusted sites that made IE to exclude the header.. @gomezmark i removed the domain form IE's trusted site list.. ",
    "alxhotel": "Thanks @RikkiGibson !\nAlthough I'm trying the code and it feels like the onUploadProgress is only triggered when reading the file and not in the actual uploading, right?. Thanks @RikkiGibson !\nAlthough I'm trying the code and it feels like the onUploadProgress is only triggered when reading the file and not in the actual uploading, right?. Ah got it. Still in my case the differences is seems to be bigger than 16KB. I guess there isn't an easy solution for this.. Ah got it. Still in my case the differences is seems to be bigger than 16KB. I guess there isn't an easy solution for this.. ",
    "justinhelmer": "This similar issue was closed, which even provided a few suggested solutions: https://github.com/axios/axios/issues/187\nHowever I am reopening as the need has not gone away. Many cloud providers use dynamic port binding, in which case this becomes a necessity as I cannot see any way around it.\nCurrently there is no way to have a non-standard port without specifying host.. This similar issue was closed, which even provided a few suggested solutions: https://github.com/axios/axios/issues/187\nHowever I am reopening as the need has not gone away. Many cloud providers use dynamic port binding, in which case this becomes a necessity as I cannot see any way around it.\nCurrently there is no way to have a non-standard port without specifying host.. No reply in over 4 months. Is this project still active?. No reply in over 4 months. Is this project still active?. ",
    "anubhavsrivastava": "Probably not a axios issue. No traceback line suggest any of axios involvement.. Your server (http api endpoint) needs to support OPTIONS http verb, these is not axios issue per se, but preflight calls are not carried out completely. This is CORS flow breakage.\nRead: MDN  for CORS\nMDN Preflight\nstackoverflow question for complete understanding. Incomplete Issue, can be closed. ",
    "mnewelski": "The irony of a PR to the README file that doesn't follow the easy to read PR instructions.. The irony of a PR to the README file that doesn't follow the easy to read PR instructions.. ",
    "SMoni": "Ok... it's a PEBCAK.\nFor those who maybe encounter the same \"problem\":\nIn your client config should be \nwithCredentials: true\n\nOn your server (which should also be correctly configured), \nAccess-Control-Allow-Origin\n\nshould not be set to '*' and\nAccess-Control-Allow-Credentials\n\nshould be true... :rage:\n. ",
    "fabiokiatkowski": "Hi,\nStatus code 400 is Bad Request maybe your Post URL are wrong? Can you post your network window?. If I understand your problem, you can use, as the docs Interfaces Methods, the POST with URL, DATA and CONFIGs.\nIn the CONFIGs you can pass your parameters as needed.\naxios.post(http://foo.bar/api/user, { \"username\" : \"Foobar\" } , { params: { \"UID\": \"AA11\" })\nWith the code above you'll get your url like http://foo.bar/api/user?UID=AA11 and the body request will be { \"username\" : \"Foobar\" }. If I understand your problem, you can use, as the docs Interfaces Methods, the POST with URL, DATA and CONFIGs.\nIn the CONFIGs you can pass your parameters as needed.\naxios.post(http://foo.bar/api/user, { \"username\" : \"Foobar\" } , { params: { \"UID\": \"AA11\" })\nWith the code above you'll get your url like http://foo.bar/api/user?UID=AA11 and the body request will be { \"username\" : \"Foobar\" }. @manojkumawat003 \nDo you using then PATCH method to update an specific attribute from document in Firebase?\nYour approvedMembers:members exists?\nAnd last, but not least, are you trying to update using orderBy?. @manojkumawat003 \nDo you using then PATCH method to update an specific attribute from document in Firebase?\nYour approvedMembers:members exists?\nAnd last, but not least, are you trying to update using orderBy?. ",
    "manojkumawat003": "Hi, fabiokiatkowski ,,\nPost Url is right. If i don't use this code-\n\"data:{\nreq: senderUid\n}\",\n it works. If i use this code , it gives error. \nPlease tell me, how to send this (\"req: senderUid\") data with above POST Url with Param.. this below code is working for method:'GET' correctly.\nBut if i use this for method:'PATCH'\nthis shows Error: Request failed with status code 400.\nPlease tell me how to solve this.\nexport function acceptRequest(EMAIL,TOKEN,members){\nconst request =   axios({\n      method:'GET',\n       url:`${FIREBASE}/coordinates.json?orderBy=\\\"email\\\"&equalTo=\\\"${EMAIL}\\\"`,  \n      params:{\n        auth:TOKEN,\n      },\n      data:{\n        approvedMembers:members\n      }         \n}).then(response=>{\n    console.log(['approvedMembers',response.data])\n    return response.data\n}).catch(error=>console.log(error))\n\nreturn {\n    type:'ACCEPTED_REQUEST',\n    payload:request\n}\n\n}\n. Hey fabiokiatkowski,\nthanks for supporting me.\nYes, I want to use PATCH method in above code.  And approvedMembers:members  is correct. I have checked it. \nAnd last, but not least, are you trying to update using orderBy?\nans.  yes. ",
    "Zhastreaus": "You don't. It's the Axios's concern to resolve a Promise.\nYour role is to receive the data that was passed by Axios from a resolved/rejected promise.\nInstead of\n.then(resolve => {\n  this.setState({ authentication: resolve.data.Success });\n})\nIt should be\n.then(response => { // <---- Axios will pass response data, not resolve function.\n  // Do what you will with the response object.\n}). ",
    "sagar-gavhane": "As you said you have received \n\nundefined promise value\n\nIf possible, Can you show the response of post method?\nExample,\njavascript\naxios.post(\"https://jsonplaceholder.typicode.com/users/1\", {\n  username: \"johndoe@domain.com\",\n  password: \"123456\"\n})\n.then(response => {\n  this.setState(prevState => {\n    return {\n      authentication: response.data.Success\n    };\n  });\n})\n.catch(error => {\n  this.setState(prevState => {\n    return {\n      authentication: false\n    };\n  });\n});\n. ",
    "danielpgauer": "+1 same problem. ",
    "buzzpsych": "+1. ",
    "tranceyos2419": "+1 having the same issue. ",
    "joeattardi": "Closing this - was a problem with using Sauce Labs. Running from a Windows VM locally works as expected. Sorry!. Closing this - was a problem with using Sauce Labs. Running from a Windows VM locally works as expected. Sorry!. ",
    "aljopro": "Since axios is using the built in promises, what you probably want is .finally()\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally\nThis does mean if you want Edge support you will need to shim it.. ",
    "lee1994522": "I have met this warning too.But we got it on the webView of Android 4.4.\nIs there any news about it?. ",
    "ateufel": "i am using axios with json-ld and don\u00b4t have to set the header. i am just using responseType: 'json' and get the correct data. i hope that helps :). i am using axios with json-ld and don\u00b4t have to set the header. i am just using responseType: 'json' and get the correct data. i hope that helps :). ",
    "DanJ210": "@EduardoSaverin This is an interesting name. Anyway, I'm not sure. I included the axios dependency and I load it into the web page using ",
    "allarddehaas": "@DanJ210 I get the error when my API is not accepting CORS.\nDo you POST from localhost to an API?. @DanJ210 I get the error when my API is not accepting CORS.\nDo you POST from localhost to an API?. ",
    "sxqwaade": "me too.. ",
    "aidant": "This is something I really look forward to since I frequently run into situations where custom configuration is incredibly helpful. However I suggest we call the property custom rather than customConfig since it adds unneeded content especially when used as config.customConfig. \nEdit: I also remember seeing a similar PR however the object was userData.. ",
    "jureczkyb": "I have exactly the same issue. \n- RN 0.55.4\n- Axios: 0.18.0\nThe progress event fires multiple times with 0 loaded and correct total value, but loaded is never increased.. Seems to be realted to this react-native isse.\nUnfortunately the pull request is not merged.\nFrom there the following workaround could be used also in Axios on Android:\naxios.get(<link_to_url>, {\n  onDownloadProgress: (event) => {\n    console.log(\"correctLoadedOnAndroid\", event.target._response.length); \n    console.log(\"alwaysZeroLoaded\", event.loaded);  }\n}). ",
    "EpicKiwi": "If your request is a CORS request check the value of Access-Control-Expose-Headers header. It's must contain Content-Range to access to the value of the header from XHR and Axios API.\nIt's defined in CORS specs and there is more information on the MDN page. Only 6 simple header types are exposed by default and the response must contains this header to expose other headers to your Javascript code.. ",
    "Maksio": "I decide this issue with setting server's answer \n$response->headers->add('Access-Control-Allow-Headers', 'Authorization, Content-Type');. I decide this issue with setting server's answer \n$response->headers->add('Access-Control-Allow-Headers', 'Authorization, Content-Type');. ",
    "nicroto": "I am having a similar issue. I am not setting the Authorization header anywhere from my client code.\nUnfortunately, I can't work around it since I don't have any control over the API server I am calling. I can't ensure they send the Authorization header.\nIs there any way to explicitly tell axios not to ask for this header in the preflight request.\n(happens on Chrome Version 71.0.3578.98, and I am using the latest nuxtjs/axios module). I found the source of the problem.\nWhen I am logged into my Nuxt application, it will send all OPTIONS requests with:\n...\nAccess-Control-Request-Headers: authorization\n...\nI guess I need to talk to the Nuxt team? Or maybe you can give me a pointer on how to get a fresh instance of axios?\n(I am currently using this.$axios ({ method: \"post\", ...}); in a vue component method). ",
    "fabiopaiva": "https://github.com/facebook/react-native/issues/21852. https://github.com/facebook/react-native/issues/21852. ",
    "seonixx": "Did you end up resolving this?. Did you end up resolving this?. ",
    "Tu-Szu-Chi": "If xsrfCookieName = 'session'\njs\nvar match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n@ghenry \nI log match result (In lib/helpers/cookies Ln:35) and got the null.\nThe problem is... my session is httpOnly in cookie, document.cookie can't find it.\n. ",
    "mirik999": "and it is impossible to show downloading percentage ? or is there another solution?. ",
    "tnorthcutt": "I would love to see this merged. For the time being I'm resorting to deleting a header manually, but that feels... wrong.. ",
    "lite2210": "\nCheck your internet connection and make sure request allowed if you're using VPS. Just copy n paste your code, it's working on axios v0.18.0. ",
    "PetitCookie": "I've solve my problem, i've replace the user-agent by the curl user-agent and it's work. . ",
    "lgaudez": "Nobody knows ?  I also created an issue in stackoverflow : https://stackoverflow.com/questions/53009139/typescript-decorator-interface-with-lambda-axiosinstance?noredirect=1#comment93068241_53009139. Nobody knows ?  I also created an issue in stackoverflow : https://stackoverflow.com/questions/53009139/typescript-decorator-interface-with-lambda-axiosinstance?noredirect=1#comment93068241_53009139. ",
    "cerealcoder": "The error message produced by the underlying SSL library was quite misleading. The underlying problem was due to an OPTIONS request that was being issued prior to the POST. The server that was being accessed was not CORS compliant, thus the response to the OPTIONS request was an error code.\nTo solve this problem, I had to create a proxy server that satisfied the CORS functionality not provided by the server being contacted. Once the proxy was in place, the error message was no longer produced by Axios.. ",
    "hairypalm": "Sorry, this is an issue with the UI framework I am using.  Feel free to delete this issue.. ",
    "0FilipK": "Same problem here. Is there other way to \"extend\" AxiosRequestConfig interface to handle raxConfig?. ",
    "skyFi": "Waiting for this.... ",
    "zkf": "Thank you @racsonleung for taking the time to describe this issue! I arrived here after extensive googling about a similar issue I am encountering while running automated tests in IE11. I use Selenium/Webdriver and a Virtualbox virtual machine running Windows 10. At first it looked like an XMLHttpRequest was hanging or freezing in the background.\nNow I cannot be sure that what I\u2019m seeing is the exact same issue you\u2019re having, but if it is, it has nothing to do with Axios. It is triggered while using Promises in IE11 and there is no mouse movement (my tests become unstuck if I move the mouse pointer across the browser viewport).\nNote that IE11 has no native Javascript Promises, they have to be polyfilled. I have tested with core-js/es6.promise.js, promise-polyfill, es6-promise, native-promise-only and even bluebird; the issue arises no matter which library is in use.\nVersion info:\n- core-js: 2.6.2\n- promise-polyfill: 8.1.0\n- es6-promise: 4.2.5\n- native-promise-only: 0.8.1\n- bluebird: 3.5.3\nThis es6-promise issue from 2015 seems to be about the same thing. I tested the suggested fix (adding a setTimeout() call) and it works in my case. No need to wrap resolve() in the setTimeout call; all I did was add the following code to the Javascript that is injected when running tests.\njavascript\nfunction t () {\n  window.setTimeout(t, 10)\n}\nt()\nI\u2019m thinking this may be a feature/bug in IE11 which is rarely encountered, so it has not yet been handled in the Promise polyfill libraries. I have not yet tried to create a minimal test case that will fail consistently, otherwise I would file issues with the library authors.\nI hope I\u2019ve included the correct keywords so the next person googling for this issue will find this information faster than I did :). Thank you @racsonleung for taking the time to describe this issue! I arrived here after extensive googling about a similar issue I am encountering while running automated tests in IE11. I use Selenium/Webdriver and a Virtualbox virtual machine running Windows 10. At first it looked like an XMLHttpRequest was hanging or freezing in the background.\nNow I cannot be sure that what I\u2019m seeing is the exact same issue you\u2019re having, but if it is, it has nothing to do with Axios. It is triggered while using Promises in IE11 and there is no mouse movement (my tests become unstuck if I move the mouse pointer across the browser viewport).\nNote that IE11 has no native Javascript Promises, they have to be polyfilled. I have tested with core-js/es6.promise.js, promise-polyfill, es6-promise, native-promise-only and even bluebird; the issue arises no matter which library is in use.\nVersion info:\n- core-js: 2.6.2\n- promise-polyfill: 8.1.0\n- es6-promise: 4.2.5\n- native-promise-only: 0.8.1\n- bluebird: 3.5.3\nThis es6-promise issue from 2015 seems to be about the same thing. I tested the suggested fix (adding a setTimeout() call) and it works in my case. No need to wrap resolve() in the setTimeout call; all I did was add the following code to the Javascript that is injected when running tests.\njavascript\nfunction t () {\n  window.setTimeout(t, 10)\n}\nt()\nI\u2019m thinking this may be a feature/bug in IE11 which is rarely encountered, so it has not yet been handled in the Promise polyfill libraries. I have not yet tried to create a minimal test case that will fail consistently, otherwise I would file issues with the library authors.\nI hope I\u2019ve included the correct keywords so the next person googling for this issue will find this information faster than I did :). ",
    "luisnaranjo733": "Actually I think this will be more work than I expected. I forked and tried to make a PR myself, but Typescript gives a warning \"An implementation cannot be declared in an ambient context\". This basically means that defining a typeguard in a definition (*.d.ts) file is not supported.\nI guess Axios would have to define its own .tsconfig and actually transpile code. If Axios were to start doing this, then Axios might as well start porting over to TS, which is a much larger scope conversation than I intended.\nI think it would be awesome if Axios were written in TS, but I definitely don't have that kind of time right now. I suggest closing this issue if no one else is willing to take it on :). Actually I think this will be more work than I expected. I forked and tried to make a PR myself, but Typescript gives a warning \"An implementation cannot be declared in an ambient context\". This basically means that defining a typeguard in a definition (*.d.ts) file is not supported.\nI guess Axios would have to define its own .tsconfig and actually transpile code. If Axios were to start doing this, then Axios might as well start porting over to TS, which is a much larger scope conversation than I intended.\nI think it would be awesome if Axios were written in TS, but I definitely don't have that kind of time right now. I suggest closing this issue if no one else is willing to take it on :). ",
    "ptmono": "I have same problem.. ",
    "RemiKalbe": "Resolved, it was a very weird cache issue, I had to completely restart my computer and I installed express-cache-controller. It was an issue from nodemon which wasn't refreshing my code so the old code was always run.\nJust install cors on your express server.. If you need it, here is my cors config:\n```js\nconst corsOptions = {\n    origin: ['http://localhost'],\n    allowedHeaders: [\"Content-Type\", \"Authorization\", \"Access-Control-Allow-Methods\", \"Access-Control-Request-Headers\"],\n    credentials: true,\n    enablePreflight: true\n}\napp.use(cors(corsOptions));\napp.options('*', cors(corsOptions))\n```\nIt must be place before all others middlewares. ",
    "elmorgan3": "@RemiVillien Hi, I have the same error in my console. Can you explain more, what do you do, to fix that? Please. ",
    "Sabyasachi2k": "putting an arbitrary timeout will not work as the network timeout has to work within the parameters set by your OS. So if the OS network timeout dictates 60 seconds, putting any number greater than that will have no effect on axios. your request will still timeout with ETIMEOUT or ECONNREFUSED.\nThis is non-issue.. ",
    "starInEcust": "\u7528\u4e2d\u6587\u95ee\u4e0d\u65b9\u4fbf\u5176\u4ed6\u56fd\u5bb6\u7684\u4eba\u67e5\u627e\u7c7b\u4f3c\u7684\u95ee\u9898\u5440\uff0c\u800c\u4e14\u770b\u4e0d\u61c2\u4e2d\u6587\u7684\u5c31\u4e0d\u4f1a\u7406\u4f60\u4e86\u3002\u8fd8\u6709\u8bf4\u5b9e\u8bdd\u4f60\u8fd9\u4e2a\u6807\u9898\u592a\u957f\u4e86\uff0c\u53ef\u4ee5\u653e\u5728\u5185\u5bb9\u91cc\uff0c\u6807\u9898\u8981\u8bf4\u91cd\u70b9\u3002\u82f1\u8bed\u4e0d\u597d\u53ef\u4ee5\u7528google translate~ \u80fd\u770b\u5f97\u61c2\u5c31\u884c\u5566\u3002\u4f60\u7684\u95ee\u9898\u6211\u4e5f\u4e0d\u4f1a\uff0c\u5c31\u80fd\u5e2e\u4f60\u5230\u8fd9\u4e86. ",
    "saileifeng": "can you desc in english. me too...\nhow can i get set-cookie and set a cookie send to server in Axios.. ",
    "b12k": "This issue is solved in Axios v0.19.0-beta.1.\nThanx.. This issue is solved in Axios v0.19.0-beta.1.\nThanx.. ",
    "cuiyongjian": "i got the same issue.  axios throw the error although i set proxy:false.  But the npm package request is ok.. i got the same issue.  axios throw the error although i set proxy:false.  But the npm package request is ok.. ",
    "tshen8": "Hi guys, can I get some eyes on this?. Hi guys, can I get some eyes on this?. ",
    "ilyaulyanov": "Any updates on this? . ",
    "RobusGauli": "Hi @wasnlosdu . There is a issues with forEach helper function from lodash thats causing the failing test(s). Please refer to this PR  #1352 for more details. \n\"Axios\" class had a default export at the bottom and so  I moved default exports to bottom for other classes and functions.\nThanks.. ",
    "sbimochan": "Yeah. I'm up.. You need to use Promise or async await.\njavascript\nexport async function doSomething() {\n  const url = 'https://google.com';\n  const response = await axios.get(url);\n  /** Now response will not get undefined since there is await.\n  * Now you can use map to response.data\n  */\n  const mappedData = response.data.something.map(el => el.key)\n  return mappedData;\n}. Create a function called interpolate first.\n```javascript\n/\n * Build supplied string by interpolating properties inside delimiters('{ }') with the given parameters.\n \n * @example\n * interpolate(':name is here.', {name: 'Barbara'})\n * => 'Barbaba is here.'\n \n * @param {string} str\n * @param {object} params\n * @returns {string}\n */\nexport function interpolate(str, params) {\n  let formattedString = str;\nfor (const [key, value] of Object.entries(params)) {\n    const val = value || '';\nformattedString = formattedString.replace(new RegExp(':' + key, 'gi'), val.toString());\n\n}\nreturn formattedString;\n}\nNow call this function where you need params.javascript\nexport async function updateSomething(id, editedData) {\n  const url = 'http://something.com/:id' // It must contain :id\nconst interpolatedUrl = interpolate(url, { id });\n  const data = await http.patch(interpolatedUrl, editedData);\nreturn data;\n}\n``. You need to add a REST verb first like GET, POST.\nFor example:axios.get('someUrl).then(function(response) =>console.log(response.data));. Please post you code more clearly. I found many syntax errors there.. Please remove the instruction from PR description.. > @sbimochan Don't think you need to add theyarn.lock` file as part of your PR. Seems like it's outside the scope of cleanup.\nYeah right. Done. > @sbimochan Don't think you need to add the yarn.lock file as part of your PR. Seems like it's outside the scope of cleanup.\nYeah right. Done. Thanks @yoyo837 . Yes it will return a null instead empty object. what's your suggestion?. ",
    "mindriven": "I like your idea, I'll try to create a PR. Just give me some time :-). ",
    "renishdeveloper": "I'm working on the react native mobile development,\nMy issue is when i using axios for API calling ,I want to pass the parameters in the POST method ,at that time I want to pass the dynamic key.. I have searched at many places including Stackoverflow ,but I can't get the solution for my solution.\nThanks in advance.\nHere is the description of what I want :\nasync apiCalling(url, parameters) {\n    const data = await axios.post(url, {\n       name : 'Pizza',      //Here I want to assign name(key) from the state something like (i.e. this.state.name instead of name)\n      ....      //others parameters\n    })\n    .then(function (response) {\n        console.warn(response);\n      })\n    .catch(function (error) {\n        console.log('exios erro=>', error);\n    });\n\n    // return data.data;\n}. No, the error is gone, but when the API calls the **null** data is inserted I think this is because of the API can't find the key passed like this **[Object.keys(parameters)[0]]**\n\nThis is my parameters array\n const parameterArray = [\n      { name: 'name' },\n      { name: 'calories' }\n    ]\nWhere you created the array args?\nIf I will get an idea of your args array, I get the solution.\nThank you so much\n . ",
    "D19cannon": "Thanks for the quick response!\nSorry that's a typo of mine. It's suppose to be a quick example in relation with other functions by using the promise .then() flow.\nSo my question is how the data from axios -> getlist() -> API.todo\nAny suggestions why the .then() continuous as undefined or as a promise?. Hi, my question isn't about fixing my code. The code is a just a quick sample. The point of my question is: \"How does the promise flows through multiple functions.\" Since, my problem has more to do with what my promises return such as < undefined / promise >\nAgain. Don't look at the syntax. I honestly, do not care about that. It's the theoretical part how axios resolves its promises when it's asked through a middle/helper function. \nIn other words, three functions that are all promise based, resolve before the first function returns anything.\nhttps://medium.com/@chung.andrew7/a-surprising-functional-programming-utility-of-pending-promises-with-async-await-256d523533b9. Exactly. Whenever I just run a function such as:\n// this works just fine for example\ngetDetails = () => {\n  axios.get('url')\n      .then((resp) => {\n         let x =  dosomething(resp);\n       ......\n      })\n}\nBut whenever there are two functions involved and both have a promise it seems that the function that is calling the other resolves in undefined or a promise, before the other function even has a chance to resolve and return it.\n\nWhich bring me to this solution:\n// option 1 works, but two doesn't\ngetDetails = () => {\n  details.get().then( result => { doSomething(result)});\n}\nconst details = {\n1:    get: () => {\n            return  axios.get('url')\n    }\n2:   get: () => {\n          axios.get('url')\n            .then(resp => {\n               let x = something(resp);\n               return x;\n             }\n        }\n} // end details\nYou would say know just use the 1 option and problem solved. But what if the flow goes through 3 functions which are all promises?\n\n// this doesn't work && group just to get the idea for another function\n// request.post() and request.get() are actual function how they should be used\ngetDetailsList = () => {\n  details.list().then( result => { doSomething(result)});\n}\nconst details = {\n    list: () => {\n            request.get().then(list => { return doSomething(list) }\n    }\ngroup: () => {\n      request.get().then(groupData => { return doSomething(groupData)\n   }\n} // end details\nconst request = {\n   get: () => {\n          axios.get('url')\n            .then(resp => {\n               let x = something(resp);\n               return x;\n             }\n        }\npost: () => {\n         return axios({\n              method: 'post',\n              url: ${API_ROOT}${url},\n              headers: {\n                  'Content-Type': 'application/json',\n                  'Accept': 'application/json',\n               },\n               data: {\n                  product_ids: ids,\n                  text: filter\n               },\n              'withCredentials': true\n        })\n} // end request\nThis is pretty much the idea of the flow, controlled and reusable axios calls based on what ever the function need such as details().\nThe first them I can resolve it with is by using: return axios.get('url') but the .then() can't be used in any of the cases. Also, it only works in the 2nd function (details()) to get the response. The original function that is calling it ain't getting the response, because it's a promise or undefined.\nI've also tried to do this with async / await with no luck.\n. Thanks @wasnlosdu  !\nI happen to solve it just before you replied. It was a bit tricky, but it works now :)\nI did the following (tried to add it in your stackblitz, but didnt work :(( )\n//----------------------------------------------------------------- //\nRemember this is sort of an example, obviously the functions will not be executed like this.\nThe trick was to return axios without .then() and async / await in the controller (otherwise for some reason it could return a promise instead. Also, .then() doesn't work in there and it the promise has to be return immediately)\n//----------------------------------------------------------------- //\n// ----------------------- React/Mobx component ----------------------------------- //\nlogin = () => {\n  request.Auth.login()\n  .then( response => {\n    doSometing(response);\n  })\n}\n// ----------------------- API calls -- Axios---------------------------- //\nimport axios from 'axios';\nconst request = {\n  post: ({urlRequest, token = null, username =  '', password = '' }) => {\n    return axios({\n      method: 'post',\n      url: urlRequest,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'X-CSRF-Token': token,\n      },\n      data: {\n        \"username\": username,\n        \"password\": password,\n      },\n      'withCredentials': true\n    });\n  }\n};\n// *  All the requests for user authentication and authorization\nconst Auth = {\n  login: async (username, password) => {\n    return await request.post(${API_ROOT}/user/login.json, username, password);\n  }\n};\n. ",
    "marcelogarbin": "@michaelAkrawi any news? I tried to do the refresh token inside the interceptors response, however it goes into a loop =/. ",
    "michaelAkrawi": "@marcelogarbin  i don't have a loop problem with this solution . @marcelogarbin  i don't have a loop problem with this solution . ",
    "BoleLee": "I'm getting the similar problem: the dataType of error reponse is not an object like [README: Handling Errors] said. Instead, when I console it, it shows like: \nError: Request failed with status code 404\n    at createError (createError.js?2d83:16)\n    at settle (settle.js?467f:18)\n    at XMLHttpRequest.handleLoad (xhr.js?b50d:77)\nHow can I get the data from server response\n\nUpdate: #1923. I'm sorry that I misunderstood the data type of the rejected function parameter. The parameter: error is  not an Object like I thought. error.response IS the data I want.. I'm sorry that I misunderstood the data type of the rejected function parameter. The parameter: error is  not an Object like I thought. error.response IS the data I want.. ",
    "mattlyons0": "Nice fix! Would it be better to add the agents key to options after this line? https://github.com/axios/axios/blob/5d242ce51d404e08ee5aa0d25c302947e428509b/lib/adapters/http.js#L173\nThat way it will only be added if the follow-redirects package is being used?. ",
    "bhautik11": "I don't want to send two different request...I want to send only one request so Api request take less time.. ",
    "cloudhary": "I don't believe there's any way around CORS. But if you made it a simple request they won't preflight your request, which is what you seem to be looking for?. Based on the default transformResponse that this library has used, it seems most likely that the documentation is correct. Here's the relevant code snippet:\nhttps://github.com/axios/axios/blob/b4c5d35d2875191dfa8c3919d4227dce8e2ad23f/lib/defaults.js#L58-L66\nIt's up to you on how you want to wrangle the data that you get back from the http call and I don't think the docs should be any more prescriptive than this?. ",
    "itstrive": "@wasnlosdu is right.\nIf you want one request. \nDo not cross domain OR Setting Agent for it\n. I think your url has problem. Check you Server API.\nSee This demo: https://codesandbox.io/s/l9vj1j7w2m\n. ",
    "the-yadu": "https://github.com/axios/axios/issues/910\n. ",
    "zhangxuchuan827": "the complete URL :  https://www.apiopen.top/journalismApi\nthis.http.get('/api/journalismApi')\n                .then((res) => {\n                    console.log(res.data)\n                    this.$toast('success')\n                })\n                .catch((error) => {\n                    console.log(error)\n                })\nproxyTable: {\n        '/api': {\n        target: 'https://www.apiopen.top',\n        changeOrigin: true,\n        pathRewrite: {\n            '^/api': ''\n        }\n      }\n    },\nIt is accessible in my local development environment, but not on the server. \nDo I need set up  other configuration \uff1f\uff1f for project or Nginx ?\n. ",
    "chht511": "\n. \n",
    "sandroden": "I've prepared this codesandbox  where not even the solution I proposed works. It's a simple login form (It's in vue, but I consider it very straightforward), my original data is a simple object with username and password. In the example I don't even touch nor data nor headers:\n  return data\nthe result is that instead of sending an object axios sends a list containing an object, and that brakes the api that expects an object...\nAnalizing with firefox network inspector I get for the simple (working) situation, the body:\npassword: secret\nusername: sandro\nfor the return data:\n[object Object]:\nand when using JSON.stringify (that is working in my real case and not working in this sample):\n{\"username\":\"sandro\",\"password\":\"secret\"}:\nWhat am I doing wrong?. ",
    "salixrosa": "The issue you're having is down to the Content-Type header. The default transformResponse function does this for you: https://github.com/axios/axios/blob/master/lib/defaults.js#L52\nBut you aren't using the default transformResponse function. You can write your own functionality to add the header (and it does work; I tried it with your sandbox above), but my preferred method is to still use their default function!\nMaybe there's an easier way of doing this, but we do something along these lines:\n import axiosDefaults from 'axios/lib/defaults';\nlet conf = {\n        transformRequest: axiosDefaults.transformRequest.concat(\n          (data, headers) => {\n            // delete headers.common.Authorization\n            return data;\n          }\n        )\n      };\nNow the config you're passing in has an array with both your function & the Axios default function as transformResponse.\nThis way Axios will perform that default transform function AND your function. You don't have to do anything to data, since it is already taking care of that for you (though you do still have to return it).. ",
    "hineshamin": "Closing this issue as I saw that this was fixed in v0.19.0 and I am using v0.18.0. Closing this issue as I saw that this was fixed in v0.19.0 and I am using v0.18.0. ",
    "nikugogoi": "@mzabriskie I am requesting this PR for helping out in using interceptors more efficiently... Server-side JS using axios might face problems with current implementation. Also a method to eject all interceptors would be really useful. ",
    "LinusU": "\nWrong indications of JavaScript Function Parameters\n\nIt's done that way to indicate that the parameters are optional, it's a common pattern.... If anyone needs a workaround asap while waiting for upstream, you can install my patch as such:\nsh\nnpm install LinusU/axios#0.18-hotfix\nWould love to get an official 0.18.1 out though \u2764\ufe0f . ping @rootsher . Seems like Travis timed out, mind restarting it? \u263a\ufe0f . ping @rootsher \u263a\ufe0f . Yeah, the idea with this pull request (as discussed here #1922) was to get a hotfix v0.18.1 release out \u263a\ufe0f . ",
    "ferrantejake": "Turns out this is just the response from a standard 404. Case closed.. ",
    "rootsher": "@LinusU sorry for the delay - I created a branch from version 0.18 - please do the appropriate pull request https://github.com/axios/axios/tree/hotfix/process-env-node-env :). ",
    "unerh": "As this is a stream, the exact error message can be deciphered from the stream buffer if really needed.  We no longer need to return this error so I'm closing this issue.\nBut as an enhancement it might be good to extract error response message out of the buffer into the main error.response object.. ",
    "nickstew": "Looks great!  Thanks for removing the yarn.lock.  I approve code cleanup.  I don't know if @emilyemorehouse has time to approve and merge this, but it's small and is a good step towards a better repo.  Thanks for the PR @sbimochan!. ",
    "bennibeef": "It was a werid caching issue on my side. Nevermind! :). ",
    "rm-hull": "Likely same cause as #1819 . Likely same cause as #1819 . ",
    "glenndevenish": "related? https://github.com/axios/axios/issues/1910. ",
    "iamtmrobinson": "You are returning a rejected Promise from your interceptor, but you are not catching it in your calling code.\nThis should stop the unhandled rejection:\naxios.get('some-url')\n  .then(response => /* handle successful response */)\n  .catch(response => /* handle promise rejection */);. You can't stop it, your Promise always has to resolve or reject. That means you have to handle this case in the then / catch of your original get.\nYou could return the whole error object and move the logic for handling the error to where you catch the response, and do something like:\n.catch(error => {\n    if (error.response && error.response.status === 401) {\n      router.push({ path: '/login', query: { msg: '\u767b\u5f55\u8d85\u65f6' } });\n    } else if (error.data) {\n      Toast(error.data.error);\n    } else {\n      Toast('\u83b7\u53d6\u4e1a\u7ee9\u5f02\u5e38');\n    }\n  });. ",
    "quan01994": "ok,thanks. ",
    "abraaobarros": "I am having the same problem.. I am having the same problem.. ",
    "kevinseabourne": "Axios is not giving me access to a custom made header, its blacklisting it\nthis code is written in node\n.header(\"x-auth-token\", token)\n.header(\"Access-Control-Expose-Headers\", \"x-auth-token\") \nthis should allow me to see x-auth-token but it is not, the token is there but axios is not allowing me to see it.  \nAxios V0.18 \n. ",
    "adanilev": "I'm having a similar issue. \nI can see all my headers if I call my API with node-fetch or curl but axios seems to drop them and put in defaults: {\"content-type\": \"text/plain; charset=UTF-8\"}\nI went down a long CORS rabbit hole to no avail so now switching to node-fetch \u2639\ufe0f . ",
    "AritraSengupta": "I have a very similar problem as well. The response headers in browser is showing up properly but axios is dropping them:\nResponse Headers From Browser:\n\nResponse Header in Axios:\n. ",
    "nicolkill": "Same problem here, i want get custom headers from response and i only have the content type header. Hey there, i found this stackoverflow post that help me to solve this problem. ",
    "TseWaiHo": "\nI think your url has problem. Check you Server API.\nSee This demo: https://codesandbox.io/s/l9vj1j7w2m\n\nFinally, I realize that this is just a specific behavior on Chrome, the error is actually caught, but chrome will always echo it out, and I can't find a way to mute it.\nIt is not axios problem, both traditional pattern and async pattern are correct, it is just that chrome make it ugly.\nChrome will echo out all request fail to console in red color, include the advertisements blocked by ADBLOCK.. ",
    "edenprojectde": "I tried it with the catching. I will try the async/await next time I get the chance to. . I found the Problem, i changed the Classpath of the Cordova App, and seemingly the Plugins/Cordova i had installed somehow preserved the old state of my www directory of cordova and started a second instance of the app, starting at random times while the App is running. The Popup contained a false response from an older Version of the App.\nThe fix for this Problem is to remove and add the android platform. I still cant be sure if this will fix it for 100% but i can tell that this is not an Axios issue. Will close this and leave this here for later peeps who are having/had the same issue.\nEDIT: The reason i mentioned is still not the right answer. I tried getting the point in the log where the Problem happens.\nIt was background-fetch which had a wrong name registred and tried opening the app in the background even tough i did not use any of the code in my project. Well.. Waiting another hour and if it's resolved i will update this again. \ud83e\udd47 . ",
    "webspecialist": "I found that I need to pass the cookie but it fails. \nI put withcredentials: true but then I have cors problem. What can I do?. ",
    "Flyrell": "Checks fixed in #1993. Would anyone consider reviewing? Thanks.. ",
    "alex-deas": "Could you post your config and environment you're getting the error in?. ",
    "seewhy17": "Sorry this isn't a Axios issue, the catch block caught some other logic error. Thanks. ",
    "svenefftinge": "The build failure is unrelated to the changes of this PR. ",
    "43081j": "1689 closes this FYI i guess. Also consider making use of Partial while you're in there. The interface we have for RequestConfig isn't so great, being that all properties are optional.\nBetter to make them all required and use TConfig = Partial<AxiosRequestConfig>.\nCould also do with a better use case for this as i'm not sure why you'd want to extend the config. Where would the extended properties be used?. Haven't used the project before admittedly but usually found digging around github, so happy to have a read through some PRs in my spare time.\nWhat would be super nice is a new version which uses ES modules \ud83d\ude4a . better to call this something like TConfig or just T for convention. val can't ever really be \"not declared\" so this should be if (val === undefined) i guess. not sure why it was ever typeof. This is not true. val is declared as a parameter... it will always exist and can only have a value of undefined. There was never a reason to do a typeof here.\nWhat you're talking about is if there literally wasn't a variable declaration of val, such as:\nts\n// start of file\nconsole.log(val); // val is undefined and was never declared\nbut in this case, val is declared, it is a known parameter, it will always exist. it can have a value of undefined (if it isn't passed or if it is explicitly set to undefined).. ",
    "oonisim": "My bad. 500 response did not provide the Access-Control-Allow-Origin header. \nAdding it fixed.\n\"statusCode\": 500,\n            \"headers\": {\n                \"Content-Type\": \"application/json\",\n                \"Access-Control-Allow-Origin\": \"*\"\n            },\nResult:\nLogin.js:74 Error: Request failed with status code 500\n    at createError (createError.js:17)\n    at settle (settle.js:19)\n    at XMLHttpRequest.handleLoad (xhr.js:78)\nLogin.js:76 --------------------------------------------------\nLogin.js:79 \n{message: \"signin failed with [{'Message': u'Missing required\u2026PASSWORD', 'Code': u'InvalidParameterException'}]\"}\nmessage: \"signin failed with [{'Message': u'Missing required parameter PASSWORD', 'Code': u'InvalidParameterException'}]\"\n__proto__: Object\n. closes #1960. ",
    "morgangraphics": "What this error is telling you is the web server you control (presumably the 112.196.13.87 box) is not allowing just any ole access to anyone who asks. It also means that your browser is preventing access to http://api.dataatwork.org because it isn't allowed due to the lack or correct permissions.\nCORS requests actually make 2 requests.\n\nOrigin. It essentially asks \"Are you allowed to POST, GET, ...\" here? If yes (200 response), then ...\nPayload. Here is the information I require from the web server. \n\nYou can see this informal introduction the the network tab of your browsers developer tools. \nThe Google extension injects a header (Allow-Control-Allow-Origin) a.k.a the permissions mention above into the response that says \"I'll accept a connection from you and you and her, and that guy over there\"\nSo, to answer your question. What to do to resolve this issue permanently? You will need to add Allow-Control-Allow-Origin: * header to your server configuration running your App. \nThis is highly dependent on your server, Express uses app.use(cors()) where as hapi looks some like \n\"headers\": [{\n        \"key\": \"Access-Control-Allow-Origin\",\n        \"value\": \"*\"\n      }]\nWhat the * is telling the world is that you Browser is allowed to accept a connection from anywhere and anyone. Maybe this is what you want for a public API or web server. This is certainly fine for development.\nOr perhaps you want to only accept connections from certain Hostname where you would replace * with 'https://onlythisurl.com' e.g. This would be closer to a production like environment. \n\"headers\": [{\n        \"key\": \"Access-Control-Allow-Origin\",\n        \"value\": \"https://onlythisurl.com\"\n      }]\nThat being said this has nothing to do with axios and everything to do with your server configuration. . ",
    "Weffe": "@43081j I actually would have loved if this feature was available. I just created a library for handling api versioning (axios-api-versioning) and needed to add properties to the AxiosRequestConfig. With the current typings, I couldn't extend the AxiosRequestConfig and add my own props so I had to copy the current typings and modify them before exporting them out for use.\nIf this was available I could skip my current solution and just extend the AxiosRequestConfig which cleans things up significantly for me.\nRelated issue: https://github.com/Weffe/axios-api-versioning/issues/5\nMy solution: https://github.com/Weffe/axios-api-versioning/commit/648b9fbcef48d975e22ae1881999ce20e9e3b537. @emilyemorehouse Could I get this added to the ECOSYSTEM.md? Please and thank you!. ",
    "likern": "And no commits in master since September. No plans to support HTTP2 yet.. ",
    "rogeriopvl": "@emilyemorehouse I would be glad to help out as a maintainer. @orcunkobal can you please provide some examples of how you're creating the request, and what the output on the server is? Thanks. Thanks for reporting this @C-Higgins \nCould you please make a pull request for this?. ",
    "iidrees": "Hi @emilyemorehouse, I would love to help out.. ",
    "ironicnet": "I think that doing triage or labeling the issues would help the new volunteers to know where to start... . ",
    "hugomd": "I\u2019d be keen on helping out, whether it\u2019s triaging, actively contributing, or anything else \ud83e\udd19. ",
    "lnghrdntcr": "@emilyemorehouse I'd love to help! Probably would be nice to have a some sort of tags (like, 'for beginners' or similar) on the issues in order to encourage contributors!. ",
    "rajasekarm": "I\u2019m using axios for more than a year. I can help in fixing bugs.\n. ",
    "3sanket3": "I don't have much contribution history but I use axios in projects. I will happy to help. . ",
    "cdcasey": "I would love to help.. ",
    "bipin000": "will be my pleasure to contribute to axios  . ",
    "mowatermelon": "I would love to help as well.. ",
    "Eqls": "Would love to start contributing, been using it for a year so far for all of my projects and I want to help to keep it healthy.\nSome type of guidance on where to start would be appreciated though!. Would love to start contributing, been using it for a year so far for all of my projects and I want to help to keep it healthy.\nSome type of guidance on where to start would be appreciated though!. ",
    "vonvick": "Would love to help as I have used axios extensively.. ",
    "luciano7": "@emilyemorehouse I posted a request for help on reddit (https://www.reddit.com/r/javascript/comments/an94xq/axios_needs_maintainers/) - as you can see, your work has a lot of fans. I look forward to start contributing and once again- thank you.. ",
    "octalpixel": "@emilyemorehouse would love to help out.. ",
    "DarkSeidNG": "@emilyemorehouse I would love to help out. ",
    "luckyincode": "@emilyemorehouse I too would love to help!. ",
    "yekver": "I think this may help you: https://github.com/axios/axios/issues/390. I think this may help you: https://github.com/axios/axios/issues/390. @emilyemorehouse can you look through this bug?. @emilyemorehouse can you look through this bug?. ",
    "abhijithvijayan": "@yekver I tried that. the value of the variable doesn't exist.\nI'm running this on browser btw.. ",
    "iKoru": "sorry, I found my mistake on my code. ignore this issue.. sorry, I found my mistake on my code. ignore this issue.. ",
    "alanyinjs": "Btw, this also works: \n```js\nlet results = [];\nlet promises = [];\nfor (let i = 1; i <= 5; i++) {\n    promises.push(axios.get(apiArray[i-1]));\n}\nfor(let i = 1; i <= 5; i++) {\n    results.push(await promises[i-1]);\n}\n``. Oops... it seems that this problem has nothing to do withaxios`... \nI have successfully abstracted the problem into the following (seems like a basic Promise concept that I have been missing here): \nThis will not work:\njs\nlet results = [];\nfor (let i=1; i<=5; i++) {\n    let promise = new Promise(function(resolve, reject) {\n        setTimeout(function() {\n            resolve('foo');\n        }, 10000);\n    })\n    results.push(await promise);\n}\nBut this will: \n```js\nlet results = [];\nconst promises = [\n    new Promise(function(resolve, reject) {\n        setTimeout(function() {\n            resolve('foo');\n        }, 10000);\n    }),\n    new Promise(function(resolve, reject) {\n        setTimeout(function() {\n            resolve('foo');\n        }, 10000);\n    }),\n    new Promise(function(resolve, reject) {\n        setTimeout(function() {\n            resolve('foo');\n        }, 10000);\n    }),\n    new Promise(function(resolve, reject) {\n        setTimeout(function() {\n            resolve('foo');\n        }, 10000);\n    }),\n    new Promise(function(resolve, reject) {\n        setTimeout(function() {\n            resolve('foo');\n        }, 10000);\n    }),\n];\nfor (let i=1; i<=5; i++) {\n    results.push(await promises[i-1]);\n}\n```\nSo it resolves all promises concurrently when you create an array of promises and deal with individual promises in a loop... But it doesn't work when you create individual promises and deal with them in a loop... Must be something I am missing...  . Okay... I was just being silly... \nThe first case, we are creating five individual promises through loops, of course we have to wait until one resolves before executing the second loop.\nThe second case, we are creating the array of promises first, so they start running concurrently. When we loop through 5 of them, we would actually be blocked at the first loop until the first promise resolves, the rest 4 loops would then finish at no time (because the rest 4 promises will be resolved).\nThis is just because 5 promises are running concurrently in the array. . ",
    "diegosps": "Compare the headers sent in both requests. \nYou might be missing origin or other access-control headers.. I just started using axios today, but I realized that some configs will dispatch a preflight request before the actual request, even for GET. That is why you are seeing an OPTION request with axios. The default for the jquery is to sent those only with POST requests. You could try it.\nThe error you are receiving is due to CORS not being setup properly on your server. There is no Access-Control-Allow-Methods response header present.\nFor testing purposes only, set:\nAccess-Control-Allow-Methods : \nAccess-Control-Allow-Origin: \nfor your responses.\nThis should do the trick.\nAfter understanding a little more about CORS, don't forget to set it up properly.. ",
    "glenjamin": "Based on https://github.com/Microsoft/TypeScript/issues/2719 the solution appears to be to modify the typescript definition using export = syntax so that typescript knows it's really a commonjs module.\n```diff\ndiff --git a/node_modules/axios/index.d.ts b/typings/axios/index.d.ts\nindex 403fd1a..a9848a9 100644\n--- a/node_modules/axios/index.d.ts\n+++ b/typings/axios/index.d.ts\n@@ -1,3 +1,5 @@\n+declare namespace Axios {\n+\n export interface AxiosTransformer {\n   (data: any, headers?: any): any;\n }\n@@ -126,6 +128,8 @@ export interface AxiosStatic extends AxiosInstance {\n   spread(callback: (...args: T[]) => R): (array: T[]) => R;\n }\n-declare const Axios: AxiosStatic;\n+}\n+\n+declare const Axios: Axios.AxiosStatic;\n-export default Axios;\n+export = Axios;\n```\nIf this is desirable let me know and I'll bundle it into a proper pull request.. Based on https://github.com/Microsoft/TypeScript/issues/2719 the solution appears to be to modify the typescript definition using export = syntax so that typescript knows it's really a commonjs module.\n```diff\ndiff --git a/node_modules/axios/index.d.ts b/typings/axios/index.d.ts\nindex 403fd1a..a9848a9 100644\n--- a/node_modules/axios/index.d.ts\n+++ b/typings/axios/index.d.ts\n@@ -1,3 +1,5 @@\n+declare namespace Axios {\n+\n export interface AxiosTransformer {\n   (data: any, headers?: any): any;\n }\n@@ -126,6 +128,8 @@ export interface AxiosStatic extends AxiosInstance {\n   spread(callback: (...args: T[]) => R): (array: T[]) => R;\n }\n-declare const Axios: AxiosStatic;\n+}\n+\n+declare const Axios: Axios.AxiosStatic;\n-export default Axios;\n+export = Axios;\n```\nIf this is desirable let me know and I'll bundle it into a proper pull request.. ",
    "baranovxyz": "got the same issue\nanswer is here I guess https://github.com/axios/axios/issues/1873. ",
    "pb-expa": "+1 All routes we had were working as is til just recently. It seems like we are seeing chronic and systemic issues with POST requests now with axios. POST requests that had been working before, now timeout with blank responses.. ",
    "fabioricali": "https://github.com/AdonisLau/axios-jsonp. ",
    "mayank-mittal": "Hi, There are 2 ways to go about it.\n1. axios.get(`${config.url}/rides/search`,{\nparams: {\naccess_token: Vue.prototype.$store.state.data.token,\ndestination:\"word1\"\n},\nheaders:{\n'Content-Type':'application/x-www-form-urlencoded'\n}\n}) - The second parameter should be config not the data parameters\n\naxios({\n method: 'GET',\nurl: ${config.url}/rides/search,\nparams: {\naccess_token: Vue.prototype.$store.state.data.token,\ndestination:\"word1\"\n},\nheaders:{\n'Content-Type':'application/x-www-form-urlencoded'\n}\n}). Close this issue, if it resolved the issue.. \n",
    "razdahan": "Hi thnx u helped me very much!. ",
    "Paxa": "btw since axios and follow-redirects use different properties for this thing, it would be nice to wrap error from follow-redirect:\nError from follow-redirects : Request body larger than maxBodyLength limit\nWould be nice to change it to Request body larger than maxContentLength limit\n. Tests failed in should support max redirects, not related to this PR. ",
    "grumblerchester": "The issue does not seem to be related to axios.\nWhat headers are required (by your server) to be presented in a request?\nCan you please perform curl request below and provide results.\ncurl -X GET \\\n  https://qytanextapi.test/checklist-api/user \\\n  -H 'authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczpcL1wvcXl0YW5leHRhcGkudGVzdFwvY2hlY2tsaXN0LWFwaVwvbG9naW4iLCJpYXQiOjE1NDkxOTkyNDEsImV4cCI6MTU1MTc5MTI0MSwibmJmIjoxNTQ5MTk5MjQxLCJqdGkiOiJxb2V0dHl4VzQ0ZnJSeFBsIiwic3ViIjoiMTYwNDUzNTMiLCJwcnYiOiI4OTlmOGRmYjQzOWMxMDUyNmVhYzU1YThmM2I4OGMxNjVmMGNmNmQ0In0.gKPjwJkBUesgJT5spB-tIzjMZeviWryZyxICmm89AfY' \\\n  -H 'cache-control: no-cache'. @firmantr3 As I understand the issue is \n\nwhen i log it on the backend API (Laravel), the request Authorization header is completely different\n\nDoes your backed accepts auth header (and return result) when you perform axios request from your original post?\nWhat is in your logs when you do request by curl?. @C-Higgins Hey! Do you consider sending a PR? I can do that if no.. Another reason may be the fact that you do the async request in your componentDidMount. So the expected data is not received yet in the moment when you try to access it.\nAnyway the answer cannot be provided without Minimal, Complete, and Verifiable example.\nPlease consider updating the question or closing the issue.. @emilyemorehouse Build passes. Please consider merging as a temporary workaround to unblock CI verification.. I'm sorry. I was unable to find the changelog either. :(. @emilyemorehouse Hello! Using your invitation \n\nFeel free to ping me if I don't respond after a few days.\n\nCould you please take a look at the code?. ",
    "firmantr3": "\nWhat headers are required (by your server) to be presented in a request?\n\nHi, the headers required by my server is just authorization\n\nCan you please perform curl request below and provide results.\ncurl -X GET \\\n  https://qytanextapi.test/checklist-api/user \\\n  -H 'authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczpcL1wvcXl0YW5leHRhcGkudGVzdFwvY2hlY2tsaXN0LWFwaVwvbG9naW4iLCJpYXQiOjE1NDkxOTkyNDEsImV4cCI6MTU1MTc5MTI0MSwibmJmIjoxNTQ5MTk5MjQxLCJqdGkiOiJxb2V0dHl4VzQ0ZnJSeFBsIiwic3ViIjoiMTYwNDUzNTMiLCJwcnYiOiI4OTlmOGRmYjQzOWMxMDUyNmVhYzU1YThmM2I4OGMxNjVmMGNmNmQ0In0.gKPjwJkBUesgJT5spB-tIzjMZeviWryZyxICmm89AfY' \\\n  -H 'cache-control: no-cache'\n\nHeres my API response:\n{\"nik\":\"16045353\",\"nama\":\"FIRMAN TARUNA NUGRAHA (FIRMAN)\",\"email\":\"firmantr3@gmail.com\"}\nThat means the authorization header is successfully verified\nEdit:\nI have tried to add cache-control header on axios request, but the problem still persist. But it work when using postman or curl. . > @firmantr3 As I understand the issue is\n\n\nwhen i log it on the backend API (Laravel), the request Authorization header is completely different\n\nDoes your backed accepts auth header (and return result) when you perform axios request from your original post?\n\nyes, my backend accepts all header and return result when i perform axios request, but the authorization header value is not equal between axios request and backend, causing the authentication fails. Is it CORS problem? I'm using laravel-cors package with this configuration:\nphp\nreturn [\n    'supportsCredentials' => false,\n    'allowedOrigins' => ['*'],\n    'allowedOriginsPatterns' => [],\n    'allowedHeaders' => ['*'],\n    'allowedMethods' => ['*'],\n    'exposedHeaders' => [],\n    'maxAge' => 0,\n];\n\nWhat is in your logs when you do request by curl?\n\nthe curl command:\ncurl -X GET \\\n  https://qytanextapi.test/checklist-api/user \\\n  -H 'authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczpcL1wvcXl0YW5leHRhcGkudGVzdFwvY2hlY2tsaXN0LWFwaVwvbG9naW4iLCJpYXQiOjE1NDk2OTM3OTIsImV4cCI6MTU1MjI4NTc5MiwibmJmIjoxNTQ5NjkzNzkyLCJqdGkiOiI5aUVmMWtKRnlSVUJnZTJiIiwic3ViIjoiMTYwNDUzNTMiLCJwcnYiOiI2NjQ4MmI2ZDYzMzk3YmI5MmY0Nzc0MDQzMjdkZTUxOWRmM2ZjZWZhIn0.-PtCLxyX7HRJ08v36LBgIW--rCYNCOjX1HVAScsupho' \\\n  -H 'cache-control: no-cache' -k\nthen i got this on my log:\nphp\narray(\n    'method' => 'GET',\n    'header' => array (\n        'cache-control' => array (\n            0 => 'no-cache',\n        ),\n        'authorization' => array (\n            0 => 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczpcL1wvcXl0YW5leHRhcGkudGVzdFwvY2hlY2tsaXN0LWFwaVwvbG9naW4iLCJpYXQiOjE1NDk2OTM3OTIsImV4cCI6MTU1MjI4NTc5MiwibmJmIjoxNTQ5NjkzNzkyLCJqdGkiOiI5aUVmMWtKRnlSVUJnZTJiIiwic3ViIjoiMTYwNDUzNTMiLCJwcnYiOiI2NjQ4MmI2ZDYzMzk3YmI5MmY0Nzc0MDQzMjdkZTUxOWRmM2ZjZWZhIn0.-PtCLxyX7HRJ08v36LBgIW--rCYNCOjX1HVAScsupho',\n        ),\n        'accept' => array (\n            0 => '*/*',\n        ),\n        'user-agent' => array (\n            0 => 'curl/7.63.0',\n        ),\n        'host' => array (\n            0 => 'qytanextapi.test',\n        ),\n        'content-length' => array (\n            0 => '',\n        ),\n        'content-type' => array (\n            0 => '',\n        ),\n    ),\n    'url' => 'https://qytanextapi.test/checklist-api/user',\n)\nThe authorization header is equal between curl and backend.. ",
    "thib92": "This is not an issue with Axios.\nWhen entering the URL directly in the browser, your browser adds a bunch of headers. To see them, open your browser dev tools, under the \"network\" tab, refresh and the first request will be the one you are interested in. I'd recommend checking the logic and the logs for your backend to see where it could fail.. ",
    "ESASAH": "thx for your help.\nWith my browser I have this Request header : \nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\nAccept-Encoding: gzip, deflate, br\nAccept-Language: fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7\nConnection: keep-alive\nHost: localhost:8081\nSave-Data: on\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\nWith the code : \nAccept: application/json, text/plain, */*\nAccept-Encoding: gzip, deflate, br\nAccept-Language: fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7\nConnection: keep-alive\nHost: localhost:8081\nOrigin: http://localhost:8080\nReferer: http://localhost:8080/\nSave-Data: on\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\nMy backend : \nroutertransco.get('/gettable/:tablename', function(req, res, next){\n  let table = []\n  let returnValue = {}\n  let inputTable = \"TRANSCO.\"+req.params.tablename\n  console.dir( )\n  sql.connect(config).then(pool =>{\n    return pool.request()\n    .query('SELECT * FROM '+inputTable)\n  }).then(result =>{\n    console.dir(result)\n    sql.close()\n    result.recordsets.forEach((tab)=>{\n      tab.forEach((elms)=>{\n        table.push(elms)\n      })\n    })\n    res.status(200).json(table)\n  }).catch(err =>{\n    console.dir(err)\n    sql.close()\n    returnValue[\"Response\"] = \"error\"\n    res.status(500).json(returnValue)\n  })\n})\nI don't see what causes error 500 with the browser.\nthx. ",
    "C-Higgins": "@grumblerchester You may if you like, I haven't had time lately. ",
    "mapolin": "This is probably because react does a render before the componentDidMount lifecycle method is called.\nYour questions seems better fit for stackoverflow, no the axios issues board.. ",
    "dpopp07": "That seems like an issue with the API. They should be sending an actual HTTP status code, not just setting it in the body. It's not the job of axios to parse the body and look for a status code under an arbitrary key.. ",
    "mehdibeldji": "I've tested the same code with got and no memory leak.... I've tested the same code with got and no memory leak.... Thanks a lot for your PR \ud83d\udc4d . Thanks a lot for your PR \ud83d\udc4d . ",
    "Tarabyte": "This seems to be V8 issue caused by JSON.parse. I've filed a bugreport.\nThe simplest way to reproduce the issue w/o axios\n```javascript\nsetInterval(() => {\n  const hugeNonJSONString = ''.repeat(10 * 6)\ntry {\n    JSON.parse(hugeNonJSONString)\n  } catch (ignored) {\n    // swallow\n  }\n}, 1000)\n```. @mehdibeldji  Before PR is merged (if it ever would be :rofl: ) you could pass a custom response transformer that does nothing. This should eliminate the leak.\njavascript\nconst axiosClient = axios.create({\n  transformResponse: function(data, headers) {\n    // use JSON.parse only if headers['content-type'].includes('application/json')\n    // or always return data if you don't plan to use this client to fetch json\n    return data \n  }\n});. ",
    "bkawan": "Try this beta version of axios \nhttps://github.com/axios/axios/tree/v0.19.0-beta.1\nIt fixes in my case.\n\"axios\": \"0.19.0-beta.1\",. ",
    "hamyarwoo": "\nTry this beta version of axios\nhttps://github.com/axios/axios/tree/v0.19.0-beta.1\nIt fixes in my case.\n\"axios\": \"0.19.0-beta.1\",\n\nthis is not worked for me. ",
    "MaTToX3": "Bonus:\nSame App on my device works fine:\n    * Browser Version 71.0.3578 (same version)\n    * OS: Android 8.0.0. ",
    "adamasantares": "I have similar problem, I'm getting exception by the catch method, but error is empty object {}.\nWhat does it mean? I have no idea. ",
    "simoneb": "@emilyemorehouse? \ud83d\ude4f thx. ",
    "ccpdouglas": "@Bradzer I tried recreating your issue, the data property was correct in my instance.\nCould you provide more detail and context? Is it running in browser or node?\nExample of it working:\nhttps://jsbin.com/dolakeqite/1/edit?html,js,console,output. ",
    "Bradzer": "Thank you for your reply @ccpdouglas.\nIt is running in node. I'm developing in React Native.. I just tried again with no changes and it just worked.. I wonder how I missed this part : \nYou can add interceptors to a custom instance of axios.\nconst instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});. ",
    "ajaymore": "Below code preserves source across component updates. Using the same solves my problem.\nconst [source, setSource] = useState(Axios.CancelToken.source());. Below code preserves source across component updates. Using the same solves my problem.\nconst [source, setSource] = useState(Axios.CancelToken.source());. ",
    "oze4": "Edit: this has nothing to do with my server.. I am serving this site (even the test site) statically from Github Pages - and the site, http://ip-api.com, is not mine - it is a public API.\nI'm not exactly sure how you were unable to reproduce this.. I am able to reproduce it consistently on multiple connections, on different machines (even different operating systems..) \nYou can even see the 307 in dev tools, and I even used Fiddler to capture my http traffic (which Fiddler picks up on the 307 - but 'follows' it appropriately using their built in 'composer'..)\nHere is a GIF: (for obvious reasons my connection info has been redacted)\n\n. Edit: this has nothing to do with my server.. I am serving this site (even the test site) statically from Github Pages - and the site, http://ip-api.com, is not mine - it is a public API.\nI'm not exactly sure how you were unable to reproduce this.. I am able to reproduce it consistently on multiple connections, on different machines (even different operating systems..) \nYou can even see the 307 in dev tools, and I even used Fiddler to capture my http traffic (which Fiddler picks up on the 307 - but 'follows' it appropriately using their built in 'composer'..)\nHere is a GIF: (for obvious reasons my connection info has been redacted)\n\n. ### Screenshot of 307:\n. ### Screenshot of 307:\n. Yes.  Again, I have been analyzing dev tools traffic as well as a tool used specifically for http monitoring, Fiddler.  Fiddler see's the 307, but just like jQuery does, Fiddler properly responds to the 307 and \"follows\" it without issue (again, just like jQuery does - I have had no issues in the exact same set up using jQuery, which leads me to believe the issue is Axios).  There are a ton of other posts on here, as well as stack overflow, outlining 307 and 302 issues with Axios.\nFigured the Axios team would want to know about this....\nThanks for your help - go Protoss! . Yes.  Again, I have been analyzing dev tools traffic as well as a tool used specifically for http monitoring, Fiddler.  Fiddler see's the 307, but just like jQuery does, Fiddler properly responds to the 307 and \"follows\" it without issue (again, just like jQuery does - I have had no issues in the exact same set up using jQuery, which leads me to believe the issue is Axios).  There are a ton of other posts on here, as well as stack overflow, outlining 307 and 302 issues with Axios.\nFigured the Axios team would want to know about this....\nThanks for your help - go Protoss! . After days of this not working, all of a sudden is just starts working..........everywhere......different apps....everywhere.................i love coding.. After days of this not working, all of a sudden is just starts working..........everywhere......different apps....everywhere.................i love coding.. ",
    "ruscon": "@chinesedfan \nTypescript needs typing.\nThe typification of the class Error does not know anything about this property.\nand the interface in this case also does not work normally.\nThose, the only option is a class. @chinesedfan So you can do something like this:\n```typescript\nimport axios, {AxiosError} from 'axios';\ntry {\n    axios.get('...')\n}\ncatch(err) {\n    if (err.isAxiosError) { // no types\n        const e: AxiosError = error;\n        console.error(e.response);\n    }\n}\n```\nBut this is a bad approach for both js and ts.. @chinesedfan https://medium.com/@xjamundx/custom-javascript-errors-in-es6-aa891b173f87. @chinesedfan heavy way ? \n. @chinesedfan, me too, no problems.\nI made all the changes, as you can see, is nothing heavy there.\nIf classes can be used, then I would even more logic here\nhttps://github.com/axios/axios/pull/2014/commits/e8ddb60f4b61e34699c1ba811b5b3684950d76a7#diff-c08f94705d80a1dab0bdb72bbdd83daa\nIt will be something like this\n```javascript\nmodule.exports = class AxiosException extends Error { \n    constructor(error) {\n        var json = error.toJSON();\n        json.name = AxiosException.name;\n    super(JSON.stringify(json, undefined, 2));\n\n    Object.assign(this, error);\n}\n\n}\n```\n. ",
    "MilanJimi": "Ok, I'm just dumb. Turns out all I needed to do was to add http:// in front of the links.\nIt would however be good if Axios was a wee bit more clear about this. ",
    "varijkapil13": "I am using it with success without any problems everyday at work. Did not have any problems until now.\n. ",
    "creatxrgithub": "how to translate above code to use axios? thanks.\ni tried several times in the code below\nhttps://github.com/axios/axios/issues/2024. how to translate above code to use axios? thanks.\ni tried several times in the code below\nhttps://github.com/axios/axios/issues/2024. > Hi,\n\nTo include the CSRF token in all your request just do that :\nAxios.defaults.headers.common['X-CSRF-TOKEN'] = token;\n\ni tried in the code above:\ninstance.defaults.headers['x-csrf-token'] = res.data.csrf_token;\nor\ninstance.defaults.headers.common['x-csrf-token'] = res.data.csrf_token;\nit 's not work.\nalways get 403 err. or, i cannot use request.jar() for axios?\ni'll try later with axios-cookiejar-support. now, the code below is success.\n```\nconst axiosCookieJarSupport = require('axios-cookiejar-support').default;\nconst tough = require('tough-cookie');\naxiosCookieJarSupport(axios);\nasync function login(name,pass) {\n    let cookieJar = new tough.CookieJar();\nlet instance = await axios.create({\n    jar:cookieJar,\n    withCredentials: true,\n    httpsAgent: new https.Agent({ rejectUnauthorized: false, requestCert: true, keepAlive: true})\n});\nlet res = await instance.get('https://172.16.220.133/api/config');\nconsole.log(res.data.csrf_token);\n\ninstance.defaults.headers['x-csrf-token'] = res.data.csrf_token;\n\nres = await instance.post('https://172.16.220.133/login',{username:name,password:pass});\n\nconsole.log(res.statusCode);\nconsole.log(res);\n\n}\n```. now, the code below is success.\n```\nconst axiosCookieJarSupport = require('axios-cookiejar-support').default;\nconst tough = require('tough-cookie');\naxiosCookieJarSupport(axios);\nasync function login(name,pass) {\n    let cookieJar = new tough.CookieJar();\nlet instance = await axios.create({\n    jar:cookieJar,\n    withCredentials: true,\n    httpsAgent: new https.Agent({ rejectUnauthorized: false, requestCert: true, keepAlive: true})\n});\nlet res = await instance.get('https://172.16.220.133/api/config');\nconsole.log(res.data.csrf_token);\n\ninstance.defaults.headers['x-csrf-token'] = res.data.csrf_token;\n\nres = await instance.post('https://172.16.220.133/login',{username:name,password:pass});\n\nconsole.log(res.statusCode);\nconsole.log(res);\n\n}\n```. ",
    "xgui3783": "Hmm, api_call will always return undefined You might want to use Promise or async \nedit: maybe something like:\n```\nconst api_call = async (variable) => {\n  const result = await axios.get(variable)\n  if (result === true) return true\n  else return false\n}\nconst main = async () => {\n  const json = require('./json.json')\n  let idx = 0\n  while (true) {\n    const result = await api_call(json[idx])\n    if (result || idx > 1e7)\n      break\n    idx += 1\n  }\n}\nmain()\n``. I will assume in your root directory, that there is ajson.json` file, and it looks like:\n[{\n  \"name\": \"my-name-1\",\n  \"id\": \"my-id-1\"\n},{\n  \"name\":\"my-name-2\",\n  \"id\":\"my-id-2\"\n}]\nand in the root directory, you also have an index.js:\n```\nconst fs = require('fs')\nconst axios = require('axios')\nconst apiCall = async (url) => {\n  const result = await axios.get(url)\n  if (result.data === 'value I am looking for') {\n    return result\n  } else {\n    return false\n  }\n}\nconst main = async () => {\n  fs.readFile('./json.json', 'utf-8', (err, data) => {\n    if (err) throw err\n    const json = JSON.parse(data)\n    let index = 0, result = null\n    while (json[index]) {\n      const url = 'http://api.site.com/api.php?id=' + json[index].id\n      result = await apiCall(url)\n      if (result) break;\n      index += 1\n    }\n    console.log('result': result)\n  })\n}\nmain()\n```. It is unlikely an issue with axios, and more likely to be your server config. Although it is strange that your GET request retrieves data no issue. \nWhich origin is your react app being deployed/developed? (I guess the backend is at localhost:8080)\nIncidentally, the access control allow origin header needs to be set by the server, not the client. So \naxios({\n     headers: {\n         'Access-Control-Allow-Origin':'http://localhost:8080'\n     }\n})\nwould not do what you want it to do\nedit: have you tested your endpoint with other tools such as curl or postman, and that the end points are working properly?. definitely your server then. \nIt seems you have configured your GET method this way:\n<OperationContract, WebInvoke(Method:=\"GET\", ResponseFormat:=WebMessageFormat.Json)\nPublic Function myGetMethod (byval val1 as string, byval val2 as string)\n    //DO SOMETHING\nend function\nhave you done something similar for the POST endpoint?. not sure if related, but\nconfig: {\n          headers: {\n            'Content-Type': 'mutipart/form-data'\n          }\n        }\ntypo in content-type?. ",
    "SNOWGUM": "Sorry, I'm still not very familiar with the language. How would I incorporate this to work with a URL? If possible could you create an example with a fake API just so I can understand how that would work? If not that's ok I can just study it deeper :) @xgui3783 . Sorry, I'm still not very familiar with the language. How would I incorporate this to work with a URL? If possible could you create an example with a fake API just so I can understand how that would work? If not that's ok I can just study it deeper :) @xgui3783 . Well, no @xgui3783, I have JSON files for calling information like a config.json, but ultimately the data I want is from the web API. That's what my goal is, to get the data from the API as often as possible then once that data changes or is equal to a value run a separate command. Basically a while loop with an API. Although when I tried the code I posted I was using way too much memory. \nP.S, thanks for responding this issue is really irritating me :) . Well, no @xgui3783, I have JSON files for calling information like a config.json, but ultimately the data I want is from the web API. That's what my goal is, to get the data from the API as often as possible then once that data changes or is equal to a value run a separate command. Basically a while loop with an API. Although when I tried the code I posted I was using way too much memory. \nP.S, thanks for responding this issue is really irritating me :) . Oh wow thanks, :) legend . Oh wow thanks, :) legend . Oh yea sorry . Oh yea sorry . ",
    "ajcastro": "I found a fix for this. Register a global event listener for unhandledrejection like this:\njs\nwindow.addEventListener('unhandledrejection', function(event) {\n  if (\n    event.reason && event.reason.response && (\n      event.reason.response.status === 401\n    )\n  ) {\n    event.preventDefault() // suppress console error\n  }\n})\nThis only suppress console errors for 401 or any condition you want. \nSo you dont need to add empty onRejected and empty catch handlers anymore. :-)\nReference: \nhttps://stackoverflow.com/questions/31472439/catch-all-unhandled-javascript-promise-rejections\nhttps://stackoverflow.com/a/32940253. ",
    "jamesst20": "To answer my own question : \nCookies must be edited using the localStorage API in Javascript.\nmyapp_session cannot be edited at all because it is managed by the browser itself.\nI ended up figuring out that it was an issue in my Laravel Middleware that was causing an empty session every page reload and by fixing it I figured out I had no reason to set myself the Cookie token.. ",
    "rkzhap123": "I think you need to open your server's port.\nyou can check your server's port open from this website\nhttps://www.yougetsignal.com/tools/open-ports/\ncheck from this site that your using port is open. I can see the 3000 port using at that code. ",
    "Talkwondo": "Thank you,\nI can see that my port is closed but i don't understand why.\nI added firewall rule with TCP protocol and add port 3000 on my control panel with ip 0.0.0.0/0 and also on my server. still can not open the port. any idea?. OK i Made it!\nJust node the js file and that's it!\nthe link you sent helped me a lot.\nThank you very much!!. ",
    "VisualCH": "Can be closed, ty. ",
    "cesar18pena": "In Axios the information is store inside response.data.\njs\n// Change this line \nvar value = response.user;\n// For this one\nvar value = response.data.user;\nIn the newest versions of Axios, you are returned a response object containing the data or an error containing an error object. response.data gives you the information you are looking for. The return object consists of:\n`` js\n{\n  //data` is the response that was provided by the server\n  data: {},\n// status is the HTTP status code from the server response\n  status: 200,\n// statusText is the HTTP status message from the server response\n  statusText: 'OK',\n// headers the headers that the server responded with\n  headers: {},\n// config is the config that was provided to axios for the request\n  config: {}\n}\n```. ",
    "noodle": "@emilyemorehouse Is there anything you need from me to get this pushed through?  Technically it's not a bug, but I had initially assumed axios sub-instances were supported after reading the documentation for axios.create.. ",
    "spider58": "i'm stuck on POST request. Can't do anything, searching since days for solve POST problem. Can anyone help me please.\nMy self hosted WCF service is CORS configured. So allowing GET requests from http://localhost:8080 already. But why doesn't allow POST requests. No idea, Tried many things in my react app and wcf service but no chance.\nI tried to log error in console with below code.\naxios({\n     headers: {\n         'Access-Control-Allow-Origin':'http://localhost:8080'\n     },\n     method: 'POST',\n     withCredentials: true\n     url: 'blabla/myPostMethod',\n     data: {\n          val1: \"Hurray\",\n           val2: \"Is it worked\"\n     }\n}).then (result => {\n    //DO SOMETHING\n       }).catch(error => {\n            let errObj = JSON.parse(JSON.stringify(error));\n            console.log(errObj)\n});\nin my console i seeing errObj as below\n\nconfig:\n    data: \"{\"name\":\"John\"}\"\n    headers: {Accept: \"application/json\", Content-Type:\"application/json\", Access-Control-Allow-Origin:\"http://localhost:8080\"}\n    maxContentLength: -1\n    method: \"post\"\n    timeout: 0\n    transformRequest: {}\n    transformResponse: {}\n    url: \"https://myserver/myservice/myPostMethod\"\n    withCredentials:true\n    xsrfCookieName: \"XSRF-TOKEN\"\n    xsrfJHeaderName: \"X-XSRF-TOKEN\"\n. @xgui3783 thanks for reply.\n\nI tested with Fetch api. GET worked but POST same. I using NTLM authentication and SSL\nso my wcf service adress is \"https://myserver/myservice\"\nI Implemented CORS support code into my WCF service from this link\nhttps://enable-cors.org/server_wcf.html\nas you can see they added required headers.\n```\nrequiredHeaders.Add(\"Access-Control-Allow-Origin\", \"*\");\n                    requiredHeaders.Add(\"Access-Control-Request-Method\", \"POST,GET,PUT,DELETE,OPTIONS\");\n                    requiredHeaders.Add(\"Access-Control-Allow-Headers\", \"X-Requested-With,Content-Type\");\n```\nI just changed origin with http://localhost:8080\n```\n requiredHeaders.Add(\"Access-Control-Allow-Origin\", \"http://localhost:8080\");\n                    requiredHeaders.Add(\"Access-Control-Request-Method\", \"POST,GET,PUT,DELETE,OPTIONS\");\n                    requiredHeaders.Add(\"Access-Control-Allow-Headers\", \"X-Requested-With,Content-Type\");\n```. @xgui3783 i tried with postman now but same. 401 Unauthorized. . ",
    "dylanwulf": "Looks like that URL has a circular redirect, so this is probably related to issue #2042 . ",
    "mirukusheki": "The problem was clear itself. Probably because the babel problem. ",
    "Rossolson": "Yep. Sounds much better.. ",
    "kompot": "Accepted. Done.. ",
    "tybro0103": "Not sure if it'd be better to have any empty array here or not. ",
    "hickford": "Should that be parsed.hostname?. ",
    "vbfox": "@rubennorte done.. ",
    "cctuan": "@hg-pyun  hmm , based on the XMLHttpRequest spec https://xhr.spec.whatwg.org/#handler-xhr-onreadystatechange\nreadyState might be OPENED , HEADERS_RECEIVED, or LOADING, before DONE , and I think we still need to keep request object before the final state.. ",
    "blling": "aaxios -> axios. ",
    "jdorfman": "FWIW SRI is an important security standard (just ask @KingstonTime @metromoxie & @freddyb) that Bootstrap updates each release.\nAlso, it is a horrible practice for those to use the latest version which most green developers do and leave until a breaking change happens. They then go to Twitter, GitHub Issues and/or SO to complain how their site broke because...you get the point ;). I agree with @styfle @Jamesking56 any thoughts?. ",
    "metromoxie": "It is, admittedly, a tricky balance, since you want to ensure that users are getting what they expect from the CDN, but you want to make sure that new users are getting up-to-date versions. I do think that Bootstrap strikes a good balance here by automating the ",
    "styfle": "I think if this link has a version, then the unpkg link should also include the version. It's odd if they are not linking to the same code.. ",
    "igatak": "Excuse me. How about this fixing in adapters/http.js.\nif (config.maxRedirects) {\n  options.maxRedirects = config.maxRedirects;\n}\noptions.agents = {\n  http: config.httpAgent,\n  https: config.httpsAgent\n};\ntransport = isHttpsProxy ? httpsFollow : httpFollow;\nhttps://github.com/axios/axios/blob/master/lib/adapters/http.js#L169-L172. ",
    "pbdm": "can we add change this line to var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()] ||  process.env.all_proxy || process.env.ALL_PROXY] so that we can support all_proxy environment variables. ",
    "pm123": "nice. ",
    "mtandersson": "Yes, maybe. I think that C would work well for Config, below we already have T for the expected response type, R for the Axios response. "
}