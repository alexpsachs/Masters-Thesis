{
    "catfan": "This feature will be added on next version.\nYou can unserialize this at first.\n. @agence86 The next version of Medoo will consider your situation.\n. This feature is added on Medoo 0.8.2 with more flexibility.\n. This feature is became a part of info() return value on 0.8.1. You can get this on dev branch now.\n. Maybe this is the problem about charset. Are you using UTF-8?\n. @inlanger I don`t know the detail if just say that. Post some screenshot to describe the problem, please.\n. Just use the pdo object. http://medoo.in/api/pdo\n. Thank you, your are right:)\nIt is fixed.\n. @jefrip Is there any example to demonstrate this issue?\n. Fixed\n. Thanks, it fixed.\n. If insert data into table that did not exist, the return data will be 0.\n$last_id = $databbase->insert(\"table\",array(\"foo\" => \"bar\"));\nvar_dump($last_id); // == '0'\n. On Medoo 0.8.5, you can output the error by $database->error() if you insert data into the table doesn't exist.\n. Yes, you are right. Good fix!\n. Good suggestion!\nMedoo is now registered as composer module. Any idea for the configuration for composer.json?\n. Why do not just use PHP native function to do this stuff? Like md5($_POST['password']', $salt)?\nIf you really want to build the query for yourself, you can use quote() to escapes special characters.\nWHERE password=' . $database->quote(\"MD5(concat('$_POST['password']', salt)\") . '\nhttp://medoo.in/api/quote\n. That`s because you cannot declare key-value array with duplicate key name. Not only PHP, but for most programming language.\n```\n$data = array(\n    'name' => 'foo',\n    'name' => 'bar'\n);\necho $data['name']; // 'bar'\n```\nAny good idea to solve this?\n. Added\n. @spiider @lorion84 This feature is experimental on Medoo 0.8.5. But better support on version 0.8.6 [#develop] on dev branch released recently. Try it:)\n'[>]' = 'LEFT JOIN'\n'[<]' = 'RIGHT JOIN'\n'[<>]' = 'FULL JOIN'\n'[><]' = 'INNER JOIN'\n```\n$database->select('post', [\n    // if post.author_id is equal account.user_id\n    '[>]account' => ['author_id' => 'user_id'],\n// USING user_id, if post.user_id is equal album.user_id\n'[>]album' => 'user_id',\n\n// USING ('user_id', 'avatar_id'), if post.user_id is equal photo.user_id and post.avatar_id is equal photo.avatar_id\n'[>]photo' => ['user_id', 'avatar_id']\n\n], [\n    'post.post_id',\n    'post.title',\n    'account.city'\n], [\n    'post.user_id' => 100,\n    'ORDER' => 'post.post_id DESC',\n    'LIMIT' => 50\n]);\necho $database->last_query();\n``\n. Added\n. Its very hard to make a decided from now yet. Both JSON and serialization are with benefit and drawback together. And:\n1. If use serialization to store data, then unserialization can be automatically, thats good and thats right, but if use json_encode for that, json_decode cannot be automatically because it depend on user how to use it (decode for additional operation, or just load it and output as JSON data to client?)\n2. How about some database which have been use serialize or json_encode to store data?\n3. Possible to use other module for serialization, like igbinary, JMSSerializerBundle, serializer and so on?\nThat`s tough, but welcome to talk more and think more idea here:)\nI would like to get more idea to design this function.\n. Added\n. Thanks your code. But actually it is possible to configure target port from server option. Like this:\n$database = new medoo([\n    'database_type' => 'mysql',\n    'database_name' => 'mydb',\n    'server' => 'localhost:3306',\n    'username' => 'root',\n    'password' => 'foobar'\n]);\nOr configure from file directly:\nprotected $server = 'localhost';\n. @jsvensson Make sure the MySQL port of MAMP you installed is 8889, but not 8888, 3306 or others?\n. @jsvensson @fgusinde\nThat\u2018s strange. I tested with localhost:3306 as server option on PHP5.4 + MySQL5.6 via TCP/IP, that\u2019s OK. And tested locahost:3307 or others will be failed. It provided that PDO support server name with port.\nI will start more test for independent port option.\n. @AnaelFavre OK, thanks:)\n. @AnaelFavre This issue is fixed and improve on 7636853 develop branch.\n. @fgusinde Any better code to solve this feature?\n. @AnaelFavre OK, thanks your code:) I will do some research for this issue and merge it into the branch. BTW, submit your code to develop branch than master in the further.\nBut welcome to discuss and ideas here:)\n. @AnaelFavre This code is merged into develop branch. Submit merge pull request to develop branch in the further, so that can merge your code easily:)\n. You should install the required PHP module at first. Especially php_pdo and php_pdo_mysql.\nhttp://medoo.in/api/new\n. Added\n. @jimolina Hi, thank you for your feedback. This feature is considerable, but need sometime to confirm about it.\nBTW, you don't have to report your modified code like this. Just fork Medoo and modify on your branch, and submit a pull request, as Github flow, that's better:)\n. Added\n. @jimolina @seijikun This feature is added on develop branch ac9f8a3, but use parentheses (brackets) for this because that symbol is represent as supplementary information literally.\n```\n$database->select('account', [\n    '[>]post' => 'user_id'\n], [\n    'account.user_name(account_name)',\n    'post.user_name(post_name)',\n'account.user_id'\n\n]);\n```\nPS: This is also possible account.user_name (account_name).\n. That's said, if you want to use MySQL database, you have to enable php_pdo_mysql extension on php.ini configuration file. It have mentioned on the bottom of http://medoo.in/api/new already.\nIf you are using shared hosting, you may have to contact their customer service to confirm php.ini is customizable or not. And you can use phpinfo() to check out the extension is installed successfully.\nIt's good to let error message make more sense. \n. Try the develop version: https://github.com/catfan/Medoo/tree/develop. It fixed.\n. It's good to have it. But where is your committed code?\n. Fixed\n. Thanks! Fixed it now:)\n. @ortick Using ORDER BY FIELD will slow down the performance greatly. The good idea to handle this situation is fetched the data at first and sorted by PHP sorting function afterward. http://www.php.net/manual/en/array.sorting.php\nHere the sorting function for user define order like ORDER BY FIELD for usort:\n```\nfunction mySort($a, $b)\n{\n    // The ordered field\n    $order = array_flip([50, 164, 1023, 532, 43]);\n    // The field name\n    $field = 'user_id';\nreturn $order[ $a['user_id'] ] - $order[ $b['user_id'] ];\n\n}\n```\nOriginal:\n```\nArray\n(\n    [0] => Array\n        (\n            [user_name] => jason\n            [user_id] => 43\n        )\n[1] => Array\n    (\n        [user_name] => Andy\n        [user_id] => 50\n    )\n\n[2] => Array\n    (\n        [user_name] => snow\n        [user_id] => 164\n    )\n\n[3] => Array\n    (\n        [user_name] => foo\n        [user_id] => 532\n    )\n\n[4] => Array\n    (\n        [user_name] => sinda\n        [user_id] => 1023\n    )\n\n)\n```\nAfter:\n```\nusort($data, \"mySort\");\nArray\n(\n    [0] => Array\n        (\n            [user_name] => Andy\n            [user_id] => 50\n        )\n[1] => Array\n    (\n        [user_name] => snow\n        [user_id] => 164\n    )\n\n[2] => Array\n    (\n        [user_name] => sinda\n        [user_id] => 1023\n    )\n\n[3] => Array\n    (\n        [user_name] => foo\n        [user_id] => 532\n    )\n\n[4] => Array\n    (\n        [user_name] => jason\n        [user_id] => 43\n    )\n\n)\n```\nBy commenting this issue, I came up an idea to improve the sorting feature for Medoo based on this concept. Maybe available in the further.\n. @ortick @ks1f14s \nI tested it, but I founded that the customized sorting PHP function is not faster than MySQL ORDER BY FILED.\nThat`s a little bit strange, but I think the reasonable explanation is the SQL querying language is running as C and the ORDER BY command can use the indexed data to optimize the ordering operation.\nAnyway, this feature is still valuable and will be added on the further.\n. Added\n. There is no bug for array_flip. This is used for make a new array with query keywords as key name, for the array_diff_key comparison to check out the single condition.\n```\n$compare_keys = array_flip(\n    explode(' ', 'AND OR GROUP ORDER HAVING LIMIT LIKE MATCH')\n)\n\u2193\u2193\nArray\n(\n    [AND] => 0\n    [OR] => 1\n    [GROUP] => 2\n    [ORDER] => 3\n    [HAVING] => 4\n    [LIMIT] => 5\n    [LIKE] => 6\n    [MATCH] => 7\n)\narray_diff_key([\n    'user_id' => 300,\n    'LIMIT' => 200,\n    'ORDER' => 'email'\n], $compare_keys);\n=> Array ([user_id] => 300)\n```\nBut without array_flip:\n```\n$compare_keys = explode(' ', 'AND OR GROUP ORDER HAVING LIMIT LIKE MATCH');\n\u2193\u2193\nArray\n(\n    [0] => AND\n    [1] => OR\n    [2] => GROUP\n    [3] => ORDER\n    [4] => HAVING\n    [5] => LIMIT\n    [6] => LIKE\n    [7] => MATCH\n)\narray_diff_key([\n    'user_id' => 300,\n    'LIMIT' => 200,\n    'ORDER' => 'email'\n], $compare_keys);\n\u2193\u2193\nArray\n(\n    [user_id] => 300\n    [LIMIT] => 200\n    [ORDER] => email\n)\n```\n. No, that's not the best solution.\nAnd for NOW(), why not just use PHP native function instead?\n. Added it. You may try #112.\n. What if only want to pass ORDER BY xxx clause?\n. This pull request has been merged into develop branch. THX:)\n. Debug mode is now available since 0.9.8 http://medoo.in/api/debug\n. Fixed\n. Yes, it`s a bug that set the SQL_MODE globally on initialization. It will return empty data for the first query. I provided a hotfix for this.\nUsing ANSI_QUOTES is for standard SQL query, because the default MySQL quoting identifier is non-standard. http://wiki.ispirer.com/sqlways/sybase/identifiers\n. http://medoo.in/api/pdo\n. @JDubDev Fixed on develop branch. You can push your fixed code to develop branch instead of just writing an issue here.\n. Just use the pdo object. http://medoo.in/api/pdo\n. This feature is added.\n. Its not recommend to use SQL inbound function for SQL query that PHP native function can do it as well.\n. Yes, because you are defining an array with duplicate key in PHP. Thats a mistake.\n```\narray(\n    \"AND\" => xxx,\n\"AND\" => xxx\n\n)\n``\n. @Shevisko We can only read one value from duplicated keys array. Every keys should be unique. Thats the rule.\nYes, that`s the problem, and I think it have to fix it.\nThis is one of the soluble method I figured out:\n```\n$database->has(\"account\", [\n    \"AND\" => [\n        \"OR(1)\" => [\n            \"user_name\" => \"foo\",\n            \"email\" => \"foo@bar.com\"\n        ],\n    \"OR(2)\" => [\n        \"user_name\" => \"bar\",\n        \"email\" => \"bar@foo.com\"\n    ],\n\n    \"OR(3)\" => [\n        \"user_name\" => \"foobar\",\n        \"email\" => \"foobar@bar.com\"\n    ]\n]\n\n]);\n```\nWhat do you think? Or any better idea?\nThanks!\n. I pushed a new code for this issue on develop branch.\nJust use it:\n$database->select(\"conversations\", \"*\", array(\n    \"OR\" => array(\n        \"AND #any commit\" => array( \"from\" => 2, \"to\" => 1),\n        \"AND #any commit 2\" => array( \"to\" => 2, \"from\" => 1)\n    ), \n    \"ORDER\" => \"sent ASC\"\n));\nThe commit content can be anything, but just need # as the starter.\n. Added\n. We have added it. Not enough?\n. @jerrywham Yes, are you talking about column alias?\n. http://medoo.in/api/where #Full Text Searching\n. That will be better I think:\n``` php\n$database->select(\"account\", [\n    \"user_id\",\n    \"user_name\",\n],[\n\"LIKE\" => [\n    // Match %title%\n    \"content\" => \"something\"\n\n    // Match %title\n    \"%content\" => \"something\"\n\n    // Match title%\n    \"content%\" => \"something\"\n]\n\n]);\n```\n. @JulioSimon Yes, until the new version with this feature released.\n. Added, like the sample above.\n``` php\n$database->select(\"account\", [\n    \"user_id\",\n    \"user_name\",\n],[\n\"LIKE\" => [\n    // Match %title%\n    \"content\" => \"something\"\n\n    // Match %title\n    \"%content\" => \"something\"\n\n    // Match title%\n    \"content%\" => \"something\"\n]\n\n]);\n```\n. Is there anyone to have a test with DSN string for PDO?\n. @simplepanda @RideLikeTheWind Is it tested successfully?\n. It's possible to do that on next version 524ce57ec3dc07f86499f139e6e1918d80037578.\n. Medoo dropped support of prepare because the quoting process of prepare is not good with serialized array data in current, and with some compatible issues.\nWe will check out more for this in the further.\n. I added support for this, but with a little different code to keep the return value is int if it is numeric as previous version.\n. Hi, @jaircuevajunior \nThis feature has been added on f994df7, and also supported for other select based APIs. Would you like to have a full-test for this?\nLooking for your feedback:)\n. Merged. Thanks for your contribution:)\n. This issue has been fixed in emergency.\n. The document system of Medoo official website is not open-sourced and not good enough to be, but it is possible to save every doc pages and translate into Chinese as static file. It's only 19 pages and simple.\n. Well, yes. But it cannot guarantee to have a translated version with different language once the version is released. It's hard to synchronize for that.\nAnyway, it's worth to spend more time to find out the better solution for this issue.\n. @raykwok Still no plan for this...\n. You cannot pass blank array as $where in current. Perhaps you can add something into it.\n. We have no intention to add this feature. Why not just use constant instead?\n. ``` php\n$database = new medoo();\n// If you want to add this feature here\n$database->alias('account', 'my_prefix_account');\n// So good for this\n$database->insert('account', [\n  'user_name' => 'foo'\n  'email' => 'foo@bar.com',\n  'age' => 25,\n  'lang' => ['en', 'fr', 'jp', 'cn']\n]);\n// But what if I want to fetch date from other table without prefix for special reason?!\n$database->select('another_account', 'user_name');\n```\n. Added this feature finally :)\nphp\n$database = new medoo([\n    'database_type' => 'mysql',\n    ...\n    'charset' => 'utf8',\n    'prefix' => 'PREFIX_'\n]);\n. Well, it is a bug. Will be fixed.\n. 1. Keep using the latest version. Medoo 0.9.5.3.\n2. No SQL function allowed in current.\nphp\n$click = $dbmcps->count(TB_PREFIXCPS . \"webvisit_\" . $tableid, \n    array(\n        'AND' => array(\n            'date' => $yesterday,\n            'uid' => $memberid\n        )\n    ));\n. We have no plan to support this feature in current, because you can use PDO function for transaction by $database->pdo->beginTransaction().\n. Just use the pdo object. http://medoo.in/api/pdo\n. Added, but still keep using ORDER.\nphp\n$database->select('account', [\n    'user_id',\n    'user_name'\n], [\n    'ORDER' => ['user_name DESC', 'user_id ASC']\n]);\n. Actually using * to select all columns is not a good practice. Slow performance and will cause some security issue.\nWe recommend to assign the column you wanted in detail.\n. Are you talking about this http://medoo.in/api/query?\n. Why not just use PHP native method http://php.net/manual/en/function.time.php and http://php.net/manual/en/function.strtotime.php?\n. https://github.com/catfan/Medoo/issues/81\n. I think it have to make more consideration. The syntax is not friendly enough and is will make it more complex.\n. Check out the new feature raw object https://medoo.in/api/raw.. Check out the new feature raw object https://medoo.in/api/raw.. Added.\nphp\n$database->select('account', [\n    'user_id',\n    'user_name'\n], [\n    'LIKE' => [\n        'user_name[!]' => 'foo'\n    ]\n]);\n. You can not do it in current version. But why not fetch the data and then using shuffle() to randomize the order?\n. Fixed\n. @Heirir Yes, it is a bug, and I fixed it.\n. It will be considerable, but I don't want to make it more complex. It have to spent more time to think around.\nThe $column_fn is used on count(), max(), min() functions and more.\n. Fixed it.\n. No, the reason why \"table\" works on MySQL is here:\nphp\ncase 'mysql':\n    // Make MySQL using standard quoted identifier\n    $commands[] = 'SET SQL_MODE=ANSI_QUOTES';\n. @kovinet If you are using Medoo, you don`t have to care about the quotes. And I also answered the reason why the quote identifier is different.\n. Added 9e4d4980\n. The goal of Medoo is for most common query. This kind of complex relativity query is not Medoo targeted.\n. Read table joining: http://medoo.in/api/select\n. Medoo 1.4 is improved with that.. Check out the new feature raw object https://medoo.in/api/raw.. No matter any case about it, just provide the detailed column name you wanted while you are fetching data from table for better performance.\nUsing * is strongly not recommended.\n. Fixed 9f41dfa29e9d91d8c1d29e4219b02652d6ac4461. No, \" double-quotes is standard quote identifier in the SQL-92 standard.\n. This feature is not great for friendly construction.\n. Read serious about table joining from http://medoo.in/api/select\nphp\n$users = $this->db->select('users',\n    [\n        // uid from users table, and user_id from tournaments_users table\n        '[>]tournaments_users' => ['uid' => 'user_id']\n    ], [\n        'users.uid',\n        'users.name',\n        'users.modifier',\n        'users.handicap',\n        'tournaments_users.tournament_id'\n    ], [\n        'tournaments_users.tournament_id' => 1,\n        'ORDER' => 'users.username ASC'\n    ]\n);\n. Check out the new feature raw object https://medoo.in/api/raw.. Check out the new feature raw object https://medoo.in/api/raw.. @jimdobjoern If you want to use LIKE with AND for other value together you can use it.\nLIKE is used as independent clause in current. Read more: http://medoo.in/api/where\nBut I will think more about how to design it with other value.\n. Improve since 0.9.8 http://medoo.in/api/where\n. ``` php\n\"LIMIT\" => 100\n// Not\n\"LIMIT\" => [100]\n``\n. That is not a bug. http://php.net/manual/en/pdostatement.fetchall.php\n. In this case, you should useMATCHinstead ofLIKE`.\nphp\n$this->db->select('pictures', '*', [\n    'MATCH' => [\n        'columns' => 'tags',\n        'keyword' => ['beer', 'bottle', 'lemon']\n    ]\n]);\n. The reason why we provide minimized version for Medoo is not about the bandwidth.\nFor some projects, especially for open-source which using Medoo as database framework, it will be nice to use the minimized version to decrease the whole project size; And it will be better for some teams or company to focus the usage of the Medoo not the source code itself. And more...\nAnyway, no matter what you think about the minimized version, we are providing the both productive and develop version for you to pick up depended on different people with different requirement:)\n. php\n$count = $database->count(\"ok_order\",\n    \"your_column\",\n    array('AND' =>\n        array(\n            \"id_status\" => 2,\n            \"#day\" => \"DAY(CURRENT_DATE)\",\n            \"#month\" => \"MONTH(CURRENT_DATE)\"\n        )\n    )\n);\n. You have to provide the relativity condition keyword.\nRead more: http://medoo.in/api/where\n. No limit for UPDATE\n. Added 9e4d498\n. The first code result you post is that you are creating an array with only one string value.\n``` php\n$vaule = \"1, 2, 3\";\n\"user_id\" => [$value]\n// \"user_id\" => array(\"1, 2, 3\")\n```\nThat`s wrong!\nProbably, you need:\n``` php\n$value = \"1, 2, 3\";\n\"user_id\" => explode(\", \", $value)\n```\n. Well, I think just returning a value is not a convenient way for this.\nHave to think a better way to check.\n. Good idea! Will consider for this:)\n. Thanks, we merged into develop branch now:)\n. Use pdos prepare http://medoo.in/api/pdo\n. Use the pdo prepare function. http://medoo.in/api/pdo\n. No, this $option is not representing the $option property. It is overwriting all the initialization value to the properties like username, password, port and so on.\n. Check out the new feature raw object https://medoo.in/api/raw.. Keyword should be uppercase for better readability.\n. Added this feature on develop branch now. You can use$database->log()` for outputting all SQL statements.\n. Thanks for the submit and idea! I added this feature with less code and keep it clean.\n. v1.5 is now throw PDOException. Check out https://medoo.in/api/delete. Did you provide the correct type of database for initialization?\n. Perhaps you re-initialize on other place and provide nothing option for parameter.\nYou will get the error if you just run new medoo(). Check out your code carefully.\nOf course, this will be fixed for better error notification.\n. So, you have to install or \u001fcompile the php_pdo_dblib driver for PHP to load.\n. It supports limit for MSSQL 2012+ with FETCH ROW on Medoo 1.4.. Fixed it.\n. Supported. You may try this attribute: https://coderwall.com/p/k5qauw/running-out-of-memory-with-pdo-php\n. 'option' => [\n    PDO::MYSQL_ATTR_USE_BUFFERED_QUERY => false\n]\n. @misaf No. You can add any attribute option if you needed, or provide nothing. It's up to you.\n. ....No, option is an array with PDO options. It's optional. Just add if you really needed.\n'option' => [\n    PDO::ATTR_CASE => PDO::CASE_NATURAL,\n    PDO::MYSQL_ATTR_USE_BUFFERED_QUERY => false\n]\n. http://medoo.in/api/pdo\n. It's now supported.\n. @sebam91 Oh, sorry. I mixed this issue up with ORDER by.\nIt's added on develop branch now, and will be release soon. 8c796f48eb. @germansokolov13 It's possible on next version https://github.com/catfan/Medoo/issues/635. It's now released.\nhttps://medoo.in/api/raw. @Jervelund Right\n. Well, you cannot do this via Medoo. This feature is only for MySQL, and not a standard SQL syntax.\nPerhaps you can use query() or pdo->prepare() to do this specially.\n. Read about Order by field http://medoo.in/api/where\n. Thanks, we have merged into Medoo code. But please merge the change into develop branch next time, that's better.\n. Added this feature.\n. It's fixed.. Added this feature.\n. How do you debug for that?\nHave you tried this? http://medoo.in/api/debug\n. Well, the MATCH is actually under consideration to be redesigned like LIKE -> [~] does. I'm thinking of its syntax.\n. Check out the new feature raw object https://medoo.in/api/raw.. It is unnecessary. You can access the direct log file from database engine.. Check out the new feature raw object https://medoo.in/api/raw.. Fixed it.\n. The better way is using PHP native function to do that.\n. Multi-insertion will execute only one query on Medoo 1.2.. Thanks for the report :)\nThis bug fixed.\n. @4t0m1k Good point :)\n. Fixed. Well, good spot, will be fixed :)\n. There is no alias supported for table joining yet.\n. Fixed it on develop branch. #229\n. Yes, right. That's reverse searching. If you remove it, you can not match the 12345%.\n. Prepared statement is now supported on Medoo 1.4.. @Drive4ik This is not a bug. Medoo is using standard SQL quote to be compatible for other SQL database. You can notice that we set SET SQL_MODE=ANSI_QUOTES for MySQL in initialization.\nAnd why you execute the Medoo generated query alone, while Medoo can generate and execute itself correctly?\n. It's now supported on Medoo 1.2.. @Forsakenfx You can use customized DSN to connect any kind of database.\nhttps://medoo.in/api/new. Check out the new feature raw object https://medoo.in/api/raw.. Supported here 9c60c6c82. Will support on v1.5. Would you like to post the example code to demonstrate for that?\n. Check out the new feature raw object https://medoo.in/api/raw.. Actually, for most of database system, they have query cache feature also.\nhttps://dev.mysql.com/doc/refman/5.1/en/query-cache.html\nAnd you can use Redis or Memcache system for caching the result for better performance and management.\n. Check out the new feature raw object https://medoo.in/api/raw.. Check out the new feature raw object https://medoo.in/api/raw.. @smartclash Firstly, there is no big different between using PDO::quote and prepare statement for SQL injection. They are doing the same thing for handling data. If you think it is too dangerous because it didn't use prepare(). That's wrong.\nSecondly, I admit that prepare statement has some more advantage. So, Medoo is reconstructed using PDO::prepare() and provide more advanced feature on develop branch now, and will be released soon.\n. You have to create the database by yourself.\nMedoo don't provide create method because it only run a time for most case, and for most of time, using some database management tool like MySQL Administrator, to generate the create table query and then use the $database->query() or exec() will be the better choice.\n. Check out the new feature raw object https://medoo.in/api/raw.. Check out the log option on initialization.\nhttps://medoo.in/api/log. Check out the new feature raw object https://medoo.in/api/raw.. Check out the new feature raw object https://medoo.in/api/raw.. Supported in latest version\n. Fixed it on 01043d4da24075cd68d6a1b6c0169802d7607790\n. insert() is now return the PDOStatement object, you can check out the error on it.. Thank for the report :+1:\nI fixed it with simpler way.\nAnd follow the contribution guide that submit your code to the develop branch, and start a pull request into it next time :)\n. If you want column alias, please the documentation here http://medoo.in/api/select.\nAnd notice this code from Medoo initialization that forcing MySQL to use standard quoted identifier.\nphp\n$commands[] = 'SET SQL_MODE=ANSI_QUOTES';\nAnd I think you have to check the datetime format again.\n. It's now supported on develop branch for next version.\nhttps://github.com/catfan/Medoo/blob/develop/medoo.php#L35\n. Your $myQuery is what you wanted already.\n. Thanks for that suggestion.\nAs for other Cloud based SQL service, like CloudSQL from Google and Amazon RDS or more from other company, it is hard to support all.\nBut it is should be considered to be configurable for supporting potential database.\n. It will be available on next version! 524ce57ec3dc07f86499f139e6e1918d80037578\n. That's OK.\n. Namespace requires PHP 5.3+, but Medoo is supported 5.1+.\nBut Medoo will require PHP 5.4+ for next version, and will add namespace also.\n. v1.5 will output by the database default quote identifier.\nhttps://medoo.in/api/whatsnew. @omriamos It don't need to be fixed, it's now a bug. And it also output with the database default quote identifier for debug().. Thanks for the request :)\nIt seem look good and understandable. But how about the extensibility, and more complex case?\n. Check out the new feature raw object https://medoo.in/api/raw.. I have sent a update request for https://packagist.org. It will be available now.\nhttps://packagist.org/packages/catfan/medoo\n. The info you provided is not sufficient enough. It is hard to make someone to help you.\n. If there is only one value for LIMIT, you can just set it as 'LIMIT' => 10. No need to use array.. Check out the new feature raw object https://medoo.in/api/raw.. Do not use news.* for table joining.\n. It's now supported since 1.4.\nhttps://medoo.in/api/where. Check out the new feature raw object https://medoo.in/api/raw.. Would you like to output the result of $database->debug()->count and the query you used on PHPmyadmin?\n. Check out the new feature raw object https://medoo.in/api/raw. And the request is not good for merge. Check out the contribution guide.. That's not a bug. We leave the break to keep executing the next code.\n. It's updated on Medoo 1.2. Use new API id() instead.. That's good, thank you for your request.\n. Well, it is considerable.\n. Supported on Medoo 1.4.. It's supported now.\n. This fixed it on 43aca2d8\nThanks to @SyuTingSong request, but in this case it should not be cheated and converted to string value. LIKE condition should accept string value only.\n. Check out the new feature raw object https://medoo.in/api/raw.. Really sorry for this stupid bug! We fixed it now.\n. You have to initialize before using it.\nhttp://medoo.in/api/new\n. @simplicitywebdesign What's version you are using?. This feature is considerable, but will not implement like this way.\nProbably will set it as option on initialization. But it's not 100% sure yet from now.. This is not recommended, and will be conflicted on table joining.\n. The doc is now with more examples.. It's now possible for Medoo 1.2.. The query() will return false if preparation pdo->prepare() is failed. https://github.com/catfan/Medoo/issues/588\nYou can check the statement before next operation.\n```php\n$statement = $database->query(\"SELECT * FROM EVENTDB.domains d WHERE d.domain_id='7'\");\nif ($statement)\n{\n    $data = $statement->fetchAll(PDO::FETCH_ASSOC);\n}\n```. You can add this for initialization as option\nphp\n'option' => [\n        PDO::MYSQL_ATTR_SSL_KEY  => '/etc/mysql/client-key.pem',\n        PDO::MYSQL_ATTR_SSL_CERT => '/etc/mysql/client-cert.pem',\n        PDO::MYSQL_ATTR_SSL_CA   => '/etc/mysql/ca-cert.pem'\n]\n. Using SQL functions will be supported on v1.5. You can use it as raw object. It's developing.\nAll those issues will be closed after this feature is finished.. It's now released.\nhttps://medoo.in/api/raw. Can you show the ping result of medoo.in? We have nothing change for the website in current.\n. You can use composer or just download and include for it. Up to you.\n. The return id is fixed now.. We have no official Chinese or other language documentation in current. All of them are translated volunteer.\nPlease check out our official website: http://medoo.in.\n. Check out the new feature raw object https://medoo.in/api/raw.. Check out the $data or check out the PDOStatement object.. Check out the new feature raw object https://medoo.in/api/raw.. This value should be optional for initialization.\nAnd v1.2 can also customize the DSN for connection.. You can encode and decode the BLOB image content yourself for saving and fetching data for database.\nBTW, I think it is not a good idea to save image content into database. Using file system or third-party image storage provider is better.\n. Medoo support table prefix already. You can add prefix from initialization, and see the result.\n```\nnew medoo([\n    // required\n    'database_type' => 'mysql',\n    'database_name' => 'name',\n    'server' => 'localhost',\n    'username' => 'your_username',\n    'password' => 'your_password',\n    'charset' => 'utf8',\n// [optional]\n'port' => 3306,\n\n// [optional] Table prefix\n'prefix' => 'PREFIX_'\n....\n\n])\n```\n. Fixed it on cd389ed\n. Check your log file and see what's wrong.\n. How about this?\nphp\n$datas = $database->select(\"account\", [\n        \"user_name\",\n        \"email\"\n    ], [\n        \"user_id\" => md5($SomeMd5String)\n    ]\n);\n. Check out the new feature raw object https://medoo.in/api/raw.. You can use transaction for this, or check it before insertion.\n. It didn't support MySQL JSON function, but you can assign the column data as JSON and Medoo will insert it as JSON string data into database.\nhttp://medoo.in/api/insert\n. Check out the userid is the primary key with int type and auto-increase.\n. 1. Check your id is set to primary and auto-incease\n2. Check the column is null possible\n. insert is now return PDOStatement object. You can now check out more info about this.\nhttps://medoo.in/api/insert. It supported now.. v1.5 support regexp.\nhttps://medoo.in/api/where. It's possible to do that using raw object. https://medoo.in/api/raw. It's now support regex. https://medoo.in/api/where. Fixed. Check out the new feature raw object https://medoo.in/api/raw.. Check out the new feature raw object https://medoo.in/api/raw.. Check out the new feature raw object https://medoo.in/api/raw.. @Hatsunyan Thank you for your report. I fixed this bug already.\nIn your code request, it cannot just return the column string from column_push(), it will have error.\n. Fixed it on Medoo 1.2.. Fixed it on df99bff. 1. Yes, ORDER BY RAND() is not supported, and we don't recommend you to use that for randomizing data.\n2. Would you like to show me the code you used for select()?\n. Check out the new feature raw object https://medoo.in/api/raw.. Read the doc to see how to use debug()\nhttp://medoo.in/api/debug\n. Would you like to show the code are you using?\n. Yes, we don't support this syntax anymore. Split the order sorting keyword to make the code looked cleaner.\nphp\n\"ORDER\" => [\n    \"id\" => \"ASC\"\n]\n. Check out the new ORDER syntax for v1.1.\n. You can use alias feature to prevent the conflict right now.\nphp\n[\n      'artworks.id',\n      'artworks.created_at',\n      'artworks.modified_at',\n      'author' => [\n            'author.id(author_id)',\n            'author.name',\n            'author.created_at(author_create)',\n            'author.modified_at(author_modified)'\n      ]\n]\nif don't use the data mapping, it is still require you to use the alias to identify the conflicted column.\nphp\n[\n      'artworks.id',\n      'artworks.created_at',\n      'artworks.modified_at',\n      'author.id(author_id)',\n      'author.name',\n      'author.created_at(author_create)',\n      'author.modified_at(author_modified)'\n]\nBut it will be a little bit complex to handle this without using the alias, because Medoo is using PDO::FETCH_ASSOC to fetch the data, it can be improve for it in the further.\n. @piotrostrowski Well, it is a bug. We missed handle the alias for internal mapping. And we fixed it now.\n. Because it will have to check out every selected data and convert it into JSON. It will cause some performance issue.\nI'm considering the better way to improve for this.\n. Support on latest version.. You don't need to use Medoo for that.\nhttp://stackoverflow.com/questions/1045910/how-can-i-import-load-a-sql-or-csv-file-into-sqlite\n. It's now possible for Medoo 1.2 with customized DSN.. Check out the new feature raw object https://medoo.in/api/raw.. http://medoo.in/api/select\nRead about the alias.\n. Will be available on next version dc0c8f00. There is a new syntax since v1.1.\nhttp://medoo.in/api/where\n. Check out the new feature raw object https://medoo.in/api/raw.. $database->update(\"users_information\", [\"user_nickname\", // <-- What's that?\n    \"user_password\"=>$password_to_update,\n    \"user_nickname\"=>$nickname_to_update,\n    \"user_gender\"=>$gender_to_update,\n    \"user_area\"=>$area_to_update,\n    \"user_phonenumber\"=>$phone_to_update], [\"user_email\" => $user_to_select]);\n. Check out the new feature raw object https://medoo.in/api/raw. Case insensitive also works, but we recommend capitalize with this for better readability.. The ORDER syntax is updated since v1.1.\nhttp://medoo.in/api/where\n. Yes, it's possible. But it will slow down the fetching performance, because it have to covert the type for every data.\nAnyway, it will still consider for it.\n. Data mapping is now supported.. Namespace requires PHP 5.3+, but Medoo is supported 5.1+.\nBut Medoo will require PHP 5.4+ for next version, and will add namespace also.\n. It's now possible to connect on Medoo 1.2.. Namespace is now supported on v1.2.. Please use English to discuss the issue here.\n. Your issue will be displayed for all GitHub followers around the world here, most of them are not chinese and don't understand what you talking about if you don't translate into English.\nFor better feedback and discussion about the project issue on GitHub, English is the best choice. And we don't have too much manpower to help translating all non-English issues.\nIf you have any questions that you really don't know how to express in English, please send us email and we will help you as possible.\nThank you.\n. The reason why you can not execute the generated query directly because Medoo is using the standard quote identifier from SQL-92 https://en.wikipedia.org/wiki/SQL-92 for all queries. You can see Medoo run SET SQL_MODE=ANSI_QUOTES for MySQL and SET QUOTED_IDENTIFIER ON for MSSQL from initialization to make them using this standard.\nIt's not the correct way to use Medoo that just copy and execute the Medoo generated query to another place alone, and that's not the usage Medoo recommended.\nBut we are considering to make the quote identifier be customizable from initialization, so that you can control what kind of quote should used.\n. Please read the issue mentioned before. We have explained the quotation problem too much.\n. Thank you for the pull.\nBut again, using the * mark to fetch all columns is always not a good practice. It will cause many problems, such as columns conflicted, data modified and performance issue.\nWe\u2018re strongly not recommended to use the * mark.\n. Fixed it.. Check out the new feature raw object https://medoo.in/api/raw.. There are no 4th parameter for the method call in this case.\nThe condition for value and ORDER are together.\nphp\n$database->select(\"Vorgaenge\", [\n    \"ID\",\n    \"Pos\",\n    \"btext\"\n], [\n    \"Verwendung\" => \"Geldzaehler\",\n    \"ORDER\" => \"Pos\"\n]);. We added upgrade documentation on official website. You will see the changes while you upgrading to the latest version.\nhttps://medoo.in/api/upgrade. We consider to add it as an initializing option, and disable logging by default. So you don't have to care about clearing up the logs. 93d7f7d. Why not just \"city\" => 2?. Fixed it.. @smartclash Great! It's very appreciated if you can help it out. You can send me the correct content via email, so that I can update for it :). Thanks. It's fixed now.. Added.. Check out the new feature raw object https://medoo.in/api/raw.. Changed it on v1.2 develop branch. 130e3cd7\nIt don't use [+~] or [&~] syntax, because it will conflict the negative condition [!~].. @StefansArya For this case, that's confusing, because we don't know how to connect the \"AND\" => xxx and \"OR\" => xxx on the same array.\nTo correct this, just write it outside.\n```\n$database->select(\"account\", \"id\", [\n    \"AND\" => [\n        \"content[~]\" => [\"AND\" => [\"lon\", \"on\"]],\n        \"OR\" => [\n            \"content[~]\" => [\"OR\" => [\"foo\", \"bar\"]]\n        ]\n    ]\n]);\n// The result\nSELECT \"id\" FROM \"account\"\nWHERE\n\"content\" LIKE '%lon%' AND\n\"content\" LIKE '%on%' AND\n(\n    \"content\" LIKE '%foo%' OR\n    \"content\" LIKE '%bar%'\n)\n```. Are you executed the query generated by Medoo alone?. Error message should not be echo while you are in production. Throw error message will be displayed on your PHP error setting.. In fact, you should not enable displaying error message while you are in production environment.. This is not supported for other database.. Perhaps you need to update your SQLite to 3.7.11+ for multiple insertion.\nBecause v1.2 is optimized the multiple insertion statement with executing only one query INSERT INTO xxx VALUES(xxx), (xxx), (xxx), which is supported since SQL 3.7.11+.\nhttp://stackoverflow.com/questions/1609637/is-it-possible-to-insert-multiple-rows-at-a-time-in-an-sqlite-database/1609688#1609688. There is missing a comma in the doc, and now it fixed.\n```php\n// [optional] driver_option for connection, read more from http://www.php.net/manual/en/pdo.setattribute.php\n'option' => [\n    PDO::ATTR_CASE => PDO::CASE_NATURAL\n],    <--- Here\n// [optional] Medoo will execute those commands after connected to the database for initialization\n'command' => [\n    'SET SQL_MODE=ANSI_QUOTES'\n]\n.php\n$data = $database->select(\"xxx\")...\n$object = (object) $data;\n```. Please read the documentation about what the parameters value is seriously.\nhttp://medoo.in/api/select. There is no this feature supported for #CASE WHEN. Would you like to show the result and the code you are using?. Yes, the insert() will not return the last id since v1.2. If you need the last inserted id, call id() alone.. Check the PHP version (should be PHP 5.4+ for v1.2), and read the documentation on how to install and load Medoo.. What's data you get for this statement? The get() method will return false if not match anything.\nAnd in your case, you should not assign value for 'where' => xxx, if you don't have a column named where. We supported LOB data type for inserting large quantity data on develop branch here: 94f293d6. In this special case, you can do this with commented key.\n```php\n$database->select('foo', 'id', [\n    'OR' => [\n        'AND #Null' => [\n            'description' => null\n        ],\n        'AND #Empty' => [\n            'description' => ''\n        ]\n    ]\n]);\n// Or simplified:\n$database->select('foo', 'id', [\n    'OR' => [\n        'description' => null,\n        'AND #Empty' => [\n            'description' => ''\n        ]\n    ]\n]);\n```\n. There is no problem for the code you shown. Perhaps you have to tell more detail about what kind of sometimes is. It should not be the problem.\nSecondly, what's the version of Medoo? The latest version had changed last_query() to last().\n. I tested this issue. The reason is because you are using wrong configuration for the server option.\nFor example:\n```\n// This works fine\nmysql:host=localhost;dbname=foo;\n// Invalid host name, throw error\nmysql:host=localhostttt;dbname=foo;\n// Invalid host name also, but connect successfully\nmysql: host=localhostttt;dbname=foo;\nmysql:xhost=localhost;dbname=foo;\n```\nAdding whitespace before host is just making the host value as invalid, and the PDO engine will connect the localhost by default.\nSo, check out the server option is correct or not again.. Medoo 1.4 is now return the PDOStatement. You can call rowCount() to get the affected row number. If nothing changed, it returns 0 of course.. Well, fixed it. But we always recommended that don't use * for fetching all columns data. It's no good for the performance and readability.. In fact, exec() is an undocumented API for special usage. The old version is exec() is a short cut for PDO::exec, but for the 1.4, exec() is PDOStatement::execute for prepared statement. It will be different result.\nIt's OK for me to make it work again without $map parameter. I will fix for it soon. But for correct exec() call like old version, you may use $database->pdo->exec() instead.. b5f9f60. Check out the new feature raw object https://medoo.in/api/raw.. It's the document problem. It's fixed now.\ninsert(), update(), delete() is return PDOStatement object. We provided a sample how to get the affected row number from PDOStatement on documentation.. If return 00000, that mean is successful and nothing wrong.\nhttp://php.net/manual/en/pdo.errorcode.php\nThe message number is depends on PDO driver. Having a number doesn't mean you are wrong.. Well, I checked this issue again. It's a bug return incorrect error info, and I fixed it.. @anaggh I cannot reproduce this case. Would you like to show the code you are using also? And how about your PHP version?\n . Well, I checked out about this case. The problem may be about the uniqid() bug on PHP, especially on XAMPP.\nYou can try this code on your server:\nphp\n<?php\nvar_dump(uniqid());\nvar_dump(uniqid());\n?>\nIf two those output number are the same, that is problem.\n@ParshvaZymr @anaggh Would you like to run the code, and show the output here?. @anaggh OK, thank you. That's the point. I will fix for it.. @anaggh I tested on my PC. Win10 64 bit + PHP 7.1 TS VC14 is no problem with this.. This is the bug about #569.\nWe have fixed it and release a new version for this case.. Just check out the documentation.\ndsn option is for building customized DSN string, but for most case, just change the database_type to mssql and config the correct server, username, password or port. It it enough.. Good! Thank you for this suggestion. That's really a problem.\nIt may be fixed on next version.. It's now fixed. https://medoo.in/api/new. OK, thanks for report that. It is a bug, and will be fixed soon.\nBut Medoo will have a new way for handling all SQL functions and raw queries on next version.\nBTW, using PHP date() to get current time is better than using NOW() SQL function for this case.. 1. Please use English here, and read the contribution guidelines first.\n2. insert() will not return the ID anymore. Call $database->id() to get the last inserted ID.\n3. You can use use (&result) keyword for anonymous functions, and you will get the result outside the closure also.\n```php\n$database->action(function ($database) use (&$result) {\n    $database->insert(\"foo\", [\n        // Do something\n    ]);\n$id = $database->id();\n\n$result = $id;\n\n});\nvar_dump($result);\n```. This is the problem have been discussed too many times. Please search before adding issue.\nMedoo configured using standard SQL (SQL-92) on initialization for being compatible with other database. Double quote for table and column name is a part of SQL-92 standard.\n. This is not a bug.\nerror() is only for displaying error information associated with the last operation. It don't display misconfigured error message for initialization. You can try catch the new Medoo() error exception for more information.. What kind of version are you reading at? Medoo is using prepare statement for whole SQL execution system since v1.4, and the query() method is only provided a way to execute the raw query directly for special case. Additionally, query() is also possible to execute a query with prepare statement like other database framework https://medoo.in/api/query.. @ExoSkeleton321 Yes. We not encourage to execute the generated SQL directly. This problem is about the database default quote identifier. v1.5 will output with this.. v1.5 will output by the database default quote identifier.\nhttps://medoo.in/api/whatsnew. Thanks for the feedback. It fixed. Please use English for issuing the problem next time.. If you want to use the $prefix, why do not just define the prefix alone and sent it for Medoo initialization? So you can access anywhere without asking Medoo.\n```php\ndefine(\"PREFIX\", \"PR_\");\n// or\n$prefix = \"PR_\";\n$database = new Medoo([\n    // ...\n    'prefix' => $prefix\n]);\n$database->query(\"SELECT $prefix ....\");\n// vs\n$prefix = $database->prefix();\n$database->query(\"SELECT $prefix ....\");\n.php\n$data = $database->update(\"account\", [\n    \"uid\" => [1,2,3,5,6,7,8]\n], [\n    'AND' => [\n        'AND #1' => [\n            'username'=>'a',\n            'age'=>23\n        ],\n        'AND #2' => [\n            'username'=>'b',\n            'age'=>24\n        ],\n        'AND #3' => [\n            'username'=>'c',\n            'age'=>25\n        ]\n    ] \n]);\nSQL\nWHERE (\"username\" = 'a' AND \"age\" = 23) AND (\"username\" = 'b' AND \"age\" = 24) AND (\"username\" = 'c' AND \"age\" = 25)\n``.insert()andupdate()` returns the PDOStatement object, so you can use its methods to get more information. \n```\n$data = $database->update(\"account\", [\n    \"age[+]\" => 1\n], [\n    \"user_id[>]\" => 100\n]);\n// Returns the number of rows affected by the last SQL statement\necho $data->rowCount();\n```. This is what other full-stack frameworks do.. Please read our official documentation website: https://medoo.in. This is not our website!!! We strongly recommend that do not read this non-official one. It's completely outdated and with a lot of mistake.. Of course.. It's now fixed.. This issue have been discussed too many times here. We use SQL-92 standard for compatible with other database. Check out the initialization core and you will find out the initial connection command for using this standard, which also can make the Medoo generated query executable alone.\nAnd also, it is strange that to execute the Medoo generated query alone on another place if you can run the Medoo core successfully. Medoo is not a SQL generator. log() is only for logging.. This feature is only worked for simple SQL function with out parameter for current version.\nThe good news is this we make a better and more powerful way to handle this issue on version v1.5, you can check out this branch and try it.\nphp\n$database->insert('test', [\n    'id' => $id,\n    'time' => Medoo::raw(\"ADDTIME(NOW(), '01:00')\")\n]);\n. This is a good spot. I will merged some from it. But I think it should still keep the type capitalized as required, because it will make the code better readability to easier to see the type keyword.\nFor example,  if you make [JSON] case insensitive, [Json], [json], [JSOn], [jsoN] are also possible. That's not look good.\nAnd also, matching the type should also be in the group only. Medoo only supported converting those type as result. No more additional type can support and nothing to do if user provided another type.. @indiwine \nYour code:\nphp\n                if (!empty($match['type'])) {\n                    $columns[ $key ] .= ' [' . $match['type'] . ']';\n                }\nWe used:\nphp\n    if (!empty($match[ 'type' ]))\n    {\n        $columns[ $key ] .= ' [' . $match[ 'type' ] . ']';\n    }\nAnd mind the the tabs and spaces indentation. Your code also mixed up.. We have merged the code to our v1.5 branch. But rollback the type detection and fixed the code style again. Hope you can check out the code seriously before pull request next time. Thanks.. In what kind of situation you need to enable and disable logging while running the code and don't not make logging enable / disable on Medoo initialization?. @Andrews54757 I benchmarked (10000 times, with 5 placeholders in one query) the performance of positional parameter (14.7s ~ 14.9s) and named parameters (14.9s ~ 15.2s). There is no great performance difference between them. The positional parameter is only a little little bit faster.\nThe reason why we took named parameters is we need to maintain the key name and value type for the statement, and better for output the executed query for debug() and log().\nThe pull request #617 is made a bug for this. For example, this will error when the input value contained with question mark. Confusing.\n```php\n$data = $database->debug()->select('account', [\n    'user_name',\n    'user_id'\n], [\n    'user_name' => 'foo?',\n    'email' => 'bar?'\n]);\n// SELECT \"user_name\",\"user_id\" FROM \"account\" WHERE \"user_name\" = 'foo'bar?'' AND \"email\" = ?\n```\nSo, we have no plan and didn't see any great advanced to change it as positional parameter.\nBut this issue is open to discuss the benefit between this two ways.. Search before issuing, and nothing sufficient information provided. Closed.. We always welcome any code contribution or bug fix for the project, even only one character change will possibly have a meaningful improvement.\nBut for this case, the improvement is insignificant enough and have no visible change. We hope to see better pull request. Thank you :)\nAnd also, stop personal attacks for this technological community. This conversation have to be closed and locked.. As I explained the problem on #613, we have no plan to use positional parameter from now.\nAlso, please read the contribution guidelines before the pull request. Don't change the coding style, and write the code seriously before committing.\nThanks.. @Andrews54757 @StefansArya No. This feature is acceptable, but please don't make a pull request. We can not make a final syntax decision from now. Need time to think around.. I checked out the manual. The LEFT JOIN is the same as LEFT OUTER JOIN. So, it don't need to implement the OUTER as option.\nhttps://dev.mysql.com/doc/refman/5.7/en/join.html. This is the wrong way to use PDO prepared statement. You may check out how prepared statement works for SQL and build the query you wanted.\nIn fact, there are also a lot of other ways to handle this case. Like using insert() for multiple insert if no duplicate update needed, or check out the duplicated key before the insertion. Additionally, you may also consider to use REPLACE for this case.. I don't think this is really need for this case right now. There is no great improvement if provided the type definition, and some parameter type of Medoo are changeable that like get($table, $columns, $where), the $columns can be array or string.\nThis is a good suggestion, but I think it need more time to be tested, reviewed and considered.. Not yet. Still under development and bug fix.\nOpening an issue here is for bug report or feature discussion. So closed it.. If you create no problem at first time. Why do not use CREATE TABLE IF NOT EXISTS?. It fixed on v1.5 794ae2ec1b10c965374293b6ee5a480adce4d4d7 that support using alias and type declaration together.. @superdeeid Not yet. But if you really need, you can check out the v1.5 branch to use it.. @Andrews54757 I don't think it is really polite and appropriate to advertise your own project here. If you want to introduce for this, you can do it on HackerNews or other technological community.\nThanks!. @Andrews54757 It is honored for me. But that not mean you can post this kind of off-topic and spam advertising message to promote your product here. Here is the place talking about Medoo project ONLY. You are disturbing the community.\nPlease stop posting this kind of message again!\nThanks for your cooperation.. This is really ridiculous pull request that changed all indention and code style for the whole project. No one will accept for this.. We have supported compound negative LIKE operation already. I don't think need this change.\nhttps://medoo.in/api/where. It should not be the problem. Please provide more detail about the issue.. 1. 'operaip' => 127.0.0.1, this will be wrong.\n2. The SQL seems no problem.\n3. You may using the old version.. It's not a string. It's PDO statement object. You can use its methods for whatever you needed. Like ->rowCount() getting the number row affected, or ->errorInfo() for error info.. Thanks for that. It fixed now.. What was your debug() ouput?\nphp\n$Medoo->debug()->get(\"language\", [\"lang\", \"id\"], [\"langShort\" => $language]);. No. You can not do that while you joining two or more tables. Because it will be conflicted if those table with same column name. Database engine did not know which column should be output. This will be error.\nFor Example:\n```\naccount.user_id\naccount.user_name\naccount.description\nbook.user_id\nbook.name\nbook.description\n``\nIf we join two table together with usinguser_id, and selectaccount.orbook.. At this case, thedescriptionfrom two table will be conflicted. You need to specify description is fromaccount.descriptionorbook.description`.\nOr using alias:\n[\n    'account.user_id',\n    'account.description',\n    'book.description (book_desc)'\n]\nSo, you may have to specify all column name while you joining tables, or find the way to get or cache the targeted column name at first.\nAdditionally, there too much article talking about that using * for getting all column will be slow down the query speed. You will get more unexpected data and using more memory.. Yes, it is a bug. It fixed on 0ae17978b1b8.. @adminko-svk it will possibly be with v1.5 soon.. This will be supported on next version v1.5. You may check out this branch and try it.\nphp\n$database->select('table', [\n    'account',\n    'sum' => Medoo::raw('SUM(<amount>)')\n], [\n    'GROUP' => 'account'\n]);\n// SELECT \"account\", SUM(\"amount\") AS \"sum\" FROM \"table\" GROUP BY \"account\". @akahen That's will be a problem and confusing if it become more complex operation.\nphp\n$database->select('table', [\n        'account',\n        'sum' => Medoo::raw('SUM(<amount> + <age> + <weight>)')\n], [\n        'GROUP' => 'account'\n]);. @akahen definitely. Medoo initialization not only create PDO object, but also initialize more additional option for whole framework. Providing raw PDO object only is not enough.. No, string is string, array is array. It's clear enough with this.\nAnd it's very convenient to convert string and array on PHP using implode() and explode(), why need this kind of change?. @dagobertdebug No, the only way for this case is convert it as array, like using explode(). You have to do it yourself.\nWe don't know what's your string determinator, and what if someone really want to use the string value for querying or inserting with comma?. So, Is there any problem with LIMIT x OFFSET n? MySQL is supported with this.. We optimized multiple insertion with one query as possible. For most of time, the speed for any database operations are based on the database engine or the machine itself, not the framework.. Check out your code to see whether called insert twice.\nAnd don't just copy and paste the debug generated query to another place to execute it, because Medoo used standard quotation mode. You can check out Medoo initialization code or see the issue discussed before.\nYou can run SET SQL_MODE=ANSI_QUOTES before execution or update the quotation by yourself.. Because Medoo only accept column name with A-Z, 0-9 and _ characters.. Fixed it.. Please search before submitting new issue. This have been discussed too much time!. Thanks for that:) We fixed it.\nBut we have new way to process this part on new version.. Please search the issue before. This have been discussed too much time.\nThis is SQL standard. One of reason using this way is for compatible to other database.\nWe provided output query with database default quote identifier on new version. 2430a8c2779e167744faf2786881dd2aee6b73be. Your $where is an array with string 'no[<]' = 1 only. Check out the basic PHP array syntax.\n```php\n$where = [\n    'no[<]' => 1\n];\n$dbTest->select('test', [\n    'name'\n], $where);\n```. I'm not sure. But it seems your database can be connected with any user without password.\nYou may check out your database configuration.. I tested it. It's OK.\nWhat's your new column setting? And what's your database, version?. For this case, you may use get() instead of select().. What's version of PostgreSQL are you using? I tested it's OK to use 1 and 0 for boolean value.\nAnd the PostgreSQL documentation is also said https://www.postgresql.org/docs/9.1/static/datatype-boolean.html. @davismiculis Boolean true/false. Please search before submitting pull request or issue, and follow the contribution guidelines OK?. What's your SQLite version? If you using 3.7.11 or above, it should be supported.. Please check out the documentation: https://medoo.in/api/update\nIt returns PDOStatement object, and you can call its methods, like rowCount() to see the affected row.. Please check out the issues talked about before, and the new version v1.5 also have a new solution.. Please check out the issue talked about before, and the new version v1.5 also have a new solution.. Here #607\nAnd the new version will be released soon.. Please check out our documentation seriously about how to use the return PDOStatement, and how to get the last inserted id.\nhttps://medoo.in/api/insert. Please search before opening a request.. Sorry for that. We emergency fixed about it. It should works now.. What's your $database->error() output?. @dhe This error is about \"weekday\" in $where. Remove it, or add table name to identify from which table.. We are just upgrading the server. It should work again now.\nSorry for the inconvenience.. @anaggh Thanks, all fixed now.\nWe have no plan to open source the whole site. It's not just a simple documentation project.. Is it problem solve after checking out the configuration?. We do have a lot of test for each version development with different environment and different database. Each database will have different result. The project, that is, will be in various environment, it's hard to just using PHPUnit for simple testing. And also the fact I admitted that, Medoo right now is still can not 100% compatible for each database.\nBut we will have a plan to looking for someone professional to join for much more promising and serious complete testing than other projects.. Thanks for reporting that. We released a new version for emergency fix for this :). Join is identified the relationship between two column. The value here will be the column name only. Why you need to use raw for JOIN? It will be failed.. Did you check out the id column is correctly configured?. Well, getting the inserted id for MSSQL is not just easy. There are a lot of problem and compatibility with this. I will test more version and find a better way for this database.. I fixed that for MSSQL 89f06bb87179fe5d7fbbc8dbdf2ed87b9cf98e5a.\nPS: We will drop support using dblib or odbc driver for MSSQL.\npdo_sqlsrv will be the better for all platform from now.. 1. Check out your PHP version is >=5.4.\n2. You may missing use Medoo\\Medoo; for using Medoo namespace.. Upper case for ASC and DESC will be better readability. We fixed for it a40ab7f8729.. Thanks for your feedback. This really a bug, and we fixed it.\nWill release a version for this soon.\nBest,\nAngel. Because the PDO bindValue do not support array value in native. You can not just assign array for prepared statement. http://php.net/manual/en/pdostatement.bindvalue.php\nThe best way is just using Medoo function for this case as possible. It will convert value as correct type for the IN statement.. Can you please provide more detail and information with your code example about this issue in English?. You can still discuss it on the closed issue or reopen it.\nFor the whole Medoo API design, the SQL keywords like LIMIT, GROUP, AND, OR and more, are required uppercase that will be easier to discover they are the SQL keywords from other PHP data while the first look at the code. If all of them are lowercase, it is hard to know it is a keyword or a data.\n```php\n$database->select(\"account\", \"user_id\", [\n    \"ORDER\" => [\n        \"profile_id\" => \"DESC\",\n        \"date\" => \"ASC\"\n    ]\n]);\n$database->select(\"account\", \"user_id\", [\n    \"order\" => [\n        \"profile_id\" => \"desc\",\n        \"date\" => \"asc\",\n        \"age\" => \"acs\"\n    ]\n]);\n```\n. No, it can not. The id will be discontinuous and incorrect while inserting data with multiple thread or heavy IO operations. The best way is insert one record and fetch the id immediately.. Thanks for the feedback. This is really a bug, and we fixed it!. Check out from the doc https://medoo.in/api/where the Compound section in LIKE Condition. You can use it with AND and OR.. Why not just fetch the result and count by PHP count() function alone after that?. Duplicated issue. Please search before opening issue, and check out the quote identifier change on newest version. https://medoo.in/api/whatsnew. I rolled it back without magic call on d7c9cf59447.\nWill be available on next release.. In this case, you may need to use alias feature. That what's for this kind of problem.\nphp\n\"q_text.text (q_text)\",\n\"q_language.text (language_text)\"\nhttps://medoo.in/api/select. You can use it with raw object. https://medoo.in/api/raw. Could you describe the problem in English here please?. If the table name error information will be displayed on error() call when the query is executed. Try-catch is catching code or prepared statement level exception.. You may need to use try and catch to read the exception message.\nIt seem your configuration problem.\nAnd also, provide the version you are using for issue.. MAMP is using unix_socket for database connection. You may need to change port to unix_socket instead.. Sub query will be more complex for Medoo in current. I suggest just use raw function or separate into two function call for this case.. What's your code for this query?\nYou can not just assign array value to column for update statement. It will be serialized or json_encode().. So, I'm asking you what's the code for this query.\nIn this case, to assign array value for column, should be:\n```php\n$database->update('attachment', [\n    'name [JSON]' => ['good', 'jack'],\n    'age [JSON]' => ['18', '20']\n])\n// or\n$database->update('attachment', [\n    'name' => json_encode(['good', 'jack']),\n    'age' => json_encode(['18', '20'])\n])\nThe output of debug mode with MySQL will be:sql\nUPDATE attachment SET name = '[\\\"good\\\",\\\"jack\\\"]', age = '[\\\"18\\\",\\\"20\\\"]'\n``. Any feedback for this case? Otherwise it will be closed.. Duplicated #631. Please search before create new issue.. Just usingselect()orget()will be what you wanted. Any problem with that?. Why don't just use[!~]` for NOT LIKE?\nhttps://medoo.in/api/where (LIKE Condition section)\nphp\n$database->select('users', '*', [\n    'OR' => [\n        'id[>]' => 2,\n        'AND' => [\n            'name[!~]' => ['AND' => ['%sd', '%sassd']]\n        ]\n    ]\n]);\nThe output:\nsql\nSELECT * FROM `users` WHERE (`id` > 2 OR ((`name` NOT LIKE '%sd' AND `name` NOT LIKE '%sassd'))). There is no NOT OR.. This fixed on b80cb02. What's database and version you are using that returned $result = 1 as integer type?. This has been fixed on a951846f9bfe93419d40700d9fbefde5c9b10259.. Yes, this is a bug. The null value should return as Null not 0. I made a bug fix for this. d28ae10. It will be better to save the error log file from database engine itself, not the database framework.\nIf you are using MySQL, you can check out this option on configuration file.\nhttps://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_log_error\nlog_error=/var/log/mysql/mysql_error.log. Thanks for this feedback. That's really a problem. I fixed for it.. You can not assign raw object (or any PHP objects) as key of array in PHP language.\nBut it will be supported for next version of Medoo with new design method.. Yes, that's right. I made a fix for that. 87ab8ba\nThe raw object can be used it on aggregate function now.. Thanks for the feedback. But I fixed it with simpler code.. The $arr should be\nphp\n$arr = [\n    'id' => 1,\n    'col' => 2\n];\nor\nphp\n$arr = [\n    [\n        'id' => 1,\n        'col' => 2\n    ],\n    [\n        'id' => 2,\n        'col' => 1\n    ]\n];. Duplicated issue #720.. Could you like to info me that what's database and version you are using?\nAnd the full code for this Medoo function call, data output.. What's was the var_dump() output about this code?\n```php\n$data = $this->db->select('objects', [\n    'courtage [Bool]'\n], [\n    'id' => $id\n]);\nvar_dump($data);\n```\n. You may check out the upgrade guide here: https://medoo.in/api/upgrade.. This have been fixed on v1.5.6. And check out the issue here #721.. Great work for that!\nIt's pleasure to have this wrapper based on Medoo.\nBut here, the issue board, is the place reporting problem for Medoo project itself. Not a forum. So this kind of post have to be closed.\nAnyway, keep up the work.\nHope the best,. It's awesome work for this written with Python!\nBut here is the issue board, the kind of place reporting problem for Medoo project itself. So this kind of post need to be closed.\nAnyway, keep up the work.\nHope the best,. @Fahri5567 is right. That's namespace problem. Or read the initialization guide https://medoo.in/api/new.. Duplicated issue from #631. Please search before create new issue.. The GitHub issues board is basically for reporting bugs and talking feature about the project.\nIf you have any questions how to use it, StackOverflow is the best place to ask.\nhttps://stackoverflow.com/questions/tagged/medoo. This is not the problem related Medoo.\nOnce you fetched array data from Medoo, there are plenty of ways to convert as Excel file.\nhttps://www.google.com/search?q=php+export+excel. There is no direct way for this. But you can use query() or Medoo::raw for that.\nhttps://medoo.in/api/query\nhttps://medoo.in/api/raw. The generated SQL is only for debug. We don't recommend that run this SQL query for another place.\nThe query Medoo will be executed is statements prepared.. What's your version?\nAnd your column alias is wrong.\nIt should be:\nphp\n[\n    \"LanguageValues.ID (ValueID)\",\n    \"LanguageKeys.ID (KeyID)\"\n]\nhttps://medoo.in/api/select. Is it solved?. What's your version and what's your debug() output?. The ORDER and LIMIT should be with condition together.\nphp\n$results = $db->select('mytable','*', [\n       \"title[~]\" => $val,\n       \"page\"    => $thispage,\n       \"ORDER\" => [\"status\" => \"DESC\"],\n       \"LIMIT\" => [$start, $limit]\n]);. That's because the PDO layer or database engine will return fetched data as one-dimensional array that the alias column name will be overridden.\nBut right now, I have a new idea to make this work possible. It may be supported on next version.. php\n$data = $database->select('question', [\n    '[>]answer' => ['id' => 'questionId']\n], [\n    'question.id',\n    'question.text',\n    'answerCount' => Medoo::raw('COUNT(<answer.id>)')\n], [\n    'GROUP' => 'question.id'\n]);\nQuery Output:\nSQL\nSELECT `question`.`id`,`question`.`text`,COUNT(`answer`.`id`) AS `count` FROM `question` LEFT JOIN `answer` ON `question`.`id` = `answer`.`questionId` GROUP BY `question`.`id`. @sourabhbajaj You may misunderstood the join syntax. Join is telling the relationship between columns, not the condition.\nFor your case, the SQL should be\nSQL\nLEFE JOIN vote ON vote.questionId=question.id WHERE vote.userId=2 AND question.id=6. I'm not sure your table construction, but for the JOIN xxx ON xxx, it can not use vote.userId=2 condition.\nYou may need to consider the LEFT/RIGHT/INNER/OUTER join type.. You can use use keyword for closure function call.\nhttp://php.net/manual/en/functions.anonymous.php\nOr variable scope\nhttp://php.net/manual/en/language.variables.scope.php\nUp to your project.. Do not open a new duplicated issue from #720. You can discuss on there.\nI tested this case again with another environment, finally reproduced the problem.\nI will test more and figure out for the EMULATE_PREPARES option and find a way to fix it.\n. It just because you set the ATTR_EMULATE_PREPARES to false. The default value of this option is true.\nThere is no problem using the default value. We do not recommend to change those PDO option. It may cause some unexpected problem.\nIf you just want to convert the type of fetched value, Medoo has provided a way to convert it.\nFor this case, it need to test other PDO option together for compatible reason for the next.. This has been fixed on a951846f9bfe93419d40700d9fbefde5c9b10259.. It is no problem for the query output.\nWhat's your $database->error() output?. How do you use it? tableQuote() is a protected function.\nAnd what's the debug() output?. While you are using Medoo, you don't have to care about the quotation. No matter how Medoo works internally.\nIt also provided a placeholder and quotation syntax, a simple way for handle quoting problem. Never need to thinking about double quote or single quote identifier.. @LucaRainone \nDSN option is for special database with special driver and connection option. If you are using MySQL database, you don't have to consider this.. We have provided quotation syntax for query() for handling the quote problem, so you don't have to add quote character for custom query.\nWe don't suggest that to use custom DSN option if the default option works already, especially MySQL. It's for special database connection.\nWe set the SQL_MODE for compatibility problem. We not only support MySQL, but also others database. That make MySQL using standard SQL syntax and behaviour.. @LucaRainone Yes, you are right. I made a new commit with this fix.  462e7a8. The error message is clear could not find driver.\nYou did not install PDO_XXX database driver extension for PostgreSQL.\nCheck out https://medoo.in/api/new to section PHP PDO Driver Installation. The database_type should be pgsql not postgresql.. You can use use keyword to inherit the variables.\nhttp://php.net/manual/en/functions.anonymous.php. It's possible to use RAND() with raw object (https://medoo.in/api/raw). So it don't need for this.. The option of 'database_type' => 'oracle' is correct. You may check out the dsn string or the error output.. I'm not sure multiply two columns will work on SQL or other database, but you can use Medoo::raw object for this case.\nphp\n\"ORDER\" => Medoo::raw(\"<price> * <profit> ASC\"). database_type should be mysql not mysqli.. Well, thanks for the advise. Removing the last ?> will be considered for next new version.. count() or other aggregate methods are defined on _call(). However the recent commit on develop branch is changed it as public call.\nhttps://github.com/catfan/Medoo/blob/8d90cba0e8ff176028847527d0ea76fe41a06ecf/src/Medoo.php#L247. Good spot. It fixed on fb5a3c6522. It's no need to start a pull request for type case. Just report on issue it is OK enough. Thanks.. Thanks for the translation.\nHowever, the Readme file for open-source project will be updated sometimes and will need to translate other language in the same time if it has another language version. That's will not be ideal work flow for this case. So the project with only English Readme file is completely enough.. Please read our documentation before opening new issues.\nhttps://medoo.in/api/where on Columns Relationship section.. When you are using SUM(), AVG() or other aggregate functions with Medoo::raw object, there no need to using alias, because the tc, international, secondary and postsecondary will no longer present as table column.\nYou can just simply assign it as this:\nphp\n[\n    \"p.id(prov_id)[Int]\",\n    \"gr_tc [Int]\"            => Medoo::raw('SUM(<tc>)'),\n    \"gr_int [Int]\" => Medoo::raw('SUM(<international>)'),\n    \"gr_se [Int]\"     => Medoo::raw('SUM(<secondary>)'),\n    \"gr_ps [Int]\" => Medoo::raw('SUM(<postsecondary>)'),\n]. You may check about type declaration? https://medoo.in/api/select. If limit_yandex is column, you should use\nphp\n[\n    $isBot . \"[<]limit_\" . $isBot,\n    \"ORDER\" => [\"created_at\" => \"ASC\"],\n    \"LIMIT\" => 100\n]\nhttps://medoo.in/api/where Columns Relationship section. Definitely.. @elshobokshy There is nothing seriously API changes of PHP 7.3, so it's also compatible with it. That's also the great tradition of PHP language all the ways.. $result is a PDOStatement object. You can call its rowCount() to check out the error.\n```php\n$result = $db->insert($this->table, $data);\nif ($result->rowCount() > 0)\n{\n    // Do something\n}\n``. TheMATCHshould not inside theANDkeyword. It is being alone likeORDER,LIMIT`.\n```php\n$database->debug()->select(\n    'test',\n    'cont',\n    [\n        'MATCH' => [\n            'columns' => ['Col1', 'Col2'],\n            'keyword' => 'key',\n            'mode' => 'boolean'\n        ],\n        'COL3' => 'A'\n    ]\n);\n// SELECT cont FROM test WHERE COL3 = 'A' AND MATCH (Col1, Col2) AGAINST ('key' IN BOOLEAN MODE)\n```. It's telling you did not install the PDO driver.\nRead PHP PDO Driver Installation section from https://medoo.in/api/new. You can use use keyword for closure function call.\nhttp://php.net/manual/en/functions.anonymous.php\nOr variable scope\nhttp://php.net/manual/en/language.variables.scope.php\nUp to your project.. Check the answer from #631.. This is the basic feature of PDO that fetching data from database as string without converting.\nIf you need to convert the data as you needed, you can use Data Type Declaration from here https://medoo.in/api/select\nOr you can use PDO::ATTR_STRINGIFY_FETCHES (http://php.net/manual/en/pdo.setattribute.php) for your initialization, but this is what I don't recommended.. Sorry, I don't know Workerman framework.\nIf you want to use Medoo with other frameworks and persistent connection, you may check out https://medoo.in/api/collaboration or PDO::ATTR_PERSISTENT http://php.net/manual/en/pdo.connections.php option for initialization. There are too much PHP frameworks everyday. It's impossible write example for every framework there.\nThe example on documentation provided a basic concept about how to collaborate with framework using singleton mode. It will be work on a lot of PHP frameworks, or using Medoo as global variable and more. All those ways are up to you. There is no 100% correct method.. We do have a plan with this feature for next version, but for this syntax\nphp\n$datas = $database->select(\"account\", [\n    \"id\" => [\n        \"user_name\",\n        \"email\"\n    ]\n], [\n    \"user_id[>]\" => 100\n]);\nIf it's using the one key name as first with column array, it will convert id as index.. You may consider using query() for this.\nhttps://medoo.in/api/query. Read the document about how to join compound condition together with same key name.\nhttps://medoo.in/api/where. Bad request. This is not a typo, it is a composer deprecation warning.\nFixed on 4accb8b345af868b072354b40039fe92096de26f. The sum() will return the value of total number. Why you need to use alias for that?. @deawx You may consider using raw object for this case.\nhttps://medoo.in/api/raw\nThe first example code provided how to use with sum() for select() just right.. That's PHP string quote problem. You may check out your quote identifier.\nAnd there is no need to quote for column name, CONCAT(<name>,<middle>,<last>) is enough.. If you configured the connection option database_type as mssql correctly, you should get output from debug() with MSSQL default quotation identifier [abc].\nWhat's your connection option?. Should be $database->select(\"users\", \"*\");. No schema prefix on table name.. Using multiple schema will have a lot of compatibility problem (database support, table prefixing, table joining, authorization, and more...). As for most project, using one schema (aka the database_name on initialization) with multiple table is enough.\nWe currently have no plan to support cross schema. You can simply create the database with one schema and multiple table for your project.. There is no native support for JSON querying, but you can use raw object for this case.\nhttps://medoo.in/api/raw. php\n$data = $database->select(\"order(o)\", [\n    \"[>]order_products(op)\" => \"order_id\",\n    \"[>]products(p)\" => [\"prduct_id\" => \"prd_id\"]\n], [\n    \"o.order_id\",\n    \"o.total_cost\",\n    \"o.total_discount\",\n    \"o.payment_method\",\n    \"o.shipping_address\",\n    \"o.stats\",\n    \"op.quant\",\n    \"op.price\"\n], [\n    'order_id' => $order_id // <--- Where the column 'order_id' come from?\n]);\nIn your case 'order_id' => $order_id should be 'o.order_id' => $order_id.. ",
    "agence86": "I had an issue with 1and1 host with dedicated server because it uses localhost:/tmp/mysql5.sock  so we need to set the socket. It seems that Medoo dont handle sockets so in my downloaded class i added parameter\nprotected $socket = '';\nAND on connection fonction \nnew PDO($type.':host='.$this->server.(($this->socket!='')?';unix_socket='.$this->socket:'').';dbname='.$database_name,$this->username,$this->password);\nand it worked, i hope that helped and can be added to main class...\n. ",
    "lucanos": "The latest commit here will handle any MySQL connection, where the $database_server is specified in a format of \"SERVER:/path/to/socket\", split that string at the colon \":\" and use the latter part as the unix socket address.\n. ",
    "inlanger": "Yes, my php script in UTF-8, database in UTF-8 and table data in UTF-8.\n. ",
    "verybigelephants": "i had having exactly the same problem. central european characters, such as \u010d\u0161\u013e\n that are stored in a utf8 postgres database are returned as q'\u00c4\u0164\u0139\u02c7\u0139\u013e\u0139\u0104\u00c4\u0164\u0102\u02dd\u0102\u02dd\u0139\u013e marks by medoo (but returned fine with other wrappers)\ni had to manually set php heaader content-type charset to utf-8. never had to do this before with utf-8 content, don't know what is going on :S\nwhat is a great problem though, if you don't want to just print the characters to the output but use them on server-side. for that, i don't have a solution\n. i think i have found the culprint, when creating a database object like new Medoo([...parameters...]) you MUST define 'charset' => 'utf8'\nyou would think it is default and goes without saying, but no, you always need to set this manually. i would like to address this issue once more. even if you didn't get the latest inserted id, you could at least get a true on the successful insert. it is truly difficult to detect errors right now\n. ",
    "psy21d": "WITH cyrillic symbols ?????????\nframework that not work with utf8 == 'crap framework'\nDELETE. ",
    "jnachtigall": "@catfan FWIW, I also get wrong characters when using Medoo and query with mysql. Using the same query with PDO and prepare the encoding is just fine. This happens for terms like e.g. \u00c4thiopien. Umlauts like \u00d6, \u00f6, \u00fc, \u00dc, \u00c4, \u00e4 or \u00df are very common in German.\n. ",
    "leoquijano": "That breaks encapsulation. Isn't the idea to use the Medoo interface directly for all important database methods?\n. ",
    "junpengli": "But I want to know why ?  I want to know why it is 0,What happened on my sql.\n. ",
    "chpiter": "3Q very much\n. ",
    "aymericbeaumet": "Your composer.json seems good :+1: \nYou could now use your project icon.\n. ",
    "bcmfr": "I mean, if i don 't want the array to be display on the screen of the visitor, is there a possibility to create a variable when there is an error, and then look with isset() if this variable exists? So i would be abble to show an specific error message to my visitor?\n. ",
    "fgusinde": "medoo gives back array from errorInfo from pdo/php, so have a look at\nhttp://php.net/manual/de/pdo.errorinfo.php\nI think you're looking for the error code (e.g. 42S02) which is index [0] in the array. So instead of var_dump you can try\necho $database->error()[0];\nand handle based on error codes.\n. Using\n...WHERE MD5(concat('$_POST['password']',salt))=password\nis very bad for performance, because every (I repeat: EVERY) column-entry has to be be handled with md5. So if you have 1 mio. entries in the table you have to call mysql-function 'md5' 1 mio. times. Better idea, also for security reasons: store encrypted password in database and do a \nWHERE password=$_POST['password']\nBefore that you can add salt.\n. One solution currently could be:\n$database->select(\"i20\", \"test\", [ \"OR\" => [ \"test\" => [ \"123\" , \"456\" ] ]]);\nresults in\nSELECT test FROM i20 WHERE test IN ('123','456')\nI found a \"bug\" (?) resulting here:\n$database->select(\"i20\", \"test\", [ \"OR\" => [ \"test\" => [123], \"test2\" => [ 456 ] ]]);\nThis is what you're looking for:\nSELECT test FROM i20 WHERE test IN (123) OR  test2 IN (456)\nIf the columns in where/or-clause are the same, result is strange:\n$database->select(\"i20\", \"test\", [ \"OR\" => [ \"test\" => [123], \"test\" => [ 456 ] ]]);\nSELECT test FROM i20 WHERE test IN (456)\nI think best solution currently is:\n$database->select(\"i20\", \"test\", [ \"test\" => [ \"123\" , \"456\" ] ]);\nresults in\nSELECT test FROM i20 WHERE test IN ('123','456')\n. better: ensure not to use keywords as column names. never. back quotes are nice for mysql, but not ansi.\n. Use\n$database->update(\"i23\", [ \"field\" => FALSE ], [ \"id\" => \"1\" ]);\nresults in\nUPDATE i23 SET field = '' WHERE id = '1'\nwhat will give you\nmysql> select * from i23;\n+----+-------+\n| id | field |\n+----+-------+\n|  1 |     0 |\n+----+-------+\n1 row in set (0.00 sec)\n\"TRUE\" will set \"1\". I think you maybe want to modify your column to \nNOT NULL DEFAULT 0\n. I can confirm jsvenssons post having the some problem connecting to sphinx on local slave.\nSo we need this but as int, not as string.\n. create database if not exists....\n. I tested with stable 0.8.8\nI can confirm this issue and will go deeper now.\n. error is line 90ff; given is empty array(0) {}\nPHP Warning:  PDO::__construct() expects parameter 2 to be string, array given in [...]\n. Sample in documentation is also buggy, http://medoo.in/api/new\nSince I'm not using sqlite maybe angel can debug here?\n. I tested with current stable 0.8.8.\nResults:\n$database->select(\"i39\", [\"a\", \"b\"], [\"a[!]\" => 2]);\nSELECT a, b FROM i39 WHERE a != '2'\nTechnically this is okay, better would be to handle the integer as an integer.\n$database->select(\"i39\", [\"a\", \"b\"], [\"a[!]\" => [1,2,3,4]]);\nresults in error,  errorcode is 1064, \nhttp://dev.mysql.com/doc/refman/5.6/en/error-messages-server.html#error_er_parse_error\nI can confirm that NULL is making trouble at all:\n$database->select(\"i39\", [\"a\", \"b\"], [\"a[!]\" => NULL]);\nresults in \nSELECT a, b FROM i39 WHERE a != ''\nBut '' is not the same as NULL.\nSomething else: \"IS NOT\" is very bad for performance.  So pay attention und avoid using it.\n. IS NOT or != is bad for performance because you cannot use any index to speed up query. You cannot index things that aren't here. So try avoiding negations.\n. @AnaelFavre maybe I know this :+1:  medoo is not only mysql, but general. Another point is: We're talking about \"IS NOT NULL\". That's horrible. People should avoid using negative clause at all.\n. So it depends on the query; if one has a e.g. column yearofbirth (bigint unsigned default null) he could try\n\">=1\" (or 1800, of course :-) ) for finding all rows that are not null.\n. ",
    "drtobal": "what about using sysdate(), or now(), or parse functions, like month(date_column), etc\ni think this is very important\n. +1\n. +1\n. ",
    "rohan-deshpande": "Yep, I'm currently using medoo in a small twitter app related project and I'm liking it, but I'm also wondering about using MySQL methods like NOW() because they are pretty essential. \n. ",
    "jefrip": "My idea :\n$data = array('name' => array('foo', 'bar'));\nOn Jul 26, 2013, at 23:45, Catfan notifications@github.com wrote:\n\nThat`s because you cannot declare key-value array with duplicate key name. Not only PHP, but for most programming language.\n$data = array(\n    'name' => 'foo',\n    'name' => 'bar'\n);\necho $data['name']; // 'bar'\nAny good idea to solve this?\n\u2014\nReply to this email directly or view it on GitHub.\n. hey @catfan you can't set like this 'host=localhost:3307' if target port different than default mysql port, it must include port option on connection see http://www.php.net/manual/en/pdo.connections.php#97168\ncorrect port option 'host=localhost;port=3307'\n. \n",
    "HelloLudger": "Hi, I've encountered the same problem and am also interested in a solution.\nGreat library, btw.\n. ",
    "durasj": "+1 ... http://stackoverflow.com/questions/1306740/json-vs-serialized-array-in-database\n. You can also wrap medoo public functions with your functions and do caching there, see example below ... \n``` php\nclass db\n{\n        private $medoo;\n        public static function get($table, $join = null, $column = null, $where = null)\n        {\n            if(cached){\n                return cache;\n            }\n        return $this->medoo->get($table, $join, $column, $where);\n    }\n\n)\n```\n. But ... why? :)\n. Medoo is using PDO objects (you can look it up) and, therefore, is completely fine. Thanks to PDO you can also use it with different database like Microsoft SQL or SQLite. If it used mysqli we would lost that compatibility provided by PDO. \n. AFAIK xampp and any wamp software comes with mysql or compatible RDBMS like mariadb or percona so it should work without any problem.\nI am using medoo on 5 different servers with original mysql 5.5, percona 5.6, mariadb 10 and sqlite 3 and I am absolutely sure you wont face any problems. Happy coding :)\n. Please close the issue if you don't have any more questions.\n. :+1: but it is kind of late for that, it would break everyone's code. But if it was optional ...\n. @SyuTingSong sounds perfect\n. ",
    "jsvensson": "protected $server = 'localhost:8889';\nResults in:\nSQLSTATE[HY000] [2005] Unknown MySQL server host 'localhost:8889' (2)\nThis is with MAMP, PHP 5.4.4, MySQL 5.5.25. Had to manually feed it the port option in the constructor, as in this pull request.\n. It's port 8889.\nHad a look in the docs. The MySQL libraries automatically use a UNIX socket if the server name is \"localhost\" - so with just $server = 'localhost'; it connects just fine. Having localhost as the server name will make it ignore the port argument - you cannot set a port with server name localhost, since it's not using TCP/IP for that connection.\nYou can force a TCP/IP connection by using 127.0.0.1 as the server, but the port will still need to be passed as a separate argument to the PDO (as in this pull request), 127.0.0.1:8889 is not an acceptable format for the host name.\n. ",
    "Ifnot": "Woops i did some crap on this one. I will push another pull in days ...\n. Nice, thanks men ! :)\n(sorry for the last pull, i am not fully familiar with github, need git training)\n. Hello !\nNop it is not, you should put your array into an \"AND\" associative array like that :\njs\n[\n   'AND' => [\n      'PI_ID' => 125,\n      'PROGRAM_CODE' => 'WS'\n   ]\n]\n. No problem :)\n. Ha ? I didn't know that IS NOT got bad perfs, what do you use instead ? column != NULL ?\n. @catfan There is no way. The NULL problem is a conception problem not a syntax problem. So my fix, correct the syntax problem in Medoo :)\n@fgusinde NULL values are processed differently in db engines. For example, Oracle does not index NULL values witch result with performances issues on hudges table scans. However MySQL optimize full table scans for this kind of values on an index (http://dev.mysql.com/doc/refman/5.0/en/is-null-optimization.html)\n. @fgusinde For me, this kind of condition is exceptionnal but not \"horrible\" :).\nOur discussion deals with respective opinions and not the commit itself. If you have a better alternative for a negative condition with NULL value, please share it here.\n. I do not agree with you but I think the exchange of opinion does not have to be here :).\nPlease focus on the fix if you have something to modify.\n. ",
    "yurkiss": "I found such way to do that on mysql:\n\n$database = new medoo(\"INFORMATION_SCHEMA\");\n$qv = \"SELECT IF(EXISTS (SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = ''), 'Yes','No')\";\n$datas = $database->query($qv)->fetchColumn();\nif($datas == \"No\"){ ... creating new db ....}\n\n. ",
    "jbm14": "wow...that's embarassing..can't believe I missed that.\nThanks for the quick reply.\n. ",
    "ajitbohra": "Thank you will check Godaddy to enable the Extensions !\n. Just in case if anybody having similar issue. \n- Godaddy Windows Hosting does not provide option for PDO modules\n- Have switched to Linux hosting in order to get medoo work\n. ",
    "jimolina": "Yes! but that day I don't see the way to do it, sorry. \nNow I create something but I don't know if it in the right place; order or format.\n. Try with this:\n$columnsVal = ($columnsTemp[1]!='') ? '' . $columnsTemp[0] . ' AS \\'' . $columnsTemp[1] . '\\'':'' .$columnsTemp[0] . '';\n. ",
    "elbyvilayil": "How to convert following query to  medoo select ?\nselect *, date_format(column_name, '%d %b %Y') as column_alias from table_name; \n. Hi \nI added  Regexp in where. You can check in the issue \"Add REGEX in WHERE query #416\" . But I didn't check with PDO::quote\n. I think its not secure but if the regexp will be provided by the developer its no problem. The challenge is how can we filter regex ?\n. Yes NOW is not working for INSERT in new version \n. ",
    "kimmykuang": "Yeap,why not use pdo::prepare instead of pdo::quote?\n. ",
    "efc": "It turns out I had a typo in the database name. PDO was set up properly, it was just that the MySQL error message was not very specific about the problem. In any case, all better now.\nI totally missed the very helpful php_pdo instruction at the bottom of http://medoo.in/api/new. Since this instruction describes a prerequisite for Medoo, you might consider putting it in or above the \"Installation\" section of the instructions.\n. ",
    "ghost": "Ok.\n. it is not  a question, only a bug report : if you try \nphp\n$db->select('table', ['*'])\nfor mysql, it will return no data but an error like \n\"#1064 - You have an error in your SQL syntax; \"\nSorry if you don\"t understand very well my english, it is not my primary language\n. no sorry it isn't my mind. \nActually, for DB mysql  \nphp\n$db->select('table', ['*'])\noutput\nsql\nSELECT * FROM \"table\"\nbut mysql will fail with this error \"#1064 - You have an error in your SQL syntax; \"\nif medoo output this SQL (for mysql)\nsql\nSELECT * FROM `table`\nwon't fail in mysql\nbe carefull, it is not a simple quot but apostrophe ([alt gr] + [7] on french keyboard)\n. will ouput this query : \nsql\nSELECT FROM \"\"\n. if i modify (but i think will break other sql server) the medoo class to put ` instead of \" will be OK for me ... \nI think a protected variable in contruct method  :\nnew attribut in class\nphp\nprotected $delimiter_sql_object = '\"';\nin construct\nphp\nif (strtolower($this->database_type) == 'mysql') {\n  $this->delimiter_sql_object = '`';\n}\nand use of this variable everywhere in the script\n. hmm ok i will test with more attention thanks ! \n. For those wondering why there is no LIMIT, I have the answer:\nMedoo ITSELF supports LIMIT in the update() function (and probably in delete() too, but I didn't check). You just have to do ['LIMIT' => 1] in the $where parameter. Medoo will generate proper SQL syntax for limiting the SQL query.\nThe problem is that PHP has compiled the built-in SQLite engine WITHOUT SUPPORT for LIMIT in UPDATE / DELETE.\nhttps://www.sqlite.org/lang_update.html\n\n\"If SQLite is built with the SQLITE_ENABLE_UPDATE_DELETE_LIMIT compile-time option then the syntax of the UPDATE statement is extended with optional ORDER BY and LIMIT clauses\".\n\nSeems pretty stupid that PHP doesn't compile SQLite with that feature, but there you have the answer!\nIt's possible to recompile SQLite in PHP but that's a total hell, so I guess I will live with PHP's SQLite wastefully searching every database row for matching columns instead of stopping as soon as it has found one... Sigh.. For those wondering why there is no LIMIT, I have the answer:\nMedoo ITSELF supports LIMIT in the update() function (and probably in delete() too, but I didn't check). You just have to do ['LIMIT' => 1] in the $where parameter. Medoo will generate proper SQL syntax for limiting the SQL query.\nThe problem is that PHP has compiled the built-in SQLite engine WITHOUT SUPPORT for LIMIT in UPDATE / DELETE.\nhttps://www.sqlite.org/lang_update.html\n\n\"If SQLite is built with the SQLITE_ENABLE_UPDATE_DELETE_LIMIT compile-time option then the syntax of the UPDATE statement is extended with optional ORDER BY and LIMIT clauses\".\n\nSeems pretty stupid that PHP doesn't compile SQLite with that feature, but there you have the answer!\nIt's possible to recompile SQLite in PHP but that's a total hell, so I guess I will live with PHP's SQLite wastefully searching every database row for matching columns instead of stopping as soon as it has found one... Sigh.. public function insertOrUpdate($table,$data,$where){\n        if($this->has($table,$where)){\n           return $this->update($table,$data,$where);\n        } else {\n           return $this->insert($table,$data);\n        }\n    }\n. Okay, it works with empty where param. Its a table with only one row, so very special case :P\n. Exactly like what's descripted\n. Same problem here. \nIf I try use the generated sql query with quotation mark around table name. I get in error.\nThe \"SET SQL_MODE=ANSI_QUOTES\" when using MySQL appears not working because i get Syntax error and no result on my inserts.\n. Seriously , this schuld be in the Documentation.\nSince im most applications a config.php is used, repeating the DB config in plaintext in every function you like to use si quite wired to me.\n. Thanks for your answer @catfan.\nHowever I already have prefix set. Here's how I instantiate the object:\n``` php\ndefine('DB_PREFIX', 'app_');\ndefine('DB_TYPE', 'mariadb');\n$database = new medoo([\n    'database_type' => DB_TYPE,\n    'database_name' => DB_DATABASE,\n    'server' => 'localhost',\n    'username' => DB_USER,\n    'password' => DB_PASS,\n    'charset' => 'utf8',\n    'port' => 3306,\n    'prefix' => DB_PREFIX,\n    'option' => [\n       PDO::ATTR_CASE => PDO::CASE_LOWER\n    ]\n]);\n``\n. i found that problem too... but i get around with doing my if statements in two ways :\nif ( (int)$user[0][\"age\"] === 50 ) or\nif ( $user[0][\"age]=== \"50\" )\n`\nAnyway we always test the return values... in my case anyway. Good Luck !\n. I finally found my error when making another query... the correct syntax is, per example : \n$articles = $database->select(\"articles\",\n    [\"id\",\"title\",\"titleSanityzed\",\"content\",\"dateOnline\"],\n    [\n        \"id[!]\" => $whereExclude[\"id\"],\n        \"ORDER\" => [\"dateOnline\"=> \"DESC\"],\n        \"LIMIT\" => $limit\n    ]\n);\nresult -> SELECT \"id\",\"title\",\"titleSanityzed\",\"content\",\"dateOnline\" FROM \"articles\" WHERE \"id\" != '1' ORDER BY \"dateOnline\" DESC LIMIT 2\nfor thoses who struggle with the medoo syntax... Works like a charm!\n. Oh nevermind, the code is doing something really weird and rewrites it automatically so that $join becomes $columns and $columns becomes $where. Bleh. Either way it is undocumented.. ",
    "ks1f14s": "Never mind the trouble. There is a way after all. Medoo is great!\ncorrect where:\n$where=array(\"AND\"=>array(\"user_id\"=>$_SESSION['user_id']),\"LIKE\"=>array(\"name\"=>\"a\"));\ngetting last query:\nSELECT * FROM user_meletes WHERE user_id = '1' AND (name LIKE '%a%')\nSorry for the trouble. Closing the issue.\n. Using catfan solution. \nActually by doing this query with mysql and standar pdo functions in php:\n1. taking longer\n2. give extra burden to mysql when this burden can be handled great and fast with php array functions\ncatfan could add these php array functions in medoo class I think to make medoo compatible with what you want but medoo would be bigger in size (now it is 10kb) and gives you the ability to get the data and sort them in various ways later with php. \n. ",
    "carlosmellado": "That's not running if you try to change \"AND\" to \"OR\".\nI think there's a bug.\n$where=array(\"OR\"=>array(\"user_id\"=>$_SESSION['user_id']),\"LIKE\"=>array(\"name\"=>\"a\"));\nreturns\nSELECT * FROM user_meletes WHERE user_id = '1' AND (name LIKE '%a%')\n. +1\n. Can't we do a count(something) column yet?\n. +1\n. You have to write PDO::FETCH_ASSOC like a parameter inside fetchAll() function ;)\n$database->query(\"SELECT * FROM EMPLE\")->fetchAll(PDO::FETCH_ASSOC);\n. ",
    "jtechera": "It's in the documentation, at the end of the where syntax section:\n$database->select(\"account\", \"user_id\", [\n    \"GROUP\" => \"type\",\n```\n// \"ORDER\" => \"age DESC\"\n\"ORDER\" => \"age\",\n// Must have to use it with ORDER together\n\"HAVING\" => [\n    \"user_id[>]\" => 500\n],\n// LIMIT => 20\n\"LIMIT\" => [20, 100]\n```\n]);\n//  SELECT user_id FROM account\n//  GROUP BY type\n//  ORDER BY age\n//  HAVING user_id > 500\n//  LIMIT 20,100\n. ",
    "ortick": "I see, but what about \"ORDER BY FIELD (row, 1,2,3)\" ?\n. ",
    "richardaum": "What happens when that field is datetime (from mysql)?\n. Edit: Problem found. Old version.\n```\n$queryUserChallenge = $conn->select(\"user_challenge\", [\n    \"[>]challenge\" => \"challenge_id\", \n    \"[>]user (challenger)\" => [\"challenger_user_id\" => \"challenger.user_id\" ],\n    // \"[>]user(challenged)\" => [\"challenged_user_id\" => \"challenged.user_id\"],\n], [          \n    \"challenger.name(challenger_user_name)\",\n], $where);\n\"Unknown column 'challenger.name' in 'field list'\"\n```\nbut after changing:\n\"challenger.name (challenger_user_name)\",\nto\n\"user.name (challenger_user_name)\",\nIt works fine.\n. +1\n. ",
    "yaowenqiang": "how to add a desc order ?. ",
    "brunousml": "I don't know what's happening. But not worked before. After your comment everything come back works. Both works to me. :sweat_smile: \n. :warning: Excuse me for my english shit, but I'm trying not to use a translator.\nI Understand you. And I think you use that defaults to ORDER BY only:\n``` php\n $database->select(\"post\", [\n    // Here is the table relativity argument that tells the relativity between the table you want to join.\n// The row author_id from table post is equal the row user_id from table account\n\"[>]account\" => [\"author_id\" => \"user_id\"],\n\n// The row user_id from table post is equal the row user_id from table album.\n// This is a shortcut to declare the relativity if the row name are the same in both table.\n\"[>]album\" => \"user_id\",\n\n// [post.user_id is equal photo.user_id and post.avatar_id is equal photo.avatar_id]\n// Like above, there are two row or more are the same in both table.\n\"[>]photo\" => [\"user_id\", \"avatar_id\"]\n\n], [\n    \"post.post_id\",\n    \"post.title\",\n    \"account.city\"\n], [\n    \"post.user_id\" => 100,\n    \"ORDER\" => \"post.post_id DESC\",\n    \"LIMIT\" => 50\n]); \n```\nbut, If you whant pass a hard coded SQL, use this function:\n``` php\n$database = new medoo(\"my_database\");\n$database->query(\"CREATE TABLE table (\n    c1 INT STORAGE DISK,\n    c2 INT STORAGE MEMORY\n) ENGINE NDB;\");\n$data = $database->query(\"SELECT email FROM account\")->fetchAll();\nprint_r($data);\n```\nWhen I decide use a lib to connect with my db, I don't wanna write my querys, on the contrary, want her to do it for me.\nIn exceptional cases I use $this->query(\"HARDCODED\"); for this case.\nThis is my particular vision about this subject. excuse me inconvenience. =)\n. ",
    "spiider": "i think is better an options like switch for add more functions in future:\n```\n    switch($string)\n    {\n        case \"UUID()\":\n            return 'UUID()';\n        break;\n    case \"NOW()\":\n    return 'NOW()';\n    break;\n\n    default:\n        return $this->pdo->quote($string);\n}\n\n```\n. Sometimes querys are better be called via NOW().\nAnd in case o UUID() ? why create a function in php todo that if you can use native mysql function ?\n. ",
    "almakano": "i use $this->queries array which added in $this->query() function\n. created :)\nif(DEBUG){ $this->queries[count($this->queries)]=array('query'=>$query) }\n. For example, please.\n. So, you say that making connection for every query per one host is good? \nFor example there is a class blog {} and class user {}. \nIn each getList() method there is $db = new medoo($host,$user,$pass,$db);\nSo if i need to get list of blogs and it's users - db connections creating twice.\nself::$db - is using only in self class and never be in others\nif there is a need to make 2 different connections at the same time array self::$connections can help\nFor me, i found that usefull by saving server resources and site time start.\n. ",
    "pomaxa": "@almakano - queries? I haven't seen them, where have you found it?\n. ",
    "andrewtch": "So, there is no need for test then? )\n. ",
    "Electrofenster": "browser fail :-1: can't delete this issue :-1: \n. Now it works!\ncan your class make this Query?\n\"SELECT A.id_user, A.email, A.rights, B.id_news, B.id_author, B.message FROM authme AS A, news AS B WHERE A.id_user = '1' && B.id_author = A.id_user\"\n. ",
    "dvdvnl": "Are you talking about MySQL? Then I second that. Put a \nphp\n$database ->query(\"SET sql_mode = ANSI_QUOTES;\");\nright after you initialize the object. Did the trick for me. Apparently the class uses quotations that are not accepted in MySQL's standard configuration (http://dev.mysql.com/doc/refman/5.0/en/server-options.html#option_mysqld_sql-mode).\nCheers,\nDavid\n. Thanx a lot\n. ",
    "oleynikd": "Great feature! +1\n. ",
    "GaryJones": "This looks to be fixed: https://github.com/catfan/Medoo/blob/master/medoo.php#L429\n. I think this can be closed?\n. I must be missing it - where is it minified?\n. For SQL Server at least, I think the preference is MyDatabase.dbo.MyTable.\n. ",
    "Rolaka": "ic, thx catfan fix the \"now()\" \\QAQ// \n. ",
    "Adoniasv": "if change  this,  table alias \"alias(tname)\" for \"alias[date_format(table,'xxx')]\" works\n```\nprotected function column_push( $columns )\n{\n    if ( $columns == '*' ) {\n        return $columns ;\n    }\nif ( is_string( $columns ) ) {\n    $columns = array( $columns ) ;\n}\n\n$stack = array() ;\n\nforeach ( $columns as $key => $value ) {\n    preg_match( '/([a-zA-Z0-9_\\-\\.]*)\\s*\\[((.*?)*)\\]/i', $value, $match ) ;\n\n    if ( isset( $match[1], $match[2] ) ) {\n        array_push( $stack, $match[2] . ' AS ' . $match[1] ) ;\n    } else {\n        array_push( $stack, $this->column_quote( $value ) ) ;\n    }\n}\n\nreturn implode( $stack, ',' ) ;\n\n}\n```\n. ",
    "shijianzhiwai": "use this \n$news = $database->get('article', array(\n    'id',\n    'title',\n    'asName'=>Medoo\\Medoo::raw('DATE_FORMAT(date, \"%m-%d-%Y\")')\n), array(\n    'type' => 'news',\n    'LIMIT' => '7'\n));. ",
    "jesuszeus": "Hi!\ni have the same problem, the first clause is Missed\n. possible solution:\nsql query that needing make\n\nSELECT * FROM \"conversations\" \nWHERE (\"to\" = 1 AND \"from\" = 2) OR (\"to\" = 2 AND \"from\" = 1)  \nORDER BY \"sent\" ASC\n\ncode php \n\nselect('conversations','*',Array('OR' => Array('AND' =>Array(Array('to' => 1, 'from' => 2),Array('to' => 2, 'from' => 1)))));\n\nit is why the array inner get the key of the array external if it no have key\nTest\nquery  sql\n\nSELECT * FROM it01_db_medicalpractice.tbl_consult  where \n(date_consult = '2014-01-11' And start_consult >= '9:10:00' and start_consult < '9:35:00') \nor (date_consult = '2014-01-11' And  end_consult >  '9:10:00' and end_consult <= '9:35:00') \nor (date_consult = '2014-01-11' And  '9:10:00' >= start_consult  and end_consult >= '9:35:00');\n\nconsul php\n\n$count = $medoo->select('tbl_consult','*',Array('OR' => Array('AND' => Array(Array('date_consult' => $date,'start_consult[>=]' => $start, 'start_consult[<]' => $end),\n                                                    Array('date_consult' => $date,'end_consult[>]' => $start,'end_consult[<=]' => $end),\n                                                    Array('date_consult' => $date,'start_consult[<=]' => $start,'end_consult[>=]' => $end))\n\n                                          )));\n\n.",
    "Shevisko": "Yes, duplicate keys, but with different values.\nIf I used this query using $mysql->query();, I got the data which I wanted.\nSELECT * FROM \"conversations\" \nWHERE (\"to\" = 1 AND \"from\" = 2) OR (\"to\" = 2 AND \"from\" = 1)  \nORDER BY \"sent\" ASC\nHow can I do that with $mysql->select();?\nThanks!\n. Yes, that would be great! :-)\n. ",
    "docmcfly": "Hi,\nI have two solutions for this problem. I currently use  a patch with solution approach from Jesuszeus. With a \"single array\" for the standing side by side \"AND\" or \"OR\" terms. \nMy second solution works  easier, because  after an AND follows allways a OR.\nThe user set only to begin \"AND\" or \"OR\". Nested terms get the nother: \"OR\" or \"AND\" \ne.g. \n$db->select('table', ['AND'=>[ ['col1'=>$a, 'col2'=>$b], 'col3'=>$c, ['col4'=>$d, ['col5'=>$e, 'col6'=>$f], 'col7'=>$g] ]);\nSQL: \n('col1'=>$a OR 'col2'=>$b) AND ( 'col3'=>$c ) AND ( 'col4'=>$d OR  ('col5'=>$e AND 'col6'=>$f) OR 'col7'=>$g )\nRegards...\nClemens\nPS: The patch upload follows in the next time. \n. ",
    "d3vr": "Having another look on the documentation, I found out that I should use this instead:\nphp\n$user =  $database->select(\"users\",\"*\", [\n                \"AND\"=>[\"users.username\"=>$_POST[\"username\"], \"users.password\"=>$_POST[\"password\"]]\n            ]);\nSorry!\n. ",
    "jerrywham": "I talk about this page : http://medoo.in/api/select\n. Ok, I didn't see your modification. Thank you. Maybe you may have to add a space between nickname and (my_nickname)?\nI modify the regex to use mysql function as LCASE on column, like this \nSQL\nLCASE(nickname) (my_nickname)\nRegex is near line 180 of medoo.php : \nphp\npreg_match('/([A-Z]*\\()?([a-zA-Z0-9_\\-\\.]*)(\\))?\\s*\\(([a-zA-Z0-9_\\-]*)\\)/i', $value, $match);\n. I made a new modifications to use mysql functions\n``` php\nprotected function column_quote($string)\n{\n    if (strpos($string, '\"') !== false) {\n        $string = str_replace('\"', '\\'', $string);\n    } else {\n        $string = '`' . rtrim(str_replace('.', '`.`', $string)) . '`';\n    }\n    return $string;\n}\n\nprotected function column_push($columns)\n{\n    if ($columns == '*')\n    {\n        return $columns;\n    }\n\n    if (is_string($columns))\n    {\n        $columns = array($columns);\n    }\n\n    $stack = array();\n\n    foreach ($columns as $key => $value)\n    {\n        preg_match('/([A-Z-_]*\\()?([a-zA-Z0-9_\\-\\.,\"` ]*)(\\))?\\s*\\(([a-zA-Z0-9_\\-]*)\\)/i', $value, $match);\n\n        if (\n            isset($match[2]) &&\n            isset($match[4])\n        )\n        {\n            array_push($stack, $match[1].$this->column_quote( $match[2] ). $match[3] . ' AS ' . $this->column_quote( $match[4] ));\n        }\n        else\n        {\n            array_push($stack, $this->column_quote( $value ));\n        }\n    }\n\n    return implode($stack, ',');\n}\n\n```\nTo use it, do something like this on your query : \n``` php\n$database->select('post', [\n// Here is the table relativity argument that tells the relativity between the table you want to join.\n// The row author_id from table post is equal the row user_id from table account\n'[>]account' => ['author_id' => 'user_id'],\n// The row user_id from table post is equal the row user_id from table album.\n// This is a shortcut to declare the relativity if the row name are the same in both table.\n'[>]album' => 'user_id',\n// [post.user_id is equal photo.user_id and post.avatar_id is equal photo.avatar_id]\n// Like above, there are two row or more are the same in both table.\n'[>]photo' => ['user_id', 'avatar_id']\n], [\n'post.post_id',\n'post.title',\n'account.city'\n'CONCAT_WS(\" \",account.firstname,account.name) (user)',\n], [\n'post.user_id' => 100,\n'ORDER' => 'post.post_id DESC',\n'LIMIT' => 50\n]);\n```\nI edit this post because I first paste the wrong version of code. Sorry. This one works.\n. +1\nSee https://dev.mysql.com/doc/refman/5.7/en/functions.html for all possibility\nand https://dev.mysql.com/doc/refman/5.7/en/group-by-modifiers.html\nIt would be usefull to wrote something like this :\nphp\n$medoo->select(\n    'table',\n    [\n       'HEX(uuid) (uuid)',\n       'LCASE(name) (name)'\n       \"DATE_FORMAT(dateofbirth,'%Y') (birthday)\"\n   ],\n   [\n       \"DATE_FORMAT(`dateofbirth`,'%Y')\" => \"DATE_FORMAT((CURDATE()),'%Y)\",\n      'GROUPBYWITHROLLUP' => 'phase'\n   ]);\nThat would generate something like this :\n``sql\nSELECT HEX(uuid) AS uuid, LCASE(name) AS name, DATE_FORMAT(dateofbirth,'%Y') AS birthday \nFROM table\nWHERE DATE_FORMAT(dateofbirth`,'%Y') = DATE_FORMAT((CURDATE()),'%Y)\nGROUP BY 'phase' WITH ROLLUP\n. ",
    "tecnicaz": "Thank  you for your quick reply, but I had already read that section in Documentation, but I still can't accomplish the following ( and perhaps I stated this poorly in the beggining ). which is do a string search that begins with e.g. FOO% or ends with e.g. %BAR. When I take a look at the queryString there is always a % sign on either side of string. \n. Thank you, it worked like a charm\n. ",
    "JulioSimon": "A fast and easy solution for your request is to add a new IF statement inside \"where_clause\" function with a new label for the operation you want to implement, for example: \nWe want to remove the first '%' when using the LIKE operation ('FOO%') so lets start to make a new LIKE operation named as \"xLIKE\".\n``` php\nif (isset($where['xLIKE']))\n    {\n        $like_query = $where['xLIKE'];\n        if (is_array($like_query))\n        {\n            $is_OR = isset($like_query['OR']);\n        if ($is_OR || isset($like_query['AND']))\n        {\n            $connector = $is_OR ? 'OR' : 'AND';\n            $like_query = $is_OR ? $like_query['OR'] : $like_query['AND'];\n        }\n        else\n        {\n            $connector = 'AND';\n        }\n\n        $clause_wrap = array();\n        foreach ($like_query as $column => $keyword)\n        {\n            if (is_array($keyword))\n            {\n                foreach ($keyword as $key)\n                {\n                    $clause_wrap[] = $this->column_quote($column) . ' LIKE ' . $this->quote('' . $key . '%');\n                }\n            }\n            else\n            {\n                $clause_wrap[] = $this->column_quote($column) . ' LIKE ' . $this->quote('' . $keyword . '%');\n            }\n        }\n        $where_clause .= ($where_clause != '' ? ' AND ' : ' WHERE ') . '(' . implode($clause_wrap, ' ' . $connector . ' ') . ')';\n    }\n}\n\n```\nAlso, remember to add your new xLIKE option inside the explode list (function where_clause(...)):\nphp\n$single_condition = array_diff_key($where, array_flip(\n    explode(' ', 'AND OR GROUP ORDER HAVING LIMIT LIKE MATCH xLIKE')\n));\nAnd the usage of this new option is the same as the LIKE one but naming it as xLIKE:\n``` php\n$data = $conn->select(\"item_data\", [\n\"[>]item_general\"   =>  [\"id\" => \"id\"]\n\n],[\n\"item_general.country\",\n\"item_general.lastupdate\",\n\"item_data.title\",\n\"item_data.category\",\n\"item_data.price\",\n\"item_data.currency\",\n\"item_data.url_details\"\n\n],[\n\"xLIKE\" => [\n\n    \"item_data.title\" => \"Title\"\n\n],\n\n\"ORDER\" => \"item_data.price\"\n\n]);\n```\nRegards.\n. Definitely that is a better solution!\nAlso I suggest to put that example at the Medoo documentation.\nhttp://medoo.in/api/where #Full Text Searching\n. ",
    "pwwiur": "if you mean that \"text%\" does not working you should fix the ~ operator section in data_implode method\nfix these lines:\n```\n    if ($operator == '~' || $operator == '!~'){\n        if ($type != 'array'){\n            $value = array($value);\n        }\n        $like_clauses = array();\n        foreach ($value as $item){\n            $item = strval($item);\n            if (preg_match('/^(?!(%|[|])).+(?<!(%|]|))$/', $item)){\n                $item = '%' . $item . '%';\n            }\n                        elseif(substr($item, -1) == \"_\"){\n                            $item = $item . '%';\n                          }\n        $like_clauses[] = $column . ($operator === '!~' ? ' NOT' : '') . ' LIKE ' . $this->fn_quote($key, $item);\n    }\n    $wheres[] = implode(' OR ', $like_clauses);\n}\n\n```. i had the same problem, and got that my mysql has been updated and it does not accept \"tableName\" for it's syntax. and also for column names.. ",
    "RideLikeTheWind": "This would be an excellent addition to scope. Updates?\n. Awesome - I\u2019ll check it out.\u00a0\nJoe\n\u2014\nReply to this email directly or view it on GitHub.\n. I am keen to give it a go - I will have to port my database over to CloudSQL. I am currently using the main branch in both production and development (localhost) with a remote MySQL server, which works well. \n. Sorry just saw this reply - thank you!\n. Hmmm I had a go using the cloudsql method and using my instance:db and root with pass '' on localhost it came back with a file not found error from MySQL, which to me says it can. At the time I had not setup a user, nor did I have a IPv4 address. Any ideas?\n**\nOk - my mistake. Using cloudsql only functions within App Engine. External networks required IPv4 access with a whitelisted IP and specific user. \n. I agree - I think this was a supported service in a previous version, which is where I lifted the above code. I will look and see if I can create a way to provide other services within this framework without the need for inbuilt service allocation. \nCheers!\n. ",
    "simplepanda": "I submitted a patch to simplepanda/Medoo (develop branch) to support Cloud SQL:\nhttps://github.com/simplepanda/Medoo/tree/develop\n. I'm using it on an App Engine app, yes. Runs on both the dev environment via a public IP to App Engine using \"mysql\" as the server type and within App Engine itself on production using \"cloudsql\" with the configuration I laid it out in the README.md patch and the commit comment. \nUsing \"mysql\" as the server type doesn't work on production (you have to use \"cloudsql\" with the patch I submitted) as direct IP access doesn't work in the production environment (probably due to virtualized nature). Google gives you a specific UNIX socket to connect via and that's what the patch I submitted uses.\n. I just did a fairly aggressive test running natively on App Engine to Cloud SQL (using \"cloudsql\" server type via my patch). 275,651 queries executed without issue. Seems to work ok. -d\n. Second patch to the README.md file to explain Cloud SQL use, as well as a spelling correction.\n. Long long dead PR for what seems to be a dead project.\n. Agreed.\n. ",
    "jaircuevajunior": "@catfan Thank you so much!\nSo glad here, you made it! Surely I will... I'm gonna test it in a few days, right?\ncheers :)\n. ",
    "raykwok": "Any body?\n. I knew it. But the problem is that I don't know the differences between the updated one and the old one.\n. I mean that you can keep the english doc in version control.\nFor example, put the doc on github, then I can keep the chinese version up to date.\n. Is there any plan about this request?\n. ",
    "superdeeid": "I confirm this error when using ONLY medoo msSQL settings using v1.4.5.\nFor now, i use directly the query() method since meddo doesnt parse the correct query when used with MsSQL.. i'm wondering the same... I know there's several ways to check it but i don't know what is the perfect way:\nWhere there is no error error() is : \n$database->error()[0] = \"00000\"\n$database->error()[1] = NULL\n$database->error()[2] = NULL\n... so testing the result with error() could have 1, 2, 3 of thoses values ? Actually i check only the error()[1] === NULL but hope that it doesnt change in the future !. You can use $database->error() for that -> https://medoo.in/api/error. i see.\ni never used Medoo to create temporary database so i dont know (only for the first install of the script). it may be a bug : @catfan ?\nGood luck !. Any plan to release it to master soon ?. i must agree with Catfan. this is not the place to talk about something else here. Medoo is great for my needs and do more than i need. Loved his way of doing syntax structure.\n@catfan : i'll wait to the official release to update it since anyway my current project use 1.4.5 and i test the value with (int)variable already. On furthers projects, if 1.5.0 is out, i'll use the proper way.. the update() always return a PDO statement... that is expected.\nif you want to test if the update() is successfull you can use error() depending of what you want to know about the update of course. Per example for my script i always use a wrapper that return me always same output.\nper example : return [0 => TRUE|FALSE, 1=> $rows]\nWhere $rows are an array. could have the result or else depending of the query wrapper.. Damn ! i was linking why to wrong handler....\n$row = $medoo->update(\"...\");\n$medoo->rowCount();\nthe error : $medoo->rowCount() should be $row->rowCount() instead... . That makes sense... thx a lot, workin' perfectly !. ",
    "njxqlus": "Same in Oracle. LIMIT 1  was added to simple select sql: \nget('USER_TABLE', ['USER_SETTINGS'], [\n    'USER_LOGIN' => $userID,\n]);. ",
    "caesarcxiv": "still an error v1.6. ",
    "inspurhua": "use $database->pdo->beginTransaction()\n. ",
    "anhskohbo": "yep, I pass * select column and everything fine. \n$db->count(\"merchants\", '*', $where);\nBut current version break code old version\n. ",
    "peter-mw": "hello any info for table prefix support\n. I need to have multiple db tables by prefix and use them as alias to other tables.\nMaybe you can combine it with #97 \n. Maybe like that\n$database = new medoo();\n$database->alias('account', 'my_prefix_account');\n// Enjoy\n$database->insert('account', [\n    'user_name' => 'foo'\n    'email' => 'foo@bar.com',\n    'age' => 25,\n    'lang' => ['en', 'fr', 'jp', 'cn']\n]);\n. ",
    "TonyLight": "It would be useful to automatically add a prefix to the tables like that maybe :\nphp\n$database = new medoo();\n$database->prefix('prefix_');\n$database->insert('account', [     // => prefix_account\n  'user_name' => 'foo'\n  'email' => 'foo@bar.com',\n  'age' => 25,\n  'lang' => ['en', 'fr', 'jp', 'cn']\n]);\nCan you add this feature ?\n. ",
    "manuvarghese236": "prefix is nice feature ,if added\n. ",
    "jiaxunjiaxun": "Only used on php 5.4+\nhttp://medoo.in/api/new\nTips\n. I think it might be a bug. Unlike the document on website, and it can not work when you use PHP v5.2\nhttp://medoo.in/api/new\nRequirement\n. Thanks~\n. Why not use function query()?\n. Medoo is based on PDO. Why NoSQL? And if it supports NoSQL, it will be re-designed.\n. Thanks~\n. http://medoo.in/api/where\nOrder Condition\nOr maybe, you should look at GROUP condition too.\n. Why support ;) ~~ You can implement it simply, and 'page' will be another keyword, that we should pay attention. =)\n. ",
    "imgarth": "\u6211\u6ca1\u6709\u7528[]\u683c\u5f0f\uff0c\u90fd\u662f\u7528array()\u683c\u5f0f\u7684\u3002medoo 0.9.1.1\u5f88\u6b63\u5e38\uff0c\u6539\u7528\u6700\u65b0\u7248\u672c\u540e\u5c31\u51fa\u73b0\u6b64\u9519\u8bef\u3002\n. Thanks\n. ",
    "gmbelart": "bug for PHP < 5.4\n. ",
    "PaykomanVll": "Ohh ok now change # 349 to:\nexplode(' ', 'AND OR GROUP ORDER ORDERS HAVING LIMIT LIKE MATCH')\nthan works =)\n. ",
    "overtrue": "OK\uff0cthx!\n. ",
    "efans007": "using * to select all columns is not a good practice, but sometimes it's useful.\n. int(1)\n. ",
    "web-monster": "Decided\n. Yes. \nphp\nAND t1.time BETWEEN unix_timestamp($dateStart) AND unix_timestamp($dateEnd)\nWho?\nAnd how to pick it up in the end.\n. ``` php\n$aColumns = [];\n$dataot = intval($_POST['dataot']);\n$datado = intval($_POST['datado']);\nif($dataot > 0 && $datado > 0) {\n    $aColumns[\"AND\"][\"time[<>]\"] = [$dataot,$datado];\n}\nif(isset($_POST[\"deleted\"])) {\n    $aColumns[\"AND\"][\"is_deleted\"] = 1;\n} else {\n    $aColumns[\"AND\"][\"is_deleted\"] = 0;\n}\nif(isset($_POST[\"search\"]) && !empty($_POST[\"search\"])) {\n    $aColumns[\"LIKE\"][\"OR\"] = ['name' => $_POST[\"search\"],'surname' => $_POST[\"search\"]];\n}\n$aColumns[\"ORDER\"]=\"time DESC\";\n$aColumns[\"LIMIT\"]=[0, 50];\n$aRow = $Db->select(\"users\",\"*\",$aColumns);\n```\nHow to?\n. Ok. How to make advanced like:  LIKE 'te%'\nOR LIKE '%est'\n. And several sum?\nmysql\nSELECT id,SUM(bytes) AS bytes,cost,SUM(discount) AS sum FROM iptraffic_all WHERE t_class = '10'\n. Implemented so:\nphp\n$Db->update(\"test\",[\"record_count\"=>\"##record_count-1\"],[\"id\"=>1]);\n$Db->select(\"articles\",[\"##COUNT(*) AS count\",\"id_category\"],[\"AND\"=>[\"is_read\"=>0,\"is_del\"=>0]]);\nIn medoo.php:\n``` php\npublic function quote($string)\n{\n    preg_match('/^##(.*)/', $string, $match);\n    if(isset($match[1])) {\n        return $match[1];\n    }\n    return $this->pdo->quote($string);\n}\nprotected function column_quote($string)\n{\n    preg_match('/^##(.*)/', $string, $match);\n    if(isset($match[1])) {\n        return $match[1];\n    }\n    return '\"' . str_replace('.', '\".\"', $string) . '\"';\n}\n```\nResult:\nmysql\nUPDATE \"test\" SET \"record_count\" = record_count-1 WHERE \"id\" = 1\nSELECT COUNT(*) AS count,\"id_category\" FROM \"articles\" WHERE \"is_read\" = 0 AND \"is_del\" = 0\n. Will be added? ##\n. Make you better. Without this functionality very gutted. I can not even make a few COUNT\n. I can not make a few SUM\nmysql\nSELECT id,SUM(bytes) AS bytes,cost,SUM(discount) AS sum FROM iptraffic_all WHERE t_class = '10'\nHow?\n. It was an example.\nHere is an example of the finished project:\nmysql\nSELECT t1.id_record,SUM(t1.vote) AS sum, COUNT(t1.id) AS count, SUM(t1.vote)/COUNT(t1.id) AS rating FROM reviews t1\nWHERE t1.id_record IN (2,4,7,99,11,222,445,1212,4545) AND t1.type='11'\nGROUP by t1.id_record\nHow?\n. ",
    "hooray": "cool and thx :+1: \n. @pwwang thanks for translation :)\n. ",
    "Hatsunyan": "Yes, it working ,but this not good for big data. Get 1000+ records for one random =__=\n. I'm use query()\n. ",
    "charlex": "I figured it out. Yes, Medoo is compatible with 5.2. It's just the standard back compatibility issue with arrays and brackets.\n. Yes, I'm using MySQL. So, you're saying that Medoo is only compatible with MySQL on PHP 5.2? Not PostgreSQL, Sybase, or Oracle?\n. ",
    "linzi0520": "for mysql only .\n. If u used sybase or other databases  , medoo would not be the best choice.\n. my php version > 5.3  and  I have  tested sybase only . if u need singleton replication cluster ,  u should write some codes yourself..\n. ",
    "Brobin": "Can this be used  for DISTINCT?\nI have an opened issue (#113) about this\n. Right now, it doesn't look like sum can be run inside of a select. To get those sums, I believe you would have to do separate queries.\n$bytes = $medoo->sum(\"iptraffic_all\", \"bytes\", array(\"t_class\" => 10);\n$sum = $medoo->sum(\"iptraffic_all\", \"discount\", array(\"t_class\" => 10);\n. I was looking at the code a little and it looks like the \nselect_context($table, $join, &$columns = null, $where = null, $column_fn = null)\nfunction already has the functionality for a column function ($column_fn)\nIt is just set to null, and is never passed in from anywhere. @catfan, were you planning on implementing this in the future?\n. What exactly is your question?\n. Ah, so what you are saying is that medoo is sensitive to the quotation types.\nA double quote ie: \"table\" works\nA single quote ie: 'table' and it breaks\nInteresting. This should be a quick fix.\n. Oh, okay\nso if you run this:\n$medoo->select(table,*);\nyou will get errors?\n. ",
    "Sparclex": "Right now it isn't possible to compare the datetime with a lower or higher one for me. I'm getting sql errors.\n$database->update('post', [\n    '#uid' => 'UUID()'\n], [\n    //this is not possible\n    '#datetime4[<=]' => 'NOW()',\n]);\n. ",
    "darre4nbrown": "This is how i did it.\nunder the comment for variables add the line\nprotected $distinct_mode = false;\nthen i added the folowing function below the debug function \n```\npublic function distinct()\n{\n    $this->distinct_mode = true;\nreturn $this;\n\n}\n```\nto the function select_context($table, $join, &$columns = null, $where = null, $column_fn = null) I added:\nif($this->distinct_mode)\n    {\n        $distinct = 'DISTINCT ';\n    } else {\n        $distinct = '';\n    }\nand changed the return line (last line in the function) to\nreturn 'SELECT ' . $distinct  . $column . ' FROM ' . $table . $this->where_clause($where);\nThen it can be set the same way as using the debug() function ie\n$database->distinct()->select(...\n$database->debug()->distinct()->select(...\nhope this helps for anyone in the future\n. ",
    "ubermanu": "@darre4nbrown thanks mate\n. ",
    "dimitrycastex": "@darre4nbrown thanks, but in latest version the function should be\nreturn 'SELECT ' . $distinct . $column . ' FROM ' . $table_query . $this->where_clause($where);\n. ",
    "repat": "Another workaround:\nphp\n$result = array_unique($database->select($table, $columns));. Could you add INSERT IGNORE (MySQL/MariaDB) /ON CONFLICT IGNORE (sqlite)? Don't know the Oracle equivalent.\nbtw, what's the ?> doing there?\n. @catfan ? :)\n. @flippolis Check out this post http://stackoverflow.com/a/40404306/2517690\n. ",
    "adarshmadrecha": "This is how you can select distinct values - by passing SQL functions using Medoo::raw\n$resultset = $db->select(\n      // table name\n      'posts',\n      // Columns\n      [\n        'month' => Medoo::raw( 'DISTINCT (month' )\n      ],\n    );.  @SyuTingSong any plan for implementing this? I am really looking forward to this method.. I have also encountered the same issue.\n$database = new Medoo([\n      'database_type' => 'mysql',\n      'database_name' => $databasename,\n      'server'        => $host,\n      'username'      => $username,\n      'password'      => $password,\n    ]);\nNow if the password is incorrect, I expected the $database->error() to handle the error and give me a message. But instead, I get a Fatal error. It would be really helpful if all the errors are handled by error() method.\n. ",
    "cw1427": "Hi, how about the distinct feature implement? Could we use it in the latest version?. ",
    "nathanael540": "Hi, how about the distinct feature implement? Could we use it in the latest version?. ",
    "highpanda": "That would be awesome.\n. ",
    "iMactool": "Unfortunately, there is no such function. Whether it is still only use the original SQL(like this: SELECT * FROM xujiantao WHERE FIND_IN_SET(44, game);) statement processing. $database->select(\"account\", \"user_id\", [\n    // Single condition\n    \"ORDER\" => \"user_id\",\n]);\nThe default is in ascending or descending order ?. thank you very much :)\n. ",
    "kovinet": "Could you explain how you solved this? How can I make MySQL to use standard quotes? I have to specify this in constructor?\nI have same problem as @kyrilkarlier - all my select statements return false because of wrong usage of quotes.\n. ",
    "pekkanikolaus": "This seems insane. What if the PHP script's database user can't change mySQL options? That renders the entire framework unusable.\nThe right way would be to escape table names the way all other frameworks utilizing mySQL do: with backticks.\n. ",
    "clzola": "Ok, thanks for your reply. \nBut I have another question now. Since I will need to build this query and use medoo->query() function it is difficult to build correct where clause . Which of your functions should I use to build query so that function returns a string which I will concatenate to my query at the end (is it just medoo->where_clause()).\n. ",
    "KaitaniLabs": "Nevermind I worked it out. Would be useful in the documentation, as officially LIMIT is not part of the WHERE clause. (Can have LIMIT without WHERE)\n. ",
    "numediaweb": "It is not documented by looking at the code:\n```\nif (isset($where['LIMIT']))\n            {\n                $LIMIT = $where['LIMIT'];\n            if (is_numeric($LIMIT))\n            {\n                $where_clause .= ' LIMIT ' . $LIMIT;\n            }\n\n            if (\n                is_array($LIMIT) &&\n                is_numeric($LIMIT[0]) &&\n                is_numeric($LIMIT[1])\n            )\n            {\n                if ($this->database_type === 'pgsql')\n                {\n                    $where_clause .= ' OFFSET ' . $LIMIT[0] . ' LIMIT ' . $LIMIT[1];\n                }\n                else\n                {\n                    $where_clause .= ' LIMIT ' . $LIMIT[0] . ',' . $LIMIT[1];\n                }\n            }\n        }\n\n```\n. medo error returns always an array!\n. Currently, to check for errors, I use\n/**\n     * Helper funtion to check if error is on the last DB error\n     * @return bool\n     */\n    public static function isError()\n    {\n        $db = self::getInstance();\n        $lastError = $db->error();\n        return (isset($lastError[2]) && $lastError[2]) ? true : false;\n    }\nWould be great to have this helper function inside the library.\nRelated issues; 281,  151\n. ",
    "hirdeshvishwdewa": "We can use OFFSET same as like we do LIMIT by making the following few changes-\n1. At line 425 by adding OFFSET for $single_condition\n2. Replace the code which is setting LIMIT to the what shown below-\nif (isset($where[ 'LIMIT' ]))\n            {\n                $LIMIT = $where[ 'LIMIT' ];\n                if (is_numeric($LIMIT))\n                {\n                    if(isset($where[ 'OFFSET'])){\n                        $OFFSET = $where[ 'OFFSET'];\n                        if (is_numeric($OFFSET))\n                        {\n                            if ($this->database_type === 'pgsql'){\n                                $where_clause .= ' OFFSET ' . $LIMIT . ' LIMIT ' . $OFFSET  ;\n                            }\n                            else{\n                                $where_clause .= ' LIMIT ' . $OFFSET . ', ' . $LIMIT;\n                            }\n                        }\n                    }else{\n                        $where_clause .= ' LIMIT ' . $LIMIT;\n                    }\n                }\n            }\nThats it!\n. ",
    "misscx": "\u8001\u5916\u4e0d\u61c2\u4e2d\u6587\uff0c\u4eb2\uff01\n. ",
    "laohur": "\u4e2d\u82f1\u53cc\u8bed\u554a\uff01\u51b5\u4e14\u8fd8\u662f\u4e2d\u56fd\u4eba\n\"\u5bd2\u5ddd\" notifications@github.com\u5199\u5230\uff1a\n\n\u8001\u5916\u4e0d\u61c2\u4e2d\u6587\uff0c\u4eb2\uff01\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/catfan/Medoo/issues/121#issuecomment-49193841\n\n\n\u62b1\u6b49\u6682\u65f6\u65e0\u6cd5\u8be6\u7ec6\u8bf4\u660e\u3002\u8fd9\u4efd\u90ae\u4ef6\u662f\u4f7f\u7528\u5b89\u88c5\u6709Gmail Plus\u7684Android\u79fb\u52a8\u8bbe\u5907\u53d1\u9001\u7684\u3002\n. ",
    "laimisf": "Solved my issue by edting function column_quote:\n```\nprotected function column_quote($string)\n{\n    //EDITED\n    if (preg_match(\"/.*/\", $string))\n    {\n        return $string;\n    }\n    else\n    {\n    return '\"' . str_replace('.', '\".\"', preg_replace('/(^#|(JSON))/', '', $string)) . '\"';\n    }\n    // ./EDITED\n//ORIGINAL\n//return '\"' . str_replace('.', '\".\"', preg_replace('/(^#|\\(JSON\\))/', '', $string)) . '\"';\n// ./ORIGINAL\n\n}\n```\nThe problem is that ALIAS does not work with something.*(alias) but that's a very little problem\n. ",
    "jjworld": "It appears that the fetchColumn() result is the integer 1 while the comparison is expecting a string with '1'. If the comparison is changed from === to == it seems to work fine.\n. ",
    "jimsproject": "is there any plan to solve this isue  for postgresql?\nthank you\n. ",
    "2masbach": "Hi catfan,\nI see my mistake now. Your provided join works perfectly! Thanks :)\n. Hi, by using (newname) in the end of the select statement, you can use aliases.\nMy query:\ndb->select(\n            'achievements',\n            [\n                'achievements.id(rankID)',\n                'achievements.rank'\n            ],\n            [\n                'AND' =>\n                [\n                    'achievements.type' => 'match',\n                    'achievements.active' => 1\n                ],\n            ]\n        );\nthe (rankID) creates the alias for use.\n. ",
    "saotand": "try with:\n\"#ORDER\"=>\"RAND()\"\nthen it will not quote the SQL Command... :)\n. $db = new medoo();\n$result = $db->select('table_name','*',['AND'=>['Id'=>123,'comments[~]'=>'Medoo']]);\nthis is the new format of 'LIKE' in where array... (medoo lastest)\n//SELECT * FROM \"table_name\" WHERE \"Id\" = 123 AND \"comments\" LIKE '%Medoo%'\ngreetings...\n. medoo::error() only send data (until now) only when there is a error...\n. try with:\n$database->select(\"work_active\", \"urgent\", [\"AND\" => [\"urgent[>]\" => '0', \"user_work\" => '']], [\"ORDER\" => \"urgent ASC\"]);\n. you can catch medoo::error() to throw an exception when a  query has a error,\nmedoo::error() fills an array with the code and description of the SQL error statement,\nyou can make a dump in order to show the error array format\nNOTE:  catch medoo::error() just before the call of the [insert|update|delete] function...\nif no errors... medo::error() will be NULL...\nhope to be useful to you... :)\n. you can catch medoo::error() to throw an exception when a column in query not exist,\nmedoo::error() fills an array with the code and description of the SQL error statement,\nyou can make a dump in order to show the error array format\nhope to be useful to you... :)\n. ",
    "omphteliba": "Ah, ok. Thx!\n. You can find it here: http://medoo.in/api/where scroll down to \"Using SQL functions\":\n```\n$data = $database->select('account', [\n'user_id',\n'user_name'\n], [\n'#datetime' => 'NOW()'\n]);\n// SELECT \"user_id\",\"user_name\"\n// FROM \"account\"\n// WHERE \"datetime\" = NOW()\n// [IMPORTANT] Keep in mind that, the value will not be quoted should be matched as XXX() uppercase.\n// The following sample will be failed.\n$database->select('account', [\n'user_id',\n'user_name'\n], [\n'#datetime2' => 'now()',\n'datetime3' => 'NOW()',\n'#datetime4' => 'NOW'\n]);\n```\n. Ah, ok, thx.\n. ",
    "jasonlav": "This solution does not work with the latest version of medoo.\n. See #158 \n. +1. ",
    "hlo2109": "Esto es para la \u00faltima versi\u00f3n la dejo aqu\u00ed para seguir el hilo\n'ORDER' => Medoo::raw('RAND()')\nSi tienen una clase y dentro incluye su base de datos seria algo asi \n'ORDER' => $this->db->raw('RAND()')\nhttps://medoo.in/api/raw. ",
    "quentinwalter": "I have the same problem. Did you find out how to use this feature?\n. Thank you for your answer. I already use aliases for the column names but I was wondering if it was possible to use them for the joined tables (see INNER JOIN item a_item):\nsql\nSELECT a_item_id, a_item.name AS a_item_name, b_item_id, b_item.name AS b_item_name, type_id\nFROM relation\nINNER JOIN item a_item ON a_item.item_id = a_item_id\nINNER JOIN item b_item ON b_item.item_id = b_item_id\nWHERE a_item_id = 1 OR b_item_id = 1\nI checked the regexp in the medoo class and I think this feature is not implemented yet. I use the method query instead.\n. ",
    "luxixing": "\u4f5c\u8005\u7559\u4e0b\u4e00\u5806\u5751\uff5e\uff5e\n. I found a bug in function: \"column_quote\"\nthe code is\n\u00b7\u00b7\u00b7\n    protected function column_quote($string)\n    {\n        $quote = '\"';\n        if (substr($string, 0, 1) === '#') {\n            $quote = '';\n        }\n        return $quote . str_replace('.', '\".\"', preg_replace('/(^#|(JSON))/', '', $string)) . $quote;\n    }\n\u00b7\u00b7\u00b7\nI fixed it \nthe sql function can not use by yourself \ncan you fixed it ?\n. @catfan  Thank you for your reply\nThe second questioin can you help me ?\nThese are questions \n $medoo->select($table, ['count(uid) as test'], $where);\n It will be generator wrong sql \n $medoo->select($table, ['distinct uid'], $where);\n$medoo->select('table  name as b', ['b.*'], $where);\nMany more question\nThank you very much\nI hope you  can understand me\n. ",
    "Wikunia": "+1 I would like to have these queries as well and it's really bad that there is no answer to this questions for half a year :/\n. @Jervelund I have the same problem and I don't know how to join tables which aren't directly connected to the first FROM table.\nMy code:\n$datas = $database->select(\"Tags\", [\n        \"[><]ID_Links_Tags\" => [\"id\" => \"tag\"],\n        \"[><]Links\" => [\"ID_Links_Tags.link\"=>\"id\"]\n    ], [\n        \"Links.link\",\n    ], [\n        \"Tags.tag\"=>\"NodeJS\"\n    ]);\nThat generates this query:\nSELECT \"Links\".\"link\" FROM \"Tags\" INNER JOIN \"ID_Links_Tags\" ON \"Tags\".\"id\" = \"ID_Links_Tags\".\"tag\" INNER JOIN \"Links\" ON \"Tags\".\"ID_Links_Tags.link\" = \"Links\".\"id\" WHERE \"Tags\".\"tag\" = 'NodeJS'\nWhere you have to delete all the \" \nSELECT Links.link FROM Tags INNER JOIN ID_Links_Tags ON Tags.id = ID_Links_Tags.tag INNER JOIN Links ON Tags.ID_Links_Tags.link = Links.id WHERE Tags.tag = 'NodeJS'\nThe problem is Tags.ID_Links_Tags.link which should be ID_Links_Tags.link.\nIs there a way using Medoo to such queries? Should be really easy to implement. \n. Maybe but that doesn't solve the problem with more than 3 tables\n. Well match against uses columns and keywords so they are combined in MATCH.  Now I want to create a SQL statement like :\nselect a from tbl where Match(col1) against ('val1') or col2 = 'val1'\n. ",
    "bars38": "+1 vote for such a query\n. Thanks, that's work\n. And if I change query like \n$new = $this->db->select(\n            \"u_company\", \n            [\"id\", \"co_name\"],\n            [\n                \"active\" => '1',\n                \"ORDER\"  => 'co_name DESC'\n            ]\n            );\ngot such a result\nSELECT \"id\",\"co_name\" FROM \"u_company\" WHERE \"active\" = '1' ORDER BY \"co_name DESC\". Thank you!. ",
    "iyaozhen": "+1 vote\n. GROUP BY  multiple columns is very useful.\nI usually use this way count data.\n. You can use Singleton pattern, but it is not so good in php.\nAs @VeeeneX say Dependency Injection is right and better way.\n. If field DEFAULT NULL\nI think you should not set this field, when you insert.\n. I have this problem too. Can fix soon ?\n. @SyuTingSong Thx, you are right.\nI think should modify Documentation (http://medoo.in/api/insert).\n\"Return: [string|array] The last insert id\" \nAnd in php documentation:\n\nPDO::lastInsertId\nNote:\nThis method may not return a meaningful or consistent result across different PDO drivers, because the underlying database may not even support the notion of auto-increment fields or sequences.\n\nMedoo Documentation would be best warn this.\n. Thx, This is good way.. ",
    "shdinx": "+1\n. Not build in but I use http://www.phpfastcache.com/ in combination with medoo. \n. ",
    "CodeBrauer": "+1\nWould be awesome. No more custom querys for this: \n$profit = $this->db->select('bookings', ['SUM(amount)', 'status'], ['GROUP' => 'status']);\n. But my table is an InnoDB table and not MyISAM table - and I can't change that.\n. Now I did it with a custom $this->db->query() ...\n. Any updates on this PR?\n. And which versions can be updated/which versions don't have backward compatibility?. In case anyone searching for older docs for legacy projects:\nHere are medoo documentations for older versions (from the beginning)\n\n0.9.6: https://web.archive.org/web/20140625044946/http://medoo.in/doc\n0.9.8: https://web.archive.org/web/20150215213036/http://medoo.in/doc\n1.0.0: https://web.archive.org/web/20151006114145/http://medoo.in:80/doc\n1.0.2: https://web.archive.org/web/20160620023645/http://medoo.in:80/doc\n1.1.1: https://web.archive.org/web/20160702121735/http://medoo.in:80/doc\n1.1.2: https://web.archive.org/web/20160807170540/http://medoo.in:80/doc\n1.1.3: https://web.archive.org/web/20160905153430/http://medoo.in:80/doc\n. \n",
    "akahen": "Select account, sum(amount) from table group by account is what I'm looking for\n+1. That's great, yet that will allow only one sum or aggregate function per select. Why not take the actual column name for the implicit 'as'.\nThanks\nOn Sep 29, 2017 10:13 PM, Catfan notifications@github.com wrote:\nThis will be supported on next version v1.5. You may check out this branch and try it.\n$database->select('table', [\n        'account',\n        'sum' => Medoo::raw('SUM()')\n], [\n        'GROUP' => 'account'\n]);\n// SELECT \"account\", SUM(\"amount\") AS \"sum\" FROM \"table\" GROUP BY \"account\"\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/catfan/Medoo/issues/635#issuecomment-333275141, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AIUqNBaBezTUBeycSAbw5SaAeLCsJM2Aks5snaOwgaJpZM4Po2ca.\n. hi, will this support an additional aggregate like below? thanks\n$database->select('table', [\n        'account',\n        'sum' => Medoo::raw('SUM( +  + )'),\n        'sum2' => Medoo::raw('SUM()')\n], [\n        'GROUP' => 'account'\n]);. awesome, thanks.\ncan you please update composer as well?\nthanks . ",
    "jimdobjoern": "Same problem here. Try to do:\nWHERE user LIKE '\" . $user->email . \"' AND public = '1'\nThat one does not work:\n[ 'AND' => [ 'LIKE' => [ 'user' => $user->email ], 'public' => 1]]\n\nWhy is 'LIKE' not implemented like < or > ?\n'user[LIKE]' => $user->email \ncomparing to\n\"user_id[>]\" => 200\n. Nothing new in here? I'm asking because this issue is the reason why I can't use Medoo.\n. +1\n. ",
    "KKIRANGIT": "Thankyou. I also made same mistake..\n. ",
    "aequasi": "\nFor some projects, especially for open-source which using Medoo as database framework, it will be nice to use the minimized version to decrease the whole project size\n\nProject size is hardly an important factor these days. You are one of a VERY small handful of developers doing this for PHP applications.\n\nAnd it will be better for some teams or company to focus the usage of the Medoo not the source code itself. And more...\n\nThis code should be in a vendor directory with other third party libraries anyways, so again, not really a job for minification.\n. Seriously. Take some of the comments you are seeing here, and on reddit, and improve this. It has potential.\n. Bump.\n. Its still being minified\n. http://medoo.in/download\n. No links to minification on the main page, or in source control. Closing this issue\n. ",
    "born-kes": "echo $database->last_query(); // ??\n. ",
    "Snoop": "ah I see, thanks for fast answer \n. ",
    "feelsickened": "*bump...\n. I am relying on database->count to check afterwards that the appropriate rows/columns were updated or inserted. Which solves all my problems (except my wife).\nThe error checking routine is practically useless (I have not checked the latest version of medoo for changes/updates though).\n. This is the same as my issue which hasn't been responded to: https://github.com/catfan/Medoo/issues/151\nIf database->error() is called and everything went well - response is essentially/loosely null.\nif database->error() is called and there was an issue - the response details the problem.\n...and then for the next database->error() call even if everything went well - the response of the previous problem remains. \nThis is causing me major headaches as you can't use the error call to validate that updates/inserts have worked.\n. Hiroko103 is spot on - The direct initialisation feature has been removed, and will cause issues such as: Fatal error: Call to a member function quote() on a non-object in /home/.../assets/medoo.php on line 188\nI just upgraded from VERSION 0.9.6.2 to VERSION 1.0 and encountered the above error, but initialising when creating a new medoo solved the error.\nSorry to complain, but I prefer direct initialisation, and REQUEST it's return if possible.\nAs a result of it being removed I have to add $database = new medo (all my database details...) to many many cron jobs. Additionally I much prefer to have the details of my SQL database secure in one file (i.e medoo.php) not many files. Just doesn't seem secure/smart.\nps catfan - i love medoo - you've saved me millions of hours. \n. ",
    "stephenharris": "@feelsickened I've encountered this same problem. Any advice you can give on how to work around this?\n. In case it helps anyone, I found using PDO's exception throwing to be be the simplest solution. medoo allows you to pass options to the underlying PDO instance in its constructor, so you can enable exceptions as follows:\n$medoo = new \\medoo(array(\n    'database_type' => 'mysql',\n    'server'        => $settings['mysql-host'],\n    'username'      => $settings['mysql-username'],\n    'password'      => $settings['mysql-password'],\n    'charset'       => $settings['mysql-charset'],\n    'option'        => array(\n        \\PDO::ATTR_ERRMODE => \\PDO::ERRMODE_EXCEPTION\n    )\n));\nThen wrap all your database queries in try/catch blocks to handle any errors.\n. ",
    "imageslr": "stephenharris actually helps me\uff01. Thanks, I have solved this problem by using quote() to build a sql string.. ",
    "Jervelund": "Depending on how the primary key is composed, I don't think it can be done consistently in an easy way:\nhttp://stackoverflow.com/questions/7187690/mysqlphp-getting-last-id-of-multiple-composite-primary-key\n. Can you use $dbh->error() ?\nhttp://medoo.in/api/error\nThis should do the trick:\nif($dbh->error()[1])\n  die('database error');\n. If you are using medoo->select you can use count to check the size of the returned array: http://php.net/manual/en/function.count.php\n. Did you read the chapter on Table Joining under Select in the documentation?\nhttp://medoo.in/api/select\n. Could you join it as the following? \n$datas = $database->select(\"ID_Links_Tags\", [\n    \"[><]Tags\" => ...,\n    \"[><]Links\" => ...\n], [\n    \"Links.link\",\n], [\n    \"Tags.tag\"=>\"NodeJS\"\n]);\n. From: http://medoo.in/api/update\nYou should only use the two dimensional array structure for the $where parameter. The $data should just be kept as a single dimensional array: \n$medoo->update(TABLE::REG, [KEY::REG_STATUS => \"D\", \"#\".KEY::REG_DATE_MODIFIED => \"NOW()\"], [\"AND\" => [KEY::REG_EMAIL => $email, KEY::REG_STATUS => \"A\"]]);\n. Provide some code or explain in more detail - stackoverflow is also good for general questions\n. What are you trying to match?\n((columns and keywords) or link)\nor\n(columns or keywords or link)\n. What are the values of your variables?\nYou could try to look at your data, to see if it matches your schema, by using:\nvar_dump([\n    'cn' => $cn,\n    'lname' => $lname,\n    'fname' => $fname,\n    'mname' => $mname,\n    'gender' => $gender,\n    'course' => $course,\n    'bdate' => $bdate,\n    'bplace' => $bplace,\n    'ctizen' => $ctizen,\n    'eadd' => $eadd,\n    'pschool' => $pschool,\n    'ischool' => $ischool,\n    'sschool' => $sschool,\n    'addr' => $addr,\n    'fatname' => $fatname,\n    'motname' => $motname,\n    'yenroll' => $yenroll,\n    'stat' => $stat\n]);\n. ",
    "vanjor": "Thanks,\nfor API insert, some concerns the insert item key id,  while some others concerns the insert execute successfully.\nAs it to me, I think checking insert  execute successfully is more important as a fundamental require for db persistence API. \nTo solve this problem, My way is add a new method: (which only copy insert() and change two lines )\n```\npublic function insert_with_status_check($table, $datas)\n{\n    $lastId = array();\n// Check indexed or associative array\nif (!isset($datas[0]))\n{\n    $datas = array($datas);\n}\n\nforeach ($datas as $data)\n{\n    $keys = array_keys($data);\n    $values = array();\n    $columns = array();\n\n    foreach ($data as $key => $value)\n    {\n        array_push($columns, $this->column_quote($key));\n\n        switch (gettype($value))\n        {\n            case 'NULL':\n                $values[] = 'NULL';\n                break;\n\n            case 'array':\n                preg_match(\"/\\(JSON\\)\\s*([\\w]+)/i\", $key, $column_match);\n\n                if (isset($column_match[0]))\n                {\n                    $values[] = $this->quote(json_encode($value));\n                }\n                else\n                {\n                    $values[] = $this->quote(serialize($value));\n                }\n                break;\n\n            case 'boolean':\n                $values[] = ($value ? '1' : '0');\n                break;\n\n            case 'integer':\n            case 'double':\n            case 'string':\n                $values[] = $this->fn_quote($key, $value);\n                break;\n        }\n    }\n\n                // return effect records\n    $rs = $this->exec('INSERT INTO \"' . $table . '\" (' . implode(', ', $columns) . ') VALUES (' . implode($values, ', ') . ')');\n\n    $lastId[] = $rs;\n}\n\nreturn count($lastId) > 1 ? $lastId : $lastId[ 0 ];\n\n}\n```\n. ",
    "pwwang": "And also:\nphp\n[\n  'col[~-]' => ['a', 'b']\n];\n// WHERE `col` LIKE '%a%' OR `col` LIKE '%b%'\nphp\n[\n  'col[~+]' => ['a', 'b']\n];\n// WHERE `col` LIKE '%a%' AND `col` LIKE '%b%'\nphp\n[\n  'OR' =>\n [\n   'col1' => 10,\n   'col2[~%+]' => ['a', 'b']\n ]\n];\n// WHERE `col1` = 10 OR (`col2` LIKE 'a%' AND `col2` LIKE 'b%');\n. I encountered the same issue.\nJust post here for someone in need.\nThis happens mostly because you didn't pass the right $options to the constructor. In most case, it's NULL if you didn't check it carefully.\nIn my case, I actually define the $options outside a function, and use global keyword to bring it to the function. However,it's not expected; it's NULL.\nhttp://stackoverflow.com/questions/4074815/why-global-is-null-in-function\nThe reason why it reports 'Undefined property: medoo::$pdo' is because when $options is not an array, the constructor will return false medoo.php:L57 and the follow PDO initialization is not called.\nPS:\nThis is the case that why global a variable returns NULL:\n``` php\n<?php\nfunc ();\n$a = [1,2,3];\nfunction func () {\n    global $a;\n    print_r($a);\n}\n?>\n```\nNotice that $a should be defined before the function called, in this case, before func() ;\n@catfan I think we should add some warnings there in case a NULL $options is passed to the constructor, otherwise, it will lead people to the PDO issue.\n. @hooray Here is the translation:\nHe wishes to add a function find_in_set, which is frequently used in database design and will be useful. Some examples (in Chinese): http://www.xujiantao.com/archives/221\n. You have to use 'utf8' instead of 'utf-8' in mysql.\nhttp://dev.mysql.com/doc/refman/5.7/en/charset-unicode.html\n. @SyuTingSong \nYou are right, as you can see code, if you don't set charset in the constructor, it won't be executed.\nSo you yourself have to set the right charset for the database you chose.\nBut as shown in the doc, the example is for mysql, so charset 'utf8' is exactly the right one.\n. ",
    "cosiner": "ok, i understand.\n. ",
    "roshinc": "Update and insert returns the number of rows affected, that means on failure it would return 0. Don't really see a need for a -1 return value.\n. In your question you seem to put $sentimentvalue in quotes. ($sentimentvalue='' (not 0)) try setting the variable as $sentimentvalue= 5 with out the quotes\n. ",
    "DEK4": "But it return 0 also if there is no update on the row...and in this way I don't know if there is an error or not\n. ",
    "pixelpaulaus": "i have been noticing that the returned insertid is sometimes returned even tho a record is not there when i check my database table. and no error is returned either. Makes it very anoying, as only way to check if it REALLY was inserted is to query the table after the insert.\n. ",
    "lfxc": "i have noticed the same.   insert is not capturing errors.  In my case the error that was supposed to have been captured is a foreign key constraint being violated\n. I found out why it wasn't throwing an error for me.  You have to do the following after creating you medoo db object in order for insert errors to be thrown:\n$db->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n. perfect!  thanks\n. ",
    "Fixazo": "Hello,\nI'm having the same issue!\nI would really like to know if you found an answer or a solution to that problem, or if a fix is coming soon\n(by the way, if you read me, thanks catfan for your awesome work on medoo :) )\n. I just saw that we can execute entire queries with the query() function. It solved everything for special cases like this one.\n. I just saw that we can execute entire queries with the query() function. It solved everything for special cases like this one.\n. ",
    "marcusirgens": "I'm not sure exactly what you need. If you want to get a list of all your SQL statements, you can use the changes in d8e1d382afec0f1a4a5466375ea3c686b6462f82. Just do medoo->all_queries() and you'll get an array.\nIf you want to attach a monolog handler you can try this: 53e544b327962242130b7c585ff8ab33ef1ca228. I'm using this in my applications, just do medoo->add_logger($handler) and it should be up and running.\n. Awesome, thanks. What I'd really love to see, though, is something like in my second commit - adding proper support for the most popular logging frameworks. Of course I can just copy over the $database->log() in the end, but that won't work if something goes wrong (which is why I want to log stuff, anyways). I can log statements everytime I run one, of course, (that'll put them in the right position in the log as well, handy), but that requires more lines of code. Medoo makes my code considerably cleaner, and it would be awesome to clean it even more by automating the logging.\nBeing able to configure a logger on construct would be the top item on my wish list.\n. I'm also looking for a solution for this issue. Could be solved like the way medoo uses column aliases at the moment.\n. Thanks!\n. ",
    "the-foreigner": "Excellent. This is exactly what I'm looking for.\n. ",
    "Michbeckable": "A workaround is to use the query function provided by medoo. I gave an answer on this on stackoverflow: http://stackoverflow.com/questions/26135002/medoo-php-framework-select-left-join-using-and-to-test-against-a-conditi\n. ",
    "callumb": "I would like to know as well. thanks!\n. ",
    "SyuTingSong": "235 provides a non-official implement or just call\n$medoo->query('SELECT DISTINCT \"name\" FROM \"table\"');\n. I like this feature.\nI am thinking about if I provide code $medoo->distinct()->count('account', 'age'), what SQL should be generated.\nSELECT DISTINCT COUNT(\"age\") FROM \"account\"\nor\nSELECT COUNT(DISTINCT \"age\") FROM \"account\"\n. @Sebb767 I merged @sargunster's work to my fork. And I implement auto-reset and SELECT COUNT(DISTINCT \"age\") FROM \"account\" additionally.\nI guess distinct($column) is inconsistent with medoo's column function way (e.g. COUNT, MAX, MIN, AVG...). The distinct method is more likely a decorator.\nYou can review my code in commit b7eea7ef6f223da800e52198a1098cdf4f21e036 . Since my fork has merged some others' pull-requests which catfan ignored. I won't create new pull-request here.\nFeel free to use and discuss my code.\n. @chenbaicheng The CREATE TABLE statement cause an implicit commit, as if you had done a COMMIT before executing it.\nhttps://dev.mysql.com/doc/refman/5.7/en/implicit-commit.html\n. #318\n. Why don't you just query twice and merge two result arrays in PHP?\n. SQL is a database language, providing many syntaxes to fit many different cases. Medoo is only a simple lightweight library to generate some common SQL queries and adapt different RDBMS. I guess the reason we love it is its simple and easy to use.\nComplex queries such as sub-clauses, union, procedures and triggers cannot be described gracefully in medoo's way. Using $medoo->query($sql) for complex cases should be a better solution.\n. Now, $medoo->select method receives 4 parameters is complex enough.\nAlso you are not a contributor, you tell them what you are expecting for, I tell them what I am worry about.\n. What error?\n. Cannot represent the issue you got. Print the call stack would help.\n. Agree. Can add an option for strict mode or compatible mode.\n. I love objects too.\n. I don't think change FETCH_ASSOC to FETCH_OBJ directly is a good idea. Because that would lose so much compatibility. And for different table I'd like to fetch different class instance.\nI opened a pull request  #313 to present another implementation.\n. The filed author was not used in your PHP code. Maybe the error caused by other query.\nPlease add debug method $this->db->debug()->select(... to print the SQL code generated by Medoo to debug.\nBTW, you can use Markdown 4-space-indent  to present code block.\n. I got the same issue. I fixed this bug and create pull-request #316.\nSorry for pushing many times. I split different features into different branches and submit the pull-requests separately.\n\u6211\u9047\u5230\u540c\u6837\u7684\u95ee\u9898\uff0c\u5df2\u7ecf\u4fee\u590d\u4e86\u5e76\u63d0\u4ea4\u5408\u5e76\u8bf7\u6c42 #316 \u3002\n\u62b1\u6b49push\u4e86\u597d\u51e0\u6b21\uff0c\u56e0\u4e3a\u60f3\u628a\u4e0d\u540c\u7684\u529f\u80fd\u5206\u5272\u5230\u4e0d\u540c\u7684\u5206\u652f\u4e0a\u5206\u522b\u63d0\u4ea4pull-request\u7ed9\u9879\u76ee\u7ec4\u3002\n. wrong commit message format\ndrop pull request.\n. You can see the implementation of medoo::query() at here\nAn instance of PDOStatement would be returned.\nAccording to the manual, you can just pass PDO::FETCH_ASSOC to the fetchAll function so you get the associated array.\nOr you can pass PDO::FETCH_NUM to the fetchAll function to get the indexed array.\n. Notice that medoo run SET SQL_MODE=ANSI_QUOTES while initializing. Source Code Line 94\nIt makes double quotes work for MySQL.\nYou may probably show your PHP code and the SQL it generates and the error messages if there is any.\n. REPLACE INTO doesn't work fine with the foreign key constrains since it removes the row with duplicate key and insert new. I've moved to INSERT ... ON DUPLICATE KEY UPDATE syntax in MySQL. Poorly such syntax is supported only by MySQL.\n. It's a MySQL syntax, not supported by other DB. Medoo haven't provide a method to do that, you can call $medoo->query($sql) or $medoo->exec($sql) to run SQL directly.\n. You sql will NOT be executed but only print if you call debug().\nsee https://github.com/catfan/Medoo/blob/master/medoo.php#L162\n. Thank you @glenndavey83 I found this issue when I am writing test-cases for Medoo. I will merge your code to my fork and test it.\nTo @catfan: I read some docs for MySQL, PostgreSQL, MS SQL Server, Oracle, SQLite and Sybase. The syntax [cbr]at for matching cat, bat, rat is originally supported by MS SQL Server only. And it supports [^cbr]at for matching any 3-letters word end with at and not beginning with c, b or r.\nMedoo should either update the documentation or implement this in PHP.\n. When the $data argument includes multi rows, an array contains each inserted row id will be returned. end($lastId) gets the last element of the array and it is incorrect.\nThe numeric string comes from the return value of PDO::lastInsertId(). Type-casting by force may lose precision if the underlying database use very large int as auto-increment id.\n. Medoo executes SET NAMES 'utf8' while initializing mariadb, mysql, pgsql, sybase and mssql.[code]\nThe usage of charset in dsn only with oracle.[code]\nAnd as @pwwang said, 'utf8' is the valid charset name in MySQL.\n. The charset name of UTF-8 is also 'UTF8' or 'utf8' in PostgreSQL, Sybase.\nAnd I just found that MS SQL Server NOT supports UTF-8 before ver 2012. Orz\n. You are mix-using SPACE and TAB for indentation while medoo using TAB.\nPDO::ERRMODE_EXCEPTION is not enabled in medoo, so query SELECT 1 will never throw any PDOException.\nYou havn't checked if $this->pdo is null before query in isAlive. I think the method close and the destructor are not necessary.\n. What I am interested in is auto-reconnect based on underlying database type. SQLite is obviously no need to check & reconnect. I am not sure if the losing connection issue would happen when connecting via unix-sock.\nSince the cost of checking connectivity before each query is a little large and the benefits are unclear. An explicit method is_alive for checking such status manually is acceptable.\nHow do you check connectivity in your practice?\n. Checking when timeout sounds like a good solution for auto-reconnect.\nHow about this:\nExtract the code of initializing pdo into a standalone method like get_pdo() from medoo's constructor. So the real PDO instance will be created by the first time we actually using it. So is_alive method is no need. And get_pdo can implement timestamp recording and connectivity checking itself.\nFor compatibility, we can implement the PHP magic method __get so everyone can still use $medoo->pdo to access the pdo object in original way.\n. One more little issue: medoo use pascal_name_style. You'd rather keep the same coding style.\nAbout the value of auto-reconnect timeout, I think a few seconds is long enough for web usage.\nFor the daemon or cron scripts, the time cost of check connectivity is less than 1% of running time is good enough.\n. Thanks for the performance testing.\nHowever, you do assignment instead of comparison on Line 21. Orz\nAnd the entire isAlive function can be reduced to\npublic function isAlive() {\n    try {\n        return $this->pdo instanceof PDO && @$this->pdo->query('SELECT 1') !== false;\n    } catch (PDOException $ex) { //if enabled PDO::ERRMODE_EXCEPTION\n        return false;\n    }\n}\n\nPDO::query() returns a PDOStatement object, or FALSE on failure.\n. It's not a big deal. I am being so mean today. My fish died this morning :(\n. I want to discuss more about this patch. In SQL LIKE, there are two wildcard characters % for many chars and _ for single char.\n\nIn the medoo's documentation Londo_ matches London, Londox, Londos doesn't clearly define the _ in medoo meaning many characters after the word or just single char after the word.\n@catfan can you explain this?\n. You should explain more about the priority of statement.\n. Medoo not implement the conjunction OR in join at present.\n. Seems useful.\nPHP\n$db->select('customer', '*', array('GROUP' => array('foreign1_id', 'foreign2_id' ,'foreign3_id')));\nCreates query\nSQL\nSELECT * FROM \"customer\" GROUP BY \"foreign1_id\", \"foreign2_id\", \"foreign3_id\"\n. @catfan what's require false in your fix code?\n. LIKE cause should receive string, not integer.\nPR #338 can cheat numeric value as string, so you can use it as auto type casting.\n. We may receive integer value from some API or whatever, then pass the variable to medoo. Keep LIKE accepts string only is okay for me.\n@Drive4ik you can pass variable to medoo as $medoo->select('table', '*', [ 'field[~]' => \"$integerValue\"]) for type-casting.\n. drop this PR cause LIKE condition should always be string\n. How to use?\n. It's dangerous that generates SQL without column name quote as below:\nsql\nSELECT \"user_name\" FROM \"account\" WHERE MONTH(reg_date) = '10'\nMedoo has already provided some useful column functions like count, max, min, sum, avg...\n. 1. Fixed the table prefix bug in JOIN\n2. Do not add WHERE when single condition is empty\n3. Add support for LIKE wildcard #323 \n4. Fixed the has() always return false bug #334 \n5. Fixed the integer LIKE condition bug #337 \n. I checked git commit log. It's a bugfix version. Changes I commented in #346 \n. What exactly $query->fetchColumn() returns in your test?\n. I searched about how PDO returns int or string. Some versions of mysqlnd compiled with PHP makes  PDO return original datatype as defined in db, others return string.\nThis is how issue #334 occurred. @catfan you should think about this PR or maybe you should use SELECT EXISTS( SELECT '1' FROM ... in the query.\n. ORDER should be the same level as OR in where clause.\nPHP\n$datas = $database->select(\"Board\",\"*\",[\n    \"OR\" => [\n        \"title[~]\" => $_GET['q'],\n        \"text[~]\" => $_GET['q']\n    ],\n    \"ORDER\" => \"id DESC\"\n]);\n. Medoo quote every value with PDO::quote\n. https://secure.php.net/manual/en/array.sorting.php\n. If you mean sort with database, check the ORDER condition in medoo doc.\n. Use AND to combine your conditions\n$database->select(\"marks\", \n    [\"Date\", \"Time\", \"LastEdit\", \"Subject\", \"Class\", \"Student\", \"Teacher\", \"Mark\", \"Info\"],\n    [\n        'AND' => [\n            \"Student[=]\" => 'da411d',\n             \"Subject[=]\" => 'it'\n        ]\n    ]\n);\nUse OR to combine your conditions\n$database->select(\"marks\", \n    [\"Date\", \"Time\", \"LastEdit\", \"Subject\", \"Class\", \"Student\", \"Teacher\", \"Mark\", \"Info\"],\n    [\n        'OR' => [\n            \"Student[=]\" => 'da411d',\n             \"Subject[=]\" => 'it'\n        ]\n    ]\n);\n. See the Chapter Relativity Condition in http://medoo.in/api/where\n. Are you using Oracle or MS SQL Server?\nBecause of most people use MySQL/SQLite/PostgreSQL with Medoo, no body write code for TOP at present.\nHere is the Oracle way to fetch first 10 rows in SQL\nSELECT * FROM user FETCH FIRST 10 ROWS ONLY;\nAnd the second 10 rows\nSELECT * FROM user OFFSET 10 ROWS FETCH NEXT 10 ROWS ONLY;\nI heard that Microsoft SQL Server supports this way since ver 2012.\nThe patch for oracle limit is in commit f9023a98c64\n. use $database->log() to fetch queried SQLs or use $database->debug()->select() to echo SQL without querying.\n. Need more info such as error call stack to debug\n. Please check the code in C:\\sutrsy\\medoo.php around line 156.\nThe 156th line of the official medoo.php file is if ($this->debug_mode), not calling function quote().\nMaybe some conflict occurred  when you upgrading medoo.\n. PDO not initialized.\nFind out the code you create the instance of medoo and make sure you pass the correct settings into constructor.\n. @cormiodo We all hope the new version of medoo be compatible with earlier one. However, the medoo is not perfect. Sometimes contributors have to lose some compatibility for new features and bugfixes.\nYou can check the commit logs and documentations to find out what changed and decide to upgrade or not.\n. There are several ways to resolve your problem.\nThe simplest way is just make the $database as a global variable. So you can only init it in a standalone script with your own options and include this script into others. Nothing change required if your use $database in global scope. Declare it as global variable if you use it in functions.\nThe other way is wrap the medoo object with a singleton factory class. If you hate the long static-method-call you can add a function to do this.\n``` PHP\nclass MedooFactory {\n    private static $db;\n    public static function getMedoo() {\n        if (!self::$db instanceof medoo) {\n            self::$db = new medoo(['option' => PDO::CASE_NATURAL]); // or any config you want\n        }\n        return self::$db;\n    }\n}\nfunction database() {\n      return MedooFactory::getMedoo();\n}\n```\nThen you can just use database() to replace the original $database in your code.\nPHP\n$result = database()->select($table, $columns, $where);\n. good idea\n. $medoo->insert() returns the id(s) of inserted record(s).\n. Yes\n. Here is the translate:\nHow to plus column values in medoo.\nFor example select a+b from cc\na and b are two fields in table cc\n. You cannot use the same key twice in PHP Associated-Array.\nTry this\n$db->debug()->select(\"tablename\", [ \"id\", \"status\" ], [\n         \"AND\" => [\n            \"status\" => [\"STATUS1\" , \"STATUS2\" ],\n            \"ID\" => \"7\"\n        ]\n    ]\n);\n. Seems like DNS hijack\n. Yes\n. what's ex?\n. ",
    "wangxiaolong100": "From v1.5 use\n$medoo->select('table', ['name' => Medoo::raw('DISTINCT(name)')]). ",
    "postunit": "I also encountered the same problem, I do not know the solution\n. ",
    "julienanquetil": "I initialize like that :\n$database = new medoo([\n    'database_type' => 'mysql',\n    'database_name' => 'mydatabase',\n    'server' => 'localhost',\n    'username' => 'root',\n    'password' => 'mypass',\n]);\neverything works except the notice for dsn variable and the \"invalid data source name\" display\nThanks\n. that's it ! it's still a medoo() somewhere in a \"test file\"... thanks !!\n. ",
    "cielblog": "Same issue, any help ?\n. ",
    "alexdemartos": "PD: If I remove the \"videos_metadata.removed\" => false clause, the query works as expected.\n. ",
    "kosgug": "I solved\n. ",
    "gantoday": "@catfan thanks!\nsorry,but i don't know how to compile the php_pdo_dblib driver for PHP and i google with no answer.could you give me some tips.\n. and my web server is centos\n. ",
    "semanino": "Proposed extended syntax for ORDER:\n$database->select(\"account\", [ \"group_id\", \"user_id\" ], [\n    \"ORDER\" => [\n        \"group_id\" => [4, 7, 0, 3, 17],\n        \"user_id\" => [43, 12, 57, 98, 144, 1]\n    ]\n]);\nExisting ASC and DESC can be supported likewise:\n$database->select(\"account\", [ \"group_id\", \"user_id\" ], [\n    \"ORDER\" => [\n        \"group_id\" => [4, 7, 0, 3, 17],\n        \"user_id\" => \"ASC\"\n    ]\n]);\nAnd mixed normal and extended syntax:\n$database->select(\"account\", [ \"group_id\", \"user_id\" ], [\n    \"ORDER\" => [\n        \"group_id\" => [4, 7, 0, 3, 17],\n        \"user_id ASC\"\n    ]\n]);\n. ",
    "carestad": "Maybe one could add support for using TOP(N) instead? I have done that in my forked version here: https://github.com/carestad/Medoo/commit/876df443b89e55d7a5748f1b721fa13e191fd8af\nThe implementation might not have been done right, and I'm not really a MSSQL guru, but it works for my use. Maybe just adding a support for TOP itself in the WHERE clause would be better.\n. Fixed it for get() too in latest commit: https://github.com/carestad/Medoo/commit/479fe6f997866ad3a94dc0a760e76a1c3d8c38e4\n. I am also seeing this now. Floating point numbers have their decimal separator converted from a dot to commas somewhere in the code.\nE.g. (from version 1.4.5):\n$medoo->debug()->insert('foo', ['number' => 5, 'float' => 5.5]);\nWill produce the following output:\nINSERT INTO \"foo\" (\"number\", \"float\") VALUES (5, 5,5)\nI should also add that the query is able to run and insert, but the actual decimal is droped. So the value in the database is just 5.\nIn version 1.2.1 however, this is handled differently and the output with ->debug() is:\nINSERT INTO \"foo\" (\"number\", \"float\") VALUES ('5', '5,5')\nThis is causing my insert to fail in 1.4.X versions of Medoo where I use floats. The error returned by ->error() is that the value count doesn't match the number of columns listed, which would be quite true considering the rewrite of 5.5 to 5,5 and unquoted will lead to just that.. After some research this seems to be related to locale settings. Setting the following in Medoo.php resolves the issue with floats:\nsetlocale(LC_NUMERIC, \"en_US.UTF-8\"). ",
    "zlababa": "thx :)\n. ",
    "cos800": "In MySQL GUI client running result is:\n\n. ",
    "misaf": "how can i use this on medoo class ?\n$database=new medoo(\n    [\n        'database_type'=>'mysql',\n        'database_name'=>DB_NAME,\n        'server'=>DB_HOST,\n        'username'=>DB_USER,\n        'password'=>DB_PASS,\n        // optional\n        'port'=>DB_PORT,\n        'charset'=>DB_CHARSET,\n        // driver_option for connection, read more from http://www.php.net/manual/en/pdo.setattribute.php\n        'option'=>[PDO::ATTR_CASE => PDO::CASE_NATURAL]\n    ]\n);\ni used above code for connecting...\n. i should replace this code with older section ?\nreplace above code wit this ?\n 'option'=>[PDO::ATTR_CASE => PDO::CASE_NATURAL]\n. ok, this means i should add below code on my file?\n'option' => [PDO::ATTR_CASE => PDO::CASE_NATURAL],\n'option' => [PDO::MYSQL_ATTR_USE_BUFFERED_QUERY => false]\n. ",
    "mrsoto": "Fix #191 & #192\n. Actually, group by only one column is a restriction, not a functionally.\nEl 28/03/2015 06:41, \"\u59da\u632f\" notifications@github.com escribi\u00f3:\n\nGROUP BY multiple columns is very useful.\nI usually use this way count data.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/catfan/Medoo/pull/190#issuecomment-87209919.\n. Pull request #190 is probably supported too.\nActually I moved to respect relational. This project look to be abandoned \n. As far as I understand you have to fork this repo because it only support\nowner projects' requirements\n\nEl dom., 30 de abr. de 2017 10:41, sebam91 notifications@github.com\nescribi\u00f3:\n\nIn version 1.2.1, multiple GROUP BY is still not working for me. Still\ngetting the following error:\nexpects parameter 2 to be string, array given\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/catfan/Medoo/issues/191#issuecomment-298233034, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AJ5pQco4GkqyDEmk_2BLb3-18IdnbceXks5r1I9rgaJpZM4DVyZK\n.\n. Medoo internally switch join/where\n. \n",
    "mynolix": "I am missing a function to get the columns of a table. Even if the table is empty!\nIt is possible to add this function?\n. ",
    "sebam91": "In version 1.2.1, multiple GROUP BY is still not working for me. Still getting the following error:\n\nexpects parameter 2 to be string, array given. \n",
    "fmieres": "+1\n. ",
    "germansokolov13": "It's possible to write a simple string to the columns parameter of the select function. But if I write sum or avg in there Medoo breaks it for some reason. No complicated query can be written with this library. I am so disappointed.. This is great news! I could also use query with full SQL statement but then I don't know how to pass an array of ids to the IN () expression of the WHERE sentence. Maybe I could work around this?. ",
    "3zzy": "+1 \n. +1. ",
    "filisko": "Adding NoSQL support will increase the amount of code significantly, instead use some of the following... NoSQL libraries\nCheers! :+1: \n. +1\n. can't you write in english? :S\n. ",
    "xuebingwang": "Thanks for all your help!\n. https://github.com/Wikunia/Medoo/commit/127fa545d7c88463da7ee004ac051d3592734814\n. ",
    "PiJoules": "M'kay\n. ",
    "alpipego": "at the moment if the value is a string it has to be quoted before passing it as a parameter.\n. ",
    "adminko-svk": "Its also working with the modifier [$] ?\n. $value is undefined\n. I found similar problem here https://github.com/catfan/Medoo/issues/167\nCan you please add the modifier [$] to the next release of Medoo?\n. Thanks, can you create stable version 1.4.6?. ",
    "TomMasson": "Hello everyone,\nI'm trying since hours to execute this request : \nSELECT \"*\" FROM \"left_table\"\nLEFT JOIN \"right_table\"\nON (\"left_table.id\" = \"right_table.id\" \n    AND \"right_table.number\"= 1\n    AND \"right_table.type\"=\"large\");\nMy problem is that I can't find a way to make work \"right_table.column\" = 1.\nHere is my code, I am on medoo-1.2.1 :\n$result = $database->select(\"left_table\", [\n    \"[>]right_table\" => [\n        \"id\" => \"id\",\n        \"right_table.number[$]\" => 1,\n        \"right_table.type\" => \"large\"\n    ]\n]);\nOr in another format here : $result = $database->select(\"left_table\", [\n    \"[>]right_table\" => [\n        \"id\" => \"id\",\n        \"right_table.number[$]\" => 1,\n        \"right_table.type\" => \"large\"\n    ]\n]);\nLooks like \"right_table.column[$] = value\" does not work because the error message is \"Unknown column 'left_table.1' in 'on clause'\" (or maybe I am using it wrong? )\nIs it possible to do what am I trying ? I really would like to avoid using the query method of medoo.\nThanks by advance !. ",
    "VeeeneX": "I think It's not possible in this version, I had had the same problem\n. :+1:\n. It's not really safe and it can lead into future problems.\n. https://r.je/static-methods-bad-practice.html\n. Yes, this is the common problem but it can be easily fixed with DI (Dependency Injection), your DB will be defined as shared so whatever object you create with dependency DB, your previously created instance of medoo will be included. I recommend Auryn DI\n. @b3bb0 Why Singleton pattern? - It's anti-pattern\n. @b3bb0 Maybe you can use simple service locator like this: http://twittee.org/\n. Yes, It's possible\n. php\n$sql->select('table', \"*\", [ // Missing \"\n'AND' => [\n'c1' => 1,\n'c2[!]' => 2,\n'c3[>]' => 0\n],\n'LIMIT'=> [0, 20],\n'ORDER' => ['c4 DESC']\n]);\n. ",
    "alexantr": "Maybe quotes around tablename in final SQL-query do not working on that server?\nsql\nINSERT INTO \"sometable\" VALUES ()\n. ",
    "whatacold": "you could print out the final medoo-constructed sql like this:\n$profile = $DB->insert('profile', ...);\necho $DB->last_query();\nthen you should find out what's wrong in the sql statement, and so the insert array.\n. ",
    "manulaiko": "Did you tried printing the error?\nvar_dump($DB->error());\n. @ikandars The idea is nice if you suppose that the script is the only thing that interacts with the server. If there's any other thing that can change the database the returned values might be outdated.\nLet me explain this, I'm working on a browser game that has 2 fundamental parts: The website and the Server.\nBoth of them interacts with the database, if the cached query result in medoo is the same the returned value wouldn't change when the server updates the database.\nA possible fix for this is to store in the cache array a parameter that indicates when to update the result, something like this:\n```\npublic function query($query)\n{\n    $timestamp = time();\n    $expire = $timestamp + (5 * 1000 * 60); //The timestamp when we should renew the cached query (5 minutes, I'm bad at math so it might be wrong)\n$key = md5($query);\n\n//Check if the query isn't already in the cache\nif(!isset($this->cache[$key])) {\n    //Add a new index to the cache array\n    $this->cache[$key] = [\n        \"expire\" => $expire,\n        \"query\"  => $this->pdo->query($query)\n    ];\n    return $this->cache[$key][\"query\"];\n}\n\n//Check if the cached query has expired\nif($timestamp >= $this->cache[$key][\"expire\"]) {\n    //update the query\n    $this->cache[$key][\"expire\"] = $expire;\n    $this->cache[$key][\"query\"]  = $this->pdo->query($query);\n}\n\nreturn $this->cache[$key][\"query\"];\n\n}\n```\nThat might provide a simple fix to the problem of multiple programs accessing same database.\nSee you!\n. I didn't test it but it might work, bassically you can treat value as a boolean and then parse it to int, something like this:\n$this->db->update($this->table, [\n    'show' => (int)!$value,\n], [\n    'id' => $id\n]);\nLet me know if it worked :)\n. What about debuggin?\nTry this and post the results:\n```\npublic function addReferenceProject($getProjectName, $getProjectShortDescription, $getProjectURL, $getProjectMainImageFilename, $getProjectPreviewImageFilename) {\n$autoIncrementReferenceProject = self::getAutoIncrementOfTable(self::REFERENCE_PROJECT_TABLE);\n\n$referenceProjectInsert = $this->database->insert(self::REFERENCE_PROJECT_TABLE, [\n    \"reference-project-id\" => $autoIncrementReferenceProject,\n    \"project-name\" => $getProjectName,\n    \"project-short-description\" => $getProjectShortDescription,\n    \"project-url\" => $getProjectURL,\n    \"project-main-image-file-name\" => $getProjectMainImageFilename,\n    \"project-preview-image-file-name\" => $getProjectPreviewImageFilename\n]);\n\ndie(\"referenceProjectInsert: \". var_dump($referenceProjectInsert .\"<br/>Error: \". var_dump($this->database->error()));\n\n}\n```\n. Have you got enabled PDO extension?\n. ",
    "chaegumi": "no,i didn't.\nps:\n``` php\n$this->query('select * from table1 where filed=\"' . $val . '\"')->fetch(PDO::FETCH_ASSOC);    // is error\n$this->query(\"select * from table1 where field='\"  . $val . \"'\")->fetch(PDO::FETCH_ASSOC); // is correct  \n```\n. ",
    "b3bb0": "What about use a static call to do this?\nLeaving the __construct as is, but simply adding:\n\n    private static $_self = null;\n    /**\n     * @return medoo\n     */\n    public static function single($options = null) {\n        if(self::$_self == null) {\n            $class = get_called_class();\n            self::$_self = new $class($options);\n        }\n        return self::$_self;\n    }\n\nThis is what I'm actually using... often I simply call the $db = new Medoo($conf), but in some cases where I need it... I call $db = Medoo::single($conf)  \nsingle stand for \"single instance\"... in my head :+1: \n. @VeeeneX  ...I'm not native English speaker, so I had to look up the meaning of anti-pattern:\nAccording to the authors of Design Patterns, there must be at least two key elements present to formally distinguish an actual anti-pattern from a simple bad habit, bad practice, or bad idea:\n-    A commonly used process, structure or pattern of action that despite initially appearing to be an appropriate and effective response to a problem, typically has more bad consequences than beneficial results, and\n-    A good alternative solution exists that is documented, repeatable and proven to be effective.\nWhat's a good alternative to avoid several connections to the database when called medoo from different places/classes, but all in the \"same\" execution?\n. I personally don't think the use of something like Auryn fix the \"issue\"... I'm using medoo to have something super light and useful... in a small project, Auryn code is almost more lines then the whole project I'm doing, the \"evil\" singleton fixed my approach... and I'll stick to it, for this case :)\n. ",
    "rkkoszewski": "Any news about this? I'm in the same situation.. ",
    "mengdodo": "wtf,when i use left join to select infomations, this issues make me wrong!. ",
    "FileMana": "how??? my codes do not work...\n. yea, i tried that as well... The quote was missing when i copy it over.\nlast_query() on your select statement doesnt show the LIMIT part\nSELECT * FROM \"table\" WHERE \"c1\" = 1 AND \"c2\" != 0 AND \"c3\" > 0 ORDER BY \"c4\" DESC\n. ",
    "AdrianVerde": "Yeah, and/or using case insensitive collaton in the database, already did, thanks.\n. ",
    "4t0m1k": "There is a problem with the fix https://github.com/catfan/Medoo/commit/76574afc684ea95a7e8c101aef4d1e126e73e76c\nThe regexp won't match single 'OR' or single 'AND' (without ' #...' after), so a query like this won't work :\nif ($database->has(\"account\", [\n    \"AND\" => [\n        \"OR\" => [\n            \"user_name\" => \"foo\",\n            \"email\" => \"foo\"\n        ],\n        \"password\" => \"12345\"\n    ]\n]))\nbecause of imbricated AND/OR.\nHere's a better fix :\n/^(AND|OR)(\\s+#.*)?$/i\n. ",
    "annoyingmouse": "Ahh, okay. Thank you anyway - I did think that might be the case but wanted to check I wasn't being dense! Thank you.\n. ",
    "JBlond": ":+1:\n. ",
    "Sebb767": ":+1:\nYou should reset distinct mode after executing a query, however.\n. @SyuTingSong it should be SELECT DISTINCT... since no specific column is given. An overload like $medoo->distinct('age')->... for specifying a specific the distinct column(s) would be great.\n. Indeed, 4 lines are using spaces. In case you're interested, I could patch the isAlive() in another PR.\n. Depends on my environment. Laravel crons usually just reconnect at the beginning. If I'm not with Eloquent I usually check it in this way. Once I forgot about it in a long running cron, was fun :p \nThe isAlive is indeed intended for manual checking only if the connection is given at the beginning of a cron or if your script some work without using the link. I'll do some testing how to realize it without exceptions. \nA reconnect method would require to save the connection parameters, but I guess this isn't a problem. I'll take care of it and submit a PR later.\nEDIT: If you want to auto-reconnect, an option would be to save the last querys timestamp and check the connection if the last query is >=150 sec. or so ago.\n. I created a PR (#327) for isAlive() anyway since this function could be pretty useful sometimes (see below). \nI will further develop the auto reconnect later on, but finding the correct timeout may prove difficult since it's different for each DB and setup. My proposal would be to use a default timeout (60s should be above most standards, but it's also long enough that 0,1s for checking the connection shouldn't be a problem), which can be also given via the ctor. If the last query/the object creation was longer ago than $timeout, the connection is checked via isAlive() (which issues a query and therefore resets the timeout) and renewed if required.\nAnother way would be to check via selecting db variables in the ctor, but that would require work for each db and may prove difficult if you're running a lower rights db account. \nBy the way, we shouldn't skip sqlite in the check since the connection may break if the filesystem is remounted for example. Rare case maybe, but if your file in on an external drive and your PC goes into standby (maybe it's a laptop or you didn't move your mouse while waiting for the script to complete) the remount should break the connection.\n. Ok. I will commit this with the modified class ;)\n. I did some performance checks. You can find the script here. System was a Chromebook (4G ram, Haswell dual core, idle load) w/ a freshly installed mySQL and php 5.6.2.\nTimings where as following:\n```\nTesting time when connected ...\n0.72956898212433 ms alive\nConnected, sleeping\nTesting time when disconnected ...\n0.81278870105743 ms dead\n```\nI guess this is not a big performance impact, despite exceptions and error supressing.\n. Don't worry, I'd be sad if my fish died, too ._. I'm sorry for you.\nAnyway, using @ is a good idea, but the can't be this simple. I'm currently working onto implementing the auto-reconnect & since is_alive executes a query, we end up in an endless loop. I'm currently onto working it out in a clean way and will do a PR later on. \n. ",
    "HendrikD": ":+1:\n. ",
    "froozeify": ":thumbsup:\n. I've fixed this error by adding some comment just above the class. \nIt will be great to add it in the next release ?\n/**\n * Class Medoo\n * @package Medoo\n * @version 1.5.4\n * @link https://medoo.in\n *\n * @method int avg(String $table, Array|String $join, Array|String $column = null, Array $where = null) Get the average value for the column\n *\n * @method int count(String $table, Array|String $join, Array|String $column = null, Array $where = null) Counts the number of rows\n *\n * @method int max(String $table, Array|String $join, Array|String $column = null, Array $where = null) Get the maximum value for the column\n *\n * @method int min(String $table, Array|String $join, Array|String $column = null, Array $where = null) Get the minimum value for the column\n *\n * @method int sum(String $table, Array|String $join, Array|String $column = null, Array $where = null) Get the total value for the column\n */\nclass Medoo\n{\nBased on stackoverflow post and phpDocumentor. ",
    "JanWerder": "this would be great\n. ",
    "tjmckenzie": "Upvoted.\n. ",
    "nealoke": "+1. +1\n@catfan really appreciate this project and don't want to be pushy, but when do you think v1.5 will be put out? :). Thanks! I'll have a look at it as soon as I can :). Ooh waaw, I'm not sure how I missed this... Thanks for the input @turbopixel and @superdeeid . ",
    "quantuumsnot": "Where's the problem to use this:\n$tagString = substr($tag, 0, 1) . \"xx\";\n$db->insert($tagString, $cdata);\n. Nope ... just nope. The library continuously reports 'No such table' while it exists. Falling back to good old PDO prepared statements\n. ",
    "playgamelxh": "you should add a function. Such as\npublic function clear()\n    {\n        $this->logs = array();\n    }\n. ",
    "jens1o": "\ud83d\udc4d That's the only reason why I won't use this lib.^. thx!. ",
    "20perline": "you should use 'database_file' instead of 'database_name' for sqlite\n. ",
    "Drive4ik": "Hello! Very quickly fix! Thanks!\nWhat about replace double quote for sql column?\nsql\nSELECT \"preview_image\" FROM \"realty\" ...\nto\nsql\nSELECT `preview_image` FROM `realty` ...\n. Maybe, you misunderstood me.\nI use the power of Medoo to maximum, and i like it.\nThanks for explanation for SET SQL_MODE=ANSI_QUOTES, i see this code.\nSorry, my english is bad..\nRegards, @Drive4ik\n. Can you investigate this issue?. ",
    "Forsakenfx": "You said that ODBC is supported, but I went through commit history and have seen nothing that shows support for it or any documentation.. ",
    "shreyanshpanchal": "I don't think there's any other way to do this other than, executing raw query\nsee this: http://medoo.in/api/query\n. ",
    "ariefsam": "Because replace only work in MySQL\n. ",
    "valix85": "Sorry i found that problem is it php json_decode convert 8.33 into 8,33 but i don't understand it...\n{\"0\":{\"min\":1,\"max\":5,\"price\":10,\"rid\":12},\"1\":{\"min\":6,\"max\":50,\"price\":8.33,\"rid\":13}}\nafter json_decode it change into array:\nstdClass Object\n(\n    [0] => stdClass Object\n        (\n            [min] => 1\n            [max] => 5\n            [price] => 10\n            [rid] => 12\n        )\n[1] => stdClass Object\n    (\n        [min] => 6\n        [max] => 50\n        [price] => 8,33\n        [rid] => 13\n    )\n)\n. ",
    "isogram": "use query http://medoo.in/api/query\n. ",
    "coosir": "see https://github.com/catfan/Medoo/pull/260\n. ",
    "DanieleSassoli": "+1\n. ",
    "ikandars": "Yes this is possible.\n1. Add new static class property\nclass medoo {\nprivate static $cache = [];\n}\n1. Add view line of code in query method:\n```\npublic function query($query)\n    {\n        if ($this->debug_mode)\n        {\n            echo $query;\n        $this->debug_mode = false;\n\n        return false;\n    }\n\n    $cacheKey = md5($query);\n\n    if( isset(self::$cache[$cacheKey]) )\n        return self::$cache[$cacheKey];\n\n    array_push($this->logs, $query);\n\n    return self::$cache[$cacheKey] = $this->pdo->query($query);\n}\n\n```\nI can PR's for this issue. So what do you think @catfan?\n. Yes, your solution more simpler and sorry for not following the guideline.\n. ",
    "chenbaicheng": "i have problem on action()  if i use try catch in action()....like:\n$actionReturnValue = $pdo->action(function($pdo){\n                try{\n                                       $this->pdo->setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);\n                     $conditionCheck_1= $pdo->insert($this->table_name,$this->insertArray); \n                    if(!$conditionCheck_1){\n                        throw new PDOException('\u63d2\u5165\u6ce8\u518c\u7528\u6237\u6570\u636e\u5931\u8d25 \u6765\u81eauserRegisterViewModel');\n                    }\n                                       $conditionCheck1= $pdo->query('CREATE TABLE IF NOT EXISTS  table_name(); ');\n                    if(!$conditionCheck1){\n                        throw new PDOException($pdo->last_query());\n                    }\n                              }catch(PDOEXCEPTION $e){return false;} } \n);//end action()\nit can't   rollBack ......the insert date ,still  contain in dataTable....and  create table not rollback  ...how to deal with that problem  thank ^^\n. @SyuTingSong   thank\n. thanks @dfanica . @catfan   thanks  \uff0c i think  oracle is not friendly  to user  . ",
    "smartclash": "@catfan I think this issue should be reopened. SQL injections are the basic problems because a website gets hacked. Actually digging through the code, i found you are using PDO::quote(). It is good. But php recommends more.\nA per PHP website : \n\nIf you are using quote() to build SQL statements, you are strongly recommended to use PDO::prepare() to prepare SQL statements with bound parameters instead of using PDO::quote() to interpolate user input into an SQL statement. Prepared statements with bound parameters are not only more portable, more convenient, immune to SQL injection, but are often much faster to execute than interpolated queries, as both the server and client side can cache a compiled form of the query.\n\nFor more information, you can actually find relative links in google.\n* http://stackoverflow.com/questions/19817108/sanitising-user-input-with-medoo. @catfan Awesome. +1. And @catfan I really didn't want to create an issue. But there are some really too much of grammar mistakes in the documentation. I know that your main language is not English. But still, please take care of the grammar. In some places, we couldn't even understand what you are trying to say.\nIf possible, I will be happy to help you out. ",
    "2doous": "use medoo->query(create........);\n. ps. not support   , e.g  #count() \n. ",
    "joernroeder": "thanks for the infos guys! I'd recommend to clarify the docs in this case to prevent further noob issues.\n. ",
    "tablecell": "how about the syntax  'duetime|RAW' =>'DATE_ADD(NOW(),INTERVAL 1 MONTH)' ?\n``` A\n$database->update(\"account\", [\n    \"type\" => \"user\",\n    \"age|+\" => 1,\n// All level subtract 5\n\"level|-\" => 5,\n\n// All score multiplied by 2\n\"score|*\" => 2,\n\n// Like insert, you can assign the serialization\n\"lang\" => [\"en\", \"fr\", \"jp\", \"cn\", \"de\"],\n\n\"fav_lang|JSON\" => [\"en\", \"fr\", \"jp\", \"cn\", \"de\"],\n\n// You can also assign # for using SQL functions\n\"duetime|RAW\" => \"DATE_ADD(duetime,INTERVAL 1 MONTH)\"\n\n], [\n    \"user_id|<\" => 1000\n]);\n```\nmore clear and simple \n. ",
    "ekeyme": "@catfan Yeah,  you are right. I think you should know that $commands[] = 'SET SQL_MODE=ANSI_QUOTES' feature is only support mysql4+ version.  And you might willing to show medoo 0.9.8.3 requires mysql4+ too. thanks! \np.s Is there a version of medoo support mysql3? I have a wackward mysql3 on server of my company.\n. ",
    "alexroyce315": "I've got the same issue, the medoo generators sql like this\nSELECT * \nFROM \"tableName\" \nORDER BY \"addTime\" DESC \nLIMIT 0,10\n. I think maybe there is something wrong with using \" and '.\nSo, I made a copy by simlply replacing all \" to ' and using it in my website. If you do this, make sure that the field name should not be any keyword of database or sql or etc..\n. ",
    "Wenangsani": "thanks, :D\n. ",
    "thefangbear": "I see. Thank you.\n. ",
    "alijaffar": ":+1: \n. ",
    "mamarilmanson": "I was browsing the code and noticed there's just mysql... I'm mostly using mysqli because of news that mysql will be depreciated...\nI don't know if this question/request is necessary or am I not aware of what I just said above? :)\n. Even with the database that comes along with WAMP and XAMPP? :)\n. Thank you for the information... :D\n. Yes... Thank you... I apologize... :)\n. ",
    "LM1LC3N7": "With \nhttps://stackoverflow.com/questions/2630013/invalid-argument-supplied-for-foreach\nI suceed to avoid the warning. \nI just add \"(array)\" :\nforeach ((array) $items as $item) \n. ",
    "vlaw": "+1\n. ",
    "EvandroZanatta": ":+1: \n. ",
    "scarstens": "Because that would create 2 queries? That's not scalable. That seems like a silly answer. That's like asking why MySQL even bothered to build UNION queries.\n. I disagree, Unions are not complex, they are simple. Thats why I wrote \nUnions are pretty simple, SELECT union SELECT. Would it not be possible to union 2 Medoo queries fairly easily?\nAlso you are not a contributor, that I can tell, why don't you back off and let a contributor respond.\n. Lol what advantage is there of using medoo for this? lol. The whole point of medoo is to allow query generation though PHP OOP. Why can't you take \n$medoo_query_builder_1 and union $medoo_query_builder_2?. ",
    "siswadi": "$data = $database->query(\"--complex query--\")->fetchAll();\ncomplex query. ",
    "MrMarci666": "I'm facing the same problem, and I'm shocked guys. Medoo is a really great and lightweight query builder, but it's kinda sad, that I can't make a union query. I think calling union queries as \"complex queries\" is a little bit funny tho :). ",
    "omriamos": "Same problem here.\nI don't understand why on earth are you using the non-standard double quotes for identifiers, instead of \nbackticks.\nTHIS IS PLAIN WRONG.\nSetting SQL_MODE = ANSI_QUOTES is bad practice, and more important - on some server configurations simply doesn't work at all.\nI had to manually change some code in the medoo.php file (some 'x_quote' functions) in order to fix this, but I can't be sure I won't get side effects from this change...\n. why did you close this?\n. Just a quick update, I've found out why (at least in my case) it didn't work.\nThe SET SQL_MODE=ANSI_QUOTES query is running at the very beginning when the connection is made, but it's important to understand that this is a sessional variable.\nSometimes, a long-running PHP script can actually make the mysql connection timeout, so if the script try to run another query after it finishes with the long-running process - the mysql server will take this as a new session and the variable will be reset to default.\n. WHY DID YOU CLOSE THIS TOPIC (AGAIN), if the issue is still not fixed??\n\nKeep in mind that, this is only output for debugging the query. Medoo is actually using standard quote identifier for internal execution for all database.\n. It IS a bug, on a default server configuration, without explicitly adding SET SQL_MODE=ANSI_QUOTES to every session, MySQL will die with an error message:\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '\"User\"' at line 1. \n",
    "lxepoo": "thx ! \nfor closed\n. For a long time, I have forgotten why I asked.\nOK, I'm already open. Hah\n. The old version of the SQL statement generated must be combined with \"SET SQL_MODE=ANSI_QUOTES\", otherwise the error will be prompted, although this is compatible with SQL to Server and Mysql, but I still hope to get a better deal, such as the delimiter as variables? Different types of separators are then used to determine the different types of separators.\nI am a non English speaking country developer, which is translated by Google.\n. There is an end to the session, once the failure to open the correct \"SQL_MODE=ANSI_QUOTES SET\", it is likely to be wrong.\nRefer to my suggestion, judge the database type, and enforce the correct symbol.\n. ",
    "costafrancesco94": "Hi :) Sorry if I intromit... i'm starting using this library in some of my projects, and I incurred in the same error in quoting things in general... I debugged and corrected it for my use case and now the (not so many) query i need, works.\nI don't know about your best practice about suggest coding, if you want me to pull a request just tell me...\nI don't know if this modifications can be acceptable but i just replaced the \"column\" with the ` symbol (i cannot reproduce it in comments xD) in the place they fixed my queries.\nModifications in Version 1.2.1\nsrc.zip\n(Pay attention the attacched file have the debug parameter set to true, before you're going crazy...). ",
    "gradosevic": "It covers basic scenarios like in the request for #136 issue. It can be extended with more complex cases, we just need to define what are the scenarios that we expect. Do you have any? Thanks.\n. ",
    "ramiel": "Why was this closed? Is there a solution?. ",
    "mbecker-bemit": "I don't know, have build a wrapper class which extends medoo with things I need.\nCould be that truncate is not everywhere possible, etc. Haven't got many experiences beside MySQL.. I needed it because I generated the clause and making both possible [0] and 0 would make it easier to let everything be handled as an array and not only limits without any offset.. ",
    "laravelish": "same issue, @catfan  please help this issue was posted 22 days ago so i cant wait that long for an answers\n. yea pdo is enabled\n. i dont care anymore i switched to laravel\n. ",
    "satriyowibowo": "upgrade from v0.9.8.3 to v1.0\nand also have the same problem\n. ",
    "Hiroko103": "Notice that support for direct initialization has been removed in 1.0.\nIt means you cannot set the variables inside the medoo.php file.\nYou should pass the initial variables to the class constructor when creating a medoo instance.\nphp\n$database = new medoo([\n    'database_type' => 'mysql',\n    'database_name' => 'name',\n    'server' => 'localhost',\n    'username' => 'your_username',\n    'password' => 'your_password',\n    'charset' => 'utf8'\n]);\n. ",
    "snake302": "Opps, my mistake, I forgot about  meta charset=\"utf8\"\n. ",
    "Instagit": "Sorry, the main problem was a configuration error on my part, but the debug output with wrong quotes doesn't help :wink:\n. ",
    "heichel": "@Instagit Can you specify what your configuration error was? We currently get the same SQL error and don't find the problem.. ",
    "aidenko": "it would be super good\n. ",
    "xensor": "I got it to work. but can someone still explain to me how it works better. the docs isn't really friendly.\n. ",
    "munggruel": "\u4f7f\u7528\u8fde\u63a5\u7684\u65f6\u5019\u8868\u540d\u524d\u7f00\u52a0\u4e0d\u4e0a\n. foreach \u591a\u6b21 preg_match \u6027\u80fd\u4e0d\u592a\u597d\uff0c\u80fd\u5426\u6539\u8fdb\u4e00\u4e0b\n. \u6211\u7528 xhprof \u5206\u6790\u8fc7\uff0cMedoo \u9664\u4e86PDO\u8fde\u63a5 \u548c \u67e5\u8be2 \u5360\u4e86 20%\u65f6\u95f4\uff0cMeedo\u7c7b \u89e3\u6790 sql\u8bed\u53e5\u4e5f\u82b1\u4e86 20%\u65f6\u95f4\uff0c\u6709\u4e9b\u957f\n. \u9012\u5f52 \u5faa\u73af \u5d4c\u5957 \u591a\u91cd\u6b63\u5219\uff0c\u6240\u4ee5\u6027\u80fd\u4e0d\u884c\u554a\uff0c\u6c42\u9012\u5f52\u5c55\u5f00\uff0c\u8fd8\u6709\u8fd9\u4e2a\ncount(array_diff_key($value, array_keys(array_keys($value))))\uff0c\u6027\u80fd\u4e5f\u4e0d\u548b\u7684\n. \u5199\u6210  array_values($value) !== $value \u66ff\u6362 \n 0 !== count(array_diff_key($value, array_keys(array_keys($value))))\uff0c\n\u56e0\u4e3a ['0'=>0, '1'=>1] \u8fd9\u79cd\u60c5\u51b5\u5e76\u4e0d\u4f1a\u53d1\u751f\n. ",
    "yuandalu": "\u6211\u611f\u89c9\u5176\u5b9emedoo\u6ca1\u5fc5\u8981\u5427join\u67e5\u8be2\u4e5f\u653e\u5012\u6846\u67b6\u91cc\uff0c\u5176\u5b9e\u6d89\u53ca\u5230\u8fd9\u6837\u7684\u67e5\u8be2\uff0c\u76f4\u63a5\u81ea\u5df1\u5199\u539f\u751f\u7684sql\u66f4\u65b9\u4fbf\n. ",
    "vincent-guesnard": "In case you would like to use objects, here is the solution i use : $this->pdo->query($query, PDO::FETCH_CLASS, 'stdClass');\nBut, since Syu point compatibility problems, i'm not sure that it's the right way.\n. Admitting that your server is dealing with a high traffic, like 500 requests per second.\nThe internal mechanism of MySQL is to lock tables (MyISAM) or raws (InnoDB) when an insert/update request is fire, so no SELECT can be fired meanwhile.\nOn heavy loaded tables, that could make thousands of requests in a waiting state (and sometimes can cause MySQL crashes).\nTo avoid this fact, MySQL allow you to specify a priority on your request, then MySQL will choose the \"best\" (or \"less worst\") moment to fire your insert/update.\n(if you add this statement, here is another usefull one : SQL_NO_CACHE)\n. ",
    "haowran": "I have this problem too, my MySQL version is 5.5 :(\n. ",
    "jezmck": "Is there documentation on how to use that syntax with Medoo?\nOn 17 Nov 2015 4:53 am, \"SyuTingSong\" notifications@github.com wrote:\n\nREPLACE INTO doesn't work fine with the foreign key constrains since it\nremoves the row with duplicate key and insert new. I've moved to INSERT\n... ON DUPLICATE KEY UPDATE syntax in MySQL. Poorly such syntax is\nsupported only by MySQL.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/catfan/Medoo/issues/318#issuecomment-157267474.\n. \n",
    "abdullah353": "mysql> select count(*) from mo;\n+----------+\n| count(*) |\n+----------+\n|     5047 |\n+----------+\n1 row in set (0.00 sec)\nNow i want to run this query using meedo i tried this.\n$mo = $this->DB->debug()->count('mo');\n    var_dump($mo);\n    var_dump($this->DB->error());\nOutput is this\nSELECT COUNT(*) FROM \"mo\"\nbool(false) \narray(3) { [0]=> string(5) \"00000\" [1]=> NULL [2]=> NULL }\n. ",
    "gnarm": "My IDE throws a warning on that specific part whenever I try to upload to Git, consider using this alternative to achieve the same purpose:\ncase 'mariadb':\ncase 'mysql':\n    $type = 'mysql';\n. ",
    "glenndavey83": "I've added support for SQL LIKE Wildcards as a fix for this issue in my pull request #328. \n@catfan I think it's important to implement this fix sooner rather than later if the online documentation lists this as a feature. More testing and optimization may be done later for edge cases.\n. You're welcome, @catfan !\n@SyuTingSong this was clear to me as meaning \"wildcard\" just like the name implies: \"anything after this\", just like the % means in SQL. I'm not 100% sold on the % and _ suffixes/switches - because, as you state, they're kind of like SQL but not, and it could be confusing if you forget that Medoo is not SQL - but it's @catfan's framework, so it's his call. \n(I just made sure they work as the Documentation stated, because I had committed to Medoo for a project and I discovered too late that not all the features were implemented. It was quicker for me to fork and fix Medoo than to find and implement a new framework! Obviously my impression of the feature was correct as @catfan has merged my commit).\n. ",
    "zozowind": "when using enter mssql with freetds,  PDO::lastInsertId() [pdo.lastinsertid]: SQLSTATE[IM001]: Driver does not support this function: driver does not support lastInsertId()\nI add a try-catch\ntry {\n    $lastId[] = $this->pdo->lastInsertId();\n}catch (Exception $e){\n    return 0;\n}\n. ",
    "emanwebdev": "IMBRICATED QUERY is your solution\n. ",
    "Serg4554": "How can we do it with Medoo? Nothing about imbricated queries appears on the API\n. I \"solved\" it rigging the array to generate the correct query. That's the code:\nphp\n[ ..., \n '[>]table_3' => ['table_2.ID' => 'ID\" OR \"table_1\".\"ID\" = \"table_3\".\"ID']\nBut it is not the best solution. If anyone knows how to correctly generate that query, please let us know. Otherwise, please add this function.\nThanks!\n. Perfect. If you implement this function, let me know it to update the query.\n. ",
    "fly1ted": "\u4f60\u5c31\u50cf\u666e\u901a\u7684SQL\u6307\u4ee4\u4f7f\u7528\uff0c\u4f8b\u5982\uff1a\n$database->select(\"account\", \"user_name\", [\n    \"MONTH(reg_date)\" => \"10\"\n]);\n. You're right, what about that?\n. ",
    "snopboy": "Any input?\n@catfan \n@qatrix \n. @ScrewItFix You don't do that, you make an array of the information, then define a variable that will hold the database object and you put the settings array there. Then you simply pass that variable to other classes/functions. Or instead you could make an object registry which will simplify it even more.\n. ",
    "baschwartz": "$database = new medoo(); would throw an error if there's a problem with the database.\n. $quote->select('quote', [\n    '[>]users' => ['QuoteID' => 'UserID'],\n],[\n    'users.UserID', 'users.FName','users.LName', 'quote.JobTitle', 'quote.QuoteID', 'quote.Description'], \n],[\n    'OR' => ['Email' => 'email','Phone' => 'phone'],\n    'ORDER => ['quote.Create DESC']\n]);\n. ```\n$database->select(\"account\", \"user_name\", [\n    \"AND\" => [\n        \"user_name\" => \"foo\",\n        \"LIMIT\" => 10\n]);\n```\n. ",
    "renat2985": "@baschwartz, it is not suitable for me\n. ",
    "james090500": "@renat2985 Did you even find a suitable fix for this? . ",
    "iMohammadReza": "Thanks a lot.\nIt fixed but Does this code safe for SQL Injections?\n. Thanks for your help  and P.S...\nand sorry about that...\n. ",
    "da411d": "It is good but it would be great to sort output arrays in medoo)\n. Thanks\n. ",
    "metowolf": "I was oblivious of that, THK! : )\n. ",
    "chrisaybar": "I ran into the same problem, but came up with a quick solution for v1.0.2 while the developers find a neat way to add support for this.\nNote: this quick hack is only meant to get you through the problem if you're in a bind.\nStep 1, change line 595 to the following:\nBEFORE:\nphp\n    '\"' . (isset($match[ 5 ]) ? $match[ 5 ] : $match[ 3 ]) . '\".\"' . $value . '\"';\nAFTER:\nphp\n    ((substr($value, 0, 4) == '[SV]') ? substr($value, 4) : '`' . (isset($match[ 5 ]) ? $match[ 5 ] : $match[ 3 ]) . '`.`' . $value . '`');\nStep 2, add temporary support for denoting a static value by preceeding your join value with \"[SV]\". For example, in your table join, instead of using something like [ 'fieldName' => 'fieldValue' ] use this instead: \nphp\n[ 'fieldName' => '[SV]fieldValue' ]\nHope this helps.\n. ",
    "cormiodo": "This is the call:\nrequire_once 'medoo.php';\n$dbstart = new medoo();\n$sitoattivo = $dbstart->get(\"ta_comodo\", \"valore1\", [\"suffisso\" => \"attivo\"]);\nFatal error: Call to a member function quote() on a non-object in C:\\sutrsy\\medoo.php on line 156\nCall Stack\n1   0.0013  274928  {main}( )   ..\\index.php:0\n2   0.0213  753832  medoo->get( )   ..\\index.php:12\n3   0.0213  754416  medoo->select_context( )    ..\\medoo.php:669\n4   0.0214  755376  medoo->where_clause( )  ..\\medoo.php:533\n5   0.0215  756824  medoo->data_implode( )  ..\\medoo.php:349\n6   0.0215  758440  medoo->fn_quote( )  ..\\medoo.php:326\n7   0.0215  758488  medoo->quote( ) ..\\medoo.php:210\nI hope that this is what you need. Many thanks.\n. You're right! I have deleted some white rows to make it equal to the old one.\nThis is the result using the original:\nFatal error: Call to a member function quote() on a non-object in C:\\sutrsy\\medoo.php on line 188\nCall Stack\n1   0.0009  275536  {main}( )   ..\\index.php:0\n2   0.0135  754480  medoo->get( )   ..\\index.php:12\n3   0.0135  755064  medoo->select_context( )    ..\\medoo.php:829\n4   0.0135  756016  medoo->where_clause( )  ..\\medoo.php:668\n5   0.0136  757464  medoo->data_implode( )  ..\\medoo.php:430\n6   0.0136  759080  medoo->fn_quote( )  ..\\medoo.php:404\n7   0.0136  759128  medoo->quote( ) ..\\medoo.php:257\n. Dear SyuTingSong,\nI know what mean the error but I don't understand what I must change. I don't have changed anything on my scripts, I have only updated the medoo.php script. With the previous script my app run without problem then, I think, YOU have changed something and I need know what I must change. Many thanks.\n. Ok, I find the solution.\nBefore the update, the call for meddo was: $database = new medoo();\nAfter the update:  $database = new medoo(['option' => [\n        PDO::ATTR_CASE => PDO::CASE_NATURAL\n        ]]); \nOk, now my question is:\nbecause I have a lot of this call on my app and I wan't change all the scripts, how I can change the medoo.php to insert the PDO::ATTR_CASE?\nMaybe on the row \"protected $option = array();\" ? I tried to change this, but I don't find the right sintax. Can you help me?\n. Great. Many thanks.\n. The easiest solution I have found is : to downgrade to the previous release . :-) because , in any case , after the update , my scripts on the server constantly encounter run-time errors. I prefer to stay with the previous release that is performed without any problem. I work as a web application writer and I will not even think to change all my script to use the new release ! Just a tip : I think it's incorrect update a release by changing the way of connecting to the database , forcing users to re-check all the scripts . \n. ",
    "simplicitywebdesign": "I'm getting the same issue. Has anybody had any luck with this?. ",
    "diegonella": "hi guys, check my fork \nhttps://github.com/diegonella/Medoo. ",
    "alihamze": "@repat I just added it. Oracle also uses INSERT IGNORE like MySQL/MariaDB so I added that too. As for the ?>, my IDE added a new line after the last line in the file (see here).\n. Hey guys, I added support for this and other sql keywords here if you want to take a look.\n. ",
    "ggedde": "Was hoping this was added. :(\n@catfan ?. Hi @catfan,\nI really needed a way to join tables based on data within the columns.  It seems that Medoo doesn't support it out of the box so I created this Pull Request.   If you find another way to do it or prefer different syntax then feel free to change it.  I use Medoo quite a bit on projects with composer, so I would like to see this get added in.\nThanks\n. Hi @catfan,  any chance you can take a look that this?\nI can help with any questions you might have.\nThanks. Same issue, \n@catfan any news on the new idea.\nCurrently, I find the Data Mapping an awesome way to organize joins, but because many of the fields use the same key it sort of makes data mapping not really usable for me.\nHere is what I would like to do:\n$db->select('users',\n  ['[>]accounts' => ['account_id' => 'id']],\n  [\n    'users.id',\n    'users.name',\n    'account' => ['accounts.id', 'accounts.name']\n  ]\n);\nBut instead I have to end up doing:\n$db->select('users',\n  ['[>]accounts' => ['account_id' => 'id']],\n  [\n    'users.id',\n    'users.name',\n    'account' => ['accounts.id(account_id)', 'accounts.name(account_name)']\n  ]\n);\nAnd if I am going to do that then I might as well just do:\n$db->select('users',\n  ['[>]accounts' => ['account_id' => 'id']],\n  [\n    'users.id',\n    'users.name',\n    'accounts.id(account_id)',\n    'accounts.name(account_name)'\n  ]\n);\nHowever, I would rather stick with the first method.\nThanks. ",
    "pedrofsantoscom": "Any ETA for this pull request going to master branch or a new release?. I have the same problem while trying to use a column from a previously joined table, in a new join. It returns this error:\nSQLSTATE[42S22]: Column not found: 1054 Unknown column 'column1' in 'from clause'\n@azhilov did you find an alternative?. Found a way to work. use (=>)\nsql\n[\n    \"[><]table\" => [\"table2.col\" => \"col2\"]\n]\ninstead of (,)\nsql\n[\n    \"[><]table\" => [\"table2.col\", \"col2\"]\n]\nExample:\nsql\n$db->select(\"table1\", \n    [\n        \"[><]table2\" => \"user\",\n        \"[><]table3\" => [\"table2.column1\" => \"column2\"],\n    ]);\n@azhilov in your example, this should work:\nsql\n$users = $this->ci->db->select( 'users(u1)', \n    [ \n        '[><]users(u2)' => ['u1.who_created' => 'u2.id'], \n        '[>]users(u3)' => ['u1.who_updated' => 'u3.id']\n    ], \n    ['u1.id', 'u1.username', 'u1.login', 'u1.password', 'u1.email', 'u1.phone', 'u1.role', 'u1.active', 'u2.username(who_created)', 'u3.username(who_updated)', 'u1.created_at', 'u1.updated_at']\n);. Thank you catfan! \ud83d\udc4d . I tried to find issues related before i posted but guess my search wasn't good. Thanks for the feedback \ud83d\udc4d . Use inherited variable by reference from the parent scope like so:\n```php\n$returnMessage = \"\";\n$db->action(function($db) use (&$returnMessage)\n{\n    // whatever you want\n// rollback\n$returnMessage = \"Error 101 returned\";\nreturn false;\n\n});\necho $returnMessage; // outputs: \"Error 101 returned\"\n```. > Set the columns param as a string, not an array.\nLike this:\nphp\n$db->select($table, \"id\", $where); // returns [ 1, 2, 3 ]\nAnd not like this:\nphp\n$db->select($table, [\"id\"], $where); // returns [ [ \"id\"=> 1 ], [ \"id\"=> 2 ], [ \"id\"=> 3 ] ]. ",
    "OnPe": "I found way, how to receive id of last inserted record, but I don't like my solution. Can you help me, what's the best way, if I'm using Medoo and PostgreSQL?\nThx\n. Thx, but for me not works. With MySQL it's OK, but with PostgreSQL not. I solved it using $db->insert(\".....]) and $last_id = $db->pdo->lastInsertId('............'); \n. ",
    "omaressa": "@Walk4Muscle , Can you post the output of $db->last_query after running your query?\nThanks!\n. @catfan Looking forward to hear back from you on this. \n. @no13bus  Could you please post this in English? I might be able to help you out!\nThanks!\n. @SyuTingSong @no13bus  I believe that is not possible to do so out of the box, however you can run raw query using the query api http://medoo.in/api/query\n. Hi @Jeff-P  , The input is sanitized by passing the input to quote function which is just a shiny wrapper around the pdo quote function.  http://php.net/manual/en/pdo.quote.php\n. I believe this is currently not supported by Medoo, however since Medoo uses PDO under the hood so it should be relatively easy to patch this in.\n. Working fine over here too. Could be network issue.\n. Medoo is a wrapper around pdo which supports mysql, sqlite and a lot more :), so yes!\n. Hi @randinterval , Composer is not required - Simply include using require_once or include_once the medoo.php file (You can download it from the repo) and than create a Medoo Instance :)\n. ",
    "Walk4Muscle": "@omaressa , thanks for your reply. \nAnd yes, it returns \"INSERT INTO \"user\" (\"username\", \"email\") VALUES ('user', 'user@domain.com')\"\n. ",
    "rakshazi": "@catfan @omaressa  same problem\n. @catfan @omaressa @Walk4Muscle problem has been solved! Just add following lines to your database config:\nphp\n'option' => [\n            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n        ],\n. @Jackysi read docs - https://medoo.in/api/new (section \"Configuration\"). @catfan same problem.\n. @catfan @newjie problem has been solved! Just add following lines to your database config:\nphp\n'option' => [\n            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n        ],\n. @catfan affected me too\n. @leoncool \nWorkaround:\nphp\n<?php\n$database->select(TABLE_Finance_Trans, \"\", [\n    \"AND\"=>$filter,\n    \"ORDER\"=> [TABLE_Finance_Trans.\".created_at\" => DESC\"], //Just use [$field => $direction] array\n    \"LIMIT\"=>[($pageNumber)$itemsPerPage,$itemsPerPage]]);\n. good idea!\n@catfan use PHP CS Fixer v2, please. @catfan release bugfix as new version (eg: 1.4.1), please. @catfan any update on this?. @anaggh thank you! Didn't notice it. Thank you!\nWe will test it tomorrow and close issue if all ok. ",
    "Jackysi": "I am new Medoo user and I would be very happy if this would be some how explained on Documentation ^^. Luckily Google search returns this issue quickly!. ",
    "jcrben": "There's some PHP bugs reported on issues with nvarchar(max): https://bugs.php.net/bug.php?id=67437. ",
    "leiyiyi": "\u8981\u4e48\u7528\u4f5c\u8005\u7684\u539f\u7248\uff0c\u4e0d\u8981\u4f7f\u7528prefix\uff0c\u81ea\u5df1\u52a0prefix\uff1b\u8981\u4e48\u7528\u697c\u4e0a\u7684\u4fee\u6539\u7248\uff0c\u5b8c\u7f8eprefix\u3002\n\u67e5\u8be2\u4e3b\u952e\u522b\u540d\u529f\u80fd\u975e\u5e38\u91cd\u8981\uff0c\u4e0d\u77e5\u4e3a\u4f55\u539f\u4f5c\u8005\u4e3a\u561b\u4e00\u76f4\u6ca1\u5b9e\u73b0\uff0c\u697c\u4e0a\u7684\u4fee\u6539\u7248\u975e\u5e38\u597d\uff0c\u4ee3\u7801\u5f88\u7cbe\u8f9f\u3002\u8d5e\u3002\n\u53e6\u5916\u539f\u4f5c\u8005\u8fd8\u9700\u8981\u589e\u52a0LIKE\u67e5\u8be2\u7684\u7ec4\u5408\u67e5\u8be2\u529f\u80fd\uff0c\u81ea\u7528\u7684\u4fee\u6539\u4e86\u4e0b\u5b9e\u73b0\u4e86\uff0c\u90a3\u65f6\u8fd8\u662f0.8\u51e0\u7248\u672c\u7684\u65f6\u5019\uff0c\u73b0\u5728\u672c\u5730\u627e\u4e0d\u5230\u4e86\uff0c\u56e7\n. ",
    "no13bus": "@omaressa thanks. Actually, I check the source code of medoo,  but I am not sure.\n. ",
    "kphcdr": "\u4fee\u590d\u7684\u4e0d\u9519\uff0c\u4f46\u662f\u4f5c\u8005\u597d\u50cf\u4e0d\u66f4\u65b0\u4e86\n. ",
    "Sxdd": "\u8fd9\u6837\u4fee\u590d\u8fd8\u6709\u95ee\u9898\uff0cwhere\u7684\u8bed\u53e5\u6ca1\u6709\u8868\u524d\u7f00\n. ",
    "877850838": "\u8868\u524d\u7f00\u662f\u786c\u4f24\uff01\n. ",
    "cejayassoc": "Did you ever get an answer to this? I am having a similar problem in our project. Everything has been working for some time and suddenly I get the error: \n\nFatal  error: Call to a member function fetchAll() on a non-object in * \n. My problem was with a query, in my case, there was a missing parameter. My actual problem was that I was hiding a section of content from myself and couldn't see what was really going on.. \n",
    "y2k4ever": "I also have similar problem..currently using medoo v 0.9. The error started when i upgraded mysql from 5.5 to 5.7. Please share if you guys have a solution.. ",
    "Andrews54757": "It returns false if in debug mode - or if the query doesnt work -\nhttps://github.com/catfan/Medoo/blob/master/src/Medoo.php#L279-L318. Compare:\nOld:\nhttps://github.com/catfan/Medoo/blob/11680a33b4cd741563cb0f1ec3bf583e17fb2140/src/Medoo.php#L299-L310\nNew:\nhttps://github.com/catfan/Medoo/blob/6798b9698ee60ee98a4d342485904322922b2b3b/src/Medoo.php#L299-L317\n. @y2k4ever , @keldon2295 . To fix, all you need to do is replace the above with the old version. @cejayassoc You problem is a different problem than the problem addressed in this issue. I cannot figure out what you mean due to lack of information. @brownsugar Medoo doesnt support multi-querying at all. Except for insert of course.\n@catfan Can I help him or no?. https://www.w3schools.com/sql/sql_like.asp\n@nealoke  Use like to run a query using wildcards.\nphp\n$Medoo->select('table',['birthday'],[\n    'birthday[~]' => '%MM-DD'\n]); // SELECT birthday FROM table WHERE birthday LIKE %MM-DD. https://medoo.in/api/error\nHowever, medoo is awful at handling errors. I agree with that\nSo, I created my own tool: https://github.com/ThreeLetters/SuperSQL - it does have error handling. Also, it is much more faster, lightweight and advanced than medoo.\n. @anyforever Like this? https://gist.github.com/kookxiang/9f24b756122ec03c1511\nI dont think you can acheive sql replication with just php. Wouldnt having multiple medoo instances also work?. @anyforever  Or you can create a helper class\n```php\nuse Medoo\\Medoo;\nclass Manager {\n         public $MASTER;\n         public $SLAVE;\n         __construct($opt1,$opt2) {\n                  $this->MASTER = new Medoo($opt1);\n                  $this->SLAVE = new Medoo($opt2);\n         }\n         select($table, $join, $columns = null, $where = null) {\n                  $this->SLAVE->select($table, $join, $columns, $where);\n         }\n         insert($table, $datas) {\n                  $this->MASTER->insert($table, $datas);\n         }\n         update($table, $data, $where = null) {\n                  $this->MASTER->update($table, $data, $where);\n         }\n         delete($table, $where) {\n                  $this->MASTER->delete($table, $where);\n         }\n         replace($table, $columns, $where = null) {\n                  $this->MASTER->replace($table, $columns, $where);\n         }\n}\n```\nDont see why any editing has to be done with medoo. I think its fine.. Glad I could help.. @indiwine Is it possible to combine the two regexes? Cause doing https://github.com/catfan/Medoo/pull/609/files#diff-42b309e5f19340c8b59c3dd80b7ccd31R404 seems very inefficient. Also, whats wrong with being type sensitive?. @indiwine It is possible - it might require a complete overhaul though - but I think it would be worth it. Also I guess your right about being case-insensitive. However, though, adding more and more things to medoo can undermine it's highlight of being \"lightweight\".\nI think your PR would be very useful though, it would be nice to alias and type cast at the same time. Just that I would like to see the new version of medoo to be more - lightweight and efficient.\nI manage servers with large amounts of visitors - efficiency is important - especially for ddos attacks. @indiwine Your right - we would have to store data somewhere. I also did some profiling, and I found that the regexes were pretty fast. I do think the regex can be simplified though. \nThanks. >/(?[a-zA-Z0-9_.]+)(?:\\s((?[^)]+)))?(?:\\s[(?[^]]*)])?/i\nNow, its 20 steps.\nhttps://regex101.com/r/4S4TF1/1. @indiwine I did use named groups. Markdown removed anything within <>\n/(?<column>[a-zA-Z0-9_\\.]+)(?:\\s*\\((?<alias>[^\\)]+)\\))?(?:\\s*\\[(?<type>[^\\]]*)\\])?/i. @indiwine Also, mb_strtolower is slow apparently (http://php.net/manual/en/function.mb-strtolower.php). I would suggest using just strtolower. @catfan I agree with @indiwine. The type cases are confusing. I mean, there should be a standard. It would be better if everything was all lower-case.\nSide note:\nThe usages of [] and () are also confusing. Would be nice if everything was inside of brackets.\nPPS:\nMedoo is slooow. The project I am working on (not finished) is 2 times faster. (the parsers). @km3945 If you want that, you can change it in your own copy too. No need to edit the main repo. Yes. @Yousha Positional parameters do not have to be bound in order.\nhttp://php.net/manual/en/pdostatement.bindparam.php\nAlso, medoo doesnt use that feature of binding multiple times.\nMedoo instead generates a unique name using https://github.com/catfan/Medoo/blob/master/src/Medoo.php#L351.\nIf it is gonna increment guid anyway, then why not use positional parameters? Positional parameters tend to be faster, and it would make the code more compact.. @catfan I see, however, that can be solved very quickly. I think positional placeholders are better for clarity though, the mapKey function is confusing and ugly. But, I am fine with named parameters, I mean, it works.. @bluestonemds It should work: https://github.com/catfan/Medoo/blob/master/src/Medoo.php#L572-L588. @bluestonemds Yes, the casing is confusing. Would be better if everything was lowercase. In fact, I am having a conversation with catfan about it here: #609 . @Yousha Is this needed? What we have works too.. @Yousha Lets be civilized. Lets respect each other. Also, I am not just a user, I am a professional developer.\nIt is not illegal to commit minor changes. However, there are standards.  Your changes might become confusing in the future. \n```php\nif ($condition) \n{\nreturn $a;\n\n}\nelse\n{\nreturn $b;\n\n}\n```\nis better than\n```php\nif ($condition) \n{\nreturn $a;\n\n}\nreturn $b;\n```\ncatfan knows what she is doing.\n. @Yousha Look, I am trying to be nice to you. Please dont be rude.\nI am trying to contribute and support this repo. I do not need to, I am busy, and I have already created something 5 times better than this. However, I choose to help because I love open-sourced projects. Please respect me, as I respect you.. @StefansArya What would be the key? <>, ><, >, and < are already taken.\nAlso, you would also have to edit\nhttps://github.com/catfan/Medoo/blob/6798b9698ee60ee98a4d342485904322922b2b3b/src/Medoo.php#L835. @StefansArya Okay then, make a pull request. Catfan then can merge it later. @catfan I suggest using the PEAR  format. It nice and clean, and its easy. @Philippe-M Thats not the right usage of PDO prepared statements. Of course it would be quoted, it escaped the string. It should be this:\nphp\n          $database->query('\n            INSERT INTO stock\n            (itmref, status, qtystu, cumallqty)\n            VALUES (:first, :second, :third, :fourth)\n            ON DUPLICATE KEY UPDATE itmref=VALUES(itmref)', [\n              ':first' => $data[0],\n              ':second' => $data[1],\n              ':third' => $data[2],\n              ':fourth' => $data[3]\n            ]\n          );\n. @Philippe-M Oh I see, so you are trying to insert multiple rows at once. This is tricky. There is one solution though, you could edit the sql as a string,. However, this is not secure.. @Philippe-M I have a quick and dirty solution:\nIn https://github.com/catfan/Medoo/blob/master/src/Medoo.php#L1080, Change to\nphp\npublic function insert($table, $datas, $append = null)\nThen change https://github.com/catfan/Medoo/blob/master/src/Medoo.php#L1173 to\nphp\nreturn $this->exec('INSERT INTO ' . $this->tableQuote($table) . ' (' . implode(', ', $fields) . ') VALUES ' . implode(', ', $stack) . ($append ? (' ' . $append) : ''), $map);\nNow, you can do:\nphp\n$Medoo->insert('stock',[\n    [\n        'itmref' => 'value', \n        'status' => 'anothervalue',\n        'qtystu' => 'val3', \n        'cumallqty' => 'val4'\n    ],\n    [ // multi-insertion\n        'itmref' => 'value', \n        'status' => 'anothervalue',\n        'qtystu' => 'val3', \n        'cumallqty' => 'val4'\n    ] \n    /* etc...*/\n],'ON DUPLICATE KEY UPDATE itmref=VALUES(itmref)'); // append. @superdeeid Or, you can use another tool. I suggest one called SuperSQL. It is much more faster, efficient, and advanced than Medoo.\n. @catfan It was just a suggestion. I was inspired by your project to create an even better one. My comment was not off-topic nor was it extremely advertisy. It was an accurate suggestion. I have nothing to gain. Its not like I can gain money from it. Also, you have nothing to lose. I even put your name and project in the special thanks section.. @tds4u Wildcards in column names are not supported. Its a bad practice to do so.. @tds4u Okay then, I guess a little change could be made:\nChange \nhttps://github.com/catfan/Medoo/blob/6798b9698ee60ee98a4d342485904322922b2b3b/src/Medoo.php#L356-L366\nTo\nphp\n    protected function columnQuote($string)\n    {\n        preg_match('/(^#)?([a-zA-Z0-9_]*)\\.([a-zA-Z0-9_\\*]*)(\\s*\\[JSON\\]$)?/', $string, $column_match);\n        if (isset($column_match[ 2 ], $column_match[ 3 ]))\n        {\n            if ($column_match[ 3 ] !== '*')  $column_match[ 3 ] = '\"' .  $column_match[ 3 ] . '\"';\n            return '\"' . $this->prefix . $column_match[ 2 ] . '\".' . $column_match[ 3 ];\n        }\n        return '\"' . $string . '\"';\n    }. @tds4u Then change the regex to\nphp\npreg_match('/(?<column>[a-zA-Z0-9_\\.\\*]+)(?:\\s*\\((?<alias>[a-zA-Z0-9_]+)\\)|\\s*\\[(?<type>(String|Bool|Int|Number|Object|JSON))\\])?/i', $value, $match);. @sartsi Using this is considered a bad practice. Also you code is incredibly inefficient. Why do you use \nhttps://github.com/sartsi/Medoo/blob/da9e85b76e90185df5c603e491952316e0b799b1/src/Medoo.php#L358\nJust use regexes then.. @akahen Medoo doesnt support this. Sorry.\nI could help you though - but you would have to edit medoo.. @dagobertdebug \n```php\n$values = '2,123,234,54';\n$database->select(\"account\", \"user_name\", [\n    \"OR\" => [\n        \"user_id\" => explode(',',$values)\n    ]\n]);\n```\n. @roydekleijn If you want efficiency, dont use Medoo. Medoo is an abstraction layer for those who dont know much about sql. I do not think you would need high-performing tools. If so, then use those provided by frameworks such as Laravel.. @catfan @Naufrage7  Replace the regex with\n\n[\\p{L}0-9_]*\n\nIt will get all letters from all languages, 0-9, and underscore.\nMake sure to set /u to true\nhttps://regex101.com/r/AAXhWz/3\nHowever, it is not really good practice to use such characters for column names. @xilylg Nope, Medoo decided to use \".. Duplicate #119 . @KirDE Use SQL JOIN.. @KirDE What do you mean? Please elaborate on what SQL procedure you want to do. What would be the query?\nLots of times, Multi-querying can be simply replaced with seperate queries.\nThe multi_query function is not in this library as it only applies to MySQL. In order to use with PDO, then it would be much harder.\nIf you still want to use PDO for multi-querying, then refer to this thread: https://stackoverflow.com/questions/6346674/pdo-support-for-multiple-queries-pdo-mysql-pdo-mysqlnd. @KirDE Oh, okay. Sorry, I thought you were meaning something else. Anyway, in your case you would have to use PDOStatement::nextRowset.. @KirDE There is a helpful resource here: https://www.ibm.com/support/knowledgecenter/en/SSSNY3_10.1.0/com.ibm.swg.im.dbclient.php.doc/doc/t0023501.html. ",
    "Jeff-P": "Worked for me thank you\n. the answer is that it does use pdo quotes automatically. The query below produced this output when debugged\nThe query \n$datas = $pdo->select(\"company\", [\n    \"companyname\",\n    \"name\"\n ]);\nThe SQL it produced \nSELECT \"companyname\",\"name\" FROM \"company\"\nHope this helps\n. ",
    "JunJun-Love-Amber": "+1\n. ",
    "randinterval": "@omaressa  Thank you!\n. ",
    "dennis90": "I fixed that as you can see in PR: #431,\nthe problem source: http://php.net/manual/en/pdo.lastinsertid.php#75200\n. They have changed the way the routine returns the key, in version 1.2 you need to call \"id()\" function after insert to retrieve the key, this commit has some bugs that i notice after a while and shouldn't be used.\nyou can see the how to retrieve the key in documentation: http://medoo.in/api/insert. ",
    "brnogz": "dublicate of #297\n. there is only remote database. i connect remote database from my local\n. i also need this feature. when i tried, second column name escaped.\n. ",
    "penn-ma": "When using table prefix to configure the database connection, and select join table query error\u3002\nSELECT * FROM \"st_test\" LEFT JOIN \"st_test2\" ON st_\"st_test\".\"id\" = \"test2\".\"test_id\" WHERE \"id\" = 1\nIn the \"ON\" with a \"st_\" table prefix,and table \"test2\" not prefix\nError in the 500 line.\n$joins[] = $this->prefix . (\nmy Version 1.0.2\n. I find commits on feb 14, 2016 about this bug.\ncolse\n. ",
    "neko2891": "Join a feature like this\n. ",
    "philwu": "` is not good because it is not compatible for mssql. what datatype are you using? MySQL?PostgreSQL?. just saw it duplicate with #635. Thank you, @bradleymyers . \nIt works for me on:\nSQLServer 2008R2  with PHP7.1.1\nSQLServer 2016  with PHP7.2.12\nHope @catfan can pull this.. ",
    "hyyyp": "Sorry, it was my operation in question\n. ",
    "Nicero": "Thank for the fast answer. Encoding the image before adding it to a BLOB worked fine:\n```\n$blob = file_get_contents(\"Image00001.jpg\");\n$last_user_id = $database->insert(\"images\", [\n    \"image\" => base64_encode($blob_01)\n]);\n```\nRead the image from dB:\n```\n$datas = $database->select(\"images\", [\n    \"image\"\n], [\n    \"id[>=]\" => 1\n]);\n$a = $_GET['jsoncallback'] . '(' . json_encode($datas) . ');';\n```\necho to Ajax:\necho $a;\n. I see an orphan comma after $pass. Maybe is that?\n. Oook, got it! I must remeber that SELECT wants only three parameters. \nP.S. Your query is correct!\n. ",
    "saeedvir": "//for get function in medoo\n<?php\n    public function get($table, $join = null, $column = null, $where = null)\n    {\n        $query = $this->query($this->select_context($table, $join, $column, $where) . ' LIMIT 1');\n        if ($query)\n        {\n            $data = $query->fetchAll(PDO::FETCH_ASSOC);\n            if (isset($data[ 0 ]))\n            {\n                $column = $where == null ? $join : $column;\n                if (is_string($column) && $column != '*')\n                {\nif($this->return_type==='json')\n                    return json_encode(array($data[ 0 ][ $column ]));\n                else\n                    return $data[ 0 ][ $column ];\n            }\n                if($this->return_type==='json')\n                    return json_encode(array($data[ 0 ]));\n                else\n                    return $data[ 0 ];\n        }\n        else\n        {\n            return false;\n        }\n    }\n    else\n    {\n        return false;\n    }\n}\n?>\n. ",
    "AndreiTelteu": "Awesome. I tried it  and it's awesome.\nBut it makes conflict when the table that i make a join with has a column the same as my table's column.\nYou have to implement alias in data mapping :)\n. ",
    "piotrostrowski": "Guys, have you found any solution to the @AndreiTelteu issue? Im facing it right now and I have no idea how to deal with it :(\n. Thanks @catfan for the reply! Unfortunately aliases does not work within those internal mappings. Following piece of code results in:\nNOTICE: Undefined index: id(author_id)\n. ",
    "somasish": "Hi,\nThanks for the reply,\nbut the above solution will yield me double md5 of the string which equals to the user_id column in the query.\nWe don't have decryptMd5 function but that will yield me perfect result. \n$datas = $database->select(\"account\", [\n        \"user_name\",\n        \"email\"\n    ], [\n        \"user_id\" => decryptmd5($SomeMd5String)\n    ]\n);\nany possible way to handle through the medoo query.\none possible way through programming is to fetch all user_id and convert to MD5 and compare. but it's not an effective way of programming \n. ",
    "newjie": "Do you mean you want me to check whether userid is the primary key and auto increases?\nNo it is not. \"id\" is.\n. yes they are\n. ",
    "rbdoer": "same problem,and i read the medoo code;the insert function :\n$this->exec('INSERT INTO ' . $this->table_quote($table) . ' (' . implode(', ', $columns) . ') VALUES (' . implode($values, ', ') . ')');//this return 1\n$lastId[] = $this->pdo->lastInsertId();//but if table has no auto-increment primary key,it returns 0\n. ",
    "flippolis": "If a table has no autoincrement fields, what is the correct way to check for errors after an insert?\n. ",
    "kaopur": "Same problem.\n. ",
    "poncianodiego": "For me is returning the string but not updating or retriving data from db\ne.i I see: INSERT INTO \"items\" (\"stock_number\", \"position\") VALUES ('value1', 'val')\nwith debuggin on but there are no new inputs\nI've tried setting the error options and I've put insert within a try catch and nothing.. ",
    "ajm113": "Have you tried doing this?\n$datas = $database->select(\"notepad\", [ \"message_text\" ], [ \"ORDER\" => \"id DESC\", \"LIMIT\" => [5, 2]);\nYou can simply pass an array to the LIMIT key, and that can handle your offset. [100, 2]\nI know the documentation isn't the best in the world navigation wise, but you can see more info here at the bottom of this page: http://medoo.in/api/where\n. P.S The issues is more of a \"bug tracker\", I can see why you could think this a bug/problem with the library, but please do your research before posting issues next time. Stackoverflow has you covered regarding assistance using the library if you have any further questions of 'usage' of the library.\nhttp://stackoverflow.com/questions/tagged/medoo\nGoodluck! :smile: \n. No problem, and no worries! We all have to start somewhere.\n. And the remote and local database has the same exact table layout I assume?\n. @Nicero For some odd reason PHP allows orphan commas after last array element just like JS. (Don't know why. IMO It should error out like any other language.) Plus he posted a SQL syntax error, not PHP.\n@lluiscab You are generating your query incorrectly. Please read the documentation next time first, before reporting an issue. The time you would spend writing the issue could have been used to debug the issue yourself and continue your day. :wink: \nhttp://medoo.in/api/where\nRead the \"Relativity Condition\" section.\nThanks.\n. No problem! And I know what you mean. Specially sometimes when the answer hangs in front of your face just after you post a question. haha\nCheers!\n. '#1' => '1'\n\u4f7f\u7528SQL\u51fd\u6570 or \"Using SQL Functions\" (in English)\nhttp://medoo.in/api/where\n. ",
    "indiwine": "Oh \nI also do the same(on the local branch, of course) :)\nBut with syntax: \n[ \"REGEXP#comment\" => [\n       'column' => 'some column',\n       'pattern' => '[abz]\n]]\nIs secure to pass a regexp pattern to mysql without any checks?\n. Maybe some regexp? Regexp to check regexp\n. @Andrews54757 There is no way to combine this regexes because they has been used in different methods and in each case input string is different. Also this regexes has used in such manner originally, I just change it a bit.\nAs for case sensitivity - it just seems convenient to me: [Bool] and [bool] should have the same meaning.. @Andrews54757 Everything is possible :)\nHowever in order to achieve this we need to save a column information (name, alias and type) in some place, let's say it would be a SplFixedArray: \n1. This information should be keeped between query construction and result parsing. \n2. SplFixedArray should be constructed again after each request.\n3. We still need some kind of find function that will be iterating over SplFixedArray and search for column name or alias.\n4. find mesthod will be called for each column at query construction and for each column in each row in result parsing.\nIteration and storing this information will require even more CPU time and memory than usual regexp.\nSuch optimization make process of handling column information more clear but I don't think it will work faster than regexp.\nOn the other hand, original regexp requires  30 steps iteration\nBut I think regexp still faster than method mentioned above.\nI don't see any criminal in mbstring. Case changing in a string it a common task in any project. \nAnd still case changing is a much faster operation than any regexp used in Medoo. \nThank you. . @Andrews54757 Great)))) Thank you.\nIts better to left named groups in order to avoid unnecessary assignment operations.\nRegexes still can be simplified - as I recall second one did nor require to match an alias group as there never would be aliases in a string.\nWell let me \"take a debugger\" and check all this stuff. I will make a new commit with a simplified regexes.. @Andrews54757 Oh, sorry))). @Andrews54757 Yeah a force of habit is very strong. I believe we can safely use a strtolower as far as type declaration has only Latin chars.. @catfan Well, in such case what about to make type handling more obvious? If developer has any mistake in a type definition lets rise an exception for example. \nI had a few bugs just because i have typed [int] instead of [Int] and [bool] instead of [Bool]. That is because in php type conversion is always in lowercase.  I printing all that stuff in lowercase just becouse php do like that. Its a force of habit. \nSo, how about to throw an exception in case of data type is not recognized?. @catfan Whats wrong with 402-405? Such concatenations are widely used among your project.. @catfan @Andrews54757 Done, take a look.. ",
    "kaiser-tushar": "We can use like this,\ntable.created[<=]  = date('Y-m-d H:i:s', $end_date)\nBut how can we use this,\nDATE(table.created)[<=]  = date('Y-m-d', $end_date)\nI need to run DATE(created) type query. Can we do that? . ",
    "wenpeng": "you can use the \"action\" method\n. ",
    "synchronized": "You can create class extends Medoo and create function popLog() to return logs and clear the variable $this->log. This may be in order to compatible with other databases system, for example SQL server . ",
    "sanishan": "This is no longer support in new version!, you have to use query() for this!\n. return empty results of \"column\" \"pic_url\" !\n. Fix it!, I have to use GROUP by!\n. ",
    "KiborgMaster": "https://github.com/catfan/Medoo/issues/463\n. But sumthing my client use RADNOM view.  THis is my code, in version Medoo 0.9.8.3 all work very good\n$postData = $this->db->select('v'.PREFIX.'short_posts', ['incr', 'incr_cat'], \n            [  'AND'=>['incr_cat[=]'=>$viewIncrCats, 'lang'=>$lang, 'status'=>'active'],\n               'ORDER'=>$_dataCat['order_by'].' '.$_dataCat['order_type'],\n                 'LIMIT'=>[ $bLimit, $eLimit ] \n            ] \n            );\nforeach($_postData as $value) ........\necho $this->db->last_query()  =   SELECT \"incr\",\"incr_cat\" FROM \"v_wst_short_posts\" WHERE \"incr_cat\" IN ('5') AND \"lang\" = 'ru' AND \"status\" = 'active' ORDER BY \"incr\" DESC LIMIT 0,10\n. I found problem in ORDER, if i use Single condition this not work if use Multiple condition all work.\n. That's the problem\n in Single      - [  ORDER BY \"incr DESC\" ] - incorrectly\n in Multiple  - [ ORDER BY \"incr\" DESC  ]  - correctly\n. Error in string 512\n$where_clause .= ' ORDER BY ' . $this->column_quote($ORDER);\nMy solution\n$order = explode(' ', $ORDER);\n$where_clause .= ' ORDER BY \"'.$order[0].'\" '.$order[1];\n. My solution \n$stack[ $index ][ $value ] = (array_key_exists($value, $data) ? $data[ $value ] : '');\n. ",
    "easylogic": "column quote pattern is wrong. \nphp\nprotected function column_quote($string)\n{\n     return preg_replace('/(\\(JSON\\)\\s*|^#)?([a-zA-Z0-9_]*)\\.([a-zA-Z0-9_]*)/', '\"' . $this->prefix . '$2\".\"$3\"', $string);\n}\nyou must add table name before field name.\nphp\n$last_user_id = $db->insert(\"userlist\", [\n\"username\" => \"foo\",\n\"(JSON)userlist.userqq\" => [\"en\", \"fr\", \"jp\", \"cn\"] \n]);\n. ",
    "leonirlopes": "Same problem with 'UPDATE'.\nUPDATE \"account\" SET user_name = 'bar', #uid = UUID() WHERE id = 999\n. ",
    "roman4ak": "Is it really fixed?\nDoesn't work without this commit for me.\nAfter I manually applied the commit to my build I finally got the right id.. Yes, you are right.\nHow about implementing this commit to the id() function?\nI've done exactly this and everything seems to work nice.\nCould you tell what kind of bugs you observed with your solution?. ",
    "llgoer": "use fetchAll(PDO::FETCH_ASSOC);\n. ",
    "zhangchunsheng": "I have the same problem with group by. I change the code like this.\n$value = preg_replace('/^#.*(*)\\s/i', \"\", $value);\n$stack[ $index ][ $value ] = $data[ $value ];\n. ",
    "progressify": "Hi\nI have created a patch for this problem\nToday I commit this change for approval. ",
    "wwtg99": "Sorry, I use the version 1.0.2 that cause this problem. It is ok in version 1.1.2.\n. ",
    "fuyangli": "So I learned that the query method returns the PDO object, which explains the fetch_all method that we have to call after.\nI just put 'PDO::FETCH_CLASS' as a parameter of the fetch_all method, and now I have my wanted result:\n{\nid: \"2\",\ntitle: \"Aluguel de Motos - Maior de 18 anos\",\ndescription: \"Teste\"\n}\n. ",
    "hiepdung": "thank for support, a good answer\n2016-08-05 11:13 GMT+07:00 Catfan notifications@github.com:\n\nYou don't need to use Medoo for that.\nhttp://stackoverflow.com/questions/1045910/how-can-i-import-load-a-sql-or-csv-file-into-sqlite\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/catfan/Medoo/issues/452#issuecomment-237751055, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AMt0sauHm4J-LMBfAVtWbinlERukWmHnks5qcrhtgaJpZM4JaXeV\n.\n\n\nName: \u0110inh Hi\u1ec7p D\u0169ng\nPhone: 0933 468 996\nEmail: DinhHiepDung@Gmail.Com\nHome: Jscvn.Com\n. ",
    "DeltaWolf7": "I have the same thing with the latest version 1.1.2.\nUsing insert command, the output generated by Medoo is:-\n(key, value, userid) VALUES ('TEST', 'This is a test', '0')\nAs you can see the column names are not is quotation marks. From my object the input was:-\n[\"key\" => \"TEST\", \"value\" => \"This is a test\", \"userid\" => \"0\"]\nWorked fine with passed 1.0.2.\nThanks\n. ",
    "vishtany": "i have the issue after an update to 1.1.2.\n. ",
    "ibnux": "solved, need to change encoding to utf8mb4\n$db->exec(\"SET NAMES 'utf8mb4'\");\n. ",
    "clozed2u": "@catfan Thanks.\n. ",
    "KirDE": "one more use case: \nSELECT * FROM table WHERE (column_a - column_b) > 0. you misunderstoo d the request. it is about logging invalid / failed queries. MySQL doesn't log invalid/failed queries anywhere. http://stackoverflow.com/questions/4631133/mysql-log-of-invalid-queries. @Andrews54757 i need two tables as result and they have completely different set of data. actually it is a procedure that is called. Currently we are doing it with new mysqli connection, but i don't like this solution.. We have 2 SELECT Queries stored as single Procedure in mysql DB. We are not allowed to change this procedure to separate this queries. . ",
    "jdanielcmedina": "I have the same problem... try another word.\n. I add this function inside Medoo class and works good. I need put inside class because I need use WHERE clause function.... \npublic function distance($table, $latitude = 0, $longitude = 0, $where = null){\n$query = $this->query('SELECT id, (((ACOS(SIN((' . $latitude . ' * PI()/180)) * SIN((latitude * PI()/180)) + COS((' . $latitude . ' * PI()/180)) * COS((latitude * PI()/180)) * COS(((' . $longitude . ' - longitude) * PI()/180)))) * 180/PI()) * 60 * 1.1515 * 1.609344) AS distance\n        FROM users ' . $this->where_clause($where));\nreturn $query->fetchAll(PDO::FETCH_ASSOC);\n}\n. ",
    "paulholden": "An easy workaround is to prepend the reserved field name with the table name, e.g. 'MyTable.Status' (trying to alias the field doesn't work). ",
    "kanuj": "Since this can be handled at the database configuration level, I think there's no need to bloat the database interaction layer. Keeping it in the database config allows you more flexibility, such as the option to log it to a file/table etc.. What exactly is the bug here? Could you be more descriptive?. I'd say check the following settings in your my.ini file as this seems more likely to be a MySQL configuration issue:\nSET GLOBAL max_allowed_packet=524288000;\nSET GLOBAL wait_timeout 10;. ",
    "turbopixel": "We create a simple medoo wrapper include monolog logging.\nCreate a class named \"Database\", extends Medoo and overwrite methods like:\npublic function insert($table, $data) {\n    $this->logger->info( 'insert', [\"table\" => $table, \"data\" => $data] );\n    return parent::insert($table, $data);\n  }\nSo for error logging, I write a errorHandler:\nQuery/Exec method:\npublic function query($query, $context = []) {\n    $this->logger->info('query', $context);\n    $result = parent::query($query);\n    $this->handleSqlError( $result ); // <-- handle errors\n    return $result;\n  }\nError handling:\n ```\n  private function handleSqlError($query) {\n    $error = $this->error();\nif ($error[0] != '00000') {\n  $this->logger->critical('ERROR', [\"sql\" => $query,\"error\" => $error]);\n}\n\n}\n``. +1. I wrote in my new version(object)$medoo->select()too. But this is ugly. So I change all positions from$data->usernameto$data['username'].. Where the columns?INSERT INTO table VALUES (1, 2). My query works with and without a semicolon. \n(Useexec()` for INSERT/UPDATE queries.). Branch updated. @wakerman @doodlemeat \n$database->select(\"account\", \"user_id\", [\n// Single condition\n\"ORDER\" => [\"user_id\" => \"ASC\"],\n/* or: \"ORDER\" => [\"user_id\" => \"DESC\"], */\n]);\n. https://github.com/catfan/Medoo/issues/516#issuecomment-273734786. I think there is an option called FLAG_FOUND_ROWS\nhttp://php.net/manual/en/pdo.exec.php#refsect1-pdo.exec-returnvalues\n\nPDO::exec() returns the number of rows that were modified or deleted by the SQL statement you issued. If no rows were affected, PDO::exec() returns 0.\n\n. Thanks!\n$database->pdo->exec() is a good compromise for both, I think.. see https://github.com/catfan/Medoo/issues/508\ntannu13 commented on 14 Dec 2016\nYeah that is a drag, running it via Command Line, though you can run below command\nSET SQL_MODE = ANSI_QUOTES\nThink, this changes (for the session) your default quotes and the query works :)\n. Affected rows stored in rowCount():\n$medoo->pdo->rowCount();\nor try this:\n$updateResult = $medoo->update(/* ... */);\n$updateResult->rowCount();\nsource:\n https://stackoverflow.com/a/7731252\n http://php.net/manual/en/pdostatement.rowcount.php. I can't reproduce the mistake. If the problem should occur again, I reopen this issue.. see #508\n\ntannu13 commented on 14 Dec 2016\nYeah that is a drag, running it via Command Line, though you can run below command\nSET SQL_MODE = ANSI_QUOTES\nThink, this changes (for the session) your default quotes and the query works :)\nhttps://github.com/catfan/Medoo/issues/578#issuecomment-304253233\n\ncase 'mysql':\n    // Make MySQL using standard quoted identifier\n    $commands[] = 'SET SQL_MODE=ANSI_QUOTES';\nhttps://github.com/catfan/Medoo/issues/116#issuecomment-45970936. ",
    "iNilo": "Also having this issue.\n. ",
    "lluiscab": "IDK why but It has been cloned\n. Thanks ;) I feel so stupid right now ;)\n. ",
    "jmyeom": "code should be this:\n\n$obj = new medoo();\n$post = $obj->select(\"post\",\"*\",[\n    \"ORDER\" => [\n        \"id\" => \"ASC\"\n    ],\n    \"LIMIT\" => 6\n]);\nprint_r($post);\n. \n",
    "sigurdbuchberger": "thanks @jmyeom  that worked :)\n. ",
    "merajmehri": "Thanks @jmyeom worked :)\n. ",
    "jfcherng": "Some personal opinions.\n- $externalPDO coule a key/value pair in $options so the interface of the constructor remains.\n- Lots of tabs/spaces changes?\n- Recently, there was a issue to add namespace for Twig but rejected. The reason is, it helps nothing and currently Twig works fine. I do not know how Medoo thinks though.\n. ",
    "oscarr-reyes": "i just found out it was a problem on column selection.. my bad\n. ",
    "assbach": "@Jeff-P how did you solve this issue? I'm trying to get this select in meedo:\nSELECT COUNT(*) FROM rechnungen WHERE YEAR(datum) = \"2017\" AND QUARTER(datum) = 1. ",
    "Yousha": "You must use bracket [COLUMN NAME] on column name.. \"anonymous\" ? what's that?\nYou meant \"positional parameter\" ?\nAnd the difference between  positional parameter(?) and named parameters(:) is that named parameters are a bit advanced, they don't have to be bound in order they appear. You can also repeat one named parameter multiple times in the statement, but you can bind it only once to pass the value.\n^ this also leads you to write less code!\nAlso in positional parameter(?) you'll have to take care about the order in which they will be bound to the query.\nThis issue must be closed.. @Andrews54757, @Dans24\nIs that illegal to commit some MINOR changes?\nI'm here to contribute(by ANYWAY), not just downloading/using the open source projects like you.\nBoth stop posting off-topics/spam.. > Lets be civilized. Lets respect each other.\nlol says US dude\nFirst you must drop your Gun...\nAnd yea, you are a Professional developer: https://github.com/Andrews54757?tab=repositories. ",
    "etcook": "@Yousha Thanks for responding. I tried that, unfortunately it still seems to sanitize it out.. ",
    "whenry": "I based this off master branch - is master not fully merged into develop branch?  Let me know if I need to remake changes off develop branch.\nThanks\n. ",
    "klodha": "Perhaps my issue with MSSQL schema is related to this https://github.com/catfan/Medoo/issues/824. $this->db =  new Medoo([\n            'database_type' => 'mssql',\n            'database_name' => 'medoo_test',\n            'server' => '192.168.100.5',\n            'username' => 'sa',\n            'password' => 'somepasswordnottoshared'\n        ]);\nThis is how connection is configured, and yet debug() with MSSQL returning table name quoted with \" character, making it invalid for MSSQL. \nAnd it is using php_pdo_sqlsrv driver as MSSQL is running on a Linux server (a docker container). Let me know if any further details are required about this case.. @catfan also in Medoo.php I couldn't find any check in tableQuote method which handles quote differentially based on database server type. If I am missing something here.. Sorry but $this->db->select(\"users\", \"*\"); (i.e. not mentioning schema name) doesn't work. This generates MSSQL query SELECT * FROM [users] and that won't run in SQL Studio either. \nSELECT * FROM [users]\nStarted executing query at Line 1\nMsg 208, Level 16, State 1, Line 1\nInvalid object name 'users'.\nTotal execution time: 00:00:00.043\nPerhaps this might work if there is only one schema in database. But my MSSQL database has 3 different schemas. If I specify schema name like SELECT * FROM [game].[users] it works fine in SQL Studio. So my understanding is to get same query generated via my application. \nWhile looking around for fix for generating a query with [ ] instead of \", I found that tableQuote method is defined as protected in Medoo class. So I created a new class in my code DatabaseConnection extending the Medoo class. then I override the tableQuote method like below:\nprotected function tableQuote($table)\n{\n    switch ($this->type)\n    {\n        case 'mssql': \n            $parts = explode('.', $table);\n            $toReturn = '';\n            foreach($parts as $part)\n            {\n                $toReturn = $toReturn  . '[' . $part . '].';\n            }\n            $toReturn = substr($toReturn, 0, strlen($toReturn) - 1);\n            return $toReturn;\n        default:\n            return '\"' . $this->prefix . $table . '\"';\n    }\n}\nThis is not optimal code, but my purpose was just to test the fix. In my application I used new DatabaseConnection to create db object and \n$query = $db_connection->debug()->select('game.users', '*'); \necho $query . \"\\n\";\nGenerated exact query as I can run in SQL studio with this change. Then I executed $users = $db_connection->select('game.users', '*'); and got all 400 records of my table dumped into $users array in PHP.\nI can confirm that at least in my case missing [ ... ] for schema, table name is the issue.\n. In addition to above fix, another option is not to add \" character. In that case, query will be like:\nselect top 1 * FROM game.user. \nFor that tableQuote function might look similar to:\n```\nprotected function tableQuote($table)\n{\n    switch ($this->type)\n    {\n        case 'mssql': \n            return  $this->prefix . $table;\n        default:\n            return '\"' . $this->prefix . $table . '\"';\n    }\n}\n```\nThis works as well. But then having object notation is better than dot notation in MSSQL table names. \nHowever given that no one else faced this problem ( I didn't find any Github issue in project with this kind of error), I am still hoping that I am missing something somewhere, and really need not to override this class/method. \nPlease suggest. \nThanks for your support and wonderful library, this seems only block for me as of now and unless we can find an optimal solution, I can perhaps go with this overridden method approach. . Thanks for the revert. Given that I have no control over MSSQL database (its a vendor database) and can't merge schemas, I have to use this existing structure only. \nSo in that case given the approach I took for overriding tableQuote method with a check for MSSQL database type working with both MySQL and MSSQL database in my case, I will go for that. As to me it seems easier than switching away from this wonderful database library. \nIf you suggest, I can make a fork of repo, make this change particular change. So that if anyone else faces similar issue, can use that. . ",
    "aswzen": "fixed on https://github.com/carestad/Medoo/commit/876df443b89e55d7a5748f1b721fa13e191fd8af. ",
    "tannu13": "Try the array style syntax for Order By -- \n\"ORDER\" => [\"u_company.co_name\" => \"DESC\"]\nHope it helps.. Yeah that is a drag, running it via Command Line, though you can run below command\nSET SQL_MODE = ANSI_QUOTES\nThink, this changes (for the session) your default quotes and the query works :). $datas = $database->select(\n    \"events\",\n    \"*\",\n    [\n        \"AND\" => [\"category\" => \"music\"],\n        \"ORDER\" => [\n            \"position\" => \"DESC\",\n            \"end_date\" => \"DESC\"\n        ]\n    ]\n);\nWas not able to run this but the idea here is that your 'WHERE' clause and the 'ORDER BY' clause (many others) are passed at the 3rd argument's position under the same array separated by different respective indexes. Even if this doesn't work, 'cause I haven't run this and I make stupid errors that are usually invisible to my naked eye :) but the above info might sort u out.. ",
    "gamelaster": "Try to pull request :-) . ",
    "timbotron": "I would heartily second this. I'm in a similar situation where I have a long-running script. I had to re-initialize a new instance every so often, to keep memory under control.. I think it's a SQL thing. It knows that it doesn't need to actually run the UPDATE statement if nothing would change, so it doesn't affect any rows.. ",
    "jianfan0709": "you need to open debug select sql\uff0ccheck your sql condition\u3002\nRRRena\n\n\u5728 2016\u5e7412\u670821\u65e5\uff0c08:54\uff0cOno Naoki notifications@github.com \u5199\u9053\uff1a\nmysql field uid = 1,2,13,14,12\n2 medoo \"city[~]\" => \"2\"\n3 to: 2,12,\n4 i want it 2, no 12\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "mikhailrepka": "Ok, bad way is\n$user = $database->select(\"users\",\"email\",[\"id\" => \"1\"]);\n$user = (object) $user[0];\necho \"email: \".$user->email; // result: email: hello@world.com. Anyone?. ",
    "hornta": "@wakerman I understand how to do it. The docs were just incorrect.. ",
    "StefansArya": "Hi buddy, I already fix that problem..\nYou better check it out: #510 . Good idea, it will cover the NOT LIKE too..\nBtw, does it work with:\n$database->select(\"account\", \"id\", [\n    \"name[~]\" => [\n        \"AND\" => [\"lon\", \"on\"],\n        \"OR\" => [\"Foo\", \"bar\"]\n]);. Add on this line. Maybe >~\nThe regex will be\n(\\[(?<join>\\<|\\>|\\>\\<|\\<\\>|\\>\\~)\\])?(?<table>[a-zA-Z0-9_]+)\\s?(\\((?<alias>[a-zA-Z0-9_]+)\\))?. @catfan Yeah, I know that I don't need to create pull request. I already feel it when I dive into your library..\nAnyway, thanks for your time!. It would be better if you named the function to \"reconnect\" :). ",
    "BartlomiejJasinski87": "I change the OR condition to AND in your library and its works. ",
    "robertausberlin": "Thank you a lot! Seems I was blind. Now the example works.\nI also did not realize I had to change the path to \"mysql.sock\" (actually I have no idea what this is) as well as I was not able to get a require statement done properly with composer. I did a simple include of Medoo.php and it works fine. Thanks again and best wishes! -rob. ",
    "ishraaq21": "I also wasn't asking this way, rather an in-built solution.. ",
    "QuantumRevenger": "I can confirm this bug, it's becoming really annoying because my IDE is reporting errors when in fact there isn't any. A fix much desired ASAP.. ",
    "Linukso1D": "I'll try escaped all table and field with - ` , this char but on answer I get \"false\".. ",
    "johnnycsy": "7.1.7\u4e5f\u51fa\u73b0\u8fd9\u6837\u7684\u95ee\u9898. ",
    "acumpab": "I am having the same trouble. ",
    "km3945": "In the CLI mode need to be modified. Mainly to do the \n```php\n    // Variable\n    protected $logs = [];\nrelated changes. ",
    "imaginezz": "Thank you, i will try it .. ",
    "Glennmen": "Indeed please enforce PSR-2. ",
    "Krzysiu": "Thanks, that does the trick!. ",
    "remylindsay": "It was a simple typo: should have been database.db instead of database/db.. ",
    "corientdev": "+1. ",
    "anaggh": "Medoo v1.4.1 was released - https://github.com/catfan/Medoo/releases. I can confirm this bug exists when running Medoo v1.4 or v1.4.1 on Windows 7 (xampp-win32-7.1.2-0-VC14-installer) to be specific. When I tried it again on Ubuntu XAMPP, the bug does not occur. @catfan Is Medoo supported on Windows?. @catfan PHP v7.1.2\nXAMPP Windows 7:\nstring(13) \"591963f924c4a\" string(13) \"591963f924c4a\"\nXAMPP Ubuntu 16.04\nstring(13) \"591964458e9b3\" string(13) \"591964458eba1\". Btw, this is not a XAMPP related bug. It is a Windows related bug. Even XAMPP alternatives (on Windows) would be affected.\nFrom http://php.net/manual/en/function.uniqid.php\n```\nWarning\nThis function does not guarantee uniqueness of return value. Since most systems adjust system clock by NTP or like, system time is changed constantly. Therefore, it is possible that this function does not return unique ID for the process/thread. Use more_entropy to increase likelihood of uniqueness.\n``. Maybe it is Windows 7 related then. I triedvar_dump(uniqid());` again on DokuWiki MicroApache (Windows) WebServer (https://download.dokuwiki.org/) and it was returning the same ID. Anyway, thank you for fixing! <3. Why not open source the site and docs? Maybe people could help fix typos/ improve docs.. Some pages are broken:\n\nhttp://medoo.in/api/collaboration\nhttp://medoo.in/api/whatsnew\nhttp://medoo.in/api/raw. Add this to option PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,. \n",
    "sihar": "I think you can't use update method.\nMy suggestion, you can use query method with prepared statement like this\n$database->debug()->query(\n    \"UPDATE users SET user_password=:passwordnya WHERE md5('iduser')=:idnya\", [\n        \":passwordnya\" => \"this is passwordnya\",\n        \":idnya\" => \"this is id user\"\n    ]\n)->fetchAll();\nhttps://medoo.in/api/query. ",
    "mysizeofcn": "Oh forget version , so I used the Medoo Version is 1.4.1. THANKS 4 MUCH. ",
    "wongwangki": "I also got this problem, i query a wrong query\nie: $db->select(INVALID_TABLE,[]);\nthen $db->error();\nit always return 00000, but there is an error when i var_dump in  the core : $query->errorInfo();. select() function:\n$query = $this->exec($this->selectContext($table, $map, $join, $columns, $where), $map);\n        return $query->errorInfo();\nadd this line, it shows the correct error info;\nbut doesn't show when call $db->error();. ",
    "ParshvaZymr": "Hi @catfan  Here are my xampp version detail \n\n. Yes, it is working from develop branch... Thanks. ",
    "Labuurii": "Oh sorry, I guess my search skills needs an update^^. ",
    "zenonuk": "Noted now fixed in latest release.\n. ",
    "zeeshanyshaikh": "My Bad :( I missed the ending brackets in my code, not sure about the example which was given. Also, i have to enable the options to debug further.\n$dbobj = new Medoo([\n'database_type' => 'sqlite',\n'database_file' => 'database.db',\n'option' => [\nPDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n],\n]);. ",
    "bits-of-static": "change line 992 (or seek for case 'Number') to:\ncase 'Number':\n    $stack[ $column_key ] = (double) $data[ $column_key ];\n    break; \n. ",
    "JeansReal": "Same here!. ",
    "Bust3D": "The change on case 'Number': working fine if the numbers are bigger than 1.\nall range between 0.01 - 0.99 returning 0\nIs there a fix for this issue too ?. ",
    "MejorCodigo": "Ahh ok, so executing something like $database->select(); will run a prepared statement? @catfan . Oh ok, perfect. Thanks a lot for clearing that up! So far that's the only thing I needed cleared up. Thanks again! :). Medoo already supports Group By, example code from the docs:\n```\n$database->select(\"account\", \"user_id\", [\n        // GROUP by single value\n    'GROUP' => 'type',\n// GROUP by array of values\n'GROUP' => [\n    'type',\n    'age',\n    'gender'\n],\n\n// Must have to use it with GROUP together\n'HAVING' => [\n    'user_id[>]' => 500\n]\n\n]);\n```\nhttps://medoo.in/api/where. Thanks!. ",
    "MrMaxie": "As far as I understand, double quotes (which Medoo uses) require that the name of the columns/tables be an identifier. The identifier may contain the following characters (in the unexpanded version): [0-9a-zA-Z$_ ]. If you want to use other characters inside the name you have to backticks, which tells SQL that it is a real string rather than an identifier.\nSwap in around 356 lines, double quotes with backticks.\nI think it would be cool if Medoo noticed such conflict of characters and will change double quotes into backticks for strings containing characters different than default identifier characters, or statically maybe change them, because I don't see any contraindications.. ",
    "lamuzzachiodi": "I think the real problem is the Medoo's assumptions about permitted characters in identifiers, not considering others even quoted (at least on mysql).\nWorkaround?. Add the \"special\" character in the regexps. \nI guess the solution is to have a way of \"push\" the char/chars in the regexps, i,e:\n// [optional] Special char\n    'special_char' => ':',\nor something like that.. > Hard to know it is a keyword or a data\nIt sounds like Medoo could confuse keywords with data or vicecersa if i use the incorrect sensitivity. It's possible?. I don\u00b4t think so.\n> Will be easier to discover ... SQL keywords...\nMay be, but the convertion should not be so complicated :  for example to use  \"array_change_key_case\"  for change all a complete array (i.e \"WHERE\").\nEven PHP it's partially sensitive. Because that you could write 'select' in your example above. ;-)\n. ",
    "magikstm": "As of today there are no tests.. There is replace:\nhttps://medoo.in/api/replace\nAs well as update:\nhttps://medoo.in/api/update. ",
    "CameronJThomas": "Thanks for your response. I should probably elaborate a little on the structure of my app.\nIn order to restrict access to the database object by third party plugins, I am keeping it private (rather than using globals/constants/etc.) and passing it between my application's classes via the constructors like so:\n```\n$database = new Medoo([...]);\n$my_class = new My_Class( $database );\n```\nBut currently I am having to pass through two separate variables, i.e.:\n$my_class = new My_Class( $database, $prefix );\nThis is of course not a major issue, but it would be much cleaner for me to just pass through the $database object and then have each class retrieve the prefix from there, rather than clogging up my constructors.. ",
    "kuofp": "You guys are talking about different things.\nIt seems Medoo dosen't support batch update yet.(Something like INSERT ... ON DUPLICATE UPDATE in mysql). Not a medoo problem.\nIt's relate to max_user_connections and max_connections config setting.\nCheck  out:\nhttps://stackoverflow.com/questions/11767487/disable-max-user-connections-limits\nhttps://stackoverflow.com/questions/11183727/how-to-solve-mysql-max-user-connections-error. Could you please enable display error, and provide more info.\nAnd I found everything works fine except the error which is raised at the last 2 lines.\nCannot access protected property Medoo\\Medoo::$database_type. ",
    "brownsugar": "Hi @catfan ,\nare there any methods to update multi rows by multi conditions?\nSomething like:\n// Update table set foo=foo1 where id=1, set bar=bar2 where id=2\n$database->update(\"table\", [\n    [ \"foo\" => \"foo1\" ],\n    [ \"bar\" => \"bar2\" ],\n], [\n    [ \"id\" => \"1\" ],\n    [ \"id\" => \"2\" ],\n]);\nCurrently I'm using loop to handle this.. ",
    "Philippe-M": "oupss, Sorry I had not seen this in the doc.. I'm use this query for import ~6000 register and i'm create a array before to import and load the array value_query. If i'm use your code i'm import one bye one.\n```\n      echo '['.date('d-m-Y H:i:s').'][info] --- Import du fichier stock.csv'.\"\\n\";\n      $filename = DIR.\"/csv/stock.csv\";\n      if(file_exists($filename)) {\n        echo '['.date('d-m-Y H:i:s').'][info] Le fichier a \u00e9t\u00e9 trouv\u00e9'.\"\\n\";\n        if(($handle = fopen($filename, 'r')) !== FALSE) {\n          echo '['.date('d-m-Y H:i:s').'][info] Vidage de la table'.\"\\n\";\n          $database->query('TRUNCATE stock');\n          echo '['.date('d-m-Y H:i:s').'][info] Insertion des donn\u00e9es'.\"\\n\";\n          while(($data = fgetcsv($handle, 100000, '|')) !== FALSE) {\n            $champs = count($data);\n            for($i = 0; $i < $champs; $i++) {\n              $data[$i] = preg_replace('/^\\\"*/', '', $data[$i]);\n            }\n            $value_query[] = \"('\".$data[0].\"', '\".$data[1].\"', \".$data[2].\", \".$data[3].\")\";\n          }\n      $database->query(\"\n        INSERT INTO stock\n        (itmref, status, qtystu, cumallqty)\n        VALUES :values\n        ON DUPLICATE KEY UPDATE itmref=VALUES(itmref)\", [\n          \":values\" => implode(',', $value_query)\n        ]\n      );\n\n      fclose($handle);\n      echo '['.date('d-m-Y H:i:s').'][info] Importation termin\u00e9e'.\"\\n\";\n    } else {\n      echo '['.date('d-m-Y H:i:s').'][error] erreur pendant l\\'import : '.var_dump($handle).''.\"\\n\";\n    }\n  } else {\n    echo '['.date('d-m-Y H:i:s').'][error] Le fichier '.$filename.' n\\'a pas \u00e9t\u00e9 trouv\u00e9'.\"\\n\";\n  }\n\n```. I use it already \npublic function createTable($tableName) {\n    switch ($tableName) {\n      case 'stock_tmp':\n        $this->database->query(\"\n          CREATE TABLE `stock_tmp` (\n            `itmref` varchar(20) NOT NULL,\n            `status` varchar(1) NOT NULL,\n            `qtystu` decimal(10,5) NOT NULL,\n            `cumallqty` decimal(10,5) NOT NULL\n          ) ENGINE=InnoDB DEFAULT CHARSET=latin1;\"\n        );\n        var_dump($this->database->error());\n        break;\n    }\nBut it does not work.. I am trying to use error handling for any queries I make through Medoo. This example is another among many others in my scripts. This query is just an example. I use Medoo for all my program which makes insert, get, update ... And for the moment if a few things go wrong during the query I have a big error php and not the error handling as provided in Medoo. The solution\n```\n  public function getStatsMois($bpcord, $bpaadd, $annee, $mois, $tsicod, $type) {\n    $query  = \"SELECT MONTH(sinvoicev.invdat) as mois, SUM(sinvoiced.netpri*sinvoiced.qty) AS netpri\";\n    $query .= \" FROM sinvoicev\";\n    $query .= \" INNER JOIN sinvoiced ON sinvoicev.num = sinvoiced.num\";\n    $query .= \" WHERE\";\n    $query .= \"  sinvoicev.invtyp = '\".$type.\"' AND\";\n    $query .= \"  sinvoicev.bpcinv = '\".$bpcord.\"' AND\";\n    $query .= \"  sinvoicev.bpaadd = '\".$bpaadd.\"' AND\";\n    $query .= \"  YEAR(sinvoicev.invdat) = '\".$annee.\"'\";\n    if(!empty($tsicod)) {\n      $query .= \" AND sinvoiced.tsicod = '\".$tsicod.\"'\";\n    }\n    if(empty($mois)) {\n      $query .= \" AND MONTH(sinvoicev.invdat) BETWEEN '01' AND '12'\";\n      $query .= \" GROUP BY MONTH(sinvoicev.invdat)\";\n    } else {\n      $query .= \" AND MONTH(sinvoicev.invdat) = '\".$mois.\"'\";\n    }\n------- > $stat = $this->database->query($query)->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP);\n\nreturn $stat;\n\n}\n```. ",
    "charm-v": "\u5662~\u627e\u5230\u4e86last()\u65b9\u6cd5\uff0c\u5e0c\u671b\u80fd\u66f4\u65b0\u6587\u6863. OK\uff0cThx~. I search Baidu in Medoo, see the first is http://medoo.lvtao.net/, think this is your official website, now know the real website address.23333333~. OK, thanks. ",
    "mbrowngold": "I've noticed this as well.. ",
    "anyforever": "@Andrews54757 yes.\nselect from slave, insert/update/delete/... from master. @Andrews54757 I'll try it. Thanks.. ",
    "bluestonemds": "@Andrews54757 thank you for your help.  I finally know the error how to happen. below is my query code:\n$result = $this->db->select(\"ac_order\",\n                                       [ \"card_num\", \"order_date ],\n                                       [\"and\" => [\n                                              [ \"order_date[>]\" => '2017-08-01' ]),\n                                              [\"pay\"] => '1'\n                                                         ]\n                                                          ]);\nit should not work. but I capitalize the 'and'  to 'AND', the query worked well. the issue don't happen to the early version of MEDOO, like 1.1.2.. ",
    "596868636": "@catfan . \u8c8c\u4f3c\u6211\u53d1\u73b0\uff0c\u5176\u5b9e\u662f\"C001\"  \u53cc\u5f15\u53f7\u5bfc\u81f4\u7684\uff0c\u8fd9\u4e2a\u6ca1\u505a\u5904\u7406. ",
    "Dans24": "It just save some lines of code. ",
    "yahaphper": "It is embarrassing, may lead to the layout of the code, I was using PHPStorm directly generated, but I think you can add about NOT LIKE operation, if disturbed please ignore, sorry. ",
    "Cstome": "Code\uff1a\nmedooDB -> update($RequestHandle -> dbTable, \n        ['day' => $day, 'operatoruid' => 100001, 'operaip' => 127.0.0.1, 'goaldetails' => json_encode($list)], \n        [\"AND\" => [\n            'year' => $year, \n            'week' => $week\n            ], \n         \"LIMIT\" => [0, 1]\n        ]);\nThe output SQL statement in debug mode:\nUPDATE \"dbtable\" SET \"day\" = '', \"operatoruid\" = '100001', \"operaip\" = '127.0.0.1', \"goaldetails\" = '[{\\\"area\\\":\\\"\\\\u5e7f\\\\u5dde\\\",\\\"submit\\\":4564,\\\"loan\\\":4567},{\\\"area\\\":\\\"\\\\u6df1\\\\u5733\\\",\\\"submit\\\":4564,\\\"loan\\\":4567},{\\\"area\\\":\\\"\\\\u4e0a\\\\u6d77\\\",\\\"submit\\\":4564,\\\"loan\\\":4567}]' WHERE \"year\" = 2017 AND \"week\" = 35 LIMIT 0,1. Yep, I'm using an old version, now I upgrade to new version and the solved the problem.. ",
    "lautiamkok": "found the answer - get(). thanks!. ",
    "tds4u": "@Andrews54757\nIf you have user field tables with dynamic fields for data than it's equal whether to join with * or list all table fields. Getting user preferences in this case needs all fields. So I can't select only needed fields. And first getting field names will result in additional query which also can be slow on MySQl.. Doesn't work. Problem is around line 386:\n$match:\nArray(\n  [0] => f.\n  [column] => f.\n  [1] => f.\n)\npreg_match('/(?<column>[a-zA-Z0-9_\\.]+)(?:\\s*\\((?<alias>[a-zA-Z0-9_]+)\\)|\\s*\\[(?<type>(String|Bool|Int|Number|Object|JSON))\\])?/i', $value, $match);\n. That nearly works. Line  1015: Undefined index\nphp\ncase 'String':\n    $stack[ $column_key ] = $data[ $column_key ];\n    break;\nLine 352:\n```php\nprotected function columnQuote($string)\n{\n    //preg_match('/(^#)?([a-zA-Z0-9_]).([a-zA-Z0-9_])(\\s[JSON]$)?/', $string, $column_match);\n    preg_match('/(^#)?([a-zA-Z0-9_]).(*|([a-zA-Z0-9_]))(\\s[JSON]$)?/', $string, $column_match);\n    if (isset($column_match[ 2 ], $column_match[ 3 ]))\n    {\n        if ($column_match[ 3 ] === '*') {\n            return '\"' . $this->prefix . $column_match[ 2 ] . '\".' . $column_match[ 3 ];\n        }\n        return '\"' . $this->prefix . $column_match[ 2 ] . '\".\"' . $column_match[ 3 ] . '\"';\n    }\nreturn '\"' . $string . '\"';\n\n}\nLine 386:php\n//preg_match('/(?[a-zA-Z0-9_.]+)(?:\\s((?[a-zA-Z0-9_]+))|\\s[(?(String|Bool|Int|Number|Object|JSON))])?/i', $value, $match);\npreg_match('/(?[a-zA-Z0-9_.*]+)(?:\\s((?[a-zA-Z0-9_]+))|\\s[(?(String|Bool|Int|Number|Object|JSON))])?/i', $value, $match);\n```. ",
    "dagobertdebug": "hello catfan, thanks for your prompt reply. \nI am not asking for a change, I more kindly ask for your support as an expert. I tried implode/explode and the string is fine, but the values are always recognised as one value in the WHERE clause, and not as several comma separated values.\nSo for example, the following code is working: \n[\"OR\" => [\"site\" => [24,25,26]]\nBut 24,25,26 is not hardcoded, I get the data dynamically as a string \"24,25,26\", but it can be \"343,754,847,485\" as well, you know what i mean?\nAnd when i get the data as a string, I have to pass it as a string to the WHERE clause. But it is not recognised.\n$data= \"23,24,25\";\n[\"OR\" => [\"site\" => [$data]]\nAll I want is to pass a string with the comma separated data. \nCan you help please?\n. @Andrews54757: Thanks, that's the solution! Easy, and I learned something. Thanks!\n@catfan Thanks for your support and this great library.\nCheers \nDago\n. ",
    "BrianMoreno1994": "That's the only insert statement being executed. Which is why I'm kinda confused, I don't really know whats going on. But I'll continue checking, I'll report back if I ever find the answer. . ",
    "Zippersk": "Try to insert user_id as number (delete apostrophes). Not as a string.\n$database->insert(\"cart\", [\n 'user_id' => 7,\n 'created_at' => time()\n]);. I have use:\n$database->query(\"INSERT INTO Author DEFAULT VALUES\");. ",
    "nimbusLiQuid": "Same issue for me.. ",
    "Chillifish": "There were issues with the previous SQL, I now have the following:\n$this->statuses = $database->debug()->select(\n\n    \"ch_station\",\n    [\"[><]ch_statuses\" => [\"status\" => \"id\"]],\n    [\"ch_station.id\", \"ch_station.name\", \"ch_statuses.status\", \"ch_station.time\"],\n    [\"ch_station.id[!]\" => $client_id]\n);\n\nThis produces the following SQL:\nSELECT\n    \"wp_ch_station\".\"id\",\n    \"wp_ch_station\".\"name\",\n    \"wp_ch_statuses\".\"status\",\n    \"wp_ch_station\".\"time\" \nFROM\n    \"wp_ch_station\" \n    INNER JOIN\n        \"wp_ch_statuses\" \n        ON \"wp_ch_station\".\"status\" = \"wp_ch_statuses\".\"id\" \nWHERE\n    \"wp_ch_station\".\"id\" != 31\n\nIf I paste that into phpmyadmin (or anything else) it has lots of check syntax errors. If I clean it up as below, I get the expected results.\nSELECT\n    `wp_ch_station`.id,\n    `wp_ch_station`.name,\n    `wp_ch_statuses`.status,\n    `wp_ch_station`.time \nFROM\n    `wp_ch_station` \n    INNER JOIN\n        `wp_ch_statuses` \n        ON `wp_ch_station`.status = `wp_ch_statuses`.id\nWHERE `wp_ch_station`.id != 31\n\n. I've got it to work by going through the Medoo class and changing quotes to backticks and deleting quotes where I saw fit. I don't know enough about the class to know if it will have any knock on effects, but it does work now. I must say, I'm a bit confused by why Medoo has been coded this way.. Thanks, I tried using that command, but it didn't work.. ",
    "Baom92": "thx. ",
    "michhhh": "Does it store in database  the value as 1/0 or true/false?. ",
    "thureos": "3.6.20 turns out that the server I'm working on is pretty old so... Thanks!. ",
    "louishua": "thanks!. I search it;\nset SQL_MODE=ANSI_QUOTES;\n. ",
    "sourabhbajaj": "Hi, I did check out previous thread about this issue : https://github.com/catfan/Medoo/issues/133. The solution does not seem to be working on the current stable version of Medoo. When is the new version 1.5 is releasing? . Consider this usecase, I have posts which can be upvoted or downvoted and I want to fetch what's the vote of the current logged in user for each post in the feeds. The query would look something like this, lets say the current logged in user has id 5:\nselect id, text, post_votes.vote as myvote from posts left join post_votes on post_votes.post_id=posts.id and post_votes.user_id=5\nI could not find any way to do this with Medoo except raw with join. For any application with voting, this seem to be an important usecase. I have added support for raw in join and would like to make a pull request if you approve? @catfan \nThank you. $medoo->get('table','*',[\n'field_a'=>Medoo::raw('field_b')\n]);. Thank you for the help. This is what I was looking for. . This results in this:\nselect question.id, question.text, vote.vote as myvote from question left join vote on vote.questionId=question.id and vote.userId=question.2 where question.id=6;\nBasically, it reads value as if its a column from the other table.\n. This will not select any post if the user has not voted on it. You're telling SQL to select the rows which has vote.userId=2. In the query I suggested, it will select the post but the vote column will result null.. I have given a simplified version of my table structure. The query I suggested works. These are the 2 tables of concern:\nPOST: id, text\nVOTE: post_id, user_id, vote\nNow I need to fetch all the posts with the info that a particular user has voted on it or not. What other way do you suggest?. Check out the accepted answer in this post: https://stackoverflow.com/questions/22104308/where-clause-for-only-one-table-in-a-left-join?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa. @scr4bble I have created a wrapper to handle this issue. If you want, I can share that with you. . In case anyone else faces the same problem until medoo accepts and addresses this issue, here's a Database class wrapper which inherits Medoo so uses all the functions exactly the same. \n```\n<?php\nnamespace App\\Helper;\nuse Medoo\\Medoo;\nclass Database extends Medoo{\n  public function __construct($config){\n    parent::__construct($config['database']);\n  }\nprotected function selectContext($table, &$map, $join, &$columns = null, $where = null, $column_fn = null)\n  {\n    preg_match('/(?[a-zA-Z0-9_]+)\\s*((?[a-zA-Z0-9_]+))/i', $table, $table_match);\nif (isset($table_match[ 'table' ], $table_match[ 'alias' ]))\n{\n  $table = $this->tableQuote($table_match[ 'table' ]);\n\n  $table_query = $table . ' AS ' . $this->tableQuote($table_match[ 'alias' ]);\n}\nelse\n{\n  $table = $this->tableQuote($table);\n\n  $table_query = $table;\n}\n\n$join_key = is_array($join) ? array_keys($join) : null;\n\nif (\n  isset($join_key[ 0 ]) &&\n  strpos($join_key[ 0 ], '[') === 0\n)\n{\n  $table_join = [];\n\n  $join_array = [\n    '>' => 'LEFT',\n    '<' => 'RIGHT',\n    '<>' => 'FULL',\n    '><' => 'INNER'\n  ];\n\n  foreach($join as $sub_table => $relation)\n  {\n    preg_match('/(\\[(?<join>\\<\\>?|\\>\\<?)\\])?(?<table>[a-zA-Z0-9_]+)\\s?(\\((?<alias>[a-zA-Z0-9_]+)\\))?/', $sub_table, $match);\n\n    if ($match[ 'join' ] !== '' && $match[ 'table' ] !== '')\n    {\n      if (is_string($relation))\n      {\n        $relation = 'USING (\"' . $relation . '\")';\n      }\n\n      if (is_array($relation))\n      {\n        // For ['column1', 'column2']\n        if (isset($relation[ 0 ]))\n        {\n          $relation = 'USING (\"' . implode($relation, '\", \"') . '\")';\n        }\n        else\n        {\n          $joins = [];\n\n          foreach ($relation as $key => $value)\n          {\n            $joins[] = (\n              strpos($key, '.') > 0 ?\n                // For ['tableB.column' => 'column']\n                $this->columnQuote($key) :\n\n                // For ['column1' => 'column2']\n                $table . '.\"' . $key . '\"'\n            ) .\n            ' = ' .\n            (\n              $this->isRaw($value)?\n              \"'\".$value->value.\"'\" :\n              $this->tableQuote(isset($match[ 'alias' ]) ? $match[ 'alias' ] : $match[ 'table' ]) . '.\"' . $value . '\"'\n            );\n          }\n\n          $relation = 'ON ' . implode($joins, ' AND ');\n        }\n      }\n\n      $table_name = $this->tableQuote($match[ 'table' ]) . ' ';\n\n      if (isset($match[ 'alias' ]))\n      {\n        $table_name .= 'AS ' . $this->tableQuote($match[ 'alias' ]) . ' ';\n      }\n\n      $table_join[] = $join_array[ $match[ 'join' ] ] . ' JOIN ' . $table_name . $relation;\n    }\n  }\n\n  $table_query .= ' ' . implode($table_join, ' ');\n}\nelse\n{\n  if (is_null($columns))\n  {\n    if (\n      !is_null($where) ||\n      (is_array($join) && isset($column_fn))\n    )\n    {\n      $where = $join;\n      $columns = null;\n    }\n    else\n    {\n      $where = null;\n      $columns = $join;\n    }\n  }\n  else\n  {\n    $where = $columns;\n    $columns = $join;\n  }\n}\n\nif (isset($column_fn))\n{\n  if ($column_fn === 1)\n  {\n    $column = '1';\n\n    if (is_null($where))\n    {\n      $where = $columns;\n    }\n  }\n  elseif ($raw = $this->buildRaw($column_fn, $map))\n  {\n    $column = $raw;\n  }\n  else\n  {\n    if (empty($columns) || $this->isRaw($columns))\n    {\n      $columns = '*';\n      $where = $join;\n    }\n\n    $column = $column_fn . '(' . $this->columnPush($columns, $map) . ')';\n  }\n}\nelse\n{\n  $column = $this->columnPush($columns, $map);\n}\n\nreturn 'SELECT ' . $column . ' FROM ' . $table_query . $this->whereClause($where, $map);\n\n}\n}\n?>\n```\n. @catfan If you'd consider accepting my pull request on this, I would love to contribute this. . ",
    "dhe": "Query\n```\n$database->select(\"data(content)\",[\n    \"[>]users(user)\" => ['content.lastmodifiedby' => 'id']\n    ],                                            \n    [ \n        \"content.id(dbid)\",\n        \"content.timestamp\",\n        \"content.status\",\n        \"content.process\",\n        \"content.description\",\n        \"content.duration\",\n        \"content.lastmodified\",\n        \"content.lastmodifiedby\",\n        \"content.paidjob\",\n        \"content.sorting\",\n        \"content.pinned\",\n        \"user.fullname(lastmodifiedbyname)\",\n        \"weekday\" => Medoo::raw('WEEKDAY ( FROM_UNIXTIME(  ) )'),\n    ],                        \n    [\n        \"weekday\" => date('w',time()),\n        \"userid\"    => '1',\n    \"ORDER\" => [\n        \"content.sorting\" => \"ASC\"\n    ]\n]\n\n);\n``\nError Outputarray(3) { [0]=> string(5) \"00000\" [1]=> int(1054) [2]=> string(42) \"Unknown column 'weekday' in 'where clause'\" }`. You're right: it is not possible to use a dynamic generated virtual table field inside the same query in where clause. Sorry for that issue.. ",
    "guilhermeagirardi": "https://stackoverflow.com/questions/47459178/insert-by-ansi-quotes-mode/47459372. ",
    "banstola": "What version of medoo are you using ?. Please do not put your phpinfo like this in public. I am is it medoo that produce this error? Can you put stacktrace instead if you can because i can not produce the same error on my machine and you have not told what you are trying to do?. It clearly says this \n// [optional] MySQL socket (shouldn't be used with server and port)\n    'socket' => '',\nThen why do you use this when you are using server and port both? . Please remove that socket option. And try again. . For my opinion, there should be unit tests in place. I would actually be interested to write them.. ",
    "thecobe": "Hi\nVersion is 1.4.5\nBye\nMarco\nFrom: Ram Krishna Banstola [mailto:notifications@github.com] \nSent: mercoled\u00ec 29 novembre 2017 11:05\nTo: catfan/Medoo Medoo@noreply.github.com\nCc: thecobe belli.marco@gmail.com; Author author@noreply.github.com\nSubject: Re: [catfan/Medoo] SQLSTATE[HY000] [2002] No handler for this scheme (#673)\nWhat version of medoo are you using ?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/catfan/Medoo/issues/673#issuecomment-347811805 , or mute the thread https://github.com/notifications/unsubscribe-auth/AFEvxPvjFI-t0IsNPBdV2DWUtmnlEUlpks5s7SxcgaJpZM4QtmvX .\n. Hi\ni've uploaded version 1.5.1, same error\nthis is phpinfo\nhttp://ordersmanager.macronstoregrandemilano.com/phpinfo.php\nbye\nMarco\nOn Wed, Nov 29, 2017 at 11:27 AM, Marco Belli belli.marco@gmail.com wrote:\n\nHi\nVersion is 1.4.5\nBye\nMarco\nFrom: Ram Krishna Banstola [mailto:notifications@github.com]\nSent: mercoled\u00ec 29 novembre 2017 11:05\nTo: catfan/Medoo Medoo@noreply.github.com\nCc: thecobe belli.marco@gmail.com; Author author@noreply.github.com\nSubject: Re: [catfan/Medoo] SQLSTATE[HY000] [2002] No handler for this\nscheme (#673)\nWhat version of medoo are you using ?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/catfan/Medoo/issues/673#issuecomment-347811805, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AFEvxPvjFI-t0IsNPBdV2DWUtmnlEUlpks5s7SxcgaJpZM4QtmvX\n.[image: Image removed by sender.]\n. Hi \ndid you checked my issue?\nthanks. Hi\napplication is working for me too in my local machine\nBut when i published it i have this error\n\nFatal error: Uncaught exception 'PDOException' with message 'SQLSTATE[HY000] [2002] No handler for this scheme' \nin /home/mysite.com/Classes/Medoo.php:239 Stack trace: #0 \n/home/mysite.com/Classes/connection.php(38): Medoo\\Medoo->__construct(Array) #1 \n/home/mysite.com/orders/orders.php(3): require_once('/home/ordersman...') #2 {main} thrown in \n/home/mysite.com/Classes/Medoo.php on line 239\ni attached my connection file\nthis is how i call it\n<?php\nrequire '../Classes/connection.php';\n?>\nand this is erro query\n<?php\n$clubs = $database->select(\"orders\", \n[ \"[><]club\" => [\"id_club\" => \"id\"] ], \n[\"club.description (club_description)\",\n\"orders.id (order_id)\"\n]);\n?>\nconnection.txt\n. Hi\nYes it's solved\nThanks\nBye\nMarco\nIl ven 23 mar 2018, 20:56 Catfan notifications@github.com ha scritto:\n\nIs it problem solve after checking out the configuration?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/catfan/Medoo/issues/673#issuecomment-375781272, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AFEvxGTdxFCG8-pAhQFxwH1-8y-cb4peks5thVOCgaJpZM4QtmvX\n.\n. \n",
    "Atomico001": "Fixed with 1.5.1. ",
    "tipleavalentin": "Great, it fixed the problem.\nGood job!. ",
    "bradleymyers": "catfan, What do you mean by id column correctly configured? My id column is integer as PK w/ auto Increment. Using mssql. Having same problem. Want to say this was working at some point. Returns null.. Catfan, here is a bit more information. The record gets created in the db fine. Just no id.\nARRAY\n$dataArray=array(\"mtyId\"=>$_SESSION[\"store\"],\"typeId\"=>null,\"type\"=>\"photo\",\"subType\"=>$_POST[\"type\"],\"title\"=>null,\"description\"=>$_POST[\"description\"],\"postDate\"=>null,\"date\"=>null,\"endDate\"=>null,\"status\"=>\"pending\",\"lastModified\"=>$database->dateFormatDb(),\"lastModifiedBy\"=>$_SESSION[\"user\"][\"Username\"]);\nFunction\npublic function genericInsert($dataArray, $table){\n        $this->debug(false);                \n        $this->insert($table,$dataArray);\n        $error = $this->error();\n        if(!empty($error[2])){\n            $return[\"id\"] = \"\";\n            $return[\"msg\"] = $error[2];\n            $return[\"msgType\"] = \"light-blue accent-2\";\n        }else{\n            $return[\"id\"] = $this->id();\n            $return[\"msg\"] = $this->tablePhrase($table).\" item created.\";\n            $return[\"msgType\"] = \"green\";\n        }\n        return $return;                 \n    }\nFunction Call \n$data = $database->genericInsert($dataArray, \"approvalQ\");\n. I believe I have figured this out.\n`\npublic function id()\n    {\n        $type = $this->type;\n    if ($type === 'oracle')\n    {\n        return 0;\n    }\n    elseif ($type === 'mssql')\n    {\n        //return $this->pdo->query('SELECT SCOPE_IDENTITY()')->fetchColumn();\n        return $this->pdo->lastInsertId();\n    }\n    elseif ($type === 'pgsql')\n    {\n        return $this->pdo->query('SELECT LASTVAL()')->fetchColumn();\n    }\n\n    return $this->pdo->lastInsertId();\n}\n\n`. I ended up just commenting out mssql case and used the default return. . Yeah I get that. I was playing around and weighing my options. The safest\nway I think is to use an application id that is generated and use that to\nselect the record back. But that's not something that should be included in\nyour code I don't think. Thanks for your help.\nOn Sat, Nov 24, 2018, 11:44 AM Catfan <notifications@github.com wrote:\n\nWell, getting the inserted id for MSSQL is not just easy. There are a lot\nof problem and compatibility with this. I will test more version and find a\nbetter way for this database.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/catfan/Medoo/issues/683#issuecomment-441387620, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ATFFDlCzgygzFn4rOk8DaVB39qXdldXWks5uyZNwgaJpZM4Q9zkG\n.\n. \n",
    "pfriedl": "Thanks, adding use Medoo\\Medoo; worked!. ",
    "joserodriguez1": "\nBecause after inserting the data is done, I need to deal with a series of ID corresponding to these data.\nUpdate also has the same problem.\nI love your Medoo very much and have been using it in my project very much. Thanks for your open source!\n\nI know it might be a little late, but if you do the bulk insert:\n$data = $database->insert($table, $array);\nthen get the id:\n$database->id();\nit will return the first id of all, so ... then you get the row count:\n$data->rowCount();\nAnd you are able to code your way out with a for loop to get the rest of the ids, either with the array used in the insert or with the row count.\nIt seems not that beautiful but it is less work for the server than doing several inserts.\nHope this helps someone! :)\n. ",
    "Skyost": "Totally agree.\n:+1:. ",
    "tmblog": "OK turns out it can be overcome by renaming columns:\nhttps://medoo.in/api/select\nCheers. ",
    "xzs1994": "sorry,my english is so bad . this is my question : \nI update and insert operation with the  PDO transaction in the try-catch body, and even if the error field or table name is passed in, the catch cannot catch the error. How can I operate correctly?. ",
    "HeNian": "The value is the JSON string. \nIt's because the JSON string contains double quotes.. ",
    "HASSANDL": "how handle this (NOT OR)?\n$database->select('users', '*', [\n    'NOT OR' => [\n        'id[>]' => 2,\n        'AND' => [\n            'name' => ['AND' => ['%sd', '%sassd']]\n        ]\n    ]\n]);. ",
    "ha-ni-cc": "I have this problem,too.\nUse mysql5.7 and medoo 1.5.4\nAnd I setting this ,the 'has'  can work well\uff1a \n'option' => [ PDO::ATTR_STRINGIFY_FETCHES => true]\nConvert numeric values to strings when fetching. Requires bool.\nI think this is a bug because of comparing with the strict type.\n'''\nreturn intval($result) === 1 || $result === true;\n'''\nwell ?. \u6211\u662f\u8bbe\u7f6e\u4e3a\n'option' => [PDO::ATTR_EMULATE_PREPARES => false, PDO::ATTR_STRINGIFY_FETCHES => true]\uff0chas\u6b63\u5e38\u3002\u3002\u3002\u5f3a\u5236\u628a\u6570\u5b57toString\u3002\u3002\u3002\u8fd9\u6837has\u91cc\u9762\u7684\u5224\u65ad\u5c31\u6b63\u5e38\u4e86\u3002\u3002\u3002\u56e0\u4e3a\u7528\u4e86==='1'\u3002\u3002\u3002. #720 has been discussed for a long time,but I can't see the solution.\nThis debug affected many application scenarios,so I hope the next version can repair it!\n@catfan . ",
    "lovearthhome": "@wendao76 @catfan @ha-ni-cc  yes, it's a bug. now,just use \"PDO::ATTR_EMULATE_PREPARES        => true\" to solve this. . \u627e\u5230\u4e86\u89e3\u51b3\u65b9\u6848\uff1a\"PDO::ATTR_EMULATE_PREPARES => true\" \u3002\u5e94\u8be5\u662fmedoo\u5728\u672c\u5730\u6a21\u62df\u7f16\u8bd1\u7684\u65f6\u5019\u51fa\u4e86\u95ee\u9898\u3002\u4e5f\u61d2\u5f97\u67e5\u4e86\u3002\u867d\u7136\u8fd9\u6837\u727a\u7272\u4e00\u70b9\u6027\u80fd\u3002\u4f46\u53ef\u4ee5\u63a5\u53d7\u3002. @ha-ni-cc \u597d\u5947\u602a\uff0c\u6211\u8fd9\u8fb9\u53ea\u8bbe\u4e86PDO::ATTR_EMULATE_PREPARES => true,\u4e5f\u53ef\u4ee5\u4e86\u3002 @catfan . @ha-ni-cc \u6211\u4eec\u7684\u4ee3\u7801\u5f3a\u70c8\u4f9d\u8d56pdo\u53bb\u628a\u641c\u51fa\u6765\u7684\u5b57\u6bb5\u8f6c\u6362\u4e3a\u539f\u6765\u7684\u7c7b\u578b\uff0c\u6240\u4ee5PDO::ATTR_STRINGIFY_FETCHES\u5fc5\u987b\u8bbe\u4e3afalse\u3002 @catfan . ",
    "mozart77": "If you cast NULL to Int what do you expect? . Don't cast then. ",
    "utkant": "If I have a table where id can be NULL or an integer, and I want the result NULL when NULL and not 0 as in integer 0, since 0 can be a valid id, how can I achieve? I need to add code for that. I believe that this is a bug.\nNULL (id) !== 0(id) .... This means that all fields that have id columns containing NULL values cannot use casting and needs extra processing. I would love it if medoo added a [Id] casting option where this was fixed. Possibility?. Something like this in the mapping switch\ncase 'Id':\n                            $stack[ $column_key ] = is_null($data[ $column_key ]) ? null : (int) $data[ $column_key ];\n                            break;. ",
    "stell": "I tried now something like this, but no luck so far:\n'courtage' => Medoo::raw('IF(<courtage>, \"TRUE\", \"FALSE\")'). Server: 127.0.0.1 via TCP/IP\nServer-Typ: MariaDB\nServer-Version: 10.1.19-MariaDB - mariadb.org binary distribution\nProtokoll-Version: 10\n\npublic function getObjectById($id) {\n\n    $data = $this->db->select('objects', \n       [\n        \"[>]prices\" => [\"id\" => \"oid\"],\n       ],\n       [\n       'courtage' => Medoo::raw('IF(<courtage>, \"TRUE\", \"FALSE\")')\n       ],\n        ['id' => $id, \"LIMIT\" => 1]\n    );\n\n    if (empty($data)) {\n        throw new \\Exception('No object found', 400);\n    }        \n    return $data[0];\n}\n\n. ",
    "aryelgois": "Yeah, sorry about that\nIs there any forum? :3. ",
    "Fahri5567": "You need to import the class\nIf you installed via composer, just use this code to requrie autoloader on the top of your projects like this:\n```\nrequire 'vendor/autoload.php';\n// Using Medoo namespace\nuse Medoo\\Medoo;\nIf not using the composer. Just download medoo.php and put it into the right directory and then require\nrequire  'Medoo.php';\n// Using Medoo namespace\nuse Medoo\\Medoo;\n```\nFor reference, see https://medoo.in/api/new. ",
    "sl5net": "thanks but that i did first.\ncomposer created the vendor folder.\nbut no Medoo folder.\ni renamed to src inside the source file\ni will try as soon i will back home again. thanks all. and sorry that i am beeing so late. \nthe errors from the beginning are solved. now i have problem with\n$file = \"someDB.db\"\n $database = new Medoo([\n 'database_type' => 'sqlite',\n 'database_file' => $file,\n ]);\nprobably becouse i have no someDB.db there.\ni searche a little.\nis there a Medoo for creating a sqliteDb? or easy bestParctice workaround? thanks. ",
    "youngda": "@catfan Thanks, I have already solved. ",
    "jamesst20": "@catfan \nSeems to be ignoring PRs and issues reported, but looks like the project is still maintened.\n2 years ago I believe a fix for this was pushed https://github.com/catfan/Medoo/pull/513 altough it's true the PR code isn't perfect. ",
    "andrewhamili": "Stored Procedure in MySQL also.. ",
    "rvercesi": "I have 1.5.6 and the debug output is\n\"SELECT * FROM mytable WHERE title LIKE '%val%' AND page = 'thispage' ORDER LIMIT start, limit\". ",
    "woubuc": "I'm running into the same issue. I have the following query:\nphp\n$db->select('items',\n  ['[>]users' => ['owner' => 'id']],\n  [\n    'items.id',\n    'items.name',\n    'owner' => ['users.id (id)', 'users.name (name)']\n  ]\n);\nExpected output (JSON):\njson\n{\n  \"id\": 1,\n  \"name\": \"item name\",\n  \"owner\": {\n    \"id\": 2,\n    \"name\": \"user name\"\n  }\n}\nActual output (JSON):\njson\n{\n  \"id\": 2,\n  \"name\": \"user name\",\n  \"owner\": {\n    \"id\": 2,\n    \"name\": \"user name\"\n  }\n}\nSo it will use the value of the last field with the same name for all fields with that name.\nI've noticed when using debug mode, that the SQL query adds these alias in the query (users.id AS id). It seems to me that this would be fixed by selecting the fields as their actual name (users.id) and then mapping them to the data model when the response comes back.. ",
    "eedba": "$db->select('question', ['[>]vote' => ['questionId' => 'id', 'userid' => 2]], ['question.id', 'question.text', 'vote.vote(myvote)'], ['question.id' => 6]). ",
    "dragonares5": "I'm having this problem too, looks like Medoo is not inserting the number type as pure integer, returning \"column\".\"12490\" instead.\n'[>]UIGAUserItem(diamond)' => [\n                'u.LoginUID' => 'LoginUID',\n                'diamond.ItemID' => 12490\n            ],\nThis code will become\n... LEFT JOIN \"UIGAUserItem\" AS \"diamond\" ON  \"u\".\"LoginUID\" = \"diamond\".\"LoginUID\" AND \"diamond\".\"ItemID\" = \"diamond\".\"12490\"\nBut, the correct one is\"ItemID\" = 12490, that will work perfectly here in SQL Server 2017.\nNote: The 12490 is fixed static value, so i dont have it on the column to compare with.. selectContext() function:\n```\n$joins = [];\nforeach ($relation as $key => $value)\n{\n    $joins[] = (\n        strpos($key, '.') > 0 ?\n            // For ['tableB.column' => 'column']\n            $this->columnQuote($key) :\n                        // For ['column1' => 'column2']\n            $table . '.\"' . $key . '\"'\n    ) .\n    ' = ' .\n        //Return the integer if variable type is numeric\n    (is_numeric($value) ? $value : ($this->tableQuote(isset($match[ 'alias' ]) ? $match[ 'alias' ] : $match[ 'table' ]) . '.\"' . $value . '\"'));\n}\n```\nIt's working now with this code.. ",
    "scr4bble": "I have the same issue. I would like to use a JOIN clause and compare a column with a constant value in \"ON\" clause.\nExample:\nSELECT *\nfrom bookings\nLEFT JOIN other_table\nON bookings.booking_id = other_table.booking_id\nAND other_table.some_column = 42\nHow to use \"some_column = 42\" condition in JOIN clause?. @sourabhbajaj thank you but I have solved it in raw sql query. I just wanted to point out that it is missing in the framework and that @catfan might want to consider supporting it :). ",
    "LucaRainone": "I had the same issue. The problem happens when we configure Medoo with dsn option and we try to use magic methods like insert or update.\nIn fact, seeing the code, we have the init command that allows you to use the double quote for tableQuote 'SET SQL_MODE=ANSI_QUOTES'; here\nhttps://github.com/catfan/Medoo/blob/master/src/Medoo.php#L125\nbut this command is unreachable if there is the dsn option, regardless the presence of database_type option.\nI made 2 pull request.\nhttps://github.com/catfan/Medoo/pull/784\nhttps://github.com/catfan/Medoo/pull/785\nThe first one add the init commands also in dsn builder section BUT only if database_type is set. Reading the doc, I think that it's absolutely coherent with it. This solve this issue.\nThe second is more invasive. Because the above command change the query syntax (https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_ansi_quotes) \n\nWith ANSI_QUOTES enabled, you cannot use double quotation marks to quote literal strings because they are interpreted as identifiers.\n\nI try to respect the default behavior of mysql engine. So I need to configure the tableQuote and tableColumn character if the driver is mysql.\nBecause there are only few issues for this problem, in the pull request I made the new feature only for dsn options but it should be a global behavior I think.\nHowever there are no tests and I don't know how many things can breaks this \"feature\".. Code to reproduce:\n```php\nrequire 'vendor/autoload.php';\nuse Medoo\\Medoo;\n// initialize with dsn param\n$db = new Medoo([\n        'dsn'      => [\n            'driver'  => \"mysql\",\n            'host'    => \"localhost\", // use your host\n            'port'    => 3306\n        ],\n        'database_type' => 'mysql',\n        'username' => \"root\", // use your credential\n        'password' => \"root\",  // use your credential\n]);\n$stmt = $db->insert(\"mytable\", ['mycol' => 1]);\nvar_dump($stmt->errorInfo()[2]);\n```\nexpected result (in case of no database previous selection):\n\n'No database selected'\n\nactual result:\n\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '\"mytable\" (\"mycol\") VALUES (1)' at line 1. In doc:\nYou can also use customized DSN to connect the database that Medoo didn't supported by default, especially for some new database requiring special DSN parameter for database connection, or if you want to add more DSN parameters value for connection than original one.\n\nThere is no explicity deny for using this with MySQL. (And I used this because I've already a shared array for dsn connection: I could not imagine all these implications).\nBut anyway the main problem, for me, is that Medoo change the sql_mode.\nIf the sql_mode is set as TRADITIONAL by default, as I had, the MySQL does not allows dirty insert or update (missing fields without default value, zero time dates and so on). \nI totally miss all these restrictions using Medoo, and I don't realized it (because I don't should care about it works internally).\nA workaround is to do on app init:\nphp\n$db->query(\"SET sql_mode='TRADITIONAL,ANSI_QUOTES'\");\nMy opinion: I encountered a lot of problems with something of simple (adding custom query with double quotes for string before realizing the problem)  and all because the change of sql_mode. I don't know if there are iron reasons for this, but if not, please consider of don't do it.\n. I understand the reasons and the legitim approach.\nMaybe the first pull request is still valid because it allows you to build a Medoo instance with dsn attribute exactly like the primary way, if and only if the \"database_type\" option is set (as doc says: allowed but not mandatory in this case). Otherwise you can close both pull request\nThanks for clarification.. ",
    "merkjs": "Thanks for reply\nI think, I have installed Postgres PDO successfully. Because this script works well (even if I uncomment semicolons in .ini file);\n\n$dsn = \"pgsql:host=localhost;port=5432;dbname=xxx;user=macbook;password=\";\ntry{\n// create a PostgreSQL database connection\n$conn = new PDO($dsn);\n// display a message if connected to the PostgreSQL successfully\nif($conn){\necho \"Connected to the $db database successfully!\";\n}\n}catch (PDOException $e){\n// report error message\necho $e->getMessage();\n}\n\nI don't know whats is wrong. There is an another PDO library for PHP ?\nHere you can find my php info ;\nhttps://jmp.sh/r3ndKmr. Now it works, thanks a lot... ",
    "sylvain-schneider": "oh, yes, thank you !. ",
    "dfanica": "try oci8 instead of oracle. ",
    "iranalves85": "Thank You. I wasted hours thinking whats wrong with my code. Save me a lot time. . ",
    "chuv1": "Oh, I see. That's why there were no hint in IDE. Sorry for that.. ",
    "baciotti": "Hi, There is no problem! The translation wasn\u00b4t worthless because I needed to translate to share with my students.\nKeep the good work, \nregards, Tiago. ",
    "lt0501": "solved,columns relationsgip v1.5.7.thank you very much.. ",
    "bhullar89": "Using below , resolves the issues\n$medoo->select('actions', ['area_name' => Medoo::raw('DISTINCT(area_name)')]). ",
    "metanite": "This is my workaround for the problem.\n$query = $this->exec('SELECT COUNT(*) VALUE FROM DUAL WHERE EXISTS(' . $this->selectContext($table, $map, $join, $column, $where, 1) . ')', $map);. ",
    "hainuo": "It's a good solution.\n. ",
    "deawx": "\"AND\" => [ \n        \"field1\" => [\"value1\", \"value3\", \"value3\"],\n               \"field2\" => [\"value2\", \"value4\", \"value6\"]\n    ]\nPlease check https://medoo.in/api/where. you can create your self for test it.. MySQL:\n\"With no argument, LAST_INSERT_ID() returns a BIGINT UNSIGNED (64-bit) value representing the first automatically generated value successfully inserted for an AUTO_INCREMENT column as a result of the most recently executed INSERT statement.\"\nMariaDB:\n\"LAST_INSERT_ID() (no arguments) returns the first automatically generated value successfully inserted for an AUTO_INCREMENT column as a result of the most recently executed INSERT statement.\"\nThis is clearly not what lastInsertId's own documentation states. Hopefully this will save someone from debugging the cause of id mismatch.\nREF: http://php.net/manual/en/pdo.lastinsertid.php. Some cases of my work. I have to set the variable In order to match the work of the customer.\nNow, I solved the problem by using $db->query \nThankz catfan.\nMedoo is the best.. Thank you very much catfan.. ",
    "elshobokshy": "@catfan and PHP 7.3?. ",
    "jerrac": "Never mind. If found some code before my select call if(empty($offset)) can evaluate to true when $offset = 0... Inside that if statement, I was selecting all rows.. ",
    "WrongWay": "I extended Medoo with a class of mine that checks if there are errors after Medoo::exec() and throws an exception.. Set the columns param as a string, not an array.. ",
    "getvivekv": "@wufengwuyu13  Have you found a solution? . ",
    "wufengwuyu13": "@getvivekv \nhttps://github.com/catfan/Medoo/issues/631#issue-258239939. ",
    "ImPossiblee": "i cant download it there and i think the error is from database i cant\nconnect the website to database ............\nCatfan notifications@github.com, 20 Kas 2018 Sal, 16:02 tarihinde \u015funu\nyazd\u0131:\n\nIt's telling you did not install the PDO driver.\nRead PHP PDO Driver Installation section from https://medoo.in/api/new\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/catfan/Medoo/issues/801#issuecomment-440303935, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ArF1g-e3HtB6ApyvGx5F4vKZ1eRHX6zXks5uxBmEgaJpZM4YqAQU\n.\n. \n",
    "mini-fan": "$data_set = array_column($db->select(\"...\"), 'id');. > That just gets 'id' column (in an overcomplicated way), but what if you want all columns just with different indexes?\nYou can encapsulate a simple way to fulfill your needs without having to struggle to add this method to \u201cmedoo\u201d, right?. ",
    "keombre": "That just gets 'id' column (in an overcomplicated way), but what if you want all columns just with different indexes?. Well I already filed a PR and implementation of this feature was super easy.\nOf course, you can loop through all data and modify them to your needs but adding this to Medoo saves you the trouble. Plus, it's faster since Medoo already loops through all the result data.. As described in comments in #812, this will be implemented with different syntax.. ",
    "fernandolcardoso": "Sorry, it's a server problem:\nhttps://stackoverflow.com/questions/34301099/ngnix-fastcgi-sent-in-stderr-php-message-php-notice-undefined-variable. ",
    "StackStrategy": "i think, the codes here now is useless\n. ",
    "seijikun": "There seem to be some bugs in this line:\nYou should consider to also checking if count($columnsTemp) == 2 because not every column is a join.\nThe apostrophes ( ' ) should be replaced by ( ` ).\nAnd there seems to be a syntax issue near:    ' AS '\\''\n. "
}